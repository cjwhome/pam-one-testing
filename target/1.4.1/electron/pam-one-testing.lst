
c:/particleProjects/pam-one-testing/target/1.4.1/electron/pam-one-testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00010e80  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08090ea0  08090ea0  00020ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08090ea8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001cc  20000000  08090eac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000010d8  200001d0  200001d0  000401d0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  08091078  08091078  00031078  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080910a0  080910a0  000310a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001b7ee7  00000000  00000000  000310a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000232c5  00000000  00000000  001e8f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002c21e  00000000  00000000  0020c250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000033b0  00000000  00000000  0023846e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000054c8  00000000  00000000  0023b81e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003f971  00000000  00000000  00240ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000548ae  00000000  00000000  00280657  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b95d5  00000000  00000000  002d4f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000fe70  00000000  00000000  0038e4dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00a ff5c 	bl	808aeee <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00a ff61 	bl	808af04 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08090eac 	.word	0x08090eac
 8080050:	200001cc 	.word	0x200001cc
 8080054:	200001d0 	.word	0x200001d0
 8080058:	200012a8 	.word	0x200012a8
 808005c:	200012a8 	.word	0x200012a8

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f008 fe19 	bl	8088c98 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08090e14 	.word	0x08090e14
 8080088:	08090e9c 	.word	0x08090e9c

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f001 bee0 	b.w	8081e50 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f004 fdfb 	bl	8084c8c <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f008 bdbf 	b.w	8088c1c <_post_loop>

0808009e <_ZdlPv>:
 808009e:	f007 bc9b 	b.w	80879d8 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr

080800b2 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b2:	b148      	cbz	r0, 80800c8 <null_ptr_check+0x16>
 80800b4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800b6:	b13b      	cbz	r3, 80800c8 <null_ptr_check+0x16>
 80800b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800ba:	b12b      	cbz	r3, 80800c8 <null_ptr_check+0x16>
 80800bc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800be:	fab0 f080 	clz	r0, r0
 80800c2:	0940      	lsrs	r0, r0, #5
 80800c4:	4240      	negs	r0, r0
 80800c6:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800c8:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800cc:	4770      	bx	lr

080800ce <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d0:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d2:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d4:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d6:	f7ff ffec 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800da:	4605      	mov	r5, r0
 80800dc:	bb50      	cbnz	r0, 8080134 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800de:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80800e2:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e4:	bf14      	ite	ne
 80800e6:	2300      	movne	r3, #0
 80800e8:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80800ea:	429a      	cmp	r2, r3
 80800ec:	d022      	beq.n	8080134 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80800ee:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f0:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f2:	2301      	movs	r3, #1
 80800f4:	f10d 0207 	add.w	r2, sp, #7
 80800f8:	21f3      	movs	r1, #243	; 0xf3
 80800fa:	7860      	ldrb	r0, [r4, #1]
 80800fc:	47b0      	blx	r6
 80800fe:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080102:	b110      	cbz	r0, 808010a <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080104:	f06f 0501 	mvn.w	r5, #1
 8080108:	e014      	b.n	8080134 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010a:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808010c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010e:	f003 0210 	and.w	r2, r3, #16
 8080112:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080116:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080118:	f023 0310 	bic.w	r3, r3, #16
 808011c:	4313      	orrs	r3, r2
 808011e:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080122:	f10d 0207 	add.w	r2, sp, #7
 8080126:	2301      	movs	r3, #1
 8080128:	7860      	ldrb	r0, [r4, #1]
 808012a:	47b0      	blx	r6
 808012c:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8080130:	2800      	cmp	r0, #0
 8080132:	d1e7      	bne.n	8080104 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 8080134:	4628      	mov	r0, r5
 8080136:	b002      	add	sp, #8
 8080138:	bd70      	pop	{r4, r5, r6, pc}

0808013a <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 808013a:	b140      	cbz	r0, 808014e <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 808013c:	7803      	ldrb	r3, [r0, #0]
 808013e:	428b      	cmp	r3, r1
 8080140:	d908      	bls.n	8080154 <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8080142:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080144:	7813      	ldrb	r3, [r2, #0]
 8080146:	f043 0302 	orr.w	r3, r3, #2
 808014a:	7013      	strb	r3, [r2, #0]
 808014c:	e002      	b.n	8080154 <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 808014e:	f04f 30ff 	mov.w	r0, #4294967295
 8080152:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 8080154:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 8080156:	4770      	bx	lr

08080158 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808015c:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808015e:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080160:	4688      	mov	r8, r1
 8080162:	4691      	mov	r9, r2
 8080164:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080166:	f7ff ffa4 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 808016a:	4604      	mov	r4, r0
 808016c:	b9a8      	cbnz	r0, 808019a <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 808016e:	78ab      	ldrb	r3, [r5, #2]
 8080170:	b93b      	cbnz	r3, 8080182 <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8080172:	4629      	mov	r1, r5
 8080174:	4630      	mov	r0, r6
 8080176:	f7ff ffaa 	bl	80800ce <set_mem_page>
			if (rslt == BME680_OK)
 808017a:	4604      	mov	r4, r0
 808017c:	b908      	cbnz	r0, 8080182 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 808017e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8080182:	6caf      	ldr	r7, [r5, #72]	; 0x48
 8080184:	464b      	mov	r3, r9
 8080186:	4642      	mov	r2, r8
 8080188:	4631      	mov	r1, r6
 808018a:	7868      	ldrb	r0, [r5, #1]
 808018c:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 808018e:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8080190:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 8080194:	bf18      	it	ne
 8080196:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 808019a:	4620      	mov	r0, r4
 808019c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801a0 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80801a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80801a4:	461e      	mov	r6, r3
 80801a6:	b08b      	sub	sp, #44	; 0x2c
 80801a8:	4683      	mov	fp, r0
 80801aa:	468a      	mov	sl, r1
 80801ac:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801ae:	2100      	movs	r1, #0
 80801b0:	2228      	movs	r2, #40	; 0x28
 80801b2:	4668      	mov	r0, sp
 80801b4:	f00a fea6 	bl	808af04 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801b8:	4630      	mov	r0, r6
 80801ba:	f7ff ff7a 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801be:	4605      	mov	r5, r0
 80801c0:	bba8      	cbnz	r0, 808022e <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801c2:	1e63      	subs	r3, r4, #1
 80801c4:	2b12      	cmp	r3, #18
 80801c6:	d830      	bhi.n	808022a <bme680_set_regs+0x8a>
 80801c8:	f10d 0801 	add.w	r8, sp, #1
 80801cc:	465f      	mov	r7, fp
 80801ce:	46c1      	mov	r9, r8
 80801d0:	f10a 3aff 	add.w	sl, sl, #4294967295
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 80801d4:	b2a4      	uxth	r4, r4
 80801d6:	ebcb 0307 	rsb	r3, fp, r7
 80801da:	b29b      	uxth	r3, r3
 80801dc:	429c      	cmp	r4, r3
 80801de:	d913      	bls.n	8080208 <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 80801e0:	78b3      	ldrb	r3, [r6, #2]
 80801e2:	b943      	cbnz	r3, 80801f6 <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80801e4:	4631      	mov	r1, r6
 80801e6:	7838      	ldrb	r0, [r7, #0]
 80801e8:	f7ff ff71 	bl	80800ce <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80801ec:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80801ee:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80801f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80801f4:	e000      	b.n	80801f8 <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 80801f6:	783b      	ldrb	r3, [r7, #0]
 80801f8:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 80801fc:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8080200:	3701      	adds	r7, #1
 8080202:	f808 3b02 	strb.w	r3, [r8], #2
 8080206:	e7e6      	b.n	80801d6 <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 8080208:	b98d      	cbnz	r5, 808022e <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808020a:	0063      	lsls	r3, r4, #1
 808020c:	3b01      	subs	r3, #1
 808020e:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 8080210:	b29b      	uxth	r3, r3
 8080212:	464a      	mov	r2, r9
 8080214:	f89d 1000 	ldrb.w	r1, [sp]
 8080218:	7870      	ldrb	r0, [r6, #1]
 808021a:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 808021c:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808021e:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080222:	bf18      	it	ne
 8080224:	f06f 0501 	mvnne.w	r5, #1
 8080228:	e001      	b.n	808022e <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 808022a:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 808022e:	4628      	mov	r0, r5
 8080230:	b00b      	add	sp, #44	; 0x2c
 8080232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08080236 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8080236:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080238:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808023a:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808023c:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080240:	f7ff ff37 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080244:	bba0      	cbnz	r0, 80802b0 <bme680_set_sensor_mode+0x7a>
 8080246:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8080248:	4623      	mov	r3, r4
 808024a:	2201      	movs	r2, #1
 808024c:	f10d 0106 	add.w	r1, sp, #6
 8080250:	2074      	movs	r0, #116	; 0x74
 8080252:	f7ff ff81 	bl	8080158 <bme680_get_regs>
			if (rslt == BME680_OK) {
 8080256:	b9a0      	cbnz	r0, 8080282 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8080258:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 808025c:	f013 0503 	ands.w	r5, r3, #3
 8080260:	d011      	beq.n	8080286 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8080262:	f023 0303 	bic.w	r3, r3, #3
 8080266:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 808026a:	2201      	movs	r2, #1
 808026c:	4623      	mov	r3, r4
 808026e:	f10d 0106 	add.w	r1, sp, #6
 8080272:	f10d 0007 	add.w	r0, sp, #7
 8080276:	f7ff ff93 	bl	80801a0 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 808027a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 808027c:	200a      	movs	r0, #10
 808027e:	4798      	blx	r3
 8080280:	e7e2      	b.n	8080248 <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8080282:	2d00      	cmp	r5, #0
 8080284:	d1e0      	bne.n	8080248 <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 8080286:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 808028a:	b18b      	cbz	r3, 80802b0 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 808028c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080290:	f003 0303 	and.w	r3, r3, #3
 8080294:	f022 0203 	bic.w	r2, r2, #3
 8080298:	4313      	orrs	r3, r2
 808029a:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 808029e:	b938      	cbnz	r0, 80802b0 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80802a0:	4623      	mov	r3, r4
 80802a2:	2201      	movs	r2, #1
 80802a4:	f10d 0106 	add.w	r1, sp, #6
 80802a8:	f10d 0007 	add.w	r0, sp, #7
 80802ac:	f7ff ff78 	bl	80801a0 <bme680_set_regs>
		}
	}

	return rslt;
}
 80802b0:	b003      	add	sp, #12
 80802b2:	bd30      	pop	{r4, r5, pc}

080802b4 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80802b8:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802ba:	b088      	sub	sp, #32
 80802bc:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802be:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802c0:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80802c2:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802c6:	9304      	str	r3, [sp, #16]
 80802c8:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802cc:	9306      	str	r3, [sp, #24]
 80802ce:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802d2:	f7ff feee 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802d6:	2800      	cmp	r0, #0
 80802d8:	f040 8164 	bne.w	80805a4 <bme680_set_sensor_settings+0x2f0>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80802dc:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 80802de:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80802e2:	d56a      	bpl.n	80803ba <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80802e4:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 80802e6:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 80802ea:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 80802ee:	d163      	bne.n	80803b8 <bme680_set_sensor_settings+0x104>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80802f0:	235a      	movs	r3, #90	; 0x5a
 80802f2:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 80802f6:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
 80802fa:	2bc7      	cmp	r3, #199	; 0xc7
 80802fc:	d905      	bls.n	808030a <bme680_set_sensor_settings+0x56>
 80802fe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8080302:	bf28      	it	cs
 8080304:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 8080308:	e000      	b.n	808030c <bme680_set_sensor_settings+0x58>
		temp = 200;
 808030a:	23c8      	movs	r3, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 808030c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8080310:	2114      	movs	r1, #20
 8080312:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 8080316:	f202 1299 	addw	r2, r2, #409	; 0x199
 808031a:	4353      	muls	r3, r2
 808031c:	fb93 f3f1 	sdiv	r3, r3, r1
 8080320:	210a      	movs	r1, #10
 8080322:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 8080326:	fb93 f3f1 	sdiv	r3, r3, r1
 808032a:	f994 2011 	ldrsb.w	r2, [r4, #17]
 808032e:	f994 0014 	ldrsb.w	r0, [r4, #20]
 8080332:	f502 7244 	add.w	r2, r2, #784	; 0x310
 8080336:	435a      	muls	r2, r3
 8080338:	f994 3004 	ldrsb.w	r3, [r4, #4]
 808033c:	4358      	muls	r0, r3
 808033e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080342:	fb90 f3f3 	sdiv	r3, r0, r3
 8080346:	021b      	lsls	r3, r3, #8
 8080348:	eb03 0162 	add.w	r1, r3, r2, asr #1
 808034c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8080350:	3304      	adds	r3, #4
 8080352:	fb91 f2f3 	sdiv	r2, r1, r3
 8080356:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 808035a:	2383      	movs	r3, #131	; 0x83
 808035c:	434b      	muls	r3, r1
 808035e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8080362:	fb92 f3f3 	sdiv	r3, r2, r3
 8080366:	2222      	movs	r2, #34	; 0x22
 8080368:	3bfa      	subs	r3, #250	; 0xfa
 808036a:	4353      	muls	r3, r2
 808036c:	2264      	movs	r2, #100	; 0x64
 808036e:	3332      	adds	r3, #50	; 0x32
 8080370:	fb93 f3f2 	sdiv	r3, r3, r2
 8080374:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8080378:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 808037c:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 8080380:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8080384:	d20b      	bcs.n	808039e <bme680_set_sensor_settings+0xea>
 8080386:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 8080388:	2b3f      	cmp	r3, #63	; 0x3f
 808038a:	b2d1      	uxtb	r1, r2
 808038c:	f102 0201 	add.w	r2, r2, #1
 8080390:	d901      	bls.n	8080396 <bme680_set_sensor_settings+0xe2>
			dur = dur / 4;
 8080392:	089b      	lsrs	r3, r3, #2
 8080394:	e7f8      	b.n	8080388 <bme680_set_sensor_settings+0xd4>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 8080396:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 808039a:	b2db      	uxtb	r3, r3
 808039c:	e000      	b.n	80803a0 <bme680_set_sensor_settings+0xec>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 808039e:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80803a0:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80803a4:	2300      	movs	r3, #0
 80803a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80803aa:	2202      	movs	r2, #2
 80803ac:	4623      	mov	r3, r4
 80803ae:	a903      	add	r1, sp, #12
 80803b0:	a802      	add	r0, sp, #8
 80803b2:	f7ff fef5 	bl	80801a0 <bme680_set_regs>
 80803b6:	e000      	b.n	80803ba <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80803b8:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 80803ba:	2300      	movs	r3, #0
 80803bc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80803c0:	b910      	cbnz	r0, 80803c8 <bme680_set_sensor_settings+0x114>
			rslt = bme680_set_sensor_mode(dev);
 80803c2:	4620      	mov	r0, r4
 80803c4:	f7ff ff37 	bl	8080236 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 80803c8:	f006 0510 	and.w	r5, r6, #16
 80803cc:	b2ad      	uxth	r5, r5
 80803ce:	b305      	cbz	r5, 8080412 <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80803d0:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80803d4:	2107      	movs	r1, #7
 80803d6:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 80803da:	f7ff feae 	bl	808013a <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 80803de:	b930      	cbnz	r0, 80803ee <bme680_set_sensor_settings+0x13a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80803e0:	4623      	mov	r3, r4
 80803e2:	2201      	movs	r2, #1
 80803e4:	f10d 0107 	add.w	r1, sp, #7
 80803e8:	2075      	movs	r0, #117	; 0x75
 80803ea:	f7ff feb5 	bl	8080158 <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80803ee:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 80803f2:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80803f4:	009b      	lsls	r3, r3, #2
 80803f6:	f003 021c 	and.w	r2, r3, #28
 80803fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80803fe:	f023 031c 	bic.w	r3, r3, #28
 8080402:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080404:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080406:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808040a:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 808040e:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080412:	06b3      	lsls	r3, r6, #26
 8080414:	d522      	bpl.n	808045c <bme680_set_sensor_settings+0x1a8>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8080416:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808041a:	2108      	movs	r1, #8
 808041c:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080420:	f7ff fe8b 	bl	808013a <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 8080424:	b930      	cbnz	r0, 8080434 <bme680_set_sensor_settings+0x180>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080426:	4623      	mov	r3, r4
 8080428:	2201      	movs	r2, #1
 808042a:	f10d 0107 	add.w	r1, sp, #7
 808042e:	2070      	movs	r0, #112	; 0x70
 8080430:	f7ff fe92 	bl	8080158 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080434:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080438:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808043a:	f023 0208 	bic.w	r2, r3, #8
 808043e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8080442:	f003 0308 	and.w	r3, r3, #8
 8080446:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080448:	aa08      	add	r2, sp, #32
 808044a:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 808044c:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808044e:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080452:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8080456:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 808045a:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 808045c:	07b1      	lsls	r1, r6, #30
 808045e:	d033      	beq.n	80804c8 <bme680_set_sensor_settings+0x214>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8080460:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080464:	2105      	movs	r1, #5
 8080466:	f104 0039 	add.w	r0, r4, #57	; 0x39
 808046a:	f7ff fe66 	bl	808013a <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 808046e:	b930      	cbnz	r0, 808047e <bme680_set_sensor_settings+0x1ca>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080470:	4623      	mov	r3, r4
 8080472:	2201      	movs	r2, #1
 8080474:	f10d 0107 	add.w	r1, sp, #7
 8080478:	2074      	movs	r0, #116	; 0x74
 808047a:	f7ff fe6d 	bl	8080158 <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 808047e:	07f2      	lsls	r2, r6, #31
 8080480:	d509      	bpl.n	8080496 <bme680_set_sensor_settings+0x1e2>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8080482:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080486:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 808048a:	f003 031f 	and.w	r3, r3, #31
 808048e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8080492:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 8080496:	07b3      	lsls	r3, r6, #30
 8080498:	d50b      	bpl.n	80804b2 <bme680_set_sensor_settings+0x1fe>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 808049a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 808049e:	009b      	lsls	r3, r3, #2
 80804a0:	f003 021c 	and.w	r2, r3, #28
 80804a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80804a8:	f023 031c 	bic.w	r3, r3, #28
 80804ac:	4313      	orrs	r3, r2
 80804ae:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 80804b2:	ab08      	add	r3, sp, #32
 80804b4:	442b      	add	r3, r5
 80804b6:	2274      	movs	r2, #116	; 0x74
 80804b8:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80804bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80804c0:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 80804c2:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80804c6:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 80804c8:	0771      	lsls	r1, r6, #29
 80804ca:	d522      	bpl.n	8080512 <bme680_set_sensor_settings+0x25e>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80804cc:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80804d0:	2105      	movs	r1, #5
 80804d2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80804d6:	f7ff fe30 	bl	808013a <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 80804da:	b930      	cbnz	r0, 80804ea <bme680_set_sensor_settings+0x236>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80804dc:	4623      	mov	r3, r4
 80804de:	2201      	movs	r2, #1
 80804e0:	f10d 0107 	add.w	r1, sp, #7
 80804e4:	2072      	movs	r0, #114	; 0x72
 80804e6:	f7ff fe37 	bl	8080158 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80804ea:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80804ee:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80804f0:	f023 0207 	bic.w	r2, r3, #7
 80804f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80804f8:	f003 0307 	and.w	r3, r3, #7
 80804fc:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 80804fe:	aa08      	add	r2, sp, #32
 8080500:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080502:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080504:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080508:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808050c:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080510:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080512:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8080516:	d03c      	beq.n	8080592 <bme680_set_sensor_settings+0x2de>
 8080518:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 808051c:	4642      	mov	r2, r8
 808051e:	2101      	movs	r1, #1
 8080520:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080524:	f7ff fe09 	bl	808013a <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 8080528:	b968      	cbnz	r0, 8080546 <bme680_set_sensor_settings+0x292>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808052a:	4642      	mov	r2, r8
 808052c:	210a      	movs	r1, #10
 808052e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080532:	f7ff fe02 	bl	808013a <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 8080536:	b930      	cbnz	r0, 8080546 <bme680_set_sensor_settings+0x292>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080538:	4623      	mov	r3, r4
 808053a:	2201      	movs	r2, #1
 808053c:	f10d 0107 	add.w	r1, sp, #7
 8080540:	2071      	movs	r0, #113	; 0x71
 8080542:	f7ff fe09 	bl	8080158 <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 8080546:	0672      	lsls	r2, r6, #25
 8080548:	d50b      	bpl.n	8080562 <bme680_set_sensor_settings+0x2ae>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 808054a:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 808054e:	011b      	lsls	r3, r3, #4
 8080550:	f003 0210 	and.w	r2, r3, #16
 8080554:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080558:	f023 0310 	bic.w	r3, r3, #16
 808055c:	4313      	orrs	r3, r2
 808055e:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 8080562:	0633      	lsls	r3, r6, #24
 8080564:	d50a      	bpl.n	808057c <bme680_set_sensor_settings+0x2c8>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8080566:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808056a:	f023 020f 	bic.w	r2, r3, #15
 808056e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8080572:	f003 030f 	and.w	r3, r3, #15
 8080576:	4313      	orrs	r3, r2
 8080578:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808057c:	ab08      	add	r3, sp, #32
 808057e:	442b      	add	r3, r5
 8080580:	2271      	movs	r2, #113	; 0x71
 8080582:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 8080586:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 808058a:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 808058c:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080590:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 8080592:	b928      	cbnz	r0, 80805a0 <bme680_set_sensor_settings+0x2ec>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8080594:	4623      	mov	r3, r4
 8080596:	462a      	mov	r2, r5
 8080598:	a906      	add	r1, sp, #24
 808059a:	a804      	add	r0, sp, #16
 808059c:	f7ff fe00 	bl	80801a0 <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80805a0:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80805a4:	b008      	add	sp, #32
 80805a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080805ac <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80805ac:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805ae:	4b18      	ldr	r3, [pc, #96]	; (8080610 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80805b0:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805b2:	6818      	ldr	r0, [r3, #0]
 80805b4:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805b6:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805b8:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805bc:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805c0:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805c2:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805c4:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80805c8:	a802      	add	r0, sp, #8
 80805ca:	4402      	add	r2, r0
 80805cc:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805d0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805d4:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80805d6:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 80805da:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80805dc:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80805e0:	4413      	add	r3, r2
 80805e2:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80805e6:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80805e8:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80805ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80805f0:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80805f2:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 80805f6:	3301      	adds	r3, #1
 80805f8:	b29b      	uxth	r3, r3
 80805fa:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 80805fc:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8080600:	b11a      	cbz	r2, 808060a <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8080602:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 8080606:	4413      	add	r3, r2
 8080608:	8023      	strh	r3, [r4, #0]
	}
}
 808060a:	b002      	add	sp, #8
 808060c:	bd10      	pop	{r4, pc}
 808060e:	bf00      	nop
 8080610:	0808dd78 	.word	0x0808dd78

08080614 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080618:	4680      	mov	r8, r0
 808061a:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808061c:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 808061e:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080620:	f7ff fd47 	bl	80800b2 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080624:	4605      	mov	r5, r0
 8080626:	2800      	cmp	r0, #0
 8080628:	f040 8167 	bne.w	80808fa <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 808062c:	af04      	add	r7, sp, #16
 808062e:	4601      	mov	r1, r0
 8080630:	220f      	movs	r2, #15
 8080632:	4638      	mov	r0, r7
 8080634:	f00a fc66 	bl	808af04 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080638:	4620      	mov	r0, r4
 808063a:	f7ff fd3a 	bl	80800b2 <null_ptr_check>
 808063e:	4605      	mov	r5, r0
 8080640:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 8080642:	2d00      	cmp	r5, #0
 8080644:	f040 8153 	bne.w	80808ee <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8080648:	4623      	mov	r3, r4
 808064a:	220f      	movs	r2, #15
 808064c:	4639      	mov	r1, r7
 808064e:	201d      	movs	r0, #29
 8080650:	f7ff fd82 	bl	8080158 <bme680_get_regs>
 8080654:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 8080656:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 808065a:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 808065e:	f000 030f 	and.w	r3, r0, #15
 8080662:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 8080666:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 808066a:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 808066e:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080672:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8080676:	f89d 9013 	ldrb.w	r9, [sp, #19]
 808067a:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 808067c:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 8080680:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080684:	9301      	str	r3, [sp, #4]
 8080686:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 808068a:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 808068e:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080690:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8080694:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080698:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808069a:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 808069e:	f003 0a20 	and.w	sl, r3, #32
 80806a2:	ea40 000a 	orr.w	r0, r0, sl
 80806a6:	f003 0310 	and.w	r3, r3, #16
 80806aa:	4318      	orrs	r0, r3
 80806ac:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80806ae:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 80806b0:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806b4:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 80806b8:	f280 8116 	bge.w	80808e8 <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806bc:	0912      	lsrs	r2, r2, #4
 80806be:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 80806c2:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 80806c6:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80806c8:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806cc:	0049      	lsls	r1, r1, #1
 80806ce:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80806d2:	460a      	mov	r2, r1
 80806d4:	17cb      	asrs	r3, r1, #31
 80806d6:	105b      	asrs	r3, r3, #1
 80806d8:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80806dc:	fb02 f603 	mul.w	r6, r2, r3
 80806e0:	fba2 2302 	umull	r2, r3, r2, r2
 80806e4:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 80806e8:	f994 201a 	ldrsb.w	r2, [r4, #26]
 80806ec:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80806f0:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 80806f4:	ea4f 3b23 	mov.w	fp, r3, asr #12
 80806f8:	0113      	lsls	r3, r2, #4
 80806fa:	17df      	asrs	r7, r3, #31
 80806fc:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080700:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080704:	fb03 660b 	mla	r6, r3, fp, r6
 8080708:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 808070c:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808070e:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080710:	0b92      	lsrs	r2, r2, #14
 8080712:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 8080716:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 808071a:	1883      	adds	r3, r0, r2
 808071c:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 808071e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080722:	3380      	adds	r3, #128	; 0x80
 8080724:	121b      	asrs	r3, r3, #8
 8080726:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808072a:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808072c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080730:	105b      	asrs	r3, r3, #1
 8080732:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080736:	109a      	asrs	r2, r3, #2
 8080738:	4352      	muls	r2, r2
 808073a:	12d1      	asrs	r1, r2, #11
 808073c:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 808073e:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080742:	1352      	asrs	r2, r2, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080744:	4359      	muls	r1, r3
 8080746:	0049      	lsls	r1, r1, #1
 8080748:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 808074c:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 8080750:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080754:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080756:	f994 0020 	ldrsb.w	r0, [r4, #32]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 808075a:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808075e:	0140      	lsls	r0, r0, #5
 8080760:	4342      	muls	r2, r0
 8080762:	10d2      	asrs	r2, r2, #3
 8080764:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8080768:	149b      	asrs	r3, r3, #18
 808076a:	8ba2      	ldrh	r2, [r4, #28]
 808076c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8080770:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 8080772:	9a00      	ldr	r2, [sp, #0]
 8080774:	13db      	asrs	r3, r3, #15
 8080776:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
 808077a:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 808077e:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 8080782:	0412      	lsls	r2, r2, #16
 8080784:	eb02 01a1 	add.w	r1, r2, r1, asr #2
 8080788:	f640 4235 	movw	r2, #3125	; 0xc35
 808078c:	eba9 3121 	sub.w	r1, r9, r1, asr #12
 8080790:	4351      	muls	r1, r2
 8080792:	fbb1 f3f3 	udiv	r3, r1, r3
 8080796:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 8080798:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 808079a:	4349      	muls	r1, r1
 808079c:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80807a0:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
 80807a4:	1349      	asrs	r1, r1, #13
 80807a6:	434a      	muls	r2, r1
 80807a8:	1099      	asrs	r1, r3, #2
 80807aa:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80807ac:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80807ae:	1349      	asrs	r1, r1, #13
 80807b0:	eb01 3122 	add.w	r1, r1, r2, asr #12
 80807b4:	fb06 f206 	mul.w	r2, r6, r6
 80807b8:	4356      	muls	r6, r2
 80807ba:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80807be:	4372      	muls	r2, r6
 80807c0:	eb01 4262 	add.w	r2, r1, r2, asr #17
 80807c4:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
 80807c8:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 80807cc:	eb03 1322 	add.w	r3, r3, r2, asr #4
 80807d0:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80807d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80807d6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80807da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80807de:	3380      	adds	r3, #128	; 0x80
 80807e0:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80807e2:	4359      	muls	r1, r3
 80807e4:	2264      	movs	r2, #100	; 0x64
 80807e6:	fb91 f1f2 	sdiv	r1, r1, r2
 80807ea:	f994 000d 	ldrsb.w	r0, [r4, #13]
 80807ee:	4359      	muls	r1, r3
 80807f0:	4358      	muls	r0, r3
 80807f2:	1189      	asrs	r1, r1, #6
 80807f4:	fb90 f0f2 	sdiv	r0, r0, r2
 80807f8:	fb91 f1f2 	sdiv	r1, r1, r2
 80807fc:	8967      	ldrh	r7, [r4, #10]
 80807fe:	4401      	add	r1, r0
 8080800:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8080804:	4379      	muls	r1, r7
 8080806:	9801      	ldr	r0, [sp, #4]
 8080808:	128f      	asrs	r7, r1, #10
 808080a:	9902      	ldr	r1, [sp, #8]
 808080c:	8926      	ldrh	r6, [r4, #8]
 808080e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8080812:	f994 100c 	ldrsb.w	r1, [r4, #12]
 8080816:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
 808081a:	4359      	muls	r1, r3
 808081c:	fb91 f1f2 	sdiv	r1, r1, r2
 8080820:	eba6 0061 	sub.w	r0, r6, r1, asr #1
 8080824:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080828:	f994 0010 	ldrsb.w	r0, [r4, #16]
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
 808082c:	f00e 060f 	and.w	r6, lr, #15
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080830:	4343      	muls	r3, r0
 8080832:	fb93 f2f2 	sdiv	r2, r3, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080836:	f240 503c 	movw	r0, #1340	; 0x53c
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808083a:	7be3      	ldrb	r3, [r4, #15]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 808083c:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080840:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080844:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080846:	435b      	muls	r3, r3
 8080848:	1112      	asrs	r2, r2, #4
 808084a:	129b      	asrs	r3, r3, #10
 808084c:	4353      	muls	r3, r2
 808084e:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080856:	129b      	asrs	r3, r3, #10
 8080858:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 808085a:	4a2a      	ldr	r2, [pc, #168]	; (8080904 <bme680_get_sensor_data+0x2f0>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 808085c:	131b      	asrs	r3, r3, #12
 808085e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080862:	4293      	cmp	r3, r2
 8080864:	bfd4      	ite	le
 8080866:	f8c8 300c 	strle.w	r3, [r8, #12]
 808086a:	f8c8 200c 	strgt.w	r2, [r8, #12]
 808086e:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080872:	2205      	movs	r2, #5
 8080874:	2100      	movs	r1, #0
 8080876:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
 808087a:	4b23      	ldr	r3, [pc, #140]	; (8080908 <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 808087c:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8080880:	fba0 2307 	umull	r2, r3, r0, r7
 8080884:	fb07 3301 	mla	r3, r7, r1, r3
 8080888:	0c10      	lsrs	r0, r2, #16
 808088a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808088e:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080890:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080892:	4f1e      	ldr	r7, [pc, #120]	; (808090c <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080894:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 8080898:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 808089c:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808a0:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808a4:	fbae 6700 	umull	r6, r7, lr, r0
 80808a8:	fb0e 7701 	mla	r7, lr, r1, r7
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808ac:	f04f 0300 	mov.w	r3, #0
 80808b0:	f143 33ff 	adc.w	r3, r3, #4294967295
 80808b4:	1812      	adds	r2, r2, r0
 80808b6:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808b8:	0a70      	lsrs	r0, r6, #9
 80808ba:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 80808be:	1279      	asrs	r1, r7, #9
 80808c0:	105f      	asrs	r7, r3, #1
 80808c2:	ea4f 0632 	mov.w	r6, r2, rrx
 80808c6:	1980      	adds	r0, r0, r6
 80808c8:	4179      	adcs	r1, r7
 80808ca:	f009 ffaf 	bl	808a82c <__aeabi_ldivmod>
 80808ce:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 80808d2:	b995      	cbnz	r5, 80808fa <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
 80808d4:	f998 3000 	ldrsb.w	r3, [r8]
 80808d8:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 80808da:	bfba      	itte	lt
 80808dc:	2301      	movlt	r3, #1
 80808de:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 80808e2:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 80808e6:	e008      	b.n	80808fa <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80808e8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80808ea:	200a      	movs	r0, #10
 80808ec:	4798      	blx	r3
 80808ee:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 80808f0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80808f4:	f47f aea5 	bne.w	8080642 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 80808f8:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 80808fa:	4628      	mov	r0, r5
 80808fc:	b009      	add	sp, #36	; 0x24
 80808fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080902:	bf00      	nop
 8080904:	000186a0 	.word	0x000186a0
 8080908:	20000000 	.word	0x20000000
 808090c:	20000040 	.word	0x20000040

08080910 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080910:	4770      	bx	lr

08080912 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080912:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080914:	4602      	mov	r2, r0
 8080916:	f003 0308 	and.w	r3, r3, #8
 808091a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 808091e:	b12b      	cbz	r3, 808092c <_ZN4File9availableEv+0x1a>
 8080920:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8080922:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080924:	1a18      	subs	r0, r3, r0
 8080926:	bf48      	it	mi
 8080928:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 808092c:	4770      	bx	lr

0808092e <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 808092e:	4770      	bx	lr

08080930 <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 8080930:	4770      	bx	lr

08080932 <_ZN6SdFileD0Ev>:
 8080932:	b510      	push	{r4, lr}
 8080934:	4604      	mov	r4, r0
 8080936:	212c      	movs	r1, #44	; 0x2c
 8080938:	f008 fe33 	bl	80895a2 <_ZdlPvj>
 808093c:	4620      	mov	r0, r4
 808093e:	bd10      	pop	{r4, pc}

08080940 <_ZN4FileD0Ev>:
 8080940:	b510      	push	{r4, lr}
 8080942:	4604      	mov	r4, r0
 8080944:	2134      	movs	r1, #52	; 0x34
 8080946:	f008 fe2c 	bl	80895a2 <_ZdlPvj>
 808094a:	4620      	mov	r0, r4
 808094c:	bd10      	pop	{r4, pc}

0808094e <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 808094e:	3008      	adds	r0, #8
 8080950:	f005 bf32 	b.w	80867b8 <_ZN7FatFile5writeEPKvj>

08080954 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080954:	3010      	adds	r0, #16
 8080956:	f005 bf2f 	b.w	80867b8 <_ZN7FatFile5writeEPKvj>

0808095a <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 808095a:	b507      	push	{r0, r1, r2, lr}
 808095c:	ab02      	add	r3, sp, #8
 808095e:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080962:	2201      	movs	r2, #1
 8080964:	4619      	mov	r1, r3
 8080966:	3010      	adds	r0, #16
 8080968:	f005 ff26 	bl	80867b8 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 808096c:	b003      	add	sp, #12
 808096e:	f85d fb04 	ldr.w	pc, [sp], #4

08080972 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080972:	3010      	adds	r0, #16
 8080974:	f005 be94 	b.w	80866a0 <_ZN7FatFile4syncEv>

08080978 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 8080978:	3010      	adds	r0, #16
 808097a:	f005 bdc0 	b.w	80864fe <_ZN7FatFile4peekEv>

0808097e <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 808097e:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080980:	2201      	movs	r2, #1
 8080982:	f10d 0107 	add.w	r1, sp, #7
 8080986:	3010      	adds	r0, #16
 8080988:	f005 fd05 	bl	8086396 <_ZN7FatFile4readEPvj>
 808098c:	2801      	cmp	r0, #1
 808098e:	bf0c      	ite	eq
 8080990:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080994:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 8080998:	b003      	add	sp, #12
 808099a:	f85d fb04 	ldr.w	pc, [sp], #4

0808099e <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 808099e:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809a2:	f005 bbc0 	b.w	8086126 <_ZN9SdSpiCard11writeBlocksEmPKhj>

080809a6 <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 80809a6:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809aa:	f005 baf4 	b.w	8085f96 <_ZN9SdSpiCard10readBlocksEmPhj>

080809ae <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 80809ae:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809b2:	f005 bb33 	b.w	808601c <_ZN9SdSpiCard10writeBlockEmPKh>

080809b6 <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 80809b6:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809ba:	f005 baa4 	b.w	8085f06 <_ZN9SdSpiCard9readBlockEmPh>

080809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 80809be:	b510      	push	{r4, lr}
 80809c0:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80809c2:	2204      	movs	r2, #4
 80809c4:	f006 fe0a 	bl	80875dc <HAL_EEPROM_Put>
        return t;
    }
 80809c8:	4620      	mov	r0, r4
 80809ca:	bd10      	pop	{r4, pc}

080809cc <_Z20remoteReadStoredVars6String>:
        return -1;
    }

}

int remoteReadStoredVars(String mem_address){
 80809cc:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 80809ce:	2300      	movs	r3, #0
 80809d0:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 80809d4:	f007 fcc4 	bl	8088360 <_ZNK6String5toIntEv>
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 80809d8:	2898      	cmp	r0, #152	; 0x98

}

int remoteReadStoredVars(String mem_address){
    uint16_t tempValue = 0;
    int numerical_mem_address = mem_address.toInt();
 80809da:	4604      	mov	r4, r0
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 80809dc:	d80a      	bhi.n	80809f4 <_Z20remoteReadStoredVars6String+0x28>
        EEPROM.get(numerical_mem_address, tempValue);
 80809de:	f008 fd6f 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80809e2:	4620      	mov	r0, r4
 80809e4:	2202      	movs	r2, #2
 80809e6:	f10d 0106 	add.w	r1, sp, #6
 80809ea:	f006 fdef 	bl	80875cc <HAL_EEPROM_Get>
        return tempValue;
 80809ee:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80809f2:	e001      	b.n	80809f8 <_Z20remoteReadStoredVars6String+0x2c>
    }else{
        return -1;
 80809f4:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
 80809f8:	b002      	add	sp, #8
 80809fa:	bd10      	pop	{r4, pc}

080809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
 80809fc:	b510      	push	{r4, lr}
 80809fe:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a00:	2204      	movs	r2, #4
 8080a02:	f006 fde3 	bl	80875cc <HAL_EEPROM_Get>
        return t;
    }
 8080a06:	4620      	mov	r0, r4
 8080a08:	bd10      	pop	{r4, pc}

08080a0a <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080a0a:	b507      	push	{r0, r1, r2, lr}
 8080a0c:	ab02      	add	r3, sp, #8
 8080a0e:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080a12:	2201      	movs	r2, #1
 8080a14:	4619      	mov	r1, r3
 8080a16:	3008      	adds	r0, #8
 8080a18:	f005 fece 	bl	80867b8 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080a1c:	b003      	add	sp, #12
 8080a1e:	f85d fb04 	ldr.w	pc, [sp], #4

08080a22 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080a22:	2300      	movs	r3, #0
 8080a24:	461a      	mov	r2, r3
 8080a26:	4619      	mov	r1, r3
 8080a28:	6840      	ldr	r0, [r0, #4]
 8080a2a:	f006 bf75 	b.w	8087918 <network_off>

08080a2e <_ZN11USARTSerialD0Ev>:
 8080a2e:	b510      	push	{r4, lr}
 8080a30:	4604      	mov	r4, r0
 8080a32:	2114      	movs	r1, #20
 8080a34:	f008 fdb5 	bl	80895a2 <_ZdlPvj>
 8080a38:	4620      	mov	r0, r4
 8080a3a:	bd10      	pop	{r4, pc}

08080a3c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080a3c:	b40e      	push	{r1, r2, r3}
 8080a3e:	b500      	push	{lr}
 8080a40:	b08c      	sub	sp, #48	; 0x30
 8080a42:	aa0d      	add	r2, sp, #52	; 0x34
 8080a44:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080a48:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a4a:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8080a4e:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080a50:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a52:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080a54:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a56:	aa04      	add	r2, sp, #16
 8080a58:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080a5a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a5c:	f006 fed6 	bl	808780c <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8080a60:	b00c      	add	sp, #48	; 0x30
 8080a62:	f85d eb04 	ldr.w	lr, [sp], #4
 8080a66:	b003      	add	sp, #12
 8080a68:	4770      	bx	lr
	...

08080a6c <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080a6c:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080a6e:	4c0c      	ldr	r4, [pc, #48]	; (8080aa0 <_Z22__fetch_global_Serial4v+0x34>)
 8080a70:	6823      	ldr	r3, [r4, #0]
 8080a72:	07db      	lsls	r3, r3, #31
 8080a74:	d411      	bmi.n	8080a9a <_Z22__fetch_global_Serial4v+0x2e>
 8080a76:	4620      	mov	r0, r4
 8080a78:	f7ff fb13 	bl	80800a2 <__cxa_guard_acquire>
 8080a7c:	b168      	cbz	r0, 8080a9a <_Z22__fetch_global_Serial4v+0x2e>
 8080a7e:	4a09      	ldr	r2, [pc, #36]	; (8080aa4 <_Z22__fetch_global_Serial4v+0x38>)
 8080a80:	2103      	movs	r1, #3
 8080a82:	4b09      	ldr	r3, [pc, #36]	; (8080aa8 <_Z22__fetch_global_Serial4v+0x3c>)
 8080a84:	4809      	ldr	r0, [pc, #36]	; (8080aac <_Z22__fetch_global_Serial4v+0x40>)
 8080a86:	f008 fb4d 	bl	8089124 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080a8a:	4620      	mov	r0, r4
 8080a8c:	f7ff fb0e 	bl	80800ac <__cxa_guard_release>
 8080a90:	4a07      	ldr	r2, [pc, #28]	; (8080ab0 <_Z22__fetch_global_Serial4v+0x44>)
 8080a92:	4908      	ldr	r1, [pc, #32]	; (8080ab4 <_Z22__fetch_global_Serial4v+0x48>)
 8080a94:	4805      	ldr	r0, [pc, #20]	; (8080aac <_Z22__fetch_global_Serial4v+0x40>)
 8080a96:	f008 fd7f 	bl	8089598 <__aeabi_atexit>
	return serial4;
}
 8080a9a:	4804      	ldr	r0, [pc, #16]	; (8080aac <_Z22__fetch_global_Serial4v+0x40>)
 8080a9c:	bd10      	pop	{r4, pc}
 8080a9e:	bf00      	nop
 8080aa0:	20000974 	.word	0x20000974
 8080aa4:	200008e8 	.word	0x200008e8
 8080aa8:	2000097c 	.word	0x2000097c
 8080aac:	200007e8 	.word	0x200007e8
 8080ab0:	200001d0 	.word	0x200001d0
 8080ab4:	08080911 	.word	0x08080911

08080ab8 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080ab8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080aba:	f7ff ffd7 	bl	8080a6c <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080abe:	4b07      	ldr	r3, [pc, #28]	; (8080adc <_Z15serialEventRun4v+0x24>)
 8080ac0:	4604      	mov	r4, r0
 8080ac2:	b153      	cbz	r3, 8080ada <_Z15serialEventRun4v+0x22>
 8080ac4:	f008 fb4b 	bl	808915e <_ZN11USARTSerial9isEnabledEv>
 8080ac8:	b138      	cbz	r0, 8080ada <_Z15serialEventRun4v+0x22>
 8080aca:	6823      	ldr	r3, [r4, #0]
 8080acc:	4620      	mov	r0, r4
 8080ace:	691b      	ldr	r3, [r3, #16]
 8080ad0:	4798      	blx	r3
 8080ad2:	2800      	cmp	r0, #0
 8080ad4:	dd01      	ble.n	8080ada <_Z15serialEventRun4v+0x22>
        handler();
 8080ad6:	f3af 8000 	nop.w
 8080ada:	bd10      	pop	{r4, pc}
 8080adc:	00000000 	.word	0x00000000

08080ae0 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080ae0:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080ae2:	4c0c      	ldr	r4, [pc, #48]	; (8080b14 <_Z22__fetch_global_Serial5v+0x34>)
 8080ae4:	6823      	ldr	r3, [r4, #0]
 8080ae6:	07db      	lsls	r3, r3, #31
 8080ae8:	d411      	bmi.n	8080b0e <_Z22__fetch_global_Serial5v+0x2e>
 8080aea:	4620      	mov	r0, r4
 8080aec:	f7ff fad9 	bl	80800a2 <__cxa_guard_acquire>
 8080af0:	b168      	cbz	r0, 8080b0e <_Z22__fetch_global_Serial5v+0x2e>
 8080af2:	4a09      	ldr	r2, [pc, #36]	; (8080b18 <_Z22__fetch_global_Serial5v+0x38>)
 8080af4:	2104      	movs	r1, #4
 8080af6:	4b09      	ldr	r3, [pc, #36]	; (8080b1c <_Z22__fetch_global_Serial5v+0x3c>)
 8080af8:	4809      	ldr	r0, [pc, #36]	; (8080b20 <_Z22__fetch_global_Serial5v+0x40>)
 8080afa:	f008 fb13 	bl	8089124 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080afe:	4620      	mov	r0, r4
 8080b00:	f7ff fad4 	bl	80800ac <__cxa_guard_release>
 8080b04:	4a07      	ldr	r2, [pc, #28]	; (8080b24 <_Z22__fetch_global_Serial5v+0x44>)
 8080b06:	4908      	ldr	r1, [pc, #32]	; (8080b28 <_Z22__fetch_global_Serial5v+0x48>)
 8080b08:	4805      	ldr	r0, [pc, #20]	; (8080b20 <_Z22__fetch_global_Serial5v+0x40>)
 8080b0a:	f008 fd45 	bl	8089598 <__aeabi_atexit>
	return serial5;
}
 8080b0e:	4804      	ldr	r0, [pc, #16]	; (8080b20 <_Z22__fetch_global_Serial5v+0x40>)
 8080b10:	bd10      	pop	{r4, pc}
 8080b12:	bf00      	nop
 8080b14:	200001e4 	.word	0x200001e4
 8080b18:	20000a14 	.word	0x20000a14
 8080b1c:	20000820 	.word	0x20000820
 8080b20:	200001f4 	.word	0x200001f4
 8080b24:	200001d0 	.word	0x200001d0
 8080b28:	08080911 	.word	0x08080911

08080b2c <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080b2c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080b2e:	f7ff ffd7 	bl	8080ae0 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080b32:	4b07      	ldr	r3, [pc, #28]	; (8080b50 <_Z15serialEventRun5v+0x24>)
 8080b34:	4604      	mov	r4, r0
 8080b36:	b153      	cbz	r3, 8080b4e <_Z15serialEventRun5v+0x22>
 8080b38:	f008 fb11 	bl	808915e <_ZN11USARTSerial9isEnabledEv>
 8080b3c:	b138      	cbz	r0, 8080b4e <_Z15serialEventRun5v+0x22>
 8080b3e:	6823      	ldr	r3, [r4, #0]
 8080b40:	4620      	mov	r0, r4
 8080b42:	691b      	ldr	r3, [r3, #16]
 8080b44:	4798      	blx	r3
 8080b46:	2800      	cmp	r0, #0
 8080b48:	dd01      	ble.n	8080b4e <_Z15serialEventRun5v+0x22>
        handler();
 8080b4a:	f3af 8000 	nop.w
 8080b4e:	bd10      	pop	{r4, pc}
 8080b50:	00000000 	.word	0x00000000

08080b54 <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
   * \param[in] spi SPI object for the card.
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080b54:	b538      	push	{r3, r4, r5, lr}
 8080b56:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080b58:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080b5c:	f005 f93f 	bl	8085dde <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080b60:	b1e8      	cbz	r0, 8080b9e <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080b62:	f504 6588 	add.w	r5, r4, #1088	; 0x440
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
 8080b66:	4628      	mov	r0, r5
 8080b68:	f005 fdd0 	bl	808670c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080b6c:	2101      	movs	r1, #1
 8080b6e:	4620      	mov	r0, r4
 8080b70:	f006 f80a 	bl	8086b88 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080b74:	4601      	mov	r1, r0
 8080b76:	b168      	cbz	r0, 8080b94 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x40>
 8080b78:	4621      	mov	r1, r4
 8080b7a:	4628      	mov	r0, r5
 8080b7c:	f005 fbf3 	bl	8086366 <_ZN7FatFile8openRootEP9FatVolume>
 8080b80:	b168      	cbz	r0, 8080b9e <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8080b82:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080b86:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080b8a:	bf16      	itet	ne
 8080b8c:	4b05      	ldrne	r3, [pc, #20]	; (8080ba4 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080b8e:	4618      	moveq	r0, r3
 8080b90:	601d      	strne	r5, [r3, #0]
 8080b92:	bd38      	pop	{r3, r4, r5, pc}
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 8080b94:	4620      	mov	r0, r4
 8080b96:	f005 fff7 	bl	8086b88 <_ZN9FatVolume4initEh>
 8080b9a:	2800      	cmp	r0, #0
 8080b9c:	d1ec      	bne.n	8080b78 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x24>
 8080b9e:	2000      	movs	r0, #0
           FatFileSystem::begin();
  }
 8080ba0:	bd38      	pop	{r3, r4, r5, pc}
 8080ba2:	bf00      	nop
 8080ba4:	20000b74 	.word	0x20000b74

08080ba8 <_Z13writeRegisterhh>:
void locationCallback(float lat, float lon, float accuracy);

//void testsensible();

//test for setting up PMIC manually
void writeRegister(uint8_t reg, uint8_t value) {
 8080ba8:	b538      	push	{r3, r4, r5, lr}
 8080baa:	460c      	mov	r4, r1
 8080bac:	4605      	mov	r5, r0
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080bae:	f008 fcd3 	bl	8089558 <_Z20__fetch_global_Wire3v>
 8080bb2:	216b      	movs	r1, #107	; 0x6b
 8080bb4:	f008 fb5a 	bl	808926c <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080bb8:	f008 fcce 	bl	8089558 <_Z20__fetch_global_Wire3v>
 8080bbc:	6803      	ldr	r3, [r0, #0]
 8080bbe:	4629      	mov	r1, r5
 8080bc0:	689b      	ldr	r3, [r3, #8]
 8080bc2:	4798      	blx	r3
    Wire3.write(value);
 8080bc4:	f008 fcc8 	bl	8089558 <_Z20__fetch_global_Wire3v>
 8080bc8:	6803      	ldr	r3, [r0, #0]
 8080bca:	4621      	mov	r1, r4
 8080bcc:	689b      	ldr	r3, [r3, #8]
 8080bce:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080bd0:	f008 fcc2 	bl	8089558 <_Z20__fetch_global_Wire3v>

}
 8080bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void writeRegister(uint8_t reg, uint8_t value) {
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(reg);
    Wire3.write(value);
    Wire3.endTransmission(true);
 8080bd8:	2101      	movs	r1, #1
 8080bda:	f008 bb4a 	b.w	8089272 <_ZN7TwoWire15endTransmissionEh>
	...

08080be0 <_Z20writeDefaultSettingsv>:
    {
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
 8080be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080be2:	f008 fc6d 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080be6:	f240 6313 	movw	r3, #1555	; 0x613
 8080bea:	ac02      	add	r4, sp, #8
 8080bec:	f844 3d04 	str.w	r3, [r4, #-4]!
 8080bf0:	4621      	mov	r1, r4
 8080bf2:	2000      	movs	r0, #0


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080bf4:	2664      	movs	r6, #100	; 0x64
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080bf6:	f7ff fee2 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080bfa:	f008 fc61 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080bfe:	4621      	mov	r1, r4
 8080c00:	2008      	movs	r0, #8
 8080c02:	9601      	str	r6, [sp, #4]
 8080c04:	f7ff fedb 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(CO_SLOPEA_MEM_ADDRESS, 100);
 8080c08:	f008 fc5a 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080c0c:	4621      	mov	r1, r4
 8080c0e:	2010      	movs	r0, #16
 8080c10:	9601      	str	r6, [sp, #4]
 8080c12:	f7ff fed4 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(CO_SLOPEB_MEM_ADDRESS, 100);
 8080c16:	f008 fc53 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080c1a:	4621      	mov	r1, r4
 8080c1c:	2098      	movs	r0, #152	; 0x98
 8080c1e:	9601      	str	r6, [sp, #4]
 8080c20:	f7ff fecd 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080c24:	f008 fc4c 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080c28:	4621      	mov	r1, r4
 8080c2a:	2018      	movs	r0, #24
 8080c2c:	9601      	str	r6, [sp, #4]
 8080c2e:	f7ff fec6 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080c32:	f008 fc45 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080c36:	4621      	mov	r1, r4
 8080c38:	2020      	movs	r0, #32
 8080c3a:	9601      	str	r6, [sp, #4]
 8080c3c:	f7ff febf 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080c40:	f008 fc3e 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080c44:	4621      	mov	r1, r4
 8080c46:	2028      	movs	r0, #40	; 0x28
 8080c48:	9601      	str	r6, [sp, #4]
 8080c4a:	f7ff feb8 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080c4e:	f008 fc37 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080c52:	4621      	mov	r1, r4
 8080c54:	2030      	movs	r0, #48	; 0x30
 8080c56:	9601      	str	r6, [sp, #4]
 8080c58:	f7ff feb1 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080c5c:	f008 fc30 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080c60:	4621      	mov	r1, r4
 8080c62:	2038      	movs	r0, #56	; 0x38
 8080c64:	9601      	str	r6, [sp, #4]
 8080c66:	f7ff feaa 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080c6a:	f008 fc29 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080c6e:	4621      	mov	r1, r4
 8080c70:	2040      	movs	r0, #64	; 0x40

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080c72:	2500      	movs	r5, #0
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080c74:	9601      	str	r6, [sp, #4]
 8080c76:	f7ff fea2 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080c7a:	f008 fc21 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080c7e:	4621      	mov	r1, r4
 8080c80:	2004      	movs	r0, #4
 8080c82:	9501      	str	r5, [sp, #4]
 8080c84:	f7ff fe9b 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(CO_ZEROA_MEM_ADDRESS, 0);
 8080c88:	f008 fc1a 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080c8c:	4621      	mov	r1, r4
 8080c8e:	200c      	movs	r0, #12
 8080c90:	9501      	str	r5, [sp, #4]
 8080c92:	f7ff fe94 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(CO_ZEROB_MEM_ADDRESS, 0);
 8080c96:	f008 fc13 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080c9a:	4621      	mov	r1, r4
 8080c9c:	2094      	movs	r0, #148	; 0x94
 8080c9e:	9501      	str	r5, [sp, #4]
 8080ca0:	f7ff fe8d 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080ca4:	f008 fc0c 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080ca8:	4621      	mov	r1, r4
 8080caa:	2014      	movs	r0, #20
 8080cac:	9501      	str	r5, [sp, #4]
 8080cae:	f7ff fe86 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8080cb2:	f008 fc05 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080cb6:	4621      	mov	r1, r4
 8080cb8:	201c      	movs	r0, #28
 8080cba:	9501      	str	r5, [sp, #4]
 8080cbc:	f7ff fe7f 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8080cc0:	f008 fbfe 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080cc4:	4621      	mov	r1, r4
 8080cc6:	2024      	movs	r0, #36	; 0x24
 8080cc8:	9501      	str	r5, [sp, #4]
 8080cca:	f7ff fe78 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8080cce:	f008 fbf7 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080cd2:	4621      	mov	r1, r4
 8080cd4:	202c      	movs	r0, #44	; 0x2c
 8080cd6:	9501      	str	r5, [sp, #4]
 8080cd8:	f7ff fe71 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8080cdc:	f008 fbf0 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080ce0:	4621      	mov	r1, r4
 8080ce2:	2034      	movs	r0, #52	; 0x34
 8080ce4:	9501      	str	r5, [sp, #4]
 8080ce6:	f7ff fe6a 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8080cea:	f008 fbe9 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080cee:	4621      	mov	r1, r4
 8080cf0:	203c      	movs	r0, #60	; 0x3c
 8080cf2:	9501      	str	r5, [sp, #4]
 8080cf4:	f7ff fe63 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8080cf8:	f008 fbe2 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080cfc:	4621      	mov	r1, r4
 8080cfe:	2044      	movs	r0, #68	; 0x44
 8080d00:	9501      	str	r5, [sp, #4]
 8080d02:	f7ff fe5c 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8080d06:	f008 fbdb 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080d0a:	4621      	mov	r1, r4
 8080d0c:	2048      	movs	r0, #72	; 0x48
 8080d0e:	9501      	str	r5, [sp, #4]
 8080d10:	f7ff fe55 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8080d14:	f008 fbd4 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080d18:	4621      	mov	r1, r4
 8080d1a:	2058      	movs	r0, #88	; 0x58
 8080d1c:	9501      	str	r5, [sp, #4]
 8080d1e:	f7ff fe4e 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080d22:	f008 fbcd 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080d26:	4941      	ldr	r1, [pc, #260]	; (8080e2c <_Z20writeDefaultSettingsv+0x24c>)
 8080d28:	205c      	movs	r0, #92	; 0x5c
 8080d2a:	f7ff fe48 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 8080d2e:	f008 fbc7 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080d36:	4621      	mov	r1, r4
 8080d38:	204c      	movs	r0, #76	; 0x4c
 8080d3a:	9301      	str	r3, [sp, #4]
 8080d3c:	f7ff fe3f 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8080d40:	f008 fbbe 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080d44:	f242 7310 	movw	r3, #10000	; 0x2710
 8080d48:	4621      	mov	r1, r4
 8080d4a:	2050      	movs	r0, #80	; 0x50
 8080d4c:	9301      	str	r3, [sp, #4]
 8080d4e:	f7ff fe36 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 8080d52:	f008 fbb5 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080d56:	4621      	mov	r1, r4
 8080d58:	f06f 0306 	mvn.w	r3, #6
 8080d5c:	2054      	movs	r0, #84	; 0x54
 8080d5e:	9301      	str	r3, [sp, #4]
 8080d60:	f7ff fe2d 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    Time.zone(tempValue);
 8080d64:	4b32      	ldr	r3, [pc, #200]	; (8080e30 <_Z20writeDefaultSettingsv+0x250>)
 8080d66:	6818      	ldr	r0, [r3, #0]
 8080d68:	f009 fb20 	bl	808a3ac <__aeabi_i2f>
 8080d6c:	f007 fd4a 	bl	8088804 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8080d70:	f008 fba6 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080d74:	4621      	mov	r1, r4
 8080d76:	2060      	movs	r0, #96	; 0x60
 8080d78:	9501      	str	r5, [sp, #4]
 8080d7a:	f7ff fe20 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080d7e:	f008 fb9f 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080d82:	4621      	mov	r1, r4
 8080d84:	4630      	mov	r0, r6
 8080d86:	9501      	str	r5, [sp, #4]
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080d88:	2601      	movs	r6, #1
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
    Time.zone(tempValue);
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080d8a:	f7ff fe18 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080d8e:	f008 fb97 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080d92:	4621      	mov	r1, r4
 8080d94:	2068      	movs	r0, #104	; 0x68
 8080d96:	9601      	str	r6, [sp, #4]
 8080d98:	f7ff fe11 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8080d9c:	f008 fb90 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080da0:	4621      	mov	r1, r4
 8080da2:	206c      	movs	r0, #108	; 0x6c
 8080da4:	9501      	str	r5, [sp, #4]
 8080da6:	f7ff fe0a 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS,0);
 8080daa:	f008 fb89 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080dae:	4621      	mov	r1, r4
 8080db0:	2070      	movs	r0, #112	; 0x70
 8080db2:	9501      	str	r5, [sp, #4]
 8080db4:	f7ff fe03 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8080db8:	f008 fb82 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080dbc:	4621      	mov	r1, r4
 8080dbe:	2074      	movs	r0, #116	; 0x74
 8080dc0:	9601      	str	r6, [sp, #4]
 8080dc2:	f7ff fdfc 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 8080dc6:	f008 fb7b 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080dca:	4621      	mov	r1, r4
 8080dcc:	2078      	movs	r0, #120	; 0x78
 8080dce:	9601      	str	r6, [sp, #4]
 8080dd0:	f7ff fdf5 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8080dd4:	f008 fb74 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080dd8:	4621      	mov	r1, r4
 8080dda:	207c      	movs	r0, #124	; 0x7c
 8080ddc:	9501      	str	r5, [sp, #4]
 8080dde:	f7ff fdee 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 8080de2:	f008 fb6d 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080de6:	4621      	mov	r1, r4
 8080de8:	2080      	movs	r0, #128	; 0x80
 8080dea:	9601      	str	r6, [sp, #4]
 8080dec:	f7ff fde7 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8080df0:	f008 fb66 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080df4:	4621      	mov	r1, r4
 8080df6:	2084      	movs	r0, #132	; 0x84
 8080df8:	9501      	str	r5, [sp, #4]
 8080dfa:	f7ff fde0 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 8080dfe:	f008 fb5f 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080e02:	4621      	mov	r1, r4
 8080e04:	2088      	movs	r0, #136	; 0x88
 8080e06:	9501      	str	r5, [sp, #4]
 8080e08:	f7ff fdd9 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, 0);
 8080e0c:	f008 fb58 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080e10:	4621      	mov	r1, r4
 8080e12:	208c      	movs	r0, #140	; 0x8c
 8080e14:	9501      	str	r5, [sp, #4]
 8080e16:	f7ff fdd2 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 8080e1a:	f008 fb51 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080e1e:	4621      	mov	r1, r4
 8080e20:	2090      	movs	r0, #144	; 0x90
 8080e22:	9501      	str	r5, [sp, #4]
 8080e24:	f7ff fdcb 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
}
 8080e28:	b002      	add	sp, #8
 8080e2a:	bd70      	pop	{r4, r5, r6, pc}
 8080e2c:	20000b34 	.word	0x20000b34
 8080e30:	20000b64 	.word	0x20000b64

08080e34 <_Z14readStoredVarsv>:
    }else{
        return -1;
    }
}
//read all eeprom stored variables
void readStoredVars(void){
 8080e34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    //just changing the rh calibration for temporary!! -- remove me!!
    //these values were determined by John Birks from 2019 cdphe study at la casa in denver February 2019



    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8080e38:	4cc2      	ldr	r4, [pc, #776]	; (8081144 <_Z14readStoredVarsv+0x310>)
 8080e3a:	f008 fb41 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080e3e:	4621      	mov	r1, r4
 8080e40:	2000      	movs	r0, #0
 8080e42:	f7ff fddb 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    if(DEVICE_id == -1){
 8080e46:	6823      	ldr	r3, [r4, #0]
 8080e48:	3301      	adds	r3, #1
 8080e4a:	d104      	bne.n	8080e56 <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 8080e4c:	f240 6313 	movw	r3, #1555	; 0x613
 8080e50:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 8080e52:	f7ff fec5 	bl	8080be0 <_Z20writeDefaultSettingsv>
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8080e56:	f008 fb33 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080e5a:	a901      	add	r1, sp, #4
 8080e5c:	2008      	movs	r0, #8
 8080e5e:	f7ff fdcd 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8080e62:	9801      	ldr	r0, [sp, #4]
 8080e64:	f009 faa2 	bl	808a3ac <__aeabi_i2f>
 8080e68:	49b7      	ldr	r1, [pc, #732]	; (8081148 <_Z14readStoredVarsv+0x314>)
 8080e6a:	f009 fba7 	bl	808a5bc <__aeabi_fdiv>
 8080e6e:	f8df 9364 	ldr.w	r9, [pc, #868]	; 80811d4 <_Z14readStoredVarsv+0x3a0>
    EEPROM.get(CO_SLOPEA_MEM_ADDRESS, tempValue);
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
 8080e72:	f8df 8364 	ldr.w	r8, [pc, #868]	; 80811d8 <_Z14readStoredVarsv+0x3a4>
        writeDefaultSettings();
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8080e76:	f8c9 0000 	str.w	r0, [r9]
    EEPROM.get(CO_SLOPEA_MEM_ADDRESS, tempValue);
 8080e7a:	f008 fb21 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080e7e:	a901      	add	r1, sp, #4
 8080e80:	2010      	movs	r0, #16
 8080e82:	f7ff fdbb 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
 8080e86:	9801      	ldr	r0, [sp, #4]
 8080e88:	f009 fa90 	bl	808a3ac <__aeabi_i2f>
 8080e8c:	49ae      	ldr	r1, [pc, #696]	; (8081148 <_Z14readStoredVarsv+0x314>)
 8080e8e:	f009 fb95 	bl	808a5bc <__aeabi_fdiv>
 8080e92:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPEB_MEM_ADDRESS, tempValue);
 8080e96:	f008 fb13 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080e9a:	a901      	add	r1, sp, #4
 8080e9c:	2098      	movs	r0, #152	; 0x98
 8080e9e:	f7ff fdad 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    CO_slopeB = tempValue;
    CO_slopeB /= 100;
 8080ea2:	9801      	ldr	r0, [sp, #4]
 8080ea4:	f009 fa82 	bl	808a3ac <__aeabi_i2f>
 8080ea8:	49a7      	ldr	r1, [pc, #668]	; (8081148 <_Z14readStoredVarsv+0x314>)
 8080eaa:	f009 fb87 	bl	808a5bc <__aeabi_fdiv>
 8080eae:	4fa7      	ldr	r7, [pc, #668]	; (808114c <_Z14readStoredVarsv+0x318>)
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8080eb0:	4ea7      	ldr	r6, [pc, #668]	; (8081150 <_Z14readStoredVarsv+0x31c>)
    EEPROM.get(CO_SLOPEA_MEM_ADDRESS, tempValue);
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
    EEPROM.get(CO_SLOPEB_MEM_ADDRESS, tempValue);
    CO_slopeB = tempValue;
    CO_slopeB /= 100;
 8080eb2:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8080eb4:	f008 fb04 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080eb8:	a901      	add	r1, sp, #4
 8080eba:	2018      	movs	r0, #24
 8080ebc:	f7ff fd9e 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8080ec0:	9801      	ldr	r0, [sp, #4]
 8080ec2:	f009 fa73 	bl	808a3ac <__aeabi_i2f>
 8080ec6:	49a0      	ldr	r1, [pc, #640]	; (8081148 <_Z14readStoredVarsv+0x314>)
 8080ec8:	f009 fb78 	bl	808a5bc <__aeabi_fdiv>
 8080ecc:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8080ece:	f008 faf7 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080ed2:	a901      	add	r1, sp, #4
 8080ed4:	2020      	movs	r0, #32
 8080ed6:	f7ff fd91 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8080eda:	9801      	ldr	r0, [sp, #4]
 8080edc:	f009 fa66 	bl	808a3ac <__aeabi_i2f>
 8080ee0:	4999      	ldr	r1, [pc, #612]	; (8081148 <_Z14readStoredVarsv+0x314>)
 8080ee2:	f009 fb6b 	bl	808a5bc <__aeabi_fdiv>
 8080ee6:	4d9b      	ldr	r5, [pc, #620]	; (8081154 <_Z14readStoredVarsv+0x320>)
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8080ee8:	4c9b      	ldr	r4, [pc, #620]	; (8081158 <_Z14readStoredVarsv+0x324>)
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8080eea:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8080eec:	f008 fae8 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080ef0:	a901      	add	r1, sp, #4
 8080ef2:	2028      	movs	r0, #40	; 0x28
 8080ef4:	f7ff fd82 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8080ef8:	9801      	ldr	r0, [sp, #4]
 8080efa:	f009 fa57 	bl	808a3ac <__aeabi_i2f>
 8080efe:	4992      	ldr	r1, [pc, #584]	; (8081148 <_Z14readStoredVarsv+0x314>)
 8080f00:	f009 fb5c 	bl	808a5bc <__aeabi_fdiv>
 8080f04:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 8080f06:	f008 fadb 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080f0a:	a901      	add	r1, sp, #4
 8080f0c:	2030      	movs	r0, #48	; 0x30
 8080f0e:	f7ff fd75 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    temp_slope = tempValue;
    temp_slope /= 100;
 8080f12:	9801      	ldr	r0, [sp, #4]
 8080f14:	f009 fa4a 	bl	808a3ac <__aeabi_i2f>
 8080f18:	498b      	ldr	r1, [pc, #556]	; (8081148 <_Z14readStoredVarsv+0x314>)
 8080f1a:	f009 fb4f 	bl	808a5bc <__aeabi_fdiv>
 8080f1e:	4b8f      	ldr	r3, [pc, #572]	; (808115c <_Z14readStoredVarsv+0x328>)
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8080f20:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 80811dc <_Z14readStoredVarsv+0x3a8>
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
    temp_slope = tempValue;
    temp_slope /= 100;
 8080f24:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8080f26:	f008 facb 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080f2a:	a901      	add	r1, sp, #4
 8080f2c:	2038      	movs	r0, #56	; 0x38
 8080f2e:	f7ff fd65 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    pressure_slope = tempValue;
    pressure_slope /= 100;
 8080f32:	9801      	ldr	r0, [sp, #4]
 8080f34:	f009 fa3a 	bl	808a3ac <__aeabi_i2f>
 8080f38:	4983      	ldr	r1, [pc, #524]	; (8081148 <_Z14readStoredVarsv+0x314>)
 8080f3a:	f009 fb3f 	bl	808a5bc <__aeabi_fdiv>
 8080f3e:	4b88      	ldr	r3, [pc, #544]	; (8081160 <_Z14readStoredVarsv+0x32c>)
 8080f40:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8080f42:	f008 fabd 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080f46:	a901      	add	r1, sp, #4
 8080f48:	2040      	movs	r0, #64	; 0x40
 8080f4a:	f7ff fd57 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    rh_slope = tempValue;
    rh_slope /= 100;
 8080f4e:	9801      	ldr	r0, [sp, #4]
 8080f50:	f009 fa2c 	bl	808a3ac <__aeabi_i2f>
 8080f54:	497c      	ldr	r1, [pc, #496]	; (8081148 <_Z14readStoredVarsv+0x314>)
 8080f56:	f009 fb31 	bl	808a5bc <__aeabi_fdiv>
 8080f5a:	4b82      	ldr	r3, [pc, #520]	; (8081164 <_Z14readStoredVarsv+0x330>)
 8080f5c:	6018      	str	r0, [r3, #0]

    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 8080f5e:	f008 faaf 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080f62:	4981      	ldr	r1, [pc, #516]	; (8081168 <_Z14readStoredVarsv+0x334>)
 8080f64:	2004      	movs	r0, #4
 8080f66:	f7ff fd49 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(CO_ZEROA_MEM_ADDRESS, CO_zeroA);
 8080f6a:	f008 faa9 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080f6e:	497f      	ldr	r1, [pc, #508]	; (808116c <_Z14readStoredVarsv+0x338>)
 8080f70:	200c      	movs	r0, #12
 8080f72:	f7ff fd43 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(CO_ZEROB_MEM_ADDRESS, CO_zeroB);
 8080f76:	f008 faa3 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080f7a:	497d      	ldr	r1, [pc, #500]	; (8081170 <_Z14readStoredVarsv+0x33c>)
 8080f7c:	2094      	movs	r0, #148	; 0x94
 8080f7e:	f7ff fd3d 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 8080f82:	f008 fa9d 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080f86:	497b      	ldr	r1, [pc, #492]	; (8081174 <_Z14readStoredVarsv+0x340>)
 8080f88:	2014      	movs	r0, #20
 8080f8a:	f7ff fd37 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 8080f8e:	f008 fa97 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080f92:	4979      	ldr	r1, [pc, #484]	; (8081178 <_Z14readStoredVarsv+0x344>)
 8080f94:	201c      	movs	r0, #28
 8080f96:	f7ff fd31 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 8080f9a:	f008 fa91 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080f9e:	4977      	ldr	r1, [pc, #476]	; (808117c <_Z14readStoredVarsv+0x348>)
 8080fa0:	2024      	movs	r0, #36	; 0x24
 8080fa2:	f7ff fd2b 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 8080fa6:	f008 fa8b 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080faa:	4975      	ldr	r1, [pc, #468]	; (8081180 <_Z14readStoredVarsv+0x34c>)
 8080fac:	202c      	movs	r0, #44	; 0x2c
 8080fae:	f7ff fd25 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 8080fb2:	f008 fa85 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080fb6:	4973      	ldr	r1, [pc, #460]	; (8081184 <_Z14readStoredVarsv+0x350>)
 8080fb8:	2034      	movs	r0, #52	; 0x34
 8080fba:	f7ff fd1f 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 8080fbe:	f008 fa7f 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080fc2:	4971      	ldr	r1, [pc, #452]	; (8081188 <_Z14readStoredVarsv+0x354>)
 8080fc4:	203c      	movs	r0, #60	; 0x3c
 8080fc6:	f7ff fd19 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>

    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8080fca:	f008 fa79 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080fce:	496f      	ldr	r1, [pc, #444]	; (808118c <_Z14readStoredVarsv+0x358>)
 8080fd0:	2044      	movs	r0, #68	; 0x44
 8080fd2:	f7ff fd13 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8080fd6:	f008 fa73 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080fda:	496d      	ldr	r1, [pc, #436]	; (8081190 <_Z14readStoredVarsv+0x35c>)
 8080fdc:	2048      	movs	r0, #72	; 0x48
 8080fde:	f7ff fd0d 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8080fe2:	f008 fa6d 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080fe6:	496b      	ldr	r1, [pc, #428]	; (8081194 <_Z14readStoredVarsv+0x360>)
 8080fe8:	2058      	movs	r0, #88	; 0x58
 8080fea:	f7ff fd07 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080fee:	f008 fa67 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080ff2:	4969      	ldr	r1, [pc, #420]	; (8081198 <_Z14readStoredVarsv+0x364>)
 8080ff4:	205c      	movs	r0, #92	; 0x5c
 8080ff6:	f7ff fd01 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8080ffa:	f008 fa61 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8080ffe:	4967      	ldr	r1, [pc, #412]	; (808119c <_Z14readStoredVarsv+0x368>)
 8081000:	204c      	movs	r0, #76	; 0x4c
 8081002:	f7ff fcfb 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8081006:	f008 fa5b 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808100a:	4965      	ldr	r1, [pc, #404]	; (80811a0 <_Z14readStoredVarsv+0x36c>)
 808100c:	2050      	movs	r0, #80	; 0x50
 808100e:	f7ff fcf5 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 8081012:	f008 fa55 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8081016:	a901      	add	r1, sp, #4
 8081018:	2054      	movs	r0, #84	; 0x54
 808101a:	f7ff fcef 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    Time.zone(tempValue);
 808101e:	9801      	ldr	r0, [sp, #4]
 8081020:	f009 f9c4 	bl	808a3ac <__aeabi_i2f>
 8081024:	f007 fbee 	bl	8088804 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8081028:	f008 fa4a 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808102c:	495d      	ldr	r1, [pc, #372]	; (80811a4 <_Z14readStoredVarsv+0x370>)
 808102e:	2060      	movs	r0, #96	; 0x60
 8081030:	f7ff fce4 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8081034:	f008 fa44 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8081038:	495b      	ldr	r1, [pc, #364]	; (80811a8 <_Z14readStoredVarsv+0x374>)
 808103a:	2064      	movs	r0, #100	; 0x64
 808103c:	f7ff fcde 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8081040:	f008 fa3e 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8081044:	4959      	ldr	r1, [pc, #356]	; (80811ac <_Z14readStoredVarsv+0x378>)
 8081046:	2068      	movs	r0, #104	; 0x68
 8081048:	f7ff fcd8 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 808104c:	f008 fa38 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8081050:	4957      	ldr	r1, [pc, #348]	; (80811b0 <_Z14readStoredVarsv+0x37c>)
 8081052:	206c      	movs	r0, #108	; 0x6c
 8081054:	f7ff fcd2 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 8081058:	f008 fa32 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808105c:	4955      	ldr	r1, [pc, #340]	; (80811b4 <_Z14readStoredVarsv+0x380>)
 808105e:	2070      	movs	r0, #112	; 0x70
 8081060:	f7ff fccc 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 8081064:	f008 fa2c 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8081068:	4953      	ldr	r1, [pc, #332]	; (80811b8 <_Z14readStoredVarsv+0x384>)
 808106a:	2074      	movs	r0, #116	; 0x74
 808106c:	f7ff fcc6 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8081070:	f008 fa26 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8081074:	4951      	ldr	r1, [pc, #324]	; (80811bc <_Z14readStoredVarsv+0x388>)
 8081076:	2078      	movs	r0, #120	; 0x78
 8081078:	f7ff fcc0 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 808107c:	f008 fa20 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8081080:	494f      	ldr	r1, [pc, #316]	; (80811c0 <_Z14readStoredVarsv+0x38c>)
 8081082:	207c      	movs	r0, #124	; 0x7c
 8081084:	f7ff fcba 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8081088:	f008 fa1a 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808108c:	494d      	ldr	r1, [pc, #308]	; (80811c4 <_Z14readStoredVarsv+0x390>)
 808108e:	2080      	movs	r0, #128	; 0x80
 8081090:	f7ff fcb4 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8081094:	f008 fa14 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8081098:	494b      	ldr	r1, [pc, #300]	; (80811c8 <_Z14readStoredVarsv+0x394>)
 808109a:	2084      	movs	r0, #132	; 0x84
 808109c:	f7ff fcae 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80810a0:	f008 fa0e 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80810a4:	4949      	ldr	r1, [pc, #292]	; (80811cc <_Z14readStoredVarsv+0x398>)
 80810a6:	2088      	movs	r0, #136	; 0x88
 80810a8:	f7ff fca8 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80810ac:	f008 fa08 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80810b0:	4651      	mov	r1, sl
 80810b2:	208c      	movs	r0, #140	; 0x8c
 80810b4:	f7ff fca2 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80810b8:	f008 fa02 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80810bc:	4944      	ldr	r1, [pc, #272]	; (80811d0 <_Z14readStoredVarsv+0x39c>)
 80810be:	2090      	movs	r0, #144	; 0x90
 80810c0:	f7ff fc9c 	bl	80809fc <_ZN11EEPROMClass3getIiEERT_iS2_.isra.20>

    if(sensible_iot_en){
 80810c4:	f8da 3000 	ldr.w	r3, [sl]
 80810c8:	b113      	cbz	r3, 80810d0 <_Z14readStoredVarsv+0x29c>
        Time.zone(0);       //use UTC if using sensible iot upload
 80810ca:	2000      	movs	r0, #0
 80810cc:	f007 fb9a 	bl	8088804 <_ZN9TimeClass4zoneEf>
    }

    //measurements_to_average = 5;
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 80810d0:	f241 3187 	movw	r1, #4999	; 0x1387
 80810d4:	4a38      	ldr	r2, [pc, #224]	; (80811b8 <_Z14readStoredVarsv+0x384>)
        measurements_to_average = 1;

    //check all values to make sure are within limits
    if(!CO2_slope)
 80810d6:	f8d9 0000 	ldr.w	r0, [r9]
    if(sensible_iot_en){
        Time.zone(0);       //use UTC if using sensible iot upload
    }

    //measurements_to_average = 5;
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 80810da:	6813      	ldr	r3, [r2, #0]
 80810dc:	3b01      	subs	r3, #1
 80810de:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 80810e0:	bf84      	itt	hi
 80810e2:	2301      	movhi	r3, #1
 80810e4:	6013      	strhi	r3, [r2, #0]

    //check all values to make sure are within limits
    if(!CO2_slope)
 80810e6:	2100      	movs	r1, #0
 80810e8:	f009 fb48 	bl	808a77c <__aeabi_fcmpeq>
 80810ec:	b118      	cbz	r0, 80810f6 <_Z14readStoredVarsv+0x2c2>
    {
        CO2_slope = 1;
 80810ee:	4b39      	ldr	r3, [pc, #228]	; (80811d4 <_Z14readStoredVarsv+0x3a0>)
 80810f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80810f4:	601a      	str	r2, [r3, #0]
    }
    if(!CO_slopeA)
 80810f6:	2100      	movs	r1, #0
 80810f8:	f8d8 0000 	ldr.w	r0, [r8]
 80810fc:	f009 fb3e 	bl	808a77c <__aeabi_fcmpeq>
 8081100:	b118      	cbz	r0, 808110a <_Z14readStoredVarsv+0x2d6>
    {
        CO_slopeA = 1;
 8081102:	4b35      	ldr	r3, [pc, #212]	; (80811d8 <_Z14readStoredVarsv+0x3a4>)
 8081104:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081108:	601a      	str	r2, [r3, #0]
    }
    if(!CO_slopeB)
 808110a:	2100      	movs	r1, #0
 808110c:	6838      	ldr	r0, [r7, #0]
 808110e:	f009 fb35 	bl	808a77c <__aeabi_fcmpeq>
 8081112:	b118      	cbz	r0, 808111c <_Z14readStoredVarsv+0x2e8>
    {
        CO_slopeB = 1;
 8081114:	4b0d      	ldr	r3, [pc, #52]	; (808114c <_Z14readStoredVarsv+0x318>)
 8081116:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808111a:	601a      	str	r2, [r3, #0]
    }
    if(!PM_1_slope)
 808111c:	2100      	movs	r1, #0
 808111e:	6830      	ldr	r0, [r6, #0]
 8081120:	f009 fb2c 	bl	808a77c <__aeabi_fcmpeq>
 8081124:	b118      	cbz	r0, 808112e <_Z14readStoredVarsv+0x2fa>
    {
        PM_1_slope = 1;
 8081126:	4b0a      	ldr	r3, [pc, #40]	; (8081150 <_Z14readStoredVarsv+0x31c>)
 8081128:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808112c:	601a      	str	r2, [r3, #0]
    }
    if(!PM_25_slope)
 808112e:	2100      	movs	r1, #0
 8081130:	6828      	ldr	r0, [r5, #0]
 8081132:	f009 fb23 	bl	808a77c <__aeabi_fcmpeq>
 8081136:	2800      	cmp	r0, #0
 8081138:	d052      	beq.n	80811e0 <_Z14readStoredVarsv+0x3ac>
    {
        PM_25_slope = 1;
 808113a:	4b06      	ldr	r3, [pc, #24]	; (8081154 <_Z14readStoredVarsv+0x320>)
 808113c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081140:	601a      	str	r2, [r3, #0]
 8081142:	e04d      	b.n	80811e0 <_Z14readStoredVarsv+0x3ac>
 8081144:	20000088 	.word	0x20000088
 8081148:	42c80000 	.word	0x42c80000
 808114c:	200008a8 	.word	0x200008a8
 8081150:	20000220 	.word	0x20000220
 8081154:	200007a8 	.word	0x200007a8
 8081158:	20000ad8 	.word	0x20000ad8
 808115c:	200007b0 	.word	0x200007b0
 8081160:	200001ec 	.word	0x200001ec
 8081164:	200006d8 	.word	0x200006d8
 8081168:	20000224 	.word	0x20000224
 808116c:	2000096c 	.word	0x2000096c
 8081170:	20000970 	.word	0x20000970
 8081174:	20000a98 	.word	0x20000a98
 8081178:	20000764 	.word	0x20000764
 808117c:	20000acc 	.word	0x20000acc
 8081180:	20000aa0 	.word	0x20000aa0
 8081184:	20000978 	.word	0x20000978
 8081188:	2000075c 	.word	0x2000075c
 808118c:	2000021c 	.word	0x2000021c
 8081190:	20000ac4 	.word	0x20000ac4
 8081194:	20000a00 	.word	0x20000a00
 8081198:	20000b34 	.word	0x20000b34
 808119c:	20000090 	.word	0x20000090
 80811a0:	2000008c 	.word	0x2000008c
 80811a4:	200006a4 	.word	0x200006a4
 80811a8:	200007ac 	.word	0x200007ac
 80811ac:	20000760 	.word	0x20000760
 80811b0:	20000b20 	.word	0x20000b20
 80811b4:	200006a0 	.word	0x200006a0
 80811b8:	20000ab4 	.word	0x20000ab4
 80811bc:	20000b2c 	.word	0x20000b2c
 80811c0:	20000804 	.word	0x20000804
 80811c4:	200001f0 	.word	0x200001f0
 80811c8:	200006e0 	.word	0x200006e0
 80811cc:	20000b24 	.word	0x20000b24
 80811d0:	20000218 	.word	0x20000218
 80811d4:	20000a04 	.word	0x20000a04
 80811d8:	200008a4 	.word	0x200008a4
 80811dc:	20000810 	.word	0x20000810
    }
    if(!PM_10_slope)
 80811e0:	2100      	movs	r1, #0
 80811e2:	6820      	ldr	r0, [r4, #0]
 80811e4:	f009 faca 	bl	808a77c <__aeabi_fcmpeq>
 80811e8:	b118      	cbz	r0, 80811f2 <_Z14readStoredVarsv+0x3be>
    {
        PM_10_slope = 1;
 80811ea:	4b03      	ldr	r3, [pc, #12]	; (80811f8 <_Z14readStoredVarsv+0x3c4>)
 80811ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80811f0:	601a      	str	r2, [r3, #0]
    }
}
 80811f2:	b002      	add	sp, #8
 80811f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80811f8:	20000ad8 	.word	0x20000ad8

080811fc <_Z7echoGpsv>:

}



void echoGps(){
 80811fc:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while(!Serial.available()){
 80811fe:	f007 fe63 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081202:	6803      	ldr	r3, [r0, #0]
 8081204:	691b      	ldr	r3, [r3, #16]
 8081206:	4798      	blx	r3
 8081208:	b990      	cbnz	r0, 8081230 <_Z7echoGpsv+0x34>
        if(Serial5.available() > 0){
 808120a:	f7ff fc69 	bl	8080ae0 <_Z22__fetch_global_Serial5v>
 808120e:	6803      	ldr	r3, [r0, #0]
 8081210:	691b      	ldr	r3, [r3, #16]
 8081212:	4798      	blx	r3
 8081214:	2800      	cmp	r0, #0
 8081216:	ddf2      	ble.n	80811fe <_Z7echoGpsv+0x2>
            gps_byte = Serial5.read();
 8081218:	f7ff fc62 	bl	8080ae0 <_Z22__fetch_global_Serial5v>
 808121c:	6803      	ldr	r3, [r0, #0]
 808121e:	695b      	ldr	r3, [r3, #20]
 8081220:	4798      	blx	r3
 8081222:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081224:	f007 fe50 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081228:	b2e1      	uxtb	r1, r4
 808122a:	f007 f8eb 	bl	8088404 <_ZN5Print5printEc>
 808122e:	e7e6      	b.n	80811fe <_Z7echoGpsv+0x2>
 8081230:	bd10      	pop	{r4, pc}
	...

08081234 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
 8081234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8081236:	4606      	mov	r6, r0
 8081238:	460d      	mov	r5, r1
 808123a:	2400      	movs	r4, #0
    for (byte i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
        Serial.print(temp);

        if (i != len - 1)
 808123c:	1e4f      	subs	r7, r1, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 808123e:	42ac      	cmp	r4, r5
 8081240:	d012      	beq.n	8081268 <_Z11printPacketPhh+0x34>
    {
        sprintf(temp, "%.2X", packet[i]);
 8081242:	5d32      	ldrb	r2, [r6, r4]
 8081244:	490b      	ldr	r1, [pc, #44]	; (8081274 <_Z11printPacketPhh+0x40>)
 8081246:	a801      	add	r0, sp, #4
 8081248:	f006 fbd6 	bl	80879f8 <sprintf>
        Serial.print(temp);
 808124c:	f007 fe3c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081250:	a901      	add	r1, sp, #4
 8081252:	f007 f8d3 	bl	80883fc <_ZN5Print5printEPKc>

        if (i != len - 1)
 8081256:	42a7      	cmp	r7, r4
 8081258:	d004      	beq.n	8081264 <_Z11printPacketPhh+0x30>
        {
            Serial.print(' ');
 808125a:	f007 fe35 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808125e:	2120      	movs	r1, #32
 8081260:	f007 f8d0 	bl	8088404 <_ZN5Print5printEc>
 8081264:	3401      	adds	r4, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 8081266:	e7ea      	b.n	808123e <_Z11printPacketPhh+0xa>
        {
            Serial.print(' ');
        }
    }

    Serial.println();
 8081268:	f007 fe2e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808126c:	f007 f8cd 	bl	808840a <_ZN5Print7printlnEv>
}
 8081270:	b003      	add	sp, #12
 8081272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081274:	0808de4b 	.word	0x0808de4b

08081278 <_Z10sendPacketPhh>:
    sendPacket(packet, sizeof(packet));
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
 8081278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808127a:	4604      	mov	r4, r0
 808127c:	460f      	mov	r7, r1
 808127e:	1e4e      	subs	r6, r1, #1
 8081280:	1e45      	subs	r5, r0, #1
 8081282:	4406      	add	r6, r0
    for (byte i = 0; i < len; i++)
 8081284:	42b5      	cmp	r5, r6
 8081286:	d007      	beq.n	8081298 <_Z10sendPacketPhh+0x20>
    {
        Serial5.write(packet[i]);
 8081288:	f7ff fc2a 	bl	8080ae0 <_Z22__fetch_global_Serial5v>
 808128c:	6803      	ldr	r3, [r0, #0]
 808128e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8081292:	689b      	ldr	r3, [r3, #8]
 8081294:	4798      	blx	r3
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
    for (byte i = 0; i < len; i++)
 8081296:	e7f5      	b.n	8081284 <_Z10sendPacketPhh+0xc>
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 8081298:	4639      	mov	r1, r7
 808129a:	4620      	mov	r0, r4
}
 808129c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    for (byte i = 0; i < len; i++)
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 80812a0:	f7ff bfc8 	b.w	8081234 <_Z11printPacketPhh>

080812a4 <_Z19enableContinuousGPSv>:

    sendPacket(packet, sizeof(packet));
}

void enableContinuousGPS()
{
 80812a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812a6:	4a07      	ldr	r2, [pc, #28]	; (80812c4 <_Z19enableContinuousGPSv+0x20>)
 80812a8:	ab01      	add	r3, sp, #4
 80812aa:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 80812ae:	6851      	ldr	r1, [r2, #4]
 80812b0:	8912      	ldrh	r2, [r2, #8]
 80812b2:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80812b4:	210a      	movs	r1, #10
 80812b6:	a801      	add	r0, sp, #4
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812b8:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80812ba:	f7ff ffdd 	bl	8081278 <_Z10sendPacketPhh>
}
 80812be:	b005      	add	sp, #20
 80812c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80812c4:	0808ddd8 	.word	0x0808ddd8

080812c8 <_Z17enableLowPowerGPSv>:

void enableLowPowerGPS()
{
 80812c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812ca:	4a07      	ldr	r2, [pc, #28]	; (80812e8 <_Z17enableLowPowerGPSv+0x20>)
 80812cc:	ab01      	add	r3, sp, #4
 80812ce:	f852 0f18 	ldr.w	r0, [r2, #24]!
 80812d2:	6851      	ldr	r1, [r2, #4]
 80812d4:	8912      	ldrh	r2, [r2, #8]
 80812d6:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80812d8:	210a      	movs	r1, #10
 80812da:	a801      	add	r0, sp, #4
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812dc:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80812de:	f7ff ffcb 	bl	8081278 <_Z10sendPacketPhh>
}
 80812e2:	b005      	add	sp, #20
 80812e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80812e8:	0808ddd8 	.word	0x0808ddd8
 80812ec:	00000000 	.word	0x00000000

080812f0 <_Z15readTemperaturev>:
    }

    Serial.println();
}

float readTemperature(void){
 80812f0:	b538      	push	{r3, r4, r5, lr}
    float temperature = 0;
    if(hih8120_enabled){
 80812f2:	4b31      	ldr	r3, [pc, #196]	; (80813b8 <_Z15readTemperaturev+0xc8>)
 80812f4:	4d31      	ldr	r5, [pc, #196]	; (80813bc <_Z15readTemperaturev+0xcc>)
 80812f6:	681b      	ldr	r3, [r3, #0]
 80812f8:	b1b3      	cbz	r3, 8081328 <_Z15readTemperaturev+0x38>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 80812fa:	4b31      	ldr	r3, [pc, #196]	; (80813c0 <_Z15readTemperaturev+0xd0>)
 80812fc:	8958      	ldrh	r0, [r3, #10]
 80812fe:	f009 f851 	bl	808a3a4 <__aeabi_ui2f>
 8081302:	4930      	ldr	r1, [pc, #192]	; (80813c4 <_Z15readTemperaturev+0xd4>)
 8081304:	f009 f95a 	bl	808a5bc <__aeabi_fdiv>
 8081308:	492f      	ldr	r1, [pc, #188]	; (80813c8 <_Z15readTemperaturev+0xd8>)
 808130a:	f009 f8a3 	bl	808a454 <__aeabi_fmul>
 808130e:	492f      	ldr	r1, [pc, #188]	; (80813cc <_Z15readTemperaturev+0xdc>)
 8081310:	f008 ff96 	bl	808a240 <__aeabi_fsub>
        temperature = hih.temperature();
        if(debugging_enabled){
 8081314:	682b      	ldr	r3, [r5, #0]
 8081316:	4604      	mov	r4, r0
 8081318:	2b00      	cmp	r3, #0
 808131a:	d035      	beq.n	8081388 <_Z15readTemperaturev+0x98>
            Serial.println("Temperature reading from HIH8120");
 808131c:	f007 fdd4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081320:	492b      	ldr	r1, [pc, #172]	; (80813d0 <_Z15readTemperaturev+0xe0>)
 8081322:	f007 f87e 	bl	8088422 <_ZN5Print7printlnEPKc>
 8081326:	e02f      	b.n	8081388 <_Z15readTemperaturev+0x98>
        }
    }else if(new_temperature_sensor_enabled){
 8081328:	4b2a      	ldr	r3, [pc, #168]	; (80813d4 <_Z15readTemperaturev+0xe4>)
 808132a:	681b      	ldr	r3, [r3, #0]
 808132c:	b31b      	cbz	r3, 8081376 <_Z15readTemperaturev+0x86>
        if(debugging_enabled){
 808132e:	682b      	ldr	r3, [r5, #0]
 8081330:	b123      	cbz	r3, 808133c <_Z15readTemperaturev+0x4c>
            Serial.println("Temperature reading from TMP36");
 8081332:	f007 fdc9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081336:	4928      	ldr	r1, [pc, #160]	; (80813d8 <_Z15readTemperaturev+0xe8>)
 8081338:	f007 f873 	bl	8088422 <_ZN5Print7printlnEPKc>
        }
        temperature = analogRead(A1);
 808133c:	200b      	movs	r0, #11
 808133e:	f008 f87a 	bl	8089436 <analogRead>


        temperature *= VOLTS_PER_UNIT;
 8081342:	f009 f833 	bl	808a3ac <__aeabi_i2f>
 8081346:	f008 fbdb 	bl	8089b00 <__aeabi_f2d>
 808134a:	a317      	add	r3, pc, #92	; (adr r3, 80813a8 <_Z15readTemperaturev+0xb8>)
 808134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081350:	f008 fc2a 	bl	8089ba8 <__aeabi_dmul>
 8081354:	f008 ff20 	bl	808a198 <__aeabi_d2f>

        temperature -= TMP36_OFFSET;
        temperature /= TMP36_VPDC;
 8081358:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 808135c:	f008 ff70 	bl	808a240 <__aeabi_fsub>
 8081360:	f008 fbce 	bl	8089b00 <__aeabi_f2d>
 8081364:	a312      	add	r3, pc, #72	; (adr r3, 80813b0 <_Z15readTemperaturev+0xc0>)
 8081366:	e9d3 2300 	ldrd	r2, r3, [r3]
 808136a:	f008 fd47 	bl	8089dfc <__aeabi_ddiv>
 808136e:	f008 ff13 	bl	808a198 <__aeabi_d2f>
 8081372:	4604      	mov	r4, r0
 8081374:	e008      	b.n	8081388 <_Z15readTemperaturev+0x98>
    }else{
        if(debugging_enabled){
 8081376:	682b      	ldr	r3, [r5, #0]
 8081378:	b123      	cbz	r3, 8081384 <_Z15readTemperaturev+0x94>
            Serial.println("Temperature reading from BME for Alphasense");
 808137a:	f007 fda5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808137e:	4917      	ldr	r1, [pc, #92]	; (80813dc <_Z15readTemperaturev+0xec>)
 8081380:	f007 f84f 	bl	8088422 <_ZN5Print7printlnEPKc>

          }
        temperature = bme.temperature;
 8081384:	4b16      	ldr	r3, [pc, #88]	; (80813e0 <_Z15readTemperaturev+0xf0>)
 8081386:	681c      	ldr	r4, [r3, #0]
    }
    //temperature *= 100;

    temperature *= temp_slope;
 8081388:	4b16      	ldr	r3, [pc, #88]	; (80813e4 <_Z15readTemperaturev+0xf4>)
 808138a:	4620      	mov	r0, r4
 808138c:	6819      	ldr	r1, [r3, #0]
 808138e:	f009 f861 	bl	808a454 <__aeabi_fmul>
 8081392:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 8081394:	4b14      	ldr	r3, [pc, #80]	; (80813e8 <_Z15readTemperaturev+0xf8>)

    return temperature;
 8081396:	6818      	ldr	r0, [r3, #0]
 8081398:	f009 f808 	bl	808a3ac <__aeabi_i2f>
 808139c:	4621      	mov	r1, r4
 808139e:	f008 ff51 	bl	808a244 <__addsf3>
    //temperature = temperature +
}
 80813a2:	bd38      	pop	{r3, r4, r5, pc}
 80813a4:	f3af 8000 	nop.w
 80813a8:	eb1c432d 	.word	0xeb1c432d
 80813ac:	3f4a36e2 	.word	0x3f4a36e2
 80813b0:	47ae147b 	.word	0x47ae147b
 80813b4:	3f847ae1 	.word	0x3f847ae1
 80813b8:	200001f0 	.word	0x200001f0
 80813bc:	20000ac4 	.word	0x20000ac4
 80813c0:	20000814 	.word	0x20000814
 80813c4:	467ff800 	.word	0x467ff800
 80813c8:	43250000 	.word	0x43250000
 80813cc:	42200000 	.word	0x42200000
 80813d0:	0808de50 	.word	0x0808de50
 80813d4:	20000760 	.word	0x20000760
 80813d8:	0808de71 	.word	0x0808de71
 80813dc:	0808de90 	.word	0x0808de90
 80813e0:	200006e4 	.word	0x200006e4
 80813e4:	200007b0 	.word	0x200007b0
 80813e8:	20000aa0 	.word	0x20000aa0
 80813ec:	00000000 	.word	0x00000000

080813f0 <_Z10readAlpha2v>:

      }
      return alpha1_ppmraw;
}

float readAlpha2(void){
 80813f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80813f4:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 80813f6:	4994      	ldr	r1, [pc, #592]	; (8081648 <_Z10readAlpha2v+0x258>)
 80813f8:	a802      	add	r0, sp, #8
 80813fa:	f006 fe74 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 80813fe:	4b93      	ldr	r3, [pc, #588]	; (808164c <_Z10readAlpha2v+0x25c>)
 8081400:	681a      	ldr	r2, [r3, #0]
 8081402:	469b      	mov	fp, r3
 8081404:	b122      	cbz	r2, 8081410 <_Z10readAlpha2v+0x20>
        Serial.println("Start of alpha 2 read");
 8081406:	f007 fd5f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808140a:	4991      	ldr	r1, [pc, #580]	; (8081650 <_Z10readAlpha2v+0x260>)
 808140c:	f007 f809 	bl	8088422 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 8081410:	4c90      	ldr	r4, [pc, #576]	; (8081654 <_Z10readAlpha2v+0x264>)
 8081412:	2100      	movs	r1, #0
 8081414:	8820      	ldrh	r0, [r4, #0]
 8081416:	f007 ffe2 	bl	80893de <digitalWrite>

    if(Wire.requestFrom(0x4A,1) == 0){
 808141a:	f008 f87d 	bl	8089518 <_Z19__fetch_global_Wirev>
 808141e:	2201      	movs	r2, #1
 8081420:	214a      	movs	r1, #74	; 0x4a
 8081422:	f007 ff15 	bl	8089250 <_ZN7TwoWire11requestFromEii>
 8081426:	4627      	mov	r7, r4
 8081428:	b928      	cbnz	r0, 8081436 <_Z10readAlpha2v+0x46>
        Serial.println("Couldn't communicate with LMP91000 2");
 808142a:	f007 fd4d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808142e:	498a      	ldr	r1, [pc, #552]	; (8081658 <_Z10readAlpha2v+0x268>)
 8081430:	f006 fff7 	bl	8088422 <_ZN5Print7printlnEPKc>
 8081434:	e02e      	b.n	8081494 <_Z10readAlpha2v+0xa4>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 8081436:	2103      	movs	r1, #3
 8081438:	4888      	ldr	r0, [pc, #544]	; (808165c <_Z10readAlpha2v+0x26c>)
 808143a:	f003 ff92 	bl	8085362 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 808143e:	f008 ffb5 	bl	808a3ac <__aeabi_i2f>
 8081442:	4b87      	ldr	r3, [pc, #540]	; (8081660 <_Z10readAlpha2v+0x270>)
 8081444:	6819      	ldr	r1, [r3, #0]
 8081446:	f009 f805 	bl	808a454 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 808144a:	4986      	ldr	r1, [pc, #536]	; (8081664 <_Z10readAlpha2v+0x274>)
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 808144c:	4682      	mov	sl, r0
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 808144e:	f009 f8b5 	bl	808a5bc <__aeabi_fdiv>
 8081452:	f008 fb55 	bl	8089b00 <__aeabi_f2d>
 8081456:	2200      	movs	r2, #0
 8081458:	4b83      	ldr	r3, [pc, #524]	; (8081668 <_Z10readAlpha2v+0x278>)
 808145a:	4680      	mov	r8, r0
 808145c:	4689      	mov	r9, r1
 808145e:	f008 f9ef 	bl	8089840 <__aeabi_dsub>
 8081462:	f008 fe51 	bl	808a108 <__aeabi_d2iz>
 8081466:	2800      	cmp	r0, #0
 8081468:	bfb8      	it	lt
 808146a:	4240      	neglt	r0, r0
 808146c:	f008 fb36 	bl	8089adc <__aeabi_i2d>
 8081470:	2200      	movs	r2, #0
 8081472:	4b7e      	ldr	r3, [pc, #504]	; (808166c <_Z10readAlpha2v+0x27c>)
 8081474:	f008 fe28 	bl	808a0c8 <__aeabi_dcmpgt>
 8081478:	b160      	cbz	r0, 8081494 <_Z10readAlpha2v+0xa4>
          //operation_log += "AD1_VREF2,";
          //digitalWrite(red_status_led, HIGH);
          //delay(200);
          //digitalWrite(red_status_led, LOW);
          //delay(200);
          Serial.print("half vref2 ads1");
 808147a:	f007 fd25 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808147e:	497c      	ldr	r1, [pc, #496]	; (8081670 <_Z10readAlpha2v+0x280>)
 8081480:	f006 ffbc 	bl	80883fc <_ZN5Print5printEPKc>
          Serial.println(volt_half_Vref/1000);
 8081484:	f007 fd20 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081488:	2302      	movs	r3, #2
 808148a:	9300      	str	r3, [sp, #0]
 808148c:	4642      	mov	r2, r8
 808148e:	464b      	mov	r3, r9
 8081490:	f007 f8ee 	bl	8088670 <_ZN5Print7printlnEdi>

        }
    }

    if(lmp91000_2.read(LMP91000_STATUS_REG) == 0){
 8081494:	2100      	movs	r1, #0
 8081496:	4877      	ldr	r0, [pc, #476]	; (8081674 <_Z10readAlpha2v+0x284>)
 8081498:	f003 fe0d 	bl	80850b6 <_ZN8LMP910004readEh>
 808149c:	b938      	cbnz	r0, 80814ae <_Z10readAlpha2v+0xbe>
        if(debugging_enabled)
 808149e:	f8db 3000 	ldr.w	r3, [fp]
 80814a2:	b123      	cbz	r3, 80814ae <_Z10readAlpha2v+0xbe>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 80814a4:	f007 fd10 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80814a8:	4973      	ldr	r1, [pc, #460]	; (8081678 <_Z10readAlpha2v+0x288>)
 80814aa:	f006 ffba 	bl	8088422 <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 80814ae:	f008 f833 	bl	8089518 <_Z19__fetch_global_Wirev>
 80814b2:	2201      	movs	r2, #1
 80814b4:	214a      	movs	r1, #74	; 0x4a
 80814b6:	f007 fecb 	bl	8089250 <_ZN7TwoWire11requestFromEii>
 80814ba:	2800      	cmp	r0, #0
 80814bc:	f000 80ac 	beq.w	8081618 <_Z10readAlpha2v+0x228>
 80814c0:	2100      	movs	r1, #0
 80814c2:	486c      	ldr	r0, [pc, #432]	; (8081674 <_Z10readAlpha2v+0x284>)
 80814c4:	f003 fdf7 	bl	80850b6 <_ZN8LMP910004readEh>
 80814c8:	2800      	cmp	r0, #0
 80814ca:	f000 80a5 	beq.w	8081618 <_Z10readAlpha2v+0x228>
 80814ce:	4965      	ldr	r1, [pc, #404]	; (8081664 <_Z10readAlpha2v+0x274>)
 80814d0:	4650      	mov	r0, sl
 80814d2:	f009 f873 	bl	808a5bc <__aeabi_fdiv>
 80814d6:	f008 fb13 	bl	8089b00 <__aeabi_f2d>
 80814da:	2200      	movs	r2, #0
 80814dc:	4b62      	ldr	r3, [pc, #392]	; (8081668 <_Z10readAlpha2v+0x278>)
 80814de:	f008 f9af 	bl	8089840 <__aeabi_dsub>
 80814e2:	f008 fe11 	bl	808a108 <__aeabi_d2iz>
 80814e6:	2800      	cmp	r0, #0
 80814e8:	bfb8      	it	lt
 80814ea:	4240      	neglt	r0, r0
 80814ec:	f008 faf6 	bl	8089adc <__aeabi_i2d>
 80814f0:	2200      	movs	r2, #0
 80814f2:	4b5e      	ldr	r3, [pc, #376]	; (808166c <_Z10readAlpha2v+0x27c>)
 80814f4:	f008 fde8 	bl	808a0c8 <__aeabi_dcmpgt>
 80814f8:	2800      	cmp	r0, #0
 80814fa:	f040 808d 	bne.w	8081618 <_Z10readAlpha2v+0x228>
 80814fe:	4604      	mov	r4, r0
 8081500:	4680      	mov	r8, r0
 8081502:	4681      	mov	r9, r0
 8081504:	250a      	movs	r5, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081506:	2100      	movs	r1, #0
 8081508:	4854      	ldr	r0, [pc, #336]	; (808165c <_Z10readAlpha2v+0x26c>)
 808150a:	f003 ff2a 	bl	8085362 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 808150e:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081510:	4481      	add	r9, r0
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081512:	4852      	ldr	r0, [pc, #328]	; (808165c <_Z10readAlpha2v+0x26c>)
 8081514:	f003 ff25 	bl	8085362 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081518:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 808151a:	4480      	add	r8, r0
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 808151c:	484f      	ldr	r0, [pc, #316]	; (808165c <_Z10readAlpha2v+0x26c>)
 808151e:	f003 ff20 	bl	8085362 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081522:	2103      	movs	r1, #3
 8081524:	484d      	ldr	r0, [pc, #308]	; (808165c <_Z10readAlpha2v+0x26c>)
 8081526:	f003 ff1c 	bl	8085362 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 808152a:	3d01      	subs	r5, #1
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 808152c:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 808152e:	d1ea      	bne.n	8081506 <_Z10readAlpha2v+0x116>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081530:	4b4b      	ldr	r3, [pc, #300]	; (8081660 <_Z10readAlpha2v+0x270>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081532:	250a      	movs	r5, #10
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081534:	f8d3 a000 	ldr.w	sl, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081538:	fb94 f0f5 	sdiv	r0, r4, r5
 808153c:	f008 ff36 	bl	808a3ac <__aeabi_i2f>
 8081540:	4651      	mov	r1, sl
 8081542:	f008 ff87 	bl	808a454 <__aeabi_fmul>
 8081546:	4604      	mov	r4, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8081548:	fb99 f0f5 	sdiv	r0, r9, r5
 808154c:	f008 ff2e 	bl	808a3ac <__aeabi_i2f>
 8081550:	4651      	mov	r1, sl
 8081552:	f008 ff7f 	bl	808a454 <__aeabi_fmul>
 8081556:	4601      	mov	r1, r0
 8081558:	4620      	mov	r0, r4
 808155a:	f008 fe71 	bl	808a240 <__aeabi_fsub>
 808155e:	4947      	ldr	r1, [pc, #284]	; (808167c <_Z10readAlpha2v+0x28c>)
 8081560:	f009 f82c 	bl	808a5bc <__aeabi_fdiv>
 8081564:	4681      	mov	r9, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8081566:	fb98 f0f5 	sdiv	r0, r8, r5
 808156a:	f008 ff1f 	bl	808a3ac <__aeabi_i2f>
 808156e:	4651      	mov	r1, sl
 8081570:	f008 ff70 	bl	808a454 <__aeabi_fmul>
 8081574:	4601      	mov	r1, r0
 8081576:	4620      	mov	r0, r4
 8081578:	f008 fe62 	bl	808a240 <__aeabi_fsub>
 808157c:	4940      	ldr	r1, [pc, #256]	; (8081680 <_Z10readAlpha2v+0x290>)
 808157e:	f009 f81d 	bl	808a5bc <__aeabi_fdiv>
 8081582:	4604      	mov	r4, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 8081584:	f7ff feb4 	bl	80812f0 <_Z15readTemperaturev>
 8081588:	493e      	ldr	r1, [pc, #248]	; (8081684 <_Z10readAlpha2v+0x294>)
 808158a:	f009 f90b 	bl	808a7a4 <__aeabi_fcmple>
 808158e:	b120      	cbz	r0, 808159a <_Z10readAlpha2v+0x1aa>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8081590:	4621      	mov	r1, r4
 8081592:	4648      	mov	r0, r9
 8081594:	f008 fe54 	bl	808a240 <__aeabi_fsub>
 8081598:	e025      	b.n	80815e6 <_Z10readAlpha2v+0x1f6>
        }
        else if(readTemperature() <= 25){
 808159a:	f7ff fea9 	bl	80812f0 <_Z15readTemperaturev>
 808159e:	493a      	ldr	r1, [pc, #232]	; (8081688 <_Z10readAlpha2v+0x298>)
 80815a0:	f009 f900 	bl	808a7a4 <__aeabi_fcmple>
 80815a4:	b120      	cbz	r0, 80815b0 <_Z10readAlpha2v+0x1c0>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 80815a6:	4621      	mov	r1, r4
 80815a8:	4648      	mov	r0, r9
 80815aa:	f008 fe4b 	bl	808a244 <__addsf3>
 80815ae:	e01a      	b.n	80815e6 <_Z10readAlpha2v+0x1f6>
        }
        else if(readTemperature() > 25){
 80815b0:	f7ff fe9e 	bl	80812f0 <_Z15readTemperaturev>
 80815b4:	4934      	ldr	r1, [pc, #208]	; (8081688 <_Z10readAlpha2v+0x298>)
 80815b6:	f009 f909 	bl	808a7cc <__aeabi_fcmpgt>
 80815ba:	b1a8      	cbz	r0, 80815e8 <_Z10readAlpha2v+0x1f8>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 80815bc:	4620      	mov	r0, r4
 80815be:	f008 fa9f 	bl	8089b00 <__aeabi_f2d>
 80815c2:	a31d      	add	r3, pc, #116	; (adr r3, 8081638 <_Z10readAlpha2v+0x248>)
 80815c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80815c8:	f008 faee 	bl	8089ba8 <__aeabi_dmul>
 80815cc:	4604      	mov	r4, r0
 80815ce:	4648      	mov	r0, r9
 80815d0:	460d      	mov	r5, r1
 80815d2:	f008 fa95 	bl	8089b00 <__aeabi_f2d>
 80815d6:	4602      	mov	r2, r0
 80815d8:	460b      	mov	r3, r1
 80815da:	4620      	mov	r0, r4
 80815dc:	4629      	mov	r1, r5
 80815de:	f008 f931 	bl	8089844 <__adddf3>
 80815e2:	f008 fdd9 	bl	808a198 <__aeabi_d2f>
 80815e6:	4606      	mov	r6, r0
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 80815e8:	4630      	mov	r0, r6
 80815ea:	f008 fa89 	bl	8089b00 <__aeabi_f2d>
 80815ee:	a314      	add	r3, pc, #80	; (adr r3, 8081640 <_Z10readAlpha2v+0x250>)
 80815f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80815f4:	f008 fc02 	bl	8089dfc <__aeabi_ddiv>
 80815f8:	f008 fdce 	bl	808a198 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 80815fc:	2202      	movs	r2, #2
 80815fe:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else if(readTemperature() > 25){
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081600:	4605      	mov	r5, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081602:	a806      	add	r0, sp, #24
 8081604:	f006 fde5 	bl	80881d2 <_ZN6StringC1Efi>
 8081608:	a906      	add	r1, sp, #24
 808160a:	a802      	add	r0, sp, #8
 808160c:	f006 fdb5 	bl	808817a <_ZN6StringaSEOS_>
 8081610:	a806      	add	r0, sp, #24
 8081612:	f006 fd21 	bl	8088058 <_ZN6StringD1Ev>
 8081616:	e003      	b.n	8081620 <_Z10readAlpha2v+0x230>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
        alpha2_ppmRounded = "-99";
 8081618:	491c      	ldr	r1, [pc, #112]	; (808168c <_Z10readAlpha2v+0x29c>)
 808161a:	a802      	add	r0, sp, #8
 808161c:	f006 fdb5 	bl	808818a <_ZN6StringaSEPKc>
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
      }

      digitalWrite(lmp91000_2_en, HIGH);  //disable
 8081620:	2101      	movs	r1, #1
 8081622:	8838      	ldrh	r0, [r7, #0]
 8081624:	f007 fedb 	bl	80893de <digitalWrite>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 8081628:	a802      	add	r0, sp, #8
 808162a:	f006 fd15 	bl	8088058 <_ZN6StringD1Ev>

      Serial.print("Volt1 Aux:");
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}
 808162e:	4628      	mov	r0, r5
 8081630:	b00b      	add	sp, #44	; 0x2c
 8081632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081636:	bf00      	nop
 8081638:	851eb852 	.word	0x851eb852
 808163c:	3fe851eb 	.word	0x3fe851eb
 8081640:	d4fdf3b6 	.word	0xd4fdf3b6
 8081644:	3fd6e978 	.word	0x3fd6e978
 8081648:	08090584 	.word	0x08090584
 808164c:	20000ac4 	.word	0x20000ac4
 8081650:	0808def4 	.word	0x0808def4
 8081654:	200000d0 	.word	0x200000d0
 8081658:	0808df0a 	.word	0x0808df0a
 808165c:	20000a0e 	.word	0x20000a0e
 8081660:	200000a4 	.word	0x200000a4
 8081664:	447a0000 	.word	0x447a0000
 8081668:	3ff40000 	.word	0x3ff40000
 808166c:	3fe00000 	.word	0x3fe00000
 8081670:	0808df2f 	.word	0x0808df2f
 8081674:	200001e9 	.word	0x200001e9
 8081678:	0808df3f 	.word	0x0808df3f
 808167c:	c2f00000 	.word	0xc2f00000
 8081680:	c3160000 	.word	0xc3160000
 8081684:	41700000 	.word	0x41700000
 8081688:	41c80000 	.word	0x41c80000
 808168c:	0808df66 	.word	0x0808df66

08081690 <_Z12writeLogFile6String>:



void writeLogFile(String data){
 8081690:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 8081692:	491e      	ldr	r1, [pc, #120]	; (808170c <_Z12writeLogFile6String+0x7c>)
 8081694:	b085      	sub	sp, #20
 8081696:	4605      	mov	r5, r0
 8081698:	2302      	movs	r3, #2
 808169a:	220c      	movs	r2, #12
 808169c:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 80816a0:	f7ff fa58 	bl	8080b54 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
  if (sd.begin(CS)){
 80816a4:	b350      	cbz	r0, 80816fc <_Z12writeLogFile6String+0x6c>
      Serial.println("Writing data to log file.");
 80816a6:	f007 fc0f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80816aa:	4919      	ldr	r1, [pc, #100]	; (8081710 <_Z12writeLogFile6String+0x80>)
 80816ac:	f006 feb9 	bl	8088422 <_ZN5Print7printlnEPKc>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return open(m_cwd, path, oflag);
 80816b0:	4a18      	ldr	r2, [pc, #96]	; (8081714 <_Z12writeLogFile6String+0x84>)
 80816b2:	4919      	ldr	r1, [pc, #100]	; (8081718 <_Z12writeLogFile6String+0x88>)
      log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
      if(log_file_started == 0){
 80816b4:	4c19      	ldr	r4, [pc, #100]	; (808171c <_Z12writeLogFile6String+0x8c>)
 80816b6:	2346      	movs	r3, #70	; 0x46
 80816b8:	6812      	ldr	r2, [r2, #0]
 80816ba:	6809      	ldr	r1, [r1, #0]
 80816bc:	4818      	ldr	r0, [pc, #96]	; (8081720 <_Z12writeLogFile6String+0x90>)
 80816be:	f005 f82c 	bl	808671a <_ZN7FatFile4openEPS_PKch>
 80816c2:	6823      	ldr	r3, [r4, #0]
 80816c4:	b993      	cbnz	r3, 80816ec <_Z12writeLogFile6String+0x5c>
          log_file.println("File Start timestamp: ");
 80816c6:	4917      	ldr	r1, [pc, #92]	; (8081724 <_Z12writeLogFile6String+0x94>)
 80816c8:	4817      	ldr	r0, [pc, #92]	; (8081728 <_Z12writeLogFile6String+0x98>)
 80816ca:	f006 feaa 	bl	8088422 <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80816ce:	f007 f992 	bl	80889f6 <_ZN9TimeClass3nowEv>
 80816d2:	4601      	mov	r1, r0
 80816d4:	4668      	mov	r0, sp
 80816d6:	f007 f8bb 	bl	8088850 <_ZN9TimeClass7timeStrEl>
          log_file.println(Time.timeStr());
 80816da:	9900      	ldr	r1, [sp, #0]
 80816dc:	4812      	ldr	r0, [pc, #72]	; (8081728 <_Z12writeLogFile6String+0x98>)
 80816de:	f006 fea0 	bl	8088422 <_ZN5Print7printlnEPKc>
 80816e2:	4668      	mov	r0, sp
 80816e4:	f006 fcb8 	bl	8088058 <_ZN6StringD1Ev>
          log_file_started = 1;
 80816e8:	2301      	movs	r3, #1
 80816ea:	6023      	str	r3, [r4, #0]
      }
      log_file.println(data);
 80816ec:	6829      	ldr	r1, [r5, #0]
 80816ee:	480e      	ldr	r0, [pc, #56]	; (8081728 <_Z12writeLogFile6String+0x98>)
 80816f0:	f006 fe97 	bl	8088422 <_ZN5Print7printlnEPKc>

      log_file.close();
 80816f4:	480a      	ldr	r0, [pc, #40]	; (8081720 <_Z12writeLogFile6String+0x90>)
 80816f6:	f005 f809 	bl	808670c <_ZN7FatFile5closeEv>
 80816fa:	e004      	b.n	8081706 <_Z12writeLogFile6String+0x76>
  }else{
    Serial.println("Unable to write to log file");
 80816fc:	f007 fbe4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081700:	490a      	ldr	r1, [pc, #40]	; (808172c <_Z12writeLogFile6String+0x9c>)
 8081702:	f006 fe8e 	bl	8088422 <_ZN5Print7printlnEPKc>
  }
}
 8081706:	b005      	add	sp, #20
 8081708:	bd30      	pop	{r4, r5, pc}
 808170a:	bf00      	nop
 808170c:	20000698 	.word	0x20000698
 8081710:	0808df6a 	.word	0x0808df6a
 8081714:	20000798 	.word	0x20000798
 8081718:	20000b74 	.word	0x20000b74
 808171c:	2000080c 	.word	0x2000080c
 8081720:	20000b40 	.word	0x20000b40
 8081724:	0808df84 	.word	0x0808df84
 8081728:	20000b38 	.word	0x20000b38
 808172c:	0808df9b 	.word	0x0808df9b

08081730 <_Z13readGpsStreamv>:
/*void disableGPS(void){
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
 8081730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081732:	b08d      	sub	sp, #52	; 0x34
    String gps_sentence = "init";
 8081734:	4993      	ldr	r1, [pc, #588]	; (8081984 <_Z13readGpsStreamv+0x254>)
 8081736:	4668      	mov	r0, sp
 8081738:	f006 fcd5 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
 808173c:	f7ff f9d0 	bl	8080ae0 <_Z22__fetch_global_Serial5v>
 8081740:	220d      	movs	r2, #13
 8081742:	4601      	mov	r1, r0
 8081744:	a808      	add	r0, sp, #32
 8081746:	f006 fff3 	bl	8088730 <_ZN6Stream15readStringUntilEc>
 808174a:	a908      	add	r1, sp, #32
 808174c:	4668      	mov	r0, sp
 808174e:	f006 fd14 	bl	808817a <_ZN6StringaSEOS_>
 8081752:	a808      	add	r0, sp, #32
 8081754:	f006 fc80 	bl	8088058 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 8081758:	2307      	movs	r3, #7
 808175a:	2204      	movs	r2, #4
 808175c:	4669      	mov	r1, sp
 808175e:	a804      	add	r0, sp, #16
 8081760:	f006 fdd6 	bl	8088310 <_ZNK6String9substringEjj>
        if(prefix_string.equals("GGA")){
 8081764:	4988      	ldr	r1, [pc, #544]	; (8081988 <_Z13readGpsStreamv+0x258>)
 8081766:	a804      	add	r0, sp, #16
 8081768:	f006 fdb5 	bl	80882d6 <_ZNK6String6equalsEPKc>
 808176c:	4605      	mov	r5, r0
 808176e:	b9a8      	cbnz	r0, 808179c <_Z13readGpsStreamv+0x6c>
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
 8081770:	4984      	ldr	r1, [pc, #528]	; (8081984 <_Z13readGpsStreamv+0x254>)
 8081772:	4668      	mov	r0, sp
 8081774:	f006 fdaf 	bl	80882d6 <_ZNK6String6equalsEPKc>
 8081778:	b198      	cbz	r0, 80817a2 <_Z13readGpsStreamv+0x72>
            error = 1;
            Serial.println("Error reading GPS");
 808177a:	f007 fba5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808177e:	4983      	ldr	r1, [pc, #524]	; (808198c <_Z13readGpsStreamv+0x25c>)
 8081780:	f006 fe4f 	bl	8088422 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081784:	4981      	ldr	r1, [pc, #516]	; (808198c <_Z13readGpsStreamv+0x25c>)
 8081786:	a808      	add	r0, sp, #32
 8081788:	f006 fcad 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 808178c:	a808      	add	r0, sp, #32
 808178e:	f7ff ff7f 	bl	8081690 <_Z12writeLogFile6String>
 8081792:	a808      	add	r0, sp, #32
 8081794:	f006 fc60 	bl	8088058 <_ZN6StringD1Ev>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
            error = 1;
 8081798:	2401      	movs	r4, #1
 808179a:	e004      	b.n	80817a6 <_Z13readGpsStreamv+0x76>
 808179c:	2400      	movs	r4, #0
            //
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
 808179e:	2501      	movs	r5, #1
 80817a0:	e001      	b.n	80817a6 <_Z13readGpsStreamv+0x76>
 80817a2:	4604      	mov	r4, r0
 80817a4:	4605      	mov	r5, r0
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
        String prefix_string = gps_sentence.substring(4,7);
 80817a6:	a804      	add	r0, sp, #16
 80817a8:	f006 fc56 	bl	8088058 <_ZN6StringD1Ev>
void readGpsStream(void){
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
 80817ac:	b915      	cbnz	r5, 80817b4 <_Z13readGpsStreamv+0x84>
 80817ae:	2c00      	cmp	r4, #0
 80817b0:	d0c4      	beq.n	808173c <_Z13readGpsStreamv+0xc>
 80817b2:	e0e2      	b.n	808197a <_Z13readGpsStreamv+0x24a>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 80817b4:	4e76      	ldr	r6, [pc, #472]	; (8081990 <_Z13readGpsStreamv+0x260>)
 80817b6:	2401      	movs	r4, #1
 80817b8:	4637      	mov	r7, r6
 80817ba:	2500      	movs	r5, #0
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 80817bc:	9b02      	ldr	r3, [sp, #8]
 80817be:	1e61      	subs	r1, r4, #1
 80817c0:	4299      	cmp	r1, r3
 80817c2:	f080 80da 	bcs.w	808197a <_Z13readGpsStreamv+0x24a>
            if(gps_sentence.charAt(a) == ','){
 80817c6:	4668      	mov	r0, sp
 80817c8:	f006 fda0 	bl	808830c <_ZNK6String6charAtEj>
 80817cc:	282c      	cmp	r0, #44	; 0x2c
 80817ce:	f040 80d2 	bne.w	8081976 <_Z13readGpsStreamv+0x246>
                if(comma_counter == TIME_FIELD_INDEX){
 80817d2:	b9e5      	cbnz	r5, 808180e <_Z13readGpsStreamv+0xde>
                    if(gps_sentence.charAt(a+1)!=','){
 80817d4:	4621      	mov	r1, r4
 80817d6:	4668      	mov	r0, sp
 80817d8:	f006 fd98 	bl	808830c <_ZNK6String6charAtEj>
 80817dc:	282c      	cmp	r0, #44	; 0x2c
 80817de:	f000 80c9 	beq.w	8081974 <_Z13readGpsStreamv+0x244>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 80817e2:	f104 030a 	add.w	r3, r4, #10
 80817e6:	4622      	mov	r2, r4
 80817e8:	4669      	mov	r1, sp
 80817ea:	a808      	add	r0, sp, #32
 80817ec:	f006 fd90 	bl	8088310 <_ZNK6String9substringEjj>
                        //Serial.print("GPS utc string: ");
                        if(debugging_enabled){
 80817f0:	4b68      	ldr	r3, [pc, #416]	; (8081994 <_Z13readGpsStreamv+0x264>)
 80817f2:	681b      	ldr	r3, [r3, #0]
 80817f4:	b14b      	cbz	r3, 808180a <_Z13readGpsStreamv+0xda>
                            Serial.print("GPS utc string: ");
 80817f6:	f007 fb67 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80817fa:	4967      	ldr	r1, [pc, #412]	; (8081998 <_Z13readGpsStreamv+0x268>)
 80817fc:	f006 fdfe 	bl	80883fc <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081800:	f007 fb62 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081804:	9908      	ldr	r1, [sp, #32]
 8081806:	f006 fe0c 	bl	8088422 <_ZN5Print7printlnEPKc>

        for(int a = 0; a<gps_sentence.length(); a++){
            if(gps_sentence.charAt(a) == ','){
                if(comma_counter == TIME_FIELD_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String utc_string = gps_sentence.substring(a+1,a+11);
 808180a:	a808      	add	r0, sp, #32
 808180c:	e0b0      	b.n	8081970 <_Z13readGpsStreamv+0x240>
                            Serial.println(utc_string);

                        }
                        //Serial.println(utc_string);
                    }
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 808180e:	2d01      	cmp	r5, #1
 8081810:	d12f      	bne.n	8081872 <_Z13readGpsStreamv+0x142>
                    if(gps_sentence.charAt(a+1)!=','){
 8081812:	4621      	mov	r1, r4
 8081814:	4668      	mov	r0, sp
 8081816:	f006 fd79 	bl	808830c <_ZNK6String6charAtEj>
 808181a:	282c      	cmp	r0, #44	; 0x2c
 808181c:	f000 80aa 	beq.w	8081974 <_Z13readGpsStreamv+0x244>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081820:	f104 0309 	add.w	r3, r4, #9
 8081824:	4622      	mov	r2, r4
 8081826:	4669      	mov	r1, sp
 8081828:	a804      	add	r0, sp, #16
 808182a:	f006 fd71 	bl	8088310 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 808182e:	4b59      	ldr	r3, [pc, #356]	; (8081994 <_Z13readGpsStreamv+0x264>)
 8081830:	681b      	ldr	r3, [r3, #0]
 8081832:	b14b      	cbz	r3, 8081848 <_Z13readGpsStreamv+0x118>
                          Serial.print("Latitude string: ");
 8081834:	f007 fb48 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081838:	4958      	ldr	r1, [pc, #352]	; (808199c <_Z13readGpsStreamv+0x26c>)
 808183a:	f006 fddf 	bl	80883fc <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 808183e:	f007 fb43 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081842:	9904      	ldr	r1, [sp, #16]
 8081844:	f006 fdda 	bl	80883fc <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081848:	a904      	add	r1, sp, #16
 808184a:	a808      	add	r0, sp, #32
 808184c:	f006 fc8a 	bl	8088164 <_ZN6StringC1ERKS_>
 8081850:	f104 010b 	add.w	r1, r4, #11
 8081854:	4668      	mov	r0, sp
 8081856:	f006 fd59 	bl	808830c <_ZNK6String6charAtEj>
 808185a:	a908      	add	r1, sp, #32
 808185c:	4602      	mov	r2, r0
 808185e:	4850      	ldr	r0, [pc, #320]	; (80819a0 <_Z13readGpsStreamv+0x270>)
 8081860:	f003 fdaa 	bl	80853b8 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081864:	a808      	add	r0, sp, #32
 8081866:	f006 fbf7 	bl	8088058 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 808186a:	8833      	ldrh	r3, [r6, #0]
 808186c:	f023 0308 	bic.w	r3, r3, #8
 8081870:	e069      	b.n	8081946 <_Z13readGpsStreamv+0x216>
                        //Serial.print("Latitude decimal: ");
                        //Serial.println(gps.get_latitude(), 5);
                    }
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081872:	2d03      	cmp	r5, #3
 8081874:	d128      	bne.n	80818c8 <_Z13readGpsStreamv+0x198>
                    if(gps_sentence.charAt(a+1)!=','){
 8081876:	4621      	mov	r1, r4
 8081878:	4668      	mov	r0, sp
 808187a:	f006 fd47 	bl	808830c <_ZNK6String6charAtEj>
 808187e:	282c      	cmp	r0, #44	; 0x2c
 8081880:	d078      	beq.n	8081974 <_Z13readGpsStreamv+0x244>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081882:	f104 030a 	add.w	r3, r4, #10
 8081886:	4622      	mov	r2, r4
 8081888:	4669      	mov	r1, sp
 808188a:	a804      	add	r0, sp, #16
 808188c:	f006 fd40 	bl	8088310 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081890:	4b40      	ldr	r3, [pc, #256]	; (8081994 <_Z13readGpsStreamv+0x264>)
 8081892:	681b      	ldr	r3, [r3, #0]
 8081894:	b14b      	cbz	r3, 80818aa <_Z13readGpsStreamv+0x17a>
                          Serial.print("longitude string: ");
 8081896:	f007 fb17 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808189a:	4942      	ldr	r1, [pc, #264]	; (80819a4 <_Z13readGpsStreamv+0x274>)
 808189c:	f006 fdae 	bl	80883fc <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 80818a0:	f007 fb12 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80818a4:	9904      	ldr	r1, [sp, #16]
 80818a6:	f006 fda9 	bl	80883fc <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 80818aa:	a904      	add	r1, sp, #16
 80818ac:	a808      	add	r0, sp, #32
 80818ae:	f006 fc59 	bl	8088164 <_ZN6StringC1ERKS_>
 80818b2:	f104 010c 	add.w	r1, r4, #12
 80818b6:	4668      	mov	r0, sp
 80818b8:	f006 fd28 	bl	808830c <_ZNK6String6charAtEj>
 80818bc:	a908      	add	r1, sp, #32
 80818be:	4602      	mov	r2, r0
 80818c0:	4837      	ldr	r0, [pc, #220]	; (80819a0 <_Z13readGpsStreamv+0x270>)
 80818c2:	f003 fdbf 	bl	8085444 <_ZN3GPS16set_long_decimalE6Stringc>
 80818c6:	e015      	b.n	80818f4 <_Z13readGpsStreamv+0x1c4>
                        //Serial.print("Longitude decimal: ");
                        //Serial.println(gps.get_longitude(), 5);
                    }
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
 80818c8:	2d06      	cmp	r5, #6
 80818ca:	d117      	bne.n	80818fc <_Z13readGpsStreamv+0x1cc>
                    if(gps_sentence.charAt(a+1)!=','){
 80818cc:	4621      	mov	r1, r4
 80818ce:	4668      	mov	r0, sp
 80818d0:	f006 fd1c 	bl	808830c <_ZNK6String6charAtEj>
 80818d4:	282c      	cmp	r0, #44	; 0x2c
 80818d6:	d04d      	beq.n	8081974 <_Z13readGpsStreamv+0x244>
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
 80818d8:	1ca3      	adds	r3, r4, #2
 80818da:	4622      	mov	r2, r4
 80818dc:	4669      	mov	r1, sp
 80818de:	a804      	add	r0, sp, #16
 80818e0:	f006 fd16 	bl	8088310 <_ZNK6String9substringEjj>
                        gps.set_satellites(numberOfSatellitesString);
 80818e4:	a904      	add	r1, sp, #16
 80818e6:	a808      	add	r0, sp, #32
 80818e8:	f006 fc3c 	bl	8088164 <_ZN6StringC1ERKS_>
 80818ec:	a908      	add	r1, sp, #32
 80818ee:	482c      	ldr	r0, [pc, #176]	; (80819a0 <_Z13readGpsStreamv+0x270>)
 80818f0:	f003 fdee 	bl	80854d0 <_ZN3GPS14set_satellitesE6String>
 80818f4:	a808      	add	r0, sp, #32
 80818f6:	f006 fbaf 	bl	8088058 <_ZN6StringD1Ev>
 80818fa:	e038      	b.n	808196e <_Z13readGpsStreamv+0x23e>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 80818fc:	2d07      	cmp	r5, #7
 80818fe:	d139      	bne.n	8081974 <_Z13readGpsStreamv+0x244>
                    if(gps_sentence.charAt(a+1)!=','){
 8081900:	4621      	mov	r1, r4
 8081902:	4668      	mov	r0, sp
 8081904:	f006 fd02 	bl	808830c <_ZNK6String6charAtEj>
 8081908:	282c      	cmp	r0, #44	; 0x2c
 808190a:	d033      	beq.n	8081974 <_Z13readGpsStreamv+0x244>
                        String hdString = gps_sentence.substring(a+1,a+3);
 808190c:	1ca3      	adds	r3, r4, #2
 808190e:	4622      	mov	r2, r4
 8081910:	4669      	mov	r1, sp
 8081912:	a804      	add	r0, sp, #16
 8081914:	f006 fcfc 	bl	8088310 <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8081918:	a904      	add	r1, sp, #16
 808191a:	a808      	add	r0, sp, #32
 808191c:	f006 fc22 	bl	8088164 <_ZN6StringC1ERKS_>
 8081920:	a908      	add	r1, sp, #32
 8081922:	481f      	ldr	r0, [pc, #124]	; (80819a0 <_Z13readGpsStreamv+0x270>)
 8081924:	f003 fddc 	bl	80854e0 <_ZN3GPS23set_horizontalDillutionE6String>
 8081928:	a808      	add	r0, sp, #32
 808192a:	f006 fb95 	bl	8088058 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 808192e:	8833      	ldrh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081930:	481b      	ldr	r0, [pc, #108]	; (80819a0 <_Z13readGpsStreamv+0x270>)
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081932:	f023 030c 	bic.w	r3, r3, #12
 8081936:	8033      	strh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081938:	f003 fde8 	bl	808550c <_ZN3GPS23get_horizontalDillutionEv>
 808193c:	2801      	cmp	r0, #1
 808193e:	dc04      	bgt.n	808194a <_Z13readGpsStreamv+0x21a>
                            status_word.status_int |= 0x000C;
 8081940:	8833      	ldrh	r3, [r6, #0]
 8081942:	f043 030c 	orr.w	r3, r3, #12
 8081946:	8033      	strh	r3, [r6, #0]
 8081948:	e011      	b.n	808196e <_Z13readGpsStreamv+0x23e>
                        }else if(gps.get_horizontalDillution() < 5){
 808194a:	4815      	ldr	r0, [pc, #84]	; (80819a0 <_Z13readGpsStreamv+0x270>)
 808194c:	f003 fdde 	bl	808550c <_ZN3GPS23get_horizontalDillutionEv>
 8081950:	2804      	cmp	r0, #4
 8081952:	dc03      	bgt.n	808195c <_Z13readGpsStreamv+0x22c>
                            status_word.status_int |= 0x0008;
 8081954:	883b      	ldrh	r3, [r7, #0]
 8081956:	f043 0308 	orr.w	r3, r3, #8
 808195a:	e007      	b.n	808196c <_Z13readGpsStreamv+0x23c>
                        }else if(gps.get_horizontalDillution() < 20){
 808195c:	4810      	ldr	r0, [pc, #64]	; (80819a0 <_Z13readGpsStreamv+0x270>)
 808195e:	f003 fdd5 	bl	808550c <_ZN3GPS23get_horizontalDillutionEv>
 8081962:	2813      	cmp	r0, #19
 8081964:	dc03      	bgt.n	808196e <_Z13readGpsStreamv+0x23e>
                            status_word.status_int |= 0x0004;
 8081966:	883b      	ldrh	r3, [r7, #0]
 8081968:	f043 0304 	orr.w	r3, r3, #4
 808196c:	803b      	strh	r3, [r7, #0]
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
                        gps.set_satellites(numberOfSatellitesString);
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
 808196e:	a804      	add	r0, sp, #16
 8081970:	f006 fb72 	bl	8088058 <_ZN6StringD1Ev>
                        }


                    }
                }
                comma_counter++;
 8081974:	3501      	adds	r5, #1
 8081976:	3401      	adds	r4, #1
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081978:	e720      	b.n	80817bc <_Z13readGpsStreamv+0x8c>
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
    String gps_sentence = "init";
 808197a:	4668      	mov	r0, sp
 808197c:	f006 fb6c 	bl	8088058 <_ZN6StringD1Ev>
                comma_counter++;
            }
        }
    }

}
 8081980:	b00d      	add	sp, #52	; 0x34
 8081982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081984:	0808dfb7 	.word	0x0808dfb7
 8081988:	0808dfbc 	.word	0x0808dfbc
 808198c:	0808dfc0 	.word	0x0808dfc0
 8081990:	20000b28 	.word	0x20000b28
 8081994:	20000ac4 	.word	0x20000ac4
 8081998:	0808dfd2 	.word	0x0808dfd2
 808199c:	0808dfe3 	.word	0x0808dfe3
 80819a0:	200008b0 	.word	0x200008b0
 80819a4:	0808dff5 	.word	0x0808dff5

080819a8 <_Z17readGpsStreamDatev>:

void readGpsStreamDate(void){
 80819a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80819aa:	b08d      	sub	sp, #52	; 0x34
    String gps_sentence = "init";
 80819ac:	4988      	ldr	r1, [pc, #544]	; (8081bd0 <_Z17readGpsStreamDatev+0x228>)
 80819ae:	4668      	mov	r0, sp
 80819b0:	f006 fb99 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
 80819b4:	f7ff f894 	bl	8080ae0 <_Z22__fetch_global_Serial5v>
 80819b8:	220d      	movs	r2, #13
 80819ba:	4601      	mov	r1, r0
 80819bc:	a808      	add	r0, sp, #32
 80819be:	f006 feb7 	bl	8088730 <_ZN6Stream15readStringUntilEc>
 80819c2:	a908      	add	r1, sp, #32
 80819c4:	4668      	mov	r0, sp
 80819c6:	f006 fbd8 	bl	808817a <_ZN6StringaSEOS_>
 80819ca:	a808      	add	r0, sp, #32
 80819cc:	f006 fb44 	bl	8088058 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 80819d0:	2307      	movs	r3, #7
 80819d2:	2204      	movs	r2, #4
 80819d4:	4669      	mov	r1, sp
 80819d6:	a804      	add	r0, sp, #16
 80819d8:	f006 fc9a 	bl	8088310 <_ZNK6String9substringEjj>
        if(prefix_string.equals("RMC")){
 80819dc:	497d      	ldr	r1, [pc, #500]	; (8081bd4 <_Z17readGpsStreamDatev+0x22c>)
 80819de:	a804      	add	r0, sp, #16
 80819e0:	f006 fc79 	bl	80882d6 <_ZNK6String6equalsEPKc>
 80819e4:	4605      	mov	r5, r0
 80819e6:	b9a8      	cbnz	r0, 8081a14 <_Z17readGpsStreamDatev+0x6c>
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
 80819e8:	4979      	ldr	r1, [pc, #484]	; (8081bd0 <_Z17readGpsStreamDatev+0x228>)
 80819ea:	4668      	mov	r0, sp
 80819ec:	f006 fc73 	bl	80882d6 <_ZNK6String6equalsEPKc>
 80819f0:	b198      	cbz	r0, 8081a1a <_Z17readGpsStreamDatev+0x72>
            error = 1;
            Serial.println("Error reading GPS RMC");
 80819f2:	f007 fa69 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80819f6:	4978      	ldr	r1, [pc, #480]	; (8081bd8 <_Z17readGpsStreamDatev+0x230>)
 80819f8:	f006 fd13 	bl	8088422 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS RMC");
 80819fc:	4976      	ldr	r1, [pc, #472]	; (8081bd8 <_Z17readGpsStreamDatev+0x230>)
 80819fe:	a808      	add	r0, sp, #32
 8081a00:	f006 fb71 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8081a04:	a808      	add	r0, sp, #32
 8081a06:	f7ff fe43 	bl	8081690 <_Z12writeLogFile6String>
 8081a0a:	a808      	add	r0, sp, #32
 8081a0c:	f006 fb24 	bl	8088058 <_ZN6StringD1Ev>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
            error = 1;
 8081a10:	2401      	movs	r4, #1
 8081a12:	e004      	b.n	8081a1e <_Z17readGpsStreamDatev+0x76>
 8081a14:	2400      	movs	r4, #0
            //
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
 8081a16:	2501      	movs	r5, #1
 8081a18:	e001      	b.n	8081a1e <_Z17readGpsStreamDatev+0x76>
 8081a1a:	4604      	mov	r4, r0
 8081a1c:	4605      	mov	r5, r0
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
        String prefix_string = gps_sentence.substring(4,7);
 8081a1e:	a804      	add	r0, sp, #16
 8081a20:	f006 fb1a 	bl	8088058 <_ZN6StringD1Ev>
void readGpsStreamDate(void){
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
 8081a24:	b915      	cbnz	r5, 8081a2c <_Z17readGpsStreamDatev+0x84>
 8081a26:	2c00      	cmp	r4, #0
 8081a28:	d0c4      	beq.n	80819b4 <_Z17readGpsStreamDatev+0xc>
 8081a2a:	e0cc      	b.n	8081bc6 <_Z17readGpsStreamDatev+0x21e>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081a2c:	4d6b      	ldr	r5, [pc, #428]	; (8081bdc <_Z17readGpsStreamDatev+0x234>)
 8081a2e:	2401      	movs	r4, #1
 8081a30:	462f      	mov	r7, r5
 8081a32:	2600      	movs	r6, #0
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081a34:	9b02      	ldr	r3, [sp, #8]
 8081a36:	1e61      	subs	r1, r4, #1
 8081a38:	4299      	cmp	r1, r3
 8081a3a:	f080 80c4 	bcs.w	8081bc6 <_Z17readGpsStreamDatev+0x21e>
            if(gps_sentence.charAt(a) == ','){
 8081a3e:	4668      	mov	r0, sp
 8081a40:	f006 fc64 	bl	808830c <_ZNK6String6charAtEj>
 8081a44:	282c      	cmp	r0, #44	; 0x2c
 8081a46:	f040 80bc 	bne.w	8081bc2 <_Z17readGpsStreamDatev+0x21a>
                if(comma_counter == DATE_FIELD_INDEX){
 8081a4a:	2e06      	cmp	r6, #6
 8081a4c:	d11c      	bne.n	8081a88 <_Z17readGpsStreamDatev+0xe0>
                    if(gps_sentence.charAt(a+1)!=','){
 8081a4e:	4621      	mov	r1, r4
 8081a50:	4668      	mov	r0, sp
 8081a52:	f006 fc5b 	bl	808830c <_ZNK6String6charAtEj>
 8081a56:	282c      	cmp	r0, #44	; 0x2c
 8081a58:	f000 80b2 	beq.w	8081bc0 <_Z17readGpsStreamDatev+0x218>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081a5c:	f104 030a 	add.w	r3, r4, #10
 8081a60:	4622      	mov	r2, r4
 8081a62:	4669      	mov	r1, sp
 8081a64:	a808      	add	r0, sp, #32
 8081a66:	f006 fc53 	bl	8088310 <_ZNK6String9substringEjj>
                        //Serial.print("GPS utc string: ");
                        if(debugging_enabled){
 8081a6a:	4b5d      	ldr	r3, [pc, #372]	; (8081be0 <_Z17readGpsStreamDatev+0x238>)
 8081a6c:	681b      	ldr	r3, [r3, #0]
 8081a6e:	b14b      	cbz	r3, 8081a84 <_Z17readGpsStreamDatev+0xdc>
                            Serial.print("GPS utc string: ");
 8081a70:	f007 fa2a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081a74:	495b      	ldr	r1, [pc, #364]	; (8081be4 <_Z17readGpsStreamDatev+0x23c>)
 8081a76:	f006 fcc1 	bl	80883fc <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081a7a:	f007 fa25 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081a7e:	9908      	ldr	r1, [sp, #32]
 8081a80:	f006 fccf 	bl	8088422 <_ZN5Print7printlnEPKc>

        for(int a = 0; a<gps_sentence.length(); a++){
            if(gps_sentence.charAt(a) == ','){
                if(comma_counter == DATE_FIELD_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081a84:	a808      	add	r0, sp, #32
 8081a86:	e099      	b.n	8081bbc <_Z17readGpsStreamDatev+0x214>
                            Serial.println(utc_string);

                        }
                        //Serial.println(utc_string);
                    }
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 8081a88:	2e01      	cmp	r6, #1
 8081a8a:	d12f      	bne.n	8081aec <_Z17readGpsStreamDatev+0x144>
                    if(gps_sentence.charAt(a+1)!=','){
 8081a8c:	4621      	mov	r1, r4
 8081a8e:	4668      	mov	r0, sp
 8081a90:	f006 fc3c 	bl	808830c <_ZNK6String6charAtEj>
 8081a94:	282c      	cmp	r0, #44	; 0x2c
 8081a96:	f000 8093 	beq.w	8081bc0 <_Z17readGpsStreamDatev+0x218>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081a9a:	f104 0309 	add.w	r3, r4, #9
 8081a9e:	4622      	mov	r2, r4
 8081aa0:	4669      	mov	r1, sp
 8081aa2:	a804      	add	r0, sp, #16
 8081aa4:	f006 fc34 	bl	8088310 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081aa8:	4b4d      	ldr	r3, [pc, #308]	; (8081be0 <_Z17readGpsStreamDatev+0x238>)
 8081aaa:	681b      	ldr	r3, [r3, #0]
 8081aac:	b14b      	cbz	r3, 8081ac2 <_Z17readGpsStreamDatev+0x11a>
                          Serial.print("Latitude string: ");
 8081aae:	f007 fa0b 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081ab2:	494d      	ldr	r1, [pc, #308]	; (8081be8 <_Z17readGpsStreamDatev+0x240>)
 8081ab4:	f006 fca2 	bl	80883fc <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 8081ab8:	f007 fa06 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081abc:	9904      	ldr	r1, [sp, #16]
 8081abe:	f006 fc9d 	bl	80883fc <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081ac2:	a904      	add	r1, sp, #16
 8081ac4:	a808      	add	r0, sp, #32
 8081ac6:	f006 fb4d 	bl	8088164 <_ZN6StringC1ERKS_>
 8081aca:	f104 010b 	add.w	r1, r4, #11
 8081ace:	4668      	mov	r0, sp
 8081ad0:	f006 fc1c 	bl	808830c <_ZNK6String6charAtEj>
 8081ad4:	a908      	add	r1, sp, #32
 8081ad6:	4602      	mov	r2, r0
 8081ad8:	4844      	ldr	r0, [pc, #272]	; (8081bec <_Z17readGpsStreamDatev+0x244>)
 8081ada:	f003 fc6d 	bl	80853b8 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081ade:	a808      	add	r0, sp, #32
 8081ae0:	f006 faba 	bl	8088058 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081ae4:	882b      	ldrh	r3, [r5, #0]
 8081ae6:	f023 0308 	bic.w	r3, r3, #8
 8081aea:	e05b      	b.n	8081ba4 <_Z17readGpsStreamDatev+0x1fc>
                        //Serial.print("Latitude decimal: ");
                        //Serial.println(gps.get_latitude(), 5);
                    }
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081aec:	2e03      	cmp	r6, #3
 8081aee:	d12b      	bne.n	8081b48 <_Z17readGpsStreamDatev+0x1a0>
                    if(gps_sentence.charAt(a+1)!=','){
 8081af0:	4621      	mov	r1, r4
 8081af2:	4668      	mov	r0, sp
 8081af4:	f006 fc0a 	bl	808830c <_ZNK6String6charAtEj>
 8081af8:	282c      	cmp	r0, #44	; 0x2c
 8081afa:	d061      	beq.n	8081bc0 <_Z17readGpsStreamDatev+0x218>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081afc:	f104 030a 	add.w	r3, r4, #10
 8081b00:	4622      	mov	r2, r4
 8081b02:	4669      	mov	r1, sp
 8081b04:	a804      	add	r0, sp, #16
 8081b06:	f006 fc03 	bl	8088310 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081b0a:	4b35      	ldr	r3, [pc, #212]	; (8081be0 <_Z17readGpsStreamDatev+0x238>)
 8081b0c:	681b      	ldr	r3, [r3, #0]
 8081b0e:	b14b      	cbz	r3, 8081b24 <_Z17readGpsStreamDatev+0x17c>
                          Serial.print("longitude string: ");
 8081b10:	f007 f9da 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081b14:	4936      	ldr	r1, [pc, #216]	; (8081bf0 <_Z17readGpsStreamDatev+0x248>)
 8081b16:	f006 fc71 	bl	80883fc <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081b1a:	f007 f9d5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081b1e:	9904      	ldr	r1, [sp, #16]
 8081b20:	f006 fc6c 	bl	80883fc <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 8081b24:	a904      	add	r1, sp, #16
 8081b26:	a808      	add	r0, sp, #32
 8081b28:	f006 fb1c 	bl	8088164 <_ZN6StringC1ERKS_>
 8081b2c:	f104 010c 	add.w	r1, r4, #12
 8081b30:	4668      	mov	r0, sp
 8081b32:	f006 fbeb 	bl	808830c <_ZNK6String6charAtEj>
 8081b36:	a908      	add	r1, sp, #32
 8081b38:	4602      	mov	r2, r0
 8081b3a:	482c      	ldr	r0, [pc, #176]	; (8081bec <_Z17readGpsStreamDatev+0x244>)
 8081b3c:	f003 fc82 	bl	8085444 <_ZN3GPS16set_long_decimalE6Stringc>
 8081b40:	a808      	add	r0, sp, #32
 8081b42:	f006 fa89 	bl	8088058 <_ZN6StringD1Ev>
 8081b46:	e038      	b.n	8081bba <_Z17readGpsStreamDatev+0x212>
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
                        gps.set_satellites(numberOfSatellitesString);
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 8081b48:	2e07      	cmp	r6, #7
 8081b4a:	d139      	bne.n	8081bc0 <_Z17readGpsStreamDatev+0x218>
                    if(gps_sentence.charAt(a+1)!=','){
 8081b4c:	4621      	mov	r1, r4
 8081b4e:	4668      	mov	r0, sp
 8081b50:	f006 fbdc 	bl	808830c <_ZNK6String6charAtEj>
 8081b54:	282c      	cmp	r0, #44	; 0x2c
 8081b56:	d033      	beq.n	8081bc0 <_Z17readGpsStreamDatev+0x218>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081b58:	1ca3      	adds	r3, r4, #2
 8081b5a:	4622      	mov	r2, r4
 8081b5c:	4669      	mov	r1, sp
 8081b5e:	a804      	add	r0, sp, #16
 8081b60:	f006 fbd6 	bl	8088310 <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8081b64:	a904      	add	r1, sp, #16
 8081b66:	a808      	add	r0, sp, #32
 8081b68:	f006 fafc 	bl	8088164 <_ZN6StringC1ERKS_>
 8081b6c:	a908      	add	r1, sp, #32
 8081b6e:	481f      	ldr	r0, [pc, #124]	; (8081bec <_Z17readGpsStreamDatev+0x244>)
 8081b70:	f003 fcb6 	bl	80854e0 <_ZN3GPS23set_horizontalDillutionE6String>
 8081b74:	a808      	add	r0, sp, #32
 8081b76:	f006 fa6f 	bl	8088058 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081b7a:	882b      	ldrh	r3, [r5, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081b7c:	481b      	ldr	r0, [pc, #108]	; (8081bec <_Z17readGpsStreamDatev+0x244>)
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081b7e:	f023 030c 	bic.w	r3, r3, #12
 8081b82:	802b      	strh	r3, [r5, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081b84:	f003 fcc2 	bl	808550c <_ZN3GPS23get_horizontalDillutionEv>
 8081b88:	2801      	cmp	r0, #1
 8081b8a:	dc03      	bgt.n	8081b94 <_Z17readGpsStreamDatev+0x1ec>
                            status_word.status_int |= 0x000C;
 8081b8c:	882b      	ldrh	r3, [r5, #0]
 8081b8e:	f043 030c 	orr.w	r3, r3, #12
 8081b92:	e007      	b.n	8081ba4 <_Z17readGpsStreamDatev+0x1fc>
                        }else if(gps.get_horizontalDillution() < 5){
 8081b94:	4815      	ldr	r0, [pc, #84]	; (8081bec <_Z17readGpsStreamDatev+0x244>)
 8081b96:	f003 fcb9 	bl	808550c <_ZN3GPS23get_horizontalDillutionEv>
 8081b9a:	2804      	cmp	r0, #4
 8081b9c:	dc04      	bgt.n	8081ba8 <_Z17readGpsStreamDatev+0x200>
                            status_word.status_int |= 0x0008;
 8081b9e:	882b      	ldrh	r3, [r5, #0]
 8081ba0:	f043 0308 	orr.w	r3, r3, #8
 8081ba4:	802b      	strh	r3, [r5, #0]
 8081ba6:	e008      	b.n	8081bba <_Z17readGpsStreamDatev+0x212>
                        }else if(gps.get_horizontalDillution() < 20){
 8081ba8:	4810      	ldr	r0, [pc, #64]	; (8081bec <_Z17readGpsStreamDatev+0x244>)
 8081baa:	f003 fcaf 	bl	808550c <_ZN3GPS23get_horizontalDillutionEv>
 8081bae:	2813      	cmp	r0, #19
                            status_word.status_int |= 0x0004;
 8081bb0:	bfde      	ittt	le
 8081bb2:	883b      	ldrhle	r3, [r7, #0]
 8081bb4:	f043 0304 	orrle.w	r3, r3, #4
 8081bb8:	803b      	strhle	r3, [r7, #0]
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
                        gps.set_satellites(numberOfSatellitesString);
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081bba:	a804      	add	r0, sp, #16
 8081bbc:	f006 fa4c 	bl	8088058 <_ZN6StringD1Ev>
                        }


                    }
                }
                comma_counter++;
 8081bc0:	3601      	adds	r6, #1
 8081bc2:	3401      	adds	r4, #1
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081bc4:	e736      	b.n	8081a34 <_Z17readGpsStreamDatev+0x8c>
    }

}

void readGpsStreamDate(void){
    String gps_sentence = "init";
 8081bc6:	4668      	mov	r0, sp
 8081bc8:	f006 fa46 	bl	8088058 <_ZN6StringD1Ev>
                comma_counter++;
            }
        }
    }

}
 8081bcc:	b00d      	add	sp, #52	; 0x34
 8081bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081bd0:	0808dfb7 	.word	0x0808dfb7
 8081bd4:	0808e01a 	.word	0x0808e01a
 8081bd8:	0808e008 	.word	0x0808e008
 8081bdc:	20000b28 	.word	0x20000b28
 8081be0:	20000ac4 	.word	0x20000ac4
 8081be4:	0808dfd2 	.word	0x0808dfd2
 8081be8:	0808dfe3 	.word	0x0808dfe3
 8081bec:	200008b0 	.word	0x200008b0
 8081bf0:	0808dff5 	.word	0x0808dff5

08081bf4 <_Z12sendWifiInfov>:
          }
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
 8081bf4:	b510      	push	{r4, lr}
 8081bf6:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8081bf8:	491d      	ldr	r1, [pc, #116]	; (8081c70 <_Z12sendWifiInfov+0x7c>)
 8081bfa:	a808      	add	r0, sp, #32
 8081bfc:	f006 fa73 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8081c00:	491c      	ldr	r1, [pc, #112]	; (8081c74 <_Z12sendWifiInfov+0x80>)
 8081c02:	a804      	add	r0, sp, #16
 8081c04:	f006 faae 	bl	8088164 <_ZN6StringC1ERKS_>
 8081c08:	a904      	add	r1, sp, #16
 8081c0a:	a808      	add	r0, sp, #32
 8081c0c:	f006 fb45 	bl	808829a <_ZplRK15StringSumHelperRK6String>
 8081c10:	4919      	ldr	r1, [pc, #100]	; (8081c78 <_Z12sendWifiInfov+0x84>)
 8081c12:	f006 fb4e 	bl	80882b2 <_ZplRK15StringSumHelperPKc>
 8081c16:	4604      	mov	r4, r0
 8081c18:	4918      	ldr	r1, [pc, #96]	; (8081c7c <_Z12sendWifiInfov+0x88>)
 8081c1a:	a80c      	add	r0, sp, #48	; 0x30
 8081c1c:	f006 faa2 	bl	8088164 <_ZN6StringC1ERKS_>
 8081c20:	a90c      	add	r1, sp, #48	; 0x30
 8081c22:	4620      	mov	r0, r4
 8081c24:	f006 fb39 	bl	808829a <_ZplRK15StringSumHelperRK6String>
 8081c28:	4915      	ldr	r1, [pc, #84]	; (8081c80 <_Z12sendWifiInfov+0x8c>)
 8081c2a:	f006 fb42 	bl	80882b2 <_ZplRK15StringSumHelperPKc>
 8081c2e:	4601      	mov	r1, r0
 8081c30:	4668      	mov	r0, sp
 8081c32:	f006 fa97 	bl	8088164 <_ZN6StringC1ERKS_>
 8081c36:	a80c      	add	r0, sp, #48	; 0x30
 8081c38:	f006 fa0e 	bl	8088058 <_ZN6StringD1Ev>
 8081c3c:	a804      	add	r0, sp, #16
 8081c3e:	f006 fa0b 	bl	8088058 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8081c42:	a808      	add	r0, sp, #32
 8081c44:	f006 fa08 	bl	8088058 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 8081c48:	f007 f93e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081c4c:	490d      	ldr	r1, [pc, #52]	; (8081c84 <_Z12sendWifiInfov+0x90>)
 8081c4e:	f006 fbe8 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 8081c52:	f007 fa87 	bl	8089164 <_Z22__fetch_global_Serial1v>
 8081c56:	9900      	ldr	r1, [sp, #0]
 8081c58:	f006 fbe3 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 8081c5c:	f007 f934 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081c60:	4909      	ldr	r1, [pc, #36]	; (8081c88 <_Z12sendWifiInfov+0x94>)
 8081c62:	f006 fbde 	bl	8088422 <_ZN5Print7printlnEPKc>
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8081c66:	4668      	mov	r0, sp
 8081c68:	f006 f9f6 	bl	8088058 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}
 8081c6c:	b010      	add	sp, #64	; 0x40
 8081c6e:	bd10      	pop	{r4, pc}
 8081c70:	0808e265 	.word	0x0808e265
 8081c74:	20000208 	.word	0x20000208
 8081c78:	08090156 	.word	0x08090156
 8081c7c:	200001d4 	.word	0x200001d4
 8081c80:	0808e471 	.word	0x0808e471
 8081c84:	0808e268 	.word	0x0808e268
 8081c88:	0808e28c 	.word	0x0808e28c

08081c8c <_Z9goToSleepv>:
    Serial.println(" C (");
    Serial.print(hih.temperature_Raw());
    Serial.println(")");*/
}

void goToSleep(void){
 8081c8c:	b500      	push	{lr}
    //Serial.println("Going to sleep:)");
    digitalWrite(power_led_en, LOW);
 8081c8e:	4b1e      	ldr	r3, [pc, #120]	; (8081d08 <_Z9goToSleepv+0x7c>)
    Serial.println(" C (");
    Serial.print(hih.temperature_Raw());
    Serial.println(")");*/
}

void goToSleep(void){
 8081c90:	b089      	sub	sp, #36	; 0x24
    //Serial.println("Going to sleep:)");
    digitalWrite(power_led_en, LOW);
 8081c92:	8818      	ldrh	r0, [r3, #0]
 8081c94:	2100      	movs	r1, #0
 8081c96:	f007 fba2 	bl	80893de <digitalWrite>
    digitalWrite(plantower_en, LOW);
 8081c9a:	4b1c      	ldr	r3, [pc, #112]	; (8081d0c <_Z9goToSleepv+0x80>)
 8081c9c:	2100      	movs	r1, #0
 8081c9e:	8818      	ldrh	r0, [r3, #0]
 8081ca0:	f007 fb9d 	bl	80893de <digitalWrite>
    digitalWrite(esp_wroom_en, LOW);
 8081ca4:	4b1a      	ldr	r3, [pc, #104]	; (8081d10 <_Z9goToSleepv+0x84>)
 8081ca6:	2100      	movs	r1, #0
 8081ca8:	8818      	ldrh	r0, [r3, #0]
 8081caa:	f007 fb98 	bl	80893de <digitalWrite>
    digitalWrite(blower_en, LOW);
 8081cae:	4b19      	ldr	r3, [pc, #100]	; (8081d14 <_Z9goToSleepv+0x88>)
 8081cb0:	2100      	movs	r1, #0
 8081cb2:	8818      	ldrh	r0, [r3, #0]
 8081cb4:	f007 fb93 	bl	80893de <digitalWrite>
    digitalWrite(co2_en, LOW);
 8081cb8:	4b17      	ldr	r3, [pc, #92]	; (8081d18 <_Z9goToSleepv+0x8c>)
 8081cba:	2100      	movs	r1, #0
 8081cbc:	8818      	ldrh	r0, [r3, #0]
 8081cbe:	f007 fb8e 	bl	80893de <digitalWrite>
    digitalWrite(fiveVolt_en, LOW);
 8081cc2:	4b16      	ldr	r3, [pc, #88]	; (8081d1c <_Z9goToSleepv+0x90>)
 8081cc4:	2100      	movs	r1, #0
 8081cc6:	8818      	ldrh	r0, [r3, #0]
 8081cc8:	f007 fb89 	bl	80893de <digitalWrite>
    enableLowPowerGPS();
 8081ccc:	f7ff fafc 	bl	80812c8 <_Z17enableLowPowerGPSv>
    System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
 8081cd0:	4b13      	ldr	r3, [pc, #76]	; (8081d20 <_Z9goToSleepv+0x94>)
 8081cd2:	4a14      	ldr	r2, [pc, #80]	; (8081d24 <_Z9goToSleepv+0x98>)
 8081cd4:	681b      	ldr	r3, [r3, #0]
 8081cd6:	6812      	ldr	r2, [r2, #0]
 8081cd8:	2104      	movs	r1, #4
 8081cda:	f8ad 1016 	strh.w	r1, [sp, #22]
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 8081cde:	9202      	str	r2, [sp, #8]
 8081ce0:	005b      	lsls	r3, r3, #1
 8081ce2:	2201      	movs	r2, #1
 8081ce4:	2102      	movs	r1, #2
 8081ce6:	f88d 1015 	strb.w	r1, [sp, #21]
 8081cea:	9301      	str	r3, [sp, #4]
 8081cec:	9200      	str	r2, [sp, #0]
 8081cee:	f10d 0315 	add.w	r3, sp, #21
 8081cf2:	f10d 0116 	add.w	r1, sp, #22
 8081cf6:	a806      	add	r0, sp, #24
 8081cf8:	f006 f8ca 	bl	8087e90 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.reset();
 8081cfc:	f006 f8ad 	bl	8087e5a <_ZN11SystemClass5resetEv>
}
 8081d00:	b009      	add	sp, #36	; 0x24
 8081d02:	f85d fb04 	ldr.w	pc, [sp], #4
 8081d06:	bf00      	nop
 8081d08:	20000098 	.word	0x20000098
 8081d0c:	200000cc 	.word	0x200000cc
 8081d10:	200000a0 	.word	0x200000a0
 8081d14:	200000c8 	.word	0x200000c8
 8081d18:	200000a8 	.word	0x200000a8
 8081d1c:	200000d4 	.word	0x200000d4
 8081d20:	20000094 	.word	0x20000094
 8081d24:	20000808 	.word	0x20000808

08081d28 <_Z16goToSleepBatteryv>:

void goToSleepBattery(void){
 8081d28:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8081d2a:	4c2c      	ldr	r4, [pc, #176]	; (8081ddc <_Z16goToSleepBatteryv+0xb4>)
 8081d2c:	2101      	movs	r1, #1
 8081d2e:	8820      	ldrh	r0, [r4, #0]
 8081d30:	f007 fb55 	bl	80893de <digitalWrite>
    delay(250);                   // waits for a second
 8081d34:	20fa      	movs	r0, #250	; 0xfa
 8081d36:	f006 feab 	bl	8088a90 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081d3a:	2100      	movs	r1, #0
 8081d3c:	8820      	ldrh	r0, [r4, #0]
 8081d3e:	f007 fb4e 	bl	80893de <digitalWrite>
    delay(250);                   // waits for a second
 8081d42:	20fa      	movs	r0, #250	; 0xfa
 8081d44:	f006 fea4 	bl	8088a90 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8081d48:	2101      	movs	r1, #1
 8081d4a:	8820      	ldrh	r0, [r4, #0]
 8081d4c:	f007 fb47 	bl	80893de <digitalWrite>
    delay(250);                   // waits for a second
 8081d50:	20fa      	movs	r0, #250	; 0xfa
 8081d52:	f006 fe9d 	bl	8088a90 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081d56:	2100      	movs	r1, #0
 8081d58:	8820      	ldrh	r0, [r4, #0]
 8081d5a:	f007 fb40 	bl	80893de <digitalWrite>
    delay(250);                   // waits for a second
 8081d5e:	20fa      	movs	r0, #250	; 0xfa
 8081d60:	f006 fe96 	bl	8088a90 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8081d64:	2101      	movs	r1, #1
 8081d66:	8820      	ldrh	r0, [r4, #0]
 8081d68:	f007 fb39 	bl	80893de <digitalWrite>
    delay(250);                   // waits for a second
 8081d6c:	20fa      	movs	r0, #250	; 0xfa
 8081d6e:	f006 fe8f 	bl	8088a90 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081d72:	2100      	movs	r1, #0
 8081d74:	8820      	ldrh	r0, [r4, #0]
 8081d76:	f007 fb32 	bl	80893de <digitalWrite>
    delay(250);                   // waits for a second
 8081d7a:	20fa      	movs	r0, #250	; 0xfa
 8081d7c:	f006 fe88 	bl	8088a90 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8081d80:	2101      	movs	r1, #1
 8081d82:	8820      	ldrh	r0, [r4, #0]
 8081d84:	f007 fb2b 	bl	80893de <digitalWrite>
    delay(250);                   // waits for a second
 8081d88:	20fa      	movs	r0, #250	; 0xfa
 8081d8a:	f006 fe81 	bl	8088a90 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081d8e:	2100      	movs	r1, #0
 8081d90:	8820      	ldrh	r0, [r4, #0]
 8081d92:	f007 fb24 	bl	80893de <digitalWrite>
    delay(250);                   // waits for a second
 8081d96:	20fa      	movs	r0, #250	; 0xfa
 8081d98:	f006 fe7a 	bl	8088a90 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8081d9c:	2101      	movs	r1, #1
 8081d9e:	8820      	ldrh	r0, [r4, #0]
 8081da0:	f007 fb1d 	bl	80893de <digitalWrite>
    delay(250);                   // waits for a second
 8081da4:	20fa      	movs	r0, #250	; 0xfa
 8081da6:	f006 fe73 	bl	8088a90 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081daa:	2100      	movs	r1, #0
 8081dac:	8820      	ldrh	r0, [r4, #0]
 8081dae:	f007 fb16 	bl	80893de <digitalWrite>
    delay(250);                   // waits for a second
 8081db2:	20fa      	movs	r0, #250	; 0xfa
 8081db4:	f006 fe6c 	bl	8088a90 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8081db8:	2101      	movs	r1, #1
 8081dba:	8820      	ldrh	r0, [r4, #0]
 8081dbc:	f007 fb0f 	bl	80893de <digitalWrite>
    delay(250);                   // waits for a second
 8081dc0:	20fa      	movs	r0, #250	; 0xfa
 8081dc2:	f006 fe65 	bl	8088a90 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081dc6:	8820      	ldrh	r0, [r4, #0]
 8081dc8:	2100      	movs	r1, #0
 8081dca:	f007 fb08 	bl	80893de <digitalWrite>
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}
 8081dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
    delay(250);                   // waits for a second
    digitalWrite(power_led_en, LOW);    // Sets the LED off

    //Serial.println("Turning off batfet");
    writeRegister(7, 0b01101011);   //turn off batfet
 8081dd2:	216b      	movs	r1, #107	; 0x6b
 8081dd4:	2007      	movs	r0, #7
 8081dd6:	f7fe bee7 	b.w	8080ba8 <_Z13writeRegisterhh>
 8081dda:	bf00      	nop
 8081ddc:	20000098 	.word	0x20000098

08081de0 <_Z8resetESPv>:
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
 8081de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(esp_wroom_en, LOW);
 8081de2:	4f17      	ldr	r7, [pc, #92]	; (8081e40 <_Z8resetESPv+0x60>)
  digitalWrite(plantower_en, LOW);
 8081de4:	4e17      	ldr	r6, [pc, #92]	; (8081e44 <_Z8resetESPv+0x64>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 8081de6:	8838      	ldrh	r0, [r7, #0]
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
 8081de8:	4d17      	ldr	r5, [pc, #92]	; (8081e48 <_Z8resetESPv+0x68>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 8081dea:	2100      	movs	r1, #0
 8081dec:	f007 faf7 	bl	80893de <digitalWrite>
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
  digitalWrite(co2_en, LOW);
 8081df0:	4c16      	ldr	r4, [pc, #88]	; (8081e4c <_Z8resetESPv+0x6c>)

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
  digitalWrite(plantower_en, LOW);
 8081df2:	8830      	ldrh	r0, [r6, #0]
 8081df4:	2100      	movs	r1, #0
 8081df6:	f007 faf2 	bl	80893de <digitalWrite>
  digitalWrite(blower_en, LOW);
 8081dfa:	8828      	ldrh	r0, [r5, #0]
 8081dfc:	2100      	movs	r1, #0
 8081dfe:	f007 faee 	bl	80893de <digitalWrite>
  digitalWrite(co2_en, LOW);
 8081e02:	2100      	movs	r1, #0
 8081e04:	8820      	ldrh	r0, [r4, #0]
 8081e06:	f007 faea 	bl	80893de <digitalWrite>
  delay(1000);
 8081e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081e0e:	f006 fe3f 	bl	8088a90 <delay>
  digitalWrite(esp_wroom_en, HIGH);
 8081e12:	8838      	ldrh	r0, [r7, #0]
 8081e14:	2101      	movs	r1, #1
 8081e16:	f007 fae2 	bl	80893de <digitalWrite>
  digitalWrite(plantower_en, HIGH);
 8081e1a:	8830      	ldrh	r0, [r6, #0]
 8081e1c:	2101      	movs	r1, #1
 8081e1e:	f007 fade 	bl	80893de <digitalWrite>
  digitalWrite(blower_en, HIGH);
 8081e22:	8828      	ldrh	r0, [r5, #0]
 8081e24:	2101      	movs	r1, #1
 8081e26:	f007 fada 	bl	80893de <digitalWrite>
  digitalWrite(co2_en, HIGH);
 8081e2a:	8820      	ldrh	r0, [r4, #0]
 8081e2c:	2101      	movs	r1, #1
 8081e2e:	f007 fad6 	bl	80893de <digitalWrite>
  delay(1000);
}
 8081e32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
  digitalWrite(esp_wroom_en, HIGH);
  digitalWrite(plantower_en, HIGH);
  digitalWrite(blower_en, HIGH);
  digitalWrite(co2_en, HIGH);
  delay(1000);
 8081e36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081e3a:	f006 be29 	b.w	8088a90 <delay>
 8081e3e:	bf00      	nop
 8081e40:	200000a0 	.word	0x200000a0
 8081e44:	200000cc 	.word	0x200000cc
 8081e48:	200000c8 	.word	0x200000c8
 8081e4c:	200000a8 	.word	0x200000a8

08081e50 <setup>:
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
}


void setup()
{
 8081e50:	b570      	push	{r4, r5, r6, lr}
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8081e52:	4bb2      	ldr	r3, [pc, #712]	; (808211c <setup+0x2cc>)
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
}


void setup()
{
 8081e54:	b0aa      	sub	sp, #168	; 0xa8
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8081e56:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 8081e5a:	49b1      	ldr	r1, [pc, #708]	; (8082120 <setup+0x2d0>)
 8081e5c:	a803      	add	r0, sp, #12


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 8081e5e:	4db1      	ldr	r5, [pc, #708]	; (8082124 <setup+0x2d4>)

void setup()
{
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8081e60:	801a      	strh	r2, [r3, #0]


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
 8081e62:	4eb1      	ldr	r6, [pc, #708]	; (8082128 <setup+0x2d8>)
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 8081e64:	f006 f93f 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>


    setADCSampleTime(ADC_SampleTime_480Cycles);
 8081e68:	2007      	movs	r0, #7
 8081e6a:	f006 fe0f 	bl	8088a8c <setADCSampleTime>
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 8081e6e:	2101      	movs	r1, #1
 8081e70:	8828      	ldrh	r0, [r5, #0]
 8081e72:	f007 faa3 	bl	80893bc <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 8081e76:	2101      	movs	r1, #1
 8081e78:	8830      	ldrh	r0, [r6, #0]
 8081e7a:	f007 fa9f 	bl	80893bc <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 8081e7e:	4bab      	ldr	r3, [pc, #684]	; (808212c <setup+0x2dc>)
 8081e80:	2101      	movs	r1, #1
 8081e82:	8818      	ldrh	r0, [r3, #0]
 8081e84:	f007 fa9a 	bl	80893bc <pinMode>
    pinMode(plantower_en, OUTPUT);
 8081e88:	4ba9      	ldr	r3, [pc, #676]	; (8082130 <setup+0x2e0>)
 8081e8a:	2101      	movs	r1, #1
 8081e8c:	8818      	ldrh	r0, [r3, #0]
 8081e8e:	f007 fa95 	bl	80893bc <pinMode>
    pinMode(power_led_en, OUTPUT);
 8081e92:	4ba8      	ldr	r3, [pc, #672]	; (8082134 <setup+0x2e4>)
 8081e94:	2101      	movs	r1, #1
 8081e96:	8818      	ldrh	r0, [r3, #0]
 8081e98:	f007 fa90 	bl	80893bc <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 8081e9c:	4ba6      	ldr	r3, [pc, #664]	; (8082138 <setup+0x2e8>)
 8081e9e:	2101      	movs	r1, #1
 8081ea0:	8818      	ldrh	r0, [r3, #0]
 8081ea2:	f007 fa8b 	bl	80893bc <pinMode>
    pinMode(blower_en, OUTPUT);
 8081ea6:	4ba5      	ldr	r3, [pc, #660]	; (808213c <setup+0x2ec>)
 8081ea8:	2101      	movs	r1, #1
 8081eaa:	8818      	ldrh	r0, [r3, #0]
 8081eac:	f007 fa86 	bl	80893bc <pinMode>
    pinMode(D4, INPUT);
 8081eb0:	2100      	movs	r1, #0
 8081eb2:	2004      	movs	r0, #4
 8081eb4:	f007 fa82 	bl	80893bc <pinMode>
    pinMode(co2_en, OUTPUT);
 8081eb8:	4ba1      	ldr	r3, [pc, #644]	; (8082140 <setup+0x2f0>)
 8081eba:	2101      	movs	r1, #1
 8081ebc:	8818      	ldrh	r0, [r3, #0]
 8081ebe:	f007 fa7d 	bl	80893bc <pinMode>

    //read all stored variables (calibration parameters)
    readStoredVars();
 8081ec2:	f7fe ffb7 	bl	8080e34 <_Z14readStoredVarsv>

    pmic.begin();
 8081ec6:	489f      	ldr	r0, [pc, #636]	; (8082144 <setup+0x2f4>)
 8081ec8:	f005 fdce 	bl	8087a68 <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 8081ecc:	f241 0170 	movw	r1, #4208	; 0x1070
 8081ed0:	489c      	ldr	r0, [pc, #624]	; (8082144 <setup+0x2f4>)
 8081ed2:	f005 fef9 	bl	8087cc8 <_ZN4PMIC16setChargeVoltageEt>
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
 8081ed6:	489b      	ldr	r0, [pc, #620]	; (8082144 <setup+0x2f4>)
 8081ed8:	f005 fec1 	bl	8087c5e <_ZN4PMIC14enableChargingEv>
    writeRegister(0, 0b00110100);
    writeRegister(1, 0b00011011);
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 8081edc:	4c9a      	ldr	r4, [pc, #616]	; (8082148 <setup+0x2f8>)
    pmic.begin();
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
    writeRegister(0, 0b00110100);
 8081ede:	2134      	movs	r1, #52	; 0x34
 8081ee0:	2000      	movs	r0, #0
 8081ee2:	f7fe fe61 	bl	8080ba8 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 8081ee6:	211b      	movs	r1, #27
 8081ee8:	2001      	movs	r0, #1
 8081eea:	f7fe fe5d 	bl	8080ba8 <_Z13writeRegisterhh>
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 8081eee:	4620      	mov	r0, r4
 8081ef0:	f003 f990 	bl	8085214 <_ZN10PowerCheck4loopEv>

    
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8081ef4:	4b95      	ldr	r3, [pc, #596]	; (808214c <setup+0x2fc>)
 8081ef6:	681b      	ldr	r3, [r3, #0]
 8081ef8:	b123      	cbz	r3, 8081f04 <setup+0xb4>
 8081efa:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8081efe:	2b00      	cmp	r3, #0
 8081f00:	f000 8250 	beq.w	80823a4 <setup+0x554>
        goToSleepBattery();
    }else if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8081f04:	4b92      	ldr	r3, [pc, #584]	; (8082150 <setup+0x300>)
 8081f06:	681b      	ldr	r3, [r3, #0]
 8081f08:	2b01      	cmp	r3, #1
 8081f0a:	d10b      	bne.n	8081f24 <setup+0xd4>
 8081f0c:	4891      	ldr	r0, [pc, #580]	; (8082154 <setup+0x304>)
 8081f0e:	f006 fe23 	bl	8088b58 <_ZN9FuelGauge6getSoCEv>
 8081f12:	4991      	ldr	r1, [pc, #580]	; (8082158 <setup+0x308>)
 8081f14:	f008 fc3c 	bl	808a790 <__aeabi_fcmplt>
 8081f18:	b120      	cbz	r0, 8081f24 <setup+0xd4>
 8081f1a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8081f1e:	2b00      	cmp	r3, #0
 8081f20:	f000 8240 	beq.w	80823a4 <setup+0x554>
            //Serial.println("Going to sleep because battery is below 20% charge");
        goToSleepBattery();
    }
    //if user presses power button during operation, reset and it will go to low power mode
    attachInterrupt(D4, System.reset, RISING);
 8081f24:	2300      	movs	r3, #0
 8081f26:	9300      	str	r3, [sp, #0]
 8081f28:	2201      	movs	r2, #1
 8081f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8081f2e:	498b      	ldr	r1, [pc, #556]	; (808215c <setup+0x30c>)
 8081f30:	2004      	movs	r0, #4
 8081f32:	f007 f82d 	bl	8088f90 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if(digitalRead(D4)){
 8081f36:	2004      	movs	r0, #4
 8081f38:	f007 fa6a 	bl	8089410 <digitalRead>
 8081f3c:	b108      	cbz	r0, 8081f42 <setup+0xf2>
      goToSleep();
 8081f3e:	f7ff fea5 	bl	8081c8c <_Z9goToSleepv>
    }

    digitalWrite(lmp91000_1_en, HIGH);
 8081f42:	2101      	movs	r1, #1
 8081f44:	8828      	ldrh	r0, [r5, #0]
 8081f46:	f007 fa4a 	bl	80893de <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 8081f4a:	2101      	movs	r1, #1
 8081f4c:	8830      	ldrh	r0, [r6, #0]
 8081f4e:	f007 fa46 	bl	80893de <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 8081f52:	4b78      	ldr	r3, [pc, #480]	; (8082134 <setup+0x2e4>)
 8081f54:	2101      	movs	r1, #1
 8081f56:	8818      	ldrh	r0, [r3, #0]
 8081f58:	f007 fa41 	bl	80893de <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 8081f5c:	4b74      	ldr	r3, [pc, #464]	; (8082130 <setup+0x2e0>)
 8081f5e:	2101      	movs	r1, #1
 8081f60:	8818      	ldrh	r0, [r3, #0]
 8081f62:	f007 fa3c 	bl	80893de <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 8081f66:	4b74      	ldr	r3, [pc, #464]	; (8082138 <setup+0x2e8>)
 8081f68:	2101      	movs	r1, #1
 8081f6a:	8818      	ldrh	r0, [r3, #0]
 8081f6c:	f007 fa37 	bl	80893de <digitalWrite>
    digitalWrite(blower_en, HIGH);
 8081f70:	4b72      	ldr	r3, [pc, #456]	; (808213c <setup+0x2ec>)
 8081f72:	2101      	movs	r1, #1
 8081f74:	8818      	ldrh	r0, [r3, #0]
 8081f76:	f007 fa32 	bl	80893de <digitalWrite>
    digitalWrite(co2_en, HIGH);
 8081f7a:	4b71      	ldr	r3, [pc, #452]	; (8082140 <setup+0x2f0>)
 8081f7c:	2101      	movs	r1, #1
 8081f7e:	8818      	ldrh	r0, [r3, #0]
 8081f80:	f007 fa2d 	bl	80893de <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 8081f84:	4b69      	ldr	r3, [pc, #420]	; (808212c <setup+0x2dc>)
 8081f86:	2101      	movs	r1, #1
 8081f88:	8818      	ldrh	r0, [r3, #0]
 8081f8a:	f007 fa28 	bl	80893de <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8081f8e:	4a74      	ldr	r2, [pc, #464]	; (8082160 <setup+0x310>)
 8081f90:	4974      	ldr	r1, [pc, #464]	; (8082164 <setup+0x314>)
 8081f92:	4875      	ldr	r0, [pc, #468]	; (8082168 <setup+0x318>)
 8081f94:	f006 fec2 	bl	8088d1c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

    // register the cloud function
    Particle.function("geteepromdata", remoteReadStoredVars);
    //debugging_enabled = 1;  //for testing...
    //initialize serial1 for communication with BLE nano from redbear labs
    Serial1.begin(9600);
 8081f98:	f007 f8e4 	bl	8089164 <_Z22__fetch_global_Serial1v>
 8081f9c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081fa0:	f007 f8da 	bl	8089158 <_ZN11USARTSerial5beginEm>
    //init serial4 to communicate with Plantower PMS5003
    Serial4.begin(9600);
 8081fa4:	f7fe fd62 	bl	8080a6c <_Z22__fetch_global_Serial4v>
 8081fa8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081fac:	f007 f8d4 	bl	8089158 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 8081fb0:	f7fe fd96 	bl	8080ae0 <_Z22__fetch_global_Serial5v>
 8081fb4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081fb8:	f007 f8ce 	bl	8089158 <_ZN11USARTSerial5beginEm>
    //set the Timeout to 1500ms, longer than the data transmission periodic time of the sensor
    Serial4.setTimeout(5000);
 8081fbc:	f7fe fd56 	bl	8080a6c <_Z22__fetch_global_Serial4v>
 8081fc0:	f241 3188 	movw	r1, #5000	; 0x1388
 8081fc4:	f006 fbb1 	bl	808872a <_ZN6Stream10setTimeoutEm>
    // REG07 Misc Operation Control Register Format
    writeRegister(7, 0b01001011);   //0x4B*/


    //delay for 5 seconds to give time to programmer person for connecting to serial port for debugging
    delay(10000);
 8081fc8:	f242 7010 	movw	r0, #10000	; 0x2710
 8081fcc:	f006 fd60 	bl	8088a90 <delay>
    //initialize main serial port for debug output
    Serial.begin(9600);
 8081fd0:	f006 ff7a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8081fd4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081fd8:	f006 ff5c 	bl	8088e94 <_ZN9USBSerial5beginEl>



    #if sd_en
     fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 8081fdc:	4b63      	ldr	r3, [pc, #396]	; (808216c <setup+0x31c>)
 8081fde:	220a      	movs	r2, #10
 8081fe0:	6819      	ldr	r1, [r3, #0]
 8081fe2:	a807      	add	r0, sp, #28
 8081fe4:	f006 f8e2 	bl	80881ac <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8081fe8:	a907      	add	r1, sp, #28
 8081fea:	a80b      	add	r0, sp, #44	; 0x2c
 8081fec:	f006 f8ba 	bl	8088164 <_ZN6StringC1ERKS_>
 8081ff0:	495f      	ldr	r1, [pc, #380]	; (8082170 <setup+0x320>)
 8081ff2:	a80b      	add	r0, sp, #44	; 0x2c
 8081ff4:	f006 f95d 	bl	80882b2 <_ZplRK15StringSumHelperPKc>
 8081ff8:	4604      	mov	r4, r0
 8081ffa:	f006 fd33 	bl	8088a64 <_ZN9TimeClass4yearEv>
 8081ffe:	220a      	movs	r2, #10
 8082000:	4601      	mov	r1, r0
 8082002:	a80f      	add	r0, sp, #60	; 0x3c
 8082004:	f006 f8d2 	bl	80881ac <_ZN6StringC1Eih>
 8082008:	a90f      	add	r1, sp, #60	; 0x3c
 808200a:	4620      	mov	r0, r4
 808200c:	f006 f945 	bl	808829a <_ZplRK15StringSumHelperRK6String>
 8082010:	4604      	mov	r4, r0
 8082012:	f006 fd1f 	bl	8088a54 <_ZN9TimeClass5monthEv>
 8082016:	220a      	movs	r2, #10
 8082018:	4601      	mov	r1, r0
 808201a:	a813      	add	r0, sp, #76	; 0x4c
 808201c:	f006 f8c6 	bl	80881ac <_ZN6StringC1Eih>
 8082020:	a913      	add	r1, sp, #76	; 0x4c
 8082022:	4620      	mov	r0, r4
 8082024:	f006 f939 	bl	808829a <_ZplRK15StringSumHelperRK6String>
 8082028:	4604      	mov	r4, r0
 808202a:	f006 fd09 	bl	8088a40 <_ZN9TimeClass3dayEv>
 808202e:	220a      	movs	r2, #10
 8082030:	4601      	mov	r1, r0
 8082032:	a817      	add	r0, sp, #92	; 0x5c
 8082034:	f006 f8ba 	bl	80881ac <_ZN6StringC1Eih>
 8082038:	a917      	add	r1, sp, #92	; 0x5c
 808203a:	4620      	mov	r0, r4
 808203c:	f006 f92d 	bl	808829a <_ZplRK15StringSumHelperRK6String>
 8082040:	494b      	ldr	r1, [pc, #300]	; (8082170 <setup+0x320>)
 8082042:	f006 f936 	bl	80882b2 <_ZplRK15StringSumHelperPKc>
 8082046:	4604      	mov	r4, r0
 8082048:	f006 fcdc 	bl	8088a04 <_ZN9TimeClass4hourEv>
 808204c:	220a      	movs	r2, #10
 808204e:	4601      	mov	r1, r0
 8082050:	a81b      	add	r0, sp, #108	; 0x6c
 8082052:	f006 f8ab 	bl	80881ac <_ZN6StringC1Eih>
 8082056:	a91b      	add	r1, sp, #108	; 0x6c
 8082058:	4620      	mov	r0, r4
 808205a:	f006 f91e 	bl	808829a <_ZplRK15StringSumHelperRK6String>
 808205e:	4604      	mov	r4, r0
 8082060:	f006 fcda 	bl	8088a18 <_ZN9TimeClass6minuteEv>
 8082064:	220a      	movs	r2, #10
 8082066:	4601      	mov	r1, r0
 8082068:	a81f      	add	r0, sp, #124	; 0x7c
 808206a:	f006 f89f 	bl	80881ac <_ZN6StringC1Eih>
 808206e:	a91f      	add	r1, sp, #124	; 0x7c
 8082070:	4620      	mov	r0, r4
 8082072:	f006 f912 	bl	808829a <_ZplRK15StringSumHelperRK6String>
 8082076:	4604      	mov	r4, r0
 8082078:	f006 fcd8 	bl	8088a2c <_ZN9TimeClass6secondEv>
 808207c:	220a      	movs	r2, #10
 808207e:	4601      	mov	r1, r0
 8082080:	a823      	add	r0, sp, #140	; 0x8c
 8082082:	f006 f893 	bl	80881ac <_ZN6StringC1Eih>
 8082086:	a923      	add	r1, sp, #140	; 0x8c
 8082088:	4620      	mov	r0, r4
 808208a:	f006 f906 	bl	808829a <_ZplRK15StringSumHelperRK6String>
 808208e:	4939      	ldr	r1, [pc, #228]	; (8082174 <setup+0x324>)
 8082090:	f006 f90f 	bl	80882b2 <_ZplRK15StringSumHelperPKc>
 8082094:	4c38      	ldr	r4, [pc, #224]	; (8082178 <setup+0x328>)
 8082096:	4601      	mov	r1, r0
 8082098:	4620      	mov	r0, r4
 808209a:	f006 f854 	bl	8088146 <_ZN6StringaSERKS_>
 808209e:	a823      	add	r0, sp, #140	; 0x8c
 80820a0:	f005 ffda 	bl	8088058 <_ZN6StringD1Ev>
 80820a4:	a81f      	add	r0, sp, #124	; 0x7c
 80820a6:	f005 ffd7 	bl	8088058 <_ZN6StringD1Ev>
 80820aa:	a81b      	add	r0, sp, #108	; 0x6c
 80820ac:	f005 ffd4 	bl	8088058 <_ZN6StringD1Ev>
 80820b0:	a817      	add	r0, sp, #92	; 0x5c
 80820b2:	f005 ffd1 	bl	8088058 <_ZN6StringD1Ev>
 80820b6:	a813      	add	r0, sp, #76	; 0x4c
 80820b8:	f005 ffce 	bl	8088058 <_ZN6StringD1Ev>
 80820bc:	a80f      	add	r0, sp, #60	; 0x3c
 80820be:	f005 ffcb 	bl	8088058 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80820c2:	a80b      	add	r0, sp, #44	; 0x2c
 80820c4:	f005 ffc8 	bl	8088058 <_ZN6StringD1Ev>
 80820c8:	a807      	add	r0, sp, #28
 80820ca:	f005 ffc5 	bl	8088058 <_ZN6StringD1Ev>
     Serial.println("Checking for sd card");
 80820ce:	f006 fefb 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80820d2:	492a      	ldr	r1, [pc, #168]	; (808217c <setup+0x32c>)
 80820d4:	f006 f9a5 	bl	8088422 <_ZN5Print7printlnEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80820d8:	4929      	ldr	r1, [pc, #164]	; (8082180 <setup+0x330>)
 80820da:	a823      	add	r0, sp, #140	; 0x8c
 80820dc:	f006 f803 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
     logFileName = "log_" + fileName;
 80820e0:	4621      	mov	r1, r4
 80820e2:	a823      	add	r0, sp, #140	; 0x8c
 80820e4:	f006 f8d9 	bl	808829a <_ZplRK15StringSumHelperRK6String>
 80820e8:	4601      	mov	r1, r0
 80820ea:	4826      	ldr	r0, [pc, #152]	; (8082184 <setup+0x334>)
 80820ec:	f006 f82b 	bl	8088146 <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80820f0:	a823      	add	r0, sp, #140	; 0x8c
 80820f2:	f005 ffb1 	bl	8088058 <_ZN6StringD1Ev>
 80820f6:	4924      	ldr	r1, [pc, #144]	; (8082188 <setup+0x338>)
 80820f8:	2302      	movs	r3, #2
 80820fa:	220c      	movs	r2, #12
 80820fc:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8082100:	f7fe fd28 	bl	8080b54 <_ZN9SdFatBase5beginEP9SdSpiBasehh>

    if (sd.begin(CS)) { //if uSD is functioning and MCP error has not been logged yet.
 8082104:	2800      	cmp	r0, #0
 8082106:	d043      	beq.n	8082190 <setup+0x340>
      //look for a wifi file
      check_wifi_file();
      //look for a calibration file
      check_cal_file();*/

      Serial.print("Created new file to log to uSD card: ");
 8082108:	f006 fede 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808210c:	491f      	ldr	r1, [pc, #124]	; (808218c <setup+0x33c>)
 808210e:	f006 f975 	bl	80883fc <_ZN5Print5printEPKc>
      Serial.println(fileName);
 8082112:	f006 fed9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082116:	6821      	ldr	r1, [r4, #0]
 8082118:	e03d      	b.n	8082196 <setup+0x346>
 808211a:	bf00      	nop
 808211c:	20000b28 	.word	0x20000b28
 8082120:	08090584 	.word	0x08090584
 8082124:	2000009c 	.word	0x2000009c
 8082128:	200000d0 	.word	0x200000d0
 808212c:	200000d4 	.word	0x200000d4
 8082130:	200000cc 	.word	0x200000cc
 8082134:	20000098 	.word	0x20000098
 8082138:	200000a0 	.word	0x200000a0
 808213c:	200000c8 	.word	0x200000c8
 8082140:	200000a8 	.word	0x200000a8
 8082144:	20000a9c 	.word	0x20000a9c
 8082148:	20000774 	.word	0x20000774
 808214c:	20000218 	.word	0x20000218
 8082150:	20000b2c 	.word	0x20000b2c
 8082154:	200007fc 	.word	0x200007fc
 8082158:	41a00000 	.word	0x41a00000
 808215c:	08087e5b 	.word	0x08087e5b
 8082160:	0808e295 	.word	0x0808e295
 8082164:	080809cd 	.word	0x080809cd
 8082168:	08088cf1 	.word	0x08088cf1
 808216c:	20000088 	.word	0x20000088
 8082170:	0808e2c0 	.word	0x0808e2c0
 8082174:	0808e2a3 	.word	0x0808e2a3
 8082178:	20000aa4 	.word	0x20000aa4
 808217c:	0808e2a8 	.word	0x0808e2a8
 8082180:	0808e2bd 	.word	0x0808e2bd
 8082184:	20000798 	.word	0x20000798
 8082188:	20000698 	.word	0x20000698
 808218c:	0808e2c2 	.word	0x0808e2c2
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 8082190:	f006 fe9a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082194:	4985      	ldr	r1, [pc, #532]	; (80823ac <setup+0x55c>)
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
    if(debugging_enabled)
 8082196:	4c86      	ldr	r4, [pc, #536]	; (80823b0 <setup+0x560>)
      check_cal_file();*/

      Serial.print("Created new file to log to uSD card: ");
      Serial.println(fileName);
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 8082198:	f006 f943 	bl	8088422 <_ZN5Print7printlnEPKc>
    }
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
 808219c:	f006 fe94 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80821a0:	4984      	ldr	r1, [pc, #528]	; (80823b4 <setup+0x564>)
 80821a2:	f006 f93e 	bl	8088422 <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 80821a6:	6823      	ldr	r3, [r4, #0]
 80821a8:	b14b      	cbz	r3, 80821be <setup+0x36e>
        writeLogFile("Starting LMP91000 CO initialization");
 80821aa:	4982      	ldr	r1, [pc, #520]	; (80823b4 <setup+0x564>)
 80821ac:	a823      	add	r0, sp, #140	; 0x8c
 80821ae:	f005 ff9a 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 80821b2:	a823      	add	r0, sp, #140	; 0x8c
 80821b4:	f7ff fa6c 	bl	8081690 <_Z12writeLogFile6String>
 80821b8:	a823      	add	r0, sp, #140	; 0x8c
 80821ba:	f005 ff4d 	bl	8088058 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 80821be:	f007 f9ab 	bl	8089518 <_Z19__fetch_global_Wirev>
 80821c2:	f007 f833 	bl	808922c <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 80821c6:	2100      	movs	r1, #0
 80821c8:	8828      	ldrh	r0, [r5, #0]
 80821ca:	f007 f908 	bl	80893de <digitalWrite>

    if(lmp91000_1.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80821ce:	2303      	movs	r3, #3
 80821d0:	22b0      	movs	r2, #176	; 0xb0
 80821d2:	2118      	movs	r1, #24
 80821d4:	4878      	ldr	r0, [pc, #480]	; (80823b8 <setup+0x568>)
 80821d6:	f002 ffbf 	bl	8085158 <_ZN8LMP910009configureEhhh>
 80821da:	b988      	cbnz	r0, 8082200 <setup+0x3b0>
    {
          Serial.println("Couldn't communicate with LMP91000_1 for CO");
 80821dc:	f006 fe74 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80821e0:	4976      	ldr	r1, [pc, #472]	; (80823bc <setup+0x56c>)
 80821e2:	f006 f91e 	bl	8088422 <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 80821e6:	6823      	ldr	r3, [r4, #0]
 80821e8:	b1fb      	cbz	r3, 808222a <setup+0x3da>
            writeLogFile("Couldn't communicate with LMP91000_1 for CO");
 80821ea:	4974      	ldr	r1, [pc, #464]	; (80823bc <setup+0x56c>)
 80821ec:	a823      	add	r0, sp, #140	; 0x8c
 80821ee:	f005 ff7a 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 80821f2:	a823      	add	r0, sp, #140	; 0x8c
 80821f4:	f7ff fa4c 	bl	8081690 <_Z12writeLogFile6String>
 80821f8:	a823      	add	r0, sp, #140	; 0x8c
 80821fa:	f005 ff2d 	bl	8088058 <_ZN6StringD1Ev>
 80821fe:	e014      	b.n	808222a <setup+0x3da>
          }
    }else{
          Serial.println("Initialized LMP91000_1 for CO");
 8082200:	f006 fe62 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082204:	496e      	ldr	r1, [pc, #440]	; (80823c0 <setup+0x570>)
 8082206:	f006 f90c 	bl	8088422 <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 808220a:	6823      	ldr	r3, [r4, #0]
 808220c:	b14b      	cbz	r3, 8082222 <setup+0x3d2>
            writeLogFile("Initialized LMP91000 for CO");
 808220e:	496d      	ldr	r1, [pc, #436]	; (80823c4 <setup+0x574>)
 8082210:	a823      	add	r0, sp, #140	; 0x8c
 8082212:	f005 ff68 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8082216:	a823      	add	r0, sp, #140	; 0x8c
 8082218:	f7ff fa3a 	bl	8081690 <_Z12writeLogFile6String>
 808221c:	a823      	add	r0, sp, #140	; 0x8c
 808221e:	f005 ff1b 	bl	8088058 <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_1_en, HIGH);  //disable
 8082222:	2101      	movs	r1, #1
 8082224:	8828      	ldrh	r0, [r5, #0]
 8082226:	f007 f8da 	bl	80893de <digitalWrite>
    }
    ads1.begin();
 808222a:	4867      	ldr	r0, [pc, #412]	; (80823c8 <setup+0x578>)
 808222c:	f003 f890 	bl	8085350 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x49,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 8082230:	f007 f972 	bl	8089518 <_Z19__fetch_global_Wirev>
 8082234:	2201      	movs	r2, #1
 8082236:	2149      	movs	r1, #73	; 0x49
 8082238:	f007 f80a 	bl	8089250 <_ZN7TwoWire11requestFromEii>
 808223c:	b988      	cbnz	r0, 8082262 <setup+0x412>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 808223e:	f006 fe43 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082242:	4962      	ldr	r1, [pc, #392]	; (80823cc <setup+0x57c>)
 8082244:	f006 f8ed 	bl	8088422 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082248:	6823      	ldr	r3, [r4, #0]
 808224a:	b173      	cbz	r3, 808226a <setup+0x41a>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 808224c:	495f      	ldr	r1, [pc, #380]	; (80823cc <setup+0x57c>)
 808224e:	a823      	add	r0, sp, #140	; 0x8c
 8082250:	f005 ff49 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8082254:	a823      	add	r0, sp, #140	; 0x8c
 8082256:	f7ff fa1b 	bl	8081690 <_Z12writeLogFile6String>
 808225a:	a823      	add	r0, sp, #140	; 0x8c
 808225c:	f005 fefc 	bl	8088058 <_ZN6StringD1Ev>
 8082260:	e003      	b.n	808226a <setup+0x41a>
    }
    else{
      ads1.setGain(GAIN_TWOTHIRDS);
 8082262:	2100      	movs	r1, #0
 8082264:	4858      	ldr	r0, [pc, #352]	; (80823c8 <setup+0x578>)
 8082266:	f003 f87a 	bl	808535e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }

    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000_2 initialization");
 808226a:	f006 fe2d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808226e:	4958      	ldr	r1, [pc, #352]	; (80823d0 <setup+0x580>)
 8082270:	f006 f8d7 	bl	8088422 <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8082274:	6823      	ldr	r3, [r4, #0]
 8082276:	b14b      	cbz	r3, 808228c <setup+0x43c>
        writeLogFile("Starting LMP91000_2 initialization");
 8082278:	4955      	ldr	r1, [pc, #340]	; (80823d0 <setup+0x580>)
 808227a:	a823      	add	r0, sp, #140	; 0x8c
 808227c:	f005 ff33 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8082280:	a823      	add	r0, sp, #140	; 0x8c
 8082282:	f7ff fa05 	bl	8081690 <_Z12writeLogFile6String>
 8082286:	a823      	add	r0, sp, #140	; 0x8c
 8082288:	f005 fee6 	bl	8088058 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 808228c:	4d51      	ldr	r5, [pc, #324]	; (80823d4 <setup+0x584>)
    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000_2 initialization");
    if(debugging_enabled)
        writeLogFile("Starting LMP91000_2 initialization");
    Wire.begin();   //this must be done for the LMP91000
 808228e:	f007 f943 	bl	8089518 <_Z19__fetch_global_Wirev>
 8082292:	f006 ffcb 	bl	808922c <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8082296:	2100      	movs	r1, #0
 8082298:	8828      	ldrh	r0, [r5, #0]
 808229a:	f007 f8a0 	bl	80893de <digitalWrite>

    if(lmp91000_2.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 808229e:	2303      	movs	r3, #3
 80822a0:	22b0      	movs	r2, #176	; 0xb0
 80822a2:	2118      	movs	r1, #24
 80822a4:	484c      	ldr	r0, [pc, #304]	; (80823d8 <setup+0x588>)
 80822a6:	f002 ff57 	bl	8085158 <_ZN8LMP910009configureEhhh>
 80822aa:	b978      	cbnz	r0, 80822cc <setup+0x47c>
    {
          Serial.println("Couldn't communicate with LMP91000 for 2");
 80822ac:	f006 fe0c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80822b0:	494a      	ldr	r1, [pc, #296]	; (80823dc <setup+0x58c>)
 80822b2:	f006 f8b6 	bl	8088422 <_ZN5Print7printlnEPKc>
          writeLogFile("Couldn't communicate with LMP91000 for 2");
 80822b6:	4949      	ldr	r1, [pc, #292]	; (80823dc <setup+0x58c>)
 80822b8:	a823      	add	r0, sp, #140	; 0x8c
 80822ba:	f005 ff14 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 80822be:	a823      	add	r0, sp, #140	; 0x8c
 80822c0:	f7ff f9e6 	bl	8081690 <_Z12writeLogFile6String>
 80822c4:	a823      	add	r0, sp, #140	; 0x8c
 80822c6:	f005 fec7 	bl	8088058 <_ZN6StringD1Ev>
 80822ca:	e014      	b.n	80822f6 <setup+0x4a6>
    }else{
          Serial.println("Initialized LMP91000 for CO 2");
 80822cc:	f006 fdfc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80822d0:	4943      	ldr	r1, [pc, #268]	; (80823e0 <setup+0x590>)
 80822d2:	f006 f8a6 	bl	8088422 <_ZN5Print7printlnEPKc>
          if(debugging_enabled)
 80822d6:	6823      	ldr	r3, [r4, #0]
 80822d8:	b14b      	cbz	r3, 80822ee <setup+0x49e>
            writeLogFile("Initialized LMP91000 for CO 2");
 80822da:	4941      	ldr	r1, [pc, #260]	; (80823e0 <setup+0x590>)
 80822dc:	a823      	add	r0, sp, #140	; 0x8c
 80822de:	f005 ff02 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 80822e2:	a823      	add	r0, sp, #140	; 0x8c
 80822e4:	f7ff f9d4 	bl	8081690 <_Z12writeLogFile6String>
 80822e8:	a823      	add	r0, sp, #140	; 0x8c
 80822ea:	f005 feb5 	bl	8088058 <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_2_en, HIGH);  //disable
 80822ee:	2101      	movs	r1, #1
 80822f0:	8828      	ldrh	r0, [r5, #0]
 80822f2:	f007 f874 	bl	80893de <digitalWrite>
    }
    ads2.begin();
 80822f6:	483b      	ldr	r0, [pc, #236]	; (80823e4 <setup+0x594>)
 80822f8:	f003 f82a 	bl	8085350 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x4A,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 80822fc:	f007 f90c 	bl	8089518 <_Z19__fetch_global_Wirev>
 8082300:	2201      	movs	r2, #1
 8082302:	214a      	movs	r1, #74	; 0x4a
 8082304:	f006 ffa4 	bl	8089250 <_ZN7TwoWire11requestFromEii>
 8082308:	b988      	cbnz	r0, 808232e <setup+0x4de>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 808230a:	f006 fddd 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808230e:	492f      	ldr	r1, [pc, #188]	; (80823cc <setup+0x57c>)
 8082310:	f006 f887 	bl	8088422 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082314:	6823      	ldr	r3, [r4, #0]
 8082316:	b173      	cbz	r3, 8082336 <setup+0x4e6>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082318:	492c      	ldr	r1, [pc, #176]	; (80823cc <setup+0x57c>)
 808231a:	a823      	add	r0, sp, #140	; 0x8c
 808231c:	f005 fee3 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8082320:	a823      	add	r0, sp, #140	; 0x8c
 8082322:	f7ff f9b5 	bl	8081690 <_Z12writeLogFile6String>
 8082326:	a823      	add	r0, sp, #140	; 0x8c
 8082328:	f005 fe96 	bl	8088058 <_ZN6StringD1Ev>
 808232c:	e003      	b.n	8082336 <setup+0x4e6>
    }
    else{
      ads2.setGain(GAIN_TWOTHIRDS);
 808232e:	2100      	movs	r1, #0
 8082330:	482c      	ldr	r0, [pc, #176]	; (80823e4 <setup+0x594>)
 8082332:	f003 f814 	bl	808535e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }
    //#endif
    
    resetESP();
 8082336:	f7ff fd53 	bl	8081de0 <_Z8resetESPv>

    Serial.println("ESP reset!");
 808233a:	f006 fdc5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808233e:	492a      	ldr	r1, [pc, #168]	; (80823e8 <setup+0x598>)
 8082340:	f006 f86f 	bl	8088422 <_ZN5Print7printlnEPKc>

    Serial.print("FW Version: ");
 8082344:	f006 fdc0 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082348:	4928      	ldr	r1, [pc, #160]	; (80823ec <setup+0x59c>)
 808234a:	f006 f857 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 808234e:	f006 fdbb 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082352:	220a      	movs	r2, #10
 8082354:	2146      	movs	r1, #70	; 0x46
 8082356:	f006 f8d2 	bl	80884fe <_ZN5Print7printlnEii>
    Serial.print("Build: ");
 808235a:	f006 fdb5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808235e:	4924      	ldr	r1, [pc, #144]	; (80823f0 <setup+0x5a0>)
 8082360:	f006 f84c 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 8082364:	f006 fdb0 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082368:	220a      	movs	r2, #10
 808236a:	210d      	movs	r1, #13
 808236c:	f006 f8c7 	bl	80884fe <_ZN5Print7printlnEii>



    enableContinuousGPS();
 8082370:	f7fe ff98 	bl	80812a4 <_Z19enableContinuousGPSv>
#define SYSTEM_VERSION_140RC1
#define SYSTEM_VERSION_140
#define SYSTEM_VERSION_141RC1
#define SYSTEM_VERSION_141

typedef struct __attribute__((packed)) SystemVersionInfo
 8082374:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8082376:	2100      	movs	r1, #0
 8082378:	a823      	add	r0, sp, #140	; 0x8c
 808237a:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
 808237e:	f005 fa6d 	bl	808785c <system_version_info>
        return String(info.versionString);
 8082382:	a925      	add	r1, sp, #148	; 0x94
 8082384:	a81f      	add	r0, sp, #124	; 0x7c
 8082386:	f005 feae 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
    
    Log.info("System version: %s", (const char*)System.version());
 808238a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 808238c:	4919      	ldr	r1, [pc, #100]	; (80823f4 <setup+0x5a4>)
 808238e:	481a      	ldr	r0, [pc, #104]	; (80823f8 <setup+0x5a8>)
 8082390:	f7fe fb54 	bl	8080a3c <_ZNK5spark6Logger4infoEPKcz>
 8082394:	a81f      	add	r0, sp, #124	; 0x7c
 8082396:	f005 fe5f 	bl	8088058 <_ZN6StringD1Ev>
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 808239a:	a803      	add	r0, sp, #12
 808239c:	f005 fe5c 	bl	8088058 <_ZN6StringD1Ev>
    enableContinuousGPS();
    
    Log.info("System version: %s", (const char*)System.version());
    

}
 80823a0:	b02a      	add	sp, #168	; 0xa8
 80823a2:	bd70      	pop	{r4, r5, r6, pc}
    //check power
    powerCheck.loop();

    
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
        goToSleepBattery();
 80823a4:	f7ff fcc0 	bl	8081d28 <_Z16goToSleepBatteryv>
 80823a8:	e5bc      	b.n	8081f24 <setup+0xd4>
 80823aa:	bf00      	nop
 80823ac:	0808e2e8 	.word	0x0808e2e8
 80823b0:	20000ac4 	.word	0x20000ac4
 80823b4:	0808e2fe 	.word	0x0808e2fe
 80823b8:	200001e8 	.word	0x200001e8
 80823bc:	0808e322 	.word	0x0808e322
 80823c0:	0808e34e 	.word	0x0808e34e
 80823c4:	0808e36c 	.word	0x0808e36c
 80823c8:	20000a08 	.word	0x20000a08
 80823cc:	0808e388 	.word	0x0808e388
 80823d0:	0808e3bb 	.word	0x0808e3bb
 80823d4:	200000d0 	.word	0x200000d0
 80823d8:	200001e9 	.word	0x200001e9
 80823dc:	0808e3de 	.word	0x0808e3de
 80823e0:	0808e407 	.word	0x0808e407
 80823e4:	20000a0e 	.word	0x20000a0e
 80823e8:	0808e425 	.word	0x0808e425
 80823ec:	0808e430 	.word	0x0808e430
 80823f0:	0808e43d 	.word	0x0808e43d
 80823f4:	0808e445 	.word	0x0808e445
 80823f8:	20000b84 	.word	0x20000b84

080823fc <_Z12outputCOtoPIv>:
  Serial.println("Exiting serial menu...");

}

void outputCOtoPI(void)
{
 80823fc:	b500      	push	{lr}
 80823fe:	b08f      	sub	sp, #60	; 0x3c
    String CO_string = "*";
 8082400:	4980      	ldr	r1, [pc, #512]	; (8082604 <_Z12outputCOtoPIv+0x208>)
 8082402:	a802      	add	r0, sp, #8
 8082404:	f005 fe6f 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
    Serial.println("Outputting CO to PI.");
 8082408:	f006 fd5e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808240c:	497e      	ldr	r1, [pc, #504]	; (8082608 <_Z12outputCOtoPIv+0x20c>)
 808240e:	f006 f808 	bl	8088422 <_ZN5Print7printlnEPKc>
    

    CO_string += String(measurement_number, 0) + ",";
 8082412:	2300      	movs	r3, #0
 8082414:	9300      	str	r3, [sp, #0]
 8082416:	4b7d      	ldr	r3, [pc, #500]	; (808260c <_Z12outputCOtoPIv+0x210>)
 8082418:	a806      	add	r0, sp, #24
 808241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808241e:	f005 feef 	bl	8088200 <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082422:	a906      	add	r1, sp, #24
 8082424:	a80a      	add	r0, sp, #40	; 0x28
 8082426:	f005 fe9d 	bl	8088164 <_ZN6StringC1ERKS_>
 808242a:	4979      	ldr	r1, [pc, #484]	; (8082610 <_Z12outputCOtoPIv+0x214>)
 808242c:	a80a      	add	r0, sp, #40	; 0x28
 808242e:	f005 ff40 	bl	80882b2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082432:	4601      	mov	r1, r0
 8082434:	a802      	add	r0, sp, #8
 8082436:	f005 ff10 	bl	808825a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808243a:	a80a      	add	r0, sp, #40	; 0x28
 808243c:	f005 fe0c 	bl	8088058 <_ZN6StringD1Ev>
 8082440:	a806      	add	r0, sp, #24
 8082442:	f005 fe09 	bl	8088058 <_ZN6StringD1Ev>
    CO_string += String(CO_float_A, 3) + ",";
 8082446:	4b73      	ldr	r3, [pc, #460]	; (8082614 <_Z12outputCOtoPIv+0x218>)
 8082448:	2203      	movs	r2, #3
 808244a:	6819      	ldr	r1, [r3, #0]
 808244c:	a806      	add	r0, sp, #24
 808244e:	f005 fec0 	bl	80881d2 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082452:	a906      	add	r1, sp, #24
 8082454:	a80a      	add	r0, sp, #40	; 0x28
 8082456:	f005 fe85 	bl	8088164 <_ZN6StringC1ERKS_>
 808245a:	496d      	ldr	r1, [pc, #436]	; (8082610 <_Z12outputCOtoPIv+0x214>)
 808245c:	a80a      	add	r0, sp, #40	; 0x28
 808245e:	f005 ff28 	bl	80882b2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082462:	4601      	mov	r1, r0
 8082464:	a802      	add	r0, sp, #8
 8082466:	f005 fef8 	bl	808825a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808246a:	a80a      	add	r0, sp, #40	; 0x28
 808246c:	f005 fdf4 	bl	8088058 <_ZN6StringD1Ev>
 8082470:	a806      	add	r0, sp, #24
 8082472:	f005 fdf1 	bl	8088058 <_ZN6StringD1Ev>
    CO_string += String(CO_float_B, 3) + ",";
 8082476:	4b68      	ldr	r3, [pc, #416]	; (8082618 <_Z12outputCOtoPIv+0x21c>)
 8082478:	2203      	movs	r2, #3
 808247a:	6819      	ldr	r1, [r3, #0]
 808247c:	a806      	add	r0, sp, #24
 808247e:	f005 fea8 	bl	80881d2 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082482:	a906      	add	r1, sp, #24
 8082484:	a80a      	add	r0, sp, #40	; 0x28
 8082486:	f005 fe6d 	bl	8088164 <_ZN6StringC1ERKS_>
 808248a:	4961      	ldr	r1, [pc, #388]	; (8082610 <_Z12outputCOtoPIv+0x214>)
 808248c:	a80a      	add	r0, sp, #40	; 0x28
 808248e:	f005 ff10 	bl	80882b2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082492:	4601      	mov	r1, r0
 8082494:	a802      	add	r0, sp, #8
 8082496:	f005 fee0 	bl	808825a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808249a:	a80a      	add	r0, sp, #40	; 0x28
 808249c:	f005 fddc 	bl	8088058 <_ZN6StringD1Ev>
 80824a0:	a806      	add	r0, sp, #24
 80824a2:	f005 fdd9 	bl	8088058 <_ZN6StringD1Ev>
    if(gps.get_latitude() != 0){
 80824a6:	485d      	ldr	r0, [pc, #372]	; (808261c <_Z12outputCOtoPIv+0x220>)
 80824a8:	f003 f826 	bl	80854f8 <_ZN3GPS12get_latitudeEv>
 80824ac:	2200      	movs	r2, #0
 80824ae:	2300      	movs	r3, #0
 80824b0:	f007 fde2 	bl	808a078 <__aeabi_dcmpeq>
 80824b4:	b990      	cbnz	r0, 80824dc <_Z12outputCOtoPIv+0xe0>
        if(gps.get_nsIndicator() == 0){
 80824b6:	4859      	ldr	r0, [pc, #356]	; (808261c <_Z12outputCOtoPIv+0x220>)
 80824b8:	f003 f82d 	bl	8085516 <_ZN3GPS15get_nsIndicatorEv>
 80824bc:	b918      	cbnz	r0, 80824c6 <_Z12outputCOtoPIv+0xca>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80824be:	4958      	ldr	r1, [pc, #352]	; (8082620 <_Z12outputCOtoPIv+0x224>)
 80824c0:	a802      	add	r0, sp, #8
 80824c2:	f005 fece 	bl	8088262 <_ZN6String6concatEPKc>
            CO_string += "-";
        }
        CO_string += String(gps.get_latitude()) + ",";
 80824c6:	4855      	ldr	r0, [pc, #340]	; (808261c <_Z12outputCOtoPIv+0x220>)
 80824c8:	f003 f816 	bl	80854f8 <_ZN3GPS12get_latitudeEv>
 80824cc:	2306      	movs	r3, #6
 80824ce:	9300      	str	r3, [sp, #0]
 80824d0:	4602      	mov	r2, r0
 80824d2:	460b      	mov	r3, r1
 80824d4:	a806      	add	r0, sp, #24
 80824d6:	f005 fe93 	bl	8088200 <_ZN6StringC1Edi>
 80824da:	e003      	b.n	80824e4 <_Z12outputCOtoPIv+0xe8>
        
    }else{
        CO_string += String(geolocation_latitude)+ ",";
 80824dc:	4951      	ldr	r1, [pc, #324]	; (8082624 <_Z12outputCOtoPIv+0x228>)
 80824de:	a806      	add	r0, sp, #24
 80824e0:	f005 fe01 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80824e4:	a906      	add	r1, sp, #24
 80824e6:	a80a      	add	r0, sp, #40	; 0x28
 80824e8:	f005 fe3c 	bl	8088164 <_ZN6StringC1ERKS_>
 80824ec:	4948      	ldr	r1, [pc, #288]	; (8082610 <_Z12outputCOtoPIv+0x214>)
 80824ee:	a80a      	add	r0, sp, #40	; 0x28
 80824f0:	f005 fedf 	bl	80882b2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80824f4:	4601      	mov	r1, r0
 80824f6:	a802      	add	r0, sp, #8
 80824f8:	f005 feaf 	bl	808825a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80824fc:	a80a      	add	r0, sp, #40	; 0x28
 80824fe:	f005 fdab 	bl	8088058 <_ZN6StringD1Ev>
 8082502:	a806      	add	r0, sp, #24
 8082504:	f005 fda8 	bl	8088058 <_ZN6StringD1Ev>
    }

    if(gps.get_longitude() != 0){
 8082508:	4844      	ldr	r0, [pc, #272]	; (808261c <_Z12outputCOtoPIv+0x220>)
 808250a:	f002 fffa 	bl	8085502 <_ZN3GPS13get_longitudeEv>
 808250e:	2200      	movs	r2, #0
 8082510:	2300      	movs	r3, #0
 8082512:	f007 fdb1 	bl	808a078 <__aeabi_dcmpeq>
 8082516:	b998      	cbnz	r0, 8082540 <_Z12outputCOtoPIv+0x144>
        if(gps.get_ewIndicator() == 0x01){
 8082518:	4840      	ldr	r0, [pc, #256]	; (808261c <_Z12outputCOtoPIv+0x220>)
 808251a:	f002 ffff 	bl	808551c <_ZN3GPS15get_ewIndicatorEv>
 808251e:	2801      	cmp	r0, #1
 8082520:	d103      	bne.n	808252a <_Z12outputCOtoPIv+0x12e>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8082522:	493f      	ldr	r1, [pc, #252]	; (8082620 <_Z12outputCOtoPIv+0x224>)
 8082524:	a802      	add	r0, sp, #8
 8082526:	f005 fe9c 	bl	8088262 <_ZN6String6concatEPKc>
            CO_string += "-";
        }
        CO_string += String(gps.get_longitude()) + ",";
 808252a:	483c      	ldr	r0, [pc, #240]	; (808261c <_Z12outputCOtoPIv+0x220>)
 808252c:	f002 ffe9 	bl	8085502 <_ZN3GPS13get_longitudeEv>
 8082530:	2306      	movs	r3, #6
 8082532:	9300      	str	r3, [sp, #0]
 8082534:	4602      	mov	r2, r0
 8082536:	460b      	mov	r3, r1
 8082538:	a806      	add	r0, sp, #24
 808253a:	f005 fe61 	bl	8088200 <_ZN6StringC1Edi>
 808253e:	e003      	b.n	8082548 <_Z12outputCOtoPIv+0x14c>
    }else{
        CO_string += String(geolocation_longitude) + ",";
 8082540:	4939      	ldr	r1, [pc, #228]	; (8082628 <_Z12outputCOtoPIv+0x22c>)
 8082542:	a806      	add	r0, sp, #24
 8082544:	f005 fdcf 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082548:	a906      	add	r1, sp, #24
 808254a:	a80a      	add	r0, sp, #40	; 0x28
 808254c:	f005 fe0a 	bl	8088164 <_ZN6StringC1ERKS_>
 8082550:	492f      	ldr	r1, [pc, #188]	; (8082610 <_Z12outputCOtoPIv+0x214>)
 8082552:	a80a      	add	r0, sp, #40	; 0x28
 8082554:	f005 fead 	bl	80882b2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082558:	4601      	mov	r1, r0
 808255a:	a802      	add	r0, sp, #8
 808255c:	f005 fe7d 	bl	808825a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082560:	a80a      	add	r0, sp, #40	; 0x28
 8082562:	f005 fd79 	bl	8088058 <_ZN6StringD1Ev>
 8082566:	a806      	add	r0, sp, #24
 8082568:	f005 fd76 	bl	8088058 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0) {
 808256c:	482b      	ldr	r0, [pc, #172]	; (808261c <_Z12outputCOtoPIv+0x220>)
 808256e:	f002 ffc8 	bl	8085502 <_ZN3GPS13get_longitudeEv>
 8082572:	2200      	movs	r2, #0
 8082574:	2300      	movs	r3, #0
 8082576:	f007 fd7f 	bl	808a078 <__aeabi_dcmpeq>
 808257a:	b980      	cbnz	r0, 808259e <_Z12outputCOtoPIv+0x1a2>
        CO_string += String(gps.get_horizontalDillution() / 10.0) + ",";
 808257c:	4827      	ldr	r0, [pc, #156]	; (808261c <_Z12outputCOtoPIv+0x220>)
 808257e:	f002 ffc5 	bl	808550c <_ZN3GPS23get_horizontalDillutionEv>
 8082582:	f007 faab 	bl	8089adc <__aeabi_i2d>
 8082586:	2200      	movs	r2, #0
 8082588:	4b28      	ldr	r3, [pc, #160]	; (808262c <_Z12outputCOtoPIv+0x230>)
 808258a:	f007 fc37 	bl	8089dfc <__aeabi_ddiv>
 808258e:	2306      	movs	r3, #6
 8082590:	9300      	str	r3, [sp, #0]
 8082592:	4602      	mov	r2, r0
 8082594:	460b      	mov	r3, r1
 8082596:	a806      	add	r0, sp, #24
 8082598:	f005 fe32 	bl	8088200 <_ZN6StringC1Edi>
 808259c:	e003      	b.n	80825a6 <_Z12outputCOtoPIv+0x1aa>
    } else {
        CO_string += String(geolocation_accuracy) + ",";
 808259e:	4924      	ldr	r1, [pc, #144]	; (8082630 <_Z12outputCOtoPIv+0x234>)
 80825a0:	a806      	add	r0, sp, #24
 80825a2:	f005 fda0 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80825a6:	a906      	add	r1, sp, #24
 80825a8:	a80a      	add	r0, sp, #40	; 0x28
 80825aa:	f005 fddb 	bl	8088164 <_ZN6StringC1ERKS_>
 80825ae:	4918      	ldr	r1, [pc, #96]	; (8082610 <_Z12outputCOtoPIv+0x214>)
 80825b0:	a80a      	add	r0, sp, #40	; 0x28
 80825b2:	f005 fe7e 	bl	80882b2 <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80825b6:	4601      	mov	r1, r0
 80825b8:	a802      	add	r0, sp, #8
 80825ba:	f005 fe4e 	bl	808825a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80825be:	a80a      	add	r0, sp, #40	; 0x28
 80825c0:	f005 fd4a 	bl	8088058 <_ZN6StringD1Ev>
 80825c4:	a806      	add	r0, sp, #24
 80825c6:	f005 fd47 	bl	8088058 <_ZN6StringD1Ev>
    }

    CO_string += String(Time.format(systemTime, "%d/%m/%y,%H:%M:%S"));
 80825ca:	4a1a      	ldr	r2, [pc, #104]	; (8082634 <_Z12outputCOtoPIv+0x238>)
 80825cc:	4b1a      	ldr	r3, [pc, #104]	; (8082638 <_Z12outputCOtoPIv+0x23c>)
 80825ce:	6812      	ldr	r2, [r2, #0]
 80825d0:	a80a      	add	r0, sp, #40	; 0x28
 80825d2:	491a      	ldr	r1, [pc, #104]	; (808263c <_Z12outputCOtoPIv+0x240>)
 80825d4:	f006 f9bc 	bl	8088950 <_ZN9TimeClass6formatElPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80825d8:	a90a      	add	r1, sp, #40	; 0x28
 80825da:	a802      	add	r0, sp, #8
 80825dc:	f005 fe3d 	bl	808825a <_ZN6String6concatERKS_>
 80825e0:	a80a      	add	r0, sp, #40	; 0x28
 80825e2:	f005 fd39 	bl	8088058 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80825e6:	4916      	ldr	r1, [pc, #88]	; (8082640 <_Z12outputCOtoPIv+0x244>)
 80825e8:	a802      	add	r0, sp, #8
 80825ea:	f005 fe3a 	bl	8088262 <_ZN6String6concatEPKc>
    //get a current time string
    
    CO_string += "\n\r&";
    Serial1.print(CO_string);
 80825ee:	f006 fdb9 	bl	8089164 <_Z22__fetch_global_Serial1v>
 80825f2:	9902      	ldr	r1, [sp, #8]
 80825f4:	f005 ff02 	bl	80883fc <_ZN5Print5printEPKc>

}

void outputCOtoPI(void)
{
    String CO_string = "*";
 80825f8:	a802      	add	r0, sp, #8
 80825fa:	f005 fd2d 	bl	8088058 <_ZN6StringD1Ev>
    
    CO_string += "\n\r&";
    Serial1.print(CO_string);
    //send ending delimeter
    //Serial1.print("&");
}
 80825fe:	b00f      	add	sp, #60	; 0x3c
 8082600:	f85d fb04 	ldr.w	pc, [sp], #4
 8082604:	0808e458 	.word	0x0808e458
 8082608:	0808e45a 	.word	0x0808e45a
 808260c:	20000ad0 	.word	0x20000ad0
 8082610:	08090156 	.word	0x08090156
 8082614:	2000076c 	.word	0x2000076c
 8082618:	20000770 	.word	0x20000770
 808261c:	200008b0 	.word	0x200008b0
 8082620:	0808e0de 	.word	0x0808e0de
 8082624:	200000ac 	.word	0x200000ac
 8082628:	200000b8 	.word	0x200000b8
 808262c:	40240000 	.word	0x40240000
 8082630:	20000080 	.word	0x20000080
 8082634:	20000ab8 	.word	0x20000ab8
 8082638:	0808e0e0 	.word	0x0808e0e0
 808263c:	20000bac 	.word	0x20000bac
 8082640:	0808e46f 	.word	0x0808e46f

08082644 <_Z24serialGetWifiCredentialsv>:
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
    chargeCurrent = pmic.getChargeCurrent();
    Serial.printf("new charge current of %d mA\n\r", total_current);
}

void serialGetWifiCredentials(void){
 8082644:	b530      	push	{r4, r5, lr}
 8082646:	4d5b      	ldr	r5, [pc, #364]	; (80827b4 <_Z24serialGetWifiCredentialsv+0x170>)
 8082648:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 808264a:	f006 fc3d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808264e:	495a      	ldr	r1, [pc, #360]	; (80827b8 <_Z24serialGetWifiCredentialsv+0x174>)
 8082650:	f005 fed4 	bl	80883fc <_ZN5Print5printEPKc>
 8082654:	4c59      	ldr	r4, [pc, #356]	; (80827bc <_Z24serialGetWifiCredentialsv+0x178>)
    Serial.println(ssid);
 8082656:	f006 fc37 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808265a:	6829      	ldr	r1, [r5, #0]
 808265c:	f005 fee1 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082660:	f006 fc32 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082664:	4956      	ldr	r1, [pc, #344]	; (80827c0 <_Z24serialGetWifiCredentialsv+0x17c>)
 8082666:	f005 fec9 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.println(password);
 808266a:	f006 fc2d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808266e:	6821      	ldr	r1, [r4, #0]
 8082670:	f005 fed7 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 8082674:	f006 fc28 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082678:	4952      	ldr	r1, [pc, #328]	; (80827c4 <_Z24serialGetWifiCredentialsv+0x180>)
 808267a:	f005 fed2 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808267e:	f006 fc23 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082682:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082686:	f006 f850 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808268a:	f006 fc1d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808268e:	220d      	movs	r2, #13
 8082690:	4601      	mov	r1, r0
 8082692:	4668      	mov	r0, sp
 8082694:	f006 f84c 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    if(tempString.equals("bould")){
 8082698:	494b      	ldr	r1, [pc, #300]	; (80827c8 <_Z24serialGetWifiCredentialsv+0x184>)
 808269a:	4668      	mov	r0, sp
 808269c:	f005 fe1b 	bl	80882d6 <_ZNK6String6equalsEPKc>
 80826a0:	2800      	cmp	r0, #0
 80826a2:	f000 8081 	beq.w	80827a8 <_Z24serialGetWifiCredentialsv+0x164>
        Serial.println("Password correct!");
 80826a6:	f006 fc0f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80826aa:	4948      	ldr	r1, [pc, #288]	; (80827cc <_Z24serialGetWifiCredentialsv+0x188>)
 80826ac:	f005 feb9 	bl	8088422 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 80826b0:	f006 fc0a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80826b4:	4946      	ldr	r1, [pc, #280]	; (80827d0 <_Z24serialGetWifiCredentialsv+0x18c>)
 80826b6:	f005 feb4 	bl	8088422 <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 80826ba:	f006 fc05 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80826be:	f24c 3150 	movw	r1, #50000	; 0xc350
 80826c2:	f006 f832 	bl	808872a <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 80826c6:	f006 fbff 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80826ca:	220d      	movs	r2, #13
 80826cc:	4601      	mov	r1, r0
 80826ce:	a804      	add	r0, sp, #16
 80826d0:	f006 f82e 	bl	8088730 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 80826d4:	f006 fbf8 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80826d8:	493e      	ldr	r1, [pc, #248]	; (80827d4 <_Z24serialGetWifiCredentialsv+0x190>)
 80826da:	f005 fe8f 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 80826de:	f006 fbf3 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80826e2:	9904      	ldr	r1, [sp, #16]
 80826e4:	f005 fe9d 	bl	8088422 <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 80826e8:	f006 fbee 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80826ec:	493a      	ldr	r1, [pc, #232]	; (80827d8 <_Z24serialGetWifiCredentialsv+0x194>)
 80826ee:	f005 fe98 	bl	8088422 <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 80826f2:	f006 fbe9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80826f6:	220d      	movs	r2, #13
 80826f8:	4601      	mov	r1, r0
 80826fa:	a808      	add	r0, sp, #32
 80826fc:	f006 f818 	bl	8088730 <_ZN6Stream15readStringUntilEc>
        if(ok.equals("y")){
 8082700:	4936      	ldr	r1, [pc, #216]	; (80827dc <_Z24serialGetWifiCredentialsv+0x198>)
 8082702:	a808      	add	r0, sp, #32
 8082704:	f005 fde7 	bl	80882d6 <_ZNK6String6equalsEPKc>
 8082708:	2800      	cmp	r0, #0
 808270a:	d042      	beq.n	8082792 <_Z24serialGetWifiCredentialsv+0x14e>
            Serial.println("Saving new ssid");
 808270c:	f006 fbdc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082710:	4933      	ldr	r1, [pc, #204]	; (80827e0 <_Z24serialGetWifiCredentialsv+0x19c>)
 8082712:	f005 fe86 	bl	8088422 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082716:	a904      	add	r1, sp, #16
 8082718:	4628      	mov	r0, r5
 808271a:	f005 fd14 	bl	8088146 <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 808271e:	f006 fbd3 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082722:	4930      	ldr	r1, [pc, #192]	; (80827e4 <_Z24serialGetWifiCredentialsv+0x1a0>)
 8082724:	f005 fe7d 	bl	8088422 <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082728:	f006 fbce 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808272c:	220d      	movs	r2, #13
 808272e:	4601      	mov	r1, r0
 8082730:	a80c      	add	r0, sp, #48	; 0x30
 8082732:	f005 fffd 	bl	8088730 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 8082736:	f006 fbc7 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808273a:	492b      	ldr	r1, [pc, #172]	; (80827e8 <_Z24serialGetWifiCredentialsv+0x1a4>)
 808273c:	f005 fe5e 	bl	80883fc <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 8082740:	f006 fbc2 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082744:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082746:	f005 fe6c 	bl	8088422 <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 808274a:	f006 fbbd 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808274e:	220d      	movs	r2, #13
 8082750:	4601      	mov	r1, r0
 8082752:	a810      	add	r0, sp, #64	; 0x40
 8082754:	f005 ffec 	bl	8088730 <_ZN6Stream15readStringUntilEc>
            if(ok.equals("y")){
 8082758:	4920      	ldr	r1, [pc, #128]	; (80827dc <_Z24serialGetWifiCredentialsv+0x198>)
 808275a:	a810      	add	r0, sp, #64	; 0x40
 808275c:	f005 fdbb 	bl	80882d6 <_ZNK6String6equalsEPKc>
 8082760:	b158      	cbz	r0, 808277a <_Z24serialGetWifiCredentialsv+0x136>
                Serial.println("Saving new password");
 8082762:	f006 fbb1 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082766:	4921      	ldr	r1, [pc, #132]	; (80827ec <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082768:	f005 fe5b 	bl	8088422 <_ZN5Print7printlnEPKc>
                password = tempPassword;
 808276c:	a90c      	add	r1, sp, #48	; 0x30
 808276e:	4620      	mov	r0, r4
 8082770:	f005 fce9 	bl	8088146 <_ZN6StringaSERKS_>
                sendWifiInfo();
 8082774:	f7ff fa3e 	bl	8081bf4 <_Z12sendWifiInfov>
 8082778:	e004      	b.n	8082784 <_Z24serialGetWifiCredentialsv+0x140>
            }else{
                Serial.println("okay, no problem\n\r");
 808277a:	f006 fba5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808277e:	491c      	ldr	r1, [pc, #112]	; (80827f0 <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082780:	f005 fe4f 	bl	8088422 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
            Serial.print("Your new password will be: ");
            Serial.println(tempPassword);
            String ok = Serial.readStringUntil('\r');
 8082784:	a810      	add	r0, sp, #64	; 0x40
 8082786:	f005 fc67 	bl	8088058 <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
        if(ok.equals("y")){
            Serial.println("Saving new ssid");
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
 808278a:	a80c      	add	r0, sp, #48	; 0x30
 808278c:	f005 fc64 	bl	8088058 <_ZN6StringD1Ev>
 8082790:	e004      	b.n	808279c <_Z24serialGetWifiCredentialsv+0x158>
                sendWifiInfo();
            }else{
                Serial.println("okay, no problem\n\r");
            }
        }else{
            Serial.println("okay, no problem\n\r");
 8082792:	f006 fb99 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082796:	4916      	ldr	r1, [pc, #88]	; (80827f0 <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082798:	f005 fe43 	bl	8088422 <_ZN5Print7printlnEPKc>
            return;
 808279c:	a808      	add	r0, sp, #32
 808279e:	f005 fc5b 	bl	8088058 <_ZN6StringD1Ev>
 80827a2:	a804      	add	r0, sp, #16
 80827a4:	f005 fc58 	bl	8088058 <_ZN6StringD1Ev>
    Serial.println(ssid);
    Serial.print("Current stored password: ");
    Serial.println(password);
    Serial.println("Please enter password in order to make changes.\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80827a8:	4668      	mov	r0, sp
 80827aa:	f005 fc55 	bl	8088058 <_ZN6StringD1Ev>
        }else{
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 80827ae:	b015      	add	sp, #84	; 0x54
 80827b0:	bd30      	pop	{r4, r5, pc}
 80827b2:	bf00      	nop
 80827b4:	20000208 	.word	0x20000208
 80827b8:	0808e4b8 	.word	0x0808e4b8
 80827bc:	200001d4 	.word	0x200001d4
 80827c0:	0808e4ce 	.word	0x0808e4ce
 80827c4:	0808e4e8 	.word	0x0808e4e8
 80827c8:	0808e51a 	.word	0x0808e51a
 80827cc:	0808e520 	.word	0x0808e520
 80827d0:	0808e532 	.word	0x0808e532
 80827d4:	0808e542 	.word	0x0808e542
 80827d8:	0808e55a 	.word	0x0808e55a
 80827dc:	08090b9e 	.word	0x08090b9e
 80827e0:	0808e570 	.word	0x0808e570
 80827e4:	0808e580 	.word	0x0808e580
 80827e8:	0808e593 	.word	0x0808e593
 80827ec:	0808e5af 	.word	0x0808e5af
 80827f0:	0808e5c3 	.word	0x0808e5c3

080827f4 <_Z26serialSetSensibleIotEnablev>:
void serialSetSensibleIotEnable(void){
 80827f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 80827f6:	f006 fb67 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80827fa:	4919      	ldr	r1, [pc, #100]	; (8082860 <_Z26serialSetSensibleIotEnablev+0x6c>)
 80827fc:	f005 fe11 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082800:	f006 fb62 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082804:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082808:	f005 ff8f 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808280c:	f006 fb5c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082810:	220d      	movs	r2, #13
 8082812:	4601      	mov	r1, r0
 8082814:	4668      	mov	r0, sp
 8082816:	f005 ff8b 	bl	8088730 <_ZN6Stream15readStringUntilEc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808281a:	4912      	ldr	r1, [pc, #72]	; (8082864 <_Z26serialSetSensibleIotEnablev+0x70>)
 808281c:	4668      	mov	r0, sp
 808281e:	f005 fd5a 	bl	80882d6 <_ZNK6String6equalsEPKc>
    if(tempString == "imsensible"){
 8082822:	b198      	cbz	r0, 808284c <_Z26serialSetSensibleIotEnablev+0x58>
        Serial.println("Password correct!");
 8082824:	f006 fb50 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082828:	490f      	ldr	r1, [pc, #60]	; (8082868 <_Z26serialSetSensibleIotEnablev+0x74>)
 808282a:	f005 fdfa 	bl	8088422 <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
        sensible_iot_en = 1;
 808282e:	4c0f      	ldr	r4, [pc, #60]	; (808286c <_Z26serialSetSensibleIotEnablev+0x78>)
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    if(tempString == "imsensible"){
        Serial.println("Password correct!");
        Serial.println("Enabling sensible iot data push.");
 8082830:	f006 fb4a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082834:	490e      	ldr	r1, [pc, #56]	; (8082870 <_Z26serialSetSensibleIotEnablev+0x7c>)
 8082836:	f005 fdf4 	bl	8088422 <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 808283a:	2301      	movs	r3, #1
 808283c:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 808283e:	f006 fe3f 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8082842:	4621      	mov	r1, r4
 8082844:	208c      	movs	r0, #140	; 0x8c
 8082846:	f7fe f8ba 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 808284a:	e004      	b.n	8082856 <_Z26serialSetSensibleIotEnablev+0x62>
    }else{
        Serial.println("\n\rIncorrect password!");
 808284c:	f006 fb3c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082850:	4908      	ldr	r1, [pc, #32]	; (8082874 <_Z26serialSetSensibleIotEnablev+0x80>)
 8082852:	f005 fde6 	bl	8088422 <_ZN5Print7printlnEPKc>
    }
}
void serialSetSensibleIotEnable(void){
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082856:	4668      	mov	r0, sp
 8082858:	f005 fbfe 	bl	8088058 <_ZN6StringD1Ev>
        sensible_iot_en = 1;
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 808285c:	b004      	add	sp, #16
 808285e:	bd10      	pop	{r4, pc}
 8082860:	0808e5d6 	.word	0x0808e5d6
 8082864:	0808e619 	.word	0x0808e619
 8082868:	0808e520 	.word	0x0808e520
 808286c:	20000810 	.word	0x20000810
 8082870:	0808e624 	.word	0x0808e624
 8082874:	0808e645 	.word	0x0808e645

08082878 <_Z17serialGetDeviceIdv>:

void serialGetDeviceId(void){
 8082878:	b530      	push	{r4, r5, lr}
 808287a:	b089      	sub	sp, #36	; 0x24

    Serial.println();
 808287c:	f006 fb24 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
 8082880:	4c35      	ldr	r4, [pc, #212]	; (8082958 <_Z17serialGetDeviceIdv+0xe0>)
    }
}

void serialGetDeviceId(void){

    Serial.println();
 8082882:	f005 fdc2 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8082886:	f006 fb1f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808288a:	4934      	ldr	r1, [pc, #208]	; (808295c <_Z17serialGetDeviceIdv+0xe4>)
 808288c:	f005 fdb6 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 8082890:	f006 fb1a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082894:	220a      	movs	r2, #10
 8082896:	6821      	ldr	r1, [r4, #0]
 8082898:	f005 fe31 	bl	80884fe <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the ID");
 808289c:	f006 fb14 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80828a0:	492f      	ldr	r1, [pc, #188]	; (8082960 <_Z17serialGetDeviceIdv+0xe8>)
 80828a2:	f005 fdbe 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80828a6:	f006 fb0f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80828aa:	f24c 3150 	movw	r1, #50000	; 0xc350
 80828ae:	f005 ff3c 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80828b2:	f006 fb09 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80828b6:	220d      	movs	r2, #13
 80828b8:	4601      	mov	r1, r0
 80828ba:	4668      	mov	r0, sp
 80828bc:	f005 ff38 	bl	8088730 <_ZN6Stream15readStringUntilEc>
 80828c0:	4928      	ldr	r1, [pc, #160]	; (8082964 <_Z17serialGetDeviceIdv+0xec>)
 80828c2:	4668      	mov	r0, sp
 80828c4:	f005 fd07 	bl	80882d6 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 80828c8:	2800      	cmp	r0, #0
 80828ca:	d03a      	beq.n	8082942 <_Z17serialGetDeviceIdv+0xca>
        Serial.println("Password correct!");
 80828cc:	f006 fafc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80828d0:	4925      	ldr	r1, [pc, #148]	; (8082968 <_Z17serialGetDeviceIdv+0xf0>)
 80828d2:	f005 fda6 	bl	8088422 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 80828d6:	f006 faf7 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80828da:	4924      	ldr	r1, [pc, #144]	; (808296c <_Z17serialGetDeviceIdv+0xf4>)
 80828dc:	f005 fda1 	bl	8088422 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 80828e0:	f006 faf2 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80828e4:	220d      	movs	r2, #13
 80828e6:	4601      	mov	r1, r0
 80828e8:	a804      	add	r0, sp, #16
 80828ea:	f005 ff21 	bl	8088730 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 80828ee:	a804      	add	r0, sp, #16
 80828f0:	f005 fd36 	bl	8088360 <_ZNK6String5toIntEv>
 80828f4:	4605      	mov	r5, r0
        Serial.println("");
 80828f6:	f006 fae7 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80828fa:	491d      	ldr	r1, [pc, #116]	; (8082970 <_Z17serialGetDeviceIdv+0xf8>)
 80828fc:	f005 fd91 	bl	8088422 <_ZN5Print7printlnEPKc>
        if(tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER){
 8082900:	f242 730c 	movw	r3, #9996	; 0x270c
 8082904:	1eaa      	subs	r2, r5, #2
 8082906:	429a      	cmp	r2, r3
 8082908:	d812      	bhi.n	8082930 <_Z17serialGetDeviceIdv+0xb8>
            Serial.print("\n\rNew Device ID:");
 808290a:	f006 fadd 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808290e:	4919      	ldr	r1, [pc, #100]	; (8082974 <_Z17serialGetDeviceIdv+0xfc>)
 8082910:	f005 fd74 	bl	80883fc <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8082914:	f006 fad8 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082918:	4629      	mov	r1, r5
 808291a:	220a      	movs	r2, #10
 808291c:	f005 fdef 	bl	80884fe <_ZN5Print7printlnEii>
            DEVICE_id = tempValue;
 8082920:	6025      	str	r5, [r4, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8082922:	f006 fdcd 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8082926:	4621      	mov	r1, r4
 8082928:	2000      	movs	r0, #0
 808292a:	f7fe f848 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 808292e:	e004      	b.n	808293a <_Z17serialGetDeviceIdv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8082930:	f006 faca 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082934:	4910      	ldr	r1, [pc, #64]	; (8082978 <_Z17serialGetDeviceIdv+0x100>)
 8082936:	f005 fd74 	bl	8088422 <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new Device ID:");
        String tempString = Serial.readStringUntil('\r');
 808293a:	a804      	add	r0, sp, #16
 808293c:	f005 fb8c 	bl	8088058 <_ZN6StringD1Ev>
 8082940:	e004      	b.n	808294c <_Z17serialGetDeviceIdv+0xd4>
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8082942:	f006 fac1 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082946:	490d      	ldr	r1, [pc, #52]	; (808297c <_Z17serialGetDeviceIdv+0x104>)
 8082948:	f005 fd6b 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
    Serial.println("Please enter password in order to change the ID");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808294c:	4668      	mov	r0, sp
 808294e:	f005 fb83 	bl	8088058 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082952:	b009      	add	sp, #36	; 0x24
 8082954:	bd30      	pop	{r4, r5, pc}
 8082956:	bf00      	nop
 8082958:	20000088 	.word	0x20000088
 808295c:	0808e65b 	.word	0x0808e65b
 8082960:	0808e66e 	.word	0x0808e66e
 8082964:	0808e51a 	.word	0x0808e51a
 8082968:	0808e520 	.word	0x0808e520
 808296c:	0808e69e 	.word	0x0808e69e
 8082970:	08090584 	.word	0x08090584
 8082974:	0808e6b3 	.word	0x0808e6b3
 8082978:	0808e6c4 	.word	0x0808e6c4
 808297c:	0808e645 	.word	0x0808e645

08082980 <_Z19serialResetSettingsv>:

void serialResetSettings(void){
 8082980:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    Serial.println();
 8082982:	f006 faa1 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082986:	f005 fd40 	bl	808840a <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 808298a:	f006 fa9d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808298e:	4914      	ldr	r1, [pc, #80]	; (80829e0 <_Z19serialResetSettingsv+0x60>)
 8082990:	f005 fd47 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082994:	f006 fa98 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082998:	f24c 3150 	movw	r1, #50000	; 0xc350
 808299c:	f005 fec5 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80829a0:	f006 fa92 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80829a4:	220d      	movs	r2, #13
 80829a6:	4601      	mov	r1, r0
 80829a8:	4668      	mov	r0, sp
 80829aa:	f005 fec1 	bl	8088730 <_ZN6Stream15readStringUntilEc>
 80829ae:	490d      	ldr	r1, [pc, #52]	; (80829e4 <_Z19serialResetSettingsv+0x64>)
 80829b0:	4668      	mov	r0, sp
 80829b2:	f005 fc90 	bl	80882d6 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 80829b6:	b138      	cbz	r0, 80829c8 <_Z19serialResetSettingsv+0x48>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 80829b8:	f006 fa86 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80829bc:	490a      	ldr	r1, [pc, #40]	; (80829e8 <_Z19serialResetSettingsv+0x68>)
 80829be:	f005 fd30 	bl	8088422 <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 80829c2:	f7fe f90d 	bl	8080be0 <_Z20writeDefaultSettingsv>
 80829c6:	e004      	b.n	80829d2 <_Z19serialResetSettingsv+0x52>
    }else{
        Serial.println("\n\rIncorrect password!");
 80829c8:	f006 fa7e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80829cc:	4907      	ldr	r1, [pc, #28]	; (80829ec <_Z19serialResetSettingsv+0x6c>)
 80829ce:	f005 fd28 	bl	8088422 <_ZN5Print7printlnEPKc>
void serialResetSettings(void){

    Serial.println();
    Serial.println("Please enter password in order to apply default settings");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80829d2:	4668      	mov	r0, sp
 80829d4:	f005 fb40 	bl	8088058 <_ZN6StringD1Ev>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
        writeDefaultSettings();
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 80829d8:	b005      	add	sp, #20
 80829da:	f85d fb04 	ldr.w	pc, [sp], #4
 80829de:	bf00      	nop
 80829e0:	0808e6d5 	.word	0x0808e6d5
 80829e4:	0808e51a 	.word	0x0808e51a
 80829e8:	0808e70e 	.word	0x0808e70e
 80829ec:	0808e645 	.word	0x0808e645

080829f0 <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void){
 80829f0:	b510      	push	{r4, lr}
 80829f2:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 80829f4:	f006 fa68 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80829f8:	491f      	ldr	r1, [pc, #124]	; (8082a78 <_Z17serialGetTimeDatev+0x88>)
 80829fa:	f005 fd12 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80829fe:	f006 fa63 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082a02:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082a06:	f005 fe90 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082a0a:	f006 fa5d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082a0e:	220d      	movs	r2, #13
 8082a10:	4601      	mov	r1, r0
 8082a12:	4668      	mov	r0, sp
 8082a14:	f005 fe8c 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082a18:	4668      	mov	r0, sp
 8082a1a:	f005 fca1 	bl	8088360 <_ZNK6String5toIntEv>
 8082a1e:	4604      	mov	r4, r0
    Serial.println("");
 8082a20:	f006 fa52 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082a24:	4915      	ldr	r1, [pc, #84]	; (8082a7c <_Z17serialGetTimeDatev+0x8c>)
 8082a26:	f005 fcfc 	bl	8088422 <_ZN5Print7printlnEPKc>
    if(tempValue > 966012661 && tempValue < 4121686261){       //min is the year 2000, max is the year 2100
 8082a2a:	4b15      	ldr	r3, [pc, #84]	; (8082a80 <_Z17serialGetTimeDatev+0x90>)
 8082a2c:	429c      	cmp	r4, r3
 8082a2e:	dd18      	ble.n	8082a62 <_Z17serialGetTimeDatev+0x72>
        Time.setTime(tempValue);
 8082a30:	4620      	mov	r0, r4
 8082a32:	f005 ff03 	bl	808883c <_ZN9TimeClass7setTimeEl>
        Serial.print("\n\rNew Device Time:");
 8082a36:	f006 fa47 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082a3a:	4912      	ldr	r1, [pc, #72]	; (8082a84 <_Z17serialGetTimeDatev+0x94>)
 8082a3c:	f005 fcde 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 8082a40:	f006 fa42 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082a44:	4604      	mov	r4, r0
 8082a46:	f005 ffd6 	bl	80889f6 <_ZN9TimeClass3nowEv>
 8082a4a:	4601      	mov	r1, r0
 8082a4c:	a804      	add	r0, sp, #16
 8082a4e:	f005 feff 	bl	8088850 <_ZN9TimeClass7timeStrEl>
 8082a52:	9904      	ldr	r1, [sp, #16]
 8082a54:	4620      	mov	r0, r4
 8082a56:	f005 fce4 	bl	8088422 <_ZN5Print7printlnEPKc>
 8082a5a:	a804      	add	r0, sp, #16
 8082a5c:	f005 fafc 	bl	8088058 <_ZN6StringD1Ev>
 8082a60:	e004      	b.n	8082a6c <_Z17serialGetTimeDatev+0x7c>
    }else{
        Serial.println("\n\rInvalid value!");
 8082a62:	f006 fa31 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082a66:	4908      	ldr	r1, [pc, #32]	; (8082a88 <_Z17serialGetTimeDatev+0x98>)
 8082a68:	f005 fcdb 	bl	8088422 <_ZN5Print7printlnEPKc>
}

void serialGetTimeDate(void){
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082a6c:	4668      	mov	r0, sp
 8082a6e:	f005 faf3 	bl	8088058 <_ZN6StringD1Ev>
        Serial.print("\n\rNew Device Time:");
        Serial.println(Time.timeStr());
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082a72:	b008      	add	sp, #32
 8082a74:	bd10      	pop	{r4, pc}
 8082a76:	bf00      	nop
 8082a78:	0808e77d 	.word	0x0808e77d
 8082a7c:	08090584 	.word	0x08090584
 8082a80:	39942ef5 	.word	0x39942ef5
 8082a84:	0808e7b8 	.word	0x0808e7b8
 8082a88:	0808e6c4 	.word	0x0808e6c4

08082a8c <_Z13serialGetZonev>:

void serialGetZone(void){
 8082a8c:	b510      	push	{r4, lr}
 8082a8e:	b086      	sub	sp, #24
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 8082a90:	f006 fa1a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082a94:	491f      	ldr	r1, [pc, #124]	; (8082b14 <_Z13serialGetZonev+0x88>)
 8082a96:	f005 fcc4 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082a9a:	f006 fa15 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082a9e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082aa2:	f005 fe42 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082aa6:	f006 fa0f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082aaa:	220d      	movs	r2, #13
 8082aac:	4601      	mov	r1, r0
 8082aae:	a802      	add	r0, sp, #8
 8082ab0:	f005 fe3e 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082ab4:	a802      	add	r0, sp, #8
 8082ab6:	f005 fc53 	bl	8088360 <_ZNK6String5toIntEv>
 8082aba:	9001      	str	r0, [sp, #4]
    Serial.println("");
 8082abc:	f006 fa04 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082ac0:	4915      	ldr	r1, [pc, #84]	; (8082b18 <_Z13serialGetZonev+0x8c>)
 8082ac2:	f005 fcae 	bl	8088422 <_ZN5Print7printlnEPKc>
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
 8082ac6:	9801      	ldr	r0, [sp, #4]
 8082ac8:	f100 030c 	add.w	r3, r0, #12
 8082acc:	2b1a      	cmp	r3, #26
 8082ace:	d817      	bhi.n	8082b00 <_Z13serialGetZonev+0x74>
        Time.zone(tempValue);
 8082ad0:	f007 fc6c 	bl	808a3ac <__aeabi_i2f>
 8082ad4:	f005 fe96 	bl	8088804 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
        Serial.println(tempValue);
 8082ad8:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
    Serial.println("");
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
        Time.zone(tempValue);
        Serial.print("\n\rNew Device time zone:");
 8082ada:	f006 f9f5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082ade:	490f      	ldr	r1, [pc, #60]	; (8082b1c <_Z13serialGetZonev+0x90>)
 8082ae0:	f005 fc8c 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8082ae4:	f006 f9f0 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082ae8:	f854 1d14 	ldr.w	r1, [r4, #-20]!
 8082aec:	220a      	movs	r2, #10
 8082aee:	f005 fd06 	bl	80884fe <_ZN5Print7printlnEii>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 8082af2:	f006 fce5 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8082af6:	4621      	mov	r1, r4
 8082af8:	2054      	movs	r0, #84	; 0x54
 8082afa:	f7fd ff60 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8082afe:	e004      	b.n	8082b0a <_Z13serialGetZonev+0x7e>
    }else{
        Serial.println("\n\rInvalid value!");
 8082b00:	f006 f9e2 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082b04:	4906      	ldr	r1, [pc, #24]	; (8082b20 <_Z13serialGetZonev+0x94>)
 8082b06:	f005 fc8c 	bl	8088422 <_ZN5Print7printlnEPKc>
}

void serialGetZone(void){
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082b0a:	a802      	add	r0, sp, #8
 8082b0c:	f005 faa4 	bl	8088058 <_ZN6StringD1Ev>
        Serial.println(tempValue);
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082b10:	b006      	add	sp, #24
 8082b12:	bd10      	pop	{r4, pc}
 8082b14:	0808e7cb 	.word	0x0808e7cb
 8082b18:	08090584 	.word	0x08090584
 8082b1c:	0808e7f6 	.word	0x0808e7f6
 8082b20:	0808e6c4 	.word	0x0808e6c4

08082b24 <_Z20serialGetAverageTimev>:

void serialGetAverageTime(void){
 8082b24:	b530      	push	{r4, r5, lr}
 8082b26:	b087      	sub	sp, #28
    Serial.println();
 8082b28:	f006 f9ce 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
 8082b2c:	4d29      	ldr	r5, [pc, #164]	; (8082bd4 <_Z20serialGetAverageTimev+0xb0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetAverageTime(void){
    Serial.println();
 8082b2e:	f005 fc6c 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 8082b32:	f006 f9c9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082b36:	4928      	ldr	r1, [pc, #160]	; (8082bd8 <_Z20serialGetAverageTimev+0xb4>)
 8082b38:	f005 fc60 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8082b3c:	f006 f9c4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082b40:	220a      	movs	r2, #10
 8082b42:	6829      	ldr	r1, [r5, #0]
 8082b44:	f005 fcd9 	bl	80884fa <_ZN5Print5printEii>
    Serial.println("(~2 second) measurements");
 8082b48:	f006 f9be 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082b4c:	4923      	ldr	r1, [pc, #140]	; (8082bdc <_Z20serialGetAverageTimev+0xb8>)
 8082b4e:	f005 fc68 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 8082b52:	f006 f9b9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082b56:	4922      	ldr	r1, [pc, #136]	; (8082be0 <_Z20serialGetAverageTimev+0xbc>)
 8082b58:	f005 fc50 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082b5c:	f006 f9b4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082b60:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082b64:	f005 fde1 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082b68:	f006 f9ae 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082b6c:	220d      	movs	r2, #13
 8082b6e:	4601      	mov	r1, r0
 8082b70:	a802      	add	r0, sp, #8
 8082b72:	f005 fddd 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082b76:	a802      	add	r0, sp, #8
 8082b78:	f005 fbf2 	bl	8088360 <_ZNK6String5toIntEv>

    if(tempValue >= 1 && tempValue < 10000){
 8082b7c:	f242 730e 	movw	r3, #9998	; 0x270e
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 8082b80:	9001      	str	r0, [sp, #4]

    if(tempValue >= 1 && tempValue < 10000){
 8082b82:	3801      	subs	r0, #1
 8082b84:	4298      	cmp	r0, r3
 8082b86:	d81a      	bhi.n	8082bbe <_Z20serialGetAverageTimev+0x9a>
        Serial.print("\n\rNew Frequency: ");
 8082b88:	f006 f99e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082b8c:	4915      	ldr	r1, [pc, #84]	; (8082be4 <_Z20serialGetAverageTimev+0xc0>)
 8082b8e:	f005 fc35 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8082b92:	f006 f999 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082b96:	220a      	movs	r2, #10
 8082b98:	9901      	ldr	r1, [sp, #4]
 8082b9a:	f005 fcb0 	bl	80884fe <_ZN5Print7printlnEii>
        Serial.println("(~2 second) measurements");
        measurements_to_average = tempValue;
 8082b9e:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if(tempValue >= 1 && tempValue < 10000){
        Serial.print("\n\rNew Frequency: ");
        Serial.println(tempValue);
        Serial.println("(~2 second) measurements");
 8082ba0:	f006 f992 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082ba4:	490d      	ldr	r1, [pc, #52]	; (8082bdc <_Z20serialGetAverageTimev+0xb8>)
 8082ba6:	f005 fc3c 	bl	8088422 <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8082baa:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8082bae:	602b      	str	r3, [r5, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8082bb0:	f006 fc86 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8082bb4:	4621      	mov	r1, r4
 8082bb6:	2074      	movs	r0, #116	; 0x74
 8082bb8:	f7fd ff01 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8082bbc:	e004      	b.n	8082bc8 <_Z20serialGetAverageTimev+0xa4>
    }else{
        Serial.println("\n\rInvalid value!");
 8082bbe:	f006 f983 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082bc2:	4909      	ldr	r1, [pc, #36]	; (8082be8 <_Z20serialGetAverageTimev+0xc4>)
 8082bc4:	f005 fc2d 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082bc8:	a802      	add	r0, sp, #8
 8082bca:	f005 fa45 	bl	8088058 <_ZN6StringD1Ev>
        measurements_to_average = tempValue;
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082bce:	b007      	add	sp, #28
 8082bd0:	bd30      	pop	{r4, r5, pc}
 8082bd2:	bf00      	nop
 8082bd4:	20000ab4 	.word	0x20000ab4
 8082bd8:	0808e80e 	.word	0x0808e80e
 8082bdc:	0808e822 	.word	0x0808e822
 8082be0:	0808e83b 	.word	0x0808e83b
 8082be4:	0808e84e 	.word	0x0808e84e
 8082be8:	0808e6c4 	.word	0x0808e6c4

08082bec <_Z17serialGetCo2Slopev>:

void serialGetCo2Slope(void){
 8082bec:	b530      	push	{r4, r5, lr}
 8082bee:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8082bf0:	f006 f96a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082bf4:	f005 fc09 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 8082bf8:	f006 f966 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082bfc:	4932      	ldr	r1, [pc, #200]	; (8082cc8 <_Z17serialGetCo2Slopev+0xdc>)
 8082bfe:	f005 fbfd 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 8082c02:	f006 f961 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082c06:	4605      	mov	r5, r0
 8082c08:	4c30      	ldr	r4, [pc, #192]	; (8082ccc <_Z17serialGetCo2Slopev+0xe0>)
 8082c0a:	2202      	movs	r2, #2
 8082c0c:	6821      	ldr	r1, [r4, #0]
 8082c0e:	a806      	add	r0, sp, #24
 8082c10:	f005 fadf 	bl	80881d2 <_ZN6StringC1Efi>
 8082c14:	9906      	ldr	r1, [sp, #24]
 8082c16:	4628      	mov	r0, r5
 8082c18:	f005 fbf0 	bl	80883fc <_ZN5Print5printEPKc>
 8082c1c:	a806      	add	r0, sp, #24
 8082c1e:	f005 fa1b 	bl	8088058 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082c22:	f006 f951 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082c26:	492a      	ldr	r1, [pc, #168]	; (8082cd0 <_Z17serialGetCo2Slopev+0xe4>)
 8082c28:	f005 fbfb 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 8082c2c:	f006 f94c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082c30:	4928      	ldr	r1, [pc, #160]	; (8082cd4 <_Z17serialGetCo2Slopev+0xe8>)
 8082c32:	f005 fbe3 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082c36:	f006 f947 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082c3a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082c3e:	f005 fd74 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082c42:	f006 f941 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082c46:	220d      	movs	r2, #13
 8082c48:	4601      	mov	r1, r0
 8082c4a:	a802      	add	r0, sp, #8
 8082c4c:	f005 fd70 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082c50:	a802      	add	r0, sp, #8
 8082c52:	f005 fb8a 	bl	808836a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8082c56:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8082c5a:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8082c5c:	f007 fdac 	bl	808a7b8 <__aeabi_fcmpge>
 8082c60:	b338      	cbz	r0, 8082cb2 <_Z17serialGetCo2Slopev+0xc6>
 8082c62:	491d      	ldr	r1, [pc, #116]	; (8082cd8 <_Z17serialGetCo2Slopev+0xec>)
 8082c64:	4628      	mov	r0, r5
 8082c66:	f007 fd93 	bl	808a790 <__aeabi_fcmplt>
 8082c6a:	b310      	cbz	r0, 8082cb2 <_Z17serialGetCo2Slopev+0xc6>
        CO2_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8082c6c:	491b      	ldr	r1, [pc, #108]	; (8082cdc <_Z17serialGetCo2Slopev+0xf0>)
 8082c6e:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
        CO2_slope = tempfloat;
 8082c70:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8082c72:	f007 fbef 	bl	808a454 <__aeabi_fmul>
 8082c76:	f007 fdb3 	bl	808a7e0 <__aeabi_f2iz>
 8082c7a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8082c7c:	f006 f924 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082c80:	4917      	ldr	r1, [pc, #92]	; (8082ce0 <_Z17serialGetCo2Slopev+0xf4>)
 8082c82:	f005 fbbb 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope,2));
 8082c86:	f006 f91f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082c8a:	4605      	mov	r5, r0
 8082c8c:	2202      	movs	r2, #2
 8082c8e:	6821      	ldr	r1, [r4, #0]
 8082c90:	a806      	add	r0, sp, #24
 8082c92:	f005 fa9e 	bl	80881d2 <_ZN6StringC1Efi>
 8082c96:	9906      	ldr	r1, [sp, #24]
 8082c98:	4628      	mov	r0, r5
 8082c9a:	f005 fbc2 	bl	8088422 <_ZN5Print7printlnEPKc>
 8082c9e:	a806      	add	r0, sp, #24
 8082ca0:	f005 f9da 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8082ca4:	f006 fc0c 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8082ca8:	a901      	add	r1, sp, #4
 8082caa:	2008      	movs	r0, #8
 8082cac:	f7fd fe87 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8082cb0:	e004      	b.n	8082cbc <_Z17serialGetCo2Slopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 8082cb2:	f006 f909 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082cb6:	490b      	ldr	r1, [pc, #44]	; (8082ce4 <_Z17serialGetCo2Slopev+0xf8>)
 8082cb8:	f005 fbb3 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 slope:");
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082cbc:	a802      	add	r0, sp, #8
 8082cbe:	f005 f9cb 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082cc2:	b00b      	add	sp, #44	; 0x2c
 8082cc4:	bd30      	pop	{r4, r5, pc}
 8082cc6:	bf00      	nop
 8082cc8:	0808e860 	.word	0x0808e860
 8082ccc:	20000a04 	.word	0x20000a04
 8082cd0:	0808e873 	.word	0x0808e873
 8082cd4:	0808e878 	.word	0x0808e878
 8082cd8:	41200000 	.word	0x41200000
 8082cdc:	42c80000 	.word	0x42c80000
 8082ce0:	0808e88e 	.word	0x0808e88e
 8082ce4:	0808e6c4 	.word	0x0808e6c4

08082ce8 <_Z16serialGetCo2Zerov>:

void serialGetCo2Zero(void){
 8082ce8:	b530      	push	{r4, r5, lr}
 8082cea:	b087      	sub	sp, #28
    Serial.println();
 8082cec:	f006 f8ec 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
 8082cf0:	4d26      	ldr	r5, [pc, #152]	; (8082d8c <_Z16serialGetCo2Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Zero(void){
    Serial.println();
 8082cf2:	f005 fb8a 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 8082cf6:	f006 f8e7 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082cfa:	4925      	ldr	r1, [pc, #148]	; (8082d90 <_Z16serialGetCo2Zerov+0xa8>)
 8082cfc:	f005 fb7e 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 8082d00:	f006 f8e2 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082d04:	220a      	movs	r2, #10
 8082d06:	6829      	ldr	r1, [r5, #0]
 8082d08:	f005 fbf7 	bl	80884fa <_ZN5Print5printEii>
    Serial.println(" ppm");
 8082d0c:	f006 f8dc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082d10:	4920      	ldr	r1, [pc, #128]	; (8082d94 <_Z16serialGetCo2Zerov+0xac>)
 8082d12:	f005 fb86 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 8082d16:	f006 f8d7 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082d1a:	491f      	ldr	r1, [pc, #124]	; (8082d98 <_Z16serialGetCo2Zerov+0xb0>)
 8082d1c:	f005 fb6e 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082d20:	f006 f8d2 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082d24:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082d28:	f005 fcff 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082d2c:	f006 f8cc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082d30:	220d      	movs	r2, #13
 8082d32:	4601      	mov	r1, r0
 8082d34:	a802      	add	r0, sp, #8
 8082d36:	f005 fcfb 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082d3a:	a802      	add	r0, sp, #8
 8082d3c:	f005 fb10 	bl	8088360 <_ZNK6String5toIntEv>
 8082d40:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8082d42:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8082d46:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8082d4a:	d215      	bcs.n	8082d78 <_Z16serialGetCo2Zerov+0x90>
        Serial.print("\n\rNew CO2 zero: ");
 8082d4c:	f006 f8bc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082d50:	4912      	ldr	r1, [pc, #72]	; (8082d9c <_Z16serialGetCo2Zerov+0xb4>)
 8082d52:	f005 fb53 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO2_zero = tempValue;
 8082d56:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew CO2 zero: ");
        Serial.println(tempValue);
 8082d58:	f006 f8b6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082d5c:	9901      	ldr	r1, [sp, #4]
 8082d5e:	220a      	movs	r2, #10
 8082d60:	f005 fbcd 	bl	80884fe <_ZN5Print7printlnEii>
        CO2_zero = tempValue;
 8082d64:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8082d68:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8082d6a:	f006 fba9 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8082d6e:	4621      	mov	r1, r4
 8082d70:	2004      	movs	r0, #4
 8082d72:	f7fd fe24 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8082d76:	e004      	b.n	8082d82 <_Z16serialGetCo2Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8082d78:	f006 f8a6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082d7c:	4908      	ldr	r1, [pc, #32]	; (8082da0 <_Z16serialGetCo2Zerov+0xb8>)
 8082d7e:	f005 fb50 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
    Serial.println(" ppm");
    Serial.print("Enter new CO2 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082d82:	a802      	add	r0, sp, #8
 8082d84:	f005 f968 	bl	8088058 <_ZN6StringD1Ev>
        CO2_zero = tempValue;
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082d88:	b007      	add	sp, #28
 8082d8a:	bd30      	pop	{r4, r5, pc}
 8082d8c:	20000224 	.word	0x20000224
 8082d90:	0808e8a0 	.word	0x0808e8a0
 8082d94:	0808e873 	.word	0x0808e873
 8082d98:	0808e8b2 	.word	0x0808e8b2
 8082d9c:	0808e8c7 	.word	0x0808e8c7
 8082da0:	0808e6c4 	.word	0x0808e6c4
 8082da4:	00000000 	.word	0x00000000

08082da8 <_Z16serialGetCoSlopev>:

void serialGetCoSlope(void){
 8082da8:	b530      	push	{r4, r5, lr}
 8082daa:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8082dac:	f006 f88c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082db0:	f005 fb2b 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 8082db4:	f006 f888 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082db8:	4937      	ldr	r1, [pc, #220]	; (8082e98 <_Z16serialGetCoSlopev+0xf0>)
 8082dba:	f005 fb1f 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(String(CO_slopeA, 2));
 8082dbe:	f006 f883 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082dc2:	4605      	mov	r5, r0
 8082dc4:	4c35      	ldr	r4, [pc, #212]	; (8082e9c <_Z16serialGetCoSlopev+0xf4>)
 8082dc6:	2202      	movs	r2, #2
 8082dc8:	6821      	ldr	r1, [r4, #0]
 8082dca:	a806      	add	r0, sp, #24
 8082dcc:	f005 fa01 	bl	80881d2 <_ZN6StringC1Efi>
 8082dd0:	9906      	ldr	r1, [sp, #24]
 8082dd2:	4628      	mov	r0, r5
 8082dd4:	f005 fb12 	bl	80883fc <_ZN5Print5printEPKc>
 8082dd8:	a806      	add	r0, sp, #24
 8082dda:	f005 f93d 	bl	8088058 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082dde:	f006 f873 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082de2:	492f      	ldr	r1, [pc, #188]	; (8082ea0 <_Z16serialGetCoSlopev+0xf8>)
 8082de4:	f005 fb1d 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8082de8:	f006 f86e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082dec:	492d      	ldr	r1, [pc, #180]	; (8082ea4 <_Z16serialGetCoSlopev+0xfc>)
 8082dee:	f005 fb05 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082df2:	f006 f869 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082df6:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082dfa:	f005 fc96 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082dfe:	f006 f863 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082e02:	220d      	movs	r2, #13
 8082e04:	4601      	mov	r1, r0
 8082e06:	a802      	add	r0, sp, #8
 8082e08:	f005 fc92 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082e0c:	a802      	add	r0, sp, #8
 8082e0e:	f005 faac 	bl	808836a <_ZNK6String7toFloatEv>
 8082e12:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
 8082e14:	f006 fe74 	bl	8089b00 <__aeabi_f2d>
 8082e18:	a31d      	add	r3, pc, #116	; (adr r3, 8082e90 <_Z16serialGetCoSlopev+0xe8>)
 8082e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082e1e:	f007 f949 	bl	808a0b4 <__aeabi_dcmpge>
 8082e22:	b340      	cbz	r0, 8082e76 <_Z16serialGetCoSlopev+0xce>
 8082e24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8082e28:	4628      	mov	r0, r5
 8082e2a:	f007 fcb1 	bl	808a790 <__aeabi_fcmplt>
 8082e2e:	b310      	cbz	r0, 8082e76 <_Z16serialGetCoSlopev+0xce>
        CO_slopeA = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8082e30:	491d      	ldr	r1, [pc, #116]	; (8082ea8 <_Z16serialGetCoSlopev+0x100>)
 8082e32:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
        CO_slopeA = tempfloat;
 8082e34:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8082e36:	f007 fb0d 	bl	808a454 <__aeabi_fmul>
 8082e3a:	f007 fcd1 	bl	808a7e0 <__aeabi_f2iz>
 8082e3e:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew COA slope: ");
 8082e40:	f006 f842 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082e44:	4919      	ldr	r1, [pc, #100]	; (8082eac <_Z16serialGetCoSlopev+0x104>)
 8082e46:	f005 fad9 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(String(CO_slopeA,2));
 8082e4a:	f006 f83d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082e4e:	4605      	mov	r5, r0
 8082e50:	2202      	movs	r2, #2
 8082e52:	6821      	ldr	r1, [r4, #0]
 8082e54:	a806      	add	r0, sp, #24
 8082e56:	f005 f9bc 	bl	80881d2 <_ZN6StringC1Efi>
 8082e5a:	9906      	ldr	r1, [sp, #24]
 8082e5c:	4628      	mov	r0, r5
 8082e5e:	f005 fae0 	bl	8088422 <_ZN5Print7printlnEPKc>
 8082e62:	a806      	add	r0, sp, #24
 8082e64:	f005 f8f8 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPEA_MEM_ADDRESS, tempValue);
 8082e68:	f006 fb2a 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8082e6c:	a901      	add	r1, sp, #4
 8082e6e:	2010      	movs	r0, #16
 8082e70:	f7fd fda5 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8082e74:	e004      	b.n	8082e80 <_Z16serialGetCoSlopev+0xd8>
    }else{
        Serial.println("\n\rInvalid value!");
 8082e76:	f006 f827 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082e7a:	490d      	ldr	r1, [pc, #52]	; (8082eb0 <_Z16serialGetCoSlopev+0x108>)
 8082e7c:	f005 fad1 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO slope:");
    Serial.print(String(CO_slopeA, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082e80:	a802      	add	r0, sp, #8
 8082e82:	f005 f8e9 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPEA_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082e86:	b00b      	add	sp, #44	; 0x2c
 8082e88:	bd30      	pop	{r4, r5, pc}
 8082e8a:	bf00      	nop
 8082e8c:	f3af 8000 	nop.w
 8082e90:	9999999a 	.word	0x9999999a
 8082e94:	3fb99999 	.word	0x3fb99999
 8082e98:	0808e8d8 	.word	0x0808e8d8
 8082e9c:	200008a4 	.word	0x200008a4
 8082ea0:	0808e873 	.word	0x0808e873
 8082ea4:	0808e8ea 	.word	0x0808e8ea
 8082ea8:	42c80000 	.word	0x42c80000
 8082eac:	0808e8ff 	.word	0x0808e8ff
 8082eb0:	0808e6c4 	.word	0x0808e6c4

08082eb4 <_Z15serialGetCoZerov>:

void serialGetCoZero(void){
 8082eb4:	b530      	push	{r4, r5, lr}
 8082eb6:	b087      	sub	sp, #28
    Serial.println();
 8082eb8:	f006 f806 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current CO_A zero:");
    Serial.print(CO_zeroA);
 8082ebc:	4d27      	ldr	r5, [pc, #156]	; (8082f5c <_Z15serialGetCoZerov+0xa8>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoZero(void){
    Serial.println();
 8082ebe:	f005 faa4 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current CO_A zero:");
 8082ec2:	f006 f801 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082ec6:	4926      	ldr	r1, [pc, #152]	; (8082f60 <_Z15serialGetCoZerov+0xac>)
 8082ec8:	f005 fa98 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(CO_zeroA);
 8082ecc:	f005 fffc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082ed0:	220a      	movs	r2, #10
 8082ed2:	6829      	ldr	r1, [r5, #0]
 8082ed4:	f005 fb11 	bl	80884fa <_ZN5Print5printEii>
    Serial.println(" ppb");
 8082ed8:	f005 fff6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082edc:	4921      	ldr	r1, [pc, #132]	; (8082f64 <_Z15serialGetCoZerov+0xb0>)
 8082ede:	f005 faa0 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 8082ee2:	f005 fff1 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082ee6:	4920      	ldr	r1, [pc, #128]	; (8082f68 <_Z15serialGetCoZerov+0xb4>)
 8082ee8:	f005 fa88 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082eec:	f005 ffec 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082ef0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082ef4:	f005 fc19 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082ef8:	f005 ffe6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082efc:	220d      	movs	r2, #13
 8082efe:	4601      	mov	r1, r0
 8082f00:	a802      	add	r0, sp, #8
 8082f02:	f005 fc15 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082f06:	a802      	add	r0, sp, #8
 8082f08:	f005 fa2a 	bl	8088360 <_ZNK6String5toIntEv>

    if(tempValue >= -5000 && tempValue < 5000){
 8082f0c:	f242 730f 	movw	r3, #9999	; 0x270f
    Serial.print(CO_zeroA);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 8082f10:	9001      	str	r0, [sp, #4]

    if(tempValue >= -5000 && tempValue < 5000){
 8082f12:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8082f16:	3008      	adds	r0, #8
 8082f18:	4298      	cmp	r0, r3
 8082f1a:	d815      	bhi.n	8082f48 <_Z15serialGetCoZerov+0x94>
        Serial.print("\n\rNew CO zero: ");
 8082f1c:	f005 ffd4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082f20:	4912      	ldr	r1, [pc, #72]	; (8082f6c <_Z15serialGetCoZerov+0xb8>)
 8082f22:	f005 fa6b 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO_zeroA = tempValue;
 8082f26:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -5000 && tempValue < 5000){
        Serial.print("\n\rNew CO zero: ");
        Serial.println(tempValue);
 8082f28:	f005 ffce 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082f2c:	9901      	ldr	r1, [sp, #4]
 8082f2e:	220a      	movs	r2, #10
 8082f30:	f005 fae5 	bl	80884fe <_ZN5Print7printlnEii>
        CO_zeroA = tempValue;
 8082f34:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8082f38:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO_ZEROA_MEM_ADDRESS, tempValue);
 8082f3a:	f006 fac1 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8082f3e:	4621      	mov	r1, r4
 8082f40:	200c      	movs	r0, #12
 8082f42:	f7fd fd3c 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8082f46:	e004      	b.n	8082f52 <_Z15serialGetCoZerov+0x9e>
    }else{
        Serial.println("\n\rInvalid value!");
 8082f48:	f005 ffbe 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082f4c:	4908      	ldr	r1, [pc, #32]	; (8082f70 <_Z15serialGetCoZerov+0xbc>)
 8082f4e:	f005 fa68 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO_A zero:");
    Serial.print(CO_zeroA);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082f52:	a802      	add	r0, sp, #8
 8082f54:	f005 f880 	bl	8088058 <_ZN6StringD1Ev>
        CO_zeroA = tempValue;
        EEPROM.put(CO_ZEROA_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082f58:	b007      	add	sp, #28
 8082f5a:	bd30      	pop	{r4, r5, pc}
 8082f5c:	2000096c 	.word	0x2000096c
 8082f60:	0808e911 	.word	0x0808e911
 8082f64:	0808e924 	.word	0x0808e924
 8082f68:	0808e929 	.word	0x0808e929
 8082f6c:	0808e93d 	.word	0x0808e93d
 8082f70:	0808e6c4 	.word	0x0808e6c4

08082f74 <_Z17serialGetPm1Slopev>:

void serialGetPm1Slope(void){
 8082f74:	b530      	push	{r4, r5, lr}
 8082f76:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082f78:	f005 ffa6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082f7c:	f005 fa45 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 8082f80:	f005 ffa2 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082f84:	4932      	ldr	r1, [pc, #200]	; (8083050 <_Z17serialGetPm1Slopev+0xdc>)
 8082f86:	f005 fa39 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 8082f8a:	f005 ff9d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082f8e:	4605      	mov	r5, r0
 8082f90:	4c30      	ldr	r4, [pc, #192]	; (8083054 <_Z17serialGetPm1Slopev+0xe0>)
 8082f92:	2202      	movs	r2, #2
 8082f94:	6821      	ldr	r1, [r4, #0]
 8082f96:	a806      	add	r0, sp, #24
 8082f98:	f005 f91b 	bl	80881d2 <_ZN6StringC1Efi>
 8082f9c:	9906      	ldr	r1, [sp, #24]
 8082f9e:	4628      	mov	r0, r5
 8082fa0:	f005 fa2c 	bl	80883fc <_ZN5Print5printEPKc>
 8082fa4:	a806      	add	r0, sp, #24
 8082fa6:	f005 f857 	bl	8088058 <_ZN6StringD1Ev>
    Serial.println(" ");
 8082faa:	f005 ff8d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082fae:	492a      	ldr	r1, [pc, #168]	; (8083058 <_Z17serialGetPm1Slopev+0xe4>)
 8082fb0:	f005 fa37 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 8082fb4:	f005 ff88 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082fb8:	4928      	ldr	r1, [pc, #160]	; (808305c <_Z17serialGetPm1Slopev+0xe8>)
 8082fba:	f005 fa1f 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082fbe:	f005 ff83 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082fc2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082fc6:	f005 fbb0 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082fca:	f005 ff7d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8082fce:	220d      	movs	r2, #13
 8082fd0:	4601      	mov	r1, r0
 8082fd2:	a802      	add	r0, sp, #8
 8082fd4:	f005 fbac 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082fd8:	a802      	add	r0, sp, #8
 8082fda:	f005 f9c6 	bl	808836a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082fde:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8082fe2:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082fe4:	f007 fbe8 	bl	808a7b8 <__aeabi_fcmpge>
 8082fe8:	b340      	cbz	r0, 808303c <_Z17serialGetPm1Slopev+0xc8>
 8082fea:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082fee:	4628      	mov	r0, r5
 8082ff0:	f007 fbce 	bl	808a790 <__aeabi_fcmplt>
 8082ff4:	b310      	cbz	r0, 808303c <_Z17serialGetPm1Slopev+0xc8>
        PM_1_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8082ff6:	491a      	ldr	r1, [pc, #104]	; (8083060 <_Z17serialGetPm1Slopev+0xec>)
 8082ff8:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_1_slope = tempfloat;
 8082ffa:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8082ffc:	f007 fa2a 	bl	808a454 <__aeabi_fmul>
 8083000:	f007 fbee 	bl	808a7e0 <__aeabi_f2iz>
 8083004:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 8083006:	f005 ff5f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808300a:	4916      	ldr	r1, [pc, #88]	; (8083064 <_Z17serialGetPm1Slopev+0xf0>)
 808300c:	f005 f9f6 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 8083010:	f005 ff5a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083014:	4605      	mov	r5, r0
 8083016:	2202      	movs	r2, #2
 8083018:	6821      	ldr	r1, [r4, #0]
 808301a:	a806      	add	r0, sp, #24
 808301c:	f005 f8d9 	bl	80881d2 <_ZN6StringC1Efi>
 8083020:	9906      	ldr	r1, [sp, #24]
 8083022:	4628      	mov	r0, r5
 8083024:	f005 f9fd 	bl	8088422 <_ZN5Print7printlnEPKc>
 8083028:	a806      	add	r0, sp, #24
 808302a:	f005 f815 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 808302e:	f006 fa47 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8083032:	a901      	add	r1, sp, #4
 8083034:	2018      	movs	r0, #24
 8083036:	f7fd fcc2 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 808303a:	e004      	b.n	8083046 <_Z17serialGetPm1Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 808303c:	f005 ff44 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083040:	4909      	ldr	r1, [pc, #36]	; (8083068 <_Z17serialGetPm1Slopev+0xf4>)
 8083042:	f005 f9ee 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 slope:");
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083046:	a802      	add	r0, sp, #8
 8083048:	f005 f806 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808304c:	b00b      	add	sp, #44	; 0x2c
 808304e:	bd30      	pop	{r4, r5, pc}
 8083050:	0808e94d 	.word	0x0808e94d
 8083054:	20000220 	.word	0x20000220
 8083058:	0808fe88 	.word	0x0808fe88
 808305c:	0808e960 	.word	0x0808e960
 8083060:	42c80000 	.word	0x42c80000
 8083064:	0808e976 	.word	0x0808e976
 8083068:	0808e6c4 	.word	0x0808e6c4

0808306c <_Z16serialGetPm1Zerov>:

void serialGetPm1Zero(void){
 808306c:	b530      	push	{r4, r5, lr}
 808306e:	b087      	sub	sp, #28
    Serial.println();
 8083070:	f005 ff2a 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
 8083074:	4d26      	ldr	r5, [pc, #152]	; (8083110 <_Z16serialGetPm1Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm1Zero(void){
    Serial.println();
 8083076:	f005 f9c8 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 808307a:	f005 ff25 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808307e:	4925      	ldr	r1, [pc, #148]	; (8083114 <_Z16serialGetPm1Zerov+0xa8>)
 8083080:	f005 f9bc 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 8083084:	f005 ff20 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083088:	220a      	movs	r2, #10
 808308a:	6829      	ldr	r1, [r5, #0]
 808308c:	f005 fa35 	bl	80884fa <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 8083090:	f005 ff1a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083094:	4920      	ldr	r1, [pc, #128]	; (8083118 <_Z16serialGetPm1Zerov+0xac>)
 8083096:	f005 f9c4 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 808309a:	f005 ff15 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808309e:	491f      	ldr	r1, [pc, #124]	; (808311c <_Z16serialGetPm1Zerov+0xb0>)
 80830a0:	f005 f9ac 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80830a4:	f005 ff10 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80830a8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80830ac:	f005 fb3d 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80830b0:	f005 ff0a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80830b4:	220d      	movs	r2, #13
 80830b6:	4601      	mov	r1, r0
 80830b8:	a802      	add	r0, sp, #8
 80830ba:	f005 fb39 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80830be:	a802      	add	r0, sp, #8
 80830c0:	f005 f94e 	bl	8088360 <_ZNK6String5toIntEv>
 80830c4:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 80830c6:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80830ca:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80830ce:	d215      	bcs.n	80830fc <_Z16serialGetPm1Zerov+0x90>
        Serial.print("\n\rNew PM1 zero: ");
 80830d0:	f005 fefa 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80830d4:	4912      	ldr	r1, [pc, #72]	; (8083120 <_Z16serialGetPm1Zerov+0xb4>)
 80830d6:	f005 f991 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_1_zero = tempValue;
 80830da:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM1 zero: ");
        Serial.println(tempValue);
 80830dc:	f005 fef4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80830e0:	9901      	ldr	r1, [sp, #4]
 80830e2:	220a      	movs	r2, #10
 80830e4:	f005 fa0b 	bl	80884fe <_ZN5Print7printlnEii>
        PM_1_zero = tempValue;
 80830e8:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80830ec:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 80830ee:	f006 f9e7 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80830f2:	4621      	mov	r1, r4
 80830f4:	2014      	movs	r0, #20
 80830f6:	f7fd fc62 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 80830fa:	e004      	b.n	8083106 <_Z16serialGetPm1Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 80830fc:	f005 fee4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083100:	4908      	ldr	r1, [pc, #32]	; (8083124 <_Z16serialGetPm1Zerov+0xb8>)
 8083102:	f005 f98e 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM1 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083106:	a802      	add	r0, sp, #8
 8083108:	f004 ffa6 	bl	8088058 <_ZN6StringD1Ev>
        PM_1_zero = tempValue;
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808310c:	b007      	add	sp, #28
 808310e:	bd30      	pop	{r4, r5, pc}
 8083110:	20000a98 	.word	0x20000a98
 8083114:	0808e988 	.word	0x0808e988
 8083118:	0808e99a 	.word	0x0808e99a
 808311c:	0808e9a1 	.word	0x0808e9a1
 8083120:	0808e9b6 	.word	0x0808e9b6
 8083124:	0808e6c4 	.word	0x0808e6c4

08083128 <_Z18serialGetPm25Slopev>:

void serialGetPm25Slope(void){
 8083128:	b530      	push	{r4, r5, lr}
 808312a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 808312c:	f005 fecc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083130:	f005 f96b 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 8083134:	f005 fec8 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083138:	4932      	ldr	r1, [pc, #200]	; (8083204 <_Z18serialGetPm25Slopev+0xdc>)
 808313a:	f005 f95f 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 808313e:	f005 fec3 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083142:	4605      	mov	r5, r0
 8083144:	4c30      	ldr	r4, [pc, #192]	; (8083208 <_Z18serialGetPm25Slopev+0xe0>)
 8083146:	2202      	movs	r2, #2
 8083148:	6821      	ldr	r1, [r4, #0]
 808314a:	a806      	add	r0, sp, #24
 808314c:	f005 f841 	bl	80881d2 <_ZN6StringC1Efi>
 8083150:	9906      	ldr	r1, [sp, #24]
 8083152:	4628      	mov	r0, r5
 8083154:	f005 f952 	bl	80883fc <_ZN5Print5printEPKc>
 8083158:	a806      	add	r0, sp, #24
 808315a:	f004 ff7d 	bl	8088058 <_ZN6StringD1Ev>
    Serial.println(" ");
 808315e:	f005 feb3 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083162:	492a      	ldr	r1, [pc, #168]	; (808320c <_Z18serialGetPm25Slopev+0xe4>)
 8083164:	f005 f95d 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 8083168:	f005 feae 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808316c:	4928      	ldr	r1, [pc, #160]	; (8083210 <_Z18serialGetPm25Slopev+0xe8>)
 808316e:	f005 f945 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083172:	f005 fea9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083176:	f24c 3150 	movw	r1, #50000	; 0xc350
 808317a:	f005 fad6 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808317e:	f005 fea3 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083182:	220d      	movs	r2, #13
 8083184:	4601      	mov	r1, r0
 8083186:	a802      	add	r0, sp, #8
 8083188:	f005 fad2 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 808318c:	a802      	add	r0, sp, #8
 808318e:	f005 f8ec 	bl	808836a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083192:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083196:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083198:	f007 fb0e 	bl	808a7b8 <__aeabi_fcmpge>
 808319c:	b340      	cbz	r0, 80831f0 <_Z18serialGetPm25Slopev+0xc8>
 808319e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80831a2:	4628      	mov	r0, r5
 80831a4:	f007 faf4 	bl	808a790 <__aeabi_fcmplt>
 80831a8:	b310      	cbz	r0, 80831f0 <_Z18serialGetPm25Slopev+0xc8>
        PM_25_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80831aa:	491a      	ldr	r1, [pc, #104]	; (8083214 <_Z18serialGetPm25Slopev+0xec>)
 80831ac:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_25_slope = tempfloat;
 80831ae:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80831b0:	f007 f950 	bl	808a454 <__aeabi_fmul>
 80831b4:	f007 fb14 	bl	808a7e0 <__aeabi_f2iz>
 80831b8:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 80831ba:	f005 fe85 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80831be:	4916      	ldr	r1, [pc, #88]	; (8083218 <_Z18serialGetPm25Slopev+0xf0>)
 80831c0:	f005 f91c 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope,2));
 80831c4:	f005 fe80 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80831c8:	4605      	mov	r5, r0
 80831ca:	2202      	movs	r2, #2
 80831cc:	6821      	ldr	r1, [r4, #0]
 80831ce:	a806      	add	r0, sp, #24
 80831d0:	f004 ffff 	bl	80881d2 <_ZN6StringC1Efi>
 80831d4:	9906      	ldr	r1, [sp, #24]
 80831d6:	4628      	mov	r0, r5
 80831d8:	f005 f923 	bl	8088422 <_ZN5Print7printlnEPKc>
 80831dc:	a806      	add	r0, sp, #24
 80831de:	f004 ff3b 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 80831e2:	f006 f96d 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80831e6:	a901      	add	r1, sp, #4
 80831e8:	2020      	movs	r0, #32
 80831ea:	f7fd fbe8 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 80831ee:	e004      	b.n	80831fa <_Z18serialGetPm25Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 80831f0:	f005 fe6a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80831f4:	4909      	ldr	r1, [pc, #36]	; (808321c <_Z18serialGetPm25Slopev+0xf4>)
 80831f6:	f005 f914 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 slope:");
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80831fa:	a802      	add	r0, sp, #8
 80831fc:	f004 ff2c 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083200:	b00b      	add	sp, #44	; 0x2c
 8083202:	bd30      	pop	{r4, r5, pc}
 8083204:	0808e9c7 	.word	0x0808e9c7
 8083208:	200007a8 	.word	0x200007a8
 808320c:	0808fe88 	.word	0x0808fe88
 8083210:	0808e9dc 	.word	0x0808e9dc
 8083214:	42c80000 	.word	0x42c80000
 8083218:	0808e9f4 	.word	0x0808e9f4
 808321c:	0808e6c4 	.word	0x0808e6c4

08083220 <_Z17serialGetPm25Zerov>:

void serialGetPm25Zero(void){
 8083220:	b530      	push	{r4, r5, lr}
 8083222:	b087      	sub	sp, #28
    Serial.println();
 8083224:	f005 fe50 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
 8083228:	4d26      	ldr	r5, [pc, #152]	; (80832c4 <_Z17serialGetPm25Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm25Zero(void){
    Serial.println();
 808322a:	f005 f8ee 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 808322e:	f005 fe4b 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083232:	4925      	ldr	r1, [pc, #148]	; (80832c8 <_Z17serialGetPm25Zerov+0xa8>)
 8083234:	f005 f8e2 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 8083238:	f005 fe46 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808323c:	220a      	movs	r2, #10
 808323e:	6829      	ldr	r1, [r5, #0]
 8083240:	f005 f95b 	bl	80884fa <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 8083244:	f005 fe40 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083248:	4920      	ldr	r1, [pc, #128]	; (80832cc <_Z17serialGetPm25Zerov+0xac>)
 808324a:	f005 f8ea 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 808324e:	f005 fe3b 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083252:	491f      	ldr	r1, [pc, #124]	; (80832d0 <_Z17serialGetPm25Zerov+0xb0>)
 8083254:	f005 f8d2 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083258:	f005 fe36 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808325c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083260:	f005 fa63 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083264:	f005 fe30 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083268:	220d      	movs	r2, #13
 808326a:	4601      	mov	r1, r0
 808326c:	a802      	add	r0, sp, #8
 808326e:	f005 fa5f 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083272:	a802      	add	r0, sp, #8
 8083274:	f005 f874 	bl	8088360 <_ZNK6String5toIntEv>
 8083278:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 808327a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808327e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083282:	d215      	bcs.n	80832b0 <_Z17serialGetPm25Zerov+0x90>
        Serial.print("\n\rNew PM2.5 zero: ");
 8083284:	f005 fe20 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083288:	4912      	ldr	r1, [pc, #72]	; (80832d4 <_Z17serialGetPm25Zerov+0xb4>)
 808328a:	f005 f8b7 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_25_zero = tempValue;
 808328e:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM2.5 zero: ");
        Serial.println(tempValue);
 8083290:	f005 fe1a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083294:	9901      	ldr	r1, [sp, #4]
 8083296:	220a      	movs	r2, #10
 8083298:	f005 f931 	bl	80884fe <_ZN5Print7printlnEii>
        PM_25_zero = tempValue;
 808329c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80832a0:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 80832a2:	f006 f90d 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80832a6:	4621      	mov	r1, r4
 80832a8:	201c      	movs	r0, #28
 80832aa:	f7fd fb88 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 80832ae:	e004      	b.n	80832ba <_Z17serialGetPm25Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 80832b0:	f005 fe0a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80832b4:	4908      	ldr	r1, [pc, #32]	; (80832d8 <_Z17serialGetPm25Zerov+0xb8>)
 80832b6:	f005 f8b4 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM2.5 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80832ba:	a802      	add	r0, sp, #8
 80832bc:	f004 fecc 	bl	8088058 <_ZN6StringD1Ev>
        PM_25_zero = tempValue;
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80832c0:	b007      	add	sp, #28
 80832c2:	bd30      	pop	{r4, r5, pc}
 80832c4:	20000764 	.word	0x20000764
 80832c8:	0808ea08 	.word	0x0808ea08
 80832cc:	0808e99a 	.word	0x0808e99a
 80832d0:	0808ea1c 	.word	0x0808ea1c
 80832d4:	0808ea33 	.word	0x0808ea33
 80832d8:	0808e6c4 	.word	0x0808e6c4

080832dc <_Z18serialGetPm10Slopev>:

void serialGetPm10Slope(void){
 80832dc:	b530      	push	{r4, r5, lr}
 80832de:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80832e0:	f005 fdf2 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80832e4:	f005 f891 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 80832e8:	f005 fdee 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80832ec:	4932      	ldr	r1, [pc, #200]	; (80833b8 <_Z18serialGetPm10Slopev+0xdc>)
 80832ee:	f005 f885 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 80832f2:	f005 fde9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80832f6:	4605      	mov	r5, r0
 80832f8:	4c30      	ldr	r4, [pc, #192]	; (80833bc <_Z18serialGetPm10Slopev+0xe0>)
 80832fa:	2202      	movs	r2, #2
 80832fc:	6821      	ldr	r1, [r4, #0]
 80832fe:	a806      	add	r0, sp, #24
 8083300:	f004 ff67 	bl	80881d2 <_ZN6StringC1Efi>
 8083304:	9906      	ldr	r1, [sp, #24]
 8083306:	4628      	mov	r0, r5
 8083308:	f005 f878 	bl	80883fc <_ZN5Print5printEPKc>
 808330c:	a806      	add	r0, sp, #24
 808330e:	f004 fea3 	bl	8088058 <_ZN6StringD1Ev>
    Serial.println(" ");
 8083312:	f005 fdd9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083316:	492a      	ldr	r1, [pc, #168]	; (80833c0 <_Z18serialGetPm10Slopev+0xe4>)
 8083318:	f005 f883 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 808331c:	f005 fdd4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083320:	4928      	ldr	r1, [pc, #160]	; (80833c4 <_Z18serialGetPm10Slopev+0xe8>)
 8083322:	f005 f86b 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083326:	f005 fdcf 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808332a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808332e:	f005 f9fc 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083332:	f005 fdc9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083336:	220d      	movs	r2, #13
 8083338:	4601      	mov	r1, r0
 808333a:	a802      	add	r0, sp, #8
 808333c:	f005 f9f8 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083340:	a802      	add	r0, sp, #8
 8083342:	f005 f812 	bl	808836a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083346:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 808334a:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808334c:	f007 fa34 	bl	808a7b8 <__aeabi_fcmpge>
 8083350:	b340      	cbz	r0, 80833a4 <_Z18serialGetPm10Slopev+0xc8>
 8083352:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083356:	4628      	mov	r0, r5
 8083358:	f007 fa1a 	bl	808a790 <__aeabi_fcmplt>
 808335c:	b310      	cbz	r0, 80833a4 <_Z18serialGetPm10Slopev+0xc8>
        PM_10_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 808335e:	491a      	ldr	r1, [pc, #104]	; (80833c8 <_Z18serialGetPm10Slopev+0xec>)
 8083360:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_10_slope = tempfloat;
 8083362:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083364:	f007 f876 	bl	808a454 <__aeabi_fmul>
 8083368:	f007 fa3a 	bl	808a7e0 <__aeabi_f2iz>
 808336c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 808336e:	f005 fdab 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083372:	4916      	ldr	r1, [pc, #88]	; (80833cc <_Z18serialGetPm10Slopev+0xf0>)
 8083374:	f005 f842 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope,2));
 8083378:	f005 fda6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808337c:	4605      	mov	r5, r0
 808337e:	2202      	movs	r2, #2
 8083380:	6821      	ldr	r1, [r4, #0]
 8083382:	a806      	add	r0, sp, #24
 8083384:	f004 ff25 	bl	80881d2 <_ZN6StringC1Efi>
 8083388:	9906      	ldr	r1, [sp, #24]
 808338a:	4628      	mov	r0, r5
 808338c:	f005 f849 	bl	8088422 <_ZN5Print7printlnEPKc>
 8083390:	a806      	add	r0, sp, #24
 8083392:	f004 fe61 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8083396:	f006 f893 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808339a:	a901      	add	r1, sp, #4
 808339c:	2028      	movs	r0, #40	; 0x28
 808339e:	f7fd fb0e 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 80833a2:	e004      	b.n	80833ae <_Z18serialGetPm10Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 80833a4:	f005 fd90 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80833a8:	4909      	ldr	r1, [pc, #36]	; (80833d0 <_Z18serialGetPm10Slopev+0xf4>)
 80833aa:	f005 f83a 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 slope:");
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80833ae:	a802      	add	r0, sp, #8
 80833b0:	f004 fe52 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80833b4:	b00b      	add	sp, #44	; 0x2c
 80833b6:	bd30      	pop	{r4, r5, pc}
 80833b8:	0808ea46 	.word	0x0808ea46
 80833bc:	20000ad8 	.word	0x20000ad8
 80833c0:	0808fe88 	.word	0x0808fe88
 80833c4:	0808ea5a 	.word	0x0808ea5a
 80833c8:	42c80000 	.word	0x42c80000
 80833cc:	0808ea71 	.word	0x0808ea71
 80833d0:	0808e6c4 	.word	0x0808e6c4

080833d4 <_Z17serialGetPm10Zerov>:

void serialGetPm10Zero(void){
 80833d4:	b530      	push	{r4, r5, lr}
 80833d6:	b087      	sub	sp, #28
    Serial.println();
 80833d8:	f005 fd76 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
 80833dc:	4d26      	ldr	r5, [pc, #152]	; (8083478 <_Z17serialGetPm10Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm10Zero(void){
    Serial.println();
 80833de:	f005 f814 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 80833e2:	f005 fd71 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80833e6:	4925      	ldr	r1, [pc, #148]	; (808347c <_Z17serialGetPm10Zerov+0xa8>)
 80833e8:	f005 f808 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 80833ec:	f005 fd6c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80833f0:	220a      	movs	r2, #10
 80833f2:	6829      	ldr	r1, [r5, #0]
 80833f4:	f005 f881 	bl	80884fa <_ZN5Print5printEii>
    Serial.println(" um/m3");
 80833f8:	f005 fd66 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80833fc:	4920      	ldr	r1, [pc, #128]	; (8083480 <_Z17serialGetPm10Zerov+0xac>)
 80833fe:	f005 f810 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 8083402:	f005 fd61 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083406:	491f      	ldr	r1, [pc, #124]	; (8083484 <_Z17serialGetPm10Zerov+0xb0>)
 8083408:	f004 fff8 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808340c:	f005 fd5c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083410:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083414:	f005 f989 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083418:	f005 fd56 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808341c:	220d      	movs	r2, #13
 808341e:	4601      	mov	r1, r0
 8083420:	a802      	add	r0, sp, #8
 8083422:	f005 f985 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083426:	a802      	add	r0, sp, #8
 8083428:	f004 ff9a 	bl	8088360 <_ZNK6String5toIntEv>
 808342c:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 808342e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083432:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083436:	d215      	bcs.n	8083464 <_Z17serialGetPm10Zerov+0x90>
        Serial.print("\n\rNew PM10 zero: ");
 8083438:	f005 fd46 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808343c:	4912      	ldr	r1, [pc, #72]	; (8083488 <_Z17serialGetPm10Zerov+0xb4>)
 808343e:	f004 ffdd 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_10_zero = tempValue;
 8083442:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM10 zero: ");
        Serial.println(tempValue);
 8083444:	f005 fd40 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083448:	9901      	ldr	r1, [sp, #4]
 808344a:	220a      	movs	r2, #10
 808344c:	f005 f857 	bl	80884fe <_ZN5Print7printlnEii>
        PM_10_zero = tempValue;
 8083450:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083454:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 8083456:	f006 f833 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808345a:	4621      	mov	r1, r4
 808345c:	2024      	movs	r0, #36	; 0x24
 808345e:	f7fd faae 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8083462:	e004      	b.n	808346e <_Z17serialGetPm10Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083464:	f005 fd30 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083468:	4908      	ldr	r1, [pc, #32]	; (808348c <_Z17serialGetPm10Zerov+0xb8>)
 808346a:	f004 ffda 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
    Serial.println(" um/m3");
    Serial.print("Enter new PM10 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808346e:	a802      	add	r0, sp, #8
 8083470:	f004 fdf2 	bl	8088058 <_ZN6StringD1Ev>
        PM_10_zero = tempValue;
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083474:	b007      	add	sp, #28
 8083476:	bd30      	pop	{r4, r5, pc}
 8083478:	20000acc 	.word	0x20000acc
 808347c:	0808ea84 	.word	0x0808ea84
 8083480:	0808ea97 	.word	0x0808ea97
 8083484:	0808ea9e 	.word	0x0808ea9e
 8083488:	0808eab4 	.word	0x0808eab4
 808348c:	0808e6c4 	.word	0x0808e6c4

08083490 <_Z25serialGetTemperatureSlopev>:

void serialGetTemperatureSlope(void){
 8083490:	b530      	push	{r4, r5, lr}
 8083492:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083494:	f005 fd18 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083498:	f004 ffb7 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 808349c:	f005 fd14 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80834a0:	4932      	ldr	r1, [pc, #200]	; (808356c <_Z25serialGetTemperatureSlopev+0xdc>)
 80834a2:	f004 ffab 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 80834a6:	f005 fd0f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80834aa:	4605      	mov	r5, r0
 80834ac:	4c30      	ldr	r4, [pc, #192]	; (8083570 <_Z25serialGetTemperatureSlopev+0xe0>)
 80834ae:	2202      	movs	r2, #2
 80834b0:	6821      	ldr	r1, [r4, #0]
 80834b2:	a806      	add	r0, sp, #24
 80834b4:	f004 fe8d 	bl	80881d2 <_ZN6StringC1Efi>
 80834b8:	9906      	ldr	r1, [sp, #24]
 80834ba:	4628      	mov	r0, r5
 80834bc:	f004 ff9e 	bl	80883fc <_ZN5Print5printEPKc>
 80834c0:	a806      	add	r0, sp, #24
 80834c2:	f004 fdc9 	bl	8088058 <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 80834c6:	f005 fcff 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80834ca:	492a      	ldr	r1, [pc, #168]	; (8083574 <_Z25serialGetTemperatureSlopev+0xe4>)
 80834cc:	f004 ffa9 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 80834d0:	f005 fcfa 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80834d4:	4928      	ldr	r1, [pc, #160]	; (8083578 <_Z25serialGetTemperatureSlopev+0xe8>)
 80834d6:	f004 ff91 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80834da:	f005 fcf5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80834de:	f24c 3150 	movw	r1, #50000	; 0xc350
 80834e2:	f005 f922 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80834e6:	f005 fcef 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80834ea:	220d      	movs	r2, #13
 80834ec:	4601      	mov	r1, r0
 80834ee:	a802      	add	r0, sp, #8
 80834f0:	f005 f91e 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80834f4:	a802      	add	r0, sp, #8
 80834f6:	f004 ff38 	bl	808836a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80834fa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80834fe:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083500:	f007 f95a 	bl	808a7b8 <__aeabi_fcmpge>
 8083504:	b340      	cbz	r0, 8083558 <_Z25serialGetTemperatureSlopev+0xc8>
 8083506:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808350a:	4628      	mov	r0, r5
 808350c:	f007 f940 	bl	808a790 <__aeabi_fcmplt>
 8083510:	b310      	cbz	r0, 8083558 <_Z25serialGetTemperatureSlopev+0xc8>
        temp_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083512:	491a      	ldr	r1, [pc, #104]	; (808357c <_Z25serialGetTemperatureSlopev+0xec>)
 8083514:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        temp_slope = tempfloat;
 8083516:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083518:	f006 ff9c 	bl	808a454 <__aeabi_fmul>
 808351c:	f007 f960 	bl	808a7e0 <__aeabi_f2iz>
 8083520:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 8083522:	f005 fcd1 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083526:	4916      	ldr	r1, [pc, #88]	; (8083580 <_Z25serialGetTemperatureSlopev+0xf0>)
 8083528:	f004 ff68 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope,2));
 808352c:	f005 fccc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083530:	4605      	mov	r5, r0
 8083532:	2202      	movs	r2, #2
 8083534:	6821      	ldr	r1, [r4, #0]
 8083536:	a806      	add	r0, sp, #24
 8083538:	f004 fe4b 	bl	80881d2 <_ZN6StringC1Efi>
 808353c:	9906      	ldr	r1, [sp, #24]
 808353e:	4628      	mov	r0, r5
 8083540:	f004 ff6f 	bl	8088422 <_ZN5Print7printlnEPKc>
 8083544:	a806      	add	r0, sp, #24
 8083546:	f004 fd87 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 808354a:	f005 ffb9 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808354e:	a901      	add	r1, sp, #4
 8083550:	2030      	movs	r0, #48	; 0x30
 8083552:	f7fd fa34 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8083556:	e004      	b.n	8083562 <_Z25serialGetTemperatureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083558:	f005 fcb6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808355c:	4909      	ldr	r1, [pc, #36]	; (8083584 <_Z25serialGetTemperatureSlopev+0xf4>)
 808355e:	f004 ff60 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature slope:");
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083562:	a802      	add	r0, sp, #8
 8083564:	f004 fd78 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083568:	b00b      	add	sp, #44	; 0x2c
 808356a:	bd30      	pop	{r4, r5, pc}
 808356c:	0808eac6 	.word	0x0808eac6
 8083570:	200007b0 	.word	0x200007b0
 8083574:	0808eae1 	.word	0x0808eae1
 8083578:	0808eaec 	.word	0x0808eaec
 808357c:	42c80000 	.word	0x42c80000
 8083580:	0808eb0a 	.word	0x0808eb0a
 8083584:	0808e6c4 	.word	0x0808e6c4

08083588 <_Z24serialGetTemperatureZerov>:

void serialGetTemperatureZero(void){
 8083588:	b530      	push	{r4, r5, lr}
 808358a:	b087      	sub	sp, #28
    Serial.println();
 808358c:	f005 fc9c 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
 8083590:	4d25      	ldr	r5, [pc, #148]	; (8083628 <_Z24serialGetTemperatureZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetTemperatureZero(void){
    Serial.println();
 8083592:	f004 ff3a 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 8083596:	f005 fc97 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808359a:	4924      	ldr	r1, [pc, #144]	; (808362c <_Z24serialGetTemperatureZerov+0xa4>)
 808359c:	f004 ff2e 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 80835a0:	f005 fc92 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80835a4:	220a      	movs	r2, #10
 80835a6:	6829      	ldr	r1, [r5, #0]
 80835a8:	f004 ffa7 	bl	80884fa <_ZN5Print5printEii>
    Serial.println(" Degrees C");
 80835ac:	f005 fc8c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80835b0:	491f      	ldr	r1, [pc, #124]	; (8083630 <_Z24serialGetTemperatureZerov+0xa8>)
 80835b2:	f004 ff36 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 80835b6:	f005 fc87 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80835ba:	491e      	ldr	r1, [pc, #120]	; (8083634 <_Z24serialGetTemperatureZerov+0xac>)
 80835bc:	f004 ff1e 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80835c0:	f005 fc82 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80835c4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80835c8:	f005 f8af 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80835cc:	f005 fc7c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80835d0:	220d      	movs	r2, #13
 80835d2:	4601      	mov	r1, r0
 80835d4:	a802      	add	r0, sp, #8
 80835d6:	f005 f8ab 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80835da:	a802      	add	r0, sp, #8
 80835dc:	f004 fec0 	bl	8088360 <_ZNK6String5toIntEv>
 80835e0:	9001      	str	r0, [sp, #4]

    if(tempValue >= -30 && tempValue < 30){
 80835e2:	301e      	adds	r0, #30
 80835e4:	283b      	cmp	r0, #59	; 0x3b
 80835e6:	d815      	bhi.n	8083614 <_Z24serialGetTemperatureZerov+0x8c>
        Serial.print("\n\rNew Temperature zero: ");
 80835e8:	f005 fc6e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80835ec:	4912      	ldr	r1, [pc, #72]	; (8083638 <_Z24serialGetTemperatureZerov+0xb0>)
 80835ee:	f004 ff05 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        temp_zero = tempValue;
 80835f2:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -30 && tempValue < 30){
        Serial.print("\n\rNew Temperature zero: ");
        Serial.println(tempValue);
 80835f4:	f005 fc68 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80835f8:	9901      	ldr	r1, [sp, #4]
 80835fa:	220a      	movs	r2, #10
 80835fc:	f004 ff7f 	bl	80884fe <_ZN5Print7printlnEii>
        temp_zero = tempValue;
 8083600:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083604:	602b      	str	r3, [r5, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 8083606:	f005 ff5b 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808360a:	4621      	mov	r1, r4
 808360c:	202c      	movs	r0, #44	; 0x2c
 808360e:	f7fd f9d6 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8083612:	e004      	b.n	808361e <_Z24serialGetTemperatureZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 8083614:	f005 fc58 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083618:	4908      	ldr	r1, [pc, #32]	; (808363c <_Z24serialGetTemperatureZerov+0xb4>)
 808361a:	f004 ff02 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808361e:	a802      	add	r0, sp, #8
 8083620:	f004 fd1a 	bl	8088058 <_ZN6StringD1Ev>
        temp_zero = tempValue;
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083624:	b007      	add	sp, #28
 8083626:	bd30      	pop	{r4, r5, pc}
 8083628:	20000aa0 	.word	0x20000aa0
 808362c:	0808eb24 	.word	0x0808eb24
 8083630:	0808eae1 	.word	0x0808eae1
 8083634:	0808eb3e 	.word	0x0808eb3e
 8083638:	0808eb5b 	.word	0x0808eb5b
 808363c:	0808e6c4 	.word	0x0808e6c4

08083640 <_Z22serialGetPressureSlopev>:

void serialGetPressureSlope(void){
 8083640:	b530      	push	{r4, r5, lr}
 8083642:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083644:	f005 fc40 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083648:	f004 fedf 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 808364c:	f005 fc3c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083650:	4932      	ldr	r1, [pc, #200]	; (808371c <_Z22serialGetPressureSlopev+0xdc>)
 8083652:	f004 fed3 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 8083656:	f005 fc37 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808365a:	4605      	mov	r5, r0
 808365c:	4c30      	ldr	r4, [pc, #192]	; (8083720 <_Z22serialGetPressureSlopev+0xe0>)
 808365e:	2202      	movs	r2, #2
 8083660:	6821      	ldr	r1, [r4, #0]
 8083662:	a806      	add	r0, sp, #24
 8083664:	f004 fdb5 	bl	80881d2 <_ZN6StringC1Efi>
 8083668:	9906      	ldr	r1, [sp, #24]
 808366a:	4628      	mov	r0, r5
 808366c:	f004 fec6 	bl	80883fc <_ZN5Print5printEPKc>
 8083670:	a806      	add	r0, sp, #24
 8083672:	f004 fcf1 	bl	8088058 <_ZN6StringD1Ev>
    Serial.println(" torr");
 8083676:	f005 fc27 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808367a:	492a      	ldr	r1, [pc, #168]	; (8083724 <_Z22serialGetPressureSlopev+0xe4>)
 808367c:	f004 fed1 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 8083680:	f005 fc22 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083684:	4928      	ldr	r1, [pc, #160]	; (8083728 <_Z22serialGetPressureSlopev+0xe8>)
 8083686:	f004 feb9 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808368a:	f005 fc1d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808368e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083692:	f005 f84a 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083696:	f005 fc17 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808369a:	220d      	movs	r2, #13
 808369c:	4601      	mov	r1, r0
 808369e:	a802      	add	r0, sp, #8
 80836a0:	f005 f846 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80836a4:	a802      	add	r0, sp, #8
 80836a6:	f004 fe60 	bl	808836a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80836aa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80836ae:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80836b0:	f007 f882 	bl	808a7b8 <__aeabi_fcmpge>
 80836b4:	b340      	cbz	r0, 8083708 <_Z22serialGetPressureSlopev+0xc8>
 80836b6:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80836ba:	4628      	mov	r0, r5
 80836bc:	f007 f868 	bl	808a790 <__aeabi_fcmplt>
 80836c0:	b310      	cbz	r0, 8083708 <_Z22serialGetPressureSlopev+0xc8>
        pressure_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80836c2:	491a      	ldr	r1, [pc, #104]	; (808372c <_Z22serialGetPressureSlopev+0xec>)
 80836c4:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        pressure_slope = tempfloat;
 80836c6:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80836c8:	f006 fec4 	bl	808a454 <__aeabi_fmul>
 80836cc:	f007 f888 	bl	808a7e0 <__aeabi_f2iz>
 80836d0:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 80836d2:	f005 fbf9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80836d6:	4916      	ldr	r1, [pc, #88]	; (8083730 <_Z22serialGetPressureSlopev+0xf0>)
 80836d8:	f004 fe90 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope,2));
 80836dc:	f005 fbf4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80836e0:	4605      	mov	r5, r0
 80836e2:	2202      	movs	r2, #2
 80836e4:	6821      	ldr	r1, [r4, #0]
 80836e6:	a806      	add	r0, sp, #24
 80836e8:	f004 fd73 	bl	80881d2 <_ZN6StringC1Efi>
 80836ec:	9906      	ldr	r1, [sp, #24]
 80836ee:	4628      	mov	r0, r5
 80836f0:	f004 fe97 	bl	8088422 <_ZN5Print7printlnEPKc>
 80836f4:	a806      	add	r0, sp, #24
 80836f6:	f004 fcaf 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 80836fa:	f005 fee1 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80836fe:	a901      	add	r1, sp, #4
 8083700:	2038      	movs	r0, #56	; 0x38
 8083702:	f7fd f95c 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8083706:	e004      	b.n	8083712 <_Z22serialGetPressureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083708:	f005 fbde 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808370c:	4909      	ldr	r1, [pc, #36]	; (8083734 <_Z22serialGetPressureSlopev+0xf4>)
 808370e:	f004 fe88 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure slope:");
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083712:	a802      	add	r0, sp, #8
 8083714:	f004 fca0 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083718:	b00b      	add	sp, #44	; 0x2c
 808371a:	bd30      	pop	{r4, r5, pc}
 808371c:	0808eb74 	.word	0x0808eb74
 8083720:	200001ec 	.word	0x200001ec
 8083724:	0808eb8c 	.word	0x0808eb8c
 8083728:	0808eb92 	.word	0x0808eb92
 808372c:	42c80000 	.word	0x42c80000
 8083730:	0808ebad 	.word	0x0808ebad
 8083734:	0808e6c4 	.word	0x0808e6c4

08083738 <_Z21serialGetPressureZerov>:

void serialGetPressureZero(void){
 8083738:	b530      	push	{r4, r5, lr}
 808373a:	b087      	sub	sp, #28
    Serial.println();
 808373c:	f005 fbc4 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
 8083740:	4d26      	ldr	r5, [pc, #152]	; (80837dc <_Z21serialGetPressureZerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureZero(void){
    Serial.println();
 8083742:	f004 fe62 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 8083746:	f005 fbbf 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808374a:	4925      	ldr	r1, [pc, #148]	; (80837e0 <_Z21serialGetPressureZerov+0xa8>)
 808374c:	f004 fe56 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8083750:	f005 fbba 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083754:	220a      	movs	r2, #10
 8083756:	6829      	ldr	r1, [r5, #0]
 8083758:	f004 fecf 	bl	80884fa <_ZN5Print5printEii>
    Serial.println(" ppm");
 808375c:	f005 fbb4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083760:	4920      	ldr	r1, [pc, #128]	; (80837e4 <_Z21serialGetPressureZerov+0xac>)
 8083762:	f004 fe5e 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 8083766:	f005 fbaf 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808376a:	491f      	ldr	r1, [pc, #124]	; (80837e8 <_Z21serialGetPressureZerov+0xb0>)
 808376c:	f004 fe46 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083770:	f005 fbaa 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083774:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083778:	f004 ffd7 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808377c:	f005 fba4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083780:	220d      	movs	r2, #13
 8083782:	4601      	mov	r1, r0
 8083784:	a802      	add	r0, sp, #8
 8083786:	f004 ffd3 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808378a:	a802      	add	r0, sp, #8
 808378c:	f004 fde8 	bl	8088360 <_ZNK6String5toIntEv>
 8083790:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083792:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083796:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808379a:	d215      	bcs.n	80837c8 <_Z21serialGetPressureZerov+0x90>
        Serial.print("\n\rNew Pressure zero: ");
 808379c:	f005 fb94 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80837a0:	4912      	ldr	r1, [pc, #72]	; (80837ec <_Z21serialGetPressureZerov+0xb4>)
 80837a2:	f004 fe2b 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        pressure_zero = tempValue;
 80837a6:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew Pressure zero: ");
        Serial.println(tempValue);
 80837a8:	f005 fb8e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80837ac:	9901      	ldr	r1, [sp, #4]
 80837ae:	220a      	movs	r2, #10
 80837b0:	f004 fea5 	bl	80884fe <_ZN5Print7printlnEii>
        pressure_zero = tempValue;
 80837b4:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80837b8:	602b      	str	r3, [r5, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 80837ba:	f005 fe81 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80837be:	4621      	mov	r1, r4
 80837c0:	2034      	movs	r0, #52	; 0x34
 80837c2:	f7fd f8fc 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 80837c6:	e004      	b.n	80837d2 <_Z21serialGetPressureZerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 80837c8:	f005 fb7e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80837cc:	4908      	ldr	r1, [pc, #32]	; (80837f0 <_Z21serialGetPressureZerov+0xb8>)
 80837ce:	f004 fe28 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
    Serial.println(" ppm");
    Serial.print("Enter new Pressure Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80837d2:	a802      	add	r0, sp, #8
 80837d4:	f004 fc40 	bl	8088058 <_ZN6StringD1Ev>
        pressure_zero = tempValue;
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80837d8:	b007      	add	sp, #28
 80837da:	bd30      	pop	{r4, r5, pc}
 80837dc:	20000978 	.word	0x20000978
 80837e0:	0808ebc4 	.word	0x0808ebc4
 80837e4:	0808e873 	.word	0x0808e873
 80837e8:	0808ebdb 	.word	0x0808ebdb
 80837ec:	0808ebf5 	.word	0x0808ebf5
 80837f0:	0808e6c4 	.word	0x0808e6c4

080837f4 <_Z22serialGetHumiditySlopev>:

void serialGetHumiditySlope(void){
 80837f4:	b530      	push	{r4, r5, lr}
 80837f6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80837f8:	f005 fb66 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80837fc:	f004 fe05 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 8083800:	f005 fb62 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083804:	4932      	ldr	r1, [pc, #200]	; (80838d0 <_Z22serialGetHumiditySlopev+0xdc>)
 8083806:	f004 fdf9 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 808380a:	f005 fb5d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808380e:	4605      	mov	r5, r0
 8083810:	4c30      	ldr	r4, [pc, #192]	; (80838d4 <_Z22serialGetHumiditySlopev+0xe0>)
 8083812:	2202      	movs	r2, #2
 8083814:	6821      	ldr	r1, [r4, #0]
 8083816:	a806      	add	r0, sp, #24
 8083818:	f004 fcdb 	bl	80881d2 <_ZN6StringC1Efi>
 808381c:	9906      	ldr	r1, [sp, #24]
 808381e:	4628      	mov	r0, r5
 8083820:	f004 fdec 	bl	80883fc <_ZN5Print5printEPKc>
 8083824:	a806      	add	r0, sp, #24
 8083826:	f004 fc17 	bl	8088058 <_ZN6StringD1Ev>
    Serial.println(" %");
 808382a:	f005 fb4d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808382e:	492a      	ldr	r1, [pc, #168]	; (80838d8 <_Z22serialGetHumiditySlopev+0xe4>)
 8083830:	f004 fdf7 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 8083834:	f005 fb48 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083838:	4928      	ldr	r1, [pc, #160]	; (80838dc <_Z22serialGetHumiditySlopev+0xe8>)
 808383a:	f004 fddf 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808383e:	f005 fb43 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083842:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083846:	f004 ff70 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808384a:	f005 fb3d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808384e:	220d      	movs	r2, #13
 8083850:	4601      	mov	r1, r0
 8083852:	a802      	add	r0, sp, #8
 8083854:	f004 ff6c 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083858:	a802      	add	r0, sp, #8
 808385a:	f004 fd86 	bl	808836a <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 808385e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083862:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083864:	f006 ffa8 	bl	808a7b8 <__aeabi_fcmpge>
 8083868:	b338      	cbz	r0, 80838ba <_Z22serialGetHumiditySlopev+0xc6>
 808386a:	491d      	ldr	r1, [pc, #116]	; (80838e0 <_Z22serialGetHumiditySlopev+0xec>)
 808386c:	4628      	mov	r0, r5
 808386e:	f006 ff8f 	bl	808a790 <__aeabi_fcmplt>
 8083872:	b310      	cbz	r0, 80838ba <_Z22serialGetHumiditySlopev+0xc6>
        rh_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083874:	491b      	ldr	r1, [pc, #108]	; (80838e4 <_Z22serialGetHumiditySlopev+0xf0>)
 8083876:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
        rh_slope = tempfloat;
 8083878:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808387a:	f006 fdeb 	bl	808a454 <__aeabi_fmul>
 808387e:	f006 ffaf 	bl	808a7e0 <__aeabi_f2iz>
 8083882:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 8083884:	f005 fb20 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083888:	4917      	ldr	r1, [pc, #92]	; (80838e8 <_Z22serialGetHumiditySlopev+0xf4>)
 808388a:	f004 fdb7 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope,2));
 808388e:	f005 fb1b 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083892:	4605      	mov	r5, r0
 8083894:	2202      	movs	r2, #2
 8083896:	6821      	ldr	r1, [r4, #0]
 8083898:	a806      	add	r0, sp, #24
 808389a:	f004 fc9a 	bl	80881d2 <_ZN6StringC1Efi>
 808389e:	9906      	ldr	r1, [sp, #24]
 80838a0:	4628      	mov	r0, r5
 80838a2:	f004 fdbe 	bl	8088422 <_ZN5Print7printlnEPKc>
 80838a6:	a806      	add	r0, sp, #24
 80838a8:	f004 fbd6 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 80838ac:	f005 fe08 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80838b0:	a901      	add	r1, sp, #4
 80838b2:	2040      	movs	r0, #64	; 0x40
 80838b4:	f7fd f883 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 80838b8:	e004      	b.n	80838c4 <_Z22serialGetHumiditySlopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 80838ba:	f005 fb05 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80838be:	490b      	ldr	r1, [pc, #44]	; (80838ec <_Z22serialGetHumiditySlopev+0xf8>)
 80838c0:	f004 fdaf 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current RH slope:");
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80838c4:	a802      	add	r0, sp, #8
 80838c6:	f004 fbc7 	bl	8088058 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80838ca:	b00b      	add	sp, #44	; 0x2c
 80838cc:	bd30      	pop	{r4, r5, pc}
 80838ce:	bf00      	nop
 80838d0:	0808ec0b 	.word	0x0808ec0b
 80838d4:	200006d8 	.word	0x200006d8
 80838d8:	0808ec1d 	.word	0x0808ec1d
 80838dc:	0808ec20 	.word	0x0808ec20
 80838e0:	41200000 	.word	0x41200000
 80838e4:	42c80000 	.word	0x42c80000
 80838e8:	0808ec35 	.word	0x0808ec35
 80838ec:	0808e6c4 	.word	0x0808e6c4

080838f0 <_Z21serialGetHumidityZerov>:

void serialGetHumidityZero(void){
 80838f0:	b530      	push	{r4, r5, lr}
 80838f2:	b087      	sub	sp, #28
    Serial.println();
 80838f4:	f005 fae8 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
 80838f8:	4d25      	ldr	r5, [pc, #148]	; (8083990 <_Z21serialGetHumidityZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumidityZero(void){
    Serial.println();
 80838fa:	f004 fd86 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 80838fe:	f005 fae3 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083902:	4924      	ldr	r1, [pc, #144]	; (8083994 <_Z21serialGetHumidityZerov+0xa4>)
 8083904:	f004 fd7a 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 8083908:	f005 fade 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808390c:	220a      	movs	r2, #10
 808390e:	6829      	ldr	r1, [r5, #0]
 8083910:	f004 fdf3 	bl	80884fa <_ZN5Print5printEii>
    Serial.println(" %");
 8083914:	f005 fad8 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083918:	491f      	ldr	r1, [pc, #124]	; (8083998 <_Z21serialGetHumidityZerov+0xa8>)
 808391a:	f004 fd82 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 808391e:	f005 fad3 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083922:	491e      	ldr	r1, [pc, #120]	; (808399c <_Z21serialGetHumidityZerov+0xac>)
 8083924:	f004 fd6a 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083928:	f005 face 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808392c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083930:	f004 fefb 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083934:	f005 fac8 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083938:	220d      	movs	r2, #13
 808393a:	4601      	mov	r1, r0
 808393c:	a802      	add	r0, sp, #8
 808393e:	f004 fef7 	bl	8088730 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083942:	a802      	add	r0, sp, #8
 8083944:	f004 fd0c 	bl	8088360 <_ZNK6String5toIntEv>
 8083948:	9001      	str	r0, [sp, #4]

    if(tempValue >= -50 && tempValue < 50){
 808394a:	3032      	adds	r0, #50	; 0x32
 808394c:	2863      	cmp	r0, #99	; 0x63
 808394e:	d815      	bhi.n	808397c <_Z21serialGetHumidityZerov+0x8c>
        Serial.print("\n\rNew RH zero: ");
 8083950:	f005 faba 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083954:	4912      	ldr	r1, [pc, #72]	; (80839a0 <_Z21serialGetHumidityZerov+0xb0>)
 8083956:	f004 fd51 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        rh_zero = tempValue;
 808395a:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -50 && tempValue < 50){
        Serial.print("\n\rNew RH zero: ");
        Serial.println(tempValue);
 808395c:	f005 fab4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083960:	9901      	ldr	r1, [sp, #4]
 8083962:	220a      	movs	r2, #10
 8083964:	f004 fdcb 	bl	80884fe <_ZN5Print7printlnEii>
        rh_zero = tempValue;
 8083968:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 808396c:	602b      	str	r3, [r5, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 808396e:	f005 fda7 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8083972:	4621      	mov	r1, r4
 8083974:	203c      	movs	r0, #60	; 0x3c
 8083976:	f7fd f822 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 808397a:	e004      	b.n	8083986 <_Z21serialGetHumidityZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 808397c:	f005 faa4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083980:	4908      	ldr	r1, [pc, #32]	; (80839a4 <_Z21serialGetHumidityZerov+0xb4>)
 8083982:	f004 fd4e 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
    Serial.println(" %");
    Serial.print("Enter new RH Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083986:	a802      	add	r0, sp, #8
 8083988:	f004 fb66 	bl	8088058 <_ZN6StringD1Ev>
        rh_zero = tempValue;
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808398c:	b007      	add	sp, #28
 808398e:	bd30      	pop	{r4, r5, pc}
 8083990:	2000075c 	.word	0x2000075c
 8083994:	0808ec46 	.word	0x0808ec46
 8083998:	0808ec1d 	.word	0x0808ec1d
 808399c:	0808ec57 	.word	0x0808ec57
 80839a0:	0808ec6b 	.word	0x0808ec6b
 80839a4:	0808e6c4 	.word	0x0808e6c4

080839a8 <_Z19serialGetLowerLimitv>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
 80839a8:	b530      	push	{r4, r5, lr}
 80839aa:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 80839ac:	f005 fa8c 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
 80839b0:	4c35      	ldr	r4, [pc, #212]	; (8083a88 <_Z19serialGetLowerLimitv+0xe0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
    Serial.println();
 80839b2:	f004 fd2a 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 80839b6:	f005 fa87 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80839ba:	4934      	ldr	r1, [pc, #208]	; (8083a8c <_Z19serialGetLowerLimitv+0xe4>)
 80839bc:	f004 fd1e 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 80839c0:	f005 fa82 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80839c4:	220a      	movs	r2, #10
 80839c6:	6821      	ldr	r1, [r4, #0]
 80839c8:	f004 fd99 	bl	80884fe <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the lower limit");
 80839cc:	f005 fa7c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80839d0:	492f      	ldr	r1, [pc, #188]	; (8083a90 <_Z19serialGetLowerLimitv+0xe8>)
 80839d2:	f004 fd26 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80839d6:	f005 fa77 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80839da:	f24c 3150 	movw	r1, #50000	; 0xc350
 80839de:	f004 fea4 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80839e2:	f005 fa71 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80839e6:	220d      	movs	r2, #13
 80839e8:	4601      	mov	r1, r0
 80839ea:	4668      	mov	r0, sp
 80839ec:	f004 fea0 	bl	8088730 <_ZN6Stream15readStringUntilEc>
 80839f0:	4928      	ldr	r1, [pc, #160]	; (8083a94 <_Z19serialGetLowerLimitv+0xec>)
 80839f2:	4668      	mov	r0, sp
 80839f4:	f004 fc6f 	bl	80882d6 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 80839f8:	2800      	cmp	r0, #0
 80839fa:	d03a      	beq.n	8083a72 <_Z19serialGetLowerLimitv+0xca>
        Serial.println("Password correct!");
 80839fc:	f005 fa64 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083a00:	4925      	ldr	r1, [pc, #148]	; (8083a98 <_Z19serialGetLowerLimitv+0xf0>)
 8083a02:	f004 fd0e 	bl	8088422 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 8083a06:	f005 fa5f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083a0a:	4924      	ldr	r1, [pc, #144]	; (8083a9c <_Z19serialGetLowerLimitv+0xf4>)
 8083a0c:	f004 fd09 	bl	8088422 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8083a10:	f005 fa5a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083a14:	220d      	movs	r2, #13
 8083a16:	4601      	mov	r1, r0
 8083a18:	a804      	add	r0, sp, #16
 8083a1a:	f004 fe89 	bl	8088730 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8083a1e:	a804      	add	r0, sp, #16
 8083a20:	f004 fc9e 	bl	8088360 <_ZNK6String5toIntEv>
 8083a24:	4605      	mov	r5, r0
        Serial.println("");
 8083a26:	f005 fa4f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083a2a:	491d      	ldr	r1, [pc, #116]	; (8083aa0 <_Z19serialGetLowerLimitv+0xf8>)
 8083a2c:	f004 fcf9 	bl	8088422 <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 20000){
 8083a30:	f644 631e 	movw	r3, #19998	; 0x4e1e
 8083a34:	1e6a      	subs	r2, r5, #1
 8083a36:	429a      	cmp	r2, r3
 8083a38:	d812      	bhi.n	8083a60 <_Z19serialGetLowerLimitv+0xb8>
            Serial.print("\n\rNew lower limit:");
 8083a3a:	f005 fa45 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083a3e:	4919      	ldr	r1, [pc, #100]	; (8083aa4 <_Z19serialGetLowerLimitv+0xfc>)
 8083a40:	f004 fcdc 	bl	80883fc <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8083a44:	f005 fa40 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083a48:	4629      	mov	r1, r5
 8083a4a:	220a      	movs	r2, #10
 8083a4c:	f004 fd57 	bl	80884fe <_ZN5Print7printlnEii>
            gas_lower_limit = tempValue;
 8083a50:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8083a52:	f005 fd35 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8083a56:	4621      	mov	r1, r4
 8083a58:	204c      	movs	r0, #76	; 0x4c
 8083a5a:	f7fc ffb0 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8083a5e:	e004      	b.n	8083a6a <_Z19serialGetLowerLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8083a60:	f005 fa32 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083a64:	4910      	ldr	r1, [pc, #64]	; (8083aa8 <_Z19serialGetLowerLimitv+0x100>)
 8083a66:	f004 fcdc 	bl	8088422 <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new lower limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 8083a6a:	a804      	add	r0, sp, #16
 8083a6c:	f004 faf4 	bl	8088058 <_ZN6StringD1Ev>
 8083a70:	e004      	b.n	8083a7c <_Z19serialGetLowerLimitv+0xd4>
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8083a72:	f005 fa29 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083a76:	490d      	ldr	r1, [pc, #52]	; (8083aac <_Z19serialGetLowerLimitv+0x104>)
 8083a78:	f004 fcd3 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
    Serial.println("Please enter password in order to change the lower limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083a7c:	4668      	mov	r0, sp
 8083a7e:	f004 faeb 	bl	8088058 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8083a82:	b009      	add	sp, #36	; 0x24
 8083a84:	bd30      	pop	{r4, r5, pc}
 8083a86:	bf00      	nop
 8083a88:	20000090 	.word	0x20000090
 8083a8c:	0808ecc3 	.word	0x0808ecc3
 8083a90:	0808ecd8 	.word	0x0808ecd8
 8083a94:	0808e51a 	.word	0x0808e51a
 8083a98:	0808e520 	.word	0x0808e520
 8083a9c:	0808ed11 	.word	0x0808ed11
 8083aa0:	08090584 	.word	0x08090584
 8083aa4:	0808ed2a 	.word	0x0808ed2a
 8083aa8:	0808e6c4 	.word	0x0808e6c4
 8083aac:	0808e645 	.word	0x0808e645

08083ab0 <_Z19serialGetUpperLimitv>:
void serialGetUpperLimit(void){
 8083ab0:	b530      	push	{r4, r5, lr}
 8083ab2:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8083ab4:	f005 fa08 	bl	8088ec8 <_Z16_fetch_usbserialv>
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
 8083ab8:	4c35      	ldr	r4, [pc, #212]	; (8083b90 <_Z19serialGetUpperLimitv+0xe0>)
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
void serialGetUpperLimit(void){
    Serial.println();
 8083aba:	f004 fca6 	bl	808840a <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 8083abe:	f005 fa03 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083ac2:	4934      	ldr	r1, [pc, #208]	; (8083b94 <_Z19serialGetUpperLimitv+0xe4>)
 8083ac4:	f004 fc9a 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 8083ac8:	f005 f9fe 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083acc:	220a      	movs	r2, #10
 8083ace:	6821      	ldr	r1, [r4, #0]
 8083ad0:	f004 fd15 	bl	80884fe <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the upper limit");
 8083ad4:	f005 f9f8 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083ad8:	492f      	ldr	r1, [pc, #188]	; (8083b98 <_Z19serialGetUpperLimitv+0xe8>)
 8083ada:	f004 fca2 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083ade:	f005 f9f3 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083ae2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083ae6:	f004 fe20 	bl	808872a <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083aea:	f005 f9ed 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083aee:	220d      	movs	r2, #13
 8083af0:	4601      	mov	r1, r0
 8083af2:	4668      	mov	r0, sp
 8083af4:	f004 fe1c 	bl	8088730 <_ZN6Stream15readStringUntilEc>
 8083af8:	4928      	ldr	r1, [pc, #160]	; (8083b9c <_Z19serialGetUpperLimitv+0xec>)
 8083afa:	4668      	mov	r0, sp
 8083afc:	f004 fbeb 	bl	80882d6 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8083b00:	2800      	cmp	r0, #0
 8083b02:	d03a      	beq.n	8083b7a <_Z19serialGetUpperLimitv+0xca>
        Serial.println("Password correct!");
 8083b04:	f005 f9e0 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083b08:	4925      	ldr	r1, [pc, #148]	; (8083ba0 <_Z19serialGetUpperLimitv+0xf0>)
 8083b0a:	f004 fc8a 	bl	8088422 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 8083b0e:	f005 f9db 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083b12:	4924      	ldr	r1, [pc, #144]	; (8083ba4 <_Z19serialGetUpperLimitv+0xf4>)
 8083b14:	f004 fc85 	bl	8088422 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8083b18:	f005 f9d6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083b1c:	220d      	movs	r2, #13
 8083b1e:	4601      	mov	r1, r0
 8083b20:	a804      	add	r0, sp, #16
 8083b22:	f004 fe05 	bl	8088730 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8083b26:	a804      	add	r0, sp, #16
 8083b28:	f004 fc1a 	bl	8088360 <_ZNK6String5toIntEv>
 8083b2c:	4605      	mov	r5, r0
        Serial.println("");
 8083b2e:	f005 f9cb 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083b32:	491d      	ldr	r1, [pc, #116]	; (8083ba8 <_Z19serialGetUpperLimitv+0xf8>)
 8083b34:	f004 fc75 	bl	8088422 <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 50000){
 8083b38:	f24c 334e 	movw	r3, #49998	; 0xc34e
 8083b3c:	1e6a      	subs	r2, r5, #1
 8083b3e:	429a      	cmp	r2, r3
 8083b40:	d812      	bhi.n	8083b68 <_Z19serialGetUpperLimitv+0xb8>
            Serial.print("\n\rNew upper limit:");
 8083b42:	f005 f9c1 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083b46:	4919      	ldr	r1, [pc, #100]	; (8083bac <_Z19serialGetUpperLimitv+0xfc>)
 8083b48:	f004 fc58 	bl	80883fc <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8083b4c:	f005 f9bc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083b50:	4629      	mov	r1, r5
 8083b52:	220a      	movs	r2, #10
 8083b54:	f004 fcd3 	bl	80884fe <_ZN5Print7printlnEii>
            gas_upper_limit = tempValue;
 8083b58:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8083b5a:	f005 fcb1 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8083b5e:	4621      	mov	r1, r4
 8083b60:	2050      	movs	r0, #80	; 0x50
 8083b62:	f7fc ff2c 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8083b66:	e004      	b.n	8083b72 <_Z19serialGetUpperLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8083b68:	f005 f9ae 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083b6c:	4910      	ldr	r1, [pc, #64]	; (8083bb0 <_Z19serialGetUpperLimitv+0x100>)
 8083b6e:	f004 fc58 	bl	8088422 <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new upper limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 8083b72:	a804      	add	r0, sp, #16
 8083b74:	f004 fa70 	bl	8088058 <_ZN6StringD1Ev>
 8083b78:	e004      	b.n	8083b84 <_Z19serialGetUpperLimitv+0xd4>
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8083b7a:	f005 f9a5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083b7e:	490d      	ldr	r1, [pc, #52]	; (8083bb4 <_Z19serialGetUpperLimitv+0x104>)
 8083b80:	f004 fc4f 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
    Serial.println("Please enter password in order to change the upper limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083b84:	4668      	mov	r0, sp
 8083b86:	f004 fa67 	bl	8088058 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8083b8a:	b009      	add	sp, #36	; 0x24
 8083b8c:	bd30      	pop	{r4, r5, pc}
 8083b8e:	bf00      	nop
 8083b90:	2000008c 	.word	0x2000008c
 8083b94:	0808ed3d 	.word	0x0808ed3d
 8083b98:	0808ed52 	.word	0x0808ed52
 8083b9c:	0808e51a 	.word	0x0808e51a
 8083ba0:	0808e520 	.word	0x0808e520
 8083ba4:	0808ed8b 	.word	0x0808ed8b
 8083ba8:	08090584 	.word	0x08090584
 8083bac:	0808eda4 	.word	0x0808eda4
 8083bb0:	0808e6c4 	.word	0x0808e6c4
 8083bb4:	0808e645 	.word	0x0808e645

08083bb8 <_Z23outputSerialMenuOptionsv>:
    while(!Serial.available()){
        CO_float_A = readCO_A();
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
    }
}
void outputSerialMenuOptions(void){
 8083bb8:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 8083bba:	f005 f985 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083bbe:	49a2      	ldr	r1, [pc, #648]	; (8083e48 <_Z23outputSerialMenuOptionsv+0x290>)
 8083bc0:	f004 fc2f 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 8083bc4:	f005 f980 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083bc8:	49a0      	ldr	r1, [pc, #640]	; (8083e4c <_Z23outputSerialMenuOptionsv+0x294>)
 8083bca:	f004 fc2a 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 8083bce:	f005 f97b 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083bd2:	499f      	ldr	r1, [pc, #636]	; (8083e50 <_Z23outputSerialMenuOptionsv+0x298>)
 8083bd4:	f004 fc25 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 8083bd8:	f005 f976 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083bdc:	499d      	ldr	r1, [pc, #628]	; (8083e54 <_Z23outputSerialMenuOptionsv+0x29c>)
 8083bde:	f004 fc20 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 8083be2:	f005 f971 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083be6:	499c      	ldr	r1, [pc, #624]	; (8083e58 <_Z23outputSerialMenuOptionsv+0x2a0>)
 8083be8:	f004 fc1b 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 8083bec:	f005 f96c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083bf0:	499a      	ldr	r1, [pc, #616]	; (8083e5c <_Z23outputSerialMenuOptionsv+0x2a4>)
 8083bf2:	f004 fc16 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 8083bf6:	f005 f967 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083bfa:	4999      	ldr	r1, [pc, #612]	; (8083e60 <_Z23outputSerialMenuOptionsv+0x2a8>)
 8083bfc:	f004 fc11 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 8083c00:	f005 f962 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c04:	4997      	ldr	r1, [pc, #604]	; (8083e64 <_Z23outputSerialMenuOptionsv+0x2ac>)
 8083c06:	f004 fc0c 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 8083c0a:	f005 f95d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c0e:	4996      	ldr	r1, [pc, #600]	; (8083e68 <_Z23outputSerialMenuOptionsv+0x2b0>)
 8083c10:	f004 fc07 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8083c14:	f005 f958 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c18:	4994      	ldr	r1, [pc, #592]	; (8083e6c <_Z23outputSerialMenuOptionsv+0x2b4>)
 8083c1a:	f004 fc02 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 8083c1e:	f005 f953 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c22:	4993      	ldr	r1, [pc, #588]	; (8083e70 <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083c24:	f004 fbfd 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 8083c28:	f005 f94e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c2c:	4991      	ldr	r1, [pc, #580]	; (8083e74 <_Z23outputSerialMenuOptionsv+0x2bc>)
 8083c2e:	f004 fbf8 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 8083c32:	f005 f949 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c36:	4990      	ldr	r1, [pc, #576]	; (8083e78 <_Z23outputSerialMenuOptionsv+0x2c0>)
 8083c38:	f004 fbf3 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8083c3c:	f005 f944 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c40:	498e      	ldr	r1, [pc, #568]	; (8083e7c <_Z23outputSerialMenuOptionsv+0x2c4>)
 8083c42:	f004 fbee 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 8083c46:	f005 f93f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c4a:	498d      	ldr	r1, [pc, #564]	; (8083e80 <_Z23outputSerialMenuOptionsv+0x2c8>)
 8083c4c:	f004 fbe9 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 8083c50:	f005 f93a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c54:	498b      	ldr	r1, [pc, #556]	; (8083e84 <_Z23outputSerialMenuOptionsv+0x2cc>)
 8083c56:	f004 fbe4 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 8083c5a:	f005 f935 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c5e:	498a      	ldr	r1, [pc, #552]	; (8083e88 <_Z23outputSerialMenuOptionsv+0x2d0>)
 8083c60:	f004 fbdf 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 8083c64:	f005 f930 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c68:	4988      	ldr	r1, [pc, #544]	; (8083e8c <_Z23outputSerialMenuOptionsv+0x2d4>)
 8083c6a:	f004 fbda 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 8083c6e:	f005 f92b 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c72:	4987      	ldr	r1, [pc, #540]	; (8083e90 <_Z23outputSerialMenuOptionsv+0x2d8>)
 8083c74:	f004 fbd5 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 8083c78:	f005 f926 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c7c:	4985      	ldr	r1, [pc, #532]	; (8083e94 <_Z23outputSerialMenuOptionsv+0x2dc>)
 8083c7e:	f004 fbd0 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 8083c82:	f005 f921 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c86:	4984      	ldr	r1, [pc, #528]	; (8083e98 <_Z23outputSerialMenuOptionsv+0x2e0>)
 8083c88:	f004 fbcb 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 8083c8c:	f005 f91c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c90:	4982      	ldr	r1, [pc, #520]	; (8083e9c <_Z23outputSerialMenuOptionsv+0x2e4>)
 8083c92:	f004 fbc6 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 8083c96:	f005 f917 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083c9a:	4981      	ldr	r1, [pc, #516]	; (8083ea0 <_Z23outputSerialMenuOptionsv+0x2e8>)
 8083c9c:	f004 fbc1 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 8083ca0:	f005 f912 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083ca4:	497f      	ldr	r1, [pc, #508]	; (8083ea4 <_Z23outputSerialMenuOptionsv+0x2ec>)
 8083ca6:	f004 fbbc 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 8083caa:	f005 f90d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083cae:	497e      	ldr	r1, [pc, #504]	; (8083ea8 <_Z23outputSerialMenuOptionsv+0x2f0>)
 8083cb0:	f004 fbb7 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 8083cb4:	f005 f908 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083cb8:	497c      	ldr	r1, [pc, #496]	; (8083eac <_Z23outputSerialMenuOptionsv+0x2f4>)
 8083cba:	f004 fbb2 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 8083cbe:	f005 f903 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083cc2:	497b      	ldr	r1, [pc, #492]	; (8083eb0 <_Z23outputSerialMenuOptionsv+0x2f8>)
 8083cc4:	f004 fbad 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 8083cc8:	f005 f8fe 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083ccc:	4979      	ldr	r1, [pc, #484]	; (8083eb4 <_Z23outputSerialMenuOptionsv+0x2fc>)
 8083cce:	f004 fba8 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 8083cd2:	f005 f8f9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083cd6:	4978      	ldr	r1, [pc, #480]	; (8083eb8 <_Z23outputSerialMenuOptionsv+0x300>)
 8083cd8:	f004 fba3 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 8083cdc:	f005 f8f4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083ce0:	4976      	ldr	r1, [pc, #472]	; (8083ebc <_Z23outputSerialMenuOptionsv+0x304>)
 8083ce2:	f004 fb9e 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 8083ce6:	f005 f8ef 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083cea:	4975      	ldr	r1, [pc, #468]	; (8083ec0 <_Z23outputSerialMenuOptionsv+0x308>)
 8083cec:	f004 fb99 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 8083cf0:	f005 f8ea 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083cf4:	4973      	ldr	r1, [pc, #460]	; (8083ec4 <_Z23outputSerialMenuOptionsv+0x30c>)
 8083cf6:	f004 fb94 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 8083cfa:	f005 f8e5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083cfe:	4972      	ldr	r1, [pc, #456]	; (8083ec8 <_Z23outputSerialMenuOptionsv+0x310>)
 8083d00:	f004 fb8f 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8083d04:	f005 f8e0 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d08:	4970      	ldr	r1, [pc, #448]	; (8083ecc <_Z23outputSerialMenuOptionsv+0x314>)
 8083d0a:	f004 fb8a 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 8083d0e:	f005 f8db 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d12:	496f      	ldr	r1, [pc, #444]	; (8083ed0 <_Z23outputSerialMenuOptionsv+0x318>)
 8083d14:	f004 fb85 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 8083d18:	f005 f8d6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d1c:	496d      	ldr	r1, [pc, #436]	; (8083ed4 <_Z23outputSerialMenuOptionsv+0x31c>)
 8083d1e:	f004 fb80 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("A:  Ouptput CO constantly and rapidly");
 8083d22:	f005 f8d1 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d26:	496c      	ldr	r1, [pc, #432]	; (8083ed8 <_Z23outputSerialMenuOptionsv+0x320>)
 8083d28:	f004 fb7b 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8083d2c:	f005 f8cc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d30:	496a      	ldr	r1, [pc, #424]	; (8083edc <_Z23outputSerialMenuOptionsv+0x324>)
 8083d32:	f004 fb76 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celcius");
 8083d36:	f005 f8c7 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d3a:	4969      	ldr	r1, [pc, #420]	; (8083ee0 <_Z23outputSerialMenuOptionsv+0x328>)
 8083d3c:	f004 fb71 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8083d40:	f005 f8c2 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d44:	4967      	ldr	r1, [pc, #412]	; (8083ee4 <_Z23outputSerialMenuOptionsv+0x32c>)
 8083d46:	f004 fb6c 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 8083d4a:	f005 f8bd 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d4e:	4966      	ldr	r1, [pc, #408]	; (8083ee8 <_Z23outputSerialMenuOptionsv+0x330>)
 8083d50:	f004 fb67 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Farenheit");
 8083d54:	f005 f8b8 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d58:	4964      	ldr	r1, [pc, #400]	; (8083eec <_Z23outputSerialMenuOptionsv+0x334>)
 8083d5a:	f004 fb62 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 8083d5e:	f005 f8b3 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d62:	4963      	ldr	r1, [pc, #396]	; (8083ef0 <_Z23outputSerialMenuOptionsv+0x338>)
 8083d64:	f004 fb5d 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 8083d68:	f005 f8ae 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d6c:	4961      	ldr	r1, [pc, #388]	; (8083ef4 <_Z23outputSerialMenuOptionsv+0x33c>)
 8083d6e:	f004 fb58 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 8083d72:	f005 f8a9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d76:	4960      	ldr	r1, [pc, #384]	; (8083ef8 <_Z23outputSerialMenuOptionsv+0x340>)
 8083d78:	f004 fb53 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 8083d7c:	f005 f8a4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d80:	495e      	ldr	r1, [pc, #376]	; (8083efc <_Z23outputSerialMenuOptionsv+0x344>)
 8083d82:	f004 fb4e 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 8083d86:	f005 f89f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d8a:	495d      	ldr	r1, [pc, #372]	; (8083f00 <_Z23outputSerialMenuOptionsv+0x348>)
 8083d8c:	f004 fb49 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 8083d90:	f005 f89a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d94:	495b      	ldr	r1, [pc, #364]	; (8083f04 <_Z23outputSerialMenuOptionsv+0x34c>)
 8083d96:	f004 fb44 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 8083d9a:	f005 f895 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083d9e:	495a      	ldr	r1, [pc, #360]	; (8083f08 <_Z23outputSerialMenuOptionsv+0x350>)
 8083da0:	f004 fb3f 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 8083da4:	f005 f890 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083da8:	4958      	ldr	r1, [pc, #352]	; (8083f0c <_Z23outputSerialMenuOptionsv+0x354>)
 8083daa:	f004 fb3a 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 8083dae:	f005 f88b 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083db2:	4957      	ldr	r1, [pc, #348]	; (8083f10 <_Z23outputSerialMenuOptionsv+0x358>)
 8083db4:	f004 fb35 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 8083db8:	f005 f886 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083dbc:	4955      	ldr	r1, [pc, #340]	; (8083f14 <_Z23outputSerialMenuOptionsv+0x35c>)
 8083dbe:	f004 fb30 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 8083dc2:	f005 f881 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083dc6:	4954      	ldr	r1, [pc, #336]	; (8083f18 <_Z23outputSerialMenuOptionsv+0x360>)
 8083dc8:	f004 fb2b 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 8083dcc:	f005 f87c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083dd0:	4952      	ldr	r1, [pc, #328]	; (8083f1c <_Z23outputSerialMenuOptionsv+0x364>)
 8083dd2:	f004 fb26 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 8083dd6:	f005 f877 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083dda:	4951      	ldr	r1, [pc, #324]	; (8083f20 <_Z23outputSerialMenuOptionsv+0x368>)
 8083ddc:	f004 fb21 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 8083de0:	f005 f872 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083de4:	494f      	ldr	r1, [pc, #316]	; (8083f24 <_Z23outputSerialMenuOptionsv+0x36c>)
 8083de6:	f004 fb1c 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 8083dea:	f005 f86d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083dee:	494e      	ldr	r1, [pc, #312]	; (8083f28 <_Z23outputSerialMenuOptionsv+0x370>)
 8083df0:	f004 fb17 	bl	8088422 <_ZN5Print7printlnEPKc>
    
    Serial.println("W:  Enable/Disable google location services");
 8083df4:	f005 f868 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083df8:	494c      	ldr	r1, [pc, #304]	; (8083f2c <_Z23outputSerialMenuOptionsv+0x374>)
 8083dfa:	f004 fb12 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 8083dfe:	f005 f863 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083e02:	494b      	ldr	r1, [pc, #300]	; (8083f30 <_Z23outputSerialMenuOptionsv+0x378>)
 8083e04:	f004 fb0d 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 8083e08:	f005 f85e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083e0c:	4949      	ldr	r1, [pc, #292]	; (8083f34 <_Z23outputSerialMenuOptionsv+0x37c>)
 8083e0e:	f004 fb08 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 8083e12:	f005 f859 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083e16:	4948      	ldr	r1, [pc, #288]	; (8083f38 <_Z23outputSerialMenuOptionsv+0x380>)
 8083e18:	f004 fb03 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083e1c:	f005 f854 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083e20:	4946      	ldr	r1, [pc, #280]	; (8083f3c <_Z23outputSerialMenuOptionsv+0x384>)
 8083e22:	f004 fafe 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
 8083e26:	f005 f84f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083e2a:	4945      	ldr	r1, [pc, #276]	; (8083f40 <_Z23outputSerialMenuOptionsv+0x388>)
 8083e2c:	f004 faf9 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8083e30:	f005 f84a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083e34:	4943      	ldr	r1, [pc, #268]	; (8083f44 <_Z23outputSerialMenuOptionsv+0x38c>)
 8083e36:	f004 faf4 	bl	8088422 <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 8083e3a:	f005 f845 	bl	8088ec8 <_Z16_fetch_usbserialv>
  }
 8083e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
 8083e42:	4941      	ldr	r1, [pc, #260]	; (8083f48 <_Z23outputSerialMenuOptionsv+0x390>)
 8083e44:	f004 baed 	b.w	8088422 <_ZN5Print7printlnEPKc>
 8083e48:	0808edb7 	.word	0x0808edb7
 8083e4c:	0808edcd 	.word	0x0808edcd
 8083e50:	0808ede2 	.word	0x0808ede2
 8083e54:	0808edf6 	.word	0x0808edf6
 8083e58:	0808ee0a 	.word	0x0808ee0a
 8083e5c:	0808ee1d 	.word	0x0808ee1d
 8083e60:	0808ee32 	.word	0x0808ee32
 8083e64:	0808ee46 	.word	0x0808ee46
 8083e68:	0808ee5d 	.word	0x0808ee5d
 8083e6c:	0808ee73 	.word	0x0808ee73
 8083e70:	0808ee89 	.word	0x0808ee89
 8083e74:	0808ee9e 	.word	0x0808ee9e
 8083e78:	0808eebb 	.word	0x0808eebb
 8083e7c:	0808eed7 	.word	0x0808eed7
 8083e80:	0808eef1 	.word	0x0808eef1
 8083e84:	0808ef0a 	.word	0x0808ef0a
 8083e88:	0808ef24 	.word	0x0808ef24
 8083e8c:	0808ef3d 	.word	0x0808ef3d
 8083e90:	0808ef59 	.word	0x0808ef59
 8083e94:	0808ef76 	.word	0x0808ef76
 8083e98:	0808ef8f 	.word	0x0808ef8f
 8083e9c:	0808efab 	.word	0x0808efab
 8083ea0:	0808efc3 	.word	0x0808efc3
 8083ea4:	0808efdc 	.word	0x0808efdc
 8083ea8:	0808eff5 	.word	0x0808eff5
 8083eac:	0808f009 	.word	0x0808f009
 8083eb0:	0808f01e 	.word	0x0808f01e
 8083eb4:	0808f039 	.word	0x0808f039
 8083eb8:	0808f054 	.word	0x0808f054
 8083ebc:	0808f06a 	.word	0x0808f06a
 8083ec0:	0808f07b 	.word	0x0808f07b
 8083ec4:	0808f08d 	.word	0x0808f08d
 8083ec8:	0808f09e 	.word	0x0808f09e
 8083ecc:	0808f0b0 	.word	0x0808f0b0
 8083ed0:	0808f0d9 	.word	0x0808f0d9
 8083ed4:	0808f102 	.word	0x0808f102
 8083ed8:	0808f131 	.word	0x0808f131
 8083edc:	0808f157 	.word	0x0808f157
 8083ee0:	0808f17c 	.word	0x0808f17c
 8083ee4:	0808f1a4 	.word	0x0808f1a4
 8083ee8:	0808f1e4 	.word	0x0808f1e4
 8083eec:	0808f227 	.word	0x0808f227
 8083ef0:	0808f251 	.word	0x0808f251
 8083ef4:	0808f294 	.word	0x0808f294
 8083ef8:	0808f2da 	.word	0x0808f2da
 8083efc:	0808f30e 	.word	0x0808f30e
 8083f00:	0808f32c 	.word	0x0808f32c
 8083f04:	0808f350 	.word	0x0808f350
 8083f08:	0808f36b 	.word	0x0808f36b
 8083f0c:	0808f395 	.word	0x0808f395
 8083f10:	0808f3ca 	.word	0x0808f3ca
 8083f14:	0808f3ee 	.word	0x0808f3ee
 8083f18:	0808f402 	.word	0x0808f402
 8083f1c:	0808f41e 	.word	0x0808f41e
 8083f20:	0808f443 	.word	0x0808f443
 8083f24:	0808f467 	.word	0x0808f467
 8083f28:	0808f48c 	.word	0x0808f48c
 8083f2c:	0808f4b4 	.word	0x0808f4b4
 8083f30:	0808f4e0 	.word	0x0808f4e0
 8083f34:	0808f523 	.word	0x0808f523
 8083f38:	0808f555 	.word	0x0808f555
 8083f3c:	0808f57b 	.word	0x0808f57b
 8083f40:	0808f5e1 	.word	0x0808f5e1
 8083f44:	0808f645 	.word	0x0808f645
 8083f48:	0808f65a 	.word	0x0808f65a

08083f4c <_ZN5Print6printfIIiEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8083f4c:	4613      	mov	r3, r2
 8083f4e:	460a      	mov	r2, r1
 8083f50:	2100      	movs	r1, #0
 8083f52:	f004 bb9b 	b.w	808868c <_ZN5Print11printf_implEbPKcz>
	...

08083f58 <_Z26serialIncreaseInputCurrentv>:
    Serial.println("failed writing string");
  }

}

void serialIncreaseInputCurrent(void){
 8083f58:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8083f5a:	481d      	ldr	r0, [pc, #116]	; (8083fd0 <_Z26serialIncreaseInputCurrentv+0x78>)
 8083f5c:	f003 fde6 	bl	8087b2c <_ZN4PMIC20getInputCurrentLimitEv>
 8083f60:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8083f62:	f004 ffb1 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083f66:	462a      	mov	r2, r5
 8083f68:	491a      	ldr	r1, [pc, #104]	; (8083fd4 <_Z26serialIncreaseInputCurrentv+0x7c>)
 8083f6a:	f7ff ffef 	bl	8083f4c <_ZN5Print6printfIIiEEEjPKcDpT_>

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
 8083f6e:	2d64      	cmp	r5, #100	; 0x64
 8083f70:	d016      	beq.n	8083fa0 <_Z26serialIncreaseInputCurrentv+0x48>
        inputCurrent = 150;
    }else if(inputCurrent == 150){
 8083f72:	2d96      	cmp	r5, #150	; 0x96
 8083f74:	d016      	beq.n	8083fa4 <_Z26serialIncreaseInputCurrentv+0x4c>
        inputCurrent = 500;
    }else if(inputCurrent == 500){
 8083f76:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8083f7a:	d016      	beq.n	8083faa <_Z26serialIncreaseInputCurrentv+0x52>
        inputCurrent = 900;
    }else if(inputCurrent == 900){
 8083f7c:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8083f80:	d016      	beq.n	8083fb0 <_Z26serialIncreaseInputCurrentv+0x58>
        inputCurrent = 1200;
    }else if(inputCurrent == 1200){
 8083f82:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8083f86:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8083f8a:	d016      	beq.n	8083fba <_Z26serialIncreaseInputCurrentv+0x62>
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
 8083f8c:	42a5      	cmp	r5, r4
 8083f8e:	d012      	beq.n	8083fb6 <_Z26serialIncreaseInputCurrentv+0x5e>
        inputCurrent = 2000;
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
 8083f90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8083f94:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8083f98:	bf14      	ite	ne
 8083f9a:	462c      	movne	r4, r5
 8083f9c:	4614      	moveq	r4, r2
 8083f9e:	e00c      	b.n	8083fba <_Z26serialIncreaseInputCurrentv+0x62>
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
        inputCurrent = 150;
 8083fa0:	2496      	movs	r4, #150	; 0x96
 8083fa2:	e00a      	b.n	8083fba <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 150){
        inputCurrent = 500;
 8083fa4:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8083fa8:	e007      	b.n	8083fba <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 500){
        inputCurrent = 900;
 8083faa:	f44f 7461 	mov.w	r4, #900	; 0x384
 8083fae:	e004      	b.n	8083fba <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 900){
        inputCurrent = 1200;
 8083fb0:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 8083fb4:	e001      	b.n	8083fba <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 1200){
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
        inputCurrent = 2000;
 8083fb6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 8083fba:	b2a1      	uxth	r1, r4
 8083fbc:	4804      	ldr	r0, [pc, #16]	; (8083fd0 <_Z26serialIncreaseInputCurrentv+0x78>)
 8083fbe:	f003 fded 	bl	8087b9c <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 8083fc2:	f004 ff81 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8083fc6:	4622      	mov	r2, r4
 8083fc8:	4903      	ldr	r1, [pc, #12]	; (8083fd8 <_Z26serialIncreaseInputCurrentv+0x80>)
 8083fca:	f7ff ffbf 	bl	8083f4c <_ZN5Print6printfIIiEEEjPKcDpT_>
 8083fce:	bd38      	pop	{r3, r4, r5, pc}
 8083fd0:	20000a9c 	.word	0x20000a9c
 8083fd4:	0808f763 	.word	0x0808f763
 8083fd8:	0808f781 	.word	0x0808f781

08083fdc <_Z27serialIncreaseChargeCurrentv>:
}

void serialIncreaseChargeCurrent(void){
 8083fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8083fde:	4833      	ldr	r0, [pc, #204]	; (80840ac <_Z27serialIncreaseChargeCurrentv+0xd0>)
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
 8083fe0:	b085      	sub	sp, #20
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8083fe2:	f003 fdaf 	bl	8087b44 <_ZN4PMIC16getChargeCurrentEv>
 8083fe6:	4605      	mov	r5, r0
    //bit 7
    if(chargeCurrent & 0x80){
        total_current += 2048;
 8083fe8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8083fec:	bf0c      	ite	eq
 8083fee:	2400      	moveq	r4, #0
 8083ff0:	f44f 6400 	movne.w	r4, #2048	; 0x800
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8083ff4:	0647      	lsls	r7, r0, #25
        total_current += 1024;
 8083ff6:	bf48      	it	mi
 8083ff8:	f504 6480 	addmi.w	r4, r4, #1024	; 0x400
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8083ffc:	0686      	lsls	r6, r0, #26
        total_current += 512;
 8083ffe:	bf48      	it	mi
 8084000:	f504 7400 	addmi.w	r4, r4, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8084004:	06e8      	lsls	r0, r5, #27
        total_current += 256;
 8084006:	bf48      	it	mi
 8084008:	f504 7480 	addmi.w	r4, r4, #256	; 0x100
    }
    //bit 3
    if(chargeCurrent & 0x08){
 808400c:	0729      	lsls	r1, r5, #28
        total_current += 128;
 808400e:	bf48      	it	mi
 8084010:	3480      	addmi	r4, #128	; 0x80
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8084012:	076a      	lsls	r2, r5, #29
        total_current += 64;
 8084014:	bf48      	it	mi
 8084016:	3440      	addmi	r4, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8084018:	f004 ff56 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808401c:	4622      	mov	r2, r4
 808401e:	4924      	ldr	r1, [pc, #144]	; (80840b0 <_Z27serialIncreaseChargeCurrentv+0xd4>)
 8084020:	f7ff ff94 	bl	8083f4c <_ZN5Print6printfIIiEEEjPKcDpT_>
    chargeCurrent += 4;
 8084024:	1d28      	adds	r0, r5, #4
 8084026:	b2c0      	uxtb	r0, r0
    total_current = 0;

    if(chargeCurrent & 0x80){
 8084028:	0603      	lsls	r3, r0, #24
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
    int total_current = 0;
    bool bit7 = 0;
 808402a:	bf58      	it	pl
 808402c:	2100      	movpl	r1, #0
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 808402e:	f000 0340 	and.w	r3, r0, #64	; 0x40
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
 8084032:	bf46      	itte	mi
 8084034:	2101      	movmi	r1, #1
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
 8084036:	f44f 6400 	movmi.w	r4, #2048	; 0x800
    if(chargeCurrent & 0x04){
        total_current += 64;
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;
 808403a:	460c      	movpl	r4, r1
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 808403c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8084040:	b113      	cbz	r3, 8084048 <_Z27serialIncreaseChargeCurrentv+0x6c>
        total_current += 1024;
 8084042:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        bit6 = 1;
 8084046:	2201      	movs	r2, #1
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8084048:	f000 0520 	and.w	r5, r0, #32
 808404c:	f005 03ff 	and.w	r3, r5, #255	; 0xff
 8084050:	b115      	cbz	r5, 8084058 <_Z27serialIncreaseChargeCurrentv+0x7c>
        total_current += 512;
 8084052:	f504 7400 	add.w	r4, r4, #512	; 0x200
        bit5 = 1;
 8084056:	2301      	movs	r3, #1
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8084058:	f000 0610 	and.w	r6, r0, #16
 808405c:	f006 05ff 	and.w	r5, r6, #255	; 0xff
 8084060:	b116      	cbz	r6, 8084068 <_Z27serialIncreaseChargeCurrentv+0x8c>
        total_current += 256;
 8084062:	f504 7480 	add.w	r4, r4, #256	; 0x100
        bit4 = 1;
 8084066:	2501      	movs	r5, #1
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8084068:	f000 0708 	and.w	r7, r0, #8
 808406c:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8084070:	b10f      	cbz	r7, 8084076 <_Z27serialIncreaseChargeCurrentv+0x9a>
        total_current += 128;
 8084072:	3480      	adds	r4, #128	; 0x80
        bit3 = 1;
 8084074:	2601      	movs	r6, #1
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8084076:	f000 0004 	and.w	r0, r0, #4
 808407a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808407e:	b110      	cbz	r0, 8084086 <_Z27serialIncreaseChargeCurrentv+0xaa>
        total_current += 64;
 8084080:	3440      	adds	r4, #64	; 0x40
        bit2 = 1;
 8084082:	2001      	movs	r0, #1
 8084084:	e000      	b.n	8084088 <_Z27serialIncreaseChargeCurrentv+0xac>
    bool bit7 = 0;
    bool bit6 = 0;
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;
 8084086:	4638      	mov	r0, r7
    if(chargeCurrent & 0x04){
        total_current += 64;
        bit2 = 1;
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8084088:	9002      	str	r0, [sp, #8]
 808408a:	e88d 0060 	stmia.w	sp, {r5, r6}
 808408e:	4807      	ldr	r0, [pc, #28]	; (80840ac <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8084090:	f003 fde7 	bl	8087c62 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8084094:	4805      	ldr	r0, [pc, #20]	; (80840ac <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8084096:	f003 fd55 	bl	8087b44 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 808409a:	f004 ff15 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808409e:	4622      	mov	r2, r4
 80840a0:	4904      	ldr	r1, [pc, #16]	; (80840b4 <_Z27serialIncreaseChargeCurrentv+0xd8>)
 80840a2:	f7ff ff53 	bl	8083f4c <_ZN5Print6printfIIiEEEjPKcDpT_>
}
 80840a6:	b005      	add	sp, #20
 80840a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80840aa:	bf00      	nop
 80840ac:	20000a9c 	.word	0x20000a9c
 80840b0:	0808f79f 	.word	0x0808f79f
 80840b4:	0808f7c8 	.word	0x0808f7c8

080840b8 <_Z10readAlpha1v>:

    return CO_float;
}


float readAlpha1(void){
 80840b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
    if(debugging_enabled){
 80840bc:	4da6      	ldr	r5, [pc, #664]	; (8084358 <_Z10readAlpha1v+0x2a0>)

    return CO_float;
}


float readAlpha1(void){
 80840be:	b08f      	sub	sp, #60	; 0x3c
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 80840c0:	49a6      	ldr	r1, [pc, #664]	; (808435c <_Z10readAlpha1v+0x2a4>)
 80840c2:	a806      	add	r0, sp, #24
 80840c4:	f004 f80f 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 80840c8:	682b      	ldr	r3, [r5, #0]
 80840ca:	b123      	cbz	r3, 80840d6 <_Z10readAlpha1v+0x1e>
        Serial.println("Start of alpha read");
 80840cc:	f004 fefc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80840d0:	49a3      	ldr	r1, [pc, #652]	; (8084360 <_Z10readAlpha1v+0x2a8>)
 80840d2:	f004 f9a6 	bl	8088422 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_1_en, LOW);   //enable
 80840d6:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 80843b8 <_Z10readAlpha1v+0x300>
 80840da:	2100      	movs	r1, #0
 80840dc:	f8b9 0000 	ldrh.w	r0, [r9]
 80840e0:	f005 f97d 	bl	80893de <digitalWrite>

    if(Wire.requestFrom(0x49,1) == 0){
 80840e4:	f005 fa18 	bl	8089518 <_Z19__fetch_global_Wirev>
 80840e8:	2201      	movs	r2, #1
 80840ea:	2149      	movs	r1, #73	; 0x49
 80840ec:	f005 f8b0 	bl	8089250 <_ZN7TwoWire11requestFromEii>
 80840f0:	f8cd 9014 	str.w	r9, [sp, #20]
 80840f4:	b948      	cbnz	r0, 808410a <_Z10readAlpha1v+0x52>
      if(debugging_enabled){
 80840f6:	682b      	ldr	r3, [r5, #0]
 80840f8:	2b00      	cmp	r3, #0
 80840fa:	d03e      	beq.n	808417a <_Z10readAlpha1v+0xc2>
        Serial.println("Couldn't communicate with LMP91000_1");
 80840fc:	f004 fee4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084100:	4998      	ldr	r1, [pc, #608]	; (8084364 <_Z10readAlpha1v+0x2ac>)
 8084102:	f004 f98e 	bl	8088422 <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000_1");
 8084106:	4997      	ldr	r1, [pc, #604]	; (8084364 <_Z10readAlpha1v+0x2ac>)
 8084108:	e02e      	b.n	8084168 <_Z10readAlpha1v+0xb0>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 808410a:	2103      	movs	r1, #3
 808410c:	4896      	ldr	r0, [pc, #600]	; (8084368 <_Z10readAlpha1v+0x2b0>)
 808410e:	f001 f928 	bl	8085362 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8084112:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8084114:	f006 f94a 	bl	808a3ac <__aeabi_i2f>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8084118:	4b94      	ldr	r3, [pc, #592]	; (808436c <_Z10readAlpha1v+0x2b4>)
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 808411a:	6819      	ldr	r1, [r3, #0]
 808411c:	f006 f99a 	bl	808a454 <__aeabi_fmul>
 8084120:	4993      	ldr	r1, [pc, #588]	; (8084370 <_Z10readAlpha1v+0x2b8>)
 8084122:	f006 fa4b 	bl	808a5bc <__aeabi_fdiv>
 8084126:	f005 fceb 	bl	8089b00 <__aeabi_f2d>
 808412a:	2200      	movs	r2, #0
 808412c:	4b91      	ldr	r3, [pc, #580]	; (8084374 <_Z10readAlpha1v+0x2bc>)
 808412e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8084132:	f005 fb85 	bl	8089840 <__aeabi_dsub>
 8084136:	f005 ffe7 	bl	808a108 <__aeabi_d2iz>
 808413a:	2800      	cmp	r0, #0
 808413c:	bfb8      	it	lt
 808413e:	4240      	neglt	r0, r0
 8084140:	f005 fccc 	bl	8089adc <__aeabi_i2d>
 8084144:	2200      	movs	r2, #0
 8084146:	4b8c      	ldr	r3, [pc, #560]	; (8084378 <_Z10readAlpha1v+0x2c0>)
 8084148:	f005 ffbe 	bl	808a0c8 <__aeabi_dcmpgt>
 808414c:	b1a8      	cbz	r0, 808417a <_Z10readAlpha1v+0xc2>
          if(debugging_enabled){
 808414e:	682b      	ldr	r3, [r5, #0]
 8084150:	b19b      	cbz	r3, 808417a <_Z10readAlpha1v+0xc2>
            Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref/1000);
 8084152:	f004 feb9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808415a:	2100      	movs	r1, #0
 808415c:	e9cd 2300 	strd	r2, r3, [sp]
 8084160:	4a86      	ldr	r2, [pc, #536]	; (808437c <_Z10readAlpha1v+0x2c4>)
 8084162:	f004 fa93 	bl	808868c <_ZN5Print11printf_implEbPKcz>
            writeLogFile("Halfvolt higher than 0.5");
 8084166:	4986      	ldr	r1, [pc, #536]	; (8084380 <_Z10readAlpha1v+0x2c8>)
 8084168:	a80a      	add	r0, sp, #40	; 0x28
 808416a:	f003 ffbc 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 808416e:	a80a      	add	r0, sp, #40	; 0x28
 8084170:	f7fd fa8e 	bl	8081690 <_Z12writeLogFile6String>
 8084174:	a80a      	add	r0, sp, #40	; 0x28
 8084176:	f003 ff6f 	bl	8088058 <_ZN6StringD1Ev>
          }
        }
    }

    if(lmp91000_1.read(LMP91000_STATUS_REG) == 0){
 808417a:	2100      	movs	r1, #0
 808417c:	4881      	ldr	r0, [pc, #516]	; (8084384 <_Z10readAlpha1v+0x2cc>)
 808417e:	f000 ff9a 	bl	80850b6 <_ZN8LMP910004readEh>
 8084182:	b980      	cbnz	r0, 80841a6 <_Z10readAlpha1v+0xee>
        if(debugging_enabled){
 8084184:	682b      	ldr	r3, [r5, #0]
 8084186:	b173      	cbz	r3, 80841a6 <_Z10readAlpha1v+0xee>
            Serial.println("Status = 0 from LMP91000 status reg");
 8084188:	f004 fe9e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808418c:	497e      	ldr	r1, [pc, #504]	; (8084388 <_Z10readAlpha1v+0x2d0>)
 808418e:	f004 f948 	bl	8088422 <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8084192:	497e      	ldr	r1, [pc, #504]	; (808438c <_Z10readAlpha1v+0x2d4>)
 8084194:	a80a      	add	r0, sp, #40	; 0x28
 8084196:	f003 ffa6 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 808419a:	a80a      	add	r0, sp, #40	; 0x28
 808419c:	f7fd fa78 	bl	8081690 <_Z12writeLogFile6String>
 80841a0:	a80a      	add	r0, sp, #40	; 0x28
 80841a2:	f003 ff59 	bl	8088058 <_ZN6StringD1Ev>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0){
 80841a6:	f005 f9b7 	bl	8089518 <_Z19__fetch_global_Wirev>
 80841aa:	2201      	movs	r2, #1
 80841ac:	2149      	movs	r1, #73	; 0x49
 80841ae:	f005 f84f 	bl	8089250 <_ZN7TwoWire11requestFromEii>
 80841b2:	2800      	cmp	r0, #0
 80841b4:	f000 80b9 	beq.w	808432a <_Z10readAlpha1v+0x272>
 80841b8:	2100      	movs	r1, #0
 80841ba:	4872      	ldr	r0, [pc, #456]	; (8084384 <_Z10readAlpha1v+0x2cc>)
 80841bc:	f000 ff7b 	bl	80850b6 <_ZN8LMP910004readEh>
 80841c0:	2800      	cmp	r0, #0
 80841c2:	f000 80b2 	beq.w	808432a <_Z10readAlpha1v+0x272>
 80841c6:	2400      	movs	r4, #0
 80841c8:	46a2      	mov	sl, r4
 80841ca:	4627      	mov	r7, r4
 80841cc:	4626      	mov	r6, r4
 80841ce:	f04f 080a 	mov.w	r8, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 80841d2:	2100      	movs	r1, #0
 80841d4:	4864      	ldr	r0, [pc, #400]	; (8084368 <_Z10readAlpha1v+0x2b0>)
 80841d6:	f001 f8c4 	bl	8085362 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 80841da:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 80841dc:	4406      	add	r6, r0
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 80841de:	4862      	ldr	r0, [pc, #392]	; (8084368 <_Z10readAlpha1v+0x2b0>)
 80841e0:	f001 f8bf 	bl	8085362 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 80841e4:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 80841e6:	4407      	add	r7, r0
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 80841e8:	485f      	ldr	r0, [pc, #380]	; (8084368 <_Z10readAlpha1v+0x2b0>)
 80841ea:	f001 f8ba 	bl	8085362 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 80841ee:	2103      	movs	r1, #3
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 80841f0:	4482      	add	sl, r0
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 80841f2:	485d      	ldr	r0, [pc, #372]	; (8084368 <_Z10readAlpha1v+0x2b0>)
 80841f4:	f001 f8b5 	bl	8085362 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 80841f8:	f1b8 0801 	subs.w	r8, r8, #1
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 80841fc:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 80841fe:	d1e8      	bne.n	80841d2 <_Z10readAlpha1v+0x11a>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8084200:	230a      	movs	r3, #10
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8084202:	fb94 f4f3 	sdiv	r4, r4, r3
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8084206:	fb96 f6f3 	sdiv	r6, r6, r3
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 808420a:	fb97 f7f3 	sdiv	r7, r7, r3
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 808420e:	fb9a faf3 	sdiv	sl, sl, r3
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8084212:	4b56      	ldr	r3, [pc, #344]	; (808436c <_Z10readAlpha1v+0x2b4>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8084214:	4620      	mov	r0, r4
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8084216:	f8d3 8000 	ldr.w	r8, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 808421a:	f006 f8c7 	bl	808a3ac <__aeabi_i2f>
 808421e:	4641      	mov	r1, r8
 8084220:	f006 f918 	bl	808a454 <__aeabi_fmul>
 8084224:	4681      	mov	r9, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8084226:	4630      	mov	r0, r6
 8084228:	f006 f8c0 	bl	808a3ac <__aeabi_i2f>
 808422c:	4641      	mov	r1, r8
 808422e:	f006 f911 	bl	808a454 <__aeabi_fmul>
 8084232:	4601      	mov	r1, r0
 8084234:	4648      	mov	r0, r9
 8084236:	f006 f803 	bl	808a240 <__aeabi_fsub>
 808423a:	4955      	ldr	r1, [pc, #340]	; (8084390 <_Z10readAlpha1v+0x2d8>)
 808423c:	f006 f9be 	bl	808a5bc <__aeabi_fdiv>
 8084240:	4683      	mov	fp, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8084242:	4638      	mov	r0, r7
 8084244:	f006 f8b2 	bl	808a3ac <__aeabi_i2f>
 8084248:	4641      	mov	r1, r8
 808424a:	f006 f903 	bl	808a454 <__aeabi_fmul>
 808424e:	4601      	mov	r1, r0
 8084250:	4648      	mov	r0, r9
 8084252:	f005 fff5 	bl	808a240 <__aeabi_fsub>
 8084256:	494f      	ldr	r1, [pc, #316]	; (8084394 <_Z10readAlpha1v+0x2dc>)
 8084258:	f006 f9b0 	bl	808a5bc <__aeabi_fdiv>
 808425c:	4680      	mov	r8, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 808425e:	f7fd f847 	bl	80812f0 <_Z15readTemperaturev>
 8084262:	494d      	ldr	r1, [pc, #308]	; (8084398 <_Z10readAlpha1v+0x2e0>)
 8084264:	f006 fa9e 	bl	808a7a4 <__aeabi_fcmple>
 8084268:	b120      	cbz	r0, 8084274 <_Z10readAlpha1v+0x1bc>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 808426a:	4641      	mov	r1, r8
 808426c:	4658      	mov	r0, fp
 808426e:	f005 ffe7 	bl	808a240 <__aeabi_fsub>
 8084272:	e01f      	b.n	80842b4 <_Z10readAlpha1v+0x1fc>
        }
        else if(readTemperature() <= 25){
 8084274:	f7fd f83c 	bl	80812f0 <_Z15readTemperaturev>
 8084278:	4948      	ldr	r1, [pc, #288]	; (808439c <_Z10readAlpha1v+0x2e4>)
 808427a:	f006 fa93 	bl	808a7a4 <__aeabi_fcmple>
 808427e:	b120      	cbz	r0, 808428a <_Z10readAlpha1v+0x1d2>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8084280:	4641      	mov	r1, r8
 8084282:	4658      	mov	r0, fp
 8084284:	f005 ffde 	bl	808a244 <__addsf3>
 8084288:	e014      	b.n	80842b4 <_Z10readAlpha1v+0x1fc>
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 808428a:	4640      	mov	r0, r8
 808428c:	f005 fc38 	bl	8089b00 <__aeabi_f2d>
 8084290:	a32d      	add	r3, pc, #180	; (adr r3, 8084348 <_Z10readAlpha1v+0x290>)
 8084292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084296:	f005 fc87 	bl	8089ba8 <__aeabi_dmul>
 808429a:	4680      	mov	r8, r0
 808429c:	4658      	mov	r0, fp
 808429e:	4689      	mov	r9, r1
 80842a0:	f005 fc2e 	bl	8089b00 <__aeabi_f2d>
 80842a4:	4602      	mov	r2, r0
 80842a6:	460b      	mov	r3, r1
 80842a8:	4640      	mov	r0, r8
 80842aa:	4649      	mov	r1, r9
 80842ac:	f005 faca 	bl	8089844 <__adddf3>
 80842b0:	f005 ff72 	bl	808a198 <__aeabi_d2f>
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 80842b4:	f005 fc24 	bl	8089b00 <__aeabi_f2d>
 80842b8:	a325      	add	r3, pc, #148	; (adr r3, 8084350 <_Z10readAlpha1v+0x298>)
 80842ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80842be:	f005 fd9d 	bl	8089dfc <__aeabi_ddiv>
 80842c2:	f005 ff69 	bl	808a198 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 80842c6:	2202      	movs	r2, #2
 80842c8:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 80842ca:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 80842cc:	a80a      	add	r0, sp, #40	; 0x28
 80842ce:	f003 ff80 	bl	80881d2 <_ZN6StringC1Efi>
 80842d2:	a90a      	add	r1, sp, #40	; 0x28
 80842d4:	a806      	add	r0, sp, #24
 80842d6:	f003 ff50 	bl	808817a <_ZN6StringaSEOS_>
 80842da:	a80a      	add	r0, sp, #40	; 0x28
 80842dc:	f003 febc 	bl	8088058 <_ZN6StringD1Ev>
      }

      digitalWrite(lmp91000_1_en, HIGH);  //disable
 80842e0:	9b05      	ldr	r3, [sp, #20]
 80842e2:	2101      	movs	r1, #1
 80842e4:	8818      	ldrh	r0, [r3, #0]
 80842e6:	f005 f87a 	bl	80893de <digitalWrite>

      if(debugging_enabled){
 80842ea:	682b      	ldr	r3, [r5, #0]
 80842ec:	b313      	cbz	r3, 8084334 <_Z10readAlpha1v+0x27c>
          Serial.print("CO measurements:  \n\r");
 80842ee:	f004 fdeb 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80842f2:	492b      	ldr	r1, [pc, #172]	; (80843a0 <_Z10readAlpha1v+0x2e8>)
 80842f4:	f004 f882 	bl	80883fc <_ZN5Print5printEPKc>
          Serial.printf("A0_gas: %d\n\r", A0_gas);
 80842f8:	f004 fde6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80842fc:	4632      	mov	r2, r6
 80842fe:	4929      	ldr	r1, [pc, #164]	; (80843a4 <_Z10readAlpha1v+0x2ec>)
 8084300:	f7ff fe24 	bl	8083f4c <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A1_aux: %d\n\r", A1_aux);
 8084304:	f004 fde0 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084308:	463a      	mov	r2, r7
 808430a:	4927      	ldr	r1, [pc, #156]	; (80843a8 <_Z10readAlpha1v+0x2f0>)
 808430c:	f7ff fe1e 	bl	8083f4c <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
 8084310:	f004 fdda 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084314:	4652      	mov	r2, sl
 8084316:	4925      	ldr	r1, [pc, #148]	; (80843ac <_Z10readAlpha1v+0x2f4>)
 8084318:	f7ff fe18 	bl	8083f4c <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("half_vref: %d\n\r", half_Vref);
 808431c:	f004 fdd4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084320:	4622      	mov	r2, r4
 8084322:	4923      	ldr	r1, [pc, #140]	; (80843b0 <_Z10readAlpha1v+0x2f8>)
 8084324:	f7ff fe12 	bl	8083f4c <_ZN5Print6printfIIiEEEjPKcDpT_>
 8084328:	e004      	b.n	8084334 <_Z10readAlpha1v+0x27c>
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0){
        alpha1_ppmRounded = "-99";
 808432a:	4922      	ldr	r1, [pc, #136]	; (80843b4 <_Z10readAlpha1v+0x2fc>)
 808432c:	a806      	add	r0, sp, #24
 808432e:	f003 ff2c 	bl	808818a <_ZN6StringaSEPKc>
 8084332:	e7d5      	b.n	80842e0 <_Z10readAlpha1v+0x228>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 8084334:	a806      	add	r0, sp, #24
 8084336:	f003 fe8f 	bl	8088058 <_ZN6StringD1Ev>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
          Serial.printf("half_vref: %d\n\r", half_Vref);

      }
      return alpha1_ppmraw;
}
 808433a:	4640      	mov	r0, r8
 808433c:	b00f      	add	sp, #60	; 0x3c
 808433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084342:	bf00      	nop
 8084344:	f3af 8000 	nop.w
 8084348:	851eb852 	.word	0x851eb852
 808434c:	3fe851eb 	.word	0x3fe851eb
 8084350:	d4fdf3b6 	.word	0xd4fdf3b6
 8084354:	3fd6e978 	.word	0x3fd6e978
 8084358:	20000ac4 	.word	0x20000ac4
 808435c:	08090584 	.word	0x08090584
 8084360:	0808f7e6 	.word	0x0808f7e6
 8084364:	0808f7fa 	.word	0x0808f7fa
 8084368:	20000a08 	.word	0x20000a08
 808436c:	200000a4 	.word	0x200000a4
 8084370:	447a0000 	.word	0x447a0000
 8084374:	3ff40000 	.word	0x3ff40000
 8084378:	3fe00000 	.word	0x3fe00000
 808437c:	0808f81f 	.word	0x0808f81f
 8084380:	0808f831 	.word	0x0808f831
 8084384:	200001e8 	.word	0x200001e8
 8084388:	0808f84a 	.word	0x0808f84a
 808438c:	0808f86e 	.word	0x0808f86e
 8084390:	c2f00000 	.word	0xc2f00000
 8084394:	c3160000 	.word	0xc3160000
 8084398:	41700000 	.word	0x41700000
 808439c:	41c80000 	.word	0x41c80000
 80843a0:	0808f881 	.word	0x0808f881
 80843a4:	0808f896 	.word	0x0808f896
 80843a8:	0808f8a3 	.word	0x0808f8a3
 80843ac:	0808f8b0 	.word	0x0808f8b0
 80843b0:	0808f8be 	.word	0x0808f8be
 80843b4:	0808df66 	.word	0x0808df66
 80843b8:	2000009c 	.word	0x2000009c

080843bc <_Z20readAlpha1Constantlyv>:
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
 80843bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    while(!Serial.available()){
        CO_float_A = readCO_A();
 80843be:	4d0d      	ldr	r5, [pc, #52]	; (80843f4 <_Z20readAlpha1Constantlyv+0x38>)
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
 80843c0:	f004 fd82 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80843c4:	6803      	ldr	r3, [r0, #0]
 80843c6:	691b      	ldr	r3, [r3, #16]
 80843c8:	4798      	blx	r3
 80843ca:	4604      	mov	r4, r0
 80843cc:	b980      	cbnz	r0, 80843f0 <_Z20readAlpha1Constantlyv+0x34>
//read Carbon monoxide alphasense sensor
float readCO_A(void){
    float float_offset;
    float CO_float;
    
    CO_float = readAlpha1();
 80843ce:	f7ff fe73 	bl	80840b8 <_Z10readAlpha1v>
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
        CO_float_A = readCO_A();
 80843d2:	6028      	str	r0, [r5, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
 80843d4:	f004 fd78 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80843d8:	4606      	mov	r6, r0
 80843da:	6828      	ldr	r0, [r5, #0]
 80843dc:	f005 fb90 	bl	8089b00 <__aeabi_f2d>
 80843e0:	4a05      	ldr	r2, [pc, #20]	; (80843f8 <_Z20readAlpha1Constantlyv+0x3c>)
 80843e2:	e9cd 0100 	strd	r0, r1, [sp]
 80843e6:	4621      	mov	r1, r4
 80843e8:	4630      	mov	r0, r6
 80843ea:	f004 f94f 	bl	808868c <_ZN5Print11printf_implEbPKcz>
 80843ee:	e7e7      	b.n	80843c0 <_Z20readAlpha1Constantlyv+0x4>
    }
}
 80843f0:	b002      	add	sp, #8
 80843f2:	bd70      	pop	{r4, r5, r6, pc}
 80843f4:	2000076c 	.word	0x2000076c
 80843f8:	0808f8ce 	.word	0x0808f8ce

080843fc <_Z10serialMenuv>:
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 80843fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  incomingByte = '0';
 80843fe:	4cac      	ldr	r4, [pc, #688]	; (80846b0 <_Z10serialMenuv+0x2b4>)
 8084400:	2330      	movs	r3, #48	; 0x30

    }else if(incomingByte == '!'){

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
        while(!Serial.available()){
            if (! bme.performReading()) {
 8084402:	4eac      	ldr	r6, [pc, #688]	; (80846b4 <_Z10serialMenuv+0x2b8>)
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 8084404:	b08d      	sub	sp, #52	; 0x34
  
  incomingByte = '0';
 8084406:	7023      	strb	r3, [r4, #0]
  while(incomingByte!= 'x')
 8084408:	7823      	ldrb	r3, [r4, #0]
 808440a:	2b78      	cmp	r3, #120	; 0x78
 808440c:	f000 8407 	beq.w	8084c1e <_Z10serialMenuv+0x822>
  {
    Serial.print("Menu>");
 8084410:	f004 fd5a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084414:	49a8      	ldr	r1, [pc, #672]	; (80846b8 <_Z10serialMenuv+0x2bc>)
 8084416:	f003 fff1 	bl	80883fc <_ZN5Print5printEPKc>
    Serial.flush();
 808441a:	f004 fd55 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808441e:	6803      	ldr	r3, [r0, #0]
 8084420:	69db      	ldr	r3, [r3, #28]
 8084422:	4798      	blx	r3
    while(!Serial.available());
 8084424:	f004 fd50 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084428:	6803      	ldr	r3, [r0, #0]
 808442a:	691b      	ldr	r3, [r3, #16]
 808442c:	4798      	blx	r3
 808442e:	2800      	cmp	r0, #0
 8084430:	d0f8      	beq.n	8084424 <_Z10serialMenuv+0x28>
    incomingByte = Serial.read();
 8084432:	f004 fd49 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084436:	6803      	ldr	r3, [r0, #0]
 8084438:	695b      	ldr	r3, [r3, #20]
 808443a:	4798      	blx	r3
 808443c:	b2c0      	uxtb	r0, r0
    if(incomingByte == 'a'){
 808443e:	2861      	cmp	r0, #97	; 0x61
  while(incomingByte!= 'x')
  {
    Serial.print("Menu>");
    Serial.flush();
    while(!Serial.available());
    incomingByte = Serial.read();
 8084440:	7020      	strb	r0, [r4, #0]
    if(incomingByte == 'a'){
 8084442:	d102      	bne.n	808444a <_Z10serialMenuv+0x4e>
        serialGetCo2Slope();
 8084444:	f7fe fbd2 	bl	8082bec <_Z17serialGetCo2Slopev>
 8084448:	e7de      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'b'){
 808444a:	2862      	cmp	r0, #98	; 0x62
 808444c:	d102      	bne.n	8084454 <_Z10serialMenuv+0x58>
        serialGetCo2Zero();
 808444e:	f7fe fc4b 	bl	8082ce8 <_Z16serialGetCo2Zerov>
 8084452:	e7d9      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'c'){
 8084454:	2863      	cmp	r0, #99	; 0x63
 8084456:	d102      	bne.n	808445e <_Z10serialMenuv+0x62>
        serialGetCoSlope();
 8084458:	f7fe fca6 	bl	8082da8 <_Z16serialGetCoSlopev>
 808445c:	e7d4      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'd'){
 808445e:	2864      	cmp	r0, #100	; 0x64
 8084460:	d102      	bne.n	8084468 <_Z10serialMenuv+0x6c>
        serialGetCoZero();
 8084462:	f7fe fd27 	bl	8082eb4 <_Z15serialGetCoZerov>
 8084466:	e7cf      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'e'){
 8084468:	2865      	cmp	r0, #101	; 0x65
 808446a:	d102      	bne.n	8084472 <_Z10serialMenuv+0x76>
        serialGetPm1Slope();
 808446c:	f7fe fd82 	bl	8082f74 <_Z17serialGetPm1Slopev>
 8084470:	e7ca      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'f'){
 8084472:	2866      	cmp	r0, #102	; 0x66
 8084474:	d102      	bne.n	808447c <_Z10serialMenuv+0x80>
         serialGetPm1Zero();
 8084476:	f7fe fdf9 	bl	808306c <_Z16serialGetPm1Zerov>
 808447a:	e7c5      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'g'){
 808447c:	2867      	cmp	r0, #103	; 0x67
 808447e:	d102      	bne.n	8084486 <_Z10serialMenuv+0x8a>
        serialGetPm25Slope();
 8084480:	f7fe fe52 	bl	8083128 <_Z18serialGetPm25Slopev>
 8084484:	e7c0      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'h'){
 8084486:	2868      	cmp	r0, #104	; 0x68
 8084488:	d102      	bne.n	8084490 <_Z10serialMenuv+0x94>
        serialGetPm25Zero();
 808448a:	f7fe fec9 	bl	8083220 <_Z17serialGetPm25Zerov>
 808448e:	e7bb      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'i'){
 8084490:	2869      	cmp	r0, #105	; 0x69
 8084492:	d102      	bne.n	808449a <_Z10serialMenuv+0x9e>
        serialGetPm10Slope();
 8084494:	f7fe ff22 	bl	80832dc <_Z18serialGetPm10Slopev>
 8084498:	e7b6      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'j'){
 808449a:	286a      	cmp	r0, #106	; 0x6a
 808449c:	d102      	bne.n	80844a4 <_Z10serialMenuv+0xa8>
        serialGetPm10Zero();
 808449e:	f7fe ff99 	bl	80833d4 <_Z17serialGetPm10Zerov>
 80844a2:	e7b1      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'k'){
 80844a4:	286b      	cmp	r0, #107	; 0x6b
 80844a6:	d102      	bne.n	80844ae <_Z10serialMenuv+0xb2>
        serialGetTemperatureSlope();
 80844a8:	f7fe fff2 	bl	8083490 <_Z25serialGetTemperatureSlopev>
 80844ac:	e7ac      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'l'){
 80844ae:	286c      	cmp	r0, #108	; 0x6c
 80844b0:	d102      	bne.n	80844b8 <_Z10serialMenuv+0xbc>
        serialGetTemperatureZero();
 80844b2:	f7ff f869 	bl	8083588 <_Z24serialGetTemperatureZerov>
 80844b6:	e7a7      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'm'){
 80844b8:	286d      	cmp	r0, #109	; 0x6d
 80844ba:	d102      	bne.n	80844c2 <_Z10serialMenuv+0xc6>
        serialGetPressureSlope();
 80844bc:	f7ff f8c0 	bl	8083640 <_Z22serialGetPressureSlopev>
 80844c0:	e7a2      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'n'){
 80844c2:	286e      	cmp	r0, #110	; 0x6e
 80844c4:	d102      	bne.n	80844cc <_Z10serialMenuv+0xd0>
        serialGetPressureZero();
 80844c6:	f7ff f937 	bl	8083738 <_Z21serialGetPressureZerov>
 80844ca:	e79d      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'o'){
 80844cc:	286f      	cmp	r0, #111	; 0x6f
 80844ce:	d102      	bne.n	80844d6 <_Z10serialMenuv+0xda>
        serialGetHumiditySlope();
 80844d0:	f7ff f990 	bl	80837f4 <_Z22serialGetHumiditySlopev>
 80844d4:	e798      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'p'){
 80844d6:	2870      	cmp	r0, #112	; 0x70
 80844d8:	d102      	bne.n	80844e0 <_Z10serialMenuv+0xe4>
        serialGetHumidityZero();
 80844da:	f7ff fa09 	bl	80838f0 <_Z21serialGetHumidityZerov>
 80844de:	e793      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'q'){
 80844e0:	2871      	cmp	r0, #113	; 0x71
 80844e2:	d107      	bne.n	80844f4 <_Z10serialMenuv+0xf8>
        Serial.println("Serial debugging enabled.");
 80844e4:	f004 fcf0 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80844e8:	4974      	ldr	r1, [pc, #464]	; (80846bc <_Z10serialMenuv+0x2c0>)
 80844ea:	f003 ff9a 	bl	8088422 <_ZN5Print7printlnEPKc>
        debugging_enabled = 1;
 80844ee:	4d74      	ldr	r5, [pc, #464]	; (80846c0 <_Z10serialMenuv+0x2c4>)
 80844f0:	2301      	movs	r3, #1
 80844f2:	e008      	b.n	8084506 <_Z10serialMenuv+0x10a>
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
 80844f4:	2872      	cmp	r0, #114	; 0x72
 80844f6:	d10e      	bne.n	8084516 <_Z10serialMenuv+0x11a>
        Serial.println("Serial debugging disabled.");
 80844f8:	f004 fce6 	bl	8088ec8 <_Z16_fetch_usbserialv>
        debugging_enabled = 0;
 80844fc:	4d70      	ldr	r5, [pc, #448]	; (80846c0 <_Z10serialMenuv+0x2c4>)
    }else if(incomingByte == 'q'){
        Serial.println("Serial debugging enabled.");
        debugging_enabled = 1;
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
        Serial.println("Serial debugging disabled.");
 80844fe:	4971      	ldr	r1, [pc, #452]	; (80846c4 <_Z10serialMenuv+0x2c8>)
 8084500:	f003 ff8f 	bl	8088422 <_ZN5Print7printlnEPKc>
        debugging_enabled = 0;
 8084504:	2300      	movs	r3, #0
 8084506:	602b      	str	r3, [r5, #0]
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8084508:	f004 ffda 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808450c:	4629      	mov	r1, r5
 808450e:	2048      	movs	r0, #72	; 0x48
 8084510:	f7fc fa55 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
 8084514:	e778      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 's'){
 8084516:	2873      	cmp	r0, #115	; 0x73
 8084518:	d10b      	bne.n	8084532 <_Z10serialMenuv+0x136>
        Serial.println(String(HEADER_STRING));
 808451a:	f004 fcd5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808451e:	4605      	mov	r5, r0
 8084520:	4969      	ldr	r1, [pc, #420]	; (80846c8 <_Z10serialMenuv+0x2cc>)
 8084522:	a808      	add	r0, sp, #32
 8084524:	f003 fddf 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8084528:	9908      	ldr	r1, [sp, #32]
 808452a:	4628      	mov	r0, r5
 808452c:	f003 ff79 	bl	8088422 <_ZN5Print7printlnEPKc>
 8084530:	e364      	b.n	8084bfc <_Z10serialMenuv+0x800>
    }else if(incomingByte == 't'){
 8084532:	2874      	cmp	r0, #116	; 0x74
 8084534:	d102      	bne.n	808453c <_Z10serialMenuv+0x140>
        serialGetTimeDate();
 8084536:	f7fe fa5b 	bl	80829f0 <_Z17serialGetTimeDatev>
 808453a:	e765      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'u'){
 808453c:	2875      	cmp	r0, #117	; 0x75
 808453e:	d102      	bne.n	8084546 <_Z10serialMenuv+0x14a>
        serialGetZone();
 8084540:	f7fe faa4 	bl	8082a8c <_Z13serialGetZonev>
 8084544:	e760      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'v'){
 8084546:	2876      	cmp	r0, #118	; 0x76
 8084548:	d102      	bne.n	8084550 <_Z10serialMenuv+0x154>
        serialGetDeviceId();
 808454a:	f7fe f995 	bl	8082878 <_Z17serialGetDeviceIdv>
 808454e:	e75b      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'w'){
 8084550:	2877      	cmp	r0, #119	; 0x77
 8084552:	d102      	bne.n	808455a <_Z10serialMenuv+0x15e>
        serialGetWifiCredentials();
 8084554:	f7fe f876 	bl	8082644 <_Z24serialGetWifiCredentialsv>
 8084558:	e756      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'y'){
 808455a:	2879      	cmp	r0, #121	; 0x79
 808455c:	d10d      	bne.n	808457a <_Z10serialMenuv+0x17e>
        if(serial_cellular_enabled == 0){
 808455e:	4d5b      	ldr	r5, [pc, #364]	; (80846cc <_Z10serialMenuv+0x2d0>)
 8084560:	682b      	ldr	r3, [r5, #0]
 8084562:	b91b      	cbnz	r3, 808456c <_Z10serialMenuv+0x170>
            Serial.println("Enabling Cellular.");
 8084564:	f004 fcb0 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084568:	4959      	ldr	r1, [pc, #356]	; (80846d0 <_Z10serialMenuv+0x2d4>)
 808456a:	e002      	b.n	8084572 <_Z10serialMenuv+0x176>
        }else{
            Serial.println("Cellular already enabled.");
 808456c:	f004 fcac 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084570:	4958      	ldr	r1, [pc, #352]	; (80846d4 <_Z10serialMenuv+0x2d8>)
 8084572:	f003 ff56 	bl	8088422 <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 1;
 8084576:	2301      	movs	r3, #1
 8084578:	e014      	b.n	80845a4 <_Z10serialMenuv+0x1a8>
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
    }else if(incomingByte == 'z'){
 808457a:	287a      	cmp	r0, #122	; 0x7a
 808457c:	d118      	bne.n	80845b0 <_Z10serialMenuv+0x1b4>
        if(serial_cellular_enabled == 1){
 808457e:	4d53      	ldr	r5, [pc, #332]	; (80846cc <_Z10serialMenuv+0x2d0>)
 8084580:	682b      	ldr	r3, [r5, #0]
 8084582:	2b01      	cmp	r3, #1
 8084584:	d108      	bne.n	8084598 <_Z10serialMenuv+0x19c>
            Serial.println("Disabling Cellular");
 8084586:	f004 fc9f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808458a:	4953      	ldr	r1, [pc, #332]	; (80846d8 <_Z10serialMenuv+0x2dc>)
 808458c:	f003 ff49 	bl	8088422 <_ZN5Print7printlnEPKc>
            Cellular.off();
 8084590:	4852      	ldr	r0, [pc, #328]	; (80846dc <_Z10serialMenuv+0x2e0>)
 8084592:	f7fc fa46 	bl	8080a22 <_ZN5spark13CellularClass3offEv>
 8084596:	e004      	b.n	80845a2 <_Z10serialMenuv+0x1a6>
        }else{
            Serial.println("Cellular already disabled.");
 8084598:	f004 fc96 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808459c:	4950      	ldr	r1, [pc, #320]	; (80846e0 <_Z10serialMenuv+0x2e4>)
 808459e:	f003 ff40 	bl	8088422 <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 0;
 80845a2:	2300      	movs	r3, #0
 80845a4:	602b      	str	r3, [r5, #0]
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 80845a6:	f004 ff8b 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80845aa:	4948      	ldr	r1, [pc, #288]	; (80846cc <_Z10serialMenuv+0x2d0>)
 80845ac:	2044      	movs	r0, #68	; 0x44
 80845ae:	e7af      	b.n	8084510 <_Z10serialMenuv+0x114>
    }else if(incomingByte == 'F'){
 80845b0:	2846      	cmp	r0, #70	; 0x46
 80845b2:	d10f      	bne.n	80845d4 <_Z10serialMenuv+0x1d8>
        if(temperature_units == CELCIUS){
 80845b4:	4b4b      	ldr	r3, [pc, #300]	; (80846e4 <_Z10serialMenuv+0x2e8>)
 80845b6:	681a      	ldr	r2, [r3, #0]
 80845b8:	2a01      	cmp	r2, #1
 80845ba:	d101      	bne.n	80845c0 <_Z10serialMenuv+0x1c4>
            temperature_units = FARENHEIT;
 80845bc:	2200      	movs	r2, #0
 80845be:	e00f      	b.n	80845e0 <_Z10serialMenuv+0x1e4>

        }else{
            Serial.println("Temperature units already set to Fareneit.");
 80845c0:	f004 fc82 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80845c4:	4948      	ldr	r1, [pc, #288]	; (80846e8 <_Z10serialMenuv+0x2ec>)
 80845c6:	f003 ff2c 	bl	8088422 <_ZN5Print7printlnEPKc>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 80845ca:	f004 ff79 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80845ce:	4945      	ldr	r1, [pc, #276]	; (80846e4 <_Z10serialMenuv+0x2e8>)
 80845d0:	2060      	movs	r0, #96	; 0x60
 80845d2:	e79d      	b.n	8084510 <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'C'){
 80845d4:	2843      	cmp	r0, #67	; 0x43
 80845d6:	d109      	bne.n	80845ec <_Z10serialMenuv+0x1f0>
        if(temperature_units == FARENHEIT){
 80845d8:	4b42      	ldr	r3, [pc, #264]	; (80846e4 <_Z10serialMenuv+0x2e8>)
 80845da:	681a      	ldr	r2, [r3, #0]
 80845dc:	b912      	cbnz	r2, 80845e4 <_Z10serialMenuv+0x1e8>
            temperature_units = CELCIUS;
 80845de:	2201      	movs	r2, #1
 80845e0:	601a      	str	r2, [r3, #0]
 80845e2:	e7f2      	b.n	80845ca <_Z10serialMenuv+0x1ce>

        }else{
            Serial.println("Temperature units already set to Celcius.");
 80845e4:	f004 fc70 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80845e8:	4940      	ldr	r1, [pc, #256]	; (80846ec <_Z10serialMenuv+0x2f0>)
 80845ea:	e7ec      	b.n	80845c6 <_Z10serialMenuv+0x1ca>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
    }else if(incomingByte == 'D'){
 80845ec:	2844      	cmp	r0, #68	; 0x44
 80845ee:	d113      	bne.n	8084618 <_Z10serialMenuv+0x21c>
        if(new_temperature_sensor_enabled == 1){
 80845f0:	4b3f      	ldr	r3, [pc, #252]	; (80846f0 <_Z10serialMenuv+0x2f4>)
 80845f2:	681a      	ldr	r2, [r3, #0]
 80845f4:	2a01      	cmp	r2, #1
 80845f6:	d105      	bne.n	8084604 <_Z10serialMenuv+0x208>
            new_temperature_sensor_enabled = 0;
 80845f8:	2200      	movs	r2, #0
 80845fa:	601a      	str	r2, [r3, #0]
            Serial.println("Disabling new temperature sensor");
 80845fc:	f004 fc64 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084600:	493c      	ldr	r1, [pc, #240]	; (80846f4 <_Z10serialMenuv+0x2f8>)
 8084602:	e002      	b.n	808460a <_Z10serialMenuv+0x20e>
        }else{

            Serial.println("Temperature sensor already disabled");
 8084604:	f004 fc60 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084608:	493b      	ldr	r1, [pc, #236]	; (80846f8 <_Z10serialMenuv+0x2fc>)
 808460a:	f003 ff0a 	bl	8088422 <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 808460e:	f004 ff57 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8084612:	4937      	ldr	r1, [pc, #220]	; (80846f0 <_Z10serialMenuv+0x2f4>)
 8084614:	2068      	movs	r0, #104	; 0x68
 8084616:	e77b      	b.n	8084510 <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'E'){
 8084618:	2845      	cmp	r0, #69	; 0x45
 808461a:	d10d      	bne.n	8084638 <_Z10serialMenuv+0x23c>
        if(new_temperature_sensor_enabled == 1){
 808461c:	4b34      	ldr	r3, [pc, #208]	; (80846f0 <_Z10serialMenuv+0x2f4>)
 808461e:	681a      	ldr	r2, [r3, #0]
 8084620:	2a01      	cmp	r2, #1
 8084622:	d103      	bne.n	808462c <_Z10serialMenuv+0x230>
            Serial.println("Temperature sensor already enabled");
 8084624:	f004 fc50 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084628:	4934      	ldr	r1, [pc, #208]	; (80846fc <_Z10serialMenuv+0x300>)
 808462a:	e7ee      	b.n	808460a <_Z10serialMenuv+0x20e>
        }else{
            new_temperature_sensor_enabled = 1;
 808462c:	2201      	movs	r2, #1
 808462e:	601a      	str	r2, [r3, #0]
            Serial.println("Temperatue sensor now enabled");
 8084630:	f004 fc4a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084634:	4932      	ldr	r1, [pc, #200]	; (8084700 <_Z10serialMenuv+0x304>)
 8084636:	e7e8      	b.n	808460a <_Z10serialMenuv+0x20e>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled );

    }else if(incomingByte == 'G'){      //enable analog reading of ozone and disable esp reading of ozone
 8084638:	2847      	cmp	r0, #71	; 0x47
 808463a:	d113      	bne.n	8084664 <_Z10serialMenuv+0x268>
        if(ozone_analog_enabled == 1){
 808463c:	4b31      	ldr	r3, [pc, #196]	; (8084704 <_Z10serialMenuv+0x308>)
 808463e:	681a      	ldr	r2, [r3, #0]
 8084640:	2a01      	cmp	r2, #1
 8084642:	d103      	bne.n	808464c <_Z10serialMenuv+0x250>
            Serial.println("Analog reading of ozone already enabled");
 8084644:	f004 fc40 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084648:	492f      	ldr	r1, [pc, #188]	; (8084708 <_Z10serialMenuv+0x30c>)
 808464a:	e004      	b.n	8084656 <_Z10serialMenuv+0x25a>
        }else{
            ozone_analog_enabled = 1;
 808464c:	2201      	movs	r2, #1
 808464e:	601a      	str	r2, [r3, #0]
            Serial.println("Analog reading of ozone now enabled");
 8084650:	f004 fc3a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084654:	492d      	ldr	r1, [pc, #180]	; (808470c <_Z10serialMenuv+0x310>)
 8084656:	f003 fee4 	bl	8088422 <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 808465a:	f004 ff31 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808465e:	4929      	ldr	r1, [pc, #164]	; (8084704 <_Z10serialMenuv+0x308>)
 8084660:	206c      	movs	r0, #108	; 0x6c
 8084662:	e755      	b.n	8084510 <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'H'){      //disable analog reading of ozone and read from esp
 8084664:	2848      	cmp	r0, #72	; 0x48
 8084666:	d10c      	bne.n	8084682 <_Z10serialMenuv+0x286>
        if(ozone_analog_enabled == 0){
 8084668:	4b26      	ldr	r3, [pc, #152]	; (8084704 <_Z10serialMenuv+0x308>)
 808466a:	681a      	ldr	r2, [r3, #0]
 808466c:	b91a      	cbnz	r2, 8084676 <_Z10serialMenuv+0x27a>
            Serial.println("Digital reading of ozone already enabled");
 808466e:	f004 fc2b 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084672:	4927      	ldr	r1, [pc, #156]	; (8084710 <_Z10serialMenuv+0x314>)
 8084674:	e7ef      	b.n	8084656 <_Z10serialMenuv+0x25a>
        }else{
            ozone_analog_enabled = 0;
 8084676:	2200      	movs	r2, #0
 8084678:	601a      	str	r2, [r3, #0]
            Serial.println("Digital reading of ozone now enabled");
 808467a:	f004 fc25 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808467e:	4925      	ldr	r1, [pc, #148]	; (8084714 <_Z10serialMenuv+0x318>)
 8084680:	e7e9      	b.n	8084656 <_Z10serialMenuv+0x25a>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);

    }else if(incomingByte == 'I'){      //disable analog reading of ozone and read from esp
 8084682:	2849      	cmp	r0, #73	; 0x49
 8084684:	d102      	bne.n	808468c <_Z10serialMenuv+0x290>
        serialGetAverageTime();
 8084686:	f7fe fa4d 	bl	8082b24 <_Z20serialGetAverageTimev>
 808468a:	e6bd      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'J'){
 808468c:	284a      	cmp	r0, #74	; 0x4a
 808468e:	d105      	bne.n	808469c <_Z10serialMenuv+0x2a0>
        resetESP();
 8084690:	f7fd fba6 	bl	8081de0 <_Z8resetESPv>
        Serial.println("ESP reset!");
 8084694:	f004 fc18 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084698:	491f      	ldr	r1, [pc, #124]	; (8084718 <_Z10serialMenuv+0x31c>)
 808469a:	e04f      	b.n	808473c <_Z10serialMenuv+0x340>
    }else if(incomingByte == 'K'){
 808469c:	284b      	cmp	r0, #75	; 0x4b
 808469e:	d13f      	bne.n	8084720 <_Z10serialMenuv+0x324>
      Serial.println("Outputting GPS continuously");
 80846a0:	f004 fc12 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80846a4:	491d      	ldr	r1, [pc, #116]	; (808471c <_Z10serialMenuv+0x320>)
 80846a6:	f003 febc 	bl	8088422 <_ZN5Print7printlnEPKc>
      echoGps();
 80846aa:	f7fc fda7 	bl	80811fc <_Z7echoGpsv>
 80846ae:	e6ab      	b.n	8084408 <_Z10serialMenuv+0xc>
 80846b0:	20000768 	.word	0x20000768
 80846b4:	200006e4 	.word	0x200006e4
 80846b8:	0808f8de 	.word	0x0808f8de
 80846bc:	0808f8e4 	.word	0x0808f8e4
 80846c0:	20000ac4 	.word	0x20000ac4
 80846c4:	0808f8fe 	.word	0x0808f8fe
 80846c8:	0808e17b 	.word	0x0808e17b
 80846cc:	2000021c 	.word	0x2000021c
 80846d0:	0808f919 	.word	0x0808f919
 80846d4:	0808f92c 	.word	0x0808f92c
 80846d8:	0808f946 	.word	0x0808f946
 80846dc:	20000f14 	.word	0x20000f14
 80846e0:	0808f959 	.word	0x0808f959
 80846e4:	200006a4 	.word	0x200006a4
 80846e8:	0808f974 	.word	0x0808f974
 80846ec:	0808f99f 	.word	0x0808f99f
 80846f0:	20000760 	.word	0x20000760
 80846f4:	0808f9c9 	.word	0x0808f9c9
 80846f8:	0808f9ea 	.word	0x0808f9ea
 80846fc:	0808fa0e 	.word	0x0808fa0e
 8084700:	0808fa31 	.word	0x0808fa31
 8084704:	20000b20 	.word	0x20000b20
 8084708:	0808fa4f 	.word	0x0808fa4f
 808470c:	0808fa77 	.word	0x0808fa77
 8084710:	0808fa9b 	.word	0x0808fa9b
 8084714:	0808fac4 	.word	0x0808fac4
 8084718:	0808e425 	.word	0x0808e425
 808471c:	0808fae9 	.word	0x0808fae9
    }else if(incomingByte == 'L'){
 8084720:	284c      	cmp	r0, #76	; 0x4c
 8084722:	d102      	bne.n	808472a <_Z10serialMenuv+0x32e>
      serialResetSettings();
 8084724:	f7fe f92c 	bl	8082980 <_Z19serialResetSettingsv>
 8084728:	e66e      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'M'){
 808472a:	284d      	cmp	r0, #77	; 0x4d
 808472c:	d110      	bne.n	8084750 <_Z10serialMenuv+0x354>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 1){
 808472e:	4daf      	ldr	r5, [pc, #700]	; (80849ec <_Z10serialMenuv+0x5f0>)
 8084730:	682b      	ldr	r3, [r5, #0]
 8084732:	2b01      	cmp	r3, #1
 8084734:	d105      	bne.n	8084742 <_Z10serialMenuv+0x346>
          Serial.println("Battery threshold already enabled");
 8084736:	f004 fbc7 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808473a:	49ad      	ldr	r1, [pc, #692]	; (80849f0 <_Z10serialMenuv+0x5f4>)
 808473c:	f003 fe71 	bl	8088422 <_ZN5Print7printlnEPKc>
 8084740:	e662      	b.n	8084408 <_Z10serialMenuv+0xc>
      }else{
          Serial.println("Enabling battery threshold limiting");
 8084742:	f004 fbc1 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084746:	49ab      	ldr	r1, [pc, #684]	; (80849f4 <_Z10serialMenuv+0x5f8>)
 8084748:	f003 fe6b 	bl	8088422 <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 1;
 808474c:	2301      	movs	r3, #1
 808474e:	e00e      	b.n	808476e <_Z10serialMenuv+0x372>
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
      }

    }else if(incomingByte == 'N'){
 8084750:	284e      	cmp	r0, #78	; 0x4e
 8084752:	d112      	bne.n	808477a <_Z10serialMenuv+0x37e>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 0){
 8084754:	4da5      	ldr	r5, [pc, #660]	; (80849ec <_Z10serialMenuv+0x5f0>)
 8084756:	682b      	ldr	r3, [r5, #0]
 8084758:	b91b      	cbnz	r3, 8084762 <_Z10serialMenuv+0x366>
          Serial.println("Battery threshold already disabled");
 808475a:	f004 fbb5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808475e:	49a6      	ldr	r1, [pc, #664]	; (80849f8 <_Z10serialMenuv+0x5fc>)
 8084760:	e7ec      	b.n	808473c <_Z10serialMenuv+0x340>
      }else{
          Serial.println("Disabling battery threshold limiting");
 8084762:	f004 fbb1 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084766:	49a5      	ldr	r1, [pc, #660]	; (80849fc <_Z10serialMenuv+0x600>)
 8084768:	f003 fe5b 	bl	8088422 <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 0;
 808476c:	2300      	movs	r3, #0
 808476e:	602b      	str	r3, [r5, #0]
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8084770:	f004 fea6 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8084774:	4629      	mov	r1, r5
 8084776:	2078      	movs	r0, #120	; 0x78
 8084778:	e6ca      	b.n	8084510 <_Z10serialMenuv+0x114>
      }

    }else if(incomingByte == 'O'){
 808477a:	284f      	cmp	r0, #79	; 0x4f
 808477c:	d107      	bne.n	808478e <_Z10serialMenuv+0x392>
        //Serial.println("Changing frequency for gps");
        //changeFrequency();
        Serial.println("Enabling low power for gps");
 808477e:	f004 fba3 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084782:	499f      	ldr	r1, [pc, #636]	; (8084a00 <_Z10serialMenuv+0x604>)
 8084784:	f003 fe4d 	bl	8088422 <_ZN5Print7printlnEPKc>
        enableLowPowerGPS();
 8084788:	f7fc fd9e 	bl	80812c8 <_Z17enableLowPowerGPSv>
 808478c:	e63c      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte  == 'P'){
 808478e:	2850      	cmp	r0, #80	; 0x50
 8084790:	d106      	bne.n	80847a0 <_Z10serialMenuv+0x3a4>
        Serial.println("Turning off batfet");
 8084792:	f004 fb99 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084796:	499b      	ldr	r1, [pc, #620]	; (8084a04 <_Z10serialMenuv+0x608>)
 8084798:	f003 fe43 	bl	8088422 <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01101011);   //turn off batfet
 808479c:	216b      	movs	r1, #107	; 0x6b
 808479e:	e007      	b.n	80847b0 <_Z10serialMenuv+0x3b4>
    }else if(incomingByte == 'Q'){
 80847a0:	2851      	cmp	r0, #81	; 0x51
 80847a2:	d109      	bne.n	80847b8 <_Z10serialMenuv+0x3bc>

        Serial.println("Allowing batfet to turn on");
 80847a4:	f004 fb90 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80847a8:	4997      	ldr	r1, [pc, #604]	; (8084a08 <_Z10serialMenuv+0x60c>)
 80847aa:	f003 fe3a 	bl	8088422 <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 80847ae:	214b      	movs	r1, #75	; 0x4b
 80847b0:	2007      	movs	r0, #7
 80847b2:	f7fc f9f9 	bl	8080ba8 <_Z13writeRegisterhh>
 80847b6:	e627      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'R'){
 80847b8:	2852      	cmp	r0, #82	; 0x52
 80847ba:	d117      	bne.n	80847ec <_Z10serialMenuv+0x3f0>
        if(abc_logic_enabled){
 80847bc:	4d93      	ldr	r5, [pc, #588]	; (8084a0c <_Z10serialMenuv+0x610>)
 80847be:	682b      	ldr	r3, [r5, #0]
 80847c0:	b183      	cbz	r3, 80847e4 <_Z10serialMenuv+0x3e8>
            Serial.println("Disabling ABC logic for CO2 sensor");
 80847c2:	f004 fb81 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80847c6:	4992      	ldr	r1, [pc, #584]	; (8084a10 <_Z10serialMenuv+0x614>)
 80847c8:	f003 fe2b 	bl	8088422 <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 0;
 80847cc:	2300      	movs	r3, #0
 80847ce:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80847d0:	f004 fe76 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 80847d4:	4629      	mov	r1, r5
 80847d6:	207c      	movs	r0, #124	; 0x7c
 80847d8:	f7fc f8f1 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
            t6713.disableABCLogic();
 80847dc:	488d      	ldr	r0, [pc, #564]	; (8084a14 <_Z10serialMenuv+0x618>)
 80847de:	f000 fecc 	bl	808557a <_ZN13Telaire_T671315disableABCLogicEv>
 80847e2:	e611      	b.n	8084408 <_Z10serialMenuv+0xc>
        }else{
            Serial.println("ABC logic already disabled");
 80847e4:	f004 fb70 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80847e8:	498b      	ldr	r1, [pc, #556]	; (8084a18 <_Z10serialMenuv+0x61c>)
 80847ea:	e7a7      	b.n	808473c <_Z10serialMenuv+0x340>
        }

    }else if(incomingByte == 'S'){
 80847ec:	2853      	cmp	r0, #83	; 0x53
 80847ee:	d117      	bne.n	8084820 <_Z10serialMenuv+0x424>
        if(!abc_logic_enabled){
 80847f0:	4d86      	ldr	r5, [pc, #536]	; (8084a0c <_Z10serialMenuv+0x610>)
 80847f2:	682b      	ldr	r3, [r5, #0]
 80847f4:	b983      	cbnz	r3, 8084818 <_Z10serialMenuv+0x41c>
            Serial.println("Enabling abc logic for CO2 sensor");
 80847f6:	f004 fb67 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80847fa:	4988      	ldr	r1, [pc, #544]	; (8084a1c <_Z10serialMenuv+0x620>)
 80847fc:	f003 fe11 	bl	8088422 <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 1;
 8084800:	2301      	movs	r3, #1
 8084802:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8084804:	f004 fe5c 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8084808:	4629      	mov	r1, r5
 808480a:	207c      	movs	r0, #124	; 0x7c
 808480c:	f7fc f8d7 	bl	80809be <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.18>
            t6713.enableABCLogic();
 8084810:	4880      	ldr	r0, [pc, #512]	; (8084a14 <_Z10serialMenuv+0x618>)
 8084812:	f000 fed7 	bl	80855c4 <_ZN13Telaire_T671314enableABCLogicEv>
 8084816:	e5f7      	b.n	8084408 <_Z10serialMenuv+0xc>
        }else{
            Serial.println("ABC logic already enabled");
 8084818:	f004 fb56 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808481c:	4980      	ldr	r1, [pc, #512]	; (8084a20 <_Z10serialMenuv+0x624>)
 808481e:	e78d      	b.n	808473c <_Z10serialMenuv+0x340>
        }
    }else if(incomingByte == 'T'){
 8084820:	2854      	cmp	r0, #84	; 0x54
 8084822:	d115      	bne.n	8084850 <_Z10serialMenuv+0x454>
        if(!hih8120_enabled){
 8084824:	4d7f      	ldr	r5, [pc, #508]	; (8084a24 <_Z10serialMenuv+0x628>)
 8084826:	682b      	ldr	r3, [r5, #0]
 8084828:	b933      	cbnz	r3, 8084838 <_Z10serialMenuv+0x43c>
            Serial.println("Enabling HIH8120 RH sensor");
 808482a:	f004 fb4d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808482e:	497e      	ldr	r1, [pc, #504]	; (8084a28 <_Z10serialMenuv+0x62c>)
 8084830:	f003 fdf7 	bl	8088422 <_ZN5Print7printlnEPKc>
            hih8120_enabled = 1;
 8084834:	2301      	movs	r3, #1
 8084836:	e005      	b.n	8084844 <_Z10serialMenuv+0x448>
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);

        }else{
            Serial.println("Disabling HIH8120 RH sensor");
 8084838:	f004 fb46 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808483c:	497b      	ldr	r1, [pc, #492]	; (8084a2c <_Z10serialMenuv+0x630>)
 808483e:	f003 fdf0 	bl	8088422 <_ZN5Print7printlnEPKc>
            hih8120_enabled = 0;
 8084842:	2300      	movs	r3, #0
 8084844:	602b      	str	r3, [r5, #0]
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8084846:	f004 fe3b 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808484a:	4629      	mov	r1, r5
 808484c:	2080      	movs	r0, #128	; 0x80
 808484e:	e65f      	b.n	8084510 <_Z10serialMenuv+0x114>
        }

    }else if(incomingByte == 'U'){
 8084850:	2855      	cmp	r0, #85	; 0x55
 8084852:	d115      	bne.n	8084880 <_Z10serialMenuv+0x484>
        if(!CO_socket){
 8084854:	4d76      	ldr	r5, [pc, #472]	; (8084a30 <_Z10serialMenuv+0x634>)
 8084856:	682b      	ldr	r3, [r5, #0]
 8084858:	b933      	cbnz	r3, 8084868 <_Z10serialMenuv+0x46c>
            Serial.println("Now reading CO from U20-Alpha2");
 808485a:	f004 fb35 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808485e:	4975      	ldr	r1, [pc, #468]	; (8084a34 <_Z10serialMenuv+0x638>)
 8084860:	f003 fddf 	bl	8088422 <_ZN5Print7printlnEPKc>
            CO_socket = 1;
 8084864:	2301      	movs	r3, #1
 8084866:	e005      	b.n	8084874 <_Z10serialMenuv+0x478>
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);

        }else{
            Serial.println("Now reading CO from U19-Alpha1");
 8084868:	f004 fb2e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808486c:	4972      	ldr	r1, [pc, #456]	; (8084a38 <_Z10serialMenuv+0x63c>)
 808486e:	f003 fdd8 	bl	8088422 <_ZN5Print7printlnEPKc>
            CO_socket = 0;
 8084872:	2300      	movs	r3, #0
 8084874:	602b      	str	r3, [r5, #0]
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8084876:	f004 fe23 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808487a:	4629      	mov	r1, r5
 808487c:	2084      	movs	r0, #132	; 0x84
 808487e:	e647      	b.n	8084510 <_Z10serialMenuv+0x114>
        }
    }else if(incomingByte == 'V'){
 8084880:	2856      	cmp	r0, #86	; 0x56
 8084882:	d108      	bne.n	8084896 <_Z10serialMenuv+0x49a>
        Serial.println("Reseting the CO2 sensor");
 8084884:	f004 fb20 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084888:	496c      	ldr	r1, [pc, #432]	; (8084a3c <_Z10serialMenuv+0x640>)
 808488a:	f003 fdca 	bl	8088422 <_ZN5Print7printlnEPKc>
        t6713.resetSensor();
 808488e:	4861      	ldr	r0, [pc, #388]	; (8084a14 <_Z10serialMenuv+0x618>)
 8084890:	f000 fe4e 	bl	8085530 <_ZN13Telaire_T671311resetSensorEv>
 8084894:	e5b8      	b.n	8084408 <_Z10serialMenuv+0xc>

    }else if(incomingByte == '1'){
 8084896:	2831      	cmp	r0, #49	; 0x31
 8084898:	d102      	bne.n	80848a0 <_Z10serialMenuv+0x4a4>
        serialGetLowerLimit();
 808489a:	f7ff f885 	bl	80839a8 <_Z19serialGetLowerLimitv>
 808489e:	e5b3      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '2'){
 80848a0:	2832      	cmp	r0, #50	; 0x32
 80848a2:	d102      	bne.n	80848aa <_Z10serialMenuv+0x4ae>
        serialGetUpperLimit();
 80848a4:	f7ff f904 	bl	8083ab0 <_Z19serialGetUpperLimitv>
 80848a8:	e5ae      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '3'){
 80848aa:	2833      	cmp	r0, #51	; 0x33
 80848ac:	d116      	bne.n	80848dc <_Z10serialMenuv+0x4e0>
        Serial.print("APP Version: ");
 80848ae:	f004 fb0b 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80848b2:	4963      	ldr	r1, [pc, #396]	; (8084a40 <_Z10serialMenuv+0x644>)
 80848b4:	f003 fda2 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(APP_VERSION);
 80848b8:	f004 fb06 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80848bc:	220a      	movs	r2, #10
 80848be:	2146      	movs	r1, #70	; 0x46
 80848c0:	f003 fe1d 	bl	80884fe <_ZN5Print7printlnEii>
        Serial.print("Build: ");
 80848c4:	f004 fb00 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80848c8:	495e      	ldr	r1, [pc, #376]	; (8084a44 <_Z10serialMenuv+0x648>)
 80848ca:	f003 fd97 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(BUILD_VERSION);
 80848ce:	f004 fafb 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80848d2:	220a      	movs	r2, #10
 80848d4:	210d      	movs	r1, #13
 80848d6:	f003 fe12 	bl	80884fe <_ZN5Print7printlnEii>
 80848da:	e595      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '4'){
 80848dc:	2834      	cmp	r0, #52	; 0x34
 80848de:	d10d      	bne.n	80848fc <_Z10serialMenuv+0x500>
        if(ozone_enabled == 0){
 80848e0:	4d59      	ldr	r5, [pc, #356]	; (8084a48 <_Z10serialMenuv+0x64c>)
 80848e2:	682b      	ldr	r3, [r5, #0]
 80848e4:	b91b      	cbnz	r3, 80848ee <_Z10serialMenuv+0x4f2>
            Serial.println("Enabling Ozone");
 80848e6:	f004 faef 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80848ea:	4958      	ldr	r1, [pc, #352]	; (8084a4c <_Z10serialMenuv+0x650>)
 80848ec:	e002      	b.n	80848f4 <_Z10serialMenuv+0x4f8>
        }else{
            Serial.println("Ozone already enabled");
 80848ee:	f004 faeb 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80848f2:	4957      	ldr	r1, [pc, #348]	; (8084a50 <_Z10serialMenuv+0x654>)
 80848f4:	f003 fd95 	bl	8088422 <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 1;
 80848f8:	2301      	movs	r3, #1
 80848fa:	e00f      	b.n	808491c <_Z10serialMenuv+0x520>
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
    }else if(incomingByte == '5'){
 80848fc:	2835      	cmp	r0, #53	; 0x35
 80848fe:	d113      	bne.n	8084928 <_Z10serialMenuv+0x52c>
        if(ozone_enabled == 1){
 8084900:	4d51      	ldr	r5, [pc, #324]	; (8084a48 <_Z10serialMenuv+0x64c>)
 8084902:	682b      	ldr	r3, [r5, #0]
 8084904:	2b01      	cmp	r3, #1
 8084906:	d103      	bne.n	8084910 <_Z10serialMenuv+0x514>
            Serial.println("Disabling Ozone");
 8084908:	f004 fade 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808490c:	4951      	ldr	r1, [pc, #324]	; (8084a54 <_Z10serialMenuv+0x658>)
 808490e:	e002      	b.n	8084916 <_Z10serialMenuv+0x51a>
        }else{
            Serial.println("Ozone already disabled");
 8084910:	f004 fada 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084914:	4950      	ldr	r1, [pc, #320]	; (8084a58 <_Z10serialMenuv+0x65c>)
 8084916:	f003 fd84 	bl	8088422 <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 0;
 808491a:	2300      	movs	r3, #0
 808491c:	602b      	str	r3, [r5, #0]
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808491e:	f004 fdcf 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8084922:	4949      	ldr	r1, [pc, #292]	; (8084a48 <_Z10serialMenuv+0x64c>)
 8084924:	2058      	movs	r0, #88	; 0x58
 8084926:	e5f3      	b.n	8084510 <_Z10serialMenuv+0x114>
    }else if(incomingByte == '6'){
 8084928:	2836      	cmp	r0, #54	; 0x36
 808492a:	d10d      	bne.n	8084948 <_Z10serialMenuv+0x54c>
        if(voc_enabled == 0){
 808492c:	4d4b      	ldr	r5, [pc, #300]	; (8084a5c <_Z10serialMenuv+0x660>)
 808492e:	682b      	ldr	r3, [r5, #0]
 8084930:	b91b      	cbnz	r3, 808493a <_Z10serialMenuv+0x53e>
            Serial.println("Enabling VOC's");
 8084932:	f004 fac9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084936:	494a      	ldr	r1, [pc, #296]	; (8084a60 <_Z10serialMenuv+0x664>)
 8084938:	e002      	b.n	8084940 <_Z10serialMenuv+0x544>
        }else{
            Serial.println("VOC's already enabled");
 808493a:	f004 fac5 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808493e:	4949      	ldr	r1, [pc, #292]	; (8084a64 <_Z10serialMenuv+0x668>)
 8084940:	f003 fd6f 	bl	8088422 <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 1;
 8084944:	2301      	movs	r3, #1
 8084946:	e00f      	b.n	8084968 <_Z10serialMenuv+0x56c>
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
    }else if(incomingByte == '7'){
 8084948:	2837      	cmp	r0, #55	; 0x37
 808494a:	d113      	bne.n	8084974 <_Z10serialMenuv+0x578>
        if(voc_enabled == 1){
 808494c:	4d43      	ldr	r5, [pc, #268]	; (8084a5c <_Z10serialMenuv+0x660>)
 808494e:	682b      	ldr	r3, [r5, #0]
 8084950:	2b01      	cmp	r3, #1
 8084952:	d103      	bne.n	808495c <_Z10serialMenuv+0x560>
            Serial.println("Disabling VOC's");
 8084954:	f004 fab8 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084958:	4943      	ldr	r1, [pc, #268]	; (8084a68 <_Z10serialMenuv+0x66c>)
 808495a:	e002      	b.n	8084962 <_Z10serialMenuv+0x566>
        }else{
            Serial.println("VOC's already disabled");
 808495c:	f004 fab4 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084960:	4942      	ldr	r1, [pc, #264]	; (8084a6c <_Z10serialMenuv+0x670>)
 8084962:	f003 fd5e 	bl	8088422 <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 0;
 8084966:	2300      	movs	r3, #0
 8084968:	602b      	str	r3, [r5, #0]
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 808496a:	f004 fda9 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 808496e:	493b      	ldr	r1, [pc, #236]	; (8084a5c <_Z10serialMenuv+0x660>)
 8084970:	205c      	movs	r0, #92	; 0x5c
 8084972:	e5cd      	b.n	8084510 <_Z10serialMenuv+0x114>
    }else if(incomingByte == '8'){
 8084974:	2838      	cmp	r0, #56	; 0x38
 8084976:	d11e      	bne.n	80849b6 <_Z10serialMenuv+0x5ba>
        Serial.print("Fault: ");
 8084978:	f004 faa6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808497c:	493c      	ldr	r1, [pc, #240]	; (8084a70 <_Z10serialMenuv+0x674>)
 808497e:	f003 fd3d 	bl	80883fc <_ZN5Print5printEPKc>
        byte fault = pmic.getFault();
 8084982:	483c      	ldr	r0, [pc, #240]	; (8084a74 <_Z10serialMenuv+0x678>)
 8084984:	f003 f8e4 	bl	8087b50 <_ZN4PMIC8getFaultEv>
 8084988:	4605      	mov	r5, r0
        Serial.println(fault);
 808498a:	f004 fa9d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808498e:	220a      	movs	r2, #10
 8084990:	4629      	mov	r1, r5
 8084992:	f003 fd86 	bl	80884a2 <_ZN5Print7printlnEhi>
        Serial.print("System status: ");
 8084996:	f004 fa97 	bl	8088ec8 <_Z16_fetch_usbserialv>
 808499a:	4937      	ldr	r1, [pc, #220]	; (8084a78 <_Z10serialMenuv+0x67c>)
 808499c:	f003 fd2e 	bl	80883fc <_ZN5Print5printEPKc>
        byte systemStatus = pmic.getSystemStatus();
 80849a0:	4834      	ldr	r0, [pc, #208]	; (8084a74 <_Z10serialMenuv+0x678>)
 80849a2:	f003 f8d2 	bl	8087b4a <_ZN4PMIC15getSystemStatusEv>
 80849a6:	4605      	mov	r5, r0
        Serial.println(systemStatus);
 80849a8:	f004 fa8e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80849ac:	220a      	movs	r2, #10
 80849ae:	4629      	mov	r1, r5
 80849b0:	f003 fd77 	bl	80884a2 <_ZN5Print7printlnEhi>
 80849b4:	e528      	b.n	8084408 <_Z10serialMenuv+0xc>

    }else if(incomingByte == '9'){
 80849b6:	2839      	cmp	r0, #57	; 0x39
 80849b8:	d102      	bne.n	80849c0 <_Z10serialMenuv+0x5c4>
        serialIncreaseChargeCurrent();
 80849ba:	f7ff fb0f 	bl	8083fdc <_Z27serialIncreaseChargeCurrentv>
 80849be:	e523      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '0'){
 80849c0:	2830      	cmp	r0, #48	; 0x30
 80849c2:	d102      	bne.n	80849ca <_Z10serialMenuv+0x5ce>
        serialIncreaseInputCurrent();
 80849c4:	f7ff fac8 	bl	8083f58 <_Z26serialIncreaseInputCurrentv>
 80849c8:	e51e      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'A'){
 80849ca:	2841      	cmp	r0, #65	; 0x41
 80849cc:	d102      	bne.n	80849d4 <_Z10serialMenuv+0x5d8>
        readAlpha1Constantly();
 80849ce:	f7ff fcf5 	bl	80843bc <_Z20readAlpha1Constantlyv>
 80849d2:	e519      	b.n	8084408 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'B'){
 80849d4:	2842      	cmp	r0, #66	; 0x42
 80849d6:	d161      	bne.n	8084a9c <_Z10serialMenuv+0x6a0>
        if(output_only_particles == 1){
 80849d8:	4b28      	ldr	r3, [pc, #160]	; (8084a7c <_Z10serialMenuv+0x680>)
 80849da:	681a      	ldr	r2, [r3, #0]
 80849dc:	2a01      	cmp	r2, #1
 80849de:	d151      	bne.n	8084a84 <_Z10serialMenuv+0x688>
            output_only_particles = 0;
 80849e0:	2200      	movs	r2, #0
 80849e2:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting normally");
 80849e4:	f004 fa70 	bl	8088ec8 <_Z16_fetch_usbserialv>
 80849e8:	4925      	ldr	r1, [pc, #148]	; (8084a80 <_Z10serialMenuv+0x684>)
 80849ea:	e050      	b.n	8084a8e <_Z10serialMenuv+0x692>
 80849ec:	20000b2c 	.word	0x20000b2c
 80849f0:	0808fb05 	.word	0x0808fb05
 80849f4:	0808fb27 	.word	0x0808fb27
 80849f8:	0808fb4b 	.word	0x0808fb4b
 80849fc:	0808fb6e 	.word	0x0808fb6e
 8084a00:	0808fb93 	.word	0x0808fb93
 8084a04:	0808fbae 	.word	0x0808fbae
 8084a08:	0808fbc1 	.word	0x0808fbc1
 8084a0c:	20000804 	.word	0x20000804
 8084a10:	0808fbdc 	.word	0x0808fbdc
 8084a14:	20000b30 	.word	0x20000b30
 8084a18:	0808fbff 	.word	0x0808fbff
 8084a1c:	0808fc1a 	.word	0x0808fc1a
 8084a20:	0808fc3c 	.word	0x0808fc3c
 8084a24:	200001f0 	.word	0x200001f0
 8084a28:	0808fc56 	.word	0x0808fc56
 8084a2c:	0808fc71 	.word	0x0808fc71
 8084a30:	200006e0 	.word	0x200006e0
 8084a34:	0808fc8d 	.word	0x0808fc8d
 8084a38:	0808fcac 	.word	0x0808fcac
 8084a3c:	0808fccb 	.word	0x0808fccb
 8084a40:	0808fce3 	.word	0x0808fce3
 8084a44:	0808e43d 	.word	0x0808e43d
 8084a48:	20000a00 	.word	0x20000a00
 8084a4c:	0808fcf1 	.word	0x0808fcf1
 8084a50:	0808fd00 	.word	0x0808fd00
 8084a54:	0808fd16 	.word	0x0808fd16
 8084a58:	0808fd26 	.word	0x0808fd26
 8084a5c:	20000b34 	.word	0x20000b34
 8084a60:	0808fd3d 	.word	0x0808fd3d
 8084a64:	0808fd4c 	.word	0x0808fd4c
 8084a68:	0808fd62 	.word	0x0808fd62
 8084a6c:	0808fd72 	.word	0x0808fd72
 8084a70:	0808fd89 	.word	0x0808fd89
 8084a74:	20000a9c 	.word	0x20000a9c
 8084a78:	0808fd91 	.word	0x0808fd91
 8084a7c:	200007ac 	.word	0x200007ac
 8084a80:	0808fda1 	.word	0x0808fda1
        }else{
            output_only_particles = 1;
 8084a84:	2201      	movs	r2, #1
 8084a86:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting only PM");
 8084a88:	f004 fa1e 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084a8c:	4967      	ldr	r1, [pc, #412]	; (8084c2c <_Z10serialMenuv+0x830>)
 8084a8e:	f003 fcc8 	bl	8088422 <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8084a92:	f004 fd15 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8084a96:	4966      	ldr	r1, [pc, #408]	; (8084c30 <_Z10serialMenuv+0x834>)
 8084a98:	2064      	movs	r0, #100	; 0x64
 8084a9a:	e539      	b.n	8084510 <_Z10serialMenuv+0x114>

    }else if(incomingByte == '!'){
 8084a9c:	2821      	cmp	r0, #33	; 0x21
 8084a9e:	d135      	bne.n	8084b0c <_Z10serialMenuv+0x710>

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 8084aa0:	f004 fa12 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084aa4:	4963      	ldr	r1, [pc, #396]	; (8084c34 <_Z10serialMenuv+0x838>)
 8084aa6:	f003 fcbc 	bl	8088422 <_ZN5Print7printlnEPKc>
        while(!Serial.available()){
 8084aaa:	f004 fa0d 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084aae:	6803      	ldr	r3, [r0, #0]
 8084ab0:	691b      	ldr	r3, [r3, #16]
 8084ab2:	4798      	blx	r3
 8084ab4:	4605      	mov	r5, r0
 8084ab6:	2800      	cmp	r0, #0
 8084ab8:	f47f aca6 	bne.w	8084408 <_Z10serialMenuv+0xc>
            if (! bme.performReading()) {
 8084abc:	485e      	ldr	r0, [pc, #376]	; (8084c38 <_Z10serialMenuv+0x83c>)
 8084abe:	f002 f901 	bl	8086cc4 <_ZN15Adafruit_BME68014performReadingEv>
 8084ac2:	b918      	cbnz	r0, 8084acc <_Z10serialMenuv+0x6d0>
              Serial.println("Failed to read BME680");
 8084ac4:	f004 fa00 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084ac8:	495c      	ldr	r1, [pc, #368]	; (8084c3c <_Z10serialMenuv+0x840>)
 8084aca:	e0ab      	b.n	8084c24 <_Z10serialMenuv+0x828>
              return;
            }else{
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 8084acc:	f004 f9fc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084ad0:	4607      	mov	r7, r0
 8084ad2:	68b0      	ldr	r0, [r6, #8]
 8084ad4:	f005 f814 	bl	8089b00 <__aeabi_f2d>
 8084ad8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8084adc:	6870      	ldr	r0, [r6, #4]
 8084ade:	f005 f80f 	bl	8089b00 <__aeabi_f2d>
 8084ae2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8084ae6:	6830      	ldr	r0, [r6, #0]
 8084ae8:	f005 f80a 	bl	8089b00 <__aeabi_f2d>
 8084aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8084af0:	4953      	ldr	r1, [pc, #332]	; (8084c40 <_Z10serialMenuv+0x844>)
 8084af2:	68f0      	ldr	r0, [r6, #12]
 8084af4:	f005 fd62 	bl	808a5bc <__aeabi_fdiv>
 8084af8:	f005 f802 	bl	8089b00 <__aeabi_f2d>
 8084afc:	4a51      	ldr	r2, [pc, #324]	; (8084c44 <_Z10serialMenuv+0x848>)
 8084afe:	e9cd 0100 	strd	r0, r1, [sp]
 8084b02:	4629      	mov	r1, r5
 8084b04:	4638      	mov	r0, r7
 8084b06:	f003 fdc1 	bl	808868c <_ZN5Print11printf_implEbPKcz>
 8084b0a:	e7ce      	b.n	8084aaa <_Z10serialMenuv+0x6ae>
            }
        }
    }else if(incomingByte == '@'){
 8084b0c:	2840      	cmp	r0, #64	; 0x40
 8084b0e:	d112      	bne.n	8084b36 <_Z10serialMenuv+0x73a>
        if(sensible_iot_en == 1){
 8084b10:	4d4d      	ldr	r5, [pc, #308]	; (8084c48 <_Z10serialMenuv+0x84c>)
 8084b12:	682b      	ldr	r3, [r5, #0]
 8084b14:	2b01      	cmp	r3, #1
 8084b16:	d10b      	bne.n	8084b30 <_Z10serialMenuv+0x734>
            Serial.println("Disabling sensible iot data push.");
 8084b18:	f004 f9d6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084b1c:	494b      	ldr	r1, [pc, #300]	; (8084c4c <_Z10serialMenuv+0x850>)
 8084b1e:	f003 fc80 	bl	8088422 <_ZN5Print7printlnEPKc>
            sensible_iot_en = 0;
 8084b22:	2300      	movs	r3, #0
 8084b24:	602b      	str	r3, [r5, #0]
            EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8084b26:	f004 fccb 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8084b2a:	4629      	mov	r1, r5
 8084b2c:	208c      	movs	r0, #140	; 0x8c
 8084b2e:	e4ef      	b.n	8084510 <_Z10serialMenuv+0x114>
        }else{
            serialSetSensibleIotEnable();
 8084b30:	f7fd fe60 	bl	80827f4 <_Z26serialSetSensibleIotEnablev>
 8084b34:	e468      	b.n	8084408 <_Z10serialMenuv+0xc>
            
        }
    }else if(incomingByte == '#'){
 8084b36:	2823      	cmp	r0, #35	; 0x23
 8084b38:	d115      	bne.n	8084b66 <_Z10serialMenuv+0x76a>
        if(car_topper_power_en == 1){
 8084b3a:	4d45      	ldr	r5, [pc, #276]	; (8084c50 <_Z10serialMenuv+0x854>)
 8084b3c:	682b      	ldr	r3, [r5, #0]
 8084b3e:	2b01      	cmp	r3, #1
 8084b40:	d105      	bne.n	8084b4e <_Z10serialMenuv+0x752>
            car_topper_power_en = 0;
 8084b42:	2300      	movs	r3, #0
 8084b44:	602b      	str	r3, [r5, #0]
            Serial.println("Disabling car topper power.  ");
 8084b46:	f004 f9bf 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084b4a:	4942      	ldr	r1, [pc, #264]	; (8084c54 <_Z10serialMenuv+0x858>)
 8084b4c:	e004      	b.n	8084b58 <_Z10serialMenuv+0x75c>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
        }else{
            car_topper_power_en = 1;
 8084b4e:	2301      	movs	r3, #1
 8084b50:	602b      	str	r3, [r5, #0]
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 8084b52:	f004 f9b9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084b56:	4940      	ldr	r1, [pc, #256]	; (8084c58 <_Z10serialMenuv+0x85c>)
 8084b58:	f003 fc63 	bl	8088422 <_ZN5Print7printlnEPKc>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8084b5c:	f004 fcb0 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8084b60:	4629      	mov	r1, r5
 8084b62:	2090      	movs	r0, #144	; 0x90
 8084b64:	e4d4      	b.n	8084510 <_Z10serialMenuv+0x114>
        }
    
    }else if(incomingByte == 'W'){
 8084b66:	2857      	cmp	r0, #87	; 0x57
 8084b68:	d116      	bne.n	8084b98 <_Z10serialMenuv+0x79c>
        if(google_location_en == 1){
 8084b6a:	4d3c      	ldr	r5, [pc, #240]	; (8084c5c <_Z10serialMenuv+0x860>)
 8084b6c:	682b      	ldr	r3, [r5, #0]
 8084b6e:	2b01      	cmp	r3, #1
 8084b70:	d106      	bne.n	8084b80 <_Z10serialMenuv+0x784>
            Serial.println("Disabling google location services.");
 8084b72:	f004 f9a9 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084b76:	493a      	ldr	r1, [pc, #232]	; (8084c60 <_Z10serialMenuv+0x864>)
 8084b78:	f003 fc53 	bl	8088422 <_ZN5Print7printlnEPKc>
            google_location_en = 0;
 8084b7c:	2300      	movs	r3, #0
 8084b7e:	e005      	b.n	8084b8c <_Z10serialMenuv+0x790>
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
        }else{
            Serial.println("Enabling google location services.");
 8084b80:	f004 f9a2 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084b84:	4937      	ldr	r1, [pc, #220]	; (8084c64 <_Z10serialMenuv+0x868>)
 8084b86:	f003 fc4c 	bl	8088422 <_ZN5Print7printlnEPKc>
            google_location_en = 1;
 8084b8a:	2301      	movs	r3, #1
 8084b8c:	602b      	str	r3, [r5, #0]
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 8084b8e:	f004 fc97 	bl	80894c0 <_Z21__fetch_global_EEPROMv>
 8084b92:	4629      	mov	r1, r5
 8084b94:	2088      	movs	r0, #136	; 0x88
 8084b96:	e4bb      	b.n	8084510 <_Z10serialMenuv+0x114>
        }
        
    }else if(incomingByte == 'X'){
 8084b98:	2858      	cmp	r0, #88	; 0x58
 8084b9a:	d107      	bne.n	8084bac <_Z10serialMenuv+0x7b0>
        //calibrate CO2 sensor
        //if(debugging_enabled){
            t6713.calibrate(1);
 8084b9c:	2101      	movs	r1, #1
 8084b9e:	4832      	ldr	r0, [pc, #200]	; (8084c68 <_Z10serialMenuv+0x86c>)
 8084ba0:	f000 fd36 	bl	8085610 <_ZN13Telaire_T67139calibrateEi>
        //}else{
         //   t6713.calibrate(0);
        //}
        
        co2_calibration_timer = 180;        //6 minutes if measurement cycle is 2 seconds
 8084ba4:	4b31      	ldr	r3, [pc, #196]	; (8084c6c <_Z10serialMenuv+0x870>)
 8084ba6:	22b4      	movs	r2, #180	; 0xb4
 8084ba8:	601a      	str	r2, [r3, #0]
 8084baa:	e42d      	b.n	8084408 <_Z10serialMenuv+0xc>
        
    
    }else if(incomingByte == 'Z'){
 8084bac:	285a      	cmp	r0, #90	; 0x5a
 8084bae:	d129      	bne.n	8084c04 <_Z10serialMenuv+0x808>
        Serial.println("Getting cellular information, this may take a while...");
 8084bb0:	f004 f98a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084bb4:	492e      	ldr	r1, [pc, #184]	; (8084c70 <_Z10serialMenuv+0x874>)
 8084bb6:	f003 fc34 	bl	8088422 <_ZN5Print7printlnEPKc>

        Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 8084bba:	492e      	ldr	r1, [pc, #184]	; (8084c74 <_Z10serialMenuv+0x878>)
 8084bbc:	a808      	add	r0, sp, #32
 8084bbe:	f002 fb57 	bl	8087270 <_ZNK19CellularHelperClass7getIMEIEv>
 8084bc2:	9a08      	ldr	r2, [sp, #32]
 8084bc4:	492c      	ldr	r1, [pc, #176]	; (8084c78 <_Z10serialMenuv+0x87c>)
 8084bc6:	482d      	ldr	r0, [pc, #180]	; (8084c7c <_Z10serialMenuv+0x880>)
 8084bc8:	f7fb ff38 	bl	8080a3c <_ZNK5spark6Logger4infoEPKcz>
 8084bcc:	a808      	add	r0, sp, #32
 8084bce:	f003 fa43 	bl	8088058 <_ZN6StringD1Ev>

        Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 8084bd2:	4928      	ldr	r1, [pc, #160]	; (8084c74 <_Z10serialMenuv+0x878>)
 8084bd4:	a808      	add	r0, sp, #32
 8084bd6:	f002 fb67 	bl	80872a8 <_ZNK19CellularHelperClass7getIMSIEv>
 8084bda:	9a08      	ldr	r2, [sp, #32]
 8084bdc:	4928      	ldr	r1, [pc, #160]	; (8084c80 <_Z10serialMenuv+0x884>)
 8084bde:	4827      	ldr	r0, [pc, #156]	; (8084c7c <_Z10serialMenuv+0x880>)
 8084be0:	f7fb ff2c 	bl	8080a3c <_ZNK5spark6Logger4infoEPKcz>
 8084be4:	a808      	add	r0, sp, #32
 8084be6:	f003 fa37 	bl	8088058 <_ZN6StringD1Ev>

        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 8084bea:	4922      	ldr	r1, [pc, #136]	; (8084c74 <_Z10serialMenuv+0x878>)
 8084bec:	a808      	add	r0, sp, #32
 8084bee:	f002 fb77 	bl	80872e0 <_ZNK19CellularHelperClass8getICCIDEv>
 8084bf2:	9a08      	ldr	r2, [sp, #32]
 8084bf4:	4923      	ldr	r1, [pc, #140]	; (8084c84 <_Z10serialMenuv+0x888>)
 8084bf6:	4821      	ldr	r0, [pc, #132]	; (8084c7c <_Z10serialMenuv+0x880>)
 8084bf8:	f7fb ff20 	bl	8080a3c <_ZNK5spark6Logger4infoEPKcz>
 8084bfc:	a808      	add	r0, sp, #32
 8084bfe:	f003 fa2b 	bl	8088058 <_ZN6StringD1Ev>
 8084c02:	e401      	b.n	8084408 <_Z10serialMenuv+0xc>
        //if(serial_cellular_enabled){

        //}else{
        //    Serial.println("Cellular not enabled.  Please enable cellular first!");
        //}
    }else if(incomingByte == '*'){
 8084c04:	282a      	cmp	r0, #42	; 0x2a
 8084c06:	d103      	bne.n	8084c10 <_Z10serialMenuv+0x814>
        outputCOtoPI();
 8084c08:	f7fd fbf8 	bl	80823fc <_Z12outputCOtoPIv>
 8084c0c:	f7ff bbfc 	b.w	8084408 <_Z10serialMenuv+0xc>

    }else if(incomingByte == '?'){
 8084c10:	283f      	cmp	r0, #63	; 0x3f
 8084c12:	f47f abf9 	bne.w	8084408 <_Z10serialMenuv+0xc>
        outputSerialMenuOptions();
 8084c16:	f7fe ffcf 	bl	8083bb8 <_Z23outputSerialMenuOptionsv>
 8084c1a:	f7ff bbf5 	b.w	8084408 <_Z10serialMenuv+0xc>
    }
  }
  Serial.println("Exiting serial menu...");
 8084c1e:	f004 f953 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084c22:	4919      	ldr	r1, [pc, #100]	; (8084c88 <_Z10serialMenuv+0x88c>)
 8084c24:	f003 fbfd 	bl	8088422 <_ZN5Print7printlnEPKc>

}
 8084c28:	b00d      	add	sp, #52	; 0x34
 8084c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084c2c:	0808fdb5 	.word	0x0808fdb5
 8084c30:	200007ac 	.word	0x200007ac
 8084c34:	0808fdc8 	.word	0x0808fdc8
 8084c38:	200006e4 	.word	0x200006e4
 8084c3c:	0808fe03 	.word	0x0808fe03
 8084c40:	42c80000 	.word	0x42c80000
 8084c44:	0808fe19 	.word	0x0808fe19
 8084c48:	20000810 	.word	0x20000810
 8084c4c:	0808fe4a 	.word	0x0808fe4a
 8084c50:	20000218 	.word	0x20000218
 8084c54:	0808fe6c 	.word	0x0808fe6c
 8084c58:	0808fe8a 	.word	0x0808fe8a
 8084c5c:	20000b24 	.word	0x20000b24
 8084c60:	0808fed2 	.word	0x0808fed2
 8084c64:	0808fef6 	.word	0x0808fef6
 8084c68:	20000b30 	.word	0x20000b30
 8084c6c:	200006a8 	.word	0x200006a8
 8084c70:	0808ff19 	.word	0x0808ff19
 8084c74:	20000b7c 	.word	0x20000b7c
 8084c78:	0808ff50 	.word	0x0808ff50
 8084c7c:	20000b84 	.word	0x20000b84
 8084c80:	0808ff58 	.word	0x0808ff58
 8084c84:	0808ff60 	.word	0x0808ff60
 8084c88:	0808ff69 	.word	0x0808ff69

08084c8c <loop>:
    

}


void loop() {
 8084c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Top of loop");
    measurement_number++;
 8084c8e:	4c70      	ldr	r4, [pc, #448]	; (8084e50 <loop+0x1c4>)

}


void loop() {
    Serial.println("Top of loop");
 8084c90:	f004 f91a 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084c94:	496f      	ldr	r1, [pc, #444]	; (8084e54 <loop+0x1c8>)
 8084c96:	f003 fbc4 	bl	8088422 <_ZN5Print7printlnEPKc>
    measurement_number++;
 8084c9a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8084c9e:	2200      	movs	r2, #0
 8084ca0:	4b6d      	ldr	r3, [pc, #436]	; (8084e58 <loop+0x1cc>)
 8084ca2:	f004 fdcf 	bl	8089844 <__adddf3>
 8084ca6:	e9c4 0100 	strd	r0, r1, [r4]
//read Carbon monoxide alphasense sensor
float readCO_A(void){
    float float_offset;
    float CO_float;
    
    CO_float = readAlpha1();
 8084caa:	f7ff fa05 	bl	80840b8 <_Z10readAlpha1v>
    Serial.println("Top of loop");
    measurement_number++;


    //read CO values and apply calibration factors
    CO_float_A = readCO_A();
 8084cae:	4b6b      	ldr	r3, [pc, #428]	; (8084e5c <loop+0x1d0>)
 8084cb0:	6018      	str	r0, [r3, #0]
float readCO_B(void){
    float float_offset;
    float CO_float;

    
    CO_float = readAlpha2();
 8084cb2:	f7fc fb9d 	bl	80813f0 <_Z10readAlpha2v>
    measurement_number++;


    //read CO values and apply calibration factors
    CO_float_A = readCO_A();
    CO_float_B = readCO_B();
 8084cb6:	4b6a      	ldr	r3, [pc, #424]	; (8084e60 <loop+0x1d4>)
 8084cb8:	6018      	str	r0, [r3, #0]
    readGpsStream();
 8084cba:	f7fc fd39 	bl	8081730 <_Z13readGpsStreamv>
    readGpsStreamDate();        //get the gps date and time along with the cellular time and determine which one to output
 8084cbe:	f7fc fe73 	bl	80819a8 <_Z17readGpsStreamDatev>
                                //if no gps connection, use the cellular time.
    systemTime = Time.now();
 8084cc2:	f003 fe98 	bl	80889f6 <_ZN9TimeClass3nowEv>
 8084cc6:	4b67      	ldr	r3, [pc, #412]	; (8084e64 <loop+0x1d8>)
 8084cc8:	6018      	str	r0, [r3, #0]
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8084cca:	4b67      	ldr	r3, [pc, #412]	; (8084e68 <loop+0x1dc>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8084ccc:	681a      	ldr	r2, [r3, #0]
 8084cce:	4b67      	ldr	r3, [pc, #412]	; (8084e6c <loop+0x1e0>)
 8084cd0:	601a      	str	r2, [r3, #0]

    outputCOtoPI();
 8084cd2:	f7fd fb93 	bl	80823fc <_Z12outputCOtoPIv>
    //outputDataToESP();

    
    if (Serial.available() > 0) {
 8084cd6:	f004 f8f7 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084cda:	6803      	ldr	r3, [r0, #0]
 8084cdc:	691b      	ldr	r3, [r3, #16]
 8084cde:	4798      	blx	r3
 8084ce0:	2800      	cmp	r0, #0
 8084ce2:	dd1d      	ble.n	8084d20 <loop+0x94>
        // read the incoming byte:
        incomingByte = Serial.read();
 8084ce4:	f004 f8f0 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084ce8:	6803      	ldr	r3, [r0, #0]
 8084cea:	4c61      	ldr	r4, [pc, #388]	; (8084e70 <loop+0x1e4>)
 8084cec:	695b      	ldr	r3, [r3, #20]
 8084cee:	4798      	blx	r3
        if(debugging_enabled){
 8084cf0:	4b60      	ldr	r3, [pc, #384]	; (8084e74 <loop+0x1e8>)
    //outputDataToESP();

    
    if (Serial.available() > 0) {
        // read the incoming byte:
        incomingByte = Serial.read();
 8084cf2:	7020      	strb	r0, [r4, #0]
        if(debugging_enabled){
 8084cf4:	681b      	ldr	r3, [r3, #0]
 8084cf6:	b14b      	cbz	r3, 8084d0c <loop+0x80>
            Serial.print("incomming byte:");
 8084cf8:	f004 f8e6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084cfc:	495e      	ldr	r1, [pc, #376]	; (8084e78 <loop+0x1ec>)
 8084cfe:	f003 fb7d 	bl	80883fc <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 8084d02:	f004 f8e1 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084d06:	7821      	ldrb	r1, [r4, #0]
 8084d08:	f003 fb95 	bl	8088436 <_ZN5Print7printlnEc>

        }
        Serial.println(incomingByte);
 8084d0c:	f004 f8dc 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084d10:	7821      	ldrb	r1, [r4, #0]
 8084d12:	f003 fb90 	bl	8088436 <_ZN5Print7printlnEc>
        if(incomingByte == 'm'){
 8084d16:	7823      	ldrb	r3, [r4, #0]
 8084d18:	2b6d      	cmp	r3, #109	; 0x6d
 8084d1a:	d101      	bne.n	8084d20 <loop+0x94>
          serialMenu();
 8084d1c:	f7ff fb6e 	bl	80843fc <_Z10serialMenuv>
        }
    }

    if(serial_cellular_enabled){
 8084d20:	4b56      	ldr	r3, [pc, #344]	; (8084e7c <loop+0x1f0>)
 8084d22:	681b      	ldr	r3, [r3, #0]
 8084d24:	b16b      	cbz	r3, 8084d42 <loop+0xb6>
        status_word.status_int |= 0x01;
 8084d26:	4a56      	ldr	r2, [pc, #344]	; (8084e80 <loop+0x1f4>)
 8084d28:	8813      	ldrh	r3, [r2, #0]
 8084d2a:	f043 0301 	orr.w	r3, r3, #1
 8084d2e:	8013      	strh	r3, [r2, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8084d30:	f002 fe32 	bl	8087998 <spark_cloud_flag_connected>
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
 8084d34:	2800      	cmp	r0, #0
 8084d36:	d138      	bne.n	8084daa <loop+0x11e>
 8084d38:	4b52      	ldr	r3, [pc, #328]	; (8084e84 <loop+0x1f8>)
 8084d3a:	781a      	ldrb	r2, [r3, #0]
 8084d3c:	2a00      	cmp	r2, #0
 8084d3e:	d134      	bne.n	8084daa <loop+0x11e>
 8084d40:	e043      	b.n	8084dca <loop+0x13e>
 8084d42:	f002 fe29 	bl	8087998 <spark_cloud_flag_connected>
        }
        tried_cellular_connect = false;
      }
    }else{
        //Serial.println("Cellular is disabled.");
      if (Particle.connected() == true) {
 8084d46:	b1a0      	cbz	r0, 8084d72 <loop+0xe6>
          if(debugging_enabled){
 8084d48:	4b4a      	ldr	r3, [pc, #296]	; (8084e74 <loop+0x1e8>)
 8084d4a:	681b      	ldr	r3, [r3, #0]
 8084d4c:	b173      	cbz	r3, 8084d6c <loop+0xe0>
            Serial.println("Disconnecting from cellular network");
 8084d4e:	f004 f8bb 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084d52:	494d      	ldr	r1, [pc, #308]	; (8084e88 <loop+0x1fc>)
 8084d54:	f003 fb65 	bl	8088422 <_ZN5Print7printlnEPKc>
            writeLogFile("Disconnecting from cellular network");
 8084d58:	494b      	ldr	r1, [pc, #300]	; (8084e88 <loop+0x1fc>)
 8084d5a:	4668      	mov	r0, sp
 8084d5c:	f003 f9c3 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8084d60:	4668      	mov	r0, sp
 8084d62:	f7fc fc95 	bl	8081690 <_Z12writeLogFile6String>
 8084d66:	4668      	mov	r0, sp
 8084d68:	f003 f976 	bl	8088058 <_ZN6StringD1Ev>
          }
          Cellular.off();
 8084d6c:	4847      	ldr	r0, [pc, #284]	; (8084e8c <loop+0x200>)
 8084d6e:	f7fb fe58 	bl	8080a22 <_ZN5spark13CellularClass3offEv>
      }
    }

    //check power
    powerCheck.loop();
 8084d72:	4c47      	ldr	r4, [pc, #284]	; (8084e90 <loop+0x204>)
 8084d74:	4620      	mov	r0, r4
 8084d76:	f000 fa4d 	bl	8085214 <_ZN10PowerCheck4loopEv>

	//Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8084d7a:	4b46      	ldr	r3, [pc, #280]	; (8084e94 <loop+0x208>)
 8084d7c:	681b      	ldr	r3, [r3, #0]
 8084d7e:	2b01      	cmp	r3, #1
 8084d80:	d164      	bne.n	8084e4c <loop+0x1c0>
 8084d82:	4845      	ldr	r0, [pc, #276]	; (8084e98 <loop+0x20c>)
 8084d84:	f003 fee8 	bl	8088b58 <_ZN9FuelGauge6getSoCEv>
 8084d88:	4944      	ldr	r1, [pc, #272]	; (8084e9c <loop+0x210>)
 8084d8a:	f005 fd01 	bl	808a790 <__aeabi_fcmplt>
 8084d8e:	2800      	cmp	r0, #0
 8084d90:	d05c      	beq.n	8084e4c <loop+0x1c0>
 8084d92:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8084d96:	2b00      	cmp	r3, #0
 8084d98:	d158      	bne.n	8084e4c <loop+0x1c0>
        Serial.println("Going to sleep because battery is below 20% charge");
 8084d9a:	f004 f895 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084d9e:	4940      	ldr	r1, [pc, #256]	; (8084ea0 <loop+0x214>)
 8084da0:	f003 fb3f 	bl	8088422 <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8084da4:	f7fc ffc0 	bl	8081d28 <_Z16goToSleepBatteryv>
 8084da8:	e050      	b.n	8084e4c <loop+0x1c0>
 8084daa:	f002 fdf5 	bl	8087998 <spark_cloud_flag_connected>
          Particle.connect();
          if(debugging_enabled){
            Serial.println("After particle connect");
            writeLogFile("After particle connect");
          }
      }else if(Particle.connected() == true){  //this means that it is already connected
 8084dae:	2800      	cmp	r0, #0
 8084db0:	d0df      	beq.n	8084d72 <loop+0xe6>
        if(debugging_enabled){
 8084db2:	4b30      	ldr	r3, [pc, #192]	; (8084e74 <loop+0x1e8>)
 8084db4:	681b      	ldr	r3, [r3, #0]
 8084db6:	b123      	cbz	r3, 8084dc2 <loop+0x136>
          Serial.println("setting tried_cellular_connect to false");
 8084db8:	f004 f886 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084dbc:	4939      	ldr	r1, [pc, #228]	; (8084ea4 <loop+0x218>)
 8084dbe:	f003 fb30 	bl	8088422 <_ZN5Print7printlnEPKc>
        }
        tried_cellular_connect = false;
 8084dc2:	4b30      	ldr	r3, [pc, #192]	; (8084e84 <loop+0x1f8>)
 8084dc4:	2200      	movs	r2, #0
 8084dc6:	701a      	strb	r2, [r3, #0]
 8084dc8:	e7d3      	b.n	8084d72 <loop+0xe6>
    if(serial_cellular_enabled){
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
        tried_cellular_connect = true;
          if(debugging_enabled){
 8084dca:	4c2a      	ldr	r4, [pc, #168]	; (8084e74 <loop+0x1e8>)

    if(serial_cellular_enabled){
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
        tried_cellular_connect = true;
 8084dcc:	2201      	movs	r2, #1
 8084dce:	701a      	strb	r2, [r3, #0]
          if(debugging_enabled){
 8084dd0:	6823      	ldr	r3, [r4, #0]
 8084dd2:	b173      	cbz	r3, 8084df2 <loop+0x166>
            Serial.println("Connecting to cellular network");
 8084dd4:	f004 f878 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084dd8:	4933      	ldr	r1, [pc, #204]	; (8084ea8 <loop+0x21c>)
 8084dda:	f003 fb22 	bl	8088422 <_ZN5Print7printlnEPKc>
            writeLogFile("Connecting to cellular network");
 8084dde:	4932      	ldr	r1, [pc, #200]	; (8084ea8 <loop+0x21c>)
 8084de0:	4668      	mov	r0, sp
 8084de2:	f003 f980 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8084de6:	4668      	mov	r0, sp
 8084de8:	f7fc fc52 	bl	8081690 <_Z12writeLogFile6String>
 8084dec:	4668      	mov	r0, sp
 8084dee:	f003 f933 	bl	8088058 <_ZN6StringD1Ev>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8084df2:	4826      	ldr	r0, [pc, #152]	; (8084e8c <loop+0x200>)
 8084df4:	2300      	movs	r3, #0
 8084df6:	461a      	mov	r2, r3
 8084df8:	4619      	mov	r1, r3
 8084dfa:	6840      	ldr	r0, [r0, #4]
 8084dfc:	f002 fd84 	bl	8087908 <network_on>
          }
          Cellular.on();
          if(debugging_enabled){
 8084e00:	6823      	ldr	r3, [r4, #0]
 8084e02:	b173      	cbz	r3, 8084e22 <loop+0x196>
            Serial.println("after cellularOn");
 8084e04:	f004 f860 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084e08:	4928      	ldr	r1, [pc, #160]	; (8084eac <loop+0x220>)
 8084e0a:	f003 fb0a 	bl	8088422 <_ZN5Print7printlnEPKc>
            writeLogFile("After cellularOn");
 8084e0e:	4928      	ldr	r1, [pc, #160]	; (8084eb0 <loop+0x224>)
 8084e10:	4668      	mov	r0, sp
 8084e12:	f003 f968 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8084e16:	4668      	mov	r0, sp
 8084e18:	f7fc fc3a 	bl	8081690 <_Z12writeLogFile6String>
 8084e1c:	4668      	mov	r0, sp
 8084e1e:	f003 f91b 	bl	8088058 <_ZN6StringD1Ev>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8084e22:	f002 fdb1 	bl	8087988 <spark_cloud_flag_connect>
          }
          Particle.connect();
          if(debugging_enabled){
 8084e26:	6823      	ldr	r3, [r4, #0]
 8084e28:	2b00      	cmp	r3, #0
 8084e2a:	d0a2      	beq.n	8084d72 <loop+0xe6>
            Serial.println("After particle connect");
 8084e2c:	f004 f84c 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8084e30:	4920      	ldr	r1, [pc, #128]	; (8084eb4 <loop+0x228>)
 8084e32:	f003 faf6 	bl	8088422 <_ZN5Print7printlnEPKc>
            writeLogFile("After particle connect");
 8084e36:	491f      	ldr	r1, [pc, #124]	; (8084eb4 <loop+0x228>)
 8084e38:	4668      	mov	r0, sp
 8084e3a:	f003 f954 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8084e3e:	4668      	mov	r0, sp
 8084e40:	f7fc fc26 	bl	8081690 <_Z12writeLogFile6String>
 8084e44:	4668      	mov	r0, sp
 8084e46:	f003 f907 	bl	8088058 <_ZN6StringD1Ev>
 8084e4a:	e792      	b.n	8084d72 <loop+0xe6>
        goToSleepBattery();
    }

    

}
 8084e4c:	b004      	add	sp, #16
 8084e4e:	bd10      	pop	{r4, pc}
 8084e50:	20000ad0 	.word	0x20000ad0
 8084e54:	0808ff80 	.word	0x0808ff80
 8084e58:	3ff00000 	.word	0x3ff00000
 8084e5c:	2000076c 	.word	0x2000076c
 8084e60:	20000770 	.word	0x20000770
 8084e64:	20000ab8 	.word	0x20000ab8
 8084e68:	200000d8 	.word	0x200000d8
 8084e6c:	20000bb0 	.word	0x20000bb0
 8084e70:	20000768 	.word	0x20000768
 8084e74:	20000ac4 	.word	0x20000ac4
 8084e78:	0808ff8c 	.word	0x0808ff8c
 8084e7c:	2000021c 	.word	0x2000021c
 8084e80:	20000b28 	.word	0x20000b28
 8084e84:	20000ac8 	.word	0x20000ac8
 8084e88:	0809001c 	.word	0x0809001c
 8084e8c:	20000f14 	.word	0x20000f14
 8084e90:	20000774 	.word	0x20000774
 8084e94:	20000b2c 	.word	0x20000b2c
 8084e98:	200007fc 	.word	0x200007fc
 8084e9c:	41a00000 	.word	0x41a00000
 8084ea0:	08090040 	.word	0x08090040
 8084ea4:	0808fff4 	.word	0x0808fff4
 8084ea8:	0808ff9c 	.word	0x0808ff9c
 8084eac:	0808ffbb 	.word	0x0808ffbb
 8084eb0:	0808ffcc 	.word	0x0808ffcc
 8084eb4:	0808ffdd 	.word	0x0808ffdd

08084eb8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
  }
 8084eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8084eba:	4b5b      	ldr	r3, [pc, #364]	; (8085028 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x170>)
 8084ebc:	2400      	movs	r4, #0
 8084ebe:	601c      	str	r4, [r3, #0]
#include "SdFat.h"
#include "HIH61XX.h"
#include "google-maps-device-locator.h"
#include "CellularHelper.h"

GoogleMapsDeviceLocator locator;
 8084ec0:	4f5a      	ldr	r7, [pc, #360]	; (808502c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 8084ec2:	4b5b      	ldr	r3, [pc, #364]	; (8085030 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
 8084ec4:	4d5b      	ldr	r5, [pc, #364]	; (8085034 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
 8084ec6:	2601      	movs	r6, #1
 8084ec8:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8084eca:	f002 faaf 	bl	808742c <HAL_Pin_Map>
 8084ece:	4638      	mov	r0, r7
 8084ed0:	f002 f88a 	bl	8086fe8 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8084ed4:	462a      	mov	r2, r5
 8084ed6:	4958      	ldr	r1, [pc, #352]	; (8085038 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)
 8084ed8:	4638      	mov	r0, r7
 8084eda:	f004 fb5d 	bl	8089598 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8084ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8084ee2:	4b56      	ldr	r3, [pc, #344]	; (808503c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8084ee4:	2003      	movs	r0, #3
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8084ee6:	701c      	strb	r4, [r3, #0]
 8084ee8:	805c      	strh	r4, [r3, #2]
 8084eea:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8084eec:	f002 fc9e 	bl	808782c <set_system_mode>



//manually control connection to cellular network
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
 8084ef0:	4621      	mov	r1, r4
 8084ef2:	4630      	mov	r0, r6
 8084ef4:	f002 fcaa 	bl	808784c <system_thread_set_state>

//global objects
Adafruit_BME680 bme; // I2C
 8084ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8084efc:	4850      	ldr	r0, [pc, #320]	; (8085040 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)
 8084efe:	f001 fecb 	bl	8086c98 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 8084f02:	4850      	ldr	r0, [pc, #320]	; (8085044 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 8084f04:	f000 fb13 	bl	808552e <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000_1;
 8084f08:	484f      	ldr	r0, [pc, #316]	; (8085048 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)
 8084f0a:	f000 f8d3 	bl	80850b4 <_ZN8LMP91000C1Ev>
LMP91000 lmp91000_2;
 8084f0e:	484f      	ldr	r0, [pc, #316]	; (808504c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
 8084f10:	f000 f8d0 	bl	80850b4 <_ZN8LMP91000C1Ev>
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 8084f14:	4e4e      	ldr	r6, [pc, #312]	; (8085050 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
//global objects
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000_1;
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 8084f16:	2149      	movs	r1, #73	; 0x49
 8084f18:	484e      	ldr	r0, [pc, #312]	; (8085054 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
 8084f1a:	f000 fa12 	bl	8085342 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 8084f1e:	214a      	movs	r1, #74	; 0x4a
 8084f20:	484d      	ldr	r0, [pc, #308]	; (8085058 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
 8084f22:	f000 fa0e 	bl	8085342 <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 8084f26:	4621      	mov	r1, r4
 8084f28:	4630      	mov	r0, r6
 8084f2a:	f003 fdd5 	bl	8088ad8 <_ZN9FuelGaugeC1Eb>
 8084f2e:	4630      	mov	r0, r6
GPS gps;
PMIC pmic;
 8084f30:	4e4a      	ldr	r6, [pc, #296]	; (808505c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000_1;
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 8084f32:	462a      	mov	r2, r5
 8084f34:	494a      	ldr	r1, [pc, #296]	; (8085060 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
 8084f36:	f004 fb2f 	bl	8089598 <__aeabi_atexit>
GPS gps;
PMIC pmic;
 8084f3a:	4621      	mov	r1, r4
 8084f3c:	4630      	mov	r0, r6
 8084f3e:	f002 fdaa 	bl	8087a96 <_ZN4PMICC1Eb>
 8084f42:	4630      	mov	r0, r6
PowerCheck powerCheck;
 8084f44:	4e47      	ldr	r6, [pc, #284]	; (8085064 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
GPS gps;
PMIC pmic;
 8084f46:	462a      	mov	r2, r5
 8084f48:	4947      	ldr	r1, [pc, #284]	; (8085068 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 8084f4a:	f004 fb25 	bl	8089598 <__aeabi_atexit>
PowerCheck powerCheck;
 8084f4e:	4630      	mov	r0, r6
 8084f50:	f000 f940 	bl	80851d4 <_ZN10PowerCheckC1Ev>
 8084f54:	462a      	mov	r2, r5
 8084f56:	4945      	ldr	r1, [pc, #276]	; (808506c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
 8084f58:	4630      	mov	r0, r6
 8084f5a:	f004 fb1d 	bl	8089598 <__aeabi_atexit>
time_t systemTime;
//SerialLogHandler logHandler;
HIH61XX hih(0x27);
 8084f5e:	2127      	movs	r1, #39	; 0x27
 8084f60:	4843      	ldr	r0, [pc, #268]	; (8085070 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
 8084f62:	f001 ff33 	bl	8086dcc <_ZN7HIH61XXC1Eh>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8084f66:	4b43      	ldr	r3, [pc, #268]	; (8085074 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8084f68:	2219      	movs	r2, #25
 8084f6a:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 8084f6e:	4a42      	ldr	r2, [pc, #264]	; (8085078 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8084f70:	4842      	ldr	r0, [pc, #264]	; (808507c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
 8084f72:	601a      	str	r2, [r3, #0]
unsigned long lastCheck = 0;
char lastStatus[256];

//sdcard
SdFat sd;
SdFile file;
 8084f74:	4e42      	ldr	r6, [pc, #264]	; (8085080 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8084f76:	4a43      	ldr	r2, [pc, #268]	; (8085084 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 8084f78:	4f43      	ldr	r7, [pc, #268]	; (8085088 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
 8084f7a:	71dc      	strb	r4, [r3, #7]
 8084f7c:	f883 4440 	strb.w	r4, [r3, #1088]	; 0x440
 8084f80:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
 8084f84:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 8084f88:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 8084f8c:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8084f90:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 8084f94:	462a      	mov	r2, r5
 8084f96:	4631      	mov	r1, r6
 8084f98:	7204      	strb	r4, [r0, #8]
 8084f9a:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8084f9c:	6044      	str	r4, [r0, #4]
 8084f9e:	6007      	str	r7, [r0, #0]
 8084fa0:	f004 fafa 	bl	8089598 <__aeabi_atexit>
 8084fa4:	4839      	ldr	r0, [pc, #228]	; (808508c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
SdFile log_file;
 8084fa6:	462a      	mov	r2, r5
 8084fa8:	4631      	mov	r1, r6
 8084faa:	7204      	strb	r4, [r0, #8]
 8084fac:	7244      	strb	r4, [r0, #9]
 8084fae:	6044      	str	r4, [r0, #4]
 8084fb0:	6007      	str	r7, [r0, #0]
 8084fb2:	f004 faf1 	bl	8089598 <__aeabi_atexit>
 8084fb6:	4836      	ldr	r0, [pc, #216]	; (8085090 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8084fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
File file1;
String fileName;
 8084fbc:	4e35      	ldr	r6, [pc, #212]	; (8085094 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)
 8084fbe:	4f36      	ldr	r7, [pc, #216]	; (8085098 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 8084fc0:	6083      	str	r3, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 8084fc2:	4b36      	ldr	r3, [pc, #216]	; (808509c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8084fc4:	462a      	mov	r2, r5
 8084fc6:	7404      	strb	r4, [r0, #16]
 8084fc8:	7444      	strb	r4, [r0, #17]
 8084fca:	6044      	str	r4, [r0, #4]
 8084fcc:	4934      	ldr	r1, [pc, #208]	; (80850a0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
 8084fce:	6003      	str	r3, [r0, #0]
String fileName;
 8084fd0:	4c34      	ldr	r4, [pc, #208]	; (80850a4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8084fd2:	f004 fae1 	bl	8089598 <__aeabi_atexit>
String fileName;
 8084fd6:	4631      	mov	r1, r6
 8084fd8:	4638      	mov	r0, r7
 8084fda:	f003 f884 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8084fde:	4638      	mov	r0, r7
String logFileName;
 8084fe0:	4f31      	ldr	r7, [pc, #196]	; (80850a8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
 8084fe2:	462a      	mov	r2, r5
 8084fe4:	4621      	mov	r1, r4
 8084fe6:	f004 fad7 	bl	8089598 <__aeabi_atexit>
String logFileName;
 8084fea:	4631      	mov	r1, r6
 8084fec:	4638      	mov	r0, r7
 8084fee:	f003 f87a 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8084ff2:	4638      	mov	r0, r7
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8084ff4:	4f2d      	ldr	r7, [pc, #180]	; (80850ac <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f4>)
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
String logFileName;
 8084ff6:	462a      	mov	r2, r5
 8084ff8:	4621      	mov	r1, r4
 8084ffa:	f004 facd 	bl	8089598 <__aeabi_atexit>
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8084ffe:	4631      	mov	r1, r6
 8085000:	4638      	mov	r0, r7
 8085002:	f003 f870 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8085006:	4638      	mov	r0, r7
String password; //wifi network password
 8085008:	4f29      	ldr	r7, [pc, #164]	; (80850b0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f8>)
String logFileName;
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 808500a:	462a      	mov	r2, r5
 808500c:	4621      	mov	r1, r4
 808500e:	f004 fac3 	bl	8089598 <__aeabi_atexit>
String password; //wifi network password
 8085012:	4631      	mov	r1, r6
 8085014:	4638      	mov	r0, r7
 8085016:	f003 f866 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 808501a:	462a      	mov	r2, r5
 808501c:	4621      	mov	r1, r4
 808501e:	4638      	mov	r0, r7
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
  }
 8085020:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
String password; //wifi network password
 8085024:	f004 bab8 	b.w	8089598 <__aeabi_atexit>
 8085028:	20000808 	.word	0x20000808
 808502c:	20000adc 	.word	0x20000adc
 8085030:	200006dc 	.word	0x200006dc
 8085034:	200001d0 	.word	0x200001d0
 8085038:	08086fa1 	.word	0x08086fa1
 808503c:	20000abc 	.word	0x20000abc
 8085040:	200006e4 	.word	0x200006e4
 8085044:	20000b30 	.word	0x20000b30
 8085048:	200001e8 	.word	0x200001e8
 808504c:	200001e9 	.word	0x200001e9
 8085050:	200007fc 	.word	0x200007fc
 8085054:	20000a08 	.word	0x20000a08
 8085058:	20000a0e 	.word	0x20000a0e
 808505c:	20000a9c 	.word	0x20000a9c
 8085060:	08088af7 	.word	0x08088af7
 8085064:	20000774 	.word	0x20000774
 8085068:	08087ab5 	.word	0x08087ab5
 808506c:	080851a9 	.word	0x080851a9
 8085070:	20000814 	.word	0x20000814
 8085074:	20000228 	.word	0x20000228
 8085078:	0808ddc8 	.word	0x0808ddc8
 808507c:	200006ac 	.word	0x200006ac
 8085080:	0808092f 	.word	0x0808092f
 8085084:	080900e8 	.word	0x080900e8
 8085088:	0808ddb0 	.word	0x0808ddb0
 808508c:	20000b38 	.word	0x20000b38
 8085090:	200007b4 	.word	0x200007b4
 8085094:	08090584 	.word	0x08090584
 8085098:	20000aa4 	.word	0x20000aa4
 808509c:	0808dd88 	.word	0x0808dd88
 80850a0:	08080931 	.word	0x08080931
 80850a4:	08088059 	.word	0x08088059
 80850a8:	20000798 	.word	0x20000798
 80850ac:	20000208 	.word	0x20000208
 80850b0:	200001d4 	.word	0x200001d4

080850b4 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 80850b4:	4770      	bx	lr

080850b6 <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 80850b6:	b510      	push	{r4, lr}
 80850b8:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 80850ba:	f004 fa2d 	bl	8089518 <_Z19__fetch_global_Wirev>
 80850be:	2148      	movs	r1, #72	; 0x48
 80850c0:	f004 f8d4 	bl	808926c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 80850c4:	f004 fa28 	bl	8089518 <_Z19__fetch_global_Wirev>
 80850c8:	6803      	ldr	r3, [r0, #0]
 80850ca:	4621      	mov	r1, r4
 80850cc:	689b      	ldr	r3, [r3, #8]
 80850ce:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 80850d0:	f004 fa22 	bl	8089518 <_Z19__fetch_global_Wirev>
 80850d4:	2100      	movs	r1, #0
 80850d6:	f004 f8cc 	bl	8089272 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 80850da:	f004 fa1d 	bl	8089518 <_Z19__fetch_global_Wirev>
 80850de:	2301      	movs	r3, #1
 80850e0:	461a      	mov	r2, r3
 80850e2:	2148      	movs	r1, #72	; 0x48
 80850e4:	f004 f8b9 	bl	808925a <_ZN7TwoWire11requestFromEiii>
      if(Wire.available()){
 80850e8:	f004 fa16 	bl	8089518 <_Z19__fetch_global_Wirev>
 80850ec:	6803      	ldr	r3, [r0, #0]
 80850ee:	691b      	ldr	r3, [r3, #16]
 80850f0:	4798      	blx	r3
 80850f2:	b128      	cbz	r0, 8085100 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 80850f4:	f004 fa10 	bl	8089518 <_Z19__fetch_global_Wirev>
 80850f8:	6803      	ldr	r3, [r0, #0]
 80850fa:	695b      	ldr	r3, [r3, #20]
 80850fc:	4798      	blx	r3
 80850fe:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8085100:	bd10      	pop	{r4, pc}

08085102 <_ZN8LMP910005writeEhh>:

LMP91000::LMP91000() {

}

uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8085102:	b570      	push	{r4, r5, r6, lr}
 8085104:	4616      	mov	r6, r2
 8085106:	460c      	mov	r4, r1
 8085108:	4605      	mov	r5, r0

      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 808510a:	f004 fa05 	bl	8089518 <_Z19__fetch_global_Wirev>
 808510e:	2148      	movs	r1, #72	; 0x48
 8085110:	f004 f8ac 	bl	808926c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8085114:	f004 fa00 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085118:	6803      	ldr	r3, [r0, #0]
 808511a:	4621      	mov	r1, r4
 808511c:	689b      	ldr	r3, [r3, #8]
 808511e:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8085120:	f004 f9fa 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085124:	6803      	ldr	r3, [r0, #0]
 8085126:	4631      	mov	r1, r6
 8085128:	689b      	ldr	r3, [r3, #8]
 808512a:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 808512c:	f004 f9f4 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085130:	2101      	movs	r1, #1
 8085132:	f004 f89e 	bl	8089272 <_ZN7TwoWire15endTransmissionEh>

      // read back the value of the register
      return read(reg);
 8085136:	4621      	mov	r1, r4
 8085138:	4628      	mov	r0, r5
}
 808513a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.write(reg);                                        // REG
      Wire.write(data);                                       // DATA
      Wire.endTransmission(true); // generate stop condition  // STOP

      // read back the value of the register
      return read(reg);
 808513e:	f7ff bfba 	b.w	80850b6 <_ZN8LMP910004readEh>

08085142 <_ZN8LMP910006statusEv>:

      return chr;
}

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8085142:	2100      	movs	r1, #0
 8085144:	f7ff bfb7 	b.w	80850b6 <_ZN8LMP910004readEh>

08085148 <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8085148:	2201      	movs	r2, #1
 808514a:	4611      	mov	r1, r2
 808514c:	f7ff bfd9 	b.w	8085102 <_ZN8LMP910005writeEhh>

08085150 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8085150:	2200      	movs	r2, #0
 8085152:	2101      	movs	r1, #1
 8085154:	f7ff bfd5 	b.w	8085102 <_ZN8LMP910005writeEhh>

08085158 <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8085158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808515c:	4604      	mov	r4, r0
 808515e:	4688      	mov	r8, r1
 8085160:	4617      	mov	r7, r2
 8085162:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8085164:	f7ff ffed 	bl	8085142 <_ZN8LMP910006statusEv>
 8085168:	2801      	cmp	r0, #1
 808516a:	4605      	mov	r5, r0
 808516c:	d115      	bne.n	808519a <_ZN8LMP910009configureEhhh+0x42>
            unlock();
 808516e:	4620      	mov	r0, r4
 8085170:	f7ff ffee 	bl	8085150 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8085174:	4642      	mov	r2, r8
 8085176:	2110      	movs	r1, #16
 8085178:	4620      	mov	r0, r4
 808517a:	f7ff ffc2 	bl	8085102 <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 808517e:	463a      	mov	r2, r7
 8085180:	2111      	movs	r1, #17
 8085182:	4620      	mov	r0, r4
 8085184:	f7ff ffbd 	bl	8085102 <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 8085188:	4632      	mov	r2, r6
 808518a:	2112      	movs	r1, #18
 808518c:	4620      	mov	r0, r4
 808518e:	f7ff ffb8 	bl	8085102 <_ZN8LMP910005writeEhh>
            lock();
 8085192:	4620      	mov	r0, r4
 8085194:	f7ff ffd8 	bl	8085148 <_ZN8LMP910004lockEv>
            return 1;
 8085198:	e000      	b.n	808519c <_ZN8LMP910009configureEhhh+0x44>
      }
      return 0;
 808519a:	2500      	movs	r5, #0
}
 808519c:	4628      	mov	r0, r5
 808519e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080851a2 <_GLOBAL__sub_I__ZN8LMP91000C2Ev>:
 80851a2:	f002 b943 	b.w	808742c <HAL_Pin_Map>
	...

080851a8 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 80851a8:	b510      	push	{r4, lr}
 80851aa:	4604      	mov	r4, r0
 80851ac:	4b03      	ldr	r3, [pc, #12]	; (80851bc <_ZN10PowerCheckD1Ev+0x14>)
 80851ae:	f840 3b14 	str.w	r3, [r0], #20
 80851b2:	f002 fc7f 	bl	8087ab4 <_ZN4PMICD1Ev>
}
 80851b6:	4620      	mov	r0, r4
 80851b8:	bd10      	pop	{r4, pc}
 80851ba:	bf00      	nop
 80851bc:	0809007c 	.word	0x0809007c

080851c0 <_ZN10PowerCheckD0Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 80851c0:	b510      	push	{r4, lr}
 80851c2:	4604      	mov	r4, r0
}
 80851c4:	f7ff fff0 	bl	80851a8 <_ZN10PowerCheckD1Ev>
 80851c8:	4620      	mov	r0, r4
 80851ca:	2124      	movs	r1, #36	; 0x24
 80851cc:	f004 f9e9 	bl	80895a2 <_ZdlPvj>
 80851d0:	4620      	mov	r0, r4
 80851d2:	bd10      	pop	{r4, pc}

080851d4 <_ZN10PowerCheckC1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
 80851d4:	b538      	push	{r3, r4, r5, lr}
 80851d6:	4604      	mov	r4, r0
 80851d8:	4b0d      	ldr	r3, [pc, #52]	; (8085210 <_ZN10PowerCheckC1Ev+0x3c>)
 80851da:	2500      	movs	r5, #0
 80851dc:	6003      	str	r3, [r0, #0]
 80851de:	2332      	movs	r3, #50	; 0x32
 80851e0:	6043      	str	r3, [r0, #4]
 80851e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80851e6:	6083      	str	r3, [r0, #8]
 80851e8:	60c5      	str	r5, [r0, #12]
 80851ea:	6105      	str	r5, [r0, #16]
 80851ec:	4629      	mov	r1, r5
 80851ee:	3014      	adds	r0, #20
 80851f0:	f002 fc51 	bl	8087a96 <_ZN4PMICC1Eb>
 80851f4:	2301      	movs	r3, #1
 80851f6:	61a5      	str	r5, [r4, #24]
 80851f8:	61e5      	str	r5, [r4, #28]
 80851fa:	f884 5020 	strb.w	r5, [r4, #32]
 80851fe:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 8085202:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8085206:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
}
 808520a:	4620      	mov	r0, r4
 808520c:	bd38      	pop	{r3, r4, r5, pc}
 808520e:	bf00      	nop
 8085210:	0809007c 	.word	0x0809007c

08085214 <_ZN10PowerCheck4loopEv>:

PowerCheck::~PowerCheck() {
}

void PowerCheck::loop() {
 8085214:	b510      	push	{r4, lr}
 8085216:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8085218:	f002 f9b8 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 808521c:	68e3      	ldr	r3, [r4, #12]
 808521e:	1ac0      	subs	r0, r0, r3
 8085220:	6863      	ldr	r3, [r4, #4]
 8085222:	4298      	cmp	r0, r3
 8085224:	d31f      	bcc.n	8085266 <_ZN10PowerCheck4loopEv+0x52>
 8085226:	f002 f9b1 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 808522a:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 808522c:	f104 0014 	add.w	r0, r4, #20
 8085230:	f002 fc8b 	bl	8087b4a <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8085234:	f000 0304 	and.w	r3, r0, #4
 8085238:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808523c:	b173      	cbz	r3, 808525c <_ZN10PowerCheck4loopEv+0x48>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 808523e:	f894 3020 	ldrb.w	r3, [r4, #32]
			// (It works similarly for a USB charger, except it's 0x24 and 0x34).

			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8085242:	f3c0 1001 	ubfx	r0, r0, #4, #2

			if (chrgStat != lastChrgStat) {
 8085246:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8085248:	bf1f      	itttt	ne
 808524a:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 808524c:	f884 0020 	strbne.w	r0, [r4, #32]
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8085250:	3301      	addne	r3, #1
 8085252:	61e3      	strne	r3, [r4, #28]
				lastChrgStat = chrgStat;
			}

			// We have power (USB or VIN)
			hasPower = true;
 8085254:	2301      	movs	r3, #1
 8085256:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 808525a:	e001      	b.n	8085260 <_ZN10PowerCheck4loopEv+0x4c>
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 808525c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		}

		checkCount++;
 8085260:	69a3      	ldr	r3, [r4, #24]
 8085262:	3301      	adds	r3, #1
 8085264:	61a3      	str	r3, [r4, #24]
 8085266:	f002 f991 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 808526a:	6923      	ldr	r3, [r4, #16]
 808526c:	1ac0      	subs	r0, r0, r3
 808526e:	68a3      	ldr	r3, [r4, #8]
 8085270:	4298      	cmp	r0, r3
 8085272:	d91c      	bls.n	80852ae <_ZN10PowerCheck4loopEv+0x9a>
 8085274:	f002 f98a 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8085278:	69a3      	ldr	r3, [r4, #24]
		}

		checkCount++;
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
		lastSlowCheck = millis();
 808527a:	6120      	str	r0, [r4, #16]

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 808527c:	2b0a      	cmp	r3, #10
 808527e:	dd06      	ble.n	808528e <_ZN10PowerCheck4loopEv+0x7a>
 8085280:	69e2      	ldr	r2, [r4, #28]
 8085282:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8085286:	bfd4      	ite	le
 8085288:	2301      	movle	r3, #1
 808528a:	2300      	movgt	r3, #0
 808528c:	e000      	b.n	8085290 <_ZN10PowerCheck4loopEv+0x7c>
 808528e:	2301      	movs	r3, #1
 8085290:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8085294:	b133      	cbz	r3, 80852a4 <_ZN10PowerCheck4loopEv+0x90>
 8085296:	f894 3020 	ldrb.w	r3, [r4, #32]
 808529a:	3b01      	subs	r3, #1
 808529c:	2b01      	cmp	r3, #1
 808529e:	bf8c      	ite	hi
 80852a0:	2300      	movhi	r3, #0
 80852a2:	2301      	movls	r3, #1
 80852a4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 80852a8:	2300      	movs	r3, #0
 80852aa:	61a3      	str	r3, [r4, #24]
		changeCount = 0;
 80852ac:	61e3      	str	r3, [r4, #28]
 80852ae:	bd10      	pop	{r4, pc}

080852b0 <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 80852b0:	f002 b8bc 	b.w	808742c <HAL_Pin_Map>

080852b4 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 80852b4:	b510      	push	{r4, lr}
 80852b6:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 80852b8:	f004 f92e 	bl	8089518 <_Z19__fetch_global_Wirev>
 80852bc:	6803      	ldr	r3, [r0, #0]
 80852be:	4621      	mov	r1, r4
}
 80852c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 80852c4:	689b      	ldr	r3, [r3, #8]
 80852c6:	4718      	bx	r3

080852c8 <_ZL7i2creadv>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
 80852c8:	b508      	push	{r3, lr}
  #else
  return Wire.receive();
  #endif
  */
  
  return Wire.read();
 80852ca:	f004 f925 	bl	8089518 <_Z19__fetch_global_Wirev>
 80852ce:	6803      	ldr	r3, [r0, #0]
 80852d0:	695b      	ldr	r3, [r3, #20]
 80852d2:	4798      	blx	r3
}
 80852d4:	b2c0      	uxtb	r0, r0
 80852d6:	bd08      	pop	{r3, pc}

080852d8 <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 80852d8:	b570      	push	{r4, r5, r6, lr}
 80852da:	4606      	mov	r6, r0
 80852dc:	460d      	mov	r5, r1
 80852de:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 80852e0:	f004 f91a 	bl	8089518 <_Z19__fetch_global_Wirev>
 80852e4:	4631      	mov	r1, r6
 80852e6:	f003 ffbd 	bl	8089264 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 80852ea:	4628      	mov	r0, r5
 80852ec:	f7ff ffe2 	bl	80852b4 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 80852f0:	0a20      	lsrs	r0, r4, #8
 80852f2:	f7ff ffdf 	bl	80852b4 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 80852f6:	b2e0      	uxtb	r0, r4
 80852f8:	f7ff ffdc 	bl	80852b4 <_ZL8i2cwriteh>
  Wire.endTransmission();
 80852fc:	f004 f90c 	bl	8089518 <_Z19__fetch_global_Wirev>
}
 8085300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value>>8));
  i2cwrite((uint8_t)(value & 0xFF));
  Wire.endTransmission();
 8085304:	f003 bfb9 	b.w	808927a <_ZN7TwoWire15endTransmissionEv>

08085308 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8085308:	b510      	push	{r4, lr}
 808530a:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 808530c:	f004 f904 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085310:	4621      	mov	r1, r4
 8085312:	f003 ffa7 	bl	8089264 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8085316:	2000      	movs	r0, #0
 8085318:	f7ff ffcc 	bl	80852b4 <_ZL8i2cwriteh>
  Wire.endTransmission();
 808531c:	f004 f8fc 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085320:	f003 ffab 	bl	808927a <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8085324:	f004 f8f8 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085328:	4621      	mov	r1, r4
 808532a:	2202      	movs	r2, #2
 808532c:	f003 ff8d 	bl	808924a <_ZN7TwoWire11requestFromEhh>
  return ((i2cread() << 8) | i2cread());  
 8085330:	f7ff ffca 	bl	80852c8 <_ZL7i2creadv>
 8085334:	4604      	mov	r4, r0
 8085336:	f7ff ffc7 	bl	80852c8 <_ZL7i2creadv>
 808533a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 808533e:	b280      	uxth	r0, r0
 8085340:	bd10      	pop	{r4, pc}

08085342 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8085342:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8085344:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8085346:	2108      	movs	r1, #8
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8085348:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 808534a:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 808534c:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 808534e:	4770      	bx	lr

08085350 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8085350:	b508      	push	{r3, lr}
  Wire.begin();
 8085352:	f004 f8e1 	bl	8089518 <_Z19__fetch_global_Wirev>
}
 8085356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
 808535a:	f003 bf67 	b.w	808922c <_ZN7TwoWire5beginEv>

0808535e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 808535e:	8081      	strh	r1, [r0, #4]
 8085360:	4770      	bx	lr

08085362 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8085362:	2903      	cmp	r1, #3
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8085364:	b510      	push	{r4, lr}
 8085366:	4604      	mov	r4, r0
  if (channel > 3)
 8085368:	d822      	bhi.n	80853b0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 808536a:	2902      	cmp	r1, #2
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
 808536c:	8882      	ldrh	r2, [r0, #4]

  // Set single-ended input channel
  switch (channel)
 808536e:	d008      	beq.n	8085382 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
 8085370:	2903      	cmp	r1, #3
 8085372:	d009      	beq.n	8085388 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
 8085374:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8085376:	bf14      	ite	ne
 8085378:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 808537c:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
 8085380:	e004      	b.n	808538c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8085382:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 8085386:	e001      	b.n	808538c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8085388:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 808538c:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 8085390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8085394:	2101      	movs	r1, #1
 8085396:	7820      	ldrb	r0, [r4, #0]
 8085398:	f7ff ff9e 	bl	80852d8 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 808539c:	7860      	ldrb	r0, [r4, #1]
 808539e:	f003 fb77 	bl	8088a90 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 80853a2:	7820      	ldrb	r0, [r4, #0]
 80853a4:	f7ff ffb0 	bl	8085308 <_ZL12readRegisterhh.isra.0>
 80853a8:	78a3      	ldrb	r3, [r4, #2]
 80853aa:	4118      	asrs	r0, r3
 80853ac:	b280      	uxth	r0, r0
 80853ae:	bd10      	pop	{r4, pc}
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
 80853b0:	2000      	movs	r0, #0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
 80853b2:	bd10      	pop	{r4, pc}

080853b4 <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 80853b4:	f002 b83a 	b.w	808742c <HAL_Pin_Map>

080853b8 <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 80853b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80853bc:	460e      	mov	r6, r1
 80853be:	b088      	sub	sp, #32
 80853c0:	4604      	mov	r4, r0
 80853c2:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 80853c4:	4668      	mov	r0, sp
 80853c6:	2302      	movs	r3, #2
 80853c8:	2200      	movs	r2, #0
 80853ca:	f002 ffa1 	bl	8088310 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 80853ce:	230a      	movs	r3, #10
 80853d0:	2202      	movs	r2, #2
 80853d2:	4631      	mov	r1, r6
 80853d4:	a804      	add	r0, sp, #16
 80853d6:	f002 ff9b 	bl	8088310 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 80853da:	4668      	mov	r0, sp
 80853dc:	f002 ffc0 	bl	8088360 <_ZNK6String5toIntEv>
 80853e0:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 80853e2:	a804      	add	r0, sp, #16
 80853e4:	f002 ffbc 	bl	8088360 <_ZNK6String5toIntEv>
 80853e8:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 80853ea:	4668      	mov	r0, sp
 80853ec:	f002 ffb8 	bl	8088360 <_ZNK6String5toIntEv>
 80853f0:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 80853f2:	a804      	add	r0, sp, #16
 80853f4:	f002 ffb9 	bl	808836a <_ZNK6String7toFloatEv>
 80853f8:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 80853fa:	4630      	mov	r0, r6
 80853fc:	f004 fb6e 	bl	8089adc <__aeabi_i2d>
 8085400:	4606      	mov	r6, r0
 8085402:	4640      	mov	r0, r8
 8085404:	460f      	mov	r7, r1
 8085406:	f004 fb7b 	bl	8089b00 <__aeabi_f2d>
 808540a:	2200      	movs	r2, #0
 808540c:	4b0c      	ldr	r3, [pc, #48]	; (8085440 <_ZN3GPS15set_lat_decimalE6Stringc+0x88>)
 808540e:	f004 fcf5 	bl	8089dfc <__aeabi_ddiv>
 8085412:	460b      	mov	r3, r1
 8085414:	4602      	mov	r2, r0
 8085416:	4639      	mov	r1, r7
 8085418:	4630      	mov	r0, r6
 808541a:	f004 fa13 	bl	8089844 <__adddf3>
    if(nsString == 'S'){
 808541e:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
 8085420:	bf0c      	ite	eq
 8085422:	2300      	moveq	r3, #0
    }else{
        ns_indicator = 0x80;
 8085424:	2380      	movne	r3, #128	; 0x80
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8085426:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 808542a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24


//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
    String frac_str = latString.substring(2,10);
 808542e:	a804      	add	r0, sp, #16
 8085430:	f002 fe12 	bl	8088058 <_ZN6StringD1Ev>



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
 8085434:	4668      	mov	r0, sp
 8085436:	f002 fe0f 	bl	8088058 <_ZN6StringD1Ev>
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
    }
}
 808543a:	b008      	add	sp, #32
 808543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085440:	404e0000 	.word	0x404e0000

08085444 <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8085444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085448:	460e      	mov	r6, r1
 808544a:	b088      	sub	sp, #32
 808544c:	4604      	mov	r4, r0
 808544e:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8085450:	4668      	mov	r0, sp
 8085452:	2303      	movs	r3, #3
 8085454:	2200      	movs	r2, #0
 8085456:	f002 ff5b 	bl	8088310 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 808545a:	230a      	movs	r3, #10
 808545c:	2203      	movs	r2, #3
 808545e:	4631      	mov	r1, r6
 8085460:	a804      	add	r0, sp, #16
 8085462:	f002 ff55 	bl	8088310 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 8085466:	4668      	mov	r0, sp
 8085468:	f002 ff7a 	bl	8088360 <_ZNK6String5toIntEv>
 808546c:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 808546e:	a804      	add	r0, sp, #16
 8085470:	f002 ff76 	bl	8088360 <_ZNK6String5toIntEv>
 8085474:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 8085476:	4668      	mov	r0, sp
 8085478:	f002 ff72 	bl	8088360 <_ZNK6String5toIntEv>
 808547c:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 808547e:	a804      	add	r0, sp, #16
 8085480:	f002 ff73 	bl	808836a <_ZNK6String7toFloatEv>
 8085484:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8085486:	4630      	mov	r0, r6
 8085488:	f004 fb28 	bl	8089adc <__aeabi_i2d>
 808548c:	4606      	mov	r6, r0
 808548e:	4640      	mov	r0, r8
 8085490:	460f      	mov	r7, r1
 8085492:	f004 fb35 	bl	8089b00 <__aeabi_f2d>
 8085496:	2200      	movs	r2, #0
 8085498:	4b0c      	ldr	r3, [pc, #48]	; (80854cc <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 808549a:	f004 fcaf 	bl	8089dfc <__aeabi_ddiv>
 808549e:	460b      	mov	r3, r1
 80854a0:	4602      	mov	r2, r0
 80854a2:	4639      	mov	r1, r7
 80854a4:	4630      	mov	r0, r6
 80854a6:	f004 f9cd 	bl	8089844 <__adddf3>
    if(ewString == 'E'){
 80854aa:	2d45      	cmp	r5, #69	; 0x45
      ew_indicator = 0;
 80854ac:	bf0c      	ite	eq
 80854ae:	2300      	moveq	r3, #0
    }else{
      ew_indicator = 0x01;
 80854b0:	2301      	movne	r3, #1
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 80854b2:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
 80854b6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
    String frac_str = longString.substring(3,10);
 80854ba:	a804      	add	r0, sp, #16
 80854bc:	f002 fdcc 	bl	8088058 <_ZN6StringD1Ev>
        ns_indicator = 0x80;
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
 80854c0:	4668      	mov	r0, sp
 80854c2:	f002 fdc9 	bl	8088058 <_ZN6StringD1Ev>
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 80854c6:	b008      	add	sp, #32
 80854c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80854cc:	404e0000 	.word	0x404e0000

080854d0 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 80854d0:	b510      	push	{r4, lr}
 80854d2:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 80854d4:	4608      	mov	r0, r1
 80854d6:	f002 ff43 	bl	8088360 <_ZNK6String5toIntEv>
 80854da:	62e0      	str	r0, [r4, #44]	; 0x2c
 80854dc:	bd10      	pop	{r4, pc}
	...

080854e0 <_ZN3GPS23set_horizontalDillutionE6String>:
}

void GPS::set_horizontalDillution(String hdString){
 80854e0:	b510      	push	{r4, lr}
 80854e2:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 80854e4:	4608      	mov	r0, r1
 80854e6:	f002 ff40 	bl	808836a <_ZNK6String7toFloatEv>
    temp_float *= 10;

    horizontal_dillution = temp_float;
 80854ea:	4902      	ldr	r1, [pc, #8]	; (80854f4 <_ZN3GPS23set_horizontalDillutionE6String+0x14>)
 80854ec:	f004 ffb2 	bl	808a454 <__aeabi_fmul>
 80854f0:	6320      	str	r0, [r4, #48]	; 0x30
 80854f2:	bd10      	pop	{r4, pc}
 80854f4:	41200000 	.word	0x41200000

080854f8 <_ZN3GPS12get_latitudeEv>:
}

double GPS::get_latitude(void){
    return latitude;
}
 80854f8:	f100 0108 	add.w	r1, r0, #8
 80854fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8085500:	4770      	bx	lr

08085502 <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 8085502:	f100 0110 	add.w	r1, r0, #16
 8085506:	e9d1 0100 	ldrd	r0, r1, [r1]
 808550a:	4770      	bx	lr

0808550c <_ZN3GPS23get_horizontalDillutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDillution(void){
 808550c:	b508      	push	{r3, lr}
    return horizontal_dillution;
 808550e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8085510:	f005 f966 	bl	808a7e0 <__aeabi_f2iz>
}
 8085514:	bd08      	pop	{r3, pc}

08085516 <_ZN3GPS15get_nsIndicatorEv>:
    return longFrac;
}

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 8085516:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 808551a:	4770      	bx	lr

0808551c <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 808551c:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 8085520:	4770      	bx	lr

08085522 <_GLOBAL__sub_I__ZN3GPS15set_lat_decimalE6Stringc>:
 8085522:	f001 bf83 	b.w	808742c <HAL_Pin_Map>

08085526 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8085526:	6803      	ldr	r3, [r0, #0]
 8085528:	b2c9      	uxtb	r1, r1
 808552a:	689b      	ldr	r3, [r3, #8]
 808552c:	4718      	bx	r3

0808552e <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 808552e:	4770      	bx	lr

08085530 <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 8085530:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 8085532:	f003 fff1 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085536:	2115      	movs	r1, #21
 8085538:	f003 fe98 	bl	808926c <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 808553c:	f003 ffec 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085540:	2105      	movs	r1, #5
 8085542:	f7ff fff0 	bl	8085526 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 8085546:	f003 ffe7 	bl	8089518 <_Z19__fetch_global_Wirev>
 808554a:	2103      	movs	r1, #3
 808554c:	f7ff ffeb 	bl	8085526 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 8085550:	f003 ffe2 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085554:	21e8      	movs	r1, #232	; 0xe8
 8085556:	f7ff ffe6 	bl	8085526 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 808555a:	f003 ffdd 	bl	8089518 <_Z19__fetch_global_Wirev>
 808555e:	21ff      	movs	r1, #255	; 0xff
 8085560:	f7ff ffe1 	bl	8085526 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 8085564:	f003 ffd8 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085568:	2100      	movs	r1, #0
 808556a:	f7ff ffdc 	bl	8085526 <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 808556e:	f003 ffd3 	bl	8089518 <_Z19__fetch_global_Wirev>
}
 8085572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0xFF);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);

  // end transmission
   Wire.endTransmission();
 8085576:	f003 be80 	b.w	808927a <_ZN7TwoWire15endTransmissionEv>

0808557a <_ZN13Telaire_T671315disableABCLogicEv>:
}

void Telaire_T6713::disableABCLogic()
{
 808557a:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 808557c:	f003 ffcc 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085580:	2115      	movs	r1, #21
 8085582:	f003 fe73 	bl	808926c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8085586:	f003 ffc7 	bl	8089518 <_Z19__fetch_global_Wirev>
 808558a:	2105      	movs	r1, #5
 808558c:	f7ff ffcb 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8085590:	f003 ffc2 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085594:	2103      	movs	r1, #3
 8085596:	f7ff ffc6 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 808559a:	f003 ffbd 	bl	8089518 <_Z19__fetch_global_Wirev>
 808559e:	21ee      	movs	r1, #238	; 0xee
 80855a0:	f7ff ffc1 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 80855a4:	f003 ffb8 	bl	8089518 <_Z19__fetch_global_Wirev>
 80855a8:	2100      	movs	r1, #0
 80855aa:	f7ff ffbc 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80855ae:	f003 ffb3 	bl	8089518 <_Z19__fetch_global_Wirev>
 80855b2:	2100      	movs	r1, #0
 80855b4:	f7ff ffb7 	bl	8085526 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80855b8:	f003 ffae 	bl	8089518 <_Z19__fetch_global_Wirev>
}
 80855bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0x00);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 80855c0:	f003 be5b 	b.w	808927a <_ZN7TwoWire15endTransmissionEv>

080855c4 <_ZN13Telaire_T671314enableABCLogicEv>:
}

void Telaire_T6713::enableABCLogic()
{
 80855c4:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 80855c6:	f003 ffa7 	bl	8089518 <_Z19__fetch_global_Wirev>
 80855ca:	2115      	movs	r1, #21
 80855cc:	f003 fe4e 	bl	808926c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80855d0:	f003 ffa2 	bl	8089518 <_Z19__fetch_global_Wirev>
 80855d4:	2105      	movs	r1, #5
 80855d6:	f7ff ffa6 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80855da:	f003 ff9d 	bl	8089518 <_Z19__fetch_global_Wirev>
 80855de:	2103      	movs	r1, #3
 80855e0:	f7ff ffa1 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 80855e4:	f003 ff98 	bl	8089518 <_Z19__fetch_global_Wirev>
 80855e8:	21ee      	movs	r1, #238	; 0xee
 80855ea:	f7ff ff9c 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 80855ee:	f003 ff93 	bl	8089518 <_Z19__fetch_global_Wirev>
 80855f2:	21ff      	movs	r1, #255	; 0xff
 80855f4:	f7ff ff97 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80855f8:	f003 ff8e 	bl	8089518 <_Z19__fetch_global_Wirev>
 80855fc:	2100      	movs	r1, #0
 80855fe:	f7ff ff92 	bl	8085526 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8085602:	f003 ff89 	bl	8089518 <_Z19__fetch_global_Wirev>
}
 8085606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 808560a:	f003 be36 	b.w	808927a <_ZN7TwoWire15endTransmissionEv>
	...

08085610 <_ZN13Telaire_T67139calibrateEi>:
}


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 8085610:	b508      	push	{r3, lr}
    if(debugging){
 8085612:	b121      	cbz	r1, 808561e <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 8085614:	f003 fc58 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8085618:	4913      	ldr	r1, [pc, #76]	; (8085668 <_ZN13Telaire_T67139calibrateEi+0x58>)
 808561a:	f002 ff02 	bl	8088422 <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 808561e:	f003 ff7b 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085622:	2115      	movs	r1, #21
 8085624:	f003 fe22 	bl	808926c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8085628:	f003 ff76 	bl	8089518 <_Z19__fetch_global_Wirev>
 808562c:	2105      	movs	r1, #5
 808562e:	f7ff ff7a 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8085632:	f003 ff71 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085636:	2103      	movs	r1, #3
 8085638:	f7ff ff75 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 808563c:	f003 ff6c 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085640:	21ec      	movs	r1, #236	; 0xec
 8085642:	f7ff ff70 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 8085646:	f003 ff67 	bl	8089518 <_Z19__fetch_global_Wirev>
 808564a:	21ff      	movs	r1, #255	; 0xff
 808564c:	f7ff ff6b 	bl	8085526 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8085650:	f003 ff62 	bl	8089518 <_Z19__fetch_global_Wirev>
 8085654:	2100      	movs	r1, #0
 8085656:	f7ff ff66 	bl	8085526 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 808565a:	f003 ff5d 	bl	8089518 <_Z19__fetch_global_Wirev>
}
 808565e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 8085662:	f003 be0a 	b.w	808927a <_ZN7TwoWire15endTransmissionEv>
 8085666:	bf00      	nop
 8085668:	080900c3 	.word	0x080900c3

0808566c <_GLOBAL__sub_I__ZN13Telaire_T6713C2Ev>:
 808566c:	f001 bede 	b.w	808742c <HAL_Pin_Map>

08085670 <_GLOBAL__sub_I__ZN7istream3getEv>:
 8085670:	f001 bedc 	b.w	808742c <HAL_Pin_Map>

08085674 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8085674:	b510      	push	{r4, lr}
 8085676:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8085678:	3028      	adds	r0, #40	; 0x28
 808567a:	f001 f97f 	bl	808697c <_ZN8FatCache4syncEv>
 808567e:	b128      	cbz	r0, 808568c <_ZN9FatVolume9cacheSyncEv+0x18>
 8085680:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 8085684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 8085688:	f001 b978 	b.w	808697c <_ZN8FatCache4syncEv>
  }
 808568c:	bd10      	pop	{r4, pc}

0808568e <_ZN7FatFile11lfnChecksumEPh>:
 * <http://www.gnu.org/licenses/>.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 808568e:	1e41      	subs	r1, r0, #1
 8085690:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 8085694:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8085696:	0843      	lsrs	r3, r0, #1
 8085698:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 808569c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80856a0:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80856a2:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80856a4:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80856a8:	d1f5      	bne.n	8085696 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 80856aa:	4770      	bx	lr

080856ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 80856ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 80856b0:	7803      	ldrb	r3, [r0, #0]
 80856b2:	1c44      	adds	r4, r0, #1
 80856b4:	2b20      	cmp	r3, #32
 80856b6:	d101      	bne.n	80856bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 80856b8:	4620      	mov	r0, r4
 80856ba:	e7f9      	b.n	80856b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 80856bc:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80856be:	4f70      	ldr	r7, [pc, #448]	; (8085880 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 80856c0:	6088      	str	r0, [r1, #8]
 80856c2:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 80856c4:	462e      	mov	r6, r5
 80856c6:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 80856ca:	b30b      	cbz	r3, 8085710 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80856cc:	2b2f      	cmp	r3, #47	; 0x2f
 80856ce:	d101      	bne.n	80856d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 80856d0:	1903      	adds	r3, r0, r4
 80856d2:	e017      	b.n	8085704 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80856d4:	2b5c      	cmp	r3, #92	; 0x5c
 80856d6:	d102      	bne.n	80856de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 80856d8:	2000      	movs	r0, #0
 80856da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80856de:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 80856e2:	b2e4      	uxtb	r4, r4
 80856e4:	2c1d      	cmp	r4, #29
 80856e6:	d803      	bhi.n	80856f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 80856e8:	fa27 f404 	lsr.w	r4, r7, r4
 80856ec:	07e4      	lsls	r4, r4, #31
 80856ee:	d4f3      	bmi.n	80856d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80856f0:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 80856f4:	2c3c      	cmp	r4, #60	; 0x3c
 80856f6:	d0ef      	beq.n	80856d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 80856f8:	3b20      	subs	r3, #32
 80856fa:	2b5e      	cmp	r3, #94	; 0x5e
 80856fc:	d9e1      	bls.n	80856c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 80856fe:	e7eb      	b.n	80856d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 8085700:	2d2f      	cmp	r5, #47	; 0x2f
 8085702:	d105      	bne.n	8085710 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8085704:	461e      	mov	r6, r3
 8085706:	f813 5b01 	ldrb.w	r5, [r3], #1
 808570a:	2d20      	cmp	r5, #32
 808570c:	d1f8      	bne.n	8085700 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 808570e:	e7f9      	b.n	8085704 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 8085710:	6016      	str	r6, [r2, #0]
 8085712:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 8085714:	4298      	cmp	r0, r3
 8085716:	ebc0 0803 	rsb	r8, r0, r3
 808571a:	d009      	beq.n	8085730 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 808571c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8085720:	2a2e      	cmp	r2, #46	; 0x2e
 8085722:	d0f7      	beq.n	8085714 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 8085724:	2a20      	cmp	r2, #32
 8085726:	d0f5      	beq.n	8085714 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 8085728:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 808572c:	dcd4      	bgt.n	80856d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 808572e:	e001      	b.n	8085734 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 8085730:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 8085734:	f8c1 8004 	str.w	r8, [r1, #4]
 8085738:	f101 030c 	add.w	r3, r1, #12
 808573c:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 8085740:	2420      	movs	r4, #32
 8085742:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 8085746:	4293      	cmp	r3, r2
 8085748:	d1fb      	bne.n	8085742 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 808574a:	4603      	mov	r3, r0
 808574c:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 808574e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8085752:	2c2e      	cmp	r4, #46	; 0x2e
 8085754:	d0fa      	beq.n	808574c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 8085756:	2c20      	cmp	r4, #32
 8085758:	d0f8      	beq.n	808574c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808575a:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808575e:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8085762:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8085764:	1c73      	adds	r3, r6, #1
 8085766:	d107      	bne.n	8085778 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8085768:	2700      	movs	r7, #0
 808576a:	f04f 0e07 	mov.w	lr, #7
 808576e:	463d      	mov	r5, r7
 8085770:	46ba      	mov	sl, r7
 8085772:	f04f 0908 	mov.w	r9, #8
 8085776:	e009      	b.n	808578c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8085778:	5d83      	ldrb	r3, [r0, r6]
 808577a:	2b2e      	cmp	r3, #46	; 0x2e
 808577c:	d0f4      	beq.n	8085768 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 808577e:	3e01      	subs	r6, #1
 8085780:	e7f0      	b.n	8085764 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 8085782:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 8085784:	2b20      	cmp	r3, #32
 8085786:	d104      	bne.n	8085792 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8085788:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 808578a:	3201      	adds	r2, #1
 808578c:	4542      	cmp	r2, r8
 808578e:	dbf8      	blt.n	8085782 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 8085790:	e04b      	b.n	808582a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 8085792:	2b2e      	cmp	r3, #46	; 0x2e
 8085794:	d102      	bne.n	808579c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8085796:	42b2      	cmp	r2, r6
 8085798:	d1f6      	bne.n	8085788 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 808579a:	e003      	b.n	80857a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 808579c:	2b22      	cmp	r3, #34	; 0x22
 808579e:	d017      	beq.n	80857d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 80857a0:	2b7c      	cmp	r3, #124	; 0x7c
 80857a2:	d015      	beq.n	80857d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80857a4:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80857a8:	f1bc 0f05 	cmp.w	ip, #5
 80857ac:	d801      	bhi.n	80857b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 80857ae:	2b2d      	cmp	r3, #45	; 0x2d
 80857b0:	d10e      	bne.n	80857d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 80857b2:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80857b6:	f1bc 0f05 	cmp.w	ip, #5
 80857ba:	d909      	bls.n	80857d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 80857bc:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 80857c0:	f1bc 0f02 	cmp.w	ip, #2
 80857c4:	d904      	bls.n	80857d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 80857c6:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80857ca:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80857ce:	d902      	bls.n	80857d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 80857d0:	42b2      	cmp	r2, r6
 80857d2:	d10e      	bne.n	80857f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 80857d4:	e049      	b.n	808586a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80857d6:	42b2      	cmp	r2, r6
 80857d8:	d047      	beq.n	808586a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 80857da:	4575      	cmp	r5, lr
 80857dc:	d821      	bhi.n	8085822 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 80857de:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80857e2:	f1bc 0f19 	cmp.w	ip, #25
 80857e6:	d808      	bhi.n	80857fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 80857e8:	3b20      	subs	r3, #32
 80857ea:	b2db      	uxtb	r3, r3
        lc |= bit;
 80857ec:	ea49 0707 	orr.w	r7, r9, r7
 80857f0:	e00a      	b.n	8085808 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80857f2:	4575      	cmp	r5, lr
 80857f4:	d815      	bhi.n	8085822 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 80857f6:	2400      	movs	r4, #0
      c = '_';
 80857f8:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 80857fa:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80857fe:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8085802:	bf98      	it	ls
 8085804:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 8085808:	f105 0c01 	add.w	ip, r5, #1
 808580c:	fa5f fc8c 	uxtb.w	ip, ip
 8085810:	440d      	add	r5, r1
      if (i < 7) {
 8085812:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 8085816:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 8085818:	d801      	bhi.n	808581e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 808581a:	f881 c00c 	strb.w	ip, [r1, #12]
 808581e:	4665      	mov	r5, ip
 8085820:	e7b3      	b.n	808578a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8085822:	f1be 0f0a 	cmp.w	lr, #10
 8085826:	d117      	bne.n	8085858 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8085828:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 808582a:	7b4b      	ldrb	r3, [r1, #13]
 808582c:	2b20      	cmp	r3, #32
 808582e:	f43f af53 	beq.w	80856d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 8085832:	b13c      	cbz	r4, 8085844 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8085834:	ea1a 0f07 	tst.w	sl, r7
 8085838:	bf18      	it	ne
 808583a:	2702      	movne	r7, #2
 808583c:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 808583e:	2001      	movs	r0, #1
 8085840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8085844:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8085846:	2001      	movs	r0, #1
 8085848:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 808584a:	4419      	add	r1, r3
 808584c:	237e      	movs	r3, #126	; 0x7e
 808584e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8085850:	2331      	movs	r3, #49	; 0x31
 8085852:	738b      	strb	r3, [r1, #14]
 8085854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8085858:	42b2      	cmp	r2, r6
 808585a:	dce5      	bgt.n	8085828 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 808585c:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808585e:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8085862:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8085864:	f04f 0910 	mov.w	r9, #16
 8085868:	e78e      	b.n	8085788 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 808586a:	f1be 0f0a 	cmp.w	lr, #10
 808586e:	d0db      	beq.n	8085828 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8085870:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8085872:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8085876:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8085878:	f04f 0910 	mov.w	r9, #16
 808587c:	e785      	b.n	808578a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 808587e:	bf00      	nop
 8085880:	31000101 	.word	0x31000101

08085884 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8085884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085888:	4606      	mov	r6, r0
 808588a:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 808588c:	f891 900c 	ldrb.w	r9, [r1, #12]
 8085890:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8085892:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8085894:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8085898:	6869      	ldr	r1, [r5, #4]
 808589a:	68aa      	ldr	r2, [r5, #8]
 808589c:	1863      	adds	r3, r4, r1
 808589e:	b29b      	uxth	r3, r3
 80858a0:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 80858a2:	4291      	cmp	r1, r2
 80858a4:	d006      	beq.n	80858b4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 80858a6:	f812 0b01 	ldrb.w	r0, [r2], #1
 80858aa:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80858ae:	4043      	eors	r3, r0
 80858b0:	b29b      	uxth	r3, r3
 80858b2:	e7f6      	b.n	80858a2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 80858b4:	f1b9 0f03 	cmp.w	r9, #3
 80858b8:	bf28      	it	cs
 80858ba:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80858be:	f109 0204 	add.w	r2, r9, #4
 80858c2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 80858c4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80858c8:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80858ca:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80858cc:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80858ce:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80858d0:	bf94      	ite	ls
 80858d2:	3130      	addls	r1, #48	; 0x30
 80858d4:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80858d6:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80858d8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 80858da:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80858de:	d3f1      	bcc.n	80858c4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80858e0:	eb05 0309 	add.w	r3, r5, r9
 80858e4:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 80858e6:	2100      	movs	r1, #0
 80858e8:	4630      	mov	r0, r6
 80858ea:	f000 fe38 	bl	808655e <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 80858ee:	2101      	movs	r1, #1
 80858f0:	4630      	mov	r0, r6
 80858f2:	f000 fe17 	bl	8086524 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80858f6:	4601      	mov	r1, r0
 80858f8:	b928      	cbnz	r0, 8085906 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80858fa:	7870      	ldrb	r0, [r6, #1]
 80858fc:	fab0 f080 	clz	r0, r0
 8085900:	0940      	lsrs	r0, r0, #5
 8085902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8085906:	7803      	ldrb	r3, [r0, #0]
 8085908:	b14b      	cbz	r3, 808591e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 808590a:	7ac3      	ldrb	r3, [r0, #11]
 808590c:	071b      	lsls	r3, r3, #28
 808590e:	d4ee      	bmi.n	80858ee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8085910:	220b      	movs	r2, #11
 8085912:	4640      	mov	r0, r8
 8085914:	f005 fadc 	bl	808aed0 <memcmp>
 8085918:	2800      	cmp	r0, #0
 808591a:	d1e8      	bne.n	80858ee <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 808591c:	e002      	b.n	8085924 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 808591e:	2001      	movs	r0, #1
 8085920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8085924:	3401      	adds	r4, #1
 8085926:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8085928:	2c64      	cmp	r4, #100	; 0x64
 808592a:	d1b5      	bne.n	8085898 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 808592c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08085930 <_ZN7FatFile4openEPS_P7fname_th>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8085930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085934:	b089      	sub	sp, #36	; 0x24
 8085936:	9303      	str	r3, [sp, #12]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8085938:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 808593a:	9005      	str	r0, [sp, #20]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 808593c:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8085940:	460e      	mov	r6, r1
 8085942:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8085944:	d101      	bne.n	808594a <_ZN7FatFile4openEPS_P7fname_th+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8085946:	2000      	movs	r0, #0
 8085948:	e199      	b.n	8085c7e <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 808594a:	9b05      	ldr	r3, [sp, #20]
 808594c:	781b      	ldrb	r3, [r3, #0]
 808594e:	2b00      	cmp	r3, #0
 8085950:	d1f9      	bne.n	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8085952:	7813      	ldrb	r3, [r2, #0]
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8085954:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8085958:	079b      	lsls	r3, r3, #30
 808595a:	f000 8186 	beq.w	8085c6a <_ZN7FatFile4openEPS_P7fname_th+0x33a>
 808595e:	f10b 030c 	add.w	r3, fp, #12
 8085962:	270d      	movs	r7, #13
 8085964:	fbb3 f7f7 	udiv	r7, r3, r7
 8085968:	3701      	adds	r7, #1
 808596a:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 808596c:	f04f 0800 	mov.w	r8, #0
 8085970:	2100      	movs	r1, #0
 8085972:	4630      	mov	r0, r6
 8085974:	f000 fdf3 	bl	808655e <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8085978:	4645      	mov	r5, r8
  uint8_t ord = 0;
 808597a:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 808597c:	4644      	mov	r4, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808597e:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 8085982:	f8cd 8008 	str.w	r8, [sp, #8]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
 8085986:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808598a:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808598c:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 808598e:	2101      	movs	r1, #1
 8085990:	4630      	mov	r0, r6
 8085992:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8085994:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8085998:	f000 fdc4 	bl	8086524 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 808599c:	9b07      	ldr	r3, [sp, #28]
 808599e:	b920      	cbnz	r0, 80859aa <_ZN7FatFile4openEPS_P7fname_th+0x7a>
      if (dirFile->getError()) {
 80859a0:	7873      	ldrb	r3, [r6, #1]
 80859a2:	2b00      	cmp	r3, #0
 80859a4:	f000 808e 	beq.w	8085ac4 <_ZN7FatFile4openEPS_P7fname_th+0x194>
 80859a8:	e7cd      	b.n	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 80859aa:	7802      	ldrb	r2, [r0, #0]
 80859ac:	2ae5      	cmp	r2, #229	; 0xe5
 80859ae:	d000      	beq.n	80859b2 <_ZN7FatFile4openEPS_P7fname_th+0x82>
 80859b0:	b942      	cbnz	r2, 80859c4 <_ZN7FatFile4openEPS_P7fname_th+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80859b2:	2d00      	cmp	r5, #0
 80859b4:	bf08      	it	eq
 80859b6:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 80859b8:	42bd      	cmp	r5, r7
        freeFound++;
 80859ba:	bf3c      	itt	cc
 80859bc:	3501      	addcc	r5, #1
 80859be:	b2ed      	uxtbcc	r5, r5
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80859c0:	b922      	cbnz	r2, 80859cc <_ZN7FatFile4openEPS_P7fname_th+0x9c>
 80859c2:	e07f      	b.n	8085ac4 <_ZN7FatFile4openEPS_P7fname_th+0x194>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 80859c4:	42bd      	cmp	r5, r7
 80859c6:	bf38      	it	cc
 80859c8:	2500      	movcc	r5, #0
 80859ca:	e003      	b.n	80859d4 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80859cc:	2ae5      	cmp	r2, #229	; 0xe5
 80859ce:	d101      	bne.n	80859d4 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 80859d0:	2400      	movs	r4, #0
 80859d2:	e7db      	b.n	808598c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80859d4:	2a2e      	cmp	r2, #46	; 0x2e
 80859d6:	d0fb      	beq.n	80859d0 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80859d8:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 80859da:	290f      	cmp	r1, #15
 80859dc:	d150      	bne.n	8085a80 <_ZN7FatFile4openEPS_P7fname_th+0x150>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 80859de:	b93c      	cbnz	r4, 80859f0 <_ZN7FatFile4openEPS_P7fname_th+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80859e0:	0651      	lsls	r1, r2, #25
 80859e2:	d5d3      	bpl.n	808598c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 80859e4:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80859e6:	f002 041f 	and.w	r4, r2, #31
        chksum = ldir->chksum;
 80859ea:	9302      	str	r3, [sp, #8]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80859ec:	4623      	mov	r3, r4
 80859ee:	e007      	b.n	8085a00 <_ZN7FatFile4openEPS_P7fname_th+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80859f0:	3b01      	subs	r3, #1
 80859f2:	b2db      	uxtb	r3, r3
 80859f4:	429a      	cmp	r2, r3
 80859f6:	d1eb      	bne.n	80859d0 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80859f8:	7b42      	ldrb	r2, [r0, #13]
 80859fa:	9902      	ldr	r1, [sp, #8]
 80859fc:	4291      	cmp	r1, r2
 80859fe:	d1e7      	bne.n	80859d0 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8085a00:	1e5a      	subs	r2, r3, #1
 8085a02:	f04f 0c0d 	mov.w	ip, #13
 8085a06:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8085a0a:	45e3      	cmp	fp, ip
 8085a0c:	d9e0      	bls.n	80859d0 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8085a0e:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8085a12:	f1be 0f04 	cmp.w	lr, #4
 8085a16:	fa5f f28e 	uxtb.w	r2, lr
 8085a1a:	d804      	bhi.n	8085a26 <_ZN7FatFile4openEPS_P7fname_th+0xf6>
    return ldir->name1[i];
 8085a1c:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8085a20:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8085a24:	e00c      	b.n	8085a40 <_ZN7FatFile4openEPS_P7fname_th+0x110>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8085a26:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8085a28:	bf95      	itete	ls
 8085a2a:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8085a2e:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8085a32:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8085a36:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8085a3a:	bf94      	ite	ls
 8085a3c:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8085a3e:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 8085a40:	45e3      	cmp	fp, ip
 8085a42:	d103      	bne.n	8085a4c <_ZN7FatFile4openEPS_P7fname_th+0x11c>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8085a44:	2a00      	cmp	r2, #0
 8085a46:	bf18      	it	ne
 8085a48:	2400      	movne	r4, #0
 8085a4a:	e79f      	b.n	808598c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085a4c:	2aff      	cmp	r2, #255	; 0xff
 8085a4e:	d8bf      	bhi.n	80859d0 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8085a50:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8085a52:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8085a56:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085a58:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8085a5c:	bf98      	it	ls
 8085a5e:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085a60:	f811 100c 	ldrb.w	r1, [r1, ip]
 8085a64:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8085a68:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8085a6c:	bf98      	it	ls
 8085a6e:	b2d2      	uxtbls	r2, r2
 8085a70:	f1bc 0f19 	cmp.w	ip, #25
 8085a74:	bf9c      	itt	ls
 8085a76:	3120      	addls	r1, #32
 8085a78:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085a7a:	4291      	cmp	r1, r2
 8085a7c:	d1a8      	bne.n	80859d0 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8085a7e:	e0f6      	b.n	8085c6e <_ZN7FatFile4openEPS_P7fname_th+0x33e>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8085a80:	070a      	lsls	r2, r1, #28
 8085a82:	d4a5      	bmi.n	80859d0 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
      if (lfnOrd) {
 8085a84:	b14c      	cbz	r4, 8085a9a <_ZN7FatFile4openEPS_P7fname_th+0x16a>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8085a86:	2b01      	cmp	r3, #1
 8085a88:	f47f af5d 	bne.w	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8085a8c:	f7ff fdff 	bl	808568e <_ZN7FatFile11lfnChecksumEPh>
 8085a90:	9b02      	ldr	r3, [sp, #8]
 8085a92:	4283      	cmp	r3, r0
 8085a94:	f47f af57 	bne.w	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8085a98:	e00f      	b.n	8085aba <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8085a9a:	220b      	movs	r2, #11
 8085a9c:	9906      	ldr	r1, [sp, #24]
 8085a9e:	9307      	str	r3, [sp, #28]
 8085aa0:	f005 fa16 	bl	808aed0 <memcmp>
 8085aa4:	9b07      	ldr	r3, [sp, #28]
 8085aa6:	2800      	cmp	r0, #0
 8085aa8:	f47f af70 	bne.w	808598c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8085aac:	f899 2000 	ldrb.w	r2, [r9]
 8085ab0:	07d1      	lsls	r1, r2, #31
 8085ab2:	d502      	bpl.n	8085aba <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        fnameFound = true;
 8085ab4:	2201      	movs	r2, #1
 8085ab6:	9204      	str	r2, [sp, #16]
 8085ab8:	e768      	b.n	808598c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8085aba:	9b03      	ldr	r3, [sp, #12]
 8085abc:	061a      	lsls	r2, r3, #24
 8085abe:	f140 80cc 	bpl.w	8085c5a <_ZN7FatFile4openEPS_P7fname_th+0x32a>
 8085ac2:	e740      	b.n	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8085ac4:	9b03      	ldr	r3, [sp, #12]
 8085ac6:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8085aca:	2b42      	cmp	r3, #66	; 0x42
 8085acc:	f47f af3b 	bne.w	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 8085ad0:	2d00      	cmp	r5, #0
 8085ad2:	bf08      	it	eq
 8085ad4:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8085ad6:	42bd      	cmp	r5, r7
 8085ad8:	d302      	bcc.n	8085ae0 <_ZN7FatFile4openEPS_P7fname_th+0x1b0>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8085ada:	9b04      	ldr	r3, [sp, #16]
 8085adc:	b9cb      	cbnz	r3, 8085b12 <_ZN7FatFile4openEPS_P7fname_th+0x1e2>
 8085ade:	e01f      	b.n	8085b20 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8085ae0:	2100      	movs	r1, #0
 8085ae2:	4630      	mov	r0, r6
 8085ae4:	f000 fd1e 	bl	8086524 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8085ae8:	b910      	cbnz	r0, 8085af0 <_ZN7FatFile4openEPS_P7fname_th+0x1c0>
      if (dirFile->getError()) {
 8085aea:	7873      	ldrb	r3, [r6, #1]
 8085aec:	b15b      	cbz	r3, 8085b06 <_ZN7FatFile4openEPS_P7fname_th+0x1d6>
 8085aee:	e72a      	b.n	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8085af0:	3501      	adds	r5, #1
 8085af2:	b2ed      	uxtb	r5, r5
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8085af4:	e7ef      	b.n	8085ad6 <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 8085af6:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8085af8:	791b      	ldrb	r3, [r3, #4]
 8085afa:	2b01      	cmp	r3, #1
 8085afc:	d8ed      	bhi.n	8085ada <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
      break;
    }
    freeFound += 16;
 8085afe:	3510      	adds	r5, #16
 8085b00:	b2ed      	uxtb	r5, r5
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 8085b02:	42af      	cmp	r7, r5
 8085b04:	d9e9      	bls.n	8085ada <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 8085b06:	4630      	mov	r0, r6
 8085b08:	f000 fbde 	bl	80862c8 <_ZN7FatFile13addDirClusterEv>
 8085b0c:	2800      	cmp	r0, #0
 8085b0e:	d1f2      	bne.n	8085af6 <_ZN7FatFile4openEPS_P7fname_th+0x1c6>
 8085b10:	e719      	b.n	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 8085b12:	4649      	mov	r1, r9
 8085b14:	4630      	mov	r0, r6
 8085b16:	f7ff feb5 	bl	8085884 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8085b1a:	2800      	cmp	r0, #0
 8085b1c:	f43f af13 	beq.w	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8085b20:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8085b24:	4630      	mov	r0, r6
 8085b26:	f000 fd1a 	bl	808655e <_ZN7FatFile7seekSetEm>
 8085b2a:	2800      	cmp	r0, #0
 8085b2c:	f43f af0b 	beq.w	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8085b30:	1e7c      	subs	r4, r7, #1
 8085b32:	b2e4      	uxtb	r4, r4
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8085b34:	4625      	mov	r5, r4
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8085b36:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8085b3a:	f04f 080f 	mov.w	r8, #15
 8085b3e:	e040      	b.n	8085bc2 <_ZN7FatFile4openEPS_P7fname_th+0x292>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8085b40:	2100      	movs	r1, #0
 8085b42:	4630      	mov	r0, r6
 8085b44:	f000 fcee 	bl	8086524 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8085b48:	4607      	mov	r7, r0
 8085b4a:	2800      	cmp	r0, #0
 8085b4c:	f43f aefb 	beq.w	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8085b50:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8085b52:	42a5      	cmp	r5, r4
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8085b54:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8085b58:	f043 0301 	orr.w	r3, r3, #1
 8085b5c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8085b60:	bf14      	ite	ne
 8085b62:	462a      	movne	r2, r5
 8085b64:	f045 0240 	orreq.w	r2, r5, #64	; 0x40
 8085b68:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8085b6a:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8085b6e:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8085b72:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8085b76:	9202      	str	r2, [sp, #8]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8085b78:	f7ff fd89 	bl	808568e <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8085b7c:	9a02      	ldr	r2, [sp, #8]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8085b7e:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8085b80:	f887 a01a 	strb.w	sl, [r7, #26]
 8085b84:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8085b88:	f002 021f 	and.w	r2, r2, #31
 8085b8c:	230d      	movs	r3, #13
 8085b8e:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8085b90:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8085b94:	435a      	muls	r2, r3
 8085b96:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8085b98:	4593      	cmp	fp, r2
 8085b9a:	d915      	bls.n	8085bc8 <_ZN7FatFile4openEPS_P7fname_th+0x298>
 8085b9c:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 8085ba0:	2b04      	cmp	r3, #4
 8085ba2:	fa5f fc83 	uxtb.w	ip, r3
 8085ba6:	f103 0001 	add.w	r0, r3, #1
 8085baa:	d813      	bhi.n	8085bd4 <_ZN7FatFile4openEPS_P7fname_th+0x2a4>
    ldir->name1[i] = c;
 8085bac:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8085bb0:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 8085bb4:	280d      	cmp	r0, #13
 8085bb6:	f102 0201 	add.w	r2, r2, #1
 8085bba:	4603      	mov	r3, r0
 8085bbc:	d1ec      	bne.n	8085b98 <_ZN7FatFile4openEPS_P7fname_th+0x268>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8085bbe:	3d01      	subs	r5, #1
 8085bc0:	b2ed      	uxtb	r5, r5
 8085bc2:	2d00      	cmp	r5, #0
 8085bc4:	d1bc      	bne.n	8085b40 <_ZN7FatFile4openEPS_P7fname_th+0x210>
 8085bc6:	e00e      	b.n	8085be6 <_ZN7FatFile4openEPS_P7fname_th+0x2b6>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8085bc8:	bf14      	ite	ne
 8085bca:	f04f 31ff 	movne.w	r1, #4294967295
 8085bce:	2100      	moveq	r1, #0
 8085bd0:	b289      	uxth	r1, r1
 8085bd2:	e7e5      	b.n	8085ba0 <_ZN7FatFile4openEPS_P7fname_th+0x270>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8085bd4:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8085bd8:	bf94      	ite	ls
 8085bda:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8085bde:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 8085be2:	8099      	strh	r1, [r3, #4]
 8085be4:	e7e6      	b.n	8085bb4 <_ZN7FatFile4openEPS_P7fname_th+0x284>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8085be6:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 8085be8:	4629      	mov	r1, r5
 8085bea:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8085bec:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 8085bf0:	f000 fc98 	bl	8086524 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8085bf4:	4607      	mov	r7, r0
 8085bf6:	2800      	cmp	r0, #0
 8085bf8:	f43f aea5 	beq.w	8085946 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8085bfc:	2220      	movs	r2, #32
 8085bfe:	4629      	mov	r1, r5
 8085c00:	f005 f980 	bl	808af04 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8085c04:	464b      	mov	r3, r9
 8085c06:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8085c0a:	603a      	str	r2, [r7, #0]
 8085c0c:	685a      	ldr	r2, [r3, #4]
 8085c0e:	607a      	str	r2, [r7, #4]
 8085c10:	891a      	ldrh	r2, [r3, #8]
 8085c12:	813a      	strh	r2, [r7, #8]
 8085c14:	7a9b      	ldrb	r3, [r3, #10]
 8085c16:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8085c18:	f899 3000 	ldrb.w	r3, [r9]
 8085c1c:	f003 0318 	and.w	r3, r3, #24
 8085c20:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 8085c22:	4b18      	ldr	r3, [pc, #96]	; (8085c84 <_ZN7FatFile4openEPS_P7fname_th+0x354>)
 8085c24:	681b      	ldr	r3, [r3, #0]
 8085c26:	b12b      	cbz	r3, 8085c34 <_ZN7FatFile4openEPS_P7fname_th+0x304>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8085c28:	f107 010e 	add.w	r1, r7, #14
 8085c2c:	f107 0010 	add.w	r0, r7, #16
 8085c30:	4798      	blx	r3
 8085c32:	e006      	b.n	8085c42 <_ZN7FatFile4openEPS_P7fname_th+0x312>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 8085c34:	2321      	movs	r3, #33	; 0x21
 8085c36:	743b      	strb	r3, [r7, #16]
 8085c38:	2328      	movs	r3, #40	; 0x28
 8085c3a:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8085c3c:	2308      	movs	r3, #8
 8085c3e:	73bd      	strb	r5, [r7, #14]
 8085c40:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 8085c42:	8a3b      	ldrh	r3, [r7, #16]
 8085c44:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8085c46:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8085c48:	89fb      	ldrh	r3, [r7, #14]
 8085c4a:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8085c4c:	68b2      	ldr	r2, [r6, #8]
 8085c4e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8085c52:	f043 0301 	orr.w	r3, r3, #1
 8085c56:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8085c5a:	9400      	str	r4, [sp, #0]
 8085c5c:	9b03      	ldr	r3, [sp, #12]
 8085c5e:	4652      	mov	r2, sl
 8085c60:	4631      	mov	r1, r6
 8085c62:	9805      	ldr	r0, [sp, #20]
 8085c64:	f000 fcc4 	bl	80865f0 <_ZN7FatFile15openCachedEntryEPS_thh>
 8085c68:	e009      	b.n	8085c7e <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8085c6a:	2701      	movs	r7, #1
 8085c6c:	e67e      	b.n	808596c <_ZN7FatFile4openEPS_P7fname_th+0x3c>
 8085c6e:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 8085c72:	f1be 0f0d 	cmp.w	lr, #13
 8085c76:	f43f ae89 	beq.w	808598c <_ZN7FatFile4openEPS_P7fname_th+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085c7a:	46d4      	mov	ip, sl
 8085c7c:	e6c9      	b.n	8085a12 <_ZN7FatFile4openEPS_P7fname_th+0xe2>
  }
  return true;

fail:
  return false;
}
 8085c7e:	b009      	add	sp, #36	; 0x24
 8085c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085c84:	20000b70 	.word	0x20000b70

08085c88 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8085c88:	f001 bbd0 	b.w	808742c <HAL_Pin_Map>

08085c8c <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8085c8c:	f001 bbce 	b.w	808742c <HAL_Pin_Map>

08085c90 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8085c90:	f001 bbcc 	b.w	808742c <HAL_Pin_Map>

08085c94 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8085c94:	f001 bbca 	b.w	808742c <HAL_Pin_Map>

08085c98 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8085c98:	6803      	ldr	r3, [r0, #0]
 8085c9a:	695b      	ldr	r3, [r3, #20]
 8085c9c:	4718      	bx	r3

08085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8085c9e:	6803      	ldr	r3, [r0, #0]
 8085ca0:	68db      	ldr	r3, [r3, #12]
 8085ca2:	4718      	bx	r3

08085ca4 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8085ca4:	b510      	push	{r4, lr}
  if (!m_selected) {
 8085ca6:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8085ca8:	4604      	mov	r4, r0
  if (!m_selected) {
 8085caa:	b16b      	cbz	r3, 8085cc8 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8085cac:	2101      	movs	r1, #1
 8085cae:	7940      	ldrb	r0, [r0, #5]
 8085cb0:	f003 fb95 	bl	80893de <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8085cb4:	21ff      	movs	r1, #255	; 0xff
 8085cb6:	6820      	ldr	r0, [r4, #0]
 8085cb8:	f7ff ffee 	bl	8085c98 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8085cbc:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 8085cbe:	6803      	ldr	r3, [r0, #0]
 8085cc0:	689b      	ldr	r3, [r3, #8]
 8085cc2:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 8085cc4:	2300      	movs	r3, #0
 8085cc6:	7123      	strb	r3, [r4, #4]
 8085cc8:	bd10      	pop	{r4, pc}

08085cca <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8085cca:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8085ccc:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8085cce:	4604      	mov	r4, r0
  if (m_selected) {
 8085cd0:	b955      	cbnz	r5, 8085ce8 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 8085cd2:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8085cd4:	79e1      	ldrb	r1, [r4, #7]
 8085cd6:	6803      	ldr	r3, [r0, #0]
 8085cd8:	685b      	ldr	r3, [r3, #4]
 8085cda:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 8085cdc:	4629      	mov	r1, r5
 8085cde:	7960      	ldrb	r0, [r4, #5]
 8085ce0:	f003 fb7d 	bl	80893de <digitalWrite>
  m_selected = true;
 8085ce4:	2301      	movs	r3, #1
 8085ce6:	7123      	strb	r3, [r4, #4]
 8085ce8:	bd38      	pop	{r3, r4, r5, pc}

08085cea <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8085cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085cec:	4604      	mov	r4, r0
 8085cee:	460d      	mov	r5, r1
 8085cf0:	4616      	mov	r6, r2
 8085cf2:	f001 fc4b 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
 8085cf6:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8085cf8:	6820      	ldr	r0, [r4, #0]
 8085cfa:	f7ff ffd0 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085cfe:	28ff      	cmp	r0, #255	; 0xff
 8085d00:	7220      	strb	r0, [r4, #8]
 8085d02:	d107      	bne.n	8085d14 <_ZN9SdSpiCard8readDataEPhj+0x2a>
 8085d04:	f001 fc42 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8085d08:	1bc0      	subs	r0, r0, r7
 8085d0a:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8085d0e:	d9f3      	bls.n	8085cf8 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085d10:	2311      	movs	r3, #17
 8085d12:	e00c      	b.n	8085d2e <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 8085d14:	28fe      	cmp	r0, #254	; 0xfe
 8085d16:	d001      	beq.n	8085d1c <_ZN9SdSpiCard8readDataEPhj+0x32>
 8085d18:	230f      	movs	r3, #15
 8085d1a:	e008      	b.n	8085d2e <_ZN9SdSpiCard8readDataEPhj+0x44>
 8085d1c:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 8085d1e:	4632      	mov	r2, r6
 8085d20:	6803      	ldr	r3, [r0, #0]
 8085d22:	4629      	mov	r1, r5
 8085d24:	691b      	ldr	r3, [r3, #16]
 8085d26:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8085d28:	7220      	strb	r0, [r4, #8]
 8085d2a:	b130      	cbz	r0, 8085d3a <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085d2c:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8085d2e:	4620      	mov	r0, r4
 8085d30:	71a3      	strb	r3, [r4, #6]
 8085d32:	f7ff ffb7 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085d36:	2000      	movs	r0, #0
}
 8085d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 8085d3a:	6820      	ldr	r0, [r4, #0]
 8085d3c:	f7ff ffaf 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 8085d40:	6820      	ldr	r0, [r4, #0]
 8085d42:	f7ff ffac 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085d46:	2001      	movs	r0, #1
 8085d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085d4a <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8085d4a:	b570      	push	{r4, r5, r6, lr}
 8085d4c:	4606      	mov	r6, r0
 8085d4e:	460c      	mov	r4, r1
 8085d50:	f001 fc1c 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
 8085d54:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8085d56:	6830      	ldr	r0, [r6, #0]
 8085d58:	f7ff ffa1 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085d5c:	28ff      	cmp	r0, #255	; 0xff
 8085d5e:	d006      	beq.n	8085d6e <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8085d60:	f001 fc14 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8085d64:	1b40      	subs	r0, r0, r5
 8085d66:	42a0      	cmp	r0, r4
 8085d68:	d3f5      	bcc.n	8085d56 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8085d6a:	2000      	movs	r0, #0
 8085d6c:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 8085d6e:	2001      	movs	r0, #1

fail:
  return false;
}
 8085d70:	bd70      	pop	{r4, r5, r6, pc}

08085d72 <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8085d72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 8085d74:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8085d76:	4604      	mov	r4, r0
 8085d78:	460d      	mov	r5, r1
 8085d7a:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 8085d7c:	b90b      	cbnz	r3, 8085d82 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8085d7e:	f7ff ffa4 	bl	8085cca <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 8085d82:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085d86:	4620      	mov	r0, r4
 8085d88:	f7ff ffdf 	bl	8085d4a <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 8085d8c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8085d90:	6820      	ldr	r0, [r4, #0]
 8085d92:	f7ff ff81 	bl	8085c98 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8085d96:	f10d 0607 	add.w	r6, sp, #7
 8085d9a:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 8085d9e:	f816 1901 	ldrb.w	r1, [r6], #-1
 8085da2:	6820      	ldr	r0, [r4, #0]
 8085da4:	f7ff ff78 	bl	8085c98 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8085da8:	42be      	cmp	r6, r7
 8085daa:	d1f8      	bne.n	8085d9e <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8085dac:	2d00      	cmp	r5, #0
 8085dae:	bf0c      	ite	eq
 8085db0:	2195      	moveq	r1, #149	; 0x95
 8085db2:	2187      	movne	r1, #135	; 0x87
 8085db4:	6820      	ldr	r0, [r4, #0]
 8085db6:	f7ff ff6f 	bl	8085c98 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 8085dba:	2d0c      	cmp	r5, #12
 8085dbc:	d102      	bne.n	8085dc4 <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 8085dbe:	6820      	ldr	r0, [r4, #0]
 8085dc0:	f7ff ff6d 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8085dc4:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8085dc6:	6820      	ldr	r0, [r4, #0]
 8085dc8:	f7ff ff69 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085dcc:	0603      	lsls	r3, r0, #24
 8085dce:	7220      	strb	r0, [r4, #8]
 8085dd0:	d503      	bpl.n	8085dda <_ZN9SdSpiCard11cardCommandEhm+0x68>
 8085dd2:	3501      	adds	r5, #1
 8085dd4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8085dd8:	d1f5      	bne.n	8085dc6 <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 8085dda:	b003      	add	sp, #12
 8085ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085dde <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8085dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085de0:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8085de2:	2300      	movs	r3, #0
  m_spi = spi;
  m_chipSelectPin = chipSelectPin;
 8085de4:	7142      	strb	r2, [r0, #5]
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
  m_errorCode = m_type = 0;
 8085de6:	7243      	strb	r3, [r0, #9]
 8085de8:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8085dea:	6001      	str	r1, [r0, #0]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8085dec:	4604      	mov	r4, r0
 8085dee:	f001 fbcd 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
 8085df2:	4606      	mov	r6, r0
 8085df4:	6820      	ldr	r0, [r4, #0]
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 8085df6:	7961      	ldrb	r1, [r4, #5]
 8085df8:	6803      	ldr	r3, [r0, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8085dfa:	250a      	movs	r5, #10
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 8085dfc:	681b      	ldr	r3, [r3, #0]
 8085dfe:	4798      	blx	r3

  // initialize SPI bus and chip select pin.
  spiBegin(m_chipSelectPin);

  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8085e00:	2180      	movs	r1, #128	; 0x80
 8085e02:	6820      	ldr	r0, [r4, #0]
 8085e04:	71e1      	strb	r1, [r4, #7]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8085e06:	6803      	ldr	r3, [r0, #0]
 8085e08:	685b      	ldr	r3, [r3, #4]
 8085e0a:	4798      	blx	r3
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
 8085e0c:	21ff      	movs	r1, #255	; 0xff
 8085e0e:	6820      	ldr	r0, [r4, #0]
 8085e10:	3d01      	subs	r5, #1
 8085e12:	f7ff ff41 	bl	8085c98 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
 8085e16:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8085e1a:	d1f7      	bne.n	8085e0c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
 8085e1c:	6820      	ldr	r0, [r4, #0]
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 8085e1e:	6803      	ldr	r3, [r0, #0]
 8085e20:	689b      	ldr	r3, [r3, #8]
 8085e22:	4798      	blx	r3
    spiSend(0XFF);
  }
  spiEndTransaction();
  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 8085e24:	2200      	movs	r2, #0
 8085e26:	4611      	mov	r1, r2
 8085e28:	4620      	mov	r0, r4
 8085e2a:	f7ff ffa2 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
 8085e2e:	2801      	cmp	r0, #1
 8085e30:	d007      	beq.n	8085e42 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
 8085e32:	f001 fbab 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8085e36:	1b80      	subs	r0, r0, r6
 8085e38:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085e3c:	d9f2      	bls.n	8085e24 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085e3e:	2301      	movs	r3, #1
 8085e40:	e048      	b.n	8085ed4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8085e42:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8085e46:	2108      	movs	r1, #8
 8085e48:	4620      	mov	r0, r4
 8085e4a:	f7ff ff92 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
 8085e4e:	2805      	cmp	r0, #5
 8085e50:	d101      	bne.n	8085e56 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x78>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8085e52:	2301      	movs	r3, #1
 8085e54:	e00b      	b.n	8085e6e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x90>
 8085e56:	2504      	movs	r5, #4
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
 8085e58:	6820      	ldr	r0, [r4, #0]
 8085e5a:	f7ff ff20 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085e5e:	3d01      	subs	r5, #1
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8085e60:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 8085e64:	7220      	strb	r0, [r4, #8]
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8085e66:	d1f7      	bne.n	8085e58 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x7a>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8085e68:	28aa      	cmp	r0, #170	; 0xaa
 8085e6a:	d108      	bne.n	8085e7e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xa0>
 8085e6c:	2302      	movs	r3, #2
 8085e6e:	7263      	strb	r3, [r4, #9]
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8085e70:	7a63      	ldrb	r3, [r4, #9]
 8085e72:	2b02      	cmp	r3, #2
 8085e74:	bf0c      	ite	eq
 8085e76:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8085e7a:	2500      	movne	r5, #0
 8085e7c:	e007      	b.n	8085e8e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
 8085e7e:	f001 fb85 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
    }
    if (m_status == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8085e82:	1b80      	subs	r0, r0, r6
 8085e84:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085e88:	d9db      	bls.n	8085e42 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085e8a:	2302      	movs	r3, #2
 8085e8c:	e022      	b.n	8085ed4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8085e8e:	2200      	movs	r2, #0
 8085e90:	2137      	movs	r1, #55	; 0x37
 8085e92:	4620      	mov	r0, r4
 8085e94:	f7ff ff6d 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8085e98:	462a      	mov	r2, r5
 8085e9a:	2129      	movs	r1, #41	; 0x29
 8085e9c:	4620      	mov	r0, r4
 8085e9e:	f7ff ff68 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8085ea2:	4602      	mov	r2, r0
 8085ea4:	b138      	cbz	r0, 8085eb6 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xd8>
 8085ea6:	f001 fb71 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
    // check for timeout
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8085eaa:	1b80      	subs	r0, r0, r6
 8085eac:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085eb0:	d9ed      	bls.n	8085e8e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085eb2:	230a      	movs	r3, #10
 8085eb4:	e00e      	b.n	8085ed4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8085eb6:	7a63      	ldrb	r3, [r4, #9]
 8085eb8:	2b02      	cmp	r3, #2
 8085eba:	d005      	beq.n	8085ec8 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xea>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  chipSelectHigh();
 8085ebc:	4620      	mov	r0, r4
 8085ebe:	f7ff fef1 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  m_sckDivisor = sckDivisor;
 8085ec2:	71e7      	strb	r7, [r4, #7]
  return true;
 8085ec4:	2001      	movs	r0, #1
 8085ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8085ec8:	213a      	movs	r1, #58	; 0x3a
 8085eca:	4620      	mov	r0, r4
 8085ecc:	f7ff ff51 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
 8085ed0:	b130      	cbz	r0, 8085ee0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x102>
 8085ed2:	2308      	movs	r3, #8
  chipSelectHigh();
  m_sckDivisor = sckDivisor;
  return true;

fail:
  chipSelectHigh();
 8085ed4:	4620      	mov	r0, r4
 8085ed6:	71a3      	strb	r3, [r4, #6]
 8085ed8:	f7ff fee4 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085edc:	2000      	movs	r0, #0
}
 8085ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 8085ee0:	6820      	ldr	r0, [r4, #0]
 8085ee2:	f7ff fedc 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085ee6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8085eea:	28c0      	cmp	r0, #192	; 0xc0
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8085eec:	bf04      	itt	eq
 8085eee:	2303      	moveq	r3, #3
 8085ef0:	7263      	strbeq	r3, [r4, #9]
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
 8085ef2:	6820      	ldr	r0, [r4, #0]
 8085ef4:	f7ff fed3 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085ef8:	6820      	ldr	r0, [r4, #0]
 8085efa:	f7ff fed0 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085efe:	6820      	ldr	r0, [r4, #0]
 8085f00:	f7ff fecd 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085f04:	e7da      	b.n	8085ebc <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xde>

08085f06 <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085f06:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085f08:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085f0a:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085f0c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085f0e:	bf18      	it	ne
 8085f10:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8085f12:	460a      	mov	r2, r1
 8085f14:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085f16:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8085f18:	f7ff ff2b 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
 8085f1c:	b110      	cbz	r0, 8085f24 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085f1e:	2304      	movs	r3, #4
 8085f20:	71a3      	strb	r3, [r4, #6]
 8085f22:	e00b      	b.n	8085f3c <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8085f24:	4629      	mov	r1, r5
 8085f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085f2a:	4620      	mov	r0, r4
 8085f2c:	f7ff fedd 	bl	8085cea <_ZN9SdSpiCard8readDataEPhj>
 8085f30:	4605      	mov	r5, r0
 8085f32:	b118      	cbz	r0, 8085f3c <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 8085f34:	4620      	mov	r0, r4
 8085f36:	f7ff feb5 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8085f3a:	e003      	b.n	8085f44 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 8085f3c:	4620      	mov	r0, r4
 8085f3e:	f7ff feb1 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085f42:	2500      	movs	r5, #0
}
 8085f44:	4628      	mov	r0, r5
 8085f46:	bd38      	pop	{r3, r4, r5, pc}

08085f48 <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085f48:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8085f4a:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085f4c:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8085f4e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085f50:	bf18      	it	ne
 8085f52:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8085f54:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085f56:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8085f58:	f7ff ff0b 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
 8085f5c:	b130      	cbz	r0, 8085f6c <_ZN9SdSpiCard9readStartEm+0x24>
 8085f5e:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8085f60:	4620      	mov	r0, r4
 8085f62:	71a3      	strb	r3, [r4, #6]
 8085f64:	f7ff fe9e 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085f68:	2000      	movs	r0, #0
 8085f6a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 8085f6c:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8085f6e:	bd10      	pop	{r4, pc}

08085f70 <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8085f70:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8085f72:	2200      	movs	r2, #0
 8085f74:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8085f76:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8085f78:	f7ff fefb 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
 8085f7c:	b130      	cbz	r0, 8085f8c <_ZN9SdSpiCard8readStopEv+0x1c>
 8085f7e:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 8085f80:	4620      	mov	r0, r4
 8085f82:	71a3      	strb	r3, [r4, #6]
 8085f84:	f7ff fe8e 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085f88:	2000      	movs	r0, #0
 8085f8a:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 8085f8c:	4620      	mov	r0, r4
 8085f8e:	f7ff fe89 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8085f92:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8085f94:	bd10      	pop	{r4, pc}

08085f96 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8085f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085f98:	4605      	mov	r5, r0
 8085f9a:	4616      	mov	r6, r2
 8085f9c:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8085f9e:	f7ff ffd3 	bl	8085f48 <_ZN9SdSpiCard9readStartEm>
 8085fa2:	b198      	cbz	r0, 8085fcc <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8085fa4:	2400      	movs	r4, #0
 8085fa6:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8085fa8:	429f      	cmp	r7, r3
 8085faa:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8085fae:	d908      	bls.n	8085fc2 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8085fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085fb4:	4628      	mov	r0, r5
 8085fb6:	f7ff fe98 	bl	8085cea <_ZN9SdSpiCard8readDataEPhj>
 8085fba:	3401      	adds	r4, #1
 8085fbc:	2800      	cmp	r0, #0
 8085fbe:	d1f2      	bne.n	8085fa6 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8085fc0:	e004      	b.n	8085fcc <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8085fc2:	4628      	mov	r0, r5
}
 8085fc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8085fc8:	f7ff bfd2 	b.w	8085f70 <_ZN9SdSpiCard8readStopEv>
}
 8085fcc:	2000      	movs	r0, #0
 8085fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085fd0 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8085fd0:	b538      	push	{r3, r4, r5, lr}
 8085fd2:	4604      	mov	r4, r0
 8085fd4:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8085fd6:	6800      	ldr	r0, [r0, #0]
 8085fd8:	f7ff fe5e 	bl	8085c98 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8085fdc:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8085fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085fe2:	6803      	ldr	r3, [r0, #0]
 8085fe4:	4629      	mov	r1, r5
 8085fe6:	699b      	ldr	r3, [r3, #24]
 8085fe8:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 8085fea:	21ff      	movs	r1, #255	; 0xff
 8085fec:	6820      	ldr	r0, [r4, #0]
 8085fee:	f7ff fe53 	bl	8085c98 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 8085ff2:	21ff      	movs	r1, #255	; 0xff
 8085ff4:	6820      	ldr	r0, [r4, #0]
 8085ff6:	f7ff fe4f 	bl	8085c98 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 8085ffa:	6820      	ldr	r0, [r4, #0]
 8085ffc:	f7ff fe4f 	bl	8085c9e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086000:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8086002:	f000 001f 	and.w	r0, r0, #31
 8086006:	2805      	cmp	r0, #5
 8086008:	d006      	beq.n	8086018 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808600a:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 808600c:	4620      	mov	r0, r4
 808600e:	71a3      	strb	r3, [r4, #6]
 8086010:	f7ff fe48 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086014:	2000      	movs	r0, #0
 8086016:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8086018:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 808601a:	bd38      	pop	{r3, r4, r5, pc}

0808601c <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808601c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808601e:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086020:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086022:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086024:	bf18      	it	ne
 8086026:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8086028:	460a      	mov	r2, r1
 808602a:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808602c:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 808602e:	f7ff fea0 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
 8086032:	b110      	cbz	r0, 808603a <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8086034:	2306      	movs	r3, #6
 8086036:	71a3      	strb	r3, [r4, #6]
 8086038:	e00a      	b.n	8086050 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 808603a:	462a      	mov	r2, r5
 808603c:	21fe      	movs	r1, #254	; 0xfe
 808603e:	4620      	mov	r0, r4
 8086040:	f7ff ffc6 	bl	8085fd0 <_ZN9SdSpiCard9writeDataEhPKh>
 8086044:	4605      	mov	r5, r0
 8086046:	b118      	cbz	r0, 8086050 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 8086048:	4620      	mov	r0, r4
 808604a:	f7ff fe2b 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 808604e:	e003      	b.n	8086058 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 8086050:	4620      	mov	r0, r4
 8086052:	f7ff fe27 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086056:	2500      	movs	r5, #0
}
 8086058:	4628      	mov	r0, r5
 808605a:	bd38      	pop	{r3, r4, r5, pc}

0808605c <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 808605c:	b570      	push	{r4, r5, r6, lr}
 808605e:	4604      	mov	r4, r0
 8086060:	460d      	mov	r5, r1
  bool selected = m_selected;
 8086062:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 8086064:	f7ff fe31 	bl	8085cca <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8086068:	f44f 7116 	mov.w	r1, #600	; 0x258
 808606c:	4620      	mov	r0, r4
 808606e:	f7ff fe6c 	bl	8085d4a <_ZN9SdSpiCard11waitNotBusyEt>
 8086072:	b910      	cbnz	r0, 808607a <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 8086074:	2317      	movs	r3, #23
 8086076:	71a3      	strb	r3, [r4, #6]
 8086078:	e00b      	b.n	8086092 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 808607a:	462a      	mov	r2, r5
 808607c:	21fc      	movs	r1, #252	; 0xfc
 808607e:	4620      	mov	r0, r4
 8086080:	f7ff ffa6 	bl	8085fd0 <_ZN9SdSpiCard9writeDataEhPKh>
 8086084:	4605      	mov	r5, r0
 8086086:	b120      	cbz	r0, 8086092 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 8086088:	b93e      	cbnz	r6, 808609a <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 808608a:	4620      	mov	r0, r4
 808608c:	f7ff fe0a 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
 8086090:	e003      	b.n	808609a <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 8086092:	4620      	mov	r0, r4
 8086094:	f7ff fe06 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086098:	2500      	movs	r5, #0
}
 808609a:	4628      	mov	r0, r5
 808609c:	bd70      	pop	{r4, r5, r6, pc}

0808609e <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 808609e:	b570      	push	{r4, r5, r6, lr}
 80860a0:	4604      	mov	r4, r0
 80860a2:	4616      	mov	r6, r2
 80860a4:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 80860a6:	2200      	movs	r2, #0
 80860a8:	2137      	movs	r1, #55	; 0x37
 80860aa:	f7ff fe62 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80860ae:	4632      	mov	r2, r6
 80860b0:	2117      	movs	r1, #23
 80860b2:	4620      	mov	r0, r4
 80860b4:	f7ff fe5d 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 80860b8:	b108      	cbz	r0, 80860be <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80860ba:	2309      	movs	r3, #9
 80860bc:	e00a      	b.n	80860d4 <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80860be:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 80860c0:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80860c2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80860c4:	bf18      	it	ne
 80860c6:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 80860c8:	462a      	mov	r2, r5
 80860ca:	4620      	mov	r0, r4
 80860cc:	f7ff fe51 	bl	8085d72 <_ZN9SdSpiCard11cardCommandEhm>
 80860d0:	b130      	cbz	r0, 80860e0 <_ZN9SdSpiCard10writeStartEmm+0x42>
 80860d2:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 80860d4:	4620      	mov	r0, r4
 80860d6:	71a3      	strb	r3, [r4, #6]
 80860d8:	f7ff fde4 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80860dc:	2000      	movs	r0, #0
 80860de:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 80860e0:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 80860e2:	bd70      	pop	{r4, r5, r6, pc}

080860e4 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 80860e4:	b538      	push	{r3, r4, r5, lr}
 80860e6:	4604      	mov	r4, r0
  chipSelectLow();
 80860e8:	f7ff fdef 	bl	8085cca <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80860ec:	f44f 7116 	mov.w	r1, #600	; 0x258
 80860f0:	4620      	mov	r0, r4
 80860f2:	f7ff fe2a 	bl	8085d4a <_ZN9SdSpiCard11waitNotBusyEt>
 80860f6:	b170      	cbz	r0, 8086116 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 80860f8:	21fd      	movs	r1, #253	; 0xfd
 80860fa:	6820      	ldr	r0, [r4, #0]
 80860fc:	f7ff fdcc 	bl	8085c98 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8086100:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086104:	4620      	mov	r0, r4
 8086106:	f7ff fe20 	bl	8085d4a <_ZN9SdSpiCard11waitNotBusyEt>
 808610a:	4605      	mov	r5, r0
 808610c:	b118      	cbz	r0, 8086116 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 808610e:	4620      	mov	r0, r4
 8086110:	f7ff fdc8 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086114:	e005      	b.n	8086122 <_ZN9SdSpiCard9writeStopEv+0x3e>
 8086116:	2312      	movs	r3, #18
 8086118:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 808611a:	4620      	mov	r0, r4
 808611c:	f7ff fdc2 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086120:	2500      	movs	r5, #0
}
 8086122:	4628      	mov	r0, r5
 8086124:	bd38      	pop	{r3, r4, r5, pc}

08086126 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8086126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086128:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 808612a:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 808612c:	4605      	mov	r5, r0
 808612e:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8086130:	f7ff ffb5 	bl	808609e <_ZN9SdSpiCard10writeStartEmm>
 8086134:	b170      	cbz	r0, 8086154 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 8086136:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8086138:	42b4      	cmp	r4, r6
 808613a:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 808613e:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8086140:	d004      	beq.n	808614c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8086142:	f7ff ff8b 	bl	808605c <_ZN9SdSpiCard9writeDataEPKh>
 8086146:	b128      	cbz	r0, 8086154 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8086148:	3401      	adds	r4, #1
 808614a:	e7f5      	b.n	8086138 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 808614c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8086150:	f7ff bfc8 	b.w	80860e4 <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 8086154:	4628      	mov	r0, r5
 8086156:	f7ff fda5 	bl	8085ca4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 808615a:	2000      	movs	r0, #0
 808615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808615e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 808615e:	f001 b965 	b.w	808742c <HAL_Pin_Map>
	...

08086164 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8086164:	4b01      	ldr	r3, [pc, #4]	; (808616c <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8086166:	2201      	movs	r2, #1
 8086168:	701a      	strb	r2, [r3, #0]
 808616a:	4770      	bx	lr
 808616c:	20000b68 	.word	0x20000b68

08086170 <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 8086170:	4770      	bx	lr
	...

08086174 <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8086174:	7902      	ldrb	r2, [r0, #4]
 8086176:	4b02      	ldr	r3, [pc, #8]	; (8086180 <_ZN5SdSpi5beginEh+0xc>)
 8086178:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 808617c:	f001 bde6 	b.w	8087d4c <_ZN8SPIClass5beginEt>
 8086180:	080900d4 	.word	0x080900d4

08086184 <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 8086184:	b570      	push	{r4, r5, r6, lr}
 8086186:	4606      	mov	r6, r0
 8086188:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 808618a:	7903      	ldrb	r3, [r0, #4]
 808618c:	4d1a      	ldr	r5, [pc, #104]	; (80861f8 <_ZN5SdSpi16beginTransactionEh+0x74>)
 808618e:	2101      	movs	r1, #1
 8086190:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8086194:	f001 fde0 	bl	8087d58 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8086198:	7933      	ldrb	r3, [r6, #4]
 808619a:	2100      	movs	r1, #0
 808619c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80861a0:	f001 fddd 	bl	8087d5e <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 80861a4:	2c02      	cmp	r4, #2
 80861a6:	d90c      	bls.n	80861c2 <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 80861a8:	2c04      	cmp	r4, #4
 80861aa:	d90c      	bls.n	80861c6 <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 80861ac:	2c08      	cmp	r4, #8
 80861ae:	d90c      	bls.n	80861ca <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 80861b0:	2c10      	cmp	r4, #16
 80861b2:	d90c      	bls.n	80861ce <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 80861b4:	2c20      	cmp	r4, #32
 80861b6:	d90c      	bls.n	80861d2 <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 80861b8:	2c41      	cmp	r4, #65	; 0x41
 80861ba:	bf34      	ite	cc
 80861bc:	2128      	movcc	r1, #40	; 0x28
 80861be:	2130      	movcs	r1, #48	; 0x30
 80861c0:	e008      	b.n	80861d4 <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 80861c2:	2100      	movs	r1, #0
 80861c4:	e006      	b.n	80861d4 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 80861c6:	2108      	movs	r1, #8
 80861c8:	e004      	b.n	80861d4 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 80861ca:	2110      	movs	r1, #16
 80861cc:	e002      	b.n	80861d4 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 80861ce:	2118      	movs	r1, #24
 80861d0:	e000      	b.n	80861d4 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 80861d2:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 80861d4:	7933      	ldrb	r3, [r6, #4]
 80861d6:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80861da:	f001 fe09 	bl	8087df0 <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 80861de:	2318      	movs	r3, #24
 80861e0:	fb03 f104 	mul.w	r1, r3, r4
 80861e4:	7932      	ldrb	r2, [r6, #4]
 80861e6:	233c      	movs	r3, #60	; 0x3c
 80861e8:	fb02 1101 	mla	r1, r2, r1, r1
 80861ec:	fb91 f1f3 	sdiv	r1, r1, r3
 80861f0:	4b02      	ldr	r3, [pc, #8]	; (80861fc <_ZN5SdSpi16beginTransactionEh+0x78>)
 80861f2:	6019      	str	r1, [r3, #0]
 80861f4:	bd70      	pop	{r4, r5, r6, pc}
 80861f6:	bf00      	nop
 80861f8:	080900d4 	.word	0x080900d4
 80861fc:	20000b6c 	.word	0x20000b6c

08086200 <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8086200:	7902      	ldrb	r2, [r0, #4]
 8086202:	4b03      	ldr	r3, [pc, #12]	; (8086210 <_ZN5SdSpi7receiveEv+0x10>)
 8086204:	21ff      	movs	r1, #255	; 0xff
 8086206:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 808620a:	f001 be05 	b.w	8087e18 <_ZN8SPIClass8transferEh>
 808620e:	bf00      	nop
 8086210:	080900d4 	.word	0x080900d4

08086214 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8086214:	7902      	ldrb	r2, [r0, #4]
 8086216:	4b02      	ldr	r3, [pc, #8]	; (8086220 <_ZN5SdSpi4sendEh+0xc>)
 8086218:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 808621c:	f001 bdfc 	b.w	8087e18 <_ZN8SPIClass8transferEh>
 8086220:	080900d4 	.word	0x080900d4

08086224 <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8086224:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8086226:	4b0c      	ldr	r3, [pc, #48]	; (8086258 <_ZN5SdSpi7receiveEPhj+0x34>)
 8086228:	7906      	ldrb	r6, [r0, #4]
 808622a:	480c      	ldr	r0, [pc, #48]	; (808625c <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 808622c:	2500      	movs	r5, #0
 808622e:	4c0c      	ldr	r4, [pc, #48]	; (8086260 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8086230:	9300      	str	r3, [sp, #0]
 8086232:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8086236:	4613      	mov	r3, r2
 8086238:	460a      	mov	r2, r1
 808623a:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 808623c:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808623e:	f001 fdf1 	bl	8087e24 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8086242:	7823      	ldrb	r3, [r4, #0]
 8086244:	2b00      	cmp	r3, #0
 8086246:	d0fc      	beq.n	8086242 <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8086248:	4b06      	ldr	r3, [pc, #24]	; (8086264 <_ZN5SdSpi7receiveEPhj+0x40>)
 808624a:	6818      	ldr	r0, [r3, #0]
 808624c:	b108      	cbz	r0, 8086252 <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 808624e:	f001 f995 	bl	808757c <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 8086252:	2000      	movs	r0, #0
 8086254:	b002      	add	sp, #8
 8086256:	bd70      	pop	{r4, r5, r6, pc}
 8086258:	08086165 	.word	0x08086165
 808625c:	080900d4 	.word	0x080900d4
 8086260:	20000b68 	.word	0x20000b68
 8086264:	20000b6c 	.word	0x20000b6c

08086268 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8086268:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808626a:	4b0d      	ldr	r3, [pc, #52]	; (80862a0 <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 808626c:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 808626e:	480d      	ldr	r0, [pc, #52]	; (80862a4 <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8086270:	2500      	movs	r5, #0
 8086272:	4c0d      	ldr	r4, [pc, #52]	; (80862a8 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8086274:	9300      	str	r3, [sp, #0]
 8086276:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 808627a:	4613      	mov	r3, r2
 808627c:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 808627e:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8086280:	f001 fdd0 	bl	8087e24 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8086284:	7823      	ldrb	r3, [r4, #0]
 8086286:	2b00      	cmp	r3, #0
 8086288:	d0fc      	beq.n	8086284 <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 808628a:	4b08      	ldr	r3, [pc, #32]	; (80862ac <_ZN5SdSpi4sendEPKhj+0x44>)
 808628c:	6818      	ldr	r0, [r3, #0]
 808628e:	b120      	cbz	r0, 808629a <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 8086290:	b002      	add	sp, #8
 8086292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8086296:	f001 b971 	b.w	808757c <HAL_Delay_Microseconds>
 808629a:	b002      	add	sp, #8
 808629c:	bd70      	pop	{r4, r5, r6, pc}
 808629e:	bf00      	nop
 80862a0:	08086165 	.word	0x08086165
 80862a4:	080900d4 	.word	0x080900d4
 80862a8:	20000b68 	.word	0x20000b68
 80862ac:	20000b6c 	.word	0x20000b6c

080862b0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 80862b0:	f001 b8bc 	b.w	808742c <HAL_Pin_Map>

080862b4 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80862b4:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80862b6:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80862ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80862be:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80862c0:	6901      	ldr	r1, [r0, #16]
 80862c2:	6880      	ldr	r0, [r0, #8]
 80862c4:	f000 bc04 	b.w	8086ad0 <_ZN9FatVolume15allocateClusterEmPm>

080862c8 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80862c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80862cc:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80862ce:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80862d0:	f003 0320 	and.w	r3, r3, #32
 80862d4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80862d8:	b10b      	cbz	r3, 80862de <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 80862da:	2600      	movs	r6, #0
 80862dc:	e02e      	b.n	808633c <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 80862de:	6942      	ldr	r2, [r0, #20]
 80862e0:	4b18      	ldr	r3, [pc, #96]	; (8086344 <_ZN7FatFile13addDirClusterEv+0x7c>)
 80862e2:	429a      	cmp	r2, r3
 80862e4:	d8f9      	bhi.n	80862da <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 80862e6:	f7ff ffe5 	bl	80862b4 <_ZN7FatFile10addClusterEv>
 80862ea:	4606      	mov	r6, r0
 80862ec:	2800      	cmp	r0, #0
 80862ee:	d0f4      	beq.n	80862da <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
 80862f0:	6921      	ldr	r1, [r4, #16]
 80862f2:	68a0      	ldr	r0, [r4, #8]
 80862f4:	f000 fb8d 	bl	8086a12 <_ZNK9FatVolume17clusterStartBlockEm>
 80862f8:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80862fa:	68a0      	ldr	r0, [r4, #8]
 80862fc:	2205      	movs	r2, #5
 80862fe:	4639      	mov	r1, r7
 8086300:	3028      	adds	r0, #40	; 0x28
 8086302:	f000 fb62 	bl	80869ca <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8086306:	4680      	mov	r8, r0
 8086308:	2800      	cmp	r0, #0
 808630a:	d0e6      	beq.n	80862da <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 808630c:	4629      	mov	r1, r5
 808630e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086312:	f004 fdf7 	bl	808af04 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8086316:	2501      	movs	r5, #1
 8086318:	68a0      	ldr	r0, [r4, #8]
 808631a:	7902      	ldrb	r2, [r0, #4]
 808631c:	42aa      	cmp	r2, r5
 808631e:	d909      	bls.n	8086334 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8086320:	6803      	ldr	r3, [r0, #0]
 8086322:	4642      	mov	r2, r8
 8086324:	685b      	ldr	r3, [r3, #4]
 8086326:	19e9      	adds	r1, r5, r7
 8086328:	4798      	blx	r3
 808632a:	2800      	cmp	r0, #0
 808632c:	d0d5      	beq.n	80862da <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 808632e:	3501      	adds	r5, #1
 8086330:	b2ed      	uxtb	r5, r5
 8086332:	e7f1      	b.n	8086318 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8086334:	6963      	ldr	r3, [r4, #20]
 8086336:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 808633a:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 808633c:	4630      	mov	r0, r6
 808633e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086342:	bf00      	nop
 8086344:	001ffdff 	.word	0x001ffdff

08086348 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8086348:	b510      	push	{r4, lr}
 808634a:	4604      	mov	r4, r0
 808634c:	6880      	ldr	r0, [r0, #8]
 808634e:	460a      	mov	r2, r1
 8086350:	3028      	adds	r0, #40	; 0x28
 8086352:	69a1      	ldr	r1, [r4, #24]
 8086354:	f000 fb39 	bl	80869ca <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8086358:	b120      	cbz	r0, 8086364 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 808635a:	88a3      	ldrh	r3, [r4, #4]
 808635c:	f003 030f 	and.w	r3, r3, #15
 8086360:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8086364:	bd10      	pop	{r4, pc}

08086366 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8086366:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8086368:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 808636a:	4605      	mov	r5, r0
 808636c:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 808636e:	b984      	cbnz	r4, 8086392 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8086370:	2224      	movs	r2, #36	; 0x24
 8086372:	4621      	mov	r1, r4
 8086374:	f004 fdc6 	bl	808af04 <memset>

  m_vol = vol;
 8086378:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 808637a:	79f3      	ldrb	r3, [r6, #7]
 808637c:	2b10      	cmp	r3, #16
 808637e:	d003      	beq.n	8086388 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8086380:	2b20      	cmp	r3, #32
 8086382:	d106      	bne.n	8086392 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8086384:	2340      	movs	r3, #64	; 0x40
 8086386:	e000      	b.n	808638a <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8086388:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 808638a:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 808638c:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 808638e:	70a8      	strb	r0, [r5, #2]
 8086390:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8086392:	2000      	movs	r0, #0
 8086394:	bd70      	pop	{r4, r5, r6, pc}

08086396 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8086396:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808639a:	7803      	ldrb	r3, [r0, #0]
 808639c:	4604      	mov	r4, r0
 808639e:	4689      	mov	r9, r1
 80863a0:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 80863a2:	b14b      	cbz	r3, 80863b8 <_ZN7FatFile4readEPvj+0x22>
 80863a4:	7882      	ldrb	r2, [r0, #2]
 80863a6:	07d1      	lsls	r1, r2, #31
 80863a8:	d506      	bpl.n	80863b8 <_ZN7FatFile4readEPvj+0x22>
 80863aa:	e00c      	b.n	80863c6 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80863ac:	465a      	mov	r2, fp
 80863ae:	6921      	ldr	r1, [r4, #16]
 80863b0:	f000 fb35 	bl	8086a1e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 80863b4:	2800      	cmp	r0, #0
 80863b6:	da3d      	bge.n	8086434 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80863b8:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80863ba:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80863be:	f043 0302 	orr.w	r3, r3, #2
 80863c2:	7063      	strb	r3, [r4, #1]
  return -1;
 80863c4:	e098      	b.n	80864f8 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 80863c6:	071a      	lsls	r2, r3, #28
 80863c8:	d503      	bpl.n	80863d2 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 80863ca:	69e3      	ldr	r3, [r4, #28]
 80863cc:	6962      	ldr	r2, [r4, #20]
 80863ce:	1a9b      	subs	r3, r3, r2
 80863d0:	e007      	b.n	80863e2 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 80863d2:	069a      	lsls	r2, r3, #26
 80863d4:	d508      	bpl.n	80863e8 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 80863d6:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 80863d8:	891a      	ldrh	r2, [r3, #8]
 80863da:	6963      	ldr	r3, [r4, #20]
 80863dc:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 80863e0:	b29b      	uxth	r3, r3
 80863e2:	429d      	cmp	r5, r3
 80863e4:	bf28      	it	cs
 80863e6:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80863e8:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 80863ea:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80863ee:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80863f2:	2e00      	cmp	r6, #0
 80863f4:	d035      	beq.n	8086462 <_ZN7FatFile4readEPvj+0xcc>
 80863f6:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80863f8:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 80863fa:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80863fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8086402:	68a0      	ldr	r0, [r4, #8]
 8086404:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8086408:	d002      	beq.n	8086410 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 808640a:	6a03      	ldr	r3, [r0, #32]
 808640c:	4419      	add	r1, r3
 808640e:	e01d      	b.n	808644c <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8086410:	f890 8005 	ldrb.w	r8, [r0, #5]
 8086414:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8086418:	f1ba 0f00 	cmp.w	sl, #0
 808641c:	d110      	bne.n	8086440 <_ZN7FatFile4readEPvj+0xaa>
 808641e:	f1b8 0f00 	cmp.w	r8, #0
 8086422:	d10d      	bne.n	8086440 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8086424:	2b00      	cmp	r3, #0
 8086426:	d1c1      	bne.n	80863ac <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8086428:	0653      	lsls	r3, r2, #25
 808642a:	bf4c      	ite	mi
 808642c:	6a03      	ldrmi	r3, [r0, #32]
 808642e:	6a23      	ldrpl	r3, [r4, #32]
 8086430:	6123      	str	r3, [r4, #16]
 8086432:	e005      	b.n	8086440 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8086434:	d104      	bne.n	8086440 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8086436:	7823      	ldrb	r3, [r4, #0]
 8086438:	f013 0f70 	tst.w	r3, #112	; 0x70
 808643c:	d111      	bne.n	8086462 <_ZN7FatFile4readEPvj+0xcc>
 808643e:	e7bb      	b.n	80863b8 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8086440:	6921      	ldr	r1, [r4, #16]
 8086442:	68a0      	ldr	r0, [r4, #8]
 8086444:	f000 fae5 	bl	8086a12 <_ZNK9FatVolume17clusterStartBlockEm>
 8086448:	eb08 0100 	add.w	r1, r8, r0
 808644c:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 808644e:	f1ba 0f00 	cmp.w	sl, #0
 8086452:	d135      	bne.n	80864c0 <_ZN7FatFile4readEPvj+0x12a>
 8086454:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8086458:	d332      	bcc.n	80864c0 <_ZN7FatFile4readEPvj+0x12a>
 808645a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 808645c:	4291      	cmp	r1, r2
 808645e:	d102      	bne.n	8086466 <_ZN7FatFile4readEPvj+0xd0>
 8086460:	e02e      	b.n	80864c0 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8086462:	1ba8      	subs	r0, r5, r6
 8086464:	e048      	b.n	80864f8 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8086466:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 808646a:	d31b      	bcc.n	80864a4 <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 808646c:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 808646e:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 8086472:	06bf      	lsls	r7, r7, #26
 8086474:	d406      	bmi.n	8086484 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8086476:	7907      	ldrb	r7, [r0, #4]
 8086478:	ebc8 0707 	rsb	r7, r8, r7
 808647c:	b2ff      	uxtb	r7, r7
 808647e:	42bb      	cmp	r3, r7
 8086480:	bf28      	it	cs
 8086482:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8086484:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8086486:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808648a:	d207      	bcs.n	808649c <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 808648c:	68a0      	ldr	r0, [r4, #8]
 808648e:	6802      	ldr	r2, [r0, #0]
 8086490:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8086494:	464a      	mov	r2, r9
 8086496:	47d0      	blx	sl
 8086498:	b960      	cbnz	r0, 80864b4 <_ZN7FatFile4readEPvj+0x11e>
 808649a:	e78d      	b.n	80863b8 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808649c:	441a      	add	r2, r3
 808649e:	4291      	cmp	r1, r2
 80864a0:	d321      	bcc.n	80864e6 <_ZN7FatFile4readEPvj+0x150>
 80864a2:	e7f3      	b.n	808648c <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80864a4:	6803      	ldr	r3, [r0, #0]
 80864a6:	464a      	mov	r2, r9
 80864a8:	681b      	ldr	r3, [r3, #0]
 80864aa:	4798      	blx	r3
 80864ac:	2800      	cmp	r0, #0
 80864ae:	d083      	beq.n	80863b8 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 80864b0:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 80864b4:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 80864b6:	44b9      	add	r9, r7
    m_curPosition += n;
 80864b8:	443b      	add	r3, r7
 80864ba:	6163      	str	r3, [r4, #20]
    toRead -= n;
 80864bc:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80864be:	e798      	b.n	80863f2 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80864c0:	2200      	movs	r2, #0
 80864c2:	3028      	adds	r0, #40	; 0x28
 80864c4:	f000 fa81 	bl	80869ca <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 80864c8:	2800      	cmp	r0, #0
 80864ca:	f43f af75 	beq.w	80863b8 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 80864ce:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 80864d2:	42b7      	cmp	r7, r6
 80864d4:	bf28      	it	cs
 80864d6:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 80864d8:	eb00 010a 	add.w	r1, r0, sl
 80864dc:	463a      	mov	r2, r7
 80864de:	4648      	mov	r0, r9
 80864e0:	f004 fd05 	bl	808aeee <memcpy>
 80864e4:	e7e6      	b.n	80864b4 <_ZN7FatFile4readEPvj+0x11e>
 80864e6:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 80864ea:	f7ff f8c3 	bl	8085674 <_ZN9FatVolume9cacheSyncEv>
 80864ee:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80864f2:	2800      	cmp	r0, #0
 80864f4:	d1ca      	bne.n	808648c <_ZN7FatFile4readEPvj+0xf6>
 80864f6:	e75f      	b.n	80863b8 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 80864f8:	b003      	add	sp, #12
 80864fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080864fe <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 80864fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8086500:	2201      	movs	r2, #1
 8086502:	f10d 0107 	add.w	r1, sp, #7
 8086506:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 8086508:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 808650a:	6905      	ldr	r5, [r0, #16]
 808650c:	f7ff ff43 	bl	8086396 <_ZN7FatFile4readEPvj>
 8086510:	2801      	cmp	r0, #1
 8086512:	bf09      	itett	eq
 8086514:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8086518:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 808651c:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 808651e:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 8086520:	b002      	add	sp, #8
 8086522:	bd70      	pop	{r4, r5, r6, pc}

08086524 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8086524:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8086526:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8086528:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 808652a:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 808652e:	b105      	cbz	r5, 8086532 <_ZN7FatFile12readDirCacheEb+0xe>
 8086530:	b969      	cbnz	r1, 808654e <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 8086532:	2201      	movs	r2, #1
 8086534:	f10d 0107 	add.w	r1, sp, #7
 8086538:	4620      	mov	r0, r4
 808653a:	f7ff ff2c 	bl	8086396 <_ZN7FatFile4readEPvj>
 808653e:	b240      	sxtb	r0, r0
    if  (n != 1) {
 8086540:	2801      	cmp	r0, #1
 8086542:	d001      	beq.n	8086548 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8086544:	2000      	movs	r0, #0
 8086546:	e008      	b.n	808655a <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 8086548:	6963      	ldr	r3, [r4, #20]
 808654a:	331f      	adds	r3, #31
 808654c:	e000      	b.n	8086550 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 808654e:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8086550:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 8086552:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8086554:	3034      	adds	r0, #52	; 0x34
 8086556:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 808655a:	b003      	add	sp, #12
 808655c:	bd30      	pop	{r4, r5, pc}

0808655e <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 808655e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086562:	460e      	mov	r6, r1
 8086564:	7801      	ldrb	r1, [r0, #0]
 8086566:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 8086568:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 808656a:	2900      	cmp	r1, #0
 808656c:	d039      	beq.n	80865e2 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 808656e:	6945      	ldr	r5, [r0, #20]
 8086570:	42b5      	cmp	r5, r6
 8086572:	d03a      	beq.n	80865ea <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8086574:	b90e      	cbnz	r6, 808657a <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8086576:	6106      	str	r6, [r0, #16]
    goto done;
 8086578:	e031      	b.n	80865de <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 808657a:	070b      	lsls	r3, r1, #28
 808657c:	d503      	bpl.n	8086586 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 808657e:	69c3      	ldr	r3, [r0, #28]
 8086580:	429e      	cmp	r6, r3
 8086582:	d82e      	bhi.n	80865e2 <_ZN7FatFile7seekSetEm+0x84>
 8086584:	e007      	b.n	8086596 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8086586:	0688      	lsls	r0, r1, #26
 8086588:	d505      	bpl.n	8086596 <_ZN7FatFile7seekSetEm+0x38>
 808658a:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 808658c:	891b      	ldrh	r3, [r3, #8]
 808658e:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8086592:	d826      	bhi.n	80865e2 <_ZN7FatFile7seekSetEm+0x84>
 8086594:	e023      	b.n	80865de <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8086596:	f8d4 e008 	ldr.w	lr, [r4, #8]
 808659a:	1e6a      	subs	r2, r5, #1
 808659c:	f89e 3006 	ldrb.w	r3, [lr, #6]
 80865a0:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80865a4:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80865a6:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80865a8:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 80865aa:	429a      	cmp	r2, r3
 80865ac:	d800      	bhi.n	80865b0 <_ZN7FatFile7seekSetEm+0x52>
 80865ae:	b94d      	cbnz	r5, 80865c4 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80865b0:	064a      	lsls	r2, r1, #25
 80865b2:	bf4c      	ite	mi
 80865b4:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 80865b8:	6a22      	ldrpl	r2, [r4, #32]
 80865ba:	6122      	str	r2, [r4, #16]
 80865bc:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80865be:	f104 0810 	add.w	r8, r4, #16
 80865c2:	e00a      	b.n	80865da <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 80865c4:	1a9b      	subs	r3, r3, r2
 80865c6:	e7f9      	b.n	80865bc <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80865c8:	4642      	mov	r2, r8
 80865ca:	6921      	ldr	r1, [r4, #16]
 80865cc:	68a0      	ldr	r0, [r4, #8]
 80865ce:	f000 fa26 	bl	8086a1e <_ZN9FatVolume6fatGetEmPm>
 80865d2:	2800      	cmp	r0, #0
 80865d4:	f105 35ff 	add.w	r5, r5, #4294967295
 80865d8:	dd03      	ble.n	80865e2 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 80865da:	2d00      	cmp	r5, #0
 80865dc:	d1f4      	bne.n	80865c8 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 80865de:	6166      	str	r6, [r4, #20]
 80865e0:	e003      	b.n	80865ea <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 80865e2:	6127      	str	r7, [r4, #16]
  return false;
 80865e4:	2000      	movs	r0, #0
 80865e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 80865ea:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 80865ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080865f0 <_ZN7FatFile15openCachedEntryEPS_thh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 80865f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80865f2:	460f      	mov	r7, r1
 80865f4:	4604      	mov	r4, r0
 80865f6:	4616      	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80865f8:	2100      	movs	r1, #0
 80865fa:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 80865fc:	461d      	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80865fe:	f004 fc81 	bl	808af04 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8086602:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8086604:	80a6      	strh	r6, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8086606:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8086608:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 808660a:	f006 020f 	and.w	r2, r6, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 808660e:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8086610:	0152      	lsls	r2, r2, #5
 8086612:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8086616:	4413      	add	r3, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8086618:	7ad9      	ldrb	r1, [r3, #11]
 808661a:	070f      	lsls	r7, r1, #28
 808661c:	d502      	bpl.n	8086624 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 808661e:	2000      	movs	r0, #0
 8086620:	7020      	strb	r0, [r4, #0]
  return false;
 8086622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8086624:	1881      	adds	r1, r0, r2
 8086626:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 808662a:	f001 0117 	and.w	r1, r1, #23
 808662e:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 8086630:	7adb      	ldrb	r3, [r3, #11]
 8086632:	f013 0f18 	tst.w	r3, #24
    m_attr |= FILE_ATTR_FILE;
 8086636:	bf08      	it	eq
 8086638:	f041 0108 	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
 808663c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
 8086640:	bf08      	it	eq
 8086642:	7021      	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8086644:	f015 0f32 	tst.w	r5, #50	; 0x32
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
 8086648:	70e3      	strb	r3, [r4, #3]
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 808664a:	d003      	beq.n	8086654 <_ZN7FatFile15openCachedEntryEPS_thh+0x64>
    if (isSubDir() || isReadOnly()) {
 808664c:	7823      	ldrb	r3, [r4, #0]
 808664e:	f013 0f11 	tst.w	r3, #17
 8086652:	d1e4      	bne.n	808661e <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
 8086654:	f005 030f 	and.w	r3, r5, #15
 8086658:	70a3      	strb	r3, [r4, #2]
 808665a:	6b03      	ldr	r3, [r0, #48]	; 0x30

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 808665c:	4402      	add	r2, r0
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;

  m_dirBlock = m_vol->cacheBlockNumber();
 808665e:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8086660:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 8086664:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e

  if (oflag & O_TRUNC) {
 8086668:	06ee      	lsls	r6, r5, #27

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 808666a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16

  if (oflag & O_TRUNC) {
 808666e:	d504      	bpl.n	808667a <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8086670:	b171      	cbz	r1, 8086690 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 8086672:	f000 fa68 	bl	8086b46 <_ZN9FatVolume9freeChainEm>
 8086676:	b958      	cbnz	r0, 8086690 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 8086678:	e7d1      	b.n	808661e <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 808667a:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 808667c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 808667e:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8086680:	06ab      	lsls	r3, r5, #26
 8086682:	d50a      	bpl.n	808669a <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 8086684:	69e1      	ldr	r1, [r4, #28]
 8086686:	4620      	mov	r0, r4
 8086688:	f7ff ff69 	bl	808655e <_ZN7FatFile7seekSetEm>
 808668c:	b928      	cbnz	r0, 808669a <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 808668e:	e7c6      	b.n	808661e <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 8086690:	78a3      	ldrb	r3, [r4, #2]
 8086692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8086696:	70a3      	strb	r3, [r4, #2]
 8086698:	e7f2      	b.n	8086680 <_ZN7FatFile15openCachedEntryEPS_thh+0x90>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 808669a:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 808669c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080866a0 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80866a0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80866a2:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80866a4:	4604      	mov	r4, r0
  if (!isOpen()) {
 80866a6:	b90b      	cbnz	r3, 80866ac <_ZN7FatFile4syncEv+0xc>
    return true;
 80866a8:	2001      	movs	r0, #1
 80866aa:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 80866ac:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80866b0:	2b00      	cmp	r3, #0
 80866b2:	da23      	bge.n	80866fc <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80866b4:	2101      	movs	r1, #1
 80866b6:	f7ff fe47 	bl	8086348 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80866ba:	4605      	mov	r5, r0
 80866bc:	b928      	cbnz	r0, 80866ca <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80866be:	7863      	ldrb	r3, [r4, #1]
  return false;
 80866c0:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80866c2:	f043 0301 	orr.w	r3, r3, #1
 80866c6:	7063      	strb	r3, [r4, #1]
 80866c8:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80866ca:	7803      	ldrb	r3, [r0, #0]
 80866cc:	2be5      	cmp	r3, #229	; 0xe5
 80866ce:	d0f6      	beq.n	80866be <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 80866d0:	7823      	ldrb	r3, [r4, #0]
 80866d2:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 80866d4:	bf44      	itt	mi
 80866d6:	69e3      	ldrmi	r3, [r4, #28]
 80866d8:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 80866da:	8c23      	ldrh	r3, [r4, #32]
 80866dc:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 80866de:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80866e0:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 80866e2:	4b09      	ldr	r3, [pc, #36]	; (8086708 <_ZN7FatFile4syncEv+0x68>)
 80866e4:	681b      	ldr	r3, [r3, #0]
 80866e6:	b12b      	cbz	r3, 80866f4 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80866e8:	f100 0116 	add.w	r1, r0, #22
 80866ec:	3018      	adds	r0, #24
 80866ee:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80866f0:	8b2b      	ldrh	r3, [r5, #24]
 80866f2:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 80866f4:	78a3      	ldrb	r3, [r4, #2]
 80866f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80866fa:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 80866fc:	68a0      	ldr	r0, [r4, #8]
 80866fe:	f7fe ffb9 	bl	8085674 <_ZN9FatVolume9cacheSyncEv>
 8086702:	2800      	cmp	r0, #0
 8086704:	d0db      	beq.n	80866be <_ZN7FatFile4syncEv+0x1e>
 8086706:	e7cf      	b.n	80866a8 <_ZN7FatFile4syncEv+0x8>
 8086708:	20000b70 	.word	0x20000b70

0808670c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 808670c:	b510      	push	{r4, lr}
 808670e:	4604      	mov	r4, r0
  bool rtn = sync();
 8086710:	f7ff ffc6 	bl	80866a0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8086714:	2300      	movs	r3, #0
 8086716:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8086718:	bd10      	pop	{r4, pc}

0808671a <_ZN7FatFile4openEPS_PKch>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 808671a:	b5f0      	push	{r4, r5, r6, r7, lr}
 808671c:	461f      	mov	r7, r3
 808671e:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8086720:	2300      	movs	r3, #0
 8086722:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8086726:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 808672a:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 808672c:	4606      	mov	r6, r0
 808672e:	460c      	mov	r4, r1
 8086730:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8086732:	b10b      	cbz	r3, 8086738 <_ZN7FatFile4openEPS_PKch+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8086734:	2000      	movs	r0, #0
 8086736:	e03d      	b.n	80867b4 <_ZN7FatFile4openEPS_PKch+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8086738:	780b      	ldrb	r3, [r1, #0]
 808673a:	f013 0f70 	tst.w	r3, #112	; 0x70
 808673e:	d0f9      	beq.n	8086734 <_ZN7FatFile4openEPS_PKch+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8086740:	7813      	ldrb	r3, [r2, #0]
 8086742:	2b2f      	cmp	r3, #47	; 0x2f
 8086744:	d112      	bne.n	808676c <_ZN7FatFile4openEPS_PKch+0x52>
    while (isDirSeparator(*path)) {
 8086746:	9b01      	ldr	r3, [sp, #4]
 8086748:	781a      	ldrb	r2, [r3, #0]
 808674a:	2a2f      	cmp	r2, #47	; 0x2f
 808674c:	d102      	bne.n	8086754 <_ZN7FatFile4openEPS_PKch+0x3a>
      path++;
 808674e:	3301      	adds	r3, #1
 8086750:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 8086752:	e7f8      	b.n	8086746 <_ZN7FatFile4openEPS_PKch+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8086754:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8086756:	b91a      	cbnz	r2, 8086760 <_ZN7FatFile4openEPS_PKch+0x46>
      return openRoot(dirFile->m_vol);
 8086758:	4630      	mov	r0, r6
 808675a:	f7ff fe04 	bl	8086366 <_ZN7FatFile8openRootEP9FatVolume>
 808675e:	e029      	b.n	80867b4 <_ZN7FatFile4openEPS_PKch+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8086760:	a809      	add	r0, sp, #36	; 0x24
 8086762:	f7ff fe00 	bl	8086366 <_ZN7FatFile8openRootEP9FatVolume>
 8086766:	2800      	cmp	r0, #0
 8086768:	d0e4      	beq.n	8086734 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 808676a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 808676c:	aa01      	add	r2, sp, #4
 808676e:	a903      	add	r1, sp, #12
 8086770:	9801      	ldr	r0, [sp, #4]
 8086772:	f7fe ff9b 	bl	80856ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8086776:	2800      	cmp	r0, #0
 8086778:	d0dc      	beq.n	8086734 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 808677a:	9b01      	ldr	r3, [sp, #4]
 808677c:	781b      	ldrb	r3, [r3, #0]
 808677e:	b19b      	cbz	r3, 80867a8 <_ZN7FatFile4openEPS_PKch+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
 8086780:	2301      	movs	r3, #1
 8086782:	aa03      	add	r2, sp, #12
 8086784:	4621      	mov	r1, r4
 8086786:	4630      	mov	r0, r6
 8086788:	f7ff f8d2 	bl	8085930 <_ZN7FatFile4openEPS_P7fname_th>
 808678c:	2800      	cmp	r0, #0
 808678e:	d0d1      	beq.n	8086734 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8086790:	4635      	mov	r5, r6
 8086792:	ac09      	add	r4, sp, #36	; 0x24
 8086794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8086796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8086798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808679a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808679c:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 808679e:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80867a0:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 80867a2:	f7ff ffb3 	bl	808670c <_ZN7FatFile5closeEv>
 80867a6:	e7e0      	b.n	808676a <_ZN7FatFile4openEPS_PKch+0x50>
  }
  return open(dirFile, &fname, oflag);
 80867a8:	463b      	mov	r3, r7
 80867aa:	aa03      	add	r2, sp, #12
 80867ac:	4621      	mov	r1, r4
 80867ae:	4630      	mov	r0, r6
 80867b0:	f7ff f8be 	bl	8085930 <_ZN7FatFile4openEPS_P7fname_th>

fail:
  return false;
}
 80867b4:	b013      	add	sp, #76	; 0x4c
 80867b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080867b8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80867b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80867bc:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80867be:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80867c0:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80867c2:	4689      	mov	r9, r1
 80867c4:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80867c6:	d508      	bpl.n	80867da <_ZN7FatFile5writeEPKvj+0x22>
 80867c8:	7883      	ldrb	r3, [r0, #2]
 80867ca:	0799      	lsls	r1, r3, #30
 80867cc:	d505      	bpl.n	80867da <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 80867ce:	075b      	lsls	r3, r3, #29
 80867d0:	d50b      	bpl.n	80867ea <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 80867d2:	69e1      	ldr	r1, [r4, #28]
 80867d4:	f7ff fec3 	bl	808655e <_ZN7FatFile7seekSetEm>
 80867d8:	b938      	cbnz	r0, 80867ea <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80867da:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80867dc:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80867e0:	f043 0301 	orr.w	r3, r3, #1
 80867e4:	7063      	strb	r3, [r4, #1]
  return -1;
 80867e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 80867ea:	6963      	ldr	r3, [r4, #20]
 80867ec:	43db      	mvns	r3, r3
 80867ee:	4598      	cmp	r8, r3
 80867f0:	d8f3      	bhi.n	80867da <_ZN7FatFile5writeEPKvj+0x22>
 80867f2:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80867f4:	f04f 0a00 	mov.w	sl, #0
 80867f8:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80867fa:	2f00      	cmp	r7, #0
 80867fc:	f000 8082 	beq.w	8086904 <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8086800:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8086802:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8086806:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8086808:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 808680c:	d11c      	bne.n	8086848 <_ZN7FatFile5writeEPKvj+0x90>
 808680e:	b9de      	cbnz	r6, 8086848 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 8086810:	6921      	ldr	r1, [r4, #16]
 8086812:	b171      	cbz	r1, 8086832 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8086814:	f104 0210 	add.w	r2, r4, #16
 8086818:	f000 f901 	bl	8086a1e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 808681c:	2800      	cmp	r0, #0
 808681e:	dbdc      	blt.n	80867da <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8086820:	f040 808e 	bne.w	8086940 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 8086824:	4620      	mov	r0, r4
 8086826:	f7ff fd45 	bl	80862b4 <_ZN7FatFile10addClusterEv>
 808682a:	2800      	cmp	r0, #0
 808682c:	f040 8088 	bne.w	8086940 <_ZN7FatFile5writeEPKvj+0x188>
 8086830:	e7d3      	b.n	80867da <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 8086832:	6a23      	ldr	r3, [r4, #32]
 8086834:	b93b      	cbnz	r3, 8086846 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 8086836:	4620      	mov	r0, r4
 8086838:	f7ff fd3c 	bl	80862b4 <_ZN7FatFile10addClusterEv>
 808683c:	2800      	cmp	r0, #0
 808683e:	d0cc      	beq.n	80867da <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 8086840:	6923      	ldr	r3, [r4, #16]
 8086842:	6223      	str	r3, [r4, #32]
 8086844:	e000      	b.n	8086848 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 8086846:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8086848:	6921      	ldr	r1, [r4, #16]
 808684a:	68a0      	ldr	r0, [r4, #8]
 808684c:	f000 f8e1 	bl	8086a12 <_ZNK9FatVolume17clusterStartBlockEm>
 8086850:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8086852:	b916      	cbnz	r6, 808685a <_ZN7FatFile5writeEPKvj+0xa2>
 8086854:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8086858:	d221      	bcs.n	808689e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 808685a:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 808685e:	42bd      	cmp	r5, r7
 8086860:	bf28      	it	cs
 8086862:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8086864:	b936      	cbnz	r6, 8086874 <_ZN7FatFile5writeEPKvj+0xbc>
 8086866:	6963      	ldr	r3, [r4, #20]
 8086868:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 808686a:	4293      	cmp	r3, r2
 808686c:	bf34      	ite	cc
 808686e:	2201      	movcc	r2, #1
 8086870:	2205      	movcs	r2, #5
 8086872:	e000      	b.n	8086876 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8086874:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8086876:	68a0      	ldr	r0, [r4, #8]
 8086878:	3028      	adds	r0, #40	; 0x28
 808687a:	f000 f8a6 	bl	80869ca <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 808687e:	2800      	cmp	r0, #0
 8086880:	d0ab      	beq.n	80867da <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8086882:	4430      	add	r0, r6
 8086884:	462a      	mov	r2, r5
 8086886:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8086888:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 808688a:	f004 fb30 	bl	808aeee <memcpy>
      if (512 == (n + blockOffset)) {
 808688e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8086892:	d131      	bne.n	80868f8 <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8086894:	68a0      	ldr	r0, [r4, #8]
 8086896:	3028      	adds	r0, #40	; 0x28
 8086898:	f000 f870 	bl	808697c <_ZN8FatCache4syncEv>
 808689c:	e018      	b.n	80868d0 <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 808689e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80868a2:	68a2      	ldr	r2, [r4, #8]
 80868a4:	d316      	bcc.n	80868d4 <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80868a6:	7913      	ldrb	r3, [r2, #4]
 80868a8:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80868aa:	1b5d      	subs	r5, r3, r5
 80868ac:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 80868ae:	f3c7 2347 	ubfx	r3, r7, #9, #8
 80868b2:	42ab      	cmp	r3, r5
 80868b4:	bf28      	it	cs
 80868b6:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80868b8:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 80868ba:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80868be:	d302      	bcc.n	80868c6 <_ZN7FatFile5writeEPKvj+0x10e>
 80868c0:	4418      	add	r0, r3
 80868c2:	4281      	cmp	r1, r0
 80868c4:	d336      	bcc.n	8086934 <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 80868c6:	68a0      	ldr	r0, [r4, #8]
 80868c8:	6802      	ldr	r2, [r0, #0]
 80868ca:	68d6      	ldr	r6, [r2, #12]
 80868cc:	464a      	mov	r2, r9
 80868ce:	47b0      	blx	r6
 80868d0:	b990      	cbnz	r0, 80868f8 <_ZN7FatFile5writeEPKvj+0x140>
 80868d2:	e782      	b.n	80867da <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 80868d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80868d6:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80868d8:	bf02      	ittt	eq
 80868da:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80868de:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80868e2:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 80868e4:	68a0      	ldr	r0, [r4, #8]
 80868e6:	464a      	mov	r2, r9
 80868e8:	6803      	ldr	r3, [r0, #0]
 80868ea:	685b      	ldr	r3, [r3, #4]
 80868ec:	4798      	blx	r3
 80868ee:	2800      	cmp	r0, #0
 80868f0:	f43f af73 	beq.w	80867da <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 80868f4:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80868f8:	6963      	ldr	r3, [r4, #20]
    src += n;
 80868fa:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80868fc:	442b      	add	r3, r5
 80868fe:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8086900:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8086902:	e779      	b.n	80867f8 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8086904:	69e2      	ldr	r2, [r4, #28]
 8086906:	4293      	cmp	r3, r2
 8086908:	78a2      	ldrb	r2, [r4, #2]
 808690a:	d901      	bls.n	8086910 <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 808690c:	61e3      	str	r3, [r4, #28]
 808690e:	e002      	b.n	8086916 <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8086910:	4b0e      	ldr	r3, [pc, #56]	; (808694c <_ZN7FatFile5writeEPKvj+0x194>)
 8086912:	681b      	ldr	r3, [r3, #0]
 8086914:	b113      	cbz	r3, 808691c <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 8086916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 808691a:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 808691c:	78a3      	ldrb	r3, [r4, #2]
 808691e:	071a      	lsls	r2, r3, #28
 8086920:	d402      	bmi.n	8086928 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 8086922:	4640      	mov	r0, r8
 8086924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 8086928:	4620      	mov	r0, r4
 808692a:	f7ff feb9 	bl	80866a0 <_ZN7FatFile4syncEv>
 808692e:	2800      	cmp	r0, #0
 8086930:	d1f7      	bne.n	8086922 <_ZN7FatFile5writeEPKvj+0x16a>
 8086932:	e752      	b.n	80867da <_ZN7FatFile5writeEPKvj+0x22>
 8086934:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8086938:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 808693c:	6310      	str	r0, [r2, #48]	; 0x30
 808693e:	e7c2      	b.n	80868c6 <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8086940:	6921      	ldr	r1, [r4, #16]
 8086942:	68a0      	ldr	r0, [r4, #8]
 8086944:	f000 f865 	bl	8086a12 <_ZNK9FatVolume17clusterStartBlockEm>
 8086948:	4601      	mov	r1, r0
 808694a:	e783      	b.n	8086854 <_ZN7FatFile5writeEPKvj+0x9c>
 808694c:	20000b70 	.word	0x20000b70

08086950 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8086950:	f000 bd6c 	b.w	808742c <HAL_Pin_Map>

08086954 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8086954:	b570      	push	{r4, r5, r6, lr}
 8086956:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8086958:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808695a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 808695c:	b149      	cbz	r1, 8086972 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808695e:	f005 f835 	bl	808b9cc <strlen>
 8086962:	682b      	ldr	r3, [r5, #0]
 8086964:	4602      	mov	r2, r0
 8086966:	4621      	mov	r1, r4
 8086968:	4628      	mov	r0, r5
    }
 808696a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808696e:	68db      	ldr	r3, [r3, #12]
 8086970:	4718      	bx	r3
    }
 8086972:	bd70      	pop	{r4, r5, r6, pc}

08086974 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8086974:	f000 bd5a 	b.w	808742c <HAL_Pin_Map>

08086978 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8086978:	f000 bd58 	b.w	808742c <HAL_Pin_Map>

0808697c <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 808697c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 808697e:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8086980:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8086982:	07da      	lsls	r2, r3, #31
 8086984:	d51e      	bpl.n	80869c4 <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8086986:	6840      	ldr	r0, [r0, #4]
 8086988:	f104 060c 	add.w	r6, r4, #12
 808698c:	6803      	ldr	r3, [r0, #0]
 808698e:	4632      	mov	r2, r6
 8086990:	685b      	ldr	r3, [r3, #4]
 8086992:	68a1      	ldr	r1, [r4, #8]
 8086994:	4798      	blx	r3
 8086996:	4605      	mov	r5, r0
 8086998:	b908      	cbnz	r0, 808699e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 808699a:	2500      	movs	r5, #0
 808699c:	e013      	b.n	80869c6 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 808699e:	7823      	ldrb	r3, [r4, #0]
 80869a0:	079b      	lsls	r3, r3, #30
 80869a2:	d404      	bmi.n	80869ae <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 80869a4:	7823      	ldrb	r3, [r4, #0]
 80869a6:	f023 0301 	bic.w	r3, r3, #1
 80869aa:	7023      	strb	r3, [r4, #0]
 80869ac:	e00b      	b.n	80869c6 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 80869ae:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 80869b0:	68a7      	ldr	r7, [r4, #8]
 80869b2:	6901      	ldr	r1, [r0, #16]
 80869b4:	6803      	ldr	r3, [r0, #0]
 80869b6:	4632      	mov	r2, r6
 80869b8:	685b      	ldr	r3, [r3, #4]
 80869ba:	4439      	add	r1, r7
 80869bc:	4798      	blx	r3
 80869be:	2800      	cmp	r0, #0
 80869c0:	d1f0      	bne.n	80869a4 <_ZN8FatCache4syncEv+0x28>
 80869c2:	e7ea      	b.n	808699a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 80869c4:	2501      	movs	r5, #1

fail:
  return false;
}
 80869c6:	4628      	mov	r0, r5
 80869c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080869ca <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80869ca:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 80869cc:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80869ce:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 80869d0:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80869d2:	460e      	mov	r6, r1
 80869d4:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80869d6:	d014      	beq.n	8086a02 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 80869d8:	f7ff ffd0 	bl	808697c <_ZN8FatCache4syncEv>
 80869dc:	b908      	cbnz	r0, 80869e2 <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 80869de:	2000      	movs	r0, #0
 80869e0:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 80869e2:	076b      	lsls	r3, r5, #29
 80869e4:	d503      	bpl.n	80869ee <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 80869e6:	2300      	movs	r3, #0
 80869e8:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 80869ea:	60a6      	str	r6, [r4, #8]
 80869ec:	e009      	b.n	8086a02 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80869ee:	6860      	ldr	r0, [r4, #4]
 80869f0:	f104 020c 	add.w	r2, r4, #12
 80869f4:	6803      	ldr	r3, [r0, #0]
 80869f6:	4631      	mov	r1, r6
 80869f8:	681b      	ldr	r3, [r3, #0]
 80869fa:	4798      	blx	r3
 80869fc:	2800      	cmp	r0, #0
 80869fe:	d1f2      	bne.n	80869e6 <_ZN8FatCache4readEmh+0x1c>
 8086a00:	e7ed      	b.n	80869de <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8086a02:	4620      	mov	r0, r4
 8086a04:	7823      	ldrb	r3, [r4, #0]
 8086a06:	f005 0503 	and.w	r5, r5, #3
 8086a0a:	431d      	orrs	r5, r3
 8086a0c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 8086a10:	bd70      	pop	{r4, r5, r6, pc}

08086a12 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8086a12:	7983      	ldrb	r3, [r0, #6]
 8086a14:	3902      	subs	r1, #2
 8086a16:	6940      	ldr	r0, [r0, #20]
 8086a18:	4099      	lsls	r1, r3
}
 8086a1a:	4408      	add	r0, r1
 8086a1c:	4770      	bx	lr

08086a1e <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8086a1e:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8086a20:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8086a22:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8086a24:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8086a26:	460c      	mov	r4, r1
 8086a28:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8086a2a:	d112      	bne.n	8086a52 <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8086a2c:	6981      	ldr	r1, [r0, #24]
 8086a2e:	2202      	movs	r2, #2
 8086a30:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8086a34:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8086a38:	f7ff ffc7 	bl	80869ca <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8086a3c:	b910      	cbnz	r0, 8086a44 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8086a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8086a42:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8086a44:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8086a48:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8086a4c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8086a50:	e00f      	b.n	8086a72 <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 8086a52:	2b10      	cmp	r3, #16
 8086a54:	d1f3      	bne.n	8086a3e <_ZN9FatVolume6fatGetEmPm+0x20>
 8086a56:	6983      	ldr	r3, [r0, #24]
 8086a58:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8086a5c:	2202      	movs	r2, #2
 8086a5e:	4419      	add	r1, r3
 8086a60:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8086a64:	f7ff ffb1 	bl	80869ca <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8086a68:	2800      	cmp	r0, #0
 8086a6a:	d0e8      	beq.n	8086a3e <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8086a6c:	b2e4      	uxtb	r4, r4
 8086a6e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 8086a72:	69ea      	ldr	r2, [r5, #28]
 8086a74:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8086a76:	bf9a      	itte	ls
 8086a78:	6033      	strls	r3, [r6, #0]
  return 1;
 8086a7a:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8086a7c:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8086a7e:	bd70      	pop	{r4, r5, r6, pc}

08086a80 <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8086a80:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8086a82:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8086a84:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8086a86:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8086a88:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8086a8a:	d10f      	bne.n	8086aac <_ZN9FatVolume6fatPutEmm+0x2c>
 8086a8c:	6981      	ldr	r1, [r0, #24]
 8086a8e:	2203      	movs	r2, #3
 8086a90:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8086a94:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8086a98:	f7ff ff97 	bl	80869ca <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8086a9c:	b908      	cbnz	r0, 8086aa2 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8086a9e:	2000      	movs	r0, #0
 8086aa0:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8086aa2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8086aa6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8086aaa:	e00f      	b.n	8086acc <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 8086aac:	2b10      	cmp	r3, #16
 8086aae:	d1f6      	bne.n	8086a9e <_ZN9FatVolume6fatPutEmm+0x1e>
 8086ab0:	6983      	ldr	r3, [r0, #24]
 8086ab2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8086ab6:	2203      	movs	r2, #3
 8086ab8:	4419      	add	r1, r3
 8086aba:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8086abe:	f7ff ff84 	bl	80869ca <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8086ac2:	2800      	cmp	r0, #0
 8086ac4:	d0eb      	beq.n	8086a9e <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8086ac6:	b2e4      	uxtb	r4, r4
 8086ac8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8086acc:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8086ace:	bd38      	pop	{r3, r4, r5, pc}

08086ad0 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8086ad0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8086ad4:	4605      	mov	r5, r0
 8086ad6:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8086ad8:	460f      	mov	r7, r1
 8086ada:	b909      	cbnz	r1, 8086ae0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
 8086adc:	68c6      	ldr	r6, [r0, #12]
 8086ade:	e000      	b.n	8086ae2 <_ZN9FatVolume15allocateClusterEmPm+0x12>
 8086ae0:	460e      	mov	r6, r1
 8086ae2:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 8086ae4:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 8086ae6:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 8086ae8:	429c      	cmp	r4, r3
 8086aea:	bf88      	it	hi
 8086aec:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8086aee:	aa01      	add	r2, sp, #4
 8086af0:	4621      	mov	r1, r4
 8086af2:	4628      	mov	r0, r5
 8086af4:	f7ff ff93 	bl	8086a1e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8086af8:	2800      	cmp	r0, #0
 8086afa:	db0d      	blt.n	8086b18 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8086afc:	d001      	beq.n	8086b02 <_ZN9FatVolume15allocateClusterEmPm+0x32>
 8086afe:	9b01      	ldr	r3, [sp, #4]
 8086b00:	b113      	cbz	r3, 8086b08 <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 8086b02:	42b4      	cmp	r4, r6
 8086b04:	d1ee      	bne.n	8086ae4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8086b06:	e007      	b.n	8086b18 <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8086b08:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8086b0c:	4621      	mov	r1, r4
 8086b0e:	4628      	mov	r0, r5
 8086b10:	f7ff ffb6 	bl	8086a80 <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 8086b14:	4606      	mov	r6, r0
 8086b16:	b908      	cbnz	r0, 8086b1c <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8086b18:	2600      	movs	r6, #0
 8086b1a:	e010      	b.n	8086b3e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8086b1c:	b137      	cbz	r7, 8086b2c <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 8086b1e:	4622      	mov	r2, r4
 8086b20:	4639      	mov	r1, r7
 8086b22:	4628      	mov	r0, r5
 8086b24:	f7ff ffac 	bl	8086a80 <_ZN9FatVolume6fatPutEmm>
 8086b28:	b908      	cbnz	r0, 8086b2e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 8086b2a:	e7f5      	b.n	8086b18 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 8086b2c:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8086b2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8086b30:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8086b32:	bfa4      	itt	ge
 8086b34:	f103 33ff 	addge.w	r3, r3, #4294967295
 8086b38:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 8086b3a:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 8086b3e:	4630      	mov	r0, r6
 8086b40:	b002      	add	sp, #8
 8086b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086b46 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8086b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086b48:	4604      	mov	r4, r0
 8086b4a:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8086b4c:	aa01      	add	r2, sp, #4
 8086b4e:	4629      	mov	r1, r5
 8086b50:	4620      	mov	r0, r4
 8086b52:	f7ff ff64 	bl	8086a1e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8086b56:	1e06      	subs	r6, r0, #0
 8086b58:	da01      	bge.n	8086b5e <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8086b5a:	2000      	movs	r0, #0
 8086b5c:	e012      	b.n	8086b84 <_ZN9FatVolume9freeChainEm+0x3e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8086b5e:	2200      	movs	r2, #0
 8086b60:	4629      	mov	r1, r5
 8086b62:	4620      	mov	r0, r4
 8086b64:	f7ff ff8c 	bl	8086a80 <_ZN9FatVolume6fatPutEmm>
 8086b68:	2800      	cmp	r0, #0
 8086b6a:	d0f6      	beq.n	8086b5a <_ZN9FatVolume9freeChainEm+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8086b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8086b6e:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8086b70:	bfa4      	itt	ge
 8086b72:	3301      	addge	r3, #1
 8086b74:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8086b76:	68e3      	ldr	r3, [r4, #12]
 8086b78:	429d      	cmp	r5, r3
      m_allocSearchStart = cluster;
 8086b7a:	bf38      	it	cc
 8086b7c:	60e5      	strcc	r5, [r4, #12]
    }
    cluster = next;
 8086b7e:	9d01      	ldr	r5, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 8086b80:	2e00      	cmp	r6, #0
 8086b82:	d1e3      	bne.n	8086b4c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8086b84:	b002      	add	sp, #8
 8086b86:	bd70      	pop	{r4, r5, r6, pc}

08086b88 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8086b88:	b570      	push	{r4, r5, r6, lr}
 8086b8a:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8086b8c:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8086b8e:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8086b90:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8086b92:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8086b96:	71c2      	strb	r2, [r0, #7]
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8086b98:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8086b9a:	62e0      	str	r0, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8086b9c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8086ba0:	6303      	str	r3, [r0, #48]	; 0x30
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8086ba2:	f8c4 0238 	str.w	r0, [r4, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8086ba6:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8086baa:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 8086bae:	b1a1      	cbz	r1, 8086bda <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 8086bb0:	2904      	cmp	r1, #4
 8086bb2:	d860      	bhi.n	8086c76 <_ZN9FatVolume4initEh+0xee>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8086bb4:	4611      	mov	r1, r2
 8086bb6:	3028      	adds	r0, #40	; 0x28
 8086bb8:	f7ff ff07 	bl	80869ca <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8086bbc:	2800      	cmp	r0, #0
 8086bbe:	d05a      	beq.n	8086c76 <_ZN9FatVolume4initEh+0xee>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8086bc0:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8086bc4:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8086bc8:	065b      	lsls	r3, r3, #25
 8086bca:	d154      	bne.n	8086c76 <_ZN9FatVolume4initEh+0xee>
 8086bcc:	351b      	adds	r5, #27
 8086bce:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8086bd2:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8086bd6:	2d00      	cmp	r5, #0
 8086bd8:	d04d      	beq.n	8086c76 <_ZN9FatVolume4initEh+0xee>
 8086bda:	2200      	movs	r2, #0
 8086bdc:	4629      	mov	r1, r5
 8086bde:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8086be2:	f7ff fef2 	bl	80869ca <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 8086be6:	2800      	cmp	r0, #0
 8086be8:	d045      	beq.n	8086c76 <_ZN9FatVolume4initEh+0xee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8086bea:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8086bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8086bf2:	d140      	bne.n	8086c76 <_ZN9FatVolume4initEh+0xee>
 8086bf4:	7c03      	ldrb	r3, [r0, #16]
 8086bf6:	2b02      	cmp	r3, #2
 8086bf8:	d13d      	bne.n	8086c76 <_ZN9FatVolume4initEh+0xee>
      fbs->fatCount != 2 ||
 8086bfa:	89c3      	ldrh	r3, [r0, #14]
 8086bfc:	2b00      	cmp	r3, #0
 8086bfe:	d03a      	beq.n	8086c76 <_ZN9FatVolume4initEh+0xee>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8086c00:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8086c02:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8086c04:	1e4b      	subs	r3, r1, #1
 8086c06:	7163      	strb	r3, [r4, #5]

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8086c08:	2300      	movs	r3, #0
 8086c0a:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8086c0c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8086c0e:	2301      	movs	r3, #1
 8086c10:	428b      	cmp	r3, r1
 8086c12:	d007      	beq.n	8086c24 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 8086c14:	3e01      	subs	r6, #1
 8086c16:	d02e      	beq.n	8086c76 <_ZN9FatVolume4initEh+0xee>
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8086c18:	79a2      	ldrb	r2, [r4, #6]
 8086c1a:	005b      	lsls	r3, r3, #1
 8086c1c:	3201      	adds	r2, #1
 8086c1e:	b2db      	uxtb	r3, r3
 8086c20:	71a2      	strb	r2, [r4, #6]
 8086c22:	e7f5      	b.n	8086c10 <_ZN9FatVolume4initEh+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8086c24:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 8086c26:	b902      	cbnz	r2, 8086c2a <_ZN9FatVolume4initEh+0xa2>
 8086c28:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8086c2a:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8086c2c:	89c6      	ldrh	r6, [r0, #14]
 8086c2e:	442e      	add	r6, r5
 8086c30:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8086c32:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8086c36:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8086c3a:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8086c3c:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8086c3e:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8086c42:	0152      	lsls	r2, r2, #5
 8086c44:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8086c48:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8086c4c:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8086c4e:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8086c52:	b903      	cbnz	r3, 8086c56 <_ZN9FatVolume4initEh+0xce>
 8086c54:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8086c56:	1aad      	subs	r5, r5, r2
 8086c58:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8086c5a:	79a5      	ldrb	r5, [r4, #6]
 8086c5c:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 8086c60:	1c6b      	adds	r3, r5, #1
 8086c62:	61e3      	str	r3, [r4, #28]
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
 8086c64:	f04f 33ff 	mov.w	r3, #4294967295
 8086c68:	6263      	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);

  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8086c6a:	f640 73f4 	movw	r3, #4084	; 0xff4
 8086c6e:	429d      	cmp	r5, r3
 8086c70:	d803      	bhi.n	8086c7a <_ZN9FatVolume4initEh+0xf2>
    m_fatType = 12;
 8086c72:	230c      	movs	r3, #12
 8086c74:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8086c76:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8086c78:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8086c7a:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8086c7e:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8086c80:	bf89      	itett	hi
 8086c82:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8086c84:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8086c86:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8086c88:	2320      	movhi	r3, #32
 8086c8a:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8086c8c:	2001      	movs	r0, #1

fail:
  return false;
}
 8086c8e:	bd70      	pop	{r4, r5, r6, pc}

08086c90 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8086c90:	f000 bbcc 	b.w	808742c <HAL_Pin_Map>

08086c94 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 8086c94:	f000 bbca 	b.w	808742c <HAL_Pin_Map>

08086c98 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
 8086c98:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 8086c9a:	4907      	ldr	r1, [pc, #28]	; (8086cb8 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8086c9c:	22ff      	movs	r2, #255	; 0xff
 8086c9e:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 8086ca0:	4906      	ldr	r1, [pc, #24]	; (8086cbc <_ZN15Adafruit_BME680C1Ea+0x24>)
 8086ca2:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8086ca4:	4906      	ldr	r1, [pc, #24]	; (8086cc0 <_ZN15Adafruit_BME680C1Ea+0x28>)
 8086ca6:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8086ca8:	2200      	movs	r2, #0
 8086caa:	7502      	strb	r2, [r0, #20]
 8086cac:	74c2      	strb	r2, [r0, #19]
 8086cae:	7482      	strb	r2, [r0, #18]
 8086cb0:	7442      	strb	r2, [r0, #17]
 8086cb2:	7402      	strb	r2, [r0, #16]
}
 8086cb4:	4770      	bx	lr
 8086cb6:	bf00      	nop
 8086cb8:	20000b7a 	.word	0x20000b7a
 8086cbc:	20000b78 	.word	0x20000b78
 8086cc0:	20000b79 	.word	0x20000b79

08086cc4 <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 8086cc4:	b530      	push	{r4, r5, lr}
 8086cc6:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8086cc8:	2301      	movs	r3, #1
 8086cca:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 8086cce:	7ca3      	ldrb	r3, [r4, #18]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 8086cd0:	b087      	sub	sp, #28
  uint8_t set_required_settings = 0;
 8086cd2:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 8086cd4:	b10b      	cbz	r3, 8086cda <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 8086cd6:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8086cda:	7ce3      	ldrb	r3, [r4, #19]
 8086cdc:	b10b      	cbz	r3, 8086ce2 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 8086cde:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8086ce2:	7c23      	ldrb	r3, [r4, #16]
 8086ce4:	b10b      	cbz	r3, 8086cea <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 8086ce6:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8086cea:	7d23      	ldrb	r3, [r4, #20]
 8086cec:	b10b      	cbz	r3, 8086cf2 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8086cee:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8086cf2:	f104 0520 	add.w	r5, r4, #32
 8086cf6:	4629      	mov	r1, r5
 8086cf8:	f7f9 fadc 	bl	80802b4 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8086cfc:	b108      	cbz	r0, 8086d02 <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
 8086cfe:	2500      	movs	r5, #0
 8086d00:	e04b      	b.n	8086d9a <_ZN15Adafruit_BME68014performReadingEv+0xd6>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8086d02:	4628      	mov	r0, r5
 8086d04:	f7f9 fa97 	bl	8080236 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8086d08:	2800      	cmp	r0, #0
 8086d0a:	d1f8      	bne.n	8086cfe <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8086d0c:	4629      	mov	r1, r5
 8086d0e:	f10d 0002 	add.w	r0, sp, #2
 8086d12:	f7f9 fc4b 	bl	80805ac <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
 8086d16:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8086d1a:	0040      	lsls	r0, r0, #1
 8086d1c:	f001 feb8 	bl	8088a90 <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8086d20:	4629      	mov	r1, r5
 8086d22:	a801      	add	r0, sp, #4
 8086d24:	f7f9 fc76 	bl	8080614 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8086d28:	2800      	cmp	r0, #0
 8086d2a:	d1e8      	bne.n	8086cfe <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
 8086d2c:	7c63      	ldrb	r3, [r4, #17]
 8086d2e:	b15b      	cbz	r3, 8086d48 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 8086d30:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8086d34:	f002 fed2 	bl	8089adc <__aeabi_i2d>
 8086d38:	2200      	movs	r2, #0
 8086d3a:	4b19      	ldr	r3, [pc, #100]	; (8086da0 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8086d3c:	f003 f85e 	bl	8089dfc <__aeabi_ddiv>
 8086d40:	f003 fa2a 	bl	808a198 <__aeabi_d2f>
 8086d44:	6020      	str	r0, [r4, #0]
 8086d46:	e001      	b.n	8086d4c <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
 8086d48:	4b16      	ldr	r3, [pc, #88]	; (8086da4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8086d4a:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
 8086d4c:	7ca3      	ldrb	r3, [r4, #18]
 8086d4e:	b153      	cbz	r3, 8086d66 <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 8086d50:	9804      	ldr	r0, [sp, #16]
 8086d52:	f002 feb3 	bl	8089abc <__aeabi_ui2d>
 8086d56:	2200      	movs	r2, #0
 8086d58:	4b13      	ldr	r3, [pc, #76]	; (8086da8 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
 8086d5a:	f003 f84f 	bl	8089dfc <__aeabi_ddiv>
 8086d5e:	f003 fa1b 	bl	808a198 <__aeabi_d2f>
 8086d62:	60a0      	str	r0, [r4, #8]
 8086d64:	e001      	b.n	8086d6a <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
 8086d66:	4b0f      	ldr	r3, [pc, #60]	; (8086da4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8086d68:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
 8086d6a:	7ce3      	ldrb	r3, [r4, #19]
 8086d6c:	b123      	cbz	r3, 8086d78 <_ZN15Adafruit_BME68014performReadingEv+0xb4>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
 8086d6e:	9803      	ldr	r0, [sp, #12]
 8086d70:	f003 fb18 	bl	808a3a4 <__aeabi_ui2f>
 8086d74:	6060      	str	r0, [r4, #4]
 8086d76:	e001      	b.n	8086d7c <_ZN15Adafruit_BME68014performReadingEv+0xb8>
  } else {
    pressure = NAN;
 8086d78:	4b0a      	ldr	r3, [pc, #40]	; (8086da4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8086d7a:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 8086d7c:	7d25      	ldrb	r5, [r4, #20]
 8086d7e:	b15d      	cbz	r5, 8086d98 <_ZN15Adafruit_BME68014performReadingEv+0xd4>
    if (data.status & BME680_HEAT_STAB_MSK) {
 8086d80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8086d84:	06db      	lsls	r3, r3, #27
 8086d86:	d504      	bpl.n	8086d92 <_ZN15Adafruit_BME68014performReadingEv+0xce>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 8086d88:	9805      	ldr	r0, [sp, #20]
 8086d8a:	f003 fb0b 	bl	808a3a4 <__aeabi_ui2f>
 8086d8e:	60e0      	str	r0, [r4, #12]
 8086d90:	e003      	b.n	8086d9a <_ZN15Adafruit_BME68014performReadingEv+0xd6>
    } else {
      gas_resistance = 0;
 8086d92:	2300      	movs	r3, #0
 8086d94:	60e3      	str	r3, [r4, #12]
 8086d96:	e000      	b.n	8086d9a <_ZN15Adafruit_BME68014performReadingEv+0xd6>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
 8086d98:	2501      	movs	r5, #1
}
 8086d9a:	4628      	mov	r0, r5
 8086d9c:	b007      	add	sp, #28
 8086d9e:	bd30      	pop	{r4, r5, pc}
 8086da0:	40590000 	.word	0x40590000
 8086da4:	7fc00000 	.word	0x7fc00000
 8086da8:	408f4000 	.word	0x408f4000

08086dac <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 8086dac:	f000 bb3e 	b.w	808742c <HAL_Pin_Map>

08086db0 <_ZN7HIH61XX5startEv>:

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8086db0:	7983      	ldrb	r3, [r0, #6]
 8086db2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8086db6:	f023 030f 	bic.w	r3, r3, #15
 8086dba:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
    return setError(0);
}
 8086dbc:	2000      	movs	r0, #0
 8086dbe:	4770      	bx	lr

08086dc0 <_ZN7HIH61XX4stopEv>:
 8086dc0:	7983      	ldrb	r3, [r0, #6]
 8086dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8086dc6:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
    return setError(0);
}
 8086dc8:	2000      	movs	r0, #0
 8086dca:	4770      	bx	lr

08086dcc <_ZN7HIH61XXC1Eh>:
#include "HIH61XX.h"

HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 8086dcc:	4a03      	ldr	r2, [pc, #12]	; (8086ddc <_ZN7HIH61XXC1Eh+0x10>)
 8086dce:	7101      	strb	r1, [r0, #4]
 8086dd0:	6002      	str	r2, [r0, #0]
 8086dd2:	2200      	movs	r2, #0
 8086dd4:	7182      	strb	r2, [r0, #6]
 8086dd6:	8102      	strh	r2, [r0, #8]
 8086dd8:	8142      	strh	r2, [r0, #10]
    /*if (p < 255) {
        digitalWrite(p, LOW);
        pinMode(p, OUTPUT);
    }*/
}
 8086dda:	4770      	bx	lr
 8086ddc:	0809010c 	.word	0x0809010c

08086de0 <_ZN7HIH61XX6updateEv>:
    }*/
    f &= ~RunningFlag;
    return setError(0);
}

uint8_t HIH61XX::update() {
 8086de0:	b570      	push	{r4, r5, r6, lr}
        uint8_t error() const {
            return f & ErrorMask;
        }

        bool isRunning() const {
            return f & RunningFlag;
 8086de2:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8086de6:	4604      	mov	r4, r0
    if (!isRunning()) {
 8086de8:	2b00      	cmp	r3, #0
 8086dea:	db06      	blt.n	8086dfa <_ZN7HIH61XX6updateEv+0x1a>

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8086dec:	f023 030f 	bic.w	r3, r3, #15
 8086df0:	f043 0303 	orr.w	r3, r3, #3
 8086df4:	7183      	strb	r3, [r0, #6]
        return setError(NotRunningError);
 8086df6:	2003      	movs	r0, #3
 8086df8:	bd70      	pop	{r4, r5, r6, pc}
    }

    uint8_t x, y, s;

    Wire.beginTransmission(a);
 8086dfa:	f002 fb8d 	bl	8089518 <_Z19__fetch_global_Wirev>
 8086dfe:	7921      	ldrb	r1, [r4, #4]
 8086e00:	f002 fa30 	bl	8089264 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 8086e04:	f002 fb88 	bl	8089518 <_Z19__fetch_global_Wirev>
 8086e08:	f002 fa37 	bl	808927a <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 8086e0c:	4605      	mov	r5, r0
 8086e0e:	2800      	cmp	r0, #0
 8086e10:	d15d      	bne.n	8086ece <_ZN7HIH61XX6updateEv+0xee>
        while (true) {
            delay(10);
 8086e12:	200a      	movs	r0, #10
 8086e14:	f001 fe3c 	bl	8088a90 <delay>

            Wire.requestFrom(a, (uint8_t) 4);
 8086e18:	f002 fb7e 	bl	8089518 <_Z19__fetch_global_Wirev>
 8086e1c:	2204      	movs	r2, #4
 8086e1e:	7921      	ldrb	r1, [r4, #4]
 8086e20:	f002 fa13 	bl	808924a <_ZN7TwoWire11requestFromEhh>
            if (Wire.available()) {
 8086e24:	f002 fb78 	bl	8089518 <_Z19__fetch_global_Wirev>
 8086e28:	6803      	ldr	r3, [r0, #0]
 8086e2a:	691b      	ldr	r3, [r3, #16]
 8086e2c:	4798      	blx	r3
 8086e2e:	2800      	cmp	r0, #0
 8086e30:	d045      	beq.n	8086ebe <_ZN7HIH61XX6updateEv+0xde>
                x = Wire.read();
 8086e32:	f002 fb71 	bl	8089518 <_Z19__fetch_global_Wirev>
 8086e36:	6803      	ldr	r3, [r0, #0]
 8086e38:	695b      	ldr	r3, [r3, #20]
 8086e3a:	4798      	blx	r3
 8086e3c:	4606      	mov	r6, r0
                y = Wire.read();
 8086e3e:	f002 fb6b 	bl	8089518 <_Z19__fetch_global_Wirev>
 8086e42:	6803      	ldr	r3, [r0, #0]
                s = x >> 6;

                switch (s) {
 8086e44:	f3c6 1581 	ubfx	r5, r6, #6, #2
            delay(10);

            Wire.requestFrom(a, (uint8_t) 4);
            if (Wire.available()) {
                x = Wire.read();
                y = Wire.read();
 8086e48:	695b      	ldr	r3, [r3, #20]
 8086e4a:	4798      	blx	r3
                s = x >> 6;

                switch (s) {
 8086e4c:	2d01      	cmp	r5, #1
 8086e4e:	d025      	beq.n	8086e9c <_ZN7HIH61XX6updateEv+0xbc>
 8086e50:	2d02      	cmp	r5, #2
 8086e52:	d028      	beq.n	8086ea6 <_ZN7HIH61XX6updateEv+0xc6>
 8086e54:	2d00      	cmp	r5, #0
 8086e56:	d1dc      	bne.n	8086e12 <_ZN7HIH61XX6updateEv+0x32>
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 8086e58:	0236      	lsls	r6, r6, #8
 8086e5a:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
 8086e5e:	b2c0      	uxtb	r0, r0
 8086e60:	4330      	orrs	r0, r6
 8086e62:	8120      	strh	r0, [r4, #8]
                        x = Wire.read();
 8086e64:	f002 fb58 	bl	8089518 <_Z19__fetch_global_Wirev>
 8086e68:	6803      	ldr	r3, [r0, #0]
 8086e6a:	695b      	ldr	r3, [r3, #20]
 8086e6c:	4798      	blx	r3
 8086e6e:	4606      	mov	r6, r0
                        y = Wire.read();
 8086e70:	f002 fb52 	bl	8089518 <_Z19__fetch_global_Wirev>
 8086e74:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8086e76:	0236      	lsls	r6, r6, #8

                switch (s) {
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
                        x = Wire.read();
                        y = Wire.read();
 8086e78:	695b      	ldr	r3, [r3, #20]
 8086e7a:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8086e7c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8086e80:	b2c0      	uxtb	r0, r0
 8086e82:	4330      	orrs	r0, r6
 8086e84:	1080      	asrs	r0, r0, #2
 8086e86:	8160      	strh	r0, [r4, #10]
                        Wire.endTransmission();
 8086e88:	f002 fb46 	bl	8089518 <_Z19__fetch_global_Wirev>
 8086e8c:	f002 f9f5 	bl	808927a <_ZN7TwoWire15endTransmissionEv>
 8086e90:	79a3      	ldrb	r3, [r4, #6]
                        return setError(0);
 8086e92:	4628      	mov	r0, r5
 8086e94:	f023 030f 	bic.w	r3, r3, #15
 8086e98:	71a3      	strb	r3, [r4, #6]
 8086e9a:	bd70      	pop	{r4, r5, r6, pc}

                    case 1:
                        Wire.endTransmission();
 8086e9c:	f002 fb3c 	bl	8089518 <_Z19__fetch_global_Wirev>
 8086ea0:	f002 f9eb 	bl	808927a <_ZN7TwoWire15endTransmissionEv>
 8086ea4:	e7b5      	b.n	8086e12 <_ZN7HIH61XX6updateEv+0x32>
                        break;

                    case 2:
                        Wire.endTransmission();
 8086ea6:	f002 fb37 	bl	8089518 <_Z19__fetch_global_Wirev>
 8086eaa:	f002 f9e6 	bl	808927a <_ZN7TwoWire15endTransmissionEv>
 8086eae:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 8086eb0:	2004      	movs	r0, #4
 8086eb2:	f023 030f 	bic.w	r3, r3, #15
 8086eb6:	f043 0304 	orr.w	r3, r3, #4
 8086eba:	71a3      	strb	r3, [r4, #6]
 8086ebc:	bd70      	pop	{r4, r5, r6, pc}
 8086ebe:	79a3      	ldrb	r3, [r4, #6]
                }
            } else {
                return setError(CommunicationError);
 8086ec0:	2002      	movs	r0, #2
 8086ec2:	f023 030f 	bic.w	r3, r3, #15
 8086ec6:	f043 0302 	orr.w	r3, r3, #2
 8086eca:	71a3      	strb	r3, [r4, #6]
 8086ecc:	bd70      	pop	{r4, r5, r6, pc}
            }
        }
    } else {
        Serial.print("...");
 8086ece:	f001 fffb 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8086ed2:	4908      	ldr	r1, [pc, #32]	; (8086ef4 <_ZN7HIH61XX6updateEv+0x114>)
 8086ed4:	f001 fa92 	bl	80883fc <_ZN5Print5printEPKc>
        Serial.println(azer);
 8086ed8:	f001 fff6 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8086edc:	220a      	movs	r2, #10
 8086ede:	4629      	mov	r1, r5
 8086ee0:	f001 fb0d 	bl	80884fe <_ZN5Print7printlnEii>
 8086ee4:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 8086ee6:	2001      	movs	r0, #1
 8086ee8:	f023 030f 	bic.w	r3, r3, #15
 8086eec:	f043 0301 	orr.w	r3, r3, #1
 8086ef0:	71a3      	strb	r3, [r4, #6]
    }
}
 8086ef2:	bd70      	pop	{r4, r5, r6, pc}
 8086ef4:	0808ff4c 	.word	0x0808ff4c

08086ef8 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8086ef8:	2a61      	cmp	r2, #97	; 0x61
        return commandProcess(stream, stream.read());
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 8086efa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8086efc:	460d      	mov	r5, r1
    switch (command) {
 8086efe:	d02b      	beq.n	8086f58 <_ZN7HIH61XX14commandProcessER6Streamh+0x60>
 8086f00:	d806      	bhi.n	8086f10 <_ZN7HIH61XX14commandProcessER6Streamh+0x18>
 8086f02:	2a30      	cmp	r2, #48	; 0x30
 8086f04:	d031      	beq.n	8086f6a <_ZN7HIH61XX14commandProcessER6Streamh+0x72>
 8086f06:	2a31      	cmp	r2, #49	; 0x31
 8086f08:	d139      	bne.n	8086f7e <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
        case 'u':
            return commandReply(stream, update());

            //  start
        case '1':
            return commandReply(stream, start());
 8086f0a:	6803      	ldr	r3, [r0, #0]
 8086f0c:	681b      	ldr	r3, [r3, #0]
 8086f0e:	e02e      	b.n	8086f6e <_ZN7HIH61XX14commandProcessER6Streamh+0x76>
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8086f10:	2a74      	cmp	r2, #116	; 0x74
 8086f12:	d00a      	beq.n	8086f2a <_ZN7HIH61XX14commandProcessER6Streamh+0x32>
 8086f14:	2a75      	cmp	r2, #117	; 0x75
 8086f16:	d025      	beq.n	8086f64 <_ZN7HIH61XX14commandProcessER6Streamh+0x6c>
 8086f18:	2a68      	cmp	r2, #104	; 0x68
 8086f1a:	d130      	bne.n	8086f7e <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
            stream.println(result);
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 8086f1c:	8900      	ldrh	r0, [r0, #8]
 8086f1e:	f003 fa41 	bl	808a3a4 <__aeabi_ui2f>
 8086f22:	491b      	ldr	r1, [pc, #108]	; (8086f90 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8086f24:	f003 fb4a 	bl	808a5bc <__aeabi_fdiv>
 8086f28:	e00b      	b.n	8086f42 <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
 8086f2a:	8940      	ldrh	r0, [r0, #10]
 8086f2c:	f003 fa3a 	bl	808a3a4 <__aeabi_ui2f>
 8086f30:	4917      	ldr	r1, [pc, #92]	; (8086f90 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8086f32:	f003 fb43 	bl	808a5bc <__aeabi_fdiv>
 8086f36:	4917      	ldr	r1, [pc, #92]	; (8086f94 <_ZN7HIH61XX14commandProcessER6Streamh+0x9c>)
 8086f38:	f003 fa8c 	bl	808a454 <__aeabi_fmul>
 8086f3c:	4916      	ldr	r1, [pc, #88]	; (8086f98 <_ZN7HIH61XX14commandProcessER6Streamh+0xa0>)
 8086f3e:	f003 f97f 	bl	808a240 <__aeabi_fsub>
 8086f42:	f002 fddd 	bl	8089b00 <__aeabi_f2d>
 8086f46:	2302      	movs	r3, #2
 8086f48:	9300      	str	r3, [sp, #0]
 8086f4a:	4602      	mov	r2, r0
 8086f4c:	460b      	mov	r3, r1
 8086f4e:	4628      	mov	r0, r5
 8086f50:	f001 fb8e 	bl	8088670 <_ZN5Print7printlnEdi>
        case 'h':
            return commandReply(stream, 0, humidity());

            //  get temperature
        case 't':
            return commandReply(stream, 0, temperature());
 8086f54:	2400      	movs	r4, #0
 8086f56:	e018      	b.n	8086f8a <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8086f58:	7901      	ldrb	r1, [r0, #4]
 8086f5a:	220a      	movs	r2, #10
 8086f5c:	4628      	mov	r0, r5
 8086f5e:	f001 faa0 	bl	80884a2 <_ZN5Print7printlnEhi>
 8086f62:	e7f7      	b.n	8086f54 <_ZN7HIH61XX14commandProcessER6Streamh+0x5c>

            //  get power pin
        
            //  update
        case 'u':
            return commandReply(stream, update());
 8086f64:	f7ff ff3c 	bl	8086de0 <_ZN7HIH61XX6updateEv>
 8086f68:	e002      	b.n	8086f70 <_ZN7HIH61XX14commandProcessER6Streamh+0x78>
        case '1':
            return commandReply(stream, start());

            //  stop
        case '0':
            return commandReply(stream, stop());
 8086f6a:	6803      	ldr	r3, [r0, #0]
 8086f6c:	685b      	ldr	r3, [r3, #4]
 8086f6e:	4798      	blx	r3
 8086f70:	4604      	mov	r4, r0
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 8086f72:	4601      	mov	r1, r0
 8086f74:	220a      	movs	r2, #10
 8086f76:	4628      	mov	r0, r5
 8086f78:	f001 fa93 	bl	80884a2 <_ZN5Print7printlnEhi>
 8086f7c:	e005      	b.n	8086f8a <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8086f7e:	220a      	movs	r2, #10
 8086f80:	21fe      	movs	r1, #254	; 0xfe
 8086f82:	4628      	mov	r0, r5
 8086f84:	f001 fa8d 	bl	80884a2 <_ZN5Print7printlnEhi>
    }

    return commandReply(stream, 254);
 8086f88:	24fe      	movs	r4, #254	; 0xfe
}
 8086f8a:	4620      	mov	r0, r4
 8086f8c:	b003      	add	sp, #12
 8086f8e:	bd30      	pop	{r4, r5, pc}
 8086f90:	467ff800 	.word	0x467ff800
 8086f94:	43250000 	.word	0x43250000
 8086f98:	42200000 	.word	0x42200000

08086f9c <_GLOBAL__sub_I__ZN7HIH61XXC2Eh>:
 8086f9c:	f000 ba46 	b.w	808742c <HAL_Pin_Map>

08086fa0 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8086fa0:	b510      	push	{r4, lr}
 8086fa2:	4604      	mov	r4, r0
 8086fa4:	4b05      	ldr	r3, [pc, #20]	; (8086fbc <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 8086fa6:	f840 3b2c 	str.w	r3, [r0], #44
 8086faa:	f001 f855 	bl	8088058 <_ZN6StringD1Ev>
 8086fae:	f104 000c 	add.w	r0, r4, #12
 8086fb2:	f001 f851 	bl	8088058 <_ZN6StringD1Ev>

}
 8086fb6:	4620      	mov	r0, r4
 8086fb8:	bd10      	pop	{r4, pc}
 8086fba:	bf00      	nop
 8086fbc:	08090120 	.word	0x08090120

08086fc0 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8086fc0:	b510      	push	{r4, lr}
 8086fc2:	4604      	mov	r4, r0

}
 8086fc4:	f7ff ffec 	bl	8086fa0 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8086fc8:	4620      	mov	r0, r4
 8086fca:	2144      	movs	r1, #68	; 0x44
 8086fcc:	f002 fae9 	bl	80895a2 <_ZdlPvj>
 8086fd0:	4620      	mov	r0, r4
 8086fd2:	bd10      	pop	{r4, pc}

08086fd4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8086fd4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8086fd6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8086fd8:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8086fda:	b113      	cbz	r3, 8086fe2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8086fdc:	2203      	movs	r2, #3
 8086fde:	4601      	mov	r1, r0
 8086fe0:	4798      	blx	r3
    }
 8086fe2:	4620      	mov	r0, r4
 8086fe4:	bd10      	pop	{r4, pc}
	...

08086fe8 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8086fe8:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086fea:	4b0f      	ldr	r3, [pc, #60]	; (8087028 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8086fec:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086fee:	6003      	str	r3, [r0, #0]
 8086ff0:	f242 7310 	movw	r3, #10000	; 0x2710
 8086ff4:	2500      	movs	r5, #0
 8086ff6:	6045      	str	r5, [r0, #4]
 8086ff8:	6083      	str	r3, [r0, #8]
 8086ffa:	490c      	ldr	r1, [pc, #48]	; (808702c <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8086ffc:	300c      	adds	r0, #12
 8086ffe:	f001 f872 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8087002:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8087006:	62a3      	str	r3, [r4, #40]	; 0x28
 8087008:	61e5      	str	r5, [r4, #28]
 808700a:	6225      	str	r5, [r4, #32]
 808700c:	6265      	str	r5, [r4, #36]	; 0x24
 808700e:	4908      	ldr	r1, [pc, #32]	; (8087030 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8087010:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8087014:	f001 f867 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8087018:	f44f 739b 	mov.w	r3, #310	; 0x136
 808701c:	63e3      	str	r3, [r4, #60]	; 0x3c
 808701e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8087022:	6423      	str	r3, [r4, #64]	; 0x40

}
 8087024:	4620      	mov	r0, r4
 8087026:	bd38      	pop	{r3, r4, r5, pc}
 8087028:	08090120 	.word	0x08090120
 808702c:	0809015e 	.word	0x0809015e
 8087030:	0809016c 	.word	0x0809016c

08087034 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8087034:	4b02      	ldr	r3, [pc, #8]	; (8087040 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 8087036:	2201      	movs	r2, #1
 8087038:	701a      	strb	r2, [r3, #0]
 808703a:	f000 b9f7 	b.w	808742c <HAL_Pin_Map>
 808703e:	bf00      	nop
 8087040:	20000b7b 	.word	0x20000b7b

08087044 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8087044:	b430      	push	{r4, r5}
 8087046:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8087048:	681b      	ldr	r3, [r3, #0]
 808704a:	681d      	ldr	r5, [r3, #0]
 808704c:	4613      	mov	r3, r2
 808704e:	46ac      	mov	ip, r5
 8087050:	460a      	mov	r2, r1
 8087052:	4601      	mov	r1, r0
 8087054:	4620      	mov	r0, r4
}
 8087056:	bc30      	pop	{r4, r5}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8087058:	4760      	bx	ip
	...

0808705c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 808705c:	b570      	push	{r4, r5, r6, lr}
 808705e:	460c      	mov	r4, r1
 8087060:	b08c      	sub	sp, #48	; 0x30
	String typeStr;
 8087062:	494c      	ldr	r1, [pc, #304]	; (8087194 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8087064:	a804      	add	r0, sp, #16
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8087066:	4615      	mov	r5, r2
 8087068:	461e      	mov	r6, r3
	String typeStr;
 808706a:	f001 f83c 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
 808706e:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8087072:	d035      	beq.n	80870e0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
 8087074:	dc13      	bgt.n	808709e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
 8087076:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 808707a:	d028      	beq.n	80870ce <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 808707c:	dc05      	bgt.n	808708a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
 808707e:	b324      	cbz	r4, 80870ca <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
 8087080:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8087084:	d136      	bne.n	80870f4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8087086:	4944      	ldr	r1, [pc, #272]	; (8087198 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
 8087088:	e022      	b.n	80870d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 808708a:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 808708e:	d023      	beq.n	80870d8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
 8087090:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8087094:	d022      	beq.n	80870dc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
 8087096:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 808709a:	d12b      	bne.n	80870f4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 808709c:	e017      	b.n	80870ce <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 808709e:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 80870a2:	d021      	beq.n	80870e8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
 80870a4:	dc07      	bgt.n	80870b6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
 80870a6:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 80870aa:	d01b      	beq.n	80870e4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
 80870ac:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 80870b0:	d120      	bne.n	80870f4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
		break;

	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
 80870b2:	493a      	ldr	r1, [pc, #232]	; (808719c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 80870b4:	e00c      	b.n	80870d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 80870b6:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 80870ba:	d017      	beq.n	80870ec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
 80870bc:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 80870c0:	d016      	beq.n	80870f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
 80870c2:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 80870c6:	d115      	bne.n	80870f4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 80870c8:	e010      	b.n	80870ec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
 80870ca:	4935      	ldr	r1, [pc, #212]	; (80871a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 80870cc:	e000      	b.n	80870d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_ERROR:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_RING:
		typeStr = "TYPE_ERROR";
 80870ce:	4935      	ldr	r1, [pc, #212]	; (80871a4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 80870d0:	a804      	add	r0, sp, #16
 80870d2:	f001 f85a 	bl	808818a <_ZN6StringaSEPKc>
		break;
 80870d6:	e019      	b.n	808710c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
	case TYPE_RING:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_CONNECT:
		typeStr = "TYPE_CONNECT";
 80870d8:	4933      	ldr	r1, [pc, #204]	; (80871a8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 80870da:	e7f9      	b.n	80870d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NOCARRIER:
		typeStr = "TYPE_NOCARRIER";
 80870dc:	4933      	ldr	r1, [pc, #204]	; (80871ac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 80870de:	e7f7      	b.n	80870d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NODIALTONE:
		typeStr = "TYPE_NODIALTONE";
 80870e0:	4933      	ldr	r1, [pc, #204]	; (80871b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
 80870e2:	e7f5      	b.n	80870d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
 80870e4:	4933      	ldr	r1, [pc, #204]	; (80871b4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 80870e6:	e7f3      	b.n	80870d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
		break;

	case TYPE_PROMPT:
		typeStr = "TYPE_PROMPT";
 80870e8:	4933      	ldr	r1, [pc, #204]	; (80871b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 80870ea:	e7f1      	b.n	80870d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_PLUS:
		typeStr = "TYPE_PLUS";
		break;

	case TYPE_TEXT:
		typeStr = "TYPE_PLUS";
 80870ec:	4933      	ldr	r1, [pc, #204]	; (80871bc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
 80870ee:	e7ef      	b.n	80870d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_ABORTED:
		typeStr = "TYPE_ABORTED";
 80870f0:	4933      	ldr	r1, [pc, #204]	; (80871c0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 80870f2:	e7ed      	b.n	80870d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	default:
		typeStr = String::format("type=0x%x", type);
 80870f4:	4622      	mov	r2, r4
 80870f6:	4933      	ldr	r1, [pc, #204]	; (80871c4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 80870f8:	a808      	add	r0, sp, #32
 80870fa:	f001 f941 	bl	8088380 <_ZN6String6formatEPKcz>
 80870fe:	a908      	add	r1, sp, #32
 8087100:	a804      	add	r0, sp, #16
 8087102:	f001 f83a 	bl	808817a <_ZN6StringaSEOS_>
 8087106:	a808      	add	r0, sp, #32
 8087108:	f000 ffa6 	bl	8088058 <_ZN6StringD1Ev>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 808710c:	4633      	mov	r3, r6
 808710e:	9a04      	ldr	r2, [sp, #16]
 8087110:	492d      	ldr	r1, [pc, #180]	; (80871c8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8087112:	482e      	ldr	r0, [pc, #184]	; (80871cc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8087114:	f7f9 fc92 	bl	8080a3c <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8087118:	491e      	ldr	r1, [pc, #120]	; (8087194 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 808711a:	a808      	add	r0, sp, #32
 808711c:	f000 ffe3 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8087120:	462c      	mov	r4, r5
	for(int ii = 0; ii < len; ii++) {
 8087122:	1b63      	subs	r3, r4, r5
 8087124:	429e      	cmp	r6, r3
 8087126:	dd27      	ble.n	8087178 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
		if (buf[ii] == '\n') {
 8087128:	f814 3b01 	ldrb.w	r3, [r4], #1
 808712c:	2b0a      	cmp	r3, #10
 808712e:	d10c      	bne.n	808714a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8087130:	4927      	ldr	r1, [pc, #156]	; (80871d0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8087132:	a808      	add	r0, sp, #32
 8087134:	f001 f895 	bl	8088262 <_ZN6String6concatEPKc>
			out += "\\n";
			Log.info(out);
 8087138:	9908      	ldr	r1, [sp, #32]
 808713a:	4824      	ldr	r0, [pc, #144]	; (80871cc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 808713c:	f7f9 fc7e 	bl	8080a3c <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8087140:	4914      	ldr	r1, [pc, #80]	; (8087194 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8087142:	a808      	add	r0, sp, #32
 8087144:	f001 f821 	bl	808818a <_ZN6StringaSEPKc>
 8087148:	e7eb      	b.n	8087122 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else
		if (buf[ii] == '\r') {
 808714a:	2b0d      	cmp	r3, #13
 808714c:	d101      	bne.n	8087152 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
 808714e:	4921      	ldr	r1, [pc, #132]	; (80871d4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8087150:	e009      	b.n	8087166 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
			out += "\\r";
		}
		else
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8087152:	f1a3 0220 	sub.w	r2, r3, #32
 8087156:	2a5e      	cmp	r2, #94	; 0x5e
 8087158:	d909      	bls.n	808716e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
			char hex[10];
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 808715a:	210a      	movs	r1, #10
 808715c:	4a1e      	ldr	r2, [pc, #120]	; (80871d8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 808715e:	a801      	add	r0, sp, #4
 8087160:	f000 fc62 	bl	8087a28 <snprintf>
			out.concat(hex);
 8087164:	a901      	add	r1, sp, #4
 8087166:	a808      	add	r0, sp, #32
 8087168:	f001 f87b 	bl	8088262 <_ZN6String6concatEPKc>
 808716c:	e7d9      	b.n	8087122 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
 808716e:	4619      	mov	r1, r3
 8087170:	a808      	add	r0, sp, #32
 8087172:	f001 f885 	bl	8088280 <_ZN6String6concatEc>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
	for(int ii = 0; ii < len; ii++) {
 8087176:	e7d4      	b.n	8087122 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
		}
	}
	if (out.length() > 0) {
 8087178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808717a:	b11b      	cbz	r3, 8087184 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
		Log.info(out);
 808717c:	9908      	ldr	r1, [sp, #32]
 808717e:	4813      	ldr	r0, [pc, #76]	; (80871cc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8087180:	f7f9 fc5c 	bl	8080a3c <_ZNK5spark6Logger4infoEPKcz>
		typeStr = String::format("type=0x%x", type);
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
 8087184:	a808      	add	r0, sp, #32
 8087186:	f000 ff67 	bl	8088058 <_ZN6StringD1Ev>
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
 808718a:	a804      	add	r0, sp, #16
 808718c:	f000 ff64 	bl	8088058 <_ZN6StringD1Ev>
		}
	}
	if (out.length() > 0) {
		Log.info(out);
	}
}
 8087190:	b00c      	add	sp, #48	; 0x30
 8087192:	bd70      	pop	{r4, r5, r6, pc}
 8087194:	08090584 	.word	0x08090584
 8087198:	080901bd 	.word	0x080901bd
 808719c:	08090206 	.word	0x08090206
 80871a0:	080901b0 	.word	0x080901b0
 80871a4:	080901c5 	.word	0x080901c5
 80871a8:	080901d0 	.word	0x080901d0
 80871ac:	080901dd 	.word	0x080901dd
 80871b0:	080901ec 	.word	0x080901ec
 80871b4:	080901fc 	.word	0x080901fc
 80871b8:	08090214 	.word	0x08090214
 80871bc:	08090220 	.word	0x08090220
 80871c0:	0809022a 	.word	0x0809022a
 80871c4:	08090237 	.word	0x08090237
 80871c8:	08090241 	.word	0x08090241
 80871cc:	20000b84 	.word	0x20000b84
 80871d0:	08090262 	.word	0x08090262
 80871d4:	08090265 	.word	0x08090265
 80871d8:	08090268 	.word	0x08090268

080871dc <_ZN32CellularHelperPlusStringResponseC1Ev>:
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80871dc:	b538      	push	{r3, r4, r5, lr}
 80871de:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 80871e0:	f06f 0302 	mvn.w	r3, #2
 80871e4:	6043      	str	r3, [r0, #4]
 80871e6:	2300      	movs	r3, #0
 80871e8:	7203      	strb	r3, [r0, #8]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80871ea:	4d07      	ldr	r5, [pc, #28]	; (8087208 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
 80871ec:	4b07      	ldr	r3, [pc, #28]	; (808720c <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 80871ee:	4629      	mov	r1, r5
 80871f0:	f840 3b0c 	str.w	r3, [r0], #12
 80871f4:	f000 ff77 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 80871f8:	4629      	mov	r1, r5
 80871fa:	f104 001c 	add.w	r0, r4, #28
 80871fe:	f000 ff72 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 8087202:	4620      	mov	r0, r4
 8087204:	bd38      	pop	{r3, r4, r5, pc}
 8087206:	bf00      	nop
 8087208:	08090584 	.word	0x08090584
 808720c:	080905a0 	.word	0x080905a0

08087210 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8087210:	b510      	push	{r4, lr}
 8087212:	4604      	mov	r4, r0
 8087214:	4b05      	ldr	r3, [pc, #20]	; (808722c <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8087216:	f840 3b1c 	str.w	r3, [r0], #28
 808721a:	f000 ff1d 	bl	8088058 <_ZN6StringD1Ev>
 808721e:	f104 000c 	add.w	r0, r4, #12
 8087222:	f000 ff19 	bl	8088058 <_ZN6StringD1Ev>
 8087226:	4620      	mov	r0, r4
 8087228:	bd10      	pop	{r4, pc}
 808722a:	bf00      	nop
 808722c:	080905a0 	.word	0x080905a0

08087230 <_ZN28CellularHelperStringResponseC1Ev>:
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8087230:	b510      	push	{r4, lr}
 8087232:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8087234:	f06f 0302 	mvn.w	r3, #2
 8087238:	6043      	str	r3, [r0, #4]
 808723a:	2300      	movs	r3, #0
 808723c:	7203      	strb	r3, [r0, #8]
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808723e:	4b04      	ldr	r3, [pc, #16]	; (8087250 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 8087240:	4904      	ldr	r1, [pc, #16]	; (8087254 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 8087242:	f840 3b0c 	str.w	r3, [r0], #12
 8087246:	f000 ff4e 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
 808724a:	4620      	mov	r0, r4
 808724c:	bd10      	pop	{r4, pc}
 808724e:	bf00      	nop
 8087250:	080901ac 	.word	0x080901ac
 8087254:	08090584 	.word	0x08090584

08087258 <_ZN28CellularHelperStringResponseD1Ev>:
 8087258:	b510      	push	{r4, lr}
 808725a:	4604      	mov	r4, r0
 808725c:	4b03      	ldr	r3, [pc, #12]	; (808726c <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 808725e:	f840 3b0c 	str.w	r3, [r0], #12
 8087262:	f000 fef9 	bl	8088058 <_ZN6StringD1Ev>
 8087266:	4620      	mov	r0, r4
 8087268:	bd10      	pop	{r4, pc}
 808726a:	bf00      	nop
 808726c:	080901ac 	.word	0x080901ac

08087270 <_ZNK19CellularHelperClass7getIMEIEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMR\r\n");

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
 8087270:	b510      	push	{r4, lr}
 8087272:	4604      	mov	r4, r0
 8087274:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8087276:	a801      	add	r0, sp, #4
 8087278:	f7ff ffda 	bl	8087230 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808727c:	4b08      	ldr	r3, [pc, #32]	; (80872a0 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 808727e:	f242 7210 	movw	r2, #10000	; 0x2710
 8087282:	a901      	add	r1, sp, #4
 8087284:	4807      	ldr	r0, [pc, #28]	; (80872a4 <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 8087286:	f000 fa81 	bl	808778c <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
 808728a:	a904      	add	r1, sp, #16
 808728c:	4620      	mov	r0, r4
 808728e:	f000 ff69 	bl	8088164 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
	CellularHelperStringResponse resp;
 8087292:	a801      	add	r0, sp, #4
 8087294:	f7ff ffe0 	bl	8087258 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
}
 8087298:	4620      	mov	r0, r4
 808729a:	b008      	add	sp, #32
 808729c:	bd10      	pop	{r4, pc}
 808729e:	bf00      	nop
 80872a0:	08090468 	.word	0x08090468
 80872a4:	08087045 	.word	0x08087045

080872a8 <_ZNK19CellularHelperClass7getIMSIEv>:

String CellularHelperClass::getIMSI() const {
 80872a8:	b510      	push	{r4, lr}
 80872aa:	4604      	mov	r4, r0
 80872ac:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 80872ae:	a801      	add	r0, sp, #4
 80872b0:	f7ff ffbe 	bl	8087230 <_ZN28CellularHelperStringResponseC1Ev>
 80872b4:	4b08      	ldr	r3, [pc, #32]	; (80872d8 <_ZNK19CellularHelperClass7getIMSIEv+0x30>)
 80872b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80872ba:	a901      	add	r1, sp, #4
 80872bc:	4807      	ldr	r0, [pc, #28]	; (80872dc <_ZNK19CellularHelperClass7getIMSIEv+0x34>)
 80872be:	f000 fa65 	bl	808778c <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
 80872c2:	a904      	add	r1, sp, #16
 80872c4:	4620      	mov	r0, r4
 80872c6:	f000 ff4d 	bl	8088164 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMSI() const {
	CellularHelperStringResponse resp;
 80872ca:	a801      	add	r0, sp, #4
 80872cc:	f7ff ffc4 	bl	8087258 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}
 80872d0:	4620      	mov	r0, r4
 80872d2:	b008      	add	sp, #32
 80872d4:	bd10      	pop	{r4, pc}
 80872d6:	bf00      	nop
 80872d8:	08090472 	.word	0x08090472
 80872dc:	08087045 	.word	0x08087045

080872e0 <_ZNK19CellularHelperClass8getICCIDEv>:

String CellularHelperClass::getICCID() const {
 80872e0:	b510      	push	{r4, lr}
 80872e2:	4604      	mov	r4, r0
 80872e4:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 80872e6:	a801      	add	r0, sp, #4
 80872e8:	f7ff ff78 	bl	80871dc <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 80872ec:	490a      	ldr	r1, [pc, #40]	; (8087318 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 80872ee:	a804      	add	r0, sp, #16
 80872f0:	f000 ff4b 	bl	808818a <_ZN6StringaSEPKc>
 80872f4:	4b09      	ldr	r3, [pc, #36]	; (808731c <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 80872f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80872fa:	a901      	add	r1, sp, #4
 80872fc:	4808      	ldr	r0, [pc, #32]	; (8087320 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 80872fe:	f000 fa45 	bl	808778c <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
 8087302:	a908      	add	r1, sp, #32
 8087304:	4620      	mov	r0, r4
 8087306:	f000 ff2d 	bl	8088164 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getICCID() const {
	CellularHelperPlusStringResponse resp;
 808730a:	a801      	add	r0, sp, #4
 808730c:	f7ff ff80 	bl	8087210 <_ZN32CellularHelperPlusStringResponseD1Ev>
	resp.command = "CCID";

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
}
 8087310:	4620      	mov	r0, r4
 8087312:	b00c      	add	sp, #48	; 0x30
 8087314:	bd10      	pop	{r4, pc}
 8087316:	bf00      	nop
 8087318:	0809047c 	.word	0x0809047c
 808731c:	08090481 	.word	0x08090481
 8087320:	08087045 	.word	0x08087045

08087324 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8087324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087328:	460d      	mov	r5, r1
 808732a:	4616      	mov	r6, r2
	str.reserve(str.length() + (size_t)len + 1);
 808732c:	1c59      	adds	r1, r3, #1



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808732e:	461f      	mov	r7, r3
	str.reserve(str.length() + (size_t)len + 1);
 8087330:	68ab      	ldr	r3, [r5, #8]
 8087332:	4628      	mov	r0, r5
 8087334:	4419      	add	r1, r3



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8087336:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
 808733a:	4634      	mov	r4, r6
 808733c:	f000 feaa 	bl	8088094 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 8087340:	1ba3      	subs	r3, r4, r6
 8087342:	429f      	cmp	r7, r3
 8087344:	dd0d      	ble.n	8087362 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 8087346:	f1b8 0f00 	cmp.w	r8, #0
 808734a:	d004      	beq.n	8087356 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
 808734c:	7823      	ldrb	r3, [r4, #0]
 808734e:	2b0d      	cmp	r3, #13
 8087350:	d005      	beq.n	808735e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
 8087352:	2b0a      	cmp	r3, #10
 8087354:	d003      	beq.n	808735e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
			str.concat(buf[ii]);
 8087356:	7821      	ldrb	r1, [r4, #0]
 8087358:	4628      	mov	r0, r5
 808735a:	f000 ff91 	bl	8088280 <_ZN6String6concatEc>
 808735e:	3401      	adds	r4, #1

// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
	str.reserve(str.length() + (size_t)len + 1);
	for(int ii = 0; ii < len; ii++) {
 8087360:	e7ee      	b.n	8087340 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
 8087362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08087368 <_ZN28CellularHelperStringResponse5parseEiPKci>:
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8087368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 808736a:	f890 e008 	ldrb.w	lr, [r0, #8]
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808736e:	4604      	mov	r4, r0
 8087370:	460f      	mov	r7, r1
 8087372:	4615      	mov	r5, r2
 8087374:	461e      	mov	r6, r3
	if (enableDebug) {
 8087376:	f1be 0f00 	cmp.w	lr, #0
 808737a:	d001      	beq.n	8087380 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 808737c:	f7ff fe6e 	bl	808705c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_UNKNOWN) {
 8087380:	b947      	cbnz	r7, 8087394 <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 8087382:	2301      	movs	r3, #1
 8087384:	9300      	str	r3, [sp, #0]
 8087386:	462a      	mov	r2, r5
 8087388:	4633      	mov	r3, r6
 808738a:	f104 010c 	add.w	r1, r4, #12
 808738e:	4803      	ldr	r0, [pc, #12]	; (808739c <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 8087390:	f7ff ffc8 	bl	8087324 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
	}
	return WAIT;
}
 8087394:	f04f 30ff 	mov.w	r0, #4294967295
 8087398:	b003      	add	sp, #12
 808739a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808739c:	20000b7c 	.word	0x20000b7c

080873a0 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 80873a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 80873a2:	f890 e008 	ldrb.w	lr, [r0, #8]
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 80873a6:	b08b      	sub	sp, #44	; 0x2c
 80873a8:	4606      	mov	r6, r0
 80873aa:	460d      	mov	r5, r1
 80873ac:	4617      	mov	r7, r2
 80873ae:	461c      	mov	r4, r3
	if (enableDebug) {
 80873b0:	f1be 0f00 	cmp.w	lr, #0
 80873b4:	d001      	beq.n	80873ba <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 80873b6:	f7ff fe51 	bl	808705c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_PLUS) {
 80873ba:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 80873be:	d12a      	bne.n	8087416 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 80873c0:	1c60      	adds	r0, r4, #1
 80873c2:	f000 fb01 	bl	80879c8 <malloc>
		if (copy) {
 80873c6:	4605      	mov	r5, r0
 80873c8:	b328      	cbz	r0, 8087416 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 80873ca:	4622      	mov	r2, r4
 80873cc:	4639      	mov	r1, r7
 80873ce:	f004 fb1a 	bl	808ba06 <strncpy>
			copy[len] = 0;
 80873d2:	2300      	movs	r3, #0
 80873d4:	552b      	strb	r3, [r5, r4]

			// We return the parts of the + response corresponding to the command we requested
			char searchFor[32];
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 80873d6:	68f3      	ldr	r3, [r6, #12]
 80873d8:	4a11      	ldr	r2, [pc, #68]	; (8087420 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 80873da:	2120      	movs	r1, #32
 80873dc:	a802      	add	r0, sp, #8
 80873de:	f000 fb23 	bl	8087a28 <snprintf>

			//Log.info("searching for: +%s:", command.c_str());

			char *start = strstr(copy, searchFor);
 80873e2:	a902      	add	r1, sp, #8
 80873e4:	4628      	mov	r0, r5
 80873e6:	f004 fb21 	bl	808ba2c <strstr>
			if (start) {
 80873ea:	4604      	mov	r4, r0
 80873ec:	b180      	cbz	r0, 8087410 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 80873ee:	a802      	add	r0, sp, #8
 80873f0:	f004 faec 	bl	808b9cc <strlen>
 80873f4:	4404      	add	r4, r0

				char *end = strchr(start, '\r');
 80873f6:	210d      	movs	r1, #13
 80873f8:	4620      	mov	r0, r4
 80873fa:	f003 fdb3 	bl	808af64 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 80873fe:	2301      	movs	r3, #1
 8087400:	9300      	str	r3, [sp, #0]
 8087402:	4622      	mov	r2, r4
 8087404:	1b03      	subs	r3, r0, r4
 8087406:	f106 011c 	add.w	r1, r6, #28
 808740a:	4806      	ldr	r0, [pc, #24]	; (8087424 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 808740c:	f7ff ff8a 	bl	8087324 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			}
			else {
				//Log.info("not found");
			}

			free(copy);
 8087410:	4628      	mov	r0, r5
 8087412:	f000 fae1 	bl	80879d8 <free>
		}
	}
	return WAIT;
}
 8087416:	f04f 30ff 	mov.w	r0, #4294967295
 808741a:	b00b      	add	sp, #44	; 0x2c
 808741c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808741e:	bf00      	nop
 8087420:	08090591 	.word	0x08090591
 8087424:	20000b7c 	.word	0x20000b7c

08087428 <_GLOBAL__sub_I_CellularHelper>:
 8087428:	f000 b800 	b.w	808742c <HAL_Pin_Map>

0808742c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 808742c:	b508      	push	{r3, lr}
 808742e:	4b02      	ldr	r3, [pc, #8]	; (8087438 <HAL_Pin_Map+0xc>)
 8087430:	681b      	ldr	r3, [r3, #0]
 8087432:	681b      	ldr	r3, [r3, #0]
 8087434:	9301      	str	r3, [sp, #4]
 8087436:	bd08      	pop	{r3, pc}
 8087438:	080401b0 	.word	0x080401b0

0808743c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808743c:	b508      	push	{r3, lr}
 808743e:	4b02      	ldr	r3, [pc, #8]	; (8087448 <HAL_Validate_Pin_Function+0xc>)
 8087440:	681b      	ldr	r3, [r3, #0]
 8087442:	685b      	ldr	r3, [r3, #4]
 8087444:	9301      	str	r3, [sp, #4]
 8087446:	bd08      	pop	{r3, pc}
 8087448:	080401b0 	.word	0x080401b0

0808744c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808744c:	b508      	push	{r3, lr}
 808744e:	4b02      	ldr	r3, [pc, #8]	; (8087458 <HAL_Pin_Mode+0xc>)
 8087450:	681b      	ldr	r3, [r3, #0]
 8087452:	689b      	ldr	r3, [r3, #8]
 8087454:	9301      	str	r3, [sp, #4]
 8087456:	bd08      	pop	{r3, pc}
 8087458:	080401b0 	.word	0x080401b0

0808745c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808745c:	b508      	push	{r3, lr}
 808745e:	4b02      	ldr	r3, [pc, #8]	; (8087468 <HAL_Get_Pin_Mode+0xc>)
 8087460:	681b      	ldr	r3, [r3, #0]
 8087462:	68db      	ldr	r3, [r3, #12]
 8087464:	9301      	str	r3, [sp, #4]
 8087466:	bd08      	pop	{r3, pc}
 8087468:	080401b0 	.word	0x080401b0

0808746c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808746c:	b508      	push	{r3, lr}
 808746e:	4b02      	ldr	r3, [pc, #8]	; (8087478 <HAL_GPIO_Write+0xc>)
 8087470:	681b      	ldr	r3, [r3, #0]
 8087472:	691b      	ldr	r3, [r3, #16]
 8087474:	9301      	str	r3, [sp, #4]
 8087476:	bd08      	pop	{r3, pc}
 8087478:	080401b0 	.word	0x080401b0

0808747c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808747c:	b508      	push	{r3, lr}
 808747e:	4b02      	ldr	r3, [pc, #8]	; (8087488 <HAL_GPIO_Read+0xc>)
 8087480:	681b      	ldr	r3, [r3, #0]
 8087482:	695b      	ldr	r3, [r3, #20]
 8087484:	9301      	str	r3, [sp, #4]
 8087486:	bd08      	pop	{r3, pc}
 8087488:	080401b0 	.word	0x080401b0

0808748c <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 808748c:	b508      	push	{r3, lr}
 808748e:	4b02      	ldr	r3, [pc, #8]	; (8087498 <HAL_Interrupts_Attach+0xc>)
 8087490:	681b      	ldr	r3, [r3, #0]
 8087492:	699b      	ldr	r3, [r3, #24]
 8087494:	9301      	str	r3, [sp, #4]
 8087496:	bd08      	pop	{r3, pc}
 8087498:	080401b0 	.word	0x080401b0

0808749c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 808749c:	b508      	push	{r3, lr}
 808749e:	4b02      	ldr	r3, [pc, #8]	; (80874a8 <HAL_Interrupts_Detach+0xc>)
 80874a0:	681b      	ldr	r3, [r3, #0]
 80874a2:	69db      	ldr	r3, [r3, #28]
 80874a4:	9301      	str	r3, [sp, #4]
 80874a6:	bd08      	pop	{r3, pc}
 80874a8:	080401b0 	.word	0x080401b0

080874ac <HAL_ADC_Set_Sample_Time>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
 80874ac:	b508      	push	{r3, lr}
 80874ae:	4b02      	ldr	r3, [pc, #8]	; (80874b8 <HAL_ADC_Set_Sample_Time+0xc>)
 80874b0:	681b      	ldr	r3, [r3, #0]
 80874b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80874b4:	9301      	str	r3, [sp, #4]
 80874b6:	bd08      	pop	{r3, pc}
 80874b8:	080401b0 	.word	0x080401b0

080874bc <HAL_ADC_Read>:
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80874bc:	b508      	push	{r3, lr}
 80874be:	4b02      	ldr	r3, [pc, #8]	; (80874c8 <HAL_ADC_Read+0xc>)
 80874c0:	681b      	ldr	r3, [r3, #0]
 80874c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80874c4:	9301      	str	r3, [sp, #4]
 80874c6:	bd08      	pop	{r3, pc}
 80874c8:	080401b0 	.word	0x080401b0

080874cc <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80874cc:	b508      	push	{r3, lr}
 80874ce:	4b02      	ldr	r3, [pc, #8]	; (80874d8 <HAL_SPI_Begin+0xc>)
 80874d0:	681b      	ldr	r3, [r3, #0]
 80874d2:	681b      	ldr	r3, [r3, #0]
 80874d4:	9301      	str	r3, [sp, #4]
 80874d6:	bd08      	pop	{r3, pc}
 80874d8:	080401b4 	.word	0x080401b4

080874dc <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80874dc:	b508      	push	{r3, lr}
 80874de:	4b02      	ldr	r3, [pc, #8]	; (80874e8 <HAL_SPI_Set_Bit_Order+0xc>)
 80874e0:	681b      	ldr	r3, [r3, #0]
 80874e2:	689b      	ldr	r3, [r3, #8]
 80874e4:	9301      	str	r3, [sp, #4]
 80874e6:	bd08      	pop	{r3, pc}
 80874e8:	080401b4 	.word	0x080401b4

080874ec <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80874ec:	b508      	push	{r3, lr}
 80874ee:	4b02      	ldr	r3, [pc, #8]	; (80874f8 <HAL_SPI_Set_Data_Mode+0xc>)
 80874f0:	681b      	ldr	r3, [r3, #0]
 80874f2:	68db      	ldr	r3, [r3, #12]
 80874f4:	9301      	str	r3, [sp, #4]
 80874f6:	bd08      	pop	{r3, pc}
 80874f8:	080401b4 	.word	0x080401b4

080874fc <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80874fc:	b508      	push	{r3, lr}
 80874fe:	4b02      	ldr	r3, [pc, #8]	; (8087508 <HAL_SPI_Set_Clock_Divider+0xc>)
 8087500:	681b      	ldr	r3, [r3, #0]
 8087502:	691b      	ldr	r3, [r3, #16]
 8087504:	9301      	str	r3, [sp, #4]
 8087506:	bd08      	pop	{r3, pc}
 8087508:	080401b4 	.word	0x080401b4

0808750c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 808750c:	b508      	push	{r3, lr}
 808750e:	4b02      	ldr	r3, [pc, #8]	; (8087518 <HAL_SPI_Send_Receive_Data+0xc>)
 8087510:	681b      	ldr	r3, [r3, #0]
 8087512:	695b      	ldr	r3, [r3, #20]
 8087514:	9301      	str	r3, [sp, #4]
 8087516:	bd08      	pop	{r3, pc}
 8087518:	080401b4 	.word	0x080401b4

0808751c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 808751c:	b508      	push	{r3, lr}
 808751e:	4b02      	ldr	r3, [pc, #8]	; (8087528 <HAL_SPI_Init+0xc>)
 8087520:	681b      	ldr	r3, [r3, #0]
 8087522:	69db      	ldr	r3, [r3, #28]
 8087524:	9301      	str	r3, [sp, #4]
 8087526:	bd08      	pop	{r3, pc}
 8087528:	080401b4 	.word	0x080401b4

0808752c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 808752c:	b508      	push	{r3, lr}
 808752e:	4b02      	ldr	r3, [pc, #8]	; (8087538 <HAL_SPI_Is_Enabled+0xc>)
 8087530:	681b      	ldr	r3, [r3, #0]
 8087532:	6a1b      	ldr	r3, [r3, #32]
 8087534:	9301      	str	r3, [sp, #4]
 8087536:	bd08      	pop	{r3, pc}
 8087538:	080401b4 	.word	0x080401b4

0808753c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 808753c:	b508      	push	{r3, lr}
 808753e:	4b02      	ldr	r3, [pc, #8]	; (8087548 <HAL_SPI_Info+0xc>)
 8087540:	681b      	ldr	r3, [r3, #0]
 8087542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087544:	9301      	str	r3, [sp, #4]
 8087546:	bd08      	pop	{r3, pc}
 8087548:	080401b4 	.word	0x080401b4

0808754c <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 808754c:	b508      	push	{r3, lr}
 808754e:	4b02      	ldr	r3, [pc, #8]	; (8087558 <HAL_SPI_DMA_Transfer+0xc>)
 8087550:	681b      	ldr	r3, [r3, #0]
 8087552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087554:	9301      	str	r3, [sp, #4]
 8087556:	bd08      	pop	{r3, pc}
 8087558:	080401b4 	.word	0x080401b4

0808755c <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 808755c:	b508      	push	{r3, lr}
 808755e:	4b02      	ldr	r3, [pc, #8]	; (8087568 <HAL_SPI_DMA_Transfer_Status+0xc>)
 8087560:	681b      	ldr	r3, [r3, #0]
 8087562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087564:	9301      	str	r3, [sp, #4]
 8087566:	bd08      	pop	{r3, pc}
 8087568:	080401b4 	.word	0x080401b4

0808756c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808756c:	b508      	push	{r3, lr}
 808756e:	4b02      	ldr	r3, [pc, #8]	; (8087578 <HAL_RNG_GetRandomNumber+0xc>)
 8087570:	681b      	ldr	r3, [r3, #0]
 8087572:	685b      	ldr	r3, [r3, #4]
 8087574:	9301      	str	r3, [sp, #4]
 8087576:	bd08      	pop	{r3, pc}
 8087578:	0804019c 	.word	0x0804019c

0808757c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 808757c:	b508      	push	{r3, lr}
 808757e:	4b02      	ldr	r3, [pc, #8]	; (8087588 <HAL_Delay_Microseconds+0xc>)
 8087580:	681b      	ldr	r3, [r3, #0]
 8087582:	68db      	ldr	r3, [r3, #12]
 8087584:	9301      	str	r3, [sp, #4]
 8087586:	bd08      	pop	{r3, pc}
 8087588:	0804019c 	.word	0x0804019c

0808758c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808758c:	b508      	push	{r3, lr}
 808758e:	4b02      	ldr	r3, [pc, #8]	; (8087598 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8087590:	681b      	ldr	r3, [r3, #0]
 8087592:	695b      	ldr	r3, [r3, #20]
 8087594:	9301      	str	r3, [sp, #4]
 8087596:	bd08      	pop	{r3, pc}
 8087598:	0804019c 	.word	0x0804019c

0808759c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 808759c:	b508      	push	{r3, lr}
 808759e:	4b02      	ldr	r3, [pc, #8]	; (80875a8 <HAL_RTC_Get_UnixTime+0xc>)
 80875a0:	681b      	ldr	r3, [r3, #0]
 80875a2:	69db      	ldr	r3, [r3, #28]
 80875a4:	9301      	str	r3, [sp, #4]
 80875a6:	bd08      	pop	{r3, pc}
 80875a8:	0804019c 	.word	0x0804019c

080875ac <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
 80875ac:	b508      	push	{r3, lr}
 80875ae:	4b02      	ldr	r3, [pc, #8]	; (80875b8 <HAL_RTC_Set_UnixTime+0xc>)
 80875b0:	681b      	ldr	r3, [r3, #0]
 80875b2:	6a1b      	ldr	r3, [r3, #32]
 80875b4:	9301      	str	r3, [sp, #4]
 80875b6:	bd08      	pop	{r3, pc}
 80875b8:	0804019c 	.word	0x0804019c

080875bc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80875bc:	b508      	push	{r3, lr}
 80875be:	4b02      	ldr	r3, [pc, #8]	; (80875c8 <HAL_EEPROM_Init+0xc>)
 80875c0:	681b      	ldr	r3, [r3, #0]
 80875c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80875c4:	9301      	str	r3, [sp, #4]
 80875c6:	bd08      	pop	{r3, pc}
 80875c8:	0804019c 	.word	0x0804019c

080875cc <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80875cc:	b508      	push	{r3, lr}
 80875ce:	4b02      	ldr	r3, [pc, #8]	; (80875d8 <HAL_EEPROM_Get+0xc>)
 80875d0:	681b      	ldr	r3, [r3, #0]
 80875d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80875d4:	9301      	str	r3, [sp, #4]
 80875d6:	bd08      	pop	{r3, pc}
 80875d8:	0804019c 	.word	0x0804019c

080875dc <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80875dc:	b508      	push	{r3, lr}
 80875de:	4b02      	ldr	r3, [pc, #8]	; (80875e8 <HAL_EEPROM_Put+0xc>)
 80875e0:	681b      	ldr	r3, [r3, #0]
 80875e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80875e4:	9301      	str	r3, [sp, #4]
 80875e6:	bd08      	pop	{r3, pc}
 80875e8:	0804019c 	.word	0x0804019c

080875ec <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80875ec:	b508      	push	{r3, lr}
 80875ee:	4b02      	ldr	r3, [pc, #8]	; (80875f8 <HAL_RTC_Time_Is_Valid+0xc>)
 80875f0:	681b      	ldr	r3, [r3, #0]
 80875f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80875f4:	9301      	str	r3, [sp, #4]
 80875f6:	bd08      	pop	{r3, pc}
 80875f8:	0804019c 	.word	0x0804019c

080875fc <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80875fc:	b508      	push	{r3, lr}
 80875fe:	4b02      	ldr	r3, [pc, #8]	; (8087608 <HAL_Core_System_Reset_Ex+0xc>)
 8087600:	681b      	ldr	r3, [r3, #0]
 8087602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8087604:	9301      	str	r3, [sp, #4]
 8087606:	bd08      	pop	{r3, pc}
 8087608:	080401b8 	.word	0x080401b8

0808760c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808760c:	b508      	push	{r3, lr}
 808760e:	4b02      	ldr	r3, [pc, #8]	; (8087618 <os_mutex_create+0xc>)
 8087610:	681b      	ldr	r3, [r3, #0]
 8087612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087614:	9301      	str	r3, [sp, #4]
 8087616:	bd08      	pop	{r3, pc}
 8087618:	080401d0 	.word	0x080401d0

0808761c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 808761c:	b508      	push	{r3, lr}
 808761e:	4b02      	ldr	r3, [pc, #8]	; (8087628 <HAL_USART_Init+0xc>)
 8087620:	681b      	ldr	r3, [r3, #0]
 8087622:	699b      	ldr	r3, [r3, #24]
 8087624:	9301      	str	r3, [sp, #4]
 8087626:	bd08      	pop	{r3, pc}
 8087628:	080401c4 	.word	0x080401c4

0808762c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 808762c:	b508      	push	{r3, lr}
 808762e:	4b02      	ldr	r3, [pc, #8]	; (8087638 <HAL_USART_Write_Data+0xc>)
 8087630:	681b      	ldr	r3, [r3, #0]
 8087632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087634:	9301      	str	r3, [sp, #4]
 8087636:	bd08      	pop	{r3, pc}
 8087638:	080401c4 	.word	0x080401c4

0808763c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 808763c:	b508      	push	{r3, lr}
 808763e:	4b02      	ldr	r3, [pc, #8]	; (8087648 <HAL_USART_Available_Data+0xc>)
 8087640:	681b      	ldr	r3, [r3, #0]
 8087642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087644:	9301      	str	r3, [sp, #4]
 8087646:	bd08      	pop	{r3, pc}
 8087648:	080401c4 	.word	0x080401c4

0808764c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 808764c:	b508      	push	{r3, lr}
 808764e:	4b02      	ldr	r3, [pc, #8]	; (8087658 <HAL_USART_Read_Data+0xc>)
 8087650:	681b      	ldr	r3, [r3, #0]
 8087652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087654:	9301      	str	r3, [sp, #4]
 8087656:	bd08      	pop	{r3, pc}
 8087658:	080401c4 	.word	0x080401c4

0808765c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 808765c:	b508      	push	{r3, lr}
 808765e:	4b02      	ldr	r3, [pc, #8]	; (8087668 <HAL_USART_Peek_Data+0xc>)
 8087660:	681b      	ldr	r3, [r3, #0]
 8087662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087664:	9301      	str	r3, [sp, #4]
 8087666:	bd08      	pop	{r3, pc}
 8087668:	080401c4 	.word	0x080401c4

0808766c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 808766c:	b508      	push	{r3, lr}
 808766e:	4b02      	ldr	r3, [pc, #8]	; (8087678 <HAL_USART_Flush_Data+0xc>)
 8087670:	681b      	ldr	r3, [r3, #0]
 8087672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087674:	9301      	str	r3, [sp, #4]
 8087676:	bd08      	pop	{r3, pc}
 8087678:	080401c4 	.word	0x080401c4

0808767c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 808767c:	b508      	push	{r3, lr}
 808767e:	4b02      	ldr	r3, [pc, #8]	; (8087688 <HAL_USART_Is_Enabled+0xc>)
 8087680:	681b      	ldr	r3, [r3, #0]
 8087682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087684:	9301      	str	r3, [sp, #4]
 8087686:	bd08      	pop	{r3, pc}
 8087688:	080401c4 	.word	0x080401c4

0808768c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 808768c:	b508      	push	{r3, lr}
 808768e:	4b02      	ldr	r3, [pc, #8]	; (8087698 <HAL_USART_Available_Data_For_Write+0xc>)
 8087690:	681b      	ldr	r3, [r3, #0]
 8087692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8087694:	9301      	str	r3, [sp, #4]
 8087696:	bd08      	pop	{r3, pc}
 8087698:	080401c4 	.word	0x080401c4

0808769c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 808769c:	b508      	push	{r3, lr}
 808769e:	4b02      	ldr	r3, [pc, #8]	; (80876a8 <HAL_USART_BeginConfig+0xc>)
 80876a0:	681b      	ldr	r3, [r3, #0]
 80876a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80876a4:	9301      	str	r3, [sp, #4]
 80876a6:	bd08      	pop	{r3, pc}
 80876a8:	080401c4 	.word	0x080401c4

080876ac <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80876ac:	b508      	push	{r3, lr}
 80876ae:	4b02      	ldr	r3, [pc, #8]	; (80876b8 <HAL_I2C_Begin+0xc>)
 80876b0:	681b      	ldr	r3, [r3, #0]
 80876b2:	68db      	ldr	r3, [r3, #12]
 80876b4:	9301      	str	r3, [sp, #4]
 80876b6:	bd08      	pop	{r3, pc}
 80876b8:	080401ac 	.word	0x080401ac

080876bc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80876bc:	b508      	push	{r3, lr}
 80876be:	4b02      	ldr	r3, [pc, #8]	; (80876c8 <HAL_I2C_Request_Data+0xc>)
 80876c0:	681b      	ldr	r3, [r3, #0]
 80876c2:	695b      	ldr	r3, [r3, #20]
 80876c4:	9301      	str	r3, [sp, #4]
 80876c6:	bd08      	pop	{r3, pc}
 80876c8:	080401ac 	.word	0x080401ac

080876cc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80876cc:	b508      	push	{r3, lr}
 80876ce:	4b02      	ldr	r3, [pc, #8]	; (80876d8 <HAL_I2C_Begin_Transmission+0xc>)
 80876d0:	681b      	ldr	r3, [r3, #0]
 80876d2:	699b      	ldr	r3, [r3, #24]
 80876d4:	9301      	str	r3, [sp, #4]
 80876d6:	bd08      	pop	{r3, pc}
 80876d8:	080401ac 	.word	0x080401ac

080876dc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80876dc:	b508      	push	{r3, lr}
 80876de:	4b02      	ldr	r3, [pc, #8]	; (80876e8 <HAL_I2C_End_Transmission+0xc>)
 80876e0:	681b      	ldr	r3, [r3, #0]
 80876e2:	69db      	ldr	r3, [r3, #28]
 80876e4:	9301      	str	r3, [sp, #4]
 80876e6:	bd08      	pop	{r3, pc}
 80876e8:	080401ac 	.word	0x080401ac

080876ec <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80876ec:	b508      	push	{r3, lr}
 80876ee:	4b02      	ldr	r3, [pc, #8]	; (80876f8 <HAL_I2C_Write_Data+0xc>)
 80876f0:	681b      	ldr	r3, [r3, #0]
 80876f2:	6a1b      	ldr	r3, [r3, #32]
 80876f4:	9301      	str	r3, [sp, #4]
 80876f6:	bd08      	pop	{r3, pc}
 80876f8:	080401ac 	.word	0x080401ac

080876fc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80876fc:	b508      	push	{r3, lr}
 80876fe:	4b02      	ldr	r3, [pc, #8]	; (8087708 <HAL_I2C_Available_Data+0xc>)
 8087700:	681b      	ldr	r3, [r3, #0]
 8087702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087704:	9301      	str	r3, [sp, #4]
 8087706:	bd08      	pop	{r3, pc}
 8087708:	080401ac 	.word	0x080401ac

0808770c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 808770c:	b508      	push	{r3, lr}
 808770e:	4b02      	ldr	r3, [pc, #8]	; (8087718 <HAL_I2C_Read_Data+0xc>)
 8087710:	681b      	ldr	r3, [r3, #0]
 8087712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087714:	9301      	str	r3, [sp, #4]
 8087716:	bd08      	pop	{r3, pc}
 8087718:	080401ac 	.word	0x080401ac

0808771c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 808771c:	b508      	push	{r3, lr}
 808771e:	4b02      	ldr	r3, [pc, #8]	; (8087728 <HAL_I2C_Peek_Data+0xc>)
 8087720:	681b      	ldr	r3, [r3, #0]
 8087722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087724:	9301      	str	r3, [sp, #4]
 8087726:	bd08      	pop	{r3, pc}
 8087728:	080401ac 	.word	0x080401ac

0808772c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 808772c:	b508      	push	{r3, lr}
 808772e:	4b02      	ldr	r3, [pc, #8]	; (8087738 <HAL_I2C_Flush_Data+0xc>)
 8087730:	681b      	ldr	r3, [r3, #0]
 8087732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087734:	9301      	str	r3, [sp, #4]
 8087736:	bd08      	pop	{r3, pc}
 8087738:	080401ac 	.word	0x080401ac

0808773c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 808773c:	b508      	push	{r3, lr}
 808773e:	4b02      	ldr	r3, [pc, #8]	; (8087748 <HAL_I2C_Is_Enabled+0xc>)
 8087740:	681b      	ldr	r3, [r3, #0]
 8087742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087744:	9301      	str	r3, [sp, #4]
 8087746:	bd08      	pop	{r3, pc}
 8087748:	080401ac 	.word	0x080401ac

0808774c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 808774c:	b508      	push	{r3, lr}
 808774e:	4b02      	ldr	r3, [pc, #8]	; (8087758 <HAL_I2C_Init+0xc>)
 8087750:	681b      	ldr	r3, [r3, #0]
 8087752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8087754:	9301      	str	r3, [sp, #4]
 8087756:	bd08      	pop	{r3, pc}
 8087758:	080401ac 	.word	0x080401ac

0808775c <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 808775c:	b508      	push	{r3, lr}
 808775e:	4b02      	ldr	r3, [pc, #8]	; (8087768 <HAL_I2C_Acquire+0xc>)
 8087760:	681b      	ldr	r3, [r3, #0]
 8087762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087764:	9301      	str	r3, [sp, #4]
 8087766:	bd08      	pop	{r3, pc}
 8087768:	080401ac 	.word	0x080401ac

0808776c <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 808776c:	b508      	push	{r3, lr}
 808776e:	4b02      	ldr	r3, [pc, #8]	; (8087778 <HAL_I2C_Release+0xc>)
 8087770:	681b      	ldr	r3, [r3, #0]
 8087772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8087774:	9301      	str	r3, [sp, #4]
 8087776:	bd08      	pop	{r3, pc}
 8087778:	080401ac 	.word	0x080401ac

0808777c <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808777c:	b508      	push	{r3, lr}
 808777e:	4b02      	ldr	r3, [pc, #8]	; (8087788 <inet_gethostbyname+0xc>)
 8087780:	681b      	ldr	r3, [r3, #0]
 8087782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8087784:	9301      	str	r3, [sp, #4]
 8087786:	bd08      	pop	{r3, pc}
 8087788:	08060020 	.word	0x08060020

0808778c <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 808778c:	b508      	push	{r3, lr}
 808778e:	4b02      	ldr	r3, [pc, #8]	; (8087798 <cellular_command+0xc>)
 8087790:	681b      	ldr	r3, [r3, #0]
 8087792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087794:	9301      	str	r3, [sp, #4]
 8087796:	bd08      	pop	{r3, pc}
 8087798:	08060020 	.word	0x08060020

0808779c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808779c:	b508      	push	{r3, lr}
 808779e:	4b02      	ldr	r3, [pc, #8]	; (80877a8 <HAL_USB_USART_Init+0xc>)
 80877a0:	681b      	ldr	r3, [r3, #0]
 80877a2:	681b      	ldr	r3, [r3, #0]
 80877a4:	9301      	str	r3, [sp, #4]
 80877a6:	bd08      	pop	{r3, pc}
 80877a8:	0806001c 	.word	0x0806001c

080877ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80877ac:	b508      	push	{r3, lr}
 80877ae:	4b02      	ldr	r3, [pc, #8]	; (80877b8 <HAL_USB_USART_Begin+0xc>)
 80877b0:	681b      	ldr	r3, [r3, #0]
 80877b2:	685b      	ldr	r3, [r3, #4]
 80877b4:	9301      	str	r3, [sp, #4]
 80877b6:	bd08      	pop	{r3, pc}
 80877b8:	0806001c 	.word	0x0806001c

080877bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80877bc:	b508      	push	{r3, lr}
 80877be:	4b02      	ldr	r3, [pc, #8]	; (80877c8 <HAL_USB_USART_Available_Data+0xc>)
 80877c0:	681b      	ldr	r3, [r3, #0]
 80877c2:	691b      	ldr	r3, [r3, #16]
 80877c4:	9301      	str	r3, [sp, #4]
 80877c6:	bd08      	pop	{r3, pc}
 80877c8:	0806001c 	.word	0x0806001c

080877cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80877cc:	b508      	push	{r3, lr}
 80877ce:	4b02      	ldr	r3, [pc, #8]	; (80877d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80877d0:	681b      	ldr	r3, [r3, #0]
 80877d2:	695b      	ldr	r3, [r3, #20]
 80877d4:	9301      	str	r3, [sp, #4]
 80877d6:	bd08      	pop	{r3, pc}
 80877d8:	0806001c 	.word	0x0806001c

080877dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80877dc:	b508      	push	{r3, lr}
 80877de:	4b02      	ldr	r3, [pc, #8]	; (80877e8 <HAL_USB_USART_Receive_Data+0xc>)
 80877e0:	681b      	ldr	r3, [r3, #0]
 80877e2:	699b      	ldr	r3, [r3, #24]
 80877e4:	9301      	str	r3, [sp, #4]
 80877e6:	bd08      	pop	{r3, pc}
 80877e8:	0806001c 	.word	0x0806001c

080877ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80877ec:	b508      	push	{r3, lr}
 80877ee:	4b02      	ldr	r3, [pc, #8]	; (80877f8 <HAL_USB_USART_Send_Data+0xc>)
 80877f0:	681b      	ldr	r3, [r3, #0]
 80877f2:	69db      	ldr	r3, [r3, #28]
 80877f4:	9301      	str	r3, [sp, #4]
 80877f6:	bd08      	pop	{r3, pc}
 80877f8:	0806001c 	.word	0x0806001c

080877fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80877fc:	b508      	push	{r3, lr}
 80877fe:	4b02      	ldr	r3, [pc, #8]	; (8087808 <HAL_USB_USART_Flush_Data+0xc>)
 8087800:	681b      	ldr	r3, [r3, #0]
 8087802:	6a1b      	ldr	r3, [r3, #32]
 8087804:	9301      	str	r3, [sp, #4]
 8087806:	bd08      	pop	{r3, pc}
 8087808:	0806001c 	.word	0x0806001c

0808780c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 808780c:	b508      	push	{r3, lr}
 808780e:	4b02      	ldr	r3, [pc, #8]	; (8087818 <log_message_v+0xc>)
 8087810:	681b      	ldr	r3, [r3, #0]
 8087812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8087814:	9301      	str	r3, [sp, #4]
 8087816:	bd08      	pop	{r3, pc}
 8087818:	080201a0 	.word	0x080201a0

0808781c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808781c:	b508      	push	{r3, lr}
 808781e:	4b02      	ldr	r3, [pc, #8]	; (8087828 <system_mode+0xc>)
 8087820:	681b      	ldr	r3, [r3, #0]
 8087822:	681b      	ldr	r3, [r3, #0]
 8087824:	9301      	str	r3, [sp, #4]
 8087826:	bd08      	pop	{r3, pc}
 8087828:	080401a4 	.word	0x080401a4

0808782c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808782c:	b508      	push	{r3, lr}
 808782e:	4b02      	ldr	r3, [pc, #8]	; (8087838 <set_system_mode+0xc>)
 8087830:	681b      	ldr	r3, [r3, #0]
 8087832:	685b      	ldr	r3, [r3, #4]
 8087834:	9301      	str	r3, [sp, #4]
 8087836:	bd08      	pop	{r3, pc}
 8087838:	080401a4 	.word	0x080401a4

0808783c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808783c:	b508      	push	{r3, lr}
 808783e:	4b02      	ldr	r3, [pc, #8]	; (8087848 <system_delay_ms+0xc>)
 8087840:	681b      	ldr	r3, [r3, #0]
 8087842:	695b      	ldr	r3, [r3, #20]
 8087844:	9301      	str	r3, [sp, #4]
 8087846:	bd08      	pop	{r3, pc}
 8087848:	080401a4 	.word	0x080401a4

0808784c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808784c:	b508      	push	{r3, lr}
 808784e:	4b02      	ldr	r3, [pc, #8]	; (8087858 <system_thread_set_state+0xc>)
 8087850:	681b      	ldr	r3, [r3, #0]
 8087852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087854:	9301      	str	r3, [sp, #4]
 8087856:	bd08      	pop	{r3, pc}
 8087858:	080401a4 	.word	0x080401a4

0808785c <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 808785c:	b508      	push	{r3, lr}
 808785e:	4b02      	ldr	r3, [pc, #8]	; (8087868 <system_version_info+0xc>)
 8087860:	681b      	ldr	r3, [r3, #0]
 8087862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087864:	9301      	str	r3, [sp, #4]
 8087866:	bd08      	pop	{r3, pc}
 8087868:	080401a4 	.word	0x080401a4

0808786c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808786c:	b508      	push	{r3, lr}
 808786e:	4b02      	ldr	r3, [pc, #8]	; (8087878 <system_thread_get_state+0xc>)
 8087870:	681b      	ldr	r3, [r3, #0]
 8087872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8087874:	9301      	str	r3, [sp, #4]
 8087876:	bd08      	pop	{r3, pc}
 8087878:	080401a4 	.word	0x080401a4

0808787c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 808787c:	b508      	push	{r3, lr}
 808787e:	4b02      	ldr	r3, [pc, #8]	; (8087888 <system_notify_time_changed+0xc>)
 8087880:	681b      	ldr	r3, [r3, #0]
 8087882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8087884:	9301      	str	r3, [sp, #4]
 8087886:	bd08      	pop	{r3, pc}
 8087888:	080401a4 	.word	0x080401a4

0808788c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808788c:	b508      	push	{r3, lr}
 808788e:	4b03      	ldr	r3, [pc, #12]	; (808789c <system_ctrl_set_app_request_handler+0x10>)
 8087890:	681b      	ldr	r3, [r3, #0]
 8087892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8087896:	9301      	str	r3, [sp, #4]
 8087898:	bd08      	pop	{r3, pc}
 808789a:	0000      	.short	0x0000
 808789c:	080401a4 	.word	0x080401a4

080878a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80878a0:	b508      	push	{r3, lr}
 80878a2:	4b03      	ldr	r3, [pc, #12]	; (80878b0 <system_ctrl_set_result+0x10>)
 80878a4:	681b      	ldr	r3, [r3, #0]
 80878a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80878aa:	9301      	str	r3, [sp, #4]
 80878ac:	bd08      	pop	{r3, pc}
 80878ae:	0000      	.short	0x0000
 80878b0:	080401a4 	.word	0x080401a4

080878b4 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 80878b4:	b508      	push	{r3, lr}
 80878b6:	4b03      	ldr	r3, [pc, #12]	; (80878c4 <system_sleep_pins+0x10>)
 80878b8:	681b      	ldr	r3, [r3, #0]
 80878ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80878be:	9301      	str	r3, [sp, #4]
 80878c0:	bd08      	pop	{r3, pc}
 80878c2:	0000      	.short	0x0000
 80878c4:	080401a4 	.word	0x080401a4

080878c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80878c8:	b508      	push	{r3, lr}
 80878ca:	4b02      	ldr	r3, [pc, #8]	; (80878d4 <network_connect+0xc>)
 80878cc:	681b      	ldr	r3, [r3, #0]
 80878ce:	685b      	ldr	r3, [r3, #4]
 80878d0:	9301      	str	r3, [sp, #4]
 80878d2:	bd08      	pop	{r3, pc}
 80878d4:	080401c8 	.word	0x080401c8

080878d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80878d8:	b508      	push	{r3, lr}
 80878da:	4b02      	ldr	r3, [pc, #8]	; (80878e4 <network_connecting+0xc>)
 80878dc:	681b      	ldr	r3, [r3, #0]
 80878de:	689b      	ldr	r3, [r3, #8]
 80878e0:	9301      	str	r3, [sp, #4]
 80878e2:	bd08      	pop	{r3, pc}
 80878e4:	080401c8 	.word	0x080401c8

080878e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80878e8:	b508      	push	{r3, lr}
 80878ea:	4b02      	ldr	r3, [pc, #8]	; (80878f4 <network_disconnect+0xc>)
 80878ec:	681b      	ldr	r3, [r3, #0]
 80878ee:	68db      	ldr	r3, [r3, #12]
 80878f0:	9301      	str	r3, [sp, #4]
 80878f2:	bd08      	pop	{r3, pc}
 80878f4:	080401c8 	.word	0x080401c8

080878f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80878f8:	b508      	push	{r3, lr}
 80878fa:	4b02      	ldr	r3, [pc, #8]	; (8087904 <network_ready+0xc>)
 80878fc:	681b      	ldr	r3, [r3, #0]
 80878fe:	691b      	ldr	r3, [r3, #16]
 8087900:	9301      	str	r3, [sp, #4]
 8087902:	bd08      	pop	{r3, pc}
 8087904:	080401c8 	.word	0x080401c8

08087908 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8087908:	b508      	push	{r3, lr}
 808790a:	4b02      	ldr	r3, [pc, #8]	; (8087914 <network_on+0xc>)
 808790c:	681b      	ldr	r3, [r3, #0]
 808790e:	695b      	ldr	r3, [r3, #20]
 8087910:	9301      	str	r3, [sp, #4]
 8087912:	bd08      	pop	{r3, pc}
 8087914:	080401c8 	.word	0x080401c8

08087918 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8087918:	b508      	push	{r3, lr}
 808791a:	4b02      	ldr	r3, [pc, #8]	; (8087924 <network_off+0xc>)
 808791c:	681b      	ldr	r3, [r3, #0]
 808791e:	699b      	ldr	r3, [r3, #24]
 8087920:	9301      	str	r3, [sp, #4]
 8087922:	bd08      	pop	{r3, pc}
 8087924:	080401c8 	.word	0x080401c8

08087928 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8087928:	b508      	push	{r3, lr}
 808792a:	4b02      	ldr	r3, [pc, #8]	; (8087934 <network_listen+0xc>)
 808792c:	681b      	ldr	r3, [r3, #0]
 808792e:	69db      	ldr	r3, [r3, #28]
 8087930:	9301      	str	r3, [sp, #4]
 8087932:	bd08      	pop	{r3, pc}
 8087934:	080401c8 	.word	0x080401c8

08087938 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8087938:	b508      	push	{r3, lr}
 808793a:	4b02      	ldr	r3, [pc, #8]	; (8087944 <network_listening+0xc>)
 808793c:	681b      	ldr	r3, [r3, #0]
 808793e:	6a1b      	ldr	r3, [r3, #32]
 8087940:	9301      	str	r3, [sp, #4]
 8087942:	bd08      	pop	{r3, pc}
 8087944:	080401c8 	.word	0x080401c8

08087948 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8087948:	b508      	push	{r3, lr}
 808794a:	4b02      	ldr	r3, [pc, #8]	; (8087954 <network_set_listen_timeout+0xc>)
 808794c:	681b      	ldr	r3, [r3, #0]
 808794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087950:	9301      	str	r3, [sp, #4]
 8087952:	bd08      	pop	{r3, pc}
 8087954:	080401c8 	.word	0x080401c8

08087958 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8087958:	b508      	push	{r3, lr}
 808795a:	4b02      	ldr	r3, [pc, #8]	; (8087964 <network_get_listen_timeout+0xc>)
 808795c:	681b      	ldr	r3, [r3, #0]
 808795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087960:	9301      	str	r3, [sp, #4]
 8087962:	bd08      	pop	{r3, pc}
 8087964:	080401c8 	.word	0x080401c8

08087968 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8087968:	b508      	push	{r3, lr}
 808796a:	4b02      	ldr	r3, [pc, #8]	; (8087974 <spark_function+0xc>)
 808796c:	681b      	ldr	r3, [r3, #0]
 808796e:	685b      	ldr	r3, [r3, #4]
 8087970:	9301      	str	r3, [sp, #4]
 8087972:	bd08      	pop	{r3, pc}
 8087974:	080401cc 	.word	0x080401cc

08087978 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8087978:	b508      	push	{r3, lr}
 808797a:	4b02      	ldr	r3, [pc, #8]	; (8087984 <spark_process+0xc>)
 808797c:	681b      	ldr	r3, [r3, #0]
 808797e:	689b      	ldr	r3, [r3, #8]
 8087980:	9301      	str	r3, [sp, #4]
 8087982:	bd08      	pop	{r3, pc}
 8087984:	080401cc 	.word	0x080401cc

08087988 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8087988:	b508      	push	{r3, lr}
 808798a:	4b02      	ldr	r3, [pc, #8]	; (8087994 <spark_cloud_flag_connect+0xc>)
 808798c:	681b      	ldr	r3, [r3, #0]
 808798e:	68db      	ldr	r3, [r3, #12]
 8087990:	9301      	str	r3, [sp, #4]
 8087992:	bd08      	pop	{r3, pc}
 8087994:	080401cc 	.word	0x080401cc

08087998 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8087998:	b508      	push	{r3, lr}
 808799a:	4b02      	ldr	r3, [pc, #8]	; (80879a4 <spark_cloud_flag_connected+0xc>)
 808799c:	681b      	ldr	r3, [r3, #0]
 808799e:	695b      	ldr	r3, [r3, #20]
 80879a0:	9301      	str	r3, [sp, #4]
 80879a2:	bd08      	pop	{r3, pc}
 80879a4:	080401cc 	.word	0x080401cc

080879a8 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80879a8:	b508      	push	{r3, lr}
 80879aa:	4b02      	ldr	r3, [pc, #8]	; (80879b4 <spark_sync_time_pending+0xc>)
 80879ac:	681b      	ldr	r3, [r3, #0]
 80879ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80879b0:	9301      	str	r3, [sp, #4]
 80879b2:	bd08      	pop	{r3, pc}
 80879b4:	080401cc 	.word	0x080401cc

080879b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80879b8:	b508      	push	{r3, lr}
 80879ba:	4b02      	ldr	r3, [pc, #8]	; (80879c4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80879bc:	681b      	ldr	r3, [r3, #0]
 80879be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80879c0:	9301      	str	r3, [sp, #4]
 80879c2:	bd08      	pop	{r3, pc}
 80879c4:	080401cc 	.word	0x080401cc

080879c8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80879c8:	b508      	push	{r3, lr}
 80879ca:	4b02      	ldr	r3, [pc, #8]	; (80879d4 <malloc+0xc>)
 80879cc:	681b      	ldr	r3, [r3, #0]
 80879ce:	681b      	ldr	r3, [r3, #0]
 80879d0:	9301      	str	r3, [sp, #4]
 80879d2:	bd08      	pop	{r3, pc}
 80879d4:	080401a0 	.word	0x080401a0

080879d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80879d8:	b508      	push	{r3, lr}
 80879da:	4b02      	ldr	r3, [pc, #8]	; (80879e4 <free+0xc>)
 80879dc:	681b      	ldr	r3, [r3, #0]
 80879de:	685b      	ldr	r3, [r3, #4]
 80879e0:	9301      	str	r3, [sp, #4]
 80879e2:	bd08      	pop	{r3, pc}
 80879e4:	080401a0 	.word	0x080401a0

080879e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80879e8:	b508      	push	{r3, lr}
 80879ea:	4b02      	ldr	r3, [pc, #8]	; (80879f4 <realloc+0xc>)
 80879ec:	681b      	ldr	r3, [r3, #0]
 80879ee:	689b      	ldr	r3, [r3, #8]
 80879f0:	9301      	str	r3, [sp, #4]
 80879f2:	bd08      	pop	{r3, pc}
 80879f4:	080401a0 	.word	0x080401a0

080879f8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80879f8:	b508      	push	{r3, lr}
 80879fa:	4b02      	ldr	r3, [pc, #8]	; (8087a04 <sprintf+0xc>)
 80879fc:	681b      	ldr	r3, [r3, #0]
 80879fe:	68db      	ldr	r3, [r3, #12]
 8087a00:	9301      	str	r3, [sp, #4]
 8087a02:	bd08      	pop	{r3, pc}
 8087a04:	080401a0 	.word	0x080401a0

08087a08 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8087a08:	b508      	push	{r3, lr}
 8087a0a:	4b02      	ldr	r3, [pc, #8]	; (8087a14 <siprintf+0xc>)
 8087a0c:	681b      	ldr	r3, [r3, #0]
 8087a0e:	691b      	ldr	r3, [r3, #16]
 8087a10:	9301      	str	r3, [sp, #4]
 8087a12:	bd08      	pop	{r3, pc}
 8087a14:	080401a0 	.word	0x080401a0

08087a18 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8087a18:	b508      	push	{r3, lr}
 8087a1a:	4b02      	ldr	r3, [pc, #8]	; (8087a24 <siscanf+0xc>)
 8087a1c:	681b      	ldr	r3, [r3, #0]
 8087a1e:	699b      	ldr	r3, [r3, #24]
 8087a20:	9301      	str	r3, [sp, #4]
 8087a22:	bd08      	pop	{r3, pc}
 8087a24:	080401a0 	.word	0x080401a0

08087a28 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8087a28:	b508      	push	{r3, lr}
 8087a2a:	4b02      	ldr	r3, [pc, #8]	; (8087a34 <snprintf+0xc>)
 8087a2c:	681b      	ldr	r3, [r3, #0]
 8087a2e:	69db      	ldr	r3, [r3, #28]
 8087a30:	9301      	str	r3, [sp, #4]
 8087a32:	bd08      	pop	{r3, pc}
 8087a34:	080401a0 	.word	0x080401a0

08087a38 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 8087a38:	b508      	push	{r3, lr}
 8087a3a:	4b02      	ldr	r3, [pc, #8]	; (8087a44 <sniprintf+0xc>)
 8087a3c:	681b      	ldr	r3, [r3, #0]
 8087a3e:	6a1b      	ldr	r3, [r3, #32]
 8087a40:	9301      	str	r3, [sp, #4]
 8087a42:	bd08      	pop	{r3, pc}
 8087a44:	080401a0 	.word	0x080401a0

08087a48 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8087a48:	b508      	push	{r3, lr}
 8087a4a:	4b02      	ldr	r3, [pc, #8]	; (8087a54 <vsnprintf+0xc>)
 8087a4c:	681b      	ldr	r3, [r3, #0]
 8087a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087a50:	9301      	str	r3, [sp, #4]
 8087a52:	bd08      	pop	{r3, pc}
 8087a54:	080401a0 	.word	0x080401a0

08087a58 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8087a58:	b508      	push	{r3, lr}
 8087a5a:	4b02      	ldr	r3, [pc, #8]	; (8087a64 <_malloc_r+0xc>)
 8087a5c:	681b      	ldr	r3, [r3, #0]
 8087a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087a60:	9301      	str	r3, [sp, #4]
 8087a62:	bd08      	pop	{r3, pc}
 8087a64:	080401a0 	.word	0x080401a0

08087a68 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 8087a68:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087a6a:	f001 fd75 	bl	8089558 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 8087a6e:	f001 fc07 	bl	8089280 <_ZN7TwoWire9isEnabledEv>
 8087a72:	b918      	cbnz	r0, 8087a7c <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087a74:	f001 fd70 	bl	8089558 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 8087a78:	f001 fbd8 	bl	808922c <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087a7c:	f001 fd6c 	bl	8089558 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 8087a80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 8087a84:	f001 bbfc 	b.w	8089280 <_ZN7TwoWire9isEnabledEv>

08087a88 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8087a88:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087a8a:	f001 fd65 	bl	8089558 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 8087a8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 8087a92:	f001 bbf9 	b.w	8089288 <_ZN7TwoWire4lockEv>

08087a96 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 8087a96:	b510      	push	{r4, lr}
 8087a98:	4604      	mov	r4, r0
    lock_(_lock)
 8087a9a:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 8087a9c:	b109      	cbz	r1, 8087aa2 <_ZN4PMICC1Eb+0xc>
        lock();
 8087a9e:	f7ff fff3 	bl	8087a88 <_ZN4PMIC4lockEv>
    }
}
 8087aa2:	4620      	mov	r0, r4
 8087aa4:	bd10      	pop	{r4, pc}

08087aa6 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8087aa6:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087aa8:	f001 fd56 	bl	8089558 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8087aac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8087ab0:	f001 bbf3 	b.w	808929a <_ZN7TwoWire6unlockEv>

08087ab4 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8087ab4:	b510      	push	{r4, lr}
{
    if (lock_) {
 8087ab6:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8087ab8:	4604      	mov	r4, r0
{
    if (lock_) {
 8087aba:	b10b      	cbz	r3, 8087ac0 <_ZN4PMICD1Ev+0xc>
        unlock();
 8087abc:	f7ff fff3 	bl	8087aa6 <_ZN4PMIC6unlockEv>
    }
}
 8087ac0:	4620      	mov	r0, r4
 8087ac2:	bd10      	pop	{r4, pc}

08087ac4 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8087ac4:	b510      	push	{r4, lr}
 8087ac6:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8087ac8:	6800      	ldr	r0, [r0, #0]
 8087aca:	f7ff ffec 	bl	8087aa6 <_ZN4PMIC6unlockEv>
 8087ace:	4620      	mov	r0, r4
 8087ad0:	bd10      	pop	{r4, pc}

08087ad2 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 8087ad2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087ad4:	ac02      	add	r4, sp, #8
 8087ad6:	460d      	mov	r5, r1
 8087ad8:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8087adc:	f7ff ffd4 	bl	8087a88 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087ae0:	f001 fd3a 	bl	8089558 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8087ae4:	216b      	movs	r1, #107	; 0x6b
 8087ae6:	f001 fbc1 	bl	808926c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087aea:	f001 fd35 	bl	8089558 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 8087aee:	6803      	ldr	r3, [r0, #0]
 8087af0:	4629      	mov	r1, r5
 8087af2:	689b      	ldr	r3, [r3, #8]
 8087af4:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087af6:	f001 fd2f 	bl	8089558 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8087afa:	2101      	movs	r1, #1
 8087afc:	f001 fbb9 	bl	8089272 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087b00:	f001 fd2a 	bl	8089558 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8087b04:	2301      	movs	r3, #1
 8087b06:	461a      	mov	r2, r3
 8087b08:	216b      	movs	r1, #107	; 0x6b
 8087b0a:	f001 fba6 	bl	808925a <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087b0e:	f001 fd23 	bl	8089558 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 8087b12:	6803      	ldr	r3, [r0, #0]
 8087b14:	695b      	ldr	r3, [r3, #20]
 8087b16:	4798      	blx	r3
 8087b18:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8087b1a:	4620      	mov	r0, r4
 8087b1c:	f7ff ffd2 	bl	8087ac4 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8087b20:	b2e8      	uxtb	r0, r5
 8087b22:	b003      	add	sp, #12
 8087b24:	bd30      	pop	{r4, r5, pc}

08087b26 <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
 8087b26:	2100      	movs	r1, #0
 8087b28:	f7ff bfd3 	b.w	8087ad2 <_ZN4PMIC12readRegisterEh>

08087b2c <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
 8087b2c:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
 8087b2e:	f7ff fffa 	bl	8087b26 <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x07;
    return mapping[raw];
}
 8087b32:	4b03      	ldr	r3, [pc, #12]	; (8087b40 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x07;
    return mapping[raw];
 8087b34:	f000 0007 	and.w	r0, r0, #7
}
 8087b38:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8087b3c:	bd08      	pop	{r3, pc}
 8087b3e:	bf00      	nop
 8087b40:	080905a4 	.word	0x080905a4

08087b44 <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8087b44:	2102      	movs	r1, #2
 8087b46:	f7ff bfc4 	b.w	8087ad2 <_ZN4PMIC12readRegisterEh>

08087b4a <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8087b4a:	2108      	movs	r1, #8
 8087b4c:	f7ff bfc1 	b.w	8087ad2 <_ZN4PMIC12readRegisterEh>

08087b50 <_ZN4PMIC8getFaultEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getFault() {

    byte DATA = 0;
    DATA = readRegister(FAULT_REGISTER);
 8087b50:	2109      	movs	r1, #9
 8087b52:	f7ff bfbe 	b.w	8087ad2 <_ZN4PMIC12readRegisterEh>

08087b56 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8087b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087b58:	ac02      	add	r4, sp, #8
 8087b5a:	4615      	mov	r5, r2
 8087b5c:	460e      	mov	r6, r1
 8087b5e:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8087b62:	f7ff ff91 	bl	8087a88 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087b66:	f001 fcf7 	bl	8089558 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8087b6a:	216b      	movs	r1, #107	; 0x6b
 8087b6c:	f001 fb7e 	bl	808926c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087b70:	f001 fcf2 	bl	8089558 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 8087b74:	6803      	ldr	r3, [r0, #0]
 8087b76:	4631      	mov	r1, r6
 8087b78:	689b      	ldr	r3, [r3, #8]
 8087b7a:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087b7c:	f001 fcec 	bl	8089558 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 8087b80:	6803      	ldr	r3, [r0, #0]
 8087b82:	4629      	mov	r1, r5
 8087b84:	689b      	ldr	r3, [r3, #8]
 8087b86:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087b88:	f001 fce6 	bl	8089558 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 8087b8c:	2101      	movs	r1, #1
 8087b8e:	f001 fb70 	bl	8089272 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 8087b92:	4620      	mov	r0, r4
 8087b94:	f7ff ff96 	bl	8087ac4 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 8087b98:	b002      	add	sp, #8
 8087b9a:	bd70      	pop	{r4, r5, r6, pc}

08087b9c <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 8087b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087b9e:	4604      	mov	r4, r0
 8087ba0:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087ba2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087ba4:	f7ff ff70 	bl	8087a88 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8087ba8:	2100      	movs	r1, #0
 8087baa:	4620      	mov	r0, r4
 8087bac:	f7ff ff91 	bl	8087ad2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 8087bb0:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 8087bb4:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 8087bb8:	d023      	beq.n	8087c02 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 8087bba:	d807      	bhi.n	8087bcc <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 8087bbc:	2d96      	cmp	r5, #150	; 0x96
 8087bbe:	d01a      	beq.n	8087bf6 <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 8087bc0:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8087bc4:	d01a      	beq.n	8087bfc <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 8087bc6:	2d64      	cmp	r5, #100	; 0x64
 8087bc8:	d129      	bne.n	8087c1e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 8087bca:	e022      	b.n	8087c12 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8087bcc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8087bd0:	429d      	cmp	r5, r3
 8087bd2:	d019      	beq.n	8087c08 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 8087bd4:	d805      	bhi.n	8087be2 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 8087bd6:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8087bda:	d120      	bne.n	8087c1e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 8087bdc:	f042 0204 	orr.w	r2, r2, #4
 8087be0:	e017      	b.n	8087c12 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 8087be2:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8087be6:	d012      	beq.n	8087c0e <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 8087be8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8087bec:	429d      	cmp	r5, r3
 8087bee:	d116      	bne.n	8087c1e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8087bf0:	f042 0207 	orr.w	r2, r2, #7
 8087bf4:	e00d      	b.n	8087c12 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 8087bf6:	f042 0201 	orr.w	r2, r2, #1
 8087bfa:	e00a      	b.n	8087c12 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 8087bfc:	f042 0202 	orr.w	r2, r2, #2
 8087c00:	e007      	b.n	8087c12 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8087c02:	f042 0203 	orr.w	r2, r2, #3
 8087c06:	e004      	b.n	8087c12 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 8087c08:	f042 0205 	orr.w	r2, r2, #5
 8087c0c:	e001      	b.n	8087c12 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8087c0e:	f042 0206 	orr.w	r2, r2, #6
 8087c12:	4620      	mov	r0, r4
 8087c14:	2100      	movs	r1, #0
 8087c16:	f7ff ff9e 	bl	8087b56 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8087c1a:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 8087c1c:	e000      	b.n	8087c20 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8087c1e:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 8087c20:	a801      	add	r0, sp, #4
 8087c22:	f7ff ff4f 	bl	8087ac4 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8087c26:	4620      	mov	r0, r4
 8087c28:	b003      	add	sp, #12
 8087c2a:	bd30      	pop	{r4, r5, pc}

08087c2c <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 8087c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087c2e:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087c30:	ac02      	add	r4, sp, #8
 8087c32:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8087c36:	f7ff ff27 	bl	8087a88 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 8087c3a:	2101      	movs	r1, #1
 8087c3c:	4628      	mov	r0, r5
 8087c3e:	f7ff ff48 	bl	8087ad2 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 8087c42:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 8087c46:	f042 0210 	orr.w	r2, r2, #16
 8087c4a:	2101      	movs	r1, #1
 8087c4c:	4628      	mov	r0, r5
 8087c4e:	f7ff ff82 	bl	8087b56 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 8087c52:	4620      	mov	r0, r4
 8087c54:	f7ff ff36 	bl	8087ac4 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 8087c58:	2001      	movs	r0, #1
 8087c5a:	b003      	add	sp, #12
 8087c5c:	bd30      	pop	{r4, r5, pc}

08087c5e <_ZN4PMIC14enableChargingEv>:
 8087c5e:	f7ff bfe5 	b.w	8087c2c <_ZN4PMIC10disableOTGEv>

08087c62 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8087c62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8087c64:	460c      	mov	r4, r1
 8087c66:	4617      	mov	r7, r2
 8087c68:	4605      	mov	r5, r0
 8087c6a:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087c6c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087c6e:	f7ff ff0b 	bl	8087a88 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8087c72:	2c00      	cmp	r4, #0
 8087c74:	bf0c      	ite	eq
 8087c76:	2400      	moveq	r4, #0
 8087c78:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8087c7a:	b117      	cbz	r7, 8087c82 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8087c7c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8087c80:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8087c82:	b10e      	cbz	r6, 8087c88 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8087c84:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8087c88:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8087c8c:	b10b      	cbz	r3, 8087c92 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8087c8e:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8087c92:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8087c96:	b10b      	cbz	r3, 8087c9c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8087c98:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8087c9c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8087ca0:	b10b      	cbz	r3, 8087ca6 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8087ca2:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8087ca6:	2102      	movs	r1, #2
 8087ca8:	4628      	mov	r0, r5
 8087caa:	f7ff ff12 	bl	8087ad2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8087cae:	f000 0201 	and.w	r2, r0, #1
 8087cb2:	4322      	orrs	r2, r4
 8087cb4:	2102      	movs	r1, #2
 8087cb6:	4628      	mov	r0, r5
 8087cb8:	f7ff ff4d 	bl	8087b56 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8087cbc:	a801      	add	r0, sp, #4
 8087cbe:	f7ff ff01 	bl	8087ac4 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8087cc2:	2001      	movs	r0, #1
 8087cc4:	b003      	add	sp, #12
 8087cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087cc8 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8087cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087cca:	4604      	mov	r4, r0
 8087ccc:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087cce:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087cd0:	f7ff feda 	bl	8087a88 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8087cd4:	2104      	movs	r1, #4
 8087cd6:	4620      	mov	r0, r4
 8087cd8:	f7ff fefb 	bl	8087ad2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 8087cdc:	f241 0310 	movw	r3, #4112	; 0x1010
 8087ce0:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 8087ce2:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 8087ce6:	d006      	beq.n	8087cf6 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8087ce8:	f241 0370 	movw	r3, #4208	; 0x1070
 8087cec:	429d      	cmp	r5, r3
 8087cee:	d10a      	bne.n	8087d06 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8087cf0:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8087cf4:	e001      	b.n	8087cfa <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 8087cf6:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8087cfa:	4620      	mov	r0, r4
 8087cfc:	2104      	movs	r1, #4
 8087cfe:	f7ff ff2a 	bl	8087b56 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8087d02:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 8087d04:	e000      	b.n	8087d08 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 8087d06:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8087d08:	a801      	add	r0, sp, #4
 8087d0a:	f7ff fedb 	bl	8087ac4 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8087d0e:	4620      	mov	r0, r4
 8087d10:	b003      	add	sp, #12
 8087d12:	bd30      	pop	{r4, r5, pc}

08087d14 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8087d14:	4770      	bx	lr

08087d16 <_ZN8SPIClassD0Ev>:
 8087d16:	b510      	push	{r4, lr}
 8087d18:	4604      	mov	r4, r0
 8087d1a:	2110      	movs	r1, #16
 8087d1c:	f001 fc41 	bl	80895a2 <_ZdlPvj>
 8087d20:	4620      	mov	r0, r4
 8087d22:	bd10      	pop	{r4, pc}

08087d24 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8087d24:	b570      	push	{r4, r5, r6, lr}
 8087d26:	4604      	mov	r4, r0
 8087d28:	460e      	mov	r6, r1
 8087d2a:	4b07      	ldr	r3, [pc, #28]	; (8087d48 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8087d2c:	2500      	movs	r5, #0
 8087d2e:	6003      	str	r3, [r0, #0]
 8087d30:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8087d34:	f7ff fc6a 	bl	808760c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8087d38:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8087d3a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8087d3c:	f7ff fbee 	bl	808751c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8087d40:	60a5      	str	r5, [r4, #8]
}
 8087d42:	4620      	mov	r0, r4
 8087d44:	bd70      	pop	{r4, r5, r6, pc}
 8087d46:	bf00      	nop
 8087d48:	080905bc 	.word	0x080905bc

08087d4c <_ZN8SPIClass5beginEt>:
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 8087d4c:	292e      	cmp	r1, #46	; 0x2e
 8087d4e:	d802      	bhi.n	8087d56 <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 8087d50:	7900      	ldrb	r0, [r0, #4]
 8087d52:	f7ff bbbb 	b.w	80874cc <HAL_SPI_Begin>
 8087d56:	4770      	bx	lr

08087d58 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 8087d58:	7900      	ldrb	r0, [r0, #4]
 8087d5a:	f7ff bbbf 	b.w	80874dc <HAL_SPI_Set_Bit_Order>

08087d5e <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 8087d5e:	7900      	ldrb	r0, [r0, #4]
 8087d60:	f7ff bbc4 	b.w	80874ec <HAL_SPI_Set_Data_Mode>

08087d64 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8087d64:	4a05      	ldr	r2, [pc, #20]	; (8087d7c <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 8087d66:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8087d68:	5c99      	ldrb	r1, [r3, r2]
 8087d6a:	4281      	cmp	r1, r0
 8087d6c:	d002      	beq.n	8087d74 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 8087d6e:	3301      	adds	r3, #1
 8087d70:	2b08      	cmp	r3, #8
 8087d72:	d1f9      	bne.n	8087d68 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8087d74:	1c58      	adds	r0, r3, #1
}
 8087d76:	b2c0      	uxtb	r0, r0
 8087d78:	4770      	bx	lr
 8087d7a:	bf00      	nop
 8087d7c:	080905c4 	.word	0x080905c4

08087d80 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8087d80:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8087d82:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8087d84:	6018      	str	r0, [r3, #0]
 8087d86:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8087d88:	6818      	ldr	r0, [r3, #0]
 8087d8a:	b2e5      	uxtb	r5, r4
 8087d8c:	4288      	cmp	r0, r1
 8087d8e:	d906      	bls.n	8087d9e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8087d90:	3401      	adds	r4, #1
 8087d92:	2c08      	cmp	r4, #8
 8087d94:	d002      	beq.n	8087d9c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 8087d96:	0840      	lsrs	r0, r0, #1
 8087d98:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 8087d9a:	e7f5      	b.n	8087d88 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8087d9c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8087d9e:	4b02      	ldr	r3, [pc, #8]	; (8087da8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8087da0:	5d5b      	ldrb	r3, [r3, r5]
 8087da2:	7013      	strb	r3, [r2, #0]
 8087da4:	bd30      	pop	{r4, r5, pc}
 8087da6:	bf00      	nop
 8087da8:	080905c4 	.word	0x080905c4

08087dac <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8087dac:	b570      	push	{r4, r5, r6, lr}
 8087dae:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 8087db0:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8087db4:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 8087db6:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 8087db8:	2214      	movs	r2, #20
 8087dba:	2100      	movs	r1, #0
 8087dbc:	a803      	add	r0, sp, #12
 8087dbe:	f003 f8a1 	bl	808af04 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8087dc2:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8087dc4:	a903      	add	r1, sp, #12
 8087dc6:	4630      	mov	r0, r6
 8087dc8:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 8087dca:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 8087dce:	f7ff fbb5 	bl	808753c <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 8087dd2:	ab02      	add	r3, sp, #8
 8087dd4:	f10d 0207 	add.w	r2, sp, #7
 8087dd8:	4629      	mov	r1, r5
 8087dda:	9804      	ldr	r0, [sp, #16]
 8087ddc:	f7ff ffd0 	bl	8087d80 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 8087de0:	7920      	ldrb	r0, [r4, #4]
 8087de2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8087de6:	f7ff fb89 	bl	80874fc <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 8087dea:	9802      	ldr	r0, [sp, #8]
 8087dec:	b008      	add	sp, #32
 8087dee:	bd70      	pop	{r4, r5, r6, pc}

08087df0 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8087df0:	b538      	push	{r3, r4, r5, lr}
 8087df2:	4604      	mov	r4, r0
    if (dividerReference)
 8087df4:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8087df6:	4608      	mov	r0, r1
    if (dividerReference)
 8087df8:	b14d      	cbz	r5, 8087e0e <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 8087dfa:	f7ff ffb3 	bl	8087d64 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8087dfe:	2201      	movs	r2, #1
 8087e00:	fa25 f100 	lsr.w	r1, r5, r0
 8087e04:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 8087e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8087e0a:	f7ff bfcf 	b.w	8087dac <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8087e0e:	7920      	ldrb	r0, [r4, #4]
    }
}
 8087e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8087e14:	f7ff bb72 	b.w	80874fc <HAL_SPI_Set_Clock_Divider>

08087e18 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8087e18:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 8087e1a:	7900      	ldrb	r0, [r0, #4]
 8087e1c:	f7ff fb76 	bl	808750c <HAL_SPI_Send_Receive_Data>
}
 8087e20:	b2c0      	uxtb	r0, r0
 8087e22:	bd08      	pop	{r3, pc}

08087e24 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8087e24:	b530      	push	{r4, r5, lr}
 8087e26:	b087      	sub	sp, #28
 8087e28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8087e2a:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8087e2c:	7900      	ldrb	r0, [r0, #4]
 8087e2e:	9500      	str	r5, [sp, #0]
 8087e30:	f7ff fb8c 	bl	808754c <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 8087e34:	b93d      	cbnz	r5, 8087e46 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8087e36:	a902      	add	r1, sp, #8
 8087e38:	7920      	ldrb	r0, [r4, #4]
 8087e3a:	f7ff fb8f 	bl	808755c <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 8087e3e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8087e42:	07db      	lsls	r3, r3, #31
 8087e44:	d4f7      	bmi.n	8087e36 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 8087e46:	b007      	add	sp, #28
 8087e48:	bd30      	pop	{r4, r5, pc}

08087e4a <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8087e4a:	7900      	ldrb	r0, [r0, #4]
 8087e4c:	f7ff bb6e 	b.w	808752c <HAL_SPI_Is_Enabled>

08087e50 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8087e50:	4601      	mov	r1, r0
 8087e52:	2200      	movs	r2, #0
 8087e54:	208c      	movs	r0, #140	; 0x8c
 8087e56:	f7ff bbd1 	b.w	80875fc <HAL_Core_System_Reset_Ex>

08087e5a <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8087e5a:	2000      	movs	r0, #0
 8087e5c:	f7ff bff8 	b.w	8087e50 <_ZN11SystemClass5resetEm>

08087e60 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8087e60:	b510      	push	{r4, lr}
 8087e62:	2400      	movs	r4, #0
 8087e64:	7004      	strb	r4, [r0, #0]
 8087e66:	8044      	strh	r4, [r0, #2]
 8087e68:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 8087e6c:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8087e6e:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 8087e70:	dd07      	ble.n	8087e82 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
 8087e72:	3901      	subs	r1, #1
 8087e74:	4299      	cmp	r1, r3
 8087e76:	d209      	bcs.n	8087e8c <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
 8087e78:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8087e7c:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 8087e7e:	2301      	movs	r3, #1
 8087e80:	e001      	b.n	8087e86 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
 8087e82:	d102      	bne.n	8087e8a <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 8087e84:	2302      	movs	r3, #2
 8087e86:	7003      	strb	r3, [r0, #0]
 8087e88:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
 8087e8a:	8041      	strh	r1, [r0, #2]
    }
}
 8087e8c:	bd10      	pop	{r4, pc}
	...

08087e90 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8087e90:	b570      	push	{r4, r5, r6, lr}
 8087e92:	460d      	mov	r5, r1
 8087e94:	4616      	mov	r6, r2
 8087e96:	b086      	sub	sp, #24
 8087e98:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8087e9a:	2300      	movs	r3, #0
 8087e9c:	9302      	str	r3, [sp, #8]
 8087e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8087ea0:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8087ea2:	9301      	str	r3, [sp, #4]
 8087ea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8087ea6:	4631      	mov	r1, r6
 8087ea8:	9300      	str	r3, [sp, #0]
 8087eaa:	4628      	mov	r0, r5
 8087eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087eae:	f7ff fd01 	bl	80878b4 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 8087eb2:	4633      	mov	r3, r6
 8087eb4:	462a      	mov	r2, r5
 8087eb6:	4601      	mov	r1, r0
 8087eb8:	a804      	add	r0, sp, #16
 8087eba:	f7ff ffd1 	bl	8087e60 <_ZN11SleepResultC1EiPKtj>
 8087ebe:	4b06      	ldr	r3, [pc, #24]	; (8087ed8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8087ec0:	9804      	ldr	r0, [sp, #16]
 8087ec2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8087ec6:	6018      	str	r0, [r3, #0]
    return System.sleepResult_;
}
 8087ec8:	4620      	mov	r0, r4
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 8087eca:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8087ecc:	681a      	ldr	r2, [r3, #0]
 8087ece:	889b      	ldrh	r3, [r3, #4]
 8087ed0:	6022      	str	r2, [r4, #0]
 8087ed2:	80a3      	strh	r3, [r4, #4]
}
 8087ed4:	b006      	add	sp, #24
 8087ed6:	bd70      	pop	{r4, r5, r6, pc}
 8087ed8:	20000b7e 	.word	0x20000b7e

08087edc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8087edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8087ee0:	4b03      	ldr	r3, [pc, #12]	; (8087ef0 <_GLOBAL__sub_I_System+0x14>)
 8087ee2:	2000      	movs	r0, #0
 8087ee4:	7018      	strb	r0, [r3, #0]
 8087ee6:	8058      	strh	r0, [r3, #2]
 8087ee8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8087eea:	f7ff bc9f 	b.w	808782c <set_system_mode>
 8087eee:	bf00      	nop
 8087ef0:	20000b7e 	.word	0x20000b7e

08087ef4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8087ef4:	b510      	push	{r4, lr}
 8087ef6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8087ef8:	f003 fd68 	bl	808b9cc <strlen>
 8087efc:	3801      	subs	r0, #1
 8087efe:	1823      	adds	r3, r4, r0
 8087f00:	4620      	mov	r0, r4
	while(i<j){
 8087f02:	4298      	cmp	r0, r3
 8087f04:	d206      	bcs.n	8087f14 <_Z11str_reversePc+0x20>
		c = *i;
 8087f06:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8087f08:	7819      	ldrb	r1, [r3, #0]
 8087f0a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8087f0e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8087f12:	e7f6      	b.n	8087f02 <_Z11str_reversePc+0xe>
 8087f14:	bd10      	pop	{r4, pc}

08087f16 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8087f16:	b570      	push	{r4, r5, r6, lr}
 8087f18:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8087f1a:	1e91      	subs	r1, r2, #2
 8087f1c:	2922      	cmp	r1, #34	; 0x22
 8087f1e:	d820      	bhi.n	8087f62 <ultoa+0x4c>
 8087f20:	4625      	mov	r5, r4
 8087f22:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8087f24:	b910      	cbnz	r0, 8087f2c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8087f26:	4423      	add	r3, r4
            *ptr++ = '0';
 8087f28:	2230      	movs	r2, #48	; 0x30
 8087f2a:	e00e      	b.n	8087f4a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8087f2c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8087f30:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8087f34:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8087f36:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8087f38:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8087f3c:	bf94      	ite	ls
 8087f3e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8087f40:	3157      	addhi	r1, #87	; 0x57
 8087f42:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8087f46:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8087f48:	e7eb      	b.n	8087f22 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8087f4a:	4299      	cmp	r1, r3
 8087f4c:	d202      	bcs.n	8087f54 <ultoa+0x3e>
            *ptr++ = '0';
 8087f4e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8087f52:	e7fa      	b.n	8087f4a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8087f54:	2300      	movs	r3, #0
	str_reverse(buffer);
 8087f56:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8087f58:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8087f5a:	f7ff ffcb 	bl	8087ef4 <_Z11str_reversePc>
	return buffer;
 8087f5e:	4620      	mov	r0, r4
 8087f60:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8087f62:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8087f64:	bd70      	pop	{r4, r5, r6, pc}

08087f66 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8087f66:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8087f68:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8087f6a:	460c      	mov	r4, r1
 8087f6c:	4615      	mov	r5, r2
	if(a<0){
 8087f6e:	da0b      	bge.n	8087f88 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8087f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8087f74:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8087f78:	bf14      	ite	ne
 8087f7a:	4258      	negne	r0, r3
 8087f7c:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8087f7e:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8087f80:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8087f82:	462a      	mov	r2, r5
 8087f84:	4419      	add	r1, r3
 8087f86:	e000      	b.n	8087f8a <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8087f88:	2301      	movs	r3, #1
 8087f8a:	f7ff ffc4 	bl	8087f16 <ultoa>
	}
	return buffer;
}
 8087f8e:	4620      	mov	r0, r4
 8087f90:	bd38      	pop	{r3, r4, r5, pc}
	...

08087f94 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8087f94:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087f98:	4680      	mov	r8, r0
 8087f9a:	460d      	mov	r5, r1
 8087f9c:	4617      	mov	r7, r2
 8087f9e:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 8087fa0:	2200      	movs	r2, #0
 8087fa2:	2300      	movs	r3, #0
 8087fa4:	4640      	mov	r0, r8
 8087fa6:	4629      	mov	r1, r5
 8087fa8:	f002 f870 	bl	808a08c <__aeabi_dcmplt>
 8087fac:	b120      	cbz	r0, 8087fb8 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 8087fae:	232d      	movs	r3, #45	; 0x2d
 8087fb0:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 8087fb2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 8087fb6:	3601      	adds	r6, #1
 8087fb8:	2300      	movs	r3, #0
    }
    long scale = 1;
 8087fba:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 8087fbc:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8087fbe:	b2d9      	uxtb	r1, r3
 8087fc0:	428f      	cmp	r7, r1
 8087fc2:	d902      	bls.n	8087fca <_Z4dtoadhPc+0x36>
        scale *= 10;
 8087fc4:	4354      	muls	r4, r2
 8087fc6:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8087fc8:	e7f9      	b.n	8087fbe <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 8087fca:	4620      	mov	r0, r4
 8087fcc:	f001 fd86 	bl	8089adc <__aeabi_i2d>
 8087fd0:	4642      	mov	r2, r8
 8087fd2:	462b      	mov	r3, r5
 8087fd4:	f001 fde8 	bl	8089ba8 <__aeabi_dmul>
 8087fd8:	4682      	mov	sl, r0
 8087fda:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 8087fdc:	f002 fc8e 	bl	808a8fc <__aeabi_d2ulz>
 8087fe0:	4680      	mov	r8, r0
 8087fe2:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 8087fe4:	f001 fdaa 	bl	8089b3c <__aeabi_ul2d>
 8087fe8:	4602      	mov	r2, r0
 8087fea:	460b      	mov	r3, r1
 8087fec:	4650      	mov	r0, sl
 8087fee:	4659      	mov	r1, fp
 8087ff0:	f001 fc26 	bl	8089840 <__aeabi_dsub>
 8087ff4:	2200      	movs	r2, #0
 8087ff6:	4b17      	ldr	r3, [pc, #92]	; (8088054 <_Z4dtoadhPc+0xc0>)
 8087ff8:	f002 f85c 	bl	808a0b4 <__aeabi_dcmpge>
 8087ffc:	b118      	cbz	r0, 8088006 <_Z4dtoadhPc+0x72>
        fixed++;
 8087ffe:	f118 0801 	adds.w	r8, r8, #1
 8088002:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 8088006:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 8088008:	4622      	mov	r2, r4
 808800a:	462b      	mov	r3, r5
 808800c:	4640      	mov	r0, r8
 808800e:	4649      	mov	r1, r9
 8088010:	f002 fc5c 	bl	808a8cc <__aeabi_uldivmod>
 8088014:	2301      	movs	r3, #1
 8088016:	220a      	movs	r2, #10
 8088018:	4631      	mov	r1, r6
 808801a:	f7ff ff7c 	bl	8087f16 <ultoa>
    if (prec) {
 808801e:	b1af      	cbz	r7, 808804c <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 8088020:	4630      	mov	r0, r6
 8088022:	f003 fcd3 	bl	808b9cc <strlen>
        *sout++ = '.';
 8088026:	232e      	movs	r3, #46	; 0x2e
 8088028:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 808802a:	3001      	adds	r0, #1
 808802c:	4406      	add	r6, r0
 808802e:	4622      	mov	r2, r4
 8088030:	462b      	mov	r3, r5
 8088032:	4640      	mov	r0, r8
 8088034:	4649      	mov	r1, r9
 8088036:	f002 fc49 	bl	808a8cc <__aeabi_uldivmod>
 808803a:	463b      	mov	r3, r7
 808803c:	4610      	mov	r0, r2
 808803e:	4631      	mov	r1, r6
 8088040:	220a      	movs	r2, #10
    }
}
 8088042:	b001      	add	sp, #4
 8088044:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 8088048:	f7ff bf65 	b.w	8087f16 <ultoa>
    }
}
 808804c:	b001      	add	sp, #4
 808804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088052:	bf00      	nop
 8088054:	3fe00000 	.word	0x3fe00000

08088058 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8088058:	b510      	push	{r4, lr}
 808805a:	4604      	mov	r4, r0
{
	free(buffer);
 808805c:	6800      	ldr	r0, [r0, #0]
 808805e:	f7ff fcbb 	bl	80879d8 <free>
}
 8088062:	4620      	mov	r0, r4
 8088064:	bd10      	pop	{r4, pc}

08088066 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8088066:	b510      	push	{r4, lr}
 8088068:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808806a:	6800      	ldr	r0, [r0, #0]
 808806c:	b108      	cbz	r0, 8088072 <_ZN6String10invalidateEv+0xc>
 808806e:	f7ff fcb3 	bl	80879d8 <free>
	buffer = NULL;
 8088072:	2300      	movs	r3, #0
 8088074:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8088076:	60a3      	str	r3, [r4, #8]
 8088078:	6063      	str	r3, [r4, #4]
 808807a:	bd10      	pop	{r4, pc}

0808807c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808807c:	b538      	push	{r3, r4, r5, lr}
 808807e:	4604      	mov	r4, r0
 8088080:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8088082:	6800      	ldr	r0, [r0, #0]
 8088084:	3101      	adds	r1, #1
 8088086:	f7ff fcaf 	bl	80879e8 <realloc>
	if (newbuffer) {
 808808a:	b110      	cbz	r0, 8088092 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808808c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8088090:	2001      	movs	r0, #1
	}
	return 0;
}
 8088092:	bd38      	pop	{r3, r4, r5, pc}

08088094 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8088094:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8088096:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8088098:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808809a:	b113      	cbz	r3, 80880a2 <_ZN6String7reserveEj+0xe>
 808809c:	6843      	ldr	r3, [r0, #4]
 808809e:	428b      	cmp	r3, r1
 80880a0:	d207      	bcs.n	80880b2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80880a2:	4620      	mov	r0, r4
 80880a4:	f7ff ffea 	bl	808807c <_ZN6String12changeBufferEj>
 80880a8:	b120      	cbz	r0, 80880b4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80880aa:	68a3      	ldr	r3, [r4, #8]
 80880ac:	b90b      	cbnz	r3, 80880b2 <_ZN6String7reserveEj+0x1e>
 80880ae:	6822      	ldr	r2, [r4, #0]
 80880b0:	7013      	strb	r3, [r2, #0]
 80880b2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80880b4:	bd10      	pop	{r4, pc}

080880b6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80880b6:	b570      	push	{r4, r5, r6, lr}
 80880b8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80880ba:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80880bc:	4604      	mov	r4, r0
 80880be:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80880c0:	f7ff ffe8 	bl	8088094 <_ZN6String7reserveEj>
 80880c4:	b918      	cbnz	r0, 80880ce <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80880c6:	4620      	mov	r0, r4
 80880c8:	f7ff ffcd 	bl	8088066 <_ZN6String10invalidateEv>
		return *this;
 80880cc:	e009      	b.n	80880e2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80880ce:	462a      	mov	r2, r5
 80880d0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80880d2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80880d4:	6820      	ldr	r0, [r4, #0]
 80880d6:	f002 ff0a 	bl	808aeee <memcpy>
	buffer[len] = 0;
 80880da:	6822      	ldr	r2, [r4, #0]
 80880dc:	68a3      	ldr	r3, [r4, #8]
 80880de:	2100      	movs	r1, #0
 80880e0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80880e2:	4620      	mov	r0, r4
 80880e4:	bd70      	pop	{r4, r5, r6, pc}

080880e6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80880e6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80880e8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80880ea:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80880ec:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80880ee:	6043      	str	r3, [r0, #4]
	len = 0;
 80880f0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80880f2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80880f4:	460d      	mov	r5, r1
 80880f6:	b139      	cbz	r1, 8088108 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80880f8:	4608      	mov	r0, r1
 80880fa:	f003 fc67 	bl	808b9cc <strlen>
 80880fe:	4629      	mov	r1, r5
 8088100:	4602      	mov	r2, r0
 8088102:	4620      	mov	r0, r4
 8088104:	f7ff ffd7 	bl	80880b6 <_ZN6String4copyEPKcj>
}
 8088108:	4620      	mov	r0, r4
 808810a:	bd38      	pop	{r3, r4, r5, pc}

0808810c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808810c:	b538      	push	{r3, r4, r5, lr}
 808810e:	4605      	mov	r5, r0
	if (buffer) {
 8088110:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8088112:	460c      	mov	r4, r1
	if (buffer) {
 8088114:	b160      	cbz	r0, 8088130 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8088116:	686a      	ldr	r2, [r5, #4]
 8088118:	688b      	ldr	r3, [r1, #8]
 808811a:	429a      	cmp	r2, r3
 808811c:	d306      	bcc.n	808812c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 808811e:	6809      	ldr	r1, [r1, #0]
 8088120:	f002 ff38 	bl	808af94 <strcpy>
			len = rhs.len;
 8088124:	68a3      	ldr	r3, [r4, #8]
 8088126:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8088128:	2300      	movs	r3, #0
 808812a:	e00a      	b.n	8088142 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 808812c:	f7ff fc54 	bl	80879d8 <free>
		}
	}
	buffer = rhs.buffer;
 8088130:	6823      	ldr	r3, [r4, #0]
 8088132:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8088134:	6863      	ldr	r3, [r4, #4]
 8088136:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8088138:	68a3      	ldr	r3, [r4, #8]
 808813a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808813c:	2300      	movs	r3, #0
 808813e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 8088140:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 8088142:	60a3      	str	r3, [r4, #8]
 8088144:	bd38      	pop	{r3, r4, r5, pc}

08088146 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8088146:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8088148:	b510      	push	{r4, lr}
 808814a:	460b      	mov	r3, r1
 808814c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808814e:	d007      	beq.n	8088160 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8088150:	6809      	ldr	r1, [r1, #0]
 8088152:	b119      	cbz	r1, 808815c <_ZN6StringaSERKS_+0x16>
 8088154:	689a      	ldr	r2, [r3, #8]
 8088156:	f7ff ffae 	bl	80880b6 <_ZN6String4copyEPKcj>
 808815a:	e001      	b.n	8088160 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808815c:	f7ff ff83 	bl	8088066 <_ZN6String10invalidateEv>

	return *this;
}
 8088160:	4620      	mov	r0, r4
 8088162:	bd10      	pop	{r4, pc}

08088164 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8088164:	b510      	push	{r4, lr}
 8088166:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088168:	2300      	movs	r3, #0
 808816a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808816c:	6043      	str	r3, [r0, #4]
	len = 0;
 808816e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8088170:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8088172:	f7ff ffe8 	bl	8088146 <_ZN6StringaSERKS_>
}
 8088176:	4620      	mov	r0, r4
 8088178:	bd10      	pop	{r4, pc}

0808817a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 808817a:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 808817c:	b510      	push	{r4, lr}
 808817e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8088180:	d001      	beq.n	8088186 <_ZN6StringaSEOS_+0xc>
 8088182:	f7ff ffc3 	bl	808810c <_ZN6String4moveERS_>
	return *this;
}
 8088186:	4620      	mov	r0, r4
 8088188:	bd10      	pop	{r4, pc}

0808818a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808818a:	b538      	push	{r3, r4, r5, lr}
 808818c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808818e:	460c      	mov	r4, r1
 8088190:	b141      	cbz	r1, 80881a4 <_ZN6StringaSEPKc+0x1a>
 8088192:	4608      	mov	r0, r1
 8088194:	f003 fc1a 	bl	808b9cc <strlen>
 8088198:	4621      	mov	r1, r4
 808819a:	4602      	mov	r2, r0
 808819c:	4628      	mov	r0, r5
 808819e:	f7ff ff8a 	bl	80880b6 <_ZN6String4copyEPKcj>
 80881a2:	e001      	b.n	80881a8 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80881a4:	f7ff ff5f 	bl	8088066 <_ZN6String10invalidateEv>

	return *this;
}
 80881a8:	4628      	mov	r0, r5
 80881aa:	bd38      	pop	{r3, r4, r5, pc}

080881ac <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80881ac:	b510      	push	{r4, lr}
 80881ae:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80881b0:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80881b2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80881b4:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80881b6:	6063      	str	r3, [r4, #4]
	len = 0;
 80881b8:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80881ba:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80881bc:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80881be:	a901      	add	r1, sp, #4
 80881c0:	f7ff fed1 	bl	8087f66 <itoa>
	*this = buf;
 80881c4:	a901      	add	r1, sp, #4
 80881c6:	4620      	mov	r0, r4
 80881c8:	f7ff ffdf 	bl	808818a <_ZN6StringaSEPKc>
}
 80881cc:	4620      	mov	r0, r4
 80881ce:	b00a      	add	sp, #40	; 0x28
 80881d0:	bd10      	pop	{r4, pc}

080881d2 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80881d2:	b530      	push	{r4, r5, lr}
 80881d4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80881d6:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80881d8:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80881da:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80881dc:	6043      	str	r3, [r0, #4]
	len = 0;
 80881de:	6083      	str	r3, [r0, #8]
	flags = 0;
 80881e0:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80881e2:	b2d5      	uxtb	r5, r2
 80881e4:	4608      	mov	r0, r1
 80881e6:	f001 fc8b 	bl	8089b00 <__aeabi_f2d>
 80881ea:	ab01      	add	r3, sp, #4
 80881ec:	462a      	mov	r2, r5
 80881ee:	f7ff fed1 	bl	8087f94 <_Z4dtoadhPc>
        *this = buf;
 80881f2:	a901      	add	r1, sp, #4
 80881f4:	4620      	mov	r0, r4
 80881f6:	f7ff ffc8 	bl	808818a <_ZN6StringaSEPKc>
}
 80881fa:	4620      	mov	r0, r4
 80881fc:	b00b      	add	sp, #44	; 0x2c
 80881fe:	bd30      	pop	{r4, r5, pc}

08088200 <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 8088200:	b510      	push	{r4, lr}
 8088202:	4604      	mov	r4, r0
 8088204:	b08a      	sub	sp, #40	; 0x28
 8088206:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088208:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 808820a:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808820c:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808820e:	6063      	str	r3, [r4, #4]
	len = 0;
 8088210:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8088212:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 8088214:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8088218:	ab01      	add	r3, sp, #4
 808821a:	f7ff febb 	bl	8087f94 <_Z4dtoadhPc>
        *this = buf;
 808821e:	a901      	add	r1, sp, #4
 8088220:	4620      	mov	r0, r4
 8088222:	f7ff ffb2 	bl	808818a <_ZN6StringaSEPKc>
}
 8088226:	4620      	mov	r0, r4
 8088228:	b00a      	add	sp, #40	; 0x28
 808822a:	bd10      	pop	{r4, pc}

0808822c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808822c:	b570      	push	{r4, r5, r6, lr}
 808822e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8088230:	460e      	mov	r6, r1
 8088232:	b909      	cbnz	r1, 8088238 <_ZN6String6concatEPKcj+0xc>
 8088234:	2000      	movs	r0, #0
 8088236:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8088238:	b16a      	cbz	r2, 8088256 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 808823a:	6883      	ldr	r3, [r0, #8]
 808823c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 808823e:	4629      	mov	r1, r5
 8088240:	f7ff ff28 	bl	8088094 <_ZN6String7reserveEj>
 8088244:	2800      	cmp	r0, #0
 8088246:	d0f5      	beq.n	8088234 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8088248:	6820      	ldr	r0, [r4, #0]
 808824a:	68a3      	ldr	r3, [r4, #8]
 808824c:	4631      	mov	r1, r6
 808824e:	4418      	add	r0, r3
 8088250:	f002 fea0 	bl	808af94 <strcpy>
	len = newlen;
 8088254:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8088256:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8088258:	bd70      	pop	{r4, r5, r6, pc}

0808825a <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 808825a:	688a      	ldr	r2, [r1, #8]
 808825c:	6809      	ldr	r1, [r1, #0]
 808825e:	f7ff bfe5 	b.w	808822c <_ZN6String6concatEPKcj>

08088262 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 8088262:	b538      	push	{r3, r4, r5, lr}
 8088264:	4605      	mov	r5, r0
	if (!cstr) return 0;
 8088266:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 8088268:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 808826a:	b141      	cbz	r1, 808827e <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 808826c:	f003 fbae 	bl	808b9cc <strlen>
 8088270:	4621      	mov	r1, r4
 8088272:	4602      	mov	r2, r0
 8088274:	4628      	mov	r0, r5
}
 8088276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 808827a:	f7ff bfd7 	b.w	808822c <_ZN6String6concatEPKcj>
}
 808827e:	bd38      	pop	{r3, r4, r5, pc}

08088280 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 8088280:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8088282:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 8088284:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 8088288:	2201      	movs	r2, #1
 808828a:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808828c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 8088290:	f7ff ffcc 	bl	808822c <_ZN6String6concatEPKcj>
}
 8088294:	b003      	add	sp, #12
 8088296:	f85d fb04 	ldr.w	pc, [sp], #4

0808829a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808829a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808829c:	688a      	ldr	r2, [r1, #8]
 808829e:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80882a0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80882a2:	f7ff ffc3 	bl	808822c <_ZN6String6concatEPKcj>
 80882a6:	b910      	cbnz	r0, 80882ae <_ZplRK15StringSumHelperRK6String+0x14>
 80882a8:	4620      	mov	r0, r4
 80882aa:	f7ff fedc 	bl	8088066 <_ZN6String10invalidateEv>
	return a;
}
 80882ae:	4620      	mov	r0, r4
 80882b0:	bd10      	pop	{r4, pc}

080882b2 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80882b2:	b538      	push	{r3, r4, r5, lr}
 80882b4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80882b6:	460d      	mov	r5, r1
 80882b8:	b141      	cbz	r1, 80882cc <_ZplRK15StringSumHelperPKc+0x1a>
 80882ba:	4608      	mov	r0, r1
 80882bc:	f003 fb86 	bl	808b9cc <strlen>
 80882c0:	4629      	mov	r1, r5
 80882c2:	4602      	mov	r2, r0
 80882c4:	4620      	mov	r0, r4
 80882c6:	f7ff ffb1 	bl	808822c <_ZN6String6concatEPKcj>
 80882ca:	b910      	cbnz	r0, 80882d2 <_ZplRK15StringSumHelperPKc+0x20>
 80882cc:	4620      	mov	r0, r4
 80882ce:	f7ff feca 	bl	8088066 <_ZN6String10invalidateEv>
	return a;
}
 80882d2:	4620      	mov	r0, r4
 80882d4:	bd38      	pop	{r3, r4, r5, pc}

080882d6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80882d6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80882d8:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80882da:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80882dc:	b912      	cbnz	r2, 80882e4 <_ZNK6String6equalsEPKc+0xe>
 80882de:	b919      	cbnz	r1, 80882e8 <_ZNK6String6equalsEPKc+0x12>
 80882e0:	2001      	movs	r0, #1
 80882e2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80882e4:	b911      	cbnz	r1, 80882ec <_ZNK6String6equalsEPKc+0x16>
 80882e6:	6803      	ldr	r3, [r0, #0]
 80882e8:	7818      	ldrb	r0, [r3, #0]
 80882ea:	e002      	b.n	80882f2 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80882ec:	6800      	ldr	r0, [r0, #0]
 80882ee:	f002 fe47 	bl	808af80 <strcmp>
 80882f2:	fab0 f080 	clz	r0, r0
 80882f6:	0940      	lsrs	r0, r0, #5
}
 80882f8:	bd08      	pop	{r3, pc}

080882fa <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80882fa:	6883      	ldr	r3, [r0, #8]
 80882fc:	428b      	cmp	r3, r1
 80882fe:	d903      	bls.n	8088308 <_ZNK6StringixEj+0xe>
 8088300:	6800      	ldr	r0, [r0, #0]
 8088302:	b110      	cbz	r0, 808830a <_ZNK6StringixEj+0x10>
	return buffer[index];
 8088304:	5c40      	ldrb	r0, [r0, r1]
 8088306:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8088308:	2000      	movs	r0, #0
	return buffer[index];
}
 808830a:	4770      	bx	lr

0808830c <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 808830c:	f7ff bff5 	b.w	80882fa <_ZNK6StringixEj>

08088310 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8088310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088314:	461c      	mov	r4, r3
	if (left > right) {
 8088316:	429a      	cmp	r2, r3
 8088318:	bf88      	it	hi
 808831a:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808831c:	460e      	mov	r6, r1
 808831e:	4615      	mov	r5, r2
	if (left > right) {
 8088320:	bf88      	it	hi
 8088322:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8088324:	490d      	ldr	r1, [pc, #52]	; (808835c <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 8088326:	bf88      	it	hi
 8088328:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808832a:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808832c:	f7ff fedb 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 8088330:	68b1      	ldr	r1, [r6, #8]
 8088332:	428d      	cmp	r5, r1
 8088334:	d80f      	bhi.n	8088356 <_ZNK6String9substringEjj+0x46>
 8088336:	428c      	cmp	r4, r1
 8088338:	bf28      	it	cs
 808833a:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 808833c:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 808833e:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 8088340:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 8088344:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 8088346:	6831      	ldr	r1, [r6, #0]
 8088348:	4638      	mov	r0, r7
 808834a:	4429      	add	r1, r5
 808834c:	f7ff ff1d 	bl	808818a <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 8088350:	6833      	ldr	r3, [r6, #0]
 8088352:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 8088356:	4638      	mov	r0, r7
 8088358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808835c:	08090584 	.word	0x08090584

08088360 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8088360:	6800      	ldr	r0, [r0, #0]
 8088362:	b108      	cbz	r0, 8088368 <_ZNK6String5toIntEv+0x8>
 8088364:	f002 bca5 	b.w	808acb2 <atol>
	return 0;
}
 8088368:	4770      	bx	lr

0808836a <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808836a:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808836c:	6800      	ldr	r0, [r0, #0]
 808836e:	b120      	cbz	r0, 808837a <_ZNK6String7toFloatEv+0x10>
 8088370:	f002 fc9c 	bl	808acac <atof>
 8088374:	f001 ff10 	bl	808a198 <__aeabi_d2f>
 8088378:	bd08      	pop	{r3, pc}
	return 0;
 808837a:	2000      	movs	r0, #0
}
 808837c:	bd08      	pop	{r3, pc}
	...

08088380 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 8088380:	b40e      	push	{r1, r2, r3}
 8088382:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8088384:	ac09      	add	r4, sp, #36	; 0x24
 8088386:	f854 7b04 	ldr.w	r7, [r4], #4
 808838a:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808838c:	4623      	mov	r3, r4
 808838e:	463a      	mov	r2, r7
 8088390:	2105      	movs	r1, #5
 8088392:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 8088394:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8088396:	f7ff fb57 	bl	8087a48 <vsnprintf>
 808839a:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 808839c:	490b      	ldr	r1, [pc, #44]	; (80883cc <_ZN6String6formatEPKcz+0x4c>)
 808839e:	4628      	mov	r0, r5
 80883a0:	f7ff fea1 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80883a4:	4631      	mov	r1, r6
 80883a6:	4628      	mov	r0, r5
 80883a8:	f7ff fe74 	bl	8088094 <_ZN6String7reserveEj>
    if (result.buffer) {
 80883ac:	6828      	ldr	r0, [r5, #0]
 80883ae:	b130      	cbz	r0, 80883be <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80883b0:	4623      	mov	r3, r4
 80883b2:	463a      	mov	r2, r7
 80883b4:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80883b6:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80883b8:	f7ff fb46 	bl	8087a48 <vsnprintf>
        va_end(marker);
        result.len = n;
 80883bc:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80883be:	4628      	mov	r0, r5
 80883c0:	b004      	add	sp, #16
 80883c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80883c6:	b003      	add	sp, #12
 80883c8:	4770      	bx	lr
 80883ca:	bf00      	nop
 80883cc:	08090584 	.word	0x08090584

080883d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80883d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80883d2:	4606      	mov	r6, r0
 80883d4:	460d      	mov	r5, r1
 80883d6:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80883d8:	2400      	movs	r4, #0
  while (size--) {
 80883da:	42bd      	cmp	r5, r7
 80883dc:	d00c      	beq.n	80883f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80883de:	6833      	ldr	r3, [r6, #0]
 80883e0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80883e4:	689b      	ldr	r3, [r3, #8]
 80883e6:	4630      	mov	r0, r6
 80883e8:	4798      	blx	r3
     if (chunk>=0)
 80883ea:	2800      	cmp	r0, #0
 80883ec:	db01      	blt.n	80883f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80883ee:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80883f0:	e7f3      	b.n	80883da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80883f2:	2c00      	cmp	r4, #0
 80883f4:	bf08      	it	eq
 80883f6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80883f8:	4620      	mov	r0, r4
 80883fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080883fc <_ZN5Print5printEPKc>:
 80883fc:	b508      	push	{r3, lr}
 80883fe:	f7fe faa9 	bl	8086954 <_ZN5Print5writeEPKc>
 8088402:	bd08      	pop	{r3, pc}

08088404 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8088404:	6803      	ldr	r3, [r0, #0]
 8088406:	689b      	ldr	r3, [r3, #8]
 8088408:	4718      	bx	r3

0808840a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808840a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808840c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808840e:	4605      	mov	r5, r0
  size_t n = print('\r');
 8088410:	f7ff fff8 	bl	8088404 <_ZN5Print5printEc>
  n += print('\n');
 8088414:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8088416:	4604      	mov	r4, r0
  n += print('\n');
 8088418:	4628      	mov	r0, r5
 808841a:	f7ff fff3 	bl	8088404 <_ZN5Print5printEc>
  return n;
}
 808841e:	4420      	add	r0, r4
 8088420:	bd38      	pop	{r3, r4, r5, pc}

08088422 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8088422:	b538      	push	{r3, r4, r5, lr}
 8088424:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088426:	f7fe fa95 	bl	8086954 <_ZN5Print5writeEPKc>
 808842a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 808842c:	4628      	mov	r0, r5
 808842e:	f7ff ffec 	bl	808840a <_ZN5Print7printlnEv>
  return n;
}
 8088432:	4420      	add	r0, r4
 8088434:	bd38      	pop	{r3, r4, r5, pc}

08088436 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 8088436:	b538      	push	{r3, r4, r5, lr}
 8088438:	4605      	mov	r5, r0
  size_t n = print(c);
 808843a:	f7ff ffe3 	bl	8088404 <_ZN5Print5printEc>
 808843e:	4604      	mov	r4, r0
  n += println();
 8088440:	4628      	mov	r0, r5
 8088442:	f7ff ffe2 	bl	808840a <_ZN5Print7printlnEv>
  return n;
}
 8088446:	4420      	add	r0, r4
 8088448:	bd38      	pop	{r3, r4, r5, pc}

0808844a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808844a:	2a01      	cmp	r2, #1
 808844c:	bf98      	it	ls
 808844e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8088450:	b530      	push	{r4, r5, lr}
 8088452:	460b      	mov	r3, r1
 8088454:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8088456:	2100      	movs	r1, #0
 8088458:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808845c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8088460:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8088464:	fb05 3312 	mls	r3, r5, r2, r3
 8088468:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808846a:	2b09      	cmp	r3, #9
 808846c:	bf94      	ite	ls
 808846e:	3330      	addls	r3, #48	; 0x30
 8088470:	3337      	addhi	r3, #55	; 0x37
 8088472:	b2db      	uxtb	r3, r3
 8088474:	4621      	mov	r1, r4
 8088476:	f804 3901 	strb.w	r3, [r4], #-1
 808847a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808847c:	2d00      	cmp	r5, #0
 808847e:	d1ef      	bne.n	8088460 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8088480:	f7fe fa68 	bl	8086954 <_ZN5Print5writeEPKc>
}
 8088484:	b00b      	add	sp, #44	; 0x2c
 8088486:	bd30      	pop	{r4, r5, pc}

08088488 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8088488:	b410      	push	{r4}
  if (base == 0) return write(n);
 808848a:	b922      	cbnz	r2, 8088496 <_ZN5Print5printEmi+0xe>
 808848c:	6803      	ldr	r3, [r0, #0]
 808848e:	b2c9      	uxtb	r1, r1
 8088490:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8088492:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8088494:	4718      	bx	r3
  else return printNumber(n, base);
 8088496:	b2d2      	uxtb	r2, r2
}
 8088498:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808849a:	f7ff bfd6 	b.w	808844a <_ZN5Print11printNumberEmh>

0808849e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808849e:	f7ff bff3 	b.w	8088488 <_ZN5Print5printEmi>

080884a2 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80884a2:	b538      	push	{r3, r4, r5, lr}
 80884a4:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80884a6:	f7ff ffef 	bl	8088488 <_ZN5Print5printEmi>
 80884aa:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80884ac:	4628      	mov	r0, r5
 80884ae:	f7ff ffac 	bl	808840a <_ZN5Print7printlnEv>
  return n;
}
 80884b2:	4420      	add	r0, r4
 80884b4:	bd38      	pop	{r3, r4, r5, pc}

080884b6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80884b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80884ba:	4607      	mov	r7, r0
 80884bc:	460e      	mov	r6, r1
  if (base == 0) {
 80884be:	4615      	mov	r5, r2
 80884c0:	b92a      	cbnz	r2, 80884ce <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80884c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80884c6:	6803      	ldr	r3, [r0, #0]
 80884c8:	b2c9      	uxtb	r1, r1
 80884ca:	689b      	ldr	r3, [r3, #8]
 80884cc:	4718      	bx	r3
  } else if (base == 10) {
 80884ce:	2a0a      	cmp	r2, #10
 80884d0:	d102      	bne.n	80884d8 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80884d2:	2900      	cmp	r1, #0
 80884d4:	da01      	bge.n	80884da <_ZN5Print5printEli+0x24>
 80884d6:	e004      	b.n	80884e2 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80884d8:	b2d2      	uxtb	r2, r2
  }
}
 80884da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80884de:	f7ff bfb4 	b.w	808844a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80884e2:	212d      	movs	r1, #45	; 0x2d
 80884e4:	f7ff ff8e 	bl	8088404 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80884e8:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80884ea:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80884ec:	4271      	negs	r1, r6
 80884ee:	4638      	mov	r0, r7
 80884f0:	f7ff ffab 	bl	808844a <_ZN5Print11printNumberEmh>
 80884f4:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80884f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080884fa <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80884fa:	f7ff bfdc 	b.w	80884b6 <_ZN5Print5printEli>

080884fe <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80884fe:	b538      	push	{r3, r4, r5, lr}
 8088500:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8088502:	f7ff ffd8 	bl	80884b6 <_ZN5Print5printEli>
 8088506:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 8088508:	4628      	mov	r0, r5
 808850a:	f7ff ff7e 	bl	808840a <_ZN5Print7printlnEv>
  return n;
}
 808850e:	4420      	add	r0, r4
 8088510:	bd38      	pop	{r3, r4, r5, pc}
	...

08088514 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8088514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8088518:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808851a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808851c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808851e:	4617      	mov	r7, r2
 8088520:	461e      	mov	r6, r3
 8088522:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8088526:	f001 fdd9 	bl	808a0dc <__aeabi_dcmpun>
 808852a:	b108      	cbz	r0, 8088530 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808852c:	4947      	ldr	r1, [pc, #284]	; (808864c <_ZN5Print10printFloatEdh+0x138>)
 808852e:	e012      	b.n	8088556 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8088530:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8088534:	f04f 32ff 	mov.w	r2, #4294967295
 8088538:	4b45      	ldr	r3, [pc, #276]	; (8088650 <_ZN5Print10printFloatEdh+0x13c>)
 808853a:	4638      	mov	r0, r7
 808853c:	4621      	mov	r1, r4
 808853e:	f001 fdcd 	bl	808a0dc <__aeabi_dcmpun>
 8088542:	b968      	cbnz	r0, 8088560 <_ZN5Print10printFloatEdh+0x4c>
 8088544:	f04f 32ff 	mov.w	r2, #4294967295
 8088548:	4b41      	ldr	r3, [pc, #260]	; (8088650 <_ZN5Print10printFloatEdh+0x13c>)
 808854a:	4638      	mov	r0, r7
 808854c:	4621      	mov	r1, r4
 808854e:	f001 fda7 	bl	808a0a0 <__aeabi_dcmple>
 8088552:	b928      	cbnz	r0, 8088560 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088554:	493f      	ldr	r1, [pc, #252]	; (8088654 <_ZN5Print10printFloatEdh+0x140>)
 8088556:	4640      	mov	r0, r8
 8088558:	f7fe f9fc 	bl	8086954 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 808855c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8088560:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8088564:	4b3c      	ldr	r3, [pc, #240]	; (8088658 <_ZN5Print10printFloatEdh+0x144>)
 8088566:	4638      	mov	r0, r7
 8088568:	4631      	mov	r1, r6
 808856a:	f001 fdad 	bl	808a0c8 <__aeabi_dcmpgt>
 808856e:	b108      	cbz	r0, 8088574 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088570:	493a      	ldr	r1, [pc, #232]	; (808865c <_ZN5Print10printFloatEdh+0x148>)
 8088572:	e7f0      	b.n	8088556 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8088574:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8088578:	4b39      	ldr	r3, [pc, #228]	; (8088660 <_ZN5Print10printFloatEdh+0x14c>)
 808857a:	4638      	mov	r0, r7
 808857c:	4631      	mov	r1, r6
 808857e:	f001 fd85 	bl	808a08c <__aeabi_dcmplt>
 8088582:	2800      	cmp	r0, #0
 8088584:	d1f4      	bne.n	8088570 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8088586:	2200      	movs	r2, #0
 8088588:	2300      	movs	r3, #0
 808858a:	4638      	mov	r0, r7
 808858c:	4631      	mov	r1, r6
 808858e:	f001 fd7d 	bl	808a08c <__aeabi_dcmplt>
 8088592:	b138      	cbz	r0, 80885a4 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8088594:	212d      	movs	r1, #45	; 0x2d
 8088596:	4640      	mov	r0, r8
 8088598:	f7ff ff34 	bl	8088404 <_ZN5Print5printEc>
     number = -number;
 808859c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80885a0:	4604      	mov	r4, r0
 80885a2:	e000      	b.n	80885a6 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80885a4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80885a6:	492f      	ldr	r1, [pc, #188]	; (8088664 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80885a8:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80885ac:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80885ae:	fa5f f389 	uxtb.w	r3, r9
 80885b2:	429d      	cmp	r5, r3
 80885b4:	d906      	bls.n	80885c4 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80885b6:	2200      	movs	r2, #0
 80885b8:	4b2b      	ldr	r3, [pc, #172]	; (8088668 <_ZN5Print10printFloatEdh+0x154>)
 80885ba:	f001 fc1f 	bl	8089dfc <__aeabi_ddiv>
 80885be:	f109 0901 	add.w	r9, r9, #1
 80885c2:	e7f4      	b.n	80885ae <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80885c4:	463a      	mov	r2, r7
 80885c6:	4633      	mov	r3, r6
 80885c8:	f001 f93c 	bl	8089844 <__adddf3>
 80885cc:	460f      	mov	r7, r1
 80885ce:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80885d0:	f001 fdc2 	bl	808a158 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80885d4:	220a      	movs	r2, #10
 80885d6:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80885d8:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80885da:	4640      	mov	r0, r8
 80885dc:	f7ff ff35 	bl	808844a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80885e0:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80885e2:	b37d      	cbz	r5, 8088644 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80885e4:	4648      	mov	r0, r9
 80885e6:	f001 fa69 	bl	8089abc <__aeabi_ui2d>
 80885ea:	4602      	mov	r2, r0
 80885ec:	460b      	mov	r3, r1
 80885ee:	4630      	mov	r0, r6
 80885f0:	4639      	mov	r1, r7
 80885f2:	f001 f925 	bl	8089840 <__aeabi_dsub>
 80885f6:	4606      	mov	r6, r0
 80885f8:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80885fa:	4640      	mov	r0, r8
 80885fc:	491b      	ldr	r1, [pc, #108]	; (808866c <_ZN5Print10printFloatEdh+0x158>)
 80885fe:	f7fe f9a9 	bl	8086954 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 8088602:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 8088604:	4b18      	ldr	r3, [pc, #96]	; (8088668 <_ZN5Print10printFloatEdh+0x154>)
 8088606:	2200      	movs	r2, #0
 8088608:	4630      	mov	r0, r6
 808860a:	4639      	mov	r1, r7
 808860c:	f001 facc 	bl	8089ba8 <__aeabi_dmul>
 8088610:	460f      	mov	r7, r1
 8088612:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 8088614:	f001 fd78 	bl	808a108 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8088618:	220a      	movs	r2, #10
 808861a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 808861c:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808861e:	4640      	mov	r0, r8
 8088620:	f7ff ff49 	bl	80884b6 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 8088624:	4404      	add	r4, r0
    remainder -= toPrint;
 8088626:	4648      	mov	r0, r9
 8088628:	f001 fa58 	bl	8089adc <__aeabi_i2d>
 808862c:	4602      	mov	r2, r0
 808862e:	460b      	mov	r3, r1
 8088630:	4630      	mov	r0, r6
 8088632:	4639      	mov	r1, r7
 8088634:	f001 f904 	bl	8089840 <__aeabi_dsub>
 8088638:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808863a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 808863e:	4606      	mov	r6, r0
 8088640:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8088642:	d1df      	bne.n	8088604 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8088644:	4620      	mov	r0, r4
 8088646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808864a:	bf00      	nop
 808864c:	080905cc 	.word	0x080905cc
 8088650:	7fefffff 	.word	0x7fefffff
 8088654:	080905d4 	.word	0x080905d4
 8088658:	41efffff 	.word	0x41efffff
 808865c:	080905d0 	.word	0x080905d0
 8088660:	c1efffff 	.word	0xc1efffff
 8088664:	3fe00000 	.word	0x3fe00000
 8088668:	40240000 	.word	0x40240000
 808866c:	0808ff4e 	.word	0x0808ff4e

08088670 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8088670:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8088672:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8088676:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8088678:	9100      	str	r1, [sp, #0]
 808867a:	f7ff ff4b 	bl	8088514 <_ZN5Print10printFloatEdh>
 808867e:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 8088680:	4628      	mov	r0, r5
 8088682:	f7ff fec2 	bl	808840a <_ZN5Print7printlnEv>
  return n;
}
 8088686:	4420      	add	r0, r4
 8088688:	b003      	add	sp, #12
 808868a:	bd30      	pop	{r4, r5, pc}

0808868c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 808868c:	b40c      	push	{r2, r3}
 808868e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8088692:	b087      	sub	sp, #28
 8088694:	af00      	add	r7, sp, #0
 8088696:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808869a:	f854 9b04 	ldr.w	r9, [r4], #4
 808869e:	4605      	mov	r5, r0
 80886a0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80886a2:	4623      	mov	r3, r4
 80886a4:	464a      	mov	r2, r9
 80886a6:	2114      	movs	r1, #20
 80886a8:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80886aa:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80886ac:	f7ff f9cc 	bl	8087a48 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80886b0:	2813      	cmp	r0, #19
 80886b2:	d805      	bhi.n	80886c0 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80886b4:	1d39      	adds	r1, r7, #4
 80886b6:	4628      	mov	r0, r5
 80886b8:	f7fe f94c 	bl	8086954 <_ZN5Print5writeEPKc>
 80886bc:	4604      	mov	r4, r0
 80886be:	e013      	b.n	80886e8 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80886c0:	f100 0308 	add.w	r3, r0, #8
 80886c4:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80886c8:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80886ca:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80886ce:	1c41      	adds	r1, r0, #1
 80886d0:	4623      	mov	r3, r4
 80886d2:	464a      	mov	r2, r9
 80886d4:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80886d6:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80886d8:	f7ff f9b6 	bl	8087a48 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80886dc:	4669      	mov	r1, sp
 80886de:	4628      	mov	r0, r5
 80886e0:	f7fe f938 	bl	8086954 <_ZN5Print5writeEPKc>
 80886e4:	4604      	mov	r4, r0
 80886e6:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80886e8:	b11e      	cbz	r6, 80886f2 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80886ea:	4628      	mov	r0, r5
 80886ec:	f7ff fe8d 	bl	808840a <_ZN5Print7printlnEv>
 80886f0:	4404      	add	r4, r0
    return n;
}
 80886f2:	4620      	mov	r0, r4
 80886f4:	371c      	adds	r7, #28
 80886f6:	46bd      	mov	sp, r7
 80886f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80886fc:	b002      	add	sp, #8
 80886fe:	4770      	bx	lr

08088700 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 8088700:	b510      	push	{r4, lr}
 8088702:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8088704:	f7fe ff42 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 8088708:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 808870a:	6823      	ldr	r3, [r4, #0]
 808870c:	4620      	mov	r0, r4
 808870e:	695b      	ldr	r3, [r3, #20]
 8088710:	4798      	blx	r3
    if (c >= 0) return c;
 8088712:	2800      	cmp	r0, #0
 8088714:	da08      	bge.n	8088728 <_ZN6Stream9timedReadEv+0x28>
 8088716:	f7fe ff39 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 808871a:	68e3      	ldr	r3, [r4, #12]
 808871c:	1ac0      	subs	r0, r0, r3
 808871e:	68a3      	ldr	r3, [r4, #8]
 8088720:	4298      	cmp	r0, r3
 8088722:	d3f2      	bcc.n	808870a <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 8088724:	f04f 30ff 	mov.w	r0, #4294967295
}
 8088728:	bd10      	pop	{r4, pc}

0808872a <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 808872a:	6081      	str	r1, [r0, #8]
 808872c:	4770      	bx	lr
	...

08088730 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
 8088730:	b570      	push	{r4, r5, r6, lr}
 8088732:	460d      	mov	r5, r1
  String ret;
 8088734:	4909      	ldr	r1, [pc, #36]	; (808875c <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
 8088736:	4604      	mov	r4, r0
 8088738:	4616      	mov	r6, r2
  String ret;
 808873a:	f7ff fcd4 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 808873e:	4628      	mov	r0, r5
 8088740:	f7ff ffde 	bl	8088700 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 8088744:	2800      	cmp	r0, #0
 8088746:	db06      	blt.n	8088756 <_ZN6Stream15readStringUntilEc+0x26>
 8088748:	42b0      	cmp	r0, r6
 808874a:	d004      	beq.n	8088756 <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808874c:	b2c1      	uxtb	r1, r0
 808874e:	4620      	mov	r0, r4
 8088750:	f7ff fd96 	bl	8088280 <_ZN6String6concatEc>
 8088754:	e7f3      	b.n	808873e <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 8088756:	4620      	mov	r0, r4
 8088758:	bd70      	pop	{r4, r5, r6, pc}
 808875a:	bf00      	nop
 808875c:	08090584 	.word	0x08090584

08088760 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8088760:	4a01      	ldr	r2, [pc, #4]	; (8088768 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8088762:	4b02      	ldr	r3, [pc, #8]	; (808876c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8088764:	601a      	str	r2, [r3, #0]
 8088766:	4770      	bx	lr
 8088768:	0809064b 	.word	0x0809064b
 808876c:	20000b84 	.word	0x20000b84

08088770 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8088770:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8088772:	4b14      	ldr	r3, [pc, #80]	; (80887c4 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8088774:	4f14      	ldr	r7, [pc, #80]	; (80887c8 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8088776:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8088778:	4b14      	ldr	r3, [pc, #80]	; (80887cc <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808877a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 808877c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 808877e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8088780:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8088782:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8088784:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8088786:	d01b      	beq.n	80887c0 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8088788:	a80a      	add	r0, sp, #40	; 0x28
 808878a:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 808878e:	f002 faa3 	bl	808acd8 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8088792:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8088794:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8088796:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8088798:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 808879c:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 808879e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80887a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80887a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80887a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80887a6:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80887aa:	4c09      	ldr	r4, [pc, #36]	; (80887d0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80887ac:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80887b0:	ad01      	add	r5, sp, #4
 80887b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80887b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80887b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80887b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80887ba:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80887bc:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80887c0:	b00b      	add	sp, #44	; 0x2c
 80887c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80887c4:	20000bbc 	.word	0x20000bbc
 80887c8:	20000bb8 	.word	0x20000bb8
 80887cc:	20000bb4 	.word	0x20000bb4
 80887d0:	20000b88 	.word	0x20000b88

080887d4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80887d4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80887d6:	2000      	movs	r0, #0
 80887d8:	f7ff f8e6 	bl	80879a8 <spark_sync_time_pending>
 80887dc:	b128      	cbz	r0, 80887ea <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80887de:	f7ff f8db 	bl	8087998 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80887e2:	f080 0001 	eor.w	r0, r0, #1
 80887e6:	b2c0      	uxtb	r0, r0
 80887e8:	bd08      	pop	{r3, pc}
 80887ea:	2001      	movs	r0, #1
    }
 80887ec:	bd08      	pop	{r3, pc}
	...

080887f0 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80887f0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80887f2:	f7ff ffbd 	bl	8088770 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80887f6:	4b02      	ldr	r3, [pc, #8]	; (8088800 <_ZN9TimeClass5monthEl+0x10>)
 80887f8:	6918      	ldr	r0, [r3, #16]
}
 80887fa:	3001      	adds	r0, #1
 80887fc:	bd08      	pop	{r3, pc}
 80887fe:	bf00      	nop
 8088800:	20000b88 	.word	0x20000b88

08088804 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8088804:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8088806:	4909      	ldr	r1, [pc, #36]	; (808882c <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8088808:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808880a:	f001 ffc1 	bl	808a790 <__aeabi_fcmplt>
 808880e:	b960      	cbnz	r0, 808882a <_ZN9TimeClass4zoneEf+0x26>
 8088810:	4907      	ldr	r1, [pc, #28]	; (8088830 <_ZN9TimeClass4zoneEf+0x2c>)
 8088812:	4620      	mov	r0, r4
 8088814:	f001 ffda 	bl	808a7cc <__aeabi_fcmpgt>
 8088818:	b938      	cbnz	r0, 808882a <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808881a:	4906      	ldr	r1, [pc, #24]	; (8088834 <_ZN9TimeClass4zoneEf+0x30>)
 808881c:	4620      	mov	r0, r4
 808881e:	f001 fe19 	bl	808a454 <__aeabi_fmul>
 8088822:	f001 ffdd 	bl	808a7e0 <__aeabi_f2iz>
 8088826:	4b04      	ldr	r3, [pc, #16]	; (8088838 <_ZN9TimeClass4zoneEf+0x34>)
 8088828:	6018      	str	r0, [r3, #0]
 808882a:	bd10      	pop	{r4, pc}
 808882c:	c1400000 	.word	0xc1400000
 8088830:	41600000 	.word	0x41600000
 8088834:	45610000 	.word	0x45610000
 8088838:	20000bbc 	.word	0x20000bbc

0808883c <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 808883c:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
 808883e:	f7fe feb5 	bl	80875ac <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}
 8088842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 8088846:	2200      	movs	r2, #0
 8088848:	4611      	mov	r1, r2
 808884a:	4610      	mov	r0, r2
 808884c:	f7ff b816 	b.w	808787c <system_notify_time_changed>

08088850 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8088850:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8088852:	4b0e      	ldr	r3, [pc, #56]	; (808888c <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8088854:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8088856:	681b      	ldr	r3, [r3, #0]
 8088858:	a802      	add	r0, sp, #8
 808885a:	4419      	add	r1, r3
 808885c:	4b0c      	ldr	r3, [pc, #48]	; (8088890 <_ZN9TimeClass7timeStrEl+0x40>)
 808885e:	681b      	ldr	r3, [r3, #0]
 8088860:	4419      	add	r1, r3
 8088862:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8088866:	f002 fa37 	bl	808acd8 <localtime>
        char* ascstr = asctime(calendar_time);
 808886a:	f002 f9e3 	bl	808ac34 <asctime>
 808886e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8088870:	f003 f8ac 	bl	808b9cc <strlen>
        ascstr[len-1] = 0; // remove final newline
 8088874:	2300      	movs	r3, #0
 8088876:	4428      	add	r0, r5
 8088878:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 808887c:	4629      	mov	r1, r5
 808887e:	4620      	mov	r0, r4
 8088880:	f7ff fc31 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8088884:	4620      	mov	r0, r4
 8088886:	b003      	add	sp, #12
 8088888:	bd30      	pop	{r4, r5, pc}
 808888a:	bf00      	nop
 808888c:	20000bbc 	.word	0x20000bbc
 8088890:	20000bb4 	.word	0x20000bb4

08088894 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8088894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8088898:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 808889a:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808889c:	4607      	mov	r7, r0
 808889e:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 80888a0:	4620      	mov	r0, r4
 80888a2:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80888a4:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 80888a6:	f002 fb75 	bl	808af94 <strcpy>
    size_t len = strlen(format_str);
 80888aa:	4620      	mov	r0, r4
 80888ac:	f003 f88e 	bl	808b9cc <strlen>
 80888b0:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80888b2:	b925      	cbnz	r5, 80888be <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 80888b4:	4924      	ldr	r1, [pc, #144]	; (8088948 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 80888b6:	a803      	add	r0, sp, #12
 80888b8:	f002 fb6c 	bl	808af94 <strcpy>
 80888bc:	e013      	b.n	80888e6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80888be:	213c      	movs	r1, #60	; 0x3c
 80888c0:	fb95 f2f1 	sdiv	r2, r5, r1
 80888c4:	2a00      	cmp	r2, #0
 80888c6:	bfb8      	it	lt
 80888c8:	4252      	neglt	r2, r2
 80888ca:	fb92 f3f1 	sdiv	r3, r2, r1
 80888ce:	fb01 2213 	mls	r2, r1, r3, r2
 80888d2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80888d6:	9200      	str	r2, [sp, #0]
 80888d8:	fb95 f3f3 	sdiv	r3, r5, r3
 80888dc:	4a1b      	ldr	r2, [pc, #108]	; (808894c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 80888de:	2110      	movs	r1, #16
 80888e0:	a803      	add	r0, sp, #12
 80888e2:	f7ff f8a1 	bl	8087a28 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80888e6:	4625      	mov	r5, r4
 80888e8:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80888ea:	f108 3aff 	add.w	sl, r8, #4294967295
 80888ee:	45b2      	cmp	sl, r6
 80888f0:	d91b      	bls.n	808892a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80888f2:	782b      	ldrb	r3, [r5, #0]
 80888f4:	2b25      	cmp	r3, #37	; 0x25
 80888f6:	d116      	bne.n	8088926 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 80888f8:	786b      	ldrb	r3, [r5, #1]
 80888fa:	2b7a      	cmp	r3, #122	; 0x7a
 80888fc:	d113      	bne.n	8088926 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 80888fe:	a803      	add	r0, sp, #12
 8088900:	f003 f864 	bl	808b9cc <strlen>
 8088904:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8088906:	4430      	add	r0, r6
 8088908:	ebc6 020a 	rsb	r2, r6, sl
 808890c:	1ca9      	adds	r1, r5, #2
 808890e:	4420      	add	r0, r4
 8088910:	f002 faed 	bl	808aeee <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8088914:	4642      	mov	r2, r8
 8088916:	a903      	add	r1, sp, #12
 8088918:	4628      	mov	r0, r5
 808891a:	f002 fae8 	bl	808aeee <memcpy>
            len = strlen(format_str);
 808891e:	4620      	mov	r0, r4
 8088920:	f003 f854 	bl	808b9cc <strlen>
 8088924:	4680      	mov	r8, r0
 8088926:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8088928:	e7de      	b.n	80888e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 808892a:	464b      	mov	r3, r9
 808892c:	4622      	mov	r2, r4
 808892e:	2132      	movs	r1, #50	; 0x32
 8088930:	a807      	add	r0, sp, #28
 8088932:	f002 fb97 	bl	808b064 <strftime>
    return String(buf);
 8088936:	a907      	add	r1, sp, #28
 8088938:	4638      	mov	r0, r7
 808893a:	f7ff fbd4 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
}
 808893e:	4638      	mov	r0, r7
 8088940:	b024      	add	sp, #144	; 0x90
 8088942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088946:	bf00      	nop
 8088948:	08090cd9 	.word	0x08090cd9
 808894c:	080906b1 	.word	0x080906b1

08088950 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 8088950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8088952:	4605      	mov	r5, r0
 8088954:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 8088956:	461c      	mov	r4, r3
 8088958:	b913      	cbnz	r3, 8088960 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 808895a:	4b12      	ldr	r3, [pc, #72]	; (80889a4 <_ZN9TimeClass6formatElPKc+0x54>)
 808895c:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 808895e:	b12c      	cbz	r4, 808896c <_ZN9TimeClass6formatElPKc+0x1c>
 8088960:	4b11      	ldr	r3, [pc, #68]	; (80889a8 <_ZN9TimeClass6formatElPKc+0x58>)
 8088962:	4620      	mov	r0, r4
 8088964:	6819      	ldr	r1, [r3, #0]
 8088966:	f002 fb0b 	bl	808af80 <strcmp>
 808896a:	b920      	cbnz	r0, 8088976 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 808896c:	9901      	ldr	r1, [sp, #4]
 808896e:	4628      	mov	r0, r5
 8088970:	f7ff ff6e 	bl	8088850 <_ZN9TimeClass7timeStrEl>
 8088974:	e013      	b.n	808899e <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 8088976:	4f0d      	ldr	r7, [pc, #52]	; (80889ac <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 8088978:	9a01      	ldr	r2, [sp, #4]
 808897a:	683b      	ldr	r3, [r7, #0]
 808897c:	4e0c      	ldr	r6, [pc, #48]	; (80889b0 <_ZN9TimeClass6formatElPKc+0x60>)
 808897e:	441a      	add	r2, r3
 8088980:	6833      	ldr	r3, [r6, #0]
 8088982:	a802      	add	r0, sp, #8
 8088984:	4413      	add	r3, r2
 8088986:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 808898a:	f002 f9a5 	bl	808acd8 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808898e:	683a      	ldr	r2, [r7, #0]
 8088990:	6833      	ldr	r3, [r6, #0]
 8088992:	4601      	mov	r1, r0
 8088994:	4413      	add	r3, r2
 8088996:	4628      	mov	r0, r5
 8088998:	4622      	mov	r2, r4
 808899a:	f7ff ff7b 	bl	8088894 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 808899e:	4628      	mov	r0, r5
 80889a0:	b003      	add	sp, #12
 80889a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80889a4:	20000bb0 	.word	0x20000bb0
 80889a8:	200000dc 	.word	0x200000dc
 80889ac:	20000bbc 	.word	0x20000bbc
 80889b0:	20000bb4 	.word	0x20000bb4

080889b4 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80889b4:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80889b6:	2000      	movs	r0, #0
 80889b8:	f7fe fe18 	bl	80875ec <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80889bc:	4604      	mov	r4, r0
 80889be:	b968      	cbnz	r0, 80889dc <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80889c0:	f7fe ff2c 	bl	808781c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80889c4:	2801      	cmp	r0, #1
 80889c6:	d10b      	bne.n	80889e0 <_ZN9TimeClass7isValidEv+0x2c>
 80889c8:	4620      	mov	r0, r4
 80889ca:	f7fe ff4f 	bl	808786c <system_thread_get_state>
 80889ce:	b938      	cbnz	r0, 80889e0 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80889d0:	f7ff ff00 	bl	80887d4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80889d4:	b930      	cbnz	r0, 80889e4 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80889d6:	f7fe ffcf 	bl	8087978 <spark_process>
 80889da:	e7f9      	b.n	80889d0 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80889dc:	2001      	movs	r0, #1
 80889de:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80889e0:	2000      	movs	r0, #0
 80889e2:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80889e4:	f7ff fef6 	bl	80887d4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80889e8:	2000      	movs	r0, #0
 80889ea:	f7fe fdff 	bl	80875ec <HAL_RTC_Time_Is_Valid>
 80889ee:	3000      	adds	r0, #0
 80889f0:	bf18      	it	ne
 80889f2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80889f4:	bd10      	pop	{r4, pc}

080889f6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80889f6:	b508      	push	{r3, lr}
    (void)isValid();
 80889f8:	f7ff ffdc 	bl	80889b4 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80889fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8088a00:	f7fe bdcc 	b.w	808759c <HAL_RTC_Get_UnixTime>

08088a04 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8088a04:	b508      	push	{r3, lr}
	return hour(now());
 8088a06:	f7ff fff6 	bl	80889f6 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8088a0a:	f7ff feb1 	bl	8088770 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8088a0e:	4b01      	ldr	r3, [pc, #4]	; (8088a14 <_ZN9TimeClass4hourEv+0x10>)
 8088a10:	6898      	ldr	r0, [r3, #8]
 8088a12:	bd08      	pop	{r3, pc}
 8088a14:	20000b88 	.word	0x20000b88

08088a18 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8088a18:	b508      	push	{r3, lr}
	return minute(now());
 8088a1a:	f7ff ffec 	bl	80889f6 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8088a1e:	f7ff fea7 	bl	8088770 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8088a22:	4b01      	ldr	r3, [pc, #4]	; (8088a28 <_ZN9TimeClass6minuteEv+0x10>)
 8088a24:	6858      	ldr	r0, [r3, #4]
 8088a26:	bd08      	pop	{r3, pc}
 8088a28:	20000b88 	.word	0x20000b88

08088a2c <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 8088a2c:	b508      	push	{r3, lr}
	return second(now());
 8088a2e:	f7ff ffe2 	bl	80889f6 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8088a32:	f7ff fe9d 	bl	8088770 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 8088a36:	4b01      	ldr	r3, [pc, #4]	; (8088a3c <_ZN9TimeClass6secondEv+0x10>)
 8088a38:	6818      	ldr	r0, [r3, #0]
 8088a3a:	bd08      	pop	{r3, pc}
 8088a3c:	20000b88 	.word	0x20000b88

08088a40 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8088a40:	b508      	push	{r3, lr}
	return day(now());
 8088a42:	f7ff ffd8 	bl	80889f6 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8088a46:	f7ff fe93 	bl	8088770 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8088a4a:	4b01      	ldr	r3, [pc, #4]	; (8088a50 <_ZN9TimeClass3dayEv+0x10>)
 8088a4c:	68d8      	ldr	r0, [r3, #12]
 8088a4e:	bd08      	pop	{r3, pc}
 8088a50:	20000b88 	.word	0x20000b88

08088a54 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 8088a54:	b508      	push	{r3, lr}
	return month(now());
 8088a56:	f7ff ffce 	bl	80889f6 <_ZN9TimeClass3nowEv>
}
 8088a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 8088a5e:	f7ff bec7 	b.w	80887f0 <_ZN9TimeClass5monthEl>
	...

08088a64 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 8088a64:	b508      	push	{r3, lr}
	return year(now());
 8088a66:	f7ff ffc6 	bl	80889f6 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8088a6a:	f7ff fe81 	bl	8088770 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 8088a6e:	4b01      	ldr	r3, [pc, #4]	; (8088a74 <_ZN9TimeClass4yearEv+0x10>)
 8088a70:	6958      	ldr	r0, [r3, #20]
 8088a72:	bd08      	pop	{r3, pc}
 8088a74:	20000b88 	.word	0x20000b88

08088a78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8088a78:	4b02      	ldr	r3, [pc, #8]	; (8088a84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8088a7a:	681a      	ldr	r2, [r3, #0]
 8088a7c:	4b02      	ldr	r3, [pc, #8]	; (8088a88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8088a7e:	601a      	str	r2, [r3, #0]
 8088a80:	4770      	bx	lr
 8088a82:	bf00      	nop
 8088a84:	200000dc 	.word	0x200000dc
 8088a88:	20000bb0 	.word	0x20000bb0

08088a8c <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
 8088a8c:	f7fe bd0e 	b.w	80874ac <HAL_ADC_Set_Sample_Time>

08088a90 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8088a90:	2100      	movs	r1, #0
 8088a92:	f7fe bed3 	b.w	808783c <system_delay_ms>

08088a96 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8088a96:	b510      	push	{r4, lr}
 8088a98:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088a9a:	f7fe fa9b 	bl	8086fd4 <_ZNSt14_Function_baseD1Ev>
 8088a9e:	4620      	mov	r0, r4
 8088aa0:	bd10      	pop	{r4, pc}
	...

08088aa4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088aa4:	4803      	ldr	r0, [pc, #12]	; (8088ab4 <_GLOBAL__sub_I_RGB+0x10>)
 8088aa6:	2300      	movs	r3, #0
 8088aa8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8088aaa:	4a03      	ldr	r2, [pc, #12]	; (8088ab8 <_GLOBAL__sub_I_RGB+0x14>)
 8088aac:	4903      	ldr	r1, [pc, #12]	; (8088abc <_GLOBAL__sub_I_RGB+0x18>)
 8088aae:	f000 bd73 	b.w	8089598 <__aeabi_atexit>
 8088ab2:	bf00      	nop
 8088ab4:	20000bc0 	.word	0x20000bc0
 8088ab8:	200001d0 	.word	0x200001d0
 8088abc:	08088a97 	.word	0x08088a97

08088ac0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8088ac0:	6800      	ldr	r0, [r0, #0]
 8088ac2:	f000 bbe1 	b.w	8089288 <_ZN7TwoWire4lockEv>

08088ac6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8088ac6:	b510      	push	{r4, lr}
 8088ac8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8088aca:	6001      	str	r1, [r0, #0]
 8088acc:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8088ace:	b10a      	cbz	r2, 8088ad4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8088ad0:	f7ff fff6 	bl	8088ac0 <_ZN9FuelGauge4lockEv>
    }
}
 8088ad4:	4620      	mov	r0, r4
 8088ad6:	bd10      	pop	{r4, pc}

08088ad8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8088ad8:	b538      	push	{r3, r4, r5, lr}
 8088ada:	4604      	mov	r4, r0
 8088adc:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088ade:	f000 fd3b 	bl	8089558 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8088ae2:	462a      	mov	r2, r5
 8088ae4:	4601      	mov	r1, r0
 8088ae6:	4620      	mov	r0, r4
 8088ae8:	f7ff ffed 	bl	8088ac6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8088aec:	4620      	mov	r0, r4
 8088aee:	bd38      	pop	{r3, r4, r5, pc}

08088af0 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8088af0:	6800      	ldr	r0, [r0, #0]
 8088af2:	f000 bbd2 	b.w	808929a <_ZN7TwoWire6unlockEv>

08088af6 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8088af6:	b510      	push	{r4, lr}
{
    if (lock_) {
 8088af8:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8088afa:	4604      	mov	r4, r0
{
    if (lock_) {
 8088afc:	b10b      	cbz	r3, 8088b02 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8088afe:	f7ff fff7 	bl	8088af0 <_ZN9FuelGauge6unlockEv>
    }
}
 8088b02:	4620      	mov	r0, r4
 8088b04:	bd10      	pop	{r4, pc}

08088b06 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8088b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088b08:	4604      	mov	r4, r0
 8088b0a:	460f      	mov	r7, r1
 8088b0c:	4616      	mov	r6, r2
 8088b0e:	461d      	mov	r5, r3
 8088b10:	f7ff ffd6 	bl	8088ac0 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8088b14:	6820      	ldr	r0, [r4, #0]
 8088b16:	2136      	movs	r1, #54	; 0x36
 8088b18:	f000 fba8 	bl	808926c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8088b1c:	6820      	ldr	r0, [r4, #0]
 8088b1e:	4639      	mov	r1, r7
 8088b20:	6803      	ldr	r3, [r0, #0]
 8088b22:	689b      	ldr	r3, [r3, #8]
 8088b24:	4798      	blx	r3
    i2c_.endTransmission(true);
 8088b26:	2101      	movs	r1, #1
 8088b28:	6820      	ldr	r0, [r4, #0]
 8088b2a:	f000 fba2 	bl	8089272 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 8088b2e:	2202      	movs	r2, #2
 8088b30:	2136      	movs	r1, #54	; 0x36
 8088b32:	2301      	movs	r3, #1
 8088b34:	6820      	ldr	r0, [r4, #0]
 8088b36:	f000 fb90 	bl	808925a <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 8088b3a:	6820      	ldr	r0, [r4, #0]
 8088b3c:	6803      	ldr	r3, [r0, #0]
 8088b3e:	695b      	ldr	r3, [r3, #20]
 8088b40:	4798      	blx	r3
 8088b42:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8088b44:	6820      	ldr	r0, [r4, #0]
 8088b46:	6803      	ldr	r3, [r0, #0]
 8088b48:	695b      	ldr	r3, [r3, #20]
 8088b4a:	4798      	blx	r3
 8088b4c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8088b4e:	4620      	mov	r0, r4
}
 8088b50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8088b54:	f7ff bfcc 	b.w	8088af0 <_ZN9FuelGauge6unlockEv>

08088b58 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8088b58:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 8088b5a:	2200      	movs	r2, #0
	byte LSB = 0;
 8088b5c:	ab02      	add	r3, sp, #8
 8088b5e:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8088b62:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8088b66:	2104      	movs	r1, #4
 8088b68:	f10d 0206 	add.w	r2, sp, #6
 8088b6c:	f7ff ffcb 	bl	8088b06 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8088b70:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8088b74:	f000 ffb2 	bl	8089adc <__aeabi_i2d>
 8088b78:	2200      	movs	r2, #0
 8088b7a:	4b08      	ldr	r3, [pc, #32]	; (8088b9c <_ZN9FuelGauge6getSoCEv+0x44>)
 8088b7c:	f001 f814 	bl	8089ba8 <__aeabi_dmul>
 8088b80:	f001 fb0a 	bl	808a198 <__aeabi_d2f>
 8088b84:	4604      	mov	r4, r0
 8088b86:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8088b8a:	f001 fc0f 	bl	808a3ac <__aeabi_i2f>
 8088b8e:	4601      	mov	r1, r0
 8088b90:	4620      	mov	r0, r4
 8088b92:	f001 fb57 	bl	808a244 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8088b96:	b002      	add	sp, #8
 8088b98:	bd10      	pop	{r4, pc}
 8088b9a:	bf00      	nop
 8088b9c:	3f700000 	.word	0x3f700000

08088ba0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8088ba0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8088ba2:	4b18      	ldr	r3, [pc, #96]	; (8088c04 <serialEventRun+0x64>)
 8088ba4:	b133      	cbz	r3, 8088bb4 <serialEventRun+0x14>
 8088ba6:	f000 f98f 	bl	8088ec8 <_Z16_fetch_usbserialv>
 8088baa:	6803      	ldr	r3, [r0, #0]
 8088bac:	691b      	ldr	r3, [r3, #16]
 8088bae:	4798      	blx	r3
 8088bb0:	2800      	cmp	r0, #0
 8088bb2:	dc1e      	bgt.n	8088bf2 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8088bb4:	4b14      	ldr	r3, [pc, #80]	; (8088c08 <serialEventRun+0x68>)
 8088bb6:	b133      	cbz	r3, 8088bc6 <serialEventRun+0x26>
 8088bb8:	f000 fad4 	bl	8089164 <_Z22__fetch_global_Serial1v>
 8088bbc:	6803      	ldr	r3, [r0, #0]
 8088bbe:	691b      	ldr	r3, [r3, #16]
 8088bc0:	4798      	blx	r3
 8088bc2:	2800      	cmp	r0, #0
 8088bc4:	dc18      	bgt.n	8088bf8 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8088bc6:	4b11      	ldr	r3, [pc, #68]	; (8088c0c <serialEventRun+0x6c>)
 8088bc8:	b10b      	cbz	r3, 8088bce <serialEventRun+0x2e>
 8088bca:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8088bce:	4b10      	ldr	r3, [pc, #64]	; (8088c10 <serialEventRun+0x70>)
 8088bd0:	b10b      	cbz	r3, 8088bd6 <serialEventRun+0x36>
 8088bd2:	f7f7 ff71 	bl	8080ab8 <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8088bd6:	4b0f      	ldr	r3, [pc, #60]	; (8088c14 <serialEventRun+0x74>)
 8088bd8:	b10b      	cbz	r3, 8088bde <serialEventRun+0x3e>
 8088bda:	f7f7 ffa7 	bl	8080b2c <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8088bde:	4b0e      	ldr	r3, [pc, #56]	; (8088c18 <serialEventRun+0x78>)
 8088be0:	b17b      	cbz	r3, 8088c02 <serialEventRun+0x62>
 8088be2:	f000 f9ad 	bl	8088f40 <_Z17_fetch_usbserial1v>
 8088be6:	6803      	ldr	r3, [r0, #0]
 8088be8:	691b      	ldr	r3, [r3, #16]
 8088bea:	4798      	blx	r3
 8088bec:	2800      	cmp	r0, #0
 8088bee:	dc06      	bgt.n	8088bfe <serialEventRun+0x5e>
 8088bf0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8088bf2:	f3af 8000 	nop.w
 8088bf6:	e7dd      	b.n	8088bb4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8088bf8:	f3af 8000 	nop.w
 8088bfc:	e7e3      	b.n	8088bc6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8088bfe:	f3af 8000 	nop.w
 8088c02:	bd08      	pop	{r3, pc}
	...
 8088c10:	08080ab9 	.word	0x08080ab9
 8088c14:	08080b2d 	.word	0x08080b2d
 8088c18:	00000000 	.word	0x00000000

08088c1c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8088c1c:	b508      	push	{r3, lr}
	serialEventRun();
 8088c1e:	f7ff ffbf 	bl	8088ba0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8088c22:	f7fe fcb3 	bl	808758c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8088c26:	4b01      	ldr	r3, [pc, #4]	; (8088c2c <_post_loop+0x10>)
 8088c28:	6018      	str	r0, [r3, #0]
 8088c2a:	bd08      	pop	{r3, pc}
 8088c2c:	2000109c 	.word	0x2000109c

08088c30 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8088c30:	4802      	ldr	r0, [pc, #8]	; (8088c3c <_Z33system_initialize_user_backup_ramv+0xc>)
 8088c32:	4a03      	ldr	r2, [pc, #12]	; (8088c40 <_Z33system_initialize_user_backup_ramv+0x10>)
 8088c34:	4903      	ldr	r1, [pc, #12]	; (8088c44 <_Z33system_initialize_user_backup_ramv+0x14>)
 8088c36:	1a12      	subs	r2, r2, r0
 8088c38:	f002 b959 	b.w	808aeee <memcpy>
 8088c3c:	40024000 	.word	0x40024000
 8088c40:	40024004 	.word	0x40024004
 8088c44:	08090ea8 	.word	0x08090ea8

08088c48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8088c48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088c4a:	2300      	movs	r3, #0
 8088c4c:	9300      	str	r3, [sp, #0]
 8088c4e:	461a      	mov	r2, r3
 8088c50:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8088c54:	f7fe fe24 	bl	80878a0 <system_ctrl_set_result>
}
 8088c58:	b003      	add	sp, #12
 8088c5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08088c60 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8088c60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8088c62:	8843      	ldrh	r3, [r0, #2]
 8088c64:	2b0a      	cmp	r3, #10
 8088c66:	d008      	beq.n	8088c7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8088c68:	2b50      	cmp	r3, #80	; 0x50
 8088c6a:	d109      	bne.n	8088c80 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8088c6c:	4b09      	ldr	r3, [pc, #36]	; (8088c94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8088c6e:	681b      	ldr	r3, [r3, #0]
 8088c70:	b13b      	cbz	r3, 8088c82 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8088c72:	b003      	add	sp, #12
 8088c74:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8088c78:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8088c7a:	f7ff ffe5 	bl	8088c48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8088c7e:	e006      	b.n	8088c8e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088c80:	2300      	movs	r3, #0
 8088c82:	9300      	str	r3, [sp, #0]
 8088c84:	461a      	mov	r2, r3
 8088c86:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8088c8a:	f7fe fe09 	bl	80878a0 <system_ctrl_set_result>
        break;
    }
}
 8088c8e:	b003      	add	sp, #12
 8088c90:	f85d fb04 	ldr.w	pc, [sp], #4
 8088c94:	20000bd0 	.word	0x20000bd0

08088c98 <module_user_init_hook>:

void module_user_init_hook()
{
 8088c98:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8088c9a:	4c10      	ldr	r4, [pc, #64]	; (8088cdc <module_user_init_hook+0x44>)
 8088c9c:	4d10      	ldr	r5, [pc, #64]	; (8088ce0 <module_user_init_hook+0x48>)
 8088c9e:	6823      	ldr	r3, [r4, #0]
 8088ca0:	42ab      	cmp	r3, r5
 8088ca2:	4b10      	ldr	r3, [pc, #64]	; (8088ce4 <module_user_init_hook+0x4c>)
 8088ca4:	bf0c      	ite	eq
 8088ca6:	2201      	moveq	r2, #1
 8088ca8:	2200      	movne	r2, #0
 8088caa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8088cac:	d002      	beq.n	8088cb4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8088cae:	f7ff ffbf 	bl	8088c30 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8088cb2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8088cb4:	f7fe fc5a 	bl	808756c <HAL_RNG_GetRandomNumber>
 8088cb8:	4604      	mov	r4, r0
    srand(seed);
 8088cba:	f002 f92b 	bl	808af14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8088cbe:	4b0a      	ldr	r3, [pc, #40]	; (8088ce8 <module_user_init_hook+0x50>)
 8088cc0:	b113      	cbz	r3, 8088cc8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8088cc2:	4620      	mov	r0, r4
 8088cc4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8088cc8:	2100      	movs	r1, #0
 8088cca:	4807      	ldr	r0, [pc, #28]	; (8088ce8 <module_user_init_hook+0x50>)
 8088ccc:	f7fe fe74 	bl	80879b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8088cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8088cd4:	2100      	movs	r1, #0
 8088cd6:	4805      	ldr	r0, [pc, #20]	; (8088cec <module_user_init_hook+0x54>)
 8088cd8:	f7fe bdd8 	b.w	808788c <system_ctrl_set_app_request_handler>
 8088cdc:	40024000 	.word	0x40024000
 8088ce0:	9a271c1e 	.word	0x9a271c1e
 8088ce4:	20000bd4 	.word	0x20000bd4
 8088ce8:	00000000 	.word	0x00000000
 8088cec:	08088c61 	.word	0x08088c61

08088cf0 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8088cf0:	b510      	push	{r4, lr}
 8088cf2:	b088      	sub	sp, #32
 8088cf4:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8088cf6:	4668      	mov	r0, sp
 8088cf8:	f7ff f9f5 	bl	80880e6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8088cfc:	4669      	mov	r1, sp
 8088cfe:	a804      	add	r0, sp, #16
 8088d00:	f7ff fa30 	bl	8088164 <_ZN6StringC1ERKS_>
 8088d04:	a804      	add	r0, sp, #16
 8088d06:	47a0      	blx	r4
 8088d08:	4604      	mov	r4, r0
 8088d0a:	a804      	add	r0, sp, #16
 8088d0c:	f7ff f9a4 	bl	8088058 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8088d10:	4668      	mov	r0, sp
 8088d12:	f7ff f9a1 	bl	8088058 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8088d16:	4620      	mov	r0, r4
 8088d18:	b008      	add	sp, #32
 8088d1a:	bd10      	pop	{r4, pc}

08088d1c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8088d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088d1e:	4607      	mov	r7, r0
 8088d20:	460e      	mov	r6, r1
 8088d22:	4615      	mov	r5, r2
 8088d24:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8088d26:	2410      	movs	r4, #16
 8088d28:	4622      	mov	r2, r4
 8088d2a:	2100      	movs	r1, #0
 8088d2c:	4668      	mov	r0, sp
 8088d2e:	f002 f8e9 	bl	808af04 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8088d32:	2200      	movs	r2, #0
 8088d34:	4669      	mov	r1, sp
 8088d36:	4610      	mov	r0, r2
         size = sizeof(*this);
 8088d38:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8088d3c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8088d3e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8088d40:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8088d42:	f7fe fe11 	bl	8087968 <spark_function>
}
 8088d46:	b005      	add	sp, #20
 8088d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088d4a <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8088d4a:	4770      	bx	lr

08088d4c <_ZN9IPAddressD0Ev>:
 8088d4c:	b510      	push	{r4, lr}
 8088d4e:	4604      	mov	r4, r0
 8088d50:	2108      	movs	r1, #8
 8088d52:	f000 fc26 	bl	80895a2 <_ZdlPvj>
 8088d56:	4620      	mov	r0, r4
 8088d58:	bd10      	pop	{r4, pc}

08088d5a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8088d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088d5c:	460f      	mov	r7, r1
 8088d5e:	f100 0608 	add.w	r6, r0, #8
 8088d62:	1d05      	adds	r5, r0, #4
 8088d64:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8088d66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8088d6a:	220a      	movs	r2, #10
 8088d6c:	4638      	mov	r0, r7
 8088d6e:	f7ff fb96 	bl	808849e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8088d72:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8088d74:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8088d76:	d007      	beq.n	8088d88 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8088d78:	2c00      	cmp	r4, #0
 8088d7a:	d0f4      	beq.n	8088d66 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8088d7c:	212e      	movs	r1, #46	; 0x2e
 8088d7e:	4638      	mov	r0, r7
 8088d80:	f7ff fb40 	bl	8088404 <_ZN5Print5printEc>
 8088d84:	4404      	add	r4, r0
 8088d86:	e7ee      	b.n	8088d66 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8088d88:	4620      	mov	r0, r4
 8088d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088d8c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8088d8c:	4a02      	ldr	r2, [pc, #8]	; (8088d98 <_ZN9IPAddressC1Ev+0xc>)
 8088d8e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8088d90:	2200      	movs	r2, #0
 8088d92:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8088d94:	4770      	bx	lr
 8088d96:	bf00      	nop
 8088d98:	080906e0 	.word	0x080906e0

08088d9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8088d9c:	4a02      	ldr	r2, [pc, #8]	; (8088da8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8088d9e:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8088da0:	680a      	ldr	r2, [r1, #0]
 8088da2:	6042      	str	r2, [r0, #4]
}
 8088da4:	4770      	bx	lr
 8088da6:	bf00      	nop
 8088da8:	080906e0 	.word	0x080906e0

08088dac <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8088dac:	4a01      	ldr	r2, [pc, #4]	; (8088db4 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8088dae:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8088db0:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8088db2:	4770      	bx	lr
 8088db4:	080906e0 	.word	0x080906e0

08088db8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8088db8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8088dba:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8088dbe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8088dc2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8088dc6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8088dca:	6041      	str	r1, [r0, #4]
 8088dcc:	bd10      	pop	{r4, pc}
	...

08088dd0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8088dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8088dd2:	4d04      	ldr	r5, [pc, #16]	; (8088de4 <_ZN9IPAddressC1Ehhhh+0x14>)
 8088dd4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8088dd6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8088dda:	9500      	str	r5, [sp, #0]
 8088ddc:	f7ff ffec 	bl	8088db8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8088de0:	b003      	add	sp, #12
 8088de2:	bd30      	pop	{r4, r5, pc}
 8088de4:	080906e0 	.word	0x080906e0

08088de8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8088de8:	7441      	strb	r1, [r0, #17]
 8088dea:	4770      	bx	lr

08088dec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8088dec:	4770      	bx	lr

08088dee <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8088dee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8088df0:	2100      	movs	r1, #0
 8088df2:	7c00      	ldrb	r0, [r0, #16]
 8088df4:	f7fe fcf2 	bl	80877dc <HAL_USB_USART_Receive_Data>
}
 8088df8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8088dfc:	bf28      	it	cs
 8088dfe:	f04f 30ff 	movcs.w	r0, #4294967295
 8088e02:	bd08      	pop	{r3, pc}

08088e04 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8088e04:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8088e06:	2101      	movs	r1, #1
 8088e08:	7c00      	ldrb	r0, [r0, #16]
 8088e0a:	f7fe fce7 	bl	80877dc <HAL_USB_USART_Receive_Data>
}
 8088e0e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8088e12:	bf28      	it	cs
 8088e14:	f04f 30ff 	movcs.w	r0, #4294967295
 8088e18:	bd08      	pop	{r3, pc}

08088e1a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8088e1a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8088e1c:	7c00      	ldrb	r0, [r0, #16]
 8088e1e:	f7fe fcd5 	bl	80877cc <HAL_USB_USART_Available_Data_For_Write>
}
 8088e22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8088e26:	bd08      	pop	{r3, pc}

08088e28 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8088e28:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8088e2a:	7c00      	ldrb	r0, [r0, #16]
 8088e2c:	f7fe fcc6 	bl	80877bc <HAL_USB_USART_Available_Data>
}
 8088e30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8088e34:	bd08      	pop	{r3, pc}

08088e36 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8088e36:	7c00      	ldrb	r0, [r0, #16]
 8088e38:	f7fe bce0 	b.w	80877fc <HAL_USB_USART_Flush_Data>

08088e3c <_ZN9USBSerialD0Ev>:
 8088e3c:	b510      	push	{r4, lr}
 8088e3e:	4604      	mov	r4, r0
 8088e40:	2114      	movs	r1, #20
 8088e42:	f000 fbae 	bl	80895a2 <_ZdlPvj>
 8088e46:	4620      	mov	r0, r4
 8088e48:	bd10      	pop	{r4, pc}

08088e4a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8088e4a:	b538      	push	{r3, r4, r5, lr}
 8088e4c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8088e4e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8088e50:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8088e52:	f7fe fcbb 	bl	80877cc <HAL_USB_USART_Available_Data_For_Write>
 8088e56:	2800      	cmp	r0, #0
 8088e58:	dc01      	bgt.n	8088e5e <_ZN9USBSerial5writeEh+0x14>
 8088e5a:	7c60      	ldrb	r0, [r4, #17]
 8088e5c:	b128      	cbz	r0, 8088e6a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8088e5e:	4629      	mov	r1, r5
 8088e60:	7c20      	ldrb	r0, [r4, #16]
 8088e62:	f7fe fcc3 	bl	80877ec <HAL_USB_USART_Send_Data>
 8088e66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8088e6a:	bd38      	pop	{r3, r4, r5, pc}

08088e6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8088e6c:	b510      	push	{r4, lr}
 8088e6e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8088e70:	2300      	movs	r3, #0
 8088e72:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8088e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8088e78:	60a3      	str	r3, [r4, #8]
 8088e7a:	4b05      	ldr	r3, [pc, #20]	; (8088e90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8088e7c:	4608      	mov	r0, r1
 8088e7e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8088e80:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8088e82:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8088e84:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8088e86:	4611      	mov	r1, r2
 8088e88:	f7fe fc88 	bl	808779c <HAL_USB_USART_Init>
}
 8088e8c:	4620      	mov	r0, r4
 8088e8e:	bd10      	pop	{r4, pc}
 8088e90:	080906f4 	.word	0x080906f4

08088e94 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8088e94:	2200      	movs	r2, #0
 8088e96:	7c00      	ldrb	r0, [r0, #16]
 8088e98:	f7fe bc88 	b.w	80877ac <HAL_USB_USART_Begin>

08088e9c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8088e9c:	b510      	push	{r4, lr}
 8088e9e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8088ea0:	2214      	movs	r2, #20
 8088ea2:	2100      	movs	r1, #0
 8088ea4:	f002 f82e 	bl	808af04 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8088ea8:	4b05      	ldr	r3, [pc, #20]	; (8088ec0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8088eaa:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8088eac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8088eae:	4b05      	ldr	r3, [pc, #20]	; (8088ec4 <_Z19acquireSerialBufferv+0x28>)
 8088eb0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8088eb2:	f240 1301 	movw	r3, #257	; 0x101
 8088eb6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8088eb8:	2381      	movs	r3, #129	; 0x81
 8088eba:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8088ebc:	bd10      	pop	{r4, pc}
 8088ebe:	bf00      	nop
 8088ec0:	20000c5d 	.word	0x20000c5d
 8088ec4:	20000bdc 	.word	0x20000bdc

08088ec8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8088ec8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8088eca:	4d0e      	ldr	r5, [pc, #56]	; (8088f04 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8088ecc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8088ece:	a801      	add	r0, sp, #4
 8088ed0:	f7ff ffe4 	bl	8088e9c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8088ed4:	6829      	ldr	r1, [r5, #0]
 8088ed6:	f011 0401 	ands.w	r4, r1, #1
 8088eda:	d110      	bne.n	8088efe <_Z16_fetch_usbserialv+0x36>
 8088edc:	4628      	mov	r0, r5
 8088ede:	f7f7 f8e0 	bl	80800a2 <__cxa_guard_acquire>
 8088ee2:	b160      	cbz	r0, 8088efe <_Z16_fetch_usbserialv+0x36>
 8088ee4:	aa01      	add	r2, sp, #4
 8088ee6:	4621      	mov	r1, r4
 8088ee8:	4807      	ldr	r0, [pc, #28]	; (8088f08 <_Z16_fetch_usbserialv+0x40>)
 8088eea:	f7ff ffbf 	bl	8088e6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8088eee:	4628      	mov	r0, r5
 8088ef0:	f7f7 f8dc 	bl	80800ac <__cxa_guard_release>
 8088ef4:	4a05      	ldr	r2, [pc, #20]	; (8088f0c <_Z16_fetch_usbserialv+0x44>)
 8088ef6:	4906      	ldr	r1, [pc, #24]	; (8088f10 <_Z16_fetch_usbserialv+0x48>)
 8088ef8:	4803      	ldr	r0, [pc, #12]	; (8088f08 <_Z16_fetch_usbserialv+0x40>)
 8088efa:	f000 fb4d 	bl	8089598 <__aeabi_atexit>
	return _usbserial;
}
 8088efe:	4802      	ldr	r0, [pc, #8]	; (8088f08 <_Z16_fetch_usbserialv+0x40>)
 8088f00:	b007      	add	sp, #28
 8088f02:	bd30      	pop	{r4, r5, pc}
 8088f04:	20000bd8 	.word	0x20000bd8
 8088f08:	20000d60 	.word	0x20000d60
 8088f0c:	200001d0 	.word	0x200001d0
 8088f10:	08088ded 	.word	0x08088ded

08088f14 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8088f14:	b510      	push	{r4, lr}
 8088f16:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8088f18:	2214      	movs	r2, #20
 8088f1a:	2100      	movs	r1, #0
 8088f1c:	f001 fff2 	bl	808af04 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8088f20:	4b05      	ldr	r3, [pc, #20]	; (8088f38 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8088f22:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8088f24:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8088f26:	4b05      	ldr	r3, [pc, #20]	; (8088f3c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8088f28:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8088f2a:	f240 1301 	movw	r3, #257	; 0x101
 8088f2e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8088f30:	2381      	movs	r3, #129	; 0x81
 8088f32:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8088f34:	bd10      	pop	{r4, pc}
 8088f36:	bf00      	nop
 8088f38:	20000e10 	.word	0x20000e10
 8088f3c:	20000d78 	.word	0x20000d78

08088f40 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8088f40:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8088f42:	4c0e      	ldr	r4, [pc, #56]	; (8088f7c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8088f44:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8088f46:	a801      	add	r0, sp, #4
 8088f48:	f7ff ffe4 	bl	8088f14 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8088f4c:	6823      	ldr	r3, [r4, #0]
 8088f4e:	07db      	lsls	r3, r3, #31
 8088f50:	d410      	bmi.n	8088f74 <_Z17_fetch_usbserial1v+0x34>
 8088f52:	4620      	mov	r0, r4
 8088f54:	f7f7 f8a5 	bl	80800a2 <__cxa_guard_acquire>
 8088f58:	b160      	cbz	r0, 8088f74 <_Z17_fetch_usbserial1v+0x34>
 8088f5a:	aa01      	add	r2, sp, #4
 8088f5c:	2101      	movs	r1, #1
 8088f5e:	4808      	ldr	r0, [pc, #32]	; (8088f80 <_Z17_fetch_usbserial1v+0x40>)
 8088f60:	f7ff ff84 	bl	8088e6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8088f64:	4620      	mov	r0, r4
 8088f66:	f7f7 f8a1 	bl	80800ac <__cxa_guard_release>
 8088f6a:	4a06      	ldr	r2, [pc, #24]	; (8088f84 <_Z17_fetch_usbserial1v+0x44>)
 8088f6c:	4906      	ldr	r1, [pc, #24]	; (8088f88 <_Z17_fetch_usbserial1v+0x48>)
 8088f6e:	4804      	ldr	r0, [pc, #16]	; (8088f80 <_Z17_fetch_usbserial1v+0x40>)
 8088f70:	f000 fb12 	bl	8089598 <__aeabi_atexit>
  return _usbserial1;
}
 8088f74:	4802      	ldr	r0, [pc, #8]	; (8088f80 <_Z17_fetch_usbserial1v+0x40>)
 8088f76:	b006      	add	sp, #24
 8088f78:	bd10      	pop	{r4, pc}
 8088f7a:	bf00      	nop
 8088f7c:	20000d74 	.word	0x20000d74
 8088f80:	20000dfc 	.word	0x20000dfc
 8088f84:	200001d0 	.word	0x200001d0
 8088f88:	08088ded 	.word	0x08088ded

08088f8c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 8088f8c:	4700      	bx	r0
	...

08088f90 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 8088f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088f92:	461c      	mov	r4, r3
 8088f94:	b085      	sub	sp, #20
 8088f96:	460e      	mov	r6, r1
 8088f98:	4617      	mov	r7, r2
 8088f9a:	4605      	mov	r5, r0
    HAL_Interrupts_Detach(pin);
 8088f9c:	f7fe fa7e 	bl	808749c <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 8088fa0:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8088fa2:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8088fa4:	f04f 0304 	mov.w	r3, #4
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8088fa8:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8088faa:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 8088fae:	bfb4      	ite	lt
 8088fb0:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8088fb2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8088fb6:	4632      	mov	r2, r6
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8088fb8:	bfa4      	itt	ge
 8088fba:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 8088fbe:	ab03      	addge	r3, sp, #12

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8088fc0:	9300      	str	r3, [sp, #0]
 8088fc2:	4906      	ldr	r1, [pc, #24]	; (8088fdc <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 8088fc4:	463b      	mov	r3, r7
 8088fc6:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8088fc8:	bfa8      	it	ge
 8088fca:	f88d 400d 	strbge.w	r4, [sp, #13]

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 8088fce:	f7fe fa5d 	bl	808748c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 8088fd2:	fab0 f080 	clz	r0, r0
 8088fd6:	0940      	lsrs	r0, r0, #5
 8088fd8:	b005      	add	sp, #20
 8088fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8088fdc:	08088f8d 	.word	0x08088f8d

08088fe0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8088fe0:	2200      	movs	r2, #0
 8088fe2:	4611      	mov	r1, r2
 8088fe4:	6840      	ldr	r0, [r0, #4]
 8088fe6:	f7fe bc87 	b.w	80878f8 <network_ready>

08088fea <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8088fea:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8088fee:	2600      	movs	r6, #0
 8088ff0:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8088ff2:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8088ff4:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8088ff6:	4688      	mov	r8, r1
 8088ff8:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8088ffa:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8088ffe:	f002 fce5 	bl	808b9cc <strlen>
 8089002:	9600      	str	r6, [sp, #0]
 8089004:	b281      	uxth	r1, r0
 8089006:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808900a:	4622      	mov	r2, r4
 808900c:	4638      	mov	r0, r7
 808900e:	f7fe fbb5 	bl	808777c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8089012:	b120      	cbz	r0, 808901e <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8089014:	4631      	mov	r1, r6
 8089016:	4628      	mov	r0, r5
 8089018:	f7ff fec8 	bl	8088dac <_ZN9IPAddressC1Em>
 808901c:	e003      	b.n	8089026 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 808901e:	4621      	mov	r1, r4
 8089020:	4628      	mov	r0, r5
 8089022:	f7ff febb 	bl	8088d9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8089026:	4628      	mov	r0, r5
 8089028:	b004      	add	sp, #16
 808902a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808902e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 808902e:	2200      	movs	r2, #0
 8089030:	4611      	mov	r1, r2
 8089032:	6840      	ldr	r0, [r0, #4]
 8089034:	f7fe bc80 	b.w	8087938 <network_listening>

08089038 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8089038:	2200      	movs	r2, #0
 808903a:	4611      	mov	r1, r2
 808903c:	6840      	ldr	r0, [r0, #4]
 808903e:	f7fe bc8b 	b.w	8087958 <network_get_listen_timeout>

08089042 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8089042:	2200      	movs	r2, #0
 8089044:	6840      	ldr	r0, [r0, #4]
 8089046:	f7fe bc7f 	b.w	8087948 <network_set_listen_timeout>

0808904a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808904a:	2200      	movs	r2, #0
 808904c:	f081 0101 	eor.w	r1, r1, #1
 8089050:	6840      	ldr	r0, [r0, #4]
 8089052:	f7fe bc69 	b.w	8087928 <network_listen>

08089056 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8089056:	2300      	movs	r3, #0
 8089058:	461a      	mov	r2, r3
 808905a:	4619      	mov	r1, r3
 808905c:	6840      	ldr	r0, [r0, #4]
 808905e:	f7fe bc53 	b.w	8087908 <network_on>

08089062 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8089062:	2200      	movs	r2, #0
 8089064:	4611      	mov	r1, r2
 8089066:	6840      	ldr	r0, [r0, #4]
 8089068:	f7fe bc36 	b.w	80878d8 <network_connecting>

0808906c <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808906c:	2200      	movs	r2, #0
 808906e:	2102      	movs	r1, #2
 8089070:	6840      	ldr	r0, [r0, #4]
 8089072:	f7fe bc39 	b.w	80878e8 <network_disconnect>

08089076 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8089076:	2300      	movs	r3, #0
 8089078:	461a      	mov	r2, r3
 808907a:	6840      	ldr	r0, [r0, #4]
 808907c:	f7fe bc24 	b.w	80878c8 <network_connect>

08089080 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8089080:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8089082:	4c08      	ldr	r4, [pc, #32]	; (80890a4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8089084:	2528      	movs	r5, #40	; 0x28
 8089086:	462a      	mov	r2, r5
 8089088:	2100      	movs	r1, #0
 808908a:	4620      	mov	r0, r4
 808908c:	f001 ff3a 	bl	808af04 <memset>
        cid = -1;
 8089090:	f04f 33ff 	mov.w	r3, #4294967295
 8089094:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8089096:	4b04      	ldr	r3, [pc, #16]	; (80890a8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8089098:	2204      	movs	r2, #4
 808909a:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808909c:	4a03      	ldr	r2, [pc, #12]	; (80890ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 808909e:	8025      	strh	r5, [r4, #0]
 80890a0:	601a      	str	r2, [r3, #0]
 80890a2:	bd38      	pop	{r3, r4, r5, pc}
 80890a4:	20000f1c 	.word	0x20000f1c
 80890a8:	20000f14 	.word	0x20000f14
 80890ac:	08090724 	.word	0x08090724

080890b0 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80890b0:	7441      	strb	r1, [r0, #17]
 80890b2:	4770      	bx	lr

080890b4 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80890b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80890b6:	7c00      	ldrb	r0, [r0, #16]
 80890b8:	f7fe fae8 	bl	808768c <HAL_USART_Available_Data_For_Write>
}
 80890bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80890c0:	bd08      	pop	{r3, pc}

080890c2 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80890c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80890c4:	7c00      	ldrb	r0, [r0, #16]
 80890c6:	f7fe fab9 	bl	808763c <HAL_USART_Available_Data>
}
 80890ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80890ce:	bd08      	pop	{r3, pc}

080890d0 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80890d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80890d2:	7c00      	ldrb	r0, [r0, #16]
 80890d4:	f7fe fac2 	bl	808765c <HAL_USART_Peek_Data>
}
 80890d8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80890dc:	bf28      	it	cs
 80890de:	f04f 30ff 	movcs.w	r0, #4294967295
 80890e2:	bd08      	pop	{r3, pc}

080890e4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80890e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80890e6:	7c00      	ldrb	r0, [r0, #16]
 80890e8:	f7fe fab0 	bl	808764c <HAL_USART_Read_Data>
}
 80890ec:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80890f0:	bf28      	it	cs
 80890f2:	f04f 30ff 	movcs.w	r0, #4294967295
 80890f6:	bd08      	pop	{r3, pc}

080890f8 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80890f8:	7c00      	ldrb	r0, [r0, #16]
 80890fa:	f7fe bab7 	b.w	808766c <HAL_USART_Flush_Data>

080890fe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80890fe:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8089100:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8089102:	4604      	mov	r4, r0
 8089104:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8089106:	b925      	cbnz	r5, 8089112 <_ZN11USARTSerial5writeEh+0x14>
 8089108:	7c00      	ldrb	r0, [r0, #16]
 808910a:	f7fe fabf 	bl	808768c <HAL_USART_Available_Data_For_Write>
 808910e:	2800      	cmp	r0, #0
 8089110:	dd05      	ble.n	808911e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8089112:	4631      	mov	r1, r6
 8089114:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8089116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808911a:	f7fe ba87 	b.w	808762c <HAL_USART_Write_Data>
  }
  return 0;
}
 808911e:	4628      	mov	r0, r5
 8089120:	bd70      	pop	{r4, r5, r6, pc}
	...

08089124 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8089124:	b510      	push	{r4, lr}
 8089126:	4604      	mov	r4, r0
 8089128:	4608      	mov	r0, r1
 808912a:	4611      	mov	r1, r2
 808912c:	2200      	movs	r2, #0
 808912e:	6062      	str	r2, [r4, #4]
 8089130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8089134:	60a2      	str	r2, [r4, #8]
 8089136:	4a05      	ldr	r2, [pc, #20]	; (808914c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8089138:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808913a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 808913c:	2201      	movs	r2, #1
 808913e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8089140:	461a      	mov	r2, r3
 8089142:	f7fe fa6b 	bl	808761c <HAL_USART_Init>
}
 8089146:	4620      	mov	r0, r4
 8089148:	bd10      	pop	{r4, pc}
 808914a:	bf00      	nop
 808914c:	08090758 	.word	0x08090758

08089150 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8089150:	2300      	movs	r3, #0
 8089152:	7c00      	ldrb	r0, [r0, #16]
 8089154:	f7fe baa2 	b.w	808769c <HAL_USART_BeginConfig>

08089158 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8089158:	2200      	movs	r2, #0
 808915a:	f7ff bff9 	b.w	8089150 <_ZN11USARTSerial5beginEmm>

0808915e <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 808915e:	7c00      	ldrb	r0, [r0, #16]
 8089160:	f7fe ba8c 	b.w	808767c <HAL_USART_Is_Enabled>

08089164 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8089164:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8089166:	4d0c      	ldr	r5, [pc, #48]	; (8089198 <_Z22__fetch_global_Serial1v+0x34>)
 8089168:	6829      	ldr	r1, [r5, #0]
 808916a:	f011 0401 	ands.w	r4, r1, #1
 808916e:	d111      	bne.n	8089194 <_Z22__fetch_global_Serial1v+0x30>
 8089170:	4628      	mov	r0, r5
 8089172:	f7f6 ff96 	bl	80800a2 <__cxa_guard_acquire>
 8089176:	b168      	cbz	r0, 8089194 <_Z22__fetch_global_Serial1v+0x30>
 8089178:	4a08      	ldr	r2, [pc, #32]	; (808919c <_Z22__fetch_global_Serial1v+0x38>)
 808917a:	4621      	mov	r1, r4
 808917c:	4b08      	ldr	r3, [pc, #32]	; (80891a0 <_Z22__fetch_global_Serial1v+0x3c>)
 808917e:	4809      	ldr	r0, [pc, #36]	; (80891a4 <_Z22__fetch_global_Serial1v+0x40>)
 8089180:	f7ff ffd0 	bl	8089124 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8089184:	4628      	mov	r0, r5
 8089186:	f7f6 ff91 	bl	80800ac <__cxa_guard_release>
 808918a:	4a07      	ldr	r2, [pc, #28]	; (80891a8 <_Z22__fetch_global_Serial1v+0x44>)
 808918c:	4907      	ldr	r1, [pc, #28]	; (80891ac <_Z22__fetch_global_Serial1v+0x48>)
 808918e:	4805      	ldr	r0, [pc, #20]	; (80891a4 <_Z22__fetch_global_Serial1v+0x40>)
 8089190:	f000 fa02 	bl	8089598 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8089194:	4803      	ldr	r0, [pc, #12]	; (80891a4 <_Z22__fetch_global_Serial1v+0x40>)
 8089196:	bd38      	pop	{r3, r4, r5, pc}
 8089198:	20000fdc 	.word	0x20000fdc
 808919c:	20000fe0 	.word	0x20000fe0
 80891a0:	20000f58 	.word	0x20000f58
 80891a4:	20000f44 	.word	0x20000f44
 80891a8:	200001d0 	.word	0x200001d0
 80891ac:	08080911 	.word	0x08080911

080891b0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80891b0:	4770      	bx	lr

080891b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80891b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80891b4:	4606      	mov	r6, r0
 80891b6:	4615      	mov	r5, r2
 80891b8:	460c      	mov	r4, r1
 80891ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80891bc:	42bc      	cmp	r4, r7
 80891be:	d006      	beq.n	80891ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80891c0:	6833      	ldr	r3, [r6, #0]
 80891c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80891c6:	689b      	ldr	r3, [r3, #8]
 80891c8:	4630      	mov	r0, r6
 80891ca:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80891cc:	e7f6      	b.n	80891bc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80891ce:	4628      	mov	r0, r5
 80891d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080891d2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80891d2:	2200      	movs	r2, #0
 80891d4:	7c00      	ldrb	r0, [r0, #16]
 80891d6:	f7fe ba89 	b.w	80876ec <HAL_I2C_Write_Data>

080891da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80891da:	2100      	movs	r1, #0
 80891dc:	7c00      	ldrb	r0, [r0, #16]
 80891de:	f7fe ba8d 	b.w	80876fc <HAL_I2C_Available_Data>

080891e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80891e2:	2100      	movs	r1, #0
 80891e4:	7c00      	ldrb	r0, [r0, #16]
 80891e6:	f7fe ba91 	b.w	808770c <HAL_I2C_Read_Data>

080891ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80891ea:	2100      	movs	r1, #0
 80891ec:	7c00      	ldrb	r0, [r0, #16]
 80891ee:	f7fe ba95 	b.w	808771c <HAL_I2C_Peek_Data>

080891f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80891f2:	2100      	movs	r1, #0
 80891f4:	7c00      	ldrb	r0, [r0, #16]
 80891f6:	f7fe ba99 	b.w	808772c <HAL_I2C_Flush_Data>

080891fa <_ZN7TwoWireD0Ev>:
 80891fa:	b510      	push	{r4, lr}
 80891fc:	4604      	mov	r4, r0
 80891fe:	2114      	movs	r1, #20
 8089200:	f000 f9cf 	bl	80895a2 <_ZdlPvj>
 8089204:	4620      	mov	r0, r4
 8089206:	bd10      	pop	{r4, pc}

08089208 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8089208:	b510      	push	{r4, lr}
 808920a:	4604      	mov	r4, r0
 808920c:	4608      	mov	r0, r1
 808920e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8089212:	60a3      	str	r3, [r4, #8]
 8089214:	4b04      	ldr	r3, [pc, #16]	; (8089228 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 8089216:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8089218:	7420      	strb	r0, [r4, #16]
 808921a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808921c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808921e:	f7fe fa95 	bl	808774c <HAL_I2C_Init>

}
 8089222:	4620      	mov	r0, r4
 8089224:	bd10      	pop	{r4, pc}
 8089226:	bf00      	nop
 8089228:	08090788 	.word	0x08090788

0808922c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808922c:	2300      	movs	r3, #0
 808922e:	461a      	mov	r2, r3
 8089230:	4619      	mov	r1, r3
 8089232:	7c00      	ldrb	r0, [r0, #16]
 8089234:	f7fe ba3a 	b.w	80876ac <HAL_I2C_Begin>

08089238 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8089238:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808923a:	2400      	movs	r4, #0
 808923c:	7c00      	ldrb	r0, [r0, #16]
 808923e:	9400      	str	r4, [sp, #0]
 8089240:	f7fe fa3c 	bl	80876bc <HAL_I2C_Request_Data>
  return result;
}
 8089244:	b2c0      	uxtb	r0, r0
 8089246:	b002      	add	sp, #8
 8089248:	bd10      	pop	{r4, pc}

0808924a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808924a:	2301      	movs	r3, #1
 808924c:	f7ff bff4 	b.w	8089238 <_ZN7TwoWire11requestFromEhhh>

08089250 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8089250:	2301      	movs	r3, #1
 8089252:	b2d2      	uxtb	r2, r2
 8089254:	b2c9      	uxtb	r1, r1
 8089256:	f7ff bfef 	b.w	8089238 <_ZN7TwoWire11requestFromEhhh>

0808925a <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 808925a:	b2db      	uxtb	r3, r3
 808925c:	b2d2      	uxtb	r2, r2
 808925e:	b2c9      	uxtb	r1, r1
 8089260:	f7ff bfea 	b.w	8089238 <_ZN7TwoWire11requestFromEhhh>

08089264 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8089264:	2200      	movs	r2, #0
 8089266:	7c00      	ldrb	r0, [r0, #16]
 8089268:	f7fe ba30 	b.w	80876cc <HAL_I2C_Begin_Transmission>

0808926c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808926c:	b2c9      	uxtb	r1, r1
 808926e:	f7ff bff9 	b.w	8089264 <_ZN7TwoWire17beginTransmissionEh>

08089272 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8089272:	2200      	movs	r2, #0
 8089274:	7c00      	ldrb	r0, [r0, #16]
 8089276:	f7fe ba31 	b.w	80876dc <HAL_I2C_End_Transmission>

0808927a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808927a:	2101      	movs	r1, #1
 808927c:	f7ff bff9 	b.w	8089272 <_ZN7TwoWire15endTransmissionEh>

08089280 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8089280:	2100      	movs	r1, #0
 8089282:	7c00      	ldrb	r0, [r0, #16]
 8089284:	f7fe ba5a 	b.w	808773c <HAL_I2C_Is_Enabled>

08089288 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8089288:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808928a:	2100      	movs	r1, #0
 808928c:	7c00      	ldrb	r0, [r0, #16]
 808928e:	f7fe fa65 	bl	808775c <HAL_I2C_Acquire>
}
 8089292:	fab0 f080 	clz	r0, r0
 8089296:	0940      	lsrs	r0, r0, #5
 8089298:	bd08      	pop	{r3, pc}

0808929a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808929a:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808929c:	2100      	movs	r1, #0
 808929e:	7c00      	ldrb	r0, [r0, #16]
 80892a0:	f7fe fa64 	bl	808776c <HAL_I2C_Release>
}
 80892a4:	fab0 f080 	clz	r0, r0
 80892a8:	0940      	lsrs	r0, r0, #5
 80892aa:	bd08      	pop	{r3, pc}

080892ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80892ac:	2300      	movs	r3, #0
 80892ae:	461a      	mov	r2, r3
 80892b0:	6840      	ldr	r0, [r0, #4]
 80892b2:	f7fe bb09 	b.w	80878c8 <network_connect>

080892b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80892b6:	2200      	movs	r2, #0
 80892b8:	2102      	movs	r1, #2
 80892ba:	6840      	ldr	r0, [r0, #4]
 80892bc:	f7fe bb14 	b.w	80878e8 <network_disconnect>

080892c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80892c0:	2200      	movs	r2, #0
 80892c2:	4611      	mov	r1, r2
 80892c4:	6840      	ldr	r0, [r0, #4]
 80892c6:	f7fe bb07 	b.w	80878d8 <network_connecting>

080892ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80892ca:	2200      	movs	r2, #0
 80892cc:	4611      	mov	r1, r2
 80892ce:	6840      	ldr	r0, [r0, #4]
 80892d0:	f7fe bb12 	b.w	80878f8 <network_ready>

080892d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80892d4:	2300      	movs	r3, #0
 80892d6:	461a      	mov	r2, r3
 80892d8:	4619      	mov	r1, r3
 80892da:	6840      	ldr	r0, [r0, #4]
 80892dc:	f7fe bb14 	b.w	8087908 <network_on>

080892e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80892e0:	2300      	movs	r3, #0
 80892e2:	461a      	mov	r2, r3
 80892e4:	4619      	mov	r1, r3
 80892e6:	6840      	ldr	r0, [r0, #4]
 80892e8:	f7fe bb16 	b.w	8087918 <network_off>

080892ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80892ec:	2200      	movs	r2, #0
 80892ee:	f081 0101 	eor.w	r1, r1, #1
 80892f2:	6840      	ldr	r0, [r0, #4]
 80892f4:	f7fe bb18 	b.w	8087928 <network_listen>

080892f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80892f8:	2200      	movs	r2, #0
 80892fa:	6840      	ldr	r0, [r0, #4]
 80892fc:	f7fe bb24 	b.w	8087948 <network_set_listen_timeout>

08089300 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8089300:	2200      	movs	r2, #0
 8089302:	4611      	mov	r1, r2
 8089304:	6840      	ldr	r0, [r0, #4]
 8089306:	f7fe bb27 	b.w	8087958 <network_get_listen_timeout>

0808930a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808930a:	2200      	movs	r2, #0
 808930c:	4611      	mov	r1, r2
 808930e:	6840      	ldr	r0, [r0, #4]
 8089310:	f7fe bb12 	b.w	8087938 <network_listening>

08089314 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8089314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089316:	4617      	mov	r7, r2
 8089318:	b087      	sub	sp, #28
 808931a:	4605      	mov	r5, r0
    IPAddress addr;
 808931c:	a804      	add	r0, sp, #16
 808931e:	f7ff fd35 	bl	8088d8c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8089322:	2600      	movs	r6, #0
 8089324:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8089326:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8089328:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808932c:	f002 fb4e 	bl	808b9cc <strlen>
 8089330:	4b0a      	ldr	r3, [pc, #40]	; (808935c <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8089332:	9600      	str	r6, [sp, #0]
 8089334:	b281      	uxth	r1, r0
 8089336:	685b      	ldr	r3, [r3, #4]
 8089338:	4622      	mov	r2, r4
 808933a:	4638      	mov	r0, r7
 808933c:	f7fe fa1e 	bl	808777c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8089340:	b120      	cbz	r0, 808934c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8089342:	4631      	mov	r1, r6
 8089344:	4628      	mov	r0, r5
 8089346:	f7ff fd31 	bl	8088dac <_ZN9IPAddressC1Em>
 808934a:	e003      	b.n	8089354 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808934c:	4621      	mov	r1, r4
 808934e:	4628      	mov	r0, r5
 8089350:	f7ff fd24 	bl	8088d9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8089354:	4628      	mov	r0, r5
 8089356:	b007      	add	sp, #28
 8089358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808935a:	bf00      	nop
 808935c:	20000f14 	.word	0x20000f14

08089360 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8089360:	4b02      	ldr	r3, [pc, #8]	; (808936c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8089362:	4a03      	ldr	r2, [pc, #12]	; (8089370 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8089364:	601a      	str	r2, [r3, #0]
 8089366:	2200      	movs	r2, #0
 8089368:	605a      	str	r2, [r3, #4]
 808936a:	4770      	bx	lr
 808936c:	20001064 	.word	0x20001064
 8089370:	080907b0 	.word	0x080907b0

08089374 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8089374:	b510      	push	{r4, lr}
 8089376:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8089378:	480f      	ldr	r0, [pc, #60]	; (80893b8 <pinAvailable+0x44>)
 808937a:	f7fe fd66 	bl	8087e4a <_ZN8SPIClass9isEnabledEv>
 808937e:	b128      	cbz	r0, 808938c <pinAvailable+0x18>
 8089380:	f1a4 030d 	sub.w	r3, r4, #13
 8089384:	2b02      	cmp	r3, #2
 8089386:	d801      	bhi.n	808938c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8089388:	2000      	movs	r0, #0
 808938a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808938c:	f000 f8c4 	bl	8089518 <_Z19__fetch_global_Wirev>
 8089390:	f7ff ff76 	bl	8089280 <_ZN7TwoWire9isEnabledEv>
 8089394:	b108      	cbz	r0, 808939a <pinAvailable+0x26>
 8089396:	2c01      	cmp	r4, #1
 8089398:	d9f6      	bls.n	8089388 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808939a:	f7ff fee3 	bl	8089164 <_Z22__fetch_global_Serial1v>
 808939e:	f7ff fede 	bl	808915e <_ZN11USARTSerial9isEnabledEv>
 80893a2:	b118      	cbz	r0, 80893ac <pinAvailable+0x38>
 80893a4:	f1a4 0312 	sub.w	r3, r4, #18
 80893a8:	2b01      	cmp	r3, #1
 80893aa:	d9ed      	bls.n	8089388 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80893ac:	2c2e      	cmp	r4, #46	; 0x2e
 80893ae:	bf8c      	ite	hi
 80893b0:	2000      	movhi	r0, #0
 80893b2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80893b4:	bd10      	pop	{r4, pc}
 80893b6:	bf00      	nop
 80893b8:	2000106c 	.word	0x2000106c

080893bc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80893bc:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80893be:	b538      	push	{r3, r4, r5, lr}
 80893c0:	4604      	mov	r4, r0
 80893c2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80893c4:	d80a      	bhi.n	80893dc <pinMode+0x20>
 80893c6:	29ff      	cmp	r1, #255	; 0xff
 80893c8:	d008      	beq.n	80893dc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80893ca:	f7ff ffd3 	bl	8089374 <pinAvailable>
 80893ce:	b128      	cbz	r0, 80893dc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80893d0:	4629      	mov	r1, r5
 80893d2:	4620      	mov	r0, r4
}
 80893d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80893d8:	f7fe b838 	b.w	808744c <HAL_Pin_Mode>
 80893dc:	bd38      	pop	{r3, r4, r5, pc}

080893de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80893de:	b538      	push	{r3, r4, r5, lr}
 80893e0:	4604      	mov	r4, r0
 80893e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80893e4:	f7fe f83a 	bl	808745c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80893e8:	28ff      	cmp	r0, #255	; 0xff
 80893ea:	d010      	beq.n	808940e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80893ec:	2806      	cmp	r0, #6
 80893ee:	d804      	bhi.n	80893fa <digitalWrite+0x1c>
 80893f0:	234d      	movs	r3, #77	; 0x4d
 80893f2:	fa23 f000 	lsr.w	r0, r3, r0
 80893f6:	07c3      	lsls	r3, r0, #31
 80893f8:	d409      	bmi.n	808940e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80893fa:	4620      	mov	r0, r4
 80893fc:	f7ff ffba 	bl	8089374 <pinAvailable>
 8089400:	b128      	cbz	r0, 808940e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8089402:	4629      	mov	r1, r5
 8089404:	4620      	mov	r0, r4
}
 8089406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808940a:	f7fe b82f 	b.w	808746c <HAL_GPIO_Write>
 808940e:	bd38      	pop	{r3, r4, r5, pc}

08089410 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8089410:	b510      	push	{r4, lr}
 8089412:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8089414:	f7fe f822 	bl	808745c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8089418:	3804      	subs	r0, #4
 808941a:	b2c0      	uxtb	r0, r0
 808941c:	2801      	cmp	r0, #1
 808941e:	d908      	bls.n	8089432 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8089420:	4620      	mov	r0, r4
 8089422:	f7ff ffa7 	bl	8089374 <pinAvailable>
 8089426:	b120      	cbz	r0, 8089432 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8089428:	4620      	mov	r0, r4
}
 808942a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808942e:	f7fe b825 	b.w	808747c <HAL_GPIO_Read>
}
 8089432:	2000      	movs	r0, #0
 8089434:	bd10      	pop	{r4, pc}

08089436 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8089436:	b510      	push	{r4, lr}
 8089438:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808943a:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808943c:	bf9c      	itt	ls
 808943e:	340a      	addls	r4, #10
 8089440:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8089442:	4620      	mov	r0, r4
 8089444:	f7ff ff96 	bl	8089374 <pinAvailable>
 8089448:	b150      	cbz	r0, 8089460 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808944a:	2103      	movs	r1, #3
 808944c:	4620      	mov	r0, r4
 808944e:	f7fd fff5 	bl	808743c <HAL_Validate_Pin_Function>
 8089452:	2803      	cmp	r0, #3
 8089454:	d104      	bne.n	8089460 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8089456:	4620      	mov	r0, r4
}
 8089458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808945c:	f7fe b82e 	b.w	80874bc <HAL_ADC_Read>
}
 8089460:	2000      	movs	r0, #0
 8089462:	bd10      	pop	{r4, pc}

08089464 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8089464:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8089466:	4e11      	ldr	r6, [pc, #68]	; (80894ac <_GLOBAL__sub_I_SPI+0x48>)
 8089468:	4d11      	ldr	r5, [pc, #68]	; (80894b0 <_GLOBAL__sub_I_SPI+0x4c>)
 808946a:	4c12      	ldr	r4, [pc, #72]	; (80894b4 <_GLOBAL__sub_I_SPI+0x50>)
 808946c:	2100      	movs	r1, #0
 808946e:	4630      	mov	r0, r6
 8089470:	f7fe fc58 	bl	8087d24 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8089474:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8089476:	4e10      	ldr	r6, [pc, #64]	; (80894b8 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8089478:	462a      	mov	r2, r5
 808947a:	4621      	mov	r1, r4
 808947c:	f000 f88c 	bl	8089598 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8089480:	2101      	movs	r1, #1
 8089482:	4630      	mov	r0, r6
 8089484:	f7fe fc4e 	bl	8087d24 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8089488:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808948a:	4e0c      	ldr	r6, [pc, #48]	; (80894bc <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808948c:	462a      	mov	r2, r5
 808948e:	4621      	mov	r1, r4
 8089490:	f000 f882 	bl	8089598 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8089494:	2102      	movs	r1, #2
 8089496:	4630      	mov	r0, r6
 8089498:	f7fe fc44 	bl	8087d24 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808949c:	462a      	mov	r2, r5
 808949e:	4621      	mov	r1, r4
 80894a0:	4630      	mov	r0, r6
 80894a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80894a6:	f000 b877 	b.w	8089598 <__aeabi_atexit>
 80894aa:	bf00      	nop
 80894ac:	2000106c 	.word	0x2000106c
 80894b0:	200001d0 	.word	0x200001d0
 80894b4:	08087d15 	.word	0x08087d15
 80894b8:	2000107c 	.word	0x2000107c
 80894bc:	2000108c 	.word	0x2000108c

080894c0 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80894c0:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80894c2:	4c07      	ldr	r4, [pc, #28]	; (80894e0 <_Z21__fetch_global_EEPROMv+0x20>)
 80894c4:	6823      	ldr	r3, [r4, #0]
 80894c6:	07db      	lsls	r3, r3, #31
 80894c8:	d408      	bmi.n	80894dc <_Z21__fetch_global_EEPROMv+0x1c>
 80894ca:	4620      	mov	r0, r4
 80894cc:	f7f6 fde9 	bl	80800a2 <__cxa_guard_acquire>
 80894d0:	b120      	cbz	r0, 80894dc <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80894d2:	f7fe f873 	bl	80875bc <HAL_EEPROM_Init>
 80894d6:	4620      	mov	r0, r4
 80894d8:	f7f6 fde8 	bl	80800ac <__cxa_guard_release>
	return eeprom;
}
 80894dc:	4801      	ldr	r0, [pc, #4]	; (80894e4 <_Z21__fetch_global_EEPROMv+0x24>)
 80894de:	bd10      	pop	{r4, pc}
 80894e0:	200010a0 	.word	0x200010a0
 80894e4:	200010a4 	.word	0x200010a4

080894e8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80894e8:	b513      	push	{r0, r1, r4, lr}
 80894ea:	4c08      	ldr	r4, [pc, #32]	; (808950c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80894ec:	2300      	movs	r3, #0
 80894ee:	461a      	mov	r2, r3
 80894f0:	4619      	mov	r1, r3
 80894f2:	9300      	str	r3, [sp, #0]
 80894f4:	4620      	mov	r0, r4
 80894f6:	f7ff fc6b 	bl	8088dd0 <_ZN9IPAddressC1Ehhhh>
 80894fa:	4620      	mov	r0, r4
 80894fc:	4a04      	ldr	r2, [pc, #16]	; (8089510 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80894fe:	4905      	ldr	r1, [pc, #20]	; (8089514 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8089500:	b002      	add	sp, #8
 8089502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8089506:	f000 b847 	b.w	8089598 <__aeabi_atexit>
 808950a:	bf00      	nop
 808950c:	200010a8 	.word	0x200010a8
 8089510:	200001d0 	.word	0x200001d0
 8089514:	08088d4b 	.word	0x08088d4b

08089518 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8089518:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808951a:	4d0b      	ldr	r5, [pc, #44]	; (8089548 <_Z19__fetch_global_Wirev+0x30>)
 808951c:	6829      	ldr	r1, [r5, #0]
 808951e:	f011 0401 	ands.w	r4, r1, #1
 8089522:	d10f      	bne.n	8089544 <_Z19__fetch_global_Wirev+0x2c>
 8089524:	4628      	mov	r0, r5
 8089526:	f7f6 fdbc 	bl	80800a2 <__cxa_guard_acquire>
 808952a:	b158      	cbz	r0, 8089544 <_Z19__fetch_global_Wirev+0x2c>
 808952c:	4621      	mov	r1, r4
 808952e:	4807      	ldr	r0, [pc, #28]	; (808954c <_Z19__fetch_global_Wirev+0x34>)
 8089530:	f7ff fe6a 	bl	8089208 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8089534:	4628      	mov	r0, r5
 8089536:	f7f6 fdb9 	bl	80800ac <__cxa_guard_release>
 808953a:	4a05      	ldr	r2, [pc, #20]	; (8089550 <_Z19__fetch_global_Wirev+0x38>)
 808953c:	4905      	ldr	r1, [pc, #20]	; (8089554 <_Z19__fetch_global_Wirev+0x3c>)
 808953e:	4803      	ldr	r0, [pc, #12]	; (808954c <_Z19__fetch_global_Wirev+0x34>)
 8089540:	f000 f82a 	bl	8089598 <__aeabi_atexit>
	return wire;
}
 8089544:	4801      	ldr	r0, [pc, #4]	; (808954c <_Z19__fetch_global_Wirev+0x34>)
 8089546:	bd38      	pop	{r3, r4, r5, pc}
 8089548:	200010b0 	.word	0x200010b0
 808954c:	200010c8 	.word	0x200010c8
 8089550:	200001d0 	.word	0x200001d0
 8089554:	080891b1 	.word	0x080891b1

08089558 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8089558:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 808955a:	4c0b      	ldr	r4, [pc, #44]	; (8089588 <_Z20__fetch_global_Wire3v+0x30>)
 808955c:	6823      	ldr	r3, [r4, #0]
 808955e:	07db      	lsls	r3, r3, #31
 8089560:	d40f      	bmi.n	8089582 <_Z20__fetch_global_Wire3v+0x2a>
 8089562:	4620      	mov	r0, r4
 8089564:	f7f6 fd9d 	bl	80800a2 <__cxa_guard_acquire>
 8089568:	b158      	cbz	r0, 8089582 <_Z20__fetch_global_Wire3v+0x2a>
 808956a:	2102      	movs	r1, #2
 808956c:	4807      	ldr	r0, [pc, #28]	; (808958c <_Z20__fetch_global_Wire3v+0x34>)
 808956e:	f7ff fe4b 	bl	8089208 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8089572:	4620      	mov	r0, r4
 8089574:	f7f6 fd9a 	bl	80800ac <__cxa_guard_release>
 8089578:	4a05      	ldr	r2, [pc, #20]	; (8089590 <_Z20__fetch_global_Wire3v+0x38>)
 808957a:	4906      	ldr	r1, [pc, #24]	; (8089594 <_Z20__fetch_global_Wire3v+0x3c>)
 808957c:	4803      	ldr	r0, [pc, #12]	; (808958c <_Z20__fetch_global_Wire3v+0x34>)
 808957e:	f000 f80b 	bl	8089598 <__aeabi_atexit>
	return wire;
}
 8089582:	4802      	ldr	r0, [pc, #8]	; (808958c <_Z20__fetch_global_Wire3v+0x34>)
 8089584:	bd10      	pop	{r4, pc}
 8089586:	bf00      	nop
 8089588:	200010dc 	.word	0x200010dc
 808958c:	200010b4 	.word	0x200010b4
 8089590:	200001d0 	.word	0x200001d0
 8089594:	080891b1 	.word	0x080891b1

08089598 <__aeabi_atexit>:
 8089598:	460b      	mov	r3, r1
 808959a:	4601      	mov	r1, r0
 808959c:	4618      	mov	r0, r3
 808959e:	f001 bb8d 	b.w	808acbc <__cxa_atexit>

080895a2 <_ZdlPvj>:
 80895a2:	f7f6 bd7c 	b.w	808009e <_ZdlPv>
	...

080895a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80895a8:	4b18      	ldr	r3, [pc, #96]	; (808960c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80895aa:	681a      	ldr	r2, [r3, #0]
 80895ac:	07d1      	lsls	r1, r2, #31
 80895ae:	bf5c      	itt	pl
 80895b0:	2201      	movpl	r2, #1
 80895b2:	601a      	strpl	r2, [r3, #0]
 80895b4:	4b16      	ldr	r3, [pc, #88]	; (8089610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80895b6:	681a      	ldr	r2, [r3, #0]
 80895b8:	07d2      	lsls	r2, r2, #31
 80895ba:	bf5c      	itt	pl
 80895bc:	2201      	movpl	r2, #1
 80895be:	601a      	strpl	r2, [r3, #0]
 80895c0:	4b14      	ldr	r3, [pc, #80]	; (8089614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80895c2:	681a      	ldr	r2, [r3, #0]
 80895c4:	07d0      	lsls	r0, r2, #31
 80895c6:	bf5c      	itt	pl
 80895c8:	2201      	movpl	r2, #1
 80895ca:	601a      	strpl	r2, [r3, #0]
 80895cc:	4b12      	ldr	r3, [pc, #72]	; (8089618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80895ce:	681a      	ldr	r2, [r3, #0]
 80895d0:	07d1      	lsls	r1, r2, #31
 80895d2:	bf5c      	itt	pl
 80895d4:	2201      	movpl	r2, #1
 80895d6:	601a      	strpl	r2, [r3, #0]
 80895d8:	4b10      	ldr	r3, [pc, #64]	; (808961c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80895da:	681a      	ldr	r2, [r3, #0]
 80895dc:	07d2      	lsls	r2, r2, #31
 80895de:	bf5c      	itt	pl
 80895e0:	2201      	movpl	r2, #1
 80895e2:	601a      	strpl	r2, [r3, #0]
 80895e4:	4b0e      	ldr	r3, [pc, #56]	; (8089620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80895e6:	681a      	ldr	r2, [r3, #0]
 80895e8:	07d0      	lsls	r0, r2, #31
 80895ea:	bf5c      	itt	pl
 80895ec:	2201      	movpl	r2, #1
 80895ee:	601a      	strpl	r2, [r3, #0]
 80895f0:	4b0c      	ldr	r3, [pc, #48]	; (8089624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80895f2:	681a      	ldr	r2, [r3, #0]
 80895f4:	07d1      	lsls	r1, r2, #31
 80895f6:	bf5c      	itt	pl
 80895f8:	2201      	movpl	r2, #1
 80895fa:	601a      	strpl	r2, [r3, #0]
 80895fc:	4b0a      	ldr	r3, [pc, #40]	; (8089628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80895fe:	681a      	ldr	r2, [r3, #0]
 8089600:	07d2      	lsls	r2, r2, #31
 8089602:	bf5c      	itt	pl
 8089604:	2201      	movpl	r2, #1
 8089606:	601a      	strpl	r2, [r3, #0]
 8089608:	4770      	bx	lr
 808960a:	bf00      	nop
 808960c:	200010fc 	.word	0x200010fc
 8089610:	200010f8 	.word	0x200010f8
 8089614:	200010f4 	.word	0x200010f4
 8089618:	200010f0 	.word	0x200010f0
 808961c:	200010ec 	.word	0x200010ec
 8089620:	200010e8 	.word	0x200010e8
 8089624:	200010e4 	.word	0x200010e4
 8089628:	200010e0 	.word	0x200010e0

0808962c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808962c:	4b24      	ldr	r3, [pc, #144]	; (80896c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808962e:	681a      	ldr	r2, [r3, #0]
 8089630:	07d0      	lsls	r0, r2, #31
 8089632:	bf5c      	itt	pl
 8089634:	2201      	movpl	r2, #1
 8089636:	601a      	strpl	r2, [r3, #0]
 8089638:	4b22      	ldr	r3, [pc, #136]	; (80896c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808963a:	681a      	ldr	r2, [r3, #0]
 808963c:	07d1      	lsls	r1, r2, #31
 808963e:	bf5c      	itt	pl
 8089640:	2201      	movpl	r2, #1
 8089642:	601a      	strpl	r2, [r3, #0]
 8089644:	4b20      	ldr	r3, [pc, #128]	; (80896c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8089646:	681a      	ldr	r2, [r3, #0]
 8089648:	07d2      	lsls	r2, r2, #31
 808964a:	bf5c      	itt	pl
 808964c:	2201      	movpl	r2, #1
 808964e:	601a      	strpl	r2, [r3, #0]
 8089650:	4b1e      	ldr	r3, [pc, #120]	; (80896cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8089652:	681a      	ldr	r2, [r3, #0]
 8089654:	07d0      	lsls	r0, r2, #31
 8089656:	bf5c      	itt	pl
 8089658:	2201      	movpl	r2, #1
 808965a:	601a      	strpl	r2, [r3, #0]
 808965c:	4b1c      	ldr	r3, [pc, #112]	; (80896d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808965e:	681a      	ldr	r2, [r3, #0]
 8089660:	07d1      	lsls	r1, r2, #31
 8089662:	bf5c      	itt	pl
 8089664:	2201      	movpl	r2, #1
 8089666:	601a      	strpl	r2, [r3, #0]
 8089668:	4b1a      	ldr	r3, [pc, #104]	; (80896d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808966a:	681a      	ldr	r2, [r3, #0]
 808966c:	07d2      	lsls	r2, r2, #31
 808966e:	bf5c      	itt	pl
 8089670:	2201      	movpl	r2, #1
 8089672:	601a      	strpl	r2, [r3, #0]
 8089674:	4b18      	ldr	r3, [pc, #96]	; (80896d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8089676:	681a      	ldr	r2, [r3, #0]
 8089678:	07d0      	lsls	r0, r2, #31
 808967a:	bf5c      	itt	pl
 808967c:	2201      	movpl	r2, #1
 808967e:	601a      	strpl	r2, [r3, #0]
 8089680:	4b16      	ldr	r3, [pc, #88]	; (80896dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8089682:	681a      	ldr	r2, [r3, #0]
 8089684:	07d1      	lsls	r1, r2, #31
 8089686:	bf5c      	itt	pl
 8089688:	2201      	movpl	r2, #1
 808968a:	601a      	strpl	r2, [r3, #0]
 808968c:	4b14      	ldr	r3, [pc, #80]	; (80896e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808968e:	681a      	ldr	r2, [r3, #0]
 8089690:	07d2      	lsls	r2, r2, #31
 8089692:	bf5c      	itt	pl
 8089694:	2201      	movpl	r2, #1
 8089696:	601a      	strpl	r2, [r3, #0]
 8089698:	4b12      	ldr	r3, [pc, #72]	; (80896e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808969a:	681a      	ldr	r2, [r3, #0]
 808969c:	07d0      	lsls	r0, r2, #31
 808969e:	bf5c      	itt	pl
 80896a0:	2201      	movpl	r2, #1
 80896a2:	601a      	strpl	r2, [r3, #0]
 80896a4:	4b10      	ldr	r3, [pc, #64]	; (80896e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80896a6:	681a      	ldr	r2, [r3, #0]
 80896a8:	07d1      	lsls	r1, r2, #31
 80896aa:	bf5c      	itt	pl
 80896ac:	2201      	movpl	r2, #1
 80896ae:	601a      	strpl	r2, [r3, #0]
 80896b0:	4b0e      	ldr	r3, [pc, #56]	; (80896ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80896b2:	681a      	ldr	r2, [r3, #0]
 80896b4:	07d2      	lsls	r2, r2, #31
 80896b6:	bf5c      	itt	pl
 80896b8:	2201      	movpl	r2, #1
 80896ba:	601a      	strpl	r2, [r3, #0]
 80896bc:	4770      	bx	lr
 80896be:	bf00      	nop
 80896c0:	2000112c 	.word	0x2000112c
 80896c4:	20001128 	.word	0x20001128
 80896c8:	20001124 	.word	0x20001124
 80896cc:	20001120 	.word	0x20001120
 80896d0:	2000111c 	.word	0x2000111c
 80896d4:	20001118 	.word	0x20001118
 80896d8:	20001114 	.word	0x20001114
 80896dc:	20001110 	.word	0x20001110
 80896e0:	2000110c 	.word	0x2000110c
 80896e4:	20001108 	.word	0x20001108
 80896e8:	20001104 	.word	0x20001104
 80896ec:	20001100 	.word	0x20001100

080896f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80896f0:	4b24      	ldr	r3, [pc, #144]	; (8089784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80896f2:	681a      	ldr	r2, [r3, #0]
 80896f4:	07d0      	lsls	r0, r2, #31
 80896f6:	bf5c      	itt	pl
 80896f8:	2201      	movpl	r2, #1
 80896fa:	601a      	strpl	r2, [r3, #0]
 80896fc:	4b22      	ldr	r3, [pc, #136]	; (8089788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80896fe:	681a      	ldr	r2, [r3, #0]
 8089700:	07d1      	lsls	r1, r2, #31
 8089702:	bf5c      	itt	pl
 8089704:	2201      	movpl	r2, #1
 8089706:	601a      	strpl	r2, [r3, #0]
 8089708:	4b20      	ldr	r3, [pc, #128]	; (808978c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808970a:	681a      	ldr	r2, [r3, #0]
 808970c:	07d2      	lsls	r2, r2, #31
 808970e:	bf5c      	itt	pl
 8089710:	2201      	movpl	r2, #1
 8089712:	601a      	strpl	r2, [r3, #0]
 8089714:	4b1e      	ldr	r3, [pc, #120]	; (8089790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8089716:	681a      	ldr	r2, [r3, #0]
 8089718:	07d0      	lsls	r0, r2, #31
 808971a:	bf5c      	itt	pl
 808971c:	2201      	movpl	r2, #1
 808971e:	601a      	strpl	r2, [r3, #0]
 8089720:	4b1c      	ldr	r3, [pc, #112]	; (8089794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8089722:	681a      	ldr	r2, [r3, #0]
 8089724:	07d1      	lsls	r1, r2, #31
 8089726:	bf5c      	itt	pl
 8089728:	2201      	movpl	r2, #1
 808972a:	601a      	strpl	r2, [r3, #0]
 808972c:	4b1a      	ldr	r3, [pc, #104]	; (8089798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808972e:	681a      	ldr	r2, [r3, #0]
 8089730:	07d2      	lsls	r2, r2, #31
 8089732:	bf5c      	itt	pl
 8089734:	2201      	movpl	r2, #1
 8089736:	601a      	strpl	r2, [r3, #0]
 8089738:	4b18      	ldr	r3, [pc, #96]	; (808979c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808973a:	681a      	ldr	r2, [r3, #0]
 808973c:	07d0      	lsls	r0, r2, #31
 808973e:	bf5c      	itt	pl
 8089740:	2201      	movpl	r2, #1
 8089742:	601a      	strpl	r2, [r3, #0]
 8089744:	4b16      	ldr	r3, [pc, #88]	; (80897a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8089746:	681a      	ldr	r2, [r3, #0]
 8089748:	07d1      	lsls	r1, r2, #31
 808974a:	bf5c      	itt	pl
 808974c:	2201      	movpl	r2, #1
 808974e:	601a      	strpl	r2, [r3, #0]
 8089750:	4b14      	ldr	r3, [pc, #80]	; (80897a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8089752:	681a      	ldr	r2, [r3, #0]
 8089754:	07d2      	lsls	r2, r2, #31
 8089756:	bf5c      	itt	pl
 8089758:	2201      	movpl	r2, #1
 808975a:	601a      	strpl	r2, [r3, #0]
 808975c:	4b12      	ldr	r3, [pc, #72]	; (80897a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808975e:	681a      	ldr	r2, [r3, #0]
 8089760:	07d0      	lsls	r0, r2, #31
 8089762:	bf5c      	itt	pl
 8089764:	2201      	movpl	r2, #1
 8089766:	601a      	strpl	r2, [r3, #0]
 8089768:	4b10      	ldr	r3, [pc, #64]	; (80897ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808976a:	681a      	ldr	r2, [r3, #0]
 808976c:	07d1      	lsls	r1, r2, #31
 808976e:	bf5c      	itt	pl
 8089770:	2201      	movpl	r2, #1
 8089772:	601a      	strpl	r2, [r3, #0]
 8089774:	4b0e      	ldr	r3, [pc, #56]	; (80897b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8089776:	681a      	ldr	r2, [r3, #0]
 8089778:	07d2      	lsls	r2, r2, #31
 808977a:	bf5c      	itt	pl
 808977c:	2201      	movpl	r2, #1
 808977e:	601a      	strpl	r2, [r3, #0]
 8089780:	4770      	bx	lr
 8089782:	bf00      	nop
 8089784:	2000115c 	.word	0x2000115c
 8089788:	20001158 	.word	0x20001158
 808978c:	20001154 	.word	0x20001154
 8089790:	20001150 	.word	0x20001150
 8089794:	2000114c 	.word	0x2000114c
 8089798:	20001148 	.word	0x20001148
 808979c:	20001144 	.word	0x20001144
 80897a0:	20001140 	.word	0x20001140
 80897a4:	2000113c 	.word	0x2000113c
 80897a8:	20001138 	.word	0x20001138
 80897ac:	20001134 	.word	0x20001134
 80897b0:	20001130 	.word	0x20001130

080897b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80897b4:	4b18      	ldr	r3, [pc, #96]	; (8089818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80897b6:	681a      	ldr	r2, [r3, #0]
 80897b8:	07d1      	lsls	r1, r2, #31
 80897ba:	bf5c      	itt	pl
 80897bc:	2201      	movpl	r2, #1
 80897be:	601a      	strpl	r2, [r3, #0]
 80897c0:	4b16      	ldr	r3, [pc, #88]	; (808981c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80897c2:	681a      	ldr	r2, [r3, #0]
 80897c4:	07d2      	lsls	r2, r2, #31
 80897c6:	bf5c      	itt	pl
 80897c8:	2201      	movpl	r2, #1
 80897ca:	601a      	strpl	r2, [r3, #0]
 80897cc:	4b14      	ldr	r3, [pc, #80]	; (8089820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80897ce:	681a      	ldr	r2, [r3, #0]
 80897d0:	07d0      	lsls	r0, r2, #31
 80897d2:	bf5c      	itt	pl
 80897d4:	2201      	movpl	r2, #1
 80897d6:	601a      	strpl	r2, [r3, #0]
 80897d8:	4b12      	ldr	r3, [pc, #72]	; (8089824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80897da:	681a      	ldr	r2, [r3, #0]
 80897dc:	07d1      	lsls	r1, r2, #31
 80897de:	bf5c      	itt	pl
 80897e0:	2201      	movpl	r2, #1
 80897e2:	601a      	strpl	r2, [r3, #0]
 80897e4:	4b10      	ldr	r3, [pc, #64]	; (8089828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80897e6:	681a      	ldr	r2, [r3, #0]
 80897e8:	07d2      	lsls	r2, r2, #31
 80897ea:	bf5c      	itt	pl
 80897ec:	2201      	movpl	r2, #1
 80897ee:	601a      	strpl	r2, [r3, #0]
 80897f0:	4b0e      	ldr	r3, [pc, #56]	; (808982c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80897f2:	681a      	ldr	r2, [r3, #0]
 80897f4:	07d0      	lsls	r0, r2, #31
 80897f6:	bf5c      	itt	pl
 80897f8:	2201      	movpl	r2, #1
 80897fa:	601a      	strpl	r2, [r3, #0]
 80897fc:	4b0c      	ldr	r3, [pc, #48]	; (8089830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80897fe:	681a      	ldr	r2, [r3, #0]
 8089800:	07d1      	lsls	r1, r2, #31
 8089802:	bf5c      	itt	pl
 8089804:	2201      	movpl	r2, #1
 8089806:	601a      	strpl	r2, [r3, #0]
 8089808:	4b0a      	ldr	r3, [pc, #40]	; (8089834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808980a:	681a      	ldr	r2, [r3, #0]
 808980c:	07d2      	lsls	r2, r2, #31
 808980e:	bf5c      	itt	pl
 8089810:	2201      	movpl	r2, #1
 8089812:	601a      	strpl	r2, [r3, #0]
 8089814:	4770      	bx	lr
 8089816:	bf00      	nop
 8089818:	2000117c 	.word	0x2000117c
 808981c:	20001178 	.word	0x20001178
 8089820:	20001174 	.word	0x20001174
 8089824:	20001170 	.word	0x20001170
 8089828:	2000116c 	.word	0x2000116c
 808982c:	20001168 	.word	0x20001168
 8089830:	20001164 	.word	0x20001164
 8089834:	20001160 	.word	0x20001160

08089838 <__aeabi_drsub>:
 8089838:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808983c:	e002      	b.n	8089844 <__adddf3>
 808983e:	bf00      	nop

08089840 <__aeabi_dsub>:
 8089840:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08089844 <__adddf3>:
 8089844:	b530      	push	{r4, r5, lr}
 8089846:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808984a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808984e:	ea94 0f05 	teq	r4, r5
 8089852:	bf08      	it	eq
 8089854:	ea90 0f02 	teqeq	r0, r2
 8089858:	bf1f      	itttt	ne
 808985a:	ea54 0c00 	orrsne.w	ip, r4, r0
 808985e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8089862:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8089866:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808986a:	f000 80e2 	beq.w	8089a32 <__adddf3+0x1ee>
 808986e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8089872:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8089876:	bfb8      	it	lt
 8089878:	426d      	neglt	r5, r5
 808987a:	dd0c      	ble.n	8089896 <__adddf3+0x52>
 808987c:	442c      	add	r4, r5
 808987e:	ea80 0202 	eor.w	r2, r0, r2
 8089882:	ea81 0303 	eor.w	r3, r1, r3
 8089886:	ea82 0000 	eor.w	r0, r2, r0
 808988a:	ea83 0101 	eor.w	r1, r3, r1
 808988e:	ea80 0202 	eor.w	r2, r0, r2
 8089892:	ea81 0303 	eor.w	r3, r1, r3
 8089896:	2d36      	cmp	r5, #54	; 0x36
 8089898:	bf88      	it	hi
 808989a:	bd30      	pophi	{r4, r5, pc}
 808989c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80898a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80898a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80898a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80898ac:	d002      	beq.n	80898b4 <__adddf3+0x70>
 80898ae:	4240      	negs	r0, r0
 80898b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80898b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80898b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80898bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80898c0:	d002      	beq.n	80898c8 <__adddf3+0x84>
 80898c2:	4252      	negs	r2, r2
 80898c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80898c8:	ea94 0f05 	teq	r4, r5
 80898cc:	f000 80a7 	beq.w	8089a1e <__adddf3+0x1da>
 80898d0:	f1a4 0401 	sub.w	r4, r4, #1
 80898d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80898d8:	db0d      	blt.n	80898f6 <__adddf3+0xb2>
 80898da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80898de:	fa22 f205 	lsr.w	r2, r2, r5
 80898e2:	1880      	adds	r0, r0, r2
 80898e4:	f141 0100 	adc.w	r1, r1, #0
 80898e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80898ec:	1880      	adds	r0, r0, r2
 80898ee:	fa43 f305 	asr.w	r3, r3, r5
 80898f2:	4159      	adcs	r1, r3
 80898f4:	e00e      	b.n	8089914 <__adddf3+0xd0>
 80898f6:	f1a5 0520 	sub.w	r5, r5, #32
 80898fa:	f10e 0e20 	add.w	lr, lr, #32
 80898fe:	2a01      	cmp	r2, #1
 8089900:	fa03 fc0e 	lsl.w	ip, r3, lr
 8089904:	bf28      	it	cs
 8089906:	f04c 0c02 	orrcs.w	ip, ip, #2
 808990a:	fa43 f305 	asr.w	r3, r3, r5
 808990e:	18c0      	adds	r0, r0, r3
 8089910:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8089914:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089918:	d507      	bpl.n	808992a <__adddf3+0xe6>
 808991a:	f04f 0e00 	mov.w	lr, #0
 808991e:	f1dc 0c00 	rsbs	ip, ip, #0
 8089922:	eb7e 0000 	sbcs.w	r0, lr, r0
 8089926:	eb6e 0101 	sbc.w	r1, lr, r1
 808992a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808992e:	d31b      	bcc.n	8089968 <__adddf3+0x124>
 8089930:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8089934:	d30c      	bcc.n	8089950 <__adddf3+0x10c>
 8089936:	0849      	lsrs	r1, r1, #1
 8089938:	ea5f 0030 	movs.w	r0, r0, rrx
 808993c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8089940:	f104 0401 	add.w	r4, r4, #1
 8089944:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8089948:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808994c:	f080 809a 	bcs.w	8089a84 <__adddf3+0x240>
 8089950:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8089954:	bf08      	it	eq
 8089956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808995a:	f150 0000 	adcs.w	r0, r0, #0
 808995e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089962:	ea41 0105 	orr.w	r1, r1, r5
 8089966:	bd30      	pop	{r4, r5, pc}
 8089968:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808996c:	4140      	adcs	r0, r0
 808996e:	eb41 0101 	adc.w	r1, r1, r1
 8089972:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089976:	f1a4 0401 	sub.w	r4, r4, #1
 808997a:	d1e9      	bne.n	8089950 <__adddf3+0x10c>
 808997c:	f091 0f00 	teq	r1, #0
 8089980:	bf04      	itt	eq
 8089982:	4601      	moveq	r1, r0
 8089984:	2000      	moveq	r0, #0
 8089986:	fab1 f381 	clz	r3, r1
 808998a:	bf08      	it	eq
 808998c:	3320      	addeq	r3, #32
 808998e:	f1a3 030b 	sub.w	r3, r3, #11
 8089992:	f1b3 0220 	subs.w	r2, r3, #32
 8089996:	da0c      	bge.n	80899b2 <__adddf3+0x16e>
 8089998:	320c      	adds	r2, #12
 808999a:	dd08      	ble.n	80899ae <__adddf3+0x16a>
 808999c:	f102 0c14 	add.w	ip, r2, #20
 80899a0:	f1c2 020c 	rsb	r2, r2, #12
 80899a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80899a8:	fa21 f102 	lsr.w	r1, r1, r2
 80899ac:	e00c      	b.n	80899c8 <__adddf3+0x184>
 80899ae:	f102 0214 	add.w	r2, r2, #20
 80899b2:	bfd8      	it	le
 80899b4:	f1c2 0c20 	rsble	ip, r2, #32
 80899b8:	fa01 f102 	lsl.w	r1, r1, r2
 80899bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80899c0:	bfdc      	itt	le
 80899c2:	ea41 010c 	orrle.w	r1, r1, ip
 80899c6:	4090      	lslle	r0, r2
 80899c8:	1ae4      	subs	r4, r4, r3
 80899ca:	bfa2      	ittt	ge
 80899cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80899d0:	4329      	orrge	r1, r5
 80899d2:	bd30      	popge	{r4, r5, pc}
 80899d4:	ea6f 0404 	mvn.w	r4, r4
 80899d8:	3c1f      	subs	r4, #31
 80899da:	da1c      	bge.n	8089a16 <__adddf3+0x1d2>
 80899dc:	340c      	adds	r4, #12
 80899de:	dc0e      	bgt.n	80899fe <__adddf3+0x1ba>
 80899e0:	f104 0414 	add.w	r4, r4, #20
 80899e4:	f1c4 0220 	rsb	r2, r4, #32
 80899e8:	fa20 f004 	lsr.w	r0, r0, r4
 80899ec:	fa01 f302 	lsl.w	r3, r1, r2
 80899f0:	ea40 0003 	orr.w	r0, r0, r3
 80899f4:	fa21 f304 	lsr.w	r3, r1, r4
 80899f8:	ea45 0103 	orr.w	r1, r5, r3
 80899fc:	bd30      	pop	{r4, r5, pc}
 80899fe:	f1c4 040c 	rsb	r4, r4, #12
 8089a02:	f1c4 0220 	rsb	r2, r4, #32
 8089a06:	fa20 f002 	lsr.w	r0, r0, r2
 8089a0a:	fa01 f304 	lsl.w	r3, r1, r4
 8089a0e:	ea40 0003 	orr.w	r0, r0, r3
 8089a12:	4629      	mov	r1, r5
 8089a14:	bd30      	pop	{r4, r5, pc}
 8089a16:	fa21 f004 	lsr.w	r0, r1, r4
 8089a1a:	4629      	mov	r1, r5
 8089a1c:	bd30      	pop	{r4, r5, pc}
 8089a1e:	f094 0f00 	teq	r4, #0
 8089a22:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8089a26:	bf06      	itte	eq
 8089a28:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8089a2c:	3401      	addeq	r4, #1
 8089a2e:	3d01      	subne	r5, #1
 8089a30:	e74e      	b.n	80898d0 <__adddf3+0x8c>
 8089a32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089a36:	bf18      	it	ne
 8089a38:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089a3c:	d029      	beq.n	8089a92 <__adddf3+0x24e>
 8089a3e:	ea94 0f05 	teq	r4, r5
 8089a42:	bf08      	it	eq
 8089a44:	ea90 0f02 	teqeq	r0, r2
 8089a48:	d005      	beq.n	8089a56 <__adddf3+0x212>
 8089a4a:	ea54 0c00 	orrs.w	ip, r4, r0
 8089a4e:	bf04      	itt	eq
 8089a50:	4619      	moveq	r1, r3
 8089a52:	4610      	moveq	r0, r2
 8089a54:	bd30      	pop	{r4, r5, pc}
 8089a56:	ea91 0f03 	teq	r1, r3
 8089a5a:	bf1e      	ittt	ne
 8089a5c:	2100      	movne	r1, #0
 8089a5e:	2000      	movne	r0, #0
 8089a60:	bd30      	popne	{r4, r5, pc}
 8089a62:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8089a66:	d105      	bne.n	8089a74 <__adddf3+0x230>
 8089a68:	0040      	lsls	r0, r0, #1
 8089a6a:	4149      	adcs	r1, r1
 8089a6c:	bf28      	it	cs
 8089a6e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8089a72:	bd30      	pop	{r4, r5, pc}
 8089a74:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8089a78:	bf3c      	itt	cc
 8089a7a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8089a7e:	bd30      	popcc	{r4, r5, pc}
 8089a80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089a84:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8089a88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8089a8c:	f04f 0000 	mov.w	r0, #0
 8089a90:	bd30      	pop	{r4, r5, pc}
 8089a92:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089a96:	bf1a      	itte	ne
 8089a98:	4619      	movne	r1, r3
 8089a9a:	4610      	movne	r0, r2
 8089a9c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8089aa0:	bf1c      	itt	ne
 8089aa2:	460b      	movne	r3, r1
 8089aa4:	4602      	movne	r2, r0
 8089aa6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8089aaa:	bf06      	itte	eq
 8089aac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8089ab0:	ea91 0f03 	teqeq	r1, r3
 8089ab4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8089ab8:	bd30      	pop	{r4, r5, pc}
 8089aba:	bf00      	nop

08089abc <__aeabi_ui2d>:
 8089abc:	f090 0f00 	teq	r0, #0
 8089ac0:	bf04      	itt	eq
 8089ac2:	2100      	moveq	r1, #0
 8089ac4:	4770      	bxeq	lr
 8089ac6:	b530      	push	{r4, r5, lr}
 8089ac8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089acc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089ad0:	f04f 0500 	mov.w	r5, #0
 8089ad4:	f04f 0100 	mov.w	r1, #0
 8089ad8:	e750      	b.n	808997c <__adddf3+0x138>
 8089ada:	bf00      	nop

08089adc <__aeabi_i2d>:
 8089adc:	f090 0f00 	teq	r0, #0
 8089ae0:	bf04      	itt	eq
 8089ae2:	2100      	moveq	r1, #0
 8089ae4:	4770      	bxeq	lr
 8089ae6:	b530      	push	{r4, r5, lr}
 8089ae8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089aec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089af0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8089af4:	bf48      	it	mi
 8089af6:	4240      	negmi	r0, r0
 8089af8:	f04f 0100 	mov.w	r1, #0
 8089afc:	e73e      	b.n	808997c <__adddf3+0x138>
 8089afe:	bf00      	nop

08089b00 <__aeabi_f2d>:
 8089b00:	0042      	lsls	r2, r0, #1
 8089b02:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8089b06:	ea4f 0131 	mov.w	r1, r1, rrx
 8089b0a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8089b0e:	bf1f      	itttt	ne
 8089b10:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8089b14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8089b18:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8089b1c:	4770      	bxne	lr
 8089b1e:	f092 0f00 	teq	r2, #0
 8089b22:	bf14      	ite	ne
 8089b24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8089b28:	4770      	bxeq	lr
 8089b2a:	b530      	push	{r4, r5, lr}
 8089b2c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8089b30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089b34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089b38:	e720      	b.n	808997c <__adddf3+0x138>
 8089b3a:	bf00      	nop

08089b3c <__aeabi_ul2d>:
 8089b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8089b40:	bf08      	it	eq
 8089b42:	4770      	bxeq	lr
 8089b44:	b530      	push	{r4, r5, lr}
 8089b46:	f04f 0500 	mov.w	r5, #0
 8089b4a:	e00a      	b.n	8089b62 <__aeabi_l2d+0x16>

08089b4c <__aeabi_l2d>:
 8089b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8089b50:	bf08      	it	eq
 8089b52:	4770      	bxeq	lr
 8089b54:	b530      	push	{r4, r5, lr}
 8089b56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8089b5a:	d502      	bpl.n	8089b62 <__aeabi_l2d+0x16>
 8089b5c:	4240      	negs	r0, r0
 8089b5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089b62:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089b66:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089b6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8089b6e:	f43f aedc 	beq.w	808992a <__adddf3+0xe6>
 8089b72:	f04f 0203 	mov.w	r2, #3
 8089b76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089b7a:	bf18      	it	ne
 8089b7c:	3203      	addne	r2, #3
 8089b7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089b82:	bf18      	it	ne
 8089b84:	3203      	addne	r2, #3
 8089b86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8089b8a:	f1c2 0320 	rsb	r3, r2, #32
 8089b8e:	fa00 fc03 	lsl.w	ip, r0, r3
 8089b92:	fa20 f002 	lsr.w	r0, r0, r2
 8089b96:	fa01 fe03 	lsl.w	lr, r1, r3
 8089b9a:	ea40 000e 	orr.w	r0, r0, lr
 8089b9e:	fa21 f102 	lsr.w	r1, r1, r2
 8089ba2:	4414      	add	r4, r2
 8089ba4:	e6c1      	b.n	808992a <__adddf3+0xe6>
 8089ba6:	bf00      	nop

08089ba8 <__aeabi_dmul>:
 8089ba8:	b570      	push	{r4, r5, r6, lr}
 8089baa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089bae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8089bb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8089bb6:	bf1d      	ittte	ne
 8089bb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8089bbc:	ea94 0f0c 	teqne	r4, ip
 8089bc0:	ea95 0f0c 	teqne	r5, ip
 8089bc4:	f000 f8de 	bleq	8089d84 <__aeabi_dmul+0x1dc>
 8089bc8:	442c      	add	r4, r5
 8089bca:	ea81 0603 	eor.w	r6, r1, r3
 8089bce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8089bd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8089bd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8089bda:	bf18      	it	ne
 8089bdc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8089be0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8089be8:	d038      	beq.n	8089c5c <__aeabi_dmul+0xb4>
 8089bea:	fba0 ce02 	umull	ip, lr, r0, r2
 8089bee:	f04f 0500 	mov.w	r5, #0
 8089bf2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8089bf6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8089bfa:	fbe0 e503 	umlal	lr, r5, r0, r3
 8089bfe:	f04f 0600 	mov.w	r6, #0
 8089c02:	fbe1 5603 	umlal	r5, r6, r1, r3
 8089c06:	f09c 0f00 	teq	ip, #0
 8089c0a:	bf18      	it	ne
 8089c0c:	f04e 0e01 	orrne.w	lr, lr, #1
 8089c10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8089c14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8089c18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8089c1c:	d204      	bcs.n	8089c28 <__aeabi_dmul+0x80>
 8089c1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8089c22:	416d      	adcs	r5, r5
 8089c24:	eb46 0606 	adc.w	r6, r6, r6
 8089c28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8089c2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8089c30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8089c34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8089c38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8089c3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8089c40:	bf88      	it	hi
 8089c42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8089c46:	d81e      	bhi.n	8089c86 <__aeabi_dmul+0xde>
 8089c48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8089c4c:	bf08      	it	eq
 8089c4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8089c52:	f150 0000 	adcs.w	r0, r0, #0
 8089c56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089c5a:	bd70      	pop	{r4, r5, r6, pc}
 8089c5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8089c60:	ea46 0101 	orr.w	r1, r6, r1
 8089c64:	ea40 0002 	orr.w	r0, r0, r2
 8089c68:	ea81 0103 	eor.w	r1, r1, r3
 8089c6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8089c70:	bfc2      	ittt	gt
 8089c72:	ebd4 050c 	rsbsgt	r5, r4, ip
 8089c76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8089c7a:	bd70      	popgt	{r4, r5, r6, pc}
 8089c7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089c80:	f04f 0e00 	mov.w	lr, #0
 8089c84:	3c01      	subs	r4, #1
 8089c86:	f300 80ab 	bgt.w	8089de0 <__aeabi_dmul+0x238>
 8089c8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8089c8e:	bfde      	ittt	le
 8089c90:	2000      	movle	r0, #0
 8089c92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8089c96:	bd70      	pople	{r4, r5, r6, pc}
 8089c98:	f1c4 0400 	rsb	r4, r4, #0
 8089c9c:	3c20      	subs	r4, #32
 8089c9e:	da35      	bge.n	8089d0c <__aeabi_dmul+0x164>
 8089ca0:	340c      	adds	r4, #12
 8089ca2:	dc1b      	bgt.n	8089cdc <__aeabi_dmul+0x134>
 8089ca4:	f104 0414 	add.w	r4, r4, #20
 8089ca8:	f1c4 0520 	rsb	r5, r4, #32
 8089cac:	fa00 f305 	lsl.w	r3, r0, r5
 8089cb0:	fa20 f004 	lsr.w	r0, r0, r4
 8089cb4:	fa01 f205 	lsl.w	r2, r1, r5
 8089cb8:	ea40 0002 	orr.w	r0, r0, r2
 8089cbc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8089cc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089cc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8089cc8:	fa21 f604 	lsr.w	r6, r1, r4
 8089ccc:	eb42 0106 	adc.w	r1, r2, r6
 8089cd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8089cd4:	bf08      	it	eq
 8089cd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8089cda:	bd70      	pop	{r4, r5, r6, pc}
 8089cdc:	f1c4 040c 	rsb	r4, r4, #12
 8089ce0:	f1c4 0520 	rsb	r5, r4, #32
 8089ce4:	fa00 f304 	lsl.w	r3, r0, r4
 8089ce8:	fa20 f005 	lsr.w	r0, r0, r5
 8089cec:	fa01 f204 	lsl.w	r2, r1, r4
 8089cf0:	ea40 0002 	orr.w	r0, r0, r2
 8089cf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8089cf8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8089cfc:	f141 0100 	adc.w	r1, r1, #0
 8089d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8089d04:	bf08      	it	eq
 8089d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8089d0a:	bd70      	pop	{r4, r5, r6, pc}
 8089d0c:	f1c4 0520 	rsb	r5, r4, #32
 8089d10:	fa00 f205 	lsl.w	r2, r0, r5
 8089d14:	ea4e 0e02 	orr.w	lr, lr, r2
 8089d18:	fa20 f304 	lsr.w	r3, r0, r4
 8089d1c:	fa01 f205 	lsl.w	r2, r1, r5
 8089d20:	ea43 0302 	orr.w	r3, r3, r2
 8089d24:	fa21 f004 	lsr.w	r0, r1, r4
 8089d28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8089d2c:	fa21 f204 	lsr.w	r2, r1, r4
 8089d30:	ea20 0002 	bic.w	r0, r0, r2
 8089d34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8089d38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8089d3c:	bf08      	it	eq
 8089d3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8089d42:	bd70      	pop	{r4, r5, r6, pc}
 8089d44:	f094 0f00 	teq	r4, #0
 8089d48:	d10f      	bne.n	8089d6a <__aeabi_dmul+0x1c2>
 8089d4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8089d4e:	0040      	lsls	r0, r0, #1
 8089d50:	eb41 0101 	adc.w	r1, r1, r1
 8089d54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089d58:	bf08      	it	eq
 8089d5a:	3c01      	subeq	r4, #1
 8089d5c:	d0f7      	beq.n	8089d4e <__aeabi_dmul+0x1a6>
 8089d5e:	ea41 0106 	orr.w	r1, r1, r6
 8089d62:	f095 0f00 	teq	r5, #0
 8089d66:	bf18      	it	ne
 8089d68:	4770      	bxne	lr
 8089d6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8089d6e:	0052      	lsls	r2, r2, #1
 8089d70:	eb43 0303 	adc.w	r3, r3, r3
 8089d74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8089d78:	bf08      	it	eq
 8089d7a:	3d01      	subeq	r5, #1
 8089d7c:	d0f7      	beq.n	8089d6e <__aeabi_dmul+0x1c6>
 8089d7e:	ea43 0306 	orr.w	r3, r3, r6
 8089d82:	4770      	bx	lr
 8089d84:	ea94 0f0c 	teq	r4, ip
 8089d88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8089d8c:	bf18      	it	ne
 8089d8e:	ea95 0f0c 	teqne	r5, ip
 8089d92:	d00c      	beq.n	8089dae <__aeabi_dmul+0x206>
 8089d94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8089d98:	bf18      	it	ne
 8089d9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8089d9e:	d1d1      	bne.n	8089d44 <__aeabi_dmul+0x19c>
 8089da0:	ea81 0103 	eor.w	r1, r1, r3
 8089da4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8089da8:	f04f 0000 	mov.w	r0, #0
 8089dac:	bd70      	pop	{r4, r5, r6, pc}
 8089dae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8089db2:	bf06      	itte	eq
 8089db4:	4610      	moveq	r0, r2
 8089db6:	4619      	moveq	r1, r3
 8089db8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8089dbc:	d019      	beq.n	8089df2 <__aeabi_dmul+0x24a>
 8089dbe:	ea94 0f0c 	teq	r4, ip
 8089dc2:	d102      	bne.n	8089dca <__aeabi_dmul+0x222>
 8089dc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8089dc8:	d113      	bne.n	8089df2 <__aeabi_dmul+0x24a>
 8089dca:	ea95 0f0c 	teq	r5, ip
 8089dce:	d105      	bne.n	8089ddc <__aeabi_dmul+0x234>
 8089dd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8089dd4:	bf1c      	itt	ne
 8089dd6:	4610      	movne	r0, r2
 8089dd8:	4619      	movne	r1, r3
 8089dda:	d10a      	bne.n	8089df2 <__aeabi_dmul+0x24a>
 8089ddc:	ea81 0103 	eor.w	r1, r1, r3
 8089de0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8089de4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8089de8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8089dec:	f04f 0000 	mov.w	r0, #0
 8089df0:	bd70      	pop	{r4, r5, r6, pc}
 8089df2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8089df6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8089dfa:	bd70      	pop	{r4, r5, r6, pc}

08089dfc <__aeabi_ddiv>:
 8089dfc:	b570      	push	{r4, r5, r6, lr}
 8089dfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089e02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8089e06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8089e0a:	bf1d      	ittte	ne
 8089e0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8089e10:	ea94 0f0c 	teqne	r4, ip
 8089e14:	ea95 0f0c 	teqne	r5, ip
 8089e18:	f000 f8a7 	bleq	8089f6a <__aeabi_ddiv+0x16e>
 8089e1c:	eba4 0405 	sub.w	r4, r4, r5
 8089e20:	ea81 0e03 	eor.w	lr, r1, r3
 8089e24:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8089e28:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8089e2c:	f000 8088 	beq.w	8089f40 <__aeabi_ddiv+0x144>
 8089e30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8089e34:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8089e38:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8089e3c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8089e40:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8089e44:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8089e48:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8089e4c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8089e50:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8089e54:	429d      	cmp	r5, r3
 8089e56:	bf08      	it	eq
 8089e58:	4296      	cmpeq	r6, r2
 8089e5a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8089e5e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8089e62:	d202      	bcs.n	8089e6a <__aeabi_ddiv+0x6e>
 8089e64:	085b      	lsrs	r3, r3, #1
 8089e66:	ea4f 0232 	mov.w	r2, r2, rrx
 8089e6a:	1ab6      	subs	r6, r6, r2
 8089e6c:	eb65 0503 	sbc.w	r5, r5, r3
 8089e70:	085b      	lsrs	r3, r3, #1
 8089e72:	ea4f 0232 	mov.w	r2, r2, rrx
 8089e76:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8089e7a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8089e7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8089e82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8089e86:	bf22      	ittt	cs
 8089e88:	1ab6      	subcs	r6, r6, r2
 8089e8a:	4675      	movcs	r5, lr
 8089e8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8089e90:	085b      	lsrs	r3, r3, #1
 8089e92:	ea4f 0232 	mov.w	r2, r2, rrx
 8089e96:	ebb6 0e02 	subs.w	lr, r6, r2
 8089e9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8089e9e:	bf22      	ittt	cs
 8089ea0:	1ab6      	subcs	r6, r6, r2
 8089ea2:	4675      	movcs	r5, lr
 8089ea4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8089ea8:	085b      	lsrs	r3, r3, #1
 8089eaa:	ea4f 0232 	mov.w	r2, r2, rrx
 8089eae:	ebb6 0e02 	subs.w	lr, r6, r2
 8089eb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8089eb6:	bf22      	ittt	cs
 8089eb8:	1ab6      	subcs	r6, r6, r2
 8089eba:	4675      	movcs	r5, lr
 8089ebc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8089ec0:	085b      	lsrs	r3, r3, #1
 8089ec2:	ea4f 0232 	mov.w	r2, r2, rrx
 8089ec6:	ebb6 0e02 	subs.w	lr, r6, r2
 8089eca:	eb75 0e03 	sbcs.w	lr, r5, r3
 8089ece:	bf22      	ittt	cs
 8089ed0:	1ab6      	subcs	r6, r6, r2
 8089ed2:	4675      	movcs	r5, lr
 8089ed4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8089ed8:	ea55 0e06 	orrs.w	lr, r5, r6
 8089edc:	d018      	beq.n	8089f10 <__aeabi_ddiv+0x114>
 8089ede:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8089ee2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8089ee6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8089eea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8089eee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8089ef2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8089ef6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8089efa:	d1c0      	bne.n	8089e7e <__aeabi_ddiv+0x82>
 8089efc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089f00:	d10b      	bne.n	8089f1a <__aeabi_ddiv+0x11e>
 8089f02:	ea41 0100 	orr.w	r1, r1, r0
 8089f06:	f04f 0000 	mov.w	r0, #0
 8089f0a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8089f0e:	e7b6      	b.n	8089e7e <__aeabi_ddiv+0x82>
 8089f10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089f14:	bf04      	itt	eq
 8089f16:	4301      	orreq	r1, r0
 8089f18:	2000      	moveq	r0, #0
 8089f1a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8089f1e:	bf88      	it	hi
 8089f20:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8089f24:	f63f aeaf 	bhi.w	8089c86 <__aeabi_dmul+0xde>
 8089f28:	ebb5 0c03 	subs.w	ip, r5, r3
 8089f2c:	bf04      	itt	eq
 8089f2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8089f32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8089f36:	f150 0000 	adcs.w	r0, r0, #0
 8089f3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089f3e:	bd70      	pop	{r4, r5, r6, pc}
 8089f40:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8089f44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8089f48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8089f4c:	bfc2      	ittt	gt
 8089f4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8089f52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8089f56:	bd70      	popgt	{r4, r5, r6, pc}
 8089f58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089f5c:	f04f 0e00 	mov.w	lr, #0
 8089f60:	3c01      	subs	r4, #1
 8089f62:	e690      	b.n	8089c86 <__aeabi_dmul+0xde>
 8089f64:	ea45 0e06 	orr.w	lr, r5, r6
 8089f68:	e68d      	b.n	8089c86 <__aeabi_dmul+0xde>
 8089f6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8089f6e:	ea94 0f0c 	teq	r4, ip
 8089f72:	bf08      	it	eq
 8089f74:	ea95 0f0c 	teqeq	r5, ip
 8089f78:	f43f af3b 	beq.w	8089df2 <__aeabi_dmul+0x24a>
 8089f7c:	ea94 0f0c 	teq	r4, ip
 8089f80:	d10a      	bne.n	8089f98 <__aeabi_ddiv+0x19c>
 8089f82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8089f86:	f47f af34 	bne.w	8089df2 <__aeabi_dmul+0x24a>
 8089f8a:	ea95 0f0c 	teq	r5, ip
 8089f8e:	f47f af25 	bne.w	8089ddc <__aeabi_dmul+0x234>
 8089f92:	4610      	mov	r0, r2
 8089f94:	4619      	mov	r1, r3
 8089f96:	e72c      	b.n	8089df2 <__aeabi_dmul+0x24a>
 8089f98:	ea95 0f0c 	teq	r5, ip
 8089f9c:	d106      	bne.n	8089fac <__aeabi_ddiv+0x1b0>
 8089f9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8089fa2:	f43f aefd 	beq.w	8089da0 <__aeabi_dmul+0x1f8>
 8089fa6:	4610      	mov	r0, r2
 8089fa8:	4619      	mov	r1, r3
 8089faa:	e722      	b.n	8089df2 <__aeabi_dmul+0x24a>
 8089fac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8089fb0:	bf18      	it	ne
 8089fb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8089fb6:	f47f aec5 	bne.w	8089d44 <__aeabi_dmul+0x19c>
 8089fba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8089fbe:	f47f af0d 	bne.w	8089ddc <__aeabi_dmul+0x234>
 8089fc2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8089fc6:	f47f aeeb 	bne.w	8089da0 <__aeabi_dmul+0x1f8>
 8089fca:	e712      	b.n	8089df2 <__aeabi_dmul+0x24a>

08089fcc <__gedf2>:
 8089fcc:	f04f 3cff 	mov.w	ip, #4294967295
 8089fd0:	e006      	b.n	8089fe0 <__cmpdf2+0x4>
 8089fd2:	bf00      	nop

08089fd4 <__ledf2>:
 8089fd4:	f04f 0c01 	mov.w	ip, #1
 8089fd8:	e002      	b.n	8089fe0 <__cmpdf2+0x4>
 8089fda:	bf00      	nop

08089fdc <__cmpdf2>:
 8089fdc:	f04f 0c01 	mov.w	ip, #1
 8089fe0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8089fe4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8089fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8089fec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8089ff0:	bf18      	it	ne
 8089ff2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8089ff6:	d01b      	beq.n	808a030 <__cmpdf2+0x54>
 8089ff8:	b001      	add	sp, #4
 8089ffa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8089ffe:	bf0c      	ite	eq
 808a000:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808a004:	ea91 0f03 	teqne	r1, r3
 808a008:	bf02      	ittt	eq
 808a00a:	ea90 0f02 	teqeq	r0, r2
 808a00e:	2000      	moveq	r0, #0
 808a010:	4770      	bxeq	lr
 808a012:	f110 0f00 	cmn.w	r0, #0
 808a016:	ea91 0f03 	teq	r1, r3
 808a01a:	bf58      	it	pl
 808a01c:	4299      	cmppl	r1, r3
 808a01e:	bf08      	it	eq
 808a020:	4290      	cmpeq	r0, r2
 808a022:	bf2c      	ite	cs
 808a024:	17d8      	asrcs	r0, r3, #31
 808a026:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808a02a:	f040 0001 	orr.w	r0, r0, #1
 808a02e:	4770      	bx	lr
 808a030:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a038:	d102      	bne.n	808a040 <__cmpdf2+0x64>
 808a03a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a03e:	d107      	bne.n	808a050 <__cmpdf2+0x74>
 808a040:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a044:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a048:	d1d6      	bne.n	8089ff8 <__cmpdf2+0x1c>
 808a04a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a04e:	d0d3      	beq.n	8089ff8 <__cmpdf2+0x1c>
 808a050:	f85d 0b04 	ldr.w	r0, [sp], #4
 808a054:	4770      	bx	lr
 808a056:	bf00      	nop

0808a058 <__aeabi_cdrcmple>:
 808a058:	4684      	mov	ip, r0
 808a05a:	4610      	mov	r0, r2
 808a05c:	4662      	mov	r2, ip
 808a05e:	468c      	mov	ip, r1
 808a060:	4619      	mov	r1, r3
 808a062:	4663      	mov	r3, ip
 808a064:	e000      	b.n	808a068 <__aeabi_cdcmpeq>
 808a066:	bf00      	nop

0808a068 <__aeabi_cdcmpeq>:
 808a068:	b501      	push	{r0, lr}
 808a06a:	f7ff ffb7 	bl	8089fdc <__cmpdf2>
 808a06e:	2800      	cmp	r0, #0
 808a070:	bf48      	it	mi
 808a072:	f110 0f00 	cmnmi.w	r0, #0
 808a076:	bd01      	pop	{r0, pc}

0808a078 <__aeabi_dcmpeq>:
 808a078:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a07c:	f7ff fff4 	bl	808a068 <__aeabi_cdcmpeq>
 808a080:	bf0c      	ite	eq
 808a082:	2001      	moveq	r0, #1
 808a084:	2000      	movne	r0, #0
 808a086:	f85d fb08 	ldr.w	pc, [sp], #8
 808a08a:	bf00      	nop

0808a08c <__aeabi_dcmplt>:
 808a08c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a090:	f7ff ffea 	bl	808a068 <__aeabi_cdcmpeq>
 808a094:	bf34      	ite	cc
 808a096:	2001      	movcc	r0, #1
 808a098:	2000      	movcs	r0, #0
 808a09a:	f85d fb08 	ldr.w	pc, [sp], #8
 808a09e:	bf00      	nop

0808a0a0 <__aeabi_dcmple>:
 808a0a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a0a4:	f7ff ffe0 	bl	808a068 <__aeabi_cdcmpeq>
 808a0a8:	bf94      	ite	ls
 808a0aa:	2001      	movls	r0, #1
 808a0ac:	2000      	movhi	r0, #0
 808a0ae:	f85d fb08 	ldr.w	pc, [sp], #8
 808a0b2:	bf00      	nop

0808a0b4 <__aeabi_dcmpge>:
 808a0b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a0b8:	f7ff ffce 	bl	808a058 <__aeabi_cdrcmple>
 808a0bc:	bf94      	ite	ls
 808a0be:	2001      	movls	r0, #1
 808a0c0:	2000      	movhi	r0, #0
 808a0c2:	f85d fb08 	ldr.w	pc, [sp], #8
 808a0c6:	bf00      	nop

0808a0c8 <__aeabi_dcmpgt>:
 808a0c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a0cc:	f7ff ffc4 	bl	808a058 <__aeabi_cdrcmple>
 808a0d0:	bf34      	ite	cc
 808a0d2:	2001      	movcc	r0, #1
 808a0d4:	2000      	movcs	r0, #0
 808a0d6:	f85d fb08 	ldr.w	pc, [sp], #8
 808a0da:	bf00      	nop

0808a0dc <__aeabi_dcmpun>:
 808a0dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a0e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a0e4:	d102      	bne.n	808a0ec <__aeabi_dcmpun+0x10>
 808a0e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a0ea:	d10a      	bne.n	808a102 <__aeabi_dcmpun+0x26>
 808a0ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a0f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a0f4:	d102      	bne.n	808a0fc <__aeabi_dcmpun+0x20>
 808a0f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a0fa:	d102      	bne.n	808a102 <__aeabi_dcmpun+0x26>
 808a0fc:	f04f 0000 	mov.w	r0, #0
 808a100:	4770      	bx	lr
 808a102:	f04f 0001 	mov.w	r0, #1
 808a106:	4770      	bx	lr

0808a108 <__aeabi_d2iz>:
 808a108:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a10c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a110:	d215      	bcs.n	808a13e <__aeabi_d2iz+0x36>
 808a112:	d511      	bpl.n	808a138 <__aeabi_d2iz+0x30>
 808a114:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a118:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a11c:	d912      	bls.n	808a144 <__aeabi_d2iz+0x3c>
 808a11e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a122:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a126:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a12a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a12e:	fa23 f002 	lsr.w	r0, r3, r2
 808a132:	bf18      	it	ne
 808a134:	4240      	negne	r0, r0
 808a136:	4770      	bx	lr
 808a138:	f04f 0000 	mov.w	r0, #0
 808a13c:	4770      	bx	lr
 808a13e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a142:	d105      	bne.n	808a150 <__aeabi_d2iz+0x48>
 808a144:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808a148:	bf08      	it	eq
 808a14a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808a14e:	4770      	bx	lr
 808a150:	f04f 0000 	mov.w	r0, #0
 808a154:	4770      	bx	lr
 808a156:	bf00      	nop

0808a158 <__aeabi_d2uiz>:
 808a158:	004a      	lsls	r2, r1, #1
 808a15a:	d211      	bcs.n	808a180 <__aeabi_d2uiz+0x28>
 808a15c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a160:	d211      	bcs.n	808a186 <__aeabi_d2uiz+0x2e>
 808a162:	d50d      	bpl.n	808a180 <__aeabi_d2uiz+0x28>
 808a164:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a168:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a16c:	d40e      	bmi.n	808a18c <__aeabi_d2uiz+0x34>
 808a16e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a176:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a17a:	fa23 f002 	lsr.w	r0, r3, r2
 808a17e:	4770      	bx	lr
 808a180:	f04f 0000 	mov.w	r0, #0
 808a184:	4770      	bx	lr
 808a186:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a18a:	d102      	bne.n	808a192 <__aeabi_d2uiz+0x3a>
 808a18c:	f04f 30ff 	mov.w	r0, #4294967295
 808a190:	4770      	bx	lr
 808a192:	f04f 0000 	mov.w	r0, #0
 808a196:	4770      	bx	lr

0808a198 <__aeabi_d2f>:
 808a198:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a19c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808a1a0:	bf24      	itt	cs
 808a1a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808a1a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808a1aa:	d90d      	bls.n	808a1c8 <__aeabi_d2f+0x30>
 808a1ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a1b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808a1b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808a1b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808a1bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808a1c0:	bf08      	it	eq
 808a1c2:	f020 0001 	biceq.w	r0, r0, #1
 808a1c6:	4770      	bx	lr
 808a1c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808a1cc:	d121      	bne.n	808a212 <__aeabi_d2f+0x7a>
 808a1ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808a1d2:	bfbc      	itt	lt
 808a1d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808a1d8:	4770      	bxlt	lr
 808a1da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a1de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808a1e2:	f1c2 0218 	rsb	r2, r2, #24
 808a1e6:	f1c2 0c20 	rsb	ip, r2, #32
 808a1ea:	fa10 f30c 	lsls.w	r3, r0, ip
 808a1ee:	fa20 f002 	lsr.w	r0, r0, r2
 808a1f2:	bf18      	it	ne
 808a1f4:	f040 0001 	orrne.w	r0, r0, #1
 808a1f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a1fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808a200:	fa03 fc0c 	lsl.w	ip, r3, ip
 808a204:	ea40 000c 	orr.w	r0, r0, ip
 808a208:	fa23 f302 	lsr.w	r3, r3, r2
 808a20c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808a210:	e7cc      	b.n	808a1ac <__aeabi_d2f+0x14>
 808a212:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808a216:	d107      	bne.n	808a228 <__aeabi_d2f+0x90>
 808a218:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808a21c:	bf1e      	ittt	ne
 808a21e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808a222:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808a226:	4770      	bxne	lr
 808a228:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808a22c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a230:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a234:	4770      	bx	lr
 808a236:	bf00      	nop

0808a238 <__aeabi_frsub>:
 808a238:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808a23c:	e002      	b.n	808a244 <__addsf3>
 808a23e:	bf00      	nop

0808a240 <__aeabi_fsub>:
 808a240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808a244 <__addsf3>:
 808a244:	0042      	lsls	r2, r0, #1
 808a246:	bf1f      	itttt	ne
 808a248:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808a24c:	ea92 0f03 	teqne	r2, r3
 808a250:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808a254:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a258:	d06a      	beq.n	808a330 <__addsf3+0xec>
 808a25a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808a25e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808a262:	bfc1      	itttt	gt
 808a264:	18d2      	addgt	r2, r2, r3
 808a266:	4041      	eorgt	r1, r0
 808a268:	4048      	eorgt	r0, r1
 808a26a:	4041      	eorgt	r1, r0
 808a26c:	bfb8      	it	lt
 808a26e:	425b      	neglt	r3, r3
 808a270:	2b19      	cmp	r3, #25
 808a272:	bf88      	it	hi
 808a274:	4770      	bxhi	lr
 808a276:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808a27a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a27e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808a282:	bf18      	it	ne
 808a284:	4240      	negne	r0, r0
 808a286:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a28a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808a28e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808a292:	bf18      	it	ne
 808a294:	4249      	negne	r1, r1
 808a296:	ea92 0f03 	teq	r2, r3
 808a29a:	d03f      	beq.n	808a31c <__addsf3+0xd8>
 808a29c:	f1a2 0201 	sub.w	r2, r2, #1
 808a2a0:	fa41 fc03 	asr.w	ip, r1, r3
 808a2a4:	eb10 000c 	adds.w	r0, r0, ip
 808a2a8:	f1c3 0320 	rsb	r3, r3, #32
 808a2ac:	fa01 f103 	lsl.w	r1, r1, r3
 808a2b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a2b4:	d502      	bpl.n	808a2bc <__addsf3+0x78>
 808a2b6:	4249      	negs	r1, r1
 808a2b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808a2bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808a2c0:	d313      	bcc.n	808a2ea <__addsf3+0xa6>
 808a2c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808a2c6:	d306      	bcc.n	808a2d6 <__addsf3+0x92>
 808a2c8:	0840      	lsrs	r0, r0, #1
 808a2ca:	ea4f 0131 	mov.w	r1, r1, rrx
 808a2ce:	f102 0201 	add.w	r2, r2, #1
 808a2d2:	2afe      	cmp	r2, #254	; 0xfe
 808a2d4:	d251      	bcs.n	808a37a <__addsf3+0x136>
 808a2d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808a2da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a2de:	bf08      	it	eq
 808a2e0:	f020 0001 	biceq.w	r0, r0, #1
 808a2e4:	ea40 0003 	orr.w	r0, r0, r3
 808a2e8:	4770      	bx	lr
 808a2ea:	0049      	lsls	r1, r1, #1
 808a2ec:	eb40 0000 	adc.w	r0, r0, r0
 808a2f0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808a2f4:	f1a2 0201 	sub.w	r2, r2, #1
 808a2f8:	d1ed      	bne.n	808a2d6 <__addsf3+0x92>
 808a2fa:	fab0 fc80 	clz	ip, r0
 808a2fe:	f1ac 0c08 	sub.w	ip, ip, #8
 808a302:	ebb2 020c 	subs.w	r2, r2, ip
 808a306:	fa00 f00c 	lsl.w	r0, r0, ip
 808a30a:	bfaa      	itet	ge
 808a30c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808a310:	4252      	neglt	r2, r2
 808a312:	4318      	orrge	r0, r3
 808a314:	bfbc      	itt	lt
 808a316:	40d0      	lsrlt	r0, r2
 808a318:	4318      	orrlt	r0, r3
 808a31a:	4770      	bx	lr
 808a31c:	f092 0f00 	teq	r2, #0
 808a320:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808a324:	bf06      	itte	eq
 808a326:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808a32a:	3201      	addeq	r2, #1
 808a32c:	3b01      	subne	r3, #1
 808a32e:	e7b5      	b.n	808a29c <__addsf3+0x58>
 808a330:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a334:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a338:	bf18      	it	ne
 808a33a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a33e:	d021      	beq.n	808a384 <__addsf3+0x140>
 808a340:	ea92 0f03 	teq	r2, r3
 808a344:	d004      	beq.n	808a350 <__addsf3+0x10c>
 808a346:	f092 0f00 	teq	r2, #0
 808a34a:	bf08      	it	eq
 808a34c:	4608      	moveq	r0, r1
 808a34e:	4770      	bx	lr
 808a350:	ea90 0f01 	teq	r0, r1
 808a354:	bf1c      	itt	ne
 808a356:	2000      	movne	r0, #0
 808a358:	4770      	bxne	lr
 808a35a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808a35e:	d104      	bne.n	808a36a <__addsf3+0x126>
 808a360:	0040      	lsls	r0, r0, #1
 808a362:	bf28      	it	cs
 808a364:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808a368:	4770      	bx	lr
 808a36a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808a36e:	bf3c      	itt	cc
 808a370:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808a374:	4770      	bxcc	lr
 808a376:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a37a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808a37e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a382:	4770      	bx	lr
 808a384:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808a388:	bf16      	itet	ne
 808a38a:	4608      	movne	r0, r1
 808a38c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808a390:	4601      	movne	r1, r0
 808a392:	0242      	lsls	r2, r0, #9
 808a394:	bf06      	itte	eq
 808a396:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808a39a:	ea90 0f01 	teqeq	r0, r1
 808a39e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808a3a2:	4770      	bx	lr

0808a3a4 <__aeabi_ui2f>:
 808a3a4:	f04f 0300 	mov.w	r3, #0
 808a3a8:	e004      	b.n	808a3b4 <__aeabi_i2f+0x8>
 808a3aa:	bf00      	nop

0808a3ac <__aeabi_i2f>:
 808a3ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808a3b0:	bf48      	it	mi
 808a3b2:	4240      	negmi	r0, r0
 808a3b4:	ea5f 0c00 	movs.w	ip, r0
 808a3b8:	bf08      	it	eq
 808a3ba:	4770      	bxeq	lr
 808a3bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808a3c0:	4601      	mov	r1, r0
 808a3c2:	f04f 0000 	mov.w	r0, #0
 808a3c6:	e01c      	b.n	808a402 <__aeabi_l2f+0x2a>

0808a3c8 <__aeabi_ul2f>:
 808a3c8:	ea50 0201 	orrs.w	r2, r0, r1
 808a3cc:	bf08      	it	eq
 808a3ce:	4770      	bxeq	lr
 808a3d0:	f04f 0300 	mov.w	r3, #0
 808a3d4:	e00a      	b.n	808a3ec <__aeabi_l2f+0x14>
 808a3d6:	bf00      	nop

0808a3d8 <__aeabi_l2f>:
 808a3d8:	ea50 0201 	orrs.w	r2, r0, r1
 808a3dc:	bf08      	it	eq
 808a3de:	4770      	bxeq	lr
 808a3e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808a3e4:	d502      	bpl.n	808a3ec <__aeabi_l2f+0x14>
 808a3e6:	4240      	negs	r0, r0
 808a3e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a3ec:	ea5f 0c01 	movs.w	ip, r1
 808a3f0:	bf02      	ittt	eq
 808a3f2:	4684      	moveq	ip, r0
 808a3f4:	4601      	moveq	r1, r0
 808a3f6:	2000      	moveq	r0, #0
 808a3f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808a3fc:	bf08      	it	eq
 808a3fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808a402:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808a406:	fabc f28c 	clz	r2, ip
 808a40a:	3a08      	subs	r2, #8
 808a40c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808a410:	db10      	blt.n	808a434 <__aeabi_l2f+0x5c>
 808a412:	fa01 fc02 	lsl.w	ip, r1, r2
 808a416:	4463      	add	r3, ip
 808a418:	fa00 fc02 	lsl.w	ip, r0, r2
 808a41c:	f1c2 0220 	rsb	r2, r2, #32
 808a420:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808a424:	fa20 f202 	lsr.w	r2, r0, r2
 808a428:	eb43 0002 	adc.w	r0, r3, r2
 808a42c:	bf08      	it	eq
 808a42e:	f020 0001 	biceq.w	r0, r0, #1
 808a432:	4770      	bx	lr
 808a434:	f102 0220 	add.w	r2, r2, #32
 808a438:	fa01 fc02 	lsl.w	ip, r1, r2
 808a43c:	f1c2 0220 	rsb	r2, r2, #32
 808a440:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808a444:	fa21 f202 	lsr.w	r2, r1, r2
 808a448:	eb43 0002 	adc.w	r0, r3, r2
 808a44c:	bf08      	it	eq
 808a44e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a452:	4770      	bx	lr

0808a454 <__aeabi_fmul>:
 808a454:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a458:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a45c:	bf1e      	ittt	ne
 808a45e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a462:	ea92 0f0c 	teqne	r2, ip
 808a466:	ea93 0f0c 	teqne	r3, ip
 808a46a:	d06f      	beq.n	808a54c <__aeabi_fmul+0xf8>
 808a46c:	441a      	add	r2, r3
 808a46e:	ea80 0c01 	eor.w	ip, r0, r1
 808a472:	0240      	lsls	r0, r0, #9
 808a474:	bf18      	it	ne
 808a476:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808a47a:	d01e      	beq.n	808a4ba <__aeabi_fmul+0x66>
 808a47c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808a480:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808a484:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808a488:	fba0 3101 	umull	r3, r1, r0, r1
 808a48c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a490:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808a494:	bf3e      	ittt	cc
 808a496:	0049      	lslcc	r1, r1, #1
 808a498:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808a49c:	005b      	lslcc	r3, r3, #1
 808a49e:	ea40 0001 	orr.w	r0, r0, r1
 808a4a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808a4a6:	2afd      	cmp	r2, #253	; 0xfd
 808a4a8:	d81d      	bhi.n	808a4e6 <__aeabi_fmul+0x92>
 808a4aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808a4ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a4b2:	bf08      	it	eq
 808a4b4:	f020 0001 	biceq.w	r0, r0, #1
 808a4b8:	4770      	bx	lr
 808a4ba:	f090 0f00 	teq	r0, #0
 808a4be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a4c2:	bf08      	it	eq
 808a4c4:	0249      	lsleq	r1, r1, #9
 808a4c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a4ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808a4ce:	3a7f      	subs	r2, #127	; 0x7f
 808a4d0:	bfc2      	ittt	gt
 808a4d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a4d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a4da:	4770      	bxgt	lr
 808a4dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a4e0:	f04f 0300 	mov.w	r3, #0
 808a4e4:	3a01      	subs	r2, #1
 808a4e6:	dc5d      	bgt.n	808a5a4 <__aeabi_fmul+0x150>
 808a4e8:	f112 0f19 	cmn.w	r2, #25
 808a4ec:	bfdc      	itt	le
 808a4ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808a4f2:	4770      	bxle	lr
 808a4f4:	f1c2 0200 	rsb	r2, r2, #0
 808a4f8:	0041      	lsls	r1, r0, #1
 808a4fa:	fa21 f102 	lsr.w	r1, r1, r2
 808a4fe:	f1c2 0220 	rsb	r2, r2, #32
 808a502:	fa00 fc02 	lsl.w	ip, r0, r2
 808a506:	ea5f 0031 	movs.w	r0, r1, rrx
 808a50a:	f140 0000 	adc.w	r0, r0, #0
 808a50e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808a512:	bf08      	it	eq
 808a514:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a518:	4770      	bx	lr
 808a51a:	f092 0f00 	teq	r2, #0
 808a51e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a522:	bf02      	ittt	eq
 808a524:	0040      	lsleq	r0, r0, #1
 808a526:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a52a:	3a01      	subeq	r2, #1
 808a52c:	d0f9      	beq.n	808a522 <__aeabi_fmul+0xce>
 808a52e:	ea40 000c 	orr.w	r0, r0, ip
 808a532:	f093 0f00 	teq	r3, #0
 808a536:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a53a:	bf02      	ittt	eq
 808a53c:	0049      	lsleq	r1, r1, #1
 808a53e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a542:	3b01      	subeq	r3, #1
 808a544:	d0f9      	beq.n	808a53a <__aeabi_fmul+0xe6>
 808a546:	ea41 010c 	orr.w	r1, r1, ip
 808a54a:	e78f      	b.n	808a46c <__aeabi_fmul+0x18>
 808a54c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a550:	ea92 0f0c 	teq	r2, ip
 808a554:	bf18      	it	ne
 808a556:	ea93 0f0c 	teqne	r3, ip
 808a55a:	d00a      	beq.n	808a572 <__aeabi_fmul+0x11e>
 808a55c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a560:	bf18      	it	ne
 808a562:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808a566:	d1d8      	bne.n	808a51a <__aeabi_fmul+0xc6>
 808a568:	ea80 0001 	eor.w	r0, r0, r1
 808a56c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a570:	4770      	bx	lr
 808a572:	f090 0f00 	teq	r0, #0
 808a576:	bf17      	itett	ne
 808a578:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808a57c:	4608      	moveq	r0, r1
 808a57e:	f091 0f00 	teqne	r1, #0
 808a582:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808a586:	d014      	beq.n	808a5b2 <__aeabi_fmul+0x15e>
 808a588:	ea92 0f0c 	teq	r2, ip
 808a58c:	d101      	bne.n	808a592 <__aeabi_fmul+0x13e>
 808a58e:	0242      	lsls	r2, r0, #9
 808a590:	d10f      	bne.n	808a5b2 <__aeabi_fmul+0x15e>
 808a592:	ea93 0f0c 	teq	r3, ip
 808a596:	d103      	bne.n	808a5a0 <__aeabi_fmul+0x14c>
 808a598:	024b      	lsls	r3, r1, #9
 808a59a:	bf18      	it	ne
 808a59c:	4608      	movne	r0, r1
 808a59e:	d108      	bne.n	808a5b2 <__aeabi_fmul+0x15e>
 808a5a0:	ea80 0001 	eor.w	r0, r0, r1
 808a5a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a5a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a5ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a5b0:	4770      	bx	lr
 808a5b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a5b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808a5ba:	4770      	bx	lr

0808a5bc <__aeabi_fdiv>:
 808a5bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a5c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a5c4:	bf1e      	ittt	ne
 808a5c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a5ca:	ea92 0f0c 	teqne	r2, ip
 808a5ce:	ea93 0f0c 	teqne	r3, ip
 808a5d2:	d069      	beq.n	808a6a8 <__aeabi_fdiv+0xec>
 808a5d4:	eba2 0203 	sub.w	r2, r2, r3
 808a5d8:	ea80 0c01 	eor.w	ip, r0, r1
 808a5dc:	0249      	lsls	r1, r1, #9
 808a5de:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808a5e2:	d037      	beq.n	808a654 <__aeabi_fdiv+0x98>
 808a5e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808a5e8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808a5ec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808a5f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a5f4:	428b      	cmp	r3, r1
 808a5f6:	bf38      	it	cc
 808a5f8:	005b      	lslcc	r3, r3, #1
 808a5fa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808a5fe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808a602:	428b      	cmp	r3, r1
 808a604:	bf24      	itt	cs
 808a606:	1a5b      	subcs	r3, r3, r1
 808a608:	ea40 000c 	orrcs.w	r0, r0, ip
 808a60c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808a610:	bf24      	itt	cs
 808a612:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808a616:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a61a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808a61e:	bf24      	itt	cs
 808a620:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808a624:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a628:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808a62c:	bf24      	itt	cs
 808a62e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808a632:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a636:	011b      	lsls	r3, r3, #4
 808a638:	bf18      	it	ne
 808a63a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808a63e:	d1e0      	bne.n	808a602 <__aeabi_fdiv+0x46>
 808a640:	2afd      	cmp	r2, #253	; 0xfd
 808a642:	f63f af50 	bhi.w	808a4e6 <__aeabi_fmul+0x92>
 808a646:	428b      	cmp	r3, r1
 808a648:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a64c:	bf08      	it	eq
 808a64e:	f020 0001 	biceq.w	r0, r0, #1
 808a652:	4770      	bx	lr
 808a654:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a658:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a65c:	327f      	adds	r2, #127	; 0x7f
 808a65e:	bfc2      	ittt	gt
 808a660:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a664:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a668:	4770      	bxgt	lr
 808a66a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a66e:	f04f 0300 	mov.w	r3, #0
 808a672:	3a01      	subs	r2, #1
 808a674:	e737      	b.n	808a4e6 <__aeabi_fmul+0x92>
 808a676:	f092 0f00 	teq	r2, #0
 808a67a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a67e:	bf02      	ittt	eq
 808a680:	0040      	lsleq	r0, r0, #1
 808a682:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a686:	3a01      	subeq	r2, #1
 808a688:	d0f9      	beq.n	808a67e <__aeabi_fdiv+0xc2>
 808a68a:	ea40 000c 	orr.w	r0, r0, ip
 808a68e:	f093 0f00 	teq	r3, #0
 808a692:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a696:	bf02      	ittt	eq
 808a698:	0049      	lsleq	r1, r1, #1
 808a69a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a69e:	3b01      	subeq	r3, #1
 808a6a0:	d0f9      	beq.n	808a696 <__aeabi_fdiv+0xda>
 808a6a2:	ea41 010c 	orr.w	r1, r1, ip
 808a6a6:	e795      	b.n	808a5d4 <__aeabi_fdiv+0x18>
 808a6a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a6ac:	ea92 0f0c 	teq	r2, ip
 808a6b0:	d108      	bne.n	808a6c4 <__aeabi_fdiv+0x108>
 808a6b2:	0242      	lsls	r2, r0, #9
 808a6b4:	f47f af7d 	bne.w	808a5b2 <__aeabi_fmul+0x15e>
 808a6b8:	ea93 0f0c 	teq	r3, ip
 808a6bc:	f47f af70 	bne.w	808a5a0 <__aeabi_fmul+0x14c>
 808a6c0:	4608      	mov	r0, r1
 808a6c2:	e776      	b.n	808a5b2 <__aeabi_fmul+0x15e>
 808a6c4:	ea93 0f0c 	teq	r3, ip
 808a6c8:	d104      	bne.n	808a6d4 <__aeabi_fdiv+0x118>
 808a6ca:	024b      	lsls	r3, r1, #9
 808a6cc:	f43f af4c 	beq.w	808a568 <__aeabi_fmul+0x114>
 808a6d0:	4608      	mov	r0, r1
 808a6d2:	e76e      	b.n	808a5b2 <__aeabi_fmul+0x15e>
 808a6d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a6d8:	bf18      	it	ne
 808a6da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808a6de:	d1ca      	bne.n	808a676 <__aeabi_fdiv+0xba>
 808a6e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808a6e4:	f47f af5c 	bne.w	808a5a0 <__aeabi_fmul+0x14c>
 808a6e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808a6ec:	f47f af3c 	bne.w	808a568 <__aeabi_fmul+0x114>
 808a6f0:	e75f      	b.n	808a5b2 <__aeabi_fmul+0x15e>
 808a6f2:	bf00      	nop

0808a6f4 <__gesf2>:
 808a6f4:	f04f 3cff 	mov.w	ip, #4294967295
 808a6f8:	e006      	b.n	808a708 <__cmpsf2+0x4>
 808a6fa:	bf00      	nop

0808a6fc <__lesf2>:
 808a6fc:	f04f 0c01 	mov.w	ip, #1
 808a700:	e002      	b.n	808a708 <__cmpsf2+0x4>
 808a702:	bf00      	nop

0808a704 <__cmpsf2>:
 808a704:	f04f 0c01 	mov.w	ip, #1
 808a708:	f84d cd04 	str.w	ip, [sp, #-4]!
 808a70c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808a710:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a714:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a718:	bf18      	it	ne
 808a71a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a71e:	d011      	beq.n	808a744 <__cmpsf2+0x40>
 808a720:	b001      	add	sp, #4
 808a722:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808a726:	bf18      	it	ne
 808a728:	ea90 0f01 	teqne	r0, r1
 808a72c:	bf58      	it	pl
 808a72e:	ebb2 0003 	subspl.w	r0, r2, r3
 808a732:	bf88      	it	hi
 808a734:	17c8      	asrhi	r0, r1, #31
 808a736:	bf38      	it	cc
 808a738:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808a73c:	bf18      	it	ne
 808a73e:	f040 0001 	orrne.w	r0, r0, #1
 808a742:	4770      	bx	lr
 808a744:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a748:	d102      	bne.n	808a750 <__cmpsf2+0x4c>
 808a74a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808a74e:	d105      	bne.n	808a75c <__cmpsf2+0x58>
 808a750:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808a754:	d1e4      	bne.n	808a720 <__cmpsf2+0x1c>
 808a756:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808a75a:	d0e1      	beq.n	808a720 <__cmpsf2+0x1c>
 808a75c:	f85d 0b04 	ldr.w	r0, [sp], #4
 808a760:	4770      	bx	lr
 808a762:	bf00      	nop

0808a764 <__aeabi_cfrcmple>:
 808a764:	4684      	mov	ip, r0
 808a766:	4608      	mov	r0, r1
 808a768:	4661      	mov	r1, ip
 808a76a:	e7ff      	b.n	808a76c <__aeabi_cfcmpeq>

0808a76c <__aeabi_cfcmpeq>:
 808a76c:	b50f      	push	{r0, r1, r2, r3, lr}
 808a76e:	f7ff ffc9 	bl	808a704 <__cmpsf2>
 808a772:	2800      	cmp	r0, #0
 808a774:	bf48      	it	mi
 808a776:	f110 0f00 	cmnmi.w	r0, #0
 808a77a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808a77c <__aeabi_fcmpeq>:
 808a77c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a780:	f7ff fff4 	bl	808a76c <__aeabi_cfcmpeq>
 808a784:	bf0c      	ite	eq
 808a786:	2001      	moveq	r0, #1
 808a788:	2000      	movne	r0, #0
 808a78a:	f85d fb08 	ldr.w	pc, [sp], #8
 808a78e:	bf00      	nop

0808a790 <__aeabi_fcmplt>:
 808a790:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a794:	f7ff ffea 	bl	808a76c <__aeabi_cfcmpeq>
 808a798:	bf34      	ite	cc
 808a79a:	2001      	movcc	r0, #1
 808a79c:	2000      	movcs	r0, #0
 808a79e:	f85d fb08 	ldr.w	pc, [sp], #8
 808a7a2:	bf00      	nop

0808a7a4 <__aeabi_fcmple>:
 808a7a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a7a8:	f7ff ffe0 	bl	808a76c <__aeabi_cfcmpeq>
 808a7ac:	bf94      	ite	ls
 808a7ae:	2001      	movls	r0, #1
 808a7b0:	2000      	movhi	r0, #0
 808a7b2:	f85d fb08 	ldr.w	pc, [sp], #8
 808a7b6:	bf00      	nop

0808a7b8 <__aeabi_fcmpge>:
 808a7b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a7bc:	f7ff ffd2 	bl	808a764 <__aeabi_cfrcmple>
 808a7c0:	bf94      	ite	ls
 808a7c2:	2001      	movls	r0, #1
 808a7c4:	2000      	movhi	r0, #0
 808a7c6:	f85d fb08 	ldr.w	pc, [sp], #8
 808a7ca:	bf00      	nop

0808a7cc <__aeabi_fcmpgt>:
 808a7cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a7d0:	f7ff ffc8 	bl	808a764 <__aeabi_cfrcmple>
 808a7d4:	bf34      	ite	cc
 808a7d6:	2001      	movcc	r0, #1
 808a7d8:	2000      	movcs	r0, #0
 808a7da:	f85d fb08 	ldr.w	pc, [sp], #8
 808a7de:	bf00      	nop

0808a7e0 <__aeabi_f2iz>:
 808a7e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808a7e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808a7e8:	d30f      	bcc.n	808a80a <__aeabi_f2iz+0x2a>
 808a7ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808a7ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808a7f2:	d90d      	bls.n	808a810 <__aeabi_f2iz+0x30>
 808a7f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808a7f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a7fc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808a800:	fa23 f002 	lsr.w	r0, r3, r2
 808a804:	bf18      	it	ne
 808a806:	4240      	negne	r0, r0
 808a808:	4770      	bx	lr
 808a80a:	f04f 0000 	mov.w	r0, #0
 808a80e:	4770      	bx	lr
 808a810:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808a814:	d101      	bne.n	808a81a <__aeabi_f2iz+0x3a>
 808a816:	0242      	lsls	r2, r0, #9
 808a818:	d105      	bne.n	808a826 <__aeabi_f2iz+0x46>
 808a81a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808a81e:	bf08      	it	eq
 808a820:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808a824:	4770      	bx	lr
 808a826:	f04f 0000 	mov.w	r0, #0
 808a82a:	4770      	bx	lr

0808a82c <__aeabi_ldivmod>:
 808a82c:	b97b      	cbnz	r3, 808a84e <__aeabi_ldivmod+0x22>
 808a82e:	b972      	cbnz	r2, 808a84e <__aeabi_ldivmod+0x22>
 808a830:	2900      	cmp	r1, #0
 808a832:	bfbe      	ittt	lt
 808a834:	2000      	movlt	r0, #0
 808a836:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808a83a:	e006      	blt.n	808a84a <__aeabi_ldivmod+0x1e>
 808a83c:	bf08      	it	eq
 808a83e:	2800      	cmpeq	r0, #0
 808a840:	bf1c      	itt	ne
 808a842:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808a846:	f04f 30ff 	movne.w	r0, #4294967295
 808a84a:	f000 b9f1 	b.w	808ac30 <__aeabi_idiv0>
 808a84e:	f1ad 0c08 	sub.w	ip, sp, #8
 808a852:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808a856:	2900      	cmp	r1, #0
 808a858:	db09      	blt.n	808a86e <__aeabi_ldivmod+0x42>
 808a85a:	2b00      	cmp	r3, #0
 808a85c:	db1a      	blt.n	808a894 <__aeabi_ldivmod+0x68>
 808a85e:	f000 f871 	bl	808a944 <__udivmoddi4>
 808a862:	f8dd e004 	ldr.w	lr, [sp, #4]
 808a866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808a86a:	b004      	add	sp, #16
 808a86c:	4770      	bx	lr
 808a86e:	4240      	negs	r0, r0
 808a870:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a874:	2b00      	cmp	r3, #0
 808a876:	db1b      	blt.n	808a8b0 <__aeabi_ldivmod+0x84>
 808a878:	f000 f864 	bl	808a944 <__udivmoddi4>
 808a87c:	f8dd e004 	ldr.w	lr, [sp, #4]
 808a880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808a884:	b004      	add	sp, #16
 808a886:	4240      	negs	r0, r0
 808a888:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a88c:	4252      	negs	r2, r2
 808a88e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808a892:	4770      	bx	lr
 808a894:	4252      	negs	r2, r2
 808a896:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808a89a:	f000 f853 	bl	808a944 <__udivmoddi4>
 808a89e:	f8dd e004 	ldr.w	lr, [sp, #4]
 808a8a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808a8a6:	b004      	add	sp, #16
 808a8a8:	4240      	negs	r0, r0
 808a8aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a8ae:	4770      	bx	lr
 808a8b0:	4252      	negs	r2, r2
 808a8b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808a8b6:	f000 f845 	bl	808a944 <__udivmoddi4>
 808a8ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 808a8be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808a8c2:	b004      	add	sp, #16
 808a8c4:	4252      	negs	r2, r2
 808a8c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808a8ca:	4770      	bx	lr

0808a8cc <__aeabi_uldivmod>:
 808a8cc:	b953      	cbnz	r3, 808a8e4 <__aeabi_uldivmod+0x18>
 808a8ce:	b94a      	cbnz	r2, 808a8e4 <__aeabi_uldivmod+0x18>
 808a8d0:	2900      	cmp	r1, #0
 808a8d2:	bf08      	it	eq
 808a8d4:	2800      	cmpeq	r0, #0
 808a8d6:	bf1c      	itt	ne
 808a8d8:	f04f 31ff 	movne.w	r1, #4294967295
 808a8dc:	f04f 30ff 	movne.w	r0, #4294967295
 808a8e0:	f000 b9a6 	b.w	808ac30 <__aeabi_idiv0>
 808a8e4:	f1ad 0c08 	sub.w	ip, sp, #8
 808a8e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808a8ec:	f000 f82a 	bl	808a944 <__udivmoddi4>
 808a8f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 808a8f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808a8f8:	b004      	add	sp, #16
 808a8fa:	4770      	bx	lr

0808a8fc <__aeabi_d2ulz>:
 808a8fc:	b5d0      	push	{r4, r6, r7, lr}
 808a8fe:	2200      	movs	r2, #0
 808a900:	4b0e      	ldr	r3, [pc, #56]	; (808a93c <__aeabi_d2ulz+0x40>)
 808a902:	4606      	mov	r6, r0
 808a904:	460f      	mov	r7, r1
 808a906:	f7ff f94f 	bl	8089ba8 <__aeabi_dmul>
 808a90a:	f7ff fc25 	bl	808a158 <__aeabi_d2uiz>
 808a90e:	4604      	mov	r4, r0
 808a910:	f7ff f8d4 	bl	8089abc <__aeabi_ui2d>
 808a914:	2200      	movs	r2, #0
 808a916:	4b0a      	ldr	r3, [pc, #40]	; (808a940 <__aeabi_d2ulz+0x44>)
 808a918:	f7ff f946 	bl	8089ba8 <__aeabi_dmul>
 808a91c:	4602      	mov	r2, r0
 808a91e:	460b      	mov	r3, r1
 808a920:	4630      	mov	r0, r6
 808a922:	4639      	mov	r1, r7
 808a924:	f7fe ff8c 	bl	8089840 <__aeabi_dsub>
 808a928:	f7ff fc16 	bl	808a158 <__aeabi_d2uiz>
 808a92c:	4623      	mov	r3, r4
 808a92e:	2200      	movs	r2, #0
 808a930:	ea42 0200 	orr.w	r2, r2, r0
 808a934:	4610      	mov	r0, r2
 808a936:	4619      	mov	r1, r3
 808a938:	bdd0      	pop	{r4, r6, r7, pc}
 808a93a:	bf00      	nop
 808a93c:	3df00000 	.word	0x3df00000
 808a940:	41f00000 	.word	0x41f00000

0808a944 <__udivmoddi4>:
 808a944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a948:	468c      	mov	ip, r1
 808a94a:	460c      	mov	r4, r1
 808a94c:	4605      	mov	r5, r0
 808a94e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808a950:	2b00      	cmp	r3, #0
 808a952:	d14f      	bne.n	808a9f4 <__udivmoddi4+0xb0>
 808a954:	428a      	cmp	r2, r1
 808a956:	4617      	mov	r7, r2
 808a958:	d96b      	bls.n	808aa32 <__udivmoddi4+0xee>
 808a95a:	fab2 fe82 	clz	lr, r2
 808a95e:	f1be 0f00 	cmp.w	lr, #0
 808a962:	d00b      	beq.n	808a97c <__udivmoddi4+0x38>
 808a964:	f1ce 0520 	rsb	r5, lr, #32
 808a968:	fa20 f505 	lsr.w	r5, r0, r5
 808a96c:	fa01 f30e 	lsl.w	r3, r1, lr
 808a970:	ea45 0c03 	orr.w	ip, r5, r3
 808a974:	fa02 f70e 	lsl.w	r7, r2, lr
 808a978:	fa00 f50e 	lsl.w	r5, r0, lr
 808a97c:	0c39      	lsrs	r1, r7, #16
 808a97e:	fbbc f0f1 	udiv	r0, ip, r1
 808a982:	b2ba      	uxth	r2, r7
 808a984:	fb01 c310 	mls	r3, r1, r0, ip
 808a988:	fb00 f802 	mul.w	r8, r0, r2
 808a98c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808a990:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 808a994:	45a0      	cmp	r8, r4
 808a996:	d909      	bls.n	808a9ac <__udivmoddi4+0x68>
 808a998:	19e4      	adds	r4, r4, r7
 808a99a:	f100 33ff 	add.w	r3, r0, #4294967295
 808a99e:	f080 8128 	bcs.w	808abf2 <__udivmoddi4+0x2ae>
 808a9a2:	45a0      	cmp	r8, r4
 808a9a4:	f240 8125 	bls.w	808abf2 <__udivmoddi4+0x2ae>
 808a9a8:	3802      	subs	r0, #2
 808a9aa:	443c      	add	r4, r7
 808a9ac:	ebc8 0404 	rsb	r4, r8, r4
 808a9b0:	fbb4 f3f1 	udiv	r3, r4, r1
 808a9b4:	fb01 4c13 	mls	ip, r1, r3, r4
 808a9b8:	fb03 f202 	mul.w	r2, r3, r2
 808a9bc:	b2ac      	uxth	r4, r5
 808a9be:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808a9c2:	428a      	cmp	r2, r1
 808a9c4:	d909      	bls.n	808a9da <__udivmoddi4+0x96>
 808a9c6:	19c9      	adds	r1, r1, r7
 808a9c8:	f103 34ff 	add.w	r4, r3, #4294967295
 808a9cc:	f080 810f 	bcs.w	808abee <__udivmoddi4+0x2aa>
 808a9d0:	428a      	cmp	r2, r1
 808a9d2:	f240 810c 	bls.w	808abee <__udivmoddi4+0x2aa>
 808a9d6:	3b02      	subs	r3, #2
 808a9d8:	4439      	add	r1, r7
 808a9da:	1a8a      	subs	r2, r1, r2
 808a9dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808a9e0:	2100      	movs	r1, #0
 808a9e2:	2e00      	cmp	r6, #0
 808a9e4:	d063      	beq.n	808aaae <__udivmoddi4+0x16a>
 808a9e6:	fa22 f20e 	lsr.w	r2, r2, lr
 808a9ea:	2300      	movs	r3, #0
 808a9ec:	e886 000c 	stmia.w	r6, {r2, r3}
 808a9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a9f4:	428b      	cmp	r3, r1
 808a9f6:	d907      	bls.n	808aa08 <__udivmoddi4+0xc4>
 808a9f8:	2e00      	cmp	r6, #0
 808a9fa:	d056      	beq.n	808aaaa <__udivmoddi4+0x166>
 808a9fc:	2100      	movs	r1, #0
 808a9fe:	e886 0011 	stmia.w	r6, {r0, r4}
 808aa02:	4608      	mov	r0, r1
 808aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808aa08:	fab3 f183 	clz	r1, r3
 808aa0c:	2900      	cmp	r1, #0
 808aa0e:	f040 8093 	bne.w	808ab38 <__udivmoddi4+0x1f4>
 808aa12:	42a3      	cmp	r3, r4
 808aa14:	d302      	bcc.n	808aa1c <__udivmoddi4+0xd8>
 808aa16:	4282      	cmp	r2, r0
 808aa18:	f200 80fe 	bhi.w	808ac18 <__udivmoddi4+0x2d4>
 808aa1c:	1a85      	subs	r5, r0, r2
 808aa1e:	eb64 0303 	sbc.w	r3, r4, r3
 808aa22:	469c      	mov	ip, r3
 808aa24:	2001      	movs	r0, #1
 808aa26:	2e00      	cmp	r6, #0
 808aa28:	d041      	beq.n	808aaae <__udivmoddi4+0x16a>
 808aa2a:	e886 1020 	stmia.w	r6, {r5, ip}
 808aa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808aa32:	b912      	cbnz	r2, 808aa3a <__udivmoddi4+0xf6>
 808aa34:	2701      	movs	r7, #1
 808aa36:	fbb7 f7f2 	udiv	r7, r7, r2
 808aa3a:	fab7 fe87 	clz	lr, r7
 808aa3e:	f1be 0f00 	cmp.w	lr, #0
 808aa42:	d136      	bne.n	808aab2 <__udivmoddi4+0x16e>
 808aa44:	1be4      	subs	r4, r4, r7
 808aa46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808aa4a:	fa1f f987 	uxth.w	r9, r7
 808aa4e:	2101      	movs	r1, #1
 808aa50:	fbb4 f3f8 	udiv	r3, r4, r8
 808aa54:	fb08 4413 	mls	r4, r8, r3, r4
 808aa58:	fb09 f203 	mul.w	r2, r9, r3
 808aa5c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808aa60:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 808aa64:	42a2      	cmp	r2, r4
 808aa66:	d907      	bls.n	808aa78 <__udivmoddi4+0x134>
 808aa68:	19e4      	adds	r4, r4, r7
 808aa6a:	f103 30ff 	add.w	r0, r3, #4294967295
 808aa6e:	d202      	bcs.n	808aa76 <__udivmoddi4+0x132>
 808aa70:	42a2      	cmp	r2, r4
 808aa72:	f200 80d3 	bhi.w	808ac1c <__udivmoddi4+0x2d8>
 808aa76:	4603      	mov	r3, r0
 808aa78:	1aa4      	subs	r4, r4, r2
 808aa7a:	fbb4 f0f8 	udiv	r0, r4, r8
 808aa7e:	fb08 4810 	mls	r8, r8, r0, r4
 808aa82:	fb09 f900 	mul.w	r9, r9, r0
 808aa86:	b2ac      	uxth	r4, r5
 808aa88:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 808aa8c:	4591      	cmp	r9, r2
 808aa8e:	d907      	bls.n	808aaa0 <__udivmoddi4+0x15c>
 808aa90:	19d2      	adds	r2, r2, r7
 808aa92:	f100 34ff 	add.w	r4, r0, #4294967295
 808aa96:	d202      	bcs.n	808aa9e <__udivmoddi4+0x15a>
 808aa98:	4591      	cmp	r9, r2
 808aa9a:	f200 80ba 	bhi.w	808ac12 <__udivmoddi4+0x2ce>
 808aa9e:	4620      	mov	r0, r4
 808aaa0:	ebc9 0202 	rsb	r2, r9, r2
 808aaa4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808aaa8:	e79b      	b.n	808a9e2 <__udivmoddi4+0x9e>
 808aaaa:	4631      	mov	r1, r6
 808aaac:	4630      	mov	r0, r6
 808aaae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808aab2:	fa07 f70e 	lsl.w	r7, r7, lr
 808aab6:	f1ce 0c20 	rsb	ip, lr, #32
 808aaba:	fa24 f30c 	lsr.w	r3, r4, ip
 808aabe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808aac2:	fbb3 faf8 	udiv	sl, r3, r8
 808aac6:	fa1f f987 	uxth.w	r9, r7
 808aaca:	fb08 351a 	mls	r5, r8, sl, r3
 808aace:	fa20 fc0c 	lsr.w	ip, r0, ip
 808aad2:	fa04 f40e 	lsl.w	r4, r4, lr
 808aad6:	fb0a fb09 	mul.w	fp, sl, r9
 808aada:	ea4c 0c04 	orr.w	ip, ip, r4
 808aade:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808aae2:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 808aae6:	459b      	cmp	fp, r3
 808aae8:	fa00 f50e 	lsl.w	r5, r0, lr
 808aaec:	d90a      	bls.n	808ab04 <__udivmoddi4+0x1c0>
 808aaee:	19db      	adds	r3, r3, r7
 808aaf0:	f10a 32ff 	add.w	r2, sl, #4294967295
 808aaf4:	f080 808b 	bcs.w	808ac0e <__udivmoddi4+0x2ca>
 808aaf8:	459b      	cmp	fp, r3
 808aafa:	f240 8088 	bls.w	808ac0e <__udivmoddi4+0x2ca>
 808aafe:	f1aa 0a02 	sub.w	sl, sl, #2
 808ab02:	443b      	add	r3, r7
 808ab04:	ebcb 0303 	rsb	r3, fp, r3
 808ab08:	fbb3 f0f8 	udiv	r0, r3, r8
 808ab0c:	fb08 3310 	mls	r3, r8, r0, r3
 808ab10:	fb00 f409 	mul.w	r4, r0, r9
 808ab14:	fa1f fc8c 	uxth.w	ip, ip
 808ab18:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808ab1c:	429c      	cmp	r4, r3
 808ab1e:	d907      	bls.n	808ab30 <__udivmoddi4+0x1ec>
 808ab20:	19db      	adds	r3, r3, r7
 808ab22:	f100 32ff 	add.w	r2, r0, #4294967295
 808ab26:	d26e      	bcs.n	808ac06 <__udivmoddi4+0x2c2>
 808ab28:	429c      	cmp	r4, r3
 808ab2a:	d96c      	bls.n	808ac06 <__udivmoddi4+0x2c2>
 808ab2c:	3802      	subs	r0, #2
 808ab2e:	443b      	add	r3, r7
 808ab30:	1b1c      	subs	r4, r3, r4
 808ab32:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 808ab36:	e78b      	b.n	808aa50 <__udivmoddi4+0x10c>
 808ab38:	f1c1 0e20 	rsb	lr, r1, #32
 808ab3c:	408b      	lsls	r3, r1
 808ab3e:	fa22 fc0e 	lsr.w	ip, r2, lr
 808ab42:	ea4c 0c03 	orr.w	ip, ip, r3
 808ab46:	fa24 f70e 	lsr.w	r7, r4, lr
 808ab4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808ab4e:	fbb7 faf9 	udiv	sl, r7, r9
 808ab52:	fa1f f38c 	uxth.w	r3, ip
 808ab56:	fb09 771a 	mls	r7, r9, sl, r7
 808ab5a:	fa20 f80e 	lsr.w	r8, r0, lr
 808ab5e:	408c      	lsls	r4, r1
 808ab60:	fb0a f503 	mul.w	r5, sl, r3
 808ab64:	ea48 0404 	orr.w	r4, r8, r4
 808ab68:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808ab6c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 808ab70:	42bd      	cmp	r5, r7
 808ab72:	fa02 f201 	lsl.w	r2, r2, r1
 808ab76:	fa00 fb01 	lsl.w	fp, r0, r1
 808ab7a:	d909      	bls.n	808ab90 <__udivmoddi4+0x24c>
 808ab7c:	eb17 070c 	adds.w	r7, r7, ip
 808ab80:	f10a 30ff 	add.w	r0, sl, #4294967295
 808ab84:	d241      	bcs.n	808ac0a <__udivmoddi4+0x2c6>
 808ab86:	42bd      	cmp	r5, r7
 808ab88:	d93f      	bls.n	808ac0a <__udivmoddi4+0x2c6>
 808ab8a:	f1aa 0a02 	sub.w	sl, sl, #2
 808ab8e:	4467      	add	r7, ip
 808ab90:	1b7f      	subs	r7, r7, r5
 808ab92:	fbb7 f5f9 	udiv	r5, r7, r9
 808ab96:	fb09 7715 	mls	r7, r9, r5, r7
 808ab9a:	fb05 f303 	mul.w	r3, r5, r3
 808ab9e:	b2a4      	uxth	r4, r4
 808aba0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 808aba4:	42bb      	cmp	r3, r7
 808aba6:	d908      	bls.n	808abba <__udivmoddi4+0x276>
 808aba8:	eb17 070c 	adds.w	r7, r7, ip
 808abac:	f105 30ff 	add.w	r0, r5, #4294967295
 808abb0:	d227      	bcs.n	808ac02 <__udivmoddi4+0x2be>
 808abb2:	42bb      	cmp	r3, r7
 808abb4:	d925      	bls.n	808ac02 <__udivmoddi4+0x2be>
 808abb6:	3d02      	subs	r5, #2
 808abb8:	4467      	add	r7, ip
 808abba:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808abbe:	fba0 8902 	umull	r8, r9, r0, r2
 808abc2:	1aff      	subs	r7, r7, r3
 808abc4:	454f      	cmp	r7, r9
 808abc6:	4645      	mov	r5, r8
 808abc8:	464c      	mov	r4, r9
 808abca:	d314      	bcc.n	808abf6 <__udivmoddi4+0x2b2>
 808abcc:	d029      	beq.n	808ac22 <__udivmoddi4+0x2de>
 808abce:	b366      	cbz	r6, 808ac2a <__udivmoddi4+0x2e6>
 808abd0:	ebbb 0305 	subs.w	r3, fp, r5
 808abd4:	eb67 0704 	sbc.w	r7, r7, r4
 808abd8:	fa07 fe0e 	lsl.w	lr, r7, lr
 808abdc:	40cb      	lsrs	r3, r1
 808abde:	40cf      	lsrs	r7, r1
 808abe0:	ea4e 0303 	orr.w	r3, lr, r3
 808abe4:	e886 0088 	stmia.w	r6, {r3, r7}
 808abe8:	2100      	movs	r1, #0
 808abea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808abee:	4623      	mov	r3, r4
 808abf0:	e6f3      	b.n	808a9da <__udivmoddi4+0x96>
 808abf2:	4618      	mov	r0, r3
 808abf4:	e6da      	b.n	808a9ac <__udivmoddi4+0x68>
 808abf6:	ebb8 0502 	subs.w	r5, r8, r2
 808abfa:	eb69 040c 	sbc.w	r4, r9, ip
 808abfe:	3801      	subs	r0, #1
 808ac00:	e7e5      	b.n	808abce <__udivmoddi4+0x28a>
 808ac02:	4605      	mov	r5, r0
 808ac04:	e7d9      	b.n	808abba <__udivmoddi4+0x276>
 808ac06:	4610      	mov	r0, r2
 808ac08:	e792      	b.n	808ab30 <__udivmoddi4+0x1ec>
 808ac0a:	4682      	mov	sl, r0
 808ac0c:	e7c0      	b.n	808ab90 <__udivmoddi4+0x24c>
 808ac0e:	4692      	mov	sl, r2
 808ac10:	e778      	b.n	808ab04 <__udivmoddi4+0x1c0>
 808ac12:	3802      	subs	r0, #2
 808ac14:	443a      	add	r2, r7
 808ac16:	e743      	b.n	808aaa0 <__udivmoddi4+0x15c>
 808ac18:	4608      	mov	r0, r1
 808ac1a:	e704      	b.n	808aa26 <__udivmoddi4+0xe2>
 808ac1c:	3b02      	subs	r3, #2
 808ac1e:	443c      	add	r4, r7
 808ac20:	e72a      	b.n	808aa78 <__udivmoddi4+0x134>
 808ac22:	45c3      	cmp	fp, r8
 808ac24:	d3e7      	bcc.n	808abf6 <__udivmoddi4+0x2b2>
 808ac26:	463c      	mov	r4, r7
 808ac28:	e7d1      	b.n	808abce <__udivmoddi4+0x28a>
 808ac2a:	4631      	mov	r1, r6
 808ac2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808ac30 <__aeabi_idiv0>:
 808ac30:	4770      	bx	lr
 808ac32:	bf00      	nop

0808ac34 <asctime>:
 808ac34:	4b09      	ldr	r3, [pc, #36]	; (808ac5c <asctime+0x28>)
 808ac36:	b570      	push	{r4, r5, r6, lr}
 808ac38:	681c      	ldr	r4, [r3, #0]
 808ac3a:	4606      	mov	r6, r0
 808ac3c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808ac3e:	b93d      	cbnz	r5, 808ac50 <asctime+0x1c>
 808ac40:	201a      	movs	r0, #26
 808ac42:	f7fc fec1 	bl	80879c8 <malloc>
 808ac46:	221a      	movs	r2, #26
 808ac48:	6420      	str	r0, [r4, #64]	; 0x40
 808ac4a:	4629      	mov	r1, r5
 808ac4c:	f000 f95a 	bl	808af04 <memset>
 808ac50:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808ac52:	4630      	mov	r0, r6
 808ac54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808ac58:	f000 b802 	b.w	808ac60 <asctime_r>
 808ac5c:	20000144 	.word	0x20000144

0808ac60 <asctime_r>:
 808ac60:	b510      	push	{r4, lr}
 808ac62:	460c      	mov	r4, r1
 808ac64:	6941      	ldr	r1, [r0, #20]
 808ac66:	b086      	sub	sp, #24
 808ac68:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808ac6c:	6903      	ldr	r3, [r0, #16]
 808ac6e:	6982      	ldr	r2, [r0, #24]
 808ac70:	9104      	str	r1, [sp, #16]
 808ac72:	6801      	ldr	r1, [r0, #0]
 808ac74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808ac78:	9103      	str	r1, [sp, #12]
 808ac7a:	6841      	ldr	r1, [r0, #4]
 808ac7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808ac80:	9102      	str	r1, [sp, #8]
 808ac82:	6881      	ldr	r1, [r0, #8]
 808ac84:	9101      	str	r1, [sp, #4]
 808ac86:	68c1      	ldr	r1, [r0, #12]
 808ac88:	4620      	mov	r0, r4
 808ac8a:	9100      	str	r1, [sp, #0]
 808ac8c:	4904      	ldr	r1, [pc, #16]	; (808aca0 <asctime_r+0x40>)
 808ac8e:	440b      	add	r3, r1
 808ac90:	4904      	ldr	r1, [pc, #16]	; (808aca4 <asctime_r+0x44>)
 808ac92:	440a      	add	r2, r1
 808ac94:	4904      	ldr	r1, [pc, #16]	; (808aca8 <asctime_r+0x48>)
 808ac96:	f7fc feb7 	bl	8087a08 <siprintf>
 808ac9a:	4620      	mov	r0, r4
 808ac9c:	b006      	add	sp, #24
 808ac9e:	bd10      	pop	{r4, pc}
 808aca0:	080907f1 	.word	0x080907f1
 808aca4:	080907dc 	.word	0x080907dc
 808aca8:	08090815 	.word	0x08090815

0808acac <atof>:
 808acac:	2100      	movs	r1, #0
 808acae:	f001 bcfb 	b.w	808c6a8 <strtod>

0808acb2 <atol>:
 808acb2:	220a      	movs	r2, #10
 808acb4:	2100      	movs	r1, #0
 808acb6:	f001 bd85 	b.w	808c7c4 <strtol>
	...

0808acbc <__cxa_atexit>:
 808acbc:	b510      	push	{r4, lr}
 808acbe:	4c05      	ldr	r4, [pc, #20]	; (808acd4 <__cxa_atexit+0x18>)
 808acc0:	4613      	mov	r3, r2
 808acc2:	b12c      	cbz	r4, 808acd0 <__cxa_atexit+0x14>
 808acc4:	460a      	mov	r2, r1
 808acc6:	4601      	mov	r1, r0
 808acc8:	2002      	movs	r0, #2
 808acca:	f3af 8000 	nop.w
 808acce:	bd10      	pop	{r4, pc}
 808acd0:	4620      	mov	r0, r4
 808acd2:	bd10      	pop	{r4, pc}
 808acd4:	00000000 	.word	0x00000000

0808acd8 <localtime>:
 808acd8:	b538      	push	{r3, r4, r5, lr}
 808acda:	4b07      	ldr	r3, [pc, #28]	; (808acf8 <localtime+0x20>)
 808acdc:	4605      	mov	r5, r0
 808acde:	681c      	ldr	r4, [r3, #0]
 808ace0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808ace2:	b91b      	cbnz	r3, 808acec <localtime+0x14>
 808ace4:	2024      	movs	r0, #36	; 0x24
 808ace6:	f7fc fe6f 	bl	80879c8 <malloc>
 808acea:	63e0      	str	r0, [r4, #60]	; 0x3c
 808acec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808acee:	4628      	mov	r0, r5
 808acf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808acf4:	f000 b802 	b.w	808acfc <localtime_r>
 808acf8:	20000144 	.word	0x20000144

0808acfc <localtime_r>:
 808acfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808ad00:	460c      	mov	r4, r1
 808ad02:	4680      	mov	r8, r0
 808ad04:	f002 fb96 	bl	808d434 <__gettzinfo>
 808ad08:	4621      	mov	r1, r4
 808ad0a:	4607      	mov	r7, r0
 808ad0c:	4640      	mov	r0, r8
 808ad0e:	f002 fb95 	bl	808d43c <gmtime_r>
 808ad12:	6946      	ldr	r6, [r0, #20]
 808ad14:	4604      	mov	r4, r0
 808ad16:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808ad1a:	07b3      	lsls	r3, r6, #30
 808ad1c:	d105      	bne.n	808ad2a <localtime_r+0x2e>
 808ad1e:	2264      	movs	r2, #100	; 0x64
 808ad20:	fb96 f3f2 	sdiv	r3, r6, r2
 808ad24:	fb02 6313 	mls	r3, r2, r3, r6
 808ad28:	b94b      	cbnz	r3, 808ad3e <localtime_r+0x42>
 808ad2a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808ad2e:	fb96 f3f5 	sdiv	r3, r6, r5
 808ad32:	fb05 6513 	mls	r5, r5, r3, r6
 808ad36:	fab5 f385 	clz	r3, r5
 808ad3a:	095b      	lsrs	r3, r3, #5
 808ad3c:	e000      	b.n	808ad40 <localtime_r+0x44>
 808ad3e:	2301      	movs	r3, #1
 808ad40:	4a5f      	ldr	r2, [pc, #380]	; (808aec0 <localtime_r+0x1c4>)
 808ad42:	2530      	movs	r5, #48	; 0x30
 808ad44:	fb05 2503 	mla	r5, r5, r3, r2
 808ad48:	f001 fe86 	bl	808ca58 <__tz_lock>
 808ad4c:	f001 fe86 	bl	808ca5c <_tzset_unlocked>
 808ad50:	4b5c      	ldr	r3, [pc, #368]	; (808aec4 <localtime_r+0x1c8>)
 808ad52:	681b      	ldr	r3, [r3, #0]
 808ad54:	b1f3      	cbz	r3, 808ad94 <localtime_r+0x98>
 808ad56:	687b      	ldr	r3, [r7, #4]
 808ad58:	429e      	cmp	r6, r3
 808ad5a:	d105      	bne.n	808ad68 <localtime_r+0x6c>
 808ad5c:	6839      	ldr	r1, [r7, #0]
 808ad5e:	f8d8 3000 	ldr.w	r3, [r8]
 808ad62:	69fa      	ldr	r2, [r7, #28]
 808ad64:	b941      	cbnz	r1, 808ad78 <localtime_r+0x7c>
 808ad66:	e00a      	b.n	808ad7e <localtime_r+0x82>
 808ad68:	4630      	mov	r0, r6
 808ad6a:	f001 fdcd 	bl	808c908 <__tzcalc_limits>
 808ad6e:	2800      	cmp	r0, #0
 808ad70:	d1f4      	bne.n	808ad5c <localtime_r+0x60>
 808ad72:	f04f 33ff 	mov.w	r3, #4294967295
 808ad76:	e00d      	b.n	808ad94 <localtime_r+0x98>
 808ad78:	4293      	cmp	r3, r2
 808ad7a:	db08      	blt.n	808ad8e <localtime_r+0x92>
 808ad7c:	e001      	b.n	808ad82 <localtime_r+0x86>
 808ad7e:	4293      	cmp	r3, r2
 808ad80:	da07      	bge.n	808ad92 <localtime_r+0x96>
 808ad82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808ad84:	4293      	cmp	r3, r2
 808ad86:	bfac      	ite	ge
 808ad88:	2300      	movge	r3, #0
 808ad8a:	2301      	movlt	r3, #1
 808ad8c:	e002      	b.n	808ad94 <localtime_r+0x98>
 808ad8e:	2300      	movs	r3, #0
 808ad90:	e000      	b.n	808ad94 <localtime_r+0x98>
 808ad92:	2301      	movs	r3, #1
 808ad94:	6223      	str	r3, [r4, #32]
 808ad96:	6a23      	ldr	r3, [r4, #32]
 808ad98:	203c      	movs	r0, #60	; 0x3c
 808ad9a:	2b01      	cmp	r3, #1
 808ad9c:	bf0c      	ite	eq
 808ad9e:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808ada0:	6a39      	ldrne	r1, [r7, #32]
 808ada2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808ada6:	fb91 f6f3 	sdiv	r6, r1, r3
 808adaa:	fb03 1316 	mls	r3, r3, r6, r1
 808adae:	fb93 f2f0 	sdiv	r2, r3, r0
 808adb2:	fb00 3012 	mls	r0, r0, r2, r3
 808adb6:	6861      	ldr	r1, [r4, #4]
 808adb8:	6823      	ldr	r3, [r4, #0]
 808adba:	1a89      	subs	r1, r1, r2
 808adbc:	68a2      	ldr	r2, [r4, #8]
 808adbe:	1a1b      	subs	r3, r3, r0
 808adc0:	1b92      	subs	r2, r2, r6
 808adc2:	2b3b      	cmp	r3, #59	; 0x3b
 808adc4:	6023      	str	r3, [r4, #0]
 808adc6:	6061      	str	r1, [r4, #4]
 808adc8:	60a2      	str	r2, [r4, #8]
 808adca:	dd03      	ble.n	808add4 <localtime_r+0xd8>
 808adcc:	3101      	adds	r1, #1
 808adce:	6061      	str	r1, [r4, #4]
 808add0:	3b3c      	subs	r3, #60	; 0x3c
 808add2:	e004      	b.n	808adde <localtime_r+0xe2>
 808add4:	2b00      	cmp	r3, #0
 808add6:	da03      	bge.n	808ade0 <localtime_r+0xe4>
 808add8:	3901      	subs	r1, #1
 808adda:	6061      	str	r1, [r4, #4]
 808addc:	333c      	adds	r3, #60	; 0x3c
 808adde:	6023      	str	r3, [r4, #0]
 808ade0:	6863      	ldr	r3, [r4, #4]
 808ade2:	2b3b      	cmp	r3, #59	; 0x3b
 808ade4:	dd03      	ble.n	808adee <localtime_r+0xf2>
 808ade6:	3201      	adds	r2, #1
 808ade8:	60a2      	str	r2, [r4, #8]
 808adea:	3b3c      	subs	r3, #60	; 0x3c
 808adec:	e004      	b.n	808adf8 <localtime_r+0xfc>
 808adee:	2b00      	cmp	r3, #0
 808adf0:	da03      	bge.n	808adfa <localtime_r+0xfe>
 808adf2:	3a01      	subs	r2, #1
 808adf4:	60a2      	str	r2, [r4, #8]
 808adf6:	333c      	adds	r3, #60	; 0x3c
 808adf8:	6063      	str	r3, [r4, #4]
 808adfa:	68a3      	ldr	r3, [r4, #8]
 808adfc:	2b17      	cmp	r3, #23
 808adfe:	dd22      	ble.n	808ae46 <localtime_r+0x14a>
 808ae00:	69e2      	ldr	r2, [r4, #28]
 808ae02:	3b18      	subs	r3, #24
 808ae04:	3201      	adds	r2, #1
 808ae06:	61e2      	str	r2, [r4, #28]
 808ae08:	69a2      	ldr	r2, [r4, #24]
 808ae0a:	60a3      	str	r3, [r4, #8]
 808ae0c:	3201      	adds	r2, #1
 808ae0e:	2a06      	cmp	r2, #6
 808ae10:	bfc8      	it	gt
 808ae12:	2200      	movgt	r2, #0
 808ae14:	61a2      	str	r2, [r4, #24]
 808ae16:	68e2      	ldr	r2, [r4, #12]
 808ae18:	6923      	ldr	r3, [r4, #16]
 808ae1a:	3201      	adds	r2, #1
 808ae1c:	60e2      	str	r2, [r4, #12]
 808ae1e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808ae22:	428a      	cmp	r2, r1
 808ae24:	dd46      	ble.n	808aeb4 <localtime_r+0x1b8>
 808ae26:	3301      	adds	r3, #1
 808ae28:	2b0c      	cmp	r3, #12
 808ae2a:	bf08      	it	eq
 808ae2c:	6963      	ldreq	r3, [r4, #20]
 808ae2e:	eba2 0201 	sub.w	r2, r2, r1
 808ae32:	60e2      	str	r2, [r4, #12]
 808ae34:	bf05      	ittet	eq
 808ae36:	3301      	addeq	r3, #1
 808ae38:	2200      	moveq	r2, #0
 808ae3a:	6123      	strne	r3, [r4, #16]
 808ae3c:	6122      	streq	r2, [r4, #16]
 808ae3e:	bf04      	itt	eq
 808ae40:	6163      	streq	r3, [r4, #20]
 808ae42:	61e2      	streq	r2, [r4, #28]
 808ae44:	e036      	b.n	808aeb4 <localtime_r+0x1b8>
 808ae46:	2b00      	cmp	r3, #0
 808ae48:	da34      	bge.n	808aeb4 <localtime_r+0x1b8>
 808ae4a:	69e2      	ldr	r2, [r4, #28]
 808ae4c:	3318      	adds	r3, #24
 808ae4e:	3a01      	subs	r2, #1
 808ae50:	61e2      	str	r2, [r4, #28]
 808ae52:	69a2      	ldr	r2, [r4, #24]
 808ae54:	60a3      	str	r3, [r4, #8]
 808ae56:	3a01      	subs	r2, #1
 808ae58:	bf48      	it	mi
 808ae5a:	2206      	movmi	r2, #6
 808ae5c:	61a2      	str	r2, [r4, #24]
 808ae5e:	68e2      	ldr	r2, [r4, #12]
 808ae60:	3a01      	subs	r2, #1
 808ae62:	60e2      	str	r2, [r4, #12]
 808ae64:	bb32      	cbnz	r2, 808aeb4 <localtime_r+0x1b8>
 808ae66:	6923      	ldr	r3, [r4, #16]
 808ae68:	3b01      	subs	r3, #1
 808ae6a:	d401      	bmi.n	808ae70 <localtime_r+0x174>
 808ae6c:	6123      	str	r3, [r4, #16]
 808ae6e:	e01d      	b.n	808aeac <localtime_r+0x1b0>
 808ae70:	230b      	movs	r3, #11
 808ae72:	6123      	str	r3, [r4, #16]
 808ae74:	6963      	ldr	r3, [r4, #20]
 808ae76:	1e5a      	subs	r2, r3, #1
 808ae78:	f012 0f03 	tst.w	r2, #3
 808ae7c:	6162      	str	r2, [r4, #20]
 808ae7e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808ae82:	d105      	bne.n	808ae90 <localtime_r+0x194>
 808ae84:	2164      	movs	r1, #100	; 0x64
 808ae86:	fb93 f2f1 	sdiv	r2, r3, r1
 808ae8a:	fb01 3212 	mls	r2, r1, r2, r3
 808ae8e:	b94a      	cbnz	r2, 808aea4 <localtime_r+0x1a8>
 808ae90:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808ae94:	fb93 f2f1 	sdiv	r2, r3, r1
 808ae98:	fb01 3312 	mls	r3, r1, r2, r3
 808ae9c:	fab3 f383 	clz	r3, r3
 808aea0:	095b      	lsrs	r3, r3, #5
 808aea2:	e000      	b.n	808aea6 <localtime_r+0x1aa>
 808aea4:	2301      	movs	r3, #1
 808aea6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808aeaa:	61e3      	str	r3, [r4, #28]
 808aeac:	6923      	ldr	r3, [r4, #16]
 808aeae:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808aeb2:	60e3      	str	r3, [r4, #12]
 808aeb4:	f001 fdd1 	bl	808ca5a <__tz_unlock>
 808aeb8:	4620      	mov	r0, r4
 808aeba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808aebe:	bf00      	nop
 808aec0:	080909a0 	.word	0x080909a0
 808aec4:	2000129c 	.word	0x2000129c

0808aec8 <_localeconv_r>:
 808aec8:	4800      	ldr	r0, [pc, #0]	; (808aecc <_localeconv_r+0x4>)
 808aeca:	4770      	bx	lr
 808aecc:	20000148 	.word	0x20000148

0808aed0 <memcmp>:
 808aed0:	b510      	push	{r4, lr}
 808aed2:	3901      	subs	r1, #1
 808aed4:	4402      	add	r2, r0
 808aed6:	4290      	cmp	r0, r2
 808aed8:	d007      	beq.n	808aeea <memcmp+0x1a>
 808aeda:	f810 3b01 	ldrb.w	r3, [r0], #1
 808aede:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808aee2:	42a3      	cmp	r3, r4
 808aee4:	d0f7      	beq.n	808aed6 <memcmp+0x6>
 808aee6:	1b18      	subs	r0, r3, r4
 808aee8:	bd10      	pop	{r4, pc}
 808aeea:	2000      	movs	r0, #0
 808aeec:	bd10      	pop	{r4, pc}

0808aeee <memcpy>:
 808aeee:	b510      	push	{r4, lr}
 808aef0:	1e43      	subs	r3, r0, #1
 808aef2:	440a      	add	r2, r1
 808aef4:	4291      	cmp	r1, r2
 808aef6:	d004      	beq.n	808af02 <memcpy+0x14>
 808aef8:	f811 4b01 	ldrb.w	r4, [r1], #1
 808aefc:	f803 4f01 	strb.w	r4, [r3, #1]!
 808af00:	e7f8      	b.n	808aef4 <memcpy+0x6>
 808af02:	bd10      	pop	{r4, pc}

0808af04 <memset>:
 808af04:	4603      	mov	r3, r0
 808af06:	4402      	add	r2, r0
 808af08:	4293      	cmp	r3, r2
 808af0a:	d002      	beq.n	808af12 <memset+0xe>
 808af0c:	f803 1b01 	strb.w	r1, [r3], #1
 808af10:	e7fa      	b.n	808af08 <memset+0x4>
 808af12:	4770      	bx	lr

0808af14 <srand>:
 808af14:	b538      	push	{r3, r4, r5, lr}
 808af16:	4b12      	ldr	r3, [pc, #72]	; (808af60 <srand+0x4c>)
 808af18:	4605      	mov	r5, r0
 808af1a:	681c      	ldr	r4, [r3, #0]
 808af1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808af1e:	b9d3      	cbnz	r3, 808af56 <srand+0x42>
 808af20:	2018      	movs	r0, #24
 808af22:	f7fc fd51 	bl	80879c8 <malloc>
 808af26:	f243 330e 	movw	r3, #13070	; 0x330e
 808af2a:	63a0      	str	r0, [r4, #56]	; 0x38
 808af2c:	8003      	strh	r3, [r0, #0]
 808af2e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808af32:	8043      	strh	r3, [r0, #2]
 808af34:	f241 2334 	movw	r3, #4660	; 0x1234
 808af38:	8083      	strh	r3, [r0, #4]
 808af3a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808af3e:	80c3      	strh	r3, [r0, #6]
 808af40:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808af44:	8103      	strh	r3, [r0, #8]
 808af46:	2305      	movs	r3, #5
 808af48:	8143      	strh	r3, [r0, #10]
 808af4a:	230b      	movs	r3, #11
 808af4c:	8183      	strh	r3, [r0, #12]
 808af4e:	2201      	movs	r2, #1
 808af50:	2300      	movs	r3, #0
 808af52:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808af56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808af58:	2200      	movs	r2, #0
 808af5a:	611d      	str	r5, [r3, #16]
 808af5c:	615a      	str	r2, [r3, #20]
 808af5e:	bd38      	pop	{r3, r4, r5, pc}
 808af60:	20000144 	.word	0x20000144

0808af64 <strchr>:
 808af64:	b2c9      	uxtb	r1, r1
 808af66:	4603      	mov	r3, r0
 808af68:	f810 2b01 	ldrb.w	r2, [r0], #1
 808af6c:	b11a      	cbz	r2, 808af76 <strchr+0x12>
 808af6e:	4291      	cmp	r1, r2
 808af70:	d1f9      	bne.n	808af66 <strchr+0x2>
 808af72:	4618      	mov	r0, r3
 808af74:	4770      	bx	lr
 808af76:	2900      	cmp	r1, #0
 808af78:	bf0c      	ite	eq
 808af7a:	4618      	moveq	r0, r3
 808af7c:	2000      	movne	r0, #0
 808af7e:	4770      	bx	lr

0808af80 <strcmp>:
 808af80:	f810 2b01 	ldrb.w	r2, [r0], #1
 808af84:	f811 3b01 	ldrb.w	r3, [r1], #1
 808af88:	2a01      	cmp	r2, #1
 808af8a:	bf28      	it	cs
 808af8c:	429a      	cmpcs	r2, r3
 808af8e:	d0f7      	beq.n	808af80 <strcmp>
 808af90:	1ad0      	subs	r0, r2, r3
 808af92:	4770      	bx	lr

0808af94 <strcpy>:
 808af94:	4603      	mov	r3, r0
 808af96:	f811 2b01 	ldrb.w	r2, [r1], #1
 808af9a:	f803 2b01 	strb.w	r2, [r3], #1
 808af9e:	2a00      	cmp	r2, #0
 808afa0:	d1f9      	bne.n	808af96 <strcpy+0x2>
 808afa2:	4770      	bx	lr

0808afa4 <iso_year_adjust>:
 808afa4:	6941      	ldr	r1, [r0, #20]
 808afa6:	b510      	push	{r4, lr}
 808afa8:	078b      	lsls	r3, r1, #30
 808afaa:	d10c      	bne.n	808afc6 <iso_year_adjust+0x22>
 808afac:	f240 736c 	movw	r3, #1900	; 0x76c
 808afb0:	2900      	cmp	r1, #0
 808afb2:	bfa8      	it	ge
 808afb4:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808afb8:	440b      	add	r3, r1
 808afba:	2464      	movs	r4, #100	; 0x64
 808afbc:	fb93 f2f4 	sdiv	r2, r3, r4
 808afc0:	fb04 3312 	mls	r3, r4, r2, r3
 808afc4:	b983      	cbnz	r3, 808afe8 <iso_year_adjust+0x44>
 808afc6:	f240 736c 	movw	r3, #1900	; 0x76c
 808afca:	2900      	cmp	r1, #0
 808afcc:	bfa8      	it	ge
 808afce:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808afd2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808afd6:	440b      	add	r3, r1
 808afd8:	fb93 f1f2 	sdiv	r1, r3, r2
 808afdc:	fb02 3311 	mls	r3, r2, r1, r3
 808afe0:	fab3 f283 	clz	r2, r3
 808afe4:	0952      	lsrs	r2, r2, #5
 808afe6:	e000      	b.n	808afea <iso_year_adjust+0x46>
 808afe8:	2201      	movs	r2, #1
 808afea:	6983      	ldr	r3, [r0, #24]
 808afec:	69c1      	ldr	r1, [r0, #28]
 808afee:	005b      	lsls	r3, r3, #1
 808aff0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808aff4:	4413      	add	r3, r2
 808aff6:	2b21      	cmp	r3, #33	; 0x21
 808aff8:	dc0e      	bgt.n	808b018 <iso_year_adjust+0x74>
 808affa:	2b20      	cmp	r3, #32
 808affc:	da2f      	bge.n	808b05e <iso_year_adjust+0xba>
 808affe:	2b0d      	cmp	r3, #13
 808b000:	dc02      	bgt.n	808b008 <iso_year_adjust+0x64>
 808b002:	2b0a      	cmp	r3, #10
 808b004:	db05      	blt.n	808b012 <iso_year_adjust+0x6e>
 808b006:	e02a      	b.n	808b05e <iso_year_adjust+0xba>
 808b008:	2b10      	cmp	r3, #16
 808b00a:	db26      	blt.n	808b05a <iso_year_adjust+0xb6>
 808b00c:	2b11      	cmp	r3, #17
 808b00e:	dd26      	ble.n	808b05e <iso_year_adjust+0xba>
 808b010:	3b1c      	subs	r3, #28
 808b012:	2b01      	cmp	r3, #1
 808b014:	d923      	bls.n	808b05e <iso_year_adjust+0xba>
 808b016:	e020      	b.n	808b05a <iso_year_adjust+0xb6>
 808b018:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808b01c:	4293      	cmp	r3, r2
 808b01e:	dc0e      	bgt.n	808b03e <iso_year_adjust+0x9a>
 808b020:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808b024:	4293      	cmp	r3, r2
 808b026:	da16      	bge.n	808b056 <iso_year_adjust+0xb2>
 808b028:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808b02c:	4293      	cmp	r3, r2
 808b02e:	d012      	beq.n	808b056 <iso_year_adjust+0xb2>
 808b030:	db13      	blt.n	808b05a <iso_year_adjust+0xb6>
 808b032:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808b036:	3b12      	subs	r3, #18
 808b038:	2b02      	cmp	r3, #2
 808b03a:	d90c      	bls.n	808b056 <iso_year_adjust+0xb2>
 808b03c:	e00d      	b.n	808b05a <iso_year_adjust+0xb6>
 808b03e:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808b042:	4293      	cmp	r3, r2
 808b044:	d007      	beq.n	808b056 <iso_year_adjust+0xb2>
 808b046:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808b04a:	4293      	cmp	r3, r2
 808b04c:	d003      	beq.n	808b056 <iso_year_adjust+0xb2>
 808b04e:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808b052:	4293      	cmp	r3, r2
 808b054:	d101      	bne.n	808b05a <iso_year_adjust+0xb6>
 808b056:	2001      	movs	r0, #1
 808b058:	bd10      	pop	{r4, pc}
 808b05a:	2000      	movs	r0, #0
 808b05c:	bd10      	pop	{r4, pc}
 808b05e:	f04f 30ff 	mov.w	r0, #4294967295
 808b062:	bd10      	pop	{r4, pc}

0808b064 <strftime>:
 808b064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b068:	460e      	mov	r6, r1
 808b06a:	b093      	sub	sp, #76	; 0x4c
 808b06c:	461d      	mov	r5, r3
 808b06e:	4607      	mov	r7, r0
 808b070:	4691      	mov	r9, r2
 808b072:	f001 fc39 	bl	808c8e8 <__get_current_time_locale>
 808b076:	2300      	movs	r3, #0
 808b078:	9306      	str	r3, [sp, #24]
 808b07a:	461c      	mov	r4, r3
 808b07c:	1e73      	subs	r3, r6, #1
 808b07e:	9003      	str	r0, [sp, #12]
 808b080:	9302      	str	r3, [sp, #8]
 808b082:	f899 3000 	ldrb.w	r3, [r9]
 808b086:	2b00      	cmp	r3, #0
 808b088:	f000 8492 	beq.w	808b9b0 <strftime+0x94c>
 808b08c:	2b25      	cmp	r3, #37	; 0x25
 808b08e:	d008      	beq.n	808b0a2 <strftime+0x3e>
 808b090:	9a02      	ldr	r2, [sp, #8]
 808b092:	4294      	cmp	r4, r2
 808b094:	f080 8490 	bcs.w	808b9b8 <strftime+0x954>
 808b098:	553b      	strb	r3, [r7, r4]
 808b09a:	f109 0901 	add.w	r9, r9, #1
 808b09e:	3401      	adds	r4, #1
 808b0a0:	e7ef      	b.n	808b082 <strftime+0x1e>
 808b0a2:	f899 a001 	ldrb.w	sl, [r9, #1]
 808b0a6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808b0aa:	d007      	beq.n	808b0bc <strftime+0x58>
 808b0ac:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b0b0:	d004      	beq.n	808b0bc <strftime+0x58>
 808b0b2:	f109 0901 	add.w	r9, r9, #1
 808b0b6:	f04f 0a00 	mov.w	sl, #0
 808b0ba:	e001      	b.n	808b0c0 <strftime+0x5c>
 808b0bc:	f109 0902 	add.w	r9, r9, #2
 808b0c0:	f899 3000 	ldrb.w	r3, [r9]
 808b0c4:	3b31      	subs	r3, #49	; 0x31
 808b0c6:	2b08      	cmp	r3, #8
 808b0c8:	d808      	bhi.n	808b0dc <strftime+0x78>
 808b0ca:	4648      	mov	r0, r9
 808b0cc:	220a      	movs	r2, #10
 808b0ce:	a90a      	add	r1, sp, #40	; 0x28
 808b0d0:	f001 fc00 	bl	808c8d4 <strtoul>
 808b0d4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808b0d8:	4680      	mov	r8, r0
 808b0da:	e001      	b.n	808b0e0 <strftime+0x7c>
 808b0dc:	f04f 0800 	mov.w	r8, #0
 808b0e0:	f899 3000 	ldrb.w	r3, [r9]
 808b0e4:	2b45      	cmp	r3, #69	; 0x45
 808b0e6:	d001      	beq.n	808b0ec <strftime+0x88>
 808b0e8:	2b4f      	cmp	r3, #79	; 0x4f
 808b0ea:	d101      	bne.n	808b0f0 <strftime+0x8c>
 808b0ec:	f109 0901 	add.w	r9, r9, #1
 808b0f0:	f899 0000 	ldrb.w	r0, [r9]
 808b0f4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808b0f8:	2b55      	cmp	r3, #85	; 0x55
 808b0fa:	f200 845d 	bhi.w	808b9b8 <strftime+0x954>
 808b0fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 808b102:	044a      	.short	0x044a
 808b104:	045b045b 	.word	0x045b045b
 808b108:	045b045b 	.word	0x045b045b
 808b10c:	045b045b 	.word	0x045b045b
 808b110:	045b045b 	.word	0x045b045b
 808b114:	045b045b 	.word	0x045b045b
 808b118:	045b045b 	.word	0x045b045b
 808b11c:	045b045b 	.word	0x045b045b
 808b120:	045b045b 	.word	0x045b045b
 808b124:	045b045b 	.word	0x045b045b
 808b128:	045b045b 	.word	0x045b045b
 808b12c:	045b045b 	.word	0x045b045b
 808b130:	045b045b 	.word	0x045b045b
 808b134:	045b045b 	.word	0x045b045b
 808b138:	006f045b 	.word	0x006f045b
 808b13c:	00d400a1 	.word	0x00d400a1
 808b140:	045b011a 	.word	0x045b011a
 808b144:	01a0013f 	.word	0x01a0013f
 808b148:	022d0226 	.word	0x022d0226
 808b14c:	045b045b 	.word	0x045b045b
 808b150:	0260045b 	.word	0x0260045b
 808b154:	045b045b 	.word	0x045b045b
 808b158:	045b0268 	.word	0x045b0268
 808b15c:	031c0296 	.word	0x031c0296
 808b160:	033a0324 	.word	0x033a0324
 808b164:	03850342 	.word	0x03850342
 808b168:	039f00c6 	.word	0x039f00c6
 808b16c:	045b041f 	.word	0x045b041f
 808b170:	045b045b 	.word	0x045b045b
 808b174:	045b045b 	.word	0x045b045b
 808b178:	0056045b 	.word	0x0056045b
 808b17c:	00ba0089 	.word	0x00ba0089
 808b180:	010c010c 	.word	0x010c010c
 808b184:	0171045b 	.word	0x0171045b
 808b188:	045b0089 	.word	0x045b0089
 808b18c:	0226023d 	.word	0x0226023d
 808b190:	025d022d 	.word	0x025d022d
 808b194:	045b0262 	.word	0x045b0262
 808b198:	045b0268 	.word	0x045b0268
 808b19c:	029b00be 	.word	0x029b00be
 808b1a0:	032d031e 	.word	0x032d031e
 808b1a4:	037e045b 	.word	0x037e045b
 808b1a8:	039100c2 	.word	0x039100c2
 808b1ac:	03e7      	.short	0x03e7
 808b1ae:	69ab      	ldr	r3, [r5, #24]
 808b1b0:	9a03      	ldr	r2, [sp, #12]
 808b1b2:	3318      	adds	r3, #24
 808b1b4:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b1b8:	4640      	mov	r0, r8
 808b1ba:	f000 fc07 	bl	808b9cc <strlen>
 808b1be:	f108 38ff 	add.w	r8, r8, #4294967295
 808b1c2:	193b      	adds	r3, r7, r4
 808b1c4:	4420      	add	r0, r4
 808b1c6:	4284      	cmp	r4, r0
 808b1c8:	f000 83eb 	beq.w	808b9a2 <strftime+0x93e>
 808b1cc:	9a02      	ldr	r2, [sp, #8]
 808b1ce:	4294      	cmp	r4, r2
 808b1d0:	f080 83f2 	bcs.w	808b9b8 <strftime+0x954>
 808b1d4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b1d8:	3401      	adds	r4, #1
 808b1da:	f803 2b01 	strb.w	r2, [r3], #1
 808b1de:	e7f2      	b.n	808b1c6 <strftime+0x162>
 808b1e0:	69ab      	ldr	r3, [r5, #24]
 808b1e2:	9a03      	ldr	r2, [sp, #12]
 808b1e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808b1e8:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808b1ec:	4640      	mov	r0, r8
 808b1ee:	f000 fbed 	bl	808b9cc <strlen>
 808b1f2:	f108 38ff 	add.w	r8, r8, #4294967295
 808b1f6:	193b      	adds	r3, r7, r4
 808b1f8:	4420      	add	r0, r4
 808b1fa:	4284      	cmp	r4, r0
 808b1fc:	f000 83d1 	beq.w	808b9a2 <strftime+0x93e>
 808b200:	9a02      	ldr	r2, [sp, #8]
 808b202:	4294      	cmp	r4, r2
 808b204:	f080 83d8 	bcs.w	808b9b8 <strftime+0x954>
 808b208:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b20c:	3401      	adds	r4, #1
 808b20e:	f803 2b01 	strb.w	r2, [r3], #1
 808b212:	e7f2      	b.n	808b1fa <strftime+0x196>
 808b214:	692b      	ldr	r3, [r5, #16]
 808b216:	9a03      	ldr	r2, [sp, #12]
 808b218:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b21c:	4640      	mov	r0, r8
 808b21e:	f000 fbd5 	bl	808b9cc <strlen>
 808b222:	f108 38ff 	add.w	r8, r8, #4294967295
 808b226:	193b      	adds	r3, r7, r4
 808b228:	4420      	add	r0, r4
 808b22a:	4284      	cmp	r4, r0
 808b22c:	f000 83b9 	beq.w	808b9a2 <strftime+0x93e>
 808b230:	9a02      	ldr	r2, [sp, #8]
 808b232:	4294      	cmp	r4, r2
 808b234:	f080 83c0 	bcs.w	808b9b8 <strftime+0x954>
 808b238:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b23c:	3401      	adds	r4, #1
 808b23e:	f803 2b01 	strb.w	r2, [r3], #1
 808b242:	e7f2      	b.n	808b22a <strftime+0x1c6>
 808b244:	692b      	ldr	r3, [r5, #16]
 808b246:	9a03      	ldr	r2, [sp, #12]
 808b248:	330c      	adds	r3, #12
 808b24a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b24e:	4640      	mov	r0, r8
 808b250:	f000 fbbc 	bl	808b9cc <strlen>
 808b254:	f108 38ff 	add.w	r8, r8, #4294967295
 808b258:	193b      	adds	r3, r7, r4
 808b25a:	4420      	add	r0, r4
 808b25c:	4284      	cmp	r4, r0
 808b25e:	f000 83a0 	beq.w	808b9a2 <strftime+0x93e>
 808b262:	9a02      	ldr	r2, [sp, #8]
 808b264:	4294      	cmp	r4, r2
 808b266:	f080 83a7 	bcs.w	808b9b8 <strftime+0x954>
 808b26a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b26e:	3401      	adds	r4, #1
 808b270:	f803 2b01 	strb.w	r2, [r3], #1
 808b274:	e7f2      	b.n	808b25c <strftime+0x1f8>
 808b276:	9b03      	ldr	r3, [sp, #12]
 808b278:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808b27c:	e00a      	b.n	808b294 <strftime+0x230>
 808b27e:	9b03      	ldr	r3, [sp, #12]
 808b280:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808b284:	e006      	b.n	808b294 <strftime+0x230>
 808b286:	9b03      	ldr	r3, [sp, #12]
 808b288:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808b28c:	e002      	b.n	808b294 <strftime+0x230>
 808b28e:	9b03      	ldr	r3, [sp, #12]
 808b290:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808b294:	4640      	mov	r0, r8
 808b296:	f000 fb99 	bl	808b9cc <strlen>
 808b29a:	f898 3000 	ldrb.w	r3, [r8]
 808b29e:	2b00      	cmp	r3, #0
 808b2a0:	f000 837f 	beq.w	808b9a2 <strftime+0x93e>
 808b2a4:	462b      	mov	r3, r5
 808b2a6:	4642      	mov	r2, r8
 808b2a8:	e093      	b.n	808b3d2 <strftime+0x36e>
 808b2aa:	49b6      	ldr	r1, [pc, #728]	; (808b584 <strftime+0x520>)
 808b2ac:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808b2b0:	458b      	cmp	fp, r1
 808b2b2:	bfac      	ite	ge
 808b2b4:	2100      	movge	r1, #0
 808b2b6:	2101      	movlt	r1, #1
 808b2b8:	f1bb 0f00 	cmp.w	fp, #0
 808b2bc:	db04      	blt.n	808b2c8 <strftime+0x264>
 808b2be:	2064      	movs	r0, #100	; 0x64
 808b2c0:	fb9b f0f0 	sdiv	r0, fp, r0
 808b2c4:	3013      	adds	r0, #19
 808b2c6:	e008      	b.n	808b2da <strftime+0x276>
 808b2c8:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808b2cc:	9107      	str	r1, [sp, #28]
 808b2ce:	f001 fd4b 	bl	808cd68 <abs>
 808b2d2:	2364      	movs	r3, #100	; 0x64
 808b2d4:	fb90 f0f3 	sdiv	r0, r0, r3
 808b2d8:	9907      	ldr	r1, [sp, #28]
 808b2da:	f1ba 0f00 	cmp.w	sl, #0
 808b2de:	d008      	beq.n	808b2f2 <strftime+0x28e>
 808b2e0:	2863      	cmp	r0, #99	; 0x63
 808b2e2:	dd09      	ble.n	808b2f8 <strftime+0x294>
 808b2e4:	4ba8      	ldr	r3, [pc, #672]	; (808b588 <strftime+0x524>)
 808b2e6:	4aa9      	ldr	r2, [pc, #676]	; (808b58c <strftime+0x528>)
 808b2e8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b2ec:	bf18      	it	ne
 808b2ee:	4613      	movne	r3, r2
 808b2f0:	e003      	b.n	808b2fa <strftime+0x296>
 808b2f2:	4ba6      	ldr	r3, [pc, #664]	; (808b58c <strftime+0x528>)
 808b2f4:	4aa6      	ldr	r2, [pc, #664]	; (808b590 <strftime+0x52c>)
 808b2f6:	e001      	b.n	808b2fc <strftime+0x298>
 808b2f8:	4ba4      	ldr	r3, [pc, #656]	; (808b58c <strftime+0x528>)
 808b2fa:	4aa6      	ldr	r2, [pc, #664]	; (808b594 <strftime+0x530>)
 808b2fc:	f1b8 0f01 	cmp.w	r8, #1
 808b300:	bf98      	it	ls
 808b302:	f04f 0802 	movls.w	r8, #2
 808b306:	ebc1 0108 	rsb	r1, r1, r8
 808b30a:	9001      	str	r0, [sp, #4]
 808b30c:	9100      	str	r1, [sp, #0]
 808b30e:	489d      	ldr	r0, [pc, #628]	; (808b584 <strftime+0x520>)
 808b310:	49a1      	ldr	r1, [pc, #644]	; (808b598 <strftime+0x534>)
 808b312:	4583      	cmp	fp, r0
 808b314:	bfb8      	it	lt
 808b316:	460b      	movlt	r3, r1
 808b318:	e21d      	b.n	808b756 <strftime+0x6f2>
 808b31a:	4aa0      	ldr	r2, [pc, #640]	; (808b59c <strftime+0x538>)
 808b31c:	49a0      	ldr	r1, [pc, #640]	; (808b5a0 <strftime+0x53c>)
 808b31e:	68eb      	ldr	r3, [r5, #12]
 808b320:	2864      	cmp	r0, #100	; 0x64
 808b322:	bf08      	it	eq
 808b324:	460a      	moveq	r2, r1
 808b326:	1b31      	subs	r1, r6, r4
 808b328:	1938      	adds	r0, r7, r4
 808b32a:	f7fc fb85 	bl	8087a38 <sniprintf>
 808b32e:	2800      	cmp	r0, #0
 808b330:	f280 8302 	bge.w	808b938 <strftime+0x8d4>
 808b334:	e340      	b.n	808b9b8 <strftime+0x954>
 808b336:	6968      	ldr	r0, [r5, #20]
 808b338:	692b      	ldr	r3, [r5, #16]
 808b33a:	2800      	cmp	r0, #0
 808b33c:	f103 0b01 	add.w	fp, r3, #1
 808b340:	eb07 0804 	add.w	r8, r7, r4
 808b344:	ebc4 0a06 	rsb	sl, r4, r6
 808b348:	68eb      	ldr	r3, [r5, #12]
 808b34a:	db05      	blt.n	808b358 <strftime+0x2f4>
 808b34c:	2264      	movs	r2, #100	; 0x64
 808b34e:	fb90 f1f2 	sdiv	r1, r0, r2
 808b352:	fb02 0011 	mls	r0, r2, r1, r0
 808b356:	e00a      	b.n	808b36e <strftime+0x30a>
 808b358:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b35c:	9307      	str	r3, [sp, #28]
 808b35e:	f001 fd03 	bl	808cd68 <abs>
 808b362:	2264      	movs	r2, #100	; 0x64
 808b364:	fb90 f1f2 	sdiv	r1, r0, r2
 808b368:	fb01 0012 	mls	r0, r1, r2, r0
 808b36c:	9b07      	ldr	r3, [sp, #28]
 808b36e:	9001      	str	r0, [sp, #4]
 808b370:	9300      	str	r3, [sp, #0]
 808b372:	4651      	mov	r1, sl
 808b374:	465b      	mov	r3, fp
 808b376:	4640      	mov	r0, r8
 808b378:	4a8a      	ldr	r2, [pc, #552]	; (808b5a4 <strftime+0x540>)
 808b37a:	f7fc fb5d 	bl	8087a38 <sniprintf>
 808b37e:	e7d6      	b.n	808b32e <strftime+0x2ca>
 808b380:	2325      	movs	r3, #37	; 0x25
 808b382:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808b386:	f1ba 0f00 	cmp.w	sl, #0
 808b38a:	d007      	beq.n	808b39c <strftime+0x338>
 808b38c:	f1b8 0f05 	cmp.w	r8, #5
 808b390:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808b394:	bf98      	it	ls
 808b396:	f04f 0806 	movls.w	r8, #6
 808b39a:	e004      	b.n	808b3a6 <strftime+0x342>
 808b39c:	232b      	movs	r3, #43	; 0x2b
 808b39e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808b3a2:	f04f 080a 	mov.w	r8, #10
 808b3a6:	f1b8 0306 	subs.w	r3, r8, #6
 808b3aa:	d102      	bne.n	808b3b2 <strftime+0x34e>
 808b3ac:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808b3b0:	e00a      	b.n	808b3c8 <strftime+0x364>
 808b3b2:	4a7d      	ldr	r2, [pc, #500]	; (808b5a8 <strftime+0x544>)
 808b3b4:	211e      	movs	r1, #30
 808b3b6:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808b3ba:	f7fc fb3d 	bl	8087a38 <sniprintf>
 808b3be:	2800      	cmp	r0, #0
 808b3c0:	ddf4      	ble.n	808b3ac <strftime+0x348>
 808b3c2:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808b3c6:	4418      	add	r0, r3
 808b3c8:	4978      	ldr	r1, [pc, #480]	; (808b5ac <strftime+0x548>)
 808b3ca:	f7ff fde3 	bl	808af94 <strcpy>
 808b3ce:	462b      	mov	r3, r5
 808b3d0:	aa0a      	add	r2, sp, #40	; 0x28
 808b3d2:	1b31      	subs	r1, r6, r4
 808b3d4:	1938      	adds	r0, r7, r4
 808b3d6:	f7ff fe45 	bl	808b064 <strftime>
 808b3da:	2800      	cmp	r0, #0
 808b3dc:	f340 82ec 	ble.w	808b9b8 <strftime+0x954>
 808b3e0:	4404      	add	r4, r0
 808b3e2:	e2de      	b.n	808b9a2 <strftime+0x93e>
 808b3e4:	4628      	mov	r0, r5
 808b3e6:	f7ff fddd 	bl	808afa4 <iso_year_adjust>
 808b3ea:	4680      	mov	r8, r0
 808b3ec:	6968      	ldr	r0, [r5, #20]
 808b3ee:	2800      	cmp	r0, #0
 808b3f0:	db05      	blt.n	808b3fe <strftime+0x39a>
 808b3f2:	2264      	movs	r2, #100	; 0x64
 808b3f4:	fb90 f1f2 	sdiv	r1, r0, r2
 808b3f8:	fb02 0011 	mls	r0, r2, r1, r0
 808b3fc:	e008      	b.n	808b410 <strftime+0x3ac>
 808b3fe:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b402:	f001 fcb1 	bl	808cd68 <abs>
 808b406:	2264      	movs	r2, #100	; 0x64
 808b408:	fb90 f3f2 	sdiv	r3, r0, r2
 808b40c:	fb03 0012 	mls	r0, r3, r2, r0
 808b410:	f1b8 0f00 	cmp.w	r8, #0
 808b414:	da06      	bge.n	808b424 <strftime+0x3c0>
 808b416:	696a      	ldr	r2, [r5, #20]
 808b418:	4b65      	ldr	r3, [pc, #404]	; (808b5b0 <strftime+0x54c>)
 808b41a:	429a      	cmp	r2, r3
 808b41c:	bfb8      	it	lt
 808b41e:	f04f 0801 	movlt.w	r8, #1
 808b422:	e006      	b.n	808b432 <strftime+0x3ce>
 808b424:	d005      	beq.n	808b432 <strftime+0x3ce>
 808b426:	696a      	ldr	r2, [r5, #20]
 808b428:	4b56      	ldr	r3, [pc, #344]	; (808b584 <strftime+0x520>)
 808b42a:	429a      	cmp	r2, r3
 808b42c:	bfb8      	it	lt
 808b42e:	f04f 38ff 	movlt.w	r8, #4294967295
 808b432:	2364      	movs	r3, #100	; 0x64
 808b434:	4440      	add	r0, r8
 808b436:	fb90 f2f3 	sdiv	r2, r0, r3
 808b43a:	fb03 0012 	mls	r0, r3, r2, r0
 808b43e:	4418      	add	r0, r3
 808b440:	e1f8      	b.n	808b834 <strftime+0x7d0>
 808b442:	4b50      	ldr	r3, [pc, #320]	; (808b584 <strftime+0x520>)
 808b444:	6969      	ldr	r1, [r5, #20]
 808b446:	4628      	mov	r0, r5
 808b448:	4299      	cmp	r1, r3
 808b44a:	bfac      	ite	ge
 808b44c:	2300      	movge	r3, #0
 808b44e:	2301      	movlt	r3, #1
 808b450:	9108      	str	r1, [sp, #32]
 808b452:	9307      	str	r3, [sp, #28]
 808b454:	f7ff fda6 	bl	808afa4 <iso_year_adjust>
 808b458:	9908      	ldr	r1, [sp, #32]
 808b45a:	4683      	mov	fp, r0
 808b45c:	2900      	cmp	r1, #0
 808b45e:	db04      	blt.n	808b46a <strftime+0x406>
 808b460:	2364      	movs	r3, #100	; 0x64
 808b462:	fb91 f3f3 	sdiv	r3, r1, r3
 808b466:	3313      	adds	r3, #19
 808b468:	e008      	b.n	808b47c <strftime+0x418>
 808b46a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808b46e:	9108      	str	r1, [sp, #32]
 808b470:	f001 fc7a 	bl	808cd68 <abs>
 808b474:	2364      	movs	r3, #100	; 0x64
 808b476:	fb90 f3f3 	sdiv	r3, r0, r3
 808b47a:	9908      	ldr	r1, [sp, #32]
 808b47c:	6968      	ldr	r0, [r5, #20]
 808b47e:	2800      	cmp	r0, #0
 808b480:	db06      	blt.n	808b490 <strftime+0x42c>
 808b482:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808b486:	fb90 fcfe 	sdiv	ip, r0, lr
 808b48a:	fb0e 001c 	mls	r0, lr, ip, r0
 808b48e:	e00d      	b.n	808b4ac <strftime+0x448>
 808b490:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b494:	9109      	str	r1, [sp, #36]	; 0x24
 808b496:	9308      	str	r3, [sp, #32]
 808b498:	f001 fc66 	bl	808cd68 <abs>
 808b49c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808b4a0:	fb90 fcfe 	sdiv	ip, r0, lr
 808b4a4:	fb0c 001e 	mls	r0, ip, lr, r0
 808b4a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 808b4aa:	9b08      	ldr	r3, [sp, #32]
 808b4ac:	f1bb 0f00 	cmp.w	fp, #0
 808b4b0:	da08      	bge.n	808b4c4 <strftime+0x460>
 808b4b2:	6969      	ldr	r1, [r5, #20]
 808b4b4:	4a3e      	ldr	r2, [pc, #248]	; (808b5b0 <strftime+0x54c>)
 808b4b6:	4291      	cmp	r1, r2
 808b4b8:	da0a      	bge.n	808b4d0 <strftime+0x46c>
 808b4ba:	f04f 0b01 	mov.w	fp, #1
 808b4be:	f8cd b01c 	str.w	fp, [sp, #28]
 808b4c2:	e005      	b.n	808b4d0 <strftime+0x46c>
 808b4c4:	d004      	beq.n	808b4d0 <strftime+0x46c>
 808b4c6:	4a2f      	ldr	r2, [pc, #188]	; (808b584 <strftime+0x520>)
 808b4c8:	4291      	cmp	r1, r2
 808b4ca:	bfb8      	it	lt
 808b4cc:	f04f 3bff 	movlt.w	fp, #4294967295
 808b4d0:	eb0b 0200 	add.w	r2, fp, r0
 808b4d4:	1c50      	adds	r0, r2, #1
 808b4d6:	d102      	bne.n	808b4de <strftime+0x47a>
 808b4d8:	3b01      	subs	r3, #1
 808b4da:	2263      	movs	r2, #99	; 0x63
 808b4dc:	e003      	b.n	808b4e6 <strftime+0x482>
 808b4de:	2a64      	cmp	r2, #100	; 0x64
 808b4e0:	bf04      	itt	eq
 808b4e2:	3301      	addeq	r3, #1
 808b4e4:	2200      	moveq	r2, #0
 808b4e6:	2064      	movs	r0, #100	; 0x64
 808b4e8:	fb00 2303 	mla	r3, r0, r3, r2
 808b4ec:	9a07      	ldr	r2, [sp, #28]
 808b4ee:	b142      	cbz	r2, 808b502 <strftime+0x49e>
 808b4f0:	222d      	movs	r2, #45	; 0x2d
 808b4f2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808b4f6:	f1b8 0f00 	cmp.w	r8, #0
 808b4fa:	d013      	beq.n	808b524 <strftime+0x4c0>
 808b4fc:	f108 38ff 	add.w	r8, r8, #4294967295
 808b500:	e010      	b.n	808b524 <strftime+0x4c0>
 808b502:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b506:	d110      	bne.n	808b52a <strftime+0x4c6>
 808b508:	f242 720f 	movw	r2, #9999	; 0x270f
 808b50c:	4293      	cmp	r3, r2
 808b50e:	d90c      	bls.n	808b52a <strftime+0x4c6>
 808b510:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808b514:	f1b8 0f00 	cmp.w	r8, #0
 808b518:	d1f0      	bne.n	808b4fc <strftime+0x498>
 808b51a:	aa12      	add	r2, sp, #72	; 0x48
 808b51c:	2125      	movs	r1, #37	; 0x25
 808b51e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808b522:	e00a      	b.n	808b53a <strftime+0x4d6>
 808b524:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808b528:	e000      	b.n	808b52c <strftime+0x4c8>
 808b52a:	aa0a      	add	r2, sp, #40	; 0x28
 808b52c:	2125      	movs	r1, #37	; 0x25
 808b52e:	7011      	strb	r1, [r2, #0]
 808b530:	f1ba 0f00 	cmp.w	sl, #0
 808b534:	d101      	bne.n	808b53a <strftime+0x4d6>
 808b536:	1c50      	adds	r0, r2, #1
 808b538:	e002      	b.n	808b540 <strftime+0x4dc>
 808b53a:	2130      	movs	r1, #48	; 0x30
 808b53c:	1c90      	adds	r0, r2, #2
 808b53e:	7051      	strb	r1, [r2, #1]
 808b540:	491c      	ldr	r1, [pc, #112]	; (808b5b4 <strftime+0x550>)
 808b542:	9307      	str	r3, [sp, #28]
 808b544:	f7ff fd26 	bl	808af94 <strcpy>
 808b548:	9b07      	ldr	r3, [sp, #28]
 808b54a:	9300      	str	r3, [sp, #0]
 808b54c:	e1ac      	b.n	808b8a8 <strftime+0x844>
 808b54e:	4a14      	ldr	r2, [pc, #80]	; (808b5a0 <strftime+0x53c>)
 808b550:	4912      	ldr	r1, [pc, #72]	; (808b59c <strftime+0x538>)
 808b552:	68ab      	ldr	r3, [r5, #8]
 808b554:	286b      	cmp	r0, #107	; 0x6b
 808b556:	bf08      	it	eq
 808b558:	460a      	moveq	r2, r1
 808b55a:	e6e4      	b.n	808b326 <strftime+0x2c2>
 808b55c:	68a9      	ldr	r1, [r5, #8]
 808b55e:	230c      	movs	r3, #12
 808b560:	b131      	cbz	r1, 808b570 <strftime+0x50c>
 808b562:	4299      	cmp	r1, r3
 808b564:	bf16      	itet	ne
 808b566:	fb91 f2f3 	sdivne	r2, r1, r3
 808b56a:	460b      	moveq	r3, r1
 808b56c:	fb03 1312 	mlsne	r3, r3, r2, r1
 808b570:	4a0a      	ldr	r2, [pc, #40]	; (808b59c <strftime+0x538>)
 808b572:	490b      	ldr	r1, [pc, #44]	; (808b5a0 <strftime+0x53c>)
 808b574:	2849      	cmp	r0, #73	; 0x49
 808b576:	bf08      	it	eq
 808b578:	460a      	moveq	r2, r1
 808b57a:	e6d4      	b.n	808b326 <strftime+0x2c2>
 808b57c:	69eb      	ldr	r3, [r5, #28]
 808b57e:	4a0e      	ldr	r2, [pc, #56]	; (808b5b8 <strftime+0x554>)
 808b580:	3301      	adds	r3, #1
 808b582:	e6d0      	b.n	808b326 <strftime+0x2c2>
 808b584:	fffff894 	.word	0xfffff894
 808b588:	08090a0f 	.word	0x08090a0f
 808b58c:	08090584 	.word	0x08090584
 808b590:	08090a00 	.word	0x08090a00
 808b594:	08090a07 	.word	0x08090a07
 808b598:	0808e0de 	.word	0x0808e0de
 808b59c:	08090a11 	.word	0x08090a11
 808b5a0:	08090a1f 	.word	0x08090a1f
 808b5a4:	08090a15 	.word	0x08090a15
 808b5a8:	08090a24 	.word	0x08090a24
 808b5ac:	08090a28 	.word	0x08090a28
 808b5b0:	fffff895 	.word	0xfffff895
 808b5b4:	08090a30 	.word	0x08090a30
 808b5b8:	08090a34 	.word	0x08090a34
 808b5bc:	692b      	ldr	r3, [r5, #16]
 808b5be:	3301      	adds	r3, #1
 808b5c0:	e13c      	b.n	808b83c <strftime+0x7d8>
 808b5c2:	686b      	ldr	r3, [r5, #4]
 808b5c4:	e13a      	b.n	808b83c <strftime+0x7d8>
 808b5c6:	9b02      	ldr	r3, [sp, #8]
 808b5c8:	429c      	cmp	r4, r3
 808b5ca:	f080 81f5 	bcs.w	808b9b8 <strftime+0x954>
 808b5ce:	230a      	movs	r3, #10
 808b5d0:	e1e5      	b.n	808b99e <strftime+0x93a>
 808b5d2:	68ab      	ldr	r3, [r5, #8]
 808b5d4:	9a03      	ldr	r2, [sp, #12]
 808b5d6:	2b0b      	cmp	r3, #11
 808b5d8:	bfcc      	ite	gt
 808b5da:	23a4      	movgt	r3, #164	; 0xa4
 808b5dc:	23a0      	movle	r3, #160	; 0xa0
 808b5de:	4413      	add	r3, r2
 808b5e0:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808b5e4:	4640      	mov	r0, r8
 808b5e6:	f000 f9f1 	bl	808b9cc <strlen>
 808b5ea:	4642      	mov	r2, r8
 808b5ec:	4bb1      	ldr	r3, [pc, #708]	; (808b8b4 <strftime+0x850>)
 808b5ee:	1939      	adds	r1, r7, r4
 808b5f0:	f8d3 e000 	ldr.w	lr, [r3]
 808b5f4:	4420      	add	r0, r4
 808b5f6:	4284      	cmp	r4, r0
 808b5f8:	f000 81d3 	beq.w	808b9a2 <strftime+0x93e>
 808b5fc:	9b02      	ldr	r3, [sp, #8]
 808b5fe:	429c      	cmp	r4, r3
 808b600:	f080 81da 	bcs.w	808b9b8 <strftime+0x954>
 808b604:	f899 3000 	ldrb.w	r3, [r9]
 808b608:	3401      	adds	r4, #1
 808b60a:	2b50      	cmp	r3, #80	; 0x50
 808b60c:	7813      	ldrb	r3, [r2, #0]
 808b60e:	d10a      	bne.n	808b626 <strftime+0x5c2>
 808b610:	eb0e 0c03 	add.w	ip, lr, r3
 808b614:	f89c c001 	ldrb.w	ip, [ip, #1]
 808b618:	f00c 0c03 	and.w	ip, ip, #3
 808b61c:	f1bc 0f01 	cmp.w	ip, #1
 808b620:	bf08      	it	eq
 808b622:	3320      	addeq	r3, #32
 808b624:	b2db      	uxtb	r3, r3
 808b626:	f801 3b01 	strb.w	r3, [r1], #1
 808b62a:	3201      	adds	r2, #1
 808b62c:	e7e3      	b.n	808b5f6 <strftime+0x592>
 808b62e:	686b      	ldr	r3, [r5, #4]
 808b630:	4aa1      	ldr	r2, [pc, #644]	; (808b8b8 <strftime+0x854>)
 808b632:	9300      	str	r3, [sp, #0]
 808b634:	68ab      	ldr	r3, [r5, #8]
 808b636:	e139      	b.n	808b8ac <strftime+0x848>
 808b638:	6a2b      	ldr	r3, [r5, #32]
 808b63a:	2b00      	cmp	r3, #0
 808b63c:	db17      	blt.n	808b66e <strftime+0x60a>
 808b63e:	f001 fa0b 	bl	808ca58 <__tz_lock>
 808b642:	9b06      	ldr	r3, [sp, #24]
 808b644:	b91b      	cbnz	r3, 808b64e <strftime+0x5ea>
 808b646:	f001 fa09 	bl	808ca5c <_tzset_unlocked>
 808b64a:	2301      	movs	r3, #1
 808b64c:	9306      	str	r3, [sp, #24]
 808b64e:	f001 fef1 	bl	808d434 <__gettzinfo>
 808b652:	6a2b      	ldr	r3, [r5, #32]
 808b654:	221c      	movs	r2, #28
 808b656:	2b00      	cmp	r3, #0
 808b658:	bfd4      	ite	le
 808b65a:	2300      	movle	r3, #0
 808b65c:	2301      	movgt	r3, #1
 808b65e:	fb02 0003 	mla	r0, r2, r3, r0
 808b662:	6a03      	ldr	r3, [r0, #32]
 808b664:	f1c3 0800 	rsb	r8, r3, #0
 808b668:	f001 f9f7 	bl	808ca5a <__tz_unlock>
 808b66c:	e001      	b.n	808b672 <strftime+0x60e>
 808b66e:	f04f 0800 	mov.w	r8, #0
 808b672:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808b676:	ebc4 0c06 	rsb	ip, r4, r6
 808b67a:	4670      	mov	r0, lr
 808b67c:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808b680:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808b684:	f141 33ff 	adc.w	r3, r1, #4294967295
 808b688:	2a00      	cmp	r2, #0
 808b68a:	f173 0b00 	sbcs.w	fp, r3, #0
 808b68e:	eb07 0a04 	add.w	sl, r7, r4
 808b692:	da03      	bge.n	808b69c <strftime+0x638>
 808b694:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808b698:	f141 33ff 	adc.w	r3, r1, #4294967295
 808b69c:	0891      	lsrs	r1, r2, #2
 808b69e:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808b6a2:	109b      	asrs	r3, r3, #2
 808b6a4:	9104      	str	r1, [sp, #16]
 808b6a6:	9305      	str	r3, [sp, #20]
 808b6a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 808b6ac:	2364      	movs	r3, #100	; 0x64
 808b6ae:	fb91 f1f3 	sdiv	r1, r1, r3
 808b6b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808b6b6:	1a52      	subs	r2, r2, r1
 808b6b8:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808b6bc:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808b6c0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808b6c4:	fb90 f1f1 	sdiv	r1, r0, r1
 808b6c8:	1852      	adds	r2, r2, r1
 808b6ca:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808b6ce:	f240 116d 	movw	r1, #365	; 0x16d
 808b6d2:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808b6d6:	fb01 fe0e 	mul.w	lr, r1, lr
 808b6da:	69e9      	ldr	r1, [r5, #28]
 808b6dc:	eb12 020e 	adds.w	r2, r2, lr
 808b6e0:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808b6e4:	1852      	adds	r2, r2, r1
 808b6e6:	f04f 0e18 	mov.w	lr, #24
 808b6ea:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808b6ee:	fba2 010e 	umull	r0, r1, r2, lr
 808b6f2:	fb0e 1103 	mla	r1, lr, r3, r1
 808b6f6:	68ab      	ldr	r3, [r5, #8]
 808b6f8:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808b6fc:	18c0      	adds	r0, r0, r3
 808b6fe:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808b702:	fba0 230e 	umull	r2, r3, r0, lr
 808b706:	fb0e 3301 	mla	r3, lr, r1, r3
 808b70a:	6869      	ldr	r1, [r5, #4]
 808b70c:	1852      	adds	r2, r2, r1
 808b70e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808b712:	fba2 010e 	umull	r0, r1, r2, lr
 808b716:	fb0e 1103 	mla	r1, lr, r3, r1
 808b71a:	682b      	ldr	r3, [r5, #0]
 808b71c:	4a67      	ldr	r2, [pc, #412]	; (808b8bc <strftime+0x858>)
 808b71e:	18c0      	adds	r0, r0, r3
 808b720:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808b724:	ebb0 0008 	subs.w	r0, r0, r8
 808b728:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808b72c:	e9cd 0100 	strd	r0, r1, [sp]
 808b730:	4661      	mov	r1, ip
 808b732:	4650      	mov	r0, sl
 808b734:	f7fc f980 	bl	8087a38 <sniprintf>
 808b738:	e5f9      	b.n	808b32e <strftime+0x2ca>
 808b73a:	682b      	ldr	r3, [r5, #0]
 808b73c:	e07e      	b.n	808b83c <strftime+0x7d8>
 808b73e:	9b02      	ldr	r3, [sp, #8]
 808b740:	429c      	cmp	r4, r3
 808b742:	f080 8139 	bcs.w	808b9b8 <strftime+0x954>
 808b746:	2309      	movs	r3, #9
 808b748:	e129      	b.n	808b99e <strftime+0x93a>
 808b74a:	682b      	ldr	r3, [r5, #0]
 808b74c:	4a5c      	ldr	r2, [pc, #368]	; (808b8c0 <strftime+0x85c>)
 808b74e:	9301      	str	r3, [sp, #4]
 808b750:	686b      	ldr	r3, [r5, #4]
 808b752:	9300      	str	r3, [sp, #0]
 808b754:	68ab      	ldr	r3, [r5, #8]
 808b756:	1b31      	subs	r1, r6, r4
 808b758:	1938      	adds	r0, r7, r4
 808b75a:	e60e      	b.n	808b37a <strftime+0x316>
 808b75c:	9b02      	ldr	r3, [sp, #8]
 808b75e:	429c      	cmp	r4, r3
 808b760:	f080 812a 	bcs.w	808b9b8 <strftime+0x954>
 808b764:	69ab      	ldr	r3, [r5, #24]
 808b766:	1c62      	adds	r2, r4, #1
 808b768:	b90b      	cbnz	r3, 808b76e <strftime+0x70a>
 808b76a:	2337      	movs	r3, #55	; 0x37
 808b76c:	e000      	b.n	808b770 <strftime+0x70c>
 808b76e:	3330      	adds	r3, #48	; 0x30
 808b770:	553b      	strb	r3, [r7, r4]
 808b772:	4614      	mov	r4, r2
 808b774:	e115      	b.n	808b9a2 <strftime+0x93e>
 808b776:	69eb      	ldr	r3, [r5, #28]
 808b778:	69aa      	ldr	r2, [r5, #24]
 808b77a:	3307      	adds	r3, #7
 808b77c:	1a9b      	subs	r3, r3, r2
 808b77e:	2207      	movs	r2, #7
 808b780:	fb93 f3f2 	sdiv	r3, r3, r2
 808b784:	e05a      	b.n	808b83c <strftime+0x7d8>
 808b786:	4628      	mov	r0, r5
 808b788:	f7ff fc0c 	bl	808afa4 <iso_year_adjust>
 808b78c:	69aa      	ldr	r2, [r5, #24]
 808b78e:	b10a      	cbz	r2, 808b794 <strftime+0x730>
 808b790:	1e53      	subs	r3, r2, #1
 808b792:	e000      	b.n	808b796 <strftime+0x732>
 808b794:	2306      	movs	r3, #6
 808b796:	2800      	cmp	r0, #0
 808b798:	dc2f      	bgt.n	808b7fa <strftime+0x796>
 808b79a:	69ea      	ldr	r2, [r5, #28]
 808b79c:	d101      	bne.n	808b7a2 <strftime+0x73e>
 808b79e:	320a      	adds	r2, #10
 808b7a0:	e03b      	b.n	808b81a <strftime+0x7b6>
 808b7a2:	f240 716b 	movw	r1, #1899	; 0x76b
 808b7a6:	1a9a      	subs	r2, r3, r2
 808b7a8:	696b      	ldr	r3, [r5, #20]
 808b7aa:	2b00      	cmp	r3, #0
 808b7ac:	bfb4      	ite	lt
 808b7ae:	4608      	movlt	r0, r1
 808b7b0:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808b7b4:	4418      	add	r0, r3
 808b7b6:	0781      	lsls	r1, r0, #30
 808b7b8:	d107      	bne.n	808b7ca <strftime+0x766>
 808b7ba:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808b7be:	4601      	mov	r1, r0
 808b7c0:	fb90 f0fe 	sdiv	r0, r0, lr
 808b7c4:	fb0e 1110 	mls	r1, lr, r0, r1
 808b7c8:	b981      	cbnz	r1, 808b7ec <strftime+0x788>
 808b7ca:	f240 716b 	movw	r1, #1899	; 0x76b
 808b7ce:	2b00      	cmp	r3, #0
 808b7d0:	bfa8      	it	ge
 808b7d2:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808b7d6:	4419      	add	r1, r3
 808b7d8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808b7dc:	fb91 f0f3 	sdiv	r0, r1, r3
 808b7e0:	fb03 1110 	mls	r1, r3, r0, r1
 808b7e4:	fab1 f181 	clz	r1, r1
 808b7e8:	0949      	lsrs	r1, r1, #5
 808b7ea:	e000      	b.n	808b7ee <strftime+0x78a>
 808b7ec:	2101      	movs	r1, #1
 808b7ee:	1a52      	subs	r2, r2, r1
 808b7f0:	2a05      	cmp	r2, #5
 808b7f2:	bfb4      	ite	lt
 808b7f4:	2335      	movlt	r3, #53	; 0x35
 808b7f6:	2334      	movge	r3, #52	; 0x34
 808b7f8:	e020      	b.n	808b83c <strftime+0x7d8>
 808b7fa:	2301      	movs	r3, #1
 808b7fc:	e01e      	b.n	808b83c <strftime+0x7d8>
 808b7fe:	9b02      	ldr	r3, [sp, #8]
 808b800:	429c      	cmp	r4, r3
 808b802:	f080 80d9 	bcs.w	808b9b8 <strftime+0x954>
 808b806:	69ab      	ldr	r3, [r5, #24]
 808b808:	3330      	adds	r3, #48	; 0x30
 808b80a:	e0c8      	b.n	808b99e <strftime+0x93a>
 808b80c:	69aa      	ldr	r2, [r5, #24]
 808b80e:	b10a      	cbz	r2, 808b814 <strftime+0x7b0>
 808b810:	1e53      	subs	r3, r2, #1
 808b812:	e000      	b.n	808b816 <strftime+0x7b2>
 808b814:	2306      	movs	r3, #6
 808b816:	69ea      	ldr	r2, [r5, #28]
 808b818:	3207      	adds	r2, #7
 808b81a:	1ad2      	subs	r2, r2, r3
 808b81c:	2307      	movs	r3, #7
 808b81e:	fb92 f3f3 	sdiv	r3, r2, r3
 808b822:	e00b      	b.n	808b83c <strftime+0x7d8>
 808b824:	6968      	ldr	r0, [r5, #20]
 808b826:	2800      	cmp	r0, #0
 808b828:	da03      	bge.n	808b832 <strftime+0x7ce>
 808b82a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b82e:	f001 fa9b 	bl	808cd68 <abs>
 808b832:	2364      	movs	r3, #100	; 0x64
 808b834:	fb90 f2f3 	sdiv	r2, r0, r3
 808b838:	fb02 0313 	mls	r3, r2, r3, r0
 808b83c:	4a21      	ldr	r2, [pc, #132]	; (808b8c4 <strftime+0x860>)
 808b83e:	e572      	b.n	808b326 <strftime+0x2c2>
 808b840:	696b      	ldr	r3, [r5, #20]
 808b842:	4a21      	ldr	r2, [pc, #132]	; (808b8c8 <strftime+0x864>)
 808b844:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808b848:	4293      	cmp	r3, r2
 808b84a:	da05      	bge.n	808b858 <strftime+0x7f4>
 808b84c:	232d      	movs	r3, #45	; 0x2d
 808b84e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808b852:	f1cb 0b00 	rsb	fp, fp, #0
 808b856:	e008      	b.n	808b86a <strftime+0x806>
 808b858:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b85c:	d10d      	bne.n	808b87a <strftime+0x816>
 808b85e:	f242 730f 	movw	r3, #9999	; 0x270f
 808b862:	459b      	cmp	fp, r3
 808b864:	d911      	bls.n	808b88a <strftime+0x826>
 808b866:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808b86a:	f1b8 0f00 	cmp.w	r8, #0
 808b86e:	d001      	beq.n	808b874 <strftime+0x810>
 808b870:	f108 38ff 	add.w	r8, r8, #4294967295
 808b874:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808b878:	e000      	b.n	808b87c <strftime+0x818>
 808b87a:	ab0a      	add	r3, sp, #40	; 0x28
 808b87c:	2225      	movs	r2, #37	; 0x25
 808b87e:	701a      	strb	r2, [r3, #0]
 808b880:	f1ba 0f00 	cmp.w	sl, #0
 808b884:	d108      	bne.n	808b898 <strftime+0x834>
 808b886:	1c58      	adds	r0, r3, #1
 808b888:	e009      	b.n	808b89e <strftime+0x83a>
 808b88a:	f1b8 0f00 	cmp.w	r8, #0
 808b88e:	d1f4      	bne.n	808b87a <strftime+0x816>
 808b890:	2325      	movs	r3, #37	; 0x25
 808b892:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808b896:	ab0a      	add	r3, sp, #40	; 0x28
 808b898:	2230      	movs	r2, #48	; 0x30
 808b89a:	1c98      	adds	r0, r3, #2
 808b89c:	705a      	strb	r2, [r3, #1]
 808b89e:	490b      	ldr	r1, [pc, #44]	; (808b8cc <strftime+0x868>)
 808b8a0:	f7ff fb78 	bl	808af94 <strcpy>
 808b8a4:	f8cd b000 	str.w	fp, [sp]
 808b8a8:	4643      	mov	r3, r8
 808b8aa:	aa0a      	add	r2, sp, #40	; 0x28
 808b8ac:	1b31      	subs	r1, r6, r4
 808b8ae:	1938      	adds	r0, r7, r4
 808b8b0:	e03f      	b.n	808b932 <strftime+0x8ce>
 808b8b2:	bf00      	nop
 808b8b4:	200000e0 	.word	0x200000e0
 808b8b8:	08090a43 	.word	0x08090a43
 808b8bc:	08090a39 	.word	0x08090a39
 808b8c0:	08090a3e 	.word	0x08090a3e
 808b8c4:	08090a1f 	.word	0x08090a1f
 808b8c8:	fffff894 	.word	0xfffff894
 808b8cc:	08090a30 	.word	0x08090a30
 808b8d0:	6a2b      	ldr	r3, [r5, #32]
 808b8d2:	2b00      	cmp	r3, #0
 808b8d4:	db65      	blt.n	808b9a2 <strftime+0x93e>
 808b8d6:	f001 f8bf 	bl	808ca58 <__tz_lock>
 808b8da:	9b06      	ldr	r3, [sp, #24]
 808b8dc:	b91b      	cbnz	r3, 808b8e6 <strftime+0x882>
 808b8de:	f001 f8bd 	bl	808ca5c <_tzset_unlocked>
 808b8e2:	2301      	movs	r3, #1
 808b8e4:	9306      	str	r3, [sp, #24]
 808b8e6:	f001 fda5 	bl	808d434 <__gettzinfo>
 808b8ea:	6a2b      	ldr	r3, [r5, #32]
 808b8ec:	221c      	movs	r2, #28
 808b8ee:	2b00      	cmp	r3, #0
 808b8f0:	bfd4      	ite	le
 808b8f2:	2300      	movle	r3, #0
 808b8f4:	2301      	movgt	r3, #1
 808b8f6:	fb02 0003 	mla	r0, r2, r3, r0
 808b8fa:	6a03      	ldr	r3, [r0, #32]
 808b8fc:	eb07 0a04 	add.w	sl, r7, r4
 808b900:	f1c3 0800 	rsb	r8, r3, #0
 808b904:	f001 f8a9 	bl	808ca5a <__tz_unlock>
 808b908:	233c      	movs	r3, #60	; 0x3c
 808b90a:	fb98 f0f3 	sdiv	r0, r8, r3
 808b90e:	9307      	str	r3, [sp, #28]
 808b910:	f001 fe2a 	bl	808d568 <labs>
 808b914:	9b07      	ldr	r3, [sp, #28]
 808b916:	ebc4 0b06 	rsb	fp, r4, r6
 808b91a:	fb90 f2f3 	sdiv	r2, r0, r3
 808b91e:	fb02 0013 	mls	r0, r2, r3, r0
 808b922:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808b926:	9000      	str	r0, [sp, #0]
 808b928:	fb98 f3f3 	sdiv	r3, r8, r3
 808b92c:	4659      	mov	r1, fp
 808b92e:	4650      	mov	r0, sl
 808b930:	4a24      	ldr	r2, [pc, #144]	; (808b9c4 <strftime+0x960>)
 808b932:	f7fc f881 	bl	8087a38 <sniprintf>
 808b936:	e4fa      	b.n	808b32e <strftime+0x2ca>
 808b938:	4404      	add	r4, r0
 808b93a:	42a6      	cmp	r6, r4
 808b93c:	d831      	bhi.n	808b9a2 <strftime+0x93e>
 808b93e:	e03b      	b.n	808b9b8 <strftime+0x954>
 808b940:	6a2b      	ldr	r3, [r5, #32]
 808b942:	2b00      	cmp	r3, #0
 808b944:	db2d      	blt.n	808b9a2 <strftime+0x93e>
 808b946:	f001 f887 	bl	808ca58 <__tz_lock>
 808b94a:	9b06      	ldr	r3, [sp, #24]
 808b94c:	b91b      	cbnz	r3, 808b956 <strftime+0x8f2>
 808b94e:	f001 f885 	bl	808ca5c <_tzset_unlocked>
 808b952:	2301      	movs	r3, #1
 808b954:	9306      	str	r3, [sp, #24]
 808b956:	6a2b      	ldr	r3, [r5, #32]
 808b958:	4a1b      	ldr	r2, [pc, #108]	; (808b9c8 <strftime+0x964>)
 808b95a:	2b00      	cmp	r3, #0
 808b95c:	bfd4      	ite	le
 808b95e:	2300      	movle	r3, #0
 808b960:	2301      	movgt	r3, #1
 808b962:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b966:	4640      	mov	r0, r8
 808b968:	f000 f830 	bl	808b9cc <strlen>
 808b96c:	f108 38ff 	add.w	r8, r8, #4294967295
 808b970:	193b      	adds	r3, r7, r4
 808b972:	4420      	add	r0, r4
 808b974:	4284      	cmp	r4, r0
 808b976:	d00b      	beq.n	808b990 <strftime+0x92c>
 808b978:	9a02      	ldr	r2, [sp, #8]
 808b97a:	4294      	cmp	r4, r2
 808b97c:	d205      	bcs.n	808b98a <strftime+0x926>
 808b97e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b982:	3401      	adds	r4, #1
 808b984:	f803 2b01 	strb.w	r2, [r3], #1
 808b988:	e7f4      	b.n	808b974 <strftime+0x910>
 808b98a:	f001 f866 	bl	808ca5a <__tz_unlock>
 808b98e:	e013      	b.n	808b9b8 <strftime+0x954>
 808b990:	f001 f863 	bl	808ca5a <__tz_unlock>
 808b994:	e005      	b.n	808b9a2 <strftime+0x93e>
 808b996:	9b02      	ldr	r3, [sp, #8]
 808b998:	429c      	cmp	r4, r3
 808b99a:	d20d      	bcs.n	808b9b8 <strftime+0x954>
 808b99c:	2325      	movs	r3, #37	; 0x25
 808b99e:	553b      	strb	r3, [r7, r4]
 808b9a0:	3401      	adds	r4, #1
 808b9a2:	f899 3000 	ldrb.w	r3, [r9]
 808b9a6:	b11b      	cbz	r3, 808b9b0 <strftime+0x94c>
 808b9a8:	f109 0901 	add.w	r9, r9, #1
 808b9ac:	f7ff bb69 	b.w	808b082 <strftime+0x1e>
 808b9b0:	b126      	cbz	r6, 808b9bc <strftime+0x958>
 808b9b2:	2300      	movs	r3, #0
 808b9b4:	553b      	strb	r3, [r7, r4]
 808b9b6:	e001      	b.n	808b9bc <strftime+0x958>
 808b9b8:	2000      	movs	r0, #0
 808b9ba:	e000      	b.n	808b9be <strftime+0x95a>
 808b9bc:	4620      	mov	r0, r4
 808b9be:	b013      	add	sp, #76	; 0x4c
 808b9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b9c4:	08090a4d 	.word	0x08090a4d
 808b9c8:	20000180 	.word	0x20000180

0808b9cc <strlen>:
 808b9cc:	4603      	mov	r3, r0
 808b9ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 808b9d2:	2a00      	cmp	r2, #0
 808b9d4:	d1fb      	bne.n	808b9ce <strlen+0x2>
 808b9d6:	1a18      	subs	r0, r3, r0
 808b9d8:	3801      	subs	r0, #1
 808b9da:	4770      	bx	lr

0808b9dc <strncmp>:
 808b9dc:	b530      	push	{r4, r5, lr}
 808b9de:	b182      	cbz	r2, 808ba02 <strncmp+0x26>
 808b9e0:	1e45      	subs	r5, r0, #1
 808b9e2:	3901      	subs	r1, #1
 808b9e4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808b9e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808b9ec:	42a3      	cmp	r3, r4
 808b9ee:	d106      	bne.n	808b9fe <strncmp+0x22>
 808b9f0:	43ec      	mvns	r4, r5
 808b9f2:	4414      	add	r4, r2
 808b9f4:	42e0      	cmn	r0, r4
 808b9f6:	d001      	beq.n	808b9fc <strncmp+0x20>
 808b9f8:	2b00      	cmp	r3, #0
 808b9fa:	d1f3      	bne.n	808b9e4 <strncmp+0x8>
 808b9fc:	461c      	mov	r4, r3
 808b9fe:	1b18      	subs	r0, r3, r4
 808ba00:	bd30      	pop	{r4, r5, pc}
 808ba02:	4610      	mov	r0, r2
 808ba04:	bd30      	pop	{r4, r5, pc}

0808ba06 <strncpy>:
 808ba06:	4603      	mov	r3, r0
 808ba08:	b510      	push	{r4, lr}
 808ba0a:	b142      	cbz	r2, 808ba1e <strncpy+0x18>
 808ba0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 808ba10:	3a01      	subs	r2, #1
 808ba12:	f803 4b01 	strb.w	r4, [r3], #1
 808ba16:	2c00      	cmp	r4, #0
 808ba18:	d1f7      	bne.n	808ba0a <strncpy+0x4>
 808ba1a:	441a      	add	r2, r3
 808ba1c:	e000      	b.n	808ba20 <strncpy+0x1a>
 808ba1e:	bd10      	pop	{r4, pc}
 808ba20:	4293      	cmp	r3, r2
 808ba22:	d002      	beq.n	808ba2a <strncpy+0x24>
 808ba24:	f803 4b01 	strb.w	r4, [r3], #1
 808ba28:	e7fa      	b.n	808ba20 <strncpy+0x1a>
 808ba2a:	bd10      	pop	{r4, pc}

0808ba2c <strstr>:
 808ba2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808ba2e:	7803      	ldrb	r3, [r0, #0]
 808ba30:	b963      	cbnz	r3, 808ba4c <strstr+0x20>
 808ba32:	780b      	ldrb	r3, [r1, #0]
 808ba34:	2b00      	cmp	r3, #0
 808ba36:	bf18      	it	ne
 808ba38:	2000      	movne	r0, #0
 808ba3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ba3c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808ba40:	b162      	cbz	r2, 808ba5c <strstr+0x30>
 808ba42:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808ba46:	4630      	mov	r0, r6
 808ba48:	4297      	cmp	r7, r2
 808ba4a:	d0f7      	beq.n	808ba3c <strstr+0x10>
 808ba4c:	4603      	mov	r3, r0
 808ba4e:	1c46      	adds	r6, r0, #1
 808ba50:	7800      	ldrb	r0, [r0, #0]
 808ba52:	b110      	cbz	r0, 808ba5a <strstr+0x2e>
 808ba54:	1e4d      	subs	r5, r1, #1
 808ba56:	1e5c      	subs	r4, r3, #1
 808ba58:	e7f0      	b.n	808ba3c <strstr+0x10>
 808ba5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ba5c:	4618      	mov	r0, r3
 808ba5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808ba60 <sulp>:
 808ba60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808ba64:	460f      	mov	r7, r1
 808ba66:	4690      	mov	r8, r2
 808ba68:	f002 f848 	bl	808dafc <__ulp>
 808ba6c:	4604      	mov	r4, r0
 808ba6e:	460d      	mov	r5, r1
 808ba70:	f1b8 0f00 	cmp.w	r8, #0
 808ba74:	d011      	beq.n	808ba9a <sulp+0x3a>
 808ba76:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808ba7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808ba7e:	2b00      	cmp	r3, #0
 808ba80:	dd0b      	ble.n	808ba9a <sulp+0x3a>
 808ba82:	051b      	lsls	r3, r3, #20
 808ba84:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808ba88:	2400      	movs	r4, #0
 808ba8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808ba8e:	4622      	mov	r2, r4
 808ba90:	462b      	mov	r3, r5
 808ba92:	f7fe f889 	bl	8089ba8 <__aeabi_dmul>
 808ba96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808ba9a:	4620      	mov	r0, r4
 808ba9c:	4629      	mov	r1, r5
 808ba9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808baa2:	0000      	movs	r0, r0
 808baa4:	0000      	movs	r0, r0
	...

0808baa8 <_strtod_r>:
 808baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808baac:	4682      	mov	sl, r0
 808baae:	460c      	mov	r4, r1
 808bab0:	b09d      	sub	sp, #116	; 0x74
 808bab2:	2300      	movs	r3, #0
 808bab4:	9213      	str	r2, [sp, #76]	; 0x4c
 808bab6:	9318      	str	r3, [sp, #96]	; 0x60
 808bab8:	f04f 0800 	mov.w	r8, #0
 808babc:	f04f 0900 	mov.w	r9, #0
 808bac0:	9117      	str	r1, [sp, #92]	; 0x5c
 808bac2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bac4:	781a      	ldrb	r2, [r3, #0]
 808bac6:	2a0d      	cmp	r2, #13
 808bac8:	d805      	bhi.n	808bad6 <_strtod_r+0x2e>
 808baca:	2a09      	cmp	r2, #9
 808bacc:	d213      	bcs.n	808baf6 <_strtod_r+0x4e>
 808bace:	2a00      	cmp	r2, #0
 808bad0:	f000 81ad 	beq.w	808be2e <_strtod_r+0x386>
 808bad4:	e012      	b.n	808bafc <_strtod_r+0x54>
 808bad6:	2a2b      	cmp	r2, #43	; 0x2b
 808bad8:	d004      	beq.n	808bae4 <_strtod_r+0x3c>
 808bada:	2a2d      	cmp	r2, #45	; 0x2d
 808badc:	d004      	beq.n	808bae8 <_strtod_r+0x40>
 808bade:	2a20      	cmp	r2, #32
 808bae0:	d10c      	bne.n	808bafc <_strtod_r+0x54>
 808bae2:	e008      	b.n	808baf6 <_strtod_r+0x4e>
 808bae4:	2200      	movs	r2, #0
 808bae6:	e000      	b.n	808baea <_strtod_r+0x42>
 808bae8:	2201      	movs	r2, #1
 808baea:	920c      	str	r2, [sp, #48]	; 0x30
 808baec:	1c5a      	adds	r2, r3, #1
 808baee:	9217      	str	r2, [sp, #92]	; 0x5c
 808baf0:	785b      	ldrb	r3, [r3, #1]
 808baf2:	b92b      	cbnz	r3, 808bb00 <_strtod_r+0x58>
 808baf4:	e19b      	b.n	808be2e <_strtod_r+0x386>
 808baf6:	3301      	adds	r3, #1
 808baf8:	9317      	str	r3, [sp, #92]	; 0x5c
 808bafa:	e7e2      	b.n	808bac2 <_strtod_r+0x1a>
 808bafc:	2300      	movs	r3, #0
 808bafe:	930c      	str	r3, [sp, #48]	; 0x30
 808bb00:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808bb02:	782b      	ldrb	r3, [r5, #0]
 808bb04:	2b30      	cmp	r3, #48	; 0x30
 808bb06:	d15c      	bne.n	808bbc2 <_strtod_r+0x11a>
 808bb08:	786b      	ldrb	r3, [r5, #1]
 808bb0a:	2b58      	cmp	r3, #88	; 0x58
 808bb0c:	d001      	beq.n	808bb12 <_strtod_r+0x6a>
 808bb0e:	2b78      	cmp	r3, #120	; 0x78
 808bb10:	d14c      	bne.n	808bbac <_strtod_r+0x104>
 808bb12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808bb14:	4aa8      	ldr	r2, [pc, #672]	; (808bdb8 <_strtod_r+0x310>)
 808bb16:	9301      	str	r3, [sp, #4]
 808bb18:	ab18      	add	r3, sp, #96	; 0x60
 808bb1a:	9300      	str	r3, [sp, #0]
 808bb1c:	a917      	add	r1, sp, #92	; 0x5c
 808bb1e:	ab19      	add	r3, sp, #100	; 0x64
 808bb20:	4650      	mov	r0, sl
 808bb22:	f001 f970 	bl	808ce06 <__gethex>
 808bb26:	f010 0607 	ands.w	r6, r0, #7
 808bb2a:	4604      	mov	r4, r0
 808bb2c:	f000 8585 	beq.w	808c63a <_strtod_r+0xb92>
 808bb30:	2e06      	cmp	r6, #6
 808bb32:	d105      	bne.n	808bb40 <_strtod_r+0x98>
 808bb34:	3501      	adds	r5, #1
 808bb36:	2300      	movs	r3, #0
 808bb38:	9517      	str	r5, [sp, #92]	; 0x5c
 808bb3a:	930c      	str	r3, [sp, #48]	; 0x30
 808bb3c:	f000 bd7d 	b.w	808c63a <_strtod_r+0xb92>
 808bb40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808bb42:	b13a      	cbz	r2, 808bb54 <_strtod_r+0xac>
 808bb44:	2135      	movs	r1, #53	; 0x35
 808bb46:	a81a      	add	r0, sp, #104	; 0x68
 808bb48:	f002 f8bf 	bl	808dcca <__copybits>
 808bb4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 808bb4e:	4650      	mov	r0, sl
 808bb50:	f001 fd43 	bl	808d5da <_Bfree>
 808bb54:	2e06      	cmp	r6, #6
 808bb56:	d822      	bhi.n	808bb9e <_strtod_r+0xf6>
 808bb58:	e8df f006 	tbb	[pc, r6]
 808bb5c:	18080d04 	.word	0x18080d04
 808bb60:	0d1d      	.short	0x0d1d
 808bb62:	04          	.byte	0x04
 808bb63:	00          	.byte	0x00
 808bb64:	f04f 0900 	mov.w	r9, #0
 808bb68:	46c8      	mov	r8, r9
 808bb6a:	e018      	b.n	808bb9e <_strtod_r+0xf6>
 808bb6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808bb70:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808bb74:	e013      	b.n	808bb9e <_strtod_r+0xf6>
 808bb76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808bb78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808bb7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808bb7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808bb82:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808bb86:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808bb8a:	e008      	b.n	808bb9e <_strtod_r+0xf6>
 808bb8c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808bdbc <_strtod_r+0x314>
 808bb90:	f04f 0800 	mov.w	r8, #0
 808bb94:	e003      	b.n	808bb9e <_strtod_r+0xf6>
 808bb96:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808bb9a:	f04f 38ff 	mov.w	r8, #4294967295
 808bb9e:	0721      	lsls	r1, r4, #28
 808bba0:	f140 854b 	bpl.w	808c63a <_strtod_r+0xb92>
 808bba4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808bba8:	f000 bd47 	b.w	808c63a <_strtod_r+0xb92>
 808bbac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bbae:	1c5a      	adds	r2, r3, #1
 808bbb0:	9217      	str	r2, [sp, #92]	; 0x5c
 808bbb2:	785b      	ldrb	r3, [r3, #1]
 808bbb4:	2b30      	cmp	r3, #48	; 0x30
 808bbb6:	d0f9      	beq.n	808bbac <_strtod_r+0x104>
 808bbb8:	2b00      	cmp	r3, #0
 808bbba:	f000 853e 	beq.w	808c63a <_strtod_r+0xb92>
 808bbbe:	2301      	movs	r3, #1
 808bbc0:	e000      	b.n	808bbc4 <_strtod_r+0x11c>
 808bbc2:	2300      	movs	r3, #0
 808bbc4:	9305      	str	r3, [sp, #20]
 808bbc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bbc8:	220a      	movs	r2, #10
 808bbca:	9306      	str	r3, [sp, #24]
 808bbcc:	2300      	movs	r3, #0
 808bbce:	469b      	mov	fp, r3
 808bbd0:	9302      	str	r3, [sp, #8]
 808bbd2:	9304      	str	r3, [sp, #16]
 808bbd4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808bbd6:	782e      	ldrb	r6, [r5, #0]
 808bbd8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808bbdc:	b2d9      	uxtb	r1, r3
 808bbde:	2909      	cmp	r1, #9
 808bbe0:	d811      	bhi.n	808bc06 <_strtod_r+0x15e>
 808bbe2:	f1bb 0f08 	cmp.w	fp, #8
 808bbe6:	bfd5      	itete	le
 808bbe8:	9904      	ldrle	r1, [sp, #16]
 808bbea:	9902      	ldrgt	r1, [sp, #8]
 808bbec:	fb02 3301 	mlale	r3, r2, r1, r3
 808bbf0:	fb02 3301 	mlagt	r3, r2, r1, r3
 808bbf4:	f105 0501 	add.w	r5, r5, #1
 808bbf8:	bfd4      	ite	le
 808bbfa:	9304      	strle	r3, [sp, #16]
 808bbfc:	9302      	strgt	r3, [sp, #8]
 808bbfe:	f10b 0b01 	add.w	fp, fp, #1
 808bc02:	9517      	str	r5, [sp, #92]	; 0x5c
 808bc04:	e7e6      	b.n	808bbd4 <_strtod_r+0x12c>
 808bc06:	4650      	mov	r0, sl
 808bc08:	f7ff f95e 	bl	808aec8 <_localeconv_r>
 808bc0c:	6807      	ldr	r7, [r0, #0]
 808bc0e:	4650      	mov	r0, sl
 808bc10:	f7ff f95a 	bl	808aec8 <_localeconv_r>
 808bc14:	6800      	ldr	r0, [r0, #0]
 808bc16:	f7ff fed9 	bl	808b9cc <strlen>
 808bc1a:	4639      	mov	r1, r7
 808bc1c:	4602      	mov	r2, r0
 808bc1e:	4628      	mov	r0, r5
 808bc20:	f7ff fedc 	bl	808b9dc <strncmp>
 808bc24:	4607      	mov	r7, r0
 808bc26:	b128      	cbz	r0, 808bc34 <_strtod_r+0x18c>
 808bc28:	2000      	movs	r0, #0
 808bc2a:	4633      	mov	r3, r6
 808bc2c:	465d      	mov	r5, fp
 808bc2e:	4602      	mov	r2, r0
 808bc30:	4601      	mov	r1, r0
 808bc32:	e05a      	b.n	808bcea <_strtod_r+0x242>
 808bc34:	4650      	mov	r0, sl
 808bc36:	f7ff f947 	bl	808aec8 <_localeconv_r>
 808bc3a:	6800      	ldr	r0, [r0, #0]
 808bc3c:	f7ff fec6 	bl	808b9cc <strlen>
 808bc40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bc42:	181a      	adds	r2, r3, r0
 808bc44:	9217      	str	r2, [sp, #92]	; 0x5c
 808bc46:	5c1b      	ldrb	r3, [r3, r0]
 808bc48:	f1bb 0f00 	cmp.w	fp, #0
 808bc4c:	d145      	bne.n	808bcda <_strtod_r+0x232>
 808bc4e:	4658      	mov	r0, fp
 808bc50:	2b30      	cmp	r3, #48	; 0x30
 808bc52:	d105      	bne.n	808bc60 <_strtod_r+0x1b8>
 808bc54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bc56:	3001      	adds	r0, #1
 808bc58:	1c5a      	adds	r2, r3, #1
 808bc5a:	9217      	str	r2, [sp, #92]	; 0x5c
 808bc5c:	785b      	ldrb	r3, [r3, #1]
 808bc5e:	e7f7      	b.n	808bc50 <_strtod_r+0x1a8>
 808bc60:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808bc64:	2a08      	cmp	r2, #8
 808bc66:	d846      	bhi.n	808bcf6 <_strtod_r+0x24e>
 808bc68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808bc6a:	9206      	str	r2, [sp, #24]
 808bc6c:	4602      	mov	r2, r0
 808bc6e:	2000      	movs	r0, #0
 808bc70:	4605      	mov	r5, r0
 808bc72:	3b30      	subs	r3, #48	; 0x30
 808bc74:	f100 0101 	add.w	r1, r0, #1
 808bc78:	d029      	beq.n	808bcce <_strtod_r+0x226>
 808bc7a:	440a      	add	r2, r1
 808bc7c:	4629      	mov	r1, r5
 808bc7e:	eb05 0c00 	add.w	ip, r5, r0
 808bc82:	260a      	movs	r6, #10
 808bc84:	4561      	cmp	r1, ip
 808bc86:	d00f      	beq.n	808bca8 <_strtod_r+0x200>
 808bc88:	3101      	adds	r1, #1
 808bc8a:	f101 3eff 	add.w	lr, r1, #4294967295
 808bc8e:	f1be 0f08 	cmp.w	lr, #8
 808bc92:	dc03      	bgt.n	808bc9c <_strtod_r+0x1f4>
 808bc94:	9f04      	ldr	r7, [sp, #16]
 808bc96:	4377      	muls	r7, r6
 808bc98:	9704      	str	r7, [sp, #16]
 808bc9a:	e7f3      	b.n	808bc84 <_strtod_r+0x1dc>
 808bc9c:	2910      	cmp	r1, #16
 808bc9e:	bfde      	ittt	le
 808bca0:	9f02      	ldrle	r7, [sp, #8]
 808bca2:	4377      	mulle	r7, r6
 808bca4:	9702      	strle	r7, [sp, #8]
 808bca6:	e7ed      	b.n	808bc84 <_strtod_r+0x1dc>
 808bca8:	4428      	add	r0, r5
 808bcaa:	2808      	cmp	r0, #8
 808bcac:	f100 0501 	add.w	r5, r0, #1
 808bcb0:	dc05      	bgt.n	808bcbe <_strtod_r+0x216>
 808bcb2:	9804      	ldr	r0, [sp, #16]
 808bcb4:	210a      	movs	r1, #10
 808bcb6:	fb01 3300 	mla	r3, r1, r0, r3
 808bcba:	9304      	str	r3, [sp, #16]
 808bcbc:	e006      	b.n	808bccc <_strtod_r+0x224>
 808bcbe:	2d10      	cmp	r5, #16
 808bcc0:	bfdf      	itttt	le
 808bcc2:	9802      	ldrle	r0, [sp, #8]
 808bcc4:	210a      	movle	r1, #10
 808bcc6:	fb01 3300 	mlale	r3, r1, r0, r3
 808bcca:	9302      	strle	r3, [sp, #8]
 808bccc:	2100      	movs	r1, #0
 808bcce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bcd0:	1c58      	adds	r0, r3, #1
 808bcd2:	9017      	str	r0, [sp, #92]	; 0x5c
 808bcd4:	785b      	ldrb	r3, [r3, #1]
 808bcd6:	4608      	mov	r0, r1
 808bcd8:	e002      	b.n	808bce0 <_strtod_r+0x238>
 808bcda:	465d      	mov	r5, fp
 808bcdc:	4638      	mov	r0, r7
 808bcde:	463a      	mov	r2, r7
 808bce0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808bce4:	2909      	cmp	r1, #9
 808bce6:	d9c4      	bls.n	808bc72 <_strtod_r+0x1ca>
 808bce8:	2101      	movs	r1, #1
 808bcea:	2b65      	cmp	r3, #101	; 0x65
 808bcec:	d001      	beq.n	808bcf2 <_strtod_r+0x24a>
 808bcee:	2b45      	cmp	r3, #69	; 0x45
 808bcf0:	d14f      	bne.n	808bd92 <_strtod_r+0x2ea>
 808bcf2:	b96d      	cbnz	r5, 808bd10 <_strtod_r+0x268>
 808bcf4:	e004      	b.n	808bd00 <_strtod_r+0x258>
 808bcf6:	2b65      	cmp	r3, #101	; 0x65
 808bcf8:	f040 84ad 	bne.w	808c656 <_strtod_r+0xbae>
 808bcfc:	2200      	movs	r2, #0
 808bcfe:	2101      	movs	r1, #1
 808bd00:	b928      	cbnz	r0, 808bd0e <_strtod_r+0x266>
 808bd02:	9b05      	ldr	r3, [sp, #20]
 808bd04:	2b00      	cmp	r3, #0
 808bd06:	f000 8092 	beq.w	808be2e <_strtod_r+0x386>
 808bd0a:	4605      	mov	r5, r0
 808bd0c:	e000      	b.n	808bd10 <_strtod_r+0x268>
 808bd0e:	2500      	movs	r5, #0
 808bd10:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808bd12:	1c63      	adds	r3, r4, #1
 808bd14:	9317      	str	r3, [sp, #92]	; 0x5c
 808bd16:	7863      	ldrb	r3, [r4, #1]
 808bd18:	2b2b      	cmp	r3, #43	; 0x2b
 808bd1a:	d006      	beq.n	808bd2a <_strtod_r+0x282>
 808bd1c:	2b2d      	cmp	r3, #45	; 0x2d
 808bd1e:	d002      	beq.n	808bd26 <_strtod_r+0x27e>
 808bd20:	2600      	movs	r6, #0
 808bd22:	9603      	str	r6, [sp, #12]
 808bd24:	e006      	b.n	808bd34 <_strtod_r+0x28c>
 808bd26:	2301      	movs	r3, #1
 808bd28:	e000      	b.n	808bd2c <_strtod_r+0x284>
 808bd2a:	2300      	movs	r3, #0
 808bd2c:	9303      	str	r3, [sp, #12]
 808bd2e:	1ca3      	adds	r3, r4, #2
 808bd30:	9317      	str	r3, [sp, #92]	; 0x5c
 808bd32:	78a3      	ldrb	r3, [r4, #2]
 808bd34:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808bd38:	2e09      	cmp	r6, #9
 808bd3a:	d829      	bhi.n	808bd90 <_strtod_r+0x2e8>
 808bd3c:	2b30      	cmp	r3, #48	; 0x30
 808bd3e:	d104      	bne.n	808bd4a <_strtod_r+0x2a2>
 808bd40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bd42:	1c5e      	adds	r6, r3, #1
 808bd44:	9617      	str	r6, [sp, #92]	; 0x5c
 808bd46:	785b      	ldrb	r3, [r3, #1]
 808bd48:	e7f8      	b.n	808bd3c <_strtod_r+0x294>
 808bd4a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808bd4e:	2e08      	cmp	r6, #8
 808bd50:	d81f      	bhi.n	808bd92 <_strtod_r+0x2ea>
 808bd52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808bd56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bd58:	461f      	mov	r7, r3
 808bd5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bd5c:	1c5e      	adds	r6, r3, #1
 808bd5e:	9617      	str	r6, [sp, #92]	; 0x5c
 808bd60:	785b      	ldrb	r3, [r3, #1]
 808bd62:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808bd66:	f1bc 0f09 	cmp.w	ip, #9
 808bd6a:	d805      	bhi.n	808bd78 <_strtod_r+0x2d0>
 808bd6c:	260a      	movs	r6, #10
 808bd6e:	fb06 3e0e 	mla	lr, r6, lr, r3
 808bd72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808bd76:	e7f0      	b.n	808bd5a <_strtod_r+0x2b2>
 808bd78:	1bf6      	subs	r6, r6, r7
 808bd7a:	2e08      	cmp	r6, #8
 808bd7c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808bd80:	dc02      	bgt.n	808bd88 <_strtod_r+0x2e0>
 808bd82:	4576      	cmp	r6, lr
 808bd84:	bfa8      	it	ge
 808bd86:	4676      	movge	r6, lr
 808bd88:	9f03      	ldr	r7, [sp, #12]
 808bd8a:	b11f      	cbz	r7, 808bd94 <_strtod_r+0x2ec>
 808bd8c:	4276      	negs	r6, r6
 808bd8e:	e001      	b.n	808bd94 <_strtod_r+0x2ec>
 808bd90:	9417      	str	r4, [sp, #92]	; 0x5c
 808bd92:	2600      	movs	r6, #0
 808bd94:	2d00      	cmp	r5, #0
 808bd96:	d152      	bne.n	808be3e <_strtod_r+0x396>
 808bd98:	2800      	cmp	r0, #0
 808bd9a:	f040 844e 	bne.w	808c63a <_strtod_r+0xb92>
 808bd9e:	9a05      	ldr	r2, [sp, #20]
 808bda0:	2a00      	cmp	r2, #0
 808bda2:	f040 844a 	bne.w	808c63a <_strtod_r+0xb92>
 808bda6:	2900      	cmp	r1, #0
 808bda8:	d141      	bne.n	808be2e <_strtod_r+0x386>
 808bdaa:	2b4e      	cmp	r3, #78	; 0x4e
 808bdac:	d020      	beq.n	808bdf0 <_strtod_r+0x348>
 808bdae:	dc07      	bgt.n	808bdc0 <_strtod_r+0x318>
 808bdb0:	2b49      	cmp	r3, #73	; 0x49
 808bdb2:	d00a      	beq.n	808bdca <_strtod_r+0x322>
 808bdb4:	e03b      	b.n	808be2e <_strtod_r+0x386>
 808bdb6:	bf00      	nop
 808bdb8:	08090a5c 	.word	0x08090a5c
 808bdbc:	7ff00000 	.word	0x7ff00000
 808bdc0:	2b69      	cmp	r3, #105	; 0x69
 808bdc2:	d002      	beq.n	808bdca <_strtod_r+0x322>
 808bdc4:	2b6e      	cmp	r3, #110	; 0x6e
 808bdc6:	d013      	beq.n	808bdf0 <_strtod_r+0x348>
 808bdc8:	e031      	b.n	808be2e <_strtod_r+0x386>
 808bdca:	49aa      	ldr	r1, [pc, #680]	; (808c074 <_strtod_r+0x5cc>)
 808bdcc:	a817      	add	r0, sp, #92	; 0x5c
 808bdce:	f001 fa4b 	bl	808d268 <__match>
 808bdd2:	b360      	cbz	r0, 808be2e <_strtod_r+0x386>
 808bdd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bdd6:	49a8      	ldr	r1, [pc, #672]	; (808c078 <_strtod_r+0x5d0>)
 808bdd8:	3b01      	subs	r3, #1
 808bdda:	a817      	add	r0, sp, #92	; 0x5c
 808bddc:	9317      	str	r3, [sp, #92]	; 0x5c
 808bdde:	f001 fa43 	bl	808d268 <__match>
 808bde2:	b910      	cbnz	r0, 808bdea <_strtod_r+0x342>
 808bde4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bde6:	3301      	adds	r3, #1
 808bde8:	9317      	str	r3, [sp, #92]	; 0x5c
 808bdea:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808c094 <_strtod_r+0x5ec>
 808bdee:	e01a      	b.n	808be26 <_strtod_r+0x37e>
 808bdf0:	49a2      	ldr	r1, [pc, #648]	; (808c07c <_strtod_r+0x5d4>)
 808bdf2:	a817      	add	r0, sp, #92	; 0x5c
 808bdf4:	f001 fa38 	bl	808d268 <__match>
 808bdf8:	b1c8      	cbz	r0, 808be2e <_strtod_r+0x386>
 808bdfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bdfc:	781b      	ldrb	r3, [r3, #0]
 808bdfe:	2b28      	cmp	r3, #40	; 0x28
 808be00:	d10f      	bne.n	808be22 <_strtod_r+0x37a>
 808be02:	aa1a      	add	r2, sp, #104	; 0x68
 808be04:	499e      	ldr	r1, [pc, #632]	; (808c080 <_strtod_r+0x5d8>)
 808be06:	a817      	add	r0, sp, #92	; 0x5c
 808be08:	f001 fa41 	bl	808d28e <__hexnan>
 808be0c:	2805      	cmp	r0, #5
 808be0e:	d108      	bne.n	808be22 <_strtod_r+0x37a>
 808be10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808be12:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808be16:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808be1a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808be1e:	f000 bc0c 	b.w	808c63a <_strtod_r+0xb92>
 808be22:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808c098 <_strtod_r+0x5f0>
 808be26:	f04f 0800 	mov.w	r8, #0
 808be2a:	f000 bc06 	b.w	808c63a <_strtod_r+0xb92>
 808be2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808be30:	9417      	str	r4, [sp, #92]	; 0x5c
 808be32:	2b00      	cmp	r3, #0
 808be34:	f000 840c 	beq.w	808c650 <_strtod_r+0xba8>
 808be38:	2300      	movs	r3, #0
 808be3a:	930c      	str	r3, [sp, #48]	; 0x30
 808be3c:	e3ff      	b.n	808c63e <_strtod_r+0xb96>
 808be3e:	462c      	mov	r4, r5
 808be40:	f1bb 0f00 	cmp.w	fp, #0
 808be44:	bf08      	it	eq
 808be46:	46ab      	moveq	fp, r5
 808be48:	9804      	ldr	r0, [sp, #16]
 808be4a:	2d10      	cmp	r5, #16
 808be4c:	bfa8      	it	ge
 808be4e:	2410      	movge	r4, #16
 808be50:	1ab7      	subs	r7, r6, r2
 808be52:	f7fd fe33 	bl	8089abc <__aeabi_ui2d>
 808be56:	2c09      	cmp	r4, #9
 808be58:	4680      	mov	r8, r0
 808be5a:	4689      	mov	r9, r1
 808be5c:	dd13      	ble.n	808be86 <_strtod_r+0x3de>
 808be5e:	4b89      	ldr	r3, [pc, #548]	; (808c084 <_strtod_r+0x5dc>)
 808be60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808be64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808be68:	f7fd fe9e 	bl	8089ba8 <__aeabi_dmul>
 808be6c:	4680      	mov	r8, r0
 808be6e:	9802      	ldr	r0, [sp, #8]
 808be70:	4689      	mov	r9, r1
 808be72:	f7fd fe23 	bl	8089abc <__aeabi_ui2d>
 808be76:	4602      	mov	r2, r0
 808be78:	460b      	mov	r3, r1
 808be7a:	4640      	mov	r0, r8
 808be7c:	4649      	mov	r1, r9
 808be7e:	f7fd fce1 	bl	8089844 <__adddf3>
 808be82:	4680      	mov	r8, r0
 808be84:	4689      	mov	r9, r1
 808be86:	2d0f      	cmp	r5, #15
 808be88:	dc33      	bgt.n	808bef2 <_strtod_r+0x44a>
 808be8a:	2f00      	cmp	r7, #0
 808be8c:	f000 83d5 	beq.w	808c63a <_strtod_r+0xb92>
 808be90:	dd22      	ble.n	808bed8 <_strtod_r+0x430>
 808be92:	2f16      	cmp	r7, #22
 808be94:	dc07      	bgt.n	808bea6 <_strtod_r+0x3fe>
 808be96:	4d7b      	ldr	r5, [pc, #492]	; (808c084 <_strtod_r+0x5dc>)
 808be98:	4642      	mov	r2, r8
 808be9a:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808be9e:	464b      	mov	r3, r9
 808bea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 808bea4:	e013      	b.n	808bece <_strtod_r+0x426>
 808bea6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808beaa:	429f      	cmp	r7, r3
 808beac:	dc21      	bgt.n	808bef2 <_strtod_r+0x44a>
 808beae:	4c75      	ldr	r4, [pc, #468]	; (808c084 <_strtod_r+0x5dc>)
 808beb0:	f1c5 050f 	rsb	r5, r5, #15
 808beb4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808beb8:	1b7d      	subs	r5, r7, r5
 808beba:	4642      	mov	r2, r8
 808bebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 808bec0:	464b      	mov	r3, r9
 808bec2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808bec6:	f7fd fe6f 	bl	8089ba8 <__aeabi_dmul>
 808beca:	e9d4 2300 	ldrd	r2, r3, [r4]
 808bece:	f7fd fe6b 	bl	8089ba8 <__aeabi_dmul>
 808bed2:	4680      	mov	r8, r0
 808bed4:	4689      	mov	r9, r1
 808bed6:	e3b0      	b.n	808c63a <_strtod_r+0xb92>
 808bed8:	f117 0f16 	cmn.w	r7, #22
 808bedc:	db09      	blt.n	808bef2 <_strtod_r+0x44a>
 808bede:	4d69      	ldr	r5, [pc, #420]	; (808c084 <_strtod_r+0x5dc>)
 808bee0:	4640      	mov	r0, r8
 808bee2:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 808beea:	4649      	mov	r1, r9
 808beec:	f7fd ff86 	bl	8089dfc <__aeabi_ddiv>
 808bef0:	e7ef      	b.n	808bed2 <_strtod_r+0x42a>
 808bef2:	1b2c      	subs	r4, r5, r4
 808bef4:	443c      	add	r4, r7
 808bef6:	2c00      	cmp	r4, #0
 808bef8:	dd5d      	ble.n	808bfb6 <_strtod_r+0x50e>
 808befa:	f014 010f 	ands.w	r1, r4, #15
 808befe:	d00a      	beq.n	808bf16 <_strtod_r+0x46e>
 808bf00:	4b60      	ldr	r3, [pc, #384]	; (808c084 <_strtod_r+0x5dc>)
 808bf02:	4642      	mov	r2, r8
 808bf04:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808bf08:	e9d1 0100 	ldrd	r0, r1, [r1]
 808bf0c:	464b      	mov	r3, r9
 808bf0e:	f7fd fe4b 	bl	8089ba8 <__aeabi_dmul>
 808bf12:	4680      	mov	r8, r0
 808bf14:	4689      	mov	r9, r1
 808bf16:	f034 040f 	bics.w	r4, r4, #15
 808bf1a:	f000 80c1 	beq.w	808c0a0 <_strtod_r+0x5f8>
 808bf1e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808bf22:	dd0f      	ble.n	808bf44 <_strtod_r+0x49c>
 808bf24:	f04f 0b00 	mov.w	fp, #0
 808bf28:	f8cd b008 	str.w	fp, [sp, #8]
 808bf2c:	f8cd b014 	str.w	fp, [sp, #20]
 808bf30:	f8cd b010 	str.w	fp, [sp, #16]
 808bf34:	2322      	movs	r3, #34	; 0x22
 808bf36:	f8ca 3000 	str.w	r3, [sl]
 808bf3a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808c094 <_strtod_r+0x5ec>
 808bf3e:	f04f 0800 	mov.w	r8, #0
 808bf42:	e189      	b.n	808c258 <_strtod_r+0x7b0>
 808bf44:	4640      	mov	r0, r8
 808bf46:	4649      	mov	r1, r9
 808bf48:	2300      	movs	r3, #0
 808bf4a:	4e4f      	ldr	r6, [pc, #316]	; (808c088 <_strtod_r+0x5e0>)
 808bf4c:	1124      	asrs	r4, r4, #4
 808bf4e:	9302      	str	r3, [sp, #8]
 808bf50:	2c01      	cmp	r4, #1
 808bf52:	dd0c      	ble.n	808bf6e <_strtod_r+0x4c6>
 808bf54:	07e2      	lsls	r2, r4, #31
 808bf56:	d504      	bpl.n	808bf62 <_strtod_r+0x4ba>
 808bf58:	e9d6 2300 	ldrd	r2, r3, [r6]
 808bf5c:	f7fd fe24 	bl	8089ba8 <__aeabi_dmul>
 808bf60:	2301      	movs	r3, #1
 808bf62:	9a02      	ldr	r2, [sp, #8]
 808bf64:	1064      	asrs	r4, r4, #1
 808bf66:	3201      	adds	r2, #1
 808bf68:	9202      	str	r2, [sp, #8]
 808bf6a:	3608      	adds	r6, #8
 808bf6c:	e7f0      	b.n	808bf50 <_strtod_r+0x4a8>
 808bf6e:	b10b      	cbz	r3, 808bf74 <_strtod_r+0x4cc>
 808bf70:	4680      	mov	r8, r0
 808bf72:	4689      	mov	r9, r1
 808bf74:	4b44      	ldr	r3, [pc, #272]	; (808c088 <_strtod_r+0x5e0>)
 808bf76:	9a02      	ldr	r2, [sp, #8]
 808bf78:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808bf7c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808bf80:	e9d1 0100 	ldrd	r0, r1, [r1]
 808bf84:	4642      	mov	r2, r8
 808bf86:	464b      	mov	r3, r9
 808bf88:	f7fd fe0e 	bl	8089ba8 <__aeabi_dmul>
 808bf8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808bf90:	4689      	mov	r9, r1
 808bf92:	460a      	mov	r2, r1
 808bf94:	0d1b      	lsrs	r3, r3, #20
 808bf96:	493d      	ldr	r1, [pc, #244]	; (808c08c <_strtod_r+0x5e4>)
 808bf98:	051b      	lsls	r3, r3, #20
 808bf9a:	428b      	cmp	r3, r1
 808bf9c:	4680      	mov	r8, r0
 808bf9e:	d8c1      	bhi.n	808bf24 <_strtod_r+0x47c>
 808bfa0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808bfa4:	428b      	cmp	r3, r1
 808bfa6:	bf86      	itte	hi
 808bfa8:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808c09c <_strtod_r+0x5f4>
 808bfac:	f04f 38ff 	movhi.w	r8, #4294967295
 808bfb0:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808bfb4:	e074      	b.n	808c0a0 <_strtod_r+0x5f8>
 808bfb6:	d073      	beq.n	808c0a0 <_strtod_r+0x5f8>
 808bfb8:	4264      	negs	r4, r4
 808bfba:	f014 020f 	ands.w	r2, r4, #15
 808bfbe:	d00a      	beq.n	808bfd6 <_strtod_r+0x52e>
 808bfc0:	4b30      	ldr	r3, [pc, #192]	; (808c084 <_strtod_r+0x5dc>)
 808bfc2:	4640      	mov	r0, r8
 808bfc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808bfc8:	4649      	mov	r1, r9
 808bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 808bfce:	f7fd ff15 	bl	8089dfc <__aeabi_ddiv>
 808bfd2:	4680      	mov	r8, r0
 808bfd4:	4689      	mov	r9, r1
 808bfd6:	1124      	asrs	r4, r4, #4
 808bfd8:	d062      	beq.n	808c0a0 <_strtod_r+0x5f8>
 808bfda:	2c1f      	cmp	r4, #31
 808bfdc:	dd08      	ble.n	808bff0 <_strtod_r+0x548>
 808bfde:	f04f 0b00 	mov.w	fp, #0
 808bfe2:	f8cd b008 	str.w	fp, [sp, #8]
 808bfe6:	f8cd b014 	str.w	fp, [sp, #20]
 808bfea:	f8cd b010 	str.w	fp, [sp, #16]
 808bfee:	e12c      	b.n	808c24a <_strtod_r+0x7a2>
 808bff0:	4640      	mov	r0, r8
 808bff2:	4649      	mov	r1, r9
 808bff4:	f014 0f10 	tst.w	r4, #16
 808bff8:	bf0c      	ite	eq
 808bffa:	2300      	moveq	r3, #0
 808bffc:	236a      	movne	r3, #106	; 0x6a
 808bffe:	4e24      	ldr	r6, [pc, #144]	; (808c090 <_strtod_r+0x5e8>)
 808c000:	9303      	str	r3, [sp, #12]
 808c002:	2300      	movs	r3, #0
 808c004:	2c00      	cmp	r4, #0
 808c006:	dd09      	ble.n	808c01c <_strtod_r+0x574>
 808c008:	07e2      	lsls	r2, r4, #31
 808c00a:	d504      	bpl.n	808c016 <_strtod_r+0x56e>
 808c00c:	e9d6 2300 	ldrd	r2, r3, [r6]
 808c010:	f7fd fdca 	bl	8089ba8 <__aeabi_dmul>
 808c014:	2301      	movs	r3, #1
 808c016:	1064      	asrs	r4, r4, #1
 808c018:	3608      	adds	r6, #8
 808c01a:	e7f3      	b.n	808c004 <_strtod_r+0x55c>
 808c01c:	b10b      	cbz	r3, 808c022 <_strtod_r+0x57a>
 808c01e:	4680      	mov	r8, r0
 808c020:	4689      	mov	r9, r1
 808c022:	9b03      	ldr	r3, [sp, #12]
 808c024:	b1eb      	cbz	r3, 808c062 <_strtod_r+0x5ba>
 808c026:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808c02a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c02e:	2b00      	cmp	r3, #0
 808c030:	4649      	mov	r1, r9
 808c032:	dd16      	ble.n	808c062 <_strtod_r+0x5ba>
 808c034:	2b1f      	cmp	r3, #31
 808c036:	dd0e      	ble.n	808c056 <_strtod_r+0x5ae>
 808c038:	2b34      	cmp	r3, #52	; 0x34
 808c03a:	bfde      	ittt	le
 808c03c:	3b20      	suble	r3, #32
 808c03e:	f04f 32ff 	movle.w	r2, #4294967295
 808c042:	fa02 f303 	lslle.w	r3, r2, r3
 808c046:	f04f 0800 	mov.w	r8, #0
 808c04a:	bfcc      	ite	gt
 808c04c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808c050:	ea03 0901 	andle.w	r9, r3, r1
 808c054:	e005      	b.n	808c062 <_strtod_r+0x5ba>
 808c056:	f04f 32ff 	mov.w	r2, #4294967295
 808c05a:	fa02 f303 	lsl.w	r3, r2, r3
 808c05e:	ea03 0808 	and.w	r8, r3, r8
 808c062:	2200      	movs	r2, #0
 808c064:	2300      	movs	r3, #0
 808c066:	4640      	mov	r0, r8
 808c068:	4649      	mov	r1, r9
 808c06a:	f7fe f805 	bl	808a078 <__aeabi_dcmpeq>
 808c06e:	2800      	cmp	r0, #0
 808c070:	d1b5      	bne.n	808bfde <_strtod_r+0x536>
 808c072:	e017      	b.n	808c0a4 <_strtod_r+0x5fc>
 808c074:	080905d5 	.word	0x080905d5
 808c078:	08090a70 	.word	0x08090a70
 808c07c:	08090ac1 	.word	0x08090ac1
 808c080:	08090a78 	.word	0x08090a78
 808c084:	08090d18 	.word	0x08090d18
 808c088:	08090de0 	.word	0x08090de0
 808c08c:	7ca00000 	.word	0x7ca00000
 808c090:	08090a90 	.word	0x08090a90
 808c094:	7ff00000 	.word	0x7ff00000
 808c098:	fff80000 	.word	0xfff80000
 808c09c:	7fefffff 	.word	0x7fefffff
 808c0a0:	2300      	movs	r3, #0
 808c0a2:	9303      	str	r3, [sp, #12]
 808c0a4:	9b04      	ldr	r3, [sp, #16]
 808c0a6:	465a      	mov	r2, fp
 808c0a8:	9300      	str	r3, [sp, #0]
 808c0aa:	9906      	ldr	r1, [sp, #24]
 808c0ac:	462b      	mov	r3, r5
 808c0ae:	4650      	mov	r0, sl
 808c0b0:	f001 fae5 	bl	808d67e <__s2b>
 808c0b4:	9005      	str	r0, [sp, #20]
 808c0b6:	2800      	cmp	r0, #0
 808c0b8:	f43f af34 	beq.w	808bf24 <_strtod_r+0x47c>
 808c0bc:	2f00      	cmp	r7, #0
 808c0be:	f1c7 0300 	rsb	r3, r7, #0
 808c0c2:	bfa8      	it	ge
 808c0c4:	2300      	movge	r3, #0
 808c0c6:	930d      	str	r3, [sp, #52]	; 0x34
 808c0c8:	f04f 0b00 	mov.w	fp, #0
 808c0cc:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808c0d0:	9312      	str	r3, [sp, #72]	; 0x48
 808c0d2:	f8cd b008 	str.w	fp, [sp, #8]
 808c0d6:	9b05      	ldr	r3, [sp, #20]
 808c0d8:	4650      	mov	r0, sl
 808c0da:	6859      	ldr	r1, [r3, #4]
 808c0dc:	f001 fa48 	bl	808d570 <_Balloc>
 808c0e0:	9004      	str	r0, [sp, #16]
 808c0e2:	2800      	cmp	r0, #0
 808c0e4:	f43f af26 	beq.w	808bf34 <_strtod_r+0x48c>
 808c0e8:	9b05      	ldr	r3, [sp, #20]
 808c0ea:	300c      	adds	r0, #12
 808c0ec:	691a      	ldr	r2, [r3, #16]
 808c0ee:	f103 010c 	add.w	r1, r3, #12
 808c0f2:	3202      	adds	r2, #2
 808c0f4:	0092      	lsls	r2, r2, #2
 808c0f6:	f7fe fefa 	bl	808aeee <memcpy>
 808c0fa:	ab1a      	add	r3, sp, #104	; 0x68
 808c0fc:	9301      	str	r3, [sp, #4]
 808c0fe:	ab19      	add	r3, sp, #100	; 0x64
 808c100:	9300      	str	r3, [sp, #0]
 808c102:	4642      	mov	r2, r8
 808c104:	464b      	mov	r3, r9
 808c106:	4650      	mov	r0, sl
 808c108:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808c10c:	f001 fd67 	bl	808dbde <__d2b>
 808c110:	9018      	str	r0, [sp, #96]	; 0x60
 808c112:	2800      	cmp	r0, #0
 808c114:	f43f af0e 	beq.w	808bf34 <_strtod_r+0x48c>
 808c118:	2101      	movs	r1, #1
 808c11a:	4650      	mov	r0, sl
 808c11c:	f001 fb3a 	bl	808d794 <__i2b>
 808c120:	9002      	str	r0, [sp, #8]
 808c122:	2800      	cmp	r0, #0
 808c124:	f43f af06 	beq.w	808bf34 <_strtod_r+0x48c>
 808c128:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808c12a:	9903      	ldr	r1, [sp, #12]
 808c12c:	2b00      	cmp	r3, #0
 808c12e:	bfac      	ite	ge
 808c130:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808c132:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808c134:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808c136:	bfac      	ite	ge
 808c138:	18d6      	addge	r6, r2, r3
 808c13a:	1ad2      	sublt	r2, r2, r3
 808c13c:	eba3 0301 	sub.w	r3, r3, r1
 808c140:	4423      	add	r3, r4
 808c142:	49b1      	ldr	r1, [pc, #708]	; (808c408 <_strtod_r+0x960>)
 808c144:	f103 33ff 	add.w	r3, r3, #4294967295
 808c148:	bfac      	ite	ge
 808c14a:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808c14c:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808c14e:	428b      	cmp	r3, r1
 808c150:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808c154:	f280 8085 	bge.w	808c262 <_strtod_r+0x7ba>
 808c158:	1ac9      	subs	r1, r1, r3
 808c15a:	291f      	cmp	r1, #31
 808c15c:	bfc8      	it	gt
 808c15e:	4dab      	ldrgt	r5, [pc, #684]	; (808c40c <_strtod_r+0x964>)
 808c160:	f04f 0701 	mov.w	r7, #1
 808c164:	bfd4      	ite	le
 808c166:	fa07 f301 	lslle.w	r3, r7, r1
 808c16a:	1aed      	subgt	r5, r5, r3
 808c16c:	eba4 0401 	sub.w	r4, r4, r1
 808c170:	bfd9      	ittee	le
 808c172:	9307      	strle	r3, [sp, #28]
 808c174:	2500      	movle	r5, #0
 808c176:	fa07 f505 	lslgt.w	r5, r7, r5
 808c17a:	9707      	strgt	r7, [sp, #28]
 808c17c:	1937      	adds	r7, r6, r4
 808c17e:	9b03      	ldr	r3, [sp, #12]
 808c180:	42be      	cmp	r6, r7
 808c182:	4414      	add	r4, r2
 808c184:	441c      	add	r4, r3
 808c186:	4633      	mov	r3, r6
 808c188:	bfa8      	it	ge
 808c18a:	463b      	movge	r3, r7
 808c18c:	42a3      	cmp	r3, r4
 808c18e:	bfa8      	it	ge
 808c190:	4623      	movge	r3, r4
 808c192:	2b00      	cmp	r3, #0
 808c194:	bfc2      	ittt	gt
 808c196:	1aff      	subgt	r7, r7, r3
 808c198:	1ae4      	subgt	r4, r4, r3
 808c19a:	1af6      	subgt	r6, r6, r3
 808c19c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808c19e:	2b00      	cmp	r3, #0
 808c1a0:	d163      	bne.n	808c26a <_strtod_r+0x7c2>
 808c1a2:	2f00      	cmp	r7, #0
 808c1a4:	dc7a      	bgt.n	808c29c <_strtod_r+0x7f4>
 808c1a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808c1a8:	2b00      	cmp	r3, #0
 808c1aa:	f040 8081 	bne.w	808c2b0 <_strtod_r+0x808>
 808c1ae:	2c00      	cmp	r4, #0
 808c1b0:	f300 8088 	bgt.w	808c2c4 <_strtod_r+0x81c>
 808c1b4:	2e00      	cmp	r6, #0
 808c1b6:	f300 808f 	bgt.w	808c2d8 <_strtod_r+0x830>
 808c1ba:	9a04      	ldr	r2, [sp, #16]
 808c1bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c1be:	4650      	mov	r0, sl
 808c1c0:	f001 fc3d 	bl	808da3e <__mdiff>
 808c1c4:	4683      	mov	fp, r0
 808c1c6:	2800      	cmp	r0, #0
 808c1c8:	f43f aeb4 	beq.w	808bf34 <_strtod_r+0x48c>
 808c1cc:	68c3      	ldr	r3, [r0, #12]
 808c1ce:	2400      	movs	r4, #0
 808c1d0:	60c4      	str	r4, [r0, #12]
 808c1d2:	9902      	ldr	r1, [sp, #8]
 808c1d4:	9306      	str	r3, [sp, #24]
 808c1d6:	f001 fc16 	bl	808da06 <__mcmp>
 808c1da:	42a0      	cmp	r0, r4
 808c1dc:	f280 808b 	bge.w	808c2f6 <_strtod_r+0x84e>
 808c1e0:	9b06      	ldr	r3, [sp, #24]
 808c1e2:	2b00      	cmp	r3, #0
 808c1e4:	f040 8202 	bne.w	808c5ec <_strtod_r+0xb44>
 808c1e8:	f1b8 0f00 	cmp.w	r8, #0
 808c1ec:	f040 81fe 	bne.w	808c5ec <_strtod_r+0xb44>
 808c1f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c1f4:	2b00      	cmp	r3, #0
 808c1f6:	f040 81f9 	bne.w	808c5ec <_strtod_r+0xb44>
 808c1fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c1fe:	0d1b      	lsrs	r3, r3, #20
 808c200:	051b      	lsls	r3, r3, #20
 808c202:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808c206:	f240 81f1 	bls.w	808c5ec <_strtod_r+0xb44>
 808c20a:	f8db 3014 	ldr.w	r3, [fp, #20]
 808c20e:	2b00      	cmp	r3, #0
 808c210:	d06c      	beq.n	808c2ec <_strtod_r+0x844>
 808c212:	4659      	mov	r1, fp
 808c214:	2201      	movs	r2, #1
 808c216:	4650      	mov	r0, sl
 808c218:	f001 fba4 	bl	808d964 <__lshift>
 808c21c:	9902      	ldr	r1, [sp, #8]
 808c21e:	4683      	mov	fp, r0
 808c220:	f001 fbf1 	bl	808da06 <__mcmp>
 808c224:	2800      	cmp	r0, #0
 808c226:	f340 81e1 	ble.w	808c5ec <_strtod_r+0xb44>
 808c22a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c22e:	9a03      	ldr	r2, [sp, #12]
 808c230:	0d1b      	lsrs	r3, r3, #20
 808c232:	051b      	lsls	r3, r3, #20
 808c234:	2a00      	cmp	r2, #0
 808c236:	f000 808d 	beq.w	808c354 <_strtod_r+0x8ac>
 808c23a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808c23e:	f300 8089 	bgt.w	808c354 <_strtod_r+0x8ac>
 808c242:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808c246:	f300 81d3 	bgt.w	808c5f0 <_strtod_r+0xb48>
 808c24a:	2322      	movs	r3, #34	; 0x22
 808c24c:	f04f 0800 	mov.w	r8, #0
 808c250:	f04f 0900 	mov.w	r9, #0
 808c254:	f8ca 3000 	str.w	r3, [sl]
 808c258:	9b05      	ldr	r3, [sp, #20]
 808c25a:	2b00      	cmp	r3, #0
 808c25c:	f040 81d9 	bne.w	808c612 <_strtod_r+0xb6a>
 808c260:	e1eb      	b.n	808c63a <_strtod_r+0xb92>
 808c262:	2301      	movs	r3, #1
 808c264:	2500      	movs	r5, #0
 808c266:	9307      	str	r3, [sp, #28]
 808c268:	e788      	b.n	808c17c <_strtod_r+0x6d4>
 808c26a:	461a      	mov	r2, r3
 808c26c:	9902      	ldr	r1, [sp, #8]
 808c26e:	4650      	mov	r0, sl
 808c270:	f001 fb2a 	bl	808d8c8 <__pow5mult>
 808c274:	9002      	str	r0, [sp, #8]
 808c276:	2800      	cmp	r0, #0
 808c278:	f43f ae5c 	beq.w	808bf34 <_strtod_r+0x48c>
 808c27c:	4601      	mov	r1, r0
 808c27e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808c280:	4650      	mov	r0, sl
 808c282:	f001 fa90 	bl	808d7a6 <__multiply>
 808c286:	9006      	str	r0, [sp, #24]
 808c288:	2800      	cmp	r0, #0
 808c28a:	f43f ae53 	beq.w	808bf34 <_strtod_r+0x48c>
 808c28e:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c290:	4650      	mov	r0, sl
 808c292:	f001 f9a2 	bl	808d5da <_Bfree>
 808c296:	9b06      	ldr	r3, [sp, #24]
 808c298:	9318      	str	r3, [sp, #96]	; 0x60
 808c29a:	e782      	b.n	808c1a2 <_strtod_r+0x6fa>
 808c29c:	463a      	mov	r2, r7
 808c29e:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c2a0:	4650      	mov	r0, sl
 808c2a2:	f001 fb5f 	bl	808d964 <__lshift>
 808c2a6:	9018      	str	r0, [sp, #96]	; 0x60
 808c2a8:	2800      	cmp	r0, #0
 808c2aa:	f47f af7c 	bne.w	808c1a6 <_strtod_r+0x6fe>
 808c2ae:	e641      	b.n	808bf34 <_strtod_r+0x48c>
 808c2b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808c2b2:	9904      	ldr	r1, [sp, #16]
 808c2b4:	4650      	mov	r0, sl
 808c2b6:	f001 fb07 	bl	808d8c8 <__pow5mult>
 808c2ba:	9004      	str	r0, [sp, #16]
 808c2bc:	2800      	cmp	r0, #0
 808c2be:	f47f af76 	bne.w	808c1ae <_strtod_r+0x706>
 808c2c2:	e637      	b.n	808bf34 <_strtod_r+0x48c>
 808c2c4:	4622      	mov	r2, r4
 808c2c6:	9904      	ldr	r1, [sp, #16]
 808c2c8:	4650      	mov	r0, sl
 808c2ca:	f001 fb4b 	bl	808d964 <__lshift>
 808c2ce:	9004      	str	r0, [sp, #16]
 808c2d0:	2800      	cmp	r0, #0
 808c2d2:	f47f af6f 	bne.w	808c1b4 <_strtod_r+0x70c>
 808c2d6:	e62d      	b.n	808bf34 <_strtod_r+0x48c>
 808c2d8:	4632      	mov	r2, r6
 808c2da:	9902      	ldr	r1, [sp, #8]
 808c2dc:	4650      	mov	r0, sl
 808c2de:	f001 fb41 	bl	808d964 <__lshift>
 808c2e2:	9002      	str	r0, [sp, #8]
 808c2e4:	2800      	cmp	r0, #0
 808c2e6:	f47f af68 	bne.w	808c1ba <_strtod_r+0x712>
 808c2ea:	e623      	b.n	808bf34 <_strtod_r+0x48c>
 808c2ec:	f8db 3010 	ldr.w	r3, [fp, #16]
 808c2f0:	2b01      	cmp	r3, #1
 808c2f2:	dc8e      	bgt.n	808c212 <_strtod_r+0x76a>
 808c2f4:	e17a      	b.n	808c5ec <_strtod_r+0xb44>
 808c2f6:	d161      	bne.n	808c3bc <_strtod_r+0x914>
 808c2f8:	9a06      	ldr	r2, [sp, #24]
 808c2fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c2fe:	b322      	cbz	r2, 808c34a <_strtod_r+0x8a2>
 808c300:	4943      	ldr	r1, [pc, #268]	; (808c410 <_strtod_r+0x968>)
 808c302:	464a      	mov	r2, r9
 808c304:	428b      	cmp	r3, r1
 808c306:	d12e      	bne.n	808c366 <_strtod_r+0x8be>
 808c308:	9b03      	ldr	r3, [sp, #12]
 808c30a:	4641      	mov	r1, r8
 808c30c:	b163      	cbz	r3, 808c328 <_strtod_r+0x880>
 808c30e:	4b41      	ldr	r3, [pc, #260]	; (808c414 <_strtod_r+0x96c>)
 808c310:	4013      	ands	r3, r2
 808c312:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808c316:	d807      	bhi.n	808c328 <_strtod_r+0x880>
 808c318:	0d1b      	lsrs	r3, r3, #20
 808c31a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c31e:	f04f 30ff 	mov.w	r0, #4294967295
 808c322:	fa00 f303 	lsl.w	r3, r0, r3
 808c326:	e001      	b.n	808c32c <_strtod_r+0x884>
 808c328:	f04f 33ff 	mov.w	r3, #4294967295
 808c32c:	428b      	cmp	r3, r1
 808c32e:	d11a      	bne.n	808c366 <_strtod_r+0x8be>
 808c330:	4939      	ldr	r1, [pc, #228]	; (808c418 <_strtod_r+0x970>)
 808c332:	428a      	cmp	r2, r1
 808c334:	d102      	bne.n	808c33c <_strtod_r+0x894>
 808c336:	3301      	adds	r3, #1
 808c338:	f43f adfc 	beq.w	808bf34 <_strtod_r+0x48c>
 808c33c:	4b35      	ldr	r3, [pc, #212]	; (808c414 <_strtod_r+0x96c>)
 808c33e:	f04f 0800 	mov.w	r8, #0
 808c342:	4013      	ands	r3, r2
 808c344:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808c348:	e150      	b.n	808c5ec <_strtod_r+0xb44>
 808c34a:	b963      	cbnz	r3, 808c366 <_strtod_r+0x8be>
 808c34c:	f1b8 0f00 	cmp.w	r8, #0
 808c350:	d109      	bne.n	808c366 <_strtod_r+0x8be>
 808c352:	e76a      	b.n	808c22a <_strtod_r+0x782>
 808c354:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808c358:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808c35c:	f04f 38ff 	mov.w	r8, #4294967295
 808c360:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808c364:	e142      	b.n	808c5ec <_strtod_r+0xb44>
 808c366:	b115      	cbz	r5, 808c36e <_strtod_r+0x8c6>
 808c368:	ea15 0f09 	tst.w	r5, r9
 808c36c:	e002      	b.n	808c374 <_strtod_r+0x8cc>
 808c36e:	9b07      	ldr	r3, [sp, #28]
 808c370:	ea13 0f08 	tst.w	r3, r8
 808c374:	f000 813a 	beq.w	808c5ec <_strtod_r+0xb44>
 808c378:	9b06      	ldr	r3, [sp, #24]
 808c37a:	9a03      	ldr	r2, [sp, #12]
 808c37c:	4640      	mov	r0, r8
 808c37e:	4649      	mov	r1, r9
 808c380:	b153      	cbz	r3, 808c398 <_strtod_r+0x8f0>
 808c382:	f7ff fb6d 	bl	808ba60 <sulp>
 808c386:	4602      	mov	r2, r0
 808c388:	460b      	mov	r3, r1
 808c38a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808c38e:	f7fd fa59 	bl	8089844 <__adddf3>
 808c392:	4680      	mov	r8, r0
 808c394:	4689      	mov	r9, r1
 808c396:	e129      	b.n	808c5ec <_strtod_r+0xb44>
 808c398:	f7ff fb62 	bl	808ba60 <sulp>
 808c39c:	4602      	mov	r2, r0
 808c39e:	460b      	mov	r3, r1
 808c3a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808c3a4:	f7fd fa4c 	bl	8089840 <__aeabi_dsub>
 808c3a8:	2200      	movs	r2, #0
 808c3aa:	2300      	movs	r3, #0
 808c3ac:	4680      	mov	r8, r0
 808c3ae:	4689      	mov	r9, r1
 808c3b0:	f7fd fe62 	bl	808a078 <__aeabi_dcmpeq>
 808c3b4:	2800      	cmp	r0, #0
 808c3b6:	f47f af48 	bne.w	808c24a <_strtod_r+0x7a2>
 808c3ba:	e117      	b.n	808c5ec <_strtod_r+0xb44>
 808c3bc:	9902      	ldr	r1, [sp, #8]
 808c3be:	4658      	mov	r0, fp
 808c3c0:	f001 fc5b 	bl	808dc7a <__ratio>
 808c3c4:	2200      	movs	r2, #0
 808c3c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808c3ca:	4606      	mov	r6, r0
 808c3cc:	460f      	mov	r7, r1
 808c3ce:	f7fd fe67 	bl	808a0a0 <__aeabi_dcmple>
 808c3d2:	2800      	cmp	r0, #0
 808c3d4:	d03f      	beq.n	808c456 <_strtod_r+0x9ae>
 808c3d6:	9b06      	ldr	r3, [sp, #24]
 808c3d8:	b113      	cbz	r3, 808c3e0 <_strtod_r+0x938>
 808c3da:	2600      	movs	r6, #0
 808c3dc:	4f0f      	ldr	r7, [pc, #60]	; (808c41c <_strtod_r+0x974>)
 808c3de:	e010      	b.n	808c402 <_strtod_r+0x95a>
 808c3e0:	f1b8 0f00 	cmp.w	r8, #0
 808c3e4:	d103      	bne.n	808c3ee <_strtod_r+0x946>
 808c3e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c3ea:	b93b      	cbnz	r3, 808c3fc <_strtod_r+0x954>
 808c3ec:	e01a      	b.n	808c424 <_strtod_r+0x97c>
 808c3ee:	f1b8 0f01 	cmp.w	r8, #1
 808c3f2:	d103      	bne.n	808c3fc <_strtod_r+0x954>
 808c3f4:	f1b9 0f00 	cmp.w	r9, #0
 808c3f8:	f43f af27 	beq.w	808c24a <_strtod_r+0x7a2>
 808c3fc:	4f08      	ldr	r7, [pc, #32]	; (808c420 <_strtod_r+0x978>)
 808c3fe:	2600      	movs	r6, #0
 808c400:	2400      	movs	r4, #0
 808c402:	4d06      	ldr	r5, [pc, #24]	; (808c41c <_strtod_r+0x974>)
 808c404:	e03c      	b.n	808c480 <_strtod_r+0x9d8>
 808c406:	bf00      	nop
 808c408:	fffffc02 	.word	0xfffffc02
 808c40c:	fffffbe2 	.word	0xfffffbe2
 808c410:	000fffff 	.word	0x000fffff
 808c414:	7ff00000 	.word	0x7ff00000
 808c418:	7fefffff 	.word	0x7fefffff
 808c41c:	3ff00000 	.word	0x3ff00000
 808c420:	bff00000 	.word	0xbff00000
 808c424:	2200      	movs	r2, #0
 808c426:	4b9a      	ldr	r3, [pc, #616]	; (808c690 <_strtod_r+0xbe8>)
 808c428:	4630      	mov	r0, r6
 808c42a:	4639      	mov	r1, r7
 808c42c:	f7fd fe2e 	bl	808a08c <__aeabi_dcmplt>
 808c430:	b940      	cbnz	r0, 808c444 <_strtod_r+0x99c>
 808c432:	2200      	movs	r2, #0
 808c434:	4b97      	ldr	r3, [pc, #604]	; (808c694 <_strtod_r+0xbec>)
 808c436:	4630      	mov	r0, r6
 808c438:	4639      	mov	r1, r7
 808c43a:	f7fd fbb5 	bl	8089ba8 <__aeabi_dmul>
 808c43e:	4604      	mov	r4, r0
 808c440:	460d      	mov	r5, r1
 808c442:	e001      	b.n	808c448 <_strtod_r+0x9a0>
 808c444:	9c06      	ldr	r4, [sp, #24]
 808c446:	4d93      	ldr	r5, [pc, #588]	; (808c694 <_strtod_r+0xbec>)
 808c448:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808c44c:	9414      	str	r4, [sp, #80]	; 0x50
 808c44e:	9315      	str	r3, [sp, #84]	; 0x54
 808c450:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808c454:	e014      	b.n	808c480 <_strtod_r+0x9d8>
 808c456:	4b8f      	ldr	r3, [pc, #572]	; (808c694 <_strtod_r+0xbec>)
 808c458:	2200      	movs	r2, #0
 808c45a:	4630      	mov	r0, r6
 808c45c:	4639      	mov	r1, r7
 808c45e:	f7fd fba3 	bl	8089ba8 <__aeabi_dmul>
 808c462:	9b06      	ldr	r3, [sp, #24]
 808c464:	4604      	mov	r4, r0
 808c466:	460d      	mov	r5, r1
 808c468:	b923      	cbnz	r3, 808c474 <_strtod_r+0x9cc>
 808c46a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808c46e:	900e      	str	r0, [sp, #56]	; 0x38
 808c470:	930f      	str	r3, [sp, #60]	; 0x3c
 808c472:	e003      	b.n	808c47c <_strtod_r+0x9d4>
 808c474:	4602      	mov	r2, r0
 808c476:	460b      	mov	r3, r1
 808c478:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808c47c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808c480:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c484:	0d1b      	lsrs	r3, r3, #20
 808c486:	051b      	lsls	r3, r3, #20
 808c488:	9307      	str	r3, [sp, #28]
 808c48a:	9a07      	ldr	r2, [sp, #28]
 808c48c:	4b82      	ldr	r3, [pc, #520]	; (808c698 <_strtod_r+0xbf0>)
 808c48e:	429a      	cmp	r2, r3
 808c490:	d12b      	bne.n	808c4ea <_strtod_r+0xa42>
 808c492:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808c496:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808c49a:	4640      	mov	r0, r8
 808c49c:	4649      	mov	r1, r9
 808c49e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808c4a2:	f001 fb2b 	bl	808dafc <__ulp>
 808c4a6:	4602      	mov	r2, r0
 808c4a8:	460b      	mov	r3, r1
 808c4aa:	4630      	mov	r0, r6
 808c4ac:	4639      	mov	r1, r7
 808c4ae:	f7fd fb7b 	bl	8089ba8 <__aeabi_dmul>
 808c4b2:	4642      	mov	r2, r8
 808c4b4:	464b      	mov	r3, r9
 808c4b6:	f7fd f9c5 	bl	8089844 <__adddf3>
 808c4ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808c4be:	0d1b      	lsrs	r3, r3, #20
 808c4c0:	4a76      	ldr	r2, [pc, #472]	; (808c69c <_strtod_r+0xbf4>)
 808c4c2:	051b      	lsls	r3, r3, #20
 808c4c4:	4293      	cmp	r3, r2
 808c4c6:	4680      	mov	r8, r0
 808c4c8:	d90c      	bls.n	808c4e4 <_strtod_r+0xa3c>
 808c4ca:	4b75      	ldr	r3, [pc, #468]	; (808c6a0 <_strtod_r+0xbf8>)
 808c4cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808c4ce:	429a      	cmp	r2, r3
 808c4d0:	d103      	bne.n	808c4da <_strtod_r+0xa32>
 808c4d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808c4d4:	3301      	adds	r3, #1
 808c4d6:	f43f ad2d 	beq.w	808bf34 <_strtod_r+0x48c>
 808c4da:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 808c6a0 <_strtod_r+0xbf8>
 808c4de:	f04f 38ff 	mov.w	r8, #4294967295
 808c4e2:	e072      	b.n	808c5ca <_strtod_r+0xb22>
 808c4e4:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808c4e8:	e039      	b.n	808c55e <_strtod_r+0xab6>
 808c4ea:	9b03      	ldr	r3, [sp, #12]
 808c4ec:	b33b      	cbz	r3, 808c53e <_strtod_r+0xa96>
 808c4ee:	9b07      	ldr	r3, [sp, #28]
 808c4f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808c4f4:	d823      	bhi.n	808c53e <_strtod_r+0xa96>
 808c4f6:	a35e      	add	r3, pc, #376	; (adr r3, 808c670 <_strtod_r+0xbc8>)
 808c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c4fc:	4620      	mov	r0, r4
 808c4fe:	4629      	mov	r1, r5
 808c500:	f7fd fdce 	bl	808a0a0 <__aeabi_dcmple>
 808c504:	b1b8      	cbz	r0, 808c536 <_strtod_r+0xa8e>
 808c506:	4629      	mov	r1, r5
 808c508:	4620      	mov	r0, r4
 808c50a:	f7fd fe25 	bl	808a158 <__aeabi_d2uiz>
 808c50e:	2800      	cmp	r0, #0
 808c510:	bf08      	it	eq
 808c512:	2001      	moveq	r0, #1
 808c514:	f7fd fad2 	bl	8089abc <__aeabi_ui2d>
 808c518:	9b06      	ldr	r3, [sp, #24]
 808c51a:	4604      	mov	r4, r0
 808c51c:	460d      	mov	r5, r1
 808c51e:	b923      	cbnz	r3, 808c52a <_strtod_r+0xa82>
 808c520:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808c524:	9010      	str	r0, [sp, #64]	; 0x40
 808c526:	9311      	str	r3, [sp, #68]	; 0x44
 808c528:	e003      	b.n	808c532 <_strtod_r+0xa8a>
 808c52a:	4602      	mov	r2, r0
 808c52c:	460b      	mov	r3, r1
 808c52e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808c532:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808c536:	9a07      	ldr	r2, [sp, #28]
 808c538:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808c53c:	1a9f      	subs	r7, r3, r2
 808c53e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808c542:	f001 fadb 	bl	808dafc <__ulp>
 808c546:	4602      	mov	r2, r0
 808c548:	460b      	mov	r3, r1
 808c54a:	4630      	mov	r0, r6
 808c54c:	4639      	mov	r1, r7
 808c54e:	f7fd fb2b 	bl	8089ba8 <__aeabi_dmul>
 808c552:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808c556:	f7fd f975 	bl	8089844 <__adddf3>
 808c55a:	4680      	mov	r8, r0
 808c55c:	4689      	mov	r9, r1
 808c55e:	9b03      	ldr	r3, [sp, #12]
 808c560:	bb9b      	cbnz	r3, 808c5ca <_strtod_r+0xb22>
 808c562:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c566:	0d1b      	lsrs	r3, r3, #20
 808c568:	9a07      	ldr	r2, [sp, #28]
 808c56a:	051b      	lsls	r3, r3, #20
 808c56c:	429a      	cmp	r2, r3
 808c56e:	464e      	mov	r6, r9
 808c570:	d12b      	bne.n	808c5ca <_strtod_r+0xb22>
 808c572:	4629      	mov	r1, r5
 808c574:	4620      	mov	r0, r4
 808c576:	f7fd fdc7 	bl	808a108 <__aeabi_d2iz>
 808c57a:	f7fd faaf 	bl	8089adc <__aeabi_i2d>
 808c57e:	460b      	mov	r3, r1
 808c580:	4602      	mov	r2, r0
 808c582:	4629      	mov	r1, r5
 808c584:	4620      	mov	r0, r4
 808c586:	f7fd f95b 	bl	8089840 <__aeabi_dsub>
 808c58a:	9b06      	ldr	r3, [sp, #24]
 808c58c:	4604      	mov	r4, r0
 808c58e:	460d      	mov	r5, r1
 808c590:	b92b      	cbnz	r3, 808c59e <_strtod_r+0xaf6>
 808c592:	f1b8 0f00 	cmp.w	r8, #0
 808c596:	d102      	bne.n	808c59e <_strtod_r+0xaf6>
 808c598:	f3c9 0613 	ubfx	r6, r9, #0, #20
 808c59c:	b17e      	cbz	r6, 808c5be <_strtod_r+0xb16>
 808c59e:	a336      	add	r3, pc, #216	; (adr r3, 808c678 <_strtod_r+0xbd0>)
 808c5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c5a4:	4620      	mov	r0, r4
 808c5a6:	4629      	mov	r1, r5
 808c5a8:	f7fd fd70 	bl	808a08c <__aeabi_dcmplt>
 808c5ac:	bb88      	cbnz	r0, 808c612 <_strtod_r+0xb6a>
 808c5ae:	a334      	add	r3, pc, #208	; (adr r3, 808c680 <_strtod_r+0xbd8>)
 808c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c5b4:	4620      	mov	r0, r4
 808c5b6:	4629      	mov	r1, r5
 808c5b8:	f7fd fd86 	bl	808a0c8 <__aeabi_dcmpgt>
 808c5bc:	e004      	b.n	808c5c8 <_strtod_r+0xb20>
 808c5be:	a332      	add	r3, pc, #200	; (adr r3, 808c688 <_strtod_r+0xbe0>)
 808c5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c5c4:	f7fd fd62 	bl	808a08c <__aeabi_dcmplt>
 808c5c8:	bb18      	cbnz	r0, 808c612 <_strtod_r+0xb6a>
 808c5ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c5cc:	4650      	mov	r0, sl
 808c5ce:	f001 f804 	bl	808d5da <_Bfree>
 808c5d2:	9904      	ldr	r1, [sp, #16]
 808c5d4:	4650      	mov	r0, sl
 808c5d6:	f001 f800 	bl	808d5da <_Bfree>
 808c5da:	9902      	ldr	r1, [sp, #8]
 808c5dc:	4650      	mov	r0, sl
 808c5de:	f000 fffc 	bl	808d5da <_Bfree>
 808c5e2:	4659      	mov	r1, fp
 808c5e4:	4650      	mov	r0, sl
 808c5e6:	f000 fff8 	bl	808d5da <_Bfree>
 808c5ea:	e574      	b.n	808c0d6 <_strtod_r+0x62e>
 808c5ec:	9b03      	ldr	r3, [sp, #12]
 808c5ee:	b183      	cbz	r3, 808c612 <_strtod_r+0xb6a>
 808c5f0:	4b2c      	ldr	r3, [pc, #176]	; (808c6a4 <_strtod_r+0xbfc>)
 808c5f2:	4640      	mov	r0, r8
 808c5f4:	930b      	str	r3, [sp, #44]	; 0x2c
 808c5f6:	2300      	movs	r3, #0
 808c5f8:	930a      	str	r3, [sp, #40]	; 0x28
 808c5fa:	4649      	mov	r1, r9
 808c5fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808c600:	f7fd fad2 	bl	8089ba8 <__aeabi_dmul>
 808c604:	4680      	mov	r8, r0
 808c606:	4689      	mov	r9, r1
 808c608:	b919      	cbnz	r1, 808c612 <_strtod_r+0xb6a>
 808c60a:	b910      	cbnz	r0, 808c612 <_strtod_r+0xb6a>
 808c60c:	2322      	movs	r3, #34	; 0x22
 808c60e:	f8ca 3000 	str.w	r3, [sl]
 808c612:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c614:	4650      	mov	r0, sl
 808c616:	f000 ffe0 	bl	808d5da <_Bfree>
 808c61a:	9904      	ldr	r1, [sp, #16]
 808c61c:	4650      	mov	r0, sl
 808c61e:	f000 ffdc 	bl	808d5da <_Bfree>
 808c622:	9902      	ldr	r1, [sp, #8]
 808c624:	4650      	mov	r0, sl
 808c626:	f000 ffd8 	bl	808d5da <_Bfree>
 808c62a:	9905      	ldr	r1, [sp, #20]
 808c62c:	4650      	mov	r0, sl
 808c62e:	f000 ffd4 	bl	808d5da <_Bfree>
 808c632:	4659      	mov	r1, fp
 808c634:	4650      	mov	r0, sl
 808c636:	f000 ffd0 	bl	808d5da <_Bfree>
 808c63a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808c63c:	b113      	cbz	r3, 808c644 <_strtod_r+0xb9c>
 808c63e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c640:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808c642:	6013      	str	r3, [r2, #0]
 808c644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808c646:	b11b      	cbz	r3, 808c650 <_strtod_r+0xba8>
 808c648:	4642      	mov	r2, r8
 808c64a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808c64e:	e007      	b.n	808c660 <_strtod_r+0xbb8>
 808c650:	4642      	mov	r2, r8
 808c652:	464b      	mov	r3, r9
 808c654:	e004      	b.n	808c660 <_strtod_r+0xbb8>
 808c656:	2500      	movs	r5, #0
 808c658:	462a      	mov	r2, r5
 808c65a:	2101      	movs	r1, #1
 808c65c:	f7ff bb47 	b.w	808bcee <_strtod_r+0x246>
 808c660:	4610      	mov	r0, r2
 808c662:	4619      	mov	r1, r3
 808c664:	b01d      	add	sp, #116	; 0x74
 808c666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c66a:	bf00      	nop
 808c66c:	f3af 8000 	nop.w
 808c670:	ffc00000 	.word	0xffc00000
 808c674:	41dfffff 	.word	0x41dfffff
 808c678:	94a03595 	.word	0x94a03595
 808c67c:	3fdfffff 	.word	0x3fdfffff
 808c680:	35afe535 	.word	0x35afe535
 808c684:	3fe00000 	.word	0x3fe00000
 808c688:	94a03595 	.word	0x94a03595
 808c68c:	3fcfffff 	.word	0x3fcfffff
 808c690:	3ff00000 	.word	0x3ff00000
 808c694:	3fe00000 	.word	0x3fe00000
 808c698:	7fe00000 	.word	0x7fe00000
 808c69c:	7c9fffff 	.word	0x7c9fffff
 808c6a0:	7fefffff 	.word	0x7fefffff
 808c6a4:	39500000 	.word	0x39500000

0808c6a8 <strtod>:
 808c6a8:	4b02      	ldr	r3, [pc, #8]	; (808c6b4 <strtod+0xc>)
 808c6aa:	460a      	mov	r2, r1
 808c6ac:	4601      	mov	r1, r0
 808c6ae:	6818      	ldr	r0, [r3, #0]
 808c6b0:	f7ff b9fa 	b.w	808baa8 <_strtod_r>
 808c6b4:	20000144 	.word	0x20000144

0808c6b8 <_strtol_r>:
 808c6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c6bc:	460f      	mov	r7, r1
 808c6be:	4680      	mov	r8, r0
 808c6c0:	483f      	ldr	r0, [pc, #252]	; (808c7c0 <_strtol_r+0x108>)
 808c6c2:	f8d0 9000 	ldr.w	r9, [r0]
 808c6c6:	463d      	mov	r5, r7
 808c6c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 808c6cc:	eb09 0004 	add.w	r0, r9, r4
 808c6d0:	7840      	ldrb	r0, [r0, #1]
 808c6d2:	f000 0008 	and.w	r0, r0, #8
 808c6d6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 808c6da:	b108      	cbz	r0, 808c6e0 <_strtol_r+0x28>
 808c6dc:	462f      	mov	r7, r5
 808c6de:	e7f2      	b.n	808c6c6 <_strtol_r+0xe>
 808c6e0:	2c2d      	cmp	r4, #45	; 0x2d
 808c6e2:	d103      	bne.n	808c6ec <_strtol_r+0x34>
 808c6e4:	1cbd      	adds	r5, r7, #2
 808c6e6:	787c      	ldrb	r4, [r7, #1]
 808c6e8:	2601      	movs	r6, #1
 808c6ea:	e003      	b.n	808c6f4 <_strtol_r+0x3c>
 808c6ec:	2c2b      	cmp	r4, #43	; 0x2b
 808c6ee:	bf04      	itt	eq
 808c6f0:	787c      	ldrbeq	r4, [r7, #1]
 808c6f2:	1cbd      	addeq	r5, r7, #2
 808c6f4:	b113      	cbz	r3, 808c6fc <_strtol_r+0x44>
 808c6f6:	2b10      	cmp	r3, #16
 808c6f8:	d10a      	bne.n	808c710 <_strtol_r+0x58>
 808c6fa:	e05b      	b.n	808c7b4 <_strtol_r+0xfc>
 808c6fc:	2c30      	cmp	r4, #48	; 0x30
 808c6fe:	d157      	bne.n	808c7b0 <_strtol_r+0xf8>
 808c700:	7828      	ldrb	r0, [r5, #0]
 808c702:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808c706:	2858      	cmp	r0, #88	; 0x58
 808c708:	d14d      	bne.n	808c7a6 <_strtol_r+0xee>
 808c70a:	786c      	ldrb	r4, [r5, #1]
 808c70c:	2310      	movs	r3, #16
 808c70e:	3502      	adds	r5, #2
 808c710:	2e00      	cmp	r6, #0
 808c712:	bf14      	ite	ne
 808c714:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 808c718:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 808c71c:	fbbc faf3 	udiv	sl, ip, r3
 808c720:	2700      	movs	r7, #0
 808c722:	4638      	mov	r0, r7
 808c724:	fb03 cc1a 	mls	ip, r3, sl, ip
 808c728:	eb09 0e04 	add.w	lr, r9, r4
 808c72c:	f89e e001 	ldrb.w	lr, [lr, #1]
 808c730:	f01e 0f04 	tst.w	lr, #4
 808c734:	d001      	beq.n	808c73a <_strtol_r+0x82>
 808c736:	3c30      	subs	r4, #48	; 0x30
 808c738:	e00b      	b.n	808c752 <_strtol_r+0x9a>
 808c73a:	f01e 0e03 	ands.w	lr, lr, #3
 808c73e:	d01b      	beq.n	808c778 <_strtol_r+0xc0>
 808c740:	f1be 0f01 	cmp.w	lr, #1
 808c744:	bf0c      	ite	eq
 808c746:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808c74a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808c74e:	ebce 0404 	rsb	r4, lr, r4
 808c752:	42a3      	cmp	r3, r4
 808c754:	dd10      	ble.n	808c778 <_strtol_r+0xc0>
 808c756:	f1b7 3fff 	cmp.w	r7, #4294967295
 808c75a:	d00a      	beq.n	808c772 <_strtol_r+0xba>
 808c75c:	4550      	cmp	r0, sl
 808c75e:	d806      	bhi.n	808c76e <_strtol_r+0xb6>
 808c760:	d101      	bne.n	808c766 <_strtol_r+0xae>
 808c762:	4564      	cmp	r4, ip
 808c764:	dc03      	bgt.n	808c76e <_strtol_r+0xb6>
 808c766:	fb03 4000 	mla	r0, r3, r0, r4
 808c76a:	2701      	movs	r7, #1
 808c76c:	e001      	b.n	808c772 <_strtol_r+0xba>
 808c76e:	f04f 37ff 	mov.w	r7, #4294967295
 808c772:	f815 4b01 	ldrb.w	r4, [r5], #1
 808c776:	e7d7      	b.n	808c728 <_strtol_r+0x70>
 808c778:	1c7b      	adds	r3, r7, #1
 808c77a:	d10c      	bne.n	808c796 <_strtol_r+0xde>
 808c77c:	2e00      	cmp	r6, #0
 808c77e:	f04f 0322 	mov.w	r3, #34	; 0x22
 808c782:	bf14      	ite	ne
 808c784:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808c788:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808c78c:	f8c8 3000 	str.w	r3, [r8]
 808c790:	b92a      	cbnz	r2, 808c79e <_strtol_r+0xe6>
 808c792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c796:	b106      	cbz	r6, 808c79a <_strtol_r+0xe2>
 808c798:	4240      	negs	r0, r0
 808c79a:	b172      	cbz	r2, 808c7ba <_strtol_r+0x102>
 808c79c:	b107      	cbz	r7, 808c7a0 <_strtol_r+0xe8>
 808c79e:	1e69      	subs	r1, r5, #1
 808c7a0:	6011      	str	r1, [r2, #0]
 808c7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c7a6:	2430      	movs	r4, #48	; 0x30
 808c7a8:	2b00      	cmp	r3, #0
 808c7aa:	d1b1      	bne.n	808c710 <_strtol_r+0x58>
 808c7ac:	2308      	movs	r3, #8
 808c7ae:	e7af      	b.n	808c710 <_strtol_r+0x58>
 808c7b0:	230a      	movs	r3, #10
 808c7b2:	e7ad      	b.n	808c710 <_strtol_r+0x58>
 808c7b4:	2c30      	cmp	r4, #48	; 0x30
 808c7b6:	d0a3      	beq.n	808c700 <_strtol_r+0x48>
 808c7b8:	e7aa      	b.n	808c710 <_strtol_r+0x58>
 808c7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c7be:	bf00      	nop
 808c7c0:	200000e0 	.word	0x200000e0

0808c7c4 <strtol>:
 808c7c4:	4613      	mov	r3, r2
 808c7c6:	460a      	mov	r2, r1
 808c7c8:	4601      	mov	r1, r0
 808c7ca:	4802      	ldr	r0, [pc, #8]	; (808c7d4 <strtol+0x10>)
 808c7cc:	6800      	ldr	r0, [r0, #0]
 808c7ce:	f7ff bf73 	b.w	808c6b8 <_strtol_r>
 808c7d2:	bf00      	nop
 808c7d4:	20000144 	.word	0x20000144

0808c7d8 <_strtoul_r>:
 808c7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c7dc:	460e      	mov	r6, r1
 808c7de:	4680      	mov	r8, r0
 808c7e0:	483b      	ldr	r0, [pc, #236]	; (808c8d0 <_strtoul_r+0xf8>)
 808c7e2:	f8d0 9000 	ldr.w	r9, [r0]
 808c7e6:	4635      	mov	r5, r6
 808c7e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 808c7ec:	eb09 0004 	add.w	r0, r9, r4
 808c7f0:	7840      	ldrb	r0, [r0, #1]
 808c7f2:	f000 0008 	and.w	r0, r0, #8
 808c7f6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808c7fa:	b108      	cbz	r0, 808c800 <_strtoul_r+0x28>
 808c7fc:	462e      	mov	r6, r5
 808c7fe:	e7f2      	b.n	808c7e6 <_strtoul_r+0xe>
 808c800:	2c2d      	cmp	r4, #45	; 0x2d
 808c802:	d103      	bne.n	808c80c <_strtoul_r+0x34>
 808c804:	1cb5      	adds	r5, r6, #2
 808c806:	7874      	ldrb	r4, [r6, #1]
 808c808:	2701      	movs	r7, #1
 808c80a:	e003      	b.n	808c814 <_strtoul_r+0x3c>
 808c80c:	2c2b      	cmp	r4, #43	; 0x2b
 808c80e:	bf04      	itt	eq
 808c810:	7874      	ldrbeq	r4, [r6, #1]
 808c812:	1cb5      	addeq	r5, r6, #2
 808c814:	b113      	cbz	r3, 808c81c <_strtoul_r+0x44>
 808c816:	2b10      	cmp	r3, #16
 808c818:	d10a      	bne.n	808c830 <_strtoul_r+0x58>
 808c81a:	e053      	b.n	808c8c4 <_strtoul_r+0xec>
 808c81c:	2c30      	cmp	r4, #48	; 0x30
 808c81e:	d14f      	bne.n	808c8c0 <_strtoul_r+0xe8>
 808c820:	7828      	ldrb	r0, [r5, #0]
 808c822:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808c826:	2858      	cmp	r0, #88	; 0x58
 808c828:	d145      	bne.n	808c8b6 <_strtoul_r+0xde>
 808c82a:	786c      	ldrb	r4, [r5, #1]
 808c82c:	2310      	movs	r3, #16
 808c82e:	3502      	adds	r5, #2
 808c830:	f04f 3cff 	mov.w	ip, #4294967295
 808c834:	fbbc fcf3 	udiv	ip, ip, r3
 808c838:	fb03 fa0c 	mul.w	sl, r3, ip
 808c83c:	2600      	movs	r6, #0
 808c83e:	ea6f 0a0a 	mvn.w	sl, sl
 808c842:	4630      	mov	r0, r6
 808c844:	eb09 0e04 	add.w	lr, r9, r4
 808c848:	f89e e001 	ldrb.w	lr, [lr, #1]
 808c84c:	f01e 0f04 	tst.w	lr, #4
 808c850:	d001      	beq.n	808c856 <_strtoul_r+0x7e>
 808c852:	3c30      	subs	r4, #48	; 0x30
 808c854:	e00b      	b.n	808c86e <_strtoul_r+0x96>
 808c856:	f01e 0e03 	ands.w	lr, lr, #3
 808c85a:	d01a      	beq.n	808c892 <_strtoul_r+0xba>
 808c85c:	f1be 0f01 	cmp.w	lr, #1
 808c860:	bf0c      	ite	eq
 808c862:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808c866:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808c86a:	ebce 0404 	rsb	r4, lr, r4
 808c86e:	42a3      	cmp	r3, r4
 808c870:	dd0f      	ble.n	808c892 <_strtoul_r+0xba>
 808c872:	2e00      	cmp	r6, #0
 808c874:	db08      	blt.n	808c888 <_strtoul_r+0xb0>
 808c876:	4560      	cmp	r0, ip
 808c878:	d806      	bhi.n	808c888 <_strtoul_r+0xb0>
 808c87a:	d101      	bne.n	808c880 <_strtoul_r+0xa8>
 808c87c:	4554      	cmp	r4, sl
 808c87e:	dc03      	bgt.n	808c888 <_strtoul_r+0xb0>
 808c880:	fb03 4000 	mla	r0, r3, r0, r4
 808c884:	2601      	movs	r6, #1
 808c886:	e001      	b.n	808c88c <_strtoul_r+0xb4>
 808c888:	f04f 36ff 	mov.w	r6, #4294967295
 808c88c:	f815 4b01 	ldrb.w	r4, [r5], #1
 808c890:	e7d8      	b.n	808c844 <_strtoul_r+0x6c>
 808c892:	2e00      	cmp	r6, #0
 808c894:	da07      	bge.n	808c8a6 <_strtoul_r+0xce>
 808c896:	2322      	movs	r3, #34	; 0x22
 808c898:	f8c8 3000 	str.w	r3, [r8]
 808c89c:	f04f 30ff 	mov.w	r0, #4294967295
 808c8a0:	b92a      	cbnz	r2, 808c8ae <_strtoul_r+0xd6>
 808c8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c8a6:	b107      	cbz	r7, 808c8aa <_strtoul_r+0xd2>
 808c8a8:	4240      	negs	r0, r0
 808c8aa:	b172      	cbz	r2, 808c8ca <_strtoul_r+0xf2>
 808c8ac:	b106      	cbz	r6, 808c8b0 <_strtoul_r+0xd8>
 808c8ae:	1e69      	subs	r1, r5, #1
 808c8b0:	6011      	str	r1, [r2, #0]
 808c8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c8b6:	2430      	movs	r4, #48	; 0x30
 808c8b8:	2b00      	cmp	r3, #0
 808c8ba:	d1b9      	bne.n	808c830 <_strtoul_r+0x58>
 808c8bc:	2308      	movs	r3, #8
 808c8be:	e7b7      	b.n	808c830 <_strtoul_r+0x58>
 808c8c0:	230a      	movs	r3, #10
 808c8c2:	e7b5      	b.n	808c830 <_strtoul_r+0x58>
 808c8c4:	2c30      	cmp	r4, #48	; 0x30
 808c8c6:	d0ab      	beq.n	808c820 <_strtoul_r+0x48>
 808c8c8:	e7b2      	b.n	808c830 <_strtoul_r+0x58>
 808c8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c8ce:	bf00      	nop
 808c8d0:	200000e0 	.word	0x200000e0

0808c8d4 <strtoul>:
 808c8d4:	4613      	mov	r3, r2
 808c8d6:	460a      	mov	r2, r1
 808c8d8:	4601      	mov	r1, r0
 808c8da:	4802      	ldr	r0, [pc, #8]	; (808c8e4 <strtoul+0x10>)
 808c8dc:	6800      	ldr	r0, [r0, #0]
 808c8de:	f7ff bf7b 	b.w	808c7d8 <_strtoul_r>
 808c8e2:	bf00      	nop
 808c8e4:	20000144 	.word	0x20000144

0808c8e8 <__get_current_time_locale>:
 808c8e8:	4b04      	ldr	r3, [pc, #16]	; (808c8fc <__get_current_time_locale+0x14>)
 808c8ea:	4a05      	ldr	r2, [pc, #20]	; (808c900 <__get_current_time_locale+0x18>)
 808c8ec:	6818      	ldr	r0, [r3, #0]
 808c8ee:	4b05      	ldr	r3, [pc, #20]	; (808c904 <__get_current_time_locale+0x1c>)
 808c8f0:	2800      	cmp	r0, #0
 808c8f2:	bf14      	ite	ne
 808c8f4:	4610      	movne	r0, r2
 808c8f6:	4618      	moveq	r0, r3
 808c8f8:	4770      	bx	lr
 808c8fa:	bf00      	nop
 808c8fc:	20001180 	.word	0x20001180
 808c900:	20001184 	.word	0x20001184
 808c904:	08090bdc 	.word	0x08090bdc

0808c908 <__tzcalc_limits>:
 808c908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c90c:	4604      	mov	r4, r0
 808c90e:	f000 fd91 	bl	808d434 <__gettzinfo>
 808c912:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808c916:	429c      	cmp	r4, r3
 808c918:	f340 8096 	ble.w	808ca48 <__tzcalc_limits+0x140>
 808c91c:	f240 156d 	movw	r5, #365	; 0x16d
 808c920:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808c924:	18e3      	adds	r3, r4, r3
 808c926:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808c92a:	109b      	asrs	r3, r3, #2
 808c92c:	fb05 3502 	mla	r5, r5, r2, r3
 808c930:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808c934:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808c938:	fb92 f3f3 	sdiv	r3, r2, r3
 808c93c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808c940:	442b      	add	r3, r5
 808c942:	18a5      	adds	r5, r4, r2
 808c944:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808c948:	fb94 f7f2 	sdiv	r7, r4, r2
 808c94c:	fb95 f5f2 	sdiv	r5, r5, r2
 808c950:	fb02 4717 	mls	r7, r2, r7, r4
 808c954:	441d      	add	r5, r3
 808c956:	2364      	movs	r3, #100	; 0x64
 808c958:	fb94 f6f3 	sdiv	r6, r4, r3
 808c95c:	fab7 fe87 	clz	lr, r7
 808c960:	4601      	mov	r1, r0
 808c962:	fb03 4616 	mls	r6, r3, r6, r4
 808c966:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808c96a:	9301      	str	r3, [sp, #4]
 808c96c:	f004 0303 	and.w	r3, r4, #3
 808c970:	6044      	str	r4, [r0, #4]
 808c972:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808c976:	9300      	str	r3, [sp, #0]
 808c978:	f04f 0c07 	mov.w	ip, #7
 808c97c:	7a0b      	ldrb	r3, [r1, #8]
 808c97e:	2b4a      	cmp	r3, #74	; 0x4a
 808c980:	d10e      	bne.n	808c9a0 <__tzcalc_limits+0x98>
 808c982:	694b      	ldr	r3, [r1, #20]
 808c984:	9a00      	ldr	r2, [sp, #0]
 808c986:	18ec      	adds	r4, r5, r3
 808c988:	b902      	cbnz	r2, 808c98c <__tzcalc_limits+0x84>
 808c98a:	b906      	cbnz	r6, 808c98e <__tzcalc_limits+0x86>
 808c98c:	b927      	cbnz	r7, 808c998 <__tzcalc_limits+0x90>
 808c98e:	2b3b      	cmp	r3, #59	; 0x3b
 808c990:	bfd4      	ite	le
 808c992:	2300      	movle	r3, #0
 808c994:	2301      	movgt	r3, #1
 808c996:	e000      	b.n	808c99a <__tzcalc_limits+0x92>
 808c998:	2300      	movs	r3, #0
 808c99a:	4423      	add	r3, r4
 808c99c:	3b01      	subs	r3, #1
 808c99e:	e03f      	b.n	808ca20 <__tzcalc_limits+0x118>
 808c9a0:	2b44      	cmp	r3, #68	; 0x44
 808c9a2:	d102      	bne.n	808c9aa <__tzcalc_limits+0xa2>
 808c9a4:	694b      	ldr	r3, [r1, #20]
 808c9a6:	442b      	add	r3, r5
 808c9a8:	e03a      	b.n	808ca20 <__tzcalc_limits+0x118>
 808c9aa:	9b00      	ldr	r3, [sp, #0]
 808c9ac:	b92b      	cbnz	r3, 808c9ba <__tzcalc_limits+0xb2>
 808c9ae:	2e00      	cmp	r6, #0
 808c9b0:	bf0c      	ite	eq
 808c9b2:	46f0      	moveq	r8, lr
 808c9b4:	f04f 0801 	movne.w	r8, #1
 808c9b8:	e000      	b.n	808c9bc <__tzcalc_limits+0xb4>
 808c9ba:	46f0      	mov	r8, lr
 808c9bc:	46a9      	mov	r9, r5
 808c9be:	4b24      	ldr	r3, [pc, #144]	; (808ca50 <__tzcalc_limits+0x148>)
 808c9c0:	2230      	movs	r2, #48	; 0x30
 808c9c2:	fb02 3808 	mla	r8, r2, r8, r3
 808c9c6:	68cc      	ldr	r4, [r1, #12]
 808c9c8:	f1a8 0a04 	sub.w	sl, r8, #4
 808c9cc:	2301      	movs	r3, #1
 808c9ce:	42a3      	cmp	r3, r4
 808c9d0:	da04      	bge.n	808c9dc <__tzcalc_limits+0xd4>
 808c9d2:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808c9d6:	3301      	adds	r3, #1
 808c9d8:	44d9      	add	r9, fp
 808c9da:	e7f8      	b.n	808c9ce <__tzcalc_limits+0xc6>
 808c9dc:	f109 0304 	add.w	r3, r9, #4
 808c9e0:	fb93 fbfc 	sdiv	fp, r3, ip
 808c9e4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808c9e8:	ebca 0a03 	rsb	sl, sl, r3
 808c9ec:	694b      	ldr	r3, [r1, #20]
 808c9ee:	2c01      	cmp	r4, #1
 808c9f0:	bfb8      	it	lt
 808c9f2:	2401      	movlt	r4, #1
 808c9f4:	ebb3 0a0a 	subs.w	sl, r3, sl
 808c9f8:	690b      	ldr	r3, [r1, #16]
 808c9fa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808c9fe:	f103 33ff 	add.w	r3, r3, #4294967295
 808ca02:	f104 34ff 	add.w	r4, r4, #4294967295
 808ca06:	bf48      	it	mi
 808ca08:	f10a 0a07 	addmi.w	sl, sl, #7
 808ca0c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808ca10:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808ca14:	4453      	add	r3, sl
 808ca16:	42a3      	cmp	r3, r4
 808ca18:	db01      	blt.n	808ca1e <__tzcalc_limits+0x116>
 808ca1a:	3b07      	subs	r3, #7
 808ca1c:	e7fb      	b.n	808ca16 <__tzcalc_limits+0x10e>
 808ca1e:	444b      	add	r3, r9
 808ca20:	698c      	ldr	r4, [r1, #24]
 808ca22:	4a0c      	ldr	r2, [pc, #48]	; (808ca54 <__tzcalc_limits+0x14c>)
 808ca24:	fb02 4303 	mla	r3, r2, r3, r4
 808ca28:	6a0c      	ldr	r4, [r1, #32]
 808ca2a:	4423      	add	r3, r4
 808ca2c:	f841 3f1c 	str.w	r3, [r1, #28]!
 808ca30:	9b01      	ldr	r3, [sp, #4]
 808ca32:	4299      	cmp	r1, r3
 808ca34:	d1a2      	bne.n	808c97c <__tzcalc_limits+0x74>
 808ca36:	69c3      	ldr	r3, [r0, #28]
 808ca38:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808ca3a:	4293      	cmp	r3, r2
 808ca3c:	bfac      	ite	ge
 808ca3e:	2300      	movge	r3, #0
 808ca40:	2301      	movlt	r3, #1
 808ca42:	6003      	str	r3, [r0, #0]
 808ca44:	2001      	movs	r0, #1
 808ca46:	e000      	b.n	808ca4a <__tzcalc_limits+0x142>
 808ca48:	2000      	movs	r0, #0
 808ca4a:	b003      	add	sp, #12
 808ca4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ca50:	080909a0 	.word	0x080909a0
 808ca54:	00015180 	.word	0x00015180

0808ca58 <__tz_lock>:
 808ca58:	4770      	bx	lr

0808ca5a <__tz_unlock>:
 808ca5a:	4770      	bx	lr

0808ca5c <_tzset_unlocked>:
 808ca5c:	4b01      	ldr	r3, [pc, #4]	; (808ca64 <_tzset_unlocked+0x8>)
 808ca5e:	6818      	ldr	r0, [r3, #0]
 808ca60:	f000 b802 	b.w	808ca68 <_tzset_unlocked_r>
 808ca64:	20000144 	.word	0x20000144

0808ca68 <_tzset_unlocked_r>:
 808ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ca6c:	b08d      	sub	sp, #52	; 0x34
 808ca6e:	4607      	mov	r7, r0
 808ca70:	f000 fce0 	bl	808d434 <__gettzinfo>
 808ca74:	49b0      	ldr	r1, [pc, #704]	; (808cd38 <_tzset_unlocked_r+0x2d0>)
 808ca76:	4604      	mov	r4, r0
 808ca78:	4638      	mov	r0, r7
 808ca7a:	f000 fcd3 	bl	808d424 <_getenv_r>
 808ca7e:	4eaf      	ldr	r6, [pc, #700]	; (808cd3c <_tzset_unlocked_r+0x2d4>)
 808ca80:	4605      	mov	r5, r0
 808ca82:	b960      	cbnz	r0, 808ca9e <_tzset_unlocked_r+0x36>
 808ca84:	4bae      	ldr	r3, [pc, #696]	; (808cd40 <_tzset_unlocked_r+0x2d8>)
 808ca86:	4aaf      	ldr	r2, [pc, #700]	; (808cd44 <_tzset_unlocked_r+0x2dc>)
 808ca88:	6018      	str	r0, [r3, #0]
 808ca8a:	4baf      	ldr	r3, [pc, #700]	; (808cd48 <_tzset_unlocked_r+0x2e0>)
 808ca8c:	6018      	str	r0, [r3, #0]
 808ca8e:	4baf      	ldr	r3, [pc, #700]	; (808cd4c <_tzset_unlocked_r+0x2e4>)
 808ca90:	6830      	ldr	r0, [r6, #0]
 808ca92:	601a      	str	r2, [r3, #0]
 808ca94:	605a      	str	r2, [r3, #4]
 808ca96:	f7fa ff9f 	bl	80879d8 <free>
 808ca9a:	6035      	str	r5, [r6, #0]
 808ca9c:	e148      	b.n	808cd30 <_tzset_unlocked_r+0x2c8>
 808ca9e:	6831      	ldr	r1, [r6, #0]
 808caa0:	b979      	cbnz	r1, 808cac2 <_tzset_unlocked_r+0x5a>
 808caa2:	6830      	ldr	r0, [r6, #0]
 808caa4:	f7fa ff98 	bl	80879d8 <free>
 808caa8:	4628      	mov	r0, r5
 808caaa:	f7fe ff8f 	bl	808b9cc <strlen>
 808caae:	1c41      	adds	r1, r0, #1
 808cab0:	4638      	mov	r0, r7
 808cab2:	f7fa ffd1 	bl	8087a58 <_malloc_r>
 808cab6:	6030      	str	r0, [r6, #0]
 808cab8:	b148      	cbz	r0, 808cace <_tzset_unlocked_r+0x66>
 808caba:	4629      	mov	r1, r5
 808cabc:	f7fe fa6a 	bl	808af94 <strcpy>
 808cac0:	e005      	b.n	808cace <_tzset_unlocked_r+0x66>
 808cac2:	f7fe fa5d 	bl	808af80 <strcmp>
 808cac6:	2800      	cmp	r0, #0
 808cac8:	f000 8132 	beq.w	808cd30 <_tzset_unlocked_r+0x2c8>
 808cacc:	e7e9      	b.n	808caa2 <_tzset_unlocked_r+0x3a>
 808cace:	782b      	ldrb	r3, [r5, #0]
 808cad0:	ae0a      	add	r6, sp, #40	; 0x28
 808cad2:	2b3a      	cmp	r3, #58	; 0x3a
 808cad4:	bf08      	it	eq
 808cad6:	3501      	addeq	r5, #1
 808cad8:	4633      	mov	r3, r6
 808cada:	4a9d      	ldr	r2, [pc, #628]	; (808cd50 <_tzset_unlocked_r+0x2e8>)
 808cadc:	499d      	ldr	r1, [pc, #628]	; (808cd54 <_tzset_unlocked_r+0x2ec>)
 808cade:	4628      	mov	r0, r5
 808cae0:	f7fa ff9a 	bl	8087a18 <siscanf>
 808cae4:	2800      	cmp	r0, #0
 808cae6:	f340 8123 	ble.w	808cd30 <_tzset_unlocked_r+0x2c8>
 808caea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808caec:	18ef      	adds	r7, r5, r3
 808caee:	5ceb      	ldrb	r3, [r5, r3]
 808caf0:	2b2d      	cmp	r3, #45	; 0x2d
 808caf2:	d103      	bne.n	808cafc <_tzset_unlocked_r+0x94>
 808caf4:	3701      	adds	r7, #1
 808caf6:	f04f 35ff 	mov.w	r5, #4294967295
 808cafa:	e003      	b.n	808cb04 <_tzset_unlocked_r+0x9c>
 808cafc:	2b2b      	cmp	r3, #43	; 0x2b
 808cafe:	bf08      	it	eq
 808cb00:	3701      	addeq	r7, #1
 808cb02:	2501      	movs	r5, #1
 808cb04:	f10d 0a20 	add.w	sl, sp, #32
 808cb08:	f10d 0b1e 	add.w	fp, sp, #30
 808cb0c:	f04f 0800 	mov.w	r8, #0
 808cb10:	9603      	str	r6, [sp, #12]
 808cb12:	f8cd a008 	str.w	sl, [sp, #8]
 808cb16:	9601      	str	r6, [sp, #4]
 808cb18:	f8cd b000 	str.w	fp, [sp]
 808cb1c:	4633      	mov	r3, r6
 808cb1e:	aa07      	add	r2, sp, #28
 808cb20:	498d      	ldr	r1, [pc, #564]	; (808cd58 <_tzset_unlocked_r+0x2f0>)
 808cb22:	4638      	mov	r0, r7
 808cb24:	f8ad 801e 	strh.w	r8, [sp, #30]
 808cb28:	f8ad 8020 	strh.w	r8, [sp, #32]
 808cb2c:	f7fa ff74 	bl	8087a18 <siscanf>
 808cb30:	4540      	cmp	r0, r8
 808cb32:	f340 80fd 	ble.w	808cd30 <_tzset_unlocked_r+0x2c8>
 808cb36:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808cb3a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808cb3e:	213c      	movs	r1, #60	; 0x3c
 808cb40:	fb01 3302 	mla	r3, r1, r2, r3
 808cb44:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808cb48:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808cb4c:	fb01 3302 	mla	r3, r1, r2, r3
 808cb50:	435d      	muls	r5, r3
 808cb52:	4b7f      	ldr	r3, [pc, #508]	; (808cd50 <_tzset_unlocked_r+0x2e8>)
 808cb54:	6225      	str	r5, [r4, #32]
 808cb56:	4d7d      	ldr	r5, [pc, #500]	; (808cd4c <_tzset_unlocked_r+0x2e4>)
 808cb58:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808cd64 <_tzset_unlocked_r+0x2fc>
 808cb5c:	602b      	str	r3, [r5, #0]
 808cb5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808cb60:	464a      	mov	r2, r9
 808cb62:	441f      	add	r7, r3
 808cb64:	497b      	ldr	r1, [pc, #492]	; (808cd54 <_tzset_unlocked_r+0x2ec>)
 808cb66:	4633      	mov	r3, r6
 808cb68:	4638      	mov	r0, r7
 808cb6a:	f7fa ff55 	bl	8087a18 <siscanf>
 808cb6e:	4540      	cmp	r0, r8
 808cb70:	dc08      	bgt.n	808cb84 <_tzset_unlocked_r+0x11c>
 808cb72:	682b      	ldr	r3, [r5, #0]
 808cb74:	6a22      	ldr	r2, [r4, #32]
 808cb76:	606b      	str	r3, [r5, #4]
 808cb78:	4b71      	ldr	r3, [pc, #452]	; (808cd40 <_tzset_unlocked_r+0x2d8>)
 808cb7a:	601a      	str	r2, [r3, #0]
 808cb7c:	4b72      	ldr	r3, [pc, #456]	; (808cd48 <_tzset_unlocked_r+0x2e0>)
 808cb7e:	f8c3 8000 	str.w	r8, [r3]
 808cb82:	e0d5      	b.n	808cd30 <_tzset_unlocked_r+0x2c8>
 808cb84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808cb86:	f8c5 9004 	str.w	r9, [r5, #4]
 808cb8a:	18fd      	adds	r5, r7, r3
 808cb8c:	5cfb      	ldrb	r3, [r7, r3]
 808cb8e:	2b2d      	cmp	r3, #45	; 0x2d
 808cb90:	d103      	bne.n	808cb9a <_tzset_unlocked_r+0x132>
 808cb92:	3501      	adds	r5, #1
 808cb94:	f04f 37ff 	mov.w	r7, #4294967295
 808cb98:	e003      	b.n	808cba2 <_tzset_unlocked_r+0x13a>
 808cb9a:	2b2b      	cmp	r3, #43	; 0x2b
 808cb9c:	bf08      	it	eq
 808cb9e:	3501      	addeq	r5, #1
 808cba0:	2701      	movs	r7, #1
 808cba2:	2300      	movs	r3, #0
 808cba4:	f8ad 301c 	strh.w	r3, [sp, #28]
 808cba8:	f8ad 301e 	strh.w	r3, [sp, #30]
 808cbac:	f8ad 3020 	strh.w	r3, [sp, #32]
 808cbb0:	930a      	str	r3, [sp, #40]	; 0x28
 808cbb2:	9603      	str	r6, [sp, #12]
 808cbb4:	f8cd a008 	str.w	sl, [sp, #8]
 808cbb8:	9601      	str	r6, [sp, #4]
 808cbba:	f8cd b000 	str.w	fp, [sp]
 808cbbe:	4633      	mov	r3, r6
 808cbc0:	aa07      	add	r2, sp, #28
 808cbc2:	4965      	ldr	r1, [pc, #404]	; (808cd58 <_tzset_unlocked_r+0x2f0>)
 808cbc4:	4628      	mov	r0, r5
 808cbc6:	f7fa ff27 	bl	8087a18 <siscanf>
 808cbca:	2800      	cmp	r0, #0
 808cbcc:	dc04      	bgt.n	808cbd8 <_tzset_unlocked_r+0x170>
 808cbce:	6a23      	ldr	r3, [r4, #32]
 808cbd0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808cbd4:	63e3      	str	r3, [r4, #60]	; 0x3c
 808cbd6:	e00e      	b.n	808cbf6 <_tzset_unlocked_r+0x18e>
 808cbd8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808cbdc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808cbe0:	213c      	movs	r1, #60	; 0x3c
 808cbe2:	fb01 3302 	mla	r3, r1, r2, r3
 808cbe6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808cbea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808cbee:	fb01 3302 	mla	r3, r1, r2, r3
 808cbf2:	435f      	muls	r7, r3
 808cbf4:	63e7      	str	r7, [r4, #60]	; 0x3c
 808cbf6:	4627      	mov	r7, r4
 808cbf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808cbfa:	f04f 0900 	mov.w	r9, #0
 808cbfe:	441d      	add	r5, r3
 808cc00:	782b      	ldrb	r3, [r5, #0]
 808cc02:	2b2c      	cmp	r3, #44	; 0x2c
 808cc04:	bf08      	it	eq
 808cc06:	3501      	addeq	r5, #1
 808cc08:	f895 8000 	ldrb.w	r8, [r5]
 808cc0c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808cc10:	d126      	bne.n	808cc60 <_tzset_unlocked_r+0x1f8>
 808cc12:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808cc16:	9302      	str	r3, [sp, #8]
 808cc18:	ab09      	add	r3, sp, #36	; 0x24
 808cc1a:	9300      	str	r3, [sp, #0]
 808cc1c:	9603      	str	r6, [sp, #12]
 808cc1e:	9601      	str	r6, [sp, #4]
 808cc20:	4633      	mov	r3, r6
 808cc22:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808cc26:	494d      	ldr	r1, [pc, #308]	; (808cd5c <_tzset_unlocked_r+0x2f4>)
 808cc28:	4628      	mov	r0, r5
 808cc2a:	f7fa fef5 	bl	8087a18 <siscanf>
 808cc2e:	2803      	cmp	r0, #3
 808cc30:	d17e      	bne.n	808cd30 <_tzset_unlocked_r+0x2c8>
 808cc32:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808cc36:	1e4b      	subs	r3, r1, #1
 808cc38:	2b0b      	cmp	r3, #11
 808cc3a:	d879      	bhi.n	808cd30 <_tzset_unlocked_r+0x2c8>
 808cc3c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808cc40:	1e53      	subs	r3, r2, #1
 808cc42:	2b04      	cmp	r3, #4
 808cc44:	d874      	bhi.n	808cd30 <_tzset_unlocked_r+0x2c8>
 808cc46:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808cc4a:	2b06      	cmp	r3, #6
 808cc4c:	d870      	bhi.n	808cd30 <_tzset_unlocked_r+0x2c8>
 808cc4e:	f887 8008 	strb.w	r8, [r7, #8]
 808cc52:	60f9      	str	r1, [r7, #12]
 808cc54:	613a      	str	r2, [r7, #16]
 808cc56:	617b      	str	r3, [r7, #20]
 808cc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808cc5a:	eb05 0803 	add.w	r8, r5, r3
 808cc5e:	e02a      	b.n	808ccb6 <_tzset_unlocked_r+0x24e>
 808cc60:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808cc64:	bf06      	itte	eq
 808cc66:	4643      	moveq	r3, r8
 808cc68:	3501      	addeq	r5, #1
 808cc6a:	2344      	movne	r3, #68	; 0x44
 808cc6c:	220a      	movs	r2, #10
 808cc6e:	a90b      	add	r1, sp, #44	; 0x2c
 808cc70:	4628      	mov	r0, r5
 808cc72:	9305      	str	r3, [sp, #20]
 808cc74:	f7ff fe2e 	bl	808c8d4 <strtoul>
 808cc78:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808cc7c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808cc80:	4545      	cmp	r5, r8
 808cc82:	9b05      	ldr	r3, [sp, #20]
 808cc84:	d114      	bne.n	808ccb0 <_tzset_unlocked_r+0x248>
 808cc86:	234d      	movs	r3, #77	; 0x4d
 808cc88:	f1b9 0f00 	cmp.w	r9, #0
 808cc8c:	d107      	bne.n	808cc9e <_tzset_unlocked_r+0x236>
 808cc8e:	7223      	strb	r3, [r4, #8]
 808cc90:	2303      	movs	r3, #3
 808cc92:	60e3      	str	r3, [r4, #12]
 808cc94:	2302      	movs	r3, #2
 808cc96:	6123      	str	r3, [r4, #16]
 808cc98:	f8c4 9014 	str.w	r9, [r4, #20]
 808cc9c:	e00b      	b.n	808ccb6 <_tzset_unlocked_r+0x24e>
 808cc9e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808cca2:	230b      	movs	r3, #11
 808cca4:	62a3      	str	r3, [r4, #40]	; 0x28
 808cca6:	2301      	movs	r3, #1
 808cca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 808ccaa:	2300      	movs	r3, #0
 808ccac:	6323      	str	r3, [r4, #48]	; 0x30
 808ccae:	e002      	b.n	808ccb6 <_tzset_unlocked_r+0x24e>
 808ccb0:	b280      	uxth	r0, r0
 808ccb2:	723b      	strb	r3, [r7, #8]
 808ccb4:	6178      	str	r0, [r7, #20]
 808ccb6:	2302      	movs	r3, #2
 808ccb8:	f8ad 301c 	strh.w	r3, [sp, #28]
 808ccbc:	2300      	movs	r3, #0
 808ccbe:	f8ad 301e 	strh.w	r3, [sp, #30]
 808ccc2:	f8ad 3020 	strh.w	r3, [sp, #32]
 808ccc6:	930a      	str	r3, [sp, #40]	; 0x28
 808ccc8:	f898 3000 	ldrb.w	r3, [r8]
 808cccc:	2b2f      	cmp	r3, #47	; 0x2f
 808ccce:	d10b      	bne.n	808cce8 <_tzset_unlocked_r+0x280>
 808ccd0:	9603      	str	r6, [sp, #12]
 808ccd2:	f8cd a008 	str.w	sl, [sp, #8]
 808ccd6:	9601      	str	r6, [sp, #4]
 808ccd8:	f8cd b000 	str.w	fp, [sp]
 808ccdc:	4633      	mov	r3, r6
 808ccde:	aa07      	add	r2, sp, #28
 808cce0:	491f      	ldr	r1, [pc, #124]	; (808cd60 <_tzset_unlocked_r+0x2f8>)
 808cce2:	4640      	mov	r0, r8
 808cce4:	f7fa fe98 	bl	8087a18 <siscanf>
 808cce8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808ccec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808ccf0:	213c      	movs	r1, #60	; 0x3c
 808ccf2:	fb01 3302 	mla	r3, r1, r2, r3
 808ccf6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808ccfa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808ccfe:	fb01 3302 	mla	r3, r1, r2, r3
 808cd02:	61bb      	str	r3, [r7, #24]
 808cd04:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808cd06:	f109 0901 	add.w	r9, r9, #1
 808cd0a:	f1b9 0f02 	cmp.w	r9, #2
 808cd0e:	4445      	add	r5, r8
 808cd10:	f107 071c 	add.w	r7, r7, #28
 808cd14:	f47f af74 	bne.w	808cc00 <_tzset_unlocked_r+0x198>
 808cd18:	6860      	ldr	r0, [r4, #4]
 808cd1a:	f7ff fdf5 	bl	808c908 <__tzcalc_limits>
 808cd1e:	6a22      	ldr	r2, [r4, #32]
 808cd20:	4b07      	ldr	r3, [pc, #28]	; (808cd40 <_tzset_unlocked_r+0x2d8>)
 808cd22:	601a      	str	r2, [r3, #0]
 808cd24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808cd26:	1a9b      	subs	r3, r3, r2
 808cd28:	4a07      	ldr	r2, [pc, #28]	; (808cd48 <_tzset_unlocked_r+0x2e0>)
 808cd2a:	bf18      	it	ne
 808cd2c:	2301      	movne	r3, #1
 808cd2e:	6013      	str	r3, [r2, #0]
 808cd30:	b00d      	add	sp, #52	; 0x34
 808cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cd36:	bf00      	nop
 808cd38:	08090cd8 	.word	0x08090cd8
 808cd3c:	20001298 	.word	0x20001298
 808cd40:	200012a0 	.word	0x200012a0
 808cd44:	08090cdb 	.word	0x08090cdb
 808cd48:	2000129c 	.word	0x2000129c
 808cd4c:	20000180 	.word	0x20000180
 808cd50:	2000128b 	.word	0x2000128b
 808cd54:	08090cdf 	.word	0x08090cdf
 808cd58:	08090d02 	.word	0x08090d02
 808cd5c:	08090cee 	.word	0x08090cee
 808cd60:	08090d01 	.word	0x08090d01
 808cd64:	20001280 	.word	0x20001280

0808cd68 <abs>:
 808cd68:	2800      	cmp	r0, #0
 808cd6a:	bfb8      	it	lt
 808cd6c:	4240      	neglt	r0, r0
 808cd6e:	4770      	bx	lr

0808cd70 <rshift>:
 808cd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 808cd72:	6906      	ldr	r6, [r0, #16]
 808cd74:	114b      	asrs	r3, r1, #5
 808cd76:	42b3      	cmp	r3, r6
 808cd78:	f100 0514 	add.w	r5, r0, #20
 808cd7c:	da27      	bge.n	808cdce <rshift+0x5e>
 808cd7e:	f011 011f 	ands.w	r1, r1, #31
 808cd82:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 808cd86:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808cd8a:	d101      	bne.n	808cd90 <rshift+0x20>
 808cd8c:	4629      	mov	r1, r5
 808cd8e:	e016      	b.n	808cdbe <rshift+0x4e>
 808cd90:	1d14      	adds	r4, r2, #4
 808cd92:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 808cd96:	462b      	mov	r3, r5
 808cd98:	f1c1 0e20 	rsb	lr, r1, #32
 808cd9c:	40ca      	lsrs	r2, r1
 808cd9e:	42b4      	cmp	r4, r6
 808cda0:	d209      	bcs.n	808cdb6 <rshift+0x46>
 808cda2:	6827      	ldr	r7, [r4, #0]
 808cda4:	fa07 f70e 	lsl.w	r7, r7, lr
 808cda8:	433a      	orrs	r2, r7
 808cdaa:	f843 2b04 	str.w	r2, [r3], #4
 808cdae:	f854 2b04 	ldr.w	r2, [r4], #4
 808cdb2:	40ca      	lsrs	r2, r1
 808cdb4:	e7f3      	b.n	808cd9e <rshift+0x2e>
 808cdb6:	601a      	str	r2, [r3, #0]
 808cdb8:	b152      	cbz	r2, 808cdd0 <rshift+0x60>
 808cdba:	3304      	adds	r3, #4
 808cdbc:	e008      	b.n	808cdd0 <rshift+0x60>
 808cdbe:	42b2      	cmp	r2, r6
 808cdc0:	460b      	mov	r3, r1
 808cdc2:	d205      	bcs.n	808cdd0 <rshift+0x60>
 808cdc4:	f852 3b04 	ldr.w	r3, [r2], #4
 808cdc8:	f841 3b04 	str.w	r3, [r1], #4
 808cdcc:	e7f7      	b.n	808cdbe <rshift+0x4e>
 808cdce:	462b      	mov	r3, r5
 808cdd0:	1b5b      	subs	r3, r3, r5
 808cdd2:	109b      	asrs	r3, r3, #2
 808cdd4:	6103      	str	r3, [r0, #16]
 808cdd6:	b903      	cbnz	r3, 808cdda <rshift+0x6a>
 808cdd8:	6143      	str	r3, [r0, #20]
 808cdda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808cddc <__hexdig_fun>:
 808cddc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808cde0:	2b09      	cmp	r3, #9
 808cde2:	d801      	bhi.n	808cde8 <__hexdig_fun+0xc>
 808cde4:	3820      	subs	r0, #32
 808cde6:	e00a      	b.n	808cdfe <__hexdig_fun+0x22>
 808cde8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808cdec:	2b05      	cmp	r3, #5
 808cdee:	d801      	bhi.n	808cdf4 <__hexdig_fun+0x18>
 808cdf0:	3847      	subs	r0, #71	; 0x47
 808cdf2:	e004      	b.n	808cdfe <__hexdig_fun+0x22>
 808cdf4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808cdf8:	2b05      	cmp	r3, #5
 808cdfa:	d802      	bhi.n	808ce02 <__hexdig_fun+0x26>
 808cdfc:	3827      	subs	r0, #39	; 0x27
 808cdfe:	b2c0      	uxtb	r0, r0
 808ce00:	4770      	bx	lr
 808ce02:	2000      	movs	r0, #0
 808ce04:	4770      	bx	lr

0808ce06 <__gethex>:
 808ce06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ce0a:	b08b      	sub	sp, #44	; 0x2c
 808ce0c:	468a      	mov	sl, r1
 808ce0e:	4690      	mov	r8, r2
 808ce10:	9306      	str	r3, [sp, #24]
 808ce12:	9002      	str	r0, [sp, #8]
 808ce14:	f7fe f858 	bl	808aec8 <_localeconv_r>
 808ce18:	6803      	ldr	r3, [r0, #0]
 808ce1a:	f04f 0b00 	mov.w	fp, #0
 808ce1e:	4618      	mov	r0, r3
 808ce20:	9303      	str	r3, [sp, #12]
 808ce22:	f7fe fdd3 	bl	808b9cc <strlen>
 808ce26:	9b03      	ldr	r3, [sp, #12]
 808ce28:	9001      	str	r0, [sp, #4]
 808ce2a:	4403      	add	r3, r0
 808ce2c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808ce30:	9307      	str	r3, [sp, #28]
 808ce32:	f8da 3000 	ldr.w	r3, [sl]
 808ce36:	3302      	adds	r3, #2
 808ce38:	461f      	mov	r7, r3
 808ce3a:	f813 0b01 	ldrb.w	r0, [r3], #1
 808ce3e:	2830      	cmp	r0, #48	; 0x30
 808ce40:	d102      	bne.n	808ce48 <__gethex+0x42>
 808ce42:	f10b 0b01 	add.w	fp, fp, #1
 808ce46:	e7f7      	b.n	808ce38 <__gethex+0x32>
 808ce48:	f7ff ffc8 	bl	808cddc <__hexdig_fun>
 808ce4c:	4604      	mov	r4, r0
 808ce4e:	b9e0      	cbnz	r0, 808ce8a <__gethex+0x84>
 808ce50:	9a01      	ldr	r2, [sp, #4]
 808ce52:	9903      	ldr	r1, [sp, #12]
 808ce54:	4638      	mov	r0, r7
 808ce56:	f7fe fdc1 	bl	808b9dc <strncmp>
 808ce5a:	2800      	cmp	r0, #0
 808ce5c:	d134      	bne.n	808cec8 <__gethex+0xc2>
 808ce5e:	9b01      	ldr	r3, [sp, #4]
 808ce60:	5cf8      	ldrb	r0, [r7, r3]
 808ce62:	18fe      	adds	r6, r7, r3
 808ce64:	f7ff ffba 	bl	808cddc <__hexdig_fun>
 808ce68:	b380      	cbz	r0, 808cecc <__gethex+0xc6>
 808ce6a:	4633      	mov	r3, r6
 808ce6c:	7818      	ldrb	r0, [r3, #0]
 808ce6e:	461f      	mov	r7, r3
 808ce70:	2830      	cmp	r0, #48	; 0x30
 808ce72:	f103 0301 	add.w	r3, r3, #1
 808ce76:	d0f9      	beq.n	808ce6c <__gethex+0x66>
 808ce78:	f7ff ffb0 	bl	808cddc <__hexdig_fun>
 808ce7c:	fab0 f580 	clz	r5, r0
 808ce80:	4634      	mov	r4, r6
 808ce82:	096d      	lsrs	r5, r5, #5
 808ce84:	f04f 0b01 	mov.w	fp, #1
 808ce88:	e001      	b.n	808ce8e <__gethex+0x88>
 808ce8a:	2500      	movs	r5, #0
 808ce8c:	462c      	mov	r4, r5
 808ce8e:	463a      	mov	r2, r7
 808ce90:	4616      	mov	r6, r2
 808ce92:	7830      	ldrb	r0, [r6, #0]
 808ce94:	3201      	adds	r2, #1
 808ce96:	f7ff ffa1 	bl	808cddc <__hexdig_fun>
 808ce9a:	2800      	cmp	r0, #0
 808ce9c:	d1f8      	bne.n	808ce90 <__gethex+0x8a>
 808ce9e:	9a01      	ldr	r2, [sp, #4]
 808cea0:	9903      	ldr	r1, [sp, #12]
 808cea2:	4630      	mov	r0, r6
 808cea4:	f7fe fd9a 	bl	808b9dc <strncmp>
 808cea8:	b950      	cbnz	r0, 808cec0 <__gethex+0xba>
 808ceaa:	b954      	cbnz	r4, 808cec2 <__gethex+0xbc>
 808ceac:	9b01      	ldr	r3, [sp, #4]
 808ceae:	18f4      	adds	r4, r6, r3
 808ceb0:	4622      	mov	r2, r4
 808ceb2:	4616      	mov	r6, r2
 808ceb4:	7830      	ldrb	r0, [r6, #0]
 808ceb6:	3201      	adds	r2, #1
 808ceb8:	f7ff ff90 	bl	808cddc <__hexdig_fun>
 808cebc:	2800      	cmp	r0, #0
 808cebe:	d1f8      	bne.n	808ceb2 <__gethex+0xac>
 808cec0:	b134      	cbz	r4, 808ced0 <__gethex+0xca>
 808cec2:	1ba4      	subs	r4, r4, r6
 808cec4:	00a4      	lsls	r4, r4, #2
 808cec6:	e003      	b.n	808ced0 <__gethex+0xca>
 808cec8:	463e      	mov	r6, r7
 808ceca:	e000      	b.n	808cece <__gethex+0xc8>
 808cecc:	4604      	mov	r4, r0
 808cece:	2501      	movs	r5, #1
 808ced0:	7833      	ldrb	r3, [r6, #0]
 808ced2:	2b50      	cmp	r3, #80	; 0x50
 808ced4:	d001      	beq.n	808ceda <__gethex+0xd4>
 808ced6:	2b70      	cmp	r3, #112	; 0x70
 808ced8:	d12a      	bne.n	808cf30 <__gethex+0x12a>
 808ceda:	7873      	ldrb	r3, [r6, #1]
 808cedc:	2b2b      	cmp	r3, #43	; 0x2b
 808cede:	d008      	beq.n	808cef2 <__gethex+0xec>
 808cee0:	2b2d      	cmp	r3, #45	; 0x2d
 808cee2:	d003      	beq.n	808ceec <__gethex+0xe6>
 808cee4:	1c71      	adds	r1, r6, #1
 808cee6:	f04f 0900 	mov.w	r9, #0
 808ceea:	e005      	b.n	808cef8 <__gethex+0xf2>
 808ceec:	f04f 0901 	mov.w	r9, #1
 808cef0:	e001      	b.n	808cef6 <__gethex+0xf0>
 808cef2:	f04f 0900 	mov.w	r9, #0
 808cef6:	1cb1      	adds	r1, r6, #2
 808cef8:	7808      	ldrb	r0, [r1, #0]
 808cefa:	f7ff ff6f 	bl	808cddc <__hexdig_fun>
 808cefe:	1e43      	subs	r3, r0, #1
 808cf00:	b2db      	uxtb	r3, r3
 808cf02:	2b18      	cmp	r3, #24
 808cf04:	d814      	bhi.n	808cf30 <__gethex+0x12a>
 808cf06:	f1a0 0210 	sub.w	r2, r0, #16
 808cf0a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808cf0e:	f7ff ff65 	bl	808cddc <__hexdig_fun>
 808cf12:	1e43      	subs	r3, r0, #1
 808cf14:	b2db      	uxtb	r3, r3
 808cf16:	2b18      	cmp	r3, #24
 808cf18:	d804      	bhi.n	808cf24 <__gethex+0x11e>
 808cf1a:	230a      	movs	r3, #10
 808cf1c:	fb03 0202 	mla	r2, r3, r2, r0
 808cf20:	3a10      	subs	r2, #16
 808cf22:	e7f2      	b.n	808cf0a <__gethex+0x104>
 808cf24:	f1b9 0f00 	cmp.w	r9, #0
 808cf28:	d000      	beq.n	808cf2c <__gethex+0x126>
 808cf2a:	4252      	negs	r2, r2
 808cf2c:	4414      	add	r4, r2
 808cf2e:	e000      	b.n	808cf32 <__gethex+0x12c>
 808cf30:	4631      	mov	r1, r6
 808cf32:	f8ca 1000 	str.w	r1, [sl]
 808cf36:	b12d      	cbz	r5, 808cf44 <__gethex+0x13e>
 808cf38:	f1bb 0f00 	cmp.w	fp, #0
 808cf3c:	bf14      	ite	ne
 808cf3e:	2000      	movne	r0, #0
 808cf40:	2006      	moveq	r0, #6
 808cf42:	e17c      	b.n	808d23e <__gethex+0x438>
 808cf44:	4629      	mov	r1, r5
 808cf46:	1bf3      	subs	r3, r6, r7
 808cf48:	3b01      	subs	r3, #1
 808cf4a:	2b07      	cmp	r3, #7
 808cf4c:	dd02      	ble.n	808cf54 <__gethex+0x14e>
 808cf4e:	3101      	adds	r1, #1
 808cf50:	105b      	asrs	r3, r3, #1
 808cf52:	e7fa      	b.n	808cf4a <__gethex+0x144>
 808cf54:	9802      	ldr	r0, [sp, #8]
 808cf56:	f000 fb0b 	bl	808d570 <_Balloc>
 808cf5a:	f04f 0900 	mov.w	r9, #0
 808cf5e:	4605      	mov	r5, r0
 808cf60:	46cb      	mov	fp, r9
 808cf62:	9b01      	ldr	r3, [sp, #4]
 808cf64:	f100 0a14 	add.w	sl, r0, #20
 808cf68:	f1c3 0301 	rsb	r3, r3, #1
 808cf6c:	f8cd a010 	str.w	sl, [sp, #16]
 808cf70:	9308      	str	r3, [sp, #32]
 808cf72:	42b7      	cmp	r7, r6
 808cf74:	d22f      	bcs.n	808cfd6 <__gethex+0x1d0>
 808cf76:	1e73      	subs	r3, r6, #1
 808cf78:	9305      	str	r3, [sp, #20]
 808cf7a:	9a07      	ldr	r2, [sp, #28]
 808cf7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808cf80:	4293      	cmp	r3, r2
 808cf82:	d00b      	beq.n	808cf9c <__gethex+0x196>
 808cf84:	f1bb 0f20 	cmp.w	fp, #32
 808cf88:	d116      	bne.n	808cfb8 <__gethex+0x1b2>
 808cf8a:	9b04      	ldr	r3, [sp, #16]
 808cf8c:	f8c3 9000 	str.w	r9, [r3]
 808cf90:	3304      	adds	r3, #4
 808cf92:	f04f 0900 	mov.w	r9, #0
 808cf96:	9304      	str	r3, [sp, #16]
 808cf98:	46cb      	mov	fp, r9
 808cf9a:	e00d      	b.n	808cfb8 <__gethex+0x1b2>
 808cf9c:	9b05      	ldr	r3, [sp, #20]
 808cf9e:	9a08      	ldr	r2, [sp, #32]
 808cfa0:	4413      	add	r3, r2
 808cfa2:	429f      	cmp	r7, r3
 808cfa4:	d8ee      	bhi.n	808cf84 <__gethex+0x17e>
 808cfa6:	4618      	mov	r0, r3
 808cfa8:	9a01      	ldr	r2, [sp, #4]
 808cfaa:	9903      	ldr	r1, [sp, #12]
 808cfac:	9309      	str	r3, [sp, #36]	; 0x24
 808cfae:	f7fe fd15 	bl	808b9dc <strncmp>
 808cfb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808cfb4:	b168      	cbz	r0, 808cfd2 <__gethex+0x1cc>
 808cfb6:	e7e5      	b.n	808cf84 <__gethex+0x17e>
 808cfb8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808cfbc:	f7ff ff0e 	bl	808cddc <__hexdig_fun>
 808cfc0:	f000 000f 	and.w	r0, r0, #15
 808cfc4:	fa00 f00b 	lsl.w	r0, r0, fp
 808cfc8:	9b05      	ldr	r3, [sp, #20]
 808cfca:	ea49 0900 	orr.w	r9, r9, r0
 808cfce:	f10b 0b04 	add.w	fp, fp, #4
 808cfd2:	461e      	mov	r6, r3
 808cfd4:	e7cd      	b.n	808cf72 <__gethex+0x16c>
 808cfd6:	9804      	ldr	r0, [sp, #16]
 808cfd8:	f840 9b04 	str.w	r9, [r0], #4
 808cfdc:	ebca 0000 	rsb	r0, sl, r0
 808cfe0:	1080      	asrs	r0, r0, #2
 808cfe2:	6128      	str	r0, [r5, #16]
 808cfe4:	0147      	lsls	r7, r0, #5
 808cfe6:	4648      	mov	r0, r9
 808cfe8:	f000 fb87 	bl	808d6fa <__hi0bits>
 808cfec:	f8d8 6000 	ldr.w	r6, [r8]
 808cff0:	1a38      	subs	r0, r7, r0
 808cff2:	42b0      	cmp	r0, r6
 808cff4:	dd26      	ble.n	808d044 <__gethex+0x23e>
 808cff6:	1b87      	subs	r7, r0, r6
 808cff8:	4639      	mov	r1, r7
 808cffa:	4628      	mov	r0, r5
 808cffc:	f000 fe7f 	bl	808dcfe <__any_on>
 808d000:	b1c8      	cbz	r0, 808d036 <__gethex+0x230>
 808d002:	1e7b      	subs	r3, r7, #1
 808d004:	1159      	asrs	r1, r3, #5
 808d006:	f003 021f 	and.w	r2, r3, #31
 808d00a:	f04f 0901 	mov.w	r9, #1
 808d00e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808d012:	fa09 f202 	lsl.w	r2, r9, r2
 808d016:	420a      	tst	r2, r1
 808d018:	d00e      	beq.n	808d038 <__gethex+0x232>
 808d01a:	454b      	cmp	r3, r9
 808d01c:	dc02      	bgt.n	808d024 <__gethex+0x21e>
 808d01e:	f04f 0902 	mov.w	r9, #2
 808d022:	e009      	b.n	808d038 <__gethex+0x232>
 808d024:	1eb9      	subs	r1, r7, #2
 808d026:	4628      	mov	r0, r5
 808d028:	f000 fe69 	bl	808dcfe <__any_on>
 808d02c:	2800      	cmp	r0, #0
 808d02e:	d0f6      	beq.n	808d01e <__gethex+0x218>
 808d030:	f04f 0903 	mov.w	r9, #3
 808d034:	e000      	b.n	808d038 <__gethex+0x232>
 808d036:	4681      	mov	r9, r0
 808d038:	4639      	mov	r1, r7
 808d03a:	4628      	mov	r0, r5
 808d03c:	f7ff fe98 	bl	808cd70 <rshift>
 808d040:	443c      	add	r4, r7
 808d042:	e00c      	b.n	808d05e <__gethex+0x258>
 808d044:	da09      	bge.n	808d05a <__gethex+0x254>
 808d046:	1a37      	subs	r7, r6, r0
 808d048:	4629      	mov	r1, r5
 808d04a:	463a      	mov	r2, r7
 808d04c:	9802      	ldr	r0, [sp, #8]
 808d04e:	f000 fc89 	bl	808d964 <__lshift>
 808d052:	4605      	mov	r5, r0
 808d054:	1be4      	subs	r4, r4, r7
 808d056:	f100 0a14 	add.w	sl, r0, #20
 808d05a:	f04f 0900 	mov.w	r9, #0
 808d05e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d062:	429c      	cmp	r4, r3
 808d064:	dd08      	ble.n	808d078 <__gethex+0x272>
 808d066:	9802      	ldr	r0, [sp, #8]
 808d068:	4629      	mov	r1, r5
 808d06a:	f000 fab6 	bl	808d5da <_Bfree>
 808d06e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d070:	2300      	movs	r3, #0
 808d072:	6013      	str	r3, [r2, #0]
 808d074:	20a3      	movs	r0, #163	; 0xa3
 808d076:	e0e2      	b.n	808d23e <__gethex+0x438>
 808d078:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808d07c:	4284      	cmp	r4, r0
 808d07e:	da53      	bge.n	808d128 <__gethex+0x322>
 808d080:	1b04      	subs	r4, r0, r4
 808d082:	42a6      	cmp	r6, r4
 808d084:	dc2e      	bgt.n	808d0e4 <__gethex+0x2de>
 808d086:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d08a:	2b02      	cmp	r3, #2
 808d08c:	d01a      	beq.n	808d0c4 <__gethex+0x2be>
 808d08e:	2b03      	cmp	r3, #3
 808d090:	d01c      	beq.n	808d0cc <__gethex+0x2c6>
 808d092:	2b01      	cmp	r3, #1
 808d094:	d11d      	bne.n	808d0d2 <__gethex+0x2cc>
 808d096:	42a6      	cmp	r6, r4
 808d098:	d11b      	bne.n	808d0d2 <__gethex+0x2cc>
 808d09a:	2e01      	cmp	r6, #1
 808d09c:	dc0b      	bgt.n	808d0b6 <__gethex+0x2b0>
 808d09e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808d0a2:	9a06      	ldr	r2, [sp, #24]
 808d0a4:	2062      	movs	r0, #98	; 0x62
 808d0a6:	6013      	str	r3, [r2, #0]
 808d0a8:	2301      	movs	r3, #1
 808d0aa:	612b      	str	r3, [r5, #16]
 808d0ac:	f8ca 3000 	str.w	r3, [sl]
 808d0b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d0b2:	601d      	str	r5, [r3, #0]
 808d0b4:	e0c3      	b.n	808d23e <__gethex+0x438>
 808d0b6:	1e71      	subs	r1, r6, #1
 808d0b8:	4628      	mov	r0, r5
 808d0ba:	f000 fe20 	bl	808dcfe <__any_on>
 808d0be:	2800      	cmp	r0, #0
 808d0c0:	d1ed      	bne.n	808d09e <__gethex+0x298>
 808d0c2:	e006      	b.n	808d0d2 <__gethex+0x2cc>
 808d0c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d0c6:	2b00      	cmp	r3, #0
 808d0c8:	d0e9      	beq.n	808d09e <__gethex+0x298>
 808d0ca:	e002      	b.n	808d0d2 <__gethex+0x2cc>
 808d0cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d0ce:	2b00      	cmp	r3, #0
 808d0d0:	d1e5      	bne.n	808d09e <__gethex+0x298>
 808d0d2:	9802      	ldr	r0, [sp, #8]
 808d0d4:	4629      	mov	r1, r5
 808d0d6:	f000 fa80 	bl	808d5da <_Bfree>
 808d0da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d0dc:	2300      	movs	r3, #0
 808d0de:	6013      	str	r3, [r2, #0]
 808d0e0:	2050      	movs	r0, #80	; 0x50
 808d0e2:	e0ac      	b.n	808d23e <__gethex+0x438>
 808d0e4:	1e67      	subs	r7, r4, #1
 808d0e6:	f1b9 0f00 	cmp.w	r9, #0
 808d0ea:	d106      	bne.n	808d0fa <__gethex+0x2f4>
 808d0ec:	b13f      	cbz	r7, 808d0fe <__gethex+0x2f8>
 808d0ee:	4639      	mov	r1, r7
 808d0f0:	4628      	mov	r0, r5
 808d0f2:	f000 fe04 	bl	808dcfe <__any_on>
 808d0f6:	4681      	mov	r9, r0
 808d0f8:	e001      	b.n	808d0fe <__gethex+0x2f8>
 808d0fa:	f04f 0901 	mov.w	r9, #1
 808d0fe:	117a      	asrs	r2, r7, #5
 808d100:	2301      	movs	r3, #1
 808d102:	f007 071f 	and.w	r7, r7, #31
 808d106:	fa03 f707 	lsl.w	r7, r3, r7
 808d10a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808d10e:	4621      	mov	r1, r4
 808d110:	421f      	tst	r7, r3
 808d112:	4628      	mov	r0, r5
 808d114:	bf18      	it	ne
 808d116:	f049 0902 	orrne.w	r9, r9, #2
 808d11a:	1b36      	subs	r6, r6, r4
 808d11c:	f7ff fe28 	bl	808cd70 <rshift>
 808d120:	2702      	movs	r7, #2
 808d122:	f8d8 4004 	ldr.w	r4, [r8, #4]
 808d126:	e000      	b.n	808d12a <__gethex+0x324>
 808d128:	2701      	movs	r7, #1
 808d12a:	f1b9 0f00 	cmp.w	r9, #0
 808d12e:	f000 8081 	beq.w	808d234 <__gethex+0x42e>
 808d132:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d136:	2b02      	cmp	r3, #2
 808d138:	d00e      	beq.n	808d158 <__gethex+0x352>
 808d13a:	2b03      	cmp	r3, #3
 808d13c:	d010      	beq.n	808d160 <__gethex+0x35a>
 808d13e:	2b01      	cmp	r3, #1
 808d140:	d176      	bne.n	808d230 <__gethex+0x42a>
 808d142:	f019 0f02 	tst.w	r9, #2
 808d146:	d073      	beq.n	808d230 <__gethex+0x42a>
 808d148:	f8da 0000 	ldr.w	r0, [sl]
 808d14c:	ea49 0900 	orr.w	r9, r9, r0
 808d150:	f019 0f01 	tst.w	r9, #1
 808d154:	d107      	bne.n	808d166 <__gethex+0x360>
 808d156:	e06b      	b.n	808d230 <__gethex+0x42a>
 808d158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d15a:	f1c3 0301 	rsb	r3, r3, #1
 808d15e:	9315      	str	r3, [sp, #84]	; 0x54
 808d160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d162:	2b00      	cmp	r3, #0
 808d164:	d064      	beq.n	808d230 <__gethex+0x42a>
 808d166:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808d16a:	f105 0314 	add.w	r3, r5, #20
 808d16e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 808d172:	eb03 0109 	add.w	r1, r3, r9
 808d176:	2000      	movs	r0, #0
 808d178:	681a      	ldr	r2, [r3, #0]
 808d17a:	f1b2 3fff 	cmp.w	r2, #4294967295
 808d17e:	d002      	beq.n	808d186 <__gethex+0x380>
 808d180:	3201      	adds	r2, #1
 808d182:	601a      	str	r2, [r3, #0]
 808d184:	e020      	b.n	808d1c8 <__gethex+0x3c2>
 808d186:	f843 0b04 	str.w	r0, [r3], #4
 808d18a:	4299      	cmp	r1, r3
 808d18c:	d8f4      	bhi.n	808d178 <__gethex+0x372>
 808d18e:	68ab      	ldr	r3, [r5, #8]
 808d190:	459a      	cmp	sl, r3
 808d192:	db12      	blt.n	808d1ba <__gethex+0x3b4>
 808d194:	6869      	ldr	r1, [r5, #4]
 808d196:	9802      	ldr	r0, [sp, #8]
 808d198:	3101      	adds	r1, #1
 808d19a:	f000 f9e9 	bl	808d570 <_Balloc>
 808d19e:	4683      	mov	fp, r0
 808d1a0:	692a      	ldr	r2, [r5, #16]
 808d1a2:	f105 010c 	add.w	r1, r5, #12
 808d1a6:	3202      	adds	r2, #2
 808d1a8:	0092      	lsls	r2, r2, #2
 808d1aa:	300c      	adds	r0, #12
 808d1ac:	f7fd fe9f 	bl	808aeee <memcpy>
 808d1b0:	4629      	mov	r1, r5
 808d1b2:	9802      	ldr	r0, [sp, #8]
 808d1b4:	f000 fa11 	bl	808d5da <_Bfree>
 808d1b8:	465d      	mov	r5, fp
 808d1ba:	692b      	ldr	r3, [r5, #16]
 808d1bc:	1c5a      	adds	r2, r3, #1
 808d1be:	612a      	str	r2, [r5, #16]
 808d1c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 808d1c4:	2201      	movs	r2, #1
 808d1c6:	615a      	str	r2, [r3, #20]
 808d1c8:	2f02      	cmp	r7, #2
 808d1ca:	f105 0214 	add.w	r2, r5, #20
 808d1ce:	d111      	bne.n	808d1f4 <__gethex+0x3ee>
 808d1d0:	f8d8 3000 	ldr.w	r3, [r8]
 808d1d4:	3b01      	subs	r3, #1
 808d1d6:	429e      	cmp	r6, r3
 808d1d8:	d127      	bne.n	808d22a <__gethex+0x424>
 808d1da:	1171      	asrs	r1, r6, #5
 808d1dc:	2301      	movs	r3, #1
 808d1de:	f006 061f 	and.w	r6, r6, #31
 808d1e2:	fa03 f606 	lsl.w	r6, r3, r6
 808d1e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808d1ea:	421e      	tst	r6, r3
 808d1ec:	bf0c      	ite	eq
 808d1ee:	2702      	moveq	r7, #2
 808d1f0:	2701      	movne	r7, #1
 808d1f2:	e01a      	b.n	808d22a <__gethex+0x424>
 808d1f4:	692b      	ldr	r3, [r5, #16]
 808d1f6:	459a      	cmp	sl, r3
 808d1f8:	da0a      	bge.n	808d210 <__gethex+0x40a>
 808d1fa:	2101      	movs	r1, #1
 808d1fc:	4628      	mov	r0, r5
 808d1fe:	f7ff fdb7 	bl	808cd70 <rshift>
 808d202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d206:	3401      	adds	r4, #1
 808d208:	429c      	cmp	r4, r3
 808d20a:	f73f af2c 	bgt.w	808d066 <__gethex+0x260>
 808d20e:	e00b      	b.n	808d228 <__gethex+0x422>
 808d210:	f016 061f 	ands.w	r6, r6, #31
 808d214:	d008      	beq.n	808d228 <__gethex+0x422>
 808d216:	4491      	add	r9, r2
 808d218:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808d21c:	f000 fa6d 	bl	808d6fa <__hi0bits>
 808d220:	f1c6 0620 	rsb	r6, r6, #32
 808d224:	42b0      	cmp	r0, r6
 808d226:	dbe8      	blt.n	808d1fa <__gethex+0x3f4>
 808d228:	2701      	movs	r7, #1
 808d22a:	f047 0720 	orr.w	r7, r7, #32
 808d22e:	e001      	b.n	808d234 <__gethex+0x42e>
 808d230:	f047 0710 	orr.w	r7, r7, #16
 808d234:	4638      	mov	r0, r7
 808d236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d238:	601d      	str	r5, [r3, #0]
 808d23a:	9b06      	ldr	r3, [sp, #24]
 808d23c:	601c      	str	r4, [r3, #0]
 808d23e:	b00b      	add	sp, #44	; 0x2c
 808d240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d244 <L_shift>:
 808d244:	f1c2 0208 	rsb	r2, r2, #8
 808d248:	0092      	lsls	r2, r2, #2
 808d24a:	b570      	push	{r4, r5, r6, lr}
 808d24c:	f1c2 0620 	rsb	r6, r2, #32
 808d250:	6843      	ldr	r3, [r0, #4]
 808d252:	6805      	ldr	r5, [r0, #0]
 808d254:	fa03 f406 	lsl.w	r4, r3, r6
 808d258:	432c      	orrs	r4, r5
 808d25a:	40d3      	lsrs	r3, r2
 808d25c:	6004      	str	r4, [r0, #0]
 808d25e:	f840 3f04 	str.w	r3, [r0, #4]!
 808d262:	4288      	cmp	r0, r1
 808d264:	d3f4      	bcc.n	808d250 <L_shift+0xc>
 808d266:	bd70      	pop	{r4, r5, r6, pc}

0808d268 <__match>:
 808d268:	b530      	push	{r4, r5, lr}
 808d26a:	6803      	ldr	r3, [r0, #0]
 808d26c:	f811 4b01 	ldrb.w	r4, [r1], #1
 808d270:	3301      	adds	r3, #1
 808d272:	b14c      	cbz	r4, 808d288 <__match+0x20>
 808d274:	781a      	ldrb	r2, [r3, #0]
 808d276:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808d27a:	2d19      	cmp	r5, #25
 808d27c:	bf98      	it	ls
 808d27e:	3220      	addls	r2, #32
 808d280:	42a2      	cmp	r2, r4
 808d282:	d0f3      	beq.n	808d26c <__match+0x4>
 808d284:	2000      	movs	r0, #0
 808d286:	bd30      	pop	{r4, r5, pc}
 808d288:	6003      	str	r3, [r0, #0]
 808d28a:	2001      	movs	r0, #1
 808d28c:	bd30      	pop	{r4, r5, pc}

0808d28e <__hexnan>:
 808d28e:	680b      	ldr	r3, [r1, #0]
 808d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d294:	115e      	asrs	r6, r3, #5
 808d296:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808d29a:	f013 031f 	ands.w	r3, r3, #31
 808d29e:	bf18      	it	ne
 808d2a0:	3604      	addne	r6, #4
 808d2a2:	1f35      	subs	r5, r6, #4
 808d2a4:	4617      	mov	r7, r2
 808d2a6:	2200      	movs	r2, #0
 808d2a8:	4682      	mov	sl, r0
 808d2aa:	46a8      	mov	r8, r5
 808d2ac:	462c      	mov	r4, r5
 808d2ae:	4691      	mov	r9, r2
 808d2b0:	b085      	sub	sp, #20
 808d2b2:	f8d0 b000 	ldr.w	fp, [r0]
 808d2b6:	9301      	str	r3, [sp, #4]
 808d2b8:	f846 2c04 	str.w	r2, [r6, #-4]
 808d2bc:	9200      	str	r2, [sp, #0]
 808d2be:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 808d2c2:	2900      	cmp	r1, #0
 808d2c4:	d03c      	beq.n	808d340 <__hexnan+0xb2>
 808d2c6:	4608      	mov	r0, r1
 808d2c8:	9203      	str	r2, [sp, #12]
 808d2ca:	9102      	str	r1, [sp, #8]
 808d2cc:	f7ff fd86 	bl	808cddc <__hexdig_fun>
 808d2d0:	9a03      	ldr	r2, [sp, #12]
 808d2d2:	bb00      	cbnz	r0, 808d316 <__hexnan+0x88>
 808d2d4:	9902      	ldr	r1, [sp, #8]
 808d2d6:	2920      	cmp	r1, #32
 808d2d8:	d816      	bhi.n	808d308 <__hexnan+0x7a>
 808d2da:	9b00      	ldr	r3, [sp, #0]
 808d2dc:	4599      	cmp	r9, r3
 808d2de:	ddee      	ble.n	808d2be <__hexnan+0x30>
 808d2e0:	4544      	cmp	r4, r8
 808d2e2:	d205      	bcs.n	808d2f0 <__hexnan+0x62>
 808d2e4:	2a07      	cmp	r2, #7
 808d2e6:	dc03      	bgt.n	808d2f0 <__hexnan+0x62>
 808d2e8:	4641      	mov	r1, r8
 808d2ea:	4620      	mov	r0, r4
 808d2ec:	f7ff ffaa 	bl	808d244 <L_shift>
 808d2f0:	42bc      	cmp	r4, r7
 808d2f2:	d923      	bls.n	808d33c <__hexnan+0xae>
 808d2f4:	2300      	movs	r3, #0
 808d2f6:	f1a4 0804 	sub.w	r8, r4, #4
 808d2fa:	f844 3c04 	str.w	r3, [r4, #-4]
 808d2fe:	f8cd 9000 	str.w	r9, [sp]
 808d302:	4644      	mov	r4, r8
 808d304:	461a      	mov	r2, r3
 808d306:	e7da      	b.n	808d2be <__hexnan+0x30>
 808d308:	2929      	cmp	r1, #41	; 0x29
 808d30a:	d148      	bne.n	808d39e <__hexnan+0x110>
 808d30c:	f10b 0301 	add.w	r3, fp, #1
 808d310:	f8ca 3000 	str.w	r3, [sl]
 808d314:	e014      	b.n	808d340 <__hexnan+0xb2>
 808d316:	3201      	adds	r2, #1
 808d318:	2a08      	cmp	r2, #8
 808d31a:	f109 0901 	add.w	r9, r9, #1
 808d31e:	dd06      	ble.n	808d32e <__hexnan+0xa0>
 808d320:	42bc      	cmp	r4, r7
 808d322:	d9cc      	bls.n	808d2be <__hexnan+0x30>
 808d324:	2300      	movs	r3, #0
 808d326:	f844 3c04 	str.w	r3, [r4, #-4]
 808d32a:	2201      	movs	r2, #1
 808d32c:	3c04      	subs	r4, #4
 808d32e:	6821      	ldr	r1, [r4, #0]
 808d330:	f000 000f 	and.w	r0, r0, #15
 808d334:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 808d338:	6020      	str	r0, [r4, #0]
 808d33a:	e7c0      	b.n	808d2be <__hexnan+0x30>
 808d33c:	2208      	movs	r2, #8
 808d33e:	e7be      	b.n	808d2be <__hexnan+0x30>
 808d340:	f1b9 0f00 	cmp.w	r9, #0
 808d344:	d02b      	beq.n	808d39e <__hexnan+0x110>
 808d346:	4544      	cmp	r4, r8
 808d348:	d205      	bcs.n	808d356 <__hexnan+0xc8>
 808d34a:	2a07      	cmp	r2, #7
 808d34c:	dc03      	bgt.n	808d356 <__hexnan+0xc8>
 808d34e:	4641      	mov	r1, r8
 808d350:	4620      	mov	r0, r4
 808d352:	f7ff ff77 	bl	808d244 <L_shift>
 808d356:	42bc      	cmp	r4, r7
 808d358:	d90c      	bls.n	808d374 <__hexnan+0xe6>
 808d35a:	463b      	mov	r3, r7
 808d35c:	f854 2b04 	ldr.w	r2, [r4], #4
 808d360:	42a5      	cmp	r5, r4
 808d362:	f843 2b04 	str.w	r2, [r3], #4
 808d366:	d2f9      	bcs.n	808d35c <__hexnan+0xce>
 808d368:	2200      	movs	r2, #0
 808d36a:	f843 2b04 	str.w	r2, [r3], #4
 808d36e:	429d      	cmp	r5, r3
 808d370:	d2fb      	bcs.n	808d36a <__hexnan+0xdc>
 808d372:	e00b      	b.n	808d38c <__hexnan+0xfe>
 808d374:	9b01      	ldr	r3, [sp, #4]
 808d376:	b14b      	cbz	r3, 808d38c <__hexnan+0xfe>
 808d378:	f1c3 0220 	rsb	r2, r3, #32
 808d37c:	f04f 33ff 	mov.w	r3, #4294967295
 808d380:	40d3      	lsrs	r3, r2
 808d382:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808d386:	4013      	ands	r3, r2
 808d388:	f846 3c04 	str.w	r3, [r6, #-4]
 808d38c:	682b      	ldr	r3, [r5, #0]
 808d38e:	b943      	cbnz	r3, 808d3a2 <__hexnan+0x114>
 808d390:	42bd      	cmp	r5, r7
 808d392:	d102      	bne.n	808d39a <__hexnan+0x10c>
 808d394:	2301      	movs	r3, #1
 808d396:	602b      	str	r3, [r5, #0]
 808d398:	e003      	b.n	808d3a2 <__hexnan+0x114>
 808d39a:	3d04      	subs	r5, #4
 808d39c:	e7f6      	b.n	808d38c <__hexnan+0xfe>
 808d39e:	2004      	movs	r0, #4
 808d3a0:	e000      	b.n	808d3a4 <__hexnan+0x116>
 808d3a2:	2005      	movs	r0, #5
 808d3a4:	b005      	add	sp, #20
 808d3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808d3ac <_findenv_r>:
 808d3ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d3b0:	4607      	mov	r7, r0
 808d3b2:	468b      	mov	fp, r1
 808d3b4:	4690      	mov	r8, r2
 808d3b6:	f000 fcd2 	bl	808dd5e <__env_lock>
 808d3ba:	4b19      	ldr	r3, [pc, #100]	; (808d420 <_findenv_r+0x74>)
 808d3bc:	681d      	ldr	r5, [r3, #0]
 808d3be:	469a      	mov	sl, r3
 808d3c0:	b13d      	cbz	r5, 808d3d2 <_findenv_r+0x26>
 808d3c2:	465c      	mov	r4, fp
 808d3c4:	4623      	mov	r3, r4
 808d3c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 808d3ca:	b142      	cbz	r2, 808d3de <_findenv_r+0x32>
 808d3cc:	2a3d      	cmp	r2, #61	; 0x3d
 808d3ce:	461c      	mov	r4, r3
 808d3d0:	d1f8      	bne.n	808d3c4 <_findenv_r+0x18>
 808d3d2:	4638      	mov	r0, r7
 808d3d4:	f000 fcc4 	bl	808dd60 <__env_unlock>
 808d3d8:	2000      	movs	r0, #0
 808d3da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d3de:	ebcb 0404 	rsb	r4, fp, r4
 808d3e2:	46a9      	mov	r9, r5
 808d3e4:	f859 0b04 	ldr.w	r0, [r9], #4
 808d3e8:	2800      	cmp	r0, #0
 808d3ea:	d0f2      	beq.n	808d3d2 <_findenv_r+0x26>
 808d3ec:	4622      	mov	r2, r4
 808d3ee:	4659      	mov	r1, fp
 808d3f0:	f7fe faf4 	bl	808b9dc <strncmp>
 808d3f4:	b988      	cbnz	r0, 808d41a <_findenv_r+0x6e>
 808d3f6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808d3fa:	191e      	adds	r6, r3, r4
 808d3fc:	5d1b      	ldrb	r3, [r3, r4]
 808d3fe:	2b3d      	cmp	r3, #61	; 0x3d
 808d400:	d10b      	bne.n	808d41a <_findenv_r+0x6e>
 808d402:	f8da 3000 	ldr.w	r3, [sl]
 808d406:	4638      	mov	r0, r7
 808d408:	1aed      	subs	r5, r5, r3
 808d40a:	10ad      	asrs	r5, r5, #2
 808d40c:	f8c8 5000 	str.w	r5, [r8]
 808d410:	f000 fca6 	bl	808dd60 <__env_unlock>
 808d414:	1c70      	adds	r0, r6, #1
 808d416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d41a:	464d      	mov	r5, r9
 808d41c:	e7e1      	b.n	808d3e2 <_findenv_r+0x36>
 808d41e:	bf00      	nop
 808d420:	200001c8 	.word	0x200001c8

0808d424 <_getenv_r>:
 808d424:	b507      	push	{r0, r1, r2, lr}
 808d426:	aa01      	add	r2, sp, #4
 808d428:	f7ff ffc0 	bl	808d3ac <_findenv_r>
 808d42c:	b003      	add	sp, #12
 808d42e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808d434 <__gettzinfo>:
 808d434:	4800      	ldr	r0, [pc, #0]	; (808d438 <__gettzinfo+0x4>)
 808d436:	4770      	bx	lr
 808d438:	20000188 	.word	0x20000188

0808d43c <gmtime_r>:
 808d43c:	6802      	ldr	r2, [r0, #0]
 808d43e:	4b46      	ldr	r3, [pc, #280]	; (808d558 <gmtime_r+0x11c>)
 808d440:	b5f0      	push	{r4, r5, r6, r7, lr}
 808d442:	fb92 f4f3 	sdiv	r4, r2, r3
 808d446:	fb03 2214 	mls	r2, r3, r4, r2
 808d44a:	2a00      	cmp	r2, #0
 808d44c:	bfbc      	itt	lt
 808d44e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808d452:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808d456:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808d45a:	fb92 f3f0 	sdiv	r3, r2, r0
 808d45e:	fb00 2213 	mls	r2, r0, r3, r2
 808d462:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808d466:	608b      	str	r3, [r1, #8]
 808d468:	fb92 f3f0 	sdiv	r3, r2, r0
 808d46c:	fb00 2213 	mls	r2, r0, r3, r2
 808d470:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808d474:	bfac      	ite	ge
 808d476:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808d47a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808d47e:	604b      	str	r3, [r1, #4]
 808d480:	600a      	str	r2, [r1, #0]
 808d482:	2307      	movs	r3, #7
 808d484:	1ce2      	adds	r2, r4, #3
 808d486:	fb92 f3f3 	sdiv	r3, r2, r3
 808d48a:	4d34      	ldr	r5, [pc, #208]	; (808d55c <gmtime_r+0x120>)
 808d48c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808d490:	fb94 f5f5 	sdiv	r5, r4, r5
 808d494:	1ad3      	subs	r3, r2, r3
 808d496:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808d49a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808d49e:	618b      	str	r3, [r1, #24]
 808d4a0:	4b2f      	ldr	r3, [pc, #188]	; (808d560 <gmtime_r+0x124>)
 808d4a2:	4830      	ldr	r0, [pc, #192]	; (808d564 <gmtime_r+0x128>)
 808d4a4:	fb03 4405 	mla	r4, r3, r5, r4
 808d4a8:	fbb4 f2f2 	udiv	r2, r4, r2
 808d4ac:	fbb4 f3f7 	udiv	r3, r4, r7
 808d4b0:	fbb4 f0f0 	udiv	r0, r4, r0
 808d4b4:	4422      	add	r2, r4
 808d4b6:	1ad2      	subs	r2, r2, r3
 808d4b8:	f648 6694 	movw	r6, #36500	; 0x8e94
 808d4bc:	1a13      	subs	r3, r2, r0
 808d4be:	f240 126d 	movw	r2, #365	; 0x16d
 808d4c2:	fbb3 f6f6 	udiv	r6, r3, r6
 808d4c6:	fbb3 f0f2 	udiv	r0, r3, r2
 808d4ca:	fbb3 f3f7 	udiv	r3, r3, r7
 808d4ce:	4434      	add	r4, r6
 808d4d0:	1ae3      	subs	r3, r4, r3
 808d4d2:	fb02 3310 	mls	r3, r2, r0, r3
 808d4d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808d4da:	2499      	movs	r4, #153	; 0x99
 808d4dc:	3202      	adds	r2, #2
 808d4de:	fbb2 f2f4 	udiv	r2, r2, r4
 808d4e2:	4354      	muls	r4, r2
 808d4e4:	1ca6      	adds	r6, r4, #2
 808d4e6:	2405      	movs	r4, #5
 808d4e8:	fbb6 f4f4 	udiv	r4, r6, r4
 808d4ec:	2a0a      	cmp	r2, #10
 808d4ee:	bf34      	ite	cc
 808d4f0:	2602      	movcc	r6, #2
 808d4f2:	f06f 0609 	mvncs.w	r6, #9
 808d4f6:	4416      	add	r6, r2
 808d4f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808d4fc:	fb02 0505 	mla	r5, r2, r5, r0
 808d500:	1c5f      	adds	r7, r3, #1
 808d502:	2e01      	cmp	r6, #1
 808d504:	bf98      	it	ls
 808d506:	3501      	addls	r5, #1
 808d508:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808d50c:	eba7 0704 	sub.w	r7, r7, r4
 808d510:	d302      	bcc.n	808d518 <gmtime_r+0xdc>
 808d512:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808d516:	e014      	b.n	808d542 <gmtime_r+0x106>
 808d518:	0782      	lsls	r2, r0, #30
 808d51a:	d105      	bne.n	808d528 <gmtime_r+0xec>
 808d51c:	2464      	movs	r4, #100	; 0x64
 808d51e:	fbb0 f2f4 	udiv	r2, r0, r4
 808d522:	fb04 0212 	mls	r2, r4, r2, r0
 808d526:	b94a      	cbnz	r2, 808d53c <gmtime_r+0x100>
 808d528:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808d52c:	fbb0 f4f2 	udiv	r4, r0, r2
 808d530:	fb02 0014 	mls	r0, r2, r4, r0
 808d534:	fab0 f280 	clz	r2, r0
 808d538:	0952      	lsrs	r2, r2, #5
 808d53a:	e000      	b.n	808d53e <gmtime_r+0x102>
 808d53c:	2201      	movs	r2, #1
 808d53e:	333b      	adds	r3, #59	; 0x3b
 808d540:	441a      	add	r2, r3
 808d542:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808d546:	2300      	movs	r3, #0
 808d548:	61ca      	str	r2, [r1, #28]
 808d54a:	614d      	str	r5, [r1, #20]
 808d54c:	610e      	str	r6, [r1, #16]
 808d54e:	60cf      	str	r7, [r1, #12]
 808d550:	620b      	str	r3, [r1, #32]
 808d552:	4608      	mov	r0, r1
 808d554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808d556:	bf00      	nop
 808d558:	00015180 	.word	0x00015180
 808d55c:	00023ab1 	.word	0x00023ab1
 808d560:	fffdc54f 	.word	0xfffdc54f
 808d564:	00023ab0 	.word	0x00023ab0

0808d568 <labs>:
 808d568:	2800      	cmp	r0, #0
 808d56a:	bfb8      	it	lt
 808d56c:	4240      	neglt	r0, r0
 808d56e:	4770      	bx	lr

0808d570 <_Balloc>:
 808d570:	b570      	push	{r4, r5, r6, lr}
 808d572:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808d574:	4604      	mov	r4, r0
 808d576:	460e      	mov	r6, r1
 808d578:	b93d      	cbnz	r5, 808d58a <_Balloc+0x1a>
 808d57a:	2010      	movs	r0, #16
 808d57c:	f7fa fa24 	bl	80879c8 <malloc>
 808d580:	6260      	str	r0, [r4, #36]	; 0x24
 808d582:	6045      	str	r5, [r0, #4]
 808d584:	6085      	str	r5, [r0, #8]
 808d586:	6005      	str	r5, [r0, #0]
 808d588:	60c5      	str	r5, [r0, #12]
 808d58a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 808d58c:	68eb      	ldr	r3, [r5, #12]
 808d58e:	b143      	cbz	r3, 808d5a2 <_Balloc+0x32>
 808d590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808d592:	68db      	ldr	r3, [r3, #12]
 808d594:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 808d598:	b178      	cbz	r0, 808d5ba <_Balloc+0x4a>
 808d59a:	6802      	ldr	r2, [r0, #0]
 808d59c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 808d5a0:	e017      	b.n	808d5d2 <_Balloc+0x62>
 808d5a2:	2221      	movs	r2, #33	; 0x21
 808d5a4:	2104      	movs	r1, #4
 808d5a6:	4620      	mov	r0, r4
 808d5a8:	f000 fbcb 	bl	808dd42 <_calloc_r>
 808d5ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808d5ae:	60e8      	str	r0, [r5, #12]
 808d5b0:	68db      	ldr	r3, [r3, #12]
 808d5b2:	2b00      	cmp	r3, #0
 808d5b4:	d1ec      	bne.n	808d590 <_Balloc+0x20>
 808d5b6:	2000      	movs	r0, #0
 808d5b8:	bd70      	pop	{r4, r5, r6, pc}
 808d5ba:	2101      	movs	r1, #1
 808d5bc:	fa01 f506 	lsl.w	r5, r1, r6
 808d5c0:	1d6a      	adds	r2, r5, #5
 808d5c2:	0092      	lsls	r2, r2, #2
 808d5c4:	4620      	mov	r0, r4
 808d5c6:	f000 fbbc 	bl	808dd42 <_calloc_r>
 808d5ca:	2800      	cmp	r0, #0
 808d5cc:	d0f3      	beq.n	808d5b6 <_Balloc+0x46>
 808d5ce:	6046      	str	r6, [r0, #4]
 808d5d0:	6085      	str	r5, [r0, #8]
 808d5d2:	2300      	movs	r3, #0
 808d5d4:	6103      	str	r3, [r0, #16]
 808d5d6:	60c3      	str	r3, [r0, #12]
 808d5d8:	bd70      	pop	{r4, r5, r6, pc}

0808d5da <_Bfree>:
 808d5da:	b570      	push	{r4, r5, r6, lr}
 808d5dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 808d5de:	4606      	mov	r6, r0
 808d5e0:	460d      	mov	r5, r1
 808d5e2:	b93c      	cbnz	r4, 808d5f4 <_Bfree+0x1a>
 808d5e4:	2010      	movs	r0, #16
 808d5e6:	f7fa f9ef 	bl	80879c8 <malloc>
 808d5ea:	6270      	str	r0, [r6, #36]	; 0x24
 808d5ec:	6044      	str	r4, [r0, #4]
 808d5ee:	6084      	str	r4, [r0, #8]
 808d5f0:	6004      	str	r4, [r0, #0]
 808d5f2:	60c4      	str	r4, [r0, #12]
 808d5f4:	b13d      	cbz	r5, 808d606 <_Bfree+0x2c>
 808d5f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 808d5f8:	686a      	ldr	r2, [r5, #4]
 808d5fa:	68db      	ldr	r3, [r3, #12]
 808d5fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808d600:	6029      	str	r1, [r5, #0]
 808d602:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 808d606:	bd70      	pop	{r4, r5, r6, pc}

0808d608 <__multadd>:
 808d608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d60c:	4606      	mov	r6, r0
 808d60e:	460c      	mov	r4, r1
 808d610:	690d      	ldr	r5, [r1, #16]
 808d612:	461f      	mov	r7, r3
 808d614:	f101 0e14 	add.w	lr, r1, #20
 808d618:	2300      	movs	r3, #0
 808d61a:	f8de 0000 	ldr.w	r0, [lr]
 808d61e:	3301      	adds	r3, #1
 808d620:	b281      	uxth	r1, r0
 808d622:	fb02 7101 	mla	r1, r2, r1, r7
 808d626:	0c00      	lsrs	r0, r0, #16
 808d628:	0c0f      	lsrs	r7, r1, #16
 808d62a:	fb02 7000 	mla	r0, r2, r0, r7
 808d62e:	b289      	uxth	r1, r1
 808d630:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808d634:	429d      	cmp	r5, r3
 808d636:	ea4f 4710 	mov.w	r7, r0, lsr #16
 808d63a:	f84e 1b04 	str.w	r1, [lr], #4
 808d63e:	dcec      	bgt.n	808d61a <__multadd+0x12>
 808d640:	b1d7      	cbz	r7, 808d678 <__multadd+0x70>
 808d642:	68a3      	ldr	r3, [r4, #8]
 808d644:	429d      	cmp	r5, r3
 808d646:	db12      	blt.n	808d66e <__multadd+0x66>
 808d648:	6861      	ldr	r1, [r4, #4]
 808d64a:	4630      	mov	r0, r6
 808d64c:	3101      	adds	r1, #1
 808d64e:	f7ff ff8f 	bl	808d570 <_Balloc>
 808d652:	4680      	mov	r8, r0
 808d654:	6922      	ldr	r2, [r4, #16]
 808d656:	f104 010c 	add.w	r1, r4, #12
 808d65a:	3202      	adds	r2, #2
 808d65c:	0092      	lsls	r2, r2, #2
 808d65e:	300c      	adds	r0, #12
 808d660:	f7fd fc45 	bl	808aeee <memcpy>
 808d664:	4621      	mov	r1, r4
 808d666:	4630      	mov	r0, r6
 808d668:	f7ff ffb7 	bl	808d5da <_Bfree>
 808d66c:	4644      	mov	r4, r8
 808d66e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808d672:	3501      	adds	r5, #1
 808d674:	615f      	str	r7, [r3, #20]
 808d676:	6125      	str	r5, [r4, #16]
 808d678:	4620      	mov	r0, r4
 808d67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808d67e <__s2b>:
 808d67e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808d682:	4606      	mov	r6, r0
 808d684:	4615      	mov	r5, r2
 808d686:	461f      	mov	r7, r3
 808d688:	2209      	movs	r2, #9
 808d68a:	3308      	adds	r3, #8
 808d68c:	460c      	mov	r4, r1
 808d68e:	fb93 f3f2 	sdiv	r3, r3, r2
 808d692:	2100      	movs	r1, #0
 808d694:	2201      	movs	r2, #1
 808d696:	429a      	cmp	r2, r3
 808d698:	da02      	bge.n	808d6a0 <__s2b+0x22>
 808d69a:	0052      	lsls	r2, r2, #1
 808d69c:	3101      	adds	r1, #1
 808d69e:	e7fa      	b.n	808d696 <__s2b+0x18>
 808d6a0:	4630      	mov	r0, r6
 808d6a2:	f7ff ff65 	bl	808d570 <_Balloc>
 808d6a6:	9b08      	ldr	r3, [sp, #32]
 808d6a8:	2d09      	cmp	r5, #9
 808d6aa:	6143      	str	r3, [r0, #20]
 808d6ac:	f04f 0301 	mov.w	r3, #1
 808d6b0:	6103      	str	r3, [r0, #16]
 808d6b2:	dd11      	ble.n	808d6d8 <__s2b+0x5a>
 808d6b4:	f104 0809 	add.w	r8, r4, #9
 808d6b8:	46c1      	mov	r9, r8
 808d6ba:	442c      	add	r4, r5
 808d6bc:	f819 3b01 	ldrb.w	r3, [r9], #1
 808d6c0:	4601      	mov	r1, r0
 808d6c2:	3b30      	subs	r3, #48	; 0x30
 808d6c4:	220a      	movs	r2, #10
 808d6c6:	4630      	mov	r0, r6
 808d6c8:	f7ff ff9e 	bl	808d608 <__multadd>
 808d6cc:	45a1      	cmp	r9, r4
 808d6ce:	d1f5      	bne.n	808d6bc <__s2b+0x3e>
 808d6d0:	eb08 0405 	add.w	r4, r8, r5
 808d6d4:	3c08      	subs	r4, #8
 808d6d6:	e001      	b.n	808d6dc <__s2b+0x5e>
 808d6d8:	340a      	adds	r4, #10
 808d6da:	2509      	movs	r5, #9
 808d6dc:	1b2d      	subs	r5, r5, r4
 808d6de:	1963      	adds	r3, r4, r5
 808d6e0:	429f      	cmp	r7, r3
 808d6e2:	dd08      	ble.n	808d6f6 <__s2b+0x78>
 808d6e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 808d6e8:	4601      	mov	r1, r0
 808d6ea:	3b30      	subs	r3, #48	; 0x30
 808d6ec:	220a      	movs	r2, #10
 808d6ee:	4630      	mov	r0, r6
 808d6f0:	f7ff ff8a 	bl	808d608 <__multadd>
 808d6f4:	e7f3      	b.n	808d6de <__s2b+0x60>
 808d6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808d6fa <__hi0bits>:
 808d6fa:	0c03      	lsrs	r3, r0, #16
 808d6fc:	041b      	lsls	r3, r3, #16
 808d6fe:	b913      	cbnz	r3, 808d706 <__hi0bits+0xc>
 808d700:	0400      	lsls	r0, r0, #16
 808d702:	2310      	movs	r3, #16
 808d704:	e000      	b.n	808d708 <__hi0bits+0xe>
 808d706:	2300      	movs	r3, #0
 808d708:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 808d70c:	bf04      	itt	eq
 808d70e:	0200      	lsleq	r0, r0, #8
 808d710:	3308      	addeq	r3, #8
 808d712:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 808d716:	bf04      	itt	eq
 808d718:	0100      	lsleq	r0, r0, #4
 808d71a:	3304      	addeq	r3, #4
 808d71c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 808d720:	bf04      	itt	eq
 808d722:	0080      	lsleq	r0, r0, #2
 808d724:	3302      	addeq	r3, #2
 808d726:	2800      	cmp	r0, #0
 808d728:	db03      	blt.n	808d732 <__hi0bits+0x38>
 808d72a:	0042      	lsls	r2, r0, #1
 808d72c:	d503      	bpl.n	808d736 <__hi0bits+0x3c>
 808d72e:	1c58      	adds	r0, r3, #1
 808d730:	4770      	bx	lr
 808d732:	4618      	mov	r0, r3
 808d734:	4770      	bx	lr
 808d736:	2020      	movs	r0, #32
 808d738:	4770      	bx	lr

0808d73a <__lo0bits>:
 808d73a:	6803      	ldr	r3, [r0, #0]
 808d73c:	f013 0207 	ands.w	r2, r3, #7
 808d740:	d00b      	beq.n	808d75a <__lo0bits+0x20>
 808d742:	07d9      	lsls	r1, r3, #31
 808d744:	d422      	bmi.n	808d78c <__lo0bits+0x52>
 808d746:	079a      	lsls	r2, r3, #30
 808d748:	bf4b      	itete	mi
 808d74a:	085b      	lsrmi	r3, r3, #1
 808d74c:	089b      	lsrpl	r3, r3, #2
 808d74e:	6003      	strmi	r3, [r0, #0]
 808d750:	6003      	strpl	r3, [r0, #0]
 808d752:	bf4c      	ite	mi
 808d754:	2001      	movmi	r0, #1
 808d756:	2002      	movpl	r0, #2
 808d758:	4770      	bx	lr
 808d75a:	b299      	uxth	r1, r3
 808d75c:	b909      	cbnz	r1, 808d762 <__lo0bits+0x28>
 808d75e:	0c1b      	lsrs	r3, r3, #16
 808d760:	2210      	movs	r2, #16
 808d762:	f013 0fff 	tst.w	r3, #255	; 0xff
 808d766:	bf04      	itt	eq
 808d768:	0a1b      	lsreq	r3, r3, #8
 808d76a:	3208      	addeq	r2, #8
 808d76c:	0719      	lsls	r1, r3, #28
 808d76e:	bf04      	itt	eq
 808d770:	091b      	lsreq	r3, r3, #4
 808d772:	3204      	addeq	r2, #4
 808d774:	0799      	lsls	r1, r3, #30
 808d776:	bf04      	itt	eq
 808d778:	089b      	lsreq	r3, r3, #2
 808d77a:	3202      	addeq	r2, #2
 808d77c:	07d9      	lsls	r1, r3, #31
 808d77e:	d402      	bmi.n	808d786 <__lo0bits+0x4c>
 808d780:	085b      	lsrs	r3, r3, #1
 808d782:	d005      	beq.n	808d790 <__lo0bits+0x56>
 808d784:	3201      	adds	r2, #1
 808d786:	6003      	str	r3, [r0, #0]
 808d788:	4610      	mov	r0, r2
 808d78a:	4770      	bx	lr
 808d78c:	2000      	movs	r0, #0
 808d78e:	4770      	bx	lr
 808d790:	2020      	movs	r0, #32
 808d792:	4770      	bx	lr

0808d794 <__i2b>:
 808d794:	b510      	push	{r4, lr}
 808d796:	460c      	mov	r4, r1
 808d798:	2101      	movs	r1, #1
 808d79a:	f7ff fee9 	bl	808d570 <_Balloc>
 808d79e:	2201      	movs	r2, #1
 808d7a0:	6144      	str	r4, [r0, #20]
 808d7a2:	6102      	str	r2, [r0, #16]
 808d7a4:	bd10      	pop	{r4, pc}

0808d7a6 <__multiply>:
 808d7a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d7aa:	4614      	mov	r4, r2
 808d7ac:	690a      	ldr	r2, [r1, #16]
 808d7ae:	6923      	ldr	r3, [r4, #16]
 808d7b0:	4688      	mov	r8, r1
 808d7b2:	429a      	cmp	r2, r3
 808d7b4:	bfbe      	ittt	lt
 808d7b6:	460b      	movlt	r3, r1
 808d7b8:	46a0      	movlt	r8, r4
 808d7ba:	461c      	movlt	r4, r3
 808d7bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808d7c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808d7c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d7c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808d7cc:	eb07 0609 	add.w	r6, r7, r9
 808d7d0:	429e      	cmp	r6, r3
 808d7d2:	bfc8      	it	gt
 808d7d4:	3101      	addgt	r1, #1
 808d7d6:	f7ff fecb 	bl	808d570 <_Balloc>
 808d7da:	f100 0514 	add.w	r5, r0, #20
 808d7de:	462b      	mov	r3, r5
 808d7e0:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808d7e4:	2200      	movs	r2, #0
 808d7e6:	4563      	cmp	r3, ip
 808d7e8:	d202      	bcs.n	808d7f0 <__multiply+0x4a>
 808d7ea:	f843 2b04 	str.w	r2, [r3], #4
 808d7ee:	e7fa      	b.n	808d7e6 <__multiply+0x40>
 808d7f0:	f104 0214 	add.w	r2, r4, #20
 808d7f4:	f108 0114 	add.w	r1, r8, #20
 808d7f8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808d7fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 808d800:	9300      	str	r3, [sp, #0]
 808d802:	9b00      	ldr	r3, [sp, #0]
 808d804:	9201      	str	r2, [sp, #4]
 808d806:	4293      	cmp	r3, r2
 808d808:	d957      	bls.n	808d8ba <__multiply+0x114>
 808d80a:	f8b2 b000 	ldrh.w	fp, [r2]
 808d80e:	f1bb 0f00 	cmp.w	fp, #0
 808d812:	d023      	beq.n	808d85c <__multiply+0xb6>
 808d814:	4689      	mov	r9, r1
 808d816:	46ae      	mov	lr, r5
 808d818:	f04f 0800 	mov.w	r8, #0
 808d81c:	f859 4b04 	ldr.w	r4, [r9], #4
 808d820:	f8be a000 	ldrh.w	sl, [lr]
 808d824:	b2a3      	uxth	r3, r4
 808d826:	fb0b a303 	mla	r3, fp, r3, sl
 808d82a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 808d82e:	f8de 4000 	ldr.w	r4, [lr]
 808d832:	4443      	add	r3, r8
 808d834:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808d838:	fb0b 840a 	mla	r4, fp, sl, r8
 808d83c:	46f2      	mov	sl, lr
 808d83e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 808d842:	b29b      	uxth	r3, r3
 808d844:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808d848:	454f      	cmp	r7, r9
 808d84a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808d84e:	f84a 3b04 	str.w	r3, [sl], #4
 808d852:	d901      	bls.n	808d858 <__multiply+0xb2>
 808d854:	46d6      	mov	lr, sl
 808d856:	e7e1      	b.n	808d81c <__multiply+0x76>
 808d858:	f8ce 8004 	str.w	r8, [lr, #4]
 808d85c:	9b01      	ldr	r3, [sp, #4]
 808d85e:	3204      	adds	r2, #4
 808d860:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 808d864:	f1ba 0f00 	cmp.w	sl, #0
 808d868:	d021      	beq.n	808d8ae <__multiply+0x108>
 808d86a:	462c      	mov	r4, r5
 808d86c:	4689      	mov	r9, r1
 808d86e:	682b      	ldr	r3, [r5, #0]
 808d870:	f04f 0800 	mov.w	r8, #0
 808d874:	f8b9 e000 	ldrh.w	lr, [r9]
 808d878:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 808d87c:	b29b      	uxth	r3, r3
 808d87e:	fb0a be0e 	mla	lr, sl, lr, fp
 808d882:	46a3      	mov	fp, r4
 808d884:	44f0      	add	r8, lr
 808d886:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 808d88a:	f84b 3b04 	str.w	r3, [fp], #4
 808d88e:	f859 3b04 	ldr.w	r3, [r9], #4
 808d892:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 808d896:	0c1b      	lsrs	r3, r3, #16
 808d898:	fb0a e303 	mla	r3, sl, r3, lr
 808d89c:	454f      	cmp	r7, r9
 808d89e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808d8a2:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808d8a6:	d901      	bls.n	808d8ac <__multiply+0x106>
 808d8a8:	465c      	mov	r4, fp
 808d8aa:	e7e3      	b.n	808d874 <__multiply+0xce>
 808d8ac:	6063      	str	r3, [r4, #4]
 808d8ae:	3504      	adds	r5, #4
 808d8b0:	e7a7      	b.n	808d802 <__multiply+0x5c>
 808d8b2:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808d8b6:	b913      	cbnz	r3, 808d8be <__multiply+0x118>
 808d8b8:	3e01      	subs	r6, #1
 808d8ba:	2e00      	cmp	r6, #0
 808d8bc:	dcf9      	bgt.n	808d8b2 <__multiply+0x10c>
 808d8be:	6106      	str	r6, [r0, #16]
 808d8c0:	b003      	add	sp, #12
 808d8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808d8c8 <__pow5mult>:
 808d8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808d8cc:	4615      	mov	r5, r2
 808d8ce:	f012 0203 	ands.w	r2, r2, #3
 808d8d2:	4606      	mov	r6, r0
 808d8d4:	460f      	mov	r7, r1
 808d8d6:	d007      	beq.n	808d8e8 <__pow5mult+0x20>
 808d8d8:	4c21      	ldr	r4, [pc, #132]	; (808d960 <__pow5mult+0x98>)
 808d8da:	3a01      	subs	r2, #1
 808d8dc:	2300      	movs	r3, #0
 808d8de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808d8e2:	f7ff fe91 	bl	808d608 <__multadd>
 808d8e6:	4607      	mov	r7, r0
 808d8e8:	10ad      	asrs	r5, r5, #2
 808d8ea:	d036      	beq.n	808d95a <__pow5mult+0x92>
 808d8ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808d8ee:	b93c      	cbnz	r4, 808d900 <__pow5mult+0x38>
 808d8f0:	2010      	movs	r0, #16
 808d8f2:	f7fa f869 	bl	80879c8 <malloc>
 808d8f6:	6270      	str	r0, [r6, #36]	; 0x24
 808d8f8:	6044      	str	r4, [r0, #4]
 808d8fa:	6084      	str	r4, [r0, #8]
 808d8fc:	6004      	str	r4, [r0, #0]
 808d8fe:	60c4      	str	r4, [r0, #12]
 808d900:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808d904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808d908:	b94c      	cbnz	r4, 808d91e <__pow5mult+0x56>
 808d90a:	f240 2171 	movw	r1, #625	; 0x271
 808d90e:	4630      	mov	r0, r6
 808d910:	f7ff ff40 	bl	808d794 <__i2b>
 808d914:	4604      	mov	r4, r0
 808d916:	2300      	movs	r3, #0
 808d918:	f8c8 0008 	str.w	r0, [r8, #8]
 808d91c:	6003      	str	r3, [r0, #0]
 808d91e:	f04f 0800 	mov.w	r8, #0
 808d922:	07eb      	lsls	r3, r5, #31
 808d924:	d50a      	bpl.n	808d93c <__pow5mult+0x74>
 808d926:	4639      	mov	r1, r7
 808d928:	4622      	mov	r2, r4
 808d92a:	4630      	mov	r0, r6
 808d92c:	f7ff ff3b 	bl	808d7a6 <__multiply>
 808d930:	4681      	mov	r9, r0
 808d932:	4639      	mov	r1, r7
 808d934:	4630      	mov	r0, r6
 808d936:	f7ff fe50 	bl	808d5da <_Bfree>
 808d93a:	464f      	mov	r7, r9
 808d93c:	106d      	asrs	r5, r5, #1
 808d93e:	d00c      	beq.n	808d95a <__pow5mult+0x92>
 808d940:	6820      	ldr	r0, [r4, #0]
 808d942:	b108      	cbz	r0, 808d948 <__pow5mult+0x80>
 808d944:	4604      	mov	r4, r0
 808d946:	e7ec      	b.n	808d922 <__pow5mult+0x5a>
 808d948:	4622      	mov	r2, r4
 808d94a:	4621      	mov	r1, r4
 808d94c:	4630      	mov	r0, r6
 808d94e:	f7ff ff2a 	bl	808d7a6 <__multiply>
 808d952:	6020      	str	r0, [r4, #0]
 808d954:	f8c0 8000 	str.w	r8, [r0]
 808d958:	e7f4      	b.n	808d944 <__pow5mult+0x7c>
 808d95a:	4638      	mov	r0, r7
 808d95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808d960:	08090e08 	.word	0x08090e08

0808d964 <__lshift>:
 808d964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808d968:	460c      	mov	r4, r1
 808d96a:	4607      	mov	r7, r0
 808d96c:	4691      	mov	r9, r2
 808d96e:	6926      	ldr	r6, [r4, #16]
 808d970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808d974:	4456      	add	r6, sl
 808d976:	6849      	ldr	r1, [r1, #4]
 808d978:	68a3      	ldr	r3, [r4, #8]
 808d97a:	1c75      	adds	r5, r6, #1
 808d97c:	42ab      	cmp	r3, r5
 808d97e:	da02      	bge.n	808d986 <__lshift+0x22>
 808d980:	3101      	adds	r1, #1
 808d982:	005b      	lsls	r3, r3, #1
 808d984:	e7fa      	b.n	808d97c <__lshift+0x18>
 808d986:	4638      	mov	r0, r7
 808d988:	f7ff fdf2 	bl	808d570 <_Balloc>
 808d98c:	2300      	movs	r3, #0
 808d98e:	4680      	mov	r8, r0
 808d990:	461a      	mov	r2, r3
 808d992:	f100 0114 	add.w	r1, r0, #20
 808d996:	4553      	cmp	r3, sl
 808d998:	da03      	bge.n	808d9a2 <__lshift+0x3e>
 808d99a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 808d99e:	3301      	adds	r3, #1
 808d9a0:	e7f9      	b.n	808d996 <__lshift+0x32>
 808d9a2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 808d9a6:	6920      	ldr	r0, [r4, #16]
 808d9a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 808d9ac:	f019 091f 	ands.w	r9, r9, #31
 808d9b0:	f104 0114 	add.w	r1, r4, #20
 808d9b4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 808d9b8:	d014      	beq.n	808d9e4 <__lshift+0x80>
 808d9ba:	f1c9 0c20 	rsb	ip, r9, #32
 808d9be:	2200      	movs	r2, #0
 808d9c0:	6808      	ldr	r0, [r1, #0]
 808d9c2:	469a      	mov	sl, r3
 808d9c4:	fa00 f009 	lsl.w	r0, r0, r9
 808d9c8:	4302      	orrs	r2, r0
 808d9ca:	f843 2b04 	str.w	r2, [r3], #4
 808d9ce:	f851 2b04 	ldr.w	r2, [r1], #4
 808d9d2:	458e      	cmp	lr, r1
 808d9d4:	fa22 f20c 	lsr.w	r2, r2, ip
 808d9d8:	d8f2      	bhi.n	808d9c0 <__lshift+0x5c>
 808d9da:	f8ca 2004 	str.w	r2, [sl, #4]
 808d9de:	b142      	cbz	r2, 808d9f2 <__lshift+0x8e>
 808d9e0:	1cb5      	adds	r5, r6, #2
 808d9e2:	e006      	b.n	808d9f2 <__lshift+0x8e>
 808d9e4:	3b04      	subs	r3, #4
 808d9e6:	f851 2b04 	ldr.w	r2, [r1], #4
 808d9ea:	458e      	cmp	lr, r1
 808d9ec:	f843 2f04 	str.w	r2, [r3, #4]!
 808d9f0:	d8f9      	bhi.n	808d9e6 <__lshift+0x82>
 808d9f2:	3d01      	subs	r5, #1
 808d9f4:	4638      	mov	r0, r7
 808d9f6:	f8c8 5010 	str.w	r5, [r8, #16]
 808d9fa:	4621      	mov	r1, r4
 808d9fc:	f7ff fded 	bl	808d5da <_Bfree>
 808da00:	4640      	mov	r0, r8
 808da02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808da06 <__mcmp>:
 808da06:	6903      	ldr	r3, [r0, #16]
 808da08:	690a      	ldr	r2, [r1, #16]
 808da0a:	b510      	push	{r4, lr}
 808da0c:	1a9b      	subs	r3, r3, r2
 808da0e:	d111      	bne.n	808da34 <__mcmp+0x2e>
 808da10:	0092      	lsls	r2, r2, #2
 808da12:	3014      	adds	r0, #20
 808da14:	3114      	adds	r1, #20
 808da16:	1883      	adds	r3, r0, r2
 808da18:	440a      	add	r2, r1
 808da1a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 808da1e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808da22:	428c      	cmp	r4, r1
 808da24:	d002      	beq.n	808da2c <__mcmp+0x26>
 808da26:	d307      	bcc.n	808da38 <__mcmp+0x32>
 808da28:	2001      	movs	r0, #1
 808da2a:	bd10      	pop	{r4, pc}
 808da2c:	4298      	cmp	r0, r3
 808da2e:	d3f4      	bcc.n	808da1a <__mcmp+0x14>
 808da30:	2000      	movs	r0, #0
 808da32:	bd10      	pop	{r4, pc}
 808da34:	4618      	mov	r0, r3
 808da36:	bd10      	pop	{r4, pc}
 808da38:	f04f 30ff 	mov.w	r0, #4294967295
 808da3c:	bd10      	pop	{r4, pc}

0808da3e <__mdiff>:
 808da3e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808da42:	460c      	mov	r4, r1
 808da44:	4607      	mov	r7, r0
 808da46:	4611      	mov	r1, r2
 808da48:	4620      	mov	r0, r4
 808da4a:	4615      	mov	r5, r2
 808da4c:	f7ff ffdb 	bl	808da06 <__mcmp>
 808da50:	1e06      	subs	r6, r0, #0
 808da52:	d108      	bne.n	808da66 <__mdiff+0x28>
 808da54:	4631      	mov	r1, r6
 808da56:	4638      	mov	r0, r7
 808da58:	f7ff fd8a 	bl	808d570 <_Balloc>
 808da5c:	2301      	movs	r3, #1
 808da5e:	6103      	str	r3, [r0, #16]
 808da60:	6146      	str	r6, [r0, #20]
 808da62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808da66:	bfbc      	itt	lt
 808da68:	4623      	movlt	r3, r4
 808da6a:	462c      	movlt	r4, r5
 808da6c:	4638      	mov	r0, r7
 808da6e:	6861      	ldr	r1, [r4, #4]
 808da70:	bfba      	itte	lt
 808da72:	461d      	movlt	r5, r3
 808da74:	2601      	movlt	r6, #1
 808da76:	2600      	movge	r6, #0
 808da78:	f7ff fd7a 	bl	808d570 <_Balloc>
 808da7c:	692b      	ldr	r3, [r5, #16]
 808da7e:	60c6      	str	r6, [r0, #12]
 808da80:	6926      	ldr	r6, [r4, #16]
 808da82:	f105 0914 	add.w	r9, r5, #20
 808da86:	f104 0114 	add.w	r1, r4, #20
 808da8a:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 808da8e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 808da92:	f100 0514 	add.w	r5, r0, #20
 808da96:	f04f 0c00 	mov.w	ip, #0
 808da9a:	f851 2b04 	ldr.w	r2, [r1], #4
 808da9e:	f859 4b04 	ldr.w	r4, [r9], #4
 808daa2:	b293      	uxth	r3, r2
 808daa4:	449c      	add	ip, r3
 808daa6:	b2a3      	uxth	r3, r4
 808daa8:	0c24      	lsrs	r4, r4, #16
 808daaa:	ebc3 030c 	rsb	r3, r3, ip
 808daae:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 808dab2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808dab6:	b29b      	uxth	r3, r3
 808dab8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 808dabc:	45c8      	cmp	r8, r9
 808dabe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808dac2:	468e      	mov	lr, r1
 808dac4:	f845 2b04 	str.w	r2, [r5], #4
 808dac8:	d8e7      	bhi.n	808da9a <__mdiff+0x5c>
 808daca:	45be      	cmp	lr, r7
 808dacc:	d20e      	bcs.n	808daec <__mdiff+0xae>
 808dace:	f85e 1b04 	ldr.w	r1, [lr], #4
 808dad2:	b28a      	uxth	r2, r1
 808dad4:	4462      	add	r2, ip
 808dad6:	1413      	asrs	r3, r2, #16
 808dad8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 808dadc:	b292      	uxth	r2, r2
 808dade:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808dae2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808dae6:	f845 2b04 	str.w	r2, [r5], #4
 808daea:	e7ee      	b.n	808daca <__mdiff+0x8c>
 808daec:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 808daf0:	b90b      	cbnz	r3, 808daf6 <__mdiff+0xb8>
 808daf2:	3e01      	subs	r6, #1
 808daf4:	e7fa      	b.n	808daec <__mdiff+0xae>
 808daf6:	6106      	str	r6, [r0, #16]
 808daf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808dafc <__ulp>:
 808dafc:	4b10      	ldr	r3, [pc, #64]	; (808db40 <__ulp+0x44>)
 808dafe:	400b      	ands	r3, r1
 808db00:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808db04:	2b00      	cmp	r3, #0
 808db06:	dd02      	ble.n	808db0e <__ulp+0x12>
 808db08:	2000      	movs	r0, #0
 808db0a:	4619      	mov	r1, r3
 808db0c:	4770      	bx	lr
 808db0e:	425b      	negs	r3, r3
 808db10:	151b      	asrs	r3, r3, #20
 808db12:	2b13      	cmp	r3, #19
 808db14:	f04f 0000 	mov.w	r0, #0
 808db18:	f04f 0100 	mov.w	r1, #0
 808db1c:	dc04      	bgt.n	808db28 <__ulp+0x2c>
 808db1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808db22:	fa42 f103 	asr.w	r1, r2, r3
 808db26:	4770      	bx	lr
 808db28:	3b14      	subs	r3, #20
 808db2a:	2b1e      	cmp	r3, #30
 808db2c:	f04f 0201 	mov.w	r2, #1
 808db30:	bfce      	itee	gt
 808db32:	4613      	movgt	r3, r2
 808db34:	f1c3 031f 	rsble	r3, r3, #31
 808db38:	fa02 f303 	lslle.w	r3, r2, r3
 808db3c:	4618      	mov	r0, r3
 808db3e:	4770      	bx	lr
 808db40:	7ff00000 	.word	0x7ff00000

0808db44 <__b2d>:
 808db44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808db46:	6905      	ldr	r5, [r0, #16]
 808db48:	f100 0614 	add.w	r6, r0, #20
 808db4c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 808db50:	f855 4c04 	ldr.w	r4, [r5, #-4]
 808db54:	1f2f      	subs	r7, r5, #4
 808db56:	4620      	mov	r0, r4
 808db58:	f7ff fdcf 	bl	808d6fa <__hi0bits>
 808db5c:	f1c0 0320 	rsb	r3, r0, #32
 808db60:	280a      	cmp	r0, #10
 808db62:	600b      	str	r3, [r1, #0]
 808db64:	dc14      	bgt.n	808db90 <__b2d+0x4c>
 808db66:	f1c0 0e0b 	rsb	lr, r0, #11
 808db6a:	fa24 f10e 	lsr.w	r1, r4, lr
 808db6e:	42be      	cmp	r6, r7
 808db70:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 808db74:	bf34      	ite	cc
 808db76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808db7a:	2100      	movcs	r1, #0
 808db7c:	3015      	adds	r0, #21
 808db7e:	fa04 f000 	lsl.w	r0, r4, r0
 808db82:	fa21 f10e 	lsr.w	r1, r1, lr
 808db86:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808db8a:	ea40 0201 	orr.w	r2, r0, r1
 808db8e:	e023      	b.n	808dbd8 <__b2d+0x94>
 808db90:	42be      	cmp	r6, r7
 808db92:	bf3a      	itte	cc
 808db94:	f1a5 0708 	subcc.w	r7, r5, #8
 808db98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808db9c:	2100      	movcs	r1, #0
 808db9e:	380b      	subs	r0, #11
 808dba0:	d015      	beq.n	808dbce <__b2d+0x8a>
 808dba2:	4084      	lsls	r4, r0
 808dba4:	f1c0 0520 	rsb	r5, r0, #32
 808dba8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 808dbac:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 808dbb0:	42b7      	cmp	r7, r6
 808dbb2:	fa21 fe05 	lsr.w	lr, r1, r5
 808dbb6:	ea44 030e 	orr.w	r3, r4, lr
 808dbba:	bf8c      	ite	hi
 808dbbc:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 808dbc0:	2400      	movls	r4, #0
 808dbc2:	fa01 f000 	lsl.w	r0, r1, r0
 808dbc6:	40ec      	lsrs	r4, r5
 808dbc8:	ea40 0204 	orr.w	r2, r0, r4
 808dbcc:	e004      	b.n	808dbd8 <__b2d+0x94>
 808dbce:	460a      	mov	r2, r1
 808dbd0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808dbd4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808dbd8:	4610      	mov	r0, r2
 808dbda:	4619      	mov	r1, r3
 808dbdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808dbde <__d2b>:
 808dbde:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808dbe2:	461c      	mov	r4, r3
 808dbe4:	2101      	movs	r1, #1
 808dbe6:	4690      	mov	r8, r2
 808dbe8:	9e08      	ldr	r6, [sp, #32]
 808dbea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808dbec:	f7ff fcc0 	bl	808d570 <_Balloc>
 808dbf0:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808dbf4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808dbf8:	4607      	mov	r7, r0
 808dbfa:	b10c      	cbz	r4, 808dc00 <__d2b+0x22>
 808dbfc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 808dc00:	9201      	str	r2, [sp, #4]
 808dc02:	f1b8 0f00 	cmp.w	r8, #0
 808dc06:	d019      	beq.n	808dc3c <__d2b+0x5e>
 808dc08:	a802      	add	r0, sp, #8
 808dc0a:	f840 8d08 	str.w	r8, [r0, #-8]!
 808dc0e:	f7ff fd94 	bl	808d73a <__lo0bits>
 808dc12:	9b00      	ldr	r3, [sp, #0]
 808dc14:	b148      	cbz	r0, 808dc2a <__d2b+0x4c>
 808dc16:	9a01      	ldr	r2, [sp, #4]
 808dc18:	f1c0 0120 	rsb	r1, r0, #32
 808dc1c:	fa02 f101 	lsl.w	r1, r2, r1
 808dc20:	430b      	orrs	r3, r1
 808dc22:	40c2      	lsrs	r2, r0
 808dc24:	617b      	str	r3, [r7, #20]
 808dc26:	9201      	str	r2, [sp, #4]
 808dc28:	e000      	b.n	808dc2c <__d2b+0x4e>
 808dc2a:	617b      	str	r3, [r7, #20]
 808dc2c:	9b01      	ldr	r3, [sp, #4]
 808dc2e:	2b00      	cmp	r3, #0
 808dc30:	bf14      	ite	ne
 808dc32:	2102      	movne	r1, #2
 808dc34:	2101      	moveq	r1, #1
 808dc36:	61bb      	str	r3, [r7, #24]
 808dc38:	6139      	str	r1, [r7, #16]
 808dc3a:	e007      	b.n	808dc4c <__d2b+0x6e>
 808dc3c:	a801      	add	r0, sp, #4
 808dc3e:	f7ff fd7c 	bl	808d73a <__lo0bits>
 808dc42:	9b01      	ldr	r3, [sp, #4]
 808dc44:	2101      	movs	r1, #1
 808dc46:	617b      	str	r3, [r7, #20]
 808dc48:	6139      	str	r1, [r7, #16]
 808dc4a:	3020      	adds	r0, #32
 808dc4c:	b134      	cbz	r4, 808dc5c <__d2b+0x7e>
 808dc4e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808dc52:	4404      	add	r4, r0
 808dc54:	6034      	str	r4, [r6, #0]
 808dc56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808dc5a:	e009      	b.n	808dc70 <__d2b+0x92>
 808dc5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808dc60:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808dc64:	6030      	str	r0, [r6, #0]
 808dc66:	6918      	ldr	r0, [r3, #16]
 808dc68:	f7ff fd47 	bl	808d6fa <__hi0bits>
 808dc6c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 808dc70:	6028      	str	r0, [r5, #0]
 808dc72:	4638      	mov	r0, r7
 808dc74:	b002      	add	sp, #8
 808dc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808dc7a <__ratio>:
 808dc7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808dc7e:	4688      	mov	r8, r1
 808dc80:	4669      	mov	r1, sp
 808dc82:	4681      	mov	r9, r0
 808dc84:	f7ff ff5e 	bl	808db44 <__b2d>
 808dc88:	460d      	mov	r5, r1
 808dc8a:	4604      	mov	r4, r0
 808dc8c:	a901      	add	r1, sp, #4
 808dc8e:	4640      	mov	r0, r8
 808dc90:	f7ff ff58 	bl	808db44 <__b2d>
 808dc94:	460f      	mov	r7, r1
 808dc96:	4606      	mov	r6, r0
 808dc98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808dc9c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808dca0:	4620      	mov	r0, r4
 808dca2:	1a9a      	subs	r2, r3, r2
 808dca4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808dca8:	1ac9      	subs	r1, r1, r3
 808dcaa:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 808dcae:	2b00      	cmp	r3, #0
 808dcb0:	bfcc      	ite	gt
 808dcb2:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808dcb6:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 808dcba:	4632      	mov	r2, r6
 808dcbc:	463b      	mov	r3, r7
 808dcbe:	4629      	mov	r1, r5
 808dcc0:	f7fc f89c 	bl	8089dfc <__aeabi_ddiv>
 808dcc4:	b003      	add	sp, #12
 808dcc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808dcca <__copybits>:
 808dcca:	3901      	subs	r1, #1
 808dccc:	b510      	push	{r4, lr}
 808dcce:	1149      	asrs	r1, r1, #5
 808dcd0:	6914      	ldr	r4, [r2, #16]
 808dcd2:	3101      	adds	r1, #1
 808dcd4:	f102 0314 	add.w	r3, r2, #20
 808dcd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808dcdc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808dce0:	42a3      	cmp	r3, r4
 808dce2:	4602      	mov	r2, r0
 808dce4:	d204      	bcs.n	808dcf0 <__copybits+0x26>
 808dce6:	f853 2b04 	ldr.w	r2, [r3], #4
 808dcea:	f840 2b04 	str.w	r2, [r0], #4
 808dcee:	e7f7      	b.n	808dce0 <__copybits+0x16>
 808dcf0:	2300      	movs	r3, #0
 808dcf2:	428a      	cmp	r2, r1
 808dcf4:	d202      	bcs.n	808dcfc <__copybits+0x32>
 808dcf6:	f842 3b04 	str.w	r3, [r2], #4
 808dcfa:	e7fa      	b.n	808dcf2 <__copybits+0x28>
 808dcfc:	bd10      	pop	{r4, pc}

0808dcfe <__any_on>:
 808dcfe:	f100 0214 	add.w	r2, r0, #20
 808dd02:	6900      	ldr	r0, [r0, #16]
 808dd04:	114b      	asrs	r3, r1, #5
 808dd06:	4298      	cmp	r0, r3
 808dd08:	b510      	push	{r4, lr}
 808dd0a:	db0c      	blt.n	808dd26 <__any_on+0x28>
 808dd0c:	dd0c      	ble.n	808dd28 <__any_on+0x2a>
 808dd0e:	f011 011f 	ands.w	r1, r1, #31
 808dd12:	d009      	beq.n	808dd28 <__any_on+0x2a>
 808dd14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808dd18:	fa24 f001 	lsr.w	r0, r4, r1
 808dd1c:	fa00 f101 	lsl.w	r1, r0, r1
 808dd20:	428c      	cmp	r4, r1
 808dd22:	d10c      	bne.n	808dd3e <__any_on+0x40>
 808dd24:	e000      	b.n	808dd28 <__any_on+0x2a>
 808dd26:	4603      	mov	r3, r0
 808dd28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808dd2c:	4293      	cmp	r3, r2
 808dd2e:	d904      	bls.n	808dd3a <__any_on+0x3c>
 808dd30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808dd34:	2900      	cmp	r1, #0
 808dd36:	d0f9      	beq.n	808dd2c <__any_on+0x2e>
 808dd38:	e001      	b.n	808dd3e <__any_on+0x40>
 808dd3a:	2000      	movs	r0, #0
 808dd3c:	bd10      	pop	{r4, pc}
 808dd3e:	2001      	movs	r0, #1
 808dd40:	bd10      	pop	{r4, pc}

0808dd42 <_calloc_r>:
 808dd42:	b538      	push	{r3, r4, r5, lr}
 808dd44:	fb02 f401 	mul.w	r4, r2, r1
 808dd48:	4621      	mov	r1, r4
 808dd4a:	f7f9 fe85 	bl	8087a58 <_malloc_r>
 808dd4e:	4605      	mov	r5, r0
 808dd50:	b118      	cbz	r0, 808dd5a <_calloc_r+0x18>
 808dd52:	4622      	mov	r2, r4
 808dd54:	2100      	movs	r1, #0
 808dd56:	f7fd f8d5 	bl	808af04 <memset>
 808dd5a:	4628      	mov	r0, r5
 808dd5c:	bd38      	pop	{r3, r4, r5, pc}

0808dd5e <__env_lock>:
 808dd5e:	4770      	bx	lr

0808dd60 <__env_unlock>:
 808dd60:	4770      	bx	lr

0808dd62 <link_code_end>:
	...

0808dd64 <dynalib_user>:
 808dd64:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808dd74:	0000 0000 0100 0402 1008 0000               ............

0808dd80 <_ZTV4File>:
	...
 808dd88:	0931 0808 0941 0808 095b 0808 0955 0808     1...A...[...U...
 808dd98:	0913 0808 097f 0808 0979 0808 0973 0808     ........y...s...

0808dda8 <_ZTV6SdFile>:
	...
 808ddb0:	092f 0808 0933 0808 0a0b 0808 094f 0808     /...3.......O...

0808ddc0 <_ZTV5SdFat>:
	...
 808ddc8:	09b7 0808 09af 0808 09a7 0808 099f 0808     ................
 808ddd8:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 808dde8:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 808ddf8:	831a 7546 6c6c 6120 6464 6572 7373 6120     ..Full address a
 808de08:	646e 7620 6c61 6575 7320 6275 7473 6972     nd value substri
 808de18:	676e 203a 6100 6464 6572 7373 7320 6275     ng: .address sub
 808de28:	7473 6972 676e 203a 7325 0d0a 5600 6c61     string: %s...Val
 808de38:	6575 7320 6275 7473 6972 676e 203a 7325     ue substring: %s
 808de48:	0d0a 2500 322e 0058 6554 706d 7265 7461     ...%.2X.Temperat
 808de58:	7275 2065 6572 6461 6e69 2067 7266 6d6f     ure reading from
 808de68:	4820 4849 3138 3032 5400 6d65 6570 6172      HIH8120.Tempera
 808de78:	7574 6572 7220 6165 6964 676e 6620 6f72     ture reading fro
 808de88:	206d 4d54 3350 0036 6554 706d 7265 7461     m TMP36.Temperat
 808de98:	7275 2065 6572 6461 6e69 2067 7266 6d6f     ure reading from
 808dea8:	4220 454d 6620 726f 4120 706c 6168 6573      BME for Alphase
 808deb8:	736e 0065 7548 696d 6964 7974 7220 6165     nse.Humidity rea
 808dec8:	6964 676e 6620 6f72 206d 4948 3848 3231     ding from HIH812
 808ded8:	0030 7548 696d 6964 7974 7220 6165 6964     0.Humidity readi
 808dee8:	676e 6620 6f72 206d 4d42 0045 7453 7261     ng from BME.Star
 808def8:	2074 666f 6120 706c 6168 3220 7220 6165     t of alpha 2 rea
 808df08:	0064 6f43 6c75 6e64 7427 6320 6d6f 756d     d.Couldn't commu
 808df18:	696e 6163 6574 7720 7469 2068 4d4c 3950     nicate with LMP9
 808df28:	3031 3030 3220 6800 6c61 2066 7276 6665     1000 2.half vref
 808df38:	2032 6461 3173 5300 6174 7574 2073 3d3d     2 ads1.Status ==
 808df48:	3020 6620 6f72 206d 4d4c 3950 3031 3030      0 from LMP91000
 808df58:	3220 7320 6174 7574 2073 6572 0067 392d      2 status reg.-9
 808df68:	0039 7257 7469 6e69 2067 6164 6174 7420     9.Writing data t
 808df78:	206f 6f6c 2067 6966 656c 002e 6946 656c     o log file..File
 808df88:	5320 6174 7472 7420 6d69 7365 6174 706d      Start timestamp
 808df98:	203a 5500 616e 6c62 2065 6f74 7720 6972     : .Unable to wri
 808dfa8:	6574 7420 206f 6f6c 2067 6966 656c 6900     te to log file.i
 808dfb8:	696e 0074 4747 0041 7245 6f72 2072 6572     nit.GGA.Error re
 808dfc8:	6461 6e69 2067 5047 0053 5047 2053 7475     ading GPS.GPS ut
 808dfd8:	2063 7473 6972 676e 203a 4c00 7461 7469     c string: .Latit
 808dfe8:	6475 2065 7473 6972 676e 203a 6c00 6e6f     ude string: .lon
 808dff8:	6967 7574 6564 7320 7274 6e69 3a67 0020     gitude string: .
 808e008:	7245 6f72 2072 6572 6461 6e69 2067 5047     Error reading GP
 808e018:	2053 4d52 0043 562c 434f 203a 2c00 4320     S RMC.,VOC: ., C
 808e028:	3a4f 0020 202c 4f43 3a32 0020 202c 4d50     O: ., CO2: ., PM
 808e038:	3a31 0020 502c 324d 352e 203a 2c00 5020     1: .,PM2.5: ., P
 808e048:	314d 3a30 0020 542c 6d65 3a70 0020 502c     M10: .,Temp: .,P
 808e058:	6572 7373 203a 2c00 5548 3a4d 0020 532c     ress: .,HUM: .,S
 808e068:	646e 203a 2c00 334f 203a 5000 6275 696c     nd: .,O3: .Publi
 808e078:	6873 6465 7020 6d61 7075 6420 7461 2161     shed pamup data!
 808e088:	5000 6275 696c 6873 6465 7320 6e65 6973     .Published sensi
 808e098:	6c62 2065 6164 6174 0021 6543 6c6c 6c75     ble data!.Cellul
 808e0a8:	7261 6920 2073 6964 6173 6c62 6465 002e     ar is disabled..
 808e0b8:	6f43 6c75 6e64 7427 6320 6e6f 656e 7463     Couldn't connect
 808e0c8:	7420 206f 6170 7472 6369 656c 002e 6170      to particle..pa
 808e0d8:	756d 0070 003b 002d 6425 252f 2f6d 7925     mup.;.-.%d/%m/%y
 808e0e8:	252c 3a48 4d25 253a 0053 694c 656e 7420     ,%H:%M:%S.Line t
 808e0f8:	206f 7277 7469 2065 6f74 6320 6f6c 6475     o write to cloud
 808e108:	003a 6c62 6861 6f66 6e72 776f 5300 6e65     :.blahfornow.Sen
 808e118:	6964 676e 6420 7461 2061 6f74 6520 7073     ding data to esp
 808e128:	7420 206f 7075 6f6c 6461 7620 6169 7720      to upload via w
 808e138:	6669 2e69 2e2e 5300 6e65 6964 676e 6420     ifi....Sending d
 808e148:	7461 2061 6f74 6520 7073 7420 206f 7075     ata to esp to up
 808e158:	6f6c 6461 7620 6169 7720 6669 0069 7257     load via wifi.Wr
 808e168:	7469 6e69 2067 6f72 2077 6f74 6620 6c69     iting row to fil
 808e178:	2e65 4400 5645 432c 284f 7070 296d 432c     e..DEV,CO(ppm),C
 808e188:	324f 7028 6d70 2c29 4f56 7343 4928 5141     O2(ppm),VOCs(IAQ
 808e198:	2c29 4d50 2c31 4d50 5f32 2c35 4d50 3031     ),PM1,PM2_5,PM10
 808e1a8:	542c 4328 2c29 7250 7365 2873 426d 7261     ,T(C),Press(mBar
 808e1b8:	2c29 4852 2528 2c29 334f 7028 6270 2c29     ),RH(%),O3(ppb),
 808e1c8:	6142 7474 2528 2c29 6e53 2864 6264 2c29     Batt(%),Snd(db),
 808e1d8:	614c 6974 7574 6564 4c2c 6e6f 6967 7574     Latitude,Longitu
 808e1e8:	6564 4e2c 412f 4e2c 412f 442c 7461 2f65     de,N/A,N/A,Date/
 808e1f8:	6954 656d 2400 2100 0026 5345 2050 6957     Time.$.!&.ESP Wi
 808e208:	6966 6320 6e6f 656e 7463 6f69 206e 7473     fi connection st
 808e218:	7461 7375 6920 3a73 0020 6f43 6e6e 6365     atus is: .Connec
 808e228:	6574 2164 4500 5053 7720 6669 2069 6f63     ted!.ESP wifi co
 808e238:	6e6e 6365 6574 0064 6f4e 4320 6e6f 656e     nnected.No Conne
 808e248:	7463 6f69 006e 5345 2050 6977 6966 6e20     ction.ESP wifi n
 808e258:	746f 6320 6e6f 656e 7463 6465 4000 0021     ot connected.@!.
 808e268:	6553 646e 6e69 2067 656e 2077 6977 6966     Sending new wifi
 808e278:	6320 6572 6564 746e 6169 736c 7420 206f      credentials to 
 808e288:	5345 0050 7553 6363 7365 2173 6700 7465     ESP.Success!.get
 808e298:	6565 7270 6d6f 6164 6174 2e00 7874 0074     eepromdata..txt.
 808e2a8:	6843 6365 696b 676e 6620 726f 7320 2064     Checking for sd 
 808e2b8:	6163 6472 6c00 676f 005f 7243 6165 6574     card.log_.Create
 808e2c8:	2064 656e 2077 6966 656c 7420 206f 6f6c     d new file to lo
 808e2d8:	2067 6f74 7520 4453 6320 7261 3a64 0020     g to uSD card: .
 808e2e8:	6f4e 7520 4453 6320 7261 2064 6564 6574     No uSD card dete
 808e2f8:	7463 6465 002e 7453 7261 6974 676e 4c20     cted..Starting L
 808e308:	504d 3139 3030 2030 4f43 6920 696e 6974     MP91000 CO initi
 808e318:	6c61 7a69 7461 6f69 006e 6f43 6c75 6e64     alization.Couldn
 808e328:	7427 6320 6d6f 756d 696e 6163 6574 7720     't communicate w
 808e338:	7469 2068 4d4c 3950 3031 3030 315f 6620     ith LMP91000_1 f
 808e348:	726f 4320 004f 6e49 7469 6169 696c 657a     or CO.Initialize
 808e358:	2064 4d4c 3950 3031 3030 315f 6620 726f     d LMP91000_1 for
 808e368:	4320 004f 6e49 7469 6169 696c 657a 2064      CO.Initialized 
 808e378:	4d4c 3950 3031 3030 6620 726f 4320 004f     LMP91000 for CO.
 808e388:	6f43 6c75 2064 6f6e 2074 6f63 6d6d 6e75     Could not commun
 808e398:	6369 7461 2065 6977 6874 4120 6164 7266     icate with Adafr
 808e3a8:	6975 5f74 4441 3153 3131 2035 6f66 2072     uit_ADS1115 for 
 808e3b8:	4f43 5300 6174 7472 6e69 2067 4d4c 3950     CO.Starting LMP9
 808e3c8:	3031 3030 325f 6920 696e 6974 6c61 7a69     1000_2 initializ
 808e3d8:	7461 6f69 006e 6f43 6c75 6e64 7427 6320     ation.Couldn't c
 808e3e8:	6d6f 756d 696e 6163 6574 7720 7469 2068     ommunicate with 
 808e3f8:	4d4c 3950 3031 3030 6620 726f 3220 4900     LMP91000 for 2.I
 808e408:	696e 6974 6c61 7a69 6465 4c20 504d 3139     nitialized LMP91
 808e418:	3030 2030 6f66 2072 4f43 3220 4500 5053     000 for CO 2.ESP
 808e428:	7220 7365 7465 0021 5746 5620 7265 6973      reset!.FW Versi
 808e438:	6e6f 203a 4200 6975 646c 203a 5300 7379     on: .Build: .Sys
 808e448:	6574 206d 6576 7372 6f69 3a6e 2520 0073     tem version: %s.
 808e458:	002a 754f 7074 7475 6974 676e 4320 204f     *.Outputting CO 
 808e468:	6f74 5020 2e49 0a00 260d 4500 746e 7265     to PI....&.Enter
 808e478:	7320 7274 6e69 2067 6128 6464 6572 7373      string (address
 808e488:	762c 6c61 6575 0029 7573 6563 7373 6920     ,value).sucess i
 808e498:	206e 7277 7469 6e69 0067 6166 6c69 6465     n writing.failed
 808e4a8:	7720 6972 6974 676e 7320 7274 6e69 0067      writing string.
 808e4b8:	7543 7272 6e65 2074 7473 726f 6465 7320     Current stored s
 808e4c8:	6973 3a64 0020 7543 7272 6e65 2074 7473     sid: .Current st
 808e4d8:	726f 6465 7020 7361 7773 726f 3a64 0020     ored password: .
 808e4e8:	6c50 6165 6573 6520 746e 7265 7020 7361     Please enter pas
 808e4f8:	7773 726f 2064 6e69 6f20 6472 7265 7420     sword in order t
 808e508:	206f 616d 656b 6320 6168 676e 7365 0a2e     o make changes..
 808e518:	000d 6f62 6c75 0064 6150 7373 6f77 6472     ..bould.Password
 808e528:	6320 726f 6572 7463 0021 6e45 6574 2072      correct!.Enter 
 808e538:	656e 2077 7373 6469 003a 6f59 7275 6e20     new ssid:.Your n
 808e548:	7765 7320 6973 2064 6977 6c6c 6220 3a65     ew ssid will be:
 808e558:	0020 7349 7420 6968 2073 6b6f 7961 283f      .Is this okay?(
 808e568:	2079 726f 6e20 0029 6153 6976 676e 6e20     y or n).Saving n
 808e578:	7765 7320 6973 0064 6e45 6574 2072 656e     ew ssid.Enter ne
 808e588:	2077 6170 7373 6f77 6472 5900 756f 2072     w password.Your 
 808e598:	656e 2077 6170 7373 6f77 6472 7720 6c69     new password wil
 808e5a8:	206c 6562 203a 5300 7661 6e69 2067 656e     l be: .Saving ne
 808e5b8:	2077 6170 7373 6f77 6472 6f00 616b 2c79     w password.okay,
 808e5c8:	6e20 206f 7270 626f 656c 0a6d 000d 6c50      no problem...Pl
 808e5d8:	6165 6573 6520 746e 7265 7020 7361 7773     ease enter passw
 808e5e8:	726f 2064 6e69 6f20 6472 7265 7420 206f     ord in order to 
 808e5f8:	6e65 6261 656c 6420 7461 2061 7570 6873     enable data push
 808e608:	7420 206f 6553 736e 6269 656c 4920 746f      to Sensible Iot
 808e618:	6900 736d 6e65 6973 6c62 0065 6e45 6261     .imsensible.Enab
 808e628:	696c 676e 7320 6e65 6973 6c62 2065 6f69     ling sensible io
 808e638:	2074 6164 6174 7020 7375 2e68 0a00 490d     t data push....I
 808e648:	636e 726f 6572 7463 7020 7361 7773 726f     ncorrect passwor
 808e658:	2164 4300 7275 6572 746e 4420 7665 6369     d!.Current Devic
 808e668:	2065 4449 003a 6c50 6165 6573 6520 746e     e ID:.Please ent
 808e678:	7265 7020 7361 7773 726f 2064 6e69 6f20     er password in o
 808e688:	6472 7265 7420 206f 6863 6e61 6567 7420     rder to change t
 808e698:	6568 4920 0044 6e45 6574 2072 656e 2077     he ID.Enter new 
 808e6a8:	6544 6976 6563 4920 3a44 0a00 4e0d 7765     Device ID:...New
 808e6b8:	4420 7665 6369 2065 4449 003a 0d0a 6e49      Device ID:...In
 808e6c8:	6176 696c 2064 6176 756c 2165 5000 656c     valid value!.Ple
 808e6d8:	7361 2065 6e65 6574 2072 6170 7373 6f77     ase enter passwo
 808e6e8:	6472 6920 206e 726f 6564 2072 6f74 6120     rd in order to a
 808e6f8:	7070 796c 6420 6665 7561 746c 7320 7465     pply default set
 808e708:	6974 676e 0073 6150 7373 6f77 6472 6320     tings.Password c
 808e718:	726f 6572 7463 202c 6572 6573 7474 6e69     orrect, resettin
 808e728:	2067 6c61 206c 6573 7474 6e69 7367 7420     g all settings t
 808e738:	206f 6564 6166 6c75 2174 2020 6c50 6165     o default!  Plea
 808e748:	6573 7220 7365 7465 7920 756f 2072 4449     se reset your ID
 808e758:	7420 206f 6874 2065 6e6f 2065 6873 776f      to the one show
 808e768:	206e 6e6f 7920 756f 2072 6e65 6c63 736f     n on your enclos
 808e778:	7275 2e65 4500 746e 7265 6e20 7765 4420     ure..Enter new D
 808e788:	7665 6369 2065 6974 656d 6120 646e 6420     evice time and d
 808e798:	7461 2065 3128 2030 6964 6967 2074 7065     ate (10 digit ep
 808e7a8:	636f 2068 6974 656d 7473 6d61 2970 003a     och timestamp):.
 808e7b8:	0d0a 654e 2077 6544 6976 6563 5420 6d69     ..New Device Tim
 808e7c8:	3a65 4500 746e 7265 6e20 7765 4420 7665     e:.Enter new Dev
 808e7d8:	6369 2065 6974 656d 7a20 6e6f 2065 2d28     ice time zone (-
 808e7e8:	3231 302e 7420 206f 3431 302e 0029 0d0a     12.0 to 14.0)...
 808e7f8:	654e 2077 6544 6976 6563 7420 6d69 2065     New Device time 
 808e808:	6f7a 656e 003a 7543 7272 6e65 2074 7246     zone:.Current Fr
 808e818:	7165 6575 636e 3a79 0020 7e28 2032 6573     equency: .(~2 se
 808e828:	6f63 646e 2029 656d 7361 7275 6d65 6e65     cond) measuremen
 808e838:	7374 4500 746e 7265 6e20 7765 6120 6f6d     ts.Enter new amo
 808e848:	6e75 0a74 000d 0d0a 654e 2077 7246 7165     unt.....New Freq
 808e858:	6575 636e 3a79 0020 7543 7272 6e65 2074     uency: .Current 
 808e868:	4f43 2032 6c73 706f 3a65 2000 7070 006d     CO2 slope:. ppm.
 808e878:	6e45 6574 2072 656e 2077 4f43 2032 6c73     Enter new CO2 sl
 808e888:	706f 0a65 000d 0d0a 654e 2077 4f43 2032     ope.....New CO2 
 808e898:	6c73 706f 3a65 0020 7543 7272 6e65 2074     slope: .Current 
 808e8a8:	4f43 2032 657a 6f72 003a 6e45 6574 2072     CO2 zero:.Enter 
 808e8b8:	656e 2077 4f43 2032 655a 6f72 0d0a 0a00     new CO2 Zero....
 808e8c8:	4e0d 7765 4320 324f 7a20 7265 3a6f 0020     .New CO2 zero: .
 808e8d8:	7543 7272 6e65 2074 4f43 7320 6f6c 6570     Current CO slope
 808e8e8:	003a 6e45 6574 2072 656e 2077 4f43 7320     :.Enter new CO s
 808e8f8:	6f6c 6570 0d0a 0a00 4e0d 7765 4320 414f     lope.....New COA
 808e908:	7320 6f6c 6570 203a 4300 7275 6572 746e      slope: .Current
 808e918:	4320 5f4f 2041 657a 6f72 003a 7020 6270      CO_A zero:. ppb
 808e928:	4500 746e 7265 6e20 7765 4320 204f 655a     .Enter new CO Ze
 808e938:	6f72 0d0a 0a00 4e0d 7765 4320 204f 657a     ro.....New CO ze
 808e948:	6f72 203a 4300 7275 6572 746e 5020 314d     ro: .Current PM1
 808e958:	7320 6f6c 6570 003a 6e45 6574 2072 656e      slope:.Enter ne
 808e968:	2077 4d50 2031 6c73 706f 0a65 000d 0d0a     w PM1 slope.....
 808e978:	654e 2077 4d50 2031 6c73 706f 3a65 0020     New PM1 slope: .
 808e988:	7543 7272 6e65 2074 4d50 2031 657a 6f72     Current PM1 zero
 808e998:	003a 7520 2f67 336d 4500 746e 7265 6e20     :. ug/m3.Enter n
 808e9a8:	7765 5020 314d 5a20 7265 0a6f 000d 0d0a     ew PM1 Zero.....
 808e9b8:	654e 2077 4d50 2031 657a 6f72 203a 4300     New PM1 zero: .C
 808e9c8:	7275 6572 746e 5020 324d 352e 7320 6f6c     urrent PM2.5 slo
 808e9d8:	6570 003a 6e45 6574 2072 656e 2077 4d50     pe:.Enter new PM
 808e9e8:	2e32 2035 6c73 706f 0a65 000d 0d0a 654e     2.5 slope.....Ne
 808e9f8:	2077 4d50 2e32 2035 6c73 706f 3a65 0020     w PM2.5 slope: .
 808ea08:	7543 7272 6e65 2074 4d50 2e32 2035 657a     Current PM2.5 ze
 808ea18:	6f72 003a 6e45 6574 2072 656e 2077 4d50     ro:.Enter new PM
 808ea28:	2e32 2035 655a 6f72 0d0a 0a00 4e0d 7765     2.5 Zero.....New
 808ea38:	5020 324d 352e 7a20 7265 3a6f 0020 7543      PM2.5 zero: .Cu
 808ea48:	7272 6e65 2074 4d50 3031 7320 6f6c 6570     rrent PM10 slope
 808ea58:	003a 6e45 6574 2072 656e 2077 4d50 3031     :.Enter new PM10
 808ea68:	7320 6f6c 6570 0d0a 0a00 4e0d 7765 5020      slope.....New P
 808ea78:	314d 2030 6c73 706f 3a65 0020 7543 7272     M10 slope: .Curr
 808ea88:	6e65 2074 4d50 3031 7a20 7265 3a6f 2000     ent PM10 zero:. 
 808ea98:	6d75 6d2f 0033 6e45 6574 2072 656e 2077     um/m3.Enter new 
 808eaa8:	4d50 3031 5a20 7265 0a6f 000d 0d0a 654e     PM10 Zero.....Ne
 808eab8:	2077 4d50 3031 7a20 7265 3a6f 0020 7543     w PM10 zero: .Cu
 808eac8:	7272 6e65 2074 6554 706d 7265 7461 7275     rrent Temperatur
 808ead8:	2065 6c73 706f 3a65 2000 6544 7267 6565     e slope:. Degree
 808eae8:	2073 0043 6e45 6574 2072 656e 2077 6554     s C.Enter new Te
 808eaf8:	706d 7265 7461 7275 2065 6c73 706f 0a65     mperature slope.
 808eb08:	000d 0d0a 654e 2077 6554 706d 7265 7461     ....New Temperat
 808eb18:	7275 2065 6c73 706f 3a65 0020 7543 7272     ure slope: .Curr
 808eb28:	6e65 2074 6554 706d 7265 7461 7275 2065     ent Temperature 
 808eb38:	657a 6f72 003a 6e45 6574 2072 656e 2077     zero:.Enter new 
 808eb48:	6554 706d 7265 7461 7275 2065 655a 6f72     Temperature Zero
 808eb58:	0d0a 0a00 4e0d 7765 5420 6d65 6570 6172     .....New Tempera
 808eb68:	7574 6572 7a20 7265 3a6f 0020 7543 7272     ture zero: .Curr
 808eb78:	6e65 2074 7250 7365 7573 6572 7320 6f6c     ent Pressure slo
 808eb88:	6570 003a 7420 726f 0072 6e45 6574 2072     pe:. torr.Enter 
 808eb98:	656e 2077 7250 7365 7573 6572 7320 6f6c     new Pressure slo
 808eba8:	6570 0d0a 0a00 4e0d 7765 5020 6572 7373     pe.....New Press
 808ebb8:	7275 2065 6c73 706f 3a65 0020 7543 7272     ure slope: .Curr
 808ebc8:	6e65 2074 7250 7365 7573 6572 7a20 7265     ent Pressure zer
 808ebd8:	3a6f 4500 746e 7265 6e20 7765 5020 6572     o:.Enter new Pre
 808ebe8:	7373 7275 2065 655a 6f72 0d0a 0a00 4e0d     ssure Zero.....N
 808ebf8:	7765 5020 6572 7373 7275 2065 657a 6f72     ew Pressure zero
 808ec08:	203a 4300 7275 6572 746e 5220 2048 6c73     : .Current RH sl
 808ec18:	706f 3a65 2000 0025 6e45 6574 2072 656e     ope:. %.Enter ne
 808ec28:	2077 4852 7320 6f6c 6570 0d0a 0a00 4e0d     w RH slope.....N
 808ec38:	7765 5220 2048 6c73 706f 3a65 0020 7543     ew RH slope: .Cu
 808ec48:	7272 6e65 2074 4852 7a20 7265 3a6f 4500     rrent RH zero:.E
 808ec58:	746e 7265 6e20 7765 5220 2048 655a 6f72     nter new RH Zero
 808ec68:	0d0a 0a00 4e0d 7765 5220 2048 657a 6f72     .....New RH zero
 808ec78:	203a 4300 7275 6572 746e 4f20 2033 6e61     : .Current O3 an
 808ec88:	6c61 676f 6f20 6666 6573 3a74 4500 746e     alog offset:.Ent
 808ec98:	7265 6e20 7765 6f20 6f7a 656e 6f20 6666     er new ozone off
 808eca8:	6573 0a74 000d 0d0a 654e 2077 7a6f 6e6f     set.....New ozon
 808ecb8:	2065 666f 7366 7465 203a 4300 7275 6572     e offset: .Curre
 808ecc8:	746e 6c20 776f 7265 6c20 6d69 7469 003a     nt lower limit:.
 808ecd8:	6c50 6165 6573 6520 746e 7265 7020 7361     Please enter pas
 808ece8:	7773 726f 2064 6e69 6f20 6472 7265 7420     sword in order t
 808ecf8:	206f 6863 6e61 6567 7420 6568 6c20 776f     o change the low
 808ed08:	7265 6c20 6d69 7469 4500 746e 7265 6e20     er limit.Enter n
 808ed18:	7765 6c20 776f 7265 6c20 6d69 7469 0a3a     ew lower limit:.
 808ed28:	000d 0d0a 654e 2077 6f6c 6577 2072 696c     ....New lower li
 808ed38:	696d 3a74 4300 7275 6572 746e 7520 7070     mit:.Current upp
 808ed48:	7265 6c20 6d69 7469 003a 6c50 6165 6573     er limit:.Please
 808ed58:	6520 746e 7265 7020 7361 7773 726f 2064      enter password 
 808ed68:	6e69 6f20 6472 7265 7420 206f 6863 6e61     in order to chan
 808ed78:	6567 7420 6568 7520 7070 7265 6c20 6d69     ge the upper lim
 808ed88:	7469 4500 746e 7265 6e20 7765 7520 7070     it.Enter new upp
 808ed98:	7265 6c20 6d69 7469 0a3a 000d 0d0a 654e     er limit:.....Ne
 808eda8:	2077 7075 6570 2072 696c 696d 3a74 4300     w upper limit:.C
 808edb8:	6d6f 616d 646e 203a 4420 7365 7263 7069     ommand:  Descrip
 808edc8:	6974 6e6f 6100 203a 4120 6a64 7375 2074     tion.a:  Adjust 
 808edd8:	4f43 2032 6c73 706f 0065 3a62 2020 6441     CO2 slope.b:  Ad
 808ede8:	756a 7473 4320 324f 7a20 7265 006f 3a63     just CO2 zero.c:
 808edf8:	2020 6441 756a 7473 4320 204f 6c73 706f       Adjust CO slop
 808ee08:	0065 3a64 2020 6441 756a 7473 4320 204f     e.d:  Adjust CO 
 808ee18:	657a 6f72 6500 203a 4120 6a64 7375 2074     zero.e:  Adjust 
 808ee28:	4d50 2031 6c73 706f 0065 3a66 2020 6441     PM1 slope.f:  Ad
 808ee38:	756a 7473 5020 314d 7a20 7265 006f 3a67     just PM1 zero.g:
 808ee48:	2020 6441 756a 7473 5020 324d 352e 7320       Adjust PM2.5 s
 808ee58:	6f6c 6570 6800 203a 4120 6a64 7375 2074     lope.h:  Adjust 
 808ee68:	4d50 2e32 2035 657a 6f72 6900 203a 4120     PM2.5 zero.i:  A
 808ee78:	6a64 7375 2074 4d50 3031 7320 6f6c 6570     djust PM10 slope
 808ee88:	6a00 203a 4120 6a64 7375 2074 4d50 3031     .j:  Adjust PM10
 808ee98:	7a20 7265 006f 3a6b 2020 6441 756a 7473      zero.k:  Adjust
 808eea8:	5420 6d65 6570 6172 7574 6572 7320 6f6c      Temperature slo
 808eeb8:	6570 6c00 203a 4120 6a64 7375 2074 6554     pe.l:  Adjust Te
 808eec8:	706d 7265 7461 7275 2065 657a 6f72 6d00     mperature zero.m
 808eed8:	203a 4120 6a64 7375 2074 7250 7365 7573     :  Adjust Pressu
 808eee8:	6572 7320 6f6c 6570 6e00 203a 4120 6a64     re slope.n:  Adj
 808eef8:	7375 2074 7250 7365 7573 6572 7a20 7265     ust Pressure zer
 808ef08:	006f 3a6f 2020 6441 756a 7473 4820 6d75     o.o:  Adjust Hum
 808ef18:	6469 7469 2079 6c73 706f 0065 3a70 2020     idity slope.p:  
 808ef28:	6441 756a 7473 4820 6d75 6469 7469 2079     Adjust Humidity 
 808ef38:	657a 6f72 7100 203a 4520 616e 6c62 2065     zero.q:  Enable 
 808ef48:	6573 6972 6c61 6420 6265 6775 6967 676e     serial debugging
 808ef58:	7200 203a 4420 7369 6261 656c 7320 7265     .r:  Disable ser
 808ef68:	6169 206c 6564 7562 6767 6e69 0067 3a73     ial debugging.s:
 808ef78:	2020 754f 7074 7475 6820 6165 6564 2072       Output header 
 808ef88:	7473 6972 676e 7400 203a 4520 746e 7265     string.t:  Enter
 808ef98:	6e20 7765 7420 6d69 2065 6e61 2064 6164      new time and da
 808efa8:	6574 7500 203a 4520 746e 7265 6e20 7765     te.u:  Enter new
 808efb8:	7420 6d69 2065 6f7a 656e 7600 203a 4120      time zone.v:  A
 808efc8:	6a64 7375 2074 6874 2065 6544 6976 6563     djust the Device
 808efd8:	4920 0044 3a77 2020 6547 2074 6977 6966      ID.w:  Get wifi
 808efe8:	6320 6572 6564 746e 6169 736c 7900 203a      credentials.y: 
 808eff8:	4520 616e 6c62 2065 6563 6c6c 6c75 7261      Enable cellular
 808f008:	7a00 203a 4420 7369 6261 656c 6320 6c65     .z:  Disable cel
 808f018:	756c 616c 0072 3a31 2020 6441 756a 7473     lular.1:  Adjust
 808f028:	6720 7361 6c20 776f 7265 6c20 6d69 7469      gas lower limit
 808f038:	3200 203a 4120 6a64 7375 2074 6167 2073     .2:  Adjust gas 
 808f048:	7075 6570 2072 696c 696d 0074 3a33 2020     upper limit.3:  
 808f058:	6547 2074 7562 6c69 2064 6576 7372 6f69     Get build versio
 808f068:	006e 3a34 2020 6e45 6261 656c 4f20 6f7a     n.4:  Enable Ozo
 808f078:	656e 3500 203a 4420 7369 6261 656c 4f20     ne.5:  Disable O
 808f088:	6f7a 656e 3600 203a 4520 616e 6c62 2065     zone.6:  Enable 
 808f098:	4f56 2743 0073 3a37 2020 6944 6173 6c62     VOC's.7:  Disabl
 808f0a8:	2065 4f56 2743 0073 3a38 2020 754f 7074     e VOC's.8:  Outp
 808f0b8:	7475 7420 6568 5020 494d 2043 7973 7473     ut the PMIC syst
 808f0c8:	6d65 6320 6e6f 6966 7567 6172 6974 6e6f     em configuration
 808f0d8:	3900 203a 4920 636e 6572 7361 2065 6874     .9:  Increase th
 808f0e8:	2065 6863 7261 6567 6320 7275 6572 746e     e charge current
 808f0f8:	6220 2079 3436 6d20 0041 3a30 2020 6e49      by 64 mA.0:  In
 808f108:	7263 6165 6573 7420 6568 6320 7275 6572     crease the curre
 808f118:	746e 6920 706e 7475 6c20 6d69 7469 6220     nt input limit b
 808f128:	2079 3031 2030 416d 4100 203a 4f20 7075     y 100 mA.A:  Oup
 808f138:	7074 7475 4320 204f 6f63 736e 6174 746e     tput CO constant
 808f148:	796c 6120 646e 7220 7061 6469 796c 4200     ly and rapidly.B
 808f158:	203a 4f20 7475 7570 2074 4d50 6320 6e6f     :  Output PM con
 808f168:	7473 6e61 6c74 2079 6e61 2064 6172 6970     stantly and rapi
 808f178:	6c64 0079 3a43 2020 6843 6e61 6567 7420     dly.C:  Change t
 808f188:	6d65 6570 6172 7574 6572 7520 696e 7374     emperature units
 808f198:	7420 206f 6543 636c 7569 0073 3a44 2020      to Celcius.D:  
 808f1a8:	6944 6173 6c62 2065 4d54 3350 2036 6574     Disable TMP36 te
 808f1b8:	706d 7265 7461 7275 2065 6573 736e 726f     mperature sensor
 808f1c8:	6120 646e 7520 6573 4220 454d 3836 2030      and use BME680 
 808f1d8:	6574 706d 7265 7461 7275 0065 3a45 2020     temperature.E:  
 808f1e8:	6e45 6261 656c 5420 504d 3633 7420 6d65     Enable TMP36 tem
 808f1f8:	6570 6172 7574 6572 7320 6e65 6f73 2072     perature sensor 
 808f208:	6e61 2064 6964 6173 6c62 2065 4d42 3645     and disable BME6
 808f218:	3038 7420 6d65 6570 6172 7574 6572 4600     80 temperature.F
 808f228:	203a 4320 6168 676e 2065 6574 706d 7265     :  Change temper
 808f238:	7461 7275 2065 6e75 7469 2073 6f74 4620     ature units to F
 808f248:	7261 6e65 6568 7469 4700 203a 5220 6165     arenheit.G:  Rea
 808f258:	2064 7a6f 6e6f 2065 7266 6d6f 6120 616e     d ozone from ana
 808f268:	6f6c 2067 6e69 7570 2074 6e28 746f 6420     log input (not d
 808f278:	6769 7469 6c61 796c 2d20 6220 616f 6472     igitally - board
 808f288:	6420 7065 6e65 6564 746e 0029 3a48 2020      dependent).H:  
 808f298:	6552 6461 6f20 6f7a 656e 6420 6769 7469     Read ozone digit
 808f2a8:	6c61 796c 2820 6f6e 2074 6874 6f72 6775     ally (not throug
 808f2b8:	2068 6e61 6c61 676f 6920 706e 7475 2d20     h analog input -
 808f2c8:	6220 616f 6472 6420 7065 6e65 6564 746e      board dependent
 808f2d8:	0029 3a49 2020 6441 756a 7473 6620 6572     ).I:  Adjust fre
 808f2e8:	7571 6e65 7963 6620 726f 7520 6c70 616f     quency for uploa
 808f2f8:	6964 676e 7420 7268 756f 6867 6320 6c65     ding through cel
 808f308:	756c 616c 0072 3a4a 2020 6552 6573 2074     lular.J:  Reset 
 808f318:	5345 2c50 4320 324f 202c 6c50 6e61 6f74     ESP, CO2, Planto
 808f328:	6577 0072 3a4b 2020 6f43 746e 6e69 6f75     wer.K:  Continuo
 808f338:	7375 7320 7265 6169 206c 756f 7074 7475     us serial output
 808f348:	6f20 2066 5047 0053 3a4c 2020 7257 7469      of GPS.L:  Writ
 808f358:	2065 6564 6166 6c75 2074 6573 7474 6e69     e default settin
 808f368:	7367 4d00 203a 4520 616e 6c62 2065 3032     gs.M:  Enable 20
 808f378:	2025 6162 7474 7265 2079 6874 6572 6873     % battery thresh
 808f388:	6c6f 2064 696c 696d 6974 676e 4e00 203a     old limiting.N: 
 808f398:	4420 7369 6261 656c 3220 2530 6220 7461      Disable 20% bat
 808f3a8:	6574 7972 7420 7268 7365 6f68 646c 6c20     tery threshold l
 808f3b8:	6d69 7469 6e69 2067 4157 4e52 4e49 2147     imiting WARNING!
 808f3c8:	0021 3a4f 2020 6e45 6261 656c 6c20 776f     !.O:  Enable low
 808f3d8:	7020 776f 7265 6620 726f 4720 5350 6d20      power for GPS m
 808f3e8:	646f 6c75 0065 3a50 2020 7554 6e72 6f20     odule.P:  Turn o
 808f3f8:	6666 4220 5441 4546 0054 3a51 2020 6c41     ff BATFET.Q:  Al
 808f408:	6f6c 2077 4142 4654 5445 7420 206f 7574     low BATFET to tu
 808f418:	6e72 6f20 006e 3a52 2020 6944 6173 6c62     rn on.R:  Disabl
 808f428:	2065 4241 2043 6f6c 6967 2063 6f66 2072     e ABC logic for 
 808f438:	4f43 2032 6573 736e 726f 5300 203a 4520     CO2 sensor.S:  E
 808f448:	616e 6c62 2065 4241 2043 6f6c 6967 2063     nable ABC logic 
 808f458:	6f66 2072 4f43 2032 6573 736e 726f 5400     for CO2 sensor.T
 808f468:	203a 4520 616e 6c62 2f65 6964 6173 6c62     :  Enable/disabl
 808f478:	2065 4948 3848 3231 2030 4852 7320 6e65     e HIH8120 RH sen
 808f488:	6f73 0072 3a55 2020 7753 7469 6863 7320     sor.U:  Switch s
 808f498:	636f 656b 2074 6877 7265 2065 4f43 6920     ocket where CO i
 808f4a8:	2073 6572 6461 6620 6f72 006d 3a57 2020     s read from.W:  
 808f4b8:	6e45 6261 656c 442f 7369 6261 656c 6720     Enable/Disable g
 808f4c8:	6f6f 6c67 2065 6f6c 6163 6974 6e6f 7320     oogle location s
 808f4d8:	7265 6976 6563 0073 3a56 2020 6143 696c     ervices.V:  Cali
 808f4e8:	7262 7461 2065 4f43 2032 6573 736e 726f     brate CO2 sensor
 808f4f8:	2d20 6d20 7375 2074 7573 7070 796c 6120      - must supply a
 808f508:	626d 6569 746e 6c20 7665 6c65 2820 6f67     mbient level (go
 808f518:	6f20 7475 6973 6564 2921 5a00 203a 4f20      outside!).Z:  O
 808f528:	7475 7570 2074 6563 6c6c 6c75 7261 6920     utput cellular i
 808f538:	666e 726f 616d 6974 6e6f 2820 4343 4449     nformation (CCID
 808f548:	202c 4d49 4945 202c 7465 2963 2100 203a     , IMEI, etc).!: 
 808f558:	4320 6e6f 6974 756e 756f 2073 6573 6972      Continuous seri
 808f568:	6c61 6f20 7475 7570 2074 666f 5620 434f     al output of VOC
 808f578:	7327 4000 2020 4520 616e 6c62 2f65 6944     's.@   Enable/Di
 808f588:	6173 6c62 2065 6553 736e 6269 656c 692d     sable Sensible-i
 808f598:	746f 6420 7461 2061 7570 6873 202e 4920     ot data push.  I
 808f5a8:	2066 6e65 6261 656c 2c64 7420 6d69 2065     f enabled, time 
 808f5b8:	6f7a 656e 7720 6c69 206c 6562 6920 6e67     zone will be ign
 808f5c8:	726f 6465 2d20 5520 4354 7720 6c69 206c     ored - UTC will 
 808f5d8:	6562 7520 6573 2e64 2300 2020 4520 616e     be used..#   Ena
 808f5e8:	6c62 2f65 6944 6173 6c62 2065 6163 7472     ble/Disable cart
 808f5f8:	706f 6570 2072 6f70 6577 2072 6f6d 6564     opper power mode
 808f608:	202e 4920 2066 6e65 6261 656c 2c64 6120     .  If enabled, a
 808f618:	7362 6e65 6573 6f20 2066 7865 6574 6e72     bsense of extern
 808f628:	6c61 7020 776f 7265 7720 6c69 206c 7473     al power will st
 808f638:	706f 6320 6c65 756c 616c 2e72 3f00 203a     op cellular..?: 
 808f648:	4f20 7475 7570 2074 6874 7369 6d20 6e65      Output this men
 808f658:	0075 3a78 2020 7845 7469 2073 6874 7369     u.x:  Exits this
 808f668:	6d20 6e65 0075 265a 4700 7465 6974 676e      menu.Z&.Getting
 808f678:	6f20 6f7a 656e 6420 7461 2061 7266 6d6f      ozone data from
 808f688:	6520 7073 5500 616e 6c62 2065 6f74 6720      esp.Unable to g
 808f698:	7465 6f20 6f7a 656e 6420 7461 2061 7266     et ozone data fr
 808f6a8:	6d6f 4520 5053 202c 6f63 6e75 6574 2072     om ESP, counter 
 808f6b8:	6e69 6564 3a78 2520 2e31 6631 0d0a 5200     index: %1.1f...R
 808f6c8:	4345 4549 4556 2044 4144 4154 4620 4f52     ECIEVED DATA FRO
 808f6d8:	204d 5345 3a50 0020 6552 6963 7665 6465     M ESP: .Recieved
 808f6e8:	6420 7461 2061 7266 6d6f 4520 5053 6300      data from ESP.c
 808f6f8:	6d6f 616d 6920 646e 7865 203a 5300 7274     omma index: .Str
 808f708:	6e69 5b67 6425 3a5d 7500 6973 676e 7320     ing[%d]:.using s
 808f718:	7274 6e69 2067 7261 6172 2079 6e69 6564     tring array inde
 808f728:	2078 2031 7564 2065 6f74 6c20 676f 6967     x 1 due to loggi
 808f738:	676e 7500 6973 676e 7320 7274 6e69 2067     ng.using string 
 808f748:	7261 6172 2079 6e69 6564 2078 2c30 6e20     array index 0, n
 808f758:	746f 6c20 676f 6967 676e 4f00 646c 6920     ot logging.Old i
 808f768:	706e 7475 6320 7275 6572 746e 6c20 6d69     nput current lim
 808f778:	7469 203a 6425 0d0a 4e00 7765 6920 706e     it: %d...New inp
 808f788:	7475 6320 7275 6572 746e 6c20 6d69 7469     ut current limit
 808f798:	203a 6425 0d0a 4900 636e 6572 7361 6e69     : %d...Increasin
 808f7a8:	2067 6843 7261 6567 6320 7275 6572 746e     g Charge current
 808f7b8:	6620 6f72 206d 6425 6d20 2041 6f74 0020      from %d mA to .
 808f7c8:	656e 2077 6863 7261 6567 6320 7275 6572     new charge curre
 808f7d8:	746e 6f20 2066 6425 6d20 0a41 000d 7453     nt of %d mA...St
 808f7e8:	7261 2074 666f 6120 706c 6168 7220 6165     art of alpha rea
 808f7f8:	0064 6f43 6c75 6e64 7427 6320 6d6f 756d     d.Couldn't commu
 808f808:	696e 6163 6574 7720 7469 2068 4d4c 3950     nicate with LMP9
 808f818:	3031 3030 315f 4800 6c61 7666 6c6f 3a74     1000_1.Halfvolt:
 808f828:	2520 2e31 6632 0d0a 4800 6c61 7666 6c6f      %1.2f...Halfvol
 808f838:	2074 6968 6867 7265 7420 6168 206e 2e30     t higher than 0.
 808f848:	0035 7453 7461 7375 3d20 3020 6620 6f72     5.Status = 0 fro
 808f858:	206d 4d4c 3950 3031 3030 7320 6174 7574     m LMP91000 statu
 808f868:	2073 6572 0067 4d4c 3150 3030 2030 7473     s reg.LMP1000 st
 808f878:	7461 7375 3d20 3020 4300 204f 656d 7361     atus = 0.CO meas
 808f888:	7275 6d65 6e65 7374 203a 0a20 000d 3041     urements:  ...A0
 808f898:	675f 7361 203a 6425 0d0a 4100 5f31 7561     _gas: %d...A1_au
 808f8a8:	3a78 2520 0a64 000d 3241 745f 6d65 3a70     x: %d...A2_temp:
 808f8b8:	2520 0a64 000d 6168 666c 765f 6572 3a66      %d...half_vref:
 808f8c8:	2520 0a64 000d 4f43 203a 3125 332e 2066      %d...CO: %1.3f 
 808f8d8:	7070 0a6d 000d 654d 756e 003e 6553 6972     ppm...Menu>.Seri
 808f8e8:	6c61 6420 6265 6775 6967 676e 6520 616e     al debugging ena
 808f8f8:	6c62 6465 002e 6553 6972 6c61 6420 6265     bled..Serial deb
 808f908:	6775 6967 676e 6420 7369 6261 656c 2e64     ugging disabled.
 808f918:	4500 616e 6c62 6e69 2067 6543 6c6c 6c75     .Enabling Cellul
 808f928:	7261 002e 6543 6c6c 6c75 7261 6120 726c     ar..Cellular alr
 808f938:	6165 7964 6520 616e 6c62 6465 002e 6944     eady enabled..Di
 808f948:	6173 6c62 6e69 2067 6543 6c6c 6c75 7261     sabling Cellular
 808f958:	4300 6c65 756c 616c 2072 6c61 6572 6461     .Cellular alread
 808f968:	2079 6964 6173 6c62 6465 002e 6554 706d     y disabled..Temp
 808f978:	7265 7461 7275 2065 6e75 7469 2073 6c61     erature units al
 808f988:	6572 6461 2079 6573 2074 6f74 4620 7261     ready set to Far
 808f998:	6e65 6965 2e74 5400 6d65 6570 6172 7574     eneit..Temperatu
 808f9a8:	6572 7520 696e 7374 6120 726c 6165 7964     re units already
 808f9b8:	7320 7465 7420 206f 6543 636c 7569 2e73      set to Celcius.
 808f9c8:	4400 7369 6261 696c 676e 6e20 7765 7420     .Disabling new t
 808f9d8:	6d65 6570 6172 7574 6572 7320 6e65 6f73     emperature senso
 808f9e8:	0072 6554 706d 7265 7461 7275 2065 6573     r.Temperature se
 808f9f8:	736e 726f 6120 726c 6165 7964 6420 7369     nsor already dis
 808fa08:	6261 656c 0064 6554 706d 7265 7461 7275     abled.Temperatur
 808fa18:	2065 6573 736e 726f 6120 726c 6165 7964     e sensor already
 808fa28:	6520 616e 6c62 6465 5400 6d65 6570 6172      enabled.Tempera
 808fa38:	7574 2065 6573 736e 726f 6e20 776f 6520     tue sensor now e
 808fa48:	616e 6c62 6465 4100 616e 6f6c 2067 6572     nabled.Analog re
 808fa58:	6461 6e69 2067 666f 6f20 6f7a 656e 6120     ading of ozone a
 808fa68:	726c 6165 7964 6520 616e 6c62 6465 4100     lready enabled.A
 808fa78:	616e 6f6c 2067 6572 6461 6e69 2067 666f     nalog reading of
 808fa88:	6f20 6f7a 656e 6e20 776f 6520 616e 6c62      ozone now enabl
 808fa98:	6465 4400 6769 7469 6c61 7220 6165 6964     ed.Digital readi
 808faa8:	676e 6f20 2066 7a6f 6e6f 2065 6c61 6572     ng of ozone alre
 808fab8:	6461 2079 6e65 6261 656c 0064 6944 6967     ady enabled.Digi
 808fac8:	6174 206c 6572 6461 6e69 2067 666f 6f20     tal reading of o
 808fad8:	6f7a 656e 6e20 776f 6520 616e 6c62 6465     zone now enabled
 808fae8:	4f00 7475 7570 7474 6e69 2067 5047 2053     .Outputting GPS 
 808faf8:	6f63 746e 6e69 6f75 7375 796c 4200 7461     continuously.Bat
 808fb08:	6574 7972 7420 7268 7365 6f68 646c 6120     tery threshold a
 808fb18:	726c 6165 7964 6520 616e 6c62 6465 4500     lready enabled.E
 808fb28:	616e 6c62 6e69 2067 6162 7474 7265 2079     nabling battery 
 808fb38:	6874 6572 6873 6c6f 2064 696c 696d 6974     threshold limiti
 808fb48:	676e 4200 7461 6574 7972 7420 7268 7365     ng.Battery thres
 808fb58:	6f68 646c 6120 726c 6165 7964 6420 7369     hold already dis
 808fb68:	6261 656c 0064 6944 6173 6c62 6e69 2067     abled.Disabling 
 808fb78:	6162 7474 7265 2079 6874 6572 6873 6c6f     battery threshol
 808fb88:	2064 696c 696d 6974 676e 4500 616e 6c62     d limiting.Enabl
 808fb98:	6e69 2067 6f6c 2077 6f70 6577 2072 6f66     ing low power fo
 808fba8:	2072 7067 0073 7554 6e72 6e69 2067 666f     r gps.Turning of
 808fbb8:	2066 6162 6674 7465 4100 6c6c 776f 6e69     f batfet.Allowin
 808fbc8:	2067 6162 6674 7465 7420 206f 7574 6e72     g batfet to turn
 808fbd8:	6f20 006e 6944 6173 6c62 6e69 2067 4241      on.Disabling AB
 808fbe8:	2043 6f6c 6967 2063 6f66 2072 4f43 2032     C logic for CO2 
 808fbf8:	6573 736e 726f 4100 4342 6c20 676f 6369     sensor.ABC logic
 808fc08:	6120 726c 6165 7964 6420 7369 6261 656c      already disable
 808fc18:	0064 6e45 6261 696c 676e 6120 6362 6c20     d.Enabling abc l
 808fc28:	676f 6369 6620 726f 4320 324f 7320 6e65     ogic for CO2 sen
 808fc38:	6f73 0072 4241 2043 6f6c 6967 2063 6c61     sor.ABC logic al
 808fc48:	6572 6461 2079 6e65 6261 656c 0064 6e45     ready enabled.En
 808fc58:	6261 696c 676e 4820 4849 3138 3032 5220     abling HIH8120 R
 808fc68:	2048 6573 736e 726f 4400 7369 6261 696c     H sensor.Disabli
 808fc78:	676e 4820 4849 3138 3032 5220 2048 6573     ng HIH8120 RH se
 808fc88:	736e 726f 4e00 776f 7220 6165 6964 676e     nsor.Now reading
 808fc98:	4320 204f 7266 6d6f 5520 3032 412d 706c      CO from U20-Alp
 808fca8:	6168 0032 6f4e 2077 6572 6461 6e69 2067     ha2.Now reading 
 808fcb8:	4f43 6620 6f72 206d 3155 2d39 6c41 6870     CO from U19-Alph
 808fcc8:	3161 5200 7365 7465 6e69 2067 6874 2065     a1.Reseting the 
 808fcd8:	4f43 2032 6573 736e 726f 4100 5050 5620     CO2 sensor.APP V
 808fce8:	7265 6973 6e6f 203a 4500 616e 6c62 6e69     ersion: .Enablin
 808fcf8:	2067 7a4f 6e6f 0065 7a4f 6e6f 2065 6c61     g Ozone.Ozone al
 808fd08:	6572 6461 2079 6e65 6261 656c 0064 6944     ready enabled.Di
 808fd18:	6173 6c62 6e69 2067 7a4f 6e6f 0065 7a4f     sabling Ozone.Oz
 808fd28:	6e6f 2065 6c61 6572 6461 2079 6964 6173     one already disa
 808fd38:	6c62 6465 4500 616e 6c62 6e69 2067 4f56     bled.Enabling VO
 808fd48:	2743 0073 4f56 2743 2073 6c61 6572 6461     C's.VOC's alread
 808fd58:	2079 6e65 6261 656c 0064 6944 6173 6c62     y enabled.Disabl
 808fd68:	6e69 2067 4f56 2743 0073 4f56 2743 2073     ing VOC's.VOC's 
 808fd78:	6c61 6572 6461 2079 6964 6173 6c62 6465     already disabled
 808fd88:	4600 7561 746c 203a 5300 7379 6574 206d     .Fault: .System 
 808fd98:	7473 7461 7375 203a 4f00 7475 7570 7474     status: .Outputt
 808fda8:	6e69 2067 6f6e 6d72 6c61 796c 4f00 7475     ing normally.Out
 808fdb8:	7570 7474 6e69 2067 6e6f 796c 5020 004d     putting only PM.
 808fdc8:	754f 7074 7475 6974 676e 5620 434f 2073     Outputting VOCs 
 808fdd8:	6f63 746e 6e69 6f75 7375 796c 2021 5020     continuously!  P
 808fde8:	6572 7373 6120 796e 6220 7475 6f74 206e     ress any button 
 808fdf8:	6f74 6520 6978 2e74 2e2e 4600 6961 656c     to exit....Faile
 808fe08:	2064 6f74 7220 6165 2064 4d42 3645 3038     d to read BME680
 808fe18:	5400 6f56 7363 253d 2e31 6630 202c 6554     .TVocs=%1.0f, Te
 808fe28:	706d 253d 2e31 6631 202c 7270 7365 3d73     mp=%1.1f, press=
 808fe38:	3125 312e 2c66 7220 3d68 3125 312e 0a66     %1.1f, rh=%1.1f.
 808fe48:	000d 6944 6173 6c62 6e69 2067 6573 736e     ..Disabling sens
 808fe58:	6269 656c 6920 746f 6420 7461 2061 7570     ible iot data pu
 808fe68:	6873 002e 6944 6173 6c62 6e69 2067 6163     sh..Disabling ca
 808fe78:	2072 6f74 7070 7265 7020 776f 7265 202e     r topper power. 
 808fe88:	0020 6e45 6261 696c 676e 6320 7261 7420      .Enabling car t
 808fe98:	706f 6570 2072 6f70 6577 2e72 2020 6649     opper power.  If
 808fea8:	6e20 206f 7865 6574 6e72 6c61 7020 776f      no external pow
 808feb8:	7265 202c 7973 7473 6d65 7720 6c69 206c     er, system will 
 808fec8:	7574 6e72 6f20 6666 002e 6944 6173 6c62     turn off..Disabl
 808fed8:	6e69 2067 6f67 676f 656c 6c20 636f 7461     ing google locat
 808fee8:	6f69 206e 6573 7672 6369 7365 002e 6e45     ion services..En
 808fef8:	6261 696c 676e 6720 6f6f 6c67 2065 6f6c     abling google lo
 808ff08:	6163 6974 6e6f 7320 7265 6976 6563 2e73     cation services.
 808ff18:	4700 7465 6974 676e 6320 6c65 756c 616c     .Getting cellula
 808ff28:	2072 6e69 6f66 6d72 7461 6f69 2c6e 7420     r information, t
 808ff38:	6968 2073 616d 2079 6174 656b 6120 7720     his may take a w
 808ff48:	6968 656c 2e2e 002e 4d49 4945 253d 0073     hile....IMEI=%s.
 808ff58:	4d49 4953 253d 0073 4349 4943 3d44 7325     IMSI=%s.ICCID=%s
 808ff68:	4500 6978 6974 676e 7320 7265 6169 206c     .Exiting serial 
 808ff78:	656d 756e 2e2e 002e 6f54 2070 666f 6c20     menu....Top of l
 808ff88:	6f6f 0070 6e69 6f63 6d6d 6e69 2067 7962     oop.incomming by
 808ff98:	6574 003a 6f43 6e6e 6365 6974 676e 7420     te:.Connecting t
 808ffa8:	206f 6563 6c6c 6c75 7261 6e20 7465 6f77     o cellular netwo
 808ffb8:	6b72 6100 7466 7265 6320 6c65 756c 616c     rk.after cellula
 808ffc8:	4f72 006e 6641 6574 2072 6563 6c6c 6c75     rOn.After cellul
 808ffd8:	7261 6e4f 4100 7466 7265 7020 7261 6974     arOn.After parti
 808ffe8:	6c63 2065 6f63 6e6e 6365 0074 6573 7474     cle connect.sett
 808fff8:	6e69 2067 7274 6569 5f64 6563 6c6c 6c75     ing tried_cellul
 8090008:	7261 635f 6e6f 656e 7463 7420 206f 6166     ar_connect to fa
 8090018:	736c 0065 6944 6373 6e6f 656e 7463 6e69     lse.Disconnectin
 8090028:	2067 7266 6d6f 6320 6c65 756c 616c 2072     g from cellular 
 8090038:	656e 7774 726f 006b 6f47 6e69 2067 6f74     network.Going to
 8090048:	7320 656c 7065 6220 6365 7561 6573 6220      sleep because b
 8090058:	7461 6574 7972 6920 2073 6562 6f6c 2077     attery is below 
 8090068:	3032 2025 6863 7261 6567 0000               20% charge..

08090074 <_ZTV10PowerCheck>:
	...
 809007c:	51a9 0808 51c1 0808 6572 6461 6e69 2067     .Q...Q..reading 
 809008c:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 809009c:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 80900ac:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 80900bc:	4c00 4253 203a 4300 6c61 6269 6172 6974     .LSB: .Calibrati
 80900cc:	676e 4320 324f 0000                         ng CO2..

080900d4 <_ZL6spiPtr>:
 80900d4:	106c 2000 107c 2000 108c 2000               l.. |.. ... 

080900e0 <_ZTV5SdSpi>:
	...
 80900e8:	6175 0808 6185 0808 6171 0808 6201 0808     ua...a..qa...b..
 80900f8:	6225 0808 6215 0808 6269 0808               %b...b..ib..

08090104 <_ZTV7HIH61XX>:
	...
 809010c:	6db1 0808 6dc1 0808 6ef9 0808               .m...m...n..

08090118 <_ZTV23GoogleMapsDeviceLocator>:
	...
 8090120:	6fa1 0808 6fc1 0808 7325 227b 2269 253a     .o...o..%s{"i":%
 8090130:	2c64 6c22 3a22 7525 222c 2263 253a 2c64     d,"l":%u,"c":%d,
 8090140:	6e22 3a22 6425 007d 227b 2263 7b3a 6f22     "n":%d}.{"c":{"o
 8090150:	3a22 2522 2273 002c 6122 3a22 005b 6564     ":"%s",."a":[.de
 8090160:	6976 6563 6f4c 6163 6f74 0072 5441 5426     viceLocator.AT&T
 8090170:	7000 6275 696c 6873 6f4c 6163 6974 6e6f     .publishLocation
 8090180:	7300 6163 446e 7461 3d61 7325 6800 6f6f     .scanData=%s.hoo
 8090190:	2d6b 6572 7073 6e6f 6573 252f 2f73 7325     k-response/%s/%s
 80901a0:	0000 0000                                   ....

080901a4 <_ZTV28CellularHelperStringResponse>:
	...
 80901ac:	7369 0808 5954 4550 555f 4b4e 4f4e 4e57     is..TYPE_UNKNOWN
 80901bc:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
 80901cc:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
 80901dc:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
 80901ec:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
 80901fc:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
 809020c:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
 809021c:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
 809022c:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
 809023c:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
 809024c:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
 809025c:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
 809026c:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
 809027c:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
 809028c:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
 809029c:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
 80902ac:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
 80902bc:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
 80902cc:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
 80902dc:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
 80902ec:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
 80902fc:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
 809030c:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
 809031c:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
 809032c:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
 809033c:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
 809034c:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
 809035c:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
 809036c:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
 809037c:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
 809038c:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
 809039c:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
 80903ac:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
 80903bc:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
 80903cc:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
 80903dc:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
 80903ec:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
 80903fc:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
 809040c:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
 809041c:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
 809042c:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
 809043c:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
 809044c:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
 809045c:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
 809046c:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
 809047c:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
 809048c:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
 809049c:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
 80904ac:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
 80904bc:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
 80904cc:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
 80904dc:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
 80904ec:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
 80904fc:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
 809050c:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
 809051c:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
 809052c:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
 809053c:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 809054c:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
 809055c:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
 809056c:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
 809057c:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
 809058c:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

08090598 <_ZTV32CellularHelperPlusStringResponse>:
	...
 80905a0:	73a1 0808                                   .s..

080905a4 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 80905a4:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

080905b4 <_ZTV8SPIClass>:
	...
 80905bc:	7d15 0808 7d17 0808                         .}...}..

080905c4 <_ZL14clock_divisors>:
 80905c4:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 80905d4:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 80905e4:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 80905f4:	6170 6172 006d 6d63 0064 6e68 0064 7473     param.cmd.hnd.st
 8090604:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 8090614:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 8090624:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 8090634:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 8090644:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
 8090654:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
 8090664:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 8090674:	736c 3d20 0020 6e6c 6600 006e 6f63 6564     ls = .ln.fn.code
 8090684:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 8090694:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 80906a4:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
 80906b4:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
 80906c4:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80906d4:	6d69 0065                                   ime.

080906d8 <_ZTV9IPAddress>:
	...
 80906e0:	8d5b 0808 8d4b 0808 8d4d 0808               [...K...M...

080906ec <_ZTV9USBSerial>:
	...
 80906f4:	8ded 0808 8e3d 0808 8e4b 0808 83d1 0808     ....=...K.......
 8090704:	8e29 0808 8def 0808 8e05 0808 8e37 0808     )...........7...
 8090714:	8e1b 0808 8de9 0808                         ........

0809071c <_ZTVN5spark13CellularClassE>:
	...
 8090724:	9077 0808 906d 0808 9063 0808 8fe1 0808     w...m...c.......
 8090734:	9057 0808 0a23 0808 904b 0808 9043 0808     W...#...K...C...
 8090744:	9039 0808 902f 0808 8feb 0808               9.../.......

08090750 <_ZTV11USARTSerial>:
	...
 8090758:	0911 0808 0a2f 0808 90ff 0808 83d1 0808     ..../...........
 8090768:	90c3 0808 90e5 0808 90d1 0808 90f9 0808     ................
 8090778:	90b1 0808 90b5 0808                         ........

08090780 <_ZTV7TwoWire>:
	...
 8090788:	91b1 0808 91fb 0808 91d3 0808 91b3 0808     ................
 8090798:	91db 0808 91e3 0808 91eb 0808 91f3 0808     ................

080907a8 <_ZTVN5spark12NetworkClassE>:
	...
 80907b0:	92ad 0808 92b7 0808 92c1 0808 92cb 0808     ................
 80907c0:	92d5 0808 92e1 0808 92ed 0808 92f9 0808     ................
 80907d0:	9301 0808 930b 0808 9315 0808               ............

080907dc <day_name.4723>:
 80907dc:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80907ec:	6972 6153 4a74                                   riSat

080907f1 <mon_name.4724>:
 80907f1:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8090801:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8090811:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8090821:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8090831:	6425 000a                                   %d..

08090835 <_ctype_>:
 8090835:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8090845:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8090855:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8090865:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8090875:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8090885:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8090895:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80908a5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80908b5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08090938 <__sf_fake_stdin>:
	...

08090958 <__sf_fake_stdout>:
	...

08090978 <__sf_fake_stderr>:
	...
 8090998:	4f50 4953 0058 0000                         POSIX...

080909a0 <__month_lengths>:
 80909a0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80909b0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80909c0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80909d0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80909e0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80909f0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8090a00:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 8090a10:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 8090a20:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 8090a30:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 8090a40:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 8090a50:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

08090a5c <fpi.5342>:
 8090a5c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8090a6c:	0000 0000 6e69 7469 0079 0000               ....inity...

08090a78 <fpinan.5378>:
 8090a78:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

08090a90 <tinytens>:
 8090a90:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8090aa0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8090ab0:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 8090ac0:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 8090ad0:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 8090ae0:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 8090af0:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 8090b00:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 8090b10:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 8090b20:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 8090b30:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 8090b40:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 8090b50:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 8090b60:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 8090b70:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 8090b80:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 8090b90:	7574 6472 7961 2500 2f6d 6425 252f 0079     turday.%m/%d/%y.
 8090ba0:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 8090bb0:	2053 5925 4100 004d 6125 2520 2062 6525     S %Y.AM.%a %b %e
 8090bc0:	2520 3a48 4d25 253a 2053 5a25 2520 0059      %H:%M:%S %Z %Y.
 8090bd0:	4925 253a 3a4d 5325 2520 0070               %I:%M:%S %p.

08090bdc <_C_time_locale>:
 8090bdc:	0ac0 0809 0ac4 0809 0ac8 0809 0acc 0809     ................
 8090bec:	0ad0 0809 0ad4 0809 0ad8 0809 0adc 0809     ................
 8090bfc:	0ae0 0809 0ae4 0809 0ae8 0809 0aec 0809     ................
 8090c0c:	0af0 0809 0af8 0809 0b01 0809 0b07 0809     ................
 8090c1c:	0ad0 0809 0b0d 0809 0b12 0809 0b17 0809     ................
 8090c2c:	0b1e 0809 0b28 0809 0b30 0809 0b39 0809     ....(...0...9...
 8090c3c:	0b42 0809 0b46 0809 0b4a 0809 0b4e 0809     B...F...J...N...
 8090c4c:	0b52 0809 0b56 0809 0b5a 0809 0b5e 0809     R...V...Z...^...
 8090c5c:	0b65 0809 0b6c 0809 0b74 0809 0b7e 0809     e...l...t...~...
 8090c6c:	0b87 0809 0b8e 0809 e0e9 0808 0b97 0809     ................
 8090c7c:	0ba0 0809 0bb5 0809 fdc5 0808 0bb8 0809     ................
 8090c8c:	0af0 0809 0af8 0809 0b01 0809 0b07 0809     ................
 8090c9c:	0ad0 0809 0b0d 0809 0b12 0809 0b17 0809     ................
 8090cac:	0b1e 0809 0b28 0809 0b30 0809 0b39 0809     ....(...0...9...
 8090cbc:	05fb 0809 0bd0 0809 0584 0809 0584 0809     ................
 8090ccc:	0584 0809 0584 0809 0584 0809 5a54 4700     ............TZ.G
 8090cdc:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 8090cec:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 8090cfc:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 8090d0c:	3a6e 6825 2575 006e 0000 0000               n:%hu%n.....

08090d18 <__mprec_tens>:
 8090d18:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8090d28:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8090d38:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8090d48:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8090d58:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8090d68:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8090d78:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8090d88:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8090d98:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8090da8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8090db8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8090dc8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8090dd8:	9db4 79d9 7843 44ea                         ...yCx.D

08090de0 <__mprec_bigtens>:
 8090de0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8090df0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8090e00:	bf3c 7f73 4fdd 7515                         <.s..O.u

08090e08 <p05.5385>:
 8090e08:	0005 0000 0019 0000 007d 0000               ........}...

08090e14 <link_const_variable_data_end>:
 8090e14:	08084eb9 	.word	0x08084eb9
 8090e18:	080851a3 	.word	0x080851a3
 8090e1c:	080852b1 	.word	0x080852b1
 8090e20:	080853b5 	.word	0x080853b5
 8090e24:	08085523 	.word	0x08085523
 8090e28:	0808566d 	.word	0x0808566d
 8090e2c:	08085671 	.word	0x08085671
 8090e30:	08085c89 	.word	0x08085c89
 8090e34:	08085c8d 	.word	0x08085c8d
 8090e38:	08085c91 	.word	0x08085c91
 8090e3c:	08085c95 	.word	0x08085c95
 8090e40:	0808615f 	.word	0x0808615f
 8090e44:	080862b1 	.word	0x080862b1
 8090e48:	08086951 	.word	0x08086951
 8090e4c:	08086975 	.word	0x08086975
 8090e50:	08086979 	.word	0x08086979
 8090e54:	08086c91 	.word	0x08086c91
 8090e58:	08086c95 	.word	0x08086c95
 8090e5c:	08086dad 	.word	0x08086dad
 8090e60:	08086f9d 	.word	0x08086f9d
 8090e64:	08087035 	.word	0x08087035
 8090e68:	08087429 	.word	0x08087429
 8090e6c:	08087edd 	.word	0x08087edd
 8090e70:	08088761 	.word	0x08088761
 8090e74:	08088a79 	.word	0x08088a79
 8090e78:	08088aa5 	.word	0x08088aa5
 8090e7c:	08089081 	.word	0x08089081
 8090e80:	08089361 	.word	0x08089361
 8090e84:	08089465 	.word	0x08089465
 8090e88:	080894e9 	.word	0x080894e9
 8090e8c:	080895a9 	.word	0x080895a9
 8090e90:	0808962d 	.word	0x0808962d
 8090e94:	080896f1 	.word	0x080896f1
 8090e98:	080897b5 	.word	0x080897b5

08090e9c <link_constructors_end>:
 8090e9c:	00000000 	.word	0x00000000
