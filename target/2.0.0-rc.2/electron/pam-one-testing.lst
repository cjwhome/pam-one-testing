
c:/particleProjects/pam-one-testing/target/2.0.0-rc.2/electron/pam-one-testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00014b60  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08094b80  08094b80  00024b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08094b88  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000324  20000000  08094b8c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000010c4  20000328  20000328  00050328  2**3
                  ALLOC
  7 .module_info_suffix 00000028  08094eb0  08094eb0  00044eb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  08094ed8  08094ed8  00044ed8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00292aea  00000000  00000000  00044edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0002975c  00000000  00000000  002d79c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003a15c  00000000  00000000  00301122  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000032f8  00000000  00000000  0033b27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00008bf0  00000000  00000000  0033e576  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003db7d  00000000  00000000  00347166  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00064775  00000000  00000000  00384ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000c813a  00000000  00000000  003e9458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009f2c  00000000  00000000  004b1594  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00e fd6f 	bl	808eb14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00e fd77 	bl	808eb30 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08094b8c 	.word	0x08094b8c
 8080050:	20000324 	.word	0x20000324
 8080054:	20000328 	.word	0x20000328
 8080058:	200013e9 	.word	0x200013e9
 808005c:	200013e9 	.word	0x200013e9

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f00c f969 	bl	808c338 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080066:	2500      	movs	r5, #0
 8080068:	4e05      	ldr	r6, [pc, #20]	; (8080080 <module_user_init+0x20>)
 808006a:	4c06      	ldr	r4, [pc, #24]	; (8080084 <module_user_init+0x24>)
 808006c:	1ba4      	subs	r4, r4, r6
 808006e:	08a4      	lsrs	r4, r4, #2
 8080070:	42a5      	cmp	r5, r4
 8080072:	d100      	bne.n	8080076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 8080076:	f856 3b04 	ldr.w	r3, [r6], #4
 808007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f7      	b.n	8080070 <module_user_init+0x10>
 8080080:	08094b4c 	.word	0x08094b4c
 8080084:	08094b74 	.word	0x08094b74

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f005 b9b2 	b.w	80853f0 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f006 fd97 	bl	8086bc0 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 8080096:	f00c b911 	b.w	808c2bc <_post_loop>

0808009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 808009a:	f00a bd8f 	b.w	808abbc <malloc>

0808009e <_Znaj>:
 808009e:	f00a bd8d 	b.w	808abbc <malloc>

080800a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800a2:	f00a bd93 	b.w	808abcc <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b6:	b148      	cbz	r0, 80800cc <null_ptr_check+0x16>
 80800b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ba:	b13b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800be:	b12b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800c2:	fab0 f080 	clz	r0, r0
 80800c6:	0940      	lsrs	r0, r0, #5
 80800c8:	4240      	negs	r0, r0
 80800ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800cc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800d0:	4770      	bx	lr

080800d2 <set_mem_page>:
{
 80800d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d4:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
 80800d6:	4608      	mov	r0, r1
{
 80800d8:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 80800da:	f7ff ffec 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800de:	4605      	mov	r5, r0
 80800e0:	bb40      	cbnz	r0, 8080134 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
 80800e2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80800e6:	bf14      	ite	ne
 80800e8:	2300      	movne	r3, #0
 80800ea:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
 80800ec:	78ca      	ldrb	r2, [r1, #3]
 80800ee:	429a      	cmp	r2, r3
 80800f0:	d020      	beq.n	8080134 <set_mem_page+0x62>
			dev->mem_page = mem_page;
 80800f2:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f6:	2301      	movs	r3, #1
 80800f8:	21f3      	movs	r1, #243	; 0xf3
 80800fa:	7860      	ldrb	r0, [r4, #1]
 80800fc:	f10d 0207 	add.w	r2, sp, #7
 8080100:	47b0      	blx	r6
 8080102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080106:	b998      	cbnz	r0, 8080130 <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8080108:	f89d 2007 	ldrb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010c:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
 808010e:	f022 0210 	bic.w	r2, r2, #16
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080112:	f003 0310 	and.w	r3, r3, #16
 8080116:	4313      	orrs	r3, r2
 8080118:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808011c:	2173      	movs	r1, #115	; 0x73
 808011e:	2301      	movs	r3, #1
 8080120:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8080122:	7860      	ldrb	r0, [r4, #1]
 8080124:	f10d 0207 	add.w	r2, sp, #7
 8080128:	47b0      	blx	r6
 808012a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 808012e:	b108      	cbz	r0, 8080134 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
 8080130:	f06f 0501 	mvn.w	r5, #1
}
 8080134:	4628      	mov	r0, r5
 8080136:	b002      	add	sp, #8
 8080138:	bd70      	pop	{r4, r5, r6, pc}

0808013a <get_mem_page.part.0>:
static int8_t get_mem_page(struct bme680_dev *dev)
 808013a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 808013c:	2301      	movs	r3, #1
static int8_t get_mem_page(struct bme680_dev *dev)
 808013e:	4604      	mov	r4, r0
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8080140:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8080142:	21f3      	movs	r1, #243	; 0xf3
 8080144:	7840      	ldrb	r0, [r0, #1]
 8080146:	f10d 0207 	add.w	r2, sp, #7
 808014a:	47a8      	blx	r5
 808014c:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 8080150:	b930      	cbnz	r0, 8080160 <get_mem_page.part.0+0x26>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8080152:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080156:	f003 0310 	and.w	r3, r3, #16
 808015a:	70e3      	strb	r3, [r4, #3]
}
 808015c:	b003      	add	sp, #12
 808015e:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 8080160:	f06f 0001 	mvn.w	r0, #1
 8080164:	e7fa      	b.n	808015c <get_mem_page.part.0+0x22>

08080166 <boundary_check.isra.0.constprop.0>:
		if (*value > max) {
 8080166:	7803      	ldrb	r3, [r0, #0]
 8080168:	428b      	cmp	r3, r1
			*value = max;
 808016a:	bf84      	itt	hi
 808016c:	7001      	strbhi	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 808016e:	7813      	ldrbhi	r3, [r2, #0]
}
 8080170:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080174:	bf84      	itt	hi
 8080176:	f043 0302 	orrhi.w	r3, r3, #2
 808017a:	7013      	strbhi	r3, [r2, #0]
}
 808017c:	4770      	bx	lr

0808017e <bme680_get_regs>:
{
 808017e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080182:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 8080184:	4618      	mov	r0, r3
{
 8080186:	4688      	mov	r8, r1
 8080188:	4691      	mov	r9, r2
 808018a:	461d      	mov	r5, r3
	rslt = null_ptr_check(dev);
 808018c:	f7ff ff93 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080190:	4604      	mov	r4, r0
 8080192:	b9a8      	cbnz	r0, 80801c0 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 8080194:	78ab      	ldrb	r3, [r5, #2]
 8080196:	b93b      	cbnz	r3, 80801a8 <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
 8080198:	4629      	mov	r1, r5
 808019a:	4630      	mov	r0, r6
 808019c:	f7ff ff99 	bl	80800d2 <set_mem_page>
			if (rslt == BME680_OK)
 80801a0:	4604      	mov	r4, r0
 80801a2:	b908      	cbnz	r0, 80801a8 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801a4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801a8:	464b      	mov	r3, r9
 80801aa:	4642      	mov	r2, r8
 80801ac:	4631      	mov	r1, r6
 80801ae:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801b0:	7868      	ldrb	r0, [r5, #1]
 80801b2:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801b4:	2800      	cmp	r0, #0
			rslt = BME680_E_COM_FAIL;
 80801b6:	bf18      	it	ne
 80801b8:	f06f 0401 	mvnne.w	r4, #1
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801bc:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}
 80801c0:	4620      	mov	r0, r4
 80801c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801c6 <bme680_set_regs>:
{
 80801c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80801ca:	461c      	mov	r4, r3
 80801cc:	460f      	mov	r7, r1
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801ce:	2100      	movs	r1, #0
{
 80801d0:	b08a      	sub	sp, #40	; 0x28
 80801d2:	4606      	mov	r6, r0
 80801d4:	4690      	mov	r8, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801d6:	a801      	add	r0, sp, #4
 80801d8:	2224      	movs	r2, #36	; 0x24
 80801da:	9100      	str	r1, [sp, #0]
 80801dc:	f00e fca8 	bl	808eb30 <memset>
	rslt = null_ptr_check(dev);
 80801e0:	4620      	mov	r0, r4
 80801e2:	f7ff ff68 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801e6:	b9e8      	cbnz	r0, 8080224 <bme680_set_regs+0x5e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801e8:	f108 33ff 	add.w	r3, r8, #4294967295
 80801ec:	2b12      	cmp	r3, #18
 80801ee:	d833      	bhi.n	8080258 <bme680_set_regs+0x92>
 80801f0:	46ea      	mov	sl, sp
 80801f2:	4681      	mov	r9, r0
			for (index = 0; index < len; index++) {
 80801f4:	fa1f f888 	uxth.w	r8, r8
 80801f8:	fa1f f389 	uxth.w	r3, r9
 80801fc:	4543      	cmp	r3, r8
 80801fe:	d314      	bcc.n	808022a <bme680_set_regs+0x64>
			if (rslt == BME680_OK) {
 8080200:	b980      	cbnz	r0, 8080224 <bme680_set_regs+0x5e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080202:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8080206:	3a01      	subs	r2, #1
 8080208:	b293      	uxth	r3, r2
 808020a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 808020c:	f89d 1000 	ldrb.w	r1, [sp]
 8080210:	7860      	ldrb	r0, [r4, #1]
 8080212:	f10d 0201 	add.w	r2, sp, #1
 8080216:	47a8      	blx	r5
					rslt = BME680_E_COM_FAIL;
 8080218:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808021a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
 808021e:	bf18      	it	ne
 8080220:	f06f 0001 	mvnne.w	r0, #1
}
 8080224:	b00a      	add	sp, #40	; 0x28
 8080226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dev->intf == BME680_SPI_INTF) {
 808022a:	78a3      	ldrb	r3, [r4, #2]
 808022c:	f816 5009 	ldrb.w	r5, [r6, r9]
 8080230:	b93b      	cbnz	r3, 8080242 <bme680_set_regs+0x7c>
					rslt = set_mem_page(reg_addr[index], dev);
 8080232:	4628      	mov	r0, r5
 8080234:	4621      	mov	r1, r4
 8080236:	f7ff ff4c 	bl	80800d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 808023a:	f816 5009 	ldrb.w	r5, [r6, r9]
 808023e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080242:	f817 3009 	ldrb.w	r3, [r7, r9]
					tmp_buff[(2 * index)] = reg_addr[index];
 8080246:	f88a 5000 	strb.w	r5, [sl]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 808024a:	f88a 3001 	strb.w	r3, [sl, #1]
			for (index = 0; index < len; index++) {
 808024e:	f109 0901 	add.w	r9, r9, #1
 8080252:	f10a 0a02 	add.w	sl, sl, #2
 8080256:	e7cf      	b.n	80801f8 <bme680_set_regs+0x32>
			rslt = BME680_E_INVALID_LENGTH;
 8080258:	f06f 0003 	mvn.w	r0, #3
 808025c:	e7e2      	b.n	8080224 <bme680_set_regs+0x5e>

0808025e <bme680_soft_reset>:
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 808025e:	23e0      	movs	r3, #224	; 0xe0
{
 8080260:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8080262:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080266:	23b6      	movs	r3, #182	; 0xb6
{
 8080268:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 808026a:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 808026e:	f7ff ff22 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080272:	4604      	mov	r4, r0
 8080274:	b970      	cbnz	r0, 8080294 <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
 8080276:	78ab      	ldrb	r3, [r5, #2]
 8080278:	b17b      	cbz	r3, 808029a <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 808027a:	462b      	mov	r3, r5
 808027c:	2201      	movs	r2, #1
 808027e:	f10d 0107 	add.w	r1, sp, #7
 8080282:	f10d 0006 	add.w	r0, sp, #6
 8080286:	f7ff ff9e 	bl	80801c6 <bme680_set_regs>
 808028a:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 808028c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 808028e:	200a      	movs	r0, #10
 8080290:	4798      	blx	r3
			if (rslt == BME680_OK) {
 8080292:	b14c      	cbz	r4, 80802a8 <bme680_soft_reset+0x4a>
}
 8080294:	4620      	mov	r0, r4
 8080296:	b003      	add	sp, #12
 8080298:	bd30      	pop	{r4, r5, pc}
	if (rslt == BME680_OK) {
 808029a:	4628      	mov	r0, r5
 808029c:	f7ff ff4d 	bl	808013a <get_mem_page.part.0>
		if (rslt == BME680_OK) {
 80802a0:	4604      	mov	r4, r0
 80802a2:	2800      	cmp	r0, #0
 80802a4:	d1f6      	bne.n	8080294 <bme680_soft_reset+0x36>
 80802a6:	e7e8      	b.n	808027a <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
 80802a8:	78ab      	ldrb	r3, [r5, #2]
 80802aa:	2b00      	cmp	r3, #0
 80802ac:	d1f2      	bne.n	8080294 <bme680_soft_reset+0x36>
	rslt = null_ptr_check(dev);
 80802ae:	4628      	mov	r0, r5
 80802b0:	f7ff ff01 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802b4:	4604      	mov	r4, r0
 80802b6:	2800      	cmp	r0, #0
 80802b8:	d1ec      	bne.n	8080294 <bme680_soft_reset+0x36>
 80802ba:	4628      	mov	r0, r5
 80802bc:	f7ff ff3d 	bl	808013a <get_mem_page.part.0>
 80802c0:	4604      	mov	r4, r0
 80802c2:	e7e7      	b.n	8080294 <bme680_soft_reset+0x36>

080802c4 <bme680_init>:
{
 80802c4:	b530      	push	{r4, r5, lr}
 80802c6:	b08d      	sub	sp, #52	; 0x34
 80802c8:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 80802ca:	f7ff fef4 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802ce:	4604      	mov	r4, r0
 80802d0:	2800      	cmp	r0, #0
 80802d2:	f040 80c9 	bne.w	8080468 <bme680_init+0x1a4>
		rslt = bme680_soft_reset(dev);
 80802d6:	4628      	mov	r0, r5
 80802d8:	f7ff ffc1 	bl	808025e <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80802dc:	4604      	mov	r4, r0
 80802de:	2800      	cmp	r0, #0
 80802e0:	f040 80c2 	bne.w	8080468 <bme680_init+0x1a4>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80802e4:	462b      	mov	r3, r5
 80802e6:	2201      	movs	r2, #1
 80802e8:	4629      	mov	r1, r5
 80802ea:	20d0      	movs	r0, #208	; 0xd0
 80802ec:	f7ff ff47 	bl	808017e <bme680_get_regs>
			if (rslt == BME680_OK) {
 80802f0:	4604      	mov	r4, r0
 80802f2:	2800      	cmp	r0, #0
 80802f4:	f040 80b8 	bne.w	8080468 <bme680_init+0x1a4>
				if (dev->chip_id == BME680_CHIP_ID) {
 80802f8:	782b      	ldrb	r3, [r5, #0]
 80802fa:	2b61      	cmp	r3, #97	; 0x61
 80802fc:	f040 80b7 	bne.w	808046e <bme680_init+0x1aa>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8080300:	4601      	mov	r1, r0
 8080302:	2225      	movs	r2, #37	; 0x25
 8080304:	9001      	str	r0, [sp, #4]
 8080306:	a802      	add	r0, sp, #8
 8080308:	f00e fc12 	bl	808eb30 <memset>
	rslt = null_ptr_check(dev);
 808030c:	4628      	mov	r0, r5
	uint8_t temp_var = 0; /* Temporary variable */
 808030e:	f88d 4003 	strb.w	r4, [sp, #3]
	rslt = null_ptr_check(dev);
 8080312:	f7ff fed0 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080316:	4604      	mov	r4, r0
 8080318:	2800      	cmp	r0, #0
 808031a:	f040 80a5 	bne.w	8080468 <bme680_init+0x1a4>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 808031e:	462b      	mov	r3, r5
 8080320:	2219      	movs	r2, #25
 8080322:	2089      	movs	r0, #137	; 0x89
 8080324:	a901      	add	r1, sp, #4
 8080326:	f7ff ff2a 	bl	808017e <bme680_get_regs>
		if (rslt == BME680_OK)
 808032a:	4604      	mov	r4, r0
 808032c:	b938      	cbnz	r0, 808033e <bme680_init+0x7a>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 808032e:	462b      	mov	r3, r5
 8080330:	2210      	movs	r2, #16
 8080332:	20e1      	movs	r0, #225	; 0xe1
 8080334:	f10d 011d 	add.w	r1, sp, #29
 8080338:	f7ff ff21 	bl	808017e <bme680_get_regs>
 808033c:	4604      	mov	r4, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 808033e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8080342:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8080346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808034a:	82eb      	strh	r3, [r5, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 808034c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080350:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8080354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080358:	832b      	strh	r3, [r5, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 808035a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 808035e:	f89d 200a 	ldrb.w	r2, [sp, #10]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8080362:	76ab      	strb	r3, [r5, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8080364:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8080368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808036c:	83ab      	strh	r3, [r5, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 808036e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8080372:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8080376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808037a:	83eb      	strh	r3, [r5, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 808037c:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080380:	f89d 2010 	ldrb.w	r2, [sp, #16]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8080384:	f885 3020 	strb.w	r3, [r5, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080388:	f89d 300f 	ldrb.w	r3, [sp, #15]
 808038c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080390:	846b      	strh	r3, [r5, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8080392:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8080396:	f89d 3011 	ldrb.w	r3, [sp, #17]
 808039a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808039e:	84ab      	strh	r3, [r5, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803a4:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a8:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80803ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80803b0:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80803b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803bc:	852b      	strh	r3, [r5, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80803be:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80803c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80803c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803ca:	856b      	strh	r3, [r5, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803cc:	f89d 301b 	ldrb.w	r3, [sp, #27]
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803d0:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803d4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80803d8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80803dc:	f003 020f 	and.w	r2, r3, #15
 80803e0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803e4:	812a      	strh	r2, [r5, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803e6:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 80803ea:	091b      	lsrs	r3, r3, #4
 80803ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803f0:	816b      	strh	r3, [r5, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803f2:	9b08      	ldr	r3, [sp, #32]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80803f4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803f8:	60eb      	str	r3, [r5, #12]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 80803fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80803fe:	742b      	strb	r3, [r5, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8080400:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8080404:	746b      	strb	r3, [r5, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8080406:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 808040a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808040e:	826b      	strh	r3, [r5, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8080410:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8080414:	752b      	strb	r3, [r5, #20]
		if (rslt == BME680_OK) {
 8080416:	bb14      	cbnz	r4, 808045e <bme680_init+0x19a>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8080418:	462b      	mov	r3, r5
 808041a:	2201      	movs	r2, #1
 808041c:	2002      	movs	r0, #2
 808041e:	f10d 0103 	add.w	r1, sp, #3
 8080422:	f7ff feac 	bl	808017e <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8080426:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 808042a:	4604      	mov	r4, r0
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 808042c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8080430:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			if (rslt == BME680_OK) {
 8080434:	b998      	cbnz	r0, 808045e <bme680_init+0x19a>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8080436:	462b      	mov	r3, r5
 8080438:	2201      	movs	r2, #1
 808043a:	f10d 0103 	add.w	r1, sp, #3
 808043e:	f7ff fe9e 	bl	808017e <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 8080442:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 8080446:	4604      	mov	r4, r0
				dev->calib.res_heat_val = (int8_t) temp_var;
 8080448:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
				if (rslt == BME680_OK)
 808044c:	b938      	cbnz	r0, 808045e <bme680_init+0x19a>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 808044e:	462b      	mov	r3, r5
 8080450:	2201      	movs	r2, #1
 8080452:	2004      	movs	r0, #4
 8080454:	f10d 0103 	add.w	r1, sp, #3
 8080458:	f7ff fe91 	bl	808017e <bme680_get_regs>
 808045c:	4604      	mov	r4, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 808045e:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8080462:	111b      	asrs	r3, r3, #4
 8080464:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
}
 8080468:	4620      	mov	r0, r4
 808046a:	b00d      	add	sp, #52	; 0x34
 808046c:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
 808046e:	f06f 0402 	mvn.w	r4, #2
 8080472:	e7f9      	b.n	8080468 <bme680_init+0x1a4>

08080474 <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080474:	2374      	movs	r3, #116	; 0x74
{
 8080476:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080478:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808047a:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 808047e:	f7ff fe1a 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080482:	bba0      	cbnz	r0, 80804ee <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
 8080484:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8080486:	4623      	mov	r3, r4
 8080488:	2201      	movs	r2, #1
 808048a:	2074      	movs	r0, #116	; 0x74
 808048c:	f10d 0106 	add.w	r1, sp, #6
 8080490:	f7ff fe75 	bl	808017e <bme680_get_regs>
			if (rslt == BME680_OK) {
 8080494:	b9a0      	cbnz	r0, 80804c0 <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8080496:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
 808049a:	f013 0503 	ands.w	r5, r3, #3
 808049e:	d011      	beq.n	80804c4 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80804a0:	f023 0303 	bic.w	r3, r3, #3
 80804a4:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804a8:	2201      	movs	r2, #1
 80804aa:	4623      	mov	r3, r4
 80804ac:	f10d 0106 	add.w	r1, sp, #6
 80804b0:	f10d 0007 	add.w	r0, sp, #7
 80804b4:	f7ff fe87 	bl	80801c6 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80804b8:	200a      	movs	r0, #10
 80804ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80804bc:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
 80804be:	e7e2      	b.n	8080486 <bme680_set_sensor_mode+0x12>
 80804c0:	2d00      	cmp	r5, #0
 80804c2:	d1e0      	bne.n	8080486 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80804c4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80804c8:	b18a      	cbz	r2, 80804ee <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80804ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80804ce:	f002 0203 	and.w	r2, r2, #3
 80804d2:	f023 0303 	bic.w	r3, r3, #3
 80804d6:	4313      	orrs	r3, r2
 80804d8:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80804dc:	b938      	cbnz	r0, 80804ee <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804de:	4623      	mov	r3, r4
 80804e0:	2201      	movs	r2, #1
 80804e2:	f10d 0106 	add.w	r1, sp, #6
 80804e6:	f10d 0007 	add.w	r0, sp, #7
 80804ea:	f7ff fe6c 	bl	80801c6 <bme680_set_regs>
}
 80804ee:	b003      	add	sp, #12
 80804f0:	bd30      	pop	{r4, r5, pc}

080804f2 <bme680_set_sensor_settings>:
	uint8_t data = 0;
 80804f2:	2300      	movs	r3, #0
{
 80804f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80804f6:	4606      	mov	r6, r0
 80804f8:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 80804fa:	4608      	mov	r0, r1
{
 80804fc:	460c      	mov	r4, r1
	uint8_t data = 0;
 80804fe:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080502:	9304      	str	r3, [sp, #16]
 8080504:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080508:	9306      	str	r3, [sp, #24]
 808050a:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
 808050e:	f7ff fdd2 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080512:	2800      	cmp	r0, #0
 8080514:	f040 80fe 	bne.w	8080714 <bme680_set_sensor_settings+0x222>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080518:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 808051c:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080520:	d105      	bne.n	808052e <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
 8080522:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
			rslt = bme680_set_sensor_mode(dev);
 8080526:	4620      	mov	r0, r4
 8080528:	f7ff ffa4 	bl	8080474 <bme680_set_sensor_mode>
 808052c:	e007      	b.n	808053e <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
 808052e:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
 8080530:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
 8080534:	f000 80f0 	beq.w	8080718 <bme680_set_sensor_settings+0x226>
		dev->power_mode = BME680_SLEEP_MODE;
 8080538:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
 808053c:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
 808053e:	f016 0510 	ands.w	r5, r6, #16
 8080542:	d020      	beq.n	8080586 <bme680_set_sensor_settings+0x94>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8080544:	2107      	movs	r1, #7
 8080546:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808054a:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 808054e:	f7ff fe0a 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080552:	b930      	cbnz	r0, 8080562 <bme680_set_sensor_settings+0x70>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080554:	4623      	mov	r3, r4
 8080556:	2201      	movs	r2, #1
 8080558:	2075      	movs	r0, #117	; 0x75
 808055a:	f10d 0107 	add.w	r1, sp, #7
 808055e:	f7ff fe0e 	bl	808017e <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080562:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8080566:	f89d 2007 	ldrb.w	r2, [sp, #7]
 808056a:	009b      	lsls	r3, r3, #2
 808056c:	f022 021c 	bic.w	r2, r2, #28
 8080570:	f003 031c 	and.w	r3, r3, #28
 8080574:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8080576:	2275      	movs	r2, #117	; 0x75
			count++;
 8080578:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 808057a:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808057e:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080582:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080586:	06b3      	lsls	r3, r6, #26
 8080588:	d522      	bpl.n	80805d0 <bme680_set_sensor_settings+0xde>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 808058a:	2108      	movs	r1, #8
 808058c:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080590:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080594:	f7ff fde7 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080598:	b930      	cbnz	r0, 80805a8 <bme680_set_sensor_settings+0xb6>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808059a:	4623      	mov	r3, r4
 808059c:	2201      	movs	r2, #1
 808059e:	2070      	movs	r0, #112	; 0x70
 80805a0:	f10d 0107 	add.w	r1, sp, #7
 80805a4:	f7ff fdeb 	bl	808017e <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 80805a8:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80805aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80805ae:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80805b2:	f023 0308 	bic.w	r3, r3, #8
 80805b6:	f002 0208 	and.w	r2, r2, #8
 80805ba:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 80805bc:	aa08      	add	r2, sp, #32
 80805be:	442a      	add	r2, r5
			count++;
 80805c0:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80805c2:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80805c6:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80805ca:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80805ce:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80805d0:	07b1      	lsls	r1, r6, #30
 80805d2:	d033      	beq.n	808063c <bme680_set_sensor_settings+0x14a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80805d4:	2105      	movs	r1, #5
 80805d6:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80805da:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80805de:	f7ff fdc2 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 80805e2:	b930      	cbnz	r0, 80805f2 <bme680_set_sensor_settings+0x100>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80805e4:	4623      	mov	r3, r4
 80805e6:	2201      	movs	r2, #1
 80805e8:	2074      	movs	r0, #116	; 0x74
 80805ea:	f10d 0107 	add.w	r1, sp, #7
 80805ee:	f7ff fdc6 	bl	808017e <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
 80805f2:	07f2      	lsls	r2, r6, #31
 80805f4:	d509      	bpl.n	808060a <bme680_set_sensor_settings+0x118>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80805f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80805fa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80805fe:	f003 031f 	and.w	r3, r3, #31
 8080602:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8080606:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
 808060a:	07b3      	lsls	r3, r6, #30
 808060c:	d50b      	bpl.n	8080626 <bme680_set_sensor_settings+0x134>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 808060e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8080612:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8080616:	009b      	lsls	r3, r3, #2
 8080618:	f003 031c 	and.w	r3, r3, #28
 808061c:	f022 021c 	bic.w	r2, r2, #28
 8080620:	4313      	orrs	r3, r2
 8080622:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
 8080626:	2274      	movs	r2, #116	; 0x74
 8080628:	ab08      	add	r3, sp, #32
 808062a:	442b      	add	r3, r5
 808062c:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 8080630:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080634:	3501      	adds	r5, #1
			data_array[count] = data;
 8080636:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 808063a:	b2ed      	uxtb	r5, r5
		if (desired_settings & BME680_OSH_SEL) {
 808063c:	0771      	lsls	r1, r6, #29
 808063e:	d522      	bpl.n	8080686 <bme680_set_sensor_settings+0x194>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8080640:	2105      	movs	r1, #5
 8080642:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080646:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808064a:	f7ff fd8c 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 808064e:	b930      	cbnz	r0, 808065e <bme680_set_sensor_settings+0x16c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080650:	4623      	mov	r3, r4
 8080652:	2201      	movs	r2, #1
 8080654:	2072      	movs	r0, #114	; 0x72
 8080656:	f10d 0107 	add.w	r1, sp, #7
 808065a:	f7ff fd90 	bl	808017e <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 808065e:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080660:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080664:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8080668:	f023 0307 	bic.w	r3, r3, #7
 808066c:	f002 0207 	and.w	r2, r2, #7
 8080670:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8080672:	aa08      	add	r2, sp, #32
 8080674:	442a      	add	r2, r5
			count++;
 8080676:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080678:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808067c:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8080680:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080684:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080686:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 808068a:	d03a      	beq.n	8080702 <bme680_set_sensor_settings+0x210>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 808068c:	2101      	movs	r1, #1
 808068e:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080692:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080696:	f7ff fd66 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK) {
 808069a:	b960      	cbnz	r0, 80806b6 <bme680_set_sensor_settings+0x1c4>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808069c:	210a      	movs	r1, #10
 808069e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80806a2:	f7ff fd60 	bl	8080166 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 80806a6:	b930      	cbnz	r0, 80806b6 <bme680_set_sensor_settings+0x1c4>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80806a8:	4623      	mov	r3, r4
 80806aa:	2201      	movs	r2, #1
 80806ac:	2071      	movs	r0, #113	; 0x71
 80806ae:	f10d 0107 	add.w	r1, sp, #7
 80806b2:	f7ff fd64 	bl	808017e <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
 80806b6:	0672      	lsls	r2, r6, #25
 80806b8:	d50b      	bpl.n	80806d2 <bme680_set_sensor_settings+0x1e0>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80806ba:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80806be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80806c2:	011b      	lsls	r3, r3, #4
 80806c4:	f003 0310 	and.w	r3, r3, #16
 80806c8:	f022 0210 	bic.w	r2, r2, #16
 80806cc:	4313      	orrs	r3, r2
 80806ce:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
 80806d2:	0633      	lsls	r3, r6, #24
 80806d4:	d50a      	bpl.n	80806ec <bme680_set_sensor_settings+0x1fa>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80806d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806da:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80806de:	f023 030f 	bic.w	r3, r3, #15
 80806e2:	f002 020f 	and.w	r2, r2, #15
 80806e6:	4313      	orrs	r3, r2
 80806e8:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80806ec:	2271      	movs	r2, #113	; 0x71
 80806ee:	ab08      	add	r3, sp, #32
 80806f0:	442b      	add	r3, r5
 80806f2:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80806f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80806fa:	3501      	adds	r5, #1
			data_array[count] = data;
 80806fc:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080700:	b2ed      	uxtb	r5, r5
		if (rslt == BME680_OK)
 8080702:	b928      	cbnz	r0, 8080710 <bme680_set_sensor_settings+0x21e>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8080704:	4623      	mov	r3, r4
 8080706:	462a      	mov	r2, r5
 8080708:	a906      	add	r1, sp, #24
 808070a:	a804      	add	r0, sp, #16
 808070c:	f7ff fd5b 	bl	80801c6 <bme680_set_regs>
		dev->power_mode = intended_power_mode;
 8080710:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 8080714:	b009      	add	sp, #36	; 0x24
 8080716:	bdf0      	pop	{r4, r5, r6, r7, pc}
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080718:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 808071c:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 8080720:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8080724:	bf28      	it	cs
 8080726:	f44f 72c8 	movcs.w	r2, #400	; 0x190
 808072a:	2ac8      	cmp	r2, #200	; 0xc8
 808072c:	bf38      	it	cc
 808072e:	22c8      	movcc	r2, #200	; 0xc8
 8080730:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8080734:	f203 1399 	addw	r3, r3, #409	; 0x199
 8080738:	435a      	muls	r2, r3
 808073a:	2314      	movs	r3, #20
 808073c:	fbb2 f2f3 	udiv	r2, r2, r3
 8080740:	230a      	movs	r3, #10
 8080742:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
 8080746:	fbb2 f2f3 	udiv	r2, r2, r3
 808074a:	f991 3011 	ldrsb.w	r3, [r1, #17]
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 808074e:	f991 1004 	ldrsb.w	r1, [r1, #4]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080752:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8080756:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8080758:	f994 3014 	ldrsb.w	r3, [r4, #20]
 808075c:	434b      	muls	r3, r1
 808075e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8080762:	fb93 f3f1 	sdiv	r3, r3, r1
 8080766:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
 8080768:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 808076c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 8080770:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8080774:	3204      	adds	r2, #4
 8080776:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 808077a:	2283      	movs	r2, #131	; 0x83
 808077c:	434a      	muls	r2, r1
 808077e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8080782:	fbb3 f3f2 	udiv	r3, r3, r2
 8080786:	2222      	movs	r2, #34	; 0x22
 8080788:	3bfa      	subs	r3, #250	; 0xfa
 808078a:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 808078c:	2264      	movs	r2, #100	; 0x64
 808078e:	3332      	adds	r3, #50	; 0x32
 8080790:	fb93 f3f2 	sdiv	r3, r3, r2
 8080794:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8080798:	f246 435a 	movw	r3, #25690	; 0x645a
 808079c:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80807a0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	if (dur >= 0xfc0) {
 80807a4:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80807a8:	d21a      	bcs.n	80807e0 <bme680_set_sensor_settings+0x2ee>
		while (dur > 0x3F) {
 80807aa:	2b3f      	cmp	r3, #63	; 0x3f
 80807ac:	b2c2      	uxtb	r2, r0
 80807ae:	f100 0001 	add.w	r0, r0, #1
 80807b2:	d813      	bhi.n	80807dc <bme680_set_sensor_settings+0x2ea>
		durval = (uint8_t) (dur + (factor * 64));
 80807b4:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80807b8:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
 80807ba:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80807bc:	f88d 300d 	strb.w	r3, [sp, #13]
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80807c0:	2202      	movs	r2, #2
 80807c2:	4623      	mov	r3, r4
			dev->gas_sett.nb_conv = 0;
 80807c4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80807c8:	a903      	add	r1, sp, #12
 80807ca:	a802      	add	r0, sp, #8
 80807cc:	f7ff fcfb 	bl	80801c6 <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
 80807d0:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80807d4:	2800      	cmp	r0, #0
 80807d6:	f47f aeb2 	bne.w	808053e <bme680_set_sensor_settings+0x4c>
 80807da:	e6a4      	b.n	8080526 <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
 80807dc:	089b      	lsrs	r3, r3, #2
			factor += 1;
 80807de:	e7e4      	b.n	80807aa <bme680_set_sensor_settings+0x2b8>
		durval = 0xff; /* Max duration*/
 80807e0:	23ff      	movs	r3, #255	; 0xff
 80807e2:	e7ea      	b.n	80807ba <bme680_set_sensor_settings+0x2c8>

080807e4 <bme680_get_profile_dur>:
{
 80807e4:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807e6:	4b18      	ldr	r3, [pc, #96]	; (8080848 <bme680_get_profile_dur+0x64>)
{
 80807e8:	4602      	mov	r2, r0
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807ea:	6818      	ldr	r0, [r3, #0]
 80807ec:	889b      	ldrh	r3, [r3, #4]
 80807ee:	9000      	str	r0, [sp, #0]
 80807f0:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80807f4:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 80807f8:	a802      	add	r0, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80807fa:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80807fe:	4403      	add	r3, r0
 8080800:	f813 0c08 	ldrb.w	r0, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080804:	ab02      	add	r3, sp, #8
 8080806:	441c      	add	r4, r3
 8080808:	f814 3c08 	ldrb.w	r3, [r4, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 808080c:	ac02      	add	r4, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 808080e:	4418      	add	r0, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8080810:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8080814:	4423      	add	r3, r4
 8080816:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 808081a:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 808081e:	4403      	add	r3, r0
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080820:	f241 20b9 	movw	r0, #4793	; 0x12b9
 8080824:	fb04 0303 	mla	r3, r4, r3, r0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808082c:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8080830:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
 8080832:	b29b      	uxth	r3, r3
 8080834:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
 8080836:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 808083a:	b118      	cbz	r0, 8080844 <bme680_get_profile_dur+0x60>
		*duration += dev->gas_sett.heatr_dur;
 808083c:	f8b1 1042 	ldrh.w	r1, [r1, #66]	; 0x42
 8080840:	440b      	add	r3, r1
 8080842:	8013      	strh	r3, [r2, #0]
}
 8080844:	b002      	add	sp, #8
 8080846:	bd10      	pop	{r4, pc}
 8080848:	08091c5c 	.word	0x08091c5c

0808084c <bme680_get_sensor_data>:
{
 808084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080850:	4680      	mov	r8, r0
 8080852:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 8080854:	4608      	mov	r0, r1
{
 8080856:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8080858:	f7ff fc2d 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808085c:	4605      	mov	r5, r0
 808085e:	2800      	cmp	r0, #0
 8080860:	f040 8158 	bne.w	8080b14 <bme680_get_sensor_data+0x2c8>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080864:	9006      	str	r0, [sp, #24]
 8080866:	e9cd 0004 	strd	r0, r0, [sp, #16]
 808086a:	f8cd 001b 	str.w	r0, [sp, #27]
	rslt = null_ptr_check(dev);
 808086e:	4608      	mov	r0, r1
 8080870:	f7ff fc21 	bl	80800b6 <null_ptr_check>
 8080874:	270a      	movs	r7, #10
 8080876:	4605      	mov	r5, r0
		if (rslt == BME680_OK) {
 8080878:	2d00      	cmp	r5, #0
 808087a:	f040 8152 	bne.w	8080b22 <bme680_get_sensor_data+0x2d6>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 808087e:	4623      	mov	r3, r4
 8080880:	220f      	movs	r2, #15
 8080882:	a904      	add	r1, sp, #16
 8080884:	201d      	movs	r0, #29
 8080886:	f7ff fc7a 	bl	808017e <bme680_get_regs>
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808088a:	f89d b010 	ldrb.w	fp, [sp, #16]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808088e:	f99d a01e 	ldrsb.w	sl, [sp, #30]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080892:	f89d 2018 	ldrb.w	r2, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8080896:	f00b 030f 	and.w	r3, fp, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808089a:	f00a 0120 	and.w	r1, sl, #32
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808089e:	f02b 0b7f 	bic.w	fp, fp, #127	; 0x7f
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808a2:	9201      	str	r2, [sp, #4]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80808a4:	ea4b 0101 	orr.w	r1, fp, r1
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808a8:	f89d 2019 	ldrb.w	r2, [sp, #25]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ac:	f00a 0a10 	and.w	sl, sl, #16
 80808b0:	ea41 010a 	orr.w	r1, r1, sl
 80808b4:	b249      	sxtb	r1, r1
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80808b6:	f888 3001 	strb.w	r3, [r8, #1]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808ba:	9202      	str	r2, [sp, #8]
			data->meas_index = buff[1];
 80808bc:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808c0:	f89d 201d 	ldrb.w	r2, [sp, #29]
			if (data->status & BME680_NEW_DATA_MSK) {
 80808c4:	2900      	cmp	r1, #0
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80808c6:	4605      	mov	r5, r0
			data->meas_index = buff[1];
 80808c8:	f888 3002 	strb.w	r3, [r8, #2]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808cc:	9203      	str	r2, [sp, #12]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80808ce:	f89d 9012 	ldrb.w	r9, [sp, #18]
 80808d2:	f89d e013 	ldrb.w	lr, [sp, #19]
				| ((uint32_t) buff[4] / 16));
 80808d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808da:	f89d c015 	ldrb.w	ip, [sp, #21]
 80808de:	f89d 6016 	ldrb.w	r6, [sp, #22]
				| ((uint32_t) buff[7] / 16));
 80808e2:	f89d 0017 	ldrb.w	r0, [sp, #23]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808e6:	f89d 201e 	ldrb.w	r2, [sp, #30]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ea:	f888 1000 	strb.w	r1, [r8]
			if (data->status & BME680_NEW_DATA_MSK) {
 80808ee:	f280 8115 	bge.w	8080b1c <bme680_get_sensor_data+0x2d0>
				| ((uint32_t) buff[7] / 16));
 80808f2:	0900      	lsrs	r0, r0, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808f4:	ea40 1606 	orr.w	r6, r0, r6, lsl #4
 80808f8:	ea46 3c0c 	orr.w	ip, r6, ip, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80808fc:	8ae6      	ldrh	r6, [r4, #22]
				| ((uint32_t) buff[4] / 16));
 80808fe:	091b      	lsrs	r3, r3, #4
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8080900:	0076      	lsls	r6, r6, #1
 8080902:	ebc6 0cdc 	rsb	ip, r6, ip, lsr #3
 8080906:	4660      	mov	r0, ip
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080908:	ea4f 065c 	mov.w	r6, ip, lsr #1
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 808090c:	17c1      	asrs	r1, r0, #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 808090e:	ea46 76c1 	orr.w	r6, r6, r1, lsl #31
 8080912:	1049      	asrs	r1, r1, #1
 8080914:	4371      	muls	r1, r6
 8080916:	fba6 ab06 	umull	sl, fp, r6, r6
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808091a:	f994 001a 	ldrsb.w	r0, [r4, #26]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 808091e:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
 8080922:	ea4f 361a 	mov.w	r6, sl, lsr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080926:	0101      	lsls	r1, r0, #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080928:	ea46 560b 	orr.w	r6, r6, fp, lsl #20
 808092c:	ea4f 372b 	mov.w	r7, fp, asr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080930:	ea4f 7be1 	mov.w	fp, r1, asr #31
 8080934:	fb06 f00b 	mul.w	r0, r6, fp
 8080938:	fba6 ab01 	umull	sl, fp, r6, r1
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808093c:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080940:	fb01 0707 	mla	r7, r1, r7, r0
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080944:	fb86 010c 	smull	r0, r1, r6, ip
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080948:	44bb      	add	fp, r7
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808094a:	0ac6      	lsrs	r6, r0, #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808094c:	ea4f 309a 	mov.w	r0, sl, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080950:	ea46 5641 	orr.w	r6, r6, r1, lsl #21
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080954:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080958:	1831      	adds	r1, r6, r0
 808095a:	6321      	str	r1, [r4, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 808095c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8080960:	3180      	adds	r1, #128	; 0x80
 8080962:	1209      	asrs	r1, r1, #8
 8080964:	f8a8 1004 	strh.w	r1, [r8, #4]
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080968:	6b21      	ldr	r1, [r4, #48]	; 0x30
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 808096a:	ea43 1e0e 	orr.w	lr, r3, lr, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808096e:	1049      	asrs	r1, r1, #1
 8080970:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8080974:	f640 4335 	movw	r3, #3125	; 0xc35
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080978:	1088      	asrs	r0, r1, #2
 808097a:	4340      	muls	r0, r0
		(int32_t)dev->calib.par_p6) >> 2;
 808097c:	f994 7026 	ldrsb.w	r7, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080980:	12c6      	asrs	r6, r0, #11
 8080982:	4377      	muls	r7, r6
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8080984:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080988:	1340      	asrs	r0, r0, #13
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 808098a:	434e      	muls	r6, r1
 808098c:	0076      	lsls	r6, r6, #1
 808098e:	eb06 06a7 	add.w	r6, r6, r7, asr #2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080992:	f9b4 701e 	ldrsh.w	r7, [r4, #30]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080996:	ea4e 3909 	orr.w	r9, lr, r9, lsl #12
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 808099a:	434f      	muls	r7, r1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 808099c:	f994 1020 	ldrsb.w	r1, [r4, #32]
	pressure_comp = 1048576 - pres_adc;
 80809a0:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80809a4:	0149      	lsls	r1, r1, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809a6:	4341      	muls	r1, r0
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80809a8:	10c9      	asrs	r1, r1, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809aa:	eb01 0167 	add.w	r1, r1, r7, asr #1
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809ae:	8ba0      	ldrh	r0, [r4, #28]
	var1 = var1 >> 18;
 80809b0:	1489      	asrs	r1, r1, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809b2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80809b6:	4348      	muls	r0, r1
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80809b8:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
		((int64_t) lookupTable1[gas_range])) >> 16;
 80809bc:	f002 0c0f 	and.w	ip, r2, #15
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80809c0:	0409      	lsls	r1, r1, #16
 80809c2:	eb01 06a6 	add.w	r6, r1, r6, asr #2
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80809c6:	eba9 3626 	sub.w	r6, r9, r6, asr #12
 80809ca:	4373      	muls	r3, r6
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809cc:	13c1      	asrs	r1, r0, #15
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809ce:	fbb3 f1f1 	udiv	r1, r3, r1
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80809d2:	f341 009c 	sbfx	r0, r1, #2, #29
 80809d6:	4340      	muls	r0, r0
 80809d8:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
		(pressure_comp >> 3)) >> 13)) >> 12;
 80809dc:	1340      	asrs	r0, r0, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80809de:	4358      	muls	r0, r3
		(int32_t)dev->calib.par_p8) >> 13;
 80809e0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 80809e4:	f341 075d 	sbfx	r7, r1, #1, #30
 80809e8:	437b      	muls	r3, r7
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80809ea:	f341 16d7 	sbfx	r6, r1, #7, #24
	var2 = ((int32_t)(pressure_comp >> 2) *
 80809ee:	135b      	asrs	r3, r3, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80809f0:	eb03 3320 	add.w	r3, r3, r0, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80809f4:	fb06 f006 	mul.w	r0, r6, r6
 80809f8:	4346      	muls	r6, r0
		(int32_t)dev->calib.par_p10) >> 17;
 80809fa:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80809fe:	0992      	lsrs	r2, r2, #6
		(int32_t)(pressure_comp >> 8) *
 8080a00:	4346      	muls	r6, r0
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080a02:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8080a06:	eb03 4366 	add.w	r3, r3, r6, asr #17
 8080a0a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a0e:	2064      	movs	r0, #100	; 0x64
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080a10:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8080a12:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				data->pressure = calc_pressure(adc_pres, dev);
 8080a16:	f8c8 3008 	str.w	r3, [r8, #8]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a1c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080a24:	3380      	adds	r3, #128	; 0x80
 8080a26:	121b      	asrs	r3, r3, #8
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a28:	4359      	muls	r1, r3
 8080a2a:	fb91 f1f0 	sdiv	r1, r1, r0
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a2e:	f994 600d 	ldrsb.w	r6, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a32:	4359      	muls	r1, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a34:	435e      	muls	r6, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a36:	1189      	asrs	r1, r1, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a38:	fb96 f6f0 	sdiv	r6, r6, r0
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8080a3c:	fb91 f1f0 	sdiv	r1, r1, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a40:	4431      	add	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 8080a42:	8966      	ldrh	r6, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8080a44:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a48:	4371      	muls	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 8080a4a:	128e      	asrs	r6, r1, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080a4c:	e9dd 7101 	ldrd	r7, r1, [sp, #4]
 8080a50:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8080a54:	8927      	ldrh	r7, [r4, #8]
 8080a56:	eba1 1107 	sub.w	r1, r1, r7, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8080a5a:	f994 700c 	ldrsb.w	r7, [r4, #12]
 8080a5e:	435f      	muls	r7, r3
 8080a60:	fb97 f7f0 	sdiv	r7, r7, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080a64:	eba1 0167 	sub.w	r1, r1, r7, asr #1
	var3 = var1 * var2;
 8080a68:	4371      	muls	r1, r6
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a6a:	f994 6010 	ldrsb.w	r6, [r4, #16]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a6e:	2700      	movs	r7, #0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a70:	4373      	muls	r3, r6
 8080a72:	fb93 f3f0 	sdiv	r3, r3, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8080a76:	7be0      	ldrb	r0, [r4, #15]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a78:	f240 563c 	movw	r6, #1340	; 0x53c
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a7c:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a80:	1388      	asrs	r0, r1, #14
 8080a82:	4340      	muls	r0, r0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a84:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a86:	1280      	asrs	r0, r0, #10
	var6 = (var4 * var5) >> 1;
 8080a88:	4343      	muls	r3, r0
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a8a:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080a8e:	1299      	asrs	r1, r3, #10
 8080a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080a94:	434b      	muls	r3, r1
				data->humidity = calc_humidity(adc_hum, dev);
 8080a96:	492b      	ldr	r1, [pc, #172]	; (8080b44 <bme680_get_sensor_data+0x2f8>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a98:	131b      	asrs	r3, r3, #12
 8080a9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
 8080a9e:	428b      	cmp	r3, r1
 8080aa0:	bfd4      	ite	le
 8080aa2:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080aa6:	f8c8 100c 	strgt.w	r1, [r8, #12]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080aaa:	2105      	movs	r1, #5
 8080aac:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 8080ab0:	fbc3 6701 	smlal	r6, r7, r3, r1
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080ab4:	4b24      	ldr	r3, [pc, #144]	; (8080b48 <bme680_get_sensor_data+0x2fc>)
 8080ab6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080aba:	fba6 0103 	umull	r0, r1, r6, r3
 8080abe:	fb03 1107 	mla	r1, r3, r7, r1
 8080ac2:	0c06      	lsrs	r6, r0, #16
 8080ac4:	ea4f 4e21 	mov.w	lr, r1, asr #16
 8080ac8:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080acc:	2100      	movs	r1, #0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080ace:	9b03      	ldr	r3, [sp, #12]
 8080ad0:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080ad4:	03d3      	lsls	r3, r2, #15
 8080ad6:	f113 437f 	adds.w	r3, r3, #4278190080	; 0xff000000
 8080ada:	f141 31ff 	adc.w	r1, r1, #4294967295
 8080ade:	199a      	adds	r2, r3, r6
 8080ae0:	eb41 030e 	adc.w	r3, r1, lr
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080ae4:	4919      	ldr	r1, [pc, #100]	; (8080b4c <bme680_get_sensor_data+0x300>)
 8080ae6:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8080aea:	fba1 6706 	umull	r6, r7, r1, r6
 8080aee:	fb01 770e 	mla	r7, r1, lr, r7
 8080af2:	0a70      	lsrs	r0, r6, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080af4:	0856      	lsrs	r6, r2, #1
 8080af6:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080afa:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 8080afe:	ea4f 2c67 	mov.w	ip, r7, asr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080b02:	1059      	asrs	r1, r3, #1
 8080b04:	1980      	adds	r0, r0, r6
 8080b06:	eb4c 0101 	adc.w	r1, ip, r1
 8080b0a:	f00d fc8d 	bl	808e428 <__aeabi_ldivmod>
 8080b0e:	f8c8 0010 	str.w	r0, [r8, #16]
		if (rslt == BME680_OK) {
 8080b12:	b16d      	cbz	r5, 8080b30 <bme680_get_sensor_data+0x2e4>
}
 8080b14:	4628      	mov	r0, r5
 8080b16:	b009      	add	sp, #36	; 0x24
 8080b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8080b1c:	200a      	movs	r0, #10
 8080b1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080b20:	4798      	blx	r3
	} while (tries);
 8080b22:	3f01      	subs	r7, #1
 8080b24:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8080b28:	f47f aea6 	bne.w	8080878 <bme680_get_sensor_data+0x2c>
		rslt = BME680_W_NO_NEW_DATA;
 8080b2c:	2502      	movs	r5, #2
	return rslt;
 8080b2e:	e7f1      	b.n	8080b14 <bme680_get_sensor_data+0x2c8>
			if (data->status & BME680_NEW_DATA_MSK)
 8080b30:	f998 3000 	ldrsb.w	r3, [r8]
 8080b34:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080b36:	bfb6      	itet	lt
 8080b38:	2301      	movlt	r3, #1
				dev->new_fields = 0;
 8080b3a:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
				dev->new_fields = 1;
 8080b3e:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
				dev->new_fields = 0;
 8080b42:	e7e7      	b.n	8080b14 <bme680_get_sensor_data+0x2c8>
 8080b44:	000186a0 	.word	0x000186a0
 8080b48:	20000000 	.word	0x20000000
 8080b4c:	20000040 	.word	0x20000040

08080b50 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8080b50:	4770      	bx	lr

08080b52 <_ZN4File9availableEv>:
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080b52:	4602      	mov	r2, r0
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080b54:	7c03      	ldrb	r3, [r0, #16]
 8080b56:	f013 0008 	ands.w	r0, r3, #8
 8080b5a:	bf1e      	ittt	ne
 8080b5c:	6a50      	ldrne	r0, [r2, #36]	; 0x24
 8080b5e:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
 8080b60:	1a18      	subne	r0, r3, r0
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080b62:	2800      	cmp	r0, #0
  }
 8080b64:	bfb8      	it	lt
 8080b66:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
 8080b6a:	4770      	bx	lr

08080b6c <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080b6c:	4770      	bx	lr

08080b6e <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
 8080b6e:	4770      	bx	lr

08080b70 <_ZN6SdFileD0Ev>:
 8080b70:	b510      	push	{r4, lr}
 8080b72:	4604      	mov	r4, r0
 8080b74:	212c      	movs	r1, #44	; 0x2c
 8080b76:	f00c fc4c 	bl	808d412 <_ZdlPvj>
 8080b7a:	4620      	mov	r0, r4
 8080b7c:	bd10      	pop	{r4, pc}

08080b7e <_ZN4FileD0Ev>:
 8080b7e:	b510      	push	{r4, lr}
 8080b80:	4604      	mov	r4, r0
 8080b82:	2134      	movs	r1, #52	; 0x34
 8080b84:	f00c fc45 	bl	808d412 <_ZdlPvj>
 8080b88:	4620      	mov	r0, r4
 8080b8a:	bd10      	pop	{r4, pc}

08080b8c <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080b8c:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080b8e:	2201      	movs	r2, #1
 8080b90:	f10d 0107 	add.w	r1, sp, #7
 8080b94:	3010      	adds	r0, #16
 8080b96:	f007 fd5b 	bl	8088650 <_ZN7FatFile4readEPvj>
 8080b9a:	2801      	cmp	r0, #1
 8080b9c:	bf14      	ite	ne
 8080b9e:	f04f 30ff 	movne.w	r0, #4294967295
 8080ba2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    return FatFile::read();
  }
 8080ba6:	b003      	add	sp, #12
 8080ba8:	f85d fb04 	ldr.w	pc, [sp], #4

08080bac <_ZN4File5flushEv>:
    FatFile::sync();
 8080bac:	3010      	adds	r0, #16
 8080bae:	f007 becf 	b.w	8088950 <_ZN7FatFile4syncEv>

08080bb2 <_ZN4File4peekEv>:
    return FatFile::peek();
 8080bb2:	3010      	adds	r0, #16
 8080bb4:	f007 bdfb 	b.w	80887ae <_ZN7FatFile4peekEv>

08080bb8 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080bb8:	3010      	adds	r0, #16
 8080bba:	f007 bf53 	b.w	8088a64 <_ZN7FatFile5writeEPKvj>

08080bbe <_ZN9PrintFile5writeEPKhj>:
    return FatFile::write(buf, size);
 8080bbe:	3008      	adds	r0, #8
 8080bc0:	f007 bf50 	b.w	8088a64 <_ZN7FatFile5writeEPKvj>

08080bc4 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
 8080bc4:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080bc6:	2201      	movs	r2, #1
 8080bc8:	f88d 1007 	strb.w	r1, [sp, #7]
 8080bcc:	3010      	adds	r0, #16
 8080bce:	f10d 0107 	add.w	r1, sp, #7
 8080bd2:	f007 ff47 	bl	8088a64 <_ZN7FatFile5writeEPKvj>
  }
 8080bd6:	b003      	add	sp, #12
 8080bd8:	f85d fb04 	ldr.w	pc, [sp], #4

08080bdc <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 8080bdc:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080be0:	f007 bba1 	b.w	8088326 <_ZN9SdSpiCard11writeBlocksEmPKhj>

08080be4 <_ZN9SdFatBase10readBlocksEmPhj>:
    return m_sdCard.readBlocks(block, dst, n);
 8080be4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080be8:	f007 bad5 	b.w	8088196 <_ZN9SdSpiCard10readBlocksEmPhj>

08080bec <_ZN9SdFatBase10writeBlockEmPKh>:
    return m_sdCard.writeBlock(block, src);
 8080bec:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080bf0:	f007 bb13 	b.w	808821a <_ZN9SdSpiCard10writeBlockEmPKh>

08080bf4 <_ZN9SdFatBase9readBlockEmPh>:
    return m_sdCard.readBlock(block, dst);
 8080bf4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080bf8:	f007 ba85 	b.w	8088106 <_ZN9SdSpiCard9readBlockEmPh>

08080bfc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080bfc:	b510      	push	{r4, lr}
 8080bfe:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080c00:	6800      	ldr	r0, [r0, #0]
 8080c02:	b108      	cbz	r0, 8080c08 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080c04:	f009 ffe2 	bl	808abcc <free>
class SystemClass {
 8080c08:	4620      	mov	r0, r4
 8080c0a:	bd10      	pop	{r4, pc}

08080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 8080c0c:	b510      	push	{r4, lr}
 8080c0e:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080c10:	2204      	movs	r2, #4
 8080c12:	f009 fd3b 	bl	808a68c <HAL_EEPROM_Put>
        return t;
    }
 8080c16:	4620      	mov	r0, r4
 8080c18:	bd10      	pop	{r4, pc}

08080c1a <_Z20remoteReadStoredVars6String>:
    }

}

int remoteReadStoredVars(String mem_address){
    uint16_t tempValue = 0;
 8080c1a:	2300      	movs	r3, #0
int remoteReadStoredVars(String mem_address){
 8080c1c:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080c1e:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080c22:	f00a fe2b 	bl	808b87c <_ZNK6String5toIntEv>
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080c26:	2890      	cmp	r0, #144	; 0x90
    int numerical_mem_address = mem_address.toInt();
 8080c28:	4604      	mov	r4, r0
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080c2a:	d80b      	bhi.n	8080c44 <_Z20remoteReadStoredVars6String+0x2a>
        EEPROM.get(numerical_mem_address, tempValue);
 8080c2c:	f00c fb4a 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080c30:	4620      	mov	r0, r4
 8080c32:	2202      	movs	r2, #2
 8080c34:	f10d 0106 	add.w	r1, sp, #6
 8080c38:	f009 fd20 	bl	808a67c <HAL_EEPROM_Get>
        return tempValue;
 8080c3c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    }else{
        return -1;
    }
}
 8080c40:	b002      	add	sp, #8
 8080c42:	bd10      	pop	{r4, pc}
        return -1;
 8080c44:	f04f 30ff 	mov.w	r0, #4294967295
 8080c48:	e7fa      	b.n	8080c40 <_Z20remoteReadStoredVars6String+0x26>

08080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>:
    template <typename T> T &get( int idx, T &t )
 8080c4a:	b510      	push	{r4, lr}
 8080c4c:	460c      	mov	r4, r1
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080c4e:	2204      	movs	r2, #4
 8080c50:	f009 fd14 	bl	808a67c <HAL_EEPROM_Get>
    }
 8080c54:	4620      	mov	r0, r4
 8080c56:	bd10      	pop	{r4, pc}

08080c58 <_ZN9PrintFile5writeEh>:
  size_t write(uint8_t b) {
 8080c58:	b507      	push	{r0, r1, r2, lr}
 8080c5a:	2201      	movs	r2, #1
 8080c5c:	f88d 1007 	strb.w	r1, [sp, #7]
 8080c60:	3008      	adds	r0, #8
 8080c62:	f10d 0107 	add.w	r1, sp, #7
 8080c66:	f007 fefd 	bl	8088a64 <_ZN7FatFile5writeEPKvj>
  }
 8080c6a:	b003      	add	sp, #12
 8080c6c:	f85d fb04 	ldr.w	pc, [sp], #4

08080c70 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080c70:	b40e      	push	{r1, r2, r3}
 8080c72:	b503      	push	{r0, r1, lr}
 8080c74:	ab03      	add	r3, sp, #12
 8080c76:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 8080c7a:	2100      	movs	r1, #0
        va_start(args, format);
 8080c7c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 8080c7e:	f00a ff6b 	bl	808bb58 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8080c82:	b002      	add	sp, #8
 8080c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8080c88:	b003      	add	sp, #12
 8080c8a:	4770      	bx	lr

08080c8c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080c8c:	b40e      	push	{r1, r2, r3}
 8080c8e:	b503      	push	{r0, r1, lr}
 8080c90:	ab03      	add	r3, sp, #12
 8080c92:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 8080c96:	2101      	movs	r1, #1
        va_start(args, format);
 8080c98:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 8080c9a:	f00a ff5d 	bl	808bb58 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8080c9e:	b002      	add	sp, #8
 8080ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8080ca4:	b003      	add	sp, #12
 8080ca6:	4770      	bx	lr

08080ca8 <_Z16locationCallbackfff>:
    Log.info("System version: %s", (const char*)System.version());
    

}

void locationCallback(float lat, float lon, float accuracy) {
 8080ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080cac:	b085      	sub	sp, #20
 8080cae:	4692      	mov	sl, r2
 8080cb0:	460c      	mov	r4, r1
 8080cb2:	4605      	mov	r5, r0
  // Handle the returned location data for the device. This method is passed three arguments:
  // - Latitude
  // - Longitude
  // - Accuracy of estimated location (in meters)
  Serial.println("google geolocation:");
 8080cb4:	f00b fefe 	bl	808cab4 <_Z16_fetch_usbserialv>
 8080cb8:	492e      	ldr	r1, [pc, #184]	; (8080d74 <_Z16locationCallbackfff+0xcc>)
 8080cba:	f00a fe40 	bl	808b93e <_ZN5Print7printlnEPKc>
  Serial.printlnf("Latitude:%f, longitude:%f, acc:%f", lat, lon, accuracy);
 8080cbe:	f00b fef9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8080cc2:	4683      	mov	fp, r0
 8080cc4:	4628      	mov	r0, r5
 8080cc6:	f00c fd15 	bl	808d6f4 <__aeabi_f2d>
 8080cca:	4680      	mov	r8, r0
 8080ccc:	4620      	mov	r0, r4
 8080cce:	4689      	mov	r9, r1
 8080cd0:	f00c fd10 	bl	808d6f4 <__aeabi_f2d>
 8080cd4:	4606      	mov	r6, r0
 8080cd6:	4650      	mov	r0, sl
 8080cd8:	460f      	mov	r7, r1
 8080cda:	f00c fd0b 	bl	808d6f4 <__aeabi_f2d>
 8080cde:	4604      	mov	r4, r0
 8080ce0:	460d      	mov	r5, r1
 8080ce2:	464b      	mov	r3, r9
 8080ce4:	4642      	mov	r2, r8
 8080ce6:	4924      	ldr	r1, [pc, #144]	; (8080d78 <_Z16locationCallbackfff+0xd0>)
 8080ce8:	4658      	mov	r0, fp
 8080cea:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8080cee:	e9cd 6700 	strd	r6, r7, [sp]
 8080cf2:	f7ff ffcb 	bl	8080c8c <_ZN5Print8printlnfEPKcz>
  snprintf(geolocation_latitude, sizeof(geolocation_latitude), "%.6f", lat);
 8080cf6:	210c      	movs	r1, #12
 8080cf8:	4a20      	ldr	r2, [pc, #128]	; (8080d7c <_Z16locationCallbackfff+0xd4>)
 8080cfa:	e9cd 8900 	strd	r8, r9, [sp]
 8080cfe:	4820      	ldr	r0, [pc, #128]	; (8080d80 <_Z16locationCallbackfff+0xd8>)
 8080d00:	f009 ff94 	bl	808ac2c <snprintf>
  snprintf(geolocation_longitude, sizeof(geolocation_longitude), "%.6f", lon);
 8080d04:	210d      	movs	r1, #13
 8080d06:	4a1d      	ldr	r2, [pc, #116]	; (8080d7c <_Z16locationCallbackfff+0xd4>)
 8080d08:	e9cd 6700 	strd	r6, r7, [sp]
 8080d0c:	481d      	ldr	r0, [pc, #116]	; (8080d84 <_Z16locationCallbackfff+0xdc>)
 8080d0e:	f009 ff8d 	bl	808ac2c <snprintf>
  snprintf(geolocation_accuracy, sizeof(geolocation_accuracy), "%3.2f", accuracy);
 8080d12:	4a1d      	ldr	r2, [pc, #116]	; (8080d88 <_Z16locationCallbackfff+0xe0>)
 8080d14:	2106      	movs	r1, #6
 8080d16:	e9cd 4500 	strd	r4, r5, [sp]
 8080d1a:	481c      	ldr	r0, [pc, #112]	; (8080d8c <_Z16locationCallbackfff+0xe4>)
 8080d1c:	f009 ff86 	bl	808ac2c <snprintf>
  if(gps.get_latitude() == 0){
 8080d20:	481b      	ldr	r0, [pc, #108]	; (8080d90 <_Z16locationCallbackfff+0xe8>)
 8080d22:	f006 fbb5 	bl	8087490 <_ZN3GPS12get_latitudeEv>
 8080d26:	2200      	movs	r2, #0
 8080d28:	2300      	movs	r3, #0
 8080d2a:	f00c ffa3 	bl	808dc74 <__aeabi_dcmpeq>
 8080d2e:	b168      	cbz	r0, 8080d4c <_Z16locationCallbackfff+0xa4>
      status_word.status_int |= 0x0008;
 8080d30:	4d18      	ldr	r5, [pc, #96]	; (8080d94 <_Z16locationCallbackfff+0xec>)
      status_word.status_int &= 0xFFF3;
      if(accuracy < 2){
 8080d32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8080d36:	882c      	ldrh	r4, [r5, #0]
 8080d38:	4650      	mov	r0, sl
 8080d3a:	f024 040c 	bic.w	r4, r4, #12
 8080d3e:	b2a4      	uxth	r4, r4
 8080d40:	f00d fb24 	bl	808e38c <__aeabi_fcmplt>
 8080d44:	b128      	cbz	r0, 8080d52 <_Z16locationCallbackfff+0xaa>
          status_word.status_int |= 0x000C;
 8080d46:	f044 040c 	orr.w	r4, r4, #12
      }else if(accuracy < 5){
          status_word.status_int |= 0x0008;
      }else if(accuracy < 20){
          status_word.status_int |= 0x0004;
 8080d4a:	802c      	strh	r4, [r5, #0]
      }
  }
}
 8080d4c:	b005      	add	sp, #20
 8080d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }else if(accuracy < 5){
 8080d52:	4650      	mov	r0, sl
 8080d54:	4910      	ldr	r1, [pc, #64]	; (8080d98 <_Z16locationCallbackfff+0xf0>)
 8080d56:	f00d fb19 	bl	808e38c <__aeabi_fcmplt>
 8080d5a:	b110      	cbz	r0, 8080d62 <_Z16locationCallbackfff+0xba>
          status_word.status_int |= 0x0008;
 8080d5c:	f044 0408 	orr.w	r4, r4, #8
 8080d60:	e7f3      	b.n	8080d4a <_Z16locationCallbackfff+0xa2>
      }else if(accuracy < 20){
 8080d62:	4650      	mov	r0, sl
 8080d64:	490d      	ldr	r1, [pc, #52]	; (8080d9c <_Z16locationCallbackfff+0xf4>)
 8080d66:	f00d fb11 	bl	808e38c <__aeabi_fcmplt>
 8080d6a:	2800      	cmp	r0, #0
 8080d6c:	d0ed      	beq.n	8080d4a <_Z16locationCallbackfff+0xa2>
          status_word.status_int |= 0x0004;
 8080d6e:	f044 0404 	orr.w	r4, r4, #4
 8080d72:	e7ea      	b.n	8080d4a <_Z16locationCallbackfff+0xa2>
 8080d74:	08091c62 	.word	0x08091c62
 8080d78:	08091c76 	.word	0x08091c76
 8080d7c:	08091c98 	.word	0x08091c98
 8080d80:	200000aa 	.word	0x200000aa
 8080d84:	200000b6 	.word	0x200000b6
 8080d88:	08091c9d 	.word	0x08091c9d
 8080d8c:	200000a4 	.word	0x200000a4
 8080d90:	20000720 	.word	0x20000720
 8080d94:	20000cf8 	.word	0x20000cf8
 8080d98:	40a00000 	.word	0x40a00000
 8080d9c:	41a00000 	.word	0x41a00000

08080da0 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080da0:	2300      	movs	r3, #0
 8080da2:	6840      	ldr	r0, [r0, #4]
 8080da4:	461a      	mov	r2, r3
 8080da6:	4619      	mov	r1, r3
 8080da8:	f009 be98 	b.w	808aadc <network_off>

08080dac <_ZN11USARTSerialD0Ev>:
 8080dac:	b510      	push	{r4, lr}
 8080dae:	4604      	mov	r4, r0
 8080db0:	2114      	movs	r1, #20
 8080db2:	f00c fb2e 	bl	808d412 <_ZdlPvj>
 8080db6:	4620      	mov	r0, r4
 8080db8:	bd10      	pop	{r4, pc}

08080dba <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080dba:	b538      	push	{r3, r4, r5, lr}
 8080dbc:	4605      	mov	r5, r0
    return this->name(name, strlen(name));
 8080dbe:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080dc0:	460c      	mov	r4, r1
    return this->name(name, strlen(name));
 8080dc2:	f00e fc7f 	bl	808f6c4 <strlen>
 8080dc6:	4621      	mov	r1, r4
 8080dc8:	4602      	mov	r2, r0
 8080dca:	4628      	mov	r0, r5
}
 8080dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->name(name, strlen(name));
 8080dd0:	f00c b9c0 	b.w	808d154 <_ZN5spark10JSONWriter4nameEPKcj>

08080dd4 <_ZN5spark10JSONWriter5valueERK6String>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
}

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
 8080dd4:	688a      	ldr	r2, [r1, #8]
 8080dd6:	6809      	ldr	r1, [r1, #0]
 8080dd8:	f00c b9cb 	b.w	808d172 <_ZN5spark10JSONWriter5valueEPKcj>

08080ddc <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080ddc:	b40e      	push	{r1, r2, r3}
 8080dde:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080de0:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 8080de2:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8080de4:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8080de6:	b08d      	sub	sp, #52	; 0x34
 8080de8:	aa0f      	add	r2, sp, #60	; 0x3c
 8080dea:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8080dee:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080df2:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8080df6:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080df8:	201e      	movs	r0, #30
 8080dfa:	aa04      	add	r2, sp, #16
 8080dfc:	f009 fdce 	bl	808a99c <log_message_v>
}
 8080e00:	b00d      	add	sp, #52	; 0x34
 8080e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080e06:	b003      	add	sp, #12
 8080e08:	4770      	bx	lr
	...

08080e0c <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static hal_usart_ring_buffer_t serial4_rx_buffer;
static hal_usart_ring_buffer_t serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080e0c:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080e0e:	4c0d      	ldr	r4, [pc, #52]	; (8080e44 <_Z22__fetch_global_Serial4v+0x38>)
 8080e10:	7823      	ldrb	r3, [r4, #0]
 8080e12:	f3bf 8f5b 	dmb	ish
 8080e16:	07db      	lsls	r3, r3, #31
 8080e18:	d411      	bmi.n	8080e3e <_Z22__fetch_global_Serial4v+0x32>
 8080e1a:	4620      	mov	r0, r4
 8080e1c:	f7ff f943 	bl	80800a6 <__cxa_guard_acquire>
 8080e20:	b168      	cbz	r0, 8080e3e <_Z22__fetch_global_Serial4v+0x32>
 8080e22:	2103      	movs	r1, #3
 8080e24:	4a08      	ldr	r2, [pc, #32]	; (8080e48 <_Z22__fetch_global_Serial4v+0x3c>)
 8080e26:	4b09      	ldr	r3, [pc, #36]	; (8080e4c <_Z22__fetch_global_Serial4v+0x40>)
 8080e28:	4809      	ldr	r0, [pc, #36]	; (8080e50 <_Z22__fetch_global_Serial4v+0x44>)
 8080e2a:	f00b ff6d 	bl	808cd08 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080e2e:	4620      	mov	r0, r4
 8080e30:	f7ff f93e 	bl	80800b0 <__cxa_guard_release>
 8080e34:	4a07      	ldr	r2, [pc, #28]	; (8080e54 <_Z22__fetch_global_Serial4v+0x48>)
 8080e36:	4908      	ldr	r1, [pc, #32]	; (8080e58 <_Z22__fetch_global_Serial4v+0x4c>)
 8080e38:	4805      	ldr	r0, [pc, #20]	; (8080e50 <_Z22__fetch_global_Serial4v+0x44>)
 8080e3a:	f00c fae5 	bl	808d408 <__aeabi_atexit>
	return serial4;
}
 8080e3e:	4804      	ldr	r0, [pc, #16]	; (8080e50 <_Z22__fetch_global_Serial4v+0x44>)
 8080e40:	bd10      	pop	{r4, pc}
 8080e42:	bf00      	nop
 8080e44:	2000038c 	.word	0x2000038c
 8080e48:	20000398 	.word	0x20000398
 8080e4c:	2000041c 	.word	0x2000041c
 8080e50:	200005ac 	.word	0x200005ac
 8080e54:	20000328 	.word	0x20000328
 8080e58:	08080b51 	.word	0x08080b51

08080e5c <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080e5c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080e5e:	f7ff ffd5 	bl	8080e0c <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080e62:	4b07      	ldr	r3, [pc, #28]	; (8080e80 <_Z15serialEventRun4v+0x24>)
 8080e64:	4604      	mov	r4, r0
 8080e66:	b153      	cbz	r3, 8080e7e <_Z15serialEventRun4v+0x22>
 8080e68:	f00b ff6b 	bl	808cd42 <_ZN11USARTSerial9isEnabledEv>
 8080e6c:	b138      	cbz	r0, 8080e7e <_Z15serialEventRun4v+0x22>
 8080e6e:	6823      	ldr	r3, [r4, #0]
 8080e70:	4620      	mov	r0, r4
 8080e72:	691b      	ldr	r3, [r3, #16]
 8080e74:	4798      	blx	r3
 8080e76:	2800      	cmp	r0, #0
 8080e78:	dd01      	ble.n	8080e7e <_Z15serialEventRun4v+0x22>
        handler();
 8080e7a:	f3af 8000 	nop.w
}
 8080e7e:	bd10      	pop	{r4, pc}
 8080e80:	00000000 	.word	0x00000000

08080e84 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static hal_usart_ring_buffer_t serial5_rx_buffer;
static hal_usart_ring_buffer_t serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080e84:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080e86:	4c0d      	ldr	r4, [pc, #52]	; (8080ebc <_Z22__fetch_global_Serial5v+0x38>)
 8080e88:	7823      	ldrb	r3, [r4, #0]
 8080e8a:	f3bf 8f5b 	dmb	ish
 8080e8e:	07db      	lsls	r3, r3, #31
 8080e90:	d411      	bmi.n	8080eb6 <_Z22__fetch_global_Serial5v+0x32>
 8080e92:	4620      	mov	r0, r4
 8080e94:	f7ff f907 	bl	80800a6 <__cxa_guard_acquire>
 8080e98:	b168      	cbz	r0, 8080eb6 <_Z22__fetch_global_Serial5v+0x32>
 8080e9a:	2104      	movs	r1, #4
 8080e9c:	4a08      	ldr	r2, [pc, #32]	; (8080ec0 <_Z22__fetch_global_Serial5v+0x3c>)
 8080e9e:	4b09      	ldr	r3, [pc, #36]	; (8080ec4 <_Z22__fetch_global_Serial5v+0x40>)
 8080ea0:	4809      	ldr	r0, [pc, #36]	; (8080ec8 <_Z22__fetch_global_Serial5v+0x44>)
 8080ea2:	f00b ff31 	bl	808cd08 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080ea6:	4620      	mov	r0, r4
 8080ea8:	f7ff f902 	bl	80800b0 <__cxa_guard_release>
 8080eac:	4a07      	ldr	r2, [pc, #28]	; (8080ecc <_Z22__fetch_global_Serial5v+0x48>)
 8080eae:	4908      	ldr	r1, [pc, #32]	; (8080ed0 <_Z22__fetch_global_Serial5v+0x4c>)
 8080eb0:	4805      	ldr	r0, [pc, #20]	; (8080ec8 <_Z22__fetch_global_Serial5v+0x44>)
 8080eb2:	f00c faa9 	bl	808d408 <__aeabi_atexit>
	return serial5;
}
 8080eb6:	4804      	ldr	r0, [pc, #16]	; (8080ec8 <_Z22__fetch_global_Serial5v+0x44>)
 8080eb8:	bd10      	pop	{r4, pc}
 8080eba:	bf00      	nop
 8080ebc:	20000390 	.word	0x20000390
 8080ec0:	200004a0 	.word	0x200004a0
 8080ec4:	20000524 	.word	0x20000524
 8080ec8:	200005c0 	.word	0x200005c0
 8080ecc:	20000328 	.word	0x20000328
 8080ed0:	08080b51 	.word	0x08080b51

08080ed4 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080ed4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080ed6:	f7ff ffd5 	bl	8080e84 <_Z22__fetch_global_Serial5v>
    if (handler && serial.isEnabled() && serial.available()>0)
 8080eda:	4b07      	ldr	r3, [pc, #28]	; (8080ef8 <_Z15serialEventRun5v+0x24>)
 8080edc:	4604      	mov	r4, r0
 8080ede:	b153      	cbz	r3, 8080ef6 <_Z15serialEventRun5v+0x22>
 8080ee0:	f00b ff2f 	bl	808cd42 <_ZN11USARTSerial9isEnabledEv>
 8080ee4:	b138      	cbz	r0, 8080ef6 <_Z15serialEventRun5v+0x22>
 8080ee6:	6823      	ldr	r3, [r4, #0]
 8080ee8:	4620      	mov	r0, r4
 8080eea:	691b      	ldr	r3, [r3, #16]
 8080eec:	4798      	blx	r3
 8080eee:	2800      	cmp	r0, #0
 8080ef0:	dd01      	ble.n	8080ef6 <_Z15serialEventRun5v+0x22>
        handler();
 8080ef2:	f3af 8000 	nop.w
}
 8080ef6:	bd10      	pop	{r4, pc}
 8080ef8:	00000000 	.word	0x00000000

08080efc <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080efc:	b538      	push	{r3, r4, r5, lr}
 8080efe:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080f00:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080f04:	f007 f86e 	bl	8087fe4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080f08:	b908      	cbnz	r0, 8080f0e <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x12>
 8080f0a:	2000      	movs	r0, #0
  }
 8080f0c:	bd38      	pop	{r3, r4, r5, pc}
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080f0e:	f504 6588 	add.w	r5, r4, #1088	; 0x440
    vwd()->close();
 8080f12:	4628      	mov	r0, r5
 8080f14:	f007 fd52 	bl	80889bc <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080f18:	2101      	movs	r1, #1
 8080f1a:	4620      	mov	r0, r4
 8080f1c:	f007 ff7b 	bl	8088e16 <_ZN9FatVolume4initEh>
 8080f20:	4601      	mov	r1, r0
 8080f22:	b168      	cbz	r0, 8080f40 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x44>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080f24:	4621      	mov	r1, r4
 8080f26:	4628      	mov	r0, r5
 8080f28:	f007 fb79 	bl	808861e <_ZN7FatFile8openRootEP9FatVolume>
 8080f2c:	2800      	cmp	r0, #0
 8080f2e:	d0ec      	beq.n	8080f0a <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    if (!dir->isDir()) {
 8080f30:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080f34:	f013 0f70 	tst.w	r3, #112	; 0x70
 8080f38:	d0e7      	beq.n	8080f0a <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    m_cwd = dir;
 8080f3a:	4b04      	ldr	r3, [pc, #16]	; (8080f4c <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080f3c:	601d      	str	r5, [r3, #0]
    return true;
 8080f3e:	e7e5      	b.n	8080f0c <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x10>
    return (part ? init(part) : init(1) || init(0))
 8080f40:	4620      	mov	r0, r4
 8080f42:	f007 ff68 	bl	8088e16 <_ZN9FatVolume4initEh>
 8080f46:	2800      	cmp	r0, #0
 8080f48:	d1ec      	bne.n	8080f24 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x28>
 8080f4a:	e7de      	b.n	8080f0a <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
 8080f4c:	20000d5c 	.word	0x20000d5c

08080f50 <_Z13writeRegisterhh>:
void writeRegister(uint8_t reg, uint8_t value) {
 8080f50:	b538      	push	{r3, r4, r5, lr}
 8080f52:	460c      	mov	r4, r1
 8080f54:	4605      	mov	r5, r0
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080f56:	f00c fa2f 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
 8080f5a:	216b      	movs	r1, #107	; 0x6b
 8080f5c:	f00b ffa4 	bl	808cea8 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080f60:	f00c fa2a 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
 8080f64:	6803      	ldr	r3, [r0, #0]
 8080f66:	4629      	mov	r1, r5
 8080f68:	689b      	ldr	r3, [r3, #8]
 8080f6a:	4798      	blx	r3
    Wire3.write(value);
 8080f6c:	f00c fa24 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
 8080f70:	6803      	ldr	r3, [r0, #0]
 8080f72:	4621      	mov	r1, r4
 8080f74:	689b      	ldr	r3, [r3, #8]
 8080f76:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080f78:	f00c fa1e 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
}
 8080f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire3.endTransmission(true);
 8080f80:	2101      	movs	r1, #1
 8080f82:	f00b bfac 	b.w	808cede <_ZN7TwoWire15endTransmissionEh>
	...

08080f88 <_Z20writeDefaultSettingsv>:
void writeDefaultSettings(void){
 8080f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080f8a:	f00c f99b 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8080f8e:	f240 6313 	movw	r3, #1555	; 0x613
    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080f92:	2564      	movs	r5, #100	; 0x64
    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080f94:	2400      	movs	r4, #0
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080f96:	a901      	add	r1, sp, #4
 8080f98:	2000      	movs	r0, #0
 8080f9a:	9301      	str	r3, [sp, #4]
 8080f9c:	f7ff fe36 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080fa0:	f00c f990 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8080fa4:	a901      	add	r1, sp, #4
 8080fa6:	2008      	movs	r0, #8
 8080fa8:	9501      	str	r5, [sp, #4]
 8080faa:	f7ff fe2f 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SLOPE_MEM_ADDRESS, 100);
 8080fae:	f00c f989 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8080fb2:	a901      	add	r1, sp, #4
 8080fb4:	2010      	movs	r0, #16
 8080fb6:	9501      	str	r5, [sp, #4]
 8080fb8:	f7ff fe28 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080fbc:	f00c f982 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8080fc0:	a901      	add	r1, sp, #4
 8080fc2:	2018      	movs	r0, #24
 8080fc4:	9501      	str	r5, [sp, #4]
 8080fc6:	f7ff fe21 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080fca:	f00c f97b 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8080fce:	a901      	add	r1, sp, #4
 8080fd0:	2020      	movs	r0, #32
 8080fd2:	9501      	str	r5, [sp, #4]
 8080fd4:	f7ff fe1a 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080fd8:	f00c f974 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8080fdc:	a901      	add	r1, sp, #4
 8080fde:	2028      	movs	r0, #40	; 0x28
 8080fe0:	9501      	str	r5, [sp, #4]
 8080fe2:	f7ff fe13 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080fe6:	f00c f96d 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8080fea:	a901      	add	r1, sp, #4
 8080fec:	2030      	movs	r0, #48	; 0x30
 8080fee:	9501      	str	r5, [sp, #4]
 8080ff0:	f7ff fe0c 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080ff4:	f00c f966 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8080ff8:	a901      	add	r1, sp, #4
 8080ffa:	2038      	movs	r0, #56	; 0x38
 8080ffc:	9501      	str	r5, [sp, #4]
 8080ffe:	f7ff fe05 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8081002:	f00c f95f 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081006:	a901      	add	r1, sp, #4
 8081008:	2040      	movs	r0, #64	; 0x40
 808100a:	9501      	str	r5, [sp, #4]
 808100c:	f7ff fdfe 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8081010:	f00c f958 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081014:	a901      	add	r1, sp, #4
 8081016:	2004      	movs	r0, #4
 8081018:	9401      	str	r4, [sp, #4]
 808101a:	f7ff fdf7 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_ZERO_MEM_ADDRESS, 0);
 808101e:	f00c f951 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081022:	a901      	add	r1, sp, #4
 8081024:	200c      	movs	r0, #12
 8081026:	9401      	str	r4, [sp, #4]
 8081028:	f7ff fdf0 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 808102c:	f00c f94a 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081030:	a901      	add	r1, sp, #4
 8081032:	2014      	movs	r0, #20
 8081034:	9401      	str	r4, [sp, #4]
 8081036:	f7ff fde9 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 808103a:	f00c f943 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808103e:	a901      	add	r1, sp, #4
 8081040:	201c      	movs	r0, #28
 8081042:	9401      	str	r4, [sp, #4]
 8081044:	f7ff fde2 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8081048:	f00c f93c 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808104c:	a901      	add	r1, sp, #4
 808104e:	2024      	movs	r0, #36	; 0x24
 8081050:	9401      	str	r4, [sp, #4]
 8081052:	f7ff fddb 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8081056:	f00c f935 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808105a:	a901      	add	r1, sp, #4
 808105c:	202c      	movs	r0, #44	; 0x2c
 808105e:	9401      	str	r4, [sp, #4]
 8081060:	f7ff fdd4 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8081064:	f00c f92e 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081068:	a901      	add	r1, sp, #4
 808106a:	2034      	movs	r0, #52	; 0x34
 808106c:	9401      	str	r4, [sp, #4]
 808106e:	f7ff fdcd 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8081072:	f00c f927 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081076:	a901      	add	r1, sp, #4
 8081078:	203c      	movs	r0, #60	; 0x3c
 808107a:	9401      	str	r4, [sp, #4]
 808107c:	f7ff fdc6 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8081080:	f00c f920 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081084:	a901      	add	r1, sp, #4
 8081086:	2044      	movs	r0, #68	; 0x44
 8081088:	9401      	str	r4, [sp, #4]
 808108a:	f7ff fdbf 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 808108e:	f00c f919 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081092:	a901      	add	r1, sp, #4
 8081094:	2048      	movs	r0, #72	; 0x48
 8081096:	9401      	str	r4, [sp, #4]
 8081098:	f7ff fdb8 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 808109c:	f00c f912 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80810a0:	a901      	add	r1, sp, #4
 80810a2:	2058      	movs	r0, #88	; 0x58
 80810a4:	9401      	str	r4, [sp, #4]
 80810a6:	f7ff fdb1 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 80810aa:	f00c f90b 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80810ae:	4941      	ldr	r1, [pc, #260]	; (80811b4 <_Z20writeDefaultSettingsv+0x22c>)
 80810b0:	205c      	movs	r0, #92	; 0x5c
 80810b2:	f7ff fdab 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 80810b6:	f00c f905 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80810ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80810be:	a901      	add	r1, sp, #4
 80810c0:	204c      	movs	r0, #76	; 0x4c
 80810c2:	9301      	str	r3, [sp, #4]
 80810c4:	f7ff fda2 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 80810c8:	f00c f8fc 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80810cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80810d0:	a901      	add	r1, sp, #4
 80810d2:	2050      	movs	r0, #80	; 0x50
 80810d4:	9301      	str	r3, [sp, #4]
 80810d6:	f7ff fd99 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 80810da:	f00c f8f3 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80810de:	f06f 0306 	mvn.w	r3, #6
 80810e2:	a901      	add	r1, sp, #4
 80810e4:	2054      	movs	r0, #84	; 0x54
 80810e6:	9301      	str	r3, [sp, #4]
 80810e8:	f7ff fd90 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    Time.zone(tempValue);
 80810ec:	4b32      	ldr	r3, [pc, #200]	; (80811b8 <_Z20writeDefaultSettingsv+0x230>)
 80810ee:	6818      	ldr	r0, [r3, #0]
 80810f0:	f00c ff5a 	bl	808dfa8 <__aeabi_i2f>
 80810f4:	f00a fe56 	bl	808bda4 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 80810f8:	f00c f8e4 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80810fc:	a901      	add	r1, sp, #4
 80810fe:	2060      	movs	r0, #96	; 0x60
 8081100:	9401      	str	r4, [sp, #4]
 8081102:	f7ff fd83 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8081106:	f00c f8dd 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808110a:	4628      	mov	r0, r5
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 808110c:	2501      	movs	r5, #1
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 808110e:	a901      	add	r1, sp, #4
 8081110:	9401      	str	r4, [sp, #4]
 8081112:	f7ff fd7b 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8081116:	f00c f8d5 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808111a:	a901      	add	r1, sp, #4
 808111c:	2068      	movs	r0, #104	; 0x68
 808111e:	9501      	str	r5, [sp, #4]
 8081120:	f7ff fd74 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8081124:	f00c f8ce 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081128:	a901      	add	r1, sp, #4
 808112a:	206c      	movs	r0, #108	; 0x6c
 808112c:	9401      	str	r4, [sp, #4]
 808112e:	f7ff fd6d 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS,0);
 8081132:	f00c f8c7 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081136:	a901      	add	r1, sp, #4
 8081138:	2070      	movs	r0, #112	; 0x70
 808113a:	9401      	str	r4, [sp, #4]
 808113c:	f7ff fd66 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8081140:	f00c f8c0 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081144:	a901      	add	r1, sp, #4
 8081146:	2074      	movs	r0, #116	; 0x74
 8081148:	9501      	str	r5, [sp, #4]
 808114a:	f7ff fd5f 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 808114e:	f00c f8b9 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081152:	a901      	add	r1, sp, #4
 8081154:	2078      	movs	r0, #120	; 0x78
 8081156:	9501      	str	r5, [sp, #4]
 8081158:	f7ff fd58 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 808115c:	f00c f8b2 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081160:	a901      	add	r1, sp, #4
 8081162:	207c      	movs	r0, #124	; 0x7c
 8081164:	9401      	str	r4, [sp, #4]
 8081166:	f7ff fd51 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 808116a:	f00c f8ab 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808116e:	a901      	add	r1, sp, #4
 8081170:	2080      	movs	r0, #128	; 0x80
 8081172:	9501      	str	r5, [sp, #4]
 8081174:	f7ff fd4a 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8081178:	f00c f8a4 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808117c:	a901      	add	r1, sp, #4
 808117e:	2084      	movs	r0, #132	; 0x84
 8081180:	9401      	str	r4, [sp, #4]
 8081182:	f7ff fd43 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 8081186:	f00c f89d 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808118a:	a901      	add	r1, sp, #4
 808118c:	2088      	movs	r0, #136	; 0x88
 808118e:	9401      	str	r4, [sp, #4]
 8081190:	f7ff fd3c 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, 0);
 8081194:	f00c f896 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081198:	a901      	add	r1, sp, #4
 808119a:	208c      	movs	r0, #140	; 0x8c
 808119c:	9401      	str	r4, [sp, #4]
 808119e:	f7ff fd35 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 80811a2:	f00c f88f 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80811a6:	a901      	add	r1, sp, #4
 80811a8:	2090      	movs	r0, #144	; 0x90
 80811aa:	9401      	str	r4, [sp, #4]
 80811ac:	f7ff fd2e 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
}
 80811b0:	b003      	add	sp, #12
 80811b2:	bd30      	pop	{r4, r5, pc}
 80811b4:	20000d10 	.word	0x20000d10
 80811b8:	20000cfc 	.word	0x20000cfc

080811bc <_Z14readStoredVarsv>:
void readStoredVars(void){
 80811bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 80811c0:	4cb6      	ldr	r4, [pc, #728]	; (808149c <_Z14readStoredVarsv+0x2e0>)
 80811c2:	f00c f87f 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80811c6:	4621      	mov	r1, r4
 80811c8:	2000      	movs	r0, #0
 80811ca:	f7ff fd3e 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if(DEVICE_id == -1){
 80811ce:	6823      	ldr	r3, [r4, #0]
 80811d0:	3301      	adds	r3, #1
 80811d2:	d104      	bne.n	80811de <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 80811d4:	f240 6313 	movw	r3, #1555	; 0x613
 80811d8:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 80811da:	f7ff fed5 	bl	8080f88 <_Z20writeDefaultSettingsv>
    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 80811de:	f00c f871 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80811e2:	a901      	add	r1, sp, #4
 80811e4:	2008      	movs	r0, #8
 80811e6:	f7ff fd30 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO2_slope = tempValue;
 80811ea:	9801      	ldr	r0, [sp, #4]
 80811ec:	f00c fedc 	bl	808dfa8 <__aeabi_i2f>
    CO2_slope /= 100;
 80811f0:	49ab      	ldr	r1, [pc, #684]	; (80814a0 <_Z14readStoredVarsv+0x2e4>)
 80811f2:	f00c ffe1 	bl	808e1b8 <__aeabi_fdiv>
 80811f6:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8081528 <_Z14readStoredVarsv+0x36c>
    CO_slope /= 100;
 80811fa:	4faa      	ldr	r7, [pc, #680]	; (80814a4 <_Z14readStoredVarsv+0x2e8>)
    CO2_slope /= 100;
 80811fc:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
 8081200:	f00c f860 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081204:	a901      	add	r1, sp, #4
 8081206:	2010      	movs	r0, #16
 8081208:	f7ff fd1f 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO_slope = tempValue;
 808120c:	9801      	ldr	r0, [sp, #4]
 808120e:	f00c fecb 	bl	808dfa8 <__aeabi_i2f>
    CO_slope /= 100;
 8081212:	49a3      	ldr	r1, [pc, #652]	; (80814a0 <_Z14readStoredVarsv+0x2e4>)
 8081214:	f00c ffd0 	bl	808e1b8 <__aeabi_fdiv>
 8081218:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 808121a:	f00c f853 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808121e:	a901      	add	r1, sp, #4
 8081220:	2018      	movs	r0, #24
 8081222:	f7ff fd12 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_1_slope = tempValue;
 8081226:	9801      	ldr	r0, [sp, #4]
 8081228:	f00c febe 	bl	808dfa8 <__aeabi_i2f>
    PM_1_slope /= 100;
 808122c:	499c      	ldr	r1, [pc, #624]	; (80814a0 <_Z14readStoredVarsv+0x2e4>)
 808122e:	f00c ffc3 	bl	808e1b8 <__aeabi_fdiv>
 8081232:	4e9d      	ldr	r6, [pc, #628]	; (80814a8 <_Z14readStoredVarsv+0x2ec>)
    PM_25_slope /= 100;
 8081234:	4d9d      	ldr	r5, [pc, #628]	; (80814ac <_Z14readStoredVarsv+0x2f0>)
    PM_1_slope /= 100;
 8081236:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8081238:	f00c f844 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808123c:	a901      	add	r1, sp, #4
 808123e:	2020      	movs	r0, #32
 8081240:	f7ff fd03 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_25_slope = tempValue;
 8081244:	9801      	ldr	r0, [sp, #4]
 8081246:	f00c feaf 	bl	808dfa8 <__aeabi_i2f>
    PM_25_slope /= 100;
 808124a:	4995      	ldr	r1, [pc, #596]	; (80814a0 <_Z14readStoredVarsv+0x2e4>)
 808124c:	f00c ffb4 	bl	808e1b8 <__aeabi_fdiv>
 8081250:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8081252:	f00c f837 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081256:	a901      	add	r1, sp, #4
 8081258:	2028      	movs	r0, #40	; 0x28
 808125a:	f7ff fcf6 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_10_slope = tempValue;
 808125e:	9801      	ldr	r0, [sp, #4]
 8081260:	f00c fea2 	bl	808dfa8 <__aeabi_i2f>
    PM_10_slope /= 100;
 8081264:	498e      	ldr	r1, [pc, #568]	; (80814a0 <_Z14readStoredVarsv+0x2e4>)
 8081266:	f00c ffa7 	bl	808e1b8 <__aeabi_fdiv>
 808126a:	4c91      	ldr	r4, [pc, #580]	; (80814b0 <_Z14readStoredVarsv+0x2f4>)
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 808126c:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 808152c <_Z14readStoredVarsv+0x370>
    PM_10_slope /= 100;
 8081270:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 8081272:	f00c f827 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081276:	a901      	add	r1, sp, #4
 8081278:	2030      	movs	r0, #48	; 0x30
 808127a:	f7ff fce6 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    temp_slope = tempValue;
 808127e:	9801      	ldr	r0, [sp, #4]
 8081280:	f00c fe92 	bl	808dfa8 <__aeabi_i2f>
    temp_slope /= 100;
 8081284:	4986      	ldr	r1, [pc, #536]	; (80814a0 <_Z14readStoredVarsv+0x2e4>)
 8081286:	f00c ff97 	bl	808e1b8 <__aeabi_fdiv>
 808128a:	4b8a      	ldr	r3, [pc, #552]	; (80814b4 <_Z14readStoredVarsv+0x2f8>)
 808128c:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 808128e:	f00c f819 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081292:	a901      	add	r1, sp, #4
 8081294:	2038      	movs	r0, #56	; 0x38
 8081296:	f7ff fcd8 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    pressure_slope = tempValue;
 808129a:	9801      	ldr	r0, [sp, #4]
 808129c:	f00c fe84 	bl	808dfa8 <__aeabi_i2f>
    pressure_slope /= 100;
 80812a0:	497f      	ldr	r1, [pc, #508]	; (80814a0 <_Z14readStoredVarsv+0x2e4>)
 80812a2:	f00c ff89 	bl	808e1b8 <__aeabi_fdiv>
 80812a6:	4b84      	ldr	r3, [pc, #528]	; (80814b8 <_Z14readStoredVarsv+0x2fc>)
 80812a8:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 80812aa:	f00c f80b 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80812ae:	a901      	add	r1, sp, #4
 80812b0:	2040      	movs	r0, #64	; 0x40
 80812b2:	f7ff fcca 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    rh_slope = tempValue;
 80812b6:	9801      	ldr	r0, [sp, #4]
 80812b8:	f00c fe76 	bl	808dfa8 <__aeabi_i2f>
    rh_slope /= 100;
 80812bc:	4978      	ldr	r1, [pc, #480]	; (80814a0 <_Z14readStoredVarsv+0x2e4>)
 80812be:	f00c ff7b 	bl	808e1b8 <__aeabi_fdiv>
 80812c2:	4b7e      	ldr	r3, [pc, #504]	; (80814bc <_Z14readStoredVarsv+0x300>)
 80812c4:	6018      	str	r0, [r3, #0]
    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 80812c6:	f00b fffd 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80812ca:	497d      	ldr	r1, [pc, #500]	; (80814c0 <_Z14readStoredVarsv+0x304>)
 80812cc:	2004      	movs	r0, #4
 80812ce:	f7ff fcbc 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_ZERO_MEM_ADDRESS, CO_zero);
 80812d2:	f00b fff7 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80812d6:	497b      	ldr	r1, [pc, #492]	; (80814c4 <_Z14readStoredVarsv+0x308>)
 80812d8:	200c      	movs	r0, #12
 80812da:	f7ff fcb6 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 80812de:	f00b fff1 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80812e2:	4979      	ldr	r1, [pc, #484]	; (80814c8 <_Z14readStoredVarsv+0x30c>)
 80812e4:	2014      	movs	r0, #20
 80812e6:	f7ff fcb0 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 80812ea:	f00b ffeb 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80812ee:	4977      	ldr	r1, [pc, #476]	; (80814cc <_Z14readStoredVarsv+0x310>)
 80812f0:	201c      	movs	r0, #28
 80812f2:	f7ff fcaa 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 80812f6:	f00b ffe5 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80812fa:	4975      	ldr	r1, [pc, #468]	; (80814d0 <_Z14readStoredVarsv+0x314>)
 80812fc:	2024      	movs	r0, #36	; 0x24
 80812fe:	f7ff fca4 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 8081302:	f00b ffdf 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081306:	4973      	ldr	r1, [pc, #460]	; (80814d4 <_Z14readStoredVarsv+0x318>)
 8081308:	202c      	movs	r0, #44	; 0x2c
 808130a:	f7ff fc9e 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 808130e:	f00b ffd9 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081312:	4971      	ldr	r1, [pc, #452]	; (80814d8 <_Z14readStoredVarsv+0x31c>)
 8081314:	2034      	movs	r0, #52	; 0x34
 8081316:	f7ff fc98 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 808131a:	f00b ffd3 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808131e:	496f      	ldr	r1, [pc, #444]	; (80814dc <_Z14readStoredVarsv+0x320>)
 8081320:	203c      	movs	r0, #60	; 0x3c
 8081322:	f7ff fc92 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8081326:	f00b ffcd 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808132a:	496d      	ldr	r1, [pc, #436]	; (80814e0 <_Z14readStoredVarsv+0x324>)
 808132c:	2044      	movs	r0, #68	; 0x44
 808132e:	f7ff fc8c 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8081332:	f00b ffc7 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081336:	496b      	ldr	r1, [pc, #428]	; (80814e4 <_Z14readStoredVarsv+0x328>)
 8081338:	2048      	movs	r0, #72	; 0x48
 808133a:	f7ff fc86 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808133e:	f00b ffc1 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081342:	4969      	ldr	r1, [pc, #420]	; (80814e8 <_Z14readStoredVarsv+0x32c>)
 8081344:	2058      	movs	r0, #88	; 0x58
 8081346:	f7ff fc80 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 808134a:	f00b ffbb 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808134e:	4967      	ldr	r1, [pc, #412]	; (80814ec <_Z14readStoredVarsv+0x330>)
 8081350:	205c      	movs	r0, #92	; 0x5c
 8081352:	f7ff fc7a 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8081356:	f00b ffb5 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808135a:	4965      	ldr	r1, [pc, #404]	; (80814f0 <_Z14readStoredVarsv+0x334>)
 808135c:	204c      	movs	r0, #76	; 0x4c
 808135e:	f7ff fc74 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8081362:	f00b ffaf 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081366:	4963      	ldr	r1, [pc, #396]	; (80814f4 <_Z14readStoredVarsv+0x338>)
 8081368:	2050      	movs	r0, #80	; 0x50
 808136a:	f7ff fc6e 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 808136e:	f00b ffa9 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081372:	a901      	add	r1, sp, #4
 8081374:	2054      	movs	r0, #84	; 0x54
 8081376:	f7ff fc68 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    Time.zone(tempValue);
 808137a:	9801      	ldr	r0, [sp, #4]
 808137c:	f00c fe14 	bl	808dfa8 <__aeabi_i2f>
 8081380:	f00a fd10 	bl	808bda4 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8081384:	f00b ff9e 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081388:	495b      	ldr	r1, [pc, #364]	; (80814f8 <_Z14readStoredVarsv+0x33c>)
 808138a:	2060      	movs	r0, #96	; 0x60
 808138c:	f7ff fc5d 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8081390:	f00b ff98 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081394:	4959      	ldr	r1, [pc, #356]	; (80814fc <_Z14readStoredVarsv+0x340>)
 8081396:	2064      	movs	r0, #100	; 0x64
 8081398:	f7ff fc57 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 808139c:	f00b ff92 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80813a0:	4957      	ldr	r1, [pc, #348]	; (8081500 <_Z14readStoredVarsv+0x344>)
 80813a2:	2068      	movs	r0, #104	; 0x68
 80813a4:	f7ff fc51 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80813a8:	f00b ff8c 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80813ac:	4955      	ldr	r1, [pc, #340]	; (8081504 <_Z14readStoredVarsv+0x348>)
 80813ae:	206c      	movs	r0, #108	; 0x6c
 80813b0:	f7ff fc4b 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 80813b4:	f00b ff86 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80813b8:	4953      	ldr	r1, [pc, #332]	; (8081508 <_Z14readStoredVarsv+0x34c>)
 80813ba:	2070      	movs	r0, #112	; 0x70
 80813bc:	f7ff fc45 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 80813c0:	f00b ff80 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80813c4:	4951      	ldr	r1, [pc, #324]	; (808150c <_Z14readStoredVarsv+0x350>)
 80813c6:	2074      	movs	r0, #116	; 0x74
 80813c8:	f7ff fc3f 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80813cc:	f00b ff7a 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80813d0:	494f      	ldr	r1, [pc, #316]	; (8081510 <_Z14readStoredVarsv+0x354>)
 80813d2:	2078      	movs	r0, #120	; 0x78
 80813d4:	f7ff fc39 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80813d8:	f00b ff74 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80813dc:	494d      	ldr	r1, [pc, #308]	; (8081514 <_Z14readStoredVarsv+0x358>)
 80813de:	207c      	movs	r0, #124	; 0x7c
 80813e0:	f7ff fc33 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80813e4:	f00b ff6e 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80813e8:	494b      	ldr	r1, [pc, #300]	; (8081518 <_Z14readStoredVarsv+0x35c>)
 80813ea:	2080      	movs	r0, #128	; 0x80
 80813ec:	f7ff fc2d 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80813f0:	f00b ff68 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80813f4:	4949      	ldr	r1, [pc, #292]	; (808151c <_Z14readStoredVarsv+0x360>)
 80813f6:	2084      	movs	r0, #132	; 0x84
 80813f8:	f7ff fc27 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80813fc:	f00b ff62 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081400:	4947      	ldr	r1, [pc, #284]	; (8081520 <_Z14readStoredVarsv+0x364>)
 8081402:	2088      	movs	r0, #136	; 0x88
 8081404:	f7ff fc21 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8081408:	f00b ff5c 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808140c:	4649      	mov	r1, r9
 808140e:	208c      	movs	r0, #140	; 0x8c
 8081410:	f7ff fc1b 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8081414:	f00b ff56 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8081418:	2090      	movs	r0, #144	; 0x90
 808141a:	4942      	ldr	r1, [pc, #264]	; (8081524 <_Z14readStoredVarsv+0x368>)
 808141c:	f7ff fc15 	bl	8080c4a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if(sensible_iot_en){
 8081420:	f8d9 3000 	ldr.w	r3, [r9]
 8081424:	b113      	cbz	r3, 808142c <_Z14readStoredVarsv+0x270>
        Time.zone(0);       //use UTC if using sensible iot upload
 8081426:	2000      	movs	r0, #0
 8081428:	f00a fcbc 	bl	808bda4 <_ZN9TimeClass4zoneEf>
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 808142c:	f241 3187 	movw	r1, #4999	; 0x1387
 8081430:	4a36      	ldr	r2, [pc, #216]	; (808150c <_Z14readStoredVarsv+0x350>)
    if(!CO2_slope)
 8081432:	f8d8 0000 	ldr.w	r0, [r8]
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 8081436:	6813      	ldr	r3, [r2, #0]
 8081438:	3b01      	subs	r3, #1
 808143a:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 808143c:	bf88      	it	hi
 808143e:	2301      	movhi	r3, #1
    if(!CO2_slope)
 8081440:	f04f 0100 	mov.w	r1, #0
        measurements_to_average = 1;
 8081444:	bf88      	it	hi
 8081446:	6013      	strhi	r3, [r2, #0]
    if(!CO2_slope)
 8081448:	f00c ff96 	bl	808e378 <__aeabi_fcmpeq>
 808144c:	b118      	cbz	r0, 8081456 <_Z14readStoredVarsv+0x29a>
        CO2_slope = 1;
 808144e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081452:	f8c8 3000 	str.w	r3, [r8]
    if(!CO_slope)
 8081456:	2100      	movs	r1, #0
 8081458:	6838      	ldr	r0, [r7, #0]
 808145a:	f00c ff8d 	bl	808e378 <__aeabi_fcmpeq>
 808145e:	b110      	cbz	r0, 8081466 <_Z14readStoredVarsv+0x2aa>
        CO_slope = 1;
 8081460:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081464:	603b      	str	r3, [r7, #0]
    if(!PM_1_slope)
 8081466:	2100      	movs	r1, #0
 8081468:	6830      	ldr	r0, [r6, #0]
 808146a:	f00c ff85 	bl	808e378 <__aeabi_fcmpeq>
 808146e:	b110      	cbz	r0, 8081476 <_Z14readStoredVarsv+0x2ba>
        PM_1_slope = 1;
 8081470:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081474:	6033      	str	r3, [r6, #0]
    if(!PM_25_slope)
 8081476:	2100      	movs	r1, #0
 8081478:	6828      	ldr	r0, [r5, #0]
 808147a:	f00c ff7d 	bl	808e378 <__aeabi_fcmpeq>
 808147e:	b110      	cbz	r0, 8081486 <_Z14readStoredVarsv+0x2ca>
        PM_25_slope = 1;
 8081480:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081484:	602b      	str	r3, [r5, #0]
    if(!PM_10_slope)
 8081486:	2100      	movs	r1, #0
 8081488:	6820      	ldr	r0, [r4, #0]
 808148a:	f00c ff75 	bl	808e378 <__aeabi_fcmpeq>
 808148e:	b110      	cbz	r0, 8081496 <_Z14readStoredVarsv+0x2da>
        PM_10_slope = 1;
 8081490:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081494:	6023      	str	r3, [r4, #0]
}
 8081496:	b003      	add	sp, #12
 8081498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808149c:	20000080 	.word	0x20000080
 80814a0:	42c80000 	.word	0x42c80000
 80814a4:	20000344 	.word	0x20000344
 80814a8:	20000370 	.word	0x20000370
 80814ac:	20000378 	.word	0x20000378
 80814b0:	20000368 	.word	0x20000368
 80814b4:	20000d00 	.word	0x20000d00
 80814b8:	2000084c 	.word	0x2000084c
 80814bc:	20000854 	.word	0x20000854
 80814c0:	2000033c 	.word	0x2000033c
 80814c4:	20000350 	.word	0x20000350
 80814c8:	20000374 	.word	0x20000374
 80814cc:	2000037c 	.word	0x2000037c
 80814d0:	2000036c 	.word	0x2000036c
 80814d4:	20000d04 	.word	0x20000d04
 80814d8:	20000850 	.word	0x20000850
 80814dc:	20000858 	.word	0x20000858
 80814e0:	20000cdc 	.word	0x20000cdc
 80814e4:	20000690 	.word	0x20000690
 80814e8:	20000808 	.word	0x20000808
 80814ec:	20000d10 	.word	0x20000d10
 80814f0:	20000098 	.word	0x20000098
 80814f4:	200000a0 	.word	0x200000a0
 80814f8:	20000d08 	.word	0x20000d08
 80814fc:	20000800 	.word	0x20000800
 8081500:	200007fc 	.word	0x200007fc
 8081504:	20000804 	.word	0x20000804
 8081508:	2000080c 	.word	0x2000080c
 808150c:	200007f8 	.word	0x200007f8
 8081510:	200005e8 	.word	0x200005e8
 8081514:	200005d4 	.word	0x200005d4
 8081518:	20000764 	.word	0x20000764
 808151c:	20000348 	.word	0x20000348
 8081520:	20000718 	.word	0x20000718
 8081524:	20000684 	.word	0x20000684
 8081528:	20000334 	.word	0x20000334
 808152c:	20000cd8 	.word	0x20000cd8

08081530 <_Z7echoGpsv>:
      air_quality_score = hum_score + gas_score;


}

void echoGps(){
 8081530:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while(!Serial.available()){
 8081532:	f00b fabf 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081536:	6803      	ldr	r3, [r0, #0]
 8081538:	691b      	ldr	r3, [r3, #16]
 808153a:	4798      	blx	r3
 808153c:	b990      	cbnz	r0, 8081564 <_Z7echoGpsv+0x34>
        if(Serial5.available() > 0){
 808153e:	f7ff fca1 	bl	8080e84 <_Z22__fetch_global_Serial5v>
 8081542:	6803      	ldr	r3, [r0, #0]
 8081544:	691b      	ldr	r3, [r3, #16]
 8081546:	4798      	blx	r3
 8081548:	2800      	cmp	r0, #0
 808154a:	ddf2      	ble.n	8081532 <_Z7echoGpsv+0x2>
            gps_byte = Serial5.read();
 808154c:	f7ff fc9a 	bl	8080e84 <_Z22__fetch_global_Serial5v>
 8081550:	6803      	ldr	r3, [r0, #0]
 8081552:	695b      	ldr	r3, [r3, #20]
 8081554:	4798      	blx	r3
 8081556:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081558:	f00b faac 	bl	808cab4 <_Z16_fetch_usbserialv>
 808155c:	b2e1      	uxtb	r1, r4
 808155e:	f00a f9df 	bl	808b920 <_ZN5Print5printEc>
 8081562:	e7e6      	b.n	8081532 <_Z7echoGpsv+0x2>
        }

    }
}
 8081564:	bd10      	pop	{r4, pc}
	...

08081568 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
 8081568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808156c:	4606      	mov	r6, r0
 808156e:	460d      	mov	r5, r1
 8081570:	2400      	movs	r4, #0
    char temp[3];

    for (byte i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
 8081572:	4f0f      	ldr	r7, [pc, #60]	; (80815b0 <_Z11printPacketPhh+0x48>)
        Serial.print(temp);

        if (i != len - 1)
 8081574:	f101 38ff 	add.w	r8, r1, #4294967295
    for (byte i = 0; i < len; i++)
 8081578:	42ac      	cmp	r4, r5
 808157a:	d012      	beq.n	80815a2 <_Z11printPacketPhh+0x3a>
        sprintf(temp, "%.2X", packet[i]);
 808157c:	4639      	mov	r1, r7
 808157e:	5d32      	ldrb	r2, [r6, r4]
 8081580:	a801      	add	r0, sp, #4
 8081582:	f009 fb33 	bl	808abec <sprintf>
        Serial.print(temp);
 8081586:	f00b fa95 	bl	808cab4 <_Z16_fetch_usbserialv>
 808158a:	a901      	add	r1, sp, #4
 808158c:	f00a f9c4 	bl	808b918 <_ZN5Print5printEPKc>
        if (i != len - 1)
 8081590:	45a0      	cmp	r8, r4
 8081592:	d004      	beq.n	808159e <_Z11printPacketPhh+0x36>
        {
            Serial.print(' ');
 8081594:	f00b fa8e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081598:	2120      	movs	r1, #32
 808159a:	f00a f9c1 	bl	808b920 <_ZN5Print5printEc>
    for (byte i = 0; i < len; i++)
 808159e:	3401      	adds	r4, #1
 80815a0:	e7ea      	b.n	8081578 <_Z11printPacketPhh+0x10>
        }
    }

    Serial.println();
 80815a2:	f00b fa87 	bl	808cab4 <_Z16_fetch_usbserialv>
 80815a6:	f00a f9be 	bl	808b926 <_ZN5Print7printlnEv>
}
 80815aa:	b002      	add	sp, #8
 80815ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80815b0:	08091ca3 	.word	0x08091ca3

080815b4 <_Z10sendPacketPhh>:
{
 80815b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80815b6:	4604      	mov	r4, r0
 80815b8:	460d      	mov	r5, r1
 80815ba:	4606      	mov	r6, r0
 80815bc:	180f      	adds	r7, r1, r0
    for (byte i = 0; i < len; i++)
 80815be:	42be      	cmp	r6, r7
 80815c0:	d007      	beq.n	80815d2 <_Z10sendPacketPhh+0x1e>
        Serial5.write(packet[i]);
 80815c2:	f7ff fc5f 	bl	8080e84 <_Z22__fetch_global_Serial5v>
 80815c6:	6803      	ldr	r3, [r0, #0]
 80815c8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80815cc:	689b      	ldr	r3, [r3, #8]
 80815ce:	4798      	blx	r3
    for (byte i = 0; i < len; i++)
 80815d0:	e7f5      	b.n	80815be <_Z10sendPacketPhh+0xa>
    printPacket(packet, len);
 80815d2:	4629      	mov	r1, r5
 80815d4:	4620      	mov	r0, r4
}
 80815d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    printPacket(packet, len);
 80815da:	f7ff bfc5 	b.w	8081568 <_Z11printPacketPhh>
	...

080815e0 <_Z19enableContinuousGPSv>:
{
 80815e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 80815e2:	4a07      	ldr	r2, [pc, #28]	; (8081600 <_Z19enableContinuousGPSv+0x20>)
 80815e4:	ab01      	add	r3, sp, #4
 80815e6:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 80815ea:	6851      	ldr	r1, [r2, #4]
 80815ec:	8912      	ldrh	r2, [r2, #8]
 80815ee:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 80815f0:	210a      	movs	r1, #10
 80815f2:	a801      	add	r0, sp, #4
    byte packet[] = {
 80815f4:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 80815f6:	f7ff ffdd 	bl	80815b4 <_Z10sendPacketPhh>
}
 80815fa:	b005      	add	sp, #20
 80815fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8081600:	0809400c 	.word	0x0809400c

08081604 <_Z17enableLowPowerGPSv>:
{
 8081604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 8081606:	4a07      	ldr	r2, [pc, #28]	; (8081624 <_Z17enableLowPowerGPSv+0x20>)
 8081608:	ab01      	add	r3, sp, #4
 808160a:	f852 0f18 	ldr.w	r0, [r2, #24]!
 808160e:	6851      	ldr	r1, [r2, #4]
 8081610:	8912      	ldrh	r2, [r2, #8]
 8081612:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 8081614:	210a      	movs	r1, #10
 8081616:	a801      	add	r0, sp, #4
    byte packet[] = {
 8081618:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 808161a:	f7ff ffcb 	bl	80815b4 <_Z10sendPacketPhh>
}
 808161e:	b005      	add	sp, #20
 8081620:	f85d fb04 	ldr.w	pc, [sp], #4
 8081624:	0809400c 	.word	0x0809400c

08081628 <_Z15readTemperaturev>:

float readTemperature(void){
 8081628:	b538      	push	{r3, r4, r5, lr}
 808162a:	4b2f      	ldr	r3, [pc, #188]	; (80816e8 <_Z15readTemperaturev+0xc0>)
 808162c:	681d      	ldr	r5, [r3, #0]
    float temperature = 0;
    if(hih8120_enabled){
 808162e:	4b2f      	ldr	r3, [pc, #188]	; (80816ec <_Z15readTemperaturev+0xc4>)
 8081630:	681b      	ldr	r3, [r3, #0]
 8081632:	b30b      	cbz	r3, 8081678 <_Z15readTemperaturev+0x50>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 8081634:	4b2e      	ldr	r3, [pc, #184]	; (80816f0 <_Z15readTemperaturev+0xc8>)
 8081636:	8958      	ldrh	r0, [r3, #10]
 8081638:	f00c fcb2 	bl	808dfa0 <__aeabi_ui2f>
 808163c:	492d      	ldr	r1, [pc, #180]	; (80816f4 <_Z15readTemperaturev+0xcc>)
 808163e:	f00c fdbb 	bl	808e1b8 <__aeabi_fdiv>
 8081642:	492d      	ldr	r1, [pc, #180]	; (80816f8 <_Z15readTemperaturev+0xd0>)
 8081644:	f00c fd04 	bl	808e050 <__aeabi_fmul>
 8081648:	492c      	ldr	r1, [pc, #176]	; (80816fc <_Z15readTemperaturev+0xd4>)
 808164a:	f00c fbf7 	bl	808de3c <__aeabi_fsub>
 808164e:	4604      	mov	r4, r0
        temperature = hih.temperature();
        if(debugging_enabled){
 8081650:	b125      	cbz	r5, 808165c <_Z15readTemperaturev+0x34>
            Serial.println("Temperature reading from HIH8120");
 8081652:	f00b fa2f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081656:	492a      	ldr	r1, [pc, #168]	; (8081700 <_Z15readTemperaturev+0xd8>)
 8081658:	f00a f971 	bl	808b93e <_ZN5Print7printlnEPKc>
          }
        temperature = bme.temperature;
    }
    //temperature *= 100;

    temperature *= temp_slope;
 808165c:	4b29      	ldr	r3, [pc, #164]	; (8081704 <_Z15readTemperaturev+0xdc>)
 808165e:	4620      	mov	r0, r4
 8081660:	6819      	ldr	r1, [r3, #0]
 8081662:	f00c fcf5 	bl	808e050 <__aeabi_fmul>
 8081666:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 8081668:	4b27      	ldr	r3, [pc, #156]	; (8081708 <_Z15readTemperaturev+0xe0>)
 808166a:	6818      	ldr	r0, [r3, #0]
 808166c:	f00c fc9c 	bl	808dfa8 <__aeabi_i2f>
 8081670:	4621      	mov	r1, r4
 8081672:	f00c fbe5 	bl	808de40 <__addsf3>

    return temperature;
    //temperature = temperature +
}
 8081676:	bd38      	pop	{r3, r4, r5, pc}
    }else if(new_temperature_sensor_enabled){
 8081678:	4b24      	ldr	r3, [pc, #144]	; (808170c <_Z15readTemperaturev+0xe4>)
 808167a:	681b      	ldr	r3, [r3, #0]
 808167c:	b313      	cbz	r3, 80816c4 <_Z15readTemperaturev+0x9c>
        if(debugging_enabled){
 808167e:	b125      	cbz	r5, 808168a <_Z15readTemperaturev+0x62>
            Serial.println("Temperature reading from TMP36");
 8081680:	f00b fa18 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081684:	4922      	ldr	r1, [pc, #136]	; (8081710 <_Z15readTemperaturev+0xe8>)
 8081686:	f00a f95a 	bl	808b93e <_ZN5Print7printlnEPKc>
        temperature = analogRead(A1);
 808168a:	200b      	movs	r0, #11
 808168c:	f00b fe03 	bl	808d296 <analogRead>
 8081690:	f00c fc8a 	bl	808dfa8 <__aeabi_i2f>
        temperature *= VOLTS_PER_UNIT;
 8081694:	f00c f82e 	bl	808d6f4 <__aeabi_f2d>
 8081698:	a30f      	add	r3, pc, #60	; (adr r3, 80816d8 <_Z15readTemperaturev+0xb0>)
 808169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808169e:	f00c f881 	bl	808d7a4 <__aeabi_dmul>
 80816a2:	f00c fb77 	bl	808dd94 <__aeabi_d2f>
        temperature -= TMP36_OFFSET;
 80816a6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80816aa:	f00c fbc7 	bl	808de3c <__aeabi_fsub>
        temperature /= TMP36_VPDC;
 80816ae:	f00c f821 	bl	808d6f4 <__aeabi_f2d>
 80816b2:	a30b      	add	r3, pc, #44	; (adr r3, 80816e0 <_Z15readTemperaturev+0xb8>)
 80816b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80816b8:	f00c f99e 	bl	808d9f8 <__aeabi_ddiv>
 80816bc:	f00c fb6a 	bl	808dd94 <__aeabi_d2f>
 80816c0:	4604      	mov	r4, r0
 80816c2:	e7cb      	b.n	808165c <_Z15readTemperaturev+0x34>
        if(debugging_enabled){
 80816c4:	b125      	cbz	r5, 80816d0 <_Z15readTemperaturev+0xa8>
            Serial.println("Temperature reading from BME for Alphasense");
 80816c6:	f00b f9f5 	bl	808cab4 <_Z16_fetch_usbserialv>
 80816ca:	4912      	ldr	r1, [pc, #72]	; (8081714 <_Z15readTemperaturev+0xec>)
 80816cc:	f00a f937 	bl	808b93e <_ZN5Print7printlnEPKc>
        temperature = bme.temperature;
 80816d0:	4b11      	ldr	r3, [pc, #68]	; (8081718 <_Z15readTemperaturev+0xf0>)
 80816d2:	681c      	ldr	r4, [r3, #0]
 80816d4:	e7c2      	b.n	808165c <_Z15readTemperaturev+0x34>
 80816d6:	bf00      	nop
 80816d8:	eb1c432d 	.word	0xeb1c432d
 80816dc:	3f4a36e2 	.word	0x3f4a36e2
 80816e0:	47ae147b 	.word	0x47ae147b
 80816e4:	3f847ae1 	.word	0x3f847ae1
 80816e8:	20000690 	.word	0x20000690
 80816ec:	20000764 	.word	0x20000764
 80816f0:	20000758 	.word	0x20000758
 80816f4:	467ff800 	.word	0x467ff800
 80816f8:	43250000 	.word	0x43250000
 80816fc:	42200000 	.word	0x42200000
 8081700:	08091ca8 	.word	0x08091ca8
 8081704:	20000d00 	.word	0x20000d00
 8081708:	20000d04 	.word	0x20000d04
 808170c:	200007fc 	.word	0x200007fc
 8081710:	08091cc9 	.word	0x08091cc9
 8081714:	08091ce8 	.word	0x08091ce8
 8081718:	200005ec 	.word	0x200005ec

0808171c <_Z12readHumidityv>:

float readHumidity(void){
 808171c:	b538      	push	{r3, r4, r5, lr}
 808171e:	4b19      	ldr	r3, [pc, #100]	; (8081784 <_Z12readHumidityv+0x68>)
 8081720:	681d      	ldr	r5, [r3, #0]
    float humidity;
    if(hih8120_enabled){
 8081722:	4b19      	ldr	r3, [pc, #100]	; (8081788 <_Z12readHumidityv+0x6c>)
 8081724:	681b      	ldr	r3, [r3, #0]
 8081726:	b32b      	cbz	r3, 8081774 <_Z12readHumidityv+0x58>
            return float(raw) / 16382;
 8081728:	4b18      	ldr	r3, [pc, #96]	; (808178c <_Z12readHumidityv+0x70>)
 808172a:	8918      	ldrh	r0, [r3, #8]
 808172c:	f00c fc38 	bl	808dfa0 <__aeabi_ui2f>
 8081730:	4917      	ldr	r1, [pc, #92]	; (8081790 <_Z12readHumidityv+0x74>)
 8081732:	f00c fd41 	bl	808e1b8 <__aeabi_fdiv>
        humidity = hih.humidity();
        humidity *= 100;
 8081736:	4917      	ldr	r1, [pc, #92]	; (8081794 <_Z12readHumidityv+0x78>)
 8081738:	f00c fc8a 	bl	808e050 <__aeabi_fmul>
 808173c:	4604      	mov	r4, r0
        if(debugging_enabled){
 808173e:	b125      	cbz	r5, 808174a <_Z12readHumidityv+0x2e>
            Serial.println("Humidity reading from HIH8120");
 8081740:	f00b f9b8 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081744:	4914      	ldr	r1, [pc, #80]	; (8081798 <_Z12readHumidityv+0x7c>)
        }
    }else{
        humidity = bme.humidity;
        if(debugging_enabled){
            Serial.println("Humidity reading from BME");
 8081746:	f00a f8fa 	bl	808b93e <_ZN5Print7printlnEPKc>
        }
    }


    humidity *= rh_slope;
 808174a:	4b14      	ldr	r3, [pc, #80]	; (808179c <_Z12readHumidityv+0x80>)
 808174c:	4620      	mov	r0, r4
 808174e:	6819      	ldr	r1, [r3, #0]
 8081750:	f00c fc7e 	bl	808e050 <__aeabi_fmul>
 8081754:	4604      	mov	r4, r0
    humidity += rh_zero;       //user input zero offset
 8081756:	4b12      	ldr	r3, [pc, #72]	; (80817a0 <_Z12readHumidityv+0x84>)
 8081758:	6818      	ldr	r0, [r3, #0]
 808175a:	f00c fc25 	bl	808dfa8 <__aeabi_i2f>
 808175e:	4621      	mov	r1, r4
 8081760:	f00c fb6e 	bl	808de40 <__addsf3>
    if(humidity > 100)
 8081764:	490b      	ldr	r1, [pc, #44]	; (8081794 <_Z12readHumidityv+0x78>)
    humidity += rh_zero;       //user input zero offset
 8081766:	4604      	mov	r4, r0
    if(humidity > 100)
 8081768:	f00c fe2e 	bl	808e3c8 <__aeabi_fcmpgt>
 808176c:	b100      	cbz	r0, 8081770 <_Z12readHumidityv+0x54>
        humidity = 100;
 808176e:	4c09      	ldr	r4, [pc, #36]	; (8081794 <_Z12readHumidityv+0x78>)
    return humidity;
    //temperature = temperature +
}
 8081770:	4620      	mov	r0, r4
 8081772:	bd38      	pop	{r3, r4, r5, pc}
        humidity = bme.humidity;
 8081774:	4b0b      	ldr	r3, [pc, #44]	; (80817a4 <_Z12readHumidityv+0x88>)
 8081776:	689c      	ldr	r4, [r3, #8]
        if(debugging_enabled){
 8081778:	2d00      	cmp	r5, #0
 808177a:	d0e6      	beq.n	808174a <_Z12readHumidityv+0x2e>
            Serial.println("Humidity reading from BME");
 808177c:	f00b f99a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081780:	4909      	ldr	r1, [pc, #36]	; (80817a8 <_Z12readHumidityv+0x8c>)
 8081782:	e7e0      	b.n	8081746 <_Z12readHumidityv+0x2a>
 8081784:	20000690 	.word	0x20000690
 8081788:	20000764 	.word	0x20000764
 808178c:	20000758 	.word	0x20000758
 8081790:	467ff800 	.word	0x467ff800
 8081794:	42c80000 	.word	0x42c80000
 8081798:	08091d14 	.word	0x08091d14
 808179c:	20000854 	.word	0x20000854
 80817a0:	20000858 	.word	0x20000858
 80817a4:	200005ec 	.word	0x200005ec
 80817a8:	08091d32 	.word	0x08091d32
 80817ac:	00000000 	.word	0x00000000

080817b0 <_Z12calculateAQIv>:
void calculateAQI(void){
 80817b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        gas_reference = bme.gas_resistance/100;
 80817b4:	4b6a      	ldr	r3, [pc, #424]	; (8081960 <_Z12calculateAQIv+0x1b0>)
 80817b6:	496b      	ldr	r1, [pc, #428]	; (8081964 <_Z12calculateAQIv+0x1b4>)
 80817b8:	68d8      	ldr	r0, [r3, #12]
 80817ba:	f00c fcfd 	bl	808e1b8 <__aeabi_fdiv>
 80817be:	4c6a      	ldr	r4, [pc, #424]	; (8081968 <_Z12calculateAQIv+0x1b8>)
 80817c0:	6020      	str	r0, [r4, #0]
      float current_humidity = readHumidity();
 80817c2:	f7ff ffab 	bl	808171c <_Z12readHumidityv>
      if(debugging_enabled){
 80817c6:	4b69      	ldr	r3, [pc, #420]	; (808196c <_Z12calculateAQIv+0x1bc>)
      float current_humidity = readHumidity();
 80817c8:	4605      	mov	r5, r0
      if(debugging_enabled){
 80817ca:	681a      	ldr	r2, [r3, #0]
 80817cc:	46a0      	mov	r8, r4
 80817ce:	469a      	mov	sl, r3
 80817d0:	b19a      	cbz	r2, 80817fa <_Z12calculateAQIv+0x4a>
          Serial.printf("gas resistance: %1.0f, humidity: %1.2f\n\r", gas_reference, current_humidity);
 80817d2:	f00b f96f 	bl	808cab4 <_Z16_fetch_usbserialv>
 80817d6:	4604      	mov	r4, r0
 80817d8:	f8d8 0000 	ldr.w	r0, [r8]
 80817dc:	f00b ff8a 	bl	808d6f4 <__aeabi_f2d>
 80817e0:	4606      	mov	r6, r0
 80817e2:	4628      	mov	r0, r5
 80817e4:	460f      	mov	r7, r1
 80817e6:	f00b ff85 	bl	808d6f4 <__aeabi_f2d>
 80817ea:	4632      	mov	r2, r6
 80817ec:	e9cd 0100 	strd	r0, r1, [sp]
 80817f0:	463b      	mov	r3, r7
 80817f2:	4620      	mov	r0, r4
 80817f4:	495e      	ldr	r1, [pc, #376]	; (8081970 <_Z12calculateAQIv+0x1c0>)
 80817f6:	f7ff fa3b 	bl	8080c70 <_ZN5Print6printfEPKcz>
      if (current_humidity >= 38 && current_humidity <= 42)
 80817fa:	4628      	mov	r0, r5
 80817fc:	495d      	ldr	r1, [pc, #372]	; (8081974 <_Z12calculateAQIv+0x1c4>)
 80817fe:	f00c fdd9 	bl	808e3b4 <__aeabi_fcmpge>
 8081802:	4c5d      	ldr	r4, [pc, #372]	; (8081978 <_Z12calculateAQIv+0x1c8>)
 8081804:	2800      	cmp	r0, #0
 8081806:	d06f      	beq.n	80818e8 <_Z12calculateAQIv+0x138>
 8081808:	4628      	mov	r0, r5
 808180a:	495c      	ldr	r1, [pc, #368]	; (808197c <_Z12calculateAQIv+0x1cc>)
 808180c:	f00c fdc8 	bl	808e3a0 <__aeabi_fcmple>
 8081810:	2800      	cmp	r0, #0
 8081812:	d069      	beq.n	80818e8 <_Z12calculateAQIv+0x138>
        hum_score = 0.25*100; // Humidity +/-5% around optimum
 8081814:	4b5a      	ldr	r3, [pc, #360]	; (8081980 <_Z12calculateAQIv+0x1d0>)
 8081816:	6023      	str	r3, [r4, #0]
      if (gas_reference > gas_upper_limit) gas_reference = gas_upper_limit;
 8081818:	4b5a      	ldr	r3, [pc, #360]	; (8081984 <_Z12calculateAQIv+0x1d4>)
 808181a:	681e      	ldr	r6, [r3, #0]
 808181c:	4630      	mov	r0, r6
 808181e:	f00c fbc3 	bl	808dfa8 <__aeabi_i2f>
 8081822:	f8d8 1000 	ldr.w	r1, [r8]
 8081826:	4605      	mov	r5, r0
 8081828:	f00c fdb0 	bl	808e38c <__aeabi_fcmplt>
 808182c:	b108      	cbz	r0, 8081832 <_Z12calculateAQIv+0x82>
 808182e:	f8c8 5000 	str.w	r5, [r8]
      if (gas_reference < gas_lower_limit) gas_reference = gas_lower_limit;
 8081832:	4b55      	ldr	r3, [pc, #340]	; (8081988 <_Z12calculateAQIv+0x1d8>)
 8081834:	f8d3 b000 	ldr.w	fp, [r3]
 8081838:	4658      	mov	r0, fp
 808183a:	f00c fbb5 	bl	808dfa8 <__aeabi_i2f>
 808183e:	f8d8 1000 	ldr.w	r1, [r8]
 8081842:	4605      	mov	r5, r0
 8081844:	f00c fdc0 	bl	808e3c8 <__aeabi_fcmpgt>
 8081848:	b108      	cbz	r0, 808184e <_Z12calculateAQIv+0x9e>
 808184a:	f8c8 5000 	str.w	r5, [r8]
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 808184e:	eba6 000b 	sub.w	r0, r6, fp
 8081852:	f00b ff3d 	bl	808d6d0 <__aeabi_i2d>
 8081856:	4602      	mov	r2, r0
 8081858:	460b      	mov	r3, r1
 808185a:	2000      	movs	r0, #0
 808185c:	494b      	ldr	r1, [pc, #300]	; (808198c <_Z12calculateAQIv+0x1dc>)
 808185e:	f00c f8cb 	bl	808d9f8 <__aeabi_ddiv>
 8081862:	4606      	mov	r6, r0
 8081864:	460f      	mov	r7, r1
 8081866:	f8d8 0000 	ldr.w	r0, [r8]
 808186a:	f00b ff43 	bl	808d6f4 <__aeabi_f2d>
 808186e:	4632      	mov	r2, r6
 8081870:	463b      	mov	r3, r7
 8081872:	f00b ff97 	bl	808d7a4 <__aeabi_dmul>
 8081876:	4680      	mov	r8, r0
 8081878:	4658      	mov	r0, fp
 808187a:	4689      	mov	r9, r1
 808187c:	f00b ff28 	bl	808d6d0 <__aeabi_i2d>
 8081880:	4632      	mov	r2, r6
 8081882:	463b      	mov	r3, r7
 8081884:	f00b ff8e 	bl	808d7a4 <__aeabi_dmul>
 8081888:	4602      	mov	r2, r0
 808188a:	460b      	mov	r3, r1
 808188c:	4640      	mov	r0, r8
 808188e:	4649      	mov	r1, r9
 8081890:	f00b fdd0 	bl	808d434 <__aeabi_dsub>
 8081894:	4b3e      	ldr	r3, [pc, #248]	; (8081990 <_Z12calculateAQIv+0x1e0>)
 8081896:	2200      	movs	r2, #0
 8081898:	f00b ff84 	bl	808d7a4 <__aeabi_dmul>
 808189c:	f00c fa7a 	bl	808dd94 <__aeabi_d2f>
 80818a0:	4d3c      	ldr	r5, [pc, #240]	; (8081994 <_Z12calculateAQIv+0x1e4>)
      if(debugging_enabled){
 80818a2:	f8da 3000 	ldr.w	r3, [sl]
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 80818a6:	6028      	str	r0, [r5, #0]
      if(debugging_enabled){
 80818a8:	b1ab      	cbz	r3, 80818d6 <_Z12calculateAQIv+0x126>
        Serial.print("Gas score: ");
 80818aa:	f00b f903 	bl	808cab4 <_Z16_fetch_usbserialv>
 80818ae:	493a      	ldr	r1, [pc, #232]	; (8081998 <_Z12calculateAQIv+0x1e8>)
 80818b0:	f00a f832 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(gas_score);
 80818b4:	f00b f8fe 	bl	808cab4 <_Z16_fetch_usbserialv>
 80818b8:	2202      	movs	r2, #2
 80818ba:	6829      	ldr	r1, [r5, #0]
 80818bc:	f00a f93e 	bl	808bb3c <_ZN5Print7printlnEfi>
        Serial.print("Humidity score: ");
 80818c0:	f00b f8f8 	bl	808cab4 <_Z16_fetch_usbserialv>
 80818c4:	4935      	ldr	r1, [pc, #212]	; (808199c <_Z12calculateAQIv+0x1ec>)
 80818c6:	f00a f827 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(hum_score);
 80818ca:	f00b f8f3 	bl	808cab4 <_Z16_fetch_usbserialv>
 80818ce:	2202      	movs	r2, #2
 80818d0:	6821      	ldr	r1, [r4, #0]
 80818d2:	f00a f933 	bl	808bb3c <_ZN5Print7printlnEfi>
      air_quality_score = hum_score + gas_score;
 80818d6:	6829      	ldr	r1, [r5, #0]
 80818d8:	6820      	ldr	r0, [r4, #0]
 80818da:	f00c fab1 	bl	808de40 <__addsf3>
 80818de:	4b30      	ldr	r3, [pc, #192]	; (80819a0 <_Z12calculateAQIv+0x1f0>)
 80818e0:	6018      	str	r0, [r3, #0]
}
 80818e2:	b003      	add	sp, #12
 80818e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (current_humidity < 38)
 80818e8:	4628      	mov	r0, r5
 80818ea:	f00b ff03 	bl	808d6f4 <__aeabi_f2d>
 80818ee:	4b2d      	ldr	r3, [pc, #180]	; (80819a4 <_Z12calculateAQIv+0x1f4>)
 80818f0:	4606      	mov	r6, r0
 80818f2:	460f      	mov	r7, r1
 80818f4:	4628      	mov	r0, r5
 80818f6:	491f      	ldr	r1, [pc, #124]	; (8081974 <_Z12calculateAQIv+0x1c4>)
 80818f8:	f8d3 9000 	ldr.w	r9, [r3]
 80818fc:	f00c fd46 	bl	808e38c <__aeabi_fcmplt>
 8081900:	b1a0      	cbz	r0, 808192c <_Z12calculateAQIv+0x17c>
          hum_score = 0.25/hum_reference*current_humidity*100;
 8081902:	4648      	mov	r0, r9
 8081904:	f00b fef6 	bl	808d6f4 <__aeabi_f2d>
 8081908:	4602      	mov	r2, r0
 808190a:	460b      	mov	r3, r1
 808190c:	2000      	movs	r0, #0
 808190e:	4926      	ldr	r1, [pc, #152]	; (80819a8 <_Z12calculateAQIv+0x1f8>)
 8081910:	f00c f872 	bl	808d9f8 <__aeabi_ddiv>
 8081914:	4632      	mov	r2, r6
 8081916:	463b      	mov	r3, r7
 8081918:	f00b ff44 	bl	808d7a4 <__aeabi_dmul>
          hum_score = ((-0.25/(100-hum_reference)*current_humidity)+0.416666)*100;
 808191c:	2200      	movs	r2, #0
 808191e:	4b1c      	ldr	r3, [pc, #112]	; (8081990 <_Z12calculateAQIv+0x1e0>)
 8081920:	f00b ff40 	bl	808d7a4 <__aeabi_dmul>
 8081924:	f00c fa36 	bl	808dd94 <__aeabi_d2f>
 8081928:	6020      	str	r0, [r4, #0]
 808192a:	e775      	b.n	8081818 <_Z12calculateAQIv+0x68>
 808192c:	4649      	mov	r1, r9
 808192e:	480d      	ldr	r0, [pc, #52]	; (8081964 <_Z12calculateAQIv+0x1b4>)
 8081930:	f00c fa84 	bl	808de3c <__aeabi_fsub>
 8081934:	f00b fede 	bl	808d6f4 <__aeabi_f2d>
 8081938:	4602      	mov	r2, r0
 808193a:	460b      	mov	r3, r1
 808193c:	2000      	movs	r0, #0
 808193e:	491b      	ldr	r1, [pc, #108]	; (80819ac <_Z12calculateAQIv+0x1fc>)
 8081940:	f00c f85a 	bl	808d9f8 <__aeabi_ddiv>
 8081944:	4632      	mov	r2, r6
 8081946:	463b      	mov	r3, r7
 8081948:	f00b ff2c 	bl	808d7a4 <__aeabi_dmul>
 808194c:	a302      	add	r3, pc, #8	; (adr r3, 8081958 <_Z12calculateAQIv+0x1a8>)
 808194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081952:	f00b fd71 	bl	808d438 <__adddf3>
 8081956:	e7e1      	b.n	808191c <_Z12calculateAQIv+0x16c>
 8081958:	ded6ba8c 	.word	0xded6ba8c
 808195c:	3fdaaaa7 	.word	0x3fdaaaa7
 8081960:	200005ec 	.word	0x200005ec
 8081964:	42c80000 	.word	0x42c80000
 8081968:	2000009c 	.word	0x2000009c
 808196c:	20000690 	.word	0x20000690
 8081970:	08091d4c 	.word	0x08091d4c
 8081974:	42180000 	.word	0x42180000
 8081978:	20000768 	.word	0x20000768
 808197c:	42280000 	.word	0x42280000
 8081980:	41c80000 	.word	0x41c80000
 8081984:	200000a0 	.word	0x200000a0
 8081988:	20000098 	.word	0x20000098
 808198c:	3fe80000 	.word	0x3fe80000
 8081990:	40590000 	.word	0x40590000
 8081994:	20000714 	.word	0x20000714
 8081998:	08091d75 	.word	0x08091d75
 808199c:	08091d81 	.word	0x08091d81
 80819a0:	200005e4 	.word	0x200005e4
 80819a4:	200000c4 	.word	0x200000c4
 80819a8:	3fd00000 	.word	0x3fd00000
 80819ac:	bfd00000 	.word	0xbfd00000

080819b0 <_Z9readSoundv>:
//read sound from
double readSound(void){
 80819b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80819b2:	260a      	movs	r6, #10
    int val;
    double sum = 0;
 80819b4:	2400      	movs	r4, #0
 80819b6:	2500      	movs	r5, #0
    float average = 0;
    for(int i=0; i< 10;i++){
        val = analogRead(sound_input);
 80819b8:	4f11      	ldr	r7, [pc, #68]	; (8081a00 <_Z9readSoundv+0x50>)
 80819ba:	8838      	ldrh	r0, [r7, #0]
 80819bc:	f00b fc6b 	bl	808d296 <analogRead>
        sum += val;
 80819c0:	f00b fe86 	bl	808d6d0 <__aeabi_i2d>
 80819c4:	4602      	mov	r2, r0
 80819c6:	460b      	mov	r3, r1
 80819c8:	4620      	mov	r0, r4
 80819ca:	4629      	mov	r1, r5
 80819cc:	f00b fd34 	bl	808d438 <__adddf3>
    for(int i=0; i< 10;i++){
 80819d0:	3e01      	subs	r6, #1
        sum += val;
 80819d2:	4604      	mov	r4, r0
 80819d4:	460d      	mov	r5, r1
    for(int i=0; i< 10;i++){
 80819d6:	d1f0      	bne.n	80819ba <_Z9readSoundv+0xa>
        //Serial.print("Sound level: ");
        //Serial.println(val);
    }
    sum = sum/10;
 80819d8:	2200      	movs	r2, #0
 80819da:	4b0a      	ldr	r3, [pc, #40]	; (8081a04 <_Z9readSoundv+0x54>)
 80819dc:	f00c f80c 	bl	808d9f8 <__aeabi_ddiv>
    sum /= 4095;
 80819e0:	a305      	add	r3, pc, #20	; (adr r3, 80819f8 <_Z9readSoundv+0x48>)
 80819e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80819e6:	f00c f807 	bl	808d9f8 <__aeabi_ddiv>
    sum *= 100;
 80819ea:	2200      	movs	r2, #0
 80819ec:	4b06      	ldr	r3, [pc, #24]	; (8081a08 <_Z9readSoundv+0x58>)
 80819ee:	f00b fed9 	bl	808d7a4 <__aeabi_dmul>
    return sum;
}
 80819f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80819f4:	f3af 8000 	nop.w
 80819f8:	00000000 	.word	0x00000000
 80819fc:	40affe00 	.word	0x40affe00
 8081a00:	200000dc 	.word	0x200000dc
 8081a04:	40240000 	.word	0x40240000
 8081a08:	40590000 	.word	0x40590000

08081a0c <_Z7readCO2v>:
    CO_float += float_offset;

    return CO_float;
}

float readCO2(void){
 8081a0c:	b538      	push	{r3, r4, r5, lr}
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
 8081a0e:	4b14      	ldr	r3, [pc, #80]	; (8081a60 <_Z7readCO2v+0x54>)
 8081a10:	681b      	ldr	r3, [r3, #0]
 8081a12:	b11b      	cbz	r3, 8081a1c <_Z7readCO2v+0x10>
        t6713.readStatus(1);
 8081a14:	2101      	movs	r1, #1
 8081a16:	4813      	ldr	r0, [pc, #76]	; (8081a64 <_Z7readCO2v+0x58>)
 8081a18:	f005 feaa 	bl	8087770 <_ZN13Telaire_T671310readStatusEi>
    }
    CO2_float = t6713.readPPM();
 8081a1c:	4811      	ldr	r0, [pc, #68]	; (8081a64 <_Z7readCO2v+0x58>)
 8081a1e:	f005 fdcf 	bl	80875c0 <_ZN13Telaire_T67137readPPMEv>
 8081a22:	f00c fac1 	bl	808dfa8 <__aeabi_i2f>
 8081a26:	4c10      	ldr	r4, [pc, #64]	; (8081a68 <_Z7readCO2v+0x5c>)

    if(CO2_float == 0){
 8081a28:	2100      	movs	r1, #0
    CO2_float = t6713.readPPM();
 8081a2a:	6020      	str	r0, [r4, #0]
 8081a2c:	4605      	mov	r5, r0
    if(CO2_float == 0){
 8081a2e:	f00c fca3 	bl	808e378 <__aeabi_fcmpeq>
 8081a32:	4b0e      	ldr	r3, [pc, #56]	; (8081a6c <_Z7readCO2v+0x60>)
 8081a34:	b188      	cbz	r0, 8081a5a <_Z7readCO2v+0x4e>
        CO2_float = CO2_float_previous;
 8081a36:	681b      	ldr	r3, [r3, #0]
 8081a38:	6023      	str	r3, [r4, #0]
    }else{
        CO2_float_previous = CO2_float;
    }

    CO2_float *= CO2_slope;
 8081a3a:	4b0d      	ldr	r3, [pc, #52]	; (8081a70 <_Z7readCO2v+0x64>)
 8081a3c:	6820      	ldr	r0, [r4, #0]
 8081a3e:	6819      	ldr	r1, [r3, #0]
 8081a40:	f00c fb06 	bl	808e050 <__aeabi_fmul>
    CO2_float += CO2_zero;
 8081a44:	4b0b      	ldr	r3, [pc, #44]	; (8081a74 <_Z7readCO2v+0x68>)
    CO2_float *= CO2_slope;
 8081a46:	4605      	mov	r5, r0
    CO2_float += CO2_zero;
 8081a48:	6818      	ldr	r0, [r3, #0]
 8081a4a:	f00c faad 	bl	808dfa8 <__aeabi_i2f>
 8081a4e:	4601      	mov	r1, r0
 8081a50:	4628      	mov	r0, r5
 8081a52:	f00c f9f5 	bl	808de40 <__addsf3>
 8081a56:	6020      	str	r0, [r4, #0]
    
    return CO2_float;
}
 8081a58:	bd38      	pop	{r3, r4, r5, pc}
        CO2_float_previous = CO2_float;
 8081a5a:	601d      	str	r5, [r3, #0]
 8081a5c:	e7ed      	b.n	8081a3a <_Z7readCO2v+0x2e>
 8081a5e:	bf00      	nop
 8081a60:	20000690 	.word	0x20000690
 8081a64:	20000cfa 	.word	0x20000cfa
 8081a68:	2000032c 	.word	0x2000032c
 8081a6c:	20000330 	.word	0x20000330
 8081a70:	20000334 	.word	0x20000334
 8081a74:	2000033c 	.word	0x2000033c

08081a78 <_Z10readAlpha2v>:

      }
      return alpha1_ppmraw;
}

float readAlpha2(void){
 8081a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
    if(debugging_enabled){
 8081a7c:	4c8e      	ldr	r4, [pc, #568]	; (8081cb8 <_Z10readAlpha2v+0x240>)
float readAlpha2(void){
 8081a7e:	b089      	sub	sp, #36	; 0x24
    String alpha2_ppmRounded;
 8081a80:	4668      	mov	r0, sp
 8081a82:	498e      	ldr	r1, [pc, #568]	; (8081cbc <_Z10readAlpha2v+0x244>)
 8081a84:	f009 fd36 	bl	808b4f4 <_ZN6StringC1EPKc>
    if(debugging_enabled){
 8081a88:	6823      	ldr	r3, [r4, #0]
 8081a8a:	b123      	cbz	r3, 8081a96 <_Z10readAlpha2v+0x1e>
        Serial.println("Start of alpha 2 read");
 8081a8c:	f00b f812 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081a90:	498b      	ldr	r1, [pc, #556]	; (8081cc0 <_Z10readAlpha2v+0x248>)
 8081a92:	f009 ff54 	bl	808b93e <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 8081a96:	4f8b      	ldr	r7, [pc, #556]	; (8081cc4 <_Z10readAlpha2v+0x24c>)
 8081a98:	2100      	movs	r1, #0
 8081a9a:	8838      	ldrh	r0, [r7, #0]
 8081a9c:	f00b fbcf 	bl	808d23e <digitalWrite>

    if(Wire.requestFrom(0x4A,1) == 0){
 8081aa0:	f00b fc62 	bl	808d368 <_Z19__fetch_global_Wirev>
 8081aa4:	2201      	movs	r2, #1
 8081aa6:	214a      	movs	r1, #74	; 0x4a
 8081aa8:	f00b f9f7 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>
 8081aac:	bb38      	cbnz	r0, 8081afe <_Z10readAlpha2v+0x86>
        Serial.println("Couldn't communicate with LMP91000 2");
 8081aae:	f00b f801 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081ab2:	4985      	ldr	r1, [pc, #532]	; (8081cc8 <_Z10readAlpha2v+0x250>)
 8081ab4:	f009 ff43 	bl	808b93e <_ZN5Print7printlnEPKc>
          Serial.println(volt_half_Vref/1000);

        }
    }

    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 8081ab8:	2100      	movs	r1, #0
 8081aba:	4884      	ldr	r0, [pc, #528]	; (8081ccc <_Z10readAlpha2v+0x254>)
 8081abc:	f005 fad5 	bl	808706a <_ZN8LMP910004readEh>
 8081ac0:	b930      	cbnz	r0, 8081ad0 <_Z10readAlpha2v+0x58>
        if(debugging_enabled)
 8081ac2:	6823      	ldr	r3, [r4, #0]
 8081ac4:	b123      	cbz	r3, 8081ad0 <_Z10readAlpha2v+0x58>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 8081ac6:	f00a fff5 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081aca:	4981      	ldr	r1, [pc, #516]	; (8081cd0 <_Z10readAlpha2v+0x258>)
 8081acc:	f009 ff37 	bl	808b93e <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 8081ad0:	f00b fc4a 	bl	808d368 <_Z19__fetch_global_Wirev>
 8081ad4:	2201      	movs	r2, #1
 8081ad6:	214a      	movs	r1, #74	; 0x4a
 8081ad8:	f00b f9df 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>
 8081adc:	2800      	cmp	r0, #0
 8081ade:	d138      	bne.n	8081b52 <_Z10readAlpha2v+0xda>
        alpha2_ppmRounded = "-99";
 8081ae0:	4668      	mov	r0, sp
 8081ae2:	497c      	ldr	r1, [pc, #496]	; (8081cd4 <_Z10readAlpha2v+0x25c>)
 8081ae4:	f009 fd58 	bl	808b598 <_ZN6StringaSEPKc>
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
      }

      digitalWrite(lmp91000_2_en, HIGH);  //disable
 8081ae8:	2101      	movs	r1, #1
 8081aea:	8838      	ldrh	r0, [r7, #0]
 8081aec:	f00b fba7 	bl	808d23e <digitalWrite>
    String alpha2_ppmRounded;
 8081af0:	4668      	mov	r0, sp
 8081af2:	f009 fcb5 	bl	808b460 <_ZN6StringD1Ev>

      Serial.print("Volt1 Aux:");
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}
 8081af6:	4628      	mov	r0, r5
 8081af8:	b009      	add	sp, #36	; 0x24
 8081afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 8081afe:	2103      	movs	r1, #3
 8081b00:	4875      	ldr	r0, [pc, #468]	; (8081cd8 <_Z10readAlpha2v+0x260>)
 8081b02:	f005 fbf9 	bl	80872f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 8081b06:	f00c fa4f 	bl	808dfa8 <__aeabi_i2f>
 8081b0a:	4b74      	ldr	r3, [pc, #464]	; (8081cdc <_Z10readAlpha2v+0x264>)
 8081b0c:	6819      	ldr	r1, [r3, #0]
 8081b0e:	f00c fa9f 	bl	808e050 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081b12:	4973      	ldr	r1, [pc, #460]	; (8081ce0 <_Z10readAlpha2v+0x268>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081b14:	4680      	mov	r8, r0
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081b16:	f00c fb4f 	bl	808e1b8 <__aeabi_fdiv>
 8081b1a:	4681      	mov	r9, r0
 8081b1c:	f00b fdea 	bl	808d6f4 <__aeabi_f2d>
 8081b20:	2200      	movs	r2, #0
 8081b22:	4b70      	ldr	r3, [pc, #448]	; (8081ce4 <_Z10readAlpha2v+0x26c>)
 8081b24:	f00b fc86 	bl	808d434 <__aeabi_dsub>
 8081b28:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
 8081b2c:	2200      	movs	r2, #0
 8081b2e:	4659      	mov	r1, fp
 8081b30:	4b6d      	ldr	r3, [pc, #436]	; (8081ce8 <_Z10readAlpha2v+0x270>)
 8081b32:	f00c f8c7 	bl	808dcc4 <__aeabi_dcmpgt>
 8081b36:	2800      	cmp	r0, #0
 8081b38:	d0be      	beq.n	8081ab8 <_Z10readAlpha2v+0x40>
          Serial.print("half vref2 ads1");
 8081b3a:	f00a ffbb 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081b3e:	496b      	ldr	r1, [pc, #428]	; (8081cec <_Z10readAlpha2v+0x274>)
 8081b40:	f009 feea 	bl	808b918 <_ZN5Print5printEPKc>
          Serial.println(volt_half_Vref/1000);
 8081b44:	f00a ffb6 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081b48:	2202      	movs	r2, #2
 8081b4a:	4649      	mov	r1, r9
 8081b4c:	f009 fff6 	bl	808bb3c <_ZN5Print7printlnEfi>
 8081b50:	e7b2      	b.n	8081ab8 <_Z10readAlpha2v+0x40>
    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 8081b52:	2100      	movs	r1, #0
 8081b54:	485d      	ldr	r0, [pc, #372]	; (8081ccc <_Z10readAlpha2v+0x254>)
 8081b56:	f005 fa88 	bl	808706a <_ZN8LMP910004readEh>
 8081b5a:	2800      	cmp	r0, #0
 8081b5c:	d0c0      	beq.n	8081ae0 <_Z10readAlpha2v+0x68>
 8081b5e:	4960      	ldr	r1, [pc, #384]	; (8081ce0 <_Z10readAlpha2v+0x268>)
 8081b60:	4640      	mov	r0, r8
 8081b62:	f00c fb29 	bl	808e1b8 <__aeabi_fdiv>
 8081b66:	f00b fdc5 	bl	808d6f4 <__aeabi_f2d>
 8081b6a:	2200      	movs	r2, #0
 8081b6c:	4b5d      	ldr	r3, [pc, #372]	; (8081ce4 <_Z10readAlpha2v+0x26c>)
 8081b6e:	f00b fc61 	bl	808d434 <__aeabi_dsub>
 8081b72:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8081b76:	2200      	movs	r2, #0
 8081b78:	4649      	mov	r1, r9
 8081b7a:	4b5b      	ldr	r3, [pc, #364]	; (8081ce8 <_Z10readAlpha2v+0x270>)
 8081b7c:	f00c f8a2 	bl	808dcc4 <__aeabi_dcmpgt>
 8081b80:	4604      	mov	r4, r0
 8081b82:	2800      	cmp	r0, #0
 8081b84:	d1ac      	bne.n	8081ae0 <_Z10readAlpha2v+0x68>
 8081b86:	f04f 080a 	mov.w	r8, #10
 8081b8a:	4681      	mov	r9, r0
 8081b8c:	4682      	mov	sl, r0
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081b8e:	4d52      	ldr	r5, [pc, #328]	; (8081cd8 <_Z10readAlpha2v+0x260>)
 8081b90:	2100      	movs	r1, #0
 8081b92:	4628      	mov	r0, r5
 8081b94:	f005 fbb0 	bl	80872f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081b98:	2101      	movs	r1, #1
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081b9a:	4482      	add	sl, r0
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081b9c:	4628      	mov	r0, r5
 8081b9e:	f005 fbab 	bl	80872f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081ba2:	2102      	movs	r1, #2
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081ba4:	4481      	add	r9, r0
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081ba6:	4628      	mov	r0, r5
 8081ba8:	f005 fba6 	bl	80872f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081bac:	2103      	movs	r1, #3
 8081bae:	4628      	mov	r0, r5
 8081bb0:	f005 fba2 	bl	80872f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081bb4:	f1b8 0801 	subs.w	r8, r8, #1
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081bb8:	4404      	add	r4, r0
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081bba:	d1e9      	bne.n	8081b90 <_Z10readAlpha2v+0x118>
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8081bbc:	f04f 0b0a 	mov.w	fp, #10
        volt0_gas = A0_gas * ads_bitmv;
 8081bc0:	4b46      	ldr	r3, [pc, #280]	; (8081cdc <_Z10readAlpha2v+0x264>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081bc2:	fbb4 f0fb 	udiv	r0, r4, fp
        volt0_gas = A0_gas * ads_bitmv;
 8081bc6:	f8d3 8000 	ldr.w	r8, [r3]
        volt_half_Vref = half_Vref * ads_bitmv;
 8081bca:	f00c f9ed 	bl	808dfa8 <__aeabi_i2f>
 8081bce:	4641      	mov	r1, r8
 8081bd0:	f00c fa3e 	bl	808e050 <__aeabi_fmul>
 8081bd4:	4604      	mov	r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 8081bd6:	fbba f0fb 	udiv	r0, sl, fp
 8081bda:	f00c f9e5 	bl	808dfa8 <__aeabi_i2f>
 8081bde:	4641      	mov	r1, r8
 8081be0:	f00c fa36 	bl	808e050 <__aeabi_fmul>
 8081be4:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8081be6:	4620      	mov	r0, r4
 8081be8:	f00c f928 	bl	808de3c <__aeabi_fsub>
 8081bec:	4940      	ldr	r1, [pc, #256]	; (8081cf0 <_Z10readAlpha2v+0x278>)
 8081bee:	f00c fae3 	bl	808e1b8 <__aeabi_fdiv>
 8081bf2:	4605      	mov	r5, r0
        volt1_aux = A1_aux * ads_bitmv;
 8081bf4:	fbb9 f0fb 	udiv	r0, r9, fp
 8081bf8:	f00c f9d6 	bl	808dfa8 <__aeabi_i2f>
 8081bfc:	4641      	mov	r1, r8
 8081bfe:	f00c fa27 	bl	808e050 <__aeabi_fmul>
 8081c02:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8081c04:	4620      	mov	r0, r4
 8081c06:	f00c f919 	bl	808de3c <__aeabi_fsub>
 8081c0a:	493a      	ldr	r1, [pc, #232]	; (8081cf4 <_Z10readAlpha2v+0x27c>)
 8081c0c:	f00c fad4 	bl	808e1b8 <__aeabi_fdiv>
 8081c10:	4604      	mov	r4, r0
        if(readTemperature() <= 15){
 8081c12:	f7ff fd09 	bl	8081628 <_Z15readTemperaturev>
 8081c16:	4938      	ldr	r1, [pc, #224]	; (8081cf8 <_Z10readAlpha2v+0x280>)
 8081c18:	f00c fbc2 	bl	808e3a0 <__aeabi_fcmple>
 8081c1c:	b1e0      	cbz	r0, 8081c58 <_Z10readAlpha2v+0x1e0>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8081c1e:	4621      	mov	r1, r4
 8081c20:	4628      	mov	r0, r5
 8081c22:	f00c f90b 	bl	808de3c <__aeabi_fsub>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8081c26:	4606      	mov	r6, r0
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081c28:	4630      	mov	r0, r6
 8081c2a:	f00b fd63 	bl	808d6f4 <__aeabi_f2d>
 8081c2e:	a31e      	add	r3, pc, #120	; (adr r3, 8081ca8 <_Z10readAlpha2v+0x230>)
 8081c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081c34:	f00b fee0 	bl	808d9f8 <__aeabi_ddiv>
 8081c38:	f00c f8ac 	bl	808dd94 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081c3c:	2202      	movs	r2, #2
 8081c3e:	4601      	mov	r1, r0
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081c40:	4605      	mov	r5, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081c42:	a804      	add	r0, sp, #16
 8081c44:	f009 fcf0 	bl	808b628 <_ZN6StringC1Efi>
 8081c48:	4668      	mov	r0, sp
 8081c4a:	a904      	add	r1, sp, #16
 8081c4c:	f009 fc9c 	bl	808b588 <_ZN6StringaSEOS_>
 8081c50:	a804      	add	r0, sp, #16
 8081c52:	f009 fc05 	bl	808b460 <_ZN6StringD1Ev>
 8081c56:	e747      	b.n	8081ae8 <_Z10readAlpha2v+0x70>
        else if(readTemperature() <= 25){
 8081c58:	f7ff fce6 	bl	8081628 <_Z15readTemperaturev>
 8081c5c:	4927      	ldr	r1, [pc, #156]	; (8081cfc <_Z10readAlpha2v+0x284>)
 8081c5e:	f00c fb9f 	bl	808e3a0 <__aeabi_fcmple>
 8081c62:	b120      	cbz	r0, 8081c6e <_Z10readAlpha2v+0x1f6>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8081c64:	4621      	mov	r1, r4
 8081c66:	4628      	mov	r0, r5
 8081c68:	f00c f8ea 	bl	808de40 <__addsf3>
 8081c6c:	e7db      	b.n	8081c26 <_Z10readAlpha2v+0x1ae>
        else if(readTemperature() > 25){
 8081c6e:	f7ff fcdb 	bl	8081628 <_Z15readTemperaturev>
 8081c72:	4922      	ldr	r1, [pc, #136]	; (8081cfc <_Z10readAlpha2v+0x284>)
 8081c74:	f00c fba8 	bl	808e3c8 <__aeabi_fcmpgt>
 8081c78:	2800      	cmp	r0, #0
 8081c7a:	d0d5      	beq.n	8081c28 <_Z10readAlpha2v+0x1b0>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8081c7c:	4620      	mov	r0, r4
 8081c7e:	f00b fd39 	bl	808d6f4 <__aeabi_f2d>
 8081c82:	a30b      	add	r3, pc, #44	; (adr r3, 8081cb0 <_Z10readAlpha2v+0x238>)
 8081c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081c88:	f00b fd8c 	bl	808d7a4 <__aeabi_dmul>
 8081c8c:	4680      	mov	r8, r0
 8081c8e:	4628      	mov	r0, r5
 8081c90:	4689      	mov	r9, r1
 8081c92:	f00b fd2f 	bl	808d6f4 <__aeabi_f2d>
 8081c96:	4602      	mov	r2, r0
 8081c98:	460b      	mov	r3, r1
 8081c9a:	4640      	mov	r0, r8
 8081c9c:	4649      	mov	r1, r9
 8081c9e:	f00b fbcb 	bl	808d438 <__adddf3>
 8081ca2:	f00c f877 	bl	808dd94 <__aeabi_d2f>
 8081ca6:	e7be      	b.n	8081c26 <_Z10readAlpha2v+0x1ae>
 8081ca8:	d4fdf3b6 	.word	0xd4fdf3b6
 8081cac:	3fd6e978 	.word	0x3fd6e978
 8081cb0:	851eb852 	.word	0x851eb852
 8081cb4:	3fe851eb 	.word	0x3fe851eb
 8081cb8:	20000690 	.word	0x20000690
 8081cbc:	080943b2 	.word	0x080943b2
 8081cc0:	08091d92 	.word	0x08091d92
 8081cc4:	200000cc 	.word	0x200000cc
 8081cc8:	08091da8 	.word	0x08091da8
 8081ccc:	2000076d 	.word	0x2000076d
 8081cd0:	08091ddd 	.word	0x08091ddd
 8081cd4:	08091e04 	.word	0x08091e04
 8081cd8:	200005de 	.word	0x200005de
 8081cdc:	20000084 	.word	0x20000084
 8081ce0:	447a0000 	.word	0x447a0000
 8081ce4:	3ff40000 	.word	0x3ff40000
 8081ce8:	3fe00000 	.word	0x3fe00000
 8081cec:	08091dcd 	.word	0x08091dcd
 8081cf0:	c2f00000 	.word	0xc2f00000
 8081cf4:	c3160000 	.word	0xc3160000
 8081cf8:	41700000 	.word	0x41700000
 8081cfc:	41c80000 	.word	0x41c80000

08081d00 <_Z12writeLogFile6String>:
    }else{
        O3_float = getEspOzoneData();
    }
}

void writeLogFile(String data){
 8081d00:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 8081d02:	491e      	ldr	r1, [pc, #120]	; (8081d7c <_Z12writeLogFile6String+0x7c>)
 8081d04:	4604      	mov	r4, r0
 8081d06:	b085      	sub	sp, #20
 8081d08:	2302      	movs	r3, #2
 8081d0a:	220c      	movs	r2, #12
 8081d0c:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8081d10:	f7ff f8f4 	bl	8080efc <_ZN9SdFatBase5beginEP9SdSpiBasehh>
  if (sd.begin(CS)){
 8081d14:	b360      	cbz	r0, 8081d70 <_Z12writeLogFile6String+0x70>
      Serial.println("Writing data to log file.");
 8081d16:	f00a fecd 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081d1a:	4919      	ldr	r1, [pc, #100]	; (8081d80 <_Z12writeLogFile6String+0x80>)
 8081d1c:	f009 fe0f 	bl	808b93e <_ZN5Print7printlnEPKc>
    return open(m_cwd, path, oflag);
 8081d20:	4a18      	ldr	r2, [pc, #96]	; (8081d84 <_Z12writeLogFile6String+0x84>)
 8081d22:	4919      	ldr	r1, [pc, #100]	; (8081d88 <_Z12writeLogFile6String+0x88>)
      log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
      if(log_file_started == 0){
 8081d24:	4d19      	ldr	r5, [pc, #100]	; (8081d8c <_Z12writeLogFile6String+0x8c>)
 8081d26:	2346      	movs	r3, #70	; 0x46
 8081d28:	6812      	ldr	r2, [r2, #0]
 8081d2a:	6809      	ldr	r1, [r1, #0]
 8081d2c:	4818      	ldr	r0, [pc, #96]	; (8081d90 <_Z12writeLogFile6String+0x90>)
 8081d2e:	f006 fe4c 	bl	80889ca <_ZN7FatFile4openEPS_PKch>
 8081d32:	682b      	ldr	r3, [r5, #0]
 8081d34:	b99b      	cbnz	r3, 8081d5e <_Z12writeLogFile6String+0x5e>
          log_file.println("File Start timestamp: ");
 8081d36:	4917      	ldr	r1, [pc, #92]	; (8081d94 <_Z12writeLogFile6String+0x94>)
 8081d38:	4817      	ldr	r0, [pc, #92]	; (8081d98 <_Z12writeLogFile6String+0x98>)
 8081d3a:	f009 fe00 	bl	808b93e <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8081d3e:	f00a f966 	bl	808c00e <_ZN9TimeClass3nowEv>
 8081d42:	17c3      	asrs	r3, r0, #31
 8081d44:	4602      	mov	r2, r0
 8081d46:	4668      	mov	r0, sp
 8081d48:	f00a f85e 	bl	808be08 <_ZN9TimeClass7timeStrEx>
          log_file.println(Time.timeStr());
 8081d4c:	9900      	ldr	r1, [sp, #0]
 8081d4e:	4812      	ldr	r0, [pc, #72]	; (8081d98 <_Z12writeLogFile6String+0x98>)
 8081d50:	f009 fdf5 	bl	808b93e <_ZN5Print7printlnEPKc>
 8081d54:	4668      	mov	r0, sp
 8081d56:	f009 fb83 	bl	808b460 <_ZN6StringD1Ev>
          log_file_started = 1;
 8081d5a:	2301      	movs	r3, #1
 8081d5c:	602b      	str	r3, [r5, #0]
      }
      log_file.println(data);
 8081d5e:	6821      	ldr	r1, [r4, #0]
 8081d60:	480d      	ldr	r0, [pc, #52]	; (8081d98 <_Z12writeLogFile6String+0x98>)
 8081d62:	f009 fdec 	bl	808b93e <_ZN5Print7printlnEPKc>

      log_file.close();
 8081d66:	480a      	ldr	r0, [pc, #40]	; (8081d90 <_Z12writeLogFile6String+0x90>)
 8081d68:	f006 fe28 	bl	80889bc <_ZN7FatFile5closeEv>
  }else{
    Serial.println("Unable to write to log file");
  }
}
 8081d6c:	b005      	add	sp, #20
 8081d6e:	bd30      	pop	{r4, r5, pc}
    Serial.println("Unable to write to log file");
 8081d70:	f00a fea0 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081d74:	4909      	ldr	r1, [pc, #36]	; (8081d9c <_Z12writeLogFile6String+0x9c>)
 8081d76:	f009 fde2 	bl	808b93e <_ZN5Print7printlnEPKc>
}
 8081d7a:	e7f7      	b.n	8081d6c <_Z12writeLogFile6String+0x6c>
 8081d7c:	20000cd0 	.word	0x20000cd0
 8081d80:	08091e08 	.word	0x08091e08
 8081d84:	200007b4 	.word	0x200007b4
 8081d88:	20000d5c 	.word	0x20000d5c
 8081d8c:	200007f0 	.word	0x200007f0
 8081d90:	200007cc 	.word	0x200007cc
 8081d94:	08091e22 	.word	0x08091e22
 8081d98:	200007c4 	.word	0x200007c4
 8081d9c:	08091e39 	.word	0x08091e39

08081da0 <_Z13readGpsStreamv>:
void readGpsStream(void){
 8081da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081da4:	b08c      	sub	sp, #48	; 0x30
    String gps_sentence = "init";
 8081da6:	4668      	mov	r0, sp
 8081da8:	4996      	ldr	r1, [pc, #600]	; (8082004 <_Z13readGpsStreamv+0x264>)
 8081daa:	f009 fba3 	bl	808b4f4 <_ZN6StringC1EPKc>
        if(prefix_string.equals("GGA")){
 8081dae:	4f96      	ldr	r7, [pc, #600]	; (8082008 <_Z13readGpsStreamv+0x268>)
        }else if(gps_sentence.equals("init")){
 8081db0:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8082004 <_Z13readGpsStreamv+0x264>
            Serial.println("Error reading GPS");
 8081db4:	4e95      	ldr	r6, [pc, #596]	; (808200c <_Z13readGpsStreamv+0x26c>)
        gps_sentence = Serial5.readStringUntil('\r');
 8081db6:	f7ff f865 	bl	8080e84 <_Z22__fetch_global_Serial5v>
 8081dba:	220d      	movs	r2, #13
 8081dbc:	4601      	mov	r1, r0
 8081dbe:	a808      	add	r0, sp, #32
 8081dc0:	f009 ff7a 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
 8081dc4:	a908      	add	r1, sp, #32
 8081dc6:	4668      	mov	r0, sp
 8081dc8:	f009 fbde 	bl	808b588 <_ZN6StringaSEOS_>
 8081dcc:	a808      	add	r0, sp, #32
 8081dce:	f009 fb47 	bl	808b460 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 8081dd2:	2307      	movs	r3, #7
 8081dd4:	2204      	movs	r2, #4
 8081dd6:	4669      	mov	r1, sp
 8081dd8:	a804      	add	r0, sp, #16
 8081dda:	f009 fd2d 	bl	808b838 <_ZNK6String9substringEjj>
        if(prefix_string.equals("GGA")){
 8081dde:	4639      	mov	r1, r7
 8081de0:	a804      	add	r0, sp, #16
 8081de2:	f009 fcde 	bl	808b7a2 <_ZNK6String6equalsEPKc>
 8081de6:	4605      	mov	r5, r0
 8081de8:	2800      	cmp	r0, #0
 8081dea:	d153      	bne.n	8081e94 <_Z13readGpsStreamv+0xf4>
        }else if(gps_sentence.equals("init")){
 8081dec:	4641      	mov	r1, r8
 8081dee:	4668      	mov	r0, sp
 8081df0:	f009 fcd7 	bl	808b7a2 <_ZNK6String6equalsEPKc>
 8081df4:	4604      	mov	r4, r0
 8081df6:	2800      	cmp	r0, #0
 8081df8:	d04f      	beq.n	8081e9a <_Z13readGpsStreamv+0xfa>
            Serial.println("Error reading GPS");
 8081dfa:	f00a fe5b 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081dfe:	4631      	mov	r1, r6
 8081e00:	f009 fd9d 	bl	808b93e <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081e04:	4631      	mov	r1, r6
 8081e06:	a808      	add	r0, sp, #32
 8081e08:	f009 fb74 	bl	808b4f4 <_ZN6StringC1EPKc>
 8081e0c:	a808      	add	r0, sp, #32
 8081e0e:	f7ff ff77 	bl	8081d00 <_Z12writeLogFile6String>
 8081e12:	a808      	add	r0, sp, #32
 8081e14:	f009 fb24 	bl	808b460 <_ZN6StringD1Ev>
            error = 1;
 8081e18:	2401      	movs	r4, #1
        String prefix_string = gps_sentence.substring(4,7);
 8081e1a:	a804      	add	r0, sp, #16
 8081e1c:	f009 fb20 	bl	808b460 <_ZN6StringD1Ev>
    while(!stringFound && !error){
 8081e20:	b385      	cbz	r5, 8081e84 <_Z13readGpsStreamv+0xe4>
 8081e22:	2400      	movs	r4, #0
 8081e24:	4627      	mov	r7, r4
                        gps.set_horizontalDillution(hdString);
 8081e26:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8082024 <_Z13readGpsStreamv+0x284>
                        status_word.status_int &= 0xFFF3;
 8081e2a:	4e79      	ldr	r6, [pc, #484]	; (8082010 <_Z13readGpsStreamv+0x270>)
        for(int a = 0; a<gps_sentence.length(); a++){
 8081e2c:	9b02      	ldr	r3, [sp, #8]
 8081e2e:	42a3      	cmp	r3, r4
 8081e30:	d92a      	bls.n	8081e88 <_Z13readGpsStreamv+0xe8>
            if(gps_sentence.charAt(a) == ','){
 8081e32:	4621      	mov	r1, r4
 8081e34:	4668      	mov	r0, sp
 8081e36:	f009 fcee 	bl	808b816 <_ZNK6String6charAtEj>
 8081e3a:	282c      	cmp	r0, #44	; 0x2c
 8081e3c:	f104 0501 	add.w	r5, r4, #1
 8081e40:	d11e      	bne.n	8081e80 <_Z13readGpsStreamv+0xe0>
                if(comma_counter == TIME_FIELD_INDEX){
 8081e42:	bb67      	cbnz	r7, 8081e9e <_Z13readGpsStreamv+0xfe>
                    if(gps_sentence.charAt(a+1)!=','){
 8081e44:	4629      	mov	r1, r5
 8081e46:	4668      	mov	r0, sp
 8081e48:	f009 fce5 	bl	808b816 <_ZNK6String6charAtEj>
 8081e4c:	282c      	cmp	r0, #44	; 0x2c
 8081e4e:	d016      	beq.n	8081e7e <_Z13readGpsStreamv+0xde>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081e50:	f104 030b 	add.w	r3, r4, #11
 8081e54:	462a      	mov	r2, r5
 8081e56:	4669      	mov	r1, sp
 8081e58:	a808      	add	r0, sp, #32
 8081e5a:	f009 fced 	bl	808b838 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081e5e:	4b6d      	ldr	r3, [pc, #436]	; (8082014 <_Z13readGpsStreamv+0x274>)
 8081e60:	681b      	ldr	r3, [r3, #0]
 8081e62:	b14b      	cbz	r3, 8081e78 <_Z13readGpsStreamv+0xd8>
                            Serial.print("GPS utc string: ");
 8081e64:	f00a fe26 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081e68:	496b      	ldr	r1, [pc, #428]	; (8082018 <_Z13readGpsStreamv+0x278>)
 8081e6a:	f009 fd55 	bl	808b918 <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081e6e:	f00a fe21 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081e72:	9908      	ldr	r1, [sp, #32]
 8081e74:	f009 fd63 	bl	808b93e <_ZN5Print7printlnEPKc>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081e78:	a808      	add	r0, sp, #32
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081e7a:	f009 faf1 	bl	808b460 <_ZN6StringD1Ev>
                comma_counter++;
 8081e7e:	3701      	adds	r7, #1
        for(int a = 0; a<gps_sentence.length(); a++){
 8081e80:	462c      	mov	r4, r5
 8081e82:	e7d3      	b.n	8081e2c <_Z13readGpsStreamv+0x8c>
    while(!stringFound && !error){
 8081e84:	2c00      	cmp	r4, #0
 8081e86:	d096      	beq.n	8081db6 <_Z13readGpsStreamv+0x16>
    String gps_sentence = "init";
 8081e88:	4668      	mov	r0, sp
 8081e8a:	f009 fae9 	bl	808b460 <_ZN6StringD1Ev>
}
 8081e8e:	b00c      	add	sp, #48	; 0x30
 8081e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081e94:	2400      	movs	r4, #0
            stringFound = 1;
 8081e96:	2501      	movs	r5, #1
 8081e98:	e7bf      	b.n	8081e1a <_Z13readGpsStreamv+0x7a>
 8081e9a:	4605      	mov	r5, r0
 8081e9c:	e7bd      	b.n	8081e1a <_Z13readGpsStreamv+0x7a>
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 8081e9e:	2f01      	cmp	r7, #1
 8081ea0:	d12f      	bne.n	8081f02 <_Z13readGpsStreamv+0x162>
                    if(gps_sentence.charAt(a+1)!=','){
 8081ea2:	4629      	mov	r1, r5
 8081ea4:	4668      	mov	r0, sp
 8081ea6:	f009 fcb6 	bl	808b816 <_ZNK6String6charAtEj>
 8081eaa:	282c      	cmp	r0, #44	; 0x2c
 8081eac:	d0e7      	beq.n	8081e7e <_Z13readGpsStreamv+0xde>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081eae:	f104 030a 	add.w	r3, r4, #10
 8081eb2:	462a      	mov	r2, r5
 8081eb4:	4669      	mov	r1, sp
 8081eb6:	a804      	add	r0, sp, #16
 8081eb8:	f009 fcbe 	bl	808b838 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081ebc:	4b55      	ldr	r3, [pc, #340]	; (8082014 <_Z13readGpsStreamv+0x274>)
 8081ebe:	681b      	ldr	r3, [r3, #0]
 8081ec0:	b14b      	cbz	r3, 8081ed6 <_Z13readGpsStreamv+0x136>
                          Serial.print("Latitude string: ");
 8081ec2:	f00a fdf7 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081ec6:	4955      	ldr	r1, [pc, #340]	; (808201c <_Z13readGpsStreamv+0x27c>)
 8081ec8:	f009 fd26 	bl	808b918 <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 8081ecc:	f00a fdf2 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081ed0:	9904      	ldr	r1, [sp, #16]
 8081ed2:	f009 fd21 	bl	808b918 <_ZN5Print5printEPKc>
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081ed6:	a904      	add	r1, sp, #16
 8081ed8:	a808      	add	r0, sp, #32
 8081eda:	f009 fb4a 	bl	808b572 <_ZN6StringC1ERKS_>
 8081ede:	f104 010c 	add.w	r1, r4, #12
 8081ee2:	4668      	mov	r0, sp
 8081ee4:	f009 fc97 	bl	808b816 <_ZNK6String6charAtEj>
 8081ee8:	a908      	add	r1, sp, #32
 8081eea:	4602      	mov	r2, r0
 8081eec:	4640      	mov	r0, r8
 8081eee:	f005 fa2d 	bl	808734c <_ZN3GPS15set_lat_decimalE6Stringc>
 8081ef2:	a808      	add	r0, sp, #32
 8081ef4:	f009 fab4 	bl	808b460 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081ef8:	8833      	ldrh	r3, [r6, #0]
 8081efa:	f023 0308 	bic.w	r3, r3, #8
                            status_word.status_int |= 0x0004;
 8081efe:	8033      	strh	r3, [r6, #0]
 8081f00:	e02c      	b.n	8081f5c <_Z13readGpsStreamv+0x1bc>
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081f02:	2f03      	cmp	r7, #3
 8081f04:	d12c      	bne.n	8081f60 <_Z13readGpsStreamv+0x1c0>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f06:	4629      	mov	r1, r5
 8081f08:	4668      	mov	r0, sp
 8081f0a:	f009 fc84 	bl	808b816 <_ZNK6String6charAtEj>
 8081f0e:	282c      	cmp	r0, #44	; 0x2c
 8081f10:	d0b5      	beq.n	8081e7e <_Z13readGpsStreamv+0xde>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081f12:	f104 030b 	add.w	r3, r4, #11
 8081f16:	462a      	mov	r2, r5
 8081f18:	4669      	mov	r1, sp
 8081f1a:	a804      	add	r0, sp, #16
 8081f1c:	f009 fc8c 	bl	808b838 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081f20:	4b3c      	ldr	r3, [pc, #240]	; (8082014 <_Z13readGpsStreamv+0x274>)
 8081f22:	681b      	ldr	r3, [r3, #0]
 8081f24:	b14b      	cbz	r3, 8081f3a <_Z13readGpsStreamv+0x19a>
                          Serial.print("longitude string: ");
 8081f26:	f00a fdc5 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081f2a:	493d      	ldr	r1, [pc, #244]	; (8082020 <_Z13readGpsStreamv+0x280>)
 8081f2c:	f009 fcf4 	bl	808b918 <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081f30:	f00a fdc0 	bl	808cab4 <_Z16_fetch_usbserialv>
 8081f34:	9904      	ldr	r1, [sp, #16]
 8081f36:	f009 fcef 	bl	808b918 <_ZN5Print5printEPKc>
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 8081f3a:	a904      	add	r1, sp, #16
 8081f3c:	a808      	add	r0, sp, #32
 8081f3e:	f009 fb18 	bl	808b572 <_ZN6StringC1ERKS_>
 8081f42:	f104 010d 	add.w	r1, r4, #13
 8081f46:	4668      	mov	r0, sp
 8081f48:	f009 fc65 	bl	808b816 <_ZNK6String6charAtEj>
 8081f4c:	a908      	add	r1, sp, #32
 8081f4e:	4602      	mov	r2, r0
 8081f50:	4640      	mov	r0, r8
 8081f52:	f005 fa43 	bl	80873dc <_ZN3GPS16set_long_decimalE6Stringc>
                        gps.set_satellites(numberOfSatellitesString);
 8081f56:	a808      	add	r0, sp, #32
 8081f58:	f009 fa82 	bl	808b460 <_ZN6StringD1Ev>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081f5c:	a804      	add	r0, sp, #16
 8081f5e:	e78c      	b.n	8081e7a <_Z13readGpsStreamv+0xda>
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
 8081f60:	2f06      	cmp	r7, #6
 8081f62:	d114      	bne.n	8081f8e <_Z13readGpsStreamv+0x1ee>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f64:	4629      	mov	r1, r5
 8081f66:	4668      	mov	r0, sp
 8081f68:	f009 fc55 	bl	808b816 <_ZNK6String6charAtEj>
 8081f6c:	282c      	cmp	r0, #44	; 0x2c
 8081f6e:	d086      	beq.n	8081e7e <_Z13readGpsStreamv+0xde>
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
 8081f70:	462a      	mov	r2, r5
 8081f72:	4669      	mov	r1, sp
 8081f74:	1ce3      	adds	r3, r4, #3
 8081f76:	a804      	add	r0, sp, #16
 8081f78:	f009 fc5e 	bl	808b838 <_ZNK6String9substringEjj>
                        gps.set_satellites(numberOfSatellitesString);
 8081f7c:	a904      	add	r1, sp, #16
 8081f7e:	a808      	add	r0, sp, #32
 8081f80:	f009 faf7 	bl	808b572 <_ZN6StringC1ERKS_>
 8081f84:	4640      	mov	r0, r8
 8081f86:	a908      	add	r1, sp, #32
 8081f88:	f005 fa6e 	bl	8087468 <_ZN3GPS14set_satellitesE6String>
 8081f8c:	e7e3      	b.n	8081f56 <_Z13readGpsStreamv+0x1b6>
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 8081f8e:	2f07      	cmp	r7, #7
 8081f90:	f47f af75 	bne.w	8081e7e <_Z13readGpsStreamv+0xde>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f94:	4629      	mov	r1, r5
 8081f96:	4668      	mov	r0, sp
 8081f98:	f009 fc3d 	bl	808b816 <_ZNK6String6charAtEj>
 8081f9c:	282c      	cmp	r0, #44	; 0x2c
 8081f9e:	f43f af6e 	beq.w	8081e7e <_Z13readGpsStreamv+0xde>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081fa2:	462a      	mov	r2, r5
 8081fa4:	1ce3      	adds	r3, r4, #3
 8081fa6:	4669      	mov	r1, sp
 8081fa8:	a804      	add	r0, sp, #16
 8081faa:	f009 fc45 	bl	808b838 <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8081fae:	a904      	add	r1, sp, #16
 8081fb0:	a808      	add	r0, sp, #32
 8081fb2:	f009 fade 	bl	808b572 <_ZN6StringC1ERKS_>
 8081fb6:	a908      	add	r1, sp, #32
 8081fb8:	4640      	mov	r0, r8
 8081fba:	f005 fa5d 	bl	8087478 <_ZN3GPS23set_horizontalDillutionE6String>
 8081fbe:	a808      	add	r0, sp, #32
 8081fc0:	f009 fa4e 	bl	808b460 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081fc4:	8833      	ldrh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081fc6:	4640      	mov	r0, r8
                        status_word.status_int &= 0xFFF3;
 8081fc8:	f023 030c 	bic.w	r3, r3, #12
 8081fcc:	8033      	strh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081fce:	f005 fa69 	bl	80874a4 <_ZN3GPS23get_horizontalDillutionEv>
 8081fd2:	2801      	cmp	r0, #1
 8081fd4:	dc03      	bgt.n	8081fde <_Z13readGpsStreamv+0x23e>
                            status_word.status_int |= 0x000C;
 8081fd6:	8833      	ldrh	r3, [r6, #0]
 8081fd8:	f043 030c 	orr.w	r3, r3, #12
 8081fdc:	e78f      	b.n	8081efe <_Z13readGpsStreamv+0x15e>
                        }else if(gps.get_horizontalDillution() < 5){
 8081fde:	4640      	mov	r0, r8
 8081fe0:	f005 fa60 	bl	80874a4 <_ZN3GPS23get_horizontalDillutionEv>
 8081fe4:	2804      	cmp	r0, #4
 8081fe6:	dc03      	bgt.n	8081ff0 <_Z13readGpsStreamv+0x250>
                            status_word.status_int |= 0x0008;
 8081fe8:	8833      	ldrh	r3, [r6, #0]
 8081fea:	f043 0308 	orr.w	r3, r3, #8
 8081fee:	e786      	b.n	8081efe <_Z13readGpsStreamv+0x15e>
                        }else if(gps.get_horizontalDillution() < 20){
 8081ff0:	4640      	mov	r0, r8
 8081ff2:	f005 fa57 	bl	80874a4 <_ZN3GPS23get_horizontalDillutionEv>
 8081ff6:	2813      	cmp	r0, #19
 8081ff8:	dcb0      	bgt.n	8081f5c <_Z13readGpsStreamv+0x1bc>
                            status_word.status_int |= 0x0004;
 8081ffa:	8833      	ldrh	r3, [r6, #0]
 8081ffc:	f043 0304 	orr.w	r3, r3, #4
 8082000:	e77d      	b.n	8081efe <_Z13readGpsStreamv+0x15e>
 8082002:	bf00      	nop
 8082004:	08091e55 	.word	0x08091e55
 8082008:	08091e5a 	.word	0x08091e5a
 808200c:	08091e5e 	.word	0x08091e5e
 8082010:	20000cf8 	.word	0x20000cf8
 8082014:	20000690 	.word	0x20000690
 8082018:	08091e70 	.word	0x08091e70
 808201c:	08091e81 	.word	0x08091e81
 8082020:	08091e93 	.word	0x08091e93
 8082024:	20000720 	.word	0x20000720

08082028 <_Z10readAlpha1v>:
float readAlpha1(void){
 8082028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(debugging_enabled){
 808202c:	4da2      	ldr	r5, [pc, #648]	; (80822b8 <_Z10readAlpha1v+0x290>)
float readAlpha1(void){
 808202e:	b08d      	sub	sp, #52	; 0x34
    String alpha1_ppmRounded;
 8082030:	49a2      	ldr	r1, [pc, #648]	; (80822bc <_Z10readAlpha1v+0x294>)
 8082032:	a804      	add	r0, sp, #16
 8082034:	f009 fa5e 	bl	808b4f4 <_ZN6StringC1EPKc>
    if(debugging_enabled){
 8082038:	682b      	ldr	r3, [r5, #0]
 808203a:	b123      	cbz	r3, 8082046 <_Z10readAlpha1v+0x1e>
        Serial.println("Start of alpha read");
 808203c:	f00a fd3a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082040:	499f      	ldr	r1, [pc, #636]	; (80822c0 <_Z10readAlpha1v+0x298>)
 8082042:	f009 fc7c 	bl	808b93e <_ZN5Print7printlnEPKc>
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8082046:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8082318 <_Z10readAlpha1v+0x2f0>
 808204a:	2100      	movs	r1, #0
 808204c:	f8b9 0000 	ldrh.w	r0, [r9]
 8082050:	f00b f8f5 	bl	808d23e <digitalWrite>
    if(Wire.requestFrom(0x49,1) == 0){
 8082054:	f00b f988 	bl	808d368 <_Z19__fetch_global_Wirev>
 8082058:	2201      	movs	r2, #1
 808205a:	2149      	movs	r1, #73	; 0x49
 808205c:	f00a ff1d 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>
 8082060:	f8cd 900c 	str.w	r9, [sp, #12]
 8082064:	2800      	cmp	r0, #0
 8082066:	d15d      	bne.n	8082124 <_Z10readAlpha1v+0xfc>
      if(debugging_enabled){
 8082068:	682b      	ldr	r3, [r5, #0]
 808206a:	b173      	cbz	r3, 808208a <_Z10readAlpha1v+0x62>
        Serial.println("Couldn't communicate with LMP91000");
 808206c:	f00a fd22 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082070:	4994      	ldr	r1, [pc, #592]	; (80822c4 <_Z10readAlpha1v+0x29c>)
 8082072:	f009 fc64 	bl	808b93e <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000");
 8082076:	4993      	ldr	r1, [pc, #588]	; (80822c4 <_Z10readAlpha1v+0x29c>)
            writeLogFile("Halfvolt higher than 0.5");
 8082078:	a808      	add	r0, sp, #32
 808207a:	f009 fa3b 	bl	808b4f4 <_ZN6StringC1EPKc>
 808207e:	a808      	add	r0, sp, #32
 8082080:	f7ff fe3e 	bl	8081d00 <_Z12writeLogFile6String>
 8082084:	a808      	add	r0, sp, #32
 8082086:	f009 f9eb 	bl	808b460 <_ZN6StringD1Ev>
    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 808208a:	2100      	movs	r1, #0
 808208c:	488e      	ldr	r0, [pc, #568]	; (80822c8 <_Z10readAlpha1v+0x2a0>)
 808208e:	f004 ffec 	bl	808706a <_ZN8LMP910004readEh>
 8082092:	b980      	cbnz	r0, 80820b6 <_Z10readAlpha1v+0x8e>
        if(debugging_enabled){
 8082094:	682b      	ldr	r3, [r5, #0]
 8082096:	b173      	cbz	r3, 80820b6 <_Z10readAlpha1v+0x8e>
            Serial.println("Status = 0 from LMP91000 status reg");
 8082098:	f00a fd0c 	bl	808cab4 <_Z16_fetch_usbserialv>
 808209c:	498b      	ldr	r1, [pc, #556]	; (80822cc <_Z10readAlpha1v+0x2a4>)
 808209e:	f009 fc4e 	bl	808b93e <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 80820a2:	498b      	ldr	r1, [pc, #556]	; (80822d0 <_Z10readAlpha1v+0x2a8>)
 80820a4:	a808      	add	r0, sp, #32
 80820a6:	f009 fa25 	bl	808b4f4 <_ZN6StringC1EPKc>
 80820aa:	a808      	add	r0, sp, #32
 80820ac:	f7ff fe28 	bl	8081d00 <_Z12writeLogFile6String>
 80820b0:	a808      	add	r0, sp, #32
 80820b2:	f009 f9d5 	bl	808b460 <_ZN6StringD1Ev>
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
 80820b6:	f00b f957 	bl	808d368 <_Z19__fetch_global_Wirev>
 80820ba:	2201      	movs	r2, #1
 80820bc:	2149      	movs	r1, #73	; 0x49
 80820be:	f00a feec 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>
 80820c2:	2800      	cmp	r0, #0
 80820c4:	d15a      	bne.n	808217c <_Z10readAlpha1v+0x154>
        alpha1_ppmRounded = "-99";
 80820c6:	4983      	ldr	r1, [pc, #524]	; (80822d4 <_Z10readAlpha1v+0x2ac>)
 80820c8:	a804      	add	r0, sp, #16
 80820ca:	f009 fa65 	bl	808b598 <_ZN6StringaSEPKc>
      digitalWrite(lmp91000_1_en, HIGH);  //disable
 80820ce:	9b03      	ldr	r3, [sp, #12]
 80820d0:	2101      	movs	r1, #1
 80820d2:	8818      	ldrh	r0, [r3, #0]
 80820d4:	f00b f8b3 	bl	808d23e <digitalWrite>
      if(debugging_enabled){
 80820d8:	682b      	ldr	r3, [r5, #0]
 80820da:	b1e3      	cbz	r3, 8082116 <_Z10readAlpha1v+0xee>
          Serial.print("CO measurements:  \n\r");
 80820dc:	f00a fcea 	bl	808cab4 <_Z16_fetch_usbserialv>
 80820e0:	497d      	ldr	r1, [pc, #500]	; (80822d8 <_Z10readAlpha1v+0x2b0>)
 80820e2:	f009 fc19 	bl	808b918 <_ZN5Print5printEPKc>
          Serial.printf("A0_gas: %d\n\r", A0_gas);
 80820e6:	f00a fce5 	bl	808cab4 <_Z16_fetch_usbserialv>
 80820ea:	463a      	mov	r2, r7
 80820ec:	497b      	ldr	r1, [pc, #492]	; (80822dc <_Z10readAlpha1v+0x2b4>)
 80820ee:	f7fe fdbf 	bl	8080c70 <_ZN5Print6printfEPKcz>
          Serial.printf("A1_aux: %d\n\r", A1_aux);
 80820f2:	f00a fcdf 	bl	808cab4 <_Z16_fetch_usbserialv>
 80820f6:	4632      	mov	r2, r6
 80820f8:	4979      	ldr	r1, [pc, #484]	; (80822e0 <_Z10readAlpha1v+0x2b8>)
 80820fa:	f7fe fdb9 	bl	8080c70 <_ZN5Print6printfEPKcz>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
 80820fe:	f00a fcd9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082102:	4652      	mov	r2, sl
 8082104:	4977      	ldr	r1, [pc, #476]	; (80822e4 <_Z10readAlpha1v+0x2bc>)
 8082106:	f7fe fdb3 	bl	8080c70 <_ZN5Print6printfEPKcz>
          Serial.printf("half_vref: %d\n\r", half_Vref);
 808210a:	f00a fcd3 	bl	808cab4 <_Z16_fetch_usbserialv>
 808210e:	4622      	mov	r2, r4
 8082110:	4975      	ldr	r1, [pc, #468]	; (80822e8 <_Z10readAlpha1v+0x2c0>)
 8082112:	f7fe fdad 	bl	8080c70 <_ZN5Print6printfEPKcz>
    String alpha1_ppmRounded;
 8082116:	a804      	add	r0, sp, #16
 8082118:	f009 f9a2 	bl	808b460 <_ZN6StringD1Ev>
}
 808211c:	4640      	mov	r0, r8
 808211e:	b00d      	add	sp, #52	; 0x34
 8082120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8082124:	2103      	movs	r1, #3
 8082126:	4871      	ldr	r0, [pc, #452]	; (80822ec <_Z10readAlpha1v+0x2c4>)
 8082128:	f005 f8e6 	bl	80872f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 808212c:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 808212e:	f00b ff3b 	bl	808dfa8 <__aeabi_i2f>
 8082132:	4b6f      	ldr	r3, [pc, #444]	; (80822f0 <_Z10readAlpha1v+0x2c8>)
 8082134:	6819      	ldr	r1, [r3, #0]
 8082136:	f00b ff8b 	bl	808e050 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 808213a:	496e      	ldr	r1, [pc, #440]	; (80822f4 <_Z10readAlpha1v+0x2cc>)
 808213c:	f00c f83c 	bl	808e1b8 <__aeabi_fdiv>
 8082140:	f00b fad8 	bl	808d6f4 <__aeabi_f2d>
 8082144:	4602      	mov	r2, r0
 8082146:	460b      	mov	r3, r1
 8082148:	e9cd 2300 	strd	r2, r3, [sp]
 808214c:	2200      	movs	r2, #0
 808214e:	4b6a      	ldr	r3, [pc, #424]	; (80822f8 <_Z10readAlpha1v+0x2d0>)
 8082150:	f00b f970 	bl	808d434 <__aeabi_dsub>
 8082154:	2200      	movs	r2, #0
 8082156:	4b69      	ldr	r3, [pc, #420]	; (80822fc <_Z10readAlpha1v+0x2d4>)
 8082158:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808215c:	f00b fdb2 	bl	808dcc4 <__aeabi_dcmpgt>
 8082160:	2800      	cmp	r0, #0
 8082162:	d092      	beq.n	808208a <_Z10readAlpha1v+0x62>
          if(debugging_enabled){
 8082164:	682b      	ldr	r3, [r5, #0]
 8082166:	2b00      	cmp	r3, #0
 8082168:	d08f      	beq.n	808208a <_Z10readAlpha1v+0x62>
            Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref/1000);
 808216a:	f00a fca3 	bl	808cab4 <_Z16_fetch_usbserialv>
 808216e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8082172:	4963      	ldr	r1, [pc, #396]	; (8082300 <_Z10readAlpha1v+0x2d8>)
 8082174:	f7fe fd7c 	bl	8080c70 <_ZN5Print6printfEPKcz>
            writeLogFile("Halfvolt higher than 0.5");
 8082178:	4962      	ldr	r1, [pc, #392]	; (8082304 <_Z10readAlpha1v+0x2dc>)
 808217a:	e77d      	b.n	8082078 <_Z10readAlpha1v+0x50>
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
 808217c:	2100      	movs	r1, #0
 808217e:	4852      	ldr	r0, [pc, #328]	; (80822c8 <_Z10readAlpha1v+0x2a0>)
 8082180:	f004 ff73 	bl	808706a <_ZN8LMP910004readEh>
 8082184:	2800      	cmp	r0, #0
 8082186:	d09e      	beq.n	80820c6 <_Z10readAlpha1v+0x9e>
 8082188:	2400      	movs	r4, #0
 808218a:	f04f 090a 	mov.w	r9, #10
 808218e:	46a2      	mov	sl, r4
 8082190:	46a0      	mov	r8, r4
 8082192:	4627      	mov	r7, r4
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8082194:	4e55      	ldr	r6, [pc, #340]	; (80822ec <_Z10readAlpha1v+0x2c4>)
 8082196:	2100      	movs	r1, #0
 8082198:	4630      	mov	r0, r6
 808219a:	f005 f8ad 	bl	80872f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 808219e:	2101      	movs	r1, #1
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 80821a0:	4407      	add	r7, r0
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 80821a2:	4630      	mov	r0, r6
 80821a4:	f005 f8a8 	bl	80872f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 80821a8:	2102      	movs	r1, #2
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 80821aa:	4480      	add	r8, r0
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 80821ac:	4630      	mov	r0, r6
 80821ae:	f005 f8a3 	bl	80872f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 80821b2:	2103      	movs	r1, #3
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 80821b4:	4482      	add	sl, r0
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 80821b6:	4630      	mov	r0, r6
 80821b8:	f005 f89e 	bl	80872f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 80821bc:	f1b9 0901 	subs.w	r9, r9, #1
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 80821c0:	4404      	add	r4, r0
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 80821c2:	d1e8      	bne.n	8082196 <_Z10readAlpha1v+0x16e>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 80821c4:	200a      	movs	r0, #10
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 80821c6:	fbb4 f4f0 	udiv	r4, r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 80821ca:	4b49      	ldr	r3, [pc, #292]	; (80822f0 <_Z10readAlpha1v+0x2c8>)
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 80821cc:	fbb8 f6f0 	udiv	r6, r8, r0
        volt0_gas = A0_gas * ads_bitmv;
 80821d0:	f8d3 9000 	ldr.w	r9, [r3]
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 80821d4:	fbb7 f7f0 	udiv	r7, r7, r0
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 80821d8:	fbba faf0 	udiv	sl, sl, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 80821dc:	4620      	mov	r0, r4
 80821de:	f00b fee3 	bl	808dfa8 <__aeabi_i2f>
 80821e2:	4649      	mov	r1, r9
 80821e4:	f00b ff34 	bl	808e050 <__aeabi_fmul>
 80821e8:	4680      	mov	r8, r0
        volt0_gas = A0_gas * ads_bitmv;
 80821ea:	4638      	mov	r0, r7
 80821ec:	f00b fedc 	bl	808dfa8 <__aeabi_i2f>
 80821f0:	4649      	mov	r1, r9
 80821f2:	f00b ff2d 	bl	808e050 <__aeabi_fmul>
 80821f6:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 80821f8:	4640      	mov	r0, r8
 80821fa:	f00b fe1f 	bl	808de3c <__aeabi_fsub>
 80821fe:	4942      	ldr	r1, [pc, #264]	; (8082308 <_Z10readAlpha1v+0x2e0>)
 8082200:	f00b ffda 	bl	808e1b8 <__aeabi_fdiv>
 8082204:	4683      	mov	fp, r0
        volt1_aux = A1_aux * ads_bitmv;
 8082206:	4630      	mov	r0, r6
 8082208:	f00b fece 	bl	808dfa8 <__aeabi_i2f>
 808220c:	4649      	mov	r1, r9
 808220e:	f00b ff1f 	bl	808e050 <__aeabi_fmul>
 8082212:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8082214:	4640      	mov	r0, r8
 8082216:	f00b fe11 	bl	808de3c <__aeabi_fsub>
 808221a:	493c      	ldr	r1, [pc, #240]	; (808230c <_Z10readAlpha1v+0x2e4>)
 808221c:	f00b ffcc 	bl	808e1b8 <__aeabi_fdiv>
 8082220:	4680      	mov	r8, r0
        if(readTemperature() <= 15){
 8082222:	f7ff fa01 	bl	8081628 <_Z15readTemperaturev>
 8082226:	493a      	ldr	r1, [pc, #232]	; (8082310 <_Z10readAlpha1v+0x2e8>)
 8082228:	f00c f8ba 	bl	808e3a0 <__aeabi_fcmple>
 808222c:	b1d0      	cbz	r0, 8082264 <_Z10readAlpha1v+0x23c>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 808222e:	4641      	mov	r1, r8
 8082230:	4658      	mov	r0, fp
 8082232:	f00b fe03 	bl	808de3c <__aeabi_fsub>
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8082236:	f00b fa5d 	bl	808d6f4 <__aeabi_f2d>
 808223a:	a31b      	add	r3, pc, #108	; (adr r3, 80822a8 <_Z10readAlpha1v+0x280>)
 808223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082240:	f00b fbda 	bl	808d9f8 <__aeabi_ddiv>
 8082244:	f00b fda6 	bl	808dd94 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8082248:	2202      	movs	r2, #2
 808224a:	4601      	mov	r1, r0
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 808224c:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 808224e:	a808      	add	r0, sp, #32
 8082250:	f009 f9ea 	bl	808b628 <_ZN6StringC1Efi>
 8082254:	a908      	add	r1, sp, #32
 8082256:	a804      	add	r0, sp, #16
 8082258:	f009 f996 	bl	808b588 <_ZN6StringaSEOS_>
 808225c:	a808      	add	r0, sp, #32
 808225e:	f009 f8ff 	bl	808b460 <_ZN6StringD1Ev>
 8082262:	e734      	b.n	80820ce <_Z10readAlpha1v+0xa6>
        else if(readTemperature() <= 25){
 8082264:	f7ff f9e0 	bl	8081628 <_Z15readTemperaturev>
 8082268:	492a      	ldr	r1, [pc, #168]	; (8082314 <_Z10readAlpha1v+0x2ec>)
 808226a:	f00c f899 	bl	808e3a0 <__aeabi_fcmple>
 808226e:	b120      	cbz	r0, 808227a <_Z10readAlpha1v+0x252>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8082270:	4641      	mov	r1, r8
 8082272:	4658      	mov	r0, fp
 8082274:	f00b fde4 	bl	808de40 <__addsf3>
 8082278:	e7dd      	b.n	8082236 <_Z10readAlpha1v+0x20e>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 808227a:	4640      	mov	r0, r8
 808227c:	f00b fa3a 	bl	808d6f4 <__aeabi_f2d>
 8082280:	a30b      	add	r3, pc, #44	; (adr r3, 80822b0 <_Z10readAlpha1v+0x288>)
 8082282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082286:	f00b fa8d 	bl	808d7a4 <__aeabi_dmul>
 808228a:	4680      	mov	r8, r0
 808228c:	4658      	mov	r0, fp
 808228e:	4689      	mov	r9, r1
 8082290:	f00b fa30 	bl	808d6f4 <__aeabi_f2d>
 8082294:	4602      	mov	r2, r0
 8082296:	460b      	mov	r3, r1
 8082298:	4640      	mov	r0, r8
 808229a:	4649      	mov	r1, r9
 808229c:	f00b f8cc 	bl	808d438 <__adddf3>
 80822a0:	f00b fd78 	bl	808dd94 <__aeabi_d2f>
 80822a4:	e7c7      	b.n	8082236 <_Z10readAlpha1v+0x20e>
 80822a6:	bf00      	nop
 80822a8:	d4fdf3b6 	.word	0xd4fdf3b6
 80822ac:	3fd6e978 	.word	0x3fd6e978
 80822b0:	851eb852 	.word	0x851eb852
 80822b4:	3fe851eb 	.word	0x3fe851eb
 80822b8:	20000690 	.word	0x20000690
 80822bc:	080943b2 	.word	0x080943b2
 80822c0:	08091ea6 	.word	0x08091ea6
 80822c4:	08091eba 	.word	0x08091eba
 80822c8:	2000076d 	.word	0x2000076d
 80822cc:	08091f08 	.word	0x08091f08
 80822d0:	08091f2c 	.word	0x08091f2c
 80822d4:	08091e04 	.word	0x08091e04
 80822d8:	08091f3f 	.word	0x08091f3f
 80822dc:	08091f54 	.word	0x08091f54
 80822e0:	08091f61 	.word	0x08091f61
 80822e4:	08091f6e 	.word	0x08091f6e
 80822e8:	08091f7c 	.word	0x08091f7c
 80822ec:	200005d8 	.word	0x200005d8
 80822f0:	20000084 	.word	0x20000084
 80822f4:	447a0000 	.word	0x447a0000
 80822f8:	3ff40000 	.word	0x3ff40000
 80822fc:	3fe00000 	.word	0x3fe00000
 8082300:	08091edd 	.word	0x08091edd
 8082304:	08091eef 	.word	0x08091eef
 8082308:	c2f00000 	.word	0xc2f00000
 808230c:	c3160000 	.word	0xc3160000
 8082310:	41700000 	.word	0x41700000
 8082314:	41c80000 	.word	0x41c80000
 8082318:	200000c8 	.word	0x200000c8

0808231c <_Z6readCOv>:
float readCO(void){
 808231c:	b570      	push	{r4, r5, r6, lr}
    if(CO_socket == 0){
 808231e:	4b0f      	ldr	r3, [pc, #60]	; (808235c <_Z6readCOv+0x40>)
 8082320:	4c0f      	ldr	r4, [pc, #60]	; (8082360 <_Z6readCOv+0x44>)
 8082322:	681b      	ldr	r3, [r3, #0]
 8082324:	b9bb      	cbnz	r3, 8082356 <_Z6readCOv+0x3a>
        CO_float = readAlpha1();
 8082326:	f7ff fe7f 	bl	8082028 <_Z10readAlpha1v>
    float_offset = CO_zero;
 808232a:	4b0e      	ldr	r3, [pc, #56]	; (8082364 <_Z6readCOv+0x48>)
        CO_float = readAlpha2();
 808232c:	6020      	str	r0, [r4, #0]
    float_offset = CO_zero;
 808232e:	6818      	ldr	r0, [r3, #0]
 8082330:	f00b fe3a 	bl	808dfa8 <__aeabi_i2f>
    CO_float *= CO_slope;
 8082334:	4b0c      	ldr	r3, [pc, #48]	; (8082368 <_Z6readCOv+0x4c>)
    float_offset = CO_zero;
 8082336:	4606      	mov	r6, r0
    CO_float *= CO_slope;
 8082338:	6819      	ldr	r1, [r3, #0]
 808233a:	6820      	ldr	r0, [r4, #0]
 808233c:	f00b fe88 	bl	808e050 <__aeabi_fmul>
    float_offset /= 1000;
 8082340:	490a      	ldr	r1, [pc, #40]	; (808236c <_Z6readCOv+0x50>)
    CO_float *= CO_slope;
 8082342:	4605      	mov	r5, r0
    float_offset /= 1000;
 8082344:	4630      	mov	r0, r6
 8082346:	f00b ff37 	bl	808e1b8 <__aeabi_fdiv>
 808234a:	4601      	mov	r1, r0
    CO_float += float_offset;
 808234c:	4628      	mov	r0, r5
 808234e:	f00b fd77 	bl	808de40 <__addsf3>
 8082352:	6020      	str	r0, [r4, #0]
}
 8082354:	bd70      	pop	{r4, r5, r6, pc}
        CO_float = readAlpha2();
 8082356:	f7ff fb8f 	bl	8081a78 <_Z10readAlpha2v>
 808235a:	e7e6      	b.n	808232a <_Z6readCOv+0xe>
 808235c:	20000348 	.word	0x20000348
 8082360:	20000340 	.word	0x20000340
 8082364:	20000350 	.word	0x20000350
 8082368:	20000344 	.word	0x20000344
 808236c:	447a0000 	.word	0x447a0000

08082370 <_Z12sendWifiInfov>:
          }
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
 8082370:	b510      	push	{r4, lr}
 8082372:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8082374:	491d      	ldr	r1, [pc, #116]	; (80823ec <_Z12sendWifiInfov+0x7c>)
 8082376:	a808      	add	r0, sp, #32
 8082378:	f009 f8bc 	bl	808b4f4 <_ZN6StringC1EPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 808237c:	491c      	ldr	r1, [pc, #112]	; (80823f0 <_Z12sendWifiInfov+0x80>)
 808237e:	a804      	add	r0, sp, #16
 8082380:	f009 f8f7 	bl	808b572 <_ZN6StringC1ERKS_>
 8082384:	a904      	add	r1, sp, #16
 8082386:	a808      	add	r0, sp, #32
 8082388:	f009 f9d7 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 808238c:	4919      	ldr	r1, [pc, #100]	; (80823f4 <_Z12sendWifiInfov+0x84>)
 808238e:	f009 f9e0 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8082392:	4604      	mov	r4, r0
 8082394:	4918      	ldr	r1, [pc, #96]	; (80823f8 <_Z12sendWifiInfov+0x88>)
 8082396:	a80c      	add	r0, sp, #48	; 0x30
 8082398:	f009 f8eb 	bl	808b572 <_ZN6StringC1ERKS_>
 808239c:	a90c      	add	r1, sp, #48	; 0x30
 808239e:	4620      	mov	r0, r4
 80823a0:	f009 f9cb 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 80823a4:	4915      	ldr	r1, [pc, #84]	; (80823fc <_Z12sendWifiInfov+0x8c>)
 80823a6:	f009 f9d4 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 80823aa:	4601      	mov	r1, r0
 80823ac:	4668      	mov	r0, sp
 80823ae:	f009 f8e0 	bl	808b572 <_ZN6StringC1ERKS_>
 80823b2:	a80c      	add	r0, sp, #48	; 0x30
 80823b4:	f009 f854 	bl	808b460 <_ZN6StringD1Ev>
 80823b8:	a804      	add	r0, sp, #16
 80823ba:	f009 f851 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80823be:	a808      	add	r0, sp, #32
 80823c0:	f009 f84e 	bl	808b460 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 80823c4:	f00a fb76 	bl	808cab4 <_Z16_fetch_usbserialv>
 80823c8:	490d      	ldr	r1, [pc, #52]	; (8082400 <_Z12sendWifiInfov+0x90>)
 80823ca:	f009 fab8 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 80823ce:	f00a fcbb 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 80823d2:	9900      	ldr	r1, [sp, #0]
 80823d4:	f009 fab3 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 80823d8:	f00a fb6c 	bl	808cab4 <_Z16_fetch_usbserialv>
 80823dc:	4909      	ldr	r1, [pc, #36]	; (8082404 <_Z12sendWifiInfov+0x94>)
 80823de:	f009 faae 	bl	808b93e <_ZN5Print7printlnEPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 80823e2:	4668      	mov	r0, sp
 80823e4:	f009 f83c 	bl	808b460 <_ZN6StringD1Ev>
}
 80823e8:	b010      	add	sp, #64	; 0x40
 80823ea:	bd10      	pop	{r4, pc}
 80823ec:	08091f8c 	.word	0x08091f8c
 80823f0:	20000ce8 	.word	0x20000ce8
 80823f4:	080940f6 	.word	0x080940f6
 80823f8:	20000810 	.word	0x20000810
 80823fc:	08093019 	.word	0x08093019
 8082400:	08091f8f 	.word	0x08091f8f
 8082404:	08091fb3 	.word	0x08091fb3

08082408 <_Z10checkValuePcc>:
}
char checkValue(char *thebuf, char leng)  {
    char receiveflag=0;
    int receiveSum=0;

    for(int i=0; i<(leng-2); i++) {
 8082408:	2200      	movs	r2, #0
    int receiveSum=0;
 808240a:	4613      	mov	r3, r2
char checkValue(char *thebuf, char leng)  {
 808240c:	b530      	push	{r4, r5, lr}
    for(int i=0; i<(leng-2); i++) {
 808240e:	1e8d      	subs	r5, r1, #2
 8082410:	4295      	cmp	r5, r2
 8082412:	dd03      	ble.n	808241c <_Z10checkValuePcc+0x14>
      receiveSum=receiveSum+thebuf[i];
 8082414:	5c84      	ldrb	r4, [r0, r2]
    for(int i=0; i<(leng-2); i++) {
 8082416:	3201      	adds	r2, #1
      receiveSum=receiveSum+thebuf[i];
 8082418:	4423      	add	r3, r4
    for(int i=0; i<(leng-2); i++) {
 808241a:	e7f9      	b.n	8082410 <_Z10checkValuePcc+0x8>
    }
    receiveSum=receiveSum + 0x42;

    if(receiveSum == ((thebuf[leng-2]<<8)+thebuf[leng-1])) { //check the serial data
 808241c:	4408      	add	r0, r1
 808241e:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 8082422:	f810 0c01 	ldrb.w	r0, [r0, #-1]
    receiveSum=receiveSum + 0x42;
 8082426:	3342      	adds	r3, #66	; 0x42
    if(receiveSum == ((thebuf[leng-2]<<8)+thebuf[leng-1])) { //check the serial data
 8082428:	eb00 2002 	add.w	r0, r0, r2, lsl #8
      receiveSum = 0;
      receiveflag = 1;
    }
    return receiveflag;
}
 808242c:	1ac3      	subs	r3, r0, r3
 808242e:	4258      	negs	r0, r3
 8082430:	4158      	adcs	r0, r3
 8082432:	bd30      	pop	{r4, r5, pc}

08082434 <_Z13transmitPM2_5Pc>:
    int PM01Val;
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
    return PM01Val;
}
//transmit PM Value to PC
float transmitPM2_5(char *thebuf) {
 8082434:	b508      	push	{r3, lr}
    float PM2_5Val;
    PM2_5Val=((thebuf[5]<<8) + thebuf[6]);//count PM2.5 value of the air detector module
 8082436:	7942      	ldrb	r2, [r0, #5]
 8082438:	7980      	ldrb	r0, [r0, #6]
 808243a:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 808243e:	f00b fdb3 	bl	808dfa8 <__aeabi_i2f>
    return PM2_5Val;
}
 8082442:	bd08      	pop	{r3, pc}

08082444 <_Z13readPlantowerv>:
void readPlantower(void){
 8082444:	b510      	push	{r4, lr}
    if(Serial4.find("B")){    //start to read when detect 0x42
 8082446:	f7fe fce1 	bl	8080e0c <_Z22__fetch_global_Serial4v>
 808244a:	491a      	ldr	r1, [pc, #104]	; (80824b4 <_Z13readPlantowerv+0x70>)
 808244c:	f009 fc0c 	bl	808bc68 <_ZN6Stream4findEPc>
 8082450:	b310      	cbz	r0, 8082498 <_Z13readPlantowerv+0x54>
          Serial4.readBytes(buf,LENG);
 8082452:	4c19      	ldr	r4, [pc, #100]	; (80824b8 <_Z13readPlantowerv+0x74>)
 8082454:	f7fe fcda 	bl	8080e0c <_Z22__fetch_global_Serial4v>
 8082458:	221f      	movs	r2, #31
 808245a:	4621      	mov	r1, r4
 808245c:	f009 fc07 	bl	808bc6e <_ZN6Stream9readBytesEPcj>
          if(buf[0] == 0x4d){
 8082460:	7823      	ldrb	r3, [r4, #0]
 8082462:	2b4d      	cmp	r3, #77	; 0x4d
 8082464:	d117      	bne.n	8082496 <_Z13readPlantowerv+0x52>
              if(checkValue(buf,LENG)){ //All units are ug/m^3
 8082466:	211f      	movs	r1, #31
 8082468:	4620      	mov	r0, r4
 808246a:	f7ff ffcd 	bl	8082408 <_Z10checkValuePcc>
 808246e:	b190      	cbz	r0, 8082496 <_Z13readPlantowerv+0x52>
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
 8082470:	78e2      	ldrb	r2, [r4, #3]
 8082472:	7923      	ldrb	r3, [r4, #4]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 8082474:	4620      	mov	r0, r4
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
 8082476:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
 808247a:	4a10      	ldr	r2, [pc, #64]	; (80824bc <_Z13readPlantowerv+0x78>)
 808247c:	6013      	str	r3, [r2, #0]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 808247e:	f7ff ffd9 	bl	8082434 <_Z13transmitPM2_5Pc>
 8082482:	f00b ffab 	bl	808e3dc <__aeabi_f2iz>
 8082486:	4b0e      	ldr	r3, [pc, #56]	; (80824c0 <_Z13readPlantowerv+0x7c>)
//transmit PM Value to PC
int transmitPM10(char *thebuf)  {
    int PM10Val;
    PM10Val=((thebuf[7]<<8) + thebuf[8]); //count PM10 value of the air detector module
 8082488:	79e2      	ldrb	r2, [r4, #7]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 808248a:	6018      	str	r0, [r3, #0]
    PM10Val=((thebuf[7]<<8) + thebuf[8]); //count PM10 value of the air detector module
 808248c:	7a23      	ldrb	r3, [r4, #8]
 808248e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                  PM10Value=transmitPM10(buf); //count PM10 value of the air detector module
 8082492:	4a0c      	ldr	r2, [pc, #48]	; (80824c4 <_Z13readPlantowerv+0x80>)
 8082494:	6013      	str	r3, [r2, #0]
}
 8082496:	bd10      	pop	{r4, pc}
        while(Serial4.available()){
 8082498:	f7fe fcb8 	bl	8080e0c <_Z22__fetch_global_Serial4v>
 808249c:	6803      	ldr	r3, [r0, #0]
 808249e:	691b      	ldr	r3, [r3, #16]
 80824a0:	4798      	blx	r3
 80824a2:	2800      	cmp	r0, #0
 80824a4:	d0f7      	beq.n	8082496 <_Z13readPlantowerv+0x52>
            char clearBuffer = Serial4.read();
 80824a6:	f7fe fcb1 	bl	8080e0c <_Z22__fetch_global_Serial4v>
 80824aa:	6803      	ldr	r3, [r0, #0]
 80824ac:	695b      	ldr	r3, [r3, #20]
 80824ae:	4798      	blx	r3
        while(Serial4.available()){
 80824b0:	e7f2      	b.n	8082498 <_Z13readPlantowerv+0x54>
 80824b2:	bf00      	nop
 80824b4:	0809427c 	.word	0x0809427c
 80824b8:	20000664 	.word	0x20000664
 80824bc:	2000035c 	.word	0x2000035c
 80824c0:	20000364 	.word	0x20000364
 80824c4:	20000360 	.word	0x20000360

080824c8 <_Z15outputParticlesv>:
void outputParticles(){
 80824c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        float pressure_correction = bme.pressure/100;
 80824cc:	4e94      	ldr	r6, [pc, #592]	; (8082720 <_Z15outputParticlesv+0x258>)
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 80824ce:	f8df a294 	ldr.w	sl, [pc, #660]	; 8082764 <_Z15outputParticlesv+0x29c>
            pressure_correction /= SEALEVELPRESSURE_HPA;
 80824d2:	f8df b294 	ldr.w	fp, [pc, #660]	; 8082768 <_Z15outputParticlesv+0x2a0>
void outputParticles(){
 80824d6:	b0c1      	sub	sp, #260	; 0x104
    while(!Serial.available()){
 80824d8:	f00a faec 	bl	808cab4 <_Z16_fetch_usbserialv>
 80824dc:	6803      	ldr	r3, [r0, #0]
 80824de:	691b      	ldr	r3, [r3, #16]
 80824e0:	4798      	blx	r3
 80824e2:	4604      	mov	r4, r0
 80824e4:	2800      	cmp	r0, #0
 80824e6:	f040 8110 	bne.w	808270a <_Z15outputParticlesv+0x242>
        if (! bme.performReading()) {
 80824ea:	488e      	ldr	r0, [pc, #568]	; (8082724 <_Z15outputParticlesv+0x25c>)
 80824ec:	f006 fd7a 	bl	8088fe4 <_ZN15Adafruit_BME68014performReadingEv>
 80824f0:	b920      	cbnz	r0, 80824fc <_Z15outputParticlesv+0x34>
          Serial.println("Failed to read BME680");
 80824f2:	f00a fadf 	bl	808cab4 <_Z16_fetch_usbserialv>
 80824f6:	498c      	ldr	r1, [pc, #560]	; (8082728 <_Z15outputParticlesv+0x260>)
 80824f8:	f009 fa21 	bl	808b93e <_ZN5Print7printlnEPKc>
        readPlantower();
 80824fc:	f7ff ffa2 	bl	8082444 <_Z13readPlantowerv>
        readGpsStream();
 8082500:	f7ff fc4e 	bl	8081da0 <_Z13readGpsStreamv>
        CO2_float = t6713.readPPM();
 8082504:	4889      	ldr	r0, [pc, #548]	; (808272c <_Z15outputParticlesv+0x264>)
 8082506:	f005 f85b 	bl	80875c0 <_ZN13Telaire_T67137readPPMEv>
        CO2_float += CO2_zero;
 808250a:	4b89      	ldr	r3, [pc, #548]	; (8082730 <_Z15outputParticlesv+0x268>)
        CO2_float = t6713.readPPM();
 808250c:	4607      	mov	r7, r0
        CO2_float += CO2_zero;
 808250e:	6818      	ldr	r0, [r3, #0]
 8082510:	f00b fd4a 	bl	808dfa8 <__aeabi_i2f>
 8082514:	4605      	mov	r5, r0
        CO2_float = t6713.readPPM();
 8082516:	4638      	mov	r0, r7
 8082518:	f00b fd46 	bl	808dfa8 <__aeabi_i2f>
 808251c:	4601      	mov	r1, r0
        CO2_float += CO2_zero;
 808251e:	4628      	mov	r0, r5
 8082520:	f00b fc8e 	bl	808de40 <__addsf3>
        CO2_float *= CO2_slope;
 8082524:	4b83      	ldr	r3, [pc, #524]	; (8082734 <_Z15outputParticlesv+0x26c>)
 8082526:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8082760 <_Z15outputParticlesv+0x298>
 808252a:	6819      	ldr	r1, [r3, #0]
 808252c:	f00b fd90 	bl	808e050 <__aeabi_fmul>
        float pressure_correction = bme.pressure/100;
 8082530:	4b7c      	ldr	r3, [pc, #496]	; (8082724 <_Z15outputParticlesv+0x25c>)
 8082532:	4631      	mov	r1, r6
        CO2_float *= CO2_slope;
 8082534:	f8c8 0000 	str.w	r0, [r8]
 8082538:	4605      	mov	r5, r0
        float pressure_correction = bme.pressure/100;
 808253a:	6858      	ldr	r0, [r3, #4]
 808253c:	f00b fe3c 	bl	808e1b8 <__aeabi_fdiv>
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8082540:	4631      	mov	r1, r6
        float pressure_correction = bme.pressure/100;
 8082542:	4607      	mov	r7, r0
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8082544:	f00b ff40 	bl	808e3c8 <__aeabi_fcmpgt>
 8082548:	b168      	cbz	r0, 8082566 <_Z15outputParticlesv+0x9e>
 808254a:	4651      	mov	r1, sl
 808254c:	4638      	mov	r0, r7
 808254e:	f00b ff1d 	bl	808e38c <__aeabi_fcmplt>
 8082552:	b140      	cbz	r0, 8082566 <_Z15outputParticlesv+0x9e>
            pressure_correction /= SEALEVELPRESSURE_HPA;
 8082554:	4659      	mov	r1, fp
 8082556:	4638      	mov	r0, r7
 8082558:	f00b fe2e 	bl	808e1b8 <__aeabi_fdiv>
            CO2_float *= pressure_correction;
 808255c:	4629      	mov	r1, r5
 808255e:	f00b fd77 	bl	808e050 <__aeabi_fmul>
 8082562:	f8c8 0000 	str.w	r0, [r8]
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8082566:	f7ff f8d9 	bl	808171c <_Z12readHumidityv>
 808256a:	4607      	mov	r7, r0
 808256c:	f7ff f8d6 	bl	808171c <_Z12readHumidityv>
 8082570:	4631      	mov	r1, r6
 8082572:	4605      	mov	r5, r0
 8082574:	4638      	mov	r0, r7
 8082576:	f00b fe1f 	bl	808e1b8 <__aeabi_fdiv>
 808257a:	f00b f8bb 	bl	808d6f4 <__aeabi_f2d>
 808257e:	a364      	add	r3, pc, #400	; (adr r3, 8082710 <_Z15outputParticlesv+0x248>)
 8082580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082584:	f00b f90e 	bl	808d7a4 <__aeabi_dmul>
 8082588:	4680      	mov	r8, r0
 808258a:	4689      	mov	r9, r1
 808258c:	4628      	mov	r0, r5
 808258e:	4631      	mov	r1, r6
 8082590:	f00b fe12 	bl	808e1b8 <__aeabi_fdiv>
 8082594:	4601      	mov	r1, r0
 8082596:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 808259a:	f00b fc4f 	bl	808de3c <__aeabi_fsub>
 808259e:	f00b f8a9 	bl	808d6f4 <__aeabi_f2d>
 80825a2:	4602      	mov	r2, r0
 80825a4:	460b      	mov	r3, r1
 80825a6:	4640      	mov	r0, r8
 80825a8:	4649      	mov	r1, r9
 80825aa:	f00b fa25 	bl	808d9f8 <__aeabi_ddiv>
 80825ae:	a35a      	add	r3, pc, #360	; (adr r3, 8082718 <_Z15outputParticlesv+0x250>)
 80825b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80825b4:	f00a ff40 	bl	808d438 <__adddf3>
 80825b8:	f00b fbec 	bl	808dd94 <__aeabi_d2f>
 80825bc:	4605      	mov	r5, r0
 80825be:	4b5e      	ldr	r3, [pc, #376]	; (8082738 <_Z15outputParticlesv+0x270>)
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 80825c0:	4f5e      	ldr	r7, [pc, #376]	; (808273c <_Z15outputParticlesv+0x274>)
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 80825c2:	6018      	str	r0, [r3, #0]
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 80825c4:	4b5e      	ldr	r3, [pc, #376]	; (8082740 <_Z15outputParticlesv+0x278>)
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 80825c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 808276c <_Z15outputParticlesv+0x2a4>
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 80825ca:	6818      	ldr	r0, [r3, #0]
 80825cc:	f00b fcec 	bl	808dfa8 <__aeabi_i2f>
 80825d0:	4629      	mov	r1, r5
 80825d2:	f00b fd3d 	bl	808e050 <__aeabi_fmul>
            wordBytes.myWord = gps.get_latitudeWhole();
 80825d6:	4d5b      	ldr	r5, [pc, #364]	; (8082744 <_Z15outputParticlesv+0x27c>)
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 80825d8:	6038      	str	r0, [r7, #0]
        for(int i=0; i<5; i++){
 80825da:	f10d 090c 	add.w	r9, sp, #12
            ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 80825de:	2201      	movs	r2, #1
 80825e0:	f889 2000 	strb.w	r2, [r9]
            wordBytes.myWord = DEVICE_id;
 80825e4:	4a58      	ldr	r2, [pc, #352]	; (8082748 <_Z15outputParticlesv+0x280>)
 80825e6:	6812      	ldr	r2, [r2, #0]
            ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80825e8:	f889 2001 	strb.w	r2, [r9, #1]
            ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80825ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80825f0:	f889 2002 	strb.w	r2, [r9, #2]
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 80825f4:	f8d8 2000 	ldr.w	r2, [r8]
 80825f8:	f889 2003 	strb.w	r2, [r9, #3]
            if(i == 0){
 80825fc:	2c00      	cmp	r4, #0
 80825fe:	d166      	bne.n	80826ce <_Z15outputParticlesv+0x206>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8082600:	2278      	movs	r2, #120	; 0x78
                floatBytes.myFloat = fuel.getSoC();
 8082602:	4852      	ldr	r0, [pc, #328]	; (808274c <_Z15outputParticlesv+0x284>)
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8082604:	f88d 2010 	strb.w	r2, [sp, #16]
                floatBytes.myFloat = fuel.getSoC();
 8082608:	f009 fdec 	bl	808c1e4 <_ZN9FuelGauge6getSoCEv>
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 808260c:	f3c0 2207 	ubfx	r2, r0, #8, #8
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 8082610:	f889 0005 	strb.w	r0, [r9, #5]
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8082614:	f889 2006 	strb.w	r2, [r9, #6]
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8082618:	f3c0 4207 	ubfx	r2, r0, #16, #8
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 808261c:	f3c0 6007 	ubfx	r0, r0, #24, #8
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8082620:	f889 2007 	strb.w	r2, [r9, #7]
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8082624:	f889 0008 	strb.w	r0, [r9, #8]
            wordBytes.myWord = gps.get_latitudeWhole();
 8082628:	4628      	mov	r0, r5
 808262a:	f004 ff40 	bl	80874ae <_ZN3GPS17get_latitudeWholeEv>
            ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808262e:	f889 0009 	strb.w	r0, [r9, #9]
            ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082632:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8082636:	f889 000a 	strb.w	r0, [r9, #10]
            wordBytes.myWord = gps.get_latitudeFrac();
 808263a:	4628      	mov	r0, r5
 808263c:	f004 ff3a 	bl	80874b4 <_ZN3GPS16get_latitudeFracEv>
            ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082640:	f889 000b 	strb.w	r0, [r9, #11]
            ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082644:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8082648:	f889 000c 	strb.w	r0, [r9, #12]
            wordBytes.myWord = gps.get_longitudeWhole();
 808264c:	4628      	mov	r0, r5
 808264e:	f004 ff34 	bl	80874ba <_ZN3GPS18get_longitudeWholeEv>
            ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082652:	f889 000d 	strb.w	r0, [r9, #13]
            ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082656:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808265a:	f889 000e 	strb.w	r0, [r9, #14]
            wordBytes.myWord = gps.get_longitudeFrac();
 808265e:	4628      	mov	r0, r5
 8082660:	f004 ff2e 	bl	80874c0 <_ZN3GPS17get_longitudeFracEv>
            ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082664:	f889 000f 	strb.w	r0, [r9, #15]
            ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082668:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808266c:	f889 0010 	strb.w	r0, [r9, #16]
            int northSouth = gps.get_nsIndicator();
 8082670:	4628      	mov	r0, r5
 8082672:	f004 ff28 	bl	80874c6 <_ZN3GPS15get_nsIndicatorEv>
 8082676:	9001      	str	r0, [sp, #4]
            int eastWest = gps.get_ewIndicator();
 8082678:	4628      	mov	r0, r5
 808267a:	f004 ff27 	bl	80874cc <_ZN3GPS15get_ewIndicatorEv>
            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 808267e:	9a01      	ldr	r2, [sp, #4]
        for(int i=0; i<5; i++){
 8082680:	3401      	adds	r4, #1
            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8082682:	4302      	orrs	r2, r0
 8082684:	f889 2011 	strb.w	r2, [r9, #17]
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8082688:	4628      	mov	r0, r5
 808268a:	f004 ff0b 	bl	80874a4 <_ZN3GPS23get_horizontalDillutionEv>
            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 808268e:	2223      	movs	r2, #35	; 0x23
        for(int i=0; i<5; i++){
 8082690:	2c05      	cmp	r4, #5
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8082692:	f889 0012 	strb.w	r0, [r9, #18]
            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8082696:	f889 2013 	strb.w	r2, [r9, #19]
        for(int i=0; i<5; i++){
 808269a:	f109 0916 	add.w	r9, r9, #22
 808269e:	d19e      	bne.n	80825de <_Z15outputParticlesv+0x116>
        Serial1.print("$");
 80826a0:	f00a fb52 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 80826a4:	492a      	ldr	r1, [pc, #168]	; (8082750 <_Z15outputParticlesv+0x288>)
 80826a6:	f009 f937 	bl	808b918 <_ZN5Print5printEPKc>
        Serial1.write(ble_output_array, 5*BLE_PAYLOAD_SIZE);
 80826aa:	f00a fb4d 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 80826ae:	6803      	ldr	r3, [r0, #0]
 80826b0:	226e      	movs	r2, #110	; 0x6e
 80826b2:	68db      	ldr	r3, [r3, #12]
 80826b4:	a903      	add	r1, sp, #12
 80826b6:	4798      	blx	r3
        Serial1.print("&");
 80826b8:	f00a fb46 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 80826bc:	4925      	ldr	r1, [pc, #148]	; (8082754 <_Z15outputParticlesv+0x28c>)
 80826be:	f009 f92b 	bl	808b918 <_ZN5Print5printEPKc>
        sample_counter += 1;
 80826c2:	f8d8 3000 	ldr.w	r3, [r8]
 80826c6:	3301      	adds	r3, #1
 80826c8:	f8c8 3000 	str.w	r3, [r8]
    while(!Serial.available()){
 80826cc:	e704      	b.n	80824d8 <_Z15outputParticlesv+0x10>
            }else if(i == 1){
 80826ce:	2c01      	cmp	r4, #1
 80826d0:	d107      	bne.n	80826e2 <_Z15outputParticlesv+0x21a>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 80826d2:	2272      	movs	r2, #114	; 0x72
 80826d4:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                floatBytes.myFloat = PM01Value;
 80826d8:	4a1f      	ldr	r2, [pc, #124]	; (8082758 <_Z15outputParticlesv+0x290>)
                floatBytes.myFloat = PM10Value;
 80826da:	6810      	ldr	r0, [r2, #0]
 80826dc:	f00b fc64 	bl	808dfa8 <__aeabi_i2f>
 80826e0:	e794      	b.n	808260c <_Z15outputParticlesv+0x144>
            }else if(i == 2){
 80826e2:	2c02      	cmp	r4, #2
 80826e4:	d104      	bne.n	80826f0 <_Z15outputParticlesv+0x228>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 80826e6:	2252      	movs	r2, #82	; 0x52
                floatBytes.myFloat = corrected_PM_25;
 80826e8:	6838      	ldr	r0, [r7, #0]
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 80826ea:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                floatBytes.myFloat = corrected_PM_25;
 80826ee:	e78d      	b.n	808260c <_Z15outputParticlesv+0x144>
            }else if(i == 3){
 80826f0:	2c03      	cmp	r4, #3
 80826f2:	d104      	bne.n	80826fe <_Z15outputParticlesv+0x236>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 80826f4:	2271      	movs	r2, #113	; 0x71
 80826f6:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
                floatBytes.myFloat = PM10Value;
 80826fa:	4a18      	ldr	r2, [pc, #96]	; (808275c <_Z15outputParticlesv+0x294>)
 80826fc:	e7ed      	b.n	80826da <_Z15outputParticlesv+0x212>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 80826fe:	2243      	movs	r2, #67	; 0x43
                floatBytes.myFloat = CO2_float;
 8082700:	4b17      	ldr	r3, [pc, #92]	; (8082760 <_Z15outputParticlesv+0x298>)
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8082702:	f889 2004 	strb.w	r2, [r9, #4]
                floatBytes.myFloat = CO2_float;
 8082706:	6818      	ldr	r0, [r3, #0]
 8082708:	e780      	b.n	808260c <_Z15outputParticlesv+0x144>
}
 808270a:	b041      	add	sp, #260	; 0x104
 808270c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082710:	b4395810 	.word	0xb4395810
 8082714:	3fbe76c8 	.word	0x3fbe76c8
 8082718:	70a3d70a 	.word	0x70a3d70a
 808271c:	3ff30a3d 	.word	0x3ff30a3d
 8082720:	42c80000 	.word	0x42c80000
 8082724:	200005ec 	.word	0x200005ec
 8082728:	08091fbc 	.word	0x08091fbc
 808272c:	20000cfa 	.word	0x20000cfa
 8082730:	2000033c 	.word	0x2000033c
 8082734:	20000334 	.word	0x20000334
 8082738:	20000820 	.word	0x20000820
 808273c:	2000068c 	.word	0x2000068c
 8082740:	20000364 	.word	0x20000364
 8082744:	20000720 	.word	0x20000720
 8082748:	20000080 	.word	0x20000080
 808274c:	2000070c 	.word	0x2000070c
 8082750:	08091fd2 	.word	0x08091fd2
 8082754:	08093019 	.word	0x08093019
 8082758:	2000035c 	.word	0x2000035c
 808275c:	20000360 	.word	0x20000360
 8082760:	2000032c 	.word	0x2000032c
 8082764:	44bb8000 	.word	0x44bb8000
 8082768:	447d5000 	.word	0x447d5000
 808276c:	2000085c 	.word	0x2000085c

08082770 <_Z9goToSleepv>:
    return PM10Val;
}

void goToSleep(void){
 8082770:	b500      	push	{lr}
    //Serial.println("Going to sleep:)");
    digitalWrite(power_led_en, LOW);
 8082772:	4b1e      	ldr	r3, [pc, #120]	; (80827ec <_Z9goToSleepv+0x7c>)
void goToSleep(void){
 8082774:	b089      	sub	sp, #36	; 0x24
    digitalWrite(power_led_en, LOW);
 8082776:	8818      	ldrh	r0, [r3, #0]
 8082778:	2100      	movs	r1, #0
 808277a:	f00a fd60 	bl	808d23e <digitalWrite>
    digitalWrite(plantower_en, LOW);
 808277e:	4b1c      	ldr	r3, [pc, #112]	; (80827f0 <_Z9goToSleepv+0x80>)
 8082780:	2100      	movs	r1, #0
 8082782:	8818      	ldrh	r0, [r3, #0]
 8082784:	f00a fd5b 	bl	808d23e <digitalWrite>
    digitalWrite(esp_wroom_en, LOW);
 8082788:	4b1a      	ldr	r3, [pc, #104]	; (80827f4 <_Z9goToSleepv+0x84>)
 808278a:	2100      	movs	r1, #0
 808278c:	8818      	ldrh	r0, [r3, #0]
 808278e:	f00a fd56 	bl	808d23e <digitalWrite>
    digitalWrite(blower_en, LOW);
 8082792:	4b19      	ldr	r3, [pc, #100]	; (80827f8 <_Z9goToSleepv+0x88>)
 8082794:	2100      	movs	r1, #0
 8082796:	8818      	ldrh	r0, [r3, #0]
 8082798:	f00a fd51 	bl	808d23e <digitalWrite>
    digitalWrite(co2_en, LOW);
 808279c:	4b17      	ldr	r3, [pc, #92]	; (80827fc <_Z9goToSleepv+0x8c>)
 808279e:	2100      	movs	r1, #0
 80827a0:	8818      	ldrh	r0, [r3, #0]
 80827a2:	f00a fd4c 	bl	808d23e <digitalWrite>
    digitalWrite(fiveVolt_en, LOW);
 80827a6:	4b16      	ldr	r3, [pc, #88]	; (8082800 <_Z9goToSleepv+0x90>)
 80827a8:	2100      	movs	r1, #0
 80827aa:	8818      	ldrh	r0, [r3, #0]
 80827ac:	f00a fd47 	bl	808d23e <digitalWrite>
    enableLowPowerGPS();
 80827b0:	f7fe ff28 	bl	8081604 <_Z17enableLowPowerGPSv>
    System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
 80827b4:	2104      	movs	r1, #4
 80827b6:	4b13      	ldr	r3, [pc, #76]	; (8082804 <_Z9goToSleepv+0x94>)
 80827b8:	4a13      	ldr	r2, [pc, #76]	; (8082808 <_Z9goToSleepv+0x98>)
 80827ba:	681b      	ldr	r3, [r3, #0]
 80827bc:	6812      	ldr	r2, [r2, #0]
 80827be:	005b      	lsls	r3, r3, #1
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
 80827c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80827c4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80827c8:	2201      	movs	r2, #1
 80827ca:	2102      	movs	r1, #2
 80827cc:	9200      	str	r2, [sp, #0]
 80827ce:	f88d 1015 	strb.w	r1, [sp, #21]
 80827d2:	f10d 0315 	add.w	r3, sp, #21
 80827d6:	f10d 0116 	add.w	r1, sp, #22
 80827da:	a806      	add	r0, sp, #24
 80827dc:	f008 fcfc 	bl	808b1d8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.reset();
 80827e0:	f008 fce0 	bl	808b1a4 <_ZN11SystemClass5resetEv>
}
 80827e4:	b009      	add	sp, #36	; 0x24
 80827e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80827ea:	bf00      	nop
 80827ec:	200000d4 	.word	0x200000d4
 80827f0:	200000d0 	.word	0x200000d0
 80827f4:	20000090 	.word	0x20000090
 80827f8:	20000088 	.word	0x20000088
 80827fc:	2000008c 	.word	0x2000008c
 8082800:	20000094 	.word	0x20000094
 8082804:	200000d8 	.word	0x200000d8
 8082808:	20000394 	.word	0x20000394

0808280c <_Z16goToSleepBatteryv>:

void goToSleepBattery(void){
 808280c:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 808280e:	4c2c      	ldr	r4, [pc, #176]	; (80828c0 <_Z16goToSleepBatteryv+0xb4>)
 8082810:	2101      	movs	r1, #1
 8082812:	8820      	ldrh	r0, [r4, #0]
 8082814:	f00a fd13 	bl	808d23e <digitalWrite>
    delay(250);                   // waits for a second
 8082818:	20fa      	movs	r0, #250	; 0xfa
 808281a:	f009 fc59 	bl	808c0d0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808281e:	2100      	movs	r1, #0
 8082820:	8820      	ldrh	r0, [r4, #0]
 8082822:	f00a fd0c 	bl	808d23e <digitalWrite>
    delay(250);                   // waits for a second
 8082826:	20fa      	movs	r0, #250	; 0xfa
 8082828:	f009 fc52 	bl	808c0d0 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 808282c:	2101      	movs	r1, #1
 808282e:	8820      	ldrh	r0, [r4, #0]
 8082830:	f00a fd05 	bl	808d23e <digitalWrite>
    delay(250);                   // waits for a second
 8082834:	20fa      	movs	r0, #250	; 0xfa
 8082836:	f009 fc4b 	bl	808c0d0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808283a:	2100      	movs	r1, #0
 808283c:	8820      	ldrh	r0, [r4, #0]
 808283e:	f00a fcfe 	bl	808d23e <digitalWrite>
    delay(250);                   // waits for a second
 8082842:	20fa      	movs	r0, #250	; 0xfa
 8082844:	f009 fc44 	bl	808c0d0 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8082848:	2101      	movs	r1, #1
 808284a:	8820      	ldrh	r0, [r4, #0]
 808284c:	f00a fcf7 	bl	808d23e <digitalWrite>
    delay(250);                   // waits for a second
 8082850:	20fa      	movs	r0, #250	; 0xfa
 8082852:	f009 fc3d 	bl	808c0d0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082856:	2100      	movs	r1, #0
 8082858:	8820      	ldrh	r0, [r4, #0]
 808285a:	f00a fcf0 	bl	808d23e <digitalWrite>
    delay(250);                   // waits for a second
 808285e:	20fa      	movs	r0, #250	; 0xfa
 8082860:	f009 fc36 	bl	808c0d0 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082864:	2101      	movs	r1, #1
 8082866:	8820      	ldrh	r0, [r4, #0]
 8082868:	f00a fce9 	bl	808d23e <digitalWrite>
    delay(250);                   // waits for a second
 808286c:	20fa      	movs	r0, #250	; 0xfa
 808286e:	f009 fc2f 	bl	808c0d0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082872:	2100      	movs	r1, #0
 8082874:	8820      	ldrh	r0, [r4, #0]
 8082876:	f00a fce2 	bl	808d23e <digitalWrite>
    delay(250);                   // waits for a second
 808287a:	20fa      	movs	r0, #250	; 0xfa
 808287c:	f009 fc28 	bl	808c0d0 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082880:	2101      	movs	r1, #1
 8082882:	8820      	ldrh	r0, [r4, #0]
 8082884:	f00a fcdb 	bl	808d23e <digitalWrite>
    delay(250);                   // waits for a second
 8082888:	20fa      	movs	r0, #250	; 0xfa
 808288a:	f009 fc21 	bl	808c0d0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808288e:	2100      	movs	r1, #0
 8082890:	8820      	ldrh	r0, [r4, #0]
 8082892:	f00a fcd4 	bl	808d23e <digitalWrite>
    delay(250);                   // waits for a second
 8082896:	20fa      	movs	r0, #250	; 0xfa
 8082898:	f009 fc1a 	bl	808c0d0 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 808289c:	2101      	movs	r1, #1
 808289e:	8820      	ldrh	r0, [r4, #0]
 80828a0:	f00a fccd 	bl	808d23e <digitalWrite>
    delay(250);                   // waits for a second
 80828a4:	20fa      	movs	r0, #250	; 0xfa
 80828a6:	f009 fc13 	bl	808c0d0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80828aa:	8820      	ldrh	r0, [r4, #0]
 80828ac:	2100      	movs	r1, #0
 80828ae:	f00a fcc6 	bl	808d23e <digitalWrite>
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}
 80828b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeRegister(7, 0b01101011);   //turn off batfet
 80828b6:	216b      	movs	r1, #107	; 0x6b
 80828b8:	2007      	movs	r0, #7
 80828ba:	f7fe bb49 	b.w	8080f50 <_Z13writeRegisterhh>
 80828be:	bf00      	nop
 80828c0:	200000d4 	.word	0x200000d4

080828c4 <_Z8resetESPv>:

void resetESP(void){
 80828c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(esp_wroom_en, LOW);
 80828c6:	4f17      	ldr	r7, [pc, #92]	; (8082924 <_Z8resetESPv+0x60>)
  digitalWrite(plantower_en, LOW);
 80828c8:	4e17      	ldr	r6, [pc, #92]	; (8082928 <_Z8resetESPv+0x64>)
  digitalWrite(esp_wroom_en, LOW);
 80828ca:	8838      	ldrh	r0, [r7, #0]
  digitalWrite(blower_en, LOW);
 80828cc:	4d17      	ldr	r5, [pc, #92]	; (808292c <_Z8resetESPv+0x68>)
  digitalWrite(esp_wroom_en, LOW);
 80828ce:	2100      	movs	r1, #0
 80828d0:	f00a fcb5 	bl	808d23e <digitalWrite>
  digitalWrite(co2_en, LOW);
 80828d4:	4c16      	ldr	r4, [pc, #88]	; (8082930 <_Z8resetESPv+0x6c>)
  digitalWrite(plantower_en, LOW);
 80828d6:	8830      	ldrh	r0, [r6, #0]
 80828d8:	2100      	movs	r1, #0
 80828da:	f00a fcb0 	bl	808d23e <digitalWrite>
  digitalWrite(blower_en, LOW);
 80828de:	8828      	ldrh	r0, [r5, #0]
 80828e0:	2100      	movs	r1, #0
 80828e2:	f00a fcac 	bl	808d23e <digitalWrite>
  digitalWrite(co2_en, LOW);
 80828e6:	2100      	movs	r1, #0
 80828e8:	8820      	ldrh	r0, [r4, #0]
 80828ea:	f00a fca8 	bl	808d23e <digitalWrite>
  delay(1000);
 80828ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80828f2:	f009 fbed 	bl	808c0d0 <delay>
  digitalWrite(esp_wroom_en, HIGH);
 80828f6:	8838      	ldrh	r0, [r7, #0]
 80828f8:	2101      	movs	r1, #1
 80828fa:	f00a fca0 	bl	808d23e <digitalWrite>
  digitalWrite(plantower_en, HIGH);
 80828fe:	8830      	ldrh	r0, [r6, #0]
 8082900:	2101      	movs	r1, #1
 8082902:	f00a fc9c 	bl	808d23e <digitalWrite>
  digitalWrite(blower_en, HIGH);
 8082906:	8828      	ldrh	r0, [r5, #0]
 8082908:	2101      	movs	r1, #1
 808290a:	f00a fc98 	bl	808d23e <digitalWrite>
  digitalWrite(co2_en, HIGH);
 808290e:	8820      	ldrh	r0, [r4, #0]
 8082910:	2101      	movs	r1, #1
 8082912:	f00a fc94 	bl	808d23e <digitalWrite>
  delay(1000);
}
 8082916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
 808291a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808291e:	f009 bbd7 	b.w	808c0d0 <delay>
 8082922:	bf00      	nop
 8082924:	20000090 	.word	0x20000090
 8082928:	200000d0 	.word	0x200000d0
 808292c:	20000088 	.word	0x20000088
 8082930:	2000008c 	.word	0x2000008c

08082934 <_Z26serialIncreaseInputCurrentv>:
    Serial.println("failed writing string");
  }

}

void serialIncreaseInputCurrent(void){
 8082934:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8082936:	481d      	ldr	r0, [pc, #116]	; (80829ac <_Z26serialIncreaseInputCurrentv+0x78>)
 8082938:	f008 fa12 	bl	808ad60 <_ZN4PMIC20getInputCurrentLimitEv>
 808293c:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 808293e:	f00a f8b9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082942:	462a      	mov	r2, r5
 8082944:	491a      	ldr	r1, [pc, #104]	; (80829b0 <_Z26serialIncreaseInputCurrentv+0x7c>)
 8082946:	f7fe f993 	bl	8080c70 <_ZN5Print6printfEPKcz>

    if(inputCurrent == 100){
 808294a:	2d64      	cmp	r5, #100	; 0x64
 808294c:	d01f      	beq.n	808298e <_Z26serialIncreaseInputCurrentv+0x5a>
        inputCurrent = 150;
    }else if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 150){
 808294e:	2d96      	cmp	r5, #150	; 0x96
 8082950:	d01f      	beq.n	8082992 <_Z26serialIncreaseInputCurrentv+0x5e>
        inputCurrent = 500;
    }else if(inputCurrent == 500){
 8082952:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8082956:	d01f      	beq.n	8082998 <_Z26serialIncreaseInputCurrentv+0x64>
        inputCurrent = 900;
    }else if(inputCurrent == 900){
 8082958:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 808295c:	d01f      	beq.n	808299e <_Z26serialIncreaseInputCurrentv+0x6a>
        inputCurrent = 1200;
    }else if(inputCurrent == 1200){
 808295e:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8082962:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8082966:	d007      	beq.n	8082978 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
 8082968:	42a5      	cmp	r5, r4
 808296a:	d01b      	beq.n	80829a4 <_Z26serialIncreaseInputCurrentv+0x70>
        inputCurrent = 2000;
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
 808296c:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8082970:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8082974:	bf18      	it	ne
 8082976:	462c      	movne	r4, r5
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 8082978:	b2a1      	uxth	r1, r4
 808297a:	480c      	ldr	r0, [pc, #48]	; (80829ac <_Z26serialIncreaseInputCurrentv+0x78>)
 808297c:	f008 fa31 	bl	808ade2 <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 8082980:	f00a f898 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082984:	4622      	mov	r2, r4
 8082986:	490b      	ldr	r1, [pc, #44]	; (80829b4 <_Z26serialIncreaseInputCurrentv+0x80>)
 8082988:	f7fe f972 	bl	8080c70 <_ZN5Print6printfEPKcz>
}
 808298c:	bd38      	pop	{r3, r4, r5, pc}
        inputCurrent = 150;
 808298e:	2496      	movs	r4, #150	; 0x96
 8082990:	e7f2      	b.n	8082978 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 500;
 8082992:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8082996:	e7ef      	b.n	8082978 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 900;
 8082998:	f44f 7461 	mov.w	r4, #900	; 0x384
 808299c:	e7ec      	b.n	8082978 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 1200;
 808299e:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 80829a2:	e7e9      	b.n	8082978 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 2000;
 80829a4:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80829a8:	e7e6      	b.n	8082978 <_Z26serialIncreaseInputCurrentv+0x44>
 80829aa:	bf00      	nop
 80829ac:	20000824 	.word	0x20000824
 80829b0:	08091fd4 	.word	0x08091fd4
 80829b4:	08091ff2 	.word	0x08091ff2

080829b8 <_Z27serialIncreaseChargeCurrentv>:

void serialIncreaseChargeCurrent(void){
 80829b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 80829ba:	482d      	ldr	r0, [pc, #180]	; (8082a70 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 80829bc:	f008 f9dc 	bl	808ad78 <_ZN4PMIC16getChargeCurrentEv>
    //bit 7
    if(chargeCurrent & 0x80){
        total_current += 2048;
 80829c0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80829c4:	bf14      	ite	ne
 80829c6:	f44f 6500 	movne.w	r5, #2048	; 0x800
 80829ca:	2500      	moveq	r5, #0
    byte chargeCurrent = pmic.getChargeCurrent();
 80829cc:	4604      	mov	r4, r0
    }
    //bit 6
    if(chargeCurrent & 0x40){
 80829ce:	0643      	lsls	r3, r0, #25
        total_current += 1024;
 80829d0:	bf48      	it	mi
 80829d2:	f505 6580 	addmi.w	r5, r5, #1024	; 0x400
    }
    //bit 5
    if(chargeCurrent & 0x20){
 80829d6:	0686      	lsls	r6, r0, #26
        total_current += 512;
 80829d8:	bf48      	it	mi
 80829da:	f505 7500 	addmi.w	r5, r5, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 80829de:	06e0      	lsls	r0, r4, #27
        total_current += 256;
 80829e0:	bf48      	it	mi
 80829e2:	f505 7580 	addmi.w	r5, r5, #256	; 0x100
    }
    //bit 3
    if(chargeCurrent & 0x08){
 80829e6:	0721      	lsls	r1, r4, #28
        total_current += 128;
 80829e8:	bf48      	it	mi
 80829ea:	3580      	addmi	r5, #128	; 0x80
    }
    //bit 2
    if(chargeCurrent & 0x04){
 80829ec:	0762      	lsls	r2, r4, #29
        total_current += 64;
 80829ee:	bf48      	it	mi
 80829f0:	3540      	addmi	r5, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 80829f2:	f00a f85f 	bl	808cab4 <_Z16_fetch_usbserialv>
 80829f6:	462a      	mov	r2, r5
 80829f8:	491e      	ldr	r1, [pc, #120]	; (8082a74 <_Z27serialIncreaseChargeCurrentv+0xbc>)
 80829fa:	f7fe f939 	bl	8080c70 <_ZN5Print6printfEPKcz>
    chargeCurrent += 4;
 80829fe:	1d20      	adds	r0, r4, #4
    total_current = 0;

    if(chargeCurrent & 0x80){
 8082a00:	0603      	lsls	r3, r0, #24
    bool bit7 = 0;
 8082a02:	bf56      	itet	pl
 8082a04:	2100      	movpl	r1, #0
        total_current += 2048;
 8082a06:	f44f 6500 	movmi.w	r5, #2048	; 0x800
    total_current = 0;
 8082a0a:	460d      	movpl	r5, r1
    chargeCurrent += 4;
 8082a0c:	b2c4      	uxtb	r4, r0
        bit7 = 1;
 8082a0e:	bf48      	it	mi
 8082a10:	2101      	movmi	r1, #1
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8082a12:	f014 0240 	ands.w	r2, r4, #64	; 0x40
        total_current += 1024;
 8082a16:	bf1c      	itt	ne
 8082a18:	f505 6580 	addne.w	r5, r5, #1024	; 0x400
        bit6 = 1;
 8082a1c:	2201      	movne	r2, #1
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8082a1e:	f014 0320 	ands.w	r3, r4, #32
        total_current += 512;
        bit5 = 1;
 8082a22:	bf1c      	itt	ne
 8082a24:	2301      	movne	r3, #1
        total_current += 512;
 8082a26:	f505 7500 	addne.w	r5, r5, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8082a2a:	f014 0010 	ands.w	r0, r4, #16
        total_current += 256;
 8082a2e:	bf1c      	itt	ne
 8082a30:	f505 7580 	addne.w	r5, r5, #256	; 0x100
        bit4 = 1;
 8082a34:	2001      	movne	r0, #1
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8082a36:	f014 0608 	ands.w	r6, r4, #8
        total_current += 128;
 8082a3a:	bf1c      	itt	ne
 8082a3c:	3580      	addne	r5, #128	; 0x80
        bit3 = 1;
 8082a3e:	2601      	movne	r6, #1
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8082a40:	f014 0404 	ands.w	r4, r4, #4
        total_current += 64;
        bit2 = 1;
 8082a44:	bf18      	it	ne
 8082a46:	2401      	movne	r4, #1
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8082a48:	9000      	str	r0, [sp, #0]
 8082a4a:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8082a4e:	4808      	ldr	r0, [pc, #32]	; (8082a70 <_Z27serialIncreaseChargeCurrentv+0xb8>)
        total_current += 64;
 8082a50:	bf18      	it	ne
 8082a52:	3540      	addne	r5, #64	; 0x40
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8082a54:	f008 fa23 	bl	808ae9e <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8082a58:	4805      	ldr	r0, [pc, #20]	; (8082a70 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 8082a5a:	f008 f98d 	bl	808ad78 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8082a5e:	f00a f829 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082a62:	462a      	mov	r2, r5
 8082a64:	4904      	ldr	r1, [pc, #16]	; (8082a78 <_Z27serialIncreaseChargeCurrentv+0xc0>)
 8082a66:	f7fe f903 	bl	8080c70 <_ZN5Print6printfEPKcz>
}
 8082a6a:	b004      	add	sp, #16
 8082a6c:	bd70      	pop	{r4, r5, r6, pc}
 8082a6e:	bf00      	nop
 8082a70:	20000824 	.word	0x20000824
 8082a74:	08092010 	.word	0x08092010
 8082a78:	08092039 	.word	0x08092039

08082a7c <_Z24serialGetWifiCredentialsv>:

void serialGetWifiCredentials(void){
 8082a7c:	b530      	push	{r4, r5, lr}
        operator const char*() const { return c_str(); }
 8082a7e:	4d5a      	ldr	r5, [pc, #360]	; (8082be8 <_Z24serialGetWifiCredentialsv+0x16c>)
 8082a80:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 8082a82:	f00a f817 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082a86:	4959      	ldr	r1, [pc, #356]	; (8082bec <_Z24serialGetWifiCredentialsv+0x170>)
 8082a88:	f008 ff46 	bl	808b918 <_ZN5Print5printEPKc>
 8082a8c:	4c58      	ldr	r4, [pc, #352]	; (8082bf0 <_Z24serialGetWifiCredentialsv+0x174>)
    Serial.println(ssid);
 8082a8e:	f00a f811 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082a92:	6829      	ldr	r1, [r5, #0]
 8082a94:	f008 ff53 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082a98:	f00a f80c 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082a9c:	4955      	ldr	r1, [pc, #340]	; (8082bf4 <_Z24serialGetWifiCredentialsv+0x178>)
 8082a9e:	f008 ff3b 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.println(password);
 8082aa2:	f00a f807 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082aa6:	6821      	ldr	r1, [r4, #0]
 8082aa8:	f008 ff49 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 8082aac:	f00a f802 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082ab0:	4951      	ldr	r1, [pc, #324]	; (8082bf8 <_Z24serialGetWifiCredentialsv+0x17c>)
 8082ab2:	f008 ff44 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082ab6:	f009 fffd 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082aba:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082abe:	f009 f891 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082ac2:	f009 fff7 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082ac6:	220d      	movs	r2, #13
 8082ac8:	4601      	mov	r1, r0
 8082aca:	4668      	mov	r0, sp
 8082acc:	f009 f8f4 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    if(tempString.equals("bould")){
 8082ad0:	4668      	mov	r0, sp
 8082ad2:	494a      	ldr	r1, [pc, #296]	; (8082bfc <_Z24serialGetWifiCredentialsv+0x180>)
 8082ad4:	f008 fe65 	bl	808b7a2 <_ZNK6String6equalsEPKc>
 8082ad8:	2800      	cmp	r0, #0
 8082ada:	d074      	beq.n	8082bc6 <_Z24serialGetWifiCredentialsv+0x14a>
        Serial.println("Password correct!");
 8082adc:	f009 ffea 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082ae0:	4947      	ldr	r1, [pc, #284]	; (8082c00 <_Z24serialGetWifiCredentialsv+0x184>)
 8082ae2:	f008 ff2c 	bl	808b93e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 8082ae6:	f009 ffe5 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082aea:	4946      	ldr	r1, [pc, #280]	; (8082c04 <_Z24serialGetWifiCredentialsv+0x188>)
 8082aec:	f008 ff27 	bl	808b93e <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 8082af0:	f009 ffe0 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082af4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082af8:	f009 f874 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 8082afc:	f009 ffda 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b00:	220d      	movs	r2, #13
 8082b02:	4601      	mov	r1, r0
 8082b04:	a804      	add	r0, sp, #16
 8082b06:	f009 f8d7 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 8082b0a:	f009 ffd3 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b0e:	493e      	ldr	r1, [pc, #248]	; (8082c08 <_Z24serialGetWifiCredentialsv+0x18c>)
 8082b10:	f008 ff02 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 8082b14:	f009 ffce 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b18:	9904      	ldr	r1, [sp, #16]
 8082b1a:	f008 ff10 	bl	808b93e <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8082b1e:	f009 ffc9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b22:	493a      	ldr	r1, [pc, #232]	; (8082c0c <_Z24serialGetWifiCredentialsv+0x190>)
 8082b24:	f008 ff0b 	bl	808b93e <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 8082b28:	f009 ffc4 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b2c:	220d      	movs	r2, #13
 8082b2e:	4601      	mov	r1, r0
 8082b30:	a808      	add	r0, sp, #32
 8082b32:	f009 f8c1 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
        if(ok.equals("y")){
 8082b36:	4936      	ldr	r1, [pc, #216]	; (8082c10 <_Z24serialGetWifiCredentialsv+0x194>)
 8082b38:	a808      	add	r0, sp, #32
 8082b3a:	f008 fe32 	bl	808b7a2 <_ZNK6String6equalsEPKc>
 8082b3e:	2800      	cmp	r0, #0
 8082b40:	d04c      	beq.n	8082bdc <_Z24serialGetWifiCredentialsv+0x160>
            Serial.println("Saving new ssid");
 8082b42:	f009 ffb7 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b46:	4933      	ldr	r1, [pc, #204]	; (8082c14 <_Z24serialGetWifiCredentialsv+0x198>)
 8082b48:	f008 fef9 	bl	808b93e <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082b4c:	a904      	add	r1, sp, #16
 8082b4e:	4628      	mov	r0, r5
 8082b50:	f008 fd00 	bl	808b554 <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8082b54:	f009 ffae 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b58:	492f      	ldr	r1, [pc, #188]	; (8082c18 <_Z24serialGetWifiCredentialsv+0x19c>)
 8082b5a:	f008 fef0 	bl	808b93e <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082b5e:	f009 ffa9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b62:	220d      	movs	r2, #13
 8082b64:	4601      	mov	r1, r0
 8082b66:	a80c      	add	r0, sp, #48	; 0x30
 8082b68:	f009 f8a6 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 8082b6c:	f009 ffa2 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b70:	492a      	ldr	r1, [pc, #168]	; (8082c1c <_Z24serialGetWifiCredentialsv+0x1a0>)
 8082b72:	f008 fed1 	bl	808b918 <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 8082b76:	f009 ff9d 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082b7c:	f008 fedf 	bl	808b93e <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 8082b80:	f009 ff98 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b84:	220d      	movs	r2, #13
 8082b86:	4601      	mov	r1, r0
 8082b88:	a810      	add	r0, sp, #64	; 0x40
 8082b8a:	f009 f895 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
            if(ok.equals("y")){
 8082b8e:	4920      	ldr	r1, [pc, #128]	; (8082c10 <_Z24serialGetWifiCredentialsv+0x194>)
 8082b90:	a810      	add	r0, sp, #64	; 0x40
 8082b92:	f008 fe06 	bl	808b7a2 <_ZNK6String6equalsEPKc>
 8082b96:	b1d8      	cbz	r0, 8082bd0 <_Z24serialGetWifiCredentialsv+0x154>
                Serial.println("Saving new password");
 8082b98:	f009 ff8c 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082b9c:	4920      	ldr	r1, [pc, #128]	; (8082c20 <_Z24serialGetWifiCredentialsv+0x1a4>)
 8082b9e:	f008 fece 	bl	808b93e <_ZN5Print7printlnEPKc>
                password = tempPassword;
 8082ba2:	a90c      	add	r1, sp, #48	; 0x30
 8082ba4:	4620      	mov	r0, r4
 8082ba6:	f008 fcd5 	bl	808b554 <_ZN6StringaSERKS_>
                sendWifiInfo();
 8082baa:	f7ff fbe1 	bl	8082370 <_Z12sendWifiInfov>
            String ok = Serial.readStringUntil('\r');
 8082bae:	a810      	add	r0, sp, #64	; 0x40
 8082bb0:	f008 fc56 	bl	808b460 <_ZN6StringD1Ev>
            String tempPassword = Serial.readStringUntil('\r');
 8082bb4:	a80c      	add	r0, sp, #48	; 0x30
 8082bb6:	f008 fc53 	bl	808b460 <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
 8082bba:	a808      	add	r0, sp, #32
 8082bbc:	f008 fc50 	bl	808b460 <_ZN6StringD1Ev>
        String tempSsid = Serial.readStringUntil('\r');
 8082bc0:	a804      	add	r0, sp, #16
 8082bc2:	f008 fc4d 	bl	808b460 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8082bc6:	4668      	mov	r0, sp
 8082bc8:	f008 fc4a 	bl	808b460 <_ZN6StringD1Ev>
        }else{
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 8082bcc:	b015      	add	sp, #84	; 0x54
 8082bce:	bd30      	pop	{r4, r5, pc}
                Serial.println("okay, no problem\n\r");
 8082bd0:	f009 ff70 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082bd4:	4913      	ldr	r1, [pc, #76]	; (8082c24 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082bd6:	f008 feb2 	bl	808b93e <_ZN5Print7printlnEPKc>
 8082bda:	e7e8      	b.n	8082bae <_Z24serialGetWifiCredentialsv+0x132>
            Serial.println("okay, no problem\n\r");
 8082bdc:	f009 ff6a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082be0:	4910      	ldr	r1, [pc, #64]	; (8082c24 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082be2:	f008 feac 	bl	808b93e <_ZN5Print7printlnEPKc>
 8082be6:	e7e8      	b.n	8082bba <_Z24serialGetWifiCredentialsv+0x13e>
 8082be8:	20000ce8 	.word	0x20000ce8
 8082bec:	08092057 	.word	0x08092057
 8082bf0:	20000810 	.word	0x20000810
 8082bf4:	0809206d 	.word	0x0809206d
 8082bf8:	08092087 	.word	0x08092087
 8082bfc:	080920b9 	.word	0x080920b9
 8082c00:	080920bf 	.word	0x080920bf
 8082c04:	080920d1 	.word	0x080920d1
 8082c08:	080920e1 	.word	0x080920e1
 8082c0c:	080920f9 	.word	0x080920f9
 8082c10:	080947be 	.word	0x080947be
 8082c14:	0809210f 	.word	0x0809210f
 8082c18:	0809211f 	.word	0x0809211f
 8082c1c:	08092132 	.word	0x08092132
 8082c20:	0809214e 	.word	0x0809214e
 8082c24:	08092162 	.word	0x08092162

08082c28 <_Z26serialSetSensibleIotEnablev>:
void serialSetSensibleIotEnable(void){
 8082c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 8082c2a:	f009 ff43 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082c2e:	4919      	ldr	r1, [pc, #100]	; (8082c94 <_Z26serialSetSensibleIotEnablev+0x6c>)
 8082c30:	f008 fe85 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082c34:	f009 ff3e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082c38:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082c3c:	f008 ffd2 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082c40:	f009 ff38 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082c44:	220d      	movs	r2, #13
 8082c46:	4601      	mov	r1, r0
 8082c48:	4668      	mov	r0, sp
 8082c4a:	f009 f835 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082c4e:	4668      	mov	r0, sp
 8082c50:	4911      	ldr	r1, [pc, #68]	; (8082c98 <_Z26serialSetSensibleIotEnablev+0x70>)
 8082c52:	f008 fda6 	bl	808b7a2 <_ZNK6String6equalsEPKc>
    if(tempString == "imsensible"){
 8082c56:	b1b8      	cbz	r0, 8082c88 <_Z26serialSetSensibleIotEnablev+0x60>
        Serial.println("Password correct!");
 8082c58:	f009 ff2c 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082c5c:	490f      	ldr	r1, [pc, #60]	; (8082c9c <_Z26serialSetSensibleIotEnablev+0x74>)
 8082c5e:	f008 fe6e 	bl	808b93e <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
 8082c62:	f009 ff27 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082c66:	490e      	ldr	r1, [pc, #56]	; (8082ca0 <_Z26serialSetSensibleIotEnablev+0x78>)
 8082c68:	f008 fe69 	bl	808b93e <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082c6c:	2301      	movs	r3, #1
 8082c6e:	4c0d      	ldr	r4, [pc, #52]	; (8082ca4 <_Z26serialSetSensibleIotEnablev+0x7c>)
 8082c70:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8082c72:	f00a fb27 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8082c76:	4621      	mov	r1, r4
 8082c78:	208c      	movs	r0, #140	; 0x8c
 8082c7a:	f7fd ffc7 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082c7e:	4668      	mov	r0, sp
 8082c80:	f008 fbee 	bl	808b460 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082c84:	b004      	add	sp, #16
 8082c86:	bd10      	pop	{r4, pc}
        Serial.println("\n\rIncorrect password!");
 8082c88:	f009 ff14 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082c8c:	4906      	ldr	r1, [pc, #24]	; (8082ca8 <_Z26serialSetSensibleIotEnablev+0x80>)
 8082c8e:	f008 fe56 	bl	808b93e <_ZN5Print7printlnEPKc>
 8082c92:	e7f4      	b.n	8082c7e <_Z26serialSetSensibleIotEnablev+0x56>
 8082c94:	08092175 	.word	0x08092175
 8082c98:	080921b8 	.word	0x080921b8
 8082c9c:	080920bf 	.word	0x080920bf
 8082ca0:	080921c3 	.word	0x080921c3
 8082ca4:	20000cd8 	.word	0x20000cd8
 8082ca8:	080921e4 	.word	0x080921e4

08082cac <_Z19serialResetSettingsv>:
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}

void serialResetSettings(void){
 8082cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    Serial.println();
 8082cae:	f009 ff01 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082cb2:	f008 fe38 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8082cb6:	f009 fefd 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082cba:	4914      	ldr	r1, [pc, #80]	; (8082d0c <_Z19serialResetSettingsv+0x60>)
 8082cbc:	f008 fe3f 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082cc0:	f009 fef8 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082cc4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082cc8:	f008 ff8c 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082ccc:	f009 fef2 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082cd0:	220d      	movs	r2, #13
 8082cd2:	4601      	mov	r1, r0
 8082cd4:	4668      	mov	r0, sp
 8082cd6:	f008 ffef 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
 8082cda:	4668      	mov	r0, sp
 8082cdc:	490c      	ldr	r1, [pc, #48]	; (8082d10 <_Z19serialResetSettingsv+0x64>)
 8082cde:	f008 fd60 	bl	808b7a2 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8082ce2:	b160      	cbz	r0, 8082cfe <_Z19serialResetSettingsv+0x52>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8082ce4:	f009 fee6 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082ce8:	490a      	ldr	r1, [pc, #40]	; (8082d14 <_Z19serialResetSettingsv+0x68>)
 8082cea:	f008 fe28 	bl	808b93e <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 8082cee:	f7fe f94b 	bl	8080f88 <_Z20writeDefaultSettingsv>
    String tempString = Serial.readStringUntil('\r');
 8082cf2:	4668      	mov	r0, sp
 8082cf4:	f008 fbb4 	bl	808b460 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082cf8:	b005      	add	sp, #20
 8082cfa:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rIncorrect password!");
 8082cfe:	f009 fed9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082d02:	4905      	ldr	r1, [pc, #20]	; (8082d18 <_Z19serialResetSettingsv+0x6c>)
 8082d04:	f008 fe1b 	bl	808b93e <_ZN5Print7printlnEPKc>
 8082d08:	e7f3      	b.n	8082cf2 <_Z19serialResetSettingsv+0x46>
 8082d0a:	bf00      	nop
 8082d0c:	080921fa 	.word	0x080921fa
 8082d10:	080920b9 	.word	0x080920b9
 8082d14:	08092233 	.word	0x08092233
 8082d18:	080921e4 	.word	0x080921e4

08082d1c <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void){
 8082d1c:	b510      	push	{r4, lr}
 8082d1e:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8082d20:	f009 fec8 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082d24:	4920      	ldr	r1, [pc, #128]	; (8082da8 <_Z17serialGetTimeDatev+0x8c>)
 8082d26:	f008 fe0a 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082d2a:	f009 fec3 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082d2e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082d32:	f008 ff57 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082d36:	f009 febd 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082d3a:	220d      	movs	r2, #13
 8082d3c:	4601      	mov	r1, r0
 8082d3e:	4668      	mov	r0, sp
 8082d40:	f008 ffba 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082d44:	4668      	mov	r0, sp
 8082d46:	f008 fd99 	bl	808b87c <_ZNK6String5toIntEv>
 8082d4a:	4604      	mov	r4, r0
    Serial.println("");
 8082d4c:	f009 feb2 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082d50:	4916      	ldr	r1, [pc, #88]	; (8082dac <_Z17serialGetTimeDatev+0x90>)
 8082d52:	f008 fdf4 	bl	808b93e <_ZN5Print7printlnEPKc>
    if(tempValue > 966012661 && tempValue < 4121686261){       //min is the year 2000, max is the year 2100
 8082d56:	4b16      	ldr	r3, [pc, #88]	; (8082db0 <_Z17serialGetTimeDatev+0x94>)
 8082d58:	429c      	cmp	r4, r3
 8082d5a:	dd1e      	ble.n	8082d9a <_Z17serialGetTimeDatev+0x7e>
        Time.setTime(tempValue);
 8082d5c:	17e1      	asrs	r1, r4, #31
 8082d5e:	4620      	mov	r0, r4
 8082d60:	f009 f83e 	bl	808bde0 <_ZN9TimeClass7setTimeEx>
        Serial.print("\n\rNew Device Time:");
 8082d64:	f009 fea6 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082d68:	4912      	ldr	r1, [pc, #72]	; (8082db4 <_Z17serialGetTimeDatev+0x98>)
 8082d6a:	f008 fdd5 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 8082d6e:	f009 fea1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082d72:	4604      	mov	r4, r0
 8082d74:	f009 f94b 	bl	808c00e <_ZN9TimeClass3nowEv>
 8082d78:	4602      	mov	r2, r0
 8082d7a:	17c3      	asrs	r3, r0, #31
 8082d7c:	a804      	add	r0, sp, #16
 8082d7e:	f009 f843 	bl	808be08 <_ZN9TimeClass7timeStrEx>
 8082d82:	4620      	mov	r0, r4
 8082d84:	9904      	ldr	r1, [sp, #16]
 8082d86:	f008 fdda 	bl	808b93e <_ZN5Print7printlnEPKc>
 8082d8a:	a804      	add	r0, sp, #16
 8082d8c:	f008 fb68 	bl	808b460 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8082d90:	4668      	mov	r0, sp
 8082d92:	f008 fb65 	bl	808b460 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082d96:	b008      	add	sp, #32
 8082d98:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8082d9a:	f009 fe8b 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082d9e:	4906      	ldr	r1, [pc, #24]	; (8082db8 <_Z17serialGetTimeDatev+0x9c>)
 8082da0:	f008 fdcd 	bl	808b93e <_ZN5Print7printlnEPKc>
 8082da4:	e7f4      	b.n	8082d90 <_Z17serialGetTimeDatev+0x74>
 8082da6:	bf00      	nop
 8082da8:	080922a2 	.word	0x080922a2
 8082dac:	080943b2 	.word	0x080943b2
 8082db0:	39942ef5 	.word	0x39942ef5
 8082db4:	080922dd 	.word	0x080922dd
 8082db8:	080922f0 	.word	0x080922f0

08082dbc <_Z17serialGetCo2Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Slope(void){
 8082dbc:	b530      	push	{r4, r5, lr}
 8082dbe:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8082dc0:	f009 fe78 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082dc4:	f008 fdaf 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 8082dc8:	f009 fe74 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082dcc:	4932      	ldr	r1, [pc, #200]	; (8082e98 <_Z17serialGetCo2Slopev+0xdc>)
 8082dce:	f008 fda3 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 8082dd2:	f009 fe6f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082dd6:	4604      	mov	r4, r0
 8082dd8:	4d30      	ldr	r5, [pc, #192]	; (8082e9c <_Z17serialGetCo2Slopev+0xe0>)
 8082dda:	2202      	movs	r2, #2
 8082ddc:	6829      	ldr	r1, [r5, #0]
 8082dde:	a806      	add	r0, sp, #24
 8082de0:	f008 fc22 	bl	808b628 <_ZN6StringC1Efi>
 8082de4:	9906      	ldr	r1, [sp, #24]
 8082de6:	4620      	mov	r0, r4
 8082de8:	f008 fd96 	bl	808b918 <_ZN5Print5printEPKc>
 8082dec:	a806      	add	r0, sp, #24
 8082dee:	f008 fb37 	bl	808b460 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082df2:	f009 fe5f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082df6:	492a      	ldr	r1, [pc, #168]	; (8082ea0 <_Z17serialGetCo2Slopev+0xe4>)
 8082df8:	f008 fda1 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 8082dfc:	f009 fe5a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082e00:	4928      	ldr	r1, [pc, #160]	; (8082ea4 <_Z17serialGetCo2Slopev+0xe8>)
 8082e02:	f008 fd89 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082e06:	f009 fe55 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082e0a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082e0e:	f008 fee9 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082e12:	f009 fe4f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082e16:	220d      	movs	r2, #13
 8082e18:	4601      	mov	r1, r0
 8082e1a:	a802      	add	r0, sp, #8
 8082e1c:	f008 ff4c 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082e20:	a802      	add	r0, sp, #8
 8082e22:	f008 fd30 	bl	808b886 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8082e26:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082e2a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8082e2c:	f00b fac2 	bl	808e3b4 <__aeabi_fcmpge>
 8082e30:	b358      	cbz	r0, 8082e8a <_Z17serialGetCo2Slopev+0xce>
 8082e32:	4620      	mov	r0, r4
 8082e34:	491c      	ldr	r1, [pc, #112]	; (8082ea8 <_Z17serialGetCo2Slopev+0xec>)
 8082e36:	f00b faa9 	bl	808e38c <__aeabi_fcmplt>
 8082e3a:	b330      	cbz	r0, 8082e8a <_Z17serialGetCo2Slopev+0xce>
        CO2_slope = tempfloat;
        tempfloat *= 100;
 8082e3c:	491b      	ldr	r1, [pc, #108]	; (8082eac <_Z17serialGetCo2Slopev+0xf0>)
 8082e3e:	4620      	mov	r0, r4
        CO2_slope = tempfloat;
 8082e40:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082e42:	f00b f905 	bl	808e050 <__aeabi_fmul>
        tempValue = tempfloat;
 8082e46:	f00b fac9 	bl	808e3dc <__aeabi_f2iz>
 8082e4a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8082e4c:	f009 fe32 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082e50:	4917      	ldr	r1, [pc, #92]	; (8082eb0 <_Z17serialGetCo2Slopev+0xf4>)
 8082e52:	f008 fd61 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope,2));
 8082e56:	f009 fe2d 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082e5a:	4604      	mov	r4, r0
 8082e5c:	2202      	movs	r2, #2
 8082e5e:	6829      	ldr	r1, [r5, #0]
 8082e60:	a806      	add	r0, sp, #24
 8082e62:	f008 fbe1 	bl	808b628 <_ZN6StringC1Efi>
 8082e66:	9906      	ldr	r1, [sp, #24]
 8082e68:	4620      	mov	r0, r4
 8082e6a:	f008 fd68 	bl	808b93e <_ZN5Print7printlnEPKc>
 8082e6e:	a806      	add	r0, sp, #24
 8082e70:	f008 faf6 	bl	808b460 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8082e74:	f00a fa26 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8082e78:	2008      	movs	r0, #8
 8082e7a:	a901      	add	r1, sp, #4
 8082e7c:	f7fd fec6 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082e80:	a802      	add	r0, sp, #8
 8082e82:	f008 faed 	bl	808b460 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082e86:	b00b      	add	sp, #44	; 0x2c
 8082e88:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082e8a:	f009 fe13 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082e8e:	4909      	ldr	r1, [pc, #36]	; (8082eb4 <_Z17serialGetCo2Slopev+0xf8>)
 8082e90:	f008 fd55 	bl	808b93e <_ZN5Print7printlnEPKc>
 8082e94:	e7f4      	b.n	8082e80 <_Z17serialGetCo2Slopev+0xc4>
 8082e96:	bf00      	nop
 8082e98:	08092301 	.word	0x08092301
 8082e9c:	20000334 	.word	0x20000334
 8082ea0:	08092314 	.word	0x08092314
 8082ea4:	08092319 	.word	0x08092319
 8082ea8:	41200000 	.word	0x41200000
 8082eac:	42c80000 	.word	0x42c80000
 8082eb0:	0809232f 	.word	0x0809232f
 8082eb4:	080922f0 	.word	0x080922f0

08082eb8 <_Z16serialGetCoSlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoSlope(void){
 8082eb8:	b530      	push	{r4, r5, lr}
 8082eba:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8082ebc:	f009 fdfa 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082ec0:	f008 fd31 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 8082ec4:	f009 fdf6 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082ec8:	4937      	ldr	r1, [pc, #220]	; (8082fa8 <_Z16serialGetCoSlopev+0xf0>)
 8082eca:	f008 fd25 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(String(CO_slope, 2));
 8082ece:	f009 fdf1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082ed2:	4604      	mov	r4, r0
 8082ed4:	4d35      	ldr	r5, [pc, #212]	; (8082fac <_Z16serialGetCoSlopev+0xf4>)
 8082ed6:	2202      	movs	r2, #2
 8082ed8:	6829      	ldr	r1, [r5, #0]
 8082eda:	a806      	add	r0, sp, #24
 8082edc:	f008 fba4 	bl	808b628 <_ZN6StringC1Efi>
 8082ee0:	9906      	ldr	r1, [sp, #24]
 8082ee2:	4620      	mov	r0, r4
 8082ee4:	f008 fd18 	bl	808b918 <_ZN5Print5printEPKc>
 8082ee8:	a806      	add	r0, sp, #24
 8082eea:	f008 fab9 	bl	808b460 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082eee:	f009 fde1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082ef2:	492f      	ldr	r1, [pc, #188]	; (8082fb0 <_Z16serialGetCoSlopev+0xf8>)
 8082ef4:	f008 fd23 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8082ef8:	f009 fddc 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082efc:	492d      	ldr	r1, [pc, #180]	; (8082fb4 <_Z16serialGetCoSlopev+0xfc>)
 8082efe:	f008 fd0b 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082f02:	f009 fdd7 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082f06:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082f0a:	f008 fe6b 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082f0e:	f009 fdd1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082f12:	220d      	movs	r2, #13
 8082f14:	4601      	mov	r1, r0
 8082f16:	a802      	add	r0, sp, #8
 8082f18:	f008 fece 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082f1c:	a802      	add	r0, sp, #8
 8082f1e:	f008 fcb2 	bl	808b886 <_ZNK6String7toFloatEv>
 8082f22:	4604      	mov	r4, r0
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
 8082f24:	f00a fbe6 	bl	808d6f4 <__aeabi_f2d>
 8082f28:	a31d      	add	r3, pc, #116	; (adr r3, 8082fa0 <_Z16serialGetCoSlopev+0xe8>)
 8082f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082f2e:	f00a febf 	bl	808dcb0 <__aeabi_dcmpge>
 8082f32:	b360      	cbz	r0, 8082f8e <_Z16serialGetCoSlopev+0xd6>
 8082f34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8082f38:	4620      	mov	r0, r4
 8082f3a:	f00b fa27 	bl	808e38c <__aeabi_fcmplt>
 8082f3e:	b330      	cbz	r0, 8082f8e <_Z16serialGetCoSlopev+0xd6>
        CO_slope = tempfloat;
        tempfloat *= 100;
 8082f40:	491d      	ldr	r1, [pc, #116]	; (8082fb8 <_Z16serialGetCoSlopev+0x100>)
 8082f42:	4620      	mov	r0, r4
        CO_slope = tempfloat;
 8082f44:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082f46:	f00b f883 	bl	808e050 <__aeabi_fmul>
        tempValue = tempfloat;
 8082f4a:	f00b fa47 	bl	808e3dc <__aeabi_f2iz>
 8082f4e:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO slope: ");
 8082f50:	f009 fdb0 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082f54:	4919      	ldr	r1, [pc, #100]	; (8082fbc <_Z16serialGetCoSlopev+0x104>)
 8082f56:	f008 fcdf 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(String(CO_slope,2));
 8082f5a:	f009 fdab 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082f5e:	4604      	mov	r4, r0
 8082f60:	2202      	movs	r2, #2
 8082f62:	6829      	ldr	r1, [r5, #0]
 8082f64:	a806      	add	r0, sp, #24
 8082f66:	f008 fb5f 	bl	808b628 <_ZN6StringC1Efi>
 8082f6a:	9906      	ldr	r1, [sp, #24]
 8082f6c:	4620      	mov	r0, r4
 8082f6e:	f008 fce6 	bl	808b93e <_ZN5Print7printlnEPKc>
 8082f72:	a806      	add	r0, sp, #24
 8082f74:	f008 fa74 	bl	808b460 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_MEM_ADDRESS, tempValue);
 8082f78:	f00a f9a4 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8082f7c:	2010      	movs	r0, #16
 8082f7e:	a901      	add	r1, sp, #4
 8082f80:	f7fd fe44 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082f84:	a802      	add	r0, sp, #8
 8082f86:	f008 fa6b 	bl	808b460 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082f8a:	b00b      	add	sp, #44	; 0x2c
 8082f8c:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082f8e:	f009 fd91 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082f92:	490b      	ldr	r1, [pc, #44]	; (8082fc0 <_Z16serialGetCoSlopev+0x108>)
 8082f94:	f008 fcd3 	bl	808b93e <_ZN5Print7printlnEPKc>
 8082f98:	e7f4      	b.n	8082f84 <_Z16serialGetCoSlopev+0xcc>
 8082f9a:	bf00      	nop
 8082f9c:	f3af 8000 	nop.w
 8082fa0:	9999999a 	.word	0x9999999a
 8082fa4:	3fb99999 	.word	0x3fb99999
 8082fa8:	08092341 	.word	0x08092341
 8082fac:	20000344 	.word	0x20000344
 8082fb0:	08092314 	.word	0x08092314
 8082fb4:	08092353 	.word	0x08092353
 8082fb8:	42c80000 	.word	0x42c80000
 8082fbc:	08092368 	.word	0x08092368
 8082fc0:	080922f0 	.word	0x080922f0

08082fc4 <_Z17serialGetPm1Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm1Slope(void){
 8082fc4:	b530      	push	{r4, r5, lr}
 8082fc6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082fc8:	f009 fd74 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082fcc:	f008 fcab 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 8082fd0:	f009 fd70 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082fd4:	4932      	ldr	r1, [pc, #200]	; (80830a0 <_Z17serialGetPm1Slopev+0xdc>)
 8082fd6:	f008 fc9f 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 8082fda:	f009 fd6b 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082fde:	4604      	mov	r4, r0
 8082fe0:	4d30      	ldr	r5, [pc, #192]	; (80830a4 <_Z17serialGetPm1Slopev+0xe0>)
 8082fe2:	2202      	movs	r2, #2
 8082fe4:	6829      	ldr	r1, [r5, #0]
 8082fe6:	a806      	add	r0, sp, #24
 8082fe8:	f008 fb1e 	bl	808b628 <_ZN6StringC1Efi>
 8082fec:	9906      	ldr	r1, [sp, #24]
 8082fee:	4620      	mov	r0, r4
 8082ff0:	f008 fc92 	bl	808b918 <_ZN5Print5printEPKc>
 8082ff4:	a806      	add	r0, sp, #24
 8082ff6:	f008 fa33 	bl	808b460 <_ZN6StringD1Ev>
    Serial.println(" ");
 8082ffa:	f009 fd5b 	bl	808cab4 <_Z16_fetch_usbserialv>
 8082ffe:	492a      	ldr	r1, [pc, #168]	; (80830a8 <_Z17serialGetPm1Slopev+0xe4>)
 8083000:	f008 fc9d 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 8083004:	f009 fd56 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083008:	4928      	ldr	r1, [pc, #160]	; (80830ac <_Z17serialGetPm1Slopev+0xe8>)
 808300a:	f008 fc85 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808300e:	f009 fd51 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083012:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083016:	f008 fde5 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808301a:	f009 fd4b 	bl	808cab4 <_Z16_fetch_usbserialv>
 808301e:	220d      	movs	r2, #13
 8083020:	4601      	mov	r1, r0
 8083022:	a802      	add	r0, sp, #8
 8083024:	f008 fe48 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083028:	a802      	add	r0, sp, #8
 808302a:	f008 fc2c 	bl	808b886 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808302e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8083032:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083034:	f00b f9be 	bl	808e3b4 <__aeabi_fcmpge>
 8083038:	b360      	cbz	r0, 8083094 <_Z17serialGetPm1Slopev+0xd0>
 808303a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808303e:	4620      	mov	r0, r4
 8083040:	f00b f9a4 	bl	808e38c <__aeabi_fcmplt>
 8083044:	b330      	cbz	r0, 8083094 <_Z17serialGetPm1Slopev+0xd0>
        PM_1_slope = tempfloat;
        tempfloat *= 100;
 8083046:	491a      	ldr	r1, [pc, #104]	; (80830b0 <_Z17serialGetPm1Slopev+0xec>)
 8083048:	4620      	mov	r0, r4
        PM_1_slope = tempfloat;
 808304a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 808304c:	f00b f800 	bl	808e050 <__aeabi_fmul>
        tempValue = tempfloat;
 8083050:	f00b f9c4 	bl	808e3dc <__aeabi_f2iz>
 8083054:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 8083056:	f009 fd2d 	bl	808cab4 <_Z16_fetch_usbserialv>
 808305a:	4916      	ldr	r1, [pc, #88]	; (80830b4 <_Z17serialGetPm1Slopev+0xf0>)
 808305c:	f008 fc5c 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 8083060:	f009 fd28 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083064:	4604      	mov	r4, r0
 8083066:	2202      	movs	r2, #2
 8083068:	6829      	ldr	r1, [r5, #0]
 808306a:	a806      	add	r0, sp, #24
 808306c:	f008 fadc 	bl	808b628 <_ZN6StringC1Efi>
 8083070:	9906      	ldr	r1, [sp, #24]
 8083072:	4620      	mov	r0, r4
 8083074:	f008 fc63 	bl	808b93e <_ZN5Print7printlnEPKc>
 8083078:	a806      	add	r0, sp, #24
 808307a:	f008 f9f1 	bl	808b460 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 808307e:	f00a f921 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8083082:	2018      	movs	r0, #24
 8083084:	a901      	add	r1, sp, #4
 8083086:	f7fd fdc1 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 808308a:	a802      	add	r0, sp, #8
 808308c:	f008 f9e8 	bl	808b460 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083090:	b00b      	add	sp, #44	; 0x2c
 8083092:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8083094:	f009 fd0e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083098:	4907      	ldr	r1, [pc, #28]	; (80830b8 <_Z17serialGetPm1Slopev+0xf4>)
 808309a:	f008 fc50 	bl	808b93e <_ZN5Print7printlnEPKc>
 808309e:	e7f4      	b.n	808308a <_Z17serialGetPm1Slopev+0xc6>
 80830a0:	08092379 	.word	0x08092379
 80830a4:	20000370 	.word	0x20000370
 80830a8:	08093d04 	.word	0x08093d04
 80830ac:	0809238c 	.word	0x0809238c
 80830b0:	42c80000 	.word	0x42c80000
 80830b4:	080923a2 	.word	0x080923a2
 80830b8:	080922f0 	.word	0x080922f0

080830bc <_Z18serialGetPm25Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm25Slope(void){
 80830bc:	b530      	push	{r4, r5, lr}
 80830be:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80830c0:	f009 fcf8 	bl	808cab4 <_Z16_fetch_usbserialv>
 80830c4:	f008 fc2f 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 80830c8:	f009 fcf4 	bl	808cab4 <_Z16_fetch_usbserialv>
 80830cc:	4932      	ldr	r1, [pc, #200]	; (8083198 <_Z18serialGetPm25Slopev+0xdc>)
 80830ce:	f008 fc23 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 80830d2:	f009 fcef 	bl	808cab4 <_Z16_fetch_usbserialv>
 80830d6:	4604      	mov	r4, r0
 80830d8:	4d30      	ldr	r5, [pc, #192]	; (808319c <_Z18serialGetPm25Slopev+0xe0>)
 80830da:	2202      	movs	r2, #2
 80830dc:	6829      	ldr	r1, [r5, #0]
 80830de:	a806      	add	r0, sp, #24
 80830e0:	f008 faa2 	bl	808b628 <_ZN6StringC1Efi>
 80830e4:	9906      	ldr	r1, [sp, #24]
 80830e6:	4620      	mov	r0, r4
 80830e8:	f008 fc16 	bl	808b918 <_ZN5Print5printEPKc>
 80830ec:	a806      	add	r0, sp, #24
 80830ee:	f008 f9b7 	bl	808b460 <_ZN6StringD1Ev>
    Serial.println(" ");
 80830f2:	f009 fcdf 	bl	808cab4 <_Z16_fetch_usbserialv>
 80830f6:	492a      	ldr	r1, [pc, #168]	; (80831a0 <_Z18serialGetPm25Slopev+0xe4>)
 80830f8:	f008 fc21 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 80830fc:	f009 fcda 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083100:	4928      	ldr	r1, [pc, #160]	; (80831a4 <_Z18serialGetPm25Slopev+0xe8>)
 8083102:	f008 fc09 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083106:	f009 fcd5 	bl	808cab4 <_Z16_fetch_usbserialv>
 808310a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808310e:	f008 fd69 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083112:	f009 fccf 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083116:	220d      	movs	r2, #13
 8083118:	4601      	mov	r1, r0
 808311a:	a802      	add	r0, sp, #8
 808311c:	f008 fdcc 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083120:	a802      	add	r0, sp, #8
 8083122:	f008 fbb0 	bl	808b886 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083126:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 808312a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808312c:	f00b f942 	bl	808e3b4 <__aeabi_fcmpge>
 8083130:	b360      	cbz	r0, 808318c <_Z18serialGetPm25Slopev+0xd0>
 8083132:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083136:	4620      	mov	r0, r4
 8083138:	f00b f928 	bl	808e38c <__aeabi_fcmplt>
 808313c:	b330      	cbz	r0, 808318c <_Z18serialGetPm25Slopev+0xd0>
        PM_25_slope = tempfloat;
        tempfloat *= 100;
 808313e:	491a      	ldr	r1, [pc, #104]	; (80831a8 <_Z18serialGetPm25Slopev+0xec>)
 8083140:	4620      	mov	r0, r4
        PM_25_slope = tempfloat;
 8083142:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8083144:	f00a ff84 	bl	808e050 <__aeabi_fmul>
        tempValue = tempfloat;
 8083148:	f00b f948 	bl	808e3dc <__aeabi_f2iz>
 808314c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 808314e:	f009 fcb1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083152:	4916      	ldr	r1, [pc, #88]	; (80831ac <_Z18serialGetPm25Slopev+0xf0>)
 8083154:	f008 fbe0 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope,2));
 8083158:	f009 fcac 	bl	808cab4 <_Z16_fetch_usbserialv>
 808315c:	4604      	mov	r4, r0
 808315e:	2202      	movs	r2, #2
 8083160:	6829      	ldr	r1, [r5, #0]
 8083162:	a806      	add	r0, sp, #24
 8083164:	f008 fa60 	bl	808b628 <_ZN6StringC1Efi>
 8083168:	9906      	ldr	r1, [sp, #24]
 808316a:	4620      	mov	r0, r4
 808316c:	f008 fbe7 	bl	808b93e <_ZN5Print7printlnEPKc>
 8083170:	a806      	add	r0, sp, #24
 8083172:	f008 f975 	bl	808b460 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8083176:	f00a f8a5 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808317a:	2020      	movs	r0, #32
 808317c:	a901      	add	r1, sp, #4
 808317e:	f7fd fd45 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083182:	a802      	add	r0, sp, #8
 8083184:	f008 f96c 	bl	808b460 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083188:	b00b      	add	sp, #44	; 0x2c
 808318a:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 808318c:	f009 fc92 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083190:	4907      	ldr	r1, [pc, #28]	; (80831b0 <_Z18serialGetPm25Slopev+0xf4>)
 8083192:	f008 fbd4 	bl	808b93e <_ZN5Print7printlnEPKc>
 8083196:	e7f4      	b.n	8083182 <_Z18serialGetPm25Slopev+0xc6>
 8083198:	080923b4 	.word	0x080923b4
 808319c:	20000378 	.word	0x20000378
 80831a0:	08093d04 	.word	0x08093d04
 80831a4:	080923c9 	.word	0x080923c9
 80831a8:	42c80000 	.word	0x42c80000
 80831ac:	080923e1 	.word	0x080923e1
 80831b0:	080922f0 	.word	0x080922f0

080831b4 <_Z18serialGetPm10Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm10Slope(void){
 80831b4:	b530      	push	{r4, r5, lr}
 80831b6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80831b8:	f009 fc7c 	bl	808cab4 <_Z16_fetch_usbserialv>
 80831bc:	f008 fbb3 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 80831c0:	f009 fc78 	bl	808cab4 <_Z16_fetch_usbserialv>
 80831c4:	4932      	ldr	r1, [pc, #200]	; (8083290 <_Z18serialGetPm10Slopev+0xdc>)
 80831c6:	f008 fba7 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 80831ca:	f009 fc73 	bl	808cab4 <_Z16_fetch_usbserialv>
 80831ce:	4604      	mov	r4, r0
 80831d0:	4d30      	ldr	r5, [pc, #192]	; (8083294 <_Z18serialGetPm10Slopev+0xe0>)
 80831d2:	2202      	movs	r2, #2
 80831d4:	6829      	ldr	r1, [r5, #0]
 80831d6:	a806      	add	r0, sp, #24
 80831d8:	f008 fa26 	bl	808b628 <_ZN6StringC1Efi>
 80831dc:	9906      	ldr	r1, [sp, #24]
 80831de:	4620      	mov	r0, r4
 80831e0:	f008 fb9a 	bl	808b918 <_ZN5Print5printEPKc>
 80831e4:	a806      	add	r0, sp, #24
 80831e6:	f008 f93b 	bl	808b460 <_ZN6StringD1Ev>
    Serial.println(" ");
 80831ea:	f009 fc63 	bl	808cab4 <_Z16_fetch_usbserialv>
 80831ee:	492a      	ldr	r1, [pc, #168]	; (8083298 <_Z18serialGetPm10Slopev+0xe4>)
 80831f0:	f008 fba5 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 80831f4:	f009 fc5e 	bl	808cab4 <_Z16_fetch_usbserialv>
 80831f8:	4928      	ldr	r1, [pc, #160]	; (808329c <_Z18serialGetPm10Slopev+0xe8>)
 80831fa:	f008 fb8d 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80831fe:	f009 fc59 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083202:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083206:	f008 fced 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808320a:	f009 fc53 	bl	808cab4 <_Z16_fetch_usbserialv>
 808320e:	220d      	movs	r2, #13
 8083210:	4601      	mov	r1, r0
 8083212:	a802      	add	r0, sp, #8
 8083214:	f008 fd50 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083218:	a802      	add	r0, sp, #8
 808321a:	f008 fb34 	bl	808b886 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808321e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8083222:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083224:	f00b f8c6 	bl	808e3b4 <__aeabi_fcmpge>
 8083228:	b360      	cbz	r0, 8083284 <_Z18serialGetPm10Slopev+0xd0>
 808322a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808322e:	4620      	mov	r0, r4
 8083230:	f00b f8ac 	bl	808e38c <__aeabi_fcmplt>
 8083234:	b330      	cbz	r0, 8083284 <_Z18serialGetPm10Slopev+0xd0>
        PM_10_slope = tempfloat;
        tempfloat *= 100;
 8083236:	491a      	ldr	r1, [pc, #104]	; (80832a0 <_Z18serialGetPm10Slopev+0xec>)
 8083238:	4620      	mov	r0, r4
        PM_10_slope = tempfloat;
 808323a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 808323c:	f00a ff08 	bl	808e050 <__aeabi_fmul>
        tempValue = tempfloat;
 8083240:	f00b f8cc 	bl	808e3dc <__aeabi_f2iz>
 8083244:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 8083246:	f009 fc35 	bl	808cab4 <_Z16_fetch_usbserialv>
 808324a:	4916      	ldr	r1, [pc, #88]	; (80832a4 <_Z18serialGetPm10Slopev+0xf0>)
 808324c:	f008 fb64 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope,2));
 8083250:	f009 fc30 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083254:	4604      	mov	r4, r0
 8083256:	2202      	movs	r2, #2
 8083258:	6829      	ldr	r1, [r5, #0]
 808325a:	a806      	add	r0, sp, #24
 808325c:	f008 f9e4 	bl	808b628 <_ZN6StringC1Efi>
 8083260:	9906      	ldr	r1, [sp, #24]
 8083262:	4620      	mov	r0, r4
 8083264:	f008 fb6b 	bl	808b93e <_ZN5Print7printlnEPKc>
 8083268:	a806      	add	r0, sp, #24
 808326a:	f008 f8f9 	bl	808b460 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 808326e:	f00a f829 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8083272:	2028      	movs	r0, #40	; 0x28
 8083274:	a901      	add	r1, sp, #4
 8083276:	f7fd fcc9 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 808327a:	a802      	add	r0, sp, #8
 808327c:	f008 f8f0 	bl	808b460 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083280:	b00b      	add	sp, #44	; 0x2c
 8083282:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8083284:	f009 fc16 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083288:	4907      	ldr	r1, [pc, #28]	; (80832a8 <_Z18serialGetPm10Slopev+0xf4>)
 808328a:	f008 fb58 	bl	808b93e <_ZN5Print7printlnEPKc>
 808328e:	e7f4      	b.n	808327a <_Z18serialGetPm10Slopev+0xc6>
 8083290:	080923f5 	.word	0x080923f5
 8083294:	20000368 	.word	0x20000368
 8083298:	08093d04 	.word	0x08093d04
 808329c:	08092409 	.word	0x08092409
 80832a0:	42c80000 	.word	0x42c80000
 80832a4:	08092420 	.word	0x08092420
 80832a8:	080922f0 	.word	0x080922f0

080832ac <_Z25serialGetTemperatureSlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetTemperatureSlope(void){
 80832ac:	b530      	push	{r4, r5, lr}
 80832ae:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80832b0:	f009 fc00 	bl	808cab4 <_Z16_fetch_usbserialv>
 80832b4:	f008 fb37 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 80832b8:	f009 fbfc 	bl	808cab4 <_Z16_fetch_usbserialv>
 80832bc:	4932      	ldr	r1, [pc, #200]	; (8083388 <_Z25serialGetTemperatureSlopev+0xdc>)
 80832be:	f008 fb2b 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 80832c2:	f009 fbf7 	bl	808cab4 <_Z16_fetch_usbserialv>
 80832c6:	4604      	mov	r4, r0
 80832c8:	4d30      	ldr	r5, [pc, #192]	; (808338c <_Z25serialGetTemperatureSlopev+0xe0>)
 80832ca:	2202      	movs	r2, #2
 80832cc:	6829      	ldr	r1, [r5, #0]
 80832ce:	a806      	add	r0, sp, #24
 80832d0:	f008 f9aa 	bl	808b628 <_ZN6StringC1Efi>
 80832d4:	9906      	ldr	r1, [sp, #24]
 80832d6:	4620      	mov	r0, r4
 80832d8:	f008 fb1e 	bl	808b918 <_ZN5Print5printEPKc>
 80832dc:	a806      	add	r0, sp, #24
 80832de:	f008 f8bf 	bl	808b460 <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 80832e2:	f009 fbe7 	bl	808cab4 <_Z16_fetch_usbserialv>
 80832e6:	492a      	ldr	r1, [pc, #168]	; (8083390 <_Z25serialGetTemperatureSlopev+0xe4>)
 80832e8:	f008 fb29 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 80832ec:	f009 fbe2 	bl	808cab4 <_Z16_fetch_usbserialv>
 80832f0:	4928      	ldr	r1, [pc, #160]	; (8083394 <_Z25serialGetTemperatureSlopev+0xe8>)
 80832f2:	f008 fb11 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80832f6:	f009 fbdd 	bl	808cab4 <_Z16_fetch_usbserialv>
 80832fa:	f24c 3150 	movw	r1, #50000	; 0xc350
 80832fe:	f008 fc71 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083302:	f009 fbd7 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083306:	220d      	movs	r2, #13
 8083308:	4601      	mov	r1, r0
 808330a:	a802      	add	r0, sp, #8
 808330c:	f008 fcd4 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083310:	a802      	add	r0, sp, #8
 8083312:	f008 fab8 	bl	808b886 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083316:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 808331a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808331c:	f00b f84a 	bl	808e3b4 <__aeabi_fcmpge>
 8083320:	b360      	cbz	r0, 808337c <_Z25serialGetTemperatureSlopev+0xd0>
 8083322:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083326:	4620      	mov	r0, r4
 8083328:	f00b f830 	bl	808e38c <__aeabi_fcmplt>
 808332c:	b330      	cbz	r0, 808337c <_Z25serialGetTemperatureSlopev+0xd0>
        temp_slope = tempfloat;
        tempfloat *= 100;
 808332e:	491a      	ldr	r1, [pc, #104]	; (8083398 <_Z25serialGetTemperatureSlopev+0xec>)
 8083330:	4620      	mov	r0, r4
        temp_slope = tempfloat;
 8083332:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8083334:	f00a fe8c 	bl	808e050 <__aeabi_fmul>
        tempValue = tempfloat;
 8083338:	f00b f850 	bl	808e3dc <__aeabi_f2iz>
 808333c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 808333e:	f009 fbb9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083342:	4916      	ldr	r1, [pc, #88]	; (808339c <_Z25serialGetTemperatureSlopev+0xf0>)
 8083344:	f008 fae8 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope,2));
 8083348:	f009 fbb4 	bl	808cab4 <_Z16_fetch_usbserialv>
 808334c:	4604      	mov	r4, r0
 808334e:	2202      	movs	r2, #2
 8083350:	6829      	ldr	r1, [r5, #0]
 8083352:	a806      	add	r0, sp, #24
 8083354:	f008 f968 	bl	808b628 <_ZN6StringC1Efi>
 8083358:	9906      	ldr	r1, [sp, #24]
 808335a:	4620      	mov	r0, r4
 808335c:	f008 faef 	bl	808b93e <_ZN5Print7printlnEPKc>
 8083360:	a806      	add	r0, sp, #24
 8083362:	f008 f87d 	bl	808b460 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 8083366:	f009 ffad 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808336a:	2030      	movs	r0, #48	; 0x30
 808336c:	a901      	add	r1, sp, #4
 808336e:	f7fd fc4d 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083372:	a802      	add	r0, sp, #8
 8083374:	f008 f874 	bl	808b460 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083378:	b00b      	add	sp, #44	; 0x2c
 808337a:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 808337c:	f009 fb9a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083380:	4907      	ldr	r1, [pc, #28]	; (80833a0 <_Z25serialGetTemperatureSlopev+0xf4>)
 8083382:	f008 fadc 	bl	808b93e <_ZN5Print7printlnEPKc>
 8083386:	e7f4      	b.n	8083372 <_Z25serialGetTemperatureSlopev+0xc6>
 8083388:	08092433 	.word	0x08092433
 808338c:	20000d00 	.word	0x20000d00
 8083390:	0809244e 	.word	0x0809244e
 8083394:	08092459 	.word	0x08092459
 8083398:	42c80000 	.word	0x42c80000
 808339c:	08092477 	.word	0x08092477
 80833a0:	080922f0 	.word	0x080922f0

080833a4 <_Z22serialGetPressureSlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureSlope(void){
 80833a4:	b530      	push	{r4, r5, lr}
 80833a6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80833a8:	f009 fb84 	bl	808cab4 <_Z16_fetch_usbserialv>
 80833ac:	f008 fabb 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 80833b0:	f009 fb80 	bl	808cab4 <_Z16_fetch_usbserialv>
 80833b4:	4932      	ldr	r1, [pc, #200]	; (8083480 <_Z22serialGetPressureSlopev+0xdc>)
 80833b6:	f008 faaf 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 80833ba:	f009 fb7b 	bl	808cab4 <_Z16_fetch_usbserialv>
 80833be:	4604      	mov	r4, r0
 80833c0:	4d30      	ldr	r5, [pc, #192]	; (8083484 <_Z22serialGetPressureSlopev+0xe0>)
 80833c2:	2202      	movs	r2, #2
 80833c4:	6829      	ldr	r1, [r5, #0]
 80833c6:	a806      	add	r0, sp, #24
 80833c8:	f008 f92e 	bl	808b628 <_ZN6StringC1Efi>
 80833cc:	9906      	ldr	r1, [sp, #24]
 80833ce:	4620      	mov	r0, r4
 80833d0:	f008 faa2 	bl	808b918 <_ZN5Print5printEPKc>
 80833d4:	a806      	add	r0, sp, #24
 80833d6:	f008 f843 	bl	808b460 <_ZN6StringD1Ev>
    Serial.println(" torr");
 80833da:	f009 fb6b 	bl	808cab4 <_Z16_fetch_usbserialv>
 80833de:	492a      	ldr	r1, [pc, #168]	; (8083488 <_Z22serialGetPressureSlopev+0xe4>)
 80833e0:	f008 faad 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 80833e4:	f009 fb66 	bl	808cab4 <_Z16_fetch_usbserialv>
 80833e8:	4928      	ldr	r1, [pc, #160]	; (808348c <_Z22serialGetPressureSlopev+0xe8>)
 80833ea:	f008 fa95 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80833ee:	f009 fb61 	bl	808cab4 <_Z16_fetch_usbserialv>
 80833f2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80833f6:	f008 fbf5 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80833fa:	f009 fb5b 	bl	808cab4 <_Z16_fetch_usbserialv>
 80833fe:	220d      	movs	r2, #13
 8083400:	4601      	mov	r1, r0
 8083402:	a802      	add	r0, sp, #8
 8083404:	f008 fc58 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083408:	a802      	add	r0, sp, #8
 808340a:	f008 fa3c 	bl	808b886 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808340e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8083412:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083414:	f00a ffce 	bl	808e3b4 <__aeabi_fcmpge>
 8083418:	b360      	cbz	r0, 8083474 <_Z22serialGetPressureSlopev+0xd0>
 808341a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808341e:	4620      	mov	r0, r4
 8083420:	f00a ffb4 	bl	808e38c <__aeabi_fcmplt>
 8083424:	b330      	cbz	r0, 8083474 <_Z22serialGetPressureSlopev+0xd0>
        pressure_slope = tempfloat;
        tempfloat *= 100;
 8083426:	491a      	ldr	r1, [pc, #104]	; (8083490 <_Z22serialGetPressureSlopev+0xec>)
 8083428:	4620      	mov	r0, r4
        pressure_slope = tempfloat;
 808342a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 808342c:	f00a fe10 	bl	808e050 <__aeabi_fmul>
        tempValue = tempfloat;
 8083430:	f00a ffd4 	bl	808e3dc <__aeabi_f2iz>
 8083434:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 8083436:	f009 fb3d 	bl	808cab4 <_Z16_fetch_usbserialv>
 808343a:	4916      	ldr	r1, [pc, #88]	; (8083494 <_Z22serialGetPressureSlopev+0xf0>)
 808343c:	f008 fa6c 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope,2));
 8083440:	f009 fb38 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083444:	4604      	mov	r4, r0
 8083446:	2202      	movs	r2, #2
 8083448:	6829      	ldr	r1, [r5, #0]
 808344a:	a806      	add	r0, sp, #24
 808344c:	f008 f8ec 	bl	808b628 <_ZN6StringC1Efi>
 8083450:	9906      	ldr	r1, [sp, #24]
 8083452:	4620      	mov	r0, r4
 8083454:	f008 fa73 	bl	808b93e <_ZN5Print7printlnEPKc>
 8083458:	a806      	add	r0, sp, #24
 808345a:	f008 f801 	bl	808b460 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 808345e:	f009 ff31 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8083462:	2038      	movs	r0, #56	; 0x38
 8083464:	a901      	add	r1, sp, #4
 8083466:	f7fd fbd1 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 808346a:	a802      	add	r0, sp, #8
 808346c:	f007 fff8 	bl	808b460 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083470:	b00b      	add	sp, #44	; 0x2c
 8083472:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8083474:	f009 fb1e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083478:	4907      	ldr	r1, [pc, #28]	; (8083498 <_Z22serialGetPressureSlopev+0xf4>)
 808347a:	f008 fa60 	bl	808b93e <_ZN5Print7printlnEPKc>
 808347e:	e7f4      	b.n	808346a <_Z22serialGetPressureSlopev+0xc6>
 8083480:	08092491 	.word	0x08092491
 8083484:	2000084c 	.word	0x2000084c
 8083488:	080924a9 	.word	0x080924a9
 808348c:	080924af 	.word	0x080924af
 8083490:	42c80000 	.word	0x42c80000
 8083494:	080924ca 	.word	0x080924ca
 8083498:	080922f0 	.word	0x080922f0

0808349c <_Z22serialGetHumiditySlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumiditySlope(void){
 808349c:	b530      	push	{r4, r5, lr}
 808349e:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80834a0:	f009 fb08 	bl	808cab4 <_Z16_fetch_usbserialv>
 80834a4:	f008 fa3f 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 80834a8:	f009 fb04 	bl	808cab4 <_Z16_fetch_usbserialv>
 80834ac:	4932      	ldr	r1, [pc, #200]	; (8083578 <_Z22serialGetHumiditySlopev+0xdc>)
 80834ae:	f008 fa33 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 80834b2:	f009 faff 	bl	808cab4 <_Z16_fetch_usbserialv>
 80834b6:	4604      	mov	r4, r0
 80834b8:	4d30      	ldr	r5, [pc, #192]	; (808357c <_Z22serialGetHumiditySlopev+0xe0>)
 80834ba:	2202      	movs	r2, #2
 80834bc:	6829      	ldr	r1, [r5, #0]
 80834be:	a806      	add	r0, sp, #24
 80834c0:	f008 f8b2 	bl	808b628 <_ZN6StringC1Efi>
 80834c4:	9906      	ldr	r1, [sp, #24]
 80834c6:	4620      	mov	r0, r4
 80834c8:	f008 fa26 	bl	808b918 <_ZN5Print5printEPKc>
 80834cc:	a806      	add	r0, sp, #24
 80834ce:	f007 ffc7 	bl	808b460 <_ZN6StringD1Ev>
    Serial.println(" %");
 80834d2:	f009 faef 	bl	808cab4 <_Z16_fetch_usbserialv>
 80834d6:	492a      	ldr	r1, [pc, #168]	; (8083580 <_Z22serialGetHumiditySlopev+0xe4>)
 80834d8:	f008 fa31 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 80834dc:	f009 faea 	bl	808cab4 <_Z16_fetch_usbserialv>
 80834e0:	4928      	ldr	r1, [pc, #160]	; (8083584 <_Z22serialGetHumiditySlopev+0xe8>)
 80834e2:	f008 fa19 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80834e6:	f009 fae5 	bl	808cab4 <_Z16_fetch_usbserialv>
 80834ea:	f24c 3150 	movw	r1, #50000	; 0xc350
 80834ee:	f008 fb79 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80834f2:	f009 fadf 	bl	808cab4 <_Z16_fetch_usbserialv>
 80834f6:	220d      	movs	r2, #13
 80834f8:	4601      	mov	r1, r0
 80834fa:	a802      	add	r0, sp, #8
 80834fc:	f008 fbdc 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083500:	a802      	add	r0, sp, #8
 8083502:	f008 f9c0 	bl	808b886 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083506:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 808350a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 10){
 808350c:	f00a ff52 	bl	808e3b4 <__aeabi_fcmpge>
 8083510:	b358      	cbz	r0, 808356a <_Z22serialGetHumiditySlopev+0xce>
 8083512:	4620      	mov	r0, r4
 8083514:	491c      	ldr	r1, [pc, #112]	; (8083588 <_Z22serialGetHumiditySlopev+0xec>)
 8083516:	f00a ff39 	bl	808e38c <__aeabi_fcmplt>
 808351a:	b330      	cbz	r0, 808356a <_Z22serialGetHumiditySlopev+0xce>
        rh_slope = tempfloat;
        tempfloat *= 100;
 808351c:	491b      	ldr	r1, [pc, #108]	; (808358c <_Z22serialGetHumiditySlopev+0xf0>)
 808351e:	4620      	mov	r0, r4
        rh_slope = tempfloat;
 8083520:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8083522:	f00a fd95 	bl	808e050 <__aeabi_fmul>
        tempValue = tempfloat;
 8083526:	f00a ff59 	bl	808e3dc <__aeabi_f2iz>
 808352a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 808352c:	f009 fac2 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083530:	4917      	ldr	r1, [pc, #92]	; (8083590 <_Z22serialGetHumiditySlopev+0xf4>)
 8083532:	f008 f9f1 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope,2));
 8083536:	f009 fabd 	bl	808cab4 <_Z16_fetch_usbserialv>
 808353a:	4604      	mov	r4, r0
 808353c:	2202      	movs	r2, #2
 808353e:	6829      	ldr	r1, [r5, #0]
 8083540:	a806      	add	r0, sp, #24
 8083542:	f008 f871 	bl	808b628 <_ZN6StringC1Efi>
 8083546:	9906      	ldr	r1, [sp, #24]
 8083548:	4620      	mov	r0, r4
 808354a:	f008 f9f8 	bl	808b93e <_ZN5Print7printlnEPKc>
 808354e:	a806      	add	r0, sp, #24
 8083550:	f007 ff86 	bl	808b460 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 8083554:	f009 feb6 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8083558:	2040      	movs	r0, #64	; 0x40
 808355a:	a901      	add	r1, sp, #4
 808355c:	f7fd fb56 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083560:	a802      	add	r0, sp, #8
 8083562:	f007 ff7d 	bl	808b460 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083566:	b00b      	add	sp, #44	; 0x2c
 8083568:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 808356a:	f009 faa3 	bl	808cab4 <_Z16_fetch_usbserialv>
 808356e:	4909      	ldr	r1, [pc, #36]	; (8083594 <_Z22serialGetHumiditySlopev+0xf8>)
 8083570:	f008 f9e5 	bl	808b93e <_ZN5Print7printlnEPKc>
 8083574:	e7f4      	b.n	8083560 <_Z22serialGetHumiditySlopev+0xc4>
 8083576:	bf00      	nop
 8083578:	080924e1 	.word	0x080924e1
 808357c:	20000854 	.word	0x20000854
 8083580:	080924f3 	.word	0x080924f3
 8083584:	080924f6 	.word	0x080924f6
 8083588:	41200000 	.word	0x41200000
 808358c:	42c80000 	.word	0x42c80000
 8083590:	0809250b 	.word	0x0809250b
 8083594:	080922f0 	.word	0x080922f0

08083598 <_Z20readAlpha1Constantlyv>:
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
 8083598:	b570      	push	{r4, r5, r6, lr}
    while(!Serial.available()){
        CO_float = readCO();
 808359a:	4d0c      	ldr	r5, [pc, #48]	; (80835cc <_Z20readAlpha1Constantlyv+0x34>)
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
 808359c:	4e0c      	ldr	r6, [pc, #48]	; (80835d0 <_Z20readAlpha1Constantlyv+0x38>)
    while(!Serial.available()){
 808359e:	f009 fa89 	bl	808cab4 <_Z16_fetch_usbserialv>
 80835a2:	6803      	ldr	r3, [r0, #0]
 80835a4:	691b      	ldr	r3, [r3, #16]
 80835a6:	4798      	blx	r3
 80835a8:	b978      	cbnz	r0, 80835ca <_Z20readAlpha1Constantlyv+0x32>
        CO_float = readCO();
 80835aa:	f7fe feb7 	bl	808231c <_Z6readCOv>
 80835ae:	6028      	str	r0, [r5, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
 80835b0:	f009 fa80 	bl	808cab4 <_Z16_fetch_usbserialv>
 80835b4:	4604      	mov	r4, r0
 80835b6:	6828      	ldr	r0, [r5, #0]
 80835b8:	f00a f89c 	bl	808d6f4 <__aeabi_f2d>
 80835bc:	4602      	mov	r2, r0
 80835be:	460b      	mov	r3, r1
 80835c0:	4620      	mov	r0, r4
 80835c2:	4631      	mov	r1, r6
 80835c4:	f7fd fb54 	bl	8080c70 <_ZN5Print6printfEPKcz>
    while(!Serial.available()){
 80835c8:	e7e9      	b.n	808359e <_Z20readAlpha1Constantlyv+0x6>
    }
}
 80835ca:	bd70      	pop	{r4, r5, r6, pc}
 80835cc:	20000340 	.word	0x20000340
 80835d0:	0809251c 	.word	0x0809251c

080835d4 <_Z23outputSerialMenuOptionsv>:
void outputSerialMenuOptions(void){
 80835d4:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 80835d6:	f009 fa6d 	bl	808cab4 <_Z16_fetch_usbserialv>
 80835da:	49a2      	ldr	r1, [pc, #648]	; (8083864 <_Z23outputSerialMenuOptionsv+0x290>)
 80835dc:	f008 f9af 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 80835e0:	f009 fa68 	bl	808cab4 <_Z16_fetch_usbserialv>
 80835e4:	49a0      	ldr	r1, [pc, #640]	; (8083868 <_Z23outputSerialMenuOptionsv+0x294>)
 80835e6:	f008 f9aa 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 80835ea:	f009 fa63 	bl	808cab4 <_Z16_fetch_usbserialv>
 80835ee:	499f      	ldr	r1, [pc, #636]	; (808386c <_Z23outputSerialMenuOptionsv+0x298>)
 80835f0:	f008 f9a5 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 80835f4:	f009 fa5e 	bl	808cab4 <_Z16_fetch_usbserialv>
 80835f8:	499d      	ldr	r1, [pc, #628]	; (8083870 <_Z23outputSerialMenuOptionsv+0x29c>)
 80835fa:	f008 f9a0 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 80835fe:	f009 fa59 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083602:	499c      	ldr	r1, [pc, #624]	; (8083874 <_Z23outputSerialMenuOptionsv+0x2a0>)
 8083604:	f008 f99b 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 8083608:	f009 fa54 	bl	808cab4 <_Z16_fetch_usbserialv>
 808360c:	499a      	ldr	r1, [pc, #616]	; (8083878 <_Z23outputSerialMenuOptionsv+0x2a4>)
 808360e:	f008 f996 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 8083612:	f009 fa4f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083616:	4999      	ldr	r1, [pc, #612]	; (808387c <_Z23outputSerialMenuOptionsv+0x2a8>)
 8083618:	f008 f991 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 808361c:	f009 fa4a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083620:	4997      	ldr	r1, [pc, #604]	; (8083880 <_Z23outputSerialMenuOptionsv+0x2ac>)
 8083622:	f008 f98c 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 8083626:	f009 fa45 	bl	808cab4 <_Z16_fetch_usbserialv>
 808362a:	4996      	ldr	r1, [pc, #600]	; (8083884 <_Z23outputSerialMenuOptionsv+0x2b0>)
 808362c:	f008 f987 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8083630:	f009 fa40 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083634:	4994      	ldr	r1, [pc, #592]	; (8083888 <_Z23outputSerialMenuOptionsv+0x2b4>)
 8083636:	f008 f982 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 808363a:	f009 fa3b 	bl	808cab4 <_Z16_fetch_usbserialv>
 808363e:	4993      	ldr	r1, [pc, #588]	; (808388c <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083640:	f008 f97d 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 8083644:	f009 fa36 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083648:	4991      	ldr	r1, [pc, #580]	; (8083890 <_Z23outputSerialMenuOptionsv+0x2bc>)
 808364a:	f008 f978 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 808364e:	f009 fa31 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083652:	4990      	ldr	r1, [pc, #576]	; (8083894 <_Z23outputSerialMenuOptionsv+0x2c0>)
 8083654:	f008 f973 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8083658:	f009 fa2c 	bl	808cab4 <_Z16_fetch_usbserialv>
 808365c:	498e      	ldr	r1, [pc, #568]	; (8083898 <_Z23outputSerialMenuOptionsv+0x2c4>)
 808365e:	f008 f96e 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 8083662:	f009 fa27 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083666:	498d      	ldr	r1, [pc, #564]	; (808389c <_Z23outputSerialMenuOptionsv+0x2c8>)
 8083668:	f008 f969 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 808366c:	f009 fa22 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083670:	498b      	ldr	r1, [pc, #556]	; (80838a0 <_Z23outputSerialMenuOptionsv+0x2cc>)
 8083672:	f008 f964 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 8083676:	f009 fa1d 	bl	808cab4 <_Z16_fetch_usbserialv>
 808367a:	498a      	ldr	r1, [pc, #552]	; (80838a4 <_Z23outputSerialMenuOptionsv+0x2d0>)
 808367c:	f008 f95f 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 8083680:	f009 fa18 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083684:	4988      	ldr	r1, [pc, #544]	; (80838a8 <_Z23outputSerialMenuOptionsv+0x2d4>)
 8083686:	f008 f95a 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 808368a:	f009 fa13 	bl	808cab4 <_Z16_fetch_usbserialv>
 808368e:	4987      	ldr	r1, [pc, #540]	; (80838ac <_Z23outputSerialMenuOptionsv+0x2d8>)
 8083690:	f008 f955 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 8083694:	f009 fa0e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083698:	4985      	ldr	r1, [pc, #532]	; (80838b0 <_Z23outputSerialMenuOptionsv+0x2dc>)
 808369a:	f008 f950 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 808369e:	f009 fa09 	bl	808cab4 <_Z16_fetch_usbserialv>
 80836a2:	4984      	ldr	r1, [pc, #528]	; (80838b4 <_Z23outputSerialMenuOptionsv+0x2e0>)
 80836a4:	f008 f94b 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 80836a8:	f009 fa04 	bl	808cab4 <_Z16_fetch_usbserialv>
 80836ac:	4982      	ldr	r1, [pc, #520]	; (80838b8 <_Z23outputSerialMenuOptionsv+0x2e4>)
 80836ae:	f008 f946 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 80836b2:	f009 f9ff 	bl	808cab4 <_Z16_fetch_usbserialv>
 80836b6:	4981      	ldr	r1, [pc, #516]	; (80838bc <_Z23outputSerialMenuOptionsv+0x2e8>)
 80836b8:	f008 f941 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 80836bc:	f009 f9fa 	bl	808cab4 <_Z16_fetch_usbserialv>
 80836c0:	497f      	ldr	r1, [pc, #508]	; (80838c0 <_Z23outputSerialMenuOptionsv+0x2ec>)
 80836c2:	f008 f93c 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 80836c6:	f009 f9f5 	bl	808cab4 <_Z16_fetch_usbserialv>
 80836ca:	497e      	ldr	r1, [pc, #504]	; (80838c4 <_Z23outputSerialMenuOptionsv+0x2f0>)
 80836cc:	f008 f937 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 80836d0:	f009 f9f0 	bl	808cab4 <_Z16_fetch_usbserialv>
 80836d4:	497c      	ldr	r1, [pc, #496]	; (80838c8 <_Z23outputSerialMenuOptionsv+0x2f4>)
 80836d6:	f008 f932 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 80836da:	f009 f9eb 	bl	808cab4 <_Z16_fetch_usbserialv>
 80836de:	497b      	ldr	r1, [pc, #492]	; (80838cc <_Z23outputSerialMenuOptionsv+0x2f8>)
 80836e0:	f008 f92d 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 80836e4:	f009 f9e6 	bl	808cab4 <_Z16_fetch_usbserialv>
 80836e8:	4979      	ldr	r1, [pc, #484]	; (80838d0 <_Z23outputSerialMenuOptionsv+0x2fc>)
 80836ea:	f008 f928 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 80836ee:	f009 f9e1 	bl	808cab4 <_Z16_fetch_usbserialv>
 80836f2:	4978      	ldr	r1, [pc, #480]	; (80838d4 <_Z23outputSerialMenuOptionsv+0x300>)
 80836f4:	f008 f923 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 80836f8:	f009 f9dc 	bl	808cab4 <_Z16_fetch_usbserialv>
 80836fc:	4976      	ldr	r1, [pc, #472]	; (80838d8 <_Z23outputSerialMenuOptionsv+0x304>)
 80836fe:	f008 f91e 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 8083702:	f009 f9d7 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083706:	4975      	ldr	r1, [pc, #468]	; (80838dc <_Z23outputSerialMenuOptionsv+0x308>)
 8083708:	f008 f919 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 808370c:	f009 f9d2 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083710:	4973      	ldr	r1, [pc, #460]	; (80838e0 <_Z23outputSerialMenuOptionsv+0x30c>)
 8083712:	f008 f914 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 8083716:	f009 f9cd 	bl	808cab4 <_Z16_fetch_usbserialv>
 808371a:	4972      	ldr	r1, [pc, #456]	; (80838e4 <_Z23outputSerialMenuOptionsv+0x310>)
 808371c:	f008 f90f 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8083720:	f009 f9c8 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083724:	4970      	ldr	r1, [pc, #448]	; (80838e8 <_Z23outputSerialMenuOptionsv+0x314>)
 8083726:	f008 f90a 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 808372a:	f009 f9c3 	bl	808cab4 <_Z16_fetch_usbserialv>
 808372e:	496f      	ldr	r1, [pc, #444]	; (80838ec <_Z23outputSerialMenuOptionsv+0x318>)
 8083730:	f008 f905 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 8083734:	f009 f9be 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083738:	496d      	ldr	r1, [pc, #436]	; (80838f0 <_Z23outputSerialMenuOptionsv+0x31c>)
 808373a:	f008 f900 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("A:  Ouptput CO constantly and rapidly");
 808373e:	f009 f9b9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083742:	496c      	ldr	r1, [pc, #432]	; (80838f4 <_Z23outputSerialMenuOptionsv+0x320>)
 8083744:	f008 f8fb 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8083748:	f009 f9b4 	bl	808cab4 <_Z16_fetch_usbserialv>
 808374c:	496a      	ldr	r1, [pc, #424]	; (80838f8 <_Z23outputSerialMenuOptionsv+0x324>)
 808374e:	f008 f8f6 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celcius");
 8083752:	f009 f9af 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083756:	4969      	ldr	r1, [pc, #420]	; (80838fc <_Z23outputSerialMenuOptionsv+0x328>)
 8083758:	f008 f8f1 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 808375c:	f009 f9aa 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083760:	4967      	ldr	r1, [pc, #412]	; (8083900 <_Z23outputSerialMenuOptionsv+0x32c>)
 8083762:	f008 f8ec 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 8083766:	f009 f9a5 	bl	808cab4 <_Z16_fetch_usbserialv>
 808376a:	4966      	ldr	r1, [pc, #408]	; (8083904 <_Z23outputSerialMenuOptionsv+0x330>)
 808376c:	f008 f8e7 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Farenheit");
 8083770:	f009 f9a0 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083774:	4964      	ldr	r1, [pc, #400]	; (8083908 <_Z23outputSerialMenuOptionsv+0x334>)
 8083776:	f008 f8e2 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 808377a:	f009 f99b 	bl	808cab4 <_Z16_fetch_usbserialv>
 808377e:	4963      	ldr	r1, [pc, #396]	; (808390c <_Z23outputSerialMenuOptionsv+0x338>)
 8083780:	f008 f8dd 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 8083784:	f009 f996 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083788:	4961      	ldr	r1, [pc, #388]	; (8083910 <_Z23outputSerialMenuOptionsv+0x33c>)
 808378a:	f008 f8d8 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 808378e:	f009 f991 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083792:	4960      	ldr	r1, [pc, #384]	; (8083914 <_Z23outputSerialMenuOptionsv+0x340>)
 8083794:	f008 f8d3 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 8083798:	f009 f98c 	bl	808cab4 <_Z16_fetch_usbserialv>
 808379c:	495e      	ldr	r1, [pc, #376]	; (8083918 <_Z23outputSerialMenuOptionsv+0x344>)
 808379e:	f008 f8ce 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 80837a2:	f009 f987 	bl	808cab4 <_Z16_fetch_usbserialv>
 80837a6:	495d      	ldr	r1, [pc, #372]	; (808391c <_Z23outputSerialMenuOptionsv+0x348>)
 80837a8:	f008 f8c9 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 80837ac:	f009 f982 	bl	808cab4 <_Z16_fetch_usbserialv>
 80837b0:	495b      	ldr	r1, [pc, #364]	; (8083920 <_Z23outputSerialMenuOptionsv+0x34c>)
 80837b2:	f008 f8c4 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 80837b6:	f009 f97d 	bl	808cab4 <_Z16_fetch_usbserialv>
 80837ba:	495a      	ldr	r1, [pc, #360]	; (8083924 <_Z23outputSerialMenuOptionsv+0x350>)
 80837bc:	f008 f8bf 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 80837c0:	f009 f978 	bl	808cab4 <_Z16_fetch_usbserialv>
 80837c4:	4958      	ldr	r1, [pc, #352]	; (8083928 <_Z23outputSerialMenuOptionsv+0x354>)
 80837c6:	f008 f8ba 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 80837ca:	f009 f973 	bl	808cab4 <_Z16_fetch_usbserialv>
 80837ce:	4957      	ldr	r1, [pc, #348]	; (808392c <_Z23outputSerialMenuOptionsv+0x358>)
 80837d0:	f008 f8b5 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 80837d4:	f009 f96e 	bl	808cab4 <_Z16_fetch_usbserialv>
 80837d8:	4955      	ldr	r1, [pc, #340]	; (8083930 <_Z23outputSerialMenuOptionsv+0x35c>)
 80837da:	f008 f8b0 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 80837de:	f009 f969 	bl	808cab4 <_Z16_fetch_usbserialv>
 80837e2:	4954      	ldr	r1, [pc, #336]	; (8083934 <_Z23outputSerialMenuOptionsv+0x360>)
 80837e4:	f008 f8ab 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 80837e8:	f009 f964 	bl	808cab4 <_Z16_fetch_usbserialv>
 80837ec:	4952      	ldr	r1, [pc, #328]	; (8083938 <_Z23outputSerialMenuOptionsv+0x364>)
 80837ee:	f008 f8a6 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 80837f2:	f009 f95f 	bl	808cab4 <_Z16_fetch_usbserialv>
 80837f6:	4951      	ldr	r1, [pc, #324]	; (808393c <_Z23outputSerialMenuOptionsv+0x368>)
 80837f8:	f008 f8a1 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 80837fc:	f009 f95a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083800:	494f      	ldr	r1, [pc, #316]	; (8083940 <_Z23outputSerialMenuOptionsv+0x36c>)
 8083802:	f008 f89c 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 8083806:	f009 f955 	bl	808cab4 <_Z16_fetch_usbserialv>
 808380a:	494e      	ldr	r1, [pc, #312]	; (8083944 <_Z23outputSerialMenuOptionsv+0x370>)
 808380c:	f008 f897 	bl	808b93e <_ZN5Print7printlnEPKc>
    
    Serial.println("W:  Enable/Disable google location services");
 8083810:	f009 f950 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083814:	494c      	ldr	r1, [pc, #304]	; (8083948 <_Z23outputSerialMenuOptionsv+0x374>)
 8083816:	f008 f892 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 808381a:	f009 f94b 	bl	808cab4 <_Z16_fetch_usbserialv>
 808381e:	494b      	ldr	r1, [pc, #300]	; (808394c <_Z23outputSerialMenuOptionsv+0x378>)
 8083820:	f008 f88d 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 8083824:	f009 f946 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083828:	4949      	ldr	r1, [pc, #292]	; (8083950 <_Z23outputSerialMenuOptionsv+0x37c>)
 808382a:	f008 f888 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 808382e:	f009 f941 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083832:	4948      	ldr	r1, [pc, #288]	; (8083954 <_Z23outputSerialMenuOptionsv+0x380>)
 8083834:	f008 f883 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083838:	f009 f93c 	bl	808cab4 <_Z16_fetch_usbserialv>
 808383c:	4946      	ldr	r1, [pc, #280]	; (8083958 <_Z23outputSerialMenuOptionsv+0x384>)
 808383e:	f008 f87e 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
 8083842:	f009 f937 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083846:	4945      	ldr	r1, [pc, #276]	; (808395c <_Z23outputSerialMenuOptionsv+0x388>)
 8083848:	f008 f879 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 808384c:	f009 f932 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083850:	4943      	ldr	r1, [pc, #268]	; (8083960 <_Z23outputSerialMenuOptionsv+0x38c>)
 8083852:	f008 f874 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 8083856:	f009 f92d 	bl	808cab4 <_Z16_fetch_usbserialv>
  }
 808385a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("x:  Exits this menu");
 808385e:	4941      	ldr	r1, [pc, #260]	; (8083964 <_Z23outputSerialMenuOptionsv+0x390>)
 8083860:	f008 b86d 	b.w	808b93e <_ZN5Print7printlnEPKc>
 8083864:	0809252c 	.word	0x0809252c
 8083868:	08092542 	.word	0x08092542
 808386c:	08092557 	.word	0x08092557
 8083870:	0809256b 	.word	0x0809256b
 8083874:	0809257f 	.word	0x0809257f
 8083878:	08092592 	.word	0x08092592
 808387c:	080925a7 	.word	0x080925a7
 8083880:	080925bb 	.word	0x080925bb
 8083884:	080925d2 	.word	0x080925d2
 8083888:	080925e8 	.word	0x080925e8
 808388c:	080925fe 	.word	0x080925fe
 8083890:	08092613 	.word	0x08092613
 8083894:	08092630 	.word	0x08092630
 8083898:	0809264c 	.word	0x0809264c
 808389c:	08092666 	.word	0x08092666
 80838a0:	0809267f 	.word	0x0809267f
 80838a4:	08092699 	.word	0x08092699
 80838a8:	080926b2 	.word	0x080926b2
 80838ac:	080926ce 	.word	0x080926ce
 80838b0:	080926eb 	.word	0x080926eb
 80838b4:	08092704 	.word	0x08092704
 80838b8:	08092720 	.word	0x08092720
 80838bc:	08092738 	.word	0x08092738
 80838c0:	08092751 	.word	0x08092751
 80838c4:	0809276a 	.word	0x0809276a
 80838c8:	0809277e 	.word	0x0809277e
 80838cc:	08092793 	.word	0x08092793
 80838d0:	080927ae 	.word	0x080927ae
 80838d4:	080927c9 	.word	0x080927c9
 80838d8:	080927df 	.word	0x080927df
 80838dc:	080927f0 	.word	0x080927f0
 80838e0:	08092802 	.word	0x08092802
 80838e4:	08092813 	.word	0x08092813
 80838e8:	08092825 	.word	0x08092825
 80838ec:	0809284e 	.word	0x0809284e
 80838f0:	08092877 	.word	0x08092877
 80838f4:	080928a6 	.word	0x080928a6
 80838f8:	080928cc 	.word	0x080928cc
 80838fc:	080928f1 	.word	0x080928f1
 8083900:	08092919 	.word	0x08092919
 8083904:	08092959 	.word	0x08092959
 8083908:	0809299c 	.word	0x0809299c
 808390c:	080929c6 	.word	0x080929c6
 8083910:	08092a09 	.word	0x08092a09
 8083914:	08092a4f 	.word	0x08092a4f
 8083918:	08092a83 	.word	0x08092a83
 808391c:	08092aa1 	.word	0x08092aa1
 8083920:	08092ac5 	.word	0x08092ac5
 8083924:	08092ae0 	.word	0x08092ae0
 8083928:	08092b0a 	.word	0x08092b0a
 808392c:	08092b3f 	.word	0x08092b3f
 8083930:	08092b63 	.word	0x08092b63
 8083934:	08092b77 	.word	0x08092b77
 8083938:	08092b93 	.word	0x08092b93
 808393c:	08092bb8 	.word	0x08092bb8
 8083940:	08092bdc 	.word	0x08092bdc
 8083944:	08092c01 	.word	0x08092c01
 8083948:	08092c29 	.word	0x08092c29
 808394c:	08092c55 	.word	0x08092c55
 8083950:	08092c98 	.word	0x08092c98
 8083954:	08092cca 	.word	0x08092cca
 8083958:	08092cf0 	.word	0x08092cf0
 808395c:	08092d56 	.word	0x08092d56
 8083960:	08092dba 	.word	0x08092dba
 8083964:	08092dcf 	.word	0x08092dcf

08083968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8083968:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808396a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 808396c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 808396e:	b17c      	cbz	r4, 8083990 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8083970:	6863      	ldr	r3, [r4, #4]
 8083972:	3b01      	subs	r3, #1
 8083974:	6063      	str	r3, [r4, #4]
 8083976:	b95b      	cbnz	r3, 8083990 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8083978:	6823      	ldr	r3, [r4, #0]
 808397a:	4620      	mov	r0, r4
 808397c:	689b      	ldr	r3, [r3, #8]
 808397e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8083980:	68a3      	ldr	r3, [r4, #8]
 8083982:	3b01      	subs	r3, #1
 8083984:	60a3      	str	r3, [r4, #8]
 8083986:	b91b      	cbnz	r3, 8083990 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8083988:	6823      	ldr	r3, [r4, #0]
 808398a:	4620      	mov	r0, r4
 808398c:	68db      	ldr	r3, [r3, #12]
 808398e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8083990:	4628      	mov	r0, r5
 8083992:	bd38      	pop	{r3, r4, r5, pc}

08083994 <_Z13outputToCloud6StringS_>:
void outputToCloud(String data, String sensible_data){
 8083994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083998:	b09d      	sub	sp, #116	; 0x74
 808399a:	4607      	mov	r7, r0
 808399c:	460e      	mov	r6, r1
    String webhook_data = " ";
 808399e:	a804      	add	r0, sp, #16
 80839a0:	49b0      	ldr	r1, [pc, #704]	; (8083c64 <_Z13outputToCloud6StringS_+0x2d0>)
 80839a2:	f007 fda7 	bl	808b4f4 <_ZN6StringC1EPKc>
    CO_sum += CO_float;
 80839a6:	f8df 8348 	ldr.w	r8, [pc, #840]	; 8083cf0 <_Z13outputToCloud6StringS_+0x35c>
 80839aa:	4baf      	ldr	r3, [pc, #700]	; (8083c68 <_Z13outputToCloud6StringS_+0x2d4>)
 80839ac:	f8d8 0000 	ldr.w	r0, [r8]
 80839b0:	6819      	ldr	r1, [r3, #0]
 80839b2:	f00a fa45 	bl	808de40 <__addsf3>
    CO2_sum += CO2_float;
 80839b6:	4dad      	ldr	r5, [pc, #692]	; (8083c6c <_Z13outputToCloud6StringS_+0x2d8>)
 80839b8:	4bad      	ldr	r3, [pc, #692]	; (8083c70 <_Z13outputToCloud6StringS_+0x2dc>)
    CO_sum += CO_float;
 80839ba:	f8c8 0000 	str.w	r0, [r8]
    CO2_sum += CO2_float;
 80839be:	6819      	ldr	r1, [r3, #0]
    CO_sum += CO_float;
 80839c0:	4604      	mov	r4, r0
    CO2_sum += CO2_float;
 80839c2:	6828      	ldr	r0, [r5, #0]
 80839c4:	f00a fa3c 	bl	808de40 <__addsf3>
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 80839c8:	4baa      	ldr	r3, [pc, #680]	; (8083c74 <_Z13outputToCloud6StringS_+0x2e0>)
    measurement_count++;
 80839ca:	f8df b330 	ldr.w	fp, [pc, #816]	; 8083cfc <_Z13outputToCloud6StringS_+0x368>
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 80839ce:	681b      	ldr	r3, [r3, #0]
 80839d0:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8083cf4 <_Z13outputToCloud6StringS_+0x360>
    CO2_sum += CO2_float;
 80839d4:	4682      	mov	sl, r0
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 80839d6:	f8c9 3000 	str.w	r3, [r9]
    measurement_count++;
 80839da:	f8db 3000 	ldr.w	r3, [fp]
    CO2_sum += CO2_float;
 80839de:	6028      	str	r0, [r5, #0]
    measurement_count++;
 80839e0:	1c58      	adds	r0, r3, #1
    if(measurement_count == measurements_to_average){
 80839e2:	4ba5      	ldr	r3, [pc, #660]	; (8083c78 <_Z13outputToCloud6StringS_+0x2e4>)
    measurement_count++;
 80839e4:	f8cb 0000 	str.w	r0, [fp]
    if(measurement_count == measurements_to_average){
 80839e8:	681b      	ldr	r3, [r3, #0]
 80839ea:	4298      	cmp	r0, r3
 80839ec:	f040 8125 	bne.w	8083c3a <_Z13outputToCloud6StringS_+0x2a6>
        CO_sum /= measurements_to_average;
 80839f0:	f00a fada 	bl	808dfa8 <__aeabi_i2f>
 80839f4:	4601      	mov	r1, r0
 80839f6:	9003      	str	r0, [sp, #12]
 80839f8:	4620      	mov	r0, r4
 80839fa:	f00a fbdd 	bl	808e1b8 <__aeabi_fdiv>
        CO2_sum /= measurements_to_average;
 80839fe:	9903      	ldr	r1, [sp, #12]
        CO_sum /= measurements_to_average;
 8083a00:	f8c8 0000 	str.w	r0, [r8]
        CO2_sum /= measurements_to_average;
 8083a04:	4650      	mov	r0, sl
 8083a06:	f00a fbd7 	bl	808e1b8 <__aeabi_fdiv>
        measurement_count = 0;
 8083a0a:	2300      	movs	r3, #0
 8083a0c:	f8cb 3000 	str.w	r3, [fp]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8083a10:	4b9a      	ldr	r3, [pc, #616]	; (8083c7c <_Z13outputToCloud6StringS_+0x2e8>)
 8083a12:	220a      	movs	r2, #10
 8083a14:	6819      	ldr	r1, [r3, #0]
        CO2_sum /= measurements_to_average;
 8083a16:	6028      	str	r0, [r5, #0]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8083a18:	a80c      	add	r0, sp, #48	; 0x30
 8083a1a:	f007 fddf 	bl	808b5dc <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083a1e:	a90c      	add	r1, sp, #48	; 0x30
 8083a20:	a810      	add	r0, sp, #64	; 0x40
 8083a22:	f007 fda6 	bl	808b572 <_ZN6StringC1ERKS_>
 8083a26:	4996      	ldr	r1, [pc, #600]	; (8083c80 <_Z13outputToCloud6StringS_+0x2ec>)
 8083a28:	a810      	add	r0, sp, #64	; 0x40
 8083a2a:	f007 fe92 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083a2e:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8083d00 <_Z13outputToCloud6StringS_+0x36c>
 8083a32:	4683      	mov	fp, r0
 8083a34:	f8da 000c 	ldr.w	r0, [sl, #12]
 8083a38:	f009 fe5c 	bl	808d6f4 <__aeabi_f2d>
 8083a3c:	2200      	movs	r2, #0
 8083a3e:	4b91      	ldr	r3, [pc, #580]	; (8083c84 <_Z13outputToCloud6StringS_+0x2f0>)
 8083a40:	f009 ffda 	bl	808d9f8 <__aeabi_ddiv>
 8083a44:	2401      	movs	r4, #1
 8083a46:	4602      	mov	r2, r0
 8083a48:	460b      	mov	r3, r1
 8083a4a:	9400      	str	r4, [sp, #0]
 8083a4c:	a814      	add	r0, sp, #80	; 0x50
 8083a4e:	f007 fe02 	bl	808b656 <_ZN6StringC1Edi>
 8083a52:	a914      	add	r1, sp, #80	; 0x50
 8083a54:	4658      	mov	r0, fp
 8083a56:	f007 fe70 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8083a5a:	498b      	ldr	r1, [pc, #556]	; (8083c88 <_Z13outputToCloud6StringS_+0x2f4>)
 8083a5c:	f007 fe79 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083a60:	f8d8 1000 	ldr.w	r1, [r8]
 8083a64:	f007 fe93 	bl	808b78e <_ZplRK15StringSumHelperf>
 8083a68:	4988      	ldr	r1, [pc, #544]	; (8083c8c <_Z13outputToCloud6StringS_+0x2f8>)
 8083a6a:	f007 fe72 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083a6e:	6829      	ldr	r1, [r5, #0]
 8083a70:	f007 fe8d 	bl	808b78e <_ZplRK15StringSumHelperf>
 8083a74:	4986      	ldr	r1, [pc, #536]	; (8083c90 <_Z13outputToCloud6StringS_+0x2fc>)
 8083a76:	f007 fe6c 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083a7a:	4b86      	ldr	r3, [pc, #536]	; (8083c94 <_Z13outputToCloud6StringS_+0x300>)
 8083a7c:	6819      	ldr	r1, [r3, #0]
 8083a7e:	f007 fe7c 	bl	808b77a <_ZplRK15StringSumHelperi>
 8083a82:	4985      	ldr	r1, [pc, #532]	; (8083c98 <_Z13outputToCloud6StringS_+0x304>)
 8083a84:	f007 fe65 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083a88:	4b84      	ldr	r3, [pc, #528]	; (8083c9c <_Z13outputToCloud6StringS_+0x308>)
 8083a8a:	6819      	ldr	r1, [r3, #0]
 8083a8c:	f007 fe7f 	bl	808b78e <_ZplRK15StringSumHelperf>
 8083a90:	4983      	ldr	r1, [pc, #524]	; (8083ca0 <_Z13outputToCloud6StringS_+0x30c>)
 8083a92:	f007 fe5e 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083a96:	4b83      	ldr	r3, [pc, #524]	; (8083ca4 <_Z13outputToCloud6StringS_+0x310>)
 8083a98:	6819      	ldr	r1, [r3, #0]
 8083a9a:	f007 fe6e 	bl	808b77a <_ZplRK15StringSumHelperi>
 8083a9e:	4982      	ldr	r1, [pc, #520]	; (8083ca8 <_Z13outputToCloud6StringS_+0x314>)
 8083aa0:	f007 fe57 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083aa4:	4605      	mov	r5, r0
 8083aa6:	f7fd fdbf 	bl	8081628 <_Z15readTemperaturev>
 8083aaa:	4622      	mov	r2, r4
 8083aac:	4601      	mov	r1, r0
 8083aae:	a818      	add	r0, sp, #96	; 0x60
 8083ab0:	f007 fdba 	bl	808b628 <_ZN6StringC1Efi>
 8083ab4:	4628      	mov	r0, r5
 8083ab6:	a918      	add	r1, sp, #96	; 0x60
 8083ab8:	f007 fe3f 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8083abc:	497b      	ldr	r1, [pc, #492]	; (8083cac <_Z13outputToCloud6StringS_+0x318>)
 8083abe:	f007 fe48 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083ac2:	4601      	mov	r1, r0
 8083ac4:	a808      	add	r0, sp, #32
 8083ac6:	f007 fd54 	bl	808b572 <_ZN6StringC1ERKS_>
 8083aca:	a818      	add	r0, sp, #96	; 0x60
 8083acc:	f007 fcc8 	bl	808b460 <_ZN6StringD1Ev>
 8083ad0:	a814      	add	r0, sp, #80	; 0x50
 8083ad2:	f007 fcc5 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083ad6:	a810      	add	r0, sp, #64	; 0x40
 8083ad8:	f007 fcc2 	bl	808b460 <_ZN6StringD1Ev>
 8083adc:	a80c      	add	r0, sp, #48	; 0x30
 8083ade:	f007 fcbf 	bl	808b460 <_ZN6StringD1Ev>
        webhook_data += String(bme.pressure / 100.0, 1) + ",HUM: " + String(bme.humidity, 1) + ",Snd: " + String(sound_average) + ",O3: " + O3_sum + "\n\r";
 8083ae2:	f8da 0004 	ldr.w	r0, [sl, #4]
 8083ae6:	f009 fe05 	bl	808d6f4 <__aeabi_f2d>
 8083aea:	2200      	movs	r2, #0
 8083aec:	4b70      	ldr	r3, [pc, #448]	; (8083cb0 <_Z13outputToCloud6StringS_+0x31c>)
 8083aee:	f009 ff83 	bl	808d9f8 <__aeabi_ddiv>
 8083af2:	9400      	str	r4, [sp, #0]
 8083af4:	460b      	mov	r3, r1
 8083af6:	4602      	mov	r2, r0
 8083af8:	a80c      	add	r0, sp, #48	; 0x30
 8083afa:	f007 fdac 	bl	808b656 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8083afe:	a90c      	add	r1, sp, #48	; 0x30
 8083b00:	a810      	add	r0, sp, #64	; 0x40
 8083b02:	f007 fd36 	bl	808b572 <_ZN6StringC1ERKS_>
 8083b06:	496b      	ldr	r1, [pc, #428]	; (8083cb4 <_Z13outputToCloud6StringS_+0x320>)
 8083b08:	a810      	add	r0, sp, #64	; 0x40
 8083b0a:	f007 fe22 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083b0e:	4605      	mov	r5, r0
 8083b10:	4622      	mov	r2, r4
 8083b12:	f8da 1008 	ldr.w	r1, [sl, #8]
 8083b16:	a814      	add	r0, sp, #80	; 0x50
 8083b18:	f007 fd86 	bl	808b628 <_ZN6StringC1Efi>
 8083b1c:	a914      	add	r1, sp, #80	; 0x50
 8083b1e:	4628      	mov	r0, r5
 8083b20:	f007 fe0b 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8083b24:	4964      	ldr	r1, [pc, #400]	; (8083cb8 <_Z13outputToCloud6StringS_+0x324>)
 8083b26:	f007 fe14 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083b2a:	2306      	movs	r3, #6
 8083b2c:	4604      	mov	r4, r0
 8083b2e:	9300      	str	r3, [sp, #0]
 8083b30:	4b62      	ldr	r3, [pc, #392]	; (8083cbc <_Z13outputToCloud6StringS_+0x328>)
 8083b32:	a818      	add	r0, sp, #96	; 0x60
 8083b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083b38:	f007 fd8d 	bl	808b656 <_ZN6StringC1Edi>
 8083b3c:	4620      	mov	r0, r4
 8083b3e:	a918      	add	r1, sp, #96	; 0x60
 8083b40:	f007 fdfb 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8083b44:	495e      	ldr	r1, [pc, #376]	; (8083cc0 <_Z13outputToCloud6StringS_+0x32c>)
 8083b46:	f007 fe04 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083b4a:	f8d9 1000 	ldr.w	r1, [r9]
 8083b4e:	f007 fe1e 	bl	808b78e <_ZplRK15StringSumHelperf>
 8083b52:	495c      	ldr	r1, [pc, #368]	; (8083cc4 <_Z13outputToCloud6StringS_+0x330>)
 8083b54:	f007 fdfd 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083b58:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083b5a:	a808      	add	r0, sp, #32
 8083b5c:	f007 fda8 	bl	808b6b0 <_ZN6String6concatERKS_>
 8083b60:	a818      	add	r0, sp, #96	; 0x60
 8083b62:	f007 fc7d 	bl	808b460 <_ZN6StringD1Ev>
 8083b66:	a814      	add	r0, sp, #80	; 0x50
 8083b68:	f007 fc7a 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083b6c:	a810      	add	r0, sp, #64	; 0x40
 8083b6e:	f007 fc77 	bl	808b460 <_ZN6StringD1Ev>
 8083b72:	a80c      	add	r0, sp, #48	; 0x30
 8083b74:	f007 fc74 	bl	808b460 <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083b78:	f006 fff0 	bl	808ab5c <spark_cloud_flag_connected>
 8083b7c:	4c52      	ldr	r4, [pc, #328]	; (8083cc8 <_Z13outputToCloud6StringS_+0x334>)
 8083b7e:	4b53      	ldr	r3, [pc, #332]	; (8083ccc <_Z13outputToCloud6StringS_+0x338>)
        if(Particle.connected() && serial_cellular_enabled){
 8083b80:	2800      	cmp	r0, #0
 8083b82:	d060      	beq.n	8083c46 <_Z13outputToCloud6StringS_+0x2b2>
 8083b84:	681b      	ldr	r3, [r3, #0]
 8083b86:	2b00      	cmp	r3, #0
 8083b88:	d061      	beq.n	8083c4e <_Z13outputToCloud6StringS_+0x2ba>
            status_word.status_int |= 0x0002;
 8083b8a:	4a51      	ldr	r2, [pc, #324]	; (8083cd0 <_Z13outputToCloud6StringS_+0x33c>)
 8083b8c:	4d51      	ldr	r5, [pc, #324]	; (8083cd4 <_Z13outputToCloud6StringS_+0x340>)
 8083b8e:	8813      	ldrh	r3, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8083b90:	4951      	ldr	r1, [pc, #324]	; (8083cd8 <_Z13outputToCloud6StringS_+0x344>)
 8083b92:	f043 0302 	orr.w	r3, r3, #2
 8083b96:	8013      	strh	r3, [r2, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8083b98:	782b      	ldrb	r3, [r5, #0]
 8083b9a:	a818      	add	r0, sp, #96	; 0x60
 8083b9c:	f88d 3000 	strb.w	r3, [sp]
 8083ba0:	683a      	ldr	r2, [r7, #0]
 8083ba2:	233c      	movs	r3, #60	; 0x3c
 8083ba4:	f008 fd56 	bl	808c654 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8083ba8:	a819      	add	r0, sp, #100	; 0x64
 8083baa:	f7ff fedd 	bl	8083968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8083bae:	f006 fd55 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8083bb2:	4f4a      	ldr	r7, [pc, #296]	; (8083cdc <_Z13outputToCloud6StringS_+0x348>)
 8083bb4:	6038      	str	r0, [r7, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 8083bb6:	f006 ffc1 	bl	808ab3c <spark_process>
            if(debugging_enabled){
 8083bba:	6823      	ldr	r3, [r4, #0]
 8083bbc:	b173      	cbz	r3, 8083bdc <_Z13outputToCloud6StringS_+0x248>
              Serial.println("Published pamup data!");
 8083bbe:	f008 ff79 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083bc2:	4947      	ldr	r1, [pc, #284]	; (8083ce0 <_Z13outputToCloud6StringS_+0x34c>)
 8083bc4:	f007 febb 	bl	808b93e <_ZN5Print7printlnEPKc>
              writeLogFile("Published pamup data!");
 8083bc8:	4945      	ldr	r1, [pc, #276]	; (8083ce0 <_Z13outputToCloud6StringS_+0x34c>)
 8083bca:	a818      	add	r0, sp, #96	; 0x60
 8083bcc:	f007 fc92 	bl	808b4f4 <_ZN6StringC1EPKc>
 8083bd0:	a818      	add	r0, sp, #96	; 0x60
 8083bd2:	f7fe f895 	bl	8081d00 <_Z12writeLogFile6String>
 8083bd6:	a818      	add	r0, sp, #96	; 0x60
 8083bd8:	f007 fc42 	bl	808b460 <_ZN6StringD1Ev>
            if(sensible_iot_en){
 8083bdc:	4b41      	ldr	r3, [pc, #260]	; (8083ce4 <_Z13outputToCloud6StringS_+0x350>)
 8083bde:	681b      	ldr	r3, [r3, #0]
 8083be0:	b30b      	cbz	r3, 8083c26 <_Z13outputToCloud6StringS_+0x292>
 8083be2:	782b      	ldrb	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8083be4:	6832      	ldr	r2, [r6, #0]
 8083be6:	4940      	ldr	r1, [pc, #256]	; (8083ce8 <_Z13outputToCloud6StringS_+0x354>)
 8083be8:	f88d 3000 	strb.w	r3, [sp]
 8083bec:	a818      	add	r0, sp, #96	; 0x60
 8083bee:	233c      	movs	r3, #60	; 0x3c
 8083bf0:	f008 fd30 	bl	808c654 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8083bf4:	a819      	add	r0, sp, #100	; 0x64
 8083bf6:	f7ff feb7 	bl	8083968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return HAL_Timer_Get_Milli_Seconds();
 8083bfa:	f006 fd2f 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 8083bfe:	6038      	str	r0, [r7, #0]
    		spark_process();
 8083c00:	f006 ff9c 	bl	808ab3c <spark_process>
                if(debugging_enabled){
 8083c04:	6823      	ldr	r3, [r4, #0]
 8083c06:	b173      	cbz	r3, 8083c26 <_Z13outputToCloud6StringS_+0x292>
                    Serial.println("Published sensible data!");
 8083c08:	f008 ff54 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083c0c:	4937      	ldr	r1, [pc, #220]	; (8083cec <_Z13outputToCloud6StringS_+0x358>)
 8083c0e:	f007 fe96 	bl	808b93e <_ZN5Print7printlnEPKc>
                    writeLogFile("Published sensible data!");
 8083c12:	4936      	ldr	r1, [pc, #216]	; (8083cec <_Z13outputToCloud6StringS_+0x358>)
                    writeLogFile("Couldn't connect to particle.");
 8083c14:	a818      	add	r0, sp, #96	; 0x60
 8083c16:	f007 fc6d 	bl	808b4f4 <_ZN6StringC1EPKc>
 8083c1a:	a818      	add	r0, sp, #96	; 0x60
 8083c1c:	f7fe f870 	bl	8081d00 <_Z12writeLogFile6String>
 8083c20:	a818      	add	r0, sp, #96	; 0x60
 8083c22:	f007 fc1d 	bl	808b460 <_ZN6StringD1Ev>
        CO_sum = 0;
 8083c26:	2300      	movs	r3, #0
 8083c28:	4a31      	ldr	r2, [pc, #196]	; (8083cf0 <_Z13outputToCloud6StringS_+0x35c>)
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8083c2a:	a808      	add	r0, sp, #32
        CO_sum = 0;
 8083c2c:	6013      	str	r3, [r2, #0]
        CO2_sum = 0;
 8083c2e:	4a0f      	ldr	r2, [pc, #60]	; (8083c6c <_Z13outputToCloud6StringS_+0x2d8>)
 8083c30:	6013      	str	r3, [r2, #0]
        O3_sum = 0;
 8083c32:	4a30      	ldr	r2, [pc, #192]	; (8083cf4 <_Z13outputToCloud6StringS_+0x360>)
 8083c34:	6013      	str	r3, [r2, #0]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8083c36:	f007 fc13 	bl	808b460 <_ZN6StringD1Ev>
    String webhook_data = " ";
 8083c3a:	a804      	add	r0, sp, #16
 8083c3c:	f007 fc10 	bl	808b460 <_ZN6StringD1Ev>
}
 8083c40:	b01d      	add	sp, #116	; 0x74
 8083c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(serial_cellular_enabled == 0){
 8083c46:	681b      	ldr	r3, [r3, #0]
 8083c48:	6821      	ldr	r1, [r4, #0]
 8083c4a:	2b00      	cmp	r3, #0
 8083c4c:	d15a      	bne.n	8083d04 <_Z13outputToCloud6StringS_+0x370>
                if(debugging_enabled){
 8083c4e:	6823      	ldr	r3, [r4, #0]
 8083c50:	2b00      	cmp	r3, #0
 8083c52:	d0e8      	beq.n	8083c26 <_Z13outputToCloud6StringS_+0x292>
                    Serial.println("Cellular is disabled.");
 8083c54:	f008 ff2e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083c58:	4927      	ldr	r1, [pc, #156]	; (8083cf8 <_Z13outputToCloud6StringS_+0x364>)
 8083c5a:	f007 fe70 	bl	808b93e <_ZN5Print7printlnEPKc>
                    writeLogFile("Cellular is disabled.");
 8083c5e:	4926      	ldr	r1, [pc, #152]	; (8083cf8 <_Z13outputToCloud6StringS_+0x364>)
 8083c60:	e7d8      	b.n	8083c14 <_Z13outputToCloud6StringS_+0x280>
 8083c62:	bf00      	nop
 8083c64:	08093d04 	.word	0x08093d04
 8083c68:	20000340 	.word	0x20000340
 8083c6c:	20000338 	.word	0x20000338
 8083c70:	2000032c 	.word	0x2000032c
 8083c74:	20000354 	.word	0x20000354
 8083c78:	200007f8 	.word	0x200007f8
 8083c7c:	20000080 	.word	0x20000080
 8083c80:	08092de3 	.word	0x08092de3
 8083c84:	408f4000 	.word	0x408f4000
 8083c88:	08092dea 	.word	0x08092dea
 8083c8c:	08092df1 	.word	0x08092df1
 8083c90:	08092df9 	.word	0x08092df9
 8083c94:	2000035c 	.word	0x2000035c
 8083c98:	08092e01 	.word	0x08092e01
 8083c9c:	2000068c 	.word	0x2000068c
 8083ca0:	08092e0a 	.word	0x08092e0a
 8083ca4:	20000360 	.word	0x20000360
 8083ca8:	08092e13 	.word	0x08092e13
 8083cac:	08092e1b 	.word	0x08092e1b
 8083cb0:	40590000 	.word	0x40590000
 8083cb4:	08092e24 	.word	0x08092e24
 8083cb8:	08092e2b 	.word	0x08092e2b
 8083cbc:	20000ce0 	.word	0x20000ce0
 8083cc0:	08092e32 	.word	0x08092e32
 8083cc4:	08091f51 	.word	0x08091f51
 8083cc8:	20000690 	.word	0x20000690
 8083ccc:	20000cdc 	.word	0x20000cdc
 8083cd0:	20000cf8 	.word	0x20000cf8
 8083cd4:	200005a8 	.word	0x200005a8
 8083cd8:	08092e38 	.word	0x08092e38
 8083cdc:	20001374 	.word	0x20001374
 8083ce0:	08092e3e 	.word	0x08092e3e
 8083ce4:	20000cd8 	.word	0x20000cd8
 8083ce8:	08092e54 	.word	0x08092e54
 8083cec:	08092e62 	.word	0x08092e62
 8083cf0:	2000034c 	.word	0x2000034c
 8083cf4:	20000358 	.word	0x20000358
 8083cf8:	08092e7b 	.word	0x08092e7b
 8083cfc:	200007f4 	.word	0x200007f4
 8083d00:	200005ec 	.word	0x200005ec
                status_word.status_int &= 0xFFFD;   //clear the connected bit
 8083d04:	4a06      	ldr	r2, [pc, #24]	; (8083d20 <_Z13outputToCloud6StringS_+0x38c>)
 8083d06:	8813      	ldrh	r3, [r2, #0]
 8083d08:	f023 0302 	bic.w	r3, r3, #2
 8083d0c:	8013      	strh	r3, [r2, #0]
                if(debugging_enabled){
 8083d0e:	2900      	cmp	r1, #0
 8083d10:	d089      	beq.n	8083c26 <_Z13outputToCloud6StringS_+0x292>
                    Serial.println("Couldn't connect to particle.");
 8083d12:	f008 fecf 	bl	808cab4 <_Z16_fetch_usbserialv>
 8083d16:	4903      	ldr	r1, [pc, #12]	; (8083d24 <_Z13outputToCloud6StringS_+0x390>)
 8083d18:	f007 fe11 	bl	808b93e <_ZN5Print7printlnEPKc>
                    writeLogFile("Couldn't connect to particle.");
 8083d1c:	4901      	ldr	r1, [pc, #4]	; (8083d24 <_Z13outputToCloud6StringS_+0x390>)
 8083d1e:	e779      	b.n	8083c14 <_Z13outputToCloud6StringS_+0x280>
 8083d20:	20000cf8 	.word	0x20000cf8
 8083d24:	08092e91 	.word	0x08092e91

08083d28 <_Z15outputDataToESPv>:
void outputDataToESP(void){
 8083d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8083d2c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
    time_t time = Time.now();
 8083d30:	f008 f96d 	bl	808c00e <_ZN9TimeClass3nowEv>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8083d34:	4bbc      	ldr	r3, [pc, #752]	; (8084028 <_Z15outputDataToESPv+0x300>)
    time_t time = Time.now();
 8083d36:	4606      	mov	r6, r0
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8083d38:	681a      	ldr	r2, [r3, #0]
 8083d3a:	4bbc      	ldr	r3, [pc, #752]	; (808402c <_Z15outputDataToESPv+0x304>)
    String cloud_output_string = "";    //create a clean string
 8083d3c:	49bc      	ldr	r1, [pc, #752]	; (8084030 <_Z15outputDataToESPv+0x308>)
    time_t time = Time.now();
 8083d3e:	17c7      	asrs	r7, r0, #31
    String cloud_output_string = "";    //create a clean string
 8083d40:	a802      	add	r0, sp, #8
 8083d42:	601a      	str	r2, [r3, #0]
 8083d44:	f007 fbd6 	bl	808b4f4 <_ZN6StringC1EPKc>
    String csv_output_string = "";
 8083d48:	49b9      	ldr	r1, [pc, #740]	; (8084030 <_Z15outputDataToESPv+0x308>)
 8083d4a:	a806      	add	r0, sp, #24
 8083d4c:	f007 fbd2 	bl	808b4f4 <_ZN6StringC1EPKc>
    String sensible_string = "";
 8083d50:	49b7      	ldr	r1, [pc, #732]	; (8084030 <_Z15outputDataToESPv+0x308>)
 8083d52:	a80a      	add	r0, sp, #40	; 0x28
 8083d54:	f007 fbce 	bl	808b4f4 <_ZN6StringC1EPKc>
    String latitude_string = "";
 8083d58:	49b5      	ldr	r1, [pc, #724]	; (8084030 <_Z15outputDataToESPv+0x308>)
 8083d5a:	a80e      	add	r0, sp, #56	; 0x38
 8083d5c:	f007 fbca 	bl	808b4f4 <_ZN6StringC1EPKc>
    String longitude_string = "";
 8083d60:	49b3      	ldr	r1, [pc, #716]	; (8084030 <_Z15outputDataToESPv+0x308>)
 8083d62:	a812      	add	r0, sp, #72	; 0x48
 8083d64:	f007 fbc6 	bl	808b4f4 <_ZN6StringC1EPKc>
	String & operator += (char c)			{concat(c); return (*this);}
 8083d68:	215e      	movs	r1, #94	; 0x5e
 8083d6a:	a802      	add	r0, sp, #8
	StringSumHelper(const String &s) : String(s) {}
 8083d6c:	ac64      	add	r4, sp, #400	; 0x190
	String & operator += (char c)			{concat(c); return (*this);}
 8083d6e:	f007 fcb2 	bl	808b6d6 <_ZN6String6concatEc>
    cloud_output_string += String(1) + ";";           //header
 8083d72:	220a      	movs	r2, #10
 8083d74:	2101      	movs	r1, #1
 8083d76:	a827      	add	r0, sp, #156	; 0x9c
 8083d78:	f007 fc30 	bl	808b5dc <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083d7c:	4620      	mov	r0, r4
 8083d7e:	a927      	add	r1, sp, #156	; 0x9c
 8083d80:	f007 fbf7 	bl	808b572 <_ZN6StringC1ERKS_>
 8083d84:	4620      	mov	r0, r4
 8083d86:	49ab      	ldr	r1, [pc, #684]	; (8084034 <_Z15outputDataToESPv+0x30c>)
 8083d88:	f007 fce3 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083d8c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083d8e:	a802      	add	r0, sp, #8
 8083d90:	f007 fc8e 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083d94:	4620      	mov	r0, r4
 8083d96:	f007 fb63 	bl	808b460 <_ZN6StringD1Ev>
 8083d9a:	a827      	add	r0, sp, #156	; 0x9c
 8083d9c:	f007 fb60 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(DEVICE_ID_PACKET_CONSTANT) + String(DEVICE_id);   //device id
 8083da0:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8084094 <_Z15outputDataToESPv+0x36c>
 8083da4:	215a      	movs	r1, #90	; 0x5a
 8083da6:	a822      	add	r0, sp, #136	; 0x88
 8083da8:	f007 fc07 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083dac:	4620      	mov	r0, r4
 8083dae:	a922      	add	r1, sp, #136	; 0x88
 8083db0:	f007 fbdf 	bl	808b572 <_ZN6StringC1ERKS_>
 8083db4:	220a      	movs	r2, #10
 8083db6:	f8d8 1000 	ldr.w	r1, [r8]
 8083dba:	a827      	add	r0, sp, #156	; 0x9c
 8083dbc:	f007 fc0e 	bl	808b5dc <_ZN6StringC1Eih>
 8083dc0:	4620      	mov	r0, r4
 8083dc2:	a927      	add	r1, sp, #156	; 0x9c
 8083dc4:	f007 fcb9 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8083dc8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083dca:	a802      	add	r0, sp, #8
 8083dcc:	f007 fc70 	bl	808b6b0 <_ZN6String6concatERKS_>
 8083dd0:	a827      	add	r0, sp, #156	; 0x9c
 8083dd2:	f007 fb45 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083dd6:	4620      	mov	r0, r4
 8083dd8:	f007 fb42 	bl	808b460 <_ZN6StringD1Ev>
 8083ddc:	a822      	add	r0, sp, #136	; 0x88
 8083dde:	f007 fb3f 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(DEVICE_id) + ",";
 8083de2:	220a      	movs	r2, #10
 8083de4:	f8d8 1000 	ldr.w	r1, [r8]
 8083de8:	a827      	add	r0, sp, #156	; 0x9c
 8083dea:	f007 fbf7 	bl	808b5dc <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083dee:	4620      	mov	r0, r4
 8083df0:	a927      	add	r1, sp, #156	; 0x9c
 8083df2:	f007 fbbe 	bl	808b572 <_ZN6StringC1ERKS_>
 8083df6:	4620      	mov	r0, r4
 8083df8:	498f      	ldr	r1, [pc, #572]	; (8084038 <_Z15outputDataToESPv+0x310>)
 8083dfa:	f007 fcaa 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8083dfe:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083e00:	a806      	add	r0, sp, #24
 8083e02:	f007 fc55 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083e06:	4620      	mov	r0, r4
 8083e08:	f007 fb2a 	bl	808b460 <_ZN6StringD1Ev>
 8083e0c:	a827      	add	r0, sp, #156	; 0x9c
 8083e0e:	f007 fb27 	bl	808b460 <_ZN6StringD1Ev>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 8083e12:	4b8a      	ldr	r3, [pc, #552]	; (808403c <_Z15outputDataToESPv+0x314>)
        state_(BEGIN) {
 8083e14:	2500      	movs	r5, #0
        n_(0) {
 8083e16:	9322      	str	r3, [sp, #136]	; 0x88
 8083e18:	23ff      	movs	r3, #255	; 0xff
    writer.beginObject();
 8083e1a:	a822      	add	r0, sp, #136	; 0x88
 8083e1c:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
        state_(BEGIN) {
 8083e20:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
        n_(0) {
 8083e24:	9424      	str	r4, [sp, #144]	; 0x90
 8083e26:	f009 f930 	bl	808d08a <_ZN5spark10JSONWriter11beginObjectEv>
	StringSumHelper(const char *p) : String(p) {}
 8083e2a:	4985      	ldr	r1, [pc, #532]	; (8084040 <_Z15outputDataToESPv+0x318>)
 8083e2c:	a827      	add	r0, sp, #156	; 0x9c
 8083e2e:	f007 fb61 	bl	808b4f4 <_ZN6StringC1EPKc>
    String device_string = "PAM-" + String(DEVICE_id);
 8083e32:	220a      	movs	r2, #10
 8083e34:	f8d8 1000 	ldr.w	r1, [r8]
 8083e38:	a81e      	add	r0, sp, #120	; 0x78
 8083e3a:	f007 fbcf 	bl	808b5dc <_ZN6StringC1Eih>
 8083e3e:	a91e      	add	r1, sp, #120	; 0x78
 8083e40:	a827      	add	r0, sp, #156	; 0x9c
 8083e42:	f007 fc7a 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8083e46:	4601      	mov	r1, r0
 8083e48:	a816      	add	r0, sp, #88	; 0x58
 8083e4a:	f007 fb92 	bl	808b572 <_ZN6StringC1ERKS_>
 8083e4e:	a81e      	add	r0, sp, #120	; 0x78
 8083e50:	f007 fb06 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083e54:	a827      	add	r0, sp, #156	; 0x9c
 8083e56:	f007 fb03 	bl	808b460 <_ZN6StringD1Ev>
    writer.name("instrumentKey").value(device_string);
 8083e5a:	497a      	ldr	r1, [pc, #488]	; (8084044 <_Z15outputDataToESPv+0x31c>)
 8083e5c:	a822      	add	r0, sp, #136	; 0x88
 8083e5e:	f7fc ffac 	bl	8080dba <_ZN5spark10JSONWriter4nameEPKc>
 8083e62:	a916      	add	r1, sp, #88	; 0x58
 8083e64:	f7fc ffb6 	bl	8080dd4 <_ZN5spark10JSONWriter5valueERK6String>
    writer.name("datetime").value(String(Time.format(time, "%Y-%m-%dT%H:%M:%SZ")));
 8083e68:	4977      	ldr	r1, [pc, #476]	; (8084048 <_Z15outputDataToESPv+0x320>)
 8083e6a:	a822      	add	r0, sp, #136	; 0x88
 8083e6c:	f7fc ffa5 	bl	8080dba <_ZN5spark10JSONWriter4nameEPKc>
 8083e70:	4604      	mov	r4, r0
 8083e72:	4b76      	ldr	r3, [pc, #472]	; (808404c <_Z15outputDataToESPv+0x324>)
 8083e74:	4632      	mov	r2, r6
 8083e76:	4976      	ldr	r1, [pc, #472]	; (8084050 <_Z15outputDataToESPv+0x328>)
 8083e78:	9300      	str	r3, [sp, #0]
 8083e7a:	a827      	add	r0, sp, #156	; 0x9c
 8083e7c:	463b      	mov	r3, r7
 8083e7e:	f008 f867 	bl	808bf50 <_ZN9TimeClass6formatExPKc>
 8083e82:	a927      	add	r1, sp, #156	; 0x9c
 8083e84:	4620      	mov	r0, r4
 8083e86:	f7fc ffa5 	bl	8080dd4 <_ZN5spark10JSONWriter5valueERK6String>
 8083e8a:	a827      	add	r0, sp, #156	; 0x9c
 8083e8c:	f007 fae8 	bl	808b460 <_ZN6StringD1Ev>
    writer.name("CO2").value(String(CO2_float, 0));
 8083e90:	4970      	ldr	r1, [pc, #448]	; (8084054 <_Z15outputDataToESPv+0x32c>)
 8083e92:	a822      	add	r0, sp, #136	; 0x88
 8083e94:	f7fc ff91 	bl	8080dba <_ZN5spark10JSONWriter4nameEPKc>
 8083e98:	4604      	mov	r4, r0
 8083e9a:	4b6f      	ldr	r3, [pc, #444]	; (8084058 <_Z15outputDataToESPv+0x330>)
 8083e9c:	462a      	mov	r2, r5
 8083e9e:	6819      	ldr	r1, [r3, #0]
 8083ea0:	a827      	add	r0, sp, #156	; 0x9c
 8083ea2:	f007 fbc1 	bl	808b628 <_ZN6StringC1Efi>
 8083ea6:	a927      	add	r1, sp, #156	; 0x9c
 8083ea8:	4620      	mov	r0, r4
 8083eaa:	f7fc ff93 	bl	8080dd4 <_ZN5spark10JSONWriter5valueERK6String>
 8083eae:	a827      	add	r0, sp, #156	; 0x9c
 8083eb0:	f007 fad6 	bl	808b460 <_ZN6StringD1Ev>
    writer.name("CO").value(String(CO_float, 3));
 8083eb4:	4969      	ldr	r1, [pc, #420]	; (808405c <_Z15outputDataToESPv+0x334>)
 8083eb6:	a822      	add	r0, sp, #136	; 0x88
 8083eb8:	f7fc ff7f 	bl	8080dba <_ZN5spark10JSONWriter4nameEPKc>
 8083ebc:	4604      	mov	r4, r0
 8083ebe:	4b68      	ldr	r3, [pc, #416]	; (8084060 <_Z15outputDataToESPv+0x338>)
 8083ec0:	2203      	movs	r2, #3
 8083ec2:	6819      	ldr	r1, [r3, #0]
 8083ec4:	a827      	add	r0, sp, #156	; 0x9c
 8083ec6:	f007 fbaf 	bl	808b628 <_ZN6StringC1Efi>
 8083eca:	a927      	add	r1, sp, #156	; 0x9c
 8083ecc:	4620      	mov	r0, r4
 8083ece:	f7fc ff81 	bl	8080dd4 <_ZN5spark10JSONWriter5valueERK6String>
 8083ed2:	a827      	add	r0, sp, #156	; 0x9c
 8083ed4:	f007 fac4 	bl	808b460 <_ZN6StringD1Ev>
    writer.name("PM1_0").value(String(PM01Value));
 8083ed8:	4962      	ldr	r1, [pc, #392]	; (8084064 <_Z15outputDataToESPv+0x33c>)
 8083eda:	a822      	add	r0, sp, #136	; 0x88
 8083edc:	f7fc ff6d 	bl	8080dba <_ZN5spark10JSONWriter4nameEPKc>
 8083ee0:	4604      	mov	r4, r0
 8083ee2:	4b61      	ldr	r3, [pc, #388]	; (8084068 <_Z15outputDataToESPv+0x340>)
 8083ee4:	220a      	movs	r2, #10
 8083ee6:	6819      	ldr	r1, [r3, #0]
 8083ee8:	a827      	add	r0, sp, #156	; 0x9c
 8083eea:	f007 fb77 	bl	808b5dc <_ZN6StringC1Eih>
 8083eee:	a927      	add	r1, sp, #156	; 0x9c
 8083ef0:	4620      	mov	r0, r4
 8083ef2:	f7fc ff6f 	bl	8080dd4 <_ZN5spark10JSONWriter5valueERK6String>
 8083ef6:	a827      	add	r0, sp, #156	; 0x9c
 8083ef8:	f007 fab2 	bl	808b460 <_ZN6StringD1Ev>
    writer.name("PM2_5").value(String(corrected_PM_25, 0)); 
 8083efc:	495b      	ldr	r1, [pc, #364]	; (808406c <_Z15outputDataToESPv+0x344>)
 8083efe:	a822      	add	r0, sp, #136	; 0x88
 8083f00:	f7fc ff5b 	bl	8080dba <_ZN5spark10JSONWriter4nameEPKc>
 8083f04:	4604      	mov	r4, r0
 8083f06:	4b5a      	ldr	r3, [pc, #360]	; (8084070 <_Z15outputDataToESPv+0x348>)
 8083f08:	462a      	mov	r2, r5
 8083f0a:	6819      	ldr	r1, [r3, #0]
 8083f0c:	a827      	add	r0, sp, #156	; 0x9c
 8083f0e:	f007 fb8b 	bl	808b628 <_ZN6StringC1Efi>
 8083f12:	a927      	add	r1, sp, #156	; 0x9c
 8083f14:	4620      	mov	r0, r4
 8083f16:	f7fc ff5d 	bl	8080dd4 <_ZN5spark10JSONWriter5valueERK6String>
 8083f1a:	a827      	add	r0, sp, #156	; 0x9c
 8083f1c:	f007 faa0 	bl	808b460 <_ZN6StringD1Ev>
    writer.name("Temp").value(String(readTemperature(), 1));
 8083f20:	4954      	ldr	r1, [pc, #336]	; (8084074 <_Z15outputDataToESPv+0x34c>)
 8083f22:	a822      	add	r0, sp, #136	; 0x88
 8083f24:	f7fc ff49 	bl	8080dba <_ZN5spark10JSONWriter4nameEPKc>
 8083f28:	4604      	mov	r4, r0
 8083f2a:	f7fd fb7d 	bl	8081628 <_Z15readTemperaturev>
 8083f2e:	2201      	movs	r2, #1
 8083f30:	4601      	mov	r1, r0
 8083f32:	a827      	add	r0, sp, #156	; 0x9c
 8083f34:	f007 fb78 	bl	808b628 <_ZN6StringC1Efi>
 8083f38:	a927      	add	r1, sp, #156	; 0x9c
 8083f3a:	4620      	mov	r0, r4
 8083f3c:	f7fc ff4a 	bl	8080dd4 <_ZN5spark10JSONWriter5valueERK6String>
 8083f40:	a827      	add	r0, sp, #156	; 0x9c
 8083f42:	f007 fa8d 	bl	808b460 <_ZN6StringD1Ev>
    writer.name("Press").value(String(bme.pressure / 100.0, 1));
 8083f46:	494c      	ldr	r1, [pc, #304]	; (8084078 <_Z15outputDataToESPv+0x350>)
 8083f48:	a822      	add	r0, sp, #136	; 0x88
 8083f4a:	f7fc ff36 	bl	8080dba <_ZN5spark10JSONWriter4nameEPKc>
 8083f4e:	4b4b      	ldr	r3, [pc, #300]	; (808407c <_Z15outputDataToESPv+0x354>)
 8083f50:	4604      	mov	r4, r0
 8083f52:	6858      	ldr	r0, [r3, #4]
 8083f54:	f009 fbce 	bl	808d6f4 <__aeabi_f2d>
 8083f58:	2200      	movs	r2, #0
 8083f5a:	4b49      	ldr	r3, [pc, #292]	; (8084080 <_Z15outputDataToESPv+0x358>)
 8083f5c:	f009 fd4c 	bl	808d9f8 <__aeabi_ddiv>
 8083f60:	2501      	movs	r5, #1
 8083f62:	460b      	mov	r3, r1
 8083f64:	4602      	mov	r2, r0
 8083f66:	9500      	str	r5, [sp, #0]
 8083f68:	a827      	add	r0, sp, #156	; 0x9c
 8083f6a:	f007 fb74 	bl	808b656 <_ZN6StringC1Edi>
 8083f6e:	a927      	add	r1, sp, #156	; 0x9c
 8083f70:	4620      	mov	r0, r4
 8083f72:	f7fc ff2f 	bl	8080dd4 <_ZN5spark10JSONWriter5valueERK6String>
 8083f76:	a827      	add	r0, sp, #156	; 0x9c
 8083f78:	f007 fa72 	bl	808b460 <_ZN6StringD1Ev>
    writer.name("Hmdty").value(String(readHumidity(), 1));
 8083f7c:	4941      	ldr	r1, [pc, #260]	; (8084084 <_Z15outputDataToESPv+0x35c>)
 8083f7e:	a822      	add	r0, sp, #136	; 0x88
 8083f80:	f7fc ff1b 	bl	8080dba <_ZN5spark10JSONWriter4nameEPKc>
 8083f84:	4604      	mov	r4, r0
 8083f86:	f7fd fbc9 	bl	808171c <_Z12readHumidityv>
 8083f8a:	462a      	mov	r2, r5
 8083f8c:	4601      	mov	r1, r0
 8083f8e:	a827      	add	r0, sp, #156	; 0x9c
 8083f90:	f007 fb4a 	bl	808b628 <_ZN6StringC1Efi>
 8083f94:	a927      	add	r1, sp, #156	; 0x9c
 8083f96:	4620      	mov	r0, r4
 8083f98:	f7fc ff1c 	bl	8080dd4 <_ZN5spark10JSONWriter5valueERK6String>
 8083f9c:	a827      	add	r0, sp, #156	; 0x9c
 8083f9e:	f007 fa5f 	bl	808b460 <_ZN6StringD1Ev>
    if(gps.get_latitude() != 0){
 8083fa2:	4839      	ldr	r0, [pc, #228]	; (8084088 <_Z15outputDataToESPv+0x360>)
 8083fa4:	f003 fa74 	bl	8087490 <_ZN3GPS12get_latitudeEv>
 8083fa8:	2200      	movs	r2, #0
 8083faa:	2300      	movs	r3, #0
 8083fac:	f009 fe62 	bl	808dc74 <__aeabi_dcmpeq>
 8083fb0:	2800      	cmp	r0, #0
 8083fb2:	f040 855c 	bne.w	8084a6e <_Z15outputDataToESPv+0xd46>
        if(gps.get_nsIndicator() == 0){
 8083fb6:	4834      	ldr	r0, [pc, #208]	; (8084088 <_Z15outputDataToESPv+0x360>)
 8083fb8:	f003 fa85 	bl	80874c6 <_ZN3GPS15get_nsIndicatorEv>
 8083fbc:	b918      	cbnz	r0, 8083fc6 <_Z15outputDataToESPv+0x29e>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8083fbe:	4933      	ldr	r1, [pc, #204]	; (808408c <_Z15outputDataToESPv+0x364>)
 8083fc0:	a80e      	add	r0, sp, #56	; 0x38
 8083fc2:	f007 fb79 	bl	808b6b8 <_ZN6String6concatEPKc>
        latitude_string += String(gps.get_latitude());
 8083fc6:	4830      	ldr	r0, [pc, #192]	; (8084088 <_Z15outputDataToESPv+0x360>)
 8083fc8:	f003 fa62 	bl	8087490 <_ZN3GPS12get_latitudeEv>
 8083fcc:	460b      	mov	r3, r1
 8083fce:	2106      	movs	r1, #6
 8083fd0:	4602      	mov	r2, r0
 8083fd2:	9100      	str	r1, [sp, #0]
 8083fd4:	a827      	add	r0, sp, #156	; 0x9c
 8083fd6:	f007 fb3e 	bl	808b656 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083fda:	a927      	add	r1, sp, #156	; 0x9c
 8083fdc:	a80e      	add	r0, sp, #56	; 0x38
 8083fde:	f007 fb67 	bl	808b6b0 <_ZN6String6concatERKS_>
 8083fe2:	a827      	add	r0, sp, #156	; 0x9c
 8083fe4:	f007 fa3c 	bl	808b460 <_ZN6StringD1Ev>
    writer.name("Lat").value(latitude_string);
 8083fe8:	4929      	ldr	r1, [pc, #164]	; (8084090 <_Z15outputDataToESPv+0x368>)
 8083fea:	a822      	add	r0, sp, #136	; 0x88
 8083fec:	f7fc fee5 	bl	8080dba <_ZN5spark10JSONWriter4nameEPKc>
 8083ff0:	a90e      	add	r1, sp, #56	; 0x38
 8083ff2:	f7fc feef 	bl	8080dd4 <_ZN5spark10JSONWriter5valueERK6String>
    if(gps.get_longitude() != 0){
 8083ff6:	4824      	ldr	r0, [pc, #144]	; (8084088 <_Z15outputDataToESPv+0x360>)
 8083ff8:	f003 fa4f 	bl	808749a <_ZN3GPS13get_longitudeEv>
 8083ffc:	2200      	movs	r2, #0
 8083ffe:	2300      	movs	r3, #0
 8084000:	f009 fe38 	bl	808dc74 <__aeabi_dcmpeq>
 8084004:	2800      	cmp	r0, #0
 8084006:	d152      	bne.n	80840ae <_Z15outputDataToESPv+0x386>
        if(gps.get_ewIndicator() == 0x01){
 8084008:	481f      	ldr	r0, [pc, #124]	; (8084088 <_Z15outputDataToESPv+0x360>)
 808400a:	f003 fa5f 	bl	80874cc <_ZN3GPS15get_ewIndicatorEv>
 808400e:	2801      	cmp	r0, #1
 8084010:	d103      	bne.n	808401a <_Z15outputDataToESPv+0x2f2>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084012:	491e      	ldr	r1, [pc, #120]	; (808408c <_Z15outputDataToESPv+0x364>)
 8084014:	a812      	add	r0, sp, #72	; 0x48
 8084016:	f007 fb4f 	bl	808b6b8 <_ZN6String6concatEPKc>
        longitude_string += String(gps.get_longitude());
 808401a:	481b      	ldr	r0, [pc, #108]	; (8084088 <_Z15outputDataToESPv+0x360>)
 808401c:	f003 fa3d 	bl	808749a <_ZN3GPS13get_longitudeEv>
 8084020:	460b      	mov	r3, r1
 8084022:	2106      	movs	r1, #6
 8084024:	4602      	mov	r2, r0
 8084026:	e037      	b.n	8084098 <_Z15outputDataToESPv+0x370>
 8084028:	200000e4 	.word	0x200000e4
 808402c:	20000e8c 	.word	0x20000e8c
 8084030:	080943b2 	.word	0x080943b2
 8084034:	08092eaf 	.word	0x08092eaf
 8084038:	080940f6 	.word	0x080940f6
 808403c:	08094560 	.word	0x08094560
 8084040:	08092eb1 	.word	0x08092eb1
 8084044:	08092eb6 	.word	0x08092eb6
 8084048:	08092ec4 	.word	0x08092ec4
 808404c:	08092ecd 	.word	0x08092ecd
 8084050:	20000e88 	.word	0x20000e88
 8084054:	0809404c 	.word	0x0809404c
 8084058:	2000032c 	.word	0x2000032c
 808405c:	08093392 	.word	0x08093392
 8084060:	20000340 	.word	0x20000340
 8084064:	08092ee0 	.word	0x08092ee0
 8084068:	2000035c 	.word	0x2000035c
 808406c:	08092ee6 	.word	0x08092ee6
 8084070:	2000068c 	.word	0x2000068c
 8084074:	08092eec 	.word	0x08092eec
 8084078:	08092ef1 	.word	0x08092ef1
 808407c:	200005ec 	.word	0x200005ec
 8084080:	40590000 	.word	0x40590000
 8084084:	08092ef7 	.word	0x08092ef7
 8084088:	20000720 	.word	0x20000720
 808408c:	08092eb4 	.word	0x08092eb4
 8084090:	08092efd 	.word	0x08092efd
 8084094:	20000080 	.word	0x20000080
 8084098:	9100      	str	r1, [sp, #0]
 808409a:	a827      	add	r0, sp, #156	; 0x9c
 808409c:	f007 fadb 	bl	808b656 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80840a0:	a927      	add	r1, sp, #156	; 0x9c
 80840a2:	a812      	add	r0, sp, #72	; 0x48
 80840a4:	f007 fb04 	bl	808b6b0 <_ZN6String6concatERKS_>
 80840a8:	a827      	add	r0, sp, #156	; 0x9c
 80840aa:	f007 f9d9 	bl	808b460 <_ZN6StringD1Ev>
    writer.name("Long").value(longitude_string);
 80840ae:	49b7      	ldr	r1, [pc, #732]	; (808438c <_Z15outputDataToESPv+0x664>)
 80840b0:	a822      	add	r0, sp, #136	; 0x88
 80840b2:	f7fc fe82 	bl	8080dba <_ZN5spark10JSONWriter4nameEPKc>
 80840b6:	a912      	add	r1, sp, #72	; 0x48
 80840b8:	f7fc fe8c 	bl	8080dd4 <_ZN5spark10JSONWriter5valueERK6String>
    writer.endObject();
 80840bc:	a822      	add	r0, sp, #136	; 0x88
 80840be:	f008 ffce 	bl	808d05e <_ZN5spark10JSONWriter9endObjectEv>
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 80840c2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
 80840c6:	4293      	cmp	r3, r2
 80840c8:	bf28      	it	cs
 80840ca:	4613      	movcs	r3, r2
 80840cc:	2400      	movs	r4, #0
 80840ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 80840d0:	4daf      	ldr	r5, [pc, #700]	; (8084390 <_Z15outputDataToESPv+0x668>)
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 80840d2:	54d4      	strb	r4, [r2, r3]
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 80840d4:	214d      	movs	r1, #77	; 0x4d
 80840d6:	a81a      	add	r0, sp, #104	; 0x68
 80840d8:	f007 fa6f 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 80840dc:	a91a      	add	r1, sp, #104	; 0x68
 80840de:	a827      	add	r0, sp, #156	; 0x9c
 80840e0:	f007 fa47 	bl	808b572 <_ZN6StringC1ERKS_>
 80840e4:	2203      	movs	r2, #3
 80840e6:	6829      	ldr	r1, [r5, #0]
 80840e8:	a81e      	add	r0, sp, #120	; 0x78
 80840ea:	f007 fa9d 	bl	808b628 <_ZN6StringC1Efi>
 80840ee:	a91e      	add	r1, sp, #120	; 0x78
 80840f0:	a827      	add	r0, sp, #156	; 0x9c
 80840f2:	f007 fb22 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 80840f6:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80840f8:	a802      	add	r0, sp, #8
 80840fa:	f007 fad9 	bl	808b6b0 <_ZN6String6concatERKS_>
 80840fe:	a81e      	add	r0, sp, #120	; 0x78
 8084100:	f007 f9ae 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084104:	a827      	add	r0, sp, #156	; 0x9c
 8084106:	f007 f9ab 	bl	808b460 <_ZN6StringD1Ev>
 808410a:	a81a      	add	r0, sp, #104	; 0x68
 808410c:	f007 f9a8 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(CO_float, 3) + ",";
 8084110:	2203      	movs	r2, #3
 8084112:	6829      	ldr	r1, [r5, #0]
 8084114:	a81e      	add	r0, sp, #120	; 0x78
 8084116:	f007 fa87 	bl	808b628 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 808411a:	a91e      	add	r1, sp, #120	; 0x78
 808411c:	a827      	add	r0, sp, #156	; 0x9c
 808411e:	f007 fa28 	bl	808b572 <_ZN6StringC1ERKS_>
 8084122:	499c      	ldr	r1, [pc, #624]	; (8084394 <_Z15outputDataToESPv+0x66c>)
 8084124:	a827      	add	r0, sp, #156	; 0x9c
 8084126:	f007 fb14 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 808412a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808412c:	a806      	add	r0, sp, #24
 808412e:	f007 fabf 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084132:	a827      	add	r0, sp, #156	; 0x9c
 8084134:	f007 f994 	bl	808b460 <_ZN6StringD1Ev>
 8084138:	a81e      	add	r0, sp, #120	; 0x78
 808413a:	f007 f991 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(CARBON_DIOXIDE_PACKET_CONSTANT) + String(CO2_float, 0);
 808413e:	4d96      	ldr	r5, [pc, #600]	; (8084398 <_Z15outputDataToESPv+0x670>)
 8084140:	2143      	movs	r1, #67	; 0x43
 8084142:	a81a      	add	r0, sp, #104	; 0x68
 8084144:	f007 fa39 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084148:	a91a      	add	r1, sp, #104	; 0x68
 808414a:	a827      	add	r0, sp, #156	; 0x9c
 808414c:	f007 fa11 	bl	808b572 <_ZN6StringC1ERKS_>
 8084150:	4622      	mov	r2, r4
 8084152:	6829      	ldr	r1, [r5, #0]
 8084154:	a81e      	add	r0, sp, #120	; 0x78
 8084156:	f007 fa67 	bl	808b628 <_ZN6StringC1Efi>
 808415a:	a91e      	add	r1, sp, #120	; 0x78
 808415c:	a827      	add	r0, sp, #156	; 0x9c
 808415e:	f007 faec 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8084162:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084164:	a802      	add	r0, sp, #8
 8084166:	f007 faa3 	bl	808b6b0 <_ZN6String6concatERKS_>
 808416a:	a81e      	add	r0, sp, #120	; 0x78
 808416c:	f007 f978 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084170:	a827      	add	r0, sp, #156	; 0x9c
 8084172:	f007 f975 	bl	808b460 <_ZN6StringD1Ev>
 8084176:	a81a      	add	r0, sp, #104	; 0x68
 8084178:	f007 f972 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(CO2_float, 0) + ",";
 808417c:	4622      	mov	r2, r4
 808417e:	6829      	ldr	r1, [r5, #0]
 8084180:	a81e      	add	r0, sp, #120	; 0x78
 8084182:	f007 fa51 	bl	808b628 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8084186:	a91e      	add	r1, sp, #120	; 0x78
 8084188:	a827      	add	r0, sp, #156	; 0x9c
 808418a:	f007 f9f2 	bl	808b572 <_ZN6StringC1ERKS_>
 808418e:	4981      	ldr	r1, [pc, #516]	; (8084394 <_Z15outputDataToESPv+0x66c>)
 8084190:	a827      	add	r0, sp, #156	; 0x9c
 8084192:	f007 fade 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8084196:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084198:	a806      	add	r0, sp, #24
 808419a:	f007 fa89 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808419e:	a827      	add	r0, sp, #156	; 0x9c
 80841a0:	f007 f95e 	bl	808b460 <_ZN6StringD1Ev>
 80841a4:	a81e      	add	r0, sp, #120	; 0x78
 80841a6:	f007 f95b 	bl	808b460 <_ZN6StringD1Ev>
    if(voc_enabled){
 80841aa:	4b7c      	ldr	r3, [pc, #496]	; (808439c <_Z15outputDataToESPv+0x674>)
 80841ac:	681b      	ldr	r3, [r3, #0]
 80841ae:	2b00      	cmp	r3, #0
 80841b0:	d035      	beq.n	808421e <_Z15outputDataToESPv+0x4f6>
        cloud_output_string += String(VOC_PACKET_CONSTANT) + String(air_quality_score, 1);
 80841b2:	2167      	movs	r1, #103	; 0x67
 80841b4:	4c7a      	ldr	r4, [pc, #488]	; (80843a0 <_Z15outputDataToESPv+0x678>)
 80841b6:	a81a      	add	r0, sp, #104	; 0x68
 80841b8:	f007 f9ff 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 80841bc:	a91a      	add	r1, sp, #104	; 0x68
 80841be:	a827      	add	r0, sp, #156	; 0x9c
 80841c0:	f007 f9d7 	bl	808b572 <_ZN6StringC1ERKS_>
 80841c4:	2201      	movs	r2, #1
 80841c6:	6821      	ldr	r1, [r4, #0]
 80841c8:	a81e      	add	r0, sp, #120	; 0x78
 80841ca:	f007 fa2d 	bl	808b628 <_ZN6StringC1Efi>
 80841ce:	a91e      	add	r1, sp, #120	; 0x78
 80841d0:	a827      	add	r0, sp, #156	; 0x9c
 80841d2:	f007 fab2 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 80841d6:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80841d8:	a802      	add	r0, sp, #8
 80841da:	f007 fa69 	bl	808b6b0 <_ZN6String6concatERKS_>
 80841de:	a81e      	add	r0, sp, #120	; 0x78
 80841e0:	f007 f93e 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80841e4:	a827      	add	r0, sp, #156	; 0x9c
 80841e6:	f007 f93b 	bl	808b460 <_ZN6StringD1Ev>
 80841ea:	a81a      	add	r0, sp, #104	; 0x68
 80841ec:	f007 f938 	bl	808b460 <_ZN6StringD1Ev>
        csv_output_string += String(air_quality_score, 1) + ",";
 80841f0:	2201      	movs	r2, #1
 80841f2:	6821      	ldr	r1, [r4, #0]
 80841f4:	a81e      	add	r0, sp, #120	; 0x78
 80841f6:	f007 fa17 	bl	808b628 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 80841fa:	a91e      	add	r1, sp, #120	; 0x78
 80841fc:	a827      	add	r0, sp, #156	; 0x9c
 80841fe:	f007 f9b8 	bl	808b572 <_ZN6StringC1ERKS_>
 8084202:	4964      	ldr	r1, [pc, #400]	; (8084394 <_Z15outputDataToESPv+0x66c>)
 8084204:	a827      	add	r0, sp, #156	; 0x9c
 8084206:	f007 faa4 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 808420a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808420c:	a806      	add	r0, sp, #24
 808420e:	f007 fa4f 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084212:	a827      	add	r0, sp, #156	; 0x9c
 8084214:	f007 f924 	bl	808b460 <_ZN6StringD1Ev>
 8084218:	a81e      	add	r0, sp, #120	; 0x78
 808421a:	f007 f921 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(PM1_PACKET_CONSTANT) + String(PM01Value);
 808421e:	4c61      	ldr	r4, [pc, #388]	; (80843a4 <_Z15outputDataToESPv+0x67c>)
 8084220:	2172      	movs	r1, #114	; 0x72
 8084222:	a81a      	add	r0, sp, #104	; 0x68
 8084224:	f007 f9c9 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084228:	a91a      	add	r1, sp, #104	; 0x68
 808422a:	a827      	add	r0, sp, #156	; 0x9c
 808422c:	f007 f9a1 	bl	808b572 <_ZN6StringC1ERKS_>
 8084230:	220a      	movs	r2, #10
 8084232:	6821      	ldr	r1, [r4, #0]
 8084234:	a81e      	add	r0, sp, #120	; 0x78
 8084236:	f007 f9d1 	bl	808b5dc <_ZN6StringC1Eih>
 808423a:	a91e      	add	r1, sp, #120	; 0x78
 808423c:	a827      	add	r0, sp, #156	; 0x9c
 808423e:	f007 fa7c 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8084242:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084244:	a802      	add	r0, sp, #8
 8084246:	f007 fa33 	bl	808b6b0 <_ZN6String6concatERKS_>
 808424a:	a81e      	add	r0, sp, #120	; 0x78
 808424c:	f007 f908 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084250:	a827      	add	r0, sp, #156	; 0x9c
 8084252:	f007 f905 	bl	808b460 <_ZN6StringD1Ev>
 8084256:	a81a      	add	r0, sp, #104	; 0x68
 8084258:	f007 f902 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(PM01Value) + ",";
 808425c:	220a      	movs	r2, #10
 808425e:	6821      	ldr	r1, [r4, #0]
 8084260:	a81e      	add	r0, sp, #120	; 0x78
 8084262:	f007 f9bb 	bl	808b5dc <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8084266:	a91e      	add	r1, sp, #120	; 0x78
 8084268:	a827      	add	r0, sp, #156	; 0x9c
 808426a:	f007 f982 	bl	808b572 <_ZN6StringC1ERKS_>
 808426e:	4949      	ldr	r1, [pc, #292]	; (8084394 <_Z15outputDataToESPv+0x66c>)
 8084270:	a827      	add	r0, sp, #156	; 0x9c
 8084272:	f007 fa6e 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8084276:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084278:	a806      	add	r0, sp, #24
 808427a:	f007 fa19 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808427e:	a827      	add	r0, sp, #156	; 0x9c
 8084280:	f007 f8ee 	bl	808b460 <_ZN6StringD1Ev>
 8084284:	a81e      	add	r0, sp, #120	; 0x78
 8084286:	f007 f8eb 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(PM2PT5_PACKET_CONSTANT) + String(corrected_PM_25, 0);
 808428a:	4c47      	ldr	r4, [pc, #284]	; (80843a8 <_Z15outputDataToESPv+0x680>)
 808428c:	2152      	movs	r1, #82	; 0x52
 808428e:	a81a      	add	r0, sp, #104	; 0x68
 8084290:	f007 f993 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084294:	a91a      	add	r1, sp, #104	; 0x68
 8084296:	a827      	add	r0, sp, #156	; 0x9c
 8084298:	f007 f96b 	bl	808b572 <_ZN6StringC1ERKS_>
 808429c:	2200      	movs	r2, #0
 808429e:	6821      	ldr	r1, [r4, #0]
 80842a0:	a81e      	add	r0, sp, #120	; 0x78
 80842a2:	f007 f9c1 	bl	808b628 <_ZN6StringC1Efi>
 80842a6:	a91e      	add	r1, sp, #120	; 0x78
 80842a8:	a827      	add	r0, sp, #156	; 0x9c
 80842aa:	f007 fa46 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 80842ae:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80842b0:	a802      	add	r0, sp, #8
 80842b2:	f007 f9fd 	bl	808b6b0 <_ZN6String6concatERKS_>
 80842b6:	a81e      	add	r0, sp, #120	; 0x78
 80842b8:	f007 f8d2 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80842bc:	a827      	add	r0, sp, #156	; 0x9c
 80842be:	f007 f8cf 	bl	808b460 <_ZN6StringD1Ev>
 80842c2:	a81a      	add	r0, sp, #104	; 0x68
 80842c4:	f007 f8cc 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(corrected_PM_25, 0) + ",";
 80842c8:	2200      	movs	r2, #0
 80842ca:	6821      	ldr	r1, [r4, #0]
 80842cc:	a81e      	add	r0, sp, #120	; 0x78
 80842ce:	f007 f9ab 	bl	808b628 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 80842d2:	a91e      	add	r1, sp, #120	; 0x78
 80842d4:	a827      	add	r0, sp, #156	; 0x9c
 80842d6:	f007 f94c 	bl	808b572 <_ZN6StringC1ERKS_>
 80842da:	492e      	ldr	r1, [pc, #184]	; (8084394 <_Z15outputDataToESPv+0x66c>)
 80842dc:	a827      	add	r0, sp, #156	; 0x9c
 80842de:	f007 fa38 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 80842e2:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80842e4:	a806      	add	r0, sp, #24
 80842e6:	f007 f9e3 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80842ea:	a827      	add	r0, sp, #156	; 0x9c
 80842ec:	f007 f8b8 	bl	808b460 <_ZN6StringD1Ev>
 80842f0:	a81e      	add	r0, sp, #120	; 0x78
 80842f2:	f007 f8b5 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(PM10_PACKET_CONSTANT) + String(PM10Value);
 80842f6:	4c2d      	ldr	r4, [pc, #180]	; (80843ac <_Z15outputDataToESPv+0x684>)
 80842f8:	2171      	movs	r1, #113	; 0x71
 80842fa:	a81a      	add	r0, sp, #104	; 0x68
 80842fc:	f007 f95d 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084300:	a91a      	add	r1, sp, #104	; 0x68
 8084302:	a827      	add	r0, sp, #156	; 0x9c
 8084304:	f007 f935 	bl	808b572 <_ZN6StringC1ERKS_>
 8084308:	220a      	movs	r2, #10
 808430a:	6821      	ldr	r1, [r4, #0]
 808430c:	a81e      	add	r0, sp, #120	; 0x78
 808430e:	f007 f965 	bl	808b5dc <_ZN6StringC1Eih>
 8084312:	a91e      	add	r1, sp, #120	; 0x78
 8084314:	a827      	add	r0, sp, #156	; 0x9c
 8084316:	f007 fa10 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 808431a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808431c:	a802      	add	r0, sp, #8
 808431e:	f007 f9c7 	bl	808b6b0 <_ZN6String6concatERKS_>
 8084322:	a81e      	add	r0, sp, #120	; 0x78
 8084324:	f007 f89c 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084328:	a827      	add	r0, sp, #156	; 0x9c
 808432a:	f007 f899 	bl	808b460 <_ZN6StringD1Ev>
 808432e:	a81a      	add	r0, sp, #104	; 0x68
 8084330:	f007 f896 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(PM10Value) + ",";
 8084334:	220a      	movs	r2, #10
 8084336:	6821      	ldr	r1, [r4, #0]
 8084338:	a81e      	add	r0, sp, #120	; 0x78
 808433a:	f007 f94f 	bl	808b5dc <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 808433e:	a91e      	add	r1, sp, #120	; 0x78
 8084340:	a827      	add	r0, sp, #156	; 0x9c
 8084342:	f007 f916 	bl	808b572 <_ZN6StringC1ERKS_>
 8084346:	4913      	ldr	r1, [pc, #76]	; (8084394 <_Z15outputDataToESPv+0x66c>)
 8084348:	a827      	add	r0, sp, #156	; 0x9c
 808434a:	f007 fa02 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 808434e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084350:	a806      	add	r0, sp, #24
 8084352:	f007 f9ad 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084356:	a827      	add	r0, sp, #156	; 0x9c
 8084358:	f007 f882 	bl	808b460 <_ZN6StringD1Ev>
 808435c:	a81e      	add	r0, sp, #120	; 0x78
 808435e:	f007 f87f 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(TEMPERATURE_PACKET_CONSTANT) + String(readTemperature(), 1);
 8084362:	2174      	movs	r1, #116	; 0x74
 8084364:	a81a      	add	r0, sp, #104	; 0x68
 8084366:	f007 f928 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 808436a:	a91a      	add	r1, sp, #104	; 0x68
 808436c:	a827      	add	r0, sp, #156	; 0x9c
 808436e:	f007 f900 	bl	808b572 <_ZN6StringC1ERKS_>
 8084372:	f7fd f959 	bl	8081628 <_Z15readTemperaturev>
 8084376:	2201      	movs	r2, #1
 8084378:	4601      	mov	r1, r0
 808437a:	a81e      	add	r0, sp, #120	; 0x78
 808437c:	f007 f954 	bl	808b628 <_ZN6StringC1Efi>
 8084380:	a91e      	add	r1, sp, #120	; 0x78
 8084382:	a827      	add	r0, sp, #156	; 0x9c
 8084384:	f007 f9d9 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8084388:	4601      	mov	r1, r0
 808438a:	e011      	b.n	80843b0 <_Z15outputDataToESPv+0x688>
 808438c:	08092f01 	.word	0x08092f01
 8084390:	20000340 	.word	0x20000340
 8084394:	080940f6 	.word	0x080940f6
 8084398:	2000032c 	.word	0x2000032c
 808439c:	20000d10 	.word	0x20000d10
 80843a0:	200005e4 	.word	0x200005e4
 80843a4:	2000035c 	.word	0x2000035c
 80843a8:	2000068c 	.word	0x2000068c
 80843ac:	20000360 	.word	0x20000360
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80843b0:	a802      	add	r0, sp, #8
 80843b2:	f007 f97d 	bl	808b6b0 <_ZN6String6concatERKS_>
 80843b6:	a81e      	add	r0, sp, #120	; 0x78
 80843b8:	f007 f852 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80843bc:	a827      	add	r0, sp, #156	; 0x9c
 80843be:	f007 f84f 	bl	808b460 <_ZN6StringD1Ev>
 80843c2:	a81a      	add	r0, sp, #104	; 0x68
 80843c4:	f007 f84c 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(readTemperature(), 1) + ",";
 80843c8:	f7fd f92e 	bl	8081628 <_Z15readTemperaturev>
 80843cc:	2201      	movs	r2, #1
 80843ce:	4601      	mov	r1, r0
 80843d0:	a81e      	add	r0, sp, #120	; 0x78
 80843d2:	f007 f929 	bl	808b628 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 80843d6:	a91e      	add	r1, sp, #120	; 0x78
 80843d8:	a827      	add	r0, sp, #156	; 0x9c
 80843da:	f007 f8ca 	bl	808b572 <_ZN6StringC1ERKS_>
 80843de:	49b7      	ldr	r1, [pc, #732]	; (80846bc <_Z15outputDataToESPv+0x994>)
 80843e0:	a827      	add	r0, sp, #156	; 0x9c
 80843e2:	f007 f9b6 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 80843e6:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80843e8:	a806      	add	r0, sp, #24
 80843ea:	f007 f961 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80843ee:	a827      	add	r0, sp, #156	; 0x9c
 80843f0:	f007 f836 	bl	808b460 <_ZN6StringD1Ev>
 80843f4:	a81e      	add	r0, sp, #120	; 0x78
 80843f6:	f007 f833 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(PRESSURE_PACKET_CONSTANT) + String(bme.pressure / 100.0, 1);
 80843fa:	4db1      	ldr	r5, [pc, #708]	; (80846c0 <_Z15outputDataToESPv+0x998>)
 80843fc:	2150      	movs	r1, #80	; 0x50
 80843fe:	a81a      	add	r0, sp, #104	; 0x68
 8084400:	f007 f8db 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084404:	a91a      	add	r1, sp, #104	; 0x68
 8084406:	a827      	add	r0, sp, #156	; 0x9c
 8084408:	f007 f8b3 	bl	808b572 <_ZN6StringC1ERKS_>
 808440c:	6868      	ldr	r0, [r5, #4]
 808440e:	f009 f971 	bl	808d6f4 <__aeabi_f2d>
 8084412:	2200      	movs	r2, #0
 8084414:	4bab      	ldr	r3, [pc, #684]	; (80846c4 <_Z15outputDataToESPv+0x99c>)
 8084416:	f009 faef 	bl	808d9f8 <__aeabi_ddiv>
 808441a:	2401      	movs	r4, #1
 808441c:	4602      	mov	r2, r0
 808441e:	460b      	mov	r3, r1
 8084420:	9400      	str	r4, [sp, #0]
 8084422:	a81e      	add	r0, sp, #120	; 0x78
 8084424:	f007 f917 	bl	808b656 <_ZN6StringC1Edi>
 8084428:	a91e      	add	r1, sp, #120	; 0x78
 808442a:	a827      	add	r0, sp, #156	; 0x9c
 808442c:	f007 f985 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8084430:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084432:	a802      	add	r0, sp, #8
 8084434:	f007 f93c 	bl	808b6b0 <_ZN6String6concatERKS_>
 8084438:	a81e      	add	r0, sp, #120	; 0x78
 808443a:	f007 f811 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808443e:	a827      	add	r0, sp, #156	; 0x9c
 8084440:	f007 f80e 	bl	808b460 <_ZN6StringD1Ev>
 8084444:	a81a      	add	r0, sp, #104	; 0x68
 8084446:	f007 f80b 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(bme.pressure / 100.0, 1) + ",";
 808444a:	6868      	ldr	r0, [r5, #4]
 808444c:	f009 f952 	bl	808d6f4 <__aeabi_f2d>
 8084450:	2200      	movs	r2, #0
 8084452:	4b9c      	ldr	r3, [pc, #624]	; (80846c4 <_Z15outputDataToESPv+0x99c>)
 8084454:	f009 fad0 	bl	808d9f8 <__aeabi_ddiv>
 8084458:	9400      	str	r4, [sp, #0]
 808445a:	460b      	mov	r3, r1
 808445c:	4602      	mov	r2, r0
 808445e:	a81e      	add	r0, sp, #120	; 0x78
 8084460:	f007 f8f9 	bl	808b656 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8084464:	a91e      	add	r1, sp, #120	; 0x78
 8084466:	a827      	add	r0, sp, #156	; 0x9c
 8084468:	f007 f883 	bl	808b572 <_ZN6StringC1ERKS_>
 808446c:	4993      	ldr	r1, [pc, #588]	; (80846bc <_Z15outputDataToESPv+0x994>)
 808446e:	a827      	add	r0, sp, #156	; 0x9c
 8084470:	f007 f96f 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8084474:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084476:	a806      	add	r0, sp, #24
 8084478:	f007 f91a 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808447c:	a827      	add	r0, sp, #156	; 0x9c
 808447e:	f006 ffef 	bl	808b460 <_ZN6StringD1Ev>
 8084482:	a81e      	add	r0, sp, #120	; 0x78
 8084484:	f006 ffec 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(HUMIDITY_PACKET_CONSTANT) + String(readHumidity(), 1);
 8084488:	2168      	movs	r1, #104	; 0x68
 808448a:	eb0d 0001 	add.w	r0, sp, r1
 808448e:	f007 f894 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084492:	a91a      	add	r1, sp, #104	; 0x68
 8084494:	a827      	add	r0, sp, #156	; 0x9c
 8084496:	f007 f86c 	bl	808b572 <_ZN6StringC1ERKS_>
 808449a:	f7fd f93f 	bl	808171c <_Z12readHumidityv>
 808449e:	4622      	mov	r2, r4
 80844a0:	4601      	mov	r1, r0
 80844a2:	a81e      	add	r0, sp, #120	; 0x78
 80844a4:	f007 f8c0 	bl	808b628 <_ZN6StringC1Efi>
 80844a8:	a91e      	add	r1, sp, #120	; 0x78
 80844aa:	a827      	add	r0, sp, #156	; 0x9c
 80844ac:	f007 f945 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 80844b0:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80844b2:	a802      	add	r0, sp, #8
 80844b4:	f007 f8fc 	bl	808b6b0 <_ZN6String6concatERKS_>
 80844b8:	a81e      	add	r0, sp, #120	; 0x78
 80844ba:	f006 ffd1 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80844be:	a827      	add	r0, sp, #156	; 0x9c
 80844c0:	f006 ffce 	bl	808b460 <_ZN6StringD1Ev>
 80844c4:	a81a      	add	r0, sp, #104	; 0x68
 80844c6:	f006 ffcb 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(readHumidity(), 1) + ",";
 80844ca:	f7fd f927 	bl	808171c <_Z12readHumidityv>
 80844ce:	4622      	mov	r2, r4
 80844d0:	4601      	mov	r1, r0
 80844d2:	a81e      	add	r0, sp, #120	; 0x78
 80844d4:	f007 f8a8 	bl	808b628 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 80844d8:	a91e      	add	r1, sp, #120	; 0x78
 80844da:	a827      	add	r0, sp, #156	; 0x9c
 80844dc:	f007 f849 	bl	808b572 <_ZN6StringC1ERKS_>
 80844e0:	4976      	ldr	r1, [pc, #472]	; (80846bc <_Z15outputDataToESPv+0x994>)
 80844e2:	a827      	add	r0, sp, #156	; 0x9c
 80844e4:	f007 f935 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 80844e8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80844ea:	a806      	add	r0, sp, #24
 80844ec:	f007 f8e0 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80844f0:	a827      	add	r0, sp, #156	; 0x9c
 80844f2:	f006 ffb5 	bl	808b460 <_ZN6StringD1Ev>
 80844f6:	a81e      	add	r0, sp, #120	; 0x78
 80844f8:	f006 ffb2 	bl	808b460 <_ZN6StringD1Ev>
    if(ozone_enabled){
 80844fc:	4b72      	ldr	r3, [pc, #456]	; (80846c8 <_Z15outputDataToESPv+0x9a0>)
 80844fe:	681b      	ldr	r3, [r3, #0]
 8084500:	2b00      	cmp	r3, #0
 8084502:	d035      	beq.n	8084570 <_Z15outputDataToESPv+0x848>
        cloud_output_string += String(OZONE_PACKET_CONSTANT) + String(O3_float, 1);
 8084504:	214f      	movs	r1, #79	; 0x4f
 8084506:	4d71      	ldr	r5, [pc, #452]	; (80846cc <_Z15outputDataToESPv+0x9a4>)
 8084508:	a81a      	add	r0, sp, #104	; 0x68
 808450a:	f007 f856 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 808450e:	a91a      	add	r1, sp, #104	; 0x68
 8084510:	a827      	add	r0, sp, #156	; 0x9c
 8084512:	f007 f82e 	bl	808b572 <_ZN6StringC1ERKS_>
 8084516:	4622      	mov	r2, r4
 8084518:	6829      	ldr	r1, [r5, #0]
 808451a:	a81e      	add	r0, sp, #120	; 0x78
 808451c:	f007 f884 	bl	808b628 <_ZN6StringC1Efi>
 8084520:	a91e      	add	r1, sp, #120	; 0x78
 8084522:	a827      	add	r0, sp, #156	; 0x9c
 8084524:	f007 f909 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8084528:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808452a:	a802      	add	r0, sp, #8
 808452c:	f007 f8c0 	bl	808b6b0 <_ZN6String6concatERKS_>
 8084530:	a81e      	add	r0, sp, #120	; 0x78
 8084532:	f006 ff95 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084536:	a827      	add	r0, sp, #156	; 0x9c
 8084538:	f006 ff92 	bl	808b460 <_ZN6StringD1Ev>
 808453c:	a81a      	add	r0, sp, #104	; 0x68
 808453e:	f006 ff8f 	bl	808b460 <_ZN6StringD1Ev>
        csv_output_string += String(O3_float, 1) + ",";
 8084542:	4622      	mov	r2, r4
 8084544:	6829      	ldr	r1, [r5, #0]
 8084546:	a81e      	add	r0, sp, #120	; 0x78
 8084548:	f007 f86e 	bl	808b628 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 808454c:	a91e      	add	r1, sp, #120	; 0x78
 808454e:	a827      	add	r0, sp, #156	; 0x9c
 8084550:	f007 f80f 	bl	808b572 <_ZN6StringC1ERKS_>
 8084554:	4959      	ldr	r1, [pc, #356]	; (80846bc <_Z15outputDataToESPv+0x994>)
 8084556:	a827      	add	r0, sp, #156	; 0x9c
 8084558:	f007 f8fb 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 808455c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808455e:	a806      	add	r0, sp, #24
 8084560:	f007 f8a6 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084564:	a827      	add	r0, sp, #156	; 0x9c
 8084566:	f006 ff7b 	bl	808b460 <_ZN6StringD1Ev>
 808456a:	a81e      	add	r0, sp, #120	; 0x78
 808456c:	f006 ff78 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(BATTERY_PACKET_CONSTANT) + String(fuel.getSoC(), 1);
 8084570:	2178      	movs	r1, #120	; 0x78
 8084572:	a81a      	add	r0, sp, #104	; 0x68
 8084574:	f007 f821 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084578:	a91a      	add	r1, sp, #104	; 0x68
 808457a:	a827      	add	r0, sp, #156	; 0x9c
 808457c:	f006 fff9 	bl	808b572 <_ZN6StringC1ERKS_>
 8084580:	4853      	ldr	r0, [pc, #332]	; (80846d0 <_Z15outputDataToESPv+0x9a8>)
 8084582:	f007 fe2f 	bl	808c1e4 <_ZN9FuelGauge6getSoCEv>
 8084586:	2201      	movs	r2, #1
 8084588:	4601      	mov	r1, r0
 808458a:	a81e      	add	r0, sp, #120	; 0x78
 808458c:	f007 f84c 	bl	808b628 <_ZN6StringC1Efi>
 8084590:	a91e      	add	r1, sp, #120	; 0x78
 8084592:	a827      	add	r0, sp, #156	; 0x9c
 8084594:	f007 f8d1 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8084598:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808459a:	a802      	add	r0, sp, #8
 808459c:	f007 f888 	bl	808b6b0 <_ZN6String6concatERKS_>
 80845a0:	a81e      	add	r0, sp, #120	; 0x78
 80845a2:	f006 ff5d 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80845a6:	a827      	add	r0, sp, #156	; 0x9c
 80845a8:	f006 ff5a 	bl	808b460 <_ZN6StringD1Ev>
 80845ac:	a81a      	add	r0, sp, #104	; 0x68
 80845ae:	f006 ff57 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(fuel.getSoC(), 1) + ",";
 80845b2:	4847      	ldr	r0, [pc, #284]	; (80846d0 <_Z15outputDataToESPv+0x9a8>)
 80845b4:	f007 fe16 	bl	808c1e4 <_ZN9FuelGauge6getSoCEv>
 80845b8:	2201      	movs	r2, #1
 80845ba:	4601      	mov	r1, r0
 80845bc:	a81e      	add	r0, sp, #120	; 0x78
 80845be:	f007 f833 	bl	808b628 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 80845c2:	a91e      	add	r1, sp, #120	; 0x78
 80845c4:	a827      	add	r0, sp, #156	; 0x9c
 80845c6:	f006 ffd4 	bl	808b572 <_ZN6StringC1ERKS_>
 80845ca:	493c      	ldr	r1, [pc, #240]	; (80846bc <_Z15outputDataToESPv+0x994>)
 80845cc:	a827      	add	r0, sp, #156	; 0x9c
 80845ce:	f007 f8c0 	bl	808b752 <_ZplRK15StringSumHelperPKc>
    cloud_output_string += String(SOUND_PACKET_CONSTANT) + String(sound_average, 0);
 80845d2:	2500      	movs	r5, #0
    csv_output_string += String(fuel.getSoC(), 1) + ",";
 80845d4:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80845d6:	a806      	add	r0, sp, #24
 80845d8:	f007 f86a 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80845dc:	a827      	add	r0, sp, #156	; 0x9c
 80845de:	f006 ff3f 	bl	808b460 <_ZN6StringD1Ev>
 80845e2:	a81e      	add	r0, sp, #120	; 0x78
 80845e4:	f006 ff3c 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(SOUND_PACKET_CONSTANT) + String(sound_average, 0);
 80845e8:	2173      	movs	r1, #115	; 0x73
 80845ea:	a81a      	add	r0, sp, #104	; 0x68
 80845ec:	f006 ffe5 	bl	808b5ba <_ZN6StringC1Ec>
 80845f0:	4c38      	ldr	r4, [pc, #224]	; (80846d4 <_Z15outputDataToESPv+0x9ac>)
	StringSumHelper(const String &s) : String(s) {}
 80845f2:	a91a      	add	r1, sp, #104	; 0x68
 80845f4:	a827      	add	r0, sp, #156	; 0x9c
 80845f6:	f006 ffbc 	bl	808b572 <_ZN6StringC1ERKS_>
 80845fa:	9500      	str	r5, [sp, #0]
 80845fc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8084600:	a81e      	add	r0, sp, #120	; 0x78
 8084602:	f007 f828 	bl	808b656 <_ZN6StringC1Edi>
 8084606:	a91e      	add	r1, sp, #120	; 0x78
 8084608:	a827      	add	r0, sp, #156	; 0x9c
 808460a:	f007 f896 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 808460e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084610:	a802      	add	r0, sp, #8
 8084612:	f007 f84d 	bl	808b6b0 <_ZN6String6concatERKS_>
 8084616:	a81e      	add	r0, sp, #120	; 0x78
 8084618:	f006 ff22 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808461c:	a827      	add	r0, sp, #156	; 0x9c
 808461e:	f006 ff1f 	bl	808b460 <_ZN6StringD1Ev>
 8084622:	a81a      	add	r0, sp, #104	; 0x68
 8084624:	f006 ff1c 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(sound_average, 0) + ",";
 8084628:	9500      	str	r5, [sp, #0]
 808462a:	e9d4 2300 	ldrd	r2, r3, [r4]
 808462e:	a81e      	add	r0, sp, #120	; 0x78
 8084630:	f007 f811 	bl	808b656 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8084634:	a91e      	add	r1, sp, #120	; 0x78
 8084636:	a827      	add	r0, sp, #156	; 0x9c
 8084638:	f006 ff9b 	bl	808b572 <_ZN6StringC1ERKS_>
 808463c:	491f      	ldr	r1, [pc, #124]	; (80846bc <_Z15outputDataToESPv+0x994>)
 808463e:	a827      	add	r0, sp, #156	; 0x9c
 8084640:	f007 f887 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8084644:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084646:	a806      	add	r0, sp, #24
 8084648:	f007 f832 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808464c:	a827      	add	r0, sp, #156	; 0x9c
 808464e:	f006 ff07 	bl	808b460 <_ZN6StringD1Ev>
 8084652:	a81e      	add	r0, sp, #120	; 0x78
 8084654:	f006 ff04 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(LATITUDE_PACKET_CONSTANT);
 8084658:	2161      	movs	r1, #97	; 0x61
 808465a:	a827      	add	r0, sp, #156	; 0x9c
 808465c:	f006 ffad 	bl	808b5ba <_ZN6StringC1Ec>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084660:	a927      	add	r1, sp, #156	; 0x9c
 8084662:	a802      	add	r0, sp, #8
 8084664:	f007 f824 	bl	808b6b0 <_ZN6String6concatERKS_>
 8084668:	a827      	add	r0, sp, #156	; 0x9c
 808466a:	f006 fef9 	bl	808b460 <_ZN6StringD1Ev>
    if(gps.get_latitude() != 0){
 808466e:	481a      	ldr	r0, [pc, #104]	; (80846d8 <_Z15outputDataToESPv+0x9b0>)
 8084670:	f002 ff0e 	bl	8087490 <_ZN3GPS12get_latitudeEv>
 8084674:	2200      	movs	r2, #0
 8084676:	2300      	movs	r3, #0
 8084678:	f009 fafc 	bl	808dc74 <__aeabi_dcmpeq>
 808467c:	2800      	cmp	r0, #0
 808467e:	f040 81fc 	bne.w	8084a7a <_Z15outputDataToESPv+0xd52>
        if(gps.get_nsIndicator() == 0){
 8084682:	4815      	ldr	r0, [pc, #84]	; (80846d8 <_Z15outputDataToESPv+0x9b0>)
 8084684:	f002 ff1f 	bl	80874c6 <_ZN3GPS15get_nsIndicatorEv>
 8084688:	b938      	cbnz	r0, 808469a <_Z15outputDataToESPv+0x972>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808468a:	4914      	ldr	r1, [pc, #80]	; (80846dc <_Z15outputDataToESPv+0x9b4>)
 808468c:	a806      	add	r0, sp, #24
 808468e:	f007 f813 	bl	808b6b8 <_ZN6String6concatEPKc>
 8084692:	4912      	ldr	r1, [pc, #72]	; (80846dc <_Z15outputDataToESPv+0x9b4>)
 8084694:	a802      	add	r0, sp, #8
 8084696:	f007 f80f 	bl	808b6b8 <_ZN6String6concatEPKc>
        csv_output_string += String(gps.get_latitude()) + ",";
 808469a:	480f      	ldr	r0, [pc, #60]	; (80846d8 <_Z15outputDataToESPv+0x9b0>)
 808469c:	f002 fef8 	bl	8087490 <_ZN3GPS12get_latitudeEv>
 80846a0:	2406      	movs	r4, #6
 80846a2:	4602      	mov	r2, r0
 80846a4:	460b      	mov	r3, r1
 80846a6:	9400      	str	r4, [sp, #0]
 80846a8:	a81e      	add	r0, sp, #120	; 0x78
 80846aa:	f006 ffd4 	bl	808b656 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80846ae:	a91e      	add	r1, sp, #120	; 0x78
 80846b0:	a827      	add	r0, sp, #156	; 0x9c
 80846b2:	f006 ff5e 	bl	808b572 <_ZN6StringC1ERKS_>
 80846b6:	4901      	ldr	r1, [pc, #4]	; (80846bc <_Z15outputDataToESPv+0x994>)
 80846b8:	a827      	add	r0, sp, #156	; 0x9c
 80846ba:	e011      	b.n	80846e0 <_Z15outputDataToESPv+0x9b8>
 80846bc:	080940f6 	.word	0x080940f6
 80846c0:	200005ec 	.word	0x200005ec
 80846c4:	40590000 	.word	0x40590000
 80846c8:	20000808 	.word	0x20000808
 80846cc:	20000354 	.word	0x20000354
 80846d0:	2000070c 	.word	0x2000070c
 80846d4:	20000ce0 	.word	0x20000ce0
 80846d8:	20000720 	.word	0x20000720
 80846dc:	08092eb4 	.word	0x08092eb4
 80846e0:	f007 f837 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 80846e4:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80846e6:	a806      	add	r0, sp, #24
 80846e8:	f006 ffe2 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80846ec:	a827      	add	r0, sp, #156	; 0x9c
 80846ee:	f006 feb7 	bl	808b460 <_ZN6StringD1Ev>
 80846f2:	a81e      	add	r0, sp, #120	; 0x78
 80846f4:	f006 feb4 	bl	808b460 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_latitude());
 80846f8:	48b5      	ldr	r0, [pc, #724]	; (80849d0 <_Z15outputDataToESPv+0xca8>)
 80846fa:	f002 fec9 	bl	8087490 <_ZN3GPS12get_latitudeEv>
 80846fe:	9400      	str	r4, [sp, #0]
 8084700:	4602      	mov	r2, r0
 8084702:	460b      	mov	r3, r1
 8084704:	a827      	add	r0, sp, #156	; 0x9c
 8084706:	f006 ffa6 	bl	808b656 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808470a:	a927      	add	r1, sp, #156	; 0x9c
 808470c:	a802      	add	r0, sp, #8
 808470e:	f006 ffcf 	bl	808b6b0 <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_latitude);
 8084712:	a827      	add	r0, sp, #156	; 0x9c
 8084714:	f006 fea4 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(LONGITUDE_PACKET_CONSTANT);
 8084718:	216f      	movs	r1, #111	; 0x6f
 808471a:	a827      	add	r0, sp, #156	; 0x9c
 808471c:	f006 ff4d 	bl	808b5ba <_ZN6StringC1Ec>
 8084720:	a927      	add	r1, sp, #156	; 0x9c
 8084722:	a802      	add	r0, sp, #8
 8084724:	f006 ffc4 	bl	808b6b0 <_ZN6String6concatERKS_>
 8084728:	a827      	add	r0, sp, #156	; 0x9c
 808472a:	f006 fe99 	bl	808b460 <_ZN6StringD1Ev>
    if(gps.get_longitude() != 0){
 808472e:	48a8      	ldr	r0, [pc, #672]	; (80849d0 <_Z15outputDataToESPv+0xca8>)
 8084730:	f002 feb3 	bl	808749a <_ZN3GPS13get_longitudeEv>
 8084734:	2200      	movs	r2, #0
 8084736:	2300      	movs	r3, #0
 8084738:	f009 fa9c 	bl	808dc74 <__aeabi_dcmpeq>
 808473c:	2800      	cmp	r0, #0
 808473e:	f040 81b7 	bne.w	8084ab0 <_Z15outputDataToESPv+0xd88>
        if(gps.get_ewIndicator() == 0x01){
 8084742:	48a3      	ldr	r0, [pc, #652]	; (80849d0 <_Z15outputDataToESPv+0xca8>)
 8084744:	f002 fec2 	bl	80874cc <_ZN3GPS15get_ewIndicatorEv>
 8084748:	2801      	cmp	r0, #1
 808474a:	d107      	bne.n	808475c <_Z15outputDataToESPv+0xa34>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808474c:	49a1      	ldr	r1, [pc, #644]	; (80849d4 <_Z15outputDataToESPv+0xcac>)
 808474e:	a806      	add	r0, sp, #24
 8084750:	f006 ffb2 	bl	808b6b8 <_ZN6String6concatEPKc>
 8084754:	499f      	ldr	r1, [pc, #636]	; (80849d4 <_Z15outputDataToESPv+0xcac>)
 8084756:	a802      	add	r0, sp, #8
 8084758:	f006 ffae 	bl	808b6b8 <_ZN6String6concatEPKc>
        csv_output_string += String(gps.get_longitude()) + ",";
 808475c:	489c      	ldr	r0, [pc, #624]	; (80849d0 <_Z15outputDataToESPv+0xca8>)
 808475e:	f002 fe9c 	bl	808749a <_ZN3GPS13get_longitudeEv>
 8084762:	2406      	movs	r4, #6
 8084764:	4602      	mov	r2, r0
 8084766:	460b      	mov	r3, r1
 8084768:	9400      	str	r4, [sp, #0]
 808476a:	a81e      	add	r0, sp, #120	; 0x78
 808476c:	f006 ff73 	bl	808b656 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8084770:	a91e      	add	r1, sp, #120	; 0x78
 8084772:	a827      	add	r0, sp, #156	; 0x9c
 8084774:	f006 fefd 	bl	808b572 <_ZN6StringC1ERKS_>
 8084778:	4997      	ldr	r1, [pc, #604]	; (80849d8 <_Z15outputDataToESPv+0xcb0>)
 808477a:	a827      	add	r0, sp, #156	; 0x9c
 808477c:	f006 ffe9 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8084780:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084782:	a806      	add	r0, sp, #24
 8084784:	f006 ff94 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084788:	a827      	add	r0, sp, #156	; 0x9c
 808478a:	f006 fe69 	bl	808b460 <_ZN6StringD1Ev>
 808478e:	a81e      	add	r0, sp, #120	; 0x78
 8084790:	f006 fe66 	bl	808b460 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_longitude());
 8084794:	488e      	ldr	r0, [pc, #568]	; (80849d0 <_Z15outputDataToESPv+0xca8>)
 8084796:	f002 fe80 	bl	808749a <_ZN3GPS13get_longitudeEv>
 808479a:	9400      	str	r4, [sp, #0]
 808479c:	4602      	mov	r2, r0
 808479e:	460b      	mov	r3, r1
 80847a0:	a827      	add	r0, sp, #156	; 0x9c
 80847a2:	f006 ff58 	bl	808b656 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80847a6:	a927      	add	r1, sp, #156	; 0x9c
 80847a8:	a802      	add	r0, sp, #8
 80847aa:	f006 ff81 	bl	808b6b0 <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_longitude);
 80847ae:	a827      	add	r0, sp, #156	; 0x9c
 80847b0:	f006 fe56 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(ACCURACY_PACKET_CONSTANT);
 80847b4:	2163      	movs	r1, #99	; 0x63
 80847b6:	a827      	add	r0, sp, #156	; 0x9c
 80847b8:	f006 feff 	bl	808b5ba <_ZN6StringC1Ec>
 80847bc:	a927      	add	r1, sp, #156	; 0x9c
 80847be:	a802      	add	r0, sp, #8
 80847c0:	f006 ff76 	bl	808b6b0 <_ZN6String6concatERKS_>
 80847c4:	a827      	add	r0, sp, #156	; 0x9c
 80847c6:	f006 fe4b 	bl	808b460 <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0) {
 80847ca:	4881      	ldr	r0, [pc, #516]	; (80849d0 <_Z15outputDataToESPv+0xca8>)
 80847cc:	f002 fe65 	bl	808749a <_ZN3GPS13get_longitudeEv>
 80847d0:	2200      	movs	r2, #0
 80847d2:	2300      	movs	r3, #0
 80847d4:	f009 fa4e 	bl	808dc74 <__aeabi_dcmpeq>
 80847d8:	2800      	cmp	r0, #0
 80847da:	f040 8184 	bne.w	8084ae6 <_Z15outputDataToESPv+0xdbe>
        csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
 80847de:	487c      	ldr	r0, [pc, #496]	; (80849d0 <_Z15outputDataToESPv+0xca8>)
 80847e0:	f002 fe60 	bl	80874a4 <_ZN3GPS23get_horizontalDillutionEv>
 80847e4:	f008 ff74 	bl	808d6d0 <__aeabi_i2d>
 80847e8:	2200      	movs	r2, #0
 80847ea:	4b7c      	ldr	r3, [pc, #496]	; (80849dc <_Z15outputDataToESPv+0xcb4>)
 80847ec:	f009 f904 	bl	808d9f8 <__aeabi_ddiv>
 80847f0:	2406      	movs	r4, #6
 80847f2:	4602      	mov	r2, r0
 80847f4:	460b      	mov	r3, r1
 80847f6:	9400      	str	r4, [sp, #0]
 80847f8:	a81e      	add	r0, sp, #120	; 0x78
 80847fa:	f006 ff2c 	bl	808b656 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80847fe:	a91e      	add	r1, sp, #120	; 0x78
 8084800:	a827      	add	r0, sp, #156	; 0x9c
 8084802:	f006 feb6 	bl	808b572 <_ZN6StringC1ERKS_>
 8084806:	4974      	ldr	r1, [pc, #464]	; (80849d8 <_Z15outputDataToESPv+0xcb0>)
 8084808:	a827      	add	r0, sp, #156	; 0x9c
 808480a:	f006 ffa2 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 808480e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084810:	a806      	add	r0, sp, #24
 8084812:	f006 ff4d 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084816:	a827      	add	r0, sp, #156	; 0x9c
 8084818:	f006 fe22 	bl	808b460 <_ZN6StringD1Ev>
 808481c:	a81e      	add	r0, sp, #120	; 0x78
 808481e:	f006 fe1f 	bl	808b460 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
 8084822:	486b      	ldr	r0, [pc, #428]	; (80849d0 <_Z15outputDataToESPv+0xca8>)
 8084824:	f002 fe3e 	bl	80874a4 <_ZN3GPS23get_horizontalDillutionEv>
 8084828:	f008 ff52 	bl	808d6d0 <__aeabi_i2d>
 808482c:	2200      	movs	r2, #0
 808482e:	4b6b      	ldr	r3, [pc, #428]	; (80849dc <_Z15outputDataToESPv+0xcb4>)
 8084830:	f009 f8e2 	bl	808d9f8 <__aeabi_ddiv>
 8084834:	9400      	str	r4, [sp, #0]
 8084836:	4602      	mov	r2, r0
 8084838:	460b      	mov	r3, r1
 808483a:	a827      	add	r0, sp, #156	; 0x9c
 808483c:	f006 ff0b 	bl	808b656 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084840:	a927      	add	r1, sp, #156	; 0x9c
    csv_output_string += String(status_word.status_int) + ",";
 8084842:	4d67      	ldr	r5, [pc, #412]	; (80849e0 <_Z15outputDataToESPv+0xcb8>)
 8084844:	a802      	add	r0, sp, #8
 8084846:	f006 ff33 	bl	808b6b0 <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_accuracy);
 808484a:	a827      	add	r0, sp, #156	; 0x9c
 808484c:	f006 fe08 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(status_word.status_int) + ",";
 8084850:	220a      	movs	r2, #10
 8084852:	8829      	ldrh	r1, [r5, #0]
 8084854:	a81e      	add	r0, sp, #120	; 0x78
 8084856:	f006 fec1 	bl	808b5dc <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 808485a:	a91e      	add	r1, sp, #120	; 0x78
 808485c:	a827      	add	r0, sp, #156	; 0x9c
 808485e:	f006 fe88 	bl	808b572 <_ZN6StringC1ERKS_>
 8084862:	495d      	ldr	r1, [pc, #372]	; (80849d8 <_Z15outputDataToESPv+0xcb0>)
 8084864:	a827      	add	r0, sp, #156	; 0x9c
 8084866:	f006 ff74 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 808486a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808486c:	a806      	add	r0, sp, #24
 808486e:	f006 ff1f 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084872:	a827      	add	r0, sp, #156	; 0x9c
 8084874:	f006 fdf4 	bl	808b460 <_ZN6StringD1Ev>
 8084878:	a81e      	add	r0, sp, #120	; 0x78
 808487a:	f006 fdf1 	bl	808b460 <_ZN6StringD1Ev>
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
 808487e:	4b59      	ldr	r3, [pc, #356]	; (80849e4 <_Z15outputDataToESPv+0xcbc>)
 8084880:	4632      	mov	r2, r6
 8084882:	4959      	ldr	r1, [pc, #356]	; (80849e8 <_Z15outputDataToESPv+0xcc0>)
 8084884:	9300      	str	r3, [sp, #0]
 8084886:	a827      	add	r0, sp, #156	; 0x9c
 8084888:	463b      	mov	r3, r7
 808488a:	f007 fb61 	bl	808bf50 <_ZN9TimeClass6formatExPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808488e:	a927      	add	r1, sp, #156	; 0x9c
 8084890:	a806      	add	r0, sp, #24
 8084892:	f006 ff0d 	bl	808b6b0 <_ZN6String6concatERKS_>
 8084896:	a827      	add	r0, sp, #156	; 0x9c
 8084898:	f006 fde2 	bl	808b460 <_ZN6StringD1Ev>
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 808489c:	2159      	movs	r1, #89	; 0x59
 808489e:	a81a      	add	r0, sp, #104	; 0x68
 80848a0:	f006 fe8b 	bl	808b5ba <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 80848a4:	a91a      	add	r1, sp, #104	; 0x68
 80848a6:	a827      	add	r0, sp, #156	; 0x9c
 80848a8:	f006 fe63 	bl	808b572 <_ZN6StringC1ERKS_>
 80848ac:	f007 fbaf 	bl	808c00e <_ZN9TimeClass3nowEv>
 80848b0:	220a      	movs	r2, #10
 80848b2:	4601      	mov	r1, r0
 80848b4:	a81e      	add	r0, sp, #120	; 0x78
 80848b6:	f006 fea4 	bl	808b602 <_ZN6StringC1Elh>
 80848ba:	a91e      	add	r1, sp, #120	; 0x78
 80848bc:	a827      	add	r0, sp, #156	; 0x9c
 80848be:	f006 ff3c 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 80848c2:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80848c4:	a802      	add	r0, sp, #8
 80848c6:	f006 fef3 	bl	808b6b0 <_ZN6String6concatERKS_>
 80848ca:	a81e      	add	r0, sp, #120	; 0x78
 80848cc:	f006 fdc8 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80848d0:	a827      	add	r0, sp, #156	; 0x9c
 80848d2:	f006 fdc5 	bl	808b460 <_ZN6StringD1Ev>
    if(debugging_enabled){
 80848d6:	4c45      	ldr	r4, [pc, #276]	; (80849ec <_Z15outputDataToESPv+0xcc4>)
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 80848d8:	a81a      	add	r0, sp, #104	; 0x68
 80848da:	f006 fdc1 	bl	808b460 <_ZN6StringD1Ev>
	String & operator += (char c)			{concat(c); return (*this);}
 80848de:	2126      	movs	r1, #38	; 0x26
 80848e0:	a802      	add	r0, sp, #8
 80848e2:	f006 fef8 	bl	808b6d6 <_ZN6String6concatEc>
    if(debugging_enabled){
 80848e6:	6823      	ldr	r3, [r4, #0]
 80848e8:	462f      	mov	r7, r5
 80848ea:	b14b      	cbz	r3, 8084900 <_Z15outputDataToESPv+0xbd8>
        Serial.println("Line to write to cloud:");
 80848ec:	f008 f8e2 	bl	808cab4 <_Z16_fetch_usbserialv>
 80848f0:	493f      	ldr	r1, [pc, #252]	; (80849f0 <_Z15outputDataToESPv+0xcc8>)
 80848f2:	f007 f824 	bl	808b93e <_ZN5Print7printlnEPKc>
        Serial.println(cloud_output_string);
 80848f6:	f008 f8dd 	bl	808cab4 <_Z16_fetch_usbserialv>
 80848fa:	9902      	ldr	r1, [sp, #8]
 80848fc:	f007 f81f 	bl	808b93e <_ZN5Print7printlnEPKc>
    outputToCloud(cloud_output_string, sensible_buf);
 8084900:	a902      	add	r1, sp, #8
 8084902:	a81e      	add	r0, sp, #120	; 0x78
 8084904:	f006 fe35 	bl	808b572 <_ZN6StringC1ERKS_>
 8084908:	a964      	add	r1, sp, #400	; 0x190
 808490a:	a827      	add	r0, sp, #156	; 0x9c
 808490c:	f006 fdf2 	bl	808b4f4 <_ZN6StringC1EPKc>
 8084910:	a927      	add	r1, sp, #156	; 0x9c
 8084912:	a81e      	add	r0, sp, #120	; 0x78
 8084914:	f7ff f83e 	bl	8083994 <_Z13outputToCloud6StringS_>
 8084918:	a827      	add	r0, sp, #156	; 0x9c
 808491a:	f006 fda1 	bl	808b460 <_ZN6StringD1Ev>
 808491e:	a81e      	add	r0, sp, #120	; 0x78
 8084920:	f006 fd9e 	bl	808b460 <_ZN6StringD1Ev>
    if(esp_wifi_connection_status){
 8084924:	4b33      	ldr	r3, [pc, #204]	; (80849f4 <_Z15outputDataToESPv+0xccc>)
 8084926:	681b      	ldr	r3, [r3, #0]
 8084928:	b1ab      	cbz	r3, 8084956 <_Z15outputDataToESPv+0xc2e>
        if(debugging_enabled){
 808492a:	6823      	ldr	r3, [r4, #0]
 808492c:	b173      	cbz	r3, 808494c <_Z15outputDataToESPv+0xc24>
            Serial.println("Sending data to esp to upload via wifi...");
 808492e:	f008 f8c1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084932:	4931      	ldr	r1, [pc, #196]	; (80849f8 <_Z15outputDataToESPv+0xcd0>)
 8084934:	f007 f803 	bl	808b93e <_ZN5Print7printlnEPKc>
            writeLogFile("Sending data to esp to upload via wifi");
 8084938:	4930      	ldr	r1, [pc, #192]	; (80849fc <_Z15outputDataToESPv+0xcd4>)
 808493a:	a827      	add	r0, sp, #156	; 0x9c
 808493c:	f006 fdda 	bl	808b4f4 <_ZN6StringC1EPKc>
 8084940:	a827      	add	r0, sp, #156	; 0x9c
 8084942:	f7fd f9dd 	bl	8081d00 <_Z12writeLogFile6String>
 8084946:	a827      	add	r0, sp, #156	; 0x9c
 8084948:	f006 fd8a 	bl	808b460 <_ZN6StringD1Ev>
        Serial1.println(cloud_output_string);
 808494c:	f008 f9fc 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 8084950:	9902      	ldr	r1, [sp, #8]
 8084952:	f006 fff4 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println(csv_output_string);
 8084956:	f008 f8ad 	bl	808cab4 <_Z16_fetch_usbserialv>
 808495a:	9906      	ldr	r1, [sp, #24]
 808495c:	f006 ffef 	bl	808b93e <_ZN5Print7printlnEPKc>
 8084960:	4927      	ldr	r1, [pc, #156]	; (8084a00 <_Z15outputDataToESPv+0xcd8>)
 8084962:	2302      	movs	r3, #2
 8084964:	220c      	movs	r2, #12
 8084966:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 808496a:	f7fc fac7 	bl	8080efc <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS)){
 808496e:	2800      	cmp	r0, #0
 8084970:	d063      	beq.n	8084a3a <_Z15outputDataToESPv+0xd12>
        if(debugging_enabled)
 8084972:	6823      	ldr	r3, [r4, #0]
 8084974:	b123      	cbz	r3, 8084980 <_Z15outputDataToESPv+0xc58>
            Serial.println("Writing row to file.");
 8084976:	f008 f89d 	bl	808cab4 <_Z16_fetch_usbserialv>
 808497a:	4922      	ldr	r1, [pc, #136]	; (8084a04 <_Z15outputDataToESPv+0xcdc>)
 808497c:	f006 ffdf 	bl	808b93e <_ZN5Print7printlnEPKc>
 8084980:	4a21      	ldr	r2, [pc, #132]	; (8084a08 <_Z15outputDataToESPv+0xce0>)
 8084982:	4922      	ldr	r1, [pc, #136]	; (8084a0c <_Z15outputDataToESPv+0xce4>)
        if(file_started == 0){
 8084984:	4c22      	ldr	r4, [pc, #136]	; (8084a10 <_Z15outputDataToESPv+0xce8>)
 8084986:	2346      	movs	r3, #70	; 0x46
 8084988:	6812      	ldr	r2, [r2, #0]
 808498a:	6809      	ldr	r1, [r1, #0]
 808498c:	4821      	ldr	r0, [pc, #132]	; (8084a14 <_Z15outputDataToESPv+0xcec>)
 808498e:	f004 f81c 	bl	80889ca <_ZN7FatFile4openEPS_PKch>
 8084992:	6823      	ldr	r3, [r4, #0]
 8084994:	2b00      	cmp	r3, #0
 8084996:	d149      	bne.n	8084a2c <_Z15outputDataToESPv+0xd04>
            file.println("File Start timestamp: ");
 8084998:	491f      	ldr	r1, [pc, #124]	; (8084a18 <_Z15outputDataToESPv+0xcf0>)
 808499a:	4820      	ldr	r0, [pc, #128]	; (8084a1c <_Z15outputDataToESPv+0xcf4>)
 808499c:	f006 ffcf 	bl	808b93e <_ZN5Print7printlnEPKc>
                return timeStr(now());
 80849a0:	f007 fb35 	bl	808c00e <_ZN9TimeClass3nowEv>
 80849a4:	17c3      	asrs	r3, r0, #31
 80849a6:	4602      	mov	r2, r0
 80849a8:	a827      	add	r0, sp, #156	; 0x9c
 80849aa:	f007 fa2d 	bl	808be08 <_ZN9TimeClass7timeStrEx>
            file.println(Time.timeStr());
 80849ae:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80849b0:	481a      	ldr	r0, [pc, #104]	; (8084a1c <_Z15outputDataToESPv+0xcf4>)
 80849b2:	f006 ffc4 	bl	808b93e <_ZN5Print7printlnEPKc>
 80849b6:	a827      	add	r0, sp, #156	; 0x9c
 80849b8:	f006 fd52 	bl	808b460 <_ZN6StringD1Ev>
            file.println(String(HEADER_STRING));
 80849bc:	4918      	ldr	r1, [pc, #96]	; (8084a20 <_Z15outputDataToESPv+0xcf8>)
 80849be:	a827      	add	r0, sp, #156	; 0x9c
 80849c0:	f006 fd98 	bl	808b4f4 <_ZN6StringC1EPKc>
 80849c4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80849c6:	4815      	ldr	r0, [pc, #84]	; (8084a1c <_Z15outputDataToESPv+0xcf4>)
 80849c8:	f006 ffb9 	bl	808b93e <_ZN5Print7printlnEPKc>
 80849cc:	a827      	add	r0, sp, #156	; 0x9c
 80849ce:	e029      	b.n	8084a24 <_Z15outputDataToESPv+0xcfc>
 80849d0:	20000720 	.word	0x20000720
 80849d4:	08092eb4 	.word	0x08092eb4
 80849d8:	080940f6 	.word	0x080940f6
 80849dc:	40240000 	.word	0x40240000
 80849e0:	20000cf8 	.word	0x20000cf8
 80849e4:	08092f06 	.word	0x08092f06
 80849e8:	20000e88 	.word	0x20000e88
 80849ec:	20000690 	.word	0x20000690
 80849f0:	08092f18 	.word	0x08092f18
 80849f4:	20000694 	.word	0x20000694
 80849f8:	08092f30 	.word	0x08092f30
 80849fc:	08092f5a 	.word	0x08092f5a
 8084a00:	20000cd0 	.word	0x20000cd0
 8084a04:	08092f81 	.word	0x08092f81
 8084a08:	200006f8 	.word	0x200006f8
 8084a0c:	20000d5c 	.word	0x20000d5c
 8084a10:	20000708 	.word	0x20000708
 8084a14:	200006a0 	.word	0x200006a0
 8084a18:	08091e22 	.word	0x08091e22
 8084a1c:	20000698 	.word	0x20000698
 8084a20:	08092f96 	.word	0x08092f96
 8084a24:	f006 fd1c 	bl	808b460 <_ZN6StringD1Ev>
            file_started = 1;
 8084a28:	2301      	movs	r3, #1
 8084a2a:	6023      	str	r3, [r4, #0]
        file.println(csv_output_string);
 8084a2c:	9906      	ldr	r1, [sp, #24]
 8084a2e:	4898      	ldr	r0, [pc, #608]	; (8084c90 <_Z15outputDataToESPv+0xf68>)
 8084a30:	f006 ff85 	bl	808b93e <_ZN5Print7printlnEPKc>
        file.close();
 8084a34:	4897      	ldr	r0, [pc, #604]	; (8084c94 <_Z15outputDataToESPv+0xf6c>)
 8084a36:	f003 ffc1 	bl	80889bc <_ZN7FatFile5closeEv>
void outputDataToESP(void){
 8084a3a:	2500      	movs	r5, #0
        wordBytes.myWord = DEVICE_id;
 8084a3c:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 8084ce0 <_Z15outputDataToESPv+0xfb8>
            floatBytes.myFloat = bme.pressure / 100.0;
 8084a40:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8084ce4 <_Z15outputDataToESPv+0xfbc>
        wordBytes.myWord = gps.get_latitudeWhole();
 8084a44:	4e94      	ldr	r6, [pc, #592]	; (8084c98 <_Z15outputDataToESPv+0xf70>)
 8084a46:	ac27      	add	r4, sp, #156	; 0x9c
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 8084a48:	2301      	movs	r3, #1
 8084a4a:	7023      	strb	r3, [r4, #0]
        wordBytes.myWord = DEVICE_id;
 8084a4c:	f8d8 3000 	ldr.w	r3, [r8]
        ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084a50:	7063      	strb	r3, [r4, #1]
        ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084a52:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8084a56:	70a3      	strb	r3, [r4, #2]
        ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8084a58:	4b90      	ldr	r3, [pc, #576]	; (8084c9c <_Z15outputDataToESPv+0xf74>)
 8084a5a:	681b      	ldr	r3, [r3, #0]
 8084a5c:	70e3      	strb	r3, [r4, #3]
        if(i == 0){
 8084a5e:	2d00      	cmp	r5, #0
 8084a60:	d15c      	bne.n	8084b1c <_Z15outputDataToESPv+0xdf4>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_MONOXIDE_PACKET_CONSTANT;
 8084a62:	234d      	movs	r3, #77	; 0x4d
 8084a64:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
            floatBytes.myFloat = CO_float;
 8084a68:	4b8d      	ldr	r3, [pc, #564]	; (8084ca0 <_Z15outputDataToESPv+0xf78>)
            floatBytes.myFloat = air_quality_score;
 8084a6a:	6818      	ldr	r0, [r3, #0]
 8084a6c:	e065      	b.n	8084b3a <_Z15outputDataToESPv+0xe12>
        latitude_string = "";
 8084a6e:	498d      	ldr	r1, [pc, #564]	; (8084ca4 <_Z15outputDataToESPv+0xf7c>)
 8084a70:	a80e      	add	r0, sp, #56	; 0x38
 8084a72:	f006 fd91 	bl	808b598 <_ZN6StringaSEPKc>
 8084a76:	f7ff bab7 	b.w	8083fe8 <_Z15outputDataToESPv+0x2c0>
        csv_output_string += String(geolocation_latitude)+ ",";
 8084a7a:	498b      	ldr	r1, [pc, #556]	; (8084ca8 <_Z15outputDataToESPv+0xf80>)
 8084a7c:	a81e      	add	r0, sp, #120	; 0x78
 8084a7e:	f006 fd39 	bl	808b4f4 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8084a82:	a91e      	add	r1, sp, #120	; 0x78
 8084a84:	a827      	add	r0, sp, #156	; 0x9c
 8084a86:	f006 fd74 	bl	808b572 <_ZN6StringC1ERKS_>
 8084a8a:	4988      	ldr	r1, [pc, #544]	; (8084cac <_Z15outputDataToESPv+0xf84>)
 8084a8c:	a827      	add	r0, sp, #156	; 0x9c
 8084a8e:	f006 fe60 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8084a92:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084a94:	a806      	add	r0, sp, #24
 8084a96:	f006 fe0b 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084a9a:	a827      	add	r0, sp, #156	; 0x9c
 8084a9c:	f006 fce0 	bl	808b460 <_ZN6StringD1Ev>
 8084aa0:	a81e      	add	r0, sp, #120	; 0x78
 8084aa2:	f006 fcdd 	bl	808b460 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_latitude);
 8084aa6:	4980      	ldr	r1, [pc, #512]	; (8084ca8 <_Z15outputDataToESPv+0xf80>)
 8084aa8:	a827      	add	r0, sp, #156	; 0x9c
 8084aaa:	f006 fd23 	bl	808b4f4 <_ZN6StringC1EPKc>
 8084aae:	e62c      	b.n	808470a <_Z15outputDataToESPv+0x9e2>
        csv_output_string += String(geolocation_longitude) + ",";
 8084ab0:	497f      	ldr	r1, [pc, #508]	; (8084cb0 <_Z15outputDataToESPv+0xf88>)
 8084ab2:	a81e      	add	r0, sp, #120	; 0x78
 8084ab4:	f006 fd1e 	bl	808b4f4 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8084ab8:	a91e      	add	r1, sp, #120	; 0x78
 8084aba:	a827      	add	r0, sp, #156	; 0x9c
 8084abc:	f006 fd59 	bl	808b572 <_ZN6StringC1ERKS_>
 8084ac0:	497a      	ldr	r1, [pc, #488]	; (8084cac <_Z15outputDataToESPv+0xf84>)
 8084ac2:	a827      	add	r0, sp, #156	; 0x9c
 8084ac4:	f006 fe45 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8084ac8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084aca:	a806      	add	r0, sp, #24
 8084acc:	f006 fdf0 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084ad0:	a827      	add	r0, sp, #156	; 0x9c
 8084ad2:	f006 fcc5 	bl	808b460 <_ZN6StringD1Ev>
 8084ad6:	a81e      	add	r0, sp, #120	; 0x78
 8084ad8:	f006 fcc2 	bl	808b460 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_longitude);
 8084adc:	4974      	ldr	r1, [pc, #464]	; (8084cb0 <_Z15outputDataToESPv+0xf88>)
 8084ade:	a827      	add	r0, sp, #156	; 0x9c
 8084ae0:	f006 fd08 	bl	808b4f4 <_ZN6StringC1EPKc>
 8084ae4:	e65f      	b.n	80847a6 <_Z15outputDataToESPv+0xa7e>
        csv_output_string += String(geolocation_accuracy) + ",";
 8084ae6:	4973      	ldr	r1, [pc, #460]	; (8084cb4 <_Z15outputDataToESPv+0xf8c>)
 8084ae8:	a81e      	add	r0, sp, #120	; 0x78
 8084aea:	f006 fd03 	bl	808b4f4 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8084aee:	a91e      	add	r1, sp, #120	; 0x78
 8084af0:	a827      	add	r0, sp, #156	; 0x9c
 8084af2:	f006 fd3e 	bl	808b572 <_ZN6StringC1ERKS_>
 8084af6:	496d      	ldr	r1, [pc, #436]	; (8084cac <_Z15outputDataToESPv+0xf84>)
 8084af8:	a827      	add	r0, sp, #156	; 0x9c
 8084afa:	f006 fe2a 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8084afe:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084b00:	a806      	add	r0, sp, #24
 8084b02:	f006 fdd5 	bl	808b6b0 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084b06:	a827      	add	r0, sp, #156	; 0x9c
 8084b08:	f006 fcaa 	bl	808b460 <_ZN6StringD1Ev>
 8084b0c:	a81e      	add	r0, sp, #120	; 0x78
 8084b0e:	f006 fca7 	bl	808b460 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_accuracy);
 8084b12:	4968      	ldr	r1, [pc, #416]	; (8084cb4 <_Z15outputDataToESPv+0xf8c>)
 8084b14:	a827      	add	r0, sp, #156	; 0x9c
 8084b16:	f006 fced 	bl	808b4f4 <_ZN6StringC1EPKc>
 8084b1a:	e691      	b.n	8084840 <_Z15outputDataToESPv+0xb18>
        }else if(i == 1){
 8084b1c:	2d01      	cmp	r5, #1
 8084b1e:	d104      	bne.n	8084b2a <_Z15outputDataToESPv+0xe02>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8084b20:	2343      	movs	r3, #67	; 0x43
 8084b22:	f88d 30b6 	strb.w	r3, [sp, #182]	; 0xb6
            floatBytes.myFloat = CO2_float;
 8084b26:	4b64      	ldr	r3, [pc, #400]	; (8084cb8 <_Z15outputDataToESPv+0xf90>)
 8084b28:	e79f      	b.n	8084a6a <_Z15outputDataToESPv+0xd42>
        }else if(i == 2){
 8084b2a:	2d02      	cmp	r5, #2
 8084b2c:	d16e      	bne.n	8084c0c <_Z15outputDataToESPv+0xee4>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8084b2e:	2378      	movs	r3, #120	; 0x78
            floatBytes.myFloat = fuel.getSoC();
 8084b30:	4862      	ldr	r0, [pc, #392]	; (8084cbc <_Z15outputDataToESPv+0xf94>)
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8084b32:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
            floatBytes.myFloat = fuel.getSoC();
 8084b36:	f007 fb55 	bl	808c1e4 <_ZN9FuelGauge6getSoCEv>
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8084b3a:	f3c0 2307 	ubfx	r3, r0, #8, #8
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 8084b3e:	7160      	strb	r0, [r4, #5]
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8084b40:	71a3      	strb	r3, [r4, #6]
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8084b42:	f3c0 4307 	ubfx	r3, r0, #16, #8
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8084b46:	f3c0 6007 	ubfx	r0, r0, #24, #8
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8084b4a:	71e3      	strb	r3, [r4, #7]
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8084b4c:	7220      	strb	r0, [r4, #8]
        wordBytes.myWord = gps.get_latitudeWhole();
 8084b4e:	4630      	mov	r0, r6
 8084b50:	f002 fcad 	bl	80874ae <_ZN3GPS17get_latitudeWholeEv>
        ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084b54:	7260      	strb	r0, [r4, #9]
        ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084b56:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084b5a:	72a0      	strb	r0, [r4, #10]
        wordBytes.myWord = gps.get_latitudeFrac();
 8084b5c:	4630      	mov	r0, r6
 8084b5e:	f002 fca9 	bl	80874b4 <_ZN3GPS16get_latitudeFracEv>
        ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084b62:	72e0      	strb	r0, [r4, #11]
        ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084b64:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084b68:	7320      	strb	r0, [r4, #12]
        wordBytes.myWord = gps.get_longitudeWhole();
 8084b6a:	4630      	mov	r0, r6
 8084b6c:	f002 fca5 	bl	80874ba <_ZN3GPS18get_longitudeWholeEv>
        ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084b70:	7360      	strb	r0, [r4, #13]
        ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084b72:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084b76:	73a0      	strb	r0, [r4, #14]
        wordBytes.myWord = gps.get_longitudeFrac();
 8084b78:	4630      	mov	r0, r6
 8084b7a:	f002 fca1 	bl	80874c0 <_ZN3GPS17get_longitudeFracEv>
        ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084b7e:	73e0      	strb	r0, [r4, #15]
        ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084b80:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084b84:	7420      	strb	r0, [r4, #16]
        int northSouth = gps.get_nsIndicator();
 8084b86:	4630      	mov	r0, r6
 8084b88:	f002 fc9d 	bl	80874c6 <_ZN3GPS15get_nsIndicatorEv>
 8084b8c:	4682      	mov	sl, r0
        int eastWest = gps.get_ewIndicator();
 8084b8e:	4630      	mov	r0, r6
 8084b90:	f002 fc9c 	bl	80874cc <_ZN3GPS15get_ewIndicatorEv>
        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8084b94:	ea4a 0a00 	orr.w	sl, sl, r0
 8084b98:	f884 a011 	strb.w	sl, [r4, #17]
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8084b9c:	4630      	mov	r0, r6
 8084b9e:	f002 fc81 	bl	80874a4 <_ZN3GPS23get_horizontalDillutionEv>
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8084ba2:	787b      	ldrb	r3, [r7, #1]
    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8084ba4:	3501      	adds	r5, #1
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8084ba6:	74e3      	strb	r3, [r4, #19]
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8084ba8:	783b      	ldrb	r3, [r7, #0]
    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8084baa:	2d0b      	cmp	r5, #11
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8084bac:	7523      	strb	r3, [r4, #20]
        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8084bae:	f04f 0323 	mov.w	r3, #35	; 0x23
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8084bb2:	74a0      	strb	r0, [r4, #18]
        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8084bb4:	7563      	strb	r3, [r4, #21]
    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8084bb6:	f104 0416 	add.w	r4, r4, #22
 8084bba:	f47f af45 	bne.w	8084a48 <_Z15outputDataToESPv+0xd20>
    Serial1.print("$");
 8084bbe:	f008 f8c3 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 8084bc2:	493f      	ldr	r1, [pc, #252]	; (8084cc0 <_Z15outputDataToESPv+0xf98>)
 8084bc4:	f006 fea8 	bl	808b918 <_ZN5Print5printEPKc>
    Serial1.write(ble_output_array, NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE);
 8084bc8:	f008 f8be 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 8084bcc:	6803      	ldr	r3, [r0, #0]
 8084bce:	22f2      	movs	r2, #242	; 0xf2
 8084bd0:	68db      	ldr	r3, [r3, #12]
 8084bd2:	a927      	add	r1, sp, #156	; 0x9c
 8084bd4:	4798      	blx	r3
    Serial1.print("&");
 8084bd6:	f008 f8b7 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 8084bda:	493a      	ldr	r1, [pc, #232]	; (8084cc4 <_Z15outputDataToESPv+0xf9c>)
 8084bdc:	f006 fe9c 	bl	808b918 <_ZN5Print5printEPKc>
    String device_string = "PAM-" + String(DEVICE_id);
 8084be0:	a816      	add	r0, sp, #88	; 0x58
 8084be2:	f006 fc3d 	bl	808b460 <_ZN6StringD1Ev>
    String longitude_string = "";
 8084be6:	a812      	add	r0, sp, #72	; 0x48
 8084be8:	f006 fc3a 	bl	808b460 <_ZN6StringD1Ev>
    String latitude_string = "";
 8084bec:	a80e      	add	r0, sp, #56	; 0x38
 8084bee:	f006 fc37 	bl	808b460 <_ZN6StringD1Ev>
    String sensible_string = "";
 8084bf2:	a80a      	add	r0, sp, #40	; 0x28
 8084bf4:	f006 fc34 	bl	808b460 <_ZN6StringD1Ev>
    String csv_output_string = "";
 8084bf8:	a806      	add	r0, sp, #24
 8084bfa:	f006 fc31 	bl	808b460 <_ZN6StringD1Ev>
    String cloud_output_string = "";    //create a clean string
 8084bfe:	a802      	add	r0, sp, #8
 8084c00:	f006 fc2e 	bl	808b460 <_ZN6StringD1Ev>
}
 8084c04:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8084c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }else if(i == 3){
 8084c0c:	2d03      	cmp	r5, #3
 8084c0e:	d107      	bne.n	8084c20 <_Z15outputDataToESPv+0xef8>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8084c10:	2372      	movs	r3, #114	; 0x72
 8084c12:	f88d 30e2 	strb.w	r3, [sp, #226]	; 0xe2
            floatBytes.myFloat = PM01Value;
 8084c16:	4b2c      	ldr	r3, [pc, #176]	; (8084cc8 <_Z15outputDataToESPv+0xfa0>)
            floatBytes.myFloat = PM10Value;
 8084c18:	6818      	ldr	r0, [r3, #0]
 8084c1a:	f009 f9c5 	bl	808dfa8 <__aeabi_i2f>
 8084c1e:	e78c      	b.n	8084b3a <_Z15outputDataToESPv+0xe12>
        }else if(i == 4){
 8084c20:	2d04      	cmp	r5, #4
 8084c22:	d104      	bne.n	8084c2e <_Z15outputDataToESPv+0xf06>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8084c24:	2352      	movs	r3, #82	; 0x52
 8084c26:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
            floatBytes.myFloat = corrected_PM_25;
 8084c2a:	4b28      	ldr	r3, [pc, #160]	; (8084ccc <_Z15outputDataToESPv+0xfa4>)
 8084c2c:	e71d      	b.n	8084a6a <_Z15outputDataToESPv+0xd42>
        }else if(i == 5){
 8084c2e:	2d05      	cmp	r5, #5
 8084c30:	d104      	bne.n	8084c3c <_Z15outputDataToESPv+0xf14>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 8084c32:	2371      	movs	r3, #113	; 0x71
 8084c34:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
            floatBytes.myFloat = PM10Value;
 8084c38:	4b25      	ldr	r3, [pc, #148]	; (8084cd0 <_Z15outputDataToESPv+0xfa8>)
 8084c3a:	e7ed      	b.n	8084c18 <_Z15outputDataToESPv+0xef0>
        }else if(i == 6){
 8084c3c:	2d06      	cmp	r5, #6
 8084c3e:	d105      	bne.n	8084c4c <_Z15outputDataToESPv+0xf24>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = TEMPERATURE_PACKET_CONSTANT;
 8084c40:	2374      	movs	r3, #116	; 0x74
 8084c42:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
            floatBytes.myFloat = readTemperature();
 8084c46:	f7fc fcef 	bl	8081628 <_Z15readTemperaturev>
 8084c4a:	e776      	b.n	8084b3a <_Z15outputDataToESPv+0xe12>
        }else if(i == 7){
 8084c4c:	2d07      	cmp	r5, #7
 8084c4e:	d108      	bne.n	8084c62 <_Z15outputDataToESPv+0xf3a>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PRESSURE_PACKET_CONSTANT;
 8084c50:	2350      	movs	r3, #80	; 0x50
 8084c52:	f88d 313a 	strb.w	r3, [sp, #314]	; 0x13a
            floatBytes.myFloat = bme.pressure / 100.0;
 8084c56:	4b1f      	ldr	r3, [pc, #124]	; (8084cd4 <_Z15outputDataToESPv+0xfac>)
 8084c58:	4649      	mov	r1, r9
 8084c5a:	6858      	ldr	r0, [r3, #4]
 8084c5c:	f009 faac 	bl	808e1b8 <__aeabi_fdiv>
 8084c60:	e76b      	b.n	8084b3a <_Z15outputDataToESPv+0xe12>
        }else if(i == 8){
 8084c62:	2d08      	cmp	r5, #8
 8084c64:	d105      	bne.n	8084c72 <_Z15outputDataToESPv+0xf4a>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = HUMIDITY_PACKET_CONSTANT;
 8084c66:	2368      	movs	r3, #104	; 0x68
 8084c68:	f88d 3150 	strb.w	r3, [sp, #336]	; 0x150
            floatBytes.myFloat = readHumidity();
 8084c6c:	f7fc fd56 	bl	808171c <_Z12readHumidityv>
 8084c70:	e763      	b.n	8084b3a <_Z15outputDataToESPv+0xe12>
        }else if(i == 9){
 8084c72:	2d09      	cmp	r5, #9
 8084c74:	d108      	bne.n	8084c88 <_Z15outputDataToESPv+0xf60>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = SOUND_PACKET_CONSTANT;
 8084c76:	2373      	movs	r3, #115	; 0x73
 8084c78:	f88d 3166 	strb.w	r3, [sp, #358]	; 0x166
            floatBytes.myFloat = sound_average;
 8084c7c:	4b16      	ldr	r3, [pc, #88]	; (8084cd8 <_Z15outputDataToESPv+0xfb0>)
 8084c7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8084c82:	f009 f887 	bl	808dd94 <__aeabi_d2f>
 8084c86:	e758      	b.n	8084b3a <_Z15outputDataToESPv+0xe12>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
 8084c88:	2367      	movs	r3, #103	; 0x67
 8084c8a:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = air_quality_score;
 8084c8c:	4b13      	ldr	r3, [pc, #76]	; (8084cdc <_Z15outputDataToESPv+0xfb4>)
 8084c8e:	e6ec      	b.n	8084a6a <_Z15outputDataToESPv+0xd42>
 8084c90:	20000698 	.word	0x20000698
 8084c94:	200006a0 	.word	0x200006a0
 8084c98:	20000720 	.word	0x20000720
 8084c9c:	2000085c 	.word	0x2000085c
 8084ca0:	20000340 	.word	0x20000340
 8084ca4:	080943b2 	.word	0x080943b2
 8084ca8:	200000aa 	.word	0x200000aa
 8084cac:	080940f6 	.word	0x080940f6
 8084cb0:	200000b6 	.word	0x200000b6
 8084cb4:	200000a4 	.word	0x200000a4
 8084cb8:	2000032c 	.word	0x2000032c
 8084cbc:	2000070c 	.word	0x2000070c
 8084cc0:	08091fd2 	.word	0x08091fd2
 8084cc4:	08093019 	.word	0x08093019
 8084cc8:	2000035c 	.word	0x2000035c
 8084ccc:	2000068c 	.word	0x2000068c
 8084cd0:	20000360 	.word	0x20000360
 8084cd4:	200005ec 	.word	0x200005ec
 8084cd8:	20000ce0 	.word	0x20000ce0
 8084cdc:	200005e4 	.word	0x200005e4
 8084ce0:	20000080 	.word	0x20000080
 8084ce4:	42c80000 	.word	0x42c80000

08084ce8 <_ZN5Print5printIiLi0EEEjT_i>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 8084ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084cec:	4607      	mov	r7, r0
 8084cee:	460c      	mov	r4, r1
{
    if (base == 0) {
 8084cf0:	4615      	mov	r5, r2
 8084cf2:	b92a      	cbnz	r2, 8084d00 <_ZN5Print5printIiLi0EEEjT_i+0x18>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 8084cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(n);
 8084cf8:	6803      	ldr	r3, [r0, #0]
 8084cfa:	b2c9      	uxtb	r1, r1
 8084cfc:	689b      	ldr	r3, [r3, #8]
 8084cfe:	4718      	bx	r3
        if (n < 0 && base == 10) {
 8084d00:	2900      	cmp	r1, #0
 8084d02:	da0d      	bge.n	8084d20 <_ZN5Print5printIiLi0EEEjT_i+0x38>
 8084d04:	2a0a      	cmp	r2, #10
 8084d06:	d10b      	bne.n	8084d20 <_ZN5Print5printIiLi0EEEjT_i+0x38>
            t = print('-');
 8084d08:	212d      	movs	r1, #45	; 0x2d
 8084d0a:	f006 fe09 	bl	808b920 <_ZN5Print5printEc>
 8084d0e:	4606      	mov	r6, r0
            val = -n;
 8084d10:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8084d12:	4638      	mov	r0, r7
 8084d14:	b2ea      	uxtb	r2, r5
 8084d16:	f006 fe26 	bl	808b966 <_ZN5Print11printNumberEmh>
}
 8084d1a:	4430      	add	r0, r6
 8084d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
 8084d20:	4621      	mov	r1, r4
        size_t t = 0;
 8084d22:	2600      	movs	r6, #0
 8084d24:	e7f5      	b.n	8084d12 <_ZN5Print5printIiLi0EEEjT_i+0x2a>

08084d26 <_ZN5Print7printlnIiLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8084d26:	b538      	push	{r3, r4, r5, lr}
 8084d28:	4605      	mov	r5, r0
        size_t n = print(b, base);
 8084d2a:	f7ff ffdd 	bl	8084ce8 <_ZN5Print5printIiLi0EEEjT_i>
 8084d2e:	4604      	mov	r4, r0
        n += println();
 8084d30:	4628      	mov	r0, r5
 8084d32:	f006 fdf8 	bl	808b926 <_ZN5Print7printlnEv>
    }
 8084d36:	4420      	add	r0, r4
 8084d38:	bd38      	pop	{r3, r4, r5, pc}
 8084d3a:	0000      	movs	r0, r0
 8084d3c:	0000      	movs	r0, r0
	...

08084d40 <_Z15getEspOzoneDatav>:
float getEspOzoneData(void){
 8084d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084d44:	b0a9      	sub	sp, #164	; 0xa4
    String getOzoneData = "Z&";
 8084d46:	498a      	ldr	r1, [pc, #552]	; (8084f70 <_Z15getEspOzoneDatav+0x230>)
 8084d48:	4668      	mov	r0, sp
 8084d4a:	f006 fbd3 	bl	808b4f4 <_ZN6StringC1EPKc>
    if(debugging_enabled){
 8084d4e:	4c89      	ldr	r4, [pc, #548]	; (8084f74 <_Z15getEspOzoneDatav+0x234>)
    String recievedData = " ";
 8084d50:	4989      	ldr	r1, [pc, #548]	; (8084f78 <_Z15getEspOzoneDatav+0x238>)
 8084d52:	a804      	add	r0, sp, #16
 8084d54:	f006 fbce 	bl	808b4f4 <_ZN6StringC1EPKc>
    Serial1.setTimeout(3000);
 8084d58:	f007 fff6 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 8084d5c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8084d60:	f006 ff40 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    if(debugging_enabled){
 8084d64:	6823      	ldr	r3, [r4, #0]
 8084d66:	b173      	cbz	r3, 8084d86 <_Z15getEspOzoneDatav+0x46>
        Serial.println("Getting ozone data from esp");
 8084d68:	f007 fea4 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084d6c:	4983      	ldr	r1, [pc, #524]	; (8084f7c <_Z15getEspOzoneDatav+0x23c>)
 8084d6e:	f006 fde6 	bl	808b93e <_ZN5Print7printlnEPKc>
        writeLogFile("Getting ozone data from esp");
 8084d72:	4982      	ldr	r1, [pc, #520]	; (8084f7c <_Z15getEspOzoneDatav+0x23c>)
 8084d74:	a80c      	add	r0, sp, #48	; 0x30
 8084d76:	f006 fbbd 	bl	808b4f4 <_ZN6StringC1EPKc>
 8084d7a:	a80c      	add	r0, sp, #48	; 0x30
 8084d7c:	f7fc ffc0 	bl	8081d00 <_Z12writeLogFile6String>
 8084d80:	a80c      	add	r0, sp, #48	; 0x30
 8084d82:	f006 fb6d 	bl	808b460 <_ZN6StringD1Ev>
      if(counterIndex > MAX_COUNTER_INDEX){
 8084d86:	f20f 19e0 	addw	r9, pc, #480	; 0x1e0
 8084d8a:	e9d9 8900 	ldrd	r8, r9, [r9]
    Serial1.print(getOzoneData);
 8084d8e:	f007 ffdb 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 8084d92:	9900      	ldr	r1, [sp, #0]
 8084d94:	f006 fdc0 	bl	808b918 <_ZN5Print5printEPKc>
    double counterIndex = 0;
 8084d98:	2600      	movs	r6, #0
 8084d9a:	2700      	movs	r7, #0
    bool timeOut = false;
 8084d9c:	2500      	movs	r5, #0
      counterIndex++;
 8084d9e:	f04f 0a00 	mov.w	sl, #0
 8084da2:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8084f9c <_Z15getEspOzoneDatav+0x25c>
    while(!Serial1.available() && timeOut == false){
 8084da6:	f007 ffcf 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 8084daa:	6803      	ldr	r3, [r0, #0]
 8084dac:	691b      	ldr	r3, [r3, #16]
 8084dae:	4798      	blx	r3
 8084db0:	b9c8      	cbnz	r0, 8084de6 <_Z15getEspOzoneDatav+0xa6>
 8084db2:	b9c5      	cbnz	r5, 8084de6 <_Z15getEspOzoneDatav+0xa6>
      counterIndex++;
 8084db4:	4652      	mov	r2, sl
 8084db6:	465b      	mov	r3, fp
 8084db8:	4630      	mov	r0, r6
 8084dba:	4639      	mov	r1, r7
 8084dbc:	f008 fb3c 	bl	808d438 <__adddf3>
      if(counterIndex > MAX_COUNTER_INDEX){
 8084dc0:	4642      	mov	r2, r8
 8084dc2:	464b      	mov	r3, r9
      counterIndex++;
 8084dc4:	4606      	mov	r6, r0
 8084dc6:	460f      	mov	r7, r1
      if(counterIndex > MAX_COUNTER_INDEX){
 8084dc8:	f008 ff7c 	bl	808dcc4 <__aeabi_dcmpgt>
 8084dcc:	2800      	cmp	r0, #0
 8084dce:	d0ea      	beq.n	8084da6 <_Z15getEspOzoneDatav+0x66>
        if(debugging_enabled){
 8084dd0:	6823      	ldr	r3, [r4, #0]
 8084dd2:	b133      	cbz	r3, 8084de2 <_Z15getEspOzoneDatav+0xa2>
          Serial.printf("Unable to get ozone data from ESP, counter index: %1.1f\n\r", counterIndex);
 8084dd4:	f007 fe6e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084dd8:	4632      	mov	r2, r6
 8084dda:	463b      	mov	r3, r7
 8084ddc:	4968      	ldr	r1, [pc, #416]	; (8084f80 <_Z15getEspOzoneDatav+0x240>)
 8084dde:	f7fb ff47 	bl	8080c70 <_ZN5Print6printfEPKcz>
        timeOut = true;
 8084de2:	2501      	movs	r5, #1
 8084de4:	e7df      	b.n	8084da6 <_Z15getEspOzoneDatav+0x66>
    delay(10);
 8084de6:	200a      	movs	r0, #10
 8084de8:	f007 f972 	bl	808c0d0 <delay>
    recievedData = Serial1.readString();
 8084dec:	f007 ffac 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 8084df0:	4601      	mov	r1, r0
 8084df2:	a80c      	add	r0, sp, #48	; 0x30
 8084df4:	f006 ff4c 	bl	808bc90 <_ZN6Stream10readStringEv>
 8084df8:	a90c      	add	r1, sp, #48	; 0x30
 8084dfa:	a804      	add	r0, sp, #16
 8084dfc:	f006 fbc4 	bl	808b588 <_ZN6StringaSEOS_>
 8084e00:	a80c      	add	r0, sp, #48	; 0x30
 8084e02:	f006 fb2d 	bl	808b460 <_ZN6StringD1Ev>
    if(debugging_enabled)
 8084e06:	6823      	ldr	r3, [r4, #0]
 8084e08:	b19b      	cbz	r3, 8084e32 <_Z15getEspOzoneDatav+0xf2>
        Serial.print("RECIEVED DATA FROM ESP: ");
 8084e0a:	f007 fe53 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084e0e:	495d      	ldr	r1, [pc, #372]	; (8084f84 <_Z15getEspOzoneDatav+0x244>)
 8084e10:	f006 fd82 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(recievedData);
 8084e14:	f007 fe4e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084e18:	9904      	ldr	r1, [sp, #16]
 8084e1a:	f006 fd90 	bl	808b93e <_ZN5Print7printlnEPKc>
        writeLogFile("Recieved data from ESP");
 8084e1e:	495a      	ldr	r1, [pc, #360]	; (8084f88 <_Z15getEspOzoneDatav+0x248>)
 8084e20:	a80c      	add	r0, sp, #48	; 0x30
 8084e22:	f006 fb67 	bl	808b4f4 <_ZN6StringC1EPKc>
 8084e26:	a80c      	add	r0, sp, #48	; 0x30
 8084e28:	f7fc ff6a 	bl	8081d00 <_Z12writeLogFile6String>
 8084e2c:	a80c      	add	r0, sp, #48	; 0x30
 8084e2e:	f006 fb17 	bl	808b460 <_ZN6StringD1Ev>
    bool timeOut = false;
 8084e32:	2500      	movs	r5, #0
    String stringArray[NUMBER_OF_FEILDS];
 8084e34:	4e55      	ldr	r6, [pc, #340]	; (8084f8c <_Z15getEspOzoneDatav+0x24c>)
 8084e36:	ab0c      	add	r3, sp, #48	; 0x30
 8084e38:	1958      	adds	r0, r3, r5
 8084e3a:	4631      	mov	r1, r6
 8084e3c:	3510      	adds	r5, #16
 8084e3e:	f006 fb59 	bl	808b4f4 <_ZN6StringC1EPKc>
 8084e42:	2d70      	cmp	r5, #112	; 0x70
 8084e44:	d1f7      	bne.n	8084e36 <_Z15getEspOzoneDatav+0xf6>
    int from_index = 0;
 8084e46:	2600      	movs	r6, #0
    int comma_count = 0;
 8084e48:	4635      	mov	r5, r6
          Serial.print("comma index: ");
 8084e4a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8084fa0 <_Z15getEspOzoneDatav+0x260>
                Serial.printf("String[%d]:", comma_count);
 8084e4e:	f8df a144 	ldr.w	sl, [pc, #324]	; 8084f94 <_Z15getEspOzoneDatav+0x254>
        index_of_comma = recievedData.indexOf(',', from_index);
 8084e52:	4632      	mov	r2, r6
 8084e54:	212c      	movs	r1, #44	; 0x2c
 8084e56:	a804      	add	r0, sp, #16
 8084e58:	f006 fcdf 	bl	808b81a <_ZNK6String7indexOfEcj>
        if(debugging_enabled){
 8084e5c:	6823      	ldr	r3, [r4, #0]
        index_of_comma = recievedData.indexOf(',', from_index);
 8084e5e:	4607      	mov	r7, r0
        if(debugging_enabled){
 8084e60:	b153      	cbz	r3, 8084e78 <_Z15getEspOzoneDatav+0x138>
          Serial.print("comma index: ");
 8084e62:	f007 fe27 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084e66:	4649      	mov	r1, r9
 8084e68:	f006 fd56 	bl	808b918 <_ZN5Print5printEPKc>
          Serial.println(index_of_comma);
 8084e6c:	f007 fe22 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084e70:	220a      	movs	r2, #10
 8084e72:	4639      	mov	r1, r7
 8084e74:	f7ff ff57 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        if(index_of_comma > 0){
 8084e78:	2f00      	cmp	r7, #0
 8084e7a:	dd41      	ble.n	8084f00 <_Z15getEspOzoneDatav+0x1c0>
            stringArray[comma_count] = recievedData.substring(from_index, index_of_comma);
 8084e7c:	4632      	mov	r2, r6
 8084e7e:	463b      	mov	r3, r7
 8084e80:	a904      	add	r1, sp, #16
 8084e82:	a808      	add	r0, sp, #32
 8084e84:	f006 fcd8 	bl	808b838 <_ZNK6String9substringEjj>
 8084e88:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8084e8c:	ab0c      	add	r3, sp, #48	; 0x30
 8084e8e:	eb03 0008 	add.w	r0, r3, r8
 8084e92:	a908      	add	r1, sp, #32
 8084e94:	f006 fb78 	bl	808b588 <_ZN6StringaSEOS_>
 8084e98:	a808      	add	r0, sp, #32
 8084e9a:	f006 fae1 	bl	808b460 <_ZN6StringD1Ev>
            if(debugging_enabled){
 8084e9e:	6823      	ldr	r3, [r4, #0]
 8084ea0:	b163      	cbz	r3, 8084ebc <_Z15getEspOzoneDatav+0x17c>
                Serial.printf("String[%d]:", comma_count);
 8084ea2:	f007 fe07 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084ea6:	4651      	mov	r1, sl
 8084ea8:	462a      	mov	r2, r5
 8084eaa:	f7fb fee1 	bl	8080c70 <_ZN5Print6printfEPKcz>
                Serial.println(stringArray[comma_count]);
 8084eae:	f007 fe01 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084eb2:	ab0c      	add	r3, sp, #48	; 0x30
 8084eb4:	f853 1008 	ldr.w	r1, [r3, r8]
 8084eb8:	f006 fd41 	bl	808b93e <_ZN5Print7printlnEPKc>
            comma_count++;
 8084ebc:	3501      	adds	r5, #1
    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
 8084ebe:	2d07      	cmp	r5, #7
            from_index += 1;
 8084ec0:	f107 0601 	add.w	r6, r7, #1
    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
 8084ec4:	d1c5      	bne.n	8084e52 <_Z15getEspOzoneDatav+0x112>
        ozone_value = stringArray[1].toFloat();
 8084ec6:	a810      	add	r0, sp, #64	; 0x40
 8084ec8:	f006 fcdd 	bl	808b886 <_ZNK6String7toFloatEv>
        if(debugging_enabled){
 8084ecc:	6823      	ldr	r3, [r4, #0]
        ozone_value = stringArray[1].toFloat();
 8084ece:	4605      	mov	r5, r0
        if(debugging_enabled){
 8084ed0:	b123      	cbz	r3, 8084edc <_Z15getEspOzoneDatav+0x19c>
            Serial.println("using string array index 1 due to logging");
 8084ed2:	f007 fdef 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084ed6:	492e      	ldr	r1, [pc, #184]	; (8084f90 <_Z15getEspOzoneDatav+0x250>)
            Serial.println("using string array index 0, not logging");
 8084ed8:	f006 fd31 	bl	808b93e <_ZN5Print7printlnEPKc>
    float ozone_value = 0.0;
 8084edc:	2406      	movs	r4, #6
    String stringArray[NUMBER_OF_FEILDS];
 8084ede:	ab0c      	add	r3, sp, #48	; 0x30
 8084ee0:	eb03 1004 	add.w	r0, r3, r4, lsl #4
 8084ee4:	f006 fabc 	bl	808b460 <_ZN6StringD1Ev>
 8084ee8:	3c01      	subs	r4, #1
 8084eea:	d2f8      	bcs.n	8084ede <_Z15getEspOzoneDatav+0x19e>
    String recievedData = " ";
 8084eec:	a804      	add	r0, sp, #16
 8084eee:	f006 fab7 	bl	808b460 <_ZN6StringD1Ev>
    String getOzoneData = "Z&";
 8084ef2:	4668      	mov	r0, sp
 8084ef4:	f006 fab4 	bl	808b460 <_ZN6StringD1Ev>
}
 8084ef8:	4628      	mov	r0, r5
 8084efa:	b029      	add	sp, #164	; 0xa4
 8084efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int index_of_cr = recievedData.indexOf('\r', from_index);
 8084f00:	4632      	mov	r2, r6
 8084f02:	210d      	movs	r1, #13
 8084f04:	a804      	add	r0, sp, #16
 8084f06:	f006 fc88 	bl	808b81a <_ZNK6String7indexOfEcj>
            if(index_of_cr > 0){
 8084f0a:	1e03      	subs	r3, r0, #0
 8084f0c:	dd1c      	ble.n	8084f48 <_Z15getEspOzoneDatav+0x208>
                stringArray[comma_count] = recievedData.substring(from_index, index_of_cr);
 8084f0e:	4632      	mov	r2, r6
 8084f10:	a904      	add	r1, sp, #16
 8084f12:	a808      	add	r0, sp, #32
 8084f14:	f006 fc90 	bl	808b838 <_ZNK6String9substringEjj>
 8084f18:	ab0c      	add	r3, sp, #48	; 0x30
 8084f1a:	eb03 1005 	add.w	r0, r3, r5, lsl #4
 8084f1e:	a908      	add	r1, sp, #32
 8084f20:	f006 fb32 	bl	808b588 <_ZN6StringaSEOS_>
 8084f24:	a808      	add	r0, sp, #32
 8084f26:	f006 fa9b 	bl	808b460 <_ZN6StringD1Ev>
                if(debugging_enabled){
 8084f2a:	6823      	ldr	r3, [r4, #0]
                stringArray[comma_count] = recievedData.substring(from_index, index_of_cr);
 8084f2c:	012f      	lsls	r7, r5, #4
                if(debugging_enabled){
 8084f2e:	b15b      	cbz	r3, 8084f48 <_Z15getEspOzoneDatav+0x208>
                    Serial.printf("String[%d]:", comma_count);
 8084f30:	f007 fdc0 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084f34:	4917      	ldr	r1, [pc, #92]	; (8084f94 <_Z15getEspOzoneDatav+0x254>)
 8084f36:	462a      	mov	r2, r5
 8084f38:	f7fb fe9a 	bl	8080c70 <_ZN5Print6printfEPKcz>
                    Serial.println(stringArray[comma_count]);
 8084f3c:	f007 fdba 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084f40:	ab0c      	add	r3, sp, #48	; 0x30
 8084f42:	59d9      	ldr	r1, [r3, r7]
 8084f44:	f006 fcfb 	bl	808b93e <_ZN5Print7printlnEPKc>
    }else if(comma_count == (NUMBER_OF_FIELDS_LOGGING - 1)){
 8084f48:	2d06      	cmp	r5, #6
 8084f4a:	d001      	beq.n	8084f50 <_Z15getEspOzoneDatav+0x210>
    float ozone_value = 0.0;
 8084f4c:	2500      	movs	r5, #0
 8084f4e:	e7c5      	b.n	8084edc <_Z15getEspOzoneDatav+0x19c>
        ozone_value = stringArray[0].toFloat();
 8084f50:	a80c      	add	r0, sp, #48	; 0x30
 8084f52:	f006 fc98 	bl	808b886 <_ZNK6String7toFloatEv>
        if(debugging_enabled){
 8084f56:	6823      	ldr	r3, [r4, #0]
        ozone_value = stringArray[0].toFloat();
 8084f58:	4605      	mov	r5, r0
        if(debugging_enabled){
 8084f5a:	2b00      	cmp	r3, #0
 8084f5c:	d0be      	beq.n	8084edc <_Z15getEspOzoneDatav+0x19c>
            Serial.println("using string array index 0, not logging");
 8084f5e:	f007 fda9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084f62:	490d      	ldr	r1, [pc, #52]	; (8084f98 <_Z15getEspOzoneDatav+0x258>)
 8084f64:	e7b8      	b.n	8084ed8 <_Z15getEspOzoneDatav+0x198>
 8084f66:	bf00      	nop
 8084f68:	00000000 	.word	0x00000000
 8084f6c:	40cd4c00 	.word	0x40cd4c00
 8084f70:	08093018 	.word	0x08093018
 8084f74:	20000690 	.word	0x20000690
 8084f78:	08093d04 	.word	0x08093d04
 8084f7c:	0809301b 	.word	0x0809301b
 8084f80:	08093037 	.word	0x08093037
 8084f84:	08093071 	.word	0x08093071
 8084f88:	0809308a 	.word	0x0809308a
 8084f8c:	080943b2 	.word	0x080943b2
 8084f90:	080930bb 	.word	0x080930bb
 8084f94:	080930af 	.word	0x080930af
 8084f98:	080930e5 	.word	0x080930e5
 8084f9c:	3ff00000 	.word	0x3ff00000
 8084fa0:	080930a1 	.word	0x080930a1
 8084fa4:	00000000 	.word	0x00000000

08084fa8 <_Z9readOzonev>:
void readOzone(void){
 8084fa8:	b538      	push	{r3, r4, r5, lr}
    if(ozone_analog_enabled){
 8084faa:	4b21      	ldr	r3, [pc, #132]	; (8085030 <_Z9readOzonev+0x88>)
 8084fac:	4d21      	ldr	r5, [pc, #132]	; (8085034 <_Z9readOzonev+0x8c>)
 8084fae:	681b      	ldr	r3, [r3, #0]
 8084fb0:	b38b      	cbz	r3, 8085016 <_Z9readOzonev+0x6e>
        tempValue = analogRead(A0);  // read the analogPin for ozone voltage
 8084fb2:	200a      	movs	r0, #10
 8084fb4:	f008 f96f 	bl	808d296 <analogRead>
        if(debugging_enabled){
 8084fb8:	4b1f      	ldr	r3, [pc, #124]	; (8085038 <_Z9readOzonev+0x90>)
        tempValue = analogRead(A0);  // read the analogPin for ozone voltage
 8084fba:	4604      	mov	r4, r0
        if(debugging_enabled){
 8084fbc:	681b      	ldr	r3, [r3, #0]
 8084fbe:	b153      	cbz	r3, 8084fd6 <_Z9readOzonev+0x2e>
            Serial.print("Ozone Raw analog in:");
 8084fc0:	f007 fd78 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084fc4:	491d      	ldr	r1, [pc, #116]	; (808503c <_Z9readOzonev+0x94>)
 8084fc6:	f006 fca7 	bl	808b918 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8084fca:	f007 fd73 	bl	808cab4 <_Z16_fetch_usbserialv>
 8084fce:	220a      	movs	r2, #10
 8084fd0:	4621      	mov	r1, r4
 8084fd2:	f7ff fea8 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        O3_float = tempValue;
 8084fd6:	4620      	mov	r0, r4
 8084fd8:	f008 ffe6 	bl	808dfa8 <__aeabi_i2f>
        O3_float *= VOLTS_PER_UNIT;           //convert digital reading to voltage
 8084fdc:	f008 fb8a 	bl	808d6f4 <__aeabi_f2d>
 8084fe0:	a30f      	add	r3, pc, #60	; (adr r3, 8085020 <_Z9readOzonev+0x78>)
 8084fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084fe6:	f008 fbdd 	bl	808d7a4 <__aeabi_dmul>
 8084fea:	f008 fed3 	bl	808dd94 <__aeabi_d2f>
        O3_float /= VOLTS_PER_PPB;            //convert voltage to ppb of ozone
 8084fee:	f008 fb81 	bl	808d6f4 <__aeabi_f2d>
 8084ff2:	a30d      	add	r3, pc, #52	; (adr r3, 8085028 <_Z9readOzonev+0x80>)
 8084ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084ff8:	f008 fcfe 	bl	808d9f8 <__aeabi_ddiv>
 8084ffc:	f008 feca 	bl	808dd94 <__aeabi_d2f>
        O3_float += ozone_offset;
 8085000:	4b0f      	ldr	r3, [pc, #60]	; (8085040 <_Z9readOzonev+0x98>)
        O3_float /= VOLTS_PER_PPB;            //convert voltage to ppb of ozone
 8085002:	4604      	mov	r4, r0
        O3_float += ozone_offset;
 8085004:	6818      	ldr	r0, [r3, #0]
 8085006:	f008 ffcf 	bl	808dfa8 <__aeabi_i2f>
 808500a:	4601      	mov	r1, r0
 808500c:	4620      	mov	r0, r4
 808500e:	f008 ff17 	bl	808de40 <__addsf3>
        O3_float = getEspOzoneData();
 8085012:	6028      	str	r0, [r5, #0]
}
 8085014:	bd38      	pop	{r3, r4, r5, pc}
        O3_float = getEspOzoneData();
 8085016:	f7ff fe93 	bl	8084d40 <_Z15getEspOzoneDatav>
 808501a:	e7fa      	b.n	8085012 <_Z9readOzonev+0x6a>
 808501c:	f3af 8000 	nop.w
 8085020:	eb1c432d 	.word	0xeb1c432d
 8085024:	3f4a36e2 	.word	0x3f4a36e2
 8085028:	9999999a 	.word	0x9999999a
 808502c:	3f899999 	.word	0x3f899999
 8085030:	20000804 	.word	0x20000804
 8085034:	20000354 	.word	0x20000354
 8085038:	20000690 	.word	0x20000690
 808503c:	0809310d 	.word	0x0809310d
 8085040:	2000080c 	.word	0x2000080c

08085044 <_Z17serialGetDeviceIdv>:
void serialGetDeviceId(void){
 8085044:	b530      	push	{r4, r5, lr}
 8085046:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8085048:	f007 fd34 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.println(DEVICE_id);
 808504c:	4d35      	ldr	r5, [pc, #212]	; (8085124 <_Z17serialGetDeviceIdv+0xe0>)
    Serial.println();
 808504e:	f006 fc6a 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8085052:	f007 fd2f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085056:	4934      	ldr	r1, [pc, #208]	; (8085128 <_Z17serialGetDeviceIdv+0xe4>)
 8085058:	f006 fc5e 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 808505c:	f007 fd2a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085060:	220a      	movs	r2, #10
 8085062:	6829      	ldr	r1, [r5, #0]
 8085064:	f7ff fe5f 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the ID");
 8085068:	f007 fd24 	bl	808cab4 <_Z16_fetch_usbserialv>
 808506c:	492f      	ldr	r1, [pc, #188]	; (808512c <_Z17serialGetDeviceIdv+0xe8>)
 808506e:	f006 fc66 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8085072:	f007 fd1f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085076:	f24c 3150 	movw	r1, #50000	; 0xc350
 808507a:	f006 fdb3 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808507e:	f007 fd19 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085082:	220d      	movs	r2, #13
 8085084:	4601      	mov	r1, r0
 8085086:	4668      	mov	r0, sp
 8085088:	f006 fe16 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808508c:	4668      	mov	r0, sp
 808508e:	4928      	ldr	r1, [pc, #160]	; (8085130 <_Z17serialGetDeviceIdv+0xec>)
 8085090:	f006 fb87 	bl	808b7a2 <_ZNK6String6equalsEPKc>
    if(tempString == "bould"){
 8085094:	2800      	cmp	r0, #0
 8085096:	d03e      	beq.n	8085116 <_Z17serialGetDeviceIdv+0xd2>
        Serial.println("Password correct!");
 8085098:	f007 fd0c 	bl	808cab4 <_Z16_fetch_usbserialv>
 808509c:	4925      	ldr	r1, [pc, #148]	; (8085134 <_Z17serialGetDeviceIdv+0xf0>)
 808509e:	f006 fc4e 	bl	808b93e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 80850a2:	f007 fd07 	bl	808cab4 <_Z16_fetch_usbserialv>
 80850a6:	4924      	ldr	r1, [pc, #144]	; (8085138 <_Z17serialGetDeviceIdv+0xf4>)
 80850a8:	f006 fc49 	bl	808b93e <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 80850ac:	f007 fd02 	bl	808cab4 <_Z16_fetch_usbserialv>
 80850b0:	220d      	movs	r2, #13
 80850b2:	4601      	mov	r1, r0
 80850b4:	a804      	add	r0, sp, #16
 80850b6:	f006 fdff 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 80850ba:	a804      	add	r0, sp, #16
 80850bc:	f006 fbde 	bl	808b87c <_ZNK6String5toIntEv>
 80850c0:	4604      	mov	r4, r0
        Serial.println("");
 80850c2:	f007 fcf7 	bl	808cab4 <_Z16_fetch_usbserialv>
 80850c6:	491d      	ldr	r1, [pc, #116]	; (808513c <_Z17serialGetDeviceIdv+0xf8>)
 80850c8:	f006 fc39 	bl	808b93e <_ZN5Print7printlnEPKc>
        if(tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER){
 80850cc:	f242 730c 	movw	r3, #9996	; 0x270c
 80850d0:	1ea2      	subs	r2, r4, #2
 80850d2:	429a      	cmp	r2, r3
 80850d4:	d819      	bhi.n	808510a <_Z17serialGetDeviceIdv+0xc6>
            Serial.print("\n\rNew Device ID:");
 80850d6:	f007 fced 	bl	808cab4 <_Z16_fetch_usbserialv>
 80850da:	4919      	ldr	r1, [pc, #100]	; (8085140 <_Z17serialGetDeviceIdv+0xfc>)
 80850dc:	f006 fc1c 	bl	808b918 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 80850e0:	f007 fce8 	bl	808cab4 <_Z16_fetch_usbserialv>
 80850e4:	4621      	mov	r1, r4
 80850e6:	220a      	movs	r2, #10
 80850e8:	f7ff fe1d 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
            DEVICE_id = tempValue;
 80850ec:	602c      	str	r4, [r5, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 80850ee:	f008 f8e9 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80850f2:	4629      	mov	r1, r5
 80850f4:	2000      	movs	r0, #0
 80850f6:	f7fb fd89 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 80850fa:	a804      	add	r0, sp, #16
 80850fc:	f006 f9b0 	bl	808b460 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8085100:	4668      	mov	r0, sp
 8085102:	f006 f9ad 	bl	808b460 <_ZN6StringD1Ev>
}
 8085106:	b009      	add	sp, #36	; 0x24
 8085108:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 808510a:	f007 fcd3 	bl	808cab4 <_Z16_fetch_usbserialv>
 808510e:	490d      	ldr	r1, [pc, #52]	; (8085144 <_Z17serialGetDeviceIdv+0x100>)
 8085110:	f006 fc15 	bl	808b93e <_ZN5Print7printlnEPKc>
 8085114:	e7f1      	b.n	80850fa <_Z17serialGetDeviceIdv+0xb6>
        Serial.println("\n\rIncorrect password!");
 8085116:	f007 fccd 	bl	808cab4 <_Z16_fetch_usbserialv>
 808511a:	490b      	ldr	r1, [pc, #44]	; (8085148 <_Z17serialGetDeviceIdv+0x104>)
 808511c:	f006 fc0f 	bl	808b93e <_ZN5Print7printlnEPKc>
 8085120:	e7ee      	b.n	8085100 <_Z17serialGetDeviceIdv+0xbc>
 8085122:	bf00      	nop
 8085124:	20000080 	.word	0x20000080
 8085128:	08093122 	.word	0x08093122
 808512c:	08093135 	.word	0x08093135
 8085130:	080920b9 	.word	0x080920b9
 8085134:	080920bf 	.word	0x080920bf
 8085138:	08093165 	.word	0x08093165
 808513c:	080943b2 	.word	0x080943b2
 8085140:	0809317a 	.word	0x0809317a
 8085144:	080922f0 	.word	0x080922f0
 8085148:	080921e4 	.word	0x080921e4

0808514c <_Z13serialGetZonev>:
void serialGetZone(void){
 808514c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 808514e:	f007 fcb1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085152:	491f      	ldr	r1, [pc, #124]	; (80851d0 <_Z13serialGetZonev+0x84>)
 8085154:	f006 fbf3 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8085158:	f007 fcac 	bl	808cab4 <_Z16_fetch_usbserialv>
 808515c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085160:	f006 fd40 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085164:	f007 fca6 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085168:	220d      	movs	r2, #13
 808516a:	4601      	mov	r1, r0
 808516c:	a802      	add	r0, sp, #8
 808516e:	f006 fda3 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085172:	a802      	add	r0, sp, #8
 8085174:	f006 fb82 	bl	808b87c <_ZNK6String5toIntEv>
 8085178:	9001      	str	r0, [sp, #4]
    Serial.println("");
 808517a:	f007 fc9b 	bl	808cab4 <_Z16_fetch_usbserialv>
 808517e:	4915      	ldr	r1, [pc, #84]	; (80851d4 <_Z13serialGetZonev+0x88>)
 8085180:	f006 fbdd 	bl	808b93e <_ZN5Print7printlnEPKc>
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
 8085184:	9801      	ldr	r0, [sp, #4]
 8085186:	f100 030c 	add.w	r3, r0, #12
 808518a:	2b1a      	cmp	r3, #26
 808518c:	d81a      	bhi.n	80851c4 <_Z13serialGetZonev+0x78>
        Time.zone(tempValue);
 808518e:	f008 ff0b 	bl	808dfa8 <__aeabi_i2f>
 8085192:	f006 fe07 	bl	808bda4 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
 8085196:	f007 fc8d 	bl	808cab4 <_Z16_fetch_usbserialv>
 808519a:	490f      	ldr	r1, [pc, #60]	; (80851d8 <_Z13serialGetZonev+0x8c>)
 808519c:	f006 fbbc 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80851a0:	f007 fc88 	bl	808cab4 <_Z16_fetch_usbserialv>
 80851a4:	9901      	ldr	r1, [sp, #4]
 80851a6:	220a      	movs	r2, #10
 80851a8:	f7ff fdbd 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 80851ac:	f008 f88a 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80851b0:	2054      	movs	r0, #84	; 0x54
 80851b2:	a901      	add	r1, sp, #4
 80851b4:	f7fb fd2a 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80851b8:	a802      	add	r0, sp, #8
 80851ba:	f006 f951 	bl	808b460 <_ZN6StringD1Ev>
}
 80851be:	b007      	add	sp, #28
 80851c0:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rInvalid value!");
 80851c4:	f007 fc76 	bl	808cab4 <_Z16_fetch_usbserialv>
 80851c8:	4904      	ldr	r1, [pc, #16]	; (80851dc <_Z13serialGetZonev+0x90>)
 80851ca:	f006 fbb8 	bl	808b93e <_ZN5Print7printlnEPKc>
 80851ce:	e7f3      	b.n	80851b8 <_Z13serialGetZonev+0x6c>
 80851d0:	0809318b 	.word	0x0809318b
 80851d4:	080943b2 	.word	0x080943b2
 80851d8:	080931b6 	.word	0x080931b6
 80851dc:	080922f0 	.word	0x080922f0

080851e0 <_Z19serialGetLowerLimitv>:
void serialGetLowerLimit(void){
 80851e0:	b530      	push	{r4, r5, lr}
 80851e2:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 80851e4:	f007 fc66 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.println(gas_lower_limit);
 80851e8:	4d35      	ldr	r5, [pc, #212]	; (80852c0 <_Z19serialGetLowerLimitv+0xe0>)
    Serial.println();
 80851ea:	f006 fb9c 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 80851ee:	f007 fc61 	bl	808cab4 <_Z16_fetch_usbserialv>
 80851f2:	4934      	ldr	r1, [pc, #208]	; (80852c4 <_Z19serialGetLowerLimitv+0xe4>)
 80851f4:	f006 fb90 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 80851f8:	f007 fc5c 	bl	808cab4 <_Z16_fetch_usbserialv>
 80851fc:	220a      	movs	r2, #10
 80851fe:	6829      	ldr	r1, [r5, #0]
 8085200:	f7ff fd91 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the lower limit");
 8085204:	f007 fc56 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085208:	492f      	ldr	r1, [pc, #188]	; (80852c8 <_Z19serialGetLowerLimitv+0xe8>)
 808520a:	f006 fb98 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808520e:	f007 fc51 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085212:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085216:	f006 fce5 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808521a:	f007 fc4b 	bl	808cab4 <_Z16_fetch_usbserialv>
 808521e:	220d      	movs	r2, #13
 8085220:	4601      	mov	r1, r0
 8085222:	4668      	mov	r0, sp
 8085224:	f006 fd48 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
 8085228:	4668      	mov	r0, sp
 808522a:	4928      	ldr	r1, [pc, #160]	; (80852cc <_Z19serialGetLowerLimitv+0xec>)
 808522c:	f006 fab9 	bl	808b7a2 <_ZNK6String6equalsEPKc>
    if(tempString == "bould"){
 8085230:	2800      	cmp	r0, #0
 8085232:	d03e      	beq.n	80852b2 <_Z19serialGetLowerLimitv+0xd2>
        Serial.println("Password correct!");
 8085234:	f007 fc3e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085238:	4925      	ldr	r1, [pc, #148]	; (80852d0 <_Z19serialGetLowerLimitv+0xf0>)
 808523a:	f006 fb80 	bl	808b93e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 808523e:	f007 fc39 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085242:	4924      	ldr	r1, [pc, #144]	; (80852d4 <_Z19serialGetLowerLimitv+0xf4>)
 8085244:	f006 fb7b 	bl	808b93e <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8085248:	f007 fc34 	bl	808cab4 <_Z16_fetch_usbserialv>
 808524c:	220d      	movs	r2, #13
 808524e:	4601      	mov	r1, r0
 8085250:	a804      	add	r0, sp, #16
 8085252:	f006 fd31 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8085256:	a804      	add	r0, sp, #16
 8085258:	f006 fb10 	bl	808b87c <_ZNK6String5toIntEv>
 808525c:	4604      	mov	r4, r0
        Serial.println("");
 808525e:	f007 fc29 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085262:	491d      	ldr	r1, [pc, #116]	; (80852d8 <_Z19serialGetLowerLimitv+0xf8>)
 8085264:	f006 fb6b 	bl	808b93e <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 20000){
 8085268:	f644 631e 	movw	r3, #19998	; 0x4e1e
 808526c:	1e62      	subs	r2, r4, #1
 808526e:	429a      	cmp	r2, r3
 8085270:	d819      	bhi.n	80852a6 <_Z19serialGetLowerLimitv+0xc6>
            Serial.print("\n\rNew lower limit:");
 8085272:	f007 fc1f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085276:	4919      	ldr	r1, [pc, #100]	; (80852dc <_Z19serialGetLowerLimitv+0xfc>)
 8085278:	f006 fb4e 	bl	808b918 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 808527c:	f007 fc1a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085280:	4621      	mov	r1, r4
 8085282:	220a      	movs	r2, #10
 8085284:	f7ff fd4f 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
            gas_lower_limit = tempValue;
 8085288:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 808528a:	f008 f81b 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808528e:	4629      	mov	r1, r5
 8085290:	204c      	movs	r0, #76	; 0x4c
 8085292:	f7fb fcbb 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 8085296:	a804      	add	r0, sp, #16
 8085298:	f006 f8e2 	bl	808b460 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 808529c:	4668      	mov	r0, sp
 808529e:	f006 f8df 	bl	808b460 <_ZN6StringD1Ev>
}
 80852a2:	b009      	add	sp, #36	; 0x24
 80852a4:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 80852a6:	f007 fc05 	bl	808cab4 <_Z16_fetch_usbserialv>
 80852aa:	490d      	ldr	r1, [pc, #52]	; (80852e0 <_Z19serialGetLowerLimitv+0x100>)
 80852ac:	f006 fb47 	bl	808b93e <_ZN5Print7printlnEPKc>
 80852b0:	e7f1      	b.n	8085296 <_Z19serialGetLowerLimitv+0xb6>
        Serial.println("\n\rIncorrect password!");
 80852b2:	f007 fbff 	bl	808cab4 <_Z16_fetch_usbserialv>
 80852b6:	490b      	ldr	r1, [pc, #44]	; (80852e4 <_Z19serialGetLowerLimitv+0x104>)
 80852b8:	f006 fb41 	bl	808b93e <_ZN5Print7printlnEPKc>
 80852bc:	e7ee      	b.n	808529c <_Z19serialGetLowerLimitv+0xbc>
 80852be:	bf00      	nop
 80852c0:	20000098 	.word	0x20000098
 80852c4:	080931ce 	.word	0x080931ce
 80852c8:	080931e3 	.word	0x080931e3
 80852cc:	080920b9 	.word	0x080920b9
 80852d0:	080920bf 	.word	0x080920bf
 80852d4:	0809321c 	.word	0x0809321c
 80852d8:	080943b2 	.word	0x080943b2
 80852dc:	08093235 	.word	0x08093235
 80852e0:	080922f0 	.word	0x080922f0
 80852e4:	080921e4 	.word	0x080921e4

080852e8 <_Z19serialGetUpperLimitv>:
void serialGetUpperLimit(void){
 80852e8:	b530      	push	{r4, r5, lr}
 80852ea:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 80852ec:	f007 fbe2 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.println(gas_upper_limit);
 80852f0:	4d35      	ldr	r5, [pc, #212]	; (80853c8 <_Z19serialGetUpperLimitv+0xe0>)
    Serial.println();
 80852f2:	f006 fb18 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 80852f6:	f007 fbdd 	bl	808cab4 <_Z16_fetch_usbserialv>
 80852fa:	4934      	ldr	r1, [pc, #208]	; (80853cc <_Z19serialGetUpperLimitv+0xe4>)
 80852fc:	f006 fb0c 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 8085300:	f007 fbd8 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085304:	220a      	movs	r2, #10
 8085306:	6829      	ldr	r1, [r5, #0]
 8085308:	f7ff fd0d 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the upper limit");
 808530c:	f007 fbd2 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085310:	492f      	ldr	r1, [pc, #188]	; (80853d0 <_Z19serialGetUpperLimitv+0xe8>)
 8085312:	f006 fb14 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8085316:	f007 fbcd 	bl	808cab4 <_Z16_fetch_usbserialv>
 808531a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808531e:	f006 fc61 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085322:	f007 fbc7 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085326:	220d      	movs	r2, #13
 8085328:	4601      	mov	r1, r0
 808532a:	4668      	mov	r0, sp
 808532c:	f006 fcc4 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
 8085330:	4668      	mov	r0, sp
 8085332:	4928      	ldr	r1, [pc, #160]	; (80853d4 <_Z19serialGetUpperLimitv+0xec>)
 8085334:	f006 fa35 	bl	808b7a2 <_ZNK6String6equalsEPKc>
    if(tempString == "bould"){
 8085338:	2800      	cmp	r0, #0
 808533a:	d03e      	beq.n	80853ba <_Z19serialGetUpperLimitv+0xd2>
        Serial.println("Password correct!");
 808533c:	f007 fbba 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085340:	4925      	ldr	r1, [pc, #148]	; (80853d8 <_Z19serialGetUpperLimitv+0xf0>)
 8085342:	f006 fafc 	bl	808b93e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 8085346:	f007 fbb5 	bl	808cab4 <_Z16_fetch_usbserialv>
 808534a:	4924      	ldr	r1, [pc, #144]	; (80853dc <_Z19serialGetUpperLimitv+0xf4>)
 808534c:	f006 faf7 	bl	808b93e <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8085350:	f007 fbb0 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085354:	220d      	movs	r2, #13
 8085356:	4601      	mov	r1, r0
 8085358:	a804      	add	r0, sp, #16
 808535a:	f006 fcad 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 808535e:	a804      	add	r0, sp, #16
 8085360:	f006 fa8c 	bl	808b87c <_ZNK6String5toIntEv>
 8085364:	4604      	mov	r4, r0
        Serial.println("");
 8085366:	f007 fba5 	bl	808cab4 <_Z16_fetch_usbserialv>
 808536a:	491d      	ldr	r1, [pc, #116]	; (80853e0 <_Z19serialGetUpperLimitv+0xf8>)
 808536c:	f006 fae7 	bl	808b93e <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 50000){
 8085370:	f24c 334e 	movw	r3, #49998	; 0xc34e
 8085374:	1e62      	subs	r2, r4, #1
 8085376:	429a      	cmp	r2, r3
 8085378:	d819      	bhi.n	80853ae <_Z19serialGetUpperLimitv+0xc6>
            Serial.print("\n\rNew upper limit:");
 808537a:	f007 fb9b 	bl	808cab4 <_Z16_fetch_usbserialv>
 808537e:	4919      	ldr	r1, [pc, #100]	; (80853e4 <_Z19serialGetUpperLimitv+0xfc>)
 8085380:	f006 faca 	bl	808b918 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8085384:	f007 fb96 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085388:	4621      	mov	r1, r4
 808538a:	220a      	movs	r2, #10
 808538c:	f7ff fccb 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
            gas_upper_limit = tempValue;
 8085390:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8085392:	f007 ff97 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8085396:	4629      	mov	r1, r5
 8085398:	2050      	movs	r0, #80	; 0x50
 808539a:	f7fb fc37 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 808539e:	a804      	add	r0, sp, #16
 80853a0:	f006 f85e 	bl	808b460 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80853a4:	4668      	mov	r0, sp
 80853a6:	f006 f85b 	bl	808b460 <_ZN6StringD1Ev>
}
 80853aa:	b009      	add	sp, #36	; 0x24
 80853ac:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 80853ae:	f007 fb81 	bl	808cab4 <_Z16_fetch_usbserialv>
 80853b2:	490d      	ldr	r1, [pc, #52]	; (80853e8 <_Z19serialGetUpperLimitv+0x100>)
 80853b4:	f006 fac3 	bl	808b93e <_ZN5Print7printlnEPKc>
 80853b8:	e7f1      	b.n	808539e <_Z19serialGetUpperLimitv+0xb6>
        Serial.println("\n\rIncorrect password!");
 80853ba:	f007 fb7b 	bl	808cab4 <_Z16_fetch_usbserialv>
 80853be:	490b      	ldr	r1, [pc, #44]	; (80853ec <_Z19serialGetUpperLimitv+0x104>)
 80853c0:	f006 fabd 	bl	808b93e <_ZN5Print7printlnEPKc>
 80853c4:	e7ee      	b.n	80853a4 <_Z19serialGetUpperLimitv+0xbc>
 80853c6:	bf00      	nop
 80853c8:	200000a0 	.word	0x200000a0
 80853cc:	08093248 	.word	0x08093248
 80853d0:	0809325d 	.word	0x0809325d
 80853d4:	080920b9 	.word	0x080920b9
 80853d8:	080920bf 	.word	0x080920bf
 80853dc:	08093296 	.word	0x08093296
 80853e0:	080943b2 	.word	0x080943b2
 80853e4:	080932af 	.word	0x080932af
 80853e8:	080922f0 	.word	0x080922f0
 80853ec:	080921e4 	.word	0x080921e4

080853f0 <setup>:
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80853f0:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
{
 80853f4:	b570      	push	{r4, r5, r6, lr}
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80853f6:	4bc6      	ldr	r3, [pc, #792]	; (8085710 <setup+0x320>)
{
 80853f8:	b0aa      	sub	sp, #168	; 0xa8
    String init_log; //intialization error log
 80853fa:	49c6      	ldr	r1, [pc, #792]	; (8085714 <setup+0x324>)
    pinMode(lmp91000_1_en, OUTPUT);
 80853fc:	4dc6      	ldr	r5, [pc, #792]	; (8085718 <setup+0x328>)
    String init_log; //intialization error log
 80853fe:	a803      	add	r0, sp, #12
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8085400:	801a      	strh	r2, [r3, #0]
    pinMode(lmp91000_2_en, OUTPUT);
 8085402:	4ec6      	ldr	r6, [pc, #792]	; (808571c <setup+0x32c>)
    String init_log; //intialization error log
 8085404:	f006 f876 	bl	808b4f4 <_ZN6StringC1EPKc>
    setADCSampleTime(ADC_SampleTime_480Cycles);
 8085408:	2007      	movs	r0, #7
 808540a:	f006 fe5f 	bl	808c0cc <setADCSampleTime>
    pinMode(lmp91000_1_en, OUTPUT);
 808540e:	2101      	movs	r1, #1
 8085410:	8828      	ldrh	r0, [r5, #0]
 8085412:	f007 ff03 	bl	808d21c <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 8085416:	2101      	movs	r1, #1
 8085418:	8830      	ldrh	r0, [r6, #0]
 808541a:	f007 feff 	bl	808d21c <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 808541e:	4bc0      	ldr	r3, [pc, #768]	; (8085720 <setup+0x330>)
 8085420:	2101      	movs	r1, #1
 8085422:	8818      	ldrh	r0, [r3, #0]
 8085424:	f007 fefa 	bl	808d21c <pinMode>
    pinMode(plantower_en, OUTPUT);
 8085428:	4bbe      	ldr	r3, [pc, #760]	; (8085724 <setup+0x334>)
 808542a:	2101      	movs	r1, #1
 808542c:	8818      	ldrh	r0, [r3, #0]
 808542e:	f007 fef5 	bl	808d21c <pinMode>
    pinMode(power_led_en, OUTPUT);
 8085432:	4bbd      	ldr	r3, [pc, #756]	; (8085728 <setup+0x338>)
 8085434:	2101      	movs	r1, #1
 8085436:	8818      	ldrh	r0, [r3, #0]
 8085438:	f007 fef0 	bl	808d21c <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 808543c:	4bbb      	ldr	r3, [pc, #748]	; (808572c <setup+0x33c>)
 808543e:	2101      	movs	r1, #1
 8085440:	8818      	ldrh	r0, [r3, #0]
 8085442:	f007 feeb 	bl	808d21c <pinMode>
    pinMode(blower_en, OUTPUT);
 8085446:	4bba      	ldr	r3, [pc, #744]	; (8085730 <setup+0x340>)
 8085448:	2101      	movs	r1, #1
 808544a:	8818      	ldrh	r0, [r3, #0]
 808544c:	f007 fee6 	bl	808d21c <pinMode>
    pinMode(D4, INPUT);
 8085450:	2100      	movs	r1, #0
 8085452:	2004      	movs	r0, #4
 8085454:	f007 fee2 	bl	808d21c <pinMode>
    pinMode(co2_en, OUTPUT);
 8085458:	4bb6      	ldr	r3, [pc, #728]	; (8085734 <setup+0x344>)
 808545a:	2101      	movs	r1, #1
 808545c:	8818      	ldrh	r0, [r3, #0]
 808545e:	f007 fedd 	bl	808d21c <pinMode>
    readStoredVars();
 8085462:	f7fb feab 	bl	80811bc <_Z14readStoredVarsv>
    pmic.begin();
 8085466:	48b4      	ldr	r0, [pc, #720]	; (8085738 <setup+0x348>)
 8085468:	f005 fc1f 	bl	808acaa <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 808546c:	f241 0170 	movw	r1, #4208	; 0x1070
 8085470:	48b1      	ldr	r0, [pc, #708]	; (8085738 <setup+0x348>)
 8085472:	f005 fd4e 	bl	808af12 <_ZN4PMIC16setChargeVoltageEt>
    pmic.enableCharging();
 8085476:	48b0      	ldr	r0, [pc, #704]	; (8085738 <setup+0x348>)
 8085478:	f005 fcfa 	bl	808ae70 <_ZN4PMIC14enableChargingEv>
    powerCheck.loop();
 808547c:	4caf      	ldr	r4, [pc, #700]	; (808573c <setup+0x34c>)
    writeRegister(0, 0b00110100);
 808547e:	2134      	movs	r1, #52	; 0x34
 8085480:	2000      	movs	r0, #0
 8085482:	f7fb fd65 	bl	8080f50 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 8085486:	211b      	movs	r1, #27
 8085488:	2001      	movs	r0, #1
 808548a:	f7fb fd61 	bl	8080f50 <_Z13writeRegisterhh>
    powerCheck.loop();
 808548e:	4620      	mov	r0, r4
 8085490:	f001 fe92 	bl	80871b8 <_ZN10PowerCheck4loopEv>
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8085494:	4baa      	ldr	r3, [pc, #680]	; (8085740 <setup+0x350>)
 8085496:	681b      	ldr	r3, [r3, #0]
 8085498:	2b00      	cmp	r3, #0
 808549a:	f000 826c 	beq.w	8085976 <setup+0x586>
 808549e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80854a2:	2b00      	cmp	r3, #0
 80854a4:	f040 8267 	bne.w	8085976 <setup+0x586>
        goToSleepBattery();
 80854a8:	f7fd f9b0 	bl	808280c <_Z16goToSleepBatteryv>
    attachInterrupt(D4, System.reset, RISING);
 80854ac:	2300      	movs	r3, #0
 80854ae:	2201      	movs	r2, #1
 80854b0:	9300      	str	r3, [sp, #0]
 80854b2:	2004      	movs	r0, #4
 80854b4:	f04f 33ff 	mov.w	r3, #4294967295
 80854b8:	49a2      	ldr	r1, [pc, #648]	; (8085744 <setup+0x354>)
 80854ba:	f007 fb63 	bl	808cb84 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if(digitalRead(D4)){
 80854be:	2004      	movs	r0, #4
 80854c0:	f007 fed6 	bl	808d270 <digitalRead>
 80854c4:	b108      	cbz	r0, 80854ca <setup+0xda>
      goToSleep();
 80854c6:	f7fd f953 	bl	8082770 <_Z9goToSleepv>
    digitalWrite(lmp91000_1_en, HIGH);
 80854ca:	2101      	movs	r1, #1
 80854cc:	8828      	ldrh	r0, [r5, #0]
 80854ce:	f007 feb6 	bl	808d23e <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 80854d2:	2101      	movs	r1, #1
 80854d4:	8830      	ldrh	r0, [r6, #0]
 80854d6:	f007 feb2 	bl	808d23e <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 80854da:	4b93      	ldr	r3, [pc, #588]	; (8085728 <setup+0x338>)
 80854dc:	2101      	movs	r1, #1
 80854de:	8818      	ldrh	r0, [r3, #0]
 80854e0:	f007 fead 	bl	808d23e <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 80854e4:	4b8f      	ldr	r3, [pc, #572]	; (8085724 <setup+0x334>)
 80854e6:	2101      	movs	r1, #1
 80854e8:	8818      	ldrh	r0, [r3, #0]
 80854ea:	f007 fea8 	bl	808d23e <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 80854ee:	4b8f      	ldr	r3, [pc, #572]	; (808572c <setup+0x33c>)
 80854f0:	2101      	movs	r1, #1
 80854f2:	8818      	ldrh	r0, [r3, #0]
 80854f4:	f007 fea3 	bl	808d23e <digitalWrite>
    digitalWrite(blower_en, HIGH);
 80854f8:	4b8d      	ldr	r3, [pc, #564]	; (8085730 <setup+0x340>)
 80854fa:	2101      	movs	r1, #1
 80854fc:	8818      	ldrh	r0, [r3, #0]
 80854fe:	f007 fe9e 	bl	808d23e <digitalWrite>
    digitalWrite(co2_en, HIGH);
 8085502:	4b8c      	ldr	r3, [pc, #560]	; (8085734 <setup+0x344>)
 8085504:	2101      	movs	r1, #1
 8085506:	8818      	ldrh	r0, [r3, #0]
 8085508:	f007 fe99 	bl	808d23e <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 808550c:	4b84      	ldr	r3, [pc, #528]	; (8085720 <setup+0x330>)
 808550e:	2101      	movs	r1, #1
 8085510:	8818      	ldrh	r0, [r3, #0]
 8085512:	f007 fe94 	bl	808d23e <digitalWrite>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8085516:	4a8c      	ldr	r2, [pc, #560]	; (8085748 <setup+0x358>)
 8085518:	498c      	ldr	r1, [pc, #560]	; (808574c <setup+0x35c>)
 808551a:	488d      	ldr	r0, [pc, #564]	; (8085750 <setup+0x360>)
 808551c:	f006 ffa7 	bl	808c46e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Serial1.begin(9600);
 8085520:	f007 fc12 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 8085524:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8085528:	f007 fc08 	bl	808cd3c <_ZN11USARTSerial5beginEm>
    Serial4.begin(9600);
 808552c:	f7fb fc6e 	bl	8080e0c <_Z22__fetch_global_Serial4v>
 8085530:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8085534:	f007 fc02 	bl	808cd3c <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 8085538:	f7fb fca4 	bl	8080e84 <_Z22__fetch_global_Serial5v>
 808553c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8085540:	f007 fbfc 	bl	808cd3c <_ZN11USARTSerial5beginEm>
    Serial4.setTimeout(5000);
 8085544:	f7fb fc62 	bl	8080e0c <_Z22__fetch_global_Serial4v>
 8085548:	f241 3188 	movw	r1, #5000	; 0x1388
 808554c:	f006 fb4a 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    delay(10000);
 8085550:	f242 7010 	movw	r0, #10000	; 0x2710
 8085554:	f006 fdbc 	bl	808c0d0 <delay>
    Serial.begin(9600);
 8085558:	f007 faac 	bl	808cab4 <_Z16_fetch_usbserialv>
 808555c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8085560:	f007 fa8e 	bl	808ca80 <_ZN9USBSerial5beginEl>
     fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 8085564:	4b7b      	ldr	r3, [pc, #492]	; (8085754 <setup+0x364>)
 8085566:	220a      	movs	r2, #10
 8085568:	6819      	ldr	r1, [r3, #0]
 808556a:	a807      	add	r0, sp, #28
 808556c:	f006 f836 	bl	808b5dc <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8085570:	a907      	add	r1, sp, #28
 8085572:	a80b      	add	r0, sp, #44	; 0x2c
 8085574:	f005 fffd 	bl	808b572 <_ZN6StringC1ERKS_>
 8085578:	4977      	ldr	r1, [pc, #476]	; (8085758 <setup+0x368>)
 808557a:	a80b      	add	r0, sp, #44	; 0x2c
 808557c:	f006 f8e9 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 8085580:	4604      	mov	r4, r0
 8085582:	f006 fd8d 	bl	808c0a0 <_ZN9TimeClass4yearEv>
 8085586:	220a      	movs	r2, #10
 8085588:	4601      	mov	r1, r0
 808558a:	a80f      	add	r0, sp, #60	; 0x3c
 808558c:	f006 f826 	bl	808b5dc <_ZN6StringC1Eih>
 8085590:	a90f      	add	r1, sp, #60	; 0x3c
 8085592:	4620      	mov	r0, r4
 8085594:	f006 f8d1 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8085598:	4604      	mov	r4, r0
 808559a:	f006 fd79 	bl	808c090 <_ZN9TimeClass5monthEv>
 808559e:	220a      	movs	r2, #10
 80855a0:	4601      	mov	r1, r0
 80855a2:	a813      	add	r0, sp, #76	; 0x4c
 80855a4:	f006 f81a 	bl	808b5dc <_ZN6StringC1Eih>
 80855a8:	a913      	add	r1, sp, #76	; 0x4c
 80855aa:	4620      	mov	r0, r4
 80855ac:	f006 f8c5 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 80855b0:	4604      	mov	r4, r0
 80855b2:	f006 fd61 	bl	808c078 <_ZN9TimeClass3dayEv>
 80855b6:	220a      	movs	r2, #10
 80855b8:	4601      	mov	r1, r0
 80855ba:	a817      	add	r0, sp, #92	; 0x5c
 80855bc:	f006 f80e 	bl	808b5dc <_ZN6StringC1Eih>
 80855c0:	4620      	mov	r0, r4
 80855c2:	a917      	add	r1, sp, #92	; 0x5c
 80855c4:	f006 f8b9 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 80855c8:	4963      	ldr	r1, [pc, #396]	; (8085758 <setup+0x368>)
 80855ca:	f006 f8c2 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 80855ce:	4604      	mov	r4, r0
 80855d0:	f006 fd2e 	bl	808c030 <_ZN9TimeClass4hourEv>
 80855d4:	220a      	movs	r2, #10
 80855d6:	4601      	mov	r1, r0
 80855d8:	a81b      	add	r0, sp, #108	; 0x6c
 80855da:	f005 ffff 	bl	808b5dc <_ZN6StringC1Eih>
 80855de:	a91b      	add	r1, sp, #108	; 0x6c
 80855e0:	4620      	mov	r0, r4
 80855e2:	f006 f8aa 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 80855e6:	4604      	mov	r4, r0
 80855e8:	f006 fd2e 	bl	808c048 <_ZN9TimeClass6minuteEv>
 80855ec:	220a      	movs	r2, #10
 80855ee:	4601      	mov	r1, r0
 80855f0:	a81f      	add	r0, sp, #124	; 0x7c
 80855f2:	f005 fff3 	bl	808b5dc <_ZN6StringC1Eih>
 80855f6:	a91f      	add	r1, sp, #124	; 0x7c
 80855f8:	4620      	mov	r0, r4
 80855fa:	f006 f89e 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 80855fe:	4604      	mov	r4, r0
 8085600:	f006 fd2e 	bl	808c060 <_ZN9TimeClass6secondEv>
 8085604:	220a      	movs	r2, #10
 8085606:	4601      	mov	r1, r0
 8085608:	a823      	add	r0, sp, #140	; 0x8c
 808560a:	f005 ffe7 	bl	808b5dc <_ZN6StringC1Eih>
 808560e:	4620      	mov	r0, r4
 8085610:	a923      	add	r1, sp, #140	; 0x8c
 8085612:	f006 f892 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8085616:	4951      	ldr	r1, [pc, #324]	; (808575c <setup+0x36c>)
 8085618:	f006 f89b 	bl	808b752 <_ZplRK15StringSumHelperPKc>
 808561c:	4c50      	ldr	r4, [pc, #320]	; (8085760 <setup+0x370>)
 808561e:	4601      	mov	r1, r0
 8085620:	4620      	mov	r0, r4
 8085622:	f005 ff97 	bl	808b554 <_ZN6StringaSERKS_>
 8085626:	a823      	add	r0, sp, #140	; 0x8c
 8085628:	f005 ff1a 	bl	808b460 <_ZN6StringD1Ev>
 808562c:	a81f      	add	r0, sp, #124	; 0x7c
 808562e:	f005 ff17 	bl	808b460 <_ZN6StringD1Ev>
 8085632:	a81b      	add	r0, sp, #108	; 0x6c
 8085634:	f005 ff14 	bl	808b460 <_ZN6StringD1Ev>
 8085638:	a817      	add	r0, sp, #92	; 0x5c
 808563a:	f005 ff11 	bl	808b460 <_ZN6StringD1Ev>
 808563e:	a813      	add	r0, sp, #76	; 0x4c
 8085640:	f005 ff0e 	bl	808b460 <_ZN6StringD1Ev>
 8085644:	a80f      	add	r0, sp, #60	; 0x3c
 8085646:	f005 ff0b 	bl	808b460 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808564a:	a80b      	add	r0, sp, #44	; 0x2c
 808564c:	f005 ff08 	bl	808b460 <_ZN6StringD1Ev>
 8085650:	a807      	add	r0, sp, #28
 8085652:	f005 ff05 	bl	808b460 <_ZN6StringD1Ev>
     Serial.println("Checking for sd card");
 8085656:	f007 fa2d 	bl	808cab4 <_Z16_fetch_usbserialv>
 808565a:	4942      	ldr	r1, [pc, #264]	; (8085764 <setup+0x374>)
 808565c:	f006 f96f 	bl	808b93e <_ZN5Print7printlnEPKc>
	StringSumHelper(const char *p) : String(p) {}
 8085660:	4941      	ldr	r1, [pc, #260]	; (8085768 <setup+0x378>)
 8085662:	a823      	add	r0, sp, #140	; 0x8c
 8085664:	f005 ff46 	bl	808b4f4 <_ZN6StringC1EPKc>
     logFileName = "log_" + fileName;
 8085668:	4621      	mov	r1, r4
 808566a:	a823      	add	r0, sp, #140	; 0x8c
 808566c:	f006 f865 	bl	808b73a <_ZplRK15StringSumHelperRK6String>
 8085670:	4601      	mov	r1, r0
 8085672:	483e      	ldr	r0, [pc, #248]	; (808576c <setup+0x37c>)
 8085674:	f005 ff6e 	bl	808b554 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 8085678:	a823      	add	r0, sp, #140	; 0x8c
 808567a:	f005 fef1 	bl	808b460 <_ZN6StringD1Ev>
 808567e:	493c      	ldr	r1, [pc, #240]	; (8085770 <setup+0x380>)
 8085680:	2302      	movs	r3, #2
 8085682:	220c      	movs	r2, #12
 8085684:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8085688:	f7fb fc38 	bl	8080efc <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS)) { //if uSD is functioning and MCP error has not been logged yet.
 808568c:	2800      	cmp	r0, #0
 808568e:	f000 8186 	beq.w	808599e <setup+0x5ae>
      Serial.print("Created new file to log to uSD card: ");
 8085692:	f007 fa0f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085696:	4937      	ldr	r1, [pc, #220]	; (8085774 <setup+0x384>)
 8085698:	f006 f93e 	bl	808b918 <_ZN5Print5printEPKc>
      Serial.println(fileName);
 808569c:	f007 fa0a 	bl	808cab4 <_Z16_fetch_usbserialv>
 80856a0:	6821      	ldr	r1, [r4, #0]
    if(debugging_enabled)
 80856a2:	4c35      	ldr	r4, [pc, #212]	; (8085778 <setup+0x388>)
        Serial.println("No uSD card detected.");
 80856a4:	f006 f94b 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.println("Starting LMP91000 CO initialization");
 80856a8:	f007 fa04 	bl	808cab4 <_Z16_fetch_usbserialv>
 80856ac:	4933      	ldr	r1, [pc, #204]	; (808577c <setup+0x38c>)
 80856ae:	f006 f946 	bl	808b93e <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 80856b2:	6823      	ldr	r3, [r4, #0]
 80856b4:	b14b      	cbz	r3, 80856ca <setup+0x2da>
        writeLogFile("Starting LMP91000 CO initialization");
 80856b6:	4931      	ldr	r1, [pc, #196]	; (808577c <setup+0x38c>)
 80856b8:	a823      	add	r0, sp, #140	; 0x8c
 80856ba:	f005 ff1b 	bl	808b4f4 <_ZN6StringC1EPKc>
 80856be:	a823      	add	r0, sp, #140	; 0x8c
 80856c0:	f7fc fb1e 	bl	8081d00 <_Z12writeLogFile6String>
 80856c4:	a823      	add	r0, sp, #140	; 0x8c
 80856c6:	f005 fecb 	bl	808b460 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 80856ca:	f007 fe4d 	bl	808d368 <_Z19__fetch_global_Wirev>
 80856ce:	f007 fbb5 	bl	808ce3c <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 80856d2:	2100      	movs	r1, #0
 80856d4:	8828      	ldrh	r0, [r5, #0]
 80856d6:	f007 fdb2 	bl	808d23e <digitalWrite>
    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80856da:	2303      	movs	r3, #3
 80856dc:	22b0      	movs	r2, #176	; 0xb0
 80856de:	2118      	movs	r1, #24
 80856e0:	4827      	ldr	r0, [pc, #156]	; (8085780 <setup+0x390>)
 80856e2:	f001 fd13 	bl	808710c <_ZN8LMP910009configureEhhh>
 80856e6:	2800      	cmp	r0, #0
 80856e8:	f040 815d 	bne.w	80859a6 <setup+0x5b6>
          Serial.println("Couldn't communicate with LMP91000 for CO");
 80856ec:	f007 f9e2 	bl	808cab4 <_Z16_fetch_usbserialv>
 80856f0:	4924      	ldr	r1, [pc, #144]	; (8085784 <setup+0x394>)
 80856f2:	f006 f924 	bl	808b93e <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 80856f6:	6823      	ldr	r3, [r4, #0]
 80856f8:	2b00      	cmp	r3, #0
 80856fa:	d047      	beq.n	808578c <setup+0x39c>
            writeLogFile("Couldn't communicate with LMP91000 for CO");
 80856fc:	4921      	ldr	r1, [pc, #132]	; (8085784 <setup+0x394>)
 80856fe:	a823      	add	r0, sp, #140	; 0x8c
 8085700:	f005 fef8 	bl	808b4f4 <_ZN6StringC1EPKc>
 8085704:	a823      	add	r0, sp, #140	; 0x8c
 8085706:	f7fc fafb 	bl	8081d00 <_Z12writeLogFile6String>
 808570a:	a823      	add	r0, sp, #140	; 0x8c
 808570c:	e03c      	b.n	8085788 <setup+0x398>
 808570e:	bf00      	nop
 8085710:	20000cf8 	.word	0x20000cf8
 8085714:	080943b2 	.word	0x080943b2
 8085718:	200000c8 	.word	0x200000c8
 808571c:	200000cc 	.word	0x200000cc
 8085720:	20000094 	.word	0x20000094
 8085724:	200000d0 	.word	0x200000d0
 8085728:	200000d4 	.word	0x200000d4
 808572c:	20000090 	.word	0x20000090
 8085730:	20000088 	.word	0x20000088
 8085734:	2000008c 	.word	0x2000008c
 8085738:	20000824 	.word	0x20000824
 808573c:	20000828 	.word	0x20000828
 8085740:	20000684 	.word	0x20000684
 8085744:	0808b1a5 	.word	0x0808b1a5
 8085748:	080932c2 	.word	0x080932c2
 808574c:	08080c1b 	.word	0x08080c1b
 8085750:	0808c427 	.word	0x0808c427
 8085754:	20000080 	.word	0x20000080
 8085758:	080932ed 	.word	0x080932ed
 808575c:	080932d0 	.word	0x080932d0
 8085760:	200006f8 	.word	0x200006f8
 8085764:	080932d5 	.word	0x080932d5
 8085768:	080932ea 	.word	0x080932ea
 808576c:	200007b4 	.word	0x200007b4
 8085770:	20000cd0 	.word	0x20000cd0
 8085774:	080932ef 	.word	0x080932ef
 8085778:	20000690 	.word	0x20000690
 808577c:	0809332b 	.word	0x0809332b
 8085780:	2000076d 	.word	0x2000076d
 8085784:	0809334f 	.word	0x0809334f
 8085788:	f005 fe6a 	bl	808b460 <_ZN6StringD1Ev>
    ads1.begin();
 808578c:	48a6      	ldr	r0, [pc, #664]	; (8085a28 <setup+0x638>)
 808578e:	f001 fdaa 	bl	80872e6 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x49,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 8085792:	f007 fde9 	bl	808d368 <_Z19__fetch_global_Wirev>
 8085796:	2201      	movs	r2, #1
 8085798:	2149      	movs	r1, #73	; 0x49
 808579a:	f007 fb7e 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>
 808579e:	2800      	cmp	r0, #0
 80857a0:	f040 8117 	bne.w	80859d2 <setup+0x5e2>
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 80857a4:	f007 f986 	bl	808cab4 <_Z16_fetch_usbserialv>
 80857a8:	49a0      	ldr	r1, [pc, #640]	; (8085a2c <setup+0x63c>)
 80857aa:	f006 f8c8 	bl	808b93e <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 80857ae:	6823      	ldr	r3, [r4, #0]
 80857b0:	b14b      	cbz	r3, 80857c6 <setup+0x3d6>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 80857b2:	499e      	ldr	r1, [pc, #632]	; (8085a2c <setup+0x63c>)
 80857b4:	a823      	add	r0, sp, #140	; 0x8c
 80857b6:	f005 fe9d 	bl	808b4f4 <_ZN6StringC1EPKc>
 80857ba:	a823      	add	r0, sp, #140	; 0x8c
 80857bc:	f7fc faa0 	bl	8081d00 <_Z12writeLogFile6String>
 80857c0:	a823      	add	r0, sp, #140	; 0x8c
 80857c2:	f005 fe4d 	bl	808b460 <_ZN6StringD1Ev>
    Serial.println("Starting LMP91000 2 initialization");
 80857c6:	f007 f975 	bl	808cab4 <_Z16_fetch_usbserialv>
 80857ca:	4999      	ldr	r1, [pc, #612]	; (8085a30 <setup+0x640>)
 80857cc:	f006 f8b7 	bl	808b93e <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 80857d0:	6823      	ldr	r3, [r4, #0]
 80857d2:	b14b      	cbz	r3, 80857e8 <setup+0x3f8>
        writeLogFile("Starting LMP91000 2 initialization");
 80857d4:	4996      	ldr	r1, [pc, #600]	; (8085a30 <setup+0x640>)
 80857d6:	a823      	add	r0, sp, #140	; 0x8c
 80857d8:	f005 fe8c 	bl	808b4f4 <_ZN6StringC1EPKc>
 80857dc:	a823      	add	r0, sp, #140	; 0x8c
 80857de:	f7fc fa8f 	bl	8081d00 <_Z12writeLogFile6String>
 80857e2:	a823      	add	r0, sp, #140	; 0x8c
 80857e4:	f005 fe3c 	bl	808b460 <_ZN6StringD1Ev>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80857e8:	4d92      	ldr	r5, [pc, #584]	; (8085a34 <setup+0x644>)
    Wire.begin();   //this must be done for the LMP91000
 80857ea:	f007 fdbd 	bl	808d368 <_Z19__fetch_global_Wirev>
 80857ee:	f007 fb25 	bl	808ce3c <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80857f2:	2100      	movs	r1, #0
 80857f4:	8828      	ldrh	r0, [r5, #0]
 80857f6:	f007 fd22 	bl	808d23e <digitalWrite>
    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80857fa:	2303      	movs	r3, #3
 80857fc:	22b0      	movs	r2, #176	; 0xb0
 80857fe:	2118      	movs	r1, #24
 8085800:	488d      	ldr	r0, [pc, #564]	; (8085a38 <setup+0x648>)
 8085802:	f001 fc83 	bl	808710c <_ZN8LMP910009configureEhhh>
 8085806:	2800      	cmp	r0, #0
 8085808:	f040 80e8 	bne.w	80859dc <setup+0x5ec>
          Serial.println("Couldn't communicate with LMP91000 for 2");
 808580c:	f007 f952 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085810:	498a      	ldr	r1, [pc, #552]	; (8085a3c <setup+0x64c>)
 8085812:	f006 f894 	bl	808b93e <_ZN5Print7printlnEPKc>
          writeLogFile("Couldn't communicate with LMP91000 for 2");
 8085816:	4989      	ldr	r1, [pc, #548]	; (8085a3c <setup+0x64c>)
 8085818:	a823      	add	r0, sp, #140	; 0x8c
 808581a:	f005 fe6b 	bl	808b4f4 <_ZN6StringC1EPKc>
 808581e:	a823      	add	r0, sp, #140	; 0x8c
 8085820:	f7fc fa6e 	bl	8081d00 <_Z12writeLogFile6String>
 8085824:	a823      	add	r0, sp, #140	; 0x8c
 8085826:	f005 fe1b 	bl	808b460 <_ZN6StringD1Ev>
    ads2.begin();
 808582a:	4885      	ldr	r0, [pc, #532]	; (8085a40 <setup+0x650>)
 808582c:	f001 fd5b 	bl	80872e6 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x4A,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 8085830:	f007 fd9a 	bl	808d368 <_Z19__fetch_global_Wirev>
 8085834:	2201      	movs	r2, #1
 8085836:	214a      	movs	r1, #74	; 0x4a
 8085838:	f007 fb2f 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>
 808583c:	2800      	cmp	r0, #0
 808583e:	f040 80e3 	bne.w	8085a08 <setup+0x618>
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8085842:	f007 f937 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085846:	4979      	ldr	r1, [pc, #484]	; (8085a2c <setup+0x63c>)
 8085848:	f006 f879 	bl	808b93e <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 808584c:	6823      	ldr	r3, [r4, #0]
 808584e:	b14b      	cbz	r3, 8085864 <setup+0x474>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8085850:	4976      	ldr	r1, [pc, #472]	; (8085a2c <setup+0x63c>)
 8085852:	a823      	add	r0, sp, #140	; 0x8c
 8085854:	f005 fe4e 	bl	808b4f4 <_ZN6StringC1EPKc>
 8085858:	a823      	add	r0, sp, #140	; 0x8c
 808585a:	f7fc fa51 	bl	8081d00 <_Z12writeLogFile6String>
 808585e:	a823      	add	r0, sp, #140	; 0x8c
 8085860:	f005 fdfe 	bl	808b460 <_ZN6StringD1Ev>
    if (!bme.begin()) {
 8085864:	2177      	movs	r1, #119	; 0x77
 8085866:	4877      	ldr	r0, [pc, #476]	; (8085a44 <setup+0x654>)
 8085868:	f003 fcda 	bl	8089220 <_ZN15Adafruit_BME6805beginEh>
 808586c:	2800      	cmp	r0, #0
 808586e:	f040 80d0 	bne.w	8085a12 <setup+0x622>
      Serial.println("Could not find a valid BME680 sensor, check wiring!");
 8085872:	f007 f91f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085876:	4974      	ldr	r1, [pc, #464]	; (8085a48 <setup+0x658>)
 8085878:	f006 f861 	bl	808b93e <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 808587c:	6823      	ldr	r3, [r4, #0]
 808587e:	b14b      	cbz	r3, 8085894 <setup+0x4a4>
          writeLogFile("Could not find a valid BME680 sensor, check wiring!");
 8085880:	4971      	ldr	r1, [pc, #452]	; (8085a48 <setup+0x658>)
        writeLogFile("Initialized BME Sensor");
 8085882:	a823      	add	r0, sp, #140	; 0x8c
 8085884:	f005 fe36 	bl	808b4f4 <_ZN6StringC1EPKc>
 8085888:	a823      	add	r0, sp, #140	; 0x8c
 808588a:	f7fc fa39 	bl	8081d00 <_Z12writeLogFile6String>
 808588e:	a823      	add	r0, sp, #140	; 0x8c
 8085890:	f005 fde6 	bl	808b460 <_ZN6StringD1Ev>
    if(!t6713.begin()){
 8085894:	486d      	ldr	r0, [pc, #436]	; (8085a4c <setup+0x65c>)
 8085896:	f001 fe21 	bl	80874dc <_ZN13Telaire_T67135beginEv>
 808589a:	b980      	cbnz	r0, 80858be <setup+0x4ce>
      Serial.println("Could not find a valid T6713 sensor, check wiring!");
 808589c:	f007 f90a 	bl	808cab4 <_Z16_fetch_usbserialv>
 80858a0:	496b      	ldr	r1, [pc, #428]	; (8085a50 <setup+0x660>)
 80858a2:	f006 f84c 	bl	808b93e <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 80858a6:	6823      	ldr	r3, [r4, #0]
 80858a8:	b14b      	cbz	r3, 80858be <setup+0x4ce>
          writeLogFile("Could not find a valid T6713");
 80858aa:	496a      	ldr	r1, [pc, #424]	; (8085a54 <setup+0x664>)
 80858ac:	a823      	add	r0, sp, #140	; 0x8c
 80858ae:	f005 fe21 	bl	808b4f4 <_ZN6StringC1EPKc>
 80858b2:	a823      	add	r0, sp, #140	; 0x8c
 80858b4:	f7fc fa24 	bl	8081d00 <_Z12writeLogFile6String>
 80858b8:	a823      	add	r0, sp, #140	; 0x8c
 80858ba:	f005 fdd1 	bl	808b460 <_ZN6StringD1Ev>
    bme.setTemperatureOversampling(BME680_OS_8X);
 80858be:	2104      	movs	r1, #4
 80858c0:	4860      	ldr	r0, [pc, #384]	; (8085a44 <setup+0x654>)
 80858c2:	f003 fc0f 	bl	80890e4 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme.setHumidityOversampling(BME680_OS_2X);
 80858c6:	2102      	movs	r1, #2
 80858c8:	485e      	ldr	r0, [pc, #376]	; (8085a44 <setup+0x654>)
 80858ca:	f003 fc18 	bl	80890fe <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme.setPressureOversampling(BME680_OS_4X);
 80858ce:	2103      	movs	r1, #3
 80858d0:	485c      	ldr	r0, [pc, #368]	; (8085a44 <setup+0x654>)
 80858d2:	f003 fc21 	bl	8089118 <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
 80858d6:	2102      	movs	r1, #2
 80858d8:	485a      	ldr	r0, [pc, #360]	; (8085a44 <setup+0x654>)
 80858da:	f003 fc2a 	bl	8089132 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
 80858de:	2296      	movs	r2, #150	; 0x96
 80858e0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80858e4:	4857      	ldr	r0, [pc, #348]	; (8085a44 <setup+0x654>)
 80858e6:	f003 fbef 	bl	80890c8 <_ZN15Adafruit_BME68012setGasHeaterEtt>
    resetESP();
 80858ea:	f7fc ffeb 	bl	80828c4 <_Z8resetESPv>
    Serial.println("ESP reset!");
 80858ee:	f007 f8e1 	bl	808cab4 <_Z16_fetch_usbserialv>
 80858f2:	4959      	ldr	r1, [pc, #356]	; (8085a58 <setup+0x668>)
 80858f4:	f006 f823 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("FW Version: ");
 80858f8:	f007 f8dc 	bl	808cab4 <_Z16_fetch_usbserialv>
 80858fc:	4957      	ldr	r1, [pc, #348]	; (8085a5c <setup+0x66c>)
 80858fe:	f006 f80b 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 8085902:	f007 f8d7 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085906:	220a      	movs	r2, #10
 8085908:	2107      	movs	r1, #7
 808590a:	f7ff fa0c 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print("Build: ");
 808590e:	f007 f8d1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085912:	4953      	ldr	r1, [pc, #332]	; (8085a60 <setup+0x670>)
 8085914:	f006 f800 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 8085918:	f007 f8cc 	bl	808cab4 <_Z16_fetch_usbserialv>
 808591c:	220a      	movs	r2, #10
 808591e:	210c      	movs	r1, #12
 8085920:	f7ff fa01 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
    enableContinuousGPS();
 8085924:	f7fb fe5c 	bl	80815e0 <_Z19enableContinuousGPSv>
    if(google_location_en){
 8085928:	4b4e      	ldr	r3, [pc, #312]	; (8085a64 <setup+0x674>)
 808592a:	681b      	ldr	r3, [r3, #0]
 808592c:	b15b      	cbz	r3, 8085946 <setup+0x556>
        Serial.println("Setting up google maps geolocation.");
 808592e:	f007 f8c1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085932:	494d      	ldr	r1, [pc, #308]	; (8085a68 <setup+0x678>)
 8085934:	f006 f803 	bl	808b93e <_ZN5Print7printlnEPKc>
        locator.withSubscribe(locationCallback).withLocatePeriodic(5); //setup google maps geolocation
 8085938:	494c      	ldr	r1, [pc, #304]	; (8085a6c <setup+0x67c>)
 808593a:	484d      	ldr	r0, [pc, #308]	; (8085a70 <setup+0x680>)
 808593c:	f004 f8d6 	bl	8089aec <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
 8085940:	2105      	movs	r1, #5
 8085942:	f003 ffa3 	bl	808988c <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>
#define SYSTEM_VERSION_200ALPHA3
#define SYSTEM_VERSION_200ALPHA4
#define SYSTEM_VERSION_200RC1
#define SYSTEM_VERSION_200RC2

typedef struct __attribute__((packed)) SystemVersionInfo
 8085946:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8085948:	2100      	movs	r1, #0
 808594a:	a823      	add	r0, sp, #140	; 0x8c
 808594c:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
 8085950:	f005 f84c 	bl	808a9ec <system_version_info>
        return String(info.versionString);
 8085954:	a925      	add	r1, sp, #148	; 0x94
 8085956:	a81f      	add	r0, sp, #124	; 0x7c
 8085958:	f005 fdcc 	bl	808b4f4 <_ZN6StringC1EPKc>
    Log.info("System version: %s", (const char*)System.version());
 808595c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 808595e:	4945      	ldr	r1, [pc, #276]	; (8085a74 <setup+0x684>)
 8085960:	4845      	ldr	r0, [pc, #276]	; (8085a78 <setup+0x688>)
 8085962:	f7fb fa3b 	bl	8080ddc <_ZNK5spark6Logger4infoEPKcz>
 8085966:	a81f      	add	r0, sp, #124	; 0x7c
 8085968:	f005 fd7a 	bl	808b460 <_ZN6StringD1Ev>
    String init_log; //intialization error log
 808596c:	a803      	add	r0, sp, #12
 808596e:	f005 fd77 	bl	808b460 <_ZN6StringD1Ev>
}
 8085972:	b02a      	add	sp, #168	; 0xa8
 8085974:	bd70      	pop	{r4, r5, r6, pc}
    }else if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8085976:	4b41      	ldr	r3, [pc, #260]	; (8085a7c <setup+0x68c>)
 8085978:	681b      	ldr	r3, [r3, #0]
 808597a:	2b01      	cmp	r3, #1
 808597c:	f47f ad96 	bne.w	80854ac <setup+0xbc>
 8085980:	483f      	ldr	r0, [pc, #252]	; (8085a80 <setup+0x690>)
 8085982:	f006 fc2f 	bl	808c1e4 <_ZN9FuelGauge6getSoCEv>
 8085986:	493f      	ldr	r1, [pc, #252]	; (8085a84 <setup+0x694>)
 8085988:	f008 fd00 	bl	808e38c <__aeabi_fcmplt>
 808598c:	2800      	cmp	r0, #0
 808598e:	f43f ad8d 	beq.w	80854ac <setup+0xbc>
 8085992:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8085996:	2b00      	cmp	r3, #0
 8085998:	f47f ad88 	bne.w	80854ac <setup+0xbc>
 808599c:	e584      	b.n	80854a8 <setup+0xb8>
        Serial.println("No uSD card detected.");
 808599e:	f007 f889 	bl	808cab4 <_Z16_fetch_usbserialv>
 80859a2:	4939      	ldr	r1, [pc, #228]	; (8085a88 <setup+0x698>)
 80859a4:	e67d      	b.n	80856a2 <setup+0x2b2>
          Serial.println("Initialized LMP91000 for CO");
 80859a6:	f007 f885 	bl	808cab4 <_Z16_fetch_usbserialv>
 80859aa:	4938      	ldr	r1, [pc, #224]	; (8085a8c <setup+0x69c>)
 80859ac:	f005 ffc7 	bl	808b93e <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 80859b0:	6823      	ldr	r3, [r4, #0]
 80859b2:	b14b      	cbz	r3, 80859c8 <setup+0x5d8>
            writeLogFile("Initialized LMP91000 for CO");
 80859b4:	4935      	ldr	r1, [pc, #212]	; (8085a8c <setup+0x69c>)
 80859b6:	a823      	add	r0, sp, #140	; 0x8c
 80859b8:	f005 fd9c 	bl	808b4f4 <_ZN6StringC1EPKc>
 80859bc:	a823      	add	r0, sp, #140	; 0x8c
 80859be:	f7fc f99f 	bl	8081d00 <_Z12writeLogFile6String>
 80859c2:	a823      	add	r0, sp, #140	; 0x8c
 80859c4:	f005 fd4c 	bl	808b460 <_ZN6StringD1Ev>
          digitalWrite(lmp91000_1_en, HIGH);  //disable
 80859c8:	2101      	movs	r1, #1
 80859ca:	8828      	ldrh	r0, [r5, #0]
 80859cc:	f007 fc37 	bl	808d23e <digitalWrite>
 80859d0:	e6dc      	b.n	808578c <setup+0x39c>
      ads1.setGain(GAIN_TWOTHIRDS);
 80859d2:	2100      	movs	r1, #0
 80859d4:	4814      	ldr	r0, [pc, #80]	; (8085a28 <setup+0x638>)
 80859d6:	f001 fc8d 	bl	80872f4 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 80859da:	e6f4      	b.n	80857c6 <setup+0x3d6>
          Serial.println("Initialized LMP91000 for 2");
 80859dc:	f007 f86a 	bl	808cab4 <_Z16_fetch_usbserialv>
 80859e0:	492b      	ldr	r1, [pc, #172]	; (8085a90 <setup+0x6a0>)
 80859e2:	f005 ffac 	bl	808b93e <_ZN5Print7printlnEPKc>
          if(debugging_enabled)
 80859e6:	6823      	ldr	r3, [r4, #0]
 80859e8:	b14b      	cbz	r3, 80859fe <setup+0x60e>
            writeLogFile("Initialized LMP91000 for 2");
 80859ea:	4929      	ldr	r1, [pc, #164]	; (8085a90 <setup+0x6a0>)
 80859ec:	a823      	add	r0, sp, #140	; 0x8c
 80859ee:	f005 fd81 	bl	808b4f4 <_ZN6StringC1EPKc>
 80859f2:	a823      	add	r0, sp, #140	; 0x8c
 80859f4:	f7fc f984 	bl	8081d00 <_Z12writeLogFile6String>
 80859f8:	a823      	add	r0, sp, #140	; 0x8c
 80859fa:	f005 fd31 	bl	808b460 <_ZN6StringD1Ev>
          digitalWrite(lmp91000_2_en, HIGH);  //disable
 80859fe:	2101      	movs	r1, #1
 8085a00:	8828      	ldrh	r0, [r5, #0]
 8085a02:	f007 fc1c 	bl	808d23e <digitalWrite>
 8085a06:	e710      	b.n	808582a <setup+0x43a>
      ads2.setGain(GAIN_TWOTHIRDS);
 8085a08:	2100      	movs	r1, #0
 8085a0a:	480d      	ldr	r0, [pc, #52]	; (8085a40 <setup+0x650>)
 8085a0c:	f001 fc72 	bl	80872f4 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 8085a10:	e728      	b.n	8085864 <setup+0x474>
      Serial.println("Initialized BME Sensor");
 8085a12:	f007 f84f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085a16:	491f      	ldr	r1, [pc, #124]	; (8085a94 <setup+0x6a4>)
 8085a18:	f005 ff91 	bl	808b93e <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8085a1c:	6823      	ldr	r3, [r4, #0]
 8085a1e:	2b00      	cmp	r3, #0
 8085a20:	f43f af38 	beq.w	8085894 <setup+0x4a4>
        writeLogFile("Initialized BME Sensor");
 8085a24:	491b      	ldr	r1, [pc, #108]	; (8085a94 <setup+0x6a4>)
 8085a26:	e72c      	b.n	8085882 <setup+0x492>
 8085a28:	200005d8 	.word	0x200005d8
 8085a2c:	08093395 	.word	0x08093395
 8085a30:	080933c8 	.word	0x080933c8
 8085a34:	200000cc 	.word	0x200000cc
 8085a38:	2000076d 	.word	0x2000076d
 8085a3c:	080933eb 	.word	0x080933eb
 8085a40:	200005de 	.word	0x200005de
 8085a44:	200005ec 	.word	0x200005ec
 8085a48:	0809342f 	.word	0x0809342f
 8085a4c:	20000cfa 	.word	0x20000cfa
 8085a50:	0809347a 	.word	0x0809347a
 8085a54:	080934ad 	.word	0x080934ad
 8085a58:	080934ca 	.word	0x080934ca
 8085a5c:	080934d5 	.word	0x080934d5
 8085a60:	080934e2 	.word	0x080934e2
 8085a64:	20000718 	.word	0x20000718
 8085a68:	080934ea 	.word	0x080934ea
 8085a6c:	08080ca9 	.word	0x08080ca9
 8085a70:	20000770 	.word	0x20000770
 8085a74:	0809350e 	.word	0x0809350e
 8085a78:	20000e84 	.word	0x20000e84
 8085a7c:	200005e8 	.word	0x200005e8
 8085a80:	2000070c 	.word	0x2000070c
 8085a84:	41a00000 	.word	0x41a00000
 8085a88:	08093315 	.word	0x08093315
 8085a8c:	08093379 	.word	0x08093379
 8085a90:	08093414 	.word	0x08093414
 8085a94:	08093463 	.word	0x08093463

08085a98 <_Z20serialGetAverageTimev>:
void serialGetAverageTime(void){
 8085a98:	b510      	push	{r4, lr}
 8085a9a:	b086      	sub	sp, #24
    Serial.println();
 8085a9c:	f007 f80a 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.print(measurements_to_average);
 8085aa0:	4c28      	ldr	r4, [pc, #160]	; (8085b44 <_Z20serialGetAverageTimev+0xac>)
    Serial.println();
 8085aa2:	f005 ff40 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 8085aa6:	f007 f805 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085aaa:	4927      	ldr	r1, [pc, #156]	; (8085b48 <_Z20serialGetAverageTimev+0xb0>)
 8085aac:	f005 ff34 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8085ab0:	f007 f800 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085ab4:	220a      	movs	r2, #10
 8085ab6:	6821      	ldr	r1, [r4, #0]
 8085ab8:	f7ff f916 	bl	8084ce8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println("(~2 second) measurements");
 8085abc:	f006 fffa 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085ac0:	4922      	ldr	r1, [pc, #136]	; (8085b4c <_Z20serialGetAverageTimev+0xb4>)
 8085ac2:	f005 ff3c 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 8085ac6:	f006 fff5 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085aca:	4921      	ldr	r1, [pc, #132]	; (8085b50 <_Z20serialGetAverageTimev+0xb8>)
 8085acc:	f005 ff24 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085ad0:	f006 fff0 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085ad4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085ad8:	f006 f884 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085adc:	f006 ffea 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085ae0:	220d      	movs	r2, #13
 8085ae2:	4601      	mov	r1, r0
 8085ae4:	a802      	add	r0, sp, #8
 8085ae6:	f006 f8e7 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085aea:	a802      	add	r0, sp, #8
 8085aec:	f005 fec6 	bl	808b87c <_ZNK6String5toIntEv>
    if(tempValue >= 1 && tempValue < 10000){
 8085af0:	f242 730e 	movw	r3, #9998	; 0x270e
    int tempValue = tempString.toInt();
 8085af4:	9001      	str	r0, [sp, #4]
    if(tempValue >= 1 && tempValue < 10000){
 8085af6:	3801      	subs	r0, #1
 8085af8:	4298      	cmp	r0, r3
 8085afa:	d81c      	bhi.n	8085b36 <_Z20serialGetAverageTimev+0x9e>
        Serial.print("\n\rNew Frequency: ");
 8085afc:	f006 ffda 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085b00:	4914      	ldr	r1, [pc, #80]	; (8085b54 <_Z20serialGetAverageTimev+0xbc>)
 8085b02:	f005 ff09 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085b06:	f006 ffd5 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085b0a:	220a      	movs	r2, #10
 8085b0c:	9901      	ldr	r1, [sp, #4]
 8085b0e:	f7ff f90a 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        Serial.println("(~2 second) measurements");
 8085b12:	f006 ffcf 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085b16:	490d      	ldr	r1, [pc, #52]	; (8085b4c <_Z20serialGetAverageTimev+0xb4>)
 8085b18:	f005 ff11 	bl	808b93e <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8085b1c:	9b01      	ldr	r3, [sp, #4]
 8085b1e:	6023      	str	r3, [r4, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8085b20:	f007 fbd0 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8085b24:	2074      	movs	r0, #116	; 0x74
 8085b26:	a901      	add	r1, sp, #4
 8085b28:	f7fb f870 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085b2c:	a802      	add	r0, sp, #8
 8085b2e:	f005 fc97 	bl	808b460 <_ZN6StringD1Ev>
}
 8085b32:	b006      	add	sp, #24
 8085b34:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085b36:	f006 ffbd 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085b3a:	4907      	ldr	r1, [pc, #28]	; (8085b58 <_Z20serialGetAverageTimev+0xc0>)
 8085b3c:	f005 feff 	bl	808b93e <_ZN5Print7printlnEPKc>
 8085b40:	e7f4      	b.n	8085b2c <_Z20serialGetAverageTimev+0x94>
 8085b42:	bf00      	nop
 8085b44:	200007f8 	.word	0x200007f8
 8085b48:	08093521 	.word	0x08093521
 8085b4c:	08093535 	.word	0x08093535
 8085b50:	0809354e 	.word	0x0809354e
 8085b54:	08093561 	.word	0x08093561
 8085b58:	080922f0 	.word	0x080922f0

08085b5c <_Z16serialGetCo2Zerov>:
void serialGetCo2Zero(void){
 8085b5c:	b510      	push	{r4, lr}
 8085b5e:	b086      	sub	sp, #24
    Serial.println();
 8085b60:	f006 ffa8 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.print(CO2_zero);
 8085b64:	4c25      	ldr	r4, [pc, #148]	; (8085bfc <_Z16serialGetCo2Zerov+0xa0>)
    Serial.println();
 8085b66:	f005 fede 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 8085b6a:	f006 ffa3 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085b6e:	4924      	ldr	r1, [pc, #144]	; (8085c00 <_Z16serialGetCo2Zerov+0xa4>)
 8085b70:	f005 fed2 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 8085b74:	f006 ff9e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085b78:	220a      	movs	r2, #10
 8085b7a:	6821      	ldr	r1, [r4, #0]
 8085b7c:	f7ff f8b4 	bl	8084ce8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 8085b80:	f006 ff98 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085b84:	491f      	ldr	r1, [pc, #124]	; (8085c04 <_Z16serialGetCo2Zerov+0xa8>)
 8085b86:	f005 feda 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 8085b8a:	f006 ff93 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085b8e:	491e      	ldr	r1, [pc, #120]	; (8085c08 <_Z16serialGetCo2Zerov+0xac>)
 8085b90:	f005 fec2 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085b94:	f006 ff8e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085b98:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085b9c:	f006 f822 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085ba0:	f006 ff88 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085ba4:	220d      	movs	r2, #13
 8085ba6:	4601      	mov	r1, r0
 8085ba8:	a802      	add	r0, sp, #8
 8085baa:	f006 f885 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085bae:	a802      	add	r0, sp, #8
 8085bb0:	f005 fe64 	bl	808b87c <_ZNK6String5toIntEv>
 8085bb4:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085bb6:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085bba:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085bbe:	d217      	bcs.n	8085bf0 <_Z16serialGetCo2Zerov+0x94>
        Serial.print("\n\rNew CO2 zero: ");
 8085bc0:	f006 ff78 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085bc4:	4911      	ldr	r1, [pc, #68]	; (8085c0c <_Z16serialGetCo2Zerov+0xb0>)
 8085bc6:	f005 fea7 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085bca:	f006 ff73 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085bce:	9901      	ldr	r1, [sp, #4]
 8085bd0:	220a      	movs	r2, #10
 8085bd2:	f7ff f8a8 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        CO2_zero = tempValue;
 8085bd6:	9b01      	ldr	r3, [sp, #4]
 8085bd8:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8085bda:	f007 fb73 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8085bde:	2004      	movs	r0, #4
 8085be0:	a901      	add	r1, sp, #4
 8085be2:	f7fb f813 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085be6:	a802      	add	r0, sp, #8
 8085be8:	f005 fc3a 	bl	808b460 <_ZN6StringD1Ev>
}
 8085bec:	b006      	add	sp, #24
 8085bee:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085bf0:	f006 ff60 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085bf4:	4906      	ldr	r1, [pc, #24]	; (8085c10 <_Z16serialGetCo2Zerov+0xb4>)
 8085bf6:	f005 fea2 	bl	808b93e <_ZN5Print7printlnEPKc>
 8085bfa:	e7f4      	b.n	8085be6 <_Z16serialGetCo2Zerov+0x8a>
 8085bfc:	2000033c 	.word	0x2000033c
 8085c00:	08093573 	.word	0x08093573
 8085c04:	08092314 	.word	0x08092314
 8085c08:	08093585 	.word	0x08093585
 8085c0c:	0809359a 	.word	0x0809359a
 8085c10:	080922f0 	.word	0x080922f0

08085c14 <_Z15serialGetCoZerov>:
void serialGetCoZero(void){
 8085c14:	b510      	push	{r4, lr}
 8085c16:	b086      	sub	sp, #24
    Serial.println();
 8085c18:	f006 ff4c 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.print(CO_zero);
 8085c1c:	4c26      	ldr	r4, [pc, #152]	; (8085cb8 <_Z15serialGetCoZerov+0xa4>)
    Serial.println();
 8085c1e:	f005 fe82 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current CO zero:");
 8085c22:	f006 ff47 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085c26:	4925      	ldr	r1, [pc, #148]	; (8085cbc <_Z15serialGetCoZerov+0xa8>)
 8085c28:	f005 fe76 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(CO_zero);
 8085c2c:	f006 ff42 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085c30:	220a      	movs	r2, #10
 8085c32:	6821      	ldr	r1, [r4, #0]
 8085c34:	f7ff f858 	bl	8084ce8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppb");
 8085c38:	f006 ff3c 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085c3c:	4920      	ldr	r1, [pc, #128]	; (8085cc0 <_Z15serialGetCoZerov+0xac>)
 8085c3e:	f005 fe7e 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 8085c42:	f006 ff37 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085c46:	491f      	ldr	r1, [pc, #124]	; (8085cc4 <_Z15serialGetCoZerov+0xb0>)
 8085c48:	f005 fe66 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085c4c:	f006 ff32 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085c50:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085c54:	f005 ffc6 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085c58:	f006 ff2c 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085c5c:	220d      	movs	r2, #13
 8085c5e:	4601      	mov	r1, r0
 8085c60:	a802      	add	r0, sp, #8
 8085c62:	f006 f829 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085c66:	a802      	add	r0, sp, #8
 8085c68:	f005 fe08 	bl	808b87c <_ZNK6String5toIntEv>
    if(tempValue >= -5000 && tempValue < 5000){
 8085c6c:	f242 730f 	movw	r3, #9999	; 0x270f
    int tempValue = tempString.toInt();
 8085c70:	9001      	str	r0, [sp, #4]
    if(tempValue >= -5000 && tempValue < 5000){
 8085c72:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8085c76:	3008      	adds	r0, #8
 8085c78:	4298      	cmp	r0, r3
 8085c7a:	d817      	bhi.n	8085cac <_Z15serialGetCoZerov+0x98>
        Serial.print("\n\rNew CO zero: ");
 8085c7c:	f006 ff1a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085c80:	4911      	ldr	r1, [pc, #68]	; (8085cc8 <_Z15serialGetCoZerov+0xb4>)
 8085c82:	f005 fe49 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085c86:	f006 ff15 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085c8a:	9901      	ldr	r1, [sp, #4]
 8085c8c:	220a      	movs	r2, #10
 8085c8e:	f7ff f84a 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        CO_zero = tempValue;
 8085c92:	9b01      	ldr	r3, [sp, #4]
 8085c94:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO_ZERO_MEM_ADDRESS, tempValue);
 8085c96:	f007 fb15 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8085c9a:	200c      	movs	r0, #12
 8085c9c:	a901      	add	r1, sp, #4
 8085c9e:	f7fa ffb5 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085ca2:	a802      	add	r0, sp, #8
 8085ca4:	f005 fbdc 	bl	808b460 <_ZN6StringD1Ev>
}
 8085ca8:	b006      	add	sp, #24
 8085caa:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085cac:	f006 ff02 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085cb0:	4906      	ldr	r1, [pc, #24]	; (8085ccc <_Z15serialGetCoZerov+0xb8>)
 8085cb2:	f005 fe44 	bl	808b93e <_ZN5Print7printlnEPKc>
 8085cb6:	e7f4      	b.n	8085ca2 <_Z15serialGetCoZerov+0x8e>
 8085cb8:	20000350 	.word	0x20000350
 8085cbc:	080935ab 	.word	0x080935ab
 8085cc0:	080935bc 	.word	0x080935bc
 8085cc4:	080935c1 	.word	0x080935c1
 8085cc8:	080935d5 	.word	0x080935d5
 8085ccc:	080922f0 	.word	0x080922f0

08085cd0 <_Z16serialGetPm1Zerov>:
void serialGetPm1Zero(void){
 8085cd0:	b510      	push	{r4, lr}
 8085cd2:	b086      	sub	sp, #24
    Serial.println();
 8085cd4:	f006 feee 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.print(PM_1_zero);
 8085cd8:	4c25      	ldr	r4, [pc, #148]	; (8085d70 <_Z16serialGetPm1Zerov+0xa0>)
    Serial.println();
 8085cda:	f005 fe24 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 8085cde:	f006 fee9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085ce2:	4924      	ldr	r1, [pc, #144]	; (8085d74 <_Z16serialGetPm1Zerov+0xa4>)
 8085ce4:	f005 fe18 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 8085ce8:	f006 fee4 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085cec:	220a      	movs	r2, #10
 8085cee:	6821      	ldr	r1, [r4, #0]
 8085cf0:	f7fe fffa 	bl	8084ce8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ug/m3");
 8085cf4:	f006 fede 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085cf8:	491f      	ldr	r1, [pc, #124]	; (8085d78 <_Z16serialGetPm1Zerov+0xa8>)
 8085cfa:	f005 fe20 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 8085cfe:	f006 fed9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085d02:	491e      	ldr	r1, [pc, #120]	; (8085d7c <_Z16serialGetPm1Zerov+0xac>)
 8085d04:	f005 fe08 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085d08:	f006 fed4 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085d0c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085d10:	f005 ff68 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085d14:	f006 fece 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085d18:	220d      	movs	r2, #13
 8085d1a:	4601      	mov	r1, r0
 8085d1c:	a802      	add	r0, sp, #8
 8085d1e:	f005 ffcb 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085d22:	a802      	add	r0, sp, #8
 8085d24:	f005 fdaa 	bl	808b87c <_ZNK6String5toIntEv>
 8085d28:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085d2a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085d2e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085d32:	d217      	bcs.n	8085d64 <_Z16serialGetPm1Zerov+0x94>
        Serial.print("\n\rNew PM1 zero: ");
 8085d34:	f006 febe 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085d38:	4911      	ldr	r1, [pc, #68]	; (8085d80 <_Z16serialGetPm1Zerov+0xb0>)
 8085d3a:	f005 fded 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085d3e:	f006 feb9 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085d42:	9901      	ldr	r1, [sp, #4]
 8085d44:	220a      	movs	r2, #10
 8085d46:	f7fe ffee 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_1_zero = tempValue;
 8085d4a:	9b01      	ldr	r3, [sp, #4]
 8085d4c:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 8085d4e:	f007 fab9 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8085d52:	2014      	movs	r0, #20
 8085d54:	a901      	add	r1, sp, #4
 8085d56:	f7fa ff59 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085d5a:	a802      	add	r0, sp, #8
 8085d5c:	f005 fb80 	bl	808b460 <_ZN6StringD1Ev>
}
 8085d60:	b006      	add	sp, #24
 8085d62:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085d64:	f006 fea6 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085d68:	4906      	ldr	r1, [pc, #24]	; (8085d84 <_Z16serialGetPm1Zerov+0xb4>)
 8085d6a:	f005 fde8 	bl	808b93e <_ZN5Print7printlnEPKc>
 8085d6e:	e7f4      	b.n	8085d5a <_Z16serialGetPm1Zerov+0x8a>
 8085d70:	20000374 	.word	0x20000374
 8085d74:	080935e5 	.word	0x080935e5
 8085d78:	080935f7 	.word	0x080935f7
 8085d7c:	080935fe 	.word	0x080935fe
 8085d80:	08093613 	.word	0x08093613
 8085d84:	080922f0 	.word	0x080922f0

08085d88 <_Z17serialGetPm25Zerov>:
void serialGetPm25Zero(void){
 8085d88:	b510      	push	{r4, lr}
 8085d8a:	b086      	sub	sp, #24
    Serial.println();
 8085d8c:	f006 fe92 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.print(PM_25_zero);
 8085d90:	4c25      	ldr	r4, [pc, #148]	; (8085e28 <_Z17serialGetPm25Zerov+0xa0>)
    Serial.println();
 8085d92:	f005 fdc8 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 8085d96:	f006 fe8d 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085d9a:	4924      	ldr	r1, [pc, #144]	; (8085e2c <_Z17serialGetPm25Zerov+0xa4>)
 8085d9c:	f005 fdbc 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 8085da0:	f006 fe88 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085da4:	220a      	movs	r2, #10
 8085da6:	6821      	ldr	r1, [r4, #0]
 8085da8:	f7fe ff9e 	bl	8084ce8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ug/m3");
 8085dac:	f006 fe82 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085db0:	491f      	ldr	r1, [pc, #124]	; (8085e30 <_Z17serialGetPm25Zerov+0xa8>)
 8085db2:	f005 fdc4 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 8085db6:	f006 fe7d 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085dba:	491e      	ldr	r1, [pc, #120]	; (8085e34 <_Z17serialGetPm25Zerov+0xac>)
 8085dbc:	f005 fdac 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085dc0:	f006 fe78 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085dc4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085dc8:	f005 ff0c 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085dcc:	f006 fe72 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085dd0:	220d      	movs	r2, #13
 8085dd2:	4601      	mov	r1, r0
 8085dd4:	a802      	add	r0, sp, #8
 8085dd6:	f005 ff6f 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085dda:	a802      	add	r0, sp, #8
 8085ddc:	f005 fd4e 	bl	808b87c <_ZNK6String5toIntEv>
 8085de0:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085de2:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085de6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085dea:	d217      	bcs.n	8085e1c <_Z17serialGetPm25Zerov+0x94>
        Serial.print("\n\rNew PM2.5 zero: ");
 8085dec:	f006 fe62 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085df0:	4911      	ldr	r1, [pc, #68]	; (8085e38 <_Z17serialGetPm25Zerov+0xb0>)
 8085df2:	f005 fd91 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085df6:	f006 fe5d 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085dfa:	9901      	ldr	r1, [sp, #4]
 8085dfc:	220a      	movs	r2, #10
 8085dfe:	f7fe ff92 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_25_zero = tempValue;
 8085e02:	9b01      	ldr	r3, [sp, #4]
 8085e04:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 8085e06:	f007 fa5d 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8085e0a:	201c      	movs	r0, #28
 8085e0c:	a901      	add	r1, sp, #4
 8085e0e:	f7fa fefd 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085e12:	a802      	add	r0, sp, #8
 8085e14:	f005 fb24 	bl	808b460 <_ZN6StringD1Ev>
}
 8085e18:	b006      	add	sp, #24
 8085e1a:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085e1c:	f006 fe4a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085e20:	4906      	ldr	r1, [pc, #24]	; (8085e3c <_Z17serialGetPm25Zerov+0xb4>)
 8085e22:	f005 fd8c 	bl	808b93e <_ZN5Print7printlnEPKc>
 8085e26:	e7f4      	b.n	8085e12 <_Z17serialGetPm25Zerov+0x8a>
 8085e28:	2000037c 	.word	0x2000037c
 8085e2c:	08093624 	.word	0x08093624
 8085e30:	080935f7 	.word	0x080935f7
 8085e34:	08093638 	.word	0x08093638
 8085e38:	0809364f 	.word	0x0809364f
 8085e3c:	080922f0 	.word	0x080922f0

08085e40 <_Z17serialGetPm10Zerov>:
void serialGetPm10Zero(void){
 8085e40:	b510      	push	{r4, lr}
 8085e42:	b086      	sub	sp, #24
    Serial.println();
 8085e44:	f006 fe36 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.print(PM_10_zero);
 8085e48:	4c25      	ldr	r4, [pc, #148]	; (8085ee0 <_Z17serialGetPm10Zerov+0xa0>)
    Serial.println();
 8085e4a:	f005 fd6c 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 8085e4e:	f006 fe31 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085e52:	4924      	ldr	r1, [pc, #144]	; (8085ee4 <_Z17serialGetPm10Zerov+0xa4>)
 8085e54:	f005 fd60 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 8085e58:	f006 fe2c 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085e5c:	220a      	movs	r2, #10
 8085e5e:	6821      	ldr	r1, [r4, #0]
 8085e60:	f7fe ff42 	bl	8084ce8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" um/m3");
 8085e64:	f006 fe26 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085e68:	491f      	ldr	r1, [pc, #124]	; (8085ee8 <_Z17serialGetPm10Zerov+0xa8>)
 8085e6a:	f005 fd68 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 8085e6e:	f006 fe21 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085e72:	491e      	ldr	r1, [pc, #120]	; (8085eec <_Z17serialGetPm10Zerov+0xac>)
 8085e74:	f005 fd50 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085e78:	f006 fe1c 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085e7c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085e80:	f005 feb0 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085e84:	f006 fe16 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085e88:	220d      	movs	r2, #13
 8085e8a:	4601      	mov	r1, r0
 8085e8c:	a802      	add	r0, sp, #8
 8085e8e:	f005 ff13 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085e92:	a802      	add	r0, sp, #8
 8085e94:	f005 fcf2 	bl	808b87c <_ZNK6String5toIntEv>
 8085e98:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085e9a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085e9e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085ea2:	d217      	bcs.n	8085ed4 <_Z17serialGetPm10Zerov+0x94>
        Serial.print("\n\rNew PM10 zero: ");
 8085ea4:	f006 fe06 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085ea8:	4911      	ldr	r1, [pc, #68]	; (8085ef0 <_Z17serialGetPm10Zerov+0xb0>)
 8085eaa:	f005 fd35 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085eae:	f006 fe01 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085eb2:	9901      	ldr	r1, [sp, #4]
 8085eb4:	220a      	movs	r2, #10
 8085eb6:	f7fe ff36 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_10_zero = tempValue;
 8085eba:	9b01      	ldr	r3, [sp, #4]
 8085ebc:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 8085ebe:	f007 fa01 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8085ec2:	2024      	movs	r0, #36	; 0x24
 8085ec4:	a901      	add	r1, sp, #4
 8085ec6:	f7fa fea1 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085eca:	a802      	add	r0, sp, #8
 8085ecc:	f005 fac8 	bl	808b460 <_ZN6StringD1Ev>
}
 8085ed0:	b006      	add	sp, #24
 8085ed2:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085ed4:	f006 fdee 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085ed8:	4906      	ldr	r1, [pc, #24]	; (8085ef4 <_Z17serialGetPm10Zerov+0xb4>)
 8085eda:	f005 fd30 	bl	808b93e <_ZN5Print7printlnEPKc>
 8085ede:	e7f4      	b.n	8085eca <_Z17serialGetPm10Zerov+0x8a>
 8085ee0:	2000036c 	.word	0x2000036c
 8085ee4:	08093662 	.word	0x08093662
 8085ee8:	08093675 	.word	0x08093675
 8085eec:	0809367c 	.word	0x0809367c
 8085ef0:	08093692 	.word	0x08093692
 8085ef4:	080922f0 	.word	0x080922f0

08085ef8 <_Z24serialGetTemperatureZerov>:
void serialGetTemperatureZero(void){
 8085ef8:	b510      	push	{r4, lr}
 8085efa:	b086      	sub	sp, #24
    Serial.println();
 8085efc:	f006 fdda 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.print(temp_zero);
 8085f00:	4c24      	ldr	r4, [pc, #144]	; (8085f94 <_Z24serialGetTemperatureZerov+0x9c>)
    Serial.println();
 8085f02:	f005 fd10 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 8085f06:	f006 fdd5 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085f0a:	4923      	ldr	r1, [pc, #140]	; (8085f98 <_Z24serialGetTemperatureZerov+0xa0>)
 8085f0c:	f005 fd04 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 8085f10:	f006 fdd0 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085f14:	220a      	movs	r2, #10
 8085f16:	6821      	ldr	r1, [r4, #0]
 8085f18:	f7fe fee6 	bl	8084ce8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" Degrees C");
 8085f1c:	f006 fdca 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085f20:	491e      	ldr	r1, [pc, #120]	; (8085f9c <_Z24serialGetTemperatureZerov+0xa4>)
 8085f22:	f005 fd0c 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 8085f26:	f006 fdc5 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085f2a:	491d      	ldr	r1, [pc, #116]	; (8085fa0 <_Z24serialGetTemperatureZerov+0xa8>)
 8085f2c:	f005 fcf4 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085f30:	f006 fdc0 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085f34:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085f38:	f005 fe54 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085f3c:	f006 fdba 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085f40:	220d      	movs	r2, #13
 8085f42:	4601      	mov	r1, r0
 8085f44:	a802      	add	r0, sp, #8
 8085f46:	f005 feb7 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085f4a:	a802      	add	r0, sp, #8
 8085f4c:	f005 fc96 	bl	808b87c <_ZNK6String5toIntEv>
 8085f50:	9001      	str	r0, [sp, #4]
    if(tempValue >= -30 && tempValue < 30){
 8085f52:	301e      	adds	r0, #30
 8085f54:	283b      	cmp	r0, #59	; 0x3b
 8085f56:	d817      	bhi.n	8085f88 <_Z24serialGetTemperatureZerov+0x90>
        Serial.print("\n\rNew Temperature zero: ");
 8085f58:	f006 fdac 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085f5c:	4911      	ldr	r1, [pc, #68]	; (8085fa4 <_Z24serialGetTemperatureZerov+0xac>)
 8085f5e:	f005 fcdb 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085f62:	f006 fda7 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085f66:	9901      	ldr	r1, [sp, #4]
 8085f68:	220a      	movs	r2, #10
 8085f6a:	f7fe fedc 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        temp_zero = tempValue;
 8085f6e:	9b01      	ldr	r3, [sp, #4]
 8085f70:	6023      	str	r3, [r4, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 8085f72:	f007 f9a7 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8085f76:	202c      	movs	r0, #44	; 0x2c
 8085f78:	a901      	add	r1, sp, #4
 8085f7a:	f7fa fe47 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085f7e:	a802      	add	r0, sp, #8
 8085f80:	f005 fa6e 	bl	808b460 <_ZN6StringD1Ev>
}
 8085f84:	b006      	add	sp, #24
 8085f86:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085f88:	f006 fd94 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085f8c:	4906      	ldr	r1, [pc, #24]	; (8085fa8 <_Z24serialGetTemperatureZerov+0xb0>)
 8085f8e:	f005 fcd6 	bl	808b93e <_ZN5Print7printlnEPKc>
 8085f92:	e7f4      	b.n	8085f7e <_Z24serialGetTemperatureZerov+0x86>
 8085f94:	20000d04 	.word	0x20000d04
 8085f98:	080936a4 	.word	0x080936a4
 8085f9c:	0809244e 	.word	0x0809244e
 8085fa0:	080936be 	.word	0x080936be
 8085fa4:	080936db 	.word	0x080936db
 8085fa8:	080922f0 	.word	0x080922f0

08085fac <_Z21serialGetPressureZerov>:
void serialGetPressureZero(void){
 8085fac:	b510      	push	{r4, lr}
 8085fae:	b086      	sub	sp, #24
    Serial.println();
 8085fb0:	f006 fd80 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.print(pressure_zero);
 8085fb4:	4c25      	ldr	r4, [pc, #148]	; (808604c <_Z21serialGetPressureZerov+0xa0>)
    Serial.println();
 8085fb6:	f005 fcb6 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 8085fba:	f006 fd7b 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085fbe:	4924      	ldr	r1, [pc, #144]	; (8086050 <_Z21serialGetPressureZerov+0xa4>)
 8085fc0:	f005 fcaa 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8085fc4:	f006 fd76 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085fc8:	220a      	movs	r2, #10
 8085fca:	6821      	ldr	r1, [r4, #0]
 8085fcc:	f7fe fe8c 	bl	8084ce8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 8085fd0:	f006 fd70 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085fd4:	491f      	ldr	r1, [pc, #124]	; (8086054 <_Z21serialGetPressureZerov+0xa8>)
 8085fd6:	f005 fcb2 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 8085fda:	f006 fd6b 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085fde:	491e      	ldr	r1, [pc, #120]	; (8086058 <_Z21serialGetPressureZerov+0xac>)
 8085fe0:	f005 fc9a 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085fe4:	f006 fd66 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085fe8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085fec:	f005 fdfa 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085ff0:	f006 fd60 	bl	808cab4 <_Z16_fetch_usbserialv>
 8085ff4:	220d      	movs	r2, #13
 8085ff6:	4601      	mov	r1, r0
 8085ff8:	a802      	add	r0, sp, #8
 8085ffa:	f005 fe5d 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085ffe:	a802      	add	r0, sp, #8
 8086000:	f005 fc3c 	bl	808b87c <_ZNK6String5toIntEv>
 8086004:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8086006:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808600a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808600e:	d217      	bcs.n	8086040 <_Z21serialGetPressureZerov+0x94>
        Serial.print("\n\rNew Pressure zero: ");
 8086010:	f006 fd50 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086014:	4911      	ldr	r1, [pc, #68]	; (808605c <_Z21serialGetPressureZerov+0xb0>)
 8086016:	f005 fc7f 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 808601a:	f006 fd4b 	bl	808cab4 <_Z16_fetch_usbserialv>
 808601e:	9901      	ldr	r1, [sp, #4]
 8086020:	220a      	movs	r2, #10
 8086022:	f7fe fe80 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        pressure_zero = tempValue;
 8086026:	9b01      	ldr	r3, [sp, #4]
 8086028:	6023      	str	r3, [r4, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 808602a:	f007 f94b 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808602e:	2034      	movs	r0, #52	; 0x34
 8086030:	a901      	add	r1, sp, #4
 8086032:	f7fa fdeb 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8086036:	a802      	add	r0, sp, #8
 8086038:	f005 fa12 	bl	808b460 <_ZN6StringD1Ev>
}
 808603c:	b006      	add	sp, #24
 808603e:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8086040:	f006 fd38 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086044:	4906      	ldr	r1, [pc, #24]	; (8086060 <_Z21serialGetPressureZerov+0xb4>)
 8086046:	f005 fc7a 	bl	808b93e <_ZN5Print7printlnEPKc>
 808604a:	e7f4      	b.n	8086036 <_Z21serialGetPressureZerov+0x8a>
 808604c:	20000850 	.word	0x20000850
 8086050:	080936f4 	.word	0x080936f4
 8086054:	08092314 	.word	0x08092314
 8086058:	0809370b 	.word	0x0809370b
 808605c:	08093725 	.word	0x08093725
 8086060:	080922f0 	.word	0x080922f0

08086064 <_Z21serialGetHumidityZerov>:
void serialGetHumidityZero(void){
 8086064:	b510      	push	{r4, lr}
 8086066:	b086      	sub	sp, #24
    Serial.println();
 8086068:	f006 fd24 	bl	808cab4 <_Z16_fetch_usbserialv>
    Serial.print(rh_zero);
 808606c:	4c24      	ldr	r4, [pc, #144]	; (8086100 <_Z21serialGetHumidityZerov+0x9c>)
    Serial.println();
 808606e:	f005 fc5a 	bl	808b926 <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 8086072:	f006 fd1f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086076:	4923      	ldr	r1, [pc, #140]	; (8086104 <_Z21serialGetHumidityZerov+0xa0>)
 8086078:	f005 fc4e 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 808607c:	f006 fd1a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086080:	220a      	movs	r2, #10
 8086082:	6821      	ldr	r1, [r4, #0]
 8086084:	f7fe fe30 	bl	8084ce8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" %");
 8086088:	f006 fd14 	bl	808cab4 <_Z16_fetch_usbserialv>
 808608c:	491e      	ldr	r1, [pc, #120]	; (8086108 <_Z21serialGetHumidityZerov+0xa4>)
 808608e:	f005 fc56 	bl	808b93e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 8086092:	f006 fd0f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086096:	491d      	ldr	r1, [pc, #116]	; (808610c <_Z21serialGetHumidityZerov+0xa8>)
 8086098:	f005 fc3e 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808609c:	f006 fd0a 	bl	808cab4 <_Z16_fetch_usbserialv>
 80860a0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80860a4:	f005 fd9e 	bl	808bbe4 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80860a8:	f006 fd04 	bl	808cab4 <_Z16_fetch_usbserialv>
 80860ac:	220d      	movs	r2, #13
 80860ae:	4601      	mov	r1, r0
 80860b0:	a802      	add	r0, sp, #8
 80860b2:	f005 fe01 	bl	808bcb8 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80860b6:	a802      	add	r0, sp, #8
 80860b8:	f005 fbe0 	bl	808b87c <_ZNK6String5toIntEv>
 80860bc:	9001      	str	r0, [sp, #4]
    if(tempValue >= -50 && tempValue < 50){
 80860be:	3032      	adds	r0, #50	; 0x32
 80860c0:	2863      	cmp	r0, #99	; 0x63
 80860c2:	d817      	bhi.n	80860f4 <_Z21serialGetHumidityZerov+0x90>
        Serial.print("\n\rNew RH zero: ");
 80860c4:	f006 fcf6 	bl	808cab4 <_Z16_fetch_usbserialv>
 80860c8:	4911      	ldr	r1, [pc, #68]	; (8086110 <_Z21serialGetHumidityZerov+0xac>)
 80860ca:	f005 fc25 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80860ce:	f006 fcf1 	bl	808cab4 <_Z16_fetch_usbserialv>
 80860d2:	9901      	ldr	r1, [sp, #4]
 80860d4:	220a      	movs	r2, #10
 80860d6:	f7fe fe26 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        rh_zero = tempValue;
 80860da:	9b01      	ldr	r3, [sp, #4]
 80860dc:	6023      	str	r3, [r4, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 80860de:	f007 f8f1 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80860e2:	203c      	movs	r0, #60	; 0x3c
 80860e4:	a901      	add	r1, sp, #4
 80860e6:	f7fa fd91 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80860ea:	a802      	add	r0, sp, #8
 80860ec:	f005 f9b8 	bl	808b460 <_ZN6StringD1Ev>
}
 80860f0:	b006      	add	sp, #24
 80860f2:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 80860f4:	f006 fcde 	bl	808cab4 <_Z16_fetch_usbserialv>
 80860f8:	4906      	ldr	r1, [pc, #24]	; (8086114 <_Z21serialGetHumidityZerov+0xb0>)
 80860fa:	f005 fc20 	bl	808b93e <_ZN5Print7printlnEPKc>
 80860fe:	e7f4      	b.n	80860ea <_Z21serialGetHumidityZerov+0x86>
 8086100:	20000858 	.word	0x20000858
 8086104:	0809373b 	.word	0x0809373b
 8086108:	080924f3 	.word	0x080924f3
 808610c:	0809374c 	.word	0x0809374c
 8086110:	08093760 	.word	0x08093760
 8086114:	080922f0 	.word	0x080922f0

08086118 <_Z10serialMenuv>:
  incomingByte = '0';
 8086118:	2330      	movs	r3, #48	; 0x30
void serialMenu(){
 808611a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  incomingByte = '0';
 808611e:	4cab      	ldr	r4, [pc, #684]	; (80863cc <_Z10serialMenuv+0x2b4>)
            if (! bme.performReading()) {
 8086120:	4dab      	ldr	r5, [pc, #684]	; (80863d0 <_Z10serialMenuv+0x2b8>)
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 8086122:	4fac      	ldr	r7, [pc, #688]	; (80863d4 <_Z10serialMenuv+0x2bc>)
void serialMenu(){
 8086124:	b08a      	sub	sp, #40	; 0x28
  incomingByte = '0';
 8086126:	7023      	strb	r3, [r4, #0]
    Serial.print("Menu>");
 8086128:	f006 fcc4 	bl	808cab4 <_Z16_fetch_usbserialv>
 808612c:	49aa      	ldr	r1, [pc, #680]	; (80863d8 <_Z10serialMenuv+0x2c0>)
 808612e:	f005 fbf3 	bl	808b918 <_ZN5Print5printEPKc>
    Serial.flush();
 8086132:	f006 fcbf 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086136:	6803      	ldr	r3, [r0, #0]
 8086138:	69db      	ldr	r3, [r3, #28]
 808613a:	4798      	blx	r3
    while(!Serial.available());
 808613c:	f006 fcba 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086140:	6803      	ldr	r3, [r0, #0]
 8086142:	691b      	ldr	r3, [r3, #16]
 8086144:	4798      	blx	r3
 8086146:	2800      	cmp	r0, #0
 8086148:	d0f8      	beq.n	808613c <_Z10serialMenuv+0x24>
    incomingByte = Serial.read();
 808614a:	f006 fcb3 	bl	808cab4 <_Z16_fetch_usbserialv>
 808614e:	6803      	ldr	r3, [r0, #0]
 8086150:	695b      	ldr	r3, [r3, #20]
 8086152:	4798      	blx	r3
 8086154:	b2c0      	uxtb	r0, r0
    if(incomingByte == 'a'){
 8086156:	2861      	cmp	r0, #97	; 0x61
    incomingByte = Serial.read();
 8086158:	7020      	strb	r0, [r4, #0]
    if(incomingByte == 'a'){
 808615a:	d108      	bne.n	808616e <_Z10serialMenuv+0x56>
        serialGetCo2Slope();
 808615c:	f7fc fe2e 	bl	8082dbc <_Z17serialGetCo2Slopev>
  while(incomingByte!= 'x')
 8086160:	7823      	ldrb	r3, [r4, #0]
 8086162:	2b78      	cmp	r3, #120	; 0x78
 8086164:	d1e0      	bne.n	8086128 <_Z10serialMenuv+0x10>
  Serial.println("Exiting serial menu...");
 8086166:	f006 fca5 	bl	808cab4 <_Z16_fetch_usbserialv>
 808616a:	499c      	ldr	r1, [pc, #624]	; (80863dc <_Z10serialMenuv+0x2c4>)
 808616c:	e34c      	b.n	8086808 <_Z10serialMenuv+0x6f0>
    }else if(incomingByte == 'b'){
 808616e:	2862      	cmp	r0, #98	; 0x62
 8086170:	d102      	bne.n	8086178 <_Z10serialMenuv+0x60>
        serialGetCo2Zero();
 8086172:	f7ff fcf3 	bl	8085b5c <_Z16serialGetCo2Zerov>
 8086176:	e7f3      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'c'){
 8086178:	2863      	cmp	r0, #99	; 0x63
 808617a:	d102      	bne.n	8086182 <_Z10serialMenuv+0x6a>
        serialGetCoSlope();
 808617c:	f7fc fe9c 	bl	8082eb8 <_Z16serialGetCoSlopev>
 8086180:	e7ee      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'd'){
 8086182:	2864      	cmp	r0, #100	; 0x64
 8086184:	d102      	bne.n	808618c <_Z10serialMenuv+0x74>
        serialGetCoZero();
 8086186:	f7ff fd45 	bl	8085c14 <_Z15serialGetCoZerov>
 808618a:	e7e9      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'e'){
 808618c:	2865      	cmp	r0, #101	; 0x65
 808618e:	d102      	bne.n	8086196 <_Z10serialMenuv+0x7e>
        serialGetPm1Slope();
 8086190:	f7fc ff18 	bl	8082fc4 <_Z17serialGetPm1Slopev>
 8086194:	e7e4      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'f'){
 8086196:	2866      	cmp	r0, #102	; 0x66
 8086198:	d102      	bne.n	80861a0 <_Z10serialMenuv+0x88>
         serialGetPm1Zero();
 808619a:	f7ff fd99 	bl	8085cd0 <_Z16serialGetPm1Zerov>
 808619e:	e7df      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'g'){
 80861a0:	2867      	cmp	r0, #103	; 0x67
 80861a2:	d102      	bne.n	80861aa <_Z10serialMenuv+0x92>
        serialGetPm25Slope();
 80861a4:	f7fc ff8a 	bl	80830bc <_Z18serialGetPm25Slopev>
 80861a8:	e7da      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'h'){
 80861aa:	2868      	cmp	r0, #104	; 0x68
 80861ac:	d102      	bne.n	80861b4 <_Z10serialMenuv+0x9c>
        serialGetPm25Zero();
 80861ae:	f7ff fdeb 	bl	8085d88 <_Z17serialGetPm25Zerov>
 80861b2:	e7d5      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'i'){
 80861b4:	2869      	cmp	r0, #105	; 0x69
 80861b6:	d102      	bne.n	80861be <_Z10serialMenuv+0xa6>
        serialGetPm10Slope();
 80861b8:	f7fc fffc 	bl	80831b4 <_Z18serialGetPm10Slopev>
 80861bc:	e7d0      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'j'){
 80861be:	286a      	cmp	r0, #106	; 0x6a
 80861c0:	d102      	bne.n	80861c8 <_Z10serialMenuv+0xb0>
        serialGetPm10Zero();
 80861c2:	f7ff fe3d 	bl	8085e40 <_Z17serialGetPm10Zerov>
 80861c6:	e7cb      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'k'){
 80861c8:	286b      	cmp	r0, #107	; 0x6b
 80861ca:	d102      	bne.n	80861d2 <_Z10serialMenuv+0xba>
        serialGetTemperatureSlope();
 80861cc:	f7fd f86e 	bl	80832ac <_Z25serialGetTemperatureSlopev>
 80861d0:	e7c6      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'l'){
 80861d2:	286c      	cmp	r0, #108	; 0x6c
 80861d4:	d102      	bne.n	80861dc <_Z10serialMenuv+0xc4>
        serialGetTemperatureZero();
 80861d6:	f7ff fe8f 	bl	8085ef8 <_Z24serialGetTemperatureZerov>
 80861da:	e7c1      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'm'){
 80861dc:	286d      	cmp	r0, #109	; 0x6d
 80861de:	d102      	bne.n	80861e6 <_Z10serialMenuv+0xce>
        serialGetPressureSlope();
 80861e0:	f7fd f8e0 	bl	80833a4 <_Z22serialGetPressureSlopev>
 80861e4:	e7bc      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'n'){
 80861e6:	286e      	cmp	r0, #110	; 0x6e
 80861e8:	d102      	bne.n	80861f0 <_Z10serialMenuv+0xd8>
        serialGetPressureZero();
 80861ea:	f7ff fedf 	bl	8085fac <_Z21serialGetPressureZerov>
 80861ee:	e7b7      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'o'){
 80861f0:	286f      	cmp	r0, #111	; 0x6f
 80861f2:	d102      	bne.n	80861fa <_Z10serialMenuv+0xe2>
        serialGetHumiditySlope();
 80861f4:	f7fd f952 	bl	808349c <_Z22serialGetHumiditySlopev>
 80861f8:	e7b2      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'p'){
 80861fa:	2870      	cmp	r0, #112	; 0x70
 80861fc:	d102      	bne.n	8086204 <_Z10serialMenuv+0xec>
        serialGetHumidityZero();
 80861fe:	f7ff ff31 	bl	8086064 <_Z21serialGetHumidityZerov>
 8086202:	e7ad      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'q'){
 8086204:	2871      	cmp	r0, #113	; 0x71
 8086206:	d10e      	bne.n	8086226 <_Z10serialMenuv+0x10e>
        Serial.println("Serial debugging enabled.");
 8086208:	f006 fc54 	bl	808cab4 <_Z16_fetch_usbserialv>
 808620c:	4974      	ldr	r1, [pc, #464]	; (80863e0 <_Z10serialMenuv+0x2c8>)
 808620e:	f005 fb96 	bl	808b93e <_ZN5Print7printlnEPKc>
        debugging_enabled = 1;
 8086212:	2301      	movs	r3, #1
 8086214:	4e73      	ldr	r6, [pc, #460]	; (80863e4 <_Z10serialMenuv+0x2cc>)
        debugging_enabled = 0;
 8086216:	6033      	str	r3, [r6, #0]
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8086218:	f007 f854 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808621c:	4631      	mov	r1, r6
 808621e:	2048      	movs	r0, #72	; 0x48
 8086220:	f7fa fcf4 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
 8086224:	e79c      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'r'){
 8086226:	2872      	cmp	r0, #114	; 0x72
 8086228:	d107      	bne.n	808623a <_Z10serialMenuv+0x122>
        Serial.println("Serial debugging disabled.");
 808622a:	f006 fc43 	bl	808cab4 <_Z16_fetch_usbserialv>
 808622e:	496e      	ldr	r1, [pc, #440]	; (80863e8 <_Z10serialMenuv+0x2d0>)
 8086230:	f005 fb85 	bl	808b93e <_ZN5Print7printlnEPKc>
        debugging_enabled = 0;
 8086234:	4e6b      	ldr	r6, [pc, #428]	; (80863e4 <_Z10serialMenuv+0x2cc>)
 8086236:	2300      	movs	r3, #0
 8086238:	e7ed      	b.n	8086216 <_Z10serialMenuv+0xfe>
    }else if(incomingByte == 's'){
 808623a:	2873      	cmp	r0, #115	; 0x73
 808623c:	d10e      	bne.n	808625c <_Z10serialMenuv+0x144>
        Serial.println(String(HEADER_STRING));
 808623e:	f006 fc39 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086242:	4606      	mov	r6, r0
 8086244:	4969      	ldr	r1, [pc, #420]	; (80863ec <_Z10serialMenuv+0x2d4>)
 8086246:	a806      	add	r0, sp, #24
 8086248:	f005 f954 	bl	808b4f4 <_ZN6StringC1EPKc>
 808624c:	4630      	mov	r0, r6
 808624e:	9906      	ldr	r1, [sp, #24]
 8086250:	f005 fb75 	bl	808b93e <_ZN5Print7printlnEPKc>
        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 8086254:	a806      	add	r0, sp, #24
 8086256:	f005 f903 	bl	808b460 <_ZN6StringD1Ev>
 808625a:	e781      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 't'){
 808625c:	2874      	cmp	r0, #116	; 0x74
 808625e:	d102      	bne.n	8086266 <_Z10serialMenuv+0x14e>
        serialGetTimeDate();
 8086260:	f7fc fd5c 	bl	8082d1c <_Z17serialGetTimeDatev>
 8086264:	e77c      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'u'){
 8086266:	2875      	cmp	r0, #117	; 0x75
 8086268:	d102      	bne.n	8086270 <_Z10serialMenuv+0x158>
        serialGetZone();
 808626a:	f7fe ff6f 	bl	808514c <_Z13serialGetZonev>
 808626e:	e777      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'v'){
 8086270:	2876      	cmp	r0, #118	; 0x76
 8086272:	d102      	bne.n	808627a <_Z10serialMenuv+0x162>
        serialGetDeviceId();
 8086274:	f7fe fee6 	bl	8085044 <_Z17serialGetDeviceIdv>
 8086278:	e772      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'w'){
 808627a:	2877      	cmp	r0, #119	; 0x77
 808627c:	d102      	bne.n	8086284 <_Z10serialMenuv+0x16c>
        serialGetWifiCredentials();
 808627e:	f7fc fbfd 	bl	8082a7c <_Z24serialGetWifiCredentialsv>
 8086282:	e76d      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'y'){
 8086284:	2879      	cmp	r0, #121	; 0x79
 8086286:	d112      	bne.n	80862ae <_Z10serialMenuv+0x196>
        if(serial_cellular_enabled == 0){
 8086288:	4e59      	ldr	r6, [pc, #356]	; (80863f0 <_Z10serialMenuv+0x2d8>)
 808628a:	6833      	ldr	r3, [r6, #0]
 808628c:	b95b      	cbnz	r3, 80862a6 <_Z10serialMenuv+0x18e>
            Serial.println("Enabling Cellular.");
 808628e:	f006 fc11 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086292:	4958      	ldr	r1, [pc, #352]	; (80863f4 <_Z10serialMenuv+0x2dc>)
            Serial.println("Cellular already enabled.");
 8086294:	f005 fb53 	bl	808b93e <_ZN5Print7printlnEPKc>
        serial_cellular_enabled = 1;
 8086298:	2301      	movs	r3, #1
        serial_cellular_enabled = 0;
 808629a:	6033      	str	r3, [r6, #0]
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 808629c:	f007 f812 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80862a0:	2044      	movs	r0, #68	; 0x44
 80862a2:	4953      	ldr	r1, [pc, #332]	; (80863f0 <_Z10serialMenuv+0x2d8>)
 80862a4:	e7bc      	b.n	8086220 <_Z10serialMenuv+0x108>
            Serial.println("Cellular already enabled.");
 80862a6:	f006 fc05 	bl	808cab4 <_Z16_fetch_usbserialv>
 80862aa:	4953      	ldr	r1, [pc, #332]	; (80863f8 <_Z10serialMenuv+0x2e0>)
 80862ac:	e7f2      	b.n	8086294 <_Z10serialMenuv+0x17c>
    }else if(incomingByte == 'z'){
 80862ae:	287a      	cmp	r0, #122	; 0x7a
 80862b0:	d113      	bne.n	80862da <_Z10serialMenuv+0x1c2>
        if(serial_cellular_enabled == 1){
 80862b2:	4e4f      	ldr	r6, [pc, #316]	; (80863f0 <_Z10serialMenuv+0x2d8>)
 80862b4:	6833      	ldr	r3, [r6, #0]
 80862b6:	2b01      	cmp	r3, #1
 80862b8:	d109      	bne.n	80862ce <_Z10serialMenuv+0x1b6>
            Serial.println("Disabling Cellular");
 80862ba:	f006 fbfb 	bl	808cab4 <_Z16_fetch_usbserialv>
 80862be:	494f      	ldr	r1, [pc, #316]	; (80863fc <_Z10serialMenuv+0x2e4>)
 80862c0:	f005 fb3d 	bl	808b93e <_ZN5Print7printlnEPKc>
            Cellular.off();
 80862c4:	484e      	ldr	r0, [pc, #312]	; (8086400 <_Z10serialMenuv+0x2e8>)
 80862c6:	f7fa fd6b 	bl	8080da0 <_ZN5spark13CellularClass3offEv>
        serial_cellular_enabled = 0;
 80862ca:	2300      	movs	r3, #0
 80862cc:	e7e5      	b.n	808629a <_Z10serialMenuv+0x182>
            Serial.println("Cellular already disabled.");
 80862ce:	f006 fbf1 	bl	808cab4 <_Z16_fetch_usbserialv>
 80862d2:	494c      	ldr	r1, [pc, #304]	; (8086404 <_Z10serialMenuv+0x2ec>)
 80862d4:	f005 fb33 	bl	808b93e <_ZN5Print7printlnEPKc>
 80862d8:	e7f7      	b.n	80862ca <_Z10serialMenuv+0x1b2>
    }else if(incomingByte == 'F'){
 80862da:	2846      	cmp	r0, #70	; 0x46
 80862dc:	d110      	bne.n	8086300 <_Z10serialMenuv+0x1e8>
        if(temperature_units == CELCIUS){
 80862de:	4b4a      	ldr	r3, [pc, #296]	; (8086408 <_Z10serialMenuv+0x2f0>)
 80862e0:	681a      	ldr	r2, [r3, #0]
 80862e2:	2a01      	cmp	r2, #1
 80862e4:	d102      	bne.n	80862ec <_Z10serialMenuv+0x1d4>
            temperature_units = FARENHEIT;
 80862e6:	2200      	movs	r2, #0
            temperature_units = CELCIUS;
 80862e8:	601a      	str	r2, [r3, #0]
 80862ea:	e004      	b.n	80862f6 <_Z10serialMenuv+0x1de>
            Serial.println("Temperature units already set to Fareneit.");
 80862ec:	f006 fbe2 	bl	808cab4 <_Z16_fetch_usbserialv>
 80862f0:	4946      	ldr	r1, [pc, #280]	; (808640c <_Z10serialMenuv+0x2f4>)
 80862f2:	f005 fb24 	bl	808b93e <_ZN5Print7printlnEPKc>
        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 80862f6:	f006 ffe5 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80862fa:	2060      	movs	r0, #96	; 0x60
 80862fc:	4942      	ldr	r1, [pc, #264]	; (8086408 <_Z10serialMenuv+0x2f0>)
 80862fe:	e78f      	b.n	8086220 <_Z10serialMenuv+0x108>
    }else if(incomingByte == 'C'){
 8086300:	2843      	cmp	r0, #67	; 0x43
 8086302:	d108      	bne.n	8086316 <_Z10serialMenuv+0x1fe>
        if(temperature_units == FARENHEIT){
 8086304:	4b40      	ldr	r3, [pc, #256]	; (8086408 <_Z10serialMenuv+0x2f0>)
 8086306:	681a      	ldr	r2, [r3, #0]
 8086308:	b90a      	cbnz	r2, 808630e <_Z10serialMenuv+0x1f6>
            temperature_units = CELCIUS;
 808630a:	2201      	movs	r2, #1
 808630c:	e7ec      	b.n	80862e8 <_Z10serialMenuv+0x1d0>
            Serial.println("Temperature units already set to Celcius.");
 808630e:	f006 fbd1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086312:	493f      	ldr	r1, [pc, #252]	; (8086410 <_Z10serialMenuv+0x2f8>)
 8086314:	e7ed      	b.n	80862f2 <_Z10serialMenuv+0x1da>
    }else if(incomingByte == 'D'){
 8086316:	2844      	cmp	r0, #68	; 0x44
 8086318:	d113      	bne.n	8086342 <_Z10serialMenuv+0x22a>
        if(new_temperature_sensor_enabled == 1){
 808631a:	4b3e      	ldr	r3, [pc, #248]	; (8086414 <_Z10serialMenuv+0x2fc>)
 808631c:	681a      	ldr	r2, [r3, #0]
 808631e:	2a01      	cmp	r2, #1
 8086320:	d10b      	bne.n	808633a <_Z10serialMenuv+0x222>
            new_temperature_sensor_enabled = 0;
 8086322:	2200      	movs	r2, #0
 8086324:	601a      	str	r2, [r3, #0]
            Serial.println("Disabling new temperature sensor");
 8086326:	f006 fbc5 	bl	808cab4 <_Z16_fetch_usbserialv>
 808632a:	493b      	ldr	r1, [pc, #236]	; (8086418 <_Z10serialMenuv+0x300>)
            Serial.println("Temperature sensor already disabled");
 808632c:	f005 fb07 	bl	808b93e <_ZN5Print7printlnEPKc>
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8086330:	f006 ffc8 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8086334:	2068      	movs	r0, #104	; 0x68
 8086336:	4937      	ldr	r1, [pc, #220]	; (8086414 <_Z10serialMenuv+0x2fc>)
 8086338:	e772      	b.n	8086220 <_Z10serialMenuv+0x108>
            Serial.println("Temperature sensor already disabled");
 808633a:	f006 fbbb 	bl	808cab4 <_Z16_fetch_usbserialv>
 808633e:	4937      	ldr	r1, [pc, #220]	; (808641c <_Z10serialMenuv+0x304>)
 8086340:	e7f4      	b.n	808632c <_Z10serialMenuv+0x214>
    }else if(incomingByte == 'E'){
 8086342:	2845      	cmp	r0, #69	; 0x45
 8086344:	d10d      	bne.n	8086362 <_Z10serialMenuv+0x24a>
        if(new_temperature_sensor_enabled == 1){
 8086346:	4b33      	ldr	r3, [pc, #204]	; (8086414 <_Z10serialMenuv+0x2fc>)
 8086348:	681a      	ldr	r2, [r3, #0]
 808634a:	2a01      	cmp	r2, #1
 808634c:	d103      	bne.n	8086356 <_Z10serialMenuv+0x23e>
            Serial.println("Temperature sensor already enabled");
 808634e:	f006 fbb1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086352:	4933      	ldr	r1, [pc, #204]	; (8086420 <_Z10serialMenuv+0x308>)
 8086354:	e7ea      	b.n	808632c <_Z10serialMenuv+0x214>
            new_temperature_sensor_enabled = 1;
 8086356:	2201      	movs	r2, #1
 8086358:	601a      	str	r2, [r3, #0]
            Serial.println("Temperatue sensor now enabled");
 808635a:	f006 fbab 	bl	808cab4 <_Z16_fetch_usbserialv>
 808635e:	4931      	ldr	r1, [pc, #196]	; (8086424 <_Z10serialMenuv+0x30c>)
 8086360:	e7e4      	b.n	808632c <_Z10serialMenuv+0x214>
    }else if(incomingByte == 'G'){      //enable analog reading of ozone and disable esp reading of ozone
 8086362:	2847      	cmp	r0, #71	; 0x47
 8086364:	d113      	bne.n	808638e <_Z10serialMenuv+0x276>
        if(ozone_analog_enabled == 1){
 8086366:	4b30      	ldr	r3, [pc, #192]	; (8086428 <_Z10serialMenuv+0x310>)
 8086368:	681a      	ldr	r2, [r3, #0]
 808636a:	2a01      	cmp	r2, #1
 808636c:	d109      	bne.n	8086382 <_Z10serialMenuv+0x26a>
            Serial.println("Analog reading of ozone already enabled");
 808636e:	f006 fba1 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086372:	492e      	ldr	r1, [pc, #184]	; (808642c <_Z10serialMenuv+0x314>)
            Serial.println("Analog reading of ozone now enabled");
 8086374:	f005 fae3 	bl	808b93e <_ZN5Print7printlnEPKc>
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 8086378:	f006 ffa4 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808637c:	206c      	movs	r0, #108	; 0x6c
 808637e:	492a      	ldr	r1, [pc, #168]	; (8086428 <_Z10serialMenuv+0x310>)
 8086380:	e74e      	b.n	8086220 <_Z10serialMenuv+0x108>
            ozone_analog_enabled = 1;
 8086382:	2201      	movs	r2, #1
 8086384:	601a      	str	r2, [r3, #0]
            Serial.println("Analog reading of ozone now enabled");
 8086386:	f006 fb95 	bl	808cab4 <_Z16_fetch_usbserialv>
 808638a:	4929      	ldr	r1, [pc, #164]	; (8086430 <_Z10serialMenuv+0x318>)
 808638c:	e7f2      	b.n	8086374 <_Z10serialMenuv+0x25c>
    }else if(incomingByte == 'H'){      //disable analog reading of ozone and read from esp
 808638e:	2848      	cmp	r0, #72	; 0x48
 8086390:	d10c      	bne.n	80863ac <_Z10serialMenuv+0x294>
        if(ozone_analog_enabled == 0){
 8086392:	4b25      	ldr	r3, [pc, #148]	; (8086428 <_Z10serialMenuv+0x310>)
 8086394:	681a      	ldr	r2, [r3, #0]
 8086396:	b91a      	cbnz	r2, 80863a0 <_Z10serialMenuv+0x288>
            Serial.println("Digital reading of ozone already enabled");
 8086398:	f006 fb8c 	bl	808cab4 <_Z16_fetch_usbserialv>
 808639c:	4925      	ldr	r1, [pc, #148]	; (8086434 <_Z10serialMenuv+0x31c>)
 808639e:	e7e9      	b.n	8086374 <_Z10serialMenuv+0x25c>
            ozone_analog_enabled = 0;
 80863a0:	2200      	movs	r2, #0
 80863a2:	601a      	str	r2, [r3, #0]
            Serial.println("Digital reading of ozone now enabled");
 80863a4:	f006 fb86 	bl	808cab4 <_Z16_fetch_usbserialv>
 80863a8:	4923      	ldr	r1, [pc, #140]	; (8086438 <_Z10serialMenuv+0x320>)
 80863aa:	e7e3      	b.n	8086374 <_Z10serialMenuv+0x25c>
    }else if(incomingByte == 'I'){      //disable analog reading of ozone and read from esp
 80863ac:	2849      	cmp	r0, #73	; 0x49
 80863ae:	d102      	bne.n	80863b6 <_Z10serialMenuv+0x29e>
        serialGetAverageTime();
 80863b0:	f7ff fb72 	bl	8085a98 <_Z20serialGetAverageTimev>
 80863b4:	e6d4      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'J'){
 80863b6:	284a      	cmp	r0, #74	; 0x4a
 80863b8:	d142      	bne.n	8086440 <_Z10serialMenuv+0x328>
        resetESP();
 80863ba:	f7fc fa83 	bl	80828c4 <_Z8resetESPv>
        Serial.println("ESP reset!");
 80863be:	f006 fb79 	bl	808cab4 <_Z16_fetch_usbserialv>
 80863c2:	491e      	ldr	r1, [pc, #120]	; (808643c <_Z10serialMenuv+0x324>)
            Serial.println("ABC logic already enabled");
 80863c4:	f005 fabb 	bl	808b93e <_ZN5Print7printlnEPKc>
 80863c8:	e6ca      	b.n	8086160 <_Z10serialMenuv+0x48>
 80863ca:	bf00      	nop
 80863cc:	2000076c 	.word	0x2000076c
 80863d0:	200005ec 	.word	0x200005ec
 80863d4:	42c80000 	.word	0x42c80000
 80863d8:	08093770 	.word	0x08093770
 80863dc:	08093de5 	.word	0x08093de5
 80863e0:	08093776 	.word	0x08093776
 80863e4:	20000690 	.word	0x20000690
 80863e8:	08093790 	.word	0x08093790
 80863ec:	08092f96 	.word	0x08092f96
 80863f0:	20000cdc 	.word	0x20000cdc
 80863f4:	080937ab 	.word	0x080937ab
 80863f8:	080937be 	.word	0x080937be
 80863fc:	080937d8 	.word	0x080937d8
 8086400:	2000121c 	.word	0x2000121c
 8086404:	080937eb 	.word	0x080937eb
 8086408:	20000d08 	.word	0x20000d08
 808640c:	08093806 	.word	0x08093806
 8086410:	08093831 	.word	0x08093831
 8086414:	200007fc 	.word	0x200007fc
 8086418:	0809385b 	.word	0x0809385b
 808641c:	0809387c 	.word	0x0809387c
 8086420:	080938a0 	.word	0x080938a0
 8086424:	080938c3 	.word	0x080938c3
 8086428:	20000804 	.word	0x20000804
 808642c:	080938e1 	.word	0x080938e1
 8086430:	08093909 	.word	0x08093909
 8086434:	0809392d 	.word	0x0809392d
 8086438:	08093956 	.word	0x08093956
 808643c:	080934ca 	.word	0x080934ca
    }else if(incomingByte == 'K'){
 8086440:	284b      	cmp	r0, #75	; 0x4b
 8086442:	d107      	bne.n	8086454 <_Z10serialMenuv+0x33c>
      Serial.println("Outputting GPS continuously");
 8086444:	f006 fb36 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086448:	49b2      	ldr	r1, [pc, #712]	; (8086714 <_Z10serialMenuv+0x5fc>)
 808644a:	f005 fa78 	bl	808b93e <_ZN5Print7printlnEPKc>
      echoGps();
 808644e:	f7fb f86f 	bl	8081530 <_Z7echoGpsv>
 8086452:	e685      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'L'){
 8086454:	284c      	cmp	r0, #76	; 0x4c
 8086456:	d102      	bne.n	808645e <_Z10serialMenuv+0x346>
      serialResetSettings();
 8086458:	f7fc fc28 	bl	8082cac <_Z19serialResetSettingsv>
 808645c:	e680      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'M'){
 808645e:	284d      	cmp	r0, #77	; 0x4d
 8086460:	d113      	bne.n	808648a <_Z10serialMenuv+0x372>
      if(battery_threshold_enable == 1){
 8086462:	4ead      	ldr	r6, [pc, #692]	; (8086718 <_Z10serialMenuv+0x600>)
 8086464:	6833      	ldr	r3, [r6, #0]
 8086466:	2b01      	cmp	r3, #1
 8086468:	d103      	bne.n	8086472 <_Z10serialMenuv+0x35a>
          Serial.println("Battery threshold already enabled");
 808646a:	f006 fb23 	bl	808cab4 <_Z16_fetch_usbserialv>
 808646e:	49ab      	ldr	r1, [pc, #684]	; (808671c <_Z10serialMenuv+0x604>)
 8086470:	e7a8      	b.n	80863c4 <_Z10serialMenuv+0x2ac>
          Serial.println("Enabling battery threshold limiting");
 8086472:	f006 fb1f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086476:	49aa      	ldr	r1, [pc, #680]	; (8086720 <_Z10serialMenuv+0x608>)
 8086478:	f005 fa61 	bl	808b93e <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 1;
 808647c:	2301      	movs	r3, #1
          battery_threshold_enable = 0;
 808647e:	6033      	str	r3, [r6, #0]
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8086480:	f006 ff20 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8086484:	4631      	mov	r1, r6
 8086486:	2078      	movs	r0, #120	; 0x78
 8086488:	e6ca      	b.n	8086220 <_Z10serialMenuv+0x108>
    }else if(incomingByte == 'N'){
 808648a:	284e      	cmp	r0, #78	; 0x4e
 808648c:	d10d      	bne.n	80864aa <_Z10serialMenuv+0x392>
      if(battery_threshold_enable == 0){
 808648e:	4ea2      	ldr	r6, [pc, #648]	; (8086718 <_Z10serialMenuv+0x600>)
 8086490:	6833      	ldr	r3, [r6, #0]
 8086492:	b91b      	cbnz	r3, 808649c <_Z10serialMenuv+0x384>
          Serial.println("Battery threshold already disabled");
 8086494:	f006 fb0e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086498:	49a2      	ldr	r1, [pc, #648]	; (8086724 <_Z10serialMenuv+0x60c>)
 808649a:	e793      	b.n	80863c4 <_Z10serialMenuv+0x2ac>
          Serial.println("Disabling battery threshold limiting");
 808649c:	f006 fb0a 	bl	808cab4 <_Z16_fetch_usbserialv>
 80864a0:	49a1      	ldr	r1, [pc, #644]	; (8086728 <_Z10serialMenuv+0x610>)
 80864a2:	f005 fa4c 	bl	808b93e <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 0;
 80864a6:	2300      	movs	r3, #0
 80864a8:	e7e9      	b.n	808647e <_Z10serialMenuv+0x366>
    }else if(incomingByte == 'O'){
 80864aa:	284f      	cmp	r0, #79	; 0x4f
 80864ac:	d107      	bne.n	80864be <_Z10serialMenuv+0x3a6>
        Serial.println("Enabling low power for gps");
 80864ae:	f006 fb01 	bl	808cab4 <_Z16_fetch_usbserialv>
 80864b2:	499e      	ldr	r1, [pc, #632]	; (808672c <_Z10serialMenuv+0x614>)
 80864b4:	f005 fa43 	bl	808b93e <_ZN5Print7printlnEPKc>
        enableLowPowerGPS();
 80864b8:	f7fb f8a4 	bl	8081604 <_Z17enableLowPowerGPSv>
 80864bc:	e650      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte  == 'P'){
 80864be:	2850      	cmp	r0, #80	; 0x50
 80864c0:	d109      	bne.n	80864d6 <_Z10serialMenuv+0x3be>
        Serial.println("Turning off batfet");
 80864c2:	f006 faf7 	bl	808cab4 <_Z16_fetch_usbserialv>
 80864c6:	499a      	ldr	r1, [pc, #616]	; (8086730 <_Z10serialMenuv+0x618>)
 80864c8:	f005 fa39 	bl	808b93e <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01101011);   //turn off batfet
 80864cc:	216b      	movs	r1, #107	; 0x6b
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 80864ce:	2007      	movs	r0, #7
 80864d0:	f7fa fd3e 	bl	8080f50 <_Z13writeRegisterhh>
 80864d4:	e644      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'Q'){
 80864d6:	2851      	cmp	r0, #81	; 0x51
 80864d8:	d106      	bne.n	80864e8 <_Z10serialMenuv+0x3d0>
        Serial.println("Allowing batfet to turn on");
 80864da:	f006 faeb 	bl	808cab4 <_Z16_fetch_usbserialv>
 80864de:	4995      	ldr	r1, [pc, #596]	; (8086734 <_Z10serialMenuv+0x61c>)
 80864e0:	f005 fa2d 	bl	808b93e <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 80864e4:	214b      	movs	r1, #75	; 0x4b
 80864e6:	e7f2      	b.n	80864ce <_Z10serialMenuv+0x3b6>
    }else if(incomingByte == 'R'){
 80864e8:	2852      	cmp	r0, #82	; 0x52
 80864ea:	d117      	bne.n	808651c <_Z10serialMenuv+0x404>
        if(abc_logic_enabled){
 80864ec:	4e92      	ldr	r6, [pc, #584]	; (8086738 <_Z10serialMenuv+0x620>)
 80864ee:	6833      	ldr	r3, [r6, #0]
 80864f0:	b183      	cbz	r3, 8086514 <_Z10serialMenuv+0x3fc>
            Serial.println("Disabling ABC logic for CO2 sensor");
 80864f2:	f006 fadf 	bl	808cab4 <_Z16_fetch_usbserialv>
 80864f6:	4991      	ldr	r1, [pc, #580]	; (808673c <_Z10serialMenuv+0x624>)
 80864f8:	f005 fa21 	bl	808b93e <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 0;
 80864fc:	2300      	movs	r3, #0
 80864fe:	6033      	str	r3, [r6, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8086500:	f006 fee0 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8086504:	4631      	mov	r1, r6
 8086506:	207c      	movs	r0, #124	; 0x7c
 8086508:	f7fa fb80 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
            t6713.disableABCLogic();
 808650c:	488c      	ldr	r0, [pc, #560]	; (8086740 <_Z10serialMenuv+0x628>)
 808650e:	f001 f8a6 	bl	808765e <_ZN13Telaire_T671315disableABCLogicEv>
 8086512:	e625      	b.n	8086160 <_Z10serialMenuv+0x48>
            Serial.println("ABC logic already disabled");
 8086514:	f006 face 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086518:	498a      	ldr	r1, [pc, #552]	; (8086744 <_Z10serialMenuv+0x62c>)
 808651a:	e753      	b.n	80863c4 <_Z10serialMenuv+0x2ac>
    }else if(incomingByte == 'S'){
 808651c:	2853      	cmp	r0, #83	; 0x53
 808651e:	d117      	bne.n	8086550 <_Z10serialMenuv+0x438>
        if(!abc_logic_enabled){
 8086520:	4e85      	ldr	r6, [pc, #532]	; (8086738 <_Z10serialMenuv+0x620>)
 8086522:	6833      	ldr	r3, [r6, #0]
 8086524:	b983      	cbnz	r3, 8086548 <_Z10serialMenuv+0x430>
            Serial.println("Enabling abc logic for CO2 sensor");
 8086526:	f006 fac5 	bl	808cab4 <_Z16_fetch_usbserialv>
 808652a:	4987      	ldr	r1, [pc, #540]	; (8086748 <_Z10serialMenuv+0x630>)
 808652c:	f005 fa07 	bl	808b93e <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 1;
 8086530:	2301      	movs	r3, #1
 8086532:	6033      	str	r3, [r6, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8086534:	f006 fec6 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8086538:	4631      	mov	r1, r6
 808653a:	207c      	movs	r0, #124	; 0x7c
 808653c:	f7fa fb66 	bl	8080c0c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
            t6713.enableABCLogic();
 8086540:	487f      	ldr	r0, [pc, #508]	; (8086740 <_Z10serialMenuv+0x628>)
 8086542:	f001 f8b1 	bl	80876a8 <_ZN13Telaire_T671314enableABCLogicEv>
 8086546:	e60b      	b.n	8086160 <_Z10serialMenuv+0x48>
            Serial.println("ABC logic already enabled");
 8086548:	f006 fab4 	bl	808cab4 <_Z16_fetch_usbserialv>
 808654c:	497f      	ldr	r1, [pc, #508]	; (808674c <_Z10serialMenuv+0x634>)
 808654e:	e739      	b.n	80863c4 <_Z10serialMenuv+0x2ac>
    }else if(incomingByte == 'T'){
 8086550:	2854      	cmp	r0, #84	; 0x54
 8086552:	d115      	bne.n	8086580 <_Z10serialMenuv+0x468>
        if(!hih8120_enabled){
 8086554:	4e7e      	ldr	r6, [pc, #504]	; (8086750 <_Z10serialMenuv+0x638>)
 8086556:	6833      	ldr	r3, [r6, #0]
 8086558:	b95b      	cbnz	r3, 8086572 <_Z10serialMenuv+0x45a>
            Serial.println("Enabling HIH8120 RH sensor");
 808655a:	f006 faab 	bl	808cab4 <_Z16_fetch_usbserialv>
 808655e:	497d      	ldr	r1, [pc, #500]	; (8086754 <_Z10serialMenuv+0x63c>)
 8086560:	f005 f9ed 	bl	808b93e <_ZN5Print7printlnEPKc>
            hih8120_enabled = 1;
 8086564:	2301      	movs	r3, #1
            hih8120_enabled = 0;
 8086566:	6033      	str	r3, [r6, #0]
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8086568:	f006 feac 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808656c:	4631      	mov	r1, r6
 808656e:	2080      	movs	r0, #128	; 0x80
 8086570:	e656      	b.n	8086220 <_Z10serialMenuv+0x108>
            Serial.println("Disabling HIH8120 RH sensor");
 8086572:	f006 fa9f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086576:	4978      	ldr	r1, [pc, #480]	; (8086758 <_Z10serialMenuv+0x640>)
 8086578:	f005 f9e1 	bl	808b93e <_ZN5Print7printlnEPKc>
            hih8120_enabled = 0;
 808657c:	2300      	movs	r3, #0
 808657e:	e7f2      	b.n	8086566 <_Z10serialMenuv+0x44e>
    }else if(incomingByte == 'U'){
 8086580:	2855      	cmp	r0, #85	; 0x55
 8086582:	d115      	bne.n	80865b0 <_Z10serialMenuv+0x498>
        if(!CO_socket){
 8086584:	4e75      	ldr	r6, [pc, #468]	; (808675c <_Z10serialMenuv+0x644>)
 8086586:	6833      	ldr	r3, [r6, #0]
 8086588:	b95b      	cbnz	r3, 80865a2 <_Z10serialMenuv+0x48a>
            Serial.println("Now reading CO from U20-Alpha2");
 808658a:	f006 fa93 	bl	808cab4 <_Z16_fetch_usbserialv>
 808658e:	4974      	ldr	r1, [pc, #464]	; (8086760 <_Z10serialMenuv+0x648>)
 8086590:	f005 f9d5 	bl	808b93e <_ZN5Print7printlnEPKc>
            CO_socket = 1;
 8086594:	2301      	movs	r3, #1
            CO_socket = 0;
 8086596:	6033      	str	r3, [r6, #0]
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8086598:	f006 fe94 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808659c:	4631      	mov	r1, r6
 808659e:	2084      	movs	r0, #132	; 0x84
 80865a0:	e63e      	b.n	8086220 <_Z10serialMenuv+0x108>
            Serial.println("Now reading CO from U19-Alpha1");
 80865a2:	f006 fa87 	bl	808cab4 <_Z16_fetch_usbserialv>
 80865a6:	496f      	ldr	r1, [pc, #444]	; (8086764 <_Z10serialMenuv+0x64c>)
 80865a8:	f005 f9c9 	bl	808b93e <_ZN5Print7printlnEPKc>
            CO_socket = 0;
 80865ac:	2300      	movs	r3, #0
 80865ae:	e7f2      	b.n	8086596 <_Z10serialMenuv+0x47e>
    }else if(incomingByte == 'V'){
 80865b0:	2856      	cmp	r0, #86	; 0x56
 80865b2:	d108      	bne.n	80865c6 <_Z10serialMenuv+0x4ae>
        Serial.println("Reseting the CO2 sensor");
 80865b4:	f006 fa7e 	bl	808cab4 <_Z16_fetch_usbserialv>
 80865b8:	496b      	ldr	r1, [pc, #428]	; (8086768 <_Z10serialMenuv+0x650>)
 80865ba:	f005 f9c0 	bl	808b93e <_ZN5Print7printlnEPKc>
        t6713.resetSensor();
 80865be:	4860      	ldr	r0, [pc, #384]	; (8086740 <_Z10serialMenuv+0x628>)
 80865c0:	f001 f828 	bl	8087614 <_ZN13Telaire_T671311resetSensorEv>
 80865c4:	e5cc      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '1'){
 80865c6:	2831      	cmp	r0, #49	; 0x31
 80865c8:	d102      	bne.n	80865d0 <_Z10serialMenuv+0x4b8>
        serialGetLowerLimit();
 80865ca:	f7fe fe09 	bl	80851e0 <_Z19serialGetLowerLimitv>
 80865ce:	e5c7      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '2'){
 80865d0:	2832      	cmp	r0, #50	; 0x32
 80865d2:	d102      	bne.n	80865da <_Z10serialMenuv+0x4c2>
        serialGetUpperLimit();
 80865d4:	f7fe fe88 	bl	80852e8 <_Z19serialGetUpperLimitv>
 80865d8:	e5c2      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '3'){
 80865da:	2833      	cmp	r0, #51	; 0x33
 80865dc:	d116      	bne.n	808660c <_Z10serialMenuv+0x4f4>
        Serial.print("APP Version: ");
 80865de:	f006 fa69 	bl	808cab4 <_Z16_fetch_usbserialv>
 80865e2:	4962      	ldr	r1, [pc, #392]	; (808676c <_Z10serialMenuv+0x654>)
 80865e4:	f005 f998 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(APP_VERSION);
 80865e8:	f006 fa64 	bl	808cab4 <_Z16_fetch_usbserialv>
 80865ec:	220a      	movs	r2, #10
 80865ee:	2107      	movs	r1, #7
 80865f0:	f7fe fb99 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
        Serial.print("Build: ");
 80865f4:	f006 fa5e 	bl	808cab4 <_Z16_fetch_usbserialv>
 80865f8:	495d      	ldr	r1, [pc, #372]	; (8086770 <_Z10serialMenuv+0x658>)
 80865fa:	f005 f98d 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(BUILD_VERSION);
 80865fe:	f006 fa59 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086602:	220a      	movs	r2, #10
 8086604:	210c      	movs	r1, #12
 8086606:	f7fe fb8e 	bl	8084d26 <_ZN5Print7printlnIiLi0EEEjT_i>
 808660a:	e5a9      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '4'){
 808660c:	2834      	cmp	r0, #52	; 0x34
 808660e:	d112      	bne.n	8086636 <_Z10serialMenuv+0x51e>
        if(ozone_enabled == 0){
 8086610:	4e58      	ldr	r6, [pc, #352]	; (8086774 <_Z10serialMenuv+0x65c>)
 8086612:	6833      	ldr	r3, [r6, #0]
 8086614:	b95b      	cbnz	r3, 808662e <_Z10serialMenuv+0x516>
            Serial.println("Enabling Ozone");
 8086616:	f006 fa4d 	bl	808cab4 <_Z16_fetch_usbserialv>
 808661a:	4957      	ldr	r1, [pc, #348]	; (8086778 <_Z10serialMenuv+0x660>)
            Serial.println("Ozone already enabled");
 808661c:	f005 f98f 	bl	808b93e <_ZN5Print7printlnEPKc>
        ozone_enabled = 1;
 8086620:	2301      	movs	r3, #1
        ozone_enabled = 0;
 8086622:	6033      	str	r3, [r6, #0]
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8086624:	f006 fe4e 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8086628:	2058      	movs	r0, #88	; 0x58
 808662a:	4952      	ldr	r1, [pc, #328]	; (8086774 <_Z10serialMenuv+0x65c>)
 808662c:	e5f8      	b.n	8086220 <_Z10serialMenuv+0x108>
            Serial.println("Ozone already enabled");
 808662e:	f006 fa41 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086632:	4952      	ldr	r1, [pc, #328]	; (808677c <_Z10serialMenuv+0x664>)
 8086634:	e7f2      	b.n	808661c <_Z10serialMenuv+0x504>
    }else if(incomingByte == '5'){
 8086636:	2835      	cmp	r0, #53	; 0x35
 8086638:	d10e      	bne.n	8086658 <_Z10serialMenuv+0x540>
        if(ozone_enabled == 1){
 808663a:	4e4e      	ldr	r6, [pc, #312]	; (8086774 <_Z10serialMenuv+0x65c>)
 808663c:	6833      	ldr	r3, [r6, #0]
 808663e:	2b01      	cmp	r3, #1
 8086640:	d106      	bne.n	8086650 <_Z10serialMenuv+0x538>
            Serial.println("Disabling Ozone");
 8086642:	f006 fa37 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086646:	494e      	ldr	r1, [pc, #312]	; (8086780 <_Z10serialMenuv+0x668>)
            Serial.println("Ozone already disabled");
 8086648:	f005 f979 	bl	808b93e <_ZN5Print7printlnEPKc>
        ozone_enabled = 0;
 808664c:	2300      	movs	r3, #0
 808664e:	e7e8      	b.n	8086622 <_Z10serialMenuv+0x50a>
            Serial.println("Ozone already disabled");
 8086650:	f006 fa30 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086654:	494b      	ldr	r1, [pc, #300]	; (8086784 <_Z10serialMenuv+0x66c>)
 8086656:	e7f7      	b.n	8086648 <_Z10serialMenuv+0x530>
    }else if(incomingByte == '6'){
 8086658:	2836      	cmp	r0, #54	; 0x36
 808665a:	d112      	bne.n	8086682 <_Z10serialMenuv+0x56a>
        if(voc_enabled == 0){
 808665c:	4e4a      	ldr	r6, [pc, #296]	; (8086788 <_Z10serialMenuv+0x670>)
 808665e:	6833      	ldr	r3, [r6, #0]
 8086660:	b95b      	cbnz	r3, 808667a <_Z10serialMenuv+0x562>
            Serial.println("Enabling VOC's");
 8086662:	f006 fa27 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086666:	4949      	ldr	r1, [pc, #292]	; (808678c <_Z10serialMenuv+0x674>)
            Serial.println("VOC's already enabled");
 8086668:	f005 f969 	bl	808b93e <_ZN5Print7printlnEPKc>
        voc_enabled = 1;
 808666c:	2301      	movs	r3, #1
        voc_enabled = 0;
 808666e:	6033      	str	r3, [r6, #0]
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8086670:	f006 fe28 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8086674:	205c      	movs	r0, #92	; 0x5c
 8086676:	4944      	ldr	r1, [pc, #272]	; (8086788 <_Z10serialMenuv+0x670>)
 8086678:	e5d2      	b.n	8086220 <_Z10serialMenuv+0x108>
            Serial.println("VOC's already enabled");
 808667a:	f006 fa1b 	bl	808cab4 <_Z16_fetch_usbserialv>
 808667e:	4944      	ldr	r1, [pc, #272]	; (8086790 <_Z10serialMenuv+0x678>)
 8086680:	e7f2      	b.n	8086668 <_Z10serialMenuv+0x550>
    }else if(incomingByte == '7'){
 8086682:	2837      	cmp	r0, #55	; 0x37
 8086684:	d10e      	bne.n	80866a4 <_Z10serialMenuv+0x58c>
        if(voc_enabled == 1){
 8086686:	4e40      	ldr	r6, [pc, #256]	; (8086788 <_Z10serialMenuv+0x670>)
 8086688:	6833      	ldr	r3, [r6, #0]
 808668a:	2b01      	cmp	r3, #1
 808668c:	d106      	bne.n	808669c <_Z10serialMenuv+0x584>
            Serial.println("Disabling VOC's");
 808668e:	f006 fa11 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086692:	4940      	ldr	r1, [pc, #256]	; (8086794 <_Z10serialMenuv+0x67c>)
            Serial.println("VOC's already disabled");
 8086694:	f005 f953 	bl	808b93e <_ZN5Print7printlnEPKc>
        voc_enabled = 0;
 8086698:	2300      	movs	r3, #0
 808669a:	e7e8      	b.n	808666e <_Z10serialMenuv+0x556>
            Serial.println("VOC's already disabled");
 808669c:	f006 fa0a 	bl	808cab4 <_Z16_fetch_usbserialv>
 80866a0:	493d      	ldr	r1, [pc, #244]	; (8086798 <_Z10serialMenuv+0x680>)
 80866a2:	e7f7      	b.n	8086694 <_Z10serialMenuv+0x57c>
    }else if(incomingByte == '8'){
 80866a4:	2838      	cmp	r0, #56	; 0x38
 80866a6:	d126      	bne.n	80866f6 <_Z10serialMenuv+0x5de>
        Serial.print("Fault: ");
 80866a8:	f006 fa04 	bl	808cab4 <_Z16_fetch_usbserialv>
 80866ac:	493b      	ldr	r1, [pc, #236]	; (808679c <_Z10serialMenuv+0x684>)
 80866ae:	f005 f933 	bl	808b918 <_ZN5Print5printEPKc>
        byte fault = pmic.getFault();
 80866b2:	483b      	ldr	r0, [pc, #236]	; (80867a0 <_Z10serialMenuv+0x688>)
 80866b4:	f004 fb66 	bl	808ad84 <_ZN4PMIC8getFaultEv>
 80866b8:	4680      	mov	r8, r0
        Serial.println(fault);
 80866ba:	f006 f9fb 	bl	808cab4 <_Z16_fetch_usbserialv>
 80866be:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 80866c0:	220a      	movs	r2, #10
 80866c2:	4641      	mov	r1, r8
 80866c4:	f005 f94f 	bl	808b966 <_ZN5Print11printNumberEmh>
        n += println();
 80866c8:	4630      	mov	r0, r6
 80866ca:	f005 f92c 	bl	808b926 <_ZN5Print7printlnEv>
        Serial.print("System status: ");
 80866ce:	f006 f9f1 	bl	808cab4 <_Z16_fetch_usbserialv>
 80866d2:	4934      	ldr	r1, [pc, #208]	; (80867a4 <_Z10serialMenuv+0x68c>)
 80866d4:	f005 f920 	bl	808b918 <_ZN5Print5printEPKc>
        byte systemStatus = pmic.getSystemStatus();
 80866d8:	4831      	ldr	r0, [pc, #196]	; (80867a0 <_Z10serialMenuv+0x688>)
 80866da:	f004 fb50 	bl	808ad7e <_ZN4PMIC15getSystemStatusEv>
 80866de:	4680      	mov	r8, r0
        Serial.println(systemStatus);
 80866e0:	f006 f9e8 	bl	808cab4 <_Z16_fetch_usbserialv>
 80866e4:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 80866e6:	220a      	movs	r2, #10
 80866e8:	4641      	mov	r1, r8
 80866ea:	f005 f93c 	bl	808b966 <_ZN5Print11printNumberEmh>
        n += println();
 80866ee:	4630      	mov	r0, r6
 80866f0:	f005 f919 	bl	808b926 <_ZN5Print7printlnEv>
        return n;
 80866f4:	e534      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '9'){
 80866f6:	2839      	cmp	r0, #57	; 0x39
 80866f8:	d102      	bne.n	8086700 <_Z10serialMenuv+0x5e8>
        serialIncreaseChargeCurrent();
 80866fa:	f7fc f95d 	bl	80829b8 <_Z27serialIncreaseChargeCurrentv>
 80866fe:	e52f      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '0'){
 8086700:	2830      	cmp	r0, #48	; 0x30
 8086702:	d102      	bne.n	808670a <_Z10serialMenuv+0x5f2>
        serialIncreaseInputCurrent();
 8086704:	f7fc f916 	bl	8082934 <_Z26serialIncreaseInputCurrentv>
 8086708:	e52a      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'A'){
 808670a:	2841      	cmp	r0, #65	; 0x41
 808670c:	d14c      	bne.n	80867a8 <_Z10serialMenuv+0x690>
        readAlpha1Constantly();
 808670e:	f7fc ff43 	bl	8083598 <_Z20readAlpha1Constantlyv>
 8086712:	e525      	b.n	8086160 <_Z10serialMenuv+0x48>
 8086714:	0809397b 	.word	0x0809397b
 8086718:	200005e8 	.word	0x200005e8
 808671c:	08093997 	.word	0x08093997
 8086720:	080939b9 	.word	0x080939b9
 8086724:	080939dd 	.word	0x080939dd
 8086728:	08093a00 	.word	0x08093a00
 808672c:	08093a25 	.word	0x08093a25
 8086730:	08093a40 	.word	0x08093a40
 8086734:	08093a53 	.word	0x08093a53
 8086738:	200005d4 	.word	0x200005d4
 808673c:	08093a6e 	.word	0x08093a6e
 8086740:	20000cfa 	.word	0x20000cfa
 8086744:	08093a91 	.word	0x08093a91
 8086748:	08093aac 	.word	0x08093aac
 808674c:	08093ace 	.word	0x08093ace
 8086750:	20000764 	.word	0x20000764
 8086754:	08093ae8 	.word	0x08093ae8
 8086758:	08093b03 	.word	0x08093b03
 808675c:	20000348 	.word	0x20000348
 8086760:	08093b1f 	.word	0x08093b1f
 8086764:	08093b3e 	.word	0x08093b3e
 8086768:	08093b5d 	.word	0x08093b5d
 808676c:	08093b75 	.word	0x08093b75
 8086770:	080934e2 	.word	0x080934e2
 8086774:	20000808 	.word	0x20000808
 8086778:	08093b83 	.word	0x08093b83
 808677c:	08093b92 	.word	0x08093b92
 8086780:	08093ba8 	.word	0x08093ba8
 8086784:	08093bb8 	.word	0x08093bb8
 8086788:	20000d10 	.word	0x20000d10
 808678c:	08093bcf 	.word	0x08093bcf
 8086790:	08093bde 	.word	0x08093bde
 8086794:	08093bf4 	.word	0x08093bf4
 8086798:	08093c04 	.word	0x08093c04
 808679c:	08093c1b 	.word	0x08093c1b
 80867a0:	20000824 	.word	0x20000824
 80867a4:	08093c23 	.word	0x08093c23
    }else if(incomingByte == 'B'){
 80867a8:	2842      	cmp	r0, #66	; 0x42
 80867aa:	d115      	bne.n	80867d8 <_Z10serialMenuv+0x6c0>
        if(output_only_particles == 1){
 80867ac:	4b69      	ldr	r3, [pc, #420]	; (8086954 <_Z10serialMenuv+0x83c>)
 80867ae:	681a      	ldr	r2, [r3, #0]
 80867b0:	2a01      	cmp	r2, #1
 80867b2:	d10b      	bne.n	80867cc <_Z10serialMenuv+0x6b4>
            output_only_particles = 0;
 80867b4:	2200      	movs	r2, #0
 80867b6:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting normally");
 80867b8:	f006 f97c 	bl	808cab4 <_Z16_fetch_usbserialv>
 80867bc:	4966      	ldr	r1, [pc, #408]	; (8086958 <_Z10serialMenuv+0x840>)
            Serial.println("Outputting only PM");
 80867be:	f005 f8be 	bl	808b93e <_ZN5Print7printlnEPKc>
        EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80867c2:	f006 fd7f 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80867c6:	2064      	movs	r0, #100	; 0x64
 80867c8:	4962      	ldr	r1, [pc, #392]	; (8086954 <_Z10serialMenuv+0x83c>)
 80867ca:	e529      	b.n	8086220 <_Z10serialMenuv+0x108>
            output_only_particles = 1;
 80867cc:	2201      	movs	r2, #1
 80867ce:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting only PM");
 80867d0:	f006 f970 	bl	808cab4 <_Z16_fetch_usbserialv>
 80867d4:	4961      	ldr	r1, [pc, #388]	; (808695c <_Z10serialMenuv+0x844>)
 80867d6:	e7f2      	b.n	80867be <_Z10serialMenuv+0x6a6>
    }else if(incomingByte == '!'){
 80867d8:	2821      	cmp	r0, #33	; 0x21
 80867da:	d13b      	bne.n	8086854 <_Z10serialMenuv+0x73c>
        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 80867dc:	f006 f96a 	bl	808cab4 <_Z16_fetch_usbserialv>
 80867e0:	495f      	ldr	r1, [pc, #380]	; (8086960 <_Z10serialMenuv+0x848>)
 80867e2:	f005 f8ac 	bl	808b93e <_ZN5Print7printlnEPKc>
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 80867e6:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 80869a8 <_Z10serialMenuv+0x890>
        while(!Serial.available()){
 80867ea:	f006 f963 	bl	808cab4 <_Z16_fetch_usbserialv>
 80867ee:	6803      	ldr	r3, [r0, #0]
 80867f0:	691b      	ldr	r3, [r3, #16]
 80867f2:	4798      	blx	r3
 80867f4:	2800      	cmp	r0, #0
 80867f6:	f47f acb3 	bne.w	8086160 <_Z10serialMenuv+0x48>
            if (! bme.performReading()) {
 80867fa:	4628      	mov	r0, r5
 80867fc:	f002 fbf2 	bl	8088fe4 <_ZN15Adafruit_BME68014performReadingEv>
 8086800:	b938      	cbnz	r0, 8086812 <_Z10serialMenuv+0x6fa>
              Serial.println("Failed to read BME680");
 8086802:	f006 f957 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086806:	4957      	ldr	r1, [pc, #348]	; (8086964 <_Z10serialMenuv+0x84c>)
  Serial.println("Exiting serial menu...");
 8086808:	f005 f899 	bl	808b93e <_ZN5Print7printlnEPKc>
}
 808680c:	b00a      	add	sp, #40	; 0x28
 808680e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 8086812:	f006 f94f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086816:	4639      	mov	r1, r7
 8086818:	4606      	mov	r6, r0
 808681a:	68e8      	ldr	r0, [r5, #12]
 808681c:	f007 fccc 	bl	808e1b8 <__aeabi_fdiv>
 8086820:	f006 ff68 	bl	808d6f4 <__aeabi_f2d>
 8086824:	4680      	mov	r8, r0
 8086826:	68a8      	ldr	r0, [r5, #8]
 8086828:	4689      	mov	r9, r1
 808682a:	f006 ff63 	bl	808d6f4 <__aeabi_f2d>
 808682e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8086832:	6868      	ldr	r0, [r5, #4]
 8086834:	f006 ff5e 	bl	808d6f4 <__aeabi_f2d>
 8086838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808683c:	6828      	ldr	r0, [r5, #0]
 808683e:	f006 ff59 	bl	808d6f4 <__aeabi_f2d>
 8086842:	4642      	mov	r2, r8
 8086844:	e9cd 0100 	strd	r0, r1, [sp]
 8086848:	464b      	mov	r3, r9
 808684a:	4651      	mov	r1, sl
 808684c:	4630      	mov	r0, r6
 808684e:	f7fa fa0f 	bl	8080c70 <_ZN5Print6printfEPKcz>
        while(!Serial.available()){
 8086852:	e7ca      	b.n	80867ea <_Z10serialMenuv+0x6d2>
    }else if(incomingByte == '@'){
 8086854:	2840      	cmp	r0, #64	; 0x40
 8086856:	d112      	bne.n	808687e <_Z10serialMenuv+0x766>
        if(sensible_iot_en == 1){
 8086858:	4e43      	ldr	r6, [pc, #268]	; (8086968 <_Z10serialMenuv+0x850>)
 808685a:	6833      	ldr	r3, [r6, #0]
 808685c:	2b01      	cmp	r3, #1
 808685e:	d10b      	bne.n	8086878 <_Z10serialMenuv+0x760>
            Serial.println("Disabling sensible iot data push.");
 8086860:	f006 f928 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086864:	4941      	ldr	r1, [pc, #260]	; (808696c <_Z10serialMenuv+0x854>)
 8086866:	f005 f86a 	bl	808b93e <_ZN5Print7printlnEPKc>
            sensible_iot_en = 0;
 808686a:	2300      	movs	r3, #0
 808686c:	6033      	str	r3, [r6, #0]
            EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 808686e:	f006 fd29 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 8086872:	4631      	mov	r1, r6
 8086874:	208c      	movs	r0, #140	; 0x8c
 8086876:	e4d3      	b.n	8086220 <_Z10serialMenuv+0x108>
            serialSetSensibleIotEnable();
 8086878:	f7fc f9d6 	bl	8082c28 <_Z26serialSetSensibleIotEnablev>
 808687c:	e470      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '#'){
 808687e:	2823      	cmp	r0, #35	; 0x23
 8086880:	d115      	bne.n	80868ae <_Z10serialMenuv+0x796>
        if(car_topper_power_en == 1){
 8086882:	4e3b      	ldr	r6, [pc, #236]	; (8086970 <_Z10serialMenuv+0x858>)
 8086884:	6833      	ldr	r3, [r6, #0]
 8086886:	2b01      	cmp	r3, #1
 8086888:	d10b      	bne.n	80868a2 <_Z10serialMenuv+0x78a>
            car_topper_power_en = 0;
 808688a:	2300      	movs	r3, #0
 808688c:	6033      	str	r3, [r6, #0]
            Serial.println("Disabling car topper power.  ");
 808688e:	f006 f911 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086892:	4938      	ldr	r1, [pc, #224]	; (8086974 <_Z10serialMenuv+0x85c>)
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 8086894:	f005 f853 	bl	808b93e <_ZN5Print7printlnEPKc>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8086898:	f006 fd14 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 808689c:	4631      	mov	r1, r6
 808689e:	2090      	movs	r0, #144	; 0x90
 80868a0:	e4be      	b.n	8086220 <_Z10serialMenuv+0x108>
            car_topper_power_en = 1;
 80868a2:	2301      	movs	r3, #1
 80868a4:	6033      	str	r3, [r6, #0]
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 80868a6:	f006 f905 	bl	808cab4 <_Z16_fetch_usbserialv>
 80868aa:	4933      	ldr	r1, [pc, #204]	; (8086978 <_Z10serialMenuv+0x860>)
 80868ac:	e7f2      	b.n	8086894 <_Z10serialMenuv+0x77c>
    }else if(incomingByte == 'W'){
 80868ae:	2857      	cmp	r0, #87	; 0x57
 80868b0:	d116      	bne.n	80868e0 <_Z10serialMenuv+0x7c8>
        if(google_location_en == 1){
 80868b2:	4e32      	ldr	r6, [pc, #200]	; (808697c <_Z10serialMenuv+0x864>)
 80868b4:	6833      	ldr	r3, [r6, #0]
 80868b6:	2b01      	cmp	r3, #1
 80868b8:	d10b      	bne.n	80868d2 <_Z10serialMenuv+0x7ba>
            Serial.println("Disabling google location services.");
 80868ba:	f006 f8fb 	bl	808cab4 <_Z16_fetch_usbserialv>
 80868be:	4930      	ldr	r1, [pc, #192]	; (8086980 <_Z10serialMenuv+0x868>)
 80868c0:	f005 f83d 	bl	808b93e <_ZN5Print7printlnEPKc>
            google_location_en = 0;
 80868c4:	2300      	movs	r3, #0
            google_location_en = 1;
 80868c6:	6033      	str	r3, [r6, #0]
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80868c8:	f006 fcfc 	bl	808d2c4 <_Z21__fetch_global_EEPROMv>
 80868cc:	4631      	mov	r1, r6
 80868ce:	2088      	movs	r0, #136	; 0x88
 80868d0:	e4a6      	b.n	8086220 <_Z10serialMenuv+0x108>
            Serial.println("Enabling google location services.");
 80868d2:	f006 f8ef 	bl	808cab4 <_Z16_fetch_usbserialv>
 80868d6:	492b      	ldr	r1, [pc, #172]	; (8086984 <_Z10serialMenuv+0x86c>)
 80868d8:	f005 f831 	bl	808b93e <_ZN5Print7printlnEPKc>
            google_location_en = 1;
 80868dc:	2301      	movs	r3, #1
 80868de:	e7f2      	b.n	80868c6 <_Z10serialMenuv+0x7ae>
    }else if(incomingByte == 'X'){
 80868e0:	2858      	cmp	r0, #88	; 0x58
 80868e2:	d107      	bne.n	80868f4 <_Z10serialMenuv+0x7dc>
            t6713.calibrate(1);
 80868e4:	2101      	movs	r1, #1
 80868e6:	4828      	ldr	r0, [pc, #160]	; (8086988 <_Z10serialMenuv+0x870>)
 80868e8:	f000 ff04 	bl	80876f4 <_ZN13Telaire_T67139calibrateEi>
        co2_calibration_timer = 180;        //6 minutes if measurement cycle is 2 seconds
 80868ec:	22b4      	movs	r2, #180	; 0xb4
 80868ee:	4b27      	ldr	r3, [pc, #156]	; (808698c <_Z10serialMenuv+0x874>)
 80868f0:	601a      	str	r2, [r3, #0]
 80868f2:	e435      	b.n	8086160 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'Z'){
 80868f4:	285a      	cmp	r0, #90	; 0x5a
 80868f6:	d126      	bne.n	8086946 <_Z10serialMenuv+0x82e>
        Serial.println("Getting cellular information, this may take a while...");
 80868f8:	f006 f8dc 	bl	808cab4 <_Z16_fetch_usbserialv>
 80868fc:	4924      	ldr	r1, [pc, #144]	; (8086990 <_Z10serialMenuv+0x878>)
 80868fe:	f005 f81e 	bl	808b93e <_ZN5Print7printlnEPKc>
        Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 8086902:	a806      	add	r0, sp, #24
 8086904:	4923      	ldr	r1, [pc, #140]	; (8086994 <_Z10serialMenuv+0x87c>)
 8086906:	f003 fcf3 	bl	808a2f0 <_ZNK19CellularHelperClass7getIMEIEv>
 808690a:	9a06      	ldr	r2, [sp, #24]
 808690c:	4922      	ldr	r1, [pc, #136]	; (8086998 <_Z10serialMenuv+0x880>)
 808690e:	4823      	ldr	r0, [pc, #140]	; (808699c <_Z10serialMenuv+0x884>)
 8086910:	f7fa fa64 	bl	8080ddc <_ZNK5spark6Logger4infoEPKcz>
 8086914:	a806      	add	r0, sp, #24
 8086916:	f004 fda3 	bl	808b460 <_ZN6StringD1Ev>
        Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 808691a:	a806      	add	r0, sp, #24
 808691c:	491d      	ldr	r1, [pc, #116]	; (8086994 <_Z10serialMenuv+0x87c>)
 808691e:	f003 fd03 	bl	808a328 <_ZNK19CellularHelperClass7getIMSIEv>
 8086922:	9a06      	ldr	r2, [sp, #24]
 8086924:	491e      	ldr	r1, [pc, #120]	; (80869a0 <_Z10serialMenuv+0x888>)
 8086926:	481d      	ldr	r0, [pc, #116]	; (808699c <_Z10serialMenuv+0x884>)
 8086928:	f7fa fa58 	bl	8080ddc <_ZNK5spark6Logger4infoEPKcz>
 808692c:	a806      	add	r0, sp, #24
 808692e:	f004 fd97 	bl	808b460 <_ZN6StringD1Ev>
        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 8086932:	a806      	add	r0, sp, #24
 8086934:	4917      	ldr	r1, [pc, #92]	; (8086994 <_Z10serialMenuv+0x87c>)
 8086936:	f003 fcfd 	bl	808a334 <_ZNK19CellularHelperClass8getICCIDEv>
 808693a:	9a06      	ldr	r2, [sp, #24]
 808693c:	4919      	ldr	r1, [pc, #100]	; (80869a4 <_Z10serialMenuv+0x88c>)
 808693e:	4817      	ldr	r0, [pc, #92]	; (808699c <_Z10serialMenuv+0x884>)
 8086940:	f7fa fa4c 	bl	8080ddc <_ZNK5spark6Logger4infoEPKcz>
 8086944:	e486      	b.n	8086254 <_Z10serialMenuv+0x13c>
    }else if(incomingByte == '?'){
 8086946:	283f      	cmp	r0, #63	; 0x3f
 8086948:	f47f ac0a 	bne.w	8086160 <_Z10serialMenuv+0x48>
        outputSerialMenuOptions();
 808694c:	f7fc fe42 	bl	80835d4 <_Z23outputSerialMenuOptionsv>
 8086950:	e406      	b.n	8086160 <_Z10serialMenuv+0x48>
 8086952:	bf00      	nop
 8086954:	20000800 	.word	0x20000800
 8086958:	08093c33 	.word	0x08093c33
 808695c:	08093c47 	.word	0x08093c47
 8086960:	08093c5a 	.word	0x08093c5a
 8086964:	08091fbc 	.word	0x08091fbc
 8086968:	20000cd8 	.word	0x20000cd8
 808696c:	08093cc6 	.word	0x08093cc6
 8086970:	20000684 	.word	0x20000684
 8086974:	08093ce8 	.word	0x08093ce8
 8086978:	08093d06 	.word	0x08093d06
 808697c:	20000718 	.word	0x20000718
 8086980:	08093d4e 	.word	0x08093d4e
 8086984:	08093d72 	.word	0x08093d72
 8086988:	20000cfa 	.word	0x20000cfa
 808698c:	20000688 	.word	0x20000688
 8086990:	08093d95 	.word	0x08093d95
 8086994:	20000e70 	.word	0x20000e70
 8086998:	08093dcc 	.word	0x08093dcc
 808699c:	20000e84 	.word	0x20000e84
 80869a0:	08093dd4 	.word	0x08093dd4
 80869a4:	08093ddc 	.word	0x08093ddc
 80869a8:	08093c95 	.word	0x08093c95

080869ac <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
  }
 80869ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 80869ae:	2400      	movs	r4, #0
 80869b0:	2701      	movs	r7, #1
 80869b2:	4b58      	ldr	r3, [pc, #352]	; (8086b14 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x168>)
GoogleMapsDeviceLocator locator;
 80869b4:	4e58      	ldr	r6, [pc, #352]	; (8086b18 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x16c>)
 80869b6:	601c      	str	r4, [r3, #0]
 80869b8:	4b58      	ldr	r3, [pc, #352]	; (8086b1c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x170>)
 80869ba:	4d59      	ldr	r5, [pc, #356]	; (8086b20 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 80869bc:	701f      	strb	r7, [r3, #0]
 80869be:	4630      	mov	r0, r6
 80869c0:	f002 ff3e 	bl	8089840 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 80869c4:	462a      	mov	r2, r5
 80869c6:	4957      	ldr	r1, [pc, #348]	; (8086b24 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
 80869c8:	4630      	mov	r0, r6
 80869ca:	f006 fd1d 	bl	808d408 <__aeabi_atexit>
              error_(SYSTEM_ERROR_NONE) {
 80869ce:	4e56      	ldr	r6, [pc, #344]	; (8086b28 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
    SleepResult() {}
 80869d0:	4b56      	ldr	r3, [pc, #344]	; (8086b2c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)
              error_(SYSTEM_ERROR_NONE) {
 80869d2:	6034      	str	r4, [r6, #0]
    SleepResult() {}
 80869d4:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
 80869d6:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
 80869d8:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
 80869da:	2003      	movs	r0, #3
 80869dc:	f003 ffee 	bl	808a9bc <set_system_mode>
SYSTEM_MODE(MANUAL);
 80869e0:	462a      	mov	r2, r5
 80869e2:	4630      	mov	r0, r6
 80869e4:	4952      	ldr	r1, [pc, #328]	; (8086b30 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)
 80869e6:	f006 fd0f 	bl	808d408 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 80869ea:	4621      	mov	r1, r4
 80869ec:	4638      	mov	r0, r7
 80869ee:	f003 fff5 	bl	808a9dc <system_thread_set_state>
Adafruit_BME680 bme; // I2C
 80869f2:	f04f 31ff 	mov.w	r1, #4294967295
 80869f6:	484f      	ldr	r0, [pc, #316]	; (8086b34 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)
 80869f8:	f002 fae2 	bl	8088fc0 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 80869fc:	484e      	ldr	r0, [pc, #312]	; (8086b38 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 80869fe:	f000 fd6c 	bl	80874da <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000;
 8086a02:	484e      	ldr	r0, [pc, #312]	; (8086b3c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)
 8086a04:	f000 fb30 	bl	8087068 <_ZN8LMP91000C1Ev>
FuelGauge fuel;
 8086a08:	4e4d      	ldr	r6, [pc, #308]	; (8086b40 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 8086a0a:	2149      	movs	r1, #73	; 0x49
 8086a0c:	484d      	ldr	r0, [pc, #308]	; (8086b44 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
 8086a0e:	f000 fc63 	bl	80872d8 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 8086a12:	214a      	movs	r1, #74	; 0x4a
 8086a14:	484c      	ldr	r0, [pc, #304]	; (8086b48 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
 8086a16:	f000 fc5f 	bl	80872d8 <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 8086a1a:	4621      	mov	r1, r4
 8086a1c:	4630      	mov	r0, r6
 8086a1e:	f005 fb8b 	bl	808c138 <_ZN9FuelGaugeC1Eb>
 8086a22:	4630      	mov	r0, r6
PMIC pmic;
 8086a24:	4e49      	ldr	r6, [pc, #292]	; (8086b4c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
FuelGauge fuel;
 8086a26:	462a      	mov	r2, r5
 8086a28:	4949      	ldr	r1, [pc, #292]	; (8086b50 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
 8086a2a:	f006 fced 	bl	808d408 <__aeabi_atexit>
PMIC pmic;
 8086a2e:	4621      	mov	r1, r4
 8086a30:	4630      	mov	r0, r6
 8086a32:	f004 f932 	bl	808ac9a <_ZN4PMICC1Eb>
 8086a36:	4630      	mov	r0, r6
PowerCheck powerCheck;
 8086a38:	4e46      	ldr	r6, [pc, #280]	; (8086b54 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
PMIC pmic;
 8086a3a:	462a      	mov	r2, r5
 8086a3c:	4946      	ldr	r1, [pc, #280]	; (8086b58 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
 8086a3e:	f006 fce3 	bl	808d408 <__aeabi_atexit>
PowerCheck powerCheck;
 8086a42:	4630      	mov	r0, r6
 8086a44:	f000 fb9e 	bl	8087184 <_ZN10PowerCheckC1Ev>
 8086a48:	462a      	mov	r2, r5
 8086a4a:	4630      	mov	r0, r6
 8086a4c:	4943      	ldr	r1, [pc, #268]	; (8086b5c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 8086a4e:	f006 fcdb 	bl	808d408 <__aeabi_atexit>
HIH61XX hih(0x27);
 8086a52:	2127      	movs	r1, #39	; 0x27
 8086a54:	4842      	ldr	r0, [pc, #264]	; (8086b60 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
 8086a56:	f002 fcc5 	bl	80893e4 <_ZN7HIH61XXC1Eh>
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8086a5a:	2219      	movs	r2, #25
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8086a5c:	4b41      	ldr	r3, [pc, #260]	; (8086b64 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8086a5e:	4842      	ldr	r0, [pc, #264]	; (8086b68 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
 8086a60:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
  SdFat() {
 8086a64:	4a41      	ldr	r2, [pc, #260]	; (8086b6c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
  SdFile() {}
 8086a66:	4f42      	ldr	r7, [pc, #264]	; (8086b70 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
  SdFat() {
 8086a68:	601a      	str	r2, [r3, #0]
SdFile file;
 8086a6a:	4e42      	ldr	r6, [pc, #264]	; (8086b74 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8086a6c:	4a42      	ldr	r2, [pc, #264]	; (8086b78 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
 8086a6e:	71dc      	strb	r4, [r3, #7]
 8086a70:	f8a3 4440 	strh.w	r4, [r3, #1088]	; 0x440
 8086a74:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 8086a78:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 8086a7c:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8086a80:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 8086a84:	462a      	mov	r2, r5
 8086a86:	4631      	mov	r1, r6
 8086a88:	8104      	strh	r4, [r0, #8]
    Print() : write_error(0) {}
 8086a8a:	6044      	str	r4, [r0, #4]
  SdFile() {}
 8086a8c:	6007      	str	r7, [r0, #0]
 8086a8e:	f006 fcbb 	bl	808d408 <__aeabi_atexit>
 8086a92:	483a      	ldr	r0, [pc, #232]	; (8086b7c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
SdFile log_file;
 8086a94:	462a      	mov	r2, r5
 8086a96:	4631      	mov	r1, r6
 8086a98:	e9c0 7400 	strd	r7, r4, [r0]
 8086a9c:	8104      	strh	r4, [r0, #8]
 8086a9e:	f006 fcb3 	bl	808d408 <__aeabi_atexit>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8086aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8086aa6:	4836      	ldr	r0, [pc, #216]	; (8086b80 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
String fileName;
 8086aa8:	4e36      	ldr	r6, [pc, #216]	; (8086b84 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
 8086aaa:	6083      	str	r3, [r0, #8]
  File() {}
 8086aac:	4b36      	ldr	r3, [pc, #216]	; (8086b88 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)
 8086aae:	4f37      	ldr	r7, [pc, #220]	; (8086b8c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 8086ab0:	6003      	str	r3, [r0, #0]
File file1;
 8086ab2:	462a      	mov	r2, r5
 8086ab4:	4936      	ldr	r1, [pc, #216]	; (8086b90 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)
 8086ab6:	8204      	strh	r4, [r0, #16]
 8086ab8:	6044      	str	r4, [r0, #4]
 8086aba:	f006 fca5 	bl	808d408 <__aeabi_atexit>
String fileName;
 8086abe:	4c35      	ldr	r4, [pc, #212]	; (8086b94 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
 8086ac0:	4631      	mov	r1, r6
 8086ac2:	4638      	mov	r0, r7
 8086ac4:	f004 fd16 	bl	808b4f4 <_ZN6StringC1EPKc>
 8086ac8:	4638      	mov	r0, r7
String logFileName;
 8086aca:	4f33      	ldr	r7, [pc, #204]	; (8086b98 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
String fileName;
 8086acc:	462a      	mov	r2, r5
 8086ace:	4621      	mov	r1, r4
 8086ad0:	f006 fc9a 	bl	808d408 <__aeabi_atexit>
String logFileName;
 8086ad4:	4631      	mov	r1, r6
 8086ad6:	4638      	mov	r0, r7
 8086ad8:	f004 fd0c 	bl	808b4f4 <_ZN6StringC1EPKc>
 8086adc:	4638      	mov	r0, r7
String ssid; //wifi network name
 8086ade:	4f2f      	ldr	r7, [pc, #188]	; (8086b9c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
String logFileName;
 8086ae0:	462a      	mov	r2, r5
 8086ae2:	4621      	mov	r1, r4
 8086ae4:	f006 fc90 	bl	808d408 <__aeabi_atexit>
String ssid; //wifi network name
 8086ae8:	4631      	mov	r1, r6
 8086aea:	4638      	mov	r0, r7
 8086aec:	f004 fd02 	bl	808b4f4 <_ZN6StringC1EPKc>
 8086af0:	4638      	mov	r0, r7
String password; //wifi network password
 8086af2:	4f2b      	ldr	r7, [pc, #172]	; (8086ba0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f4>)
String ssid; //wifi network name
 8086af4:	462a      	mov	r2, r5
 8086af6:	4621      	mov	r1, r4
 8086af8:	f006 fc86 	bl	808d408 <__aeabi_atexit>
String password; //wifi network password
 8086afc:	4631      	mov	r1, r6
 8086afe:	4638      	mov	r0, r7
 8086b00:	f004 fcf8 	bl	808b4f4 <_ZN6StringC1EPKc>
 8086b04:	462a      	mov	r2, r5
 8086b06:	4621      	mov	r1, r4
 8086b08:	4638      	mov	r0, r7
  }
 8086b0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
String password; //wifi network password
 8086b0e:	f006 bc7b 	b.w	808d408 <__aeabi_atexit>
 8086b12:	bf00      	nop
 8086b14:	20000394 	.word	0x20000394
 8086b18:	20000770 	.word	0x20000770
 8086b1c:	200005a8 	.word	0x200005a8
 8086b20:	20000328 	.word	0x20000328
 8086b24:	080895b5 	.word	0x080895b5
 8086b28:	20000380 	.word	0x20000380
 8086b2c:	ffff0000 	.word	0xffff0000
 8086b30:	08080bfd 	.word	0x08080bfd
 8086b34:	200005ec 	.word	0x200005ec
 8086b38:	20000cfa 	.word	0x20000cfa
 8086b3c:	2000076d 	.word	0x2000076d
 8086b40:	2000070c 	.word	0x2000070c
 8086b44:	200005d8 	.word	0x200005d8
 8086b48:	200005de 	.word	0x200005de
 8086b4c:	20000824 	.word	0x20000824
 8086b50:	0808c157 	.word	0x0808c157
 8086b54:	20000828 	.word	0x20000828
 8086b58:	0808acd9 	.word	0x0808acd9
 8086b5c:	08087159 	.word	0x08087159
 8086b60:	20000758 	.word	0x20000758
 8086b64:	20000860 	.word	0x20000860
 8086b68:	20000698 	.word	0x20000698
 8086b6c:	08093ffc 	.word	0x08093ffc
 8086b70:	08093fe4 	.word	0x08093fe4
 8086b74:	08080b6d 	.word	0x08080b6d
 8086b78:	08094098 	.word	0x08094098
 8086b7c:	200007c4 	.word	0x200007c4
 8086b80:	200006c4 	.word	0x200006c4
 8086b84:	080943b2 	.word	0x080943b2
 8086b88:	08093fbc 	.word	0x08093fbc
 8086b8c:	200006f8 	.word	0x200006f8
 8086b90:	08080b6f 	.word	0x08080b6f
 8086b94:	0808b461 	.word	0x0808b461
 8086b98:	200007b4 	.word	0x200007b4
 8086b9c:	20000ce8 	.word	0x20000ce8
 8086ba0:	20000810 	.word	0x20000810

08086ba4 <_Z11readHIH8120v>:
void readHIH8120(void){
 8086ba4:	b510      	push	{r4, lr}
    hih.start();
 8086ba6:	4c04      	ldr	r4, [pc, #16]	; (8086bb8 <_Z11readHIH8120v+0x14>)
 8086ba8:	4620      	mov	r0, r4
 8086baa:	f002 fc0d 	bl	80893c8 <_ZN7HIH61XX5startEv>
    hih.update();
 8086bae:	4620      	mov	r0, r4
}
 8086bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hih.update();
 8086bb4:	f002 bc20 	b.w	80893f8 <_ZN7HIH61XX6updateEv>
 8086bb8:	20000758 	.word	0x20000758
 8086bbc:	00000000 	.word	0x00000000

08086bc0 <loop>:
void loop() {
 8086bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8086bc4:	4b1d      	ldr	r3, [pc, #116]	; (8086c3c <loop+0x7c>)
void loop() {
 8086bc6:	b089      	sub	sp, #36	; 0x24
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8086bc8:	681b      	ldr	r3, [r3, #0]
 8086bca:	b12b      	cbz	r3, 8086bd8 <loop+0x18>
 8086bcc:	4b1c      	ldr	r3, [pc, #112]	; (8086c40 <loop+0x80>)
 8086bce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8086bd2:	b90b      	cbnz	r3, 8086bd8 <loop+0x18>
        goToSleepBattery();
 8086bd4:	f7fb fe1a 	bl	808280c <_Z16goToSleepBatteryv>
    locator.loop();
 8086bd8:	481a      	ldr	r0, [pc, #104]	; (8086c44 <loop+0x84>)
 8086bda:	f002 ff39 	bl	8089a50 <_ZN23GoogleMapsDeviceLocator4loopEv>
    if(output_only_particles == 1){
 8086bde:	4b1a      	ldr	r3, [pc, #104]	; (8086c48 <loop+0x88>)
 8086be0:	681b      	ldr	r3, [r3, #0]
 8086be2:	2b01      	cmp	r3, #1
 8086be4:	d101      	bne.n	8086bea <loop+0x2a>
        outputParticles();
 8086be6:	f7fb fc6f 	bl	80824c8 <_Z15outputParticlesv>
    if(debugging_enabled){
 8086bea:	4c18      	ldr	r4, [pc, #96]	; (8086c4c <loop+0x8c>)
 8086bec:	6823      	ldr	r3, [r4, #0]
 8086bee:	b173      	cbz	r3, 8086c0e <loop+0x4e>
      Serial.println("Before reading bme");
 8086bf0:	f005 ff60 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086bf4:	4916      	ldr	r1, [pc, #88]	; (8086c50 <loop+0x90>)
 8086bf6:	f004 fea2 	bl	808b93e <_ZN5Print7printlnEPKc>
      writeLogFile("before reading bme");
 8086bfa:	4916      	ldr	r1, [pc, #88]	; (8086c54 <loop+0x94>)
 8086bfc:	a804      	add	r0, sp, #16
 8086bfe:	f004 fc79 	bl	808b4f4 <_ZN6StringC1EPKc>
 8086c02:	a804      	add	r0, sp, #16
 8086c04:	f7fb f87c 	bl	8081d00 <_Z12writeLogFile6String>
 8086c08:	a804      	add	r0, sp, #16
 8086c0a:	f004 fc29 	bl	808b460 <_ZN6StringD1Ev>
    if (! bme.performReading()) {
 8086c0e:	4d12      	ldr	r5, [pc, #72]	; (8086c58 <loop+0x98>)
 8086c10:	4628      	mov	r0, r5
 8086c12:	f002 f9e7 	bl	8088fe4 <_ZN15Adafruit_BME68014performReadingEv>
 8086c16:	bb18      	cbnz	r0, 8086c60 <loop+0xa0>
      Serial.println("Failed to read BME680");
 8086c18:	f005 ff4c 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086c1c:	490f      	ldr	r1, [pc, #60]	; (8086c5c <loop+0x9c>)
 8086c1e:	f004 fe8e 	bl	808b93e <_ZN5Print7printlnEPKc>
      writeLogFile("Failed to read BME680");
 8086c22:	490e      	ldr	r1, [pc, #56]	; (8086c5c <loop+0x9c>)
 8086c24:	a804      	add	r0, sp, #16
 8086c26:	f004 fc65 	bl	808b4f4 <_ZN6StringC1EPKc>
 8086c2a:	a804      	add	r0, sp, #16
 8086c2c:	f7fb f868 	bl	8081d00 <_Z12writeLogFile6String>
 8086c30:	a804      	add	r0, sp, #16
 8086c32:	f004 fc15 	bl	808b460 <_ZN6StringD1Ev>
}
 8086c36:	b009      	add	sp, #36	; 0x24
 8086c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086c3c:	20000684 	.word	0x20000684
 8086c40:	20000828 	.word	0x20000828
 8086c44:	20000770 	.word	0x20000770
 8086c48:	20000800 	.word	0x20000800
 8086c4c:	20000690 	.word	0x20000690
 8086c50:	08093dfc 	.word	0x08093dfc
 8086c54:	08093e0f 	.word	0x08093e0f
 8086c58:	200005ec 	.word	0x200005ec
 8086c5c:	08091fbc 	.word	0x08091fbc
      if(debugging_enabled){
 8086c60:	6823      	ldr	r3, [r4, #0]
 8086c62:	b1d3      	cbz	r3, 8086c9a <loop+0xda>
        Serial.printf("Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.temperature, bme.pressure/100, bme.humidity);
 8086c64:	f005 ff26 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086c68:	4606      	mov	r6, r0
 8086c6a:	6828      	ldr	r0, [r5, #0]
 8086c6c:	f006 fd42 	bl	808d6f4 <__aeabi_f2d>
 8086c70:	4680      	mov	r8, r0
 8086c72:	68a8      	ldr	r0, [r5, #8]
 8086c74:	4689      	mov	r9, r1
 8086c76:	f006 fd3d 	bl	808d6f4 <__aeabi_f2d>
 8086c7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086c7e:	49a0      	ldr	r1, [pc, #640]	; (8086f00 <loop+0x340>)
 8086c80:	6868      	ldr	r0, [r5, #4]
 8086c82:	f007 fa99 	bl	808e1b8 <__aeabi_fdiv>
 8086c86:	f006 fd35 	bl	808d6f4 <__aeabi_f2d>
 8086c8a:	4642      	mov	r2, r8
 8086c8c:	e9cd 0100 	strd	r0, r1, [sp]
 8086c90:	464b      	mov	r3, r9
 8086c92:	4630      	mov	r0, r6
 8086c94:	499b      	ldr	r1, [pc, #620]	; (8086f04 <loop+0x344>)
 8086c96:	f7f9 ffeb 	bl	8080c70 <_ZN5Print6printfEPKcz>
    if(hih8120_enabled){
 8086c9a:	4b9b      	ldr	r3, [pc, #620]	; (8086f08 <loop+0x348>)
 8086c9c:	681b      	ldr	r3, [r3, #0]
 8086c9e:	b10b      	cbz	r3, 8086ca4 <loop+0xe4>
        readHIH8120();
 8086ca0:	f7ff ff80 	bl	8086ba4 <_Z11readHIH8120v>
    readGpsStream();
 8086ca4:	f7fb f87c 	bl	8081da0 <_Z13readGpsStreamv>
    CO_float = readCO();
 8086ca8:	f7fb fb38 	bl	808231c <_Z6readCOv>
 8086cac:	4b97      	ldr	r3, [pc, #604]	; (8086f0c <loop+0x34c>)
    CO2_float = readCO2();
 8086cae:	4f98      	ldr	r7, [pc, #608]	; (8086f10 <loop+0x350>)
    CO_float = readCO();
 8086cb0:	6018      	str	r0, [r3, #0]
    CO2_float = readCO2();
 8086cb2:	f7fa feab 	bl	8081a0c <_Z7readCO2v>
    float pressure_correction = bme.pressure/100;
 8086cb6:	4992      	ldr	r1, [pc, #584]	; (8086f00 <loop+0x340>)
    CO2_float = readCO2();
 8086cb8:	6038      	str	r0, [r7, #0]
    float pressure_correction = bme.pressure/100;
 8086cba:	6868      	ldr	r0, [r5, #4]
 8086cbc:	f007 fa7c 	bl	808e1b8 <__aeabi_fdiv>
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086cc0:	498f      	ldr	r1, [pc, #572]	; (8086f00 <loop+0x340>)
    float pressure_correction = bme.pressure/100;
 8086cc2:	4605      	mov	r5, r0
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086cc4:	f007 fb80 	bl	808e3c8 <__aeabi_fcmpgt>
 8086cc8:	2800      	cmp	r0, #0
 8086cca:	f000 80fc 	beq.w	8086ec6 <loop+0x306>
 8086cce:	4628      	mov	r0, r5
 8086cd0:	4990      	ldr	r1, [pc, #576]	; (8086f14 <loop+0x354>)
 8086cd2:	f007 fb5b 	bl	808e38c <__aeabi_fcmplt>
 8086cd6:	2800      	cmp	r0, #0
 8086cd8:	f000 80f5 	beq.w	8086ec6 <loop+0x306>
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086cdc:	4628      	mov	r0, r5
 8086cde:	498e      	ldr	r1, [pc, #568]	; (8086f18 <loop+0x358>)
 8086ce0:	f007 fa6a 	bl	808e1b8 <__aeabi_fdiv>
        if(debugging_enabled){
 8086ce4:	6823      	ldr	r3, [r4, #0]
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086ce6:	4605      	mov	r5, r0
        if(debugging_enabled){
 8086ce8:	b15b      	cbz	r3, 8086d02 <loop+0x142>
            Serial.printf("pressure correction factor for CO2:%1.2f\n\r", pressure_correction);
 8086cea:	f005 fee3 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086cee:	4606      	mov	r6, r0
 8086cf0:	4628      	mov	r0, r5
 8086cf2:	f006 fcff 	bl	808d6f4 <__aeabi_f2d>
 8086cf6:	4602      	mov	r2, r0
 8086cf8:	460b      	mov	r3, r1
 8086cfa:	4630      	mov	r0, r6
 8086cfc:	4987      	ldr	r1, [pc, #540]	; (8086f1c <loop+0x35c>)
 8086cfe:	f7f9 ffb7 	bl	8080c70 <_ZN5Print6printfEPKcz>
        CO2_float *= pressure_correction;
 8086d02:	6838      	ldr	r0, [r7, #0]
 8086d04:	4629      	mov	r1, r5
 8086d06:	f007 f9a3 	bl	808e050 <__aeabi_fmul>
 8086d0a:	6038      	str	r0, [r7, #0]
    if(ozone_enabled){
 8086d0c:	4b84      	ldr	r3, [pc, #528]	; (8086f20 <loop+0x360>)
 8086d0e:	681b      	ldr	r3, [r3, #0]
 8086d10:	b10b      	cbz	r3, 8086d16 <loop+0x156>
        readOzone();
 8086d12:	f7fe f949 	bl	8084fa8 <_Z9readOzonev>
    calculateAQI();
 8086d16:	f7fa fd4b 	bl	80817b0 <_Z12calculateAQIv>
    sound_average = readSound();
 8086d1a:	f7fa fe49 	bl	80819b0 <_Z9readSoundv>
 8086d1e:	4b81      	ldr	r3, [pc, #516]	; (8086f24 <loop+0x364>)
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086d20:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8086f78 <loop+0x3b8>
    sound_average = readSound();
 8086d24:	e9c3 0100 	strd	r0, r1, [r3]
    readPlantower();
 8086d28:	f7fb fb8c 	bl	8082444 <_Z13readPlantowerv>
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086d2c:	f7fa fcf6 	bl	808171c <_Z12readHumidityv>
 8086d30:	4606      	mov	r6, r0
 8086d32:	f7fa fcf3 	bl	808171c <_Z12readHumidityv>
 8086d36:	4972      	ldr	r1, [pc, #456]	; (8086f00 <loop+0x340>)
 8086d38:	4605      	mov	r5, r0
 8086d3a:	4630      	mov	r0, r6
 8086d3c:	f007 fa3c 	bl	808e1b8 <__aeabi_fdiv>
 8086d40:	f006 fcd8 	bl	808d6f4 <__aeabi_f2d>
 8086d44:	a36a      	add	r3, pc, #424	; (adr r3, 8086ef0 <loop+0x330>)
 8086d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086d4a:	f006 fd2b 	bl	808d7a4 <__aeabi_dmul>
 8086d4e:	4606      	mov	r6, r0
 8086d50:	460f      	mov	r7, r1
 8086d52:	4628      	mov	r0, r5
 8086d54:	496a      	ldr	r1, [pc, #424]	; (8086f00 <loop+0x340>)
 8086d56:	f007 fa2f 	bl	808e1b8 <__aeabi_fdiv>
 8086d5a:	4601      	mov	r1, r0
 8086d5c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8086d60:	f007 f86c 	bl	808de3c <__aeabi_fsub>
 8086d64:	f006 fcc6 	bl	808d6f4 <__aeabi_f2d>
 8086d68:	4602      	mov	r2, r0
 8086d6a:	460b      	mov	r3, r1
 8086d6c:	4630      	mov	r0, r6
 8086d6e:	4639      	mov	r1, r7
 8086d70:	f006 fe42 	bl	808d9f8 <__aeabi_ddiv>
 8086d74:	a360      	add	r3, pc, #384	; (adr r3, 8086ef8 <loop+0x338>)
 8086d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086d7a:	f006 fb5d 	bl	808d438 <__adddf3>
 8086d7e:	f007 f809 	bl	808dd94 <__aeabi_d2f>
    if(debugging_enabled){
 8086d82:	6823      	ldr	r3, [r4, #0]
 8086d84:	4645      	mov	r5, r8
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086d86:	f8c8 0000 	str.w	r0, [r8]
    if(debugging_enabled){
 8086d8a:	b1bb      	cbz	r3, 8086dbc <loop+0x1fc>
        Serial.printf("pm2.5 correction factor: %1.2f, %1.2f\n\r", pm_25_correction_factor, readHumidity()/100);
 8086d8c:	f005 fe92 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086d90:	4606      	mov	r6, r0
 8086d92:	f8d8 0000 	ldr.w	r0, [r8]
 8086d96:	f006 fcad 	bl	808d6f4 <__aeabi_f2d>
 8086d9a:	4689      	mov	r9, r1
 8086d9c:	4680      	mov	r8, r0
 8086d9e:	f7fa fcbd 	bl	808171c <_Z12readHumidityv>
 8086da2:	4957      	ldr	r1, [pc, #348]	; (8086f00 <loop+0x340>)
 8086da4:	f007 fa08 	bl	808e1b8 <__aeabi_fdiv>
 8086da8:	f006 fca4 	bl	808d6f4 <__aeabi_f2d>
 8086dac:	4642      	mov	r2, r8
 8086dae:	e9cd 0100 	strd	r0, r1, [sp]
 8086db2:	464b      	mov	r3, r9
 8086db4:	4630      	mov	r0, r6
 8086db6:	495c      	ldr	r1, [pc, #368]	; (8086f28 <loop+0x368>)
 8086db8:	f7f9 ff5a 	bl	8080c70 <_ZN5Print6printfEPKcz>
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
 8086dbc:	4b5b      	ldr	r3, [pc, #364]	; (8086f2c <loop+0x36c>)
 8086dbe:	6818      	ldr	r0, [r3, #0]
 8086dc0:	f007 f8f2 	bl	808dfa8 <__aeabi_i2f>
 8086dc4:	6829      	ldr	r1, [r5, #0]
 8086dc6:	f007 f9f7 	bl	808e1b8 <__aeabi_fdiv>
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
 8086dca:	4b59      	ldr	r3, [pc, #356]	; (8086f30 <loop+0x370>)
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
 8086dcc:	4605      	mov	r5, r0
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
 8086dce:	6818      	ldr	r0, [r3, #0]
 8086dd0:	f007 f8ea 	bl	808dfa8 <__aeabi_i2f>
 8086dd4:	4601      	mov	r1, r0
 8086dd6:	4628      	mov	r0, r5
 8086dd8:	f007 f832 	bl	808de40 <__addsf3>
    corrected_PM_25 = corrected_PM_25 * PM_25_slope;
 8086ddc:	4b55      	ldr	r3, [pc, #340]	; (8086f34 <loop+0x374>)
 8086dde:	6819      	ldr	r1, [r3, #0]
 8086de0:	f007 f936 	bl	808e050 <__aeabi_fmul>
 8086de4:	4b54      	ldr	r3, [pc, #336]	; (8086f38 <loop+0x378>)
 8086de6:	6018      	str	r0, [r3, #0]
    outputDataToESP();
 8086de8:	f7fc ff9e 	bl	8083d28 <_Z15outputDataToESPv>
    sample_counter = ++sample_counter;
 8086dec:	4b53      	ldr	r3, [pc, #332]	; (8086f3c <loop+0x37c>)
 8086dee:	681a      	ldr	r2, [r3, #0]
    if(sample_counter == 99)    {
 8086df0:	2a62      	cmp	r2, #98	; 0x62
    sample_counter = ++sample_counter;
 8086df2:	f102 0101 	add.w	r1, r2, #1
          sample_counter = 0;
 8086df6:	bf0a      	itet	eq
 8086df8:	2200      	moveq	r2, #0
    sample_counter = ++sample_counter;
 8086dfa:	6019      	strne	r1, [r3, #0]
          sample_counter = 0;
 8086dfc:	601a      	streq	r2, [r3, #0]
    if (Serial.available() > 0) {
 8086dfe:	f005 fe59 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086e02:	6803      	ldr	r3, [r0, #0]
 8086e04:	691b      	ldr	r3, [r3, #16]
 8086e06:	4798      	blx	r3
 8086e08:	2800      	cmp	r0, #0
 8086e0a:	dd1c      	ble.n	8086e46 <loop+0x286>
        incomingByte = Serial.read();
 8086e0c:	f005 fe52 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086e10:	6803      	ldr	r3, [r0, #0]
 8086e12:	4d4b      	ldr	r5, [pc, #300]	; (8086f40 <loop+0x380>)
 8086e14:	695b      	ldr	r3, [r3, #20]
 8086e16:	4798      	blx	r3
        if(debugging_enabled){
 8086e18:	6823      	ldr	r3, [r4, #0]
        incomingByte = Serial.read();
 8086e1a:	7028      	strb	r0, [r5, #0]
        if(debugging_enabled){
 8086e1c:	b14b      	cbz	r3, 8086e32 <loop+0x272>
            Serial.print("incomming byte:");
 8086e1e:	f005 fe49 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086e22:	4948      	ldr	r1, [pc, #288]	; (8086f44 <loop+0x384>)
 8086e24:	f004 fd78 	bl	808b918 <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 8086e28:	f005 fe44 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086e2c:	7829      	ldrb	r1, [r5, #0]
 8086e2e:	f004 fd90 	bl	808b952 <_ZN5Print7printlnEc>
        Serial.println(incomingByte);
 8086e32:	f005 fe3f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086e36:	7829      	ldrb	r1, [r5, #0]
 8086e38:	f004 fd8b 	bl	808b952 <_ZN5Print7printlnEc>
        if(incomingByte == 'm'){
 8086e3c:	782b      	ldrb	r3, [r5, #0]
 8086e3e:	2b6d      	cmp	r3, #109	; 0x6d
 8086e40:	d101      	bne.n	8086e46 <loop+0x286>
          serialMenu();
 8086e42:	f7ff f969 	bl	8086118 <_Z10serialMenuv>
    if(serial_cellular_enabled){
 8086e46:	4b40      	ldr	r3, [pc, #256]	; (8086f48 <loop+0x388>)
 8086e48:	681b      	ldr	r3, [r3, #0]
 8086e4a:	2b00      	cmp	r3, #0
 8086e4c:	f000 80e2 	beq.w	8087014 <loop+0x454>
        status_word.status_int |= 0x01;
 8086e50:	4a3e      	ldr	r2, [pc, #248]	; (8086f4c <loop+0x38c>)
 8086e52:	8813      	ldrh	r3, [r2, #0]
 8086e54:	f043 0301 	orr.w	r3, r3, #1
 8086e58:	8013      	strh	r3, [r2, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086e5a:	f003 fe7f 	bl	808ab5c <spark_cloud_flag_connected>
      if (Particle.connected() == false && tried_cellular_connect == false) {
 8086e5e:	b920      	cbnz	r0, 8086e6a <loop+0x2aa>
 8086e60:	4b3b      	ldr	r3, [pc, #236]	; (8086f50 <loop+0x390>)
 8086e62:	781a      	ldrb	r2, [r3, #0]
 8086e64:	2a00      	cmp	r2, #0
 8086e66:	f000 8089 	beq.w	8086f7c <loop+0x3bc>
 8086e6a:	f003 fe77 	bl	808ab5c <spark_cloud_flag_connected>
      }else if(Particle.connected() == true){  //this means that it is already connected
 8086e6e:	2800      	cmp	r0, #0
 8086e70:	f040 80c5 	bne.w	8086ffe <loop+0x43e>
    powerCheck.loop();
 8086e74:	4d37      	ldr	r5, [pc, #220]	; (8086f54 <loop+0x394>)
 8086e76:	4628      	mov	r0, r5
 8086e78:	f000 f99e 	bl	80871b8 <_ZN10PowerCheck4loopEv>
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8086e7c:	4b36      	ldr	r3, [pc, #216]	; (8086f58 <loop+0x398>)
 8086e7e:	681b      	ldr	r3, [r3, #0]
 8086e80:	2b01      	cmp	r3, #1
 8086e82:	d110      	bne.n	8086ea6 <loop+0x2e6>
 8086e84:	4835      	ldr	r0, [pc, #212]	; (8086f5c <loop+0x39c>)
 8086e86:	f005 f9ad 	bl	808c1e4 <_ZN9FuelGauge6getSoCEv>
 8086e8a:	4935      	ldr	r1, [pc, #212]	; (8086f60 <loop+0x3a0>)
 8086e8c:	f007 fa7e 	bl	808e38c <__aeabi_fcmplt>
 8086e90:	b148      	cbz	r0, 8086ea6 <loop+0x2e6>
 8086e92:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8086e96:	b933      	cbnz	r3, 8086ea6 <loop+0x2e6>
        Serial.println("Going to sleep because battery is below 20% charge");
 8086e98:	f005 fe0c 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086e9c:	4931      	ldr	r1, [pc, #196]	; (8086f64 <loop+0x3a4>)
 8086e9e:	f004 fd4e 	bl	808b93e <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8086ea2:	f7fb fcb3 	bl	808280c <_Z16goToSleepBatteryv>
    if(co2_calibration_timer){
 8086ea6:	4a30      	ldr	r2, [pc, #192]	; (8086f68 <loop+0x3a8>)
 8086ea8:	6813      	ldr	r3, [r2, #0]
 8086eaa:	2b00      	cmp	r3, #0
 8086eac:	f43f aec3 	beq.w	8086c36 <loop+0x76>
        co2_calibration_timer--;
 8086eb0:	3b01      	subs	r3, #1
 8086eb2:	6013      	str	r3, [r2, #0]
        if(debugging_enabled){
 8086eb4:	6823      	ldr	r3, [r4, #0]
 8086eb6:	2b00      	cmp	r3, #0
 8086eb8:	f43f aebd 	beq.w	8086c36 <loop+0x76>
            t6713.readStatus(1);
 8086ebc:	2101      	movs	r1, #1
 8086ebe:	482b      	ldr	r0, [pc, #172]	; (8086f6c <loop+0x3ac>)
 8086ec0:	f000 fc56 	bl	8087770 <_ZN13Telaire_T671310readStatusEi>
 8086ec4:	e6b7      	b.n	8086c36 <loop+0x76>
        Serial.println("Error: Pressure out of range, not using pressure correction for CO2.");
 8086ec6:	f005 fdf5 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086eca:	4929      	ldr	r1, [pc, #164]	; (8086f70 <loop+0x3b0>)
 8086ecc:	f004 fd37 	bl	808b93e <_ZN5Print7printlnEPKc>
        Serial.printf("Pressure=%1.2f\n\r", pressure_correction);
 8086ed0:	f005 fdf0 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086ed4:	4606      	mov	r6, r0
 8086ed6:	4628      	mov	r0, r5
 8086ed8:	f006 fc0c 	bl	808d6f4 <__aeabi_f2d>
 8086edc:	4602      	mov	r2, r0
 8086ede:	460b      	mov	r3, r1
 8086ee0:	4630      	mov	r0, r6
 8086ee2:	4924      	ldr	r1, [pc, #144]	; (8086f74 <loop+0x3b4>)
 8086ee4:	f7f9 fec4 	bl	8080c70 <_ZN5Print6printfEPKcz>
 8086ee8:	e710      	b.n	8086d0c <loop+0x14c>
 8086eea:	bf00      	nop
 8086eec:	f3af 8000 	nop.w
 8086ef0:	b4395810 	.word	0xb4395810
 8086ef4:	3fbe76c8 	.word	0x3fbe76c8
 8086ef8:	70a3d70a 	.word	0x70a3d70a
 8086efc:	3ff30a3d 	.word	0x3ff30a3d
 8086f00:	42c80000 	.word	0x42c80000
 8086f04:	08093ca2 	.word	0x08093ca2
 8086f08:	20000764 	.word	0x20000764
 8086f0c:	20000340 	.word	0x20000340
 8086f10:	2000032c 	.word	0x2000032c
 8086f14:	44bb8000 	.word	0x44bb8000
 8086f18:	447d5000 	.word	0x447d5000
 8086f1c:	08093e22 	.word	0x08093e22
 8086f20:	20000808 	.word	0x20000808
 8086f24:	20000ce0 	.word	0x20000ce0
 8086f28:	08093ea3 	.word	0x08093ea3
 8086f2c:	20000364 	.word	0x20000364
 8086f30:	2000037c 	.word	0x2000037c
 8086f34:	20000378 	.word	0x20000378
 8086f38:	2000068c 	.word	0x2000068c
 8086f3c:	2000085c 	.word	0x2000085c
 8086f40:	2000076c 	.word	0x2000076c
 8086f44:	08093ecb 	.word	0x08093ecb
 8086f48:	20000cdc 	.word	0x20000cdc
 8086f4c:	20000cf8 	.word	0x20000cf8
 8086f50:	20000d0c 	.word	0x20000d0c
 8086f54:	20000828 	.word	0x20000828
 8086f58:	200005e8 	.word	0x200005e8
 8086f5c:	2000070c 	.word	0x2000070c
 8086f60:	41a00000 	.word	0x41a00000
 8086f64:	08093f7f 	.word	0x08093f7f
 8086f68:	20000688 	.word	0x20000688
 8086f6c:	20000cfa 	.word	0x20000cfa
 8086f70:	08093e4d 	.word	0x08093e4d
 8086f74:	08093e92 	.word	0x08093e92
 8086f78:	20000820 	.word	0x20000820
        tried_cellular_connect = true;
 8086f7c:	2201      	movs	r2, #1
 8086f7e:	701a      	strb	r2, [r3, #0]
          if(debugging_enabled){
 8086f80:	6823      	ldr	r3, [r4, #0]
 8086f82:	b173      	cbz	r3, 8086fa2 <loop+0x3e2>
            Serial.println("Connecting to cellular network");
 8086f84:	f005 fd96 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086f88:	492f      	ldr	r1, [pc, #188]	; (8087048 <loop+0x488>)
 8086f8a:	f004 fcd8 	bl	808b93e <_ZN5Print7printlnEPKc>
            writeLogFile("Connecting to cellular network");
 8086f8e:	492e      	ldr	r1, [pc, #184]	; (8087048 <loop+0x488>)
 8086f90:	a804      	add	r0, sp, #16
 8086f92:	f004 faaf 	bl	808b4f4 <_ZN6StringC1EPKc>
 8086f96:	a804      	add	r0, sp, #16
 8086f98:	f7fa feb2 	bl	8081d00 <_Z12writeLogFile6String>
 8086f9c:	a804      	add	r0, sp, #16
 8086f9e:	f004 fa5f 	bl	808b460 <_ZN6StringD1Ev>
        network_on(*this, 0, 0, NULL);
 8086fa2:	2300      	movs	r3, #0
 8086fa4:	4829      	ldr	r0, [pc, #164]	; (808704c <loop+0x48c>)
 8086fa6:	461a      	mov	r2, r3
 8086fa8:	4619      	mov	r1, r3
 8086faa:	6840      	ldr	r0, [r0, #4]
 8086fac:	f003 fd8e 	bl	808aacc <network_on>
          if(debugging_enabled){
 8086fb0:	6823      	ldr	r3, [r4, #0]
 8086fb2:	b173      	cbz	r3, 8086fd2 <loop+0x412>
            Serial.println("after cellularOn");
 8086fb4:	f005 fd7e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086fb8:	4925      	ldr	r1, [pc, #148]	; (8087050 <loop+0x490>)
 8086fba:	f004 fcc0 	bl	808b93e <_ZN5Print7printlnEPKc>
            writeLogFile("After cellularOn");
 8086fbe:	4925      	ldr	r1, [pc, #148]	; (8087054 <loop+0x494>)
 8086fc0:	a804      	add	r0, sp, #16
 8086fc2:	f004 fa97 	bl	808b4f4 <_ZN6StringC1EPKc>
 8086fc6:	a804      	add	r0, sp, #16
 8086fc8:	f7fa fe9a 	bl	8081d00 <_Z12writeLogFile6String>
 8086fcc:	a804      	add	r0, sp, #16
 8086fce:	f004 fa47 	bl	808b460 <_ZN6StringD1Ev>
        spark_cloud_flag_connect();
 8086fd2:	f003 fdbb 	bl	808ab4c <spark_cloud_flag_connect>
          if(debugging_enabled){
 8086fd6:	6823      	ldr	r3, [r4, #0]
 8086fd8:	2b00      	cmp	r3, #0
 8086fda:	f43f af4b 	beq.w	8086e74 <loop+0x2b4>
            Serial.println("After particle connect");
 8086fde:	f005 fd69 	bl	808cab4 <_Z16_fetch_usbserialv>
 8086fe2:	491d      	ldr	r1, [pc, #116]	; (8087058 <loop+0x498>)
 8086fe4:	f004 fcab 	bl	808b93e <_ZN5Print7printlnEPKc>
            writeLogFile("After particle connect");
 8086fe8:	491b      	ldr	r1, [pc, #108]	; (8087058 <loop+0x498>)
 8086fea:	a804      	add	r0, sp, #16
 8086fec:	f004 fa82 	bl	808b4f4 <_ZN6StringC1EPKc>
 8086ff0:	a804      	add	r0, sp, #16
 8086ff2:	f7fa fe85 	bl	8081d00 <_Z12writeLogFile6String>
 8086ff6:	a804      	add	r0, sp, #16
 8086ff8:	f004 fa32 	bl	808b460 <_ZN6StringD1Ev>
 8086ffc:	e73a      	b.n	8086e74 <loop+0x2b4>
        if(debugging_enabled){
 8086ffe:	6823      	ldr	r3, [r4, #0]
 8087000:	b123      	cbz	r3, 808700c <loop+0x44c>
          Serial.println("setting tried_cellular_connect to false");
 8087002:	f005 fd57 	bl	808cab4 <_Z16_fetch_usbserialv>
 8087006:	4915      	ldr	r1, [pc, #84]	; (808705c <loop+0x49c>)
 8087008:	f004 fc99 	bl	808b93e <_ZN5Print7printlnEPKc>
        tried_cellular_connect = false;
 808700c:	2200      	movs	r2, #0
 808700e:	4b14      	ldr	r3, [pc, #80]	; (8087060 <loop+0x4a0>)
 8087010:	701a      	strb	r2, [r3, #0]
 8087012:	e72f      	b.n	8086e74 <loop+0x2b4>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8087014:	f003 fda2 	bl	808ab5c <spark_cloud_flag_connected>
      if (Particle.connected() == true) {
 8087018:	2800      	cmp	r0, #0
 808701a:	f43f af2b 	beq.w	8086e74 <loop+0x2b4>
          if(debugging_enabled){
 808701e:	6823      	ldr	r3, [r4, #0]
 8087020:	b173      	cbz	r3, 8087040 <loop+0x480>
            Serial.println("Disconnecting from cellular network");
 8087022:	f005 fd47 	bl	808cab4 <_Z16_fetch_usbserialv>
 8087026:	490f      	ldr	r1, [pc, #60]	; (8087064 <loop+0x4a4>)
 8087028:	f004 fc89 	bl	808b93e <_ZN5Print7printlnEPKc>
            writeLogFile("Disconnecting from cellular network");
 808702c:	490d      	ldr	r1, [pc, #52]	; (8087064 <loop+0x4a4>)
 808702e:	a804      	add	r0, sp, #16
 8087030:	f004 fa60 	bl	808b4f4 <_ZN6StringC1EPKc>
 8087034:	a804      	add	r0, sp, #16
 8087036:	f7fa fe63 	bl	8081d00 <_Z12writeLogFile6String>
 808703a:	a804      	add	r0, sp, #16
 808703c:	f004 fa10 	bl	808b460 <_ZN6StringD1Ev>
          Cellular.off();
 8087040:	4802      	ldr	r0, [pc, #8]	; (808704c <loop+0x48c>)
 8087042:	f7f9 fead 	bl	8080da0 <_ZN5spark13CellularClass3offEv>
 8087046:	e715      	b.n	8086e74 <loop+0x2b4>
 8087048:	08093edb 	.word	0x08093edb
 808704c:	2000121c 	.word	0x2000121c
 8087050:	08093efa 	.word	0x08093efa
 8087054:	08093f0b 	.word	0x08093f0b
 8087058:	08093f1c 	.word	0x08093f1c
 808705c:	08093f33 	.word	0x08093f33
 8087060:	20000d0c 	.word	0x20000d0c
 8087064:	08093f5b 	.word	0x08093f5b

08087068 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8087068:	4770      	bx	lr

0808706a <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 808706a:	b510      	push	{r4, lr}
 808706c:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 808706e:	f006 f97b 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087072:	2148      	movs	r1, #72	; 0x48
 8087074:	f005 ff18 	bl	808cea8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8087078:	f006 f976 	bl	808d368 <_Z19__fetch_global_Wirev>
 808707c:	6803      	ldr	r3, [r0, #0]
 808707e:	4621      	mov	r1, r4
 8087080:	689b      	ldr	r3, [r3, #8]
 8087082:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8087084:	f006 f970 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087088:	2100      	movs	r1, #0
 808708a:	f005 ff28 	bl	808cede <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 808708e:	f006 f96b 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087092:	2301      	movs	r3, #1
 8087094:	2148      	movs	r1, #72	; 0x48
 8087096:	461a      	mov	r2, r3
 8087098:	f005 feed 	bl	808ce76 <_ZN7TwoWire11requestFromEhjh>
      if(Wire.available()){
 808709c:	f006 f964 	bl	808d368 <_Z19__fetch_global_Wirev>
 80870a0:	6803      	ldr	r3, [r0, #0]
 80870a2:	691b      	ldr	r3, [r3, #16]
 80870a4:	4798      	blx	r3
 80870a6:	b128      	cbz	r0, 80870b4 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 80870a8:	f006 f95e 	bl	808d368 <_Z19__fetch_global_Wirev>
 80870ac:	6803      	ldr	r3, [r0, #0]
 80870ae:	695b      	ldr	r3, [r3, #20]
 80870b0:	4798      	blx	r3
 80870b2:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 80870b4:	bd10      	pop	{r4, pc}

080870b6 <_ZN8LMP910005writeEhh>:
uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 80870b6:	b570      	push	{r4, r5, r6, lr}
 80870b8:	4616      	mov	r6, r2
 80870ba:	460c      	mov	r4, r1
 80870bc:	4605      	mov	r5, r0
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 80870be:	f006 f953 	bl	808d368 <_Z19__fetch_global_Wirev>
 80870c2:	2148      	movs	r1, #72	; 0x48
 80870c4:	f005 fef0 	bl	808cea8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 80870c8:	f006 f94e 	bl	808d368 <_Z19__fetch_global_Wirev>
 80870cc:	6803      	ldr	r3, [r0, #0]
 80870ce:	4621      	mov	r1, r4
 80870d0:	689b      	ldr	r3, [r3, #8]
 80870d2:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 80870d4:	f006 f948 	bl	808d368 <_Z19__fetch_global_Wirev>
 80870d8:	6803      	ldr	r3, [r0, #0]
 80870da:	4631      	mov	r1, r6
 80870dc:	689b      	ldr	r3, [r3, #8]
 80870de:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 80870e0:	f006 f942 	bl	808d368 <_Z19__fetch_global_Wirev>
 80870e4:	2101      	movs	r1, #1
 80870e6:	f005 fefa 	bl	808cede <_ZN7TwoWire15endTransmissionEh>
      return read(reg);
 80870ea:	4621      	mov	r1, r4
 80870ec:	4628      	mov	r0, r5
}
 80870ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return read(reg);
 80870f2:	f7ff bfba 	b.w	808706a <_ZN8LMP910004readEh>

080870f6 <_ZN8LMP910006statusEv>:

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 80870f6:	2100      	movs	r1, #0
 80870f8:	f7ff bfb7 	b.w	808706a <_ZN8LMP910004readEh>

080870fc <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 80870fc:	2201      	movs	r2, #1
 80870fe:	4611      	mov	r1, r2
 8087100:	f7ff bfd9 	b.w	80870b6 <_ZN8LMP910005writeEhh>

08087104 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8087104:	2200      	movs	r2, #0
 8087106:	2101      	movs	r1, #1
 8087108:	f7ff bfd5 	b.w	80870b6 <_ZN8LMP910005writeEhh>

0808710c <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 808710c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087110:	4604      	mov	r4, r0
 8087112:	4688      	mov	r8, r1
 8087114:	4617      	mov	r7, r2
 8087116:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8087118:	f7ff ffed 	bl	80870f6 <_ZN8LMP910006statusEv>
 808711c:	2801      	cmp	r0, #1
 808711e:	4605      	mov	r5, r0
 8087120:	d117      	bne.n	8087152 <_ZN8LMP910009configureEhhh+0x46>
            unlock();
 8087122:	4620      	mov	r0, r4
 8087124:	f7ff ffee 	bl	8087104 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8087128:	4642      	mov	r2, r8
 808712a:	2110      	movs	r1, #16
 808712c:	4620      	mov	r0, r4
 808712e:	f7ff ffc2 	bl	80870b6 <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 8087132:	463a      	mov	r2, r7
 8087134:	2111      	movs	r1, #17
 8087136:	4620      	mov	r0, r4
 8087138:	f7ff ffbd 	bl	80870b6 <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 808713c:	4632      	mov	r2, r6
 808713e:	2112      	movs	r1, #18
 8087140:	4620      	mov	r0, r4
 8087142:	f7ff ffb8 	bl	80870b6 <_ZN8LMP910005writeEhh>
            lock();
 8087146:	4620      	mov	r0, r4
 8087148:	f7ff ffd8 	bl	80870fc <_ZN8LMP910004lockEv>
            return 1;
      }
      return 0;
}
 808714c:	4628      	mov	r0, r5
 808714e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return 0;
 8087152:	2500      	movs	r5, #0
 8087154:	e7fa      	b.n	808714c <_ZN8LMP910009configureEhhh+0x40>
	...

08087158 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8087158:	b510      	push	{r4, lr}
 808715a:	4604      	mov	r4, r0
 808715c:	4b03      	ldr	r3, [pc, #12]	; (808716c <_ZN10PowerCheckD1Ev+0x14>)
 808715e:	f840 3b14 	str.w	r3, [r0], #20
 8087162:	f003 fdb9 	bl	808acd8 <_ZN4PMICD1Ev>
}
 8087166:	4620      	mov	r0, r4
 8087168:	bd10      	pop	{r4, pc}
 808716a:	bf00      	nop
 808716c:	08094038 	.word	0x08094038

08087170 <_ZN10PowerCheckD0Ev>:
PowerCheck::~PowerCheck() {
 8087170:	b510      	push	{r4, lr}
 8087172:	4604      	mov	r4, r0
}
 8087174:	f7ff fff0 	bl	8087158 <_ZN10PowerCheckD1Ev>
 8087178:	4620      	mov	r0, r4
 808717a:	2124      	movs	r1, #36	; 0x24
 808717c:	f006 f949 	bl	808d412 <_ZdlPvj>
 8087180:	4620      	mov	r0, r4
 8087182:	bd10      	pop	{r4, pc}

08087184 <_ZN10PowerCheckC1Ev>:
PowerCheck::PowerCheck() {
 8087184:	b538      	push	{r3, r4, r5, lr}
 8087186:	4b0b      	ldr	r3, [pc, #44]	; (80871b4 <_ZN10PowerCheckC1Ev+0x30>)
 8087188:	2500      	movs	r5, #0
 808718a:	2232      	movs	r2, #50	; 0x32
 808718c:	6003      	str	r3, [r0, #0]
 808718e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8087192:	4604      	mov	r4, r0
 8087194:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8087198:	e9c0 5503 	strd	r5, r5, [r0, #12]
 808719c:	4629      	mov	r1, r5
 808719e:	3014      	adds	r0, #20
 80871a0:	f003 fd7b 	bl	808ac9a <_ZN4PMICC1Eb>
 80871a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}
 80871a8:	4620      	mov	r0, r4
PowerCheck::PowerCheck() {
 80871aa:	e9c4 5506 	strd	r5, r5, [r4, #24]
 80871ae:	6223      	str	r3, [r4, #32]
}
 80871b0:	bd38      	pop	{r3, r4, r5, pc}
 80871b2:	bf00      	nop
 80871b4:	08094038 	.word	0x08094038

080871b8 <_ZN10PowerCheck4loopEv>:

void PowerCheck::loop() {
 80871b8:	b510      	push	{r4, lr}
 80871ba:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80871bc:	f003 fa4e 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 80871c0:	68e3      	ldr	r3, [r4, #12]
 80871c2:	1ac0      	subs	r0, r0, r3
 80871c4:	6863      	ldr	r3, [r4, #4]
 80871c6:	4298      	cmp	r0, r3
 80871c8:	d31a      	bcc.n	8087200 <_ZN10PowerCheck4loopEv+0x48>
 80871ca:	f003 fa47 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 80871ce:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 80871d0:	f104 0014 	add.w	r0, r4, #20
 80871d4:	f003 fdd3 	bl	808ad7e <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 80871d8:	f010 0304 	ands.w	r3, r0, #4
 80871dc:	d00b      	beq.n	80871f6 <_ZN10PowerCheck4loopEv+0x3e>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 80871de:	f894 3020 	ldrb.w	r3, [r4, #32]
			byte chrgStat = (systemStatus >> 4) & 0x3;
 80871e2:	f3c0 1001 	ubfx	r0, r0, #4, #2
			if (chrgStat != lastChrgStat) {
 80871e6:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 80871e8:	bf1f      	itttt	ne
 80871ea:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 80871ec:	f884 0020 	strbne.w	r0, [r4, #32]
				changeCount++;
 80871f0:	3301      	addne	r3, #1
 80871f2:	61e3      	strne	r3, [r4, #28]
			}

			// We have power (USB or VIN)
			hasPower = true;
 80871f4:	2301      	movs	r3, #1
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 80871f6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		}

		checkCount++;
 80871fa:	69a3      	ldr	r3, [r4, #24]
 80871fc:	3301      	adds	r3, #1
 80871fe:	61a3      	str	r3, [r4, #24]
 8087200:	f003 fa2c 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8087204:	6923      	ldr	r3, [r4, #16]
 8087206:	1ac0      	subs	r0, r0, r3
 8087208:	68a3      	ldr	r3, [r4, #8]
 808720a:	4298      	cmp	r0, r3
 808720c:	d914      	bls.n	8087238 <_ZN10PowerCheck4loopEv+0x80>
 808720e:	f003 fa25 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8087212:	69a3      	ldr	r3, [r4, #24]
		lastSlowCheck = millis();
 8087214:	6120      	str	r0, [r4, #16]
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8087216:	2b0a      	cmp	r3, #10
 8087218:	dc0f      	bgt.n	808723a <_ZN10PowerCheck4loopEv+0x82>
 808721a:	2301      	movs	r3, #1
 808721c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8087220:	f894 3020 	ldrb.w	r3, [r4, #32]
 8087224:	3b01      	subs	r3, #1
 8087226:	2b01      	cmp	r3, #1
 8087228:	bf8c      	ite	hi
 808722a:	2300      	movhi	r3, #0
 808722c:	2301      	movls	r3, #1
 808722e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 8087232:	2300      	movs	r3, #0
		changeCount = 0;
 8087234:	e9c4 3306 	strd	r3, r3, [r4, #24]
	}

}
 8087238:	bd10      	pop	{r4, pc}
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 808723a:	69e2      	ldr	r2, [r4, #28]
 808723c:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8087240:	ddeb      	ble.n	808721a <_ZN10PowerCheck4loopEv+0x62>
 8087242:	2300      	movs	r3, #0
 8087244:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8087248:	e7f1      	b.n	808722e <_ZN10PowerCheck4loopEv+0x76>

0808724a <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 808724a:	b510      	push	{r4, lr}
 808724c:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 808724e:	f006 f88b 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087252:	6803      	ldr	r3, [r0, #0]
 8087254:	4621      	mov	r1, r4
}
 8087256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.write((uint8_t)x);
 808725a:	689b      	ldr	r3, [r3, #8]
 808725c:	4718      	bx	r3

0808725e <_ZL7i2creadv>:
static uint8_t i2cread(void) {
 808725e:	b508      	push	{r3, lr}
  return Wire.read();
 8087260:	f006 f882 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087264:	6803      	ldr	r3, [r0, #0]
 8087266:	695b      	ldr	r3, [r3, #20]
 8087268:	4798      	blx	r3
}
 808726a:	b2c0      	uxtb	r0, r0
 808726c:	bd08      	pop	{r3, pc}

0808726e <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 808726e:	b570      	push	{r4, r5, r6, lr}
 8087270:	4606      	mov	r6, r0
 8087272:	460d      	mov	r5, r1
 8087274:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8087276:	f006 f877 	bl	808d368 <_Z19__fetch_global_Wirev>
 808727a:	4631      	mov	r1, r6
 808727c:	f005 fe10 	bl	808cea0 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8087280:	4628      	mov	r0, r5
 8087282:	f7ff ffe2 	bl	808724a <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8087286:	0a20      	lsrs	r0, r4, #8
 8087288:	f7ff ffdf 	bl	808724a <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 808728c:	b2e0      	uxtb	r0, r4
 808728e:	f7ff ffdc 	bl	808724a <_ZL8i2cwriteh>
  Wire.endTransmission();
 8087292:	f006 f869 	bl	808d368 <_Z19__fetch_global_Wirev>
}
 8087296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 808729a:	f005 be24 	b.w	808cee6 <_ZN7TwoWire15endTransmissionEv>

0808729e <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 808729e:	b510      	push	{r4, lr}
 80872a0:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 80872a2:	f006 f861 	bl	808d368 <_Z19__fetch_global_Wirev>
 80872a6:	4621      	mov	r1, r4
 80872a8:	f005 fdfa 	bl	808cea0 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 80872ac:	2000      	movs	r0, #0
 80872ae:	f7ff ffcc 	bl	808724a <_ZL8i2cwriteh>
  Wire.endTransmission();
 80872b2:	f006 f859 	bl	808d368 <_Z19__fetch_global_Wirev>
 80872b6:	f005 fe16 	bl	808cee6 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 80872ba:	f006 f855 	bl	808d368 <_Z19__fetch_global_Wirev>
 80872be:	4621      	mov	r1, r4
 80872c0:	2202      	movs	r2, #2
 80872c2:	f005 fdea 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());  
 80872c6:	f7ff ffca 	bl	808725e <_ZL7i2creadv>
 80872ca:	4604      	mov	r4, r0
 80872cc:	f7ff ffc7 	bl	808725e <_ZL7i2creadv>
 80872d0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 80872d4:	b280      	uxth	r0, r0
 80872d6:	bd10      	pop	{r4, pc}

080872d8 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 80872d8:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 80872da:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 80872dc:	2108      	movs	r1, #8
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 80872de:	8082      	strh	r2, [r0, #4]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 80872e0:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 80872e2:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 80872e4:	4770      	bx	lr

080872e6 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 80872e6:	b508      	push	{r3, lr}
  Wire.begin();
 80872e8:	f006 f83e 	bl	808d368 <_Z19__fetch_global_Wirev>
}
 80872ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin();
 80872f0:	f005 bda4 	b.w	808ce3c <_ZN7TwoWire5beginEv>

080872f4 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 80872f4:	8081      	strh	r1, [r0, #4]
}
 80872f6:	4770      	bx	lr

080872f8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 80872f8:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 80872fa:	b510      	push	{r4, lr}
 80872fc:	4604      	mov	r4, r0
  if (channel > 3)
 80872fe:	d822      	bhi.n	8087346 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8087300:	2902      	cmp	r1, #2
  config |= m_gain;
 8087302:	8882      	ldrh	r2, [r0, #4]
  switch (channel)
 8087304:	d019      	beq.n	808733a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
 8087306:	2903      	cmp	r1, #3
 8087308:	d01a      	beq.n	8087340 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
 808730a:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 808730c:	bf14      	ite	ne
 808730e:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8087312:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8087316:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 808731a:	2101      	movs	r1, #1
 808731c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8087320:	7820      	ldrb	r0, [r4, #0]
 8087322:	f7ff ffa4 	bl	808726e <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 8087326:	7860      	ldrb	r0, [r4, #1]
 8087328:	f004 fed2 	bl	808c0d0 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 808732c:	7820      	ldrb	r0, [r4, #0]
 808732e:	f7ff ffb6 	bl	808729e <_ZL12readRegisterhh.isra.0>
 8087332:	78a3      	ldrb	r3, [r4, #2]
 8087334:	4118      	asrs	r0, r3
 8087336:	b280      	uxth	r0, r0
}
 8087338:	bd10      	pop	{r4, pc}
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 808733a:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 808733e:	e7ea      	b.n	8087316 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8087340:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 8087344:	e7e7      	b.n	8087316 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
 8087346:	2000      	movs	r0, #0
 8087348:	e7f6      	b.n	8087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>
	...

0808734c <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 808734c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087350:	460e      	mov	r6, r1
 8087352:	b088      	sub	sp, #32
 8087354:	4604      	mov	r4, r0
 8087356:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 8087358:	4668      	mov	r0, sp
 808735a:	2302      	movs	r3, #2
 808735c:	2200      	movs	r2, #0
 808735e:	f004 fa6b 	bl	808b838 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 8087362:	230a      	movs	r3, #10
 8087364:	2202      	movs	r2, #2
 8087366:	4631      	mov	r1, r6
 8087368:	a804      	add	r0, sp, #16
 808736a:	f004 fa65 	bl	808b838 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 808736e:	4668      	mov	r0, sp
 8087370:	f004 fa84 	bl	808b87c <_ZNK6String5toIntEv>
 8087374:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 8087376:	a804      	add	r0, sp, #16
 8087378:	f004 fa80 	bl	808b87c <_ZNK6String5toIntEv>
 808737c:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 808737e:	4668      	mov	r0, sp
 8087380:	f004 fa7c 	bl	808b87c <_ZNK6String5toIntEv>
 8087384:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8087386:	a804      	add	r0, sp, #16
 8087388:	f004 fa7d 	bl	808b886 <_ZNK6String7toFloatEv>
 808738c:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
 808738e:	4630      	mov	r0, r6
 8087390:	f006 f99e 	bl	808d6d0 <__aeabi_i2d>
 8087394:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 8087396:	4640      	mov	r0, r8
    latitude = whole_part;
 8087398:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 808739a:	f006 f9ab 	bl	808d6f4 <__aeabi_f2d>
    latitude += (frac_part)/60;
 808739e:	2200      	movs	r2, #0
 80873a0:	4b0d      	ldr	r3, [pc, #52]	; (80873d8 <_ZN3GPS15set_lat_decimalE6Stringc+0x8c>)
 80873a2:	f006 fb29 	bl	808d9f8 <__aeabi_ddiv>
 80873a6:	460b      	mov	r3, r1
 80873a8:	4602      	mov	r2, r0
 80873aa:	4639      	mov	r1, r7
 80873ac:	4630      	mov	r0, r6
 80873ae:	f006 f843 	bl	808d438 <__adddf3>
    if(nsString == 'S'){
 80873b2:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 80873b4:	bf0c      	ite	eq
 80873b6:	2300      	moveq	r3, #0
 80873b8:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    latitude += (frac_part)/60;
 80873bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
 80873c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    String frac_str = latString.substring(2,10);
 80873c4:	a804      	add	r0, sp, #16
 80873c6:	f004 f84b 	bl	808b460 <_ZN6StringD1Ev>
    String whole_str = latString.substring(0,2);
 80873ca:	4668      	mov	r0, sp
 80873cc:	f004 f848 	bl	808b460 <_ZN6StringD1Ev>
    }
}
 80873d0:	b008      	add	sp, #32
 80873d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80873d6:	bf00      	nop
 80873d8:	404e0000 	.word	0x404e0000

080873dc <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 80873dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80873e0:	460e      	mov	r6, r1
 80873e2:	b088      	sub	sp, #32
 80873e4:	4604      	mov	r4, r0
 80873e6:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 80873e8:	4668      	mov	r0, sp
 80873ea:	2303      	movs	r3, #3
 80873ec:	2200      	movs	r2, #0
 80873ee:	f004 fa23 	bl	808b838 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 80873f2:	230a      	movs	r3, #10
 80873f4:	2203      	movs	r2, #3
 80873f6:	4631      	mov	r1, r6
 80873f8:	a804      	add	r0, sp, #16
 80873fa:	f004 fa1d 	bl	808b838 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 80873fe:	4668      	mov	r0, sp
 8087400:	f004 fa3c 	bl	808b87c <_ZNK6String5toIntEv>
 8087404:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 8087406:	a804      	add	r0, sp, #16
 8087408:	f004 fa38 	bl	808b87c <_ZNK6String5toIntEv>
 808740c:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 808740e:	4668      	mov	r0, sp
 8087410:	f004 fa34 	bl	808b87c <_ZNK6String5toIntEv>
 8087414:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8087416:	a804      	add	r0, sp, #16
 8087418:	f004 fa35 	bl	808b886 <_ZNK6String7toFloatEv>
 808741c:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
 808741e:	4630      	mov	r0, r6
 8087420:	f006 f956 	bl	808d6d0 <__aeabi_i2d>
 8087424:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 8087426:	4640      	mov	r0, r8
    longitude = whole_part;
 8087428:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 808742a:	f006 f963 	bl	808d6f4 <__aeabi_f2d>
    longitude += (frac_part)/60;
 808742e:	2200      	movs	r2, #0
 8087430:	4b0c      	ldr	r3, [pc, #48]	; (8087464 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 8087432:	f006 fae1 	bl	808d9f8 <__aeabi_ddiv>
 8087436:	4602      	mov	r2, r0
 8087438:	460b      	mov	r3, r1
 808743a:	4630      	mov	r0, r6
 808743c:	4639      	mov	r1, r7
 808743e:	f005 fffb 	bl	808d438 <__adddf3>
    if(ewString == 'E'){
 8087442:	3d45      	subs	r5, #69	; 0x45
 8087444:	bf18      	it	ne
 8087446:	2501      	movne	r5, #1
    longitude += (frac_part)/60;
 8087448:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
 808744c:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    String frac_str = longString.substring(3,10);
 8087450:	a804      	add	r0, sp, #16
 8087452:	f004 f805 	bl	808b460 <_ZN6StringD1Ev>
    String whole_str = longString.substring(0,3);
 8087456:	4668      	mov	r0, sp
 8087458:	f004 f802 	bl	808b460 <_ZN6StringD1Ev>
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 808745c:	b008      	add	sp, #32
 808745e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087462:	bf00      	nop
 8087464:	404e0000 	.word	0x404e0000

08087468 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 8087468:	b510      	push	{r4, lr}
 808746a:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 808746c:	4608      	mov	r0, r1
 808746e:	f004 fa05 	bl	808b87c <_ZNK6String5toIntEv>
 8087472:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 8087474:	bd10      	pop	{r4, pc}
	...

08087478 <_ZN3GPS23set_horizontalDillutionE6String>:

void GPS::set_horizontalDillution(String hdString){
 8087478:	b510      	push	{r4, lr}
 808747a:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 808747c:	4608      	mov	r0, r1
 808747e:	f004 fa02 	bl	808b886 <_ZNK6String7toFloatEv>
    temp_float *= 10;
 8087482:	4902      	ldr	r1, [pc, #8]	; (808748c <_ZN3GPS23set_horizontalDillutionE6String+0x14>)
 8087484:	f006 fde4 	bl	808e050 <__aeabi_fmul>

    horizontal_dillution = temp_float;
 8087488:	6320      	str	r0, [r4, #48]	; 0x30
}
 808748a:	bd10      	pop	{r4, pc}
 808748c:	41200000 	.word	0x41200000

08087490 <_ZN3GPS12get_latitudeEv>:

double GPS::get_latitude(void){
    return latitude;
}
 8087490:	f100 0108 	add.w	r1, r0, #8
 8087494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8087498:	4770      	bx	lr

0808749a <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 808749a:	f100 0110 	add.w	r1, r0, #16
 808749e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80874a2:	4770      	bx	lr

080874a4 <_ZN3GPS23get_horizontalDillutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDillution(void){
 80874a4:	b508      	push	{r3, lr}
    return horizontal_dillution;
 80874a6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80874a8:	f006 ff98 	bl	808e3dc <__aeabi_f2iz>
}
 80874ac:	bd08      	pop	{r3, pc}

080874ae <_ZN3GPS17get_latitudeWholeEv>:

int16_t GPS::get_latitudeWhole(void){
    return latWhole;
}
 80874ae:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 80874b2:	4770      	bx	lr

080874b4 <_ZN3GPS16get_latitudeFracEv>:
int16_t GPS::get_latitudeFrac(void){
    return latFrac;
}
 80874b4:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 80874b8:	4770      	bx	lr

080874ba <_ZN3GPS18get_longitudeWholeEv>:
int16_t GPS::get_longitudeWhole(void){
    return longWhole;
}
 80874ba:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
 80874be:	4770      	bx	lr

080874c0 <_ZN3GPS17get_longitudeFracEv>:
int16_t GPS::get_longitudeFrac(void){
    return longFrac;
}
 80874c0:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 80874c4:	4770      	bx	lr

080874c6 <_ZN3GPS15get_nsIndicatorEv>:

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 80874c6:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 80874ca:	4770      	bx	lr

080874cc <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 80874cc:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 80874d0:	4770      	bx	lr

080874d2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80874d2:	6803      	ldr	r3, [r0, #0]
 80874d4:	b2c9      	uxtb	r1, r1
 80874d6:	689b      	ldr	r3, [r3, #8]
 80874d8:	4718      	bx	r3

080874da <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 80874da:	4770      	bx	lr

080874dc <_ZN13Telaire_T67135beginEv>:

bool Telaire_T6713::begin()
{
 80874dc:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("Begin Telaire_T6713");
  #endif
  // start I2C
  Wire.beginTransmission(ADDR_6713);
 80874de:	f005 ff43 	bl	808d368 <_Z19__fetch_global_Wirev>
 80874e2:	2115      	movs	r1, #21
 80874e4:	f005 fce0 	bl	808cea8 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 80874e8:	f005 ff3e 	bl	808d368 <_Z19__fetch_global_Wirev>
 80874ec:	2104      	movs	r1, #4
 80874ee:	f7ff fff0 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 80874f2:	f005 ff39 	bl	808d368 <_Z19__fetch_global_Wirev>
 80874f6:	2113      	movs	r1, #19
 80874f8:	f7ff ffeb 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 80874fc:	f005 ff34 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087500:	218b      	movs	r1, #139	; 0x8b
 8087502:	f7ff ffe6 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 8087506:	f005 ff2f 	bl	808d368 <_Z19__fetch_global_Wirev>
 808750a:	2100      	movs	r1, #0
 808750c:	f7ff ffe1 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 8087510:	f005 ff2a 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087514:	2101      	movs	r1, #1
 8087516:	f7ff ffdc 	bl	80874d2 <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 808751a:	f005 ff25 	bl	808d368 <_Z19__fetch_global_Wirev>
 808751e:	f005 fce2 	bl	808cee6 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 8087522:	f005 ff21 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087526:	2204      	movs	r2, #4
 8087528:	2115      	movs	r1, #21
 808752a:	f005 fcb6 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>
  while(Wire.available() == 0);
 808752e:	f005 ff1b 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087532:	6803      	ldr	r3, [r0, #0]
 8087534:	691b      	ldr	r3, [r3, #16]
 8087536:	4798      	blx	r3
 8087538:	2800      	cmp	r0, #0
 808753a:	d0f8      	beq.n	808752e <_ZN13Telaire_T67135beginEv+0x52>
  func_code = Wire.read();
 808753c:	f005 ff14 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087540:	6803      	ldr	r3, [r0, #0]
 8087542:	695b      	ldr	r3, [r3, #20]
 8087544:	4798      	blx	r3
  byte_count = Wire.read();
 8087546:	f005 ff0f 	bl	808d368 <_Z19__fetch_global_Wirev>
 808754a:	6803      	ldr	r3, [r0, #0]
 808754c:	695b      	ldr	r3, [r3, #20]
 808754e:	4798      	blx	r3
  MSB = Wire.read();
 8087550:	f005 ff0a 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087554:	6803      	ldr	r3, [r0, #0]
 8087556:	695b      	ldr	r3, [r3, #20]
 8087558:	4798      	blx	r3
 808755a:	4604      	mov	r4, r0
  LSB = Wire.read();
 808755c:	f005 ff04 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087560:	6803      	ldr	r3, [r0, #0]
  Serial.print("MSB: ");
  Serial.println(MSB);
  Serial.print("LSB: ");
  Serial.println(LSB);
  #endif
  int ppm = MSB*256 + LSB;
 8087562:	b2e4      	uxtb	r4, r4
  LSB = Wire.read();
 8087564:	695b      	ldr	r3, [r3, #20]
 8087566:	4798      	blx	r3
  int ppm = MSB*256 + LSB;
 8087568:	b2c0      	uxtb	r0, r0
 808756a:	eb00 2004 	add.w	r0, r0, r4, lsl #8
  {
    return false;
  }

  return true;
}
 808756e:	3800      	subs	r0, #0
 8087570:	bf18      	it	ne
 8087572:	2001      	movne	r0, #1
 8087574:	bd10      	pop	{r4, pc}

08087576 <_ZN13Telaire_T67138queryPPMEv>:
// send request to read current gas measurement in ppm
// return status: 0 success
void Telaire_T6713::queryPPM()
{
 8087576:	b508      	push	{r3, lr}
  byte_count = 0;
  MSB = 0;
  LSB = 0;

  // start I2C
  Wire.beginTransmission(ADDR_6713);
 8087578:	f005 fef6 	bl	808d368 <_Z19__fetch_global_Wirev>
 808757c:	2115      	movs	r1, #21
 808757e:	f005 fc93 	bl	808cea8 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 8087582:	f005 fef1 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087586:	2104      	movs	r1, #4
 8087588:	f7ff ffa3 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 808758c:	f005 feec 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087590:	2113      	movs	r1, #19
 8087592:	f7ff ff9e 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 8087596:	f005 fee7 	bl	808d368 <_Z19__fetch_global_Wirev>
 808759a:	218b      	movs	r1, #139	; 0x8b
 808759c:	f7ff ff99 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 80875a0:	f005 fee2 	bl	808d368 <_Z19__fetch_global_Wirev>
 80875a4:	2100      	movs	r1, #0
 80875a6:	f7ff ff94 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 80875aa:	f005 fedd 	bl	808d368 <_Z19__fetch_global_Wirev>
 80875ae:	2101      	movs	r1, #1
 80875b0:	f7ff ff8f 	bl	80874d2 <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 80875b4:	f005 fed8 	bl	808d368 <_Z19__fetch_global_Wirev>
  Serial.println(LSB);
  int ppm = MSB*256 + LSB;
  Serial.println(ppm);*/


}
 80875b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.endTransmission();
 80875bc:	f005 bc93 	b.w	808cee6 <_ZN7TwoWire15endTransmissionEv>

080875c0 <_ZN13Telaire_T67137readPPMEv>:

// read report of current gas measurement in ppm
int Telaire_T6713::readPPM()
{
 80875c0:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("reading gas ppm");
  #endif

  queryPPM();
 80875c2:	f7ff ffd8 	bl	8087576 <_ZN13Telaire_T67138queryPPMEv>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 80875c6:	f005 fecf 	bl	808d368 <_Z19__fetch_global_Wirev>
 80875ca:	2204      	movs	r2, #4
 80875cc:	2115      	movs	r1, #21
 80875ce:	f005 fc64 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>

   while(Wire.available() == 0);
 80875d2:	f005 fec9 	bl	808d368 <_Z19__fetch_global_Wirev>
 80875d6:	6803      	ldr	r3, [r0, #0]
 80875d8:	691b      	ldr	r3, [r3, #16]
 80875da:	4798      	blx	r3
 80875dc:	2800      	cmp	r0, #0
 80875de:	d0f8      	beq.n	80875d2 <_ZN13Telaire_T67137readPPMEv+0x12>
   func_code = Wire.read();
 80875e0:	f005 fec2 	bl	808d368 <_Z19__fetch_global_Wirev>
 80875e4:	6803      	ldr	r3, [r0, #0]
 80875e6:	695b      	ldr	r3, [r3, #20]
 80875e8:	4798      	blx	r3
   byte_count = Wire.read();
 80875ea:	f005 febd 	bl	808d368 <_Z19__fetch_global_Wirev>
 80875ee:	6803      	ldr	r3, [r0, #0]
 80875f0:	695b      	ldr	r3, [r3, #20]
 80875f2:	4798      	blx	r3
   MSB = Wire.read();
 80875f4:	f005 feb8 	bl	808d368 <_Z19__fetch_global_Wirev>
 80875f8:	6803      	ldr	r3, [r0, #0]
 80875fa:	695b      	ldr	r3, [r3, #20]
 80875fc:	4798      	blx	r3
 80875fe:	4604      	mov	r4, r0
   LSB = Wire.read();
 8087600:	f005 feb2 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087604:	6803      	ldr	r3, [r0, #0]
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 8087606:	0224      	lsls	r4, r4, #8
   LSB = Wire.read();
 8087608:	695b      	ldr	r3, [r3, #20]
 808760a:	4798      	blx	r3
   return ((MSB<<8)|LSB);
 808760c:	b2a4      	uxth	r4, r4
 808760e:	b2c0      	uxtb	r0, r0
}
 8087610:	4320      	orrs	r0, r4
 8087612:	bd10      	pop	{r4, pc}

08087614 <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 8087614:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 8087616:	f005 fea7 	bl	808d368 <_Z19__fetch_global_Wirev>
 808761a:	2115      	movs	r1, #21
 808761c:	f005 fc44 	bl	808cea8 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 8087620:	f005 fea2 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087624:	2105      	movs	r1, #5
 8087626:	f7ff ff54 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 808762a:	f005 fe9d 	bl	808d368 <_Z19__fetch_global_Wirev>
 808762e:	2103      	movs	r1, #3
 8087630:	f7ff ff4f 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 8087634:	f005 fe98 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087638:	21e8      	movs	r1, #232	; 0xe8
 808763a:	f7ff ff4a 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 808763e:	f005 fe93 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087642:	21ff      	movs	r1, #255	; 0xff
 8087644:	f7ff ff45 	bl	80874d2 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 8087648:	f005 fe8e 	bl	808d368 <_Z19__fetch_global_Wirev>
 808764c:	2100      	movs	r1, #0
 808764e:	f7ff ff40 	bl	80874d2 <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 8087652:	f005 fe89 	bl	808d368 <_Z19__fetch_global_Wirev>
}
 8087656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   Wire.endTransmission();
 808765a:	f005 bc44 	b.w	808cee6 <_ZN7TwoWire15endTransmissionEv>

0808765e <_ZN13Telaire_T671315disableABCLogicEv>:

void Telaire_T6713::disableABCLogic()
{
 808765e:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8087660:	f005 fe82 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087664:	2115      	movs	r1, #21
 8087666:	f005 fc1f 	bl	808cea8 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 808766a:	f005 fe7d 	bl	808d368 <_Z19__fetch_global_Wirev>
 808766e:	2105      	movs	r1, #5
 8087670:	f7ff ff2f 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8087674:	f005 fe78 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087678:	2103      	movs	r1, #3
 808767a:	f7ff ff2a 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 808767e:	f005 fe73 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087682:	21ee      	movs	r1, #238	; 0xee
 8087684:	f7ff ff25 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 8087688:	f005 fe6e 	bl	808d368 <_Z19__fetch_global_Wirev>
 808768c:	2100      	movs	r1, #0
 808768e:	f7ff ff20 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8087692:	f005 fe69 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087696:	2100      	movs	r1, #0
 8087698:	f7ff ff1b 	bl	80874d2 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 808769c:	f005 fe64 	bl	808d368 <_Z19__fetch_global_Wirev>
}
 80876a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 80876a4:	f005 bc1f 	b.w	808cee6 <_ZN7TwoWire15endTransmissionEv>

080876a8 <_ZN13Telaire_T671314enableABCLogicEv>:

void Telaire_T6713::enableABCLogic()
{
 80876a8:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 80876aa:	f005 fe5d 	bl	808d368 <_Z19__fetch_global_Wirev>
 80876ae:	2115      	movs	r1, #21
 80876b0:	f005 fbfa 	bl	808cea8 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80876b4:	f005 fe58 	bl	808d368 <_Z19__fetch_global_Wirev>
 80876b8:	2105      	movs	r1, #5
 80876ba:	f7ff ff0a 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80876be:	f005 fe53 	bl	808d368 <_Z19__fetch_global_Wirev>
 80876c2:	2103      	movs	r1, #3
 80876c4:	f7ff ff05 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 80876c8:	f005 fe4e 	bl	808d368 <_Z19__fetch_global_Wirev>
 80876cc:	21ee      	movs	r1, #238	; 0xee
 80876ce:	f7ff ff00 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 80876d2:	f005 fe49 	bl	808d368 <_Z19__fetch_global_Wirev>
 80876d6:	21ff      	movs	r1, #255	; 0xff
 80876d8:	f7ff fefb 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80876dc:	f005 fe44 	bl	808d368 <_Z19__fetch_global_Wirev>
 80876e0:	2100      	movs	r1, #0
 80876e2:	f7ff fef6 	bl	80874d2 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80876e6:	f005 fe3f 	bl	808d368 <_Z19__fetch_global_Wirev>
}
 80876ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 80876ee:	f005 bbfa 	b.w	808cee6 <_ZN7TwoWire15endTransmissionEv>
	...

080876f4 <_ZN13Telaire_T67139calibrateEi>:


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 80876f4:	b508      	push	{r3, lr}
    if(debugging){
 80876f6:	b121      	cbz	r1, 8087702 <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 80876f8:	f005 f9dc 	bl	808cab4 <_Z16_fetch_usbserialv>
 80876fc:	4913      	ldr	r1, [pc, #76]	; (808774c <_ZN13Telaire_T67139calibrateEi+0x58>)
 80876fe:	f004 f91e 	bl	808b93e <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 8087702:	f005 fe31 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087706:	2115      	movs	r1, #21
 8087708:	f005 fbce 	bl	808cea8 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 808770c:	f005 fe2c 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087710:	2105      	movs	r1, #5
 8087712:	f7ff fede 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8087716:	f005 fe27 	bl	808d368 <_Z19__fetch_global_Wirev>
 808771a:	2103      	movs	r1, #3
 808771c:	f7ff fed9 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 8087720:	f005 fe22 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087724:	21ec      	movs	r1, #236	; 0xec
 8087726:	f7ff fed4 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 808772a:	f005 fe1d 	bl	808d368 <_Z19__fetch_global_Wirev>
 808772e:	21ff      	movs	r1, #255	; 0xff
 8087730:	f7ff fecf 	bl	80874d2 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8087734:	f005 fe18 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087738:	2100      	movs	r1, #0
 808773a:	f7ff feca 	bl	80874d2 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 808773e:	f005 fe13 	bl	808d368 <_Z19__fetch_global_Wirev>
}
 8087742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 8087746:	f005 bbce 	b.w	808cee6 <_ZN7TwoWire15endTransmissionEv>
 808774a:	bf00      	nop
 808774c:	08094040 	.word	0x08094040

08087750 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8087750:	b538      	push	{r3, r4, r5, lr}
 8087752:	4605      	mov	r5, r0
    if (base == 0) {
 8087754:	b942      	cbnz	r2, 8087768 <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
 8087756:	6803      	ldr	r3, [r0, #0]
 8087758:	689b      	ldr	r3, [r3, #8]
 808775a:	4798      	blx	r3
        return printNumber(val, base) + t;
 808775c:	4604      	mov	r4, r0
        n += println();
 808775e:	4628      	mov	r0, r5
 8087760:	f004 f8e1 	bl	808b926 <_ZN5Print7printlnEv>
    }
 8087764:	4420      	add	r0, r4
 8087766:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 8087768:	b2d2      	uxtb	r2, r2
 808776a:	f004 f8fc 	bl	808b966 <_ZN5Print11printNumberEmh>
 808776e:	e7f5      	b.n	808775c <_ZN5Print7printlnIhLi0EEEjT_i+0xc>

08087770 <_ZN13Telaire_T671310readStatusEi>:
{
 8087770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087774:	460c      	mov	r4, r1
  Wire.beginTransmission(ADDR_6713);
 8087776:	f005 fdf7 	bl	808d368 <_Z19__fetch_global_Wirev>
 808777a:	2115      	movs	r1, #21
 808777c:	f005 fb94 	bl	808cea8 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x04);
 8087780:	f005 fdf2 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087784:	2104      	movs	r1, #4
 8087786:	f7ff fea4 	bl	80874d2 <_ZN7TwoWire5writeEi>
  Wire.write(0x13);
 808778a:	f005 fded 	bl	808d368 <_Z19__fetch_global_Wirev>
 808778e:	2113      	movs	r1, #19
 8087790:	f7ff fe9f 	bl	80874d2 <_ZN7TwoWire5writeEi>
  Wire.write(0x8A);
 8087794:	f005 fde8 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087798:	218a      	movs	r1, #138	; 0x8a
 808779a:	f7ff fe9a 	bl	80874d2 <_ZN7TwoWire5writeEi>
  Wire.write(0x00);
 808779e:	f005 fde3 	bl	808d368 <_Z19__fetch_global_Wirev>
 80877a2:	2100      	movs	r1, #0
 80877a4:	f7ff fe95 	bl	80874d2 <_ZN7TwoWire5writeEi>
  Wire.write(0x01);
 80877a8:	f005 fdde 	bl	808d368 <_Z19__fetch_global_Wirev>
 80877ac:	2101      	movs	r1, #1
 80877ae:	f7ff fe90 	bl	80874d2 <_ZN7TwoWire5writeEi>
   Wire.endTransmission();
 80877b2:	f005 fdd9 	bl	808d368 <_Z19__fetch_global_Wirev>
 80877b6:	f005 fb96 	bl	808cee6 <_ZN7TwoWire15endTransmissionEv>
   if(debugging){
 80877ba:	b124      	cbz	r4, 80877c6 <_ZN13Telaire_T671310readStatusEi+0x56>
       Serial.println("reading CO2 sensor status");
 80877bc:	f005 f97a 	bl	808cab4 <_Z16_fetch_usbserialv>
 80877c0:	492b      	ldr	r1, [pc, #172]	; (8087870 <_ZN13Telaire_T671310readStatusEi+0x100>)
 80877c2:	f004 f8bc 	bl	808b93e <_ZN5Print7printlnEPKc>
   Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 80877c6:	f005 fdcf 	bl	808d368 <_Z19__fetch_global_Wirev>
 80877ca:	2204      	movs	r2, #4
 80877cc:	2115      	movs	r1, #21
 80877ce:	f005 fb64 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>
   while(Wire.available() == 0);
 80877d2:	f005 fdc9 	bl	808d368 <_Z19__fetch_global_Wirev>
 80877d6:	6803      	ldr	r3, [r0, #0]
 80877d8:	691b      	ldr	r3, [r3, #16]
 80877da:	4798      	blx	r3
 80877dc:	2800      	cmp	r0, #0
 80877de:	d0f8      	beq.n	80877d2 <_ZN13Telaire_T671310readStatusEi+0x62>
   func_code = Wire.read();
 80877e0:	f005 fdc2 	bl	808d368 <_Z19__fetch_global_Wirev>
 80877e4:	6803      	ldr	r3, [r0, #0]
 80877e6:	695b      	ldr	r3, [r3, #20]
 80877e8:	4798      	blx	r3
 80877ea:	4680      	mov	r8, r0
   byte_count = Wire.read();
 80877ec:	f005 fdbc 	bl	808d368 <_Z19__fetch_global_Wirev>
 80877f0:	6803      	ldr	r3, [r0, #0]
 80877f2:	695b      	ldr	r3, [r3, #20]
 80877f4:	4798      	blx	r3
 80877f6:	4607      	mov	r7, r0
   MSB = Wire.read();
 80877f8:	f005 fdb6 	bl	808d368 <_Z19__fetch_global_Wirev>
 80877fc:	6803      	ldr	r3, [r0, #0]
 80877fe:	695b      	ldr	r3, [r3, #20]
 8087800:	4798      	blx	r3
 8087802:	4606      	mov	r6, r0
   LSB = Wire.read();
 8087804:	f005 fdb0 	bl	808d368 <_Z19__fetch_global_Wirev>
 8087808:	6803      	ldr	r3, [r0, #0]
 808780a:	695b      	ldr	r3, [r3, #20]
 808780c:	4798      	blx	r3
 808780e:	4605      	mov	r5, r0
   if(debugging){
 8087810:	b364      	cbz	r4, 808786c <_ZN13Telaire_T671310readStatusEi+0xfc>
       Serial.print("Func code: ");
 8087812:	f005 f94f 	bl	808cab4 <_Z16_fetch_usbserialv>
 8087816:	4917      	ldr	r1, [pc, #92]	; (8087874 <_ZN13Telaire_T671310readStatusEi+0x104>)
 8087818:	f004 f87e 	bl	808b918 <_ZN5Print5printEPKc>
       Serial.println(func_code, HEX);
 808781c:	f005 f94a 	bl	808cab4 <_Z16_fetch_usbserialv>
 8087820:	2210      	movs	r2, #16
 8087822:	fa5f f188 	uxtb.w	r1, r8
 8087826:	f7ff ff93 	bl	8087750 <_ZN5Print7printlnIhLi0EEEjT_i>
       Serial.print("byte count: ");
 808782a:	f005 f943 	bl	808cab4 <_Z16_fetch_usbserialv>
 808782e:	4912      	ldr	r1, [pc, #72]	; (8087878 <_ZN13Telaire_T671310readStatusEi+0x108>)
 8087830:	f004 f872 	bl	808b918 <_ZN5Print5printEPKc>
       Serial.println(byte_count, HEX);
 8087834:	f005 f93e 	bl	808cab4 <_Z16_fetch_usbserialv>
 8087838:	2210      	movs	r2, #16
 808783a:	b2f9      	uxtb	r1, r7
 808783c:	f7ff ff88 	bl	8087750 <_ZN5Print7printlnIhLi0EEEjT_i>
       Serial.print("MSB: ");
 8087840:	f005 f938 	bl	808cab4 <_Z16_fetch_usbserialv>
 8087844:	490d      	ldr	r1, [pc, #52]	; (808787c <_ZN13Telaire_T671310readStatusEi+0x10c>)
 8087846:	f004 f867 	bl	808b918 <_ZN5Print5printEPKc>
       Serial.println(MSB, BIN);
 808784a:	f005 f933 	bl	808cab4 <_Z16_fetch_usbserialv>
 808784e:	2202      	movs	r2, #2
 8087850:	b2f1      	uxtb	r1, r6
 8087852:	f7ff ff7d 	bl	8087750 <_ZN5Print7printlnIhLi0EEEjT_i>
       Serial.print("LSB: ");
 8087856:	f005 f92d 	bl	808cab4 <_Z16_fetch_usbserialv>
 808785a:	4909      	ldr	r1, [pc, #36]	; (8087880 <_ZN13Telaire_T671310readStatusEi+0x110>)
 808785c:	f004 f85c 	bl	808b918 <_ZN5Print5printEPKc>
       Serial.println(LSB, BIN);
 8087860:	f005 f928 	bl	808cab4 <_Z16_fetch_usbserialv>
 8087864:	2202      	movs	r2, #2
 8087866:	b2e9      	uxtb	r1, r5
 8087868:	f7ff ff72 	bl	8087750 <_ZN5Print7printlnIhLi0EEEjT_i>
}
 808786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087870:	08094050 	.word	0x08094050
 8087874:	0809406a 	.word	0x0809406a
 8087878:	08094076 	.word	0x08094076
 808787c:	08094083 	.word	0x08094083
 8087880:	08094089 	.word	0x08094089

08087884 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8087884:	b510      	push	{r4, lr}
 8087886:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8087888:	3028      	adds	r0, #40	; 0x28
 808788a:	f001 f9bf 	bl	8088c0c <_ZN8FatCache4syncEv>
 808788e:	b128      	cbz	r0, 808789c <_ZN9FatVolume9cacheSyncEv+0x18>
 8087890:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 8087894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync();
 8087898:	f001 b9b8 	b.w	8088c0c <_ZN8FatCache4syncEv>
  }
 808789c:	bd10      	pop	{r4, pc}

0808789e <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808789e:	1e41      	subs	r1, r0, #1
 80878a0:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
 80878a4:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80878a6:	0842      	lsrs	r2, r0, #1
 80878a8:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 80878ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80878b0:	4410      	add	r0, r2
  for (uint8_t i = 0; i < 11; i++) {
 80878b2:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80878b4:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  for (uint8_t i = 0; i < 11; i++) {
 80878b8:	d1f5      	bne.n	80878a6 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
 80878ba:	4770      	bx	lr

080878bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 80878bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80878c0:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 80878c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80878c6:	2b20      	cmp	r3, #32
 80878c8:	d0fa      	beq.n	80878c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
 80878ca:	2400      	movs	r4, #0
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80878cc:	4d6a      	ldr	r5, [pc, #424]	; (8087a78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
  fname->lfn = path;
 80878ce:	608e      	str	r6, [r1, #8]
    c = path[len];
 80878d0:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
 80878d2:	b1c3      	cbz	r3, 8087906 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
 80878d4:	2b2f      	cmp	r3, #47	; 0x2f
 80878d6:	d016      	beq.n	8087906 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80878d8:	2b5c      	cmp	r3, #92	; 0x5c
 80878da:	d102      	bne.n	80878e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 80878dc:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
 80878de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80878e2:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 80878e6:	b2c0      	uxtb	r0, r0
 80878e8:	281d      	cmp	r0, #29
 80878ea:	d803      	bhi.n	80878f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
 80878ec:	fa25 f000 	lsr.w	r0, r5, r0
 80878f0:	07c0      	lsls	r0, r0, #31
 80878f2:	d4f3      	bmi.n	80878dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80878f4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 80878f8:	283c      	cmp	r0, #60	; 0x3c
 80878fa:	d0ef      	beq.n	80878dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
 80878fc:	3b20      	subs	r3, #32
 80878fe:	2b5e      	cmp	r3, #94	; 0x5e
 8087900:	d8ec      	bhi.n	80878dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
 8087902:	3401      	adds	r4, #1
    c = path[len];
 8087904:	e7e4      	b.n	80878d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
 8087906:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
 8087908:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 808790a:	4607      	mov	r7, r0
 808790c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8087910:	2d20      	cmp	r5, #32
 8087912:	d0fa      	beq.n	808790a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
 8087914:	2d2f      	cmp	r5, #47	; 0x2f
 8087916:	d0f8      	beq.n	808790a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
 8087918:	6017      	str	r7, [r2, #0]
  while (len) {
 808791a:	b14c      	cbz	r4, 8087930 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
 808791c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8087920:	2a2e      	cmp	r2, #46	; 0x2e
 8087922:	d001      	beq.n	8087928 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
 8087924:	2a20      	cmp	r2, #32
 8087926:	d101      	bne.n	808792c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
 8087928:	3c01      	subs	r4, #1
  while (len) {
 808792a:	e7f6      	b.n	808791a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
 808792c:	2cff      	cmp	r4, #255	; 0xff
 808792e:	dcd5      	bgt.n	80878dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
 8087930:	2020      	movs	r0, #32
  fname->len = len;
 8087932:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
 8087934:	f101 030d 	add.w	r3, r1, #13
 8087938:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
 808793c:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
 8087940:	4293      	cmp	r3, r2
 8087942:	d1fb      	bne.n	808793c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8087944:	f04f 0800 	mov.w	r8, #0
 8087948:	f816 3008 	ldrb.w	r3, [r6, r8]
 808794c:	2b2e      	cmp	r3, #46	; 0x2e
 808794e:	d001      	beq.n	8087954 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
 8087950:	2b20      	cmp	r3, #32
 8087952:	d102      	bne.n	808795a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
 8087954:	f108 0801 	add.w	r8, r8, #1
 8087958:	e7f6      	b.n	8087948 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
 808795a:	fab8 f088 	clz	r0, r8
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808795e:	1e65      	subs	r5, r4, #1
  is83 = !si;
 8087960:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8087962:	1c6b      	adds	r3, r5, #1
 8087964:	d002      	beq.n	808796c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
 8087966:	5d73      	ldrb	r3, [r6, r5]
 8087968:	2b2e      	cmp	r3, #46	; 0x2e
 808796a:	d114      	bne.n	8087996 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 808796c:	f04f 0900 	mov.w	r9, #0
 8087970:	2707      	movs	r7, #7
 8087972:	464a      	mov	r2, r9
 8087974:	46ca      	mov	sl, r9
 8087976:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
 808797a:	45a0      	cmp	r8, r4
 808797c:	da69      	bge.n	8087a52 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
 808797e:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
 8087982:	2b20      	cmp	r3, #32
 8087984:	d003      	beq.n	808798e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
 8087986:	2b2e      	cmp	r3, #46	; 0x2e
 8087988:	d107      	bne.n	808799a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 808798a:	45a8      	cmp	r8, r5
 808798c:	d012      	beq.n	80879b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
 808798e:	2000      	movs	r0, #0
  for (; si < len; si++) {
 8087990:	f108 0801 	add.w	r8, r8, #1
 8087994:	e7f1      	b.n	808797a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8087996:	3d01      	subs	r5, #1
 8087998:	e7e3      	b.n	8087962 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
 808799a:	2b22      	cmp	r3, #34	; 0x22
 808799c:	d008      	beq.n	80879b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
 808799e:	2b7c      	cmp	r3, #124	; 0x7c
 80879a0:	d006      	beq.n	80879b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80879a2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80879a6:	f1bc 0f05 	cmp.w	ip, #5
 80879aa:	d80b      	bhi.n	80879c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
 80879ac:	2b2d      	cmp	r3, #45	; 0x2d
 80879ae:	d013      	beq.n	80879d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
 80879b0:	45a8      	cmp	r8, r5
 80879b2:	d15c      	bne.n	8087a6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
 80879b4:	2f0a      	cmp	r7, #10
 80879b6:	d04b      	beq.n	8087a50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 80879b8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 80879ba:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 80879bc:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80879be:	f04f 0e10 	mov.w	lr, #16
 80879c2:	e7e5      	b.n	8087990 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
 80879c4:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80879c8:	f1bc 0f05 	cmp.w	ip, #5
 80879cc:	d9f0      	bls.n	80879b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
 80879ce:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 80879d2:	f1bc 0f02 	cmp.w	ip, #2
 80879d6:	d9eb      	bls.n	80879b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
 80879d8:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80879dc:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80879e0:	d8e6      	bhi.n	80879b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
 80879e2:	45a8      	cmp	r8, r5
 80879e4:	d0e6      	beq.n	80879b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
 80879e6:	42ba      	cmp	r2, r7
 80879e8:	d830      	bhi.n	8087a4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
 80879ea:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80879ee:	f1bc 0f19 	cmp.w	ip, #25
 80879f2:	d81a      	bhi.n	8087a2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
 80879f4:	3b20      	subs	r3, #32
        lc |= bit;
 80879f6:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
 80879fa:	b2db      	uxtb	r3, r3
        lc |= bit;
 80879fc:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
 8087a00:	f102 0c01 	add.w	ip, r2, #1
 8087a04:	fa5f fc8c 	uxtb.w	ip, ip
 8087a08:	440a      	add	r2, r1
      if (i < 7) {
 8087a0a:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
 8087a0e:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
 8087a10:	d801      	bhi.n	8087a16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
 8087a12:	f881 c00c 	strb.w	ip, [r1, #12]
 8087a16:	4662      	mov	r2, ip
 8087a18:	e7ba      	b.n	8087990 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
 8087a1a:	45a8      	cmp	r8, r5
 8087a1c:	dc18      	bgt.n	8087a50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 8087a1e:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 8087a20:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8087a22:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8087a24:	f04f 0e10 	mov.w	lr, #16
 8087a28:	e7b1      	b.n	808798e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
 8087a2a:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8087a2e:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8087a32:	bf98      	it	ls
 8087a34:	ea4e 0a0a 	orrls.w	sl, lr, sl
 8087a38:	e7e2      	b.n	8087a00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8087a3a:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
 8087a3c:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8087a3e:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8087a40:	4419      	add	r1, r3
 8087a42:	237e      	movs	r3, #126	; 0x7e
 8087a44:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8087a46:	2331      	movs	r3, #49	; 0x31
 8087a48:	738b      	strb	r3, [r1, #14]
 8087a4a:	e748      	b.n	80878de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
 8087a4c:	2f0a      	cmp	r7, #10
 8087a4e:	d1e4      	bne.n	8087a1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
 8087a50:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
 8087a52:	7b4b      	ldrb	r3, [r1, #13]
 8087a54:	2b20      	cmp	r3, #32
 8087a56:	f43f af41 	beq.w	80878dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
 8087a5a:	2800      	cmp	r0, #0
 8087a5c:	d0ed      	beq.n	8087a3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8087a5e:	ea1a 0f09 	tst.w	sl, r9
 8087a62:	bf18      	it	ne
 8087a64:	f04f 0902 	movne.w	r9, #2
 8087a68:	f881 9000 	strb.w	r9, [r1]
 8087a6c:	e737      	b.n	80878de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
 8087a6e:	42ba      	cmp	r2, r7
 8087a70:	d8ec      	bhi.n	8087a4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
 8087a72:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
 8087a74:	2000      	movs	r0, #0
 8087a76:	e7c3      	b.n	8087a00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
 8087a78:	31000101 	.word	0x31000101

08087a7c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8087a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8087a80:	4606      	mov	r6, r0
 8087a82:	460c      	mov	r4, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8087a84:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8087a86:	277e      	movs	r7, #126	; 0x7e
  uint8_t pos = fname->seqPos;;
 8087a88:	f891 900c 	ldrb.w	r9, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087a8c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8087a90:	6861      	ldr	r1, [r4, #4]
 8087a92:	68a2      	ldr	r2, [r4, #8]
 8087a94:	186b      	adds	r3, r5, r1
 8087a96:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8087a98:	4411      	add	r1, r2
 8087a9a:	4291      	cmp	r1, r2
 8087a9c:	d006      	beq.n	8087aac <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
 8087a9e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8087aa2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8087aa6:	4043      	eors	r3, r0
 8087aa8:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8087aaa:	e7f6      	b.n	8087a9a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
 8087aac:	f1b9 0f03 	cmp.w	r9, #3
 8087ab0:	bf28      	it	cs
 8087ab2:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087ab6:	f109 0204 	add.w	r2, r9, #4
 8087aba:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8087abc:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087ac0:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087ac2:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087ac4:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087ac6:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087ac8:	bf94      	ite	ls
 8087aca:	3130      	addls	r1, #48	; 0x30
 8087acc:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087ace:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087ad0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8087ad2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087ad6:	d1f1      	bne.n	8087abc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
 8087ad8:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
 8087adc:	2100      	movs	r1, #0
 8087ade:	4630      	mov	r0, r6
 8087ae0:	735f      	strb	r7, [r3, #13]
 8087ae2:	f000 fe96 	bl	8088812 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 8087ae6:	2101      	movs	r1, #1
 8087ae8:	4630      	mov	r0, r6
 8087aea:	f000 fe73 	bl	80887d4 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8087aee:	4601      	mov	r1, r0
 8087af0:	b928      	cbnz	r0, 8087afe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8087af2:	7870      	ldrb	r0, [r6, #1]
 8087af4:	fab0 f080 	clz	r0, r0
 8087af8:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 8087afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
 8087afe:	7803      	ldrb	r3, [r0, #0]
 8087b00:	b16b      	cbz	r3, 8087b1e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087b02:	7ac3      	ldrb	r3, [r0, #11]
 8087b04:	071b      	lsls	r3, r3, #28
 8087b06:	d4ee      	bmi.n	8087ae6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8087b08:	220b      	movs	r2, #11
 8087b0a:	4640      	mov	r0, r8
 8087b0c:	f006 fff4 	bl	808eaf8 <memcmp>
 8087b10:	2800      	cmp	r0, #0
 8087b12:	d1e8      	bne.n	8087ae6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
 8087b14:	3501      	adds	r5, #1
 8087b16:	b2ad      	uxth	r5, r5
 8087b18:	2d64      	cmp	r5, #100	; 0x64
 8087b1a:	d1b9      	bne.n	8087a90 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 8087b1c:	e7ed      	b.n	8087afa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
 8087b1e:	2001      	movs	r0, #1
 8087b20:	e7eb      	b.n	8087afa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

08087b24 <_ZN7FatFile4openEPS_P7fname_th>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087b28:	b089      	sub	sp, #36	; 0x24
 8087b2a:	9304      	str	r3, [sp, #16]
  if (!dirFile->isDir() || isOpen()) {
 8087b2c:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087b2e:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 8087b30:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087b34:	4690      	mov	r8, r2
 8087b36:	9005      	str	r0, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
 8087b38:	d103      	bne.n	8087b42 <_ZN7FatFile4openEPS_P7fname_th+0x1e>
  return false;
 8087b3a:	2000      	movs	r0, #0
}
 8087b3c:	b009      	add	sp, #36	; 0x24
 8087b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
 8087b42:	9b05      	ldr	r3, [sp, #20]
 8087b44:	781b      	ldrb	r3, [r3, #0]
 8087b46:	2b00      	cmp	r3, #0
 8087b48:	d1f7      	bne.n	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  size_t len = fname->len;
 8087b4a:	6853      	ldr	r3, [r2, #4]
 8087b4c:	4628      	mov	r0, r5
 8087b4e:	9303      	str	r3, [sp, #12]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8087b50:	7813      	ldrb	r3, [r2, #0]
 8087b52:	0799      	lsls	r1, r3, #30
 8087b54:	bf18      	it	ne
 8087b56:	9b03      	ldrne	r3, [sp, #12]
 8087b58:	f04f 0100 	mov.w	r1, #0
 8087b5c:	bf1f      	itttt	ne
 8087b5e:	f103 070c 	addne.w	r7, r3, #12
 8087b62:	230d      	movne	r3, #13
 8087b64:	fbb7 f7f3 	udivne	r7, r7, r3
 8087b68:	3701      	addne	r7, #1
 8087b6a:	bf0c      	ite	eq
 8087b6c:	2701      	moveq	r7, #1
 8087b6e:	b2ff      	uxtbne	r7, r7
 8087b70:	f000 fe4f 	bl	8088812 <_ZN7FatFile7seekSetEm>
  }
 8087b74:	2300      	movs	r3, #0
 8087b76:	469b      	mov	fp, r3
 8087b78:	461c      	mov	r4, r3
 8087b7a:	461e      	mov	r6, r3
 8087b7c:	469a      	mov	sl, r3
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087b7e:	f108 020d 	add.w	r2, r8, #13
 8087b82:	9302      	str	r3, [sp, #8]
 8087b84:	9207      	str	r2, [sp, #28]
    curIndex = dirFile->m_curPosition/32;
 8087b86:	696a      	ldr	r2, [r5, #20]
    dir = dirFile->readDirCache(true);
 8087b88:	2101      	movs	r1, #1
 8087b8a:	4628      	mov	r0, r5
 8087b8c:	9306      	str	r3, [sp, #24]
    curIndex = dirFile->m_curPosition/32;
 8087b8e:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8087b92:	f000 fe1f 	bl	80887d4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087b96:	9b06      	ldr	r3, [sp, #24]
 8087b98:	2800      	cmp	r0, #0
 8087b9a:	d16c      	bne.n	8087c76 <_ZN7FatFile4openEPS_P7fname_th+0x152>
      if (dirFile->getError()) {
 8087b9c:	786b      	ldrb	r3, [r5, #1]
 8087b9e:	2b00      	cmp	r3, #0
 8087ba0:	d1cb      	bne.n	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8087ba2:	9b04      	ldr	r3, [sp, #16]
 8087ba4:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8087ba8:	2b42      	cmp	r3, #66	; 0x42
 8087baa:	d1c6      	bne.n	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (freeFound == 0) {
 8087bac:	9b02      	ldr	r3, [sp, #8]
 8087bae:	2c00      	cmp	r4, #0
 8087bb0:	bf08      	it	eq
 8087bb2:	464b      	moveq	r3, r9
 8087bb4:	9302      	str	r3, [sp, #8]
  while (freeFound < freeNeed) {
 8087bb6:	42bc      	cmp	r4, r7
 8087bb8:	f0c0 8103 	bcc.w	8087dc2 <_ZN7FatFile4openEPS_P7fname_th+0x29e>
  if (fnameFound) {
 8087bbc:	f1ba 0f00 	cmp.w	sl, #0
 8087bc0:	f040 811b 	bne.w	8087dfa <_ZN7FatFile4openEPS_P7fname_th+0x2d6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8087bc4:	9b02      	ldr	r3, [sp, #8]
 8087bc6:	4628      	mov	r0, r5
 8087bc8:	0159      	lsls	r1, r3, #5
 8087bca:	f000 fe22 	bl	8088812 <_ZN7FatFile7seekSetEm>
 8087bce:	2800      	cmp	r0, #0
 8087bd0:	d0b3      	beq.n	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  lfnOrd = freeNeed - 1;
 8087bd2:	3f01      	subs	r7, #1
 8087bd4:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087bd8:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087bda:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
 8087bde:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087be0:	2e00      	cmp	r6, #0
 8087be2:	f000 8121 	beq.w	8087e28 <_ZN7FatFile4openEPS_P7fname_th+0x304>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087be6:	2100      	movs	r1, #0
 8087be8:	4628      	mov	r0, r5
 8087bea:	f000 fdf3 	bl	80887d4 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8087bee:	4604      	mov	r4, r0
 8087bf0:	2800      	cmp	r0, #0
 8087bf2:	d0a2      	beq.n	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087bf4:	4556      	cmp	r6, sl
 8087bf6:	bf18      	it	ne
 8087bf8:	46b3      	movne	fp, r6
    dirFile->m_vol->cacheDirty();
 8087bfa:	68aa      	ldr	r2, [r5, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087bfc:	bf08      	it	eq
 8087bfe:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
    m_status |= CACHE_STATUS_DIRTY;
 8087c02:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8087c06:	f043 0301 	orr.w	r3, r3, #1
 8087c0a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8087c0e:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8087c12:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
 8087c14:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8087c18:	f108 000d 	add.w	r0, r8, #13
 8087c1c:	f7ff fe3f 	bl	808789e <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087c20:	220d      	movs	r2, #13
 8087c22:	2300      	movs	r3, #0
 8087c24:	f00b 0b1f 	and.w	fp, fp, #31
 8087c28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8087c2c:	fb02 f20b 	mul.w	r2, r2, fp
    ldir->chksum = lfnChecksum(fname->sfn);
 8087c30:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
 8087c32:	f884 901a 	strb.w	r9, [r4, #26]
 8087c36:	f884 901b 	strb.w	r9, [r4, #27]
    lfnPutName(ldir, fname->lfn, len);
 8087c3a:	f8d8 c008 	ldr.w	ip, [r8, #8]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087c3e:	9903      	ldr	r1, [sp, #12]
 8087c40:	4291      	cmp	r1, r2
 8087c42:	f240 80e2 	bls.w	8087e0a <_ZN7FatFile4openEPS_P7fname_th+0x2e6>
 8087c46:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
 8087c4a:	2b04      	cmp	r3, #4
 8087c4c:	fa5f fe83 	uxtb.w	lr, r3
 8087c50:	f103 0001 	add.w	r0, r3, #1
 8087c54:	f200 80df 	bhi.w	8087e16 <_ZN7FatFile4openEPS_P7fname_th+0x2f2>
    ldir->name1[i] = c;
 8087c58:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8087c5c:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
 8087c60:	280d      	cmp	r0, #13
 8087c62:	4603      	mov	r3, r0
 8087c64:	f102 0201 	add.w	r2, r2, #1
 8087c68:	d1e9      	bne.n	8087c3e <_ZN7FatFile4openEPS_P7fname_th+0x11a>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087c6a:	3e01      	subs	r6, #1
 8087c6c:	b2f6      	uxtb	r6, r6
 8087c6e:	e7b7      	b.n	8087be0 <_ZN7FatFile4openEPS_P7fname_th+0xbc>
        fnameFound = true;
 8087c70:	f04f 0a01 	mov.w	sl, #1
 8087c74:	e787      	b.n	8087b86 <_ZN7FatFile4openEPS_P7fname_th+0x62>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8087c76:	7802      	ldrb	r2, [r0, #0]
 8087c78:	2ae5      	cmp	r2, #229	; 0xe5
 8087c7a:	d000      	beq.n	8087c7e <_ZN7FatFile4openEPS_P7fname_th+0x15a>
 8087c7c:	b97a      	cbnz	r2, 8087c9e <_ZN7FatFile4openEPS_P7fname_th+0x17a>
    curIndex = dirFile->m_curPosition/32;
 8087c7e:	9902      	ldr	r1, [sp, #8]
 8087c80:	2c00      	cmp	r4, #0
 8087c82:	bf08      	it	eq
 8087c84:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
 8087c86:	42bc      	cmp	r4, r7
        freeFound++;
 8087c88:	bf38      	it	cc
 8087c8a:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
 8087c8c:	9102      	str	r1, [sp, #8]
        freeFound++;
 8087c8e:	bf38      	it	cc
 8087c90:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
 8087c92:	2a00      	cmp	r2, #0
 8087c94:	d085      	beq.n	8087ba2 <_ZN7FatFile4openEPS_P7fname_th+0x7e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087c96:	2ae5      	cmp	r2, #229	; 0xe5
 8087c98:	d104      	bne.n	8087ca4 <_ZN7FatFile4openEPS_P7fname_th+0x180>
      lfnOrd = 0;
 8087c9a:	2600      	movs	r6, #0
 8087c9c:	e773      	b.n	8087b86 <_ZN7FatFile4openEPS_P7fname_th+0x62>
        freeFound = 0;
 8087c9e:	42bc      	cmp	r4, r7
 8087ca0:	bf38      	it	cc
 8087ca2:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087ca4:	2a2e      	cmp	r2, #46	; 0x2e
 8087ca6:	d0f8      	beq.n	8087c9a <_ZN7FatFile4openEPS_P7fname_th+0x176>
    } else if (DIR_IS_LONG_NAME(dir)) {
 8087ca8:	7ac1      	ldrb	r1, [r0, #11]
 8087caa:	290f      	cmp	r1, #15
 8087cac:	d15d      	bne.n	8087d6a <_ZN7FatFile4openEPS_P7fname_th+0x246>
      if (!lfnOrd) {
 8087cae:	bb3e      	cbnz	r6, 8087d00 <_ZN7FatFile4openEPS_P7fname_th+0x1dc>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8087cb0:	f012 0640 	ands.w	r6, r2, #64	; 0x40
 8087cb4:	f43f af67 	beq.w	8087b86 <_ZN7FatFile4openEPS_P7fname_th+0x62>
        lfnOrd = ord = ldir->ord & 0X1F;
 8087cb8:	f002 061f 	and.w	r6, r2, #31
 8087cbc:	46b3      	mov	fp, r6
        chksum = ldir->chksum;
 8087cbe:	7b43      	ldrb	r3, [r0, #13]
      size_t k = 13*(ord - 1);
 8087cc0:	f04f 0e0d 	mov.w	lr, #13
 8087cc4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8087cc8:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
 8087ccc:	9a03      	ldr	r2, [sp, #12]
 8087cce:	4572      	cmp	r2, lr
 8087cd0:	d9e3      	bls.n	8087c9a <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8087cd2:	f04f 0c00 	mov.w	ip, #0
 8087cd6:	eba2 020e 	sub.w	r2, r2, lr
 8087cda:	9206      	str	r2, [sp, #24]
  if (i < LDIR_NAME1_DIM) {
 8087cdc:	f1bc 0f04 	cmp.w	ip, #4
 8087ce0:	eb0c 090e 	add.w	r9, ip, lr
 8087ce4:	fa5f f28c 	uxtb.w	r2, ip
 8087ce8:	d814      	bhi.n	8087d14 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
    return ldir->name1[i];
 8087cea:	eb00 024c 	add.w	r2, r0, ip, lsl #1
 8087cee:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
 8087cf2:	9906      	ldr	r1, [sp, #24]
 8087cf4:	458c      	cmp	ip, r1
 8087cf6:	d11b      	bne.n	8087d30 <_ZN7FatFile4openEPS_P7fname_th+0x20c>
            lfnOrd = 0;
 8087cf8:	2a00      	cmp	r2, #0
 8087cfa:	bf18      	it	ne
 8087cfc:	2600      	movne	r6, #0
 8087cfe:	e742      	b.n	8087b86 <_ZN7FatFile4openEPS_P7fname_th+0x62>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8087d00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8087d04:	fa5f fb8b 	uxtb.w	fp, fp
 8087d08:	455a      	cmp	r2, fp
 8087d0a:	d1c6      	bne.n	8087c9a <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8087d0c:	7b42      	ldrb	r2, [r0, #13]
 8087d0e:	429a      	cmp	r2, r3
 8087d10:	d0d6      	beq.n	8087cc0 <_ZN7FatFile4openEPS_P7fname_th+0x19c>
 8087d12:	e7c2      	b.n	8087c9a <_ZN7FatFile4openEPS_P7fname_th+0x176>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087d14:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087d16:	bf95      	itete	ls
 8087d18:	f10c 32ff 	addls.w	r2, ip, #4294967295
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087d1c:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087d20:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087d24:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087d28:	bf94      	ite	ls
 8087d2a:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087d2c:	8892      	ldrhhi	r2, [r2, #4]
 8087d2e:	e7e0      	b.n	8087cf2 <_ZN7FatFile4openEPS_P7fname_th+0x1ce>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087d30:	2aff      	cmp	r2, #255	; 0xff
 8087d32:	d8b2      	bhi.n	8087c9a <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8087d34:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087d36:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8087d3a:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087d3c:	f8d8 1008 	ldr.w	r1, [r8, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087d40:	bf98      	it	ls
 8087d42:	3220      	addls	r2, #32
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087d44:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087d48:	bf98      	it	ls
 8087d4a:	b2d2      	uxtbls	r2, r2
 8087d4c:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
 8087d50:	f1b9 0f19 	cmp.w	r9, #25
 8087d54:	bf9c      	itt	ls
 8087d56:	3120      	addls	r1, #32
 8087d58:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087d5a:	4291      	cmp	r1, r2
 8087d5c:	d19d      	bne.n	8087c9a <_ZN7FatFile4openEPS_P7fname_th+0x176>
      for (uint8_t i = 0; i < 13; i++) {
 8087d5e:	f10c 0c01 	add.w	ip, ip, #1
 8087d62:	f1bc 0f0d 	cmp.w	ip, #13
 8087d66:	d1b9      	bne.n	8087cdc <_ZN7FatFile4openEPS_P7fname_th+0x1b8>
 8087d68:	e70d      	b.n	8087b86 <_ZN7FatFile4openEPS_P7fname_th+0x62>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8087d6a:	070a      	lsls	r2, r1, #28
 8087d6c:	d495      	bmi.n	8087c9a <_ZN7FatFile4openEPS_P7fname_th+0x176>
      if (lfnOrd) {
 8087d6e:	b166      	cbz	r6, 8087d8a <_ZN7FatFile4openEPS_P7fname_th+0x266>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8087d70:	f1bb 0f01 	cmp.w	fp, #1
 8087d74:	9302      	str	r3, [sp, #8]
 8087d76:	f47f aee0 	bne.w	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8087d7a:	f7ff fd90 	bl	808789e <_ZN7FatFile11lfnChecksumEPh>
 8087d7e:	9b02      	ldr	r3, [sp, #8]
 8087d80:	4298      	cmp	r0, r3
 8087d82:	f47f aeda 	bne.w	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8087d86:	46b2      	mov	sl, r6
 8087d88:	e00e      	b.n	8087da8 <_ZN7FatFile4openEPS_P7fname_th+0x284>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087d8a:	220b      	movs	r2, #11
 8087d8c:	9907      	ldr	r1, [sp, #28]
 8087d8e:	9306      	str	r3, [sp, #24]
 8087d90:	f006 feb2 	bl	808eaf8 <memcmp>
 8087d94:	9b06      	ldr	r3, [sp, #24]
 8087d96:	2800      	cmp	r0, #0
 8087d98:	f47f aef5 	bne.w	8087b86 <_ZN7FatFile4openEPS_P7fname_th+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8087d9c:	f898 a000 	ldrb.w	sl, [r8]
 8087da0:	f01a 0a01 	ands.w	sl, sl, #1
 8087da4:	f47f af64 	bne.w	8087c70 <_ZN7FatFile4openEPS_P7fname_th+0x14c>
  if (oflag & O_EXCL) {
 8087da8:	9b04      	ldr	r3, [sp, #16]
 8087daa:	061b      	lsls	r3, r3, #24
 8087dac:	f53f aec5 	bmi.w	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8087db0:	464a      	mov	r2, r9
 8087db2:	4629      	mov	r1, r5
 8087db4:	9b04      	ldr	r3, [sp, #16]
 8087db6:	9805      	ldr	r0, [sp, #20]
 8087db8:	f8cd a000 	str.w	sl, [sp]
 8087dbc:	f000 fd6c 	bl	8088898 <_ZN7FatFile15openCachedEntryEPS_thh>
 8087dc0:	e6bc      	b.n	8087b3c <_ZN7FatFile4openEPS_P7fname_th+0x18>
    dir = dirFile->readDirCache();
 8087dc2:	2100      	movs	r1, #0
 8087dc4:	4628      	mov	r0, r5
 8087dc6:	f000 fd05 	bl	80887d4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087dca:	b998      	cbnz	r0, 8087df4 <_ZN7FatFile4openEPS_P7fname_th+0x2d0>
      if (dirFile->getError()) {
 8087dcc:	786b      	ldrb	r3, [r5, #1]
 8087dce:	2b00      	cmp	r3, #0
 8087dd0:	f47f aeb3 	bne.w	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (!dirFile->addDirCluster()) {
 8087dd4:	4628      	mov	r0, r5
 8087dd6:	f000 fbd5 	bl	8088584 <_ZN7FatFile13addDirClusterEv>
 8087dda:	2800      	cmp	r0, #0
 8087ddc:	f43f aead 	beq.w	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8087de0:	68ab      	ldr	r3, [r5, #8]
 8087de2:	791b      	ldrb	r3, [r3, #4]
 8087de4:	2b01      	cmp	r3, #1
 8087de6:	f63f aee9 	bhi.w	8087bbc <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound += 16;
 8087dea:	3410      	adds	r4, #16
 8087dec:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8087dee:	42a7      	cmp	r7, r4
 8087df0:	d8f0      	bhi.n	8087dd4 <_ZN7FatFile4openEPS_P7fname_th+0x2b0>
 8087df2:	e6e3      	b.n	8087bbc <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound++;
 8087df4:	3401      	adds	r4, #1
 8087df6:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8087df8:	e6dd      	b.n	8087bb6 <_ZN7FatFile4openEPS_P7fname_th+0x92>
    if (!dirFile->lfnUniqueSfn(fname)) {
 8087dfa:	4641      	mov	r1, r8
 8087dfc:	4628      	mov	r0, r5
 8087dfe:	f7ff fe3d 	bl	8087a7c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8087e02:	2800      	cmp	r0, #0
 8087e04:	f47f aede 	bne.w	8087bc4 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087e08:	e697      	b.n	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087e0a:	bf14      	ite	ne
 8087e0c:	f04f 31ff 	movne.w	r1, #4294967295
 8087e10:	2100      	moveq	r1, #0
 8087e12:	b289      	uxth	r1, r1
 8087e14:	e719      	b.n	8087c4a <_ZN7FatFile4openEPS_P7fname_th+0x126>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087e16:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8087e1a:	bf94      	ite	ls
 8087e1c:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8087e20:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
 8087e24:	8099      	strh	r1, [r3, #4]
 8087e26:	e71b      	b.n	8087c60 <_ZN7FatFile4openEPS_P7fname_th+0x13c>
  dir = dirFile->readDirCache();
 8087e28:	4631      	mov	r1, r6
 8087e2a:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
 8087e2c:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
 8087e2e:	f000 fcd1 	bl	80887d4 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8087e32:	4604      	mov	r4, r0
 8087e34:	2800      	cmp	r0, #0
 8087e36:	f43f ae80 	beq.w	8087b3a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  memset(dir, 0, sizeof(dir_t));
 8087e3a:	2220      	movs	r2, #32
 8087e3c:	4631      	mov	r1, r6
 8087e3e:	f006 fe77 	bl	808eb30 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8087e42:	4643      	mov	r3, r8
 8087e44:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8087e48:	6022      	str	r2, [r4, #0]
 8087e4a:	685a      	ldr	r2, [r3, #4]
 8087e4c:	6062      	str	r2, [r4, #4]
 8087e4e:	891a      	ldrh	r2, [r3, #8]
 8087e50:	8122      	strh	r2, [r4, #8]
 8087e52:	7a9b      	ldrb	r3, [r3, #10]
 8087e54:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8087e56:	f898 3000 	ldrb.w	r3, [r8]
 8087e5a:	f003 0318 	and.w	r3, r3, #24
 8087e5e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
 8087e60:	4b0f      	ldr	r3, [pc, #60]	; (8087ea0 <_ZN7FatFile4openEPS_P7fname_th+0x37c>)
 8087e62:	681b      	ldr	r3, [r3, #0]
 8087e64:	b19b      	cbz	r3, 8087e8e <_ZN7FatFile4openEPS_P7fname_th+0x36a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8087e66:	f104 010e 	add.w	r1, r4, #14
 8087e6a:	f104 0010 	add.w	r0, r4, #16
 8087e6e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
 8087e70:	8a23      	ldrh	r3, [r4, #16]
  curIndex = dirFile->m_curPosition/32;
 8087e72:	f3c7 194f 	ubfx	r9, r7, #5, #16
  dir->lastAccessDate = dir->creationDate;
 8087e76:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
 8087e78:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
 8087e7a:	89e3      	ldrh	r3, [r4, #14]
 8087e7c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
 8087e7e:	68aa      	ldr	r2, [r5, #8]
 8087e80:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8087e84:	f043 0301 	orr.w	r3, r3, #1
 8087e88:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
 8087e8c:	e790      	b.n	8087db0 <_ZN7FatFile4openEPS_P7fname_th+0x28c>
    dir->creationDate = FAT_DEFAULT_DATE;
 8087e8e:	2321      	movs	r3, #33	; 0x21
 8087e90:	7423      	strb	r3, [r4, #16]
 8087e92:	2328      	movs	r3, #40	; 0x28
 8087e94:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8087e96:	2308      	movs	r3, #8
 8087e98:	73a6      	strb	r6, [r4, #14]
 8087e9a:	73e3      	strb	r3, [r4, #15]
 8087e9c:	e7e8      	b.n	8087e70 <_ZN7FatFile4openEPS_P7fname_th+0x34c>
 8087e9e:	bf00      	nop
 8087ea0:	20000d58 	.word	0x20000d58

08087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8087ea4:	6803      	ldr	r3, [r0, #0]
 8087ea6:	68db      	ldr	r3, [r3, #12]
 8087ea8:	4718      	bx	r3

08087eaa <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8087eaa:	6803      	ldr	r3, [r0, #0]
 8087eac:	695b      	ldr	r3, [r3, #20]
 8087eae:	4718      	bx	r3

08087eb0 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8087eb0:	b510      	push	{r4, lr}
  if (!m_selected) {
 8087eb2:	7903      	ldrb	r3, [r0, #4]
void SdSpiCard::chipSelectHigh() {
 8087eb4:	4604      	mov	r4, r0
  if (!m_selected) {
 8087eb6:	b16b      	cbz	r3, 8087ed4 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8087eb8:	2101      	movs	r1, #1
 8087eba:	7940      	ldrb	r0, [r0, #5]
 8087ebc:	f005 f9bf 	bl	808d23e <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8087ec0:	21ff      	movs	r1, #255	; 0xff
 8087ec2:	6820      	ldr	r0, [r4, #0]
 8087ec4:	f7ff fff1 	bl	8087eaa <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiEndTransaction();
 8087ec8:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8087eca:	6803      	ldr	r3, [r0, #0]
 8087ecc:	689b      	ldr	r3, [r3, #8]
 8087ece:	4798      	blx	r3
  m_selected = false;
 8087ed0:	2300      	movs	r3, #0
 8087ed2:	7123      	strb	r3, [r4, #4]
}
 8087ed4:	bd10      	pop	{r4, pc}

08087ed6 <_ZN9SdSpiCard13chipSelectLowEv>:
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8087ed6:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8087ed8:	7905      	ldrb	r5, [r0, #4]
void SdSpiCard::chipSelectLow() {
 8087eda:	4604      	mov	r4, r0
  if (m_selected) {
 8087edc:	b955      	cbnz	r5, 8087ef4 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
 8087ede:	6800      	ldr	r0, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8087ee0:	79e1      	ldrb	r1, [r4, #7]
 8087ee2:	6803      	ldr	r3, [r0, #0]
 8087ee4:	685b      	ldr	r3, [r3, #4]
 8087ee6:	4798      	blx	r3
  digitalWrite(m_chipSelectPin, LOW);
 8087ee8:	4629      	mov	r1, r5
 8087eea:	7960      	ldrb	r0, [r4, #5]
 8087eec:	f005 f9a7 	bl	808d23e <digitalWrite>
  m_selected = true;
 8087ef0:	2301      	movs	r3, #1
 8087ef2:	7123      	strb	r3, [r4, #4]
}
 8087ef4:	bd38      	pop	{r3, r4, r5, pc}

08087ef6 <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8087ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087ef8:	4604      	mov	r4, r0
 8087efa:	460d      	mov	r5, r1
 8087efc:	4616      	mov	r6, r2
 8087efe:	f002 fbad 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
 8087f02:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8087f04:	6820      	ldr	r0, [r4, #0]
 8087f06:	f7ff ffcd 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8087f0a:	28ff      	cmp	r0, #255	; 0xff
 8087f0c:	7220      	strb	r0, [r4, #8]
 8087f0e:	d10c      	bne.n	8087f2a <_ZN9SdSpiCard8readDataEPhj+0x34>
 8087f10:	f002 fba4 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8087f14:	1bc3      	subs	r3, r0, r7
 8087f16:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8087f1a:	d9f3      	bls.n	8087f04 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 8087f1c:	2311      	movs	r3, #17
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8087f1e:	4620      	mov	r0, r4
 8087f20:	71a3      	strb	r3, [r4, #6]
 8087f22:	f7ff ffc5 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087f26:	2000      	movs	r0, #0
}
 8087f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 8087f2a:	28fe      	cmp	r0, #254	; 0xfe
 8087f2c:	d001      	beq.n	8087f32 <_ZN9SdSpiCard8readDataEPhj+0x3c>
 8087f2e:	230f      	movs	r3, #15
 8087f30:	e7f5      	b.n	8087f1e <_ZN9SdSpiCard8readDataEPhj+0x28>
  if ((m_status = spiReceive(dst, count))) {
 8087f32:	6820      	ldr	r0, [r4, #0]
    return m_spi->receive(buf, n);
 8087f34:	4632      	mov	r2, r6
 8087f36:	6803      	ldr	r3, [r0, #0]
 8087f38:	4629      	mov	r1, r5
 8087f3a:	691b      	ldr	r3, [r3, #16]
 8087f3c:	4798      	blx	r3
 8087f3e:	7220      	strb	r0, [r4, #8]
 8087f40:	b108      	cbz	r0, 8087f46 <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 8087f42:	231c      	movs	r3, #28
 8087f44:	e7eb      	b.n	8087f1e <_ZN9SdSpiCard8readDataEPhj+0x28>
  spiReceive();
 8087f46:	6820      	ldr	r0, [r4, #0]
 8087f48:	f7ff ffac 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
 8087f4c:	6820      	ldr	r0, [r4, #0]
 8087f4e:	f7ff ffa9 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8087f52:	2001      	movs	r0, #1
 8087f54:	e7e8      	b.n	8087f28 <_ZN9SdSpiCard8readDataEPhj+0x32>

08087f56 <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8087f56:	b570      	push	{r4, r5, r6, lr}
 8087f58:	4606      	mov	r6, r0
 8087f5a:	460c      	mov	r4, r1
 8087f5c:	f002 fb7e 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
 8087f60:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8087f62:	6830      	ldr	r0, [r6, #0]
 8087f64:	f7ff ff9e 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8087f68:	28ff      	cmp	r0, #255	; 0xff
 8087f6a:	d006      	beq.n	8087f7a <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8087f6c:	f002 fb76 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8087f70:	1b43      	subs	r3, r0, r5
 8087f72:	42a3      	cmp	r3, r4
 8087f74:	d3f5      	bcc.n	8087f62 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8087f76:	2000      	movs	r0, #0
}
 8087f78:	bd70      	pop	{r4, r5, r6, pc}
  return true;
 8087f7a:	2001      	movs	r0, #1
 8087f7c:	e7fc      	b.n	8087f78 <_ZN9SdSpiCard11waitNotBusyEt+0x22>

08087f7e <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8087f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_selected) {
 8087f80:	7903      	ldrb	r3, [r0, #4]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8087f82:	4604      	mov	r4, r0
 8087f84:	460d      	mov	r5, r1
 8087f86:	9201      	str	r2, [sp, #4]
  if (!m_selected) {
 8087f88:	b90b      	cbnz	r3, 8087f8e <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8087f8a:	f7ff ffa4 	bl	8087ed6 <_ZN9SdSpiCard13chipSelectLowEv>
  waitNotBusy(SD_WRITE_TIMEOUT);
 8087f8e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087f92:	4620      	mov	r0, r4
 8087f94:	f7ff ffdf 	bl	8087f56 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
 8087f98:	6820      	ldr	r0, [r4, #0]
 8087f9a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8087f9e:	f7ff ff84 	bl	8087eaa <_ZN9SdSpiCard7spiSendEh.isra.0>
 8087fa2:	2603      	movs	r6, #3
    spiSend(pa[i]);
 8087fa4:	af01      	add	r7, sp, #4
 8087fa6:	5db9      	ldrb	r1, [r7, r6]
 8087fa8:	6820      	ldr	r0, [r4, #0]
 8087faa:	f7ff ff7e 	bl	8087eaa <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
 8087fae:	3e01      	subs	r6, #1
 8087fb0:	d2f9      	bcs.n	8087fa6 <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8087fb2:	2d00      	cmp	r5, #0
 8087fb4:	bf0c      	ite	eq
 8087fb6:	2195      	moveq	r1, #149	; 0x95
 8087fb8:	2187      	movne	r1, #135	; 0x87
 8087fba:	6820      	ldr	r0, [r4, #0]
 8087fbc:	f7ff ff75 	bl	8087eaa <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (cmd == CMD12) {
 8087fc0:	2d0c      	cmp	r5, #12
 8087fc2:	d102      	bne.n	8087fca <_ZN9SdSpiCard11cardCommandEhm+0x4c>
    spiReceive();
 8087fc4:	6820      	ldr	r0, [r4, #0]
 8087fc6:	f7ff ff6d 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8087fca:	2500      	movs	r5, #0
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8087fcc:	6820      	ldr	r0, [r4, #0]
 8087fce:	f7ff ff69 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8087fd2:	0603      	lsls	r3, r0, #24
 8087fd4:	7220      	strb	r0, [r4, #8]
 8087fd6:	d503      	bpl.n	8087fe0 <_ZN9SdSpiCard11cardCommandEhm+0x62>
 8087fd8:	3501      	adds	r5, #1
 8087fda:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8087fde:	d1f5      	bne.n	8087fcc <_ZN9SdSpiCard11cardCommandEhm+0x4e>
}
 8087fe0:	b003      	add	sp, #12
 8087fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087fe4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8087fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087fe6:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8087fe8:	2300      	movs	r3, #0
  m_chipSelectPin = chipSelectPin;
 8087fea:	7142      	strb	r2, [r0, #5]
  m_errorCode = m_type = 0;
 8087fec:	7243      	strb	r3, [r0, #9]
 8087fee:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8087ff0:	6001      	str	r1, [r0, #0]
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8087ff2:	4604      	mov	r4, r0
 8087ff4:	f002 fb32 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
 8087ff8:	4605      	mov	r5, r0
  spiBegin(m_chipSelectPin);
 8087ffa:	6820      	ldr	r0, [r4, #0]
    m_spi->begin(chipSelectPin);
 8087ffc:	7961      	ldrb	r1, [r4, #5]
 8087ffe:	6803      	ldr	r3, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8088000:	260a      	movs	r6, #10
    m_spi->begin(chipSelectPin);
 8088002:	681b      	ldr	r3, [r3, #0]
 8088004:	4798      	blx	r3
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8088006:	2180      	movs	r1, #128	; 0x80
  spiBeginTransaction(m_sckDivisor);
 8088008:	6820      	ldr	r0, [r4, #0]
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 808800a:	71e1      	strb	r1, [r4, #7]
    m_spi->beginTransaction(spiDivisor);
 808800c:	6803      	ldr	r3, [r0, #0]
 808800e:	685b      	ldr	r3, [r3, #4]
 8088010:	4798      	blx	r3
    spiSend(0XFF);
 8088012:	21ff      	movs	r1, #255	; 0xff
 8088014:	6820      	ldr	r0, [r4, #0]
 8088016:	3e01      	subs	r6, #1
 8088018:	f7ff ff47 	bl	8087eaa <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
 808801c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8088020:	d1f7      	bne.n	8088012 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
  spiEndTransaction();
 8088022:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8088024:	6803      	ldr	r3, [r0, #0]
 8088026:	689b      	ldr	r3, [r3, #8]
 8088028:	4798      	blx	r3
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 808802a:	2200      	movs	r2, #0
 808802c:	4620      	mov	r0, r4
 808802e:	4611      	mov	r1, r2
 8088030:	f7ff ffa5 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
 8088034:	2801      	cmp	r0, #1
 8088036:	d00c      	beq.n	8088052 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
 8088038:	f002 fb10 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 808803c:	1b40      	subs	r0, r0, r5
 808803e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8088042:	d9f2      	bls.n	808802a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
    m_errorCode = code;
 8088044:	2301      	movs	r3, #1
  chipSelectHigh();
 8088046:	4620      	mov	r0, r4
 8088048:	71a3      	strb	r3, [r4, #6]
 808804a:	f7ff ff31 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808804e:	2000      	movs	r0, #0
}
 8088050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8088052:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8088056:	2108      	movs	r1, #8
 8088058:	4620      	mov	r0, r4
 808805a:	f7ff ff90 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
 808805e:	2805      	cmp	r0, #5
 8088060:	d116      	bne.n	8088090 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xac>
    m_type = value;
 8088062:	2301      	movs	r3, #1
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8088064:	2600      	movs	r6, #0
 8088066:	7263      	strb	r3, [r4, #9]
    cardCommand(CMD55, 0);
 8088068:	2200      	movs	r2, #0
 808806a:	2137      	movs	r1, #55	; 0x37
 808806c:	4620      	mov	r0, r4
 808806e:	f7ff ff86 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8088072:	4632      	mov	r2, r6
 8088074:	2129      	movs	r1, #41	; 0x29
 8088076:	4620      	mov	r0, r4
 8088078:	f7ff ff81 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 808807c:	4602      	mov	r2, r0
 808807e:	b1f8      	cbz	r0, 80880c0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xdc>
 8088080:	f002 faec 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8088084:	1b40      	subs	r0, r0, r5
 8088086:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808808a:	d9ed      	bls.n	8088068 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
    m_errorCode = code;
 808808c:	230a      	movs	r3, #10
 808808e:	e7da      	b.n	8088046 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
 8088090:	2604      	movs	r6, #4
      m_status = spiReceive();
 8088092:	6820      	ldr	r0, [r4, #0]
 8088094:	f7ff ff06 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8088098:	3e01      	subs	r6, #1
    for (uint8_t i = 0; i < 4; i++) {
 808809a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      m_status = spiReceive();
 808809e:	7220      	strb	r0, [r4, #8]
    for (uint8_t i = 0; i < 4; i++) {
 80880a0:	d1f7      	bne.n	8088092 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xae>
    if (m_status == 0XAA) {
 80880a2:	28aa      	cmp	r0, #170	; 0xaa
 80880a4:	d104      	bne.n	80880b0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xcc>
    m_type = value;
 80880a6:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80880a8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 80880ac:	7263      	strb	r3, [r4, #9]
    return m_type;
 80880ae:	e7db      	b.n	8088068 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
 80880b0:	f002 fad4 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 80880b4:	1b40      	subs	r0, r0, r5
 80880b6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80880ba:	d9ca      	bls.n	8088052 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
    m_errorCode = code;
 80880bc:	2302      	movs	r3, #2
 80880be:	e7c2      	b.n	8088046 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
  if (type() == SD_CARD_TYPE_SD2) {
 80880c0:	7a63      	ldrb	r3, [r4, #9]
 80880c2:	2b02      	cmp	r3, #2
 80880c4:	d119      	bne.n	80880fa <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x116>
    if (cardCommand(CMD58, 0)) {
 80880c6:	213a      	movs	r1, #58	; 0x3a
 80880c8:	4620      	mov	r0, r4
 80880ca:	f7ff ff58 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
 80880ce:	b108      	cbz	r0, 80880d4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf0>
 80880d0:	2308      	movs	r3, #8
 80880d2:	e7b8      	b.n	8088046 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
    if ((spiReceive() & 0XC0) == 0XC0) {
 80880d4:	6820      	ldr	r0, [r4, #0]
 80880d6:	f7ff fee5 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80880da:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 80880de:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 80880e0:	bf08      	it	eq
 80880e2:	2303      	moveq	r3, #3
      spiReceive();
 80880e4:	6820      	ldr	r0, [r4, #0]
 80880e6:	bf08      	it	eq
 80880e8:	7263      	strbeq	r3, [r4, #9]
 80880ea:	f7ff fedb 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80880ee:	6820      	ldr	r0, [r4, #0]
 80880f0:	f7ff fed8 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80880f4:	6820      	ldr	r0, [r4, #0]
 80880f6:	f7ff fed5 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  chipSelectHigh();
 80880fa:	4620      	mov	r0, r4
 80880fc:	f7ff fed8 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8088100:	2001      	movs	r0, #1
  m_sckDivisor = sckDivisor;
 8088102:	71e7      	strb	r7, [r4, #7]
  return true;
 8088104:	e7a4      	b.n	8088050 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6c>

08088106 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8088106:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8088108:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 808810a:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 808810c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808810e:	bf18      	it	ne
 8088110:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 8088112:	460a      	mov	r2, r1
 8088114:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8088116:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 8088118:	f7ff ff31 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
 808811c:	b130      	cbz	r0, 808812c <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 808811e:	2304      	movs	r3, #4
 8088120:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8088122:	4620      	mov	r0, r4
 8088124:	f7ff fec4 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088128:	2500      	movs	r5, #0
 808812a:	e00b      	b.n	8088144 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 808812c:	4629      	mov	r1, r5
 808812e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8088132:	4620      	mov	r0, r4
 8088134:	f7ff fedf 	bl	8087ef6 <_ZN9SdSpiCard8readDataEPhj>
 8088138:	4605      	mov	r5, r0
 808813a:	2800      	cmp	r0, #0
 808813c:	d0f1      	beq.n	8088122 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  chipSelectHigh();
 808813e:	4620      	mov	r0, r4
 8088140:	f7ff feb6 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8088144:	4628      	mov	r0, r5
 8088146:	bd38      	pop	{r3, r4, r5, pc}

08088148 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8088148:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 808814a:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readStart(uint32_t blockNumber) {
 808814c:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 808814e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8088150:	bf18      	it	ne
 8088152:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
 8088154:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8088156:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
 8088158:	f7ff ff11 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
 808815c:	b130      	cbz	r0, 808816c <_ZN9SdSpiCard9readStartEm+0x24>
 808815e:	2305      	movs	r3, #5
  chipSelectHigh();
 8088160:	4620      	mov	r0, r4
 8088162:	71a3      	strb	r3, [r4, #6]
 8088164:	f7ff fea4 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088168:	2000      	movs	r0, #0
}
 808816a:	bd10      	pop	{r4, pc}
  return true;
 808816c:	2001      	movs	r0, #1
 808816e:	e7fc      	b.n	808816a <_ZN9SdSpiCard9readStartEm+0x22>

08088170 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 8088170:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8088172:	2200      	movs	r2, #0
 8088174:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
 8088176:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8088178:	f7ff ff01 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
 808817c:	b130      	cbz	r0, 808818c <_ZN9SdSpiCard8readStopEv+0x1c>
 808817e:	2303      	movs	r3, #3
  chipSelectHigh();
 8088180:	4620      	mov	r0, r4
 8088182:	71a3      	strb	r3, [r4, #6]
 8088184:	f7ff fe94 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088188:	2000      	movs	r0, #0
}
 808818a:	bd10      	pop	{r4, pc}
  chipSelectHigh();
 808818c:	4620      	mov	r0, r4
 808818e:	f7ff fe8f 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8088192:	2001      	movs	r0, #1
 8088194:	e7f9      	b.n	808818a <_ZN9SdSpiCard8readStopEv+0x1a>

08088196 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8088196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088198:	4604      	mov	r4, r0
 808819a:	4616      	mov	r6, r2
 808819c:	461f      	mov	r7, r3
  if (!readStart(block)) {
 808819e:	f7ff ffd3 	bl	8088148 <_ZN9SdSpiCard9readStartEm>
 80881a2:	b168      	cbz	r0, 80881c0 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
 80881a4:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 80881a6:	b2ab      	uxth	r3, r5
 80881a8:	42bb      	cmp	r3, r7
 80881aa:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 80881ae:	d209      	bcs.n	80881c4 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
 80881b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80881b4:	4620      	mov	r0, r4
 80881b6:	f7ff fe9e 	bl	8087ef6 <_ZN9SdSpiCard8readDataEPhj>
 80881ba:	3501      	adds	r5, #1
 80881bc:	2800      	cmp	r0, #0
 80881be:	d1f2      	bne.n	80881a6 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
 80881c0:	2000      	movs	r0, #0
 80881c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
 80881c4:	4620      	mov	r0, r4
}
 80881c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
 80881ca:	f7ff bfd1 	b.w	8088170 <_ZN9SdSpiCard8readStopEv>

080881ce <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 80881ce:	b538      	push	{r3, r4, r5, lr}
 80881d0:	4604      	mov	r4, r0
 80881d2:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 80881d4:	6800      	ldr	r0, [r0, #0]
 80881d6:	f7ff fe68 	bl	8087eaa <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(src, 512);
 80881da:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 80881dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80881e0:	6803      	ldr	r3, [r0, #0]
 80881e2:	4629      	mov	r1, r5
 80881e4:	699b      	ldr	r3, [r3, #24]
 80881e6:	4798      	blx	r3
  spiSend(crc >> 8);
 80881e8:	21ff      	movs	r1, #255	; 0xff
 80881ea:	6820      	ldr	r0, [r4, #0]
 80881ec:	f7ff fe5d 	bl	8087eaa <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
 80881f0:	21ff      	movs	r1, #255	; 0xff
 80881f2:	6820      	ldr	r0, [r4, #0]
 80881f4:	f7ff fe59 	bl	8087eaa <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
 80881f8:	6820      	ldr	r0, [r4, #0]
 80881fa:	f7ff fe53 	bl	8087ea4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80881fe:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8088200:	f000 001f 	and.w	r0, r0, #31
 8088204:	2805      	cmp	r0, #5
 8088206:	d006      	beq.n	8088216 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
    m_errorCode = code;
 8088208:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 808820a:	4620      	mov	r0, r4
 808820c:	71a3      	strb	r3, [r4, #6]
 808820e:	f7ff fe4f 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088212:	2000      	movs	r0, #0
}
 8088214:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 8088216:	2001      	movs	r0, #1
 8088218:	e7fc      	b.n	8088214 <_ZN9SdSpiCard9writeDataEhPKh+0x46>

0808821a <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808821a:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 808821c:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808821e:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8088220:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8088222:	bf18      	it	ne
 8088224:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 8088226:	460a      	mov	r2, r1
 8088228:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808822a:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 808822c:	f7ff fea7 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
 8088230:	b130      	cbz	r0, 8088240 <_ZN9SdSpiCard10writeBlockEmPKh+0x26>
 8088232:	2306      	movs	r3, #6
 8088234:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8088236:	4620      	mov	r0, r4
 8088238:	f7ff fe3a 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808823c:	2500      	movs	r5, #0
 808823e:	e00a      	b.n	8088256 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
  if (!writeData(DATA_START_BLOCK, src)) {
 8088240:	462a      	mov	r2, r5
 8088242:	21fe      	movs	r1, #254	; 0xfe
 8088244:	4620      	mov	r0, r4
 8088246:	f7ff ffc2 	bl	80881ce <_ZN9SdSpiCard9writeDataEhPKh>
 808824a:	4605      	mov	r5, r0
 808824c:	2800      	cmp	r0, #0
 808824e:	d0f2      	beq.n	8088236 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  chipSelectHigh();
 8088250:	4620      	mov	r0, r4
 8088252:	f7ff fe2d 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8088256:	4628      	mov	r0, r5
 8088258:	bd38      	pop	{r3, r4, r5, pc}

0808825a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 808825a:	b570      	push	{r4, r5, r6, lr}
 808825c:	4604      	mov	r4, r0
 808825e:	460e      	mov	r6, r1
  bool selected = m_selected;
 8088260:	7905      	ldrb	r5, [r0, #4]
  chipSelectLow();
 8088262:	f7ff fe38 	bl	8087ed6 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8088266:	f44f 7116 	mov.w	r1, #600	; 0x258
 808826a:	4620      	mov	r0, r4
 808826c:	f7ff fe73 	bl	8087f56 <_ZN9SdSpiCard11waitNotBusyEt>
 8088270:	b930      	cbnz	r0, 8088280 <_ZN9SdSpiCard9writeDataEPKh+0x26>
 8088272:	2317      	movs	r3, #23
 8088274:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8088276:	4620      	mov	r0, r4
 8088278:	f7ff fe1a 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808827c:	2500      	movs	r5, #0
 808827e:	e00c      	b.n	808829a <_ZN9SdSpiCard9writeDataEPKh+0x40>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8088280:	4632      	mov	r2, r6
 8088282:	21fc      	movs	r1, #252	; 0xfc
 8088284:	4620      	mov	r0, r4
 8088286:	f7ff ffa2 	bl	80881ce <_ZN9SdSpiCard9writeDataEhPKh>
 808828a:	4606      	mov	r6, r0
 808828c:	2800      	cmp	r0, #0
 808828e:	d0f2      	beq.n	8088276 <_ZN9SdSpiCard9writeDataEPKh+0x1c>
  if (!selected) {
 8088290:	b91d      	cbnz	r5, 808829a <_ZN9SdSpiCard9writeDataEPKh+0x40>
    chipSelectHigh();
 8088292:	4620      	mov	r0, r4
 8088294:	f7ff fe0c 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8088298:	4635      	mov	r5, r6
}
 808829a:	4628      	mov	r0, r5
 808829c:	bd70      	pop	{r4, r5, r6, pc}

0808829e <_ZN9SdSpiCard10writeStartEmm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 808829e:	b570      	push	{r4, r5, r6, lr}
 80882a0:	4604      	mov	r4, r0
 80882a2:	4616      	mov	r6, r2
 80882a4:	460d      	mov	r5, r1
    cardCommand(CMD55, 0);
 80882a6:	2200      	movs	r2, #0
 80882a8:	2137      	movs	r1, #55	; 0x37
 80882aa:	f7ff fe68 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80882ae:	4632      	mov	r2, r6
 80882b0:	2117      	movs	r1, #23
 80882b2:	4620      	mov	r0, r4
 80882b4:	f7ff fe63 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 80882b8:	b130      	cbz	r0, 80882c8 <_ZN9SdSpiCard10writeStartEmm+0x2a>
    m_errorCode = code;
 80882ba:	2309      	movs	r3, #9
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 80882bc:	4620      	mov	r0, r4
 80882be:	71a3      	strb	r3, [r4, #6]
 80882c0:	f7ff fdf6 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80882c4:	2000      	movs	r0, #0
}
 80882c6:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
 80882c8:	7a63      	ldrb	r3, [r4, #9]
  if (cardCommand(CMD25, blockNumber)) {
 80882ca:	2119      	movs	r1, #25
  if (type() != SD_CARD_TYPE_SDHC) {
 80882cc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80882ce:	bf18      	it	ne
 80882d0:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, blockNumber)) {
 80882d2:	462a      	mov	r2, r5
 80882d4:	4620      	mov	r0, r4
 80882d6:	f7ff fe52 	bl	8087f7e <_ZN9SdSpiCard11cardCommandEhm>
 80882da:	b108      	cbz	r0, 80882e0 <_ZN9SdSpiCard10writeStartEmm+0x42>
 80882dc:	2307      	movs	r3, #7
 80882de:	e7ed      	b.n	80882bc <_ZN9SdSpiCard10writeStartEmm+0x1e>
  return true;
 80882e0:	2001      	movs	r0, #1
 80882e2:	e7f0      	b.n	80882c6 <_ZN9SdSpiCard10writeStartEmm+0x28>

080882e4 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 80882e4:	b538      	push	{r3, r4, r5, lr}
 80882e6:	4604      	mov	r4, r0
  chipSelectLow();
 80882e8:	f7ff fdf5 	bl	8087ed6 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80882ec:	f44f 7116 	mov.w	r1, #600	; 0x258
 80882f0:	4620      	mov	r0, r4
 80882f2:	f7ff fe30 	bl	8087f56 <_ZN9SdSpiCard11waitNotBusyEt>
 80882f6:	b178      	cbz	r0, 8088318 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 80882f8:	21fd      	movs	r1, #253	; 0xfd
 80882fa:	6820      	ldr	r0, [r4, #0]
 80882fc:	f7ff fdd5 	bl	8087eaa <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8088300:	f44f 7116 	mov.w	r1, #600	; 0x258
 8088304:	4620      	mov	r0, r4
 8088306:	f7ff fe26 	bl	8087f56 <_ZN9SdSpiCard11waitNotBusyEt>
 808830a:	4605      	mov	r5, r0
 808830c:	b120      	cbz	r0, 8088318 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  chipSelectHigh();
 808830e:	4620      	mov	r0, r4
 8088310:	f7ff fdce 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
 8088314:	4628      	mov	r0, r5
 8088316:	bd38      	pop	{r3, r4, r5, pc}
 8088318:	2312      	movs	r3, #18
  chipSelectHigh();
 808831a:	4620      	mov	r0, r4
 808831c:	71a3      	strb	r3, [r4, #6]
 808831e:	f7ff fdc7 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088322:	2500      	movs	r5, #0
 8088324:	e7f6      	b.n	8088314 <_ZN9SdSpiCard9writeStopEv+0x30>

08088326 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8088326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088328:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 808832a:	461a      	mov	r2, r3
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 808832c:	4604      	mov	r4, r0
 808832e:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8088330:	f7ff ffb5 	bl	808829e <_ZN9SdSpiCard10writeStartEmm>
 8088334:	b170      	cbz	r0, 8088354 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 8088336:	2500      	movs	r5, #0
 8088338:	42b5      	cmp	r5, r6
  return writeStop();
 808833a:	4620      	mov	r0, r4
 808833c:	eb07 2145 	add.w	r1, r7, r5, lsl #9
  for (size_t b = 0; b < count; b++, src += 512) {
 8088340:	d004      	beq.n	808834c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8088342:	f7ff ff8a 	bl	808825a <_ZN9SdSpiCard9writeDataEPKh>
 8088346:	b128      	cbz	r0, 8088354 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 8088348:	3501      	adds	r5, #1
 808834a:	e7f5      	b.n	8088338 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
}
 808834c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
 8088350:	f7ff bfc8 	b.w	80882e4 <_ZN9SdSpiCard9writeStopEv>
  chipSelectHigh();
 8088354:	4620      	mov	r0, r4
 8088356:	f7ff fdab 	bl	8087eb0 <_ZN9SdSpiCard14chipSelectHighEv>
}
 808835a:	2000      	movs	r0, #0
 808835c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08088360 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8088360:	2201      	movs	r2, #1
 8088362:	4b01      	ldr	r3, [pc, #4]	; (8088368 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8088364:	701a      	strb	r2, [r3, #0]
}
 8088366:	4770      	bx	lr
 8088368:	20000d44 	.word	0x20000d44

0808836c <_ZN5SdSpi14endTransactionEv>:
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
}
 808836c:	4770      	bx	lr
	...

08088370 <_ZN5SdSpi5beginEh>:
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8088370:	7902      	ldrb	r2, [r0, #4]
 8088372:	4b02      	ldr	r3, [pc, #8]	; (808837c <_ZN5SdSpi5beginEh+0xc>)
 8088374:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8088378:	f002 be1c 	b.w	808afb4 <_ZN8SPIClass5beginEt>
 808837c:	20000d48 	.word	0x20000d48

08088380 <_ZN5SdSpi16beginTransactionEh>:
void SdSpi::beginTransaction(uint8_t divisor) {
 8088380:	b570      	push	{r4, r5, r6, lr}
 8088382:	4605      	mov	r5, r0
 8088384:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8088386:	7903      	ldrb	r3, [r0, #4]
 8088388:	4e19      	ldr	r6, [pc, #100]	; (80883f0 <_ZN5SdSpi16beginTransactionEh+0x70>)
 808838a:	2101      	movs	r1, #1
 808838c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8088390:	f002 fe1e 	bl	808afd0 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8088394:	792b      	ldrb	r3, [r5, #4]
 8088396:	2100      	movs	r1, #0
 8088398:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 808839c:	f002 fe26 	bl	808afec <_ZN8SPIClass11setDataModeEh>
  if (divisor <= 2) {
 80883a0:	2c02      	cmp	r4, #2
 80883a2:	d91b      	bls.n	80883dc <_ZN5SdSpi16beginTransactionEh+0x5c>
  } else  if (divisor <= 4) {
 80883a4:	2c04      	cmp	r4, #4
 80883a6:	d91b      	bls.n	80883e0 <_ZN5SdSpi16beginTransactionEh+0x60>
  } else  if (divisor <= 8) {
 80883a8:	2c08      	cmp	r4, #8
 80883aa:	d91b      	bls.n	80883e4 <_ZN5SdSpi16beginTransactionEh+0x64>
  } else  if (divisor <= 16) {
 80883ac:	2c10      	cmp	r4, #16
 80883ae:	d91b      	bls.n	80883e8 <_ZN5SdSpi16beginTransactionEh+0x68>
  } else  if (divisor <= 32) {
 80883b0:	2c20      	cmp	r4, #32
 80883b2:	d91b      	bls.n	80883ec <_ZN5SdSpi16beginTransactionEh+0x6c>
    v = SPI_CLOCK_DIV128;
 80883b4:	2c41      	cmp	r4, #65	; 0x41
 80883b6:	bf34      	ite	cc
 80883b8:	2128      	movcc	r1, #40	; 0x28
 80883ba:	2130      	movcs	r1, #48	; 0x30
  spiPtr[m_spiIf]->setClockDivider(v);
 80883bc:	792b      	ldrb	r3, [r5, #4]
 80883be:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80883c2:	f002 fe63 	bl	808b08c <_ZN8SPIClass15setClockDividerEh>
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 80883c6:	7929      	ldrb	r1, [r5, #4]
 80883c8:	233c      	movs	r3, #60	; 0x3c
 80883ca:	fb01 4404 	mla	r4, r1, r4, r4
 80883ce:	2118      	movs	r1, #24
 80883d0:	434c      	muls	r4, r1
 80883d2:	fbb4 f4f3 	udiv	r4, r4, r3
 80883d6:	4b07      	ldr	r3, [pc, #28]	; (80883f4 <_ZN5SdSpi16beginTransactionEh+0x74>)
 80883d8:	601c      	str	r4, [r3, #0]
}
 80883da:	bd70      	pop	{r4, r5, r6, pc}
    v = SPI_CLOCK_DIV2;
 80883dc:	2100      	movs	r1, #0
 80883de:	e7ed      	b.n	80883bc <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV4;
 80883e0:	2108      	movs	r1, #8
 80883e2:	e7eb      	b.n	80883bc <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV8;
 80883e4:	2110      	movs	r1, #16
 80883e6:	e7e9      	b.n	80883bc <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV16;
 80883e8:	2118      	movs	r1, #24
 80883ea:	e7e7      	b.n	80883bc <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV32;
 80883ec:	2120      	movs	r1, #32
 80883ee:	e7e5      	b.n	80883bc <_ZN5SdSpi16beginTransactionEh+0x3c>
 80883f0:	20000d48 	.word	0x20000d48
 80883f4:	20000d54 	.word	0x20000d54

080883f8 <_ZN5SdSpi7receiveEv>:
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 80883f8:	7902      	ldrb	r2, [r0, #4]
 80883fa:	4b03      	ldr	r3, [pc, #12]	; (8088408 <_ZN5SdSpi7receiveEv+0x10>)
 80883fc:	21ff      	movs	r1, #255	; 0xff
 80883fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8088402:	f002 be67 	b.w	808b0d4 <_ZN8SPIClass8transferEh>
 8088406:	bf00      	nop
 8088408:	20000d48 	.word	0x20000d48

0808840c <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 808840c:	7902      	ldrb	r2, [r0, #4]
 808840e:	4b02      	ldr	r3, [pc, #8]	; (8088418 <_ZN5SdSpi4sendEh+0xc>)
 8088410:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8088414:	f002 be5e 	b.w	808b0d4 <_ZN8SPIClass8transferEh>
 8088418:	20000d48 	.word	0x20000d48

0808841c <_ZN5SdSpi7receiveEPhj>:
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 808841c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808841e:	460e      	mov	r6, r1
  SPI_DMA_TransferCompleted = false;
 8088420:	2100      	movs	r1, #0
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8088422:	4613      	mov	r3, r2
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8088424:	4a0a      	ldr	r2, [pc, #40]	; (8088450 <_ZN5SdSpi7receiveEPhj+0x34>)
 8088426:	7905      	ldrb	r5, [r0, #4]
 8088428:	480a      	ldr	r0, [pc, #40]	; (8088454 <_ZN5SdSpi7receiveEPhj+0x38>)
 808842a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
 808842c:	4c0a      	ldr	r4, [pc, #40]	; (8088458 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808842e:	4632      	mov	r2, r6
 8088430:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  SPI_DMA_TransferCompleted = false;
 8088434:	7021      	strb	r1, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8088436:	f002 fe53 	bl	808b0e0 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 808843a:	7823      	ldrb	r3, [r4, #0]
 808843c:	2b00      	cmp	r3, #0
 808843e:	d0fc      	beq.n	808843a <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8088440:	4b06      	ldr	r3, [pc, #24]	; (808845c <_ZN5SdSpi7receiveEPhj+0x40>)
 8088442:	6818      	ldr	r0, [r3, #0]
 8088444:	b108      	cbz	r0, 808844a <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8088446:	f002 f901 	bl	808a64c <HAL_Delay_Microseconds>
}
 808844a:	2000      	movs	r0, #0
 808844c:	b002      	add	sp, #8
 808844e:	bd70      	pop	{r4, r5, r6, pc}
 8088450:	08088361 	.word	0x08088361
 8088454:	20000d48 	.word	0x20000d48
 8088458:	20000d44 	.word	0x20000d44
 808845c:	20000d54 	.word	0x20000d54

08088460 <_ZN5SdSpi4sendEPKhj>:
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8088460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8088462:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
 8088464:	2200      	movs	r2, #0

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8088466:	7905      	ldrb	r5, [r0, #4]
 8088468:	480a      	ldr	r0, [pc, #40]	; (8088494 <_ZN5SdSpi4sendEPKhj+0x34>)
  SPI_DMA_TransferCompleted = false;
 808846a:	4c0b      	ldr	r4, [pc, #44]	; (8088498 <_ZN5SdSpi4sendEPKhj+0x38>)
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 808846c:	9000      	str	r0, [sp, #0]
 808846e:	480b      	ldr	r0, [pc, #44]	; (808849c <_ZN5SdSpi4sendEPKhj+0x3c>)
  SPI_DMA_TransferCompleted = false;
 8088470:	7022      	strb	r2, [r4, #0]
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8088472:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8088476:	f002 fe33 	bl	808b0e0 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 808847a:	7823      	ldrb	r3, [r4, #0]
 808847c:	2b00      	cmp	r3, #0
 808847e:	d0fc      	beq.n	808847a <_ZN5SdSpi4sendEPKhj+0x1a>
  if (bugDelay) {
 8088480:	4b07      	ldr	r3, [pc, #28]	; (80884a0 <_ZN5SdSpi4sendEPKhj+0x40>)
 8088482:	6818      	ldr	r0, [r3, #0]
 8088484:	b120      	cbz	r0, 8088490 <_ZN5SdSpi4sendEPKhj+0x30>
    delayMicroseconds(bugDelay);
  }
}
 8088486:	b003      	add	sp, #12
 8088488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 808848c:	f002 b8de 	b.w	808a64c <HAL_Delay_Microseconds>
 8088490:	b003      	add	sp, #12
 8088492:	bd30      	pop	{r4, r5, pc}
 8088494:	08088361 	.word	0x08088361
 8088498:	20000d44 	.word	0x20000d44
 808849c:	20000d48 	.word	0x20000d48
 80884a0:	20000d54 	.word	0x20000d54

080884a4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80884a4:	b510      	push	{r4, lr}
 80884a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80884a8:	6880      	ldr	r0, [r0, #8]
 80884aa:	b108      	cbz	r0, 80884b0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80884ac:	f002 f916 	bl	808a6dc <os_mutex_recursive_destroy>
 80884b0:	4620      	mov	r0, r4
 80884b2:	bd10      	pop	{r4, pc}

080884b4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 80884b4:	b538      	push	{r3, r4, r5, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80884b6:	4d25      	ldr	r5, [pc, #148]	; (808854c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x98>)
 80884b8:	7829      	ldrb	r1, [r5, #0]
 80884ba:	f3bf 8f5b 	dmb	ish
 80884be:	f011 0401 	ands.w	r4, r1, #1
 80884c2:	d10f      	bne.n	80884e4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x30>
 80884c4:	4628      	mov	r0, r5
 80884c6:	f7f7 fdee 	bl	80800a6 <__cxa_guard_acquire>
 80884ca:	b158      	cbz	r0, 80884e4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x30>
 80884cc:	4621      	mov	r1, r4
 80884ce:	4820      	ldr	r0, [pc, #128]	; (8088550 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 80884d0:	f002 fd53 	bl	808af7a <_ZN8SPIClassC1E19hal_spi_interface_t>
 80884d4:	4628      	mov	r0, r5
 80884d6:	f7f7 fdeb 	bl	80800b0 <__cxa_guard_release>
 80884da:	4a1e      	ldr	r2, [pc, #120]	; (8088554 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 80884dc:	491e      	ldr	r1, [pc, #120]	; (8088558 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 80884de:	481c      	ldr	r0, [pc, #112]	; (8088550 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 80884e0:	f004 ff92 	bl	808d408 <__aeabi_atexit>
};
 80884e4:	4b1a      	ldr	r3, [pc, #104]	; (8088550 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 80884e6:	4c1d      	ldr	r4, [pc, #116]	; (808855c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa8>)
 80884e8:	4d1d      	ldr	r5, [pc, #116]	; (8088560 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xac>)
 80884ea:	6023      	str	r3, [r4, #0]
 80884ec:	782b      	ldrb	r3, [r5, #0]
 80884ee:	f3bf 8f5b 	dmb	ish
 80884f2:	07da      	lsls	r2, r3, #31
 80884f4:	d40f      	bmi.n	8088516 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x62>
 80884f6:	4628      	mov	r0, r5
 80884f8:	f7f7 fdd5 	bl	80800a6 <__cxa_guard_acquire>
 80884fc:	b158      	cbz	r0, 8088516 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x62>
 80884fe:	2101      	movs	r1, #1
 8088500:	4818      	ldr	r0, [pc, #96]	; (8088564 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8088502:	f002 fd3a 	bl	808af7a <_ZN8SPIClassC1E19hal_spi_interface_t>
 8088506:	4628      	mov	r0, r5
 8088508:	f7f7 fdd2 	bl	80800b0 <__cxa_guard_release>
 808850c:	4a11      	ldr	r2, [pc, #68]	; (8088554 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 808850e:	4912      	ldr	r1, [pc, #72]	; (8088558 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8088510:	4814      	ldr	r0, [pc, #80]	; (8088564 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8088512:	f004 ff79 	bl	808d408 <__aeabi_atexit>
 8088516:	4b13      	ldr	r3, [pc, #76]	; (8088564 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8088518:	4d13      	ldr	r5, [pc, #76]	; (8088568 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb4>)
 808851a:	6063      	str	r3, [r4, #4]
 808851c:	782b      	ldrb	r3, [r5, #0]
 808851e:	f3bf 8f5b 	dmb	ish
 8088522:	07db      	lsls	r3, r3, #31
 8088524:	d40f      	bmi.n	8088546 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x92>
 8088526:	4628      	mov	r0, r5
 8088528:	f7f7 fdbd 	bl	80800a6 <__cxa_guard_acquire>
 808852c:	b158      	cbz	r0, 8088546 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x92>
 808852e:	2102      	movs	r1, #2
 8088530:	480e      	ldr	r0, [pc, #56]	; (808856c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8088532:	f002 fd22 	bl	808af7a <_ZN8SPIClassC1E19hal_spi_interface_t>
 8088536:	4628      	mov	r0, r5
 8088538:	f7f7 fdba 	bl	80800b0 <__cxa_guard_release>
 808853c:	4a05      	ldr	r2, [pc, #20]	; (8088554 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 808853e:	4906      	ldr	r1, [pc, #24]	; (8088558 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8088540:	480a      	ldr	r0, [pc, #40]	; (808856c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8088542:	f004 ff61 	bl	808d408 <__aeabi_atexit>
 8088546:	4b09      	ldr	r3, [pc, #36]	; (808856c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8088548:	60a3      	str	r3, [r4, #8]
}
 808854a:	bd38      	pop	{r3, r4, r5, pc}
 808854c:	20000d34 	.word	0x20000d34
 8088550:	20000d38 	.word	0x20000d38
 8088554:	20000328 	.word	0x20000328
 8088558:	080884a5 	.word	0x080884a5
 808855c:	20000d48 	.word	0x20000d48
 8088560:	20000d24 	.word	0x20000d24
 8088564:	20000d28 	.word	0x20000d28
 8088568:	20000d14 	.word	0x20000d14
 808856c:	20000d18 	.word	0x20000d18

08088570 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8088570:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8088572:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
 8088574:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8088578:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 808857a:	f100 0210 	add.w	r2, r0, #16
 808857e:	6880      	ldr	r0, [r0, #8]
 8088580:	f000 bbed 	b.w	8088d5e <_ZN9FatVolume15allocateClusterEmPm>

08088584 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8088584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8088588:	7801      	ldrb	r1, [r0, #0]
bool FatFile::addDirCluster() {
 808858a:	4604      	mov	r4, r0
  if (isRootFixed()) {
 808858c:	f011 0520 	ands.w	r5, r1, #32
 8088590:	d003      	beq.n	808859a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8088592:	2600      	movs	r6, #0
}
 8088594:	4630      	mov	r0, r6
 8088596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
 808859a:	6942      	ldr	r2, [r0, #20]
 808859c:	4b17      	ldr	r3, [pc, #92]	; (80885fc <_ZN7FatFile13addDirClusterEv+0x78>)
 808859e:	429a      	cmp	r2, r3
 80885a0:	d2f7      	bcs.n	8088592 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
 80885a2:	f7ff ffe5 	bl	8088570 <_ZN7FatFile10addClusterEv>
 80885a6:	4606      	mov	r6, r0
 80885a8:	2800      	cmp	r0, #0
 80885aa:	d0f2      	beq.n	8088592 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterStartBlock(m_curCluster);
 80885ac:	6921      	ldr	r1, [r4, #16]
 80885ae:	68a0      	ldr	r0, [r4, #8]
 80885b0:	f000 fb76 	bl	8088ca0 <_ZNK9FatVolume17clusterStartBlockEm>
 80885b4:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
 80885b6:	68a0      	ldr	r0, [r4, #8]
 80885b8:	2205      	movs	r2, #5
 80885ba:	4639      	mov	r1, r7
 80885bc:	3028      	adds	r0, #40	; 0x28
 80885be:	f000 fb4c 	bl	8088c5a <_ZN8FatCache4readEmh>
  if (!pc) {
 80885c2:	4680      	mov	r8, r0
 80885c4:	2800      	cmp	r0, #0
 80885c6:	d0e4      	beq.n	8088592 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
 80885c8:	4629      	mov	r1, r5
 80885ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80885ce:	f006 faaf 	bl	808eb30 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80885d2:	2501      	movs	r5, #1
 80885d4:	68a0      	ldr	r0, [r4, #8]
 80885d6:	7902      	ldrb	r2, [r0, #4]
 80885d8:	42aa      	cmp	r2, r5
 80885da:	d909      	bls.n	80885f0 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80885dc:	6803      	ldr	r3, [r0, #0]
 80885de:	4642      	mov	r2, r8
 80885e0:	685b      	ldr	r3, [r3, #4]
 80885e2:	19e9      	adds	r1, r5, r7
 80885e4:	4798      	blx	r3
 80885e6:	2800      	cmp	r0, #0
 80885e8:	d0d3      	beq.n	8088592 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80885ea:	3501      	adds	r5, #1
 80885ec:	b2ed      	uxtb	r5, r5
 80885ee:	e7f1      	b.n	80885d4 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80885f0:	6963      	ldr	r3, [r4, #20]
 80885f2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80885f6:	6163      	str	r3, [r4, #20]
  return true;
 80885f8:	e7cc      	b.n	8088594 <_ZN7FatFile13addDirClusterEv+0x10>
 80885fa:	bf00      	nop
 80885fc:	001ffe00 	.word	0x001ffe00

08088600 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8088600:	b510      	push	{r4, lr}
 8088602:	4604      	mov	r4, r0
 8088604:	6880      	ldr	r0, [r0, #8]
 8088606:	460a      	mov	r2, r1
 8088608:	3028      	adds	r0, #40	; 0x28
 808860a:	69a1      	ldr	r1, [r4, #24]
 808860c:	f000 fb25 	bl	8088c5a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8088610:	b120      	cbz	r0, 808861c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8088612:	88a3      	ldrh	r3, [r4, #4]
 8088614:	f003 030f 	and.w	r3, r3, #15
 8088618:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 808861c:	bd10      	pop	{r4, pc}

0808861e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 808861e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8088620:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
 8088622:	4605      	mov	r5, r0
 8088624:	460e      	mov	r6, r1
  if (isOpen()) {
 8088626:	b94c      	cbnz	r4, 808863c <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8088628:	2224      	movs	r2, #36	; 0x24
 808862a:	4621      	mov	r1, r4
 808862c:	f006 fa80 	bl	808eb30 <memset>

  m_vol = vol;
 8088630:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8088632:	79f3      	ldrb	r3, [r6, #7]
 8088634:	2b10      	cmp	r3, #16
 8088636:	d003      	beq.n	8088640 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8088638:	2b20      	cmp	r3, #32
 808863a:	d007      	beq.n	808864c <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = O_READ;
  return true;

fail:
  return false;
 808863c:	2000      	movs	r0, #0
 808863e:	e004      	b.n	808864a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
 8088640:	2320      	movs	r3, #32
  m_flags = O_READ;
 8088642:	2401      	movs	r4, #1
  return true;
 8088644:	4620      	mov	r0, r4
    m_attr = FILE_ATTR_ROOT32;
 8088646:	702b      	strb	r3, [r5, #0]
  m_flags = O_READ;
 8088648:	70ac      	strb	r4, [r5, #2]
}
 808864a:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
 808864c:	2340      	movs	r3, #64	; 0x40
 808864e:	e7f8      	b.n	8088642 <_ZN7FatFile8openRootEP9FatVolume+0x24>

08088650 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8088650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8088654:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
 8088656:	4604      	mov	r4, r0
 8088658:	4688      	mov	r8, r1
 808865a:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & O_READ)) {
 808865c:	2b00      	cmp	r3, #0
 808865e:	d05d      	beq.n	808871c <_ZN7FatFile4readEPvj+0xcc>
 8088660:	7882      	ldrb	r2, [r0, #2]
 8088662:	07d1      	lsls	r1, r2, #31
 8088664:	d55a      	bpl.n	808871c <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8088666:	071a      	lsls	r2, r3, #28
 8088668:	d52d      	bpl.n	80886c6 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 808866a:	69c3      	ldr	r3, [r0, #28]
 808866c:	6942      	ldr	r2, [r0, #20]
 808866e:	1a9b      	subs	r3, r3, r2
 8088670:	429d      	cmp	r5, r3
 8088672:	bf28      	it	cs
 8088674:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8088676:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
 8088678:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808867c:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
 8088680:	2e00      	cmp	r6, #0
 8088682:	f000 8090 	beq.w	80887a6 <_ZN7FatFile4readEPvj+0x156>
    if (isRootFixed()) {
 8088686:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
 8088688:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 808868a:	0697      	lsls	r7, r2, #26
 808868c:	68a0      	ldr	r0, [r4, #8]
    offset = m_curPosition & 0X1FF;  // offset in block
 808868e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
 8088692:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8088696:	d51f      	bpl.n	80886d8 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8088698:	6a00      	ldr	r0, [r0, #32]
 808869a:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 808869c:	68a0      	ldr	r0, [r4, #8]
 808869e:	f1ba 0f00 	cmp.w	sl, #0
 80886a2:	d142      	bne.n	808872a <_ZN7FatFile4readEPvj+0xda>
 80886a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80886a8:	d33f      	bcc.n	808872a <_ZN7FatFile4readEPvj+0xda>
    return m_cache.lbn();
 80886aa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80886ac:	4291      	cmp	r1, r2
 80886ae:	d03c      	beq.n	808872a <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 80886b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80886b4:	d252      	bcs.n	808875c <_ZN7FatFile4readEPvj+0x10c>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80886b6:	6803      	ldr	r3, [r0, #0]
 80886b8:	4642      	mov	r2, r8
 80886ba:	681b      	ldr	r3, [r3, #0]
 80886bc:	4798      	blx	r3
 80886be:	b368      	cbz	r0, 808871c <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
 80886c0:	f44f 7700 	mov.w	r7, #512	; 0x200
 80886c4:	e044      	b.n	8088750 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
 80886c6:	069b      	lsls	r3, r3, #26
 80886c8:	d5d5      	bpl.n	8088676 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 80886ca:	6883      	ldr	r3, [r0, #8]
 80886cc:	891a      	ldrh	r2, [r3, #8]
 80886ce:	6943      	ldr	r3, [r0, #20]
 80886d0:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 80886d4:	b29b      	uxth	r3, r3
 80886d6:	e7cb      	b.n	8088670 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80886d8:	f890 9005 	ldrb.w	r9, [r0, #5]
 80886dc:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
 80886e0:	f1ba 0f00 	cmp.w	sl, #0
 80886e4:	d108      	bne.n	80886f8 <_ZN7FatFile4readEPvj+0xa8>
 80886e6:	f1b9 0f00 	cmp.w	r9, #0
 80886ea:	d105      	bne.n	80886f8 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
 80886ec:	b95b      	cbnz	r3, 8088706 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80886ee:	0653      	lsls	r3, r2, #25
 80886f0:	bf4c      	ite	mi
 80886f2:	6a03      	ldrmi	r3, [r0, #32]
 80886f4:	6a23      	ldrpl	r3, [r4, #32]
 80886f6:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80886f8:	6921      	ldr	r1, [r4, #16]
 80886fa:	68a0      	ldr	r0, [r4, #8]
 80886fc:	f000 fad0 	bl	8088ca0 <_ZNK9FatVolume17clusterStartBlockEm>
 8088700:	eb09 0100 	add.w	r1, r9, r0
 8088704:	e7ca      	b.n	808869c <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088706:	465a      	mov	r2, fp
 8088708:	6921      	ldr	r1, [r4, #16]
 808870a:	f000 facf 	bl	8088cac <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 808870e:	2800      	cmp	r0, #0
 8088710:	db04      	blt.n	808871c <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
 8088712:	d1f1      	bne.n	80886f8 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
 8088714:	7823      	ldrb	r3, [r4, #0]
 8088716:	f013 0f70 	tst.w	r3, #112	; 0x70
 808871a:	d144      	bne.n	80887a6 <_ZN7FatFile4readEPvj+0x156>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 808871c:	7863      	ldrb	r3, [r4, #1]
  return -1;
 808871e:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
 8088722:	f043 0302 	orr.w	r3, r3, #2
 8088726:	7063      	strb	r3, [r4, #1]
  return -1;
 8088728:	e03e      	b.n	80887a8 <_ZN7FatFile4readEPvj+0x158>
      n = 512 - offset;
 808872a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
 808872e:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
 8088730:	f04f 0200 	mov.w	r2, #0
 8088734:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8088738:	bf28      	it	cs
 808873a:	4637      	movcs	r7, r6
 808873c:	f000 fa8d 	bl	8088c5a <_ZN8FatCache4readEmh>
      if (!pc) {
 8088740:	2800      	cmp	r0, #0
 8088742:	d0eb      	beq.n	808871c <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
 8088744:	eb00 010a 	add.w	r1, r0, sl
 8088748:	463a      	mov	r2, r7
 808874a:	4640      	mov	r0, r8
 808874c:	f006 f9e2 	bl	808eb14 <memcpy>
    m_curPosition += n;
 8088750:	6963      	ldr	r3, [r4, #20]
    dst += n;
 8088752:	44b8      	add	r8, r7
    m_curPosition += n;
 8088754:	443b      	add	r3, r7
 8088756:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8088758:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 808875a:	e791      	b.n	8088680 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
 808875c:	7827      	ldrb	r7, [r4, #0]
      uint8_t nb = toRead >> 9;
 808875e:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 8088762:	06bf      	lsls	r7, r7, #26
 8088764:	d406      	bmi.n	8088774 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8088766:	7907      	ldrb	r7, [r0, #4]
 8088768:	eba7 0709 	sub.w	r7, r7, r9
 808876c:	b2ff      	uxtb	r7, r7
 808876e:	42bb      	cmp	r3, r7
 8088770:	bf28      	it	cs
 8088772:	463b      	movcs	r3, r7
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8088774:	4291      	cmp	r1, r2
      n = 512*nb;
 8088776:	ea4f 2743 	mov.w	r7, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808877a:	d208      	bcs.n	808878e <_ZN7FatFile4readEPvj+0x13e>
      if (!m_vol->readBlocks(block, dst, nb)) {
 808877c:	68a0      	ldr	r0, [r4, #8]
 808877e:	6802      	ldr	r2, [r0, #0]
 8088780:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8088784:	4642      	mov	r2, r8
 8088786:	47d0      	blx	sl
 8088788:	2800      	cmp	r0, #0
 808878a:	d1e1      	bne.n	8088750 <_ZN7FatFile4readEPvj+0x100>
 808878c:	e7c6      	b.n	808871c <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808878e:	441a      	add	r2, r3
 8088790:	428a      	cmp	r2, r1
 8088792:	d9f3      	bls.n	808877c <_ZN7FatFile4readEPvj+0x12c>
 8088794:	e9cd 1300 	strd	r1, r3, [sp]
        if (!m_vol->cacheSync()) {
 8088798:	f7ff f874 	bl	8087884 <_ZN9FatVolume9cacheSyncEv>
 808879c:	e9dd 1300 	ldrd	r1, r3, [sp]
 80887a0:	2800      	cmp	r0, #0
 80887a2:	d1eb      	bne.n	808877c <_ZN7FatFile4readEPvj+0x12c>
 80887a4:	e7ba      	b.n	808871c <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
 80887a6:	1ba8      	subs	r0, r5, r6
}
 80887a8:	b003      	add	sp, #12
 80887aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080887ae <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 80887ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
 80887b0:	2201      	movs	r2, #1
  pos->cluster = m_curCluster;
 80887b2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80887b6:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 80887ba:	4604      	mov	r4, r0
 80887bc:	f7ff ff48 	bl	8088650 <_ZN7FatFile4readEPvj>
 80887c0:	2801      	cmp	r0, #1
 80887c2:	bf12      	itee	ne
 80887c4:	f04f 30ff 	movne.w	r0, #4294967295
 80887c8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
 80887cc:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
 80887d0:	b002      	add	sp, #8
 80887d2:	bd70      	pop	{r4, r5, r6, pc}

080887d4 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80887d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80887d6:	6943      	ldr	r3, [r0, #20]
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80887d8:	4604      	mov	r4, r0
  if (i == 0 || !skipReadOk) {
 80887da:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80887de:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 80887e2:	d000      	beq.n	80887e6 <_ZN7FatFile12readDirCacheEb+0x12>
 80887e4:	b999      	cbnz	r1, 808880e <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 80887e6:	2201      	movs	r2, #1
 80887e8:	4620      	mov	r0, r4
 80887ea:	f10d 0107 	add.w	r1, sp, #7
 80887ee:	f7ff ff2f 	bl	8088650 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
 80887f2:	b240      	sxtb	r0, r0
 80887f4:	2801      	cmp	r0, #1
 80887f6:	d002      	beq.n	80887fe <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
 80887f8:	2000      	movs	r0, #0
}
 80887fa:	b003      	add	sp, #12
 80887fc:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
 80887fe:	6963      	ldr	r3, [r4, #20]
 8088800:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
 8088802:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
 8088804:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
 8088806:	3034      	adds	r0, #52	; 0x34
 8088808:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 808880c:	e7f5      	b.n	80887fa <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
 808880e:	3320      	adds	r3, #32
 8088810:	e7f7      	b.n	8088802 <_ZN7FatFile12readDirCacheEb+0x2e>

08088812 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
 8088812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
 8088816:	7802      	ldrb	r2, [r0, #0]
bool FatFile::seekSet(uint32_t pos) {
 8088818:	4604      	mov	r4, r0
 808881a:	460d      	mov	r5, r1
  uint32_t tmp = m_curCluster;
 808881c:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
 808881e:	b162      	cbz	r2, 808883a <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
 8088820:	6940      	ldr	r0, [r0, #20]
 8088822:	4288      	cmp	r0, r1
 8088824:	d002      	beq.n	808882c <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
 8088826:	b919      	cbnz	r1, 8088830 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
 8088828:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
 808882a:	6165      	str	r5, [r4, #20]
    return true;
 808882c:	2001      	movs	r0, #1
 808882e:	e006      	b.n	808883e <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
 8088830:	0716      	lsls	r6, r2, #28
 8088832:	d506      	bpl.n	8088842 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
 8088834:	69e3      	ldr	r3, [r4, #28]
 8088836:	428b      	cmp	r3, r1
 8088838:	d20b      	bcs.n	8088852 <_ZN7FatFile7seekSetEm+0x40>
  return false;
 808883a:	2000      	movs	r0, #0
  m_curCluster = tmp;
 808883c:	6127      	str	r7, [r4, #16]
}
 808883e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 8088842:	0691      	lsls	r1, r2, #26
 8088844:	d505      	bpl.n	8088852 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8088846:	68a3      	ldr	r3, [r4, #8]
 8088848:	891b      	ldrh	r3, [r3, #8]
 808884a:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 808884e:	d9ec      	bls.n	808882a <_ZN7FatFile7seekSetEm+0x18>
 8088850:	e7f3      	b.n	808883a <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8088852:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8088856:	1e43      	subs	r3, r0, #1
 8088858:	f89c 6006 	ldrb.w	r6, [ip, #6]
 808885c:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8088860:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8088862:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8088864:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
 8088866:	42b3      	cmp	r3, r6
 8088868:	d800      	bhi.n	808886c <_ZN7FatFile7seekSetEm+0x5a>
 808886a:	b998      	cbnz	r0, 8088894 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 808886c:	0653      	lsls	r3, r2, #25
 808886e:	bf4c      	ite	mi
 8088870:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 8088874:	6a23      	ldrpl	r3, [r4, #32]
 8088876:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8088878:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 808887c:	2e00      	cmp	r6, #0
 808887e:	d0d4      	beq.n	808882a <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8088880:	4642      	mov	r2, r8
 8088882:	6921      	ldr	r1, [r4, #16]
 8088884:	68a0      	ldr	r0, [r4, #8]
 8088886:	f000 fa11 	bl	8088cac <_ZN9FatVolume6fatGetEmPm>
 808888a:	2800      	cmp	r0, #0
 808888c:	f106 36ff 	add.w	r6, r6, #4294967295
 8088890:	dcf4      	bgt.n	808887c <_ZN7FatFile7seekSetEm+0x6a>
 8088892:	e7d2      	b.n	808883a <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
 8088894:	1af6      	subs	r6, r6, r3
 8088896:	e7ef      	b.n	8088878 <_ZN7FatFile7seekSetEm+0x66>

08088898 <_ZN7FatFile15openCachedEntryEPS_thh>:
                              uint8_t oflag, uint8_t lfnOrd) {
 8088898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808889a:	460f      	mov	r7, r1
 808889c:	4604      	mov	r4, r0
 808889e:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
 80888a0:	2100      	movs	r1, #0
 80888a2:	2224      	movs	r2, #36	; 0x24
                              uint8_t oflag, uint8_t lfnOrd) {
 80888a4:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
 80888a6:	f006 f943 	bl	808eb30 <memset>
  m_vol = dirFile->m_vol;
 80888aa:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80888ac:	80a5      	strh	r5, [r4, #4]
  m_vol = dirFile->m_vol;
 80888ae:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 80888b0:	6a3b      	ldr	r3, [r7, #32]
 80888b2:	f005 050f 	and.w	r5, r5, #15
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80888b6:	f100 0234 	add.w	r2, r0, #52	; 0x34
  m_dirCluster = dirFile->m_firstCluster;
 80888ba:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80888bc:	016b      	lsls	r3, r5, #5
 80888be:	eb02 1545 	add.w	r5, r2, r5, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80888c2:	7aea      	ldrb	r2, [r5, #11]
 80888c4:	0717      	lsls	r7, r2, #28
 80888c6:	d502      	bpl.n	80888ce <_ZN7FatFile15openCachedEntryEPS_thh+0x36>
  m_attr = FILE_ATTR_CLOSED;
 80888c8:	2000      	movs	r0, #0
 80888ca:	7020      	strb	r0, [r4, #0]
}
 80888cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80888ce:	18c2      	adds	r2, r0, r3
 80888d0:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
 80888d4:	f001 0117 	and.w	r1, r1, #23
 80888d8:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80888da:	7aea      	ldrb	r2, [r5, #11]
 80888dc:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
 80888e0:	bf08      	it	eq
 80888e2:	f041 0108 	orreq.w	r1, r1, #8
  m_lfnOrd = lfnOrd;
 80888e6:	f89d 2018 	ldrb.w	r2, [sp, #24]
    m_attr |= FILE_ATTR_FILE;
 80888ea:	bf08      	it	eq
 80888ec:	7021      	strbeq	r1, [r4, #0]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80888ee:	f016 0f32 	tst.w	r6, #50	; 0x32
  m_lfnOrd = lfnOrd;
 80888f2:	70e2      	strb	r2, [r4, #3]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80888f4:	d004      	beq.n	8088900 <_ZN7FatFile15openCachedEntryEPS_thh+0x68>
    if (isSubDir() || isReadOnly()) {
 80888f6:	7822      	ldrb	r2, [r4, #0]
 80888f8:	06d5      	lsls	r5, r2, #27
 80888fa:	d4e5      	bmi.n	80888c8 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
 80888fc:	07d1      	lsls	r1, r2, #31
 80888fe:	d4e3      	bmi.n	80888c8 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
  m_flags = oflag & F_OFLAG;
 8088900:	f006 020f 	and.w	r2, r6, #15
 8088904:	70a2      	strb	r2, [r4, #2]
    return m_cache.lbn();
 8088906:	6b02      	ldr	r2, [r0, #48]	; 0x30
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8088908:	4403      	add	r3, r0
  m_dirBlock = m_vol->cacheBlockNumber();
 808890a:	61a2      	str	r2, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 808890c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
                 | dir->firstClusterLow;
 8088910:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8088914:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
 8088918:	06f2      	lsls	r2, r6, #27
 808891a:	d50d      	bpl.n	8088938 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 808891c:	b939      	cbnz	r1, 808892e <_ZN7FatFile15openCachedEntryEPS_thh+0x96>
    m_flags |= F_FILE_DIR_DIRTY;
 808891e:	78a3      	ldrb	r3, [r4, #2]
 8088920:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8088924:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8088926:	06b3      	lsls	r3, r6, #26
 8088928:	d40a      	bmi.n	8088940 <_ZN7FatFile15openCachedEntryEPS_thh+0xa8>
  return true;
 808892a:	2001      	movs	r0, #1
 808892c:	e7ce      	b.n	80888cc <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 808892e:	f000 fa52 	bl	8088dd6 <_ZN9FatVolume9freeChainEm>
 8088932:	2800      	cmp	r0, #0
 8088934:	d1f3      	bne.n	808891e <_ZN7FatFile15openCachedEntryEPS_thh+0x86>
 8088936:	e7c7      	b.n	80888c8 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
    m_firstCluster = firstCluster;
 8088938:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 808893a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808893c:	61e3      	str	r3, [r4, #28]
 808893e:	e7f2      	b.n	8088926 <_ZN7FatFile15openCachedEntryEPS_thh+0x8e>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8088940:	4620      	mov	r0, r4
 8088942:	69e1      	ldr	r1, [r4, #28]
 8088944:	f7ff ff65 	bl	8088812 <_ZN7FatFile7seekSetEm>
 8088948:	2800      	cmp	r0, #0
 808894a:	d1ee      	bne.n	808892a <_ZN7FatFile15openCachedEntryEPS_thh+0x92>
 808894c:	e7bc      	b.n	80888c8 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
	...

08088950 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8088950:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8088952:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 8088954:	4604      	mov	r4, r0
  if (!isOpen()) {
 8088956:	b90b      	cbnz	r3, 808895c <_ZN7FatFile4syncEv+0xc>
    return true;
 8088958:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 808895a:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 808895c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8088960:	2b00      	cmp	r3, #0
 8088962:	da23      	bge.n	80889ac <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8088964:	2101      	movs	r1, #1
 8088966:	f7ff fe4b 	bl	8088600 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 808896a:	4605      	mov	r5, r0
 808896c:	b928      	cbnz	r0, 808897a <_ZN7FatFile4syncEv+0x2a>
  m_error |= WRITE_ERROR;
 808896e:	7863      	ldrb	r3, [r4, #1]
  return false;
 8088970:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 8088972:	f043 0301 	orr.w	r3, r3, #1
 8088976:	7063      	strb	r3, [r4, #1]
  return false;
 8088978:	e7ef      	b.n	808895a <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 808897a:	7803      	ldrb	r3, [r0, #0]
 808897c:	2be5      	cmp	r3, #229	; 0xe5
 808897e:	d0f6      	beq.n	808896e <_ZN7FatFile4syncEv+0x1e>
    if (isFile()) {
 8088980:	7823      	ldrb	r3, [r4, #0]
 8088982:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8088984:	bf44      	itt	mi
 8088986:	69e3      	ldrmi	r3, [r4, #28]
 8088988:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 808898a:	8c23      	ldrh	r3, [r4, #32]
 808898c:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 808898e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8088990:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 8088992:	4b09      	ldr	r3, [pc, #36]	; (80889b8 <_ZN7FatFile4syncEv+0x68>)
 8088994:	681b      	ldr	r3, [r3, #0]
 8088996:	b12b      	cbz	r3, 80889a4 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8088998:	f100 0116 	add.w	r1, r0, #22
 808899c:	3018      	adds	r0, #24
 808899e:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80889a0:	8b2b      	ldrh	r3, [r5, #24]
 80889a2:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 80889a4:	78a3      	ldrb	r3, [r4, #2]
 80889a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80889aa:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 80889ac:	68a0      	ldr	r0, [r4, #8]
 80889ae:	f7fe ff69 	bl	8087884 <_ZN9FatVolume9cacheSyncEv>
 80889b2:	2800      	cmp	r0, #0
 80889b4:	d0db      	beq.n	808896e <_ZN7FatFile4syncEv+0x1e>
 80889b6:	e7cf      	b.n	8088958 <_ZN7FatFile4syncEv+0x8>
 80889b8:	20000d58 	.word	0x20000d58

080889bc <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 80889bc:	b510      	push	{r4, lr}
 80889be:	4604      	mov	r4, r0
  bool rtn = sync();
 80889c0:	f7ff ffc6 	bl	8088950 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 80889c4:	2300      	movs	r3, #0
 80889c6:	7023      	strb	r3, [r4, #0]
}
 80889c8:	bd10      	pop	{r4, pc}

080889ca <_ZN7FatFile4openEPS_PKch>:
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 80889ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80889cc:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80889ce:	2300      	movs	r3, #0
 80889d0:	b093      	sub	sp, #76	; 0x4c
 80889d2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
 80889d6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 80889d8:	4606      	mov	r6, r0
 80889da:	460c      	mov	r4, r1
 80889dc:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 80889de:	b113      	cbz	r3, 80889e6 <_ZN7FatFile4openEPS_PKch+0x1c>
  return false;
 80889e0:	2000      	movs	r0, #0
}
 80889e2:	b013      	add	sp, #76	; 0x4c
 80889e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
 80889e6:	780b      	ldrb	r3, [r1, #0]
 80889e8:	f013 0f70 	tst.w	r3, #112	; 0x70
 80889ec:	d0f8      	beq.n	80889e0 <_ZN7FatFile4openEPS_PKch+0x16>
  if (isDirSeparator(*path)) {
 80889ee:	7813      	ldrb	r3, [r2, #0]
 80889f0:	2b2f      	cmp	r3, #47	; 0x2f
 80889f2:	d112      	bne.n	8088a1a <_ZN7FatFile4openEPS_PKch+0x50>
    while (isDirSeparator(*path)) {
 80889f4:	9a01      	ldr	r2, [sp, #4]
 80889f6:	7813      	ldrb	r3, [r2, #0]
 80889f8:	2b2f      	cmp	r3, #47	; 0x2f
 80889fa:	d102      	bne.n	8088a02 <_ZN7FatFile4openEPS_PKch+0x38>
      path++;
 80889fc:	3201      	adds	r2, #1
 80889fe:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 8088a00:	e7f8      	b.n	80889f4 <_ZN7FatFile4openEPS_PKch+0x2a>
    if (*path == 0) {
 8088a02:	68a1      	ldr	r1, [r4, #8]
 8088a04:	b91b      	cbnz	r3, 8088a0e <_ZN7FatFile4openEPS_PKch+0x44>
      return openRoot(dirFile->m_vol);
 8088a06:	4630      	mov	r0, r6
 8088a08:	f7ff fe09 	bl	808861e <_ZN7FatFile8openRootEP9FatVolume>
 8088a0c:	e7e9      	b.n	80889e2 <_ZN7FatFile4openEPS_PKch+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8088a0e:	a809      	add	r0, sp, #36	; 0x24
 8088a10:	f7ff fe05 	bl	808861e <_ZN7FatFile8openRootEP9FatVolume>
 8088a14:	2800      	cmp	r0, #0
 8088a16:	d0e3      	beq.n	80889e0 <_ZN7FatFile4openEPS_PKch+0x16>
    dirFile = &tmpDir;
 8088a18:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 8088a1a:	9801      	ldr	r0, [sp, #4]
 8088a1c:	aa01      	add	r2, sp, #4
 8088a1e:	a903      	add	r1, sp, #12
 8088a20:	f7fe ff4c 	bl	80878bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8088a24:	2800      	cmp	r0, #0
 8088a26:	d0db      	beq.n	80889e0 <_ZN7FatFile4openEPS_PKch+0x16>
    if (*path == 0) {
 8088a28:	9b01      	ldr	r3, [sp, #4]
 8088a2a:	781b      	ldrb	r3, [r3, #0]
 8088a2c:	b19b      	cbz	r3, 8088a56 <_ZN7FatFile4openEPS_PKch+0x8c>
    if (!open(dirFile, &fname, O_READ)) {
 8088a2e:	2301      	movs	r3, #1
 8088a30:	4621      	mov	r1, r4
 8088a32:	4630      	mov	r0, r6
 8088a34:	aa03      	add	r2, sp, #12
 8088a36:	f7ff f875 	bl	8087b24 <_ZN7FatFile4openEPS_P7fname_th>
 8088a3a:	2800      	cmp	r0, #0
 8088a3c:	d0d0      	beq.n	80889e0 <_ZN7FatFile4openEPS_PKch+0x16>
    tmpDir = *this;
 8088a3e:	4635      	mov	r5, r6
 8088a40:	ac09      	add	r4, sp, #36	; 0x24
 8088a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088a4a:	682b      	ldr	r3, [r5, #0]
    close();
 8088a4c:	4630      	mov	r0, r6
    tmpDir = *this;
 8088a4e:	6023      	str	r3, [r4, #0]
    close();
 8088a50:	f7ff ffb4 	bl	80889bc <_ZN7FatFile5closeEv>
  while (1) {
 8088a54:	e7e0      	b.n	8088a18 <_ZN7FatFile4openEPS_PKch+0x4e>
  return open(dirFile, &fname, oflag);
 8088a56:	463b      	mov	r3, r7
 8088a58:	4621      	mov	r1, r4
 8088a5a:	4630      	mov	r0, r6
 8088a5c:	aa03      	add	r2, sp, #12
 8088a5e:	f7ff f861 	bl	8087b24 <_ZN7FatFile4openEPS_P7fname_th>
 8088a62:	e7be      	b.n	80889e2 <_ZN7FatFile4openEPS_PKch+0x18>

08088a64 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8088a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088a68:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
 8088a6a:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088a6c:	071d      	lsls	r5, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
 8088a6e:	4689      	mov	r9, r1
 8088a70:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088a72:	d55b      	bpl.n	8088b2c <_ZN7FatFile5writeEPKvj+0xc8>
 8088a74:	7883      	ldrb	r3, [r0, #2]
 8088a76:	0799      	lsls	r1, r3, #30
 8088a78:	d558      	bpl.n	8088b2c <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 8088a7a:	075a      	lsls	r2, r3, #29
 8088a7c:	d451      	bmi.n	8088b22 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8088a7e:	6963      	ldr	r3, [r4, #20]
 8088a80:	43db      	mvns	r3, r3
 8088a82:	42bb      	cmp	r3, r7
 8088a84:	d352      	bcc.n	8088b2c <_ZN7FatFile5writeEPKvj+0xc8>
 8088a86:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088a88:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
 8088a8c:	6963      	ldr	r3, [r4, #20]
 8088a8e:	f1b8 0f00 	cmp.w	r8, #0
 8088a92:	f000 808f 	beq.w	8088bb4 <_ZN7FatFile5writeEPKvj+0x150>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8088a96:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8088a98:	f3c3 0508 	ubfx	r5, r3, #0, #9
    return (position >> 9) & m_clusterBlockMask;
 8088a9c:	7946      	ldrb	r6, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8088a9e:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 8088aa2:	d10e      	bne.n	8088ac2 <_ZN7FatFile5writeEPKvj+0x5e>
 8088aa4:	b96d      	cbnz	r5, 8088ac2 <_ZN7FatFile5writeEPKvj+0x5e>
 8088aa6:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
 8088aa8:	2900      	cmp	r1, #0
 8088aaa:	d046      	beq.n	8088b3a <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088aac:	4652      	mov	r2, sl
 8088aae:	f000 f8fd 	bl	8088cac <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8088ab2:	2800      	cmp	r0, #0
 8088ab4:	db3a      	blt.n	8088b2c <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8088ab6:	d104      	bne.n	8088ac2 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
 8088ab8:	4620      	mov	r0, r4
 8088aba:	f7ff fd59 	bl	8088570 <_ZN7FatFile10addClusterEv>
 8088abe:	2800      	cmp	r0, #0
 8088ac0:	d034      	beq.n	8088b2c <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8088ac2:	6921      	ldr	r1, [r4, #16]
 8088ac4:	68a0      	ldr	r0, [r4, #8]
 8088ac6:	f000 f8eb 	bl	8088ca0 <_ZNK9FatVolume17clusterStartBlockEm>
 8088aca:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8088acc:	68a0      	ldr	r0, [r4, #8]
 8088ace:	b915      	cbnz	r5, 8088ad6 <_ZN7FatFile5writeEPKvj+0x72>
 8088ad0:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8088ad4:	d23f      	bcs.n	8088b56 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8088ad6:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
 8088ada:	4546      	cmp	r6, r8
 8088adc:	bf28      	it	cs
 8088ade:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8088ae0:	2d00      	cmp	r5, #0
 8088ae2:	d136      	bne.n	8088b52 <_ZN7FatFile5writeEPKvj+0xee>
 8088ae4:	6962      	ldr	r2, [r4, #20]
 8088ae6:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8088ae8:	429a      	cmp	r2, r3
 8088aea:	bf34      	ite	cc
 8088aec:	2201      	movcc	r2, #1
 8088aee:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
 8088af0:	3028      	adds	r0, #40	; 0x28
 8088af2:	f000 f8b2 	bl	8088c5a <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8088af6:	b1c8      	cbz	r0, 8088b2c <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8088af8:	4428      	add	r0, r5
 8088afa:	4632      	mov	r2, r6
 8088afc:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8088afe:	4435      	add	r5, r6
      memcpy(dst, src, n);
 8088b00:	f006 f808 	bl	808eb14 <memcpy>
      if (512 == (n + blockOffset)) {
 8088b04:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8088b08:	d104      	bne.n	8088b14 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
 8088b0a:	68a0      	ldr	r0, [r4, #8]
 8088b0c:	3028      	adds	r0, #40	; 0x28
 8088b0e:	f000 f87d 	bl	8088c0c <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8088b12:	b158      	cbz	r0, 8088b2c <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8088b14:	6963      	ldr	r3, [r4, #20]
    src += n;
 8088b16:	44b1      	add	r9, r6
    m_curPosition += n;
 8088b18:	4433      	add	r3, r6
 8088b1a:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 8088b1c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
 8088b20:	e7b4      	b.n	8088a8c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
 8088b22:	69c1      	ldr	r1, [r0, #28]
 8088b24:	f7ff fe75 	bl	8088812 <_ZN7FatFile7seekSetEm>
 8088b28:	2800      	cmp	r0, #0
 8088b2a:	d1a8      	bne.n	8088a7e <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8088b2c:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8088b2e:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= WRITE_ERROR;
 8088b32:	f043 0301 	orr.w	r3, r3, #1
 8088b36:	7063      	strb	r3, [r4, #1]
  return -1;
 8088b38:	e04d      	b.n	8088bd6 <_ZN7FatFile5writeEPKvj+0x172>
        if (m_firstCluster == 0) {
 8088b3a:	6a23      	ldr	r3, [r4, #32]
 8088b3c:	b93b      	cbnz	r3, 8088b4e <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
 8088b3e:	4620      	mov	r0, r4
 8088b40:	f7ff fd16 	bl	8088570 <_ZN7FatFile10addClusterEv>
 8088b44:	2800      	cmp	r0, #0
 8088b46:	d0f1      	beq.n	8088b2c <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
 8088b48:	6923      	ldr	r3, [r4, #16]
 8088b4a:	6223      	str	r3, [r4, #32]
 8088b4c:	e7b9      	b.n	8088ac2 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
 8088b4e:	6123      	str	r3, [r4, #16]
 8088b50:	e7b7      	b.n	8088ac2 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8088b52:	2201      	movs	r2, #1
 8088b54:	e7cc      	b.n	8088af0 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
 8088b56:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8088b5a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8088b5c:	d319      	bcc.n	8088b92 <_ZN7FatFile5writeEPKvj+0x12e>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8088b5e:	7903      	ldrb	r3, [r0, #4]
      uint8_t nBlock = nToWrite >> 9;
 8088b60:	f3c8 2c47 	ubfx	ip, r8, #9, #8
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8088b64:	1b9b      	subs	r3, r3, r6
 8088b66:	b2db      	uxtb	r3, r3
 8088b68:	4563      	cmp	r3, ip
 8088b6a:	bf28      	it	cs
 8088b6c:	4663      	movcs	r3, ip
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8088b6e:	4291      	cmp	r1, r2
      n = 512*nBlock;
 8088b70:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8088b74:	d307      	bcc.n	8088b86 <_ZN7FatFile5writeEPKvj+0x122>
 8088b76:	441a      	add	r2, r3
 8088b78:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
 8088b7a:	bf82      	ittt	hi
 8088b7c:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
 8088b80:	f880 5028 	strbhi.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088b84:	6302      	strhi	r2, [r0, #48]	; 0x30
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8088b86:	68a0      	ldr	r0, [r4, #8]
 8088b88:	6802      	ldr	r2, [r0, #0]
 8088b8a:	68d5      	ldr	r5, [r2, #12]
 8088b8c:	464a      	mov	r2, r9
 8088b8e:	47a8      	blx	r5
 8088b90:	e7bf      	b.n	8088b12 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
 8088b92:	4291      	cmp	r1, r2
 8088b94:	bf02      	ittt	eq
 8088b96:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
 8088b9a:	f880 5028 	strbeq.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088b9e:	6303      	streq	r3, [r0, #48]	; 0x30
      if (!m_vol->writeBlock(block, src)) {
 8088ba0:	68a0      	ldr	r0, [r4, #8]
 8088ba2:	464a      	mov	r2, r9
 8088ba4:	6803      	ldr	r3, [r0, #0]
 8088ba6:	685b      	ldr	r3, [r3, #4]
 8088ba8:	4798      	blx	r3
 8088baa:	2800      	cmp	r0, #0
 8088bac:	d0be      	beq.n	8088b2c <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
 8088bae:	f44f 7600 	mov.w	r6, #512	; 0x200
 8088bb2:	e7af      	b.n	8088b14 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
 8088bb4:	69e1      	ldr	r1, [r4, #28]
 8088bb6:	78a2      	ldrb	r2, [r4, #2]
 8088bb8:	4299      	cmp	r1, r3
 8088bba:	d204      	bcs.n	8088bc6 <_ZN7FatFile5writeEPKvj+0x162>
    m_fileSize = m_curPosition;
 8088bbc:	61e3      	str	r3, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 8088bbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8088bc2:	70a2      	strb	r2, [r4, #2]
 8088bc4:	e003      	b.n	8088bce <_ZN7FatFile5writeEPKvj+0x16a>
  } else if (m_dateTime) {
 8088bc6:	4b08      	ldr	r3, [pc, #32]	; (8088be8 <_ZN7FatFile5writeEPKvj+0x184>)
 8088bc8:	681b      	ldr	r3, [r3, #0]
 8088bca:	2b00      	cmp	r3, #0
 8088bcc:	d1f7      	bne.n	8088bbe <_ZN7FatFile5writeEPKvj+0x15a>
  if (m_flags & O_SYNC) {
 8088bce:	78a3      	ldrb	r3, [r4, #2]
 8088bd0:	071b      	lsls	r3, r3, #28
 8088bd2:	d402      	bmi.n	8088bda <_ZN7FatFile5writeEPKvj+0x176>
  return nbyte;
 8088bd4:	4638      	mov	r0, r7
}
 8088bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
 8088bda:	4620      	mov	r0, r4
 8088bdc:	f7ff feb8 	bl	8088950 <_ZN7FatFile4syncEv>
 8088be0:	2800      	cmp	r0, #0
 8088be2:	d1f7      	bne.n	8088bd4 <_ZN7FatFile5writeEPKvj+0x170>
 8088be4:	e7a2      	b.n	8088b2c <_ZN7FatFile5writeEPKvj+0xc8>
 8088be6:	bf00      	nop
 8088be8:	20000d58 	.word	0x20000d58

08088bec <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8088bec:	b570      	push	{r4, r5, r6, lr}
 8088bee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8088bf0:	460c      	mov	r4, r1
    }
 8088bf2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8088bf4:	b149      	cbz	r1, 8088c0a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8088bf6:	f006 fd65 	bl	808f6c4 <strlen>
 8088bfa:	682b      	ldr	r3, [r5, #0]
 8088bfc:	4602      	mov	r2, r0
 8088bfe:	4621      	mov	r1, r4
 8088c00:	4628      	mov	r0, r5
    }
 8088c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8088c06:	68db      	ldr	r3, [r3, #12]
 8088c08:	4718      	bx	r3
    }
 8088c0a:	bd70      	pop	{r4, r5, r6, pc}

08088c0c <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8088c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8088c0e:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 8088c10:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8088c12:	07da      	lsls	r2, r3, #31
 8088c14:	d51f      	bpl.n	8088c56 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8088c16:	6840      	ldr	r0, [r0, #4]
 8088c18:	f104 060c 	add.w	r6, r4, #12
 8088c1c:	6803      	ldr	r3, [r0, #0]
 8088c1e:	4632      	mov	r2, r6
 8088c20:	685b      	ldr	r3, [r3, #4]
 8088c22:	68a1      	ldr	r1, [r4, #8]
 8088c24:	4798      	blx	r3
 8088c26:	4605      	mov	r5, r0
 8088c28:	b910      	cbnz	r0, 8088c30 <_ZN8FatCache4syncEv+0x24>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8088c2a:	2500      	movs	r5, #0
}
 8088c2c:	4628      	mov	r0, r5
 8088c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8088c30:	7823      	ldrb	r3, [r4, #0]
 8088c32:	079b      	lsls	r3, r3, #30
 8088c34:	d404      	bmi.n	8088c40 <_ZN8FatCache4syncEv+0x34>
    m_status &= ~CACHE_STATUS_DIRTY;
 8088c36:	7823      	ldrb	r3, [r4, #0]
 8088c38:	f023 0301 	bic.w	r3, r3, #1
 8088c3c:	7023      	strb	r3, [r4, #0]
 8088c3e:	e7f5      	b.n	8088c2c <_ZN8FatCache4syncEv+0x20>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8088c40:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8088c44:	6901      	ldr	r1, [r0, #16]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8088c46:	6803      	ldr	r3, [r0, #0]
 8088c48:	4632      	mov	r2, r6
 8088c4a:	685b      	ldr	r3, [r3, #4]
 8088c4c:	4439      	add	r1, r7
 8088c4e:	4798      	blx	r3
 8088c50:	2800      	cmp	r0, #0
 8088c52:	d1f0      	bne.n	8088c36 <_ZN8FatCache4syncEv+0x2a>
 8088c54:	e7e9      	b.n	8088c2a <_ZN8FatCache4syncEv+0x1e>
  return true;
 8088c56:	2501      	movs	r5, #1
 8088c58:	e7e8      	b.n	8088c2c <_ZN8FatCache4syncEv+0x20>

08088c5a <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088c5a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8088c5c:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088c5e:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8088c60:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088c62:	460e      	mov	r6, r1
 8088c64:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8088c66:	d009      	beq.n	8088c7c <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 8088c68:	f7ff ffd0 	bl	8088c0c <_ZN8FatCache4syncEv>
 8088c6c:	b908      	cbnz	r0, 8088c72 <_ZN8FatCache4readEmh+0x18>
  return 0;
 8088c6e:	2000      	movs	r0, #0
}
 8088c70:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 8088c72:	076b      	lsls	r3, r5, #29
 8088c74:	d50a      	bpl.n	8088c8c <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 8088c76:	2300      	movs	r3, #0
    m_lbn = lbn;
 8088c78:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 8088c7a:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 8088c7c:	4620      	mov	r0, r4
 8088c7e:	7822      	ldrb	r2, [r4, #0]
 8088c80:	f005 0503 	and.w	r5, r5, #3
 8088c84:	4315      	orrs	r5, r2
 8088c86:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 8088c8a:	e7f1      	b.n	8088c70 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8088c8c:	6860      	ldr	r0, [r4, #4]
 8088c8e:	4631      	mov	r1, r6
 8088c90:	6803      	ldr	r3, [r0, #0]
 8088c92:	f104 020c 	add.w	r2, r4, #12
 8088c96:	681b      	ldr	r3, [r3, #0]
 8088c98:	4798      	blx	r3
 8088c9a:	2800      	cmp	r0, #0
 8088c9c:	d1eb      	bne.n	8088c76 <_ZN8FatCache4readEmh+0x1c>
 8088c9e:	e7e6      	b.n	8088c6e <_ZN8FatCache4readEmh+0x14>

08088ca0 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8088ca0:	7983      	ldrb	r3, [r0, #6]
 8088ca2:	3902      	subs	r1, #2
 8088ca4:	6940      	ldr	r0, [r0, #20]
 8088ca6:	4099      	lsls	r1, r3
}
 8088ca8:	4408      	add	r0, r1
 8088caa:	4770      	bx	lr

08088cac <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088cac:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088cae:	79c3      	ldrb	r3, [r0, #7]
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088cb0:	4605      	mov	r5, r0
  if (m_fatType == 32) {
 8088cb2:	2b20      	cmp	r3, #32
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088cb4:	460c      	mov	r4, r1
 8088cb6:	4616      	mov	r6, r2
  if (m_fatType == 32) {
 8088cb8:	d118      	bne.n	8088cec <_ZN9FatVolume6fatGetEmPm+0x40>
    lba = m_fatStartBlock + (cluster >> 7);
 8088cba:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 8088cbc:	2202      	movs	r2, #2
 8088cbe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8088cc2:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088cc6:	f7ff ffc8 	bl	8088c5a <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8088cca:	b910      	cbnz	r0, 8088cd2 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8088ccc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8088cd0:	bd70      	pop	{r4, r5, r6, pc}
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8088cd2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8088cd6:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8088cda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
 8088cde:	69ea      	ldr	r2, [r5, #28]
 8088ce0:	4293      	cmp	r3, r2
  return 1;
 8088ce2:	bf96      	itet	ls
 8088ce4:	2001      	movls	r0, #1
    return 0;
 8088ce6:	2000      	movhi	r0, #0
  *value = next;
 8088ce8:	6033      	strls	r3, [r6, #0]
  return 1;
 8088cea:	e7f1      	b.n	8088cd0 <_ZN9FatVolume6fatGetEmPm+0x24>
  if (m_fatType == 16) {
 8088cec:	2b10      	cmp	r3, #16
 8088cee:	d1ed      	bne.n	8088ccc <_ZN9FatVolume6fatGetEmPm+0x20>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8088cf0:	6983      	ldr	r3, [r0, #24]
 8088cf2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8088cf6:	2202      	movs	r2, #2
 8088cf8:	4419      	add	r1, r3
 8088cfa:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088cfe:	f7ff ffac 	bl	8088c5a <_ZN8FatCache4readEmh>
    if (!pc) {
 8088d02:	2800      	cmp	r0, #0
 8088d04:	d0e2      	beq.n	8088ccc <_ZN9FatVolume6fatGetEmPm+0x20>
    next = pc->fat16[cluster & 0XFF];
 8088d06:	b2e4      	uxtb	r4, r4
 8088d08:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
 8088d0c:	e7e7      	b.n	8088cde <_ZN9FatVolume6fatGetEmPm+0x32>

08088d0e <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088d0e:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088d10:	79c3      	ldrb	r3, [r0, #7]
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088d12:	460c      	mov	r4, r1
  if (m_fatType == 32) {
 8088d14:	2b20      	cmp	r3, #32
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088d16:	4615      	mov	r5, r2
  if (m_fatType == 32) {
 8088d18:	d110      	bne.n	8088d3c <_ZN9FatVolume6fatPutEmm+0x2e>
    lba = m_fatStartBlock + (cluster >> 7);
 8088d1a:	6981      	ldr	r1, [r0, #24]
 8088d1c:	2203      	movs	r2, #3
 8088d1e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8088d22:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088d26:	f7ff ff98 	bl	8088c5a <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8088d2a:	b908      	cbnz	r0, 8088d30 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8088d2c:	2000      	movs	r0, #0
}
 8088d2e:	bd38      	pop	{r3, r4, r5, pc}
    pc->fat32[cluster & 0X7F] = value;
 8088d30:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8088d34:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
 8088d38:	2001      	movs	r0, #1
 8088d3a:	e7f8      	b.n	8088d2e <_ZN9FatVolume6fatPutEmm+0x20>
  if (m_fatType == 16) {
 8088d3c:	2b10      	cmp	r3, #16
 8088d3e:	d1f5      	bne.n	8088d2c <_ZN9FatVolume6fatPutEmm+0x1e>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8088d40:	6983      	ldr	r3, [r0, #24]
 8088d42:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8088d46:	2203      	movs	r2, #3
 8088d48:	4419      	add	r1, r3
 8088d4a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088d4e:	f7ff ff84 	bl	8088c5a <_ZN8FatCache4readEmh>
    if (!pc) {
 8088d52:	2800      	cmp	r0, #0
 8088d54:	d0ea      	beq.n	8088d2c <_ZN9FatVolume6fatPutEmm+0x1e>
    pc->fat16[cluster & 0XFF] = value;
 8088d56:	b2e4      	uxtb	r4, r4
 8088d58:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 8088d5c:	e7ec      	b.n	8088d38 <_ZN9FatVolume6fatPutEmm+0x2a>

08088d5e <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8088d5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8088d62:	4605      	mov	r5, r0
 8088d64:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8088d66:	460f      	mov	r7, r1
 8088d68:	b9b9      	cbnz	r1, 8088d9a <_ZN9FatVolume15allocateClusterEmPm+0x3c>
 8088d6a:	68c6      	ldr	r6, [r0, #12]
 8088d6c:	4634      	mov	r4, r6
    if (find > m_lastCluster) {
 8088d6e:	69eb      	ldr	r3, [r5, #28]
    find++;
 8088d70:	3401      	adds	r4, #1
      find = 2;
 8088d72:	42a3      	cmp	r3, r4
 8088d74:	bf38      	it	cc
 8088d76:	2402      	movcc	r4, #2
    int8_t fg = fatGet(find, &f);
 8088d78:	4628      	mov	r0, r5
 8088d7a:	4621      	mov	r1, r4
 8088d7c:	aa01      	add	r2, sp, #4
 8088d7e:	f7ff ff95 	bl	8088cac <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8088d82:	2800      	cmp	r0, #0
 8088d84:	db04      	blt.n	8088d90 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (fg && f == 0) {
 8088d86:	d001      	beq.n	8088d8c <_ZN9FatVolume15allocateClusterEmPm+0x2e>
 8088d88:	9b01      	ldr	r3, [sp, #4]
 8088d8a:	b143      	cbz	r3, 8088d9e <_ZN9FatVolume15allocateClusterEmPm+0x40>
    if (find == start) {
 8088d8c:	42b4      	cmp	r4, r6
 8088d8e:	d1ee      	bne.n	8088d6e <_ZN9FatVolume15allocateClusterEmPm+0x10>
  return false;
 8088d90:	2600      	movs	r6, #0
}
 8088d92:	4630      	mov	r0, r6
 8088d94:	b002      	add	sp, #8
 8088d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8088d9a:	460e      	mov	r6, r1
 8088d9c:	e7e6      	b.n	8088d6c <_ZN9FatVolume15allocateClusterEmPm+0xe>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8088d9e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8088da2:	4621      	mov	r1, r4
 8088da4:	4628      	mov	r0, r5
 8088da6:	f7ff ffb2 	bl	8088d0e <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
 8088daa:	4606      	mov	r6, r0
 8088dac:	2800      	cmp	r0, #0
 8088dae:	d0ef      	beq.n	8088d90 <_ZN9FatVolume15allocateClusterEmPm+0x32>
  if (current) {
 8088db0:	b17f      	cbz	r7, 8088dd2 <_ZN9FatVolume15allocateClusterEmPm+0x74>
    if (!fatPut(current, find)) {
 8088db2:	4622      	mov	r2, r4
 8088db4:	4639      	mov	r1, r7
 8088db6:	4628      	mov	r0, r5
 8088db8:	f7ff ffa9 	bl	8088d0e <_ZN9FatVolume6fatPutEmm>
 8088dbc:	2800      	cmp	r0, #0
 8088dbe:	d0e7      	beq.n	8088d90 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (m_freeClusterCount >= 0) {
 8088dc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8088dc2:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8088dc4:	bfa4      	itt	ge
 8088dc6:	f103 33ff 	addge.w	r3, r3, #4294967295
 8088dca:	626b      	strge	r3, [r5, #36]	; 0x24
  *next = find;
 8088dcc:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8088dd0:	e7df      	b.n	8088d92 <_ZN9FatVolume15allocateClusterEmPm+0x34>
    m_allocSearchStart = find;
 8088dd2:	60ec      	str	r4, [r5, #12]
 8088dd4:	e7f4      	b.n	8088dc0 <_ZN9FatVolume15allocateClusterEmPm+0x62>

08088dd6 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8088dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8088dd8:	4604      	mov	r4, r0
 8088dda:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8088ddc:	4629      	mov	r1, r5
 8088dde:	4620      	mov	r0, r4
 8088de0:	aa01      	add	r2, sp, #4
 8088de2:	f7ff ff63 	bl	8088cac <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8088de6:	1e06      	subs	r6, r0, #0
 8088de8:	db13      	blt.n	8088e12 <_ZN9FatVolume9freeChainEm+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8088dea:	2200      	movs	r2, #0
 8088dec:	4629      	mov	r1, r5
 8088dee:	4620      	mov	r0, r4
 8088df0:	f7ff ff8d 	bl	8088d0e <_ZN9FatVolume6fatPutEmm>
 8088df4:	b168      	cbz	r0, 8088e12 <_ZN9FatVolume9freeChainEm+0x3c>
    if (m_freeClusterCount >= 0) {
 8088df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8088df8:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8088dfa:	bfa4      	itt	ge
 8088dfc:	3301      	addge	r3, #1
 8088dfe:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8088e00:	68e3      	ldr	r3, [r4, #12]
 8088e02:	42ab      	cmp	r3, r5
      m_allocSearchStart = cluster;
 8088e04:	bf88      	it	hi
 8088e06:	60e5      	strhi	r5, [r4, #12]
    }
    cluster = next;
 8088e08:	9d01      	ldr	r5, [sp, #4]
  } while (fg);
 8088e0a:	2e00      	cmp	r6, #0
 8088e0c:	d1e6      	bne.n	8088ddc <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8088e0e:	b002      	add	sp, #8
 8088e10:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8088e12:	2000      	movs	r0, #0
 8088e14:	e7fb      	b.n	8088e0e <_ZN9FatVolume9freeChainEm+0x38>

08088e16 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8088e16:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 8088e18:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 8088e1a:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8088e1c:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 8088e1e:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
 8088e22:	4604      	mov	r4, r0
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8088e24:	460d      	mov	r5, r1
  m_fatType = 0;
 8088e26:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 8088e28:	f100 0628 	add.w	r6, r0, #40	; 0x28
    m_vol = vol;
 8088e2c:	62c0      	str	r0, [r0, #44]	; 0x2c
    m_status = 0;
 8088e2e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088e32:	6303      	str	r3, [r0, #48]	; 0x30
    m_vol = vol;
 8088e34:	f8c0 0238 	str.w	r0, [r0, #568]	; 0x238
    m_status = 0;
 8088e38:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8088e3c:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  if (part) {
 8088e40:	b1b9      	cbz	r1, 8088e72 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 8088e42:	2904      	cmp	r1, #4
 8088e44:	d901      	bls.n	8088e4a <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8088e46:	2000      	movs	r0, #0
}
 8088e48:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 8088e4a:	4611      	mov	r1, r2
 8088e4c:	4630      	mov	r0, r6
 8088e4e:	f7ff ff04 	bl	8088c5a <_ZN8FatCache4readEmh>
    if (!pc) {
 8088e52:	2800      	cmp	r0, #0
 8088e54:	d0f7      	beq.n	8088e46 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8088e56:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8088e5a:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8088e5e:	065b      	lsls	r3, r3, #25
 8088e60:	d1f1      	bne.n	8088e46 <_ZN9FatVolume4initEh+0x30>
 8088e62:	f105 011b 	add.w	r1, r5, #27
 8088e66:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8088e6a:	f8d1 5006 	ldr.w	r5, [r1, #6]
 8088e6e:	2d00      	cmp	r5, #0
 8088e70:	d0e9      	beq.n	8088e46 <_ZN9FatVolume4initEh+0x30>
 8088e72:	2200      	movs	r2, #0
 8088e74:	4629      	mov	r1, r5
 8088e76:	4630      	mov	r0, r6
 8088e78:	f7ff feef 	bl	8088c5a <_ZN8FatCache4readEmh>
  if (!pc) {
 8088e7c:	2800      	cmp	r0, #0
 8088e7e:	d0e2      	beq.n	8088e46 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 8088e80:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8088e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8088e88:	d1dd      	bne.n	8088e46 <_ZN9FatVolume4initEh+0x30>
 8088e8a:	7c03      	ldrb	r3, [r0, #16]
 8088e8c:	2b02      	cmp	r3, #2
 8088e8e:	d1da      	bne.n	8088e46 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 8088e90:	89c3      	ldrh	r3, [r0, #14]
 8088e92:	2b00      	cmp	r3, #0
 8088e94:	d0d7      	beq.n	8088e46 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088e96:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 8088e98:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8088e9a:	1e4b      	subs	r3, r1, #1
 8088e9c:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 8088e9e:	2300      	movs	r3, #0
 8088ea0:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088ea2:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088ea4:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088ea6:	4299      	cmp	r1, r3
 8088ea8:	d007      	beq.n	8088eba <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 8088eaa:	3e01      	subs	r6, #1
 8088eac:	d0cb      	beq.n	8088e46 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088eae:	79a2      	ldrb	r2, [r4, #6]
 8088eb0:	005b      	lsls	r3, r3, #1
 8088eb2:	3201      	adds	r2, #1
 8088eb4:	b2db      	uxtb	r3, r3
 8088eb6:	71a2      	strb	r2, [r4, #6]
 8088eb8:	e7f5      	b.n	8088ea6 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8088eba:	8ac1      	ldrh	r1, [r0, #22]
 8088ebc:	b901      	cbnz	r1, 8088ec0 <_ZN9FatVolume4initEh+0xaa>
 8088ebe:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8088ec0:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8088ec2:	89c3      	ldrh	r3, [r0, #14]
 8088ec4:	442b      	add	r3, r5
 8088ec6:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8088ec8:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8088ecc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8088ed0:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8088ed2:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8088ed4:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 8088ed8:	0149      	lsls	r1, r1, #5
 8088eda:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8088ede:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 8088ee2:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 8088ee4:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 8088ee8:	b902      	cbnz	r2, 8088eec <_ZN9FatVolume4initEh+0xd6>
 8088eea:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8088eec:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 8088eee:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8088ef0:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 8088ef2:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 8088ef4:	1c4b      	adds	r3, r1, #1
 8088ef6:	61e3      	str	r3, [r4, #28]
    m_freeClusterCount = value;
 8088ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8088efc:	6263      	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
 8088efe:	f640 73f4 	movw	r3, #4084	; 0xff4
 8088f02:	4299      	cmp	r1, r3
 8088f04:	d802      	bhi.n	8088f0c <_ZN9FatVolume4initEh+0xf6>
    m_fatType = 12;
 8088f06:	230c      	movs	r3, #12
 8088f08:	71e3      	strb	r3, [r4, #7]
 8088f0a:	e79c      	b.n	8088e46 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 8088f0c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8088f10:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 8088f12:	bf89      	itett	hi
 8088f14:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 8088f16:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 8088f18:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8088f1a:	2320      	movhi	r3, #32
  return true;
 8088f1c:	2001      	movs	r0, #1
    m_fatType = 32;
 8088f1e:	71e3      	strb	r3, [r4, #7]
 8088f20:	e792      	b.n	8088e48 <_ZN9FatVolume4initEh+0x32>

08088f22 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
 8088f22:	f003 b8d5 	b.w	808c0d0 <delay>

08088f26 <_ZL9i2c_writehhPht>:
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088f28:	4607      	mov	r7, r0
 8088f2a:	4614      	mov	r4, r2
 8088f2c:	461d      	mov	r5, r3
 8088f2e:	460e      	mov	r6, r1
  Wire.beginTransmission((uint8_t)dev_id);
 8088f30:	f004 fa1a 	bl	808d368 <_Z19__fetch_global_Wirev>
 8088f34:	4639      	mov	r1, r7
 8088f36:	f003 ffb3 	bl	808cea0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8088f3a:	f004 fa15 	bl	808d368 <_Z19__fetch_global_Wirev>
 8088f3e:	6803      	ldr	r3, [r0, #0]
 8088f40:	4631      	mov	r1, r6
 8088f42:	689b      	ldr	r3, [r3, #8]
 8088f44:	4798      	blx	r3
 8088f46:	4425      	add	r5, r4
  while (len--) {
 8088f48:	42ac      	cmp	r4, r5
 8088f4a:	d007      	beq.n	8088f5c <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
 8088f4c:	f004 fa0c 	bl	808d368 <_Z19__fetch_global_Wirev>
 8088f50:	6803      	ldr	r3, [r0, #0]
 8088f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8088f56:	689b      	ldr	r3, [r3, #8]
 8088f58:	4798      	blx	r3
  while (len--) {
 8088f5a:	e7f5      	b.n	8088f48 <_ZL9i2c_writehhPht+0x22>
  Wire.endTransmission();
 8088f5c:	f004 fa04 	bl	808d368 <_Z19__fetch_global_Wirev>
 8088f60:	f003 ffc1 	bl	808cee6 <_ZN7TwoWire15endTransmissionEv>
}
 8088f64:	2000      	movs	r0, #0
 8088f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088f68 <_ZL8i2c_readhhPht>:
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088f6a:	4606      	mov	r6, r0
 8088f6c:	4615      	mov	r5, r2
 8088f6e:	461c      	mov	r4, r3
 8088f70:	460f      	mov	r7, r1
  Wire.beginTransmission((uint8_t)dev_id);
 8088f72:	f004 f9f9 	bl	808d368 <_Z19__fetch_global_Wirev>
 8088f76:	4631      	mov	r1, r6
 8088f78:	f003 ff92 	bl	808cea0 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8088f7c:	f004 f9f4 	bl	808d368 <_Z19__fetch_global_Wirev>
 8088f80:	6803      	ldr	r3, [r0, #0]
 8088f82:	4639      	mov	r1, r7
 8088f84:	689b      	ldr	r3, [r3, #8]
 8088f86:	4798      	blx	r3
  Wire.endTransmission();
 8088f88:	f004 f9ee 	bl	808d368 <_Z19__fetch_global_Wirev>
 8088f8c:	f003 ffab 	bl	808cee6 <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
 8088f90:	f004 f9ea 	bl	808d368 <_Z19__fetch_global_Wirev>
 8088f94:	4631      	mov	r1, r6
 8088f96:	b2e2      	uxtb	r2, r4
 8088f98:	f003 ff7f 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>
 8088f9c:	4284      	cmp	r4, r0
 8088f9e:	d10a      	bne.n	8088fb6 <_ZL8i2c_readhhPht+0x4e>
 8088fa0:	442c      	add	r4, r5
  while (len--) {
 8088fa2:	42ac      	cmp	r4, r5
 8088fa4:	d009      	beq.n	8088fba <_ZL8i2c_readhhPht+0x52>
    *reg_data = (uint8_t)Wire.read();
 8088fa6:	f004 f9df 	bl	808d368 <_Z19__fetch_global_Wirev>
 8088faa:	6803      	ldr	r3, [r0, #0]
 8088fac:	695b      	ldr	r3, [r3, #20]
 8088fae:	4798      	blx	r3
 8088fb0:	f805 0b01 	strb.w	r0, [r5], #1
  while (len--) {
 8088fb4:	e7f5      	b.n	8088fa2 <_ZL8i2c_readhhPht+0x3a>
    return 1;
 8088fb6:	2001      	movs	r0, #1
}
 8088fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088fba:	2000      	movs	r0, #0
 8088fbc:	e7fc      	b.n	8088fb8 <_ZL8i2c_readhhPht+0x50>
	...

08088fc0 <_ZN15Adafruit_BME680C1Ea>:
  _BME680_SoftwareSPI_MOSI = -1;
 8088fc0:	22ff      	movs	r2, #255	; 0xff
  : _cs(cspin)
 8088fc2:	7701      	strb	r1, [r0, #28]
  _BME680_SoftwareSPI_MOSI = -1;
 8088fc4:	4904      	ldr	r1, [pc, #16]	; (8088fd8 <_ZN15Adafruit_BME680C1Ea+0x18>)
 8088fc6:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 8088fc8:	4904      	ldr	r1, [pc, #16]	; (8088fdc <_ZN15Adafruit_BME680C1Ea+0x1c>)
 8088fca:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8088fcc:	4904      	ldr	r1, [pc, #16]	; (8088fe0 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8088fce:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8088fd0:	2200      	movs	r2, #0
 8088fd2:	6102      	str	r2, [r0, #16]
 8088fd4:	7502      	strb	r2, [r0, #20]
}
 8088fd6:	4770      	bx	lr
 8088fd8:	20000d61 	.word	0x20000d61
 8088fdc:	20000d60 	.word	0x20000d60
 8088fe0:	20000d62 	.word	0x20000d62

08088fe4 <_ZN15Adafruit_BME68014performReadingEv>:
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8088fe4:	2301      	movs	r3, #1
bool Adafruit_BME680::performReading(void) {
 8088fe6:	b530      	push	{r4, r5, lr}
 8088fe8:	4604      	mov	r4, r0
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8088fea:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  if (_humEnabled)
 8088fee:	7ca3      	ldrb	r3, [r4, #18]
  uint8_t set_required_settings = 0;
 8088ff0:	7c40      	ldrb	r0, [r0, #17]
bool Adafruit_BME680::performReading(void) {
 8088ff2:	b087      	sub	sp, #28
  if (_humEnabled)
 8088ff4:	b10b      	cbz	r3, 8088ffa <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 8088ff6:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8088ffa:	7ce3      	ldrb	r3, [r4, #19]
 8088ffc:	b10b      	cbz	r3, 8089002 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 8088ffe:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8089002:	7c23      	ldrb	r3, [r4, #16]
 8089004:	b10b      	cbz	r3, 808900a <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 8089006:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 808900a:	7d23      	ldrb	r3, [r4, #20]
 808900c:	b10b      	cbz	r3, 8089012 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 808900e:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8089012:	f104 0520 	add.w	r5, r4, #32
 8089016:	4629      	mov	r1, r5
 8089018:	f7f7 fa6b 	bl	80804f2 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 808901c:	b118      	cbz	r0, 8089026 <_ZN15Adafruit_BME68014performReadingEv+0x42>
    return false;
 808901e:	2500      	movs	r5, #0
}
 8089020:	4628      	mov	r0, r5
 8089022:	b007      	add	sp, #28
 8089024:	bd30      	pop	{r4, r5, pc}
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8089026:	4628      	mov	r0, r5
 8089028:	f7f7 fa24 	bl	8080474 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 808902c:	2800      	cmp	r0, #0
 808902e:	d1f6      	bne.n	808901e <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8089030:	4629      	mov	r1, r5
 8089032:	f10d 0002 	add.w	r0, sp, #2
 8089036:	f7f7 fbd5 	bl	80807e4 <bme680_get_profile_dur>
  delay(meas_period * 2); /* Delay till the measurement is ready */
 808903a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 808903e:	0040      	lsls	r0, r0, #1
 8089040:	f003 f846 	bl	808c0d0 <delay>
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8089044:	4629      	mov	r1, r5
 8089046:	a801      	add	r0, sp, #4
 8089048:	f7f7 fc00 	bl	808084c <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 808904c:	2800      	cmp	r0, #0
 808904e:	d1e6      	bne.n	808901e <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  if (_tempEnabled) {
 8089050:	7c63      	ldrb	r3, [r4, #17]
 8089052:	b33b      	cbz	r3, 80890a4 <_ZN15Adafruit_BME68014performReadingEv+0xc0>
    temperature = data.temperature / 100.0;
 8089054:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8089058:	f004 fb3a 	bl	808d6d0 <__aeabi_i2d>
 808905c:	2200      	movs	r2, #0
 808905e:	4b17      	ldr	r3, [pc, #92]	; (80890bc <_ZN15Adafruit_BME68014performReadingEv+0xd8>)
 8089060:	f004 fcca 	bl	808d9f8 <__aeabi_ddiv>
 8089064:	f004 fe96 	bl	808dd94 <__aeabi_d2f>
  if (_humEnabled) {
 8089068:	7ca3      	ldrb	r3, [r4, #18]
 808906a:	6020      	str	r0, [r4, #0]
 808906c:	b1e3      	cbz	r3, 80890a8 <_ZN15Adafruit_BME68014performReadingEv+0xc4>
    humidity = data.humidity / 1000.0;
 808906e:	9804      	ldr	r0, [sp, #16]
 8089070:	f004 fb1e 	bl	808d6b0 <__aeabi_ui2d>
 8089074:	2200      	movs	r2, #0
 8089076:	4b12      	ldr	r3, [pc, #72]	; (80890c0 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8089078:	f004 fcbe 	bl	808d9f8 <__aeabi_ddiv>
 808907c:	f004 fe8a 	bl	808dd94 <__aeabi_d2f>
  if (_presEnabled) {
 8089080:	7ce3      	ldrb	r3, [r4, #19]
 8089082:	60a0      	str	r0, [r4, #8]
 8089084:	b193      	cbz	r3, 80890ac <_ZN15Adafruit_BME68014performReadingEv+0xc8>
    pressure = data.pressure;
 8089086:	9803      	ldr	r0, [sp, #12]
 8089088:	f004 ff8a 	bl	808dfa0 <__aeabi_ui2f>
  if (_gasEnabled) {
 808908c:	7d25      	ldrb	r5, [r4, #20]
 808908e:	6060      	str	r0, [r4, #4]
 8089090:	b18d      	cbz	r5, 80890b6 <_ZN15Adafruit_BME68014performReadingEv+0xd2>
    if (data.status & BME680_HEAT_STAB_MSK) {
 8089092:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8089096:	06db      	lsls	r3, r3, #27
 8089098:	d50a      	bpl.n	80890b0 <_ZN15Adafruit_BME68014performReadingEv+0xcc>
      gas_resistance = data.gas_resistance;
 808909a:	9805      	ldr	r0, [sp, #20]
 808909c:	f004 ff80 	bl	808dfa0 <__aeabi_ui2f>
 80890a0:	60e0      	str	r0, [r4, #12]
 80890a2:	e7bd      	b.n	8089020 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
    temperature = NAN;
 80890a4:	4807      	ldr	r0, [pc, #28]	; (80890c4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80890a6:	e7df      	b.n	8089068 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    humidity = NAN;
 80890a8:	4806      	ldr	r0, [pc, #24]	; (80890c4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80890aa:	e7e9      	b.n	8089080 <_ZN15Adafruit_BME68014performReadingEv+0x9c>
    pressure = NAN;
 80890ac:	4805      	ldr	r0, [pc, #20]	; (80890c4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80890ae:	e7ed      	b.n	808908c <_ZN15Adafruit_BME68014performReadingEv+0xa8>
      gas_resistance = 0;
 80890b0:	2300      	movs	r3, #0
 80890b2:	60e3      	str	r3, [r4, #12]
 80890b4:	e7b4      	b.n	8089020 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
  return true;
 80890b6:	2501      	movs	r5, #1
 80890b8:	e7b2      	b.n	8089020 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
 80890ba:	bf00      	nop
 80890bc:	40590000 	.word	0x40590000
 80890c0:	408f4000 	.word	0x408f4000
 80890c4:	7fc00000 	.word	0x7fc00000

080890c8 <_ZN15Adafruit_BME68012setGasHeaterEtt>:
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80890c8:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80890cc:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
 80890d0:	b101      	cbz	r1, 80890d4 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
 80890d2:	b92a      	cbnz	r2, 80890e0 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x18>
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 80890d4:	2300      	movs	r3, #0
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80890d6:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
 80890da:	7503      	strb	r3, [r0, #20]
}
 80890dc:	2001      	movs	r0, #1
 80890de:	4770      	bx	lr
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80890e0:	2301      	movs	r3, #1
 80890e2:	e7f8      	b.n	80890d6 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xe>

080890e4 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 80890e4:	2905      	cmp	r1, #5
bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 80890e6:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80890e8:	d807      	bhi.n	80890fa <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>
  gas_sensor.tph_sett.os_temp = oversample;
 80890ea:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
  if (oversample == BME680_OS_NONE)
 80890ee:	2001      	movs	r0, #1
 80890f0:	b909      	cbnz	r1, 80890f6 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
 80890f2:	7459      	strb	r1, [r3, #17]
 80890f4:	4770      	bx	lr
    _tempEnabled = true;
 80890f6:	7458      	strb	r0, [r3, #17]
 80890f8:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 80890fa:	2000      	movs	r0, #0
}
 80890fc:	4770      	bx	lr

080890fe <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 80890fe:	2905      	cmp	r1, #5
bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 8089100:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8089102:	d807      	bhi.n	8089114 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>
  gas_sensor.tph_sett.os_hum = oversample;
 8089104:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
  if (oversample == BME680_OS_NONE)
 8089108:	2001      	movs	r0, #1
 808910a:	b909      	cbnz	r1, 8089110 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
 808910c:	7499      	strb	r1, [r3, #18]
 808910e:	4770      	bx	lr
    _humEnabled = true;
 8089110:	7498      	strb	r0, [r3, #18]
 8089112:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 8089114:	2000      	movs	r0, #0
}
 8089116:	4770      	bx	lr

08089118 <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 8089118:	2905      	cmp	r1, #5
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 808911a:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 808911c:	d807      	bhi.n	808912e <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>
  gas_sensor.tph_sett.os_pres = oversample;
 808911e:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
  if (oversample == BME680_OS_NONE)
 8089122:	2001      	movs	r0, #1
 8089124:	b909      	cbnz	r1, 808912a <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
 8089126:	74d9      	strb	r1, [r3, #19]
 8089128:	4770      	bx	lr
    _presEnabled = true;
 808912a:	74d8      	strb	r0, [r3, #19]
 808912c:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 808912e:	2000      	movs	r0, #0
}
 8089130:	4770      	bx	lr

08089132 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8089132:	2907      	cmp	r1, #7
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 8089134:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8089136:	d807      	bhi.n	8089148 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>
  gas_sensor.tph_sett.filter = filtersize;
 8089138:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
  if (filtersize == BME680_FILTER_SIZE_0)
 808913c:	2001      	movs	r0, #1
 808913e:	b909      	cbnz	r1, 8089144 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
 8089140:	7419      	strb	r1, [r3, #16]
 8089142:	4770      	bx	lr
    _filterEnabled = true;
 8089144:	7418      	strb	r0, [r3, #16]
 8089146:	4770      	bx	lr
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8089148:	2000      	movs	r0, #0
}
 808914a:	4770      	bx	lr

0808914c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 808914c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 808914e:	4d0c      	ldr	r5, [pc, #48]	; (8089180 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 8089150:	7829      	ldrb	r1, [r5, #0]
 8089152:	f3bf 8f5b 	dmb	ish
 8089156:	f011 0401 	ands.w	r4, r1, #1
 808915a:	d10f      	bne.n	808917c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 808915c:	4628      	mov	r0, r5
 808915e:	f7f6 ffa2 	bl	80800a6 <__cxa_guard_acquire>
 8089162:	b158      	cbz	r0, 808917c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 8089164:	4621      	mov	r1, r4
 8089166:	4807      	ldr	r0, [pc, #28]	; (8089184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8089168:	f001 ff07 	bl	808af7a <_ZN8SPIClassC1E19hal_spi_interface_t>
 808916c:	4628      	mov	r0, r5
 808916e:	f7f6 ff9f 	bl	80800b0 <__cxa_guard_release>
 8089172:	4a05      	ldr	r2, [pc, #20]	; (8089188 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 8089174:	4905      	ldr	r1, [pc, #20]	; (808918c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 8089176:	4803      	ldr	r0, [pc, #12]	; (8089184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 8089178:	f004 f946 	bl	808d408 <__aeabi_atexit>
        return instance;
    }
 808917c:	4801      	ldr	r0, [pc, #4]	; (8089184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 808917e:	bd38      	pop	{r3, r4, r5, pc}
 8089180:	20000d34 	.word	0x20000d34
 8089184:	20000d38 	.word	0x20000d38
 8089188:	20000328 	.word	0x20000328
 808918c:	080884a5 	.word	0x080884a5

08089190 <_ZL12spi_transferh>:
static uint8_t spi_transfer(uint8_t x) {
 8089190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
 8089194:	4d1b      	ldr	r5, [pc, #108]	; (8089204 <_ZL12spi_transferh+0x74>)
static uint8_t spi_transfer(uint8_t x) {
 8089196:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
 8089198:	f995 3000 	ldrsb.w	r3, [r5]
 808919c:	3301      	adds	r3, #1
 808919e:	d106      	bne.n	80891ae <_ZL12spi_transferh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80891a0:	f7ff ffd4 	bl	808914c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80891a4:	4641      	mov	r1, r8
}
 80891a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80891aa:	f001 bf93 	b.w	808b0d4 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 80891ae:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
 80891b0:	2607      	movs	r6, #7
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 80891b2:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8089208 <_ZL12spi_transferh+0x78>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80891b6:	f8df a054 	ldr.w	sl, [pc, #84]	; 808920c <_ZL12spi_transferh+0x7c>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 80891ba:	2701      	movs	r7, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
 80891bc:	f995 0000 	ldrsb.w	r0, [r5]
 80891c0:	2100      	movs	r1, #0
 80891c2:	b280      	uxth	r0, r0
 80891c4:	f004 f83b 	bl	808d23e <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 80891c8:	f999 0000 	ldrsb.w	r0, [r9]
 80891cc:	fa07 f106 	lsl.w	r1, r7, r6
 80891d0:	ea01 0108 	and.w	r1, r1, r8
 80891d4:	b280      	uxth	r0, r0
 80891d6:	f004 f832 	bl	808d23e <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
 80891da:	f995 0000 	ldrsb.w	r0, [r5]
 80891de:	4639      	mov	r1, r7
 80891e0:	b280      	uxth	r0, r0
 80891e2:	f004 f82c 	bl	808d23e <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80891e6:	f99a 0000 	ldrsb.w	r0, [sl]
    reply <<= 1;
 80891ea:	0064      	lsls	r4, r4, #1
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80891ec:	b280      	uxth	r0, r0
    reply <<= 1;
 80891ee:	b2e4      	uxtb	r4, r4
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80891f0:	f004 f83e 	bl	808d270 <digitalRead>
 80891f4:	b100      	cbz	r0, 80891f8 <_ZL12spi_transferh+0x68>
      reply |= 1;
 80891f6:	433c      	orrs	r4, r7
  for (int i=7; i>=0; i--) {
 80891f8:	3e01      	subs	r6, #1
 80891fa:	d2de      	bcs.n	80891ba <_ZL12spi_transferh+0x2a>
}
 80891fc:	4620      	mov	r0, r4
 80891fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089202:	bf00      	nop
 8089204:	20000d62 	.word	0x20000d62
 8089208:	20000d61 	.word	0x20000d61
 808920c:	20000d60 	.word	0x20000d60

08089210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>:
    void begin() {
 8089210:	b508      	push	{r3, lr}
        instance().begin();
 8089212:	f7ff ff9b 	bl	808914c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
 8089216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().begin();
 808921a:	f001 bebd 	b.w	808af98 <_ZN8SPIClass5beginEv>
	...

08089220 <_ZN15Adafruit_BME6805beginEh>:
bool Adafruit_BME680::begin(uint8_t addr) {
 8089220:	b538      	push	{r3, r4, r5, lr}
 8089222:	4604      	mov	r4, r0
  _i2caddr = addr;
 8089224:	7541      	strb	r1, [r0, #21]
  if (_cs == -1) {
 8089226:	f990 001c 	ldrsb.w	r0, [r0, #28]
bool Adafruit_BME680::begin(uint8_t addr) {
 808922a:	460d      	mov	r5, r1
  if (_cs == -1) {
 808922c:	1c42      	adds	r2, r0, #1
 808922e:	d122      	bne.n	8089276 <_ZN15Adafruit_BME6805beginEh+0x56>
    Wire.begin();
 8089230:	f004 f89a 	bl	808d368 <_Z19__fetch_global_Wirev>
 8089234:	f003 fe02 	bl	808ce3c <_ZN7TwoWire5beginEv>
    gas_sensor.intf = BME680_I2C_INTF;
 8089238:	2301      	movs	r3, #1
 808923a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
 808923e:	4b26      	ldr	r3, [pc, #152]	; (80892d8 <_ZN15Adafruit_BME6805beginEh+0xb8>)
    gas_sensor.dev_id = addr;
 8089240:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.read = &i2c_read;
 8089244:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
 8089246:	4b25      	ldr	r3, [pc, #148]	; (80892dc <_ZN15Adafruit_BME6805beginEh+0xbc>)
    gas_sensor.write = &spi_write;
 8089248:	66e3      	str	r3, [r4, #108]	; 0x6c
  gas_sensor.delay_ms = delay_msec;
 808924a:	4b25      	ldr	r3, [pc, #148]	; (80892e0 <_ZN15Adafruit_BME6805beginEh+0xc0>)
  rslt = bme680_init(&gas_sensor);
 808924c:	f104 0020 	add.w	r0, r4, #32
  gas_sensor.delay_ms = delay_msec;
 8089250:	6723      	str	r3, [r4, #112]	; 0x70
  rslt = bme680_init(&gas_sensor);
 8089252:	f7f7 f837 	bl	80802c4 <bme680_init>
  if (rslt != BME680_OK)
 8089256:	2800      	cmp	r0, #0
 8089258:	d13b      	bne.n	80892d2 <_ZN15Adafruit_BME6805beginEh+0xb2>
  gas_sensor.tph_sett.os_hum = oversample;
 808925a:	4b22      	ldr	r3, [pc, #136]	; (80892e4 <_ZN15Adafruit_BME6805beginEh+0xc4>)
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 808925c:	2001      	movs	r0, #1
  gas_sensor.tph_sett.os_hum = oversample;
 808925e:	65a3      	str	r3, [r4, #88]	; 0x58
    _filterEnabled = true;
 8089260:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 8089264:	6123      	str	r3, [r4, #16]
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8089266:	4b20      	ldr	r3, [pc, #128]	; (80892e8 <_ZN15Adafruit_BME6805beginEh+0xc8>)
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8089268:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
 808926c:	7520      	strb	r0, [r4, #20]
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 808926e:	6623      	str	r3, [r4, #96]	; 0x60
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8089270:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
}
 8089274:	bd38      	pop	{r3, r4, r5, pc}
    digitalWrite(_cs, HIGH);
 8089276:	2101      	movs	r1, #1
 8089278:	b280      	uxth	r0, r0
 808927a:	f003 ffe0 	bl	808d23e <digitalWrite>
    pinMode(_cs, OUTPUT);
 808927e:	f994 001c 	ldrsb.w	r0, [r4, #28]
 8089282:	2101      	movs	r1, #1
 8089284:	b280      	uxth	r0, r0
 8089286:	f003 ffc9 	bl	808d21c <pinMode>
    if (_BME680_SoftwareSPI_SCK == -1) {
 808928a:	4b18      	ldr	r3, [pc, #96]	; (80892ec <_ZN15Adafruit_BME6805beginEh+0xcc>)
 808928c:	f993 0000 	ldrsb.w	r0, [r3]
 8089290:	1c43      	adds	r3, r0, #1
 8089292:	d10b      	bne.n	80892ac <_ZN15Adafruit_BME6805beginEh+0x8c>
      SPI.begin();
 8089294:	f7ff ffbc 	bl	8089210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
    gas_sensor.dev_id = _cs;
 8089298:	7f23      	ldrb	r3, [r4, #28]
 808929a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
 808929e:	2300      	movs	r3, #0
 80892a0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
 80892a4:	4b12      	ldr	r3, [pc, #72]	; (80892f0 <_ZN15Adafruit_BME6805beginEh+0xd0>)
 80892a6:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
 80892a8:	4b12      	ldr	r3, [pc, #72]	; (80892f4 <_ZN15Adafruit_BME6805beginEh+0xd4>)
 80892aa:	e7cd      	b.n	8089248 <_ZN15Adafruit_BME6805beginEh+0x28>
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
 80892ac:	2101      	movs	r1, #1
 80892ae:	b280      	uxth	r0, r0
 80892b0:	f003 ffb4 	bl	808d21c <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
 80892b4:	4b10      	ldr	r3, [pc, #64]	; (80892f8 <_ZN15Adafruit_BME6805beginEh+0xd8>)
 80892b6:	2101      	movs	r1, #1
 80892b8:	f993 0000 	ldrsb.w	r0, [r3]
 80892bc:	b280      	uxth	r0, r0
 80892be:	f003 ffad 	bl	808d21c <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
 80892c2:	4b0e      	ldr	r3, [pc, #56]	; (80892fc <_ZN15Adafruit_BME6805beginEh+0xdc>)
 80892c4:	2100      	movs	r1, #0
 80892c6:	f993 0000 	ldrsb.w	r0, [r3]
 80892ca:	b280      	uxth	r0, r0
 80892cc:	f003 ffa6 	bl	808d21c <pinMode>
 80892d0:	e7e2      	b.n	8089298 <_ZN15Adafruit_BME6805beginEh+0x78>
    return false;
 80892d2:	2000      	movs	r0, #0
 80892d4:	e7ce      	b.n	8089274 <_ZN15Adafruit_BME6805beginEh+0x54>
 80892d6:	bf00      	nop
 80892d8:	08088f69 	.word	0x08088f69
 80892dc:	08088f27 	.word	0x08088f27
 80892e0:	08088f23 	.word	0x08088f23
 80892e4:	02030402 	.word	0x02030402
 80892e8:	00960140 	.word	0x00960140
 80892ec:	20000d62 	.word	0x20000d62
 80892f0:	08089301 	.word	0x08089301
 80892f4:	08089365 	.word	0x08089365
 80892f8:	20000d61 	.word	0x20000d61
 80892fc:	20000d60 	.word	0x20000d60

08089300 <_ZL8spi_readhhPht>:
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8089300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089302:	460f      	mov	r7, r1
  digitalWrite(cspin, LOW);
 8089304:	2100      	movs	r1, #0
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8089306:	461d      	mov	r5, r3
 8089308:	4614      	mov	r4, r2
  digitalWrite(cspin, LOW);
 808930a:	4606      	mov	r6, r0
 808930c:	f003 ff97 	bl	808d23e <digitalWrite>
  if (_BME680_SoftwareSPI_SCK == -1) {
 8089310:	4b13      	ldr	r3, [pc, #76]	; (8089360 <_ZL8spi_readhhPht+0x60>)
 8089312:	f993 3000 	ldrsb.w	r3, [r3]
 8089316:	3301      	adds	r3, #1
 8089318:	d110      	bne.n	808933c <_ZL8spi_readhhPht+0x3c>
    SPI.begin();
 808931a:	f7ff ff79 	bl	8089210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
        instance().setClockDivider(divider);
 808931e:	f7ff ff15 	bl	808914c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8089322:	2140      	movs	r1, #64	; 0x40
 8089324:	f001 feb2 	bl	808b08c <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
 8089328:	f7ff ff10 	bl	808914c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808932c:	2101      	movs	r1, #1
 808932e:	f001 fe4f 	bl	808afd0 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
 8089332:	f7ff ff0b 	bl	808914c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8089336:	2100      	movs	r1, #0
 8089338:	f001 fe58 	bl	808afec <_ZN8SPIClass11setDataModeEh>
  spi_transfer(reg_addr);
 808933c:	4638      	mov	r0, r7
 808933e:	f7ff ff27 	bl	8089190 <_ZL12spi_transferh>
 8089342:	4425      	add	r5, r4
  while (len--) {
 8089344:	42ac      	cmp	r4, r5
 8089346:	d005      	beq.n	8089354 <_ZL8spi_readhhPht+0x54>
    *reg_data = spi_transfer(0x00);
 8089348:	2000      	movs	r0, #0
 808934a:	f7ff ff21 	bl	8089190 <_ZL12spi_transferh>
 808934e:	f804 0b01 	strb.w	r0, [r4], #1
  while (len--) {
 8089352:	e7f7      	b.n	8089344 <_ZL8spi_readhhPht+0x44>
  digitalWrite(cspin, HIGH);
 8089354:	4630      	mov	r0, r6
 8089356:	2101      	movs	r1, #1
 8089358:	f003 ff71 	bl	808d23e <digitalWrite>
}
 808935c:	2000      	movs	r0, #0
 808935e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8089360:	20000d62 	.word	0x20000d62

08089364 <_ZL9spi_writehhPht>:
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8089364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089366:	460f      	mov	r7, r1
  digitalWrite(cspin, LOW);
 8089368:	2100      	movs	r1, #0
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 808936a:	461d      	mov	r5, r3
 808936c:	4614      	mov	r4, r2
  digitalWrite(cspin, LOW);
 808936e:	4606      	mov	r6, r0
 8089370:	f003 ff65 	bl	808d23e <digitalWrite>
  if (_BME680_SoftwareSPI_SCK == -1) {
 8089374:	4b13      	ldr	r3, [pc, #76]	; (80893c4 <_ZL9spi_writehhPht+0x60>)
 8089376:	f993 3000 	ldrsb.w	r3, [r3]
 808937a:	3301      	adds	r3, #1
 808937c:	d110      	bne.n	80893a0 <_ZL9spi_writehhPht+0x3c>
    SPI.begin();
 808937e:	f7ff ff47 	bl	8089210 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
        instance().setClockDivider(divider);
 8089382:	f7ff fee3 	bl	808914c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8089386:	2140      	movs	r1, #64	; 0x40
 8089388:	f001 fe80 	bl	808b08c <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
 808938c:	f7ff fede 	bl	808914c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8089390:	2101      	movs	r1, #1
 8089392:	f001 fe1d 	bl	808afd0 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
 8089396:	f7ff fed9 	bl	808914c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808939a:	2100      	movs	r1, #0
 808939c:	f001 fe26 	bl	808afec <_ZN8SPIClass11setDataModeEh>
  spi_transfer(reg_addr);
 80893a0:	4638      	mov	r0, r7
 80893a2:	f7ff fef5 	bl	8089190 <_ZL12spi_transferh>
 80893a6:	4425      	add	r5, r4
  while (len--) {
 80893a8:	42ac      	cmp	r4, r5
 80893aa:	d004      	beq.n	80893b6 <_ZL9spi_writehhPht+0x52>
    spi_transfer(*reg_data);
 80893ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 80893b0:	f7ff feee 	bl	8089190 <_ZL12spi_transferh>
  while (len--) {
 80893b4:	e7f8      	b.n	80893a8 <_ZL9spi_writehhPht+0x44>
  digitalWrite(cspin, HIGH);
 80893b6:	4630      	mov	r0, r6
 80893b8:	2101      	movs	r1, #1
 80893ba:	f003 ff40 	bl	808d23e <digitalWrite>
}
 80893be:	2000      	movs	r0, #0
 80893c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80893c2:	bf00      	nop
 80893c4:	20000d62 	.word	0x20000d62

080893c8 <_ZN7HIH61XX5startEv>:

uint8_t HIH61XX::start() {
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
 80893c8:	7983      	ldrb	r3, [r0, #6]
 80893ca:	f063 037f 	orn	r3, r3, #127	; 0x7f

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 80893ce:	f023 030f 	bic.w	r3, r3, #15
 80893d2:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 80893d4:	2000      	movs	r0, #0
 80893d6:	4770      	bx	lr

080893d8 <_ZN7HIH61XX4stopEv>:

uint8_t HIH61XX::stop() {
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
 80893d8:	7983      	ldrb	r3, [r0, #6]
 80893da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80893de:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 80893e0:	2000      	movs	r0, #0
 80893e2:	4770      	bx	lr

080893e4 <_ZN7HIH61XXC1Eh>:
HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 80893e4:	4a03      	ldr	r2, [pc, #12]	; (80893f4 <_ZN7HIH61XXC1Eh+0x10>)
 80893e6:	7101      	strb	r1, [r0, #4]
 80893e8:	6002      	str	r2, [r0, #0]
 80893ea:	2200      	movs	r2, #0
 80893ec:	7182      	strb	r2, [r0, #6]
 80893ee:	6082      	str	r2, [r0, #8]
}
 80893f0:	4770      	bx	lr
 80893f2:	bf00      	nop
 80893f4:	080940bc 	.word	0x080940bc

080893f8 <_ZN7HIH61XX6updateEv>:

uint8_t HIH61XX::update() {
 80893f8:	b570      	push	{r4, r5, r6, lr}
            return f & RunningFlag;
 80893fa:	f990 3006 	ldrsb.w	r3, [r0, #6]
 80893fe:	4604      	mov	r4, r0
    if (!isRunning()) {
 8089400:	2b00      	cmp	r3, #0
 8089402:	db07      	blt.n	8089414 <_ZN7HIH61XX6updateEv+0x1c>
        return setError(NotRunningError);
 8089404:	2603      	movs	r6, #3
            f = (f & ~ErrorMask) | error;
 8089406:	f023 030f 	bic.w	r3, r3, #15
 808940a:	f043 0303 	orr.w	r3, r3, #3
 808940e:	7183      	strb	r3, [r0, #6]
    } else {
        Serial.print("...");
        Serial.println(azer);
        return setError(ConnectionError);
    }
}
 8089410:	4630      	mov	r0, r6
 8089412:	bd70      	pop	{r4, r5, r6, pc}
    Wire.beginTransmission(a);
 8089414:	f003 ffa8 	bl	808d368 <_Z19__fetch_global_Wirev>
 8089418:	7921      	ldrb	r1, [r4, #4]
 808941a:	f003 fd41 	bl	808cea0 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 808941e:	f003 ffa3 	bl	808d368 <_Z19__fetch_global_Wirev>
 8089422:	f003 fd60 	bl	808cee6 <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 8089426:	4606      	mov	r6, r0
 8089428:	2800      	cmp	r0, #0
 808942a:	d15b      	bne.n	80894e4 <_ZN7HIH61XX6updateEv+0xec>
            delay(10);
 808942c:	200a      	movs	r0, #10
 808942e:	f002 fe4f 	bl	808c0d0 <delay>
            Wire.requestFrom(a, (uint8_t) 4);
 8089432:	f003 ff99 	bl	808d368 <_Z19__fetch_global_Wirev>
 8089436:	2204      	movs	r2, #4
 8089438:	7921      	ldrb	r1, [r4, #4]
 808943a:	f003 fd2e 	bl	808ce9a <_ZN7TwoWire11requestFromEhj>
            if (Wire.available()) {
 808943e:	f003 ff93 	bl	808d368 <_Z19__fetch_global_Wirev>
 8089442:	6803      	ldr	r3, [r0, #0]
 8089444:	691b      	ldr	r3, [r3, #16]
 8089446:	4798      	blx	r3
 8089448:	2800      	cmp	r0, #0
 808944a:	d043      	beq.n	80894d4 <_ZN7HIH61XX6updateEv+0xdc>
                x = Wire.read();
 808944c:	f003 ff8c 	bl	808d368 <_Z19__fetch_global_Wirev>
 8089450:	6803      	ldr	r3, [r0, #0]
 8089452:	695b      	ldr	r3, [r3, #20]
 8089454:	4798      	blx	r3
 8089456:	4605      	mov	r5, r0
                y = Wire.read();
 8089458:	f003 ff86 	bl	808d368 <_Z19__fetch_global_Wirev>
 808945c:	6803      	ldr	r3, [r0, #0]
 808945e:	695b      	ldr	r3, [r3, #20]
 8089460:	4798      	blx	r3
                s = x >> 6;
 8089462:	f3c5 1381 	ubfx	r3, r5, #6, #2
                switch (s) {
 8089466:	2b01      	cmp	r3, #1
 8089468:	d023      	beq.n	80894b2 <_ZN7HIH61XX6updateEv+0xba>
 808946a:	2b02      	cmp	r3, #2
 808946c:	d026      	beq.n	80894bc <_ZN7HIH61XX6updateEv+0xc4>
 808946e:	2b00      	cmp	r3, #0
 8089470:	d1dc      	bne.n	808942c <_ZN7HIH61XX6updateEv+0x34>
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 8089472:	022d      	lsls	r5, r5, #8
 8089474:	b2c0      	uxtb	r0, r0
 8089476:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
 808947a:	4305      	orrs	r5, r0
 808947c:	8125      	strh	r5, [r4, #8]
                        x = Wire.read();
 808947e:	f003 ff73 	bl	808d368 <_Z19__fetch_global_Wirev>
 8089482:	6803      	ldr	r3, [r0, #0]
 8089484:	695b      	ldr	r3, [r3, #20]
 8089486:	4798      	blx	r3
 8089488:	4605      	mov	r5, r0
                        y = Wire.read();
 808948a:	f003 ff6d 	bl	808d368 <_Z19__fetch_global_Wirev>
 808948e:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8089490:	022d      	lsls	r5, r5, #8
                        y = Wire.read();
 8089492:	695b      	ldr	r3, [r3, #20]
 8089494:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8089496:	b2ad      	uxth	r5, r5
 8089498:	b2c0      	uxtb	r0, r0
 808949a:	4305      	orrs	r5, r0
 808949c:	10ad      	asrs	r5, r5, #2
 808949e:	8165      	strh	r5, [r4, #10]
                        Wire.endTransmission();
 80894a0:	f003 ff62 	bl	808d368 <_Z19__fetch_global_Wirev>
 80894a4:	f003 fd1f 	bl	808cee6 <_ZN7TwoWire15endTransmissionEv>
 80894a8:	79a3      	ldrb	r3, [r4, #6]
 80894aa:	f023 030f 	bic.w	r3, r3, #15
 80894ae:	71a3      	strb	r3, [r4, #6]
                        return setError(0);
 80894b0:	e7ae      	b.n	8089410 <_ZN7HIH61XX6updateEv+0x18>
                        Wire.endTransmission();
 80894b2:	f003 ff59 	bl	808d368 <_Z19__fetch_global_Wirev>
 80894b6:	f003 fd16 	bl	808cee6 <_ZN7TwoWire15endTransmissionEv>
                        break;
 80894ba:	e7b7      	b.n	808942c <_ZN7HIH61XX6updateEv+0x34>
                        Wire.endTransmission();
 80894bc:	f003 ff54 	bl	808d368 <_Z19__fetch_global_Wirev>
 80894c0:	f003 fd11 	bl	808cee6 <_ZN7TwoWire15endTransmissionEv>
 80894c4:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 80894c6:	2604      	movs	r6, #4
 80894c8:	f023 030f 	bic.w	r3, r3, #15
 80894cc:	f043 0304 	orr.w	r3, r3, #4
 80894d0:	71a3      	strb	r3, [r4, #6]
 80894d2:	e79d      	b.n	8089410 <_ZN7HIH61XX6updateEv+0x18>
 80894d4:	79a3      	ldrb	r3, [r4, #6]
                return setError(CommunicationError);
 80894d6:	2602      	movs	r6, #2
 80894d8:	f023 030f 	bic.w	r3, r3, #15
 80894dc:	f043 0302 	orr.w	r3, r3, #2
 80894e0:	71a3      	strb	r3, [r4, #6]
 80894e2:	e795      	b.n	8089410 <_ZN7HIH61XX6updateEv+0x18>
        Serial.print("...");
 80894e4:	f003 fae6 	bl	808cab4 <_Z16_fetch_usbserialv>
 80894e8:	490a      	ldr	r1, [pc, #40]	; (8089514 <_ZN7HIH61XX6updateEv+0x11c>)
 80894ea:	f002 fa15 	bl	808b918 <_ZN5Print5printEPKc>
        Serial.println(azer);
 80894ee:	f003 fae1 	bl	808cab4 <_Z16_fetch_usbserialv>
 80894f2:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 80894f4:	4631      	mov	r1, r6
 80894f6:	220a      	movs	r2, #10
 80894f8:	f002 fa35 	bl	808b966 <_ZN5Print11printNumberEmh>
        n += println();
 80894fc:	4628      	mov	r0, r5
 80894fe:	f002 fa12 	bl	808b926 <_ZN5Print7printlnEv>
 8089502:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 8089504:	2601      	movs	r6, #1
 8089506:	f023 030f 	bic.w	r3, r3, #15
 808950a:	f043 0301 	orr.w	r3, r3, #1
 808950e:	71a3      	strb	r3, [r4, #6]
 8089510:	e77e      	b.n	8089410 <_ZN7HIH61XX6updateEv+0x18>
 8089512:	bf00      	nop
 8089514:	08093dc8 	.word	0x08093dc8

08089518 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8089518:	2a68      	cmp	r2, #104	; 0x68
uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 808951a:	b538      	push	{r3, r4, r5, lr}
 808951c:	460d      	mov	r5, r1
    switch (command) {
 808951e:	d01a      	beq.n	8089556 <_ZN7HIH61XX14commandProcessER6Streamh+0x3e>
 8089520:	d80c      	bhi.n	808953c <_ZN7HIH61XX14commandProcessER6Streamh+0x24>
 8089522:	2a31      	cmp	r2, #49	; 0x31
 8089524:	d038      	beq.n	8089598 <_ZN7HIH61XX14commandProcessER6Streamh+0x80>
 8089526:	2a61      	cmp	r2, #97	; 0x61
 8089528:	d030      	beq.n	808958c <_ZN7HIH61XX14commandProcessER6Streamh+0x74>
 808952a:	2a30      	cmp	r2, #48	; 0x30
 808952c:	d038      	beq.n	80895a0 <_ZN7HIH61XX14commandProcessER6Streamh+0x88>
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 808952e:	220a      	movs	r2, #10
 8089530:	21fe      	movs	r1, #254	; 0xfe
 8089532:	4628      	mov	r0, r5
 8089534:	f7fe f90c 	bl	8087750 <_ZN5Print7printlnIhLi0EEEjT_i>
            //  stop
        case '0':
            return commandReply(stream, stop());
    }

    return commandReply(stream, 254);
 8089538:	24fe      	movs	r4, #254	; 0xfe
 808953a:	e018      	b.n	808956e <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
    switch (command) {
 808953c:	2a74      	cmp	r2, #116	; 0x74
 808953e:	d018      	beq.n	8089572 <_ZN7HIH61XX14commandProcessER6Streamh+0x5a>
 8089540:	2a75      	cmp	r2, #117	; 0x75
 8089542:	d1f4      	bne.n	808952e <_ZN7HIH61XX14commandProcessER6Streamh+0x16>
            return commandReply(stream, update());
 8089544:	f7ff ff58 	bl	80893f8 <_ZN7HIH61XX6updateEv>
            return commandReply(stream, stop());
 8089548:	4604      	mov	r4, r0
 808954a:	4601      	mov	r1, r0
 808954c:	220a      	movs	r2, #10
 808954e:	4628      	mov	r0, r5
 8089550:	f7fe f8fe 	bl	8087750 <_ZN5Print7printlnIhLi0EEEjT_i>
 8089554:	e00b      	b.n	808956e <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
            return float(raw) / 16382;
 8089556:	8900      	ldrh	r0, [r0, #8]
 8089558:	f004 fd22 	bl	808dfa0 <__aeabi_ui2f>
 808955c:	4912      	ldr	r1, [pc, #72]	; (80895a8 <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 808955e:	f004 fe2b 	bl	808e1b8 <__aeabi_fdiv>
            return (float(raw) / 16382) * 165 - 40;
 8089562:	4601      	mov	r1, r0
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 8089564:	2202      	movs	r2, #2
 8089566:	4628      	mov	r0, r5
 8089568:	f002 fae8 	bl	808bb3c <_ZN5Print7printlnEfi>
            return commandReply(stream, 0, temperature());
 808956c:	2400      	movs	r4, #0
}
 808956e:	4620      	mov	r0, r4
 8089570:	bd38      	pop	{r3, r4, r5, pc}
            return (float(raw) / 16382) * 165 - 40;
 8089572:	8940      	ldrh	r0, [r0, #10]
 8089574:	f004 fd14 	bl	808dfa0 <__aeabi_ui2f>
 8089578:	490b      	ldr	r1, [pc, #44]	; (80895a8 <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 808957a:	f004 fe1d 	bl	808e1b8 <__aeabi_fdiv>
 808957e:	490b      	ldr	r1, [pc, #44]	; (80895ac <_ZN7HIH61XX14commandProcessER6Streamh+0x94>)
 8089580:	f004 fd66 	bl	808e050 <__aeabi_fmul>
 8089584:	490a      	ldr	r1, [pc, #40]	; (80895b0 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8089586:	f004 fc59 	bl	808de3c <__aeabi_fsub>
 808958a:	e7ea      	b.n	8089562 <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
            stream.println(data);
 808958c:	7901      	ldrb	r1, [r0, #4]
 808958e:	220a      	movs	r2, #10
 8089590:	4628      	mov	r0, r5
 8089592:	f7fe f8dd 	bl	8087750 <_ZN5Print7printlnIhLi0EEEjT_i>
 8089596:	e7e9      	b.n	808956c <_ZN7HIH61XX14commandProcessER6Streamh+0x54>
            return commandReply(stream, start());
 8089598:	6803      	ldr	r3, [r0, #0]
 808959a:	681b      	ldr	r3, [r3, #0]
            return commandReply(stream, stop());
 808959c:	4798      	blx	r3
 808959e:	e7d3      	b.n	8089548 <_ZN7HIH61XX14commandProcessER6Streamh+0x30>
 80895a0:	6803      	ldr	r3, [r0, #0]
 80895a2:	685b      	ldr	r3, [r3, #4]
 80895a4:	e7fa      	b.n	808959c <_ZN7HIH61XX14commandProcessER6Streamh+0x84>
 80895a6:	bf00      	nop
 80895a8:	467ff800 	.word	0x467ff800
 80895ac:	43250000 	.word	0x43250000
 80895b0:	42200000 	.word	0x42200000

080895b4 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 80895b4:	b510      	push	{r4, lr}
 80895b6:	4604      	mov	r4, r0
 80895b8:	4b05      	ldr	r3, [pc, #20]	; (80895d0 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 80895ba:	f840 3b2c 	str.w	r3, [r0], #44
 80895be:	f001 ff4f 	bl	808b460 <_ZN6StringD1Ev>
 80895c2:	f104 000c 	add.w	r0, r4, #12
 80895c6:	f001 ff4b 	bl	808b460 <_ZN6StringD1Ev>

}
 80895ca:	4620      	mov	r0, r4
 80895cc:	bd10      	pop	{r4, pc}
 80895ce:	bf00      	nop
 80895d0:	08094164 	.word	0x08094164

080895d4 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 80895d4:	b510      	push	{r4, lr}
 80895d6:	4604      	mov	r4, r0
}
 80895d8:	f7ff ffec 	bl	80895b4 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 80895dc:	4620      	mov	r0, r4
 80895de:	2144      	movs	r1, #68	; 0x44
 80895e0:	f003 ff17 	bl	808d412 <_ZdlPvj>
 80895e4:	4620      	mov	r0, r4
 80895e6:	bd10      	pop	{r4, pc}

080895e8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>:
#endif /* Wiring_WiFi */


#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
 80895e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80895ea:	4604      	mov	r4, r0
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80895ec:	4e16      	ldr	r6, [pc, #88]	; (8089648 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x60>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80895ee:	6863      	ldr	r3, [r4, #4]
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80895f0:	6830      	ldr	r0, [r6, #0]
 80895f2:	4d16      	ldr	r5, [pc, #88]	; (808964c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x64>)
	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80895f4:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 80895f8:	9303      	str	r3, [sp, #12]
 80895fa:	6823      	ldr	r3, [r4, #0]
 80895fc:	4a14      	ldr	r2, [pc, #80]	; (8089650 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x68>)
 80895fe:	9302      	str	r3, [sp, #8]
 8089600:	68a3      	ldr	r3, [r4, #8]
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 8089602:	1a2d      	subs	r5, r5, r0
	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 8089604:	9301      	str	r3, [sp, #4]
 8089606:	68e3      	ldr	r3, [r4, #12]
 8089608:	9300      	str	r3, [sp, #0]
 808960a:	4b12      	ldr	r3, [pc, #72]	; (8089654 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x6c>)
 808960c:	295b      	cmp	r1, #91	; 0x5b
 808960e:	bf18      	it	ne
 8089610:	4613      	movne	r3, r2
 8089612:	4629      	mov	r1, r5
 8089614:	4a10      	ldr	r2, [pc, #64]	; (8089658 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x70>)
 8089616:	f001 fb09 	bl	808ac2c <snprintf>
			"%s{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
 808961a:	4285      	cmp	r5, r0
 808961c:	d312      	bcc.n	8089644 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 808961e:	68a2      	ldr	r2, [r4, #8]
 8089620:	b182      	cbz	r2, 8089644 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 8089622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8089626:	429a      	cmp	r2, r3
 8089628:	d00c      	beq.n	8089644 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 808962a:	6822      	ldr	r2, [r4, #0]
 808962c:	429a      	cmp	r2, r3
 808962e:	d009      	beq.n	8089644 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 8089630:	6862      	ldr	r2, [r4, #4]
 8089632:	429a      	cmp	r2, r3
 8089634:	d006      	beq.n	8089644 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 8089636:	6833      	ldr	r3, [r6, #0]
		numAdded++;
 8089638:	4a08      	ldr	r2, [pc, #32]	; (808965c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x74>)
		requestCur += sizeNeeded;
 808963a:	4418      	add	r0, r3
		numAdded++;
 808963c:	6813      	ldr	r3, [r2, #0]
		requestCur += sizeNeeded;
 808963e:	6030      	str	r0, [r6, #0]
		numAdded++;
 8089640:	3301      	adds	r3, #1
 8089642:	6013      	str	r3, [r2, #0]
	}

}
 8089644:	b004      	add	sp, #16
 8089646:	bd70      	pop	{r4, r5, r6, pc}
 8089648:	20000e64 	.word	0x20000e64
 808964c:	20000e5f 	.word	0x20000e5f
 8089650:	080940f6 	.word	0x080940f6
 8089654:	080943b2 	.word	0x080943b2
 8089658:	080940c8 	.word	0x080940c8
 808965c:	20000e6c 	.word	0x20000e6c

08089660 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 8089660:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8089664:	4604      	mov	r4, r0
	if (callback) {
 8089666:	6a63      	ldr	r3, [r4, #36]	; 0x24
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 8089668:	4610      	mov	r0, r2
	if (callback) {
 808966a:	b383      	cbz	r3, 80896ce <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x6e>
		char *mutableCopy = strdup(data);
 808966c:	f005 faac 	bl	808ebc8 <strdup>
		part = strtok_r(mutableCopy, ",", &end);
 8089670:	4918      	ldr	r1, [pc, #96]	; (80896d4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 8089672:	aa01      	add	r2, sp, #4
		char *mutableCopy = strdup(data);
 8089674:	4605      	mov	r5, r0
		part = strtok_r(mutableCopy, ",", &end);
 8089676:	f006 feb3 	bl	80903e0 <strtok_r>
		if (part) {
 808967a:	b328      	cbz	r0, 80896c8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
			lat = atof(part);
 808967c:	f005 f918 	bl	808e8b0 <atof>
			part = strtok_r(NULL, ",", &end);
 8089680:	aa01      	add	r2, sp, #4
			lat = atof(part);
 8089682:	4606      	mov	r6, r0
 8089684:	460f      	mov	r7, r1
			part = strtok_r(NULL, ",", &end);
 8089686:	2000      	movs	r0, #0
 8089688:	4912      	ldr	r1, [pc, #72]	; (80896d4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 808968a:	f006 fea9 	bl	80903e0 <strtok_r>
			if (part) {
 808968e:	b1d8      	cbz	r0, 80896c8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
				lon = atof(part);
 8089690:	f005 f90e 	bl	808e8b0 <atof>
				part = strtok_r(NULL, ",", &end);
 8089694:	aa01      	add	r2, sp, #4
				lon = atof(part);
 8089696:	4680      	mov	r8, r0
 8089698:	4689      	mov	r9, r1
				part = strtok_r(NULL, ",", &end);
 808969a:	2000      	movs	r0, #0
 808969c:	490d      	ldr	r1, [pc, #52]	; (80896d4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 808969e:	f006 fe9f 	bl	80903e0 <strtok_r>
				if (part) {
 80896a2:	b188      	cbz	r0, 80896c8 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
					accuracy = atof(part);
 80896a4:	f005 f904 	bl	808e8b0 <atof>
 80896a8:	f004 fb74 	bl	808dd94 <__aeabi_d2f>
				lon = atof(part);
 80896ac:	4649      	mov	r1, r9
					accuracy = atof(part);
 80896ae:	4682      	mov	sl, r0
				lon = atof(part);
 80896b0:	4640      	mov	r0, r8
 80896b2:	f004 fb6f 	bl	808dd94 <__aeabi_d2f>
 80896b6:	4680      	mov	r8, r0
			lat = atof(part);
 80896b8:	4639      	mov	r1, r7
 80896ba:	4630      	mov	r0, r6
 80896bc:	f004 fb6a 	bl	808dd94 <__aeabi_d2f>
					(*callback)(lat, lon, accuracy);
 80896c0:	4652      	mov	r2, sl
 80896c2:	4641      	mov	r1, r8
 80896c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80896c6:	4798      	blx	r3
		free(mutableCopy);
 80896c8:	4628      	mov	r0, r5
 80896ca:	f001 fa7f 	bl	808abcc <free>
}
 80896ce:	b002      	add	sp, #8
 80896d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80896d4:	080940f6 	.word	0x080940f6

080896d8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0>:

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 80896d8:	b570      	push	{r4, r5, r6, lr}
 80896da:	b0ca      	sub	sp, #296	; 0x128
};

template <size_t MAX_NEIGHBOR_CELLS>
class CellularHelperEnvironmentResponseStatic : public CellularHelperEnvironmentResponse {
public:
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 80896dc:	2204      	movs	r2, #4
 80896de:	a91e      	add	r1, sp, #120	; 0x78
 80896e0:	a805      	add	r0, sp, #20
 80896e2:	f000 fb7f 	bl	8089de4 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>
 80896e6:	2504      	movs	r5, #4
class CellularHelperEnvironmentCellData { // 44 bytes
 80896e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80896ec:	22ff      	movs	r2, #255	; 0xff
 80896ee:	2100      	movs	r1, #0
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 80896f0:	4b2e      	ldr	r3, [pc, #184]	; (80897ac <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd4>)
 80896f2:	9305      	str	r3, [sp, #20]
 80896f4:	ab05      	add	r3, sp, #20
 80896f6:	3d01      	subs	r5, #1
class CellularHelperEnvironmentCellData { // 44 bytes
 80896f8:	e9c3 0219 	strd	r0, r2, [r3, #100]	; 0x64
 80896fc:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
 8089700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 8089704:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8089708:	d1f5      	bne.n	80896f6 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0x1e>
	}

	// First try to get info on neighboring cells. This doesn't work for me using the U260
	CellularHelperEnvironmentResponseStatic<4> envResp;

	CellularHelper.getEnvironment(5, envResp);
 808970a:	2105      	movs	r1, #5
 808970c:	4828      	ldr	r0, [pc, #160]	; (80897b0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd8>)
 808970e:	aa05      	add	r2, sp, #20
 8089710:	f000 fe80 	bl	808a414 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>

	if (envResp.resp != RESP_OK) {
 8089714:	9b06      	ldr	r3, [sp, #24]
 8089716:	3302      	adds	r3, #2
 8089718:	d004      	beq.n	8089724 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0x4c>
		// We couldn't get neighboring cells, so try just the receiving cell
		CellularHelper.getEnvironment(3, envResp);
 808971a:	2103      	movs	r1, #3
 808971c:	4824      	ldr	r0, [pc, #144]	; (80897b0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd8>)
 808971e:	aa05      	add	r2, sp, #20
 8089720:	f000 fe78 	bl	808a414 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089724:	4c23      	ldr	r4, [pc, #140]	; (80897b4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xdc>)
			CellularHelper.getOperatorName().c_str());
 8089726:	2209      	movs	r2, #9
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089728:	6826      	ldr	r6, [r4, #0]
			CellularHelper.getOperatorName().c_str());
 808972a:	4921      	ldr	r1, [pc, #132]	; (80897b0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd8>)
 808972c:	a801      	add	r0, sp, #4
 808972e:	f000 fe3f 	bl	808a3b0 <_ZNK19CellularHelperClass15getOperatorNameEi>
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089732:	9a01      	ldr	r2, [sp, #4]
 8089734:	4920      	ldr	r1, [pc, #128]	; (80897b8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xe0>)
 8089736:	4630      	mov	r0, r6
 8089738:	f001 fa58 	bl	808abec <sprintf>
 808973c:	6823      	ldr	r3, [r4, #0]
	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
		cellularAddTower(&envResp.neighbors[ii]);
 808973e:	262c      	movs	r6, #44	; 0x2c
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089740:	4403      	add	r3, r0
			CellularHelper.getOperatorName().c_str());
 8089742:	a801      	add	r0, sp, #4
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089744:	6023      	str	r3, [r4, #0]
			CellularHelper.getOperatorName().c_str());
 8089746:	f001 fe8b 	bl	808b460 <_ZN6StringD1Ev>
	requestCur += sprintf(requestCur, "\"a\":[");
 808974a:	6823      	ldr	r3, [r4, #0]
 808974c:	491b      	ldr	r1, [pc, #108]	; (80897bc <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xe4>)
 808974e:	4618      	mov	r0, r3
 8089750:	f005 fa31 	bl	808ebb6 <strcpy>
 8089754:	4603      	mov	r3, r0
	cellularAddTower(&envResp.service);
 8089756:	a810      	add	r0, sp, #64	; 0x40
	requestCur += sprintf(requestCur, "\"a\":[");
 8089758:	3305      	adds	r3, #5
 808975a:	6023      	str	r3, [r4, #0]
	cellularAddTower(&envResp.service);
 808975c:	f7ff ff44 	bl	80895e8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>
	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 8089760:	a805      	add	r0, sp, #20
 8089762:	f000 fd0f 	bl	808a184 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>
 8089766:	42a8      	cmp	r0, r5
 8089768:	d906      	bls.n	8089778 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xa0>
		cellularAddTower(&envResp.neighbors[ii]);
 808976a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 808976c:	fb06 0005 	mla	r0, r6, r5, r0
 8089770:	f7ff ff3a 	bl	80895e8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>
	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 8089774:	3501      	adds	r5, #1
 8089776:	e7f3      	b.n	8089760 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0x88>
	}

	*requestCur++ = ']';
 8089778:	225d      	movs	r2, #93	; 0x5d
 808977a:	6823      	ldr	r3, [r4, #0]
 808977c:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 808977e:	227d      	movs	r2, #125	; 0x7d
 8089780:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 8089782:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 8089784:	1d1a      	adds	r2, r3, #4
 8089786:	6022      	str	r2, [r4, #0]
 8089788:	2200      	movs	r2, #0
 808978a:	70da      	strb	r2, [r3, #3]

	if (numAdded == 0) {
 808978c:	4b0c      	ldr	r3, [pc, #48]	; (80897c0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xe8>)
 808978e:	681b      	ldr	r3, [r3, #0]
 8089790:	b90b      	cbnz	r3, 8089796 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xbe>
		requestBuf[0] = 0;
 8089792:	4a0c      	ldr	r2, [pc, #48]	; (80897c4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xec>)
 8089794:	7013      	strb	r3, [r2, #0]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089796:	4b0c      	ldr	r3, [pc, #48]	; (80897c8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xf0>)
 8089798:	a80c      	add	r0, sp, #48	; 0x30
 808979a:	9305      	str	r3, [sp, #20]
 808979c:	f001 fe60 	bl	808b460 <_ZN6StringD1Ev>
 80897a0:	a808      	add	r0, sp, #32
 80897a2:	f001 fe5d 	bl	808b460 <_ZN6StringD1Ev>
	}

	return requestBuf;
}
 80897a6:	4807      	ldr	r0, [pc, #28]	; (80897c4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xec>)
 80897a8:	b04a      	add	sp, #296	; 0x128
 80897aa:	bd70      	pop	{r4, r5, r6, pc}
 80897ac:	08094158 	.word	0x08094158
 80897b0:	20000e70 	.word	0x20000e70
 80897b4:	20000e64 	.word	0x20000e64
 80897b8:	080940e8 	.word	0x080940e8
 80897bc:	080940f8 	.word	0x080940f8
 80897c0:	20000e6c 	.word	0x20000e6c
 80897c4:	20000d63 	.word	0x20000d63
 80897c8:	080943d0 	.word	0x080943d0

080897cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80897cc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80897ce:	b538      	push	{r3, r4, r5, lr}
 80897d0:	4604      	mov	r4, r0
	  switch (__op)
 80897d2:	d007      	beq.n	80897e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
 80897d4:	2a03      	cmp	r2, #3
 80897d6:	d011      	beq.n	80897fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
 80897d8:	2a01      	cmp	r2, #1
 80897da:	d101      	bne.n	80897e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80897dc:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80897de:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80897e0:	2000      	movs	r0, #0
 80897e2:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80897e4:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80897e6:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80897e8:	f7f6 fc57 	bl	808009a <_Znwj>
 80897ec:	4603      	mov	r3, r0
 80897ee:	2800      	cmp	r0, #0
 80897f0:	d0f5      	beq.n	80897de <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 80897f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80897f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80897fa:	e7f0      	b.n	80897de <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 80897fc:	6800      	ldr	r0, [r0, #0]
 80897fe:	2800      	cmp	r0, #0
 8089800:	d0ee      	beq.n	80897e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
 8089802:	210c      	movs	r1, #12
 8089804:	f003 fe05 	bl	808d412 <_ZdlPvj>
 8089808:	e7ea      	b.n	80897e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

0808980a <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM23GoogleMapsDeviceLocatorFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808980a:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 808980c:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
 808980e:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8089810:	685c      	ldr	r4, [r3, #4]
 8089812:	689d      	ldr	r5, [r3, #8]
 8089814:	1066      	asrs	r6, r4, #1
 8089816:	eb05 0064 	add.w	r0, r5, r4, asr #1
 808981a:	07e4      	lsls	r4, r4, #31
 808981c:	bf48      	it	mi
 808981e:	59ac      	ldrmi	r4, [r5, r6]
 8089820:	681b      	ldr	r3, [r3, #0]
 8089822:	6812      	ldr	r2, [r2, #0]
 8089824:	bf48      	it	mi
 8089826:	58e3      	ldrmi	r3, [r4, r3]
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 8089828:	bc70      	pop	{r4, r5, r6}
 808982a:	4718      	bx	r3

0808982c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 808982c:	b510      	push	{r4, lr}
      if (_M_manager)
 808982e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8089830:	4604      	mov	r4, r0
      if (_M_manager)
 8089832:	b113      	cbz	r3, 808983a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8089834:	2203      	movs	r2, #3
 8089836:	4601      	mov	r1, r0
 8089838:	4798      	blx	r3
    }
 808983a:	4620      	mov	r0, r4
 808983c:	bd10      	pop	{r4, pc}
	...

08089840 <_ZN23GoogleMapsDeviceLocatorC1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8089840:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8089842:	4b0f      	ldr	r3, [pc, #60]	; (8089880 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
 8089844:	2500      	movs	r5, #0
 8089846:	6003      	str	r3, [r0, #0]
 8089848:	f242 7310 	movw	r3, #10000	; 0x2710
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 808984c:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 808984e:	e9c0 5301 	strd	r5, r3, [r0, #4]
 8089852:	490c      	ldr	r1, [pc, #48]	; (8089884 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8089854:	300c      	adds	r0, #12
 8089856:	f001 fe4d 	bl	808b4f4 <_ZN6StringC1EPKc>
 808985a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 808985e:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8089862:	62a3      	str	r3, [r4, #40]	; 0x28
 8089864:	4908      	ldr	r1, [pc, #32]	; (8089888 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8089866:	6265      	str	r5, [r4, #36]	; 0x24
 8089868:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 808986c:	f001 fe42 	bl	808b4f4 <_ZN6StringC1EPKc>
 8089870:	f44f 729b 	mov.w	r2, #310	; 0x136
 8089874:	f44f 73cd 	mov.w	r3, #410	; 0x19a
}
 8089878:	4620      	mov	r0, r4
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 808987a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
}
 808987e:	bd38      	pop	{r3, r4, r5, pc}
 8089880:	08094164 	.word	0x08094164
 8089884:	080940fe 	.word	0x080940fe
 8089888:	0809410c 	.word	0x0809410c

0808988c <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
	locatorMode = LOCATOR_MODE_PERIODIC;
 808988c:	2202      	movs	r2, #2
	periodMs = secondsPeriodic * 1000;
 808988e:	2905      	cmp	r1, #5
 8089890:	bf38      	it	cc
 8089892:	2105      	movcc	r1, #5
	locatorMode = LOCATOR_MODE_PERIODIC;
 8089894:	6042      	str	r2, [r0, #4]
	periodMs = secondsPeriodic * 1000;
 8089896:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808989a:	4351      	muls	r1, r2
 808989c:	6081      	str	r1, [r0, #8]
}
 808989e:	4770      	bx	lr

080898a0 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>:
const char *GoogleMapsDeviceLocator::cellularScanLTE() {
 80898a0:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularHelperCommonResponse {
 80898a2:	f06f 0302 	mvn.w	r3, #2
 80898a6:	2400      	movs	r4, #0
 80898a8:	b097      	sub	sp, #92	; 0x5c
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80898aa:	4e32      	ldr	r6, [pc, #200]	; (8089974 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd4>)
 80898ac:	4605      	mov	r5, r0
 80898ae:	4932      	ldr	r1, [pc, #200]	; (8089978 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd8>)
 80898b0:	a809      	add	r0, sp, #36	; 0x24
class CellularHelperCommonResponse {
 80898b2:	9307      	str	r3, [sp, #28]
 80898b4:	f88d 4020 	strb.w	r4, [sp, #32]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80898b8:	9606      	str	r6, [sp, #24]
 80898ba:	f001 fe1b 	bl	808b4f4 <_ZN6StringC1EPKc>
 80898be:	492e      	ldr	r1, [pc, #184]	; (8089978 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd8>)
 80898c0:	a80d      	add	r0, sp, #52	; 0x34
 80898c2:	f001 fe17 	bl	808b4f4 <_ZN6StringC1EPKc>

	void postProcess();
	String toString() const;
};

class CellularHelperCREGResponse :  public CellularHelperPlusStringResponse {
 80898c6:	4b2d      	ldr	r3, [pc, #180]	; (808997c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xdc>)
 80898c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80898cc:	9306      	str	r3, [sp, #24]
 80898ce:	f04f 33ff 	mov.w	r3, #4294967295
	CellularHelper.getCREG(resp);
 80898d2:	a906      	add	r1, sp, #24
 80898d4:	482a      	ldr	r0, [pc, #168]	; (8089980 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe0>)
 80898d6:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
 80898da:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
 80898de:	9412      	str	r4, [sp, #72]	; 0x48
 80898e0:	9415      	str	r4, [sp, #84]	; 0x54
 80898e2:	f000 fdb1 	bl	808a448 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>
	Serial.println(resp.toString().c_str());
 80898e6:	f003 f8e5 	bl	808cab4 <_Z16_fetch_usbserialv>
 80898ea:	4604      	mov	r4, r0
 80898ec:	a906      	add	r1, sp, #24
 80898ee:	a802      	add	r0, sp, #8
 80898f0:	f000 fc8c 	bl	808a20c <_ZNK26CellularHelperCREGResponse8toStringEv>
 80898f4:	9902      	ldr	r1, [sp, #8]
 80898f6:	4620      	mov	r0, r4
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 80898f8:	4c22      	ldr	r4, [pc, #136]	; (8089984 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe4>)
	Serial.println(resp.toString().c_str());
 80898fa:	f002 f820 	bl	808b93e <_ZN5Print7printlnEPKc>
 80898fe:	a802      	add	r0, sp, #8
 8089900:	f001 fdae 	bl	808b460 <_ZN6StringD1Ev>
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 8089904:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8089906:	4920      	ldr	r1, [pc, #128]	; (8089988 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe8>)
 8089908:	6820      	ldr	r0, [r4, #0]
 808990a:	f001 f96f 	bl	808abec <sprintf>
 808990e:	6823      	ldr	r3, [r4, #0]
	requestCur += sprintf(requestCur, "\"a\":[");
 8089910:	491e      	ldr	r1, [pc, #120]	; (808998c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xec>)
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 8089912:	4403      	add	r3, r0
	requestCur += sprintf(requestCur, "\"a\":[");
 8089914:	4618      	mov	r0, r3
 8089916:	f005 f94e 	bl	808ebb6 <strcpy>
	if (resp.valid) {
 808991a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	requestCur += sprintf(requestCur, "\"a\":[");
 808991e:	3005      	adds	r0, #5
 8089920:	4f1b      	ldr	r7, [pc, #108]	; (8089990 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf0>)
 8089922:	6020      	str	r0, [r4, #0]
	if (resp.valid) {
 8089924:	b173      	cbz	r3, 8089944 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xa4>
		requestCur += sprintf(requestCur,
 8089926:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8089928:	491a      	ldr	r1, [pc, #104]	; (8089994 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf4>)
 808992a:	9301      	str	r3, [sp, #4]
 808992c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 808992e:	9300      	str	r3, [sp, #0]
 8089930:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8089934:	f001 f95a 	bl	808abec <sprintf>
 8089938:	6823      	ldr	r3, [r4, #0]
 808993a:	4403      	add	r3, r0
 808993c:	6023      	str	r3, [r4, #0]
		numAdded++;
 808993e:	683b      	ldr	r3, [r7, #0]
 8089940:	3301      	adds	r3, #1
 8089942:	603b      	str	r3, [r7, #0]
	*requestCur++ = ']';
 8089944:	225d      	movs	r2, #93	; 0x5d
 8089946:	6823      	ldr	r3, [r4, #0]
 8089948:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 808994a:	227d      	movs	r2, #125	; 0x7d
 808994c:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 808994e:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 8089950:	1d1a      	adds	r2, r3, #4
 8089952:	6022      	str	r2, [r4, #0]
 8089954:	2200      	movs	r2, #0
 8089956:	70da      	strb	r2, [r3, #3]
	if (numAdded == 0) {
 8089958:	683b      	ldr	r3, [r7, #0]
 808995a:	b90b      	cbnz	r3, 8089960 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc0>
		requestBuf[0] = 0;
 808995c:	4a0e      	ldr	r2, [pc, #56]	; (8089998 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf8>)
 808995e:	7013      	strb	r3, [r2, #0]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089960:	a80d      	add	r0, sp, #52	; 0x34
 8089962:	9606      	str	r6, [sp, #24]
 8089964:	f001 fd7c 	bl	808b460 <_ZN6StringD1Ev>
 8089968:	a809      	add	r0, sp, #36	; 0x24
 808996a:	f001 fd79 	bl	808b460 <_ZN6StringD1Ev>
}
 808996e:	480a      	ldr	r0, [pc, #40]	; (8089998 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf8>)
 8089970:	b017      	add	sp, #92	; 0x5c
 8089972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089974:	080943d0 	.word	0x080943d0
 8089978:	080943b2 	.word	0x080943b2
 808997c:	0809414c 	.word	0x0809414c
 8089980:	20000e70 	.word	0x20000e70
 8089984:	20000e64 	.word	0x20000e64
 8089988:	080940e8 	.word	0x080940e8
 808998c:	080940f8 	.word	0x080940f8
 8089990:	20000e6c 	.word	0x20000e6c
 8089994:	080940ca 	.word	0x080940ca
 8089998:	20000d63 	.word	0x20000d63

0808999c <_ZN23GoogleMapsDeviceLocator12cellularScanEv>:
	requestCur = requestBuf;
 808999c:	4b0a      	ldr	r3, [pc, #40]	; (80899c8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x2c>)
 808999e:	4a0b      	ldr	r2, [pc, #44]	; (80899cc <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x30>)
const char *GoogleMapsDeviceLocator::cellularScan() {
 80899a0:	b510      	push	{r4, lr}
	requestCur = requestBuf;
 80899a2:	601a      	str	r2, [r3, #0]
	numAdded = 0;
 80899a4:	2200      	movs	r2, #0
 80899a6:	4b0a      	ldr	r3, [pc, #40]	; (80899d0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x34>)
const char *GoogleMapsDeviceLocator::cellularScan() {
 80899a8:	4604      	mov	r4, r0
	if (CellularHelper.isLTE()) {
 80899aa:	480a      	ldr	r0, [pc, #40]	; (80899d4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x38>)
	numAdded = 0;
 80899ac:	601a      	str	r2, [r3, #0]
	if (CellularHelper.isLTE()) {
 80899ae:	f000 fce3 	bl	808a378 <_ZNK19CellularHelperClass5isLTEEv>
 80899b2:	b120      	cbz	r0, 80899be <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x22>
		return cellularScanLTE();
 80899b4:	4620      	mov	r0, r4
}
 80899b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return cellularScanLTE();
 80899ba:	f7ff bf71 	b.w	80898a0 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>
}
 80899be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80899c2:	f7ff be89 	b.w	80896d8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0>
 80899c6:	bf00      	nop
 80899c8:	20000e64 	.word	0x20000e64
 80899cc:	20000d63 	.word	0x20000d63
 80899d0:	20000e6c 	.word	0x20000e6c
 80899d4:	20000e70 	.word	0x20000e70

080899d8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
void GoogleMapsDeviceLocator::publishLocation() {
 80899d8:	b530      	push	{r4, r5, lr}
 80899da:	4605      	mov	r5, r0
 80899dc:	b085      	sub	sp, #20
	Serial.println("publishLocation");
 80899de:	f003 f869 	bl	808cab4 <_Z16_fetch_usbserialv>
 80899e2:	4918      	ldr	r1, [pc, #96]	; (8089a44 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
 80899e4:	f001 ffab 	bl	808b93e <_ZN5Print7printlnEPKc>
	return cellularScan();
 80899e8:	4628      	mov	r0, r5
 80899ea:	f7ff ffd7 	bl	808999c <_ZN23GoogleMapsDeviceLocator12cellularScanEv>
 80899ee:	4604      	mov	r4, r0
	Serial.printlnf("scanData=%s", scanData);
 80899f0:	f003 f860 	bl	808cab4 <_Z16_fetch_usbserialv>
 80899f4:	4622      	mov	r2, r4
 80899f6:	4914      	ldr	r1, [pc, #80]	; (8089a48 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
 80899f8:	f7f7 f948 	bl	8080c8c <_ZN5Print8printlnfEPKcz>
	if (scanData[0]) {
 80899fc:	7823      	ldrb	r3, [r4, #0]
 80899fe:	b1f3      	cbz	r3, 8089a3e <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
 8089a00:	f001 f8ac 	bl	808ab5c <spark_cloud_flag_connected>
		if (Particle.connected()) {
 8089a04:	b1d8      	cbz	r0, 8089a3e <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8089a06:	4b11      	ldr	r3, [pc, #68]	; (8089a4c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8089a08:	4622      	mov	r2, r4
 8089a0a:	781b      	ldrb	r3, [r3, #0]
 8089a0c:	68e9      	ldr	r1, [r5, #12]
 8089a0e:	f88d 3000 	strb.w	r3, [sp]
 8089a12:	a802      	add	r0, sp, #8
 8089a14:	233c      	movs	r3, #60	; 0x3c
 8089a16:	f002 fe1d 	bl	808c654 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8089a1a:	9c03      	ldr	r4, [sp, #12]
 8089a1c:	b17c      	cbz	r4, 8089a3e <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
      if (--_M_use_count == 0)
 8089a1e:	6863      	ldr	r3, [r4, #4]
 8089a20:	3b01      	subs	r3, #1
 8089a22:	6063      	str	r3, [r4, #4]
 8089a24:	b95b      	cbnz	r3, 8089a3e <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
          _M_dispose();
 8089a26:	6823      	ldr	r3, [r4, #0]
 8089a28:	4620      	mov	r0, r4
 8089a2a:	689b      	ldr	r3, [r3, #8]
 8089a2c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8089a2e:	68a3      	ldr	r3, [r4, #8]
 8089a30:	3b01      	subs	r3, #1
 8089a32:	60a3      	str	r3, [r4, #8]
 8089a34:	b91b      	cbnz	r3, 8089a3e <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
            _M_destroy();
 8089a36:	6823      	ldr	r3, [r4, #0]
 8089a38:	4620      	mov	r0, r4
 8089a3a:	68db      	ldr	r3, [r3, #12]
 8089a3c:	4798      	blx	r3
}
 8089a3e:	b005      	add	sp, #20
 8089a40:	bd30      	pop	{r4, r5, pc}
 8089a42:	bf00      	nop
 8089a44:	08094111 	.word	0x08094111
 8089a48:	08094121 	.word	0x08094121
 8089a4c:	20000e68 	.word	0x20000e68

08089a50 <_ZN23GoogleMapsDeviceLocator4loopEv>:
void GoogleMapsDeviceLocator::loop() {
 8089a50:	b510      	push	{r4, lr}
	switch(state) {
 8089a52:	6a03      	ldr	r3, [r0, #32]
void GoogleMapsDeviceLocator::loop() {
 8089a54:	4604      	mov	r4, r0
	switch(state) {
 8089a56:	2b02      	cmp	r3, #2
 8089a58:	d00b      	beq.n	8089a72 <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
 8089a5a:	2b03      	cmp	r3, #3
 8089a5c:	d022      	beq.n	8089aa4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x54>
 8089a5e:	b9bb      	cbnz	r3, 8089a90 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8089a60:	f001 f87c 	bl	808ab5c <spark_cloud_flag_connected>
		if (Particle.connected()) {
 8089a64:	b1a0      	cbz	r0, 8089a90 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
			state = CONNECTED_WAIT_STATE;
 8089a66:	2302      	movs	r3, #2
 8089a68:	6223      	str	r3, [r4, #32]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8089a6a:	f000 fdf7 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
 8089a6e:	61e0      	str	r0, [r4, #28]
 8089a70:	e00e      	b.n	8089a90 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
 8089a72:	f000 fdf3 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
		if (millis() - stateTime >= waitAfterConnect) {
 8089a76:	69e3      	ldr	r3, [r4, #28]
 8089a78:	1ac0      	subs	r0, r0, r3
 8089a7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8089a7c:	4298      	cmp	r0, r3
 8089a7e:	d307      	bcc.n	8089a90 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
			if (locatorMode == LOCATOR_MODE_ONCE) {
 8089a80:	6863      	ldr	r3, [r4, #4]
 8089a82:	2b01      	cmp	r3, #1
 8089a84:	d105      	bne.n	8089a92 <_ZN23GoogleMapsDeviceLocator4loopEv+0x42>
				publishLocation();
 8089a86:	4620      	mov	r0, r4
 8089a88:	f7ff ffa6 	bl	80899d8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
				state = IDLE_STATE;
 8089a8c:	2304      	movs	r3, #4
 8089a8e:	6223      	str	r3, [r4, #32]
}
 8089a90:	bd10      	pop	{r4, pc}
			if (locatorMode == LOCATOR_MODE_MANUAL) {
 8089a92:	2b00      	cmp	r3, #0
 8089a94:	d0fa      	beq.n	8089a8c <_ZN23GoogleMapsDeviceLocator4loopEv+0x3c>
				state = CONNECTED_STATE;
 8089a96:	2303      	movs	r3, #3
 8089a98:	6223      	str	r3, [r4, #32]
 8089a9a:	f000 fddf 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
 8089a9e:	68a3      	ldr	r3, [r4, #8]
 8089aa0:	1ac0      	subs	r0, r0, r3
 8089aa2:	e7e4      	b.n	8089a6e <_ZN23GoogleMapsDeviceLocator4loopEv+0x1e>
 8089aa4:	f001 f85a 	bl	808ab5c <spark_cloud_flag_connected>
		if (Particle.connected()) {
 8089aa8:	b170      	cbz	r0, 8089ac8 <_ZN23GoogleMapsDeviceLocator4loopEv+0x78>
 8089aaa:	f000 fdd7 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
 8089aae:	69e3      	ldr	r3, [r4, #28]
 8089ab0:	1ac0      	subs	r0, r0, r3
 8089ab2:	68a3      	ldr	r3, [r4, #8]
 8089ab4:	4298      	cmp	r0, r3
 8089ab6:	d3eb      	bcc.n	8089a90 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
 8089ab8:	f000 fdd0 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
 8089abc:	61e0      	str	r0, [r4, #28]
				publishLocation();
 8089abe:	4620      	mov	r0, r4
}
 8089ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				publishLocation();
 8089ac4:	f7ff bf88 	b.w	80899d8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			state = CONNECT_WAIT_STATE;
 8089ac8:	6220      	str	r0, [r4, #32]
}
 8089aca:	e7e1      	b.n	8089a90 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

08089acc <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089acc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8089ace:	2300      	movs	r3, #0
 8089ad0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8089ad2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8089ad4:	4604      	mov	r4, r0
 8089ad6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8089ad8:	b12b      	cbz	r3, 8089ae6 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089ada:	2202      	movs	r2, #2
 8089adc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8089ade:	68eb      	ldr	r3, [r5, #12]
 8089ae0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8089ae2:	68ab      	ldr	r3, [r5, #8]
 8089ae4:	60a3      	str	r3, [r4, #8]
	}
    }
 8089ae6:	4620      	mov	r0, r4
 8089ae8:	bd38      	pop	{r3, r4, r5, pc}
	...

08089aec <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 8089aec:	b530      	push	{r4, r5, lr}
 8089aee:	b08b      	sub	sp, #44	; 0x2c
	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
 8089af0:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
 8089af2:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 8089af4:	4604      	mov	r4, r0
    static String deviceID(void) { return spark_deviceID(); }
 8089af6:	a806      	add	r0, sp, #24
 8089af8:	f001 f838 	bl	808ab6c <spark_deviceID>
	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
 8089afc:	9b06      	ldr	r3, [sp, #24]
 8089afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8089b02:	9300      	str	r3, [sp, #0]
 8089b04:	462b      	mov	r3, r5
    _Function_base() : _M_manager(nullptr) { }
 8089b06:	2500      	movs	r5, #0
 8089b08:	4a19      	ldr	r2, [pc, #100]	; (8089b70 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
 8089b0a:	481a      	ldr	r0, [pc, #104]	; (8089b74 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 8089b0c:	f001 f88e 	bl	808ac2c <snprintf>
 8089b10:	a806      	add	r0, sp, #24
 8089b12:	f001 fca5 	bl	808b460 <_ZN6StringD1Ev>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089b16:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 8089b18:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089b1a:	f7f6 fabe 	bl	808009a <_Znwj>
 8089b1e:	b118      	cbz	r0, 8089b28 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8089b20:	4b15      	ldr	r3, [pc, #84]	; (8089b78 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8089b22:	6084      	str	r4, [r0, #8]
 8089b24:	e9c0 3500 	strd	r3, r5, [r0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089b28:	4b14      	ldr	r3, [pc, #80]	; (8089b7c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089b2a:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8089b2c:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8089b2e:	4b14      	ldr	r3, [pc, #80]	; (8089b80 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
        return subscribe_wiring(eventName, handler, scope);
 8089b30:	a902      	add	r1, sp, #8
 8089b32:	a806      	add	r0, sp, #24
 8089b34:	9304      	str	r3, [sp, #16]
 8089b36:	f7ff ffc9 	bl	8089acc <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 8089b3a:	9b08      	ldr	r3, [sp, #32]
 8089b3c:	b17b      	cbz	r3, 8089b5e <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
 8089b3e:	2010      	movs	r0, #16
 8089b40:	f7f6 faab 	bl	808009a <_Znwj>
 8089b44:	4605      	mov	r5, r0
 8089b46:	b150      	cbz	r0, 8089b5e <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
 8089b48:	a906      	add	r1, sp, #24
 8089b4a:	f7ff ffbf 	bl	8089acc <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 8089b4e:	2300      	movs	r3, #0
 8089b50:	462a      	mov	r2, r5
 8089b52:	e9cd 3300 	strd	r3, r3, [sp]
 8089b56:	490b      	ldr	r1, [pc, #44]	; (8089b84 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
 8089b58:	4806      	ldr	r0, [pc, #24]	; (8089b74 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 8089b5a:	f001 f817 	bl	808ab8c <spark_subscribe>
    class function<_Res(_ArgTypes...)>
 8089b5e:	a806      	add	r0, sp, #24
 8089b60:	f7ff fe64 	bl	808982c <_ZNSt14_Function_baseD1Ev>
 8089b64:	a802      	add	r0, sp, #8
 8089b66:	f7ff fe61 	bl	808982c <_ZNSt14_Function_baseD1Ev>
}
 8089b6a:	4620      	mov	r0, r4
 8089b6c:	b00b      	add	sp, #44	; 0x2c
 8089b6e:	bd30      	pop	{r4, r5, pc}
 8089b70:	0809412d 	.word	0x0809412d
 8089b74:	20000d63 	.word	0x20000d63
 8089b78:	08089661 	.word	0x08089661
 8089b7c:	0808980b 	.word	0x0808980b
 8089b80:	080897cd 	.word	0x080897cd
 8089b84:	0808c453 	.word	0x0808c453

08089b88 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
        val_(val) {
 8089b88:	2201      	movs	r2, #1
 8089b8a:	4b01      	ldr	r3, [pc, #4]	; (8089b90 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
 8089b8c:	701a      	strb	r2, [r3, #0]
}
 8089b8e:	4770      	bx	lr
 8089b90:	20000e68 	.word	0x20000e68

08089b94 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8089b94:	b430      	push	{r4, r5}
 8089b96:	4605      	mov	r5, r0
 8089b98:	4618      	mov	r0, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8089b9a:	681b      	ldr	r3, [r3, #0]
 8089b9c:	681c      	ldr	r4, [r3, #0]
 8089b9e:	4613      	mov	r3, r2
 8089ba0:	46a4      	mov	ip, r4
 8089ba2:	460a      	mov	r2, r1
 8089ba4:	4629      	mov	r1, r5
}
 8089ba6:	bc30      	pop	{r4, r5}
	return presp->parse(type, buf, len);
 8089ba8:	4760      	bx	ip
	...

08089bac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8089bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8089bb0:	460c      	mov	r4, r1
 8089bb2:	b08d      	sub	sp, #52	; 0x34
	String typeStr;
 8089bb4:	494d      	ldr	r1, [pc, #308]	; (8089cec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8089bb6:	a804      	add	r0, sp, #16
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8089bb8:	4616      	mov	r6, r2
 8089bba:	461d      	mov	r5, r3
	String typeStr;
 8089bbc:	f001 fc9a 	bl	808b4f4 <_ZN6StringC1EPKc>
	switch(type) {
 8089bc0:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8089bc4:	d064      	beq.n	8089c90 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe4>
 8089bc6:	dc1f      	bgt.n	8089c08 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5c>
 8089bc8:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8089bcc:	d05c      	beq.n	8089c88 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8089bce:	dc13      	bgt.n	8089bf8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x4c>
 8089bd0:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8089bd4:	d056      	beq.n	8089c84 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd8>
 8089bd6:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8089bda:	d055      	beq.n	8089c88 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8089bdc:	b35c      	cbz	r4, 8089c36 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8a>
		typeStr = String::format("type=0x%x", type);
 8089bde:	4622      	mov	r2, r4
 8089be0:	a808      	add	r0, sp, #32
 8089be2:	4943      	ldr	r1, [pc, #268]	; (8089cf0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8089be4:	f001 fe5a 	bl	808b89c <_ZN6String6formatEPKcz>
 8089be8:	a908      	add	r1, sp, #32
 8089bea:	a804      	add	r0, sp, #16
 8089bec:	f001 fccc 	bl	808b588 <_ZN6StringaSEOS_>
 8089bf0:	a808      	add	r0, sp, #32
 8089bf2:	f001 fc35 	bl	808b460 <_ZN6StringD1Ev>
		break;
 8089bf6:	e022      	b.n	8089c3e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x92>
	switch(type) {
 8089bf8:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8089bfc:	d046      	beq.n	8089c8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe0>
 8089bfe:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8089c02:	d1ec      	bne.n	8089bde <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_NOCARRIER";
 8089c04:	493b      	ldr	r1, [pc, #236]	; (8089cf4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
 8089c06:	e017      	b.n	8089c38 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8089c08:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8089c0c:	d046      	beq.n	8089c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8089c0e:	dc0a      	bgt.n	8089c26 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7a>
 8089c10:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8089c14:	d03e      	beq.n	8089c94 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe8>
 8089c16:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8089c1a:	d03d      	beq.n	8089c98 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xec>
 8089c1c:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8089c20:	d1dd      	bne.n	8089bde <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_BUSY";
 8089c22:	4935      	ldr	r1, [pc, #212]	; (8089cf8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8089c24:	e008      	b.n	8089c38 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8089c26:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8089c2a:	d037      	beq.n	8089c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8089c2c:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8089c30:	d1d5      	bne.n	8089bde <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_ABORTED";
 8089c32:	4932      	ldr	r1, [pc, #200]	; (8089cfc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8089c34:	e000      	b.n	8089c38 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_UNKNOWN";
 8089c36:	4932      	ldr	r1, [pc, #200]	; (8089d00 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
		typeStr = "TYPE_OK";
 8089c38:	a804      	add	r0, sp, #16
 8089c3a:	f001 fcad 	bl	808b598 <_ZN6StringaSEPKc>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8089c3e:	462b      	mov	r3, r5
 8089c40:	9a04      	ldr	r2, [sp, #16]
 8089c42:	4930      	ldr	r1, [pc, #192]	; (8089d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8089c44:	4830      	ldr	r0, [pc, #192]	; (8089d08 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8089c46:	f7f7 f8c9 	bl	8080ddc <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8089c4a:	4928      	ldr	r1, [pc, #160]	; (8089cec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8089c4c:	a808      	add	r0, sp, #32
 8089c4e:	f001 fc51 	bl	808b4f4 <_ZN6StringC1EPKc>
	for(int ii = 0; ii < len; ii++) {
 8089c52:	2400      	movs	r4, #0
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8089c54:	4f2d      	ldr	r7, [pc, #180]	; (8089d0c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8089c56:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8089d2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x180>
 8089c5a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8089d30 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x184>
	for(int ii = 0; ii < len; ii++) {
 8089c5e:	42ac      	cmp	r4, r5
 8089c60:	da35      	bge.n	8089cce <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x122>
		if (buf[ii] == '\n') {
 8089c62:	5d31      	ldrb	r1, [r6, r4]
 8089c64:	290a      	cmp	r1, #10
 8089c66:	d11b      	bne.n	8089ca0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf4>
 8089c68:	4649      	mov	r1, r9
 8089c6a:	a808      	add	r0, sp, #32
 8089c6c:	f001 fd24 	bl	808b6b8 <_ZN6String6concatEPKc>
			Log.info(out);
 8089c70:	9908      	ldr	r1, [sp, #32]
 8089c72:	4825      	ldr	r0, [pc, #148]	; (8089d08 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8089c74:	f7f7 f8b2 	bl	8080ddc <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8089c78:	491c      	ldr	r1, [pc, #112]	; (8089cec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8089c7a:	a808      	add	r0, sp, #32
 8089c7c:	f001 fc8c 	bl	808b598 <_ZN6StringaSEPKc>
	for(int ii = 0; ii < len; ii++) {
 8089c80:	3401      	adds	r4, #1
 8089c82:	e7ec      	b.n	8089c5e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb2>
		typeStr = "TYPE_OK";
 8089c84:	4922      	ldr	r1, [pc, #136]	; (8089d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8089c86:	e7d7      	b.n	8089c38 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_ERROR";
 8089c88:	4922      	ldr	r1, [pc, #136]	; (8089d14 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8089c8a:	e7d5      	b.n	8089c38 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_CONNECT";
 8089c8c:	4922      	ldr	r1, [pc, #136]	; (8089d18 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8089c8e:	e7d3      	b.n	8089c38 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NODIALTONE";
 8089c90:	4922      	ldr	r1, [pc, #136]	; (8089d1c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089c92:	e7d1      	b.n	8089c38 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NOANSWER";
 8089c94:	4922      	ldr	r1, [pc, #136]	; (8089d20 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8089c96:	e7cf      	b.n	8089c38 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PROMPT";
 8089c98:	4922      	ldr	r1, [pc, #136]	; (8089d24 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8089c9a:	e7cd      	b.n	8089c38 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PLUS";
 8089c9c:	4922      	ldr	r1, [pc, #136]	; (8089d28 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8089c9e:	e7cb      	b.n	8089c38 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		if (buf[ii] == '\r') {
 8089ca0:	290d      	cmp	r1, #13
 8089ca2:	d104      	bne.n	8089cae <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x102>
 8089ca4:	4641      	mov	r1, r8
			out.concat(hex);
 8089ca6:	a808      	add	r0, sp, #32
 8089ca8:	f001 fd06 	bl	808b6b8 <_ZN6String6concatEPKc>
 8089cac:	e7e8      	b.n	8089c80 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8089cae:	f1a1 0320 	sub.w	r3, r1, #32
 8089cb2:	2b5e      	cmp	r3, #94	; 0x5e
 8089cb4:	d907      	bls.n	8089cc6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11a>
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8089cb6:	460b      	mov	r3, r1
 8089cb8:	463a      	mov	r2, r7
 8089cba:	210a      	movs	r1, #10
 8089cbc:	a801      	add	r0, sp, #4
 8089cbe:	f000 ffb5 	bl	808ac2c <snprintf>
			out.concat(hex);
 8089cc2:	a901      	add	r1, sp, #4
 8089cc4:	e7ef      	b.n	8089ca6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xfa>
			out.concat(buf[ii]);
 8089cc6:	a808      	add	r0, sp, #32
 8089cc8:	f001 fd05 	bl	808b6d6 <_ZN6String6concatEc>
 8089ccc:	e7d8      	b.n	8089c80 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
	if (out.length() > 0) {
 8089cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089cd0:	b11b      	cbz	r3, 8089cda <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x12e>
		Log.info(out);
 8089cd2:	9908      	ldr	r1, [sp, #32]
 8089cd4:	480c      	ldr	r0, [pc, #48]	; (8089d08 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8089cd6:	f7f7 f881 	bl	8080ddc <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8089cda:	a808      	add	r0, sp, #32
 8089cdc:	f001 fbc0 	bl	808b460 <_ZN6StringD1Ev>
	String typeStr;
 8089ce0:	a804      	add	r0, sp, #16
 8089ce2:	f001 fbbd 	bl	808b460 <_ZN6StringD1Ev>
}
 8089ce6:	b00d      	add	sp, #52	; 0x34
 8089ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8089cec:	080943b2 	.word	0x080943b2
 8089cf0:	080941f3 	.word	0x080941f3
 8089cf4:	08094199 	.word	0x08094199
 8089cf8:	080941b8 	.word	0x080941b8
 8089cfc:	080941e6 	.word	0x080941e6
 8089d00:	0809416c 	.word	0x0809416c
 8089d04:	080941fd 	.word	0x080941fd
 8089d08:	20000e84 	.word	0x20000e84
 8089d0c:	08094224 	.word	0x08094224
 8089d10:	08094179 	.word	0x08094179
 8089d14:	08094181 	.word	0x08094181
 8089d18:	0809418c 	.word	0x0809418c
 8089d1c:	080941a8 	.word	0x080941a8
 8089d20:	080941c2 	.word	0x080941c2
 8089d24:	080941d0 	.word	0x080941d0
 8089d28:	080941dc 	.word	0x080941dc
 8089d2c:	08094221 	.word	0x08094221
 8089d30:	0809421e 	.word	0x0809421e

08089d34 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>:
String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 8089d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8089d38:	460e      	mov	r6, r1
 8089d3a:	4604      	mov	r4, r0
	for(size_t ii = 0; ii < string.length(); ii++) {
 8089d3c:	2500      	movs	r5, #0
	String result;
 8089d3e:	4913      	ldr	r1, [pc, #76]	; (8089d8c <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x58>)
String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 8089d40:	4690      	mov	r8, r2
	String result;
 8089d42:	f001 fbd7 	bl	808b4f4 <_ZN6StringC1EPKc>
	result.reserve(string.length());
 8089d46:	4620      	mov	r0, r4
 8089d48:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8089d4a:	f001 fba7 	bl	808b49c <_ZN6String7reserveEj>
	bool inQuoted = false;
 8089d4e:	462f      	mov	r7, r5
		char ch = string.charAt(ii);
 8089d50:	f106 091c 	add.w	r9, r6, #28
	for(size_t ii = 0; ii < string.length(); ii++) {
 8089d54:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8089d56:	429d      	cmp	r5, r3
 8089d58:	d215      	bcs.n	8089d86 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x52>
		char ch = string.charAt(ii);
 8089d5a:	4629      	mov	r1, r5
 8089d5c:	4648      	mov	r0, r9
 8089d5e:	f001 fd5a 	bl	808b816 <_ZNK6String6charAtEj>
		if (ch == '"') {
 8089d62:	2822      	cmp	r0, #34	; 0x22
		char ch = string.charAt(ii);
 8089d64:	4601      	mov	r1, r0
		if (ch == '"') {
 8089d66:	d106      	bne.n	8089d76 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x42>
			if (!inQuoted && onlyFirst) {
 8089d68:	b15f      	cbz	r7, 8089d82 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
 8089d6a:	f1b8 0f00 	cmp.w	r8, #0
 8089d6e:	d10a      	bne.n	8089d86 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x52>
			inQuoted = !inQuoted;
 8089d70:	4647      	mov	r7, r8
	for(size_t ii = 0; ii < string.length(); ii++) {
 8089d72:	3501      	adds	r5, #1
 8089d74:	e7ee      	b.n	8089d54 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x20>
			if (inQuoted) {
 8089d76:	2f00      	cmp	r7, #0
 8089d78:	d0fb      	beq.n	8089d72 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
				result.concat(ch);
 8089d7a:	4620      	mov	r0, r4
 8089d7c:	f001 fcab 	bl	808b6d6 <_ZN6String6concatEc>
 8089d80:	e7f7      	b.n	8089d72 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
			inQuoted = !inQuoted;
 8089d82:	2701      	movs	r7, #1
 8089d84:	e7f5      	b.n	8089d72 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
}
 8089d86:	4620      	mov	r0, r4
 8089d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8089d8c:	080943b2 	.word	0x080943b2

08089d90 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 8089d90:	b538      	push	{r3, r4, r5, lr}
class CellularHelperCommonResponse {
 8089d92:	f06f 0302 	mvn.w	r3, #2
 8089d96:	6043      	str	r3, [r0, #4]
 8089d98:	2300      	movs	r3, #0
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089d9a:	4604      	mov	r4, r0
 8089d9c:	4d07      	ldr	r5, [pc, #28]	; (8089dbc <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
class CellularHelperCommonResponse {
 8089d9e:	7203      	strb	r3, [r0, #8]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089da0:	4b07      	ldr	r3, [pc, #28]	; (8089dc0 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 8089da2:	4629      	mov	r1, r5
 8089da4:	f840 3b0c 	str.w	r3, [r0], #12
 8089da8:	f001 fba4 	bl	808b4f4 <_ZN6StringC1EPKc>
 8089dac:	4629      	mov	r1, r5
 8089dae:	f104 001c 	add.w	r0, r4, #28
 8089db2:	f001 fb9f 	bl	808b4f4 <_ZN6StringC1EPKc>
 8089db6:	4620      	mov	r0, r4
 8089db8:	bd38      	pop	{r3, r4, r5, pc}
 8089dba:	bf00      	nop
 8089dbc:	080943b2 	.word	0x080943b2
 8089dc0:	080943d0 	.word	0x080943d0

08089dc4 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8089dc4:	b510      	push	{r4, lr}
 8089dc6:	4604      	mov	r4, r0
 8089dc8:	4b05      	ldr	r3, [pc, #20]	; (8089de0 <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8089dca:	f840 3b1c 	str.w	r3, [r0], #28
 8089dce:	f001 fb47 	bl	808b460 <_ZN6StringD1Ev>
 8089dd2:	f104 000c 	add.w	r0, r4, #12
 8089dd6:	f001 fb43 	bl	808b460 <_ZN6StringD1Ev>
 8089dda:	4620      	mov	r0, r4
 8089ddc:	bd10      	pop	{r4, pc}
 8089dde:	bf00      	nop
 8089de0:	080943d0 	.word	0x080943d0

08089de4 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>:
CellularHelperEnvironmentResponse::CellularHelperEnvironmentResponse(CellularHelperEnvironmentCellData *neighbors, size_t numNeighbors) :
 8089de4:	b570      	push	{r4, r5, r6, lr}
 8089de6:	4604      	mov	r4, r0
 8089de8:	4615      	mov	r5, r2
 8089dea:	460e      	mov	r6, r1
	neighbors(neighbors), numNeighbors(numNeighbors) {
 8089dec:	f7ff ffd0 	bl	8089d90 <_ZN32CellularHelperPlusStringResponseC1Ev>
 8089df0:	4b08      	ldr	r3, [pc, #32]	; (8089e14 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj+0x30>)
class CellularHelperEnvironmentCellData { // 44 bytes
 8089df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8089df6:	6023      	str	r3, [r4, #0]
 8089df8:	23ff      	movs	r3, #255	; 0xff
 8089dfa:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
 8089dfe:	e9c4 3615 	strd	r3, r6, [r4, #84]	; 0x54
 8089e02:	2200      	movs	r2, #0
 8089e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8089e08:	4620      	mov	r0, r4
 8089e0a:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
	neighbors(neighbors), numNeighbors(numNeighbors) {
 8089e0e:	65e5      	str	r5, [r4, #92]	; 0x5c
 8089e10:	6623      	str	r3, [r4, #96]	; 0x60
}
 8089e12:	bd70      	pop	{r4, r5, r6, pc}
 8089e14:	080943dc 	.word	0x080943dc

08089e18 <_ZNK33CellularHelperEnvironmentCellData7isValidEb>:
bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {
 8089e18:	4603      	mov	r3, r0
	if (mcc > 999) {
 8089e1a:	681a      	ldr	r2, [r3, #0]
bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {
 8089e1c:	4608      	mov	r0, r1
	if (mcc > 999) {
 8089e1e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8089e22:	da11      	bge.n	8089e48 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x30>
	if (!ignoreCI) {
 8089e24:	b989      	cbnz	r1, 8089e4a <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x32>
		if (isUMTS) {
 8089e26:	68d9      	ldr	r1, [r3, #12]
 8089e28:	7f1b      	ldrb	r3, [r3, #28]
 8089e2a:	b133      	cbz	r3, 8089e3a <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x22>
			if (ci >= 0xfffffff) {
 8089e2c:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 8089e30:	4281      	cmp	r1, r0
 8089e32:	bfac      	ite	ge
 8089e34:	2000      	movge	r0, #0
 8089e36:	2001      	movlt	r0, #1
 8089e38:	4770      	bx	lr
			if (ci >= 0xffff) {
 8089e3a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8089e3e:	4281      	cmp	r1, r0
 8089e40:	bfcc      	ite	gt
 8089e42:	2000      	movgt	r0, #0
 8089e44:	2001      	movle	r0, #1
 8089e46:	4770      	bx	lr
		return false;
 8089e48:	2000      	movs	r0, #0
}
 8089e4a:	4770      	bx	lr

08089e4c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>:
void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 8089e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089e4e:	4605      	mov	r5, r0
 8089e50:	b085      	sub	sp, #20
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 8089e52:	4608      	mov	r0, r1
void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 8089e54:	460f      	mov	r7, r1
 8089e56:	4614      	mov	r4, r2
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 8089e58:	f005 fc34 	bl	808f6c4 <strlen>
 8089e5c:	280f      	cmp	r0, #15
 8089e5e:	d906      	bls.n	8089e6e <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x22>
		Log.info("key too long key=%s value=%s", key, value);
 8089e60:	4623      	mov	r3, r4
 8089e62:	463a      	mov	r2, r7
 8089e64:	495c      	ldr	r1, [pc, #368]	; (8089fd8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18c>)
		Log.info("unknown key=%s value=%s", key, value);
 8089e66:	485d      	ldr	r0, [pc, #372]	; (8089fdc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x190>)
 8089e68:	f7f6 ffb8 	bl	8080ddc <_ZNK5spark6Logger4infoEPKcz>
 8089e6c:	e019      	b.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	size_t ii = 0;
 8089e6e:	2600      	movs	r6, #0
	for(; key[ii]; ii++) {
 8089e70:	5db8      	ldrb	r0, [r7, r6]
 8089e72:	b128      	cbz	r0, 8089e80 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x34>
		ucCopy[ii] = toupper(key[ii]);
 8089e74:	f006 fbc2 	bl	80905fc <toupper>
 8089e78:	f80d 0006 	strb.w	r0, [sp, r6]
	for(; key[ii]; ii++) {
 8089e7c:	3601      	adds	r6, #1
 8089e7e:	e7f7      	b.n	8089e70 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x24>
	ucCopy[ii] = 0;
 8089e80:	ab04      	add	r3, sp, #16
 8089e82:	441e      	add	r6, r3
 8089e84:	f806 0c10 	strb.w	r0, [r6, #-16]
	if (strcmp(ucCopy, "RAT") == 0) {
 8089e88:	4955      	ldr	r1, [pc, #340]	; (8089fe0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x194>)
 8089e8a:	4668      	mov	r0, sp
 8089e8c:	f004 fe89 	bl	808eba2 <strcmp>
 8089e90:	b948      	cbnz	r0, 8089ea6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x5a>
		isUMTS = (strstr(value, "UMTS") != NULL);
 8089e92:	4620      	mov	r0, r4
 8089e94:	4953      	ldr	r1, [pc, #332]	; (8089fe4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x198>)
 8089e96:	f005 fc42 	bl	808f71e <strstr>
 8089e9a:	3800      	subs	r0, #0
 8089e9c:	bf18      	it	ne
 8089e9e:	2001      	movne	r0, #1
 8089ea0:	7728      	strb	r0, [r5, #28]
}
 8089ea2:	b005      	add	sp, #20
 8089ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (strcmp(ucCopy, "MCC") == 0) {
 8089ea6:	4668      	mov	r0, sp
 8089ea8:	494f      	ldr	r1, [pc, #316]	; (8089fe8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x19c>)
 8089eaa:	f004 fe7a 	bl	808eba2 <strcmp>
 8089eae:	b920      	cbnz	r0, 8089eba <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x6e>
		mcc = atoi(value);
 8089eb0:	4620      	mov	r0, r4
 8089eb2:	f004 fd00 	bl	808e8b6 <atoi>
 8089eb6:	6028      	str	r0, [r5, #0]
 8089eb8:	e7f3      	b.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "MNC") == 0) {
 8089eba:	4668      	mov	r0, sp
 8089ebc:	494b      	ldr	r1, [pc, #300]	; (8089fec <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a0>)
 8089ebe:	f004 fe70 	bl	808eba2 <strcmp>
 8089ec2:	b920      	cbnz	r0, 8089ece <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x82>
		mnc = atoi(value);
 8089ec4:	4620      	mov	r0, r4
 8089ec6:	f004 fcf6 	bl	808e8b6 <atoi>
 8089eca:	6068      	str	r0, [r5, #4]
 8089ecc:	e7e9      	b.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "LAC") == 0) {
 8089ece:	4948      	ldr	r1, [pc, #288]	; (8089ff0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a4>)
 8089ed0:	4668      	mov	r0, sp
 8089ed2:	f004 fe66 	bl	808eba2 <strcmp>
 8089ed6:	4601      	mov	r1, r0
 8089ed8:	b928      	cbnz	r0, 8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x9a>
		lac = (int) strtol(value, NULL, 16); // hex
 8089eda:	2210      	movs	r2, #16
 8089edc:	4620      	mov	r0, r4
 8089ede:	f006 fafd 	bl	80904dc <strtol>
 8089ee2:	60a8      	str	r0, [r5, #8]
 8089ee4:	e7dd      	b.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "CI") == 0) {
 8089ee6:	4943      	ldr	r1, [pc, #268]	; (8089ff4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a8>)
 8089ee8:	4668      	mov	r0, sp
 8089eea:	f004 fe5a 	bl	808eba2 <strcmp>
 8089eee:	4601      	mov	r1, r0
 8089ef0:	b928      	cbnz	r0, 8089efe <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xb2>
		ci = (int) strtol(value, NULL, 16); // hex
 8089ef2:	2210      	movs	r2, #16
 8089ef4:	4620      	mov	r0, r4
 8089ef6:	f006 faf1 	bl	80904dc <strtol>
 8089efa:	60e8      	str	r0, [r5, #12]
 8089efc:	e7d1      	b.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "BSIC") == 0) {
 8089efe:	493e      	ldr	r1, [pc, #248]	; (8089ff8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1ac>)
 8089f00:	4668      	mov	r0, sp
 8089f02:	f004 fe4e 	bl	808eba2 <strcmp>
 8089f06:	4601      	mov	r1, r0
 8089f08:	b928      	cbnz	r0, 8089f16 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xca>
		bsic = (int) strtol(value, NULL, 16); // hex
 8089f0a:	2210      	movs	r2, #16
 8089f0c:	4620      	mov	r0, r4
 8089f0e:	f006 fae5 	bl	80904dc <strtol>
 8089f12:	6128      	str	r0, [r5, #16]
 8089f14:	e7c5      	b.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "ARFCN") == 0) { // Usually "Arfcn"
 8089f16:	4668      	mov	r0, sp
 8089f18:	4938      	ldr	r1, [pc, #224]	; (8089ffc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b0>)
 8089f1a:	f004 fe42 	bl	808eba2 <strcmp>
 8089f1e:	b920      	cbnz	r0, 8089f2a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xde>
		arfcn = atoi(value);
 8089f20:	4620      	mov	r0, r4
 8089f22:	f004 fcc8 	bl	808e8b6 <atoi>
 8089f26:	6168      	str	r0, [r5, #20]
 8089f28:	e7bb      	b.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "ARFCN_DED") == 0 || strcmp(ucCopy, "RXLEVSUB") == 0 || strcmp(ucCopy, "T_ADV") == 0) {
 8089f2a:	4668      	mov	r0, sp
 8089f2c:	4934      	ldr	r1, [pc, #208]	; (808a000 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b4>)
 8089f2e:	f004 fe38 	bl	808eba2 <strcmp>
 8089f32:	2800      	cmp	r0, #0
 8089f34:	d0b5      	beq.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 8089f36:	4668      	mov	r0, sp
 8089f38:	4932      	ldr	r1, [pc, #200]	; (808a004 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b8>)
 8089f3a:	f004 fe32 	bl	808eba2 <strcmp>
 8089f3e:	2800      	cmp	r0, #0
 8089f40:	d0af      	beq.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 8089f42:	4668      	mov	r0, sp
 8089f44:	4930      	ldr	r1, [pc, #192]	; (808a008 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1bc>)
 8089f46:	f004 fe2c 	bl	808eba2 <strcmp>
 8089f4a:	2800      	cmp	r0, #0
 8089f4c:	d0a9      	beq.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "RXLEV") == 0) { // Sometimes RxLev
 8089f4e:	492f      	ldr	r1, [pc, #188]	; (808a00c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c0>)
 8089f50:	4668      	mov	r0, sp
 8089f52:	f004 fe26 	bl	808eba2 <strcmp>
 8089f56:	4601      	mov	r1, r0
 8089f58:	b928      	cbnz	r0, 8089f66 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x11a>
		rxlev = (int) strtol(value, NULL, 16); // hex
 8089f5a:	2210      	movs	r2, #16
 8089f5c:	4620      	mov	r0, r4
 8089f5e:	f006 fabd 	bl	80904dc <strtol>
 8089f62:	61a8      	str	r0, [r5, #24]
 8089f64:	e79d      	b.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "DLF") == 0) {
 8089f66:	4668      	mov	r0, sp
 8089f68:	4929      	ldr	r1, [pc, #164]	; (808a010 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c4>)
 8089f6a:	f004 fe1a 	bl	808eba2 <strcmp>
 8089f6e:	b920      	cbnz	r0, 8089f7a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x12e>
		dlf = atoi(value);
 8089f70:	4620      	mov	r0, r4
 8089f72:	f004 fca0 	bl	808e8b6 <atoi>
 8089f76:	6228      	str	r0, [r5, #32]
 8089f78:	e793      	b.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "ULF") == 0) {
 8089f7a:	4668      	mov	r0, sp
 8089f7c:	4925      	ldr	r1, [pc, #148]	; (808a014 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c8>)
 8089f7e:	f004 fe10 	bl	808eba2 <strcmp>
 8089f82:	b930      	cbnz	r0, 8089f92 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x146>
		ulf = atoi(value);
 8089f84:	4620      	mov	r0, r4
 8089f86:	f004 fc96 	bl	808e8b6 <atoi>
		isUMTS = true;
 8089f8a:	2301      	movs	r3, #1
		ulf = atoi(value);
 8089f8c:	6268      	str	r0, [r5, #36]	; 0x24
		isUMTS = true;
 8089f8e:	772b      	strb	r3, [r5, #28]
 8089f90:	e787      	b.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "RSCP LEV") == 0) {
 8089f92:	4668      	mov	r0, sp
 8089f94:	4920      	ldr	r1, [pc, #128]	; (808a018 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1cc>)
 8089f96:	f004 fe04 	bl	808eba2 <strcmp>
 8089f9a:	b920      	cbnz	r0, 8089fa6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x15a>
		rscpLev = atoi(value);
 8089f9c:	4620      	mov	r0, r4
 8089f9e:	f004 fc8a 	bl	808e8b6 <atoi>
 8089fa2:	62a8      	str	r0, [r5, #40]	; 0x28
 8089fa4:	e77d      	b.n	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "RAC") == 0 || strcmp(ucCopy, "SC") == 0 || strcmp(ucCopy, "ECN0 LEV") == 0) {
 8089fa6:	4668      	mov	r0, sp
 8089fa8:	491c      	ldr	r1, [pc, #112]	; (808a01c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d0>)
 8089faa:	f004 fdfa 	bl	808eba2 <strcmp>
 8089fae:	2800      	cmp	r0, #0
 8089fb0:	f43f af77 	beq.w	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 8089fb4:	4668      	mov	r0, sp
 8089fb6:	491a      	ldr	r1, [pc, #104]	; (808a020 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d4>)
 8089fb8:	f004 fdf3 	bl	808eba2 <strcmp>
 8089fbc:	2800      	cmp	r0, #0
 8089fbe:	f43f af70 	beq.w	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 8089fc2:	4668      	mov	r0, sp
 8089fc4:	4917      	ldr	r1, [pc, #92]	; (808a024 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d8>)
 8089fc6:	f004 fdec 	bl	808eba2 <strcmp>
 8089fca:	2800      	cmp	r0, #0
 8089fcc:	f43f af69 	beq.w	8089ea2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
		Log.info("unknown key=%s value=%s", key, value);
 8089fd0:	4623      	mov	r3, r4
 8089fd2:	463a      	mov	r2, r7
 8089fd4:	4914      	ldr	r1, [pc, #80]	; (808a028 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1dc>)
 8089fd6:	e746      	b.n	8089e66 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a>
 8089fd8:	0809422b 	.word	0x0809422b
 8089fdc:	20000e84 	.word	0x20000e84
 8089fe0:	08094248 	.word	0x08094248
 8089fe4:	0809424c 	.word	0x0809424c
 8089fe8:	08094251 	.word	0x08094251
 8089fec:	08094255 	.word	0x08094255
 8089ff0:	08094259 	.word	0x08094259
 8089ff4:	0809425d 	.word	0x0809425d
 8089ff8:	08094260 	.word	0x08094260
 8089ffc:	08094265 	.word	0x08094265
 808a000:	0809426b 	.word	0x0809426b
 808a004:	08094275 	.word	0x08094275
 808a008:	0809427e 	.word	0x0809427e
 808a00c:	08094284 	.word	0x08094284
 808a010:	0809428a 	.word	0x0809428a
 808a014:	0809428e 	.word	0x0809428e
 808a018:	08094292 	.word	0x08094292
 808a01c:	0809429b 	.word	0x0809429b
 808a020:	0809429f 	.word	0x0809429f
 808a024:	080942a2 	.word	0x080942a2
 808a028:	080942ab 	.word	0x080942ab

0808a02c <_ZN33CellularHelperEnvironmentCellData5parseEPKc>:
void CellularHelperEnvironmentCellData::parse(const char *str) {
 808a02c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808a030:	4605      	mov	r5, r0
	char *mutableCopy = strdup(str);
 808a032:	4608      	mov	r0, r1
 808a034:	f004 fdc8 	bl	808ebc8 <strdup>
	char *pair = strtok_r(mutableCopy, ",", &endStr);
 808a038:	4912      	ldr	r1, [pc, #72]	; (808a084 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x58>)
 808a03a:	aa01      	add	r2, sp, #4
	char *mutableCopy = strdup(str);
 808a03c:	4604      	mov	r4, r0
			*colon = 0;
 808a03e:	2700      	movs	r7, #0
	char *pair = strtok_r(mutableCopy, ",", &endStr);
 808a040:	f006 f9ce 	bl	80903e0 <strtok_r>
		pair = strtok_r(NULL, ",", &endStr);
 808a044:	4e0f      	ldr	r6, [pc, #60]	; (808a084 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x58>)
	while(pair) {
 808a046:	b1b8      	cbz	r0, 808a078 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x4c>
 808a048:	4680      	mov	r8, r0
		while(*pair == ' ') {
 808a04a:	f898 3000 	ldrb.w	r3, [r8]
 808a04e:	3001      	adds	r0, #1
 808a050:	2b20      	cmp	r3, #32
 808a052:	d0f9      	beq.n	808a048 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x1c>
		char *colon = strchr(pair, ':');
 808a054:	213a      	movs	r1, #58	; 0x3a
 808a056:	4640      	mov	r0, r8
 808a058:	f004 fd96 	bl	808eb88 <strchr>
		if (colon != NULL) {
 808a05c:	4602      	mov	r2, r0
 808a05e:	b128      	cbz	r0, 808a06c <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x40>
			addKeyValue(key, value);
 808a060:	4641      	mov	r1, r8
 808a062:	4628      	mov	r0, r5
			*colon = 0;
 808a064:	f802 7b01 	strb.w	r7, [r2], #1
			addKeyValue(key, value);
 808a068:	f7ff fef0 	bl	8089e4c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>
		pair = strtok_r(NULL, ",", &endStr);
 808a06c:	4631      	mov	r1, r6
 808a06e:	aa01      	add	r2, sp, #4
 808a070:	2000      	movs	r0, #0
 808a072:	f006 f9b5 	bl	80903e0 <strtok_r>
	while(pair) {
 808a076:	e7e6      	b.n	808a046 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x1a>
	free(mutableCopy);
 808a078:	4620      	mov	r0, r4
 808a07a:	f000 fda7 	bl	808abcc <free>
}
 808a07e:	b002      	add	sp, #8
 808a080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808a084:	080940f6 	.word	0x080940f6

0808a088 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci>:
int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 808a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (enableDebug) {
 808a08c:	7a06      	ldrb	r6, [r0, #8]
int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 808a08e:	4605      	mov	r5, r0
 808a090:	460f      	mov	r7, r1
 808a092:	4690      	mov	r8, r2
 808a094:	461c      	mov	r4, r3
 808a096:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 808a098:	b10e      	cbz	r6, 808a09e <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x16>
		logCellularDebug(type, buf, len);
 808a09a:	f7ff fd87 	bl	8089bac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_UNKNOWN || type == TYPE_PLUS) {
 808a09e:	f437 0980 	bics.w	r9, r7, #4194304	; 0x400000
 808a0a2:	d161      	bne.n	808a168 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xe0>
		char *copy = (char *) malloc(len + 1);
 808a0a4:	1c60      	adds	r0, r4, #1
 808a0a6:	f000 fd89 	bl	808abbc <malloc>
		if (copy) {
 808a0aa:	4606      	mov	r6, r0
 808a0ac:	2800      	cmp	r0, #0
 808a0ae:	d05b      	beq.n	808a168 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xe0>
			strncpy(copy, buf, len);
 808a0b0:	4622      	mov	r2, r4
 808a0b2:	4641      	mov	r1, r8
 808a0b4:	f005 fb20 	bl	808f6f8 <strncpy>
			copy[len] = 0;
 808a0b8:	f806 9004 	strb.w	r9, [r6, r4]
			size_t searchForLen = snprintf(searchFor, sizeof(searchFor), "+%s: ", command.c_str());
 808a0bc:	2120      	movs	r1, #32
 808a0be:	68eb      	ldr	r3, [r5, #12]
 808a0c0:	4a2c      	ldr	r2, [pc, #176]	; (808a174 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xec>)
 808a0c2:	a802      	add	r0, sp, #8
 808a0c4:	f000 fdb2 	bl	808ac2c <snprintf>
			char *line = strtok_r(copy, "\r\n", &endStr);
 808a0c8:	492b      	ldr	r1, [pc, #172]	; (808a178 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf0>)
			size_t searchForLen = snprintf(searchFor, sizeof(searchFor), "+%s: ", command.c_str());
 808a0ca:	4680      	mov	r8, r0
			char *line = strtok_r(copy, "\r\n", &endStr);
 808a0cc:	aa01      	add	r2, sp, #4
 808a0ce:	4630      	mov	r0, r6
 808a0d0:	f006 f986 	bl	80903e0 <strtok_r>
 808a0d4:	4604      	mov	r4, r0
					if (strncmp(line, "MCC:", 4) == 0) {
 808a0d6:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 808a17c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf4>
					if (strncmp(line, "RAT:", 4) == 0) {
 808a0da:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 808a180 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf8>
				line = strtok_r(NULL, "\r\n", &endStr);
 808a0de:	f8df 9098 	ldr.w	r9, [pc, #152]	; 808a178 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf0>
			while(line) {
 808a0e2:	2c00      	cmp	r4, #0
 808a0e4:	d03d      	beq.n	808a162 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xda>
				if (line[0]) {
 808a0e6:	7823      	ldrb	r3, [r4, #0]
 808a0e8:	b1d3      	cbz	r3, 808a120 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
					if (type == TYPE_PLUS && strncmp(line, searchFor, searchForLen) == 0) {
 808a0ea:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 808a0ee:	d106      	bne.n	808a0fe <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x76>
 808a0f0:	4642      	mov	r2, r8
 808a0f2:	4620      	mov	r0, r4
 808a0f4:	a902      	add	r1, sp, #8
 808a0f6:	f005 faed 	bl	808f6d4 <strncmp>
 808a0fa:	b900      	cbnz	r0, 808a0fe <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x76>
						line += searchForLen;
 808a0fc:	4444      	add	r4, r8
					if (strncmp(line, "MCC:", 4) == 0) {
 808a0fe:	2204      	movs	r2, #4
 808a100:	4651      	mov	r1, sl
 808a102:	4620      	mov	r0, r4
 808a104:	f005 fae6 	bl	808f6d4 <strncmp>
 808a108:	bb00      	cbnz	r0, 808a14c <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc4>
						if (curDataIndex < 0) {
 808a10a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 808a10c:	2b00      	cmp	r3, #0
 808a10e:	da0e      	bge.n	808a12e <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xa6>
							service.parse(line);
 808a110:	4621      	mov	r1, r4
 808a112:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808a116:	f7ff ff89 	bl	808a02c <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
							curDataIndex++;
 808a11a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 808a11c:	3301      	adds	r3, #1
 808a11e:	662b      	str	r3, [r5, #96]	; 0x60
				line = strtok_r(NULL, "\r\n", &endStr);
 808a120:	4649      	mov	r1, r9
 808a122:	2000      	movs	r0, #0
 808a124:	aa01      	add	r2, sp, #4
 808a126:	f006 f95b 	bl	80903e0 <strtok_r>
 808a12a:	4604      	mov	r4, r0
			while(line) {
 808a12c:	e7d9      	b.n	808a0e2 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x5a>
						if (neighbors && (size_t)curDataIndex < numNeighbors) {
 808a12e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 808a130:	2a00      	cmp	r2, #0
 808a132:	d0f5      	beq.n	808a120 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
 808a134:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 808a136:	428b      	cmp	r3, r1
 808a138:	d2f2      	bcs.n	808a120 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
							neighbors[curDataIndex++].parse(line);
 808a13a:	202c      	movs	r0, #44	; 0x2c
 808a13c:	1c59      	adds	r1, r3, #1
 808a13e:	6629      	str	r1, [r5, #96]	; 0x60
 808a140:	4621      	mov	r1, r4
 808a142:	fb00 2003 	mla	r0, r0, r3, r2
						service.parse(line);
 808a146:	f7ff ff71 	bl	808a02c <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
 808a14a:	e7e9      	b.n	808a120 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
					if (strncmp(line, "RAT:", 4) == 0) {
 808a14c:	2204      	movs	r2, #4
 808a14e:	4659      	mov	r1, fp
 808a150:	4620      	mov	r0, r4
 808a152:	f005 fabf 	bl	808f6d4 <strncmp>
 808a156:	2800      	cmp	r0, #0
 808a158:	d1e2      	bne.n	808a120 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
						service.parse(line);
 808a15a:	4621      	mov	r1, r4
 808a15c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808a160:	e7f1      	b.n	808a146 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xbe>
			free(copy);
 808a162:	4630      	mov	r0, r6
 808a164:	f000 fd32 	bl	808abcc <free>
}
 808a168:	f04f 30ff 	mov.w	r0, #4294967295
 808a16c:	b00b      	add	sp, #44	; 0x2c
 808a16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a172:	bf00      	nop
 808a174:	080943b4 	.word	0x080943b4
 808a178:	080943b0 	.word	0x080943b0
 808a17c:	080942c3 	.word	0x080942c3
 808a180:	080942c8 	.word	0x080942c8

0808a184 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>:
size_t CellularHelperEnvironmentResponse::getNumNeighbors() const {
 808a184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (curDataIndex < 0) {
 808a186:	6e05      	ldr	r5, [r0, #96]	; 0x60
 808a188:	2d00      	cmp	r5, #0
 808a18a:	db10      	blt.n	808a1ae <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x2a>
		if (neighbors) {
 808a18c:	6d86      	ldr	r6, [r0, #88]	; 0x58
 808a18e:	b15e      	cbz	r6, 808a1a8 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a190:	2400      	movs	r4, #0
				if (!neighbors[ii].isValid()) {
 808a192:	272c      	movs	r7, #44	; 0x2c
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a194:	42ac      	cmp	r4, r5
 808a196:	d007      	beq.n	808a1a8 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
				if (!neighbors[ii].isValid()) {
 808a198:	2100      	movs	r1, #0
 808a19a:	fb07 6004 	mla	r0, r7, r4, r6
 808a19e:	f7ff fe3b 	bl	8089e18 <_ZNK33CellularHelperEnvironmentCellData7isValidEb>
 808a1a2:	b110      	cbz	r0, 808a1aa <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x26>
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a1a4:	3401      	adds	r4, #1
 808a1a6:	e7f5      	b.n	808a194 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x10>
		return curDataIndex;
 808a1a8:	462c      	mov	r4, r5
}
 808a1aa:	4620      	mov	r0, r4
 808a1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 808a1ae:	2400      	movs	r4, #0
 808a1b0:	e7fb      	b.n	808a1aa <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x26>
	...

0808a1b4 <_ZN26CellularHelperCREGResponse11postProcessEv>:
void CellularHelperCREGResponse::postProcess() {
 808a1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a1b8:	f100 0738 	add.w	r7, r0, #56	; 0x38
void CellularHelperCREGResponse::postProcess() {
 808a1bc:	b086      	sub	sp, #24
	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a1be:	f100 083c 	add.w	r8, r0, #60	; 0x3c
 808a1c2:	e9cd 7801 	strd	r7, r8, [sp, #4]
 808a1c6:	f100 0634 	add.w	r6, r0, #52	; 0x34
 808a1ca:	f100 0530 	add.w	r5, r0, #48	; 0x30
 808a1ce:	9600      	str	r6, [sp, #0]
void CellularHelperCREGResponse::postProcess() {
 808a1d0:	4604      	mov	r4, r0
	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a1d2:	462b      	mov	r3, r5
 808a1d4:	490b      	ldr	r1, [pc, #44]	; (808a204 <_ZN26CellularHelperCREGResponse11postProcessEv+0x50>)
 808a1d6:	69c0      	ldr	r0, [r0, #28]
 808a1d8:	aa05      	add	r2, sp, #20
 808a1da:	f000 fd17 	bl	808ac0c <sscanf>
 808a1de:	2805      	cmp	r0, #5
 808a1e0:	d105      	bne.n	808a1ee <_ZN26CellularHelperCREGResponse11postProcessEv+0x3a>
		valid = true;
 808a1e2:	2301      	movs	r3, #1
 808a1e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 808a1e8:	b006      	add	sp, #24
 808a1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sscanf(string.c_str(), "%d,\"%x\",\"%x\",%d", &stat, &lac, &ci, &rat) == 4) {
 808a1ee:	4633      	mov	r3, r6
 808a1f0:	462a      	mov	r2, r5
 808a1f2:	e9cd 7800 	strd	r7, r8, [sp]
 808a1f6:	4904      	ldr	r1, [pc, #16]	; (808a208 <_ZN26CellularHelperCREGResponse11postProcessEv+0x54>)
 808a1f8:	69e0      	ldr	r0, [r4, #28]
 808a1fa:	f000 fd07 	bl	808ac0c <sscanf>
 808a1fe:	2804      	cmp	r0, #4
 808a200:	d1f2      	bne.n	808a1e8 <_ZN26CellularHelperCREGResponse11postProcessEv+0x34>
 808a202:	e7ee      	b.n	808a1e2 <_ZN26CellularHelperCREGResponse11postProcessEv+0x2e>
 808a204:	080942fd 	.word	0x080942fd
 808a208:	08094300 	.word	0x08094300

0808a20c <_ZNK26CellularHelperCREGResponse8toStringEv>:
String CellularHelperCREGResponse::toString() const {
 808a20c:	b513      	push	{r0, r1, r4, lr}
	if (valid) {
 808a20e:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
String CellularHelperCREGResponse::toString() const {
 808a212:	4604      	mov	r4, r0
	if (valid) {
 808a214:	b15b      	cbz	r3, 808a22e <_ZNK26CellularHelperCREGResponse8toStringEv+0x22>
		return String::format("stat=%d lac=0x%x ci=0x%x rat=%d", stat, lac, ci, rat);
 808a216:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 808a218:	9301      	str	r3, [sp, #4]
 808a21a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 808a21c:	9300      	str	r3, [sp, #0]
 808a21e:	e9d1 230c 	ldrd	r2, r3, [r1, #48]	; 0x30
 808a222:	4905      	ldr	r1, [pc, #20]	; (808a238 <_ZNK26CellularHelperCREGResponse8toStringEv+0x2c>)
 808a224:	f001 fb3a 	bl	808b89c <_ZN6String6formatEPKcz>
}
 808a228:	4620      	mov	r0, r4
 808a22a:	b002      	add	sp, #8
 808a22c:	bd10      	pop	{r4, pc}
		return "valid=false";
 808a22e:	4903      	ldr	r1, [pc, #12]	; (808a23c <_ZNK26CellularHelperCREGResponse8toStringEv+0x30>)
 808a230:	f001 f960 	bl	808b4f4 <_ZN6StringC1EPKc>
 808a234:	e7f8      	b.n	808a228 <_ZNK26CellularHelperCREGResponse8toStringEv+0x1c>
 808a236:	bf00      	nop
 808a238:	08094310 	.word	0x08094310
 808a23c:	080942f1 	.word	0x080942f1

0808a240 <_ZN28CellularHelperStringResponseC1Ev>:
class CellularHelperCommonResponse {
 808a240:	f06f 0302 	mvn.w	r3, #2
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a244:	b510      	push	{r4, lr}
class CellularHelperCommonResponse {
 808a246:	6043      	str	r3, [r0, #4]
 808a248:	2300      	movs	r3, #0
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a24a:	4604      	mov	r4, r0
class CellularHelperCommonResponse {
 808a24c:	7203      	strb	r3, [r0, #8]
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a24e:	4b04      	ldr	r3, [pc, #16]	; (808a260 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 808a250:	4904      	ldr	r1, [pc, #16]	; (808a264 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 808a252:	f840 3b0c 	str.w	r3, [r0], #12
 808a256:	f001 f94d 	bl	808b4f4 <_ZN6StringC1EPKc>
 808a25a:	4620      	mov	r0, r4
 808a25c:	bd10      	pop	{r4, pc}
 808a25e:	bf00      	nop
 808a260:	080943c4 	.word	0x080943c4
 808a264:	080943b2 	.word	0x080943b2

0808a268 <_ZN28CellularHelperStringResponseD1Ev>:
 808a268:	b510      	push	{r4, lr}
 808a26a:	4604      	mov	r4, r0
 808a26c:	4b03      	ldr	r3, [pc, #12]	; (808a27c <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 808a26e:	f840 3b0c 	str.w	r3, [r0], #12
 808a272:	f001 f8f5 	bl	808b460 <_ZN6StringD1Ev>
 808a276:	4620      	mov	r0, r4
 808a278:	bd10      	pop	{r4, pc}
 808a27a:	bf00      	nop
 808a27c:	080943c4 	.word	0x080943c4

0808a280 <_ZNK19CellularHelperClass15getManufacturerEv>:
String CellularHelperClass::getManufacturer() const {
 808a280:	b510      	push	{r4, lr}
 808a282:	4604      	mov	r4, r0
 808a284:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a286:	a801      	add	r0, sp, #4
 808a288:	f7ff ffda 	bl	808a240 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808a28c:	f242 7210 	movw	r2, #10000	; 0x2710
 808a290:	4b07      	ldr	r3, [pc, #28]	; (808a2b0 <_ZNK19CellularHelperClass15getManufacturerEv+0x30>)
 808a292:	a901      	add	r1, sp, #4
 808a294:	4807      	ldr	r0, [pc, #28]	; (808a2b4 <_ZNK19CellularHelperClass15getManufacturerEv+0x34>)
 808a296:	f000 fb41 	bl	808a91c <cellular_command>
	return resp.string;
 808a29a:	a904      	add	r1, sp, #16
 808a29c:	4620      	mov	r0, r4
 808a29e:	f001 f968 	bl	808b572 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808a2a2:	a801      	add	r0, sp, #4
 808a2a4:	f7ff ffe0 	bl	808a268 <_ZN28CellularHelperStringResponseD1Ev>
}
 808a2a8:	4620      	mov	r0, r4
 808a2aa:	b008      	add	sp, #32
 808a2ac:	bd10      	pop	{r4, pc}
 808a2ae:	bf00      	nop
 808a2b0:	08094330 	.word	0x08094330
 808a2b4:	08089b95 	.word	0x08089b95

0808a2b8 <_ZNK19CellularHelperClass8getModelEv>:
String CellularHelperClass::getModel() const {
 808a2b8:	b510      	push	{r4, lr}
 808a2ba:	4604      	mov	r4, r0
 808a2bc:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a2be:	a801      	add	r0, sp, #4
 808a2c0:	f7ff ffbe 	bl	808a240 <_ZN28CellularHelperStringResponseC1Ev>
 808a2c4:	f242 7210 	movw	r2, #10000	; 0x2710
 808a2c8:	4b07      	ldr	r3, [pc, #28]	; (808a2e8 <_ZNK19CellularHelperClass8getModelEv+0x30>)
 808a2ca:	a901      	add	r1, sp, #4
 808a2cc:	4807      	ldr	r0, [pc, #28]	; (808a2ec <_ZNK19CellularHelperClass8getModelEv+0x34>)
 808a2ce:	f000 fb25 	bl	808a91c <cellular_command>
	return resp.string;
 808a2d2:	a904      	add	r1, sp, #16
 808a2d4:	4620      	mov	r0, r4
 808a2d6:	f001 f94c 	bl	808b572 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808a2da:	a801      	add	r0, sp, #4
 808a2dc:	f7ff ffc4 	bl	808a268 <_ZN28CellularHelperStringResponseD1Ev>
}
 808a2e0:	4620      	mov	r0, r4
 808a2e2:	b008      	add	sp, #32
 808a2e4:	bd10      	pop	{r4, pc}
 808a2e6:	bf00      	nop
 808a2e8:	0809433a 	.word	0x0809433a
 808a2ec:	08089b95 	.word	0x08089b95

0808a2f0 <_ZNK19CellularHelperClass7getIMEIEv>:
String CellularHelperClass::getIMEI() const {
 808a2f0:	b510      	push	{r4, lr}
 808a2f2:	4604      	mov	r4, r0
 808a2f4:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a2f6:	a801      	add	r0, sp, #4
 808a2f8:	f7ff ffa2 	bl	808a240 <_ZN28CellularHelperStringResponseC1Ev>
 808a2fc:	f242 7210 	movw	r2, #10000	; 0x2710
 808a300:	4b07      	ldr	r3, [pc, #28]	; (808a320 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 808a302:	a901      	add	r1, sp, #4
 808a304:	4807      	ldr	r0, [pc, #28]	; (808a324 <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 808a306:	f000 fb09 	bl	808a91c <cellular_command>
	return resp.string;
 808a30a:	a904      	add	r1, sp, #16
 808a30c:	4620      	mov	r0, r4
 808a30e:	f001 f930 	bl	808b572 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808a312:	a801      	add	r0, sp, #4
 808a314:	f7ff ffa8 	bl	808a268 <_ZN28CellularHelperStringResponseD1Ev>
}
 808a318:	4620      	mov	r0, r4
 808a31a:	b008      	add	sp, #32
 808a31c:	bd10      	pop	{r4, pc}
 808a31e:	bf00      	nop
 808a320:	08094344 	.word	0x08094344
 808a324:	08089b95 	.word	0x08089b95

0808a328 <_ZNK19CellularHelperClass7getIMSIEv>:
 808a328:	b510      	push	{r4, lr}
 808a32a:	4604      	mov	r4, r0
 808a32c:	f7ff ffa8 	bl	808a280 <_ZNK19CellularHelperClass15getManufacturerEv>
 808a330:	4620      	mov	r0, r4
 808a332:	bd10      	pop	{r4, pc}

0808a334 <_ZNK19CellularHelperClass8getICCIDEv>:
String CellularHelperClass::getICCID() const {
 808a334:	b510      	push	{r4, lr}
 808a336:	4604      	mov	r4, r0
 808a338:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 808a33a:	a801      	add	r0, sp, #4
 808a33c:	f7ff fd28 	bl	8089d90 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 808a340:	490a      	ldr	r1, [pc, #40]	; (808a36c <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 808a342:	a804      	add	r0, sp, #16
 808a344:	f001 f928 	bl	808b598 <_ZN6StringaSEPKc>
 808a348:	f242 7210 	movw	r2, #10000	; 0x2710
 808a34c:	4b08      	ldr	r3, [pc, #32]	; (808a370 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 808a34e:	a901      	add	r1, sp, #4
 808a350:	4808      	ldr	r0, [pc, #32]	; (808a374 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 808a352:	f000 fae3 	bl	808a91c <cellular_command>
	return resp.string;
 808a356:	a908      	add	r1, sp, #32
 808a358:	4620      	mov	r0, r4
 808a35a:	f001 f90a 	bl	808b572 <_ZN6StringC1ERKS_>
	CellularHelperPlusStringResponse resp;
 808a35e:	a801      	add	r0, sp, #4
 808a360:	f7ff fd30 	bl	8089dc4 <_ZN32CellularHelperPlusStringResponseD1Ev>
}
 808a364:	4620      	mov	r0, r4
 808a366:	b00c      	add	sp, #48	; 0x30
 808a368:	bd10      	pop	{r4, pc}
 808a36a:	bf00      	nop
 808a36c:	0809434e 	.word	0x0809434e
 808a370:	08094353 	.word	0x08094353
 808a374:	08089b95 	.word	0x08089b95

0808a378 <_ZNK19CellularHelperClass5isLTEEv>:
bool CellularHelperClass::isLTE() const {
 808a378:	b510      	push	{r4, lr}
 808a37a:	b088      	sub	sp, #32
 808a37c:	4601      	mov	r1, r0
	return getModel().startsWith("SARA-R4");
 808a37e:	4668      	mov	r0, sp
 808a380:	f7ff ff9a 	bl	808a2b8 <_ZNK19CellularHelperClass8getModelEv>
 808a384:	4909      	ldr	r1, [pc, #36]	; (808a3ac <_ZNK19CellularHelperClass5isLTEEv+0x34>)
 808a386:	a804      	add	r0, sp, #16
 808a388:	f001 f8b4 	bl	808b4f4 <_ZN6StringC1EPKc>
 808a38c:	a904      	add	r1, sp, #16
 808a38e:	4668      	mov	r0, sp
 808a390:	f001 fa2f 	bl	808b7f2 <_ZNK6String10startsWithERKS_>
 808a394:	4604      	mov	r4, r0
 808a396:	a804      	add	r0, sp, #16
 808a398:	f001 f862 	bl	808b460 <_ZN6StringD1Ev>
 808a39c:	4668      	mov	r0, sp
 808a39e:	f001 f85f 	bl	808b460 <_ZN6StringD1Ev>
}
 808a3a2:	1e20      	subs	r0, r4, #0
 808a3a4:	bf18      	it	ne
 808a3a6:	2001      	movne	r0, #1
 808a3a8:	b008      	add	sp, #32
 808a3aa:	bd10      	pop	{r4, pc}
 808a3ac:	0809435d 	.word	0x0809435d

0808a3b0 <_ZNK19CellularHelperClass15getOperatorNameEi>:
String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a3b0:	b530      	push	{r4, r5, lr}
 808a3b2:	4615      	mov	r5, r2
 808a3b4:	b093      	sub	sp, #76	; 0x4c
	String result;
 808a3b6:	4913      	ldr	r1, [pc, #76]	; (808a404 <_ZNK19CellularHelperClass15getOperatorNameEi+0x54>)
String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a3b8:	4604      	mov	r4, r0
	String result;
 808a3ba:	f001 f89b 	bl	808b4f4 <_ZN6StringC1EPKc>
	CellularHelperPlusStringResponse resp;
 808a3be:	a807      	add	r0, sp, #28
 808a3c0:	f7ff fce6 	bl	8089d90 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "UDOPN";
 808a3c4:	4910      	ldr	r1, [pc, #64]	; (808a408 <_ZNK19CellularHelperClass15getOperatorNameEi+0x58>)
 808a3c6:	a80a      	add	r0, sp, #40	; 0x28
 808a3c8:	f001 f8e6 	bl	808b598 <_ZN6StringaSEPKc>
 808a3cc:	f242 7210 	movw	r2, #10000	; 0x2710
 808a3d0:	4b0e      	ldr	r3, [pc, #56]	; (808a40c <_ZNK19CellularHelperClass15getOperatorNameEi+0x5c>)
 808a3d2:	480f      	ldr	r0, [pc, #60]	; (808a410 <_ZNK19CellularHelperClass15getOperatorNameEi+0x60>)
 808a3d4:	9500      	str	r5, [sp, #0]
 808a3d6:	a907      	add	r1, sp, #28
 808a3d8:	f000 faa0 	bl	808a91c <cellular_command>
	if (respCode == RESP_OK) {
 808a3dc:	3002      	adds	r0, #2
 808a3de:	d10b      	bne.n	808a3f8 <_ZNK19CellularHelperClass15getOperatorNameEi+0x48>
		result = resp.getDoubleQuotedPart();
 808a3e0:	2201      	movs	r2, #1
 808a3e2:	a907      	add	r1, sp, #28
 808a3e4:	a803      	add	r0, sp, #12
 808a3e6:	f7ff fca5 	bl	8089d34 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>
 808a3ea:	4620      	mov	r0, r4
 808a3ec:	a903      	add	r1, sp, #12
 808a3ee:	f001 f8cb 	bl	808b588 <_ZN6StringaSEOS_>
 808a3f2:	a803      	add	r0, sp, #12
 808a3f4:	f001 f834 	bl	808b460 <_ZN6StringD1Ev>
	CellularHelperPlusStringResponse resp;
 808a3f8:	a807      	add	r0, sp, #28
 808a3fa:	f7ff fce3 	bl	8089dc4 <_ZN32CellularHelperPlusStringResponseD1Ev>
}
 808a3fe:	4620      	mov	r0, r4
 808a400:	b013      	add	sp, #76	; 0x4c
 808a402:	bd30      	pop	{r4, r5, pc}
 808a404:	080943b2 	.word	0x080943b2
 808a408:	08094365 	.word	0x08094365
 808a40c:	0809436b 	.word	0x0809436b
 808a410:	08089b95 	.word	0x08089b95

0808a414 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>:
void CellularHelperClass::getEnvironment(int mode, CellularHelperEnvironmentResponse &resp) const {
 808a414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808a416:	4614      	mov	r4, r2
 808a418:	460d      	mov	r5, r1
	resp.command = "CGED";
 808a41a:	f102 000c 	add.w	r0, r2, #12
 808a41e:	4907      	ldr	r1, [pc, #28]	; (808a43c <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x28>)
 808a420:	f001 f8ba 	bl	808b598 <_ZN6StringaSEPKc>
 808a424:	f242 7210 	movw	r2, #10000	; 0x2710
 808a428:	4621      	mov	r1, r4
 808a42a:	4b05      	ldr	r3, [pc, #20]	; (808a440 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x2c>)
 808a42c:	9500      	str	r5, [sp, #0]
 808a42e:	4805      	ldr	r0, [pc, #20]	; (808a444 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x30>)
 808a430:	f000 fa74 	bl	808a91c <cellular_command>
	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGED=%d\r\n", mode);
 808a434:	6060      	str	r0, [r4, #4]
}
 808a436:	b003      	add	sp, #12
 808a438:	bd30      	pop	{r4, r5, pc}
 808a43a:	bf00      	nop
 808a43c:	08094379 	.word	0x08094379
 808a440:	0809437e 	.word	0x0809437e
 808a444:	08089b95 	.word	0x08089b95

0808a448 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>:
void CellularHelperClass::getCREG(CellularHelperCREGResponse &resp) const {
 808a448:	b510      	push	{r4, lr}
 808a44a:	460c      	mov	r4, r1
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a44c:	2100      	movs	r1, #0
 808a44e:	f242 7210 	movw	r2, #10000	; 0x2710
 808a452:	4608      	mov	r0, r1
 808a454:	4b10      	ldr	r3, [pc, #64]	; (808a498 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x50>)
 808a456:	f000 fa61 	bl	808a91c <cellular_command>
	if (tempResp == RESP_OK) {
 808a45a:	3002      	adds	r0, #2
 808a45c:	d11a      	bne.n	808a494 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
		resp.command = "CREG";
 808a45e:	490f      	ldr	r1, [pc, #60]	; (808a49c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x54>)
 808a460:	f104 000c 	add.w	r0, r4, #12
 808a464:	f001 f898 	bl	808b598 <_ZN6StringaSEPKc>
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808a468:	f242 7210 	movw	r2, #10000	; 0x2710
 808a46c:	4621      	mov	r1, r4
 808a46e:	4b0c      	ldr	r3, [pc, #48]	; (808a4a0 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x58>)
 808a470:	480c      	ldr	r0, [pc, #48]	; (808a4a4 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x5c>)
 808a472:	f000 fa53 	bl	808a91c <cellular_command>
		resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CREG?\r\n");
 808a476:	6060      	str	r0, [r4, #4]
		if (resp.resp == RESP_OK) {
 808a478:	3002      	adds	r0, #2
 808a47a:	d10b      	bne.n	808a494 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
			resp.postProcess();
 808a47c:	4620      	mov	r0, r4
 808a47e:	f7ff fe99 	bl	808a1b4 <_ZN26CellularHelperCREGResponse11postProcessEv>
}
 808a482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a486:	2100      	movs	r1, #0
 808a488:	f242 7210 	movw	r2, #10000	; 0x2710
 808a48c:	4608      	mov	r0, r1
 808a48e:	4b06      	ldr	r3, [pc, #24]	; (808a4a8 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x60>)
 808a490:	f000 ba44 	b.w	808a91c <cellular_command>
 808a494:	bd10      	pop	{r4, pc}
 808a496:	bf00      	nop
 808a498:	0809438b 	.word	0x0809438b
 808a49c:	08094397 	.word	0x08094397
 808a4a0:	0809439c 	.word	0x0809439c
 808a4a4:	08089b95 	.word	0x08089b95
 808a4a8:	080943a7 	.word	0x080943a7

0808a4ac <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a4b0:	460c      	mov	r4, r1
 808a4b2:	461e      	mov	r6, r3
	str.reserve(str.length() + (size_t)len + 1);
 808a4b4:	1c59      	adds	r1, r3, #1
 808a4b6:	68a3      	ldr	r3, [r4, #8]
 808a4b8:	4620      	mov	r0, r4
 808a4ba:	4419      	add	r1, r3
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a4bc:	4617      	mov	r7, r2
 808a4be:	f89d 8018 	ldrb.w	r8, [sp, #24]
	for(int ii = 0; ii < len; ii++) {
 808a4c2:	2500      	movs	r5, #0
	str.reserve(str.length() + (size_t)len + 1);
 808a4c4:	f000 ffea 	bl	808b49c <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 808a4c8:	42b5      	cmp	r5, r6
 808a4ca:	da0c      	bge.n	808a4e6 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 808a4cc:	5d79      	ldrb	r1, [r7, r5]
 808a4ce:	f1b8 0f00 	cmp.w	r8, #0
 808a4d2:	d003      	beq.n	808a4dc <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x30>
 808a4d4:	290d      	cmp	r1, #13
 808a4d6:	d004      	beq.n	808a4e2 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
 808a4d8:	290a      	cmp	r1, #10
 808a4da:	d002      	beq.n	808a4e2 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
			str.concat(buf[ii]);
 808a4dc:	4620      	mov	r0, r4
 808a4de:	f001 f8fa 	bl	808b6d6 <_ZN6String6concatEc>
	for(int ii = 0; ii < len; ii++) {
 808a4e2:	3501      	adds	r5, #1
 808a4e4:	e7f0      	b.n	808a4c8 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
}
 808a4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808a4ec <_ZN28CellularHelperStringResponse5parseEiPKci>:
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a4ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a4ee:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a4f2:	4604      	mov	r4, r0
 808a4f4:	460f      	mov	r7, r1
 808a4f6:	4615      	mov	r5, r2
 808a4f8:	461e      	mov	r6, r3
	if (enableDebug) {
 808a4fa:	f1bc 0f00 	cmp.w	ip, #0
 808a4fe:	d001      	beq.n	808a504 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 808a500:	f7ff fb54 	bl	8089bac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_UNKNOWN) {
 808a504:	b947      	cbnz	r7, 808a518 <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 808a506:	2301      	movs	r3, #1
 808a508:	462a      	mov	r2, r5
 808a50a:	9300      	str	r3, [sp, #0]
 808a50c:	4804      	ldr	r0, [pc, #16]	; (808a520 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 808a50e:	4633      	mov	r3, r6
 808a510:	f104 010c 	add.w	r1, r4, #12
 808a514:	f7ff ffca 	bl	808a4ac <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
}
 808a518:	f04f 30ff 	mov.w	r0, #4294967295
 808a51c:	b003      	add	sp, #12
 808a51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a520:	20000e70 	.word	0x20000e70

0808a524 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a524:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a526:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a52a:	4606      	mov	r6, r0
 808a52c:	460d      	mov	r5, r1
 808a52e:	4617      	mov	r7, r2
 808a530:	461c      	mov	r4, r3
 808a532:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 808a534:	f1bc 0f00 	cmp.w	ip, #0
 808a538:	d001      	beq.n	808a53e <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 808a53a:	f7ff fb37 	bl	8089bac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_PLUS) {
 808a53e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 808a542:	d12a      	bne.n	808a59a <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		char *copy = (char *) malloc(len + 1);
 808a544:	1c60      	adds	r0, r4, #1
 808a546:	f000 fb39 	bl	808abbc <malloc>
		if (copy) {
 808a54a:	4605      	mov	r5, r0
 808a54c:	b328      	cbz	r0, 808a59a <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 808a54e:	4622      	mov	r2, r4
 808a550:	4639      	mov	r1, r7
 808a552:	f005 f8d1 	bl	808f6f8 <strncpy>
			copy[len] = 0;
 808a556:	2300      	movs	r3, #0
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808a558:	2120      	movs	r1, #32
			copy[len] = 0;
 808a55a:	552b      	strb	r3, [r5, r4]
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808a55c:	4a11      	ldr	r2, [pc, #68]	; (808a5a4 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 808a55e:	68f3      	ldr	r3, [r6, #12]
 808a560:	a802      	add	r0, sp, #8
 808a562:	f000 fb63 	bl	808ac2c <snprintf>
			char *start = strstr(copy, searchFor);
 808a566:	4628      	mov	r0, r5
 808a568:	a902      	add	r1, sp, #8
 808a56a:	f005 f8d8 	bl	808f71e <strstr>
			if (start) {
 808a56e:	4604      	mov	r4, r0
 808a570:	b180      	cbz	r0, 808a594 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 808a572:	a802      	add	r0, sp, #8
 808a574:	f005 f8a6 	bl	808f6c4 <strlen>
 808a578:	4404      	add	r4, r0
				char *end = strchr(start, '\r');
 808a57a:	210d      	movs	r1, #13
 808a57c:	4620      	mov	r0, r4
 808a57e:	f004 fb03 	bl	808eb88 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 808a582:	2301      	movs	r3, #1
 808a584:	4622      	mov	r2, r4
 808a586:	9300      	str	r3, [sp, #0]
 808a588:	f106 011c 	add.w	r1, r6, #28
 808a58c:	1b03      	subs	r3, r0, r4
 808a58e:	4806      	ldr	r0, [pc, #24]	; (808a5a8 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 808a590:	f7ff ff8c 	bl	808a4ac <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			free(copy);
 808a594:	4628      	mov	r0, r5
 808a596:	f000 fb19 	bl	808abcc <free>
}
 808a59a:	f04f 30ff 	mov.w	r0, #4294967295
 808a59e:	b00b      	add	sp, #44	; 0x2c
 808a5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a5a2:	bf00      	nop
 808a5a4:	080943b3 	.word	0x080943b3
 808a5a8:	20000e70 	.word	0x20000e70

0808a5ac <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808a5ac:	b508      	push	{r3, lr}
 808a5ae:	4b02      	ldr	r3, [pc, #8]	; (808a5b8 <HAL_Validate_Pin_Function+0xc>)
 808a5b0:	681b      	ldr	r3, [r3, #0]
 808a5b2:	685b      	ldr	r3, [r3, #4]
 808a5b4:	9301      	str	r3, [sp, #4]
 808a5b6:	bd08      	pop	{r3, pc}
 808a5b8:	080401b0 	.word	0x080401b0

0808a5bc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808a5bc:	b508      	push	{r3, lr}
 808a5be:	4b02      	ldr	r3, [pc, #8]	; (808a5c8 <HAL_Pin_Mode+0xc>)
 808a5c0:	681b      	ldr	r3, [r3, #0]
 808a5c2:	689b      	ldr	r3, [r3, #8]
 808a5c4:	9301      	str	r3, [sp, #4]
 808a5c6:	bd08      	pop	{r3, pc}
 808a5c8:	080401b0 	.word	0x080401b0

0808a5cc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808a5cc:	b508      	push	{r3, lr}
 808a5ce:	4b02      	ldr	r3, [pc, #8]	; (808a5d8 <HAL_Get_Pin_Mode+0xc>)
 808a5d0:	681b      	ldr	r3, [r3, #0]
 808a5d2:	68db      	ldr	r3, [r3, #12]
 808a5d4:	9301      	str	r3, [sp, #4]
 808a5d6:	bd08      	pop	{r3, pc}
 808a5d8:	080401b0 	.word	0x080401b0

0808a5dc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808a5dc:	b508      	push	{r3, lr}
 808a5de:	4b02      	ldr	r3, [pc, #8]	; (808a5e8 <HAL_GPIO_Write+0xc>)
 808a5e0:	681b      	ldr	r3, [r3, #0]
 808a5e2:	691b      	ldr	r3, [r3, #16]
 808a5e4:	9301      	str	r3, [sp, #4]
 808a5e6:	bd08      	pop	{r3, pc}
 808a5e8:	080401b0 	.word	0x080401b0

0808a5ec <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808a5ec:	b508      	push	{r3, lr}
 808a5ee:	4b02      	ldr	r3, [pc, #8]	; (808a5f8 <HAL_GPIO_Read+0xc>)
 808a5f0:	681b      	ldr	r3, [r3, #0]
 808a5f2:	695b      	ldr	r3, [r3, #20]
 808a5f4:	9301      	str	r3, [sp, #4]
 808a5f6:	bd08      	pop	{r3, pc}
 808a5f8:	080401b0 	.word	0x080401b0

0808a5fc <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 808a5fc:	b508      	push	{r3, lr}
 808a5fe:	4b02      	ldr	r3, [pc, #8]	; (808a608 <HAL_Interrupts_Attach+0xc>)
 808a600:	681b      	ldr	r3, [r3, #0]
 808a602:	699b      	ldr	r3, [r3, #24]
 808a604:	9301      	str	r3, [sp, #4]
 808a606:	bd08      	pop	{r3, pc}
 808a608:	080401b0 	.word	0x080401b0

0808a60c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 808a60c:	b508      	push	{r3, lr}
 808a60e:	4b02      	ldr	r3, [pc, #8]	; (808a618 <HAL_Interrupts_Detach+0xc>)
 808a610:	681b      	ldr	r3, [r3, #0]
 808a612:	69db      	ldr	r3, [r3, #28]
 808a614:	9301      	str	r3, [sp, #4]
 808a616:	bd08      	pop	{r3, pc}
 808a618:	080401b0 	.word	0x080401b0

0808a61c <hal_adc_set_sample_time>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
 808a61c:	b508      	push	{r3, lr}
 808a61e:	4b02      	ldr	r3, [pc, #8]	; (808a628 <hal_adc_set_sample_time+0xc>)
 808a620:	681b      	ldr	r3, [r3, #0]
 808a622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a624:	9301      	str	r3, [sp, #4]
 808a626:	bd08      	pop	{r3, pc}
 808a628:	080401b0 	.word	0x080401b0

0808a62c <hal_adc_read>:
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 808a62c:	b508      	push	{r3, lr}
 808a62e:	4b02      	ldr	r3, [pc, #8]	; (808a638 <hal_adc_read+0xc>)
 808a630:	681b      	ldr	r3, [r3, #0]
 808a632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a634:	9301      	str	r3, [sp, #4]
 808a636:	bd08      	pop	{r3, pc}
 808a638:	080401b0 	.word	0x080401b0

0808a63c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808a63c:	b508      	push	{r3, lr}
 808a63e:	4b02      	ldr	r3, [pc, #8]	; (808a648 <HAL_RNG_GetRandomNumber+0xc>)
 808a640:	681b      	ldr	r3, [r3, #0]
 808a642:	685b      	ldr	r3, [r3, #4]
 808a644:	9301      	str	r3, [sp, #4]
 808a646:	bd08      	pop	{r3, pc}
 808a648:	0804019c 	.word	0x0804019c

0808a64c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 808a64c:	b508      	push	{r3, lr}
 808a64e:	4b02      	ldr	r3, [pc, #8]	; (808a658 <HAL_Delay_Microseconds+0xc>)
 808a650:	681b      	ldr	r3, [r3, #0]
 808a652:	68db      	ldr	r3, [r3, #12]
 808a654:	9301      	str	r3, [sp, #4]
 808a656:	bd08      	pop	{r3, pc}
 808a658:	0804019c 	.word	0x0804019c

0808a65c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808a65c:	b508      	push	{r3, lr}
 808a65e:	4b02      	ldr	r3, [pc, #8]	; (808a668 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808a660:	681b      	ldr	r3, [r3, #0]
 808a662:	695b      	ldr	r3, [r3, #20]
 808a664:	9301      	str	r3, [sp, #4]
 808a666:	bd08      	pop	{r3, pc}
 808a668:	0804019c 	.word	0x0804019c

0808a66c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 808a66c:	b508      	push	{r3, lr}
 808a66e:	4b02      	ldr	r3, [pc, #8]	; (808a678 <HAL_EEPROM_Init+0xc>)
 808a670:	681b      	ldr	r3, [r3, #0]
 808a672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a674:	9301      	str	r3, [sp, #4]
 808a676:	bd08      	pop	{r3, pc}
 808a678:	0804019c 	.word	0x0804019c

0808a67c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 808a67c:	b508      	push	{r3, lr}
 808a67e:	4b02      	ldr	r3, [pc, #8]	; (808a688 <HAL_EEPROM_Get+0xc>)
 808a680:	681b      	ldr	r3, [r3, #0]
 808a682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a684:	9301      	str	r3, [sp, #4]
 808a686:	bd08      	pop	{r3, pc}
 808a688:	0804019c 	.word	0x0804019c

0808a68c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 808a68c:	b508      	push	{r3, lr}
 808a68e:	4b02      	ldr	r3, [pc, #8]	; (808a698 <HAL_EEPROM_Put+0xc>)
 808a690:	681b      	ldr	r3, [r3, #0]
 808a692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a694:	9301      	str	r3, [sp, #4]
 808a696:	bd08      	pop	{r3, pc}
 808a698:	0804019c 	.word	0x0804019c

0808a69c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 808a69c:	b508      	push	{r3, lr}
 808a69e:	4b02      	ldr	r3, [pc, #8]	; (808a6a8 <hal_rtc_time_is_valid+0xc>)
 808a6a0:	681b      	ldr	r3, [r3, #0]
 808a6a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808a6a4:	9301      	str	r3, [sp, #4]
 808a6a6:	bd08      	pop	{r3, pc}
 808a6a8:	0804019c 	.word	0x0804019c

0808a6ac <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 808a6ac:	b508      	push	{r3, lr}
 808a6ae:	4b02      	ldr	r3, [pc, #8]	; (808a6b8 <hal_rtc_get_time+0xc>)
 808a6b0:	681b      	ldr	r3, [r3, #0]
 808a6b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808a6b4:	9301      	str	r3, [sp, #4]
 808a6b6:	bd08      	pop	{r3, pc}
 808a6b8:	0804019c 	.word	0x0804019c

0808a6bc <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 808a6bc:	b508      	push	{r3, lr}
 808a6be:	4b02      	ldr	r3, [pc, #8]	; (808a6c8 <hal_rtc_set_time+0xc>)
 808a6c0:	681b      	ldr	r3, [r3, #0]
 808a6c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808a6c4:	9301      	str	r3, [sp, #4]
 808a6c6:	bd08      	pop	{r3, pc}
 808a6c8:	0804019c 	.word	0x0804019c

0808a6cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 808a6cc:	b508      	push	{r3, lr}
 808a6ce:	4b02      	ldr	r3, [pc, #8]	; (808a6d8 <os_mutex_recursive_create+0xc>)
 808a6d0:	681b      	ldr	r3, [r3, #0]
 808a6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a6d4:	9301      	str	r3, [sp, #4]
 808a6d6:	bd08      	pop	{r3, pc}
 808a6d8:	080401d0 	.word	0x080401d0

0808a6dc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 808a6dc:	b508      	push	{r3, lr}
 808a6de:	4b02      	ldr	r3, [pc, #8]	; (808a6e8 <os_mutex_recursive_destroy+0xc>)
 808a6e0:	681b      	ldr	r3, [r3, #0]
 808a6e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a6e4:	9301      	str	r3, [sp, #4]
 808a6e6:	bd08      	pop	{r3, pc}
 808a6e8:	080401d0 	.word	0x080401d0

0808a6ec <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 808a6ec:	b508      	push	{r3, lr}
 808a6ee:	4b02      	ldr	r3, [pc, #8]	; (808a6f8 <os_mutex_recursive_lock+0xc>)
 808a6f0:	681b      	ldr	r3, [r3, #0]
 808a6f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a6f4:	9301      	str	r3, [sp, #4]
 808a6f6:	bd08      	pop	{r3, pc}
 808a6f8:	080401d0 	.word	0x080401d0

0808a6fc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 808a6fc:	b508      	push	{r3, lr}
 808a6fe:	4b02      	ldr	r3, [pc, #8]	; (808a708 <os_mutex_recursive_unlock+0xc>)
 808a700:	681b      	ldr	r3, [r3, #0]
 808a702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808a704:	9301      	str	r3, [sp, #4]
 808a706:	bd08      	pop	{r3, pc}
 808a708:	080401d0 	.word	0x080401d0

0808a70c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 808a70c:	b508      	push	{r3, lr}
 808a70e:	4b02      	ldr	r3, [pc, #8]	; (808a718 <hal_usart_init+0xc>)
 808a710:	681b      	ldr	r3, [r3, #0]
 808a712:	699b      	ldr	r3, [r3, #24]
 808a714:	9301      	str	r3, [sp, #4]
 808a716:	bd08      	pop	{r3, pc}
 808a718:	080401c4 	.word	0x080401c4

0808a71c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 808a71c:	b508      	push	{r3, lr}
 808a71e:	4b02      	ldr	r3, [pc, #8]	; (808a728 <hal_usart_write+0xc>)
 808a720:	681b      	ldr	r3, [r3, #0]
 808a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a724:	9301      	str	r3, [sp, #4]
 808a726:	bd08      	pop	{r3, pc}
 808a728:	080401c4 	.word	0x080401c4

0808a72c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 808a72c:	b508      	push	{r3, lr}
 808a72e:	4b02      	ldr	r3, [pc, #8]	; (808a738 <hal_usart_available+0xc>)
 808a730:	681b      	ldr	r3, [r3, #0]
 808a732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a734:	9301      	str	r3, [sp, #4]
 808a736:	bd08      	pop	{r3, pc}
 808a738:	080401c4 	.word	0x080401c4

0808a73c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 808a73c:	b508      	push	{r3, lr}
 808a73e:	4b02      	ldr	r3, [pc, #8]	; (808a748 <hal_usart_read+0xc>)
 808a740:	681b      	ldr	r3, [r3, #0]
 808a742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a744:	9301      	str	r3, [sp, #4]
 808a746:	bd08      	pop	{r3, pc}
 808a748:	080401c4 	.word	0x080401c4

0808a74c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 808a74c:	b508      	push	{r3, lr}
 808a74e:	4b02      	ldr	r3, [pc, #8]	; (808a758 <hal_usart_peek+0xc>)
 808a750:	681b      	ldr	r3, [r3, #0]
 808a752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a754:	9301      	str	r3, [sp, #4]
 808a756:	bd08      	pop	{r3, pc}
 808a758:	080401c4 	.word	0x080401c4

0808a75c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 808a75c:	b508      	push	{r3, lr}
 808a75e:	4b02      	ldr	r3, [pc, #8]	; (808a768 <hal_usart_flush+0xc>)
 808a760:	681b      	ldr	r3, [r3, #0]
 808a762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a764:	9301      	str	r3, [sp, #4]
 808a766:	bd08      	pop	{r3, pc}
 808a768:	080401c4 	.word	0x080401c4

0808a76c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 808a76c:	b508      	push	{r3, lr}
 808a76e:	4b02      	ldr	r3, [pc, #8]	; (808a778 <hal_usart_is_enabled+0xc>)
 808a770:	681b      	ldr	r3, [r3, #0]
 808a772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a774:	9301      	str	r3, [sp, #4]
 808a776:	bd08      	pop	{r3, pc}
 808a778:	080401c4 	.word	0x080401c4

0808a77c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 808a77c:	b508      	push	{r3, lr}
 808a77e:	4b02      	ldr	r3, [pc, #8]	; (808a788 <hal_usart_available_data_for_write+0xc>)
 808a780:	681b      	ldr	r3, [r3, #0]
 808a782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808a784:	9301      	str	r3, [sp, #4]
 808a786:	bd08      	pop	{r3, pc}
 808a788:	080401c4 	.word	0x080401c4

0808a78c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 808a78c:	b508      	push	{r3, lr}
 808a78e:	4b02      	ldr	r3, [pc, #8]	; (808a798 <hal_usart_begin_config+0xc>)
 808a790:	681b      	ldr	r3, [r3, #0]
 808a792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a794:	9301      	str	r3, [sp, #4]
 808a796:	bd08      	pop	{r3, pc}
 808a798:	080401c4 	.word	0x080401c4

0808a79c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 808a79c:	b508      	push	{r3, lr}
 808a79e:	4b02      	ldr	r3, [pc, #8]	; (808a7a8 <hal_i2c_begin+0xc>)
 808a7a0:	681b      	ldr	r3, [r3, #0]
 808a7a2:	68db      	ldr	r3, [r3, #12]
 808a7a4:	9301      	str	r3, [sp, #4]
 808a7a6:	bd08      	pop	{r3, pc}
 808a7a8:	080401ac 	.word	0x080401ac

0808a7ac <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 808a7ac:	b508      	push	{r3, lr}
 808a7ae:	4b02      	ldr	r3, [pc, #8]	; (808a7b8 <hal_i2c_begin_transmission+0xc>)
 808a7b0:	681b      	ldr	r3, [r3, #0]
 808a7b2:	699b      	ldr	r3, [r3, #24]
 808a7b4:	9301      	str	r3, [sp, #4]
 808a7b6:	bd08      	pop	{r3, pc}
 808a7b8:	080401ac 	.word	0x080401ac

0808a7bc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 808a7bc:	b508      	push	{r3, lr}
 808a7be:	4b02      	ldr	r3, [pc, #8]	; (808a7c8 <hal_i2c_end_transmission+0xc>)
 808a7c0:	681b      	ldr	r3, [r3, #0]
 808a7c2:	69db      	ldr	r3, [r3, #28]
 808a7c4:	9301      	str	r3, [sp, #4]
 808a7c6:	bd08      	pop	{r3, pc}
 808a7c8:	080401ac 	.word	0x080401ac

0808a7cc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 808a7cc:	b508      	push	{r3, lr}
 808a7ce:	4b02      	ldr	r3, [pc, #8]	; (808a7d8 <hal_i2c_write+0xc>)
 808a7d0:	681b      	ldr	r3, [r3, #0]
 808a7d2:	6a1b      	ldr	r3, [r3, #32]
 808a7d4:	9301      	str	r3, [sp, #4]
 808a7d6:	bd08      	pop	{r3, pc}
 808a7d8:	080401ac 	.word	0x080401ac

0808a7dc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 808a7dc:	b508      	push	{r3, lr}
 808a7de:	4b02      	ldr	r3, [pc, #8]	; (808a7e8 <hal_i2c_available+0xc>)
 808a7e0:	681b      	ldr	r3, [r3, #0]
 808a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a7e4:	9301      	str	r3, [sp, #4]
 808a7e6:	bd08      	pop	{r3, pc}
 808a7e8:	080401ac 	.word	0x080401ac

0808a7ec <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 808a7ec:	b508      	push	{r3, lr}
 808a7ee:	4b02      	ldr	r3, [pc, #8]	; (808a7f8 <hal_i2c_read+0xc>)
 808a7f0:	681b      	ldr	r3, [r3, #0]
 808a7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a7f4:	9301      	str	r3, [sp, #4]
 808a7f6:	bd08      	pop	{r3, pc}
 808a7f8:	080401ac 	.word	0x080401ac

0808a7fc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 808a7fc:	b508      	push	{r3, lr}
 808a7fe:	4b02      	ldr	r3, [pc, #8]	; (808a808 <hal_i2c_peek+0xc>)
 808a800:	681b      	ldr	r3, [r3, #0]
 808a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a804:	9301      	str	r3, [sp, #4]
 808a806:	bd08      	pop	{r3, pc}
 808a808:	080401ac 	.word	0x080401ac

0808a80c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 808a80c:	b508      	push	{r3, lr}
 808a80e:	4b02      	ldr	r3, [pc, #8]	; (808a818 <hal_i2c_flush+0xc>)
 808a810:	681b      	ldr	r3, [r3, #0]
 808a812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a814:	9301      	str	r3, [sp, #4]
 808a816:	bd08      	pop	{r3, pc}
 808a818:	080401ac 	.word	0x080401ac

0808a81c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 808a81c:	b508      	push	{r3, lr}
 808a81e:	4b02      	ldr	r3, [pc, #8]	; (808a828 <hal_i2c_is_enabled+0xc>)
 808a820:	681b      	ldr	r3, [r3, #0]
 808a822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a824:	9301      	str	r3, [sp, #4]
 808a826:	bd08      	pop	{r3, pc}
 808a828:	080401ac 	.word	0x080401ac

0808a82c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 808a82c:	b508      	push	{r3, lr}
 808a82e:	4b02      	ldr	r3, [pc, #8]	; (808a838 <hal_i2c_init+0xc>)
 808a830:	681b      	ldr	r3, [r3, #0]
 808a832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808a834:	9301      	str	r3, [sp, #4]
 808a836:	bd08      	pop	{r3, pc}
 808a838:	080401ac 	.word	0x080401ac

0808a83c <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 808a83c:	b508      	push	{r3, lr}
 808a83e:	4b02      	ldr	r3, [pc, #8]	; (808a848 <hal_i2c_lock+0xc>)
 808a840:	681b      	ldr	r3, [r3, #0]
 808a842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a844:	9301      	str	r3, [sp, #4]
 808a846:	bd08      	pop	{r3, pc}
 808a848:	080401ac 	.word	0x080401ac

0808a84c <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 808a84c:	b508      	push	{r3, lr}
 808a84e:	4b02      	ldr	r3, [pc, #8]	; (808a858 <hal_i2c_unlock+0xc>)
 808a850:	681b      	ldr	r3, [r3, #0]
 808a852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a854:	9301      	str	r3, [sp, #4]
 808a856:	bd08      	pop	{r3, pc}
 808a858:	080401ac 	.word	0x080401ac

0808a85c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 808a85c:	b508      	push	{r3, lr}
 808a85e:	4b02      	ldr	r3, [pc, #8]	; (808a868 <hal_i2c_request_ex+0xc>)
 808a860:	681b      	ldr	r3, [r3, #0]
 808a862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808a864:	9301      	str	r3, [sp, #4]
 808a866:	bd08      	pop	{r3, pc}
 808a868:	080401ac 	.word	0x080401ac

0808a86c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 808a86c:	b508      	push	{r3, lr}
 808a86e:	4b02      	ldr	r3, [pc, #8]	; (808a878 <hal_spi_begin+0xc>)
 808a870:	681b      	ldr	r3, [r3, #0]
 808a872:	681b      	ldr	r3, [r3, #0]
 808a874:	9301      	str	r3, [sp, #4]
 808a876:	bd08      	pop	{r3, pc}
 808a878:	080401b4 	.word	0x080401b4

0808a87c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 808a87c:	b508      	push	{r3, lr}
 808a87e:	4b02      	ldr	r3, [pc, #8]	; (808a888 <hal_spi_set_bit_order+0xc>)
 808a880:	681b      	ldr	r3, [r3, #0]
 808a882:	689b      	ldr	r3, [r3, #8]
 808a884:	9301      	str	r3, [sp, #4]
 808a886:	bd08      	pop	{r3, pc}
 808a888:	080401b4 	.word	0x080401b4

0808a88c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 808a88c:	b508      	push	{r3, lr}
 808a88e:	4b02      	ldr	r3, [pc, #8]	; (808a898 <hal_spi_set_data_mode+0xc>)
 808a890:	681b      	ldr	r3, [r3, #0]
 808a892:	68db      	ldr	r3, [r3, #12]
 808a894:	9301      	str	r3, [sp, #4]
 808a896:	bd08      	pop	{r3, pc}
 808a898:	080401b4 	.word	0x080401b4

0808a89c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 808a89c:	b508      	push	{r3, lr}
 808a89e:	4b02      	ldr	r3, [pc, #8]	; (808a8a8 <hal_spi_set_clock_divider+0xc>)
 808a8a0:	681b      	ldr	r3, [r3, #0]
 808a8a2:	691b      	ldr	r3, [r3, #16]
 808a8a4:	9301      	str	r3, [sp, #4]
 808a8a6:	bd08      	pop	{r3, pc}
 808a8a8:	080401b4 	.word	0x080401b4

0808a8ac <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 808a8ac:	b508      	push	{r3, lr}
 808a8ae:	4b02      	ldr	r3, [pc, #8]	; (808a8b8 <hal_spi_transfer+0xc>)
 808a8b0:	681b      	ldr	r3, [r3, #0]
 808a8b2:	695b      	ldr	r3, [r3, #20]
 808a8b4:	9301      	str	r3, [sp, #4]
 808a8b6:	bd08      	pop	{r3, pc}
 808a8b8:	080401b4 	.word	0x080401b4

0808a8bc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 808a8bc:	b508      	push	{r3, lr}
 808a8be:	4b02      	ldr	r3, [pc, #8]	; (808a8c8 <hal_spi_init+0xc>)
 808a8c0:	681b      	ldr	r3, [r3, #0]
 808a8c2:	69db      	ldr	r3, [r3, #28]
 808a8c4:	9301      	str	r3, [sp, #4]
 808a8c6:	bd08      	pop	{r3, pc}
 808a8c8:	080401b4 	.word	0x080401b4

0808a8cc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 808a8cc:	b508      	push	{r3, lr}
 808a8ce:	4b02      	ldr	r3, [pc, #8]	; (808a8d8 <hal_spi_is_enabled+0xc>)
 808a8d0:	681b      	ldr	r3, [r3, #0]
 808a8d2:	6a1b      	ldr	r3, [r3, #32]
 808a8d4:	9301      	str	r3, [sp, #4]
 808a8d6:	bd08      	pop	{r3, pc}
 808a8d8:	080401b4 	.word	0x080401b4

0808a8dc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 808a8dc:	b508      	push	{r3, lr}
 808a8de:	4b02      	ldr	r3, [pc, #8]	; (808a8e8 <hal_spi_info+0xc>)
 808a8e0:	681b      	ldr	r3, [r3, #0]
 808a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a8e4:	9301      	str	r3, [sp, #4]
 808a8e6:	bd08      	pop	{r3, pc}
 808a8e8:	080401b4 	.word	0x080401b4

0808a8ec <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
 808a8ec:	b508      	push	{r3, lr}
 808a8ee:	4b02      	ldr	r3, [pc, #8]	; (808a8f8 <hal_spi_transfer_dma+0xc>)
 808a8f0:	681b      	ldr	r3, [r3, #0]
 808a8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a8f4:	9301      	str	r3, [sp, #4]
 808a8f6:	bd08      	pop	{r3, pc}
 808a8f8:	080401b4 	.word	0x080401b4

0808a8fc <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 808a8fc:	b508      	push	{r3, lr}
 808a8fe:	4b02      	ldr	r3, [pc, #8]	; (808a908 <hal_spi_transfer_dma_status+0xc>)
 808a900:	681b      	ldr	r3, [r3, #0]
 808a902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a904:	9301      	str	r3, [sp, #4]
 808a906:	bd08      	pop	{r3, pc}
 808a908:	080401b4 	.word	0x080401b4

0808a90c <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808a90c:	b508      	push	{r3, lr}
 808a90e:	4b02      	ldr	r3, [pc, #8]	; (808a918 <inet_gethostbyname+0xc>)
 808a910:	681b      	ldr	r3, [r3, #0]
 808a912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808a914:	9301      	str	r3, [sp, #4]
 808a916:	bd08      	pop	{r3, pc}
 808a918:	08060020 	.word	0x08060020

0808a91c <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 808a91c:	b508      	push	{r3, lr}
 808a91e:	4b02      	ldr	r3, [pc, #8]	; (808a928 <cellular_command+0xc>)
 808a920:	681b      	ldr	r3, [r3, #0]
 808a922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a924:	9301      	str	r3, [sp, #4]
 808a926:	bd08      	pop	{r3, pc}
 808a928:	08060020 	.word	0x08060020

0808a92c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808a92c:	b508      	push	{r3, lr}
 808a92e:	4b02      	ldr	r3, [pc, #8]	; (808a938 <HAL_USB_USART_Init+0xc>)
 808a930:	681b      	ldr	r3, [r3, #0]
 808a932:	681b      	ldr	r3, [r3, #0]
 808a934:	9301      	str	r3, [sp, #4]
 808a936:	bd08      	pop	{r3, pc}
 808a938:	0806001c 	.word	0x0806001c

0808a93c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 808a93c:	b508      	push	{r3, lr}
 808a93e:	4b02      	ldr	r3, [pc, #8]	; (808a948 <HAL_USB_USART_Begin+0xc>)
 808a940:	681b      	ldr	r3, [r3, #0]
 808a942:	685b      	ldr	r3, [r3, #4]
 808a944:	9301      	str	r3, [sp, #4]
 808a946:	bd08      	pop	{r3, pc}
 808a948:	0806001c 	.word	0x0806001c

0808a94c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808a94c:	b508      	push	{r3, lr}
 808a94e:	4b02      	ldr	r3, [pc, #8]	; (808a958 <HAL_USB_USART_Available_Data+0xc>)
 808a950:	681b      	ldr	r3, [r3, #0]
 808a952:	691b      	ldr	r3, [r3, #16]
 808a954:	9301      	str	r3, [sp, #4]
 808a956:	bd08      	pop	{r3, pc}
 808a958:	0806001c 	.word	0x0806001c

0808a95c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808a95c:	b508      	push	{r3, lr}
 808a95e:	4b02      	ldr	r3, [pc, #8]	; (808a968 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808a960:	681b      	ldr	r3, [r3, #0]
 808a962:	695b      	ldr	r3, [r3, #20]
 808a964:	9301      	str	r3, [sp, #4]
 808a966:	bd08      	pop	{r3, pc}
 808a968:	0806001c 	.word	0x0806001c

0808a96c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808a96c:	b508      	push	{r3, lr}
 808a96e:	4b02      	ldr	r3, [pc, #8]	; (808a978 <HAL_USB_USART_Receive_Data+0xc>)
 808a970:	681b      	ldr	r3, [r3, #0]
 808a972:	699b      	ldr	r3, [r3, #24]
 808a974:	9301      	str	r3, [sp, #4]
 808a976:	bd08      	pop	{r3, pc}
 808a978:	0806001c 	.word	0x0806001c

0808a97c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808a97c:	b508      	push	{r3, lr}
 808a97e:	4b02      	ldr	r3, [pc, #8]	; (808a988 <HAL_USB_USART_Send_Data+0xc>)
 808a980:	681b      	ldr	r3, [r3, #0]
 808a982:	69db      	ldr	r3, [r3, #28]
 808a984:	9301      	str	r3, [sp, #4]
 808a986:	bd08      	pop	{r3, pc}
 808a988:	0806001c 	.word	0x0806001c

0808a98c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808a98c:	b508      	push	{r3, lr}
 808a98e:	4b02      	ldr	r3, [pc, #8]	; (808a998 <HAL_USB_USART_Flush_Data+0xc>)
 808a990:	681b      	ldr	r3, [r3, #0]
 808a992:	6a1b      	ldr	r3, [r3, #32]
 808a994:	9301      	str	r3, [sp, #4]
 808a996:	bd08      	pop	{r3, pc}
 808a998:	0806001c 	.word	0x0806001c

0808a99c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 808a99c:	b508      	push	{r3, lr}
 808a99e:	4b02      	ldr	r3, [pc, #8]	; (808a9a8 <log_message_v+0xc>)
 808a9a0:	681b      	ldr	r3, [r3, #0]
 808a9a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808a9a4:	9301      	str	r3, [sp, #4]
 808a9a6:	bd08      	pop	{r3, pc}
 808a9a8:	080201a0 	.word	0x080201a0

0808a9ac <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808a9ac:	b508      	push	{r3, lr}
 808a9ae:	4b02      	ldr	r3, [pc, #8]	; (808a9b8 <system_mode+0xc>)
 808a9b0:	681b      	ldr	r3, [r3, #0]
 808a9b2:	681b      	ldr	r3, [r3, #0]
 808a9b4:	9301      	str	r3, [sp, #4]
 808a9b6:	bd08      	pop	{r3, pc}
 808a9b8:	080401a4 	.word	0x080401a4

0808a9bc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808a9bc:	b508      	push	{r3, lr}
 808a9be:	4b02      	ldr	r3, [pc, #8]	; (808a9c8 <set_system_mode+0xc>)
 808a9c0:	681b      	ldr	r3, [r3, #0]
 808a9c2:	685b      	ldr	r3, [r3, #4]
 808a9c4:	9301      	str	r3, [sp, #4]
 808a9c6:	bd08      	pop	{r3, pc}
 808a9c8:	080401a4 	.word	0x080401a4

0808a9cc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808a9cc:	b508      	push	{r3, lr}
 808a9ce:	4b02      	ldr	r3, [pc, #8]	; (808a9d8 <system_delay_ms+0xc>)
 808a9d0:	681b      	ldr	r3, [r3, #0]
 808a9d2:	695b      	ldr	r3, [r3, #20]
 808a9d4:	9301      	str	r3, [sp, #4]
 808a9d6:	bd08      	pop	{r3, pc}
 808a9d8:	080401a4 	.word	0x080401a4

0808a9dc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808a9dc:	b508      	push	{r3, lr}
 808a9de:	4b02      	ldr	r3, [pc, #8]	; (808a9e8 <system_thread_set_state+0xc>)
 808a9e0:	681b      	ldr	r3, [r3, #0]
 808a9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a9e4:	9301      	str	r3, [sp, #4]
 808a9e6:	bd08      	pop	{r3, pc}
 808a9e8:	080401a4 	.word	0x080401a4

0808a9ec <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 808a9ec:	b508      	push	{r3, lr}
 808a9ee:	4b02      	ldr	r3, [pc, #8]	; (808a9f8 <system_version_info+0xc>)
 808a9f0:	681b      	ldr	r3, [r3, #0]
 808a9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a9f4:	9301      	str	r3, [sp, #4]
 808a9f6:	bd08      	pop	{r3, pc}
 808a9f8:	080401a4 	.word	0x080401a4

0808a9fc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 808a9fc:	b508      	push	{r3, lr}
 808a9fe:	4b02      	ldr	r3, [pc, #8]	; (808aa08 <application_thread_current+0xc>)
 808aa00:	681b      	ldr	r3, [r3, #0]
 808aa02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808aa04:	9301      	str	r3, [sp, #4]
 808aa06:	bd08      	pop	{r3, pc}
 808aa08:	080401a4 	.word	0x080401a4

0808aa0c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 808aa0c:	b508      	push	{r3, lr}
 808aa0e:	4b02      	ldr	r3, [pc, #8]	; (808aa18 <application_thread_invoke+0xc>)
 808aa10:	681b      	ldr	r3, [r3, #0]
 808aa12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808aa14:	9301      	str	r3, [sp, #4]
 808aa16:	bd08      	pop	{r3, pc}
 808aa18:	080401a4 	.word	0x080401a4

0808aa1c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808aa1c:	b508      	push	{r3, lr}
 808aa1e:	4b02      	ldr	r3, [pc, #8]	; (808aa28 <system_thread_get_state+0xc>)
 808aa20:	681b      	ldr	r3, [r3, #0]
 808aa22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808aa24:	9301      	str	r3, [sp, #4]
 808aa26:	bd08      	pop	{r3, pc}
 808aa28:	080401a4 	.word	0x080401a4

0808aa2c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 808aa2c:	b508      	push	{r3, lr}
 808aa2e:	4b02      	ldr	r3, [pc, #8]	; (808aa38 <system_notify_time_changed+0xc>)
 808aa30:	681b      	ldr	r3, [r3, #0]
 808aa32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808aa34:	9301      	str	r3, [sp, #4]
 808aa36:	bd08      	pop	{r3, pc}
 808aa38:	080401a4 	.word	0x080401a4

0808aa3c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808aa3c:	b508      	push	{r3, lr}
 808aa3e:	4b03      	ldr	r3, [pc, #12]	; (808aa4c <system_ctrl_set_app_request_handler+0x10>)
 808aa40:	681b      	ldr	r3, [r3, #0]
 808aa42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808aa46:	9301      	str	r3, [sp, #4]
 808aa48:	bd08      	pop	{r3, pc}
 808aa4a:	0000      	.short	0x0000
 808aa4c:	080401a4 	.word	0x080401a4

0808aa50 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808aa50:	b508      	push	{r3, lr}
 808aa52:	4b03      	ldr	r3, [pc, #12]	; (808aa60 <system_ctrl_set_result+0x10>)
 808aa54:	681b      	ldr	r3, [r3, #0]
 808aa56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808aa5a:	9301      	str	r3, [sp, #4]
 808aa5c:	bd08      	pop	{r3, pc}
 808aa5e:	0000      	.short	0x0000
 808aa60:	080401a4 	.word	0x080401a4

0808aa64 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 808aa64:	b508      	push	{r3, lr}
 808aa66:	4b03      	ldr	r3, [pc, #12]	; (808aa74 <system_sleep_pins+0x10>)
 808aa68:	681b      	ldr	r3, [r3, #0]
 808aa6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 808aa6e:	9301      	str	r3, [sp, #4]
 808aa70:	bd08      	pop	{r3, pc}
 808aa72:	0000      	.short	0x0000
 808aa74:	080401a4 	.word	0x080401a4

0808aa78 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 808aa78:	b508      	push	{r3, lr}
 808aa7a:	4b03      	ldr	r3, [pc, #12]	; (808aa88 <system_reset+0x10>)
 808aa7c:	681b      	ldr	r3, [r3, #0]
 808aa7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 808aa82:	9301      	str	r3, [sp, #4]
 808aa84:	bd08      	pop	{r3, pc}
 808aa86:	0000      	.short	0x0000
 808aa88:	080401a4 	.word	0x080401a4

0808aa8c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808aa8c:	b508      	push	{r3, lr}
 808aa8e:	4b02      	ldr	r3, [pc, #8]	; (808aa98 <network_connect+0xc>)
 808aa90:	681b      	ldr	r3, [r3, #0]
 808aa92:	685b      	ldr	r3, [r3, #4]
 808aa94:	9301      	str	r3, [sp, #4]
 808aa96:	bd08      	pop	{r3, pc}
 808aa98:	080401c8 	.word	0x080401c8

0808aa9c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808aa9c:	b508      	push	{r3, lr}
 808aa9e:	4b02      	ldr	r3, [pc, #8]	; (808aaa8 <network_connecting+0xc>)
 808aaa0:	681b      	ldr	r3, [r3, #0]
 808aaa2:	689b      	ldr	r3, [r3, #8]
 808aaa4:	9301      	str	r3, [sp, #4]
 808aaa6:	bd08      	pop	{r3, pc}
 808aaa8:	080401c8 	.word	0x080401c8

0808aaac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808aaac:	b508      	push	{r3, lr}
 808aaae:	4b02      	ldr	r3, [pc, #8]	; (808aab8 <network_disconnect+0xc>)
 808aab0:	681b      	ldr	r3, [r3, #0]
 808aab2:	68db      	ldr	r3, [r3, #12]
 808aab4:	9301      	str	r3, [sp, #4]
 808aab6:	bd08      	pop	{r3, pc}
 808aab8:	080401c8 	.word	0x080401c8

0808aabc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808aabc:	b508      	push	{r3, lr}
 808aabe:	4b02      	ldr	r3, [pc, #8]	; (808aac8 <network_ready+0xc>)
 808aac0:	681b      	ldr	r3, [r3, #0]
 808aac2:	691b      	ldr	r3, [r3, #16]
 808aac4:	9301      	str	r3, [sp, #4]
 808aac6:	bd08      	pop	{r3, pc}
 808aac8:	080401c8 	.word	0x080401c8

0808aacc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808aacc:	b508      	push	{r3, lr}
 808aace:	4b02      	ldr	r3, [pc, #8]	; (808aad8 <network_on+0xc>)
 808aad0:	681b      	ldr	r3, [r3, #0]
 808aad2:	695b      	ldr	r3, [r3, #20]
 808aad4:	9301      	str	r3, [sp, #4]
 808aad6:	bd08      	pop	{r3, pc}
 808aad8:	080401c8 	.word	0x080401c8

0808aadc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808aadc:	b508      	push	{r3, lr}
 808aade:	4b02      	ldr	r3, [pc, #8]	; (808aae8 <network_off+0xc>)
 808aae0:	681b      	ldr	r3, [r3, #0]
 808aae2:	699b      	ldr	r3, [r3, #24]
 808aae4:	9301      	str	r3, [sp, #4]
 808aae6:	bd08      	pop	{r3, pc}
 808aae8:	080401c8 	.word	0x080401c8

0808aaec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808aaec:	b508      	push	{r3, lr}
 808aaee:	4b02      	ldr	r3, [pc, #8]	; (808aaf8 <network_listen+0xc>)
 808aaf0:	681b      	ldr	r3, [r3, #0]
 808aaf2:	69db      	ldr	r3, [r3, #28]
 808aaf4:	9301      	str	r3, [sp, #4]
 808aaf6:	bd08      	pop	{r3, pc}
 808aaf8:	080401c8 	.word	0x080401c8

0808aafc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808aafc:	b508      	push	{r3, lr}
 808aafe:	4b02      	ldr	r3, [pc, #8]	; (808ab08 <network_listening+0xc>)
 808ab00:	681b      	ldr	r3, [r3, #0]
 808ab02:	6a1b      	ldr	r3, [r3, #32]
 808ab04:	9301      	str	r3, [sp, #4]
 808ab06:	bd08      	pop	{r3, pc}
 808ab08:	080401c8 	.word	0x080401c8

0808ab0c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808ab0c:	b508      	push	{r3, lr}
 808ab0e:	4b02      	ldr	r3, [pc, #8]	; (808ab18 <network_set_listen_timeout+0xc>)
 808ab10:	681b      	ldr	r3, [r3, #0]
 808ab12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808ab14:	9301      	str	r3, [sp, #4]
 808ab16:	bd08      	pop	{r3, pc}
 808ab18:	080401c8 	.word	0x080401c8

0808ab1c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808ab1c:	b508      	push	{r3, lr}
 808ab1e:	4b02      	ldr	r3, [pc, #8]	; (808ab28 <network_get_listen_timeout+0xc>)
 808ab20:	681b      	ldr	r3, [r3, #0]
 808ab22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808ab24:	9301      	str	r3, [sp, #4]
 808ab26:	bd08      	pop	{r3, pc}
 808ab28:	080401c8 	.word	0x080401c8

0808ab2c <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808ab2c:	b508      	push	{r3, lr}
 808ab2e:	4b02      	ldr	r3, [pc, #8]	; (808ab38 <spark_function+0xc>)
 808ab30:	681b      	ldr	r3, [r3, #0]
 808ab32:	685b      	ldr	r3, [r3, #4]
 808ab34:	9301      	str	r3, [sp, #4]
 808ab36:	bd08      	pop	{r3, pc}
 808ab38:	080401cc 	.word	0x080401cc

0808ab3c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808ab3c:	b508      	push	{r3, lr}
 808ab3e:	4b02      	ldr	r3, [pc, #8]	; (808ab48 <spark_process+0xc>)
 808ab40:	681b      	ldr	r3, [r3, #0]
 808ab42:	689b      	ldr	r3, [r3, #8]
 808ab44:	9301      	str	r3, [sp, #4]
 808ab46:	bd08      	pop	{r3, pc}
 808ab48:	080401cc 	.word	0x080401cc

0808ab4c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808ab4c:	b508      	push	{r3, lr}
 808ab4e:	4b02      	ldr	r3, [pc, #8]	; (808ab58 <spark_cloud_flag_connect+0xc>)
 808ab50:	681b      	ldr	r3, [r3, #0]
 808ab52:	68db      	ldr	r3, [r3, #12]
 808ab54:	9301      	str	r3, [sp, #4]
 808ab56:	bd08      	pop	{r3, pc}
 808ab58:	080401cc 	.word	0x080401cc

0808ab5c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808ab5c:	b508      	push	{r3, lr}
 808ab5e:	4b02      	ldr	r3, [pc, #8]	; (808ab68 <spark_cloud_flag_connected+0xc>)
 808ab60:	681b      	ldr	r3, [r3, #0]
 808ab62:	695b      	ldr	r3, [r3, #20]
 808ab64:	9301      	str	r3, [sp, #4]
 808ab66:	bd08      	pop	{r3, pc}
 808ab68:	080401cc 	.word	0x080401cc

0808ab6c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 808ab6c:	b508      	push	{r3, lr}
 808ab6e:	4b02      	ldr	r3, [pc, #8]	; (808ab78 <spark_deviceID+0xc>)
 808ab70:	681b      	ldr	r3, [r3, #0]
 808ab72:	69db      	ldr	r3, [r3, #28]
 808ab74:	9301      	str	r3, [sp, #4]
 808ab76:	bd08      	pop	{r3, pc}
 808ab78:	080401cc 	.word	0x080401cc

0808ab7c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808ab7c:	b508      	push	{r3, lr}
 808ab7e:	4b02      	ldr	r3, [pc, #8]	; (808ab88 <spark_send_event+0xc>)
 808ab80:	681b      	ldr	r3, [r3, #0]
 808ab82:	6a1b      	ldr	r3, [r3, #32]
 808ab84:	9301      	str	r3, [sp, #4]
 808ab86:	bd08      	pop	{r3, pc}
 808ab88:	080401cc 	.word	0x080401cc

0808ab8c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 808ab8c:	b508      	push	{r3, lr}
 808ab8e:	4b02      	ldr	r3, [pc, #8]	; (808ab98 <spark_subscribe+0xc>)
 808ab90:	681b      	ldr	r3, [r3, #0]
 808ab92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808ab94:	9301      	str	r3, [sp, #4]
 808ab96:	bd08      	pop	{r3, pc}
 808ab98:	080401cc 	.word	0x080401cc

0808ab9c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808ab9c:	b508      	push	{r3, lr}
 808ab9e:	4b02      	ldr	r3, [pc, #8]	; (808aba8 <spark_sync_time_pending+0xc>)
 808aba0:	681b      	ldr	r3, [r3, #0]
 808aba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808aba4:	9301      	str	r3, [sp, #4]
 808aba6:	bd08      	pop	{r3, pc}
 808aba8:	080401cc 	.word	0x080401cc

0808abac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808abac:	b508      	push	{r3, lr}
 808abae:	4b02      	ldr	r3, [pc, #8]	; (808abb8 <spark_set_random_seed_from_cloud_handler+0xc>)
 808abb0:	681b      	ldr	r3, [r3, #0]
 808abb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808abb4:	9301      	str	r3, [sp, #4]
 808abb6:	bd08      	pop	{r3, pc}
 808abb8:	080401cc 	.word	0x080401cc

0808abbc <malloc>:
#include "newlib_impure.h"
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808abbc:	b508      	push	{r3, lr}
 808abbe:	4b02      	ldr	r3, [pc, #8]	; (808abc8 <malloc+0xc>)
 808abc0:	681b      	ldr	r3, [r3, #0]
 808abc2:	681b      	ldr	r3, [r3, #0]
 808abc4:	9301      	str	r3, [sp, #4]
 808abc6:	bd08      	pop	{r3, pc}
 808abc8:	080401a0 	.word	0x080401a0

0808abcc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808abcc:	b508      	push	{r3, lr}
 808abce:	4b02      	ldr	r3, [pc, #8]	; (808abd8 <free+0xc>)
 808abd0:	681b      	ldr	r3, [r3, #0]
 808abd2:	685b      	ldr	r3, [r3, #4]
 808abd4:	9301      	str	r3, [sp, #4]
 808abd6:	bd08      	pop	{r3, pc}
 808abd8:	080401a0 	.word	0x080401a0

0808abdc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808abdc:	b508      	push	{r3, lr}
 808abde:	4b02      	ldr	r3, [pc, #8]	; (808abe8 <realloc+0xc>)
 808abe0:	681b      	ldr	r3, [r3, #0]
 808abe2:	689b      	ldr	r3, [r3, #8]
 808abe4:	9301      	str	r3, [sp, #4]
 808abe6:	bd08      	pop	{r3, pc}
 808abe8:	080401a0 	.word	0x080401a0

0808abec <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 808abec:	b508      	push	{r3, lr}
 808abee:	4b02      	ldr	r3, [pc, #8]	; (808abf8 <sprintf+0xc>)
 808abf0:	681b      	ldr	r3, [r3, #0]
 808abf2:	68db      	ldr	r3, [r3, #12]
 808abf4:	9301      	str	r3, [sp, #4]
 808abf6:	bd08      	pop	{r3, pc}
 808abf8:	080401a0 	.word	0x080401a0

0808abfc <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 808abfc:	b508      	push	{r3, lr}
 808abfe:	4b02      	ldr	r3, [pc, #8]	; (808ac08 <siprintf+0xc>)
 808ac00:	681b      	ldr	r3, [r3, #0]
 808ac02:	691b      	ldr	r3, [r3, #16]
 808ac04:	9301      	str	r3, [sp, #4]
 808ac06:	bd08      	pop	{r3, pc}
 808ac08:	080401a0 	.word	0x080401a0

0808ac0c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 808ac0c:	b508      	push	{r3, lr}
 808ac0e:	4b02      	ldr	r3, [pc, #8]	; (808ac18 <sscanf+0xc>)
 808ac10:	681b      	ldr	r3, [r3, #0]
 808ac12:	695b      	ldr	r3, [r3, #20]
 808ac14:	9301      	str	r3, [sp, #4]
 808ac16:	bd08      	pop	{r3, pc}
 808ac18:	080401a0 	.word	0x080401a0

0808ac1c <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 808ac1c:	b508      	push	{r3, lr}
 808ac1e:	4b02      	ldr	r3, [pc, #8]	; (808ac28 <siscanf+0xc>)
 808ac20:	681b      	ldr	r3, [r3, #0]
 808ac22:	699b      	ldr	r3, [r3, #24]
 808ac24:	9301      	str	r3, [sp, #4]
 808ac26:	bd08      	pop	{r3, pc}
 808ac28:	080401a0 	.word	0x080401a0

0808ac2c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808ac2c:	b508      	push	{r3, lr}
 808ac2e:	4b02      	ldr	r3, [pc, #8]	; (808ac38 <snprintf+0xc>)
 808ac30:	681b      	ldr	r3, [r3, #0]
 808ac32:	69db      	ldr	r3, [r3, #28]
 808ac34:	9301      	str	r3, [sp, #4]
 808ac36:	bd08      	pop	{r3, pc}
 808ac38:	080401a0 	.word	0x080401a0

0808ac3c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 808ac3c:	b508      	push	{r3, lr}
 808ac3e:	4b02      	ldr	r3, [pc, #8]	; (808ac48 <sniprintf+0xc>)
 808ac40:	681b      	ldr	r3, [r3, #0]
 808ac42:	6a1b      	ldr	r3, [r3, #32]
 808ac44:	9301      	str	r3, [sp, #4]
 808ac46:	bd08      	pop	{r3, pc}
 808ac48:	080401a0 	.word	0x080401a0

0808ac4c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 808ac4c:	b508      	push	{r3, lr}
 808ac4e:	4b02      	ldr	r3, [pc, #8]	; (808ac58 <vsnprintf+0xc>)
 808ac50:	681b      	ldr	r3, [r3, #0]
 808ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808ac54:	9301      	str	r3, [sp, #4]
 808ac56:	bd08      	pop	{r3, pc}
 808ac58:	080401a0 	.word	0x080401a0

0808ac5c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808ac5c:	b508      	push	{r3, lr}
 808ac5e:	4b02      	ldr	r3, [pc, #8]	; (808ac68 <abort+0xc>)
 808ac60:	681b      	ldr	r3, [r3, #0]
 808ac62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808ac64:	9301      	str	r3, [sp, #4]
 808ac66:	bd08      	pop	{r3, pc}
 808ac68:	080401a0 	.word	0x080401a0

0808ac6c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808ac6c:	b508      	push	{r3, lr}
 808ac6e:	4b02      	ldr	r3, [pc, #8]	; (808ac78 <_malloc_r+0xc>)
 808ac70:	681b      	ldr	r3, [r3, #0]
 808ac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808ac74:	9301      	str	r3, [sp, #4]
 808ac76:	bd08      	pop	{r3, pc}
 808ac78:	080401a0 	.word	0x080401a0

0808ac7c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 808ac7c:	b508      	push	{r3, lr}
 808ac7e:	4b02      	ldr	r3, [pc, #8]	; (808ac88 <newlib_impure_ptr_callback+0xc>)
 808ac80:	681b      	ldr	r3, [r3, #0]
 808ac82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808ac84:	9301      	str	r3, [sp, #4]
 808ac86:	bd08      	pop	{r3, pc}
 808ac88:	080401a0 	.word	0x080401a0

0808ac8c <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 808ac8c:	b508      	push	{r3, lr}
            return &Wire3;
 808ac8e:	f002 fb93 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 808ac92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 808ac96:	f002 b92d 	b.w	808cef4 <_ZN7TwoWire4lockEv>

0808ac9a <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 808ac9a:	b510      	push	{r4, lr}
 808ac9c:	4604      	mov	r4, r0
    lock_(_lock)
 808ac9e:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 808aca0:	b109      	cbz	r1, 808aca6 <_ZN4PMICC1Eb+0xc>
        lock();
 808aca2:	f7ff fff3 	bl	808ac8c <_ZN4PMIC4lockEv.constprop.0>
}
 808aca6:	4620      	mov	r0, r4
 808aca8:	bd10      	pop	{r4, pc}

0808acaa <_ZN4PMIC5beginEv>:
{
 808acaa:	b508      	push	{r3, lr}
            return &Wire3;
 808acac:	f002 fb84 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    if (!pmicWireInstance()->isEnabled()) {
 808acb0:	f002 f91c 	bl	808ceec <_ZN7TwoWire9isEnabledEv>
 808acb4:	b918      	cbnz	r0, 808acbe <_ZN4PMIC5beginEv+0x14>
            return &Wire3;
 808acb6:	f002 fb7f 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
        pmicWireInstance()->begin();
 808acba:	f002 f8bf 	bl	808ce3c <_ZN7TwoWire5beginEv>
            return &Wire3;
 808acbe:	f002 fb7b 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
}
 808acc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
 808acc6:	f002 b911 	b.w	808ceec <_ZN7TwoWire9isEnabledEv>

0808acca <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 808acca:	b508      	push	{r3, lr}
            return &Wire3;
 808accc:	f002 fb74 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 808acd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 808acd4:	f002 b917 	b.w	808cf06 <_ZN7TwoWire6unlockEv>

0808acd8 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 808acd8:	b510      	push	{r4, lr}
    if (lock_) {
 808acda:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 808acdc:	4604      	mov	r4, r0
    if (lock_) {
 808acde:	b10b      	cbz	r3, 808ace4 <_ZN4PMICD1Ev+0xc>
        unlock();
 808ace0:	f7ff fff3 	bl	808acca <_ZN4PMIC6unlockEv>
}
 808ace4:	4620      	mov	r0, r4
 808ace6:	bd10      	pop	{r4, pc}

0808ace8 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808ace8:	b510      	push	{r4, lr}
 808acea:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808acec:	6800      	ldr	r0, [r0, #0]
 808acee:	f7ff ffec 	bl	808acca <_ZN4PMIC6unlockEv>
 808acf2:	4620      	mov	r0, r4
 808acf4:	bd10      	pop	{r4, pc}

0808acf6 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 808acf6:	b530      	push	{r4, r5, lr}
 808acf8:	b087      	sub	sp, #28
 808acfa:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808acfc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808acfe:	f7ff ffc5 	bl	808ac8c <_ZN4PMIC4lockEv.constprop.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808ad02:	236b      	movs	r3, #107	; 0x6b
 808ad04:	f88d 3008 	strb.w	r3, [sp, #8]
 808ad08:	2300      	movs	r3, #0
 808ad0a:	2401      	movs	r4, #1
 808ad0c:	9303      	str	r3, [sp, #12]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 808ad0e:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808ad10:	f88d 4010 	strb.w	r4, [sp, #16]
    timeout_ = ms;
 808ad14:	9305      	str	r3, [sp, #20]
            return &Wire3;
 808ad16:	f002 fb4f 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 808ad1a:	a902      	add	r1, sp, #8
 808ad1c:	f002 f8c7 	bl	808ceae <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 808ad20:	f002 fb4a 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 808ad24:	6803      	ldr	r3, [r0, #0]
 808ad26:	4629      	mov	r1, r5
 808ad28:	689b      	ldr	r3, [r3, #8]
 808ad2a:	4798      	blx	r3
            return &Wire3;
 808ad2c:	f002 fb44 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 808ad30:	4621      	mov	r1, r4
 808ad32:	f002 f8d4 	bl	808cede <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 808ad36:	9403      	str	r4, [sp, #12]
            return &Wire3;
 808ad38:	f002 fb3e 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 808ad3c:	a902      	add	r1, sp, #8
 808ad3e:	f002 f883 	bl	808ce48 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 808ad42:	f002 fb39 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 808ad46:	6803      	ldr	r3, [r0, #0]
 808ad48:	695b      	ldr	r3, [r3, #20]
 808ad4a:	4798      	blx	r3
 808ad4c:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 808ad4e:	a801      	add	r0, sp, #4
 808ad50:	f7ff ffca 	bl	808ace8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808ad54:	b2e0      	uxtb	r0, r4
 808ad56:	b007      	add	sp, #28
 808ad58:	bd30      	pop	{r4, r5, pc}

0808ad5a <_ZN4PMIC23readInputSourceRegisterEv>:
    return readRegister(INPUT_SOURCE_REGISTER);
 808ad5a:	2100      	movs	r1, #0
 808ad5c:	f7ff bfcb 	b.w	808acf6 <_ZN4PMIC12readRegisterEh>

0808ad60 <_ZN4PMIC20getInputCurrentLimitEv>:
uint16_t PMIC::getInputCurrentLimit(void) {
 808ad60:	b508      	push	{r3, lr}
    byte raw = readInputSourceRegister();
 808ad62:	f7ff fffa 	bl	808ad5a <_ZN4PMIC23readInputSourceRegisterEv>
}
 808ad66:	4b03      	ldr	r3, [pc, #12]	; (808ad74 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
    return mapping[raw];
 808ad68:	f000 0007 	and.w	r0, r0, #7
}
 808ad6c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 808ad70:	bd08      	pop	{r3, pc}
 808ad72:	bf00      	nop
 808ad74:	080943e0 	.word	0x080943e0

0808ad78 <_ZN4PMIC16getChargeCurrentEv>:
    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808ad78:	2102      	movs	r1, #2
 808ad7a:	f7ff bfbc 	b.w	808acf6 <_ZN4PMIC12readRegisterEh>

0808ad7e <_ZN4PMIC15getSystemStatusEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808ad7e:	2108      	movs	r1, #8
 808ad80:	f7ff bfb9 	b.w	808acf6 <_ZN4PMIC12readRegisterEh>

0808ad84 <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 808ad84:	2109      	movs	r1, #9
 808ad86:	f7ff bfb6 	b.w	808acf6 <_ZN4PMIC12readRegisterEh>

0808ad8a <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 808ad8a:	b570      	push	{r4, r5, r6, lr}
 808ad8c:	b086      	sub	sp, #24
 808ad8e:	4614      	mov	r4, r2
 808ad90:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ad92:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808ad94:	f7ff ff7a 	bl	808ac8c <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808ad98:	236b      	movs	r3, #107	; 0x6b
 808ad9a:	f88d 3008 	strb.w	r3, [sp, #8]
 808ad9e:	2300      	movs	r3, #0
 808ada0:	2601      	movs	r6, #1
 808ada2:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
 808ada4:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808ada6:	f88d 6010 	strb.w	r6, [sp, #16]
    timeout_ = ms;
 808adaa:	9305      	str	r3, [sp, #20]
            return &Wire3;
 808adac:	f002 fb04 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 808adb0:	a902      	add	r1, sp, #8
 808adb2:	f002 f87c 	bl	808ceae <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 808adb6:	f002 faff 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(address);
 808adba:	6803      	ldr	r3, [r0, #0]
 808adbc:	4629      	mov	r1, r5
 808adbe:	689b      	ldr	r3, [r3, #8]
 808adc0:	4798      	blx	r3
            return &Wire3;
 808adc2:	f002 faf9 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(DATA);
 808adc6:	6803      	ldr	r3, [r0, #0]
 808adc8:	4621      	mov	r1, r4
 808adca:	689b      	ldr	r3, [r3, #8]
 808adcc:	4798      	blx	r3
            return &Wire3;
 808adce:	f002 faf3 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 808add2:	4631      	mov	r1, r6
 808add4:	f002 f883 	bl	808cede <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
 808add8:	a801      	add	r0, sp, #4
 808adda:	f7ff ff85 	bl	808ace8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808adde:	b006      	add	sp, #24
 808ade0:	bd70      	pop	{r4, r5, r6, pc}

0808ade2 <_ZN4PMIC20setInputCurrentLimitEt>:
bool PMIC::setInputCurrentLimit(uint16_t current) {
 808ade2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808ade4:	4604      	mov	r4, r0
 808ade6:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ade8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808adea:	f7ff ff4f 	bl	808ac8c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 808adee:	2100      	movs	r1, #0
 808adf0:	4620      	mov	r0, r4
 808adf2:	f7ff ff80 	bl	808acf6 <_ZN4PMIC12readRegisterEh>
    switch (current) {
 808adf6:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
    byte mask = DATA & 0b11111000;
 808adfa:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
    switch (current) {
 808adfe:	d02e      	beq.n	808ae5e <_ZN4PMIC20setInputCurrentLimitEt+0x7c>
 808ae00:	d814      	bhi.n	808ae2c <_ZN4PMIC20setInputCurrentLimitEt+0x4a>
 808ae02:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808ae06:	d027      	beq.n	808ae58 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 808ae08:	d80a      	bhi.n	808ae20 <_ZN4PMIC20setInputCurrentLimitEt+0x3e>
 808ae0a:	2d64      	cmp	r5, #100	; 0x64
 808ae0c:	d01e      	beq.n	808ae4c <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
 808ae0e:	2d96      	cmp	r5, #150	; 0x96
 808ae10:	d01a      	beq.n	808ae48 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 808ae12:	2400      	movs	r4, #0
    std::lock_guard<PMIC> l(*this);
 808ae14:	a801      	add	r0, sp, #4
 808ae16:	f7ff ff67 	bl	808ace8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808ae1a:	4620      	mov	r0, r4
 808ae1c:	b003      	add	sp, #12
 808ae1e:	bd30      	pop	{r4, r5, pc}
    switch (current) {
 808ae20:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 808ae24:	d1f5      	bne.n	808ae12 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 808ae26:	f042 0203 	orr.w	r2, r2, #3
 808ae2a:	e00f      	b.n	808ae4c <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
    switch (current) {
 808ae2c:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 808ae30:	d018      	beq.n	808ae64 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 808ae32:	f640 33b8 	movw	r3, #3000	; 0xbb8
 808ae36:	429d      	cmp	r5, r3
 808ae38:	d017      	beq.n	808ae6a <_ZN4PMIC20setInputCurrentLimitEt+0x88>
 808ae3a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 808ae3e:	429d      	cmp	r5, r3
 808ae40:	d1e7      	bne.n	808ae12 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 808ae42:	f042 0205 	orr.w	r2, r2, #5
 808ae46:	e001      	b.n	808ae4c <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 808ae48:	f042 0201 	orr.w	r2, r2, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 808ae4c:	4620      	mov	r0, r4
 808ae4e:	2100      	movs	r1, #0
 808ae50:	f7ff ff9b 	bl	808ad8a <_ZN4PMIC13writeRegisterEhh>
    return 1; // value was written successfully
 808ae54:	2401      	movs	r4, #1
        break;
 808ae56:	e7dd      	b.n	808ae14 <_ZN4PMIC20setInputCurrentLimitEt+0x32>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 808ae58:	f042 0202 	orr.w	r2, r2, #2
 808ae5c:	e7f6      	b.n	808ae4c <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 808ae5e:	f042 0204 	orr.w	r2, r2, #4
 808ae62:	e7f3      	b.n	808ae4c <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 808ae64:	f042 0206 	orr.w	r2, r2, #6
 808ae68:	e7f0      	b.n	808ae4c <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 808ae6a:	f042 0207 	orr.w	r2, r2, #7
 808ae6e:	e7ed      	b.n	808ae4c <_ZN4PMIC20setInputCurrentLimitEt+0x6a>

0808ae70 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
 808ae70:	b513      	push	{r0, r1, r4, lr}
 808ae72:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ae74:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808ae76:	f7ff ff09 	bl	808ac8c <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 808ae7a:	2101      	movs	r1, #1
 808ae7c:	4620      	mov	r0, r4
 808ae7e:	f7ff ff3a 	bl	808acf6 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 808ae82:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 808ae86:	2101      	movs	r1, #1
 808ae88:	4620      	mov	r0, r4
 808ae8a:	f042 0210 	orr.w	r2, r2, #16
 808ae8e:	f7ff ff7c 	bl	808ad8a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808ae92:	a801      	add	r0, sp, #4
 808ae94:	f7ff ff28 	bl	808ace8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808ae98:	2001      	movs	r0, #1
 808ae9a:	b002      	add	sp, #8
 808ae9c:	bd10      	pop	{r4, pc}

0808ae9e <_ZN4PMIC16setChargeCurrentEbbbbbb>:
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 808ae9e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 808aea2:	460c      	mov	r4, r1
 808aea4:	4617      	mov	r7, r2
 808aea6:	4605      	mov	r5, r0
 808aea8:	461e      	mov	r6, r3
 808aeaa:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 808aeae:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 808aeb2:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808aeb6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808aeb8:	f7ff fee8 	bl	808ac8c <_ZN4PMIC4lockEv.constprop.0>
    if (bit7) current = current | 0b10000000;
 808aebc:	2c00      	cmp	r4, #0
 808aebe:	bf0c      	ite	eq
 808aec0:	2400      	moveq	r4, #0
 808aec2:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 808aec4:	b10f      	cbz	r7, 808aeca <_ZN4PMIC16setChargeCurrentEbbbbbb+0x2c>
 808aec6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    if (bit5) current = current | 0b00100000;
 808aeca:	b10e      	cbz	r6, 808aed0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x32>
 808aecc:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 808aed0:	f1ba 0f00 	cmp.w	sl, #0
 808aed4:	d001      	beq.n	808aeda <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3c>
 808aed6:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 808aeda:	f1b9 0f00 	cmp.w	r9, #0
 808aede:	d001      	beq.n	808aee4 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x46>
 808aee0:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 808aee4:	f1b8 0f00 	cmp.w	r8, #0
 808aee8:	d001      	beq.n	808aeee <_ZN4PMIC16setChargeCurrentEbbbbbb+0x50>
 808aeea:	f044 0404 	orr.w	r4, r4, #4
    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808aeee:	2102      	movs	r1, #2
 808aef0:	4628      	mov	r0, r5
 808aef2:	f7ff ff00 	bl	808acf6 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
 808aef6:	f000 0201 	and.w	r2, r0, #1
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 808aefa:	2102      	movs	r1, #2
 808aefc:	4628      	mov	r0, r5
 808aefe:	4322      	orrs	r2, r4
 808af00:	f7ff ff43 	bl	808ad8a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808af04:	a801      	add	r0, sp, #4
 808af06:	f7ff feef 	bl	808ace8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808af0a:	2001      	movs	r0, #1
 808af0c:	b002      	add	sp, #8
 808af0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808af12 <_ZN4PMIC16setChargeVoltageEt>:
bool PMIC::setChargeVoltage(uint16_t voltage) {
 808af12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808af14:	460c      	mov	r4, r1
 808af16:	4605      	mov	r5, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808af18:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808af1a:	f7ff feb7 	bl	808ac8c <_ZN4PMIC4lockEv.constprop.0>
    uint32_t best = 0;
 808af1e:	2200      	movs	r2, #0
    int bestDelta = 0x7fffffff;
 808af20:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 808af24:	4613      	mov	r3, r2
 808af26:	f5c4 615b 	rsb	r1, r4, #3504	; 0xdb0
        int delta = std::abs((int)sum - (int)value);
 808af2a:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 808af2e:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
        if (delta < bestDelta && sum <= value) {
 808af32:	4286      	cmp	r6, r0
 808af34:	da06      	bge.n	808af44 <_ZN4PMIC16setChargeVoltageEt+0x32>
 808af36:	f103 07db 	add.w	r7, r3, #219	; 0xdb
 808af3a:	ebb4 1f07 	cmp.w	r4, r7, lsl #4
 808af3e:	bf24      	itt	cs
 808af40:	4630      	movcs	r0, r6
 808af42:	461a      	movcs	r2, r3
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 808af44:	3301      	adds	r3, #1
 808af46:	2b40      	cmp	r3, #64	; 0x40
 808af48:	f101 0110 	add.w	r1, r1, #16
 808af4c:	d1ed      	bne.n	808af2a <_ZN4PMIC16setChargeVoltageEt+0x18>
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 808af4e:	0092      	lsls	r2, r2, #2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808af50:	2104      	movs	r1, #4
 808af52:	4628      	mov	r0, r5
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 808af54:	b2d4      	uxtb	r4, r2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808af56:	f7ff fece 	bl	808acf6 <_ZN4PMIC12readRegisterEh>
    cvcr |= (currentCvcr & 0b11);
 808af5a:	f000 0203 	and.w	r2, r0, #3
    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);
 808af5e:	2104      	movs	r1, #4
 808af60:	4628      	mov	r0, r5
 808af62:	4322      	orrs	r2, r4
 808af64:	f7ff ff11 	bl	808ad8a <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808af68:	a801      	add	r0, sp, #4
 808af6a:	f7ff febd 	bl	808ace8 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808af6e:	2001      	movs	r0, #1
 808af70:	b003      	add	sp, #12
 808af72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808af74 <_ZN8SPIClass6unlockEv>:
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808af74:	6880      	ldr	r0, [r0, #8]
 808af76:	f7ff bbc1 	b.w	808a6fc <os_mutex_recursive_unlock>

0808af7a <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 808af7a:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 808af7c:	2600      	movs	r6, #0
 808af7e:	4604      	mov	r4, r0
 808af80:	460d      	mov	r5, r1
 808af82:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 808af86:	f7ff fba1 	bl	808a6cc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 808af8a:	4628      	mov	r0, r5
    _spi = spi;
 808af8c:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 808af8e:	f7ff fc95 	bl	808a8bc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 808af92:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 808af94:	6066      	str	r6, [r4, #4]
}
 808af96:	bd70      	pop	{r4, r5, r6, pc}

0808af98 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 808af98:	b510      	push	{r4, lr}
 808af9a:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 808af9c:	6880      	ldr	r0, [r0, #8]
 808af9e:	f7ff fba5 	bl	808a6ec <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 808afa2:	7820      	ldrb	r0, [r4, #0]
 808afa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 808afa8:	f7ff fc60 	bl	808a86c <hal_spi_begin>
        unlock();
 808afac:	4620      	mov	r0, r4
 808afae:	f7ff ffe1 	bl	808af74 <_ZN8SPIClass6unlockEv>
    }
}
 808afb2:	bd10      	pop	{r4, pc}

0808afb4 <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
 808afb4:	b538      	push	{r3, r4, r5, lr}
 808afb6:	4604      	mov	r4, r0
 808afb8:	460d      	mov	r5, r1
 808afba:	6880      	ldr	r0, [r0, #8]
 808afbc:	f7ff fb96 	bl	808a6ec <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 808afc0:	7820      	ldrb	r0, [r4, #0]
 808afc2:	4629      	mov	r1, r5
 808afc4:	f7ff fc52 	bl	808a86c <hal_spi_begin>
        unlock();
 808afc8:	4620      	mov	r0, r4
 808afca:	f7ff ffd3 	bl	808af74 <_ZN8SPIClass6unlockEv>
    }
}
 808afce:	bd38      	pop	{r3, r4, r5, pc}

0808afd0 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 808afd0:	b538      	push	{r3, r4, r5, lr}
 808afd2:	4604      	mov	r4, r0
 808afd4:	460d      	mov	r5, r1
 808afd6:	6880      	ldr	r0, [r0, #8]
 808afd8:	f7ff fb88 	bl	808a6ec <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 808afdc:	7820      	ldrb	r0, [r4, #0]
 808afde:	4629      	mov	r1, r5
 808afe0:	f7ff fc4c 	bl	808a87c <hal_spi_set_bit_order>
        unlock();
 808afe4:	4620      	mov	r0, r4
 808afe6:	f7ff ffc5 	bl	808af74 <_ZN8SPIClass6unlockEv>
    }
}
 808afea:	bd38      	pop	{r3, r4, r5, pc}

0808afec <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 808afec:	b538      	push	{r3, r4, r5, lr}
 808afee:	4604      	mov	r4, r0
 808aff0:	460d      	mov	r5, r1
 808aff2:	6880      	ldr	r0, [r0, #8]
 808aff4:	f7ff fb7a 	bl	808a6ec <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 808aff8:	7820      	ldrb	r0, [r4, #0]
 808affa:	4629      	mov	r1, r5
 808affc:	f7ff fc46 	bl	808a88c <hal_spi_set_data_mode>
        unlock();
 808b000:	4620      	mov	r0, r4
 808b002:	f7ff ffb7 	bl	808af74 <_ZN8SPIClass6unlockEv>
    }
}
 808b006:	bd38      	pop	{r3, r4, r5, pc}

0808b008 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 808b008:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 808b00a:	2400      	movs	r4, #0
 808b00c:	0840      	lsrs	r0, r0, #1
 808b00e:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808b010:	6818      	ldr	r0, [r3, #0]
 808b012:	b2e5      	uxtb	r5, r4
 808b014:	4288      	cmp	r0, r1
 808b016:	d906      	bls.n	808b026 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 808b018:	3401      	adds	r4, #1
 808b01a:	2c08      	cmp	r4, #8
 808b01c:	d002      	beq.n	808b024 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 808b01e:	0840      	lsrs	r0, r0, #1
 808b020:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808b022:	e7f5      	b.n	808b010 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 808b024:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 808b026:	4b02      	ldr	r3, [pc, #8]	; (808b030 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 808b028:	5d5b      	ldrb	r3, [r3, r5]
 808b02a:	7013      	strb	r3, [r2, #0]
}
 808b02c:	bd30      	pop	{r4, r5, pc}
 808b02e:	bf00      	nop
 808b030:	080943f0 	.word	0x080943f0

0808b034 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808b034:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 808b036:	2500      	movs	r5, #0
{
 808b038:	4604      	mov	r4, r0
 808b03a:	b089      	sub	sp, #36	; 0x24
 808b03c:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 808b03e:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 808b042:	9502      	str	r5, [sp, #8]
 808b044:	f7ff fb52 	bl	808a6ec <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 808b048:	4629      	mov	r1, r5
 808b04a:	2214      	movs	r2, #20
 808b04c:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 808b04e:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 808b050:	f003 fd6e 	bl	808eb30 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 808b054:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 808b056:	462a      	mov	r2, r5
 808b058:	4638      	mov	r0, r7
 808b05a:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 808b05c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 808b060:	f7ff fc3c 	bl	808a8dc <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808b064:	ab02      	add	r3, sp, #8
 808b066:	f10d 0207 	add.w	r2, sp, #7
 808b06a:	4631      	mov	r1, r6
 808b06c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 808b06e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808b072:	f7ff ffc9 	bl	808b008 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 808b076:	f89d 1007 	ldrb.w	r1, [sp, #7]
 808b07a:	7820      	ldrb	r0, [r4, #0]
 808b07c:	f7ff fc0e 	bl	808a89c <hal_spi_set_clock_divider>
        unlock();
 808b080:	4620      	mov	r0, r4
 808b082:	f7ff ff77 	bl	808af74 <_ZN8SPIClass6unlockEv>
    }

    return clock;
}
 808b086:	9802      	ldr	r0, [sp, #8]
 808b088:	b009      	add	sp, #36	; 0x24
 808b08a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b08c <_ZN8SPIClass15setClockDividerEh>:
{
 808b08c:	b538      	push	{r3, r4, r5, lr}
 808b08e:	4604      	mov	r4, r0
 808b090:	6880      	ldr	r0, [r0, #8]
 808b092:	460d      	mov	r5, r1
 808b094:	f7ff fb2a 	bl	808a6ec <os_mutex_recursive_lock>
        if (_dividerReference)
 808b098:	6861      	ldr	r1, [r4, #4]
 808b09a:	b199      	cbz	r1, 808b0c4 <_ZN8SPIClass15setClockDividerEh+0x38>
    unsigned result = 0;
 808b09c:	2300      	movs	r3, #0
 808b09e:	4a0c      	ldr	r2, [pc, #48]	; (808b0d0 <_ZN8SPIClass15setClockDividerEh+0x44>)
        if (clock_divisors[result] == divider)
 808b0a0:	f812 0b01 	ldrb.w	r0, [r2], #1
 808b0a4:	4285      	cmp	r5, r0
 808b0a6:	d002      	beq.n	808b0ae <_ZN8SPIClass15setClockDividerEh+0x22>
    for (; result < arraySize(clock_divisors); result++)
 808b0a8:	3301      	adds	r3, #1
 808b0aa:	2b08      	cmp	r3, #8
 808b0ac:	d1f8      	bne.n	808b0a0 <_ZN8SPIClass15setClockDividerEh+0x14>
    return result + 1;
 808b0ae:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 808b0b0:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 808b0b2:	2201      	movs	r2, #1
 808b0b4:	4620      	mov	r0, r4
 808b0b6:	40d9      	lsrs	r1, r3
 808b0b8:	f7ff ffbc 	bl	808b034 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 808b0bc:	4620      	mov	r0, r4
 808b0be:	f7ff ff59 	bl	808af74 <_ZN8SPIClass6unlockEv>
}
 808b0c2:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_set_clock_divider(_spi, rate);
 808b0c4:	4629      	mov	r1, r5
 808b0c6:	7820      	ldrb	r0, [r4, #0]
 808b0c8:	f7ff fbe8 	bl	808a89c <hal_spi_set_clock_divider>
 808b0cc:	e7f6      	b.n	808b0bc <_ZN8SPIClass15setClockDividerEh+0x30>
 808b0ce:	bf00      	nop
 808b0d0:	080943f0 	.word	0x080943f0

0808b0d4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 808b0d4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 808b0d6:	7800      	ldrb	r0, [r0, #0]
 808b0d8:	f7ff fbe8 	bl	808a8ac <hal_spi_transfer>
}
 808b0dc:	b2c0      	uxtb	r0, r0
 808b0de:	bd08      	pop	{r3, pc}

0808b0e0 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 808b0e0:	b530      	push	{r4, r5, lr}
 808b0e2:	b087      	sub	sp, #28
 808b0e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808b0e6:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 808b0e8:	9500      	str	r5, [sp, #0]
 808b0ea:	7800      	ldrb	r0, [r0, #0]
 808b0ec:	f7ff fbfe 	bl	808a8ec <hal_spi_transfer_dma>
    if (user_callback == NULL)
 808b0f0:	b93d      	cbnz	r5, 808b102 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 808b0f2:	7820      	ldrb	r0, [r4, #0]
 808b0f4:	a902      	add	r1, sp, #8
 808b0f6:	f7ff fc01 	bl	808a8fc <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 808b0fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 808b0fe:	07db      	lsls	r3, r3, #31
 808b100:	d4f7      	bmi.n	808b0f2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
 808b102:	b007      	add	sp, #28
 808b104:	bd30      	pop	{r4, r5, pc}

0808b106 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 808b106:	b510      	push	{r4, lr}
 808b108:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808b10a:	6800      	ldr	r0, [r0, #0]
 808b10c:	b118      	cbz	r0, 808b116 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 808b10e:	f7ff fd5d 	bl	808abcc <free>
            wakeupSource_ = nullptr;
 808b112:	2300      	movs	r3, #0
 808b114:	6023      	str	r3, [r4, #0]
        }
    }
 808b116:	bd10      	pop	{r4, pc}

0808b118 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808b118:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 808b11a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808b11e:	460d      	mov	r5, r1
        error_ = result.error_;
 808b120:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 808b122:	460b      	mov	r3, r1
 808b124:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808b128:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 808b12a:	f8c0 2006 	str.w	r2, [r0, #6]
 808b12e:	889b      	ldrh	r3, [r3, #4]
 808b130:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 808b132:	f7ff ffe8 	bl	808b106 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 808b136:	682b      	ldr	r3, [r5, #0]
 808b138:	b113      	cbz	r3, 808b140 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 808b13a:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 808b13c:	2300      	movs	r3, #0
 808b13e:	602b      	str	r3, [r5, #0]
    }
 808b140:	4620      	mov	r0, r4
 808b142:	bd38      	pop	{r3, r4, r5, pc}

0808b144 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 808b144:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 808b148:	b510      	push	{r4, lr}
 808b14a:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 808b14c:	b933      	cbnz	r3, 808b15c <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 808b14e:	b932      	cbnz	r2, 808b15e <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 808b150:	f851 3f06 	ldr.w	r3, [r1, #6]!
 808b154:	6003      	str	r3, [r0, #0]
 808b156:	888b      	ldrh	r3, [r1, #4]
 808b158:	8083      	strh	r3, [r0, #4]
    }
 808b15a:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 808b15c:	b122      	cbz	r2, 808b168 <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 808b15e:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 808b160:	2c01      	cmp	r4, #1
 808b162:	d003      	beq.n	808b16c <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 808b164:	2c04      	cmp	r4, #4
 808b166:	d006      	beq.n	808b176 <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 808b168:	2204      	movs	r2, #4
 808b16a:	e005      	b.n	808b178 <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 808b16c:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 808b16e:	718c      	strb	r4, [r1, #6]
 808b170:	810b      	strh	r3, [r1, #8]
 808b172:	814a      	strh	r2, [r1, #10]
                    break;
 808b174:	e7ec      	b.n	808b150 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 808b176:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 808b178:	810b      	strh	r3, [r1, #8]
 808b17a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808b17e:	718a      	strb	r2, [r1, #6]
 808b180:	814b      	strh	r3, [r1, #10]
                    break;
 808b182:	e7e5      	b.n	808b150 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

0808b184 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 808b184:	b507      	push	{r0, r1, r2, lr}
 808b186:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 808b188:	2100      	movs	r1, #0
{
 808b18a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 808b18c:	9100      	str	r1, [sp, #0]
 808b18e:	2001      	movs	r0, #1
 808b190:	218c      	movs	r1, #140	; 0x8c
 808b192:	f7ff fc71 	bl	808aa78 <system_reset>
}
 808b196:	b003      	add	sp, #12
 808b198:	f85d fb04 	ldr.w	pc, [sp], #4

0808b19c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 808b19c:	4601      	mov	r1, r0
    reset(0, flags);
 808b19e:	2000      	movs	r0, #0
 808b1a0:	f7ff bff0 	b.w	808b184 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

0808b1a4 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 808b1a4:	2000      	movs	r0, #0
 808b1a6:	f7ff bff9 	b.w	808b19c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

0808b1aa <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 808b1aa:	b510      	push	{r4, lr}
 808b1ac:	2400      	movs	r4, #0
 808b1ae:	7004      	strb	r4, [r0, #0]
 808b1b0:	8044      	strh	r4, [r0, #2]
 808b1b2:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 808b1b6:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 808b1b8:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 808b1ba:	dd08      	ble.n	808b1ce <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 808b1bc:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 808b1be:	428b      	cmp	r3, r1
 808b1c0:	d904      	bls.n	808b1cc <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 808b1c2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 808b1c6:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 808b1c8:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 808b1ca:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 808b1cc:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 808b1ce:	d101      	bne.n	808b1d4 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 808b1d0:	2302      	movs	r3, #2
 808b1d2:	e7fa      	b.n	808b1ca <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 808b1d4:	8041      	strh	r1, [r0, #2]
 808b1d6:	e7f9      	b.n	808b1cc <_ZN11SleepResultC1EiPKtj+0x22>

0808b1d8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b1da:	460d      	mov	r5, r1
 808b1dc:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b1de:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808b1e0:	b08b      	sub	sp, #44	; 0x2c
 808b1e2:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b1e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808b1e6:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b1e8:	9301      	str	r3, [sp, #4]
 808b1ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808b1ec:	4631      	mov	r1, r6
 808b1ee:	9300      	str	r3, [sp, #0]
 808b1f0:	4628      	mov	r0, r5
 808b1f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808b1f4:	9702      	str	r7, [sp, #8]
 808b1f6:	f7ff fc35 	bl	808aa64 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 808b1fa:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b1fc:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 808b1fe:	462a      	mov	r2, r5
 808b200:	a805      	add	r0, sp, #20
 808b202:	f7ff ffd2 	bl	808b1aa <_ZN11SleepResultC1EiPKtj>
 808b206:	4d0f      	ldr	r5, [pc, #60]	; (808b244 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 808b208:	f89d 1014 	ldrb.w	r1, [sp, #20]
 808b20c:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 808b210:	f8bd 3018 	ldrh.w	r3, [sp, #24]
              compatResult_(r) {
 808b214:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 808b218:	4628      	mov	r0, r5
 808b21a:	a907      	add	r1, sp, #28
 808b21c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 808b220:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 808b224:	9707      	str	r7, [sp, #28]
 808b226:	f8ad 7020 	strh.w	r7, [sp, #32]
 808b22a:	f7ff ff75 	bl	808b118 <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 808b22e:	a807      	add	r0, sp, #28
 808b230:	f7ff ff69 	bl	808b106 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 808b234:	4620      	mov	r0, r4
 808b236:	4629      	mov	r1, r5
 808b238:	f7ff ff84 	bl	808b144 <_ZN17SystemSleepResult13toSleepResultEv>
}
 808b23c:	4620      	mov	r0, r4
 808b23e:	b00b      	add	sp, #44	; 0x2c
 808b240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808b242:	bf00      	nop
 808b244:	20000e74 	.word	0x20000e74

0808b248 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808b248:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 808b24a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 808b24c:	b510      	push	{r4, lr}
 808b24e:	4b08      	ldr	r3, [pc, #32]	; (808b270 <_GLOBAL__sub_I_System+0x28>)
 808b250:	4c08      	ldr	r4, [pc, #32]	; (808b274 <_GLOBAL__sub_I_System+0x2c>)
 808b252:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 808b254:	4b08      	ldr	r3, [pc, #32]	; (808b278 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 808b256:	6020      	str	r0, [r4, #0]
 808b258:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 808b25a:	71a0      	strb	r0, [r4, #6]
 808b25c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808b25e:	f7ff fbad 	bl	808a9bc <set_system_mode>
SystemClass System;
 808b262:	4620      	mov	r0, r4
 808b264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 808b268:	4a04      	ldr	r2, [pc, #16]	; (808b27c <_GLOBAL__sub_I_System+0x34>)
 808b26a:	4905      	ldr	r1, [pc, #20]	; (808b280 <_GLOBAL__sub_I_System+0x38>)
 808b26c:	f002 b8cc 	b.w	808d408 <__aeabi_atexit>
 808b270:	20000e80 	.word	0x20000e80
 808b274:	20000e74 	.word	0x20000e74
 808b278:	ffff0000 	.word	0xffff0000
 808b27c:	20000328 	.word	0x20000328
 808b280:	08080bfd 	.word	0x08080bfd

0808b284 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 808b284:	b510      	push	{r4, lr}
 808b286:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 808b288:	f004 fa1c 	bl	808f6c4 <strlen>
 808b28c:	1e43      	subs	r3, r0, #1
 808b28e:	4620      	mov	r0, r4
 808b290:	4423      	add	r3, r4
	while(i<j){
 808b292:	4283      	cmp	r3, r0
 808b294:	d906      	bls.n	808b2a4 <_Z11str_reversePc+0x20>
		c = *i;
 808b296:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 808b298:	7819      	ldrb	r1, [r3, #0]
 808b29a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 808b29e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 808b2a2:	e7f6      	b.n	808b292 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 808b2a4:	bd10      	pop	{r4, pc}

0808b2a6 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 808b2a6:	1e93      	subs	r3, r2, #2
 808b2a8:	2b22      	cmp	r3, #34	; 0x22
 808b2aa:	f04f 0300 	mov.w	r3, #0
{
 808b2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b2b2:	b08c      	sub	sp, #48	; 0x30
 808b2b4:	460d      	mov	r5, r1
 808b2b6:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 808b2b8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 808b2bc:	d926      	bls.n	808b30c <ltoa+0x66>

      if (10 == base && N < 0L)
 808b2be:	2800      	cmp	r0, #0
 808b2c0:	da29      	bge.n	808b316 <ltoa+0x70>
      {
            *head++ = '-';
 808b2c2:	462e      	mov	r6, r5
 808b2c4:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 808b2c6:	240a      	movs	r4, #10
            *head++ = '-';
 808b2c8:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 808b2cc:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 808b2ce:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 808b2d2:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 808b2d6:	4622      	mov	r2, r4
 808b2d8:	4601      	mov	r1, r0
 808b2da:	a801      	add	r0, sp, #4
 808b2dc:	f003 fbf8 	bl	808ead0 <ldiv>
 808b2e0:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 808b2e2:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 808b2e4:	2b09      	cmp	r3, #9
 808b2e6:	bfcc      	ite	gt
 808b2e8:	2237      	movgt	r2, #55	; 0x37
 808b2ea:	2230      	movle	r2, #48	; 0x30
 808b2ec:	4413      	add	r3, r2
 808b2ee:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 808b2f2:	f108 0801 	add.w	r8, r8, #1
 808b2f6:	2800      	cmp	r0, #0
 808b2f8:	d1ed      	bne.n	808b2d6 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 808b2fa:	4642      	mov	r2, r8
 808b2fc:	4630      	mov	r0, r6
 808b2fe:	1c79      	adds	r1, r7, #1
 808b300:	f003 fc08 	bl	808eb14 <memcpy>
      return str;
}
 808b304:	4628      	mov	r0, r5
 808b306:	b00c      	add	sp, #48	; 0x30
 808b308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 808b30c:	2a0a      	cmp	r2, #10
 808b30e:	d0d6      	beq.n	808b2be <ltoa+0x18>
      if (uarg)
 808b310:	b118      	cbz	r0, 808b31a <ltoa+0x74>
 808b312:	462e      	mov	r6, r5
 808b314:	e7db      	b.n	808b2ce <ltoa+0x28>
 808b316:	240a      	movs	r4, #10
 808b318:	e7fa      	b.n	808b310 <ltoa+0x6a>
      else  *tail-- = '0';
 808b31a:	2330      	movs	r3, #48	; 0x30
 808b31c:	462e      	mov	r6, r5
      int i = 2;
 808b31e:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 808b322:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 808b326:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 808b32a:	e7e6      	b.n	808b2fa <ltoa+0x54>

0808b32c <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 808b32c:	b570      	push	{r4, r5, r6, lr}
 808b32e:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 808b330:	1e91      	subs	r1, r2, #2
 808b332:	2922      	cmp	r1, #34	; 0x22
 808b334:	d822      	bhi.n	808b37c <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 808b336:	4625      	mov	r5, r4

	div_t result;
	while(a){
 808b338:	b168      	cbz	r0, 808b356 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 808b33a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 808b33e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 808b342:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808b344:	2809      	cmp	r0, #9
                *ptr += '0';
 808b346:	bf94      	ite	ls
 808b348:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 808b34a:	3157      	addhi	r1, #87	; 0x57
 808b34c:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 808b34e:	4630      	mov	r0, r6
 808b350:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 808b354:	e7f0      	b.n	808b338 <ultoa+0xc>
 808b356:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 808b358:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 808b35a:	4423      	add	r3, r4
 808b35c:	4293      	cmp	r3, r2
 808b35e:	d902      	bls.n	808b366 <ultoa+0x3a>
            *ptr++ = '0';
 808b360:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 808b364:	e7fa      	b.n	808b35c <ultoa+0x30>
 808b366:	1b5a      	subs	r2, r3, r5
 808b368:	42ab      	cmp	r3, r5
 808b36a:	bf38      	it	cc
 808b36c:	2200      	movcc	r2, #0

	*ptr = '\0';
 808b36e:	2300      	movs	r3, #0
	str_reverse(buffer);
 808b370:	4620      	mov	r0, r4
	*ptr = '\0';
 808b372:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 808b374:	f7ff ff86 	bl	808b284 <_Z11str_reversePc>
	return buffer;
 808b378:	4620      	mov	r0, r4
}
 808b37a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 808b37c:	2000      	movs	r0, #0
 808b37e:	e7fc      	b.n	808b37a <ultoa+0x4e>

0808b380 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808b380:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 808b382:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808b384:	460c      	mov	r4, r1
 808b386:	4615      	mov	r5, r2
	if(a<0){
 808b388:	da0d      	bge.n	808b3a6 <itoa+0x26>
		*buffer = '-';
 808b38a:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808b38c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808b390:	bf0c      	ite	eq
 808b392:	4618      	moveq	r0, r3
 808b394:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 808b396:	2301      	movs	r3, #1
		*buffer = '-';
 808b398:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 808b39a:	462a      	mov	r2, r5
 808b39c:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 808b39e:	f7ff ffc5 	bl	808b32c <ultoa>
	}
	return buffer;
}
 808b3a2:	4620      	mov	r0, r4
 808b3a4:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 808b3a6:	2301      	movs	r3, #1
 808b3a8:	e7f9      	b.n	808b39e <itoa+0x1e>
	...

0808b3ac <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 808b3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b3b0:	4607      	mov	r7, r0
 808b3b2:	460d      	mov	r5, r1
 808b3b4:	4616      	mov	r6, r2
 808b3b6:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 808b3b8:	2200      	movs	r2, #0
 808b3ba:	2300      	movs	r3, #0
 808b3bc:	4638      	mov	r0, r7
 808b3be:	4629      	mov	r1, r5
 808b3c0:	f002 fc62 	bl	808dc88 <__aeabi_dcmplt>
 808b3c4:	b120      	cbz	r0, 808b3d0 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 808b3c6:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 808b3c8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 808b3cc:	f804 3b01 	strb.w	r3, [r4], #1
 808b3d0:	2300      	movs	r3, #0
    }
    long scale = 1;
 808b3d2:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 808b3d6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 808b3d8:	b2d9      	uxtb	r1, r3
 808b3da:	428e      	cmp	r6, r1
 808b3dc:	d903      	bls.n	808b3e6 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 808b3de:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 808b3e2:	3301      	adds	r3, #1
 808b3e4:	e7f8      	b.n	808b3d8 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 808b3e6:	4650      	mov	r0, sl
 808b3e8:	f002 f972 	bl	808d6d0 <__aeabi_i2d>
 808b3ec:	463a      	mov	r2, r7
 808b3ee:	462b      	mov	r3, r5
 808b3f0:	f002 f9d8 	bl	808d7a4 <__aeabi_dmul>
 808b3f4:	4680      	mov	r8, r0
 808b3f6:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 808b3f8:	f003 f8b2 	bl	808e560 <__aeabi_d2ulz>
 808b3fc:	4605      	mov	r5, r0
 808b3fe:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 808b400:	f002 f99a 	bl	808d738 <__aeabi_ul2d>
 808b404:	4602      	mov	r2, r0
 808b406:	460b      	mov	r3, r1
 808b408:	4640      	mov	r0, r8
 808b40a:	4649      	mov	r1, r9
 808b40c:	f002 f812 	bl	808d434 <__aeabi_dsub>
 808b410:	2200      	movs	r2, #0
 808b412:	4b12      	ldr	r3, [pc, #72]	; (808b45c <_Z4dtoadhPc+0xb0>)
 808b414:	f002 fc4c 	bl	808dcb0 <__aeabi_dcmpge>
 808b418:	b110      	cbz	r0, 808b420 <_Z4dtoadhPc+0x74>
        fixed++;
 808b41a:	3501      	adds	r5, #1
 808b41c:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 808b420:	4652      	mov	r2, sl
 808b422:	4628      	mov	r0, r5
 808b424:	4639      	mov	r1, r7
 808b426:	17d3      	asrs	r3, r2, #31
 808b428:	f003 f84e 	bl	808e4c8 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 808b42c:	2301      	movs	r3, #1
 808b42e:	4615      	mov	r5, r2
 808b430:	4621      	mov	r1, r4
 808b432:	220a      	movs	r2, #10
 808b434:	f7ff ff7a 	bl	808b32c <ultoa>
    if (prec) {
 808b438:	b16e      	cbz	r6, 808b456 <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 808b43a:	4620      	mov	r0, r4
 808b43c:	f004 f942 	bl	808f6c4 <strlen>
        *sout++ = '.';
 808b440:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 808b442:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 808b444:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 808b446:	220a      	movs	r2, #10
 808b448:	4633      	mov	r3, r6
 808b44a:	4628      	mov	r0, r5
    }
}
 808b44c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 808b450:	3101      	adds	r1, #1
 808b452:	f7ff bf6b 	b.w	808b32c <ultoa>
}
 808b456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b45a:	bf00      	nop
 808b45c:	3fe00000 	.word	0x3fe00000

0808b460 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808b460:	b510      	push	{r4, lr}
 808b462:	4604      	mov	r4, r0
{
	free(buffer);
 808b464:	6800      	ldr	r0, [r0, #0]
 808b466:	f7ff fbb1 	bl	808abcc <free>
}
 808b46a:	4620      	mov	r0, r4
 808b46c:	bd10      	pop	{r4, pc}

0808b46e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808b46e:	b510      	push	{r4, lr}
 808b470:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808b472:	6800      	ldr	r0, [r0, #0]
 808b474:	b108      	cbz	r0, 808b47a <_ZN6String10invalidateEv+0xc>
 808b476:	f7ff fba9 	bl	808abcc <free>
	buffer = NULL;
 808b47a:	2300      	movs	r3, #0
	capacity = len = 0;
 808b47c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 808b480:	6023      	str	r3, [r4, #0]
}
 808b482:	bd10      	pop	{r4, pc}

0808b484 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808b484:	b538      	push	{r3, r4, r5, lr}
 808b486:	4604      	mov	r4, r0
 808b488:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808b48a:	6800      	ldr	r0, [r0, #0]
 808b48c:	3101      	adds	r1, #1
 808b48e:	f7ff fba5 	bl	808abdc <realloc>
	if (newbuffer) {
 808b492:	b110      	cbz	r0, 808b49a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808b494:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 808b498:	2001      	movs	r0, #1
	}
	return 0;
}
 808b49a:	bd38      	pop	{r3, r4, r5, pc}

0808b49c <_ZN6String7reserveEj>:
{
 808b49c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808b49e:	6803      	ldr	r3, [r0, #0]
{
 808b4a0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808b4a2:	b123      	cbz	r3, 808b4ae <_ZN6String7reserveEj+0x12>
 808b4a4:	6843      	ldr	r3, [r0, #4]
 808b4a6:	428b      	cmp	r3, r1
 808b4a8:	d301      	bcc.n	808b4ae <_ZN6String7reserveEj+0x12>
 808b4aa:	2001      	movs	r0, #1
}
 808b4ac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 808b4ae:	4620      	mov	r0, r4
 808b4b0:	f7ff ffe8 	bl	808b484 <_ZN6String12changeBufferEj>
 808b4b4:	2800      	cmp	r0, #0
 808b4b6:	d0f9      	beq.n	808b4ac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 808b4b8:	68a3      	ldr	r3, [r4, #8]
 808b4ba:	2b00      	cmp	r3, #0
 808b4bc:	d1f5      	bne.n	808b4aa <_ZN6String7reserveEj+0xe>
 808b4be:	6822      	ldr	r2, [r4, #0]
 808b4c0:	7013      	strb	r3, [r2, #0]
 808b4c2:	e7f2      	b.n	808b4aa <_ZN6String7reserveEj+0xe>

0808b4c4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808b4c4:	b570      	push	{r4, r5, r6, lr}
 808b4c6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808b4c8:	4611      	mov	r1, r2
{
 808b4ca:	4604      	mov	r4, r0
 808b4cc:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808b4ce:	f7ff ffe5 	bl	808b49c <_ZN6String7reserveEj>
 808b4d2:	b920      	cbnz	r0, 808b4de <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 808b4d4:	4620      	mov	r0, r4
 808b4d6:	f7ff ffca 	bl	808b46e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 808b4da:	4620      	mov	r0, r4
 808b4dc:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 808b4de:	462a      	mov	r2, r5
 808b4e0:	4631      	mov	r1, r6
 808b4e2:	6820      	ldr	r0, [r4, #0]
	len = length;
 808b4e4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808b4e6:	f003 fb15 	bl	808eb14 <memcpy>
	buffer[len] = 0;
 808b4ea:	2100      	movs	r1, #0
 808b4ec:	6822      	ldr	r2, [r4, #0]
 808b4ee:	68a3      	ldr	r3, [r4, #8]
 808b4f0:	54d1      	strb	r1, [r2, r3]
	return *this;
 808b4f2:	e7f2      	b.n	808b4da <_ZN6String4copyEPKcj+0x16>

0808b4f4 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 808b4f4:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 808b4f6:	2300      	movs	r3, #0
String::String(const char *cstr)
 808b4f8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 808b4fa:	460d      	mov	r5, r1
	capacity = 0;
 808b4fc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b500:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b502:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 808b504:	b139      	cbz	r1, 808b516 <_ZN6StringC1EPKc+0x22>
 808b506:	4608      	mov	r0, r1
 808b508:	f004 f8dc 	bl	808f6c4 <strlen>
 808b50c:	4629      	mov	r1, r5
 808b50e:	4602      	mov	r2, r0
 808b510:	4620      	mov	r0, r4
 808b512:	f7ff ffd7 	bl	808b4c4 <_ZN6String4copyEPKcj>
}
 808b516:	4620      	mov	r0, r4
 808b518:	bd38      	pop	{r3, r4, r5, pc}

0808b51a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808b51a:	b538      	push	{r3, r4, r5, lr}
 808b51c:	4605      	mov	r5, r0
	if (buffer) {
 808b51e:	6800      	ldr	r0, [r0, #0]
{
 808b520:	460c      	mov	r4, r1
	if (buffer) {
 808b522:	b168      	cbz	r0, 808b540 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 808b524:	686a      	ldr	r2, [r5, #4]
 808b526:	688b      	ldr	r3, [r1, #8]
 808b528:	429a      	cmp	r2, r3
 808b52a:	d307      	bcc.n	808b53c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 808b52c:	6809      	ldr	r1, [r1, #0]
 808b52e:	f003 fb42 	bl	808ebb6 <strcpy>
			len = rhs.len;
 808b532:	68a3      	ldr	r3, [r4, #8]
 808b534:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 808b536:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 808b538:	60a3      	str	r3, [r4, #8]
}
 808b53a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 808b53c:	f7ff fb46 	bl	808abcc <free>
	buffer = rhs.buffer;
 808b540:	6823      	ldr	r3, [r4, #0]
 808b542:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 808b544:	6863      	ldr	r3, [r4, #4]
 808b546:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 808b548:	68a3      	ldr	r3, [r4, #8]
 808b54a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808b54c:	2300      	movs	r3, #0
	rhs.capacity = 0;
 808b54e:	e9c4 3300 	strd	r3, r3, [r4]
 808b552:	e7f1      	b.n	808b538 <_ZN6String4moveERS_+0x1e>

0808b554 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808b554:	4288      	cmp	r0, r1
{
 808b556:	b510      	push	{r4, lr}
 808b558:	460b      	mov	r3, r1
 808b55a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808b55c:	d004      	beq.n	808b568 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808b55e:	6809      	ldr	r1, [r1, #0]
 808b560:	b121      	cbz	r1, 808b56c <_ZN6StringaSERKS_+0x18>
 808b562:	689a      	ldr	r2, [r3, #8]
 808b564:	f7ff ffae 	bl	808b4c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 808b568:	4620      	mov	r0, r4
 808b56a:	bd10      	pop	{r4, pc}
	else invalidate();
 808b56c:	f7ff ff7f 	bl	808b46e <_ZN6String10invalidateEv>
 808b570:	e7fa      	b.n	808b568 <_ZN6StringaSERKS_+0x14>

0808b572 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 808b572:	2300      	movs	r3, #0
String::String(const String &value)
 808b574:	b510      	push	{r4, lr}
 808b576:	4604      	mov	r4, r0
	capacity = 0;
 808b578:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b57c:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b57e:	7303      	strb	r3, [r0, #12]
	*this = value;
 808b580:	f7ff ffe8 	bl	808b554 <_ZN6StringaSERKS_>
}
 808b584:	4620      	mov	r0, r4
 808b586:	bd10      	pop	{r4, pc}

0808b588 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 808b588:	4288      	cmp	r0, r1
{
 808b58a:	b510      	push	{r4, lr}
 808b58c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 808b58e:	d001      	beq.n	808b594 <_ZN6StringaSEOS_+0xc>
 808b590:	f7ff ffc3 	bl	808b51a <_ZN6String4moveERS_>
	return *this;
}
 808b594:	4620      	mov	r0, r4
 808b596:	bd10      	pop	{r4, pc}

0808b598 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808b598:	b538      	push	{r3, r4, r5, lr}
 808b59a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808b59c:	460c      	mov	r4, r1
 808b59e:	b149      	cbz	r1, 808b5b4 <_ZN6StringaSEPKc+0x1c>
 808b5a0:	4608      	mov	r0, r1
 808b5a2:	f004 f88f 	bl	808f6c4 <strlen>
 808b5a6:	4621      	mov	r1, r4
 808b5a8:	4602      	mov	r2, r0
 808b5aa:	4628      	mov	r0, r5
 808b5ac:	f7ff ff8a 	bl	808b4c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 808b5b0:	4628      	mov	r0, r5
 808b5b2:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 808b5b4:	f7ff ff5b 	bl	808b46e <_ZN6String10invalidateEv>
 808b5b8:	e7fa      	b.n	808b5b0 <_ZN6StringaSEPKc+0x18>

0808b5ba <_ZN6StringC1Ec>:
	buffer = NULL;
 808b5ba:	2300      	movs	r3, #0
String::String(char c)
 808b5bc:	b513      	push	{r0, r1, r4, lr}
 808b5be:	4604      	mov	r4, r0
	buf[0] = c;
 808b5c0:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
 808b5c4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b5c8:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b5ca:	7303      	strb	r3, [r0, #12]
	*this = buf;
 808b5cc:	a901      	add	r1, sp, #4
	buf[1] = 0;
 808b5ce:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 808b5d2:	f7ff ffe1 	bl	808b598 <_ZN6StringaSEPKc>
}
 808b5d6:	4620      	mov	r0, r4
 808b5d8:	b002      	add	sp, #8
 808b5da:	bd10      	pop	{r4, pc}

0808b5dc <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 808b5dc:	b510      	push	{r4, lr}
	buffer = NULL;
 808b5de:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 808b5e0:	4604      	mov	r4, r0
 808b5e2:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 808b5e4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808b5e8:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b5ea:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 808b5ec:	4608      	mov	r0, r1
	itoa(value, buf, base);
 808b5ee:	a901      	add	r1, sp, #4
 808b5f0:	f7ff fec6 	bl	808b380 <itoa>
	*this = buf;
 808b5f4:	4620      	mov	r0, r4
 808b5f6:	a901      	add	r1, sp, #4
 808b5f8:	f7ff ffce 	bl	808b598 <_ZN6StringaSEPKc>
}
 808b5fc:	4620      	mov	r0, r4
 808b5fe:	b00a      	add	sp, #40	; 0x28
 808b600:	bd10      	pop	{r4, pc}

0808b602 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
 808b602:	b510      	push	{r4, lr}
	buffer = NULL;
 808b604:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
 808b606:	4604      	mov	r4, r0
 808b608:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 808b60a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808b60e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b610:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
 808b612:	4608      	mov	r0, r1
	ltoa(value, buf, base);
 808b614:	a901      	add	r1, sp, #4
 808b616:	f7ff fe46 	bl	808b2a6 <ltoa>
	*this = buf;
 808b61a:	4620      	mov	r0, r4
 808b61c:	a901      	add	r1, sp, #4
 808b61e:	f7ff ffbb 	bl	808b598 <_ZN6StringaSEPKc>
}
 808b622:	4620      	mov	r0, r4
 808b624:	b00a      	add	sp, #40	; 0x28
 808b626:	bd10      	pop	{r4, pc}

0808b628 <_ZN6StringC1Efi>:
	buffer = NULL;
 808b628:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 808b62a:	b530      	push	{r4, r5, lr}
 808b62c:	4604      	mov	r4, r0
 808b62e:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 808b630:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b634:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b636:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 808b638:	b2d5      	uxtb	r5, r2
 808b63a:	4608      	mov	r0, r1
 808b63c:	f002 f85a 	bl	808d6f4 <__aeabi_f2d>
 808b640:	462a      	mov	r2, r5
 808b642:	ab01      	add	r3, sp, #4
 808b644:	f7ff feb2 	bl	808b3ac <_Z4dtoadhPc>
        *this = buf;
 808b648:	4620      	mov	r0, r4
 808b64a:	a901      	add	r1, sp, #4
 808b64c:	f7ff ffa4 	bl	808b598 <_ZN6StringaSEPKc>
}
 808b650:	4620      	mov	r0, r4
 808b652:	b00b      	add	sp, #44	; 0x2c
 808b654:	bd30      	pop	{r4, r5, pc}

0808b656 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
 808b656:	b510      	push	{r4, lr}
 808b658:	4619      	mov	r1, r3
 808b65a:	4604      	mov	r4, r0
	buffer = NULL;
 808b65c:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
 808b65e:	b08a      	sub	sp, #40	; 0x28
 808b660:	4610      	mov	r0, r2
	capacity = 0;
 808b662:	e9c4 3300 	strd	r3, r3, [r4]
	dtoa(value, decimalPlaces, buf);
 808b666:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	len = 0;
 808b66a:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b66c:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
 808b66e:	ab01      	add	r3, sp, #4
 808b670:	f7ff fe9c 	bl	808b3ac <_Z4dtoadhPc>
        *this = buf;
 808b674:	4620      	mov	r0, r4
 808b676:	a901      	add	r1, sp, #4
 808b678:	f7ff ff8e 	bl	808b598 <_ZN6StringaSEPKc>
}
 808b67c:	4620      	mov	r0, r4
 808b67e:	b00a      	add	sp, #40	; 0x28
 808b680:	bd10      	pop	{r4, pc}

0808b682 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808b682:	b570      	push	{r4, r5, r6, lr}
 808b684:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808b686:	460e      	mov	r6, r1
 808b688:	b909      	cbnz	r1, 808b68e <_ZN6String6concatEPKcj+0xc>
 808b68a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 808b68c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 808b68e:	b16a      	cbz	r2, 808b6ac <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 808b690:	6884      	ldr	r4, [r0, #8]
 808b692:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 808b694:	4621      	mov	r1, r4
 808b696:	f7ff ff01 	bl	808b49c <_ZN6String7reserveEj>
 808b69a:	2800      	cmp	r0, #0
 808b69c:	d0f5      	beq.n	808b68a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 808b69e:	6828      	ldr	r0, [r5, #0]
 808b6a0:	68ab      	ldr	r3, [r5, #8]
 808b6a2:	4631      	mov	r1, r6
 808b6a4:	4418      	add	r0, r3
 808b6a6:	f003 fa86 	bl	808ebb6 <strcpy>
	len = newlen;
 808b6aa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 808b6ac:	2001      	movs	r0, #1
 808b6ae:	e7ed      	b.n	808b68c <_ZN6String6concatEPKcj+0xa>

0808b6b0 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 808b6b0:	688a      	ldr	r2, [r1, #8]
 808b6b2:	6809      	ldr	r1, [r1, #0]
 808b6b4:	f7ff bfe5 	b.w	808b682 <_ZN6String6concatEPKcj>

0808b6b8 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 808b6b8:	b538      	push	{r3, r4, r5, lr}
 808b6ba:	4605      	mov	r5, r0
	if (!cstr) return 0;
 808b6bc:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 808b6be:	4608      	mov	r0, r1
	if (!cstr) return 0;
 808b6c0:	b141      	cbz	r1, 808b6d4 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 808b6c2:	f003 ffff 	bl	808f6c4 <strlen>
 808b6c6:	4621      	mov	r1, r4
 808b6c8:	4602      	mov	r2, r0
 808b6ca:	4628      	mov	r0, r5
}
 808b6cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 808b6d0:	f7ff bfd7 	b.w	808b682 <_ZN6String6concatEPKcj>
}
 808b6d4:	bd38      	pop	{r3, r4, r5, pc}

0808b6d6 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b6d6:	2300      	movs	r3, #0
{
 808b6d8:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 808b6da:	2201      	movs	r2, #1
	buf[0] = c;
 808b6dc:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 808b6e0:	a901      	add	r1, sp, #4
	buf[1] = 0;
 808b6e2:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 808b6e6:	f7ff ffcc 	bl	808b682 <_ZN6String6concatEPKcj>
}
 808b6ea:	b003      	add	sp, #12
 808b6ec:	f85d fb04 	ldr.w	pc, [sp], #4

0808b6f0 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 808b6f0:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 808b6f2:	220a      	movs	r2, #10
{
 808b6f4:	4604      	mov	r4, r0
 808b6f6:	4608      	mov	r0, r1
	itoa(num, buf, 10);
 808b6f8:	4669      	mov	r1, sp
 808b6fa:	f7ff fe41 	bl	808b380 <itoa>
	return concat(buf, strlen(buf));
 808b6fe:	4668      	mov	r0, sp
 808b700:	f003 ffe0 	bl	808f6c4 <strlen>
 808b704:	4669      	mov	r1, sp
 808b706:	4602      	mov	r2, r0
 808b708:	4620      	mov	r0, r4
 808b70a:	f7ff ffba 	bl	808b682 <_ZN6String6concatEPKcj>
}
 808b70e:	b002      	add	sp, #8
 808b710:	bd10      	pop	{r4, pc}

0808b712 <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
 808b712:	b510      	push	{r4, lr}
 808b714:	4604      	mov	r4, r0
 808b716:	b086      	sub	sp, #24
	char buf[20];
	dtoa(num, 6, buf);
 808b718:	4608      	mov	r0, r1
 808b71a:	f001 ffeb 	bl	808d6f4 <__aeabi_f2d>
 808b71e:	ab01      	add	r3, sp, #4
 808b720:	2206      	movs	r2, #6
 808b722:	f7ff fe43 	bl	808b3ac <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
 808b726:	a801      	add	r0, sp, #4
 808b728:	f003 ffcc 	bl	808f6c4 <strlen>
 808b72c:	a901      	add	r1, sp, #4
 808b72e:	4602      	mov	r2, r0
 808b730:	4620      	mov	r0, r4
 808b732:	f7ff ffa6 	bl	808b682 <_ZN6String6concatEPKcj>
}
 808b736:	b006      	add	sp, #24
 808b738:	bd10      	pop	{r4, pc}

0808b73a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808b73a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b73c:	688a      	ldr	r2, [r1, #8]
 808b73e:	6809      	ldr	r1, [r1, #0]
{
 808b740:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b742:	f7ff ff9e 	bl	808b682 <_ZN6String6concatEPKcj>
 808b746:	b910      	cbnz	r0, 808b74e <_ZplRK15StringSumHelperRK6String+0x14>
 808b748:	4620      	mov	r0, r4
 808b74a:	f7ff fe90 	bl	808b46e <_ZN6String10invalidateEv>
	return a;
}
 808b74e:	4620      	mov	r0, r4
 808b750:	bd10      	pop	{r4, pc}

0808b752 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 808b752:	b538      	push	{r3, r4, r5, lr}
 808b754:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808b756:	460d      	mov	r5, r1
 808b758:	b921      	cbnz	r1, 808b764 <_ZplRK15StringSumHelperPKc+0x12>
 808b75a:	4620      	mov	r0, r4
 808b75c:	f7ff fe87 	bl	808b46e <_ZN6String10invalidateEv>
	return a;
}
 808b760:	4620      	mov	r0, r4
 808b762:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808b764:	4608      	mov	r0, r1
 808b766:	f003 ffad 	bl	808f6c4 <strlen>
 808b76a:	4629      	mov	r1, r5
 808b76c:	4602      	mov	r2, r0
 808b76e:	4620      	mov	r0, r4
 808b770:	f7ff ff87 	bl	808b682 <_ZN6String6concatEPKcj>
 808b774:	2800      	cmp	r0, #0
 808b776:	d0f0      	beq.n	808b75a <_ZplRK15StringSumHelperPKc+0x8>
 808b778:	e7f2      	b.n	808b760 <_ZplRK15StringSumHelperPKc+0xe>

0808b77a <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
 808b77a:	b510      	push	{r4, lr}
 808b77c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b77e:	f7ff ffb7 	bl	808b6f0 <_ZN6String6concatEi>
 808b782:	b910      	cbnz	r0, 808b78a <_ZplRK15StringSumHelperi+0x10>
 808b784:	4620      	mov	r0, r4
 808b786:	f7ff fe72 	bl	808b46e <_ZN6String10invalidateEv>
	return a;
}
 808b78a:	4620      	mov	r0, r4
 808b78c:	bd10      	pop	{r4, pc}

0808b78e <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
 808b78e:	b510      	push	{r4, lr}
 808b790:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b792:	f7ff ffbe 	bl	808b712 <_ZN6String6concatEf>
 808b796:	b910      	cbnz	r0, 808b79e <_ZplRK15StringSumHelperf+0x10>
 808b798:	4620      	mov	r0, r4
 808b79a:	f7ff fe68 	bl	808b46e <_ZN6String10invalidateEv>
	return a;
}
 808b79e:	4620      	mov	r0, r4
 808b7a0:	bd10      	pop	{r4, pc}

0808b7a2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808b7a2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b7a4:	6882      	ldr	r2, [r0, #8]
 808b7a6:	b93a      	cbnz	r2, 808b7b8 <_ZNK6String6equalsEPKc+0x16>
 808b7a8:	b121      	cbz	r1, 808b7b4 <_ZNK6String6equalsEPKc+0x12>
 808b7aa:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 808b7ac:	fab0 f080 	clz	r0, r0
 808b7b0:	0940      	lsrs	r0, r0, #5
 808b7b2:	e000      	b.n	808b7b6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b7b4:	2001      	movs	r0, #1
}
 808b7b6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808b7b8:	6800      	ldr	r0, [r0, #0]
 808b7ba:	b909      	cbnz	r1, 808b7c0 <_ZNK6String6equalsEPKc+0x1e>
 808b7bc:	7800      	ldrb	r0, [r0, #0]
 808b7be:	e7f5      	b.n	808b7ac <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 808b7c0:	f003 f9ef 	bl	808eba2 <strcmp>
 808b7c4:	e7f2      	b.n	808b7ac <_ZNK6String6equalsEPKc+0xa>

0808b7c6 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 808b7c6:	4613      	mov	r3, r2
 808b7c8:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b7ca:	688a      	ldr	r2, [r1, #8]
 808b7cc:	6884      	ldr	r4, [r0, #8]
 808b7ce:	1aa4      	subs	r4, r4, r2
 808b7d0:	429c      	cmp	r4, r3
 808b7d2:	d30a      	bcc.n	808b7ea <_ZNK6String10startsWithERKS_j+0x24>
 808b7d4:	6800      	ldr	r0, [r0, #0]
 808b7d6:	b138      	cbz	r0, 808b7e8 <_ZNK6String10startsWithERKS_j+0x22>
 808b7d8:	6809      	ldr	r1, [r1, #0]
 808b7da:	b141      	cbz	r1, 808b7ee <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 808b7dc:	4418      	add	r0, r3
 808b7de:	f003 ff79 	bl	808f6d4 <strncmp>
 808b7e2:	fab0 f080 	clz	r0, r0
 808b7e6:	0940      	lsrs	r0, r0, #5
}
 808b7e8:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b7ea:	2000      	movs	r0, #0
 808b7ec:	e7fc      	b.n	808b7e8 <_ZNK6String10startsWithERKS_j+0x22>
 808b7ee:	4608      	mov	r0, r1
 808b7f0:	e7fa      	b.n	808b7e8 <_ZNK6String10startsWithERKS_j+0x22>

0808b7f2 <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 808b7f2:	6882      	ldr	r2, [r0, #8]
 808b7f4:	688b      	ldr	r3, [r1, #8]
 808b7f6:	429a      	cmp	r2, r3
 808b7f8:	d302      	bcc.n	808b800 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 808b7fa:	2200      	movs	r2, #0
 808b7fc:	f7ff bfe3 	b.w	808b7c6 <_ZNK6String10startsWithERKS_j>
}
 808b800:	2000      	movs	r0, #0
 808b802:	4770      	bx	lr

0808b804 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808b804:	6883      	ldr	r3, [r0, #8]
 808b806:	428b      	cmp	r3, r1
 808b808:	d903      	bls.n	808b812 <_ZNK6StringixEj+0xe>
 808b80a:	6800      	ldr	r0, [r0, #0]
 808b80c:	b110      	cbz	r0, 808b814 <_ZNK6StringixEj+0x10>
	return buffer[index];
 808b80e:	5c40      	ldrb	r0, [r0, r1]
 808b810:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 808b812:	2000      	movs	r0, #0
}
 808b814:	4770      	bx	lr

0808b816 <_ZNK6String6charAtEj>:
	return operator[](loc);
 808b816:	f7ff bff5 	b.w	808b804 <_ZNK6StringixEj>

0808b81a <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 808b81a:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 808b81c:	6883      	ldr	r3, [r0, #8]
 808b81e:	4293      	cmp	r3, r2
 808b820:	d906      	bls.n	808b830 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 808b822:	6804      	ldr	r4, [r0, #0]
 808b824:	18a0      	adds	r0, r4, r2
 808b826:	f003 f9af 	bl	808eb88 <strchr>
	if (temp == NULL) return -1;
 808b82a:	b108      	cbz	r0, 808b830 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 808b82c:	1b00      	subs	r0, r0, r4
}
 808b82e:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 808b830:	f04f 30ff 	mov.w	r0, #4294967295
 808b834:	e7fb      	b.n	808b82e <_ZNK6String7indexOfEcj+0x14>
	...

0808b838 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b83a:	461d      	mov	r5, r3
	if (left > right) {
 808b83c:	429a      	cmp	r2, r3
 808b83e:	bf88      	it	hi
 808b840:	4613      	movhi	r3, r2
{
 808b842:	460f      	mov	r7, r1
 808b844:	4614      	mov	r4, r2
	if (left > right) {
 808b846:	bf88      	it	hi
 808b848:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808b84a:	490b      	ldr	r1, [pc, #44]	; (808b878 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 808b84c:	bf88      	it	hi
 808b84e:	461d      	movhi	r5, r3
{
 808b850:	4606      	mov	r6, r0
	String out;
 808b852:	f7ff fe4f 	bl	808b4f4 <_ZN6StringC1EPKc>
	if (left > len) return out;
 808b856:	68ba      	ldr	r2, [r7, #8]
 808b858:	42a2      	cmp	r2, r4
 808b85a:	d30a      	bcc.n	808b872 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 808b85c:	6839      	ldr	r1, [r7, #0]
 808b85e:	42aa      	cmp	r2, r5
 808b860:	bf94      	ite	ls
 808b862:	ebc4 0202 	rsbls	r2, r4, r2
 808b866:	ebc4 0205 	rsbhi	r2, r4, r5
 808b86a:	4630      	mov	r0, r6
 808b86c:	4421      	add	r1, r4
 808b86e:	f7ff fe29 	bl	808b4c4 <_ZN6String4copyEPKcj>
	return out;
}
 808b872:	4630      	mov	r0, r6
 808b874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808b876:	bf00      	nop
 808b878:	080943b2 	.word	0x080943b2

0808b87c <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 808b87c:	6800      	ldr	r0, [r0, #0]
 808b87e:	b108      	cbz	r0, 808b884 <_ZNK6String5toIntEv+0x8>
 808b880:	f003 b81d 	b.w	808e8be <atol>
	return 0;
}
 808b884:	4770      	bx	lr

0808b886 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808b886:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808b888:	6800      	ldr	r0, [r0, #0]
 808b88a:	b120      	cbz	r0, 808b896 <_ZNK6String7toFloatEv+0x10>
 808b88c:	f003 f810 	bl	808e8b0 <atof>
 808b890:	f002 fa80 	bl	808dd94 <__aeabi_d2f>
	return 0;
}
 808b894:	bd08      	pop	{r3, pc}
	return 0;
 808b896:	2000      	movs	r0, #0
 808b898:	e7fc      	b.n	808b894 <_ZNK6String7toFloatEv+0xe>
	...

0808b89c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 808b89c:	b40e      	push	{r1, r2, r3}
 808b89e:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 808b8a0:	ad09      	add	r5, sp, #36	; 0x24
 808b8a2:	f855 7b04 	ldr.w	r7, [r5], #4
 808b8a6:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808b8a8:	462b      	mov	r3, r5
 808b8aa:	463a      	mov	r2, r7
 808b8ac:	2105      	movs	r1, #5
 808b8ae:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 808b8b0:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808b8b2:	f7ff f9cb 	bl	808ac4c <vsnprintf>
 808b8b6:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 808b8b8:	490b      	ldr	r1, [pc, #44]	; (808b8e8 <_ZN6String6formatEPKcz+0x4c>)
 808b8ba:	4620      	mov	r0, r4
 808b8bc:	f7ff fe1a 	bl	808b4f4 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 808b8c0:	4631      	mov	r1, r6
 808b8c2:	4620      	mov	r0, r4
 808b8c4:	f7ff fdea 	bl	808b49c <_ZN6String7reserveEj>
    if (result.buffer) {
 808b8c8:	6820      	ldr	r0, [r4, #0]
 808b8ca:	b130      	cbz	r0, 808b8da <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808b8cc:	462b      	mov	r3, r5
 808b8ce:	463a      	mov	r2, r7
 808b8d0:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 808b8d2:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808b8d4:	f7ff f9ba 	bl	808ac4c <vsnprintf>
        va_end(marker);
        result.len = n;
 808b8d8:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 808b8da:	4620      	mov	r0, r4
 808b8dc:	b004      	add	sp, #16
 808b8de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 808b8e2:	b003      	add	sp, #12
 808b8e4:	4770      	bx	lr
 808b8e6:	bf00      	nop
 808b8e8:	080943b2 	.word	0x080943b2

0808b8ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808b8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b8ee:	4606      	mov	r6, r0
 808b8f0:	460d      	mov	r5, r1
  size_t n = 0;
 808b8f2:	2400      	movs	r4, #0
 808b8f4:	188f      	adds	r7, r1, r2
  while (size--) {
 808b8f6:	42bd      	cmp	r5, r7
 808b8f8:	d00c      	beq.n	808b914 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808b8fa:	6833      	ldr	r3, [r6, #0]
 808b8fc:	4630      	mov	r0, r6
 808b8fe:	689b      	ldr	r3, [r3, #8]
 808b900:	f815 1b01 	ldrb.w	r1, [r5], #1
 808b904:	4798      	blx	r3
     if (chunk>=0)
 808b906:	1e03      	subs	r3, r0, #0
 808b908:	db01      	blt.n	808b90e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808b90a:	441c      	add	r4, r3
  while (size--) {
 808b90c:	e7f3      	b.n	808b8f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808b90e:	2c00      	cmp	r4, #0
 808b910:	bf08      	it	eq
 808b912:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 808b914:	4620      	mov	r0, r4
 808b916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b918 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 808b918:	b508      	push	{r3, lr}
  return write(str);
 808b91a:	f7fd f967 	bl	8088bec <_ZN5Print5writeEPKc>
}
 808b91e:	bd08      	pop	{r3, pc}

0808b920 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 808b920:	6803      	ldr	r3, [r0, #0]
 808b922:	689b      	ldr	r3, [r3, #8]
 808b924:	4718      	bx	r3

0808b926 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808b926:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808b928:	210d      	movs	r1, #13
{
 808b92a:	4605      	mov	r5, r0
  size_t n = print('\r');
 808b92c:	f7ff fff8 	bl	808b920 <_ZN5Print5printEc>
  n += print('\n');
 808b930:	210a      	movs	r1, #10
  size_t n = print('\r');
 808b932:	4604      	mov	r4, r0
  n += print('\n');
 808b934:	4628      	mov	r0, r5
 808b936:	f7ff fff3 	bl	808b920 <_ZN5Print5printEc>
  return n;
}
 808b93a:	4420      	add	r0, r4
 808b93c:	bd38      	pop	{r3, r4, r5, pc}

0808b93e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808b93e:	b538      	push	{r3, r4, r5, lr}
 808b940:	4605      	mov	r5, r0
  return write(str);
 808b942:	f7fd f953 	bl	8088bec <_ZN5Print5writeEPKc>
 808b946:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 808b948:	4628      	mov	r0, r5
 808b94a:	f7ff ffec 	bl	808b926 <_ZN5Print7printlnEv>
  return n;
}
 808b94e:	4420      	add	r0, r4
 808b950:	bd38      	pop	{r3, r4, r5, pc}

0808b952 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 808b952:	b538      	push	{r3, r4, r5, lr}
 808b954:	4605      	mov	r5, r0
  size_t n = print(c);
 808b956:	f7ff ffe3 	bl	808b920 <_ZN5Print5printEc>
 808b95a:	4604      	mov	r4, r0
  n += println();
 808b95c:	4628      	mov	r0, r5
 808b95e:	f7ff ffe2 	bl	808b926 <_ZN5Print7printlnEv>
  return n;
}
 808b962:	4420      	add	r0, r4
 808b964:	bd38      	pop	{r3, r4, r5, pc}

0808b966 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808b966:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808b968:	2a01      	cmp	r2, #1
 808b96a:	bf98      	it	ls
 808b96c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808b96e:	b530      	push	{r4, r5, lr}
 808b970:	b08b      	sub	sp, #44	; 0x2c
 808b972:	460c      	mov	r4, r1
  *str = '\0';
 808b974:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 808b978:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808b97a:	4625      	mov	r5, r4
 808b97c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 808b980:	fb04 5312 	mls	r3, r4, r2, r5
 808b984:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808b986:	2b09      	cmp	r3, #9
 808b988:	bf94      	ite	ls
 808b98a:	3330      	addls	r3, #48	; 0x30
 808b98c:	3337      	addhi	r3, #55	; 0x37
 808b98e:	b2db      	uxtb	r3, r3
  } while(n);
 808b990:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808b992:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 808b996:	d9f0      	bls.n	808b97a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 808b998:	f7fd f928 	bl	8088bec <_ZN5Print5writeEPKc>
}
 808b99c:	b00b      	add	sp, #44	; 0x2c
 808b99e:	bd30      	pop	{r4, r5, pc}

0808b9a0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808b9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b9a4:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808b9a6:	4619      	mov	r1, r3
 808b9a8:	4610      	mov	r0, r2
{
 808b9aa:	4692      	mov	sl, r2
 808b9ac:	461f      	mov	r7, r3
 808b9ae:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 808b9b2:	f002 f991 	bl	808dcd8 <__aeabi_dcmpun>
 808b9b6:	b140      	cbz	r0, 808b9ca <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 808b9b8:	4950      	ldr	r1, [pc, #320]	; (808bafc <_ZN5Print10printFloatEdh+0x15c>)
 808b9ba:	4628      	mov	r0, r5
 808b9bc:	f7fd f916 	bl	8088bec <_ZN5Print5writeEPKc>
 808b9c0:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 808b9c2:	4620      	mov	r0, r4
 808b9c4:	b003      	add	sp, #12
 808b9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 808b9ca:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 808b9ce:	f04f 32ff 	mov.w	r2, #4294967295
 808b9d2:	4650      	mov	r0, sl
 808b9d4:	4621      	mov	r1, r4
 808b9d6:	4b4a      	ldr	r3, [pc, #296]	; (808bb00 <_ZN5Print10printFloatEdh+0x160>)
 808b9d8:	f002 f97e 	bl	808dcd8 <__aeabi_dcmpun>
 808b9dc:	b948      	cbnz	r0, 808b9f2 <_ZN5Print10printFloatEdh+0x52>
 808b9de:	f04f 32ff 	mov.w	r2, #4294967295
 808b9e2:	4650      	mov	r0, sl
 808b9e4:	4621      	mov	r1, r4
 808b9e6:	4b46      	ldr	r3, [pc, #280]	; (808bb00 <_ZN5Print10printFloatEdh+0x160>)
 808b9e8:	f002 f958 	bl	808dc9c <__aeabi_dcmple>
 808b9ec:	b908      	cbnz	r0, 808b9f2 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 808b9ee:	4945      	ldr	r1, [pc, #276]	; (808bb04 <_ZN5Print10printFloatEdh+0x164>)
 808b9f0:	e7e3      	b.n	808b9ba <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 808b9f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808b9f6:	4650      	mov	r0, sl
 808b9f8:	4639      	mov	r1, r7
 808b9fa:	4b43      	ldr	r3, [pc, #268]	; (808bb08 <_ZN5Print10printFloatEdh+0x168>)
 808b9fc:	f002 f962 	bl	808dcc4 <__aeabi_dcmpgt>
 808ba00:	b108      	cbz	r0, 808ba06 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 808ba02:	4942      	ldr	r1, [pc, #264]	; (808bb0c <_ZN5Print10printFloatEdh+0x16c>)
 808ba04:	e7d9      	b.n	808b9ba <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 808ba06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808ba0a:	4650      	mov	r0, sl
 808ba0c:	4639      	mov	r1, r7
 808ba0e:	4b40      	ldr	r3, [pc, #256]	; (808bb10 <_ZN5Print10printFloatEdh+0x170>)
 808ba10:	f002 f93a 	bl	808dc88 <__aeabi_dcmplt>
 808ba14:	2800      	cmp	r0, #0
 808ba16:	d1f4      	bne.n	808ba02 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 808ba18:	2200      	movs	r2, #0
 808ba1a:	2300      	movs	r3, #0
 808ba1c:	4650      	mov	r0, sl
 808ba1e:	4639      	mov	r1, r7
 808ba20:	f002 f932 	bl	808dc88 <__aeabi_dcmplt>
 808ba24:	4604      	mov	r4, r0
 808ba26:	b130      	cbz	r0, 808ba36 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 808ba28:	212d      	movs	r1, #45	; 0x2d
 808ba2a:	4628      	mov	r0, r5
 808ba2c:	f7ff ff78 	bl	808b920 <_ZN5Print5printEc>
 808ba30:	4604      	mov	r4, r0
     number = -number;
 808ba32:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 808ba36:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 808ba3a:	2000      	movs	r0, #0
    rounding /= 10.0;
 808ba3c:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 808ba40:	4934      	ldr	r1, [pc, #208]	; (808bb14 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 808ba42:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 808bb1c <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 808ba46:	fa5f f38b 	uxtb.w	r3, fp
 808ba4a:	429e      	cmp	r6, r3
 808ba4c:	d906      	bls.n	808ba5c <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 808ba4e:	4642      	mov	r2, r8
 808ba50:	464b      	mov	r3, r9
 808ba52:	f001 ffd1 	bl	808d9f8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 808ba56:	f10b 0b01 	add.w	fp, fp, #1
 808ba5a:	e7f4      	b.n	808ba46 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 808ba5c:	463b      	mov	r3, r7
 808ba5e:	4652      	mov	r2, sl
 808ba60:	f001 fcea 	bl	808d438 <__adddf3>
 808ba64:	4689      	mov	r9, r1
 808ba66:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 808ba68:	f002 f974 	bl	808dd54 <__aeabi_d2uiz>
 808ba6c:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 808ba6e:	f001 fe1f 	bl	808d6b0 <__aeabi_ui2d>
 808ba72:	4602      	mov	r2, r0
 808ba74:	460b      	mov	r3, r1
 808ba76:	4640      	mov	r0, r8
 808ba78:	4649      	mov	r1, r9
 808ba7a:	f001 fcdb 	bl	808d434 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 808ba7e:	220a      	movs	r2, #10
 808ba80:	4680      	mov	r8, r0
 808ba82:	4689      	mov	r9, r1
 808ba84:	4628      	mov	r0, r5
 808ba86:	4639      	mov	r1, r7
 808ba88:	f7ff ff6d 	bl	808b966 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 808ba8c:	4404      	add	r4, r0
  if (digits > 0) {
 808ba8e:	b126      	cbz	r6, 808ba9a <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 808ba90:	4628      	mov	r0, r5
 808ba92:	4921      	ldr	r1, [pc, #132]	; (808bb18 <_ZN5Print10printFloatEdh+0x178>)
 808ba94:	f7fd f8aa 	bl	8088bec <_ZN5Print5writeEPKc>
    n += print(".");
 808ba98:	4404      	add	r4, r0
    remainder *= 10.0;
 808ba9a:	f04f 0a00 	mov.w	sl, #0
 808ba9e:	f8df b07c 	ldr.w	fp, [pc, #124]	; 808bb1c <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 808baa2:	3e01      	subs	r6, #1
 808baa4:	b2f6      	uxtb	r6, r6
 808baa6:	2eff      	cmp	r6, #255	; 0xff
 808baa8:	d08b      	beq.n	808b9c2 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 808baaa:	4652      	mov	r2, sl
 808baac:	465b      	mov	r3, fp
 808baae:	4640      	mov	r0, r8
 808bab0:	4649      	mov	r1, r9
 808bab2:	f001 fe77 	bl	808d7a4 <__aeabi_dmul>
 808bab6:	4680      	mov	r8, r0
 808bab8:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 808baba:	f002 f923 	bl	808dd04 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 808babe:	1e07      	subs	r7, r0, #0
 808bac0:	da19      	bge.n	808baf6 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 808bac2:	212d      	movs	r1, #45	; 0x2d
 808bac4:	4628      	mov	r0, r5
 808bac6:	f7ff ff2b 	bl	808b920 <_ZN5Print5printEc>
 808baca:	4603      	mov	r3, r0
            val = -n;
 808bacc:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 808bace:	220a      	movs	r2, #10
 808bad0:	4628      	mov	r0, r5
 808bad2:	9301      	str	r3, [sp, #4]
 808bad4:	f7ff ff47 	bl	808b966 <_ZN5Print11printNumberEmh>
 808bad8:	9b01      	ldr	r3, [sp, #4]
 808bada:	4403      	add	r3, r0
    remainder -= toPrint;
 808badc:	4638      	mov	r0, r7
    n += print(toPrint);
 808bade:	441c      	add	r4, r3
    remainder -= toPrint;
 808bae0:	f001 fdf6 	bl	808d6d0 <__aeabi_i2d>
 808bae4:	4602      	mov	r2, r0
 808bae6:	460b      	mov	r3, r1
 808bae8:	4640      	mov	r0, r8
 808baea:	4649      	mov	r1, r9
 808baec:	f001 fca2 	bl	808d434 <__aeabi_dsub>
 808baf0:	4680      	mov	r8, r0
 808baf2:	4689      	mov	r9, r1
  while (digits-- > 0)
 808baf4:	e7d5      	b.n	808baa2 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 808baf6:	4639      	mov	r1, r7
        size_t t = 0;
 808baf8:	2300      	movs	r3, #0
 808bafa:	e7e8      	b.n	808bace <_ZN5Print10printFloatEdh+0x12e>
 808bafc:	080943f8 	.word	0x080943f8
 808bb00:	7fefffff 	.word	0x7fefffff
 808bb04:	080943fc 	.word	0x080943fc
 808bb08:	41efffff 	.word	0x41efffff
 808bb0c:	08094400 	.word	0x08094400
 808bb10:	c1efffff 	.word	0xc1efffff
 808bb14:	3fe00000 	.word	0x3fe00000
 808bb18:	08093dca 	.word	0x08093dca
 808bb1c:	40240000 	.word	0x40240000

0808bb20 <_ZN5Print7printlnEdi>:
{
 808bb20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 808bb22:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 808bb26:	4605      	mov	r5, r0
  return printFloat(n, digits);
 808bb28:	9100      	str	r1, [sp, #0]
 808bb2a:	f7ff ff39 	bl	808b9a0 <_ZN5Print10printFloatEdh>
 808bb2e:	4604      	mov	r4, r0
  n += println();
 808bb30:	4628      	mov	r0, r5
 808bb32:	f7ff fef8 	bl	808b926 <_ZN5Print7printlnEv>
}
 808bb36:	4420      	add	r0, r4
 808bb38:	b003      	add	sp, #12
 808bb3a:	bd30      	pop	{r4, r5, pc}

0808bb3c <_ZN5Print7printlnEfi>:
{
 808bb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808bb3e:	4604      	mov	r4, r0
    return println((double)num, digits);
 808bb40:	4608      	mov	r0, r1
{
 808bb42:	4615      	mov	r5, r2
    return println((double)num, digits);
 808bb44:	f001 fdd6 	bl	808d6f4 <__aeabi_f2d>
 808bb48:	9500      	str	r5, [sp, #0]
 808bb4a:	4602      	mov	r2, r0
 808bb4c:	460b      	mov	r3, r1
 808bb4e:	4620      	mov	r0, r4
 808bb50:	f7ff ffe6 	bl	808bb20 <_ZN5Print7printlnEdi>
}
 808bb54:	b003      	add	sp, #12
 808bb56:	bd30      	pop	{r4, r5, pc}

0808bb58 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 808bb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808bb5c:	b086      	sub	sp, #24
 808bb5e:	af00      	add	r7, sp, #0
 808bb60:	4605      	mov	r5, r0
 808bb62:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 808bb64:	1d38      	adds	r0, r7, #4
 808bb66:	2114      	movs	r1, #20
{
 808bb68:	4614      	mov	r4, r2
    va_copy(args2, args);
 808bb6a:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 808bb6c:	f7ff f86e 	bl	808ac4c <vsnprintf>

    if (n<bufsize)
 808bb70:	2813      	cmp	r0, #19
 808bb72:	d80e      	bhi.n	808bb92 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 808bb74:	4628      	mov	r0, r5
 808bb76:	1d39      	adds	r1, r7, #4
 808bb78:	f7fd f838 	bl	8088bec <_ZN5Print5writeEPKc>
 808bb7c:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 808bb7e:	b11e      	cbz	r6, 808bb88 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 808bb80:	4628      	mov	r0, r5
 808bb82:	f7ff fed0 	bl	808b926 <_ZN5Print7printlnEv>
 808bb86:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 808bb88:	4620      	mov	r0, r4
 808bb8a:	3718      	adds	r7, #24
 808bb8c:	46bd      	mov	sp, r7
 808bb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 808bb92:	f100 0308 	add.w	r3, r0, #8
 808bb96:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 808bb9a:	46e8      	mov	r8, sp
        char bigger[n+1];
 808bb9c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 808bba0:	4622      	mov	r2, r4
 808bba2:	1c41      	adds	r1, r0, #1
 808bba4:	683b      	ldr	r3, [r7, #0]
 808bba6:	4668      	mov	r0, sp
 808bba8:	f7ff f850 	bl	808ac4c <vsnprintf>
  return write(str);
 808bbac:	4669      	mov	r1, sp
 808bbae:	4628      	mov	r0, r5
 808bbb0:	f7fd f81c 	bl	8088bec <_ZN5Print5writeEPKc>
 808bbb4:	4604      	mov	r4, r0
 808bbb6:	46c5      	mov	sp, r8
 808bbb8:	e7e1      	b.n	808bb7e <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

0808bbba <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 808bbba:	b510      	push	{r4, lr}
 808bbbc:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808bbbe:	f7fe fd4d 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 808bbc2:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 808bbc4:	6823      	ldr	r3, [r4, #0]
 808bbc6:	4620      	mov	r0, r4
 808bbc8:	695b      	ldr	r3, [r3, #20]
 808bbca:	4798      	blx	r3
    if (c >= 0) return c;
 808bbcc:	2800      	cmp	r0, #0
 808bbce:	da08      	bge.n	808bbe2 <_ZN6Stream9timedReadEv+0x28>
 808bbd0:	f7fe fd44 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 808bbd4:	68e3      	ldr	r3, [r4, #12]
 808bbd6:	1ac0      	subs	r0, r0, r3
 808bbd8:	68a3      	ldr	r3, [r4, #8]
 808bbda:	4298      	cmp	r0, r3
 808bbdc:	d3f2      	bcc.n	808bbc4 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 808bbde:	f04f 30ff 	mov.w	r0, #4294967295
}
 808bbe2:	bd10      	pop	{r4, pc}

0808bbe4 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 808bbe4:	6081      	str	r1, [r0, #8]
}
 808bbe6:	4770      	bx	lr

0808bbe8 <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 808bbe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bbec:	469b      	mov	fp, r3
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
 808bbee:	780b      	ldrb	r3, [r1, #0]
{
 808bbf0:	4681      	mov	r9, r0
 808bbf2:	460f      	mov	r7, r1
 808bbf4:	4692      	mov	sl, r2
 808bbf6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if( *target == 0)
 808bbfa:	b9f3      	cbnz	r3, 808bc3a <_ZN6Stream9findUntilEPcjS0_j+0x52>
    return true;   // return true if target is a null string
 808bbfc:	2001      	movs	r0, #1
    }
    else
      termIndex = 0;
  }
  return false;
}
 808bbfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      termIndex = 0;
 808bc02:	2400      	movs	r4, #0
  while( (c = timedRead()) > 0){
 808bc04:	4648      	mov	r0, r9
 808bc06:	f7ff ffd8 	bl	808bbba <_ZN6Stream9timedReadEv>
 808bc0a:	1e06      	subs	r6, r0, #0
 808bc0c:	dd13      	ble.n	808bc36 <_ZN6Stream9findUntilEPcjS0_j+0x4e>
    if(c != target[index])
 808bc0e:	5d7b      	ldrb	r3, [r7, r5]
 808bc10:	429e      	cmp	r6, r3
 808bc12:	d003      	beq.n	808bc1c <_ZN6Stream9findUntilEPcjS0_j+0x34>
    if( c == target[index]){
 808bc14:	783b      	ldrb	r3, [r7, #0]
      index = 0; // reset index if any char does not match
 808bc16:	2500      	movs	r5, #0
    if( c == target[index]){
 808bc18:	429e      	cmp	r6, r3
 808bc1a:	d102      	bne.n	808bc22 <_ZN6Stream9findUntilEPcjS0_j+0x3a>
      if(++index >= targetLen){ // return true if all chars in the target match
 808bc1c:	3501      	adds	r5, #1
 808bc1e:	45aa      	cmp	sl, r5
 808bc20:	d9ec      	bls.n	808bbfc <_ZN6Stream9findUntilEPcjS0_j+0x14>
    if(termLen > 0 && c == terminator[termIndex]){
 808bc22:	f1b8 0f00 	cmp.w	r8, #0
 808bc26:	d0ec      	beq.n	808bc02 <_ZN6Stream9findUntilEPcjS0_j+0x1a>
 808bc28:	f81b 3004 	ldrb.w	r3, [fp, r4]
 808bc2c:	429e      	cmp	r6, r3
 808bc2e:	d1e8      	bne.n	808bc02 <_ZN6Stream9findUntilEPcjS0_j+0x1a>
      if(++termIndex >= termLen)
 808bc30:	3401      	adds	r4, #1
 808bc32:	45a0      	cmp	r8, r4
 808bc34:	d8e6      	bhi.n	808bc04 <_ZN6Stream9findUntilEPcjS0_j+0x1c>
  return false;
 808bc36:	2000      	movs	r0, #0
 808bc38:	e7e1      	b.n	808bbfe <_ZN6Stream9findUntilEPcjS0_j+0x16>
  size_t termIndex = 0;
 808bc3a:	2400      	movs	r4, #0
  size_t index = 0;  // maximum target string length is 64k bytes!
 808bc3c:	4625      	mov	r5, r4
 808bc3e:	e7e1      	b.n	808bc04 <_ZN6Stream9findUntilEPcjS0_j+0x1c>

0808bc40 <_ZN6Stream9findUntilEPcS0_>:
{
 808bc40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808bc42:	4606      	mov	r6, r0
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808bc44:	4608      	mov	r0, r1
{
 808bc46:	4615      	mov	r5, r2
 808bc48:	460c      	mov	r4, r1
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808bc4a:	f003 fd3b 	bl	808f6c4 <strlen>
 808bc4e:	4607      	mov	r7, r0
 808bc50:	4628      	mov	r0, r5
 808bc52:	f003 fd37 	bl	808f6c4 <strlen>
 808bc56:	462b      	mov	r3, r5
 808bc58:	9000      	str	r0, [sp, #0]
 808bc5a:	463a      	mov	r2, r7
 808bc5c:	4621      	mov	r1, r4
 808bc5e:	4630      	mov	r0, r6
 808bc60:	f7ff ffc2 	bl	808bbe8 <_ZN6Stream9findUntilEPcjS0_j>
}
 808bc64:	b003      	add	sp, #12
 808bc66:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808bc68 <_ZN6Stream4findEPc>:
  return findUntil(target, NULL);
 808bc68:	2200      	movs	r2, #0
 808bc6a:	f7ff bfe9 	b.w	808bc40 <_ZN6Stream9findUntilEPcS0_>

0808bc6e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 808bc6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808bc70:	4606      	mov	r6, r0
 808bc72:	460d      	mov	r5, r1
 808bc74:	4617      	mov	r7, r2
  size_t count = 0;
 808bc76:	2400      	movs	r4, #0
  while (count < length) {
 808bc78:	42bc      	cmp	r4, r7
 808bc7a:	d007      	beq.n	808bc8c <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
 808bc7c:	4630      	mov	r0, r6
 808bc7e:	f7ff ff9c 	bl	808bbba <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 808bc82:	1e03      	subs	r3, r0, #0
 808bc84:	db02      	blt.n	808bc8c <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
 808bc86:	552b      	strb	r3, [r5, r4]
    count++;
 808bc88:	3401      	adds	r4, #1
  while (count < length) {
 808bc8a:	e7f5      	b.n	808bc78 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
 808bc8c:	4620      	mov	r0, r4
 808bc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808bc90 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808bc90:	b538      	push	{r3, r4, r5, lr}
 808bc92:	460d      	mov	r5, r1
  String ret;
 808bc94:	4907      	ldr	r1, [pc, #28]	; (808bcb4 <_ZN6Stream10readStringEv+0x24>)
{
 808bc96:	4604      	mov	r4, r0
  String ret;
 808bc98:	f7ff fc2c 	bl	808b4f4 <_ZN6StringC1EPKc>
  int c = timedRead();
 808bc9c:	4628      	mov	r0, r5
 808bc9e:	f7ff ff8c 	bl	808bbba <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808bca2:	2800      	cmp	r0, #0
 808bca4:	db04      	blt.n	808bcb0 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808bca6:	b2c1      	uxtb	r1, r0
 808bca8:	4620      	mov	r0, r4
 808bcaa:	f7ff fd14 	bl	808b6d6 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 808bcae:	e7f5      	b.n	808bc9c <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
 808bcb0:	4620      	mov	r0, r4
 808bcb2:	bd38      	pop	{r3, r4, r5, pc}
 808bcb4:	080943b2 	.word	0x080943b2

0808bcb8 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 808bcb8:	b570      	push	{r4, r5, r6, lr}
 808bcba:	460d      	mov	r5, r1
  String ret;
 808bcbc:	4909      	ldr	r1, [pc, #36]	; (808bce4 <_ZN6Stream15readStringUntilEc+0x2c>)
{
 808bcbe:	4604      	mov	r4, r0
 808bcc0:	4616      	mov	r6, r2
  String ret;
 808bcc2:	f7ff fc17 	bl	808b4f4 <_ZN6StringC1EPKc>
  int c = timedRead();
 808bcc6:	4628      	mov	r0, r5
 808bcc8:	f7ff ff77 	bl	808bbba <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 808bccc:	2800      	cmp	r0, #0
 808bcce:	db06      	blt.n	808bcde <_ZN6Stream15readStringUntilEc+0x26>
 808bcd0:	4286      	cmp	r6, r0
 808bcd2:	d004      	beq.n	808bcde <_ZN6Stream15readStringUntilEc+0x26>
 808bcd4:	b2c1      	uxtb	r1, r0
 808bcd6:	4620      	mov	r0, r4
 808bcd8:	f7ff fcfd 	bl	808b6d6 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 808bcdc:	e7f3      	b.n	808bcc6 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
 808bcde:	4620      	mov	r0, r4
 808bce0:	bd70      	pop	{r4, r5, r6, pc}
 808bce2:	bf00      	nop
 808bce4:	080943b2 	.word	0x080943b2

0808bce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 808bce8:	680b      	ldr	r3, [r1, #0]
 808bcea:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 808bcec:	b113      	cbz	r3, 808bcf4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 808bcee:	685a      	ldr	r2, [r3, #4]
 808bcf0:	3201      	adds	r2, #1
 808bcf2:	605a      	str	r2, [r3, #4]
      }
 808bcf4:	4770      	bx	lr
	...

0808bcf8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808bcf8:	4b01      	ldr	r3, [pc, #4]	; (808bd00 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808bcfa:	4a02      	ldr	r2, [pc, #8]	; (808bd04 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808bcfc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 808bcfe:	4770      	bx	lr
 808bd00:	20000e84 	.word	0x20000e84
 808bd04:	08094404 	.word	0x08094404

0808bd08 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808bd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 808bd0c:	4a15      	ldr	r2, [pc, #84]	; (808bd64 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808bd0e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 808bd70 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 808bd12:	e9d2 3200 	ldrd	r3, r2, [r2]
 808bd16:	18c0      	adds	r0, r0, r3
 808bd18:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 808bd1c:	4a12      	ldr	r2, [pc, #72]	; (808bd68 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 808bd1e:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 808bd20:	e9d2 3200 	ldrd	r3, r2, [r2]
 808bd24:	18c6      	adds	r6, r0, r3
 808bd26:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 808bd2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 808bd2e:	42bb      	cmp	r3, r7
 808bd30:	bf08      	it	eq
 808bd32:	42b2      	cmpeq	r2, r6
 808bd34:	d013      	beq.n	808bd5e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 808bd36:	a903      	add	r1, sp, #12
 808bd38:	4668      	mov	r0, sp
 808bd3a:	e9cd 6700 	strd	r6, r7, [sp]
 808bd3e:	f002 fdd1 	bl	808e8e4 <localtime_r>
	calendar_time.tm_year += 1900;
 808bd42:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bd44:	4d09      	ldr	r5, [pc, #36]	; (808bd6c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 808bd46:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bd4a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 808bd4c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bd4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808bd50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808bd52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808bd54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808bd56:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bd5a:	6823      	ldr	r3, [r4, #0]
 808bd5c:	602b      	str	r3, [r5, #0]
    }
}
 808bd5e:	b00c      	add	sp, #48	; 0x30
 808bd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808bd64:	20000ec0 	.word	0x20000ec0
 808bd68:	20000eb8 	.word	0x20000eb8
 808bd6c:	20000e90 	.word	0x20000e90
 808bd70:	20000ec8 	.word	0x20000ec8

0808bd74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 808bd74:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808bd76:	2000      	movs	r0, #0
 808bd78:	f7fe ff10 	bl	808ab9c <spark_sync_time_pending>
 808bd7c:	b128      	cbz	r0, 808bd8a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808bd7e:	f7fe feed 	bl	808ab5c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 808bd82:	f080 0001 	eor.w	r0, r0, #1
 808bd86:	b2c0      	uxtb	r0, r0
    }
 808bd88:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 808bd8a:	2001      	movs	r0, #1
 808bd8c:	e7fc      	b.n	808bd88 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

0808bd90 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 808bd90:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808bd92:	f7ff ffb9 	bl	808bd08 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 808bd96:	4b02      	ldr	r3, [pc, #8]	; (808bda0 <_ZN9TimeClass5monthEx+0x10>)
 808bd98:	6918      	ldr	r0, [r3, #16]
}
 808bd9a:	3001      	adds	r0, #1
 808bd9c:	bd08      	pop	{r3, pc}
 808bd9e:	bf00      	nop
 808bda0:	20000e90 	.word	0x20000e90

0808bda4 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808bda4:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808bda6:	490a      	ldr	r1, [pc, #40]	; (808bdd0 <_ZN9TimeClass4zoneEf+0x2c>)
{
 808bda8:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808bdaa:	f002 faef 	bl	808e38c <__aeabi_fcmplt>
 808bdae:	b968      	cbnz	r0, 808bdcc <_ZN9TimeClass4zoneEf+0x28>
 808bdb0:	4620      	mov	r0, r4
 808bdb2:	4908      	ldr	r1, [pc, #32]	; (808bdd4 <_ZN9TimeClass4zoneEf+0x30>)
 808bdb4:	f002 fb08 	bl	808e3c8 <__aeabi_fcmpgt>
 808bdb8:	b940      	cbnz	r0, 808bdcc <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808bdba:	4907      	ldr	r1, [pc, #28]	; (808bdd8 <_ZN9TimeClass4zoneEf+0x34>)
 808bdbc:	4620      	mov	r0, r4
 808bdbe:	f002 f947 	bl	808e050 <__aeabi_fmul>
 808bdc2:	f002 fb99 	bl	808e4f8 <__aeabi_f2lz>
 808bdc6:	4b05      	ldr	r3, [pc, #20]	; (808bddc <_ZN9TimeClass4zoneEf+0x38>)
 808bdc8:	e9c3 0100 	strd	r0, r1, [r3]
}
 808bdcc:	bd10      	pop	{r4, pc}
 808bdce:	bf00      	nop
 808bdd0:	c1400000 	.word	0xc1400000
 808bdd4:	41600000 	.word	0x41600000
 808bdd8:	45610000 	.word	0x45610000
 808bddc:	20000ec0 	.word	0x20000ec0

0808bde0 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 808bde0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808bde2:	4602      	mov	r2, r0
 808bde4:	460b      	mov	r3, r1
    struct timeval tv = {
 808bde6:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 808bde8:	4668      	mov	r0, sp
    };
 808bdea:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 808bdee:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 808bdf2:	f7fe fc63 	bl	808a6bc <hal_rtc_set_time>
 808bdf6:	4602      	mov	r2, r0
 808bdf8:	b910      	cbnz	r0, 808be00 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 808bdfa:	4601      	mov	r1, r0
 808bdfc:	f7fe fe16 	bl	808aa2c <system_notify_time_changed>
    }
}
 808be00:	b005      	add	sp, #20
 808be02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808be08 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808be08:	b530      	push	{r4, r5, lr}
 808be0a:	4604      	mov	r4, r0
    t += time_zone_cache;
 808be0c:	4818      	ldr	r0, [pc, #96]	; (808be70 <_ZN9TimeClass7timeStrEx+0x68>)
{
 808be0e:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 808be10:	e9d0 1000 	ldrd	r1, r0, [r0]
 808be14:	1852      	adds	r2, r2, r1
 808be16:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 808be1a:	4816      	ldr	r0, [pc, #88]	; (808be74 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 808be1c:	2500      	movs	r5, #0
    t += dst_current_cache;
 808be1e:	e9d0 1000 	ldrd	r1, r0, [r0]
 808be22:	1852      	adds	r2, r2, r1
 808be24:	eb40 0303 	adc.w	r3, r0, r3
 808be28:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 808be2c:	2224      	movs	r2, #36	; 0x24
 808be2e:	2100      	movs	r1, #0
 808be30:	eb0d 0002 	add.w	r0, sp, r2
 808be34:	f002 fe7c 	bl	808eb30 <memset>
    localtime_r(&t, &calendar_time);
 808be38:	a909      	add	r1, sp, #36	; 0x24
 808be3a:	4668      	mov	r0, sp
 808be3c:	f002 fd52 	bl	808e8e4 <localtime_r>
    char ascstr[26] = {};
 808be40:	2216      	movs	r2, #22
 808be42:	4629      	mov	r1, r5
 808be44:	a803      	add	r0, sp, #12
 808be46:	9502      	str	r5, [sp, #8]
 808be48:	f002 fe72 	bl	808eb30 <memset>
    asctime_r(&calendar_time, ascstr);
 808be4c:	a902      	add	r1, sp, #8
 808be4e:	a809      	add	r0, sp, #36	; 0x24
 808be50:	f002 fd08 	bl	808e864 <asctime_r>
    int len = strlen(ascstr);
 808be54:	a802      	add	r0, sp, #8
 808be56:	f003 fc35 	bl	808f6c4 <strlen>
    ascstr[len-1] = 0; // remove final newline
 808be5a:	ab12      	add	r3, sp, #72	; 0x48
 808be5c:	4418      	add	r0, r3
 808be5e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 808be62:	a902      	add	r1, sp, #8
 808be64:	4620      	mov	r0, r4
 808be66:	f7ff fb45 	bl	808b4f4 <_ZN6StringC1EPKc>
}
 808be6a:	4620      	mov	r0, r4
 808be6c:	b013      	add	sp, #76	; 0x4c
 808be6e:	bd30      	pop	{r4, r5, pc}
 808be70:	20000ec0 	.word	0x20000ec0
 808be74:	20000eb8 	.word	0x20000eb8

0808be78 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808be7c:	b0a5      	sub	sp, #148	; 0x94
 808be7e:	4607      	mov	r7, r0
 808be80:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808be82:	a814      	add	r0, sp, #80	; 0x50
{
 808be84:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808be86:	223f      	movs	r2, #63	; 0x3f
{
 808be88:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808be8a:	f003 fc35 	bl	808f6f8 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 808be8e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808be90:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 808be92:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808be96:	f003 fc15 	bl	808f6c4 <strlen>
 808be9a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 808be9c:	bb5d      	cbnz	r5, 808bef6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 808be9e:	492a      	ldr	r1, [pc, #168]	; (808bf48 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 808bea0:	a803      	add	r0, sp, #12
 808bea2:	f002 fe88 	bl	808ebb6 <strcpy>
{
 808bea6:	2500      	movs	r5, #0
 808bea8:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808beaa:	f104 3bff 	add.w	fp, r4, #4294967295
 808beae:	45ab      	cmp	fp, r5
 808beb0:	d936      	bls.n	808bf20 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808beb2:	46b1      	mov	r9, r6
 808beb4:	f819 3b01 	ldrb.w	r3, [r9], #1
 808beb8:	f105 0a01 	add.w	sl, r5, #1
 808bebc:	2b25      	cmp	r3, #37	; 0x25
 808bebe:	d117      	bne.n	808bef0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 808bec0:	7873      	ldrb	r3, [r6, #1]
 808bec2:	2b7a      	cmp	r3, #122	; 0x7a
 808bec4:	d114      	bne.n	808bef0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 808bec6:	a803      	add	r0, sp, #12
 808bec8:	f003 fbfc 	bl	808f6c4 <strlen>
 808becc:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808bece:	ab14      	add	r3, sp, #80	; 0x50
 808bed0:	1828      	adds	r0, r5, r0
 808bed2:	4418      	add	r0, r3
 808bed4:	ebab 0205 	sub.w	r2, fp, r5
 808bed8:	1cb1      	adds	r1, r6, #2
 808beda:	f002 fe1b 	bl	808eb14 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808bede:	4622      	mov	r2, r4
 808bee0:	a903      	add	r1, sp, #12
 808bee2:	4630      	mov	r0, r6
 808bee4:	f002 fe16 	bl	808eb14 <memcpy>
            len = strlen(format_str);
 808bee8:	a814      	add	r0, sp, #80	; 0x50
 808beea:	f003 fbeb 	bl	808f6c4 <strlen>
 808beee:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 808bef0:	464e      	mov	r6, r9
 808bef2:	4655      	mov	r5, sl
 808bef4:	e7d9      	b.n	808beaa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808bef6:	213c      	movs	r1, #60	; 0x3c
 808bef8:	fb95 f3f1 	sdiv	r3, r5, r1
 808befc:	2b00      	cmp	r3, #0
 808befe:	bfb8      	it	lt
 808bf00:	425b      	neglt	r3, r3
 808bf02:	fbb3 f2f1 	udiv	r2, r3, r1
 808bf06:	fb01 3312 	mls	r3, r1, r2, r3
 808bf0a:	9300      	str	r3, [sp, #0]
 808bf0c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808bf10:	2110      	movs	r1, #16
 808bf12:	fb95 f3f3 	sdiv	r3, r5, r3
 808bf16:	4a0d      	ldr	r2, [pc, #52]	; (808bf4c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 808bf18:	a803      	add	r0, sp, #12
 808bf1a:	f7fe fe87 	bl	808ac2c <snprintf>
 808bf1e:	e7c2      	b.n	808bea6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 808bf20:	2100      	movs	r1, #0
 808bf22:	222e      	movs	r2, #46	; 0x2e
 808bf24:	a808      	add	r0, sp, #32
 808bf26:	9107      	str	r1, [sp, #28]
 808bf28:	f002 fe02 	bl	808eb30 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 808bf2c:	4643      	mov	r3, r8
 808bf2e:	aa14      	add	r2, sp, #80	; 0x50
 808bf30:	2132      	movs	r1, #50	; 0x32
 808bf32:	a807      	add	r0, sp, #28
 808bf34:	f003 fbbc 	bl	808f6b0 <strftime>
    return String(buf);
 808bf38:	4638      	mov	r0, r7
 808bf3a:	a907      	add	r1, sp, #28
 808bf3c:	f7ff fada 	bl	808b4f4 <_ZN6StringC1EPKc>
}
 808bf40:	4638      	mov	r0, r7
 808bf42:	b025      	add	sp, #148	; 0x94
 808bf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bf48:	08092ede 	.word	0x08092ede
 808bf4c:	08094408 	.word	0x08094408

0808bf50 <_ZN9TimeClass6formatExPKc>:
{
 808bf50:	b5f0      	push	{r4, r5, r6, r7, lr}
 808bf52:	b08d      	sub	sp, #52	; 0x34
 808bf54:	9d12      	ldr	r5, [sp, #72]	; 0x48
 808bf56:	4604      	mov	r4, r0
 808bf58:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 808bf5c:	b915      	cbnz	r5, 808bf64 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 808bf5e:	4b19      	ldr	r3, [pc, #100]	; (808bfc4 <_ZN9TimeClass6formatExPKc+0x74>)
 808bf60:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 808bf62:	b12d      	cbz	r5, 808bf70 <_ZN9TimeClass6formatExPKc+0x20>
 808bf64:	4b18      	ldr	r3, [pc, #96]	; (808bfc8 <_ZN9TimeClass6formatExPKc+0x78>)
 808bf66:	4628      	mov	r0, r5
 808bf68:	6819      	ldr	r1, [r3, #0]
 808bf6a:	f002 fe1a 	bl	808eba2 <strcmp>
 808bf6e:	b938      	cbnz	r0, 808bf80 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 808bf70:	e9dd 2300 	ldrd	r2, r3, [sp]
 808bf74:	4620      	mov	r0, r4
 808bf76:	f7ff ff47 	bl	808be08 <_ZN9TimeClass7timeStrEx>
}
 808bf7a:	4620      	mov	r0, r4
 808bf7c:	b00d      	add	sp, #52	; 0x34
 808bf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 808bf80:	9900      	ldr	r1, [sp, #0]
 808bf82:	4e12      	ldr	r6, [pc, #72]	; (808bfcc <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 808bf84:	4f12      	ldr	r7, [pc, #72]	; (808bfd0 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 808bf86:	e9d6 3200 	ldrd	r3, r2, [r6]
 808bf8a:	185b      	adds	r3, r3, r1
 808bf8c:	9901      	ldr	r1, [sp, #4]
 808bf8e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 808bf92:	e9d7 0100 	ldrd	r0, r1, [r7]
 808bf96:	181b      	adds	r3, r3, r0
 808bf98:	eb41 0202 	adc.w	r2, r1, r2
 808bf9c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 808bfa0:	2100      	movs	r1, #0
 808bfa2:	2224      	movs	r2, #36	; 0x24
 808bfa4:	a803      	add	r0, sp, #12
 808bfa6:	f002 fdc3 	bl	808eb30 <memset>
    localtime_r(&t, &calendar_time);
 808bfaa:	a903      	add	r1, sp, #12
 808bfac:	4668      	mov	r0, sp
 808bfae:	f002 fc99 	bl	808e8e4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808bfb2:	6832      	ldr	r2, [r6, #0]
 808bfb4:	683b      	ldr	r3, [r7, #0]
 808bfb6:	4620      	mov	r0, r4
 808bfb8:	4413      	add	r3, r2
 808bfba:	a903      	add	r1, sp, #12
 808bfbc:	462a      	mov	r2, r5
 808bfbe:	f7ff ff5b 	bl	808be78 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 808bfc2:	e7da      	b.n	808bf7a <_ZN9TimeClass6formatExPKc+0x2a>
 808bfc4:	20000e8c 	.word	0x20000e8c
 808bfc8:	200000e0 	.word	0x200000e0
 808bfcc:	20000ec0 	.word	0x20000ec0
 808bfd0:	20000eb8 	.word	0x20000eb8

0808bfd4 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 808bfd4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 808bfd6:	2000      	movs	r0, #0
 808bfd8:	f7fe fb60 	bl	808a69c <hal_rtc_time_is_valid>
    if (rtcstate)
 808bfdc:	4604      	mov	r4, r0
 808bfde:	b9a0      	cbnz	r0, 808c00a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 808bfe0:	f7fe fce4 	bl	808a9ac <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808bfe4:	2801      	cmp	r0, #1
 808bfe6:	d110      	bne.n	808c00a <_ZN9TimeClass7isValidEv+0x36>
 808bfe8:	4620      	mov	r0, r4
 808bfea:	f7fe fd17 	bl	808aa1c <system_thread_get_state>
 808bfee:	b960      	cbnz	r0, 808c00a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 808bff0:	f7ff fec0 	bl	808bd74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808bff4:	b910      	cbnz	r0, 808bffc <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 808bff6:	f7fe fda1 	bl	808ab3c <spark_process>
        while (_while() && !_condition()) {
 808bffa:	e7f9      	b.n	808bff0 <_ZN9TimeClass7isValidEv+0x1c>
 808bffc:	f7ff feba 	bl	808bd74 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 808c000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 808c004:	2000      	movs	r0, #0
 808c006:	f7fe bb49 	b.w	808a69c <hal_rtc_time_is_valid>
}
 808c00a:	4620      	mov	r0, r4
 808c00c:	bd10      	pop	{r4, pc}

0808c00e <_ZN9TimeClass3nowEv>:
{
 808c00e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 808c010:	f7ff ffe0 	bl	808bfd4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 808c014:	2210      	movs	r2, #16
 808c016:	2100      	movs	r1, #0
 808c018:	4668      	mov	r0, sp
 808c01a:	f002 fd89 	bl	808eb30 <memset>
    hal_rtc_get_time(&tv, nullptr);
 808c01e:	2100      	movs	r1, #0
 808c020:	4668      	mov	r0, sp
 808c022:	f7fe fb43 	bl	808a6ac <hal_rtc_get_time>
}
 808c026:	9800      	ldr	r0, [sp, #0]
 808c028:	b005      	add	sp, #20
 808c02a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808c030 <_ZN9TimeClass4hourEv>:
{
 808c030:	b508      	push	{r3, lr}
	return hour(now());
 808c032:	f7ff ffec 	bl	808c00e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808c036:	17c1      	asrs	r1, r0, #31
 808c038:	f7ff fe66 	bl	808bd08 <_ZL22Refresh_UnixTime_Cachex>
}
 808c03c:	4b01      	ldr	r3, [pc, #4]	; (808c044 <_ZN9TimeClass4hourEv+0x14>)
 808c03e:	6898      	ldr	r0, [r3, #8]
 808c040:	bd08      	pop	{r3, pc}
 808c042:	bf00      	nop
 808c044:	20000e90 	.word	0x20000e90

0808c048 <_ZN9TimeClass6minuteEv>:
{
 808c048:	b508      	push	{r3, lr}
	return minute(now());
 808c04a:	f7ff ffe0 	bl	808c00e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808c04e:	17c1      	asrs	r1, r0, #31
 808c050:	f7ff fe5a 	bl	808bd08 <_ZL22Refresh_UnixTime_Cachex>
}
 808c054:	4b01      	ldr	r3, [pc, #4]	; (808c05c <_ZN9TimeClass6minuteEv+0x14>)
 808c056:	6858      	ldr	r0, [r3, #4]
 808c058:	bd08      	pop	{r3, pc}
 808c05a:	bf00      	nop
 808c05c:	20000e90 	.word	0x20000e90

0808c060 <_ZN9TimeClass6secondEv>:
{
 808c060:	b508      	push	{r3, lr}
	return second(now());
 808c062:	f7ff ffd4 	bl	808c00e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808c066:	17c1      	asrs	r1, r0, #31
 808c068:	f7ff fe4e 	bl	808bd08 <_ZL22Refresh_UnixTime_Cachex>
}
 808c06c:	4b01      	ldr	r3, [pc, #4]	; (808c074 <_ZN9TimeClass6secondEv+0x14>)
 808c06e:	6818      	ldr	r0, [r3, #0]
 808c070:	bd08      	pop	{r3, pc}
 808c072:	bf00      	nop
 808c074:	20000e90 	.word	0x20000e90

0808c078 <_ZN9TimeClass3dayEv>:
{
 808c078:	b508      	push	{r3, lr}
	return day(now());
 808c07a:	f7ff ffc8 	bl	808c00e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808c07e:	17c1      	asrs	r1, r0, #31
 808c080:	f7ff fe42 	bl	808bd08 <_ZL22Refresh_UnixTime_Cachex>
}
 808c084:	4b01      	ldr	r3, [pc, #4]	; (808c08c <_ZN9TimeClass3dayEv+0x14>)
 808c086:	68d8      	ldr	r0, [r3, #12]
 808c088:	bd08      	pop	{r3, pc}
 808c08a:	bf00      	nop
 808c08c:	20000e90 	.word	0x20000e90

0808c090 <_ZN9TimeClass5monthEv>:
{
 808c090:	b508      	push	{r3, lr}
	return month(now());
 808c092:	f7ff ffbc 	bl	808c00e <_ZN9TimeClass3nowEv>
}
 808c096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 808c09a:	17c1      	asrs	r1, r0, #31
 808c09c:	f7ff be78 	b.w	808bd90 <_ZN9TimeClass5monthEx>

0808c0a0 <_ZN9TimeClass4yearEv>:
{
 808c0a0:	b508      	push	{r3, lr}
	return year(now());
 808c0a2:	f7ff ffb4 	bl	808c00e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808c0a6:	17c1      	asrs	r1, r0, #31
 808c0a8:	f7ff fe2e 	bl	808bd08 <_ZL22Refresh_UnixTime_Cachex>
}
 808c0ac:	4b01      	ldr	r3, [pc, #4]	; (808c0b4 <_ZN9TimeClass4yearEv+0x14>)
 808c0ae:	6958      	ldr	r0, [r3, #20]
 808c0b0:	bd08      	pop	{r3, pc}
 808c0b2:	bf00      	nop
 808c0b4:	20000e90 	.word	0x20000e90

0808c0b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808c0b8:	4b02      	ldr	r3, [pc, #8]	; (808c0c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808c0ba:	681a      	ldr	r2, [r3, #0]
 808c0bc:	4b02      	ldr	r3, [pc, #8]	; (808c0c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808c0be:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 808c0c0:	4770      	bx	lr
 808c0c2:	bf00      	nop
 808c0c4:	200000e0 	.word	0x200000e0
 808c0c8:	20000e8c 	.word	0x20000e8c

0808c0cc <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    hal_adc_set_sample_time(ADC_SampleTime);
 808c0cc:	f7fe baa6 	b.w	808a61c <hal_adc_set_sample_time>

0808c0d0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808c0d0:	2100      	movs	r1, #0
 808c0d2:	f7fe bc7b 	b.w	808a9cc <system_delay_ms>

0808c0d6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808c0d6:	b510      	push	{r4, lr}
 808c0d8:	4604      	mov	r4, r0
 808c0da:	f7fd fba7 	bl	808982c <_ZNSt14_Function_baseD1Ev>
 808c0de:	4620      	mov	r0, r4
 808c0e0:	bd10      	pop	{r4, pc}

0808c0e2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 808c0e2:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c0e4:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 808c0e6:	460b      	mov	r3, r1
 808c0e8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c0ea:	c803      	ldmia	r0, {r0, r1}
 808c0ec:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808c0f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 808c0f4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808c0f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 808c0fc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808c100:	b002      	add	sp, #8
 808c102:	bd10      	pop	{r4, pc}

0808c104 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 808c104:	2300      	movs	r3, #0
 808c106:	4803      	ldr	r0, [pc, #12]	; (808c114 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808c108:	4a03      	ldr	r2, [pc, #12]	; (808c118 <_GLOBAL__sub_I_RGB+0x14>)
 808c10a:	4904      	ldr	r1, [pc, #16]	; (808c11c <_GLOBAL__sub_I_RGB+0x18>)
 808c10c:	6083      	str	r3, [r0, #8]
 808c10e:	f001 b97b 	b.w	808d408 <__aeabi_atexit>
 808c112:	bf00      	nop
 808c114:	20000ed0 	.word	0x20000ed0
 808c118:	20000328 	.word	0x20000328
 808c11c:	0808c0d7 	.word	0x0808c0d7

0808c120 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808c120:	6800      	ldr	r0, [r0, #0]
 808c122:	f000 bee7 	b.w	808cef4 <_ZN7TwoWire4lockEv>

0808c126 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808c126:	b510      	push	{r4, lr}
 808c128:	4604      	mov	r4, r0
      lock_(_lock) {
 808c12a:	6001      	str	r1, [r0, #0]
 808c12c:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 808c12e:	b10a      	cbz	r2, 808c134 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808c130:	f7ff fff6 	bl	808c120 <_ZN9FuelGauge4lockEv>
}
 808c134:	4620      	mov	r0, r4
 808c136:	bd10      	pop	{r4, pc}

0808c138 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 808c138:	b538      	push	{r3, r4, r5, lr}
 808c13a:	4604      	mov	r4, r0
 808c13c:	460d      	mov	r5, r1
            return &Wire3;
 808c13e:	f001 f93b 	bl	808d3b8 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 808c142:	462a      	mov	r2, r5
            return &Wire3;
 808c144:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 808c146:	4620      	mov	r0, r4
 808c148:	f7ff ffed 	bl	808c126 <_ZN9FuelGaugeC1ER7TwoWireb>
}
 808c14c:	4620      	mov	r0, r4
 808c14e:	bd38      	pop	{r3, r4, r5, pc}

0808c150 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 808c150:	6800      	ldr	r0, [r0, #0]
 808c152:	f000 bed8 	b.w	808cf06 <_ZN7TwoWire6unlockEv>

0808c156 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 808c156:	b510      	push	{r4, lr}
    if (lock_) {
 808c158:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 808c15a:	4604      	mov	r4, r0
    if (lock_) {
 808c15c:	b10b      	cbz	r3, 808c162 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808c15e:	f7ff fff7 	bl	808c150 <_ZN9FuelGauge6unlockEv>
}
 808c162:	4620      	mov	r0, r4
 808c164:	bd10      	pop	{r4, pc}

0808c166 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808c166:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 808c16a:	4604      	mov	r4, r0
 808c16c:	460d      	mov	r5, r1
 808c16e:	4617      	mov	r7, r2
 808c170:	461e      	mov	r6, r3
 808c172:	f7ff ffd5 	bl	808c120 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808c176:	2336      	movs	r3, #54	; 0x36
 808c178:	f88d 3000 	strb.w	r3, [sp]
 808c17c:	2300      	movs	r3, #0
 808c17e:	f04f 0801 	mov.w	r8, #1
 808c182:	9301      	str	r3, [sp, #4]
    timeout_ = ms;
 808c184:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 808c186:	4669      	mov	r1, sp
 808c188:	6820      	ldr	r0, [r4, #0]
 808c18a:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808c18c:	f88d 8008 	strb.w	r8, [sp, #8]
 808c190:	f000 fe8d 	bl	808ceae <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 808c194:	6820      	ldr	r0, [r4, #0]
 808c196:	4629      	mov	r1, r5
 808c198:	6803      	ldr	r3, [r0, #0]
 808c19a:	689b      	ldr	r3, [r3, #8]
 808c19c:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 808c19e:	4641      	mov	r1, r8
 808c1a0:	6820      	ldr	r0, [r4, #0]
 808c1a2:	f000 fe9c 	bl	808cede <_ZN7TwoWire15endTransmissionEh>
 808c1a6:	4605      	mov	r5, r0
 808c1a8:	b140      	cbz	r0, 808c1bc <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 808c1aa:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 808c1ae:	4620      	mov	r0, r4
 808c1b0:	f7ff ffce 	bl	808c150 <_ZN9FuelGauge6unlockEv>
}
 808c1b4:	4628      	mov	r0, r5
 808c1b6:	b004      	add	sp, #16
 808c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 808c1bc:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 808c1be:	4669      	mov	r1, sp
 808c1c0:	6820      	ldr	r0, [r4, #0]
 808c1c2:	9301      	str	r3, [sp, #4]
 808c1c4:	f000 fe40 	bl	808ce48 <_ZN7TwoWire11requestFromERK16WireTransmission>
 808c1c8:	2802      	cmp	r0, #2
 808c1ca:	d1ee      	bne.n	808c1aa <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 808c1cc:	6820      	ldr	r0, [r4, #0]
 808c1ce:	6803      	ldr	r3, [r0, #0]
 808c1d0:	695b      	ldr	r3, [r3, #20]
 808c1d2:	4798      	blx	r3
 808c1d4:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 808c1d6:	6820      	ldr	r0, [r4, #0]
 808c1d8:	6803      	ldr	r3, [r0, #0]
 808c1da:	695b      	ldr	r3, [r3, #20]
 808c1dc:	4798      	blx	r3
 808c1de:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 808c1e0:	e7e5      	b.n	808c1ae <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

0808c1e4 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 808c1e4:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 808c1e6:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808c1e8:	2104      	movs	r1, #4
    byte MSB = 0;
 808c1ea:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 808c1ee:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808c1f2:	f10d 0206 	add.w	r2, sp, #6
 808c1f6:	f10d 0307 	add.w	r3, sp, #7
 808c1fa:	f7ff ffb4 	bl	808c166 <_ZN9FuelGauge12readRegisterEhRhS0_>
 808c1fe:	b9a0      	cbnz	r0, 808c22a <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 808c200:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808c204:	f001 fa64 	bl	808d6d0 <__aeabi_i2d>
 808c208:	2200      	movs	r2, #0
 808c20a:	4b09      	ldr	r3, [pc, #36]	; (808c230 <_ZN9FuelGauge6getSoCEv+0x4c>)
 808c20c:	f001 faca 	bl	808d7a4 <__aeabi_dmul>
 808c210:	f001 fdc0 	bl	808dd94 <__aeabi_d2f>
 808c214:	4604      	mov	r4, r0
        return MSB + decimal;
 808c216:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808c21a:	f001 fec5 	bl	808dfa8 <__aeabi_i2f>
 808c21e:	4601      	mov	r1, r0
 808c220:	4620      	mov	r0, r4
 808c222:	f001 fe0d 	bl	808de40 <__addsf3>
}
 808c226:	b002      	add	sp, #8
 808c228:	bd10      	pop	{r4, pc}
        return -1.0f;
 808c22a:	4802      	ldr	r0, [pc, #8]	; (808c234 <_ZN9FuelGauge6getSoCEv+0x50>)
 808c22c:	e7fb      	b.n	808c226 <_ZN9FuelGauge6getSoCEv+0x42>
 808c22e:	bf00      	nop
 808c230:	3f700000 	.word	0x3f700000
 808c234:	bf800000 	.word	0xbf800000

0808c238 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 808c238:	4b01      	ldr	r3, [pc, #4]	; (808c240 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 808c23a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 808c23c:	4770      	bx	lr
 808c23e:	bf00      	nop
 808c240:	200000e8 	.word	0x200000e8

0808c244 <serialEventRun>:
{
 808c244:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808c246:	4b17      	ldr	r3, [pc, #92]	; (808c2a4 <serialEventRun+0x60>)
 808c248:	b143      	cbz	r3, 808c25c <serialEventRun+0x18>
 808c24a:	f000 fc33 	bl	808cab4 <_Z16_fetch_usbserialv>
 808c24e:	6803      	ldr	r3, [r0, #0]
 808c250:	691b      	ldr	r3, [r3, #16]
 808c252:	4798      	blx	r3
 808c254:	2800      	cmp	r0, #0
 808c256:	dd01      	ble.n	808c25c <serialEventRun+0x18>
        serialEvent();
 808c258:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 808c25c:	4b12      	ldr	r3, [pc, #72]	; (808c2a8 <serialEventRun+0x64>)
 808c25e:	b143      	cbz	r3, 808c272 <serialEventRun+0x2e>
 808c260:	f000 fd72 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 808c264:	6803      	ldr	r3, [r0, #0]
 808c266:	691b      	ldr	r3, [r3, #16]
 808c268:	4798      	blx	r3
 808c26a:	2800      	cmp	r0, #0
 808c26c:	dd01      	ble.n	808c272 <serialEventRun+0x2e>
        serialEvent1();
 808c26e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 808c272:	4b0e      	ldr	r3, [pc, #56]	; (808c2ac <serialEventRun+0x68>)
 808c274:	b10b      	cbz	r3, 808c27a <serialEventRun+0x36>
 808c276:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 808c27a:	4b0d      	ldr	r3, [pc, #52]	; (808c2b0 <serialEventRun+0x6c>)
 808c27c:	b10b      	cbz	r3, 808c282 <serialEventRun+0x3e>
 808c27e:	f7f4 fded 	bl	8080e5c <_Z15serialEventRun4v>
    if (serialEventRun5) serialEventRun5();
 808c282:	4b0c      	ldr	r3, [pc, #48]	; (808c2b4 <serialEventRun+0x70>)
 808c284:	b10b      	cbz	r3, 808c28a <serialEventRun+0x46>
 808c286:	f7f4 fe25 	bl	8080ed4 <_Z15serialEventRun5v>
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808c28a:	4b0b      	ldr	r3, [pc, #44]	; (808c2b8 <serialEventRun+0x74>)
 808c28c:	b143      	cbz	r3, 808c2a0 <serialEventRun+0x5c>
 808c28e:	f000 fc4f 	bl	808cb30 <_Z17_fetch_usbserial1v>
 808c292:	6803      	ldr	r3, [r0, #0]
 808c294:	691b      	ldr	r3, [r3, #16]
 808c296:	4798      	blx	r3
 808c298:	2800      	cmp	r0, #0
 808c29a:	dd01      	ble.n	808c2a0 <serialEventRun+0x5c>
        usbSerialEvent1();
 808c29c:	f3af 8000 	nop.w
}
 808c2a0:	bd08      	pop	{r3, pc}
 808c2a2:	bf00      	nop
	...
 808c2b0:	08080e5d 	.word	0x08080e5d
 808c2b4:	08080ed5 	.word	0x08080ed5
 808c2b8:	00000000 	.word	0x00000000

0808c2bc <_post_loop>:
{
 808c2bc:	b508      	push	{r3, lr}
	serialEventRun();
 808c2be:	f7ff ffc1 	bl	808c244 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808c2c2:	f7fe f9cb 	bl	808a65c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808c2c6:	4b01      	ldr	r3, [pc, #4]	; (808c2cc <_post_loop+0x10>)
 808c2c8:	6018      	str	r0, [r3, #0]
}
 808c2ca:	bd08      	pop	{r3, pc}
 808c2cc:	20001374 	.word	0x20001374

0808c2d0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808c2d0:	4802      	ldr	r0, [pc, #8]	; (808c2dc <_Z33system_initialize_user_backup_ramv+0xc>)
 808c2d2:	4a03      	ldr	r2, [pc, #12]	; (808c2e0 <_Z33system_initialize_user_backup_ramv+0x10>)
 808c2d4:	4903      	ldr	r1, [pc, #12]	; (808c2e4 <_Z33system_initialize_user_backup_ramv+0x14>)
 808c2d6:	1a12      	subs	r2, r2, r0
 808c2d8:	f002 bc1c 	b.w	808eb14 <memcpy>
 808c2dc:	40024000 	.word	0x40024000
 808c2e0:	40024004 	.word	0x40024004
 808c2e4:	08094b88 	.word	0x08094b88

0808c2e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808c2e8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808c2ea:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808c2ec:	461a      	mov	r2, r3
 808c2ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808c2f2:	9300      	str	r3, [sp, #0]
 808c2f4:	f7fe fbac 	bl	808aa50 <system_ctrl_set_result>
}
 808c2f8:	b003      	add	sp, #12
 808c2fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808c300 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 808c300:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808c302:	8843      	ldrh	r3, [r0, #2]
 808c304:	2b0a      	cmp	r3, #10
 808c306:	d008      	beq.n	808c31a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808c308:	2b50      	cmp	r3, #80	; 0x50
 808c30a:	d10b      	bne.n	808c324 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 808c30c:	4b09      	ldr	r3, [pc, #36]	; (808c334 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808c30e:	681b      	ldr	r3, [r3, #0]
 808c310:	b14b      	cbz	r3, 808c326 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 808c312:	b003      	add	sp, #12
 808c314:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 808c318:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 808c31a:	f7ff ffe5 	bl	808c2e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 808c31e:	b003      	add	sp, #12
 808c320:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808c324:	2300      	movs	r3, #0
 808c326:	461a      	mov	r2, r3
 808c328:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808c32c:	9300      	str	r3, [sp, #0]
 808c32e:	f7fe fb8f 	bl	808aa50 <system_ctrl_set_result>
}
 808c332:	e7f4      	b.n	808c31e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 808c334:	20000ee4 	.word	0x20000ee4

0808c338 <module_user_init_hook>:
{
 808c338:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808c33a:	4c12      	ldr	r4, [pc, #72]	; (808c384 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 808c33c:	2100      	movs	r1, #0
 808c33e:	4812      	ldr	r0, [pc, #72]	; (808c388 <module_user_init_hook+0x50>)
 808c340:	f7fe fc9c 	bl	808ac7c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808c344:	4d11      	ldr	r5, [pc, #68]	; (808c38c <module_user_init_hook+0x54>)
 808c346:	6823      	ldr	r3, [r4, #0]
 808c348:	42ab      	cmp	r3, r5
 808c34a:	bf0c      	ite	eq
 808c34c:	2201      	moveq	r2, #1
 808c34e:	2200      	movne	r2, #0
 808c350:	4b0f      	ldr	r3, [pc, #60]	; (808c390 <module_user_init_hook+0x58>)
 808c352:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808c354:	d002      	beq.n	808c35c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 808c356:	f7ff ffbb 	bl	808c2d0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808c35a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808c35c:	f7fe f96e 	bl	808a63c <HAL_RNG_GetRandomNumber>
 808c360:	4604      	mov	r4, r0
    srand(seed);
 808c362:	f002 fbed 	bl	808eb40 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808c366:	4b0b      	ldr	r3, [pc, #44]	; (808c394 <module_user_init_hook+0x5c>)
 808c368:	b113      	cbz	r3, 808c370 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 808c36a:	4620      	mov	r0, r4
 808c36c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808c370:	2100      	movs	r1, #0
 808c372:	4808      	ldr	r0, [pc, #32]	; (808c394 <module_user_init_hook+0x5c>)
 808c374:	f7fe fc1a 	bl	808abac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808c378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808c37c:	2100      	movs	r1, #0
 808c37e:	4806      	ldr	r0, [pc, #24]	; (808c398 <module_user_init_hook+0x60>)
 808c380:	f7fe bb5c 	b.w	808aa3c <system_ctrl_set_app_request_handler>
 808c384:	40024000 	.word	0x40024000
 808c388:	0808c239 	.word	0x0808c239
 808c38c:	9a271c1e 	.word	0x9a271c1e
 808c390:	20000ee0 	.word	0x20000ee0
 808c394:	00000000 	.word	0x00000000
 808c398:	0808c301 	.word	0x0808c301

0808c39c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808c39c:	4770      	bx	lr

0808c39e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 808c39e:	2000      	movs	r0, #0
 808c3a0:	4770      	bx	lr

0808c3a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808c3a2:	b510      	push	{r4, lr}
 808c3a4:	4604      	mov	r4, r0
 808c3a6:	2110      	movs	r1, #16
 808c3a8:	f001 f833 	bl	808d412 <_ZdlPvj>
 808c3ac:	4620      	mov	r0, r4
 808c3ae:	bd10      	pop	{r4, pc}

0808c3b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 808c3b0:	b508      	push	{r3, lr}
      { delete this; }
 808c3b2:	f7ff fff6 	bl	808c3a2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808c3b6:	bd08      	pop	{r3, pc}

0808c3b8 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808c3b8:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808c3ba:	b530      	push	{r4, r5, lr}
        type_(type) {
 808c3bc:	f64f 749c 	movw	r4, #65436	; 0xff9c
 808c3c0:	6002      	str	r2, [r0, #0]
 808c3c2:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 808c3c4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808c3c6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 808c3c8:	680c      	ldr	r4, [r1, #0]
 808c3ca:	8085      	strh	r5, [r0, #4]
 808c3cc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808c3ce:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808c3d0:	bd30      	pop	{r4, r5, pc}

0808c3d2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808c3d2:	b510      	push	{r4, lr}
 808c3d4:	4604      	mov	r4, r0
    free((void*)msg_);
 808c3d6:	6800      	ldr	r0, [r0, #0]
 808c3d8:	f7fe fbf8 	bl	808abcc <free>
}
 808c3dc:	4620      	mov	r0, r4
 808c3de:	bd10      	pop	{r4, pc}

0808c3e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 808c3e0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808c3e2:	68c4      	ldr	r4, [r0, #12]
 808c3e4:	b1f4      	cbz	r4, 808c424 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 808c3e6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808c3e8:	2b02      	cmp	r3, #2
 808c3ea:	d103      	bne.n	808c3f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808c3ec:	f104 000c 	add.w	r0, r4, #12
 808c3f0:	f7ff ffef 	bl	808c3d2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 808c3f4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 808c3f6:	b135      	cbz	r5, 808c406 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 808c3f8:	4628      	mov	r0, r5
 808c3fa:	f7fd fa17 	bl	808982c <_ZNSt14_Function_baseD1Ev>
 808c3fe:	2110      	movs	r1, #16
 808c400:	4628      	mov	r0, r5
 808c402:	f001 f806 	bl	808d412 <_ZdlPvj>
 808c406:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808c408:	b135      	cbz	r5, 808c418 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 808c40a:	4628      	mov	r0, r5
 808c40c:	f7fd fa0e 	bl	808982c <_ZNSt14_Function_baseD1Ev>
 808c410:	2110      	movs	r1, #16
 808c412:	4628      	mov	r0, r5
 808c414:	f000 fffd 	bl	808d412 <_ZdlPvj>
 808c418:	4620      	mov	r0, r4
 808c41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808c41e:	2114      	movs	r1, #20
 808c420:	f000 bff7 	b.w	808d412 <_ZdlPvj>
 808c424:	bd38      	pop	{r3, r4, r5, pc}

0808c426 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808c426:	b510      	push	{r4, lr}
 808c428:	b088      	sub	sp, #32
 808c42a:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808c42c:	4668      	mov	r0, sp
 808c42e:	f7ff f861 	bl	808b4f4 <_ZN6StringC1EPKc>
    return (*fn)(p);
 808c432:	4669      	mov	r1, sp
 808c434:	a804      	add	r0, sp, #16
 808c436:	f7ff f89c 	bl	808b572 <_ZN6StringC1ERKS_>
 808c43a:	a804      	add	r0, sp, #16
 808c43c:	47a0      	blx	r4
 808c43e:	4604      	mov	r4, r0
 808c440:	a804      	add	r0, sp, #16
 808c442:	f7ff f80d 	bl	808b460 <_ZN6StringD1Ev>
    String p(param);
 808c446:	4668      	mov	r0, sp
 808c448:	f7ff f80a 	bl	808b460 <_ZN6StringD1Ev>
}
 808c44c:	4620      	mov	r0, r4
 808c44e:	b008      	add	sp, #32
 808c450:	bd10      	pop	{r4, pc}

0808c452 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 808c452:	b507      	push	{r0, r1, r2, lr}
 808c454:	e9cd 1200 	strd	r1, r2, [sp]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c458:	6882      	ldr	r2, [r0, #8]
 808c45a:	b90a      	cbnz	r2, 808c460 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 808c45c:	f000 ffdd 	bl	808d41a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c460:	4669      	mov	r1, sp
 808c462:	68c3      	ldr	r3, [r0, #12]
 808c464:	aa01      	add	r2, sp, #4
 808c466:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 808c468:	b003      	add	sp, #12
 808c46a:	f85d fb04 	ldr.w	pc, [sp], #4

0808c46e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808c46e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 808c470:	2300      	movs	r3, #0
         size = sizeof(*this);
 808c472:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 808c474:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 808c478:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808c47a:	4669      	mov	r1, sp
 808c47c:	461a      	mov	r2, r3
 808c47e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 808c480:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 808c484:	f8ad 4000 	strh.w	r4, [sp]
 808c488:	f7fe fb50 	bl	808ab2c <spark_function>
}
 808c48c:	b004      	add	sp, #16
 808c48e:	bd10      	pop	{r4, pc}

0808c490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808c490:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c492:	460e      	mov	r6, r1
 808c494:	4604      	mov	r4, r0
 808c496:	f856 3b04 	ldr.w	r3, [r6], #4
 808c49a:	460d      	mov	r5, r1
 808c49c:	a801      	add	r0, sp, #4
 808c49e:	4631      	mov	r1, r6
 808c4a0:	9300      	str	r3, [sp, #0]
 808c4a2:	f7ff fc21 	bl	808bce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c4a6:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808c4a8:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c4aa:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 808c4ac:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808c4ae:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 808c4b0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 808c4b2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808c4b4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 808c4b6:	f7f7 fa57 	bl	8083968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c4ba:	4630      	mov	r0, r6
 808c4bc:	f7f7 fa54 	bl	8083968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 808c4c0:	4628      	mov	r0, r5
 808c4c2:	2108      	movs	r1, #8
 808c4c4:	f000 ffa5 	bl	808d412 <_ZdlPvj>
        return p;
    }
 808c4c8:	4620      	mov	r0, r4
 808c4ca:	b002      	add	sp, #8
 808c4cc:	bd70      	pop	{r4, r5, r6, pc}

0808c4ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 808c4ce:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808c4d0:	b510      	push	{r4, lr}
      if (_M_empty())
 808c4d2:	b90a      	cbnz	r2, 808c4d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808c4d4:	f000 ffa1 	bl	808d41a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c4d8:	68c3      	ldr	r3, [r0, #12]
    }
 808c4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c4de:	4718      	bx	r3

0808c4e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808c4e0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808c4e2:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 808c4e4:	f100 0110 	add.w	r1, r0, #16
 808c4e8:	f7ff fff1 	bl	808c4ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 808c4ec:	bd08      	pop	{r3, pc}

0808c4ee <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 808c4ee:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808c4f0:	b510      	push	{r4, lr}
      if (_M_empty())
 808c4f2:	b90a      	cbnz	r2, 808c4f8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808c4f4:	f000 ff91 	bl	808d41a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c4f8:	68c3      	ldr	r3, [r0, #12]
    }
 808c4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c4fe:	4718      	bx	r3

0808c500 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808c500:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808c502:	6800      	ldr	r0, [r0, #0]
 808c504:	f100 0110 	add.w	r1, r0, #16
 808c508:	f7ff fff1 	bl	808c4ee <_ZNKSt8functionIFvRKbEEclES1_>
      }
 808c50c:	bd08      	pop	{r3, pc}
	...

0808c510 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 808c510:	b538      	push	{r3, r4, r5, lr}
 808c512:	2300      	movs	r3, #0
 808c514:	4604      	mov	r4, r0
 808c516:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c518:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 808c51a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c51c:	f7f3 fdbd 	bl	808009a <_Znwj>
 808c520:	b128      	cbz	r0, 808c52e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 808c522:	2301      	movs	r3, #1
 808c524:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 808c528:	4b02      	ldr	r3, [pc, #8]	; (808c534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 808c52a:	60c5      	str	r5, [r0, #12]
 808c52c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c52e:	6020      	str	r0, [r4, #0]
	}
 808c530:	4620      	mov	r0, r4
 808c532:	bd38      	pop	{r3, r4, r5, pc}
 808c534:	08094438 	.word	0x08094438

0808c538 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 808c538:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808c53a:	2300      	movs	r3, #0
 808c53c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808c53e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808c540:	4604      	mov	r4, r0
 808c542:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808c544:	b12b      	cbz	r3, 808c552 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808c546:	2202      	movs	r2, #2
 808c548:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808c54a:	68eb      	ldr	r3, [r5, #12]
 808c54c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808c54e:	68ab      	ldr	r3, [r5, #8]
 808c550:	60a3      	str	r3, [r4, #8]
    }
 808c552:	4620      	mov	r0, r4
 808c554:	bd38      	pop	{r3, r4, r5, pc}
	...

0808c558 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 808c558:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c55a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808c55c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808c55e:	4668      	mov	r0, sp
 808c560:	f7ff ff2a 	bl	808c3b8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808c564:	f04f 0302 	mov.w	r3, #2
 808c568:	e8d4 2f4f 	ldrexb	r2, [r4]
 808c56c:	2a00      	cmp	r2, #0
 808c56e:	d103      	bne.n	808c578 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 808c570:	e8c4 3f41 	strexb	r1, r3, [r4]
 808c574:	2900      	cmp	r1, #0
 808c576:	d1f7      	bne.n	808c568 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 808c578:	d125      	bne.n	808c5c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 808c57a:	f104 050c 	add.w	r5, r4, #12
 808c57e:	4669      	mov	r1, sp
 808c580:	4628      	mov	r0, r5
 808c582:	f7ff ff19 	bl	808c3b8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 808c586:	2301      	movs	r3, #1
 808c588:	f3bf 8f5b 	dmb	ish
 808c58c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808c58e:	2000      	movs	r0, #0
 808c590:	f3bf 8f5b 	dmb	ish
 808c594:	f104 0308 	add.w	r3, r4, #8
 808c598:	e853 6f00 	ldrex	r6, [r3]
 808c59c:	e843 0200 	strex	r2, r0, [r3]
 808c5a0:	2a00      	cmp	r2, #0
 808c5a2:	d1f9      	bne.n	808c598 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 808c5a4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808c5a8:	b16e      	cbz	r6, 808c5c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 808c5aa:	f7fe fa27 	bl	808a9fc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808c5ae:	b178      	cbz	r0, 808c5d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c5b0:	4629      	mov	r1, r5
 808c5b2:	4630      	mov	r0, r6
 808c5b4:	f7ff ff8b 	bl	808c4ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 808c5b8:	4630      	mov	r0, r6
 808c5ba:	f7fd f937 	bl	808982c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808c5be:	2110      	movs	r1, #16
 808c5c0:	4630      	mov	r0, r6
 808c5c2:	f000 ff26 	bl	808d412 <_ZdlPvj>
        p_->setError(std::move(error));
 808c5c6:	4668      	mov	r0, sp
 808c5c8:	f7ff ff03 	bl	808c3d2 <_ZN8particle5ErrorD1Ev>
    }
 808c5cc:	b009      	add	sp, #36	; 0x24
 808c5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c5d0:	4631      	mov	r1, r6
 808c5d2:	a802      	add	r0, sp, #8
 808c5d4:	f7ff ffb0 	bl	808c538 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808c5d8:	68e0      	ldr	r0, [r4, #12]
 808c5da:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808c5de:	b108      	cbz	r0, 808c5e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 808c5e0:	f002 faf2 	bl	808ebc8 <strdup>
        type_(type) {
 808c5e4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c5e6:	2010      	movs	r0, #16
 808c5e8:	f8ad 501c 	strh.w	r5, [sp, #28]
 808c5ec:	f7f3 fd55 	bl	808009a <_Znwj>
 808c5f0:	4605      	mov	r5, r0
 808c5f2:	b1e8      	cbz	r0, 808c630 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 808c5f4:	2700      	movs	r7, #0
 808c5f6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c5f8:	2018      	movs	r0, #24
 808c5fa:	f7f3 fd4e 	bl	808009a <_Znwj>
 808c5fe:	4604      	mov	r4, r0
 808c600:	b188      	cbz	r0, 808c626 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808c602:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808c604:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808c606:	a802      	add	r0, sp, #8
 808c608:	f7ff fd6b 	bl	808c0e2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c60c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808c60e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c610:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c612:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808c614:	9204      	str	r2, [sp, #16]
 808c616:	68e2      	ldr	r2, [r4, #12]
 808c618:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808c61a:	60e3      	str	r3, [r4, #12]
 808c61c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 808c620:	9205      	str	r2, [sp, #20]
 808c622:	f7ff fec9 	bl	808c3b8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 808c626:	4b08      	ldr	r3, [pc, #32]	; (808c648 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c628:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808c62a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c62c:	4b07      	ldr	r3, [pc, #28]	; (808c64c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 808c62e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 808c630:	a806      	add	r0, sp, #24
 808c632:	f7ff fece 	bl	808c3d2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808c636:	a802      	add	r0, sp, #8
 808c638:	f7fd f8f8 	bl	808982c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c63c:	2200      	movs	r2, #0
 808c63e:	4629      	mov	r1, r5
 808c640:	4803      	ldr	r0, [pc, #12]	; (808c650 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808c642:	f7fe f9e3 	bl	808aa0c <application_thread_invoke>
 808c646:	e7b7      	b.n	808c5b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 808c648:	0808c4e1 	.word	0x0808c4e1
 808c64c:	0808c779 	.word	0x0808c779
 808c650:	0808cd99 	.word	0x0808cd99

0808c654 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808c654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c658:	b08a      	sub	sp, #40	; 0x28
 808c65a:	4605      	mov	r5, r0
 808c65c:	460c      	mov	r4, r1
 808c65e:	4617      	mov	r7, r2
 808c660:	4698      	mov	r8, r3
 808c662:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808c666:	f7fe fa79 	bl	808ab5c <spark_cloud_flag_connected>
 808c66a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 808c66c:	4682      	mov	sl, r0
 808c66e:	bb38      	cbnz	r0, 808c6c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 808c670:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808c674:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808c676:	a905      	add	r1, sp, #20
 808c678:	4630      	mov	r0, r6
 808c67a:	f8ad 3018 	strh.w	r3, [sp, #24]
 808c67e:	f7ff fe9b 	bl	808c3b8 <_ZN8particle5ErrorC1EOS0_>
 808c682:	2014      	movs	r0, #20
 808c684:	f7f3 fd09 	bl	808009a <_Znwj>
 808c688:	4604      	mov	r4, r0
 808c68a:	b148      	cbz	r0, 808c6a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808c68c:	2302      	movs	r3, #2
 808c68e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c690:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808c692:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c696:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 808c698:	4631      	mov	r1, r6
 808c69a:	300c      	adds	r0, #12
 808c69c:	f7ff fe8c 	bl	808c3b8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808c6a0:	4628      	mov	r0, r5
	: __shared_count(__p)
 808c6a2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808c6a4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 808c6a8:	f7ff ff32 	bl	808c510 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808c6ac:	4630      	mov	r0, r6
 808c6ae:	f7ff fe90 	bl	808c3d2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808c6b2:	a805      	add	r0, sp, #20
 808c6b4:	f7ff fe8d 	bl	808c3d2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 808c6b8:	4628      	mov	r0, r5
 808c6ba:	b00a      	add	sp, #40	; 0x28
 808c6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808c6c0:	230c      	movs	r3, #12
 808c6c2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808c6c6:	2014      	movs	r0, #20
 808c6c8:	e9cd aa08 	strd	sl, sl, [sp, #32]
 808c6cc:	9307      	str	r3, [sp, #28]
 808c6ce:	f7f3 fce4 	bl	808009a <_Znwj>
 808c6d2:	4601      	mov	r1, r0
 808c6d4:	b128      	cbz	r0, 808c6e2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808c6d6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 808c6da:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c6de:	f880 a001 	strb.w	sl, [r0, #1]
 808c6e2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808c6e4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 808c6e6:	f7ff ff13 	bl	808c510 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 808c6ea:	4b22      	ldr	r3, [pc, #136]	; (808c774 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808c6ec:	2008      	movs	r0, #8
 808c6ee:	9308      	str	r3, [sp, #32]
 808c6f0:	f7f3 fcd3 	bl	808009a <_Znwj>
 808c6f4:	4682      	mov	sl, r0
 808c6f6:	b128      	cbz	r0, 808c704 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c6f8:	9b03      	ldr	r3, [sp, #12]
 808c6fa:	a904      	add	r1, sp, #16
 808c6fc:	f840 3b04 	str.w	r3, [r0], #4
 808c700:	f7ff faf2 	bl	808bce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c704:	4642      	mov	r2, r8
 808c706:	4639      	mov	r1, r7
 808c708:	4620      	mov	r0, r4
 808c70a:	9600      	str	r6, [sp, #0]
 808c70c:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 808c710:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c714:	f7fe fa32 	bl	808ab7c <spark_send_event>
 808c718:	b9b8      	cbnz	r0, 808c74a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 808c71a:	9b03      	ldr	r3, [sp, #12]
 808c71c:	785b      	ldrb	r3, [r3, #1]
 808c71e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808c722:	b993      	cbnz	r3, 808c74a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 808c724:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 808c728:	a905      	add	r1, sp, #20
 808c72a:	a803      	add	r0, sp, #12
 808c72c:	9205      	str	r2, [sp, #20]
 808c72e:	f8ad 3018 	strh.w	r3, [sp, #24]
 808c732:	f7ff ff11 	bl	808c558 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808c736:	a805      	add	r0, sp, #20
 808c738:	f7ff fe4b 	bl	808c3d2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808c73c:	a805      	add	r0, sp, #20
 808c73e:	9909      	ldr	r1, [sp, #36]	; 0x24
 808c740:	f7ff fea6 	bl	808c490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 808c744:	a806      	add	r0, sp, #24
 808c746:	f7f7 f90f 	bl	8083968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c74a:	9b03      	ldr	r3, [sp, #12]
 808c74c:	a904      	add	r1, sp, #16
 808c74e:	a806      	add	r0, sp, #24
 808c750:	9305      	str	r3, [sp, #20]
 808c752:	f7ff fac9 	bl	808bce8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c756:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808c758:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c75a:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 808c75c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808c75e:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 808c760:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 808c762:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 808c764:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 808c766:	f7f7 f8ff 	bl	8083968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c76a:	a804      	add	r0, sp, #16
 808c76c:	f7f7 f8fc 	bl	8083968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 808c770:	e7a2      	b.n	808c6b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 808c772:	bf00      	nop
 808c774:	0808c83d 	.word	0x0808c83d

0808c778 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 808c778:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c77c:	4605      	mov	r5, r0
	  switch (__op)
 808c77e:	d007      	beq.n	808c790 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 808c780:	2a03      	cmp	r2, #3
 808c782:	d018      	beq.n	808c7b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 808c784:	2a01      	cmp	r2, #1
 808c786:	d101      	bne.n	808c78c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808c788:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c78a:	6003      	str	r3, [r0, #0]
	}
 808c78c:	2000      	movs	r0, #0
 808c78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808c790:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 808c792:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808c794:	f7f3 fc81 	bl	808009a <_Znwj>
 808c798:	4604      	mov	r4, r0
 808c79a:	b150      	cbz	r0, 808c7b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
 808c79c:	4631      	mov	r1, r6
 808c79e:	f7ff fecb 	bl	808c538 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808c7a2:	6930      	ldr	r0, [r6, #16]
 808c7a4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808c7a8:	b108      	cbz	r0, 808c7ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 808c7aa:	f002 fa0d 	bl	808ebc8 <strdup>
        type_(type) {
 808c7ae:	6120      	str	r0, [r4, #16]
 808c7b0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 808c7b2:	602c      	str	r4, [r5, #0]
	}
 808c7b4:	e7ea      	b.n	808c78c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808c7b6:	6804      	ldr	r4, [r0, #0]
 808c7b8:	2c00      	cmp	r4, #0
 808c7ba:	d0e7      	beq.n	808c78c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 808c7bc:	f104 0010 	add.w	r0, r4, #16
 808c7c0:	f7ff fe07 	bl	808c3d2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808c7c4:	4620      	mov	r0, r4
 808c7c6:	f7fd f831 	bl	808982c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808c7ca:	2118      	movs	r1, #24
 808c7cc:	4620      	mov	r0, r4
 808c7ce:	f000 fe20 	bl	808d412 <_ZdlPvj>
 808c7d2:	e7db      	b.n	808c78c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

0808c7d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 808c7d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808c7d6:	2300      	movs	r3, #0
 808c7d8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808c7da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808c7dc:	4604      	mov	r4, r0
 808c7de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808c7e0:	b12b      	cbz	r3, 808c7ee <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808c7e2:	2202      	movs	r2, #2
 808c7e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808c7e6:	68eb      	ldr	r3, [r5, #12]
 808c7e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808c7ea:	68ab      	ldr	r3, [r5, #8]
 808c7ec:	60a3      	str	r3, [r4, #8]
    }
 808c7ee:	4620      	mov	r0, r4
 808c7f0:	bd38      	pop	{r3, r4, r5, pc}

0808c7f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 808c7f2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c7f4:	b570      	push	{r4, r5, r6, lr}
 808c7f6:	4604      	mov	r4, r0
	  switch (__op)
 808c7f8:	d007      	beq.n	808c80a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 808c7fa:	2a03      	cmp	r2, #3
 808c7fc:	d012      	beq.n	808c824 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 808c7fe:	2a01      	cmp	r2, #1
 808c800:	d101      	bne.n	808c806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808c802:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c804:	6003      	str	r3, [r0, #0]
	}
 808c806:	2000      	movs	r0, #0
 808c808:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808c80a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 808c80c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808c80e:	f7f3 fc44 	bl	808009a <_Znwj>
 808c812:	4605      	mov	r5, r0
 808c814:	b120      	cbz	r0, 808c820 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 808c816:	4631      	mov	r1, r6
 808c818:	f7ff ffdc 	bl	808c7d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808c81c:	7c33      	ldrb	r3, [r6, #16]
 808c81e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 808c820:	6025      	str	r5, [r4, #0]
	}
 808c822:	e7f0      	b.n	808c806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808c824:	6804      	ldr	r4, [r0, #0]
 808c826:	2c00      	cmp	r4, #0
 808c828:	d0ed      	beq.n	808c806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 808c82a:	4620      	mov	r0, r4
 808c82c:	f7fc fffe 	bl	808982c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808c830:	2114      	movs	r1, #20
 808c832:	4620      	mov	r0, r4
 808c834:	f000 fded 	bl	808d412 <_ZdlPvj>
 808c838:	e7e5      	b.n	808c806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

0808c83c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808c83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c83e:	4604      	mov	r4, r0
 808c840:	b089      	sub	sp, #36	; 0x24
 808c842:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808c844:	a801      	add	r0, sp, #4
 808c846:	4611      	mov	r1, r2
 808c848:	f7ff fe22 	bl	808c490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808c84c:	b1a4      	cbz	r4, 808c878 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 808c84e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808c850:	b11d      	cbz	r5, 808c85a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 808c852:	4628      	mov	r0, r5
 808c854:	f002 f9b8 	bl	808ebc8 <strdup>
 808c858:	4605      	mov	r5, r0
 808c85a:	a801      	add	r0, sp, #4
 808c85c:	a903      	add	r1, sp, #12
        type_(type) {
 808c85e:	9503      	str	r5, [sp, #12]
 808c860:	f8ad 4010 	strh.w	r4, [sp, #16]
 808c864:	f7ff fe78 	bl	808c558 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808c868:	a803      	add	r0, sp, #12
 808c86a:	f7ff fdb2 	bl	808c3d2 <_ZN8particle5ErrorD1Ev>
 808c86e:	a802      	add	r0, sp, #8
 808c870:	f7f7 f87a 	bl	8083968 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808c874:	b009      	add	sp, #36	; 0x24
 808c876:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808c878:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808c87a:	9d01      	ldr	r5, [sp, #4]
 808c87c:	e8d5 2f4f 	ldrexb	r2, [r5]
 808c880:	2a00      	cmp	r2, #0
 808c882:	d103      	bne.n	808c88c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 808c884:	e8c5 3f41 	strexb	r1, r3, [r5]
 808c888:	2900      	cmp	r1, #0
 808c88a:	d1f7      	bne.n	808c87c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 808c88c:	d1ef      	bne.n	808c86e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 808c88e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 808c890:	f3bf 8f5b 	dmb	ish
 808c894:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808c896:	f3bf 8f5b 	dmb	ish
 808c89a:	1d2b      	adds	r3, r5, #4
 808c89c:	e853 6f00 	ldrex	r6, [r3]
 808c8a0:	e843 4200 	strex	r2, r4, [r3]
 808c8a4:	2a00      	cmp	r2, #0
 808c8a6:	d1f9      	bne.n	808c89c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 808c8a8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808c8ac:	2e00      	cmp	r6, #0
 808c8ae:	d0de      	beq.n	808c86e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 808c8b0:	4620      	mov	r0, r4
 808c8b2:	f7fe f8a3 	bl	808a9fc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808c8b6:	4607      	mov	r7, r0
 808c8b8:	b160      	cbz	r0, 808c8d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c8ba:	4630      	mov	r0, r6
 808c8bc:	f105 010c 	add.w	r1, r5, #12
 808c8c0:	f7ff fe15 	bl	808c4ee <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 808c8c4:	4630      	mov	r0, r6
 808c8c6:	f7fc ffb1 	bl	808982c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808c8ca:	2110      	movs	r1, #16
 808c8cc:	4630      	mov	r0, r6
 808c8ce:	f000 fda0 	bl	808d412 <_ZdlPvj>
 808c8d2:	e7cc      	b.n	808c86e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c8d4:	4631      	mov	r1, r6
 808c8d6:	a803      	add	r0, sp, #12
 808c8d8:	f7ff ff7c 	bl	808c7d4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808c8dc:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c8de:	2010      	movs	r0, #16
 808c8e0:	f88d 301c 	strb.w	r3, [sp, #28]
 808c8e4:	f7f3 fbd9 	bl	808009a <_Znwj>
 808c8e8:	4605      	mov	r5, r0
 808c8ea:	b1d0      	cbz	r0, 808c922 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 808c8ec:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c8ee:	2014      	movs	r0, #20
 808c8f0:	f7f3 fbd3 	bl	808009a <_Znwj>
 808c8f4:	4604      	mov	r4, r0
 808c8f6:	b178      	cbz	r0, 808c918 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 808c8f8:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808c8fa:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808c8fc:	a803      	add	r0, sp, #12
 808c8fe:	f7ff fbf0 	bl	808c0e2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c902:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808c904:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c906:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c908:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808c90a:	9205      	str	r2, [sp, #20]
 808c90c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808c90e:	60e3      	str	r3, [r4, #12]
 808c910:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 808c914:	9206      	str	r2, [sp, #24]
 808c916:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808c918:	4b06      	ldr	r3, [pc, #24]	; (808c934 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c91a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808c91c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c91e:	4b06      	ldr	r3, [pc, #24]	; (808c938 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 808c920:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808c922:	a803      	add	r0, sp, #12
 808c924:	f7fc ff82 	bl	808982c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c928:	2200      	movs	r2, #0
 808c92a:	4629      	mov	r1, r5
 808c92c:	4803      	ldr	r0, [pc, #12]	; (808c93c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 808c92e:	f7fe f86d 	bl	808aa0c <application_thread_invoke>
 808c932:	e7c7      	b.n	808c8c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 808c934:	0808c501 	.word	0x0808c501
 808c938:	0808c7f3 	.word	0x0808c7f3
 808c93c:	0808cd99 	.word	0x0808cd99

0808c940 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808c940:	4770      	bx	lr

0808c942 <_ZN9IPAddressD0Ev>:
 808c942:	b510      	push	{r4, lr}
 808c944:	4604      	mov	r4, r0
 808c946:	2108      	movs	r1, #8
 808c948:	f000 fd63 	bl	808d412 <_ZdlPvj>
 808c94c:	4620      	mov	r0, r4
 808c94e:	bd10      	pop	{r4, pc}

0808c950 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c952:	460e      	mov	r6, r1
 808c954:	2400      	movs	r4, #0
 808c956:	f100 0708 	add.w	r7, r0, #8
 808c95a:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 808c95c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 808c960:	220a      	movs	r2, #10
 808c962:	4630      	mov	r0, r6
 808c964:	f7fe ffff 	bl	808b966 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808c968:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808c96a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 808c96c:	d101      	bne.n	808c972 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 808c96e:	4620      	mov	r0, r4
 808c970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 808c972:	2c00      	cmp	r4, #0
 808c974:	d0f2      	beq.n	808c95c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808c976:	212e      	movs	r1, #46	; 0x2e
 808c978:	4630      	mov	r0, r6
 808c97a:	f7fe ffd1 	bl	808b920 <_ZN5Print5printEc>
 808c97e:	4404      	add	r4, r0
 808c980:	e7ec      	b.n	808c95c <_ZNK9IPAddress7printToER5Print+0xc>
	...

0808c984 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 808c984:	4a02      	ldr	r2, [pc, #8]	; (808c990 <_ZN9IPAddressC1Ev+0xc>)
 808c986:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808c988:	2200      	movs	r2, #0
 808c98a:	6042      	str	r2, [r0, #4]
}
 808c98c:	4770      	bx	lr
 808c98e:	bf00      	nop
 808c990:	08094454 	.word	0x08094454

0808c994 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 808c994:	4a02      	ldr	r2, [pc, #8]	; (808c9a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808c996:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 808c998:	680a      	ldr	r2, [r1, #0]
 808c99a:	6042      	str	r2, [r0, #4]
}
 808c99c:	4770      	bx	lr
 808c99e:	bf00      	nop
 808c9a0:	08094454 	.word	0x08094454

0808c9a4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 808c9a4:	4a01      	ldr	r2, [pc, #4]	; (808c9ac <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 808c9a6:	e9c0 2100 	strd	r2, r1, [r0]
}
 808c9aa:	4770      	bx	lr
 808c9ac:	08094454 	.word	0x08094454

0808c9b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 808c9b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808c9b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808c9b6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 808c9ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 808c9be:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 808c9c2:	6044      	str	r4, [r0, #4]
}
 808c9c4:	bd10      	pop	{r4, pc}
	...

0808c9c8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808c9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808c9ca:	4d04      	ldr	r5, [pc, #16]	; (808c9dc <_ZN9IPAddressC1Ehhhh+0x14>)
 808c9cc:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808c9ce:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808c9d2:	9500      	str	r5, [sp, #0]
 808c9d4:	f7ff ffec 	bl	808c9b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808c9d8:	b003      	add	sp, #12
 808c9da:	bd30      	pop	{r4, r5, pc}
 808c9dc:	08094454 	.word	0x08094454

0808c9e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808c9e0:	7441      	strb	r1, [r0, #17]
}
 808c9e2:	4770      	bx	lr

0808c9e4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808c9e4:	4770      	bx	lr

0808c9e6 <_ZN9USBSerial4readEv>:
{
 808c9e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808c9e8:	2100      	movs	r1, #0
 808c9ea:	7c00      	ldrb	r0, [r0, #16]
 808c9ec:	f7fd ffbe 	bl	808a96c <HAL_USB_USART_Receive_Data>
}
 808c9f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808c9f4:	bd08      	pop	{r3, pc}

0808c9f6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 808c9f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808c9f8:	2101      	movs	r1, #1
 808c9fa:	7c00      	ldrb	r0, [r0, #16]
 808c9fc:	f7fd ffb6 	bl	808a96c <HAL_USB_USART_Receive_Data>
}
 808ca00:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808ca04:	bd08      	pop	{r3, pc}

0808ca06 <_ZN9USBSerial17availableForWriteEv>:
{
 808ca06:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808ca08:	7c00      	ldrb	r0, [r0, #16]
 808ca0a:	f7fd ffa7 	bl	808a95c <HAL_USB_USART_Available_Data_For_Write>
}
 808ca0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808ca12:	bd08      	pop	{r3, pc}

0808ca14 <_ZN9USBSerial9availableEv>:
{
 808ca14:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808ca16:	7c00      	ldrb	r0, [r0, #16]
 808ca18:	f7fd ff98 	bl	808a94c <HAL_USB_USART_Available_Data>
}
 808ca1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808ca20:	bd08      	pop	{r3, pc}

0808ca22 <_ZN9USBSerial5writeEh>:
{
 808ca22:	b538      	push	{r3, r4, r5, lr}
 808ca24:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808ca26:	7c00      	ldrb	r0, [r0, #16]
{
 808ca28:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808ca2a:	f7fd ff97 	bl	808a95c <HAL_USB_USART_Available_Data_For_Write>
 808ca2e:	2800      	cmp	r0, #0
 808ca30:	dc01      	bgt.n	808ca36 <_ZN9USBSerial5writeEh+0x14>
 808ca32:	7c60      	ldrb	r0, [r4, #17]
 808ca34:	b128      	cbz	r0, 808ca42 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808ca36:	4629      	mov	r1, r5
 808ca38:	7c20      	ldrb	r0, [r4, #16]
 808ca3a:	f7fd ff9f 	bl	808a97c <HAL_USB_USART_Send_Data>
 808ca3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 808ca42:	bd38      	pop	{r3, r4, r5, pc}

0808ca44 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 808ca44:	7c00      	ldrb	r0, [r0, #16]
 808ca46:	f7fd bfa1 	b.w	808a98c <HAL_USB_USART_Flush_Data>

0808ca4a <_ZN9USBSerialD0Ev>:
 808ca4a:	b510      	push	{r4, lr}
 808ca4c:	4604      	mov	r4, r0
 808ca4e:	2114      	movs	r1, #20
 808ca50:	f000 fcdf 	bl	808d412 <_ZdlPvj>
 808ca54:	4620      	mov	r0, r4
 808ca56:	bd10      	pop	{r4, pc}

0808ca58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808ca58:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808ca5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808ca5e:	4604      	mov	r4, r0
 808ca60:	4608      	mov	r0, r1
 808ca62:	2100      	movs	r1, #0
 808ca64:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808ca68:	4b04      	ldr	r3, [pc, #16]	; (808ca7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808ca6a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808ca6c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 808ca6e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 808ca70:	4611      	mov	r1, r2
  _blocking = true;
 808ca72:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 808ca74:	f7fd ff5a 	bl	808a92c <HAL_USB_USART_Init>
}
 808ca78:	4620      	mov	r0, r4
 808ca7a:	bd10      	pop	{r4, pc}
 808ca7c:	08094468 	.word	0x08094468

0808ca80 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808ca80:	2200      	movs	r2, #0
 808ca82:	7c00      	ldrb	r0, [r0, #16]
 808ca84:	f7fd bf5a 	b.w	808a93c <HAL_USB_USART_Begin>

0808ca88 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808ca88:	b510      	push	{r4, lr}
 808ca8a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808ca8c:	2214      	movs	r2, #20
 808ca8e:	2100      	movs	r1, #0
 808ca90:	f002 f84e 	bl	808eb30 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808ca94:	4b05      	ldr	r3, [pc, #20]	; (808caac <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808ca96:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 808ca98:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808ca9a:	4b05      	ldr	r3, [pc, #20]	; (808cab0 <_Z19acquireSerialBufferv+0x28>)
 808ca9c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808ca9e:	f240 1301 	movw	r3, #257	; 0x101
 808caa2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808caa4:	2381      	movs	r3, #129	; 0x81
 808caa6:	8223      	strh	r3, [r4, #16]
}
 808caa8:	bd10      	pop	{r4, pc}
 808caaa:	bf00      	nop
 808caac:	20000f18 	.word	0x20000f18
 808cab0:	20001019 	.word	0x20001019

0808cab4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808cab4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808cab6:	4d0f      	ldr	r5, [pc, #60]	; (808caf4 <_Z16_fetch_usbserialv+0x40>)
{
 808cab8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808caba:	a801      	add	r0, sp, #4
 808cabc:	f7ff ffe4 	bl	808ca88 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808cac0:	7829      	ldrb	r1, [r5, #0]
 808cac2:	f3bf 8f5b 	dmb	ish
 808cac6:	f011 0401 	ands.w	r4, r1, #1
 808caca:	d110      	bne.n	808caee <_Z16_fetch_usbserialv+0x3a>
 808cacc:	4628      	mov	r0, r5
 808cace:	f7f3 faea 	bl	80800a6 <__cxa_guard_acquire>
 808cad2:	b160      	cbz	r0, 808caee <_Z16_fetch_usbserialv+0x3a>
 808cad4:	4621      	mov	r1, r4
 808cad6:	aa01      	add	r2, sp, #4
 808cad8:	4807      	ldr	r0, [pc, #28]	; (808caf8 <_Z16_fetch_usbserialv+0x44>)
 808cada:	f7ff ffbd 	bl	808ca58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808cade:	4628      	mov	r0, r5
 808cae0:	f7f3 fae6 	bl	80800b0 <__cxa_guard_release>
 808cae4:	4a05      	ldr	r2, [pc, #20]	; (808cafc <_Z16_fetch_usbserialv+0x48>)
 808cae6:	4906      	ldr	r1, [pc, #24]	; (808cb00 <_Z16_fetch_usbserialv+0x4c>)
 808cae8:	4803      	ldr	r0, [pc, #12]	; (808caf8 <_Z16_fetch_usbserialv+0x44>)
 808caea:	f000 fc8d 	bl	808d408 <__aeabi_atexit>
	return _usbserial;
}
 808caee:	4802      	ldr	r0, [pc, #8]	; (808caf8 <_Z16_fetch_usbserialv+0x44>)
 808caf0:	b007      	add	sp, #28
 808caf2:	bd30      	pop	{r4, r5, pc}
 808caf4:	20000ee8 	.word	0x20000ee8
 808caf8:	20000ef0 	.word	0x20000ef0
 808cafc:	20000328 	.word	0x20000328
 808cb00:	0808c9e5 	.word	0x0808c9e5

0808cb04 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808cb04:	b510      	push	{r4, lr}
 808cb06:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808cb08:	2214      	movs	r2, #20
 808cb0a:	2100      	movs	r1, #0
 808cb0c:	f002 f810 	bl	808eb30 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808cb10:	4b05      	ldr	r3, [pc, #20]	; (808cb28 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808cb12:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 808cb14:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808cb16:	4b05      	ldr	r3, [pc, #20]	; (808cb2c <_Z23acquireUSBSerial1Bufferv+0x28>)
 808cb18:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808cb1a:	f240 1301 	movw	r3, #257	; 0x101
 808cb1e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808cb20:	2381      	movs	r3, #129	; 0x81
 808cb22:	8223      	strh	r3, [r4, #16]
}
 808cb24:	bd10      	pop	{r4, pc}
 808cb26:	bf00      	nop
 808cb28:	2000109a 	.word	0x2000109a
 808cb2c:	2000119b 	.word	0x2000119b

0808cb30 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808cb30:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808cb32:	4c0f      	ldr	r4, [pc, #60]	; (808cb70 <_Z17_fetch_usbserial1v+0x40>)
{
 808cb34:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808cb36:	a801      	add	r0, sp, #4
 808cb38:	f7ff ffe4 	bl	808cb04 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808cb3c:	7823      	ldrb	r3, [r4, #0]
 808cb3e:	f3bf 8f5b 	dmb	ish
 808cb42:	07db      	lsls	r3, r3, #31
 808cb44:	d410      	bmi.n	808cb68 <_Z17_fetch_usbserial1v+0x38>
 808cb46:	4620      	mov	r0, r4
 808cb48:	f7f3 faad 	bl	80800a6 <__cxa_guard_acquire>
 808cb4c:	b160      	cbz	r0, 808cb68 <_Z17_fetch_usbserial1v+0x38>
 808cb4e:	2101      	movs	r1, #1
 808cb50:	aa01      	add	r2, sp, #4
 808cb52:	4808      	ldr	r0, [pc, #32]	; (808cb74 <_Z17_fetch_usbserial1v+0x44>)
 808cb54:	f7ff ff80 	bl	808ca58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808cb58:	4620      	mov	r0, r4
 808cb5a:	f7f3 faa9 	bl	80800b0 <__cxa_guard_release>
 808cb5e:	4a06      	ldr	r2, [pc, #24]	; (808cb78 <_Z17_fetch_usbserial1v+0x48>)
 808cb60:	4906      	ldr	r1, [pc, #24]	; (808cb7c <_Z17_fetch_usbserial1v+0x4c>)
 808cb62:	4804      	ldr	r0, [pc, #16]	; (808cb74 <_Z17_fetch_usbserial1v+0x44>)
 808cb64:	f000 fc50 	bl	808d408 <__aeabi_atexit>
  return _usbserial1;
}
 808cb68:	4802      	ldr	r0, [pc, #8]	; (808cb74 <_Z17_fetch_usbserial1v+0x44>)
 808cb6a:	b006      	add	sp, #24
 808cb6c:	bd10      	pop	{r4, pc}
 808cb6e:	bf00      	nop
 808cb70:	20000eec 	.word	0x20000eec
 808cb74:	20000f04 	.word	0x20000f04
 808cb78:	20000328 	.word	0x20000328
 808cb7c:	0808c9e5 	.word	0x0808c9e5

0808cb80 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808cb80:	4700      	bx	r0
	...

0808cb84 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 808cb84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 808cb88:	2400      	movs	r4, #0
{
 808cb8a:	461d      	mov	r5, r3
 808cb8c:	460f      	mov	r7, r1
 808cb8e:	4690      	mov	r8, r2
 808cb90:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 808cb92:	f7fd fd3b 	bl	808a60c <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808cb96:	2304      	movs	r3, #4
  if (priority >= 0) {
 808cb98:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808cb9a:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 808cb9e:	bfa8      	it	ge
 808cba0:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 808cba4:	f8ad 400d 	strh.w	r4, [sp, #13]
 808cba8:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 808cbac:	bfa4      	itt	ge
 808cbae:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 808cbb0:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808cbb4:	463a      	mov	r2, r7
 808cbb6:	4643      	mov	r3, r8
 808cbb8:	4630      	mov	r0, r6
 808cbba:	4906      	ldr	r1, [pc, #24]	; (808cbd4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 808cbbc:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808cbbe:	bfa8      	it	ge
 808cbc0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808cbc4:	f7fd fd1a 	bl	808a5fc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 808cbc8:	fab0 f080 	clz	r0, r0
 808cbcc:	0940      	lsrs	r0, r0, #5
 808cbce:	b004      	add	sp, #16
 808cbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808cbd4:	0808cb81 	.word	0x0808cb81

0808cbd8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808cbd8:	2200      	movs	r2, #0
 808cbda:	6840      	ldr	r0, [r0, #4]
 808cbdc:	4611      	mov	r1, r2
 808cbde:	f7fd bf6d 	b.w	808aabc <network_ready>

0808cbe2 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808cbe2:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 808cbe4:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808cbe6:	b085      	sub	sp, #20
 808cbe8:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cbea:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808cbec:	460f      	mov	r7, r1
 808cbee:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808cbf0:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cbf2:	f002 fd67 	bl	808f6c4 <strlen>
 808cbf6:	687b      	ldr	r3, [r7, #4]
 808cbf8:	b281      	uxth	r1, r0
 808cbfa:	9600      	str	r6, [sp, #0]
 808cbfc:	4628      	mov	r0, r5
 808cbfe:	aa03      	add	r2, sp, #12
 808cc00:	f7fd fe84 	bl	808a90c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808cc04:	b130      	cbz	r0, 808cc14 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808cc06:	4631      	mov	r1, r6
 808cc08:	4620      	mov	r0, r4
 808cc0a:	f7ff fecb 	bl	808c9a4 <_ZN9IPAddressC1Em>
    }
 808cc0e:	4620      	mov	r0, r4
 808cc10:	b005      	add	sp, #20
 808cc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808cc14:	4620      	mov	r0, r4
 808cc16:	a903      	add	r1, sp, #12
 808cc18:	f7ff febc 	bl	808c994 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 808cc1c:	e7f7      	b.n	808cc0e <_ZN5spark13CellularClass7resolveEPKc+0x2c>

0808cc1e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 808cc1e:	2200      	movs	r2, #0
 808cc20:	6840      	ldr	r0, [r0, #4]
 808cc22:	4611      	mov	r1, r2
 808cc24:	f7fd bf6a 	b.w	808aafc <network_listening>

0808cc28 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808cc28:	2200      	movs	r2, #0
 808cc2a:	6840      	ldr	r0, [r0, #4]
 808cc2c:	4611      	mov	r1, r2
 808cc2e:	f7fd bf75 	b.w	808ab1c <network_get_listen_timeout>

0808cc32 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808cc32:	2200      	movs	r2, #0
 808cc34:	6840      	ldr	r0, [r0, #4]
 808cc36:	f7fd bf69 	b.w	808ab0c <network_set_listen_timeout>

0808cc3a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808cc3a:	2200      	movs	r2, #0
 808cc3c:	6840      	ldr	r0, [r0, #4]
 808cc3e:	f081 0101 	eor.w	r1, r1, #1
 808cc42:	f7fd bf53 	b.w	808aaec <network_listen>

0808cc46 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808cc46:	2300      	movs	r3, #0
 808cc48:	6840      	ldr	r0, [r0, #4]
 808cc4a:	461a      	mov	r2, r3
 808cc4c:	4619      	mov	r1, r3
 808cc4e:	f7fd bf3d 	b.w	808aacc <network_on>

0808cc52 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 808cc52:	2200      	movs	r2, #0
 808cc54:	6840      	ldr	r0, [r0, #4]
 808cc56:	4611      	mov	r1, r2
 808cc58:	f7fd bf20 	b.w	808aa9c <network_connecting>

0808cc5c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808cc5c:	2200      	movs	r2, #0
 808cc5e:	2102      	movs	r1, #2
 808cc60:	6840      	ldr	r0, [r0, #4]
 808cc62:	f7fd bf23 	b.w	808aaac <network_disconnect>

0808cc66 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808cc66:	2300      	movs	r3, #0
 808cc68:	6840      	ldr	r0, [r0, #4]
 808cc6a:	461a      	mov	r2, r3
 808cc6c:	f7fd bf0e 	b.w	808aa8c <network_connect>

0808cc70 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808cc70:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808cc72:	2428      	movs	r4, #40	; 0x28
 808cc74:	4b07      	ldr	r3, [pc, #28]	; (808cc94 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808cc76:	4622      	mov	r2, r4
 808cc78:	4618      	mov	r0, r3
 808cc7a:	2100      	movs	r1, #0
 808cc7c:	f001 ff58 	bl	808eb30 <memset>
        cid = -1;
 808cc80:	f04f 32ff 	mov.w	r2, #4294967295
 808cc84:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808cc86:	2204      	movs	r2, #4
 808cc88:	4b03      	ldr	r3, [pc, #12]	; (808cc98 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808cc8a:	8004      	strh	r4, [r0, #0]
 808cc8c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808cc8e:	4a03      	ldr	r2, [pc, #12]	; (808cc9c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 808cc90:	601a      	str	r2, [r3, #0]
 808cc92:	bd10      	pop	{r4, pc}
 808cc94:	20001224 	.word	0x20001224
 808cc98:	2000121c 	.word	0x2000121c
 808cc9c:	08094498 	.word	0x08094498

0808cca0 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808cca0:	7441      	strb	r1, [r0, #17]
}
 808cca2:	4770      	bx	lr

0808cca4 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 808cca4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 808cca6:	7c00      	ldrb	r0, [r0, #16]
 808cca8:	f7fd fd68 	bl	808a77c <hal_usart_available_data_for_write>
}
 808ccac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808ccb0:	bd08      	pop	{r3, pc}

0808ccb2 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808ccb2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808ccb4:	7c00      	ldrb	r0, [r0, #16]
 808ccb6:	f7fd fd39 	bl	808a72c <hal_usart_available>
}
 808ccba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808ccbe:	bd08      	pop	{r3, pc}

0808ccc0 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808ccc0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 808ccc2:	7c00      	ldrb	r0, [r0, #16]
 808ccc4:	f7fd fd42 	bl	808a74c <hal_usart_peek>
}
 808ccc8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808cccc:	bd08      	pop	{r3, pc}

0808ccce <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808ccce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808ccd0:	7c00      	ldrb	r0, [r0, #16]
 808ccd2:	f7fd fd33 	bl	808a73c <hal_usart_read>
}
 808ccd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808ccda:	bd08      	pop	{r3, pc}

0808ccdc <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808ccdc:	7c00      	ldrb	r0, [r0, #16]
 808ccde:	f7fd bd3d 	b.w	808a75c <hal_usart_flush>

0808cce2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808cce2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808cce4:	7c46      	ldrb	r6, [r0, #17]
{
 808cce6:	4604      	mov	r4, r0
 808cce8:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808ccea:	b12e      	cbz	r6, 808ccf8 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808ccec:	4629      	mov	r1, r5
 808ccee:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808ccf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 808ccf4:	f7fd bd12 	b.w	808a71c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808ccf8:	7c00      	ldrb	r0, [r0, #16]
 808ccfa:	f7fd fd3f 	bl	808a77c <hal_usart_available_data_for_write>
 808ccfe:	2800      	cmp	r0, #0
 808cd00:	dcf4      	bgt.n	808ccec <_ZN11USARTSerial5writeEh+0xa>
}
 808cd02:	4630      	mov	r0, r6
 808cd04:	bd70      	pop	{r4, r5, r6, pc}
	...

0808cd08 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 808cd08:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808cd0c:	b510      	push	{r4, lr}
 808cd0e:	4604      	mov	r4, r0
 808cd10:	4608      	mov	r0, r1
 808cd12:	4611      	mov	r1, r2
 808cd14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808cd18:	e9c4 c201 	strd	ip, r2, [r4, #4]
 808cd1c:	4a04      	ldr	r2, [pc, #16]	; (808cd30 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808cd1e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808cd20:	6022      	str	r2, [r4, #0]
  _blocking = true;
 808cd22:	2201      	movs	r2, #1
 808cd24:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 808cd26:	461a      	mov	r2, r3
 808cd28:	f7fd fcf0 	bl	808a70c <hal_usart_init>
}
 808cd2c:	4620      	mov	r0, r4
 808cd2e:	bd10      	pop	{r4, pc}
 808cd30:	080944cc 	.word	0x080944cc

0808cd34 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 808cd34:	2300      	movs	r3, #0
 808cd36:	7c00      	ldrb	r0, [r0, #16]
 808cd38:	f7fd bd28 	b.w	808a78c <hal_usart_begin_config>

0808cd3c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 808cd3c:	2200      	movs	r2, #0
 808cd3e:	f7ff bff9 	b.w	808cd34 <_ZN11USARTSerial5beginEmm>

0808cd42 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 808cd42:	7c00      	ldrb	r0, [r0, #16]
 808cd44:	f7fd bd12 	b.w	808a76c <hal_usart_is_enabled>

0808cd48 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808cd48:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808cd4a:	4d0d      	ldr	r5, [pc, #52]	; (808cd80 <_Z22__fetch_global_Serial1v+0x38>)
 808cd4c:	7829      	ldrb	r1, [r5, #0]
 808cd4e:	f3bf 8f5b 	dmb	ish
 808cd52:	f011 0401 	ands.w	r4, r1, #1
 808cd56:	d111      	bne.n	808cd7c <_Z22__fetch_global_Serial1v+0x34>
 808cd58:	4628      	mov	r0, r5
 808cd5a:	f7f3 f9a4 	bl	80800a6 <__cxa_guard_acquire>
 808cd5e:	b168      	cbz	r0, 808cd7c <_Z22__fetch_global_Serial1v+0x34>
 808cd60:	4621      	mov	r1, r4
 808cd62:	4a08      	ldr	r2, [pc, #32]	; (808cd84 <_Z22__fetch_global_Serial1v+0x3c>)
 808cd64:	4b08      	ldr	r3, [pc, #32]	; (808cd88 <_Z22__fetch_global_Serial1v+0x40>)
 808cd66:	4809      	ldr	r0, [pc, #36]	; (808cd8c <_Z22__fetch_global_Serial1v+0x44>)
 808cd68:	f7ff ffce 	bl	808cd08 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808cd6c:	4628      	mov	r0, r5
 808cd6e:	f7f3 f99f 	bl	80800b0 <__cxa_guard_release>
 808cd72:	4a07      	ldr	r2, [pc, #28]	; (808cd90 <_Z22__fetch_global_Serial1v+0x48>)
 808cd74:	4907      	ldr	r1, [pc, #28]	; (808cd94 <_Z22__fetch_global_Serial1v+0x4c>)
 808cd76:	4805      	ldr	r0, [pc, #20]	; (808cd8c <_Z22__fetch_global_Serial1v+0x44>)
 808cd78:	f000 fb46 	bl	808d408 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808cd7c:	4803      	ldr	r0, [pc, #12]	; (808cd8c <_Z22__fetch_global_Serial1v+0x44>)
 808cd7e:	bd38      	pop	{r3, r4, r5, pc}
 808cd80:	2000124c 	.word	0x2000124c
 808cd84:	20001250 	.word	0x20001250
 808cd88:	200012d4 	.word	0x200012d4
 808cd8c:	20001358 	.word	0x20001358
 808cd90:	20000328 	.word	0x20000328
 808cd94:	08080b51 	.word	0x08080b51

0808cd98 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808cd98:	b510      	push	{r4, lr}
      if (_M_empty())
 808cd9a:	6883      	ldr	r3, [r0, #8]
 808cd9c:	4604      	mov	r4, r0
 808cd9e:	b90b      	cbnz	r3, 808cda4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808cda0:	f000 fb3b 	bl	808d41a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808cda4:	68c3      	ldr	r3, [r0, #12]
 808cda6:	4798      	blx	r3
      if (_M_manager)
 808cda8:	68a3      	ldr	r3, [r4, #8]
 808cdaa:	b11b      	cbz	r3, 808cdb4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808cdac:	2203      	movs	r2, #3
 808cdae:	4621      	mov	r1, r4
 808cdb0:	4620      	mov	r0, r4
 808cdb2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808cdb4:	4620      	mov	r0, r4
}
 808cdb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 808cdba:	2110      	movs	r1, #16
 808cdbc:	f000 bb29 	b.w	808d412 <_ZdlPvj>

0808cdc0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 808cdc0:	4770      	bx	lr

0808cdc2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808cdc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808cdc4:	4606      	mov	r6, r0
 808cdc6:	4615      	mov	r5, r2
 808cdc8:	460c      	mov	r4, r1
 808cdca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808cdcc:	42bc      	cmp	r4, r7
 808cdce:	d006      	beq.n	808cdde <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808cdd0:	6833      	ldr	r3, [r6, #0]
 808cdd2:	4630      	mov	r0, r6
 808cdd4:	689b      	ldr	r3, [r3, #8]
 808cdd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 808cdda:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 808cddc:	e7f6      	b.n	808cdcc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 808cdde:	4628      	mov	r0, r5
 808cde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808cde2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808cde2:	2200      	movs	r2, #0
 808cde4:	7c00      	ldrb	r0, [r0, #16]
 808cde6:	f7fd bcf1 	b.w	808a7cc <hal_i2c_write>

0808cdea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 808cdea:	2100      	movs	r1, #0
 808cdec:	7c00      	ldrb	r0, [r0, #16]
 808cdee:	f7fd bcf5 	b.w	808a7dc <hal_i2c_available>

0808cdf2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808cdf2:	2100      	movs	r1, #0
 808cdf4:	7c00      	ldrb	r0, [r0, #16]
 808cdf6:	f7fd bcf9 	b.w	808a7ec <hal_i2c_read>

0808cdfa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 808cdfa:	2100      	movs	r1, #0
 808cdfc:	7c00      	ldrb	r0, [r0, #16]
 808cdfe:	f7fd bcfd 	b.w	808a7fc <hal_i2c_peek>

0808ce02 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 808ce02:	2100      	movs	r1, #0
 808ce04:	7c00      	ldrb	r0, [r0, #16]
 808ce06:	f7fd bd01 	b.w	808a80c <hal_i2c_flush>

0808ce0a <_ZN7TwoWireD0Ev>:
 808ce0a:	b510      	push	{r4, lr}
 808ce0c:	4604      	mov	r4, r0
 808ce0e:	2114      	movs	r1, #20
 808ce10:	f000 faff 	bl	808d412 <_ZdlPvj>
 808ce14:	4620      	mov	r0, r4
 808ce16:	bd10      	pop	{r4, pc}

0808ce18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808ce18:	b510      	push	{r4, lr}
 808ce1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808ce1e:	4604      	mov	r4, r0
 808ce20:	4608      	mov	r0, r1
 808ce22:	2100      	movs	r1, #0
 808ce24:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808ce28:	4b03      	ldr	r3, [pc, #12]	; (808ce38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 808ce2a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808ce2c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 808ce2e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 808ce30:	f7fd fcfc 	bl	808a82c <hal_i2c_init>
}
 808ce34:	4620      	mov	r0, r4
 808ce36:	bd10      	pop	{r4, pc}
 808ce38:	080944fc 	.word	0x080944fc

0808ce3c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808ce3c:	2300      	movs	r3, #0
 808ce3e:	7c00      	ldrb	r0, [r0, #16]
 808ce40:	461a      	mov	r2, r3
 808ce42:	4619      	mov	r1, r3
 808ce44:	f7fd bcaa 	b.w	808a79c <hal_i2c_begin>

0808ce48 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 808ce48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808ce4a:	2200      	movs	r2, #0
 808ce4c:	2314      	movs	r3, #20
 808ce4e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808ce52:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 808ce56:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 808ce58:	7c00      	ldrb	r0, [r0, #16]
 808ce5a:	f88d 3008 	strb.w	r3, [sp, #8]
 808ce5e:	684b      	ldr	r3, [r1, #4]
 808ce60:	9303      	str	r3, [sp, #12]
 808ce62:	68cb      	ldr	r3, [r1, #12]
 808ce64:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808ce66:	7a0b      	ldrb	r3, [r1, #8]
 808ce68:	a901      	add	r1, sp, #4
 808ce6a:	9305      	str	r3, [sp, #20]
 808ce6c:	f7fd fcf6 	bl	808a85c <hal_i2c_request_ex>
}
 808ce70:	b007      	add	sp, #28
 808ce72:	f85d fb04 	ldr.w	pc, [sp], #4

0808ce76 <_ZN7TwoWire11requestFromEhjh>:
{
 808ce76:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808ce78:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808ce7a:	f88d 1000 	strb.w	r1, [sp]
 808ce7e:	f04f 0164 	mov.w	r1, #100	; 0x64
 808ce82:	bf18      	it	ne
 808ce84:	2301      	movne	r3, #1
 808ce86:	9103      	str	r1, [sp, #12]
 808ce88:	4669      	mov	r1, sp
    size_ = size;
 808ce8a:	9201      	str	r2, [sp, #4]
 808ce8c:	f88d 3008 	strb.w	r3, [sp, #8]
 808ce90:	f7ff ffda 	bl	808ce48 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 808ce94:	b005      	add	sp, #20
 808ce96:	f85d fb04 	ldr.w	pc, [sp], #4

0808ce9a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 808ce9a:	2301      	movs	r3, #1
 808ce9c:	f7ff bfeb 	b.w	808ce76 <_ZN7TwoWire11requestFromEhjh>

0808cea0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 808cea0:	2200      	movs	r2, #0
 808cea2:	7c00      	ldrb	r0, [r0, #16]
 808cea4:	f7fd bc82 	b.w	808a7ac <hal_i2c_begin_transmission>

0808cea8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 808cea8:	b2c9      	uxtb	r1, r1
 808ceaa:	f7ff bff9 	b.w	808cea0 <_ZN7TwoWire17beginTransmissionEh>

0808ceae <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 808ceae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808ceb0:	2200      	movs	r2, #0
 808ceb2:	460b      	mov	r3, r1
 808ceb4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808ceb8:	2214      	movs	r2, #20
 808ceba:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 808cebe:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 808cec0:	7809      	ldrb	r1, [r1, #0]
    };
 808cec2:	9203      	str	r2, [sp, #12]
 808cec4:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808cec6:	7a1b      	ldrb	r3, [r3, #8]
    };
 808cec8:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 808ceca:	7c00      	ldrb	r0, [r0, #16]
 808cecc:	aa01      	add	r2, sp, #4
 808cece:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808ced2:	9305      	str	r3, [sp, #20]
 808ced4:	f7fd fc6a 	bl	808a7ac <hal_i2c_begin_transmission>
}
 808ced8:	b007      	add	sp, #28
 808ceda:	f85d fb04 	ldr.w	pc, [sp], #4

0808cede <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 808cede:	2200      	movs	r2, #0
 808cee0:	7c00      	ldrb	r0, [r0, #16]
 808cee2:	f7fd bc6b 	b.w	808a7bc <hal_i2c_end_transmission>

0808cee6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 808cee6:	2101      	movs	r1, #1
 808cee8:	f7ff bff9 	b.w	808cede <_ZN7TwoWire15endTransmissionEh>

0808ceec <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
 808ceec:	2100      	movs	r1, #0
 808ceee:	7c00      	ldrb	r0, [r0, #16]
 808cef0:	f7fd bc94 	b.w	808a81c <hal_i2c_is_enabled>

0808cef4 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808cef4:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 808cef6:	2100      	movs	r1, #0
 808cef8:	7c00      	ldrb	r0, [r0, #16]
 808cefa:	f7fd fc9f 	bl	808a83c <hal_i2c_lock>
}
 808cefe:	fab0 f080 	clz	r0, r0
 808cf02:	0940      	lsrs	r0, r0, #5
 808cf04:	bd08      	pop	{r3, pc}

0808cf06 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808cf06:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 808cf08:	2100      	movs	r1, #0
 808cf0a:	7c00      	ldrb	r0, [r0, #16]
 808cf0c:	f7fd fc9e 	bl	808a84c <hal_i2c_unlock>
}
 808cf10:	fab0 f080 	clz	r0, r0
 808cf14:	0940      	lsrs	r0, r0, #5
 808cf16:	bd08      	pop	{r3, pc}

0808cf18 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808cf18:	2300      	movs	r3, #0
 808cf1a:	6840      	ldr	r0, [r0, #4]
 808cf1c:	461a      	mov	r2, r3
 808cf1e:	f7fd bdb5 	b.w	808aa8c <network_connect>

0808cf22 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808cf22:	2200      	movs	r2, #0
 808cf24:	2102      	movs	r1, #2
 808cf26:	6840      	ldr	r0, [r0, #4]
 808cf28:	f7fd bdc0 	b.w	808aaac <network_disconnect>

0808cf2c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808cf2c:	2200      	movs	r2, #0
 808cf2e:	6840      	ldr	r0, [r0, #4]
 808cf30:	4611      	mov	r1, r2
 808cf32:	f7fd bdb3 	b.w	808aa9c <network_connecting>

0808cf36 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808cf36:	2200      	movs	r2, #0
 808cf38:	6840      	ldr	r0, [r0, #4]
 808cf3a:	4611      	mov	r1, r2
 808cf3c:	f7fd bdbe 	b.w	808aabc <network_ready>

0808cf40 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808cf40:	2300      	movs	r3, #0
 808cf42:	6840      	ldr	r0, [r0, #4]
 808cf44:	461a      	mov	r2, r3
 808cf46:	4619      	mov	r1, r3
 808cf48:	f7fd bdc0 	b.w	808aacc <network_on>

0808cf4c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808cf4c:	2300      	movs	r3, #0
 808cf4e:	6840      	ldr	r0, [r0, #4]
 808cf50:	461a      	mov	r2, r3
 808cf52:	4619      	mov	r1, r3
 808cf54:	f7fd bdc2 	b.w	808aadc <network_off>

0808cf58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808cf58:	2200      	movs	r2, #0
 808cf5a:	6840      	ldr	r0, [r0, #4]
 808cf5c:	f081 0101 	eor.w	r1, r1, #1
 808cf60:	f7fd bdc4 	b.w	808aaec <network_listen>

0808cf64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808cf64:	2200      	movs	r2, #0
 808cf66:	6840      	ldr	r0, [r0, #4]
 808cf68:	f7fd bdd0 	b.w	808ab0c <network_set_listen_timeout>

0808cf6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808cf6c:	2200      	movs	r2, #0
 808cf6e:	6840      	ldr	r0, [r0, #4]
 808cf70:	4611      	mov	r1, r2
 808cf72:	f7fd bdd3 	b.w	808ab1c <network_get_listen_timeout>

0808cf76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808cf76:	2200      	movs	r2, #0
 808cf78:	6840      	ldr	r0, [r0, #4]
 808cf7a:	4611      	mov	r1, r2
 808cf7c:	f7fd bdbe 	b.w	808aafc <network_listening>

0808cf80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808cf80:	b570      	push	{r4, r5, r6, lr}
 808cf82:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808cf84:	2600      	movs	r6, #0
 808cf86:	b086      	sub	sp, #24
 808cf88:	4604      	mov	r4, r0
    IPAddress addr;
 808cf8a:	a804      	add	r0, sp, #16
 808cf8c:	f7ff fcfa 	bl	808c984 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cf90:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808cf92:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cf94:	f002 fb96 	bl	808f6c4 <strlen>
 808cf98:	4b0a      	ldr	r3, [pc, #40]	; (808cfc4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 808cf9a:	9600      	str	r6, [sp, #0]
 808cf9c:	b281      	uxth	r1, r0
 808cf9e:	685b      	ldr	r3, [r3, #4]
 808cfa0:	4628      	mov	r0, r5
 808cfa2:	aa03      	add	r2, sp, #12
 808cfa4:	f7fd fcb2 	bl	808a90c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808cfa8:	b130      	cbz	r0, 808cfb8 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808cfaa:	4631      	mov	r1, r6
 808cfac:	4620      	mov	r0, r4
 808cfae:	f7ff fcf9 	bl	808c9a4 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808cfb2:	4620      	mov	r0, r4
 808cfb4:	b006      	add	sp, #24
 808cfb6:	bd70      	pop	{r4, r5, r6, pc}
 808cfb8:	4620      	mov	r0, r4
 808cfba:	a903      	add	r1, sp, #12
 808cfbc:	f7ff fcea 	bl	808c994 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808cfc0:	e7f7      	b.n	808cfb2 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808cfc2:	bf00      	nop
 808cfc4:	2000121c 	.word	0x2000121c

0808cfc8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808cfc8:	4b02      	ldr	r3, [pc, #8]	; (808cfd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808cfca:	4a03      	ldr	r2, [pc, #12]	; (808cfd8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808cfcc:	601a      	str	r2, [r3, #0]
 808cfce:	2200      	movs	r2, #0
 808cfd0:	605a      	str	r2, [r3, #4]

} // spark
 808cfd2:	4770      	bx	lr
 808cfd4:	2000136c 	.word	0x2000136c
 808cfd8:	08094524 	.word	0x08094524

0808cfdc <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
 808cfdc:	4770      	bx	lr

0808cfde <_ZN5spark16JSONBufferWriterD0Ev>:
 808cfde:	b510      	push	{r4, lr}
 808cfe0:	4604      	mov	r4, r0
 808cfe2:	2114      	movs	r1, #20
 808cfe4:	f000 fa15 	bl	808d412 <_ZdlPvj>
 808cfe8:	4620      	mov	r0, r4
 808cfea:	bd10      	pop	{r4, pc}

0808cfec <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808cfec:	b538      	push	{r3, r4, r5, lr}
 808cfee:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 808cff0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 808cff4:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808cff6:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 808cff8:	d207      	bcs.n	808d00a <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 808cffa:	1ad2      	subs	r2, r2, r3
 808cffc:	6880      	ldr	r0, [r0, #8]
 808cffe:	42aa      	cmp	r2, r5
 808d000:	bf28      	it	cs
 808d002:	462a      	movcs	r2, r5
 808d004:	4418      	add	r0, r3
 808d006:	f001 fd85 	bl	808eb14 <memcpy>
    }
    n_ += size;
 808d00a:	6922      	ldr	r2, [r4, #16]
 808d00c:	442a      	add	r2, r5
 808d00e:	6122      	str	r2, [r4, #16]
}
 808d010:	bd38      	pop	{r3, r4, r5, pc}

0808d012 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 808d012:	b40e      	push	{r1, r2, r3}
 808d014:	b517      	push	{r0, r1, r2, r4, lr}
 808d016:	4604      	mov	r4, r0
 808d018:	ab05      	add	r3, sp, #20
 808d01a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808d01e:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 808d020:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808d022:	6903      	ldr	r3, [r0, #16]
 808d024:	6880      	ldr	r0, [r0, #8]
 808d026:	428b      	cmp	r3, r1
 808d028:	bf34      	ite	cc
 808d02a:	1ac9      	subcc	r1, r1, r3
 808d02c:	2100      	movcs	r1, #0
 808d02e:	4418      	add	r0, r3
 808d030:	9b01      	ldr	r3, [sp, #4]
 808d032:	f7fd fe0b 	bl	808ac4c <vsnprintf>
    va_end(args);
    n_ += n;
 808d036:	6923      	ldr	r3, [r4, #16]
 808d038:	4403      	add	r3, r0
 808d03a:	6123      	str	r3, [r4, #16]
}
 808d03c:	b003      	add	sp, #12
 808d03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808d042:	b003      	add	sp, #12
 808d044:	4770      	bx	lr

0808d046 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808d046:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 808d048:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 808d04a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 808d04e:	2201      	movs	r2, #1
 808d050:	689b      	ldr	r3, [r3, #8]
 808d052:	f10d 0107 	add.w	r1, sp, #7
 808d056:	4798      	blx	r3
}
 808d058:	b003      	add	sp, #12
 808d05a:	f85d fb04 	ldr.w	pc, [sp], #4

0808d05e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 808d05e:	b510      	push	{r4, lr}
    write('}');
 808d060:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 808d062:	4604      	mov	r4, r0
    write('}');
 808d064:	f7ff ffef 	bl	808d046 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 808d068:	2301      	movs	r3, #1
}
 808d06a:	4620      	mov	r0, r4
    state_ = NEXT;
 808d06c:	7123      	strb	r3, [r4, #4]
}
 808d06e:	bd10      	pop	{r4, pc}

0808d070 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 808d070:	b508      	push	{r3, lr}
    switch (state_) {
 808d072:	7903      	ldrb	r3, [r0, #4]
 808d074:	2b01      	cmp	r3, #1
 808d076:	d002      	beq.n	808d07e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 808d078:	2b02      	cmp	r3, #2
 808d07a:	d004      	beq.n	808d086 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 808d07c:	bd08      	pop	{r3, pc}
        write(',');
 808d07e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 808d080:	f7ff ffe1 	bl	808d046 <_ZN5spark10JSONWriter5writeEc>
}
 808d084:	e7fa      	b.n	808d07c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 808d086:	213a      	movs	r1, #58	; 0x3a
 808d088:	e7fa      	b.n	808d080 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

0808d08a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 808d08a:	b510      	push	{r4, lr}
 808d08c:	4604      	mov	r4, r0
    writeSeparator();
 808d08e:	f7ff ffef 	bl	808d070 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 808d092:	4620      	mov	r0, r4
 808d094:	217b      	movs	r1, #123	; 0x7b
 808d096:	f7ff ffd6 	bl	808d046 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 808d09a:	2300      	movs	r3, #0
}
 808d09c:	4620      	mov	r0, r4
    state_ = BEGIN;
 808d09e:	7123      	strb	r3, [r4, #4]
}
 808d0a0:	bd10      	pop	{r4, pc}
	...

0808d0a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808d0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d0a8:	460d      	mov	r5, r1
 808d0aa:	4617      	mov	r7, r2
    write('"');
 808d0ac:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808d0ae:	4604      	mov	r4, r0
    write('"');
 808d0b0:	f7ff ffc9 	bl	808d046 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 808d0b4:	4629      	mov	r1, r5
                printf("u%04x", (unsigned)c);
 808d0b6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 808d150 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 808d0ba:	442f      	add	r7, r5
    while (s != end) {
 808d0bc:	42bd      	cmp	r5, r7
 808d0be:	462a      	mov	r2, r5
 808d0c0:	d038      	beq.n	808d134 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 808d0c2:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808d0c6:	2e22      	cmp	r6, #34	; 0x22
 808d0c8:	d003      	beq.n	808d0d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 808d0ca:	2e5c      	cmp	r6, #92	; 0x5c
 808d0cc:	d001      	beq.n	808d0d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 808d0ce:	2e1f      	cmp	r6, #31
 808d0d0:	d8f4      	bhi.n	808d0bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 808d0d2:	6823      	ldr	r3, [r4, #0]
 808d0d4:	1a52      	subs	r2, r2, r1
 808d0d6:	4620      	mov	r0, r4
 808d0d8:	689b      	ldr	r3, [r3, #8]
 808d0da:	4798      	blx	r3
            write('\\');
 808d0dc:	215c      	movs	r1, #92	; 0x5c
 808d0de:	4620      	mov	r0, r4
 808d0e0:	f7ff ffb1 	bl	808d046 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 808d0e4:	2e0d      	cmp	r6, #13
 808d0e6:	d80a      	bhi.n	808d0fe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 808d0e8:	2e07      	cmp	r6, #7
 808d0ea:	d91c      	bls.n	808d126 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 808d0ec:	f1a6 0308 	sub.w	r3, r6, #8
 808d0f0:	2b05      	cmp	r3, #5
 808d0f2:	d818      	bhi.n	808d126 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 808d0f4:	e8df f003 	tbb	[pc, r3]
 808d0f8:	17110f0d 	.word	0x17110f0d
 808d0fc:	1513      	.short	0x1513
 808d0fe:	2e22      	cmp	r6, #34	; 0x22
 808d100:	d001      	beq.n	808d106 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808d102:	2e5c      	cmp	r6, #92	; 0x5c
 808d104:	d10f      	bne.n	808d126 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 808d106:	4631      	mov	r1, r6
                write('b');
 808d108:	4620      	mov	r0, r4
 808d10a:	f7ff ff9c 	bl	808d046 <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 808d10e:	4629      	mov	r1, r5
    while (s != end) {
 808d110:	e7d4      	b.n	808d0bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 808d112:	2162      	movs	r1, #98	; 0x62
 808d114:	e7f8      	b.n	808d108 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 808d116:	2174      	movs	r1, #116	; 0x74
 808d118:	e7f6      	b.n	808d108 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 808d11a:	216e      	movs	r1, #110	; 0x6e
 808d11c:	e7f4      	b.n	808d108 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 808d11e:	2166      	movs	r1, #102	; 0x66
 808d120:	e7f2      	b.n	808d108 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 808d122:	2172      	movs	r1, #114	; 0x72
 808d124:	e7f0      	b.n	808d108 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 808d126:	6823      	ldr	r3, [r4, #0]
 808d128:	4632      	mov	r2, r6
 808d12a:	4641      	mov	r1, r8
 808d12c:	4620      	mov	r0, r4
 808d12e:	68db      	ldr	r3, [r3, #12]
 808d130:	4798      	blx	r3
                break;
 808d132:	e7ec      	b.n	808d10e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
 808d134:	428d      	cmp	r5, r1
 808d136:	d004      	beq.n	808d142 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 808d138:	6823      	ldr	r3, [r4, #0]
 808d13a:	4620      	mov	r0, r4
 808d13c:	689b      	ldr	r3, [r3, #8]
 808d13e:	1a6a      	subs	r2, r5, r1
 808d140:	4798      	blx	r3
    write('"');
 808d142:	2122      	movs	r1, #34	; 0x22
 808d144:	4620      	mov	r0, r4
 808d146:	f7ff ff7e 	bl	808d046 <_ZN5spark10JSONWriter5writeEc>
}
 808d14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808d14e:	bf00      	nop
 808d150:	08094550 	.word	0x08094550

0808d154 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808d154:	b570      	push	{r4, r5, r6, lr}
 808d156:	4604      	mov	r4, r0
 808d158:	460d      	mov	r5, r1
 808d15a:	4616      	mov	r6, r2
    writeSeparator();
 808d15c:	f7ff ff88 	bl	808d070 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 808d160:	4620      	mov	r0, r4
 808d162:	4632      	mov	r2, r6
 808d164:	4629      	mov	r1, r5
 808d166:	f7ff ff9d 	bl	808d0a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 808d16a:	2302      	movs	r3, #2
}
 808d16c:	4620      	mov	r0, r4
    state_ = VALUE;
 808d16e:	7123      	strb	r3, [r4, #4]
}
 808d170:	bd70      	pop	{r4, r5, r6, pc}

0808d172 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808d172:	b570      	push	{r4, r5, r6, lr}
 808d174:	4604      	mov	r4, r0
 808d176:	460d      	mov	r5, r1
 808d178:	4616      	mov	r6, r2
    writeSeparator();
 808d17a:	f7ff ff79 	bl	808d070 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 808d17e:	4620      	mov	r0, r4
 808d180:	4632      	mov	r2, r6
 808d182:	4629      	mov	r1, r5
 808d184:	f7ff ff8e 	bl	808d0a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 808d188:	2301      	movs	r3, #1
}
 808d18a:	4620      	mov	r0, r4
    state_ = NEXT;
 808d18c:	7123      	strb	r3, [r4, #4]
}
 808d18e:	bd70      	pop	{r4, r5, r6, pc}

0808d190 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 808d190:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 808d192:	b570      	push	{r4, r5, r6, lr}
 808d194:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 808d196:	d901      	bls.n	808d19c <pinAvailable+0xc>
    return false;
 808d198:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 808d19a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808d19c:	f1a0 030d 	sub.w	r3, r0, #13
 808d1a0:	2b02      	cmp	r3, #2
 808d1a2:	d90b      	bls.n	808d1bc <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 808d1a4:	2801      	cmp	r0, #1
 808d1a6:	d826      	bhi.n	808d1f6 <pinAvailable+0x66>
 808d1a8:	f000 f8de 	bl	808d368 <_Z19__fetch_global_Wirev>
 808d1ac:	2100      	movs	r1, #0
 808d1ae:	7c00      	ldrb	r0, [r0, #16]
 808d1b0:	f7fd fb34 	bl	808a81c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808d1b4:	f080 0001 	eor.w	r0, r0, #1
 808d1b8:	b2c0      	uxtb	r0, r0
 808d1ba:	e7ee      	b.n	808d19a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 808d1bc:	4e13      	ldr	r6, [pc, #76]	; (808d20c <pinAvailable+0x7c>)
 808d1be:	7831      	ldrb	r1, [r6, #0]
 808d1c0:	f3bf 8f5b 	dmb	ish
 808d1c4:	f011 0501 	ands.w	r5, r1, #1
 808d1c8:	d10f      	bne.n	808d1ea <pinAvailable+0x5a>
 808d1ca:	4630      	mov	r0, r6
 808d1cc:	f7f2 ff6b 	bl	80800a6 <__cxa_guard_acquire>
 808d1d0:	b158      	cbz	r0, 808d1ea <pinAvailable+0x5a>
 808d1d2:	4629      	mov	r1, r5
 808d1d4:	480e      	ldr	r0, [pc, #56]	; (808d210 <pinAvailable+0x80>)
 808d1d6:	f7fd fed0 	bl	808af7a <_ZN8SPIClassC1E19hal_spi_interface_t>
 808d1da:	4630      	mov	r0, r6
 808d1dc:	f7f2 ff68 	bl	80800b0 <__cxa_guard_release>
 808d1e0:	4a0c      	ldr	r2, [pc, #48]	; (808d214 <pinAvailable+0x84>)
 808d1e2:	490d      	ldr	r1, [pc, #52]	; (808d218 <pinAvailable+0x88>)
 808d1e4:	480a      	ldr	r0, [pc, #40]	; (808d210 <pinAvailable+0x80>)
 808d1e6:	f000 f90f 	bl	808d408 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808d1ea:	4b09      	ldr	r3, [pc, #36]	; (808d210 <pinAvailable+0x80>)
 808d1ec:	7818      	ldrb	r0, [r3, #0]
 808d1ee:	f7fd fb6d 	bl	808a8cc <hal_spi_is_enabled>
 808d1f2:	2800      	cmp	r0, #0
 808d1f4:	d1d0      	bne.n	808d198 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808d1f6:	3c12      	subs	r4, #18
 808d1f8:	2c01      	cmp	r4, #1
 808d1fa:	d805      	bhi.n	808d208 <pinAvailable+0x78>
 808d1fc:	f7ff fda4 	bl	808cd48 <_Z22__fetch_global_Serial1v>
 808d200:	7c00      	ldrb	r0, [r0, #16]
 808d202:	f7fd fab3 	bl	808a76c <hal_usart_is_enabled>
 808d206:	e7d5      	b.n	808d1b4 <pinAvailable+0x24>
  return true; // 'pin' is available
 808d208:	2001      	movs	r0, #1
 808d20a:	e7c6      	b.n	808d19a <pinAvailable+0xa>
 808d20c:	20000d34 	.word	0x20000d34
 808d210:	20000d38 	.word	0x20000d38
 808d214:	20000328 	.word	0x20000328
 808d218:	080884a5 	.word	0x080884a5

0808d21c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808d21c:	282e      	cmp	r0, #46	; 0x2e
{
 808d21e:	b538      	push	{r3, r4, r5, lr}
 808d220:	4604      	mov	r4, r0
 808d222:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808d224:	d80a      	bhi.n	808d23c <pinMode+0x20>
 808d226:	29ff      	cmp	r1, #255	; 0xff
 808d228:	d008      	beq.n	808d23c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 808d22a:	f7ff ffb1 	bl	808d190 <pinAvailable>
 808d22e:	b128      	cbz	r0, 808d23c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 808d230:	4629      	mov	r1, r5
 808d232:	4620      	mov	r0, r4
}
 808d234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 808d238:	f7fd b9c0 	b.w	808a5bc <HAL_Pin_Mode>
}
 808d23c:	bd38      	pop	{r3, r4, r5, pc}

0808d23e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808d23e:	b538      	push	{r3, r4, r5, lr}
 808d240:	4604      	mov	r4, r0
 808d242:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808d244:	f7fd f9c2 	bl	808a5cc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808d248:	28ff      	cmp	r0, #255	; 0xff
 808d24a:	d010      	beq.n	808d26e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 808d24c:	2806      	cmp	r0, #6
 808d24e:	d804      	bhi.n	808d25a <digitalWrite+0x1c>
 808d250:	234d      	movs	r3, #77	; 0x4d
 808d252:	fa23 f000 	lsr.w	r0, r3, r0
 808d256:	07c3      	lsls	r3, r0, #31
 808d258:	d409      	bmi.n	808d26e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808d25a:	4620      	mov	r0, r4
 808d25c:	f7ff ff98 	bl	808d190 <pinAvailable>
 808d260:	b128      	cbz	r0, 808d26e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808d262:	4629      	mov	r1, r5
 808d264:	4620      	mov	r0, r4
}
 808d266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 808d26a:	f7fd b9b7 	b.w	808a5dc <HAL_GPIO_Write>
}
 808d26e:	bd38      	pop	{r3, r4, r5, pc}

0808d270 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 808d270:	b510      	push	{r4, lr}
 808d272:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808d274:	f7fd f9aa 	bl	808a5cc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 808d278:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 808d27a:	b2db      	uxtb	r3, r3
 808d27c:	2b01      	cmp	r3, #1
 808d27e:	d908      	bls.n	808d292 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 808d280:	4620      	mov	r0, r4
 808d282:	f7ff ff85 	bl	808d190 <pinAvailable>
 808d286:	b120      	cbz	r0, 808d292 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808d288:	4620      	mov	r0, r4
}
 808d28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 808d28e:	f7fd b9ad 	b.w	808a5ec <HAL_GPIO_Read>
}
 808d292:	2000      	movs	r0, #0
 808d294:	bd10      	pop	{r4, pc}

0808d296 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808d296:	b510      	push	{r4, lr}
 808d298:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808d29a:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808d29c:	bf9c      	itt	ls
 808d29e:	340a      	addls	r4, #10
 808d2a0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808d2a2:	4620      	mov	r0, r4
 808d2a4:	f7ff ff74 	bl	808d190 <pinAvailable>
 808d2a8:	b150      	cbz	r0, 808d2c0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808d2aa:	2103      	movs	r1, #3
 808d2ac:	4620      	mov	r0, r4
 808d2ae:	f7fd f97d 	bl	808a5ac <HAL_Validate_Pin_Function>
 808d2b2:	2803      	cmp	r0, #3
 808d2b4:	d104      	bne.n	808d2c0 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 808d2b6:	4620      	mov	r0, r4
}
 808d2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 808d2bc:	f7fd b9b6 	b.w	808a62c <hal_adc_read>
}
 808d2c0:	2000      	movs	r0, #0
 808d2c2:	bd10      	pop	{r4, pc}

0808d2c4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 808d2c4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808d2c6:	4c08      	ldr	r4, [pc, #32]	; (808d2e8 <_Z21__fetch_global_EEPROMv+0x24>)
 808d2c8:	7823      	ldrb	r3, [r4, #0]
 808d2ca:	f3bf 8f5b 	dmb	ish
 808d2ce:	07db      	lsls	r3, r3, #31
 808d2d0:	d408      	bmi.n	808d2e4 <_Z21__fetch_global_EEPROMv+0x20>
 808d2d2:	4620      	mov	r0, r4
 808d2d4:	f7f2 fee7 	bl	80800a6 <__cxa_guard_acquire>
 808d2d8:	b120      	cbz	r0, 808d2e4 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808d2da:	f7fd f9c7 	bl	808a66c <HAL_EEPROM_Init>
 808d2de:	4620      	mov	r0, r4
 808d2e0:	f7f2 fee6 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 808d2e4:	4801      	ldr	r0, [pc, #4]	; (808d2ec <_Z21__fetch_global_EEPROMv+0x28>)
 808d2e6:	bd10      	pop	{r4, pc}
 808d2e8:	20001378 	.word	0x20001378
 808d2ec:	2000137c 	.word	0x2000137c

0808d2f0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808d2f0:	2300      	movs	r3, #0
 808d2f2:	b513      	push	{r0, r1, r4, lr}
 808d2f4:	4c07      	ldr	r4, [pc, #28]	; (808d314 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808d2f6:	461a      	mov	r2, r3
 808d2f8:	4619      	mov	r1, r3
 808d2fa:	4620      	mov	r0, r4
 808d2fc:	9300      	str	r3, [sp, #0]
 808d2fe:	f7ff fb63 	bl	808c9c8 <_ZN9IPAddressC1Ehhhh>
 808d302:	4620      	mov	r0, r4
 808d304:	4a04      	ldr	r2, [pc, #16]	; (808d318 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808d306:	4905      	ldr	r1, [pc, #20]	; (808d31c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808d308:	b002      	add	sp, #8
 808d30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808d30e:	f000 b87b 	b.w	808d408 <__aeabi_atexit>
 808d312:	bf00      	nop
 808d314:	20001380 	.word	0x20001380
 808d318:	20000328 	.word	0x20000328
 808d31c:	0808c941 	.word	0x0808c941

0808d320 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 808d320:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 808d322:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 808d324:	2520      	movs	r5, #32
 808d326:	8043      	strh	r3, [r0, #2]
 808d328:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d32a:	4e08      	ldr	r6, [pc, #32]	; (808d34c <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 808d32c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 808d32e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d330:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 808d332:	6085      	str	r5, [r0, #8]
 808d334:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d336:	4628      	mov	r0, r5
 808d338:	f000 f86d 	bl	808d416 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d33c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808d33e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d340:	4628      	mov	r0, r5
 808d342:	f000 f868 	bl	808d416 <_ZnajRKSt9nothrow_t>
	};
 808d346:	60e0      	str	r0, [r4, #12]

	return config;
}
 808d348:	4620      	mov	r0, r4
 808d34a:	bd70      	pop	{r4, r5, r6, pc}
 808d34c:	08094570 	.word	0x08094570

0808d350 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 808d350:	b510      	push	{r4, lr}
 808d352:	4604      	mov	r4, r0
	return defaultWireConfig();
 808d354:	f7ff ffe4 	bl	808d320 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 808d358:	4620      	mov	r0, r4
 808d35a:	bd10      	pop	{r4, pc}

0808d35c <_Z18acquireWire3Bufferv>:
 808d35c:	b510      	push	{r4, lr}
 808d35e:	4604      	mov	r4, r0
 808d360:	f7ff ffde 	bl	808d320 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 808d364:	4620      	mov	r0, r4
 808d366:	bd10      	pop	{r4, pc}

0808d368 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 808d368:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808d36a:	4d0f      	ldr	r5, [pc, #60]	; (808d3a8 <_Z19__fetch_global_Wirev+0x40>)
{
 808d36c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808d36e:	7829      	ldrb	r1, [r5, #0]
 808d370:	f3bf 8f5b 	dmb	ish
 808d374:	f011 0401 	ands.w	r4, r1, #1
 808d378:	d113      	bne.n	808d3a2 <_Z19__fetch_global_Wirev+0x3a>
 808d37a:	4628      	mov	r0, r5
 808d37c:	f7f2 fe93 	bl	80800a6 <__cxa_guard_acquire>
 808d380:	b178      	cbz	r0, 808d3a2 <_Z19__fetch_global_Wirev+0x3a>
 808d382:	a801      	add	r0, sp, #4
 808d384:	f7ff ffe4 	bl	808d350 <_Z17acquireWireBufferv>
 808d388:	4621      	mov	r1, r4
 808d38a:	aa01      	add	r2, sp, #4
 808d38c:	4807      	ldr	r0, [pc, #28]	; (808d3ac <_Z19__fetch_global_Wirev+0x44>)
 808d38e:	f7ff fd43 	bl	808ce18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808d392:	4628      	mov	r0, r5
 808d394:	f7f2 fe8c 	bl	80800b0 <__cxa_guard_release>
 808d398:	4a05      	ldr	r2, [pc, #20]	; (808d3b0 <_Z19__fetch_global_Wirev+0x48>)
 808d39a:	4906      	ldr	r1, [pc, #24]	; (808d3b4 <_Z19__fetch_global_Wirev+0x4c>)
 808d39c:	4803      	ldr	r0, [pc, #12]	; (808d3ac <_Z19__fetch_global_Wirev+0x44>)
 808d39e:	f000 f833 	bl	808d408 <__aeabi_atexit>
	return wire;
}
 808d3a2:	4802      	ldr	r0, [pc, #8]	; (808d3ac <_Z19__fetch_global_Wirev+0x44>)
 808d3a4:	b007      	add	sp, #28
 808d3a6:	bd30      	pop	{r4, r5, pc}
 808d3a8:	20001388 	.word	0x20001388
 808d3ac:	20001390 	.word	0x20001390
 808d3b0:	20000328 	.word	0x20000328
 808d3b4:	0808cdc1 	.word	0x0808cdc1

0808d3b8 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808d3b8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808d3ba:	4c0f      	ldr	r4, [pc, #60]	; (808d3f8 <_Z20__fetch_global_Wire3v+0x40>)
{
 808d3bc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808d3be:	7823      	ldrb	r3, [r4, #0]
 808d3c0:	f3bf 8f5b 	dmb	ish
 808d3c4:	07db      	lsls	r3, r3, #31
 808d3c6:	d413      	bmi.n	808d3f0 <_Z20__fetch_global_Wire3v+0x38>
 808d3c8:	4620      	mov	r0, r4
 808d3ca:	f7f2 fe6c 	bl	80800a6 <__cxa_guard_acquire>
 808d3ce:	b178      	cbz	r0, 808d3f0 <_Z20__fetch_global_Wire3v+0x38>
 808d3d0:	a801      	add	r0, sp, #4
 808d3d2:	f7ff ffc3 	bl	808d35c <_Z18acquireWire3Bufferv>
 808d3d6:	2102      	movs	r1, #2
 808d3d8:	aa01      	add	r2, sp, #4
 808d3da:	4808      	ldr	r0, [pc, #32]	; (808d3fc <_Z20__fetch_global_Wire3v+0x44>)
 808d3dc:	f7ff fd1c 	bl	808ce18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808d3e0:	4620      	mov	r0, r4
 808d3e2:	f7f2 fe65 	bl	80800b0 <__cxa_guard_release>
 808d3e6:	4a06      	ldr	r2, [pc, #24]	; (808d400 <_Z20__fetch_global_Wire3v+0x48>)
 808d3e8:	4906      	ldr	r1, [pc, #24]	; (808d404 <_Z20__fetch_global_Wire3v+0x4c>)
 808d3ea:	4804      	ldr	r0, [pc, #16]	; (808d3fc <_Z20__fetch_global_Wire3v+0x44>)
 808d3ec:	f000 f80c 	bl	808d408 <__aeabi_atexit>
	return wire;
}
 808d3f0:	4802      	ldr	r0, [pc, #8]	; (808d3fc <_Z20__fetch_global_Wire3v+0x44>)
 808d3f2:	b006      	add	sp, #24
 808d3f4:	bd10      	pop	{r4, pc}
 808d3f6:	bf00      	nop
 808d3f8:	2000138c 	.word	0x2000138c
 808d3fc:	200013a4 	.word	0x200013a4
 808d400:	20000328 	.word	0x20000328
 808d404:	0808cdc1 	.word	0x0808cdc1

0808d408 <__aeabi_atexit>:
 808d408:	460b      	mov	r3, r1
 808d40a:	4601      	mov	r1, r0
 808d40c:	4618      	mov	r0, r3
 808d40e:	f001 ba5b 	b.w	808e8c8 <__cxa_atexit>

0808d412 <_ZdlPvj>:
 808d412:	f7f2 be46 	b.w	80800a2 <_ZdlPv>

0808d416 <_ZnajRKSt9nothrow_t>:
 808d416:	f7f2 be42 	b.w	808009e <_Znaj>

0808d41a <_ZSt25__throw_bad_function_callv>:
 808d41a:	b508      	push	{r3, lr}
 808d41c:	f7fd fc1e 	bl	808ac5c <abort>

0808d420 <nan>:
 808d420:	2000      	movs	r0, #0
 808d422:	4901      	ldr	r1, [pc, #4]	; (808d428 <nan+0x8>)
 808d424:	4770      	bx	lr
 808d426:	bf00      	nop
 808d428:	7ff80000 	.word	0x7ff80000

0808d42c <__aeabi_drsub>:
 808d42c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808d430:	e002      	b.n	808d438 <__adddf3>
 808d432:	bf00      	nop

0808d434 <__aeabi_dsub>:
 808d434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808d438 <__adddf3>:
 808d438:	b530      	push	{r4, r5, lr}
 808d43a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808d43e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808d442:	ea94 0f05 	teq	r4, r5
 808d446:	bf08      	it	eq
 808d448:	ea90 0f02 	teqeq	r0, r2
 808d44c:	bf1f      	itttt	ne
 808d44e:	ea54 0c00 	orrsne.w	ip, r4, r0
 808d452:	ea55 0c02 	orrsne.w	ip, r5, r2
 808d456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808d45a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d45e:	f000 80e2 	beq.w	808d626 <__adddf3+0x1ee>
 808d462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808d466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808d46a:	bfb8      	it	lt
 808d46c:	426d      	neglt	r5, r5
 808d46e:	dd0c      	ble.n	808d48a <__adddf3+0x52>
 808d470:	442c      	add	r4, r5
 808d472:	ea80 0202 	eor.w	r2, r0, r2
 808d476:	ea81 0303 	eor.w	r3, r1, r3
 808d47a:	ea82 0000 	eor.w	r0, r2, r0
 808d47e:	ea83 0101 	eor.w	r1, r3, r1
 808d482:	ea80 0202 	eor.w	r2, r0, r2
 808d486:	ea81 0303 	eor.w	r3, r1, r3
 808d48a:	2d36      	cmp	r5, #54	; 0x36
 808d48c:	bf88      	it	hi
 808d48e:	bd30      	pophi	{r4, r5, pc}
 808d490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808d494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808d498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808d49c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808d4a0:	d002      	beq.n	808d4a8 <__adddf3+0x70>
 808d4a2:	4240      	negs	r0, r0
 808d4a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d4a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808d4ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808d4b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808d4b4:	d002      	beq.n	808d4bc <__adddf3+0x84>
 808d4b6:	4252      	negs	r2, r2
 808d4b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808d4bc:	ea94 0f05 	teq	r4, r5
 808d4c0:	f000 80a7 	beq.w	808d612 <__adddf3+0x1da>
 808d4c4:	f1a4 0401 	sub.w	r4, r4, #1
 808d4c8:	f1d5 0e20 	rsbs	lr, r5, #32
 808d4cc:	db0d      	blt.n	808d4ea <__adddf3+0xb2>
 808d4ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 808d4d2:	fa22 f205 	lsr.w	r2, r2, r5
 808d4d6:	1880      	adds	r0, r0, r2
 808d4d8:	f141 0100 	adc.w	r1, r1, #0
 808d4dc:	fa03 f20e 	lsl.w	r2, r3, lr
 808d4e0:	1880      	adds	r0, r0, r2
 808d4e2:	fa43 f305 	asr.w	r3, r3, r5
 808d4e6:	4159      	adcs	r1, r3
 808d4e8:	e00e      	b.n	808d508 <__adddf3+0xd0>
 808d4ea:	f1a5 0520 	sub.w	r5, r5, #32
 808d4ee:	f10e 0e20 	add.w	lr, lr, #32
 808d4f2:	2a01      	cmp	r2, #1
 808d4f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 808d4f8:	bf28      	it	cs
 808d4fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 808d4fe:	fa43 f305 	asr.w	r3, r3, r5
 808d502:	18c0      	adds	r0, r0, r3
 808d504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808d508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d50c:	d507      	bpl.n	808d51e <__adddf3+0xe6>
 808d50e:	f04f 0e00 	mov.w	lr, #0
 808d512:	f1dc 0c00 	rsbs	ip, ip, #0
 808d516:	eb7e 0000 	sbcs.w	r0, lr, r0
 808d51a:	eb6e 0101 	sbc.w	r1, lr, r1
 808d51e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808d522:	d31b      	bcc.n	808d55c <__adddf3+0x124>
 808d524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808d528:	d30c      	bcc.n	808d544 <__adddf3+0x10c>
 808d52a:	0849      	lsrs	r1, r1, #1
 808d52c:	ea5f 0030 	movs.w	r0, r0, rrx
 808d530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808d534:	f104 0401 	add.w	r4, r4, #1
 808d538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808d53c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808d540:	f080 809a 	bcs.w	808d678 <__adddf3+0x240>
 808d544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808d548:	bf08      	it	eq
 808d54a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808d54e:	f150 0000 	adcs.w	r0, r0, #0
 808d552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d556:	ea41 0105 	orr.w	r1, r1, r5
 808d55a:	bd30      	pop	{r4, r5, pc}
 808d55c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808d560:	4140      	adcs	r0, r0
 808d562:	eb41 0101 	adc.w	r1, r1, r1
 808d566:	3c01      	subs	r4, #1
 808d568:	bf28      	it	cs
 808d56a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 808d56e:	d2e9      	bcs.n	808d544 <__adddf3+0x10c>
 808d570:	f091 0f00 	teq	r1, #0
 808d574:	bf04      	itt	eq
 808d576:	4601      	moveq	r1, r0
 808d578:	2000      	moveq	r0, #0
 808d57a:	fab1 f381 	clz	r3, r1
 808d57e:	bf08      	it	eq
 808d580:	3320      	addeq	r3, #32
 808d582:	f1a3 030b 	sub.w	r3, r3, #11
 808d586:	f1b3 0220 	subs.w	r2, r3, #32
 808d58a:	da0c      	bge.n	808d5a6 <__adddf3+0x16e>
 808d58c:	320c      	adds	r2, #12
 808d58e:	dd08      	ble.n	808d5a2 <__adddf3+0x16a>
 808d590:	f102 0c14 	add.w	ip, r2, #20
 808d594:	f1c2 020c 	rsb	r2, r2, #12
 808d598:	fa01 f00c 	lsl.w	r0, r1, ip
 808d59c:	fa21 f102 	lsr.w	r1, r1, r2
 808d5a0:	e00c      	b.n	808d5bc <__adddf3+0x184>
 808d5a2:	f102 0214 	add.w	r2, r2, #20
 808d5a6:	bfd8      	it	le
 808d5a8:	f1c2 0c20 	rsble	ip, r2, #32
 808d5ac:	fa01 f102 	lsl.w	r1, r1, r2
 808d5b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 808d5b4:	bfdc      	itt	le
 808d5b6:	ea41 010c 	orrle.w	r1, r1, ip
 808d5ba:	4090      	lslle	r0, r2
 808d5bc:	1ae4      	subs	r4, r4, r3
 808d5be:	bfa2      	ittt	ge
 808d5c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808d5c4:	4329      	orrge	r1, r5
 808d5c6:	bd30      	popge	{r4, r5, pc}
 808d5c8:	ea6f 0404 	mvn.w	r4, r4
 808d5cc:	3c1f      	subs	r4, #31
 808d5ce:	da1c      	bge.n	808d60a <__adddf3+0x1d2>
 808d5d0:	340c      	adds	r4, #12
 808d5d2:	dc0e      	bgt.n	808d5f2 <__adddf3+0x1ba>
 808d5d4:	f104 0414 	add.w	r4, r4, #20
 808d5d8:	f1c4 0220 	rsb	r2, r4, #32
 808d5dc:	fa20 f004 	lsr.w	r0, r0, r4
 808d5e0:	fa01 f302 	lsl.w	r3, r1, r2
 808d5e4:	ea40 0003 	orr.w	r0, r0, r3
 808d5e8:	fa21 f304 	lsr.w	r3, r1, r4
 808d5ec:	ea45 0103 	orr.w	r1, r5, r3
 808d5f0:	bd30      	pop	{r4, r5, pc}
 808d5f2:	f1c4 040c 	rsb	r4, r4, #12
 808d5f6:	f1c4 0220 	rsb	r2, r4, #32
 808d5fa:	fa20 f002 	lsr.w	r0, r0, r2
 808d5fe:	fa01 f304 	lsl.w	r3, r1, r4
 808d602:	ea40 0003 	orr.w	r0, r0, r3
 808d606:	4629      	mov	r1, r5
 808d608:	bd30      	pop	{r4, r5, pc}
 808d60a:	fa21 f004 	lsr.w	r0, r1, r4
 808d60e:	4629      	mov	r1, r5
 808d610:	bd30      	pop	{r4, r5, pc}
 808d612:	f094 0f00 	teq	r4, #0
 808d616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808d61a:	bf06      	itte	eq
 808d61c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808d620:	3401      	addeq	r4, #1
 808d622:	3d01      	subne	r5, #1
 808d624:	e74e      	b.n	808d4c4 <__adddf3+0x8c>
 808d626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d62a:	bf18      	it	ne
 808d62c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d630:	d029      	beq.n	808d686 <__adddf3+0x24e>
 808d632:	ea94 0f05 	teq	r4, r5
 808d636:	bf08      	it	eq
 808d638:	ea90 0f02 	teqeq	r0, r2
 808d63c:	d005      	beq.n	808d64a <__adddf3+0x212>
 808d63e:	ea54 0c00 	orrs.w	ip, r4, r0
 808d642:	bf04      	itt	eq
 808d644:	4619      	moveq	r1, r3
 808d646:	4610      	moveq	r0, r2
 808d648:	bd30      	pop	{r4, r5, pc}
 808d64a:	ea91 0f03 	teq	r1, r3
 808d64e:	bf1e      	ittt	ne
 808d650:	2100      	movne	r1, #0
 808d652:	2000      	movne	r0, #0
 808d654:	bd30      	popne	{r4, r5, pc}
 808d656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808d65a:	d105      	bne.n	808d668 <__adddf3+0x230>
 808d65c:	0040      	lsls	r0, r0, #1
 808d65e:	4149      	adcs	r1, r1
 808d660:	bf28      	it	cs
 808d662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808d666:	bd30      	pop	{r4, r5, pc}
 808d668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808d66c:	bf3c      	itt	cc
 808d66e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808d672:	bd30      	popcc	{r4, r5, pc}
 808d674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808d67c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808d680:	f04f 0000 	mov.w	r0, #0
 808d684:	bd30      	pop	{r4, r5, pc}
 808d686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d68a:	bf1a      	itte	ne
 808d68c:	4619      	movne	r1, r3
 808d68e:	4610      	movne	r0, r2
 808d690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808d694:	bf1c      	itt	ne
 808d696:	460b      	movne	r3, r1
 808d698:	4602      	movne	r2, r0
 808d69a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808d69e:	bf06      	itte	eq
 808d6a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808d6a4:	ea91 0f03 	teqeq	r1, r3
 808d6a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808d6ac:	bd30      	pop	{r4, r5, pc}
 808d6ae:	bf00      	nop

0808d6b0 <__aeabi_ui2d>:
 808d6b0:	f090 0f00 	teq	r0, #0
 808d6b4:	bf04      	itt	eq
 808d6b6:	2100      	moveq	r1, #0
 808d6b8:	4770      	bxeq	lr
 808d6ba:	b530      	push	{r4, r5, lr}
 808d6bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d6c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d6c4:	f04f 0500 	mov.w	r5, #0
 808d6c8:	f04f 0100 	mov.w	r1, #0
 808d6cc:	e750      	b.n	808d570 <__adddf3+0x138>
 808d6ce:	bf00      	nop

0808d6d0 <__aeabi_i2d>:
 808d6d0:	f090 0f00 	teq	r0, #0
 808d6d4:	bf04      	itt	eq
 808d6d6:	2100      	moveq	r1, #0
 808d6d8:	4770      	bxeq	lr
 808d6da:	b530      	push	{r4, r5, lr}
 808d6dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d6e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d6e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808d6e8:	bf48      	it	mi
 808d6ea:	4240      	negmi	r0, r0
 808d6ec:	f04f 0100 	mov.w	r1, #0
 808d6f0:	e73e      	b.n	808d570 <__adddf3+0x138>
 808d6f2:	bf00      	nop

0808d6f4 <__aeabi_f2d>:
 808d6f4:	0042      	lsls	r2, r0, #1
 808d6f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808d6fa:	ea4f 0131 	mov.w	r1, r1, rrx
 808d6fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808d702:	bf1f      	itttt	ne
 808d704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808d708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808d70c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808d710:	4770      	bxne	lr
 808d712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808d716:	bf08      	it	eq
 808d718:	4770      	bxeq	lr
 808d71a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 808d71e:	bf04      	itt	eq
 808d720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 808d724:	4770      	bxeq	lr
 808d726:	b530      	push	{r4, r5, lr}
 808d728:	f44f 7460 	mov.w	r4, #896	; 0x380
 808d72c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808d734:	e71c      	b.n	808d570 <__adddf3+0x138>
 808d736:	bf00      	nop

0808d738 <__aeabi_ul2d>:
 808d738:	ea50 0201 	orrs.w	r2, r0, r1
 808d73c:	bf08      	it	eq
 808d73e:	4770      	bxeq	lr
 808d740:	b530      	push	{r4, r5, lr}
 808d742:	f04f 0500 	mov.w	r5, #0
 808d746:	e00a      	b.n	808d75e <__aeabi_l2d+0x16>

0808d748 <__aeabi_l2d>:
 808d748:	ea50 0201 	orrs.w	r2, r0, r1
 808d74c:	bf08      	it	eq
 808d74e:	4770      	bxeq	lr
 808d750:	b530      	push	{r4, r5, lr}
 808d752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808d756:	d502      	bpl.n	808d75e <__aeabi_l2d+0x16>
 808d758:	4240      	negs	r0, r0
 808d75a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d75e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808d76a:	f43f aed8 	beq.w	808d51e <__adddf3+0xe6>
 808d76e:	f04f 0203 	mov.w	r2, #3
 808d772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808d776:	bf18      	it	ne
 808d778:	3203      	addne	r2, #3
 808d77a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808d77e:	bf18      	it	ne
 808d780:	3203      	addne	r2, #3
 808d782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808d786:	f1c2 0320 	rsb	r3, r2, #32
 808d78a:	fa00 fc03 	lsl.w	ip, r0, r3
 808d78e:	fa20 f002 	lsr.w	r0, r0, r2
 808d792:	fa01 fe03 	lsl.w	lr, r1, r3
 808d796:	ea40 000e 	orr.w	r0, r0, lr
 808d79a:	fa21 f102 	lsr.w	r1, r1, r2
 808d79e:	4414      	add	r4, r2
 808d7a0:	e6bd      	b.n	808d51e <__adddf3+0xe6>
 808d7a2:	bf00      	nop

0808d7a4 <__aeabi_dmul>:
 808d7a4:	b570      	push	{r4, r5, r6, lr}
 808d7a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808d7aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808d7ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808d7b2:	bf1d      	ittte	ne
 808d7b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808d7b8:	ea94 0f0c 	teqne	r4, ip
 808d7bc:	ea95 0f0c 	teqne	r5, ip
 808d7c0:	f000 f8de 	bleq	808d980 <__aeabi_dmul+0x1dc>
 808d7c4:	442c      	add	r4, r5
 808d7c6:	ea81 0603 	eor.w	r6, r1, r3
 808d7ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808d7ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808d7d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808d7d6:	bf18      	it	ne
 808d7d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808d7dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d7e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808d7e4:	d038      	beq.n	808d858 <__aeabi_dmul+0xb4>
 808d7e6:	fba0 ce02 	umull	ip, lr, r0, r2
 808d7ea:	f04f 0500 	mov.w	r5, #0
 808d7ee:	fbe1 e502 	umlal	lr, r5, r1, r2
 808d7f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808d7f6:	fbe0 e503 	umlal	lr, r5, r0, r3
 808d7fa:	f04f 0600 	mov.w	r6, #0
 808d7fe:	fbe1 5603 	umlal	r5, r6, r1, r3
 808d802:	f09c 0f00 	teq	ip, #0
 808d806:	bf18      	it	ne
 808d808:	f04e 0e01 	orrne.w	lr, lr, #1
 808d80c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808d810:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808d814:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808d818:	d204      	bcs.n	808d824 <__aeabi_dmul+0x80>
 808d81a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808d81e:	416d      	adcs	r5, r5
 808d820:	eb46 0606 	adc.w	r6, r6, r6
 808d824:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808d828:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808d82c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808d830:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808d834:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808d838:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808d83c:	bf88      	it	hi
 808d83e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808d842:	d81e      	bhi.n	808d882 <__aeabi_dmul+0xde>
 808d844:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808d848:	bf08      	it	eq
 808d84a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808d84e:	f150 0000 	adcs.w	r0, r0, #0
 808d852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d856:	bd70      	pop	{r4, r5, r6, pc}
 808d858:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808d85c:	ea46 0101 	orr.w	r1, r6, r1
 808d860:	ea40 0002 	orr.w	r0, r0, r2
 808d864:	ea81 0103 	eor.w	r1, r1, r3
 808d868:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808d86c:	bfc2      	ittt	gt
 808d86e:	ebd4 050c 	rsbsgt	r5, r4, ip
 808d872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808d876:	bd70      	popgt	{r4, r5, r6, pc}
 808d878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d87c:	f04f 0e00 	mov.w	lr, #0
 808d880:	3c01      	subs	r4, #1
 808d882:	f300 80ab 	bgt.w	808d9dc <__aeabi_dmul+0x238>
 808d886:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808d88a:	bfde      	ittt	le
 808d88c:	2000      	movle	r0, #0
 808d88e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808d892:	bd70      	pople	{r4, r5, r6, pc}
 808d894:	f1c4 0400 	rsb	r4, r4, #0
 808d898:	3c20      	subs	r4, #32
 808d89a:	da35      	bge.n	808d908 <__aeabi_dmul+0x164>
 808d89c:	340c      	adds	r4, #12
 808d89e:	dc1b      	bgt.n	808d8d8 <__aeabi_dmul+0x134>
 808d8a0:	f104 0414 	add.w	r4, r4, #20
 808d8a4:	f1c4 0520 	rsb	r5, r4, #32
 808d8a8:	fa00 f305 	lsl.w	r3, r0, r5
 808d8ac:	fa20 f004 	lsr.w	r0, r0, r4
 808d8b0:	fa01 f205 	lsl.w	r2, r1, r5
 808d8b4:	ea40 0002 	orr.w	r0, r0, r2
 808d8b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808d8bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808d8c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808d8c4:	fa21 f604 	lsr.w	r6, r1, r4
 808d8c8:	eb42 0106 	adc.w	r1, r2, r6
 808d8cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d8d0:	bf08      	it	eq
 808d8d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d8d6:	bd70      	pop	{r4, r5, r6, pc}
 808d8d8:	f1c4 040c 	rsb	r4, r4, #12
 808d8dc:	f1c4 0520 	rsb	r5, r4, #32
 808d8e0:	fa00 f304 	lsl.w	r3, r0, r4
 808d8e4:	fa20 f005 	lsr.w	r0, r0, r5
 808d8e8:	fa01 f204 	lsl.w	r2, r1, r4
 808d8ec:	ea40 0002 	orr.w	r0, r0, r2
 808d8f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d8f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808d8f8:	f141 0100 	adc.w	r1, r1, #0
 808d8fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d900:	bf08      	it	eq
 808d902:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d906:	bd70      	pop	{r4, r5, r6, pc}
 808d908:	f1c4 0520 	rsb	r5, r4, #32
 808d90c:	fa00 f205 	lsl.w	r2, r0, r5
 808d910:	ea4e 0e02 	orr.w	lr, lr, r2
 808d914:	fa20 f304 	lsr.w	r3, r0, r4
 808d918:	fa01 f205 	lsl.w	r2, r1, r5
 808d91c:	ea43 0302 	orr.w	r3, r3, r2
 808d920:	fa21 f004 	lsr.w	r0, r1, r4
 808d924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d928:	fa21 f204 	lsr.w	r2, r1, r4
 808d92c:	ea20 0002 	bic.w	r0, r0, r2
 808d930:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808d934:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d938:	bf08      	it	eq
 808d93a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d93e:	bd70      	pop	{r4, r5, r6, pc}
 808d940:	f094 0f00 	teq	r4, #0
 808d944:	d10f      	bne.n	808d966 <__aeabi_dmul+0x1c2>
 808d946:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808d94a:	0040      	lsls	r0, r0, #1
 808d94c:	eb41 0101 	adc.w	r1, r1, r1
 808d950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d954:	bf08      	it	eq
 808d956:	3c01      	subeq	r4, #1
 808d958:	d0f7      	beq.n	808d94a <__aeabi_dmul+0x1a6>
 808d95a:	ea41 0106 	orr.w	r1, r1, r6
 808d95e:	f095 0f00 	teq	r5, #0
 808d962:	bf18      	it	ne
 808d964:	4770      	bxne	lr
 808d966:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808d96a:	0052      	lsls	r2, r2, #1
 808d96c:	eb43 0303 	adc.w	r3, r3, r3
 808d970:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808d974:	bf08      	it	eq
 808d976:	3d01      	subeq	r5, #1
 808d978:	d0f7      	beq.n	808d96a <__aeabi_dmul+0x1c6>
 808d97a:	ea43 0306 	orr.w	r3, r3, r6
 808d97e:	4770      	bx	lr
 808d980:	ea94 0f0c 	teq	r4, ip
 808d984:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808d988:	bf18      	it	ne
 808d98a:	ea95 0f0c 	teqne	r5, ip
 808d98e:	d00c      	beq.n	808d9aa <__aeabi_dmul+0x206>
 808d990:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d994:	bf18      	it	ne
 808d996:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d99a:	d1d1      	bne.n	808d940 <__aeabi_dmul+0x19c>
 808d99c:	ea81 0103 	eor.w	r1, r1, r3
 808d9a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d9a4:	f04f 0000 	mov.w	r0, #0
 808d9a8:	bd70      	pop	{r4, r5, r6, pc}
 808d9aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d9ae:	bf06      	itte	eq
 808d9b0:	4610      	moveq	r0, r2
 808d9b2:	4619      	moveq	r1, r3
 808d9b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d9b8:	d019      	beq.n	808d9ee <__aeabi_dmul+0x24a>
 808d9ba:	ea94 0f0c 	teq	r4, ip
 808d9be:	d102      	bne.n	808d9c6 <__aeabi_dmul+0x222>
 808d9c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808d9c4:	d113      	bne.n	808d9ee <__aeabi_dmul+0x24a>
 808d9c6:	ea95 0f0c 	teq	r5, ip
 808d9ca:	d105      	bne.n	808d9d8 <__aeabi_dmul+0x234>
 808d9cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808d9d0:	bf1c      	itt	ne
 808d9d2:	4610      	movne	r0, r2
 808d9d4:	4619      	movne	r1, r3
 808d9d6:	d10a      	bne.n	808d9ee <__aeabi_dmul+0x24a>
 808d9d8:	ea81 0103 	eor.w	r1, r1, r3
 808d9dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d9e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808d9e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808d9e8:	f04f 0000 	mov.w	r0, #0
 808d9ec:	bd70      	pop	{r4, r5, r6, pc}
 808d9ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808d9f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808d9f6:	bd70      	pop	{r4, r5, r6, pc}

0808d9f8 <__aeabi_ddiv>:
 808d9f8:	b570      	push	{r4, r5, r6, lr}
 808d9fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808d9fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808da02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808da06:	bf1d      	ittte	ne
 808da08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808da0c:	ea94 0f0c 	teqne	r4, ip
 808da10:	ea95 0f0c 	teqne	r5, ip
 808da14:	f000 f8a7 	bleq	808db66 <__aeabi_ddiv+0x16e>
 808da18:	eba4 0405 	sub.w	r4, r4, r5
 808da1c:	ea81 0e03 	eor.w	lr, r1, r3
 808da20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808da24:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808da28:	f000 8088 	beq.w	808db3c <__aeabi_ddiv+0x144>
 808da2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808da30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808da34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808da38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808da3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808da40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808da44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808da48:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808da4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808da50:	429d      	cmp	r5, r3
 808da52:	bf08      	it	eq
 808da54:	4296      	cmpeq	r6, r2
 808da56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808da5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808da5e:	d202      	bcs.n	808da66 <__aeabi_ddiv+0x6e>
 808da60:	085b      	lsrs	r3, r3, #1
 808da62:	ea4f 0232 	mov.w	r2, r2, rrx
 808da66:	1ab6      	subs	r6, r6, r2
 808da68:	eb65 0503 	sbc.w	r5, r5, r3
 808da6c:	085b      	lsrs	r3, r3, #1
 808da6e:	ea4f 0232 	mov.w	r2, r2, rrx
 808da72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808da76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808da7a:	ebb6 0e02 	subs.w	lr, r6, r2
 808da7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 808da82:	bf22      	ittt	cs
 808da84:	1ab6      	subcs	r6, r6, r2
 808da86:	4675      	movcs	r5, lr
 808da88:	ea40 000c 	orrcs.w	r0, r0, ip
 808da8c:	085b      	lsrs	r3, r3, #1
 808da8e:	ea4f 0232 	mov.w	r2, r2, rrx
 808da92:	ebb6 0e02 	subs.w	lr, r6, r2
 808da96:	eb75 0e03 	sbcs.w	lr, r5, r3
 808da9a:	bf22      	ittt	cs
 808da9c:	1ab6      	subcs	r6, r6, r2
 808da9e:	4675      	movcs	r5, lr
 808daa0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808daa4:	085b      	lsrs	r3, r3, #1
 808daa6:	ea4f 0232 	mov.w	r2, r2, rrx
 808daaa:	ebb6 0e02 	subs.w	lr, r6, r2
 808daae:	eb75 0e03 	sbcs.w	lr, r5, r3
 808dab2:	bf22      	ittt	cs
 808dab4:	1ab6      	subcs	r6, r6, r2
 808dab6:	4675      	movcs	r5, lr
 808dab8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808dabc:	085b      	lsrs	r3, r3, #1
 808dabe:	ea4f 0232 	mov.w	r2, r2, rrx
 808dac2:	ebb6 0e02 	subs.w	lr, r6, r2
 808dac6:	eb75 0e03 	sbcs.w	lr, r5, r3
 808daca:	bf22      	ittt	cs
 808dacc:	1ab6      	subcs	r6, r6, r2
 808dace:	4675      	movcs	r5, lr
 808dad0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808dad4:	ea55 0e06 	orrs.w	lr, r5, r6
 808dad8:	d018      	beq.n	808db0c <__aeabi_ddiv+0x114>
 808dada:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808dade:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808dae2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808dae6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808daea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808daee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808daf2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808daf6:	d1c0      	bne.n	808da7a <__aeabi_ddiv+0x82>
 808daf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808dafc:	d10b      	bne.n	808db16 <__aeabi_ddiv+0x11e>
 808dafe:	ea41 0100 	orr.w	r1, r1, r0
 808db02:	f04f 0000 	mov.w	r0, #0
 808db06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808db0a:	e7b6      	b.n	808da7a <__aeabi_ddiv+0x82>
 808db0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808db10:	bf04      	itt	eq
 808db12:	4301      	orreq	r1, r0
 808db14:	2000      	moveq	r0, #0
 808db16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808db1a:	bf88      	it	hi
 808db1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808db20:	f63f aeaf 	bhi.w	808d882 <__aeabi_dmul+0xde>
 808db24:	ebb5 0c03 	subs.w	ip, r5, r3
 808db28:	bf04      	itt	eq
 808db2a:	ebb6 0c02 	subseq.w	ip, r6, r2
 808db2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808db32:	f150 0000 	adcs.w	r0, r0, #0
 808db36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808db3a:	bd70      	pop	{r4, r5, r6, pc}
 808db3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808db40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808db44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808db48:	bfc2      	ittt	gt
 808db4a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808db4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808db52:	bd70      	popgt	{r4, r5, r6, pc}
 808db54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808db58:	f04f 0e00 	mov.w	lr, #0
 808db5c:	3c01      	subs	r4, #1
 808db5e:	e690      	b.n	808d882 <__aeabi_dmul+0xde>
 808db60:	ea45 0e06 	orr.w	lr, r5, r6
 808db64:	e68d      	b.n	808d882 <__aeabi_dmul+0xde>
 808db66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808db6a:	ea94 0f0c 	teq	r4, ip
 808db6e:	bf08      	it	eq
 808db70:	ea95 0f0c 	teqeq	r5, ip
 808db74:	f43f af3b 	beq.w	808d9ee <__aeabi_dmul+0x24a>
 808db78:	ea94 0f0c 	teq	r4, ip
 808db7c:	d10a      	bne.n	808db94 <__aeabi_ddiv+0x19c>
 808db7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808db82:	f47f af34 	bne.w	808d9ee <__aeabi_dmul+0x24a>
 808db86:	ea95 0f0c 	teq	r5, ip
 808db8a:	f47f af25 	bne.w	808d9d8 <__aeabi_dmul+0x234>
 808db8e:	4610      	mov	r0, r2
 808db90:	4619      	mov	r1, r3
 808db92:	e72c      	b.n	808d9ee <__aeabi_dmul+0x24a>
 808db94:	ea95 0f0c 	teq	r5, ip
 808db98:	d106      	bne.n	808dba8 <__aeabi_ddiv+0x1b0>
 808db9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808db9e:	f43f aefd 	beq.w	808d99c <__aeabi_dmul+0x1f8>
 808dba2:	4610      	mov	r0, r2
 808dba4:	4619      	mov	r1, r3
 808dba6:	e722      	b.n	808d9ee <__aeabi_dmul+0x24a>
 808dba8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808dbac:	bf18      	it	ne
 808dbae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808dbb2:	f47f aec5 	bne.w	808d940 <__aeabi_dmul+0x19c>
 808dbb6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808dbba:	f47f af0d 	bne.w	808d9d8 <__aeabi_dmul+0x234>
 808dbbe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808dbc2:	f47f aeeb 	bne.w	808d99c <__aeabi_dmul+0x1f8>
 808dbc6:	e712      	b.n	808d9ee <__aeabi_dmul+0x24a>

0808dbc8 <__gedf2>:
 808dbc8:	f04f 3cff 	mov.w	ip, #4294967295
 808dbcc:	e006      	b.n	808dbdc <__cmpdf2+0x4>
 808dbce:	bf00      	nop

0808dbd0 <__ledf2>:
 808dbd0:	f04f 0c01 	mov.w	ip, #1
 808dbd4:	e002      	b.n	808dbdc <__cmpdf2+0x4>
 808dbd6:	bf00      	nop

0808dbd8 <__cmpdf2>:
 808dbd8:	f04f 0c01 	mov.w	ip, #1
 808dbdc:	f84d cd04 	str.w	ip, [sp, #-4]!
 808dbe0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808dbe4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dbe8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808dbec:	bf18      	it	ne
 808dbee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808dbf2:	d01b      	beq.n	808dc2c <__cmpdf2+0x54>
 808dbf4:	b001      	add	sp, #4
 808dbf6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808dbfa:	bf0c      	ite	eq
 808dbfc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808dc00:	ea91 0f03 	teqne	r1, r3
 808dc04:	bf02      	ittt	eq
 808dc06:	ea90 0f02 	teqeq	r0, r2
 808dc0a:	2000      	moveq	r0, #0
 808dc0c:	4770      	bxeq	lr
 808dc0e:	f110 0f00 	cmn.w	r0, #0
 808dc12:	ea91 0f03 	teq	r1, r3
 808dc16:	bf58      	it	pl
 808dc18:	4299      	cmppl	r1, r3
 808dc1a:	bf08      	it	eq
 808dc1c:	4290      	cmpeq	r0, r2
 808dc1e:	bf2c      	ite	cs
 808dc20:	17d8      	asrcs	r0, r3, #31
 808dc22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808dc26:	f040 0001 	orr.w	r0, r0, #1
 808dc2a:	4770      	bx	lr
 808dc2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808dc30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dc34:	d102      	bne.n	808dc3c <__cmpdf2+0x64>
 808dc36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808dc3a:	d107      	bne.n	808dc4c <__cmpdf2+0x74>
 808dc3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808dc40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dc44:	d1d6      	bne.n	808dbf4 <__cmpdf2+0x1c>
 808dc46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808dc4a:	d0d3      	beq.n	808dbf4 <__cmpdf2+0x1c>
 808dc4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 808dc50:	4770      	bx	lr
 808dc52:	bf00      	nop

0808dc54 <__aeabi_cdrcmple>:
 808dc54:	4684      	mov	ip, r0
 808dc56:	4610      	mov	r0, r2
 808dc58:	4662      	mov	r2, ip
 808dc5a:	468c      	mov	ip, r1
 808dc5c:	4619      	mov	r1, r3
 808dc5e:	4663      	mov	r3, ip
 808dc60:	e000      	b.n	808dc64 <__aeabi_cdcmpeq>
 808dc62:	bf00      	nop

0808dc64 <__aeabi_cdcmpeq>:
 808dc64:	b501      	push	{r0, lr}
 808dc66:	f7ff ffb7 	bl	808dbd8 <__cmpdf2>
 808dc6a:	2800      	cmp	r0, #0
 808dc6c:	bf48      	it	mi
 808dc6e:	f110 0f00 	cmnmi.w	r0, #0
 808dc72:	bd01      	pop	{r0, pc}

0808dc74 <__aeabi_dcmpeq>:
 808dc74:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dc78:	f7ff fff4 	bl	808dc64 <__aeabi_cdcmpeq>
 808dc7c:	bf0c      	ite	eq
 808dc7e:	2001      	moveq	r0, #1
 808dc80:	2000      	movne	r0, #0
 808dc82:	f85d fb08 	ldr.w	pc, [sp], #8
 808dc86:	bf00      	nop

0808dc88 <__aeabi_dcmplt>:
 808dc88:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dc8c:	f7ff ffea 	bl	808dc64 <__aeabi_cdcmpeq>
 808dc90:	bf34      	ite	cc
 808dc92:	2001      	movcc	r0, #1
 808dc94:	2000      	movcs	r0, #0
 808dc96:	f85d fb08 	ldr.w	pc, [sp], #8
 808dc9a:	bf00      	nop

0808dc9c <__aeabi_dcmple>:
 808dc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dca0:	f7ff ffe0 	bl	808dc64 <__aeabi_cdcmpeq>
 808dca4:	bf94      	ite	ls
 808dca6:	2001      	movls	r0, #1
 808dca8:	2000      	movhi	r0, #0
 808dcaa:	f85d fb08 	ldr.w	pc, [sp], #8
 808dcae:	bf00      	nop

0808dcb0 <__aeabi_dcmpge>:
 808dcb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dcb4:	f7ff ffce 	bl	808dc54 <__aeabi_cdrcmple>
 808dcb8:	bf94      	ite	ls
 808dcba:	2001      	movls	r0, #1
 808dcbc:	2000      	movhi	r0, #0
 808dcbe:	f85d fb08 	ldr.w	pc, [sp], #8
 808dcc2:	bf00      	nop

0808dcc4 <__aeabi_dcmpgt>:
 808dcc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dcc8:	f7ff ffc4 	bl	808dc54 <__aeabi_cdrcmple>
 808dccc:	bf34      	ite	cc
 808dcce:	2001      	movcc	r0, #1
 808dcd0:	2000      	movcs	r0, #0
 808dcd2:	f85d fb08 	ldr.w	pc, [sp], #8
 808dcd6:	bf00      	nop

0808dcd8 <__aeabi_dcmpun>:
 808dcd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808dcdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dce0:	d102      	bne.n	808dce8 <__aeabi_dcmpun+0x10>
 808dce2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808dce6:	d10a      	bne.n	808dcfe <__aeabi_dcmpun+0x26>
 808dce8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808dcec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dcf0:	d102      	bne.n	808dcf8 <__aeabi_dcmpun+0x20>
 808dcf2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808dcf6:	d102      	bne.n	808dcfe <__aeabi_dcmpun+0x26>
 808dcf8:	f04f 0000 	mov.w	r0, #0
 808dcfc:	4770      	bx	lr
 808dcfe:	f04f 0001 	mov.w	r0, #1
 808dd02:	4770      	bx	lr

0808dd04 <__aeabi_d2iz>:
 808dd04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808dd08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808dd0c:	d215      	bcs.n	808dd3a <__aeabi_d2iz+0x36>
 808dd0e:	d511      	bpl.n	808dd34 <__aeabi_d2iz+0x30>
 808dd10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808dd14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808dd18:	d912      	bls.n	808dd40 <__aeabi_d2iz+0x3c>
 808dd1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808dd1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808dd22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808dd26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808dd2a:	fa23 f002 	lsr.w	r0, r3, r2
 808dd2e:	bf18      	it	ne
 808dd30:	4240      	negne	r0, r0
 808dd32:	4770      	bx	lr
 808dd34:	f04f 0000 	mov.w	r0, #0
 808dd38:	4770      	bx	lr
 808dd3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808dd3e:	d105      	bne.n	808dd4c <__aeabi_d2iz+0x48>
 808dd40:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808dd44:	bf08      	it	eq
 808dd46:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808dd4a:	4770      	bx	lr
 808dd4c:	f04f 0000 	mov.w	r0, #0
 808dd50:	4770      	bx	lr
 808dd52:	bf00      	nop

0808dd54 <__aeabi_d2uiz>:
 808dd54:	004a      	lsls	r2, r1, #1
 808dd56:	d211      	bcs.n	808dd7c <__aeabi_d2uiz+0x28>
 808dd58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808dd5c:	d211      	bcs.n	808dd82 <__aeabi_d2uiz+0x2e>
 808dd5e:	d50d      	bpl.n	808dd7c <__aeabi_d2uiz+0x28>
 808dd60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808dd64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808dd68:	d40e      	bmi.n	808dd88 <__aeabi_d2uiz+0x34>
 808dd6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808dd6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808dd72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808dd76:	fa23 f002 	lsr.w	r0, r3, r2
 808dd7a:	4770      	bx	lr
 808dd7c:	f04f 0000 	mov.w	r0, #0
 808dd80:	4770      	bx	lr
 808dd82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808dd86:	d102      	bne.n	808dd8e <__aeabi_d2uiz+0x3a>
 808dd88:	f04f 30ff 	mov.w	r0, #4294967295
 808dd8c:	4770      	bx	lr
 808dd8e:	f04f 0000 	mov.w	r0, #0
 808dd92:	4770      	bx	lr

0808dd94 <__aeabi_d2f>:
 808dd94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808dd98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808dd9c:	bf24      	itt	cs
 808dd9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808dda2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808dda6:	d90d      	bls.n	808ddc4 <__aeabi_d2f+0x30>
 808dda8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808ddac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808ddb0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808ddb4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808ddb8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808ddbc:	bf08      	it	eq
 808ddbe:	f020 0001 	biceq.w	r0, r0, #1
 808ddc2:	4770      	bx	lr
 808ddc4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808ddc8:	d121      	bne.n	808de0e <__aeabi_d2f+0x7a>
 808ddca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808ddce:	bfbc      	itt	lt
 808ddd0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808ddd4:	4770      	bxlt	lr
 808ddd6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808ddda:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808ddde:	f1c2 0218 	rsb	r2, r2, #24
 808dde2:	f1c2 0c20 	rsb	ip, r2, #32
 808dde6:	fa10 f30c 	lsls.w	r3, r0, ip
 808ddea:	fa20 f002 	lsr.w	r0, r0, r2
 808ddee:	bf18      	it	ne
 808ddf0:	f040 0001 	orrne.w	r0, r0, #1
 808ddf4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808ddf8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808ddfc:	fa03 fc0c 	lsl.w	ip, r3, ip
 808de00:	ea40 000c 	orr.w	r0, r0, ip
 808de04:	fa23 f302 	lsr.w	r3, r3, r2
 808de08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808de0c:	e7cc      	b.n	808dda8 <__aeabi_d2f+0x14>
 808de0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808de12:	d107      	bne.n	808de24 <__aeabi_d2f+0x90>
 808de14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808de18:	bf1e      	ittt	ne
 808de1a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808de1e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808de22:	4770      	bxne	lr
 808de24:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808de28:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808de2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808de30:	4770      	bx	lr
 808de32:	bf00      	nop

0808de34 <__aeabi_frsub>:
 808de34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808de38:	e002      	b.n	808de40 <__addsf3>
 808de3a:	bf00      	nop

0808de3c <__aeabi_fsub>:
 808de3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808de40 <__addsf3>:
 808de40:	0042      	lsls	r2, r0, #1
 808de42:	bf1f      	itttt	ne
 808de44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808de48:	ea92 0f03 	teqne	r2, r3
 808de4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808de50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808de54:	d06a      	beq.n	808df2c <__addsf3+0xec>
 808de56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808de5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808de5e:	bfc1      	itttt	gt
 808de60:	18d2      	addgt	r2, r2, r3
 808de62:	4041      	eorgt	r1, r0
 808de64:	4048      	eorgt	r0, r1
 808de66:	4041      	eorgt	r1, r0
 808de68:	bfb8      	it	lt
 808de6a:	425b      	neglt	r3, r3
 808de6c:	2b19      	cmp	r3, #25
 808de6e:	bf88      	it	hi
 808de70:	4770      	bxhi	lr
 808de72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808de76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808de7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808de7e:	bf18      	it	ne
 808de80:	4240      	negne	r0, r0
 808de82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808de86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808de8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808de8e:	bf18      	it	ne
 808de90:	4249      	negne	r1, r1
 808de92:	ea92 0f03 	teq	r2, r3
 808de96:	d03f      	beq.n	808df18 <__addsf3+0xd8>
 808de98:	f1a2 0201 	sub.w	r2, r2, #1
 808de9c:	fa41 fc03 	asr.w	ip, r1, r3
 808dea0:	eb10 000c 	adds.w	r0, r0, ip
 808dea4:	f1c3 0320 	rsb	r3, r3, #32
 808dea8:	fa01 f103 	lsl.w	r1, r1, r3
 808deac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808deb0:	d502      	bpl.n	808deb8 <__addsf3+0x78>
 808deb2:	4249      	negs	r1, r1
 808deb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808deb8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808debc:	d313      	bcc.n	808dee6 <__addsf3+0xa6>
 808debe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808dec2:	d306      	bcc.n	808ded2 <__addsf3+0x92>
 808dec4:	0840      	lsrs	r0, r0, #1
 808dec6:	ea4f 0131 	mov.w	r1, r1, rrx
 808deca:	f102 0201 	add.w	r2, r2, #1
 808dece:	2afe      	cmp	r2, #254	; 0xfe
 808ded0:	d251      	bcs.n	808df76 <__addsf3+0x136>
 808ded2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808ded6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808deda:	bf08      	it	eq
 808dedc:	f020 0001 	biceq.w	r0, r0, #1
 808dee0:	ea40 0003 	orr.w	r0, r0, r3
 808dee4:	4770      	bx	lr
 808dee6:	0049      	lsls	r1, r1, #1
 808dee8:	eb40 0000 	adc.w	r0, r0, r0
 808deec:	3a01      	subs	r2, #1
 808deee:	bf28      	it	cs
 808def0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 808def4:	d2ed      	bcs.n	808ded2 <__addsf3+0x92>
 808def6:	fab0 fc80 	clz	ip, r0
 808defa:	f1ac 0c08 	sub.w	ip, ip, #8
 808defe:	ebb2 020c 	subs.w	r2, r2, ip
 808df02:	fa00 f00c 	lsl.w	r0, r0, ip
 808df06:	bfaa      	itet	ge
 808df08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808df0c:	4252      	neglt	r2, r2
 808df0e:	4318      	orrge	r0, r3
 808df10:	bfbc      	itt	lt
 808df12:	40d0      	lsrlt	r0, r2
 808df14:	4318      	orrlt	r0, r3
 808df16:	4770      	bx	lr
 808df18:	f092 0f00 	teq	r2, #0
 808df1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808df20:	bf06      	itte	eq
 808df22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808df26:	3201      	addeq	r2, #1
 808df28:	3b01      	subne	r3, #1
 808df2a:	e7b5      	b.n	808de98 <__addsf3+0x58>
 808df2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808df30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808df34:	bf18      	it	ne
 808df36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808df3a:	d021      	beq.n	808df80 <__addsf3+0x140>
 808df3c:	ea92 0f03 	teq	r2, r3
 808df40:	d004      	beq.n	808df4c <__addsf3+0x10c>
 808df42:	f092 0f00 	teq	r2, #0
 808df46:	bf08      	it	eq
 808df48:	4608      	moveq	r0, r1
 808df4a:	4770      	bx	lr
 808df4c:	ea90 0f01 	teq	r0, r1
 808df50:	bf1c      	itt	ne
 808df52:	2000      	movne	r0, #0
 808df54:	4770      	bxne	lr
 808df56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808df5a:	d104      	bne.n	808df66 <__addsf3+0x126>
 808df5c:	0040      	lsls	r0, r0, #1
 808df5e:	bf28      	it	cs
 808df60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808df64:	4770      	bx	lr
 808df66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808df6a:	bf3c      	itt	cc
 808df6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808df70:	4770      	bxcc	lr
 808df72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808df76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808df7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808df7e:	4770      	bx	lr
 808df80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808df84:	bf16      	itet	ne
 808df86:	4608      	movne	r0, r1
 808df88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808df8c:	4601      	movne	r1, r0
 808df8e:	0242      	lsls	r2, r0, #9
 808df90:	bf06      	itte	eq
 808df92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808df96:	ea90 0f01 	teqeq	r0, r1
 808df9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808df9e:	4770      	bx	lr

0808dfa0 <__aeabi_ui2f>:
 808dfa0:	f04f 0300 	mov.w	r3, #0
 808dfa4:	e004      	b.n	808dfb0 <__aeabi_i2f+0x8>
 808dfa6:	bf00      	nop

0808dfa8 <__aeabi_i2f>:
 808dfa8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808dfac:	bf48      	it	mi
 808dfae:	4240      	negmi	r0, r0
 808dfb0:	ea5f 0c00 	movs.w	ip, r0
 808dfb4:	bf08      	it	eq
 808dfb6:	4770      	bxeq	lr
 808dfb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808dfbc:	4601      	mov	r1, r0
 808dfbe:	f04f 0000 	mov.w	r0, #0
 808dfc2:	e01c      	b.n	808dffe <__aeabi_l2f+0x2a>

0808dfc4 <__aeabi_ul2f>:
 808dfc4:	ea50 0201 	orrs.w	r2, r0, r1
 808dfc8:	bf08      	it	eq
 808dfca:	4770      	bxeq	lr
 808dfcc:	f04f 0300 	mov.w	r3, #0
 808dfd0:	e00a      	b.n	808dfe8 <__aeabi_l2f+0x14>
 808dfd2:	bf00      	nop

0808dfd4 <__aeabi_l2f>:
 808dfd4:	ea50 0201 	orrs.w	r2, r0, r1
 808dfd8:	bf08      	it	eq
 808dfda:	4770      	bxeq	lr
 808dfdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808dfe0:	d502      	bpl.n	808dfe8 <__aeabi_l2f+0x14>
 808dfe2:	4240      	negs	r0, r0
 808dfe4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808dfe8:	ea5f 0c01 	movs.w	ip, r1
 808dfec:	bf02      	ittt	eq
 808dfee:	4684      	moveq	ip, r0
 808dff0:	4601      	moveq	r1, r0
 808dff2:	2000      	moveq	r0, #0
 808dff4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808dff8:	bf08      	it	eq
 808dffa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808dffe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808e002:	fabc f28c 	clz	r2, ip
 808e006:	3a08      	subs	r2, #8
 808e008:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808e00c:	db10      	blt.n	808e030 <__aeabi_l2f+0x5c>
 808e00e:	fa01 fc02 	lsl.w	ip, r1, r2
 808e012:	4463      	add	r3, ip
 808e014:	fa00 fc02 	lsl.w	ip, r0, r2
 808e018:	f1c2 0220 	rsb	r2, r2, #32
 808e01c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808e020:	fa20 f202 	lsr.w	r2, r0, r2
 808e024:	eb43 0002 	adc.w	r0, r3, r2
 808e028:	bf08      	it	eq
 808e02a:	f020 0001 	biceq.w	r0, r0, #1
 808e02e:	4770      	bx	lr
 808e030:	f102 0220 	add.w	r2, r2, #32
 808e034:	fa01 fc02 	lsl.w	ip, r1, r2
 808e038:	f1c2 0220 	rsb	r2, r2, #32
 808e03c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808e040:	fa21 f202 	lsr.w	r2, r1, r2
 808e044:	eb43 0002 	adc.w	r0, r3, r2
 808e048:	bf08      	it	eq
 808e04a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808e04e:	4770      	bx	lr

0808e050 <__aeabi_fmul>:
 808e050:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808e054:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808e058:	bf1e      	ittt	ne
 808e05a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808e05e:	ea92 0f0c 	teqne	r2, ip
 808e062:	ea93 0f0c 	teqne	r3, ip
 808e066:	d06f      	beq.n	808e148 <__aeabi_fmul+0xf8>
 808e068:	441a      	add	r2, r3
 808e06a:	ea80 0c01 	eor.w	ip, r0, r1
 808e06e:	0240      	lsls	r0, r0, #9
 808e070:	bf18      	it	ne
 808e072:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808e076:	d01e      	beq.n	808e0b6 <__aeabi_fmul+0x66>
 808e078:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808e07c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808e080:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808e084:	fba0 3101 	umull	r3, r1, r0, r1
 808e088:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808e08c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808e090:	bf3e      	ittt	cc
 808e092:	0049      	lslcc	r1, r1, #1
 808e094:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808e098:	005b      	lslcc	r3, r3, #1
 808e09a:	ea40 0001 	orr.w	r0, r0, r1
 808e09e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808e0a2:	2afd      	cmp	r2, #253	; 0xfd
 808e0a4:	d81d      	bhi.n	808e0e2 <__aeabi_fmul+0x92>
 808e0a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808e0aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808e0ae:	bf08      	it	eq
 808e0b0:	f020 0001 	biceq.w	r0, r0, #1
 808e0b4:	4770      	bx	lr
 808e0b6:	f090 0f00 	teq	r0, #0
 808e0ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808e0be:	bf08      	it	eq
 808e0c0:	0249      	lsleq	r1, r1, #9
 808e0c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808e0c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808e0ca:	3a7f      	subs	r2, #127	; 0x7f
 808e0cc:	bfc2      	ittt	gt
 808e0ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808e0d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808e0d6:	4770      	bxgt	lr
 808e0d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e0dc:	f04f 0300 	mov.w	r3, #0
 808e0e0:	3a01      	subs	r2, #1
 808e0e2:	dc5d      	bgt.n	808e1a0 <__aeabi_fmul+0x150>
 808e0e4:	f112 0f19 	cmn.w	r2, #25
 808e0e8:	bfdc      	itt	le
 808e0ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808e0ee:	4770      	bxle	lr
 808e0f0:	f1c2 0200 	rsb	r2, r2, #0
 808e0f4:	0041      	lsls	r1, r0, #1
 808e0f6:	fa21 f102 	lsr.w	r1, r1, r2
 808e0fa:	f1c2 0220 	rsb	r2, r2, #32
 808e0fe:	fa00 fc02 	lsl.w	ip, r0, r2
 808e102:	ea5f 0031 	movs.w	r0, r1, rrx
 808e106:	f140 0000 	adc.w	r0, r0, #0
 808e10a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808e10e:	bf08      	it	eq
 808e110:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808e114:	4770      	bx	lr
 808e116:	f092 0f00 	teq	r2, #0
 808e11a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808e11e:	bf02      	ittt	eq
 808e120:	0040      	lsleq	r0, r0, #1
 808e122:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808e126:	3a01      	subeq	r2, #1
 808e128:	d0f9      	beq.n	808e11e <__aeabi_fmul+0xce>
 808e12a:	ea40 000c 	orr.w	r0, r0, ip
 808e12e:	f093 0f00 	teq	r3, #0
 808e132:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808e136:	bf02      	ittt	eq
 808e138:	0049      	lsleq	r1, r1, #1
 808e13a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808e13e:	3b01      	subeq	r3, #1
 808e140:	d0f9      	beq.n	808e136 <__aeabi_fmul+0xe6>
 808e142:	ea41 010c 	orr.w	r1, r1, ip
 808e146:	e78f      	b.n	808e068 <__aeabi_fmul+0x18>
 808e148:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808e14c:	ea92 0f0c 	teq	r2, ip
 808e150:	bf18      	it	ne
 808e152:	ea93 0f0c 	teqne	r3, ip
 808e156:	d00a      	beq.n	808e16e <__aeabi_fmul+0x11e>
 808e158:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808e15c:	bf18      	it	ne
 808e15e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808e162:	d1d8      	bne.n	808e116 <__aeabi_fmul+0xc6>
 808e164:	ea80 0001 	eor.w	r0, r0, r1
 808e168:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808e16c:	4770      	bx	lr
 808e16e:	f090 0f00 	teq	r0, #0
 808e172:	bf17      	itett	ne
 808e174:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808e178:	4608      	moveq	r0, r1
 808e17a:	f091 0f00 	teqne	r1, #0
 808e17e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808e182:	d014      	beq.n	808e1ae <__aeabi_fmul+0x15e>
 808e184:	ea92 0f0c 	teq	r2, ip
 808e188:	d101      	bne.n	808e18e <__aeabi_fmul+0x13e>
 808e18a:	0242      	lsls	r2, r0, #9
 808e18c:	d10f      	bne.n	808e1ae <__aeabi_fmul+0x15e>
 808e18e:	ea93 0f0c 	teq	r3, ip
 808e192:	d103      	bne.n	808e19c <__aeabi_fmul+0x14c>
 808e194:	024b      	lsls	r3, r1, #9
 808e196:	bf18      	it	ne
 808e198:	4608      	movne	r0, r1
 808e19a:	d108      	bne.n	808e1ae <__aeabi_fmul+0x15e>
 808e19c:	ea80 0001 	eor.w	r0, r0, r1
 808e1a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808e1a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808e1a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e1ac:	4770      	bx	lr
 808e1ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808e1b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808e1b6:	4770      	bx	lr

0808e1b8 <__aeabi_fdiv>:
 808e1b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808e1bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808e1c0:	bf1e      	ittt	ne
 808e1c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808e1c6:	ea92 0f0c 	teqne	r2, ip
 808e1ca:	ea93 0f0c 	teqne	r3, ip
 808e1ce:	d069      	beq.n	808e2a4 <__aeabi_fdiv+0xec>
 808e1d0:	eba2 0203 	sub.w	r2, r2, r3
 808e1d4:	ea80 0c01 	eor.w	ip, r0, r1
 808e1d8:	0249      	lsls	r1, r1, #9
 808e1da:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808e1de:	d037      	beq.n	808e250 <__aeabi_fdiv+0x98>
 808e1e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808e1e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808e1e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808e1ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808e1f0:	428b      	cmp	r3, r1
 808e1f2:	bf38      	it	cc
 808e1f4:	005b      	lslcc	r3, r3, #1
 808e1f6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808e1fa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808e1fe:	428b      	cmp	r3, r1
 808e200:	bf24      	itt	cs
 808e202:	1a5b      	subcs	r3, r3, r1
 808e204:	ea40 000c 	orrcs.w	r0, r0, ip
 808e208:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808e20c:	bf24      	itt	cs
 808e20e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808e212:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808e216:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808e21a:	bf24      	itt	cs
 808e21c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808e220:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808e224:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808e228:	bf24      	itt	cs
 808e22a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808e22e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808e232:	011b      	lsls	r3, r3, #4
 808e234:	bf18      	it	ne
 808e236:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808e23a:	d1e0      	bne.n	808e1fe <__aeabi_fdiv+0x46>
 808e23c:	2afd      	cmp	r2, #253	; 0xfd
 808e23e:	f63f af50 	bhi.w	808e0e2 <__aeabi_fmul+0x92>
 808e242:	428b      	cmp	r3, r1
 808e244:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808e248:	bf08      	it	eq
 808e24a:	f020 0001 	biceq.w	r0, r0, #1
 808e24e:	4770      	bx	lr
 808e250:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808e254:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808e258:	327f      	adds	r2, #127	; 0x7f
 808e25a:	bfc2      	ittt	gt
 808e25c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808e260:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808e264:	4770      	bxgt	lr
 808e266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e26a:	f04f 0300 	mov.w	r3, #0
 808e26e:	3a01      	subs	r2, #1
 808e270:	e737      	b.n	808e0e2 <__aeabi_fmul+0x92>
 808e272:	f092 0f00 	teq	r2, #0
 808e276:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808e27a:	bf02      	ittt	eq
 808e27c:	0040      	lsleq	r0, r0, #1
 808e27e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808e282:	3a01      	subeq	r2, #1
 808e284:	d0f9      	beq.n	808e27a <__aeabi_fdiv+0xc2>
 808e286:	ea40 000c 	orr.w	r0, r0, ip
 808e28a:	f093 0f00 	teq	r3, #0
 808e28e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808e292:	bf02      	ittt	eq
 808e294:	0049      	lsleq	r1, r1, #1
 808e296:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808e29a:	3b01      	subeq	r3, #1
 808e29c:	d0f9      	beq.n	808e292 <__aeabi_fdiv+0xda>
 808e29e:	ea41 010c 	orr.w	r1, r1, ip
 808e2a2:	e795      	b.n	808e1d0 <__aeabi_fdiv+0x18>
 808e2a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808e2a8:	ea92 0f0c 	teq	r2, ip
 808e2ac:	d108      	bne.n	808e2c0 <__aeabi_fdiv+0x108>
 808e2ae:	0242      	lsls	r2, r0, #9
 808e2b0:	f47f af7d 	bne.w	808e1ae <__aeabi_fmul+0x15e>
 808e2b4:	ea93 0f0c 	teq	r3, ip
 808e2b8:	f47f af70 	bne.w	808e19c <__aeabi_fmul+0x14c>
 808e2bc:	4608      	mov	r0, r1
 808e2be:	e776      	b.n	808e1ae <__aeabi_fmul+0x15e>
 808e2c0:	ea93 0f0c 	teq	r3, ip
 808e2c4:	d104      	bne.n	808e2d0 <__aeabi_fdiv+0x118>
 808e2c6:	024b      	lsls	r3, r1, #9
 808e2c8:	f43f af4c 	beq.w	808e164 <__aeabi_fmul+0x114>
 808e2cc:	4608      	mov	r0, r1
 808e2ce:	e76e      	b.n	808e1ae <__aeabi_fmul+0x15e>
 808e2d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808e2d4:	bf18      	it	ne
 808e2d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808e2da:	d1ca      	bne.n	808e272 <__aeabi_fdiv+0xba>
 808e2dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808e2e0:	f47f af5c 	bne.w	808e19c <__aeabi_fmul+0x14c>
 808e2e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808e2e8:	f47f af3c 	bne.w	808e164 <__aeabi_fmul+0x114>
 808e2ec:	e75f      	b.n	808e1ae <__aeabi_fmul+0x15e>
 808e2ee:	bf00      	nop

0808e2f0 <__gesf2>:
 808e2f0:	f04f 3cff 	mov.w	ip, #4294967295
 808e2f4:	e006      	b.n	808e304 <__cmpsf2+0x4>
 808e2f6:	bf00      	nop

0808e2f8 <__lesf2>:
 808e2f8:	f04f 0c01 	mov.w	ip, #1
 808e2fc:	e002      	b.n	808e304 <__cmpsf2+0x4>
 808e2fe:	bf00      	nop

0808e300 <__cmpsf2>:
 808e300:	f04f 0c01 	mov.w	ip, #1
 808e304:	f84d cd04 	str.w	ip, [sp, #-4]!
 808e308:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808e30c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808e310:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808e314:	bf18      	it	ne
 808e316:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808e31a:	d011      	beq.n	808e340 <__cmpsf2+0x40>
 808e31c:	b001      	add	sp, #4
 808e31e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808e322:	bf18      	it	ne
 808e324:	ea90 0f01 	teqne	r0, r1
 808e328:	bf58      	it	pl
 808e32a:	ebb2 0003 	subspl.w	r0, r2, r3
 808e32e:	bf88      	it	hi
 808e330:	17c8      	asrhi	r0, r1, #31
 808e332:	bf38      	it	cc
 808e334:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808e338:	bf18      	it	ne
 808e33a:	f040 0001 	orrne.w	r0, r0, #1
 808e33e:	4770      	bx	lr
 808e340:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808e344:	d102      	bne.n	808e34c <__cmpsf2+0x4c>
 808e346:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808e34a:	d105      	bne.n	808e358 <__cmpsf2+0x58>
 808e34c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808e350:	d1e4      	bne.n	808e31c <__cmpsf2+0x1c>
 808e352:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808e356:	d0e1      	beq.n	808e31c <__cmpsf2+0x1c>
 808e358:	f85d 0b04 	ldr.w	r0, [sp], #4
 808e35c:	4770      	bx	lr
 808e35e:	bf00      	nop

0808e360 <__aeabi_cfrcmple>:
 808e360:	4684      	mov	ip, r0
 808e362:	4608      	mov	r0, r1
 808e364:	4661      	mov	r1, ip
 808e366:	e7ff      	b.n	808e368 <__aeabi_cfcmpeq>

0808e368 <__aeabi_cfcmpeq>:
 808e368:	b50f      	push	{r0, r1, r2, r3, lr}
 808e36a:	f7ff ffc9 	bl	808e300 <__cmpsf2>
 808e36e:	2800      	cmp	r0, #0
 808e370:	bf48      	it	mi
 808e372:	f110 0f00 	cmnmi.w	r0, #0
 808e376:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808e378 <__aeabi_fcmpeq>:
 808e378:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e37c:	f7ff fff4 	bl	808e368 <__aeabi_cfcmpeq>
 808e380:	bf0c      	ite	eq
 808e382:	2001      	moveq	r0, #1
 808e384:	2000      	movne	r0, #0
 808e386:	f85d fb08 	ldr.w	pc, [sp], #8
 808e38a:	bf00      	nop

0808e38c <__aeabi_fcmplt>:
 808e38c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e390:	f7ff ffea 	bl	808e368 <__aeabi_cfcmpeq>
 808e394:	bf34      	ite	cc
 808e396:	2001      	movcc	r0, #1
 808e398:	2000      	movcs	r0, #0
 808e39a:	f85d fb08 	ldr.w	pc, [sp], #8
 808e39e:	bf00      	nop

0808e3a0 <__aeabi_fcmple>:
 808e3a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e3a4:	f7ff ffe0 	bl	808e368 <__aeabi_cfcmpeq>
 808e3a8:	bf94      	ite	ls
 808e3aa:	2001      	movls	r0, #1
 808e3ac:	2000      	movhi	r0, #0
 808e3ae:	f85d fb08 	ldr.w	pc, [sp], #8
 808e3b2:	bf00      	nop

0808e3b4 <__aeabi_fcmpge>:
 808e3b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e3b8:	f7ff ffd2 	bl	808e360 <__aeabi_cfrcmple>
 808e3bc:	bf94      	ite	ls
 808e3be:	2001      	movls	r0, #1
 808e3c0:	2000      	movhi	r0, #0
 808e3c2:	f85d fb08 	ldr.w	pc, [sp], #8
 808e3c6:	bf00      	nop

0808e3c8 <__aeabi_fcmpgt>:
 808e3c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e3cc:	f7ff ffc8 	bl	808e360 <__aeabi_cfrcmple>
 808e3d0:	bf34      	ite	cc
 808e3d2:	2001      	movcc	r0, #1
 808e3d4:	2000      	movcs	r0, #0
 808e3d6:	f85d fb08 	ldr.w	pc, [sp], #8
 808e3da:	bf00      	nop

0808e3dc <__aeabi_f2iz>:
 808e3dc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808e3e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808e3e4:	d30f      	bcc.n	808e406 <__aeabi_f2iz+0x2a>
 808e3e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808e3ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808e3ee:	d90d      	bls.n	808e40c <__aeabi_f2iz+0x30>
 808e3f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808e3f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808e3f8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808e3fc:	fa23 f002 	lsr.w	r0, r3, r2
 808e400:	bf18      	it	ne
 808e402:	4240      	negne	r0, r0
 808e404:	4770      	bx	lr
 808e406:	f04f 0000 	mov.w	r0, #0
 808e40a:	4770      	bx	lr
 808e40c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808e410:	d101      	bne.n	808e416 <__aeabi_f2iz+0x3a>
 808e412:	0242      	lsls	r2, r0, #9
 808e414:	d105      	bne.n	808e422 <__aeabi_f2iz+0x46>
 808e416:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808e41a:	bf08      	it	eq
 808e41c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808e420:	4770      	bx	lr
 808e422:	f04f 0000 	mov.w	r0, #0
 808e426:	4770      	bx	lr

0808e428 <__aeabi_ldivmod>:
 808e428:	b97b      	cbnz	r3, 808e44a <__aeabi_ldivmod+0x22>
 808e42a:	b972      	cbnz	r2, 808e44a <__aeabi_ldivmod+0x22>
 808e42c:	2900      	cmp	r1, #0
 808e42e:	bfbe      	ittt	lt
 808e430:	2000      	movlt	r0, #0
 808e432:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808e436:	e006      	blt.n	808e446 <__aeabi_ldivmod+0x1e>
 808e438:	bf08      	it	eq
 808e43a:	2800      	cmpeq	r0, #0
 808e43c:	bf1c      	itt	ne
 808e43e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808e442:	f04f 30ff 	movne.w	r0, #4294967295
 808e446:	f000 ba0b 	b.w	808e860 <__aeabi_idiv0>
 808e44a:	f1ad 0c08 	sub.w	ip, sp, #8
 808e44e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e452:	2900      	cmp	r1, #0
 808e454:	db09      	blt.n	808e46a <__aeabi_ldivmod+0x42>
 808e456:	2b00      	cmp	r3, #0
 808e458:	db1a      	blt.n	808e490 <__aeabi_ldivmod+0x68>
 808e45a:	f000 f89f 	bl	808e59c <__udivmoddi4>
 808e45e:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e462:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e466:	b004      	add	sp, #16
 808e468:	4770      	bx	lr
 808e46a:	4240      	negs	r0, r0
 808e46c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e470:	2b00      	cmp	r3, #0
 808e472:	db1b      	blt.n	808e4ac <__aeabi_ldivmod+0x84>
 808e474:	f000 f892 	bl	808e59c <__udivmoddi4>
 808e478:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e47c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e480:	b004      	add	sp, #16
 808e482:	4240      	negs	r0, r0
 808e484:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e488:	4252      	negs	r2, r2
 808e48a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e48e:	4770      	bx	lr
 808e490:	4252      	negs	r2, r2
 808e492:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e496:	f000 f881 	bl	808e59c <__udivmoddi4>
 808e49a:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e49e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e4a2:	b004      	add	sp, #16
 808e4a4:	4240      	negs	r0, r0
 808e4a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e4aa:	4770      	bx	lr
 808e4ac:	4252      	negs	r2, r2
 808e4ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e4b2:	f000 f873 	bl	808e59c <__udivmoddi4>
 808e4b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e4ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e4be:	b004      	add	sp, #16
 808e4c0:	4252      	negs	r2, r2
 808e4c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e4c6:	4770      	bx	lr

0808e4c8 <__aeabi_uldivmod>:
 808e4c8:	b953      	cbnz	r3, 808e4e0 <__aeabi_uldivmod+0x18>
 808e4ca:	b94a      	cbnz	r2, 808e4e0 <__aeabi_uldivmod+0x18>
 808e4cc:	2900      	cmp	r1, #0
 808e4ce:	bf08      	it	eq
 808e4d0:	2800      	cmpeq	r0, #0
 808e4d2:	bf1c      	itt	ne
 808e4d4:	f04f 31ff 	movne.w	r1, #4294967295
 808e4d8:	f04f 30ff 	movne.w	r0, #4294967295
 808e4dc:	f000 b9c0 	b.w	808e860 <__aeabi_idiv0>
 808e4e0:	f1ad 0c08 	sub.w	ip, sp, #8
 808e4e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e4e8:	f000 f858 	bl	808e59c <__udivmoddi4>
 808e4ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e4f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e4f4:	b004      	add	sp, #16
 808e4f6:	4770      	bx	lr

0808e4f8 <__aeabi_f2lz>:
 808e4f8:	b510      	push	{r4, lr}
 808e4fa:	2100      	movs	r1, #0
 808e4fc:	4604      	mov	r4, r0
 808e4fe:	f7ff ff45 	bl	808e38c <__aeabi_fcmplt>
 808e502:	b920      	cbnz	r0, 808e50e <__aeabi_f2lz+0x16>
 808e504:	4620      	mov	r0, r4
 808e506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808e50a:	f000 b809 	b.w	808e520 <__aeabi_f2ulz>
 808e50e:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 808e512:	f000 f805 	bl	808e520 <__aeabi_f2ulz>
 808e516:	4240      	negs	r0, r0
 808e518:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e51c:	bd10      	pop	{r4, pc}
 808e51e:	bf00      	nop

0808e520 <__aeabi_f2ulz>:
 808e520:	b5d0      	push	{r4, r6, r7, lr}
 808e522:	f7ff f8e7 	bl	808d6f4 <__aeabi_f2d>
 808e526:	2200      	movs	r2, #0
 808e528:	4b0b      	ldr	r3, [pc, #44]	; (808e558 <__aeabi_f2ulz+0x38>)
 808e52a:	4606      	mov	r6, r0
 808e52c:	460f      	mov	r7, r1
 808e52e:	f7ff f939 	bl	808d7a4 <__aeabi_dmul>
 808e532:	f7ff fc0f 	bl	808dd54 <__aeabi_d2uiz>
 808e536:	4604      	mov	r4, r0
 808e538:	f7ff f8ba 	bl	808d6b0 <__aeabi_ui2d>
 808e53c:	2200      	movs	r2, #0
 808e53e:	4b07      	ldr	r3, [pc, #28]	; (808e55c <__aeabi_f2ulz+0x3c>)
 808e540:	f7ff f930 	bl	808d7a4 <__aeabi_dmul>
 808e544:	4602      	mov	r2, r0
 808e546:	460b      	mov	r3, r1
 808e548:	4630      	mov	r0, r6
 808e54a:	4639      	mov	r1, r7
 808e54c:	f7fe ff72 	bl	808d434 <__aeabi_dsub>
 808e550:	f7ff fc00 	bl	808dd54 <__aeabi_d2uiz>
 808e554:	4621      	mov	r1, r4
 808e556:	bdd0      	pop	{r4, r6, r7, pc}
 808e558:	3df00000 	.word	0x3df00000
 808e55c:	41f00000 	.word	0x41f00000

0808e560 <__aeabi_d2ulz>:
 808e560:	b5d0      	push	{r4, r6, r7, lr}
 808e562:	2200      	movs	r2, #0
 808e564:	4b0b      	ldr	r3, [pc, #44]	; (808e594 <__aeabi_d2ulz+0x34>)
 808e566:	4606      	mov	r6, r0
 808e568:	460f      	mov	r7, r1
 808e56a:	f7ff f91b 	bl	808d7a4 <__aeabi_dmul>
 808e56e:	f7ff fbf1 	bl	808dd54 <__aeabi_d2uiz>
 808e572:	4604      	mov	r4, r0
 808e574:	f7ff f89c 	bl	808d6b0 <__aeabi_ui2d>
 808e578:	2200      	movs	r2, #0
 808e57a:	4b07      	ldr	r3, [pc, #28]	; (808e598 <__aeabi_d2ulz+0x38>)
 808e57c:	f7ff f912 	bl	808d7a4 <__aeabi_dmul>
 808e580:	4602      	mov	r2, r0
 808e582:	460b      	mov	r3, r1
 808e584:	4630      	mov	r0, r6
 808e586:	4639      	mov	r1, r7
 808e588:	f7fe ff54 	bl	808d434 <__aeabi_dsub>
 808e58c:	f7ff fbe2 	bl	808dd54 <__aeabi_d2uiz>
 808e590:	4621      	mov	r1, r4
 808e592:	bdd0      	pop	{r4, r6, r7, pc}
 808e594:	3df00000 	.word	0x3df00000
 808e598:	41f00000 	.word	0x41f00000

0808e59c <__udivmoddi4>:
 808e59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808e5a0:	9e08      	ldr	r6, [sp, #32]
 808e5a2:	460d      	mov	r5, r1
 808e5a4:	4604      	mov	r4, r0
 808e5a6:	468e      	mov	lr, r1
 808e5a8:	2b00      	cmp	r3, #0
 808e5aa:	f040 8083 	bne.w	808e6b4 <__udivmoddi4+0x118>
 808e5ae:	428a      	cmp	r2, r1
 808e5b0:	4617      	mov	r7, r2
 808e5b2:	d947      	bls.n	808e644 <__udivmoddi4+0xa8>
 808e5b4:	fab2 f382 	clz	r3, r2
 808e5b8:	b14b      	cbz	r3, 808e5ce <__udivmoddi4+0x32>
 808e5ba:	f1c3 0120 	rsb	r1, r3, #32
 808e5be:	fa05 fe03 	lsl.w	lr, r5, r3
 808e5c2:	fa20 f101 	lsr.w	r1, r0, r1
 808e5c6:	409f      	lsls	r7, r3
 808e5c8:	ea41 0e0e 	orr.w	lr, r1, lr
 808e5cc:	409c      	lsls	r4, r3
 808e5ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808e5d2:	fbbe fcf8 	udiv	ip, lr, r8
 808e5d6:	fa1f f987 	uxth.w	r9, r7
 808e5da:	fb08 e21c 	mls	r2, r8, ip, lr
 808e5de:	fb0c f009 	mul.w	r0, ip, r9
 808e5e2:	0c21      	lsrs	r1, r4, #16
 808e5e4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 808e5e8:	4290      	cmp	r0, r2
 808e5ea:	d90a      	bls.n	808e602 <__udivmoddi4+0x66>
 808e5ec:	18ba      	adds	r2, r7, r2
 808e5ee:	f10c 31ff 	add.w	r1, ip, #4294967295
 808e5f2:	f080 8118 	bcs.w	808e826 <__udivmoddi4+0x28a>
 808e5f6:	4290      	cmp	r0, r2
 808e5f8:	f240 8115 	bls.w	808e826 <__udivmoddi4+0x28a>
 808e5fc:	f1ac 0c02 	sub.w	ip, ip, #2
 808e600:	443a      	add	r2, r7
 808e602:	1a12      	subs	r2, r2, r0
 808e604:	fbb2 f0f8 	udiv	r0, r2, r8
 808e608:	fb08 2210 	mls	r2, r8, r0, r2
 808e60c:	fb00 f109 	mul.w	r1, r0, r9
 808e610:	b2a4      	uxth	r4, r4
 808e612:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 808e616:	42a1      	cmp	r1, r4
 808e618:	d909      	bls.n	808e62e <__udivmoddi4+0x92>
 808e61a:	193c      	adds	r4, r7, r4
 808e61c:	f100 32ff 	add.w	r2, r0, #4294967295
 808e620:	f080 8103 	bcs.w	808e82a <__udivmoddi4+0x28e>
 808e624:	42a1      	cmp	r1, r4
 808e626:	f240 8100 	bls.w	808e82a <__udivmoddi4+0x28e>
 808e62a:	3802      	subs	r0, #2
 808e62c:	443c      	add	r4, r7
 808e62e:	1a64      	subs	r4, r4, r1
 808e630:	2100      	movs	r1, #0
 808e632:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 808e636:	b11e      	cbz	r6, 808e640 <__udivmoddi4+0xa4>
 808e638:	2200      	movs	r2, #0
 808e63a:	40dc      	lsrs	r4, r3
 808e63c:	e9c6 4200 	strd	r4, r2, [r6]
 808e640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808e644:	b902      	cbnz	r2, 808e648 <__udivmoddi4+0xac>
 808e646:	deff      	udf	#255	; 0xff
 808e648:	fab2 f382 	clz	r3, r2
 808e64c:	2b00      	cmp	r3, #0
 808e64e:	d14f      	bne.n	808e6f0 <__udivmoddi4+0x154>
 808e650:	1a8d      	subs	r5, r1, r2
 808e652:	2101      	movs	r1, #1
 808e654:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 808e658:	fa1f f882 	uxth.w	r8, r2
 808e65c:	fbb5 fcfe 	udiv	ip, r5, lr
 808e660:	fb0e 551c 	mls	r5, lr, ip, r5
 808e664:	fb08 f00c 	mul.w	r0, r8, ip
 808e668:	0c22      	lsrs	r2, r4, #16
 808e66a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 808e66e:	42a8      	cmp	r0, r5
 808e670:	d907      	bls.n	808e682 <__udivmoddi4+0xe6>
 808e672:	197d      	adds	r5, r7, r5
 808e674:	f10c 32ff 	add.w	r2, ip, #4294967295
 808e678:	d202      	bcs.n	808e680 <__udivmoddi4+0xe4>
 808e67a:	42a8      	cmp	r0, r5
 808e67c:	f200 80e9 	bhi.w	808e852 <__udivmoddi4+0x2b6>
 808e680:	4694      	mov	ip, r2
 808e682:	1a2d      	subs	r5, r5, r0
 808e684:	fbb5 f0fe 	udiv	r0, r5, lr
 808e688:	fb0e 5510 	mls	r5, lr, r0, r5
 808e68c:	fb08 f800 	mul.w	r8, r8, r0
 808e690:	b2a4      	uxth	r4, r4
 808e692:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 808e696:	45a0      	cmp	r8, r4
 808e698:	d907      	bls.n	808e6aa <__udivmoddi4+0x10e>
 808e69a:	193c      	adds	r4, r7, r4
 808e69c:	f100 32ff 	add.w	r2, r0, #4294967295
 808e6a0:	d202      	bcs.n	808e6a8 <__udivmoddi4+0x10c>
 808e6a2:	45a0      	cmp	r8, r4
 808e6a4:	f200 80d9 	bhi.w	808e85a <__udivmoddi4+0x2be>
 808e6a8:	4610      	mov	r0, r2
 808e6aa:	eba4 0408 	sub.w	r4, r4, r8
 808e6ae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 808e6b2:	e7c0      	b.n	808e636 <__udivmoddi4+0x9a>
 808e6b4:	428b      	cmp	r3, r1
 808e6b6:	d908      	bls.n	808e6ca <__udivmoddi4+0x12e>
 808e6b8:	2e00      	cmp	r6, #0
 808e6ba:	f000 80b1 	beq.w	808e820 <__udivmoddi4+0x284>
 808e6be:	2100      	movs	r1, #0
 808e6c0:	e9c6 0500 	strd	r0, r5, [r6]
 808e6c4:	4608      	mov	r0, r1
 808e6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808e6ca:	fab3 f183 	clz	r1, r3
 808e6ce:	2900      	cmp	r1, #0
 808e6d0:	d14b      	bne.n	808e76a <__udivmoddi4+0x1ce>
 808e6d2:	42ab      	cmp	r3, r5
 808e6d4:	d302      	bcc.n	808e6dc <__udivmoddi4+0x140>
 808e6d6:	4282      	cmp	r2, r0
 808e6d8:	f200 80b9 	bhi.w	808e84e <__udivmoddi4+0x2b2>
 808e6dc:	1a84      	subs	r4, r0, r2
 808e6de:	eb65 0303 	sbc.w	r3, r5, r3
 808e6e2:	2001      	movs	r0, #1
 808e6e4:	469e      	mov	lr, r3
 808e6e6:	2e00      	cmp	r6, #0
 808e6e8:	d0aa      	beq.n	808e640 <__udivmoddi4+0xa4>
 808e6ea:	e9c6 4e00 	strd	r4, lr, [r6]
 808e6ee:	e7a7      	b.n	808e640 <__udivmoddi4+0xa4>
 808e6f0:	409f      	lsls	r7, r3
 808e6f2:	f1c3 0220 	rsb	r2, r3, #32
 808e6f6:	40d1      	lsrs	r1, r2
 808e6f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 808e6fc:	fbb1 f0fe 	udiv	r0, r1, lr
 808e700:	fa1f f887 	uxth.w	r8, r7
 808e704:	fb0e 1110 	mls	r1, lr, r0, r1
 808e708:	fa24 f202 	lsr.w	r2, r4, r2
 808e70c:	409d      	lsls	r5, r3
 808e70e:	fb00 fc08 	mul.w	ip, r0, r8
 808e712:	432a      	orrs	r2, r5
 808e714:	0c15      	lsrs	r5, r2, #16
 808e716:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 808e71a:	45ac      	cmp	ip, r5
 808e71c:	fa04 f403 	lsl.w	r4, r4, r3
 808e720:	d909      	bls.n	808e736 <__udivmoddi4+0x19a>
 808e722:	197d      	adds	r5, r7, r5
 808e724:	f100 31ff 	add.w	r1, r0, #4294967295
 808e728:	f080 808f 	bcs.w	808e84a <__udivmoddi4+0x2ae>
 808e72c:	45ac      	cmp	ip, r5
 808e72e:	f240 808c 	bls.w	808e84a <__udivmoddi4+0x2ae>
 808e732:	3802      	subs	r0, #2
 808e734:	443d      	add	r5, r7
 808e736:	eba5 050c 	sub.w	r5, r5, ip
 808e73a:	fbb5 f1fe 	udiv	r1, r5, lr
 808e73e:	fb0e 5c11 	mls	ip, lr, r1, r5
 808e742:	fb01 f908 	mul.w	r9, r1, r8
 808e746:	b295      	uxth	r5, r2
 808e748:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 808e74c:	45a9      	cmp	r9, r5
 808e74e:	d907      	bls.n	808e760 <__udivmoddi4+0x1c4>
 808e750:	197d      	adds	r5, r7, r5
 808e752:	f101 32ff 	add.w	r2, r1, #4294967295
 808e756:	d274      	bcs.n	808e842 <__udivmoddi4+0x2a6>
 808e758:	45a9      	cmp	r9, r5
 808e75a:	d972      	bls.n	808e842 <__udivmoddi4+0x2a6>
 808e75c:	3902      	subs	r1, #2
 808e75e:	443d      	add	r5, r7
 808e760:	eba5 0509 	sub.w	r5, r5, r9
 808e764:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 808e768:	e778      	b.n	808e65c <__udivmoddi4+0xc0>
 808e76a:	f1c1 0720 	rsb	r7, r1, #32
 808e76e:	408b      	lsls	r3, r1
 808e770:	fa22 fc07 	lsr.w	ip, r2, r7
 808e774:	ea4c 0c03 	orr.w	ip, ip, r3
 808e778:	fa25 f407 	lsr.w	r4, r5, r7
 808e77c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 808e780:	fbb4 f9fe 	udiv	r9, r4, lr
 808e784:	fa1f f88c 	uxth.w	r8, ip
 808e788:	fb0e 4419 	mls	r4, lr, r9, r4
 808e78c:	fa20 f307 	lsr.w	r3, r0, r7
 808e790:	fb09 fa08 	mul.w	sl, r9, r8
 808e794:	408d      	lsls	r5, r1
 808e796:	431d      	orrs	r5, r3
 808e798:	0c2b      	lsrs	r3, r5, #16
 808e79a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 808e79e:	45a2      	cmp	sl, r4
 808e7a0:	fa02 f201 	lsl.w	r2, r2, r1
 808e7a4:	fa00 f301 	lsl.w	r3, r0, r1
 808e7a8:	d909      	bls.n	808e7be <__udivmoddi4+0x222>
 808e7aa:	eb1c 0404 	adds.w	r4, ip, r4
 808e7ae:	f109 30ff 	add.w	r0, r9, #4294967295
 808e7b2:	d248      	bcs.n	808e846 <__udivmoddi4+0x2aa>
 808e7b4:	45a2      	cmp	sl, r4
 808e7b6:	d946      	bls.n	808e846 <__udivmoddi4+0x2aa>
 808e7b8:	f1a9 0902 	sub.w	r9, r9, #2
 808e7bc:	4464      	add	r4, ip
 808e7be:	eba4 040a 	sub.w	r4, r4, sl
 808e7c2:	fbb4 f0fe 	udiv	r0, r4, lr
 808e7c6:	fb0e 4410 	mls	r4, lr, r0, r4
 808e7ca:	fb00 fa08 	mul.w	sl, r0, r8
 808e7ce:	b2ad      	uxth	r5, r5
 808e7d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 808e7d4:	45a2      	cmp	sl, r4
 808e7d6:	d908      	bls.n	808e7ea <__udivmoddi4+0x24e>
 808e7d8:	eb1c 0404 	adds.w	r4, ip, r4
 808e7dc:	f100 35ff 	add.w	r5, r0, #4294967295
 808e7e0:	d22d      	bcs.n	808e83e <__udivmoddi4+0x2a2>
 808e7e2:	45a2      	cmp	sl, r4
 808e7e4:	d92b      	bls.n	808e83e <__udivmoddi4+0x2a2>
 808e7e6:	3802      	subs	r0, #2
 808e7e8:	4464      	add	r4, ip
 808e7ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 808e7ee:	fba0 8902 	umull	r8, r9, r0, r2
 808e7f2:	eba4 040a 	sub.w	r4, r4, sl
 808e7f6:	454c      	cmp	r4, r9
 808e7f8:	46c6      	mov	lr, r8
 808e7fa:	464d      	mov	r5, r9
 808e7fc:	d319      	bcc.n	808e832 <__udivmoddi4+0x296>
 808e7fe:	d016      	beq.n	808e82e <__udivmoddi4+0x292>
 808e800:	b15e      	cbz	r6, 808e81a <__udivmoddi4+0x27e>
 808e802:	ebb3 020e 	subs.w	r2, r3, lr
 808e806:	eb64 0405 	sbc.w	r4, r4, r5
 808e80a:	fa04 f707 	lsl.w	r7, r4, r7
 808e80e:	fa22 f301 	lsr.w	r3, r2, r1
 808e812:	431f      	orrs	r7, r3
 808e814:	40cc      	lsrs	r4, r1
 808e816:	e9c6 7400 	strd	r7, r4, [r6]
 808e81a:	2100      	movs	r1, #0
 808e81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808e820:	4631      	mov	r1, r6
 808e822:	4630      	mov	r0, r6
 808e824:	e70c      	b.n	808e640 <__udivmoddi4+0xa4>
 808e826:	468c      	mov	ip, r1
 808e828:	e6eb      	b.n	808e602 <__udivmoddi4+0x66>
 808e82a:	4610      	mov	r0, r2
 808e82c:	e6ff      	b.n	808e62e <__udivmoddi4+0x92>
 808e82e:	4543      	cmp	r3, r8
 808e830:	d2e6      	bcs.n	808e800 <__udivmoddi4+0x264>
 808e832:	ebb8 0e02 	subs.w	lr, r8, r2
 808e836:	eb69 050c 	sbc.w	r5, r9, ip
 808e83a:	3801      	subs	r0, #1
 808e83c:	e7e0      	b.n	808e800 <__udivmoddi4+0x264>
 808e83e:	4628      	mov	r0, r5
 808e840:	e7d3      	b.n	808e7ea <__udivmoddi4+0x24e>
 808e842:	4611      	mov	r1, r2
 808e844:	e78c      	b.n	808e760 <__udivmoddi4+0x1c4>
 808e846:	4681      	mov	r9, r0
 808e848:	e7b9      	b.n	808e7be <__udivmoddi4+0x222>
 808e84a:	4608      	mov	r0, r1
 808e84c:	e773      	b.n	808e736 <__udivmoddi4+0x19a>
 808e84e:	4608      	mov	r0, r1
 808e850:	e749      	b.n	808e6e6 <__udivmoddi4+0x14a>
 808e852:	f1ac 0c02 	sub.w	ip, ip, #2
 808e856:	443d      	add	r5, r7
 808e858:	e713      	b.n	808e682 <__udivmoddi4+0xe6>
 808e85a:	3802      	subs	r0, #2
 808e85c:	443c      	add	r4, r7
 808e85e:	e724      	b.n	808e6aa <__udivmoddi4+0x10e>

0808e860 <__aeabi_idiv0>:
 808e860:	4770      	bx	lr
 808e862:	bf00      	nop

0808e864 <asctime_r>:
 808e864:	b510      	push	{r4, lr}
 808e866:	460c      	mov	r4, r1
 808e868:	6941      	ldr	r1, [r0, #20]
 808e86a:	b086      	sub	sp, #24
 808e86c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808e870:	6903      	ldr	r3, [r0, #16]
 808e872:	6982      	ldr	r2, [r0, #24]
 808e874:	9104      	str	r1, [sp, #16]
 808e876:	6801      	ldr	r1, [r0, #0]
 808e878:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808e87c:	9103      	str	r1, [sp, #12]
 808e87e:	6841      	ldr	r1, [r0, #4]
 808e880:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808e884:	9102      	str	r1, [sp, #8]
 808e886:	6881      	ldr	r1, [r0, #8]
 808e888:	9101      	str	r1, [sp, #4]
 808e88a:	68c1      	ldr	r1, [r0, #12]
 808e88c:	4620      	mov	r0, r4
 808e88e:	9100      	str	r1, [sp, #0]
 808e890:	4904      	ldr	r1, [pc, #16]	; (808e8a4 <asctime_r+0x40>)
 808e892:	440b      	add	r3, r1
 808e894:	4904      	ldr	r1, [pc, #16]	; (808e8a8 <asctime_r+0x44>)
 808e896:	440a      	add	r2, r1
 808e898:	4904      	ldr	r1, [pc, #16]	; (808e8ac <asctime_r+0x48>)
 808e89a:	f7fc f9af 	bl	808abfc <siprintf>
 808e89e:	4620      	mov	r0, r4
 808e8a0:	b006      	add	sp, #24
 808e8a2:	bd10      	pop	{r4, pc}
 808e8a4:	080945a6 	.word	0x080945a6
 808e8a8:	08094591 	.word	0x08094591
 808e8ac:	08094571 	.word	0x08094571

0808e8b0 <atof>:
 808e8b0:	2100      	movs	r1, #0
 808e8b2:	f001 bd61 	b.w	8090378 <strtod>

0808e8b6 <atoi>:
 808e8b6:	220a      	movs	r2, #10
 808e8b8:	2100      	movs	r1, #0
 808e8ba:	f001 be0f 	b.w	80904dc <strtol>

0808e8be <atol>:
 808e8be:	220a      	movs	r2, #10
 808e8c0:	2100      	movs	r1, #0
 808e8c2:	f001 be0b 	b.w	80904dc <strtol>
	...

0808e8c8 <__cxa_atexit>:
 808e8c8:	b510      	push	{r4, lr}
 808e8ca:	4604      	mov	r4, r0
 808e8cc:	4804      	ldr	r0, [pc, #16]	; (808e8e0 <__cxa_atexit+0x18>)
 808e8ce:	4613      	mov	r3, r2
 808e8d0:	b120      	cbz	r0, 808e8dc <__cxa_atexit+0x14>
 808e8d2:	460a      	mov	r2, r1
 808e8d4:	2002      	movs	r0, #2
 808e8d6:	4621      	mov	r1, r4
 808e8d8:	f3af 8000 	nop.w
 808e8dc:	bd10      	pop	{r4, pc}
 808e8de:	bf00      	nop
 808e8e0:	00000000 	.word	0x00000000

0808e8e4 <localtime_r>:
 808e8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e8e8:	460c      	mov	r4, r1
 808e8ea:	4607      	mov	r7, r0
 808e8ec:	f002 fc64 	bl	80911b8 <__gettzinfo>
 808e8f0:	4621      	mov	r1, r4
 808e8f2:	4680      	mov	r8, r0
 808e8f4:	4638      	mov	r0, r7
 808e8f6:	f002 fc63 	bl	80911c0 <gmtime_r>
 808e8fa:	6943      	ldr	r3, [r0, #20]
 808e8fc:	4604      	mov	r4, r0
 808e8fe:	079a      	lsls	r2, r3, #30
 808e900:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 808e904:	d105      	bne.n	808e912 <localtime_r+0x2e>
 808e906:	2264      	movs	r2, #100	; 0x64
 808e908:	fb96 f3f2 	sdiv	r3, r6, r2
 808e90c:	fb02 6313 	mls	r3, r2, r3, r6
 808e910:	bb7b      	cbnz	r3, 808e972 <localtime_r+0x8e>
 808e912:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808e916:	fb96 f5f3 	sdiv	r5, r6, r3
 808e91a:	fb03 6515 	mls	r5, r3, r5, r6
 808e91e:	fab5 f585 	clz	r5, r5
 808e922:	096d      	lsrs	r5, r5, #5
 808e924:	2230      	movs	r2, #48	; 0x30
 808e926:	4b68      	ldr	r3, [pc, #416]	; (808eac8 <localtime_r+0x1e4>)
 808e928:	fb02 3505 	mla	r5, r2, r5, r3
 808e92c:	f001 ff18 	bl	8090760 <__tz_lock>
 808e930:	f001 ff22 	bl	8090778 <_tzset_unlocked>
 808e934:	4b65      	ldr	r3, [pc, #404]	; (808eacc <localtime_r+0x1e8>)
 808e936:	681b      	ldr	r3, [r3, #0]
 808e938:	b353      	cbz	r3, 808e990 <localtime_r+0xac>
 808e93a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808e93e:	42b3      	cmp	r3, r6
 808e940:	d119      	bne.n	808e976 <localtime_r+0x92>
 808e942:	e9d7 6700 	ldrd	r6, r7, [r7]
 808e946:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 808e94a:	f8d8 1000 	ldr.w	r1, [r8]
 808e94e:	b9d1      	cbnz	r1, 808e986 <localtime_r+0xa2>
 808e950:	4296      	cmp	r6, r2
 808e952:	eb77 0303 	sbcs.w	r3, r7, r3
 808e956:	da23      	bge.n	808e9a0 <localtime_r+0xbc>
 808e958:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 808e95c:	4296      	cmp	r6, r2
 808e95e:	eb77 0303 	sbcs.w	r3, r7, r3
 808e962:	bfb4      	ite	lt
 808e964:	2301      	movlt	r3, #1
 808e966:	2300      	movge	r3, #0
 808e968:	6223      	str	r3, [r4, #32]
 808e96a:	db1b      	blt.n	808e9a4 <localtime_r+0xc0>
 808e96c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 808e970:	e01a      	b.n	808e9a8 <localtime_r+0xc4>
 808e972:	2501      	movs	r5, #1
 808e974:	e7d6      	b.n	808e924 <localtime_r+0x40>
 808e976:	4630      	mov	r0, r6
 808e978:	f001 fe4a 	bl	8090610 <__tzcalc_limits>
 808e97c:	2800      	cmp	r0, #0
 808e97e:	d1e0      	bne.n	808e942 <localtime_r+0x5e>
 808e980:	f04f 33ff 	mov.w	r3, #4294967295
 808e984:	e004      	b.n	808e990 <localtime_r+0xac>
 808e986:	4296      	cmp	r6, r2
 808e988:	eb77 0303 	sbcs.w	r3, r7, r3
 808e98c:	da02      	bge.n	808e994 <localtime_r+0xb0>
 808e98e:	2300      	movs	r3, #0
 808e990:	6223      	str	r3, [r4, #32]
 808e992:	e7eb      	b.n	808e96c <localtime_r+0x88>
 808e994:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 808e998:	4296      	cmp	r6, r2
 808e99a:	eb77 0303 	sbcs.w	r3, r7, r3
 808e99e:	daf6      	bge.n	808e98e <localtime_r+0xaa>
 808e9a0:	2301      	movs	r3, #1
 808e9a2:	6223      	str	r3, [r4, #32]
 808e9a4:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 808e9a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808e9ac:	fb91 f6f3 	sdiv	r6, r1, r3
 808e9b0:	203c      	movs	r0, #60	; 0x3c
 808e9b2:	fb03 1316 	mls	r3, r3, r6, r1
 808e9b6:	fb93 f2f0 	sdiv	r2, r3, r0
 808e9ba:	fb00 3012 	mls	r0, r0, r2, r3
 808e9be:	6861      	ldr	r1, [r4, #4]
 808e9c0:	6823      	ldr	r3, [r4, #0]
 808e9c2:	1a89      	subs	r1, r1, r2
 808e9c4:	68a2      	ldr	r2, [r4, #8]
 808e9c6:	1a1b      	subs	r3, r3, r0
 808e9c8:	1b92      	subs	r2, r2, r6
 808e9ca:	2b3b      	cmp	r3, #59	; 0x3b
 808e9cc:	6023      	str	r3, [r4, #0]
 808e9ce:	6061      	str	r1, [r4, #4]
 808e9d0:	60a2      	str	r2, [r4, #8]
 808e9d2:	dd34      	ble.n	808ea3e <localtime_r+0x15a>
 808e9d4:	3101      	adds	r1, #1
 808e9d6:	6061      	str	r1, [r4, #4]
 808e9d8:	3b3c      	subs	r3, #60	; 0x3c
 808e9da:	6023      	str	r3, [r4, #0]
 808e9dc:	6863      	ldr	r3, [r4, #4]
 808e9de:	2b3b      	cmp	r3, #59	; 0x3b
 808e9e0:	dd33      	ble.n	808ea4a <localtime_r+0x166>
 808e9e2:	3201      	adds	r2, #1
 808e9e4:	60a2      	str	r2, [r4, #8]
 808e9e6:	3b3c      	subs	r3, #60	; 0x3c
 808e9e8:	6063      	str	r3, [r4, #4]
 808e9ea:	68a3      	ldr	r3, [r4, #8]
 808e9ec:	2b17      	cmp	r3, #23
 808e9ee:	dd32      	ble.n	808ea56 <localtime_r+0x172>
 808e9f0:	69e2      	ldr	r2, [r4, #28]
 808e9f2:	3b18      	subs	r3, #24
 808e9f4:	3201      	adds	r2, #1
 808e9f6:	61e2      	str	r2, [r4, #28]
 808e9f8:	69a2      	ldr	r2, [r4, #24]
 808e9fa:	60a3      	str	r3, [r4, #8]
 808e9fc:	3201      	adds	r2, #1
 808e9fe:	2a06      	cmp	r2, #6
 808ea00:	bfc8      	it	gt
 808ea02:	2200      	movgt	r2, #0
 808ea04:	61a2      	str	r2, [r4, #24]
 808ea06:	68e2      	ldr	r2, [r4, #12]
 808ea08:	6923      	ldr	r3, [r4, #16]
 808ea0a:	3201      	adds	r2, #1
 808ea0c:	60e2      	str	r2, [r4, #12]
 808ea0e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808ea12:	428a      	cmp	r2, r1
 808ea14:	dd0e      	ble.n	808ea34 <localtime_r+0x150>
 808ea16:	2b0b      	cmp	r3, #11
 808ea18:	eba2 0201 	sub.w	r2, r2, r1
 808ea1c:	60e2      	str	r2, [r4, #12]
 808ea1e:	f103 0201 	add.w	r2, r3, #1
 808ea22:	bf05      	ittet	eq
 808ea24:	2200      	moveq	r2, #0
 808ea26:	6963      	ldreq	r3, [r4, #20]
 808ea28:	6122      	strne	r2, [r4, #16]
 808ea2a:	3301      	addeq	r3, #1
 808ea2c:	bf02      	ittt	eq
 808ea2e:	6122      	streq	r2, [r4, #16]
 808ea30:	6163      	streq	r3, [r4, #20]
 808ea32:	61e2      	streq	r2, [r4, #28]
 808ea34:	f001 fe9a 	bl	809076c <__tz_unlock>
 808ea38:	4620      	mov	r0, r4
 808ea3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808ea3e:	2b00      	cmp	r3, #0
 808ea40:	dacc      	bge.n	808e9dc <localtime_r+0xf8>
 808ea42:	3901      	subs	r1, #1
 808ea44:	6061      	str	r1, [r4, #4]
 808ea46:	333c      	adds	r3, #60	; 0x3c
 808ea48:	e7c7      	b.n	808e9da <localtime_r+0xf6>
 808ea4a:	2b00      	cmp	r3, #0
 808ea4c:	dacd      	bge.n	808e9ea <localtime_r+0x106>
 808ea4e:	3a01      	subs	r2, #1
 808ea50:	60a2      	str	r2, [r4, #8]
 808ea52:	333c      	adds	r3, #60	; 0x3c
 808ea54:	e7c8      	b.n	808e9e8 <localtime_r+0x104>
 808ea56:	2b00      	cmp	r3, #0
 808ea58:	daec      	bge.n	808ea34 <localtime_r+0x150>
 808ea5a:	69e2      	ldr	r2, [r4, #28]
 808ea5c:	3318      	adds	r3, #24
 808ea5e:	3a01      	subs	r2, #1
 808ea60:	61e2      	str	r2, [r4, #28]
 808ea62:	69a2      	ldr	r2, [r4, #24]
 808ea64:	60a3      	str	r3, [r4, #8]
 808ea66:	3a01      	subs	r2, #1
 808ea68:	bf48      	it	mi
 808ea6a:	2206      	movmi	r2, #6
 808ea6c:	61a2      	str	r2, [r4, #24]
 808ea6e:	68e2      	ldr	r2, [r4, #12]
 808ea70:	3a01      	subs	r2, #1
 808ea72:	60e2      	str	r2, [r4, #12]
 808ea74:	2a00      	cmp	r2, #0
 808ea76:	d1dd      	bne.n	808ea34 <localtime_r+0x150>
 808ea78:	6923      	ldr	r3, [r4, #16]
 808ea7a:	3b01      	subs	r3, #1
 808ea7c:	d405      	bmi.n	808ea8a <localtime_r+0x1a6>
 808ea7e:	6123      	str	r3, [r4, #16]
 808ea80:	6923      	ldr	r3, [r4, #16]
 808ea82:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808ea86:	60e3      	str	r3, [r4, #12]
 808ea88:	e7d4      	b.n	808ea34 <localtime_r+0x150>
 808ea8a:	230b      	movs	r3, #11
 808ea8c:	6123      	str	r3, [r4, #16]
 808ea8e:	6963      	ldr	r3, [r4, #20]
 808ea90:	1e5a      	subs	r2, r3, #1
 808ea92:	6162      	str	r2, [r4, #20]
 808ea94:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 808ea98:	0793      	lsls	r3, r2, #30
 808ea9a:	d105      	bne.n	808eaa8 <localtime_r+0x1c4>
 808ea9c:	2164      	movs	r1, #100	; 0x64
 808ea9e:	fb92 f3f1 	sdiv	r3, r2, r1
 808eaa2:	fb01 2313 	mls	r3, r1, r3, r2
 808eaa6:	b963      	cbnz	r3, 808eac2 <localtime_r+0x1de>
 808eaa8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808eaac:	fb92 f3f1 	sdiv	r3, r2, r1
 808eab0:	fb01 2313 	mls	r3, r1, r3, r2
 808eab4:	fab3 f383 	clz	r3, r3
 808eab8:	095b      	lsrs	r3, r3, #5
 808eaba:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808eabe:	61e3      	str	r3, [r4, #28]
 808eac0:	e7de      	b.n	808ea80 <localtime_r+0x19c>
 808eac2:	2301      	movs	r3, #1
 808eac4:	e7f9      	b.n	808eaba <localtime_r+0x1d6>
 808eac6:	bf00      	nop
 808eac8:	080945cc 	.word	0x080945cc
 808eacc:	200013d4 	.word	0x200013d4

0808ead0 <ldiv>:
 808ead0:	b510      	push	{r4, lr}
 808ead2:	fb91 f4f2 	sdiv	r4, r1, r2
 808ead6:	2900      	cmp	r1, #0
 808ead8:	fb02 1314 	mls	r3, r2, r4, r1
 808eadc:	db06      	blt.n	808eaec <ldiv+0x1c>
 808eade:	2b00      	cmp	r3, #0
 808eae0:	da01      	bge.n	808eae6 <ldiv+0x16>
 808eae2:	3401      	adds	r4, #1
 808eae4:	1a9b      	subs	r3, r3, r2
 808eae6:	e9c0 4300 	strd	r4, r3, [r0]
 808eaea:	bd10      	pop	{r4, pc}
 808eaec:	2b00      	cmp	r3, #0
 808eaee:	bfc4      	itt	gt
 808eaf0:	f104 34ff 	addgt.w	r4, r4, #4294967295
 808eaf4:	189b      	addgt	r3, r3, r2
 808eaf6:	e7f6      	b.n	808eae6 <ldiv+0x16>

0808eaf8 <memcmp>:
 808eaf8:	b530      	push	{r4, r5, lr}
 808eafa:	2400      	movs	r4, #0
 808eafc:	3901      	subs	r1, #1
 808eafe:	42a2      	cmp	r2, r4
 808eb00:	d101      	bne.n	808eb06 <memcmp+0xe>
 808eb02:	2000      	movs	r0, #0
 808eb04:	e005      	b.n	808eb12 <memcmp+0x1a>
 808eb06:	5d03      	ldrb	r3, [r0, r4]
 808eb08:	3401      	adds	r4, #1
 808eb0a:	5d0d      	ldrb	r5, [r1, r4]
 808eb0c:	42ab      	cmp	r3, r5
 808eb0e:	d0f6      	beq.n	808eafe <memcmp+0x6>
 808eb10:	1b58      	subs	r0, r3, r5
 808eb12:	bd30      	pop	{r4, r5, pc}

0808eb14 <memcpy>:
 808eb14:	440a      	add	r2, r1
 808eb16:	4291      	cmp	r1, r2
 808eb18:	f100 33ff 	add.w	r3, r0, #4294967295
 808eb1c:	d100      	bne.n	808eb20 <memcpy+0xc>
 808eb1e:	4770      	bx	lr
 808eb20:	b510      	push	{r4, lr}
 808eb22:	f811 4b01 	ldrb.w	r4, [r1], #1
 808eb26:	4291      	cmp	r1, r2
 808eb28:	f803 4f01 	strb.w	r4, [r3, #1]!
 808eb2c:	d1f9      	bne.n	808eb22 <memcpy+0xe>
 808eb2e:	bd10      	pop	{r4, pc}

0808eb30 <memset>:
 808eb30:	4603      	mov	r3, r0
 808eb32:	4402      	add	r2, r0
 808eb34:	4293      	cmp	r3, r2
 808eb36:	d100      	bne.n	808eb3a <memset+0xa>
 808eb38:	4770      	bx	lr
 808eb3a:	f803 1b01 	strb.w	r1, [r3], #1
 808eb3e:	e7f9      	b.n	808eb34 <memset+0x4>

0808eb40 <srand>:
 808eb40:	b538      	push	{r3, r4, r5, lr}
 808eb42:	4b0d      	ldr	r3, [pc, #52]	; (808eb78 <srand+0x38>)
 808eb44:	4604      	mov	r4, r0
 808eb46:	681d      	ldr	r5, [r3, #0]
 808eb48:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808eb4a:	b97b      	cbnz	r3, 808eb6c <srand+0x2c>
 808eb4c:	2018      	movs	r0, #24
 808eb4e:	f7fc f835 	bl	808abbc <malloc>
 808eb52:	4a0a      	ldr	r2, [pc, #40]	; (808eb7c <srand+0x3c>)
 808eb54:	4b0a      	ldr	r3, [pc, #40]	; (808eb80 <srand+0x40>)
 808eb56:	63a8      	str	r0, [r5, #56]	; 0x38
 808eb58:	e9c0 2300 	strd	r2, r3, [r0]
 808eb5c:	4b09      	ldr	r3, [pc, #36]	; (808eb84 <srand+0x44>)
 808eb5e:	2201      	movs	r2, #1
 808eb60:	6083      	str	r3, [r0, #8]
 808eb62:	230b      	movs	r3, #11
 808eb64:	8183      	strh	r3, [r0, #12]
 808eb66:	2300      	movs	r3, #0
 808eb68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808eb6c:	2200      	movs	r2, #0
 808eb6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808eb70:	611c      	str	r4, [r3, #16]
 808eb72:	615a      	str	r2, [r3, #20]
 808eb74:	bd38      	pop	{r3, r4, r5, pc}
 808eb76:	bf00      	nop
 808eb78:	200000e8 	.word	0x200000e8
 808eb7c:	abcd330e 	.word	0xabcd330e
 808eb80:	e66d1234 	.word	0xe66d1234
 808eb84:	0005deec 	.word	0x0005deec

0808eb88 <strchr>:
 808eb88:	4603      	mov	r3, r0
 808eb8a:	b2c9      	uxtb	r1, r1
 808eb8c:	4618      	mov	r0, r3
 808eb8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 808eb92:	b112      	cbz	r2, 808eb9a <strchr+0x12>
 808eb94:	428a      	cmp	r2, r1
 808eb96:	d1f9      	bne.n	808eb8c <strchr+0x4>
 808eb98:	4770      	bx	lr
 808eb9a:	2900      	cmp	r1, #0
 808eb9c:	bf18      	it	ne
 808eb9e:	2000      	movne	r0, #0
 808eba0:	4770      	bx	lr

0808eba2 <strcmp>:
 808eba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 808eba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 808ebaa:	2a01      	cmp	r2, #1
 808ebac:	bf28      	it	cs
 808ebae:	429a      	cmpcs	r2, r3
 808ebb0:	d0f7      	beq.n	808eba2 <strcmp>
 808ebb2:	1ad0      	subs	r0, r2, r3
 808ebb4:	4770      	bx	lr

0808ebb6 <strcpy>:
 808ebb6:	4603      	mov	r3, r0
 808ebb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 808ebbc:	f803 2b01 	strb.w	r2, [r3], #1
 808ebc0:	2a00      	cmp	r2, #0
 808ebc2:	d1f9      	bne.n	808ebb8 <strcpy+0x2>
 808ebc4:	4770      	bx	lr
	...

0808ebc8 <strdup>:
 808ebc8:	4b02      	ldr	r3, [pc, #8]	; (808ebd4 <strdup+0xc>)
 808ebca:	4601      	mov	r1, r0
 808ebcc:	6818      	ldr	r0, [r3, #0]
 808ebce:	f000 b803 	b.w	808ebd8 <_strdup_r>
 808ebd2:	bf00      	nop
 808ebd4:	200000e8 	.word	0x200000e8

0808ebd8 <_strdup_r>:
 808ebd8:	b570      	push	{r4, r5, r6, lr}
 808ebda:	4604      	mov	r4, r0
 808ebdc:	4608      	mov	r0, r1
 808ebde:	460d      	mov	r5, r1
 808ebe0:	f000 fd70 	bl	808f6c4 <strlen>
 808ebe4:	1c46      	adds	r6, r0, #1
 808ebe6:	4631      	mov	r1, r6
 808ebe8:	4620      	mov	r0, r4
 808ebea:	f7fc f83f 	bl	808ac6c <_malloc_r>
 808ebee:	4604      	mov	r4, r0
 808ebf0:	b118      	cbz	r0, 808ebfa <_strdup_r+0x22>
 808ebf2:	4632      	mov	r2, r6
 808ebf4:	4629      	mov	r1, r5
 808ebf6:	f7ff ff8d 	bl	808eb14 <memcpy>
 808ebfa:	4620      	mov	r0, r4
 808ebfc:	bd70      	pop	{r4, r5, r6, pc}
	...

0808ec00 <iso_year_adjust>:
 808ec00:	6941      	ldr	r1, [r0, #20]
 808ec02:	f240 736c 	movw	r3, #1900	; 0x76c
 808ec06:	2900      	cmp	r1, #0
 808ec08:	bfa8      	it	ge
 808ec0a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808ec0e:	18ca      	adds	r2, r1, r3
 808ec10:	078b      	lsls	r3, r1, #30
 808ec12:	d105      	bne.n	808ec20 <iso_year_adjust+0x20>
 808ec14:	2164      	movs	r1, #100	; 0x64
 808ec16:	fb92 f3f1 	sdiv	r3, r2, r1
 808ec1a:	fb01 2313 	mls	r3, r1, r3, r2
 808ec1e:	b9db      	cbnz	r3, 808ec58 <iso_year_adjust+0x58>
 808ec20:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808ec24:	fb92 f3f1 	sdiv	r3, r2, r1
 808ec28:	fb01 2313 	mls	r3, r1, r3, r2
 808ec2c:	fab3 f383 	clz	r3, r3
 808ec30:	095b      	lsrs	r3, r3, #5
 808ec32:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 808ec36:	0040      	lsls	r0, r0, #1
 808ec38:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 808ec3c:	4418      	add	r0, r3
 808ec3e:	f241 63a2 	movw	r3, #5794	; 0x16a2
 808ec42:	4298      	cmp	r0, r3
 808ec44:	d03a      	beq.n	808ecbc <iso_year_adjust+0xbc>
 808ec46:	dc21      	bgt.n	808ec8c <iso_year_adjust+0x8c>
 808ec48:	2801      	cmp	r0, #1
 808ec4a:	dc1a      	bgt.n	808ec82 <iso_year_adjust+0x82>
 808ec4c:	2800      	cmp	r0, #0
 808ec4e:	bfb4      	ite	lt
 808ec50:	2000      	movlt	r0, #0
 808ec52:	f04f 30ff 	movge.w	r0, #4294967295
 808ec56:	4770      	bx	lr
 808ec58:	2301      	movs	r3, #1
 808ec5a:	e7ea      	b.n	808ec32 <iso_year_adjust+0x32>
 808ec5c:	2817      	cmp	r0, #23
 808ec5e:	d813      	bhi.n	808ec88 <iso_year_adjust+0x88>
 808ec60:	e8df f000 	tbb	[pc, r0]
 808ec64:	0c0c0c0c 	.word	0x0c0c0c0c
 808ec68:	0c0c1212 	.word	0x0c0c1212
 808ec6c:	12121212 	.word	0x12121212
 808ec70:	12121212 	.word	0x12121212
 808ec74:	0c0c1212 	.word	0x0c0c1212
 808ec78:	0c0c1212 	.word	0x0c0c1212
 808ec7c:	f04f 30ff 	mov.w	r0, #4294967295
 808ec80:	4770      	bx	lr
 808ec82:	380a      	subs	r0, #10
 808ec84:	2817      	cmp	r0, #23
 808ec86:	d9e9      	bls.n	808ec5c <iso_year_adjust+0x5c>
 808ec88:	2000      	movs	r0, #0
 808ec8a:	4770      	bx	lr
 808ec8c:	f241 63b4 	movw	r3, #5812	; 0x16b4
 808ec90:	4298      	cmp	r0, r3
 808ec92:	dc06      	bgt.n	808eca2 <iso_year_adjust+0xa2>
 808ec94:	f241 63b1 	movw	r3, #5809	; 0x16b1
 808ec98:	4298      	cmp	r0, r3
 808ec9a:	bfd4      	ite	le
 808ec9c:	2000      	movle	r0, #0
 808ec9e:	2001      	movgt	r0, #1
 808eca0:	4770      	bx	lr
 808eca2:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 808eca6:	3802      	subs	r0, #2
 808eca8:	2815      	cmp	r0, #21
 808ecaa:	d8ed      	bhi.n	808ec88 <iso_year_adjust+0x88>
 808ecac:	2301      	movs	r3, #1
 808ecae:	4083      	lsls	r3, r0
 808ecb0:	4803      	ldr	r0, [pc, #12]	; (808ecc0 <iso_year_adjust+0xc0>)
 808ecb2:	4018      	ands	r0, r3
 808ecb4:	3800      	subs	r0, #0
 808ecb6:	bf18      	it	ne
 808ecb8:	2001      	movne	r0, #1
 808ecba:	4770      	bx	lr
 808ecbc:	2001      	movs	r0, #1
 808ecbe:	4770      	bx	lr
 808ecc0:	002a001f 	.word	0x002a001f

0808ecc4 <__strftime>:
 808ecc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ecc8:	461e      	mov	r6, r3
 808ecca:	2300      	movs	r3, #0
 808eccc:	4607      	mov	r7, r0
 808ecce:	460d      	mov	r5, r1
 808ecd0:	461c      	mov	r4, r3
 808ecd2:	b091      	sub	sp, #68	; 0x44
 808ecd4:	9304      	str	r3, [sp, #16]
 808ecd6:	7813      	ldrb	r3, [r2, #0]
 808ecd8:	2b00      	cmp	r3, #0
 808ecda:	f000 84da 	beq.w	808f692 <__strftime+0x9ce>
 808ecde:	2b25      	cmp	r3, #37	; 0x25
 808ece0:	d11f      	bne.n	808ed22 <__strftime+0x5e>
 808ece2:	f892 9001 	ldrb.w	r9, [r2, #1]
 808ece6:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 808ecea:	d024      	beq.n	808ed36 <__strftime+0x72>
 808ecec:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 808ecf0:	d021      	beq.n	808ed36 <__strftime+0x72>
 808ecf2:	f04f 0900 	mov.w	r9, #0
 808ecf6:	f102 0a01 	add.w	sl, r2, #1
 808ecfa:	f89a 3000 	ldrb.w	r3, [sl]
 808ecfe:	3b31      	subs	r3, #49	; 0x31
 808ed00:	2b08      	cmp	r3, #8
 808ed02:	d81b      	bhi.n	808ed3c <__strftime+0x78>
 808ed04:	4650      	mov	r0, sl
 808ed06:	220a      	movs	r2, #10
 808ed08:	a908      	add	r1, sp, #32
 808ed0a:	f001 fc6d 	bl	80905e8 <strtoul>
 808ed0e:	4680      	mov	r8, r0
 808ed10:	f8dd a020 	ldr.w	sl, [sp, #32]
 808ed14:	f89a 3000 	ldrb.w	r3, [sl]
 808ed18:	2b45      	cmp	r3, #69	; 0x45
 808ed1a:	d112      	bne.n	808ed42 <__strftime+0x7e>
 808ed1c:	f10a 0a01 	add.w	sl, sl, #1
 808ed20:	e011      	b.n	808ed46 <__strftime+0x82>
 808ed22:	1e69      	subs	r1, r5, #1
 808ed24:	42a1      	cmp	r1, r4
 808ed26:	d802      	bhi.n	808ed2e <__strftime+0x6a>
 808ed28:	2400      	movs	r4, #0
 808ed2a:	f000 bcb5 	b.w	808f698 <__strftime+0x9d4>
 808ed2e:	553b      	strb	r3, [r7, r4]
 808ed30:	3201      	adds	r2, #1
 808ed32:	3401      	adds	r4, #1
 808ed34:	e7cf      	b.n	808ecd6 <__strftime+0x12>
 808ed36:	f102 0a02 	add.w	sl, r2, #2
 808ed3a:	e7de      	b.n	808ecfa <__strftime+0x36>
 808ed3c:	f04f 0800 	mov.w	r8, #0
 808ed40:	e7e8      	b.n	808ed14 <__strftime+0x50>
 808ed42:	2b4f      	cmp	r3, #79	; 0x4f
 808ed44:	d0ea      	beq.n	808ed1c <__strftime+0x58>
 808ed46:	f89a 0000 	ldrb.w	r0, [sl]
 808ed4a:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808ed4e:	2b55      	cmp	r3, #85	; 0x55
 808ed50:	d8ea      	bhi.n	808ed28 <__strftime+0x64>
 808ed52:	a201      	add	r2, pc, #4	; (adr r2, 808ed58 <__strftime+0x94>)
 808ed54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 808ed58:	0808f687 	.word	0x0808f687
 808ed5c:	0808ed29 	.word	0x0808ed29
 808ed60:	0808ed29 	.word	0x0808ed29
 808ed64:	0808ed29 	.word	0x0808ed29
 808ed68:	0808ed29 	.word	0x0808ed29
 808ed6c:	0808ed29 	.word	0x0808ed29
 808ed70:	0808ed29 	.word	0x0808ed29
 808ed74:	0808ed29 	.word	0x0808ed29
 808ed78:	0808ed29 	.word	0x0808ed29
 808ed7c:	0808ed29 	.word	0x0808ed29
 808ed80:	0808ed29 	.word	0x0808ed29
 808ed84:	0808ed29 	.word	0x0808ed29
 808ed88:	0808ed29 	.word	0x0808ed29
 808ed8c:	0808ed29 	.word	0x0808ed29
 808ed90:	0808ed29 	.word	0x0808ed29
 808ed94:	0808ed29 	.word	0x0808ed29
 808ed98:	0808ed29 	.word	0x0808ed29
 808ed9c:	0808ed29 	.word	0x0808ed29
 808eda0:	0808ed29 	.word	0x0808ed29
 808eda4:	0808ed29 	.word	0x0808ed29
 808eda8:	0808ed29 	.word	0x0808ed29
 808edac:	0808ed29 	.word	0x0808ed29
 808edb0:	0808ed29 	.word	0x0808ed29
 808edb4:	0808ed29 	.word	0x0808ed29
 808edb8:	0808ed29 	.word	0x0808ed29
 808edbc:	0808ed29 	.word	0x0808ed29
 808edc0:	0808ed29 	.word	0x0808ed29
 808edc4:	0808ed29 	.word	0x0808ed29
 808edc8:	0808eeed 	.word	0x0808eeed
 808edcc:	0808ef45 	.word	0x0808ef45
 808edd0:	0808efb7 	.word	0x0808efb7
 808edd4:	0808f04f 	.word	0x0808f04f
 808edd8:	0808ed29 	.word	0x0808ed29
 808eddc:	0808f099 	.word	0x0808f099
 808ede0:	0808f18d 	.word	0x0808f18d
 808ede4:	0808f297 	.word	0x0808f297
 808ede8:	0808f2a5 	.word	0x0808f2a5
 808edec:	0808ed29 	.word	0x0808ed29
 808edf0:	0808ed29 	.word	0x0808ed29
 808edf4:	0808ed29 	.word	0x0808ed29
 808edf8:	0808f2d5 	.word	0x0808f2d5
 808edfc:	0808ed29 	.word	0x0808ed29
 808ee00:	0808ed29 	.word	0x0808ed29
 808ee04:	0808f2e9 	.word	0x0808f2e9
 808ee08:	0808ed29 	.word	0x0808ed29
 808ee0c:	0808f339 	.word	0x0808f339
 808ee10:	0808f44f 	.word	0x0808f44f
 808ee14:	0808f45f 	.word	0x0808f45f
 808ee18:	0808f4b3 	.word	0x0808f4b3
 808ee1c:	0808f4c3 	.word	0x0808f4c3
 808ee20:	0808f535 	.word	0x0808f535
 808ee24:	0808efaf 	.word	0x0808efaf
 808ee28:	0808f569 	.word	0x0808f569
 808ee2c:	0808f635 	.word	0x0808f635
 808ee30:	0808ed29 	.word	0x0808ed29
 808ee34:	0808ed29 	.word	0x0808ed29
 808ee38:	0808ed29 	.word	0x0808ed29
 808ee3c:	0808ed29 	.word	0x0808ed29
 808ee40:	0808ed29 	.word	0x0808ed29
 808ee44:	0808ed29 	.word	0x0808ed29
 808ee48:	0808eeb1 	.word	0x0808eeb1
 808ee4c:	0808ef1b 	.word	0x0808ef1b
 808ee50:	0808ef71 	.word	0x0808ef71
 808ee54:	0808f02b 	.word	0x0808f02b
 808ee58:	0808f02b 	.word	0x0808f02b
 808ee5c:	0808ed29 	.word	0x0808ed29
 808ee60:	0808f0ef 	.word	0x0808f0ef
 808ee64:	0808ef1b 	.word	0x0808ef1b
 808ee68:	0808ed29 	.word	0x0808ed29
 808ee6c:	0808f2c7 	.word	0x0808f2c7
 808ee70:	0808f297 	.word	0x0808f297
 808ee74:	0808f2a5 	.word	0x0808f2a5
 808ee78:	0808f2cf 	.word	0x0808f2cf
 808ee7c:	0808f2d9 	.word	0x0808f2d9
 808ee80:	0808ed29 	.word	0x0808ed29
 808ee84:	0808f2e9 	.word	0x0808f2e9
 808ee88:	0808ed29 	.word	0x0808ed29
 808ee8c:	0808ef9f 	.word	0x0808ef9f
 808ee90:	0808f34b 	.word	0x0808f34b
 808ee94:	0808f453 	.word	0x0808f453
 808ee98:	0808f499 	.word	0x0808f499
 808ee9c:	0808ed29 	.word	0x0808ed29
 808eea0:	0808f527 	.word	0x0808f527
 808eea4:	0808efa7 	.word	0x0808efa7
 808eea8:	0808f54d 	.word	0x0808f54d
 808eeac:	0808f5c5 	.word	0x0808f5c5
 808eeb0:	69b3      	ldr	r3, [r6, #24]
 808eeb2:	4aa9      	ldr	r2, [pc, #676]	; (808f158 <__strftime+0x494>)
 808eeb4:	3318      	adds	r3, #24
 808eeb6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808eeba:	4640      	mov	r0, r8
 808eebc:	f000 fc02 	bl	808f6c4 <strlen>
 808eec0:	f108 38ff 	add.w	r8, r8, #4294967295
 808eec4:	4420      	add	r0, r4
 808eec6:	1e6b      	subs	r3, r5, #1
 808eec8:	42a0      	cmp	r0, r4
 808eeca:	d107      	bne.n	808eedc <__strftime+0x218>
 808eecc:	f89a 3000 	ldrb.w	r3, [sl]
 808eed0:	2b00      	cmp	r3, #0
 808eed2:	f000 83de 	beq.w	808f692 <__strftime+0x9ce>
 808eed6:	f10a 0201 	add.w	r2, sl, #1
 808eeda:	e6fc      	b.n	808ecd6 <__strftime+0x12>
 808eedc:	42a3      	cmp	r3, r4
 808eede:	f67f af23 	bls.w	808ed28 <__strftime+0x64>
 808eee2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808eee6:	553a      	strb	r2, [r7, r4]
 808eee8:	3401      	adds	r4, #1
 808eeea:	e7ed      	b.n	808eec8 <__strftime+0x204>
 808eeec:	69b2      	ldr	r2, [r6, #24]
 808eeee:	4b9a      	ldr	r3, [pc, #616]	; (808f158 <__strftime+0x494>)
 808eef0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 808eef4:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808eef8:	4640      	mov	r0, r8
 808eefa:	f000 fbe3 	bl	808f6c4 <strlen>
 808eefe:	f108 38ff 	add.w	r8, r8, #4294967295
 808ef02:	4420      	add	r0, r4
 808ef04:	1e6b      	subs	r3, r5, #1
 808ef06:	42a0      	cmp	r0, r4
 808ef08:	d0e0      	beq.n	808eecc <__strftime+0x208>
 808ef0a:	42a3      	cmp	r3, r4
 808ef0c:	f67f af0c 	bls.w	808ed28 <__strftime+0x64>
 808ef10:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ef14:	553a      	strb	r2, [r7, r4]
 808ef16:	3401      	adds	r4, #1
 808ef18:	e7f5      	b.n	808ef06 <__strftime+0x242>
 808ef1a:	4b8f      	ldr	r3, [pc, #572]	; (808f158 <__strftime+0x494>)
 808ef1c:	6932      	ldr	r2, [r6, #16]
 808ef1e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 808ef22:	4640      	mov	r0, r8
 808ef24:	f000 fbce 	bl	808f6c4 <strlen>
 808ef28:	f108 38ff 	add.w	r8, r8, #4294967295
 808ef2c:	4420      	add	r0, r4
 808ef2e:	1e6b      	subs	r3, r5, #1
 808ef30:	42a0      	cmp	r0, r4
 808ef32:	d0cb      	beq.n	808eecc <__strftime+0x208>
 808ef34:	42a3      	cmp	r3, r4
 808ef36:	f67f aef7 	bls.w	808ed28 <__strftime+0x64>
 808ef3a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ef3e:	553a      	strb	r2, [r7, r4]
 808ef40:	3401      	adds	r4, #1
 808ef42:	e7f5      	b.n	808ef30 <__strftime+0x26c>
 808ef44:	6933      	ldr	r3, [r6, #16]
 808ef46:	4a84      	ldr	r2, [pc, #528]	; (808f158 <__strftime+0x494>)
 808ef48:	330c      	adds	r3, #12
 808ef4a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808ef4e:	4640      	mov	r0, r8
 808ef50:	f000 fbb8 	bl	808f6c4 <strlen>
 808ef54:	f108 38ff 	add.w	r8, r8, #4294967295
 808ef58:	4420      	add	r0, r4
 808ef5a:	1e6b      	subs	r3, r5, #1
 808ef5c:	42a0      	cmp	r0, r4
 808ef5e:	d0b5      	beq.n	808eecc <__strftime+0x208>
 808ef60:	42a3      	cmp	r3, r4
 808ef62:	f67f aee1 	bls.w	808ed28 <__strftime+0x64>
 808ef66:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808ef6a:	553a      	strb	r2, [r7, r4]
 808ef6c:	3401      	adds	r4, #1
 808ef6e:	e7f5      	b.n	808ef5c <__strftime+0x298>
 808ef70:	4b79      	ldr	r3, [pc, #484]	; (808f158 <__strftime+0x494>)
 808ef72:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808ef76:	4640      	mov	r0, r8
 808ef78:	f000 fba4 	bl	808f6c4 <strlen>
 808ef7c:	f898 3000 	ldrb.w	r3, [r8]
 808ef80:	2b00      	cmp	r3, #0
 808ef82:	d0a3      	beq.n	808eecc <__strftime+0x208>
 808ef84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 808ef86:	4642      	mov	r2, r8
 808ef88:	9300      	str	r3, [sp, #0]
 808ef8a:	4633      	mov	r3, r6
 808ef8c:	1b29      	subs	r1, r5, r4
 808ef8e:	1938      	adds	r0, r7, r4
 808ef90:	f7ff fe98 	bl	808ecc4 <__strftime>
 808ef94:	2800      	cmp	r0, #0
 808ef96:	f77f aec7 	ble.w	808ed28 <__strftime+0x64>
 808ef9a:	4404      	add	r4, r0
 808ef9c:	e796      	b.n	808eecc <__strftime+0x208>
 808ef9e:	4b6e      	ldr	r3, [pc, #440]	; (808f158 <__strftime+0x494>)
 808efa0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808efa4:	e7e7      	b.n	808ef76 <__strftime+0x2b2>
 808efa6:	4b6c      	ldr	r3, [pc, #432]	; (808f158 <__strftime+0x494>)
 808efa8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808efac:	e7e3      	b.n	808ef76 <__strftime+0x2b2>
 808efae:	4b6a      	ldr	r3, [pc, #424]	; (808f158 <__strftime+0x494>)
 808efb0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808efb4:	e7df      	b.n	808ef76 <__strftime+0x2b2>
 808efb6:	4969      	ldr	r1, [pc, #420]	; (808f15c <__strftime+0x498>)
 808efb8:	f8d6 b014 	ldr.w	fp, [r6, #20]
 808efbc:	458b      	cmp	fp, r1
 808efbe:	bfac      	ite	ge
 808efc0:	2100      	movge	r1, #0
 808efc2:	2101      	movlt	r1, #1
 808efc4:	f1bb 0f00 	cmp.w	fp, #0
 808efc8:	db10      	blt.n	808efec <__strftime+0x328>
 808efca:	2064      	movs	r0, #100	; 0x64
 808efcc:	fb9b f0f0 	sdiv	r0, fp, r0
 808efd0:	3013      	adds	r0, #19
 808efd2:	f1b9 0f00 	cmp.w	r9, #0
 808efd6:	d013      	beq.n	808f000 <__strftime+0x33c>
 808efd8:	2863      	cmp	r0, #99	; 0x63
 808efda:	dd24      	ble.n	808f026 <__strftime+0x362>
 808efdc:	4a60      	ldr	r2, [pc, #384]	; (808f160 <__strftime+0x49c>)
 808efde:	4b61      	ldr	r3, [pc, #388]	; (808f164 <__strftime+0x4a0>)
 808efe0:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 808efe4:	bf18      	it	ne
 808efe6:	4613      	movne	r3, r2
 808efe8:	4a5f      	ldr	r2, [pc, #380]	; (808f168 <__strftime+0x4a4>)
 808efea:	e00b      	b.n	808f004 <__strftime+0x340>
 808efec:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808eff0:	9105      	str	r1, [sp, #20]
 808eff2:	f001 fd47 	bl	8090a84 <abs>
 808eff6:	2364      	movs	r3, #100	; 0x64
 808eff8:	9905      	ldr	r1, [sp, #20]
 808effa:	fb90 f0f3 	sdiv	r0, r0, r3
 808effe:	e7e8      	b.n	808efd2 <__strftime+0x30e>
 808f000:	4b57      	ldr	r3, [pc, #348]	; (808f160 <__strftime+0x49c>)
 808f002:	4a5a      	ldr	r2, [pc, #360]	; (808f16c <__strftime+0x4a8>)
 808f004:	f1b8 0f02 	cmp.w	r8, #2
 808f008:	bf2c      	ite	cs
 808f00a:	ebc1 0108 	rsbcs	r1, r1, r8
 808f00e:	f1c1 0102 	rsbcc	r1, r1, #2
 808f012:	9001      	str	r0, [sp, #4]
 808f014:	9100      	str	r1, [sp, #0]
 808f016:	4851      	ldr	r0, [pc, #324]	; (808f15c <__strftime+0x498>)
 808f018:	4955      	ldr	r1, [pc, #340]	; (808f170 <__strftime+0x4ac>)
 808f01a:	4583      	cmp	fp, r0
 808f01c:	bfb8      	it	lt
 808f01e:	460b      	movlt	r3, r1
 808f020:	1b29      	subs	r1, r5, r4
 808f022:	1938      	adds	r0, r7, r4
 808f024:	e029      	b.n	808f07a <__strftime+0x3b6>
 808f026:	4b4e      	ldr	r3, [pc, #312]	; (808f160 <__strftime+0x49c>)
 808f028:	e7de      	b.n	808efe8 <__strftime+0x324>
 808f02a:	4952      	ldr	r1, [pc, #328]	; (808f174 <__strftime+0x4b0>)
 808f02c:	4a52      	ldr	r2, [pc, #328]	; (808f178 <__strftime+0x4b4>)
 808f02e:	68f3      	ldr	r3, [r6, #12]
 808f030:	2864      	cmp	r0, #100	; 0x64
 808f032:	bf08      	it	eq
 808f034:	460a      	moveq	r2, r1
 808f036:	1b29      	subs	r1, r5, r4
 808f038:	1938      	adds	r0, r7, r4
 808f03a:	f7fb fdff 	bl	808ac3c <sniprintf>
 808f03e:	2800      	cmp	r0, #0
 808f040:	f6ff ae72 	blt.w	808ed28 <__strftime+0x64>
 808f044:	4404      	add	r4, r0
 808f046:	42a5      	cmp	r5, r4
 808f048:	f63f af40 	bhi.w	808eecc <__strftime+0x208>
 808f04c:	e66c      	b.n	808ed28 <__strftime+0x64>
 808f04e:	6970      	ldr	r0, [r6, #20]
 808f050:	6933      	ldr	r3, [r6, #16]
 808f052:	2800      	cmp	r0, #0
 808f054:	f103 0b01 	add.w	fp, r3, #1
 808f058:	eb07 0804 	add.w	r8, r7, r4
 808f05c:	68f3      	ldr	r3, [r6, #12]
 808f05e:	eba5 0904 	sub.w	r9, r5, r4
 808f062:	db0d      	blt.n	808f080 <__strftime+0x3bc>
 808f064:	2164      	movs	r1, #100	; 0x64
 808f066:	fb90 f2f1 	sdiv	r2, r0, r1
 808f06a:	fb01 0212 	mls	r2, r1, r2, r0
 808f06e:	e9cd 3200 	strd	r3, r2, [sp]
 808f072:	4649      	mov	r1, r9
 808f074:	465b      	mov	r3, fp
 808f076:	4640      	mov	r0, r8
 808f078:	4a40      	ldr	r2, [pc, #256]	; (808f17c <__strftime+0x4b8>)
 808f07a:	f7fb fddf 	bl	808ac3c <sniprintf>
 808f07e:	e7de      	b.n	808f03e <__strftime+0x37a>
 808f080:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f084:	9305      	str	r3, [sp, #20]
 808f086:	f001 fcfd 	bl	8090a84 <abs>
 808f08a:	2264      	movs	r2, #100	; 0x64
 808f08c:	fb90 f1f2 	sdiv	r1, r0, r2
 808f090:	9b05      	ldr	r3, [sp, #20]
 808f092:	fb01 0212 	mls	r2, r1, r2, r0
 808f096:	e7ea      	b.n	808f06e <__strftime+0x3aa>
 808f098:	2325      	movs	r3, #37	; 0x25
 808f09a:	f88d 3020 	strb.w	r3, [sp, #32]
 808f09e:	f1b9 0f00 	cmp.w	r9, #0
 808f0a2:	d013      	beq.n	808f0cc <__strftime+0x408>
 808f0a4:	f1b8 0f06 	cmp.w	r8, #6
 808f0a8:	bf38      	it	cc
 808f0aa:	f04f 0806 	movcc.w	r8, #6
 808f0ae:	f1b8 0306 	subs.w	r3, r8, #6
 808f0b2:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
 808f0b6:	d10e      	bne.n	808f0d6 <__strftime+0x412>
 808f0b8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 808f0bc:	4930      	ldr	r1, [pc, #192]	; (808f180 <__strftime+0x4bc>)
 808f0be:	f7ff fd7a 	bl	808ebb6 <strcpy>
 808f0c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 808f0c4:	aa08      	add	r2, sp, #32
 808f0c6:	9300      	str	r3, [sp, #0]
 808f0c8:	4633      	mov	r3, r6
 808f0ca:	e75f      	b.n	808ef8c <__strftime+0x2c8>
 808f0cc:	f04f 092b 	mov.w	r9, #43	; 0x2b
 808f0d0:	f04f 080a 	mov.w	r8, #10
 808f0d4:	e7eb      	b.n	808f0ae <__strftime+0x3ea>
 808f0d6:	211e      	movs	r1, #30
 808f0d8:	4a2a      	ldr	r2, [pc, #168]	; (808f184 <__strftime+0x4c0>)
 808f0da:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 808f0de:	f7fb fdad 	bl	808ac3c <sniprintf>
 808f0e2:	2800      	cmp	r0, #0
 808f0e4:	dde8      	ble.n	808f0b8 <__strftime+0x3f4>
 808f0e6:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 808f0ea:	4418      	add	r0, r3
 808f0ec:	e7e6      	b.n	808f0bc <__strftime+0x3f8>
 808f0ee:	4630      	mov	r0, r6
 808f0f0:	f7ff fd86 	bl	808ec00 <iso_year_adjust>
 808f0f4:	4680      	mov	r8, r0
 808f0f6:	6970      	ldr	r0, [r6, #20]
 808f0f8:	2800      	cmp	r0, #0
 808f0fa:	db11      	blt.n	808f120 <__strftime+0x45c>
 808f0fc:	2264      	movs	r2, #100	; 0x64
 808f0fe:	fb90 f3f2 	sdiv	r3, r0, r2
 808f102:	fb02 0313 	mls	r3, r2, r3, r0
 808f106:	4498      	add	r8, r3
 808f108:	2364      	movs	r3, #100	; 0x64
 808f10a:	fb98 f0f3 	sdiv	r0, r8, r3
 808f10e:	fb03 8810 	mls	r8, r3, r0, r8
 808f112:	4498      	add	r8, r3
 808f114:	fbb8 f2f3 	udiv	r2, r8, r3
 808f118:	fb03 8312 	mls	r3, r3, r2, r8
 808f11c:	4a15      	ldr	r2, [pc, #84]	; (808f174 <__strftime+0x4b0>)
 808f11e:	e78a      	b.n	808f036 <__strftime+0x372>
 808f120:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f124:	f001 fcae 	bl	8090a84 <abs>
 808f128:	2364      	movs	r3, #100	; 0x64
 808f12a:	fb90 f2f3 	sdiv	r2, r0, r3
 808f12e:	f1b8 0f00 	cmp.w	r8, #0
 808f132:	fb02 0313 	mls	r3, r2, r3, r0
 808f136:	da06      	bge.n	808f146 <__strftime+0x482>
 808f138:	6971      	ldr	r1, [r6, #20]
 808f13a:	4a13      	ldr	r2, [pc, #76]	; (808f188 <__strftime+0x4c4>)
 808f13c:	4291      	cmp	r1, r2
 808f13e:	bfb8      	it	lt
 808f140:	f04f 0801 	movlt.w	r8, #1
 808f144:	e7df      	b.n	808f106 <__strftime+0x442>
 808f146:	d0de      	beq.n	808f106 <__strftime+0x442>
 808f148:	6971      	ldr	r1, [r6, #20]
 808f14a:	4a04      	ldr	r2, [pc, #16]	; (808f15c <__strftime+0x498>)
 808f14c:	4291      	cmp	r1, r2
 808f14e:	bfb8      	it	lt
 808f150:	f04f 38ff 	movlt.w	r8, #4294967295
 808f154:	e7d7      	b.n	808f106 <__strftime+0x442>
 808f156:	bf00      	nop
 808f158:	08094800 	.word	0x08094800
 808f15c:	fffff894 	.word	0xfffff894
 808f160:	080943b2 	.word	0x080943b2
 808f164:	0809463b 	.word	0x0809463b
 808f168:	08094633 	.word	0x08094633
 808f16c:	0809462c 	.word	0x0809462c
 808f170:	08092eb4 	.word	0x08092eb4
 808f174:	0809464b 	.word	0x0809464b
 808f178:	0809463d 	.word	0x0809463d
 808f17c:	08094641 	.word	0x08094641
 808f180:	08094654 	.word	0x08094654
 808f184:	08094650 	.word	0x08094650
 808f188:	fffff895 	.word	0xfffff895
 808f18c:	4bb7      	ldr	r3, [pc, #732]	; (808f46c <__strftime+0x7a8>)
 808f18e:	6971      	ldr	r1, [r6, #20]
 808f190:	4630      	mov	r0, r6
 808f192:	4299      	cmp	r1, r3
 808f194:	bfac      	ite	ge
 808f196:	2300      	movge	r3, #0
 808f198:	2301      	movlt	r3, #1
 808f19a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 808f19e:	f7ff fd2f 	bl	808ec00 <iso_year_adjust>
 808f1a2:	9906      	ldr	r1, [sp, #24]
 808f1a4:	4683      	mov	fp, r0
 808f1a6:	2900      	cmp	r1, #0
 808f1a8:	db2a      	blt.n	808f200 <__strftime+0x53c>
 808f1aa:	2264      	movs	r2, #100	; 0x64
 808f1ac:	fb91 f2f2 	sdiv	r2, r1, r2
 808f1b0:	3213      	adds	r2, #19
 808f1b2:	6970      	ldr	r0, [r6, #20]
 808f1b4:	2800      	cmp	r0, #0
 808f1b6:	db2d      	blt.n	808f214 <__strftime+0x550>
 808f1b8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 808f1bc:	fb90 fefc 	sdiv	lr, r0, ip
 808f1c0:	fb0c 001e 	mls	r0, ip, lr, r0
 808f1c4:	f1bb 0f00 	cmp.w	fp, #0
 808f1c8:	da33      	bge.n	808f232 <__strftime+0x56e>
 808f1ca:	6971      	ldr	r1, [r6, #20]
 808f1cc:	4ba8      	ldr	r3, [pc, #672]	; (808f470 <__strftime+0x7ac>)
 808f1ce:	4299      	cmp	r1, r3
 808f1d0:	db39      	blt.n	808f246 <__strftime+0x582>
 808f1d2:	eb0b 0300 	add.w	r3, fp, r0
 808f1d6:	1c59      	adds	r1, r3, #1
 808f1d8:	d13a      	bne.n	808f250 <__strftime+0x58c>
 808f1da:	2363      	movs	r3, #99	; 0x63
 808f1dc:	3a01      	subs	r2, #1
 808f1de:	2064      	movs	r0, #100	; 0x64
 808f1e0:	fb00 3202 	mla	r2, r0, r2, r3
 808f1e4:	9b05      	ldr	r3, [sp, #20]
 808f1e6:	2b00      	cmp	r3, #0
 808f1e8:	d037      	beq.n	808f25a <__strftime+0x596>
 808f1ea:	232d      	movs	r3, #45	; 0x2d
 808f1ec:	f88d 3020 	strb.w	r3, [sp, #32]
 808f1f0:	f1b8 0f00 	cmp.w	r8, #0
 808f1f4:	d001      	beq.n	808f1fa <__strftime+0x536>
 808f1f6:	f108 38ff 	add.w	r8, r8, #4294967295
 808f1fa:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 808f1fe:	e037      	b.n	808f270 <__strftime+0x5ac>
 808f200:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808f204:	9106      	str	r1, [sp, #24]
 808f206:	f001 fc3d 	bl	8090a84 <abs>
 808f20a:	2264      	movs	r2, #100	; 0x64
 808f20c:	9906      	ldr	r1, [sp, #24]
 808f20e:	fb90 f2f2 	sdiv	r2, r0, r2
 808f212:	e7ce      	b.n	808f1b2 <__strftime+0x4ee>
 808f214:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f218:	e9cd 1206 	strd	r1, r2, [sp, #24]
 808f21c:	f001 fc32 	bl	8090a84 <abs>
 808f220:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 808f224:	f04f 0c64 	mov.w	ip, #100	; 0x64
 808f228:	fb90 fefc 	sdiv	lr, r0, ip
 808f22c:	fb0e 001c 	mls	r0, lr, ip, r0
 808f230:	e7c8      	b.n	808f1c4 <__strftime+0x500>
 808f232:	d0ce      	beq.n	808f1d2 <__strftime+0x50e>
 808f234:	4b8d      	ldr	r3, [pc, #564]	; (808f46c <__strftime+0x7a8>)
 808f236:	4299      	cmp	r1, r3
 808f238:	bfb6      	itet	lt
 808f23a:	2301      	movlt	r3, #1
 808f23c:	2300      	movge	r3, #0
 808f23e:	f04f 3bff 	movlt.w	fp, #4294967295
 808f242:	9305      	str	r3, [sp, #20]
 808f244:	e7c5      	b.n	808f1d2 <__strftime+0x50e>
 808f246:	f04f 0b01 	mov.w	fp, #1
 808f24a:	f8cd b014 	str.w	fp, [sp, #20]
 808f24e:	e7c0      	b.n	808f1d2 <__strftime+0x50e>
 808f250:	2b64      	cmp	r3, #100	; 0x64
 808f252:	bf04      	itt	eq
 808f254:	2300      	moveq	r3, #0
 808f256:	3201      	addeq	r2, #1
 808f258:	e7c1      	b.n	808f1de <__strftime+0x51a>
 808f25a:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 808f25e:	d106      	bne.n	808f26e <__strftime+0x5aa>
 808f260:	f242 730f 	movw	r3, #9999	; 0x270f
 808f264:	429a      	cmp	r2, r3
 808f266:	d902      	bls.n	808f26e <__strftime+0x5aa>
 808f268:	f88d 9020 	strb.w	r9, [sp, #32]
 808f26c:	e7c0      	b.n	808f1f0 <__strftime+0x52c>
 808f26e:	ab08      	add	r3, sp, #32
 808f270:	2125      	movs	r1, #37	; 0x25
 808f272:	7019      	strb	r1, [r3, #0]
 808f274:	f1b9 0f00 	cmp.w	r9, #0
 808f278:	d109      	bne.n	808f28e <__strftime+0x5ca>
 808f27a:	1c58      	adds	r0, r3, #1
 808f27c:	497d      	ldr	r1, [pc, #500]	; (808f474 <__strftime+0x7b0>)
 808f27e:	9205      	str	r2, [sp, #20]
 808f280:	f7ff fc99 	bl	808ebb6 <strcpy>
 808f284:	9a05      	ldr	r2, [sp, #20]
 808f286:	9200      	str	r2, [sp, #0]
 808f288:	4643      	mov	r3, r8
 808f28a:	aa08      	add	r2, sp, #32
 808f28c:	e058      	b.n	808f340 <__strftime+0x67c>
 808f28e:	2130      	movs	r1, #48	; 0x30
 808f290:	1c98      	adds	r0, r3, #2
 808f292:	7059      	strb	r1, [r3, #1]
 808f294:	e7f2      	b.n	808f27c <__strftime+0x5b8>
 808f296:	4978      	ldr	r1, [pc, #480]	; (808f478 <__strftime+0x7b4>)
 808f298:	4a78      	ldr	r2, [pc, #480]	; (808f47c <__strftime+0x7b8>)
 808f29a:	68b3      	ldr	r3, [r6, #8]
 808f29c:	286b      	cmp	r0, #107	; 0x6b
 808f29e:	bf08      	it	eq
 808f2a0:	460a      	moveq	r2, r1
 808f2a2:	e6c8      	b.n	808f036 <__strftime+0x372>
 808f2a4:	68b3      	ldr	r3, [r6, #8]
 808f2a6:	b163      	cbz	r3, 808f2c2 <__strftime+0x5fe>
 808f2a8:	2b0c      	cmp	r3, #12
 808f2aa:	d004      	beq.n	808f2b6 <__strftime+0x5f2>
 808f2ac:	210c      	movs	r1, #12
 808f2ae:	fb93 f2f1 	sdiv	r2, r3, r1
 808f2b2:	fb01 3312 	mls	r3, r1, r2, r3
 808f2b6:	4971      	ldr	r1, [pc, #452]	; (808f47c <__strftime+0x7b8>)
 808f2b8:	4a6f      	ldr	r2, [pc, #444]	; (808f478 <__strftime+0x7b4>)
 808f2ba:	2849      	cmp	r0, #73	; 0x49
 808f2bc:	bf08      	it	eq
 808f2be:	460a      	moveq	r2, r1
 808f2c0:	e6b9      	b.n	808f036 <__strftime+0x372>
 808f2c2:	230c      	movs	r3, #12
 808f2c4:	e7f7      	b.n	808f2b6 <__strftime+0x5f2>
 808f2c6:	69f3      	ldr	r3, [r6, #28]
 808f2c8:	4a6d      	ldr	r2, [pc, #436]	; (808f480 <__strftime+0x7bc>)
 808f2ca:	3301      	adds	r3, #1
 808f2cc:	e6b3      	b.n	808f036 <__strftime+0x372>
 808f2ce:	6933      	ldr	r3, [r6, #16]
 808f2d0:	3301      	adds	r3, #1
 808f2d2:	e723      	b.n	808f11c <__strftime+0x458>
 808f2d4:	6873      	ldr	r3, [r6, #4]
 808f2d6:	e721      	b.n	808f11c <__strftime+0x458>
 808f2d8:	1e6b      	subs	r3, r5, #1
 808f2da:	42a3      	cmp	r3, r4
 808f2dc:	f67f ad24 	bls.w	808ed28 <__strftime+0x64>
 808f2e0:	230a      	movs	r3, #10
 808f2e2:	553b      	strb	r3, [r7, r4]
 808f2e4:	3401      	adds	r4, #1
 808f2e6:	e5f1      	b.n	808eecc <__strftime+0x208>
 808f2e8:	68b3      	ldr	r3, [r6, #8]
 808f2ea:	2b0b      	cmp	r3, #11
 808f2ec:	bfcc      	ite	gt
 808f2ee:	22a4      	movgt	r2, #164	; 0xa4
 808f2f0:	22a0      	movle	r2, #160	; 0xa0
 808f2f2:	4b64      	ldr	r3, [pc, #400]	; (808f484 <__strftime+0x7c0>)
 808f2f4:	4413      	add	r3, r2
 808f2f6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808f2fa:	4640      	mov	r0, r8
 808f2fc:	f000 f9e2 	bl	808f6c4 <strlen>
 808f300:	f108 32ff 	add.w	r2, r8, #4294967295
 808f304:	4420      	add	r0, r4
 808f306:	f105 3cff 	add.w	ip, r5, #4294967295
 808f30a:	42a0      	cmp	r0, r4
 808f30c:	f43f adde 	beq.w	808eecc <__strftime+0x208>
 808f310:	45a4      	cmp	ip, r4
 808f312:	f67f ad09 	bls.w	808ed28 <__strftime+0x64>
 808f316:	f89a 1000 	ldrb.w	r1, [sl]
 808f31a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 808f31e:	2950      	cmp	r1, #80	; 0x50
 808f320:	d107      	bne.n	808f332 <__strftime+0x66e>
 808f322:	4959      	ldr	r1, [pc, #356]	; (808f488 <__strftime+0x7c4>)
 808f324:	5cc9      	ldrb	r1, [r1, r3]
 808f326:	f001 0103 	and.w	r1, r1, #3
 808f32a:	2901      	cmp	r1, #1
 808f32c:	bf08      	it	eq
 808f32e:	3320      	addeq	r3, #32
 808f330:	b2db      	uxtb	r3, r3
 808f332:	553b      	strb	r3, [r7, r4]
 808f334:	3401      	adds	r4, #1
 808f336:	e7e8      	b.n	808f30a <__strftime+0x646>
 808f338:	6873      	ldr	r3, [r6, #4]
 808f33a:	4a54      	ldr	r2, [pc, #336]	; (808f48c <__strftime+0x7c8>)
 808f33c:	9300      	str	r3, [sp, #0]
 808f33e:	68b3      	ldr	r3, [r6, #8]
 808f340:	1b29      	subs	r1, r5, r4
 808f342:	1938      	adds	r0, r7, r4
 808f344:	f7fb fc7a 	bl	808ac3c <sniprintf>
 808f348:	e679      	b.n	808f03e <__strftime+0x37a>
 808f34a:	6a33      	ldr	r3, [r6, #32]
 808f34c:	2b00      	cmp	r3, #0
 808f34e:	db7b      	blt.n	808f448 <__strftime+0x784>
 808f350:	f001 fa06 	bl	8090760 <__tz_lock>
 808f354:	9b04      	ldr	r3, [sp, #16]
 808f356:	b90b      	cbnz	r3, 808f35c <__strftime+0x698>
 808f358:	f001 fa0e 	bl	8090778 <_tzset_unlocked>
 808f35c:	f001 ff2c 	bl	80911b8 <__gettzinfo>
 808f360:	6a33      	ldr	r3, [r6, #32]
 808f362:	2b00      	cmp	r3, #0
 808f364:	bfcc      	ite	gt
 808f366:	2350      	movgt	r3, #80	; 0x50
 808f368:	2328      	movle	r3, #40	; 0x28
 808f36a:	58c3      	ldr	r3, [r0, r3]
 808f36c:	f1c3 0900 	rsb	r9, r3, #0
 808f370:	f001 f9fc 	bl	809076c <__tz_unlock>
 808f374:	2301      	movs	r3, #1
 808f376:	9304      	str	r3, [sp, #16]
 808f378:	f8d6 c014 	ldr.w	ip, [r6, #20]
 808f37c:	eba5 0e04 	sub.w	lr, r5, r4
 808f380:	4662      	mov	r2, ip
 808f382:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
 808f386:	ea4f 73e2 	mov.w	r3, r2, asr #31
 808f38a:	9102      	str	r1, [sp, #8]
 808f38c:	f143 31ff 	adc.w	r1, r3, #4294967295
 808f390:	9103      	str	r1, [sp, #12]
 808f392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808f396:	2800      	cmp	r0, #0
 808f398:	f171 0100 	sbcs.w	r1, r1, #0
 808f39c:	eb07 0804 	add.w	r8, r7, r4
 808f3a0:	da05      	bge.n	808f3ae <__strftime+0x6ea>
 808f3a2:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
 808f3a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 808f3aa:	9102      	str	r1, [sp, #8]
 808f3ac:	9303      	str	r3, [sp, #12]
 808f3ae:	9b02      	ldr	r3, [sp, #8]
 808f3b0:	f10c 32ff 	add.w	r2, ip, #4294967295
 808f3b4:	0898      	lsrs	r0, r3, #2
 808f3b6:	9b03      	ldr	r3, [sp, #12]
 808f3b8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 808f3bc:	1099      	asrs	r1, r3, #2
 808f3be:	2364      	movs	r3, #100	; 0x64
 808f3c0:	fb92 f3f3 	sdiv	r3, r2, r3
 808f3c4:	1ac0      	subs	r0, r0, r3
 808f3c6:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 808f3ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808f3ce:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 808f3d2:	fb92 f3f3 	sdiv	r3, r2, r3
 808f3d6:	18c0      	adds	r0, r0, r3
 808f3d8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808f3dc:	f240 136d 	movw	r3, #365	; 0x16d
 808f3e0:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 808f3e4:	fb03 fc0c 	mul.w	ip, r3, ip
 808f3e8:	eb10 000c 	adds.w	r0, r0, ip
 808f3ec:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
 808f3f0:	f04f 0c18 	mov.w	ip, #24
 808f3f4:	69f3      	ldr	r3, [r6, #28]
 808f3f6:	18c0      	adds	r0, r0, r3
 808f3f8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808f3fc:	fba0 230c 	umull	r2, r3, r0, ip
 808f400:	fb0c 3301 	mla	r3, ip, r1, r3
 808f404:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 808f408:	68b1      	ldr	r1, [r6, #8]
 808f40a:	1852      	adds	r2, r2, r1
 808f40c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808f410:	fba2 010c 	umull	r0, r1, r2, ip
 808f414:	fb0c 1103 	mla	r1, ip, r3, r1
 808f418:	6873      	ldr	r3, [r6, #4]
 808f41a:	18c0      	adds	r0, r0, r3
 808f41c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808f420:	fba0 230c 	umull	r2, r3, r0, ip
 808f424:	fb0c 3301 	mla	r3, ip, r1, r3
 808f428:	6831      	ldr	r1, [r6, #0]
 808f42a:	4640      	mov	r0, r8
 808f42c:	1852      	adds	r2, r2, r1
 808f42e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808f432:	ebb2 0209 	subs.w	r2, r2, r9
 808f436:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
 808f43a:	e9cd 2300 	strd	r2, r3, [sp]
 808f43e:	4671      	mov	r1, lr
 808f440:	4a13      	ldr	r2, [pc, #76]	; (808f490 <__strftime+0x7cc>)
 808f442:	f7fb fbfb 	bl	808ac3c <sniprintf>
 808f446:	e5fa      	b.n	808f03e <__strftime+0x37a>
 808f448:	f04f 0900 	mov.w	r9, #0
 808f44c:	e794      	b.n	808f378 <__strftime+0x6b4>
 808f44e:	6833      	ldr	r3, [r6, #0]
 808f450:	e664      	b.n	808f11c <__strftime+0x458>
 808f452:	1e6b      	subs	r3, r5, #1
 808f454:	42a3      	cmp	r3, r4
 808f456:	f67f ac67 	bls.w	808ed28 <__strftime+0x64>
 808f45a:	2309      	movs	r3, #9
 808f45c:	e741      	b.n	808f2e2 <__strftime+0x61e>
 808f45e:	6833      	ldr	r3, [r6, #0]
 808f460:	4a0c      	ldr	r2, [pc, #48]	; (808f494 <__strftime+0x7d0>)
 808f462:	9301      	str	r3, [sp, #4]
 808f464:	6873      	ldr	r3, [r6, #4]
 808f466:	9300      	str	r3, [sp, #0]
 808f468:	68b3      	ldr	r3, [r6, #8]
 808f46a:	e5d9      	b.n	808f020 <__strftime+0x35c>
 808f46c:	fffff894 	.word	0xfffff894
 808f470:	fffff895 	.word	0xfffff895
 808f474:	0809465c 	.word	0x0809465c
 808f478:	0809463d 	.word	0x0809463d
 808f47c:	0809464b 	.word	0x0809464b
 808f480:	08094660 	.word	0x08094660
 808f484:	08094800 	.word	0x08094800
 808f488:	08094939 	.word	0x08094939
 808f48c:	0809466f 	.word	0x0809466f
 808f490:	08094665 	.word	0x08094665
 808f494:	0809466a 	.word	0x0809466a
 808f498:	1e6b      	subs	r3, r5, #1
 808f49a:	42a3      	cmp	r3, r4
 808f49c:	f67f ac44 	bls.w	808ed28 <__strftime+0x64>
 808f4a0:	69b3      	ldr	r3, [r6, #24]
 808f4a2:	193a      	adds	r2, r7, r4
 808f4a4:	3401      	adds	r4, #1
 808f4a6:	b913      	cbnz	r3, 808f4ae <__strftime+0x7ea>
 808f4a8:	2337      	movs	r3, #55	; 0x37
 808f4aa:	7013      	strb	r3, [r2, #0]
 808f4ac:	e50e      	b.n	808eecc <__strftime+0x208>
 808f4ae:	3330      	adds	r3, #48	; 0x30
 808f4b0:	e7fb      	b.n	808f4aa <__strftime+0x7e6>
 808f4b2:	69f3      	ldr	r3, [r6, #28]
 808f4b4:	69b2      	ldr	r2, [r6, #24]
 808f4b6:	3307      	adds	r3, #7
 808f4b8:	1a9b      	subs	r3, r3, r2
 808f4ba:	2207      	movs	r2, #7
 808f4bc:	fb93 f3f2 	sdiv	r3, r3, r2
 808f4c0:	e62c      	b.n	808f11c <__strftime+0x458>
 808f4c2:	4630      	mov	r0, r6
 808f4c4:	f7ff fb9c 	bl	808ec00 <iso_year_adjust>
 808f4c8:	69b2      	ldr	r2, [r6, #24]
 808f4ca:	b132      	cbz	r2, 808f4da <__strftime+0x816>
 808f4cc:	3a01      	subs	r2, #1
 808f4ce:	2800      	cmp	r0, #0
 808f4d0:	dc27      	bgt.n	808f522 <__strftime+0x85e>
 808f4d2:	69f3      	ldr	r3, [r6, #28]
 808f4d4:	d103      	bne.n	808f4de <__strftime+0x81a>
 808f4d6:	330a      	adds	r3, #10
 808f4d8:	e7ee      	b.n	808f4b8 <__strftime+0x7f4>
 808f4da:	2206      	movs	r2, #6
 808f4dc:	e7f7      	b.n	808f4ce <__strftime+0x80a>
 808f4de:	6970      	ldr	r0, [r6, #20]
 808f4e0:	1ad3      	subs	r3, r2, r3
 808f4e2:	2800      	cmp	r0, #0
 808f4e4:	f240 726b 	movw	r2, #1899	; 0x76b
 808f4e8:	bfa8      	it	ge
 808f4ea:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 808f4ee:	4410      	add	r0, r2
 808f4f0:	0782      	lsls	r2, r0, #30
 808f4f2:	d105      	bne.n	808f500 <__strftime+0x83c>
 808f4f4:	2264      	movs	r2, #100	; 0x64
 808f4f6:	fb90 f1f2 	sdiv	r1, r0, r2
 808f4fa:	fb02 0111 	mls	r1, r2, r1, r0
 808f4fe:	b971      	cbnz	r1, 808f51e <__strftime+0x85a>
 808f500:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808f504:	fb90 f2f1 	sdiv	r2, r0, r1
 808f508:	fb01 0212 	mls	r2, r1, r2, r0
 808f50c:	fab2 f282 	clz	r2, r2
 808f510:	0952      	lsrs	r2, r2, #5
 808f512:	1a9a      	subs	r2, r3, r2
 808f514:	2a05      	cmp	r2, #5
 808f516:	bfb4      	ite	lt
 808f518:	2335      	movlt	r3, #53	; 0x35
 808f51a:	2334      	movge	r3, #52	; 0x34
 808f51c:	e5fe      	b.n	808f11c <__strftime+0x458>
 808f51e:	2201      	movs	r2, #1
 808f520:	e7f7      	b.n	808f512 <__strftime+0x84e>
 808f522:	2301      	movs	r3, #1
 808f524:	e5fa      	b.n	808f11c <__strftime+0x458>
 808f526:	1e6b      	subs	r3, r5, #1
 808f528:	42a3      	cmp	r3, r4
 808f52a:	f67f abfd 	bls.w	808ed28 <__strftime+0x64>
 808f52e:	69b3      	ldr	r3, [r6, #24]
 808f530:	3330      	adds	r3, #48	; 0x30
 808f532:	e6d6      	b.n	808f2e2 <__strftime+0x61e>
 808f534:	69b3      	ldr	r3, [r6, #24]
 808f536:	b13b      	cbz	r3, 808f548 <__strftime+0x884>
 808f538:	3b01      	subs	r3, #1
 808f53a:	69f2      	ldr	r2, [r6, #28]
 808f53c:	3207      	adds	r2, #7
 808f53e:	1ad2      	subs	r2, r2, r3
 808f540:	2307      	movs	r3, #7
 808f542:	fb92 f3f3 	sdiv	r3, r2, r3
 808f546:	e5e9      	b.n	808f11c <__strftime+0x458>
 808f548:	2306      	movs	r3, #6
 808f54a:	e7f6      	b.n	808f53a <__strftime+0x876>
 808f54c:	6970      	ldr	r0, [r6, #20]
 808f54e:	2800      	cmp	r0, #0
 808f550:	db05      	blt.n	808f55e <__strftime+0x89a>
 808f552:	2264      	movs	r2, #100	; 0x64
 808f554:	fb90 f3f2 	sdiv	r3, r0, r2
 808f558:	fb03 0312 	mls	r3, r3, r2, r0
 808f55c:	e5de      	b.n	808f11c <__strftime+0x458>
 808f55e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f562:	f001 fa8f 	bl	8090a84 <abs>
 808f566:	e7f4      	b.n	808f552 <__strftime+0x88e>
 808f568:	6973      	ldr	r3, [r6, #20]
 808f56a:	4a4d      	ldr	r2, [pc, #308]	; (808f6a0 <__strftime+0x9dc>)
 808f56c:	4293      	cmp	r3, r2
 808f56e:	da0c      	bge.n	808f58a <__strftime+0x8c6>
 808f570:	212d      	movs	r1, #45	; 0x2d
 808f572:	eba2 0b03 	sub.w	fp, r2, r3
 808f576:	f88d 1020 	strb.w	r1, [sp, #32]
 808f57a:	f1b8 0f00 	cmp.w	r8, #0
 808f57e:	d001      	beq.n	808f584 <__strftime+0x8c0>
 808f580:	f108 38ff 	add.w	r8, r8, #4294967295
 808f584:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 808f588:	e00c      	b.n	808f5a4 <__strftime+0x8e0>
 808f58a:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 808f58e:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808f592:	d106      	bne.n	808f5a2 <__strftime+0x8de>
 808f594:	f242 730f 	movw	r3, #9999	; 0x270f
 808f598:	459b      	cmp	fp, r3
 808f59a:	d902      	bls.n	808f5a2 <__strftime+0x8de>
 808f59c:	f88d 9020 	strb.w	r9, [sp, #32]
 808f5a0:	e7eb      	b.n	808f57a <__strftime+0x8b6>
 808f5a2:	ab08      	add	r3, sp, #32
 808f5a4:	2225      	movs	r2, #37	; 0x25
 808f5a6:	701a      	strb	r2, [r3, #0]
 808f5a8:	f1b9 0f00 	cmp.w	r9, #0
 808f5ac:	d106      	bne.n	808f5bc <__strftime+0x8f8>
 808f5ae:	1c58      	adds	r0, r3, #1
 808f5b0:	493c      	ldr	r1, [pc, #240]	; (808f6a4 <__strftime+0x9e0>)
 808f5b2:	f7ff fb00 	bl	808ebb6 <strcpy>
 808f5b6:	f8cd b000 	str.w	fp, [sp]
 808f5ba:	e665      	b.n	808f288 <__strftime+0x5c4>
 808f5bc:	2230      	movs	r2, #48	; 0x30
 808f5be:	1c98      	adds	r0, r3, #2
 808f5c0:	705a      	strb	r2, [r3, #1]
 808f5c2:	e7f5      	b.n	808f5b0 <__strftime+0x8ec>
 808f5c4:	6a33      	ldr	r3, [r6, #32]
 808f5c6:	2b00      	cmp	r3, #0
 808f5c8:	f6ff ac80 	blt.w	808eecc <__strftime+0x208>
 808f5cc:	f001 f8c8 	bl	8090760 <__tz_lock>
 808f5d0:	9b04      	ldr	r3, [sp, #16]
 808f5d2:	b90b      	cbnz	r3, 808f5d8 <__strftime+0x914>
 808f5d4:	f001 f8d0 	bl	8090778 <_tzset_unlocked>
 808f5d8:	f001 fdee 	bl	80911b8 <__gettzinfo>
 808f5dc:	6a33      	ldr	r3, [r6, #32]
 808f5de:	eb07 0904 	add.w	r9, r7, r4
 808f5e2:	2b00      	cmp	r3, #0
 808f5e4:	bfcc      	ite	gt
 808f5e6:	2350      	movgt	r3, #80	; 0x50
 808f5e8:	2328      	movle	r3, #40	; 0x28
 808f5ea:	58c3      	ldr	r3, [r0, r3]
 808f5ec:	eba5 0b04 	sub.w	fp, r5, r4
 808f5f0:	f1c3 0800 	rsb	r8, r3, #0
 808f5f4:	f001 f8ba 	bl	809076c <__tz_unlock>
 808f5f8:	233c      	movs	r3, #60	; 0x3c
 808f5fa:	fb98 f0f3 	sdiv	r0, r8, r3
 808f5fe:	f001 fe8f 	bl	8091320 <labs>
 808f602:	233c      	movs	r3, #60	; 0x3c
 808f604:	fb90 f2f3 	sdiv	r2, r0, r3
 808f608:	fb02 0013 	mls	r0, r2, r3, r0
 808f60c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808f610:	9000      	str	r0, [sp, #0]
 808f612:	fb98 f3f3 	sdiv	r3, r8, r3
 808f616:	4659      	mov	r1, fp
 808f618:	4648      	mov	r0, r9
 808f61a:	4a23      	ldr	r2, [pc, #140]	; (808f6a8 <__strftime+0x9e4>)
 808f61c:	f7fb fb0e 	bl	808ac3c <sniprintf>
 808f620:	2800      	cmp	r0, #0
 808f622:	f6ff ab81 	blt.w	808ed28 <__strftime+0x64>
 808f626:	4404      	add	r4, r0
 808f628:	42a5      	cmp	r5, r4
 808f62a:	f67f ab7d 	bls.w	808ed28 <__strftime+0x64>
 808f62e:	2301      	movs	r3, #1
 808f630:	9304      	str	r3, [sp, #16]
 808f632:	e44b      	b.n	808eecc <__strftime+0x208>
 808f634:	6a33      	ldr	r3, [r6, #32]
 808f636:	2b00      	cmp	r3, #0
 808f638:	f6ff ac48 	blt.w	808eecc <__strftime+0x208>
 808f63c:	f001 f890 	bl	8090760 <__tz_lock>
 808f640:	9b04      	ldr	r3, [sp, #16]
 808f642:	b90b      	cbnz	r3, 808f648 <__strftime+0x984>
 808f644:	f001 f898 	bl	8090778 <_tzset_unlocked>
 808f648:	6a33      	ldr	r3, [r6, #32]
 808f64a:	4a18      	ldr	r2, [pc, #96]	; (808f6ac <__strftime+0x9e8>)
 808f64c:	2b00      	cmp	r3, #0
 808f64e:	bfd4      	ite	le
 808f650:	2300      	movle	r3, #0
 808f652:	2301      	movgt	r3, #1
 808f654:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808f658:	4640      	mov	r0, r8
 808f65a:	f000 f833 	bl	808f6c4 <strlen>
 808f65e:	f108 38ff 	add.w	r8, r8, #4294967295
 808f662:	4420      	add	r0, r4
 808f664:	1e6b      	subs	r3, r5, #1
 808f666:	42a0      	cmp	r0, r4
 808f668:	d102      	bne.n	808f670 <__strftime+0x9ac>
 808f66a:	f001 f87f 	bl	809076c <__tz_unlock>
 808f66e:	e7de      	b.n	808f62e <__strftime+0x96a>
 808f670:	42a3      	cmp	r3, r4
 808f672:	d904      	bls.n	808f67e <__strftime+0x9ba>
 808f674:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808f678:	553a      	strb	r2, [r7, r4]
 808f67a:	3401      	adds	r4, #1
 808f67c:	e7f3      	b.n	808f666 <__strftime+0x9a2>
 808f67e:	f001 f875 	bl	809076c <__tz_unlock>
 808f682:	f7ff bb51 	b.w	808ed28 <__strftime+0x64>
 808f686:	1e6b      	subs	r3, r5, #1
 808f688:	42a3      	cmp	r3, r4
 808f68a:	f67f ab4d 	bls.w	808ed28 <__strftime+0x64>
 808f68e:	2325      	movs	r3, #37	; 0x25
 808f690:	e627      	b.n	808f2e2 <__strftime+0x61e>
 808f692:	b10d      	cbz	r5, 808f698 <__strftime+0x9d4>
 808f694:	2300      	movs	r3, #0
 808f696:	553b      	strb	r3, [r7, r4]
 808f698:	4620      	mov	r0, r4
 808f69a:	b011      	add	sp, #68	; 0x44
 808f69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f6a0:	fffff894 	.word	0xfffff894
 808f6a4:	0809465c 	.word	0x0809465c
 808f6a8:	08094679 	.word	0x08094679
 808f6ac:	2000014c 	.word	0x2000014c

0808f6b0 <strftime>:
 808f6b0:	b513      	push	{r0, r1, r4, lr}
 808f6b2:	4c03      	ldr	r4, [pc, #12]	; (808f6c0 <strftime+0x10>)
 808f6b4:	9400      	str	r4, [sp, #0]
 808f6b6:	f7ff fb05 	bl	808ecc4 <__strftime>
 808f6ba:	b002      	add	sp, #8
 808f6bc:	bd10      	pop	{r4, pc}
 808f6be:	bf00      	nop
 808f6c0:	200001b4 	.word	0x200001b4

0808f6c4 <strlen>:
 808f6c4:	4603      	mov	r3, r0
 808f6c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 808f6ca:	2a00      	cmp	r2, #0
 808f6cc:	d1fb      	bne.n	808f6c6 <strlen+0x2>
 808f6ce:	1a18      	subs	r0, r3, r0
 808f6d0:	3801      	subs	r0, #1
 808f6d2:	4770      	bx	lr

0808f6d4 <strncmp>:
 808f6d4:	b510      	push	{r4, lr}
 808f6d6:	b16a      	cbz	r2, 808f6f4 <strncmp+0x20>
 808f6d8:	3901      	subs	r1, #1
 808f6da:	1884      	adds	r4, r0, r2
 808f6dc:	f810 3b01 	ldrb.w	r3, [r0], #1
 808f6e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808f6e4:	4293      	cmp	r3, r2
 808f6e6:	d103      	bne.n	808f6f0 <strncmp+0x1c>
 808f6e8:	42a0      	cmp	r0, r4
 808f6ea:	d001      	beq.n	808f6f0 <strncmp+0x1c>
 808f6ec:	2b00      	cmp	r3, #0
 808f6ee:	d1f5      	bne.n	808f6dc <strncmp+0x8>
 808f6f0:	1a98      	subs	r0, r3, r2
 808f6f2:	bd10      	pop	{r4, pc}
 808f6f4:	4610      	mov	r0, r2
 808f6f6:	e7fc      	b.n	808f6f2 <strncmp+0x1e>

0808f6f8 <strncpy>:
 808f6f8:	4603      	mov	r3, r0
 808f6fa:	b510      	push	{r4, lr}
 808f6fc:	3901      	subs	r1, #1
 808f6fe:	b132      	cbz	r2, 808f70e <strncpy+0x16>
 808f700:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808f704:	3a01      	subs	r2, #1
 808f706:	f803 4b01 	strb.w	r4, [r3], #1
 808f70a:	2c00      	cmp	r4, #0
 808f70c:	d1f7      	bne.n	808f6fe <strncpy+0x6>
 808f70e:	2100      	movs	r1, #0
 808f710:	441a      	add	r2, r3
 808f712:	4293      	cmp	r3, r2
 808f714:	d100      	bne.n	808f718 <strncpy+0x20>
 808f716:	bd10      	pop	{r4, pc}
 808f718:	f803 1b01 	strb.w	r1, [r3], #1
 808f71c:	e7f9      	b.n	808f712 <strncpy+0x1a>

0808f71e <strstr>:
 808f71e:	b5f0      	push	{r4, r5, r6, r7, lr}
 808f720:	780c      	ldrb	r4, [r1, #0]
 808f722:	b164      	cbz	r4, 808f73e <strstr+0x20>
 808f724:	4603      	mov	r3, r0
 808f726:	781a      	ldrb	r2, [r3, #0]
 808f728:	4618      	mov	r0, r3
 808f72a:	1c5e      	adds	r6, r3, #1
 808f72c:	b90a      	cbnz	r2, 808f732 <strstr+0x14>
 808f72e:	4610      	mov	r0, r2
 808f730:	e005      	b.n	808f73e <strstr+0x20>
 808f732:	4294      	cmp	r4, r2
 808f734:	d108      	bne.n	808f748 <strstr+0x2a>
 808f736:	460d      	mov	r5, r1
 808f738:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808f73c:	b902      	cbnz	r2, 808f740 <strstr+0x22>
 808f73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808f740:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 808f744:	4297      	cmp	r7, r2
 808f746:	d0f7      	beq.n	808f738 <strstr+0x1a>
 808f748:	4633      	mov	r3, r6
 808f74a:	e7ec      	b.n	808f726 <strstr+0x8>

0808f74c <sulp>:
 808f74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808f750:	460f      	mov	r7, r1
 808f752:	4690      	mov	r8, r2
 808f754:	f002 f8fc 	bl	8091950 <__ulp>
 808f758:	4604      	mov	r4, r0
 808f75a:	460d      	mov	r5, r1
 808f75c:	f1b8 0f00 	cmp.w	r8, #0
 808f760:	d011      	beq.n	808f786 <sulp+0x3a>
 808f762:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808f766:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808f76a:	2b00      	cmp	r3, #0
 808f76c:	dd0b      	ble.n	808f786 <sulp+0x3a>
 808f76e:	2400      	movs	r4, #0
 808f770:	051b      	lsls	r3, r3, #20
 808f772:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808f776:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808f77a:	4622      	mov	r2, r4
 808f77c:	462b      	mov	r3, r5
 808f77e:	f7fe f811 	bl	808d7a4 <__aeabi_dmul>
 808f782:	4604      	mov	r4, r0
 808f784:	460d      	mov	r5, r1
 808f786:	4620      	mov	r0, r4
 808f788:	4629      	mov	r1, r5
 808f78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808f790 <_strtod_l>:
 808f790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808f794:	469b      	mov	fp, r3
 808f796:	2300      	movs	r3, #0
 808f798:	b0a1      	sub	sp, #132	; 0x84
 808f79a:	931c      	str	r3, [sp, #112]	; 0x70
 808f79c:	4ba1      	ldr	r3, [pc, #644]	; (808fa24 <_strtod_l+0x294>)
 808f79e:	4682      	mov	sl, r0
 808f7a0:	681f      	ldr	r7, [r3, #0]
 808f7a2:	460e      	mov	r6, r1
 808f7a4:	4638      	mov	r0, r7
 808f7a6:	9217      	str	r2, [sp, #92]	; 0x5c
 808f7a8:	f7ff ff8c 	bl	808f6c4 <strlen>
 808f7ac:	f04f 0800 	mov.w	r8, #0
 808f7b0:	4604      	mov	r4, r0
 808f7b2:	f04f 0900 	mov.w	r9, #0
 808f7b6:	961b      	str	r6, [sp, #108]	; 0x6c
 808f7b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f7ba:	781a      	ldrb	r2, [r3, #0]
 808f7bc:	2a2b      	cmp	r2, #43	; 0x2b
 808f7be:	d04c      	beq.n	808f85a <_strtod_l+0xca>
 808f7c0:	d83a      	bhi.n	808f838 <_strtod_l+0xa8>
 808f7c2:	2a0d      	cmp	r2, #13
 808f7c4:	d833      	bhi.n	808f82e <_strtod_l+0x9e>
 808f7c6:	2a08      	cmp	r2, #8
 808f7c8:	d833      	bhi.n	808f832 <_strtod_l+0xa2>
 808f7ca:	2a00      	cmp	r2, #0
 808f7cc:	d03d      	beq.n	808f84a <_strtod_l+0xba>
 808f7ce:	2300      	movs	r3, #0
 808f7d0:	930c      	str	r3, [sp, #48]	; 0x30
 808f7d2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 808f7d4:	782b      	ldrb	r3, [r5, #0]
 808f7d6:	2b30      	cmp	r3, #48	; 0x30
 808f7d8:	f040 80af 	bne.w	808f93a <_strtod_l+0x1aa>
 808f7dc:	786b      	ldrb	r3, [r5, #1]
 808f7de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808f7e2:	2b58      	cmp	r3, #88	; 0x58
 808f7e4:	d16c      	bne.n	808f8c0 <_strtod_l+0x130>
 808f7e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808f7e8:	4650      	mov	r0, sl
 808f7ea:	9301      	str	r3, [sp, #4]
 808f7ec:	ab1c      	add	r3, sp, #112	; 0x70
 808f7ee:	9300      	str	r3, [sp, #0]
 808f7f0:	4a8d      	ldr	r2, [pc, #564]	; (808fa28 <_strtod_l+0x298>)
 808f7f2:	f8cd b008 	str.w	fp, [sp, #8]
 808f7f6:	ab1d      	add	r3, sp, #116	; 0x74
 808f7f8:	a91b      	add	r1, sp, #108	; 0x6c
 808f7fa:	f001 f9af 	bl	8090b5c <__gethex>
 808f7fe:	f010 0607 	ands.w	r6, r0, #7
 808f802:	4604      	mov	r4, r0
 808f804:	d005      	beq.n	808f812 <_strtod_l+0x82>
 808f806:	2e06      	cmp	r6, #6
 808f808:	d129      	bne.n	808f85e <_strtod_l+0xce>
 808f80a:	2300      	movs	r3, #0
 808f80c:	3501      	adds	r5, #1
 808f80e:	951b      	str	r5, [sp, #108]	; 0x6c
 808f810:	930c      	str	r3, [sp, #48]	; 0x30
 808f812:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f814:	2b00      	cmp	r3, #0
 808f816:	f040 8596 	bne.w	8090346 <_strtod_l+0xbb6>
 808f81a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808f81c:	b1d3      	cbz	r3, 808f854 <_strtod_l+0xc4>
 808f81e:	4642      	mov	r2, r8
 808f820:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808f824:	4610      	mov	r0, r2
 808f826:	4619      	mov	r1, r3
 808f828:	b021      	add	sp, #132	; 0x84
 808f82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f82e:	2a20      	cmp	r2, #32
 808f830:	d1cd      	bne.n	808f7ce <_strtod_l+0x3e>
 808f832:	3301      	adds	r3, #1
 808f834:	931b      	str	r3, [sp, #108]	; 0x6c
 808f836:	e7bf      	b.n	808f7b8 <_strtod_l+0x28>
 808f838:	2a2d      	cmp	r2, #45	; 0x2d
 808f83a:	d1c8      	bne.n	808f7ce <_strtod_l+0x3e>
 808f83c:	2201      	movs	r2, #1
 808f83e:	920c      	str	r2, [sp, #48]	; 0x30
 808f840:	1c5a      	adds	r2, r3, #1
 808f842:	921b      	str	r2, [sp, #108]	; 0x6c
 808f844:	785b      	ldrb	r3, [r3, #1]
 808f846:	2b00      	cmp	r3, #0
 808f848:	d1c3      	bne.n	808f7d2 <_strtod_l+0x42>
 808f84a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f84c:	961b      	str	r6, [sp, #108]	; 0x6c
 808f84e:	2b00      	cmp	r3, #0
 808f850:	f040 8577 	bne.w	8090342 <_strtod_l+0xbb2>
 808f854:	4642      	mov	r2, r8
 808f856:	464b      	mov	r3, r9
 808f858:	e7e4      	b.n	808f824 <_strtod_l+0x94>
 808f85a:	2200      	movs	r2, #0
 808f85c:	e7ef      	b.n	808f83e <_strtod_l+0xae>
 808f85e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808f860:	b13a      	cbz	r2, 808f872 <_strtod_l+0xe2>
 808f862:	2135      	movs	r1, #53	; 0x35
 808f864:	a81e      	add	r0, sp, #120	; 0x78
 808f866:	f002 f96a 	bl	8091b3e <__copybits>
 808f86a:	4650      	mov	r0, sl
 808f86c:	991c      	ldr	r1, [sp, #112]	; 0x70
 808f86e:	f001 fda5 	bl	80913bc <_Bfree>
 808f872:	3e01      	subs	r6, #1
 808f874:	2e05      	cmp	r6, #5
 808f876:	d807      	bhi.n	808f888 <_strtod_l+0xf8>
 808f878:	e8df f006 	tbb	[pc, r6]
 808f87c:	1d180b0e 	.word	0x1d180b0e
 808f880:	030e      	.short	0x030e
 808f882:	f04f 0900 	mov.w	r9, #0
 808f886:	46c8      	mov	r8, r9
 808f888:	0721      	lsls	r1, r4, #28
 808f88a:	d5c2      	bpl.n	808f812 <_strtod_l+0x82>
 808f88c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808f890:	e7bf      	b.n	808f812 <_strtod_l+0x82>
 808f892:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 808f896:	e7f7      	b.n	808f888 <_strtod_l+0xf8>
 808f898:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 808f89a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 808f89e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808f8a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808f8a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808f8aa:	e7ed      	b.n	808f888 <_strtod_l+0xf8>
 808f8ac:	f04f 0800 	mov.w	r8, #0
 808f8b0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808fa2c <_strtod_l+0x29c>
 808f8b4:	e7e8      	b.n	808f888 <_strtod_l+0xf8>
 808f8b6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808f8ba:	f04f 38ff 	mov.w	r8, #4294967295
 808f8be:	e7e3      	b.n	808f888 <_strtod_l+0xf8>
 808f8c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f8c2:	1c5a      	adds	r2, r3, #1
 808f8c4:	921b      	str	r2, [sp, #108]	; 0x6c
 808f8c6:	785b      	ldrb	r3, [r3, #1]
 808f8c8:	2b30      	cmp	r3, #48	; 0x30
 808f8ca:	d0f9      	beq.n	808f8c0 <_strtod_l+0x130>
 808f8cc:	2b00      	cmp	r3, #0
 808f8ce:	d0a0      	beq.n	808f812 <_strtod_l+0x82>
 808f8d0:	2301      	movs	r3, #1
 808f8d2:	9307      	str	r3, [sp, #28]
 808f8d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f8d6:	220a      	movs	r2, #10
 808f8d8:	9308      	str	r3, [sp, #32]
 808f8da:	2300      	movs	r3, #0
 808f8dc:	469b      	mov	fp, r3
 808f8de:	e9cd 3305 	strd	r3, r3, [sp, #20]
 808f8e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 808f8e4:	7805      	ldrb	r5, [r0, #0]
 808f8e6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 808f8ea:	b2d9      	uxtb	r1, r3
 808f8ec:	2909      	cmp	r1, #9
 808f8ee:	d926      	bls.n	808f93e <_strtod_l+0x1ae>
 808f8f0:	4622      	mov	r2, r4
 808f8f2:	4639      	mov	r1, r7
 808f8f4:	f7ff feee 	bl	808f6d4 <strncmp>
 808f8f8:	2800      	cmp	r0, #0
 808f8fa:	d032      	beq.n	808f962 <_strtod_l+0x1d2>
 808f8fc:	2000      	movs	r0, #0
 808f8fe:	462b      	mov	r3, r5
 808f900:	465c      	mov	r4, fp
 808f902:	4602      	mov	r2, r0
 808f904:	9004      	str	r0, [sp, #16]
 808f906:	2b65      	cmp	r3, #101	; 0x65
 808f908:	d001      	beq.n	808f90e <_strtod_l+0x17e>
 808f90a:	2b45      	cmp	r3, #69	; 0x45
 808f90c:	d113      	bne.n	808f936 <_strtod_l+0x1a6>
 808f90e:	b91c      	cbnz	r4, 808f918 <_strtod_l+0x188>
 808f910:	9b07      	ldr	r3, [sp, #28]
 808f912:	4303      	orrs	r3, r0
 808f914:	d099      	beq.n	808f84a <_strtod_l+0xba>
 808f916:	2400      	movs	r4, #0
 808f918:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 808f91a:	1c73      	adds	r3, r6, #1
 808f91c:	931b      	str	r3, [sp, #108]	; 0x6c
 808f91e:	7873      	ldrb	r3, [r6, #1]
 808f920:	2b2b      	cmp	r3, #43	; 0x2b
 808f922:	d078      	beq.n	808fa16 <_strtod_l+0x286>
 808f924:	2b2d      	cmp	r3, #45	; 0x2d
 808f926:	d07b      	beq.n	808fa20 <_strtod_l+0x290>
 808f928:	2700      	movs	r7, #0
 808f92a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808f92e:	2909      	cmp	r1, #9
 808f930:	f240 8082 	bls.w	808fa38 <_strtod_l+0x2a8>
 808f934:	961b      	str	r6, [sp, #108]	; 0x6c
 808f936:	2500      	movs	r5, #0
 808f938:	e09e      	b.n	808fa78 <_strtod_l+0x2e8>
 808f93a:	2300      	movs	r3, #0
 808f93c:	e7c9      	b.n	808f8d2 <_strtod_l+0x142>
 808f93e:	f1bb 0f08 	cmp.w	fp, #8
 808f942:	bfd5      	itete	le
 808f944:	9906      	ldrle	r1, [sp, #24]
 808f946:	9905      	ldrgt	r1, [sp, #20]
 808f948:	fb02 3301 	mlale	r3, r2, r1, r3
 808f94c:	fb02 3301 	mlagt	r3, r2, r1, r3
 808f950:	f100 0001 	add.w	r0, r0, #1
 808f954:	bfd4      	ite	le
 808f956:	9306      	strle	r3, [sp, #24]
 808f958:	9305      	strgt	r3, [sp, #20]
 808f95a:	f10b 0b01 	add.w	fp, fp, #1
 808f95e:	901b      	str	r0, [sp, #108]	; 0x6c
 808f960:	e7bf      	b.n	808f8e2 <_strtod_l+0x152>
 808f962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f964:	191a      	adds	r2, r3, r4
 808f966:	921b      	str	r2, [sp, #108]	; 0x6c
 808f968:	5d1b      	ldrb	r3, [r3, r4]
 808f96a:	f1bb 0f00 	cmp.w	fp, #0
 808f96e:	d036      	beq.n	808f9de <_strtod_l+0x24e>
 808f970:	465c      	mov	r4, fp
 808f972:	9004      	str	r0, [sp, #16]
 808f974:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 808f978:	2a09      	cmp	r2, #9
 808f97a:	d912      	bls.n	808f9a2 <_strtod_l+0x212>
 808f97c:	2201      	movs	r2, #1
 808f97e:	e7c2      	b.n	808f906 <_strtod_l+0x176>
 808f980:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f982:	3001      	adds	r0, #1
 808f984:	1c5a      	adds	r2, r3, #1
 808f986:	921b      	str	r2, [sp, #108]	; 0x6c
 808f988:	785b      	ldrb	r3, [r3, #1]
 808f98a:	2b30      	cmp	r3, #48	; 0x30
 808f98c:	d0f8      	beq.n	808f980 <_strtod_l+0x1f0>
 808f98e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808f992:	2a08      	cmp	r2, #8
 808f994:	f200 84dc 	bhi.w	8090350 <_strtod_l+0xbc0>
 808f998:	9004      	str	r0, [sp, #16]
 808f99a:	2000      	movs	r0, #0
 808f99c:	4604      	mov	r4, r0
 808f99e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 808f9a0:	9208      	str	r2, [sp, #32]
 808f9a2:	3b30      	subs	r3, #48	; 0x30
 808f9a4:	f100 0201 	add.w	r2, r0, #1
 808f9a8:	d013      	beq.n	808f9d2 <_strtod_l+0x242>
 808f9aa:	9904      	ldr	r1, [sp, #16]
 808f9ac:	1905      	adds	r5, r0, r4
 808f9ae:	4411      	add	r1, r2
 808f9b0:	9104      	str	r1, [sp, #16]
 808f9b2:	4622      	mov	r2, r4
 808f9b4:	210a      	movs	r1, #10
 808f9b6:	42aa      	cmp	r2, r5
 808f9b8:	d113      	bne.n	808f9e2 <_strtod_l+0x252>
 808f9ba:	1822      	adds	r2, r4, r0
 808f9bc:	2a08      	cmp	r2, #8
 808f9be:	f104 0401 	add.w	r4, r4, #1
 808f9c2:	4404      	add	r4, r0
 808f9c4:	dc1b      	bgt.n	808f9fe <_strtod_l+0x26e>
 808f9c6:	220a      	movs	r2, #10
 808f9c8:	9906      	ldr	r1, [sp, #24]
 808f9ca:	fb02 3301 	mla	r3, r2, r1, r3
 808f9ce:	9306      	str	r3, [sp, #24]
 808f9d0:	2200      	movs	r2, #0
 808f9d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f9d4:	4610      	mov	r0, r2
 808f9d6:	1c59      	adds	r1, r3, #1
 808f9d8:	911b      	str	r1, [sp, #108]	; 0x6c
 808f9da:	785b      	ldrb	r3, [r3, #1]
 808f9dc:	e7ca      	b.n	808f974 <_strtod_l+0x1e4>
 808f9de:	4658      	mov	r0, fp
 808f9e0:	e7d3      	b.n	808f98a <_strtod_l+0x1fa>
 808f9e2:	2a08      	cmp	r2, #8
 808f9e4:	dc04      	bgt.n	808f9f0 <_strtod_l+0x260>
 808f9e6:	9f06      	ldr	r7, [sp, #24]
 808f9e8:	434f      	muls	r7, r1
 808f9ea:	9706      	str	r7, [sp, #24]
 808f9ec:	3201      	adds	r2, #1
 808f9ee:	e7e2      	b.n	808f9b6 <_strtod_l+0x226>
 808f9f0:	1c57      	adds	r7, r2, #1
 808f9f2:	2f10      	cmp	r7, #16
 808f9f4:	bfde      	ittt	le
 808f9f6:	9f05      	ldrle	r7, [sp, #20]
 808f9f8:	434f      	mulle	r7, r1
 808f9fa:	9705      	strle	r7, [sp, #20]
 808f9fc:	e7f6      	b.n	808f9ec <_strtod_l+0x25c>
 808f9fe:	2c10      	cmp	r4, #16
 808fa00:	bfdf      	itttt	le
 808fa02:	220a      	movle	r2, #10
 808fa04:	9905      	ldrle	r1, [sp, #20]
 808fa06:	fb02 3301 	mlale	r3, r2, r1, r3
 808fa0a:	9305      	strle	r3, [sp, #20]
 808fa0c:	e7e0      	b.n	808f9d0 <_strtod_l+0x240>
 808fa0e:	2300      	movs	r3, #0
 808fa10:	2201      	movs	r2, #1
 808fa12:	9304      	str	r3, [sp, #16]
 808fa14:	e77c      	b.n	808f910 <_strtod_l+0x180>
 808fa16:	2700      	movs	r7, #0
 808fa18:	1cb3      	adds	r3, r6, #2
 808fa1a:	931b      	str	r3, [sp, #108]	; 0x6c
 808fa1c:	78b3      	ldrb	r3, [r6, #2]
 808fa1e:	e784      	b.n	808f92a <_strtod_l+0x19a>
 808fa20:	2701      	movs	r7, #1
 808fa22:	e7f9      	b.n	808fa18 <_strtod_l+0x288>
 808fa24:	08094a3c 	.word	0x08094a3c
 808fa28:	0809468c 	.word	0x0809468c
 808fa2c:	7ff00000 	.word	0x7ff00000
 808fa30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808fa32:	1c59      	adds	r1, r3, #1
 808fa34:	911b      	str	r1, [sp, #108]	; 0x6c
 808fa36:	785b      	ldrb	r3, [r3, #1]
 808fa38:	2b30      	cmp	r3, #48	; 0x30
 808fa3a:	d0f9      	beq.n	808fa30 <_strtod_l+0x2a0>
 808fa3c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 808fa40:	2908      	cmp	r1, #8
 808fa42:	f63f af78 	bhi.w	808f936 <_strtod_l+0x1a6>
 808fa46:	f04f 0e0a 	mov.w	lr, #10
 808fa4a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808fa4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808fa50:	9309      	str	r3, [sp, #36]	; 0x24
 808fa52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808fa54:	1c59      	adds	r1, r3, #1
 808fa56:	911b      	str	r1, [sp, #108]	; 0x6c
 808fa58:	785b      	ldrb	r3, [r3, #1]
 808fa5a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 808fa5e:	2d09      	cmp	r5, #9
 808fa60:	d935      	bls.n	808face <_strtod_l+0x33e>
 808fa62:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808fa64:	1b49      	subs	r1, r1, r5
 808fa66:	2908      	cmp	r1, #8
 808fa68:	f644 651f 	movw	r5, #19999	; 0x4e1f
 808fa6c:	dc02      	bgt.n	808fa74 <_strtod_l+0x2e4>
 808fa6e:	4565      	cmp	r5, ip
 808fa70:	bfa8      	it	ge
 808fa72:	4665      	movge	r5, ip
 808fa74:	b107      	cbz	r7, 808fa78 <_strtod_l+0x2e8>
 808fa76:	426d      	negs	r5, r5
 808fa78:	2c00      	cmp	r4, #0
 808fa7a:	d14c      	bne.n	808fb16 <_strtod_l+0x386>
 808fa7c:	9907      	ldr	r1, [sp, #28]
 808fa7e:	4301      	orrs	r1, r0
 808fa80:	f47f aec7 	bne.w	808f812 <_strtod_l+0x82>
 808fa84:	2a00      	cmp	r2, #0
 808fa86:	f47f aee0 	bne.w	808f84a <_strtod_l+0xba>
 808fa8a:	2b69      	cmp	r3, #105	; 0x69
 808fa8c:	d026      	beq.n	808fadc <_strtod_l+0x34c>
 808fa8e:	dc23      	bgt.n	808fad8 <_strtod_l+0x348>
 808fa90:	2b49      	cmp	r3, #73	; 0x49
 808fa92:	d023      	beq.n	808fadc <_strtod_l+0x34c>
 808fa94:	2b4e      	cmp	r3, #78	; 0x4e
 808fa96:	f47f aed8 	bne.w	808f84a <_strtod_l+0xba>
 808fa9a:	499c      	ldr	r1, [pc, #624]	; (808fd0c <_strtod_l+0x57c>)
 808fa9c:	a81b      	add	r0, sp, #108	; 0x6c
 808fa9e:	f001 fa99 	bl	8090fd4 <__match>
 808faa2:	2800      	cmp	r0, #0
 808faa4:	f43f aed1 	beq.w	808f84a <_strtod_l+0xba>
 808faa8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808faaa:	781b      	ldrb	r3, [r3, #0]
 808faac:	2b28      	cmp	r3, #40	; 0x28
 808faae:	d12c      	bne.n	808fb0a <_strtod_l+0x37a>
 808fab0:	4997      	ldr	r1, [pc, #604]	; (808fd10 <_strtod_l+0x580>)
 808fab2:	aa1e      	add	r2, sp, #120	; 0x78
 808fab4:	a81b      	add	r0, sp, #108	; 0x6c
 808fab6:	f001 faa1 	bl	8090ffc <__hexnan>
 808faba:	2805      	cmp	r0, #5
 808fabc:	d125      	bne.n	808fb0a <_strtod_l+0x37a>
 808fabe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 808fac0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 808fac4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808fac8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808facc:	e6a1      	b.n	808f812 <_strtod_l+0x82>
 808face:	fb0e 3c0c 	mla	ip, lr, ip, r3
 808fad2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 808fad6:	e7bc      	b.n	808fa52 <_strtod_l+0x2c2>
 808fad8:	2b6e      	cmp	r3, #110	; 0x6e
 808fada:	e7dc      	b.n	808fa96 <_strtod_l+0x306>
 808fadc:	498d      	ldr	r1, [pc, #564]	; (808fd14 <_strtod_l+0x584>)
 808fade:	a81b      	add	r0, sp, #108	; 0x6c
 808fae0:	f001 fa78 	bl	8090fd4 <__match>
 808fae4:	2800      	cmp	r0, #0
 808fae6:	f43f aeb0 	beq.w	808f84a <_strtod_l+0xba>
 808faea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808faec:	498a      	ldr	r1, [pc, #552]	; (808fd18 <_strtod_l+0x588>)
 808faee:	3b01      	subs	r3, #1
 808faf0:	a81b      	add	r0, sp, #108	; 0x6c
 808faf2:	931b      	str	r3, [sp, #108]	; 0x6c
 808faf4:	f001 fa6e 	bl	8090fd4 <__match>
 808faf8:	b910      	cbnz	r0, 808fb00 <_strtod_l+0x370>
 808fafa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808fafc:	3301      	adds	r3, #1
 808fafe:	931b      	str	r3, [sp, #108]	; 0x6c
 808fb00:	f04f 0800 	mov.w	r8, #0
 808fb04:	f8df 9220 	ldr.w	r9, [pc, #544]	; 808fd28 <_strtod_l+0x598>
 808fb08:	e683      	b.n	808f812 <_strtod_l+0x82>
 808fb0a:	4884      	ldr	r0, [pc, #528]	; (808fd1c <_strtod_l+0x58c>)
 808fb0c:	f7fd fc88 	bl	808d420 <nan>
 808fb10:	4680      	mov	r8, r0
 808fb12:	4689      	mov	r9, r1
 808fb14:	e67d      	b.n	808f812 <_strtod_l+0x82>
 808fb16:	9b04      	ldr	r3, [sp, #16]
 808fb18:	f1bb 0f00 	cmp.w	fp, #0
 808fb1c:	bf08      	it	eq
 808fb1e:	46a3      	moveq	fp, r4
 808fb20:	1aeb      	subs	r3, r5, r3
 808fb22:	2c10      	cmp	r4, #16
 808fb24:	9806      	ldr	r0, [sp, #24]
 808fb26:	4626      	mov	r6, r4
 808fb28:	9307      	str	r3, [sp, #28]
 808fb2a:	bfa8      	it	ge
 808fb2c:	2610      	movge	r6, #16
 808fb2e:	f7fd fdbf 	bl	808d6b0 <__aeabi_ui2d>
 808fb32:	2c09      	cmp	r4, #9
 808fb34:	4680      	mov	r8, r0
 808fb36:	4689      	mov	r9, r1
 808fb38:	dd13      	ble.n	808fb62 <_strtod_l+0x3d2>
 808fb3a:	4b79      	ldr	r3, [pc, #484]	; (808fd20 <_strtod_l+0x590>)
 808fb3c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 808fb40:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808fb44:	f7fd fe2e 	bl	808d7a4 <__aeabi_dmul>
 808fb48:	4680      	mov	r8, r0
 808fb4a:	9805      	ldr	r0, [sp, #20]
 808fb4c:	4689      	mov	r9, r1
 808fb4e:	f7fd fdaf 	bl	808d6b0 <__aeabi_ui2d>
 808fb52:	4602      	mov	r2, r0
 808fb54:	460b      	mov	r3, r1
 808fb56:	4640      	mov	r0, r8
 808fb58:	4649      	mov	r1, r9
 808fb5a:	f7fd fc6d 	bl	808d438 <__adddf3>
 808fb5e:	4680      	mov	r8, r0
 808fb60:	4689      	mov	r9, r1
 808fb62:	2c0f      	cmp	r4, #15
 808fb64:	dc36      	bgt.n	808fbd4 <_strtod_l+0x444>
 808fb66:	9b07      	ldr	r3, [sp, #28]
 808fb68:	2b00      	cmp	r3, #0
 808fb6a:	f43f ae52 	beq.w	808f812 <_strtod_l+0x82>
 808fb6e:	dd22      	ble.n	808fbb6 <_strtod_l+0x426>
 808fb70:	2b16      	cmp	r3, #22
 808fb72:	dc09      	bgt.n	808fb88 <_strtod_l+0x3f8>
 808fb74:	4c6a      	ldr	r4, [pc, #424]	; (808fd20 <_strtod_l+0x590>)
 808fb76:	4642      	mov	r2, r8
 808fb78:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 808fb7c:	464b      	mov	r3, r9
 808fb7e:	e9d4 0100 	ldrd	r0, r1, [r4]
 808fb82:	f7fd fe0f 	bl	808d7a4 <__aeabi_dmul>
 808fb86:	e7c3      	b.n	808fb10 <_strtod_l+0x380>
 808fb88:	9a07      	ldr	r2, [sp, #28]
 808fb8a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 808fb8e:	4293      	cmp	r3, r2
 808fb90:	db20      	blt.n	808fbd4 <_strtod_l+0x444>
 808fb92:	4d63      	ldr	r5, [pc, #396]	; (808fd20 <_strtod_l+0x590>)
 808fb94:	f1c4 040f 	rsb	r4, r4, #15
 808fb98:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 808fb9c:	4642      	mov	r2, r8
 808fb9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 808fba2:	464b      	mov	r3, r9
 808fba4:	f7fd fdfe 	bl	808d7a4 <__aeabi_dmul>
 808fba8:	9b07      	ldr	r3, [sp, #28]
 808fbaa:	1b1c      	subs	r4, r3, r4
 808fbac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 808fbb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 808fbb4:	e7e5      	b.n	808fb82 <_strtod_l+0x3f2>
 808fbb6:	9b07      	ldr	r3, [sp, #28]
 808fbb8:	3316      	adds	r3, #22
 808fbba:	db0b      	blt.n	808fbd4 <_strtod_l+0x444>
 808fbbc:	9b04      	ldr	r3, [sp, #16]
 808fbbe:	4a58      	ldr	r2, [pc, #352]	; (808fd20 <_strtod_l+0x590>)
 808fbc0:	1b5d      	subs	r5, r3, r5
 808fbc2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 808fbc6:	4640      	mov	r0, r8
 808fbc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 808fbcc:	4649      	mov	r1, r9
 808fbce:	f7fd ff13 	bl	808d9f8 <__aeabi_ddiv>
 808fbd2:	e79d      	b.n	808fb10 <_strtod_l+0x380>
 808fbd4:	9b07      	ldr	r3, [sp, #28]
 808fbd6:	1ba6      	subs	r6, r4, r6
 808fbd8:	441e      	add	r6, r3
 808fbda:	2e00      	cmp	r6, #0
 808fbdc:	dd71      	ble.n	808fcc2 <_strtod_l+0x532>
 808fbde:	f016 030f 	ands.w	r3, r6, #15
 808fbe2:	d00a      	beq.n	808fbfa <_strtod_l+0x46a>
 808fbe4:	494e      	ldr	r1, [pc, #312]	; (808fd20 <_strtod_l+0x590>)
 808fbe6:	4642      	mov	r2, r8
 808fbe8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 808fbec:	e9d1 0100 	ldrd	r0, r1, [r1]
 808fbf0:	464b      	mov	r3, r9
 808fbf2:	f7fd fdd7 	bl	808d7a4 <__aeabi_dmul>
 808fbf6:	4680      	mov	r8, r0
 808fbf8:	4689      	mov	r9, r1
 808fbfa:	f036 060f 	bics.w	r6, r6, #15
 808fbfe:	d050      	beq.n	808fca2 <_strtod_l+0x512>
 808fc00:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 808fc04:	dd27      	ble.n	808fc56 <_strtod_l+0x4c6>
 808fc06:	f04f 0b00 	mov.w	fp, #0
 808fc0a:	f8cd b010 	str.w	fp, [sp, #16]
 808fc0e:	f8cd b020 	str.w	fp, [sp, #32]
 808fc12:	f8cd b018 	str.w	fp, [sp, #24]
 808fc16:	2322      	movs	r3, #34	; 0x22
 808fc18:	f04f 0800 	mov.w	r8, #0
 808fc1c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 808fd28 <_strtod_l+0x598>
 808fc20:	f8ca 3000 	str.w	r3, [sl]
 808fc24:	9b08      	ldr	r3, [sp, #32]
 808fc26:	2b00      	cmp	r3, #0
 808fc28:	f43f adf3 	beq.w	808f812 <_strtod_l+0x82>
 808fc2c:	4650      	mov	r0, sl
 808fc2e:	991c      	ldr	r1, [sp, #112]	; 0x70
 808fc30:	f001 fbc4 	bl	80913bc <_Bfree>
 808fc34:	4650      	mov	r0, sl
 808fc36:	9906      	ldr	r1, [sp, #24]
 808fc38:	f001 fbc0 	bl	80913bc <_Bfree>
 808fc3c:	4650      	mov	r0, sl
 808fc3e:	9904      	ldr	r1, [sp, #16]
 808fc40:	f001 fbbc 	bl	80913bc <_Bfree>
 808fc44:	4650      	mov	r0, sl
 808fc46:	9908      	ldr	r1, [sp, #32]
 808fc48:	f001 fbb8 	bl	80913bc <_Bfree>
 808fc4c:	4659      	mov	r1, fp
 808fc4e:	4650      	mov	r0, sl
 808fc50:	f001 fbb4 	bl	80913bc <_Bfree>
 808fc54:	e5dd      	b.n	808f812 <_strtod_l+0x82>
 808fc56:	2300      	movs	r3, #0
 808fc58:	4640      	mov	r0, r8
 808fc5a:	4649      	mov	r1, r9
 808fc5c:	461f      	mov	r7, r3
 808fc5e:	1136      	asrs	r6, r6, #4
 808fc60:	2e01      	cmp	r6, #1
 808fc62:	dc21      	bgt.n	808fca8 <_strtod_l+0x518>
 808fc64:	b10b      	cbz	r3, 808fc6a <_strtod_l+0x4da>
 808fc66:	4680      	mov	r8, r0
 808fc68:	4689      	mov	r9, r1
 808fc6a:	4b2e      	ldr	r3, [pc, #184]	; (808fd24 <_strtod_l+0x594>)
 808fc6c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808fc70:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 808fc74:	4642      	mov	r2, r8
 808fc76:	e9d7 0100 	ldrd	r0, r1, [r7]
 808fc7a:	464b      	mov	r3, r9
 808fc7c:	f7fd fd92 	bl	808d7a4 <__aeabi_dmul>
 808fc80:	4b29      	ldr	r3, [pc, #164]	; (808fd28 <_strtod_l+0x598>)
 808fc82:	460a      	mov	r2, r1
 808fc84:	400b      	ands	r3, r1
 808fc86:	4929      	ldr	r1, [pc, #164]	; (808fd2c <_strtod_l+0x59c>)
 808fc88:	4680      	mov	r8, r0
 808fc8a:	428b      	cmp	r3, r1
 808fc8c:	d8bb      	bhi.n	808fc06 <_strtod_l+0x476>
 808fc8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808fc92:	428b      	cmp	r3, r1
 808fc94:	bf86      	itte	hi
 808fc96:	f04f 38ff 	movhi.w	r8, #4294967295
 808fc9a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 808fd30 <_strtod_l+0x5a0>
 808fc9e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808fca2:	2300      	movs	r3, #0
 808fca4:	9305      	str	r3, [sp, #20]
 808fca6:	e07e      	b.n	808fda6 <_strtod_l+0x616>
 808fca8:	07f2      	lsls	r2, r6, #31
 808fcaa:	d507      	bpl.n	808fcbc <_strtod_l+0x52c>
 808fcac:	4b1d      	ldr	r3, [pc, #116]	; (808fd24 <_strtod_l+0x594>)
 808fcae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 808fcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808fcb6:	f7fd fd75 	bl	808d7a4 <__aeabi_dmul>
 808fcba:	2301      	movs	r3, #1
 808fcbc:	3701      	adds	r7, #1
 808fcbe:	1076      	asrs	r6, r6, #1
 808fcc0:	e7ce      	b.n	808fc60 <_strtod_l+0x4d0>
 808fcc2:	d0ee      	beq.n	808fca2 <_strtod_l+0x512>
 808fcc4:	4276      	negs	r6, r6
 808fcc6:	f016 020f 	ands.w	r2, r6, #15
 808fcca:	d00a      	beq.n	808fce2 <_strtod_l+0x552>
 808fccc:	4b14      	ldr	r3, [pc, #80]	; (808fd20 <_strtod_l+0x590>)
 808fcce:	4640      	mov	r0, r8
 808fcd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808fcd4:	4649      	mov	r1, r9
 808fcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 808fcda:	f7fd fe8d 	bl	808d9f8 <__aeabi_ddiv>
 808fcde:	4680      	mov	r8, r0
 808fce0:	4689      	mov	r9, r1
 808fce2:	1136      	asrs	r6, r6, #4
 808fce4:	d0dd      	beq.n	808fca2 <_strtod_l+0x512>
 808fce6:	2e1f      	cmp	r6, #31
 808fce8:	dd24      	ble.n	808fd34 <_strtod_l+0x5a4>
 808fcea:	f04f 0b00 	mov.w	fp, #0
 808fcee:	f8cd b010 	str.w	fp, [sp, #16]
 808fcf2:	f8cd b020 	str.w	fp, [sp, #32]
 808fcf6:	f8cd b018 	str.w	fp, [sp, #24]
 808fcfa:	2322      	movs	r3, #34	; 0x22
 808fcfc:	f04f 0800 	mov.w	r8, #0
 808fd00:	f04f 0900 	mov.w	r9, #0
 808fd04:	f8ca 3000 	str.w	r3, [sl]
 808fd08:	e78c      	b.n	808fc24 <_strtod_l+0x494>
 808fd0a:	bf00      	nop
 808fd0c:	080946e1 	.word	0x080946e1
 808fd10:	080946a0 	.word	0x080946a0
 808fd14:	080943fd 	.word	0x080943fd
 808fd18:	08094685 	.word	0x08094685
 808fd1c:	080943b2 	.word	0x080943b2
 808fd20:	08094a78 	.word	0x08094a78
 808fd24:	08094a50 	.word	0x08094a50
 808fd28:	7ff00000 	.word	0x7ff00000
 808fd2c:	7ca00000 	.word	0x7ca00000
 808fd30:	7fefffff 	.word	0x7fefffff
 808fd34:	f016 0310 	ands.w	r3, r6, #16
 808fd38:	bf18      	it	ne
 808fd3a:	236a      	movne	r3, #106	; 0x6a
 808fd3c:	4640      	mov	r0, r8
 808fd3e:	9305      	str	r3, [sp, #20]
 808fd40:	4649      	mov	r1, r9
 808fd42:	2300      	movs	r3, #0
 808fd44:	4fb2      	ldr	r7, [pc, #712]	; (8090010 <_strtod_l+0x880>)
 808fd46:	07f2      	lsls	r2, r6, #31
 808fd48:	d504      	bpl.n	808fd54 <_strtod_l+0x5c4>
 808fd4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 808fd4e:	f7fd fd29 	bl	808d7a4 <__aeabi_dmul>
 808fd52:	2301      	movs	r3, #1
 808fd54:	1076      	asrs	r6, r6, #1
 808fd56:	f107 0708 	add.w	r7, r7, #8
 808fd5a:	d1f4      	bne.n	808fd46 <_strtod_l+0x5b6>
 808fd5c:	b10b      	cbz	r3, 808fd62 <_strtod_l+0x5d2>
 808fd5e:	4680      	mov	r8, r0
 808fd60:	4689      	mov	r9, r1
 808fd62:	9b05      	ldr	r3, [sp, #20]
 808fd64:	b1bb      	cbz	r3, 808fd96 <_strtod_l+0x606>
 808fd66:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808fd6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808fd6e:	2b00      	cmp	r3, #0
 808fd70:	4649      	mov	r1, r9
 808fd72:	dd10      	ble.n	808fd96 <_strtod_l+0x606>
 808fd74:	2b1f      	cmp	r3, #31
 808fd76:	f340 812b 	ble.w	808ffd0 <_strtod_l+0x840>
 808fd7a:	2b34      	cmp	r3, #52	; 0x34
 808fd7c:	bfd8      	it	le
 808fd7e:	f04f 32ff 	movle.w	r2, #4294967295
 808fd82:	f04f 0800 	mov.w	r8, #0
 808fd86:	bfcf      	iteee	gt
 808fd88:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808fd8c:	3b20      	suble	r3, #32
 808fd8e:	fa02 f303 	lslle.w	r3, r2, r3
 808fd92:	ea03 0901 	andle.w	r9, r3, r1
 808fd96:	2200      	movs	r2, #0
 808fd98:	2300      	movs	r3, #0
 808fd9a:	4640      	mov	r0, r8
 808fd9c:	4649      	mov	r1, r9
 808fd9e:	f7fd ff69 	bl	808dc74 <__aeabi_dcmpeq>
 808fda2:	2800      	cmp	r0, #0
 808fda4:	d1a1      	bne.n	808fcea <_strtod_l+0x55a>
 808fda6:	9b06      	ldr	r3, [sp, #24]
 808fda8:	465a      	mov	r2, fp
 808fdaa:	9300      	str	r3, [sp, #0]
 808fdac:	4650      	mov	r0, sl
 808fdae:	4623      	mov	r3, r4
 808fdb0:	9908      	ldr	r1, [sp, #32]
 808fdb2:	f001 fb58 	bl	8091466 <__s2b>
 808fdb6:	9008      	str	r0, [sp, #32]
 808fdb8:	2800      	cmp	r0, #0
 808fdba:	f43f af24 	beq.w	808fc06 <_strtod_l+0x476>
 808fdbe:	9b04      	ldr	r3, [sp, #16]
 808fdc0:	f04f 0b00 	mov.w	fp, #0
 808fdc4:	1b5d      	subs	r5, r3, r5
 808fdc6:	9b07      	ldr	r3, [sp, #28]
 808fdc8:	f8cd b010 	str.w	fp, [sp, #16]
 808fdcc:	2b00      	cmp	r3, #0
 808fdce:	bfb4      	ite	lt
 808fdd0:	462b      	movlt	r3, r5
 808fdd2:	2300      	movge	r3, #0
 808fdd4:	930e      	str	r3, [sp, #56]	; 0x38
 808fdd6:	9b07      	ldr	r3, [sp, #28]
 808fdd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 808fddc:	9316      	str	r3, [sp, #88]	; 0x58
 808fdde:	9b08      	ldr	r3, [sp, #32]
 808fde0:	4650      	mov	r0, sl
 808fde2:	6859      	ldr	r1, [r3, #4]
 808fde4:	f001 fab6 	bl	8091354 <_Balloc>
 808fde8:	9006      	str	r0, [sp, #24]
 808fdea:	2800      	cmp	r0, #0
 808fdec:	f43f af13 	beq.w	808fc16 <_strtod_l+0x486>
 808fdf0:	9b08      	ldr	r3, [sp, #32]
 808fdf2:	300c      	adds	r0, #12
 808fdf4:	691a      	ldr	r2, [r3, #16]
 808fdf6:	f103 010c 	add.w	r1, r3, #12
 808fdfa:	3202      	adds	r2, #2
 808fdfc:	0092      	lsls	r2, r2, #2
 808fdfe:	f7fe fe89 	bl	808eb14 <memcpy>
 808fe02:	ab1e      	add	r3, sp, #120	; 0x78
 808fe04:	9301      	str	r3, [sp, #4]
 808fe06:	ab1d      	add	r3, sp, #116	; 0x74
 808fe08:	9300      	str	r3, [sp, #0]
 808fe0a:	4642      	mov	r2, r8
 808fe0c:	464b      	mov	r3, r9
 808fe0e:	4650      	mov	r0, sl
 808fe10:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 808fe14:	f001 fe16 	bl	8091a44 <__d2b>
 808fe18:	901c      	str	r0, [sp, #112]	; 0x70
 808fe1a:	2800      	cmp	r0, #0
 808fe1c:	f43f aefb 	beq.w	808fc16 <_strtod_l+0x486>
 808fe20:	2101      	movs	r1, #1
 808fe22:	4650      	mov	r0, sl
 808fe24:	f001 fbab 	bl	809157e <__i2b>
 808fe28:	4603      	mov	r3, r0
 808fe2a:	9004      	str	r0, [sp, #16]
 808fe2c:	2800      	cmp	r0, #0
 808fe2e:	f43f aef2 	beq.w	808fc16 <_strtod_l+0x486>
 808fe32:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 808fe34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 808fe36:	2d00      	cmp	r5, #0
 808fe38:	bfab      	itete	ge
 808fe3a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 808fe3c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 808fe3e:	18ee      	addge	r6, r5, r3
 808fe40:	1b5c      	sublt	r4, r3, r5
 808fe42:	9b05      	ldr	r3, [sp, #20]
 808fe44:	bfa8      	it	ge
 808fe46:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 808fe48:	eba5 0503 	sub.w	r5, r5, r3
 808fe4c:	4415      	add	r5, r2
 808fe4e:	4b71      	ldr	r3, [pc, #452]	; (8090014 <_strtod_l+0x884>)
 808fe50:	f105 35ff 	add.w	r5, r5, #4294967295
 808fe54:	bfb8      	it	lt
 808fe56:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 808fe58:	429d      	cmp	r5, r3
 808fe5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 808fe5e:	f280 80c9 	bge.w	808fff4 <_strtod_l+0x864>
 808fe62:	1b5b      	subs	r3, r3, r5
 808fe64:	2b1f      	cmp	r3, #31
 808fe66:	f04f 0701 	mov.w	r7, #1
 808fe6a:	eba2 0203 	sub.w	r2, r2, r3
 808fe6e:	f300 80b6 	bgt.w	808ffde <_strtod_l+0x84e>
 808fe72:	2500      	movs	r5, #0
 808fe74:	fa07 f303 	lsl.w	r3, r7, r3
 808fe78:	930f      	str	r3, [sp, #60]	; 0x3c
 808fe7a:	18b7      	adds	r7, r6, r2
 808fe7c:	9b05      	ldr	r3, [sp, #20]
 808fe7e:	42be      	cmp	r6, r7
 808fe80:	4414      	add	r4, r2
 808fe82:	441c      	add	r4, r3
 808fe84:	4633      	mov	r3, r6
 808fe86:	bfa8      	it	ge
 808fe88:	463b      	movge	r3, r7
 808fe8a:	42a3      	cmp	r3, r4
 808fe8c:	bfa8      	it	ge
 808fe8e:	4623      	movge	r3, r4
 808fe90:	2b00      	cmp	r3, #0
 808fe92:	bfc2      	ittt	gt
 808fe94:	1aff      	subgt	r7, r7, r3
 808fe96:	1ae4      	subgt	r4, r4, r3
 808fe98:	1af6      	subgt	r6, r6, r3
 808fe9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808fe9c:	2b00      	cmp	r3, #0
 808fe9e:	dd17      	ble.n	808fed0 <_strtod_l+0x740>
 808fea0:	461a      	mov	r2, r3
 808fea2:	4650      	mov	r0, sl
 808fea4:	9904      	ldr	r1, [sp, #16]
 808fea6:	f001 fc0f 	bl	80916c8 <__pow5mult>
 808feaa:	9004      	str	r0, [sp, #16]
 808feac:	2800      	cmp	r0, #0
 808feae:	f43f aeb2 	beq.w	808fc16 <_strtod_l+0x486>
 808feb2:	4601      	mov	r1, r0
 808feb4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808feb6:	4650      	mov	r0, sl
 808feb8:	f001 fb6a 	bl	8091590 <__multiply>
 808febc:	9009      	str	r0, [sp, #36]	; 0x24
 808febe:	2800      	cmp	r0, #0
 808fec0:	f43f aea9 	beq.w	808fc16 <_strtod_l+0x486>
 808fec4:	4650      	mov	r0, sl
 808fec6:	991c      	ldr	r1, [sp, #112]	; 0x70
 808fec8:	f001 fa78 	bl	80913bc <_Bfree>
 808fecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808fece:	931c      	str	r3, [sp, #112]	; 0x70
 808fed0:	2f00      	cmp	r7, #0
 808fed2:	f300 8093 	bgt.w	808fffc <_strtod_l+0x86c>
 808fed6:	9b07      	ldr	r3, [sp, #28]
 808fed8:	2b00      	cmp	r3, #0
 808feda:	dd08      	ble.n	808feee <_strtod_l+0x75e>
 808fedc:	4650      	mov	r0, sl
 808fede:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808fee0:	9906      	ldr	r1, [sp, #24]
 808fee2:	f001 fbf1 	bl	80916c8 <__pow5mult>
 808fee6:	9006      	str	r0, [sp, #24]
 808fee8:	2800      	cmp	r0, #0
 808feea:	f43f ae94 	beq.w	808fc16 <_strtod_l+0x486>
 808feee:	2c00      	cmp	r4, #0
 808fef0:	dd08      	ble.n	808ff04 <_strtod_l+0x774>
 808fef2:	4622      	mov	r2, r4
 808fef4:	4650      	mov	r0, sl
 808fef6:	9906      	ldr	r1, [sp, #24]
 808fef8:	f001 fc34 	bl	8091764 <__lshift>
 808fefc:	9006      	str	r0, [sp, #24]
 808fefe:	2800      	cmp	r0, #0
 808ff00:	f43f ae89 	beq.w	808fc16 <_strtod_l+0x486>
 808ff04:	2e00      	cmp	r6, #0
 808ff06:	dd08      	ble.n	808ff1a <_strtod_l+0x78a>
 808ff08:	4632      	mov	r2, r6
 808ff0a:	4650      	mov	r0, sl
 808ff0c:	9904      	ldr	r1, [sp, #16]
 808ff0e:	f001 fc29 	bl	8091764 <__lshift>
 808ff12:	9004      	str	r0, [sp, #16]
 808ff14:	2800      	cmp	r0, #0
 808ff16:	f43f ae7e 	beq.w	808fc16 <_strtod_l+0x486>
 808ff1a:	4650      	mov	r0, sl
 808ff1c:	9a06      	ldr	r2, [sp, #24]
 808ff1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 808ff20:	f001 fc9a 	bl	8091858 <__mdiff>
 808ff24:	4683      	mov	fp, r0
 808ff26:	2800      	cmp	r0, #0
 808ff28:	f43f ae75 	beq.w	808fc16 <_strtod_l+0x486>
 808ff2c:	2400      	movs	r4, #0
 808ff2e:	68c3      	ldr	r3, [r0, #12]
 808ff30:	9904      	ldr	r1, [sp, #16]
 808ff32:	60c4      	str	r4, [r0, #12]
 808ff34:	930d      	str	r3, [sp, #52]	; 0x34
 808ff36:	f001 fc74 	bl	8091822 <__mcmp>
 808ff3a:	42a0      	cmp	r0, r4
 808ff3c:	da70      	bge.n	8090020 <_strtod_l+0x890>
 808ff3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808ff40:	ea53 0308 	orrs.w	r3, r3, r8
 808ff44:	f040 8096 	bne.w	8090074 <_strtod_l+0x8e4>
 808ff48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808ff4c:	2b00      	cmp	r3, #0
 808ff4e:	f040 8091 	bne.w	8090074 <_strtod_l+0x8e4>
 808ff52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808ff56:	0d1b      	lsrs	r3, r3, #20
 808ff58:	051b      	lsls	r3, r3, #20
 808ff5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808ff5e:	f240 8089 	bls.w	8090074 <_strtod_l+0x8e4>
 808ff62:	f8db 3014 	ldr.w	r3, [fp, #20]
 808ff66:	b923      	cbnz	r3, 808ff72 <_strtod_l+0x7e2>
 808ff68:	f8db 3010 	ldr.w	r3, [fp, #16]
 808ff6c:	2b01      	cmp	r3, #1
 808ff6e:	f340 8081 	ble.w	8090074 <_strtod_l+0x8e4>
 808ff72:	4659      	mov	r1, fp
 808ff74:	2201      	movs	r2, #1
 808ff76:	4650      	mov	r0, sl
 808ff78:	f001 fbf4 	bl	8091764 <__lshift>
 808ff7c:	9904      	ldr	r1, [sp, #16]
 808ff7e:	4683      	mov	fp, r0
 808ff80:	f001 fc4f 	bl	8091822 <__mcmp>
 808ff84:	2800      	cmp	r0, #0
 808ff86:	dd75      	ble.n	8090074 <_strtod_l+0x8e4>
 808ff88:	9905      	ldr	r1, [sp, #20]
 808ff8a:	464b      	mov	r3, r9
 808ff8c:	4a22      	ldr	r2, [pc, #136]	; (8090018 <_strtod_l+0x888>)
 808ff8e:	2900      	cmp	r1, #0
 808ff90:	f000 8091 	beq.w	80900b6 <_strtod_l+0x926>
 808ff94:	ea02 0109 	and.w	r1, r2, r9
 808ff98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 808ff9c:	f300 808b 	bgt.w	80900b6 <_strtod_l+0x926>
 808ffa0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 808ffa4:	f77f aea9 	ble.w	808fcfa <_strtod_l+0x56a>
 808ffa8:	2300      	movs	r3, #0
 808ffaa:	4a1c      	ldr	r2, [pc, #112]	; (809001c <_strtod_l+0x88c>)
 808ffac:	4640      	mov	r0, r8
 808ffae:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 808ffb2:	4649      	mov	r1, r9
 808ffb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 808ffb8:	f7fd fbf4 	bl	808d7a4 <__aeabi_dmul>
 808ffbc:	460b      	mov	r3, r1
 808ffbe:	4303      	orrs	r3, r0
 808ffc0:	bf08      	it	eq
 808ffc2:	2322      	moveq	r3, #34	; 0x22
 808ffc4:	4680      	mov	r8, r0
 808ffc6:	4689      	mov	r9, r1
 808ffc8:	bf08      	it	eq
 808ffca:	f8ca 3000 	streq.w	r3, [sl]
 808ffce:	e62d      	b.n	808fc2c <_strtod_l+0x49c>
 808ffd0:	f04f 32ff 	mov.w	r2, #4294967295
 808ffd4:	fa02 f303 	lsl.w	r3, r2, r3
 808ffd8:	ea03 0808 	and.w	r8, r3, r8
 808ffdc:	e6db      	b.n	808fd96 <_strtod_l+0x606>
 808ffde:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 808ffe2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 808ffe6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 808ffea:	35e2      	adds	r5, #226	; 0xe2
 808ffec:	fa07 f505 	lsl.w	r5, r7, r5
 808fff0:	970f      	str	r7, [sp, #60]	; 0x3c
 808fff2:	e742      	b.n	808fe7a <_strtod_l+0x6ea>
 808fff4:	2301      	movs	r3, #1
 808fff6:	2500      	movs	r5, #0
 808fff8:	930f      	str	r3, [sp, #60]	; 0x3c
 808fffa:	e73e      	b.n	808fe7a <_strtod_l+0x6ea>
 808fffc:	463a      	mov	r2, r7
 808fffe:	4650      	mov	r0, sl
 8090000:	991c      	ldr	r1, [sp, #112]	; 0x70
 8090002:	f001 fbaf 	bl	8091764 <__lshift>
 8090006:	901c      	str	r0, [sp, #112]	; 0x70
 8090008:	2800      	cmp	r0, #0
 809000a:	f47f af64 	bne.w	808fed6 <_strtod_l+0x746>
 809000e:	e602      	b.n	808fc16 <_strtod_l+0x486>
 8090010:	080946b8 	.word	0x080946b8
 8090014:	fffffc02 	.word	0xfffffc02
 8090018:	7ff00000 	.word	0x7ff00000
 809001c:	39500000 	.word	0x39500000
 8090020:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8090024:	d166      	bne.n	80900f4 <_strtod_l+0x964>
 8090026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8090028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 809002c:	b35a      	cbz	r2, 8090086 <_strtod_l+0x8f6>
 809002e:	4a9c      	ldr	r2, [pc, #624]	; (80902a0 <_strtod_l+0xb10>)
 8090030:	4293      	cmp	r3, r2
 8090032:	d12c      	bne.n	809008e <_strtod_l+0x8fe>
 8090034:	9b05      	ldr	r3, [sp, #20]
 8090036:	4640      	mov	r0, r8
 8090038:	b303      	cbz	r3, 809007c <_strtod_l+0x8ec>
 809003a:	464b      	mov	r3, r9
 809003c:	4a99      	ldr	r2, [pc, #612]	; (80902a4 <_strtod_l+0xb14>)
 809003e:	f04f 31ff 	mov.w	r1, #4294967295
 8090042:	401a      	ands	r2, r3
 8090044:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8090048:	d81b      	bhi.n	8090082 <_strtod_l+0x8f2>
 809004a:	0d12      	lsrs	r2, r2, #20
 809004c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8090050:	fa01 f303 	lsl.w	r3, r1, r3
 8090054:	4298      	cmp	r0, r3
 8090056:	d11a      	bne.n	809008e <_strtod_l+0x8fe>
 8090058:	4b93      	ldr	r3, [pc, #588]	; (80902a8 <_strtod_l+0xb18>)
 809005a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 809005c:	429a      	cmp	r2, r3
 809005e:	d102      	bne.n	8090066 <_strtod_l+0x8d6>
 8090060:	3001      	adds	r0, #1
 8090062:	f43f add8 	beq.w	808fc16 <_strtod_l+0x486>
 8090066:	f04f 0800 	mov.w	r8, #0
 809006a:	4b8e      	ldr	r3, [pc, #568]	; (80902a4 <_strtod_l+0xb14>)
 809006c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 809006e:	401a      	ands	r2, r3
 8090070:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8090074:	9b05      	ldr	r3, [sp, #20]
 8090076:	2b00      	cmp	r3, #0
 8090078:	d196      	bne.n	808ffa8 <_strtod_l+0x818>
 809007a:	e5d7      	b.n	808fc2c <_strtod_l+0x49c>
 809007c:	f04f 33ff 	mov.w	r3, #4294967295
 8090080:	e7e8      	b.n	8090054 <_strtod_l+0x8c4>
 8090082:	460b      	mov	r3, r1
 8090084:	e7e6      	b.n	8090054 <_strtod_l+0x8c4>
 8090086:	ea53 0308 	orrs.w	r3, r3, r8
 809008a:	f43f af7d 	beq.w	808ff88 <_strtod_l+0x7f8>
 809008e:	b1e5      	cbz	r5, 80900ca <_strtod_l+0x93a>
 8090090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8090092:	421d      	tst	r5, r3
 8090094:	d0ee      	beq.n	8090074 <_strtod_l+0x8e4>
 8090096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8090098:	4640      	mov	r0, r8
 809009a:	4649      	mov	r1, r9
 809009c:	9a05      	ldr	r2, [sp, #20]
 809009e:	b1c3      	cbz	r3, 80900d2 <_strtod_l+0x942>
 80900a0:	f7ff fb54 	bl	808f74c <sulp>
 80900a4:	4602      	mov	r2, r0
 80900a6:	460b      	mov	r3, r1
 80900a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80900ac:	f7fd f9c4 	bl	808d438 <__adddf3>
 80900b0:	4680      	mov	r8, r0
 80900b2:	4689      	mov	r9, r1
 80900b4:	e7de      	b.n	8090074 <_strtod_l+0x8e4>
 80900b6:	4013      	ands	r3, r2
 80900b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80900bc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80900c0:	f04f 38ff 	mov.w	r8, #4294967295
 80900c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80900c8:	e7d4      	b.n	8090074 <_strtod_l+0x8e4>
 80900ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80900cc:	ea13 0f08 	tst.w	r3, r8
 80900d0:	e7e0      	b.n	8090094 <_strtod_l+0x904>
 80900d2:	f7ff fb3b 	bl	808f74c <sulp>
 80900d6:	4602      	mov	r2, r0
 80900d8:	460b      	mov	r3, r1
 80900da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80900de:	f7fd f9a9 	bl	808d434 <__aeabi_dsub>
 80900e2:	2200      	movs	r2, #0
 80900e4:	2300      	movs	r3, #0
 80900e6:	4680      	mov	r8, r0
 80900e8:	4689      	mov	r9, r1
 80900ea:	f7fd fdc3 	bl	808dc74 <__aeabi_dcmpeq>
 80900ee:	2800      	cmp	r0, #0
 80900f0:	d0c0      	beq.n	8090074 <_strtod_l+0x8e4>
 80900f2:	e602      	b.n	808fcfa <_strtod_l+0x56a>
 80900f4:	4658      	mov	r0, fp
 80900f6:	9904      	ldr	r1, [sp, #16]
 80900f8:	f001 fcf3 	bl	8091ae2 <__ratio>
 80900fc:	2200      	movs	r2, #0
 80900fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8090102:	4606      	mov	r6, r0
 8090104:	460f      	mov	r7, r1
 8090106:	f7fd fdc9 	bl	808dc9c <__aeabi_dcmple>
 809010a:	2800      	cmp	r0, #0
 809010c:	d075      	beq.n	80901fa <_strtod_l+0xa6a>
 809010e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8090110:	2b00      	cmp	r3, #0
 8090112:	d047      	beq.n	80901a4 <_strtod_l+0xa14>
 8090114:	2600      	movs	r6, #0
 8090116:	4f65      	ldr	r7, [pc, #404]	; (80902ac <_strtod_l+0xb1c>)
 8090118:	4d64      	ldr	r5, [pc, #400]	; (80902ac <_strtod_l+0xb1c>)
 809011a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 809011c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8090120:	0d1b      	lsrs	r3, r3, #20
 8090122:	051b      	lsls	r3, r3, #20
 8090124:	930f      	str	r3, [sp, #60]	; 0x3c
 8090126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8090128:	4b61      	ldr	r3, [pc, #388]	; (80902b0 <_strtod_l+0xb20>)
 809012a:	429a      	cmp	r2, r3
 809012c:	f040 80c8 	bne.w	80902c0 <_strtod_l+0xb30>
 8090130:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8090134:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8090138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 809013a:	4640      	mov	r0, r8
 809013c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8090140:	4649      	mov	r1, r9
 8090142:	f001 fc05 	bl	8091950 <__ulp>
 8090146:	4602      	mov	r2, r0
 8090148:	460b      	mov	r3, r1
 809014a:	4630      	mov	r0, r6
 809014c:	4639      	mov	r1, r7
 809014e:	f7fd fb29 	bl	808d7a4 <__aeabi_dmul>
 8090152:	4642      	mov	r2, r8
 8090154:	464b      	mov	r3, r9
 8090156:	f7fd f96f 	bl	808d438 <__adddf3>
 809015a:	460b      	mov	r3, r1
 809015c:	4951      	ldr	r1, [pc, #324]	; (80902a4 <_strtod_l+0xb14>)
 809015e:	4a55      	ldr	r2, [pc, #340]	; (80902b4 <_strtod_l+0xb24>)
 8090160:	4019      	ands	r1, r3
 8090162:	4291      	cmp	r1, r2
 8090164:	4680      	mov	r8, r0
 8090166:	d95e      	bls.n	8090226 <_strtod_l+0xa96>
 8090168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 809016a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 809016e:	4293      	cmp	r3, r2
 8090170:	d103      	bne.n	809017a <_strtod_l+0x9ea>
 8090172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090174:	3301      	adds	r3, #1
 8090176:	f43f ad4e 	beq.w	808fc16 <_strtod_l+0x486>
 809017a:	f04f 38ff 	mov.w	r8, #4294967295
 809017e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80902a8 <_strtod_l+0xb18>
 8090182:	4650      	mov	r0, sl
 8090184:	991c      	ldr	r1, [sp, #112]	; 0x70
 8090186:	f001 f919 	bl	80913bc <_Bfree>
 809018a:	4650      	mov	r0, sl
 809018c:	9906      	ldr	r1, [sp, #24]
 809018e:	f001 f915 	bl	80913bc <_Bfree>
 8090192:	4650      	mov	r0, sl
 8090194:	9904      	ldr	r1, [sp, #16]
 8090196:	f001 f911 	bl	80913bc <_Bfree>
 809019a:	4659      	mov	r1, fp
 809019c:	4650      	mov	r0, sl
 809019e:	f001 f90d 	bl	80913bc <_Bfree>
 80901a2:	e61c      	b.n	808fdde <_strtod_l+0x64e>
 80901a4:	f1b8 0f00 	cmp.w	r8, #0
 80901a8:	d119      	bne.n	80901de <_strtod_l+0xa4e>
 80901aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80901ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80901b0:	b9e3      	cbnz	r3, 80901ec <_strtod_l+0xa5c>
 80901b2:	2200      	movs	r2, #0
 80901b4:	4630      	mov	r0, r6
 80901b6:	4639      	mov	r1, r7
 80901b8:	4b3c      	ldr	r3, [pc, #240]	; (80902ac <_strtod_l+0xb1c>)
 80901ba:	f7fd fd65 	bl	808dc88 <__aeabi_dcmplt>
 80901be:	b9c8      	cbnz	r0, 80901f4 <_strtod_l+0xa64>
 80901c0:	2200      	movs	r2, #0
 80901c2:	4630      	mov	r0, r6
 80901c4:	4639      	mov	r1, r7
 80901c6:	4b3c      	ldr	r3, [pc, #240]	; (80902b8 <_strtod_l+0xb28>)
 80901c8:	f7fd faec 	bl	808d7a4 <__aeabi_dmul>
 80901cc:	4604      	mov	r4, r0
 80901ce:	460d      	mov	r5, r1
 80901d0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80901d4:	9418      	str	r4, [sp, #96]	; 0x60
 80901d6:	9319      	str	r3, [sp, #100]	; 0x64
 80901d8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80901dc:	e79d      	b.n	809011a <_strtod_l+0x98a>
 80901de:	f1b8 0f01 	cmp.w	r8, #1
 80901e2:	d103      	bne.n	80901ec <_strtod_l+0xa5c>
 80901e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80901e6:	2b00      	cmp	r3, #0
 80901e8:	f43f ad87 	beq.w	808fcfa <_strtod_l+0x56a>
 80901ec:	2600      	movs	r6, #0
 80901ee:	2400      	movs	r4, #0
 80901f0:	4f32      	ldr	r7, [pc, #200]	; (80902bc <_strtod_l+0xb2c>)
 80901f2:	e791      	b.n	8090118 <_strtod_l+0x988>
 80901f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80901f6:	4d30      	ldr	r5, [pc, #192]	; (80902b8 <_strtod_l+0xb28>)
 80901f8:	e7ea      	b.n	80901d0 <_strtod_l+0xa40>
 80901fa:	4b2f      	ldr	r3, [pc, #188]	; (80902b8 <_strtod_l+0xb28>)
 80901fc:	2200      	movs	r2, #0
 80901fe:	4630      	mov	r0, r6
 8090200:	4639      	mov	r1, r7
 8090202:	f7fd facf 	bl	808d7a4 <__aeabi_dmul>
 8090206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8090208:	4604      	mov	r4, r0
 809020a:	460d      	mov	r5, r1
 809020c:	b933      	cbnz	r3, 809021c <_strtod_l+0xa8c>
 809020e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8090212:	9010      	str	r0, [sp, #64]	; 0x40
 8090214:	9311      	str	r3, [sp, #68]	; 0x44
 8090216:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 809021a:	e77e      	b.n	809011a <_strtod_l+0x98a>
 809021c:	4602      	mov	r2, r0
 809021e:	460b      	mov	r3, r1
 8090220:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8090224:	e7f7      	b.n	8090216 <_strtod_l+0xa86>
 8090226:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 809022a:	9b05      	ldr	r3, [sp, #20]
 809022c:	2b00      	cmp	r3, #0
 809022e:	d1a8      	bne.n	8090182 <_strtod_l+0x9f2>
 8090230:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8090234:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8090236:	0d1b      	lsrs	r3, r3, #20
 8090238:	051b      	lsls	r3, r3, #20
 809023a:	429a      	cmp	r2, r3
 809023c:	d1a1      	bne.n	8090182 <_strtod_l+0x9f2>
 809023e:	4620      	mov	r0, r4
 8090240:	4629      	mov	r1, r5
 8090242:	f001 fce7 	bl	8091c14 <__aeabi_d2lz>
 8090246:	f7fd fa7f 	bl	808d748 <__aeabi_l2d>
 809024a:	4602      	mov	r2, r0
 809024c:	460b      	mov	r3, r1
 809024e:	4620      	mov	r0, r4
 8090250:	4629      	mov	r1, r5
 8090252:	f7fd f8ef 	bl	808d434 <__aeabi_dsub>
 8090256:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8090258:	f3c9 0313 	ubfx	r3, r9, #0, #20
 809025c:	ea43 0308 	orr.w	r3, r3, r8
 8090260:	4313      	orrs	r3, r2
 8090262:	4604      	mov	r4, r0
 8090264:	460d      	mov	r5, r1
 8090266:	d066      	beq.n	8090336 <_strtod_l+0xba6>
 8090268:	a309      	add	r3, pc, #36	; (adr r3, 8090290 <_strtod_l+0xb00>)
 809026a:	e9d3 2300 	ldrd	r2, r3, [r3]
 809026e:	f7fd fd0b 	bl	808dc88 <__aeabi_dcmplt>
 8090272:	2800      	cmp	r0, #0
 8090274:	f47f acda 	bne.w	808fc2c <_strtod_l+0x49c>
 8090278:	a307      	add	r3, pc, #28	; (adr r3, 8090298 <_strtod_l+0xb08>)
 809027a:	e9d3 2300 	ldrd	r2, r3, [r3]
 809027e:	4620      	mov	r0, r4
 8090280:	4629      	mov	r1, r5
 8090282:	f7fd fd1f 	bl	808dcc4 <__aeabi_dcmpgt>
 8090286:	2800      	cmp	r0, #0
 8090288:	f43f af7b 	beq.w	8090182 <_strtod_l+0x9f2>
 809028c:	e4ce      	b.n	808fc2c <_strtod_l+0x49c>
 809028e:	bf00      	nop
 8090290:	94a03595 	.word	0x94a03595
 8090294:	3fdfffff 	.word	0x3fdfffff
 8090298:	35afe535 	.word	0x35afe535
 809029c:	3fe00000 	.word	0x3fe00000
 80902a0:	000fffff 	.word	0x000fffff
 80902a4:	7ff00000 	.word	0x7ff00000
 80902a8:	7fefffff 	.word	0x7fefffff
 80902ac:	3ff00000 	.word	0x3ff00000
 80902b0:	7fe00000 	.word	0x7fe00000
 80902b4:	7c9fffff 	.word	0x7c9fffff
 80902b8:	3fe00000 	.word	0x3fe00000
 80902bc:	bff00000 	.word	0xbff00000
 80902c0:	9b05      	ldr	r3, [sp, #20]
 80902c2:	b313      	cbz	r3, 809030a <_strtod_l+0xb7a>
 80902c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80902c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80902ca:	d81e      	bhi.n	809030a <_strtod_l+0xb7a>
 80902cc:	a326      	add	r3, pc, #152	; (adr r3, 8090368 <_strtod_l+0xbd8>)
 80902ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80902d2:	4620      	mov	r0, r4
 80902d4:	4629      	mov	r1, r5
 80902d6:	f7fd fce1 	bl	808dc9c <__aeabi_dcmple>
 80902da:	b190      	cbz	r0, 8090302 <_strtod_l+0xb72>
 80902dc:	4629      	mov	r1, r5
 80902de:	4620      	mov	r0, r4
 80902e0:	f7fd fd38 	bl	808dd54 <__aeabi_d2uiz>
 80902e4:	2801      	cmp	r0, #1
 80902e6:	bf38      	it	cc
 80902e8:	2001      	movcc	r0, #1
 80902ea:	f7fd f9e1 	bl	808d6b0 <__aeabi_ui2d>
 80902ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80902f0:	4604      	mov	r4, r0
 80902f2:	460d      	mov	r5, r1
 80902f4:	b9d3      	cbnz	r3, 809032c <_strtod_l+0xb9c>
 80902f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80902fa:	9012      	str	r0, [sp, #72]	; 0x48
 80902fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80902fe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8090302:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8090304:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8090308:	1a9f      	subs	r7, r3, r2
 809030a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 809030e:	f001 fb1f 	bl	8091950 <__ulp>
 8090312:	4602      	mov	r2, r0
 8090314:	460b      	mov	r3, r1
 8090316:	4630      	mov	r0, r6
 8090318:	4639      	mov	r1, r7
 809031a:	f7fd fa43 	bl	808d7a4 <__aeabi_dmul>
 809031e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8090322:	f7fd f889 	bl	808d438 <__adddf3>
 8090326:	4680      	mov	r8, r0
 8090328:	4689      	mov	r9, r1
 809032a:	e77e      	b.n	809022a <_strtod_l+0xa9a>
 809032c:	4602      	mov	r2, r0
 809032e:	460b      	mov	r3, r1
 8090330:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8090334:	e7e3      	b.n	80902fe <_strtod_l+0xb6e>
 8090336:	a30e      	add	r3, pc, #56	; (adr r3, 8090370 <_strtod_l+0xbe0>)
 8090338:	e9d3 2300 	ldrd	r2, r3, [r3]
 809033c:	f7fd fca4 	bl	808dc88 <__aeabi_dcmplt>
 8090340:	e7a1      	b.n	8090286 <_strtod_l+0xaf6>
 8090342:	2300      	movs	r3, #0
 8090344:	930c      	str	r3, [sp, #48]	; 0x30
 8090346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8090348:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 809034a:	6013      	str	r3, [r2, #0]
 809034c:	f7ff ba65 	b.w	808f81a <_strtod_l+0x8a>
 8090350:	2b65      	cmp	r3, #101	; 0x65
 8090352:	f43f ab5c 	beq.w	808fa0e <_strtod_l+0x27e>
 8090356:	2b45      	cmp	r3, #69	; 0x45
 8090358:	f43f ab59 	beq.w	808fa0e <_strtod_l+0x27e>
 809035c:	2201      	movs	r2, #1
 809035e:	f7ff bb8d 	b.w	808fa7c <_strtod_l+0x2ec>
 8090362:	bf00      	nop
 8090364:	f3af 8000 	nop.w
 8090368:	ffc00000 	.word	0xffc00000
 809036c:	41dfffff 	.word	0x41dfffff
 8090370:	94a03595 	.word	0x94a03595
 8090374:	3fcfffff 	.word	0x3fcfffff

08090378 <strtod>:
 8090378:	460a      	mov	r2, r1
 809037a:	4601      	mov	r1, r0
 809037c:	4802      	ldr	r0, [pc, #8]	; (8090388 <strtod+0x10>)
 809037e:	4b03      	ldr	r3, [pc, #12]	; (809038c <strtod+0x14>)
 8090380:	6800      	ldr	r0, [r0, #0]
 8090382:	f7ff ba05 	b.w	808f790 <_strtod_l>
 8090386:	bf00      	nop
 8090388:	200000e8 	.word	0x200000e8
 809038c:	200001b4 	.word	0x200001b4

08090390 <__strtok_r>:
 8090390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8090392:	b908      	cbnz	r0, 8090398 <__strtok_r+0x8>
 8090394:	6810      	ldr	r0, [r2, #0]
 8090396:	b188      	cbz	r0, 80903bc <__strtok_r+0x2c>
 8090398:	4604      	mov	r4, r0
 809039a:	460f      	mov	r7, r1
 809039c:	4620      	mov	r0, r4
 809039e:	f814 5b01 	ldrb.w	r5, [r4], #1
 80903a2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80903a6:	b91e      	cbnz	r6, 80903b0 <__strtok_r+0x20>
 80903a8:	b965      	cbnz	r5, 80903c4 <__strtok_r+0x34>
 80903aa:	4628      	mov	r0, r5
 80903ac:	6015      	str	r5, [r2, #0]
 80903ae:	e005      	b.n	80903bc <__strtok_r+0x2c>
 80903b0:	42b5      	cmp	r5, r6
 80903b2:	d1f6      	bne.n	80903a2 <__strtok_r+0x12>
 80903b4:	2b00      	cmp	r3, #0
 80903b6:	d1f0      	bne.n	809039a <__strtok_r+0xa>
 80903b8:	6014      	str	r4, [r2, #0]
 80903ba:	7003      	strb	r3, [r0, #0]
 80903bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80903be:	461c      	mov	r4, r3
 80903c0:	e00c      	b.n	80903dc <__strtok_r+0x4c>
 80903c2:	b915      	cbnz	r5, 80903ca <__strtok_r+0x3a>
 80903c4:	460e      	mov	r6, r1
 80903c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80903ca:	f816 5b01 	ldrb.w	r5, [r6], #1
 80903ce:	42ab      	cmp	r3, r5
 80903d0:	d1f7      	bne.n	80903c2 <__strtok_r+0x32>
 80903d2:	2b00      	cmp	r3, #0
 80903d4:	d0f3      	beq.n	80903be <__strtok_r+0x2e>
 80903d6:	2300      	movs	r3, #0
 80903d8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80903dc:	6014      	str	r4, [r2, #0]
 80903de:	e7ed      	b.n	80903bc <__strtok_r+0x2c>

080903e0 <strtok_r>:
 80903e0:	2301      	movs	r3, #1
 80903e2:	f7ff bfd5 	b.w	8090390 <__strtok_r>
	...

080903e8 <_strtol_l.isra.0>:
 80903e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80903ec:	468c      	mov	ip, r1
 80903ee:	4686      	mov	lr, r0
 80903f0:	4e39      	ldr	r6, [pc, #228]	; (80904d8 <_strtol_l.isra.0+0xf0>)
 80903f2:	4660      	mov	r0, ip
 80903f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80903f8:	5da5      	ldrb	r5, [r4, r6]
 80903fa:	f015 0508 	ands.w	r5, r5, #8
 80903fe:	d1f8      	bne.n	80903f2 <_strtol_l.isra.0+0xa>
 8090400:	2c2d      	cmp	r4, #45	; 0x2d
 8090402:	d133      	bne.n	809046c <_strtol_l.isra.0+0x84>
 8090404:	f04f 0801 	mov.w	r8, #1
 8090408:	f89c 4000 	ldrb.w	r4, [ip]
 809040c:	f100 0c02 	add.w	ip, r0, #2
 8090410:	2b00      	cmp	r3, #0
 8090412:	d05c      	beq.n	80904ce <_strtol_l.isra.0+0xe6>
 8090414:	2b10      	cmp	r3, #16
 8090416:	d10c      	bne.n	8090432 <_strtol_l.isra.0+0x4a>
 8090418:	2c30      	cmp	r4, #48	; 0x30
 809041a:	d10a      	bne.n	8090432 <_strtol_l.isra.0+0x4a>
 809041c:	f89c 0000 	ldrb.w	r0, [ip]
 8090420:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8090424:	2858      	cmp	r0, #88	; 0x58
 8090426:	d14d      	bne.n	80904c4 <_strtol_l.isra.0+0xdc>
 8090428:	2310      	movs	r3, #16
 809042a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 809042e:	f10c 0c02 	add.w	ip, ip, #2
 8090432:	2600      	movs	r6, #0
 8090434:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8090438:	3f01      	subs	r7, #1
 809043a:	fbb7 f9f3 	udiv	r9, r7, r3
 809043e:	4630      	mov	r0, r6
 8090440:	fb03 7a19 	mls	sl, r3, r9, r7
 8090444:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8090448:	2d09      	cmp	r5, #9
 809044a:	d818      	bhi.n	809047e <_strtol_l.isra.0+0x96>
 809044c:	462c      	mov	r4, r5
 809044e:	42a3      	cmp	r3, r4
 8090450:	dd24      	ble.n	809049c <_strtol_l.isra.0+0xb4>
 8090452:	1c75      	adds	r5, r6, #1
 8090454:	d007      	beq.n	8090466 <_strtol_l.isra.0+0x7e>
 8090456:	4581      	cmp	r9, r0
 8090458:	d31d      	bcc.n	8090496 <_strtol_l.isra.0+0xae>
 809045a:	d101      	bne.n	8090460 <_strtol_l.isra.0+0x78>
 809045c:	45a2      	cmp	sl, r4
 809045e:	db1a      	blt.n	8090496 <_strtol_l.isra.0+0xae>
 8090460:	2601      	movs	r6, #1
 8090462:	fb00 4003 	mla	r0, r0, r3, r4
 8090466:	f81c 4b01 	ldrb.w	r4, [ip], #1
 809046a:	e7eb      	b.n	8090444 <_strtol_l.isra.0+0x5c>
 809046c:	2c2b      	cmp	r4, #43	; 0x2b
 809046e:	bf08      	it	eq
 8090470:	f89c 4000 	ldrbeq.w	r4, [ip]
 8090474:	46a8      	mov	r8, r5
 8090476:	bf08      	it	eq
 8090478:	f100 0c02 	addeq.w	ip, r0, #2
 809047c:	e7c8      	b.n	8090410 <_strtol_l.isra.0+0x28>
 809047e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8090482:	2d19      	cmp	r5, #25
 8090484:	d801      	bhi.n	809048a <_strtol_l.isra.0+0xa2>
 8090486:	3c37      	subs	r4, #55	; 0x37
 8090488:	e7e1      	b.n	809044e <_strtol_l.isra.0+0x66>
 809048a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 809048e:	2d19      	cmp	r5, #25
 8090490:	d804      	bhi.n	809049c <_strtol_l.isra.0+0xb4>
 8090492:	3c57      	subs	r4, #87	; 0x57
 8090494:	e7db      	b.n	809044e <_strtol_l.isra.0+0x66>
 8090496:	f04f 36ff 	mov.w	r6, #4294967295
 809049a:	e7e4      	b.n	8090466 <_strtol_l.isra.0+0x7e>
 809049c:	1c73      	adds	r3, r6, #1
 809049e:	d106      	bne.n	80904ae <_strtol_l.isra.0+0xc6>
 80904a0:	2322      	movs	r3, #34	; 0x22
 80904a2:	4638      	mov	r0, r7
 80904a4:	f8ce 3000 	str.w	r3, [lr]
 80904a8:	b942      	cbnz	r2, 80904bc <_strtol_l.isra.0+0xd4>
 80904aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80904ae:	f1b8 0f00 	cmp.w	r8, #0
 80904b2:	d000      	beq.n	80904b6 <_strtol_l.isra.0+0xce>
 80904b4:	4240      	negs	r0, r0
 80904b6:	2a00      	cmp	r2, #0
 80904b8:	d0f7      	beq.n	80904aa <_strtol_l.isra.0+0xc2>
 80904ba:	b10e      	cbz	r6, 80904c0 <_strtol_l.isra.0+0xd8>
 80904bc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80904c0:	6011      	str	r1, [r2, #0]
 80904c2:	e7f2      	b.n	80904aa <_strtol_l.isra.0+0xc2>
 80904c4:	2430      	movs	r4, #48	; 0x30
 80904c6:	2b00      	cmp	r3, #0
 80904c8:	d1b3      	bne.n	8090432 <_strtol_l.isra.0+0x4a>
 80904ca:	2308      	movs	r3, #8
 80904cc:	e7b1      	b.n	8090432 <_strtol_l.isra.0+0x4a>
 80904ce:	2c30      	cmp	r4, #48	; 0x30
 80904d0:	d0a4      	beq.n	809041c <_strtol_l.isra.0+0x34>
 80904d2:	230a      	movs	r3, #10
 80904d4:	e7ad      	b.n	8090432 <_strtol_l.isra.0+0x4a>
 80904d6:	bf00      	nop
 80904d8:	08094939 	.word	0x08094939

080904dc <strtol>:
 80904dc:	4613      	mov	r3, r2
 80904de:	460a      	mov	r2, r1
 80904e0:	4601      	mov	r1, r0
 80904e2:	4802      	ldr	r0, [pc, #8]	; (80904ec <strtol+0x10>)
 80904e4:	6800      	ldr	r0, [r0, #0]
 80904e6:	f7ff bf7f 	b.w	80903e8 <_strtol_l.isra.0>
 80904ea:	bf00      	nop
 80904ec:	200000e8 	.word	0x200000e8

080904f0 <_strtoul_l.isra.0>:
 80904f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80904f4:	468c      	mov	ip, r1
 80904f6:	4686      	mov	lr, r0
 80904f8:	4e3a      	ldr	r6, [pc, #232]	; (80905e4 <_strtoul_l.isra.0+0xf4>)
 80904fa:	4660      	mov	r0, ip
 80904fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8090500:	5da5      	ldrb	r5, [r4, r6]
 8090502:	f015 0508 	ands.w	r5, r5, #8
 8090506:	d1f8      	bne.n	80904fa <_strtoul_l.isra.0+0xa>
 8090508:	2c2d      	cmp	r4, #45	; 0x2d
 809050a:	d134      	bne.n	8090576 <_strtoul_l.isra.0+0x86>
 809050c:	f04f 0801 	mov.w	r8, #1
 8090510:	f89c 4000 	ldrb.w	r4, [ip]
 8090514:	f100 0c02 	add.w	ip, r0, #2
 8090518:	2b00      	cmp	r3, #0
 809051a:	d05e      	beq.n	80905da <_strtoul_l.isra.0+0xea>
 809051c:	2b10      	cmp	r3, #16
 809051e:	d10c      	bne.n	809053a <_strtoul_l.isra.0+0x4a>
 8090520:	2c30      	cmp	r4, #48	; 0x30
 8090522:	d10a      	bne.n	809053a <_strtoul_l.isra.0+0x4a>
 8090524:	f89c 0000 	ldrb.w	r0, [ip]
 8090528:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 809052c:	2858      	cmp	r0, #88	; 0x58
 809052e:	d14f      	bne.n	80905d0 <_strtoul_l.isra.0+0xe0>
 8090530:	2310      	movs	r3, #16
 8090532:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8090536:	f10c 0c02 	add.w	ip, ip, #2
 809053a:	f04f 37ff 	mov.w	r7, #4294967295
 809053e:	fbb7 f7f3 	udiv	r7, r7, r3
 8090542:	2500      	movs	r5, #0
 8090544:	fb03 f907 	mul.w	r9, r3, r7
 8090548:	4628      	mov	r0, r5
 809054a:	ea6f 0909 	mvn.w	r9, r9
 809054e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8090552:	2e09      	cmp	r6, #9
 8090554:	d818      	bhi.n	8090588 <_strtoul_l.isra.0+0x98>
 8090556:	4634      	mov	r4, r6
 8090558:	42a3      	cmp	r3, r4
 809055a:	dd24      	ble.n	80905a6 <_strtoul_l.isra.0+0xb6>
 809055c:	2d00      	cmp	r5, #0
 809055e:	db1f      	blt.n	80905a0 <_strtoul_l.isra.0+0xb0>
 8090560:	4287      	cmp	r7, r0
 8090562:	d31d      	bcc.n	80905a0 <_strtoul_l.isra.0+0xb0>
 8090564:	d101      	bne.n	809056a <_strtoul_l.isra.0+0x7a>
 8090566:	45a1      	cmp	r9, r4
 8090568:	db1a      	blt.n	80905a0 <_strtoul_l.isra.0+0xb0>
 809056a:	2501      	movs	r5, #1
 809056c:	fb00 4003 	mla	r0, r0, r3, r4
 8090570:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8090574:	e7eb      	b.n	809054e <_strtoul_l.isra.0+0x5e>
 8090576:	2c2b      	cmp	r4, #43	; 0x2b
 8090578:	bf08      	it	eq
 809057a:	f89c 4000 	ldrbeq.w	r4, [ip]
 809057e:	46a8      	mov	r8, r5
 8090580:	bf08      	it	eq
 8090582:	f100 0c02 	addeq.w	ip, r0, #2
 8090586:	e7c7      	b.n	8090518 <_strtoul_l.isra.0+0x28>
 8090588:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 809058c:	2e19      	cmp	r6, #25
 809058e:	d801      	bhi.n	8090594 <_strtoul_l.isra.0+0xa4>
 8090590:	3c37      	subs	r4, #55	; 0x37
 8090592:	e7e1      	b.n	8090558 <_strtoul_l.isra.0+0x68>
 8090594:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8090598:	2e19      	cmp	r6, #25
 809059a:	d804      	bhi.n	80905a6 <_strtoul_l.isra.0+0xb6>
 809059c:	3c57      	subs	r4, #87	; 0x57
 809059e:	e7db      	b.n	8090558 <_strtoul_l.isra.0+0x68>
 80905a0:	f04f 35ff 	mov.w	r5, #4294967295
 80905a4:	e7e4      	b.n	8090570 <_strtoul_l.isra.0+0x80>
 80905a6:	2d00      	cmp	r5, #0
 80905a8:	da07      	bge.n	80905ba <_strtoul_l.isra.0+0xca>
 80905aa:	2322      	movs	r3, #34	; 0x22
 80905ac:	f04f 30ff 	mov.w	r0, #4294967295
 80905b0:	f8ce 3000 	str.w	r3, [lr]
 80905b4:	b942      	cbnz	r2, 80905c8 <_strtoul_l.isra.0+0xd8>
 80905b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80905ba:	f1b8 0f00 	cmp.w	r8, #0
 80905be:	d000      	beq.n	80905c2 <_strtoul_l.isra.0+0xd2>
 80905c0:	4240      	negs	r0, r0
 80905c2:	2a00      	cmp	r2, #0
 80905c4:	d0f7      	beq.n	80905b6 <_strtoul_l.isra.0+0xc6>
 80905c6:	b10d      	cbz	r5, 80905cc <_strtoul_l.isra.0+0xdc>
 80905c8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80905cc:	6011      	str	r1, [r2, #0]
 80905ce:	e7f2      	b.n	80905b6 <_strtoul_l.isra.0+0xc6>
 80905d0:	2430      	movs	r4, #48	; 0x30
 80905d2:	2b00      	cmp	r3, #0
 80905d4:	d1b1      	bne.n	809053a <_strtoul_l.isra.0+0x4a>
 80905d6:	2308      	movs	r3, #8
 80905d8:	e7af      	b.n	809053a <_strtoul_l.isra.0+0x4a>
 80905da:	2c30      	cmp	r4, #48	; 0x30
 80905dc:	d0a2      	beq.n	8090524 <_strtoul_l.isra.0+0x34>
 80905de:	230a      	movs	r3, #10
 80905e0:	e7ab      	b.n	809053a <_strtoul_l.isra.0+0x4a>
 80905e2:	bf00      	nop
 80905e4:	08094939 	.word	0x08094939

080905e8 <strtoul>:
 80905e8:	4613      	mov	r3, r2
 80905ea:	460a      	mov	r2, r1
 80905ec:	4601      	mov	r1, r0
 80905ee:	4802      	ldr	r0, [pc, #8]	; (80905f8 <strtoul+0x10>)
 80905f0:	6800      	ldr	r0, [r0, #0]
 80905f2:	f7ff bf7d 	b.w	80904f0 <_strtoul_l.isra.0>
 80905f6:	bf00      	nop
 80905f8:	200000e8 	.word	0x200000e8

080905fc <toupper>:
 80905fc:	4b03      	ldr	r3, [pc, #12]	; (809060c <toupper+0x10>)
 80905fe:	5cc3      	ldrb	r3, [r0, r3]
 8090600:	f003 0303 	and.w	r3, r3, #3
 8090604:	2b02      	cmp	r3, #2
 8090606:	bf08      	it	eq
 8090608:	3820      	subeq	r0, #32
 809060a:	4770      	bx	lr
 809060c:	08094939 	.word	0x08094939

08090610 <__tzcalc_limits>:
 8090610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090614:	4680      	mov	r8, r0
 8090616:	f000 fdcf 	bl	80911b8 <__gettzinfo>
 809061a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 809061e:	4598      	cmp	r8, r3
 8090620:	f340 8097 	ble.w	8090752 <__tzcalc_limits+0x142>
 8090624:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8090628:	f240 126d 	movw	r2, #365	; 0x16d
 809062c:	4443      	add	r3, r8
 809062e:	109b      	asrs	r3, r3, #2
 8090630:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8090634:	fb02 3505 	mla	r5, r2, r5, r3
 8090638:	f06f 0263 	mvn.w	r2, #99	; 0x63
 809063c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8090640:	fb93 f3f2 	sdiv	r3, r3, r2
 8090644:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8090648:	441d      	add	r5, r3
 809064a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 809064e:	4442      	add	r2, r8
 8090650:	fbb2 f2f3 	udiv	r2, r2, r3
 8090654:	fb98 f7f3 	sdiv	r7, r8, r3
 8090658:	4415      	add	r5, r2
 809065a:	2264      	movs	r2, #100	; 0x64
 809065c:	fb03 8717 	mls	r7, r3, r7, r8
 8090660:	fb98 f6f2 	sdiv	r6, r8, r2
 8090664:	fab7 fc87 	clz	ip, r7
 8090668:	4604      	mov	r4, r0
 809066a:	f04f 0e07 	mov.w	lr, #7
 809066e:	fb02 8616 	mls	r6, r2, r6, r8
 8090672:	f008 0303 	and.w	r3, r8, #3
 8090676:	f8c0 8004 	str.w	r8, [r0, #4]
 809067a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 809067e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8090682:	9300      	str	r3, [sp, #0]
 8090684:	7a22      	ldrb	r2, [r4, #8]
 8090686:	6963      	ldr	r3, [r4, #20]
 8090688:	2a4a      	cmp	r2, #74	; 0x4a
 809068a:	d128      	bne.n	80906de <__tzcalc_limits+0xce>
 809068c:	9900      	ldr	r1, [sp, #0]
 809068e:	18ea      	adds	r2, r5, r3
 8090690:	b901      	cbnz	r1, 8090694 <__tzcalc_limits+0x84>
 8090692:	b906      	cbnz	r6, 8090696 <__tzcalc_limits+0x86>
 8090694:	bb0f      	cbnz	r7, 80906da <__tzcalc_limits+0xca>
 8090696:	2b3b      	cmp	r3, #59	; 0x3b
 8090698:	bfd4      	ite	le
 809069a:	2300      	movle	r3, #0
 809069c:	2301      	movgt	r3, #1
 809069e:	4413      	add	r3, r2
 80906a0:	1e5a      	subs	r2, r3, #1
 80906a2:	69a3      	ldr	r3, [r4, #24]
 80906a4:	492c      	ldr	r1, [pc, #176]	; (8090758 <__tzcalc_limits+0x148>)
 80906a6:	3428      	adds	r4, #40	; 0x28
 80906a8:	fb01 3202 	mla	r2, r1, r2, r3
 80906ac:	6823      	ldr	r3, [r4, #0]
 80906ae:	4413      	add	r3, r2
 80906b0:	461a      	mov	r2, r3
 80906b2:	17db      	asrs	r3, r3, #31
 80906b4:	e944 2302 	strd	r2, r3, [r4, #-8]
 80906b8:	45a3      	cmp	fp, r4
 80906ba:	d1e3      	bne.n	8090684 <__tzcalc_limits+0x74>
 80906bc:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80906c0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80906c4:	4294      	cmp	r4, r2
 80906c6:	eb75 0303 	sbcs.w	r3, r5, r3
 80906ca:	bfb4      	ite	lt
 80906cc:	2301      	movlt	r3, #1
 80906ce:	2300      	movge	r3, #0
 80906d0:	6003      	str	r3, [r0, #0]
 80906d2:	2001      	movs	r0, #1
 80906d4:	b003      	add	sp, #12
 80906d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80906da:	2300      	movs	r3, #0
 80906dc:	e7df      	b.n	809069e <__tzcalc_limits+0x8e>
 80906de:	2a44      	cmp	r2, #68	; 0x44
 80906e0:	d101      	bne.n	80906e6 <__tzcalc_limits+0xd6>
 80906e2:	18ea      	adds	r2, r5, r3
 80906e4:	e7dd      	b.n	80906a2 <__tzcalc_limits+0x92>
 80906e6:	9a00      	ldr	r2, [sp, #0]
 80906e8:	bb6a      	cbnz	r2, 8090746 <__tzcalc_limits+0x136>
 80906ea:	2e00      	cmp	r6, #0
 80906ec:	bf0c      	ite	eq
 80906ee:	46e0      	moveq	r8, ip
 80906f0:	f04f 0801 	movne.w	r8, #1
 80906f4:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80906f8:	68e2      	ldr	r2, [r4, #12]
 80906fa:	f04f 0900 	mov.w	r9, #0
 80906fe:	9201      	str	r2, [sp, #4]
 8090700:	462a      	mov	r2, r5
 8090702:	4916      	ldr	r1, [pc, #88]	; (809075c <__tzcalc_limits+0x14c>)
 8090704:	fb0a 1808 	mla	r8, sl, r8, r1
 8090708:	f1a8 0804 	sub.w	r8, r8, #4
 809070c:	9901      	ldr	r1, [sp, #4]
 809070e:	f109 0901 	add.w	r9, r9, #1
 8090712:	4549      	cmp	r1, r9
 8090714:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8090718:	dc17      	bgt.n	809074a <__tzcalc_limits+0x13a>
 809071a:	f102 0804 	add.w	r8, r2, #4
 809071e:	fb98 f9fe 	sdiv	r9, r8, lr
 8090722:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8090726:	eba8 0909 	sub.w	r9, r8, r9
 809072a:	ebb3 0909 	subs.w	r9, r3, r9
 809072e:	6923      	ldr	r3, [r4, #16]
 8090730:	bf48      	it	mi
 8090732:	f109 0907 	addmi.w	r9, r9, #7
 8090736:	3b01      	subs	r3, #1
 8090738:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 809073c:	444b      	add	r3, r9
 809073e:	4553      	cmp	r3, sl
 8090740:	da05      	bge.n	809074e <__tzcalc_limits+0x13e>
 8090742:	441a      	add	r2, r3
 8090744:	e7ad      	b.n	80906a2 <__tzcalc_limits+0x92>
 8090746:	46e0      	mov	r8, ip
 8090748:	e7d4      	b.n	80906f4 <__tzcalc_limits+0xe4>
 809074a:	4452      	add	r2, sl
 809074c:	e7de      	b.n	809070c <__tzcalc_limits+0xfc>
 809074e:	3b07      	subs	r3, #7
 8090750:	e7f5      	b.n	809073e <__tzcalc_limits+0x12e>
 8090752:	2000      	movs	r0, #0
 8090754:	e7be      	b.n	80906d4 <__tzcalc_limits+0xc4>
 8090756:	bf00      	nop
 8090758:	00015180 	.word	0x00015180
 809075c:	080945cc 	.word	0x080945cc

08090760 <__tz_lock>:
 8090760:	4801      	ldr	r0, [pc, #4]	; (8090768 <__tz_lock+0x8>)
 8090762:	f000 bde1 	b.w	8091328 <__retarget_lock_acquire>
 8090766:	bf00      	nop
 8090768:	200013e7 	.word	0x200013e7

0809076c <__tz_unlock>:
 809076c:	4801      	ldr	r0, [pc, #4]	; (8090774 <__tz_unlock+0x8>)
 809076e:	f000 bddd 	b.w	809132c <__retarget_lock_release>
 8090772:	bf00      	nop
 8090774:	200013e7 	.word	0x200013e7

08090778 <_tzset_unlocked>:
 8090778:	4b01      	ldr	r3, [pc, #4]	; (8090780 <_tzset_unlocked+0x8>)
 809077a:	6818      	ldr	r0, [r3, #0]
 809077c:	f000 b802 	b.w	8090784 <_tzset_unlocked_r>
 8090780:	200000e8 	.word	0x200000e8

08090784 <_tzset_unlocked_r>:
 8090784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090788:	b08d      	sub	sp, #52	; 0x34
 809078a:	4607      	mov	r7, r0
 809078c:	f000 fd14 	bl	80911b8 <__gettzinfo>
 8090790:	49b0      	ldr	r1, [pc, #704]	; (8090a54 <_tzset_unlocked_r+0x2d0>)
 8090792:	4605      	mov	r5, r0
 8090794:	4638      	mov	r0, r7
 8090796:	f000 fd07 	bl	80911a8 <_getenv_r>
 809079a:	4eaf      	ldr	r6, [pc, #700]	; (8090a58 <_tzset_unlocked_r+0x2d4>)
 809079c:	4604      	mov	r4, r0
 809079e:	b970      	cbnz	r0, 80907be <_tzset_unlocked_r+0x3a>
 80907a0:	4bae      	ldr	r3, [pc, #696]	; (8090a5c <_tzset_unlocked_r+0x2d8>)
 80907a2:	4aaf      	ldr	r2, [pc, #700]	; (8090a60 <_tzset_unlocked_r+0x2dc>)
 80907a4:	6018      	str	r0, [r3, #0]
 80907a6:	4baf      	ldr	r3, [pc, #700]	; (8090a64 <_tzset_unlocked_r+0x2e0>)
 80907a8:	6018      	str	r0, [r3, #0]
 80907aa:	4baf      	ldr	r3, [pc, #700]	; (8090a68 <_tzset_unlocked_r+0x2e4>)
 80907ac:	6830      	ldr	r0, [r6, #0]
 80907ae:	e9c3 2200 	strd	r2, r2, [r3]
 80907b2:	f7fa fa0b 	bl	808abcc <free>
 80907b6:	6034      	str	r4, [r6, #0]
 80907b8:	b00d      	add	sp, #52	; 0x34
 80907ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80907be:	6831      	ldr	r1, [r6, #0]
 80907c0:	2900      	cmp	r1, #0
 80907c2:	d15f      	bne.n	8090884 <_tzset_unlocked_r+0x100>
 80907c4:	6830      	ldr	r0, [r6, #0]
 80907c6:	f7fa fa01 	bl	808abcc <free>
 80907ca:	4620      	mov	r0, r4
 80907cc:	f7fe ff7a 	bl	808f6c4 <strlen>
 80907d0:	1c41      	adds	r1, r0, #1
 80907d2:	4638      	mov	r0, r7
 80907d4:	f7fa fa4a 	bl	808ac6c <_malloc_r>
 80907d8:	6030      	str	r0, [r6, #0]
 80907da:	2800      	cmp	r0, #0
 80907dc:	d157      	bne.n	809088e <_tzset_unlocked_r+0x10a>
 80907de:	7823      	ldrb	r3, [r4, #0]
 80907e0:	ae0a      	add	r6, sp, #40	; 0x28
 80907e2:	2b3a      	cmp	r3, #58	; 0x3a
 80907e4:	bf08      	it	eq
 80907e6:	3401      	addeq	r4, #1
 80907e8:	4633      	mov	r3, r6
 80907ea:	4620      	mov	r0, r4
 80907ec:	4a9f      	ldr	r2, [pc, #636]	; (8090a6c <_tzset_unlocked_r+0x2e8>)
 80907ee:	49a0      	ldr	r1, [pc, #640]	; (8090a70 <_tzset_unlocked_r+0x2ec>)
 80907f0:	f7fa fa14 	bl	808ac1c <siscanf>
 80907f4:	2800      	cmp	r0, #0
 80907f6:	dddf      	ble.n	80907b8 <_tzset_unlocked_r+0x34>
 80907f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80907fa:	18e7      	adds	r7, r4, r3
 80907fc:	5ce3      	ldrb	r3, [r4, r3]
 80907fe:	2b2d      	cmp	r3, #45	; 0x2d
 8090800:	d149      	bne.n	8090896 <_tzset_unlocked_r+0x112>
 8090802:	f04f 34ff 	mov.w	r4, #4294967295
 8090806:	3701      	adds	r7, #1
 8090808:	f04f 0800 	mov.w	r8, #0
 809080c:	f10d 0a20 	add.w	sl, sp, #32
 8090810:	f10d 0b1e 	add.w	fp, sp, #30
 8090814:	4633      	mov	r3, r6
 8090816:	4638      	mov	r0, r7
 8090818:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 809081c:	4995      	ldr	r1, [pc, #596]	; (8090a74 <_tzset_unlocked_r+0x2f0>)
 809081e:	9603      	str	r6, [sp, #12]
 8090820:	f8cd b000 	str.w	fp, [sp]
 8090824:	aa07      	add	r2, sp, #28
 8090826:	f8ad 801e 	strh.w	r8, [sp, #30]
 809082a:	f8ad 8020 	strh.w	r8, [sp, #32]
 809082e:	f7fa f9f5 	bl	808ac1c <siscanf>
 8090832:	4540      	cmp	r0, r8
 8090834:	ddc0      	ble.n	80907b8 <_tzset_unlocked_r+0x34>
 8090836:	213c      	movs	r1, #60	; 0x3c
 8090838:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 809083c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8090840:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8090a80 <_tzset_unlocked_r+0x2fc>
 8090844:	fb01 2203 	mla	r2, r1, r3, r2
 8090848:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 809084c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8090850:	fb01 2303 	mla	r3, r1, r3, r2
 8090854:	435c      	muls	r4, r3
 8090856:	4b85      	ldr	r3, [pc, #532]	; (8090a6c <_tzset_unlocked_r+0x2e8>)
 8090858:	62ac      	str	r4, [r5, #40]	; 0x28
 809085a:	4c83      	ldr	r4, [pc, #524]	; (8090a68 <_tzset_unlocked_r+0x2e4>)
 809085c:	464a      	mov	r2, r9
 809085e:	6023      	str	r3, [r4, #0]
 8090860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090862:	4983      	ldr	r1, [pc, #524]	; (8090a70 <_tzset_unlocked_r+0x2ec>)
 8090864:	441f      	add	r7, r3
 8090866:	4638      	mov	r0, r7
 8090868:	4633      	mov	r3, r6
 809086a:	f7fa f9d7 	bl	808ac1c <siscanf>
 809086e:	4540      	cmp	r0, r8
 8090870:	dc17      	bgt.n	80908a2 <_tzset_unlocked_r+0x11e>
 8090872:	6823      	ldr	r3, [r4, #0]
 8090874:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8090876:	6063      	str	r3, [r4, #4]
 8090878:	4b78      	ldr	r3, [pc, #480]	; (8090a5c <_tzset_unlocked_r+0x2d8>)
 809087a:	601a      	str	r2, [r3, #0]
 809087c:	4b79      	ldr	r3, [pc, #484]	; (8090a64 <_tzset_unlocked_r+0x2e0>)
 809087e:	f8c3 8000 	str.w	r8, [r3]
 8090882:	e799      	b.n	80907b8 <_tzset_unlocked_r+0x34>
 8090884:	f7fe f98d 	bl	808eba2 <strcmp>
 8090888:	2800      	cmp	r0, #0
 809088a:	d19b      	bne.n	80907c4 <_tzset_unlocked_r+0x40>
 809088c:	e794      	b.n	80907b8 <_tzset_unlocked_r+0x34>
 809088e:	4621      	mov	r1, r4
 8090890:	f7fe f991 	bl	808ebb6 <strcpy>
 8090894:	e7a3      	b.n	80907de <_tzset_unlocked_r+0x5a>
 8090896:	2b2b      	cmp	r3, #43	; 0x2b
 8090898:	f04f 0401 	mov.w	r4, #1
 809089c:	bf08      	it	eq
 809089e:	3701      	addeq	r7, #1
 80908a0:	e7b2      	b.n	8090808 <_tzset_unlocked_r+0x84>
 80908a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80908a4:	f8c4 9004 	str.w	r9, [r4, #4]
 80908a8:	18fc      	adds	r4, r7, r3
 80908aa:	5cfb      	ldrb	r3, [r7, r3]
 80908ac:	2b2d      	cmp	r3, #45	; 0x2d
 80908ae:	f040 808c 	bne.w	80909ca <_tzset_unlocked_r+0x246>
 80908b2:	f04f 37ff 	mov.w	r7, #4294967295
 80908b6:	3401      	adds	r4, #1
 80908b8:	2300      	movs	r3, #0
 80908ba:	4620      	mov	r0, r4
 80908bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80908c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80908c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80908c8:	930a      	str	r3, [sp, #40]	; 0x28
 80908ca:	e9cd a602 	strd	sl, r6, [sp, #8]
 80908ce:	4633      	mov	r3, r6
 80908d0:	e9cd b600 	strd	fp, r6, [sp]
 80908d4:	4967      	ldr	r1, [pc, #412]	; (8090a74 <_tzset_unlocked_r+0x2f0>)
 80908d6:	aa07      	add	r2, sp, #28
 80908d8:	f7fa f9a0 	bl	808ac1c <siscanf>
 80908dc:	2800      	cmp	r0, #0
 80908de:	dc7a      	bgt.n	80909d6 <_tzset_unlocked_r+0x252>
 80908e0:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80908e2:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80908e6:	652f      	str	r7, [r5, #80]	; 0x50
 80908e8:	f04f 0900 	mov.w	r9, #0
 80908ec:	462f      	mov	r7, r5
 80908ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80908f0:	441c      	add	r4, r3
 80908f2:	7823      	ldrb	r3, [r4, #0]
 80908f4:	2b2c      	cmp	r3, #44	; 0x2c
 80908f6:	bf08      	it	eq
 80908f8:	3401      	addeq	r4, #1
 80908fa:	f894 8000 	ldrb.w	r8, [r4]
 80908fe:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8090902:	d17a      	bne.n	80909fa <_tzset_unlocked_r+0x276>
 8090904:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8090908:	e9cd 6301 	strd	r6, r3, [sp, #4]
 809090c:	ab09      	add	r3, sp, #36	; 0x24
 809090e:	9300      	str	r3, [sp, #0]
 8090910:	4620      	mov	r0, r4
 8090912:	4633      	mov	r3, r6
 8090914:	4958      	ldr	r1, [pc, #352]	; (8090a78 <_tzset_unlocked_r+0x2f4>)
 8090916:	9603      	str	r6, [sp, #12]
 8090918:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 809091c:	f7fa f97e 	bl	808ac1c <siscanf>
 8090920:	2803      	cmp	r0, #3
 8090922:	f47f af49 	bne.w	80907b8 <_tzset_unlocked_r+0x34>
 8090926:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 809092a:	1e4b      	subs	r3, r1, #1
 809092c:	2b0b      	cmp	r3, #11
 809092e:	f63f af43 	bhi.w	80907b8 <_tzset_unlocked_r+0x34>
 8090932:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8090936:	1e53      	subs	r3, r2, #1
 8090938:	2b04      	cmp	r3, #4
 809093a:	f63f af3d 	bhi.w	80907b8 <_tzset_unlocked_r+0x34>
 809093e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8090942:	2b06      	cmp	r3, #6
 8090944:	f63f af38 	bhi.w	80907b8 <_tzset_unlocked_r+0x34>
 8090948:	e9c7 1203 	strd	r1, r2, [r7, #12]
 809094c:	f887 8008 	strb.w	r8, [r7, #8]
 8090950:	617b      	str	r3, [r7, #20]
 8090952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090954:	eb04 0803 	add.w	r8, r4, r3
 8090958:	2302      	movs	r3, #2
 809095a:	f8ad 301c 	strh.w	r3, [sp, #28]
 809095e:	2300      	movs	r3, #0
 8090960:	f8ad 301e 	strh.w	r3, [sp, #30]
 8090964:	f8ad 3020 	strh.w	r3, [sp, #32]
 8090968:	930a      	str	r3, [sp, #40]	; 0x28
 809096a:	f898 3000 	ldrb.w	r3, [r8]
 809096e:	2b2f      	cmp	r3, #47	; 0x2f
 8090970:	d109      	bne.n	8090986 <_tzset_unlocked_r+0x202>
 8090972:	4633      	mov	r3, r6
 8090974:	4640      	mov	r0, r8
 8090976:	e9cd a602 	strd	sl, r6, [sp, #8]
 809097a:	e9cd b600 	strd	fp, r6, [sp]
 809097e:	493f      	ldr	r1, [pc, #252]	; (8090a7c <_tzset_unlocked_r+0x2f8>)
 8090980:	aa07      	add	r2, sp, #28
 8090982:	f7fa f94b 	bl	808ac1c <siscanf>
 8090986:	213c      	movs	r1, #60	; 0x3c
 8090988:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 809098c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8090990:	3728      	adds	r7, #40	; 0x28
 8090992:	fb01 2203 	mla	r2, r1, r3, r2
 8090996:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 809099a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 809099e:	fb01 2303 	mla	r3, r1, r3, r2
 80909a2:	f847 3c10 	str.w	r3, [r7, #-16]
 80909a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80909a8:	4444      	add	r4, r8
 80909aa:	f1b9 0f00 	cmp.w	r9, #0
 80909ae:	d021      	beq.n	80909f4 <_tzset_unlocked_r+0x270>
 80909b0:	6868      	ldr	r0, [r5, #4]
 80909b2:	f7ff fe2d 	bl	8090610 <__tzcalc_limits>
 80909b6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80909b8:	4b28      	ldr	r3, [pc, #160]	; (8090a5c <_tzset_unlocked_r+0x2d8>)
 80909ba:	601a      	str	r2, [r3, #0]
 80909bc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80909be:	1a9b      	subs	r3, r3, r2
 80909c0:	bf18      	it	ne
 80909c2:	2301      	movne	r3, #1
 80909c4:	4a27      	ldr	r2, [pc, #156]	; (8090a64 <_tzset_unlocked_r+0x2e0>)
 80909c6:	6013      	str	r3, [r2, #0]
 80909c8:	e6f6      	b.n	80907b8 <_tzset_unlocked_r+0x34>
 80909ca:	2b2b      	cmp	r3, #43	; 0x2b
 80909cc:	f04f 0701 	mov.w	r7, #1
 80909d0:	bf08      	it	eq
 80909d2:	3401      	addeq	r4, #1
 80909d4:	e770      	b.n	80908b8 <_tzset_unlocked_r+0x134>
 80909d6:	213c      	movs	r1, #60	; 0x3c
 80909d8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80909dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80909e0:	fb01 2203 	mla	r2, r1, r3, r2
 80909e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80909e8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80909ec:	fb01 2303 	mla	r3, r1, r3, r2
 80909f0:	435f      	muls	r7, r3
 80909f2:	e778      	b.n	80908e6 <_tzset_unlocked_r+0x162>
 80909f4:	f04f 0901 	mov.w	r9, #1
 80909f8:	e77b      	b.n	80908f2 <_tzset_unlocked_r+0x16e>
 80909fa:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80909fe:	bf0a      	itet	eq
 8090a00:	4643      	moveq	r3, r8
 8090a02:	2344      	movne	r3, #68	; 0x44
 8090a04:	3401      	addeq	r4, #1
 8090a06:	220a      	movs	r2, #10
 8090a08:	4620      	mov	r0, r4
 8090a0a:	a90b      	add	r1, sp, #44	; 0x2c
 8090a0c:	9305      	str	r3, [sp, #20]
 8090a0e:	f7ff fdeb 	bl	80905e8 <strtoul>
 8090a12:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8090a16:	9b05      	ldr	r3, [sp, #20]
 8090a18:	45a0      	cmp	r8, r4
 8090a1a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8090a1e:	d114      	bne.n	8090a4a <_tzset_unlocked_r+0x2c6>
 8090a20:	234d      	movs	r3, #77	; 0x4d
 8090a22:	f1b9 0f00 	cmp.w	r9, #0
 8090a26:	d107      	bne.n	8090a38 <_tzset_unlocked_r+0x2b4>
 8090a28:	2103      	movs	r1, #3
 8090a2a:	722b      	strb	r3, [r5, #8]
 8090a2c:	2302      	movs	r3, #2
 8090a2e:	f8c5 9014 	str.w	r9, [r5, #20]
 8090a32:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8090a36:	e78f      	b.n	8090958 <_tzset_unlocked_r+0x1d4>
 8090a38:	220b      	movs	r2, #11
 8090a3a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8090a3e:	2301      	movs	r3, #1
 8090a40:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8090a44:	2300      	movs	r3, #0
 8090a46:	63eb      	str	r3, [r5, #60]	; 0x3c
 8090a48:	e786      	b.n	8090958 <_tzset_unlocked_r+0x1d4>
 8090a4a:	b280      	uxth	r0, r0
 8090a4c:	723b      	strb	r3, [r7, #8]
 8090a4e:	6178      	str	r0, [r7, #20]
 8090a50:	e782      	b.n	8090958 <_tzset_unlocked_r+0x1d4>
 8090a52:	bf00      	nop
 8090a54:	080948fc 	.word	0x080948fc
 8090a58:	200013d0 	.word	0x200013d0
 8090a5c:	200013d8 	.word	0x200013d8
 8090a60:	080948ff 	.word	0x080948ff
 8090a64:	200013d4 	.word	0x200013d4
 8090a68:	2000014c 	.word	0x2000014c
 8090a6c:	200013c3 	.word	0x200013c3
 8090a70:	08094903 	.word	0x08094903
 8090a74:	08094926 	.word	0x08094926
 8090a78:	08094912 	.word	0x08094912
 8090a7c:	08094925 	.word	0x08094925
 8090a80:	200013b8 	.word	0x200013b8

08090a84 <abs>:
 8090a84:	2800      	cmp	r0, #0
 8090a86:	bfb8      	it	lt
 8090a88:	4240      	neglt	r0, r0
 8090a8a:	4770      	bx	lr

08090a8c <rshift>:
 8090a8c:	6903      	ldr	r3, [r0, #16]
 8090a8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8090a92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8090a96:	f100 0414 	add.w	r4, r0, #20
 8090a9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8090a9e:	dd46      	ble.n	8090b2e <rshift+0xa2>
 8090aa0:	f011 011f 	ands.w	r1, r1, #31
 8090aa4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8090aa8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8090aac:	d10c      	bne.n	8090ac8 <rshift+0x3c>
 8090aae:	4629      	mov	r1, r5
 8090ab0:	f100 0710 	add.w	r7, r0, #16
 8090ab4:	42b1      	cmp	r1, r6
 8090ab6:	d335      	bcc.n	8090b24 <rshift+0x98>
 8090ab8:	1a9b      	subs	r3, r3, r2
 8090aba:	009b      	lsls	r3, r3, #2
 8090abc:	1eea      	subs	r2, r5, #3
 8090abe:	4296      	cmp	r6, r2
 8090ac0:	bf38      	it	cc
 8090ac2:	2300      	movcc	r3, #0
 8090ac4:	4423      	add	r3, r4
 8090ac6:	e015      	b.n	8090af4 <rshift+0x68>
 8090ac8:	46a1      	mov	r9, r4
 8090aca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8090ace:	f1c1 0820 	rsb	r8, r1, #32
 8090ad2:	40cf      	lsrs	r7, r1
 8090ad4:	f105 0e04 	add.w	lr, r5, #4
 8090ad8:	4576      	cmp	r6, lr
 8090ada:	46f4      	mov	ip, lr
 8090adc:	d816      	bhi.n	8090b0c <rshift+0x80>
 8090ade:	1a9b      	subs	r3, r3, r2
 8090ae0:	009a      	lsls	r2, r3, #2
 8090ae2:	3a04      	subs	r2, #4
 8090ae4:	3501      	adds	r5, #1
 8090ae6:	42ae      	cmp	r6, r5
 8090ae8:	bf38      	it	cc
 8090aea:	2200      	movcc	r2, #0
 8090aec:	18a3      	adds	r3, r4, r2
 8090aee:	50a7      	str	r7, [r4, r2]
 8090af0:	b107      	cbz	r7, 8090af4 <rshift+0x68>
 8090af2:	3304      	adds	r3, #4
 8090af4:	42a3      	cmp	r3, r4
 8090af6:	eba3 0204 	sub.w	r2, r3, r4
 8090afa:	bf08      	it	eq
 8090afc:	2300      	moveq	r3, #0
 8090afe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8090b02:	6102      	str	r2, [r0, #16]
 8090b04:	bf08      	it	eq
 8090b06:	6143      	streq	r3, [r0, #20]
 8090b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8090b0c:	f8dc c000 	ldr.w	ip, [ip]
 8090b10:	fa0c fc08 	lsl.w	ip, ip, r8
 8090b14:	ea4c 0707 	orr.w	r7, ip, r7
 8090b18:	f849 7b04 	str.w	r7, [r9], #4
 8090b1c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8090b20:	40cf      	lsrs	r7, r1
 8090b22:	e7d9      	b.n	8090ad8 <rshift+0x4c>
 8090b24:	f851 cb04 	ldr.w	ip, [r1], #4
 8090b28:	f847 cf04 	str.w	ip, [r7, #4]!
 8090b2c:	e7c2      	b.n	8090ab4 <rshift+0x28>
 8090b2e:	4623      	mov	r3, r4
 8090b30:	e7e0      	b.n	8090af4 <rshift+0x68>

08090b32 <__hexdig_fun>:
 8090b32:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8090b36:	2b09      	cmp	r3, #9
 8090b38:	d802      	bhi.n	8090b40 <__hexdig_fun+0xe>
 8090b3a:	3820      	subs	r0, #32
 8090b3c:	b2c0      	uxtb	r0, r0
 8090b3e:	4770      	bx	lr
 8090b40:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8090b44:	2b05      	cmp	r3, #5
 8090b46:	d801      	bhi.n	8090b4c <__hexdig_fun+0x1a>
 8090b48:	3847      	subs	r0, #71	; 0x47
 8090b4a:	e7f7      	b.n	8090b3c <__hexdig_fun+0xa>
 8090b4c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8090b50:	2b05      	cmp	r3, #5
 8090b52:	d801      	bhi.n	8090b58 <__hexdig_fun+0x26>
 8090b54:	3827      	subs	r0, #39	; 0x27
 8090b56:	e7f1      	b.n	8090b3c <__hexdig_fun+0xa>
 8090b58:	2000      	movs	r0, #0
 8090b5a:	4770      	bx	lr

08090b5c <__gethex>:
 8090b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090b60:	b08b      	sub	sp, #44	; 0x2c
 8090b62:	9306      	str	r3, [sp, #24]
 8090b64:	4bba      	ldr	r3, [pc, #744]	; (8090e50 <__gethex+0x2f4>)
 8090b66:	9002      	str	r0, [sp, #8]
 8090b68:	681b      	ldr	r3, [r3, #0]
 8090b6a:	468b      	mov	fp, r1
 8090b6c:	4618      	mov	r0, r3
 8090b6e:	4690      	mov	r8, r2
 8090b70:	9303      	str	r3, [sp, #12]
 8090b72:	f7fe fda7 	bl	808f6c4 <strlen>
 8090b76:	4682      	mov	sl, r0
 8090b78:	9b03      	ldr	r3, [sp, #12]
 8090b7a:	f8db 2000 	ldr.w	r2, [fp]
 8090b7e:	4403      	add	r3, r0
 8090b80:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8090b84:	9307      	str	r3, [sp, #28]
 8090b86:	1c93      	adds	r3, r2, #2
 8090b88:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8090b8c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8090b90:	32fe      	adds	r2, #254	; 0xfe
 8090b92:	18d1      	adds	r1, r2, r3
 8090b94:	461f      	mov	r7, r3
 8090b96:	f813 0b01 	ldrb.w	r0, [r3], #1
 8090b9a:	9101      	str	r1, [sp, #4]
 8090b9c:	2830      	cmp	r0, #48	; 0x30
 8090b9e:	d0f8      	beq.n	8090b92 <__gethex+0x36>
 8090ba0:	f7ff ffc7 	bl	8090b32 <__hexdig_fun>
 8090ba4:	4604      	mov	r4, r0
 8090ba6:	2800      	cmp	r0, #0
 8090ba8:	d13a      	bne.n	8090c20 <__gethex+0xc4>
 8090baa:	4652      	mov	r2, sl
 8090bac:	4638      	mov	r0, r7
 8090bae:	9903      	ldr	r1, [sp, #12]
 8090bb0:	f7fe fd90 	bl	808f6d4 <strncmp>
 8090bb4:	4605      	mov	r5, r0
 8090bb6:	2800      	cmp	r0, #0
 8090bb8:	d166      	bne.n	8090c88 <__gethex+0x12c>
 8090bba:	f817 000a 	ldrb.w	r0, [r7, sl]
 8090bbe:	eb07 060a 	add.w	r6, r7, sl
 8090bc2:	f7ff ffb6 	bl	8090b32 <__hexdig_fun>
 8090bc6:	2800      	cmp	r0, #0
 8090bc8:	d060      	beq.n	8090c8c <__gethex+0x130>
 8090bca:	4633      	mov	r3, r6
 8090bcc:	7818      	ldrb	r0, [r3, #0]
 8090bce:	461f      	mov	r7, r3
 8090bd0:	2830      	cmp	r0, #48	; 0x30
 8090bd2:	f103 0301 	add.w	r3, r3, #1
 8090bd6:	d0f9      	beq.n	8090bcc <__gethex+0x70>
 8090bd8:	f7ff ffab 	bl	8090b32 <__hexdig_fun>
 8090bdc:	2301      	movs	r3, #1
 8090bde:	fab0 f480 	clz	r4, r0
 8090be2:	4635      	mov	r5, r6
 8090be4:	0964      	lsrs	r4, r4, #5
 8090be6:	9301      	str	r3, [sp, #4]
 8090be8:	463a      	mov	r2, r7
 8090bea:	4616      	mov	r6, r2
 8090bec:	7830      	ldrb	r0, [r6, #0]
 8090bee:	3201      	adds	r2, #1
 8090bf0:	f7ff ff9f 	bl	8090b32 <__hexdig_fun>
 8090bf4:	2800      	cmp	r0, #0
 8090bf6:	d1f8      	bne.n	8090bea <__gethex+0x8e>
 8090bf8:	4652      	mov	r2, sl
 8090bfa:	4630      	mov	r0, r6
 8090bfc:	9903      	ldr	r1, [sp, #12]
 8090bfe:	f7fe fd69 	bl	808f6d4 <strncmp>
 8090c02:	b980      	cbnz	r0, 8090c26 <__gethex+0xca>
 8090c04:	b94d      	cbnz	r5, 8090c1a <__gethex+0xbe>
 8090c06:	eb06 050a 	add.w	r5, r6, sl
 8090c0a:	462a      	mov	r2, r5
 8090c0c:	4616      	mov	r6, r2
 8090c0e:	7830      	ldrb	r0, [r6, #0]
 8090c10:	3201      	adds	r2, #1
 8090c12:	f7ff ff8e 	bl	8090b32 <__hexdig_fun>
 8090c16:	2800      	cmp	r0, #0
 8090c18:	d1f8      	bne.n	8090c0c <__gethex+0xb0>
 8090c1a:	1bad      	subs	r5, r5, r6
 8090c1c:	00ad      	lsls	r5, r5, #2
 8090c1e:	e004      	b.n	8090c2a <__gethex+0xce>
 8090c20:	2400      	movs	r4, #0
 8090c22:	4625      	mov	r5, r4
 8090c24:	e7e0      	b.n	8090be8 <__gethex+0x8c>
 8090c26:	2d00      	cmp	r5, #0
 8090c28:	d1f7      	bne.n	8090c1a <__gethex+0xbe>
 8090c2a:	7833      	ldrb	r3, [r6, #0]
 8090c2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8090c30:	2b50      	cmp	r3, #80	; 0x50
 8090c32:	d139      	bne.n	8090ca8 <__gethex+0x14c>
 8090c34:	7873      	ldrb	r3, [r6, #1]
 8090c36:	2b2b      	cmp	r3, #43	; 0x2b
 8090c38:	d02a      	beq.n	8090c90 <__gethex+0x134>
 8090c3a:	2b2d      	cmp	r3, #45	; 0x2d
 8090c3c:	d02c      	beq.n	8090c98 <__gethex+0x13c>
 8090c3e:	f04f 0900 	mov.w	r9, #0
 8090c42:	1c71      	adds	r1, r6, #1
 8090c44:	7808      	ldrb	r0, [r1, #0]
 8090c46:	f7ff ff74 	bl	8090b32 <__hexdig_fun>
 8090c4a:	1e43      	subs	r3, r0, #1
 8090c4c:	b2db      	uxtb	r3, r3
 8090c4e:	2b18      	cmp	r3, #24
 8090c50:	d82a      	bhi.n	8090ca8 <__gethex+0x14c>
 8090c52:	f1a0 0210 	sub.w	r2, r0, #16
 8090c56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8090c5a:	f7ff ff6a 	bl	8090b32 <__hexdig_fun>
 8090c5e:	1e43      	subs	r3, r0, #1
 8090c60:	b2db      	uxtb	r3, r3
 8090c62:	2b18      	cmp	r3, #24
 8090c64:	d91b      	bls.n	8090c9e <__gethex+0x142>
 8090c66:	f1b9 0f00 	cmp.w	r9, #0
 8090c6a:	d000      	beq.n	8090c6e <__gethex+0x112>
 8090c6c:	4252      	negs	r2, r2
 8090c6e:	4415      	add	r5, r2
 8090c70:	f8cb 1000 	str.w	r1, [fp]
 8090c74:	b1d4      	cbz	r4, 8090cac <__gethex+0x150>
 8090c76:	9b01      	ldr	r3, [sp, #4]
 8090c78:	2b00      	cmp	r3, #0
 8090c7a:	bf14      	ite	ne
 8090c7c:	2700      	movne	r7, #0
 8090c7e:	2706      	moveq	r7, #6
 8090c80:	4638      	mov	r0, r7
 8090c82:	b00b      	add	sp, #44	; 0x2c
 8090c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8090c88:	463e      	mov	r6, r7
 8090c8a:	4625      	mov	r5, r4
 8090c8c:	2401      	movs	r4, #1
 8090c8e:	e7cc      	b.n	8090c2a <__gethex+0xce>
 8090c90:	f04f 0900 	mov.w	r9, #0
 8090c94:	1cb1      	adds	r1, r6, #2
 8090c96:	e7d5      	b.n	8090c44 <__gethex+0xe8>
 8090c98:	f04f 0901 	mov.w	r9, #1
 8090c9c:	e7fa      	b.n	8090c94 <__gethex+0x138>
 8090c9e:	230a      	movs	r3, #10
 8090ca0:	fb03 0202 	mla	r2, r3, r2, r0
 8090ca4:	3a10      	subs	r2, #16
 8090ca6:	e7d6      	b.n	8090c56 <__gethex+0xfa>
 8090ca8:	4631      	mov	r1, r6
 8090caa:	e7e1      	b.n	8090c70 <__gethex+0x114>
 8090cac:	4621      	mov	r1, r4
 8090cae:	1bf3      	subs	r3, r6, r7
 8090cb0:	3b01      	subs	r3, #1
 8090cb2:	2b07      	cmp	r3, #7
 8090cb4:	dc50      	bgt.n	8090d58 <__gethex+0x1fc>
 8090cb6:	9802      	ldr	r0, [sp, #8]
 8090cb8:	f000 fb4c 	bl	8091354 <_Balloc>
 8090cbc:	f04f 0b00 	mov.w	fp, #0
 8090cc0:	4604      	mov	r4, r0
 8090cc2:	f100 0914 	add.w	r9, r0, #20
 8090cc6:	f1ca 0301 	rsb	r3, sl, #1
 8090cca:	f8cd 9010 	str.w	r9, [sp, #16]
 8090cce:	f8cd b004 	str.w	fp, [sp, #4]
 8090cd2:	9308      	str	r3, [sp, #32]
 8090cd4:	42b7      	cmp	r7, r6
 8090cd6:	d342      	bcc.n	8090d5e <__gethex+0x202>
 8090cd8:	9f04      	ldr	r7, [sp, #16]
 8090cda:	9b01      	ldr	r3, [sp, #4]
 8090cdc:	f847 3b04 	str.w	r3, [r7], #4
 8090ce0:	eba7 0709 	sub.w	r7, r7, r9
 8090ce4:	10bf      	asrs	r7, r7, #2
 8090ce6:	6127      	str	r7, [r4, #16]
 8090ce8:	4618      	mov	r0, r3
 8090cea:	f000 fbfa 	bl	80914e2 <__hi0bits>
 8090cee:	017f      	lsls	r7, r7, #5
 8090cf0:	f8d8 6000 	ldr.w	r6, [r8]
 8090cf4:	1a3f      	subs	r7, r7, r0
 8090cf6:	42b7      	cmp	r7, r6
 8090cf8:	dd65      	ble.n	8090dc6 <__gethex+0x26a>
 8090cfa:	1bbf      	subs	r7, r7, r6
 8090cfc:	4639      	mov	r1, r7
 8090cfe:	4620      	mov	r0, r4
 8090d00:	f000 ff40 	bl	8091b84 <__any_on>
 8090d04:	4682      	mov	sl, r0
 8090d06:	b1a8      	cbz	r0, 8090d34 <__gethex+0x1d8>
 8090d08:	f04f 0a01 	mov.w	sl, #1
 8090d0c:	1e7b      	subs	r3, r7, #1
 8090d0e:	1159      	asrs	r1, r3, #5
 8090d10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8090d14:	f003 021f 	and.w	r2, r3, #31
 8090d18:	fa0a f202 	lsl.w	r2, sl, r2
 8090d1c:	420a      	tst	r2, r1
 8090d1e:	d009      	beq.n	8090d34 <__gethex+0x1d8>
 8090d20:	4553      	cmp	r3, sl
 8090d22:	dd05      	ble.n	8090d30 <__gethex+0x1d4>
 8090d24:	4620      	mov	r0, r4
 8090d26:	1eb9      	subs	r1, r7, #2
 8090d28:	f000 ff2c 	bl	8091b84 <__any_on>
 8090d2c:	2800      	cmp	r0, #0
 8090d2e:	d147      	bne.n	8090dc0 <__gethex+0x264>
 8090d30:	f04f 0a02 	mov.w	sl, #2
 8090d34:	4639      	mov	r1, r7
 8090d36:	4620      	mov	r0, r4
 8090d38:	f7ff fea8 	bl	8090a8c <rshift>
 8090d3c:	443d      	add	r5, r7
 8090d3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8090d42:	42ab      	cmp	r3, r5
 8090d44:	da4d      	bge.n	8090de2 <__gethex+0x286>
 8090d46:	4621      	mov	r1, r4
 8090d48:	9802      	ldr	r0, [sp, #8]
 8090d4a:	f000 fb37 	bl	80913bc <_Bfree>
 8090d4e:	2300      	movs	r3, #0
 8090d50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8090d52:	27a3      	movs	r7, #163	; 0xa3
 8090d54:	6013      	str	r3, [r2, #0]
 8090d56:	e793      	b.n	8090c80 <__gethex+0x124>
 8090d58:	3101      	adds	r1, #1
 8090d5a:	105b      	asrs	r3, r3, #1
 8090d5c:	e7a9      	b.n	8090cb2 <__gethex+0x156>
 8090d5e:	1e73      	subs	r3, r6, #1
 8090d60:	9a07      	ldr	r2, [sp, #28]
 8090d62:	9305      	str	r3, [sp, #20]
 8090d64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8090d68:	4293      	cmp	r3, r2
 8090d6a:	d019      	beq.n	8090da0 <__gethex+0x244>
 8090d6c:	f1bb 0f20 	cmp.w	fp, #32
 8090d70:	d107      	bne.n	8090d82 <__gethex+0x226>
 8090d72:	9b04      	ldr	r3, [sp, #16]
 8090d74:	9a01      	ldr	r2, [sp, #4]
 8090d76:	f843 2b04 	str.w	r2, [r3], #4
 8090d7a:	9304      	str	r3, [sp, #16]
 8090d7c:	2300      	movs	r3, #0
 8090d7e:	469b      	mov	fp, r3
 8090d80:	9301      	str	r3, [sp, #4]
 8090d82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8090d86:	f7ff fed4 	bl	8090b32 <__hexdig_fun>
 8090d8a:	9b01      	ldr	r3, [sp, #4]
 8090d8c:	f000 000f 	and.w	r0, r0, #15
 8090d90:	fa00 f00b 	lsl.w	r0, r0, fp
 8090d94:	4303      	orrs	r3, r0
 8090d96:	9301      	str	r3, [sp, #4]
 8090d98:	f10b 0b04 	add.w	fp, fp, #4
 8090d9c:	9b05      	ldr	r3, [sp, #20]
 8090d9e:	e00d      	b.n	8090dbc <__gethex+0x260>
 8090da0:	9b05      	ldr	r3, [sp, #20]
 8090da2:	9a08      	ldr	r2, [sp, #32]
 8090da4:	4413      	add	r3, r2
 8090da6:	42bb      	cmp	r3, r7
 8090da8:	d3e0      	bcc.n	8090d6c <__gethex+0x210>
 8090daa:	4618      	mov	r0, r3
 8090dac:	4652      	mov	r2, sl
 8090dae:	9903      	ldr	r1, [sp, #12]
 8090db0:	9309      	str	r3, [sp, #36]	; 0x24
 8090db2:	f7fe fc8f 	bl	808f6d4 <strncmp>
 8090db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8090db8:	2800      	cmp	r0, #0
 8090dba:	d1d7      	bne.n	8090d6c <__gethex+0x210>
 8090dbc:	461e      	mov	r6, r3
 8090dbe:	e789      	b.n	8090cd4 <__gethex+0x178>
 8090dc0:	f04f 0a03 	mov.w	sl, #3
 8090dc4:	e7b6      	b.n	8090d34 <__gethex+0x1d8>
 8090dc6:	da09      	bge.n	8090ddc <__gethex+0x280>
 8090dc8:	1bf7      	subs	r7, r6, r7
 8090dca:	4621      	mov	r1, r4
 8090dcc:	463a      	mov	r2, r7
 8090dce:	9802      	ldr	r0, [sp, #8]
 8090dd0:	f000 fcc8 	bl	8091764 <__lshift>
 8090dd4:	4604      	mov	r4, r0
 8090dd6:	1bed      	subs	r5, r5, r7
 8090dd8:	f100 0914 	add.w	r9, r0, #20
 8090ddc:	f04f 0a00 	mov.w	sl, #0
 8090de0:	e7ad      	b.n	8090d3e <__gethex+0x1e2>
 8090de2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8090de6:	42a8      	cmp	r0, r5
 8090de8:	dd6e      	ble.n	8090ec8 <__gethex+0x36c>
 8090dea:	1b45      	subs	r5, r0, r5
 8090dec:	42ae      	cmp	r6, r5
 8090dee:	dc31      	bgt.n	8090e54 <__gethex+0x2f8>
 8090df0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8090df4:	2b02      	cmp	r3, #2
 8090df6:	d022      	beq.n	8090e3e <__gethex+0x2e2>
 8090df8:	2b03      	cmp	r3, #3
 8090dfa:	d024      	beq.n	8090e46 <__gethex+0x2ea>
 8090dfc:	2b01      	cmp	r3, #1
 8090dfe:	d115      	bne.n	8090e2c <__gethex+0x2d0>
 8090e00:	42ae      	cmp	r6, r5
 8090e02:	d113      	bne.n	8090e2c <__gethex+0x2d0>
 8090e04:	2e01      	cmp	r6, #1
 8090e06:	d10b      	bne.n	8090e20 <__gethex+0x2c4>
 8090e08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8090e0c:	9a06      	ldr	r2, [sp, #24]
 8090e0e:	2762      	movs	r7, #98	; 0x62
 8090e10:	6013      	str	r3, [r2, #0]
 8090e12:	2301      	movs	r3, #1
 8090e14:	6123      	str	r3, [r4, #16]
 8090e16:	f8c9 3000 	str.w	r3, [r9]
 8090e1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8090e1c:	601c      	str	r4, [r3, #0]
 8090e1e:	e72f      	b.n	8090c80 <__gethex+0x124>
 8090e20:	4620      	mov	r0, r4
 8090e22:	1e71      	subs	r1, r6, #1
 8090e24:	f000 feae 	bl	8091b84 <__any_on>
 8090e28:	2800      	cmp	r0, #0
 8090e2a:	d1ed      	bne.n	8090e08 <__gethex+0x2ac>
 8090e2c:	4621      	mov	r1, r4
 8090e2e:	9802      	ldr	r0, [sp, #8]
 8090e30:	f000 fac4 	bl	80913bc <_Bfree>
 8090e34:	2300      	movs	r3, #0
 8090e36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8090e38:	2750      	movs	r7, #80	; 0x50
 8090e3a:	6013      	str	r3, [r2, #0]
 8090e3c:	e720      	b.n	8090c80 <__gethex+0x124>
 8090e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090e40:	2b00      	cmp	r3, #0
 8090e42:	d1f3      	bne.n	8090e2c <__gethex+0x2d0>
 8090e44:	e7e0      	b.n	8090e08 <__gethex+0x2ac>
 8090e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090e48:	2b00      	cmp	r3, #0
 8090e4a:	d1dd      	bne.n	8090e08 <__gethex+0x2ac>
 8090e4c:	e7ee      	b.n	8090e2c <__gethex+0x2d0>
 8090e4e:	bf00      	nop
 8090e50:	08094a3c 	.word	0x08094a3c
 8090e54:	1e6f      	subs	r7, r5, #1
 8090e56:	f1ba 0f00 	cmp.w	sl, #0
 8090e5a:	d132      	bne.n	8090ec2 <__gethex+0x366>
 8090e5c:	b127      	cbz	r7, 8090e68 <__gethex+0x30c>
 8090e5e:	4639      	mov	r1, r7
 8090e60:	4620      	mov	r0, r4
 8090e62:	f000 fe8f 	bl	8091b84 <__any_on>
 8090e66:	4682      	mov	sl, r0
 8090e68:	2101      	movs	r1, #1
 8090e6a:	117b      	asrs	r3, r7, #5
 8090e6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8090e70:	f007 071f 	and.w	r7, r7, #31
 8090e74:	fa01 f707 	lsl.w	r7, r1, r7
 8090e78:	421f      	tst	r7, r3
 8090e7a:	f04f 0702 	mov.w	r7, #2
 8090e7e:	4629      	mov	r1, r5
 8090e80:	4620      	mov	r0, r4
 8090e82:	bf18      	it	ne
 8090e84:	f04a 0a02 	orrne.w	sl, sl, #2
 8090e88:	1b76      	subs	r6, r6, r5
 8090e8a:	f7ff fdff 	bl	8090a8c <rshift>
 8090e8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8090e92:	f1ba 0f00 	cmp.w	sl, #0
 8090e96:	d048      	beq.n	8090f2a <__gethex+0x3ce>
 8090e98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8090e9c:	2b02      	cmp	r3, #2
 8090e9e:	d015      	beq.n	8090ecc <__gethex+0x370>
 8090ea0:	2b03      	cmp	r3, #3
 8090ea2:	d017      	beq.n	8090ed4 <__gethex+0x378>
 8090ea4:	2b01      	cmp	r3, #1
 8090ea6:	d109      	bne.n	8090ebc <__gethex+0x360>
 8090ea8:	f01a 0f02 	tst.w	sl, #2
 8090eac:	d006      	beq.n	8090ebc <__gethex+0x360>
 8090eae:	f8d9 0000 	ldr.w	r0, [r9]
 8090eb2:	ea4a 0a00 	orr.w	sl, sl, r0
 8090eb6:	f01a 0f01 	tst.w	sl, #1
 8090eba:	d10e      	bne.n	8090eda <__gethex+0x37e>
 8090ebc:	f047 0710 	orr.w	r7, r7, #16
 8090ec0:	e033      	b.n	8090f2a <__gethex+0x3ce>
 8090ec2:	f04f 0a01 	mov.w	sl, #1
 8090ec6:	e7cf      	b.n	8090e68 <__gethex+0x30c>
 8090ec8:	2701      	movs	r7, #1
 8090eca:	e7e2      	b.n	8090e92 <__gethex+0x336>
 8090ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090ece:	f1c3 0301 	rsb	r3, r3, #1
 8090ed2:	9315      	str	r3, [sp, #84]	; 0x54
 8090ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8090ed6:	2b00      	cmp	r3, #0
 8090ed8:	d0f0      	beq.n	8090ebc <__gethex+0x360>
 8090eda:	f04f 0c00 	mov.w	ip, #0
 8090ede:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8090ee2:	f104 0314 	add.w	r3, r4, #20
 8090ee6:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8090eea:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 8090eee:	4618      	mov	r0, r3
 8090ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8090ef4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8090ef8:	d01c      	beq.n	8090f34 <__gethex+0x3d8>
 8090efa:	3201      	adds	r2, #1
 8090efc:	6002      	str	r2, [r0, #0]
 8090efe:	2f02      	cmp	r7, #2
 8090f00:	f104 0314 	add.w	r3, r4, #20
 8090f04:	d138      	bne.n	8090f78 <__gethex+0x41c>
 8090f06:	f8d8 2000 	ldr.w	r2, [r8]
 8090f0a:	3a01      	subs	r2, #1
 8090f0c:	42b2      	cmp	r2, r6
 8090f0e:	d10a      	bne.n	8090f26 <__gethex+0x3ca>
 8090f10:	2201      	movs	r2, #1
 8090f12:	1171      	asrs	r1, r6, #5
 8090f14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8090f18:	f006 061f 	and.w	r6, r6, #31
 8090f1c:	fa02 f606 	lsl.w	r6, r2, r6
 8090f20:	421e      	tst	r6, r3
 8090f22:	bf18      	it	ne
 8090f24:	4617      	movne	r7, r2
 8090f26:	f047 0720 	orr.w	r7, r7, #32
 8090f2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8090f2c:	601c      	str	r4, [r3, #0]
 8090f2e:	9b06      	ldr	r3, [sp, #24]
 8090f30:	601d      	str	r5, [r3, #0]
 8090f32:	e6a5      	b.n	8090c80 <__gethex+0x124>
 8090f34:	4299      	cmp	r1, r3
 8090f36:	f843 cc04 	str.w	ip, [r3, #-4]
 8090f3a:	d8d8      	bhi.n	8090eee <__gethex+0x392>
 8090f3c:	68a3      	ldr	r3, [r4, #8]
 8090f3e:	4599      	cmp	r9, r3
 8090f40:	db12      	blt.n	8090f68 <__gethex+0x40c>
 8090f42:	6861      	ldr	r1, [r4, #4]
 8090f44:	9802      	ldr	r0, [sp, #8]
 8090f46:	3101      	adds	r1, #1
 8090f48:	f000 fa04 	bl	8091354 <_Balloc>
 8090f4c:	4682      	mov	sl, r0
 8090f4e:	6922      	ldr	r2, [r4, #16]
 8090f50:	f104 010c 	add.w	r1, r4, #12
 8090f54:	3202      	adds	r2, #2
 8090f56:	0092      	lsls	r2, r2, #2
 8090f58:	300c      	adds	r0, #12
 8090f5a:	f7fd fddb 	bl	808eb14 <memcpy>
 8090f5e:	4621      	mov	r1, r4
 8090f60:	9802      	ldr	r0, [sp, #8]
 8090f62:	f000 fa2b 	bl	80913bc <_Bfree>
 8090f66:	4654      	mov	r4, sl
 8090f68:	6923      	ldr	r3, [r4, #16]
 8090f6a:	1c5a      	adds	r2, r3, #1
 8090f6c:	6122      	str	r2, [r4, #16]
 8090f6e:	2201      	movs	r2, #1
 8090f70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8090f74:	615a      	str	r2, [r3, #20]
 8090f76:	e7c2      	b.n	8090efe <__gethex+0x3a2>
 8090f78:	6922      	ldr	r2, [r4, #16]
 8090f7a:	454a      	cmp	r2, r9
 8090f7c:	dd0b      	ble.n	8090f96 <__gethex+0x43a>
 8090f7e:	2101      	movs	r1, #1
 8090f80:	4620      	mov	r0, r4
 8090f82:	f7ff fd83 	bl	8090a8c <rshift>
 8090f86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8090f8a:	3501      	adds	r5, #1
 8090f8c:	42ab      	cmp	r3, r5
 8090f8e:	f6ff aeda 	blt.w	8090d46 <__gethex+0x1ea>
 8090f92:	2701      	movs	r7, #1
 8090f94:	e7c7      	b.n	8090f26 <__gethex+0x3ca>
 8090f96:	f016 061f 	ands.w	r6, r6, #31
 8090f9a:	d0fa      	beq.n	8090f92 <__gethex+0x436>
 8090f9c:	449b      	add	fp, r3
 8090f9e:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8090fa2:	f000 fa9e 	bl	80914e2 <__hi0bits>
 8090fa6:	f1c6 0620 	rsb	r6, r6, #32
 8090faa:	42b0      	cmp	r0, r6
 8090fac:	dbe7      	blt.n	8090f7e <__gethex+0x422>
 8090fae:	e7f0      	b.n	8090f92 <__gethex+0x436>

08090fb0 <L_shift>:
 8090fb0:	f1c2 0208 	rsb	r2, r2, #8
 8090fb4:	0092      	lsls	r2, r2, #2
 8090fb6:	b570      	push	{r4, r5, r6, lr}
 8090fb8:	f1c2 0620 	rsb	r6, r2, #32
 8090fbc:	6843      	ldr	r3, [r0, #4]
 8090fbe:	6804      	ldr	r4, [r0, #0]
 8090fc0:	fa03 f506 	lsl.w	r5, r3, r6
 8090fc4:	432c      	orrs	r4, r5
 8090fc6:	40d3      	lsrs	r3, r2
 8090fc8:	6004      	str	r4, [r0, #0]
 8090fca:	f840 3f04 	str.w	r3, [r0, #4]!
 8090fce:	4288      	cmp	r0, r1
 8090fd0:	d3f4      	bcc.n	8090fbc <L_shift+0xc>
 8090fd2:	bd70      	pop	{r4, r5, r6, pc}

08090fd4 <__match>:
 8090fd4:	b530      	push	{r4, r5, lr}
 8090fd6:	6803      	ldr	r3, [r0, #0]
 8090fd8:	3301      	adds	r3, #1
 8090fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8090fde:	b914      	cbnz	r4, 8090fe6 <__match+0x12>
 8090fe0:	6003      	str	r3, [r0, #0]
 8090fe2:	2001      	movs	r0, #1
 8090fe4:	bd30      	pop	{r4, r5, pc}
 8090fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8090fea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8090fee:	2d19      	cmp	r5, #25
 8090ff0:	bf98      	it	ls
 8090ff2:	3220      	addls	r2, #32
 8090ff4:	42a2      	cmp	r2, r4
 8090ff6:	d0f0      	beq.n	8090fda <__match+0x6>
 8090ff8:	2000      	movs	r0, #0
 8090ffa:	e7f3      	b.n	8090fe4 <__match+0x10>

08090ffc <__hexnan>:
 8090ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8091000:	2500      	movs	r5, #0
 8091002:	680b      	ldr	r3, [r1, #0]
 8091004:	4682      	mov	sl, r0
 8091006:	115e      	asrs	r6, r3, #5
 8091008:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 809100c:	f013 031f 	ands.w	r3, r3, #31
 8091010:	bf18      	it	ne
 8091012:	3604      	addne	r6, #4
 8091014:	1f37      	subs	r7, r6, #4
 8091016:	4690      	mov	r8, r2
 8091018:	46b9      	mov	r9, r7
 809101a:	463c      	mov	r4, r7
 809101c:	46ab      	mov	fp, r5
 809101e:	b087      	sub	sp, #28
 8091020:	6801      	ldr	r1, [r0, #0]
 8091022:	9301      	str	r3, [sp, #4]
 8091024:	f846 5c04 	str.w	r5, [r6, #-4]
 8091028:	9502      	str	r5, [sp, #8]
 809102a:	784a      	ldrb	r2, [r1, #1]
 809102c:	1c4b      	adds	r3, r1, #1
 809102e:	9303      	str	r3, [sp, #12]
 8091030:	b342      	cbz	r2, 8091084 <__hexnan+0x88>
 8091032:	4610      	mov	r0, r2
 8091034:	9105      	str	r1, [sp, #20]
 8091036:	9204      	str	r2, [sp, #16]
 8091038:	f7ff fd7b 	bl	8090b32 <__hexdig_fun>
 809103c:	2800      	cmp	r0, #0
 809103e:	d14f      	bne.n	80910e0 <__hexnan+0xe4>
 8091040:	9a04      	ldr	r2, [sp, #16]
 8091042:	9905      	ldr	r1, [sp, #20]
 8091044:	2a20      	cmp	r2, #32
 8091046:	d818      	bhi.n	809107a <__hexnan+0x7e>
 8091048:	9b02      	ldr	r3, [sp, #8]
 809104a:	459b      	cmp	fp, r3
 809104c:	dd13      	ble.n	8091076 <__hexnan+0x7a>
 809104e:	454c      	cmp	r4, r9
 8091050:	d206      	bcs.n	8091060 <__hexnan+0x64>
 8091052:	2d07      	cmp	r5, #7
 8091054:	dc04      	bgt.n	8091060 <__hexnan+0x64>
 8091056:	462a      	mov	r2, r5
 8091058:	4649      	mov	r1, r9
 809105a:	4620      	mov	r0, r4
 809105c:	f7ff ffa8 	bl	8090fb0 <L_shift>
 8091060:	4544      	cmp	r4, r8
 8091062:	d950      	bls.n	8091106 <__hexnan+0x10a>
 8091064:	2300      	movs	r3, #0
 8091066:	f1a4 0904 	sub.w	r9, r4, #4
 809106a:	f844 3c04 	str.w	r3, [r4, #-4]
 809106e:	461d      	mov	r5, r3
 8091070:	464c      	mov	r4, r9
 8091072:	f8cd b008 	str.w	fp, [sp, #8]
 8091076:	9903      	ldr	r1, [sp, #12]
 8091078:	e7d7      	b.n	809102a <__hexnan+0x2e>
 809107a:	2a29      	cmp	r2, #41	; 0x29
 809107c:	d156      	bne.n	809112c <__hexnan+0x130>
 809107e:	3102      	adds	r1, #2
 8091080:	f8ca 1000 	str.w	r1, [sl]
 8091084:	f1bb 0f00 	cmp.w	fp, #0
 8091088:	d050      	beq.n	809112c <__hexnan+0x130>
 809108a:	454c      	cmp	r4, r9
 809108c:	d206      	bcs.n	809109c <__hexnan+0xa0>
 809108e:	2d07      	cmp	r5, #7
 8091090:	dc04      	bgt.n	809109c <__hexnan+0xa0>
 8091092:	462a      	mov	r2, r5
 8091094:	4649      	mov	r1, r9
 8091096:	4620      	mov	r0, r4
 8091098:	f7ff ff8a 	bl	8090fb0 <L_shift>
 809109c:	4544      	cmp	r4, r8
 809109e:	d934      	bls.n	809110a <__hexnan+0x10e>
 80910a0:	4623      	mov	r3, r4
 80910a2:	f1a8 0204 	sub.w	r2, r8, #4
 80910a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80910aa:	429f      	cmp	r7, r3
 80910ac:	f842 1f04 	str.w	r1, [r2, #4]!
 80910b0:	d2f9      	bcs.n	80910a6 <__hexnan+0xaa>
 80910b2:	1b3b      	subs	r3, r7, r4
 80910b4:	f023 0303 	bic.w	r3, r3, #3
 80910b8:	3304      	adds	r3, #4
 80910ba:	3401      	adds	r4, #1
 80910bc:	3e03      	subs	r6, #3
 80910be:	42b4      	cmp	r4, r6
 80910c0:	bf88      	it	hi
 80910c2:	2304      	movhi	r3, #4
 80910c4:	2200      	movs	r2, #0
 80910c6:	4443      	add	r3, r8
 80910c8:	f843 2b04 	str.w	r2, [r3], #4
 80910cc:	429f      	cmp	r7, r3
 80910ce:	d2fb      	bcs.n	80910c8 <__hexnan+0xcc>
 80910d0:	683b      	ldr	r3, [r7, #0]
 80910d2:	b91b      	cbnz	r3, 80910dc <__hexnan+0xe0>
 80910d4:	4547      	cmp	r7, r8
 80910d6:	d127      	bne.n	8091128 <__hexnan+0x12c>
 80910d8:	2301      	movs	r3, #1
 80910da:	603b      	str	r3, [r7, #0]
 80910dc:	2005      	movs	r0, #5
 80910de:	e026      	b.n	809112e <__hexnan+0x132>
 80910e0:	3501      	adds	r5, #1
 80910e2:	2d08      	cmp	r5, #8
 80910e4:	f10b 0b01 	add.w	fp, fp, #1
 80910e8:	dd06      	ble.n	80910f8 <__hexnan+0xfc>
 80910ea:	4544      	cmp	r4, r8
 80910ec:	d9c3      	bls.n	8091076 <__hexnan+0x7a>
 80910ee:	2300      	movs	r3, #0
 80910f0:	2501      	movs	r5, #1
 80910f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80910f6:	3c04      	subs	r4, #4
 80910f8:	6822      	ldr	r2, [r4, #0]
 80910fa:	f000 000f 	and.w	r0, r0, #15
 80910fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8091102:	6022      	str	r2, [r4, #0]
 8091104:	e7b7      	b.n	8091076 <__hexnan+0x7a>
 8091106:	2508      	movs	r5, #8
 8091108:	e7b5      	b.n	8091076 <__hexnan+0x7a>
 809110a:	9b01      	ldr	r3, [sp, #4]
 809110c:	2b00      	cmp	r3, #0
 809110e:	d0df      	beq.n	80910d0 <__hexnan+0xd4>
 8091110:	f04f 32ff 	mov.w	r2, #4294967295
 8091114:	f1c3 0320 	rsb	r3, r3, #32
 8091118:	fa22 f303 	lsr.w	r3, r2, r3
 809111c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8091120:	401a      	ands	r2, r3
 8091122:	f846 2c04 	str.w	r2, [r6, #-4]
 8091126:	e7d3      	b.n	80910d0 <__hexnan+0xd4>
 8091128:	3f04      	subs	r7, #4
 809112a:	e7d1      	b.n	80910d0 <__hexnan+0xd4>
 809112c:	2004      	movs	r0, #4
 809112e:	b007      	add	sp, #28
 8091130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08091134 <_findenv_r>:
 8091134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8091138:	4607      	mov	r7, r0
 809113a:	4689      	mov	r9, r1
 809113c:	4616      	mov	r6, r2
 809113e:	f000 fd5d 	bl	8091bfc <__env_lock>
 8091142:	4b18      	ldr	r3, [pc, #96]	; (80911a4 <_findenv_r+0x70>)
 8091144:	681c      	ldr	r4, [r3, #0]
 8091146:	469a      	mov	sl, r3
 8091148:	b134      	cbz	r4, 8091158 <_findenv_r+0x24>
 809114a:	464b      	mov	r3, r9
 809114c:	4698      	mov	r8, r3
 809114e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8091152:	b139      	cbz	r1, 8091164 <_findenv_r+0x30>
 8091154:	293d      	cmp	r1, #61	; 0x3d
 8091156:	d1f9      	bne.n	809114c <_findenv_r+0x18>
 8091158:	4638      	mov	r0, r7
 809115a:	f000 fd55 	bl	8091c08 <__env_unlock>
 809115e:	2000      	movs	r0, #0
 8091160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8091164:	eba8 0809 	sub.w	r8, r8, r9
 8091168:	46a3      	mov	fp, r4
 809116a:	f854 0b04 	ldr.w	r0, [r4], #4
 809116e:	2800      	cmp	r0, #0
 8091170:	d0f2      	beq.n	8091158 <_findenv_r+0x24>
 8091172:	4642      	mov	r2, r8
 8091174:	4649      	mov	r1, r9
 8091176:	f7fe faad 	bl	808f6d4 <strncmp>
 809117a:	2800      	cmp	r0, #0
 809117c:	d1f4      	bne.n	8091168 <_findenv_r+0x34>
 809117e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8091182:	eb03 0508 	add.w	r5, r3, r8
 8091186:	f813 3008 	ldrb.w	r3, [r3, r8]
 809118a:	2b3d      	cmp	r3, #61	; 0x3d
 809118c:	d1ec      	bne.n	8091168 <_findenv_r+0x34>
 809118e:	f8da 3000 	ldr.w	r3, [sl]
 8091192:	4638      	mov	r0, r7
 8091194:	ebab 0303 	sub.w	r3, fp, r3
 8091198:	109b      	asrs	r3, r3, #2
 809119a:	6033      	str	r3, [r6, #0]
 809119c:	f000 fd34 	bl	8091c08 <__env_unlock>
 80911a0:	1c68      	adds	r0, r5, #1
 80911a2:	e7dd      	b.n	8091160 <_findenv_r+0x2c>
 80911a4:	20000320 	.word	0x20000320

080911a8 <_getenv_r>:
 80911a8:	b507      	push	{r0, r1, r2, lr}
 80911aa:	aa01      	add	r2, sp, #4
 80911ac:	f7ff ffc2 	bl	8091134 <_findenv_r>
 80911b0:	b003      	add	sp, #12
 80911b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080911b8 <__gettzinfo>:
 80911b8:	4800      	ldr	r0, [pc, #0]	; (80911bc <__gettzinfo+0x4>)
 80911ba:	4770      	bx	lr
 80911bc:	20000158 	.word	0x20000158

080911c0 <gmtime_r>:
 80911c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80911c4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80911c8:	460c      	mov	r4, r1
 80911ca:	2300      	movs	r3, #0
 80911cc:	4630      	mov	r0, r6
 80911ce:	4639      	mov	r1, r7
 80911d0:	4a4f      	ldr	r2, [pc, #316]	; (8091310 <gmtime_r+0x150>)
 80911d2:	f7fd f929 	bl	808e428 <__aeabi_ldivmod>
 80911d6:	4639      	mov	r1, r7
 80911d8:	4605      	mov	r5, r0
 80911da:	2300      	movs	r3, #0
 80911dc:	4630      	mov	r0, r6
 80911de:	4a4c      	ldr	r2, [pc, #304]	; (8091310 <gmtime_r+0x150>)
 80911e0:	f7fd f922 	bl	808e428 <__aeabi_ldivmod>
 80911e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80911e8:	2a00      	cmp	r2, #0
 80911ea:	bfbc      	itt	lt
 80911ec:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80911f0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80911f4:	fbb2 f3f1 	udiv	r3, r2, r1
 80911f8:	fb01 2213 	mls	r2, r1, r3, r2
 80911fc:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8091200:	60a3      	str	r3, [r4, #8]
 8091202:	fbb2 f3f1 	udiv	r3, r2, r1
 8091206:	fb01 2213 	mls	r2, r1, r3, r2
 809120a:	6022      	str	r2, [r4, #0]
 809120c:	f04f 0207 	mov.w	r2, #7
 8091210:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8091214:	bfac      	ite	ge
 8091216:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 809121a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 809121e:	6063      	str	r3, [r4, #4]
 8091220:	1cc3      	adds	r3, r0, #3
 8091222:	fb93 f2f2 	sdiv	r2, r3, r2
 8091226:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 809122a:	1a9b      	subs	r3, r3, r2
 809122c:	bf48      	it	mi
 809122e:	3307      	addmi	r3, #7
 8091230:	2800      	cmp	r0, #0
 8091232:	4938      	ldr	r1, [pc, #224]	; (8091314 <gmtime_r+0x154>)
 8091234:	61a3      	str	r3, [r4, #24]
 8091236:	bfbd      	ittte	lt
 8091238:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 809123c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8091240:	fb93 f1f1 	sdivlt	r1, r3, r1
 8091244:	fb90 f1f1 	sdivge	r1, r0, r1
 8091248:	f648 62ac 	movw	r2, #36524	; 0x8eac
 809124c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8091250:	4b31      	ldr	r3, [pc, #196]	; (8091318 <gmtime_r+0x158>)
 8091252:	f240 176d 	movw	r7, #365	; 0x16d
 8091256:	fb03 0001 	mla	r0, r3, r1, r0
 809125a:	fbb0 f2f2 	udiv	r2, r0, r2
 809125e:	fbb0 f3fc 	udiv	r3, r0, ip
 8091262:	4402      	add	r2, r0
 8091264:	1ad2      	subs	r2, r2, r3
 8091266:	4b2d      	ldr	r3, [pc, #180]	; (809131c <gmtime_r+0x15c>)
 8091268:	2664      	movs	r6, #100	; 0x64
 809126a:	fbb0 f3f3 	udiv	r3, r0, r3
 809126e:	1ad3      	subs	r3, r2, r3
 8091270:	fbb3 f5f7 	udiv	r5, r3, r7
 8091274:	fbb3 f3fc 	udiv	r3, r3, ip
 8091278:	fbb5 f2f6 	udiv	r2, r5, r6
 809127c:	1ad3      	subs	r3, r2, r3
 809127e:	4403      	add	r3, r0
 8091280:	2099      	movs	r0, #153	; 0x99
 8091282:	fb07 3315 	mls	r3, r7, r5, r3
 8091286:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 809128a:	f10c 0c02 	add.w	ip, ip, #2
 809128e:	fbbc f7f0 	udiv	r7, ip, r0
 8091292:	f04f 0805 	mov.w	r8, #5
 8091296:	4378      	muls	r0, r7
 8091298:	3002      	adds	r0, #2
 809129a:	fbb0 f0f8 	udiv	r0, r0, r8
 809129e:	f103 0e01 	add.w	lr, r3, #1
 80912a2:	ebae 0000 	sub.w	r0, lr, r0
 80912a6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80912aa:	45f4      	cmp	ip, lr
 80912ac:	bf94      	ite	ls
 80912ae:	f04f 0c02 	movls.w	ip, #2
 80912b2:	f06f 0c09 	mvnhi.w	ip, #9
 80912b6:	4467      	add	r7, ip
 80912b8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80912bc:	fb0c 5101 	mla	r1, ip, r1, r5
 80912c0:	2f01      	cmp	r7, #1
 80912c2:	bf98      	it	ls
 80912c4:	3101      	addls	r1, #1
 80912c6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80912ca:	d30c      	bcc.n	80912e6 <gmtime_r+0x126>
 80912cc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80912d0:	61e3      	str	r3, [r4, #28]
 80912d2:	2300      	movs	r3, #0
 80912d4:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80912d8:	60e0      	str	r0, [r4, #12]
 80912da:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80912de:	4620      	mov	r0, r4
 80912e0:	6223      	str	r3, [r4, #32]
 80912e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80912e6:	f015 0f03 	tst.w	r5, #3
 80912ea:	d102      	bne.n	80912f2 <gmtime_r+0x132>
 80912ec:	fb06 5212 	mls	r2, r6, r2, r5
 80912f0:	b95a      	cbnz	r2, 809130a <gmtime_r+0x14a>
 80912f2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80912f6:	fbb5 f2f6 	udiv	r2, r5, r6
 80912fa:	fb06 5212 	mls	r2, r6, r2, r5
 80912fe:	fab2 f282 	clz	r2, r2
 8091302:	0952      	lsrs	r2, r2, #5
 8091304:	333b      	adds	r3, #59	; 0x3b
 8091306:	4413      	add	r3, r2
 8091308:	e7e2      	b.n	80912d0 <gmtime_r+0x110>
 809130a:	2201      	movs	r2, #1
 809130c:	e7fa      	b.n	8091304 <gmtime_r+0x144>
 809130e:	bf00      	nop
 8091310:	00015180 	.word	0x00015180
 8091314:	00023ab1 	.word	0x00023ab1
 8091318:	fffdc54f 	.word	0xfffdc54f
 809131c:	00023ab0 	.word	0x00023ab0

08091320 <labs>:
 8091320:	2800      	cmp	r0, #0
 8091322:	bfb8      	it	lt
 8091324:	4240      	neglt	r0, r0
 8091326:	4770      	bx	lr

08091328 <__retarget_lock_acquire>:
 8091328:	4770      	bx	lr

0809132a <__retarget_lock_acquire_recursive>:
 809132a:	4770      	bx	lr

0809132c <__retarget_lock_release>:
 809132c:	4770      	bx	lr

0809132e <__retarget_lock_release_recursive>:
 809132e:	4770      	bx	lr

08091330 <__ascii_mbtowc>:
 8091330:	b082      	sub	sp, #8
 8091332:	b901      	cbnz	r1, 8091336 <__ascii_mbtowc+0x6>
 8091334:	a901      	add	r1, sp, #4
 8091336:	b142      	cbz	r2, 809134a <__ascii_mbtowc+0x1a>
 8091338:	b14b      	cbz	r3, 809134e <__ascii_mbtowc+0x1e>
 809133a:	7813      	ldrb	r3, [r2, #0]
 809133c:	600b      	str	r3, [r1, #0]
 809133e:	7812      	ldrb	r2, [r2, #0]
 8091340:	1e10      	subs	r0, r2, #0
 8091342:	bf18      	it	ne
 8091344:	2001      	movne	r0, #1
 8091346:	b002      	add	sp, #8
 8091348:	4770      	bx	lr
 809134a:	4610      	mov	r0, r2
 809134c:	e7fb      	b.n	8091346 <__ascii_mbtowc+0x16>
 809134e:	f06f 0001 	mvn.w	r0, #1
 8091352:	e7f8      	b.n	8091346 <__ascii_mbtowc+0x16>

08091354 <_Balloc>:
 8091354:	b570      	push	{r4, r5, r6, lr}
 8091356:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8091358:	4604      	mov	r4, r0
 809135a:	460d      	mov	r5, r1
 809135c:	b93e      	cbnz	r6, 809136e <_Balloc+0x1a>
 809135e:	2010      	movs	r0, #16
 8091360:	f7f9 fc2c 	bl	808abbc <malloc>
 8091364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8091368:	6260      	str	r0, [r4, #36]	; 0x24
 809136a:	6006      	str	r6, [r0, #0]
 809136c:	60c6      	str	r6, [r0, #12]
 809136e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8091370:	68f3      	ldr	r3, [r6, #12]
 8091372:	b183      	cbz	r3, 8091396 <_Balloc+0x42>
 8091374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8091376:	68db      	ldr	r3, [r3, #12]
 8091378:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 809137c:	b9b8      	cbnz	r0, 80913ae <_Balloc+0x5a>
 809137e:	2101      	movs	r1, #1
 8091380:	fa01 f605 	lsl.w	r6, r1, r5
 8091384:	1d72      	adds	r2, r6, #5
 8091386:	4620      	mov	r0, r4
 8091388:	0092      	lsls	r2, r2, #2
 809138a:	f000 fc1c 	bl	8091bc6 <_calloc_r>
 809138e:	b160      	cbz	r0, 80913aa <_Balloc+0x56>
 8091390:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8091394:	e00e      	b.n	80913b4 <_Balloc+0x60>
 8091396:	2221      	movs	r2, #33	; 0x21
 8091398:	2104      	movs	r1, #4
 809139a:	4620      	mov	r0, r4
 809139c:	f000 fc13 	bl	8091bc6 <_calloc_r>
 80913a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80913a2:	60f0      	str	r0, [r6, #12]
 80913a4:	68db      	ldr	r3, [r3, #12]
 80913a6:	2b00      	cmp	r3, #0
 80913a8:	d1e4      	bne.n	8091374 <_Balloc+0x20>
 80913aa:	2000      	movs	r0, #0
 80913ac:	bd70      	pop	{r4, r5, r6, pc}
 80913ae:	6802      	ldr	r2, [r0, #0]
 80913b0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80913b4:	2300      	movs	r3, #0
 80913b6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80913ba:	e7f7      	b.n	80913ac <_Balloc+0x58>

080913bc <_Bfree>:
 80913bc:	b570      	push	{r4, r5, r6, lr}
 80913be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80913c0:	4605      	mov	r5, r0
 80913c2:	460c      	mov	r4, r1
 80913c4:	b93e      	cbnz	r6, 80913d6 <_Bfree+0x1a>
 80913c6:	2010      	movs	r0, #16
 80913c8:	f7f9 fbf8 	bl	808abbc <malloc>
 80913cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80913d0:	6268      	str	r0, [r5, #36]	; 0x24
 80913d2:	6006      	str	r6, [r0, #0]
 80913d4:	60c6      	str	r6, [r0, #12]
 80913d6:	b13c      	cbz	r4, 80913e8 <_Bfree+0x2c>
 80913d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80913da:	6862      	ldr	r2, [r4, #4]
 80913dc:	68db      	ldr	r3, [r3, #12]
 80913de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80913e2:	6021      	str	r1, [r4, #0]
 80913e4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80913e8:	bd70      	pop	{r4, r5, r6, pc}

080913ea <__multadd>:
 80913ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80913ee:	4698      	mov	r8, r3
 80913f0:	460c      	mov	r4, r1
 80913f2:	2300      	movs	r3, #0
 80913f4:	690e      	ldr	r6, [r1, #16]
 80913f6:	4607      	mov	r7, r0
 80913f8:	f101 0014 	add.w	r0, r1, #20
 80913fc:	6805      	ldr	r5, [r0, #0]
 80913fe:	3301      	adds	r3, #1
 8091400:	b2a9      	uxth	r1, r5
 8091402:	fb02 8101 	mla	r1, r2, r1, r8
 8091406:	0c2d      	lsrs	r5, r5, #16
 8091408:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 809140c:	fb02 c505 	mla	r5, r2, r5, ip
 8091410:	b289      	uxth	r1, r1
 8091412:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8091416:	429e      	cmp	r6, r3
 8091418:	ea4f 4815 	mov.w	r8, r5, lsr #16
 809141c:	f840 1b04 	str.w	r1, [r0], #4
 8091420:	dcec      	bgt.n	80913fc <__multadd+0x12>
 8091422:	f1b8 0f00 	cmp.w	r8, #0
 8091426:	d01b      	beq.n	8091460 <__multadd+0x76>
 8091428:	68a3      	ldr	r3, [r4, #8]
 809142a:	42b3      	cmp	r3, r6
 809142c:	dc12      	bgt.n	8091454 <__multadd+0x6a>
 809142e:	6861      	ldr	r1, [r4, #4]
 8091430:	4638      	mov	r0, r7
 8091432:	3101      	adds	r1, #1
 8091434:	f7ff ff8e 	bl	8091354 <_Balloc>
 8091438:	4605      	mov	r5, r0
 809143a:	6922      	ldr	r2, [r4, #16]
 809143c:	f104 010c 	add.w	r1, r4, #12
 8091440:	3202      	adds	r2, #2
 8091442:	0092      	lsls	r2, r2, #2
 8091444:	300c      	adds	r0, #12
 8091446:	f7fd fb65 	bl	808eb14 <memcpy>
 809144a:	4621      	mov	r1, r4
 809144c:	4638      	mov	r0, r7
 809144e:	f7ff ffb5 	bl	80913bc <_Bfree>
 8091452:	462c      	mov	r4, r5
 8091454:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8091458:	3601      	adds	r6, #1
 809145a:	f8c3 8014 	str.w	r8, [r3, #20]
 809145e:	6126      	str	r6, [r4, #16]
 8091460:	4620      	mov	r0, r4
 8091462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08091466 <__s2b>:
 8091466:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 809146a:	4615      	mov	r5, r2
 809146c:	2209      	movs	r2, #9
 809146e:	461f      	mov	r7, r3
 8091470:	3308      	adds	r3, #8
 8091472:	460c      	mov	r4, r1
 8091474:	fb93 f3f2 	sdiv	r3, r3, r2
 8091478:	4606      	mov	r6, r0
 809147a:	2201      	movs	r2, #1
 809147c:	2100      	movs	r1, #0
 809147e:	429a      	cmp	r2, r3
 8091480:	db20      	blt.n	80914c4 <__s2b+0x5e>
 8091482:	4630      	mov	r0, r6
 8091484:	f7ff ff66 	bl	8091354 <_Balloc>
 8091488:	9b08      	ldr	r3, [sp, #32]
 809148a:	2d09      	cmp	r5, #9
 809148c:	6143      	str	r3, [r0, #20]
 809148e:	f04f 0301 	mov.w	r3, #1
 8091492:	6103      	str	r3, [r0, #16]
 8091494:	dd19      	ble.n	80914ca <__s2b+0x64>
 8091496:	f104 0909 	add.w	r9, r4, #9
 809149a:	46c8      	mov	r8, r9
 809149c:	442c      	add	r4, r5
 809149e:	f818 3b01 	ldrb.w	r3, [r8], #1
 80914a2:	4601      	mov	r1, r0
 80914a4:	220a      	movs	r2, #10
 80914a6:	4630      	mov	r0, r6
 80914a8:	3b30      	subs	r3, #48	; 0x30
 80914aa:	f7ff ff9e 	bl	80913ea <__multadd>
 80914ae:	45a0      	cmp	r8, r4
 80914b0:	d1f5      	bne.n	809149e <__s2b+0x38>
 80914b2:	f1a5 0408 	sub.w	r4, r5, #8
 80914b6:	444c      	add	r4, r9
 80914b8:	1b2d      	subs	r5, r5, r4
 80914ba:	1963      	adds	r3, r4, r5
 80914bc:	42bb      	cmp	r3, r7
 80914be:	db07      	blt.n	80914d0 <__s2b+0x6a>
 80914c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80914c4:	0052      	lsls	r2, r2, #1
 80914c6:	3101      	adds	r1, #1
 80914c8:	e7d9      	b.n	809147e <__s2b+0x18>
 80914ca:	2509      	movs	r5, #9
 80914cc:	340a      	adds	r4, #10
 80914ce:	e7f3      	b.n	80914b8 <__s2b+0x52>
 80914d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80914d4:	4601      	mov	r1, r0
 80914d6:	220a      	movs	r2, #10
 80914d8:	4630      	mov	r0, r6
 80914da:	3b30      	subs	r3, #48	; 0x30
 80914dc:	f7ff ff85 	bl	80913ea <__multadd>
 80914e0:	e7eb      	b.n	80914ba <__s2b+0x54>

080914e2 <__hi0bits>:
 80914e2:	0c02      	lsrs	r2, r0, #16
 80914e4:	0412      	lsls	r2, r2, #16
 80914e6:	4603      	mov	r3, r0
 80914e8:	b9ca      	cbnz	r2, 809151e <__hi0bits+0x3c>
 80914ea:	0403      	lsls	r3, r0, #16
 80914ec:	2010      	movs	r0, #16
 80914ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80914f2:	bf04      	itt	eq
 80914f4:	021b      	lsleq	r3, r3, #8
 80914f6:	3008      	addeq	r0, #8
 80914f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80914fc:	bf04      	itt	eq
 80914fe:	011b      	lsleq	r3, r3, #4
 8091500:	3004      	addeq	r0, #4
 8091502:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8091506:	bf04      	itt	eq
 8091508:	009b      	lsleq	r3, r3, #2
 809150a:	3002      	addeq	r0, #2
 809150c:	2b00      	cmp	r3, #0
 809150e:	db05      	blt.n	809151c <__hi0bits+0x3a>
 8091510:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8091514:	f100 0001 	add.w	r0, r0, #1
 8091518:	bf08      	it	eq
 809151a:	2020      	moveq	r0, #32
 809151c:	4770      	bx	lr
 809151e:	2000      	movs	r0, #0
 8091520:	e7e5      	b.n	80914ee <__hi0bits+0xc>

08091522 <__lo0bits>:
 8091522:	6803      	ldr	r3, [r0, #0]
 8091524:	4602      	mov	r2, r0
 8091526:	f013 0007 	ands.w	r0, r3, #7
 809152a:	d00b      	beq.n	8091544 <__lo0bits+0x22>
 809152c:	07d9      	lsls	r1, r3, #31
 809152e:	d422      	bmi.n	8091576 <__lo0bits+0x54>
 8091530:	0798      	lsls	r0, r3, #30
 8091532:	bf49      	itett	mi
 8091534:	085b      	lsrmi	r3, r3, #1
 8091536:	089b      	lsrpl	r3, r3, #2
 8091538:	2001      	movmi	r0, #1
 809153a:	6013      	strmi	r3, [r2, #0]
 809153c:	bf5c      	itt	pl
 809153e:	2002      	movpl	r0, #2
 8091540:	6013      	strpl	r3, [r2, #0]
 8091542:	4770      	bx	lr
 8091544:	b299      	uxth	r1, r3
 8091546:	b909      	cbnz	r1, 809154c <__lo0bits+0x2a>
 8091548:	2010      	movs	r0, #16
 809154a:	0c1b      	lsrs	r3, r3, #16
 809154c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8091550:	bf04      	itt	eq
 8091552:	0a1b      	lsreq	r3, r3, #8
 8091554:	3008      	addeq	r0, #8
 8091556:	0719      	lsls	r1, r3, #28
 8091558:	bf04      	itt	eq
 809155a:	091b      	lsreq	r3, r3, #4
 809155c:	3004      	addeq	r0, #4
 809155e:	0799      	lsls	r1, r3, #30
 8091560:	bf04      	itt	eq
 8091562:	089b      	lsreq	r3, r3, #2
 8091564:	3002      	addeq	r0, #2
 8091566:	07d9      	lsls	r1, r3, #31
 8091568:	d403      	bmi.n	8091572 <__lo0bits+0x50>
 809156a:	085b      	lsrs	r3, r3, #1
 809156c:	f100 0001 	add.w	r0, r0, #1
 8091570:	d003      	beq.n	809157a <__lo0bits+0x58>
 8091572:	6013      	str	r3, [r2, #0]
 8091574:	4770      	bx	lr
 8091576:	2000      	movs	r0, #0
 8091578:	4770      	bx	lr
 809157a:	2020      	movs	r0, #32
 809157c:	4770      	bx	lr

0809157e <__i2b>:
 809157e:	b510      	push	{r4, lr}
 8091580:	460c      	mov	r4, r1
 8091582:	2101      	movs	r1, #1
 8091584:	f7ff fee6 	bl	8091354 <_Balloc>
 8091588:	2201      	movs	r2, #1
 809158a:	6144      	str	r4, [r0, #20]
 809158c:	6102      	str	r2, [r0, #16]
 809158e:	bd10      	pop	{r4, pc}

08091590 <__multiply>:
 8091590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8091594:	4615      	mov	r5, r2
 8091596:	690a      	ldr	r2, [r1, #16]
 8091598:	692b      	ldr	r3, [r5, #16]
 809159a:	460c      	mov	r4, r1
 809159c:	429a      	cmp	r2, r3
 809159e:	bfbe      	ittt	lt
 80915a0:	460b      	movlt	r3, r1
 80915a2:	462c      	movlt	r4, r5
 80915a4:	461d      	movlt	r5, r3
 80915a6:	6927      	ldr	r7, [r4, #16]
 80915a8:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80915ac:	68a3      	ldr	r3, [r4, #8]
 80915ae:	6861      	ldr	r1, [r4, #4]
 80915b0:	eb07 0609 	add.w	r6, r7, r9
 80915b4:	42b3      	cmp	r3, r6
 80915b6:	bfb8      	it	lt
 80915b8:	3101      	addlt	r1, #1
 80915ba:	b085      	sub	sp, #20
 80915bc:	f7ff feca 	bl	8091354 <_Balloc>
 80915c0:	f100 0114 	add.w	r1, r0, #20
 80915c4:	460b      	mov	r3, r1
 80915c6:	2200      	movs	r2, #0
 80915c8:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 80915cc:	4543      	cmp	r3, r8
 80915ce:	d31d      	bcc.n	809160c <__multiply+0x7c>
 80915d0:	f104 0314 	add.w	r3, r4, #20
 80915d4:	f105 0214 	add.w	r2, r5, #20
 80915d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80915dc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80915e0:	9302      	str	r3, [sp, #8]
 80915e2:	1b3b      	subs	r3, r7, r4
 80915e4:	3b15      	subs	r3, #21
 80915e6:	f023 0303 	bic.w	r3, r3, #3
 80915ea:	3304      	adds	r3, #4
 80915ec:	f104 0515 	add.w	r5, r4, #21
 80915f0:	42af      	cmp	r7, r5
 80915f2:	bf38      	it	cc
 80915f4:	2304      	movcc	r3, #4
 80915f6:	9301      	str	r3, [sp, #4]
 80915f8:	9b02      	ldr	r3, [sp, #8]
 80915fa:	9203      	str	r2, [sp, #12]
 80915fc:	4293      	cmp	r3, r2
 80915fe:	d808      	bhi.n	8091612 <__multiply+0x82>
 8091600:	2e00      	cmp	r6, #0
 8091602:	dc5a      	bgt.n	80916ba <__multiply+0x12a>
 8091604:	6106      	str	r6, [r0, #16]
 8091606:	b005      	add	sp, #20
 8091608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809160c:	f843 2b04 	str.w	r2, [r3], #4
 8091610:	e7dc      	b.n	80915cc <__multiply+0x3c>
 8091612:	f8b2 a000 	ldrh.w	sl, [r2]
 8091616:	f1ba 0f00 	cmp.w	sl, #0
 809161a:	d024      	beq.n	8091666 <__multiply+0xd6>
 809161c:	4689      	mov	r9, r1
 809161e:	f04f 0c00 	mov.w	ip, #0
 8091622:	f104 0e14 	add.w	lr, r4, #20
 8091626:	f85e 5b04 	ldr.w	r5, [lr], #4
 809162a:	f8d9 b000 	ldr.w	fp, [r9]
 809162e:	b2ab      	uxth	r3, r5
 8091630:	fa1f fb8b 	uxth.w	fp, fp
 8091634:	fb0a b303 	mla	r3, sl, r3, fp
 8091638:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 809163c:	f8d9 5000 	ldr.w	r5, [r9]
 8091640:	4463      	add	r3, ip
 8091642:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8091646:	fb0a c50b 	mla	r5, sl, fp, ip
 809164a:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 809164e:	b29b      	uxth	r3, r3
 8091650:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8091654:	4577      	cmp	r7, lr
 8091656:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 809165a:	f849 3b04 	str.w	r3, [r9], #4
 809165e:	d8e2      	bhi.n	8091626 <__multiply+0x96>
 8091660:	9b01      	ldr	r3, [sp, #4]
 8091662:	f841 c003 	str.w	ip, [r1, r3]
 8091666:	9b03      	ldr	r3, [sp, #12]
 8091668:	3204      	adds	r2, #4
 809166a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 809166e:	f1b9 0f00 	cmp.w	r9, #0
 8091672:	d020      	beq.n	80916b6 <__multiply+0x126>
 8091674:	468e      	mov	lr, r1
 8091676:	f04f 0a00 	mov.w	sl, #0
 809167a:	680b      	ldr	r3, [r1, #0]
 809167c:	f104 0c14 	add.w	ip, r4, #20
 8091680:	f8bc 5000 	ldrh.w	r5, [ip]
 8091684:	f8be b002 	ldrh.w	fp, [lr, #2]
 8091688:	b29b      	uxth	r3, r3
 809168a:	fb09 b505 	mla	r5, r9, r5, fp
 809168e:	44aa      	add	sl, r5
 8091690:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8091694:	f84e 3b04 	str.w	r3, [lr], #4
 8091698:	f85c 3b04 	ldr.w	r3, [ip], #4
 809169c:	f8be 5000 	ldrh.w	r5, [lr]
 80916a0:	0c1b      	lsrs	r3, r3, #16
 80916a2:	fb09 5303 	mla	r3, r9, r3, r5
 80916a6:	4567      	cmp	r7, ip
 80916a8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80916ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80916b0:	d8e6      	bhi.n	8091680 <__multiply+0xf0>
 80916b2:	9d01      	ldr	r5, [sp, #4]
 80916b4:	514b      	str	r3, [r1, r5]
 80916b6:	3104      	adds	r1, #4
 80916b8:	e79e      	b.n	80915f8 <__multiply+0x68>
 80916ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80916be:	2b00      	cmp	r3, #0
 80916c0:	d1a0      	bne.n	8091604 <__multiply+0x74>
 80916c2:	3e01      	subs	r6, #1
 80916c4:	e79c      	b.n	8091600 <__multiply+0x70>
	...

080916c8 <__pow5mult>:
 80916c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80916cc:	4615      	mov	r5, r2
 80916ce:	f012 0203 	ands.w	r2, r2, #3
 80916d2:	4606      	mov	r6, r0
 80916d4:	460f      	mov	r7, r1
 80916d6:	d007      	beq.n	80916e8 <__pow5mult+0x20>
 80916d8:	4c21      	ldr	r4, [pc, #132]	; (8091760 <__pow5mult+0x98>)
 80916da:	3a01      	subs	r2, #1
 80916dc:	2300      	movs	r3, #0
 80916de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80916e2:	f7ff fe82 	bl	80913ea <__multadd>
 80916e6:	4607      	mov	r7, r0
 80916e8:	10ad      	asrs	r5, r5, #2
 80916ea:	d035      	beq.n	8091758 <__pow5mult+0x90>
 80916ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80916ee:	b93c      	cbnz	r4, 8091700 <__pow5mult+0x38>
 80916f0:	2010      	movs	r0, #16
 80916f2:	f7f9 fa63 	bl	808abbc <malloc>
 80916f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80916fa:	6270      	str	r0, [r6, #36]	; 0x24
 80916fc:	6004      	str	r4, [r0, #0]
 80916fe:	60c4      	str	r4, [r0, #12]
 8091700:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8091704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8091708:	b94c      	cbnz	r4, 809171e <__pow5mult+0x56>
 809170a:	f240 2171 	movw	r1, #625	; 0x271
 809170e:	4630      	mov	r0, r6
 8091710:	f7ff ff35 	bl	809157e <__i2b>
 8091714:	2300      	movs	r3, #0
 8091716:	4604      	mov	r4, r0
 8091718:	f8c8 0008 	str.w	r0, [r8, #8]
 809171c:	6003      	str	r3, [r0, #0]
 809171e:	f04f 0900 	mov.w	r9, #0
 8091722:	07eb      	lsls	r3, r5, #31
 8091724:	d50a      	bpl.n	809173c <__pow5mult+0x74>
 8091726:	4639      	mov	r1, r7
 8091728:	4622      	mov	r2, r4
 809172a:	4630      	mov	r0, r6
 809172c:	f7ff ff30 	bl	8091590 <__multiply>
 8091730:	4680      	mov	r8, r0
 8091732:	4639      	mov	r1, r7
 8091734:	4630      	mov	r0, r6
 8091736:	f7ff fe41 	bl	80913bc <_Bfree>
 809173a:	4647      	mov	r7, r8
 809173c:	106d      	asrs	r5, r5, #1
 809173e:	d00b      	beq.n	8091758 <__pow5mult+0x90>
 8091740:	6820      	ldr	r0, [r4, #0]
 8091742:	b938      	cbnz	r0, 8091754 <__pow5mult+0x8c>
 8091744:	4622      	mov	r2, r4
 8091746:	4621      	mov	r1, r4
 8091748:	4630      	mov	r0, r6
 809174a:	f7ff ff21 	bl	8091590 <__multiply>
 809174e:	6020      	str	r0, [r4, #0]
 8091750:	f8c0 9000 	str.w	r9, [r0]
 8091754:	4604      	mov	r4, r0
 8091756:	e7e4      	b.n	8091722 <__pow5mult+0x5a>
 8091758:	4638      	mov	r0, r7
 809175a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 809175e:	bf00      	nop
 8091760:	08094b40 	.word	0x08094b40

08091764 <__lshift>:
 8091764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8091768:	460c      	mov	r4, r1
 809176a:	4607      	mov	r7, r0
 809176c:	4691      	mov	r9, r2
 809176e:	6923      	ldr	r3, [r4, #16]
 8091770:	6849      	ldr	r1, [r1, #4]
 8091772:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8091776:	68a3      	ldr	r3, [r4, #8]
 8091778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 809177c:	f108 0601 	add.w	r6, r8, #1
 8091780:	42b3      	cmp	r3, r6
 8091782:	db3f      	blt.n	8091804 <__lshift+0xa0>
 8091784:	4638      	mov	r0, r7
 8091786:	f7ff fde5 	bl	8091354 <_Balloc>
 809178a:	2300      	movs	r3, #0
 809178c:	4605      	mov	r5, r0
 809178e:	f100 0114 	add.w	r1, r0, #20
 8091792:	f100 0210 	add.w	r2, r0, #16
 8091796:	4618      	mov	r0, r3
 8091798:	4553      	cmp	r3, sl
 809179a:	db36      	blt.n	809180a <__lshift+0xa6>
 809179c:	6920      	ldr	r0, [r4, #16]
 809179e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80917a2:	f104 0314 	add.w	r3, r4, #20
 80917a6:	f019 091f 	ands.w	r9, r9, #31
 80917aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80917ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80917b2:	d02e      	beq.n	8091812 <__lshift+0xae>
 80917b4:	468a      	mov	sl, r1
 80917b6:	2200      	movs	r2, #0
 80917b8:	f1c9 0e20 	rsb	lr, r9, #32
 80917bc:	6818      	ldr	r0, [r3, #0]
 80917be:	fa00 f009 	lsl.w	r0, r0, r9
 80917c2:	4302      	orrs	r2, r0
 80917c4:	f84a 2b04 	str.w	r2, [sl], #4
 80917c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80917cc:	459c      	cmp	ip, r3
 80917ce:	fa22 f20e 	lsr.w	r2, r2, lr
 80917d2:	d8f3      	bhi.n	80917bc <__lshift+0x58>
 80917d4:	ebac 0304 	sub.w	r3, ip, r4
 80917d8:	3b15      	subs	r3, #21
 80917da:	f023 0303 	bic.w	r3, r3, #3
 80917de:	3304      	adds	r3, #4
 80917e0:	f104 0015 	add.w	r0, r4, #21
 80917e4:	4560      	cmp	r0, ip
 80917e6:	bf88      	it	hi
 80917e8:	2304      	movhi	r3, #4
 80917ea:	50ca      	str	r2, [r1, r3]
 80917ec:	b10a      	cbz	r2, 80917f2 <__lshift+0x8e>
 80917ee:	f108 0602 	add.w	r6, r8, #2
 80917f2:	3e01      	subs	r6, #1
 80917f4:	4638      	mov	r0, r7
 80917f6:	4621      	mov	r1, r4
 80917f8:	612e      	str	r6, [r5, #16]
 80917fa:	f7ff fddf 	bl	80913bc <_Bfree>
 80917fe:	4628      	mov	r0, r5
 8091800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8091804:	3101      	adds	r1, #1
 8091806:	005b      	lsls	r3, r3, #1
 8091808:	e7ba      	b.n	8091780 <__lshift+0x1c>
 809180a:	f842 0f04 	str.w	r0, [r2, #4]!
 809180e:	3301      	adds	r3, #1
 8091810:	e7c2      	b.n	8091798 <__lshift+0x34>
 8091812:	3904      	subs	r1, #4
 8091814:	f853 2b04 	ldr.w	r2, [r3], #4
 8091818:	459c      	cmp	ip, r3
 809181a:	f841 2f04 	str.w	r2, [r1, #4]!
 809181e:	d8f9      	bhi.n	8091814 <__lshift+0xb0>
 8091820:	e7e7      	b.n	80917f2 <__lshift+0x8e>

08091822 <__mcmp>:
 8091822:	4603      	mov	r3, r0
 8091824:	690a      	ldr	r2, [r1, #16]
 8091826:	6900      	ldr	r0, [r0, #16]
 8091828:	b530      	push	{r4, r5, lr}
 809182a:	1a80      	subs	r0, r0, r2
 809182c:	d10d      	bne.n	809184a <__mcmp+0x28>
 809182e:	3314      	adds	r3, #20
 8091830:	3114      	adds	r1, #20
 8091832:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8091836:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 809183a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 809183e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8091842:	4295      	cmp	r5, r2
 8091844:	d002      	beq.n	809184c <__mcmp+0x2a>
 8091846:	d304      	bcc.n	8091852 <__mcmp+0x30>
 8091848:	2001      	movs	r0, #1
 809184a:	bd30      	pop	{r4, r5, pc}
 809184c:	42a3      	cmp	r3, r4
 809184e:	d3f4      	bcc.n	809183a <__mcmp+0x18>
 8091850:	e7fb      	b.n	809184a <__mcmp+0x28>
 8091852:	f04f 30ff 	mov.w	r0, #4294967295
 8091856:	e7f8      	b.n	809184a <__mcmp+0x28>

08091858 <__mdiff>:
 8091858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809185c:	460c      	mov	r4, r1
 809185e:	4606      	mov	r6, r0
 8091860:	4611      	mov	r1, r2
 8091862:	4620      	mov	r0, r4
 8091864:	4692      	mov	sl, r2
 8091866:	f7ff ffdc 	bl	8091822 <__mcmp>
 809186a:	1e05      	subs	r5, r0, #0
 809186c:	d108      	bne.n	8091880 <__mdiff+0x28>
 809186e:	4629      	mov	r1, r5
 8091870:	4630      	mov	r0, r6
 8091872:	f7ff fd6f 	bl	8091354 <_Balloc>
 8091876:	2301      	movs	r3, #1
 8091878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 809187c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8091880:	bfa4      	itt	ge
 8091882:	4653      	movge	r3, sl
 8091884:	46a2      	movge	sl, r4
 8091886:	4630      	mov	r0, r6
 8091888:	f8da 1004 	ldr.w	r1, [sl, #4]
 809188c:	bfa6      	itte	ge
 809188e:	461c      	movge	r4, r3
 8091890:	2500      	movge	r5, #0
 8091892:	2501      	movlt	r5, #1
 8091894:	f7ff fd5e 	bl	8091354 <_Balloc>
 8091898:	f100 0814 	add.w	r8, r0, #20
 809189c:	f8da 7010 	ldr.w	r7, [sl, #16]
 80918a0:	60c5      	str	r5, [r0, #12]
 80918a2:	f10a 0210 	add.w	r2, sl, #16
 80918a6:	f10a 0514 	add.w	r5, sl, #20
 80918aa:	f04f 0c00 	mov.w	ip, #0
 80918ae:	46c2      	mov	sl, r8
 80918b0:	6926      	ldr	r6, [r4, #16]
 80918b2:	f104 0914 	add.w	r9, r4, #20
 80918b6:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80918ba:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80918be:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80918c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80918c6:	fa1f f18b 	uxth.w	r1, fp
 80918ca:	4461      	add	r1, ip
 80918cc:	fa1f fc83 	uxth.w	ip, r3
 80918d0:	0c1b      	lsrs	r3, r3, #16
 80918d2:	eba1 010c 	sub.w	r1, r1, ip
 80918d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80918da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80918de:	b289      	uxth	r1, r1
 80918e0:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80918e4:	454e      	cmp	r6, r9
 80918e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80918ea:	f84a 3b04 	str.w	r3, [sl], #4
 80918ee:	d8e6      	bhi.n	80918be <__mdiff+0x66>
 80918f0:	1b33      	subs	r3, r6, r4
 80918f2:	3b15      	subs	r3, #21
 80918f4:	f023 0303 	bic.w	r3, r3, #3
 80918f8:	3415      	adds	r4, #21
 80918fa:	3304      	adds	r3, #4
 80918fc:	42a6      	cmp	r6, r4
 80918fe:	bf38      	it	cc
 8091900:	2304      	movcc	r3, #4
 8091902:	441d      	add	r5, r3
 8091904:	4443      	add	r3, r8
 8091906:	461e      	mov	r6, r3
 8091908:	462c      	mov	r4, r5
 809190a:	4574      	cmp	r4, lr
 809190c:	d30e      	bcc.n	809192c <__mdiff+0xd4>
 809190e:	f10e 0203 	add.w	r2, lr, #3
 8091912:	1b52      	subs	r2, r2, r5
 8091914:	f022 0203 	bic.w	r2, r2, #3
 8091918:	3d03      	subs	r5, #3
 809191a:	45ae      	cmp	lr, r5
 809191c:	bf38      	it	cc
 809191e:	2200      	movcc	r2, #0
 8091920:	441a      	add	r2, r3
 8091922:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8091926:	b18b      	cbz	r3, 809194c <__mdiff+0xf4>
 8091928:	6107      	str	r7, [r0, #16]
 809192a:	e7a7      	b.n	809187c <__mdiff+0x24>
 809192c:	f854 8b04 	ldr.w	r8, [r4], #4
 8091930:	fa1f f288 	uxth.w	r2, r8
 8091934:	4462      	add	r2, ip
 8091936:	1411      	asrs	r1, r2, #16
 8091938:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 809193c:	b292      	uxth	r2, r2
 809193e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8091942:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8091946:	f846 2b04 	str.w	r2, [r6], #4
 809194a:	e7de      	b.n	809190a <__mdiff+0xb2>
 809194c:	3f01      	subs	r7, #1
 809194e:	e7e8      	b.n	8091922 <__mdiff+0xca>

08091950 <__ulp>:
 8091950:	4b11      	ldr	r3, [pc, #68]	; (8091998 <__ulp+0x48>)
 8091952:	400b      	ands	r3, r1
 8091954:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8091958:	2b00      	cmp	r3, #0
 809195a:	dd02      	ble.n	8091962 <__ulp+0x12>
 809195c:	2000      	movs	r0, #0
 809195e:	4619      	mov	r1, r3
 8091960:	4770      	bx	lr
 8091962:	425b      	negs	r3, r3
 8091964:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8091968:	f04f 0000 	mov.w	r0, #0
 809196c:	f04f 0100 	mov.w	r1, #0
 8091970:	ea4f 5223 	mov.w	r2, r3, asr #20
 8091974:	da04      	bge.n	8091980 <__ulp+0x30>
 8091976:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 809197a:	fa43 f102 	asr.w	r1, r3, r2
 809197e:	4770      	bx	lr
 8091980:	f1a2 0314 	sub.w	r3, r2, #20
 8091984:	2b1e      	cmp	r3, #30
 8091986:	bfd6      	itet	le
 8091988:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 809198c:	2301      	movgt	r3, #1
 809198e:	fa22 f303 	lsrle.w	r3, r2, r3
 8091992:	4618      	mov	r0, r3
 8091994:	4770      	bx	lr
 8091996:	bf00      	nop
 8091998:	7ff00000 	.word	0x7ff00000

0809199c <__b2d>:
 809199c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80919a0:	6907      	ldr	r7, [r0, #16]
 80919a2:	f100 0914 	add.w	r9, r0, #20
 80919a6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80919aa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80919ae:	f1a7 0804 	sub.w	r8, r7, #4
 80919b2:	4630      	mov	r0, r6
 80919b4:	f7ff fd95 	bl	80914e2 <__hi0bits>
 80919b8:	f1c0 0320 	rsb	r3, r0, #32
 80919bc:	280a      	cmp	r0, #10
 80919be:	600b      	str	r3, [r1, #0]
 80919c0:	491f      	ldr	r1, [pc, #124]	; (8091a40 <__b2d+0xa4>)
 80919c2:	dc17      	bgt.n	80919f4 <__b2d+0x58>
 80919c4:	45c1      	cmp	r9, r8
 80919c6:	bf28      	it	cs
 80919c8:	2200      	movcs	r2, #0
 80919ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80919ce:	fa26 f30c 	lsr.w	r3, r6, ip
 80919d2:	bf38      	it	cc
 80919d4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80919d8:	ea43 0501 	orr.w	r5, r3, r1
 80919dc:	f100 0315 	add.w	r3, r0, #21
 80919e0:	fa06 f303 	lsl.w	r3, r6, r3
 80919e4:	fa22 f20c 	lsr.w	r2, r2, ip
 80919e8:	ea43 0402 	orr.w	r4, r3, r2
 80919ec:	4620      	mov	r0, r4
 80919ee:	4629      	mov	r1, r5
 80919f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80919f4:	45c1      	cmp	r9, r8
 80919f6:	bf2e      	itee	cs
 80919f8:	2200      	movcs	r2, #0
 80919fa:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80919fe:	f1a7 0808 	subcc.w	r8, r7, #8
 8091a02:	f1b0 030b 	subs.w	r3, r0, #11
 8091a06:	d016      	beq.n	8091a36 <__b2d+0x9a>
 8091a08:	f1c3 0720 	rsb	r7, r3, #32
 8091a0c:	fa22 f107 	lsr.w	r1, r2, r7
 8091a10:	45c8      	cmp	r8, r9
 8091a12:	fa06 f603 	lsl.w	r6, r6, r3
 8091a16:	ea46 0601 	orr.w	r6, r6, r1
 8091a1a:	bf94      	ite	ls
 8091a1c:	2100      	movls	r1, #0
 8091a1e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8091a22:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8091a26:	fa02 f003 	lsl.w	r0, r2, r3
 8091a2a:	40f9      	lsrs	r1, r7
 8091a2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8091a30:	ea40 0401 	orr.w	r4, r0, r1
 8091a34:	e7da      	b.n	80919ec <__b2d+0x50>
 8091a36:	4614      	mov	r4, r2
 8091a38:	ea46 0501 	orr.w	r5, r6, r1
 8091a3c:	e7d6      	b.n	80919ec <__b2d+0x50>
 8091a3e:	bf00      	nop
 8091a40:	3ff00000 	.word	0x3ff00000

08091a44 <__d2b>:
 8091a44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8091a48:	461c      	mov	r4, r3
 8091a4a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8091a4e:	2101      	movs	r1, #1
 8091a50:	4690      	mov	r8, r2
 8091a52:	f7ff fc7f 	bl	8091354 <_Balloc>
 8091a56:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8091a5a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8091a5e:	4607      	mov	r7, r0
 8091a60:	bb2c      	cbnz	r4, 8091aae <__d2b+0x6a>
 8091a62:	9301      	str	r3, [sp, #4]
 8091a64:	f1b8 0300 	subs.w	r3, r8, #0
 8091a68:	d026      	beq.n	8091ab8 <__d2b+0x74>
 8091a6a:	4668      	mov	r0, sp
 8091a6c:	9300      	str	r3, [sp, #0]
 8091a6e:	f7ff fd58 	bl	8091522 <__lo0bits>
 8091a72:	9900      	ldr	r1, [sp, #0]
 8091a74:	b1f0      	cbz	r0, 8091ab4 <__d2b+0x70>
 8091a76:	9a01      	ldr	r2, [sp, #4]
 8091a78:	f1c0 0320 	rsb	r3, r0, #32
 8091a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8091a80:	430b      	orrs	r3, r1
 8091a82:	40c2      	lsrs	r2, r0
 8091a84:	617b      	str	r3, [r7, #20]
 8091a86:	9201      	str	r2, [sp, #4]
 8091a88:	9b01      	ldr	r3, [sp, #4]
 8091a8a:	2b00      	cmp	r3, #0
 8091a8c:	bf14      	ite	ne
 8091a8e:	2102      	movne	r1, #2
 8091a90:	2101      	moveq	r1, #1
 8091a92:	61bb      	str	r3, [r7, #24]
 8091a94:	6139      	str	r1, [r7, #16]
 8091a96:	b1c4      	cbz	r4, 8091aca <__d2b+0x86>
 8091a98:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8091a9c:	4404      	add	r4, r0
 8091a9e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8091aa2:	6034      	str	r4, [r6, #0]
 8091aa4:	6028      	str	r0, [r5, #0]
 8091aa6:	4638      	mov	r0, r7
 8091aa8:	b002      	add	sp, #8
 8091aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8091aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8091ab2:	e7d6      	b.n	8091a62 <__d2b+0x1e>
 8091ab4:	6179      	str	r1, [r7, #20]
 8091ab6:	e7e7      	b.n	8091a88 <__d2b+0x44>
 8091ab8:	a801      	add	r0, sp, #4
 8091aba:	f7ff fd32 	bl	8091522 <__lo0bits>
 8091abe:	2101      	movs	r1, #1
 8091ac0:	9b01      	ldr	r3, [sp, #4]
 8091ac2:	6139      	str	r1, [r7, #16]
 8091ac4:	617b      	str	r3, [r7, #20]
 8091ac6:	3020      	adds	r0, #32
 8091ac8:	e7e5      	b.n	8091a96 <__d2b+0x52>
 8091aca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8091ace:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8091ad2:	6030      	str	r0, [r6, #0]
 8091ad4:	6918      	ldr	r0, [r3, #16]
 8091ad6:	f7ff fd04 	bl	80914e2 <__hi0bits>
 8091ada:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8091ade:	6029      	str	r1, [r5, #0]
 8091ae0:	e7e1      	b.n	8091aa6 <__d2b+0x62>

08091ae2 <__ratio>:
 8091ae2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8091ae6:	4688      	mov	r8, r1
 8091ae8:	4669      	mov	r1, sp
 8091aea:	4681      	mov	r9, r0
 8091aec:	f7ff ff56 	bl	809199c <__b2d>
 8091af0:	460f      	mov	r7, r1
 8091af2:	4604      	mov	r4, r0
 8091af4:	460d      	mov	r5, r1
 8091af6:	4640      	mov	r0, r8
 8091af8:	a901      	add	r1, sp, #4
 8091afa:	f7ff ff4f 	bl	809199c <__b2d>
 8091afe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8091b02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8091b06:	468b      	mov	fp, r1
 8091b08:	eba3 0c02 	sub.w	ip, r3, r2
 8091b0c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8091b10:	1a9b      	subs	r3, r3, r2
 8091b12:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8091b16:	2b00      	cmp	r3, #0
 8091b18:	bfd5      	itete	le
 8091b1a:	460a      	movle	r2, r1
 8091b1c:	462a      	movgt	r2, r5
 8091b1e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8091b22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8091b26:	bfd8      	it	le
 8091b28:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8091b2c:	465b      	mov	r3, fp
 8091b2e:	4602      	mov	r2, r0
 8091b30:	4639      	mov	r1, r7
 8091b32:	4620      	mov	r0, r4
 8091b34:	f7fb ff60 	bl	808d9f8 <__aeabi_ddiv>
 8091b38:	b003      	add	sp, #12
 8091b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08091b3e <__copybits>:
 8091b3e:	3901      	subs	r1, #1
 8091b40:	b570      	push	{r4, r5, r6, lr}
 8091b42:	1149      	asrs	r1, r1, #5
 8091b44:	6914      	ldr	r4, [r2, #16]
 8091b46:	3101      	adds	r1, #1
 8091b48:	f102 0314 	add.w	r3, r2, #20
 8091b4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8091b50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8091b54:	1f05      	subs	r5, r0, #4
 8091b56:	42a3      	cmp	r3, r4
 8091b58:	d30c      	bcc.n	8091b74 <__copybits+0x36>
 8091b5a:	1aa3      	subs	r3, r4, r2
 8091b5c:	3b11      	subs	r3, #17
 8091b5e:	f023 0303 	bic.w	r3, r3, #3
 8091b62:	3211      	adds	r2, #17
 8091b64:	42a2      	cmp	r2, r4
 8091b66:	bf88      	it	hi
 8091b68:	2300      	movhi	r3, #0
 8091b6a:	4418      	add	r0, r3
 8091b6c:	2300      	movs	r3, #0
 8091b6e:	4288      	cmp	r0, r1
 8091b70:	d305      	bcc.n	8091b7e <__copybits+0x40>
 8091b72:	bd70      	pop	{r4, r5, r6, pc}
 8091b74:	f853 6b04 	ldr.w	r6, [r3], #4
 8091b78:	f845 6f04 	str.w	r6, [r5, #4]!
 8091b7c:	e7eb      	b.n	8091b56 <__copybits+0x18>
 8091b7e:	f840 3b04 	str.w	r3, [r0], #4
 8091b82:	e7f4      	b.n	8091b6e <__copybits+0x30>

08091b84 <__any_on>:
 8091b84:	f100 0214 	add.w	r2, r0, #20
 8091b88:	6900      	ldr	r0, [r0, #16]
 8091b8a:	114b      	asrs	r3, r1, #5
 8091b8c:	4298      	cmp	r0, r3
 8091b8e:	b510      	push	{r4, lr}
 8091b90:	db11      	blt.n	8091bb6 <__any_on+0x32>
 8091b92:	dd0a      	ble.n	8091baa <__any_on+0x26>
 8091b94:	f011 011f 	ands.w	r1, r1, #31
 8091b98:	d007      	beq.n	8091baa <__any_on+0x26>
 8091b9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8091b9e:	fa24 f001 	lsr.w	r0, r4, r1
 8091ba2:	fa00 f101 	lsl.w	r1, r0, r1
 8091ba6:	428c      	cmp	r4, r1
 8091ba8:	d10b      	bne.n	8091bc2 <__any_on+0x3e>
 8091baa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8091bae:	4293      	cmp	r3, r2
 8091bb0:	d803      	bhi.n	8091bba <__any_on+0x36>
 8091bb2:	2000      	movs	r0, #0
 8091bb4:	bd10      	pop	{r4, pc}
 8091bb6:	4603      	mov	r3, r0
 8091bb8:	e7f7      	b.n	8091baa <__any_on+0x26>
 8091bba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8091bbe:	2900      	cmp	r1, #0
 8091bc0:	d0f5      	beq.n	8091bae <__any_on+0x2a>
 8091bc2:	2001      	movs	r0, #1
 8091bc4:	e7f6      	b.n	8091bb4 <__any_on+0x30>

08091bc6 <_calloc_r>:
 8091bc6:	b538      	push	{r3, r4, r5, lr}
 8091bc8:	fb02 f501 	mul.w	r5, r2, r1
 8091bcc:	4629      	mov	r1, r5
 8091bce:	f7f9 f84d 	bl	808ac6c <_malloc_r>
 8091bd2:	4604      	mov	r4, r0
 8091bd4:	b118      	cbz	r0, 8091bde <_calloc_r+0x18>
 8091bd6:	462a      	mov	r2, r5
 8091bd8:	2100      	movs	r1, #0
 8091bda:	f7fc ffa9 	bl	808eb30 <memset>
 8091bde:	4620      	mov	r0, r4
 8091be0:	bd38      	pop	{r3, r4, r5, pc}

08091be2 <__ascii_wctomb>:
 8091be2:	4603      	mov	r3, r0
 8091be4:	4608      	mov	r0, r1
 8091be6:	b141      	cbz	r1, 8091bfa <__ascii_wctomb+0x18>
 8091be8:	2aff      	cmp	r2, #255	; 0xff
 8091bea:	d904      	bls.n	8091bf6 <__ascii_wctomb+0x14>
 8091bec:	228a      	movs	r2, #138	; 0x8a
 8091bee:	f04f 30ff 	mov.w	r0, #4294967295
 8091bf2:	601a      	str	r2, [r3, #0]
 8091bf4:	4770      	bx	lr
 8091bf6:	2001      	movs	r0, #1
 8091bf8:	700a      	strb	r2, [r1, #0]
 8091bfa:	4770      	bx	lr

08091bfc <__env_lock>:
 8091bfc:	4801      	ldr	r0, [pc, #4]	; (8091c04 <__env_lock+0x8>)
 8091bfe:	f7ff bb94 	b.w	809132a <__retarget_lock_acquire_recursive>
 8091c02:	bf00      	nop
 8091c04:	200013e6 	.word	0x200013e6

08091c08 <__env_unlock>:
 8091c08:	4801      	ldr	r0, [pc, #4]	; (8091c10 <__env_unlock+0x8>)
 8091c0a:	f7ff bb90 	b.w	809132e <__retarget_lock_release_recursive>
 8091c0e:	bf00      	nop
 8091c10:	200013e6 	.word	0x200013e6

08091c14 <__aeabi_d2lz>:
 8091c14:	b538      	push	{r3, r4, r5, lr}
 8091c16:	460c      	mov	r4, r1
 8091c18:	4605      	mov	r5, r0
 8091c1a:	4621      	mov	r1, r4
 8091c1c:	4628      	mov	r0, r5
 8091c1e:	2200      	movs	r2, #0
 8091c20:	2300      	movs	r3, #0
 8091c22:	f7fc f831 	bl	808dc88 <__aeabi_dcmplt>
 8091c26:	b928      	cbnz	r0, 8091c34 <__aeabi_d2lz+0x20>
 8091c28:	4628      	mov	r0, r5
 8091c2a:	4621      	mov	r1, r4
 8091c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8091c30:	f7fc bc96 	b.w	808e560 <__aeabi_d2ulz>
 8091c34:	4628      	mov	r0, r5
 8091c36:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8091c3a:	f7fc fc91 	bl	808e560 <__aeabi_d2ulz>
 8091c3e:	4240      	negs	r0, r0
 8091c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8091c44:	bd38      	pop	{r3, r4, r5, pc}
 8091c46:	bf00      	nop

08091c48 <dynalib_user>:
 8091c48:	0021 0808 0061 0808 0089 0808 008d 0808     !...a...........
 8091c58:	0000 0000 0100 0402 1008 6f67 676f 656c     ..........google
 8091c68:	6720 6f65 6f6c 6163 6974 6e6f 003a 614c      geolocation:.La
 8091c78:	6974 7574 6564 253a 2c66 6c20 6e6f 6967     titude:%f, longi
 8091c88:	7574 6564 253a 2c66 6120 6363 253a 0066     tude:%f, acc:%f.
 8091c98:	2e25 6636 2500 2e33 6632 2500 322e 0058     %.6f.%3.2f.%.2X.
 8091ca8:	6554 706d 7265 7461 7275 2065 6572 6461     Temperature read
 8091cb8:	6e69 2067 7266 6d6f 4820 4849 3138 3032     ing from HIH8120
 8091cc8:	5400 6d65 6570 6172 7574 6572 7220 6165     .Temperature rea
 8091cd8:	6964 676e 6620 6f72 206d 4d54 3350 0036     ding from TMP36.
 8091ce8:	6554 706d 7265 7461 7275 2065 6572 6461     Temperature read
 8091cf8:	6e69 2067 7266 6d6f 4220 454d 6620 726f     ing from BME for
 8091d08:	4120 706c 6168 6573 736e 0065 7548 696d      Alphasense.Humi
 8091d18:	6964 7974 7220 6165 6964 676e 6620 6f72     dity reading fro
 8091d28:	206d 4948 3848 3231 0030 7548 696d 6964     m HIH8120.Humidi
 8091d38:	7974 7220 6165 6964 676e 6620 6f72 206d     ty reading from 
 8091d48:	4d42 0045 6167 2073 6572 6973 7473 6e61     BME.gas resistan
 8091d58:	6563 203a 3125 302e 2c66 6820 6d75 6469     ce: %1.0f, humid
 8091d68:	7469 3a79 2520 2e31 6632 0d0a 4700 7361     ity: %1.2f...Gas
 8091d78:	7320 6f63 6572 203a 4800 6d75 6469 7469      score: .Humidit
 8091d88:	2079 6373 726f 3a65 0020 7453 7261 2074     y score: .Start 
 8091d98:	666f 6120 706c 6168 3220 7220 6165 0064     of alpha 2 read.
 8091da8:	6f43 6c75 6e64 7427 6320 6d6f 756d 696e     Couldn't communi
 8091db8:	6163 6574 7720 7469 2068 4d4c 3950 3031     cate with LMP910
 8091dc8:	3030 3220 6800 6c61 2066 7276 6665 2032     00 2.half vref2 
 8091dd8:	6461 3173 5300 6174 7574 2073 3d3d 3020     ads1.Status == 0
 8091de8:	6620 6f72 206d 4d4c 3950 3031 3030 3220      from LMP91000 2
 8091df8:	7320 6174 7574 2073 6572 0067 392d 0039      status reg.-99.
 8091e08:	7257 7469 6e69 2067 6164 6174 7420 206f     Writing data to 
 8091e18:	6f6c 2067 6966 656c 002e 6946 656c 5320     log file..File S
 8091e28:	6174 7472 7420 6d69 7365 6174 706d 203a     tart timestamp: 
 8091e38:	5500 616e 6c62 2065 6f74 7720 6972 6574     .Unable to write
 8091e48:	7420 206f 6f6c 2067 6966 656c 6900 696e      to log file.ini
 8091e58:	0074 4747 0041 7245 6f72 2072 6572 6461     t.GGA.Error read
 8091e68:	6e69 2067 5047 0053 5047 2053 7475 2063     ing GPS.GPS utc 
 8091e78:	7473 6972 676e 203a 4c00 7461 7469 6475     string: .Latitud
 8091e88:	2065 7473 6972 676e 203a 6c00 6e6f 6967     e string: .longi
 8091e98:	7574 6564 7320 7274 6e69 3a67 0020 7453     tude string: .St
 8091ea8:	7261 2074 666f 6120 706c 6168 7220 6165     art of alpha rea
 8091eb8:	0064 6f43 6c75 6e64 7427 6320 6d6f 756d     d.Couldn't commu
 8091ec8:	696e 6163 6574 7720 7469 2068 4d4c 3950     nicate with LMP9
 8091ed8:	3031 3030 4800 6c61 7666 6c6f 3a74 2520     1000.Halfvolt: %
 8091ee8:	2e31 6632 0d0a 4800 6c61 7666 6c6f 2074     1.2f...Halfvolt 
 8091ef8:	6968 6867 7265 7420 6168 206e 2e30 0035     higher than 0.5.
 8091f08:	7453 7461 7375 3d20 3020 6620 6f72 206d     Status = 0 from 
 8091f18:	4d4c 3950 3031 3030 7320 6174 7574 2073     LMP91000 status 
 8091f28:	6572 0067 4d4c 3150 3030 2030 7473 7461     reg.LMP1000 stat
 8091f38:	7375 3d20 3020 4300 204f 656d 7361 7275     us = 0.CO measur
 8091f48:	6d65 6e65 7374 203a 0a20 000d 3041 675f     ements:  ...A0_g
 8091f58:	7361 203a 6425 0d0a 4100 5f31 7561 3a78     as: %d...A1_aux:
 8091f68:	2520 0a64 000d 3241 745f 6d65 3a70 2520      %d...A2_temp: %
 8091f78:	0a64 000d 6168 666c 765f 6572 3a66 2520     d...half_vref: %
 8091f88:	0a64 000d 2140 5300 6e65 6964 676e 6e20     d...@!.Sending n
 8091f98:	7765 7720 6669 2069 7263 6465 6e65 6974     ew wifi credenti
 8091fa8:	6c61 2073 6f74 4520 5053 5300 6375 6563     als to ESP.Succe
 8091fb8:	7373 0021 6146 6c69 6465 7420 206f 6572     ss!.Failed to re
 8091fc8:	6461 4220 454d 3836 0030 0024 6c4f 2064     ad BME680.$.Old 
 8091fd8:	6e69 7570 2074 7563 7272 6e65 2074 696c     input current li
 8091fe8:	696d 3a74 2520 0a64 000d 654e 2077 6e69     mit: %d...New in
 8091ff8:	7570 2074 7563 7272 6e65 2074 696c 696d     put current limi
 8092008:	3a74 2520 0a64 000d 6e49 7263 6165 6973     t: %d...Increasi
 8092018:	676e 4320 6168 6772 2065 7563 7272 6e65     ng Charge curren
 8092028:	2074 7266 6d6f 2520 2064 416d 7420 206f     t from %d mA to 
 8092038:	6e00 7765 6320 6168 6772 2065 7563 7272     .new charge curr
 8092048:	6e65 2074 666f 2520 2064 416d 0d0a 4300     ent of %d mA...C
 8092058:	7275 6572 746e 7320 6f74 6572 2064 7373     urrent stored ss
 8092068:	6469 203a 4300 7275 6572 746e 7320 6f74     id: .Current sto
 8092078:	6572 2064 6170 7373 6f77 6472 203a 5000     red password: .P
 8092088:	656c 7361 2065 6e65 6574 2072 6170 7373     lease enter pass
 8092098:	6f77 6472 6920 206e 726f 6564 2072 6f74     word in order to
 80920a8:	6d20 6b61 2065 6863 6e61 6567 2e73 0d0a      make changes...
 80920b8:	6200 756f 646c 5000 7361 7773 726f 2064     .bould.Password 
 80920c8:	6f63 7272 6365 2174 4500 746e 7265 6e20     correct!.Enter n
 80920d8:	7765 7320 6973 3a64 5900 756f 2072 656e     ew ssid:.Your ne
 80920e8:	2077 7373 6469 7720 6c69 206c 6562 203a     w ssid will be: 
 80920f8:	4900 2073 6874 7369 6f20 616b 3f79 7928     .Is this okay?(y
 8092108:	6f20 2072 296e 5300 7661 6e69 2067 656e      or n).Saving ne
 8092118:	2077 7373 6469 4500 746e 7265 6e20 7765     w ssid.Enter new
 8092128:	7020 7361 7773 726f 0064 6f59 7275 6e20      password.Your n
 8092138:	7765 7020 7361 7773 726f 2064 6977 6c6c     ew password will
 8092148:	6220 3a65 0020 6153 6976 676e 6e20 7765      be: .Saving new
 8092158:	7020 7361 7773 726f 0064 6b6f 7961 202c      password.okay, 
 8092168:	6f6e 7020 6f72 6c62 6d65 0d0a 5000 656c     no problem...Ple
 8092178:	7361 2065 6e65 6574 2072 6170 7373 6f77     ase enter passwo
 8092188:	6472 6920 206e 726f 6564 2072 6f74 6520     rd in order to e
 8092198:	616e 6c62 2065 6164 6174 7020 7375 2068     nable data push 
 80921a8:	6f74 5320 6e65 6973 6c62 2065 6f49 0074     to Sensible Iot.
 80921b8:	6d69 6573 736e 6269 656c 4500 616e 6c62     imsensible.Enabl
 80921c8:	6e69 2067 6573 736e 6269 656c 6920 746f     ing sensible iot
 80921d8:	6420 7461 2061 7570 6873 002e 0d0a 6e49      data push....In
 80921e8:	6f63 7272 6365 2074 6170 7373 6f77 6472     correct password
 80921f8:	0021 6c50 6165 6573 6520 746e 7265 7020     !.Please enter p
 8092208:	7361 7773 726f 2064 6e69 6f20 6472 7265     assword in order
 8092218:	7420 206f 7061 6c70 2079 6564 6166 6c75      to apply defaul
 8092228:	2074 6573 7474 6e69 7367 5000 7361 7773     t settings.Passw
 8092238:	726f 2064 6f63 7272 6365 2c74 7220 7365     ord correct, res
 8092248:	7465 6974 676e 6120 6c6c 7320 7465 6974     etting all setti
 8092258:	676e 2073 6f74 6420 6665 7561 746c 2021     ngs to default! 
 8092268:	5020 656c 7361 2065 6572 6573 2074 6f79      Please reset yo
 8092278:	7275 4920 2044 6f74 7420 6568 6f20 656e     ur ID to the one
 8092288:	7320 6f68 6e77 6f20 206e 6f79 7275 6520      shown on your e
 8092298:	636e 6f6c 7573 6572 002e 6e45 6574 2072     nclosure..Enter 
 80922a8:	656e 2077 6544 6976 6563 7420 6d69 2065     new Device time 
 80922b8:	6e61 2064 6164 6574 2820 3031 6420 6769     and date (10 dig
 80922c8:	7469 6520 6f70 6863 7420 6d69 7365 6174     it epoch timesta
 80922d8:	706d 3a29 0a00 4e0d 7765 4420 7665 6369     mp):...New Devic
 80922e8:	2065 6954 656d 003a 0d0a 6e49 6176 696c     e Time:...Invali
 80922f8:	2064 6176 756c 2165 4300 7275 6572 746e     d value!.Current
 8092308:	4320 324f 7320 6f6c 6570 003a 7020 6d70      CO2 slope:. ppm
 8092318:	4500 746e 7265 6e20 7765 4320 324f 7320     .Enter new CO2 s
 8092328:	6f6c 6570 0d0a 0a00 4e0d 7765 4320 324f     lope.....New CO2
 8092338:	7320 6f6c 6570 203a 4300 7275 6572 746e      slope: .Current
 8092348:	4320 204f 6c73 706f 3a65 4500 746e 7265      CO slope:.Enter
 8092358:	6e20 7765 4320 204f 6c73 706f 0a65 000d      new CO slope...
 8092368:	0d0a 654e 2077 4f43 7320 6f6c 6570 203a     ..New CO slope: 
 8092378:	4300 7275 6572 746e 5020 314d 7320 6f6c     .Current PM1 slo
 8092388:	6570 003a 6e45 6574 2072 656e 2077 4d50     pe:.Enter new PM
 8092398:	2031 6c73 706f 0a65 000d 0d0a 654e 2077     1 slope.....New 
 80923a8:	4d50 2031 6c73 706f 3a65 0020 7543 7272     PM1 slope: .Curr
 80923b8:	6e65 2074 4d50 2e32 2035 6c73 706f 3a65     ent PM2.5 slope:
 80923c8:	4500 746e 7265 6e20 7765 5020 324d 352e     .Enter new PM2.5
 80923d8:	7320 6f6c 6570 0d0a 0a00 4e0d 7765 5020      slope.....New P
 80923e8:	324d 352e 7320 6f6c 6570 203a 4300 7275     M2.5 slope: .Cur
 80923f8:	6572 746e 5020 314d 2030 6c73 706f 3a65     rent PM10 slope:
 8092408:	4500 746e 7265 6e20 7765 5020 314d 2030     .Enter new PM10 
 8092418:	6c73 706f 0a65 000d 0d0a 654e 2077 4d50     slope.....New PM
 8092428:	3031 7320 6f6c 6570 203a 4300 7275 6572     10 slope: .Curre
 8092438:	746e 5420 6d65 6570 6172 7574 6572 7320     nt Temperature s
 8092448:	6f6c 6570 003a 4420 6765 6572 7365 4320     lope:. Degrees C
 8092458:	4500 746e 7265 6e20 7765 5420 6d65 6570     .Enter new Tempe
 8092468:	6172 7574 6572 7320 6f6c 6570 0d0a 0a00     rature slope....
 8092478:	4e0d 7765 5420 6d65 6570 6172 7574 6572     .New Temperature
 8092488:	7320 6f6c 6570 203a 4300 7275 6572 746e      slope: .Current
 8092498:	5020 6572 7373 7275 2065 6c73 706f 3a65      Pressure slope:
 80924a8:	2000 6f74 7272 4500 746e 7265 6e20 7765     . torr.Enter new
 80924b8:	5020 6572 7373 7275 2065 6c73 706f 0a65      Pressure slope.
 80924c8:	000d 0d0a 654e 2077 7250 7365 7573 6572     ....New Pressure
 80924d8:	7320 6f6c 6570 203a 4300 7275 6572 746e      slope: .Current
 80924e8:	5220 2048 6c73 706f 3a65 2000 0025 6e45      RH slope:. %.En
 80924f8:	6574 2072 656e 2077 4852 7320 6f6c 6570     ter new RH slope
 8092508:	0d0a 0a00 4e0d 7765 5220 2048 6c73 706f     .....New RH slop
 8092518:	3a65 0020 4f43 203a 3125 332e 2066 7070     e: .CO: %1.3f pp
 8092528:	0a6d 000d 6f43 6d6d 6e61 3a64 2020 6544     m...Command:  De
 8092538:	6373 6972 7470 6f69 006e 3a61 2020 6441     scription.a:  Ad
 8092548:	756a 7473 4320 324f 7320 6f6c 6570 6200     just CO2 slope.b
 8092558:	203a 4120 6a64 7375 2074 4f43 2032 657a     :  Adjust CO2 ze
 8092568:	6f72 6300 203a 4120 6a64 7375 2074 4f43     ro.c:  Adjust CO
 8092578:	7320 6f6c 6570 6400 203a 4120 6a64 7375      slope.d:  Adjus
 8092588:	2074 4f43 7a20 7265 006f 3a65 2020 6441     t CO zero.e:  Ad
 8092598:	756a 7473 5020 314d 7320 6f6c 6570 6600     just PM1 slope.f
 80925a8:	203a 4120 6a64 7375 2074 4d50 2031 657a     :  Adjust PM1 ze
 80925b8:	6f72 6700 203a 4120 6a64 7375 2074 4d50     ro.g:  Adjust PM
 80925c8:	2e32 2035 6c73 706f 0065 3a68 2020 6441     2.5 slope.h:  Ad
 80925d8:	756a 7473 5020 324d 352e 7a20 7265 006f     just PM2.5 zero.
 80925e8:	3a69 2020 6441 756a 7473 5020 314d 2030     i:  Adjust PM10 
 80925f8:	6c73 706f 0065 3a6a 2020 6441 756a 7473     slope.j:  Adjust
 8092608:	5020 314d 2030 657a 6f72 6b00 203a 4120      PM10 zero.k:  A
 8092618:	6a64 7375 2074 6554 706d 7265 7461 7275     djust Temperatur
 8092628:	2065 6c73 706f 0065 3a6c 2020 6441 756a     e slope.l:  Adju
 8092638:	7473 5420 6d65 6570 6172 7574 6572 7a20     st Temperature z
 8092648:	7265 006f 3a6d 2020 6441 756a 7473 5020     ero.m:  Adjust P
 8092658:	6572 7373 7275 2065 6c73 706f 0065 3a6e     ressure slope.n:
 8092668:	2020 6441 756a 7473 5020 6572 7373 7275       Adjust Pressur
 8092678:	2065 657a 6f72 6f00 203a 4120 6a64 7375     e zero.o:  Adjus
 8092688:	2074 7548 696d 6964 7974 7320 6f6c 6570     t Humidity slope
 8092698:	7000 203a 4120 6a64 7375 2074 7548 696d     .p:  Adjust Humi
 80926a8:	6964 7974 7a20 7265 006f 3a71 2020 6e45     dity zero.q:  En
 80926b8:	6261 656c 7320 7265 6169 206c 6564 7562     able serial debu
 80926c8:	6767 6e69 0067 3a72 2020 6944 6173 6c62     gging.r:  Disabl
 80926d8:	2065 6573 6972 6c61 6420 6265 6775 6967     e serial debuggi
 80926e8:	676e 7300 203a 4f20 7475 7570 2074 6568     ng.s:  Output he
 80926f8:	6461 7265 7320 7274 6e69 0067 3a74 2020     ader string.t:  
 8092708:	6e45 6574 2072 656e 2077 6974 656d 6120     Enter new time a
 8092718:	646e 6420 7461 0065 3a75 2020 6e45 6574     nd date.u:  Ente
 8092728:	2072 656e 2077 6974 656d 7a20 6e6f 0065     r new time zone.
 8092738:	3a76 2020 6441 756a 7473 7420 6568 4420     v:  Adjust the D
 8092748:	7665 6369 2065 4449 7700 203a 4720 7465     evice ID.w:  Get
 8092758:	7720 6669 2069 7263 6465 6e65 6974 6c61      wifi credential
 8092768:	0073 3a79 2020 6e45 6261 656c 6320 6c65     s.y:  Enable cel
 8092778:	756c 616c 0072 3a7a 2020 6944 6173 6c62     lular.z:  Disabl
 8092788:	2065 6563 6c6c 6c75 7261 3100 203a 4120     e cellular.1:  A
 8092798:	6a64 7375 2074 6167 2073 6f6c 6577 2072     djust gas lower 
 80927a8:	696c 696d 0074 3a32 2020 6441 756a 7473     limit.2:  Adjust
 80927b8:	6720 7361 7520 7070 7265 6c20 6d69 7469      gas upper limit
 80927c8:	3300 203a 4720 7465 6220 6975 646c 7620     .3:  Get build v
 80927d8:	7265 6973 6e6f 3400 203a 4520 616e 6c62     ersion.4:  Enabl
 80927e8:	2065 7a4f 6e6f 0065 3a35 2020 6944 6173     e Ozone.5:  Disa
 80927f8:	6c62 2065 7a4f 6e6f 0065 3a36 2020 6e45     ble Ozone.6:  En
 8092808:	6261 656c 5620 434f 7327 3700 203a 4420     able VOC's.7:  D
 8092818:	7369 6261 656c 5620 434f 7327 3800 203a     isable VOC's.8: 
 8092828:	4f20 7475 7570 2074 6874 2065 4d50 4349      Output the PMIC
 8092838:	7320 7379 6574 206d 6f63 666e 6769 7275      system configur
 8092848:	7461 6f69 006e 3a39 2020 6e49 7263 6165     ation.9:  Increa
 8092858:	6573 7420 6568 6320 6168 6772 2065 7563     se the charge cu
 8092868:	7272 6e65 2074 7962 3620 2034 416d 3000     rrent by 64 mA.0
 8092878:	203a 4920 636e 6572 7361 2065 6874 2065     :  Increase the 
 8092888:	7563 7272 6e65 2074 6e69 7570 2074 696c     current input li
 8092898:	696d 2074 7962 3120 3030 6d20 0041 3a41     mit by 100 mA.A:
 80928a8:	2020 754f 7470 7570 2074 4f43 6320 6e6f       Ouptput CO con
 80928b8:	7473 6e61 6c74 2079 6e61 2064 6172 6970     stantly and rapi
 80928c8:	6c64 0079 3a42 2020 754f 7074 7475 5020     dly.B:  Output P
 80928d8:	204d 6f63 736e 6174 746e 796c 6120 646e     M constantly and
 80928e8:	7220 7061 6469 796c 4300 203a 4320 6168      rapidly.C:  Cha
 80928f8:	676e 2065 6574 706d 7265 7461 7275 2065     nge temperature 
 8092908:	6e75 7469 2073 6f74 4320 6c65 6963 7375     units to Celcius
 8092918:	4400 203a 4420 7369 6261 656c 5420 504d     .D:  Disable TMP
 8092928:	3633 7420 6d65 6570 6172 7574 6572 7320     36 temperature s
 8092938:	6e65 6f73 2072 6e61 2064 7375 2065 4d42     ensor and use BM
 8092948:	3645 3038 7420 6d65 6570 6172 7574 6572     E680 temperature
 8092958:	4500 203a 4520 616e 6c62 2065 4d54 3350     .E:  Enable TMP3
 8092968:	2036 6574 706d 7265 7461 7275 2065 6573     6 temperature se
 8092978:	736e 726f 6120 646e 6420 7369 6261 656c     nsor and disable
 8092988:	4220 454d 3836 2030 6574 706d 7265 7461      BME680 temperat
 8092998:	7275 0065 3a46 2020 6843 6e61 6567 7420     ure.F:  Change t
 80929a8:	6d65 6570 6172 7574 6572 7520 696e 7374     emperature units
 80929b8:	7420 206f 6146 6572 686e 6965 0074 3a47      to Farenheit.G:
 80929c8:	2020 6552 6461 6f20 6f7a 656e 6620 6f72       Read ozone fro
 80929d8:	206d 6e61 6c61 676f 6920 706e 7475 2820     m analog input (
 80929e8:	6f6e 2074 6964 6967 6174 6c6c 2079 202d     not digitally - 
 80929f8:	6f62 7261 2064 6564 6570 646e 6e65 2974     board dependent)
 8092a08:	4800 203a 5220 6165 2064 7a6f 6e6f 2065     .H:  Read ozone 
 8092a18:	6964 6967 6174 6c6c 2079 6e28 746f 7420     digitally (not t
 8092a28:	7268 756f 6867 6120 616e 6f6c 2067 6e69     hrough analog in
 8092a38:	7570 2074 202d 6f62 7261 2064 6564 6570     put - board depe
 8092a48:	646e 6e65 2974 4900 203a 4120 6a64 7375     ndent).I:  Adjus
 8092a58:	2074 7266 7165 6575 636e 2079 6f66 2072     t frequency for 
 8092a68:	7075 6f6c 6461 6e69 2067 6874 6f72 6775     uploading throug
 8092a78:	2068 6563 6c6c 6c75 7261 4a00 203a 5220     h cellular.J:  R
 8092a88:	7365 7465 4520 5053 202c 4f43 2c32 5020     eset ESP, CO2, P
 8092a98:	616c 746e 776f 7265 4b00 203a 4320 6e6f     lantower.K:  Con
 8092aa8:	6974 756e 756f 2073 6573 6972 6c61 6f20     tinuous serial o
 8092ab8:	7475 7570 2074 666f 4720 5350 4c00 203a     utput of GPS.L: 
 8092ac8:	5720 6972 6574 6420 6665 7561 746c 7320      Write default s
 8092ad8:	7465 6974 676e 0073 3a4d 2020 6e45 6261     ettings.M:  Enab
 8092ae8:	656c 3220 2530 6220 7461 6574 7972 7420     le 20% battery t
 8092af8:	7268 7365 6f68 646c 6c20 6d69 7469 6e69     hreshold limitin
 8092b08:	0067 3a4e 2020 6944 6173 6c62 2065 3032     g.N:  Disable 20
 8092b18:	2025 6162 7474 7265 2079 6874 6572 6873     % battery thresh
 8092b28:	6c6f 2064 696c 696d 6974 676e 5720 5241     old limiting WAR
 8092b38:	494e 474e 2121 4f00 203a 4520 616e 6c62     NING!!.O:  Enabl
 8092b48:	2065 6f6c 2077 6f70 6577 2072 6f66 2072     e low power for 
 8092b58:	5047 2053 6f6d 7564 656c 5000 203a 5420     GPS module.P:  T
 8092b68:	7275 206e 666f 2066 4142 4654 5445 5100     urn off BATFET.Q
 8092b78:	203a 4120 6c6c 776f 4220 5441 4546 2054     :  Allow BATFET 
 8092b88:	6f74 7420 7275 206e 6e6f 5200 203a 4420     to turn on.R:  D
 8092b98:	7369 6261 656c 4120 4342 6c20 676f 6369     isable ABC logic
 8092ba8:	6620 726f 4320 324f 7320 6e65 6f73 0072      for CO2 sensor.
 8092bb8:	3a53 2020 6e45 6261 656c 4120 4342 6c20     S:  Enable ABC l
 8092bc8:	676f 6369 6620 726f 4320 324f 7320 6e65     ogic for CO2 sen
 8092bd8:	6f73 0072 3a54 2020 6e45 6261 656c 642f     sor.T:  Enable/d
 8092be8:	7369 6261 656c 4820 4849 3138 3032 5220     isable HIH8120 R
 8092bf8:	2048 6573 736e 726f 5500 203a 5320 6977     H sensor.U:  Swi
 8092c08:	6374 2068 6f73 6b63 7465 7720 6568 6572     tch socket where
 8092c18:	4320 204f 7369 7220 6165 2064 7266 6d6f      CO is read from
 8092c28:	5700 203a 4520 616e 6c62 2f65 6944 6173     .W:  Enable/Disa
 8092c38:	6c62 2065 6f67 676f 656c 6c20 636f 7461     ble google locat
 8092c48:	6f69 206e 6573 7672 6369 7365 5600 203a     ion services.V: 
 8092c58:	4320 6c61 6269 6172 6574 4320 324f 7320      Calibrate CO2 s
 8092c68:	6e65 6f73 2072 202d 756d 7473 7320 7075     ensor - must sup
 8092c78:	6c70 2079 6d61 6962 6e65 2074 656c 6576     ply ambient leve
 8092c88:	206c 6728 206f 756f 7374 6469 2165 0029     l (go outside!).
 8092c98:	3a5a 2020 754f 7074 7475 6320 6c65 756c     Z:  Output cellu
 8092ca8:	616c 2072 6e69 6f66 6d72 7461 6f69 206e     lar information 
 8092cb8:	4328 4943 2c44 4920 454d 2c49 6520 6374     (CCID, IMEI, etc
 8092cc8:	0029 3a21 2020 6f43 746e 6e69 6f75 7375     ).!:  Continuous
 8092cd8:	7320 7265 6169 206c 756f 7074 7475 6f20      serial output o
 8092ce8:	2066 4f56 2743 0073 2040 2020 6e45 6261     f VOC's.@   Enab
 8092cf8:	656c 442f 7369 6261 656c 5320 6e65 6973     le/Disable Sensi
 8092d08:	6c62 2d65 6f69 2074 6164 6174 7020 7375     ble-iot data pus
 8092d18:	2e68 2020 6649 6520 616e 6c62 6465 202c     h.  If enabled, 
 8092d28:	6974 656d 7a20 6e6f 2065 6977 6c6c 6220     time zone will b
 8092d38:	2065 6769 6f6e 6572 2064 202d 5455 2043     e ignored - UTC 
 8092d48:	6977 6c6c 6220 2065 7375 6465 002e 2023     will be used..# 
 8092d58:	2020 6e45 6261 656c 442f 7369 6261 656c       Enable/Disable
 8092d68:	6320 7261 6f74 7070 7265 7020 776f 7265      cartopper power
 8092d78:	6d20 646f 2e65 2020 6649 6520 616e 6c62      mode.  If enabl
 8092d88:	6465 202c 6261 6573 736e 2065 666f 6520     ed, absense of e
 8092d98:	7478 7265 616e 206c 6f70 6577 2072 6977     xternal power wi
 8092da8:	6c6c 7320 6f74 2070 6563 6c6c 6c75 7261     ll stop cellular
 8092db8:	002e 3a3f 2020 754f 7074 7475 7420 6968     ..?:  Output thi
 8092dc8:	2073 656d 756e 7800 203a 4520 6978 7374     s menu.x:  Exits
 8092dd8:	7420 6968 2073 656d 756e 2c00 4f56 3a43      this menu.,VOC:
 8092de8:	0020 202c 4f43 203a 2c00 4320 324f 203a      ., CO: ., CO2: 
 8092df8:	2c00 5020 314d 203a 2c00 4d50 2e32 3a35     ., PM1: .,PM2.5:
 8092e08:	0020 202c 4d50 3031 203a 2c00 6554 706d      ., PM10: .,Temp
 8092e18:	203a 2c00 7250 7365 3a73 0020 482c 4d55     : .,Press: .,HUM
 8092e28:	203a 2c00 6e53 3a64 0020 4f2c 3a33 0020     : .,Snd: .,O3: .
 8092e38:	6170 756d 0070 7550 6c62 7369 6568 2064     pamup.Published 
 8092e48:	6170 756d 2070 6164 6174 0021 6573 736e     pamup data!.sens
 8092e58:	6269 656c 6150 556d 0070 7550 6c62 7369     iblePamUp.Publis
 8092e68:	6568 2064 6573 736e 6269 656c 6420 7461     hed sensible dat
 8092e78:	2161 4300 6c65 756c 616c 2072 7369 6420     a!.Cellular is d
 8092e88:	7369 6261 656c 2e64 4300 756f 646c 276e     isabled..Couldn'
 8092e98:	2074 6f63 6e6e 6365 2074 6f74 7020 7261     t connect to par
 8092ea8:	6974 6c63 2e65 3b00 5000 4d41 002d 6e69     ticle..;.PAM-.in
 8092eb8:	7473 7572 656d 746e 654b 0079 6164 6574     strumentKey.date
 8092ec8:	6974 656d 2500 2d59 6d25 252d 5464 4825     time.%Y-%m-%dT%H
 8092ed8:	253a 3a4d 5325 005a 4d50 5f31 0030 4d50     :%M:%SZ.PM1_0.PM
 8092ee8:	5f32 0035 6554 706d 5000 6572 7373 4800     2_5.Temp.Press.H
 8092ef8:	646d 7974 4c00 7461 4c00 6e6f 0067 6425     mdty.Lat.Long.%d
 8092f08:	252f 2f6d 7925 252c 3a48 4d25 253a 0053     /%m/%y,%H:%M:%S.
 8092f18:	694c 656e 7420 206f 7277 7469 2065 6f74     Line to write to
 8092f28:	6320 6f6c 6475 003a 6553 646e 6e69 2067      cloud:.Sending 
 8092f38:	6164 6174 7420 206f 7365 2070 6f74 7520     data to esp to u
 8092f48:	6c70 616f 2064 6976 2061 6977 6966 2e2e     pload via wifi..
 8092f58:	002e 6553 646e 6e69 2067 6164 6174 7420     ..Sending data t
 8092f68:	206f 7365 2070 6f74 7520 6c70 616f 2064     o esp to upload 
 8092f78:	6976 2061 6977 6966 5700 6972 6974 676e     via wifi.Writing
 8092f88:	7220 776f 7420 206f 6966 656c 002e 4544      row to file..DE
 8092f98:	2c56 4f43 7028 6d70 2c29 4f43 2832 7070     V,CO(ppm),CO2(pp
 8092fa8:	296d 562c 434f 2873 4149 2951 502c 314d     m),VOCs(IAQ),PM1
 8092fb8:	502c 324d 355f 502c 314d 2c30 2854 2943     ,PM2_5,PM10,T(C)
 8092fc8:	502c 6572 7373 6d28 6142 2972 522c 2848     ,Press(mBar),RH(
 8092fd8:	2925 4f2c 2833 7070 2962 422c 7461 2874     %),O3(ppb),Batt(
 8092fe8:	2925 532c 646e 6428 2962 4c2c 7461 7469     %),Snd(db),Latit
 8092ff8:	6475 2c65 6f4c 676e 7469 6475 2c65 2f4e     ude,Longitude,N/
 8093008:	2c41 2f4e 2c41 6144 6574 542f 6d69 0065     A,N/A,Date/Time.
 8093018:	265a 4700 7465 6974 676e 6f20 6f7a 656e     Z&.Getting ozone
 8093028:	6420 7461 2061 7266 6d6f 6520 7073 5500      data from esp.U
 8093038:	616e 6c62 2065 6f74 6720 7465 6f20 6f7a     nable to get ozo
 8093048:	656e 6420 7461 2061 7266 6d6f 4520 5053     ne data from ESP
 8093058:	202c 6f63 6e75 6574 2072 6e69 6564 3a78     , counter index:
 8093068:	2520 2e31 6631 0d0a 5200 4345 4549 4556      %1.1f...RECIEVE
 8093078:	2044 4144 4154 4620 4f52 204d 5345 3a50     D DATA FROM ESP:
 8093088:	0020 6552 6963 7665 6465 6420 7461 2061      .Recieved data 
 8093098:	7266 6d6f 4520 5053 6300 6d6f 616d 6920     from ESP.comma i
 80930a8:	646e 7865 203a 5300 7274 6e69 5b67 6425     ndex: .String[%d
 80930b8:	3a5d 7500 6973 676e 7320 7274 6e69 2067     ]:.using string 
 80930c8:	7261 6172 2079 6e69 6564 2078 2031 7564     array index 1 du
 80930d8:	2065 6f74 6c20 676f 6967 676e 7500 6973     e to logging.usi
 80930e8:	676e 7320 7274 6e69 2067 7261 6172 2079     ng string array 
 80930f8:	6e69 6564 2078 2c30 6e20 746f 6c20 676f     index 0, not log
 8093108:	6967 676e 4f00 6f7a 656e 5220 7761 6120     ging.Ozone Raw a
 8093118:	616e 6f6c 2067 6e69 003a 7543 7272 6e65     nalog in:.Curren
 8093128:	2074 6544 6976 6563 4920 3a44 5000 656c     t Device ID:.Ple
 8093138:	7361 2065 6e65 6574 2072 6170 7373 6f77     ase enter passwo
 8093148:	6472 6920 206e 726f 6564 2072 6f74 6320     rd in order to c
 8093158:	6168 676e 2065 6874 2065 4449 4500 746e     hange the ID.Ent
 8093168:	7265 6e20 7765 4420 7665 6369 2065 4449     er new Device ID
 8093178:	003a 0d0a 654e 2077 6544 6976 6563 4920     :...New Device I
 8093188:	3a44 4500 746e 7265 6e20 7765 4420 7665     D:.Enter new Dev
 8093198:	6369 2065 6974 656d 7a20 6e6f 2065 2d28     ice time zone (-
 80931a8:	3231 302e 7420 206f 3431 302e 0029 0d0a     12.0 to 14.0)...
 80931b8:	654e 2077 6544 6976 6563 7420 6d69 2065     New Device time 
 80931c8:	6f7a 656e 003a 7543 7272 6e65 2074 6f6c     zone:.Current lo
 80931d8:	6577 2072 696c 696d 3a74 5000 656c 7361     wer limit:.Pleas
 80931e8:	2065 6e65 6574 2072 6170 7373 6f77 6472     e enter password
 80931f8:	6920 206e 726f 6564 2072 6f74 6320 6168      in order to cha
 8093208:	676e 2065 6874 2065 6f6c 6577 2072 696c     nge the lower li
 8093218:	696d 0074 6e45 6574 2072 656e 2077 6f6c     mit.Enter new lo
 8093228:	6577 2072 696c 696d 3a74 0d0a 0a00 4e0d     wer limit:.....N
 8093238:	7765 6c20 776f 7265 6c20 6d69 7469 003a     ew lower limit:.
 8093248:	7543 7272 6e65 2074 7075 6570 2072 696c     Current upper li
 8093258:	696d 3a74 5000 656c 7361 2065 6e65 6574     mit:.Please ente
 8093268:	2072 6170 7373 6f77 6472 6920 206e 726f     r password in or
 8093278:	6564 2072 6f74 6320 6168 676e 2065 6874     der to change th
 8093288:	2065 7075 6570 2072 696c 696d 0074 6e45     e upper limit.En
 8093298:	6574 2072 656e 2077 7075 6570 2072 696c     ter new upper li
 80932a8:	696d 3a74 0d0a 0a00 4e0d 7765 7520 7070     mit:.....New upp
 80932b8:	7265 6c20 6d69 7469 003a 6567 6574 7065     er limit:.geteep
 80932c8:	6f72 646d 7461 0061 742e 7478 4300 6568     romdata..txt.Che
 80932d8:	6b63 6e69 2067 6f66 2072 6473 6320 7261     cking for sd car
 80932e8:	0064 6f6c 5f67 4300 6572 7461 6465 6e20     d.log_.Created n
 80932f8:	7765 6620 6c69 2065 6f74 6c20 676f 7420     ew file to log t
 8093308:	206f 5375 2044 6163 6472 203a 4e00 206f     o uSD card: .No 
 8093318:	5375 2044 6163 6472 6420 7465 6365 6574     uSD card detecte
 8093328:	2e64 5300 6174 7472 6e69 2067 4d4c 3950     d..Starting LMP9
 8093338:	3031 3030 4320 204f 6e69 7469 6169 696c     1000 CO initiali
 8093348:	617a 6974 6e6f 4300 756f 646c 276e 2074     zation.Couldn't 
 8093358:	6f63 6d6d 6e75 6369 7461 2065 6977 6874     communicate with
 8093368:	4c20 504d 3139 3030 2030 6f66 2072 4f43      LMP91000 for CO
 8093378:	4900 696e 6974 6c61 7a69 6465 4c20 504d     .Initialized LMP
 8093388:	3139 3030 2030 6f66 2072 4f43 4300 756f     91000 for CO.Cou
 8093398:	646c 6e20 746f 6320 6d6f 756d 696e 6163     ld not communica
 80933a8:	6574 7720 7469 2068 6441 6661 7572 7469     te with Adafruit
 80933b8:	415f 5344 3131 3531 6620 726f 4320 004f     _ADS1115 for CO.
 80933c8:	7453 7261 6974 676e 4c20 504d 3139 3030     Starting LMP9100
 80933d8:	2030 2032 6e69 7469 6169 696c 617a 6974     0 2 initializati
 80933e8:	6e6f 4300 756f 646c 276e 2074 6f63 6d6d     on.Couldn't comm
 80933f8:	6e75 6369 7461 2065 6977 6874 4c20 504d     unicate with LMP
 8093408:	3139 3030 2030 6f66 2072 0032 6e49 7469     91000 for 2.Init
 8093418:	6169 696c 657a 2064 4d4c 3950 3031 3030     ialized LMP91000
 8093428:	6620 726f 3220 4300 756f 646c 6e20 746f      for 2.Could not
 8093438:	6620 6e69 2064 2061 6176 696c 2064 4d42      find a valid BM
 8093448:	3645 3038 7320 6e65 6f73 2c72 6320 6568     E680 sensor, che
 8093458:	6b63 7720 7269 6e69 2167 4900 696e 6974     ck wiring!.Initi
 8093468:	6c61 7a69 6465 4220 454d 5320 6e65 6f73     alized BME Senso
 8093478:	0072 6f43 6c75 2064 6f6e 2074 6966 646e     r.Could not find
 8093488:	6120 7620 6c61 6469 5420 3736 3331 7320      a valid T6713 s
 8093498:	6e65 6f73 2c72 6320 6568 6b63 7720 7269     ensor, check wir
 80934a8:	6e69 2167 4300 756f 646c 6e20 746f 6620     ing!.Could not f
 80934b8:	6e69 2064 2061 6176 696c 2064 3654 3137     ind a valid T671
 80934c8:	0033 5345 2050 6572 6573 2174 4600 2057     3.ESP reset!.FW 
 80934d8:	6556 7372 6f69 3a6e 0020 7542 6c69 3a64     Version: .Build:
 80934e8:	0020 6553 7474 6e69 2067 7075 6720 6f6f      .Setting up goo
 80934f8:	6c67 2065 616d 7370 6720 6f65 6f6c 6163     gle maps geoloca
 8093508:	6974 6e6f 002e 7953 7473 6d65 7620 7265     tion..System ver
 8093518:	6973 6e6f 203a 7325 4300 7275 6572 746e     sion: %s.Current
 8093528:	4620 6572 7571 6e65 7963 203a 2800 327e      Frequency: .(~2
 8093538:	7320 6365 6e6f 2964 6d20 6165 7573 6572      second) measure
 8093548:	656d 746e 0073 6e45 6574 2072 656e 2077     ments.Enter new 
 8093558:	6d61 756f 746e 0d0a 0a00 4e0d 7765 4620     amount.....New F
 8093568:	6572 7571 6e65 7963 203a 4300 7275 6572     requency: .Curre
 8093578:	746e 4320 324f 7a20 7265 3a6f 4500 746e     nt CO2 zero:.Ent
 8093588:	7265 6e20 7765 4320 324f 5a20 7265 0a6f     er new CO2 Zero.
 8093598:	000d 0d0a 654e 2077 4f43 2032 657a 6f72     ....New CO2 zero
 80935a8:	203a 4300 7275 6572 746e 4320 204f 657a     : .Current CO ze
 80935b8:	6f72 003a 7020 6270 4500 746e 7265 6e20     ro:. ppb.Enter n
 80935c8:	7765 4320 204f 655a 6f72 0d0a 0a00 4e0d     ew CO Zero.....N
 80935d8:	7765 4320 204f 657a 6f72 203a 4300 7275     ew CO zero: .Cur
 80935e8:	6572 746e 5020 314d 7a20 7265 3a6f 2000     rent PM1 zero:. 
 80935f8:	6775 6d2f 0033 6e45 6574 2072 656e 2077     ug/m3.Enter new 
 8093608:	4d50 2031 655a 6f72 0d0a 0a00 4e0d 7765     PM1 Zero.....New
 8093618:	5020 314d 7a20 7265 3a6f 0020 7543 7272      PM1 zero: .Curr
 8093628:	6e65 2074 4d50 2e32 2035 657a 6f72 003a     ent PM2.5 zero:.
 8093638:	6e45 6574 2072 656e 2077 4d50 2e32 2035     Enter new PM2.5 
 8093648:	655a 6f72 0d0a 0a00 4e0d 7765 5020 324d     Zero.....New PM2
 8093658:	352e 7a20 7265 3a6f 0020 7543 7272 6e65     .5 zero: .Curren
 8093668:	2074 4d50 3031 7a20 7265 3a6f 2000 6d75     t PM10 zero:. um
 8093678:	6d2f 0033 6e45 6574 2072 656e 2077 4d50     /m3.Enter new PM
 8093688:	3031 5a20 7265 0a6f 000d 0d0a 654e 2077     10 Zero.....New 
 8093698:	4d50 3031 7a20 7265 3a6f 0020 7543 7272     PM10 zero: .Curr
 80936a8:	6e65 2074 6554 706d 7265 7461 7275 2065     ent Temperature 
 80936b8:	657a 6f72 003a 6e45 6574 2072 656e 2077     zero:.Enter new 
 80936c8:	6554 706d 7265 7461 7275 2065 655a 6f72     Temperature Zero
 80936d8:	0d0a 0a00 4e0d 7765 5420 6d65 6570 6172     .....New Tempera
 80936e8:	7574 6572 7a20 7265 3a6f 0020 7543 7272     ture zero: .Curr
 80936f8:	6e65 2074 7250 7365 7573 6572 7a20 7265     ent Pressure zer
 8093708:	3a6f 4500 746e 7265 6e20 7765 5020 6572     o:.Enter new Pre
 8093718:	7373 7275 2065 655a 6f72 0d0a 0a00 4e0d     ssure Zero.....N
 8093728:	7765 5020 6572 7373 7275 2065 657a 6f72     ew Pressure zero
 8093738:	203a 4300 7275 6572 746e 5220 2048 657a     : .Current RH ze
 8093748:	6f72 003a 6e45 6574 2072 656e 2077 4852     ro:.Enter new RH
 8093758:	5a20 7265 0a6f 000d 0d0a 654e 2077 4852      Zero.....New RH
 8093768:	7a20 7265 3a6f 0020 654d 756e 003e 6553      zero: .Menu>.Se
 8093778:	6972 6c61 6420 6265 6775 6967 676e 6520     rial debugging e
 8093788:	616e 6c62 6465 002e 6553 6972 6c61 6420     nabled..Serial d
 8093798:	6265 6775 6967 676e 6420 7369 6261 656c     ebugging disable
 80937a8:	2e64 4500 616e 6c62 6e69 2067 6543 6c6c     d..Enabling Cell
 80937b8:	6c75 7261 002e 6543 6c6c 6c75 7261 6120     ular..Cellular a
 80937c8:	726c 6165 7964 6520 616e 6c62 6465 002e     lready enabled..
 80937d8:	6944 6173 6c62 6e69 2067 6543 6c6c 6c75     Disabling Cellul
 80937e8:	7261 4300 6c65 756c 616c 2072 6c61 6572     ar.Cellular alre
 80937f8:	6461 2079 6964 6173 6c62 6465 002e 6554     ady disabled..Te
 8093808:	706d 7265 7461 7275 2065 6e75 7469 2073     mperature units 
 8093818:	6c61 6572 6461 2079 6573 2074 6f74 4620     already set to F
 8093828:	7261 6e65 6965 2e74 5400 6d65 6570 6172     areneit..Tempera
 8093838:	7574 6572 7520 696e 7374 6120 726c 6165     ture units alrea
 8093848:	7964 7320 7465 7420 206f 6543 636c 7569     dy set to Celciu
 8093858:	2e73 4400 7369 6261 696c 676e 6e20 7765     s..Disabling new
 8093868:	7420 6d65 6570 6172 7574 6572 7320 6e65      temperature sen
 8093878:	6f73 0072 6554 706d 7265 7461 7275 2065     sor.Temperature 
 8093888:	6573 736e 726f 6120 726c 6165 7964 6420     sensor already d
 8093898:	7369 6261 656c 0064 6554 706d 7265 7461     isabled.Temperat
 80938a8:	7275 2065 6573 736e 726f 6120 726c 6165     ure sensor alrea
 80938b8:	7964 6520 616e 6c62 6465 5400 6d65 6570     dy enabled.Tempe
 80938c8:	6172 7574 2065 6573 736e 726f 6e20 776f     ratue sensor now
 80938d8:	6520 616e 6c62 6465 4100 616e 6f6c 2067      enabled.Analog 
 80938e8:	6572 6461 6e69 2067 666f 6f20 6f7a 656e     reading of ozone
 80938f8:	6120 726c 6165 7964 6520 616e 6c62 6465      already enabled
 8093908:	4100 616e 6f6c 2067 6572 6461 6e69 2067     .Analog reading 
 8093918:	666f 6f20 6f7a 656e 6e20 776f 6520 616e     of ozone now ena
 8093928:	6c62 6465 4400 6769 7469 6c61 7220 6165     bled.Digital rea
 8093938:	6964 676e 6f20 2066 7a6f 6e6f 2065 6c61     ding of ozone al
 8093948:	6572 6461 2079 6e65 6261 656c 0064 6944     ready enabled.Di
 8093958:	6967 6174 206c 6572 6461 6e69 2067 666f     gital reading of
 8093968:	6f20 6f7a 656e 6e20 776f 6520 616e 6c62      ozone now enabl
 8093978:	6465 4f00 7475 7570 7474 6e69 2067 5047     ed.Outputting GP
 8093988:	2053 6f63 746e 6e69 6f75 7375 796c 4200     S continuously.B
 8093998:	7461 6574 7972 7420 7268 7365 6f68 646c     attery threshold
 80939a8:	6120 726c 6165 7964 6520 616e 6c62 6465      already enabled
 80939b8:	4500 616e 6c62 6e69 2067 6162 7474 7265     .Enabling batter
 80939c8:	2079 6874 6572 6873 6c6f 2064 696c 696d     y threshold limi
 80939d8:	6974 676e 4200 7461 6574 7972 7420 7268     ting.Battery thr
 80939e8:	7365 6f68 646c 6120 726c 6165 7964 6420     eshold already d
 80939f8:	7369 6261 656c 0064 6944 6173 6c62 6e69     isabled.Disablin
 8093a08:	2067 6162 7474 7265 2079 6874 6572 6873     g battery thresh
 8093a18:	6c6f 2064 696c 696d 6974 676e 4500 616e     old limiting.Ena
 8093a28:	6c62 6e69 2067 6f6c 2077 6f70 6577 2072     bling low power 
 8093a38:	6f66 2072 7067 0073 7554 6e72 6e69 2067     for gps.Turning 
 8093a48:	666f 2066 6162 6674 7465 4100 6c6c 776f     off batfet.Allow
 8093a58:	6e69 2067 6162 6674 7465 7420 206f 7574     ing batfet to tu
 8093a68:	6e72 6f20 006e 6944 6173 6c62 6e69 2067     rn on.Disabling 
 8093a78:	4241 2043 6f6c 6967 2063 6f66 2072 4f43     ABC logic for CO
 8093a88:	2032 6573 736e 726f 4100 4342 6c20 676f     2 sensor.ABC log
 8093a98:	6369 6120 726c 6165 7964 6420 7369 6261     ic already disab
 8093aa8:	656c 0064 6e45 6261 696c 676e 6120 6362     led.Enabling abc
 8093ab8:	6c20 676f 6369 6620 726f 4320 324f 7320      logic for CO2 s
 8093ac8:	6e65 6f73 0072 4241 2043 6f6c 6967 2063     ensor.ABC logic 
 8093ad8:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 8093ae8:	6e45 6261 696c 676e 4820 4849 3138 3032     Enabling HIH8120
 8093af8:	5220 2048 6573 736e 726f 4400 7369 6261      RH sensor.Disab
 8093b08:	696c 676e 4820 4849 3138 3032 5220 2048     ling HIH8120 RH 
 8093b18:	6573 736e 726f 4e00 776f 7220 6165 6964     sensor.Now readi
 8093b28:	676e 4320 204f 7266 6d6f 5520 3032 412d     ng CO from U20-A
 8093b38:	706c 6168 0032 6f4e 2077 6572 6461 6e69     lpha2.Now readin
 8093b48:	2067 4f43 6620 6f72 206d 3155 2d39 6c41     g CO from U19-Al
 8093b58:	6870 3161 5200 7365 7465 6e69 2067 6874     pha1.Reseting th
 8093b68:	2065 4f43 2032 6573 736e 726f 4100 5050     e CO2 sensor.APP
 8093b78:	5620 7265 6973 6e6f 203a 4500 616e 6c62      Version: .Enabl
 8093b88:	6e69 2067 7a4f 6e6f 0065 7a4f 6e6f 2065     ing Ozone.Ozone 
 8093b98:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 8093ba8:	6944 6173 6c62 6e69 2067 7a4f 6e6f 0065     Disabling Ozone.
 8093bb8:	7a4f 6e6f 2065 6c61 6572 6461 2079 6964     Ozone already di
 8093bc8:	6173 6c62 6465 4500 616e 6c62 6e69 2067     sabled.Enabling 
 8093bd8:	4f56 2743 0073 4f56 2743 2073 6c61 6572     VOC's.VOC's alre
 8093be8:	6461 2079 6e65 6261 656c 0064 6944 6173     ady enabled.Disa
 8093bf8:	6c62 6e69 2067 4f56 2743 0073 4f56 2743     bling VOC's.VOC'
 8093c08:	2073 6c61 6572 6461 2079 6964 6173 6c62     s already disabl
 8093c18:	6465 4600 7561 746c 203a 5300 7379 6574     ed.Fault: .Syste
 8093c28:	206d 7473 7461 7375 203a 4f00 7475 7570     m status: .Outpu
 8093c38:	7474 6e69 2067 6f6e 6d72 6c61 796c 4f00     tting normally.O
 8093c48:	7475 7570 7474 6e69 2067 6e6f 796c 5020     utputting only P
 8093c58:	004d 754f 7074 7475 6974 676e 5620 434f     M.Outputting VOC
 8093c68:	2073 6f63 746e 6e69 6f75 7375 796c 2021     s continuously! 
 8093c78:	5020 6572 7373 6120 796e 6220 7475 6f74      Press any butto
 8093c88:	206e 6f74 6520 6978 2e74 2e2e 5400 6f56     n to exit....TVo
 8093c98:	7363 253d 2e31 6630 202c 6554 706d 253d     cs=%1.0f, Temp=%
 8093ca8:	2e31 6631 202c 7270 7365 3d73 3125 312e     1.1f, press=%1.1
 8093cb8:	2c66 7220 3d68 3125 312e 0a66 000d 6944     f, rh=%1.1f...Di
 8093cc8:	6173 6c62 6e69 2067 6573 736e 6269 656c     sabling sensible
 8093cd8:	6920 746f 6420 7461 2061 7570 6873 002e      iot data push..
 8093ce8:	6944 6173 6c62 6e69 2067 6163 2072 6f74     Disabling car to
 8093cf8:	7070 7265 7020 776f 7265 202e 0020 6e45     pper power.  .En
 8093d08:	6261 696c 676e 6320 7261 7420 706f 6570     abling car toppe
 8093d18:	2072 6f70 6577 2e72 2020 6649 6e20 206f     r power.  If no 
 8093d28:	7865 6574 6e72 6c61 7020 776f 7265 202c     external power, 
 8093d38:	7973 7473 6d65 7720 6c69 206c 7574 6e72     system will turn
 8093d48:	6f20 6666 002e 6944 6173 6c62 6e69 2067      off..Disabling 
 8093d58:	6f67 676f 656c 6c20 636f 7461 6f69 206e     google location 
 8093d68:	6573 7672 6369 7365 002e 6e45 6261 696c     services..Enabli
 8093d78:	676e 6720 6f6f 6c67 2065 6f6c 6163 6974     ng google locati
 8093d88:	6e6f 7320 7265 6976 6563 2e73 4700 7465     on services..Get
 8093d98:	6974 676e 6320 6c65 756c 616c 2072 6e69     ting cellular in
 8093da8:	6f66 6d72 7461 6f69 2c6e 7420 6968 2073     formation, this 
 8093db8:	616d 2079 6174 656b 6120 7720 6968 656c     may take a while
 8093dc8:	2e2e 002e 4d49 4945 253d 0073 4d49 4953     ....IMEI=%s.IMSI
 8093dd8:	253d 0073 4349 4943 3d44 7325 4500 6978     =%s.ICCID=%s.Exi
 8093de8:	6974 676e 7320 7265 6169 206c 656d 756e     ting serial menu
 8093df8:	2e2e 002e 6542 6f66 6572 7220 6165 6964     ....Before readi
 8093e08:	676e 6220 656d 6200 6665 726f 2065 6572     ng bme.before re
 8093e18:	6461 6e69 2067 6d62 0065 7270 7365 7573     ading bme.pressu
 8093e28:	6572 6320 726f 6572 7463 6f69 206e 6166     re correction fa
 8093e38:	7463 726f 6620 726f 4320 324f 253a 2e31     ctor for CO2:%1.
 8093e48:	6632 0d0a 4500 7272 726f 203a 7250 7365     2f...Error: Pres
 8093e58:	7573 6572 6f20 7475 6f20 2066 6172 676e     sure out of rang
 8093e68:	2c65 6e20 746f 7520 6973 676e 7020 6572     e, not using pre
 8093e78:	7373 7275 2065 6f63 7272 6365 6974 6e6f     ssure correction
 8093e88:	6620 726f 4320 324f 002e 7250 7365 7573      for CO2..Pressu
 8093e98:	6572 253d 2e31 6632 0d0a 7000 326d 352e     re=%1.2f...pm2.5
 8093ea8:	6320 726f 6572 7463 6f69 206e 6166 7463      correction fact
 8093eb8:	726f 203a 3125 322e 2c66 2520 2e31 6632     or: %1.2f, %1.2f
 8093ec8:	0d0a 6900 636e 6d6f 696d 676e 6220 7479     ...incomming byt
 8093ed8:	3a65 4300 6e6f 656e 7463 6e69 2067 6f74     e:.Connecting to
 8093ee8:	6320 6c65 756c 616c 2072 656e 7774 726f      cellular networ
 8093ef8:	006b 6661 6574 2072 6563 6c6c 6c75 7261     k.after cellular
 8093f08:	6e4f 4100 7466 7265 6320 6c65 756c 616c     On.After cellula
 8093f18:	4f72 006e 6641 6574 2072 6170 7472 6369     rOn.After partic
 8093f28:	656c 6320 6e6f 656e 7463 7300 7465 6974     le connect.setti
 8093f38:	676e 7420 6972 6465 635f 6c65 756c 616c     ng tried_cellula
 8093f48:	5f72 6f63 6e6e 6365 2074 6f74 6620 6c61     r_connect to fal
 8093f58:	6573 4400 7369 6f63 6e6e 6365 6974 676e     se.Disconnecting
 8093f68:	6620 6f72 206d 6563 6c6c 6c75 7261 6e20      from cellular n
 8093f78:	7465 6f77 6b72 4700 696f 676e 7420 206f     etwork.Going to 
 8093f88:	6c73 6565 2070 6562 6163 7375 2065 6162     sleep because ba
 8093f98:	7474 7265 2079 7369 6220 6c65 776f 3220     ttery is below 2
 8093fa8:	2530 6320 6168 6772 0065 0000               0% charge...

08093fb4 <_ZTV4File>:
	...
 8093fbc:	0b6f 0808 0b7f 0808 0bc5 0808 0bb9 0808     o...............
 8093fcc:	0b53 0808 0b8d 0808 0bb3 0808 0bad 0808     S...............

08093fdc <_ZTV6SdFile>:
	...
 8093fe4:	0b6d 0808 0b71 0808 0c59 0808 0bbf 0808     m...q...Y.......

08093ff4 <_ZTV5SdFat>:
	...
 8093ffc:	0bf5 0808 0bed 0808 0be5 0808 0bdd 0808     ................
 809400c:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 809401c:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 809402c:	831a 0000                                   ....

08094030 <_ZTV10PowerCheck>:
	...
 8094038:	7159 0808 7171 0808 6143 696c 7262 7461     Yq..qq..Calibrat
 8094048:	6e69 2067 4f43 0032 6572 6461 6e69 2067     ing CO2.reading 
 8094058:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 8094068:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 8094078:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 8094088:	4c00 4253 203a 0000                         .LSB: ..

08094090 <_ZTV5SdSpi>:
	...
 8094098:	8371 0808 8381 0808 836d 0808 83f9 0808     q.......m.......
 80940a8:	841d 0808 840d 0808 8461 0808               ........a...

080940b4 <_ZTV7HIH61XX>:
	...
 80940bc:	93c9 0808 93d9 0808 9519 0808 7325 227b     ............%s{"
 80940cc:	2269 253a 2c64 6c22 3a22 7525 222c 2263     i":%d,"l":%u,"c"
 80940dc:	253a 2c64 6e22 3a22 6425 007d 227b 2263     :%d,"n":%d}.{"c"
 80940ec:	7b3a 6f22 3a22 2522 2273 002c 6122 3a22     :{"o":"%s",."a":
 80940fc:	005b 6564 6976 6563 6f4c 6163 6f74 0072     [.deviceLocator.
 809410c:	5441 5426 7000 6275 696c 6873 6f4c 6163     AT&T.publishLoca
 809411c:	6974 6e6f 7300 6163 446e 7461 3d61 7325     tion.scanData=%s
 809412c:	6800 6f6f 2d6b 6572 7073 6e6f 6573 252f     .hook-response/%
 809413c:	2f73 7325 0000 0000                         s/%s....

08094144 <_ZTV26CellularHelperCREGResponse>:
	...
 809414c:	a525 0808                                   %...

08094150 <_ZTV39CellularHelperEnvironmentResponseStaticILj4EE>:
	...
 8094158:	a089 0808                                   ....

0809415c <_ZTV23GoogleMapsDeviceLocator>:
	...
 8094164:	95b5 0808 95d5 0808 5954 4550 555f 4b4e     ........TYPE_UNK
 8094174:	4f4e 4e57 5400 5059 5f45 4b4f 5400 5059     NOWN.TYPE_OK.TYP
 8094184:	5f45 5245 4f52 0052 5954 4550 435f 4e4f     E_ERROR.TYPE_CON
 8094194:	454e 5443 5400 5059 5f45 4f4e 4143 5252     NECT.TYPE_NOCARR
 80941a4:	4549 0052 5954 4550 4e5f 444f 4149 544c     IER.TYPE_NODIALT
 80941b4:	4e4f 0045 5954 4550 425f 5355 0059 5954     ONE.TYPE_BUSY.TY
 80941c4:	4550 4e5f 414f 534e 4557 0052 5954 4550     PE_NOANSWER.TYPE
 80941d4:	505f 4f52 504d 0054 5954 4550 505f 554c     _PROMPT.TYPE_PLU
 80941e4:	0053 5954 4550 415f 4f42 5452 4445 7400     S.TYPE_ABORTED.t
 80941f4:	7079 3d65 7830 7825 6300 6c65 756c 616c     ype=0x%x.cellula
 8094204:	2072 6572 7073 6e6f 6573 7420 7079 3d65     r response type=
 8094214:	7325 6c20 6e65 253d 0064 6e5c 5c00 0072     %s len=%d.\n.\r.
 8094224:	7830 3025 7832 6b00 7965 7420 6f6f 6c20     0x%02x.key too l
 8094234:	6e6f 2067 656b 3d79 7325 7620 6c61 6575     ong key=%s value
 8094244:	253d 0073 4152 0054 4d55 5354 4d00 4343     =%s.RAT.UMTS.MCC
 8094254:	4d00 434e 4c00 4341 4300 0049 5342 4349     .MNC.LAC.CI.BSIC
 8094264:	4100 4652 4e43 4100 4652 4e43 445f 4445     .ARFCN.ARFCN_DED
 8094274:	5200 4c58 5645 5553 0042 5f54 4441 0056     .RXLEVSUB.T_ADV.
 8094284:	5852 454c 0056 4c44 0046 4c55 0046 5352     RXLEV.DLF.ULF.RS
 8094294:	5043 4c20 5645 5200 4341 5300 0043 4345     CP LEV.RAC.SC.EC
 80942a4:	304e 4c20 5645 7500 6b6e 6f6e 6e77 6b20     N0 LEV.unknown k
 80942b4:	7965 253d 2073 6176 756c 3d65 7325 4d00     ey=%s value=%s.M
 80942c4:	4343 003a 4152 3a54 6c00 7461 253d 2066     CC:.RAT:.lat=%f 
 80942d4:	6f6c 3d6e 6625 6120 746c 253d 2064 6e75     lon=%f alt=%d un
 80942e4:	6563 7472 6961 746e 3d79 6425 7600 6c61     certainty=%d.val
 80942f4:	6469 663d 6c61 6573 2500 2c64 6425 222c     id=false.%d,%d,"
 8094304:	7825 2c22 2522 2278 252c 0064 7473 7461     %x","%x",%d.stat
 8094314:	253d 2064 616c 3d63 7830 7825 6320 3d69     =%d lac=0x%x ci=
 8094324:	7830 7825 7220 7461 253d 0064 5441 432b     0x%x rat=%d.AT+C
 8094334:	4d47 0d49 000a 5441 432b 4d47 0d4d 000a     GMI...AT+CGMM...
 8094344:	5441 432b 5347 0d4e 000a 4343 4449 4100     AT+CGSN...CCID.A
 8094354:	2b54 4343 4449 0a0d 5300 5241 2d41 3452     T+CCID...SARA-R4
 8094364:	5500 4f44 4e50 4100 2b54 4455 504f 3d4e     .UDOPN.AT+UDOPN=
 8094374:	6425 0a0d 4300 4547 0044 5441 432b 4547     %d...CGED.AT+CGE
 8094384:	3d44 6425 0a0d 4100 2b54 5243 4745 323d     D=%d...AT+CREG=2
 8094394:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 80943a4:	0a0d 4100 2b54 5243 4745 303d 0a0d 0a00     ...AT+CREG=0....
 80943b4:	252b 3a73 0020 0000                         +%s: ...

080943bc <_ZTV28CellularHelperStringResponse>:
	...
 80943c4:	a4ed 0808                                   ....

080943c8 <_ZTV32CellularHelperPlusStringResponse>:
	...
 80943d0:	a525 0808                                   %...

080943d4 <_ZTV33CellularHelperEnvironmentResponse>:
	...
 80943dc:	a089 0808                                   ....

080943e0 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 80943e0:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

080943f0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80943f0:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 8094400:	766f 0066 7061 0070 2b25 3330 3a64 3025     ovf.app.%+03d:%0
 8094410:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8094420:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08094430 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8094438:	c39d 0808 c3a3 0808 c3e1 0808 c3b1 0808     ................
 8094448:	c39f 0808                                   ....

0809444c <_ZTV9IPAddress>:
	...
 8094454:	c951 0808 c941 0808 c943 0808               Q...A...C...

08094460 <_ZTV9USBSerial>:
	...
 8094468:	c9e5 0808 ca4b 0808 ca23 0808 b8ed 0808     ....K...#.......
 8094478:	ca15 0808 c9e7 0808 c9f7 0808 ca45 0808     ............E...
 8094488:	ca07 0808 c9e1 0808                         ........

08094490 <_ZTVN5spark13CellularClassE>:
	...
 8094498:	cc67 0808 cc5d 0808 cc53 0808 cbd9 0808     g...]...S.......
 80944a8:	cc47 0808 0da1 0808 cc3b 0808 cc33 0808     G.......;...3...
 80944b8:	cc29 0808 cc1f 0808 cbe3 0808               )...........

080944c4 <_ZTV11USARTSerial>:
	...
 80944cc:	0b51 0808 0dad 0808 cce3 0808 b8ed 0808     Q...............
 80944dc:	ccb3 0808 cccf 0808 ccc1 0808 ccdd 0808     ................
 80944ec:	cca1 0808 cca5 0808                         ........

080944f4 <_ZTV7TwoWire>:
	...
 80944fc:	cdc1 0808 ce0b 0808 cde3 0808 cdc3 0808     ................
 809450c:	cdeb 0808 cdf3 0808 cdfb 0808 ce03 0808     ................

0809451c <_ZTVN5spark12NetworkClassE>:
	...
 8094524:	cf19 0808 cf23 0808 cf2d 0808 cf37 0808     ....#...-...7...
 8094534:	cf41 0808 cf4d 0808 cf59 0808 cf65 0808     A...M...Y...e...
 8094544:	cf6d 0808 cf77 0808 cf81 0808 2575 3430     m...w.......u%04
 8094554:	0078 0000                                   x...

08094558 <_ZTVN5spark16JSONBufferWriterE>:
	...
 8094560:	cfdd 0808 cfdf 0808 cfed 0808 d013 0808     ................

08094570 <_ZSt7nothrow>:
 8094570:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 8094580:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

08094591 <day_name.4782>:
 8094591:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80945a1:	6972 6153                                    riSat

080945a6 <mon_name.4783>:
 80945a6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80945b6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80945c6:	4476 6365 0000                              vDec..

080945cc <__month_lengths>:
 80945cc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80945dc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80945ec:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80945fc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 809460c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 809461c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 809462c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 809463c:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 809464c:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 809465c:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 809466c:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 809467c:	6c33 2564 322e 646c 6900 696e 7974 0000     3ld%.2ld.inity..

0809468c <fpi.6203>:
 809468c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 809469c:	0000 0000                                   ....

080946a0 <fpinan.6239>:
 80946a0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

080946b8 <tinytens>:
 80946b8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80946c8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80946d8:	6f43 64ac 0628 1168 614a 006e 6546 0062     Co.d(.h.Jan.Feb.
 80946e8:	614d 0072 7041 0072 614d 0079 754a 006e     Mar.Apr.May.Jun.
 80946f8:	754a 006c 7541 0067 6553 0070 634f 0074     Jul.Aug.Sep.Oct.
 8094708:	6f4e 0076 6544 0063 614a 756e 7261 0079     Nov.Dec.January.
 8094718:	6546 7262 6175 7972 4d00 7261 6863 4100     February.March.A
 8094728:	7270 6c69 4a00 6e75 0065 754a 796c 4100     pril.June.July.A
 8094738:	6775 7375 0074 6553 7470 6d65 6562 0072     ugust.September.
 8094748:	634f 6f74 6562 0072 6f4e 6576 626d 7265     October.November
 8094758:	4400 6365 6d65 6562 0072 7553 006e 6f4d     .December.Sun.Mo
 8094768:	006e 7554 0065 6557 0064 6854 0075 7246     n.Tue.Wed.Thu.Fr
 8094778:	0069 6153 0074 7553 646e 7961 4d00 6e6f     i.Sat.Sunday.Mon
 8094788:	6164 0079 7554 7365 6164 0079 6557 6e64     day.Tuesday.Wedn
 8094798:	7365 6164 0079 6854 7275 6473 7961 4600     esday.Thursday.F
 80947a8:	6972 6164 0079 6153 7574 6472 7961 2500     riday.Saturday.%
 80947b8:	2f6d 6425 252f 0079 6125 2520 2062 6525     m/%d/%y.%a %b %e
 80947c8:	2520 3a48 4d25 253a 2053 5925 4100 004d      %H:%M:%S %Y.AM.
 80947d8:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 80947e8:	2053 5a25 2520 0059 646d 2500 3a49 4d25     S %Z %Y.md.%I:%M
 80947f8:	253a 2053 7025 0000                         :%S %p..

08094800 <_C_time_locale>:
 8094800:	46e0 0809 46e4 0809 46e8 0809 46ec 0809     .F...F...F...F..
 8094810:	46f0 0809 46f4 0809 46f8 0809 46fc 0809     .F...F...F...F..
 8094820:	4700 0809 4704 0809 4708 0809 470c 0809     .G...G...G...G..
 8094830:	4710 0809 4718 0809 4721 0809 4727 0809     .G...G..!G..'G..
 8094840:	46f0 0809 472d 0809 4732 0809 4737 0809     .F..-G..2G..7G..
 8094850:	473e 0809 4748 0809 4750 0809 4759 0809     >G..HG..PG..YG..
 8094860:	4762 0809 4766 0809 476a 0809 476e 0809     bG..fG..jG..nG..
 8094870:	4772 0809 4776 0809 477a 0809 477e 0809     rG..vG..zG..~G..
 8094880:	4785 0809 478c 0809 4794 0809 479e 0809     .G...G...G...G..
 8094890:	47a7 0809 47ae 0809 2f0f 0809 47b7 0809     .G...G.../...G..
 80948a0:	47c0 0809 47d5 0809 3c57 0809 47d8 0809     .G...G..W<...G..
 80948b0:	4710 0809 4718 0809 4721 0809 4727 0809     .G...G..!G..'G..
 80948c0:	46f0 0809 472d 0809 4732 0809 4737 0809     .F..-G..2G..7G..
 80948d0:	473e 0809 4748 0809 4750 0809 4759 0809     >G..HG..PG..YG..
 80948e0:	47f0 0809 47f3 0809 43b2 0809 43b2 0809     .G...G...C...C..
 80948f0:	43b2 0809 43b2 0809 43b2 0809 5a54 4700     .C...C...C..TZ.G
 8094900:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 8094910:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 8094920:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 8094930:	3a6e 6825 2575 006e                         n:%hu%n.

08094938 <_ctype_>:
 8094938:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8094948:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8094958:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8094968:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8094978:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8094988:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8094998:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80949a8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80949b8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08094a3c <_C_numeric_locale>:
 8094a3c:	3dca 0809 43b2 0809 01b0 2000 4f50 4953     .=...C..... POSI
 8094a4c:	0058 0000                                   X...

08094a50 <__mprec_bigtens>:
 8094a50:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8094a60:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8094a70:	bf3c 7f73 4fdd 7515                         <.s..O.u

08094a78 <__mprec_tens>:
 8094a78:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8094a88:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8094a98:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8094aa8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8094ab8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8094ac8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8094ad8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8094ae8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8094af8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8094b08:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8094b18:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8094b28:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8094b38:	9db4 79d9 7843 44ea                         ...yCx.D

08094b40 <p05.6127>:
 8094b40:	0005 0000 0019 0000 007d 0000               ........}...

08094b4c <link_const_variable_data_end>:
 8094b4c:	080869ad 	.word	0x080869ad
 8094b50:	080884b5 	.word	0x080884b5
 8094b54:	08089b89 	.word	0x08089b89
 8094b58:	0808b249 	.word	0x0808b249
 8094b5c:	0808bcf9 	.word	0x0808bcf9
 8094b60:	0808c0b9 	.word	0x0808c0b9
 8094b64:	0808c105 	.word	0x0808c105
 8094b68:	0808cc71 	.word	0x0808cc71
 8094b6c:	0808cfc9 	.word	0x0808cfc9
 8094b70:	0808d2f1 	.word	0x0808d2f1

08094b74 <link_constructors_end>:
	...
