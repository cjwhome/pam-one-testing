
c:/Users/abailly/PAM_ESP/pam-particle-firmware/target/2.0.1/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00010520  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08090540  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002ac  20000000  08090544  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000f58  200002b0  200002b0  000402b0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080907f0  080907f0  000307f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08090818  08090818  00030818  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00282c38  00000000  00000000  0003081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00027f15  00000000  00000000  002b3454  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003198  00000000  00000000  002db369  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00008460  00000000  00000000  002de501  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003ccbe  00000000  00000000  002e6961  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00060a65  00000000  00000000  0032361f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c5d2f  00000000  00000000  00384084  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00009468  00000000  00000000  00449db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00036061  00000000  00000000  0045321c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <__udivmoddi4>:

DYNALIB_FN(15, services2, _printf_float, int(struct _reent*, struct _prt_data_t*, FILE*, int(*pfunc)(struct _reent* , FILE*, const char*, size_t), va_list*))
DYNALIB_FN(16, services2, _tzset_unlocked_r, void(struct _reent*))
// FIXME: this doesn't work with LTO, disable for now when importing
#if !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(17, services2, __udivmoddi4, unsigned long(unsigned long, unsigned long, unsigned long*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <__udivmoddi4+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <localtime_r+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080040:	b508      	push	{r3, lr}
 8080042:	4b02      	ldr	r3, [pc, #8]	; (808004c <strftime+0xc>)
 8080044:	681b      	ldr	r3, [r3, #0]
 8080046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080048:	9301      	str	r3, [sp, #4]
 808004a:	bd08      	pop	{r3, pc}
 808004c:	0806002c 	.word	0x0806002c

08080050 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080050:	4809      	ldr	r0, [pc, #36]	; (8080078 <module_user_pre_init+0x28>)
 8080052:	490a      	ldr	r1, [pc, #40]	; (808007c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080054:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080056:	4288      	cmp	r0, r1
 8080058:	d005      	beq.n	8080066 <module_user_pre_init+0x16>
 808005a:	4a09      	ldr	r2, [pc, #36]	; (8080080 <module_user_pre_init+0x30>)
 808005c:	4282      	cmp	r2, r0
 808005e:	d002      	beq.n	8080066 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080060:	1a12      	subs	r2, r2, r0
 8080062:	f00b ff5b 	bl	808bf1c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080066:	4807      	ldr	r0, [pc, #28]	; (8080084 <module_user_pre_init+0x34>)
 8080068:	4a07      	ldr	r2, [pc, #28]	; (8080088 <module_user_pre_init+0x38>)
 808006a:	2100      	movs	r1, #0
 808006c:	1a12      	subs	r2, r2, r0
 808006e:	f00b ff63 	bl	808bf38 <memset>
    return &link_heap_start;
}
 8080072:	4806      	ldr	r0, [pc, #24]	; (808008c <module_user_pre_init+0x3c>)
 8080074:	bd08      	pop	{r3, pc}
 8080076:	bf00      	nop
 8080078:	20000000 	.word	0x20000000
 808007c:	08090544 	.word	0x08090544
 8080080:	200002ac 	.word	0x200002ac
 8080084:	200002b0 	.word	0x200002b0
 8080088:	20001208 	.word	0x20001208
 808008c:	20001208 	.word	0x20001208

08080090 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080090:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080092:	f009 fed7 	bl	8089e44 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080096:	2500      	movs	r5, #0
 8080098:	4e05      	ldr	r6, [pc, #20]	; (80800b0 <module_user_init+0x20>)
 808009a:	4c06      	ldr	r4, [pc, #24]	; (80800b4 <module_user_init+0x24>)
 808009c:	1ba4      	subs	r4, r4, r6
 808009e:	08a4      	lsrs	r4, r4, #2
 80800a0:	42a5      	cmp	r5, r4
 80800a2:	d100      	bne.n	80800a6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80800a4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80800a6:	f856 3b04 	ldr.w	r3, [r6], #4
 80800aa:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80800ac:	3501      	adds	r5, #1
 80800ae:	e7f7      	b.n	80800a0 <module_user_init+0x10>
 80800b0:	08090514 	.word	0x08090514
 80800b4:	0809053c 	.word	0x0809053c

080800b8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800b8:	f004 b912 	b.w	80842e0 <setup>

080800bc <module_user_loop>:
}

void module_user_loop() {
 80800bc:	b508      	push	{r3, lr}
    loop();
 80800be:	f005 fd8f 	bl	8085be0 <loop>
    _post_loop();
}
 80800c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800c6:	f009 be7f 	b.w	8089dc8 <_post_loop>

080800ca <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ca:	f008 bc65 	b.w	8088998 <malloc>

080800ce <_Znaj>:
 80800ce:	f008 bc63 	b.w	8088998 <malloc>

080800d2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800d2:	f008 bc69 	b.w	80889a8 <free>

080800d6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800d6:	7800      	ldrb	r0, [r0, #0]
 80800d8:	fab0 f080 	clz	r0, r0
 80800dc:	0940      	lsrs	r0, r0, #5
 80800de:	4770      	bx	lr

080800e0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800e0:	2301      	movs	r3, #1
 80800e2:	7003      	strb	r3, [r0, #0]
 80800e4:	4770      	bx	lr

080800e6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800e6:	b148      	cbz	r0, 80800fc <null_ptr_check+0x16>
 80800e8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ea:	b13b      	cbz	r3, 80800fc <null_ptr_check+0x16>
 80800ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800ee:	b12b      	cbz	r3, 80800fc <null_ptr_check+0x16>
 80800f0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800f2:	fab0 f080 	clz	r0, r0
 80800f6:	0940      	lsrs	r0, r0, #5
 80800f8:	4240      	negs	r0, r0
 80800fa:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800fc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 8080100:	4770      	bx	lr

08080102 <set_mem_page>:
{
 8080102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080104:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
 8080106:	4608      	mov	r0, r1
{
 8080108:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 808010a:	f7ff ffec 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808010e:	4605      	mov	r5, r0
 8080110:	bb40      	cbnz	r0, 8080164 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
 8080112:	f012 0f80 	tst.w	r2, #128	; 0x80
 8080116:	bf14      	ite	ne
 8080118:	2300      	movne	r3, #0
 808011a:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
 808011c:	78ca      	ldrb	r2, [r1, #3]
 808011e:	429a      	cmp	r2, r3
 8080120:	d020      	beq.n	8080164 <set_mem_page+0x62>
			dev->mem_page = mem_page;
 8080122:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8080124:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 8080126:	2301      	movs	r3, #1
 8080128:	21f3      	movs	r1, #243	; 0xf3
 808012a:	7860      	ldrb	r0, [r4, #1]
 808012c:	f10d 0207 	add.w	r2, sp, #7
 8080130:	47b0      	blx	r6
 8080132:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080136:	b998      	cbnz	r0, 8080160 <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8080138:	f89d 2007 	ldrb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808013c:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
 808013e:	f022 0210 	bic.w	r2, r2, #16
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080142:	f003 0310 	and.w	r3, r3, #16
 8080146:	4313      	orrs	r3, r2
 8080148:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808014c:	2173      	movs	r1, #115	; 0x73
 808014e:	2301      	movs	r3, #1
 8080150:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8080152:	7860      	ldrb	r0, [r4, #1]
 8080154:	f10d 0207 	add.w	r2, sp, #7
 8080158:	47b0      	blx	r6
 808015a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 808015e:	b108      	cbz	r0, 8080164 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
 8080160:	f06f 0501 	mvn.w	r5, #1
}
 8080164:	4628      	mov	r0, r5
 8080166:	b002      	add	sp, #8
 8080168:	bd70      	pop	{r4, r5, r6, pc}

0808016a <boundary_check.isra.0.constprop.0>:
		if (*value > max) {
 808016a:	7803      	ldrb	r3, [r0, #0]
 808016c:	428b      	cmp	r3, r1
			*value = max;
 808016e:	bf84      	itt	hi
 8080170:	7001      	strbhi	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080172:	7813      	ldrbhi	r3, [r2, #0]
}
 8080174:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080178:	bf84      	itt	hi
 808017a:	f043 0302 	orrhi.w	r3, r3, #2
 808017e:	7013      	strbhi	r3, [r2, #0]
}
 8080180:	4770      	bx	lr

08080182 <bme680_get_regs>:
{
 8080182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080186:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 8080188:	4618      	mov	r0, r3
{
 808018a:	4688      	mov	r8, r1
 808018c:	4691      	mov	r9, r2
 808018e:	461d      	mov	r5, r3
	rslt = null_ptr_check(dev);
 8080190:	f7ff ffa9 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080194:	4604      	mov	r4, r0
 8080196:	b9a8      	cbnz	r0, 80801c4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 8080198:	78ab      	ldrb	r3, [r5, #2]
 808019a:	b93b      	cbnz	r3, 80801ac <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
 808019c:	4629      	mov	r1, r5
 808019e:	4630      	mov	r0, r6
 80801a0:	f7ff ffaf 	bl	8080102 <set_mem_page>
			if (rslt == BME680_OK)
 80801a4:	4604      	mov	r4, r0
 80801a6:	b908      	cbnz	r0, 80801ac <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801a8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801ac:	464b      	mov	r3, r9
 80801ae:	4642      	mov	r2, r8
 80801b0:	4631      	mov	r1, r6
 80801b2:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801b4:	7868      	ldrb	r0, [r5, #1]
 80801b6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801b8:	2800      	cmp	r0, #0
			rslt = BME680_E_COM_FAIL;
 80801ba:	bf18      	it	ne
 80801bc:	f06f 0401 	mvnne.w	r4, #1
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801c0:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}
 80801c4:	4620      	mov	r0, r4
 80801c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801ca <bme680_set_regs>:
{
 80801ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80801ce:	461c      	mov	r4, r3
 80801d0:	460f      	mov	r7, r1
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801d2:	2100      	movs	r1, #0
{
 80801d4:	b08a      	sub	sp, #40	; 0x28
 80801d6:	4606      	mov	r6, r0
 80801d8:	4690      	mov	r8, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801da:	a801      	add	r0, sp, #4
 80801dc:	2224      	movs	r2, #36	; 0x24
 80801de:	9100      	str	r1, [sp, #0]
 80801e0:	f00b feaa 	bl	808bf38 <memset>
	rslt = null_ptr_check(dev);
 80801e4:	4620      	mov	r0, r4
 80801e6:	f7ff ff7e 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801ea:	b9e8      	cbnz	r0, 8080228 <bme680_set_regs+0x5e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80801f0:	2b12      	cmp	r3, #18
 80801f2:	d833      	bhi.n	808025c <bme680_set_regs+0x92>
 80801f4:	46ea      	mov	sl, sp
 80801f6:	4681      	mov	r9, r0
			for (index = 0; index < len; index++) {
 80801f8:	fa1f f888 	uxth.w	r8, r8
 80801fc:	fa1f f389 	uxth.w	r3, r9
 8080200:	4543      	cmp	r3, r8
 8080202:	d314      	bcc.n	808022e <bme680_set_regs+0x64>
			if (rslt == BME680_OK) {
 8080204:	b980      	cbnz	r0, 8080228 <bme680_set_regs+0x5e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080206:	ea4f 0248 	mov.w	r2, r8, lsl #1
 808020a:	3a01      	subs	r2, #1
 808020c:	b293      	uxth	r3, r2
 808020e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8080210:	f89d 1000 	ldrb.w	r1, [sp]
 8080214:	7860      	ldrb	r0, [r4, #1]
 8080216:	f10d 0201 	add.w	r2, sp, #1
 808021a:	47a8      	blx	r5
					rslt = BME680_E_COM_FAIL;
 808021c:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808021e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
 8080222:	bf18      	it	ne
 8080224:	f06f 0001 	mvnne.w	r0, #1
}
 8080228:	b00a      	add	sp, #40	; 0x28
 808022a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dev->intf == BME680_SPI_INTF) {
 808022e:	78a3      	ldrb	r3, [r4, #2]
 8080230:	f816 5009 	ldrb.w	r5, [r6, r9]
 8080234:	b93b      	cbnz	r3, 8080246 <bme680_set_regs+0x7c>
					rslt = set_mem_page(reg_addr[index], dev);
 8080236:	4628      	mov	r0, r5
 8080238:	4621      	mov	r1, r4
 808023a:	f7ff ff62 	bl	8080102 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 808023e:	f816 5009 	ldrb.w	r5, [r6, r9]
 8080242:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080246:	f817 3009 	ldrb.w	r3, [r7, r9]
					tmp_buff[(2 * index)] = reg_addr[index];
 808024a:	f88a 5000 	strb.w	r5, [sl]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 808024e:	f88a 3001 	strb.w	r3, [sl, #1]
			for (index = 0; index < len; index++) {
 8080252:	f109 0901 	add.w	r9, r9, #1
 8080256:	f10a 0a02 	add.w	sl, sl, #2
 808025a:	e7cf      	b.n	80801fc <bme680_set_regs+0x32>
			rslt = BME680_E_INVALID_LENGTH;
 808025c:	f06f 0003 	mvn.w	r0, #3
 8080260:	e7e2      	b.n	8080228 <bme680_set_regs+0x5e>

08080262 <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080262:	2374      	movs	r3, #116	; 0x74
{
 8080264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080266:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080268:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 808026c:	f7ff ff3b 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080270:	bba0      	cbnz	r0, 80802dc <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
 8080272:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8080274:	4623      	mov	r3, r4
 8080276:	2201      	movs	r2, #1
 8080278:	2074      	movs	r0, #116	; 0x74
 808027a:	f10d 0106 	add.w	r1, sp, #6
 808027e:	f7ff ff80 	bl	8080182 <bme680_get_regs>
			if (rslt == BME680_OK) {
 8080282:	b9a0      	cbnz	r0, 80802ae <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8080284:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
 8080288:	f013 0503 	ands.w	r5, r3, #3
 808028c:	d011      	beq.n	80802b2 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 808028e:	f023 0303 	bic.w	r3, r3, #3
 8080292:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8080296:	2201      	movs	r2, #1
 8080298:	4623      	mov	r3, r4
 808029a:	f10d 0106 	add.w	r1, sp, #6
 808029e:	f10d 0007 	add.w	r0, sp, #7
 80802a2:	f7ff ff92 	bl	80801ca <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80802a6:	200a      	movs	r0, #10
 80802a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80802aa:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
 80802ac:	e7e2      	b.n	8080274 <bme680_set_sensor_mode+0x12>
 80802ae:	2d00      	cmp	r5, #0
 80802b0:	d1e0      	bne.n	8080274 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80802b2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80802b6:	b18a      	cbz	r2, 80802dc <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80802b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80802bc:	f002 0203 	and.w	r2, r2, #3
 80802c0:	f023 0303 	bic.w	r3, r3, #3
 80802c4:	4313      	orrs	r3, r2
 80802c6:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80802ca:	b938      	cbnz	r0, 80802dc <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80802cc:	4623      	mov	r3, r4
 80802ce:	2201      	movs	r2, #1
 80802d0:	f10d 0106 	add.w	r1, sp, #6
 80802d4:	f10d 0007 	add.w	r0, sp, #7
 80802d8:	f7ff ff77 	bl	80801ca <bme680_set_regs>
}
 80802dc:	b003      	add	sp, #12
 80802de:	bd30      	pop	{r4, r5, pc}

080802e0 <bme680_set_sensor_settings>:
	uint8_t data = 0;
 80802e0:	2300      	movs	r3, #0
{
 80802e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80802e4:	4606      	mov	r6, r0
 80802e6:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 80802e8:	4608      	mov	r0, r1
{
 80802ea:	460c      	mov	r4, r1
	uint8_t data = 0;
 80802ec:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802f0:	9304      	str	r3, [sp, #16]
 80802f2:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802f6:	9306      	str	r3, [sp, #24]
 80802f8:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
 80802fc:	f7ff fef3 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080300:	2800      	cmp	r0, #0
 8080302:	f040 80fe 	bne.w	8080502 <bme680_set_sensor_settings+0x222>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080306:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 808030a:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
 808030e:	d105      	bne.n	808031c <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
 8080310:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
			rslt = bme680_set_sensor_mode(dev);
 8080314:	4620      	mov	r0, r4
 8080316:	f7ff ffa4 	bl	8080262 <bme680_set_sensor_mode>
 808031a:	e007      	b.n	808032c <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
 808031c:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
 808031e:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
 8080322:	f000 80f0 	beq.w	8080506 <bme680_set_sensor_settings+0x226>
		dev->power_mode = BME680_SLEEP_MODE;
 8080326:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
 808032a:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
 808032c:	f016 0510 	ands.w	r5, r6, #16
 8080330:	d020      	beq.n	8080374 <bme680_set_sensor_settings+0x94>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8080332:	2107      	movs	r1, #7
 8080334:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080338:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 808033c:	f7ff ff15 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080340:	b930      	cbnz	r0, 8080350 <bme680_set_sensor_settings+0x70>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080342:	4623      	mov	r3, r4
 8080344:	2201      	movs	r2, #1
 8080346:	2075      	movs	r0, #117	; 0x75
 8080348:	f10d 0107 	add.w	r1, sp, #7
 808034c:	f7ff ff19 	bl	8080182 <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080350:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8080354:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8080358:	009b      	lsls	r3, r3, #2
 808035a:	f022 021c 	bic.w	r2, r2, #28
 808035e:	f003 031c 	and.w	r3, r3, #28
 8080362:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8080364:	2275      	movs	r2, #117	; 0x75
			count++;
 8080366:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080368:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808036c:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080370:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080374:	06b3      	lsls	r3, r6, #26
 8080376:	d522      	bpl.n	80803be <bme680_set_sensor_settings+0xde>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8080378:	2108      	movs	r1, #8
 808037a:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808037e:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080382:	f7ff fef2 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080386:	b930      	cbnz	r0, 8080396 <bme680_set_sensor_settings+0xb6>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080388:	4623      	mov	r3, r4
 808038a:	2201      	movs	r2, #1
 808038c:	2070      	movs	r0, #112	; 0x70
 808038e:	f10d 0107 	add.w	r1, sp, #7
 8080392:	f7ff fef6 	bl	8080182 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 8080396:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080398:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808039c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80803a0:	f023 0308 	bic.w	r3, r3, #8
 80803a4:	f002 0208 	and.w	r2, r2, #8
 80803a8:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 80803aa:	aa08      	add	r2, sp, #32
 80803ac:	442a      	add	r2, r5
			count++;
 80803ae:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80803b0:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80803b4:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80803b8:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80803bc:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80803be:	07b1      	lsls	r1, r6, #30
 80803c0:	d033      	beq.n	808042a <bme680_set_sensor_settings+0x14a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80803c2:	2105      	movs	r1, #5
 80803c4:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80803c8:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80803cc:	f7ff fecd 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 80803d0:	b930      	cbnz	r0, 80803e0 <bme680_set_sensor_settings+0x100>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80803d2:	4623      	mov	r3, r4
 80803d4:	2201      	movs	r2, #1
 80803d6:	2074      	movs	r0, #116	; 0x74
 80803d8:	f10d 0107 	add.w	r1, sp, #7
 80803dc:	f7ff fed1 	bl	8080182 <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
 80803e0:	07f2      	lsls	r2, r6, #31
 80803e2:	d509      	bpl.n	80803f8 <bme680_set_sensor_settings+0x118>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80803e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80803e8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80803ec:	f003 031f 	and.w	r3, r3, #31
 80803f0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80803f4:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
 80803f8:	07b3      	lsls	r3, r6, #30
 80803fa:	d50b      	bpl.n	8080414 <bme680_set_sensor_settings+0x134>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80803fc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8080400:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8080404:	009b      	lsls	r3, r3, #2
 8080406:	f003 031c 	and.w	r3, r3, #28
 808040a:	f022 021c 	bic.w	r2, r2, #28
 808040e:	4313      	orrs	r3, r2
 8080410:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
 8080414:	2274      	movs	r2, #116	; 0x74
 8080416:	ab08      	add	r3, sp, #32
 8080418:	442b      	add	r3, r5
 808041a:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 808041e:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080422:	3501      	adds	r5, #1
			data_array[count] = data;
 8080424:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080428:	b2ed      	uxtb	r5, r5
		if (desired_settings & BME680_OSH_SEL) {
 808042a:	0771      	lsls	r1, r6, #29
 808042c:	d522      	bpl.n	8080474 <bme680_set_sensor_settings+0x194>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 808042e:	2105      	movs	r1, #5
 8080430:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080434:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8080438:	f7ff fe97 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 808043c:	b930      	cbnz	r0, 808044c <bme680_set_sensor_settings+0x16c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808043e:	4623      	mov	r3, r4
 8080440:	2201      	movs	r2, #1
 8080442:	2072      	movs	r0, #114	; 0x72
 8080444:	f10d 0107 	add.w	r1, sp, #7
 8080448:	f7ff fe9b 	bl	8080182 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 808044c:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 808044e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080452:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8080456:	f023 0307 	bic.w	r3, r3, #7
 808045a:	f002 0207 	and.w	r2, r2, #7
 808045e:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8080460:	aa08      	add	r2, sp, #32
 8080462:	442a      	add	r2, r5
			count++;
 8080464:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080466:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808046a:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808046e:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080472:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080474:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8080478:	d03a      	beq.n	80804f0 <bme680_set_sensor_settings+0x210>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 808047a:	2101      	movs	r1, #1
 808047c:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080480:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080484:	f7ff fe71 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK) {
 8080488:	b960      	cbnz	r0, 80804a4 <bme680_set_sensor_settings+0x1c4>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808048a:	210a      	movs	r1, #10
 808048c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080490:	f7ff fe6b 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080494:	b930      	cbnz	r0, 80804a4 <bme680_set_sensor_settings+0x1c4>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080496:	4623      	mov	r3, r4
 8080498:	2201      	movs	r2, #1
 808049a:	2071      	movs	r0, #113	; 0x71
 808049c:	f10d 0107 	add.w	r1, sp, #7
 80804a0:	f7ff fe6f 	bl	8080182 <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
 80804a4:	0672      	lsls	r2, r6, #25
 80804a6:	d50b      	bpl.n	80804c0 <bme680_set_sensor_settings+0x1e0>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80804a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80804ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80804b0:	011b      	lsls	r3, r3, #4
 80804b2:	f003 0310 	and.w	r3, r3, #16
 80804b6:	f022 0210 	bic.w	r2, r2, #16
 80804ba:	4313      	orrs	r3, r2
 80804bc:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
 80804c0:	0633      	lsls	r3, r6, #24
 80804c2:	d50a      	bpl.n	80804da <bme680_set_sensor_settings+0x1fa>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80804c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80804c8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80804cc:	f023 030f 	bic.w	r3, r3, #15
 80804d0:	f002 020f 	and.w	r2, r2, #15
 80804d4:	4313      	orrs	r3, r2
 80804d6:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80804da:	2271      	movs	r2, #113	; 0x71
 80804dc:	ab08      	add	r3, sp, #32
 80804de:	442b      	add	r3, r5
 80804e0:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80804e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80804e8:	3501      	adds	r5, #1
			data_array[count] = data;
 80804ea:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80804ee:	b2ed      	uxtb	r5, r5
		if (rslt == BME680_OK)
 80804f0:	b928      	cbnz	r0, 80804fe <bme680_set_sensor_settings+0x21e>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80804f2:	4623      	mov	r3, r4
 80804f4:	462a      	mov	r2, r5
 80804f6:	a906      	add	r1, sp, #24
 80804f8:	a804      	add	r0, sp, #16
 80804fa:	f7ff fe66 	bl	80801ca <bme680_set_regs>
		dev->power_mode = intended_power_mode;
 80804fe:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 8080502:	b009      	add	sp, #36	; 0x24
 8080504:	bdf0      	pop	{r4, r5, r6, r7, pc}
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080506:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 808050a:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 808050e:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8080512:	bf28      	it	cs
 8080514:	f44f 72c8 	movcs.w	r2, #400	; 0x190
 8080518:	2ac8      	cmp	r2, #200	; 0xc8
 808051a:	bf38      	it	cc
 808051c:	22c8      	movcc	r2, #200	; 0xc8
 808051e:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8080522:	f203 1399 	addw	r3, r3, #409	; 0x199
 8080526:	435a      	muls	r2, r3
 8080528:	2314      	movs	r3, #20
 808052a:	fbb2 f2f3 	udiv	r2, r2, r3
 808052e:	230a      	movs	r3, #10
 8080530:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
 8080534:	fbb2 f2f3 	udiv	r2, r2, r3
 8080538:	f991 3011 	ldrsb.w	r3, [r1, #17]
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 808053c:	f991 1004 	ldrsb.w	r1, [r1, #4]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080540:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8080544:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8080546:	f994 3014 	ldrsb.w	r3, [r4, #20]
 808054a:	434b      	muls	r3, r1
 808054c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8080550:	fb93 f3f1 	sdiv	r3, r3, r1
 8080554:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
 8080556:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 808055a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 808055e:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8080562:	3204      	adds	r2, #4
 8080564:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 8080568:	2283      	movs	r2, #131	; 0x83
 808056a:	434a      	muls	r2, r1
 808056c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8080570:	fbb3 f3f2 	udiv	r3, r3, r2
 8080574:	2222      	movs	r2, #34	; 0x22
 8080576:	3bfa      	subs	r3, #250	; 0xfa
 8080578:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 808057a:	2264      	movs	r2, #100	; 0x64
 808057c:	3332      	adds	r3, #50	; 0x32
 808057e:	fb93 f3f2 	sdiv	r3, r3, r2
 8080582:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8080586:	f246 435a 	movw	r3, #25690	; 0x645a
 808058a:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 808058e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	if (dur >= 0xfc0) {
 8080592:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8080596:	d21a      	bcs.n	80805ce <bme680_set_sensor_settings+0x2ee>
		while (dur > 0x3F) {
 8080598:	2b3f      	cmp	r3, #63	; 0x3f
 808059a:	b2c2      	uxtb	r2, r0
 808059c:	f100 0001 	add.w	r0, r0, #1
 80805a0:	d813      	bhi.n	80805ca <bme680_set_sensor_settings+0x2ea>
		durval = (uint8_t) (dur + (factor * 64));
 80805a2:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80805a6:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
 80805a8:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805aa:	f88d 300d 	strb.w	r3, [sp, #13]
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805ae:	2202      	movs	r2, #2
 80805b0:	4623      	mov	r3, r4
			dev->gas_sett.nb_conv = 0;
 80805b2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805b6:	a903      	add	r1, sp, #12
 80805b8:	a802      	add	r0, sp, #8
 80805ba:	f7ff fe06 	bl	80801ca <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
 80805be:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80805c2:	2800      	cmp	r0, #0
 80805c4:	f47f aeb2 	bne.w	808032c <bme680_set_sensor_settings+0x4c>
 80805c8:	e6a4      	b.n	8080314 <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
 80805ca:	089b      	lsrs	r3, r3, #2
			factor += 1;
 80805cc:	e7e4      	b.n	8080598 <bme680_set_sensor_settings+0x2b8>
		durval = 0xff; /* Max duration*/
 80805ce:	23ff      	movs	r3, #255	; 0xff
 80805d0:	e7ea      	b.n	80805a8 <bme680_set_sensor_settings+0x2c8>
	...

080805d4 <bme680_get_profile_dur>:
{
 80805d4:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805d6:	4b18      	ldr	r3, [pc, #96]	; (8080638 <bme680_get_profile_dur+0x64>)
{
 80805d8:	4602      	mov	r2, r0
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805da:	6818      	ldr	r0, [r3, #0]
 80805dc:	889b      	ldrh	r3, [r3, #4]
 80805de:	9000      	str	r0, [sp, #0]
 80805e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805e4:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 80805e8:	a802      	add	r0, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805ea:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805ee:	4403      	add	r3, r0
 80805f0:	f813 0c08 	ldrb.w	r0, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805f4:	ab02      	add	r3, sp, #8
 80805f6:	441c      	add	r4, r3
 80805f8:	f814 3c08 	ldrb.w	r3, [r4, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80805fc:	ac02      	add	r4, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805fe:	4418      	add	r0, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8080600:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8080604:	4423      	add	r3, r4
 8080606:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 808060a:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 808060e:	4403      	add	r3, r0
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080610:	f241 20b9 	movw	r0, #4793	; 0x12b9
 8080614:	fb04 0303 	mla	r3, r4, r3, r0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808061c:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8080620:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
 8080622:	b29b      	uxth	r3, r3
 8080624:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
 8080626:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 808062a:	b118      	cbz	r0, 8080634 <bme680_get_profile_dur+0x60>
		*duration += dev->gas_sett.heatr_dur;
 808062c:	f8b1 1042 	ldrh.w	r1, [r1, #66]	; 0x42
 8080630:	440b      	add	r3, r1
 8080632:	8013      	strh	r3, [r2, #0]
}
 8080634:	b002      	add	sp, #8
 8080636:	bd10      	pop	{r4, pc}
 8080638:	0808dd94 	.word	0x0808dd94

0808063c <bme680_get_sensor_data>:
{
 808063c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080640:	4680      	mov	r8, r0
 8080642:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 8080644:	4608      	mov	r0, r1
{
 8080646:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8080648:	f7ff fd4d 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808064c:	4605      	mov	r5, r0
 808064e:	2800      	cmp	r0, #0
 8080650:	f040 8158 	bne.w	8080904 <bme680_get_sensor_data+0x2c8>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080654:	9006      	str	r0, [sp, #24]
 8080656:	e9cd 0004 	strd	r0, r0, [sp, #16]
 808065a:	f8cd 001b 	str.w	r0, [sp, #27]
	rslt = null_ptr_check(dev);
 808065e:	4608      	mov	r0, r1
 8080660:	f7ff fd41 	bl	80800e6 <null_ptr_check>
 8080664:	270a      	movs	r7, #10
 8080666:	4605      	mov	r5, r0
		if (rslt == BME680_OK) {
 8080668:	2d00      	cmp	r5, #0
 808066a:	f040 8152 	bne.w	8080912 <bme680_get_sensor_data+0x2d6>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 808066e:	4623      	mov	r3, r4
 8080670:	220f      	movs	r2, #15
 8080672:	a904      	add	r1, sp, #16
 8080674:	201d      	movs	r0, #29
 8080676:	f7ff fd84 	bl	8080182 <bme680_get_regs>
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808067a:	f89d b010 	ldrb.w	fp, [sp, #16]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808067e:	f99d a01e 	ldrsb.w	sl, [sp, #30]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080682:	f89d 2018 	ldrb.w	r2, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8080686:	f00b 030f 	and.w	r3, fp, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808068a:	f00a 0120 	and.w	r1, sl, #32
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808068e:	f02b 0b7f 	bic.w	fp, fp, #127	; 0x7f
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080692:	9201      	str	r2, [sp, #4]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8080694:	ea4b 0101 	orr.w	r1, fp, r1
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080698:	f89d 2019 	ldrb.w	r2, [sp, #25]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 808069c:	f00a 0a10 	and.w	sl, sl, #16
 80806a0:	ea41 010a 	orr.w	r1, r1, sl
 80806a4:	b249      	sxtb	r1, r1
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80806a6:	f888 3001 	strb.w	r3, [r8, #1]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80806aa:	9202      	str	r2, [sp, #8]
			data->meas_index = buff[1];
 80806ac:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80806b0:	f89d 201d 	ldrb.w	r2, [sp, #29]
			if (data->status & BME680_NEW_DATA_MSK) {
 80806b4:	2900      	cmp	r1, #0
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80806b6:	4605      	mov	r5, r0
			data->meas_index = buff[1];
 80806b8:	f888 3002 	strb.w	r3, [r8, #2]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80806bc:	9203      	str	r2, [sp, #12]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80806be:	f89d 9012 	ldrb.w	r9, [sp, #18]
 80806c2:	f89d e013 	ldrb.w	lr, [sp, #19]
				| ((uint32_t) buff[4] / 16));
 80806c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80806ca:	f89d c015 	ldrb.w	ip, [sp, #21]
 80806ce:	f89d 6016 	ldrb.w	r6, [sp, #22]
				| ((uint32_t) buff[7] / 16));
 80806d2:	f89d 0017 	ldrb.w	r0, [sp, #23]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80806d6:	f89d 201e 	ldrb.w	r2, [sp, #30]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806da:	f888 1000 	strb.w	r1, [r8]
			if (data->status & BME680_NEW_DATA_MSK) {
 80806de:	f280 8115 	bge.w	808090c <bme680_get_sensor_data+0x2d0>
				| ((uint32_t) buff[7] / 16));
 80806e2:	0900      	lsrs	r0, r0, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80806e4:	ea40 1606 	orr.w	r6, r0, r6, lsl #4
 80806e8:	ea46 3c0c 	orr.w	ip, r6, ip, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806ec:	8ae6      	ldrh	r6, [r4, #22]
				| ((uint32_t) buff[4] / 16));
 80806ee:	091b      	lsrs	r3, r3, #4
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806f0:	0076      	lsls	r6, r6, #1
 80806f2:	ebc6 0cdc 	rsb	ip, r6, ip, lsr #3
 80806f6:	4660      	mov	r0, ip
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80806f8:	ea4f 065c 	mov.w	r6, ip, lsr #1
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806fc:	17c1      	asrs	r1, r0, #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80806fe:	ea46 76c1 	orr.w	r6, r6, r1, lsl #31
 8080702:	1049      	asrs	r1, r1, #1
 8080704:	4371      	muls	r1, r6
 8080706:	fba6 ab06 	umull	sl, fp, r6, r6
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808070a:	f994 001a 	ldrsb.w	r0, [r4, #26]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 808070e:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
 8080712:	ea4f 361a 	mov.w	r6, sl, lsr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080716:	0101      	lsls	r1, r0, #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080718:	ea46 560b 	orr.w	r6, r6, fp, lsl #20
 808071c:	ea4f 372b 	mov.w	r7, fp, asr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080720:	ea4f 7be1 	mov.w	fp, r1, asr #31
 8080724:	fb06 f00b 	mul.w	r0, r6, fp
 8080728:	fba6 ab01 	umull	sl, fp, r6, r1
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808072c:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080730:	fb01 0707 	mla	r7, r1, r7, r0
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080734:	fb86 010c 	smull	r0, r1, r6, ip
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080738:	44bb      	add	fp, r7
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808073a:	0ac6      	lsrs	r6, r0, #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808073c:	ea4f 309a 	mov.w	r0, sl, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080740:	ea46 5641 	orr.w	r6, r6, r1, lsl #21
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080744:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080748:	1831      	adds	r1, r6, r0
 808074a:	6321      	str	r1, [r4, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 808074c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8080750:	3180      	adds	r1, #128	; 0x80
 8080752:	1209      	asrs	r1, r1, #8
 8080754:	f8a8 1004 	strh.w	r1, [r8, #4]
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080758:	6b21      	ldr	r1, [r4, #48]	; 0x30
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 808075a:	ea43 1e0e 	orr.w	lr, r3, lr, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808075e:	1049      	asrs	r1, r1, #1
 8080760:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8080764:	f640 4335 	movw	r3, #3125	; 0xc35
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080768:	1088      	asrs	r0, r1, #2
 808076a:	4340      	muls	r0, r0
		(int32_t)dev->calib.par_p6) >> 2;
 808076c:	f994 7026 	ldrsb.w	r7, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080770:	12c6      	asrs	r6, r0, #11
 8080772:	4377      	muls	r7, r6
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8080774:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080778:	1340      	asrs	r0, r0, #13
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 808077a:	434e      	muls	r6, r1
 808077c:	0076      	lsls	r6, r6, #1
 808077e:	eb06 06a7 	add.w	r6, r6, r7, asr #2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080782:	f9b4 701e 	ldrsh.w	r7, [r4, #30]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080786:	ea4e 3909 	orr.w	r9, lr, r9, lsl #12
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 808078a:	434f      	muls	r7, r1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 808078c:	f994 1020 	ldrsb.w	r1, [r4, #32]
	pressure_comp = 1048576 - pres_adc;
 8080790:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8080794:	0149      	lsls	r1, r1, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080796:	4341      	muls	r1, r0
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8080798:	10c9      	asrs	r1, r1, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808079a:	eb01 0167 	add.w	r1, r1, r7, asr #1
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 808079e:	8ba0      	ldrh	r0, [r4, #28]
	var1 = var1 >> 18;
 80807a0:	1489      	asrs	r1, r1, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80807a2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80807a6:	4348      	muls	r0, r1
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80807a8:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
		((int64_t) lookupTable1[gas_range])) >> 16;
 80807ac:	f002 0c0f 	and.w	ip, r2, #15
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80807b0:	0409      	lsls	r1, r1, #16
 80807b2:	eb01 06a6 	add.w	r6, r1, r6, asr #2
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80807b6:	eba9 3626 	sub.w	r6, r9, r6, asr #12
 80807ba:	4373      	muls	r3, r6
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80807bc:	13c1      	asrs	r1, r0, #15
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80807be:	fbb3 f1f1 	udiv	r1, r3, r1
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80807c2:	f341 009c 	sbfx	r0, r1, #2, #29
 80807c6:	4340      	muls	r0, r0
 80807c8:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
		(pressure_comp >> 3)) >> 13)) >> 12;
 80807cc:	1340      	asrs	r0, r0, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80807ce:	4358      	muls	r0, r3
		(int32_t)dev->calib.par_p8) >> 13;
 80807d0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 80807d4:	f341 075d 	sbfx	r7, r1, #1, #30
 80807d8:	437b      	muls	r3, r7
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80807da:	f341 16d7 	sbfx	r6, r1, #7, #24
	var2 = ((int32_t)(pressure_comp >> 2) *
 80807de:	135b      	asrs	r3, r3, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80807e0:	eb03 3320 	add.w	r3, r3, r0, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80807e4:	fb06 f006 	mul.w	r0, r6, r6
 80807e8:	4346      	muls	r6, r0
		(int32_t)dev->calib.par_p10) >> 17;
 80807ea:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80807ee:	0992      	lsrs	r2, r2, #6
		(int32_t)(pressure_comp >> 8) *
 80807f0:	4346      	muls	r6, r0
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80807f2:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80807f6:	eb03 4366 	add.w	r3, r3, r6, asr #17
 80807fa:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80807fe:	2064      	movs	r0, #100	; 0x64
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080800:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8080802:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				data->pressure = calc_pressure(adc_pres, dev);
 8080806:	f8c8 3008 	str.w	r3, [r8, #8]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 808080a:	6b23      	ldr	r3, [r4, #48]	; 0x30
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 808080c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080810:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080814:	3380      	adds	r3, #128	; 0x80
 8080816:	121b      	asrs	r3, r3, #8
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080818:	4359      	muls	r1, r3
 808081a:	fb91 f1f0 	sdiv	r1, r1, r0
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 808081e:	f994 600d 	ldrsb.w	r6, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080822:	4359      	muls	r1, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080824:	435e      	muls	r6, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080826:	1189      	asrs	r1, r1, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080828:	fb96 f6f0 	sdiv	r6, r6, r0
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 808082c:	fb91 f1f0 	sdiv	r1, r1, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080830:	4431      	add	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 8080832:	8966      	ldrh	r6, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8080834:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080838:	4371      	muls	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 808083a:	128e      	asrs	r6, r1, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 808083c:	e9dd 7101 	ldrd	r7, r1, [sp, #4]
 8080840:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8080844:	8927      	ldrh	r7, [r4, #8]
 8080846:	eba1 1107 	sub.w	r1, r1, r7, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 808084a:	f994 700c 	ldrsb.w	r7, [r4, #12]
 808084e:	435f      	muls	r7, r3
 8080850:	fb97 f7f0 	sdiv	r7, r7, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080854:	eba1 0167 	sub.w	r1, r1, r7, asr #1
	var3 = var1 * var2;
 8080858:	4371      	muls	r1, r6
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808085a:	f994 6010 	ldrsb.w	r6, [r4, #16]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 808085e:	2700      	movs	r7, #0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080860:	4373      	muls	r3, r6
 8080862:	fb93 f3f0 	sdiv	r3, r3, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8080866:	7be0      	ldrb	r0, [r4, #15]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080868:	f240 563c 	movw	r6, #1340	; 0x53c
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808086c:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080870:	1388      	asrs	r0, r1, #14
 8080872:	4340      	muls	r0, r0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080874:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080876:	1280      	asrs	r0, r0, #10
	var6 = (var4 * var5) >> 1;
 8080878:	4343      	muls	r3, r0
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 808087a:	eb01 0363 	add.w	r3, r1, r3, asr #1
 808087e:	1299      	asrs	r1, r3, #10
 8080880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080884:	434b      	muls	r3, r1
				data->humidity = calc_humidity(adc_hum, dev);
 8080886:	492b      	ldr	r1, [pc, #172]	; (8080934 <bme680_get_sensor_data+0x2f8>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080888:	131b      	asrs	r3, r3, #12
 808088a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
 808088e:	428b      	cmp	r3, r1
 8080890:	bfd4      	ite	le
 8080892:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080896:	f8c8 100c 	strgt.w	r1, [r8, #12]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 808089a:	2105      	movs	r1, #5
 808089c:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 80808a0:	fbc3 6701 	smlal	r6, r7, r3, r1
		((int64_t) lookupTable1[gas_range])) >> 16;
 80808a4:	4b24      	ldr	r3, [pc, #144]	; (8080938 <bme680_get_sensor_data+0x2fc>)
 80808a6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80808aa:	fba6 0103 	umull	r0, r1, r6, r3
 80808ae:	fb03 1107 	mla	r1, r3, r7, r1
 80808b2:	0c06      	lsrs	r6, r0, #16
 80808b4:	ea4f 4e21 	mov.w	lr, r1, asr #16
 80808b8:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808bc:	2100      	movs	r1, #0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808be:	9b03      	ldr	r3, [sp, #12]
 80808c0:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808c4:	03d3      	lsls	r3, r2, #15
 80808c6:	f113 437f 	adds.w	r3, r3, #4278190080	; 0xff000000
 80808ca:	f141 31ff 	adc.w	r1, r1, #4294967295
 80808ce:	199a      	adds	r2, r3, r6
 80808d0:	eb41 030e 	adc.w	r3, r1, lr
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80808d4:	4919      	ldr	r1, [pc, #100]	; (808093c <bme680_get_sensor_data+0x300>)
 80808d6:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80808da:	fba1 6706 	umull	r6, r7, r1, r6
 80808de:	fb01 770e 	mla	r7, r1, lr, r7
 80808e2:	0a70      	lsrs	r0, r6, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 80808e4:	0856      	lsrs	r6, r2, #1
 80808e6:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80808ea:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 80808ee:	ea4f 2c67 	mov.w	ip, r7, asr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 80808f2:	1059      	asrs	r1, r3, #1
 80808f4:	1980      	adds	r0, r0, r6
 80808f6:	eb4c 0101 	adc.w	r1, ip, r1
 80808fa:	f00b f9f5 	bl	808bce8 <__aeabi_ldivmod>
 80808fe:	f8c8 0010 	str.w	r0, [r8, #16]
		if (rslt == BME680_OK) {
 8080902:	b16d      	cbz	r5, 8080920 <bme680_get_sensor_data+0x2e4>
}
 8080904:	4628      	mov	r0, r5
 8080906:	b009      	add	sp, #36	; 0x24
 8080908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 808090c:	200a      	movs	r0, #10
 808090e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080910:	4798      	blx	r3
	} while (tries);
 8080912:	3f01      	subs	r7, #1
 8080914:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8080918:	f47f aea6 	bne.w	8080668 <bme680_get_sensor_data+0x2c>
		rslt = BME680_W_NO_NEW_DATA;
 808091c:	2502      	movs	r5, #2
	return rslt;
 808091e:	e7f1      	b.n	8080904 <bme680_get_sensor_data+0x2c8>
			if (data->status & BME680_NEW_DATA_MSK)
 8080920:	f998 3000 	ldrsb.w	r3, [r8]
 8080924:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080926:	bfb6      	itet	lt
 8080928:	2301      	movlt	r3, #1
				dev->new_fields = 0;
 808092a:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
				dev->new_fields = 1;
 808092e:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
				dev->new_fields = 0;
 8080932:	e7e7      	b.n	8080904 <bme680_get_sensor_data+0x2c8>
 8080934:	000186a0 	.word	0x000186a0
 8080938:	20000000 	.word	0x20000000
 808093c:	20000040 	.word	0x20000040

08080940 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8080940:	4770      	bx	lr

08080942 <_ZN4File9availableEv>:
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080942:	4602      	mov	r2, r0
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080944:	7c03      	ldrb	r3, [r0, #16]
 8080946:	f013 0008 	ands.w	r0, r3, #8
 808094a:	bf1e      	ittt	ne
 808094c:	6a50      	ldrne	r0, [r2, #36]	; 0x24
 808094e:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
 8080950:	1a18      	subne	r0, r3, r0
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080952:	2800      	cmp	r0, #0
  }
 8080954:	bfb8      	it	lt
 8080956:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
 808095a:	4770      	bx	lr

0808095c <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 808095c:	4770      	bx	lr

0808095e <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
 808095e:	4770      	bx	lr

08080960 <_ZN6SdFileD0Ev>:
 8080960:	b510      	push	{r4, lr}
 8080962:	4604      	mov	r4, r0
 8080964:	212c      	movs	r1, #44	; 0x2c
 8080966:	f00a f9b4 	bl	808acd2 <_ZdlPvj>
 808096a:	4620      	mov	r0, r4
 808096c:	bd10      	pop	{r4, pc}

0808096e <_ZN4FileD0Ev>:
 808096e:	b510      	push	{r4, lr}
 8080970:	4604      	mov	r4, r0
 8080972:	2134      	movs	r1, #52	; 0x34
 8080974:	f00a f9ad 	bl	808acd2 <_ZdlPvj>
 8080978:	4620      	mov	r0, r4
 808097a:	bd10      	pop	{r4, pc}

0808097c <_ZN9PrintFile5writeEPKhj>:
    return FatFile::write(buf, size);
 808097c:	3008      	adds	r0, #8
 808097e:	f006 bf13 	b.w	80877a8 <_ZN7FatFile5writeEPKvj>

08080982 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080982:	3010      	adds	r0, #16
 8080984:	f006 bf10 	b.w	80877a8 <_ZN7FatFile5writeEPKvj>

08080988 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
 8080988:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 808098a:	2201      	movs	r2, #1
 808098c:	f88d 1007 	strb.w	r1, [sp, #7]
 8080990:	3010      	adds	r0, #16
 8080992:	f10d 0107 	add.w	r1, sp, #7
 8080996:	f006 ff07 	bl	80877a8 <_ZN7FatFile5writeEPKvj>
  }
 808099a:	b003      	add	sp, #12
 808099c:	f85d fb04 	ldr.w	pc, [sp], #4

080809a0 <_ZN4File5flushEv>:
    FatFile::sync();
 80809a0:	3010      	adds	r0, #16
 80809a2:	f006 be77 	b.w	8087694 <_ZN7FatFile4syncEv>

080809a6 <_ZN4File4peekEv>:
    return FatFile::peek();
 80809a6:	3010      	adds	r0, #16
 80809a8:	f006 bda3 	b.w	80874f2 <_ZN7FatFile4peekEv>

080809ac <_ZN4File4readEv>:
  int read() {
 80809ac:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
 80809ae:	2201      	movs	r2, #1
 80809b0:	f10d 0107 	add.w	r1, sp, #7
 80809b4:	3010      	adds	r0, #16
 80809b6:	f006 fced 	bl	8087394 <_ZN7FatFile4readEPvj>
 80809ba:	2801      	cmp	r0, #1
 80809bc:	bf14      	ite	ne
 80809be:	f04f 30ff 	movne.w	r0, #4294967295
 80809c2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  }
 80809c6:	b003      	add	sp, #12
 80809c8:	f85d fb04 	ldr.w	pc, [sp], #4

080809cc <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 80809cc:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809d0:	f006 bb4b 	b.w	808706a <_ZN9SdSpiCard11writeBlocksEmPKhj>

080809d4 <_ZN9SdFatBase10readBlocksEmPhj>:
    return m_sdCard.readBlocks(block, dst, n);
 80809d4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809d8:	f006 ba7f 	b.w	8086eda <_ZN9SdSpiCard10readBlocksEmPhj>

080809dc <_ZN9SdFatBase10writeBlockEmPKh>:
    return m_sdCard.writeBlock(block, src);
 80809dc:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809e0:	f006 babd 	b.w	8086f5e <_ZN9SdSpiCard10writeBlockEmPKh>

080809e4 <_ZN9SdFatBase9readBlockEmPh>:
    return m_sdCard.readBlock(block, dst);
 80809e4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809e8:	f006 ba2f 	b.w	8086e4a <_ZN9SdSpiCard9readBlockEmPh>

080809ec <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80809ec:	b510      	push	{r4, lr}
 80809ee:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80809f0:	6800      	ldr	r0, [r0, #0]
 80809f2:	b108      	cbz	r0, 80809f8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80809f4:	f007 ffd8 	bl	80889a8 <free>
class SystemClass {
 80809f8:	4620      	mov	r0, r4
 80809fa:	bd10      	pop	{r4, pc}

080809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 80809fc:	b510      	push	{r4, lr}
 80809fe:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080a00:	2204      	movs	r2, #4
 8080a02:	f007 fd4d 	bl	80884a0 <HAL_EEPROM_Put>
        return t;
    }
 8080a06:	4620      	mov	r0, r4
 8080a08:	bd10      	pop	{r4, pc}

08080a0a <_Z20remoteReadStoredVars6String>:
    }
}

int remoteReadStoredVars(String mem_address) 
{
    uint16_t tempValue = 0;
 8080a0a:	2300      	movs	r3, #0
{
 8080a0c:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080a0e:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080a12:	f008 fd0d 	bl	8089430 <_ZNK6String5toIntEv>
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 8080a16:	2898      	cmp	r0, #152	; 0x98
    int numerical_mem_address = mem_address.toInt();
 8080a18:	4604      	mov	r4, r0
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 8080a1a:	d80b      	bhi.n	8080a34 <_Z20remoteReadStoredVars6String+0x2a>
    {
        EEPROM.get(numerical_mem_address, tempValue);
 8080a1c:	f00a f8b2 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a20:	4620      	mov	r0, r4
 8080a22:	2202      	movs	r2, #2
 8080a24:	f10d 0106 	add.w	r1, sp, #6
 8080a28:	f007 fd32 	bl	8088490 <HAL_EEPROM_Get>
        return tempValue;
 8080a2c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    }
    else 
    {
        return -1;
    }
}
 8080a30:	b002      	add	sp, #8
 8080a32:	bd10      	pop	{r4, pc}
        return -1;
 8080a34:	f04f 30ff 	mov.w	r0, #4294967295
 8080a38:	e7fa      	b.n	8080a30 <_Z20remoteReadStoredVars6String+0x26>

08080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>:
    template <typename T> T &get( int idx, T &t )
 8080a3a:	b510      	push	{r4, lr}
 8080a3c:	460c      	mov	r4, r1
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a3e:	2204      	movs	r2, #4
 8080a40:	f007 fd26 	bl	8088490 <HAL_EEPROM_Get>
    }
 8080a44:	4620      	mov	r0, r4
 8080a46:	bd10      	pop	{r4, pc}

08080a48 <_ZN9PrintFile5writeEh>:
  size_t write(uint8_t b) {
 8080a48:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
 8080a4a:	2201      	movs	r2, #1
 8080a4c:	f88d 1007 	strb.w	r1, [sp, #7]
 8080a50:	3008      	adds	r0, #8
 8080a52:	f10d 0107 	add.w	r1, sp, #7
 8080a56:	f006 fea7 	bl	80877a8 <_ZN7FatFile5writeEPKvj>
  }
 8080a5a:	b003      	add	sp, #12
 8080a5c:	f85d fb04 	ldr.w	pc, [sp], #4

08080a60 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080a60:	b40e      	push	{r1, r2, r3}
 8080a62:	b503      	push	{r0, r1, lr}
 8080a64:	ab03      	add	r3, sp, #12
 8080a66:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 8080a6a:	2100      	movs	r1, #0
        va_start(args, format);
 8080a6c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 8080a6e:	f008 fe4d 	bl	808970c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8080a72:	b002      	add	sp, #8
 8080a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8080a78:	b003      	add	sp, #12
 8080a7a:	4770      	bx	lr

08080a7c <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080a7c:	2300      	movs	r3, #0
 8080a7e:	6840      	ldr	r0, [r0, #4]
 8080a80:	461a      	mov	r2, r3
 8080a82:	4619      	mov	r1, r3
 8080a84:	f007 bf20 	b.w	80888c8 <network_off>

08080a88 <_ZN11USARTSerialD0Ev>:
 8080a88:	b510      	push	{r4, lr}
 8080a8a:	4604      	mov	r4, r0
 8080a8c:	2114      	movs	r1, #20
 8080a8e:	f00a f920 	bl	808acd2 <_ZdlPvj>
 8080a92:	4620      	mov	r0, r4
 8080a94:	bd10      	pop	{r4, pc}
	...

08080a98 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
 8080a98:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080a9a:	f007 fce9 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080a9e:	4b03      	ldr	r3, [pc, #12]	; (8080aac <_ZN10CloudClass7processEv+0x14>)
 8080aa0:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 8080aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 8080aa6:	f007 bf47 	b.w	8088938 <spark_process>
 8080aaa:	bf00      	nop
 8080aac:	200011c4 	.word	0x200011c4

08080ab0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080ab0:	b40e      	push	{r1, r2, r3}
 8080ab2:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080ab4:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 8080ab6:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8080ab8:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8080aba:	b08d      	sub	sp, #52	; 0x34
 8080abc:	aa0f      	add	r2, sp, #60	; 0x3c
 8080abe:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8080ac2:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080ac6:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8080aca:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080acc:	201e      	movs	r0, #30
 8080ace:	aa04      	add	r2, sp, #16
 8080ad0:	f007 fe6e 	bl	80887b0 <log_message_v>
}
 8080ad4:	b00d      	add	sp, #52	; 0x34
 8080ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080ada:	b003      	add	sp, #12
 8080adc:	4770      	bx	lr
	...

08080ae0 <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static hal_usart_ring_buffer_t serial4_rx_buffer;
static hal_usart_ring_buffer_t serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080ae0:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080ae2:	4c0d      	ldr	r4, [pc, #52]	; (8080b18 <_Z22__fetch_global_Serial4v+0x38>)
 8080ae4:	7823      	ldrb	r3, [r4, #0]
 8080ae6:	f3bf 8f5b 	dmb	ish
 8080aea:	07db      	lsls	r3, r3, #31
 8080aec:	d411      	bmi.n	8080b12 <_Z22__fetch_global_Serial4v+0x32>
 8080aee:	4620      	mov	r0, r4
 8080af0:	f7ff faf1 	bl	80800d6 <__cxa_guard_acquire>
 8080af4:	b168      	cbz	r0, 8080b12 <_Z22__fetch_global_Serial4v+0x32>
 8080af6:	2103      	movs	r1, #3
 8080af8:	4a08      	ldr	r2, [pc, #32]	; (8080b1c <_Z22__fetch_global_Serial4v+0x3c>)
 8080afa:	4b09      	ldr	r3, [pc, #36]	; (8080b20 <_Z22__fetch_global_Serial4v+0x40>)
 8080afc:	4809      	ldr	r0, [pc, #36]	; (8080b24 <_Z22__fetch_global_Serial4v+0x44>)
 8080afe:	f009 fe4f 	bl	808a7a0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080b02:	4620      	mov	r0, r4
 8080b04:	f7ff faec 	bl	80800e0 <__cxa_guard_release>
 8080b08:	4a07      	ldr	r2, [pc, #28]	; (8080b28 <_Z22__fetch_global_Serial4v+0x48>)
 8080b0a:	4908      	ldr	r1, [pc, #32]	; (8080b2c <_Z22__fetch_global_Serial4v+0x4c>)
 8080b0c:	4805      	ldr	r0, [pc, #20]	; (8080b24 <_Z22__fetch_global_Serial4v+0x44>)
 8080b0e:	f00a f8db 	bl	808acc8 <__aeabi_atexit>
	return serial4;
}
 8080b12:	4804      	ldr	r0, [pc, #16]	; (8080b24 <_Z22__fetch_global_Serial4v+0x44>)
 8080b14:	bd10      	pop	{r4, pc}
 8080b16:	bf00      	nop
 8080b18:	20000308 	.word	0x20000308
 8080b1c:	20000310 	.word	0x20000310
 8080b20:	20000394 	.word	0x20000394
 8080b24:	20000524 	.word	0x20000524
 8080b28:	200002b0 	.word	0x200002b0
 8080b2c:	08080941 	.word	0x08080941

08080b30 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080b30:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080b32:	f7ff ffd5 	bl	8080ae0 <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080b36:	4b07      	ldr	r3, [pc, #28]	; (8080b54 <_Z15serialEventRun4v+0x24>)
 8080b38:	4604      	mov	r4, r0
 8080b3a:	b153      	cbz	r3, 8080b52 <_Z15serialEventRun4v+0x22>
 8080b3c:	f009 fe4d 	bl	808a7da <_ZN11USARTSerial9isEnabledEv>
 8080b40:	b138      	cbz	r0, 8080b52 <_Z15serialEventRun4v+0x22>
 8080b42:	6823      	ldr	r3, [r4, #0]
 8080b44:	4620      	mov	r0, r4
 8080b46:	691b      	ldr	r3, [r3, #16]
 8080b48:	4798      	blx	r3
 8080b4a:	2800      	cmp	r0, #0
 8080b4c:	dd01      	ble.n	8080b52 <_Z15serialEventRun4v+0x22>
        handler();
 8080b4e:	f3af 8000 	nop.w
}
 8080b52:	bd10      	pop	{r4, pc}
 8080b54:	00000000 	.word	0x00000000

08080b58 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static hal_usart_ring_buffer_t serial5_rx_buffer;
static hal_usart_ring_buffer_t serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080b58:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080b5a:	4c0d      	ldr	r4, [pc, #52]	; (8080b90 <_Z22__fetch_global_Serial5v+0x38>)
 8080b5c:	7823      	ldrb	r3, [r4, #0]
 8080b5e:	f3bf 8f5b 	dmb	ish
 8080b62:	07db      	lsls	r3, r3, #31
 8080b64:	d411      	bmi.n	8080b8a <_Z22__fetch_global_Serial5v+0x32>
 8080b66:	4620      	mov	r0, r4
 8080b68:	f7ff fab5 	bl	80800d6 <__cxa_guard_acquire>
 8080b6c:	b168      	cbz	r0, 8080b8a <_Z22__fetch_global_Serial5v+0x32>
 8080b6e:	2104      	movs	r1, #4
 8080b70:	4a08      	ldr	r2, [pc, #32]	; (8080b94 <_Z22__fetch_global_Serial5v+0x3c>)
 8080b72:	4b09      	ldr	r3, [pc, #36]	; (8080b98 <_Z22__fetch_global_Serial5v+0x40>)
 8080b74:	4809      	ldr	r0, [pc, #36]	; (8080b9c <_Z22__fetch_global_Serial5v+0x44>)
 8080b76:	f009 fe13 	bl	808a7a0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080b7a:	4620      	mov	r0, r4
 8080b7c:	f7ff fab0 	bl	80800e0 <__cxa_guard_release>
 8080b80:	4a07      	ldr	r2, [pc, #28]	; (8080ba0 <_Z22__fetch_global_Serial5v+0x48>)
 8080b82:	4908      	ldr	r1, [pc, #32]	; (8080ba4 <_Z22__fetch_global_Serial5v+0x4c>)
 8080b84:	4805      	ldr	r0, [pc, #20]	; (8080b9c <_Z22__fetch_global_Serial5v+0x44>)
 8080b86:	f00a f89f 	bl	808acc8 <__aeabi_atexit>
	return serial5;
}
 8080b8a:	4804      	ldr	r0, [pc, #16]	; (8080b9c <_Z22__fetch_global_Serial5v+0x44>)
 8080b8c:	bd10      	pop	{r4, pc}
 8080b8e:	bf00      	nop
 8080b90:	2000030c 	.word	0x2000030c
 8080b94:	20000418 	.word	0x20000418
 8080b98:	2000049c 	.word	0x2000049c
 8080b9c:	20000538 	.word	0x20000538
 8080ba0:	200002b0 	.word	0x200002b0
 8080ba4:	08080941 	.word	0x08080941

08080ba8 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080ba8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080baa:	f7ff ffd5 	bl	8080b58 <_Z22__fetch_global_Serial5v>
    if (handler && serial.isEnabled() && serial.available()>0)
 8080bae:	4b07      	ldr	r3, [pc, #28]	; (8080bcc <_Z15serialEventRun5v+0x24>)
 8080bb0:	4604      	mov	r4, r0
 8080bb2:	b153      	cbz	r3, 8080bca <_Z15serialEventRun5v+0x22>
 8080bb4:	f009 fe11 	bl	808a7da <_ZN11USARTSerial9isEnabledEv>
 8080bb8:	b138      	cbz	r0, 8080bca <_Z15serialEventRun5v+0x22>
 8080bba:	6823      	ldr	r3, [r4, #0]
 8080bbc:	4620      	mov	r0, r4
 8080bbe:	691b      	ldr	r3, [r3, #16]
 8080bc0:	4798      	blx	r3
 8080bc2:	2800      	cmp	r0, #0
 8080bc4:	dd01      	ble.n	8080bca <_Z15serialEventRun5v+0x22>
        handler();
 8080bc6:	f3af 8000 	nop.w
}
 8080bca:	bd10      	pop	{r4, pc}
 8080bcc:	00000000 	.word	0x00000000

08080bd0 <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080bd0:	b538      	push	{r3, r4, r5, lr}
 8080bd2:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080bd4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080bd8:	f006 f8a6 	bl	8086d28 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080bdc:	b908      	cbnz	r0, 8080be2 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x12>
 8080bde:	2000      	movs	r0, #0
  }
 8080be0:	bd38      	pop	{r3, r4, r5, pc}
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080be2:	f504 6588 	add.w	r5, r4, #1088	; 0x440
    vwd()->close();
 8080be6:	4628      	mov	r0, r5
 8080be8:	f006 fd8a 	bl	8087700 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080bec:	2101      	movs	r1, #1
 8080bee:	4620      	mov	r0, r4
 8080bf0:	f006 ffb3 	bl	8087b5a <_ZN9FatVolume4initEh>
 8080bf4:	4601      	mov	r1, r0
 8080bf6:	b168      	cbz	r0, 8080c14 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x44>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080bf8:	4621      	mov	r1, r4
 8080bfa:	4628      	mov	r0, r5
 8080bfc:	f006 fbb1 	bl	8087362 <_ZN7FatFile8openRootEP9FatVolume>
 8080c00:	2800      	cmp	r0, #0
 8080c02:	d0ec      	beq.n	8080bde <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    if (!dir->isDir()) {
 8080c04:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080c08:	f013 0f70 	tst.w	r3, #112	; 0x70
 8080c0c:	d0e7      	beq.n	8080bde <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    m_cwd = dir;
 8080c0e:	4b04      	ldr	r3, [pc, #16]	; (8080c20 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080c10:	601d      	str	r5, [r3, #0]
    return true;
 8080c12:	e7e5      	b.n	8080be0 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x10>
    return (part ? init(part) : init(1) || init(0))
 8080c14:	4620      	mov	r0, r4
 8080c16:	f006 ffa0 	bl	8087b5a <_ZN9FatVolume4initEh>
 8080c1a:	2800      	cmp	r0, #0
 8080c1c:	d1ec      	bne.n	8080bf8 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x28>
 8080c1e:	e7de      	b.n	8080bde <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
 8080c20:	20000cbc 	.word	0x20000cbc

08080c24 <_Z13writeRegisterhh>:
{
 8080c24:	b538      	push	{r3, r4, r5, lr}
 8080c26:	460c      	mov	r4, r1
 8080c28:	4605      	mov	r5, r0
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080c2a:	f00a f825 	bl	808ac78 <_Z20__fetch_global_Wire3v>
 8080c2e:	216b      	movs	r1, #107	; 0x6b
 8080c30:	f009 fe86 	bl	808a940 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080c34:	f00a f820 	bl	808ac78 <_Z20__fetch_global_Wire3v>
 8080c38:	6803      	ldr	r3, [r0, #0]
 8080c3a:	4629      	mov	r1, r5
 8080c3c:	689b      	ldr	r3, [r3, #8]
 8080c3e:	4798      	blx	r3
    Wire3.write(value);
 8080c40:	f00a f81a 	bl	808ac78 <_Z20__fetch_global_Wire3v>
 8080c44:	6803      	ldr	r3, [r0, #0]
 8080c46:	4621      	mov	r1, r4
 8080c48:	689b      	ldr	r3, [r3, #8]
 8080c4a:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080c4c:	f00a f814 	bl	808ac78 <_Z20__fetch_global_Wire3v>
}
 8080c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire3.endTransmission(true);
 8080c54:	2101      	movs	r1, #1
 8080c56:	f009 be8e 	b.w	808a976 <_ZN7TwoWire15endTransmissionEh>
	...

08080c5c <_Z20writeDefaultSettingsv>:
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void)
{
 8080c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080c5e:	f009 ff91 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080c62:	f240 6313 	movw	r3, #1555	; 0x613

    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080c66:	2564      	movs	r5, #100	; 0x64
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080c68:	2400      	movs	r4, #0
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080c6a:	a901      	add	r1, sp, #4
 8080c6c:	2000      	movs	r0, #0
 8080c6e:	9301      	str	r3, [sp, #4]
 8080c70:	f7ff fec4 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080c74:	f009 ff86 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080c78:	a901      	add	r1, sp, #4
 8080c7a:	2008      	movs	r0, #8
 8080c7c:	9501      	str	r5, [sp, #4]
 8080c7e:	f7ff febd 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, 100);
 8080c82:	f009 ff7f 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080c86:	a901      	add	r1, sp, #4
 8080c88:	2010      	movs	r0, #16
 8080c8a:	9501      	str	r5, [sp, #4]
 8080c8c:	f7ff feb6 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SLOPE_B_MEM_ADDRESS, 100);
 8080c90:	f009 ff78 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080c94:	a901      	add	r1, sp, #4
 8080c96:	2098      	movs	r0, #152	; 0x98
 8080c98:	9501      	str	r5, [sp, #4]
 8080c9a:	f7ff feaf 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080c9e:	f009 ff71 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080ca2:	a901      	add	r1, sp, #4
 8080ca4:	2018      	movs	r0, #24
 8080ca6:	9501      	str	r5, [sp, #4]
 8080ca8:	f7ff fea8 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080cac:	f009 ff6a 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080cb0:	a901      	add	r1, sp, #4
 8080cb2:	2020      	movs	r0, #32
 8080cb4:	9501      	str	r5, [sp, #4]
 8080cb6:	f7ff fea1 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080cba:	f009 ff63 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080cbe:	a901      	add	r1, sp, #4
 8080cc0:	2028      	movs	r0, #40	; 0x28
 8080cc2:	9501      	str	r5, [sp, #4]
 8080cc4:	f7ff fe9a 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080cc8:	f009 ff5c 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080ccc:	a901      	add	r1, sp, #4
 8080cce:	2030      	movs	r0, #48	; 0x30
 8080cd0:	9501      	str	r5, [sp, #4]
 8080cd2:	f7ff fe93 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080cd6:	f009 ff55 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080cda:	a901      	add	r1, sp, #4
 8080cdc:	2038      	movs	r0, #56	; 0x38
 8080cde:	9501      	str	r5, [sp, #4]
 8080ce0:	f7ff fe8c 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080ce4:	f009 ff4e 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080ce8:	a901      	add	r1, sp, #4
 8080cea:	2040      	movs	r0, #64	; 0x40
 8080cec:	9501      	str	r5, [sp, #4]
 8080cee:	f7ff fe85 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080cf2:	f009 ff47 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080cf6:	a901      	add	r1, sp, #4
 8080cf8:	2004      	movs	r0, #4
 8080cfa:	9401      	str	r4, [sp, #4]
 8080cfc:	f7ff fe7e 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_ZERO_A_MEM_ADDRESS, 0);
 8080d00:	f009 ff40 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d04:	a901      	add	r1, sp, #4
 8080d06:	200c      	movs	r0, #12
 8080d08:	9401      	str	r4, [sp, #4]
 8080d0a:	f7ff fe77 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_ZERO_B_MEM_ADDRESS, 0);
 8080d0e:	f009 ff39 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d12:	a901      	add	r1, sp, #4
 8080d14:	2094      	movs	r0, #148	; 0x94
 8080d16:	9401      	str	r4, [sp, #4]
 8080d18:	f7ff fe70 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080d1c:	f009 ff32 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d20:	a901      	add	r1, sp, #4
 8080d22:	2014      	movs	r0, #20
 8080d24:	9401      	str	r4, [sp, #4]
 8080d26:	f7ff fe69 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8080d2a:	f009 ff2b 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d2e:	a901      	add	r1, sp, #4
 8080d30:	201c      	movs	r0, #28
 8080d32:	9401      	str	r4, [sp, #4]
 8080d34:	f7ff fe62 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8080d38:	f009 ff24 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d3c:	a901      	add	r1, sp, #4
 8080d3e:	2024      	movs	r0, #36	; 0x24
 8080d40:	9401      	str	r4, [sp, #4]
 8080d42:	f7ff fe5b 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8080d46:	f009 ff1d 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d4a:	a901      	add	r1, sp, #4
 8080d4c:	202c      	movs	r0, #44	; 0x2c
 8080d4e:	9401      	str	r4, [sp, #4]
 8080d50:	f7ff fe54 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8080d54:	f009 ff16 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d58:	a901      	add	r1, sp, #4
 8080d5a:	2034      	movs	r0, #52	; 0x34
 8080d5c:	9401      	str	r4, [sp, #4]
 8080d5e:	f7ff fe4d 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8080d62:	f009 ff0f 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d66:	a901      	add	r1, sp, #4
 8080d68:	203c      	movs	r0, #60	; 0x3c
 8080d6a:	9401      	str	r4, [sp, #4]
 8080d6c:	f7ff fe46 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8080d70:	f009 ff08 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d74:	a901      	add	r1, sp, #4
 8080d76:	2044      	movs	r0, #68	; 0x44
 8080d78:	9401      	str	r4, [sp, #4]
 8080d7a:	f7ff fe3f 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8080d7e:	f009 ff01 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d82:	a901      	add	r1, sp, #4
 8080d84:	2048      	movs	r0, #72	; 0x48
 8080d86:	9401      	str	r4, [sp, #4]
 8080d88:	f7ff fe38 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8080d8c:	f009 fefa 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d90:	a901      	add	r1, sp, #4
 8080d92:	2058      	movs	r0, #88	; 0x58
 8080d94:	9401      	str	r4, [sp, #4]
 8080d96:	f7ff fe31 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080d9a:	f009 fef3 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080d9e:	4941      	ldr	r1, [pc, #260]	; (8080ea4 <_Z20writeDefaultSettingsv+0x248>)
 8080da0:	205c      	movs	r0, #92	; 0x5c
 8080da2:	f7ff fe2b 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 8080da6:	f009 feed 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080dae:	a901      	add	r1, sp, #4
 8080db0:	204c      	movs	r0, #76	; 0x4c
 8080db2:	9301      	str	r3, [sp, #4]
 8080db4:	f7ff fe22 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8080db8:	f009 fee4 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080dbc:	f242 7310 	movw	r3, #10000	; 0x2710
 8080dc0:	a901      	add	r1, sp, #4
 8080dc2:	2050      	movs	r0, #80	; 0x50
 8080dc4:	9301      	str	r3, [sp, #4]
 8080dc6:	f7ff fe19 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 8080dca:	f009 fedb 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080dce:	f06f 0306 	mvn.w	r3, #6
 8080dd2:	a901      	add	r1, sp, #4
 8080dd4:	2054      	movs	r0, #84	; 0x54
 8080dd6:	9301      	str	r3, [sp, #4]
 8080dd8:	f7ff fe10 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    Time.zone(tempValue);
 8080ddc:	4b32      	ldr	r3, [pc, #200]	; (8080ea8 <_Z20writeDefaultSettingsv+0x24c>)
 8080dde:	6818      	ldr	r0, [r3, #0]
 8080de0:	f00a fd42 	bl	808b868 <__aeabi_i2f>
 8080de4:	f008 fd64 	bl	80898b0 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8080de8:	f009 fecc 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080dec:	a901      	add	r1, sp, #4
 8080dee:	2060      	movs	r0, #96	; 0x60
 8080df0:	9401      	str	r4, [sp, #4]
 8080df2:	f7ff fe03 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080df6:	f009 fec5 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080dfa:	4628      	mov	r0, r5
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080dfc:	2501      	movs	r5, #1
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080dfe:	a901      	add	r1, sp, #4
 8080e00:	9401      	str	r4, [sp, #4]
 8080e02:	f7ff fdfb 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080e06:	f009 febd 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080e0a:	a901      	add	r1, sp, #4
 8080e0c:	2068      	movs	r0, #104	; 0x68
 8080e0e:	9501      	str	r5, [sp, #4]
 8080e10:	f7ff fdf4 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8080e14:	f009 feb6 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080e18:	a901      	add	r1, sp, #4
 8080e1a:	206c      	movs	r0, #108	; 0x6c
 8080e1c:	9401      	str	r4, [sp, #4]
 8080e1e:	f7ff fded 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS, 0);
 8080e22:	f009 feaf 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080e26:	a901      	add	r1, sp, #4
 8080e28:	2070      	movs	r0, #112	; 0x70
 8080e2a:	9401      	str	r4, [sp, #4]
 8080e2c:	f7ff fde6 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8080e30:	f009 fea8 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080e34:	a901      	add	r1, sp, #4
 8080e36:	2074      	movs	r0, #116	; 0x74
 8080e38:	9501      	str	r5, [sp, #4]
 8080e3a:	f7ff fddf 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 8080e3e:	f009 fea1 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080e42:	a901      	add	r1, sp, #4
 8080e44:	2078      	movs	r0, #120	; 0x78
 8080e46:	9501      	str	r5, [sp, #4]
 8080e48:	f7ff fdd8 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8080e4c:	f009 fe9a 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080e50:	a901      	add	r1, sp, #4
 8080e52:	207c      	movs	r0, #124	; 0x7c
 8080e54:	9401      	str	r4, [sp, #4]
 8080e56:	f7ff fdd1 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 8080e5a:	f009 fe93 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080e5e:	a901      	add	r1, sp, #4
 8080e60:	2080      	movs	r0, #128	; 0x80
 8080e62:	9501      	str	r5, [sp, #4]
 8080e64:	f7ff fdca 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8080e68:	f009 fe8c 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080e6c:	a901      	add	r1, sp, #4
 8080e6e:	2084      	movs	r0, #132	; 0x84
 8080e70:	9401      	str	r4, [sp, #4]
 8080e72:	f7ff fdc3 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 8080e76:	f009 fe85 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080e7a:	a901      	add	r1, sp, #4
 8080e7c:	2088      	movs	r0, #136	; 0x88
 8080e7e:	9401      	str	r4, [sp, #4]
 8080e80:	f7ff fdbc 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
 8080e84:	f009 fe7e 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080e88:	a901      	add	r1, sp, #4
 8080e8a:	208c      	movs	r0, #140	; 0x8c
 8080e8c:	9401      	str	r4, [sp, #4]
 8080e8e:	f7ff fdb5 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 8080e92:	f009 fe77 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080e96:	a901      	add	r1, sp, #4
 8080e98:	2090      	movs	r0, #144	; 0x90
 8080e9a:	9401      	str	r4, [sp, #4]
 8080e9c:	f7ff fdae 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
}
 8080ea0:	b003      	add	sp, #12
 8080ea2:	bd30      	pop	{r4, r5, pc}
 8080ea4:	20000c70 	.word	0x20000c70
 8080ea8:	20000c5c 	.word	0x20000c5c

08080eac <_Z14readStoredVarsv>:
{
 8080eac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8080eb0:	4cc6      	ldr	r4, [pc, #792]	; (80811cc <_Z14readStoredVarsv+0x320>)
 8080eb2:	f009 fe67 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080eb6:	4621      	mov	r1, r4
 8080eb8:	2000      	movs	r0, #0
 8080eba:	f7ff fdbe 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if (DEVICE_id == -1) 
 8080ebe:	6823      	ldr	r3, [r4, #0]
 8080ec0:	3301      	adds	r3, #1
 8080ec2:	d104      	bne.n	8080ece <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 8080ec4:	f240 6313 	movw	r3, #1555	; 0x613
 8080ec8:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 8080eca:	f7ff fec7 	bl	8080c5c <_Z20writeDefaultSettingsv>
    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8080ece:	f009 fe59 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080ed2:	a901      	add	r1, sp, #4
 8080ed4:	2008      	movs	r0, #8
 8080ed6:	f7ff fdb0 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO2_slope = tempValue;
 8080eda:	9801      	ldr	r0, [sp, #4]
 8080edc:	f00a fcc4 	bl	808b868 <__aeabi_i2f>
    CO2_slope /= 100;
 8080ee0:	49bb      	ldr	r1, [pc, #748]	; (80811d0 <_Z14readStoredVarsv+0x324>)
 8080ee2:	f00a fdc9 	bl	808ba78 <__aeabi_fdiv>
 8080ee6:	f8df 9374 	ldr.w	r9, [pc, #884]	; 808125c <_Z14readStoredVarsv+0x3b0>
    CO_slopeA /= 100;
 8080eea:	f8df 8374 	ldr.w	r8, [pc, #884]	; 8081260 <_Z14readStoredVarsv+0x3b4>
    CO2_slope /= 100;
 8080eee:	f8c9 0000 	str.w	r0, [r9]
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 8080ef2:	f009 fe47 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080ef6:	a901      	add	r1, sp, #4
 8080ef8:	2010      	movs	r0, #16
 8080efa:	f7ff fd9e 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO_slopeA = tempValue;
 8080efe:	9801      	ldr	r0, [sp, #4]
 8080f00:	f00a fcb2 	bl	808b868 <__aeabi_i2f>
    CO_slopeA /= 100;
 8080f04:	49b2      	ldr	r1, [pc, #712]	; (80811d0 <_Z14readStoredVarsv+0x324>)
 8080f06:	f00a fdb7 	bl	808ba78 <__aeabi_fdiv>
 8080f0a:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_B_MEM_ADDRESS, tempValue);
 8080f0e:	f009 fe39 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080f12:	a901      	add	r1, sp, #4
 8080f14:	2098      	movs	r0, #152	; 0x98
 8080f16:	f7ff fd90 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO_slopeB = tempValue;
 8080f1a:	9801      	ldr	r0, [sp, #4]
 8080f1c:	f00a fca4 	bl	808b868 <__aeabi_i2f>
    CO_slopeB /= 100;
 8080f20:	49ab      	ldr	r1, [pc, #684]	; (80811d0 <_Z14readStoredVarsv+0x324>)
 8080f22:	f00a fda9 	bl	808ba78 <__aeabi_fdiv>
 8080f26:	4fab      	ldr	r7, [pc, #684]	; (80811d4 <_Z14readStoredVarsv+0x328>)
    PM_1_slope /= 100;
 8080f28:	4eab      	ldr	r6, [pc, #684]	; (80811d8 <_Z14readStoredVarsv+0x32c>)
    CO_slopeB /= 100;
 8080f2a:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8080f2c:	f009 fe2a 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080f30:	a901      	add	r1, sp, #4
 8080f32:	2018      	movs	r0, #24
 8080f34:	f7ff fd81 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_1_slope = tempValue;
 8080f38:	9801      	ldr	r0, [sp, #4]
 8080f3a:	f00a fc95 	bl	808b868 <__aeabi_i2f>
    PM_1_slope /= 100;
 8080f3e:	49a4      	ldr	r1, [pc, #656]	; (80811d0 <_Z14readStoredVarsv+0x324>)
 8080f40:	f00a fd9a 	bl	808ba78 <__aeabi_fdiv>
 8080f44:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8080f46:	f009 fe1d 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080f4a:	a901      	add	r1, sp, #4
 8080f4c:	2020      	movs	r0, #32
 8080f4e:	f7ff fd74 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_25_slope = tempValue;
 8080f52:	9801      	ldr	r0, [sp, #4]
 8080f54:	f00a fc88 	bl	808b868 <__aeabi_i2f>
    PM_25_slope /= 100;
 8080f58:	499d      	ldr	r1, [pc, #628]	; (80811d0 <_Z14readStoredVarsv+0x324>)
 8080f5a:	f00a fd8d 	bl	808ba78 <__aeabi_fdiv>
 8080f5e:	4d9f      	ldr	r5, [pc, #636]	; (80811dc <_Z14readStoredVarsv+0x330>)
    PM_10_slope /= 100;
 8080f60:	4c9f      	ldr	r4, [pc, #636]	; (80811e0 <_Z14readStoredVarsv+0x334>)
    PM_25_slope /= 100;
 8080f62:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8080f64:	f009 fe0e 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080f68:	a901      	add	r1, sp, #4
 8080f6a:	2028      	movs	r0, #40	; 0x28
 8080f6c:	f7ff fd65 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_10_slope = tempValue;
 8080f70:	9801      	ldr	r0, [sp, #4]
 8080f72:	f00a fc79 	bl	808b868 <__aeabi_i2f>
    PM_10_slope /= 100;
 8080f76:	4996      	ldr	r1, [pc, #600]	; (80811d0 <_Z14readStoredVarsv+0x324>)
 8080f78:	f00a fd7e 	bl	808ba78 <__aeabi_fdiv>
 8080f7c:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 8080f7e:	f009 fe01 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080f82:	a901      	add	r1, sp, #4
 8080f84:	2030      	movs	r0, #48	; 0x30
 8080f86:	f7ff fd58 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    temp_slope = tempValue;
 8080f8a:	9801      	ldr	r0, [sp, #4]
 8080f8c:	f00a fc6c 	bl	808b868 <__aeabi_i2f>
    temp_slope /= 100;
 8080f90:	498f      	ldr	r1, [pc, #572]	; (80811d0 <_Z14readStoredVarsv+0x324>)
 8080f92:	f00a fd71 	bl	808ba78 <__aeabi_fdiv>
 8080f96:	4b93      	ldr	r3, [pc, #588]	; (80811e4 <_Z14readStoredVarsv+0x338>)
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8080f98:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8081264 <_Z14readStoredVarsv+0x3b8>
    temp_slope /= 100;
 8080f9c:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8080f9e:	f009 fdf1 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080fa2:	a901      	add	r1, sp, #4
 8080fa4:	2038      	movs	r0, #56	; 0x38
 8080fa6:	f7ff fd48 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    pressure_slope = tempValue;
 8080faa:	9801      	ldr	r0, [sp, #4]
 8080fac:	f00a fc5c 	bl	808b868 <__aeabi_i2f>
    pressure_slope /= 100;
 8080fb0:	4987      	ldr	r1, [pc, #540]	; (80811d0 <_Z14readStoredVarsv+0x324>)
 8080fb2:	f00a fd61 	bl	808ba78 <__aeabi_fdiv>
 8080fb6:	4b8c      	ldr	r3, [pc, #560]	; (80811e8 <_Z14readStoredVarsv+0x33c>)
 8080fb8:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8080fba:	f009 fde3 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080fbe:	a901      	add	r1, sp, #4
 8080fc0:	2040      	movs	r0, #64	; 0x40
 8080fc2:	f7ff fd3a 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    rh_slope = tempValue;
 8080fc6:	9801      	ldr	r0, [sp, #4]
 8080fc8:	f00a fc4e 	bl	808b868 <__aeabi_i2f>
    rh_slope /= 100;
 8080fcc:	4980      	ldr	r1, [pc, #512]	; (80811d0 <_Z14readStoredVarsv+0x324>)
 8080fce:	f00a fd53 	bl	808ba78 <__aeabi_fdiv>
 8080fd2:	4b86      	ldr	r3, [pc, #536]	; (80811ec <_Z14readStoredVarsv+0x340>)
 8080fd4:	6018      	str	r0, [r3, #0]
    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 8080fd6:	f009 fdd5 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080fda:	4985      	ldr	r1, [pc, #532]	; (80811f0 <_Z14readStoredVarsv+0x344>)
 8080fdc:	2004      	movs	r0, #4
 8080fde:	f7ff fd2c 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_ZERO_A_MEM_ADDRESS, CO_zeroA);
 8080fe2:	f009 fdcf 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080fe6:	4983      	ldr	r1, [pc, #524]	; (80811f4 <_Z14readStoredVarsv+0x348>)
 8080fe8:	200c      	movs	r0, #12
 8080fea:	f7ff fd26 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_ZERO_B_MEM_ADDRESS, CO_zeroB);
 8080fee:	f009 fdc9 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080ff2:	4981      	ldr	r1, [pc, #516]	; (80811f8 <_Z14readStoredVarsv+0x34c>)
 8080ff4:	2094      	movs	r0, #148	; 0x94
 8080ff6:	f7ff fd20 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 8080ffa:	f009 fdc3 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8080ffe:	497f      	ldr	r1, [pc, #508]	; (80811fc <_Z14readStoredVarsv+0x350>)
 8081000:	2014      	movs	r0, #20
 8081002:	f7ff fd1a 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 8081006:	f009 fdbd 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 808100a:	497d      	ldr	r1, [pc, #500]	; (8081200 <_Z14readStoredVarsv+0x354>)
 808100c:	201c      	movs	r0, #28
 808100e:	f7ff fd14 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 8081012:	f009 fdb7 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8081016:	497b      	ldr	r1, [pc, #492]	; (8081204 <_Z14readStoredVarsv+0x358>)
 8081018:	2024      	movs	r0, #36	; 0x24
 808101a:	f7ff fd0e 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 808101e:	f009 fdb1 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8081022:	4979      	ldr	r1, [pc, #484]	; (8081208 <_Z14readStoredVarsv+0x35c>)
 8081024:	202c      	movs	r0, #44	; 0x2c
 8081026:	f7ff fd08 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 808102a:	f009 fdab 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 808102e:	4977      	ldr	r1, [pc, #476]	; (808120c <_Z14readStoredVarsv+0x360>)
 8081030:	2034      	movs	r0, #52	; 0x34
 8081032:	f7ff fd02 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 8081036:	f009 fda5 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 808103a:	4975      	ldr	r1, [pc, #468]	; (8081210 <_Z14readStoredVarsv+0x364>)
 808103c:	203c      	movs	r0, #60	; 0x3c
 808103e:	f7ff fcfc 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8081042:	f009 fd9f 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8081046:	4973      	ldr	r1, [pc, #460]	; (8081214 <_Z14readStoredVarsv+0x368>)
 8081048:	2044      	movs	r0, #68	; 0x44
 808104a:	f7ff fcf6 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 808104e:	f009 fd99 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8081052:	4971      	ldr	r1, [pc, #452]	; (8081218 <_Z14readStoredVarsv+0x36c>)
 8081054:	2048      	movs	r0, #72	; 0x48
 8081056:	f7ff fcf0 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808105a:	f009 fd93 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 808105e:	496f      	ldr	r1, [pc, #444]	; (808121c <_Z14readStoredVarsv+0x370>)
 8081060:	2058      	movs	r0, #88	; 0x58
 8081062:	f7ff fcea 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 8081066:	f009 fd8d 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 808106a:	496d      	ldr	r1, [pc, #436]	; (8081220 <_Z14readStoredVarsv+0x374>)
 808106c:	205c      	movs	r0, #92	; 0x5c
 808106e:	f7ff fce4 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8081072:	f009 fd87 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8081076:	496b      	ldr	r1, [pc, #428]	; (8081224 <_Z14readStoredVarsv+0x378>)
 8081078:	204c      	movs	r0, #76	; 0x4c
 808107a:	f7ff fcde 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 808107e:	f009 fd81 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8081082:	4969      	ldr	r1, [pc, #420]	; (8081228 <_Z14readStoredVarsv+0x37c>)
 8081084:	2050      	movs	r0, #80	; 0x50
 8081086:	f7ff fcd8 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 808108a:	f009 fd7b 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 808108e:	a901      	add	r1, sp, #4
 8081090:	2054      	movs	r0, #84	; 0x54
 8081092:	f7ff fcd2 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    Time.zone(tempValue);
 8081096:	9801      	ldr	r0, [sp, #4]
 8081098:	f00a fbe6 	bl	808b868 <__aeabi_i2f>
 808109c:	f008 fc08 	bl	80898b0 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 80810a0:	f009 fd70 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80810a4:	4961      	ldr	r1, [pc, #388]	; (808122c <_Z14readStoredVarsv+0x380>)
 80810a6:	2060      	movs	r0, #96	; 0x60
 80810a8:	f7ff fcc7 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80810ac:	f009 fd6a 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80810b0:	495f      	ldr	r1, [pc, #380]	; (8081230 <_Z14readStoredVarsv+0x384>)
 80810b2:	2064      	movs	r0, #100	; 0x64
 80810b4:	f7ff fcc1 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 80810b8:	f009 fd64 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80810bc:	495d      	ldr	r1, [pc, #372]	; (8081234 <_Z14readStoredVarsv+0x388>)
 80810be:	2068      	movs	r0, #104	; 0x68
 80810c0:	f7ff fcbb 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80810c4:	f009 fd5e 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80810c8:	495b      	ldr	r1, [pc, #364]	; (8081238 <_Z14readStoredVarsv+0x38c>)
 80810ca:	206c      	movs	r0, #108	; 0x6c
 80810cc:	f7ff fcb5 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 80810d0:	f009 fd58 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80810d4:	4959      	ldr	r1, [pc, #356]	; (808123c <_Z14readStoredVarsv+0x390>)
 80810d6:	2070      	movs	r0, #112	; 0x70
 80810d8:	f7ff fcaf 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 80810dc:	f009 fd52 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80810e0:	4957      	ldr	r1, [pc, #348]	; (8081240 <_Z14readStoredVarsv+0x394>)
 80810e2:	2074      	movs	r0, #116	; 0x74
 80810e4:	f7ff fca9 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80810e8:	f009 fd4c 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80810ec:	4955      	ldr	r1, [pc, #340]	; (8081244 <_Z14readStoredVarsv+0x398>)
 80810ee:	2078      	movs	r0, #120	; 0x78
 80810f0:	f7ff fca3 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80810f4:	f009 fd46 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80810f8:	4953      	ldr	r1, [pc, #332]	; (8081248 <_Z14readStoredVarsv+0x39c>)
 80810fa:	207c      	movs	r0, #124	; 0x7c
 80810fc:	f7ff fc9d 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8081100:	f009 fd40 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8081104:	4951      	ldr	r1, [pc, #324]	; (808124c <_Z14readStoredVarsv+0x3a0>)
 8081106:	2080      	movs	r0, #128	; 0x80
 8081108:	f7ff fc97 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 808110c:	f009 fd3a 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8081110:	494f      	ldr	r1, [pc, #316]	; (8081250 <_Z14readStoredVarsv+0x3a4>)
 8081112:	2084      	movs	r0, #132	; 0x84
 8081114:	f7ff fc91 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 8081118:	f009 fd34 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 808111c:	494d      	ldr	r1, [pc, #308]	; (8081254 <_Z14readStoredVarsv+0x3a8>)
 808111e:	2088      	movs	r0, #136	; 0x88
 8081120:	f7ff fc8b 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8081124:	f009 fd2e 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8081128:	4651      	mov	r1, sl
 808112a:	208c      	movs	r0, #140	; 0x8c
 808112c:	f7ff fc85 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8081130:	f009 fd28 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8081134:	2090      	movs	r0, #144	; 0x90
 8081136:	4948      	ldr	r1, [pc, #288]	; (8081258 <_Z14readStoredVarsv+0x3ac>)
 8081138:	f7ff fc7f 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if (sensible_iot_en) 
 808113c:	f8da 3000 	ldr.w	r3, [sl]
 8081140:	b113      	cbz	r3, 8081148 <_Z14readStoredVarsv+0x29c>
        Time.zone(0);       //use UTC if using sensible iot upload
 8081142:	2000      	movs	r0, #0
 8081144:	f008 fbb4 	bl	80898b0 <_ZN9TimeClass4zoneEf>
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 8081148:	f241 3187 	movw	r1, #4999	; 0x1387
 808114c:	4a3c      	ldr	r2, [pc, #240]	; (8081240 <_Z14readStoredVarsv+0x394>)
    if (!CO2_slope)
 808114e:	f8d9 0000 	ldr.w	r0, [r9]
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 8081152:	6813      	ldr	r3, [r2, #0]
 8081154:	3b01      	subs	r3, #1
 8081156:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 8081158:	bf88      	it	hi
 808115a:	2301      	movhi	r3, #1
    if (!CO2_slope)
 808115c:	f04f 0100 	mov.w	r1, #0
        measurements_to_average = 1;
 8081160:	bf88      	it	hi
 8081162:	6013      	strhi	r3, [r2, #0]
    if (!CO2_slope)
 8081164:	f00a fd68 	bl	808bc38 <__aeabi_fcmpeq>
 8081168:	b118      	cbz	r0, 8081172 <_Z14readStoredVarsv+0x2c6>
        CO2_slope = 1;
 808116a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 808116e:	f8c9 3000 	str.w	r3, [r9]
    if (!CO_slopeA)
 8081172:	2100      	movs	r1, #0
 8081174:	f8d8 0000 	ldr.w	r0, [r8]
 8081178:	f00a fd5e 	bl	808bc38 <__aeabi_fcmpeq>
 808117c:	b118      	cbz	r0, 8081186 <_Z14readStoredVarsv+0x2da>
        CO_slopeA = 1;
 808117e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081182:	f8c8 3000 	str.w	r3, [r8]
    if (!CO_slopeB)
 8081186:	2100      	movs	r1, #0
 8081188:	6838      	ldr	r0, [r7, #0]
 808118a:	f00a fd55 	bl	808bc38 <__aeabi_fcmpeq>
 808118e:	b110      	cbz	r0, 8081196 <_Z14readStoredVarsv+0x2ea>
        CO_slopeB = 1;
 8081190:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081194:	603b      	str	r3, [r7, #0]
    if (!PM_1_slope)
 8081196:	2100      	movs	r1, #0
 8081198:	6830      	ldr	r0, [r6, #0]
 808119a:	f00a fd4d 	bl	808bc38 <__aeabi_fcmpeq>
 808119e:	b110      	cbz	r0, 80811a6 <_Z14readStoredVarsv+0x2fa>
        PM_1_slope = 1;
 80811a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80811a4:	6033      	str	r3, [r6, #0]
    if (!PM_25_slope)
 80811a6:	2100      	movs	r1, #0
 80811a8:	6828      	ldr	r0, [r5, #0]
 80811aa:	f00a fd45 	bl	808bc38 <__aeabi_fcmpeq>
 80811ae:	b110      	cbz	r0, 80811b6 <_Z14readStoredVarsv+0x30a>
        PM_25_slope = 1;
 80811b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80811b4:	602b      	str	r3, [r5, #0]
    if (!PM_10_slope)
 80811b6:	2100      	movs	r1, #0
 80811b8:	6820      	ldr	r0, [r4, #0]
 80811ba:	f00a fd3d 	bl	808bc38 <__aeabi_fcmpeq>
 80811be:	b110      	cbz	r0, 80811c6 <_Z14readStoredVarsv+0x31a>
        PM_10_slope = 1;
 80811c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80811c4:	6023      	str	r3, [r4, #0]
}
 80811c6:	b002      	add	sp, #8
 80811c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80811cc:	20000080 	.word	0x20000080
 80811d0:	42c80000 	.word	0x42c80000
 80811d4:	200002cc 	.word	0x200002cc
 80811d8:	200002ec 	.word	0x200002ec
 80811dc:	200002f4 	.word	0x200002f4
 80811e0:	200002e4 	.word	0x200002e4
 80811e4:	20000c60 	.word	0x20000c60
 80811e8:	20000798 	.word	0x20000798
 80811ec:	200007a0 	.word	0x200007a0
 80811f0:	200002bc 	.word	0x200002bc
 80811f4:	200002d4 	.word	0x200002d4
 80811f8:	200002d8 	.word	0x200002d8
 80811fc:	200002f0 	.word	0x200002f0
 8081200:	200002f8 	.word	0x200002f8
 8081204:	200002e8 	.word	0x200002e8
 8081208:	20000c64 	.word	0x20000c64
 808120c:	2000079c 	.word	0x2000079c
 8081210:	200007a4 	.word	0x200007a4
 8081214:	20000c28 	.word	0x20000c28
 8081218:	200005e8 	.word	0x200005e8
 808121c:	20000758 	.word	0x20000758
 8081220:	20000c70 	.word	0x20000c70
 8081224:	20000098 	.word	0x20000098
 8081228:	2000009c 	.word	0x2000009c
 808122c:	20000c68 	.word	0x20000c68
 8081230:	20000750 	.word	0x20000750
 8081234:	2000074c 	.word	0x2000074c
 8081238:	20000754 	.word	0x20000754
 808123c:	2000075c 	.word	0x2000075c
 8081240:	20000748 	.word	0x20000748
 8081244:	20000560 	.word	0x20000560
 8081248:	2000054c 	.word	0x2000054c
 808124c:	200006b4 	.word	0x200006b4
 8081250:	200002d0 	.word	0x200002d0
 8081254:	2000066c 	.word	0x2000066c
 8081258:	200005dc 	.word	0x200005dc
 808125c:	200002b8 	.word	0x200002b8
 8081260:	200002c8 	.word	0x200002c8
 8081264:	20000c24 	.word	0x20000c24

08081268 <_Z7echoGpsv>:
        goToSleepBattery();
    }
}

void echoGps() 
{
 8081268:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while (!Serial.available()) 
 808126a:	f009 f99b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808126e:	6803      	ldr	r3, [r0, #0]
 8081270:	691b      	ldr	r3, [r3, #16]
 8081272:	4798      	blx	r3
 8081274:	b990      	cbnz	r0, 808129c <_Z7echoGpsv+0x34>
    {
        if (Serial5.available() > 0) 
 8081276:	f7ff fc6f 	bl	8080b58 <_Z22__fetch_global_Serial5v>
 808127a:	6803      	ldr	r3, [r0, #0]
 808127c:	691b      	ldr	r3, [r3, #16]
 808127e:	4798      	blx	r3
 8081280:	2800      	cmp	r0, #0
 8081282:	ddf2      	ble.n	808126a <_Z7echoGpsv+0x2>
        {
            gps_byte = Serial5.read();
 8081284:	f7ff fc68 	bl	8080b58 <_Z22__fetch_global_Serial5v>
 8081288:	6803      	ldr	r3, [r0, #0]
 808128a:	695b      	ldr	r3, [r3, #20]
 808128c:	4798      	blx	r3
 808128e:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081290:	f009 f988 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081294:	b2e1      	uxtb	r1, r4
 8081296:	f008 f91d 	bl	80894d4 <_ZN5Print5printEc>
 808129a:	e7e6      	b.n	808126a <_Z7echoGpsv+0x2>
        }
    }
}
 808129c:	bd10      	pop	{r4, pc}
	...

080812a0 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte* packet, byte len)
{
 80812a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80812a4:	4606      	mov	r6, r0
 80812a6:	460d      	mov	r5, r1
 80812a8:	2400      	movs	r4, #0
    char temp[3];

    for (uint8_t i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
 80812aa:	4f0f      	ldr	r7, [pc, #60]	; (80812e8 <_Z11printPacketPhh+0x48>)
        Serial.print(temp);

        if (i != len - 1)
 80812ac:	f101 38ff 	add.w	r8, r1, #4294967295
    for (uint8_t i = 0; i < len; i++)
 80812b0:	42ac      	cmp	r4, r5
 80812b2:	d012      	beq.n	80812da <_Z11printPacketPhh+0x3a>
        sprintf(temp, "%.2X", packet[i]);
 80812b4:	4639      	mov	r1, r7
 80812b6:	5d32      	ldrb	r2, [r6, r4]
 80812b8:	a801      	add	r0, sp, #4
 80812ba:	f007 fb85 	bl	80889c8 <sprintf>
        Serial.print(temp);
 80812be:	f009 f971 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80812c2:	a901      	add	r1, sp, #4
 80812c4:	f008 f902 	bl	80894cc <_ZN5Print5printEPKc>
        if (i != len - 1)
 80812c8:	45a0      	cmp	r8, r4
 80812ca:	d004      	beq.n	80812d6 <_Z11printPacketPhh+0x36>
        {
            Serial.print(' ');
 80812cc:	f009 f96a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80812d0:	2120      	movs	r1, #32
 80812d2:	f008 f8ff 	bl	80894d4 <_ZN5Print5printEc>
    for (uint8_t i = 0; i < len; i++)
 80812d6:	3401      	adds	r4, #1
 80812d8:	e7ea      	b.n	80812b0 <_Z11printPacketPhh+0x10>
        }
    }

    Serial.println();
 80812da:	f009 f963 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80812de:	f008 f8fc 	bl	80894da <_ZN5Print7printlnEv>
}
 80812e2:	b002      	add	sp, #8
 80812e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80812e8:	0808dd9a 	.word	0x0808dd9a

080812ec <_Z10sendPacketPhh>:
{
 80812ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80812ee:	4604      	mov	r4, r0
 80812f0:	460d      	mov	r5, r1
 80812f2:	4606      	mov	r6, r0
 80812f4:	180f      	adds	r7, r1, r0
    for (uint8_t i = 0; i < len; i++)
 80812f6:	42be      	cmp	r6, r7
 80812f8:	d007      	beq.n	808130a <_Z10sendPacketPhh+0x1e>
        Serial5.write(packet[i]);
 80812fa:	f7ff fc2d 	bl	8080b58 <_Z22__fetch_global_Serial5v>
 80812fe:	6803      	ldr	r3, [r0, #0]
 8081300:	f816 1b01 	ldrb.w	r1, [r6], #1
 8081304:	689b      	ldr	r3, [r3, #8]
 8081306:	4798      	blx	r3
    for (uint8_t i = 0; i < len; i++)
 8081308:	e7f5      	b.n	80812f6 <_Z10sendPacketPhh+0xa>
    printPacket(packet, len);
 808130a:	4629      	mov	r1, r5
 808130c:	4620      	mov	r0, r4
}
 808130e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    printPacket(packet, len);
 8081312:	f7ff bfc5 	b.w	80812a0 <_Z11printPacketPhh>
	...

08081318 <_Z19enableContinuousGPSv>:
{
 8081318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 808131a:	4a07      	ldr	r2, [pc, #28]	; (8081338 <_Z19enableContinuousGPSv+0x20>)
 808131c:	ab01      	add	r3, sp, #4
 808131e:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 8081322:	6851      	ldr	r1, [r2, #4]
 8081324:	8912      	ldrh	r2, [r2, #8]
 8081326:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 8081328:	210a      	movs	r1, #10
 808132a:	a801      	add	r0, sp, #4
    byte packet[] = {
 808132c:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 808132e:	f7ff ffdd 	bl	80812ec <_Z10sendPacketPhh>
}
 8081332:	b005      	add	sp, #20
 8081334:	f85d fb04 	ldr.w	pc, [sp], #4
 8081338:	0808ff38 	.word	0x0808ff38

0808133c <_Z17enableLowPowerGPSv>:
{
 808133c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 808133e:	4a07      	ldr	r2, [pc, #28]	; (808135c <_Z17enableLowPowerGPSv+0x20>)
 8081340:	ab01      	add	r3, sp, #4
 8081342:	f852 0f18 	ldr.w	r0, [r2, #24]!
 8081346:	6851      	ldr	r1, [r2, #4]
 8081348:	8912      	ldrh	r2, [r2, #8]
 808134a:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 808134c:	210a      	movs	r1, #10
 808134e:	a801      	add	r0, sp, #4
    byte packet[] = {
 8081350:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 8081352:	f7ff ffcb 	bl	80812ec <_Z10sendPacketPhh>
}
 8081356:	b005      	add	sp, #20
 8081358:	f85d fb04 	ldr.w	pc, [sp], #4
 808135c:	0808ff38 	.word	0x0808ff38

08081360 <_Z15readTemperaturev>:

float readTemperature(void)
{
 8081360:	b538      	push	{r3, r4, r5, lr}
 8081362:	4b2f      	ldr	r3, [pc, #188]	; (8081420 <_Z15readTemperaturev+0xc0>)
 8081364:	681d      	ldr	r5, [r3, #0]
    float temperature = 0;
    if (hih8120_enabled)
 8081366:	4b2f      	ldr	r3, [pc, #188]	; (8081424 <_Z15readTemperaturev+0xc4>)
 8081368:	681b      	ldr	r3, [r3, #0]
 808136a:	b30b      	cbz	r3, 80813b0 <_Z15readTemperaturev+0x50>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 808136c:	4b2e      	ldr	r3, [pc, #184]	; (8081428 <_Z15readTemperaturev+0xc8>)
 808136e:	8958      	ldrh	r0, [r3, #10]
 8081370:	f00a fa76 	bl	808b860 <__aeabi_ui2f>
 8081374:	492d      	ldr	r1, [pc, #180]	; (808142c <_Z15readTemperaturev+0xcc>)
 8081376:	f00a fb7f 	bl	808ba78 <__aeabi_fdiv>
 808137a:	492d      	ldr	r1, [pc, #180]	; (8081430 <_Z15readTemperaturev+0xd0>)
 808137c:	f00a fac8 	bl	808b910 <__aeabi_fmul>
 8081380:	492c      	ldr	r1, [pc, #176]	; (8081434 <_Z15readTemperaturev+0xd4>)
 8081382:	f00a f9bb 	bl	808b6fc <__aeabi_fsub>
 8081386:	4604      	mov	r4, r0
    {
        temperature = hih.temperature();
        if (debugging_enabled)
 8081388:	b125      	cbz	r5, 8081394 <_Z15readTemperaturev+0x34>
        {
            Serial.println("Temperature reading from HIH8120");
 808138a:	f009 f90b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808138e:	492a      	ldr	r1, [pc, #168]	; (8081438 <_Z15readTemperaturev+0xd8>)
 8081390:	f008 f8af 	bl	80894f2 <_ZN5Print7printlnEPKc>
        {
            Serial.println("Temperature reading from BME for Alphasense");
        }
        temperature = bme.temperature;
    }
    temperature *= temp_slope;
 8081394:	4b29      	ldr	r3, [pc, #164]	; (808143c <_Z15readTemperaturev+0xdc>)
 8081396:	4620      	mov	r0, r4
 8081398:	6819      	ldr	r1, [r3, #0]
 808139a:	f00a fab9 	bl	808b910 <__aeabi_fmul>
 808139e:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 80813a0:	4b27      	ldr	r3, [pc, #156]	; (8081440 <_Z15readTemperaturev+0xe0>)
 80813a2:	6818      	ldr	r0, [r3, #0]
 80813a4:	f00a fa60 	bl	808b868 <__aeabi_i2f>
 80813a8:	4621      	mov	r1, r4
 80813aa:	f00a f9a9 	bl	808b700 <__addsf3>
    return temperature;
}
 80813ae:	bd38      	pop	{r3, r4, r5, pc}
    else if (new_temperature_sensor_enabled)
 80813b0:	4b24      	ldr	r3, [pc, #144]	; (8081444 <_Z15readTemperaturev+0xe4>)
 80813b2:	681b      	ldr	r3, [r3, #0]
 80813b4:	b313      	cbz	r3, 80813fc <_Z15readTemperaturev+0x9c>
        if (debugging_enabled)
 80813b6:	b125      	cbz	r5, 80813c2 <_Z15readTemperaturev+0x62>
            Serial.println("Temperature reading from TMP36");
 80813b8:	f009 f8f4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80813bc:	4922      	ldr	r1, [pc, #136]	; (8081448 <_Z15readTemperaturev+0xe8>)
 80813be:	f008 f898 	bl	80894f2 <_ZN5Print7printlnEPKc>
        temperature = analogRead(A1);
 80813c2:	200b      	movs	r0, #11
 80813c4:	f009 fbc6 	bl	808ab54 <analogRead>
 80813c8:	f00a fa4e 	bl	808b868 <__aeabi_i2f>
        temperature *= VOLTS_PER_UNIT;
 80813cc:	f009 fdf2 	bl	808afb4 <__aeabi_f2d>
 80813d0:	a30f      	add	r3, pc, #60	; (adr r3, 8081410 <_Z15readTemperaturev+0xb0>)
 80813d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80813d6:	f009 fe45 	bl	808b064 <__aeabi_dmul>
 80813da:	f00a f93b 	bl	808b654 <__aeabi_d2f>
        temperature -= TMP36_OFFSET;
 80813de:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80813e2:	f00a f98b 	bl	808b6fc <__aeabi_fsub>
        temperature /= TMP36_VPDC;
 80813e6:	f009 fde5 	bl	808afb4 <__aeabi_f2d>
 80813ea:	a30b      	add	r3, pc, #44	; (adr r3, 8081418 <_Z15readTemperaturev+0xb8>)
 80813ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80813f0:	f009 ff62 	bl	808b2b8 <__aeabi_ddiv>
 80813f4:	f00a f92e 	bl	808b654 <__aeabi_d2f>
 80813f8:	4604      	mov	r4, r0
 80813fa:	e7cb      	b.n	8081394 <_Z15readTemperaturev+0x34>
        if (debugging_enabled)
 80813fc:	b125      	cbz	r5, 8081408 <_Z15readTemperaturev+0xa8>
            Serial.println("Temperature reading from BME for Alphasense");
 80813fe:	f009 f8d1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081402:	4912      	ldr	r1, [pc, #72]	; (808144c <_Z15readTemperaturev+0xec>)
 8081404:	f008 f875 	bl	80894f2 <_ZN5Print7printlnEPKc>
        temperature = bme.temperature;
 8081408:	4b11      	ldr	r3, [pc, #68]	; (8081450 <_Z15readTemperaturev+0xf0>)
 808140a:	681c      	ldr	r4, [r3, #0]
 808140c:	e7c2      	b.n	8081394 <_Z15readTemperaturev+0x34>
 808140e:	bf00      	nop
 8081410:	eb1c432d 	.word	0xeb1c432d
 8081414:	3f4a36e2 	.word	0x3f4a36e2
 8081418:	47ae147b 	.word	0x47ae147b
 808141c:	3f847ae1 	.word	0x3f847ae1
 8081420:	200005e8 	.word	0x200005e8
 8081424:	200006b4 	.word	0x200006b4
 8081428:	200006a8 	.word	0x200006a8
 808142c:	467ff800 	.word	0x467ff800
 8081430:	43250000 	.word	0x43250000
 8081434:	42200000 	.word	0x42200000
 8081438:	0808dd9f 	.word	0x0808dd9f
 808143c:	20000c60 	.word	0x20000c60
 8081440:	20000c64 	.word	0x20000c64
 8081444:	2000074c 	.word	0x2000074c
 8081448:	0808ddc0 	.word	0x0808ddc0
 808144c:	0808dddf 	.word	0x0808dddf
 8081450:	20000564 	.word	0x20000564

08081454 <_Z12readHumidityv>:

float readHumidity(void)
{
 8081454:	b538      	push	{r3, r4, r5, lr}
 8081456:	4b19      	ldr	r3, [pc, #100]	; (80814bc <_Z12readHumidityv+0x68>)
 8081458:	681d      	ldr	r5, [r3, #0]
    float humidity;
    if (hih8120_enabled)
 808145a:	4b19      	ldr	r3, [pc, #100]	; (80814c0 <_Z12readHumidityv+0x6c>)
 808145c:	681b      	ldr	r3, [r3, #0]
 808145e:	b32b      	cbz	r3, 80814ac <_Z12readHumidityv+0x58>
            return float(raw) / 16382;
 8081460:	4b18      	ldr	r3, [pc, #96]	; (80814c4 <_Z12readHumidityv+0x70>)
 8081462:	8918      	ldrh	r0, [r3, #8]
 8081464:	f00a f9fc 	bl	808b860 <__aeabi_ui2f>
 8081468:	4917      	ldr	r1, [pc, #92]	; (80814c8 <_Z12readHumidityv+0x74>)
 808146a:	f00a fb05 	bl	808ba78 <__aeabi_fdiv>
    {
        humidity = hih.humidity();
        humidity *= 100;
 808146e:	4917      	ldr	r1, [pc, #92]	; (80814cc <_Z12readHumidityv+0x78>)
 8081470:	f00a fa4e 	bl	808b910 <__aeabi_fmul>
 8081474:	4604      	mov	r4, r0
        if (debugging_enabled)
 8081476:	b125      	cbz	r5, 8081482 <_Z12readHumidityv+0x2e>
        {
            Serial.println("Humidity reading from HIH8120");
 8081478:	f009 f894 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808147c:	4914      	ldr	r1, [pc, #80]	; (80814d0 <_Z12readHumidityv+0x7c>)
    else
    {
        humidity = bme.humidity;
        if (debugging_enabled)
        {
            Serial.println("Humidity reading from BME");
 808147e:	f008 f838 	bl	80894f2 <_ZN5Print7printlnEPKc>
        }
    }

    humidity *= rh_slope;
 8081482:	4b14      	ldr	r3, [pc, #80]	; (80814d4 <_Z12readHumidityv+0x80>)
 8081484:	4620      	mov	r0, r4
 8081486:	6819      	ldr	r1, [r3, #0]
 8081488:	f00a fa42 	bl	808b910 <__aeabi_fmul>
 808148c:	4604      	mov	r4, r0
    humidity += rh_zero;       //user input zero offset
 808148e:	4b12      	ldr	r3, [pc, #72]	; (80814d8 <_Z12readHumidityv+0x84>)
 8081490:	6818      	ldr	r0, [r3, #0]
 8081492:	f00a f9e9 	bl	808b868 <__aeabi_i2f>
 8081496:	4621      	mov	r1, r4
 8081498:	f00a f932 	bl	808b700 <__addsf3>
    if (humidity > 100)
 808149c:	490b      	ldr	r1, [pc, #44]	; (80814cc <_Z12readHumidityv+0x78>)
    humidity += rh_zero;       //user input zero offset
 808149e:	4604      	mov	r4, r0
    if (humidity > 100)
 80814a0:	f00a fbf2 	bl	808bc88 <__aeabi_fcmpgt>
 80814a4:	b100      	cbz	r0, 80814a8 <_Z12readHumidityv+0x54>
        humidity = 100;
 80814a6:	4c09      	ldr	r4, [pc, #36]	; (80814cc <_Z12readHumidityv+0x78>)
    return humidity;
}
 80814a8:	4620      	mov	r0, r4
 80814aa:	bd38      	pop	{r3, r4, r5, pc}
        humidity = bme.humidity;
 80814ac:	4b0b      	ldr	r3, [pc, #44]	; (80814dc <_Z12readHumidityv+0x88>)
 80814ae:	689c      	ldr	r4, [r3, #8]
        if (debugging_enabled)
 80814b0:	2d00      	cmp	r5, #0
 80814b2:	d0e6      	beq.n	8081482 <_Z12readHumidityv+0x2e>
            Serial.println("Humidity reading from BME");
 80814b4:	f009 f876 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80814b8:	4909      	ldr	r1, [pc, #36]	; (80814e0 <_Z12readHumidityv+0x8c>)
 80814ba:	e7e0      	b.n	808147e <_Z12readHumidityv+0x2a>
 80814bc:	200005e8 	.word	0x200005e8
 80814c0:	200006b4 	.word	0x200006b4
 80814c4:	200006a8 	.word	0x200006a8
 80814c8:	467ff800 	.word	0x467ff800
 80814cc:	42c80000 	.word	0x42c80000
 80814d0:	0808de0b 	.word	0x0808de0b
 80814d4:	200007a0 	.word	0x200007a0
 80814d8:	200007a4 	.word	0x200007a4
 80814dc:	20000564 	.word	0x20000564
 80814e0:	0808de29 	.word	0x0808de29
 80814e4:	00000000 	.word	0x00000000

080814e8 <_Z10readAlpha2v>:
    }
    return alpha1_ppmraw;
}

float readAlpha2(void)
{
 80814e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha2_ppmraw = 0;
    String alpha2_ppmRounded = "";

    if (debugging_enabled)
 80814ec:	4f8e      	ldr	r7, [pc, #568]	; (8081728 <_Z10readAlpha2v+0x240>)
{
 80814ee:	b088      	sub	sp, #32
    String alpha2_ppmRounded = "";
 80814f0:	4668      	mov	r0, sp
 80814f2:	498e      	ldr	r1, [pc, #568]	; (808172c <_Z10readAlpha2v+0x244>)
 80814f4:	f007 fe26 	bl	8089144 <_ZN6StringC1EPKc>
    if (debugging_enabled)
 80814f8:	683a      	ldr	r2, [r7, #0]
 80814fa:	b122      	cbz	r2, 8081506 <_Z10readAlpha2v+0x1e>
    {
        Serial.println("Start of alpha 2 read");
 80814fc:	f009 f852 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081500:	498b      	ldr	r1, [pc, #556]	; (8081730 <_Z10readAlpha2v+0x248>)
 8081502:	f007 fff6 	bl	80894f2 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 8081506:	4d8b      	ldr	r5, [pc, #556]	; (8081734 <_Z10readAlpha2v+0x24c>)
 8081508:	2100      	movs	r1, #0
 808150a:	8828      	ldrh	r0, [r5, #0]
 808150c:	f009 fb09 	bl	808ab22 <digitalWrite>

    if (Wire.requestFrom(0x4A, 1) == 0)
 8081510:	f009 fb8a 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8081514:	2201      	movs	r2, #1
 8081516:	214a      	movs	r1, #74	; 0x4a
 8081518:	f009 fa0b 	bl	808a932 <_ZN7TwoWire11requestFromEhj>
 808151c:	bb48      	cbnz	r0, 8081572 <_Z10readAlpha2v+0x8a>
    {
        Serial.println("Couldn't communicate with LMP91000 2");
 808151e:	f009 f841 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081522:	4985      	ldr	r1, [pc, #532]	; (8081738 <_Z10readAlpha2v+0x250>)
 8081524:	f007 ffe5 	bl	80894f2 <_ZN5Print7printlnEPKc>
    float volt_half_Vref = 0;
 8081528:	2400      	movs	r4, #0
            Serial.print("half vref2 ads1");
            Serial.println(volt_half_Vref / 1000);
        }
    }

    if (lmp91000_2.read(LMP91000_STATUS_REG) == 0)
 808152a:	2100      	movs	r1, #0
 808152c:	4883      	ldr	r0, [pc, #524]	; (808173c <_Z10readAlpha2v+0x254>)
 808152e:	f004 fd64 	bl	8085ffa <_ZN8LMP910004readEh>
 8081532:	b930      	cbnz	r0, 8081542 <_Z10readAlpha2v+0x5a>
    {
        if (debugging_enabled)
 8081534:	683b      	ldr	r3, [r7, #0]
 8081536:	b123      	cbz	r3, 8081542 <_Z10readAlpha2v+0x5a>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 8081538:	f009 f834 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808153c:	4980      	ldr	r1, [pc, #512]	; (8081740 <_Z10readAlpha2v+0x258>)
 808153e:	f007 ffd8 	bl	80894f2 <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
 8081542:	f009 fb71 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8081546:	2201      	movs	r2, #1
 8081548:	214a      	movs	r1, #74	; 0x4a
 808154a:	f009 f9f2 	bl	808a932 <_ZN7TwoWire11requestFromEhj>
 808154e:	2800      	cmp	r0, #0
 8081550:	d139      	bne.n	80815c6 <_Z10readAlpha2v+0xde>
    {
        alpha2_ppmRounded = "-99";
 8081552:	4668      	mov	r0, sp
 8081554:	497b      	ldr	r1, [pc, #492]	; (8081744 <_Z10readAlpha2v+0x25c>)
 8081556:	f007 fe47 	bl	80891e8 <_ZN6StringaSEPKc>
    float alpha2_ppmraw = 0;
 808155a:	2400      	movs	r4, #0
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
    }

    digitalWrite(lmp91000_2_en, HIGH);  //disable
 808155c:	2101      	movs	r1, #1
 808155e:	8828      	ldrh	r0, [r5, #0]
 8081560:	f009 fadf 	bl	808ab22 <digitalWrite>
    String alpha2_ppmRounded = "";
 8081564:	4668      	mov	r0, sp
 8081566:	f007 fda3 	bl	80890b0 <_ZN6StringD1Ev>

    Serial.print("Volt1 Aux:");
    Serial.print(volt1_aux);
    Serial.println("Volts");*/
    return alpha2_ppmraw;
}
 808156a:	4620      	mov	r0, r4
 808156c:	b008      	add	sp, #32
 808156e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 8081572:	2103      	movs	r1, #3
 8081574:	4874      	ldr	r0, [pc, #464]	; (8081748 <_Z10readAlpha2v+0x260>)
 8081576:	f004 fe87 	bl	8086288 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 808157a:	f00a f975 	bl	808b868 <__aeabi_i2f>
 808157e:	4b73      	ldr	r3, [pc, #460]	; (808174c <_Z10readAlpha2v+0x264>)
 8081580:	6819      	ldr	r1, [r3, #0]
 8081582:	f00a f9c5 	bl	808b910 <__aeabi_fmul>
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8081586:	4972      	ldr	r1, [pc, #456]	; (8081750 <_Z10readAlpha2v+0x268>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081588:	4604      	mov	r4, r0
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 808158a:	f00a fa75 	bl	808ba78 <__aeabi_fdiv>
 808158e:	4606      	mov	r6, r0
 8081590:	f009 fd10 	bl	808afb4 <__aeabi_f2d>
 8081594:	2200      	movs	r2, #0
 8081596:	4b6f      	ldr	r3, [pc, #444]	; (8081754 <_Z10readAlpha2v+0x26c>)
 8081598:	f009 fbac 	bl	808acf4 <__aeabi_dsub>
 808159c:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 80815a0:	2200      	movs	r2, #0
 80815a2:	4649      	mov	r1, r9
 80815a4:	4b6c      	ldr	r3, [pc, #432]	; (8081758 <_Z10readAlpha2v+0x270>)
 80815a6:	f009 ffed 	bl	808b584 <__aeabi_dcmpgt>
 80815aa:	2800      	cmp	r0, #0
 80815ac:	d0bd      	beq.n	808152a <_Z10readAlpha2v+0x42>
            Serial.print("half vref2 ads1");
 80815ae:	f008 fff9 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80815b2:	496a      	ldr	r1, [pc, #424]	; (808175c <_Z10readAlpha2v+0x274>)
 80815b4:	f007 ff8a 	bl	80894cc <_ZN5Print5printEPKc>
            Serial.println(volt_half_Vref / 1000);
 80815b8:	f008 fff4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80815bc:	2202      	movs	r2, #2
 80815be:	4631      	mov	r1, r6
 80815c0:	f008 f896 	bl	80896f0 <_ZN5Print7printlnEfi>
 80815c4:	e7b1      	b.n	808152a <_Z10readAlpha2v+0x42>
    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
 80815c6:	2100      	movs	r1, #0
 80815c8:	485c      	ldr	r0, [pc, #368]	; (808173c <_Z10readAlpha2v+0x254>)
 80815ca:	f004 fd16 	bl	8085ffa <_ZN8LMP910004readEh>
 80815ce:	2800      	cmp	r0, #0
 80815d0:	d0bf      	beq.n	8081552 <_Z10readAlpha2v+0x6a>
 80815d2:	4620      	mov	r0, r4
 80815d4:	495e      	ldr	r1, [pc, #376]	; (8081750 <_Z10readAlpha2v+0x268>)
 80815d6:	f00a fa4f 	bl	808ba78 <__aeabi_fdiv>
 80815da:	f009 fceb 	bl	808afb4 <__aeabi_f2d>
 80815de:	2200      	movs	r2, #0
 80815e0:	4b5c      	ldr	r3, [pc, #368]	; (8081754 <_Z10readAlpha2v+0x26c>)
 80815e2:	f009 fb87 	bl	808acf4 <__aeabi_dsub>
 80815e6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80815ea:	2200      	movs	r2, #0
 80815ec:	4639      	mov	r1, r7
 80815ee:	4b5a      	ldr	r3, [pc, #360]	; (8081758 <_Z10readAlpha2v+0x270>)
 80815f0:	f009 ffc8 	bl	808b584 <__aeabi_dcmpgt>
 80815f4:	4604      	mov	r4, r0
 80815f6:	2800      	cmp	r0, #0
 80815f8:	d1ab      	bne.n	8081552 <_Z10readAlpha2v+0x6a>
 80815fa:	270a      	movs	r7, #10
 80815fc:	4680      	mov	r8, r0
 80815fe:	4681      	mov	r9, r0
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081600:	4e51      	ldr	r6, [pc, #324]	; (8081748 <_Z10readAlpha2v+0x260>)
 8081602:	2100      	movs	r1, #0
 8081604:	4630      	mov	r0, r6
 8081606:	f004 fe3f 	bl	8086288 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 808160a:	2101      	movs	r1, #1
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 808160c:	4481      	add	r9, r0
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 808160e:	4630      	mov	r0, r6
 8081610:	f004 fe3a 	bl	8086288 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081614:	2102      	movs	r1, #2
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081616:	4480      	add	r8, r0
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081618:	4630      	mov	r0, r6
 808161a:	f004 fe35 	bl	8086288 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 808161e:	2103      	movs	r1, #3
 8081620:	4630      	mov	r0, r6
 8081622:	f004 fe31 	bl	8086288 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081626:	3f01      	subs	r7, #1
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081628:	4404      	add	r4, r0
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 808162a:	d1ea      	bne.n	8081602 <_Z10readAlpha2v+0x11a>
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 808162c:	f04f 0a0a 	mov.w	sl, #10
        volt0_gas = A0_gas * ads_bitmv;
 8081630:	4b46      	ldr	r3, [pc, #280]	; (808174c <_Z10readAlpha2v+0x264>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081632:	fbb4 f0fa 	udiv	r0, r4, sl
        volt0_gas = A0_gas * ads_bitmv;
 8081636:	681f      	ldr	r7, [r3, #0]
        volt_half_Vref = half_Vref * ads_bitmv;
 8081638:	f00a f916 	bl	808b868 <__aeabi_i2f>
 808163c:	4639      	mov	r1, r7
 808163e:	f00a f967 	bl	808b910 <__aeabi_fmul>
 8081642:	4604      	mov	r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 8081644:	fbb9 f0fa 	udiv	r0, r9, sl
 8081648:	f00a f90e 	bl	808b868 <__aeabi_i2f>
 808164c:	4639      	mov	r1, r7
 808164e:	f00a f95f 	bl	808b910 <__aeabi_fmul>
 8081652:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 8081654:	4620      	mov	r0, r4
 8081656:	f00a f851 	bl	808b6fc <__aeabi_fsub>
 808165a:	4941      	ldr	r1, [pc, #260]	; (8081760 <_Z10readAlpha2v+0x278>)
 808165c:	f00a fa0c 	bl	808ba78 <__aeabi_fdiv>
 8081660:	4606      	mov	r6, r0
        volt1_aux = A1_aux * ads_bitmv;
 8081662:	fbb8 f0fa 	udiv	r0, r8, sl
 8081666:	f00a f8ff 	bl	808b868 <__aeabi_i2f>
 808166a:	4639      	mov	r1, r7
 808166c:	f00a f950 	bl	808b910 <__aeabi_fmul>
 8081670:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 8081672:	4620      	mov	r0, r4
 8081674:	f00a f842 	bl	808b6fc <__aeabi_fsub>
 8081678:	493a      	ldr	r1, [pc, #232]	; (8081764 <_Z10readAlpha2v+0x27c>)
 808167a:	f00a f9fd 	bl	808ba78 <__aeabi_fdiv>
 808167e:	4604      	mov	r4, r0
        if (readTemperature() <= 15)
 8081680:	f7ff fe6e 	bl	8081360 <_Z15readTemperaturev>
 8081684:	4938      	ldr	r1, [pc, #224]	; (8081768 <_Z10readAlpha2v+0x280>)
 8081686:	f00a faeb 	bl	808bc60 <__aeabi_fcmple>
 808168a:	b1d0      	cbz	r0, 80816c2 <_Z10readAlpha2v+0x1da>
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 808168c:	4621      	mov	r1, r4
 808168e:	4630      	mov	r0, r6
 8081690:	f00a f834 	bl	808b6fc <__aeabi_fsub>
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081694:	f009 fc8e 	bl	808afb4 <__aeabi_f2d>
 8081698:	a31f      	add	r3, pc, #124	; (adr r3, 8081718 <_Z10readAlpha2v+0x230>)
 808169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808169e:	f009 fe0b 	bl	808b2b8 <__aeabi_ddiv>
 80816a2:	f009 ffd7 	bl	808b654 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 80816a6:	2202      	movs	r2, #2
 80816a8:	4601      	mov	r1, r0
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 80816aa:	4604      	mov	r4, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 80816ac:	a804      	add	r0, sp, #16
 80816ae:	f007 fde3 	bl	8089278 <_ZN6StringC1Efi>
 80816b2:	4668      	mov	r0, sp
 80816b4:	a904      	add	r1, sp, #16
 80816b6:	f007 fd8f 	bl	80891d8 <_ZN6StringaSEOS_>
 80816ba:	a804      	add	r0, sp, #16
 80816bc:	f007 fcf8 	bl	80890b0 <_ZN6StringD1Ev>
 80816c0:	e74c      	b.n	808155c <_Z10readAlpha2v+0x74>
        else if (readTemperature() <= 25)
 80816c2:	f7ff fe4d 	bl	8081360 <_Z15readTemperaturev>
 80816c6:	4929      	ldr	r1, [pc, #164]	; (808176c <_Z10readAlpha2v+0x284>)
 80816c8:	f00a faca 	bl	808bc60 <__aeabi_fcmple>
 80816cc:	b120      	cbz	r0, 80816d8 <_Z10readAlpha2v+0x1f0>
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 80816ce:	4621      	mov	r1, r4
 80816d0:	4630      	mov	r0, r6
 80816d2:	f00a f815 	bl	808b700 <__addsf3>
 80816d6:	e7dd      	b.n	8081694 <_Z10readAlpha2v+0x1ac>
        else if (readTemperature() > 25)
 80816d8:	f7ff fe42 	bl	8081360 <_Z15readTemperaturev>
 80816dc:	4923      	ldr	r1, [pc, #140]	; (808176c <_Z10readAlpha2v+0x284>)
 80816de:	f00a fad3 	bl	808bc88 <__aeabi_fcmpgt>
 80816e2:	b1a8      	cbz	r0, 8081710 <_Z10readAlpha2v+0x228>
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 80816e4:	4620      	mov	r0, r4
 80816e6:	f009 fc65 	bl	808afb4 <__aeabi_f2d>
 80816ea:	a30d      	add	r3, pc, #52	; (adr r3, 8081720 <_Z10readAlpha2v+0x238>)
 80816ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80816f0:	f009 fcb8 	bl	808b064 <__aeabi_dmul>
 80816f4:	4680      	mov	r8, r0
 80816f6:	4630      	mov	r0, r6
 80816f8:	4689      	mov	r9, r1
 80816fa:	f009 fc5b 	bl	808afb4 <__aeabi_f2d>
 80816fe:	4602      	mov	r2, r0
 8081700:	460b      	mov	r3, r1
 8081702:	4640      	mov	r0, r8
 8081704:	4649      	mov	r1, r9
 8081706:	f009 faf7 	bl	808acf8 <__adddf3>
 808170a:	f009 ffa3 	bl	808b654 <__aeabi_d2f>
 808170e:	e7c1      	b.n	8081694 <_Z10readAlpha2v+0x1ac>
    float correctedCurrent = 0;
 8081710:	2000      	movs	r0, #0
 8081712:	e7bf      	b.n	8081694 <_Z10readAlpha2v+0x1ac>
 8081714:	f3af 8000 	nop.w
 8081718:	d4fdf3b6 	.word	0xd4fdf3b6
 808171c:	3fd6e978 	.word	0x3fd6e978
 8081720:	851eb852 	.word	0x851eb852
 8081724:	3fe851eb 	.word	0x3fe851eb
 8081728:	200005e8 	.word	0x200005e8
 808172c:	080900b9 	.word	0x080900b9
 8081730:	0808de43 	.word	0x0808de43
 8081734:	200000c4 	.word	0x200000c4
 8081738:	0808de59 	.word	0x0808de59
 808173c:	200006ba 	.word	0x200006ba
 8081740:	0808de8e 	.word	0x0808de8e
 8081744:	0808deb5 	.word	0x0808deb5
 8081748:	20000556 	.word	0x20000556
 808174c:	20000084 	.word	0x20000084
 8081750:	447a0000 	.word	0x447a0000
 8081754:	3ff40000 	.word	0x3ff40000
 8081758:	3fe00000 	.word	0x3fe00000
 808175c:	0808de7e 	.word	0x0808de7e
 8081760:	c2f00000 	.word	0xc2f00000
 8081764:	c3160000 	.word	0xc3160000
 8081768:	41700000 	.word	0x41700000
 808176c:	41c80000 	.word	0x41c80000

08081770 <_Z12writeLogFile6String>:

void writeLogFile(String data)
{
 8081770:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 8081772:	491e      	ldr	r1, [pc, #120]	; (80817ec <_Z12writeLogFile6String+0x7c>)
 8081774:	4604      	mov	r4, r0
 8081776:	b085      	sub	sp, #20
 8081778:	2302      	movs	r3, #2
 808177a:	220c      	movs	r2, #12
 808177c:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8081780:	f7ff fa26 	bl	8080bd0 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS))
 8081784:	b360      	cbz	r0, 80817e0 <_Z12writeLogFile6String+0x70>
    {
        Serial.println("Writing data to log file.");
 8081786:	f008 ff0d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808178a:	4919      	ldr	r1, [pc, #100]	; (80817f0 <_Z12writeLogFile6String+0x80>)
 808178c:	f007 feb1 	bl	80894f2 <_ZN5Print7printlnEPKc>
    return open(m_cwd, path, oflag);
 8081790:	4a18      	ldr	r2, [pc, #96]	; (80817f4 <_Z12writeLogFile6String+0x84>)
 8081792:	4919      	ldr	r1, [pc, #100]	; (80817f8 <_Z12writeLogFile6String+0x88>)
        log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
        if (log_file_started == 0)
 8081794:	4d19      	ldr	r5, [pc, #100]	; (80817fc <_Z12writeLogFile6String+0x8c>)
 8081796:	2346      	movs	r3, #70	; 0x46
 8081798:	6812      	ldr	r2, [r2, #0]
 808179a:	6809      	ldr	r1, [r1, #0]
 808179c:	4818      	ldr	r0, [pc, #96]	; (8081800 <_Z12writeLogFile6String+0x90>)
 808179e:	f005 ffb6 	bl	808770e <_ZN7FatFile4openEPS_PKch>
 80817a2:	682b      	ldr	r3, [r5, #0]
 80817a4:	b99b      	cbnz	r3, 80817ce <_Z12writeLogFile6String+0x5e>
        {
            log_file.println("File Start timestamp: ");
 80817a6:	4917      	ldr	r1, [pc, #92]	; (8081804 <_Z12writeLogFile6String+0x94>)
 80817a8:	4817      	ldr	r0, [pc, #92]	; (8081808 <_Z12writeLogFile6String+0x98>)
 80817aa:	f007 fea2 	bl	80894f2 <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80817ae:	f008 f9b4 	bl	8089b1a <_ZN9TimeClass3nowEv>
 80817b2:	17c3      	asrs	r3, r0, #31
 80817b4:	4602      	mov	r2, r0
 80817b6:	4668      	mov	r0, sp
 80817b8:	f008 f8ac 	bl	8089914 <_ZN9TimeClass7timeStrEx>
            log_file.println(Time.timeStr());
 80817bc:	9900      	ldr	r1, [sp, #0]
 80817be:	4812      	ldr	r0, [pc, #72]	; (8081808 <_Z12writeLogFile6String+0x98>)
 80817c0:	f007 fe97 	bl	80894f2 <_ZN5Print7printlnEPKc>
 80817c4:	4668      	mov	r0, sp
 80817c6:	f007 fc73 	bl	80890b0 <_ZN6StringD1Ev>
            log_file_started = 1;
 80817ca:	2301      	movs	r3, #1
 80817cc:	602b      	str	r3, [r5, #0]
        }
        log_file.println(data);
 80817ce:	6821      	ldr	r1, [r4, #0]
 80817d0:	480d      	ldr	r0, [pc, #52]	; (8081808 <_Z12writeLogFile6String+0x98>)
 80817d2:	f007 fe8e 	bl	80894f2 <_ZN5Print7printlnEPKc>

        log_file.close();
 80817d6:	480a      	ldr	r0, [pc, #40]	; (8081800 <_Z12writeLogFile6String+0x90>)
 80817d8:	f005 ff92 	bl	8087700 <_ZN7FatFile5closeEv>
    }
    else
    {
        Serial.println("Unable to write to log file");
    }
}
 80817dc:	b005      	add	sp, #20
 80817de:	bd30      	pop	{r4, r5, pc}
        Serial.println("Unable to write to log file");
 80817e0:	f008 fee0 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80817e4:	4909      	ldr	r1, [pc, #36]	; (808180c <_Z12writeLogFile6String+0x9c>)
 80817e6:	f007 fe84 	bl	80894f2 <_ZN5Print7printlnEPKc>
}
 80817ea:	e7f7      	b.n	80817dc <_Z12writeLogFile6String+0x6c>
 80817ec:	20000c1c 	.word	0x20000c1c
 80817f0:	0808deb9 	.word	0x0808deb9
 80817f4:	20000700 	.word	0x20000700
 80817f8:	20000cbc 	.word	0x20000cbc
 80817fc:	2000073c 	.word	0x2000073c
 8081800:	20000718 	.word	0x20000718
 8081804:	0808ded3 	.word	0x0808ded3
 8081808:	20000710 	.word	0x20000710
 808180c:	0808deea 	.word	0x0808deea

08081810 <_Z13readGpsStreamv>:
{
 8081810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081814:	b08c      	sub	sp, #48	; 0x30
    String gps_sentence = "init";
 8081816:	4668      	mov	r0, sp
 8081818:	49b9      	ldr	r1, [pc, #740]	; (8081b00 <_Z13readGpsStreamv+0x2f0>)
 808181a:	f007 fc93 	bl	8089144 <_ZN6StringC1EPKc>
        if (prefix_string.equals("GGA")) 
 808181e:	4fb9      	ldr	r7, [pc, #740]	; (8081b04 <_Z13readGpsStreamv+0x2f4>)
        else if (gps_sentence.equals("init")) 
 8081820:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8081b00 <_Z13readGpsStreamv+0x2f0>
            Serial.println("Error reading GPS");
 8081824:	4eb8      	ldr	r6, [pc, #736]	; (8081b08 <_Z13readGpsStreamv+0x2f8>)
        gps_sentence = Serial5.readStringUntil('\r');
 8081826:	f7ff f997 	bl	8080b58 <_Z22__fetch_global_Serial5v>
 808182a:	220d      	movs	r2, #13
 808182c:	4601      	mov	r1, r0
 808182e:	a808      	add	r0, sp, #32
 8081830:	f007 ffc8 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
 8081834:	a908      	add	r1, sp, #32
 8081836:	4668      	mov	r0, sp
 8081838:	f007 fcce 	bl	80891d8 <_ZN6StringaSEOS_>
 808183c:	a808      	add	r0, sp, #32
 808183e:	f007 fc37 	bl	80890b0 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4, 7);
 8081842:	2307      	movs	r3, #7
 8081844:	2204      	movs	r2, #4
 8081846:	4669      	mov	r1, sp
 8081848:	a804      	add	r0, sp, #16
 808184a:	f007 fdcf 	bl	80893ec <_ZNK6String9substringEjj>
        if (prefix_string.equals("GGA")) 
 808184e:	4639      	mov	r1, r7
 8081850:	a804      	add	r0, sp, #16
 8081852:	f007 fd95 	bl	8089380 <_ZNK6String6equalsEPKc>
 8081856:	4605      	mov	r5, r0
 8081858:	bb68      	cbnz	r0, 80818b6 <_Z13readGpsStreamv+0xa6>
        else if (gps_sentence.equals("init")) 
 808185a:	4641      	mov	r1, r8
 808185c:	4668      	mov	r0, sp
 808185e:	f007 fd8f 	bl	8089380 <_ZNK6String6equalsEPKc>
 8081862:	4604      	mov	r4, r0
 8081864:	b350      	cbz	r0, 80818bc <_Z13readGpsStreamv+0xac>
            Serial.println("Error reading GPS");
 8081866:	f008 fe9d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808186a:	4631      	mov	r1, r6
 808186c:	f007 fe41 	bl	80894f2 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081870:	4631      	mov	r1, r6
 8081872:	a808      	add	r0, sp, #32
 8081874:	f007 fc66 	bl	8089144 <_ZN6StringC1EPKc>
 8081878:	a808      	add	r0, sp, #32
 808187a:	f7ff ff79 	bl	8081770 <_Z12writeLogFile6String>
 808187e:	a808      	add	r0, sp, #32
 8081880:	f007 fc16 	bl	80890b0 <_ZN6StringD1Ev>
            error = 1;
 8081884:	2401      	movs	r4, #1
        String prefix_string = gps_sentence.substring(4, 7);
 8081886:	a804      	add	r0, sp, #16
 8081888:	f007 fc12 	bl	80890b0 <_ZN6StringD1Ev>
    while (!stringFound && !error) 
 808188c:	b15d      	cbz	r5, 80818a6 <_Z13readGpsStreamv+0x96>
        String tempStr;
 808188e:	f04f 0800 	mov.w	r8, #0
 8081892:	499e      	ldr	r1, [pc, #632]	; (8081b0c <_Z13readGpsStreamv+0x2fc>)
 8081894:	a804      	add	r0, sp, #16
 8081896:	f007 fc55 	bl	8089144 <_ZN6StringC1EPKc>
        comma_counter = 0;
 808189a:	4647      	mov	r7, r8
                    Serial.printf("BAD index in readGpsStream\n");
 808189c:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8081b28 <_Z13readGpsStreamv+0x318>
                        gps.set_horizontalDilution(tempStr);
 80818a0:	4e9b      	ldr	r6, [pc, #620]	; (8081b10 <_Z13readGpsStreamv+0x300>)
                        status_word.status_int &= 0xFFF3;
 80818a2:	4d9c      	ldr	r5, [pc, #624]	; (8081b14 <_Z13readGpsStreamv+0x304>)
 80818a4:	e032      	b.n	808190c <_Z13readGpsStreamv+0xfc>
    while (!stringFound && !error) 
 80818a6:	2c00      	cmp	r4, #0
 80818a8:	d0bd      	beq.n	8081826 <_Z13readGpsStreamv+0x16>
    String gps_sentence = "init";
 80818aa:	4668      	mov	r0, sp
 80818ac:	f007 fc00 	bl	80890b0 <_ZN6StringD1Ev>
}
 80818b0:	b00c      	add	sp, #48	; 0x30
 80818b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80818b6:	2400      	movs	r4, #0
            stringFound = 1;
 80818b8:	2501      	movs	r5, #1
 80818ba:	e7e4      	b.n	8081886 <_Z13readGpsStreamv+0x76>
 80818bc:	4605      	mov	r5, r0
 80818be:	e7e2      	b.n	8081886 <_Z13readGpsStreamv+0x76>
                    if (gps_sentence.charAt(a + 1) != ',')
 80818c0:	f104 0a01 	add.w	sl, r4, #1
 80818c4:	4651      	mov	r1, sl
 80818c6:	4668      	mov	r0, sp
 80818c8:	f007 fd75 	bl	80893b6 <_ZNK6String6charAtEj>
 80818cc:	282c      	cmp	r0, #44	; 0x2c
 80818ce:	d01a      	beq.n	8081906 <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 80818d0:	f104 030b 	add.w	r3, r4, #11
 80818d4:	4652      	mov	r2, sl
 80818d6:	4669      	mov	r1, sp
 80818d8:	a808      	add	r0, sp, #32
 80818da:	f007 fd87 	bl	80893ec <_ZNK6String9substringEjj>
 80818de:	a908      	add	r1, sp, #32
 80818e0:	a804      	add	r0, sp, #16
 80818e2:	f007 fc79 	bl	80891d8 <_ZN6StringaSEOS_>
 80818e6:	a808      	add	r0, sp, #32
 80818e8:	f007 fbe2 	bl	80890b0 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 80818ec:	4b8a      	ldr	r3, [pc, #552]	; (8081b18 <_Z13readGpsStreamv+0x308>)
 80818ee:	681b      	ldr	r3, [r3, #0]
 80818f0:	b14b      	cbz	r3, 8081906 <_Z13readGpsStreamv+0xf6>
                            Serial.print("GPS utc string: ");
 80818f2:	f008 fe57 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80818f6:	4989      	ldr	r1, [pc, #548]	; (8081b1c <_Z13readGpsStreamv+0x30c>)
 80818f8:	f007 fde8 	bl	80894cc <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 80818fc:	f008 fe52 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081900:	9904      	ldr	r1, [sp, #16]
 8081902:	f007 fdf6 	bl	80894f2 <_ZN5Print7printlnEPKc>
                comma_counter++;
 8081906:	3701      	adds	r7, #1
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 8081908:	f108 0801 	add.w	r8, r8, #1
 808190c:	9b02      	ldr	r3, [sp, #8]
 808190e:	fa1f f488 	uxth.w	r4, r8
 8081912:	42a3      	cmp	r3, r4
 8081914:	f240 80f0 	bls.w	8081af8 <_Z13readGpsStreamv+0x2e8>
            if (gps_sentence.charAt(a) == ',')
 8081918:	4621      	mov	r1, r4
 808191a:	4668      	mov	r0, sp
 808191c:	f007 fd4b 	bl	80893b6 <_ZNK6String6charAtEj>
 8081920:	282c      	cmp	r0, #44	; 0x2c
 8081922:	d1f1      	bne.n	8081908 <_Z13readGpsStreamv+0xf8>
                switch (comma_counter)
 8081924:	2f07      	cmp	r7, #7
 8081926:	f200 80e1 	bhi.w	8081aec <_Z13readGpsStreamv+0x2dc>
 808192a:	a301      	add	r3, pc, #4	; (adr r3, 8081930 <_Z13readGpsStreamv+0x120>)
 808192c:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8081930:	080818c1 	.word	0x080818c1
 8081934:	08081951 	.word	0x08081951
 8081938:	08081aed 	.word	0x08081aed
 808193c:	080819c3 	.word	0x080819c3
 8081940:	08081aed 	.word	0x08081aed
 8081944:	08081aed 	.word	0x08081aed
 8081948:	08081a2d 	.word	0x08081a2d
 808194c:	08081a6b 	.word	0x08081a6b
                    if (gps_sentence.charAt(a + 1) != ',')
 8081950:	f104 0a01 	add.w	sl, r4, #1
 8081954:	4651      	mov	r1, sl
 8081956:	4668      	mov	r0, sp
 8081958:	f007 fd2d 	bl	80893b6 <_ZNK6String6charAtEj>
 808195c:	282c      	cmp	r0, #44	; 0x2c
 808195e:	d0d2      	beq.n	8081906 <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 8081960:	f104 030a 	add.w	r3, r4, #10
 8081964:	4652      	mov	r2, sl
 8081966:	4669      	mov	r1, sp
 8081968:	a808      	add	r0, sp, #32
 808196a:	f007 fd3f 	bl	80893ec <_ZNK6String9substringEjj>
 808196e:	a908      	add	r1, sp, #32
 8081970:	a804      	add	r0, sp, #16
 8081972:	f007 fc31 	bl	80891d8 <_ZN6StringaSEOS_>
 8081976:	a808      	add	r0, sp, #32
 8081978:	f007 fb9a 	bl	80890b0 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 808197c:	4b66      	ldr	r3, [pc, #408]	; (8081b18 <_Z13readGpsStreamv+0x308>)
 808197e:	681b      	ldr	r3, [r3, #0]
 8081980:	b14b      	cbz	r3, 8081996 <_Z13readGpsStreamv+0x186>
                            Serial.print("Latitude string: ");
 8081982:	f008 fe0f 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081986:	4966      	ldr	r1, [pc, #408]	; (8081b20 <_Z13readGpsStreamv+0x310>)
 8081988:	f007 fda0 	bl	80894cc <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 808198c:	f008 fe0a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081990:	9904      	ldr	r1, [sp, #16]
 8081992:	f007 fd9b 	bl	80894cc <_ZN5Print5printEPKc>
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 8081996:	a904      	add	r1, sp, #16
 8081998:	a808      	add	r0, sp, #32
 808199a:	f007 fc12 	bl	80891c2 <_ZN6StringC1ERKS_>
 808199e:	f104 010c 	add.w	r1, r4, #12
 80819a2:	4668      	mov	r0, sp
 80819a4:	f007 fd07 	bl	80893b6 <_ZNK6String6charAtEj>
 80819a8:	a908      	add	r1, sp, #32
 80819aa:	4602      	mov	r2, r0
 80819ac:	4630      	mov	r0, r6
 80819ae:	f004 fc95 	bl	80862dc <_ZN3GPS15set_lat_decimalE6Stringc>
 80819b2:	a808      	add	r0, sp, #32
 80819b4:	f007 fb7c 	bl	80890b0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 80819b8:	882b      	ldrh	r3, [r5, #0]
 80819ba:	f023 0308 	bic.w	r3, r3, #8
                            status_word.status_int |= 0x000C;
 80819be:	802b      	strh	r3, [r5, #0]
 80819c0:	e7a1      	b.n	8081906 <_Z13readGpsStreamv+0xf6>
                    if (gps_sentence.charAt(a + 1) != ',')
 80819c2:	f104 0a01 	add.w	sl, r4, #1
 80819c6:	4651      	mov	r1, sl
 80819c8:	4668      	mov	r0, sp
 80819ca:	f007 fcf4 	bl	80893b6 <_ZNK6String6charAtEj>
 80819ce:	282c      	cmp	r0, #44	; 0x2c
 80819d0:	d099      	beq.n	8081906 <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 80819d2:	f104 030b 	add.w	r3, r4, #11
 80819d6:	4652      	mov	r2, sl
 80819d8:	4669      	mov	r1, sp
 80819da:	a808      	add	r0, sp, #32
 80819dc:	f007 fd06 	bl	80893ec <_ZNK6String9substringEjj>
 80819e0:	a908      	add	r1, sp, #32
 80819e2:	a804      	add	r0, sp, #16
 80819e4:	f007 fbf8 	bl	80891d8 <_ZN6StringaSEOS_>
 80819e8:	a808      	add	r0, sp, #32
 80819ea:	f007 fb61 	bl	80890b0 <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 80819ee:	4b4a      	ldr	r3, [pc, #296]	; (8081b18 <_Z13readGpsStreamv+0x308>)
 80819f0:	681b      	ldr	r3, [r3, #0]
 80819f2:	b14b      	cbz	r3, 8081a08 <_Z13readGpsStreamv+0x1f8>
                            Serial.print("longitude string: ");
 80819f4:	f008 fdd6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80819f8:	494a      	ldr	r1, [pc, #296]	; (8081b24 <_Z13readGpsStreamv+0x314>)
 80819fa:	f007 fd67 	bl	80894cc <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 80819fe:	f008 fdd1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081a02:	9904      	ldr	r1, [sp, #16]
 8081a04:	f007 fd62 	bl	80894cc <_ZN5Print5printEPKc>
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 8081a08:	a904      	add	r1, sp, #16
 8081a0a:	a808      	add	r0, sp, #32
 8081a0c:	f007 fbd9 	bl	80891c2 <_ZN6StringC1ERKS_>
 8081a10:	f104 010d 	add.w	r1, r4, #13
 8081a14:	4668      	mov	r0, sp
 8081a16:	f007 fcce 	bl	80893b6 <_ZNK6String6charAtEj>
 8081a1a:	a908      	add	r1, sp, #32
 8081a1c:	4602      	mov	r2, r0
 8081a1e:	4630      	mov	r0, r6
 8081a20:	f004 fca4 	bl	808636c <_ZN3GPS16set_long_decimalE6Stringc>
                        gps.set_satellites(tempStr);
 8081a24:	a808      	add	r0, sp, #32
 8081a26:	f007 fb43 	bl	80890b0 <_ZN6StringD1Ev>
 8081a2a:	e76c      	b.n	8081906 <_Z13readGpsStreamv+0xf6>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081a2c:	f104 0a01 	add.w	sl, r4, #1
 8081a30:	4651      	mov	r1, sl
 8081a32:	4668      	mov	r0, sp
 8081a34:	f007 fcbf 	bl	80893b6 <_ZNK6String6charAtEj>
 8081a38:	282c      	cmp	r0, #44	; 0x2c
 8081a3a:	f43f af64 	beq.w	8081906 <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081a3e:	4652      	mov	r2, sl
 8081a40:	1ce3      	adds	r3, r4, #3
 8081a42:	4669      	mov	r1, sp
 8081a44:	a808      	add	r0, sp, #32
 8081a46:	f007 fcd1 	bl	80893ec <_ZNK6String9substringEjj>
 8081a4a:	a908      	add	r1, sp, #32
 8081a4c:	a804      	add	r0, sp, #16
 8081a4e:	f007 fbc3 	bl	80891d8 <_ZN6StringaSEOS_>
 8081a52:	a808      	add	r0, sp, #32
 8081a54:	f007 fb2c 	bl	80890b0 <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 8081a58:	a904      	add	r1, sp, #16
 8081a5a:	a808      	add	r0, sp, #32
 8081a5c:	f007 fbb1 	bl	80891c2 <_ZN6StringC1ERKS_>
 8081a60:	4630      	mov	r0, r6
 8081a62:	a908      	add	r1, sp, #32
 8081a64:	f004 fcc8 	bl	80863f8 <_ZN3GPS14set_satellitesE6String>
 8081a68:	e7dc      	b.n	8081a24 <_Z13readGpsStreamv+0x214>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081a6a:	f104 0a01 	add.w	sl, r4, #1
 8081a6e:	4651      	mov	r1, sl
 8081a70:	4668      	mov	r0, sp
 8081a72:	f007 fca0 	bl	80893b6 <_ZNK6String6charAtEj>
 8081a76:	282c      	cmp	r0, #44	; 0x2c
 8081a78:	f43f af45 	beq.w	8081906 <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081a7c:	4652      	mov	r2, sl
 8081a7e:	1ce3      	adds	r3, r4, #3
 8081a80:	4669      	mov	r1, sp
 8081a82:	a808      	add	r0, sp, #32
 8081a84:	f007 fcb2 	bl	80893ec <_ZNK6String9substringEjj>
 8081a88:	a908      	add	r1, sp, #32
 8081a8a:	a804      	add	r0, sp, #16
 8081a8c:	f007 fba4 	bl	80891d8 <_ZN6StringaSEOS_>
 8081a90:	a808      	add	r0, sp, #32
 8081a92:	f007 fb0d 	bl	80890b0 <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 8081a96:	a904      	add	r1, sp, #16
 8081a98:	a808      	add	r0, sp, #32
 8081a9a:	f007 fb92 	bl	80891c2 <_ZN6StringC1ERKS_>
 8081a9e:	a908      	add	r1, sp, #32
 8081aa0:	4630      	mov	r0, r6
 8081aa2:	f004 fcb1 	bl	8086408 <_ZN3GPS22set_horizontalDilutionE6String>
 8081aa6:	a808      	add	r0, sp, #32
 8081aa8:	f007 fb02 	bl	80890b0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081aac:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081aae:	4630      	mov	r0, r6
                        status_word.status_int &= 0xFFF3;
 8081ab0:	f023 030c 	bic.w	r3, r3, #12
 8081ab4:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081ab6:	f004 fcbd 	bl	8086434 <_ZN3GPS22get_horizontalDilutionEv>
 8081aba:	2801      	cmp	r0, #1
 8081abc:	dc03      	bgt.n	8081ac6 <_Z13readGpsStreamv+0x2b6>
                            status_word.status_int |= 0x000C;
 8081abe:	882b      	ldrh	r3, [r5, #0]
 8081ac0:	f043 030c 	orr.w	r3, r3, #12
 8081ac4:	e77b      	b.n	80819be <_Z13readGpsStreamv+0x1ae>
                        else if (gps.get_horizontalDilution() < 5)
 8081ac6:	4630      	mov	r0, r6
 8081ac8:	f004 fcb4 	bl	8086434 <_ZN3GPS22get_horizontalDilutionEv>
 8081acc:	2804      	cmp	r0, #4
 8081ace:	dc03      	bgt.n	8081ad8 <_Z13readGpsStreamv+0x2c8>
                            status_word.status_int |= 0x0008;
 8081ad0:	882b      	ldrh	r3, [r5, #0]
 8081ad2:	f043 0308 	orr.w	r3, r3, #8
 8081ad6:	e772      	b.n	80819be <_Z13readGpsStreamv+0x1ae>
                        else if (gps.get_horizontalDilution() < 20)
 8081ad8:	4630      	mov	r0, r6
 8081ada:	f004 fcab 	bl	8086434 <_ZN3GPS22get_horizontalDilutionEv>
 8081ade:	2813      	cmp	r0, #19
 8081ae0:	f73f af11 	bgt.w	8081906 <_Z13readGpsStreamv+0xf6>
                            status_word.status_int |= 0x0004;
 8081ae4:	882b      	ldrh	r3, [r5, #0]
 8081ae6:	f043 0304 	orr.w	r3, r3, #4
 8081aea:	e768      	b.n	80819be <_Z13readGpsStreamv+0x1ae>
                    Serial.printf("BAD index in readGpsStream\n");
 8081aec:	f008 fd5a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081af0:	4649      	mov	r1, r9
 8081af2:	f7fe ffb5 	bl	8080a60 <_ZN5Print6printfEPKcz>
                    break;
 8081af6:	e706      	b.n	8081906 <_Z13readGpsStreamv+0xf6>
        String tempStr;
 8081af8:	a804      	add	r0, sp, #16
 8081afa:	f007 fad9 	bl	80890b0 <_ZN6StringD1Ev>
 8081afe:	e6d4      	b.n	80818aa <_Z13readGpsStreamv+0x9a>
 8081b00:	0808df06 	.word	0x0808df06
 8081b04:	0808df0b 	.word	0x0808df0b
 8081b08:	0808df0f 	.word	0x0808df0f
 8081b0c:	080900b9 	.word	0x080900b9
 8081b10:	20000670 	.word	0x20000670
 8081b14:	20000c48 	.word	0x20000c48
 8081b18:	200005e8 	.word	0x200005e8
 8081b1c:	0808df21 	.word	0x0808df21
 8081b20:	0808df32 	.word	0x0808df32
 8081b24:	0808df44 	.word	0x0808df44
 8081b28:	0808df57 	.word	0x0808df57

08081b2c <_Z17readGpsStreamDatev>:
{
 8081b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081b30:	b090      	sub	sp, #64	; 0x40
    String gps_sentence = "init";
 8081b32:	49b6      	ldr	r1, [pc, #728]	; (8081e0c <_Z17readGpsStreamDatev+0x2e0>)
 8081b34:	4668      	mov	r0, sp
 8081b36:	f007 fb05 	bl	8089144 <_ZN6StringC1EPKc>
    String prefix_string;
 8081b3a:	49b5      	ldr	r1, [pc, #724]	; (8081e10 <_Z17readGpsStreamDatev+0x2e4>)
 8081b3c:	a804      	add	r0, sp, #16
 8081b3e:	f007 fb01 	bl	8089144 <_ZN6StringC1EPKc>
        if (prefix_string.equals("RMC"))
 8081b42:	4db4      	ldr	r5, [pc, #720]	; (8081e14 <_Z17readGpsStreamDatev+0x2e8>)
        else if (gps_sentence.equals("init"))
 8081b44:	4cb1      	ldr	r4, [pc, #708]	; (8081e0c <_Z17readGpsStreamDatev+0x2e0>)
        gps_sentence = Serial5.readStringUntil('\r');
 8081b46:	f7ff f807 	bl	8080b58 <_Z22__fetch_global_Serial5v>
 8081b4a:	220d      	movs	r2, #13
 8081b4c:	4601      	mov	r1, r0
 8081b4e:	a80c      	add	r0, sp, #48	; 0x30
 8081b50:	f007 fe38 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
 8081b54:	a90c      	add	r1, sp, #48	; 0x30
 8081b56:	4668      	mov	r0, sp
 8081b58:	f007 fb3e 	bl	80891d8 <_ZN6StringaSEOS_>
 8081b5c:	a80c      	add	r0, sp, #48	; 0x30
 8081b5e:	f007 faa7 	bl	80890b0 <_ZN6StringD1Ev>
        prefix_string = gps_sentence.substring(4, 7);
 8081b62:	2307      	movs	r3, #7
 8081b64:	2204      	movs	r2, #4
 8081b66:	4669      	mov	r1, sp
 8081b68:	a80c      	add	r0, sp, #48	; 0x30
 8081b6a:	f007 fc3f 	bl	80893ec <_ZNK6String9substringEjj>
 8081b6e:	a90c      	add	r1, sp, #48	; 0x30
 8081b70:	a804      	add	r0, sp, #16
 8081b72:	f007 fb31 	bl	80891d8 <_ZN6StringaSEOS_>
 8081b76:	a80c      	add	r0, sp, #48	; 0x30
 8081b78:	f007 fa9a 	bl	80890b0 <_ZN6StringD1Ev>
        if (prefix_string.equals("RMC"))
 8081b7c:	4629      	mov	r1, r5
 8081b7e:	a804      	add	r0, sp, #16
 8081b80:	f007 fbfe 	bl	8089380 <_ZNK6String6equalsEPKc>
 8081b84:	2800      	cmp	r0, #0
 8081b86:	f040 8136 	bne.w	8081df6 <_Z17readGpsStreamDatev+0x2ca>
        else if (gps_sentence.equals("init"))
 8081b8a:	4621      	mov	r1, r4
 8081b8c:	4668      	mov	r0, sp
 8081b8e:	f007 fbf7 	bl	8089380 <_ZNK6String6equalsEPKc>
 8081b92:	2800      	cmp	r0, #0
 8081b94:	d0d7      	beq.n	8081b46 <_Z17readGpsStreamDatev+0x1a>
            Serial.println("Error reading GPS RMC");
 8081b96:	f008 fd05 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081b9a:	499f      	ldr	r1, [pc, #636]	; (8081e18 <_Z17readGpsStreamDatev+0x2ec>)
 8081b9c:	f007 fca9 	bl	80894f2 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS RMC");
 8081ba0:	499d      	ldr	r1, [pc, #628]	; (8081e18 <_Z17readGpsStreamDatev+0x2ec>)
 8081ba2:	a80c      	add	r0, sp, #48	; 0x30
 8081ba4:	f007 face 	bl	8089144 <_ZN6StringC1EPKc>
 8081ba8:	a80c      	add	r0, sp, #48	; 0x30
 8081baa:	f7ff fde1 	bl	8081770 <_Z12writeLogFile6String>
 8081bae:	a80c      	add	r0, sp, #48	; 0x30
        String tempStr;
 8081bb0:	f007 fa7e 	bl	80890b0 <_ZN6StringD1Ev>
    String prefix_string;
 8081bb4:	a804      	add	r0, sp, #16
 8081bb6:	f007 fa7b 	bl	80890b0 <_ZN6StringD1Ev>
    String gps_sentence = "init";
 8081bba:	4668      	mov	r0, sp
 8081bbc:	f007 fa78 	bl	80890b0 <_ZN6StringD1Ev>
}
 8081bc0:	b010      	add	sp, #64	; 0x40
 8081bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (gps_sentence.charAt(a + 1) != ',')
 8081bc6:	f104 0a01 	add.w	sl, r4, #1
 8081bca:	4651      	mov	r1, sl
 8081bcc:	4668      	mov	r0, sp
 8081bce:	f007 fbf2 	bl	80893b6 <_ZNK6String6charAtEj>
 8081bd2:	282c      	cmp	r0, #44	; 0x2c
 8081bd4:	f000 808a 	beq.w	8081cec <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081bd8:	f104 030b 	add.w	r3, r4, #11
 8081bdc:	4652      	mov	r2, sl
 8081bde:	4669      	mov	r1, sp
 8081be0:	a80c      	add	r0, sp, #48	; 0x30
 8081be2:	f007 fc03 	bl	80893ec <_ZNK6String9substringEjj>
 8081be6:	a90c      	add	r1, sp, #48	; 0x30
 8081be8:	a808      	add	r0, sp, #32
 8081bea:	f007 faf5 	bl	80891d8 <_ZN6StringaSEOS_>
 8081bee:	a80c      	add	r0, sp, #48	; 0x30
 8081bf0:	f007 fa5e 	bl	80890b0 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081bf4:	4b89      	ldr	r3, [pc, #548]	; (8081e1c <_Z17readGpsStreamDatev+0x2f0>)
 8081bf6:	681b      	ldr	r3, [r3, #0]
 8081bf8:	2b00      	cmp	r3, #0
 8081bfa:	d077      	beq.n	8081cec <_Z17readGpsStreamDatev+0x1c0>
                            Serial.print("GPS utc string: ");
 8081bfc:	f008 fcd2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081c00:	4987      	ldr	r1, [pc, #540]	; (8081e20 <_Z17readGpsStreamDatev+0x2f4>)
 8081c02:	f007 fc63 	bl	80894cc <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 8081c06:	f008 fccd 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081c0a:	9908      	ldr	r1, [sp, #32]
                    Serial.println("Received bad index in readGpsStreamDate");
 8081c0c:	f007 fc71 	bl	80894f2 <_ZN5Print7printlnEPKc>
                    break;
 8081c10:	e06c      	b.n	8081cec <_Z17readGpsStreamDatev+0x1c0>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081c12:	f104 0a01 	add.w	sl, r4, #1
 8081c16:	4651      	mov	r1, sl
 8081c18:	4668      	mov	r0, sp
 8081c1a:	f007 fbcc 	bl	80893b6 <_ZNK6String6charAtEj>
 8081c1e:	282c      	cmp	r0, #44	; 0x2c
 8081c20:	d064      	beq.n	8081cec <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 8081c22:	f104 030a 	add.w	r3, r4, #10
 8081c26:	4652      	mov	r2, sl
 8081c28:	4669      	mov	r1, sp
 8081c2a:	a80c      	add	r0, sp, #48	; 0x30
 8081c2c:	f007 fbde 	bl	80893ec <_ZNK6String9substringEjj>
 8081c30:	a90c      	add	r1, sp, #48	; 0x30
 8081c32:	a808      	add	r0, sp, #32
 8081c34:	f007 fad0 	bl	80891d8 <_ZN6StringaSEOS_>
 8081c38:	a80c      	add	r0, sp, #48	; 0x30
 8081c3a:	f007 fa39 	bl	80890b0 <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 8081c3e:	4b77      	ldr	r3, [pc, #476]	; (8081e1c <_Z17readGpsStreamDatev+0x2f0>)
 8081c40:	681b      	ldr	r3, [r3, #0]
 8081c42:	b14b      	cbz	r3, 8081c58 <_Z17readGpsStreamDatev+0x12c>
                            Serial.print("Latitude string: ");
 8081c44:	f008 fcae 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081c48:	4976      	ldr	r1, [pc, #472]	; (8081e24 <_Z17readGpsStreamDatev+0x2f8>)
 8081c4a:	f007 fc3f 	bl	80894cc <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081c4e:	f008 fca9 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081c52:	9908      	ldr	r1, [sp, #32]
 8081c54:	f007 fc3a 	bl	80894cc <_ZN5Print5printEPKc>
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 8081c58:	a908      	add	r1, sp, #32
 8081c5a:	a80c      	add	r0, sp, #48	; 0x30
 8081c5c:	f007 fab1 	bl	80891c2 <_ZN6StringC1ERKS_>
 8081c60:	f104 010c 	add.w	r1, r4, #12
 8081c64:	4668      	mov	r0, sp
 8081c66:	f007 fba6 	bl	80893b6 <_ZNK6String6charAtEj>
 8081c6a:	a90c      	add	r1, sp, #48	; 0x30
 8081c6c:	4602      	mov	r2, r0
 8081c6e:	4630      	mov	r0, r6
 8081c70:	f004 fb34 	bl	80862dc <_ZN3GPS15set_lat_decimalE6Stringc>
 8081c74:	a80c      	add	r0, sp, #48	; 0x30
 8081c76:	f007 fa1b 	bl	80890b0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081c7a:	882b      	ldrh	r3, [r5, #0]
 8081c7c:	f023 0308 	bic.w	r3, r3, #8
                            status_word.status_int |= 0x0004;
 8081c80:	802b      	strh	r3, [r5, #0]
 8081c82:	e033      	b.n	8081cec <_Z17readGpsStreamDatev+0x1c0>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081c84:	f104 0a01 	add.w	sl, r4, #1
 8081c88:	4651      	mov	r1, sl
 8081c8a:	4668      	mov	r0, sp
 8081c8c:	f007 fb93 	bl	80893b6 <_ZNK6String6charAtEj>
 8081c90:	282c      	cmp	r0, #44	; 0x2c
 8081c92:	d02b      	beq.n	8081cec <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081c94:	f104 030b 	add.w	r3, r4, #11
 8081c98:	4652      	mov	r2, sl
 8081c9a:	4669      	mov	r1, sp
 8081c9c:	a80c      	add	r0, sp, #48	; 0x30
 8081c9e:	f007 fba5 	bl	80893ec <_ZNK6String9substringEjj>
 8081ca2:	a90c      	add	r1, sp, #48	; 0x30
 8081ca4:	a808      	add	r0, sp, #32
 8081ca6:	f007 fa97 	bl	80891d8 <_ZN6StringaSEOS_>
 8081caa:	a80c      	add	r0, sp, #48	; 0x30
 8081cac:	f007 fa00 	bl	80890b0 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081cb0:	4b5a      	ldr	r3, [pc, #360]	; (8081e1c <_Z17readGpsStreamDatev+0x2f0>)
 8081cb2:	681b      	ldr	r3, [r3, #0]
 8081cb4:	b14b      	cbz	r3, 8081cca <_Z17readGpsStreamDatev+0x19e>
                            Serial.print("longitude string: ");
 8081cb6:	f008 fc75 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081cba:	495b      	ldr	r1, [pc, #364]	; (8081e28 <_Z17readGpsStreamDatev+0x2fc>)
 8081cbc:	f007 fc06 	bl	80894cc <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081cc0:	f008 fc70 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081cc4:	9908      	ldr	r1, [sp, #32]
 8081cc6:	f007 fc01 	bl	80894cc <_ZN5Print5printEPKc>
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 8081cca:	a908      	add	r1, sp, #32
 8081ccc:	a80c      	add	r0, sp, #48	; 0x30
 8081cce:	f007 fa78 	bl	80891c2 <_ZN6StringC1ERKS_>
 8081cd2:	f104 010d 	add.w	r1, r4, #13
 8081cd6:	4668      	mov	r0, sp
 8081cd8:	f007 fb6d 	bl	80893b6 <_ZNK6String6charAtEj>
 8081cdc:	a90c      	add	r1, sp, #48	; 0x30
 8081cde:	4602      	mov	r2, r0
 8081ce0:	4630      	mov	r0, r6
 8081ce2:	f004 fb43 	bl	808636c <_ZN3GPS16set_long_decimalE6Stringc>
                        gps.set_satellites(tempStr);
 8081ce6:	a80c      	add	r0, sp, #48	; 0x30
 8081ce8:	f007 f9e2 	bl	80890b0 <_ZN6StringD1Ev>
                comma_counter++;
 8081cec:	f108 0801 	add.w	r8, r8, #1
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 8081cf0:	3701      	adds	r7, #1
 8081cf2:	9b02      	ldr	r3, [sp, #8]
 8081cf4:	b2bc      	uxth	r4, r7
 8081cf6:	42a3      	cmp	r3, r4
 8081cf8:	d97b      	bls.n	8081df2 <_Z17readGpsStreamDatev+0x2c6>
            if (gps_sentence.charAt(a) == ',')
 8081cfa:	4621      	mov	r1, r4
 8081cfc:	4668      	mov	r0, sp
 8081cfe:	f007 fb5a 	bl	80893b6 <_ZNK6String6charAtEj>
 8081d02:	282c      	cmp	r0, #44	; 0x2c
 8081d04:	d1f4      	bne.n	8081cf0 <_Z17readGpsStreamDatev+0x1c4>
                switch (comma_counter)
 8081d06:	f108 33ff 	add.w	r3, r8, #4294967295
 8081d0a:	2b06      	cmp	r3, #6
 8081d0c:	d86d      	bhi.n	8081dea <_Z17readGpsStreamDatev+0x2be>
 8081d0e:	a201      	add	r2, pc, #4	; (adr r2, 8081d14 <_Z17readGpsStreamDatev+0x1e8>)
 8081d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8081d14:	08081c13 	.word	0x08081c13
 8081d18:	08081deb 	.word	0x08081deb
 8081d1c:	08081c85 	.word	0x08081c85
 8081d20:	08081deb 	.word	0x08081deb
 8081d24:	08081d31 	.word	0x08081d31
 8081d28:	08081bc7 	.word	0x08081bc7
 8081d2c:	08081d6d 	.word	0x08081d6d
                    if (gps_sentence.charAt(a + 1) != ',')
 8081d30:	f104 0a01 	add.w	sl, r4, #1
 8081d34:	4651      	mov	r1, sl
 8081d36:	4668      	mov	r0, sp
 8081d38:	f007 fb3d 	bl	80893b6 <_ZNK6String6charAtEj>
 8081d3c:	282c      	cmp	r0, #44	; 0x2c
 8081d3e:	d0d5      	beq.n	8081cec <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081d40:	4652      	mov	r2, sl
 8081d42:	1ce3      	adds	r3, r4, #3
 8081d44:	4669      	mov	r1, sp
 8081d46:	a80c      	add	r0, sp, #48	; 0x30
 8081d48:	f007 fb50 	bl	80893ec <_ZNK6String9substringEjj>
 8081d4c:	a90c      	add	r1, sp, #48	; 0x30
 8081d4e:	a808      	add	r0, sp, #32
 8081d50:	f007 fa42 	bl	80891d8 <_ZN6StringaSEOS_>
 8081d54:	a80c      	add	r0, sp, #48	; 0x30
 8081d56:	f007 f9ab 	bl	80890b0 <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 8081d5a:	a908      	add	r1, sp, #32
 8081d5c:	a80c      	add	r0, sp, #48	; 0x30
 8081d5e:	f007 fa30 	bl	80891c2 <_ZN6StringC1ERKS_>
 8081d62:	4630      	mov	r0, r6
 8081d64:	a90c      	add	r1, sp, #48	; 0x30
 8081d66:	f004 fb47 	bl	80863f8 <_ZN3GPS14set_satellitesE6String>
 8081d6a:	e7bc      	b.n	8081ce6 <_Z17readGpsStreamDatev+0x1ba>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081d6c:	f104 0a01 	add.w	sl, r4, #1
 8081d70:	4651      	mov	r1, sl
 8081d72:	4668      	mov	r0, sp
 8081d74:	f007 fb1f 	bl	80893b6 <_ZNK6String6charAtEj>
 8081d78:	282c      	cmp	r0, #44	; 0x2c
 8081d7a:	d0b7      	beq.n	8081cec <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081d7c:	4652      	mov	r2, sl
 8081d7e:	1ce3      	adds	r3, r4, #3
 8081d80:	4669      	mov	r1, sp
 8081d82:	a80c      	add	r0, sp, #48	; 0x30
 8081d84:	f007 fb32 	bl	80893ec <_ZNK6String9substringEjj>
 8081d88:	a90c      	add	r1, sp, #48	; 0x30
 8081d8a:	a808      	add	r0, sp, #32
 8081d8c:	f007 fa24 	bl	80891d8 <_ZN6StringaSEOS_>
 8081d90:	a80c      	add	r0, sp, #48	; 0x30
 8081d92:	f007 f98d 	bl	80890b0 <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 8081d96:	a908      	add	r1, sp, #32
 8081d98:	a80c      	add	r0, sp, #48	; 0x30
 8081d9a:	f007 fa12 	bl	80891c2 <_ZN6StringC1ERKS_>
 8081d9e:	a90c      	add	r1, sp, #48	; 0x30
 8081da0:	4630      	mov	r0, r6
 8081da2:	f004 fb31 	bl	8086408 <_ZN3GPS22set_horizontalDilutionE6String>
 8081da6:	a80c      	add	r0, sp, #48	; 0x30
 8081da8:	f007 f982 	bl	80890b0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081dac:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081dae:	4630      	mov	r0, r6
                        status_word.status_int &= 0xFFF3;
 8081db0:	f023 030c 	bic.w	r3, r3, #12
 8081db4:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081db6:	f004 fb3d 	bl	8086434 <_ZN3GPS22get_horizontalDilutionEv>
 8081dba:	2801      	cmp	r0, #1
 8081dbc:	dc03      	bgt.n	8081dc6 <_Z17readGpsStreamDatev+0x29a>
                            status_word.status_int |= 0x000C;
 8081dbe:	882b      	ldrh	r3, [r5, #0]
 8081dc0:	f043 030c 	orr.w	r3, r3, #12
 8081dc4:	e75c      	b.n	8081c80 <_Z17readGpsStreamDatev+0x154>
                        else if (gps.get_horizontalDilution() < 5)
 8081dc6:	4630      	mov	r0, r6
 8081dc8:	f004 fb34 	bl	8086434 <_ZN3GPS22get_horizontalDilutionEv>
 8081dcc:	2804      	cmp	r0, #4
 8081dce:	dc03      	bgt.n	8081dd8 <_Z17readGpsStreamDatev+0x2ac>
                            status_word.status_int |= 0x0008;
 8081dd0:	882b      	ldrh	r3, [r5, #0]
 8081dd2:	f043 0308 	orr.w	r3, r3, #8
 8081dd6:	e753      	b.n	8081c80 <_Z17readGpsStreamDatev+0x154>
                        else if (gps.get_horizontalDilution() < 20)
 8081dd8:	4630      	mov	r0, r6
 8081dda:	f004 fb2b 	bl	8086434 <_ZN3GPS22get_horizontalDilutionEv>
 8081dde:	2813      	cmp	r0, #19
 8081de0:	dc84      	bgt.n	8081cec <_Z17readGpsStreamDatev+0x1c0>
                            status_word.status_int |= 0x0004;
 8081de2:	882b      	ldrh	r3, [r5, #0]
 8081de4:	f043 0304 	orr.w	r3, r3, #4
 8081de8:	e74a      	b.n	8081c80 <_Z17readGpsStreamDatev+0x154>
                    Serial.println("Received bad index in readGpsStreamDate");
 8081dea:	f008 fbdb 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081dee:	4649      	mov	r1, r9
 8081df0:	e70c      	b.n	8081c0c <_Z17readGpsStreamDatev+0xe0>
        String tempStr;
 8081df2:	a808      	add	r0, sp, #32
 8081df4:	e6dc      	b.n	8081bb0 <_Z17readGpsStreamDatev+0x84>
 8081df6:	2700      	movs	r7, #0
 8081df8:	4905      	ldr	r1, [pc, #20]	; (8081e10 <_Z17readGpsStreamDatev+0x2e4>)
 8081dfa:	a808      	add	r0, sp, #32
 8081dfc:	f007 f9a2 	bl	8089144 <_ZN6StringC1EPKc>
        comma_counter = 0;
 8081e00:	46b8      	mov	r8, r7
                    Serial.println("Received bad index in readGpsStreamDate");
 8081e02:	f8df 9030 	ldr.w	r9, [pc, #48]	; 8081e34 <_Z17readGpsStreamDatev+0x308>
                        gps.set_horizontalDilution(tempStr);
 8081e06:	4e09      	ldr	r6, [pc, #36]	; (8081e2c <_Z17readGpsStreamDatev+0x300>)
                        status_word.status_int &= 0xFFF3;
 8081e08:	4d09      	ldr	r5, [pc, #36]	; (8081e30 <_Z17readGpsStreamDatev+0x304>)
 8081e0a:	e772      	b.n	8081cf2 <_Z17readGpsStreamDatev+0x1c6>
 8081e0c:	0808df06 	.word	0x0808df06
 8081e10:	080900b9 	.word	0x080900b9
 8081e14:	0808df85 	.word	0x0808df85
 8081e18:	0808df73 	.word	0x0808df73
 8081e1c:	200005e8 	.word	0x200005e8
 8081e20:	0808df21 	.word	0x0808df21
 8081e24:	0808df32 	.word	0x0808df32
 8081e28:	0808df44 	.word	0x0808df44
 8081e2c:	20000670 	.word	0x20000670
 8081e30:	20000c48 	.word	0x20000c48
 8081e34:	0808df89 	.word	0x0808df89

08081e38 <_Z10readAlpha1v>:
{
 8081e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081e3c:	b08b      	sub	sp, #44	; 0x2c
    String alpha1_ppmRounded = "";
 8081e3e:	49ac      	ldr	r1, [pc, #688]	; (80820f0 <_Z10readAlpha1v+0x2b8>)
 8081e40:	a802      	add	r0, sp, #8
 8081e42:	f007 f97f 	bl	8089144 <_ZN6StringC1EPKc>
    if (debugging_enabled)
 8081e46:	4bab      	ldr	r3, [pc, #684]	; (80820f4 <_Z10readAlpha1v+0x2bc>)
 8081e48:	681a      	ldr	r2, [r3, #0]
 8081e4a:	469a      	mov	sl, r3
 8081e4c:	b122      	cbz	r2, 8081e58 <_Z10readAlpha1v+0x20>
        Serial.println("Start of alpha read");
 8081e4e:	f008 fba9 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081e52:	49a9      	ldr	r1, [pc, #676]	; (80820f8 <_Z10readAlpha1v+0x2c0>)
 8081e54:	f007 fb4d 	bl	80894f2 <_ZN5Print7printlnEPKc>
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8081e58:	4ca8      	ldr	r4, [pc, #672]	; (80820fc <_Z10readAlpha1v+0x2c4>)
 8081e5a:	2100      	movs	r1, #0
 8081e5c:	8820      	ldrh	r0, [r4, #0]
 8081e5e:	f008 fe60 	bl	808ab22 <digitalWrite>
    if (Wire.requestFrom(0x49, 1) == 0)
 8081e62:	f008 fee1 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8081e66:	2201      	movs	r2, #1
 8081e68:	2149      	movs	r1, #73	; 0x49
 8081e6a:	f008 fd62 	bl	808a932 <_ZN7TwoWire11requestFromEhj>
 8081e6e:	9401      	str	r4, [sp, #4]
 8081e70:	4605      	mov	r5, r0
 8081e72:	2800      	cmp	r0, #0
 8081e74:	d166      	bne.n	8081f44 <_Z10readAlpha1v+0x10c>
        if (debugging_enabled)
 8081e76:	f8da 4000 	ldr.w	r4, [sl]
 8081e7a:	b17c      	cbz	r4, 8081e9c <_Z10readAlpha1v+0x64>
            Serial.println("Couldn't communicate with LMP91000_1");
 8081e7c:	f008 fb92 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081e80:	499f      	ldr	r1, [pc, #636]	; (8082100 <_Z10readAlpha1v+0x2c8>)
 8081e82:	f007 fb36 	bl	80894f2 <_ZN5Print7printlnEPKc>
            writeLogFile("Couldn't communicate with LMP91000_1");
 8081e86:	499e      	ldr	r1, [pc, #632]	; (8082100 <_Z10readAlpha1v+0x2c8>)
 8081e88:	a806      	add	r0, sp, #24
 8081e8a:	f007 f95b 	bl	8089144 <_ZN6StringC1EPKc>
 8081e8e:	a806      	add	r0, sp, #24
 8081e90:	f7ff fc6e 	bl	8081770 <_Z12writeLogFile6String>
 8081e94:	a806      	add	r0, sp, #24
 8081e96:	f007 f90b 	bl	80890b0 <_ZN6StringD1Ev>
    int32_t half_Vref = 0; //half of Vref
 8081e9a:	462c      	mov	r4, r5
    if (lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081e9c:	2100      	movs	r1, #0
 8081e9e:	4899      	ldr	r0, [pc, #612]	; (8082104 <_Z10readAlpha1v+0x2cc>)
 8081ea0:	f004 f8ab 	bl	8085ffa <_ZN8LMP910004readEh>
 8081ea4:	b988      	cbnz	r0, 8081eca <_Z10readAlpha1v+0x92>
        if (debugging_enabled)
 8081ea6:	f8da 3000 	ldr.w	r3, [sl]
 8081eaa:	b173      	cbz	r3, 8081eca <_Z10readAlpha1v+0x92>
            Serial.println("Status = 0 from LMP91000 status reg");
 8081eac:	f008 fb7a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081eb0:	4995      	ldr	r1, [pc, #596]	; (8082108 <_Z10readAlpha1v+0x2d0>)
 8081eb2:	f007 fb1e 	bl	80894f2 <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8081eb6:	4995      	ldr	r1, [pc, #596]	; (808210c <_Z10readAlpha1v+0x2d4>)
 8081eb8:	a806      	add	r0, sp, #24
 8081eba:	f007 f943 	bl	8089144 <_ZN6StringC1EPKc>
 8081ebe:	a806      	add	r0, sp, #24
 8081ec0:	f7ff fc56 	bl	8081770 <_Z12writeLogFile6String>
 8081ec4:	a806      	add	r0, sp, #24
 8081ec6:	f007 f8f3 	bl	80890b0 <_ZN6StringD1Ev>
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081eca:	f008 fead 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8081ece:	2201      	movs	r2, #1
 8081ed0:	2149      	movs	r1, #73	; 0x49
 8081ed2:	f008 fd2e 	bl	808a932 <_ZN7TwoWire11requestFromEhj>
 8081ed6:	2800      	cmp	r0, #0
 8081ed8:	d169      	bne.n	8081fae <_Z10readAlpha1v+0x176>
    int32_t A2_temperature = 0; //temperature
 8081eda:	2500      	movs	r5, #0
        alpha1_ppmRounded = "-99";
 8081edc:	498c      	ldr	r1, [pc, #560]	; (8082110 <_Z10readAlpha1v+0x2d8>)
 8081ede:	a802      	add	r0, sp, #8
 8081ee0:	f007 f982 	bl	80891e8 <_ZN6StringaSEPKc>
    float alpha1_ppmraw = 0;
 8081ee4:	f04f 0800 	mov.w	r8, #0
    int32_t A1_aux = 0; //aux out
 8081ee8:	462e      	mov	r6, r5
    int32_t A0_gas = 0; //gas
 8081eea:	462f      	mov	r7, r5
    digitalWrite(lmp91000_1_en, HIGH);  //disable
 8081eec:	9b01      	ldr	r3, [sp, #4]
 8081eee:	2101      	movs	r1, #1
 8081ef0:	8818      	ldrh	r0, [r3, #0]
 8081ef2:	f008 fe16 	bl	808ab22 <digitalWrite>
    if (debugging_enabled)
 8081ef6:	f8da 3000 	ldr.w	r3, [sl]
 8081efa:	b1e3      	cbz	r3, 8081f36 <_Z10readAlpha1v+0xfe>
        Serial.print("CO measurements:  \n\r");
 8081efc:	f008 fb52 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081f00:	4984      	ldr	r1, [pc, #528]	; (8082114 <_Z10readAlpha1v+0x2dc>)
 8081f02:	f007 fae3 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.printf("A0_gas: %d\n\r", A0_gas);
 8081f06:	f008 fb4d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081f0a:	463a      	mov	r2, r7
 8081f0c:	4982      	ldr	r1, [pc, #520]	; (8082118 <_Z10readAlpha1v+0x2e0>)
 8081f0e:	f7fe fda7 	bl	8080a60 <_ZN5Print6printfEPKcz>
        Serial.printf("A1_aux: %d\n\r", A1_aux);
 8081f12:	f008 fb47 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081f16:	4632      	mov	r2, r6
 8081f18:	4980      	ldr	r1, [pc, #512]	; (808211c <_Z10readAlpha1v+0x2e4>)
 8081f1a:	f7fe fda1 	bl	8080a60 <_ZN5Print6printfEPKcz>
        Serial.printf("A2_temp: %d\n\r", A2_temperature);
 8081f1e:	f008 fb41 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081f22:	462a      	mov	r2, r5
 8081f24:	497e      	ldr	r1, [pc, #504]	; (8082120 <_Z10readAlpha1v+0x2e8>)
 8081f26:	f7fe fd9b 	bl	8080a60 <_ZN5Print6printfEPKcz>
        Serial.printf("half_vref: %d\n\r", half_Vref);
 8081f2a:	f008 fb3b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081f2e:	4622      	mov	r2, r4
 8081f30:	497c      	ldr	r1, [pc, #496]	; (8082124 <_Z10readAlpha1v+0x2ec>)
 8081f32:	f7fe fd95 	bl	8080a60 <_ZN5Print6printfEPKcz>
    String alpha1_ppmRounded = "";
 8081f36:	a802      	add	r0, sp, #8
 8081f38:	f007 f8ba 	bl	80890b0 <_ZN6StringD1Ev>
}
 8081f3c:	4640      	mov	r0, r8
 8081f3e:	b00b      	add	sp, #44	; 0x2c
 8081f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8081f44:	2103      	movs	r1, #3
 8081f46:	4878      	ldr	r0, [pc, #480]	; (8082128 <_Z10readAlpha1v+0x2f0>)
 8081f48:	f004 f99e 	bl	8086288 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8081f4c:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 8081f4e:	f009 fc8b 	bl	808b868 <__aeabi_i2f>
 8081f52:	4b76      	ldr	r3, [pc, #472]	; (808212c <_Z10readAlpha1v+0x2f4>)
 8081f54:	6819      	ldr	r1, [r3, #0]
 8081f56:	f009 fcdb 	bl	808b910 <__aeabi_fmul>
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8081f5a:	4975      	ldr	r1, [pc, #468]	; (8082130 <_Z10readAlpha1v+0x2f8>)
 8081f5c:	f009 fd8c 	bl	808ba78 <__aeabi_fdiv>
 8081f60:	f009 f828 	bl	808afb4 <__aeabi_f2d>
 8081f64:	2200      	movs	r2, #0
 8081f66:	4b73      	ldr	r3, [pc, #460]	; (8082134 <_Z10readAlpha1v+0x2fc>)
 8081f68:	4606      	mov	r6, r0
 8081f6a:	460f      	mov	r7, r1
 8081f6c:	f008 fec2 	bl	808acf4 <__aeabi_dsub>
 8081f70:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8081f74:	2200      	movs	r2, #0
 8081f76:	4649      	mov	r1, r9
 8081f78:	4b6f      	ldr	r3, [pc, #444]	; (8082138 <_Z10readAlpha1v+0x300>)
 8081f7a:	f009 fb03 	bl	808b584 <__aeabi_dcmpgt>
 8081f7e:	2800      	cmp	r0, #0
 8081f80:	d08c      	beq.n	8081e9c <_Z10readAlpha1v+0x64>
            if (debugging_enabled)
 8081f82:	f8da 3000 	ldr.w	r3, [sl]
 8081f86:	2b00      	cmp	r3, #0
 8081f88:	d088      	beq.n	8081e9c <_Z10readAlpha1v+0x64>
                Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref / 1000);
 8081f8a:	f008 fb0b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8081f8e:	4632      	mov	r2, r6
 8081f90:	463b      	mov	r3, r7
 8081f92:	496a      	ldr	r1, [pc, #424]	; (808213c <_Z10readAlpha1v+0x304>)
 8081f94:	f7fe fd64 	bl	8080a60 <_ZN5Print6printfEPKcz>
                writeLogFile("Halfvolt higher than 0.5");
 8081f98:	4969      	ldr	r1, [pc, #420]	; (8082140 <_Z10readAlpha1v+0x308>)
 8081f9a:	a806      	add	r0, sp, #24
 8081f9c:	f007 f8d2 	bl	8089144 <_ZN6StringC1EPKc>
 8081fa0:	a806      	add	r0, sp, #24
 8081fa2:	f7ff fbe5 	bl	8081770 <_Z12writeLogFile6String>
 8081fa6:	a806      	add	r0, sp, #24
 8081fa8:	f007 f882 	bl	80890b0 <_ZN6StringD1Ev>
 8081fac:	e776      	b.n	8081e9c <_Z10readAlpha1v+0x64>
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081fae:	2100      	movs	r1, #0
 8081fb0:	4854      	ldr	r0, [pc, #336]	; (8082104 <_Z10readAlpha1v+0x2cc>)
 8081fb2:	f004 f822 	bl	8085ffa <_ZN8LMP910004readEh>
 8081fb6:	2800      	cmp	r0, #0
 8081fb8:	d08f      	beq.n	8081eda <_Z10readAlpha1v+0xa2>
 8081fba:	2400      	movs	r4, #0
 8081fbc:	f04f 080a 	mov.w	r8, #10
 8081fc0:	46a1      	mov	r9, r4
 8081fc2:	4626      	mov	r6, r4
 8081fc4:	4627      	mov	r7, r4
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8081fc6:	4d58      	ldr	r5, [pc, #352]	; (8082128 <_Z10readAlpha1v+0x2f0>)
 8081fc8:	2100      	movs	r1, #0
 8081fca:	4628      	mov	r0, r5
 8081fcc:	f004 f95c 	bl	8086288 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081fd0:	2101      	movs	r1, #1
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8081fd2:	4407      	add	r7, r0
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081fd4:	4628      	mov	r0, r5
 8081fd6:	f004 f957 	bl	8086288 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081fda:	2102      	movs	r1, #2
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081fdc:	4406      	add	r6, r0
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081fde:	4628      	mov	r0, r5
 8081fe0:	f004 f952 	bl	8086288 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081fe4:	2103      	movs	r1, #3
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081fe6:	4481      	add	r9, r0
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081fe8:	4628      	mov	r0, r5
 8081fea:	f004 f94d 	bl	8086288 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8081fee:	f108 38ff 	add.w	r8, r8, #4294967295
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081ff2:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081ff6:	4404      	add	r4, r0
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081ff8:	d1e6      	bne.n	8081fc8 <_Z10readAlpha1v+0x190>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8081ffa:	200a      	movs	r0, #10
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8081ffc:	fbb4 f4f0 	udiv	r4, r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 8082000:	4b4a      	ldr	r3, [pc, #296]	; (808212c <_Z10readAlpha1v+0x2f4>)
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 8082002:	fbb9 f5f0 	udiv	r5, r9, r0
        volt0_gas = A0_gas * ads_bitmv;
 8082006:	f8d3 9000 	ldr.w	r9, [r3]
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 808200a:	fbb7 f7f0 	udiv	r7, r7, r0
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 808200e:	fbb6 f6f0 	udiv	r6, r6, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 8082012:	4620      	mov	r0, r4
 8082014:	f009 fc28 	bl	808b868 <__aeabi_i2f>
 8082018:	4649      	mov	r1, r9
 808201a:	f009 fc79 	bl	808b910 <__aeabi_fmul>
 808201e:	4680      	mov	r8, r0
        volt0_gas = A0_gas * ads_bitmv;
 8082020:	4638      	mov	r0, r7
 8082022:	f009 fc21 	bl	808b868 <__aeabi_i2f>
 8082026:	4649      	mov	r1, r9
 8082028:	f009 fc72 	bl	808b910 <__aeabi_fmul>
 808202c:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 808202e:	4640      	mov	r0, r8
 8082030:	f009 fb64 	bl	808b6fc <__aeabi_fsub>
 8082034:	4943      	ldr	r1, [pc, #268]	; (8082144 <_Z10readAlpha1v+0x30c>)
 8082036:	f009 fd1f 	bl	808ba78 <__aeabi_fdiv>
 808203a:	4683      	mov	fp, r0
        volt1_aux = A1_aux * ads_bitmv;
 808203c:	4630      	mov	r0, r6
 808203e:	f009 fc13 	bl	808b868 <__aeabi_i2f>
 8082042:	4649      	mov	r1, r9
 8082044:	f009 fc64 	bl	808b910 <__aeabi_fmul>
 8082048:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 808204a:	4640      	mov	r0, r8
 808204c:	f009 fb56 	bl	808b6fc <__aeabi_fsub>
 8082050:	493d      	ldr	r1, [pc, #244]	; (8082148 <_Z10readAlpha1v+0x310>)
 8082052:	f009 fd11 	bl	808ba78 <__aeabi_fdiv>
 8082056:	4680      	mov	r8, r0
        if (readTemperature() <= 15)
 8082058:	f7ff f982 	bl	8081360 <_Z15readTemperaturev>
 808205c:	493b      	ldr	r1, [pc, #236]	; (808214c <_Z10readAlpha1v+0x314>)
 808205e:	f009 fdff 	bl	808bc60 <__aeabi_fcmple>
 8082062:	b1d0      	cbz	r0, 808209a <_Z10readAlpha1v+0x262>
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 8082064:	4641      	mov	r1, r8
 8082066:	4658      	mov	r0, fp
 8082068:	f009 fb48 	bl	808b6fc <__aeabi_fsub>
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 808206c:	f008 ffa2 	bl	808afb4 <__aeabi_f2d>
 8082070:	a31b      	add	r3, pc, #108	; (adr r3, 80820e0 <_Z10readAlpha1v+0x2a8>)
 8082072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082076:	f009 f91f 	bl	808b2b8 <__aeabi_ddiv>
 808207a:	f009 faeb 	bl	808b654 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 808207e:	2202      	movs	r2, #2
 8082080:	4601      	mov	r1, r0
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8082082:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8082084:	a806      	add	r0, sp, #24
 8082086:	f007 f8f7 	bl	8089278 <_ZN6StringC1Efi>
 808208a:	a906      	add	r1, sp, #24
 808208c:	a802      	add	r0, sp, #8
 808208e:	f007 f8a3 	bl	80891d8 <_ZN6StringaSEOS_>
 8082092:	a806      	add	r0, sp, #24
 8082094:	f007 f80c 	bl	80890b0 <_ZN6StringD1Ev>
 8082098:	e728      	b.n	8081eec <_Z10readAlpha1v+0xb4>
        else if (readTemperature() <= 25)
 808209a:	f7ff f961 	bl	8081360 <_Z15readTemperaturev>
 808209e:	492c      	ldr	r1, [pc, #176]	; (8082150 <_Z10readAlpha1v+0x318>)
 80820a0:	f009 fdde 	bl	808bc60 <__aeabi_fcmple>
 80820a4:	b120      	cbz	r0, 80820b0 <_Z10readAlpha1v+0x278>
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 80820a6:	4641      	mov	r1, r8
 80820a8:	4658      	mov	r0, fp
 80820aa:	f009 fb29 	bl	808b700 <__addsf3>
 80820ae:	e7dd      	b.n	808206c <_Z10readAlpha1v+0x234>
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 80820b0:	4640      	mov	r0, r8
 80820b2:	f008 ff7f 	bl	808afb4 <__aeabi_f2d>
 80820b6:	a30c      	add	r3, pc, #48	; (adr r3, 80820e8 <_Z10readAlpha1v+0x2b0>)
 80820b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80820bc:	f008 ffd2 	bl	808b064 <__aeabi_dmul>
 80820c0:	4680      	mov	r8, r0
 80820c2:	4658      	mov	r0, fp
 80820c4:	4689      	mov	r9, r1
 80820c6:	f008 ff75 	bl	808afb4 <__aeabi_f2d>
 80820ca:	4602      	mov	r2, r0
 80820cc:	460b      	mov	r3, r1
 80820ce:	4640      	mov	r0, r8
 80820d0:	4649      	mov	r1, r9
 80820d2:	f008 fe11 	bl	808acf8 <__adddf3>
 80820d6:	f009 fabd 	bl	808b654 <__aeabi_d2f>
 80820da:	e7c7      	b.n	808206c <_Z10readAlpha1v+0x234>
 80820dc:	f3af 8000 	nop.w
 80820e0:	d4fdf3b6 	.word	0xd4fdf3b6
 80820e4:	3fd6e978 	.word	0x3fd6e978
 80820e8:	851eb852 	.word	0x851eb852
 80820ec:	3fe851eb 	.word	0x3fe851eb
 80820f0:	080900b9 	.word	0x080900b9
 80820f4:	200005e8 	.word	0x200005e8
 80820f8:	0808dfb1 	.word	0x0808dfb1
 80820fc:	200000c0 	.word	0x200000c0
 8082100:	0808dfc5 	.word	0x0808dfc5
 8082104:	200006b9 	.word	0x200006b9
 8082108:	0808e015 	.word	0x0808e015
 808210c:	0808e039 	.word	0x0808e039
 8082110:	0808deb5 	.word	0x0808deb5
 8082114:	0808e04c 	.word	0x0808e04c
 8082118:	0808e061 	.word	0x0808e061
 808211c:	0808e06e 	.word	0x0808e06e
 8082120:	0808e07b 	.word	0x0808e07b
 8082124:	0808e089 	.word	0x0808e089
 8082128:	20000550 	.word	0x20000550
 808212c:	20000084 	.word	0x20000084
 8082130:	447a0000 	.word	0x447a0000
 8082134:	3ff40000 	.word	0x3ff40000
 8082138:	3fe00000 	.word	0x3fe00000
 808213c:	0808dfea 	.word	0x0808dfea
 8082140:	0808dffc 	.word	0x0808dffc
 8082144:	c2f00000 	.word	0xc2f00000
 8082148:	c3160000 	.word	0xc3160000
 808214c:	41700000 	.word	0x41700000
 8082150:	41c80000 	.word	0x41c80000

08082154 <_Z12sendWifiInfov>:
    }
}

//send wifi information to the ESP
void sendWifiInfo(void)
{
 8082154:	b510      	push	{r4, lr}
 8082156:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8082158:	491d      	ldr	r1, [pc, #116]	; (80821d0 <_Z12sendWifiInfov+0x7c>)
 808215a:	a808      	add	r0, sp, #32
 808215c:	f006 fff2 	bl	8089144 <_ZN6StringC1EPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082160:	491c      	ldr	r1, [pc, #112]	; (80821d4 <_Z12sendWifiInfov+0x80>)
 8082162:	a804      	add	r0, sp, #16
 8082164:	f007 f82d 	bl	80891c2 <_ZN6StringC1ERKS_>
 8082168:	a904      	add	r1, sp, #16
 808216a:	a808      	add	r0, sp, #32
 808216c:	f007 f8e8 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 8082170:	4919      	ldr	r1, [pc, #100]	; (80821d8 <_Z12sendWifiInfov+0x84>)
 8082172:	f007 f8f1 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 8082176:	4604      	mov	r4, r0
 8082178:	4918      	ldr	r1, [pc, #96]	; (80821dc <_Z12sendWifiInfov+0x88>)
 808217a:	a80c      	add	r0, sp, #48	; 0x30
 808217c:	f007 f821 	bl	80891c2 <_ZN6StringC1ERKS_>
 8082180:	a90c      	add	r1, sp, #48	; 0x30
 8082182:	4620      	mov	r0, r4
 8082184:	f007 f8dc 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 8082188:	4915      	ldr	r1, [pc, #84]	; (80821e0 <_Z12sendWifiInfov+0x8c>)
 808218a:	f007 f8e5 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 808218e:	4601      	mov	r1, r0
 8082190:	4668      	mov	r0, sp
 8082192:	f007 f816 	bl	80891c2 <_ZN6StringC1ERKS_>
 8082196:	a80c      	add	r0, sp, #48	; 0x30
 8082198:	f006 ff8a 	bl	80890b0 <_ZN6StringD1Ev>
 808219c:	a804      	add	r0, sp, #16
 808219e:	f006 ff87 	bl	80890b0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80821a2:	a808      	add	r0, sp, #32
 80821a4:	f006 ff84 	bl	80890b0 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 80821a8:	f008 f9fc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80821ac:	490d      	ldr	r1, [pc, #52]	; (80821e4 <_Z12sendWifiInfov+0x90>)
 80821ae:	f007 f9a0 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 80821b2:	f008 fb15 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 80821b6:	9900      	ldr	r1, [sp, #0]
 80821b8:	f007 f99b 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 80821bc:	f008 f9f2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80821c0:	4909      	ldr	r1, [pc, #36]	; (80821e8 <_Z12sendWifiInfov+0x94>)
 80821c2:	f007 f996 	bl	80894f2 <_ZN5Print7printlnEPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 80821c6:	4668      	mov	r0, sp
 80821c8:	f006 ff72 	bl	80890b0 <_ZN6StringD1Ev>
}
 80821cc:	b010      	add	sp, #64	; 0x40
 80821ce:	bd10      	pop	{r4, pc}
 80821d0:	0808e099 	.word	0x0808e099
 80821d4:	20000c38 	.word	0x20000c38
 80821d8:	0808e09c 	.word	0x0808e09c
 80821dc:	20000760 	.word	0x20000760
 80821e0:	0808e0f8 	.word	0x0808e0f8
 80821e4:	0808e09e 	.word	0x0808e09e
 80821e8:	0808e0c2 	.word	0x0808e0c2

080821ec <_Z16goToSleepBatteryv>:
    //System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
    System.reset();
}

void goToSleepBattery(void)
{
 80821ec:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80821ee:	4c2c      	ldr	r4, [pc, #176]	; (80822a0 <_Z16goToSleepBatteryv+0xb4>)
 80821f0:	2101      	movs	r1, #1
 80821f2:	8820      	ldrh	r0, [r4, #0]
 80821f4:	f008 fc95 	bl	808ab22 <digitalWrite>
    delay(250);                   // waits for a second
 80821f8:	20fa      	movs	r0, #250	; 0xfa
 80821fa:	f007 fcef 	bl	8089bdc <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80821fe:	2100      	movs	r1, #0
 8082200:	8820      	ldrh	r0, [r4, #0]
 8082202:	f008 fc8e 	bl	808ab22 <digitalWrite>
    delay(250);                   // waits for a second
 8082206:	20fa      	movs	r0, #250	; 0xfa
 8082208:	f007 fce8 	bl	8089bdc <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 808220c:	2101      	movs	r1, #1
 808220e:	8820      	ldrh	r0, [r4, #0]
 8082210:	f008 fc87 	bl	808ab22 <digitalWrite>
    delay(250);                   // waits for a second
 8082214:	20fa      	movs	r0, #250	; 0xfa
 8082216:	f007 fce1 	bl	8089bdc <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808221a:	2100      	movs	r1, #0
 808221c:	8820      	ldrh	r0, [r4, #0]
 808221e:	f008 fc80 	bl	808ab22 <digitalWrite>
    delay(250);                   // waits for a second
 8082222:	20fa      	movs	r0, #250	; 0xfa
 8082224:	f007 fcda 	bl	8089bdc <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8082228:	2101      	movs	r1, #1
 808222a:	8820      	ldrh	r0, [r4, #0]
 808222c:	f008 fc79 	bl	808ab22 <digitalWrite>
    delay(250);                   // waits for a second
 8082230:	20fa      	movs	r0, #250	; 0xfa
 8082232:	f007 fcd3 	bl	8089bdc <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082236:	2100      	movs	r1, #0
 8082238:	8820      	ldrh	r0, [r4, #0]
 808223a:	f008 fc72 	bl	808ab22 <digitalWrite>
    delay(250);                   // waits for a second
 808223e:	20fa      	movs	r0, #250	; 0xfa
 8082240:	f007 fccc 	bl	8089bdc <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082244:	2101      	movs	r1, #1
 8082246:	8820      	ldrh	r0, [r4, #0]
 8082248:	f008 fc6b 	bl	808ab22 <digitalWrite>
    delay(250);                   // waits for a second
 808224c:	20fa      	movs	r0, #250	; 0xfa
 808224e:	f007 fcc5 	bl	8089bdc <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082252:	2100      	movs	r1, #0
 8082254:	8820      	ldrh	r0, [r4, #0]
 8082256:	f008 fc64 	bl	808ab22 <digitalWrite>
    delay(250);                   // waits for a second
 808225a:	20fa      	movs	r0, #250	; 0xfa
 808225c:	f007 fcbe 	bl	8089bdc <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082260:	2101      	movs	r1, #1
 8082262:	8820      	ldrh	r0, [r4, #0]
 8082264:	f008 fc5d 	bl	808ab22 <digitalWrite>
    delay(250);                   // waits for a second
 8082268:	20fa      	movs	r0, #250	; 0xfa
 808226a:	f007 fcb7 	bl	8089bdc <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808226e:	2100      	movs	r1, #0
 8082270:	8820      	ldrh	r0, [r4, #0]
 8082272:	f008 fc56 	bl	808ab22 <digitalWrite>
    delay(250);                   // waits for a second
 8082276:	20fa      	movs	r0, #250	; 0xfa
 8082278:	f007 fcb0 	bl	8089bdc <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 808227c:	2101      	movs	r1, #1
 808227e:	8820      	ldrh	r0, [r4, #0]
 8082280:	f008 fc4f 	bl	808ab22 <digitalWrite>
    delay(250);                   // waits for a second
 8082284:	20fa      	movs	r0, #250	; 0xfa
 8082286:	f007 fca9 	bl	8089bdc <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808228a:	8820      	ldrh	r0, [r4, #0]
 808228c:	2100      	movs	r1, #0
 808228e:	f008 fc48 	bl	808ab22 <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);
}
 8082292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeRegister(7, 0b01101011);   //turn off batfet
 8082296:	216b      	movs	r1, #107	; 0x6b
 8082298:	2007      	movs	r0, #7
 808229a:	f7fe bcc3 	b.w	8080c24 <_Z13writeRegisterhh>
 808229e:	bf00      	nop
 80822a0:	200000cc 	.word	0x200000cc

080822a4 <_Z8resetESPv>:

void resetESP(void)
{
 80822a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    digitalWrite(esp_wroom_en, LOW);
 80822a6:	4f17      	ldr	r7, [pc, #92]	; (8082304 <_Z8resetESPv+0x60>)
    digitalWrite(plantower_en, LOW);
 80822a8:	4e17      	ldr	r6, [pc, #92]	; (8082308 <_Z8resetESPv+0x64>)
    digitalWrite(esp_wroom_en, LOW);
 80822aa:	8838      	ldrh	r0, [r7, #0]
    digitalWrite(blower_en, LOW);
 80822ac:	4d17      	ldr	r5, [pc, #92]	; (808230c <_Z8resetESPv+0x68>)
    digitalWrite(esp_wroom_en, LOW);
 80822ae:	2100      	movs	r1, #0
 80822b0:	f008 fc37 	bl	808ab22 <digitalWrite>
    digitalWrite(co2_en, LOW);
 80822b4:	4c16      	ldr	r4, [pc, #88]	; (8082310 <_Z8resetESPv+0x6c>)
    digitalWrite(plantower_en, LOW);
 80822b6:	8830      	ldrh	r0, [r6, #0]
 80822b8:	2100      	movs	r1, #0
 80822ba:	f008 fc32 	bl	808ab22 <digitalWrite>
    digitalWrite(blower_en, LOW);
 80822be:	8828      	ldrh	r0, [r5, #0]
 80822c0:	2100      	movs	r1, #0
 80822c2:	f008 fc2e 	bl	808ab22 <digitalWrite>
    digitalWrite(co2_en, LOW);
 80822c6:	2100      	movs	r1, #0
 80822c8:	8820      	ldrh	r0, [r4, #0]
 80822ca:	f008 fc2a 	bl	808ab22 <digitalWrite>
    delay(1000);
 80822ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80822d2:	f007 fc83 	bl	8089bdc <delay>
    digitalWrite(esp_wroom_en, HIGH);
 80822d6:	8838      	ldrh	r0, [r7, #0]
 80822d8:	2101      	movs	r1, #1
 80822da:	f008 fc22 	bl	808ab22 <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 80822de:	8830      	ldrh	r0, [r6, #0]
 80822e0:	2101      	movs	r1, #1
 80822e2:	f008 fc1e 	bl	808ab22 <digitalWrite>
    digitalWrite(blower_en, HIGH);
 80822e6:	8828      	ldrh	r0, [r5, #0]
 80822e8:	2101      	movs	r1, #1
 80822ea:	f008 fc1a 	bl	808ab22 <digitalWrite>
    digitalWrite(co2_en, HIGH);
 80822ee:	8820      	ldrh	r0, [r4, #0]
 80822f0:	2101      	movs	r1, #1
 80822f2:	f008 fc16 	bl	808ab22 <digitalWrite>
    delay(1000);
}
 80822f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    delay(1000);
 80822fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80822fe:	f007 bc6d 	b.w	8089bdc <delay>
 8082302:	bf00      	nop
 8082304:	20000090 	.word	0x20000090
 8082308:	200000c8 	.word	0x200000c8
 808230c:	20000088 	.word	0x20000088
 8082310:	2000008c 	.word	0x2000008c

08082314 <_Z12outputCOtoPIv>:
    }
    Serial.println("Exiting serial menu...");
}

void outputCOtoPI(void)
{
 8082314:	b500      	push	{lr}
 8082316:	b08f      	sub	sp, #60	; 0x3c
    String CO_string = "*";
 8082318:	4983      	ldr	r1, [pc, #524]	; (8082528 <_Z12outputCOtoPIv+0x214>)
 808231a:	a802      	add	r0, sp, #8
 808231c:	f006 ff12 	bl	8089144 <_ZN6StringC1EPKc>
    Serial.println("Outputting CO to PI.");
 8082320:	f008 f940 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082324:	4981      	ldr	r1, [pc, #516]	; (808252c <_Z12outputCOtoPIv+0x218>)
 8082326:	f007 f8e4 	bl	80894f2 <_ZN5Print7printlnEPKc>

    CO_string += String(measurement_number, 0) + ",";
 808232a:	2300      	movs	r3, #0
 808232c:	9300      	str	r3, [sp, #0]
 808232e:	4b80      	ldr	r3, [pc, #512]	; (8082530 <_Z12outputCOtoPIv+0x21c>)
 8082330:	a806      	add	r0, sp, #24
 8082332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082336:	f006 ffb6 	bl	80892a6 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 808233a:	a906      	add	r1, sp, #24
 808233c:	a80a      	add	r0, sp, #40	; 0x28
 808233e:	f006 ff40 	bl	80891c2 <_ZN6StringC1ERKS_>
 8082342:	497c      	ldr	r1, [pc, #496]	; (8082534 <_Z12outputCOtoPIv+0x220>)
 8082344:	a80a      	add	r0, sp, #40	; 0x28
 8082346:	f007 f807 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 808234a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808234c:	a802      	add	r0, sp, #8
 808234e:	f006 ffd7 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082352:	a80a      	add	r0, sp, #40	; 0x28
 8082354:	f006 feac 	bl	80890b0 <_ZN6StringD1Ev>
 8082358:	a806      	add	r0, sp, #24
 808235a:	f006 fea9 	bl	80890b0 <_ZN6StringD1Ev>
    CO_string += String(CO_float_A, 3) + ",";
 808235e:	4b76      	ldr	r3, [pc, #472]	; (8082538 <_Z12outputCOtoPIv+0x224>)
 8082360:	2203      	movs	r2, #3
 8082362:	6819      	ldr	r1, [r3, #0]
 8082364:	a806      	add	r0, sp, #24
 8082366:	f006 ff87 	bl	8089278 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 808236a:	a906      	add	r1, sp, #24
 808236c:	a80a      	add	r0, sp, #40	; 0x28
 808236e:	f006 ff28 	bl	80891c2 <_ZN6StringC1ERKS_>
 8082372:	4970      	ldr	r1, [pc, #448]	; (8082534 <_Z12outputCOtoPIv+0x220>)
 8082374:	a80a      	add	r0, sp, #40	; 0x28
 8082376:	f006 ffef 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 808237a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808237c:	a802      	add	r0, sp, #8
 808237e:	f006 ffbf 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082382:	a80a      	add	r0, sp, #40	; 0x28
 8082384:	f006 fe94 	bl	80890b0 <_ZN6StringD1Ev>
 8082388:	a806      	add	r0, sp, #24
 808238a:	f006 fe91 	bl	80890b0 <_ZN6StringD1Ev>
    CO_string += String(CO_float_B, 3) + ",";
 808238e:	4b6b      	ldr	r3, [pc, #428]	; (808253c <_Z12outputCOtoPIv+0x228>)
 8082390:	2203      	movs	r2, #3
 8082392:	6819      	ldr	r1, [r3, #0]
 8082394:	a806      	add	r0, sp, #24
 8082396:	f006 ff6f 	bl	8089278 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 808239a:	a906      	add	r1, sp, #24
 808239c:	a80a      	add	r0, sp, #40	; 0x28
 808239e:	f006 ff10 	bl	80891c2 <_ZN6StringC1ERKS_>
 80823a2:	4964      	ldr	r1, [pc, #400]	; (8082534 <_Z12outputCOtoPIv+0x220>)
 80823a4:	a80a      	add	r0, sp, #40	; 0x28
 80823a6:	f006 ffd7 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 80823aa:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80823ac:	a802      	add	r0, sp, #8
 80823ae:	f006 ffa7 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80823b2:	a80a      	add	r0, sp, #40	; 0x28
 80823b4:	f006 fe7c 	bl	80890b0 <_ZN6StringD1Ev>
 80823b8:	a806      	add	r0, sp, #24
 80823ba:	f006 fe79 	bl	80890b0 <_ZN6StringD1Ev>
    if (gps.get_latitude() != 0)
 80823be:	4860      	ldr	r0, [pc, #384]	; (8082540 <_Z12outputCOtoPIv+0x22c>)
 80823c0:	f004 f82e 	bl	8086420 <_ZN3GPS12get_latitudeEv>
 80823c4:	2200      	movs	r2, #0
 80823c6:	2300      	movs	r3, #0
 80823c8:	f009 f8b4 	bl	808b534 <__aeabi_dcmpeq>
 80823cc:	2800      	cmp	r0, #0
 80823ce:	f040 809c 	bne.w	808250a <_Z12outputCOtoPIv+0x1f6>
    {
        if (gps.get_nsIndicator() == 0)
 80823d2:	485b      	ldr	r0, [pc, #364]	; (8082540 <_Z12outputCOtoPIv+0x22c>)
 80823d4:	f004 f83f 	bl	8086456 <_ZN3GPS15get_nsIndicatorEv>
 80823d8:	b918      	cbnz	r0, 80823e2 <_Z12outputCOtoPIv+0xce>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80823da:	495a      	ldr	r1, [pc, #360]	; (8082544 <_Z12outputCOtoPIv+0x230>)
 80823dc:	a802      	add	r0, sp, #8
 80823de:	f006 ff93 	bl	8089308 <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_latitude()) + ",";
 80823e2:	4857      	ldr	r0, [pc, #348]	; (8082540 <_Z12outputCOtoPIv+0x22c>)
 80823e4:	f004 f81c 	bl	8086420 <_ZN3GPS12get_latitudeEv>
 80823e8:	460b      	mov	r3, r1
 80823ea:	2106      	movs	r1, #6
 80823ec:	4602      	mov	r2, r0
 80823ee:	9100      	str	r1, [sp, #0]
 80823f0:	a806      	add	r0, sp, #24
 80823f2:	f006 ff58 	bl	80892a6 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80823f6:	a906      	add	r1, sp, #24
 80823f8:	a80a      	add	r0, sp, #40	; 0x28
 80823fa:	f006 fee2 	bl	80891c2 <_ZN6StringC1ERKS_>
    }
    else
    {
        CO_string += String(geolocation_latitude) + ",";
 80823fe:	494d      	ldr	r1, [pc, #308]	; (8082534 <_Z12outputCOtoPIv+0x220>)
 8082400:	a80a      	add	r0, sp, #40	; 0x28
 8082402:	f006 ffa9 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 8082406:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082408:	a802      	add	r0, sp, #8
 808240a:	f006 ff79 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808240e:	a80a      	add	r0, sp, #40	; 0x28
 8082410:	f006 fe4e 	bl	80890b0 <_ZN6StringD1Ev>
 8082414:	a806      	add	r0, sp, #24
 8082416:	f006 fe4b 	bl	80890b0 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 808241a:	4849      	ldr	r0, [pc, #292]	; (8082540 <_Z12outputCOtoPIv+0x22c>)
 808241c:	f004 f805 	bl	808642a <_ZN3GPS13get_longitudeEv>
 8082420:	2200      	movs	r2, #0
 8082422:	2300      	movs	r3, #0
 8082424:	f009 f886 	bl	808b534 <__aeabi_dcmpeq>
 8082428:	2800      	cmp	r0, #0
 808242a:	d173      	bne.n	8082514 <_Z12outputCOtoPIv+0x200>
    {
        if (gps.get_ewIndicator() == 0x01)
 808242c:	4844      	ldr	r0, [pc, #272]	; (8082540 <_Z12outputCOtoPIv+0x22c>)
 808242e:	f004 f815 	bl	808645c <_ZN3GPS15get_ewIndicatorEv>
 8082432:	2801      	cmp	r0, #1
 8082434:	d103      	bne.n	808243e <_Z12outputCOtoPIv+0x12a>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8082436:	4943      	ldr	r1, [pc, #268]	; (8082544 <_Z12outputCOtoPIv+0x230>)
 8082438:	a802      	add	r0, sp, #8
 808243a:	f006 ff65 	bl	8089308 <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_longitude()) + ",";
 808243e:	4840      	ldr	r0, [pc, #256]	; (8082540 <_Z12outputCOtoPIv+0x22c>)
 8082440:	f003 fff3 	bl	808642a <_ZN3GPS13get_longitudeEv>
 8082444:	460b      	mov	r3, r1
 8082446:	2106      	movs	r1, #6
 8082448:	4602      	mov	r2, r0
 808244a:	9100      	str	r1, [sp, #0]
 808244c:	a806      	add	r0, sp, #24
 808244e:	f006 ff2a 	bl	80892a6 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8082452:	a906      	add	r1, sp, #24
 8082454:	a80a      	add	r0, sp, #40	; 0x28
 8082456:	f006 feb4 	bl	80891c2 <_ZN6StringC1ERKS_>
    }
    else
    {
        CO_string += String(geolocation_longitude) + ",";
 808245a:	4936      	ldr	r1, [pc, #216]	; (8082534 <_Z12outputCOtoPIv+0x220>)
 808245c:	a80a      	add	r0, sp, #40	; 0x28
 808245e:	f006 ff7b 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 8082462:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082464:	a802      	add	r0, sp, #8
 8082466:	f006 ff4b 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808246a:	a80a      	add	r0, sp, #40	; 0x28
 808246c:	f006 fe20 	bl	80890b0 <_ZN6StringD1Ev>
 8082470:	a806      	add	r0, sp, #24
 8082472:	f006 fe1d 	bl	80890b0 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 8082476:	4832      	ldr	r0, [pc, #200]	; (8082540 <_Z12outputCOtoPIv+0x22c>)
 8082478:	f003 ffd7 	bl	808642a <_ZN3GPS13get_longitudeEv>
 808247c:	2200      	movs	r2, #0
 808247e:	2300      	movs	r3, #0
 8082480:	f009 f858 	bl	808b534 <__aeabi_dcmpeq>
 8082484:	2800      	cmp	r0, #0
 8082486:	d14a      	bne.n	808251e <_Z12outputCOtoPIv+0x20a>
    {
        CO_string += String(gps.get_horizontalDilution() / 10.0) + ",";
 8082488:	482d      	ldr	r0, [pc, #180]	; (8082540 <_Z12outputCOtoPIv+0x22c>)
 808248a:	f003 ffd3 	bl	8086434 <_ZN3GPS22get_horizontalDilutionEv>
 808248e:	f008 fd7f 	bl	808af90 <__aeabi_i2d>
 8082492:	2200      	movs	r2, #0
 8082494:	4b2c      	ldr	r3, [pc, #176]	; (8082548 <_Z12outputCOtoPIv+0x234>)
 8082496:	f008 ff0f 	bl	808b2b8 <__aeabi_ddiv>
 808249a:	460b      	mov	r3, r1
 808249c:	2106      	movs	r1, #6
 808249e:	4602      	mov	r2, r0
 80824a0:	9100      	str	r1, [sp, #0]
 80824a2:	a806      	add	r0, sp, #24
 80824a4:	f006 feff 	bl	80892a6 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80824a8:	a906      	add	r1, sp, #24
 80824aa:	a80a      	add	r0, sp, #40	; 0x28
 80824ac:	f006 fe89 	bl	80891c2 <_ZN6StringC1ERKS_>
    }
    else
    {
        CO_string += String(geolocation_accuracy) + ",";
 80824b0:	4920      	ldr	r1, [pc, #128]	; (8082534 <_Z12outputCOtoPIv+0x220>)
 80824b2:	a80a      	add	r0, sp, #40	; 0x28
 80824b4:	f006 ff50 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 80824b8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80824ba:	a802      	add	r0, sp, #8
 80824bc:	f006 ff20 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80824c0:	a80a      	add	r0, sp, #40	; 0x28
 80824c2:	f006 fdf5 	bl	80890b0 <_ZN6StringD1Ev>
 80824c6:	a806      	add	r0, sp, #24
 80824c8:	f006 fdf2 	bl	80890b0 <_ZN6StringD1Ev>
    }

    CO_string += String(Time.format(systemTime, "%d/%m/%y,%H:%M:%S"));
 80824cc:	4b1f      	ldr	r3, [pc, #124]	; (808254c <_Z12outputCOtoPIv+0x238>)
 80824ce:	a80a      	add	r0, sp, #40	; 0x28
 80824d0:	9300      	str	r3, [sp, #0]
 80824d2:	4b1f      	ldr	r3, [pc, #124]	; (8082550 <_Z12outputCOtoPIv+0x23c>)
 80824d4:	491f      	ldr	r1, [pc, #124]	; (8082554 <_Z12outputCOtoPIv+0x240>)
 80824d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80824da:	f007 fabf 	bl	8089a5c <_ZN9TimeClass6formatExPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80824de:	a90a      	add	r1, sp, #40	; 0x28
 80824e0:	a802      	add	r0, sp, #8
 80824e2:	f006 ff0d 	bl	8089300 <_ZN6String6concatERKS_>
 80824e6:	a80a      	add	r0, sp, #40	; 0x28
 80824e8:	f006 fde2 	bl	80890b0 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80824ec:	491a      	ldr	r1, [pc, #104]	; (8082558 <_Z12outputCOtoPIv+0x244>)
 80824ee:	a802      	add	r0, sp, #8
 80824f0:	f006 ff0a 	bl	8089308 <_ZN6String6concatEPKc>
    //get a current time string

    CO_string += "\n\r&";
    Serial1.print(CO_string);
 80824f4:	f008 f974 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 80824f8:	9902      	ldr	r1, [sp, #8]
 80824fa:	f006 ffe7 	bl	80894cc <_ZN5Print5printEPKc>
    String CO_string = "*";
 80824fe:	a802      	add	r0, sp, #8
 8082500:	f006 fdd6 	bl	80890b0 <_ZN6StringD1Ev>
    //send ending delimeter
    //Serial1.print("&");
}
 8082504:	b00f      	add	sp, #60	; 0x3c
 8082506:	f85d fb04 	ldr.w	pc, [sp], #4
        CO_string += String(geolocation_latitude) + ",";
 808250a:	4914      	ldr	r1, [pc, #80]	; (808255c <_Z12outputCOtoPIv+0x248>)
 808250c:	a806      	add	r0, sp, #24
 808250e:	f006 fe19 	bl	8089144 <_ZN6StringC1EPKc>
 8082512:	e770      	b.n	80823f6 <_Z12outputCOtoPIv+0xe2>
        CO_string += String(geolocation_longitude) + ",";
 8082514:	4912      	ldr	r1, [pc, #72]	; (8082560 <_Z12outputCOtoPIv+0x24c>)
 8082516:	a806      	add	r0, sp, #24
 8082518:	f006 fe14 	bl	8089144 <_ZN6StringC1EPKc>
 808251c:	e799      	b.n	8082452 <_Z12outputCOtoPIv+0x13e>
        CO_string += String(geolocation_accuracy) + ",";
 808251e:	4911      	ldr	r1, [pc, #68]	; (8082564 <_Z12outputCOtoPIv+0x250>)
 8082520:	a806      	add	r0, sp, #24
 8082522:	f006 fe0f 	bl	8089144 <_ZN6StringC1EPKc>
 8082526:	e7bf      	b.n	80824a8 <_Z12outputCOtoPIv+0x194>
 8082528:	0808e0cb 	.word	0x0808e0cb
 808252c:	0808e0cd 	.word	0x0808e0cd
 8082530:	20000740 	.word	0x20000740
 8082534:	0808e09c 	.word	0x0808e09c
 8082538:	200002c0 	.word	0x200002c0
 808253c:	200002c4 	.word	0x200002c4
 8082540:	20000670 	.word	0x20000670
 8082544:	0808e0e2 	.word	0x0808e0e2
 8082548:	40240000 	.word	0x40240000
 808254c:	0808e0e4 	.word	0x0808e0e4
 8082550:	20000c50 	.word	0x20000c50
 8082554:	20000cdc 	.word	0x20000cdc
 8082558:	0808e0f6 	.word	0x0808e0f6
 808255c:	200000a6 	.word	0x200000a6
 8082560:	200000b2 	.word	0x200000b2
 8082564:	200000a0 	.word	0x200000a0

08082568 <_Z26serialIncreaseInputCurrentv>:
        Serial.println("Failed writing string");
    }
}

void serialIncreaseInputCurrent(void)
{
 8082568:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 808256a:	481d      	ldr	r0, [pc, #116]	; (80825e0 <_Z26serialIncreaseInputCurrentv+0x78>)
 808256c:	f006 face 	bl	8088b0c <_ZN4PMIC20getInputCurrentLimitEv>
 8082570:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8082572:	f008 f817 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082576:	462a      	mov	r2, r5
 8082578:	491a      	ldr	r1, [pc, #104]	; (80825e4 <_Z26serialIncreaseInputCurrentv+0x7c>)
 808257a:	f7fe fa71 	bl	8080a60 <_ZN5Print6printfEPKcz>

    if (inputCurrent == 100)
 808257e:	2d64      	cmp	r5, #100	; 0x64
 8082580:	d01f      	beq.n	80825c2 <_Z26serialIncreaseInputCurrentv+0x5a>
    }
    else if (inputCurrent == 100)
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 150)
 8082582:	2d96      	cmp	r5, #150	; 0x96
 8082584:	d01f      	beq.n	80825c6 <_Z26serialIncreaseInputCurrentv+0x5e>
    {
        inputCurrent = 500;
    }
    else if (inputCurrent == 500)
 8082586:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808258a:	d01f      	beq.n	80825cc <_Z26serialIncreaseInputCurrentv+0x64>
    {
        inputCurrent = 900;
    }
    else if (inputCurrent == 900)
 808258c:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8082590:	d01f      	beq.n	80825d2 <_Z26serialIncreaseInputCurrentv+0x6a>
    {
        inputCurrent = 1200;
    }
    else if (inputCurrent == 1200)
 8082592:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8082596:	f240 54dc 	movw	r4, #1500	; 0x5dc
 808259a:	d007      	beq.n	80825ac <_Z26serialIncreaseInputCurrentv+0x44>
    {
        inputCurrent = 1500;
    }
    else if (inputCurrent == 1500)
 808259c:	42a5      	cmp	r5, r4
 808259e:	d01b      	beq.n	80825d8 <_Z26serialIncreaseInputCurrentv+0x70>
    {
        inputCurrent = 2000;
    }
    else if (inputCurrent == 2000)
    {
        inputCurrent = 3000;
 80825a0:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80825a4:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80825a8:	bf18      	it	ne
 80825aa:	462c      	movne	r4, r5
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 80825ac:	b2a1      	uxth	r1, r4
 80825ae:	480c      	ldr	r0, [pc, #48]	; (80825e0 <_Z26serialIncreaseInputCurrentv+0x78>)
 80825b0:	f006 faed 	bl	8088b8e <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 80825b4:	f007 fff6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80825b8:	4622      	mov	r2, r4
 80825ba:	490b      	ldr	r1, [pc, #44]	; (80825e8 <_Z26serialIncreaseInputCurrentv+0x80>)
 80825bc:	f7fe fa50 	bl	8080a60 <_ZN5Print6printfEPKcz>
}
 80825c0:	bd38      	pop	{r3, r4, r5, pc}
        inputCurrent = 150;
 80825c2:	2496      	movs	r4, #150	; 0x96
 80825c4:	e7f2      	b.n	80825ac <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 500;
 80825c6:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 80825ca:	e7ef      	b.n	80825ac <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 900;
 80825cc:	f44f 7461 	mov.w	r4, #900	; 0x384
 80825d0:	e7ec      	b.n	80825ac <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 1200;
 80825d2:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 80825d6:	e7e9      	b.n	80825ac <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 2000;
 80825d8:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80825dc:	e7e6      	b.n	80825ac <_Z26serialIncreaseInputCurrentv+0x44>
 80825de:	bf00      	nop
 80825e0:	20000770 	.word	0x20000770
 80825e4:	0808e0fa 	.word	0x0808e0fa
 80825e8:	0808e118 	.word	0x0808e118

080825ec <_Z27serialIncreaseChargeCurrentv>:

void serialIncreaseChargeCurrent(void)
{
 80825ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 80825ee:	482d      	ldr	r0, [pc, #180]	; (80826a4 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 80825f0:	f006 fa98 	bl	8088b24 <_ZN4PMIC16getChargeCurrentEv>
    //bit 7
    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
 80825f4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80825f8:	bf14      	ite	ne
 80825fa:	f44f 6500 	movne.w	r5, #2048	; 0x800
 80825fe:	2500      	moveq	r5, #0
    byte chargeCurrent = pmic.getChargeCurrent();
 8082600:	4604      	mov	r4, r0
    }
    //bit 6
    if (chargeCurrent & 0x40)
 8082602:	0643      	lsls	r3, r0, #25
    {
        total_current += 1024;
 8082604:	bf48      	it	mi
 8082606:	f505 6580 	addmi.w	r5, r5, #1024	; 0x400
    }
    //bit 5
    if (chargeCurrent & 0x20)
 808260a:	0686      	lsls	r6, r0, #26
    {
        total_current += 512;
 808260c:	bf48      	it	mi
 808260e:	f505 7500 	addmi.w	r5, r5, #512	; 0x200
    }
    //bit 4
    if (chargeCurrent & 0x10) {
 8082612:	06e0      	lsls	r0, r4, #27
        total_current += 256;
 8082614:	bf48      	it	mi
 8082616:	f505 7580 	addmi.w	r5, r5, #256	; 0x100
    }
    //bit 3
    if (chargeCurrent & 0x08)
 808261a:	0721      	lsls	r1, r4, #28
    {
        total_current += 128;
 808261c:	bf48      	it	mi
 808261e:	3580      	addmi	r5, #128	; 0x80
    }
    //bit 2
    if (chargeCurrent & 0x04)
 8082620:	0762      	lsls	r2, r4, #29
    {
        total_current += 64;
 8082622:	bf48      	it	mi
 8082624:	3540      	addmi	r5, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8082626:	f007 ffbd 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808262a:	462a      	mov	r2, r5
 808262c:	491e      	ldr	r1, [pc, #120]	; (80826a8 <_Z27serialIncreaseChargeCurrentv+0xbc>)
 808262e:	f7fe fa17 	bl	8080a60 <_ZN5Print6printfEPKcz>
    chargeCurrent += 4;
 8082632:	1d20      	adds	r0, r4, #4
    total_current = 0;

    if (chargeCurrent & 0x80)
 8082634:	0603      	lsls	r3, r0, #24
    bool bit7 = 0;
 8082636:	bf56      	itet	pl
 8082638:	2100      	movpl	r1, #0
    {
        total_current += 2048;
 808263a:	f44f 6500 	movmi.w	r5, #2048	; 0x800
    total_current = 0;
 808263e:	460d      	movpl	r5, r1
    chargeCurrent += 4;
 8082640:	b2c4      	uxtb	r4, r0
        bit7 = 1;
 8082642:	bf48      	it	mi
 8082644:	2101      	movmi	r1, #1
    }
    //bit 6
    if (chargeCurrent & 0x40)
 8082646:	f014 0240 	ands.w	r2, r4, #64	; 0x40
    {
        total_current += 1024;
 808264a:	bf1c      	itt	ne
 808264c:	f505 6580 	addne.w	r5, r5, #1024	; 0x400
        bit6 = 1;
 8082650:	2201      	movne	r2, #1
    }
    //bit 5
    if (chargeCurrent & 0x20)
 8082652:	f014 0320 	ands.w	r3, r4, #32
    {
        total_current += 512;
        bit5 = 1;
 8082656:	bf1c      	itt	ne
 8082658:	2301      	movne	r3, #1
        total_current += 512;
 808265a:	f505 7500 	addne.w	r5, r5, #512	; 0x200
    }
    //bit 4
    if (chargeCurrent & 0x10)
 808265e:	f014 0010 	ands.w	r0, r4, #16
    {
        total_current += 256;
 8082662:	bf1c      	itt	ne
 8082664:	f505 7580 	addne.w	r5, r5, #256	; 0x100
        bit4 = 1;
 8082668:	2001      	movne	r0, #1
    }
    //bit 3
    if (chargeCurrent & 0x08)
 808266a:	f014 0608 	ands.w	r6, r4, #8
    {
        total_current += 128;
 808266e:	bf1c      	itt	ne
 8082670:	3580      	addne	r5, #128	; 0x80
        bit3 = 1;
 8082672:	2601      	movne	r6, #1
    }
    //bit 2
    if (chargeCurrent & 0x04)
 8082674:	f014 0404 	ands.w	r4, r4, #4
    {
        total_current += 64;
        bit2 = 1;
 8082678:	bf18      	it	ne
 808267a:	2401      	movne	r4, #1
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 808267c:	9000      	str	r0, [sp, #0]
 808267e:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8082682:	4808      	ldr	r0, [pc, #32]	; (80826a4 <_Z27serialIncreaseChargeCurrentv+0xb8>)
        total_current += 64;
 8082684:	bf18      	it	ne
 8082686:	3540      	addne	r5, #64	; 0x40
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8082688:	f006 fadf 	bl	8088c4a <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 808268c:	4805      	ldr	r0, [pc, #20]	; (80826a4 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 808268e:	f006 fa49 	bl	8088b24 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8082692:	f007 ff87 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082696:	462a      	mov	r2, r5
 8082698:	4904      	ldr	r1, [pc, #16]	; (80826ac <_Z27serialIncreaseChargeCurrentv+0xc0>)
 808269a:	f7fe f9e1 	bl	8080a60 <_ZN5Print6printfEPKcz>
}
 808269e:	b004      	add	sp, #16
 80826a0:	bd70      	pop	{r4, r5, r6, pc}
 80826a2:	bf00      	nop
 80826a4:	20000770 	.word	0x20000770
 80826a8:	0808e136 	.word	0x0808e136
 80826ac:	0808e15f 	.word	0x0808e15f

080826b0 <_Z24serialGetWifiCredentialsv>:

void serialGetWifiCredentials(void)
{
 80826b0:	b530      	push	{r4, r5, lr}
        operator const char*() const { return c_str(); }
 80826b2:	4d5a      	ldr	r5, [pc, #360]	; (808281c <_Z24serialGetWifiCredentialsv+0x16c>)
 80826b4:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 80826b6:	f007 ff75 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80826ba:	4959      	ldr	r1, [pc, #356]	; (8082820 <_Z24serialGetWifiCredentialsv+0x170>)
 80826bc:	f006 ff06 	bl	80894cc <_ZN5Print5printEPKc>
 80826c0:	4c58      	ldr	r4, [pc, #352]	; (8082824 <_Z24serialGetWifiCredentialsv+0x174>)
    Serial.println(ssid);
 80826c2:	f007 ff6f 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80826c6:	6829      	ldr	r1, [r5, #0]
 80826c8:	f006 ff13 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 80826cc:	f007 ff6a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80826d0:	4955      	ldr	r1, [pc, #340]	; (8082828 <_Z24serialGetWifiCredentialsv+0x178>)
 80826d2:	f006 fefb 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.println(password);
 80826d6:	f007 ff65 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80826da:	6821      	ldr	r1, [r4, #0]
 80826dc:	f006 ff09 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 80826e0:	f007 ff60 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80826e4:	4951      	ldr	r1, [pc, #324]	; (808282c <_Z24serialGetWifiCredentialsv+0x17c>)
 80826e6:	f006 ff04 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80826ea:	f007 ff5b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80826ee:	f24c 3150 	movw	r1, #50000	; 0xc350
 80826f2:	f007 f851 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80826f6:	f007 ff55 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80826fa:	220d      	movs	r2, #13
 80826fc:	4601      	mov	r1, r0
 80826fe:	4668      	mov	r0, sp
 8082700:	f007 f860 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    if (tempString.equals("bould"))
 8082704:	4668      	mov	r0, sp
 8082706:	494a      	ldr	r1, [pc, #296]	; (8082830 <_Z24serialGetWifiCredentialsv+0x180>)
 8082708:	f006 fe3a 	bl	8089380 <_ZNK6String6equalsEPKc>
 808270c:	2800      	cmp	r0, #0
 808270e:	d074      	beq.n	80827fa <_Z24serialGetWifiCredentialsv+0x14a>
    {
        Serial.println("Password correct!");
 8082710:	f007 ff48 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082714:	4947      	ldr	r1, [pc, #284]	; (8082834 <_Z24serialGetWifiCredentialsv+0x184>)
 8082716:	f006 feec 	bl	80894f2 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 808271a:	f007 ff43 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808271e:	4946      	ldr	r1, [pc, #280]	; (8082838 <_Z24serialGetWifiCredentialsv+0x188>)
 8082720:	f006 fee7 	bl	80894f2 <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 8082724:	f007 ff3e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082728:	f24c 3150 	movw	r1, #50000	; 0xc350
 808272c:	f007 f834 	bl	8089798 <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 8082730:	f007 ff38 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082734:	220d      	movs	r2, #13
 8082736:	4601      	mov	r1, r0
 8082738:	a804      	add	r0, sp, #16
 808273a:	f007 f843 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 808273e:	f007 ff31 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082742:	493e      	ldr	r1, [pc, #248]	; (808283c <_Z24serialGetWifiCredentialsv+0x18c>)
 8082744:	f006 fec2 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 8082748:	f007 ff2c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808274c:	9904      	ldr	r1, [sp, #16]
 808274e:	f006 fed0 	bl	80894f2 <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8082752:	f007 ff27 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082756:	493a      	ldr	r1, [pc, #232]	; (8082840 <_Z24serialGetWifiCredentialsv+0x190>)
 8082758:	f006 fecb 	bl	80894f2 <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 808275c:	f007 ff22 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082760:	220d      	movs	r2, #13
 8082762:	4601      	mov	r1, r0
 8082764:	a808      	add	r0, sp, #32
 8082766:	f007 f82d 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
        if (ok.equals("y"))
 808276a:	4936      	ldr	r1, [pc, #216]	; (8082844 <_Z24serialGetWifiCredentialsv+0x194>)
 808276c:	a808      	add	r0, sp, #32
 808276e:	f006 fe07 	bl	8089380 <_ZNK6String6equalsEPKc>
 8082772:	2800      	cmp	r0, #0
 8082774:	d04c      	beq.n	8082810 <_Z24serialGetWifiCredentialsv+0x160>
        {
            Serial.println("Saving new ssid");
 8082776:	f007 ff15 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808277a:	4933      	ldr	r1, [pc, #204]	; (8082848 <_Z24serialGetWifiCredentialsv+0x198>)
 808277c:	f006 feb9 	bl	80894f2 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082780:	a904      	add	r1, sp, #16
 8082782:	4628      	mov	r0, r5
 8082784:	f006 fd0e 	bl	80891a4 <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8082788:	f007 ff0c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808278c:	492f      	ldr	r1, [pc, #188]	; (808284c <_Z24serialGetWifiCredentialsv+0x19c>)
 808278e:	f006 feb0 	bl	80894f2 <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082792:	f007 ff07 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082796:	220d      	movs	r2, #13
 8082798:	4601      	mov	r1, r0
 808279a:	a80c      	add	r0, sp, #48	; 0x30
 808279c:	f007 f812 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 80827a0:	f007 ff00 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80827a4:	492a      	ldr	r1, [pc, #168]	; (8082850 <_Z24serialGetWifiCredentialsv+0x1a0>)
 80827a6:	f006 fe91 	bl	80894cc <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 80827aa:	f007 fefb 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80827ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80827b0:	f006 fe9f 	bl	80894f2 <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 80827b4:	f007 fef6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80827b8:	220d      	movs	r2, #13
 80827ba:	4601      	mov	r1, r0
 80827bc:	a810      	add	r0, sp, #64	; 0x40
 80827be:	f007 f801 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
            if (ok.equals("y"))
 80827c2:	4920      	ldr	r1, [pc, #128]	; (8082844 <_Z24serialGetWifiCredentialsv+0x194>)
 80827c4:	a810      	add	r0, sp, #64	; 0x40
 80827c6:	f006 fddb 	bl	8089380 <_ZNK6String6equalsEPKc>
 80827ca:	b1d8      	cbz	r0, 8082804 <_Z24serialGetWifiCredentialsv+0x154>
            {
                Serial.println("Saving new password");
 80827cc:	f007 feea 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80827d0:	4920      	ldr	r1, [pc, #128]	; (8082854 <_Z24serialGetWifiCredentialsv+0x1a4>)
 80827d2:	f006 fe8e 	bl	80894f2 <_ZN5Print7printlnEPKc>
                password = tempPassword;
 80827d6:	a90c      	add	r1, sp, #48	; 0x30
 80827d8:	4620      	mov	r0, r4
 80827da:	f006 fce3 	bl	80891a4 <_ZN6StringaSERKS_>
                sendWifiInfo();
 80827de:	f7ff fcb9 	bl	8082154 <_Z12sendWifiInfov>
            String ok = Serial.readStringUntil('\r');
 80827e2:	a810      	add	r0, sp, #64	; 0x40
 80827e4:	f006 fc64 	bl	80890b0 <_ZN6StringD1Ev>
            String tempPassword = Serial.readStringUntil('\r');
 80827e8:	a80c      	add	r0, sp, #48	; 0x30
 80827ea:	f006 fc61 	bl	80890b0 <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
 80827ee:	a808      	add	r0, sp, #32
 80827f0:	f006 fc5e 	bl	80890b0 <_ZN6StringD1Ev>
        String tempSsid = Serial.readStringUntil('\r');
 80827f4:	a804      	add	r0, sp, #16
 80827f6:	f006 fc5b 	bl	80890b0 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80827fa:	4668      	mov	r0, sp
 80827fc:	f006 fc58 	bl	80890b0 <_ZN6StringD1Ev>
        {
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 8082800:	b015      	add	sp, #84	; 0x54
 8082802:	bd30      	pop	{r4, r5, pc}
                Serial.println("okay, no problem\n\r");
 8082804:	f007 fece 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082808:	4913      	ldr	r1, [pc, #76]	; (8082858 <_Z24serialGetWifiCredentialsv+0x1a8>)
 808280a:	f006 fe72 	bl	80894f2 <_ZN5Print7printlnEPKc>
 808280e:	e7e8      	b.n	80827e2 <_Z24serialGetWifiCredentialsv+0x132>
            Serial.println("okay, no problem\n\r");
 8082810:	f007 fec8 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082814:	4910      	ldr	r1, [pc, #64]	; (8082858 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082816:	f006 fe6c 	bl	80894f2 <_ZN5Print7printlnEPKc>
 808281a:	e7e8      	b.n	80827ee <_Z24serialGetWifiCredentialsv+0x13e>
 808281c:	20000c38 	.word	0x20000c38
 8082820:	0808e17d 	.word	0x0808e17d
 8082824:	20000760 	.word	0x20000760
 8082828:	0808e193 	.word	0x0808e193
 808282c:	0808e1ad 	.word	0x0808e1ad
 8082830:	0808e1df 	.word	0x0808e1df
 8082834:	0808e1e5 	.word	0x0808e1e5
 8082838:	0808e1f7 	.word	0x0808e1f7
 808283c:	0808e207 	.word	0x0808e207
 8082840:	0808e21f 	.word	0x0808e21f
 8082844:	0808ea15 	.word	0x0808ea15
 8082848:	0808e235 	.word	0x0808e235
 808284c:	0808e245 	.word	0x0808e245
 8082850:	0808e258 	.word	0x0808e258
 8082854:	0808e274 	.word	0x0808e274
 8082858:	0808e288 	.word	0x0808e288

0808285c <_Z26serialSetSensibleIotEnablev>:

void serialSetSensibleIotEnable(void)
{
 808285c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 808285e:	f007 fea1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082862:	4919      	ldr	r1, [pc, #100]	; (80828c8 <_Z26serialSetSensibleIotEnablev+0x6c>)
 8082864:	f006 fe45 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082868:	f007 fe9c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808286c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082870:	f006 ff92 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082874:	f007 fe96 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082878:	220d      	movs	r2, #13
 808287a:	4601      	mov	r1, r0
 808287c:	4668      	mov	r0, sp
 808287e:	f006 ffa1 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082882:	4668      	mov	r0, sp
 8082884:	4911      	ldr	r1, [pc, #68]	; (80828cc <_Z26serialSetSensibleIotEnablev+0x70>)
 8082886:	f006 fd7b 	bl	8089380 <_ZNK6String6equalsEPKc>
    if (tempString == "imsensible")
 808288a:	b1b8      	cbz	r0, 80828bc <_Z26serialSetSensibleIotEnablev+0x60>
    {
        Serial.println("Password correct!");
 808288c:	f007 fe8a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082890:	490f      	ldr	r1, [pc, #60]	; (80828d0 <_Z26serialSetSensibleIotEnablev+0x74>)
 8082892:	f006 fe2e 	bl	80894f2 <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
 8082896:	f007 fe85 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808289a:	490e      	ldr	r1, [pc, #56]	; (80828d4 <_Z26serialSetSensibleIotEnablev+0x78>)
 808289c:	f006 fe29 	bl	80894f2 <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 80828a0:	2301      	movs	r3, #1
 80828a2:	4c0d      	ldr	r4, [pc, #52]	; (80828d8 <_Z26serialSetSensibleIotEnablev+0x7c>)
 80828a4:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80828a6:	f008 f96d 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80828aa:	4621      	mov	r1, r4
 80828ac:	208c      	movs	r0, #140	; 0x8c
 80828ae:	f7fe f8a5 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80828b2:	4668      	mov	r0, sp
 80828b4:	f006 fbfc 	bl	80890b0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 80828b8:	b004      	add	sp, #16
 80828ba:	bd10      	pop	{r4, pc}
        Serial.println("\n\rIncorrect password!");
 80828bc:	f007 fe72 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80828c0:	4906      	ldr	r1, [pc, #24]	; (80828dc <_Z26serialSetSensibleIotEnablev+0x80>)
 80828c2:	f006 fe16 	bl	80894f2 <_ZN5Print7printlnEPKc>
 80828c6:	e7f4      	b.n	80828b2 <_Z26serialSetSensibleIotEnablev+0x56>
 80828c8:	0808e29b 	.word	0x0808e29b
 80828cc:	0808e2de 	.word	0x0808e2de
 80828d0:	0808e1e5 	.word	0x0808e1e5
 80828d4:	0808e2e9 	.word	0x0808e2e9
 80828d8:	20000c24 	.word	0x20000c24
 80828dc:	0808e30a 	.word	0x0808e30a

080828e0 <_Z19serialResetSettingsv>:
        Serial.println("\n\rIncorrect password!");
    }
}

void serialResetSettings(void)
{
 80828e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println();
 80828e2:	f007 fe5f 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80828e6:	f006 fdf8 	bl	80894da <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 80828ea:	f007 fe5b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80828ee:	4914      	ldr	r1, [pc, #80]	; (8082940 <_Z19serialResetSettingsv+0x60>)
 80828f0:	f006 fdff 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80828f4:	f007 fe56 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80828f8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80828fc:	f006 ff4c 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082900:	f007 fe50 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082904:	220d      	movs	r2, #13
 8082906:	4601      	mov	r1, r0
 8082908:	4668      	mov	r0, sp
 808290a:	f006 ff5b 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
 808290e:	4668      	mov	r0, sp
 8082910:	490c      	ldr	r1, [pc, #48]	; (8082944 <_Z19serialResetSettingsv+0x64>)
 8082912:	f006 fd35 	bl	8089380 <_ZNK6String6equalsEPKc>

    if (tempString == "bould")
 8082916:	b160      	cbz	r0, 8082932 <_Z19serialResetSettingsv+0x52>
    {
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8082918:	f007 fe44 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808291c:	490a      	ldr	r1, [pc, #40]	; (8082948 <_Z19serialResetSettingsv+0x68>)
 808291e:	f006 fde8 	bl	80894f2 <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 8082922:	f7fe f99b 	bl	8080c5c <_Z20writeDefaultSettingsv>
    String tempString = Serial.readStringUntil('\r');
 8082926:	4668      	mov	r0, sp
 8082928:	f006 fbc2 	bl	80890b0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 808292c:	b005      	add	sp, #20
 808292e:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rIncorrect password!");
 8082932:	f007 fe37 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082936:	4905      	ldr	r1, [pc, #20]	; (808294c <_Z19serialResetSettingsv+0x6c>)
 8082938:	f006 fddb 	bl	80894f2 <_ZN5Print7printlnEPKc>
 808293c:	e7f3      	b.n	8082926 <_Z19serialResetSettingsv+0x46>
 808293e:	bf00      	nop
 8082940:	0808e320 	.word	0x0808e320
 8082944:	0808e1df 	.word	0x0808e1df
 8082948:	0808e359 	.word	0x0808e359
 808294c:	0808e30a 	.word	0x0808e30a

08082950 <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void)
{
 8082950:	b510      	push	{r4, lr}
 8082952:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8082954:	f007 fe26 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082958:	4920      	ldr	r1, [pc, #128]	; (80829dc <_Z17serialGetTimeDatev+0x8c>)
 808295a:	f006 fdca 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808295e:	f007 fe21 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082962:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082966:	f006 ff17 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808296a:	f007 fe1b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808296e:	220d      	movs	r2, #13
 8082970:	4601      	mov	r1, r0
 8082972:	4668      	mov	r0, sp
 8082974:	f006 ff26 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082978:	4668      	mov	r0, sp
 808297a:	f006 fd59 	bl	8089430 <_ZNK6String5toIntEv>
 808297e:	4604      	mov	r4, r0
    Serial.println("");
 8082980:	f007 fe10 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082984:	4916      	ldr	r1, [pc, #88]	; (80829e0 <_Z17serialGetTimeDatev+0x90>)
 8082986:	f006 fdb4 	bl	80894f2 <_ZN5Print7printlnEPKc>

    //min is the year 2000, max is the year 2100
    if (tempValue > 966012661 && tempValue < 4121686261)
 808298a:	4b16      	ldr	r3, [pc, #88]	; (80829e4 <_Z17serialGetTimeDatev+0x94>)
 808298c:	429c      	cmp	r4, r3
 808298e:	dd1e      	ble.n	80829ce <_Z17serialGetTimeDatev+0x7e>
    {
        Time.setTime(tempValue);
 8082990:	17e1      	asrs	r1, r4, #31
 8082992:	4620      	mov	r0, r4
 8082994:	f006 ffaa 	bl	80898ec <_ZN9TimeClass7setTimeEx>
        Serial.print("\n\rNew Device Time:");
 8082998:	f007 fe04 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808299c:	4912      	ldr	r1, [pc, #72]	; (80829e8 <_Z17serialGetTimeDatev+0x98>)
 808299e:	f006 fd95 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 80829a2:	f007 fdff 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80829a6:	4604      	mov	r4, r0
 80829a8:	f007 f8b7 	bl	8089b1a <_ZN9TimeClass3nowEv>
 80829ac:	4602      	mov	r2, r0
 80829ae:	17c3      	asrs	r3, r0, #31
 80829b0:	a804      	add	r0, sp, #16
 80829b2:	f006 ffaf 	bl	8089914 <_ZN9TimeClass7timeStrEx>
 80829b6:	4620      	mov	r0, r4
 80829b8:	9904      	ldr	r1, [sp, #16]
 80829ba:	f006 fd9a 	bl	80894f2 <_ZN5Print7printlnEPKc>
 80829be:	a804      	add	r0, sp, #16
 80829c0:	f006 fb76 	bl	80890b0 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80829c4:	4668      	mov	r0, sp
 80829c6:	f006 fb73 	bl	80890b0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80829ca:	b008      	add	sp, #32
 80829cc:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 80829ce:	f007 fde9 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80829d2:	4906      	ldr	r1, [pc, #24]	; (80829ec <_Z17serialGetTimeDatev+0x9c>)
 80829d4:	f006 fd8d 	bl	80894f2 <_ZN5Print7printlnEPKc>
 80829d8:	e7f4      	b.n	80829c4 <_Z17serialGetTimeDatev+0x74>
 80829da:	bf00      	nop
 80829dc:	0808e3c8 	.word	0x0808e3c8
 80829e0:	080900b9 	.word	0x080900b9
 80829e4:	39942ef5 	.word	0x39942ef5
 80829e8:	0808e403 	.word	0x0808e403
 80829ec:	0808e416 	.word	0x0808e416

080829f0 <_Z17serialGetCo2Slopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Slope(void)
{
 80829f0:	b530      	push	{r4, r5, lr}
 80829f2:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80829f4:	f007 fdd6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80829f8:	f006 fd6f 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 80829fc:	f007 fdd2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082a00:	4932      	ldr	r1, [pc, #200]	; (8082acc <_Z17serialGetCo2Slopev+0xdc>)
 8082a02:	f006 fd63 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 8082a06:	f007 fdcd 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082a0a:	4604      	mov	r4, r0
 8082a0c:	4d30      	ldr	r5, [pc, #192]	; (8082ad0 <_Z17serialGetCo2Slopev+0xe0>)
 8082a0e:	2202      	movs	r2, #2
 8082a10:	6829      	ldr	r1, [r5, #0]
 8082a12:	a806      	add	r0, sp, #24
 8082a14:	f006 fc30 	bl	8089278 <_ZN6StringC1Efi>
 8082a18:	9906      	ldr	r1, [sp, #24]
 8082a1a:	4620      	mov	r0, r4
 8082a1c:	f006 fd56 	bl	80894cc <_ZN5Print5printEPKc>
 8082a20:	a806      	add	r0, sp, #24
 8082a22:	f006 fb45 	bl	80890b0 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082a26:	f007 fdbd 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082a2a:	492a      	ldr	r1, [pc, #168]	; (8082ad4 <_Z17serialGetCo2Slopev+0xe4>)
 8082a2c:	f006 fd61 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 8082a30:	f007 fdb8 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082a34:	4928      	ldr	r1, [pc, #160]	; (8082ad8 <_Z17serialGetCo2Slopev+0xe8>)
 8082a36:	f006 fd49 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082a3a:	f007 fdb3 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082a3e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082a42:	f006 fea9 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082a46:	f007 fdad 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082a4a:	220d      	movs	r2, #13
 8082a4c:	4601      	mov	r1, r0
 8082a4e:	a802      	add	r0, sp, #8
 8082a50:	f006 feb8 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082a54:	a802      	add	r0, sp, #8
 8082a56:	f006 fcf0 	bl	808943a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10.0)
 8082a5a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082a5e:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 10.0)
 8082a60:	f009 f908 	bl	808bc74 <__aeabi_fcmpge>
 8082a64:	b358      	cbz	r0, 8082abe <_Z17serialGetCo2Slopev+0xce>
 8082a66:	4620      	mov	r0, r4
 8082a68:	491c      	ldr	r1, [pc, #112]	; (8082adc <_Z17serialGetCo2Slopev+0xec>)
 8082a6a:	f009 f8ef 	bl	808bc4c <__aeabi_fcmplt>
 8082a6e:	b330      	cbz	r0, 8082abe <_Z17serialGetCo2Slopev+0xce>
    {
        CO2_slope = tempfloat;
        tempfloat *= 100;
 8082a70:	491b      	ldr	r1, [pc, #108]	; (8082ae0 <_Z17serialGetCo2Slopev+0xf0>)
 8082a72:	4620      	mov	r0, r4
        CO2_slope = tempfloat;
 8082a74:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082a76:	f008 ff4b 	bl	808b910 <__aeabi_fmul>
        tempValue = tempfloat;
 8082a7a:	f009 f90f 	bl	808bc9c <__aeabi_f2iz>
 8082a7e:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8082a80:	f007 fd90 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082a84:	4917      	ldr	r1, [pc, #92]	; (8082ae4 <_Z17serialGetCo2Slopev+0xf4>)
 8082a86:	f006 fd21 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope, 2));
 8082a8a:	f007 fd8b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082a8e:	4604      	mov	r4, r0
 8082a90:	2202      	movs	r2, #2
 8082a92:	6829      	ldr	r1, [r5, #0]
 8082a94:	a806      	add	r0, sp, #24
 8082a96:	f006 fbef 	bl	8089278 <_ZN6StringC1Efi>
 8082a9a:	9906      	ldr	r1, [sp, #24]
 8082a9c:	4620      	mov	r0, r4
 8082a9e:	f006 fd28 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082aa2:	a806      	add	r0, sp, #24
 8082aa4:	f006 fb04 	bl	80890b0 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8082aa8:	f008 f86c 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8082aac:	2008      	movs	r0, #8
 8082aae:	a901      	add	r1, sp, #4
 8082ab0:	f7fd ffa4 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082ab4:	a802      	add	r0, sp, #8
 8082ab6:	f006 fafb 	bl	80890b0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082aba:	b00b      	add	sp, #44	; 0x2c
 8082abc:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082abe:	f007 fd71 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082ac2:	4909      	ldr	r1, [pc, #36]	; (8082ae8 <_Z17serialGetCo2Slopev+0xf8>)
 8082ac4:	f006 fd15 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082ac8:	e7f4      	b.n	8082ab4 <_Z17serialGetCo2Slopev+0xc4>
 8082aca:	bf00      	nop
 8082acc:	0808e427 	.word	0x0808e427
 8082ad0:	200002b8 	.word	0x200002b8
 8082ad4:	0808e43a 	.word	0x0808e43a
 8082ad8:	0808e43f 	.word	0x0808e43f
 8082adc:	41200000 	.word	0x41200000
 8082ae0:	42c80000 	.word	0x42c80000
 8082ae4:	0808e455 	.word	0x0808e455
 8082ae8:	0808e416 	.word	0x0808e416
 8082aec:	00000000 	.word	0x00000000

08082af0 <_Z16serialGetCoSlopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoSlope(void)
{
 8082af0:	b530      	push	{r4, r5, lr}
 8082af2:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082af4:	f007 fd56 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082af8:	f006 fcef 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 8082afc:	f007 fd52 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082b00:	4937      	ldr	r1, [pc, #220]	; (8082be0 <_Z16serialGetCoSlopev+0xf0>)
 8082b02:	f006 fce3 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(String(CO_slopeA, 2));
 8082b06:	f007 fd4d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082b0a:	4604      	mov	r4, r0
 8082b0c:	4d35      	ldr	r5, [pc, #212]	; (8082be4 <_Z16serialGetCoSlopev+0xf4>)
 8082b0e:	2202      	movs	r2, #2
 8082b10:	6829      	ldr	r1, [r5, #0]
 8082b12:	a806      	add	r0, sp, #24
 8082b14:	f006 fbb0 	bl	8089278 <_ZN6StringC1Efi>
 8082b18:	9906      	ldr	r1, [sp, #24]
 8082b1a:	4620      	mov	r0, r4
 8082b1c:	f006 fcd6 	bl	80894cc <_ZN5Print5printEPKc>
 8082b20:	a806      	add	r0, sp, #24
 8082b22:	f006 fac5 	bl	80890b0 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082b26:	f007 fd3d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082b2a:	492f      	ldr	r1, [pc, #188]	; (8082be8 <_Z16serialGetCoSlopev+0xf8>)
 8082b2c:	f006 fce1 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8082b30:	f007 fd38 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082b34:	492d      	ldr	r1, [pc, #180]	; (8082bec <_Z16serialGetCoSlopev+0xfc>)
 8082b36:	f006 fcc9 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082b3a:	f007 fd33 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082b3e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082b42:	f006 fe29 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082b46:	f007 fd2d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082b4a:	220d      	movs	r2, #13
 8082b4c:	4601      	mov	r1, r0
 8082b4e:	a802      	add	r0, sp, #8
 8082b50:	f006 fe38 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082b54:	a802      	add	r0, sp, #8
 8082b56:	f006 fc70 	bl	808943a <_ZNK6String7toFloatEv>
 8082b5a:	4604      	mov	r4, r0
    int tempValue;

    if (tempfloat >= 0.1 && tempfloat < 2.0)
 8082b5c:	f008 fa2a 	bl	808afb4 <__aeabi_f2d>
 8082b60:	a31d      	add	r3, pc, #116	; (adr r3, 8082bd8 <_Z16serialGetCoSlopev+0xe8>)
 8082b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082b66:	f008 fd03 	bl	808b570 <__aeabi_dcmpge>
 8082b6a:	b360      	cbz	r0, 8082bc6 <_Z16serialGetCoSlopev+0xd6>
 8082b6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8082b70:	4620      	mov	r0, r4
 8082b72:	f009 f86b 	bl	808bc4c <__aeabi_fcmplt>
 8082b76:	b330      	cbz	r0, 8082bc6 <_Z16serialGetCoSlopev+0xd6>
    {
        CO_slopeA = tempfloat;
        tempfloat *= 100;
 8082b78:	491d      	ldr	r1, [pc, #116]	; (8082bf0 <_Z16serialGetCoSlopev+0x100>)
 8082b7a:	4620      	mov	r0, r4
        CO_slopeA = tempfloat;
 8082b7c:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082b7e:	f008 fec7 	bl	808b910 <__aeabi_fmul>
        tempValue = tempfloat;
 8082b82:	f009 f88b 	bl	808bc9c <__aeabi_f2iz>
 8082b86:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew COA slope: ");
 8082b88:	f007 fd0c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082b8c:	4919      	ldr	r1, [pc, #100]	; (8082bf4 <_Z16serialGetCoSlopev+0x104>)
 8082b8e:	f006 fc9d 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(String(CO_slopeA, 2));
 8082b92:	f007 fd07 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082b96:	4604      	mov	r4, r0
 8082b98:	2202      	movs	r2, #2
 8082b9a:	6829      	ldr	r1, [r5, #0]
 8082b9c:	a806      	add	r0, sp, #24
 8082b9e:	f006 fb6b 	bl	8089278 <_ZN6StringC1Efi>
 8082ba2:	9906      	ldr	r1, [sp, #24]
 8082ba4:	4620      	mov	r0, r4
 8082ba6:	f006 fca4 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082baa:	a806      	add	r0, sp, #24
 8082bac:	f006 fa80 	bl	80890b0 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 8082bb0:	f007 ffe8 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8082bb4:	2010      	movs	r0, #16
 8082bb6:	a901      	add	r1, sp, #4
 8082bb8:	f7fd ff20 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082bbc:	a802      	add	r0, sp, #8
 8082bbe:	f006 fa77 	bl	80890b0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082bc2:	b00b      	add	sp, #44	; 0x2c
 8082bc4:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082bc6:	f007 fced 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082bca:	490b      	ldr	r1, [pc, #44]	; (8082bf8 <_Z16serialGetCoSlopev+0x108>)
 8082bcc:	f006 fc91 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082bd0:	e7f4      	b.n	8082bbc <_Z16serialGetCoSlopev+0xcc>
 8082bd2:	bf00      	nop
 8082bd4:	f3af 8000 	nop.w
 8082bd8:	9999999a 	.word	0x9999999a
 8082bdc:	3fb99999 	.word	0x3fb99999
 8082be0:	0808e467 	.word	0x0808e467
 8082be4:	200002c8 	.word	0x200002c8
 8082be8:	0808e43a 	.word	0x0808e43a
 8082bec:	0808e479 	.word	0x0808e479
 8082bf0:	42c80000 	.word	0x42c80000
 8082bf4:	0808e48e 	.word	0x0808e48e
 8082bf8:	0808e416 	.word	0x0808e416

08082bfc <_Z17serialGetPm1Slopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm1Slope(void)
{
 8082bfc:	b530      	push	{r4, r5, lr}
 8082bfe:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082c00:	f007 fcd0 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082c04:	f006 fc69 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 8082c08:	f007 fccc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082c0c:	4932      	ldr	r1, [pc, #200]	; (8082cd8 <_Z17serialGetPm1Slopev+0xdc>)
 8082c0e:	f006 fc5d 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 8082c12:	f007 fcc7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082c16:	4604      	mov	r4, r0
 8082c18:	4d30      	ldr	r5, [pc, #192]	; (8082cdc <_Z17serialGetPm1Slopev+0xe0>)
 8082c1a:	2202      	movs	r2, #2
 8082c1c:	6829      	ldr	r1, [r5, #0]
 8082c1e:	a806      	add	r0, sp, #24
 8082c20:	f006 fb2a 	bl	8089278 <_ZN6StringC1Efi>
 8082c24:	9906      	ldr	r1, [sp, #24]
 8082c26:	4620      	mov	r0, r4
 8082c28:	f006 fc50 	bl	80894cc <_ZN5Print5printEPKc>
 8082c2c:	a806      	add	r0, sp, #24
 8082c2e:	f006 fa3f 	bl	80890b0 <_ZN6StringD1Ev>
    Serial.println(" ");
 8082c32:	f007 fcb7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082c36:	492a      	ldr	r1, [pc, #168]	; (8082ce0 <_Z17serialGetPm1Slopev+0xe4>)
 8082c38:	f006 fc5b 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 8082c3c:	f007 fcb2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082c40:	4928      	ldr	r1, [pc, #160]	; (8082ce4 <_Z17serialGetPm1Slopev+0xe8>)
 8082c42:	f006 fc43 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082c46:	f007 fcad 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082c4a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082c4e:	f006 fda3 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082c52:	f007 fca7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082c56:	220d      	movs	r2, #13
 8082c58:	4601      	mov	r1, r0
 8082c5a:	a802      	add	r0, sp, #8
 8082c5c:	f006 fdb2 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082c60:	a802      	add	r0, sp, #8
 8082c62:	f006 fbea 	bl	808943a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082c66:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082c6a:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082c6c:	f009 f802 	bl	808bc74 <__aeabi_fcmpge>
 8082c70:	b360      	cbz	r0, 8082ccc <_Z17serialGetPm1Slopev+0xd0>
 8082c72:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082c76:	4620      	mov	r0, r4
 8082c78:	f008 ffe8 	bl	808bc4c <__aeabi_fcmplt>
 8082c7c:	b330      	cbz	r0, 8082ccc <_Z17serialGetPm1Slopev+0xd0>
    {
        PM_1_slope = tempfloat;
        tempfloat *= 100;
 8082c7e:	491a      	ldr	r1, [pc, #104]	; (8082ce8 <_Z17serialGetPm1Slopev+0xec>)
 8082c80:	4620      	mov	r0, r4
        PM_1_slope = tempfloat;
 8082c82:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082c84:	f008 fe44 	bl	808b910 <__aeabi_fmul>
        tempValue = tempfloat;
 8082c88:	f009 f808 	bl	808bc9c <__aeabi_f2iz>
 8082c8c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 8082c8e:	f007 fc89 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082c92:	4916      	ldr	r1, [pc, #88]	; (8082cec <_Z17serialGetPm1Slopev+0xf0>)
 8082c94:	f006 fc1a 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 8082c98:	f007 fc84 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082c9c:	4604      	mov	r4, r0
 8082c9e:	2202      	movs	r2, #2
 8082ca0:	6829      	ldr	r1, [r5, #0]
 8082ca2:	a806      	add	r0, sp, #24
 8082ca4:	f006 fae8 	bl	8089278 <_ZN6StringC1Efi>
 8082ca8:	9906      	ldr	r1, [sp, #24]
 8082caa:	4620      	mov	r0, r4
 8082cac:	f006 fc21 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082cb0:	a806      	add	r0, sp, #24
 8082cb2:	f006 f9fd 	bl	80890b0 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8082cb6:	f007 ff65 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8082cba:	2018      	movs	r0, #24
 8082cbc:	a901      	add	r1, sp, #4
 8082cbe:	f7fd fe9d 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082cc2:	a802      	add	r0, sp, #8
 8082cc4:	f006 f9f4 	bl	80890b0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082cc8:	b00b      	add	sp, #44	; 0x2c
 8082cca:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082ccc:	f007 fc6a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082cd0:	4907      	ldr	r1, [pc, #28]	; (8082cf0 <_Z17serialGetPm1Slopev+0xf4>)
 8082cd2:	f006 fc0e 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082cd6:	e7f4      	b.n	8082cc2 <_Z17serialGetPm1Slopev+0xc6>
 8082cd8:	0808e4a0 	.word	0x0808e4a0
 8082cdc:	200002ec 	.word	0x200002ec
 8082ce0:	0808fd99 	.word	0x0808fd99
 8082ce4:	0808e4b3 	.word	0x0808e4b3
 8082ce8:	42c80000 	.word	0x42c80000
 8082cec:	0808e4c9 	.word	0x0808e4c9
 8082cf0:	0808e416 	.word	0x0808e416

08082cf4 <_Z18serialGetPm25Slopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm25Slope(void)
{
 8082cf4:	b530      	push	{r4, r5, lr}
 8082cf6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082cf8:	f007 fc54 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082cfc:	f006 fbed 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 8082d00:	f007 fc50 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082d04:	4932      	ldr	r1, [pc, #200]	; (8082dd0 <_Z18serialGetPm25Slopev+0xdc>)
 8082d06:	f006 fbe1 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 8082d0a:	f007 fc4b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082d0e:	4604      	mov	r4, r0
 8082d10:	4d30      	ldr	r5, [pc, #192]	; (8082dd4 <_Z18serialGetPm25Slopev+0xe0>)
 8082d12:	2202      	movs	r2, #2
 8082d14:	6829      	ldr	r1, [r5, #0]
 8082d16:	a806      	add	r0, sp, #24
 8082d18:	f006 faae 	bl	8089278 <_ZN6StringC1Efi>
 8082d1c:	9906      	ldr	r1, [sp, #24]
 8082d1e:	4620      	mov	r0, r4
 8082d20:	f006 fbd4 	bl	80894cc <_ZN5Print5printEPKc>
 8082d24:	a806      	add	r0, sp, #24
 8082d26:	f006 f9c3 	bl	80890b0 <_ZN6StringD1Ev>
    Serial.println(" ");
 8082d2a:	f007 fc3b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082d2e:	492a      	ldr	r1, [pc, #168]	; (8082dd8 <_Z18serialGetPm25Slopev+0xe4>)
 8082d30:	f006 fbdf 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 8082d34:	f007 fc36 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082d38:	4928      	ldr	r1, [pc, #160]	; (8082ddc <_Z18serialGetPm25Slopev+0xe8>)
 8082d3a:	f006 fbc7 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082d3e:	f007 fc31 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082d42:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082d46:	f006 fd27 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082d4a:	f007 fc2b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082d4e:	220d      	movs	r2, #13
 8082d50:	4601      	mov	r1, r0
 8082d52:	a802      	add	r0, sp, #8
 8082d54:	f006 fd36 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082d58:	a802      	add	r0, sp, #8
 8082d5a:	f006 fb6e 	bl	808943a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082d5e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082d62:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082d64:	f008 ff86 	bl	808bc74 <__aeabi_fcmpge>
 8082d68:	b360      	cbz	r0, 8082dc4 <_Z18serialGetPm25Slopev+0xd0>
 8082d6a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082d6e:	4620      	mov	r0, r4
 8082d70:	f008 ff6c 	bl	808bc4c <__aeabi_fcmplt>
 8082d74:	b330      	cbz	r0, 8082dc4 <_Z18serialGetPm25Slopev+0xd0>
    {
        PM_25_slope = tempfloat;
        tempfloat *= 100;
 8082d76:	491a      	ldr	r1, [pc, #104]	; (8082de0 <_Z18serialGetPm25Slopev+0xec>)
 8082d78:	4620      	mov	r0, r4
        PM_25_slope = tempfloat;
 8082d7a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082d7c:	f008 fdc8 	bl	808b910 <__aeabi_fmul>
        tempValue = tempfloat;
 8082d80:	f008 ff8c 	bl	808bc9c <__aeabi_f2iz>
 8082d84:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 8082d86:	f007 fc0d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082d8a:	4916      	ldr	r1, [pc, #88]	; (8082de4 <_Z18serialGetPm25Slopev+0xf0>)
 8082d8c:	f006 fb9e 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope, 2));
 8082d90:	f007 fc08 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082d94:	4604      	mov	r4, r0
 8082d96:	2202      	movs	r2, #2
 8082d98:	6829      	ldr	r1, [r5, #0]
 8082d9a:	a806      	add	r0, sp, #24
 8082d9c:	f006 fa6c 	bl	8089278 <_ZN6StringC1Efi>
 8082da0:	9906      	ldr	r1, [sp, #24]
 8082da2:	4620      	mov	r0, r4
 8082da4:	f006 fba5 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082da8:	a806      	add	r0, sp, #24
 8082daa:	f006 f981 	bl	80890b0 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8082dae:	f007 fee9 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8082db2:	2020      	movs	r0, #32
 8082db4:	a901      	add	r1, sp, #4
 8082db6:	f7fd fe21 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082dba:	a802      	add	r0, sp, #8
 8082dbc:	f006 f978 	bl	80890b0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082dc0:	b00b      	add	sp, #44	; 0x2c
 8082dc2:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082dc4:	f007 fbee 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082dc8:	4907      	ldr	r1, [pc, #28]	; (8082de8 <_Z18serialGetPm25Slopev+0xf4>)
 8082dca:	f006 fb92 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082dce:	e7f4      	b.n	8082dba <_Z18serialGetPm25Slopev+0xc6>
 8082dd0:	0808e4db 	.word	0x0808e4db
 8082dd4:	200002f4 	.word	0x200002f4
 8082dd8:	0808fd99 	.word	0x0808fd99
 8082ddc:	0808e4f0 	.word	0x0808e4f0
 8082de0:	42c80000 	.word	0x42c80000
 8082de4:	0808e508 	.word	0x0808e508
 8082de8:	0808e416 	.word	0x0808e416

08082dec <_Z18serialGetPm10Slopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm10Slope(void)
{
 8082dec:	b530      	push	{r4, r5, lr}
 8082dee:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082df0:	f007 fbd8 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082df4:	f006 fb71 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 8082df8:	f007 fbd4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082dfc:	4932      	ldr	r1, [pc, #200]	; (8082ec8 <_Z18serialGetPm10Slopev+0xdc>)
 8082dfe:	f006 fb65 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 8082e02:	f007 fbcf 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082e06:	4604      	mov	r4, r0
 8082e08:	4d30      	ldr	r5, [pc, #192]	; (8082ecc <_Z18serialGetPm10Slopev+0xe0>)
 8082e0a:	2202      	movs	r2, #2
 8082e0c:	6829      	ldr	r1, [r5, #0]
 8082e0e:	a806      	add	r0, sp, #24
 8082e10:	f006 fa32 	bl	8089278 <_ZN6StringC1Efi>
 8082e14:	9906      	ldr	r1, [sp, #24]
 8082e16:	4620      	mov	r0, r4
 8082e18:	f006 fb58 	bl	80894cc <_ZN5Print5printEPKc>
 8082e1c:	a806      	add	r0, sp, #24
 8082e1e:	f006 f947 	bl	80890b0 <_ZN6StringD1Ev>
    Serial.println(" ");
 8082e22:	f007 fbbf 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082e26:	492a      	ldr	r1, [pc, #168]	; (8082ed0 <_Z18serialGetPm10Slopev+0xe4>)
 8082e28:	f006 fb63 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 8082e2c:	f007 fbba 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082e30:	4928      	ldr	r1, [pc, #160]	; (8082ed4 <_Z18serialGetPm10Slopev+0xe8>)
 8082e32:	f006 fb4b 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082e36:	f007 fbb5 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082e3a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082e3e:	f006 fcab 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082e42:	f007 fbaf 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082e46:	220d      	movs	r2, #13
 8082e48:	4601      	mov	r1, r0
 8082e4a:	a802      	add	r0, sp, #8
 8082e4c:	f006 fcba 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082e50:	a802      	add	r0, sp, #8
 8082e52:	f006 faf2 	bl	808943a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082e56:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082e5a:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082e5c:	f008 ff0a 	bl	808bc74 <__aeabi_fcmpge>
 8082e60:	b360      	cbz	r0, 8082ebc <_Z18serialGetPm10Slopev+0xd0>
 8082e62:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082e66:	4620      	mov	r0, r4
 8082e68:	f008 fef0 	bl	808bc4c <__aeabi_fcmplt>
 8082e6c:	b330      	cbz	r0, 8082ebc <_Z18serialGetPm10Slopev+0xd0>
    {
        PM_10_slope = tempfloat;
        tempfloat *= 100;
 8082e6e:	491a      	ldr	r1, [pc, #104]	; (8082ed8 <_Z18serialGetPm10Slopev+0xec>)
 8082e70:	4620      	mov	r0, r4
        PM_10_slope = tempfloat;
 8082e72:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082e74:	f008 fd4c 	bl	808b910 <__aeabi_fmul>
        tempValue = tempfloat;
 8082e78:	f008 ff10 	bl	808bc9c <__aeabi_f2iz>
 8082e7c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 8082e7e:	f007 fb91 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082e82:	4916      	ldr	r1, [pc, #88]	; (8082edc <_Z18serialGetPm10Slopev+0xf0>)
 8082e84:	f006 fb22 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope, 2));
 8082e88:	f007 fb8c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082e8c:	4604      	mov	r4, r0
 8082e8e:	2202      	movs	r2, #2
 8082e90:	6829      	ldr	r1, [r5, #0]
 8082e92:	a806      	add	r0, sp, #24
 8082e94:	f006 f9f0 	bl	8089278 <_ZN6StringC1Efi>
 8082e98:	9906      	ldr	r1, [sp, #24]
 8082e9a:	4620      	mov	r0, r4
 8082e9c:	f006 fb29 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082ea0:	a806      	add	r0, sp, #24
 8082ea2:	f006 f905 	bl	80890b0 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8082ea6:	f007 fe6d 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8082eaa:	2028      	movs	r0, #40	; 0x28
 8082eac:	a901      	add	r1, sp, #4
 8082eae:	f7fd fda5 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082eb2:	a802      	add	r0, sp, #8
 8082eb4:	f006 f8fc 	bl	80890b0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082eb8:	b00b      	add	sp, #44	; 0x2c
 8082eba:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082ebc:	f007 fb72 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082ec0:	4907      	ldr	r1, [pc, #28]	; (8082ee0 <_Z18serialGetPm10Slopev+0xf4>)
 8082ec2:	f006 fb16 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082ec6:	e7f4      	b.n	8082eb2 <_Z18serialGetPm10Slopev+0xc6>
 8082ec8:	0808e51c 	.word	0x0808e51c
 8082ecc:	200002e4 	.word	0x200002e4
 8082ed0:	0808fd99 	.word	0x0808fd99
 8082ed4:	0808e530 	.word	0x0808e530
 8082ed8:	42c80000 	.word	0x42c80000
 8082edc:	0808e547 	.word	0x0808e547
 8082ee0:	0808e416 	.word	0x0808e416

08082ee4 <_Z25serialGetTemperatureSlopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetTemperatureSlope(void) 
{
 8082ee4:	b530      	push	{r4, r5, lr}
 8082ee6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082ee8:	f007 fb5c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082eec:	f006 faf5 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 8082ef0:	f007 fb58 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082ef4:	4932      	ldr	r1, [pc, #200]	; (8082fc0 <_Z25serialGetTemperatureSlopev+0xdc>)
 8082ef6:	f006 fae9 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 8082efa:	f007 fb53 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082efe:	4604      	mov	r4, r0
 8082f00:	4d30      	ldr	r5, [pc, #192]	; (8082fc4 <_Z25serialGetTemperatureSlopev+0xe0>)
 8082f02:	2202      	movs	r2, #2
 8082f04:	6829      	ldr	r1, [r5, #0]
 8082f06:	a806      	add	r0, sp, #24
 8082f08:	f006 f9b6 	bl	8089278 <_ZN6StringC1Efi>
 8082f0c:	9906      	ldr	r1, [sp, #24]
 8082f0e:	4620      	mov	r0, r4
 8082f10:	f006 fadc 	bl	80894cc <_ZN5Print5printEPKc>
 8082f14:	a806      	add	r0, sp, #24
 8082f16:	f006 f8cb 	bl	80890b0 <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 8082f1a:	f007 fb43 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082f1e:	492a      	ldr	r1, [pc, #168]	; (8082fc8 <_Z25serialGetTemperatureSlopev+0xe4>)
 8082f20:	f006 fae7 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 8082f24:	f007 fb3e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082f28:	4928      	ldr	r1, [pc, #160]	; (8082fcc <_Z25serialGetTemperatureSlopev+0xe8>)
 8082f2a:	f006 facf 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082f2e:	f007 fb39 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082f32:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082f36:	f006 fc2f 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082f3a:	f007 fb33 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082f3e:	220d      	movs	r2, #13
 8082f40:	4601      	mov	r1, r0
 8082f42:	a802      	add	r0, sp, #8
 8082f44:	f006 fc3e 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082f48:	a802      	add	r0, sp, #8
 8082f4a:	f006 fa76 	bl	808943a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082f4e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082f52:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082f54:	f008 fe8e 	bl	808bc74 <__aeabi_fcmpge>
 8082f58:	b360      	cbz	r0, 8082fb4 <_Z25serialGetTemperatureSlopev+0xd0>
 8082f5a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082f5e:	4620      	mov	r0, r4
 8082f60:	f008 fe74 	bl	808bc4c <__aeabi_fcmplt>
 8082f64:	b330      	cbz	r0, 8082fb4 <_Z25serialGetTemperatureSlopev+0xd0>
    {
        temp_slope = tempfloat;
        tempfloat *= 100;
 8082f66:	491a      	ldr	r1, [pc, #104]	; (8082fd0 <_Z25serialGetTemperatureSlopev+0xec>)
 8082f68:	4620      	mov	r0, r4
        temp_slope = tempfloat;
 8082f6a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082f6c:	f008 fcd0 	bl	808b910 <__aeabi_fmul>
        tempValue = tempfloat;
 8082f70:	f008 fe94 	bl	808bc9c <__aeabi_f2iz>
 8082f74:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 8082f76:	f007 fb15 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082f7a:	4916      	ldr	r1, [pc, #88]	; (8082fd4 <_Z25serialGetTemperatureSlopev+0xf0>)
 8082f7c:	f006 faa6 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope, 2));
 8082f80:	f007 fb10 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082f84:	4604      	mov	r4, r0
 8082f86:	2202      	movs	r2, #2
 8082f88:	6829      	ldr	r1, [r5, #0]
 8082f8a:	a806      	add	r0, sp, #24
 8082f8c:	f006 f974 	bl	8089278 <_ZN6StringC1Efi>
 8082f90:	9906      	ldr	r1, [sp, #24]
 8082f92:	4620      	mov	r0, r4
 8082f94:	f006 faad 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082f98:	a806      	add	r0, sp, #24
 8082f9a:	f006 f889 	bl	80890b0 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 8082f9e:	f007 fdf1 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8082fa2:	2030      	movs	r0, #48	; 0x30
 8082fa4:	a901      	add	r1, sp, #4
 8082fa6:	f7fd fd29 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082faa:	a802      	add	r0, sp, #8
 8082fac:	f006 f880 	bl	80890b0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082fb0:	b00b      	add	sp, #44	; 0x2c
 8082fb2:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082fb4:	f007 faf6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082fb8:	4907      	ldr	r1, [pc, #28]	; (8082fd8 <_Z25serialGetTemperatureSlopev+0xf4>)
 8082fba:	f006 fa9a 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8082fbe:	e7f4      	b.n	8082faa <_Z25serialGetTemperatureSlopev+0xc6>
 8082fc0:	0808e55a 	.word	0x0808e55a
 8082fc4:	20000c60 	.word	0x20000c60
 8082fc8:	0808e575 	.word	0x0808e575
 8082fcc:	0808e580 	.word	0x0808e580
 8082fd0:	42c80000 	.word	0x42c80000
 8082fd4:	0808e59e 	.word	0x0808e59e
 8082fd8:	0808e416 	.word	0x0808e416

08082fdc <_Z22serialGetPressureSlopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureSlope(void)
{
 8082fdc:	b530      	push	{r4, r5, lr}
 8082fde:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082fe0:	f007 fae0 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082fe4:	f006 fa79 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 8082fe8:	f007 fadc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082fec:	4932      	ldr	r1, [pc, #200]	; (80830b8 <_Z22serialGetPressureSlopev+0xdc>)
 8082fee:	f006 fa6d 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 8082ff2:	f007 fad7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8082ff6:	4604      	mov	r4, r0
 8082ff8:	4d30      	ldr	r5, [pc, #192]	; (80830bc <_Z22serialGetPressureSlopev+0xe0>)
 8082ffa:	2202      	movs	r2, #2
 8082ffc:	6829      	ldr	r1, [r5, #0]
 8082ffe:	a806      	add	r0, sp, #24
 8083000:	f006 f93a 	bl	8089278 <_ZN6StringC1Efi>
 8083004:	9906      	ldr	r1, [sp, #24]
 8083006:	4620      	mov	r0, r4
 8083008:	f006 fa60 	bl	80894cc <_ZN5Print5printEPKc>
 808300c:	a806      	add	r0, sp, #24
 808300e:	f006 f84f 	bl	80890b0 <_ZN6StringD1Ev>
    Serial.println(" torr");
 8083012:	f007 fac7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083016:	492a      	ldr	r1, [pc, #168]	; (80830c0 <_Z22serialGetPressureSlopev+0xe4>)
 8083018:	f006 fa6b 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 808301c:	f007 fac2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083020:	4928      	ldr	r1, [pc, #160]	; (80830c4 <_Z22serialGetPressureSlopev+0xe8>)
 8083022:	f006 fa53 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083026:	f007 fabd 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808302a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808302e:	f006 fbb3 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083032:	f007 fab7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083036:	220d      	movs	r2, #13
 8083038:	4601      	mov	r1, r0
 808303a:	a802      	add	r0, sp, #8
 808303c:	f006 fbc2 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083040:	a802      	add	r0, sp, #8
 8083042:	f006 f9fa 	bl	808943a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8083046:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 808304a:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 808304c:	f008 fe12 	bl	808bc74 <__aeabi_fcmpge>
 8083050:	b360      	cbz	r0, 80830ac <_Z22serialGetPressureSlopev+0xd0>
 8083052:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083056:	4620      	mov	r0, r4
 8083058:	f008 fdf8 	bl	808bc4c <__aeabi_fcmplt>
 808305c:	b330      	cbz	r0, 80830ac <_Z22serialGetPressureSlopev+0xd0>
    {
        pressure_slope = tempfloat;
        tempfloat *= 100;
 808305e:	491a      	ldr	r1, [pc, #104]	; (80830c8 <_Z22serialGetPressureSlopev+0xec>)
 8083060:	4620      	mov	r0, r4
        pressure_slope = tempfloat;
 8083062:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8083064:	f008 fc54 	bl	808b910 <__aeabi_fmul>
        tempValue = tempfloat;
 8083068:	f008 fe18 	bl	808bc9c <__aeabi_f2iz>
 808306c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 808306e:	f007 fa99 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083072:	4916      	ldr	r1, [pc, #88]	; (80830cc <_Z22serialGetPressureSlopev+0xf0>)
 8083074:	f006 fa2a 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope, 2));
 8083078:	f007 fa94 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808307c:	4604      	mov	r4, r0
 808307e:	2202      	movs	r2, #2
 8083080:	6829      	ldr	r1, [r5, #0]
 8083082:	a806      	add	r0, sp, #24
 8083084:	f006 f8f8 	bl	8089278 <_ZN6StringC1Efi>
 8083088:	9906      	ldr	r1, [sp, #24]
 808308a:	4620      	mov	r0, r4
 808308c:	f006 fa31 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8083090:	a806      	add	r0, sp, #24
 8083092:	f006 f80d 	bl	80890b0 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8083096:	f007 fd75 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 808309a:	2038      	movs	r0, #56	; 0x38
 808309c:	a901      	add	r1, sp, #4
 808309e:	f7fd fcad 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80830a2:	a802      	add	r0, sp, #8
 80830a4:	f006 f804 	bl	80890b0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80830a8:	b00b      	add	sp, #44	; 0x2c
 80830aa:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 80830ac:	f007 fa7a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80830b0:	4907      	ldr	r1, [pc, #28]	; (80830d0 <_Z22serialGetPressureSlopev+0xf4>)
 80830b2:	f006 fa1e 	bl	80894f2 <_ZN5Print7printlnEPKc>
 80830b6:	e7f4      	b.n	80830a2 <_Z22serialGetPressureSlopev+0xc6>
 80830b8:	0808e5b8 	.word	0x0808e5b8
 80830bc:	20000798 	.word	0x20000798
 80830c0:	0808e5d0 	.word	0x0808e5d0
 80830c4:	0808e5d6 	.word	0x0808e5d6
 80830c8:	42c80000 	.word	0x42c80000
 80830cc:	0808e5f1 	.word	0x0808e5f1
 80830d0:	0808e416 	.word	0x0808e416

080830d4 <_Z22serialGetHumiditySlopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumiditySlope(void)
{
 80830d4:	b530      	push	{r4, r5, lr}
 80830d6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80830d8:	f007 fa64 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80830dc:	f006 f9fd 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 80830e0:	f007 fa60 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80830e4:	4932      	ldr	r1, [pc, #200]	; (80831b0 <_Z22serialGetHumiditySlopev+0xdc>)
 80830e6:	f006 f9f1 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 80830ea:	f007 fa5b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80830ee:	4604      	mov	r4, r0
 80830f0:	4d30      	ldr	r5, [pc, #192]	; (80831b4 <_Z22serialGetHumiditySlopev+0xe0>)
 80830f2:	2202      	movs	r2, #2
 80830f4:	6829      	ldr	r1, [r5, #0]
 80830f6:	a806      	add	r0, sp, #24
 80830f8:	f006 f8be 	bl	8089278 <_ZN6StringC1Efi>
 80830fc:	9906      	ldr	r1, [sp, #24]
 80830fe:	4620      	mov	r0, r4
 8083100:	f006 f9e4 	bl	80894cc <_ZN5Print5printEPKc>
 8083104:	a806      	add	r0, sp, #24
 8083106:	f005 ffd3 	bl	80890b0 <_ZN6StringD1Ev>
    Serial.println(" %");
 808310a:	f007 fa4b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808310e:	492a      	ldr	r1, [pc, #168]	; (80831b8 <_Z22serialGetHumiditySlopev+0xe4>)
 8083110:	f006 f9ef 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 8083114:	f007 fa46 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083118:	4928      	ldr	r1, [pc, #160]	; (80831bc <_Z22serialGetHumiditySlopev+0xe8>)
 808311a:	f006 f9d7 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808311e:	f007 fa41 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083122:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083126:	f006 fb37 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808312a:	f007 fa3b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808312e:	220d      	movs	r2, #13
 8083130:	4601      	mov	r1, r0
 8083132:	a802      	add	r0, sp, #8
 8083134:	f006 fb46 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083138:	a802      	add	r0, sp, #8
 808313a:	f006 f97e 	bl	808943a <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10)
 808313e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8083142:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 10)
 8083144:	f008 fd96 	bl	808bc74 <__aeabi_fcmpge>
 8083148:	b358      	cbz	r0, 80831a2 <_Z22serialGetHumiditySlopev+0xce>
 808314a:	4620      	mov	r0, r4
 808314c:	491c      	ldr	r1, [pc, #112]	; (80831c0 <_Z22serialGetHumiditySlopev+0xec>)
 808314e:	f008 fd7d 	bl	808bc4c <__aeabi_fcmplt>
 8083152:	b330      	cbz	r0, 80831a2 <_Z22serialGetHumiditySlopev+0xce>
    {
        rh_slope = tempfloat;
        tempfloat *= 100;
 8083154:	491b      	ldr	r1, [pc, #108]	; (80831c4 <_Z22serialGetHumiditySlopev+0xf0>)
 8083156:	4620      	mov	r0, r4
        rh_slope = tempfloat;
 8083158:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 808315a:	f008 fbd9 	bl	808b910 <__aeabi_fmul>
        tempValue = tempfloat;
 808315e:	f008 fd9d 	bl	808bc9c <__aeabi_f2iz>
 8083162:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 8083164:	f007 fa1e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083168:	4917      	ldr	r1, [pc, #92]	; (80831c8 <_Z22serialGetHumiditySlopev+0xf4>)
 808316a:	f006 f9af 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope, 2));
 808316e:	f007 fa19 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083172:	4604      	mov	r4, r0
 8083174:	2202      	movs	r2, #2
 8083176:	6829      	ldr	r1, [r5, #0]
 8083178:	a806      	add	r0, sp, #24
 808317a:	f006 f87d 	bl	8089278 <_ZN6StringC1Efi>
 808317e:	9906      	ldr	r1, [sp, #24]
 8083180:	4620      	mov	r0, r4
 8083182:	f006 f9b6 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8083186:	a806      	add	r0, sp, #24
 8083188:	f005 ff92 	bl	80890b0 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 808318c:	f007 fcfa 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8083190:	2040      	movs	r0, #64	; 0x40
 8083192:	a901      	add	r1, sp, #4
 8083194:	f7fd fc32 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083198:	a802      	add	r0, sp, #8
 808319a:	f005 ff89 	bl	80890b0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 808319e:	b00b      	add	sp, #44	; 0x2c
 80831a0:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 80831a2:	f007 f9ff 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80831a6:	4909      	ldr	r1, [pc, #36]	; (80831cc <_Z22serialGetHumiditySlopev+0xf8>)
 80831a8:	f006 f9a3 	bl	80894f2 <_ZN5Print7printlnEPKc>
 80831ac:	e7f4      	b.n	8083198 <_Z22serialGetHumiditySlopev+0xc4>
 80831ae:	bf00      	nop
 80831b0:	0808e608 	.word	0x0808e608
 80831b4:	200007a0 	.word	0x200007a0
 80831b8:	0808e61a 	.word	0x0808e61a
 80831bc:	0808e61d 	.word	0x0808e61d
 80831c0:	41200000 	.word	0x41200000
 80831c4:	42c80000 	.word	0x42c80000
 80831c8:	0808e632 	.word	0x0808e632
 80831cc:	0808e416 	.word	0x0808e416

080831d0 <_Z20readAlpha1Constantlyv>:
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void)
{
 80831d0:	b570      	push	{r4, r5, r6, lr}
    while (!Serial.available())
    {
        CO_float_A = readCO_A();
 80831d2:	4d0c      	ldr	r5, [pc, #48]	; (8083204 <_Z20readAlpha1Constantlyv+0x34>)
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
 80831d4:	4e0c      	ldr	r6, [pc, #48]	; (8083208 <_Z20readAlpha1Constantlyv+0x38>)
    while (!Serial.available())
 80831d6:	f007 f9e5 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80831da:	6803      	ldr	r3, [r0, #0]
 80831dc:	691b      	ldr	r3, [r3, #16]
 80831de:	4798      	blx	r3
 80831e0:	b978      	cbnz	r0, 8083202 <_Z20readAlpha1Constantlyv+0x32>
    CO_float = readAlpha1();
 80831e2:	f7fe fe29 	bl	8081e38 <_Z10readAlpha1v>
        CO_float_A = readCO_A();
 80831e6:	6028      	str	r0, [r5, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
 80831e8:	f007 f9dc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80831ec:	4604      	mov	r4, r0
 80831ee:	6828      	ldr	r0, [r5, #0]
 80831f0:	f007 fee0 	bl	808afb4 <__aeabi_f2d>
 80831f4:	4602      	mov	r2, r0
 80831f6:	460b      	mov	r3, r1
 80831f8:	4620      	mov	r0, r4
 80831fa:	4631      	mov	r1, r6
 80831fc:	f7fd fc30 	bl	8080a60 <_ZN5Print6printfEPKcz>
    while (!Serial.available())
 8083200:	e7e9      	b.n	80831d6 <_Z20readAlpha1Constantlyv+0x6>
    }
}
 8083202:	bd70      	pop	{r4, r5, r6, pc}
 8083204:	200002c0 	.word	0x200002c0
 8083208:	0808e643 	.word	0x0808e643

0808320c <_Z23outputSerialMenuOptionsv>:

void outputSerialMenuOptions(void)
{
 808320c:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 808320e:	f007 f9c9 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083212:	49a2      	ldr	r1, [pc, #648]	; (808349c <_Z23outputSerialMenuOptionsv+0x290>)
 8083214:	f006 f96d 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 8083218:	f007 f9c4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808321c:	49a0      	ldr	r1, [pc, #640]	; (80834a0 <_Z23outputSerialMenuOptionsv+0x294>)
 808321e:	f006 f968 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 8083222:	f007 f9bf 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083226:	499f      	ldr	r1, [pc, #636]	; (80834a4 <_Z23outputSerialMenuOptionsv+0x298>)
 8083228:	f006 f963 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 808322c:	f007 f9ba 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083230:	499d      	ldr	r1, [pc, #628]	; (80834a8 <_Z23outputSerialMenuOptionsv+0x29c>)
 8083232:	f006 f95e 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 8083236:	f007 f9b5 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808323a:	499c      	ldr	r1, [pc, #624]	; (80834ac <_Z23outputSerialMenuOptionsv+0x2a0>)
 808323c:	f006 f959 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 8083240:	f007 f9b0 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083244:	499a      	ldr	r1, [pc, #616]	; (80834b0 <_Z23outputSerialMenuOptionsv+0x2a4>)
 8083246:	f006 f954 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 808324a:	f007 f9ab 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808324e:	4999      	ldr	r1, [pc, #612]	; (80834b4 <_Z23outputSerialMenuOptionsv+0x2a8>)
 8083250:	f006 f94f 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 8083254:	f007 f9a6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083258:	4997      	ldr	r1, [pc, #604]	; (80834b8 <_Z23outputSerialMenuOptionsv+0x2ac>)
 808325a:	f006 f94a 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 808325e:	f007 f9a1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083262:	4996      	ldr	r1, [pc, #600]	; (80834bc <_Z23outputSerialMenuOptionsv+0x2b0>)
 8083264:	f006 f945 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8083268:	f007 f99c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808326c:	4994      	ldr	r1, [pc, #592]	; (80834c0 <_Z23outputSerialMenuOptionsv+0x2b4>)
 808326e:	f006 f940 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 8083272:	f007 f997 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083276:	4993      	ldr	r1, [pc, #588]	; (80834c4 <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083278:	f006 f93b 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 808327c:	f007 f992 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083280:	4991      	ldr	r1, [pc, #580]	; (80834c8 <_Z23outputSerialMenuOptionsv+0x2bc>)
 8083282:	f006 f936 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 8083286:	f007 f98d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808328a:	4990      	ldr	r1, [pc, #576]	; (80834cc <_Z23outputSerialMenuOptionsv+0x2c0>)
 808328c:	f006 f931 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8083290:	f007 f988 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083294:	498e      	ldr	r1, [pc, #568]	; (80834d0 <_Z23outputSerialMenuOptionsv+0x2c4>)
 8083296:	f006 f92c 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 808329a:	f007 f983 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808329e:	498d      	ldr	r1, [pc, #564]	; (80834d4 <_Z23outputSerialMenuOptionsv+0x2c8>)
 80832a0:	f006 f927 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 80832a4:	f007 f97e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80832a8:	498b      	ldr	r1, [pc, #556]	; (80834d8 <_Z23outputSerialMenuOptionsv+0x2cc>)
 80832aa:	f006 f922 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 80832ae:	f007 f979 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80832b2:	498a      	ldr	r1, [pc, #552]	; (80834dc <_Z23outputSerialMenuOptionsv+0x2d0>)
 80832b4:	f006 f91d 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 80832b8:	f007 f974 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80832bc:	4988      	ldr	r1, [pc, #544]	; (80834e0 <_Z23outputSerialMenuOptionsv+0x2d4>)
 80832be:	f006 f918 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 80832c2:	f007 f96f 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80832c6:	4987      	ldr	r1, [pc, #540]	; (80834e4 <_Z23outputSerialMenuOptionsv+0x2d8>)
 80832c8:	f006 f913 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 80832cc:	f007 f96a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80832d0:	4985      	ldr	r1, [pc, #532]	; (80834e8 <_Z23outputSerialMenuOptionsv+0x2dc>)
 80832d2:	f006 f90e 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 80832d6:	f007 f965 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80832da:	4984      	ldr	r1, [pc, #528]	; (80834ec <_Z23outputSerialMenuOptionsv+0x2e0>)
 80832dc:	f006 f909 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 80832e0:	f007 f960 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80832e4:	4982      	ldr	r1, [pc, #520]	; (80834f0 <_Z23outputSerialMenuOptionsv+0x2e4>)
 80832e6:	f006 f904 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 80832ea:	f007 f95b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80832ee:	4981      	ldr	r1, [pc, #516]	; (80834f4 <_Z23outputSerialMenuOptionsv+0x2e8>)
 80832f0:	f006 f8ff 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 80832f4:	f007 f956 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80832f8:	497f      	ldr	r1, [pc, #508]	; (80834f8 <_Z23outputSerialMenuOptionsv+0x2ec>)
 80832fa:	f006 f8fa 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 80832fe:	f007 f951 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083302:	497e      	ldr	r1, [pc, #504]	; (80834fc <_Z23outputSerialMenuOptionsv+0x2f0>)
 8083304:	f006 f8f5 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 8083308:	f007 f94c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808330c:	497c      	ldr	r1, [pc, #496]	; (8083500 <_Z23outputSerialMenuOptionsv+0x2f4>)
 808330e:	f006 f8f0 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 8083312:	f007 f947 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083316:	497b      	ldr	r1, [pc, #492]	; (8083504 <_Z23outputSerialMenuOptionsv+0x2f8>)
 8083318:	f006 f8eb 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 808331c:	f007 f942 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083320:	4979      	ldr	r1, [pc, #484]	; (8083508 <_Z23outputSerialMenuOptionsv+0x2fc>)
 8083322:	f006 f8e6 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 8083326:	f007 f93d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808332a:	4978      	ldr	r1, [pc, #480]	; (808350c <_Z23outputSerialMenuOptionsv+0x300>)
 808332c:	f006 f8e1 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 8083330:	f007 f938 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083334:	4976      	ldr	r1, [pc, #472]	; (8083510 <_Z23outputSerialMenuOptionsv+0x304>)
 8083336:	f006 f8dc 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 808333a:	f007 f933 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808333e:	4975      	ldr	r1, [pc, #468]	; (8083514 <_Z23outputSerialMenuOptionsv+0x308>)
 8083340:	f006 f8d7 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 8083344:	f007 f92e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083348:	4973      	ldr	r1, [pc, #460]	; (8083518 <_Z23outputSerialMenuOptionsv+0x30c>)
 808334a:	f006 f8d2 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 808334e:	f007 f929 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083352:	4972      	ldr	r1, [pc, #456]	; (808351c <_Z23outputSerialMenuOptionsv+0x310>)
 8083354:	f006 f8cd 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8083358:	f007 f924 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808335c:	4970      	ldr	r1, [pc, #448]	; (8083520 <_Z23outputSerialMenuOptionsv+0x314>)
 808335e:	f006 f8c8 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 8083362:	f007 f91f 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083366:	496f      	ldr	r1, [pc, #444]	; (8083524 <_Z23outputSerialMenuOptionsv+0x318>)
 8083368:	f006 f8c3 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 808336c:	f007 f91a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083370:	496d      	ldr	r1, [pc, #436]	; (8083528 <_Z23outputSerialMenuOptionsv+0x31c>)
 8083372:	f006 f8be 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("A:  Output CO constantly and rapidly");
 8083376:	f007 f915 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808337a:	496c      	ldr	r1, [pc, #432]	; (808352c <_Z23outputSerialMenuOptionsv+0x320>)
 808337c:	f006 f8b9 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8083380:	f007 f910 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083384:	496a      	ldr	r1, [pc, #424]	; (8083530 <_Z23outputSerialMenuOptionsv+0x324>)
 8083386:	f006 f8b4 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celsius");
 808338a:	f007 f90b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808338e:	4969      	ldr	r1, [pc, #420]	; (8083534 <_Z23outputSerialMenuOptionsv+0x328>)
 8083390:	f006 f8af 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8083394:	f007 f906 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083398:	4967      	ldr	r1, [pc, #412]	; (8083538 <_Z23outputSerialMenuOptionsv+0x32c>)
 808339a:	f006 f8aa 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 808339e:	f007 f901 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80833a2:	4966      	ldr	r1, [pc, #408]	; (808353c <_Z23outputSerialMenuOptionsv+0x330>)
 80833a4:	f006 f8a5 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Fahrenheit");
 80833a8:	f007 f8fc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80833ac:	4964      	ldr	r1, [pc, #400]	; (8083540 <_Z23outputSerialMenuOptionsv+0x334>)
 80833ae:	f006 f8a0 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 80833b2:	f007 f8f7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80833b6:	4963      	ldr	r1, [pc, #396]	; (8083544 <_Z23outputSerialMenuOptionsv+0x338>)
 80833b8:	f006 f89b 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 80833bc:	f007 f8f2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80833c0:	4961      	ldr	r1, [pc, #388]	; (8083548 <_Z23outputSerialMenuOptionsv+0x33c>)
 80833c2:	f006 f896 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 80833c6:	f007 f8ed 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80833ca:	4960      	ldr	r1, [pc, #384]	; (808354c <_Z23outputSerialMenuOptionsv+0x340>)
 80833cc:	f006 f891 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 80833d0:	f007 f8e8 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80833d4:	495e      	ldr	r1, [pc, #376]	; (8083550 <_Z23outputSerialMenuOptionsv+0x344>)
 80833d6:	f006 f88c 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 80833da:	f007 f8e3 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80833de:	495d      	ldr	r1, [pc, #372]	; (8083554 <_Z23outputSerialMenuOptionsv+0x348>)
 80833e0:	f006 f887 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 80833e4:	f007 f8de 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80833e8:	495b      	ldr	r1, [pc, #364]	; (8083558 <_Z23outputSerialMenuOptionsv+0x34c>)
 80833ea:	f006 f882 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 80833ee:	f007 f8d9 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80833f2:	495a      	ldr	r1, [pc, #360]	; (808355c <_Z23outputSerialMenuOptionsv+0x350>)
 80833f4:	f006 f87d 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 80833f8:	f007 f8d4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80833fc:	4958      	ldr	r1, [pc, #352]	; (8083560 <_Z23outputSerialMenuOptionsv+0x354>)
 80833fe:	f006 f878 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 8083402:	f007 f8cf 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083406:	4957      	ldr	r1, [pc, #348]	; (8083564 <_Z23outputSerialMenuOptionsv+0x358>)
 8083408:	f006 f873 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 808340c:	f007 f8ca 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083410:	4955      	ldr	r1, [pc, #340]	; (8083568 <_Z23outputSerialMenuOptionsv+0x35c>)
 8083412:	f006 f86e 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 8083416:	f007 f8c5 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808341a:	4954      	ldr	r1, [pc, #336]	; (808356c <_Z23outputSerialMenuOptionsv+0x360>)
 808341c:	f006 f869 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 8083420:	f007 f8c0 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083424:	4952      	ldr	r1, [pc, #328]	; (8083570 <_Z23outputSerialMenuOptionsv+0x364>)
 8083426:	f006 f864 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 808342a:	f007 f8bb 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808342e:	4951      	ldr	r1, [pc, #324]	; (8083574 <_Z23outputSerialMenuOptionsv+0x368>)
 8083430:	f006 f85f 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 8083434:	f007 f8b6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083438:	494f      	ldr	r1, [pc, #316]	; (8083578 <_Z23outputSerialMenuOptionsv+0x36c>)
 808343a:	f006 f85a 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 808343e:	f007 f8b1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083442:	494e      	ldr	r1, [pc, #312]	; (808357c <_Z23outputSerialMenuOptionsv+0x370>)
 8083444:	f006 f855 	bl	80894f2 <_ZN5Print7printlnEPKc>

    Serial.println("W:  Enable/Disable google location services");
 8083448:	f007 f8ac 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808344c:	494c      	ldr	r1, [pc, #304]	; (8083580 <_Z23outputSerialMenuOptionsv+0x374>)
 808344e:	f006 f850 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 8083452:	f007 f8a7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083456:	494b      	ldr	r1, [pc, #300]	; (8083584 <_Z23outputSerialMenuOptionsv+0x378>)
 8083458:	f006 f84b 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 808345c:	f007 f8a2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083460:	4949      	ldr	r1, [pc, #292]	; (8083588 <_Z23outputSerialMenuOptionsv+0x37c>)
 8083462:	f006 f846 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 8083466:	f007 f89d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808346a:	4948      	ldr	r1, [pc, #288]	; (808358c <_Z23outputSerialMenuOptionsv+0x380>)
 808346c:	f006 f841 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083470:	f007 f898 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083474:	4946      	ldr	r1, [pc, #280]	; (8083590 <_Z23outputSerialMenuOptionsv+0x384>)
 8083476:	f006 f83c 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
 808347a:	f007 f893 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808347e:	4945      	ldr	r1, [pc, #276]	; (8083594 <_Z23outputSerialMenuOptionsv+0x388>)
 8083480:	f006 f837 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8083484:	f007 f88e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083488:	4943      	ldr	r1, [pc, #268]	; (8083598 <_Z23outputSerialMenuOptionsv+0x38c>)
 808348a:	f006 f832 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 808348e:	f007 f889 	bl	808a5a4 <_Z16_fetch_usbserialv>
}
 8083492:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("x:  Exits this menu");
 8083496:	4941      	ldr	r1, [pc, #260]	; (808359c <_Z23outputSerialMenuOptionsv+0x390>)
 8083498:	f006 b82b 	b.w	80894f2 <_ZN5Print7printlnEPKc>
 808349c:	0808e653 	.word	0x0808e653
 80834a0:	0808e669 	.word	0x0808e669
 80834a4:	0808e67e 	.word	0x0808e67e
 80834a8:	0808e692 	.word	0x0808e692
 80834ac:	0808e6a6 	.word	0x0808e6a6
 80834b0:	0808e6b9 	.word	0x0808e6b9
 80834b4:	0808e6ce 	.word	0x0808e6ce
 80834b8:	0808e6e2 	.word	0x0808e6e2
 80834bc:	0808e6f9 	.word	0x0808e6f9
 80834c0:	0808e70f 	.word	0x0808e70f
 80834c4:	0808e725 	.word	0x0808e725
 80834c8:	0808e73a 	.word	0x0808e73a
 80834cc:	0808e757 	.word	0x0808e757
 80834d0:	0808e773 	.word	0x0808e773
 80834d4:	0808e78d 	.word	0x0808e78d
 80834d8:	0808e7a6 	.word	0x0808e7a6
 80834dc:	0808e7c0 	.word	0x0808e7c0
 80834e0:	0808e7d9 	.word	0x0808e7d9
 80834e4:	0808e7f5 	.word	0x0808e7f5
 80834e8:	0808e812 	.word	0x0808e812
 80834ec:	0808e82b 	.word	0x0808e82b
 80834f0:	0808e847 	.word	0x0808e847
 80834f4:	0808e85f 	.word	0x0808e85f
 80834f8:	0808e878 	.word	0x0808e878
 80834fc:	0808e891 	.word	0x0808e891
 8083500:	0808e8a5 	.word	0x0808e8a5
 8083504:	0808e8ba 	.word	0x0808e8ba
 8083508:	0808e8d5 	.word	0x0808e8d5
 808350c:	0808e8f0 	.word	0x0808e8f0
 8083510:	0808e906 	.word	0x0808e906
 8083514:	0808e917 	.word	0x0808e917
 8083518:	0808e929 	.word	0x0808e929
 808351c:	0808e93a 	.word	0x0808e93a
 8083520:	0808e94c 	.word	0x0808e94c
 8083524:	0808e975 	.word	0x0808e975
 8083528:	0808e99e 	.word	0x0808e99e
 808352c:	0808e9cd 	.word	0x0808e9cd
 8083530:	0808e9f2 	.word	0x0808e9f2
 8083534:	0808ea17 	.word	0x0808ea17
 8083538:	0808ea3f 	.word	0x0808ea3f
 808353c:	0808ea7f 	.word	0x0808ea7f
 8083540:	0808eac2 	.word	0x0808eac2
 8083544:	0808eaed 	.word	0x0808eaed
 8083548:	0808eb30 	.word	0x0808eb30
 808354c:	0808eb76 	.word	0x0808eb76
 8083550:	0808ebaa 	.word	0x0808ebaa
 8083554:	0808ebc8 	.word	0x0808ebc8
 8083558:	0808ebec 	.word	0x0808ebec
 808355c:	0808ec07 	.word	0x0808ec07
 8083560:	0808ec31 	.word	0x0808ec31
 8083564:	0808ec66 	.word	0x0808ec66
 8083568:	0808ec8a 	.word	0x0808ec8a
 808356c:	0808ec9e 	.word	0x0808ec9e
 8083570:	0808ecba 	.word	0x0808ecba
 8083574:	0808ecdf 	.word	0x0808ecdf
 8083578:	0808ed03 	.word	0x0808ed03
 808357c:	0808ed28 	.word	0x0808ed28
 8083580:	0808ed50 	.word	0x0808ed50
 8083584:	0808ed7c 	.word	0x0808ed7c
 8083588:	0808edbf 	.word	0x0808edbf
 808358c:	0808edf1 	.word	0x0808edf1
 8083590:	0808ee17 	.word	0x0808ee17
 8083594:	0808ee7d 	.word	0x0808ee7d
 8083598:	0808eee1 	.word	0x0808eee1
 808359c:	0808eef6 	.word	0x0808eef6

080835a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80835a0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80835a2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80835a4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80835a6:	b17c      	cbz	r4, 80835c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80835a8:	6863      	ldr	r3, [r4, #4]
 80835aa:	3b01      	subs	r3, #1
 80835ac:	6063      	str	r3, [r4, #4]
 80835ae:	b95b      	cbnz	r3, 80835c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80835b0:	6823      	ldr	r3, [r4, #0]
 80835b2:	4620      	mov	r0, r4
 80835b4:	689b      	ldr	r3, [r3, #8]
 80835b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80835b8:	68a3      	ldr	r3, [r4, #8]
 80835ba:	3b01      	subs	r3, #1
 80835bc:	60a3      	str	r3, [r4, #8]
 80835be:	b91b      	cbnz	r3, 80835c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80835c0:	6823      	ldr	r3, [r4, #0]
 80835c2:	4620      	mov	r0, r4
 80835c4:	68db      	ldr	r3, [r3, #12]
 80835c6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80835c8:	4628      	mov	r0, r5
 80835ca:	bd38      	pop	{r3, r4, r5, pc}

080835cc <_Z13outputToCloud6StringS_>:
{
 80835cc:	b530      	push	{r4, r5, lr}
 80835ce:	b08b      	sub	sp, #44	; 0x2c
    String webhook_data = " ";
 80835d0:	4928      	ldr	r1, [pc, #160]	; (8083674 <_Z13outputToCloud6StringS_+0xa8>)
{
 80835d2:	4605      	mov	r5, r0
    String webhook_data = " ";
 80835d4:	a802      	add	r0, sp, #8
 80835d6:	f005 fdb5 	bl	8089144 <_ZN6StringC1EPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80835da:	f005 f9bd 	bl	8088958 <spark_cloud_flag_connected>
 80835de:	4c26      	ldr	r4, [pc, #152]	; (8083678 <_Z13outputToCloud6StringS_+0xac>)
 80835e0:	4b26      	ldr	r3, [pc, #152]	; (808367c <_Z13outputToCloud6StringS_+0xb0>)
    if(Particle.connected() && serial_cellular_enabled)
 80835e2:	b358      	cbz	r0, 808363c <_Z13outputToCloud6StringS_+0x70>
 80835e4:	681b      	ldr	r3, [r3, #0]
 80835e6:	b363      	cbz	r3, 8083642 <_Z13outputToCloud6StringS_+0x76>
        status_word.status_int |= 0x0002;
 80835e8:	4a25      	ldr	r2, [pc, #148]	; (8083680 <_Z13outputToCloud6StringS_+0xb4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80835ea:	4926      	ldr	r1, [pc, #152]	; (8083684 <_Z13outputToCloud6StringS_+0xb8>)
 80835ec:	8813      	ldrh	r3, [r2, #0]
 80835ee:	a806      	add	r0, sp, #24
 80835f0:	f043 0302 	orr.w	r3, r3, #2
 80835f4:	8013      	strh	r3, [r2, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80835f6:	4b24      	ldr	r3, [pc, #144]	; (8083688 <_Z13outputToCloud6StringS_+0xbc>)
 80835f8:	682a      	ldr	r2, [r5, #0]
 80835fa:	781b      	ldrb	r3, [r3, #0]
 80835fc:	f88d 3000 	strb.w	r3, [sp]
 8083600:	233c      	movs	r3, #60	; 0x3c
 8083602:	f006 fd9f 	bl	808a144 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8083606:	a807      	add	r0, sp, #28
 8083608:	f7ff ffca 	bl	80835a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.process(); //attempt at ensuring the publish is complete before sleeping
 808360c:	f7fd fa44 	bl	8080a98 <_ZN10CloudClass7processEv>
        if(debugging_enabled)
 8083610:	6823      	ldr	r3, [r4, #0]
 8083612:	b173      	cbz	r3, 8083632 <_Z13outputToCloud6StringS_+0x66>
            Serial.println("Published pamup data!");
 8083614:	f006 ffc6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083618:	491c      	ldr	r1, [pc, #112]	; (808368c <_Z13outputToCloud6StringS_+0xc0>)
 808361a:	f005 ff6a 	bl	80894f2 <_ZN5Print7printlnEPKc>
            writeLogFile("Published pamup data!");
 808361e:	491b      	ldr	r1, [pc, #108]	; (808368c <_Z13outputToCloud6StringS_+0xc0>)
                writeLogFile("Couldn't connect to particle.");
 8083620:	a806      	add	r0, sp, #24
 8083622:	f005 fd8f 	bl	8089144 <_ZN6StringC1EPKc>
 8083626:	a806      	add	r0, sp, #24
 8083628:	f7fe f8a2 	bl	8081770 <_Z12writeLogFile6String>
 808362c:	a806      	add	r0, sp, #24
 808362e:	f005 fd3f 	bl	80890b0 <_ZN6StringD1Ev>
    String webhook_data = " ";
 8083632:	a802      	add	r0, sp, #8
 8083634:	f005 fd3c 	bl	80890b0 <_ZN6StringD1Ev>
}
 8083638:	b00b      	add	sp, #44	; 0x2c
 808363a:	bd30      	pop	{r4, r5, pc}
        if(serial_cellular_enabled == 0)
 808363c:	681b      	ldr	r3, [r3, #0]
 808363e:	6821      	ldr	r1, [r4, #0]
 8083640:	b94b      	cbnz	r3, 8083656 <_Z13outputToCloud6StringS_+0x8a>
            if(debugging_enabled)
 8083642:	6823      	ldr	r3, [r4, #0]
 8083644:	2b00      	cmp	r3, #0
 8083646:	d0f4      	beq.n	8083632 <_Z13outputToCloud6StringS_+0x66>
                Serial.println("Cellular is disabled.");
 8083648:	f006 ffac 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808364c:	4910      	ldr	r1, [pc, #64]	; (8083690 <_Z13outputToCloud6StringS_+0xc4>)
 808364e:	f005 ff50 	bl	80894f2 <_ZN5Print7printlnEPKc>
                writeLogFile("Cellular is disabled.");
 8083652:	490f      	ldr	r1, [pc, #60]	; (8083690 <_Z13outputToCloud6StringS_+0xc4>)
 8083654:	e7e4      	b.n	8083620 <_Z13outputToCloud6StringS_+0x54>
            status_word.status_int &= 0xFFFD;   //clear the connected bit
 8083656:	4a0a      	ldr	r2, [pc, #40]	; (8083680 <_Z13outputToCloud6StringS_+0xb4>)
 8083658:	8813      	ldrh	r3, [r2, #0]
 808365a:	f023 0302 	bic.w	r3, r3, #2
 808365e:	8013      	strh	r3, [r2, #0]
            if(debugging_enabled)
 8083660:	2900      	cmp	r1, #0
 8083662:	d0e6      	beq.n	8083632 <_Z13outputToCloud6StringS_+0x66>
                Serial.println("Couldn't connect to particle.");
 8083664:	f006 ff9e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083668:	490a      	ldr	r1, [pc, #40]	; (8083694 <_Z13outputToCloud6StringS_+0xc8>)
 808366a:	f005 ff42 	bl	80894f2 <_ZN5Print7printlnEPKc>
                writeLogFile("Couldn't connect to particle.");
 808366e:	4909      	ldr	r1, [pc, #36]	; (8083694 <_Z13outputToCloud6StringS_+0xc8>)
 8083670:	e7d6      	b.n	8083620 <_Z13outputToCloud6StringS_+0x54>
 8083672:	bf00      	nop
 8083674:	0808fd99 	.word	0x0808fd99
 8083678:	200005e8 	.word	0x200005e8
 808367c:	20000c28 	.word	0x20000c28
 8083680:	20000c48 	.word	0x20000c48
 8083684:	0808ef0a 	.word	0x0808ef0a
 8083688:	20000520 	.word	0x20000520
 808368c:	0808ef10 	.word	0x0808ef10
 8083690:	0808ef26 	.word	0x0808ef26
 8083694:	0808ef3c 	.word	0x0808ef3c

08083698 <_Z15outputDataToESPv>:
{
 8083698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808369c:	b0dc      	sub	sp, #368	; 0x170
    time_t time = Time.now();
 808369e:	f006 fa3c 	bl	8089b1a <_ZN9TimeClass3nowEv>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 80836a2:	4bb8      	ldr	r3, [pc, #736]	; (8083984 <_Z15outputDataToESPv+0x2ec>)
    String cloud_output_string = "";    //create a clean string
 80836a4:	49b8      	ldr	r1, [pc, #736]	; (8083988 <_Z15outputDataToESPv+0x2f0>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 80836a6:	681a      	ldr	r2, [r3, #0]
 80836a8:	4bb8      	ldr	r3, [pc, #736]	; (808398c <_Z15outputDataToESPv+0x2f4>)
    time_t time = Time.now();
 80836aa:	4604      	mov	r4, r0
 80836ac:	17c5      	asrs	r5, r0, #31
    String cloud_output_string = "";    //create a clean string
 80836ae:	a803      	add	r0, sp, #12
 80836b0:	601a      	str	r2, [r3, #0]
 80836b2:	f005 fd47 	bl	8089144 <_ZN6StringC1EPKc>
    String csv_output_string = "";
 80836b6:	49b4      	ldr	r1, [pc, #720]	; (8083988 <_Z15outputDataToESPv+0x2f0>)
 80836b8:	a807      	add	r0, sp, #28
 80836ba:	f005 fd43 	bl	8089144 <_ZN6StringC1EPKc>
    String sensible_string = "";
 80836be:	49b2      	ldr	r1, [pc, #712]	; (8083988 <_Z15outputDataToESPv+0x2f0>)
 80836c0:	a80b      	add	r0, sp, #44	; 0x2c
 80836c2:	f005 fd3f 	bl	8089144 <_ZN6StringC1EPKc>
    String latitude_string = "";
 80836c6:	49b0      	ldr	r1, [pc, #704]	; (8083988 <_Z15outputDataToESPv+0x2f0>)
 80836c8:	a80f      	add	r0, sp, #60	; 0x3c
 80836ca:	f005 fd3b 	bl	8089144 <_ZN6StringC1EPKc>
    String longitude_string = "";
 80836ce:	49ae      	ldr	r1, [pc, #696]	; (8083988 <_Z15outputDataToESPv+0x2f0>)
 80836d0:	a813      	add	r0, sp, #76	; 0x4c
 80836d2:	f005 fd37 	bl	8089144 <_ZN6StringC1EPKc>
	String & operator += (char c)			{concat(c); return (*this);}
 80836d6:	215e      	movs	r1, #94	; 0x5e
 80836d8:	a803      	add	r0, sp, #12
 80836da:	f005 fe24 	bl	8089326 <_ZN6String6concatEc>
    cloud_output_string += String(1) + ";";           //header
 80836de:	220a      	movs	r2, #10
 80836e0:	2101      	movs	r1, #1
 80836e2:	a81b      	add	r0, sp, #108	; 0x6c
 80836e4:	f005 fda2 	bl	808922c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 80836e8:	a91b      	add	r1, sp, #108	; 0x6c
 80836ea:	a81f      	add	r0, sp, #124	; 0x7c
 80836ec:	f005 fd69 	bl	80891c2 <_ZN6StringC1ERKS_>
 80836f0:	49a7      	ldr	r1, [pc, #668]	; (8083990 <_Z15outputDataToESPv+0x2f8>)
 80836f2:	a81f      	add	r0, sp, #124	; 0x7c
 80836f4:	f005 fe30 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 80836f8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80836fa:	a803      	add	r0, sp, #12
 80836fc:	f005 fe00 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083700:	a81f      	add	r0, sp, #124	; 0x7c
 8083702:	f005 fcd5 	bl	80890b0 <_ZN6StringD1Ev>
 8083706:	a81b      	add	r0, sp, #108	; 0x6c
 8083708:	f005 fcd2 	bl	80890b0 <_ZN6StringD1Ev>
    cloud_output_string += String(DEVICE_ID_PACKET_CONSTANT) + String(DEVICE_id);   //device id
 808370c:	4ea1      	ldr	r6, [pc, #644]	; (8083994 <_Z15outputDataToESPv+0x2fc>)
 808370e:	215a      	movs	r1, #90	; 0x5a
 8083710:	a817      	add	r0, sp, #92	; 0x5c
 8083712:	f005 fd7a 	bl	808920a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083716:	a917      	add	r1, sp, #92	; 0x5c
 8083718:	a81f      	add	r0, sp, #124	; 0x7c
 808371a:	f005 fd52 	bl	80891c2 <_ZN6StringC1ERKS_>
 808371e:	220a      	movs	r2, #10
 8083720:	6831      	ldr	r1, [r6, #0]
 8083722:	a81b      	add	r0, sp, #108	; 0x6c
 8083724:	f005 fd82 	bl	808922c <_ZN6StringC1Eih>
 8083728:	a91b      	add	r1, sp, #108	; 0x6c
 808372a:	a81f      	add	r0, sp, #124	; 0x7c
 808372c:	f005 fe08 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 8083730:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083732:	a803      	add	r0, sp, #12
 8083734:	f005 fde4 	bl	8089300 <_ZN6String6concatERKS_>
 8083738:	a81b      	add	r0, sp, #108	; 0x6c
 808373a:	f005 fcb9 	bl	80890b0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808373e:	a81f      	add	r0, sp, #124	; 0x7c
 8083740:	f005 fcb6 	bl	80890b0 <_ZN6StringD1Ev>
 8083744:	a817      	add	r0, sp, #92	; 0x5c
 8083746:	f005 fcb3 	bl	80890b0 <_ZN6StringD1Ev>
    csv_output_string += String(DEVICE_id) + ",";
 808374a:	220a      	movs	r2, #10
 808374c:	6831      	ldr	r1, [r6, #0]
 808374e:	a81b      	add	r0, sp, #108	; 0x6c
 8083750:	f005 fd6c 	bl	808922c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083754:	a91b      	add	r1, sp, #108	; 0x6c
 8083756:	a81f      	add	r0, sp, #124	; 0x7c
 8083758:	f005 fd33 	bl	80891c2 <_ZN6StringC1ERKS_>
 808375c:	498e      	ldr	r1, [pc, #568]	; (8083998 <_Z15outputDataToESPv+0x300>)
 808375e:	a81f      	add	r0, sp, #124	; 0x7c
 8083760:	f005 fdfa 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 8083764:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083766:	a807      	add	r0, sp, #28
 8083768:	f005 fdca 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808376c:	a81f      	add	r0, sp, #124	; 0x7c
 808376e:	f005 fc9f 	bl	80890b0 <_ZN6StringD1Ev>
 8083772:	a81b      	add	r0, sp, #108	; 0x6c
 8083774:	f005 fc9c 	bl	80890b0 <_ZN6StringD1Ev>
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float_A, 3);
 8083778:	4e88      	ldr	r6, [pc, #544]	; (808399c <_Z15outputDataToESPv+0x304>)
 808377a:	214d      	movs	r1, #77	; 0x4d
 808377c:	a817      	add	r0, sp, #92	; 0x5c
 808377e:	f005 fd44 	bl	808920a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083782:	a917      	add	r1, sp, #92	; 0x5c
 8083784:	a81f      	add	r0, sp, #124	; 0x7c
 8083786:	f005 fd1c 	bl	80891c2 <_ZN6StringC1ERKS_>
 808378a:	2203      	movs	r2, #3
 808378c:	6831      	ldr	r1, [r6, #0]
 808378e:	a81b      	add	r0, sp, #108	; 0x6c
 8083790:	f005 fd72 	bl	8089278 <_ZN6StringC1Efi>
 8083794:	a91b      	add	r1, sp, #108	; 0x6c
 8083796:	a81f      	add	r0, sp, #124	; 0x7c
 8083798:	f005 fdd2 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 808379c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808379e:	a803      	add	r0, sp, #12
 80837a0:	f005 fdae 	bl	8089300 <_ZN6String6concatERKS_>
 80837a4:	a81b      	add	r0, sp, #108	; 0x6c
 80837a6:	f005 fc83 	bl	80890b0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80837aa:	a81f      	add	r0, sp, #124	; 0x7c
 80837ac:	f005 fc80 	bl	80890b0 <_ZN6StringD1Ev>
 80837b0:	a817      	add	r0, sp, #92	; 0x5c
 80837b2:	f005 fc7d 	bl	80890b0 <_ZN6StringD1Ev>
    csv_output_string += String(CO_float_A, 3) + ",";
 80837b6:	2203      	movs	r2, #3
 80837b8:	6831      	ldr	r1, [r6, #0]
 80837ba:	a81b      	add	r0, sp, #108	; 0x6c
 80837bc:	f005 fd5c 	bl	8089278 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 80837c0:	a91b      	add	r1, sp, #108	; 0x6c
 80837c2:	a81f      	add	r0, sp, #124	; 0x7c
 80837c4:	f005 fcfd 	bl	80891c2 <_ZN6StringC1ERKS_>
 80837c8:	4973      	ldr	r1, [pc, #460]	; (8083998 <_Z15outputDataToESPv+0x300>)
 80837ca:	a81f      	add	r0, sp, #124	; 0x7c
 80837cc:	f005 fdc4 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 80837d0:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80837d2:	a807      	add	r0, sp, #28
 80837d4:	f005 fd94 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80837d8:	a81f      	add	r0, sp, #124	; 0x7c
 80837da:	f005 fc69 	bl	80890b0 <_ZN6StringD1Ev>
 80837de:	a81b      	add	r0, sp, #108	; 0x6c
 80837e0:	f005 fc66 	bl	80890b0 <_ZN6StringD1Ev>
    csv_output_string += String(CO_float_B, 3) + ",";
 80837e4:	4b6e      	ldr	r3, [pc, #440]	; (80839a0 <_Z15outputDataToESPv+0x308>)
 80837e6:	2203      	movs	r2, #3
 80837e8:	6819      	ldr	r1, [r3, #0]
 80837ea:	a81b      	add	r0, sp, #108	; 0x6c
 80837ec:	f005 fd44 	bl	8089278 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 80837f0:	a91b      	add	r1, sp, #108	; 0x6c
 80837f2:	a81f      	add	r0, sp, #124	; 0x7c
 80837f4:	f005 fce5 	bl	80891c2 <_ZN6StringC1ERKS_>
 80837f8:	4967      	ldr	r1, [pc, #412]	; (8083998 <_Z15outputDataToESPv+0x300>)
 80837fa:	a81f      	add	r0, sp, #124	; 0x7c
 80837fc:	f005 fdac 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 8083800:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083802:	a807      	add	r0, sp, #28
 8083804:	f005 fd7c 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083808:	a81f      	add	r0, sp, #124	; 0x7c
 808380a:	f005 fc51 	bl	80890b0 <_ZN6StringD1Ev>
 808380e:	a81b      	add	r0, sp, #108	; 0x6c
 8083810:	f005 fc4e 	bl	80890b0 <_ZN6StringD1Ev>
    cloud_output_string += String(LATITUDE_PACKET_CONSTANT);
 8083814:	2161      	movs	r1, #97	; 0x61
 8083816:	a81f      	add	r0, sp, #124	; 0x7c
 8083818:	f005 fcf7 	bl	808920a <_ZN6StringC1Ec>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808381c:	a91f      	add	r1, sp, #124	; 0x7c
 808381e:	a803      	add	r0, sp, #12
 8083820:	f005 fd6e 	bl	8089300 <_ZN6String6concatERKS_>
 8083824:	a81f      	add	r0, sp, #124	; 0x7c
 8083826:	f005 fc43 	bl	80890b0 <_ZN6StringD1Ev>
    if (gps.get_latitude() != 0)
 808382a:	485e      	ldr	r0, [pc, #376]	; (80839a4 <_Z15outputDataToESPv+0x30c>)
 808382c:	f002 fdf8 	bl	8086420 <_ZN3GPS12get_latitudeEv>
 8083830:	2200      	movs	r2, #0
 8083832:	2300      	movs	r3, #0
 8083834:	f007 fe7e 	bl	808b534 <__aeabi_dcmpeq>
 8083838:	2800      	cmp	r0, #0
 808383a:	f040 81d5 	bne.w	8083be8 <_Z15outputDataToESPv+0x550>
        if (gps.get_nsIndicator() == 0)
 808383e:	4859      	ldr	r0, [pc, #356]	; (80839a4 <_Z15outputDataToESPv+0x30c>)
 8083840:	f002 fe09 	bl	8086456 <_ZN3GPS15get_nsIndicatorEv>
 8083844:	b938      	cbnz	r0, 8083856 <_Z15outputDataToESPv+0x1be>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8083846:	4958      	ldr	r1, [pc, #352]	; (80839a8 <_Z15outputDataToESPv+0x310>)
 8083848:	a807      	add	r0, sp, #28
 808384a:	f005 fd5d 	bl	8089308 <_ZN6String6concatEPKc>
 808384e:	4956      	ldr	r1, [pc, #344]	; (80839a8 <_Z15outputDataToESPv+0x310>)
 8083850:	a803      	add	r0, sp, #12
 8083852:	f005 fd59 	bl	8089308 <_ZN6String6concatEPKc>
        csv_output_string += String(gps.get_latitude()) + ",";
 8083856:	4853      	ldr	r0, [pc, #332]	; (80839a4 <_Z15outputDataToESPv+0x30c>)
 8083858:	f002 fde2 	bl	8086420 <_ZN3GPS12get_latitudeEv>
 808385c:	2606      	movs	r6, #6
 808385e:	4602      	mov	r2, r0
 8083860:	460b      	mov	r3, r1
 8083862:	9600      	str	r6, [sp, #0]
 8083864:	a81b      	add	r0, sp, #108	; 0x6c
 8083866:	f005 fd1e 	bl	80892a6 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 808386a:	a91b      	add	r1, sp, #108	; 0x6c
 808386c:	a81f      	add	r0, sp, #124	; 0x7c
 808386e:	f005 fca8 	bl	80891c2 <_ZN6StringC1ERKS_>
 8083872:	4949      	ldr	r1, [pc, #292]	; (8083998 <_Z15outputDataToESPv+0x300>)
 8083874:	a81f      	add	r0, sp, #124	; 0x7c
 8083876:	f005 fd6f 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 808387a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808387c:	a807      	add	r0, sp, #28
 808387e:	f005 fd3f 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083882:	a81f      	add	r0, sp, #124	; 0x7c
 8083884:	f005 fc14 	bl	80890b0 <_ZN6StringD1Ev>
 8083888:	a81b      	add	r0, sp, #108	; 0x6c
 808388a:	f005 fc11 	bl	80890b0 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_latitude());
 808388e:	4845      	ldr	r0, [pc, #276]	; (80839a4 <_Z15outputDataToESPv+0x30c>)
 8083890:	f002 fdc6 	bl	8086420 <_ZN3GPS12get_latitudeEv>
 8083894:	9600      	str	r6, [sp, #0]
 8083896:	4602      	mov	r2, r0
 8083898:	460b      	mov	r3, r1
 808389a:	a81f      	add	r0, sp, #124	; 0x7c
 808389c:	f005 fd03 	bl	80892a6 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80838a0:	a91f      	add	r1, sp, #124	; 0x7c
 80838a2:	a803      	add	r0, sp, #12
 80838a4:	f005 fd2c 	bl	8089300 <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_latitude);
 80838a8:	a81f      	add	r0, sp, #124	; 0x7c
 80838aa:	f005 fc01 	bl	80890b0 <_ZN6StringD1Ev>
    cloud_output_string += String(LONGITUDE_PACKET_CONSTANT);
 80838ae:	216f      	movs	r1, #111	; 0x6f
 80838b0:	a81f      	add	r0, sp, #124	; 0x7c
 80838b2:	f005 fcaa 	bl	808920a <_ZN6StringC1Ec>
 80838b6:	a91f      	add	r1, sp, #124	; 0x7c
 80838b8:	a803      	add	r0, sp, #12
 80838ba:	f005 fd21 	bl	8089300 <_ZN6String6concatERKS_>
 80838be:	a81f      	add	r0, sp, #124	; 0x7c
 80838c0:	f005 fbf6 	bl	80890b0 <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0)
 80838c4:	4837      	ldr	r0, [pc, #220]	; (80839a4 <_Z15outputDataToESPv+0x30c>)
 80838c6:	f002 fdb0 	bl	808642a <_ZN3GPS13get_longitudeEv>
 80838ca:	2200      	movs	r2, #0
 80838cc:	2300      	movs	r3, #0
 80838ce:	f007 fe31 	bl	808b534 <__aeabi_dcmpeq>
 80838d2:	2800      	cmp	r0, #0
 80838d4:	f040 81a3 	bne.w	8083c1e <_Z15outputDataToESPv+0x586>
        if (gps.get_ewIndicator() == 0x01)
 80838d8:	4832      	ldr	r0, [pc, #200]	; (80839a4 <_Z15outputDataToESPv+0x30c>)
 80838da:	f002 fdbf 	bl	808645c <_ZN3GPS15get_ewIndicatorEv>
 80838de:	2801      	cmp	r0, #1
 80838e0:	d107      	bne.n	80838f2 <_Z15outputDataToESPv+0x25a>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80838e2:	4931      	ldr	r1, [pc, #196]	; (80839a8 <_Z15outputDataToESPv+0x310>)
 80838e4:	a807      	add	r0, sp, #28
 80838e6:	f005 fd0f 	bl	8089308 <_ZN6String6concatEPKc>
 80838ea:	492f      	ldr	r1, [pc, #188]	; (80839a8 <_Z15outputDataToESPv+0x310>)
 80838ec:	a803      	add	r0, sp, #12
 80838ee:	f005 fd0b 	bl	8089308 <_ZN6String6concatEPKc>
        csv_output_string += String(gps.get_longitude()) + ",";
 80838f2:	482c      	ldr	r0, [pc, #176]	; (80839a4 <_Z15outputDataToESPv+0x30c>)
 80838f4:	f002 fd99 	bl	808642a <_ZN3GPS13get_longitudeEv>
 80838f8:	2606      	movs	r6, #6
 80838fa:	4602      	mov	r2, r0
 80838fc:	460b      	mov	r3, r1
 80838fe:	9600      	str	r6, [sp, #0]
 8083900:	a81b      	add	r0, sp, #108	; 0x6c
 8083902:	f005 fcd0 	bl	80892a6 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8083906:	a91b      	add	r1, sp, #108	; 0x6c
 8083908:	a81f      	add	r0, sp, #124	; 0x7c
 808390a:	f005 fc5a 	bl	80891c2 <_ZN6StringC1ERKS_>
 808390e:	4922      	ldr	r1, [pc, #136]	; (8083998 <_Z15outputDataToESPv+0x300>)
 8083910:	a81f      	add	r0, sp, #124	; 0x7c
 8083912:	f005 fd21 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 8083916:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083918:	a807      	add	r0, sp, #28
 808391a:	f005 fcf1 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808391e:	a81f      	add	r0, sp, #124	; 0x7c
 8083920:	f005 fbc6 	bl	80890b0 <_ZN6StringD1Ev>
 8083924:	a81b      	add	r0, sp, #108	; 0x6c
 8083926:	f005 fbc3 	bl	80890b0 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_longitude());
 808392a:	481e      	ldr	r0, [pc, #120]	; (80839a4 <_Z15outputDataToESPv+0x30c>)
 808392c:	f002 fd7d 	bl	808642a <_ZN3GPS13get_longitudeEv>
 8083930:	9600      	str	r6, [sp, #0]
 8083932:	4602      	mov	r2, r0
 8083934:	460b      	mov	r3, r1
 8083936:	a81f      	add	r0, sp, #124	; 0x7c
 8083938:	f005 fcb5 	bl	80892a6 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808393c:	a91f      	add	r1, sp, #124	; 0x7c
 808393e:	a803      	add	r0, sp, #12
 8083940:	f005 fcde 	bl	8089300 <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_longitude);
 8083944:	a81f      	add	r0, sp, #124	; 0x7c
 8083946:	f005 fbb3 	bl	80890b0 <_ZN6StringD1Ev>
    cloud_output_string += String(ACCURACY_PACKET_CONSTANT);
 808394a:	2163      	movs	r1, #99	; 0x63
 808394c:	a81f      	add	r0, sp, #124	; 0x7c
 808394e:	f005 fc5c 	bl	808920a <_ZN6StringC1Ec>
 8083952:	a91f      	add	r1, sp, #124	; 0x7c
 8083954:	a803      	add	r0, sp, #12
 8083956:	f005 fcd3 	bl	8089300 <_ZN6String6concatERKS_>
 808395a:	a81f      	add	r0, sp, #124	; 0x7c
 808395c:	f005 fba8 	bl	80890b0 <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0)
 8083960:	4810      	ldr	r0, [pc, #64]	; (80839a4 <_Z15outputDataToESPv+0x30c>)
 8083962:	f002 fd62 	bl	808642a <_ZN3GPS13get_longitudeEv>
 8083966:	2200      	movs	r2, #0
 8083968:	2300      	movs	r3, #0
 808396a:	f007 fde3 	bl	808b534 <__aeabi_dcmpeq>
 808396e:	2800      	cmp	r0, #0
 8083970:	f040 81a4 	bne.w	8083cbc <_Z15outputDataToESPv+0x624>
        csv_output_string += String(gps.get_horizontalDilution() / 10.0) + ",";
 8083974:	480b      	ldr	r0, [pc, #44]	; (80839a4 <_Z15outputDataToESPv+0x30c>)
 8083976:	f002 fd5d 	bl	8086434 <_ZN3GPS22get_horizontalDilutionEv>
 808397a:	f007 fb09 	bl	808af90 <__aeabi_i2d>
 808397e:	2200      	movs	r2, #0
 8083980:	e014      	b.n	80839ac <_Z15outputDataToESPv+0x314>
 8083982:	bf00      	nop
 8083984:	200000d4 	.word	0x200000d4
 8083988:	080900b9 	.word	0x080900b9
 808398c:	20000ce0 	.word	0x20000ce0
 8083990:	0808ef5a 	.word	0x0808ef5a
 8083994:	20000080 	.word	0x20000080
 8083998:	0808e09c 	.word	0x0808e09c
 808399c:	200002c0 	.word	0x200002c0
 80839a0:	200002c4 	.word	0x200002c4
 80839a4:	20000670 	.word	0x20000670
 80839a8:	0808e0e2 	.word	0x0808e0e2
 80839ac:	4ba9      	ldr	r3, [pc, #676]	; (8083c54 <_Z15outputDataToESPv+0x5bc>)
 80839ae:	f007 fc83 	bl	808b2b8 <__aeabi_ddiv>
 80839b2:	2606      	movs	r6, #6
 80839b4:	4602      	mov	r2, r0
 80839b6:	460b      	mov	r3, r1
 80839b8:	9600      	str	r6, [sp, #0]
 80839ba:	a81b      	add	r0, sp, #108	; 0x6c
 80839bc:	f005 fc73 	bl	80892a6 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80839c0:	a91b      	add	r1, sp, #108	; 0x6c
 80839c2:	a81f      	add	r0, sp, #124	; 0x7c
 80839c4:	f005 fbfd 	bl	80891c2 <_ZN6StringC1ERKS_>
 80839c8:	49a3      	ldr	r1, [pc, #652]	; (8083c58 <_Z15outputDataToESPv+0x5c0>)
 80839ca:	a81f      	add	r0, sp, #124	; 0x7c
 80839cc:	f005 fcc4 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 80839d0:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80839d2:	a807      	add	r0, sp, #28
 80839d4:	f005 fc94 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80839d8:	a81f      	add	r0, sp, #124	; 0x7c
 80839da:	f005 fb69 	bl	80890b0 <_ZN6StringD1Ev>
 80839de:	a81b      	add	r0, sp, #108	; 0x6c
 80839e0:	f005 fb66 	bl	80890b0 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_horizontalDilution() / 10.0);
 80839e4:	489d      	ldr	r0, [pc, #628]	; (8083c5c <_Z15outputDataToESPv+0x5c4>)
 80839e6:	f002 fd25 	bl	8086434 <_ZN3GPS22get_horizontalDilutionEv>
 80839ea:	f007 fad1 	bl	808af90 <__aeabi_i2d>
 80839ee:	2200      	movs	r2, #0
 80839f0:	4b98      	ldr	r3, [pc, #608]	; (8083c54 <_Z15outputDataToESPv+0x5bc>)
 80839f2:	f007 fc61 	bl	808b2b8 <__aeabi_ddiv>
 80839f6:	9600      	str	r6, [sp, #0]
 80839f8:	4602      	mov	r2, r0
 80839fa:	460b      	mov	r3, r1
 80839fc:	a81f      	add	r0, sp, #124	; 0x7c
 80839fe:	f005 fc52 	bl	80892a6 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083a02:	a91f      	add	r1, sp, #124	; 0x7c
    csv_output_string += String(status_word.status_int) + ",";
 8083a04:	4e96      	ldr	r6, [pc, #600]	; (8083c60 <_Z15outputDataToESPv+0x5c8>)
 8083a06:	a803      	add	r0, sp, #12
 8083a08:	f005 fc7a 	bl	8089300 <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_accuracy);
 8083a0c:	a81f      	add	r0, sp, #124	; 0x7c
 8083a0e:	f005 fb4f 	bl	80890b0 <_ZN6StringD1Ev>
    csv_output_string += String(status_word.status_int) + ",";
 8083a12:	220a      	movs	r2, #10
 8083a14:	8831      	ldrh	r1, [r6, #0]
 8083a16:	a81b      	add	r0, sp, #108	; 0x6c
 8083a18:	f005 fc08 	bl	808922c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083a1c:	a91b      	add	r1, sp, #108	; 0x6c
 8083a1e:	a81f      	add	r0, sp, #124	; 0x7c
 8083a20:	f005 fbcf 	bl	80891c2 <_ZN6StringC1ERKS_>
 8083a24:	498c      	ldr	r1, [pc, #560]	; (8083c58 <_Z15outputDataToESPv+0x5c0>)
 8083a26:	a81f      	add	r0, sp, #124	; 0x7c
 8083a28:	f005 fc96 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 8083a2c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083a2e:	a807      	add	r0, sp, #28
 8083a30:	f005 fc66 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083a34:	a81f      	add	r0, sp, #124	; 0x7c
 8083a36:	f005 fb3b 	bl	80890b0 <_ZN6StringD1Ev>
 8083a3a:	a81b      	add	r0, sp, #108	; 0x6c
 8083a3c:	f005 fb38 	bl	80890b0 <_ZN6StringD1Ev>
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
 8083a40:	4b88      	ldr	r3, [pc, #544]	; (8083c64 <_Z15outputDataToESPv+0x5cc>)
 8083a42:	4622      	mov	r2, r4
 8083a44:	4988      	ldr	r1, [pc, #544]	; (8083c68 <_Z15outputDataToESPv+0x5d0>)
 8083a46:	9300      	str	r3, [sp, #0]
 8083a48:	a81f      	add	r0, sp, #124	; 0x7c
 8083a4a:	462b      	mov	r3, r5
 8083a4c:	f006 f806 	bl	8089a5c <_ZN9TimeClass6formatExPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083a50:	a91f      	add	r1, sp, #124	; 0x7c
 8083a52:	a807      	add	r0, sp, #28
 8083a54:	f005 fc54 	bl	8089300 <_ZN6String6concatERKS_>
 8083a58:	a81f      	add	r0, sp, #124	; 0x7c
 8083a5a:	f005 fb29 	bl	80890b0 <_ZN6StringD1Ev>
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8083a5e:	2159      	movs	r1, #89	; 0x59
 8083a60:	a817      	add	r0, sp, #92	; 0x5c
 8083a62:	f005 fbd2 	bl	808920a <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083a66:	a917      	add	r1, sp, #92	; 0x5c
 8083a68:	a81f      	add	r0, sp, #124	; 0x7c
 8083a6a:	f005 fbaa 	bl	80891c2 <_ZN6StringC1ERKS_>
 8083a6e:	f006 f854 	bl	8089b1a <_ZN9TimeClass3nowEv>
 8083a72:	220a      	movs	r2, #10
 8083a74:	4601      	mov	r1, r0
 8083a76:	a81b      	add	r0, sp, #108	; 0x6c
 8083a78:	f005 fbeb 	bl	8089252 <_ZN6StringC1Elh>
 8083a7c:	a91b      	add	r1, sp, #108	; 0x6c
 8083a7e:	a81f      	add	r0, sp, #124	; 0x7c
 8083a80:	f005 fc5e 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 8083a84:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083a86:	a803      	add	r0, sp, #12
 8083a88:	f005 fc3a 	bl	8089300 <_ZN6String6concatERKS_>
 8083a8c:	a81b      	add	r0, sp, #108	; 0x6c
 8083a8e:	f005 fb0f 	bl	80890b0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083a92:	a81f      	add	r0, sp, #124	; 0x7c
 8083a94:	f005 fb0c 	bl	80890b0 <_ZN6StringD1Ev>
    if (debugging_enabled)
 8083a98:	4c74      	ldr	r4, [pc, #464]	; (8083c6c <_Z15outputDataToESPv+0x5d4>)
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8083a9a:	a817      	add	r0, sp, #92	; 0x5c
 8083a9c:	f005 fb08 	bl	80890b0 <_ZN6StringD1Ev>
	String & operator += (char c)			{concat(c); return (*this);}
 8083aa0:	2126      	movs	r1, #38	; 0x26
 8083aa2:	a803      	add	r0, sp, #12
 8083aa4:	f005 fc3f 	bl	8089326 <_ZN6String6concatEc>
    if (debugging_enabled)
 8083aa8:	6823      	ldr	r3, [r4, #0]
 8083aaa:	b14b      	cbz	r3, 8083ac0 <_Z15outputDataToESPv+0x428>
        Serial.println("Line to write to cloud:");
 8083aac:	f006 fd7a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083ab0:	496f      	ldr	r1, [pc, #444]	; (8083c70 <_Z15outputDataToESPv+0x5d8>)
 8083ab2:	f005 fd1e 	bl	80894f2 <_ZN5Print7printlnEPKc>
        Serial.println(cloud_output_string);
 8083ab6:	f006 fd75 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083aba:	9903      	ldr	r1, [sp, #12]
 8083abc:	f005 fd19 	bl	80894f2 <_ZN5Print7printlnEPKc>
    outputToCloud(cloud_output_string, "blahfornow");
 8083ac0:	a903      	add	r1, sp, #12
 8083ac2:	a81b      	add	r0, sp, #108	; 0x6c
 8083ac4:	f005 fb7d 	bl	80891c2 <_ZN6StringC1ERKS_>
 8083ac8:	496a      	ldr	r1, [pc, #424]	; (8083c74 <_Z15outputDataToESPv+0x5dc>)
 8083aca:	a81f      	add	r0, sp, #124	; 0x7c
 8083acc:	f005 fb3a 	bl	8089144 <_ZN6StringC1EPKc>
 8083ad0:	a91f      	add	r1, sp, #124	; 0x7c
 8083ad2:	a81b      	add	r0, sp, #108	; 0x6c
 8083ad4:	f7ff fd7a 	bl	80835cc <_Z13outputToCloud6StringS_>
 8083ad8:	a81f      	add	r0, sp, #124	; 0x7c
 8083ada:	f005 fae9 	bl	80890b0 <_ZN6StringD1Ev>
 8083ade:	a81b      	add	r0, sp, #108	; 0x6c
 8083ae0:	f005 fae6 	bl	80890b0 <_ZN6StringD1Ev>
    if (esp_wifi_connection_status)
 8083ae4:	4b64      	ldr	r3, [pc, #400]	; (8083c78 <_Z15outputDataToESPv+0x5e0>)
 8083ae6:	681b      	ldr	r3, [r3, #0]
 8083ae8:	b1ab      	cbz	r3, 8083b16 <_Z15outputDataToESPv+0x47e>
        if (debugging_enabled)
 8083aea:	6823      	ldr	r3, [r4, #0]
 8083aec:	b173      	cbz	r3, 8083b0c <_Z15outputDataToESPv+0x474>
            Serial.println("Sending data to esp to upload via wifi...");
 8083aee:	f006 fd59 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083af2:	4962      	ldr	r1, [pc, #392]	; (8083c7c <_Z15outputDataToESPv+0x5e4>)
 8083af4:	f005 fcfd 	bl	80894f2 <_ZN5Print7printlnEPKc>
            writeLogFile("Sending data to esp to upload via wifi");
 8083af8:	4961      	ldr	r1, [pc, #388]	; (8083c80 <_Z15outputDataToESPv+0x5e8>)
 8083afa:	a81f      	add	r0, sp, #124	; 0x7c
 8083afc:	f005 fb22 	bl	8089144 <_ZN6StringC1EPKc>
 8083b00:	a81f      	add	r0, sp, #124	; 0x7c
 8083b02:	f7fd fe35 	bl	8081770 <_Z12writeLogFile6String>
 8083b06:	a81f      	add	r0, sp, #124	; 0x7c
 8083b08:	f005 fad2 	bl	80890b0 <_ZN6StringD1Ev>
        Serial1.println(cloud_output_string);
 8083b0c:	f006 fe68 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 8083b10:	9903      	ldr	r1, [sp, #12]
 8083b12:	f005 fcee 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println(csv_output_string);
 8083b16:	f006 fd45 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083b1a:	9907      	ldr	r1, [sp, #28]
 8083b1c:	f005 fce9 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8083b20:	4958      	ldr	r1, [pc, #352]	; (8083c84 <_Z15outputDataToESPv+0x5ec>)
 8083b22:	2302      	movs	r3, #2
 8083b24:	220c      	movs	r2, #12
 8083b26:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8083b2a:	f7fd f851 	bl	8080bd0 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS))
 8083b2e:	2800      	cmp	r0, #0
 8083b30:	d037      	beq.n	8083ba2 <_Z15outputDataToESPv+0x50a>
        if (debugging_enabled)
 8083b32:	6823      	ldr	r3, [r4, #0]
 8083b34:	b123      	cbz	r3, 8083b40 <_Z15outputDataToESPv+0x4a8>
            Serial.println("Writing row to file.");
 8083b36:	f006 fd35 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083b3a:	4953      	ldr	r1, [pc, #332]	; (8083c88 <_Z15outputDataToESPv+0x5f0>)
 8083b3c:	f005 fcd9 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8083b40:	4a52      	ldr	r2, [pc, #328]	; (8083c8c <_Z15outputDataToESPv+0x5f4>)
 8083b42:	4953      	ldr	r1, [pc, #332]	; (8083c90 <_Z15outputDataToESPv+0x5f8>)
        if (file_started == 0)
 8083b44:	4c53      	ldr	r4, [pc, #332]	; (8083c94 <_Z15outputDataToESPv+0x5fc>)
 8083b46:	2346      	movs	r3, #70	; 0x46
 8083b48:	6812      	ldr	r2, [r2, #0]
 8083b4a:	6809      	ldr	r1, [r1, #0]
 8083b4c:	4852      	ldr	r0, [pc, #328]	; (8083c98 <_Z15outputDataToESPv+0x600>)
 8083b4e:	f003 fdde 	bl	808770e <_ZN7FatFile4openEPS_PKch>
 8083b52:	6823      	ldr	r3, [r4, #0]
 8083b54:	b9f3      	cbnz	r3, 8083b94 <_Z15outputDataToESPv+0x4fc>
            file.println("File Start timestamp: ");
 8083b56:	4951      	ldr	r1, [pc, #324]	; (8083c9c <_Z15outputDataToESPv+0x604>)
 8083b58:	4851      	ldr	r0, [pc, #324]	; (8083ca0 <_Z15outputDataToESPv+0x608>)
 8083b5a:	f005 fcca 	bl	80894f2 <_ZN5Print7printlnEPKc>
                return timeStr(now());
 8083b5e:	f005 ffdc 	bl	8089b1a <_ZN9TimeClass3nowEv>
 8083b62:	17c3      	asrs	r3, r0, #31
 8083b64:	4602      	mov	r2, r0
 8083b66:	a81f      	add	r0, sp, #124	; 0x7c
 8083b68:	f005 fed4 	bl	8089914 <_ZN9TimeClass7timeStrEx>
            file.println(Time.timeStr());
 8083b6c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8083b6e:	484c      	ldr	r0, [pc, #304]	; (8083ca0 <_Z15outputDataToESPv+0x608>)
 8083b70:	f005 fcbf 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8083b74:	a81f      	add	r0, sp, #124	; 0x7c
 8083b76:	f005 fa9b 	bl	80890b0 <_ZN6StringD1Ev>
            file.println(String(HEADER_STRING));
 8083b7a:	494a      	ldr	r1, [pc, #296]	; (8083ca4 <_Z15outputDataToESPv+0x60c>)
 8083b7c:	a81f      	add	r0, sp, #124	; 0x7c
 8083b7e:	f005 fae1 	bl	8089144 <_ZN6StringC1EPKc>
 8083b82:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8083b84:	4846      	ldr	r0, [pc, #280]	; (8083ca0 <_Z15outputDataToESPv+0x608>)
 8083b86:	f005 fcb4 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8083b8a:	a81f      	add	r0, sp, #124	; 0x7c
 8083b8c:	f005 fa90 	bl	80890b0 <_ZN6StringD1Ev>
            file_started = 1;
 8083b90:	2301      	movs	r3, #1
 8083b92:	6023      	str	r3, [r4, #0]
        file.println(csv_output_string);
 8083b94:	9907      	ldr	r1, [sp, #28]
 8083b96:	4842      	ldr	r0, [pc, #264]	; (8083ca0 <_Z15outputDataToESPv+0x608>)
 8083b98:	f005 fcab 	bl	80894f2 <_ZN5Print7printlnEPKc>
        file.close();
 8083b9c:	483e      	ldr	r0, [pc, #248]	; (8083c98 <_Z15outputDataToESPv+0x600>)
 8083b9e:	f003 fdaf 	bl	8087700 <_ZN7FatFile5closeEv>
{
 8083ba2:	2700      	movs	r7, #0
        wordBytes.myWord = DEVICE_id;
 8083ba4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8083cb4 <_Z15outputDataToESPv+0x61c>
            floatBytes.myFloat = bme.pressure / 100.0;
 8083ba8:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8083cb8 <_Z15outputDataToESPv+0x620>
        wordBytes.myWord = gps.get_latitudeWhole();
 8083bac:	4d2b      	ldr	r5, [pc, #172]	; (8083c5c <_Z15outputDataToESPv+0x5c4>)
 8083bae:	ac1f      	add	r4, sp, #124	; 0x7c
        ble_output_array[0 + i * (BLE_PAYLOAD_SIZE)] = 1;
 8083bb0:	2301      	movs	r3, #1
 8083bb2:	7023      	strb	r3, [r4, #0]
        wordBytes.myWord = DEVICE_id;
 8083bb4:	f8d8 3000 	ldr.w	r3, [r8]
        ble_output_array[1 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8083bb8:	7063      	strb	r3, [r4, #1]
        ble_output_array[2 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8083bba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8083bbe:	70a3      	strb	r3, [r4, #2]
        ble_output_array[3 + i * (BLE_PAYLOAD_SIZE)] = sample_counter;
 8083bc0:	4b39      	ldr	r3, [pc, #228]	; (8083ca8 <_Z15outputDataToESPv+0x610>)
 8083bc2:	681b      	ldr	r3, [r3, #0]
 8083bc4:	70e3      	strb	r3, [r4, #3]
        switch (i)
 8083bc6:	b2fb      	uxtb	r3, r7
 8083bc8:	3b01      	subs	r3, #1
 8083bca:	2b09      	cmp	r3, #9
 8083bcc:	f200 8091 	bhi.w	8083cf2 <_Z15outputDataToESPv+0x65a>
 8083bd0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8083bd4:	00980094 	.word	0x00980094
 8083bd8:	01090102 	.word	0x01090102
 8083bdc:	0111010d 	.word	0x0111010d
 8083be0:	011e0116 	.word	0x011e0116
 8083be4:	012b0123 	.word	0x012b0123
        csv_output_string += String(geolocation_latitude) + ",";
 8083be8:	4930      	ldr	r1, [pc, #192]	; (8083cac <_Z15outputDataToESPv+0x614>)
 8083bea:	a81b      	add	r0, sp, #108	; 0x6c
 8083bec:	f005 faaa 	bl	8089144 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8083bf0:	a91b      	add	r1, sp, #108	; 0x6c
 8083bf2:	a81f      	add	r0, sp, #124	; 0x7c
 8083bf4:	f005 fae5 	bl	80891c2 <_ZN6StringC1ERKS_>
 8083bf8:	4917      	ldr	r1, [pc, #92]	; (8083c58 <_Z15outputDataToESPv+0x5c0>)
 8083bfa:	a81f      	add	r0, sp, #124	; 0x7c
 8083bfc:	f005 fbac 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 8083c00:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083c02:	a807      	add	r0, sp, #28
 8083c04:	f005 fb7c 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083c08:	a81f      	add	r0, sp, #124	; 0x7c
 8083c0a:	f005 fa51 	bl	80890b0 <_ZN6StringD1Ev>
 8083c0e:	a81b      	add	r0, sp, #108	; 0x6c
 8083c10:	f005 fa4e 	bl	80890b0 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_latitude);
 8083c14:	4925      	ldr	r1, [pc, #148]	; (8083cac <_Z15outputDataToESPv+0x614>)
 8083c16:	a81f      	add	r0, sp, #124	; 0x7c
 8083c18:	f005 fa94 	bl	8089144 <_ZN6StringC1EPKc>
 8083c1c:	e640      	b.n	80838a0 <_Z15outputDataToESPv+0x208>
        csv_output_string += String(geolocation_longitude) + ",";
 8083c1e:	4924      	ldr	r1, [pc, #144]	; (8083cb0 <_Z15outputDataToESPv+0x618>)
 8083c20:	a81b      	add	r0, sp, #108	; 0x6c
 8083c22:	f005 fa8f 	bl	8089144 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8083c26:	a91b      	add	r1, sp, #108	; 0x6c
 8083c28:	a81f      	add	r0, sp, #124	; 0x7c
 8083c2a:	f005 faca 	bl	80891c2 <_ZN6StringC1ERKS_>
 8083c2e:	490a      	ldr	r1, [pc, #40]	; (8083c58 <_Z15outputDataToESPv+0x5c0>)
 8083c30:	a81f      	add	r0, sp, #124	; 0x7c
 8083c32:	f005 fb91 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 8083c36:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083c38:	a807      	add	r0, sp, #28
 8083c3a:	f005 fb61 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083c3e:	a81f      	add	r0, sp, #124	; 0x7c
 8083c40:	f005 fa36 	bl	80890b0 <_ZN6StringD1Ev>
 8083c44:	a81b      	add	r0, sp, #108	; 0x6c
 8083c46:	f005 fa33 	bl	80890b0 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_longitude);
 8083c4a:	4919      	ldr	r1, [pc, #100]	; (8083cb0 <_Z15outputDataToESPv+0x618>)
 8083c4c:	a81f      	add	r0, sp, #124	; 0x7c
 8083c4e:	f005 fa79 	bl	8089144 <_ZN6StringC1EPKc>
 8083c52:	e673      	b.n	808393c <_Z15outputDataToESPv+0x2a4>
 8083c54:	40240000 	.word	0x40240000
 8083c58:	0808e09c 	.word	0x0808e09c
 8083c5c:	20000670 	.word	0x20000670
 8083c60:	20000c48 	.word	0x20000c48
 8083c64:	0808e0e4 	.word	0x0808e0e4
 8083c68:	20000cdc 	.word	0x20000cdc
 8083c6c:	200005e8 	.word	0x200005e8
 8083c70:	0808ef5c 	.word	0x0808ef5c
 8083c74:	0808ef74 	.word	0x0808ef74
 8083c78:	200005ec 	.word	0x200005ec
 8083c7c:	0808ef7f 	.word	0x0808ef7f
 8083c80:	0808efa9 	.word	0x0808efa9
 8083c84:	20000c1c 	.word	0x20000c1c
 8083c88:	0808efd0 	.word	0x0808efd0
 8083c8c:	20000650 	.word	0x20000650
 8083c90:	20000cbc 	.word	0x20000cbc
 8083c94:	20000660 	.word	0x20000660
 8083c98:	200005f8 	.word	0x200005f8
 8083c9c:	0808ded3 	.word	0x0808ded3
 8083ca0:	200005f0 	.word	0x200005f0
 8083ca4:	0808efe5 	.word	0x0808efe5
 8083ca8:	200007a8 	.word	0x200007a8
 8083cac:	200000a6 	.word	0x200000a6
 8083cb0:	200000b2 	.word	0x200000b2
 8083cb4:	20000080 	.word	0x20000080
 8083cb8:	42c80000 	.word	0x42c80000
        csv_output_string += String(geolocation_accuracy) + ",";
 8083cbc:	495d      	ldr	r1, [pc, #372]	; (8083e34 <_Z15outputDataToESPv+0x79c>)
 8083cbe:	a81b      	add	r0, sp, #108	; 0x6c
 8083cc0:	f005 fa40 	bl	8089144 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8083cc4:	a91b      	add	r1, sp, #108	; 0x6c
 8083cc6:	a81f      	add	r0, sp, #124	; 0x7c
 8083cc8:	f005 fa7b 	bl	80891c2 <_ZN6StringC1ERKS_>
 8083ccc:	495a      	ldr	r1, [pc, #360]	; (8083e38 <_Z15outputDataToESPv+0x7a0>)
 8083cce:	a81f      	add	r0, sp, #124	; 0x7c
 8083cd0:	f005 fb42 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 8083cd4:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083cd6:	a807      	add	r0, sp, #28
 8083cd8:	f005 fb12 	bl	8089300 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083cdc:	a81f      	add	r0, sp, #124	; 0x7c
 8083cde:	f005 f9e7 	bl	80890b0 <_ZN6StringD1Ev>
 8083ce2:	a81b      	add	r0, sp, #108	; 0x6c
 8083ce4:	f005 f9e4 	bl	80890b0 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_accuracy);
 8083ce8:	4952      	ldr	r1, [pc, #328]	; (8083e34 <_Z15outputDataToESPv+0x79c>)
 8083cea:	a81f      	add	r0, sp, #124	; 0x7c
 8083cec:	f005 fa2a 	bl	8089144 <_ZN6StringC1EPKc>
 8083cf0:	e687      	b.n	8083a02 <_Z15outputDataToESPv+0x36a>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = CARBON_MONOXIDE_PACKET_CONSTANT;
 8083cf2:	234d      	movs	r3, #77	; 0x4d
 8083cf4:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = CO_float_A;
 8083cf6:	4b51      	ldr	r3, [pc, #324]	; (8083e3c <_Z15outputDataToESPv+0x7a4>)
            floatBytes.myFloat = air_quality_score;
 8083cf8:	6818      	ldr	r0, [r3, #0]
            break;
 8083cfa:	e008      	b.n	8083d0e <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8083cfc:	2343      	movs	r3, #67	; 0x43
 8083cfe:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = CO2_float;
 8083d00:	4b4f      	ldr	r3, [pc, #316]	; (8083e40 <_Z15outputDataToESPv+0x7a8>)
 8083d02:	e7f9      	b.n	8083cf8 <_Z15outputDataToESPv+0x660>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8083d04:	2378      	movs	r3, #120	; 0x78
            floatBytes.myFloat = fuel.getSoC();
 8083d06:	484f      	ldr	r0, [pc, #316]	; (8083e44 <_Z15outputDataToESPv+0x7ac>)
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8083d08:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = fuel.getSoC();
 8083d0a:	f005 fff1 	bl	8089cf0 <_ZN9FuelGauge6getSoCEv>
        ble_output_array[6 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8083d0e:	f3c0 2307 	ubfx	r3, r0, #8, #8
        ble_output_array[5 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 8083d12:	7160      	strb	r0, [r4, #5]
        ble_output_array[6 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8083d14:	71a3      	strb	r3, [r4, #6]
        ble_output_array[7 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8083d16:	f3c0 4307 	ubfx	r3, r0, #16, #8
        ble_output_array[8 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8083d1a:	f3c0 6007 	ubfx	r0, r0, #24, #8
        ble_output_array[7 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8083d1e:	71e3      	strb	r3, [r4, #7]
        ble_output_array[8 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8083d20:	7220      	strb	r0, [r4, #8]
        wordBytes.myWord = gps.get_latitudeWhole();
 8083d22:	4628      	mov	r0, r5
 8083d24:	f002 fb8b 	bl	808643e <_ZN3GPS17get_latitudeWholeEv>
        ble_output_array[9 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8083d28:	7260      	strb	r0, [r4, #9]
        ble_output_array[10 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8083d2a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8083d2e:	72a0      	strb	r0, [r4, #10]
        wordBytes.myWord = gps.get_latitudeFrac();
 8083d30:	4628      	mov	r0, r5
 8083d32:	f002 fb87 	bl	8086444 <_ZN3GPS16get_latitudeFracEv>
        ble_output_array[11 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8083d36:	72e0      	strb	r0, [r4, #11]
        ble_output_array[12 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8083d38:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8083d3c:	7320      	strb	r0, [r4, #12]
        wordBytes.myWord = gps.get_longitudeWhole();
 8083d3e:	4628      	mov	r0, r5
 8083d40:	f002 fb83 	bl	808644a <_ZN3GPS18get_longitudeWholeEv>
        ble_output_array[13 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8083d44:	7360      	strb	r0, [r4, #13]
        ble_output_array[14 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8083d46:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8083d4a:	73a0      	strb	r0, [r4, #14]
        wordBytes.myWord = gps.get_longitudeFrac();
 8083d4c:	4628      	mov	r0, r5
 8083d4e:	f002 fb7f 	bl	8086450 <_ZN3GPS17get_longitudeFracEv>
        ble_output_array[15 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8083d52:	73e0      	strb	r0, [r4, #15]
        ble_output_array[16 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8083d54:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8083d58:	7420      	strb	r0, [r4, #16]
        int northSouth = gps.get_nsIndicator();
 8083d5a:	4628      	mov	r0, r5
 8083d5c:	f002 fb7b 	bl	8086456 <_ZN3GPS15get_nsIndicatorEv>
 8083d60:	4682      	mov	sl, r0
        int eastWest = gps.get_ewIndicator();
 8083d62:	4628      	mov	r0, r5
 8083d64:	f002 fb7a 	bl	808645c <_ZN3GPS15get_ewIndicatorEv>
        ble_output_array[17 + i * (BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8083d68:	ea4a 0a00 	orr.w	sl, sl, r0
 8083d6c:	f884 a011 	strb.w	sl, [r4, #17]
        ble_output_array[18 + i * (BLE_PAYLOAD_SIZE)] = gps.get_horizontalDilution();
 8083d70:	4628      	mov	r0, r5
 8083d72:	f002 fb5f 	bl	8086434 <_ZN3GPS22get_horizontalDilutionEv>
        ble_output_array[19 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8083d76:	7873      	ldrb	r3, [r6, #1]
 8083d78:	3701      	adds	r7, #1
 8083d7a:	74e3      	strb	r3, [r4, #19]
        ble_output_array[20 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8083d7c:	7833      	ldrb	r3, [r6, #0]
    for (uint8_t i = 0; i < NUMBER_OF_SPECIES; i++)
 8083d7e:	2f0b      	cmp	r7, #11
        ble_output_array[20 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8083d80:	7523      	strb	r3, [r4, #20]
        ble_output_array[21 + i * (BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8083d82:	f04f 0323 	mov.w	r3, #35	; 0x23
        ble_output_array[18 + i * (BLE_PAYLOAD_SIZE)] = gps.get_horizontalDilution();
 8083d86:	74a0      	strb	r0, [r4, #18]
        ble_output_array[21 + i * (BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8083d88:	7563      	strb	r3, [r4, #21]
    for (uint8_t i = 0; i < NUMBER_OF_SPECIES; i++)
 8083d8a:	f104 0416 	add.w	r4, r4, #22
 8083d8e:	f47f af0f 	bne.w	8083bb0 <_Z15outputDataToESPv+0x518>
    Serial1.print("$");
 8083d92:	f006 fd25 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 8083d96:	492c      	ldr	r1, [pc, #176]	; (8083e48 <_Z15outputDataToESPv+0x7b0>)
 8083d98:	f005 fb98 	bl	80894cc <_ZN5Print5printEPKc>
    Serial1.write(ble_output_array, NUMBER_OF_SPECIES * BLE_PAYLOAD_SIZE);
 8083d9c:	f006 fd20 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 8083da0:	6803      	ldr	r3, [r0, #0]
 8083da2:	22f2      	movs	r2, #242	; 0xf2
 8083da4:	68db      	ldr	r3, [r3, #12]
 8083da6:	a91f      	add	r1, sp, #124	; 0x7c
 8083da8:	4798      	blx	r3
    Serial1.print("&");
 8083daa:	f006 fd19 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 8083dae:	4927      	ldr	r1, [pc, #156]	; (8083e4c <_Z15outputDataToESPv+0x7b4>)
 8083db0:	f005 fb8c 	bl	80894cc <_ZN5Print5printEPKc>
    String longitude_string = "";
 8083db4:	a813      	add	r0, sp, #76	; 0x4c
 8083db6:	f005 f97b 	bl	80890b0 <_ZN6StringD1Ev>
    String latitude_string = "";
 8083dba:	a80f      	add	r0, sp, #60	; 0x3c
 8083dbc:	f005 f978 	bl	80890b0 <_ZN6StringD1Ev>
    String sensible_string = "";
 8083dc0:	a80b      	add	r0, sp, #44	; 0x2c
 8083dc2:	f005 f975 	bl	80890b0 <_ZN6StringD1Ev>
    String csv_output_string = "";
 8083dc6:	a807      	add	r0, sp, #28
 8083dc8:	f005 f972 	bl	80890b0 <_ZN6StringD1Ev>
    String cloud_output_string = "";    //create a clean string
 8083dcc:	a803      	add	r0, sp, #12
 8083dce:	f005 f96f 	bl	80890b0 <_ZN6StringD1Ev>
}
 8083dd2:	b05c      	add	sp, #368	; 0x170
 8083dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8083dd8:	2372      	movs	r3, #114	; 0x72
 8083dda:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = PM01Value;
 8083ddc:	4b1c      	ldr	r3, [pc, #112]	; (8083e50 <_Z15outputDataToESPv+0x7b8>)
            floatBytes.myFloat = PM10Value;
 8083dde:	6818      	ldr	r0, [r3, #0]
 8083de0:	f007 fd42 	bl	808b868 <__aeabi_i2f>
            break;
 8083de4:	e793      	b.n	8083d0e <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8083de6:	2352      	movs	r3, #82	; 0x52
 8083de8:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = corrected_PM_25;
 8083dea:	4b1a      	ldr	r3, [pc, #104]	; (8083e54 <_Z15outputDataToESPv+0x7bc>)
 8083dec:	e784      	b.n	8083cf8 <_Z15outputDataToESPv+0x660>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 8083dee:	2371      	movs	r3, #113	; 0x71
 8083df0:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = PM10Value;
 8083df2:	4b19      	ldr	r3, [pc, #100]	; (8083e58 <_Z15outputDataToESPv+0x7c0>)
 8083df4:	e7f3      	b.n	8083dde <_Z15outputDataToESPv+0x746>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = TEMPERATURE_PACKET_CONSTANT;
 8083df6:	2374      	movs	r3, #116	; 0x74
 8083df8:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = readTemperature();
 8083dfa:	f7fd fab1 	bl	8081360 <_Z15readTemperaturev>
            break;
 8083dfe:	e786      	b.n	8083d0e <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PRESSURE_PACKET_CONSTANT;
 8083e00:	2350      	movs	r3, #80	; 0x50
 8083e02:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = bme.pressure / 100.0;
 8083e04:	4b15      	ldr	r3, [pc, #84]	; (8083e5c <_Z15outputDataToESPv+0x7c4>)
 8083e06:	4649      	mov	r1, r9
 8083e08:	6858      	ldr	r0, [r3, #4]
 8083e0a:	f007 fe35 	bl	808ba78 <__aeabi_fdiv>
            break;
 8083e0e:	e77e      	b.n	8083d0e <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = HUMIDITY_PACKET_CONSTANT;
 8083e10:	2368      	movs	r3, #104	; 0x68
 8083e12:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = readHumidity();
 8083e14:	f7fd fb1e 	bl	8081454 <_Z12readHumidityv>
            break;
 8083e18:	e779      	b.n	8083d0e <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = SOUND_PACKET_CONSTANT;
 8083e1a:	2373      	movs	r3, #115	; 0x73
 8083e1c:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = sound_average;
 8083e1e:	4b10      	ldr	r3, [pc, #64]	; (8083e60 <_Z15outputDataToESPv+0x7c8>)
 8083e20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8083e24:	f007 fc16 	bl	808b654 <__aeabi_d2f>
            break;
 8083e28:	e771      	b.n	8083d0e <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
 8083e2a:	2367      	movs	r3, #103	; 0x67
 8083e2c:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = air_quality_score;
 8083e2e:	4b0d      	ldr	r3, [pc, #52]	; (8083e64 <_Z15outputDataToESPv+0x7cc>)
 8083e30:	e762      	b.n	8083cf8 <_Z15outputDataToESPv+0x660>
 8083e32:	bf00      	nop
 8083e34:	200000a0 	.word	0x200000a0
 8083e38:	0808e09c 	.word	0x0808e09c
 8083e3c:	200002c0 	.word	0x200002c0
 8083e40:	200002b4 	.word	0x200002b4
 8083e44:	20000664 	.word	0x20000664
 8083e48:	0808f067 	.word	0x0808f067
 8083e4c:	0808e0f8 	.word	0x0808e0f8
 8083e50:	200002dc 	.word	0x200002dc
 8083e54:	200005e4 	.word	0x200005e4
 8083e58:	200002e0 	.word	0x200002e0
 8083e5c:	20000564 	.word	0x20000564
 8083e60:	20000c30 	.word	0x20000c30
 8083e64:	2000055c 	.word	0x2000055c

08083e68 <_Z16getEspAQSyncDatav>:
{
 8083e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083e6c:	b091      	sub	sp, #68	; 0x44
 8083e6e:	af02      	add	r7, sp, #8
    String getAQSyncData = "Z&";
 8083e70:	4973      	ldr	r1, [pc, #460]	; (8084040 <_Z16getEspAQSyncDatav+0x1d8>)
 8083e72:	f107 0008 	add.w	r0, r7, #8
 8083e76:	f005 f965 	bl	8089144 <_ZN6StringC1EPKc>
    if (debugging_enabled)
 8083e7a:	4e72      	ldr	r6, [pc, #456]	; (8084044 <_Z16getEspAQSyncDatav+0x1dc>)
    String receivedData = " ";
 8083e7c:	4972      	ldr	r1, [pc, #456]	; (8084048 <_Z16getEspAQSyncDatav+0x1e0>)
 8083e7e:	f107 0018 	add.w	r0, r7, #24
 8083e82:	f005 f95f 	bl	8089144 <_ZN6StringC1EPKc>
    Serial1.setTimeout(3000);
 8083e86:	f006 fcab 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 8083e8a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8083e8e:	f005 fc83 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    if (debugging_enabled)
 8083e92:	6833      	ldr	r3, [r6, #0]
 8083e94:	b18b      	cbz	r3, 8083eba <_Z16getEspAQSyncDatav+0x52>
        Serial.println("Getting AQ Sync data from esp");
 8083e96:	f006 fb85 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083e9a:	496c      	ldr	r1, [pc, #432]	; (808404c <_Z16getEspAQSyncDatav+0x1e4>)
 8083e9c:	f005 fb29 	bl	80894f2 <_ZN5Print7printlnEPKc>
        writeLogFile("Getting AQ Sync data from esp");
 8083ea0:	496a      	ldr	r1, [pc, #424]	; (808404c <_Z16getEspAQSyncDatav+0x1e4>)
 8083ea2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8083ea6:	f005 f94d 	bl	8089144 <_ZN6StringC1EPKc>
 8083eaa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8083eae:	f7fd fc5f 	bl	8081770 <_Z12writeLogFile6String>
 8083eb2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8083eb6:	f005 f8fb 	bl	80890b0 <_ZN6StringD1Ev>
        if (counterIndex > MAX_COUNTER_INDEX)
 8083eba:	f20f 197c 	addw	r9, pc, #380	; 0x17c
 8083ebe:	e9d9 8900 	ldrd	r8, r9, [r9]
    Serial1.print(getAQSyncData);
 8083ec2:	f006 fc8d 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 8083ec6:	68b9      	ldr	r1, [r7, #8]
 8083ec8:	f005 fb00 	bl	80894cc <_ZN5Print5printEPKc>
    double counterIndex = 0;
 8083ecc:	2400      	movs	r4, #0
 8083ece:	2500      	movs	r5, #0
    bool timeOut = false;
 8083ed0:	f04f 0a00 	mov.w	sl, #0
                Serial.printf("Unable to get AQSync data from ESP, counter index: %1.1f\n\r", counterIndex);
 8083ed4:	f8df b190 	ldr.w	fp, [pc, #400]	; 8084068 <_Z16getEspAQSyncDatav+0x200>
    while (!Serial1.available() && !timeOut)
 8083ed8:	f006 fc82 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 8083edc:	6803      	ldr	r3, [r0, #0]
 8083ede:	691b      	ldr	r3, [r3, #16]
 8083ee0:	4798      	blx	r3
 8083ee2:	b9e0      	cbnz	r0, 8083f1e <_Z16getEspAQSyncDatav+0xb6>
 8083ee4:	f1ba 0f00 	cmp.w	sl, #0
 8083ee8:	d119      	bne.n	8083f1e <_Z16getEspAQSyncDatav+0xb6>
        counterIndex++;
 8083eea:	2200      	movs	r2, #0
 8083eec:	4620      	mov	r0, r4
 8083eee:	4629      	mov	r1, r5
 8083ef0:	4b57      	ldr	r3, [pc, #348]	; (8084050 <_Z16getEspAQSyncDatav+0x1e8>)
 8083ef2:	f006 ff01 	bl	808acf8 <__adddf3>
        if (counterIndex > MAX_COUNTER_INDEX)
 8083ef6:	4642      	mov	r2, r8
 8083ef8:	464b      	mov	r3, r9
        counterIndex++;
 8083efa:	4604      	mov	r4, r0
 8083efc:	460d      	mov	r5, r1
        if (counterIndex > MAX_COUNTER_INDEX)
 8083efe:	f007 fb41 	bl	808b584 <__aeabi_dcmpgt>
 8083f02:	2800      	cmp	r0, #0
 8083f04:	d0e8      	beq.n	8083ed8 <_Z16getEspAQSyncDatav+0x70>
            if (debugging_enabled)
 8083f06:	6833      	ldr	r3, [r6, #0]
 8083f08:	b133      	cbz	r3, 8083f18 <_Z16getEspAQSyncDatav+0xb0>
                Serial.printf("Unable to get AQSync data from ESP, counter index: %1.1f\n\r", counterIndex);
 8083f0a:	f006 fb4b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083f0e:	4622      	mov	r2, r4
 8083f10:	462b      	mov	r3, r5
 8083f12:	4659      	mov	r1, fp
 8083f14:	f7fc fda4 	bl	8080a60 <_ZN5Print6printfEPKcz>
            timeOut = true;
 8083f18:	f04f 0a01 	mov.w	sl, #1
 8083f1c:	e7dc      	b.n	8083ed8 <_Z16getEspAQSyncDatav+0x70>
    delay(10);
 8083f1e:	200a      	movs	r0, #10
 8083f20:	f005 fe5c 	bl	8089bdc <delay>
    receivedData = Serial1.readString();
 8083f24:	f006 fc5c 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 8083f28:	4601      	mov	r1, r0
 8083f2a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8083f2e:	f005 fc35 	bl	808979c <_ZN6Stream10readStringEv>
 8083f32:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8083f36:	f107 0018 	add.w	r0, r7, #24
 8083f3a:	f005 f94d 	bl	80891d8 <_ZN6StringaSEOS_>
 8083f3e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8083f42:	f005 f8b5 	bl	80890b0 <_ZN6StringD1Ev>
    char buffer[receivedData.length()];
 8083f46:	6a3a      	ldr	r2, [r7, #32]
		{getBytes((unsigned char *)buf, bufsize, index);}
 8083f48:	f107 0018 	add.w	r0, r7, #24
 8083f4c:	1dd3      	adds	r3, r2, #7
 8083f4e:	f023 0307 	bic.w	r3, r3, #7
 8083f52:	ebad 0d03 	sub.w	sp, sp, r3
 8083f56:	ad02      	add	r5, sp, #8
 8083f58:	2300      	movs	r3, #0
 8083f5a:	4629      	mov	r1, r5
 8083f5c:	f005 fa2d 	bl	80893ba <_ZNK6String8getBytesEPhjj>
    String deviceSection;
 8083f60:	493c      	ldr	r1, [pc, #240]	; (8084054 <_Z16getEspAQSyncDatav+0x1ec>)
 8083f62:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8083f66:	f005 f8ed 	bl	8089144 <_ZN6StringC1EPKc>
    Serial.println("This is char version of recieved String: ");
 8083f6a:	f006 fb1b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083f6e:	493a      	ldr	r1, [pc, #232]	; (8084058 <_Z16getEspAQSyncDatav+0x1f0>)
 8083f70:	f005 fabf 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println(buffer);
 8083f74:	f006 fb16 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083f78:	4629      	mov	r1, r5
 8083f7a:	f005 faba 	bl	80894f2 <_ZN5Print7printlnEPKc>
    for (int i = 1; i < strlen(buffer); i++) {
 8083f7e:	2401      	movs	r4, #1
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8083f80:	4e34      	ldr	r6, [pc, #208]	; (8084054 <_Z16getEspAQSyncDatav+0x1ec>)
 8083f82:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 808406c <_Z16getEspAQSyncDatav+0x204>
            if (Particle.connected() && serial_cellular_enabled) {
 8083f86:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8084070 <_Z16getEspAQSyncDatav+0x208>
    for (int i = 1; i < strlen(buffer); i++) {
 8083f8a:	4628      	mov	r0, r5
 8083f8c:	f008 f83b 	bl	808c006 <strlen>
 8083f90:	42a0      	cmp	r0, r4
 8083f92:	d93e      	bls.n	8084012 <_Z16getEspAQSyncDatav+0x1aa>
        if (buffer[i] == '@' && deviceSection != "" && deviceSection != "@") {
 8083f94:	5d2b      	ldrb	r3, [r5, r4]
 8083f96:	2b40      	cmp	r3, #64	; 0x40
 8083f98:	d006      	beq.n	8083fa8 <_Z16getEspAQSyncDatav+0x140>
	String & operator += (char c)			{concat(c); return (*this);}
 8083f9a:	5d29      	ldrb	r1, [r5, r4]
 8083f9c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8083fa0:	f005 f9c1 	bl	8089326 <_ZN6String6concatEc>
    for (int i = 1; i < strlen(buffer); i++) {
 8083fa4:	3401      	adds	r4, #1
 8083fa6:	e7f0      	b.n	8083f8a <_Z16getEspAQSyncDatav+0x122>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8083fa8:	4631      	mov	r1, r6
 8083faa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8083fae:	f005 f9e7 	bl	8089380 <_ZNK6String6equalsEPKc>
        if (buffer[i] == '@' && deviceSection != "" && deviceSection != "@") {
 8083fb2:	2800      	cmp	r0, #0
 8083fb4:	d1f1      	bne.n	8083f9a <_Z16getEspAQSyncDatav+0x132>
 8083fb6:	4641      	mov	r1, r8
 8083fb8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8083fbc:	f005 f9e0 	bl	8089380 <_ZNK6String6equalsEPKc>
 8083fc0:	2800      	cmp	r0, #0
 8083fc2:	d1ea      	bne.n	8083f9a <_Z16getEspAQSyncDatav+0x132>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083fc4:	f004 fcc8 	bl	8088958 <spark_cloud_flag_connected>
            if (Particle.connected() && serial_cellular_enabled) {
 8083fc8:	2800      	cmp	r0, #0
 8083fca:	d0eb      	beq.n	8083fa4 <_Z16getEspAQSyncDatav+0x13c>
 8083fcc:	f8d9 3000 	ldr.w	r3, [r9]
 8083fd0:	2b00      	cmp	r3, #0
 8083fd2:	d0e7      	beq.n	8083fa4 <_Z16getEspAQSyncDatav+0x13c>
                Serial.println("This is what I am publishing: ");
 8083fd4:	f006 fae6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083fd8:	4920      	ldr	r1, [pc, #128]	; (808405c <_Z16getEspAQSyncDatav+0x1f4>)
 8083fda:	f005 fa8a 	bl	80894f2 <_ZN5Print7printlnEPKc>
                Serial.println(deviceSection);
 8083fde:	f006 fae1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8083fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8083fe4:	f005 fa85 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8083fe8:	4b1d      	ldr	r3, [pc, #116]	; (8084060 <_Z16getEspAQSyncDatav+0x1f8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8083fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8083fec:	781b      	ldrb	r3, [r3, #0]
 8083fee:	491d      	ldr	r1, [pc, #116]	; (8084064 <_Z16getEspAQSyncDatav+0x1fc>)
 8083ff0:	4638      	mov	r0, r7
 8083ff2:	f88d 3000 	strb.w	r3, [sp]
 8083ff6:	233c      	movs	r3, #60	; 0x3c
 8083ff8:	f006 f8a4 	bl	808a144 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8083ffc:	1d38      	adds	r0, r7, #4
 8083ffe:	f7ff facf 	bl	80835a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                Particle.process(); //attempt at ensuring the publish is complete before sleeping
 8084002:	f7fc fd49 	bl	8080a98 <_ZN10CloudClass7processEv>
                deviceSection = "";
 8084006:	4631      	mov	r1, r6
 8084008:	f107 0028 	add.w	r0, r7, #40	; 0x28
 808400c:	f005 f8ec 	bl	80891e8 <_ZN6StringaSEPKc>
 8084010:	e7c8      	b.n	8083fa4 <_Z16getEspAQSyncDatav+0x13c>
    String deviceSection;
 8084012:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8084016:	f005 f84b 	bl	80890b0 <_ZN6StringD1Ev>
    String receivedData = " ";
 808401a:	f107 0018 	add.w	r0, r7, #24
 808401e:	f005 f847 	bl	80890b0 <_ZN6StringD1Ev>
    String getAQSyncData = "Z&";
 8084022:	f107 0008 	add.w	r0, r7, #8
 8084026:	f005 f843 	bl	80890b0 <_ZN6StringD1Ev>
}
 808402a:	373c      	adds	r7, #60	; 0x3c
 808402c:	46bd      	mov	sp, r7
 808402e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084032:	bf00      	nop
 8084034:	f3af 8000 	nop.w
 8084038:	00000000 	.word	0x00000000
 808403c:	40cd4c00 	.word	0x40cd4c00
 8084040:	0808f069 	.word	0x0808f069
 8084044:	200005e8 	.word	0x200005e8
 8084048:	0808fd99 	.word	0x0808fd99
 808404c:	0808f06c 	.word	0x0808f06c
 8084050:	3ff00000 	.word	0x3ff00000
 8084054:	080900b9 	.word	0x080900b9
 8084058:	0808f08a 	.word	0x0808f08a
 808405c:	0808f0f1 	.word	0x0808f0f1
 8084060:	20000520 	.word	0x20000520
 8084064:	0808f110 	.word	0x0808f110
 8084068:	0808f0b4 	.word	0x0808f0b4
 808406c:	0808f0ef 	.word	0x0808f0ef
 8084070:	20000c28 	.word	0x20000c28
 8084074:	00000000 	.word	0x00000000

08084078 <_Z23getEspAQSyncDiagnostics6String>:
int getEspAQSyncDiagnostics(String command){
 8084078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808407c:	b091      	sub	sp, #68	; 0x44
 808407e:	af02      	add	r7, sp, #8
    String getAQSyncDiag = "D&";
 8084080:	4975      	ldr	r1, [pc, #468]	; (8084258 <_Z23getEspAQSyncDiagnostics6String+0x1e0>)
 8084082:	f107 0008 	add.w	r0, r7, #8
 8084086:	f005 f85d 	bl	8089144 <_ZN6StringC1EPKc>
    if(debugging_enabled){
 808408a:	4e74      	ldr	r6, [pc, #464]	; (808425c <_Z23getEspAQSyncDiagnostics6String+0x1e4>)
    String receivedData = " ";
 808408c:	4974      	ldr	r1, [pc, #464]	; (8084260 <_Z23getEspAQSyncDiagnostics6String+0x1e8>)
 808408e:	f107 0018 	add.w	r0, r7, #24
 8084092:	f005 f857 	bl	8089144 <_ZN6StringC1EPKc>
    Serial1.setTimeout(3000);
 8084096:	f006 fba3 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 808409a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 808409e:	f005 fb7b 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    if(debugging_enabled){
 80840a2:	6833      	ldr	r3, [r6, #0]
 80840a4:	b18b      	cbz	r3, 80840ca <_Z23getEspAQSyncDiagnostics6String+0x52>
        Serial.println("Getting aqsync diagnostics from esp");
 80840a6:	f006 fa7d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80840aa:	496e      	ldr	r1, [pc, #440]	; (8084264 <_Z23getEspAQSyncDiagnostics6String+0x1ec>)
 80840ac:	f005 fa21 	bl	80894f2 <_ZN5Print7printlnEPKc>
        writeLogFile("Getting aqsync diagnostics from esp");
 80840b0:	496c      	ldr	r1, [pc, #432]	; (8084264 <_Z23getEspAQSyncDiagnostics6String+0x1ec>)
 80840b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80840b6:	f005 f845 	bl	8089144 <_ZN6StringC1EPKc>
 80840ba:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80840be:	f7fd fb57 	bl	8081770 <_Z12writeLogFile6String>
 80840c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80840c6:	f004 fff3 	bl	80890b0 <_ZN6StringD1Ev>
      if(counterIndex > MAX_COUNTER_INDEX){
 80840ca:	f20f 1984 	addw	r9, pc, #388	; 0x184
 80840ce:	e9d9 8900 	ldrd	r8, r9, [r9]
    Serial1.print(getAQSyncDiag);
 80840d2:	f006 fb85 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 80840d6:	68b9      	ldr	r1, [r7, #8]
 80840d8:	f005 f9f8 	bl	80894cc <_ZN5Print5printEPKc>
    double counterIndex = 0;
 80840dc:	2400      	movs	r4, #0
 80840de:	2500      	movs	r5, #0
    bool timeOut = false;
 80840e0:	f04f 0a00 	mov.w	sl, #0
          Serial.printf("Unable to get AQSync diag from ESP, counter index: %1.1f\n\r", counterIndex);
 80840e4:	f8df b198 	ldr.w	fp, [pc, #408]	; 8084280 <_Z23getEspAQSyncDiagnostics6String+0x208>
    while(!Serial1.available() && timeOut == false){
 80840e8:	f006 fb7a 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 80840ec:	6803      	ldr	r3, [r0, #0]
 80840ee:	691b      	ldr	r3, [r3, #16]
 80840f0:	4798      	blx	r3
 80840f2:	b9e0      	cbnz	r0, 808412e <_Z23getEspAQSyncDiagnostics6String+0xb6>
 80840f4:	f1ba 0f00 	cmp.w	sl, #0
 80840f8:	d119      	bne.n	808412e <_Z23getEspAQSyncDiagnostics6String+0xb6>
      counterIndex++;
 80840fa:	2200      	movs	r2, #0
 80840fc:	4620      	mov	r0, r4
 80840fe:	4629      	mov	r1, r5
 8084100:	4b59      	ldr	r3, [pc, #356]	; (8084268 <_Z23getEspAQSyncDiagnostics6String+0x1f0>)
 8084102:	f006 fdf9 	bl	808acf8 <__adddf3>
      if(counterIndex > MAX_COUNTER_INDEX){
 8084106:	4642      	mov	r2, r8
 8084108:	464b      	mov	r3, r9
      counterIndex++;
 808410a:	4604      	mov	r4, r0
 808410c:	460d      	mov	r5, r1
      if(counterIndex > MAX_COUNTER_INDEX){
 808410e:	f007 fa39 	bl	808b584 <__aeabi_dcmpgt>
 8084112:	2800      	cmp	r0, #0
 8084114:	d0e8      	beq.n	80840e8 <_Z23getEspAQSyncDiagnostics6String+0x70>
        if(debugging_enabled){
 8084116:	6833      	ldr	r3, [r6, #0]
 8084118:	b133      	cbz	r3, 8084128 <_Z23getEspAQSyncDiagnostics6String+0xb0>
          Serial.printf("Unable to get AQSync diag from ESP, counter index: %1.1f\n\r", counterIndex);
 808411a:	f006 fa43 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808411e:	4622      	mov	r2, r4
 8084120:	462b      	mov	r3, r5
 8084122:	4659      	mov	r1, fp
 8084124:	f7fc fc9c 	bl	8080a60 <_ZN5Print6printfEPKcz>
        timeOut = true;
 8084128:	f04f 0a01 	mov.w	sl, #1
 808412c:	e7dc      	b.n	80840e8 <_Z23getEspAQSyncDiagnostics6String+0x70>
    delay(10);
 808412e:	200a      	movs	r0, #10
 8084130:	f005 fd54 	bl	8089bdc <delay>
    receivedData = Serial1.readString();
 8084134:	f006 fb54 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 8084138:	4601      	mov	r1, r0
 808413a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 808413e:	f005 fb2d 	bl	808979c <_ZN6Stream10readStringEv>
 8084142:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8084146:	f107 0018 	add.w	r0, r7, #24
 808414a:	f005 f845 	bl	80891d8 <_ZN6StringaSEOS_>
 808414e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8084152:	f004 ffad 	bl	80890b0 <_ZN6StringD1Ev>
    char buffer[receivedData.length()];
 8084156:	6a3a      	ldr	r2, [r7, #32]
		{getBytes((unsigned char *)buf, bufsize, index);}
 8084158:	f107 0018 	add.w	r0, r7, #24
 808415c:	1dd3      	adds	r3, r2, #7
 808415e:	f023 0307 	bic.w	r3, r3, #7
 8084162:	ebad 0d03 	sub.w	sp, sp, r3
 8084166:	ad02      	add	r5, sp, #8
 8084168:	2300      	movs	r3, #0
 808416a:	4629      	mov	r1, r5
 808416c:	f005 f925 	bl	80893ba <_ZNK6String8getBytesEPhjj>
    String deviceSection;
 8084170:	493e      	ldr	r1, [pc, #248]	; (808426c <_Z23getEspAQSyncDiagnostics6String+0x1f4>)
 8084172:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8084176:	f004 ffe5 	bl	8089144 <_ZN6StringC1EPKc>
    Serial.println("This is char version of recieved String: ");
 808417a:	f006 fa13 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808417e:	493c      	ldr	r1, [pc, #240]	; (8084270 <_Z23getEspAQSyncDiagnostics6String+0x1f8>)
 8084180:	f005 f9b7 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println(buffer);
 8084184:	f006 fa0e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084188:	4629      	mov	r1, r5
 808418a:	f005 f9b2 	bl	80894f2 <_ZN5Print7printlnEPKc>
    for (int i = 1; i < strlen(buffer); i++) {
 808418e:	2401      	movs	r4, #1
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8084190:	4e36      	ldr	r6, [pc, #216]	; (808426c <_Z23getEspAQSyncDiagnostics6String+0x1f4>)
 8084192:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8084284 <_Z23getEspAQSyncDiagnostics6String+0x20c>
            if (Particle.connected() && serial_cellular_enabled) {
 8084196:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8084288 <_Z23getEspAQSyncDiagnostics6String+0x210>
    for (int i = 1; i < strlen(buffer); i++) {
 808419a:	4628      	mov	r0, r5
 808419c:	f007 ff33 	bl	808c006 <strlen>
 80841a0:	42a0      	cmp	r0, r4
 80841a2:	d94f      	bls.n	8084244 <_Z23getEspAQSyncDiagnostics6String+0x1cc>
        if (buffer[i] == '@' && deviceSection != "" && deviceSection != "@") {
 80841a4:	5d2b      	ldrb	r3, [r5, r4]
 80841a6:	2b40      	cmp	r3, #64	; 0x40
 80841a8:	d006      	beq.n	80841b8 <_Z23getEspAQSyncDiagnostics6String+0x140>
	String & operator += (char c)			{concat(c); return (*this);}
 80841aa:	5d29      	ldrb	r1, [r5, r4]
 80841ac:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80841b0:	f005 f8b9 	bl	8089326 <_ZN6String6concatEc>
    for (int i = 1; i < strlen(buffer); i++) {
 80841b4:	3401      	adds	r4, #1
 80841b6:	e7f0      	b.n	808419a <_Z23getEspAQSyncDiagnostics6String+0x122>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80841b8:	4631      	mov	r1, r6
 80841ba:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80841be:	f005 f8df 	bl	8089380 <_ZNK6String6equalsEPKc>
        if (buffer[i] == '@' && deviceSection != "" && deviceSection != "@") {
 80841c2:	2800      	cmp	r0, #0
 80841c4:	d1f1      	bne.n	80841aa <_Z23getEspAQSyncDiagnostics6String+0x132>
 80841c6:	4641      	mov	r1, r8
 80841c8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80841cc:	f005 f8d8 	bl	8089380 <_ZNK6String6equalsEPKc>
 80841d0:	2800      	cmp	r0, #0
 80841d2:	d1ea      	bne.n	80841aa <_Z23getEspAQSyncDiagnostics6String+0x132>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80841d4:	f004 fbc0 	bl	8088958 <spark_cloud_flag_connected>
            if (Particle.connected() && serial_cellular_enabled) {
 80841d8:	2800      	cmp	r0, #0
 80841da:	d0eb      	beq.n	80841b4 <_Z23getEspAQSyncDiagnostics6String+0x13c>
 80841dc:	f8d9 3000 	ldr.w	r3, [r9]
 80841e0:	2b00      	cmp	r3, #0
 80841e2:	d0e7      	beq.n	80841b4 <_Z23getEspAQSyncDiagnostics6String+0x13c>
                Serial.println("This is what I am publishing: ");
 80841e4:	f006 f9de 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80841e8:	4922      	ldr	r1, [pc, #136]	; (8084274 <_Z23getEspAQSyncDiagnostics6String+0x1fc>)
 80841ea:	f005 f982 	bl	80894f2 <_ZN5Print7printlnEPKc>
                Serial.println(deviceSection);
 80841ee:	f006 f9d9 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80841f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80841f4:	f005 f97d 	bl	80894f2 <_ZN5Print7printlnEPKc>
 80841f8:	4b1f      	ldr	r3, [pc, #124]	; (8084278 <_Z23getEspAQSyncDiagnostics6String+0x200>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80841fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80841fc:	781b      	ldrb	r3, [r3, #0]
 80841fe:	491f      	ldr	r1, [pc, #124]	; (808427c <_Z23getEspAQSyncDiagnostics6String+0x204>)
 8084200:	4638      	mov	r0, r7
 8084202:	f88d 3000 	strb.w	r3, [sp]
 8084206:	233c      	movs	r3, #60	; 0x3c
 8084208:	f005 ff9c 	bl	808a144 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808420c:	1d38      	adds	r0, r7, #4
 808420e:	f7ff f9c7 	bl	80835a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                Particle.process(); //attempt at ensuring the publish is complete before sleeping
 8084212:	f7fc fc41 	bl	8080a98 <_ZN10CloudClass7processEv>
                deviceSection = "";
 8084216:	4915      	ldr	r1, [pc, #84]	; (808426c <_Z23getEspAQSyncDiagnostics6String+0x1f4>)
 8084218:	f107 0028 	add.w	r0, r7, #40	; 0x28
 808421c:	f004 ffe4 	bl	80891e8 <_ZN6StringaSEPKc>
                return 1;
 8084220:	2401      	movs	r4, #1
    String deviceSection;
 8084222:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8084226:	f004 ff43 	bl	80890b0 <_ZN6StringD1Ev>
    String receivedData = " ";
 808422a:	f107 0018 	add.w	r0, r7, #24
 808422e:	f004 ff3f 	bl	80890b0 <_ZN6StringD1Ev>
    String getAQSyncDiag = "D&";
 8084232:	f107 0008 	add.w	r0, r7, #8
 8084236:	f004 ff3b 	bl	80890b0 <_ZN6StringD1Ev>
}
 808423a:	4620      	mov	r0, r4
 808423c:	373c      	adds	r7, #60	; 0x3c
 808423e:	46bd      	mov	sp, r7
 8084240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8084244:	f04f 34ff 	mov.w	r4, #4294967295
 8084248:	e7eb      	b.n	8084222 <_Z23getEspAQSyncDiagnostics6String+0x1aa>
 808424a:	bf00      	nop
 808424c:	f3af 8000 	nop.w
 8084250:	00000000 	.word	0x00000000
 8084254:	40cd4c00 	.word	0x40cd4c00
 8084258:	0808f117 	.word	0x0808f117
 808425c:	200005e8 	.word	0x200005e8
 8084260:	0808fd99 	.word	0x0808fd99
 8084264:	0808f11a 	.word	0x0808f11a
 8084268:	3ff00000 	.word	0x3ff00000
 808426c:	080900b9 	.word	0x080900b9
 8084270:	0808f08a 	.word	0x0808f08a
 8084274:	0808f0f1 	.word	0x0808f0f1
 8084278:	20000520 	.word	0x20000520
 808427c:	0808f179 	.word	0x0808f179
 8084280:	0808f13e 	.word	0x0808f13e
 8084284:	0808f0ef 	.word	0x0808f0ef
 8084288:	20000c28 	.word	0x20000c28

0808428c <_ZN5Print5printIiLi0EEEjT_i>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 808428c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084290:	4607      	mov	r7, r0
 8084292:	460c      	mov	r4, r1
{
    if (base == 0) {
 8084294:	4615      	mov	r5, r2
 8084296:	b92a      	cbnz	r2, 80842a4 <_ZN5Print5printIiLi0EEEjT_i+0x18>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 8084298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(n);
 808429c:	6803      	ldr	r3, [r0, #0]
 808429e:	b2c9      	uxtb	r1, r1
 80842a0:	689b      	ldr	r3, [r3, #8]
 80842a2:	4718      	bx	r3
        if (n < 0 && base == 10) {
 80842a4:	2900      	cmp	r1, #0
 80842a6:	da0d      	bge.n	80842c4 <_ZN5Print5printIiLi0EEEjT_i+0x38>
 80842a8:	2a0a      	cmp	r2, #10
 80842aa:	d10b      	bne.n	80842c4 <_ZN5Print5printIiLi0EEEjT_i+0x38>
            t = print('-');
 80842ac:	212d      	movs	r1, #45	; 0x2d
 80842ae:	f005 f911 	bl	80894d4 <_ZN5Print5printEc>
 80842b2:	4606      	mov	r6, r0
            val = -n;
 80842b4:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 80842b6:	4638      	mov	r0, r7
 80842b8:	b2ea      	uxtb	r2, r5
 80842ba:	f005 f92e 	bl	808951a <_ZN5Print11printNumberEmh>
}
 80842be:	4430      	add	r0, r6
 80842c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
 80842c4:	4621      	mov	r1, r4
        size_t t = 0;
 80842c6:	2600      	movs	r6, #0
 80842c8:	e7f5      	b.n	80842b6 <_ZN5Print5printIiLi0EEEjT_i+0x2a>

080842ca <_ZN5Print7printlnIiLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 80842ca:	b538      	push	{r3, r4, r5, lr}
 80842cc:	4605      	mov	r5, r0
        size_t n = print(b, base);
 80842ce:	f7ff ffdd 	bl	808428c <_ZN5Print5printIiLi0EEEjT_i>
 80842d2:	4604      	mov	r4, r0
        n += println();
 80842d4:	4628      	mov	r0, r5
 80842d6:	f005 f900 	bl	80894da <_ZN5Print7printlnEv>
    }
 80842da:	4420      	add	r0, r4
 80842dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080842e0 <setup>:
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80842e0:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
{
 80842e4:	b570      	push	{r4, r5, r6, lr}
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80842e6:	4bc6      	ldr	r3, [pc, #792]	; (8084600 <setup+0x320>)
{
 80842e8:	b0a8      	sub	sp, #160	; 0xa0
    String init_log;
 80842ea:	49c6      	ldr	r1, [pc, #792]	; (8084604 <setup+0x324>)
    pinMode(lmp91000_1_en, OUTPUT);
 80842ec:	4dc6      	ldr	r5, [pc, #792]	; (8084608 <setup+0x328>)
    String init_log;
 80842ee:	a801      	add	r0, sp, #4
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80842f0:	801a      	strh	r2, [r3, #0]
    pinMode(lmp91000_2_en, OUTPUT);
 80842f2:	4cc6      	ldr	r4, [pc, #792]	; (808460c <setup+0x32c>)
    String init_log;
 80842f4:	f004 ff26 	bl	8089144 <_ZN6StringC1EPKc>
    setADCSampleTime(ADC_SampleTime_480Cycles);
 80842f8:	2007      	movs	r0, #7
 80842fa:	f005 fc6d 	bl	8089bd8 <setADCSampleTime>
    pinMode(lmp91000_1_en, OUTPUT);
 80842fe:	2101      	movs	r1, #1
 8084300:	8828      	ldrh	r0, [r5, #0]
 8084302:	f006 fbfd 	bl	808ab00 <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 8084306:	2101      	movs	r1, #1
 8084308:	8820      	ldrh	r0, [r4, #0]
 808430a:	f006 fbf9 	bl	808ab00 <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 808430e:	4bc0      	ldr	r3, [pc, #768]	; (8084610 <setup+0x330>)
 8084310:	2101      	movs	r1, #1
 8084312:	8818      	ldrh	r0, [r3, #0]
 8084314:	f006 fbf4 	bl	808ab00 <pinMode>
    pinMode(plantower_en, OUTPUT);
 8084318:	4bbe      	ldr	r3, [pc, #760]	; (8084614 <setup+0x334>)
 808431a:	2101      	movs	r1, #1
 808431c:	8818      	ldrh	r0, [r3, #0]
 808431e:	f006 fbef 	bl	808ab00 <pinMode>
    pinMode(power_led_en, OUTPUT);
 8084322:	4bbd      	ldr	r3, [pc, #756]	; (8084618 <setup+0x338>)
 8084324:	2101      	movs	r1, #1
 8084326:	8818      	ldrh	r0, [r3, #0]
 8084328:	f006 fbea 	bl	808ab00 <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 808432c:	4bbb      	ldr	r3, [pc, #748]	; (808461c <setup+0x33c>)
 808432e:	2101      	movs	r1, #1
 8084330:	8818      	ldrh	r0, [r3, #0]
 8084332:	f006 fbe5 	bl	808ab00 <pinMode>
    pinMode(blower_en, OUTPUT);
 8084336:	4bba      	ldr	r3, [pc, #744]	; (8084620 <setup+0x340>)
 8084338:	2101      	movs	r1, #1
 808433a:	8818      	ldrh	r0, [r3, #0]
 808433c:	f006 fbe0 	bl	808ab00 <pinMode>
    pinMode(co2_en, OUTPUT);
 8084340:	4bb8      	ldr	r3, [pc, #736]	; (8084624 <setup+0x344>)
 8084342:	2101      	movs	r1, #1
 8084344:	8818      	ldrh	r0, [r3, #0]
 8084346:	f006 fbdb 	bl	808ab00 <pinMode>
    readStoredVars();
 808434a:	f7fc fdaf 	bl	8080eac <_Z14readStoredVarsv>
    pmic.begin();
 808434e:	48b6      	ldr	r0, [pc, #728]	; (8084628 <setup+0x348>)
 8084350:	f004 fb81 	bl	8088a56 <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 8084354:	f241 0170 	movw	r1, #4208	; 0x1070
 8084358:	48b3      	ldr	r0, [pc, #716]	; (8084628 <setup+0x348>)
 808435a:	f004 fcb0 	bl	8088cbe <_ZN4PMIC16setChargeVoltageEt>
    pmic.enableCharging();
 808435e:	48b2      	ldr	r0, [pc, #712]	; (8084628 <setup+0x348>)
 8084360:	f004 fc5c 	bl	8088c1c <_ZN4PMIC14enableChargingEv>
    powerCheck.loop();
 8084364:	4eb1      	ldr	r6, [pc, #708]	; (808462c <setup+0x34c>)
    writeRegister(0, 0b00110100);
 8084366:	2134      	movs	r1, #52	; 0x34
 8084368:	2000      	movs	r0, #0
 808436a:	f7fc fc5b 	bl	8080c24 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 808436e:	211b      	movs	r1, #27
 8084370:	2001      	movs	r0, #1
 8084372:	f7fc fc57 	bl	8080c24 <_Z13writeRegisterhh>
    powerCheck.loop();
 8084376:	4630      	mov	r0, r6
 8084378:	f001 fee6 	bl	8086148 <_ZN10PowerCheck4loopEv>
    if (powerCheck.getHasPower() == 0) 
 808437c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 8084380:	2b00      	cmp	r3, #0
 8084382:	f040 8216 	bne.w	80847b2 <setup+0x4d2>
        goToSleepBattery();
 8084386:	f7fd ff31 	bl	80821ec <_Z16goToSleepBatteryv>
    digitalWrite(lmp91000_1_en, HIGH);
 808438a:	2101      	movs	r1, #1
 808438c:	8828      	ldrh	r0, [r5, #0]
 808438e:	f006 fbc8 	bl	808ab22 <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 8084392:	8820      	ldrh	r0, [r4, #0]
 8084394:	2101      	movs	r1, #1
 8084396:	f006 fbc4 	bl	808ab22 <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 808439a:	4b9f      	ldr	r3, [pc, #636]	; (8084618 <setup+0x338>)
 808439c:	2101      	movs	r1, #1
 808439e:	8818      	ldrh	r0, [r3, #0]
 80843a0:	f006 fbbf 	bl	808ab22 <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 80843a4:	4b9b      	ldr	r3, [pc, #620]	; (8084614 <setup+0x334>)
 80843a6:	2101      	movs	r1, #1
 80843a8:	8818      	ldrh	r0, [r3, #0]
 80843aa:	f006 fbba 	bl	808ab22 <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 80843ae:	4b9b      	ldr	r3, [pc, #620]	; (808461c <setup+0x33c>)
 80843b0:	2101      	movs	r1, #1
 80843b2:	8818      	ldrh	r0, [r3, #0]
 80843b4:	f006 fbb5 	bl	808ab22 <digitalWrite>
    digitalWrite(blower_en, HIGH);
 80843b8:	4b99      	ldr	r3, [pc, #612]	; (8084620 <setup+0x340>)
 80843ba:	2101      	movs	r1, #1
 80843bc:	8818      	ldrh	r0, [r3, #0]
 80843be:	f006 fbb0 	bl	808ab22 <digitalWrite>
    digitalWrite(co2_en, HIGH);
 80843c2:	4b98      	ldr	r3, [pc, #608]	; (8084624 <setup+0x344>)
 80843c4:	2101      	movs	r1, #1
 80843c6:	8818      	ldrh	r0, [r3, #0]
 80843c8:	f006 fbab 	bl	808ab22 <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 80843cc:	4b90      	ldr	r3, [pc, #576]	; (8084610 <setup+0x330>)
 80843ce:	2101      	movs	r1, #1
 80843d0:	8818      	ldrh	r0, [r3, #0]
 80843d2:	f006 fba6 	bl	808ab22 <digitalWrite>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80843d6:	4a96      	ldr	r2, [pc, #600]	; (8084630 <setup+0x350>)
 80843d8:	4996      	ldr	r1, [pc, #600]	; (8084634 <setup+0x354>)
 80843da:	4897      	ldr	r0, [pc, #604]	; (8084638 <setup+0x358>)
 80843dc:	f005 fdbf 	bl	8089f5e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80843e0:	4a96      	ldr	r2, [pc, #600]	; (808463c <setup+0x35c>)
 80843e2:	4997      	ldr	r1, [pc, #604]	; (8084640 <setup+0x360>)
 80843e4:	4894      	ldr	r0, [pc, #592]	; (8084638 <setup+0x358>)
 80843e6:	f005 fdba 	bl	8089f5e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80843ea:	2300      	movs	r3, #0
 80843ec:	2202      	movs	r2, #2
 80843ee:	4995      	ldr	r1, [pc, #596]	; (8084644 <setup+0x364>)
 80843f0:	4895      	ldr	r0, [pc, #596]	; (8084648 <setup+0x368>)
 80843f2:	f004 fa91 	bl	8088918 <spark_variable>
    Serial1.begin(9600);
 80843f6:	f006 f9f3 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 80843fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80843fe:	f006 f9e9 	bl	808a7d4 <_ZN11USARTSerial5beginEm>
    Serial4.begin(9600);
 8084402:	f7fc fb6d 	bl	8080ae0 <_Z22__fetch_global_Serial4v>
 8084406:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808440a:	f006 f9e3 	bl	808a7d4 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 808440e:	f7fc fba3 	bl	8080b58 <_Z22__fetch_global_Serial5v>
 8084412:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8084416:	f006 f9dd 	bl	808a7d4 <_ZN11USARTSerial5beginEm>
    Serial4.setTimeout(5000);
 808441a:	f7fc fb61 	bl	8080ae0 <_Z22__fetch_global_Serial4v>
 808441e:	f241 3188 	movw	r1, #5000	; 0x1388
 8084422:	f005 f9b9 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    delay(10000);
 8084426:	f242 7010 	movw	r0, #10000	; 0x2710
 808442a:	f005 fbd7 	bl	8089bdc <delay>
    Serial.begin(9600);
 808442e:	f006 f8b9 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084432:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8084436:	f006 f89b 	bl	808a570 <_ZN9USBSerial5beginEl>
    fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 808443a:	4b84      	ldr	r3, [pc, #528]	; (808464c <setup+0x36c>)
 808443c:	220a      	movs	r2, #10
 808443e:	6819      	ldr	r1, [r3, #0]
 8084440:	a805      	add	r0, sp, #20
 8084442:	f004 fef3 	bl	808922c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8084446:	a905      	add	r1, sp, #20
 8084448:	a809      	add	r0, sp, #36	; 0x24
 808444a:	f004 feba 	bl	80891c2 <_ZN6StringC1ERKS_>
 808444e:	4980      	ldr	r1, [pc, #512]	; (8084650 <setup+0x370>)
 8084450:	a809      	add	r0, sp, #36	; 0x24
 8084452:	f004 ff81 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 8084456:	4604      	mov	r4, r0
 8084458:	f005 fba8 	bl	8089bac <_ZN9TimeClass4yearEv>
 808445c:	220a      	movs	r2, #10
 808445e:	4601      	mov	r1, r0
 8084460:	a80d      	add	r0, sp, #52	; 0x34
 8084462:	f004 fee3 	bl	808922c <_ZN6StringC1Eih>
 8084466:	a90d      	add	r1, sp, #52	; 0x34
 8084468:	4620      	mov	r0, r4
 808446a:	f004 ff69 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 808446e:	4604      	mov	r4, r0
 8084470:	f005 fb94 	bl	8089b9c <_ZN9TimeClass5monthEv>
 8084474:	220a      	movs	r2, #10
 8084476:	4601      	mov	r1, r0
 8084478:	a811      	add	r0, sp, #68	; 0x44
 808447a:	f004 fed7 	bl	808922c <_ZN6StringC1Eih>
 808447e:	a911      	add	r1, sp, #68	; 0x44
 8084480:	4620      	mov	r0, r4
 8084482:	f004 ff5d 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 8084486:	4604      	mov	r4, r0
 8084488:	f005 fb7c 	bl	8089b84 <_ZN9TimeClass3dayEv>
 808448c:	220a      	movs	r2, #10
 808448e:	4601      	mov	r1, r0
 8084490:	a815      	add	r0, sp, #84	; 0x54
 8084492:	f004 fecb 	bl	808922c <_ZN6StringC1Eih>
 8084496:	4620      	mov	r0, r4
 8084498:	a915      	add	r1, sp, #84	; 0x54
 808449a:	f004 ff51 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 808449e:	496c      	ldr	r1, [pc, #432]	; (8084650 <setup+0x370>)
 80844a0:	f004 ff5a 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 80844a4:	4604      	mov	r4, r0
 80844a6:	f005 fb49 	bl	8089b3c <_ZN9TimeClass4hourEv>
 80844aa:	220a      	movs	r2, #10
 80844ac:	4601      	mov	r1, r0
 80844ae:	a819      	add	r0, sp, #100	; 0x64
 80844b0:	f004 febc 	bl	808922c <_ZN6StringC1Eih>
 80844b4:	a919      	add	r1, sp, #100	; 0x64
 80844b6:	4620      	mov	r0, r4
 80844b8:	f004 ff42 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 80844bc:	4604      	mov	r4, r0
 80844be:	f005 fb49 	bl	8089b54 <_ZN9TimeClass6minuteEv>
 80844c2:	220a      	movs	r2, #10
 80844c4:	4601      	mov	r1, r0
 80844c6:	a81d      	add	r0, sp, #116	; 0x74
 80844c8:	f004 feb0 	bl	808922c <_ZN6StringC1Eih>
 80844cc:	a91d      	add	r1, sp, #116	; 0x74
 80844ce:	4620      	mov	r0, r4
 80844d0:	f004 ff36 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 80844d4:	4604      	mov	r4, r0
 80844d6:	f005 fb49 	bl	8089b6c <_ZN9TimeClass6secondEv>
 80844da:	220a      	movs	r2, #10
 80844dc:	4601      	mov	r1, r0
 80844de:	a821      	add	r0, sp, #132	; 0x84
 80844e0:	f004 fea4 	bl	808922c <_ZN6StringC1Eih>
 80844e4:	4620      	mov	r0, r4
 80844e6:	a921      	add	r1, sp, #132	; 0x84
 80844e8:	f004 ff2a 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 80844ec:	4959      	ldr	r1, [pc, #356]	; (8084654 <setup+0x374>)
 80844ee:	f004 ff33 	bl	8089358 <_ZplRK15StringSumHelperPKc>
 80844f2:	4c59      	ldr	r4, [pc, #356]	; (8084658 <setup+0x378>)
 80844f4:	4601      	mov	r1, r0
 80844f6:	4620      	mov	r0, r4
 80844f8:	f004 fe54 	bl	80891a4 <_ZN6StringaSERKS_>
 80844fc:	a821      	add	r0, sp, #132	; 0x84
 80844fe:	f004 fdd7 	bl	80890b0 <_ZN6StringD1Ev>
 8084502:	a81d      	add	r0, sp, #116	; 0x74
 8084504:	f004 fdd4 	bl	80890b0 <_ZN6StringD1Ev>
 8084508:	a819      	add	r0, sp, #100	; 0x64
 808450a:	f004 fdd1 	bl	80890b0 <_ZN6StringD1Ev>
 808450e:	a815      	add	r0, sp, #84	; 0x54
 8084510:	f004 fdce 	bl	80890b0 <_ZN6StringD1Ev>
 8084514:	a811      	add	r0, sp, #68	; 0x44
 8084516:	f004 fdcb 	bl	80890b0 <_ZN6StringD1Ev>
 808451a:	a80d      	add	r0, sp, #52	; 0x34
 808451c:	f004 fdc8 	bl	80890b0 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084520:	a809      	add	r0, sp, #36	; 0x24
 8084522:	f004 fdc5 	bl	80890b0 <_ZN6StringD1Ev>
 8084526:	a805      	add	r0, sp, #20
 8084528:	f004 fdc2 	bl	80890b0 <_ZN6StringD1Ev>
    Serial.println("Checking for sd card");
 808452c:	f006 f83a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084530:	494a      	ldr	r1, [pc, #296]	; (808465c <setup+0x37c>)
 8084532:	f004 ffde 	bl	80894f2 <_ZN5Print7printlnEPKc>
	StringSumHelper(const char *p) : String(p) {}
 8084536:	494a      	ldr	r1, [pc, #296]	; (8084660 <setup+0x380>)
 8084538:	a821      	add	r0, sp, #132	; 0x84
 808453a:	f004 fe03 	bl	8089144 <_ZN6StringC1EPKc>
    logFileName = "log_" + fileName;
 808453e:	4621      	mov	r1, r4
 8084540:	a821      	add	r0, sp, #132	; 0x84
 8084542:	f004 fefd 	bl	8089340 <_ZplRK15StringSumHelperRK6String>
 8084546:	4601      	mov	r1, r0
 8084548:	4846      	ldr	r0, [pc, #280]	; (8084664 <setup+0x384>)
 808454a:	f004 fe2b 	bl	80891a4 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 808454e:	a821      	add	r0, sp, #132	; 0x84
 8084550:	f004 fdae 	bl	80890b0 <_ZN6StringD1Ev>
 8084554:	4944      	ldr	r1, [pc, #272]	; (8084668 <setup+0x388>)
 8084556:	2302      	movs	r3, #2
 8084558:	220c      	movs	r2, #12
 808455a:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 808455e:	f7fc fb37 	bl	8080bd0 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS)) 
 8084562:	2800      	cmp	r0, #0
 8084564:	f000 8139 	beq.w	80847da <setup+0x4fa>
        Serial.print("Created new file to log to uSD card: ");
 8084568:	f006 f81c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808456c:	493f      	ldr	r1, [pc, #252]	; (808466c <setup+0x38c>)
 808456e:	f004 ffad 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(fileName);
 8084572:	f006 f817 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084576:	6821      	ldr	r1, [r4, #0]
    if (debugging_enabled)
 8084578:	4c3d      	ldr	r4, [pc, #244]	; (8084670 <setup+0x390>)
        Serial.println("No uSD card detected.");
 808457a:	f004 ffba 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.println("Starting LMP91000 CO initialization");
 808457e:	f006 f811 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084582:	493c      	ldr	r1, [pc, #240]	; (8084674 <setup+0x394>)
 8084584:	f004 ffb5 	bl	80894f2 <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 8084588:	6823      	ldr	r3, [r4, #0]
 808458a:	b14b      	cbz	r3, 80845a0 <setup+0x2c0>
        writeLogFile("Starting LMP91000 CO initialization");
 808458c:	4939      	ldr	r1, [pc, #228]	; (8084674 <setup+0x394>)
 808458e:	a821      	add	r0, sp, #132	; 0x84
 8084590:	f004 fdd8 	bl	8089144 <_ZN6StringC1EPKc>
 8084594:	a821      	add	r0, sp, #132	; 0x84
 8084596:	f7fd f8eb 	bl	8081770 <_Z12writeLogFile6String>
 808459a:	a821      	add	r0, sp, #132	; 0x84
 808459c:	f004 fd88 	bl	80890b0 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 80845a0:	f006 fb42 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80845a4:	f006 f996 	bl	808a8d4 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 80845a8:	2100      	movs	r1, #0
 80845aa:	8828      	ldrh	r0, [r5, #0]
 80845ac:	f006 fab9 	bl	808ab22 <digitalWrite>
    if (lmp91000_1.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0) 
 80845b0:	2303      	movs	r3, #3
 80845b2:	22b0      	movs	r2, #176	; 0xb0
 80845b4:	2118      	movs	r1, #24
 80845b6:	4830      	ldr	r0, [pc, #192]	; (8084678 <setup+0x398>)
 80845b8:	f001 fd70 	bl	808609c <_ZN8LMP910009configureEhhh>
 80845bc:	2800      	cmp	r0, #0
 80845be:	f040 8110 	bne.w	80847e2 <setup+0x502>
        Serial.println("Couldn't communicate with LMP91000_1 for CO");
 80845c2:	f005 ffef 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80845c6:	492d      	ldr	r1, [pc, #180]	; (808467c <setup+0x39c>)
 80845c8:	f004 ff93 	bl	80894f2 <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 80845cc:	6823      	ldr	r3, [r4, #0]
 80845ce:	b14b      	cbz	r3, 80845e4 <setup+0x304>
            writeLogFile("Couldn't communicate with LMP91000_1 for CO");
 80845d0:	492a      	ldr	r1, [pc, #168]	; (808467c <setup+0x39c>)
 80845d2:	a821      	add	r0, sp, #132	; 0x84
 80845d4:	f004 fdb6 	bl	8089144 <_ZN6StringC1EPKc>
 80845d8:	a821      	add	r0, sp, #132	; 0x84
 80845da:	f7fd f8c9 	bl	8081770 <_Z12writeLogFile6String>
 80845de:	a821      	add	r0, sp, #132	; 0x84
 80845e0:	f004 fd66 	bl	80890b0 <_ZN6StringD1Ev>
    ads1.begin();
 80845e4:	4826      	ldr	r0, [pc, #152]	; (8084680 <setup+0x3a0>)
 80845e6:	f001 fe46 	bl	8086276 <_ZN16Adafruit_ADS10155beginEv>
    if (Wire.requestFrom(0x49, 1) == 0) 
 80845ea:	f006 fb1d 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80845ee:	2201      	movs	r2, #1
 80845f0:	2149      	movs	r1, #73	; 0x49
 80845f2:	f006 f99e 	bl	808a932 <_ZN7TwoWire11requestFromEhj>
 80845f6:	2800      	cmp	r0, #0
 80845f8:	f040 8109 	bne.w	808480e <setup+0x52e>
 80845fc:	e042      	b.n	8084684 <setup+0x3a4>
 80845fe:	bf00      	nop
 8084600:	20000c48 	.word	0x20000c48
 8084604:	080900b9 	.word	0x080900b9
 8084608:	200000c0 	.word	0x200000c0
 808460c:	200000c4 	.word	0x200000c4
 8084610:	20000094 	.word	0x20000094
 8084614:	200000c8 	.word	0x200000c8
 8084618:	200000cc 	.word	0x200000cc
 808461c:	20000090 	.word	0x20000090
 8084620:	20000088 	.word	0x20000088
 8084624:	2000008c 	.word	0x2000008c
 8084628:	20000770 	.word	0x20000770
 808462c:	20000774 	.word	0x20000774
 8084630:	0808f190 	.word	0x0808f190
 8084634:	08080a0b 	.word	0x08080a0b
 8084638:	08089f33 	.word	0x08089f33
 808463c:	0808f19e 	.word	0x0808f19e
 8084640:	08084079 	.word	0x08084079
 8084644:	200002d4 	.word	0x200002d4
 8084648:	0808f1a9 	.word	0x0808f1a9
 808464c:	20000080 	.word	0x20000080
 8084650:	0808f1cf 	.word	0x0808f1cf
 8084654:	0808f1b2 	.word	0x0808f1b2
 8084658:	20000650 	.word	0x20000650
 808465c:	0808f1b7 	.word	0x0808f1b7
 8084660:	0808f1cc 	.word	0x0808f1cc
 8084664:	20000700 	.word	0x20000700
 8084668:	20000c1c 	.word	0x20000c1c
 808466c:	0808f1d1 	.word	0x0808f1d1
 8084670:	200005e8 	.word	0x200005e8
 8084674:	0808f20d 	.word	0x0808f20d
 8084678:	200006b9 	.word	0x200006b9
 808467c:	0808f231 	.word	0x0808f231
 8084680:	20000550 	.word	0x20000550
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8084684:	f005 ff8e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084688:	4971      	ldr	r1, [pc, #452]	; (8084850 <setup+0x570>)
 808468a:	f004 ff32 	bl	80894f2 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 808468e:	6823      	ldr	r3, [r4, #0]
 8084690:	b14b      	cbz	r3, 80846a6 <setup+0x3c6>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8084692:	496f      	ldr	r1, [pc, #444]	; (8084850 <setup+0x570>)
 8084694:	a821      	add	r0, sp, #132	; 0x84
 8084696:	f004 fd55 	bl	8089144 <_ZN6StringC1EPKc>
 808469a:	a821      	add	r0, sp, #132	; 0x84
 808469c:	f7fd f868 	bl	8081770 <_Z12writeLogFile6String>
 80846a0:	a821      	add	r0, sp, #132	; 0x84
 80846a2:	f004 fd05 	bl	80890b0 <_ZN6StringD1Ev>
    Serial.println("Starting LMP91000_2 initialization");
 80846a6:	f005 ff7d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80846aa:	496a      	ldr	r1, [pc, #424]	; (8084854 <setup+0x574>)
 80846ac:	f004 ff21 	bl	80894f2 <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 80846b0:	6823      	ldr	r3, [r4, #0]
 80846b2:	b14b      	cbz	r3, 80846c8 <setup+0x3e8>
        writeLogFile("Starting LMP91000_2 initialization");
 80846b4:	4967      	ldr	r1, [pc, #412]	; (8084854 <setup+0x574>)
 80846b6:	a821      	add	r0, sp, #132	; 0x84
 80846b8:	f004 fd44 	bl	8089144 <_ZN6StringC1EPKc>
 80846bc:	a821      	add	r0, sp, #132	; 0x84
 80846be:	f7fd f857 	bl	8081770 <_Z12writeLogFile6String>
 80846c2:	a821      	add	r0, sp, #132	; 0x84
 80846c4:	f004 fcf4 	bl	80890b0 <_ZN6StringD1Ev>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80846c8:	4d63      	ldr	r5, [pc, #396]	; (8084858 <setup+0x578>)
    Wire.begin();   //this must be done for the LMP91000
 80846ca:	f006 faad 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80846ce:	f006 f901 	bl	808a8d4 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80846d2:	2100      	movs	r1, #0
 80846d4:	8828      	ldrh	r0, [r5, #0]
 80846d6:	f006 fa24 	bl	808ab22 <digitalWrite>
    if (lmp91000_2.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80846da:	2303      	movs	r3, #3
 80846dc:	22b0      	movs	r2, #176	; 0xb0
 80846de:	2118      	movs	r1, #24
 80846e0:	485e      	ldr	r0, [pc, #376]	; (808485c <setup+0x57c>)
 80846e2:	f001 fcdb 	bl	808609c <_ZN8LMP910009configureEhhh>
 80846e6:	2800      	cmp	r0, #0
 80846e8:	f040 8096 	bne.w	8084818 <setup+0x538>
        Serial.println("Couldn't communicate with LMP91000 for 2");
 80846ec:	f005 ff5a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80846f0:	495b      	ldr	r1, [pc, #364]	; (8084860 <setup+0x580>)
 80846f2:	f004 fefe 	bl	80894f2 <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000 for 2");
 80846f6:	495a      	ldr	r1, [pc, #360]	; (8084860 <setup+0x580>)
 80846f8:	a821      	add	r0, sp, #132	; 0x84
 80846fa:	f004 fd23 	bl	8089144 <_ZN6StringC1EPKc>
 80846fe:	a821      	add	r0, sp, #132	; 0x84
 8084700:	f7fd f836 	bl	8081770 <_Z12writeLogFile6String>
 8084704:	a821      	add	r0, sp, #132	; 0x84
 8084706:	f004 fcd3 	bl	80890b0 <_ZN6StringD1Ev>
    ads2.begin();
 808470a:	4856      	ldr	r0, [pc, #344]	; (8084864 <setup+0x584>)
 808470c:	f001 fdb3 	bl	8086276 <_ZN16Adafruit_ADS10155beginEv>
    if (Wire.requestFrom(0x4A, 1) == 0) 
 8084710:	f006 fa8a 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8084714:	2201      	movs	r2, #1
 8084716:	214a      	movs	r1, #74	; 0x4a
 8084718:	f006 f90b 	bl	808a932 <_ZN7TwoWire11requestFromEhj>
 808471c:	2800      	cmp	r0, #0
 808471e:	f040 8091 	bne.w	8084844 <setup+0x564>
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8084722:	f005 ff3f 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084726:	494a      	ldr	r1, [pc, #296]	; (8084850 <setup+0x570>)
 8084728:	f004 fee3 	bl	80894f2 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 808472c:	6823      	ldr	r3, [r4, #0]
 808472e:	b14b      	cbz	r3, 8084744 <setup+0x464>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8084730:	4947      	ldr	r1, [pc, #284]	; (8084850 <setup+0x570>)
 8084732:	a821      	add	r0, sp, #132	; 0x84
 8084734:	f004 fd06 	bl	8089144 <_ZN6StringC1EPKc>
 8084738:	a821      	add	r0, sp, #132	; 0x84
 808473a:	f7fd f819 	bl	8081770 <_Z12writeLogFile6String>
 808473e:	a821      	add	r0, sp, #132	; 0x84
 8084740:	f004 fcb6 	bl	80890b0 <_ZN6StringD1Ev>
    resetESP();
 8084744:	f7fd fdae 	bl	80822a4 <_Z8resetESPv>
    Serial.println("ESP reset!");
 8084748:	f005 ff2c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808474c:	4946      	ldr	r1, [pc, #280]	; (8084868 <setup+0x588>)
 808474e:	f004 fed0 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("FW Version: ");
 8084752:	f005 ff27 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084756:	4945      	ldr	r1, [pc, #276]	; (808486c <setup+0x58c>)
 8084758:	f004 feb8 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 808475c:	f005 ff22 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084760:	220a      	movs	r2, #10
 8084762:	2146      	movs	r1, #70	; 0x46
 8084764:	f7ff fdb1 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print("Build: ");
 8084768:	f005 ff1c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808476c:	4940      	ldr	r1, [pc, #256]	; (8084870 <setup+0x590>)
 808476e:	f004 fead 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 8084772:	f005 ff17 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084776:	220a      	movs	r2, #10
 8084778:	210d      	movs	r1, #13
 808477a:	f7ff fda6 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
    enableContinuousGPS();
 808477e:	f7fc fdcb 	bl	8081318 <_Z19enableContinuousGPSv>
#define SYSTEM_VERSION_200
#define SYSTEM_VERSION_201ALPHA1
#define SYSTEM_VERSION_201ALPHA2
#define SYSTEM_VERSION_201

typedef struct __attribute__((packed)) SystemVersionInfo
 8084782:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8084784:	2100      	movs	r1, #0
 8084786:	a821      	add	r0, sp, #132	; 0x84
 8084788:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 808478c:	f004 f838 	bl	8088800 <system_version_info>
        return String(info.versionString);
 8084790:	a923      	add	r1, sp, #140	; 0x8c
 8084792:	a81d      	add	r0, sp, #116	; 0x74
 8084794:	f004 fcd6 	bl	8089144 <_ZN6StringC1EPKc>
    Log.info("System version: %s", (const char*)System.version());
 8084798:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 808479a:	4936      	ldr	r1, [pc, #216]	; (8084874 <setup+0x594>)
 808479c:	4836      	ldr	r0, [pc, #216]	; (8084878 <setup+0x598>)
 808479e:	f7fc f987 	bl	8080ab0 <_ZNK5spark6Logger4infoEPKcz>
 80847a2:	a81d      	add	r0, sp, #116	; 0x74
 80847a4:	f004 fc84 	bl	80890b0 <_ZN6StringD1Ev>
    String init_log;
 80847a8:	a801      	add	r0, sp, #4
 80847aa:	f004 fc81 	bl	80890b0 <_ZN6StringD1Ev>
}
 80847ae:	b028      	add	sp, #160	; 0xa0
 80847b0:	bd70      	pop	{r4, r5, r6, pc}
    else if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 80847b2:	4b32      	ldr	r3, [pc, #200]	; (808487c <setup+0x59c>)
 80847b4:	681b      	ldr	r3, [r3, #0]
 80847b6:	2b01      	cmp	r3, #1
 80847b8:	f47f ade7 	bne.w	808438a <setup+0xaa>
 80847bc:	4830      	ldr	r0, [pc, #192]	; (8084880 <setup+0x5a0>)
 80847be:	f005 fa97 	bl	8089cf0 <_ZN9FuelGauge6getSoCEv>
 80847c2:	4930      	ldr	r1, [pc, #192]	; (8084884 <setup+0x5a4>)
 80847c4:	f007 fa42 	bl	808bc4c <__aeabi_fcmplt>
 80847c8:	2800      	cmp	r0, #0
 80847ca:	f43f adde 	beq.w	808438a <setup+0xaa>
 80847ce:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 80847d2:	2b00      	cmp	r3, #0
 80847d4:	f47f add9 	bne.w	808438a <setup+0xaa>
 80847d8:	e5d5      	b.n	8084386 <setup+0xa6>
        Serial.println("No uSD card detected.");
 80847da:	f005 fee3 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80847de:	492a      	ldr	r1, [pc, #168]	; (8084888 <setup+0x5a8>)
 80847e0:	e6ca      	b.n	8084578 <setup+0x298>
        Serial.println("Initialized LMP91000_1 for CO");
 80847e2:	f005 fedf 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80847e6:	4929      	ldr	r1, [pc, #164]	; (808488c <setup+0x5ac>)
 80847e8:	f004 fe83 	bl	80894f2 <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 80847ec:	6823      	ldr	r3, [r4, #0]
 80847ee:	b14b      	cbz	r3, 8084804 <setup+0x524>
            writeLogFile("Initialized LMP91000 for CO");
 80847f0:	4927      	ldr	r1, [pc, #156]	; (8084890 <setup+0x5b0>)
 80847f2:	a821      	add	r0, sp, #132	; 0x84
 80847f4:	f004 fca6 	bl	8089144 <_ZN6StringC1EPKc>
 80847f8:	a821      	add	r0, sp, #132	; 0x84
 80847fa:	f7fc ffb9 	bl	8081770 <_Z12writeLogFile6String>
 80847fe:	a821      	add	r0, sp, #132	; 0x84
 8084800:	f004 fc56 	bl	80890b0 <_ZN6StringD1Ev>
        digitalWrite(lmp91000_1_en, HIGH);  //disable
 8084804:	2101      	movs	r1, #1
 8084806:	8828      	ldrh	r0, [r5, #0]
 8084808:	f006 f98b 	bl	808ab22 <digitalWrite>
 808480c:	e6ea      	b.n	80845e4 <setup+0x304>
        ads1.setGain(GAIN_TWOTHIRDS);
 808480e:	2100      	movs	r1, #0
 8084810:	4820      	ldr	r0, [pc, #128]	; (8084894 <setup+0x5b4>)
 8084812:	f001 fd37 	bl	8086284 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 8084816:	e746      	b.n	80846a6 <setup+0x3c6>
        Serial.println("Initialized LMP91000 for CO 2");
 8084818:	f005 fec4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808481c:	491e      	ldr	r1, [pc, #120]	; (8084898 <setup+0x5b8>)
 808481e:	f004 fe68 	bl	80894f2 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 8084822:	6823      	ldr	r3, [r4, #0]
 8084824:	b14b      	cbz	r3, 808483a <setup+0x55a>
            writeLogFile("Initialized LMP91000 for CO 2");
 8084826:	491c      	ldr	r1, [pc, #112]	; (8084898 <setup+0x5b8>)
 8084828:	a821      	add	r0, sp, #132	; 0x84
 808482a:	f004 fc8b 	bl	8089144 <_ZN6StringC1EPKc>
 808482e:	a821      	add	r0, sp, #132	; 0x84
 8084830:	f7fc ff9e 	bl	8081770 <_Z12writeLogFile6String>
 8084834:	a821      	add	r0, sp, #132	; 0x84
 8084836:	f004 fc3b 	bl	80890b0 <_ZN6StringD1Ev>
        digitalWrite(lmp91000_2_en, HIGH);  //disable
 808483a:	2101      	movs	r1, #1
 808483c:	8828      	ldrh	r0, [r5, #0]
 808483e:	f006 f970 	bl	808ab22 <digitalWrite>
 8084842:	e762      	b.n	808470a <setup+0x42a>
        ads2.setGain(GAIN_TWOTHIRDS);
 8084844:	2100      	movs	r1, #0
 8084846:	4807      	ldr	r0, [pc, #28]	; (8084864 <setup+0x584>)
 8084848:	f001 fd1c 	bl	8086284 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 808484c:	e77a      	b.n	8084744 <setup+0x464>
 808484e:	bf00      	nop
 8084850:	0808f297 	.word	0x0808f297
 8084854:	0808f2ca 	.word	0x0808f2ca
 8084858:	200000c4 	.word	0x200000c4
 808485c:	200006ba 	.word	0x200006ba
 8084860:	0808f2ed 	.word	0x0808f2ed
 8084864:	20000556 	.word	0x20000556
 8084868:	0808f334 	.word	0x0808f334
 808486c:	0808f33f 	.word	0x0808f33f
 8084870:	0808f34c 	.word	0x0808f34c
 8084874:	0808f354 	.word	0x0808f354
 8084878:	20000cd8 	.word	0x20000cd8
 808487c:	20000560 	.word	0x20000560
 8084880:	20000664 	.word	0x20000664
 8084884:	41a00000 	.word	0x41a00000
 8084888:	0808f1f7 	.word	0x0808f1f7
 808488c:	0808f25d 	.word	0x0808f25d
 8084890:	0808f27b 	.word	0x0808f27b
 8084894:	20000550 	.word	0x20000550
 8084898:	0808f316 	.word	0x0808f316

0808489c <_Z17serialGetDeviceIdv>:
{
 808489c:	b530      	push	{r4, r5, lr}
 808489e:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 80848a0:	f005 fe80 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.println(DEVICE_id);
 80848a4:	4d35      	ldr	r5, [pc, #212]	; (808497c <_Z17serialGetDeviceIdv+0xe0>)
    Serial.println();
 80848a6:	f004 fe18 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 80848aa:	f005 fe7b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80848ae:	4934      	ldr	r1, [pc, #208]	; (8084980 <_Z17serialGetDeviceIdv+0xe4>)
 80848b0:	f004 fe0c 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 80848b4:	f005 fe76 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80848b8:	220a      	movs	r2, #10
 80848ba:	6829      	ldr	r1, [r5, #0]
 80848bc:	f7ff fd05 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the ID");
 80848c0:	f005 fe70 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80848c4:	492f      	ldr	r1, [pc, #188]	; (8084984 <_Z17serialGetDeviceIdv+0xe8>)
 80848c6:	f004 fe14 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80848ca:	f005 fe6b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80848ce:	f24c 3150 	movw	r1, #50000	; 0xc350
 80848d2:	f004 ff61 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80848d6:	f005 fe65 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80848da:	220d      	movs	r2, #13
 80848dc:	4601      	mov	r1, r0
 80848de:	4668      	mov	r0, sp
 80848e0:	f004 ff70 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80848e4:	4668      	mov	r0, sp
 80848e6:	4928      	ldr	r1, [pc, #160]	; (8084988 <_Z17serialGetDeviceIdv+0xec>)
 80848e8:	f004 fd4a 	bl	8089380 <_ZNK6String6equalsEPKc>
    if (tempString == SERIAL_PASSWORD)
 80848ec:	2800      	cmp	r0, #0
 80848ee:	d03e      	beq.n	808496e <_Z17serialGetDeviceIdv+0xd2>
        Serial.println("Password correct!");
 80848f0:	f005 fe58 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80848f4:	4925      	ldr	r1, [pc, #148]	; (808498c <_Z17serialGetDeviceIdv+0xf0>)
 80848f6:	f004 fdfc 	bl	80894f2 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 80848fa:	f005 fe53 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80848fe:	4924      	ldr	r1, [pc, #144]	; (8084990 <_Z17serialGetDeviceIdv+0xf4>)
 8084900:	f004 fdf7 	bl	80894f2 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8084904:	f005 fe4e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084908:	220d      	movs	r2, #13
 808490a:	4601      	mov	r1, r0
 808490c:	a804      	add	r0, sp, #16
 808490e:	f004 ff59 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8084912:	a804      	add	r0, sp, #16
 8084914:	f004 fd8c 	bl	8089430 <_ZNK6String5toIntEv>
 8084918:	4604      	mov	r4, r0
        Serial.println("");
 808491a:	f005 fe43 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808491e:	491d      	ldr	r1, [pc, #116]	; (8084994 <_Z17serialGetDeviceIdv+0xf8>)
 8084920:	f004 fde7 	bl	80894f2 <_ZN5Print7printlnEPKc>
        if (tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER)
 8084924:	f242 730c 	movw	r3, #9996	; 0x270c
 8084928:	1ea2      	subs	r2, r4, #2
 808492a:	429a      	cmp	r2, r3
 808492c:	d819      	bhi.n	8084962 <_Z17serialGetDeviceIdv+0xc6>
            Serial.print("\n\rNew Device ID:");
 808492e:	f005 fe39 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084932:	4919      	ldr	r1, [pc, #100]	; (8084998 <_Z17serialGetDeviceIdv+0xfc>)
 8084934:	f004 fdca 	bl	80894cc <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8084938:	f005 fe34 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808493c:	4621      	mov	r1, r4
 808493e:	220a      	movs	r2, #10
 8084940:	f7ff fcc3 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
            DEVICE_id = tempValue;
 8084944:	602c      	str	r4, [r5, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8084946:	f006 f91d 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 808494a:	4629      	mov	r1, r5
 808494c:	2000      	movs	r0, #0
 808494e:	f7fc f855 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 8084952:	a804      	add	r0, sp, #16
 8084954:	f004 fbac 	bl	80890b0 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8084958:	4668      	mov	r0, sp
 808495a:	f004 fba9 	bl	80890b0 <_ZN6StringD1Ev>
}
 808495e:	b009      	add	sp, #36	; 0x24
 8084960:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 8084962:	f005 fe1f 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084966:	490d      	ldr	r1, [pc, #52]	; (808499c <_Z17serialGetDeviceIdv+0x100>)
 8084968:	f004 fdc3 	bl	80894f2 <_ZN5Print7printlnEPKc>
 808496c:	e7f1      	b.n	8084952 <_Z17serialGetDeviceIdv+0xb6>
        Serial.println("\n\rIncorrect password!");
 808496e:	f005 fe19 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084972:	490b      	ldr	r1, [pc, #44]	; (80849a0 <_Z17serialGetDeviceIdv+0x104>)
 8084974:	f004 fdbd 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8084978:	e7ee      	b.n	8084958 <_Z17serialGetDeviceIdv+0xbc>
 808497a:	bf00      	nop
 808497c:	20000080 	.word	0x20000080
 8084980:	0808f367 	.word	0x0808f367
 8084984:	0808f37a 	.word	0x0808f37a
 8084988:	0808e1df 	.word	0x0808e1df
 808498c:	0808e1e5 	.word	0x0808e1e5
 8084990:	0808f3aa 	.word	0x0808f3aa
 8084994:	080900b9 	.word	0x080900b9
 8084998:	0808f3bf 	.word	0x0808f3bf
 808499c:	0808e416 	.word	0x0808e416
 80849a0:	0808e30a 	.word	0x0808e30a

080849a4 <_Z13serialGetZonev>:
{
 80849a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 80849a6:	f005 fdfd 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80849aa:	491f      	ldr	r1, [pc, #124]	; (8084a28 <_Z13serialGetZonev+0x84>)
 80849ac:	f004 fda1 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80849b0:	f005 fdf8 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80849b4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80849b8:	f004 feee 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80849bc:	f005 fdf2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80849c0:	220d      	movs	r2, #13
 80849c2:	4601      	mov	r1, r0
 80849c4:	a802      	add	r0, sp, #8
 80849c6:	f004 fefd 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80849ca:	a802      	add	r0, sp, #8
 80849cc:	f004 fd30 	bl	8089430 <_ZNK6String5toIntEv>
 80849d0:	9001      	str	r0, [sp, #4]
    Serial.println("");
 80849d2:	f005 fde7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80849d6:	4915      	ldr	r1, [pc, #84]	; (8084a2c <_Z13serialGetZonev+0x88>)
 80849d8:	f004 fd8b 	bl	80894f2 <_ZN5Print7printlnEPKc>
    if (tempValue >= -12 && tempValue <= 14)
 80849dc:	9801      	ldr	r0, [sp, #4]
 80849de:	f100 030c 	add.w	r3, r0, #12
 80849e2:	2b1a      	cmp	r3, #26
 80849e4:	d81a      	bhi.n	8084a1c <_Z13serialGetZonev+0x78>
        Time.zone(tempValue);
 80849e6:	f006 ff3f 	bl	808b868 <__aeabi_i2f>
 80849ea:	f004 ff61 	bl	80898b0 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
 80849ee:	f005 fdd9 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80849f2:	490f      	ldr	r1, [pc, #60]	; (8084a30 <_Z13serialGetZonev+0x8c>)
 80849f4:	f004 fd6a 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80849f8:	f005 fdd4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80849fc:	9901      	ldr	r1, [sp, #4]
 80849fe:	220a      	movs	r2, #10
 8084a00:	f7ff fc63 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 8084a04:	f006 f8be 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8084a08:	2054      	movs	r0, #84	; 0x54
 8084a0a:	a901      	add	r1, sp, #4
 8084a0c:	f7fb fff6 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8084a10:	a802      	add	r0, sp, #8
 8084a12:	f004 fb4d 	bl	80890b0 <_ZN6StringD1Ev>
}
 8084a16:	b007      	add	sp, #28
 8084a18:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rInvalid value!");
 8084a1c:	f005 fdc2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084a20:	4904      	ldr	r1, [pc, #16]	; (8084a34 <_Z13serialGetZonev+0x90>)
 8084a22:	f004 fd66 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8084a26:	e7f3      	b.n	8084a10 <_Z13serialGetZonev+0x6c>
 8084a28:	0808f3d0 	.word	0x0808f3d0
 8084a2c:	080900b9 	.word	0x080900b9
 8084a30:	0808f3fb 	.word	0x0808f3fb
 8084a34:	0808e416 	.word	0x0808e416

08084a38 <_Z19serialGetLowerLimitv>:
{
 8084a38:	b530      	push	{r4, r5, lr}
 8084a3a:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8084a3c:	f005 fdb2 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.println(gas_lower_limit);
 8084a40:	4d35      	ldr	r5, [pc, #212]	; (8084b18 <_Z19serialGetLowerLimitv+0xe0>)
    Serial.println();
 8084a42:	f004 fd4a 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 8084a46:	f005 fdad 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084a4a:	4934      	ldr	r1, [pc, #208]	; (8084b1c <_Z19serialGetLowerLimitv+0xe4>)
 8084a4c:	f004 fd3e 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 8084a50:	f005 fda8 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084a54:	220a      	movs	r2, #10
 8084a56:	6829      	ldr	r1, [r5, #0]
 8084a58:	f7ff fc37 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the lower limit");
 8084a5c:	f005 fda2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084a60:	492f      	ldr	r1, [pc, #188]	; (8084b20 <_Z19serialGetLowerLimitv+0xe8>)
 8084a62:	f004 fd46 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8084a66:	f005 fd9d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084a6a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084a6e:	f004 fe93 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084a72:	f005 fd97 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084a76:	220d      	movs	r2, #13
 8084a78:	4601      	mov	r1, r0
 8084a7a:	4668      	mov	r0, sp
 8084a7c:	f004 fea2 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
 8084a80:	4668      	mov	r0, sp
 8084a82:	4928      	ldr	r1, [pc, #160]	; (8084b24 <_Z19serialGetLowerLimitv+0xec>)
 8084a84:	f004 fc7c 	bl	8089380 <_ZNK6String6equalsEPKc>
    if (tempString == "bould")
 8084a88:	2800      	cmp	r0, #0
 8084a8a:	d03e      	beq.n	8084b0a <_Z19serialGetLowerLimitv+0xd2>
        Serial.println("Password correct!");
 8084a8c:	f005 fd8a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084a90:	4925      	ldr	r1, [pc, #148]	; (8084b28 <_Z19serialGetLowerLimitv+0xf0>)
 8084a92:	f004 fd2e 	bl	80894f2 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 8084a96:	f005 fd85 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084a9a:	4924      	ldr	r1, [pc, #144]	; (8084b2c <_Z19serialGetLowerLimitv+0xf4>)
 8084a9c:	f004 fd29 	bl	80894f2 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8084aa0:	f005 fd80 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084aa4:	220d      	movs	r2, #13
 8084aa6:	4601      	mov	r1, r0
 8084aa8:	a804      	add	r0, sp, #16
 8084aaa:	f004 fe8b 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8084aae:	a804      	add	r0, sp, #16
 8084ab0:	f004 fcbe 	bl	8089430 <_ZNK6String5toIntEv>
 8084ab4:	4604      	mov	r4, r0
        Serial.println("");
 8084ab6:	f005 fd75 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084aba:	491d      	ldr	r1, [pc, #116]	; (8084b30 <_Z19serialGetLowerLimitv+0xf8>)
 8084abc:	f004 fd19 	bl	80894f2 <_ZN5Print7printlnEPKc>
        if (tempValue > 0 && tempValue < 20000)
 8084ac0:	f644 631e 	movw	r3, #19998	; 0x4e1e
 8084ac4:	1e62      	subs	r2, r4, #1
 8084ac6:	429a      	cmp	r2, r3
 8084ac8:	d819      	bhi.n	8084afe <_Z19serialGetLowerLimitv+0xc6>
            Serial.print("\n\rNew lower limit:");
 8084aca:	f005 fd6b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084ace:	4919      	ldr	r1, [pc, #100]	; (8084b34 <_Z19serialGetLowerLimitv+0xfc>)
 8084ad0:	f004 fcfc 	bl	80894cc <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8084ad4:	f005 fd66 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084ad8:	4621      	mov	r1, r4
 8084ada:	220a      	movs	r2, #10
 8084adc:	f7ff fbf5 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
            gas_lower_limit = tempValue;
 8084ae0:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8084ae2:	f006 f84f 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8084ae6:	4629      	mov	r1, r5
 8084ae8:	204c      	movs	r0, #76	; 0x4c
 8084aea:	f7fb ff87 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 8084aee:	a804      	add	r0, sp, #16
 8084af0:	f004 fade 	bl	80890b0 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8084af4:	4668      	mov	r0, sp
 8084af6:	f004 fadb 	bl	80890b0 <_ZN6StringD1Ev>
}
 8084afa:	b009      	add	sp, #36	; 0x24
 8084afc:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 8084afe:	f005 fd51 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084b02:	490d      	ldr	r1, [pc, #52]	; (8084b38 <_Z19serialGetLowerLimitv+0x100>)
 8084b04:	f004 fcf5 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8084b08:	e7f1      	b.n	8084aee <_Z19serialGetLowerLimitv+0xb6>
        Serial.println("\n\rIncorrect password!");
 8084b0a:	f005 fd4b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084b0e:	490b      	ldr	r1, [pc, #44]	; (8084b3c <_Z19serialGetLowerLimitv+0x104>)
 8084b10:	f004 fcef 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8084b14:	e7ee      	b.n	8084af4 <_Z19serialGetLowerLimitv+0xbc>
 8084b16:	bf00      	nop
 8084b18:	20000098 	.word	0x20000098
 8084b1c:	0808f413 	.word	0x0808f413
 8084b20:	0808f428 	.word	0x0808f428
 8084b24:	0808e1df 	.word	0x0808e1df
 8084b28:	0808e1e5 	.word	0x0808e1e5
 8084b2c:	0808f461 	.word	0x0808f461
 8084b30:	080900b9 	.word	0x080900b9
 8084b34:	0808f47a 	.word	0x0808f47a
 8084b38:	0808e416 	.word	0x0808e416
 8084b3c:	0808e30a 	.word	0x0808e30a

08084b40 <_Z19serialGetUpperLimitv>:
{
 8084b40:	b530      	push	{r4, r5, lr}
 8084b42:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8084b44:	f005 fd2e 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.println(gas_upper_limit);
 8084b48:	4d35      	ldr	r5, [pc, #212]	; (8084c20 <_Z19serialGetUpperLimitv+0xe0>)
    Serial.println();
 8084b4a:	f004 fcc6 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 8084b4e:	f005 fd29 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084b52:	4934      	ldr	r1, [pc, #208]	; (8084c24 <_Z19serialGetUpperLimitv+0xe4>)
 8084b54:	f004 fcba 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 8084b58:	f005 fd24 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084b5c:	220a      	movs	r2, #10
 8084b5e:	6829      	ldr	r1, [r5, #0]
 8084b60:	f7ff fbb3 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the upper limit");
 8084b64:	f005 fd1e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084b68:	492f      	ldr	r1, [pc, #188]	; (8084c28 <_Z19serialGetUpperLimitv+0xe8>)
 8084b6a:	f004 fcc2 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8084b6e:	f005 fd19 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084b72:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084b76:	f004 fe0f 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084b7a:	f005 fd13 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084b7e:	220d      	movs	r2, #13
 8084b80:	4601      	mov	r1, r0
 8084b82:	4668      	mov	r0, sp
 8084b84:	f004 fe1e 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
 8084b88:	4668      	mov	r0, sp
 8084b8a:	4928      	ldr	r1, [pc, #160]	; (8084c2c <_Z19serialGetUpperLimitv+0xec>)
 8084b8c:	f004 fbf8 	bl	8089380 <_ZNK6String6equalsEPKc>
    if (tempString == "bould")
 8084b90:	2800      	cmp	r0, #0
 8084b92:	d03e      	beq.n	8084c12 <_Z19serialGetUpperLimitv+0xd2>
        Serial.println("Password correct!");
 8084b94:	f005 fd06 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084b98:	4925      	ldr	r1, [pc, #148]	; (8084c30 <_Z19serialGetUpperLimitv+0xf0>)
 8084b9a:	f004 fcaa 	bl	80894f2 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 8084b9e:	f005 fd01 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084ba2:	4924      	ldr	r1, [pc, #144]	; (8084c34 <_Z19serialGetUpperLimitv+0xf4>)
 8084ba4:	f004 fca5 	bl	80894f2 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8084ba8:	f005 fcfc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084bac:	220d      	movs	r2, #13
 8084bae:	4601      	mov	r1, r0
 8084bb0:	a804      	add	r0, sp, #16
 8084bb2:	f004 fe07 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8084bb6:	a804      	add	r0, sp, #16
 8084bb8:	f004 fc3a 	bl	8089430 <_ZNK6String5toIntEv>
 8084bbc:	4604      	mov	r4, r0
        Serial.println("");
 8084bbe:	f005 fcf1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084bc2:	491d      	ldr	r1, [pc, #116]	; (8084c38 <_Z19serialGetUpperLimitv+0xf8>)
 8084bc4:	f004 fc95 	bl	80894f2 <_ZN5Print7printlnEPKc>
        if (tempValue > 0 && tempValue < 50000)
 8084bc8:	f24c 334e 	movw	r3, #49998	; 0xc34e
 8084bcc:	1e62      	subs	r2, r4, #1
 8084bce:	429a      	cmp	r2, r3
 8084bd0:	d819      	bhi.n	8084c06 <_Z19serialGetUpperLimitv+0xc6>
            Serial.print("\n\rNew upper limit:");
 8084bd2:	f005 fce7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084bd6:	4919      	ldr	r1, [pc, #100]	; (8084c3c <_Z19serialGetUpperLimitv+0xfc>)
 8084bd8:	f004 fc78 	bl	80894cc <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8084bdc:	f005 fce2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084be0:	4621      	mov	r1, r4
 8084be2:	220a      	movs	r2, #10
 8084be4:	f7ff fb71 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
            gas_upper_limit = tempValue;
 8084be8:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8084bea:	f005 ffcb 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8084bee:	4629      	mov	r1, r5
 8084bf0:	2050      	movs	r0, #80	; 0x50
 8084bf2:	f7fb ff03 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 8084bf6:	a804      	add	r0, sp, #16
 8084bf8:	f004 fa5a 	bl	80890b0 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8084bfc:	4668      	mov	r0, sp
 8084bfe:	f004 fa57 	bl	80890b0 <_ZN6StringD1Ev>
}
 8084c02:	b009      	add	sp, #36	; 0x24
 8084c04:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 8084c06:	f005 fccd 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084c0a:	490d      	ldr	r1, [pc, #52]	; (8084c40 <_Z19serialGetUpperLimitv+0x100>)
 8084c0c:	f004 fc71 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8084c10:	e7f1      	b.n	8084bf6 <_Z19serialGetUpperLimitv+0xb6>
        Serial.println("\n\rIncorrect password!");
 8084c12:	f005 fcc7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084c16:	490b      	ldr	r1, [pc, #44]	; (8084c44 <_Z19serialGetUpperLimitv+0x104>)
 8084c18:	f004 fc6b 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8084c1c:	e7ee      	b.n	8084bfc <_Z19serialGetUpperLimitv+0xbc>
 8084c1e:	bf00      	nop
 8084c20:	2000009c 	.word	0x2000009c
 8084c24:	0808f48d 	.word	0x0808f48d
 8084c28:	0808f4a2 	.word	0x0808f4a2
 8084c2c:	0808e1df 	.word	0x0808e1df
 8084c30:	0808e1e5 	.word	0x0808e1e5
 8084c34:	0808f4db 	.word	0x0808f4db
 8084c38:	080900b9 	.word	0x080900b9
 8084c3c:	0808f4f4 	.word	0x0808f4f4
 8084c40:	0808e416 	.word	0x0808e416
 8084c44:	0808e30a 	.word	0x0808e30a

08084c48 <_Z20serialGetAverageTimev>:
{
 8084c48:	b510      	push	{r4, lr}
 8084c4a:	b086      	sub	sp, #24
    Serial.println();
 8084c4c:	f005 fcaa 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.print(measurements_to_average);
 8084c50:	4c28      	ldr	r4, [pc, #160]	; (8084cf4 <_Z20serialGetAverageTimev+0xac>)
    Serial.println();
 8084c52:	f004 fc42 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 8084c56:	f005 fca5 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084c5a:	4927      	ldr	r1, [pc, #156]	; (8084cf8 <_Z20serialGetAverageTimev+0xb0>)
 8084c5c:	f004 fc36 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8084c60:	f005 fca0 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084c64:	220a      	movs	r2, #10
 8084c66:	6821      	ldr	r1, [r4, #0]
 8084c68:	f7ff fb10 	bl	808428c <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println("(~2 second) measurements");
 8084c6c:	f005 fc9a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084c70:	4922      	ldr	r1, [pc, #136]	; (8084cfc <_Z20serialGetAverageTimev+0xb4>)
 8084c72:	f004 fc3e 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 8084c76:	f005 fc95 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084c7a:	4921      	ldr	r1, [pc, #132]	; (8084d00 <_Z20serialGetAverageTimev+0xb8>)
 8084c7c:	f004 fc26 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8084c80:	f005 fc90 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084c84:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084c88:	f004 fd86 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084c8c:	f005 fc8a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084c90:	220d      	movs	r2, #13
 8084c92:	4601      	mov	r1, r0
 8084c94:	a802      	add	r0, sp, #8
 8084c96:	f004 fd95 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084c9a:	a802      	add	r0, sp, #8
 8084c9c:	f004 fbc8 	bl	8089430 <_ZNK6String5toIntEv>
    if (tempValue >= 1 && tempValue < 10000)
 8084ca0:	f242 730e 	movw	r3, #9998	; 0x270e
    int tempValue = tempString.toInt();
 8084ca4:	9001      	str	r0, [sp, #4]
    if (tempValue >= 1 && tempValue < 10000)
 8084ca6:	3801      	subs	r0, #1
 8084ca8:	4298      	cmp	r0, r3
 8084caa:	d81c      	bhi.n	8084ce6 <_Z20serialGetAverageTimev+0x9e>
        Serial.print("\n\rNew Frequency: ");
 8084cac:	f005 fc7a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084cb0:	4914      	ldr	r1, [pc, #80]	; (8084d04 <_Z20serialGetAverageTimev+0xbc>)
 8084cb2:	f004 fc0b 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8084cb6:	f005 fc75 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084cba:	220a      	movs	r2, #10
 8084cbc:	9901      	ldr	r1, [sp, #4]
 8084cbe:	f7ff fb04 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
        Serial.println("(~2 second) measurements");
 8084cc2:	f005 fc6f 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084cc6:	490d      	ldr	r1, [pc, #52]	; (8084cfc <_Z20serialGetAverageTimev+0xb4>)
 8084cc8:	f004 fc13 	bl	80894f2 <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8084ccc:	9b01      	ldr	r3, [sp, #4]
 8084cce:	6023      	str	r3, [r4, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8084cd0:	f005 ff58 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8084cd4:	2074      	movs	r0, #116	; 0x74
 8084cd6:	a901      	add	r1, sp, #4
 8084cd8:	f7fb fe90 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8084cdc:	a802      	add	r0, sp, #8
 8084cde:	f004 f9e7 	bl	80890b0 <_ZN6StringD1Ev>
}
 8084ce2:	b006      	add	sp, #24
 8084ce4:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8084ce6:	f005 fc5d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084cea:	4907      	ldr	r1, [pc, #28]	; (8084d08 <_Z20serialGetAverageTimev+0xc0>)
 8084cec:	f004 fc01 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8084cf0:	e7f4      	b.n	8084cdc <_Z20serialGetAverageTimev+0x94>
 8084cf2:	bf00      	nop
 8084cf4:	20000748 	.word	0x20000748
 8084cf8:	0808f507 	.word	0x0808f507
 8084cfc:	0808f51b 	.word	0x0808f51b
 8084d00:	0808f534 	.word	0x0808f534
 8084d04:	0808f547 	.word	0x0808f547
 8084d08:	0808e416 	.word	0x0808e416

08084d0c <_Z16serialGetCo2Zerov>:
{
 8084d0c:	b510      	push	{r4, lr}
 8084d0e:	b086      	sub	sp, #24
    Serial.println();
 8084d10:	f005 fc48 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.print(CO2_zero);
 8084d14:	4c25      	ldr	r4, [pc, #148]	; (8084dac <_Z16serialGetCo2Zerov+0xa0>)
    Serial.println();
 8084d16:	f004 fbe0 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 8084d1a:	f005 fc43 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084d1e:	4924      	ldr	r1, [pc, #144]	; (8084db0 <_Z16serialGetCo2Zerov+0xa4>)
 8084d20:	f004 fbd4 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 8084d24:	f005 fc3e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084d28:	220a      	movs	r2, #10
 8084d2a:	6821      	ldr	r1, [r4, #0]
 8084d2c:	f7ff faae 	bl	808428c <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 8084d30:	f005 fc38 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084d34:	491f      	ldr	r1, [pc, #124]	; (8084db4 <_Z16serialGetCo2Zerov+0xa8>)
 8084d36:	f004 fbdc 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 8084d3a:	f005 fc33 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084d3e:	491e      	ldr	r1, [pc, #120]	; (8084db8 <_Z16serialGetCo2Zerov+0xac>)
 8084d40:	f004 fbc4 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8084d44:	f005 fc2e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084d48:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084d4c:	f004 fd24 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084d50:	f005 fc28 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084d54:	220d      	movs	r2, #13
 8084d56:	4601      	mov	r1, r0
 8084d58:	a802      	add	r0, sp, #8
 8084d5a:	f004 fd33 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084d5e:	a802      	add	r0, sp, #8
 8084d60:	f004 fb66 	bl	8089430 <_ZNK6String5toIntEv>
 8084d64:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 8084d66:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8084d6a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8084d6e:	d217      	bcs.n	8084da0 <_Z16serialGetCo2Zerov+0x94>
        Serial.print("\n\rNew CO2 zero: ");
 8084d70:	f005 fc18 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084d74:	4911      	ldr	r1, [pc, #68]	; (8084dbc <_Z16serialGetCo2Zerov+0xb0>)
 8084d76:	f004 fba9 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8084d7a:	f005 fc13 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084d7e:	9901      	ldr	r1, [sp, #4]
 8084d80:	220a      	movs	r2, #10
 8084d82:	f7ff faa2 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
        CO2_zero = tempValue;
 8084d86:	9b01      	ldr	r3, [sp, #4]
 8084d88:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8084d8a:	f005 fefb 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8084d8e:	2004      	movs	r0, #4
 8084d90:	a901      	add	r1, sp, #4
 8084d92:	f7fb fe33 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8084d96:	a802      	add	r0, sp, #8
 8084d98:	f004 f98a 	bl	80890b0 <_ZN6StringD1Ev>
}
 8084d9c:	b006      	add	sp, #24
 8084d9e:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8084da0:	f005 fc00 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084da4:	4906      	ldr	r1, [pc, #24]	; (8084dc0 <_Z16serialGetCo2Zerov+0xb4>)
 8084da6:	f004 fba4 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8084daa:	e7f4      	b.n	8084d96 <_Z16serialGetCo2Zerov+0x8a>
 8084dac:	200002bc 	.word	0x200002bc
 8084db0:	0808f559 	.word	0x0808f559
 8084db4:	0808e43a 	.word	0x0808e43a
 8084db8:	0808f56b 	.word	0x0808f56b
 8084dbc:	0808f580 	.word	0x0808f580
 8084dc0:	0808e416 	.word	0x0808e416

08084dc4 <_Z15serialGetCoZerov>:
{
 8084dc4:	b510      	push	{r4, lr}
 8084dc6:	b086      	sub	sp, #24
    Serial.println();
 8084dc8:	f005 fbec 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.print(CO_zeroA);
 8084dcc:	4c26      	ldr	r4, [pc, #152]	; (8084e68 <_Z15serialGetCoZerov+0xa4>)
    Serial.println();
 8084dce:	f004 fb84 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current CO_A zero:");
 8084dd2:	f005 fbe7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084dd6:	4925      	ldr	r1, [pc, #148]	; (8084e6c <_Z15serialGetCoZerov+0xa8>)
 8084dd8:	f004 fb78 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(CO_zeroA);
 8084ddc:	f005 fbe2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084de0:	220a      	movs	r2, #10
 8084de2:	6821      	ldr	r1, [r4, #0]
 8084de4:	f7ff fa52 	bl	808428c <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppb");
 8084de8:	f005 fbdc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084dec:	4920      	ldr	r1, [pc, #128]	; (8084e70 <_Z15serialGetCoZerov+0xac>)
 8084dee:	f004 fb80 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 8084df2:	f005 fbd7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084df6:	491f      	ldr	r1, [pc, #124]	; (8084e74 <_Z15serialGetCoZerov+0xb0>)
 8084df8:	f004 fb68 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8084dfc:	f005 fbd2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084e00:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084e04:	f004 fcc8 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084e08:	f005 fbcc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084e0c:	220d      	movs	r2, #13
 8084e0e:	4601      	mov	r1, r0
 8084e10:	a802      	add	r0, sp, #8
 8084e12:	f004 fcd7 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084e16:	a802      	add	r0, sp, #8
 8084e18:	f004 fb0a 	bl	8089430 <_ZNK6String5toIntEv>
    if (tempValue >= -5000 && tempValue < 5000)
 8084e1c:	f242 730f 	movw	r3, #9999	; 0x270f
    int tempValue = tempString.toInt();
 8084e20:	9001      	str	r0, [sp, #4]
    if (tempValue >= -5000 && tempValue < 5000)
 8084e22:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8084e26:	3008      	adds	r0, #8
 8084e28:	4298      	cmp	r0, r3
 8084e2a:	d817      	bhi.n	8084e5c <_Z15serialGetCoZerov+0x98>
        Serial.print("\n\rNew CO zero: ");
 8084e2c:	f005 fbba 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084e30:	4911      	ldr	r1, [pc, #68]	; (8084e78 <_Z15serialGetCoZerov+0xb4>)
 8084e32:	f004 fb4b 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8084e36:	f005 fbb5 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084e3a:	9901      	ldr	r1, [sp, #4]
 8084e3c:	220a      	movs	r2, #10
 8084e3e:	f7ff fa44 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
        CO_zeroA = tempValue;
 8084e42:	9b01      	ldr	r3, [sp, #4]
 8084e44:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO_ZERO_A_MEM_ADDRESS, tempValue);
 8084e46:	f005 fe9d 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8084e4a:	200c      	movs	r0, #12
 8084e4c:	a901      	add	r1, sp, #4
 8084e4e:	f7fb fdd5 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8084e52:	a802      	add	r0, sp, #8
 8084e54:	f004 f92c 	bl	80890b0 <_ZN6StringD1Ev>
}
 8084e58:	b006      	add	sp, #24
 8084e5a:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8084e5c:	f005 fba2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084e60:	4906      	ldr	r1, [pc, #24]	; (8084e7c <_Z15serialGetCoZerov+0xb8>)
 8084e62:	f004 fb46 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8084e66:	e7f4      	b.n	8084e52 <_Z15serialGetCoZerov+0x8e>
 8084e68:	200002d4 	.word	0x200002d4
 8084e6c:	0808f591 	.word	0x0808f591
 8084e70:	0808f5a4 	.word	0x0808f5a4
 8084e74:	0808f5a9 	.word	0x0808f5a9
 8084e78:	0808f5bd 	.word	0x0808f5bd
 8084e7c:	0808e416 	.word	0x0808e416

08084e80 <_Z16serialGetPm1Zerov>:
{
 8084e80:	b510      	push	{r4, lr}
 8084e82:	b086      	sub	sp, #24
    Serial.println();
 8084e84:	f005 fb8e 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.print(PM_1_zero);
 8084e88:	4c25      	ldr	r4, [pc, #148]	; (8084f20 <_Z16serialGetPm1Zerov+0xa0>)
    Serial.println();
 8084e8a:	f004 fb26 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 8084e8e:	f005 fb89 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084e92:	4924      	ldr	r1, [pc, #144]	; (8084f24 <_Z16serialGetPm1Zerov+0xa4>)
 8084e94:	f004 fb1a 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 8084e98:	f005 fb84 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084e9c:	220a      	movs	r2, #10
 8084e9e:	6821      	ldr	r1, [r4, #0]
 8084ea0:	f7ff f9f4 	bl	808428c <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ug/m3");
 8084ea4:	f005 fb7e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084ea8:	491f      	ldr	r1, [pc, #124]	; (8084f28 <_Z16serialGetPm1Zerov+0xa8>)
 8084eaa:	f004 fb22 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 8084eae:	f005 fb79 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084eb2:	491e      	ldr	r1, [pc, #120]	; (8084f2c <_Z16serialGetPm1Zerov+0xac>)
 8084eb4:	f004 fb0a 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8084eb8:	f005 fb74 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084ebc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084ec0:	f004 fc6a 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084ec4:	f005 fb6e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084ec8:	220d      	movs	r2, #13
 8084eca:	4601      	mov	r1, r0
 8084ecc:	a802      	add	r0, sp, #8
 8084ece:	f004 fc79 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084ed2:	a802      	add	r0, sp, #8
 8084ed4:	f004 faac 	bl	8089430 <_ZNK6String5toIntEv>
 8084ed8:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 8084eda:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8084ede:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8084ee2:	d217      	bcs.n	8084f14 <_Z16serialGetPm1Zerov+0x94>
        Serial.print("\n\rNew PM1 zero: ");
 8084ee4:	f005 fb5e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084ee8:	4911      	ldr	r1, [pc, #68]	; (8084f30 <_Z16serialGetPm1Zerov+0xb0>)
 8084eea:	f004 faef 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8084eee:	f005 fb59 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084ef2:	9901      	ldr	r1, [sp, #4]
 8084ef4:	220a      	movs	r2, #10
 8084ef6:	f7ff f9e8 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_1_zero = tempValue;
 8084efa:	9b01      	ldr	r3, [sp, #4]
 8084efc:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 8084efe:	f005 fe41 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8084f02:	2014      	movs	r0, #20
 8084f04:	a901      	add	r1, sp, #4
 8084f06:	f7fb fd79 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8084f0a:	a802      	add	r0, sp, #8
 8084f0c:	f004 f8d0 	bl	80890b0 <_ZN6StringD1Ev>
}
 8084f10:	b006      	add	sp, #24
 8084f12:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8084f14:	f005 fb46 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084f18:	4906      	ldr	r1, [pc, #24]	; (8084f34 <_Z16serialGetPm1Zerov+0xb4>)
 8084f1a:	f004 faea 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8084f1e:	e7f4      	b.n	8084f0a <_Z16serialGetPm1Zerov+0x8a>
 8084f20:	200002f0 	.word	0x200002f0
 8084f24:	0808f5cd 	.word	0x0808f5cd
 8084f28:	0808f5df 	.word	0x0808f5df
 8084f2c:	0808f5e6 	.word	0x0808f5e6
 8084f30:	0808f5fb 	.word	0x0808f5fb
 8084f34:	0808e416 	.word	0x0808e416

08084f38 <_Z17serialGetPm25Zerov>:
{
 8084f38:	b510      	push	{r4, lr}
 8084f3a:	b086      	sub	sp, #24
    Serial.println();
 8084f3c:	f005 fb32 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.print(PM_25_zero);
 8084f40:	4c25      	ldr	r4, [pc, #148]	; (8084fd8 <_Z17serialGetPm25Zerov+0xa0>)
    Serial.println();
 8084f42:	f004 faca 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 8084f46:	f005 fb2d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084f4a:	4924      	ldr	r1, [pc, #144]	; (8084fdc <_Z17serialGetPm25Zerov+0xa4>)
 8084f4c:	f004 fabe 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 8084f50:	f005 fb28 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084f54:	220a      	movs	r2, #10
 8084f56:	6821      	ldr	r1, [r4, #0]
 8084f58:	f7ff f998 	bl	808428c <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ug/m3");
 8084f5c:	f005 fb22 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084f60:	491f      	ldr	r1, [pc, #124]	; (8084fe0 <_Z17serialGetPm25Zerov+0xa8>)
 8084f62:	f004 fac6 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 8084f66:	f005 fb1d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084f6a:	491e      	ldr	r1, [pc, #120]	; (8084fe4 <_Z17serialGetPm25Zerov+0xac>)
 8084f6c:	f004 faae 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8084f70:	f005 fb18 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084f74:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084f78:	f004 fc0e 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084f7c:	f005 fb12 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084f80:	220d      	movs	r2, #13
 8084f82:	4601      	mov	r1, r0
 8084f84:	a802      	add	r0, sp, #8
 8084f86:	f004 fc1d 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084f8a:	a802      	add	r0, sp, #8
 8084f8c:	f004 fa50 	bl	8089430 <_ZNK6String5toIntEv>
 8084f90:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 8084f92:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8084f96:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8084f9a:	d217      	bcs.n	8084fcc <_Z17serialGetPm25Zerov+0x94>
        Serial.print("\n\rNew PM2.5 zero: ");
 8084f9c:	f005 fb02 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084fa0:	4911      	ldr	r1, [pc, #68]	; (8084fe8 <_Z17serialGetPm25Zerov+0xb0>)
 8084fa2:	f004 fa93 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8084fa6:	f005 fafd 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084faa:	9901      	ldr	r1, [sp, #4]
 8084fac:	220a      	movs	r2, #10
 8084fae:	f7ff f98c 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_25_zero = tempValue;
 8084fb2:	9b01      	ldr	r3, [sp, #4]
 8084fb4:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 8084fb6:	f005 fde5 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8084fba:	201c      	movs	r0, #28
 8084fbc:	a901      	add	r1, sp, #4
 8084fbe:	f7fb fd1d 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8084fc2:	a802      	add	r0, sp, #8
 8084fc4:	f004 f874 	bl	80890b0 <_ZN6StringD1Ev>
}
 8084fc8:	b006      	add	sp, #24
 8084fca:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8084fcc:	f005 faea 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8084fd0:	4906      	ldr	r1, [pc, #24]	; (8084fec <_Z17serialGetPm25Zerov+0xb4>)
 8084fd2:	f004 fa8e 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8084fd6:	e7f4      	b.n	8084fc2 <_Z17serialGetPm25Zerov+0x8a>
 8084fd8:	200002f8 	.word	0x200002f8
 8084fdc:	0808f60c 	.word	0x0808f60c
 8084fe0:	0808f5df 	.word	0x0808f5df
 8084fe4:	0808f620 	.word	0x0808f620
 8084fe8:	0808f637 	.word	0x0808f637
 8084fec:	0808e416 	.word	0x0808e416

08084ff0 <_Z17serialGetPm10Zerov>:
{
 8084ff0:	b510      	push	{r4, lr}
 8084ff2:	b086      	sub	sp, #24
    Serial.println();
 8084ff4:	f005 fad6 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.print(PM_10_zero);
 8084ff8:	4c25      	ldr	r4, [pc, #148]	; (8085090 <_Z17serialGetPm10Zerov+0xa0>)
    Serial.println();
 8084ffa:	f004 fa6e 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 8084ffe:	f005 fad1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085002:	4924      	ldr	r1, [pc, #144]	; (8085094 <_Z17serialGetPm10Zerov+0xa4>)
 8085004:	f004 fa62 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 8085008:	f005 facc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808500c:	220a      	movs	r2, #10
 808500e:	6821      	ldr	r1, [r4, #0]
 8085010:	f7ff f93c 	bl	808428c <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" um/m3");
 8085014:	f005 fac6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085018:	491f      	ldr	r1, [pc, #124]	; (8085098 <_Z17serialGetPm10Zerov+0xa8>)
 808501a:	f004 fa6a 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 808501e:	f005 fac1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085022:	491e      	ldr	r1, [pc, #120]	; (808509c <_Z17serialGetPm10Zerov+0xac>)
 8085024:	f004 fa52 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085028:	f005 fabc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808502c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085030:	f004 fbb2 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085034:	f005 fab6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085038:	220d      	movs	r2, #13
 808503a:	4601      	mov	r1, r0
 808503c:	a802      	add	r0, sp, #8
 808503e:	f004 fbc1 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085042:	a802      	add	r0, sp, #8
 8085044:	f004 f9f4 	bl	8089430 <_ZNK6String5toIntEv>
 8085048:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 808504a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808504e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085052:	d217      	bcs.n	8085084 <_Z17serialGetPm10Zerov+0x94>
        Serial.print("\n\rNew PM10 zero: ");
 8085054:	f005 faa6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085058:	4911      	ldr	r1, [pc, #68]	; (80850a0 <_Z17serialGetPm10Zerov+0xb0>)
 808505a:	f004 fa37 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 808505e:	f005 faa1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085062:	9901      	ldr	r1, [sp, #4]
 8085064:	220a      	movs	r2, #10
 8085066:	f7ff f930 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_10_zero = tempValue;
 808506a:	9b01      	ldr	r3, [sp, #4]
 808506c:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 808506e:	f005 fd89 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8085072:	2024      	movs	r0, #36	; 0x24
 8085074:	a901      	add	r1, sp, #4
 8085076:	f7fb fcc1 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 808507a:	a802      	add	r0, sp, #8
 808507c:	f004 f818 	bl	80890b0 <_ZN6StringD1Ev>
}
 8085080:	b006      	add	sp, #24
 8085082:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085084:	f005 fa8e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085088:	4906      	ldr	r1, [pc, #24]	; (80850a4 <_Z17serialGetPm10Zerov+0xb4>)
 808508a:	f004 fa32 	bl	80894f2 <_ZN5Print7printlnEPKc>
 808508e:	e7f4      	b.n	808507a <_Z17serialGetPm10Zerov+0x8a>
 8085090:	200002e8 	.word	0x200002e8
 8085094:	0808f64a 	.word	0x0808f64a
 8085098:	0808f65d 	.word	0x0808f65d
 808509c:	0808f664 	.word	0x0808f664
 80850a0:	0808f67a 	.word	0x0808f67a
 80850a4:	0808e416 	.word	0x0808e416

080850a8 <_Z24serialGetTemperatureZerov>:
{
 80850a8:	b510      	push	{r4, lr}
 80850aa:	b086      	sub	sp, #24
    Serial.println();
 80850ac:	f005 fa7a 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.print(temp_zero);
 80850b0:	4c24      	ldr	r4, [pc, #144]	; (8085144 <_Z24serialGetTemperatureZerov+0x9c>)
    Serial.println();
 80850b2:	f004 fa12 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 80850b6:	f005 fa75 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80850ba:	4923      	ldr	r1, [pc, #140]	; (8085148 <_Z24serialGetTemperatureZerov+0xa0>)
 80850bc:	f004 fa06 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 80850c0:	f005 fa70 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80850c4:	220a      	movs	r2, #10
 80850c6:	6821      	ldr	r1, [r4, #0]
 80850c8:	f7ff f8e0 	bl	808428c <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" Degrees C");
 80850cc:	f005 fa6a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80850d0:	491e      	ldr	r1, [pc, #120]	; (808514c <_Z24serialGetTemperatureZerov+0xa4>)
 80850d2:	f004 fa0e 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 80850d6:	f005 fa65 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80850da:	491d      	ldr	r1, [pc, #116]	; (8085150 <_Z24serialGetTemperatureZerov+0xa8>)
 80850dc:	f004 f9f6 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80850e0:	f005 fa60 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80850e4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80850e8:	f004 fb56 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80850ec:	f005 fa5a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80850f0:	220d      	movs	r2, #13
 80850f2:	4601      	mov	r1, r0
 80850f4:	a802      	add	r0, sp, #8
 80850f6:	f004 fb65 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80850fa:	a802      	add	r0, sp, #8
 80850fc:	f004 f998 	bl	8089430 <_ZNK6String5toIntEv>
 8085100:	9001      	str	r0, [sp, #4]
    if (tempValue >= -30 && tempValue < 30)
 8085102:	301e      	adds	r0, #30
 8085104:	283b      	cmp	r0, #59	; 0x3b
 8085106:	d817      	bhi.n	8085138 <_Z24serialGetTemperatureZerov+0x90>
        Serial.print("\n\rNew Temperature zero: ");
 8085108:	f005 fa4c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808510c:	4911      	ldr	r1, [pc, #68]	; (8085154 <_Z24serialGetTemperatureZerov+0xac>)
 808510e:	f004 f9dd 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085112:	f005 fa47 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085116:	9901      	ldr	r1, [sp, #4]
 8085118:	220a      	movs	r2, #10
 808511a:	f7ff f8d6 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
        temp_zero = tempValue;
 808511e:	9b01      	ldr	r3, [sp, #4]
 8085120:	6023      	str	r3, [r4, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 8085122:	f005 fd2f 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8085126:	202c      	movs	r0, #44	; 0x2c
 8085128:	a901      	add	r1, sp, #4
 808512a:	f7fb fc67 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 808512e:	a802      	add	r0, sp, #8
 8085130:	f003 ffbe 	bl	80890b0 <_ZN6StringD1Ev>
}
 8085134:	b006      	add	sp, #24
 8085136:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085138:	f005 fa34 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808513c:	4906      	ldr	r1, [pc, #24]	; (8085158 <_Z24serialGetTemperatureZerov+0xb0>)
 808513e:	f004 f9d8 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8085142:	e7f4      	b.n	808512e <_Z24serialGetTemperatureZerov+0x86>
 8085144:	20000c64 	.word	0x20000c64
 8085148:	0808f68c 	.word	0x0808f68c
 808514c:	0808e575 	.word	0x0808e575
 8085150:	0808f6a6 	.word	0x0808f6a6
 8085154:	0808f6c3 	.word	0x0808f6c3
 8085158:	0808e416 	.word	0x0808e416

0808515c <_Z21serialGetPressureZerov>:
{
 808515c:	b510      	push	{r4, lr}
 808515e:	b086      	sub	sp, #24
    Serial.println();
 8085160:	f005 fa20 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.print(pressure_zero);
 8085164:	4c25      	ldr	r4, [pc, #148]	; (80851fc <_Z21serialGetPressureZerov+0xa0>)
    Serial.println();
 8085166:	f004 f9b8 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 808516a:	f005 fa1b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808516e:	4924      	ldr	r1, [pc, #144]	; (8085200 <_Z21serialGetPressureZerov+0xa4>)
 8085170:	f004 f9ac 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8085174:	f005 fa16 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085178:	220a      	movs	r2, #10
 808517a:	6821      	ldr	r1, [r4, #0]
 808517c:	f7ff f886 	bl	808428c <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 8085180:	f005 fa10 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085184:	491f      	ldr	r1, [pc, #124]	; (8085204 <_Z21serialGetPressureZerov+0xa8>)
 8085186:	f004 f9b4 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 808518a:	f005 fa0b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808518e:	491e      	ldr	r1, [pc, #120]	; (8085208 <_Z21serialGetPressureZerov+0xac>)
 8085190:	f004 f99c 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085194:	f005 fa06 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085198:	f24c 3150 	movw	r1, #50000	; 0xc350
 808519c:	f004 fafc 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80851a0:	f005 fa00 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80851a4:	220d      	movs	r2, #13
 80851a6:	4601      	mov	r1, r0
 80851a8:	a802      	add	r0, sp, #8
 80851aa:	f004 fb0b 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80851ae:	a802      	add	r0, sp, #8
 80851b0:	f004 f93e 	bl	8089430 <_ZNK6String5toIntEv>
 80851b4:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 80851b6:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80851ba:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80851be:	d217      	bcs.n	80851f0 <_Z21serialGetPressureZerov+0x94>
        Serial.print("\n\rNew Pressure zero: ");
 80851c0:	f005 f9f0 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80851c4:	4911      	ldr	r1, [pc, #68]	; (808520c <_Z21serialGetPressureZerov+0xb0>)
 80851c6:	f004 f981 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80851ca:	f005 f9eb 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80851ce:	9901      	ldr	r1, [sp, #4]
 80851d0:	220a      	movs	r2, #10
 80851d2:	f7ff f87a 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
        pressure_zero = tempValue;
 80851d6:	9b01      	ldr	r3, [sp, #4]
 80851d8:	6023      	str	r3, [r4, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 80851da:	f005 fcd3 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80851de:	2034      	movs	r0, #52	; 0x34
 80851e0:	a901      	add	r1, sp, #4
 80851e2:	f7fb fc0b 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80851e6:	a802      	add	r0, sp, #8
 80851e8:	f003 ff62 	bl	80890b0 <_ZN6StringD1Ev>
}
 80851ec:	b006      	add	sp, #24
 80851ee:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 80851f0:	f005 f9d8 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80851f4:	4906      	ldr	r1, [pc, #24]	; (8085210 <_Z21serialGetPressureZerov+0xb4>)
 80851f6:	f004 f97c 	bl	80894f2 <_ZN5Print7printlnEPKc>
 80851fa:	e7f4      	b.n	80851e6 <_Z21serialGetPressureZerov+0x8a>
 80851fc:	2000079c 	.word	0x2000079c
 8085200:	0808f6dc 	.word	0x0808f6dc
 8085204:	0808e43a 	.word	0x0808e43a
 8085208:	0808f6f3 	.word	0x0808f6f3
 808520c:	0808f70d 	.word	0x0808f70d
 8085210:	0808e416 	.word	0x0808e416

08085214 <_Z21serialGetHumidityZerov>:
{
 8085214:	b510      	push	{r4, lr}
 8085216:	b086      	sub	sp, #24
    Serial.println();
 8085218:	f005 f9c4 	bl	808a5a4 <_Z16_fetch_usbserialv>
    Serial.print(rh_zero);
 808521c:	4c24      	ldr	r4, [pc, #144]	; (80852b0 <_Z21serialGetHumidityZerov+0x9c>)
    Serial.println();
 808521e:	f004 f95c 	bl	80894da <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 8085222:	f005 f9bf 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085226:	4923      	ldr	r1, [pc, #140]	; (80852b4 <_Z21serialGetHumidityZerov+0xa0>)
 8085228:	f004 f950 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 808522c:	f005 f9ba 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085230:	220a      	movs	r2, #10
 8085232:	6821      	ldr	r1, [r4, #0]
 8085234:	f7ff f82a 	bl	808428c <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" %");
 8085238:	f005 f9b4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808523c:	491e      	ldr	r1, [pc, #120]	; (80852b8 <_Z21serialGetHumidityZerov+0xa4>)
 808523e:	f004 f958 	bl	80894f2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 8085242:	f005 f9af 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085246:	491d      	ldr	r1, [pc, #116]	; (80852bc <_Z21serialGetHumidityZerov+0xa8>)
 8085248:	f004 f940 	bl	80894cc <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808524c:	f005 f9aa 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085250:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085254:	f004 faa0 	bl	8089798 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085258:	f005 f9a4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808525c:	220d      	movs	r2, #13
 808525e:	4601      	mov	r1, r0
 8085260:	a802      	add	r0, sp, #8
 8085262:	f004 faaf 	bl	80897c4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085266:	a802      	add	r0, sp, #8
 8085268:	f004 f8e2 	bl	8089430 <_ZNK6String5toIntEv>
 808526c:	9001      	str	r0, [sp, #4]
    if (tempValue >= -50 && tempValue < 50)
 808526e:	3032      	adds	r0, #50	; 0x32
 8085270:	2863      	cmp	r0, #99	; 0x63
 8085272:	d817      	bhi.n	80852a4 <_Z21serialGetHumidityZerov+0x90>
        Serial.print("\n\rNew RH zero: ");
 8085274:	f005 f996 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085278:	4911      	ldr	r1, [pc, #68]	; (80852c0 <_Z21serialGetHumidityZerov+0xac>)
 808527a:	f004 f927 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 808527e:	f005 f991 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085282:	9901      	ldr	r1, [sp, #4]
 8085284:	220a      	movs	r2, #10
 8085286:	f7ff f820 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
        rh_zero = tempValue;
 808528a:	9b01      	ldr	r3, [sp, #4]
 808528c:	6023      	str	r3, [r4, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 808528e:	f005 fc79 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8085292:	203c      	movs	r0, #60	; 0x3c
 8085294:	a901      	add	r1, sp, #4
 8085296:	f7fb fbb1 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 808529a:	a802      	add	r0, sp, #8
 808529c:	f003 ff08 	bl	80890b0 <_ZN6StringD1Ev>
}
 80852a0:	b006      	add	sp, #24
 80852a2:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 80852a4:	f005 f97e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80852a8:	4906      	ldr	r1, [pc, #24]	; (80852c4 <_Z21serialGetHumidityZerov+0xb0>)
 80852aa:	f004 f922 	bl	80894f2 <_ZN5Print7printlnEPKc>
 80852ae:	e7f4      	b.n	808529a <_Z21serialGetHumidityZerov+0x86>
 80852b0:	200007a4 	.word	0x200007a4
 80852b4:	0808f723 	.word	0x0808f723
 80852b8:	0808e61a 	.word	0x0808e61a
 80852bc:	0808f734 	.word	0x0808f734
 80852c0:	0808f748 	.word	0x0808f748
 80852c4:	0808e416 	.word	0x0808e416

080852c8 <_Z10serialMenuv>:
    incomingByte = '0';
 80852c8:	2330      	movs	r3, #48	; 0x30
{
 80852ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    incomingByte = '0';
 80852ce:	4cc7      	ldr	r4, [pc, #796]	; (80855ec <_Z10serialMenuv+0x324>)
                if (!bme.performReading())
 80852d0:	4dc7      	ldr	r5, [pc, #796]	; (80855f0 <_Z10serialMenuv+0x328>)
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 80852d2:	4fc8      	ldr	r7, [pc, #800]	; (80855f4 <_Z10serialMenuv+0x32c>)
{
 80852d4:	b08a      	sub	sp, #40	; 0x28
    incomingByte = '0';
 80852d6:	7023      	strb	r3, [r4, #0]
        Serial.print("Menu>");
 80852d8:	4ec7      	ldr	r6, [pc, #796]	; (80855f8 <_Z10serialMenuv+0x330>)
    while (incomingByte != 'x')
 80852da:	7823      	ldrb	r3, [r4, #0]
 80852dc:	2b78      	cmp	r3, #120	; 0x78
 80852de:	f000 844b 	beq.w	8085b78 <_Z10serialMenuv+0x8b0>
        Serial.print("Menu>");
 80852e2:	f005 f95f 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80852e6:	4631      	mov	r1, r6
 80852e8:	f004 f8f0 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.flush();
 80852ec:	f005 f95a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80852f0:	6803      	ldr	r3, [r0, #0]
 80852f2:	69db      	ldr	r3, [r3, #28]
 80852f4:	4798      	blx	r3
        while (!Serial.available());
 80852f6:	f005 f955 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80852fa:	6803      	ldr	r3, [r0, #0]
 80852fc:	691b      	ldr	r3, [r3, #16]
 80852fe:	4798      	blx	r3
 8085300:	2800      	cmp	r0, #0
 8085302:	d0f8      	beq.n	80852f6 <_Z10serialMenuv+0x2e>
        incomingByte = Serial.read();
 8085304:	f005 f94e 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085308:	6803      	ldr	r3, [r0, #0]
 808530a:	695b      	ldr	r3, [r3, #20]
 808530c:	4798      	blx	r3
 808530e:	b2c0      	uxtb	r0, r0
 8085310:	7020      	strb	r0, [r4, #0]
        switch (incomingByte)
 8085312:	3821      	subs	r0, #33	; 0x21
 8085314:	2859      	cmp	r0, #89	; 0x59
 8085316:	d8e0      	bhi.n	80852da <_Z10serialMenuv+0x12>
 8085318:	a301      	add	r3, pc, #4	; (adr r3, 8085320 <_Z10serialMenuv+0x58>)
 808531a:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 808531e:	bf00      	nop
 8085320:	08085a9d 	.word	0x08085a9d
 8085324:	080852db 	.word	0x080852db
 8085328:	08085b3d 	.word	0x08085b3d
 808532c:	080852db 	.word	0x080852db
 8085330:	080852db 	.word	0x080852db
 8085334:	080852db 	.word	0x080852db
 8085338:	080852db 	.word	0x080852db
 808533c:	080852db 	.word	0x080852db
 8085340:	080852db 	.word	0x080852db
 8085344:	08085b69 	.word	0x08085b69
 8085348:	080852db 	.word	0x080852db
 808534c:	080852db 	.word	0x080852db
 8085350:	080852db 	.word	0x080852db
 8085354:	080852db 	.word	0x080852db
 8085358:	080852db 	.word	0x080852db
 808535c:	08085a97 	.word	0x08085a97
 8085360:	080858cb 	.word	0x080858cb
 8085364:	080858d1 	.word	0x080858d1
 8085368:	0808598d 	.word	0x0808598d
 808536c:	080859bb 	.word	0x080859bb
 8085370:	080859e1 	.word	0x080859e1
 8085374:	080859ff 	.word	0x080859ff
 8085378:	08085a25 	.word	0x08085a25
 808537c:	08085a43 	.word	0x08085a43
 8085380:	08085a91 	.word	0x08085a91
 8085384:	080852db 	.word	0x080852db
 8085388:	080852db 	.word	0x080852db
 808538c:	080852db 	.word	0x080852db
 8085390:	080852db 	.word	0x080852db
 8085394:	080852db 	.word	0x080852db
 8085398:	08085b71 	.word	0x08085b71
 808539c:	08085b15 	.word	0x08085b15
 80853a0:	0808559b 	.word	0x0808559b
 80853a4:	080855a1 	.word	0x080855a1
 80853a8:	080855cd 	.word	0x080855cd
 80853ac:	08085639 	.word	0x08085639
 80853b0:	08085661 	.word	0x08085661
 80853b4:	0808567d 	.word	0x0808567d
 80853b8:	08085691 	.word	0x08085691
 80853bc:	080856b9 	.word	0x080856b9
 80853c0:	080856d3 	.word	0x080856d3
 80853c4:	080856d9 	.word	0x080856d9
 80853c8:	080856e9 	.word	0x080856e9
 80853cc:	080856f9 	.word	0x080856f9
 80853d0:	080856ff 	.word	0x080856ff
 80853d4:	08085727 	.word	0x08085727
 80853d8:	08085743 	.word	0x08085743
 80853dc:	08085753 	.word	0x08085753
 80853e0:	08085767 	.word	0x08085767
 80853e4:	08085775 	.word	0x08085775
 80853e8:	080857a5 	.word	0x080857a5
 80853ec:	080857d5 	.word	0x080857d5
 80853f0:	08085801 	.word	0x08085801
 80853f4:	0808582d 	.word	0x0808582d
 80853f8:	0808583f 	.word	0x0808583f
 80853fc:	0808586d 	.word	0x0808586d
 8085400:	080852db 	.word	0x080852db
 8085404:	0808587d 	.word	0x0808587d
 8085408:	080852db 	.word	0x080852db
 808540c:	080852db 	.word	0x080852db
 8085410:	080852db 	.word	0x080852db
 8085414:	080852db 	.word	0x080852db
 8085418:	080852db 	.word	0x080852db
 808541c:	080852db 	.word	0x080852db
 8085420:	08085489 	.word	0x08085489
 8085424:	0808548f 	.word	0x0808548f
 8085428:	08085495 	.word	0x08085495
 808542c:	0808549b 	.word	0x0808549b
 8085430:	080854a1 	.word	0x080854a1
 8085434:	080854a7 	.word	0x080854a7
 8085438:	080854ad 	.word	0x080854ad
 808543c:	080854b3 	.word	0x080854b3
 8085440:	080854b9 	.word	0x080854b9
 8085444:	080854bf 	.word	0x080854bf
 8085448:	080854c5 	.word	0x080854c5
 808544c:	080854cb 	.word	0x080854cb
 8085450:	080854d1 	.word	0x080854d1
 8085454:	080854d7 	.word	0x080854d7
 8085458:	080854dd 	.word	0x080854dd
 808545c:	080854e3 	.word	0x080854e3
 8085460:	080854e9 	.word	0x080854e9
 8085464:	08085507 	.word	0x08085507
 8085468:	08085517 	.word	0x08085517
 808546c:	08085535 	.word	0x08085535
 8085470:	0808553b 	.word	0x0808553b
 8085474:	08085541 	.word	0x08085541
 8085478:	08085547 	.word	0x08085547
 808547c:	080852db 	.word	0x080852db
 8085480:	0808554d 	.word	0x0808554d
 8085484:	08085573 	.word	0x08085573
            serialGetCo2Slope();
 8085488:	f7fd fab2 	bl	80829f0 <_Z17serialGetCo2Slopev>
            break;
 808548c:	e724      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetCo2Zero();
 808548e:	f7ff fc3d 	bl	8084d0c <_Z16serialGetCo2Zerov>
            break;
 8085492:	e721      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetCoSlope();
 8085494:	f7fd fb2c 	bl	8082af0 <_Z16serialGetCoSlopev>
            break;
 8085498:	e71e      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetCoZero();
 808549a:	f7ff fc93 	bl	8084dc4 <_Z15serialGetCoZerov>
            break;
 808549e:	e71b      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetPm1Slope();
 80854a0:	f7fd fbac 	bl	8082bfc <_Z17serialGetPm1Slopev>
            break;
 80854a4:	e718      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetPm1Zero();
 80854a6:	f7ff fceb 	bl	8084e80 <_Z16serialGetPm1Zerov>
            break;
 80854aa:	e715      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetPm25Slope();
 80854ac:	f7fd fc22 	bl	8082cf4 <_Z18serialGetPm25Slopev>
            break;
 80854b0:	e712      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetPm25Zero();
 80854b2:	f7ff fd41 	bl	8084f38 <_Z17serialGetPm25Zerov>
            break;
 80854b6:	e70f      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetPm10Slope();
 80854b8:	f7fd fc98 	bl	8082dec <_Z18serialGetPm10Slopev>
            break;
 80854bc:	e70c      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetPm10Zero();
 80854be:	f7ff fd97 	bl	8084ff0 <_Z17serialGetPm10Zerov>
            break;
 80854c2:	e709      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetTemperatureSlope();
 80854c4:	f7fd fd0e 	bl	8082ee4 <_Z25serialGetTemperatureSlopev>
            break;
 80854c8:	e706      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetTemperatureZero();
 80854ca:	f7ff fded 	bl	80850a8 <_Z24serialGetTemperatureZerov>
            break;
 80854ce:	e703      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetPressureSlope();
 80854d0:	f7fd fd84 	bl	8082fdc <_Z22serialGetPressureSlopev>
            break;
 80854d4:	e700      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetPressureZero();
 80854d6:	f7ff fe41 	bl	808515c <_Z21serialGetPressureZerov>
            break;
 80854da:	e6fd      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetHumiditySlope();
 80854dc:	f7fd fdfa 	bl	80830d4 <_Z22serialGetHumiditySlopev>
            break;
 80854e0:	e6fa      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetHumidityZero();
 80854e2:	f7ff fe97 	bl	8085214 <_Z21serialGetHumidityZerov>
            break;
 80854e6:	e6f7      	b.n	80852d8 <_Z10serialMenuv+0x10>
            Serial.println("Serial debugging enabled.");
 80854e8:	f005 f85c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80854ec:	4943      	ldr	r1, [pc, #268]	; (80855fc <_Z10serialMenuv+0x334>)
 80854ee:	f004 f800 	bl	80894f2 <_ZN5Print7printlnEPKc>
            debugging_enabled = 1;
 80854f2:	2301      	movs	r3, #1
 80854f4:	4e42      	ldr	r6, [pc, #264]	; (8085600 <_Z10serialMenuv+0x338>)
            debugging_enabled = 0;
 80854f6:	6033      	str	r3, [r6, #0]
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 80854f8:	f005 fb44 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80854fc:	4631      	mov	r1, r6
 80854fe:	2048      	movs	r0, #72	; 0x48
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8085500:	f7fb fa7c 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
 8085504:	e6e8      	b.n	80852d8 <_Z10serialMenuv+0x10>
            Serial.println("Serial debugging disabled.");
 8085506:	f005 f84d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808550a:	493e      	ldr	r1, [pc, #248]	; (8085604 <_Z10serialMenuv+0x33c>)
 808550c:	f003 fff1 	bl	80894f2 <_ZN5Print7printlnEPKc>
            debugging_enabled = 0;
 8085510:	4e3b      	ldr	r6, [pc, #236]	; (8085600 <_Z10serialMenuv+0x338>)
 8085512:	2300      	movs	r3, #0
 8085514:	e7ef      	b.n	80854f6 <_Z10serialMenuv+0x22e>
            Serial.println(String(HEADER_STRING));
 8085516:	f005 f845 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808551a:	4606      	mov	r6, r0
 808551c:	493a      	ldr	r1, [pc, #232]	; (8085608 <_Z10serialMenuv+0x340>)
 808551e:	a806      	add	r0, sp, #24
 8085520:	f003 fe10 	bl	8089144 <_ZN6StringC1EPKc>
 8085524:	4630      	mov	r0, r6
 8085526:	9906      	ldr	r1, [sp, #24]
 8085528:	f003 ffe3 	bl	80894f2 <_ZN5Print7printlnEPKc>
            Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 808552c:	a806      	add	r0, sp, #24
 808552e:	f003 fdbf 	bl	80890b0 <_ZN6StringD1Ev>
            break;
 8085532:	e6d1      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetTimeDate();
 8085534:	f7fd fa0c 	bl	8082950 <_Z17serialGetTimeDatev>
            break;
 8085538:	e6ce      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetZone();
 808553a:	f7ff fa33 	bl	80849a4 <_Z13serialGetZonev>
            break;
 808553e:	e6cb      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetDeviceId();
 8085540:	f7ff f9ac 	bl	808489c <_Z17serialGetDeviceIdv>
            break;
 8085544:	e6c8      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetWifiCredentials();
 8085546:	f7fd f8b3 	bl	80826b0 <_Z24serialGetWifiCredentialsv>
            break;
 808554a:	e6c5      	b.n	80852d8 <_Z10serialMenuv+0x10>
            if (serial_cellular_enabled == 0)
 808554c:	4e2f      	ldr	r6, [pc, #188]	; (808560c <_Z10serialMenuv+0x344>)
 808554e:	6833      	ldr	r3, [r6, #0]
 8085550:	b95b      	cbnz	r3, 808556a <_Z10serialMenuv+0x2a2>
                Serial.println("Enabling Cellular.");
 8085552:	f005 f827 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085556:	492e      	ldr	r1, [pc, #184]	; (8085610 <_Z10serialMenuv+0x348>)
                Serial.println("Cellular already enabled.");
 8085558:	f003 ffcb 	bl	80894f2 <_ZN5Print7printlnEPKc>
            serial_cellular_enabled = 1;
 808555c:	2301      	movs	r3, #1
            serial_cellular_enabled = 0;
 808555e:	6033      	str	r3, [r6, #0]
            EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8085560:	f005 fb10 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8085564:	2044      	movs	r0, #68	; 0x44
 8085566:	4929      	ldr	r1, [pc, #164]	; (808560c <_Z10serialMenuv+0x344>)
 8085568:	e7ca      	b.n	8085500 <_Z10serialMenuv+0x238>
                Serial.println("Cellular already enabled.");
 808556a:	f005 f81b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808556e:	4929      	ldr	r1, [pc, #164]	; (8085614 <_Z10serialMenuv+0x34c>)
 8085570:	e7f2      	b.n	8085558 <_Z10serialMenuv+0x290>
            if (serial_cellular_enabled == 1)
 8085572:	4e26      	ldr	r6, [pc, #152]	; (808560c <_Z10serialMenuv+0x344>)
 8085574:	6833      	ldr	r3, [r6, #0]
 8085576:	2b01      	cmp	r3, #1
 8085578:	d109      	bne.n	808558e <_Z10serialMenuv+0x2c6>
                Serial.println("Disabling Cellular");
 808557a:	f005 f813 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808557e:	4926      	ldr	r1, [pc, #152]	; (8085618 <_Z10serialMenuv+0x350>)
 8085580:	f003 ffb7 	bl	80894f2 <_ZN5Print7printlnEPKc>
                Cellular.off();
 8085584:	4825      	ldr	r0, [pc, #148]	; (808561c <_Z10serialMenuv+0x354>)
 8085586:	f7fb fa79 	bl	8080a7c <_ZN5spark13CellularClass3offEv>
            serial_cellular_enabled = 0;
 808558a:	2300      	movs	r3, #0
 808558c:	e7e7      	b.n	808555e <_Z10serialMenuv+0x296>
                Serial.println("Cellular already disabled.");
 808558e:	f005 f809 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085592:	4923      	ldr	r1, [pc, #140]	; (8085620 <_Z10serialMenuv+0x358>)
 8085594:	f003 ffad 	bl	80894f2 <_ZN5Print7printlnEPKc>
 8085598:	e7f7      	b.n	808558a <_Z10serialMenuv+0x2c2>
            readAlpha1Constantly();
 808559a:	f7fd fe19 	bl	80831d0 <_Z20readAlpha1Constantlyv>
            break;
 808559e:	e69b      	b.n	80852d8 <_Z10serialMenuv+0x10>
            if (output_only_particles == 1)
 80855a0:	4b20      	ldr	r3, [pc, #128]	; (8085624 <_Z10serialMenuv+0x35c>)
 80855a2:	681a      	ldr	r2, [r3, #0]
 80855a4:	2a01      	cmp	r2, #1
 80855a6:	d10b      	bne.n	80855c0 <_Z10serialMenuv+0x2f8>
                output_only_particles = 0;
 80855a8:	2200      	movs	r2, #0
 80855aa:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting normally");
 80855ac:	f004 fffa 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80855b0:	491d      	ldr	r1, [pc, #116]	; (8085628 <_Z10serialMenuv+0x360>)
                Serial.println("Outputting only PM");
 80855b2:	f003 ff9e 	bl	80894f2 <_ZN5Print7printlnEPKc>
            EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80855b6:	f005 fae5 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80855ba:	2064      	movs	r0, #100	; 0x64
 80855bc:	4919      	ldr	r1, [pc, #100]	; (8085624 <_Z10serialMenuv+0x35c>)
 80855be:	e79f      	b.n	8085500 <_Z10serialMenuv+0x238>
                output_only_particles = 1;
 80855c0:	2201      	movs	r2, #1
 80855c2:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting only PM");
 80855c4:	f004 ffee 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80855c8:	4918      	ldr	r1, [pc, #96]	; (808562c <_Z10serialMenuv+0x364>)
 80855ca:	e7f2      	b.n	80855b2 <_Z10serialMenuv+0x2ea>
            if (temperature_units == FAHRENHEIT)
 80855cc:	4b18      	ldr	r3, [pc, #96]	; (8085630 <_Z10serialMenuv+0x368>)
 80855ce:	681a      	ldr	r2, [r3, #0]
 80855d0:	b912      	cbnz	r2, 80855d8 <_Z10serialMenuv+0x310>
                temperature_units = CELSIUS;
 80855d2:	2201      	movs	r2, #1
                temperature_units = FAHRENHEIT;
 80855d4:	601a      	str	r2, [r3, #0]
 80855d6:	e004      	b.n	80855e2 <_Z10serialMenuv+0x31a>
                Serial.println("Temperature units already set to Celsius.");
 80855d8:	f004 ffe4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80855dc:	4915      	ldr	r1, [pc, #84]	; (8085634 <_Z10serialMenuv+0x36c>)
 80855de:	f003 ff88 	bl	80894f2 <_ZN5Print7printlnEPKc>
            EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 80855e2:	f005 facf 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80855e6:	2060      	movs	r0, #96	; 0x60
 80855e8:	4911      	ldr	r1, [pc, #68]	; (8085630 <_Z10serialMenuv+0x368>)
 80855ea:	e789      	b.n	8085500 <_Z10serialMenuv+0x238>
 80855ec:	200006b8 	.word	0x200006b8
 80855f0:	20000564 	.word	0x20000564
 80855f4:	42c80000 	.word	0x42c80000
 80855f8:	0808f758 	.word	0x0808f758
 80855fc:	0808f75e 	.word	0x0808f75e
 8085600:	200005e8 	.word	0x200005e8
 8085604:	0808f778 	.word	0x0808f778
 8085608:	0808efe5 	.word	0x0808efe5
 808560c:	20000c28 	.word	0x20000c28
 8085610:	0808f793 	.word	0x0808f793
 8085614:	0808f7a6 	.word	0x0808f7a6
 8085618:	0808f7c0 	.word	0x0808f7c0
 808561c:	2000106c 	.word	0x2000106c
 8085620:	0808f7d3 	.word	0x0808f7d3
 8085624:	20000750 	.word	0x20000750
 8085628:	0808f7ee 	.word	0x0808f7ee
 808562c:	0808f802 	.word	0x0808f802
 8085630:	20000c68 	.word	0x20000c68
 8085634:	0808f815 	.word	0x0808f815
            if (new_temperature_sensor_enabled == 1)
 8085638:	4ba7      	ldr	r3, [pc, #668]	; (80858d8 <_Z10serialMenuv+0x610>)
 808563a:	681a      	ldr	r2, [r3, #0]
 808563c:	2a01      	cmp	r2, #1
 808563e:	d10b      	bne.n	8085658 <_Z10serialMenuv+0x390>
                new_temperature_sensor_enabled = 0;
 8085640:	2200      	movs	r2, #0
 8085642:	601a      	str	r2, [r3, #0]
                Serial.println("Disabling new temperature sensor");
 8085644:	f004 ffae 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085648:	49a4      	ldr	r1, [pc, #656]	; (80858dc <_Z10serialMenuv+0x614>)
                Serial.println("Temperature sensor already disabled");
 808564a:	f003 ff52 	bl	80894f2 <_ZN5Print7printlnEPKc>
            EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 808564e:	f005 fa99 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8085652:	2068      	movs	r0, #104	; 0x68
 8085654:	49a0      	ldr	r1, [pc, #640]	; (80858d8 <_Z10serialMenuv+0x610>)
 8085656:	e753      	b.n	8085500 <_Z10serialMenuv+0x238>
                Serial.println("Temperature sensor already disabled");
 8085658:	f004 ffa4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808565c:	49a0      	ldr	r1, [pc, #640]	; (80858e0 <_Z10serialMenuv+0x618>)
 808565e:	e7f4      	b.n	808564a <_Z10serialMenuv+0x382>
            if (new_temperature_sensor_enabled == 1)
 8085660:	4b9d      	ldr	r3, [pc, #628]	; (80858d8 <_Z10serialMenuv+0x610>)
 8085662:	681a      	ldr	r2, [r3, #0]
 8085664:	2a01      	cmp	r2, #1
 8085666:	d103      	bne.n	8085670 <_Z10serialMenuv+0x3a8>
                Serial.println("Temperature sensor already enabled");
 8085668:	f004 ff9c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808566c:	499d      	ldr	r1, [pc, #628]	; (80858e4 <_Z10serialMenuv+0x61c>)
 808566e:	e7ec      	b.n	808564a <_Z10serialMenuv+0x382>
                new_temperature_sensor_enabled = 1;
 8085670:	2201      	movs	r2, #1
 8085672:	601a      	str	r2, [r3, #0]
                Serial.println("Temperatue sensor now enabled");
 8085674:	f004 ff96 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085678:	499b      	ldr	r1, [pc, #620]	; (80858e8 <_Z10serialMenuv+0x620>)
 808567a:	e7e6      	b.n	808564a <_Z10serialMenuv+0x382>
            if (temperature_units == CELSIUS)
 808567c:	4b9b      	ldr	r3, [pc, #620]	; (80858ec <_Z10serialMenuv+0x624>)
 808567e:	681a      	ldr	r2, [r3, #0]
 8085680:	2a01      	cmp	r2, #1
 8085682:	d101      	bne.n	8085688 <_Z10serialMenuv+0x3c0>
                temperature_units = FAHRENHEIT;
 8085684:	2200      	movs	r2, #0
 8085686:	e7a5      	b.n	80855d4 <_Z10serialMenuv+0x30c>
                Serial.println("Temperature units already set to Fahrenheit.");
 8085688:	f004 ff8c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808568c:	4998      	ldr	r1, [pc, #608]	; (80858f0 <_Z10serialMenuv+0x628>)
 808568e:	e7a6      	b.n	80855de <_Z10serialMenuv+0x316>
            if (ozone_analog_enabled == 1)
 8085690:	4b98      	ldr	r3, [pc, #608]	; (80858f4 <_Z10serialMenuv+0x62c>)
 8085692:	681a      	ldr	r2, [r3, #0]
 8085694:	2a01      	cmp	r2, #1
 8085696:	d109      	bne.n	80856ac <_Z10serialMenuv+0x3e4>
                Serial.println("Analog reading of ozone already enabled");
 8085698:	f004 ff84 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808569c:	4996      	ldr	r1, [pc, #600]	; (80858f8 <_Z10serialMenuv+0x630>)
                Serial.println("Analog reading of ozone now enabled");
 808569e:	f003 ff28 	bl	80894f2 <_ZN5Print7printlnEPKc>
            EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80856a2:	f005 fa6f 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80856a6:	206c      	movs	r0, #108	; 0x6c
 80856a8:	4992      	ldr	r1, [pc, #584]	; (80858f4 <_Z10serialMenuv+0x62c>)
 80856aa:	e729      	b.n	8085500 <_Z10serialMenuv+0x238>
                ozone_analog_enabled = 1;
 80856ac:	2201      	movs	r2, #1
 80856ae:	601a      	str	r2, [r3, #0]
                Serial.println("Analog reading of ozone now enabled");
 80856b0:	f004 ff78 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80856b4:	4991      	ldr	r1, [pc, #580]	; (80858fc <_Z10serialMenuv+0x634>)
 80856b6:	e7f2      	b.n	808569e <_Z10serialMenuv+0x3d6>
            if (ozone_analog_enabled == 0)
 80856b8:	4b8e      	ldr	r3, [pc, #568]	; (80858f4 <_Z10serialMenuv+0x62c>)
 80856ba:	681a      	ldr	r2, [r3, #0]
 80856bc:	b91a      	cbnz	r2, 80856c6 <_Z10serialMenuv+0x3fe>
                Serial.println("Digital reading of ozone already enabled");
 80856be:	f004 ff71 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80856c2:	498f      	ldr	r1, [pc, #572]	; (8085900 <_Z10serialMenuv+0x638>)
 80856c4:	e7eb      	b.n	808569e <_Z10serialMenuv+0x3d6>
                ozone_analog_enabled = 0;
 80856c6:	2200      	movs	r2, #0
 80856c8:	601a      	str	r2, [r3, #0]
                Serial.println("Digital reading of ozone now enabled");
 80856ca:	f004 ff6b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80856ce:	498d      	ldr	r1, [pc, #564]	; (8085904 <_Z10serialMenuv+0x63c>)
 80856d0:	e7e5      	b.n	808569e <_Z10serialMenuv+0x3d6>
            serialGetAverageTime();
 80856d2:	f7ff fab9 	bl	8084c48 <_Z20serialGetAverageTimev>
            break;
 80856d6:	e5ff      	b.n	80852d8 <_Z10serialMenuv+0x10>
            resetESP();
 80856d8:	f7fc fde4 	bl	80822a4 <_Z8resetESPv>
            Serial.println("ESP reset!");
 80856dc:	f004 ff62 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80856e0:	4989      	ldr	r1, [pc, #548]	; (8085908 <_Z10serialMenuv+0x640>)
                Serial.println("Battery threshold already enabled");
 80856e2:	f003 ff06 	bl	80894f2 <_ZN5Print7printlnEPKc>
 80856e6:	e5f7      	b.n	80852d8 <_Z10serialMenuv+0x10>
            Serial.println("Outputting GPS continuously");
 80856e8:	f004 ff5c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80856ec:	4987      	ldr	r1, [pc, #540]	; (808590c <_Z10serialMenuv+0x644>)
 80856ee:	f003 ff00 	bl	80894f2 <_ZN5Print7printlnEPKc>
            echoGps();
 80856f2:	f7fb fdb9 	bl	8081268 <_Z7echoGpsv>
            break;
 80856f6:	e5ef      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialResetSettings();
 80856f8:	f7fd f8f2 	bl	80828e0 <_Z19serialResetSettingsv>
            break;
 80856fc:	e5ec      	b.n	80852d8 <_Z10serialMenuv+0x10>
            if (battery_threshold_enable == 1)
 80856fe:	4e84      	ldr	r6, [pc, #528]	; (8085910 <_Z10serialMenuv+0x648>)
 8085700:	6833      	ldr	r3, [r6, #0]
 8085702:	2b01      	cmp	r3, #1
 8085704:	d103      	bne.n	808570e <_Z10serialMenuv+0x446>
                Serial.println("Battery threshold already enabled");
 8085706:	f004 ff4d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808570a:	4982      	ldr	r1, [pc, #520]	; (8085914 <_Z10serialMenuv+0x64c>)
 808570c:	e7e9      	b.n	80856e2 <_Z10serialMenuv+0x41a>
                Serial.println("Enabling battery threshold limiting");
 808570e:	f004 ff49 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085712:	4981      	ldr	r1, [pc, #516]	; (8085918 <_Z10serialMenuv+0x650>)
 8085714:	f003 feed 	bl	80894f2 <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 1;
 8085718:	2301      	movs	r3, #1
                battery_threshold_enable = 0;
 808571a:	6033      	str	r3, [r6, #0]
                EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 808571c:	f005 fa32 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8085720:	4631      	mov	r1, r6
 8085722:	2078      	movs	r0, #120	; 0x78
 8085724:	e6ec      	b.n	8085500 <_Z10serialMenuv+0x238>
            if (battery_threshold_enable == 0)
 8085726:	4e7a      	ldr	r6, [pc, #488]	; (8085910 <_Z10serialMenuv+0x648>)
 8085728:	6833      	ldr	r3, [r6, #0]
 808572a:	b91b      	cbnz	r3, 8085734 <_Z10serialMenuv+0x46c>
                Serial.println("Battery threshold already disabled");
 808572c:	f004 ff3a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085730:	497a      	ldr	r1, [pc, #488]	; (808591c <_Z10serialMenuv+0x654>)
 8085732:	e7d6      	b.n	80856e2 <_Z10serialMenuv+0x41a>
                Serial.println("Disabling battery threshold limiting");
 8085734:	f004 ff36 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085738:	4979      	ldr	r1, [pc, #484]	; (8085920 <_Z10serialMenuv+0x658>)
 808573a:	f003 feda 	bl	80894f2 <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 0;
 808573e:	2300      	movs	r3, #0
 8085740:	e7eb      	b.n	808571a <_Z10serialMenuv+0x452>
            Serial.println("Enabling low power for gps");
 8085742:	f004 ff2f 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085746:	4977      	ldr	r1, [pc, #476]	; (8085924 <_Z10serialMenuv+0x65c>)
 8085748:	f003 fed3 	bl	80894f2 <_ZN5Print7printlnEPKc>
            enableLowPowerGPS();
 808574c:	f7fb fdf6 	bl	808133c <_Z17enableLowPowerGPSv>
            break;
 8085750:	e5c2      	b.n	80852d8 <_Z10serialMenuv+0x10>
            Serial.println("Turning off batfet");
 8085752:	f004 ff27 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085756:	4974      	ldr	r1, [pc, #464]	; (8085928 <_Z10serialMenuv+0x660>)
 8085758:	f003 fecb 	bl	80894f2 <_ZN5Print7printlnEPKc>
            writeRegister(7, 0b01101011);
 808575c:	216b      	movs	r1, #107	; 0x6b
            writeRegister(7, 0b01001011);
 808575e:	2007      	movs	r0, #7
 8085760:	f7fb fa60 	bl	8080c24 <_Z13writeRegisterhh>
            break;
 8085764:	e5b8      	b.n	80852d8 <_Z10serialMenuv+0x10>
            Serial.println("Allowing batfet to turn on");
 8085766:	f004 ff1d 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808576a:	4970      	ldr	r1, [pc, #448]	; (808592c <_Z10serialMenuv+0x664>)
 808576c:	f003 fec1 	bl	80894f2 <_ZN5Print7printlnEPKc>
            writeRegister(7, 0b01001011);
 8085770:	214b      	movs	r1, #75	; 0x4b
 8085772:	e7f4      	b.n	808575e <_Z10serialMenuv+0x496>
            if (abc_logic_enabled)
 8085774:	4e6e      	ldr	r6, [pc, #440]	; (8085930 <_Z10serialMenuv+0x668>)
 8085776:	6833      	ldr	r3, [r6, #0]
 8085778:	b183      	cbz	r3, 808579c <_Z10serialMenuv+0x4d4>
                Serial.println("Disabling ABC logic for CO2 sensor");
 808577a:	f004 ff13 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808577e:	496d      	ldr	r1, [pc, #436]	; (8085934 <_Z10serialMenuv+0x66c>)
 8085780:	f003 feb7 	bl	80894f2 <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 0;
 8085784:	2300      	movs	r3, #0
 8085786:	6033      	str	r3, [r6, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8085788:	f005 f9fc 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 808578c:	4631      	mov	r1, r6
 808578e:	207c      	movs	r0, #124	; 0x7c
 8085790:	f7fb f934 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
                t6713.disableABCLogic();
 8085794:	4868      	ldr	r0, [pc, #416]	; (8085938 <_Z10serialMenuv+0x670>)
 8085796:	f000 fe8e 	bl	80864b6 <_ZN13Telaire_T671315disableABCLogicEv>
 808579a:	e59d      	b.n	80852d8 <_Z10serialMenuv+0x10>
                Serial.println("ABC logic already disabled");
 808579c:	f004 ff02 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80857a0:	4966      	ldr	r1, [pc, #408]	; (808593c <_Z10serialMenuv+0x674>)
 80857a2:	e79e      	b.n	80856e2 <_Z10serialMenuv+0x41a>
            if (!abc_logic_enabled)
 80857a4:	4e62      	ldr	r6, [pc, #392]	; (8085930 <_Z10serialMenuv+0x668>)
 80857a6:	6833      	ldr	r3, [r6, #0]
 80857a8:	b983      	cbnz	r3, 80857cc <_Z10serialMenuv+0x504>
                Serial.println("Enabling abc logic for CO2 sensor");
 80857aa:	f004 fefb 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80857ae:	4964      	ldr	r1, [pc, #400]	; (8085940 <_Z10serialMenuv+0x678>)
 80857b0:	f003 fe9f 	bl	80894f2 <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 1;
 80857b4:	2301      	movs	r3, #1
 80857b6:	6033      	str	r3, [r6, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80857b8:	f005 f9e4 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80857bc:	4631      	mov	r1, r6
 80857be:	207c      	movs	r0, #124	; 0x7c
 80857c0:	f7fb f91c 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
                t6713.enableABCLogic();
 80857c4:	485c      	ldr	r0, [pc, #368]	; (8085938 <_Z10serialMenuv+0x670>)
 80857c6:	f000 fe9b 	bl	8086500 <_ZN13Telaire_T671314enableABCLogicEv>
 80857ca:	e585      	b.n	80852d8 <_Z10serialMenuv+0x10>
                Serial.println("ABC logic already enabled");
 80857cc:	f004 feea 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80857d0:	495c      	ldr	r1, [pc, #368]	; (8085944 <_Z10serialMenuv+0x67c>)
 80857d2:	e786      	b.n	80856e2 <_Z10serialMenuv+0x41a>
            if (!hih8120_enabled)
 80857d4:	4e5c      	ldr	r6, [pc, #368]	; (8085948 <_Z10serialMenuv+0x680>)
 80857d6:	6833      	ldr	r3, [r6, #0]
 80857d8:	b95b      	cbnz	r3, 80857f2 <_Z10serialMenuv+0x52a>
                Serial.println("Enabling HIH8120 RH sensor");
 80857da:	f004 fee3 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80857de:	495b      	ldr	r1, [pc, #364]	; (808594c <_Z10serialMenuv+0x684>)
 80857e0:	f003 fe87 	bl	80894f2 <_ZN5Print7printlnEPKc>
                hih8120_enabled = 1;
 80857e4:	2301      	movs	r3, #1
                hih8120_enabled = 0;
 80857e6:	6033      	str	r3, [r6, #0]
                EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80857e8:	f005 f9cc 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80857ec:	4631      	mov	r1, r6
 80857ee:	2080      	movs	r0, #128	; 0x80
 80857f0:	e686      	b.n	8085500 <_Z10serialMenuv+0x238>
                Serial.println("Disabling HIH8120 RH sensor");
 80857f2:	f004 fed7 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80857f6:	4956      	ldr	r1, [pc, #344]	; (8085950 <_Z10serialMenuv+0x688>)
 80857f8:	f003 fe7b 	bl	80894f2 <_ZN5Print7printlnEPKc>
                hih8120_enabled = 0;
 80857fc:	2300      	movs	r3, #0
 80857fe:	e7f2      	b.n	80857e6 <_Z10serialMenuv+0x51e>
            if (!CO_socket)
 8085800:	4e54      	ldr	r6, [pc, #336]	; (8085954 <_Z10serialMenuv+0x68c>)
 8085802:	6833      	ldr	r3, [r6, #0]
 8085804:	b95b      	cbnz	r3, 808581e <_Z10serialMenuv+0x556>
                Serial.println("Now reading CO from U20-Alpha2");
 8085806:	f004 fecd 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808580a:	4953      	ldr	r1, [pc, #332]	; (8085958 <_Z10serialMenuv+0x690>)
 808580c:	f003 fe71 	bl	80894f2 <_ZN5Print7printlnEPKc>
                CO_socket = 1;
 8085810:	2301      	movs	r3, #1
                CO_socket = 0;
 8085812:	6033      	str	r3, [r6, #0]
                EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8085814:	f005 f9b6 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8085818:	4631      	mov	r1, r6
 808581a:	2084      	movs	r0, #132	; 0x84
 808581c:	e670      	b.n	8085500 <_Z10serialMenuv+0x238>
                Serial.println("Now reading CO from U19-Alpha1");
 808581e:	f004 fec1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085822:	494e      	ldr	r1, [pc, #312]	; (808595c <_Z10serialMenuv+0x694>)
 8085824:	f003 fe65 	bl	80894f2 <_ZN5Print7printlnEPKc>
                CO_socket = 0;
 8085828:	2300      	movs	r3, #0
 808582a:	e7f2      	b.n	8085812 <_Z10serialMenuv+0x54a>
            Serial.println("Reseting the CO2 sensor");
 808582c:	f004 feba 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085830:	494b      	ldr	r1, [pc, #300]	; (8085960 <_Z10serialMenuv+0x698>)
 8085832:	f003 fe5e 	bl	80894f2 <_ZN5Print7printlnEPKc>
            t6713.resetSensor();
 8085836:	4840      	ldr	r0, [pc, #256]	; (8085938 <_Z10serialMenuv+0x670>)
 8085838:	f000 fe18 	bl	808646c <_ZN13Telaire_T671311resetSensorEv>
            break;
 808583c:	e54c      	b.n	80852d8 <_Z10serialMenuv+0x10>
            if (google_location_en == 1)
 808583e:	4e49      	ldr	r6, [pc, #292]	; (8085964 <_Z10serialMenuv+0x69c>)
 8085840:	6833      	ldr	r3, [r6, #0]
 8085842:	2b01      	cmp	r3, #1
 8085844:	d10b      	bne.n	808585e <_Z10serialMenuv+0x596>
                Serial.println("Disabling google location services.");
 8085846:	f004 fead 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808584a:	4947      	ldr	r1, [pc, #284]	; (8085968 <_Z10serialMenuv+0x6a0>)
 808584c:	f003 fe51 	bl	80894f2 <_ZN5Print7printlnEPKc>
                google_location_en = 0;
 8085850:	2300      	movs	r3, #0
                google_location_en = 1;
 8085852:	6033      	str	r3, [r6, #0]
                EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 8085854:	f005 f996 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8085858:	4631      	mov	r1, r6
 808585a:	2088      	movs	r0, #136	; 0x88
 808585c:	e650      	b.n	8085500 <_Z10serialMenuv+0x238>
                Serial.println("Enabling google location services.");
 808585e:	f004 fea1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085862:	4942      	ldr	r1, [pc, #264]	; (808596c <_Z10serialMenuv+0x6a4>)
 8085864:	f003 fe45 	bl	80894f2 <_ZN5Print7printlnEPKc>
                google_location_en = 1;
 8085868:	2301      	movs	r3, #1
 808586a:	e7f2      	b.n	8085852 <_Z10serialMenuv+0x58a>
            t6713.calibrate(1);
 808586c:	2101      	movs	r1, #1
 808586e:	4832      	ldr	r0, [pc, #200]	; (8085938 <_Z10serialMenuv+0x670>)
 8085870:	f000 fe6c 	bl	808654c <_ZN13Telaire_T67139calibrateEi>
            co2_calibration_timer = 180;
 8085874:	22b4      	movs	r2, #180	; 0xb4
 8085876:	4b3e      	ldr	r3, [pc, #248]	; (8085970 <_Z10serialMenuv+0x6a8>)
 8085878:	601a      	str	r2, [r3, #0]
            break;
 808587a:	e52d      	b.n	80852d8 <_Z10serialMenuv+0x10>
            Serial.println("Getting cellular information, this may take a while...");
 808587c:	f004 fe92 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085880:	493c      	ldr	r1, [pc, #240]	; (8085974 <_Z10serialMenuv+0x6ac>)
 8085882:	f003 fe36 	bl	80894f2 <_ZN5Print7printlnEPKc>
            Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 8085886:	a806      	add	r0, sp, #24
 8085888:	493b      	ldr	r1, [pc, #236]	; (8085978 <_Z10serialMenuv+0x6b0>)
 808588a:	f002 fced 	bl	8088268 <_ZNK19CellularHelperClass7getIMEIEv>
 808588e:	9a06      	ldr	r2, [sp, #24]
 8085890:	493a      	ldr	r1, [pc, #232]	; (808597c <_Z10serialMenuv+0x6b4>)
 8085892:	483b      	ldr	r0, [pc, #236]	; (8085980 <_Z10serialMenuv+0x6b8>)
 8085894:	f7fb f90c 	bl	8080ab0 <_ZNK5spark6Logger4infoEPKcz>
 8085898:	a806      	add	r0, sp, #24
 808589a:	f003 fc09 	bl	80890b0 <_ZN6StringD1Ev>
            Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 808589e:	a806      	add	r0, sp, #24
 80858a0:	4935      	ldr	r1, [pc, #212]	; (8085978 <_Z10serialMenuv+0x6b0>)
 80858a2:	f002 fcfd 	bl	80882a0 <_ZNK19CellularHelperClass7getIMSIEv>
 80858a6:	9a06      	ldr	r2, [sp, #24]
 80858a8:	4936      	ldr	r1, [pc, #216]	; (8085984 <_Z10serialMenuv+0x6bc>)
 80858aa:	4835      	ldr	r0, [pc, #212]	; (8085980 <_Z10serialMenuv+0x6b8>)
 80858ac:	f7fb f900 	bl	8080ab0 <_ZNK5spark6Logger4infoEPKcz>
 80858b0:	a806      	add	r0, sp, #24
 80858b2:	f003 fbfd 	bl	80890b0 <_ZN6StringD1Ev>
            Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 80858b6:	a806      	add	r0, sp, #24
 80858b8:	492f      	ldr	r1, [pc, #188]	; (8085978 <_Z10serialMenuv+0x6b0>)
 80858ba:	f002 fcf7 	bl	80882ac <_ZNK19CellularHelperClass8getICCIDEv>
 80858be:	9a06      	ldr	r2, [sp, #24]
 80858c0:	4931      	ldr	r1, [pc, #196]	; (8085988 <_Z10serialMenuv+0x6c0>)
 80858c2:	482f      	ldr	r0, [pc, #188]	; (8085980 <_Z10serialMenuv+0x6b8>)
 80858c4:	f7fb f8f4 	bl	8080ab0 <_ZNK5spark6Logger4infoEPKcz>
 80858c8:	e630      	b.n	808552c <_Z10serialMenuv+0x264>
            serialGetLowerLimit();
 80858ca:	f7ff f8b5 	bl	8084a38 <_Z19serialGetLowerLimitv>
            break;
 80858ce:	e503      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialGetUpperLimit();
 80858d0:	f7ff f936 	bl	8084b40 <_Z19serialGetUpperLimitv>
            break;
 80858d4:	e500      	b.n	80852d8 <_Z10serialMenuv+0x10>
 80858d6:	bf00      	nop
 80858d8:	2000074c 	.word	0x2000074c
 80858dc:	0808f83f 	.word	0x0808f83f
 80858e0:	0808f860 	.word	0x0808f860
 80858e4:	0808f884 	.word	0x0808f884
 80858e8:	0808f8a7 	.word	0x0808f8a7
 80858ec:	20000c68 	.word	0x20000c68
 80858f0:	0808f8c5 	.word	0x0808f8c5
 80858f4:	20000754 	.word	0x20000754
 80858f8:	0808f8f2 	.word	0x0808f8f2
 80858fc:	0808f91a 	.word	0x0808f91a
 8085900:	0808f93e 	.word	0x0808f93e
 8085904:	0808f967 	.word	0x0808f967
 8085908:	0808f334 	.word	0x0808f334
 808590c:	0808f98c 	.word	0x0808f98c
 8085910:	20000560 	.word	0x20000560
 8085914:	0808f9a8 	.word	0x0808f9a8
 8085918:	0808f9ca 	.word	0x0808f9ca
 808591c:	0808f9ee 	.word	0x0808f9ee
 8085920:	0808fa11 	.word	0x0808fa11
 8085924:	0808fa36 	.word	0x0808fa36
 8085928:	0808fa51 	.word	0x0808fa51
 808592c:	0808fa64 	.word	0x0808fa64
 8085930:	2000054c 	.word	0x2000054c
 8085934:	0808fa7f 	.word	0x0808fa7f
 8085938:	20000c58 	.word	0x20000c58
 808593c:	0808faa2 	.word	0x0808faa2
 8085940:	0808fabd 	.word	0x0808fabd
 8085944:	0808fadf 	.word	0x0808fadf
 8085948:	200006b4 	.word	0x200006b4
 808594c:	0808faf9 	.word	0x0808faf9
 8085950:	0808fb14 	.word	0x0808fb14
 8085954:	200002d0 	.word	0x200002d0
 8085958:	0808fb30 	.word	0x0808fb30
 808595c:	0808fb4f 	.word	0x0808fb4f
 8085960:	0808fb6e 	.word	0x0808fb6e
 8085964:	2000066c 	.word	0x2000066c
 8085968:	0808fb86 	.word	0x0808fb86
 808596c:	0808fbaa 	.word	0x0808fbaa
 8085970:	200005e0 	.word	0x200005e0
 8085974:	0808fbcd 	.word	0x0808fbcd
 8085978:	20000cc4 	.word	0x20000cc4
 808597c:	0808fc04 	.word	0x0808fc04
 8085980:	20000cd8 	.word	0x20000cd8
 8085984:	0808fc0c 	.word	0x0808fc0c
 8085988:	0808fc14 	.word	0x0808fc14
            Serial.print("APP Version: ");
 808598c:	f004 fe0a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085990:	497b      	ldr	r1, [pc, #492]	; (8085b80 <_Z10serialMenuv+0x8b8>)
 8085992:	f003 fd9b 	bl	80894cc <_ZN5Print5printEPKc>
            Serial.println(APP_VERSION);
 8085996:	f004 fe05 	bl	808a5a4 <_Z16_fetch_usbserialv>
 808599a:	220a      	movs	r2, #10
 808599c:	2146      	movs	r1, #70	; 0x46
 808599e:	f7fe fc94 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
            Serial.print("Build: ");
 80859a2:	f004 fdff 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80859a6:	4977      	ldr	r1, [pc, #476]	; (8085b84 <_Z10serialMenuv+0x8bc>)
 80859a8:	f003 fd90 	bl	80894cc <_ZN5Print5printEPKc>
            Serial.println(BUILD_VERSION);
 80859ac:	f004 fdfa 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80859b0:	220a      	movs	r2, #10
 80859b2:	210d      	movs	r1, #13
 80859b4:	f7fe fc89 	bl	80842ca <_ZN5Print7printlnIiLi0EEEjT_i>
            break;
 80859b8:	e48e      	b.n	80852d8 <_Z10serialMenuv+0x10>
            if (ozone_enabled == 0)
 80859ba:	4e73      	ldr	r6, [pc, #460]	; (8085b88 <_Z10serialMenuv+0x8c0>)
 80859bc:	6833      	ldr	r3, [r6, #0]
 80859be:	b95b      	cbnz	r3, 80859d8 <_Z10serialMenuv+0x710>
                Serial.println("Enabling Ozone");
 80859c0:	f004 fdf0 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80859c4:	4971      	ldr	r1, [pc, #452]	; (8085b8c <_Z10serialMenuv+0x8c4>)
                Serial.println("Ozone already enabled");
 80859c6:	f003 fd94 	bl	80894f2 <_ZN5Print7printlnEPKc>
            ozone_enabled = 1;
 80859ca:	2301      	movs	r3, #1
            ozone_enabled = 0;
 80859cc:	6033      	str	r3, [r6, #0]
            EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 80859ce:	f005 f8d9 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 80859d2:	2058      	movs	r0, #88	; 0x58
 80859d4:	496c      	ldr	r1, [pc, #432]	; (8085b88 <_Z10serialMenuv+0x8c0>)
 80859d6:	e593      	b.n	8085500 <_Z10serialMenuv+0x238>
                Serial.println("Ozone already enabled");
 80859d8:	f004 fde4 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80859dc:	496c      	ldr	r1, [pc, #432]	; (8085b90 <_Z10serialMenuv+0x8c8>)
 80859de:	e7f2      	b.n	80859c6 <_Z10serialMenuv+0x6fe>
            if (ozone_enabled == 1)
 80859e0:	4e69      	ldr	r6, [pc, #420]	; (8085b88 <_Z10serialMenuv+0x8c0>)
 80859e2:	6833      	ldr	r3, [r6, #0]
 80859e4:	2b01      	cmp	r3, #1
 80859e6:	d106      	bne.n	80859f6 <_Z10serialMenuv+0x72e>
                Serial.println("Disabling Ozone");
 80859e8:	f004 fddc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80859ec:	4969      	ldr	r1, [pc, #420]	; (8085b94 <_Z10serialMenuv+0x8cc>)
                Serial.println("Ozone already disabled");
 80859ee:	f003 fd80 	bl	80894f2 <_ZN5Print7printlnEPKc>
            ozone_enabled = 0;
 80859f2:	2300      	movs	r3, #0
 80859f4:	e7ea      	b.n	80859cc <_Z10serialMenuv+0x704>
                Serial.println("Ozone already disabled");
 80859f6:	f004 fdd5 	bl	808a5a4 <_Z16_fetch_usbserialv>
 80859fa:	4967      	ldr	r1, [pc, #412]	; (8085b98 <_Z10serialMenuv+0x8d0>)
 80859fc:	e7f7      	b.n	80859ee <_Z10serialMenuv+0x726>
            if (voc_enabled == 0)
 80859fe:	4e67      	ldr	r6, [pc, #412]	; (8085b9c <_Z10serialMenuv+0x8d4>)
 8085a00:	6833      	ldr	r3, [r6, #0]
 8085a02:	b95b      	cbnz	r3, 8085a1c <_Z10serialMenuv+0x754>
                Serial.println("Enabling VOCs");
 8085a04:	f004 fdce 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085a08:	4965      	ldr	r1, [pc, #404]	; (8085ba0 <_Z10serialMenuv+0x8d8>)
                Serial.println("VOCs already enabled");
 8085a0a:	f003 fd72 	bl	80894f2 <_ZN5Print7printlnEPKc>
            voc_enabled = 1;
 8085a0e:	2301      	movs	r3, #1
            voc_enabled = 0;
 8085a10:	6033      	str	r3, [r6, #0]
            EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8085a12:	f005 f8b7 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8085a16:	205c      	movs	r0, #92	; 0x5c
 8085a18:	4960      	ldr	r1, [pc, #384]	; (8085b9c <_Z10serialMenuv+0x8d4>)
 8085a1a:	e571      	b.n	8085500 <_Z10serialMenuv+0x238>
                Serial.println("VOCs already enabled");
 8085a1c:	f004 fdc2 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085a20:	4960      	ldr	r1, [pc, #384]	; (8085ba4 <_Z10serialMenuv+0x8dc>)
 8085a22:	e7f2      	b.n	8085a0a <_Z10serialMenuv+0x742>
            if (voc_enabled == 1)
 8085a24:	4e5d      	ldr	r6, [pc, #372]	; (8085b9c <_Z10serialMenuv+0x8d4>)
 8085a26:	6833      	ldr	r3, [r6, #0]
 8085a28:	2b01      	cmp	r3, #1
 8085a2a:	d106      	bne.n	8085a3a <_Z10serialMenuv+0x772>
                Serial.println("Disabling VOC's");
 8085a2c:	f004 fdba 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085a30:	495d      	ldr	r1, [pc, #372]	; (8085ba8 <_Z10serialMenuv+0x8e0>)
                Serial.println("VOC's already disabled");
 8085a32:	f003 fd5e 	bl	80894f2 <_ZN5Print7printlnEPKc>
            voc_enabled = 0;
 8085a36:	2300      	movs	r3, #0
 8085a38:	e7ea      	b.n	8085a10 <_Z10serialMenuv+0x748>
                Serial.println("VOC's already disabled");
 8085a3a:	f004 fdb3 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085a3e:	495b      	ldr	r1, [pc, #364]	; (8085bac <_Z10serialMenuv+0x8e4>)
 8085a40:	e7f7      	b.n	8085a32 <_Z10serialMenuv+0x76a>
            Serial.print("Fault: ");
 8085a42:	f004 fdaf 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085a46:	495a      	ldr	r1, [pc, #360]	; (8085bb0 <_Z10serialMenuv+0x8e8>)
 8085a48:	f003 fd40 	bl	80894cc <_ZN5Print5printEPKc>
            fault = pmic.getFault();
 8085a4c:	4859      	ldr	r0, [pc, #356]	; (8085bb4 <_Z10serialMenuv+0x8ec>)
 8085a4e:	f003 f86f 	bl	8088b30 <_ZN4PMIC8getFaultEv>
 8085a52:	4680      	mov	r8, r0
            Serial.println(fault);
 8085a54:	f004 fda6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085a58:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 8085a5a:	220a      	movs	r2, #10
 8085a5c:	4641      	mov	r1, r8
 8085a5e:	f003 fd5c 	bl	808951a <_ZN5Print11printNumberEmh>
        n += println();
 8085a62:	4630      	mov	r0, r6
 8085a64:	f003 fd39 	bl	80894da <_ZN5Print7printlnEv>
            Serial.print("System status: ");
 8085a68:	f004 fd9c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085a6c:	4952      	ldr	r1, [pc, #328]	; (8085bb8 <_Z10serialMenuv+0x8f0>)
 8085a6e:	f003 fd2d 	bl	80894cc <_ZN5Print5printEPKc>
            systemStatus = pmic.getSystemStatus();
 8085a72:	4850      	ldr	r0, [pc, #320]	; (8085bb4 <_Z10serialMenuv+0x8ec>)
 8085a74:	f003 f859 	bl	8088b2a <_ZN4PMIC15getSystemStatusEv>
 8085a78:	4680      	mov	r8, r0
            Serial.println(systemStatus);
 8085a7a:	f004 fd93 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085a7e:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 8085a80:	220a      	movs	r2, #10
 8085a82:	4641      	mov	r1, r8
 8085a84:	f003 fd49 	bl	808951a <_ZN5Print11printNumberEmh>
        n += println();
 8085a88:	4630      	mov	r0, r6
 8085a8a:	f003 fd26 	bl	80894da <_ZN5Print7printlnEv>
        return n;
 8085a8e:	e423      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialIncreaseChargeCurrent();
 8085a90:	f7fc fdac 	bl	80825ec <_Z27serialIncreaseChargeCurrentv>
            break;
 8085a94:	e420      	b.n	80852d8 <_Z10serialMenuv+0x10>
            serialIncreaseInputCurrent();
 8085a96:	f7fc fd67 	bl	8082568 <_Z26serialIncreaseInputCurrentv>
            break;
 8085a9a:	e41d      	b.n	80852d8 <_Z10serialMenuv+0x10>
            Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 8085a9c:	f004 fd82 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085aa0:	4946      	ldr	r1, [pc, #280]	; (8085bbc <_Z10serialMenuv+0x8f4>)
 8085aa2:	f003 fd26 	bl	80894f2 <_ZN5Print7printlnEPKc>
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 8085aa6:	f8df a134 	ldr.w	sl, [pc, #308]	; 8085bdc <_Z10serialMenuv+0x914>
            while (!Serial.available())
 8085aaa:	f004 fd7b 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085aae:	6803      	ldr	r3, [r0, #0]
 8085ab0:	691b      	ldr	r3, [r3, #16]
 8085ab2:	4798      	blx	r3
 8085ab4:	2800      	cmp	r0, #0
 8085ab6:	f47f ac0f 	bne.w	80852d8 <_Z10serialMenuv+0x10>
                if (!bme.performReading())
 8085aba:	4628      	mov	r0, r5
 8085abc:	f002 f8e6 	bl	8087c8c <_ZN15Adafruit_BME68014performReadingEv>
 8085ac0:	b938      	cbnz	r0, 8085ad2 <_Z10serialMenuv+0x80a>
                    Serial.println("Failed to read BME680");
 8085ac2:	f004 fd6f 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085ac6:	493e      	ldr	r1, [pc, #248]	; (8085bc0 <_Z10serialMenuv+0x8f8>)
    Serial.println("Exiting serial menu...");
 8085ac8:	f003 fd13 	bl	80894f2 <_ZN5Print7printlnEPKc>
}
 8085acc:	b00a      	add	sp, #40	; 0x28
 8085ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 8085ad2:	f004 fd67 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085ad6:	4639      	mov	r1, r7
 8085ad8:	4606      	mov	r6, r0
 8085ada:	68e8      	ldr	r0, [r5, #12]
 8085adc:	f005 ffcc 	bl	808ba78 <__aeabi_fdiv>
 8085ae0:	f005 fa68 	bl	808afb4 <__aeabi_f2d>
 8085ae4:	4680      	mov	r8, r0
 8085ae6:	68a8      	ldr	r0, [r5, #8]
 8085ae8:	4689      	mov	r9, r1
 8085aea:	f005 fa63 	bl	808afb4 <__aeabi_f2d>
 8085aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8085af2:	6868      	ldr	r0, [r5, #4]
 8085af4:	f005 fa5e 	bl	808afb4 <__aeabi_f2d>
 8085af8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8085afc:	6828      	ldr	r0, [r5, #0]
 8085afe:	f005 fa59 	bl	808afb4 <__aeabi_f2d>
 8085b02:	4642      	mov	r2, r8
 8085b04:	e9cd 0100 	strd	r0, r1, [sp]
 8085b08:	464b      	mov	r3, r9
 8085b0a:	4651      	mov	r1, sl
 8085b0c:	4630      	mov	r0, r6
 8085b0e:	f7fa ffa7 	bl	8080a60 <_ZN5Print6printfEPKcz>
            while (!Serial.available())
 8085b12:	e7ca      	b.n	8085aaa <_Z10serialMenuv+0x7e2>
            if (sensible_iot_en == 1)
 8085b14:	4e2b      	ldr	r6, [pc, #172]	; (8085bc4 <_Z10serialMenuv+0x8fc>)
 8085b16:	6833      	ldr	r3, [r6, #0]
 8085b18:	2b01      	cmp	r3, #1
 8085b1a:	d10b      	bne.n	8085b34 <_Z10serialMenuv+0x86c>
                Serial.println("Disabling sensible iot data push.");
 8085b1c:	f004 fd42 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085b20:	4929      	ldr	r1, [pc, #164]	; (8085bc8 <_Z10serialMenuv+0x900>)
 8085b22:	f003 fce6 	bl	80894f2 <_ZN5Print7printlnEPKc>
                sensible_iot_en = 0;
 8085b26:	2300      	movs	r3, #0
 8085b28:	6033      	str	r3, [r6, #0]
                EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8085b2a:	f005 f82b 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8085b2e:	4631      	mov	r1, r6
 8085b30:	208c      	movs	r0, #140	; 0x8c
 8085b32:	e4e5      	b.n	8085500 <_Z10serialMenuv+0x238>
                serialSetSensibleIotEnable();
 8085b34:	f7fc fe92 	bl	808285c <_Z26serialSetSensibleIotEnablev>
 8085b38:	f7ff bbce 	b.w	80852d8 <_Z10serialMenuv+0x10>
            if (car_topper_power_en == 1)
 8085b3c:	4e23      	ldr	r6, [pc, #140]	; (8085bcc <_Z10serialMenuv+0x904>)
 8085b3e:	6833      	ldr	r3, [r6, #0]
 8085b40:	2b01      	cmp	r3, #1
 8085b42:	d10b      	bne.n	8085b5c <_Z10serialMenuv+0x894>
                car_topper_power_en = 0;
 8085b44:	2300      	movs	r3, #0
 8085b46:	6033      	str	r3, [r6, #0]
                Serial.println("Disabling car topper power.  ");
 8085b48:	f004 fd2c 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085b4c:	4920      	ldr	r1, [pc, #128]	; (8085bd0 <_Z10serialMenuv+0x908>)
                Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 8085b4e:	f003 fcd0 	bl	80894f2 <_ZN5Print7printlnEPKc>
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8085b52:	f005 f817 	bl	808ab84 <_Z21__fetch_global_EEPROMv>
 8085b56:	4631      	mov	r1, r6
 8085b58:	2090      	movs	r0, #144	; 0x90
 8085b5a:	e4d1      	b.n	8085500 <_Z10serialMenuv+0x238>
                car_topper_power_en = 1;
 8085b5c:	2301      	movs	r3, #1
 8085b5e:	6033      	str	r3, [r6, #0]
                Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 8085b60:	f004 fd20 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085b64:	491b      	ldr	r1, [pc, #108]	; (8085bd4 <_Z10serialMenuv+0x90c>)
 8085b66:	e7f2      	b.n	8085b4e <_Z10serialMenuv+0x886>
            outputCOtoPI();
 8085b68:	f7fc fbd4 	bl	8082314 <_Z12outputCOtoPIv>
            break;
 8085b6c:	f7ff bbb4 	b.w	80852d8 <_Z10serialMenuv+0x10>
            outputSerialMenuOptions();
 8085b70:	f7fd fb4c 	bl	808320c <_Z23outputSerialMenuOptionsv>
            break;
 8085b74:	f7ff bbb0 	b.w	80852d8 <_Z10serialMenuv+0x10>
    Serial.println("Exiting serial menu...");
 8085b78:	f004 fd14 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085b7c:	4916      	ldr	r1, [pc, #88]	; (8085bd8 <_Z10serialMenuv+0x910>)
 8085b7e:	e7a3      	b.n	8085ac8 <_Z10serialMenuv+0x800>
 8085b80:	0808fc1d 	.word	0x0808fc1d
 8085b84:	0808f34c 	.word	0x0808f34c
 8085b88:	20000758 	.word	0x20000758
 8085b8c:	0808fc2b 	.word	0x0808fc2b
 8085b90:	0808fc3a 	.word	0x0808fc3a
 8085b94:	0808fc50 	.word	0x0808fc50
 8085b98:	0808fc60 	.word	0x0808fc60
 8085b9c:	20000c70 	.word	0x20000c70
 8085ba0:	0808fc77 	.word	0x0808fc77
 8085ba4:	0808fc85 	.word	0x0808fc85
 8085ba8:	0808fc9a 	.word	0x0808fc9a
 8085bac:	0808fcaa 	.word	0x0808fcaa
 8085bb0:	0808fcc1 	.word	0x0808fcc1
 8085bb4:	20000770 	.word	0x20000770
 8085bb8:	0808fcc9 	.word	0x0808fcc9
 8085bbc:	0808fcd9 	.word	0x0808fcd9
 8085bc0:	0808fd14 	.word	0x0808fd14
 8085bc4:	20000c24 	.word	0x20000c24
 8085bc8:	0808fd5b 	.word	0x0808fd5b
 8085bcc:	200005dc 	.word	0x200005dc
 8085bd0:	0808fd7d 	.word	0x0808fd7d
 8085bd4:	0808fd9b 	.word	0x0808fd9b
 8085bd8:	0808fde3 	.word	0x0808fde3
 8085bdc:	0808fd2a 	.word	0x0808fd2a

08085be0 <loop>:
{
 8085be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    measurement_number++;
 8085be2:	4c6e      	ldr	r4, [pc, #440]	; (8085d9c <loop+0x1bc>)
 8085be4:	2200      	movs	r2, #0
 8085be6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8085bea:	4b6d      	ldr	r3, [pc, #436]	; (8085da0 <loop+0x1c0>)
 8085bec:	f005 f884 	bl	808acf8 <__adddf3>
 8085bf0:	e9c4 0100 	strd	r0, r1, [r4]
    CO_float = readAlpha1();
 8085bf4:	f7fc f920 	bl	8081e38 <_Z10readAlpha1v>
    CO_float_A = readCO_A();
 8085bf8:	4b6a      	ldr	r3, [pc, #424]	; (8085da4 <loop+0x1c4>)
 8085bfa:	6018      	str	r0, [r3, #0]
    CO_float = readAlpha2();
 8085bfc:	f7fb fc74 	bl	80814e8 <_Z10readAlpha2v>
    CO_float_B = readCO_B();
 8085c00:	4b69      	ldr	r3, [pc, #420]	; (8085da8 <loop+0x1c8>)
 8085c02:	6018      	str	r0, [r3, #0]
    readGpsStream();
 8085c04:	f7fb fe04 	bl	8081810 <_Z13readGpsStreamv>
    readGpsStreamDate();        //get the gps date and time along with the cellular time and determine which one to output
 8085c08:	f7fb ff90 	bl	8081b2c <_Z17readGpsStreamDatev>
    systemTime = Time.now();
 8085c0c:	f003 ff85 	bl	8089b1a <_ZN9TimeClass3nowEv>
 8085c10:	4b66      	ldr	r3, [pc, #408]	; (8085dac <loop+0x1cc>)
 8085c12:	17c1      	asrs	r1, r0, #31
 8085c14:	e9c3 0100 	strd	r0, r1, [r3]
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8085c18:	4b65      	ldr	r3, [pc, #404]	; (8085db0 <loop+0x1d0>)
            this->format_spec = format;
 8085c1a:	681a      	ldr	r2, [r3, #0]
 8085c1c:	4b65      	ldr	r3, [pc, #404]	; (8085db4 <loop+0x1d4>)
 8085c1e:	601a      	str	r2, [r3, #0]
    getEspAQSyncData();
 8085c20:	f7fe f922 	bl	8083e68 <_Z16getEspAQSyncDatav>
    outputDataToESP();
 8085c24:	f7fd fd38 	bl	8083698 <_Z15outputDataToESPv>
    if (Serial.available() > 0) 
 8085c28:	f004 fcbc 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085c2c:	6803      	ldr	r3, [r0, #0]
 8085c2e:	691b      	ldr	r3, [r3, #16]
 8085c30:	4798      	blx	r3
 8085c32:	2800      	cmp	r0, #0
 8085c34:	dd1d      	ble.n	8085c72 <loop+0x92>
        incomingByte = Serial.read();
 8085c36:	f004 fcb5 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085c3a:	6803      	ldr	r3, [r0, #0]
 8085c3c:	4c5e      	ldr	r4, [pc, #376]	; (8085db8 <loop+0x1d8>)
 8085c3e:	695b      	ldr	r3, [r3, #20]
 8085c40:	4798      	blx	r3
        if (debugging_enabled) 
 8085c42:	4b5e      	ldr	r3, [pc, #376]	; (8085dbc <loop+0x1dc>)
        incomingByte = Serial.read();
 8085c44:	7020      	strb	r0, [r4, #0]
        if (debugging_enabled) 
 8085c46:	681b      	ldr	r3, [r3, #0]
 8085c48:	b14b      	cbz	r3, 8085c5e <loop+0x7e>
            Serial.print("Incoming byte:");
 8085c4a:	f004 fcab 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085c4e:	495c      	ldr	r1, [pc, #368]	; (8085dc0 <loop+0x1e0>)
 8085c50:	f003 fc3c 	bl	80894cc <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 8085c54:	f004 fca6 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085c58:	7821      	ldrb	r1, [r4, #0]
 8085c5a:	f003 fc54 	bl	8089506 <_ZN5Print7printlnEc>
        Serial.println(incomingByte);
 8085c5e:	f004 fca1 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085c62:	7821      	ldrb	r1, [r4, #0]
 8085c64:	f003 fc4f 	bl	8089506 <_ZN5Print7printlnEc>
        if (incomingByte == 'm') 
 8085c68:	7823      	ldrb	r3, [r4, #0]
 8085c6a:	2b6d      	cmp	r3, #109	; 0x6d
 8085c6c:	d101      	bne.n	8085c72 <loop+0x92>
            serialMenu();
 8085c6e:	f7ff fb2b 	bl	80852c8 <_Z10serialMenuv>
    if (serial_cellular_enabled) 
 8085c72:	4b54      	ldr	r3, [pc, #336]	; (8085dc4 <loop+0x1e4>)
 8085c74:	681b      	ldr	r3, [r3, #0]
 8085c76:	2b00      	cmp	r3, #0
 8085c78:	d076      	beq.n	8085d68 <loop+0x188>
        status_word.status_int |= 0x01;
 8085c7a:	4a53      	ldr	r2, [pc, #332]	; (8085dc8 <loop+0x1e8>)
 8085c7c:	8813      	ldrh	r3, [r2, #0]
 8085c7e:	f043 0301 	orr.w	r3, r3, #1
 8085c82:	8013      	strh	r3, [r2, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8085c84:	f002 fe68 	bl	8088958 <spark_cloud_flag_connected>
        if (!Particle.connected() && !tried_cellular_connect) 
 8085c88:	2800      	cmp	r0, #0
 8085c8a:	d143      	bne.n	8085d14 <loop+0x134>
 8085c8c:	4b4f      	ldr	r3, [pc, #316]	; (8085dcc <loop+0x1ec>)
 8085c8e:	781a      	ldrb	r2, [r3, #0]
 8085c90:	2a00      	cmp	r2, #0
 8085c92:	d13f      	bne.n	8085d14 <loop+0x134>
            tried_cellular_connect = true;
 8085c94:	2201      	movs	r2, #1
            if (debugging_enabled) 
 8085c96:	4c49      	ldr	r4, [pc, #292]	; (8085dbc <loop+0x1dc>)
            tried_cellular_connect = true;
 8085c98:	701a      	strb	r2, [r3, #0]
            if (debugging_enabled) 
 8085c9a:	6823      	ldr	r3, [r4, #0]
 8085c9c:	b173      	cbz	r3, 8085cbc <loop+0xdc>
                Serial.println("Connecting to cellular network");
 8085c9e:	f004 fc81 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085ca2:	494b      	ldr	r1, [pc, #300]	; (8085dd0 <loop+0x1f0>)
 8085ca4:	f003 fc25 	bl	80894f2 <_ZN5Print7printlnEPKc>
                writeLogFile("Connecting to cellular network");
 8085ca8:	4949      	ldr	r1, [pc, #292]	; (8085dd0 <loop+0x1f0>)
 8085caa:	4668      	mov	r0, sp
 8085cac:	f003 fa4a 	bl	8089144 <_ZN6StringC1EPKc>
 8085cb0:	4668      	mov	r0, sp
 8085cb2:	f7fb fd5d 	bl	8081770 <_Z12writeLogFile6String>
 8085cb6:	4668      	mov	r0, sp
 8085cb8:	f003 f9fa 	bl	80890b0 <_ZN6StringD1Ev>
        network_on(*this, 0, 0, NULL);
 8085cbc:	2300      	movs	r3, #0
 8085cbe:	4845      	ldr	r0, [pc, #276]	; (8085dd4 <loop+0x1f4>)
 8085cc0:	461a      	mov	r2, r3
 8085cc2:	4619      	mov	r1, r3
 8085cc4:	6840      	ldr	r0, [r0, #4]
 8085cc6:	f002 fdf7 	bl	80888b8 <network_on>
            if (debugging_enabled) 
 8085cca:	6823      	ldr	r3, [r4, #0]
 8085ccc:	b173      	cbz	r3, 8085cec <loop+0x10c>
                Serial.println("after cellularOn");
 8085cce:	f004 fc69 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085cd2:	4941      	ldr	r1, [pc, #260]	; (8085dd8 <loop+0x1f8>)
 8085cd4:	f003 fc0d 	bl	80894f2 <_ZN5Print7printlnEPKc>
                writeLogFile("After cellularOn");
 8085cd8:	4940      	ldr	r1, [pc, #256]	; (8085ddc <loop+0x1fc>)
 8085cda:	4668      	mov	r0, sp
 8085cdc:	f003 fa32 	bl	8089144 <_ZN6StringC1EPKc>
 8085ce0:	4668      	mov	r0, sp
 8085ce2:	f7fb fd45 	bl	8081770 <_Z12writeLogFile6String>
 8085ce6:	4668      	mov	r0, sp
 8085ce8:	f003 f9e2 	bl	80890b0 <_ZN6StringD1Ev>
        spark_cloud_flag_connect();
 8085cec:	f002 fe2c 	bl	8088948 <spark_cloud_flag_connect>
            if (debugging_enabled)
 8085cf0:	6823      	ldr	r3, [r4, #0]
 8085cf2:	b193      	cbz	r3, 8085d1a <loop+0x13a>
                Serial.println("After particle connect");
 8085cf4:	f004 fc56 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085cf8:	4939      	ldr	r1, [pc, #228]	; (8085de0 <loop+0x200>)
 8085cfa:	f003 fbfa 	bl	80894f2 <_ZN5Print7printlnEPKc>
                writeLogFile("After particle connect");
 8085cfe:	4938      	ldr	r1, [pc, #224]	; (8085de0 <loop+0x200>)
 8085d00:	4668      	mov	r0, sp
 8085d02:	f003 fa1f 	bl	8089144 <_ZN6StringC1EPKc>
 8085d06:	4668      	mov	r0, sp
 8085d08:	f7fb fd32 	bl	8081770 <_Z12writeLogFile6String>
 8085d0c:	4668      	mov	r0, sp
 8085d0e:	f003 f9cf 	bl	80890b0 <_ZN6StringD1Ev>
 8085d12:	e002      	b.n	8085d1a <loop+0x13a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8085d14:	f002 fe20 	bl	8088958 <spark_cloud_flag_connected>
        else if (Particle.connected()) 
 8085d18:	b9d0      	cbnz	r0, 8085d50 <loop+0x170>
    powerCheck.loop();
 8085d1a:	4c32      	ldr	r4, [pc, #200]	; (8085de4 <loop+0x204>)
 8085d1c:	4620      	mov	r0, r4
 8085d1e:	f000 fa13 	bl	8086148 <_ZN10PowerCheck4loopEv>
    if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 8085d22:	4b31      	ldr	r3, [pc, #196]	; (8085de8 <loop+0x208>)
 8085d24:	681b      	ldr	r3, [r3, #0]
 8085d26:	2b01      	cmp	r3, #1
 8085d28:	d110      	bne.n	8085d4c <loop+0x16c>
 8085d2a:	4830      	ldr	r0, [pc, #192]	; (8085dec <loop+0x20c>)
 8085d2c:	f003 ffe0 	bl	8089cf0 <_ZN9FuelGauge6getSoCEv>
 8085d30:	492f      	ldr	r1, [pc, #188]	; (8085df0 <loop+0x210>)
 8085d32:	f005 ff8b 	bl	808bc4c <__aeabi_fcmplt>
 8085d36:	b148      	cbz	r0, 8085d4c <loop+0x16c>
 8085d38:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8085d3c:	b933      	cbnz	r3, 8085d4c <loop+0x16c>
        Serial.println("Going to sleep because battery is below 20% charge");
 8085d3e:	f004 fc31 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085d42:	492c      	ldr	r1, [pc, #176]	; (8085df4 <loop+0x214>)
 8085d44:	f003 fbd5 	bl	80894f2 <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8085d48:	f7fc fa50 	bl	80821ec <_Z16goToSleepBatteryv>
}
 8085d4c:	b004      	add	sp, #16
 8085d4e:	bd10      	pop	{r4, pc}
            if (debugging_enabled) 
 8085d50:	4b1a      	ldr	r3, [pc, #104]	; (8085dbc <loop+0x1dc>)
 8085d52:	681b      	ldr	r3, [r3, #0]
 8085d54:	b123      	cbz	r3, 8085d60 <loop+0x180>
                Serial.println("setting tried_cellular_connect to false");
 8085d56:	f004 fc25 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085d5a:	4927      	ldr	r1, [pc, #156]	; (8085df8 <loop+0x218>)
 8085d5c:	f003 fbc9 	bl	80894f2 <_ZN5Print7printlnEPKc>
            tried_cellular_connect = false;
 8085d60:	2200      	movs	r2, #0
 8085d62:	4b1a      	ldr	r3, [pc, #104]	; (8085dcc <loop+0x1ec>)
 8085d64:	701a      	strb	r2, [r3, #0]
 8085d66:	e7d8      	b.n	8085d1a <loop+0x13a>
 8085d68:	f002 fdf6 	bl	8088958 <spark_cloud_flag_connected>
        if (Particle.connected()) 
 8085d6c:	2800      	cmp	r0, #0
 8085d6e:	d0d4      	beq.n	8085d1a <loop+0x13a>
            if (debugging_enabled) 
 8085d70:	4b12      	ldr	r3, [pc, #72]	; (8085dbc <loop+0x1dc>)
 8085d72:	681b      	ldr	r3, [r3, #0]
 8085d74:	b173      	cbz	r3, 8085d94 <loop+0x1b4>
                Serial.println("Disconnecting from cellular network");
 8085d76:	f004 fc15 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8085d7a:	4920      	ldr	r1, [pc, #128]	; (8085dfc <loop+0x21c>)
 8085d7c:	f003 fbb9 	bl	80894f2 <_ZN5Print7printlnEPKc>
                writeLogFile("Disconnecting from cellular network");
 8085d80:	491e      	ldr	r1, [pc, #120]	; (8085dfc <loop+0x21c>)
 8085d82:	4668      	mov	r0, sp
 8085d84:	f003 f9de 	bl	8089144 <_ZN6StringC1EPKc>
 8085d88:	4668      	mov	r0, sp
 8085d8a:	f7fb fcf1 	bl	8081770 <_Z12writeLogFile6String>
 8085d8e:	4668      	mov	r0, sp
 8085d90:	f003 f98e 	bl	80890b0 <_ZN6StringD1Ev>
            Cellular.off();
 8085d94:	480f      	ldr	r0, [pc, #60]	; (8085dd4 <loop+0x1f4>)
 8085d96:	f7fa fe71 	bl	8080a7c <_ZN5spark13CellularClass3offEv>
 8085d9a:	e7be      	b.n	8085d1a <loop+0x13a>
 8085d9c:	20000740 	.word	0x20000740
 8085da0:	3ff00000 	.word	0x3ff00000
 8085da4:	200002c0 	.word	0x200002c0
 8085da8:	200002c4 	.word	0x200002c4
 8085dac:	20000c50 	.word	0x20000c50
 8085db0:	200000d4 	.word	0x200000d4
 8085db4:	20000ce0 	.word	0x20000ce0
 8085db8:	200006b8 	.word	0x200006b8
 8085dbc:	200005e8 	.word	0x200005e8
 8085dc0:	0808fdfa 	.word	0x0808fdfa
 8085dc4:	20000c28 	.word	0x20000c28
 8085dc8:	20000c48 	.word	0x20000c48
 8085dcc:	20000c6c 	.word	0x20000c6c
 8085dd0:	0808fe09 	.word	0x0808fe09
 8085dd4:	2000106c 	.word	0x2000106c
 8085dd8:	0808fe28 	.word	0x0808fe28
 8085ddc:	0808fe39 	.word	0x0808fe39
 8085de0:	0808fe4a 	.word	0x0808fe4a
 8085de4:	20000774 	.word	0x20000774
 8085de8:	20000560 	.word	0x20000560
 8085dec:	20000664 	.word	0x20000664
 8085df0:	41a00000 	.word	0x41a00000
 8085df4:	0808fead 	.word	0x0808fead
 8085df8:	0808fe61 	.word	0x0808fe61
 8085dfc:	0808fe89 	.word	0x0808fe89

08085e00 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
}
 8085e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 8085e02:	2701      	movs	r7, #1
 8085e04:	4b58      	ldr	r3, [pc, #352]	; (8085f68 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x168>)
GoogleMapsDeviceLocator locator;
 8085e06:	4c59      	ldr	r4, [pc, #356]	; (8085f6c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x16c>)
 8085e08:	701f      	strb	r7, [r3, #0]
 8085e0a:	4620      	mov	r0, r4
 8085e0c:	f002 f8ca 	bl	8087fa4 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8085e10:	4620      	mov	r0, r4
              error_(SYSTEM_ERROR_NONE) {
 8085e12:	2400      	movs	r4, #0
 8085e14:	4d56      	ldr	r5, [pc, #344]	; (8085f70 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x170>)
 8085e16:	4957      	ldr	r1, [pc, #348]	; (8085f74 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 8085e18:	462a      	mov	r2, r5
 8085e1a:	f004 ff55 	bl	808acc8 <__aeabi_atexit>
 8085e1e:	4e56      	ldr	r6, [pc, #344]	; (8085f78 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
    SleepResult() {}
 8085e20:	4b56      	ldr	r3, [pc, #344]	; (8085f7c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
              error_(SYSTEM_ERROR_NONE) {
 8085e22:	6034      	str	r4, [r6, #0]
    SleepResult() {}
 8085e24:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
 8085e26:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
 8085e28:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
 8085e2a:	2003      	movs	r0, #3
 8085e2c:	f002 fcd0 	bl	80887d0 <set_system_mode>
SYSTEM_MODE(MANUAL);
 8085e30:	462a      	mov	r2, r5
 8085e32:	4630      	mov	r0, r6
 8085e34:	4952      	ldr	r1, [pc, #328]	; (8085f80 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)
 8085e36:	f004 ff47 	bl	808acc8 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 8085e3a:	4621      	mov	r1, r4
 8085e3c:	4638      	mov	r0, r7
 8085e3e:	f002 fcd7 	bl	80887f0 <system_thread_set_state>
Adafruit_BME680 bme; // I2C
 8085e42:	f04f 31ff 	mov.w	r1, #4294967295
 8085e46:	484f      	ldr	r0, [pc, #316]	; (8085f84 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)
 8085e48:	f001 ff0e 	bl	8087c68 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 8085e4c:	484e      	ldr	r0, [pc, #312]	; (8085f88 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)
 8085e4e:	f000 fb0c 	bl	808646a <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000_1;
 8085e52:	484e      	ldr	r0, [pc, #312]	; (8085f8c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 8085e54:	f000 f8d0 	bl	8085ff8 <_ZN8LMP91000C1Ev>
LMP91000 lmp91000_2;
 8085e58:	484d      	ldr	r0, [pc, #308]	; (8085f90 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)
 8085e5a:	f000 f8cd 	bl	8085ff8 <_ZN8LMP91000C1Ev>
FuelGauge fuel;
 8085e5e:	4e4d      	ldr	r6, [pc, #308]	; (8085f94 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 8085e60:	2149      	movs	r1, #73	; 0x49
 8085e62:	484d      	ldr	r0, [pc, #308]	; (8085f98 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
 8085e64:	f000 fa00 	bl	8086268 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 8085e68:	214a      	movs	r1, #74	; 0x4a
 8085e6a:	484c      	ldr	r0, [pc, #304]	; (8085f9c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
 8085e6c:	f000 f9fc 	bl	8086268 <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 8085e70:	4621      	mov	r1, r4
 8085e72:	4630      	mov	r0, r6
 8085e74:	f003 fee6 	bl	8089c44 <_ZN9FuelGaugeC1Eb>
 8085e78:	4630      	mov	r0, r6
PMIC pmic;
 8085e7a:	4e49      	ldr	r6, [pc, #292]	; (8085fa0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
FuelGauge fuel;
 8085e7c:	462a      	mov	r2, r5
 8085e7e:	4949      	ldr	r1, [pc, #292]	; (8085fa4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
 8085e80:	f004 ff22 	bl	808acc8 <__aeabi_atexit>
PMIC pmic;
 8085e84:	4621      	mov	r1, r4
 8085e86:	4630      	mov	r0, r6
 8085e88:	f002 fddd 	bl	8088a46 <_ZN4PMICC1Eb>
 8085e8c:	4630      	mov	r0, r6
PowerCheck powerCheck;
 8085e8e:	4e46      	ldr	r6, [pc, #280]	; (8085fa8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
PMIC pmic;
 8085e90:	462a      	mov	r2, r5
 8085e92:	4946      	ldr	r1, [pc, #280]	; (8085fac <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
 8085e94:	f004 ff18 	bl	808acc8 <__aeabi_atexit>
PowerCheck powerCheck;
 8085e98:	4630      	mov	r0, r6
 8085e9a:	f000 f93b 	bl	8086114 <_ZN10PowerCheckC1Ev>
 8085e9e:	462a      	mov	r2, r5
 8085ea0:	4630      	mov	r0, r6
 8085ea2:	4943      	ldr	r1, [pc, #268]	; (8085fb0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 8085ea4:	f004 ff10 	bl	808acc8 <__aeabi_atexit>
HIH61XX hih(0x27);
 8085ea8:	2127      	movs	r1, #39	; 0x27
 8085eaa:	4842      	ldr	r0, [pc, #264]	; (8085fb4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
 8085eac:	f001 ff6e 	bl	8087d8c <_ZN7HIH61XXC1Eh>
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8085eb0:	2219      	movs	r2, #25
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8085eb2:	4b41      	ldr	r3, [pc, #260]	; (8085fb8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8085eb4:	4841      	ldr	r0, [pc, #260]	; (8085fbc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
 8085eb6:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
  SdFat() {
 8085eba:	4a41      	ldr	r2, [pc, #260]	; (8085fc0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
  SdFile() {}
 8085ebc:	4f41      	ldr	r7, [pc, #260]	; (8085fc4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
  SdFat() {
 8085ebe:	601a      	str	r2, [r3, #0]
SdFile file;
 8085ec0:	4e41      	ldr	r6, [pc, #260]	; (8085fc8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8085ec2:	4a42      	ldr	r2, [pc, #264]	; (8085fcc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
 8085ec4:	71dc      	strb	r4, [r3, #7]
 8085ec6:	f8a3 4440 	strh.w	r4, [r3, #1088]	; 0x440
 8085eca:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 8085ece:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 8085ed2:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8085ed6:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 8085eda:	462a      	mov	r2, r5
 8085edc:	4631      	mov	r1, r6
 8085ede:	8104      	strh	r4, [r0, #8]
    Print() : write_error(0) {}
 8085ee0:	6044      	str	r4, [r0, #4]
  SdFile() {}
 8085ee2:	6007      	str	r7, [r0, #0]
 8085ee4:	f004 fef0 	bl	808acc8 <__aeabi_atexit>
 8085ee8:	4839      	ldr	r0, [pc, #228]	; (8085fd0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
SdFile log_file;
 8085eea:	462a      	mov	r2, r5
 8085eec:	4631      	mov	r1, r6
 8085eee:	e9c0 7400 	strd	r7, r4, [r0]
 8085ef2:	8104      	strh	r4, [r0, #8]
 8085ef4:	f004 fee8 	bl	808acc8 <__aeabi_atexit>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8085ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8085efc:	4835      	ldr	r0, [pc, #212]	; (8085fd4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
String fileName;
 8085efe:	4e36      	ldr	r6, [pc, #216]	; (8085fd8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
 8085f00:	6083      	str	r3, [r0, #8]
  File() {}
 8085f02:	4b36      	ldr	r3, [pc, #216]	; (8085fdc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)
 8085f04:	4f36      	ldr	r7, [pc, #216]	; (8085fe0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 8085f06:	6003      	str	r3, [r0, #0]
File file1;
 8085f08:	462a      	mov	r2, r5
 8085f0a:	4936      	ldr	r1, [pc, #216]	; (8085fe4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)
 8085f0c:	8204      	strh	r4, [r0, #16]
 8085f0e:	6044      	str	r4, [r0, #4]
 8085f10:	f004 feda 	bl	808acc8 <__aeabi_atexit>
String fileName;
 8085f14:	4c34      	ldr	r4, [pc, #208]	; (8085fe8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
 8085f16:	4631      	mov	r1, r6
 8085f18:	4638      	mov	r0, r7
 8085f1a:	f003 f913 	bl	8089144 <_ZN6StringC1EPKc>
 8085f1e:	4638      	mov	r0, r7
String logFileName;
 8085f20:	4f32      	ldr	r7, [pc, #200]	; (8085fec <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
String fileName;
 8085f22:	462a      	mov	r2, r5
 8085f24:	4621      	mov	r1, r4
 8085f26:	f004 fecf 	bl	808acc8 <__aeabi_atexit>
String logFileName;
 8085f2a:	4631      	mov	r1, r6
 8085f2c:	4638      	mov	r0, r7
 8085f2e:	f003 f909 	bl	8089144 <_ZN6StringC1EPKc>
 8085f32:	4638      	mov	r0, r7
String ssid;        //wifi network name
 8085f34:	4f2e      	ldr	r7, [pc, #184]	; (8085ff0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
String logFileName;
 8085f36:	462a      	mov	r2, r5
 8085f38:	4621      	mov	r1, r4
 8085f3a:	f004 fec5 	bl	808acc8 <__aeabi_atexit>
String ssid;        //wifi network name
 8085f3e:	4631      	mov	r1, r6
 8085f40:	4638      	mov	r0, r7
 8085f42:	f003 f8ff 	bl	8089144 <_ZN6StringC1EPKc>
 8085f46:	4638      	mov	r0, r7
String password;    //wifi network password
 8085f48:	4f2a      	ldr	r7, [pc, #168]	; (8085ff4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f4>)
String ssid;        //wifi network name
 8085f4a:	462a      	mov	r2, r5
 8085f4c:	4621      	mov	r1, r4
 8085f4e:	f004 febb 	bl	808acc8 <__aeabi_atexit>
String password;    //wifi network password
 8085f52:	4631      	mov	r1, r6
 8085f54:	4638      	mov	r0, r7
 8085f56:	f003 f8f5 	bl	8089144 <_ZN6StringC1EPKc>
 8085f5a:	462a      	mov	r2, r5
 8085f5c:	4621      	mov	r1, r4
 8085f5e:	4638      	mov	r0, r7
}
 8085f60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
String password;    //wifi network password
 8085f64:	f004 beb0 	b.w	808acc8 <__aeabi_atexit>
 8085f68:	20000520 	.word	0x20000520
 8085f6c:	200006bc 	.word	0x200006bc
 8085f70:	200002b0 	.word	0x200002b0
 8085f74:	08087f5d 	.word	0x08087f5d
 8085f78:	200002fc 	.word	0x200002fc
 8085f7c:	ffff0000 	.word	0xffff0000
 8085f80:	080809ed 	.word	0x080809ed
 8085f84:	20000564 	.word	0x20000564
 8085f88:	20000c58 	.word	0x20000c58
 8085f8c:	200006b9 	.word	0x200006b9
 8085f90:	200006ba 	.word	0x200006ba
 8085f94:	20000664 	.word	0x20000664
 8085f98:	20000550 	.word	0x20000550
 8085f9c:	20000556 	.word	0x20000556
 8085fa0:	20000770 	.word	0x20000770
 8085fa4:	08089c63 	.word	0x08089c63
 8085fa8:	20000774 	.word	0x20000774
 8085fac:	08088a85 	.word	0x08088a85
 8085fb0:	080860e9 	.word	0x080860e9
 8085fb4:	200006a8 	.word	0x200006a8
 8085fb8:	200007ac 	.word	0x200007ac
 8085fbc:	200005f0 	.word	0x200005f0
 8085fc0:	0808ff28 	.word	0x0808ff28
 8085fc4:	0808ff10 	.word	0x0808ff10
 8085fc8:	0808095d 	.word	0x0808095d
 8085fcc:	0808ff84 	.word	0x0808ff84
 8085fd0:	20000710 	.word	0x20000710
 8085fd4:	2000061c 	.word	0x2000061c
 8085fd8:	080900b9 	.word	0x080900b9
 8085fdc:	0808fee8 	.word	0x0808fee8
 8085fe0:	20000650 	.word	0x20000650
 8085fe4:	0808095f 	.word	0x0808095f
 8085fe8:	080890b1 	.word	0x080890b1
 8085fec:	20000700 	.word	0x20000700
 8085ff0:	20000c38 	.word	0x20000c38
 8085ff4:	20000760 	.word	0x20000760

08085ff8 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8085ff8:	4770      	bx	lr

08085ffa <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 8085ffa:	b510      	push	{r4, lr}
 8085ffc:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8085ffe:	f004 fe13 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086002:	2148      	movs	r1, #72	; 0x48
 8086004:	f004 fc9c 	bl	808a940 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8086008:	f004 fe0e 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808600c:	6803      	ldr	r3, [r0, #0]
 808600e:	4621      	mov	r1, r4
 8086010:	689b      	ldr	r3, [r3, #8]
 8086012:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8086014:	f004 fe08 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086018:	2100      	movs	r1, #0
 808601a:	f004 fcac 	bl	808a976 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 808601e:	f004 fe03 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086022:	2301      	movs	r3, #1
 8086024:	2148      	movs	r1, #72	; 0x48
 8086026:	461a      	mov	r2, r3
 8086028:	f004 fc71 	bl	808a90e <_ZN7TwoWire11requestFromEhjh>
      if(Wire.available()){
 808602c:	f004 fdfc 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086030:	6803      	ldr	r3, [r0, #0]
 8086032:	691b      	ldr	r3, [r3, #16]
 8086034:	4798      	blx	r3
 8086036:	b128      	cbz	r0, 8086044 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8086038:	f004 fdf6 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808603c:	6803      	ldr	r3, [r0, #0]
 808603e:	695b      	ldr	r3, [r3, #20]
 8086040:	4798      	blx	r3
 8086042:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8086044:	bd10      	pop	{r4, pc}

08086046 <_ZN8LMP910005writeEhh>:
uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8086046:	b570      	push	{r4, r5, r6, lr}
 8086048:	4616      	mov	r6, r2
 808604a:	460c      	mov	r4, r1
 808604c:	4605      	mov	r5, r0
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 808604e:	f004 fdeb 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086052:	2148      	movs	r1, #72	; 0x48
 8086054:	f004 fc74 	bl	808a940 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8086058:	f004 fde6 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808605c:	6803      	ldr	r3, [r0, #0]
 808605e:	4621      	mov	r1, r4
 8086060:	689b      	ldr	r3, [r3, #8]
 8086062:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8086064:	f004 fde0 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086068:	6803      	ldr	r3, [r0, #0]
 808606a:	4631      	mov	r1, r6
 808606c:	689b      	ldr	r3, [r3, #8]
 808606e:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8086070:	f004 fdda 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086074:	2101      	movs	r1, #1
 8086076:	f004 fc7e 	bl	808a976 <_ZN7TwoWire15endTransmissionEh>
      return read(reg);
 808607a:	4621      	mov	r1, r4
 808607c:	4628      	mov	r0, r5
}
 808607e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return read(reg);
 8086082:	f7ff bfba 	b.w	8085ffa <_ZN8LMP910004readEh>

08086086 <_ZN8LMP910006statusEv>:

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8086086:	2100      	movs	r1, #0
 8086088:	f7ff bfb7 	b.w	8085ffa <_ZN8LMP910004readEh>

0808608c <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 808608c:	2201      	movs	r2, #1
 808608e:	4611      	mov	r1, r2
 8086090:	f7ff bfd9 	b.w	8086046 <_ZN8LMP910005writeEhh>

08086094 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8086094:	2200      	movs	r2, #0
 8086096:	2101      	movs	r1, #1
 8086098:	f7ff bfd5 	b.w	8086046 <_ZN8LMP910005writeEhh>

0808609c <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 808609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80860a0:	4604      	mov	r4, r0
 80860a2:	4688      	mov	r8, r1
 80860a4:	4617      	mov	r7, r2
 80860a6:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 80860a8:	f7ff ffed 	bl	8086086 <_ZN8LMP910006statusEv>
 80860ac:	2801      	cmp	r0, #1
 80860ae:	4605      	mov	r5, r0
 80860b0:	d117      	bne.n	80860e2 <_ZN8LMP910009configureEhhh+0x46>
            unlock();
 80860b2:	4620      	mov	r0, r4
 80860b4:	f7ff ffee 	bl	8086094 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 80860b8:	4642      	mov	r2, r8
 80860ba:	2110      	movs	r1, #16
 80860bc:	4620      	mov	r0, r4
 80860be:	f7ff ffc2 	bl	8086046 <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 80860c2:	463a      	mov	r2, r7
 80860c4:	2111      	movs	r1, #17
 80860c6:	4620      	mov	r0, r4
 80860c8:	f7ff ffbd 	bl	8086046 <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 80860cc:	4632      	mov	r2, r6
 80860ce:	2112      	movs	r1, #18
 80860d0:	4620      	mov	r0, r4
 80860d2:	f7ff ffb8 	bl	8086046 <_ZN8LMP910005writeEhh>
            lock();
 80860d6:	4620      	mov	r0, r4
 80860d8:	f7ff ffd8 	bl	808608c <_ZN8LMP910004lockEv>
            return 1;
      }
      return 0;
}
 80860dc:	4628      	mov	r0, r5
 80860de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return 0;
 80860e2:	2500      	movs	r5, #0
 80860e4:	e7fa      	b.n	80860dc <_ZN8LMP910009configureEhhh+0x40>
	...

080860e8 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 80860e8:	b510      	push	{r4, lr}
 80860ea:	4604      	mov	r4, r0
 80860ec:	4b03      	ldr	r3, [pc, #12]	; (80860fc <_ZN10PowerCheckD1Ev+0x14>)
 80860ee:	f840 3b14 	str.w	r3, [r0], #20
 80860f2:	f002 fcc7 	bl	8088a84 <_ZN4PMICD1Ev>
}
 80860f6:	4620      	mov	r0, r4
 80860f8:	bd10      	pop	{r4, pc}
 80860fa:	bf00      	nop
 80860fc:	0808ff64 	.word	0x0808ff64

08086100 <_ZN10PowerCheckD0Ev>:
PowerCheck::~PowerCheck() {
 8086100:	b510      	push	{r4, lr}
 8086102:	4604      	mov	r4, r0
}
 8086104:	f7ff fff0 	bl	80860e8 <_ZN10PowerCheckD1Ev>
 8086108:	4620      	mov	r0, r4
 808610a:	2124      	movs	r1, #36	; 0x24
 808610c:	f004 fde1 	bl	808acd2 <_ZdlPvj>
 8086110:	4620      	mov	r0, r4
 8086112:	bd10      	pop	{r4, pc}

08086114 <_ZN10PowerCheckC1Ev>:
PowerCheck::PowerCheck() {
 8086114:	b538      	push	{r3, r4, r5, lr}
 8086116:	4b0b      	ldr	r3, [pc, #44]	; (8086144 <_ZN10PowerCheckC1Ev+0x30>)
 8086118:	2500      	movs	r5, #0
 808611a:	2232      	movs	r2, #50	; 0x32
 808611c:	6003      	str	r3, [r0, #0]
 808611e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8086122:	4604      	mov	r4, r0
 8086124:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8086128:	e9c0 5503 	strd	r5, r5, [r0, #12]
 808612c:	4629      	mov	r1, r5
 808612e:	3014      	adds	r0, #20
 8086130:	f002 fc89 	bl	8088a46 <_ZN4PMICC1Eb>
 8086134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}
 8086138:	4620      	mov	r0, r4
PowerCheck::PowerCheck() {
 808613a:	e9c4 5506 	strd	r5, r5, [r4, #24]
 808613e:	6223      	str	r3, [r4, #32]
}
 8086140:	bd38      	pop	{r3, r4, r5, pc}
 8086142:	bf00      	nop
 8086144:	0808ff64 	.word	0x0808ff64

08086148 <_ZN10PowerCheck4loopEv>:

void PowerCheck::loop() {
 8086148:	b510      	push	{r4, lr}
 808614a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808614c:	f002 f990 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8086150:	68e3      	ldr	r3, [r4, #12]
 8086152:	1ac0      	subs	r0, r0, r3
 8086154:	6863      	ldr	r3, [r4, #4]
 8086156:	4298      	cmp	r0, r3
 8086158:	d31a      	bcc.n	8086190 <_ZN10PowerCheck4loopEv+0x48>
 808615a:	f002 f989 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 808615e:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8086160:	f104 0014 	add.w	r0, r4, #20
 8086164:	f002 fce1 	bl	8088b2a <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8086168:	f010 0304 	ands.w	r3, r0, #4
 808616c:	d00b      	beq.n	8086186 <_ZN10PowerCheck4loopEv+0x3e>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 808616e:	f894 3020 	ldrb.w	r3, [r4, #32]
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8086172:	f3c0 1001 	ubfx	r0, r0, #4, #2
			if (chrgStat != lastChrgStat) {
 8086176:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8086178:	bf1f      	itttt	ne
 808617a:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 808617c:	f884 0020 	strbne.w	r0, [r4, #32]
				changeCount++;
 8086180:	3301      	addne	r3, #1
 8086182:	61e3      	strne	r3, [r4, #28]
			}

			// We have power (USB or VIN)
			hasPower = true;
 8086184:	2301      	movs	r3, #1
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8086186:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		}

		checkCount++;
 808618a:	69a3      	ldr	r3, [r4, #24]
 808618c:	3301      	adds	r3, #1
 808618e:	61a3      	str	r3, [r4, #24]
 8086190:	f002 f96e 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8086194:	6923      	ldr	r3, [r4, #16]
 8086196:	1ac0      	subs	r0, r0, r3
 8086198:	68a3      	ldr	r3, [r4, #8]
 808619a:	4298      	cmp	r0, r3
 808619c:	d914      	bls.n	80861c8 <_ZN10PowerCheck4loopEv+0x80>
 808619e:	f002 f967 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 80861a2:	69a3      	ldr	r3, [r4, #24]
		lastSlowCheck = millis();
 80861a4:	6120      	str	r0, [r4, #16]
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 80861a6:	2b0a      	cmp	r3, #10
 80861a8:	dc0f      	bgt.n	80861ca <_ZN10PowerCheck4loopEv+0x82>
 80861aa:	2301      	movs	r3, #1
 80861ac:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 80861b0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80861b4:	3b01      	subs	r3, #1
 80861b6:	2b01      	cmp	r3, #1
 80861b8:	bf8c      	ite	hi
 80861ba:	2300      	movhi	r3, #0
 80861bc:	2301      	movls	r3, #1
 80861be:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 80861c2:	2300      	movs	r3, #0
		changeCount = 0;
 80861c4:	e9c4 3306 	strd	r3, r3, [r4, #24]
	}

}
 80861c8:	bd10      	pop	{r4, pc}
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 80861ca:	69e2      	ldr	r2, [r4, #28]
 80861cc:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80861d0:	ddeb      	ble.n	80861aa <_ZN10PowerCheck4loopEv+0x62>
 80861d2:	2300      	movs	r3, #0
 80861d4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 80861d8:	e7f1      	b.n	80861be <_ZN10PowerCheck4loopEv+0x76>

080861da <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 80861da:	b510      	push	{r4, lr}
 80861dc:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 80861de:	f004 fd23 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80861e2:	6803      	ldr	r3, [r0, #0]
 80861e4:	4621      	mov	r1, r4
}
 80861e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.write((uint8_t)x);
 80861ea:	689b      	ldr	r3, [r3, #8]
 80861ec:	4718      	bx	r3

080861ee <_ZL7i2creadv>:
static uint8_t i2cread(void) {
 80861ee:	b508      	push	{r3, lr}
  return Wire.read();
 80861f0:	f004 fd1a 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80861f4:	6803      	ldr	r3, [r0, #0]
 80861f6:	695b      	ldr	r3, [r3, #20]
 80861f8:	4798      	blx	r3
}
 80861fa:	b2c0      	uxtb	r0, r0
 80861fc:	bd08      	pop	{r3, pc}

080861fe <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 80861fe:	b570      	push	{r4, r5, r6, lr}
 8086200:	4606      	mov	r6, r0
 8086202:	460d      	mov	r5, r1
 8086204:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8086206:	f004 fd0f 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808620a:	4631      	mov	r1, r6
 808620c:	f004 fb94 	bl	808a938 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8086210:	4628      	mov	r0, r5
 8086212:	f7ff ffe2 	bl	80861da <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8086216:	0a20      	lsrs	r0, r4, #8
 8086218:	f7ff ffdf 	bl	80861da <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 808621c:	b2e0      	uxtb	r0, r4
 808621e:	f7ff ffdc 	bl	80861da <_ZL8i2cwriteh>
  Wire.endTransmission();
 8086222:	f004 fd01 	bl	808ac28 <_Z19__fetch_global_Wirev>
}
 8086226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 808622a:	f004 bba8 	b.w	808a97e <_ZN7TwoWire15endTransmissionEv>

0808622e <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 808622e:	b510      	push	{r4, lr}
 8086230:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8086232:	f004 fcf9 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086236:	4621      	mov	r1, r4
 8086238:	f004 fb7e 	bl	808a938 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 808623c:	2000      	movs	r0, #0
 808623e:	f7ff ffcc 	bl	80861da <_ZL8i2cwriteh>
  Wire.endTransmission();
 8086242:	f004 fcf1 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086246:	f004 fb9a 	bl	808a97e <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 808624a:	f004 fced 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808624e:	4621      	mov	r1, r4
 8086250:	2202      	movs	r2, #2
 8086252:	f004 fb6e 	bl	808a932 <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());  
 8086256:	f7ff ffca 	bl	80861ee <_ZL7i2creadv>
 808625a:	4604      	mov	r4, r0
 808625c:	f7ff ffc7 	bl	80861ee <_ZL7i2creadv>
 8086260:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8086264:	b280      	uxth	r0, r0
 8086266:	bd10      	pop	{r4, pc}

08086268 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8086268:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 808626a:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 808626c:	2108      	movs	r1, #8
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 808626e:	8082      	strh	r2, [r0, #4]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8086270:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8086272:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 8086274:	4770      	bx	lr

08086276 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8086276:	b508      	push	{r3, lr}
  Wire.begin();
 8086278:	f004 fcd6 	bl	808ac28 <_Z19__fetch_global_Wirev>
}
 808627c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin();
 8086280:	f004 bb28 	b.w	808a8d4 <_ZN7TwoWire5beginEv>

08086284 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 8086284:	8081      	strh	r1, [r0, #4]
}
 8086286:	4770      	bx	lr

08086288 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8086288:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 808628a:	b510      	push	{r4, lr}
 808628c:	4604      	mov	r4, r0
  if (channel > 3)
 808628e:	d822      	bhi.n	80862d6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8086290:	2902      	cmp	r1, #2
  config |= m_gain;
 8086292:	8882      	ldrh	r2, [r0, #4]
  switch (channel)
 8086294:	d019      	beq.n	80862ca <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
 8086296:	2903      	cmp	r1, #3
 8086298:	d01a      	beq.n	80862d0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
 808629a:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 808629c:	bf14      	ite	ne
 808629e:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 80862a2:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 80862a6:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 80862aa:	2101      	movs	r1, #1
 80862ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80862b0:	7820      	ldrb	r0, [r4, #0]
 80862b2:	f7ff ffa4 	bl	80861fe <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 80862b6:	7860      	ldrb	r0, [r4, #1]
 80862b8:	f003 fc90 	bl	8089bdc <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 80862bc:	7820      	ldrb	r0, [r4, #0]
 80862be:	f7ff ffb6 	bl	808622e <_ZL12readRegisterhh.isra.0>
 80862c2:	78a3      	ldrb	r3, [r4, #2]
 80862c4:	4118      	asrs	r0, r3
 80862c6:	b280      	uxth	r0, r0
}
 80862c8:	bd10      	pop	{r4, pc}
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 80862ca:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 80862ce:	e7ea      	b.n	80862a6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 80862d0:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 80862d4:	e7e7      	b.n	80862a6 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
 80862d6:	2000      	movs	r0, #0
 80862d8:	e7f6      	b.n	80862c8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>
	...

080862dc <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"

//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 80862dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80862e0:	460e      	mov	r6, r1
 80862e2:	b088      	sub	sp, #32
 80862e4:	4604      	mov	r4, r0
 80862e6:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 80862e8:	4668      	mov	r0, sp
 80862ea:	2302      	movs	r3, #2
 80862ec:	2200      	movs	r2, #0
 80862ee:	f003 f87d 	bl	80893ec <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 80862f2:	230a      	movs	r3, #10
 80862f4:	2202      	movs	r2, #2
 80862f6:	4631      	mov	r1, r6
 80862f8:	a804      	add	r0, sp, #16
 80862fa:	f003 f877 	bl	80893ec <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 80862fe:	4668      	mov	r0, sp
 8086300:	f003 f896 	bl	8089430 <_ZNK6String5toIntEv>
 8086304:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 8086306:	a804      	add	r0, sp, #16
 8086308:	f003 f892 	bl	8089430 <_ZNK6String5toIntEv>
 808630c:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 808630e:	4668      	mov	r0, sp
 8086310:	f003 f88e 	bl	8089430 <_ZNK6String5toIntEv>
 8086314:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8086316:	a804      	add	r0, sp, #16
 8086318:	f003 f88f 	bl	808943a <_ZNK6String7toFloatEv>
 808631c:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
 808631e:	4630      	mov	r0, r6
 8086320:	f004 fe36 	bl	808af90 <__aeabi_i2d>
 8086324:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 8086326:	4640      	mov	r0, r8
    latitude = whole_part;
 8086328:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 808632a:	f004 fe43 	bl	808afb4 <__aeabi_f2d>
    latitude += (frac_part)/60;
 808632e:	2200      	movs	r2, #0
 8086330:	4b0d      	ldr	r3, [pc, #52]	; (8086368 <_ZN3GPS15set_lat_decimalE6Stringc+0x8c>)
 8086332:	f004 ffc1 	bl	808b2b8 <__aeabi_ddiv>
 8086336:	460b      	mov	r3, r1
 8086338:	4602      	mov	r2, r0
 808633a:	4639      	mov	r1, r7
 808633c:	4630      	mov	r0, r6
 808633e:	f004 fcdb 	bl	808acf8 <__adddf3>
    if(nsString == 'S'){
 8086342:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8086344:	bf0c      	ite	eq
 8086346:	2300      	moveq	r3, #0
 8086348:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    latitude += (frac_part)/60;
 808634c:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
 8086350:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    String frac_str = latString.substring(2,10);
 8086354:	a804      	add	r0, sp, #16
 8086356:	f002 feab 	bl	80890b0 <_ZN6StringD1Ev>
    String whole_str = latString.substring(0,2);
 808635a:	4668      	mov	r0, sp
 808635c:	f002 fea8 	bl	80890b0 <_ZN6StringD1Ev>
    }
}
 8086360:	b008      	add	sp, #32
 8086362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086366:	bf00      	nop
 8086368:	404e0000 	.word	0x404e0000

0808636c <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 808636c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086370:	460e      	mov	r6, r1
 8086372:	b088      	sub	sp, #32
 8086374:	4604      	mov	r4, r0
 8086376:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8086378:	4668      	mov	r0, sp
 808637a:	2303      	movs	r3, #3
 808637c:	2200      	movs	r2, #0
 808637e:	f003 f835 	bl	80893ec <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 8086382:	230a      	movs	r3, #10
 8086384:	2203      	movs	r2, #3
 8086386:	4631      	mov	r1, r6
 8086388:	a804      	add	r0, sp, #16
 808638a:	f003 f82f 	bl	80893ec <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 808638e:	4668      	mov	r0, sp
 8086390:	f003 f84e 	bl	8089430 <_ZNK6String5toIntEv>
 8086394:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 8086396:	a804      	add	r0, sp, #16
 8086398:	f003 f84a 	bl	8089430 <_ZNK6String5toIntEv>
 808639c:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 808639e:	4668      	mov	r0, sp
 80863a0:	f003 f846 	bl	8089430 <_ZNK6String5toIntEv>
 80863a4:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 80863a6:	a804      	add	r0, sp, #16
 80863a8:	f003 f847 	bl	808943a <_ZNK6String7toFloatEv>
 80863ac:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
 80863ae:	4630      	mov	r0, r6
 80863b0:	f004 fdee 	bl	808af90 <__aeabi_i2d>
 80863b4:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 80863b6:	4640      	mov	r0, r8
    longitude = whole_part;
 80863b8:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 80863ba:	f004 fdfb 	bl	808afb4 <__aeabi_f2d>
    longitude += (frac_part)/60;
 80863be:	2200      	movs	r2, #0
 80863c0:	4b0c      	ldr	r3, [pc, #48]	; (80863f4 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 80863c2:	f004 ff79 	bl	808b2b8 <__aeabi_ddiv>
 80863c6:	4602      	mov	r2, r0
 80863c8:	460b      	mov	r3, r1
 80863ca:	4630      	mov	r0, r6
 80863cc:	4639      	mov	r1, r7
 80863ce:	f004 fc93 	bl	808acf8 <__adddf3>
    if(ewString == 'E'){
 80863d2:	3d45      	subs	r5, #69	; 0x45
 80863d4:	bf18      	it	ne
 80863d6:	2501      	movne	r5, #1
    longitude += (frac_part)/60;
 80863d8:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
 80863dc:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    String frac_str = longString.substring(3,10);
 80863e0:	a804      	add	r0, sp, #16
 80863e2:	f002 fe65 	bl	80890b0 <_ZN6StringD1Ev>
    String whole_str = longString.substring(0,3);
 80863e6:	4668      	mov	r0, sp
 80863e8:	f002 fe62 	bl	80890b0 <_ZN6StringD1Ev>
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 80863ec:	b008      	add	sp, #32
 80863ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80863f2:	bf00      	nop
 80863f4:	404e0000 	.word	0x404e0000

080863f8 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 80863f8:	b510      	push	{r4, lr}
 80863fa:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 80863fc:	4608      	mov	r0, r1
 80863fe:	f003 f817 	bl	8089430 <_ZNK6String5toIntEv>
 8086402:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 8086404:	bd10      	pop	{r4, pc}
	...

08086408 <_ZN3GPS22set_horizontalDilutionE6String>:

void GPS::set_horizontalDilution(String hdString){
 8086408:	b510      	push	{r4, lr}
 808640a:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 808640c:	4608      	mov	r0, r1
 808640e:	f003 f814 	bl	808943a <_ZNK6String7toFloatEv>
    temp_float *= 10;
 8086412:	4902      	ldr	r1, [pc, #8]	; (808641c <_ZN3GPS22set_horizontalDilutionE6String+0x14>)
 8086414:	f005 fa7c 	bl	808b910 <__aeabi_fmul>

    horizontal_dilution = temp_float;
 8086418:	6320      	str	r0, [r4, #48]	; 0x30
}
 808641a:	bd10      	pop	{r4, pc}
 808641c:	41200000 	.word	0x41200000

08086420 <_ZN3GPS12get_latitudeEv>:

double GPS::get_latitude(void){
    return latitude;
}
 8086420:	f100 0108 	add.w	r1, r0, #8
 8086424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8086428:	4770      	bx	lr

0808642a <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 808642a:	f100 0110 	add.w	r1, r0, #16
 808642e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8086432:	4770      	bx	lr

08086434 <_ZN3GPS22get_horizontalDilutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDilution(void){
 8086434:	b508      	push	{r3, lr}
    return horizontal_dilution;
 8086436:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8086438:	f005 fc30 	bl	808bc9c <__aeabi_f2iz>
}
 808643c:	bd08      	pop	{r3, pc}

0808643e <_ZN3GPS17get_latitudeWholeEv>:

int16_t GPS::get_latitudeWhole(void){
    return latWhole;
}
 808643e:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 8086442:	4770      	bx	lr

08086444 <_ZN3GPS16get_latitudeFracEv>:
int16_t GPS::get_latitudeFrac(void){
    return latFrac;
}
 8086444:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 8086448:	4770      	bx	lr

0808644a <_ZN3GPS18get_longitudeWholeEv>:
int16_t GPS::get_longitudeWhole(void){
    return longWhole;
}
 808644a:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
 808644e:	4770      	bx	lr

08086450 <_ZN3GPS17get_longitudeFracEv>:
int16_t GPS::get_longitudeFrac(void){
    return longFrac;
}
 8086450:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8086454:	4770      	bx	lr

08086456 <_ZN3GPS15get_nsIndicatorEv>:

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 8086456:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 808645a:	4770      	bx	lr

0808645c <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 808645c:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 8086460:	4770      	bx	lr

08086462 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8086462:	6803      	ldr	r3, [r0, #0]
 8086464:	b2c9      	uxtb	r1, r1
 8086466:	689b      	ldr	r3, [r3, #8]
 8086468:	4718      	bx	r3

0808646a <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 808646a:	4770      	bx	lr

0808646c <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 808646c:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 808646e:	f004 fbdb 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086472:	2115      	movs	r1, #21
 8086474:	f004 fa64 	bl	808a940 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 8086478:	f004 fbd6 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808647c:	2105      	movs	r1, #5
 808647e:	f7ff fff0 	bl	8086462 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 8086482:	f004 fbd1 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086486:	2103      	movs	r1, #3
 8086488:	f7ff ffeb 	bl	8086462 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 808648c:	f004 fbcc 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086490:	21e8      	movs	r1, #232	; 0xe8
 8086492:	f7ff ffe6 	bl	8086462 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 8086496:	f004 fbc7 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808649a:	21ff      	movs	r1, #255	; 0xff
 808649c:	f7ff ffe1 	bl	8086462 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 80864a0:	f004 fbc2 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80864a4:	2100      	movs	r1, #0
 80864a6:	f7ff ffdc 	bl	8086462 <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 80864aa:	f004 fbbd 	bl	808ac28 <_Z19__fetch_global_Wirev>
}
 80864ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   Wire.endTransmission();
 80864b2:	f004 ba64 	b.w	808a97e <_ZN7TwoWire15endTransmissionEv>

080864b6 <_ZN13Telaire_T671315disableABCLogicEv>:

void Telaire_T6713::disableABCLogic()
{
 80864b6:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 80864b8:	f004 fbb6 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80864bc:	2115      	movs	r1, #21
 80864be:	f004 fa3f 	bl	808a940 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80864c2:	f004 fbb1 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80864c6:	2105      	movs	r1, #5
 80864c8:	f7ff ffcb 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80864cc:	f004 fbac 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80864d0:	2103      	movs	r1, #3
 80864d2:	f7ff ffc6 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 80864d6:	f004 fba7 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80864da:	21ee      	movs	r1, #238	; 0xee
 80864dc:	f7ff ffc1 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 80864e0:	f004 fba2 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80864e4:	2100      	movs	r1, #0
 80864e6:	f7ff ffbc 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80864ea:	f004 fb9d 	bl	808ac28 <_Z19__fetch_global_Wirev>
 80864ee:	2100      	movs	r1, #0
 80864f0:	f7ff ffb7 	bl	8086462 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80864f4:	f004 fb98 	bl	808ac28 <_Z19__fetch_global_Wirev>
}
 80864f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 80864fc:	f004 ba3f 	b.w	808a97e <_ZN7TwoWire15endTransmissionEv>

08086500 <_ZN13Telaire_T671314enableABCLogicEv>:

void Telaire_T6713::enableABCLogic()
{
 8086500:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8086502:	f004 fb91 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086506:	2115      	movs	r1, #21
 8086508:	f004 fa1a 	bl	808a940 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 808650c:	f004 fb8c 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086510:	2105      	movs	r1, #5
 8086512:	f7ff ffa6 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8086516:	f004 fb87 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808651a:	2103      	movs	r1, #3
 808651c:	f7ff ffa1 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8086520:	f004 fb82 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086524:	21ee      	movs	r1, #238	; 0xee
 8086526:	f7ff ff9c 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 808652a:	f004 fb7d 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808652e:	21ff      	movs	r1, #255	; 0xff
 8086530:	f7ff ff97 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8086534:	f004 fb78 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086538:	2100      	movs	r1, #0
 808653a:	f7ff ff92 	bl	8086462 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 808653e:	f004 fb73 	bl	808ac28 <_Z19__fetch_global_Wirev>
}
 8086542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 8086546:	f004 ba1a 	b.w	808a97e <_ZN7TwoWire15endTransmissionEv>
	...

0808654c <_ZN13Telaire_T67139calibrateEi>:


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 808654c:	b508      	push	{r3, lr}
    if(debugging){
 808654e:	b121      	cbz	r1, 808655a <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 8086550:	f004 f828 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8086554:	4913      	ldr	r1, [pc, #76]	; (80865a4 <_ZN13Telaire_T67139calibrateEi+0x58>)
 8086556:	f002 ffcc 	bl	80894f2 <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 808655a:	f004 fb65 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808655e:	2115      	movs	r1, #21
 8086560:	f004 f9ee 	bl	808a940 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8086564:	f004 fb60 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086568:	2105      	movs	r1, #5
 808656a:	f7ff ff7a 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808656e:	f004 fb5b 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086572:	2103      	movs	r1, #3
 8086574:	f7ff ff75 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 8086578:	f004 fb56 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808657c:	21ec      	movs	r1, #236	; 0xec
 808657e:	f7ff ff70 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 8086582:	f004 fb51 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086586:	21ff      	movs	r1, #255	; 0xff
 8086588:	f7ff ff6b 	bl	8086462 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 808658c:	f004 fb4c 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8086590:	2100      	movs	r1, #0
 8086592:	f7ff ff66 	bl	8086462 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8086596:	f004 fb47 	bl	808ac28 <_Z19__fetch_global_Wirev>
}
 808659a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 808659e:	f004 b9ee 	b.w	808a97e <_ZN7TwoWire15endTransmissionEv>
 80865a2:	bf00      	nop
 80865a4:	0808ff6c 	.word	0x0808ff6c

080865a8 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 80865a8:	b538      	push	{r3, r4, r5, lr}
 80865aa:	4605      	mov	r5, r0
    if (base == 0) {
 80865ac:	b942      	cbnz	r2, 80865c0 <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
 80865ae:	6803      	ldr	r3, [r0, #0]
 80865b0:	689b      	ldr	r3, [r3, #8]
 80865b2:	4798      	blx	r3
        return printNumber(val, base) + t;
 80865b4:	4604      	mov	r4, r0
        n += println();
 80865b6:	4628      	mov	r0, r5
 80865b8:	f002 ff8f 	bl	80894da <_ZN5Print7printlnEv>
    }
 80865bc:	4420      	add	r0, r4
 80865be:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 80865c0:	b2d2      	uxtb	r2, r2
 80865c2:	f002 ffaa 	bl	808951a <_ZN5Print11printNumberEmh>
 80865c6:	e7f5      	b.n	80865b4 <_ZN5Print7printlnIhLi0EEEjT_i+0xc>

080865c8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80865c8:	b510      	push	{r4, lr}
 80865ca:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 80865cc:	3028      	adds	r0, #40	; 0x28
 80865ce:	f001 f9bf 	bl	8087950 <_ZN8FatCache4syncEv>
 80865d2:	b128      	cbz	r0, 80865e0 <_ZN9FatVolume9cacheSyncEv+0x18>
 80865d4:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 80865d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync();
 80865dc:	f001 b9b8 	b.w	8087950 <_ZN8FatCache4syncEv>
  }
 80865e0:	bd10      	pop	{r4, pc}

080865e2 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80865e2:	1e41      	subs	r1, r0, #1
 80865e4:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
 80865e8:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80865ea:	0842      	lsrs	r2, r0, #1
 80865ec:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 80865f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80865f4:	4410      	add	r0, r2
  for (uint8_t i = 0; i < 11; i++) {
 80865f6:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80865f8:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  for (uint8_t i = 0; i < 11; i++) {
 80865fc:	d1f5      	bne.n	80865ea <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
 80865fe:	4770      	bx	lr

08086600 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8086600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086604:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8086606:	f810 3b01 	ldrb.w	r3, [r0], #1
 808660a:	2b20      	cmp	r3, #32
 808660c:	d0fa      	beq.n	8086604 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
 808660e:	2400      	movs	r4, #0
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8086610:	4d6a      	ldr	r5, [pc, #424]	; (80867bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
  fname->lfn = path;
 8086612:	608e      	str	r6, [r1, #8]
    c = path[len];
 8086614:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
 8086616:	b1c3      	cbz	r3, 808664a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
 8086618:	2b2f      	cmp	r3, #47	; 0x2f
 808661a:	d016      	beq.n	808664a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808661c:	2b5c      	cmp	r3, #92	; 0x5c
 808661e:	d102      	bne.n	8086626 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8086620:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
 8086622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8086626:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 808662a:	b2c0      	uxtb	r0, r0
 808662c:	281d      	cmp	r0, #29
 808662e:	d803      	bhi.n	8086638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
 8086630:	fa25 f000 	lsr.w	r0, r5, r0
 8086634:	07c0      	lsls	r0, r0, #31
 8086636:	d4f3      	bmi.n	8086620 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8086638:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 808663c:	283c      	cmp	r0, #60	; 0x3c
 808663e:	d0ef      	beq.n	8086620 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
 8086640:	3b20      	subs	r3, #32
 8086642:	2b5e      	cmp	r3, #94	; 0x5e
 8086644:	d8ec      	bhi.n	8086620 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
 8086646:	3401      	adds	r4, #1
    c = path[len];
 8086648:	e7e4      	b.n	8086614 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
 808664a:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
 808664c:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 808664e:	4607      	mov	r7, r0
 8086650:	f810 5b01 	ldrb.w	r5, [r0], #1
 8086654:	2d20      	cmp	r5, #32
 8086656:	d0fa      	beq.n	808664e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
 8086658:	2d2f      	cmp	r5, #47	; 0x2f
 808665a:	d0f8      	beq.n	808664e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
 808665c:	6017      	str	r7, [r2, #0]
  while (len) {
 808665e:	b14c      	cbz	r4, 8086674 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
 8086660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8086664:	2a2e      	cmp	r2, #46	; 0x2e
 8086666:	d001      	beq.n	808666c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
 8086668:	2a20      	cmp	r2, #32
 808666a:	d101      	bne.n	8086670 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
 808666c:	3c01      	subs	r4, #1
  while (len) {
 808666e:	e7f6      	b.n	808665e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
 8086670:	2cff      	cmp	r4, #255	; 0xff
 8086672:	dcd5      	bgt.n	8086620 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
 8086674:	2020      	movs	r0, #32
  fname->len = len;
 8086676:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
 8086678:	f101 030d 	add.w	r3, r1, #13
 808667c:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
 8086680:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
 8086684:	4293      	cmp	r3, r2
 8086686:	d1fb      	bne.n	8086680 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8086688:	f04f 0800 	mov.w	r8, #0
 808668c:	f816 3008 	ldrb.w	r3, [r6, r8]
 8086690:	2b2e      	cmp	r3, #46	; 0x2e
 8086692:	d001      	beq.n	8086698 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
 8086694:	2b20      	cmp	r3, #32
 8086696:	d102      	bne.n	808669e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
 8086698:	f108 0801 	add.w	r8, r8, #1
 808669c:	e7f6      	b.n	808668c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
 808669e:	fab8 f088 	clz	r0, r8
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80866a2:	1e65      	subs	r5, r4, #1
  is83 = !si;
 80866a4:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80866a6:	1c6b      	adds	r3, r5, #1
 80866a8:	d002      	beq.n	80866b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
 80866aa:	5d73      	ldrb	r3, [r6, r5]
 80866ac:	2b2e      	cmp	r3, #46	; 0x2e
 80866ae:	d114      	bne.n	80866da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80866b0:	f04f 0900 	mov.w	r9, #0
 80866b4:	2707      	movs	r7, #7
 80866b6:	464a      	mov	r2, r9
 80866b8:	46ca      	mov	sl, r9
 80866ba:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
 80866be:	45a0      	cmp	r8, r4
 80866c0:	da69      	bge.n	8086796 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
 80866c2:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
 80866c6:	2b20      	cmp	r3, #32
 80866c8:	d003      	beq.n	80866d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
 80866ca:	2b2e      	cmp	r3, #46	; 0x2e
 80866cc:	d107      	bne.n	80866de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 80866ce:	45a8      	cmp	r8, r5
 80866d0:	d012      	beq.n	80866f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
 80866d2:	2000      	movs	r0, #0
  for (; si < len; si++) {
 80866d4:	f108 0801 	add.w	r8, r8, #1
 80866d8:	e7f1      	b.n	80866be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80866da:	3d01      	subs	r5, #1
 80866dc:	e7e3      	b.n	80866a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
 80866de:	2b22      	cmp	r3, #34	; 0x22
 80866e0:	d008      	beq.n	80866f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
 80866e2:	2b7c      	cmp	r3, #124	; 0x7c
 80866e4:	d006      	beq.n	80866f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80866e6:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80866ea:	f1bc 0f05 	cmp.w	ip, #5
 80866ee:	d80b      	bhi.n	8086708 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
 80866f0:	2b2d      	cmp	r3, #45	; 0x2d
 80866f2:	d013      	beq.n	808671c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
 80866f4:	45a8      	cmp	r8, r5
 80866f6:	d15c      	bne.n	80867b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
 80866f8:	2f0a      	cmp	r7, #10
 80866fa:	d04b      	beq.n	8086794 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 80866fc:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 80866fe:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8086700:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8086702:	f04f 0e10 	mov.w	lr, #16
 8086706:	e7e5      	b.n	80866d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
 8086708:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 808670c:	f1bc 0f05 	cmp.w	ip, #5
 8086710:	d9f0      	bls.n	80866f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
 8086712:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8086716:	f1bc 0f02 	cmp.w	ip, #2
 808671a:	d9eb      	bls.n	80866f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
 808671c:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8086720:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8086724:	d8e6      	bhi.n	80866f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
 8086726:	45a8      	cmp	r8, r5
 8086728:	d0e6      	beq.n	80866f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
 808672a:	42ba      	cmp	r2, r7
 808672c:	d830      	bhi.n	8086790 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
 808672e:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8086732:	f1bc 0f19 	cmp.w	ip, #25
 8086736:	d81a      	bhi.n	808676e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
 8086738:	3b20      	subs	r3, #32
        lc |= bit;
 808673a:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
 808673e:	b2db      	uxtb	r3, r3
        lc |= bit;
 8086740:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
 8086744:	f102 0c01 	add.w	ip, r2, #1
 8086748:	fa5f fc8c 	uxtb.w	ip, ip
 808674c:	440a      	add	r2, r1
      if (i < 7) {
 808674e:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
 8086752:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
 8086754:	d801      	bhi.n	808675a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
 8086756:	f881 c00c 	strb.w	ip, [r1, #12]
 808675a:	4662      	mov	r2, ip
 808675c:	e7ba      	b.n	80866d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
 808675e:	45a8      	cmp	r8, r5
 8086760:	dc18      	bgt.n	8086794 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 8086762:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 8086764:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8086766:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8086768:	f04f 0e10 	mov.w	lr, #16
 808676c:	e7b1      	b.n	80866d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
 808676e:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8086772:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8086776:	bf98      	it	ls
 8086778:	ea4e 0a0a 	orrls.w	sl, lr, sl
 808677c:	e7e2      	b.n	8086744 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->flags = FNAME_FLAG_LOST_CHARS;
 808677e:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
 8086780:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8086782:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8086784:	4419      	add	r1, r3
 8086786:	237e      	movs	r3, #126	; 0x7e
 8086788:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 808678a:	2331      	movs	r3, #49	; 0x31
 808678c:	738b      	strb	r3, [r1, #14]
 808678e:	e748      	b.n	8086622 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
 8086790:	2f0a      	cmp	r7, #10
 8086792:	d1e4      	bne.n	808675e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
 8086794:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
 8086796:	7b4b      	ldrb	r3, [r1, #13]
 8086798:	2b20      	cmp	r3, #32
 808679a:	f43f af41 	beq.w	8086620 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
 808679e:	2800      	cmp	r0, #0
 80867a0:	d0ed      	beq.n	808677e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 80867a2:	ea1a 0f09 	tst.w	sl, r9
 80867a6:	bf18      	it	ne
 80867a8:	f04f 0902 	movne.w	r9, #2
 80867ac:	f881 9000 	strb.w	r9, [r1]
 80867b0:	e737      	b.n	8086622 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
 80867b2:	42ba      	cmp	r2, r7
 80867b4:	d8ec      	bhi.n	8086790 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
 80867b6:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
 80867b8:	2000      	movs	r0, #0
 80867ba:	e7c3      	b.n	8086744 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
 80867bc:	31000101 	.word	0x31000101

080867c0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 80867c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80867c4:	4606      	mov	r6, r0
 80867c6:	460c      	mov	r4, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 80867c8:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80867ca:	277e      	movs	r7, #126	; 0x7e
  uint8_t pos = fname->seqPos;;
 80867cc:	f891 900c 	ldrb.w	r9, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80867d0:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 80867d4:	6861      	ldr	r1, [r4, #4]
 80867d6:	68a2      	ldr	r2, [r4, #8]
 80867d8:	186b      	adds	r3, r5, r1
 80867da:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 80867dc:	4411      	add	r1, r2
 80867de:	4291      	cmp	r1, r2
 80867e0:	d006      	beq.n	80867f0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
 80867e2:	f812 0b01 	ldrb.w	r0, [r2], #1
 80867e6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80867ea:	4043      	eors	r3, r0
 80867ec:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 80867ee:	e7f6      	b.n	80867de <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
 80867f0:	f1b9 0f03 	cmp.w	r9, #3
 80867f4:	bf28      	it	cs
 80867f6:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80867fa:	f109 0204 	add.w	r2, r9, #4
 80867fe:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8086800:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8086804:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8086806:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8086808:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808680a:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 808680c:	bf94      	ite	ls
 808680e:	3130      	addls	r1, #48	; 0x30
 8086810:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8086812:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8086814:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8086816:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808681a:	d1f1      	bne.n	8086800 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
 808681c:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
 8086820:	2100      	movs	r1, #0
 8086822:	4630      	mov	r0, r6
 8086824:	735f      	strb	r7, [r3, #13]
 8086826:	f000 fe96 	bl	8087556 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 808682a:	2101      	movs	r1, #1
 808682c:	4630      	mov	r0, r6
 808682e:	f000 fe73 	bl	8087518 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8086832:	4601      	mov	r1, r0
 8086834:	b928      	cbnz	r0, 8086842 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8086836:	7870      	ldrb	r0, [r6, #1]
 8086838:	fab0 f080 	clz	r0, r0
 808683c:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 808683e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
 8086842:	7803      	ldrb	r3, [r0, #0]
 8086844:	b16b      	cbz	r3, 8086862 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8086846:	7ac3      	ldrb	r3, [r0, #11]
 8086848:	071b      	lsls	r3, r3, #28
 808684a:	d4ee      	bmi.n	808682a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 808684c:	220b      	movs	r2, #11
 808684e:	4640      	mov	r0, r8
 8086850:	f005 fb56 	bl	808bf00 <memcmp>
 8086854:	2800      	cmp	r0, #0
 8086856:	d1e8      	bne.n	808682a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
 8086858:	3501      	adds	r5, #1
 808685a:	b2ad      	uxth	r5, r5
 808685c:	2d64      	cmp	r5, #100	; 0x64
 808685e:	d1b9      	bne.n	80867d4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 8086860:	e7ed      	b.n	808683e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
 8086862:	2001      	movs	r0, #1
 8086864:	e7eb      	b.n	808683e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

08086868 <_ZN7FatFile4openEPS_P7fname_th>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8086868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808686c:	b089      	sub	sp, #36	; 0x24
 808686e:	9304      	str	r3, [sp, #16]
  if (!dirFile->isDir() || isOpen()) {
 8086870:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8086872:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 8086874:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8086878:	4690      	mov	r8, r2
 808687a:	9005      	str	r0, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
 808687c:	d103      	bne.n	8086886 <_ZN7FatFile4openEPS_P7fname_th+0x1e>
  return false;
 808687e:	2000      	movs	r0, #0
}
 8086880:	b009      	add	sp, #36	; 0x24
 8086882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
 8086886:	9b05      	ldr	r3, [sp, #20]
 8086888:	781b      	ldrb	r3, [r3, #0]
 808688a:	2b00      	cmp	r3, #0
 808688c:	d1f7      	bne.n	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  size_t len = fname->len;
 808688e:	6853      	ldr	r3, [r2, #4]
 8086890:	4628      	mov	r0, r5
 8086892:	9303      	str	r3, [sp, #12]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8086894:	7813      	ldrb	r3, [r2, #0]
 8086896:	0799      	lsls	r1, r3, #30
 8086898:	bf18      	it	ne
 808689a:	9b03      	ldrne	r3, [sp, #12]
 808689c:	f04f 0100 	mov.w	r1, #0
 80868a0:	bf1f      	itttt	ne
 80868a2:	f103 070c 	addne.w	r7, r3, #12
 80868a6:	230d      	movne	r3, #13
 80868a8:	fbb7 f7f3 	udivne	r7, r7, r3
 80868ac:	3701      	addne	r7, #1
 80868ae:	bf0c      	ite	eq
 80868b0:	2701      	moveq	r7, #1
 80868b2:	b2ff      	uxtbne	r7, r7
 80868b4:	f000 fe4f 	bl	8087556 <_ZN7FatFile7seekSetEm>
  }
 80868b8:	2300      	movs	r3, #0
 80868ba:	469b      	mov	fp, r3
 80868bc:	461c      	mov	r4, r3
 80868be:	461e      	mov	r6, r3
 80868c0:	469a      	mov	sl, r3
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80868c2:	f108 020d 	add.w	r2, r8, #13
 80868c6:	9302      	str	r3, [sp, #8]
 80868c8:	9207      	str	r2, [sp, #28]
    curIndex = dirFile->m_curPosition/32;
 80868ca:	696a      	ldr	r2, [r5, #20]
    dir = dirFile->readDirCache(true);
 80868cc:	2101      	movs	r1, #1
 80868ce:	4628      	mov	r0, r5
 80868d0:	9306      	str	r3, [sp, #24]
    curIndex = dirFile->m_curPosition/32;
 80868d2:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
 80868d6:	f000 fe1f 	bl	8087518 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80868da:	9b06      	ldr	r3, [sp, #24]
 80868dc:	2800      	cmp	r0, #0
 80868de:	d16c      	bne.n	80869ba <_ZN7FatFile4openEPS_P7fname_th+0x152>
      if (dirFile->getError()) {
 80868e0:	786b      	ldrb	r3, [r5, #1]
 80868e2:	2b00      	cmp	r3, #0
 80868e4:	d1cb      	bne.n	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 80868e6:	9b04      	ldr	r3, [sp, #16]
 80868e8:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80868ec:	2b42      	cmp	r3, #66	; 0x42
 80868ee:	d1c6      	bne.n	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (freeFound == 0) {
 80868f0:	9b02      	ldr	r3, [sp, #8]
 80868f2:	2c00      	cmp	r4, #0
 80868f4:	bf08      	it	eq
 80868f6:	464b      	moveq	r3, r9
 80868f8:	9302      	str	r3, [sp, #8]
  while (freeFound < freeNeed) {
 80868fa:	42bc      	cmp	r4, r7
 80868fc:	f0c0 8103 	bcc.w	8086b06 <_ZN7FatFile4openEPS_P7fname_th+0x29e>
  if (fnameFound) {
 8086900:	f1ba 0f00 	cmp.w	sl, #0
 8086904:	f040 811b 	bne.w	8086b3e <_ZN7FatFile4openEPS_P7fname_th+0x2d6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8086908:	9b02      	ldr	r3, [sp, #8]
 808690a:	4628      	mov	r0, r5
 808690c:	0159      	lsls	r1, r3, #5
 808690e:	f000 fe22 	bl	8087556 <_ZN7FatFile7seekSetEm>
 8086912:	2800      	cmp	r0, #0
 8086914:	d0b3      	beq.n	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  lfnOrd = freeNeed - 1;
 8086916:	3f01      	subs	r7, #1
 8086918:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 808691c:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808691e:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
 8086922:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8086924:	2e00      	cmp	r6, #0
 8086926:	f000 8121 	beq.w	8086b6c <_ZN7FatFile4openEPS_P7fname_th+0x304>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808692a:	2100      	movs	r1, #0
 808692c:	4628      	mov	r0, r5
 808692e:	f000 fdf3 	bl	8087518 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8086932:	4604      	mov	r4, r0
 8086934:	2800      	cmp	r0, #0
 8086936:	d0a2      	beq.n	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8086938:	4556      	cmp	r6, sl
 808693a:	bf18      	it	ne
 808693c:	46b3      	movne	fp, r6
    dirFile->m_vol->cacheDirty();
 808693e:	68aa      	ldr	r2, [r5, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8086940:	bf08      	it	eq
 8086942:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
    m_status |= CACHE_STATUS_DIRTY;
 8086946:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 808694a:	f043 0301 	orr.w	r3, r3, #1
 808694e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8086952:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8086956:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
 8086958:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 808695c:	f108 000d 	add.w	r0, r8, #13
 8086960:	f7ff fe3f 	bl	80865e2 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8086964:	220d      	movs	r2, #13
 8086966:	2300      	movs	r3, #0
 8086968:	f00b 0b1f 	and.w	fp, fp, #31
 808696c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8086970:	fb02 f20b 	mul.w	r2, r2, fp
    ldir->chksum = lfnChecksum(fname->sfn);
 8086974:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
 8086976:	f884 901a 	strb.w	r9, [r4, #26]
 808697a:	f884 901b 	strb.w	r9, [r4, #27]
    lfnPutName(ldir, fname->lfn, len);
 808697e:	f8d8 c008 	ldr.w	ip, [r8, #8]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8086982:	9903      	ldr	r1, [sp, #12]
 8086984:	4291      	cmp	r1, r2
 8086986:	f240 80e2 	bls.w	8086b4e <_ZN7FatFile4openEPS_P7fname_th+0x2e6>
 808698a:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
 808698e:	2b04      	cmp	r3, #4
 8086990:	fa5f fe83 	uxtb.w	lr, r3
 8086994:	f103 0001 	add.w	r0, r3, #1
 8086998:	f200 80df 	bhi.w	8086b5a <_ZN7FatFile4openEPS_P7fname_th+0x2f2>
    ldir->name1[i] = c;
 808699c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80869a0:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
 80869a4:	280d      	cmp	r0, #13
 80869a6:	4603      	mov	r3, r0
 80869a8:	f102 0201 	add.w	r2, r2, #1
 80869ac:	d1e9      	bne.n	8086982 <_ZN7FatFile4openEPS_P7fname_th+0x11a>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80869ae:	3e01      	subs	r6, #1
 80869b0:	b2f6      	uxtb	r6, r6
 80869b2:	e7b7      	b.n	8086924 <_ZN7FatFile4openEPS_P7fname_th+0xbc>
        fnameFound = true;
 80869b4:	f04f 0a01 	mov.w	sl, #1
 80869b8:	e787      	b.n	80868ca <_ZN7FatFile4openEPS_P7fname_th+0x62>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 80869ba:	7802      	ldrb	r2, [r0, #0]
 80869bc:	2ae5      	cmp	r2, #229	; 0xe5
 80869be:	d000      	beq.n	80869c2 <_ZN7FatFile4openEPS_P7fname_th+0x15a>
 80869c0:	b97a      	cbnz	r2, 80869e2 <_ZN7FatFile4openEPS_P7fname_th+0x17a>
    curIndex = dirFile->m_curPosition/32;
 80869c2:	9902      	ldr	r1, [sp, #8]
 80869c4:	2c00      	cmp	r4, #0
 80869c6:	bf08      	it	eq
 80869c8:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
 80869ca:	42bc      	cmp	r4, r7
        freeFound++;
 80869cc:	bf38      	it	cc
 80869ce:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
 80869d0:	9102      	str	r1, [sp, #8]
        freeFound++;
 80869d2:	bf38      	it	cc
 80869d4:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
 80869d6:	2a00      	cmp	r2, #0
 80869d8:	d085      	beq.n	80868e6 <_ZN7FatFile4openEPS_P7fname_th+0x7e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80869da:	2ae5      	cmp	r2, #229	; 0xe5
 80869dc:	d104      	bne.n	80869e8 <_ZN7FatFile4openEPS_P7fname_th+0x180>
      lfnOrd = 0;
 80869de:	2600      	movs	r6, #0
 80869e0:	e773      	b.n	80868ca <_ZN7FatFile4openEPS_P7fname_th+0x62>
        freeFound = 0;
 80869e2:	42bc      	cmp	r4, r7
 80869e4:	bf38      	it	cc
 80869e6:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80869e8:	2a2e      	cmp	r2, #46	; 0x2e
 80869ea:	d0f8      	beq.n	80869de <_ZN7FatFile4openEPS_P7fname_th+0x176>
    } else if (DIR_IS_LONG_NAME(dir)) {
 80869ec:	7ac1      	ldrb	r1, [r0, #11]
 80869ee:	290f      	cmp	r1, #15
 80869f0:	d15d      	bne.n	8086aae <_ZN7FatFile4openEPS_P7fname_th+0x246>
      if (!lfnOrd) {
 80869f2:	bb3e      	cbnz	r6, 8086a44 <_ZN7FatFile4openEPS_P7fname_th+0x1dc>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80869f4:	f012 0640 	ands.w	r6, r2, #64	; 0x40
 80869f8:	f43f af67 	beq.w	80868ca <_ZN7FatFile4openEPS_P7fname_th+0x62>
        lfnOrd = ord = ldir->ord & 0X1F;
 80869fc:	f002 061f 	and.w	r6, r2, #31
 8086a00:	46b3      	mov	fp, r6
        chksum = ldir->chksum;
 8086a02:	7b43      	ldrb	r3, [r0, #13]
      size_t k = 13*(ord - 1);
 8086a04:	f04f 0e0d 	mov.w	lr, #13
 8086a08:	f10b 32ff 	add.w	r2, fp, #4294967295
 8086a0c:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
 8086a10:	9a03      	ldr	r2, [sp, #12]
 8086a12:	4572      	cmp	r2, lr
 8086a14:	d9e3      	bls.n	80869de <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8086a16:	f04f 0c00 	mov.w	ip, #0
 8086a1a:	eba2 020e 	sub.w	r2, r2, lr
 8086a1e:	9206      	str	r2, [sp, #24]
  if (i < LDIR_NAME1_DIM) {
 8086a20:	f1bc 0f04 	cmp.w	ip, #4
 8086a24:	eb0c 090e 	add.w	r9, ip, lr
 8086a28:	fa5f f28c 	uxtb.w	r2, ip
 8086a2c:	d814      	bhi.n	8086a58 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
    return ldir->name1[i];
 8086a2e:	eb00 024c 	add.w	r2, r0, ip, lsl #1
 8086a32:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
 8086a36:	9906      	ldr	r1, [sp, #24]
 8086a38:	458c      	cmp	ip, r1
 8086a3a:	d11b      	bne.n	8086a74 <_ZN7FatFile4openEPS_P7fname_th+0x20c>
            lfnOrd = 0;
 8086a3c:	2a00      	cmp	r2, #0
 8086a3e:	bf18      	it	ne
 8086a40:	2600      	movne	r6, #0
 8086a42:	e742      	b.n	80868ca <_ZN7FatFile4openEPS_P7fname_th+0x62>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8086a44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8086a48:	fa5f fb8b 	uxtb.w	fp, fp
 8086a4c:	455a      	cmp	r2, fp
 8086a4e:	d1c6      	bne.n	80869de <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8086a50:	7b42      	ldrb	r2, [r0, #13]
 8086a52:	429a      	cmp	r2, r3
 8086a54:	d0d6      	beq.n	8086a04 <_ZN7FatFile4openEPS_P7fname_th+0x19c>
 8086a56:	e7c2      	b.n	80869de <_ZN7FatFile4openEPS_P7fname_th+0x176>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8086a58:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8086a5a:	bf95      	itete	ls
 8086a5c:	f10c 32ff 	addls.w	r2, ip, #4294967295
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8086a60:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8086a64:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8086a68:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8086a6c:	bf94      	ite	ls
 8086a6e:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8086a70:	8892      	ldrhhi	r2, [r2, #4]
 8086a72:	e7e0      	b.n	8086a36 <_ZN7FatFile4openEPS_P7fname_th+0x1ce>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086a74:	2aff      	cmp	r2, #255	; 0xff
 8086a76:	d8b2      	bhi.n	80869de <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8086a78:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8086a7a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8086a7e:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086a80:	f8d8 1008 	ldr.w	r1, [r8, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8086a84:	bf98      	it	ls
 8086a86:	3220      	addls	r2, #32
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086a88:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8086a8c:	bf98      	it	ls
 8086a8e:	b2d2      	uxtbls	r2, r2
 8086a90:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
 8086a94:	f1b9 0f19 	cmp.w	r9, #25
 8086a98:	bf9c      	itt	ls
 8086a9a:	3120      	addls	r1, #32
 8086a9c:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086a9e:	4291      	cmp	r1, r2
 8086aa0:	d19d      	bne.n	80869de <_ZN7FatFile4openEPS_P7fname_th+0x176>
      for (uint8_t i = 0; i < 13; i++) {
 8086aa2:	f10c 0c01 	add.w	ip, ip, #1
 8086aa6:	f1bc 0f0d 	cmp.w	ip, #13
 8086aaa:	d1b9      	bne.n	8086a20 <_ZN7FatFile4openEPS_P7fname_th+0x1b8>
 8086aac:	e70d      	b.n	80868ca <_ZN7FatFile4openEPS_P7fname_th+0x62>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8086aae:	070a      	lsls	r2, r1, #28
 8086ab0:	d495      	bmi.n	80869de <_ZN7FatFile4openEPS_P7fname_th+0x176>
      if (lfnOrd) {
 8086ab2:	b166      	cbz	r6, 8086ace <_ZN7FatFile4openEPS_P7fname_th+0x266>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8086ab4:	f1bb 0f01 	cmp.w	fp, #1
 8086ab8:	9302      	str	r3, [sp, #8]
 8086aba:	f47f aee0 	bne.w	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8086abe:	f7ff fd90 	bl	80865e2 <_ZN7FatFile11lfnChecksumEPh>
 8086ac2:	9b02      	ldr	r3, [sp, #8]
 8086ac4:	4298      	cmp	r0, r3
 8086ac6:	f47f aeda 	bne.w	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8086aca:	46b2      	mov	sl, r6
 8086acc:	e00e      	b.n	8086aec <_ZN7FatFile4openEPS_P7fname_th+0x284>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8086ace:	220b      	movs	r2, #11
 8086ad0:	9907      	ldr	r1, [sp, #28]
 8086ad2:	9306      	str	r3, [sp, #24]
 8086ad4:	f005 fa14 	bl	808bf00 <memcmp>
 8086ad8:	9b06      	ldr	r3, [sp, #24]
 8086ada:	2800      	cmp	r0, #0
 8086adc:	f47f aef5 	bne.w	80868ca <_ZN7FatFile4openEPS_P7fname_th+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8086ae0:	f898 a000 	ldrb.w	sl, [r8]
 8086ae4:	f01a 0a01 	ands.w	sl, sl, #1
 8086ae8:	f47f af64 	bne.w	80869b4 <_ZN7FatFile4openEPS_P7fname_th+0x14c>
  if (oflag & O_EXCL) {
 8086aec:	9b04      	ldr	r3, [sp, #16]
 8086aee:	061b      	lsls	r3, r3, #24
 8086af0:	f53f aec5 	bmi.w	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8086af4:	464a      	mov	r2, r9
 8086af6:	4629      	mov	r1, r5
 8086af8:	9b04      	ldr	r3, [sp, #16]
 8086afa:	9805      	ldr	r0, [sp, #20]
 8086afc:	f8cd a000 	str.w	sl, [sp]
 8086b00:	f000 fd6c 	bl	80875dc <_ZN7FatFile15openCachedEntryEPS_thh>
 8086b04:	e6bc      	b.n	8086880 <_ZN7FatFile4openEPS_P7fname_th+0x18>
    dir = dirFile->readDirCache();
 8086b06:	2100      	movs	r1, #0
 8086b08:	4628      	mov	r0, r5
 8086b0a:	f000 fd05 	bl	8087518 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8086b0e:	b998      	cbnz	r0, 8086b38 <_ZN7FatFile4openEPS_P7fname_th+0x2d0>
      if (dirFile->getError()) {
 8086b10:	786b      	ldrb	r3, [r5, #1]
 8086b12:	2b00      	cmp	r3, #0
 8086b14:	f47f aeb3 	bne.w	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (!dirFile->addDirCluster()) {
 8086b18:	4628      	mov	r0, r5
 8086b1a:	f000 fbd5 	bl	80872c8 <_ZN7FatFile13addDirClusterEv>
 8086b1e:	2800      	cmp	r0, #0
 8086b20:	f43f aead 	beq.w	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8086b24:	68ab      	ldr	r3, [r5, #8]
 8086b26:	791b      	ldrb	r3, [r3, #4]
 8086b28:	2b01      	cmp	r3, #1
 8086b2a:	f63f aee9 	bhi.w	8086900 <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound += 16;
 8086b2e:	3410      	adds	r4, #16
 8086b30:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8086b32:	42a7      	cmp	r7, r4
 8086b34:	d8f0      	bhi.n	8086b18 <_ZN7FatFile4openEPS_P7fname_th+0x2b0>
 8086b36:	e6e3      	b.n	8086900 <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound++;
 8086b38:	3401      	adds	r4, #1
 8086b3a:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8086b3c:	e6dd      	b.n	80868fa <_ZN7FatFile4openEPS_P7fname_th+0x92>
    if (!dirFile->lfnUniqueSfn(fname)) {
 8086b3e:	4641      	mov	r1, r8
 8086b40:	4628      	mov	r0, r5
 8086b42:	f7ff fe3d 	bl	80867c0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8086b46:	2800      	cmp	r0, #0
 8086b48:	f47f aede 	bne.w	8086908 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8086b4c:	e697      	b.n	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8086b4e:	bf14      	ite	ne
 8086b50:	f04f 31ff 	movne.w	r1, #4294967295
 8086b54:	2100      	moveq	r1, #0
 8086b56:	b289      	uxth	r1, r1
 8086b58:	e719      	b.n	808698e <_ZN7FatFile4openEPS_P7fname_th+0x126>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8086b5a:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8086b5e:	bf94      	ite	ls
 8086b60:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8086b64:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
 8086b68:	8099      	strh	r1, [r3, #4]
 8086b6a:	e71b      	b.n	80869a4 <_ZN7FatFile4openEPS_P7fname_th+0x13c>
  dir = dirFile->readDirCache();
 8086b6c:	4631      	mov	r1, r6
 8086b6e:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
 8086b70:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
 8086b72:	f000 fcd1 	bl	8087518 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8086b76:	4604      	mov	r4, r0
 8086b78:	2800      	cmp	r0, #0
 8086b7a:	f43f ae80 	beq.w	808687e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  memset(dir, 0, sizeof(dir_t));
 8086b7e:	2220      	movs	r2, #32
 8086b80:	4631      	mov	r1, r6
 8086b82:	f005 f9d9 	bl	808bf38 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8086b86:	4643      	mov	r3, r8
 8086b88:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8086b8c:	6022      	str	r2, [r4, #0]
 8086b8e:	685a      	ldr	r2, [r3, #4]
 8086b90:	6062      	str	r2, [r4, #4]
 8086b92:	891a      	ldrh	r2, [r3, #8]
 8086b94:	8122      	strh	r2, [r4, #8]
 8086b96:	7a9b      	ldrb	r3, [r3, #10]
 8086b98:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8086b9a:	f898 3000 	ldrb.w	r3, [r8]
 8086b9e:	f003 0318 	and.w	r3, r3, #24
 8086ba2:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
 8086ba4:	4b0f      	ldr	r3, [pc, #60]	; (8086be4 <_ZN7FatFile4openEPS_P7fname_th+0x37c>)
 8086ba6:	681b      	ldr	r3, [r3, #0]
 8086ba8:	b19b      	cbz	r3, 8086bd2 <_ZN7FatFile4openEPS_P7fname_th+0x36a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8086baa:	f104 010e 	add.w	r1, r4, #14
 8086bae:	f104 0010 	add.w	r0, r4, #16
 8086bb2:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
 8086bb4:	8a23      	ldrh	r3, [r4, #16]
  curIndex = dirFile->m_curPosition/32;
 8086bb6:	f3c7 194f 	ubfx	r9, r7, #5, #16
  dir->lastAccessDate = dir->creationDate;
 8086bba:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
 8086bbc:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
 8086bbe:	89e3      	ldrh	r3, [r4, #14]
 8086bc0:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
 8086bc2:	68aa      	ldr	r2, [r5, #8]
 8086bc4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8086bc8:	f043 0301 	orr.w	r3, r3, #1
 8086bcc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
 8086bd0:	e790      	b.n	8086af4 <_ZN7FatFile4openEPS_P7fname_th+0x28c>
    dir->creationDate = FAT_DEFAULT_DATE;
 8086bd2:	2321      	movs	r3, #33	; 0x21
 8086bd4:	7423      	strb	r3, [r4, #16]
 8086bd6:	2328      	movs	r3, #40	; 0x28
 8086bd8:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8086bda:	2308      	movs	r3, #8
 8086bdc:	73a6      	strb	r6, [r4, #14]
 8086bde:	73e3      	strb	r3, [r4, #15]
 8086be0:	e7e8      	b.n	8086bb4 <_ZN7FatFile4openEPS_P7fname_th+0x34c>
 8086be2:	bf00      	nop
 8086be4:	20000cb8 	.word	0x20000cb8

08086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8086be8:	6803      	ldr	r3, [r0, #0]
 8086bea:	68db      	ldr	r3, [r3, #12]
 8086bec:	4718      	bx	r3

08086bee <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8086bee:	6803      	ldr	r3, [r0, #0]
 8086bf0:	695b      	ldr	r3, [r3, #20]
 8086bf2:	4718      	bx	r3

08086bf4 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8086bf4:	b510      	push	{r4, lr}
  if (!m_selected) {
 8086bf6:	7903      	ldrb	r3, [r0, #4]
void SdSpiCard::chipSelectHigh() {
 8086bf8:	4604      	mov	r4, r0
  if (!m_selected) {
 8086bfa:	b16b      	cbz	r3, 8086c18 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8086bfc:	2101      	movs	r1, #1
 8086bfe:	7940      	ldrb	r0, [r0, #5]
 8086c00:	f003 ff8f 	bl	808ab22 <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8086c04:	21ff      	movs	r1, #255	; 0xff
 8086c06:	6820      	ldr	r0, [r4, #0]
 8086c08:	f7ff fff1 	bl	8086bee <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiEndTransaction();
 8086c0c:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8086c0e:	6803      	ldr	r3, [r0, #0]
 8086c10:	689b      	ldr	r3, [r3, #8]
 8086c12:	4798      	blx	r3
  m_selected = false;
 8086c14:	2300      	movs	r3, #0
 8086c16:	7123      	strb	r3, [r4, #4]
}
 8086c18:	bd10      	pop	{r4, pc}

08086c1a <_ZN9SdSpiCard13chipSelectLowEv>:
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8086c1a:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8086c1c:	7905      	ldrb	r5, [r0, #4]
void SdSpiCard::chipSelectLow() {
 8086c1e:	4604      	mov	r4, r0
  if (m_selected) {
 8086c20:	b955      	cbnz	r5, 8086c38 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
 8086c22:	6800      	ldr	r0, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8086c24:	79e1      	ldrb	r1, [r4, #7]
 8086c26:	6803      	ldr	r3, [r0, #0]
 8086c28:	685b      	ldr	r3, [r3, #4]
 8086c2a:	4798      	blx	r3
  digitalWrite(m_chipSelectPin, LOW);
 8086c2c:	4629      	mov	r1, r5
 8086c2e:	7960      	ldrb	r0, [r4, #5]
 8086c30:	f003 ff77 	bl	808ab22 <digitalWrite>
  m_selected = true;
 8086c34:	2301      	movs	r3, #1
 8086c36:	7123      	strb	r3, [r4, #4]
}
 8086c38:	bd38      	pop	{r3, r4, r5, pc}

08086c3a <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8086c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086c3c:	4604      	mov	r4, r0
 8086c3e:	460d      	mov	r5, r1
 8086c40:	4616      	mov	r6, r2
 8086c42:	f001 fc15 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
 8086c46:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8086c48:	6820      	ldr	r0, [r4, #0]
 8086c4a:	f7ff ffcd 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086c4e:	28ff      	cmp	r0, #255	; 0xff
 8086c50:	7220      	strb	r0, [r4, #8]
 8086c52:	d10c      	bne.n	8086c6e <_ZN9SdSpiCard8readDataEPhj+0x34>
 8086c54:	f001 fc0c 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8086c58:	1bc3      	subs	r3, r0, r7
 8086c5a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8086c5e:	d9f3      	bls.n	8086c48 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 8086c60:	2311      	movs	r3, #17
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8086c62:	4620      	mov	r0, r4
 8086c64:	71a3      	strb	r3, [r4, #6]
 8086c66:	f7ff ffc5 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086c6a:	2000      	movs	r0, #0
}
 8086c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 8086c6e:	28fe      	cmp	r0, #254	; 0xfe
 8086c70:	d001      	beq.n	8086c76 <_ZN9SdSpiCard8readDataEPhj+0x3c>
 8086c72:	230f      	movs	r3, #15
 8086c74:	e7f5      	b.n	8086c62 <_ZN9SdSpiCard8readDataEPhj+0x28>
  if ((m_status = spiReceive(dst, count))) {
 8086c76:	6820      	ldr	r0, [r4, #0]
    return m_spi->receive(buf, n);
 8086c78:	4632      	mov	r2, r6
 8086c7a:	6803      	ldr	r3, [r0, #0]
 8086c7c:	4629      	mov	r1, r5
 8086c7e:	691b      	ldr	r3, [r3, #16]
 8086c80:	4798      	blx	r3
 8086c82:	7220      	strb	r0, [r4, #8]
 8086c84:	b108      	cbz	r0, 8086c8a <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 8086c86:	231c      	movs	r3, #28
 8086c88:	e7eb      	b.n	8086c62 <_ZN9SdSpiCard8readDataEPhj+0x28>
  spiReceive();
 8086c8a:	6820      	ldr	r0, [r4, #0]
 8086c8c:	f7ff ffac 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
 8086c90:	6820      	ldr	r0, [r4, #0]
 8086c92:	f7ff ffa9 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086c96:	2001      	movs	r0, #1
 8086c98:	e7e8      	b.n	8086c6c <_ZN9SdSpiCard8readDataEPhj+0x32>

08086c9a <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8086c9a:	b570      	push	{r4, r5, r6, lr}
 8086c9c:	4606      	mov	r6, r0
 8086c9e:	460c      	mov	r4, r1
 8086ca0:	f001 fbe6 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
 8086ca4:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8086ca6:	6830      	ldr	r0, [r6, #0]
 8086ca8:	f7ff ff9e 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086cac:	28ff      	cmp	r0, #255	; 0xff
 8086cae:	d006      	beq.n	8086cbe <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8086cb0:	f001 fbde 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8086cb4:	1b43      	subs	r3, r0, r5
 8086cb6:	42a3      	cmp	r3, r4
 8086cb8:	d3f5      	bcc.n	8086ca6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8086cba:	2000      	movs	r0, #0
}
 8086cbc:	bd70      	pop	{r4, r5, r6, pc}
  return true;
 8086cbe:	2001      	movs	r0, #1
 8086cc0:	e7fc      	b.n	8086cbc <_ZN9SdSpiCard11waitNotBusyEt+0x22>

08086cc2 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8086cc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_selected) {
 8086cc4:	7903      	ldrb	r3, [r0, #4]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8086cc6:	4604      	mov	r4, r0
 8086cc8:	460d      	mov	r5, r1
 8086cca:	9201      	str	r2, [sp, #4]
  if (!m_selected) {
 8086ccc:	b90b      	cbnz	r3, 8086cd2 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8086cce:	f7ff ffa4 	bl	8086c1a <_ZN9SdSpiCard13chipSelectLowEv>
  waitNotBusy(SD_WRITE_TIMEOUT);
 8086cd2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086cd6:	4620      	mov	r0, r4
 8086cd8:	f7ff ffdf 	bl	8086c9a <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
 8086cdc:	6820      	ldr	r0, [r4, #0]
 8086cde:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8086ce2:	f7ff ff84 	bl	8086bee <_ZN9SdSpiCard7spiSendEh.isra.0>
 8086ce6:	2603      	movs	r6, #3
    spiSend(pa[i]);
 8086ce8:	af01      	add	r7, sp, #4
 8086cea:	5db9      	ldrb	r1, [r7, r6]
 8086cec:	6820      	ldr	r0, [r4, #0]
 8086cee:	f7ff ff7e 	bl	8086bee <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
 8086cf2:	3e01      	subs	r6, #1
 8086cf4:	d2f9      	bcs.n	8086cea <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8086cf6:	2d00      	cmp	r5, #0
 8086cf8:	bf0c      	ite	eq
 8086cfa:	2195      	moveq	r1, #149	; 0x95
 8086cfc:	2187      	movne	r1, #135	; 0x87
 8086cfe:	6820      	ldr	r0, [r4, #0]
 8086d00:	f7ff ff75 	bl	8086bee <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (cmd == CMD12) {
 8086d04:	2d0c      	cmp	r5, #12
 8086d06:	d102      	bne.n	8086d0e <_ZN9SdSpiCard11cardCommandEhm+0x4c>
    spiReceive();
 8086d08:	6820      	ldr	r0, [r4, #0]
 8086d0a:	f7ff ff6d 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8086d0e:	2500      	movs	r5, #0
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8086d10:	6820      	ldr	r0, [r4, #0]
 8086d12:	f7ff ff69 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086d16:	0603      	lsls	r3, r0, #24
 8086d18:	7220      	strb	r0, [r4, #8]
 8086d1a:	d503      	bpl.n	8086d24 <_ZN9SdSpiCard11cardCommandEhm+0x62>
 8086d1c:	3501      	adds	r5, #1
 8086d1e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8086d22:	d1f5      	bne.n	8086d10 <_ZN9SdSpiCard11cardCommandEhm+0x4e>
}
 8086d24:	b003      	add	sp, #12
 8086d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086d28 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8086d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086d2a:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8086d2c:	2300      	movs	r3, #0
  m_chipSelectPin = chipSelectPin;
 8086d2e:	7142      	strb	r2, [r0, #5]
  m_errorCode = m_type = 0;
 8086d30:	7243      	strb	r3, [r0, #9]
 8086d32:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8086d34:	6001      	str	r1, [r0, #0]
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8086d36:	4604      	mov	r4, r0
 8086d38:	f001 fb9a 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
 8086d3c:	4605      	mov	r5, r0
  spiBegin(m_chipSelectPin);
 8086d3e:	6820      	ldr	r0, [r4, #0]
    m_spi->begin(chipSelectPin);
 8086d40:	7961      	ldrb	r1, [r4, #5]
 8086d42:	6803      	ldr	r3, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8086d44:	260a      	movs	r6, #10
    m_spi->begin(chipSelectPin);
 8086d46:	681b      	ldr	r3, [r3, #0]
 8086d48:	4798      	blx	r3
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8086d4a:	2180      	movs	r1, #128	; 0x80
  spiBeginTransaction(m_sckDivisor);
 8086d4c:	6820      	ldr	r0, [r4, #0]
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8086d4e:	71e1      	strb	r1, [r4, #7]
    m_spi->beginTransaction(spiDivisor);
 8086d50:	6803      	ldr	r3, [r0, #0]
 8086d52:	685b      	ldr	r3, [r3, #4]
 8086d54:	4798      	blx	r3
    spiSend(0XFF);
 8086d56:	21ff      	movs	r1, #255	; 0xff
 8086d58:	6820      	ldr	r0, [r4, #0]
 8086d5a:	3e01      	subs	r6, #1
 8086d5c:	f7ff ff47 	bl	8086bee <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
 8086d60:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8086d64:	d1f7      	bne.n	8086d56 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
  spiEndTransaction();
 8086d66:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8086d68:	6803      	ldr	r3, [r0, #0]
 8086d6a:	689b      	ldr	r3, [r3, #8]
 8086d6c:	4798      	blx	r3
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 8086d6e:	2200      	movs	r2, #0
 8086d70:	4620      	mov	r0, r4
 8086d72:	4611      	mov	r1, r2
 8086d74:	f7ff ffa5 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
 8086d78:	2801      	cmp	r0, #1
 8086d7a:	d00c      	beq.n	8086d96 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
 8086d7c:	f001 fb78 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8086d80:	1b40      	subs	r0, r0, r5
 8086d82:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8086d86:	d9f2      	bls.n	8086d6e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
    m_errorCode = code;
 8086d88:	2301      	movs	r3, #1
  chipSelectHigh();
 8086d8a:	4620      	mov	r0, r4
 8086d8c:	71a3      	strb	r3, [r4, #6]
 8086d8e:	f7ff ff31 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086d92:	2000      	movs	r0, #0
}
 8086d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8086d96:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8086d9a:	2108      	movs	r1, #8
 8086d9c:	4620      	mov	r0, r4
 8086d9e:	f7ff ff90 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
 8086da2:	2805      	cmp	r0, #5
 8086da4:	d116      	bne.n	8086dd4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xac>
    m_type = value;
 8086da6:	2301      	movs	r3, #1
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8086da8:	2600      	movs	r6, #0
 8086daa:	7263      	strb	r3, [r4, #9]
    cardCommand(CMD55, 0);
 8086dac:	2200      	movs	r2, #0
 8086dae:	2137      	movs	r1, #55	; 0x37
 8086db0:	4620      	mov	r0, r4
 8086db2:	f7ff ff86 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8086db6:	4632      	mov	r2, r6
 8086db8:	2129      	movs	r1, #41	; 0x29
 8086dba:	4620      	mov	r0, r4
 8086dbc:	f7ff ff81 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8086dc0:	4602      	mov	r2, r0
 8086dc2:	b1f8      	cbz	r0, 8086e04 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xdc>
 8086dc4:	f001 fb54 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8086dc8:	1b40      	subs	r0, r0, r5
 8086dca:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8086dce:	d9ed      	bls.n	8086dac <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
    m_errorCode = code;
 8086dd0:	230a      	movs	r3, #10
 8086dd2:	e7da      	b.n	8086d8a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
 8086dd4:	2604      	movs	r6, #4
      m_status = spiReceive();
 8086dd6:	6820      	ldr	r0, [r4, #0]
 8086dd8:	f7ff ff06 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086ddc:	3e01      	subs	r6, #1
    for (uint8_t i = 0; i < 4; i++) {
 8086dde:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      m_status = spiReceive();
 8086de2:	7220      	strb	r0, [r4, #8]
    for (uint8_t i = 0; i < 4; i++) {
 8086de4:	d1f7      	bne.n	8086dd6 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xae>
    if (m_status == 0XAA) {
 8086de6:	28aa      	cmp	r0, #170	; 0xaa
 8086de8:	d104      	bne.n	8086df4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xcc>
    m_type = value;
 8086dea:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8086dec:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8086df0:	7263      	strb	r3, [r4, #9]
    return m_type;
 8086df2:	e7db      	b.n	8086dac <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
 8086df4:	f001 fb3c 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8086df8:	1b40      	subs	r0, r0, r5
 8086dfa:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8086dfe:	d9ca      	bls.n	8086d96 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
    m_errorCode = code;
 8086e00:	2302      	movs	r3, #2
 8086e02:	e7c2      	b.n	8086d8a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
  if (type() == SD_CARD_TYPE_SD2) {
 8086e04:	7a63      	ldrb	r3, [r4, #9]
 8086e06:	2b02      	cmp	r3, #2
 8086e08:	d119      	bne.n	8086e3e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x116>
    if (cardCommand(CMD58, 0)) {
 8086e0a:	213a      	movs	r1, #58	; 0x3a
 8086e0c:	4620      	mov	r0, r4
 8086e0e:	f7ff ff58 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
 8086e12:	b108      	cbz	r0, 8086e18 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf0>
 8086e14:	2308      	movs	r3, #8
 8086e16:	e7b8      	b.n	8086d8a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
    if ((spiReceive() & 0XC0) == 0XC0) {
 8086e18:	6820      	ldr	r0, [r4, #0]
 8086e1a:	f7ff fee5 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086e1e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8086e22:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 8086e24:	bf08      	it	eq
 8086e26:	2303      	moveq	r3, #3
      spiReceive();
 8086e28:	6820      	ldr	r0, [r4, #0]
 8086e2a:	bf08      	it	eq
 8086e2c:	7263      	strbeq	r3, [r4, #9]
 8086e2e:	f7ff fedb 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086e32:	6820      	ldr	r0, [r4, #0]
 8086e34:	f7ff fed8 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086e38:	6820      	ldr	r0, [r4, #0]
 8086e3a:	f7ff fed5 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  chipSelectHigh();
 8086e3e:	4620      	mov	r0, r4
 8086e40:	f7ff fed8 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086e44:	2001      	movs	r0, #1
  m_sckDivisor = sckDivisor;
 8086e46:	71e7      	strb	r7, [r4, #7]
  return true;
 8086e48:	e7a4      	b.n	8086d94 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6c>

08086e4a <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8086e4a:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8086e4c:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8086e4e:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8086e50:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086e52:	bf18      	it	ne
 8086e54:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 8086e56:	460a      	mov	r2, r1
 8086e58:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8086e5a:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 8086e5c:	f7ff ff31 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
 8086e60:	b130      	cbz	r0, 8086e70 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 8086e62:	2304      	movs	r3, #4
 8086e64:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8086e66:	4620      	mov	r0, r4
 8086e68:	f7ff fec4 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086e6c:	2500      	movs	r5, #0
 8086e6e:	e00b      	b.n	8086e88 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 8086e70:	4629      	mov	r1, r5
 8086e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086e76:	4620      	mov	r0, r4
 8086e78:	f7ff fedf 	bl	8086c3a <_ZN9SdSpiCard8readDataEPhj>
 8086e7c:	4605      	mov	r5, r0
 8086e7e:	2800      	cmp	r0, #0
 8086e80:	d0f1      	beq.n	8086e66 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  chipSelectHigh();
 8086e82:	4620      	mov	r0, r4
 8086e84:	f7ff feb6 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8086e88:	4628      	mov	r0, r5
 8086e8a:	bd38      	pop	{r3, r4, r5, pc}

08086e8c <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8086e8c:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8086e8e:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8086e90:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 8086e92:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086e94:	bf18      	it	ne
 8086e96:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
 8086e98:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8086e9a:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
 8086e9c:	f7ff ff11 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
 8086ea0:	b130      	cbz	r0, 8086eb0 <_ZN9SdSpiCard9readStartEm+0x24>
 8086ea2:	2305      	movs	r3, #5
  chipSelectHigh();
 8086ea4:	4620      	mov	r0, r4
 8086ea6:	71a3      	strb	r3, [r4, #6]
 8086ea8:	f7ff fea4 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086eac:	2000      	movs	r0, #0
}
 8086eae:	bd10      	pop	{r4, pc}
  return true;
 8086eb0:	2001      	movs	r0, #1
 8086eb2:	e7fc      	b.n	8086eae <_ZN9SdSpiCard9readStartEm+0x22>

08086eb4 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 8086eb4:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8086eb6:	2200      	movs	r2, #0
 8086eb8:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
 8086eba:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8086ebc:	f7ff ff01 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
 8086ec0:	b130      	cbz	r0, 8086ed0 <_ZN9SdSpiCard8readStopEv+0x1c>
 8086ec2:	2303      	movs	r3, #3
  chipSelectHigh();
 8086ec4:	4620      	mov	r0, r4
 8086ec6:	71a3      	strb	r3, [r4, #6]
 8086ec8:	f7ff fe94 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086ecc:	2000      	movs	r0, #0
}
 8086ece:	bd10      	pop	{r4, pc}
  chipSelectHigh();
 8086ed0:	4620      	mov	r0, r4
 8086ed2:	f7ff fe8f 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086ed6:	2001      	movs	r0, #1
 8086ed8:	e7f9      	b.n	8086ece <_ZN9SdSpiCard8readStopEv+0x1a>

08086eda <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8086eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086edc:	4604      	mov	r4, r0
 8086ede:	4616      	mov	r6, r2
 8086ee0:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8086ee2:	f7ff ffd3 	bl	8086e8c <_ZN9SdSpiCard9readStartEm>
 8086ee6:	b168      	cbz	r0, 8086f04 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
 8086ee8:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8086eea:	b2ab      	uxth	r3, r5
 8086eec:	42bb      	cmp	r3, r7
 8086eee:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 8086ef2:	d209      	bcs.n	8086f08 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
 8086ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086ef8:	4620      	mov	r0, r4
 8086efa:	f7ff fe9e 	bl	8086c3a <_ZN9SdSpiCard8readDataEPhj>
 8086efe:	3501      	adds	r5, #1
 8086f00:	2800      	cmp	r0, #0
 8086f02:	d1f2      	bne.n	8086eea <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
 8086f04:	2000      	movs	r0, #0
 8086f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
 8086f08:	4620      	mov	r0, r4
}
 8086f0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
 8086f0e:	f7ff bfd1 	b.w	8086eb4 <_ZN9SdSpiCard8readStopEv>

08086f12 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8086f12:	b538      	push	{r3, r4, r5, lr}
 8086f14:	4604      	mov	r4, r0
 8086f16:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8086f18:	6800      	ldr	r0, [r0, #0]
 8086f1a:	f7ff fe68 	bl	8086bee <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(src, 512);
 8086f1e:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8086f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086f24:	6803      	ldr	r3, [r0, #0]
 8086f26:	4629      	mov	r1, r5
 8086f28:	699b      	ldr	r3, [r3, #24]
 8086f2a:	4798      	blx	r3
  spiSend(crc >> 8);
 8086f2c:	21ff      	movs	r1, #255	; 0xff
 8086f2e:	6820      	ldr	r0, [r4, #0]
 8086f30:	f7ff fe5d 	bl	8086bee <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
 8086f34:	21ff      	movs	r1, #255	; 0xff
 8086f36:	6820      	ldr	r0, [r4, #0]
 8086f38:	f7ff fe59 	bl	8086bee <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
 8086f3c:	6820      	ldr	r0, [r4, #0]
 8086f3e:	f7ff fe53 	bl	8086be8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086f42:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8086f44:	f000 001f 	and.w	r0, r0, #31
 8086f48:	2805      	cmp	r0, #5
 8086f4a:	d006      	beq.n	8086f5a <_ZN9SdSpiCard9writeDataEhPKh+0x48>
    m_errorCode = code;
 8086f4c:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8086f4e:	4620      	mov	r0, r4
 8086f50:	71a3      	strb	r3, [r4, #6]
 8086f52:	f7ff fe4f 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086f56:	2000      	movs	r0, #0
}
 8086f58:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 8086f5a:	2001      	movs	r0, #1
 8086f5c:	e7fc      	b.n	8086f58 <_ZN9SdSpiCard9writeDataEhPKh+0x46>

08086f5e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086f5e:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8086f60:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086f62:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8086f64:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086f66:	bf18      	it	ne
 8086f68:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 8086f6a:	460a      	mov	r2, r1
 8086f6c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086f6e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 8086f70:	f7ff fea7 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
 8086f74:	b130      	cbz	r0, 8086f84 <_ZN9SdSpiCard10writeBlockEmPKh+0x26>
 8086f76:	2306      	movs	r3, #6
 8086f78:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8086f7a:	4620      	mov	r0, r4
 8086f7c:	f7ff fe3a 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086f80:	2500      	movs	r5, #0
 8086f82:	e00a      	b.n	8086f9a <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
  if (!writeData(DATA_START_BLOCK, src)) {
 8086f84:	462a      	mov	r2, r5
 8086f86:	21fe      	movs	r1, #254	; 0xfe
 8086f88:	4620      	mov	r0, r4
 8086f8a:	f7ff ffc2 	bl	8086f12 <_ZN9SdSpiCard9writeDataEhPKh>
 8086f8e:	4605      	mov	r5, r0
 8086f90:	2800      	cmp	r0, #0
 8086f92:	d0f2      	beq.n	8086f7a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  chipSelectHigh();
 8086f94:	4620      	mov	r0, r4
 8086f96:	f7ff fe2d 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8086f9a:	4628      	mov	r0, r5
 8086f9c:	bd38      	pop	{r3, r4, r5, pc}

08086f9e <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 8086f9e:	b570      	push	{r4, r5, r6, lr}
 8086fa0:	4604      	mov	r4, r0
 8086fa2:	460e      	mov	r6, r1
  bool selected = m_selected;
 8086fa4:	7905      	ldrb	r5, [r0, #4]
  chipSelectLow();
 8086fa6:	f7ff fe38 	bl	8086c1a <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8086faa:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086fae:	4620      	mov	r0, r4
 8086fb0:	f7ff fe73 	bl	8086c9a <_ZN9SdSpiCard11waitNotBusyEt>
 8086fb4:	b930      	cbnz	r0, 8086fc4 <_ZN9SdSpiCard9writeDataEPKh+0x26>
 8086fb6:	2317      	movs	r3, #23
 8086fb8:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8086fba:	4620      	mov	r0, r4
 8086fbc:	f7ff fe1a 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086fc0:	2500      	movs	r5, #0
 8086fc2:	e00c      	b.n	8086fde <_ZN9SdSpiCard9writeDataEPKh+0x40>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8086fc4:	4632      	mov	r2, r6
 8086fc6:	21fc      	movs	r1, #252	; 0xfc
 8086fc8:	4620      	mov	r0, r4
 8086fca:	f7ff ffa2 	bl	8086f12 <_ZN9SdSpiCard9writeDataEhPKh>
 8086fce:	4606      	mov	r6, r0
 8086fd0:	2800      	cmp	r0, #0
 8086fd2:	d0f2      	beq.n	8086fba <_ZN9SdSpiCard9writeDataEPKh+0x1c>
  if (!selected) {
 8086fd4:	b91d      	cbnz	r5, 8086fde <_ZN9SdSpiCard9writeDataEPKh+0x40>
    chipSelectHigh();
 8086fd6:	4620      	mov	r0, r4
 8086fd8:	f7ff fe0c 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086fdc:	4635      	mov	r5, r6
}
 8086fde:	4628      	mov	r0, r5
 8086fe0:	bd70      	pop	{r4, r5, r6, pc}

08086fe2 <_ZN9SdSpiCard10writeStartEmm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 8086fe2:	b570      	push	{r4, r5, r6, lr}
 8086fe4:	4604      	mov	r4, r0
 8086fe6:	4616      	mov	r6, r2
 8086fe8:	460d      	mov	r5, r1
    cardCommand(CMD55, 0);
 8086fea:	2200      	movs	r2, #0
 8086fec:	2137      	movs	r1, #55	; 0x37
 8086fee:	f7ff fe68 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8086ff2:	4632      	mov	r2, r6
 8086ff4:	2117      	movs	r1, #23
 8086ff6:	4620      	mov	r0, r4
 8086ff8:	f7ff fe63 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8086ffc:	b130      	cbz	r0, 808700c <_ZN9SdSpiCard10writeStartEmm+0x2a>
    m_errorCode = code;
 8086ffe:	2309      	movs	r3, #9
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8087000:	4620      	mov	r0, r4
 8087002:	71a3      	strb	r3, [r4, #6]
 8087004:	f7ff fdf6 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087008:	2000      	movs	r0, #0
}
 808700a:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
 808700c:	7a63      	ldrb	r3, [r4, #9]
  if (cardCommand(CMD25, blockNumber)) {
 808700e:	2119      	movs	r1, #25
  if (type() != SD_CARD_TYPE_SDHC) {
 8087010:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8087012:	bf18      	it	ne
 8087014:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, blockNumber)) {
 8087016:	462a      	mov	r2, r5
 8087018:	4620      	mov	r0, r4
 808701a:	f7ff fe52 	bl	8086cc2 <_ZN9SdSpiCard11cardCommandEhm>
 808701e:	b108      	cbz	r0, 8087024 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8087020:	2307      	movs	r3, #7
 8087022:	e7ed      	b.n	8087000 <_ZN9SdSpiCard10writeStartEmm+0x1e>
  return true;
 8087024:	2001      	movs	r0, #1
 8087026:	e7f0      	b.n	808700a <_ZN9SdSpiCard10writeStartEmm+0x28>

08087028 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8087028:	b538      	push	{r3, r4, r5, lr}
 808702a:	4604      	mov	r4, r0
  chipSelectLow();
 808702c:	f7ff fdf5 	bl	8086c1a <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8087030:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087034:	4620      	mov	r0, r4
 8087036:	f7ff fe30 	bl	8086c9a <_ZN9SdSpiCard11waitNotBusyEt>
 808703a:	b178      	cbz	r0, 808705c <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 808703c:	21fd      	movs	r1, #253	; 0xfd
 808703e:	6820      	ldr	r0, [r4, #0]
 8087040:	f7ff fdd5 	bl	8086bee <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8087044:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087048:	4620      	mov	r0, r4
 808704a:	f7ff fe26 	bl	8086c9a <_ZN9SdSpiCard11waitNotBusyEt>
 808704e:	4605      	mov	r5, r0
 8087050:	b120      	cbz	r0, 808705c <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  chipSelectHigh();
 8087052:	4620      	mov	r0, r4
 8087054:	f7ff fdce 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
 8087058:	4628      	mov	r0, r5
 808705a:	bd38      	pop	{r3, r4, r5, pc}
 808705c:	2312      	movs	r3, #18
  chipSelectHigh();
 808705e:	4620      	mov	r0, r4
 8087060:	71a3      	strb	r3, [r4, #6]
 8087062:	f7ff fdc7 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087066:	2500      	movs	r5, #0
 8087068:	e7f6      	b.n	8087058 <_ZN9SdSpiCard9writeStopEv+0x30>

0808706a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 808706a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808706c:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 808706e:	461a      	mov	r2, r3
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8087070:	4604      	mov	r4, r0
 8087072:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8087074:	f7ff ffb5 	bl	8086fe2 <_ZN9SdSpiCard10writeStartEmm>
 8087078:	b170      	cbz	r0, 8087098 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 808707a:	2500      	movs	r5, #0
 808707c:	42b5      	cmp	r5, r6
  return writeStop();
 808707e:	4620      	mov	r0, r4
 8087080:	eb07 2145 	add.w	r1, r7, r5, lsl #9
  for (size_t b = 0; b < count; b++, src += 512) {
 8087084:	d004      	beq.n	8087090 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8087086:	f7ff ff8a 	bl	8086f9e <_ZN9SdSpiCard9writeDataEPKh>
 808708a:	b128      	cbz	r0, 8087098 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 808708c:	3501      	adds	r5, #1
 808708e:	e7f5      	b.n	808707c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
}
 8087090:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
 8087094:	f7ff bfc8 	b.w	8087028 <_ZN9SdSpiCard9writeStopEv>
  chipSelectHigh();
 8087098:	4620      	mov	r0, r4
 808709a:	f7ff fdab 	bl	8086bf4 <_ZN9SdSpiCard14chipSelectHighEv>
}
 808709e:	2000      	movs	r0, #0
 80870a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080870a4 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80870a4:	2201      	movs	r2, #1
 80870a6:	4b01      	ldr	r3, [pc, #4]	; (80870ac <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80870a8:	701a      	strb	r2, [r3, #0]
}
 80870aa:	4770      	bx	lr
 80870ac:	20000ca4 	.word	0x20000ca4

080870b0 <_ZN5SdSpi14endTransactionEv>:
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
}
 80870b0:	4770      	bx	lr
	...

080870b4 <_ZN5SdSpi5beginEh>:
  spiPtr[m_spiIf]->begin(chipSelectPin);
 80870b4:	7902      	ldrb	r2, [r0, #4]
 80870b6:	4b02      	ldr	r3, [pc, #8]	; (80870c0 <_ZN5SdSpi5beginEh+0xc>)
 80870b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80870bc:	f001 be42 	b.w	8088d44 <_ZN8SPIClass5beginEt>
 80870c0:	20000ca8 	.word	0x20000ca8

080870c4 <_ZN5SdSpi16beginTransactionEh>:
void SdSpi::beginTransaction(uint8_t divisor) {
 80870c4:	b570      	push	{r4, r5, r6, lr}
 80870c6:	4605      	mov	r5, r0
 80870c8:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 80870ca:	7903      	ldrb	r3, [r0, #4]
 80870cc:	4e19      	ldr	r6, [pc, #100]	; (8087134 <_ZN5SdSpi16beginTransactionEh+0x70>)
 80870ce:	2101      	movs	r1, #1
 80870d0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80870d4:	f001 fe44 	bl	8088d60 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 80870d8:	792b      	ldrb	r3, [r5, #4]
 80870da:	2100      	movs	r1, #0
 80870dc:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80870e0:	f001 fe4c 	bl	8088d7c <_ZN8SPIClass11setDataModeEh>
  if (divisor <= 2) {
 80870e4:	2c02      	cmp	r4, #2
 80870e6:	d91b      	bls.n	8087120 <_ZN5SdSpi16beginTransactionEh+0x5c>
  } else  if (divisor <= 4) {
 80870e8:	2c04      	cmp	r4, #4
 80870ea:	d91b      	bls.n	8087124 <_ZN5SdSpi16beginTransactionEh+0x60>
  } else  if (divisor <= 8) {
 80870ec:	2c08      	cmp	r4, #8
 80870ee:	d91b      	bls.n	8087128 <_ZN5SdSpi16beginTransactionEh+0x64>
  } else  if (divisor <= 16) {
 80870f0:	2c10      	cmp	r4, #16
 80870f2:	d91b      	bls.n	808712c <_ZN5SdSpi16beginTransactionEh+0x68>
  } else  if (divisor <= 32) {
 80870f4:	2c20      	cmp	r4, #32
 80870f6:	d91b      	bls.n	8087130 <_ZN5SdSpi16beginTransactionEh+0x6c>
    v = SPI_CLOCK_DIV128;
 80870f8:	2c41      	cmp	r4, #65	; 0x41
 80870fa:	bf34      	ite	cc
 80870fc:	2128      	movcc	r1, #40	; 0x28
 80870fe:	2130      	movcs	r1, #48	; 0x30
  spiPtr[m_spiIf]->setClockDivider(v);
 8087100:	792b      	ldrb	r3, [r5, #4]
 8087102:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8087106:	f001 fe89 	bl	8088e1c <_ZN8SPIClass15setClockDividerEh>
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 808710a:	7929      	ldrb	r1, [r5, #4]
 808710c:	233c      	movs	r3, #60	; 0x3c
 808710e:	fb01 4404 	mla	r4, r1, r4, r4
 8087112:	2118      	movs	r1, #24
 8087114:	434c      	muls	r4, r1
 8087116:	fbb4 f4f3 	udiv	r4, r4, r3
 808711a:	4b07      	ldr	r3, [pc, #28]	; (8087138 <_ZN5SdSpi16beginTransactionEh+0x74>)
 808711c:	601c      	str	r4, [r3, #0]
}
 808711e:	bd70      	pop	{r4, r5, r6, pc}
    v = SPI_CLOCK_DIV2;
 8087120:	2100      	movs	r1, #0
 8087122:	e7ed      	b.n	8087100 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV4;
 8087124:	2108      	movs	r1, #8
 8087126:	e7eb      	b.n	8087100 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV8;
 8087128:	2110      	movs	r1, #16
 808712a:	e7e9      	b.n	8087100 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV16;
 808712c:	2118      	movs	r1, #24
 808712e:	e7e7      	b.n	8087100 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV32;
 8087130:	2120      	movs	r1, #32
 8087132:	e7e5      	b.n	8087100 <_ZN5SdSpi16beginTransactionEh+0x3c>
 8087134:	20000ca8 	.word	0x20000ca8
 8087138:	20000cb4 	.word	0x20000cb4

0808713c <_ZN5SdSpi7receiveEv>:
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 808713c:	7902      	ldrb	r2, [r0, #4]
 808713e:	4b03      	ldr	r3, [pc, #12]	; (808714c <_ZN5SdSpi7receiveEv+0x10>)
 8087140:	21ff      	movs	r1, #255	; 0xff
 8087142:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8087146:	f001 be8d 	b.w	8088e64 <_ZN8SPIClass8transferEh>
 808714a:	bf00      	nop
 808714c:	20000ca8 	.word	0x20000ca8

08087150 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8087150:	7902      	ldrb	r2, [r0, #4]
 8087152:	4b02      	ldr	r3, [pc, #8]	; (808715c <_ZN5SdSpi4sendEh+0xc>)
 8087154:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8087158:	f001 be84 	b.w	8088e64 <_ZN8SPIClass8transferEh>
 808715c:	20000ca8 	.word	0x20000ca8

08087160 <_ZN5SdSpi7receiveEPhj>:
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8087160:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8087162:	460e      	mov	r6, r1
  SPI_DMA_TransferCompleted = false;
 8087164:	2100      	movs	r1, #0
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8087166:	4613      	mov	r3, r2
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8087168:	4a0a      	ldr	r2, [pc, #40]	; (8087194 <_ZN5SdSpi7receiveEPhj+0x34>)
 808716a:	7905      	ldrb	r5, [r0, #4]
 808716c:	480a      	ldr	r0, [pc, #40]	; (8087198 <_ZN5SdSpi7receiveEPhj+0x38>)
 808716e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
 8087170:	4c0a      	ldr	r4, [pc, #40]	; (808719c <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8087172:	4632      	mov	r2, r6
 8087174:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  SPI_DMA_TransferCompleted = false;
 8087178:	7021      	strb	r1, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808717a:	f001 fe79 	bl	8088e70 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 808717e:	7823      	ldrb	r3, [r4, #0]
 8087180:	2b00      	cmp	r3, #0
 8087182:	d0fc      	beq.n	808717e <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8087184:	4b06      	ldr	r3, [pc, #24]	; (80871a0 <_ZN5SdSpi7receiveEPhj+0x40>)
 8087186:	6818      	ldr	r0, [r3, #0]
 8087188:	b108      	cbz	r0, 808718e <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 808718a:	f001 f969 	bl	8088460 <HAL_Delay_Microseconds>
}
 808718e:	2000      	movs	r0, #0
 8087190:	b002      	add	sp, #8
 8087192:	bd70      	pop	{r4, r5, r6, pc}
 8087194:	080870a5 	.word	0x080870a5
 8087198:	20000ca8 	.word	0x20000ca8
 808719c:	20000ca4 	.word	0x20000ca4
 80871a0:	20000cb4 	.word	0x20000cb4

080871a4 <_ZN5SdSpi4sendEPKhj>:
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 80871a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80871a6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
 80871a8:	2200      	movs	r2, #0

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80871aa:	7905      	ldrb	r5, [r0, #4]
 80871ac:	480a      	ldr	r0, [pc, #40]	; (80871d8 <_ZN5SdSpi4sendEPKhj+0x34>)
  SPI_DMA_TransferCompleted = false;
 80871ae:	4c0b      	ldr	r4, [pc, #44]	; (80871dc <_ZN5SdSpi4sendEPKhj+0x38>)
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80871b0:	9000      	str	r0, [sp, #0]
 80871b2:	480b      	ldr	r0, [pc, #44]	; (80871e0 <_ZN5SdSpi4sendEPKhj+0x3c>)
  SPI_DMA_TransferCompleted = false;
 80871b4:	7022      	strb	r2, [r4, #0]
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80871b6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80871ba:	f001 fe59 	bl	8088e70 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 80871be:	7823      	ldrb	r3, [r4, #0]
 80871c0:	2b00      	cmp	r3, #0
 80871c2:	d0fc      	beq.n	80871be <_ZN5SdSpi4sendEPKhj+0x1a>
  if (bugDelay) {
 80871c4:	4b07      	ldr	r3, [pc, #28]	; (80871e4 <_ZN5SdSpi4sendEPKhj+0x40>)
 80871c6:	6818      	ldr	r0, [r3, #0]
 80871c8:	b120      	cbz	r0, 80871d4 <_ZN5SdSpi4sendEPKhj+0x30>
    delayMicroseconds(bugDelay);
  }
}
 80871ca:	b003      	add	sp, #12
 80871cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80871d0:	f001 b946 	b.w	8088460 <HAL_Delay_Microseconds>
 80871d4:	b003      	add	sp, #12
 80871d6:	bd30      	pop	{r4, r5, pc}
 80871d8:	080870a5 	.word	0x080870a5
 80871dc:	20000ca4 	.word	0x20000ca4
 80871e0:	20000ca8 	.word	0x20000ca8
 80871e4:	20000cb4 	.word	0x20000cb4

080871e8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80871e8:	b510      	push	{r4, lr}
 80871ea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80871ec:	6880      	ldr	r0, [r0, #8]
 80871ee:	b108      	cbz	r0, 80871f4 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80871f0:	f001 f97e 	bl	80884f0 <os_mutex_recursive_destroy>
 80871f4:	4620      	mov	r0, r4
 80871f6:	bd10      	pop	{r4, pc}

080871f8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 80871f8:	b538      	push	{r3, r4, r5, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80871fa:	4d25      	ldr	r5, [pc, #148]	; (8087290 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x98>)
 80871fc:	7829      	ldrb	r1, [r5, #0]
 80871fe:	f3bf 8f5b 	dmb	ish
 8087202:	f011 0401 	ands.w	r4, r1, #1
 8087206:	d10f      	bne.n	8087228 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x30>
 8087208:	4628      	mov	r0, r5
 808720a:	f7f8 ff64 	bl	80800d6 <__cxa_guard_acquire>
 808720e:	b158      	cbz	r0, 8087228 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x30>
 8087210:	4621      	mov	r1, r4
 8087212:	4820      	ldr	r0, [pc, #128]	; (8087294 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 8087214:	f001 fd87 	bl	8088d26 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8087218:	4628      	mov	r0, r5
 808721a:	f7f8 ff61 	bl	80800e0 <__cxa_guard_release>
 808721e:	4a1e      	ldr	r2, [pc, #120]	; (8087298 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 8087220:	491e      	ldr	r1, [pc, #120]	; (808729c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8087222:	481c      	ldr	r0, [pc, #112]	; (8087294 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 8087224:	f003 fd50 	bl	808acc8 <__aeabi_atexit>
};
 8087228:	4b1a      	ldr	r3, [pc, #104]	; (8087294 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 808722a:	4c1d      	ldr	r4, [pc, #116]	; (80872a0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa8>)
 808722c:	4d1d      	ldr	r5, [pc, #116]	; (80872a4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xac>)
 808722e:	6023      	str	r3, [r4, #0]
 8087230:	782b      	ldrb	r3, [r5, #0]
 8087232:	f3bf 8f5b 	dmb	ish
 8087236:	07da      	lsls	r2, r3, #31
 8087238:	d40f      	bmi.n	808725a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x62>
 808723a:	4628      	mov	r0, r5
 808723c:	f7f8 ff4b 	bl	80800d6 <__cxa_guard_acquire>
 8087240:	b158      	cbz	r0, 808725a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x62>
 8087242:	2101      	movs	r1, #1
 8087244:	4818      	ldr	r0, [pc, #96]	; (80872a8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8087246:	f001 fd6e 	bl	8088d26 <_ZN8SPIClassC1E19hal_spi_interface_t>
 808724a:	4628      	mov	r0, r5
 808724c:	f7f8 ff48 	bl	80800e0 <__cxa_guard_release>
 8087250:	4a11      	ldr	r2, [pc, #68]	; (8087298 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 8087252:	4912      	ldr	r1, [pc, #72]	; (808729c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8087254:	4814      	ldr	r0, [pc, #80]	; (80872a8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8087256:	f003 fd37 	bl	808acc8 <__aeabi_atexit>
 808725a:	4b13      	ldr	r3, [pc, #76]	; (80872a8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 808725c:	4d13      	ldr	r5, [pc, #76]	; (80872ac <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb4>)
 808725e:	6063      	str	r3, [r4, #4]
 8087260:	782b      	ldrb	r3, [r5, #0]
 8087262:	f3bf 8f5b 	dmb	ish
 8087266:	07db      	lsls	r3, r3, #31
 8087268:	d40f      	bmi.n	808728a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x92>
 808726a:	4628      	mov	r0, r5
 808726c:	f7f8 ff33 	bl	80800d6 <__cxa_guard_acquire>
 8087270:	b158      	cbz	r0, 808728a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x92>
 8087272:	2102      	movs	r1, #2
 8087274:	480e      	ldr	r0, [pc, #56]	; (80872b0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8087276:	f001 fd56 	bl	8088d26 <_ZN8SPIClassC1E19hal_spi_interface_t>
 808727a:	4628      	mov	r0, r5
 808727c:	f7f8 ff30 	bl	80800e0 <__cxa_guard_release>
 8087280:	4a05      	ldr	r2, [pc, #20]	; (8087298 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 8087282:	4906      	ldr	r1, [pc, #24]	; (808729c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8087284:	480a      	ldr	r0, [pc, #40]	; (80872b0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8087286:	f003 fd1f 	bl	808acc8 <__aeabi_atexit>
 808728a:	4b09      	ldr	r3, [pc, #36]	; (80872b0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 808728c:	60a3      	str	r3, [r4, #8]
}
 808728e:	bd38      	pop	{r3, r4, r5, pc}
 8087290:	20000c94 	.word	0x20000c94
 8087294:	20000c98 	.word	0x20000c98
 8087298:	200002b0 	.word	0x200002b0
 808729c:	080871e9 	.word	0x080871e9
 80872a0:	20000ca8 	.word	0x20000ca8
 80872a4:	20000c84 	.word	0x20000c84
 80872a8:	20000c88 	.word	0x20000c88
 80872ac:	20000c74 	.word	0x20000c74
 80872b0:	20000c78 	.word	0x20000c78

080872b4 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80872b4:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80872b6:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
 80872b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80872bc:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80872be:	f100 0210 	add.w	r2, r0, #16
 80872c2:	6880      	ldr	r0, [r0, #8]
 80872c4:	f000 bbed 	b.w	8087aa2 <_ZN9FatVolume15allocateClusterEmPm>

080872c8 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80872c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80872cc:	7801      	ldrb	r1, [r0, #0]
bool FatFile::addDirCluster() {
 80872ce:	4604      	mov	r4, r0
  if (isRootFixed()) {
 80872d0:	f011 0520 	ands.w	r5, r1, #32
 80872d4:	d003      	beq.n	80872de <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 80872d6:	2600      	movs	r6, #0
}
 80872d8:	4630      	mov	r0, r6
 80872da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
 80872de:	6942      	ldr	r2, [r0, #20]
 80872e0:	4b17      	ldr	r3, [pc, #92]	; (8087340 <_ZN7FatFile13addDirClusterEv+0x78>)
 80872e2:	429a      	cmp	r2, r3
 80872e4:	d2f7      	bcs.n	80872d6 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
 80872e6:	f7ff ffe5 	bl	80872b4 <_ZN7FatFile10addClusterEv>
 80872ea:	4606      	mov	r6, r0
 80872ec:	2800      	cmp	r0, #0
 80872ee:	d0f2      	beq.n	80872d6 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterStartBlock(m_curCluster);
 80872f0:	6921      	ldr	r1, [r4, #16]
 80872f2:	68a0      	ldr	r0, [r4, #8]
 80872f4:	f000 fb76 	bl	80879e4 <_ZNK9FatVolume17clusterStartBlockEm>
 80872f8:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
 80872fa:	68a0      	ldr	r0, [r4, #8]
 80872fc:	2205      	movs	r2, #5
 80872fe:	4639      	mov	r1, r7
 8087300:	3028      	adds	r0, #40	; 0x28
 8087302:	f000 fb4c 	bl	808799e <_ZN8FatCache4readEmh>
  if (!pc) {
 8087306:	4680      	mov	r8, r0
 8087308:	2800      	cmp	r0, #0
 808730a:	d0e4      	beq.n	80872d6 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
 808730c:	4629      	mov	r1, r5
 808730e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8087312:	f004 fe11 	bl	808bf38 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8087316:	2501      	movs	r5, #1
 8087318:	68a0      	ldr	r0, [r4, #8]
 808731a:	7902      	ldrb	r2, [r0, #4]
 808731c:	42aa      	cmp	r2, r5
 808731e:	d909      	bls.n	8087334 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8087320:	6803      	ldr	r3, [r0, #0]
 8087322:	4642      	mov	r2, r8
 8087324:	685b      	ldr	r3, [r3, #4]
 8087326:	19e9      	adds	r1, r5, r7
 8087328:	4798      	blx	r3
 808732a:	2800      	cmp	r0, #0
 808732c:	d0d3      	beq.n	80872d6 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 808732e:	3501      	adds	r5, #1
 8087330:	b2ed      	uxtb	r5, r5
 8087332:	e7f1      	b.n	8087318 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8087334:	6963      	ldr	r3, [r4, #20]
 8087336:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 808733a:	6163      	str	r3, [r4, #20]
  return true;
 808733c:	e7cc      	b.n	80872d8 <_ZN7FatFile13addDirClusterEv+0x10>
 808733e:	bf00      	nop
 8087340:	001ffe00 	.word	0x001ffe00

08087344 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8087344:	b510      	push	{r4, lr}
 8087346:	4604      	mov	r4, r0
 8087348:	6880      	ldr	r0, [r0, #8]
 808734a:	460a      	mov	r2, r1
 808734c:	3028      	adds	r0, #40	; 0x28
 808734e:	69a1      	ldr	r1, [r4, #24]
 8087350:	f000 fb25 	bl	808799e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8087354:	b120      	cbz	r0, 8087360 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8087356:	88a3      	ldrh	r3, [r4, #4]
 8087358:	f003 030f 	and.w	r3, r3, #15
 808735c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8087360:	bd10      	pop	{r4, pc}

08087362 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8087362:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8087364:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
 8087366:	4605      	mov	r5, r0
 8087368:	460e      	mov	r6, r1
  if (isOpen()) {
 808736a:	b94c      	cbnz	r4, 8087380 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 808736c:	2224      	movs	r2, #36	; 0x24
 808736e:	4621      	mov	r1, r4
 8087370:	f004 fde2 	bl	808bf38 <memset>

  m_vol = vol;
 8087374:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8087376:	79f3      	ldrb	r3, [r6, #7]
 8087378:	2b10      	cmp	r3, #16
 808737a:	d003      	beq.n	8087384 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 808737c:	2b20      	cmp	r3, #32
 808737e:	d007      	beq.n	8087390 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = O_READ;
  return true;

fail:
  return false;
 8087380:	2000      	movs	r0, #0
 8087382:	e004      	b.n	808738e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
 8087384:	2320      	movs	r3, #32
  m_flags = O_READ;
 8087386:	2401      	movs	r4, #1
  return true;
 8087388:	4620      	mov	r0, r4
    m_attr = FILE_ATTR_ROOT32;
 808738a:	702b      	strb	r3, [r5, #0]
  m_flags = O_READ;
 808738c:	70ac      	strb	r4, [r5, #2]
}
 808738e:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
 8087390:	2340      	movs	r3, #64	; 0x40
 8087392:	e7f8      	b.n	8087386 <_ZN7FatFile8openRootEP9FatVolume+0x24>

08087394 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8087394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8087398:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
 808739a:	4604      	mov	r4, r0
 808739c:	4688      	mov	r8, r1
 808739e:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & O_READ)) {
 80873a0:	2b00      	cmp	r3, #0
 80873a2:	d05d      	beq.n	8087460 <_ZN7FatFile4readEPvj+0xcc>
 80873a4:	7882      	ldrb	r2, [r0, #2]
 80873a6:	07d1      	lsls	r1, r2, #31
 80873a8:	d55a      	bpl.n	8087460 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 80873aa:	071a      	lsls	r2, r3, #28
 80873ac:	d52d      	bpl.n	808740a <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 80873ae:	69c3      	ldr	r3, [r0, #28]
 80873b0:	6942      	ldr	r2, [r0, #20]
 80873b2:	1a9b      	subs	r3, r3, r2
 80873b4:	429d      	cmp	r5, r3
 80873b6:	bf28      	it	cs
 80873b8:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80873ba:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
 80873bc:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80873c0:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
 80873c4:	2e00      	cmp	r6, #0
 80873c6:	f000 8090 	beq.w	80874ea <_ZN7FatFile4readEPvj+0x156>
    if (isRootFixed()) {
 80873ca:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
 80873cc:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 80873ce:	0697      	lsls	r7, r2, #26
 80873d0:	68a0      	ldr	r0, [r4, #8]
    offset = m_curPosition & 0X1FF;  // offset in block
 80873d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
 80873d6:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 80873da:	d51f      	bpl.n	808741c <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80873dc:	6a00      	ldr	r0, [r0, #32]
 80873de:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 80873e0:	68a0      	ldr	r0, [r4, #8]
 80873e2:	f1ba 0f00 	cmp.w	sl, #0
 80873e6:	d142      	bne.n	808746e <_ZN7FatFile4readEPvj+0xda>
 80873e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80873ec:	d33f      	bcc.n	808746e <_ZN7FatFile4readEPvj+0xda>
    return m_cache.lbn();
 80873ee:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80873f0:	4291      	cmp	r1, r2
 80873f2:	d03c      	beq.n	808746e <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 80873f4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80873f8:	d252      	bcs.n	80874a0 <_ZN7FatFile4readEPvj+0x10c>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80873fa:	6803      	ldr	r3, [r0, #0]
 80873fc:	4642      	mov	r2, r8
 80873fe:	681b      	ldr	r3, [r3, #0]
 8087400:	4798      	blx	r3
 8087402:	b368      	cbz	r0, 8087460 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
 8087404:	f44f 7700 	mov.w	r7, #512	; 0x200
 8087408:	e044      	b.n	8087494 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
 808740a:	069b      	lsls	r3, r3, #26
 808740c:	d5d5      	bpl.n	80873ba <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 808740e:	6883      	ldr	r3, [r0, #8]
 8087410:	891a      	ldrh	r2, [r3, #8]
 8087412:	6943      	ldr	r3, [r0, #20]
 8087414:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 8087418:	b29b      	uxth	r3, r3
 808741a:	e7cb      	b.n	80873b4 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 808741c:	f890 9005 	ldrb.w	r9, [r0, #5]
 8087420:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
 8087424:	f1ba 0f00 	cmp.w	sl, #0
 8087428:	d108      	bne.n	808743c <_ZN7FatFile4readEPvj+0xa8>
 808742a:	f1b9 0f00 	cmp.w	r9, #0
 808742e:	d105      	bne.n	808743c <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
 8087430:	b95b      	cbnz	r3, 808744a <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8087432:	0653      	lsls	r3, r2, #25
 8087434:	bf4c      	ite	mi
 8087436:	6a03      	ldrmi	r3, [r0, #32]
 8087438:	6a23      	ldrpl	r3, [r4, #32]
 808743a:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 808743c:	6921      	ldr	r1, [r4, #16]
 808743e:	68a0      	ldr	r0, [r4, #8]
 8087440:	f000 fad0 	bl	80879e4 <_ZNK9FatVolume17clusterStartBlockEm>
 8087444:	eb09 0100 	add.w	r1, r9, r0
 8087448:	e7ca      	b.n	80873e0 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808744a:	465a      	mov	r2, fp
 808744c:	6921      	ldr	r1, [r4, #16]
 808744e:	f000 facf 	bl	80879f0 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8087452:	2800      	cmp	r0, #0
 8087454:	db04      	blt.n	8087460 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
 8087456:	d1f1      	bne.n	808743c <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
 8087458:	7823      	ldrb	r3, [r4, #0]
 808745a:	f013 0f70 	tst.w	r3, #112	; 0x70
 808745e:	d144      	bne.n	80874ea <_ZN7FatFile4readEPvj+0x156>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8087460:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8087462:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
 8087466:	f043 0302 	orr.w	r3, r3, #2
 808746a:	7063      	strb	r3, [r4, #1]
  return -1;
 808746c:	e03e      	b.n	80874ec <_ZN7FatFile4readEPvj+0x158>
      n = 512 - offset;
 808746e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
 8087472:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
 8087474:	f04f 0200 	mov.w	r2, #0
 8087478:	f100 0028 	add.w	r0, r0, #40	; 0x28
 808747c:	bf28      	it	cs
 808747e:	4637      	movcs	r7, r6
 8087480:	f000 fa8d 	bl	808799e <_ZN8FatCache4readEmh>
      if (!pc) {
 8087484:	2800      	cmp	r0, #0
 8087486:	d0eb      	beq.n	8087460 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
 8087488:	eb00 010a 	add.w	r1, r0, sl
 808748c:	463a      	mov	r2, r7
 808748e:	4640      	mov	r0, r8
 8087490:	f004 fd44 	bl	808bf1c <memcpy>
    m_curPosition += n;
 8087494:	6963      	ldr	r3, [r4, #20]
    dst += n;
 8087496:	44b8      	add	r8, r7
    m_curPosition += n;
 8087498:	443b      	add	r3, r7
 808749a:	6163      	str	r3, [r4, #20]
    toRead -= n;
 808749c:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 808749e:	e791      	b.n	80873c4 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
 80874a0:	7827      	ldrb	r7, [r4, #0]
      uint8_t nb = toRead >> 9;
 80874a2:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 80874a6:	06bf      	lsls	r7, r7, #26
 80874a8:	d406      	bmi.n	80874b8 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 80874aa:	7907      	ldrb	r7, [r0, #4]
 80874ac:	eba7 0709 	sub.w	r7, r7, r9
 80874b0:	b2ff      	uxtb	r7, r7
 80874b2:	42bb      	cmp	r3, r7
 80874b4:	bf28      	it	cs
 80874b6:	463b      	movcs	r3, r7
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80874b8:	4291      	cmp	r1, r2
      n = 512*nb;
 80874ba:	ea4f 2743 	mov.w	r7, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80874be:	d208      	bcs.n	80874d2 <_ZN7FatFile4readEPvj+0x13e>
      if (!m_vol->readBlocks(block, dst, nb)) {
 80874c0:	68a0      	ldr	r0, [r4, #8]
 80874c2:	6802      	ldr	r2, [r0, #0]
 80874c4:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80874c8:	4642      	mov	r2, r8
 80874ca:	47d0      	blx	sl
 80874cc:	2800      	cmp	r0, #0
 80874ce:	d1e1      	bne.n	8087494 <_ZN7FatFile4readEPvj+0x100>
 80874d0:	e7c6      	b.n	8087460 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80874d2:	441a      	add	r2, r3
 80874d4:	428a      	cmp	r2, r1
 80874d6:	d9f3      	bls.n	80874c0 <_ZN7FatFile4readEPvj+0x12c>
 80874d8:	e9cd 1300 	strd	r1, r3, [sp]
        if (!m_vol->cacheSync()) {
 80874dc:	f7ff f874 	bl	80865c8 <_ZN9FatVolume9cacheSyncEv>
 80874e0:	e9dd 1300 	ldrd	r1, r3, [sp]
 80874e4:	2800      	cmp	r0, #0
 80874e6:	d1eb      	bne.n	80874c0 <_ZN7FatFile4readEPvj+0x12c>
 80874e8:	e7ba      	b.n	8087460 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
 80874ea:	1ba8      	subs	r0, r5, r6
}
 80874ec:	b003      	add	sp, #12
 80874ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080874f2 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 80874f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
 80874f4:	2201      	movs	r2, #1
  pos->cluster = m_curCluster;
 80874f6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80874fa:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 80874fe:	4604      	mov	r4, r0
 8087500:	f7ff ff48 	bl	8087394 <_ZN7FatFile4readEPvj>
 8087504:	2801      	cmp	r0, #1
 8087506:	bf12      	itee	ne
 8087508:	f04f 30ff 	movne.w	r0, #4294967295
 808750c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
 8087510:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
 8087514:	b002      	add	sp, #8
 8087516:	bd70      	pop	{r4, r5, r6, pc}

08087518 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8087518:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
 808751a:	6943      	ldr	r3, [r0, #20]
dir_t* FatFile::readDirCache(bool skipReadOk) {
 808751c:	4604      	mov	r4, r0
  if (i == 0 || !skipReadOk) {
 808751e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8087522:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 8087526:	d000      	beq.n	808752a <_ZN7FatFile12readDirCacheEb+0x12>
 8087528:	b999      	cbnz	r1, 8087552 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 808752a:	2201      	movs	r2, #1
 808752c:	4620      	mov	r0, r4
 808752e:	f10d 0107 	add.w	r1, sp, #7
 8087532:	f7ff ff2f 	bl	8087394 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
 8087536:	b240      	sxtb	r0, r0
 8087538:	2801      	cmp	r0, #1
 808753a:	d002      	beq.n	8087542 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
 808753c:	2000      	movs	r0, #0
}
 808753e:	b003      	add	sp, #12
 8087540:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
 8087542:	6963      	ldr	r3, [r4, #20]
 8087544:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
 8087546:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
 8087548:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
 808754a:	3034      	adds	r0, #52	; 0x34
 808754c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8087550:	e7f5      	b.n	808753e <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
 8087552:	3320      	adds	r3, #32
 8087554:	e7f7      	b.n	8087546 <_ZN7FatFile12readDirCacheEb+0x2e>

08087556 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
 8087556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
 808755a:	7802      	ldrb	r2, [r0, #0]
bool FatFile::seekSet(uint32_t pos) {
 808755c:	4604      	mov	r4, r0
 808755e:	460d      	mov	r5, r1
  uint32_t tmp = m_curCluster;
 8087560:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
 8087562:	b162      	cbz	r2, 808757e <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
 8087564:	6940      	ldr	r0, [r0, #20]
 8087566:	4288      	cmp	r0, r1
 8087568:	d002      	beq.n	8087570 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
 808756a:	b919      	cbnz	r1, 8087574 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
 808756c:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
 808756e:	6165      	str	r5, [r4, #20]
    return true;
 8087570:	2001      	movs	r0, #1
 8087572:	e006      	b.n	8087582 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
 8087574:	0716      	lsls	r6, r2, #28
 8087576:	d506      	bpl.n	8087586 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
 8087578:	69e3      	ldr	r3, [r4, #28]
 808757a:	428b      	cmp	r3, r1
 808757c:	d20b      	bcs.n	8087596 <_ZN7FatFile7seekSetEm+0x40>
  return false;
 808757e:	2000      	movs	r0, #0
  m_curCluster = tmp;
 8087580:	6127      	str	r7, [r4, #16]
}
 8087582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 8087586:	0691      	lsls	r1, r2, #26
 8087588:	d505      	bpl.n	8087596 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 808758a:	68a3      	ldr	r3, [r4, #8]
 808758c:	891b      	ldrh	r3, [r3, #8]
 808758e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 8087592:	d9ec      	bls.n	808756e <_ZN7FatFile7seekSetEm+0x18>
 8087594:	e7f3      	b.n	808757e <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8087596:	f8d4 c008 	ldr.w	ip, [r4, #8]
 808759a:	1e43      	subs	r3, r0, #1
 808759c:	f89c 6006 	ldrb.w	r6, [ip, #6]
 80875a0:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80875a4:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80875a6:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80875a8:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
 80875aa:	42b3      	cmp	r3, r6
 80875ac:	d800      	bhi.n	80875b0 <_ZN7FatFile7seekSetEm+0x5a>
 80875ae:	b998      	cbnz	r0, 80875d8 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80875b0:	0653      	lsls	r3, r2, #25
 80875b2:	bf4c      	ite	mi
 80875b4:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 80875b8:	6a23      	ldrpl	r3, [r4, #32]
 80875ba:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80875bc:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 80875c0:	2e00      	cmp	r6, #0
 80875c2:	d0d4      	beq.n	808756e <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80875c4:	4642      	mov	r2, r8
 80875c6:	6921      	ldr	r1, [r4, #16]
 80875c8:	68a0      	ldr	r0, [r4, #8]
 80875ca:	f000 fa11 	bl	80879f0 <_ZN9FatVolume6fatGetEmPm>
 80875ce:	2800      	cmp	r0, #0
 80875d0:	f106 36ff 	add.w	r6, r6, #4294967295
 80875d4:	dcf4      	bgt.n	80875c0 <_ZN7FatFile7seekSetEm+0x6a>
 80875d6:	e7d2      	b.n	808757e <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
 80875d8:	1af6      	subs	r6, r6, r3
 80875da:	e7ef      	b.n	80875bc <_ZN7FatFile7seekSetEm+0x66>

080875dc <_ZN7FatFile15openCachedEntryEPS_thh>:
                              uint8_t oflag, uint8_t lfnOrd) {
 80875dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80875de:	460f      	mov	r7, r1
 80875e0:	4604      	mov	r4, r0
 80875e2:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
 80875e4:	2100      	movs	r1, #0
 80875e6:	2224      	movs	r2, #36	; 0x24
                              uint8_t oflag, uint8_t lfnOrd) {
 80875e8:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
 80875ea:	f004 fca5 	bl	808bf38 <memset>
  m_vol = dirFile->m_vol;
 80875ee:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80875f0:	80a5      	strh	r5, [r4, #4]
  m_vol = dirFile->m_vol;
 80875f2:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 80875f4:	6a3b      	ldr	r3, [r7, #32]
 80875f6:	f005 050f 	and.w	r5, r5, #15
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80875fa:	f100 0234 	add.w	r2, r0, #52	; 0x34
  m_dirCluster = dirFile->m_firstCluster;
 80875fe:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8087600:	016b      	lsls	r3, r5, #5
 8087602:	eb02 1545 	add.w	r5, r2, r5, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8087606:	7aea      	ldrb	r2, [r5, #11]
 8087608:	0717      	lsls	r7, r2, #28
 808760a:	d502      	bpl.n	8087612 <_ZN7FatFile15openCachedEntryEPS_thh+0x36>
  m_attr = FILE_ATTR_CLOSED;
 808760c:	2000      	movs	r0, #0
 808760e:	7020      	strb	r0, [r4, #0]
}
 8087610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8087612:	18c2      	adds	r2, r0, r3
 8087614:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
 8087618:	f001 0117 	and.w	r1, r1, #23
 808761c:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 808761e:	7aea      	ldrb	r2, [r5, #11]
 8087620:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
 8087624:	bf08      	it	eq
 8087626:	f041 0108 	orreq.w	r1, r1, #8
  m_lfnOrd = lfnOrd;
 808762a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    m_attr |= FILE_ATTR_FILE;
 808762e:	bf08      	it	eq
 8087630:	7021      	strbeq	r1, [r4, #0]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8087632:	f016 0f32 	tst.w	r6, #50	; 0x32
  m_lfnOrd = lfnOrd;
 8087636:	70e2      	strb	r2, [r4, #3]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8087638:	d004      	beq.n	8087644 <_ZN7FatFile15openCachedEntryEPS_thh+0x68>
    if (isSubDir() || isReadOnly()) {
 808763a:	7822      	ldrb	r2, [r4, #0]
 808763c:	06d5      	lsls	r5, r2, #27
 808763e:	d4e5      	bmi.n	808760c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
 8087640:	07d1      	lsls	r1, r2, #31
 8087642:	d4e3      	bmi.n	808760c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
  m_flags = oflag & F_OFLAG;
 8087644:	f006 020f 	and.w	r2, r6, #15
 8087648:	70a2      	strb	r2, [r4, #2]
    return m_cache.lbn();
 808764a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 808764c:	4403      	add	r3, r0
  m_dirBlock = m_vol->cacheBlockNumber();
 808764e:	61a2      	str	r2, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8087650:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
                 | dir->firstClusterLow;
 8087654:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8087658:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
 808765c:	06f2      	lsls	r2, r6, #27
 808765e:	d50d      	bpl.n	808767c <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8087660:	b939      	cbnz	r1, 8087672 <_ZN7FatFile15openCachedEntryEPS_thh+0x96>
    m_flags |= F_FILE_DIR_DIRTY;
 8087662:	78a3      	ldrb	r3, [r4, #2]
 8087664:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8087668:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 808766a:	06b3      	lsls	r3, r6, #26
 808766c:	d40a      	bmi.n	8087684 <_ZN7FatFile15openCachedEntryEPS_thh+0xa8>
  return true;
 808766e:	2001      	movs	r0, #1
 8087670:	e7ce      	b.n	8087610 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8087672:	f000 fa52 	bl	8087b1a <_ZN9FatVolume9freeChainEm>
 8087676:	2800      	cmp	r0, #0
 8087678:	d1f3      	bne.n	8087662 <_ZN7FatFile15openCachedEntryEPS_thh+0x86>
 808767a:	e7c7      	b.n	808760c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
    m_firstCluster = firstCluster;
 808767c:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 808767e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8087680:	61e3      	str	r3, [r4, #28]
 8087682:	e7f2      	b.n	808766a <_ZN7FatFile15openCachedEntryEPS_thh+0x8e>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8087684:	4620      	mov	r0, r4
 8087686:	69e1      	ldr	r1, [r4, #28]
 8087688:	f7ff ff65 	bl	8087556 <_ZN7FatFile7seekSetEm>
 808768c:	2800      	cmp	r0, #0
 808768e:	d1ee      	bne.n	808766e <_ZN7FatFile15openCachedEntryEPS_thh+0x92>
 8087690:	e7bc      	b.n	808760c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
	...

08087694 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8087694:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8087696:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 8087698:	4604      	mov	r4, r0
  if (!isOpen()) {
 808769a:	b90b      	cbnz	r3, 80876a0 <_ZN7FatFile4syncEv+0xc>
    return true;
 808769c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 808769e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 80876a0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80876a4:	2b00      	cmp	r3, #0
 80876a6:	da23      	bge.n	80876f0 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80876a8:	2101      	movs	r1, #1
 80876aa:	f7ff fe4b 	bl	8087344 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80876ae:	4605      	mov	r5, r0
 80876b0:	b928      	cbnz	r0, 80876be <_ZN7FatFile4syncEv+0x2a>
  m_error |= WRITE_ERROR;
 80876b2:	7863      	ldrb	r3, [r4, #1]
  return false;
 80876b4:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 80876b6:	f043 0301 	orr.w	r3, r3, #1
 80876ba:	7063      	strb	r3, [r4, #1]
  return false;
 80876bc:	e7ef      	b.n	808769e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80876be:	7803      	ldrb	r3, [r0, #0]
 80876c0:	2be5      	cmp	r3, #229	; 0xe5
 80876c2:	d0f6      	beq.n	80876b2 <_ZN7FatFile4syncEv+0x1e>
    if (isFile()) {
 80876c4:	7823      	ldrb	r3, [r4, #0]
 80876c6:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 80876c8:	bf44      	itt	mi
 80876ca:	69e3      	ldrmi	r3, [r4, #28]
 80876cc:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 80876ce:	8c23      	ldrh	r3, [r4, #32]
 80876d0:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 80876d2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80876d4:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 80876d6:	4b09      	ldr	r3, [pc, #36]	; (80876fc <_ZN7FatFile4syncEv+0x68>)
 80876d8:	681b      	ldr	r3, [r3, #0]
 80876da:	b12b      	cbz	r3, 80876e8 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80876dc:	f100 0116 	add.w	r1, r0, #22
 80876e0:	3018      	adds	r0, #24
 80876e2:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80876e4:	8b2b      	ldrh	r3, [r5, #24]
 80876e6:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 80876e8:	78a3      	ldrb	r3, [r4, #2]
 80876ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80876ee:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 80876f0:	68a0      	ldr	r0, [r4, #8]
 80876f2:	f7fe ff69 	bl	80865c8 <_ZN9FatVolume9cacheSyncEv>
 80876f6:	2800      	cmp	r0, #0
 80876f8:	d0db      	beq.n	80876b2 <_ZN7FatFile4syncEv+0x1e>
 80876fa:	e7cf      	b.n	808769c <_ZN7FatFile4syncEv+0x8>
 80876fc:	20000cb8 	.word	0x20000cb8

08087700 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 8087700:	b510      	push	{r4, lr}
 8087702:	4604      	mov	r4, r0
  bool rtn = sync();
 8087704:	f7ff ffc6 	bl	8087694 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8087708:	2300      	movs	r3, #0
 808770a:	7023      	strb	r3, [r4, #0]
}
 808770c:	bd10      	pop	{r4, pc}

0808770e <_ZN7FatFile4openEPS_PKch>:
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 808770e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087710:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8087712:	2300      	movs	r3, #0
 8087714:	b093      	sub	sp, #76	; 0x4c
 8087716:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
 808771a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 808771c:	4606      	mov	r6, r0
 808771e:	460c      	mov	r4, r1
 8087720:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 8087722:	b113      	cbz	r3, 808772a <_ZN7FatFile4openEPS_PKch+0x1c>
  return false;
 8087724:	2000      	movs	r0, #0
}
 8087726:	b013      	add	sp, #76	; 0x4c
 8087728:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
 808772a:	780b      	ldrb	r3, [r1, #0]
 808772c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8087730:	d0f8      	beq.n	8087724 <_ZN7FatFile4openEPS_PKch+0x16>
  if (isDirSeparator(*path)) {
 8087732:	7813      	ldrb	r3, [r2, #0]
 8087734:	2b2f      	cmp	r3, #47	; 0x2f
 8087736:	d112      	bne.n	808775e <_ZN7FatFile4openEPS_PKch+0x50>
    while (isDirSeparator(*path)) {
 8087738:	9a01      	ldr	r2, [sp, #4]
 808773a:	7813      	ldrb	r3, [r2, #0]
 808773c:	2b2f      	cmp	r3, #47	; 0x2f
 808773e:	d102      	bne.n	8087746 <_ZN7FatFile4openEPS_PKch+0x38>
      path++;
 8087740:	3201      	adds	r2, #1
 8087742:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 8087744:	e7f8      	b.n	8087738 <_ZN7FatFile4openEPS_PKch+0x2a>
    if (*path == 0) {
 8087746:	68a1      	ldr	r1, [r4, #8]
 8087748:	b91b      	cbnz	r3, 8087752 <_ZN7FatFile4openEPS_PKch+0x44>
      return openRoot(dirFile->m_vol);
 808774a:	4630      	mov	r0, r6
 808774c:	f7ff fe09 	bl	8087362 <_ZN7FatFile8openRootEP9FatVolume>
 8087750:	e7e9      	b.n	8087726 <_ZN7FatFile4openEPS_PKch+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8087752:	a809      	add	r0, sp, #36	; 0x24
 8087754:	f7ff fe05 	bl	8087362 <_ZN7FatFile8openRootEP9FatVolume>
 8087758:	2800      	cmp	r0, #0
 808775a:	d0e3      	beq.n	8087724 <_ZN7FatFile4openEPS_PKch+0x16>
    dirFile = &tmpDir;
 808775c:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 808775e:	9801      	ldr	r0, [sp, #4]
 8087760:	aa01      	add	r2, sp, #4
 8087762:	a903      	add	r1, sp, #12
 8087764:	f7fe ff4c 	bl	8086600 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8087768:	2800      	cmp	r0, #0
 808776a:	d0db      	beq.n	8087724 <_ZN7FatFile4openEPS_PKch+0x16>
    if (*path == 0) {
 808776c:	9b01      	ldr	r3, [sp, #4]
 808776e:	781b      	ldrb	r3, [r3, #0]
 8087770:	b19b      	cbz	r3, 808779a <_ZN7FatFile4openEPS_PKch+0x8c>
    if (!open(dirFile, &fname, O_READ)) {
 8087772:	2301      	movs	r3, #1
 8087774:	4621      	mov	r1, r4
 8087776:	4630      	mov	r0, r6
 8087778:	aa03      	add	r2, sp, #12
 808777a:	f7ff f875 	bl	8086868 <_ZN7FatFile4openEPS_P7fname_th>
 808777e:	2800      	cmp	r0, #0
 8087780:	d0d0      	beq.n	8087724 <_ZN7FatFile4openEPS_PKch+0x16>
    tmpDir = *this;
 8087782:	4635      	mov	r5, r6
 8087784:	ac09      	add	r4, sp, #36	; 0x24
 8087786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8087788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808778a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808778c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808778e:	682b      	ldr	r3, [r5, #0]
    close();
 8087790:	4630      	mov	r0, r6
    tmpDir = *this;
 8087792:	6023      	str	r3, [r4, #0]
    close();
 8087794:	f7ff ffb4 	bl	8087700 <_ZN7FatFile5closeEv>
  while (1) {
 8087798:	e7e0      	b.n	808775c <_ZN7FatFile4openEPS_PKch+0x4e>
  return open(dirFile, &fname, oflag);
 808779a:	463b      	mov	r3, r7
 808779c:	4621      	mov	r1, r4
 808779e:	4630      	mov	r0, r6
 80877a0:	aa03      	add	r2, sp, #12
 80877a2:	f7ff f861 	bl	8086868 <_ZN7FatFile4openEPS_P7fname_th>
 80877a6:	e7be      	b.n	8087726 <_ZN7FatFile4openEPS_PKch+0x18>

080877a8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80877a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80877ac:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
 80877ae:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & O_WRITE)) {
 80877b0:	071d      	lsls	r5, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
 80877b2:	4689      	mov	r9, r1
 80877b4:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & O_WRITE)) {
 80877b6:	d55b      	bpl.n	8087870 <_ZN7FatFile5writeEPKvj+0xc8>
 80877b8:	7883      	ldrb	r3, [r0, #2]
 80877ba:	0799      	lsls	r1, r3, #30
 80877bc:	d558      	bpl.n	8087870 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 80877be:	075a      	lsls	r2, r3, #29
 80877c0:	d451      	bmi.n	8087866 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 80877c2:	6963      	ldr	r3, [r4, #20]
 80877c4:	43db      	mvns	r3, r3
 80877c6:	42bb      	cmp	r3, r7
 80877c8:	d352      	bcc.n	8087870 <_ZN7FatFile5writeEPKvj+0xc8>
 80877ca:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80877cc:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
 80877d0:	6963      	ldr	r3, [r4, #20]
 80877d2:	f1b8 0f00 	cmp.w	r8, #0
 80877d6:	f000 808f 	beq.w	80878f8 <_ZN7FatFile5writeEPKvj+0x150>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 80877da:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 80877dc:	f3c3 0508 	ubfx	r5, r3, #0, #9
    return (position >> 9) & m_clusterBlockMask;
 80877e0:	7946      	ldrb	r6, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 80877e2:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 80877e6:	d10e      	bne.n	8087806 <_ZN7FatFile5writeEPKvj+0x5e>
 80877e8:	b96d      	cbnz	r5, 8087806 <_ZN7FatFile5writeEPKvj+0x5e>
 80877ea:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
 80877ec:	2900      	cmp	r1, #0
 80877ee:	d046      	beq.n	808787e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80877f0:	4652      	mov	r2, sl
 80877f2:	f000 f8fd 	bl	80879f0 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80877f6:	2800      	cmp	r0, #0
 80877f8:	db3a      	blt.n	8087870 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80877fa:	d104      	bne.n	8087806 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
 80877fc:	4620      	mov	r0, r4
 80877fe:	f7ff fd59 	bl	80872b4 <_ZN7FatFile10addClusterEv>
 8087802:	2800      	cmp	r0, #0
 8087804:	d034      	beq.n	8087870 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8087806:	6921      	ldr	r1, [r4, #16]
 8087808:	68a0      	ldr	r0, [r4, #8]
 808780a:	f000 f8eb 	bl	80879e4 <_ZNK9FatVolume17clusterStartBlockEm>
 808780e:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8087810:	68a0      	ldr	r0, [r4, #8]
 8087812:	b915      	cbnz	r5, 808781a <_ZN7FatFile5writeEPKvj+0x72>
 8087814:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8087818:	d23f      	bcs.n	808789a <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 808781a:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
 808781e:	4546      	cmp	r6, r8
 8087820:	bf28      	it	cs
 8087822:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8087824:	2d00      	cmp	r5, #0
 8087826:	d136      	bne.n	8087896 <_ZN7FatFile5writeEPKvj+0xee>
 8087828:	6962      	ldr	r2, [r4, #20]
 808782a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 808782c:	429a      	cmp	r2, r3
 808782e:	bf34      	ite	cc
 8087830:	2201      	movcc	r2, #1
 8087832:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
 8087834:	3028      	adds	r0, #40	; 0x28
 8087836:	f000 f8b2 	bl	808799e <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 808783a:	b1c8      	cbz	r0, 8087870 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 808783c:	4428      	add	r0, r5
 808783e:	4632      	mov	r2, r6
 8087840:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8087842:	4435      	add	r5, r6
      memcpy(dst, src, n);
 8087844:	f004 fb6a 	bl	808bf1c <memcpy>
      if (512 == (n + blockOffset)) {
 8087848:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 808784c:	d104      	bne.n	8087858 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
 808784e:	68a0      	ldr	r0, [r4, #8]
 8087850:	3028      	adds	r0, #40	; 0x28
 8087852:	f000 f87d 	bl	8087950 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8087856:	b158      	cbz	r0, 8087870 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8087858:	6963      	ldr	r3, [r4, #20]
    src += n;
 808785a:	44b1      	add	r9, r6
    m_curPosition += n;
 808785c:	4433      	add	r3, r6
 808785e:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 8087860:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
 8087864:	e7b4      	b.n	80877d0 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
 8087866:	69c1      	ldr	r1, [r0, #28]
 8087868:	f7ff fe75 	bl	8087556 <_ZN7FatFile7seekSetEm>
 808786c:	2800      	cmp	r0, #0
 808786e:	d1a8      	bne.n	80877c2 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8087870:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8087872:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= WRITE_ERROR;
 8087876:	f043 0301 	orr.w	r3, r3, #1
 808787a:	7063      	strb	r3, [r4, #1]
  return -1;
 808787c:	e04d      	b.n	808791a <_ZN7FatFile5writeEPKvj+0x172>
        if (m_firstCluster == 0) {
 808787e:	6a23      	ldr	r3, [r4, #32]
 8087880:	b93b      	cbnz	r3, 8087892 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
 8087882:	4620      	mov	r0, r4
 8087884:	f7ff fd16 	bl	80872b4 <_ZN7FatFile10addClusterEv>
 8087888:	2800      	cmp	r0, #0
 808788a:	d0f1      	beq.n	8087870 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
 808788c:	6923      	ldr	r3, [r4, #16]
 808788e:	6223      	str	r3, [r4, #32]
 8087890:	e7b9      	b.n	8087806 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
 8087892:	6123      	str	r3, [r4, #16]
 8087894:	e7b7      	b.n	8087806 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8087896:	2201      	movs	r2, #1
 8087898:	e7cc      	b.n	8087834 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
 808789a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 808789e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80878a0:	d319      	bcc.n	80878d6 <_ZN7FatFile5writeEPKvj+0x12e>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80878a2:	7903      	ldrb	r3, [r0, #4]
      uint8_t nBlock = nToWrite >> 9;
 80878a4:	f3c8 2c47 	ubfx	ip, r8, #9, #8
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80878a8:	1b9b      	subs	r3, r3, r6
 80878aa:	b2db      	uxtb	r3, r3
 80878ac:	4563      	cmp	r3, ip
 80878ae:	bf28      	it	cs
 80878b0:	4663      	movcs	r3, ip
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80878b2:	4291      	cmp	r1, r2
      n = 512*nBlock;
 80878b4:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80878b8:	d307      	bcc.n	80878ca <_ZN7FatFile5writeEPKvj+0x122>
 80878ba:	441a      	add	r2, r3
 80878bc:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
 80878be:	bf82      	ittt	hi
 80878c0:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
 80878c4:	f880 5028 	strbhi.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80878c8:	6302      	strhi	r2, [r0, #48]	; 0x30
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 80878ca:	68a0      	ldr	r0, [r4, #8]
 80878cc:	6802      	ldr	r2, [r0, #0]
 80878ce:	68d5      	ldr	r5, [r2, #12]
 80878d0:	464a      	mov	r2, r9
 80878d2:	47a8      	blx	r5
 80878d4:	e7bf      	b.n	8087856 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
 80878d6:	4291      	cmp	r1, r2
 80878d8:	bf02      	ittt	eq
 80878da:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
 80878de:	f880 5028 	strbeq.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80878e2:	6303      	streq	r3, [r0, #48]	; 0x30
      if (!m_vol->writeBlock(block, src)) {
 80878e4:	68a0      	ldr	r0, [r4, #8]
 80878e6:	464a      	mov	r2, r9
 80878e8:	6803      	ldr	r3, [r0, #0]
 80878ea:	685b      	ldr	r3, [r3, #4]
 80878ec:	4798      	blx	r3
 80878ee:	2800      	cmp	r0, #0
 80878f0:	d0be      	beq.n	8087870 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
 80878f2:	f44f 7600 	mov.w	r6, #512	; 0x200
 80878f6:	e7af      	b.n	8087858 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
 80878f8:	69e1      	ldr	r1, [r4, #28]
 80878fa:	78a2      	ldrb	r2, [r4, #2]
 80878fc:	4299      	cmp	r1, r3
 80878fe:	d204      	bcs.n	808790a <_ZN7FatFile5writeEPKvj+0x162>
    m_fileSize = m_curPosition;
 8087900:	61e3      	str	r3, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 8087902:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8087906:	70a2      	strb	r2, [r4, #2]
 8087908:	e003      	b.n	8087912 <_ZN7FatFile5writeEPKvj+0x16a>
  } else if (m_dateTime) {
 808790a:	4b08      	ldr	r3, [pc, #32]	; (808792c <_ZN7FatFile5writeEPKvj+0x184>)
 808790c:	681b      	ldr	r3, [r3, #0]
 808790e:	2b00      	cmp	r3, #0
 8087910:	d1f7      	bne.n	8087902 <_ZN7FatFile5writeEPKvj+0x15a>
  if (m_flags & O_SYNC) {
 8087912:	78a3      	ldrb	r3, [r4, #2]
 8087914:	071b      	lsls	r3, r3, #28
 8087916:	d402      	bmi.n	808791e <_ZN7FatFile5writeEPKvj+0x176>
  return nbyte;
 8087918:	4638      	mov	r0, r7
}
 808791a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
 808791e:	4620      	mov	r0, r4
 8087920:	f7ff feb8 	bl	8087694 <_ZN7FatFile4syncEv>
 8087924:	2800      	cmp	r0, #0
 8087926:	d1f7      	bne.n	8087918 <_ZN7FatFile5writeEPKvj+0x170>
 8087928:	e7a2      	b.n	8087870 <_ZN7FatFile5writeEPKvj+0xc8>
 808792a:	bf00      	nop
 808792c:	20000cb8 	.word	0x20000cb8

08087930 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8087930:	b570      	push	{r4, r5, r6, lr}
 8087932:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8087934:	460c      	mov	r4, r1
    }
 8087936:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8087938:	b149      	cbz	r1, 808794e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808793a:	f004 fb64 	bl	808c006 <strlen>
 808793e:	682b      	ldr	r3, [r5, #0]
 8087940:	4602      	mov	r2, r0
 8087942:	4621      	mov	r1, r4
 8087944:	4628      	mov	r0, r5
    }
 8087946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 808794a:	68db      	ldr	r3, [r3, #12]
 808794c:	4718      	bx	r3
    }
 808794e:	bd70      	pop	{r4, r5, r6, pc}

08087950 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8087950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8087952:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 8087954:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8087956:	07da      	lsls	r2, r3, #31
 8087958:	d51f      	bpl.n	808799a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 808795a:	6840      	ldr	r0, [r0, #4]
 808795c:	f104 060c 	add.w	r6, r4, #12
 8087960:	6803      	ldr	r3, [r0, #0]
 8087962:	4632      	mov	r2, r6
 8087964:	685b      	ldr	r3, [r3, #4]
 8087966:	68a1      	ldr	r1, [r4, #8]
 8087968:	4798      	blx	r3
 808796a:	4605      	mov	r5, r0
 808796c:	b910      	cbnz	r0, 8087974 <_ZN8FatCache4syncEv+0x24>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 808796e:	2500      	movs	r5, #0
}
 8087970:	4628      	mov	r0, r5
 8087972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8087974:	7823      	ldrb	r3, [r4, #0]
 8087976:	079b      	lsls	r3, r3, #30
 8087978:	d404      	bmi.n	8087984 <_ZN8FatCache4syncEv+0x34>
    m_status &= ~CACHE_STATUS_DIRTY;
 808797a:	7823      	ldrb	r3, [r4, #0]
 808797c:	f023 0301 	bic.w	r3, r3, #1
 8087980:	7023      	strb	r3, [r4, #0]
 8087982:	e7f5      	b.n	8087970 <_ZN8FatCache4syncEv+0x20>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8087984:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8087988:	6901      	ldr	r1, [r0, #16]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 808798a:	6803      	ldr	r3, [r0, #0]
 808798c:	4632      	mov	r2, r6
 808798e:	685b      	ldr	r3, [r3, #4]
 8087990:	4439      	add	r1, r7
 8087992:	4798      	blx	r3
 8087994:	2800      	cmp	r0, #0
 8087996:	d1f0      	bne.n	808797a <_ZN8FatCache4syncEv+0x2a>
 8087998:	e7e9      	b.n	808796e <_ZN8FatCache4syncEv+0x1e>
  return true;
 808799a:	2501      	movs	r5, #1
 808799c:	e7e8      	b.n	8087970 <_ZN8FatCache4syncEv+0x20>

0808799e <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808799e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 80879a0:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80879a2:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 80879a4:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80879a6:	460e      	mov	r6, r1
 80879a8:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80879aa:	d009      	beq.n	80879c0 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 80879ac:	f7ff ffd0 	bl	8087950 <_ZN8FatCache4syncEv>
 80879b0:	b908      	cbnz	r0, 80879b6 <_ZN8FatCache4readEmh+0x18>
  return 0;
 80879b2:	2000      	movs	r0, #0
}
 80879b4:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 80879b6:	076b      	lsls	r3, r5, #29
 80879b8:	d50a      	bpl.n	80879d0 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 80879ba:	2300      	movs	r3, #0
    m_lbn = lbn;
 80879bc:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 80879be:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 80879c0:	4620      	mov	r0, r4
 80879c2:	7822      	ldrb	r2, [r4, #0]
 80879c4:	f005 0503 	and.w	r5, r5, #3
 80879c8:	4315      	orrs	r5, r2
 80879ca:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 80879ce:	e7f1      	b.n	80879b4 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80879d0:	6860      	ldr	r0, [r4, #4]
 80879d2:	4631      	mov	r1, r6
 80879d4:	6803      	ldr	r3, [r0, #0]
 80879d6:	f104 020c 	add.w	r2, r4, #12
 80879da:	681b      	ldr	r3, [r3, #0]
 80879dc:	4798      	blx	r3
 80879de:	2800      	cmp	r0, #0
 80879e0:	d1eb      	bne.n	80879ba <_ZN8FatCache4readEmh+0x1c>
 80879e2:	e7e6      	b.n	80879b2 <_ZN8FatCache4readEmh+0x14>

080879e4 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 80879e4:	7983      	ldrb	r3, [r0, #6]
 80879e6:	3902      	subs	r1, #2
 80879e8:	6940      	ldr	r0, [r0, #20]
 80879ea:	4099      	lsls	r1, r3
}
 80879ec:	4408      	add	r0, r1
 80879ee:	4770      	bx	lr

080879f0 <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80879f0:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80879f2:	79c3      	ldrb	r3, [r0, #7]
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80879f4:	4605      	mov	r5, r0
  if (m_fatType == 32) {
 80879f6:	2b20      	cmp	r3, #32
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80879f8:	460c      	mov	r4, r1
 80879fa:	4616      	mov	r6, r2
  if (m_fatType == 32) {
 80879fc:	d118      	bne.n	8087a30 <_ZN9FatVolume6fatGetEmPm+0x40>
    lba = m_fatStartBlock + (cluster >> 7);
 80879fe:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 8087a00:	2202      	movs	r2, #2
 8087a02:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8087a06:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8087a0a:	f7ff ffc8 	bl	808799e <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8087a0e:	b910      	cbnz	r0, 8087a16 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8087a10:	f04f 30ff 	mov.w	r0, #4294967295
}
 8087a14:	bd70      	pop	{r4, r5, r6, pc}
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8087a16:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8087a1a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8087a1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
 8087a22:	69ea      	ldr	r2, [r5, #28]
 8087a24:	4293      	cmp	r3, r2
  return 1;
 8087a26:	bf96      	itet	ls
 8087a28:	2001      	movls	r0, #1
    return 0;
 8087a2a:	2000      	movhi	r0, #0
  *value = next;
 8087a2c:	6033      	strls	r3, [r6, #0]
  return 1;
 8087a2e:	e7f1      	b.n	8087a14 <_ZN9FatVolume6fatGetEmPm+0x24>
  if (m_fatType == 16) {
 8087a30:	2b10      	cmp	r3, #16
 8087a32:	d1ed      	bne.n	8087a10 <_ZN9FatVolume6fatGetEmPm+0x20>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8087a34:	6983      	ldr	r3, [r0, #24]
 8087a36:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8087a3a:	2202      	movs	r2, #2
 8087a3c:	4419      	add	r1, r3
 8087a3e:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8087a42:	f7ff ffac 	bl	808799e <_ZN8FatCache4readEmh>
    if (!pc) {
 8087a46:	2800      	cmp	r0, #0
 8087a48:	d0e2      	beq.n	8087a10 <_ZN9FatVolume6fatGetEmPm+0x20>
    next = pc->fat16[cluster & 0XFF];
 8087a4a:	b2e4      	uxtb	r4, r4
 8087a4c:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
 8087a50:	e7e7      	b.n	8087a22 <_ZN9FatVolume6fatGetEmPm+0x32>

08087a52 <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8087a52:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8087a54:	79c3      	ldrb	r3, [r0, #7]
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8087a56:	460c      	mov	r4, r1
  if (m_fatType == 32) {
 8087a58:	2b20      	cmp	r3, #32
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8087a5a:	4615      	mov	r5, r2
  if (m_fatType == 32) {
 8087a5c:	d110      	bne.n	8087a80 <_ZN9FatVolume6fatPutEmm+0x2e>
    lba = m_fatStartBlock + (cluster >> 7);
 8087a5e:	6981      	ldr	r1, [r0, #24]
 8087a60:	2203      	movs	r2, #3
 8087a62:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8087a66:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8087a6a:	f7ff ff98 	bl	808799e <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8087a6e:	b908      	cbnz	r0, 8087a74 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8087a70:	2000      	movs	r0, #0
}
 8087a72:	bd38      	pop	{r3, r4, r5, pc}
    pc->fat32[cluster & 0X7F] = value;
 8087a74:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8087a78:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
 8087a7c:	2001      	movs	r0, #1
 8087a7e:	e7f8      	b.n	8087a72 <_ZN9FatVolume6fatPutEmm+0x20>
  if (m_fatType == 16) {
 8087a80:	2b10      	cmp	r3, #16
 8087a82:	d1f5      	bne.n	8087a70 <_ZN9FatVolume6fatPutEmm+0x1e>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8087a84:	6983      	ldr	r3, [r0, #24]
 8087a86:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8087a8a:	2203      	movs	r2, #3
 8087a8c:	4419      	add	r1, r3
 8087a8e:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8087a92:	f7ff ff84 	bl	808799e <_ZN8FatCache4readEmh>
    if (!pc) {
 8087a96:	2800      	cmp	r0, #0
 8087a98:	d0ea      	beq.n	8087a70 <_ZN9FatVolume6fatPutEmm+0x1e>
    pc->fat16[cluster & 0XFF] = value;
 8087a9a:	b2e4      	uxtb	r4, r4
 8087a9c:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 8087aa0:	e7ec      	b.n	8087a7c <_ZN9FatVolume6fatPutEmm+0x2a>

08087aa2 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8087aa2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8087aa6:	4605      	mov	r5, r0
 8087aa8:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8087aaa:	460f      	mov	r7, r1
 8087aac:	b9b9      	cbnz	r1, 8087ade <_ZN9FatVolume15allocateClusterEmPm+0x3c>
 8087aae:	68c6      	ldr	r6, [r0, #12]
 8087ab0:	4634      	mov	r4, r6
    if (find > m_lastCluster) {
 8087ab2:	69eb      	ldr	r3, [r5, #28]
    find++;
 8087ab4:	3401      	adds	r4, #1
      find = 2;
 8087ab6:	42a3      	cmp	r3, r4
 8087ab8:	bf38      	it	cc
 8087aba:	2402      	movcc	r4, #2
    int8_t fg = fatGet(find, &f);
 8087abc:	4628      	mov	r0, r5
 8087abe:	4621      	mov	r1, r4
 8087ac0:	aa01      	add	r2, sp, #4
 8087ac2:	f7ff ff95 	bl	80879f0 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8087ac6:	2800      	cmp	r0, #0
 8087ac8:	db04      	blt.n	8087ad4 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (fg && f == 0) {
 8087aca:	d001      	beq.n	8087ad0 <_ZN9FatVolume15allocateClusterEmPm+0x2e>
 8087acc:	9b01      	ldr	r3, [sp, #4]
 8087ace:	b143      	cbz	r3, 8087ae2 <_ZN9FatVolume15allocateClusterEmPm+0x40>
    if (find == start) {
 8087ad0:	42b4      	cmp	r4, r6
 8087ad2:	d1ee      	bne.n	8087ab2 <_ZN9FatVolume15allocateClusterEmPm+0x10>
  return false;
 8087ad4:	2600      	movs	r6, #0
}
 8087ad6:	4630      	mov	r0, r6
 8087ad8:	b002      	add	sp, #8
 8087ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087ade:	460e      	mov	r6, r1
 8087ae0:	e7e6      	b.n	8087ab0 <_ZN9FatVolume15allocateClusterEmPm+0xe>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8087ae2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8087ae6:	4621      	mov	r1, r4
 8087ae8:	4628      	mov	r0, r5
 8087aea:	f7ff ffb2 	bl	8087a52 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
 8087aee:	4606      	mov	r6, r0
 8087af0:	2800      	cmp	r0, #0
 8087af2:	d0ef      	beq.n	8087ad4 <_ZN9FatVolume15allocateClusterEmPm+0x32>
  if (current) {
 8087af4:	b17f      	cbz	r7, 8087b16 <_ZN9FatVolume15allocateClusterEmPm+0x74>
    if (!fatPut(current, find)) {
 8087af6:	4622      	mov	r2, r4
 8087af8:	4639      	mov	r1, r7
 8087afa:	4628      	mov	r0, r5
 8087afc:	f7ff ffa9 	bl	8087a52 <_ZN9FatVolume6fatPutEmm>
 8087b00:	2800      	cmp	r0, #0
 8087b02:	d0e7      	beq.n	8087ad4 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (m_freeClusterCount >= 0) {
 8087b04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8087b06:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8087b08:	bfa4      	itt	ge
 8087b0a:	f103 33ff 	addge.w	r3, r3, #4294967295
 8087b0e:	626b      	strge	r3, [r5, #36]	; 0x24
  *next = find;
 8087b10:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8087b14:	e7df      	b.n	8087ad6 <_ZN9FatVolume15allocateClusterEmPm+0x34>
    m_allocSearchStart = find;
 8087b16:	60ec      	str	r4, [r5, #12]
 8087b18:	e7f4      	b.n	8087b04 <_ZN9FatVolume15allocateClusterEmPm+0x62>

08087b1a <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8087b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8087b1c:	4604      	mov	r4, r0
 8087b1e:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8087b20:	4629      	mov	r1, r5
 8087b22:	4620      	mov	r0, r4
 8087b24:	aa01      	add	r2, sp, #4
 8087b26:	f7ff ff63 	bl	80879f0 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8087b2a:	1e06      	subs	r6, r0, #0
 8087b2c:	db13      	blt.n	8087b56 <_ZN9FatVolume9freeChainEm+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8087b2e:	2200      	movs	r2, #0
 8087b30:	4629      	mov	r1, r5
 8087b32:	4620      	mov	r0, r4
 8087b34:	f7ff ff8d 	bl	8087a52 <_ZN9FatVolume6fatPutEmm>
 8087b38:	b168      	cbz	r0, 8087b56 <_ZN9FatVolume9freeChainEm+0x3c>
    if (m_freeClusterCount >= 0) {
 8087b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8087b3c:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8087b3e:	bfa4      	itt	ge
 8087b40:	3301      	addge	r3, #1
 8087b42:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8087b44:	68e3      	ldr	r3, [r4, #12]
 8087b46:	42ab      	cmp	r3, r5
      m_allocSearchStart = cluster;
 8087b48:	bf88      	it	hi
 8087b4a:	60e5      	strhi	r5, [r4, #12]
    }
    cluster = next;
 8087b4c:	9d01      	ldr	r5, [sp, #4]
  } while (fg);
 8087b4e:	2e00      	cmp	r6, #0
 8087b50:	d1e6      	bne.n	8087b20 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8087b52:	b002      	add	sp, #8
 8087b54:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8087b56:	2000      	movs	r0, #0
 8087b58:	e7fb      	b.n	8087b52 <_ZN9FatVolume9freeChainEm+0x38>

08087b5a <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8087b5a:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 8087b5c:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 8087b5e:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8087b60:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 8087b62:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
 8087b66:	4604      	mov	r4, r0
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8087b68:	460d      	mov	r5, r1
  m_fatType = 0;
 8087b6a:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 8087b6c:	f100 0628 	add.w	r6, r0, #40	; 0x28
    m_vol = vol;
 8087b70:	62c0      	str	r0, [r0, #44]	; 0x2c
    m_status = 0;
 8087b72:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8087b76:	6303      	str	r3, [r0, #48]	; 0x30
    m_vol = vol;
 8087b78:	f8c0 0238 	str.w	r0, [r0, #568]	; 0x238
    m_status = 0;
 8087b7c:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8087b80:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  if (part) {
 8087b84:	b1b9      	cbz	r1, 8087bb6 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 8087b86:	2904      	cmp	r1, #4
 8087b88:	d901      	bls.n	8087b8e <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8087b8a:	2000      	movs	r0, #0
}
 8087b8c:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 8087b8e:	4611      	mov	r1, r2
 8087b90:	4630      	mov	r0, r6
 8087b92:	f7ff ff04 	bl	808799e <_ZN8FatCache4readEmh>
    if (!pc) {
 8087b96:	2800      	cmp	r0, #0
 8087b98:	d0f7      	beq.n	8087b8a <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8087b9a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8087b9e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8087ba2:	065b      	lsls	r3, r3, #25
 8087ba4:	d1f1      	bne.n	8087b8a <_ZN9FatVolume4initEh+0x30>
 8087ba6:	f105 011b 	add.w	r1, r5, #27
 8087baa:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8087bae:	f8d1 5006 	ldr.w	r5, [r1, #6]
 8087bb2:	2d00      	cmp	r5, #0
 8087bb4:	d0e9      	beq.n	8087b8a <_ZN9FatVolume4initEh+0x30>
 8087bb6:	2200      	movs	r2, #0
 8087bb8:	4629      	mov	r1, r5
 8087bba:	4630      	mov	r0, r6
 8087bbc:	f7ff feef 	bl	808799e <_ZN8FatCache4readEmh>
  if (!pc) {
 8087bc0:	2800      	cmp	r0, #0
 8087bc2:	d0e2      	beq.n	8087b8a <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 8087bc4:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8087bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8087bcc:	d1dd      	bne.n	8087b8a <_ZN9FatVolume4initEh+0x30>
 8087bce:	7c03      	ldrb	r3, [r0, #16]
 8087bd0:	2b02      	cmp	r3, #2
 8087bd2:	d1da      	bne.n	8087b8a <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 8087bd4:	89c3      	ldrh	r3, [r0, #14]
 8087bd6:	2b00      	cmp	r3, #0
 8087bd8:	d0d7      	beq.n	8087b8a <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8087bda:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 8087bdc:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8087bde:	1e4b      	subs	r3, r1, #1
 8087be0:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 8087be2:	2300      	movs	r3, #0
 8087be4:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8087be6:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8087be8:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8087bea:	4299      	cmp	r1, r3
 8087bec:	d007      	beq.n	8087bfe <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 8087bee:	3e01      	subs	r6, #1
 8087bf0:	d0cb      	beq.n	8087b8a <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8087bf2:	79a2      	ldrb	r2, [r4, #6]
 8087bf4:	005b      	lsls	r3, r3, #1
 8087bf6:	3201      	adds	r2, #1
 8087bf8:	b2db      	uxtb	r3, r3
 8087bfa:	71a2      	strb	r2, [r4, #6]
 8087bfc:	e7f5      	b.n	8087bea <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8087bfe:	8ac1      	ldrh	r1, [r0, #22]
 8087c00:	b901      	cbnz	r1, 8087c04 <_ZN9FatVolume4initEh+0xaa>
 8087c02:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8087c04:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8087c06:	89c3      	ldrh	r3, [r0, #14]
 8087c08:	442b      	add	r3, r5
 8087c0a:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8087c0c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8087c10:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8087c14:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8087c16:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8087c18:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 8087c1c:	0149      	lsls	r1, r1, #5
 8087c1e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8087c22:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 8087c26:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 8087c28:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 8087c2c:	b902      	cbnz	r2, 8087c30 <_ZN9FatVolume4initEh+0xd6>
 8087c2e:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8087c30:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 8087c32:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8087c34:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 8087c36:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 8087c38:	1c4b      	adds	r3, r1, #1
 8087c3a:	61e3      	str	r3, [r4, #28]
    m_freeClusterCount = value;
 8087c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8087c40:	6263      	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
 8087c42:	f640 73f4 	movw	r3, #4084	; 0xff4
 8087c46:	4299      	cmp	r1, r3
 8087c48:	d802      	bhi.n	8087c50 <_ZN9FatVolume4initEh+0xf6>
    m_fatType = 12;
 8087c4a:	230c      	movs	r3, #12
 8087c4c:	71e3      	strb	r3, [r4, #7]
 8087c4e:	e79c      	b.n	8087b8a <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 8087c50:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8087c54:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 8087c56:	bf89      	itett	hi
 8087c58:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 8087c5a:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 8087c5c:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8087c5e:	2320      	movhi	r3, #32
  return true;
 8087c60:	2001      	movs	r0, #1
    m_fatType = 32;
 8087c62:	71e3      	strb	r3, [r4, #7]
 8087c64:	e792      	b.n	8087b8c <_ZN9FatVolume4initEh+0x32>
	...

08087c68 <_ZN15Adafruit_BME680C1Ea>:
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
{
  _BME680_SoftwareSPI_MOSI = -1;
 8087c68:	22ff      	movs	r2, #255	; 0xff
  : _cs(cspin)
 8087c6a:	7701      	strb	r1, [r0, #28]
  _BME680_SoftwareSPI_MOSI = -1;
 8087c6c:	4904      	ldr	r1, [pc, #16]	; (8087c80 <_ZN15Adafruit_BME680C1Ea+0x18>)
 8087c6e:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 8087c70:	4904      	ldr	r1, [pc, #16]	; (8087c84 <_ZN15Adafruit_BME680C1Ea+0x1c>)
 8087c72:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8087c74:	4904      	ldr	r1, [pc, #16]	; (8087c88 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8087c76:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8087c78:	2200      	movs	r2, #0
 8087c7a:	6102      	str	r2, [r0, #16]
 8087c7c:	7502      	strb	r2, [r0, #20]
}
 8087c7e:	4770      	bx	lr
 8087c80:	20000cc1 	.word	0x20000cc1
 8087c84:	20000cc0 	.word	0x20000cc0
 8087c88:	20000cc2 	.word	0x20000cc2

08087c8c <_ZN15Adafruit_BME68014performReadingEv>:
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8087c8c:	2301      	movs	r3, #1
bool Adafruit_BME680::performReading(void) {
 8087c8e:	b530      	push	{r4, r5, lr}
 8087c90:	4604      	mov	r4, r0
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8087c92:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 8087c96:	7ca3      	ldrb	r3, [r4, #18]
  uint8_t set_required_settings = 0;
 8087c98:	7c40      	ldrb	r0, [r0, #17]
bool Adafruit_BME680::performReading(void) {
 8087c9a:	b087      	sub	sp, #28
  if (_humEnabled)
 8087c9c:	b10b      	cbz	r3, 8087ca2 <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 8087c9e:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8087ca2:	7ce3      	ldrb	r3, [r4, #19]
 8087ca4:	b10b      	cbz	r3, 8087caa <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 8087ca6:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8087caa:	7c23      	ldrb	r3, [r4, #16]
 8087cac:	b10b      	cbz	r3, 8087cb2 <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 8087cae:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8087cb2:	7d23      	ldrb	r3, [r4, #20]
 8087cb4:	b10b      	cbz	r3, 8087cba <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8087cb6:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8087cba:	f104 0520 	add.w	r5, r4, #32
 8087cbe:	4629      	mov	r1, r5
 8087cc0:	f7f8 fb0e 	bl	80802e0 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8087cc4:	b118      	cbz	r0, 8087cce <_ZN15Adafruit_BME68014performReadingEv+0x42>
    return false;
 8087cc6:	2500      	movs	r5, #0
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
}
 8087cc8:	4628      	mov	r0, r5
 8087cca:	b007      	add	sp, #28
 8087ccc:	bd30      	pop	{r4, r5, pc}
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8087cce:	4628      	mov	r0, r5
 8087cd0:	f7f8 fac7 	bl	8080262 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8087cd4:	2800      	cmp	r0, #0
 8087cd6:	d1f6      	bne.n	8087cc6 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8087cd8:	4629      	mov	r1, r5
 8087cda:	f10d 0002 	add.w	r0, sp, #2
 8087cde:	f7f8 fc79 	bl	80805d4 <bme680_get_profile_dur>
  delay(meas_period * 2); /* Delay till the measurement is ready */
 8087ce2:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8087ce6:	0040      	lsls	r0, r0, #1
 8087ce8:	f001 ff78 	bl	8089bdc <delay>
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8087cec:	4629      	mov	r1, r5
 8087cee:	a801      	add	r0, sp, #4
 8087cf0:	f7f8 fca4 	bl	808063c <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8087cf4:	2800      	cmp	r0, #0
 8087cf6:	d1e6      	bne.n	8087cc6 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  if (_tempEnabled) {
 8087cf8:	7c63      	ldrb	r3, [r4, #17]
 8087cfa:	b33b      	cbz	r3, 8087d4c <_ZN15Adafruit_BME68014performReadingEv+0xc0>
    temperature = data.temperature / 100.0;
 8087cfc:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8087d00:	f003 f946 	bl	808af90 <__aeabi_i2d>
 8087d04:	2200      	movs	r2, #0
 8087d06:	4b17      	ldr	r3, [pc, #92]	; (8087d64 <_ZN15Adafruit_BME68014performReadingEv+0xd8>)
 8087d08:	f003 fad6 	bl	808b2b8 <__aeabi_ddiv>
 8087d0c:	f003 fca2 	bl	808b654 <__aeabi_d2f>
  if (_humEnabled) {
 8087d10:	7ca3      	ldrb	r3, [r4, #18]
 8087d12:	6020      	str	r0, [r4, #0]
 8087d14:	b1e3      	cbz	r3, 8087d50 <_ZN15Adafruit_BME68014performReadingEv+0xc4>
    humidity = data.humidity / 1000.0;
 8087d16:	9804      	ldr	r0, [sp, #16]
 8087d18:	f003 f92a 	bl	808af70 <__aeabi_ui2d>
 8087d1c:	2200      	movs	r2, #0
 8087d1e:	4b12      	ldr	r3, [pc, #72]	; (8087d68 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8087d20:	f003 faca 	bl	808b2b8 <__aeabi_ddiv>
 8087d24:	f003 fc96 	bl	808b654 <__aeabi_d2f>
  if (_presEnabled) {
 8087d28:	7ce3      	ldrb	r3, [r4, #19]
 8087d2a:	60a0      	str	r0, [r4, #8]
 8087d2c:	b193      	cbz	r3, 8087d54 <_ZN15Adafruit_BME68014performReadingEv+0xc8>
    pressure = data.pressure;
 8087d2e:	9803      	ldr	r0, [sp, #12]
 8087d30:	f003 fd96 	bl	808b860 <__aeabi_ui2f>
  if (_gasEnabled) {
 8087d34:	7d25      	ldrb	r5, [r4, #20]
 8087d36:	6060      	str	r0, [r4, #4]
 8087d38:	b18d      	cbz	r5, 8087d5e <_ZN15Adafruit_BME68014performReadingEv+0xd2>
    if (data.status & BME680_HEAT_STAB_MSK) {
 8087d3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8087d3e:	06db      	lsls	r3, r3, #27
 8087d40:	d50a      	bpl.n	8087d58 <_ZN15Adafruit_BME68014performReadingEv+0xcc>
      gas_resistance = data.gas_resistance;
 8087d42:	9805      	ldr	r0, [sp, #20]
 8087d44:	f003 fd8c 	bl	808b860 <__aeabi_ui2f>
 8087d48:	60e0      	str	r0, [r4, #12]
 8087d4a:	e7bd      	b.n	8087cc8 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
    temperature = NAN;
 8087d4c:	4807      	ldr	r0, [pc, #28]	; (8087d6c <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8087d4e:	e7df      	b.n	8087d10 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    humidity = NAN;
 8087d50:	4806      	ldr	r0, [pc, #24]	; (8087d6c <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8087d52:	e7e9      	b.n	8087d28 <_ZN15Adafruit_BME68014performReadingEv+0x9c>
    pressure = NAN;
 8087d54:	4805      	ldr	r0, [pc, #20]	; (8087d6c <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8087d56:	e7ed      	b.n	8087d34 <_ZN15Adafruit_BME68014performReadingEv+0xa8>
      gas_resistance = 0;
 8087d58:	2300      	movs	r3, #0
 8087d5a:	60e3      	str	r3, [r4, #12]
 8087d5c:	e7b4      	b.n	8087cc8 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
  return true;
 8087d5e:	2501      	movs	r5, #1
 8087d60:	e7b2      	b.n	8087cc8 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
 8087d62:	bf00      	nop
 8087d64:	40590000 	.word	0x40590000
 8087d68:	408f4000 	.word	0x408f4000
 8087d6c:	7fc00000 	.word	0x7fc00000

08087d70 <_ZN7HIH61XX5startEv>:

uint8_t HIH61XX::start() {
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
 8087d70:	7983      	ldrb	r3, [r0, #6]
 8087d72:	f063 037f 	orn	r3, r3, #127	; 0x7f

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8087d76:	f023 030f 	bic.w	r3, r3, #15
 8087d7a:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 8087d7c:	2000      	movs	r0, #0
 8087d7e:	4770      	bx	lr

08087d80 <_ZN7HIH61XX4stopEv>:

uint8_t HIH61XX::stop() {
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
 8087d80:	7983      	ldrb	r3, [r0, #6]
 8087d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8087d86:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 8087d88:	2000      	movs	r0, #0
 8087d8a:	4770      	bx	lr

08087d8c <_ZN7HIH61XXC1Eh>:
HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 8087d8c:	4a03      	ldr	r2, [pc, #12]	; (8087d9c <_ZN7HIH61XXC1Eh+0x10>)
 8087d8e:	7101      	strb	r1, [r0, #4]
 8087d90:	6002      	str	r2, [r0, #0]
 8087d92:	2200      	movs	r2, #0
 8087d94:	7182      	strb	r2, [r0, #6]
 8087d96:	6082      	str	r2, [r0, #8]
}
 8087d98:	4770      	bx	lr
 8087d9a:	bf00      	nop
 8087d9c:	0808ffa8 	.word	0x0808ffa8

08087da0 <_ZN7HIH61XX6updateEv>:

uint8_t HIH61XX::update() {
 8087da0:	b570      	push	{r4, r5, r6, lr}
            return f & RunningFlag;
 8087da2:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8087da6:	4604      	mov	r4, r0
    if (!isRunning()) {
 8087da8:	2b00      	cmp	r3, #0
 8087daa:	db07      	blt.n	8087dbc <_ZN7HIH61XX6updateEv+0x1c>
        return setError(NotRunningError);
 8087dac:	2603      	movs	r6, #3
            f = (f & ~ErrorMask) | error;
 8087dae:	f023 030f 	bic.w	r3, r3, #15
 8087db2:	f043 0303 	orr.w	r3, r3, #3
 8087db6:	7183      	strb	r3, [r0, #6]
    } else {
        Serial.print("...");
        Serial.println(azer);
        return setError(ConnectionError);
    }
}
 8087db8:	4630      	mov	r0, r6
 8087dba:	bd70      	pop	{r4, r5, r6, pc}
    Wire.beginTransmission(a);
 8087dbc:	f002 ff34 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8087dc0:	7921      	ldrb	r1, [r4, #4]
 8087dc2:	f002 fdb9 	bl	808a938 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 8087dc6:	f002 ff2f 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8087dca:	f002 fdd8 	bl	808a97e <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 8087dce:	4606      	mov	r6, r0
 8087dd0:	2800      	cmp	r0, #0
 8087dd2:	d15b      	bne.n	8087e8c <_ZN7HIH61XX6updateEv+0xec>
            delay(10);
 8087dd4:	200a      	movs	r0, #10
 8087dd6:	f001 ff01 	bl	8089bdc <delay>
            Wire.requestFrom(a, (uint8_t) 4);
 8087dda:	f002 ff25 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8087dde:	2204      	movs	r2, #4
 8087de0:	7921      	ldrb	r1, [r4, #4]
 8087de2:	f002 fda6 	bl	808a932 <_ZN7TwoWire11requestFromEhj>
            if (Wire.available()) {
 8087de6:	f002 ff1f 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8087dea:	6803      	ldr	r3, [r0, #0]
 8087dec:	691b      	ldr	r3, [r3, #16]
 8087dee:	4798      	blx	r3
 8087df0:	2800      	cmp	r0, #0
 8087df2:	d043      	beq.n	8087e7c <_ZN7HIH61XX6updateEv+0xdc>
                x = Wire.read();
 8087df4:	f002 ff18 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8087df8:	6803      	ldr	r3, [r0, #0]
 8087dfa:	695b      	ldr	r3, [r3, #20]
 8087dfc:	4798      	blx	r3
 8087dfe:	4605      	mov	r5, r0
                y = Wire.read();
 8087e00:	f002 ff12 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8087e04:	6803      	ldr	r3, [r0, #0]
 8087e06:	695b      	ldr	r3, [r3, #20]
 8087e08:	4798      	blx	r3
                s = x >> 6;
 8087e0a:	f3c5 1381 	ubfx	r3, r5, #6, #2
                switch (s) {
 8087e0e:	2b01      	cmp	r3, #1
 8087e10:	d023      	beq.n	8087e5a <_ZN7HIH61XX6updateEv+0xba>
 8087e12:	2b02      	cmp	r3, #2
 8087e14:	d026      	beq.n	8087e64 <_ZN7HIH61XX6updateEv+0xc4>
 8087e16:	2b00      	cmp	r3, #0
 8087e18:	d1dc      	bne.n	8087dd4 <_ZN7HIH61XX6updateEv+0x34>
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 8087e1a:	022d      	lsls	r5, r5, #8
 8087e1c:	b2c0      	uxtb	r0, r0
 8087e1e:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
 8087e22:	4305      	orrs	r5, r0
 8087e24:	8125      	strh	r5, [r4, #8]
                        x = Wire.read();
 8087e26:	f002 feff 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8087e2a:	6803      	ldr	r3, [r0, #0]
 8087e2c:	695b      	ldr	r3, [r3, #20]
 8087e2e:	4798      	blx	r3
 8087e30:	4605      	mov	r5, r0
                        y = Wire.read();
 8087e32:	f002 fef9 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8087e36:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8087e38:	022d      	lsls	r5, r5, #8
                        y = Wire.read();
 8087e3a:	695b      	ldr	r3, [r3, #20]
 8087e3c:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8087e3e:	b2ad      	uxth	r5, r5
 8087e40:	b2c0      	uxtb	r0, r0
 8087e42:	4305      	orrs	r5, r0
 8087e44:	10ad      	asrs	r5, r5, #2
 8087e46:	8165      	strh	r5, [r4, #10]
                        Wire.endTransmission();
 8087e48:	f002 feee 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8087e4c:	f002 fd97 	bl	808a97e <_ZN7TwoWire15endTransmissionEv>
 8087e50:	79a3      	ldrb	r3, [r4, #6]
 8087e52:	f023 030f 	bic.w	r3, r3, #15
 8087e56:	71a3      	strb	r3, [r4, #6]
                        return setError(0);
 8087e58:	e7ae      	b.n	8087db8 <_ZN7HIH61XX6updateEv+0x18>
                        Wire.endTransmission();
 8087e5a:	f002 fee5 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8087e5e:	f002 fd8e 	bl	808a97e <_ZN7TwoWire15endTransmissionEv>
                        break;
 8087e62:	e7b7      	b.n	8087dd4 <_ZN7HIH61XX6updateEv+0x34>
                        Wire.endTransmission();
 8087e64:	f002 fee0 	bl	808ac28 <_Z19__fetch_global_Wirev>
 8087e68:	f002 fd89 	bl	808a97e <_ZN7TwoWire15endTransmissionEv>
 8087e6c:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 8087e6e:	2604      	movs	r6, #4
 8087e70:	f023 030f 	bic.w	r3, r3, #15
 8087e74:	f043 0304 	orr.w	r3, r3, #4
 8087e78:	71a3      	strb	r3, [r4, #6]
 8087e7a:	e79d      	b.n	8087db8 <_ZN7HIH61XX6updateEv+0x18>
 8087e7c:	79a3      	ldrb	r3, [r4, #6]
                return setError(CommunicationError);
 8087e7e:	2602      	movs	r6, #2
 8087e80:	f023 030f 	bic.w	r3, r3, #15
 8087e84:	f043 0302 	orr.w	r3, r3, #2
 8087e88:	71a3      	strb	r3, [r4, #6]
 8087e8a:	e795      	b.n	8087db8 <_ZN7HIH61XX6updateEv+0x18>
        Serial.print("...");
 8087e8c:	f002 fb8a 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8087e90:	490a      	ldr	r1, [pc, #40]	; (8087ebc <_ZN7HIH61XX6updateEv+0x11c>)
 8087e92:	f001 fb1b 	bl	80894cc <_ZN5Print5printEPKc>
        Serial.println(azer);
 8087e96:	f002 fb85 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8087e9a:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8087e9c:	4631      	mov	r1, r6
 8087e9e:	220a      	movs	r2, #10
 8087ea0:	f001 fb3b 	bl	808951a <_ZN5Print11printNumberEmh>
        n += println();
 8087ea4:	4628      	mov	r0, r5
 8087ea6:	f001 fb18 	bl	80894da <_ZN5Print7printlnEv>
 8087eaa:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 8087eac:	2601      	movs	r6, #1
 8087eae:	f023 030f 	bic.w	r3, r3, #15
 8087eb2:	f043 0301 	orr.w	r3, r3, #1
 8087eb6:	71a3      	strb	r3, [r4, #6]
 8087eb8:	e77e      	b.n	8087db8 <_ZN7HIH61XX6updateEv+0x18>
 8087eba:	bf00      	nop
 8087ebc:	0808fc00 	.word	0x0808fc00

08087ec0 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8087ec0:	2a68      	cmp	r2, #104	; 0x68
uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 8087ec2:	b538      	push	{r3, r4, r5, lr}
 8087ec4:	460d      	mov	r5, r1
    switch (command) {
 8087ec6:	d01a      	beq.n	8087efe <_ZN7HIH61XX14commandProcessER6Streamh+0x3e>
 8087ec8:	d80c      	bhi.n	8087ee4 <_ZN7HIH61XX14commandProcessER6Streamh+0x24>
 8087eca:	2a31      	cmp	r2, #49	; 0x31
 8087ecc:	d038      	beq.n	8087f40 <_ZN7HIH61XX14commandProcessER6Streamh+0x80>
 8087ece:	2a61      	cmp	r2, #97	; 0x61
 8087ed0:	d030      	beq.n	8087f34 <_ZN7HIH61XX14commandProcessER6Streamh+0x74>
 8087ed2:	2a30      	cmp	r2, #48	; 0x30
 8087ed4:	d038      	beq.n	8087f48 <_ZN7HIH61XX14commandProcessER6Streamh+0x88>
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 8087ed6:	220a      	movs	r2, #10
 8087ed8:	21fe      	movs	r1, #254	; 0xfe
 8087eda:	4628      	mov	r0, r5
 8087edc:	f7fe fb64 	bl	80865a8 <_ZN5Print7printlnIhLi0EEEjT_i>
            //  stop
        case '0':
            return commandReply(stream, stop());
    }

    return commandReply(stream, 254);
 8087ee0:	24fe      	movs	r4, #254	; 0xfe
 8087ee2:	e018      	b.n	8087f16 <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
    switch (command) {
 8087ee4:	2a74      	cmp	r2, #116	; 0x74
 8087ee6:	d018      	beq.n	8087f1a <_ZN7HIH61XX14commandProcessER6Streamh+0x5a>
 8087ee8:	2a75      	cmp	r2, #117	; 0x75
 8087eea:	d1f4      	bne.n	8087ed6 <_ZN7HIH61XX14commandProcessER6Streamh+0x16>
            return commandReply(stream, update());
 8087eec:	f7ff ff58 	bl	8087da0 <_ZN7HIH61XX6updateEv>
            return commandReply(stream, stop());
 8087ef0:	4604      	mov	r4, r0
 8087ef2:	4601      	mov	r1, r0
 8087ef4:	220a      	movs	r2, #10
 8087ef6:	4628      	mov	r0, r5
 8087ef8:	f7fe fb56 	bl	80865a8 <_ZN5Print7printlnIhLi0EEEjT_i>
 8087efc:	e00b      	b.n	8087f16 <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
            return float(raw) / 16382;
 8087efe:	8900      	ldrh	r0, [r0, #8]
 8087f00:	f003 fcae 	bl	808b860 <__aeabi_ui2f>
 8087f04:	4912      	ldr	r1, [pc, #72]	; (8087f50 <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 8087f06:	f003 fdb7 	bl	808ba78 <__aeabi_fdiv>
            return (float(raw) / 16382) * 165 - 40;
 8087f0a:	4601      	mov	r1, r0
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 8087f0c:	2202      	movs	r2, #2
 8087f0e:	4628      	mov	r0, r5
 8087f10:	f001 fbee 	bl	80896f0 <_ZN5Print7printlnEfi>
            return commandReply(stream, 0, temperature());
 8087f14:	2400      	movs	r4, #0
}
 8087f16:	4620      	mov	r0, r4
 8087f18:	bd38      	pop	{r3, r4, r5, pc}
            return (float(raw) / 16382) * 165 - 40;
 8087f1a:	8940      	ldrh	r0, [r0, #10]
 8087f1c:	f003 fca0 	bl	808b860 <__aeabi_ui2f>
 8087f20:	490b      	ldr	r1, [pc, #44]	; (8087f50 <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 8087f22:	f003 fda9 	bl	808ba78 <__aeabi_fdiv>
 8087f26:	490b      	ldr	r1, [pc, #44]	; (8087f54 <_ZN7HIH61XX14commandProcessER6Streamh+0x94>)
 8087f28:	f003 fcf2 	bl	808b910 <__aeabi_fmul>
 8087f2c:	490a      	ldr	r1, [pc, #40]	; (8087f58 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8087f2e:	f003 fbe5 	bl	808b6fc <__aeabi_fsub>
 8087f32:	e7ea      	b.n	8087f0a <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
            stream.println(data);
 8087f34:	7901      	ldrb	r1, [r0, #4]
 8087f36:	220a      	movs	r2, #10
 8087f38:	4628      	mov	r0, r5
 8087f3a:	f7fe fb35 	bl	80865a8 <_ZN5Print7printlnIhLi0EEEjT_i>
 8087f3e:	e7e9      	b.n	8087f14 <_ZN7HIH61XX14commandProcessER6Streamh+0x54>
            return commandReply(stream, start());
 8087f40:	6803      	ldr	r3, [r0, #0]
 8087f42:	681b      	ldr	r3, [r3, #0]
            return commandReply(stream, stop());
 8087f44:	4798      	blx	r3
 8087f46:	e7d3      	b.n	8087ef0 <_ZN7HIH61XX14commandProcessER6Streamh+0x30>
 8087f48:	6803      	ldr	r3, [r0, #0]
 8087f4a:	685b      	ldr	r3, [r3, #4]
 8087f4c:	e7fa      	b.n	8087f44 <_ZN7HIH61XX14commandProcessER6Streamh+0x84>
 8087f4e:	bf00      	nop
 8087f50:	467ff800 	.word	0x467ff800
 8087f54:	43250000 	.word	0x43250000
 8087f58:	42200000 	.word	0x42200000

08087f5c <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8087f5c:	b510      	push	{r4, lr}
 8087f5e:	4604      	mov	r4, r0
 8087f60:	4b05      	ldr	r3, [pc, #20]	; (8087f78 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 8087f62:	f840 3b2c 	str.w	r3, [r0], #44
 8087f66:	f001 f8a3 	bl	80890b0 <_ZN6StringD1Ev>
 8087f6a:	f104 000c 	add.w	r0, r4, #12
 8087f6e:	f001 f89f 	bl	80890b0 <_ZN6StringD1Ev>

}
 8087f72:	4620      	mov	r0, r4
 8087f74:	bd10      	pop	{r4, pc}
 8087f76:	bf00      	nop
 8087f78:	0808ffd0 	.word	0x0808ffd0

08087f7c <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8087f7c:	b510      	push	{r4, lr}
 8087f7e:	4604      	mov	r4, r0
}
 8087f80:	f7ff ffec 	bl	8087f5c <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8087f84:	4620      	mov	r0, r4
 8087f86:	2144      	movs	r1, #68	; 0x44
 8087f88:	f002 fea3 	bl	808acd2 <_ZdlPvj>
 8087f8c:	4620      	mov	r0, r4
 8087f8e:	bd10      	pop	{r4, pc}

08087f90 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8087f90:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8087f92:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8087f94:	4604      	mov	r4, r0
      if (_M_manager)
 8087f96:	b113      	cbz	r3, 8087f9e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8087f98:	2203      	movs	r2, #3
 8087f9a:	4601      	mov	r1, r0
 8087f9c:	4798      	blx	r3
    }
 8087f9e:	4620      	mov	r0, r4
 8087fa0:	bd10      	pop	{r4, pc}
	...

08087fa4 <_ZN23GoogleMapsDeviceLocatorC1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8087fa4:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8087fa6:	4b0f      	ldr	r3, [pc, #60]	; (8087fe4 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
 8087fa8:	2500      	movs	r5, #0
 8087faa:	6003      	str	r3, [r0, #0]
 8087fac:	f242 7310 	movw	r3, #10000	; 0x2710
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8087fb0:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8087fb2:	e9c0 5301 	strd	r5, r3, [r0, #4]
 8087fb6:	490c      	ldr	r1, [pc, #48]	; (8087fe8 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8087fb8:	300c      	adds	r0, #12
 8087fba:	f001 f8c3 	bl	8089144 <_ZN6StringC1EPKc>
 8087fbe:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8087fc2:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8087fc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8087fc8:	4908      	ldr	r1, [pc, #32]	; (8087fec <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8087fca:	6265      	str	r5, [r4, #36]	; 0x24
 8087fcc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8087fd0:	f001 f8b8 	bl	8089144 <_ZN6StringC1EPKc>
 8087fd4:	f44f 729b 	mov.w	r2, #310	; 0x136
 8087fd8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
}
 8087fdc:	4620      	mov	r0, r4
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8087fde:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
}
 8087fe2:	bd38      	pop	{r3, r4, r5, pc}
 8087fe4:	0808ffd0 	.word	0x0808ffd0
 8087fe8:	0808ffb4 	.word	0x0808ffb4
 8087fec:	0808ffc2 	.word	0x0808ffc2

08087ff0 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8087ff0:	2201      	movs	r2, #1
 8087ff2:	4b01      	ldr	r3, [pc, #4]	; (8087ff8 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
 8087ff4:	701a      	strb	r2, [r3, #0]
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
 8087ff6:	4770      	bx	lr
 8087ff8:	20000cc3 	.word	0x20000cc3

08087ffc <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8087ffc:	b430      	push	{r4, r5}
 8087ffe:	4605      	mov	r5, r0
 8088000:	4618      	mov	r0, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8088002:	681b      	ldr	r3, [r3, #0]
 8088004:	681c      	ldr	r4, [r3, #0]
 8088006:	4613      	mov	r3, r2
 8088008:	46a4      	mov	ip, r4
 808800a:	460a      	mov	r2, r1
 808800c:	4629      	mov	r1, r5
}
 808800e:	bc30      	pop	{r4, r5}
	return presp->parse(type, buf, len);
 8088010:	4760      	bx	ip
	...

08088014 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8088014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8088018:	460c      	mov	r4, r1
 808801a:	b08d      	sub	sp, #52	; 0x34
	String typeStr;
 808801c:	494d      	ldr	r1, [pc, #308]	; (8088154 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 808801e:	a804      	add	r0, sp, #16
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8088020:	4616      	mov	r6, r2
 8088022:	461d      	mov	r5, r3
	String typeStr;
 8088024:	f001 f88e 	bl	8089144 <_ZN6StringC1EPKc>
	switch(type) {
 8088028:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 808802c:	d064      	beq.n	80880f8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe4>
 808802e:	dc1f      	bgt.n	8088070 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5c>
 8088030:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8088034:	d05c      	beq.n	80880f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8088036:	dc13      	bgt.n	8088060 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x4c>
 8088038:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 808803c:	d056      	beq.n	80880ec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd8>
 808803e:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8088042:	d055      	beq.n	80880f0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8088044:	b35c      	cbz	r4, 808809e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8a>
		typeStr = String::format("type=0x%x", type);
 8088046:	4622      	mov	r2, r4
 8088048:	a808      	add	r0, sp, #32
 808804a:	4943      	ldr	r1, [pc, #268]	; (8088158 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 808804c:	f001 fa00 	bl	8089450 <_ZN6String6formatEPKcz>
 8088050:	a908      	add	r1, sp, #32
 8088052:	a804      	add	r0, sp, #16
 8088054:	f001 f8c0 	bl	80891d8 <_ZN6StringaSEOS_>
 8088058:	a808      	add	r0, sp, #32
 808805a:	f001 f829 	bl	80890b0 <_ZN6StringD1Ev>
		break;
 808805e:	e022      	b.n	80880a6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x92>
	switch(type) {
 8088060:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8088064:	d046      	beq.n	80880f4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe0>
 8088066:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 808806a:	d1ec      	bne.n	8088046 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_NOCARRIER";
 808806c:	493b      	ldr	r1, [pc, #236]	; (808815c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
 808806e:	e017      	b.n	80880a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8088070:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8088074:	d046      	beq.n	8088104 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8088076:	dc0a      	bgt.n	808808e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7a>
 8088078:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 808807c:	d03e      	beq.n	80880fc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe8>
 808807e:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8088082:	d03d      	beq.n	8088100 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xec>
 8088084:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8088088:	d1dd      	bne.n	8088046 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_BUSY";
 808808a:	4935      	ldr	r1, [pc, #212]	; (8088160 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 808808c:	e008      	b.n	80880a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 808808e:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8088092:	d037      	beq.n	8088104 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8088094:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8088098:	d1d5      	bne.n	8088046 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_ABORTED";
 808809a:	4932      	ldr	r1, [pc, #200]	; (8088164 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 808809c:	e000      	b.n	80880a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_UNKNOWN";
 808809e:	4932      	ldr	r1, [pc, #200]	; (8088168 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
		typeStr = "TYPE_OK";
 80880a0:	a804      	add	r0, sp, #16
 80880a2:	f001 f8a1 	bl	80891e8 <_ZN6StringaSEPKc>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 80880a6:	462b      	mov	r3, r5
 80880a8:	9a04      	ldr	r2, [sp, #16]
 80880aa:	4930      	ldr	r1, [pc, #192]	; (808816c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 80880ac:	4830      	ldr	r0, [pc, #192]	; (8088170 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 80880ae:	f7f8 fcff 	bl	8080ab0 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 80880b2:	4928      	ldr	r1, [pc, #160]	; (8088154 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 80880b4:	a808      	add	r0, sp, #32
 80880b6:	f001 f845 	bl	8089144 <_ZN6StringC1EPKc>
	for(int ii = 0; ii < len; ii++) {
 80880ba:	2400      	movs	r4, #0
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 80880bc:	4f2d      	ldr	r7, [pc, #180]	; (8088174 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80880be:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8088194 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x180>
 80880c2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8088198 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x184>
	for(int ii = 0; ii < len; ii++) {
 80880c6:	42ac      	cmp	r4, r5
 80880c8:	da35      	bge.n	8088136 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x122>
		if (buf[ii] == '\n') {
 80880ca:	5d31      	ldrb	r1, [r6, r4]
 80880cc:	290a      	cmp	r1, #10
 80880ce:	d11b      	bne.n	8088108 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf4>
 80880d0:	4649      	mov	r1, r9
 80880d2:	a808      	add	r0, sp, #32
 80880d4:	f001 f918 	bl	8089308 <_ZN6String6concatEPKc>
			Log.info(out);
 80880d8:	9908      	ldr	r1, [sp, #32]
 80880da:	4825      	ldr	r0, [pc, #148]	; (8088170 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 80880dc:	f7f8 fce8 	bl	8080ab0 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 80880e0:	491c      	ldr	r1, [pc, #112]	; (8088154 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 80880e2:	a808      	add	r0, sp, #32
 80880e4:	f001 f880 	bl	80891e8 <_ZN6StringaSEPKc>
	for(int ii = 0; ii < len; ii++) {
 80880e8:	3401      	adds	r4, #1
 80880ea:	e7ec      	b.n	80880c6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb2>
		typeStr = "TYPE_OK";
 80880ec:	4922      	ldr	r1, [pc, #136]	; (8088178 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 80880ee:	e7d7      	b.n	80880a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_ERROR";
 80880f0:	4922      	ldr	r1, [pc, #136]	; (808817c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 80880f2:	e7d5      	b.n	80880a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_CONNECT";
 80880f4:	4922      	ldr	r1, [pc, #136]	; (8088180 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 80880f6:	e7d3      	b.n	80880a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NODIALTONE";
 80880f8:	4922      	ldr	r1, [pc, #136]	; (8088184 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 80880fa:	e7d1      	b.n	80880a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NOANSWER";
 80880fc:	4922      	ldr	r1, [pc, #136]	; (8088188 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 80880fe:	e7cf      	b.n	80880a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PROMPT";
 8088100:	4922      	ldr	r1, [pc, #136]	; (808818c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8088102:	e7cd      	b.n	80880a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PLUS";
 8088104:	4922      	ldr	r1, [pc, #136]	; (8088190 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8088106:	e7cb      	b.n	80880a0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		if (buf[ii] == '\r') {
 8088108:	290d      	cmp	r1, #13
 808810a:	d104      	bne.n	8088116 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x102>
 808810c:	4641      	mov	r1, r8
			out.concat(hex);
 808810e:	a808      	add	r0, sp, #32
 8088110:	f001 f8fa 	bl	8089308 <_ZN6String6concatEPKc>
 8088114:	e7e8      	b.n	80880e8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8088116:	f1a1 0320 	sub.w	r3, r1, #32
 808811a:	2b5e      	cmp	r3, #94	; 0x5e
 808811c:	d907      	bls.n	808812e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11a>
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 808811e:	460b      	mov	r3, r1
 8088120:	463a      	mov	r2, r7
 8088122:	210a      	movs	r1, #10
 8088124:	a801      	add	r0, sp, #4
 8088126:	f000 fc5f 	bl	80889e8 <snprintf>
			out.concat(hex);
 808812a:	a901      	add	r1, sp, #4
 808812c:	e7ef      	b.n	808810e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xfa>
			out.concat(buf[ii]);
 808812e:	a808      	add	r0, sp, #32
 8088130:	f001 f8f9 	bl	8089326 <_ZN6String6concatEc>
 8088134:	e7d8      	b.n	80880e8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
	if (out.length() > 0) {
 8088136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8088138:	b11b      	cbz	r3, 8088142 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x12e>
		Log.info(out);
 808813a:	9908      	ldr	r1, [sp, #32]
 808813c:	480c      	ldr	r0, [pc, #48]	; (8088170 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 808813e:	f7f8 fcb7 	bl	8080ab0 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8088142:	a808      	add	r0, sp, #32
 8088144:	f000 ffb4 	bl	80890b0 <_ZN6StringD1Ev>
	String typeStr;
 8088148:	a804      	add	r0, sp, #16
 808814a:	f000 ffb1 	bl	80890b0 <_ZN6StringD1Ev>
}
 808814e:	b00d      	add	sp, #52	; 0x34
 8088150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8088154:	080900b9 	.word	0x080900b9
 8088158:	0809005f 	.word	0x0809005f
 808815c:	08090005 	.word	0x08090005
 8088160:	08090024 	.word	0x08090024
 8088164:	08090052 	.word	0x08090052
 8088168:	0808ffd8 	.word	0x0808ffd8
 808816c:	08090069 	.word	0x08090069
 8088170:	20000cd8 	.word	0x20000cd8
 8088174:	08090090 	.word	0x08090090
 8088178:	0808ffe5 	.word	0x0808ffe5
 808817c:	0808ffed 	.word	0x0808ffed
 8088180:	0808fff8 	.word	0x0808fff8
 8088184:	08090014 	.word	0x08090014
 8088188:	0809002e 	.word	0x0809002e
 808818c:	0809003c 	.word	0x0809003c
 8088190:	08090048 	.word	0x08090048
 8088194:	0809008d 	.word	0x0809008d
 8088198:	0809008a 	.word	0x0809008a

0808819c <_ZN32CellularHelperPlusStringResponseC1Ev>:
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 808819c:	b538      	push	{r3, r4, r5, lr}
class CellularHelperCommonResponse {
 808819e:	f06f 0302 	mvn.w	r3, #2
 80881a2:	6043      	str	r3, [r0, #4]
 80881a4:	2300      	movs	r3, #0
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80881a6:	4604      	mov	r4, r0
 80881a8:	4d07      	ldr	r5, [pc, #28]	; (80881c8 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
class CellularHelperCommonResponse {
 80881aa:	7203      	strb	r3, [r0, #8]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80881ac:	4b07      	ldr	r3, [pc, #28]	; (80881cc <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 80881ae:	4629      	mov	r1, r5
 80881b0:	f840 3b0c 	str.w	r3, [r0], #12
 80881b4:	f000 ffc6 	bl	8089144 <_ZN6StringC1EPKc>
 80881b8:	4629      	mov	r1, r5
 80881ba:	f104 001c 	add.w	r0, r4, #28
 80881be:	f000 ffc1 	bl	8089144 <_ZN6StringC1EPKc>
 80881c2:	4620      	mov	r0, r4
 80881c4:	bd38      	pop	{r3, r4, r5, pc}
 80881c6:	bf00      	nop
 80881c8:	080900b9 	.word	0x080900b9
 80881cc:	080900d8 	.word	0x080900d8

080881d0 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 80881d0:	b510      	push	{r4, lr}
 80881d2:	4604      	mov	r4, r0
 80881d4:	4b05      	ldr	r3, [pc, #20]	; (80881ec <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 80881d6:	f840 3b1c 	str.w	r3, [r0], #28
 80881da:	f000 ff69 	bl	80890b0 <_ZN6StringD1Ev>
 80881de:	f104 000c 	add.w	r0, r4, #12
 80881e2:	f000 ff65 	bl	80890b0 <_ZN6StringD1Ev>
 80881e6:	4620      	mov	r0, r4
 80881e8:	bd10      	pop	{r4, pc}
 80881ea:	bf00      	nop
 80881ec:	080900d8 	.word	0x080900d8

080881f0 <_ZN28CellularHelperStringResponseC1Ev>:
class CellularHelperCommonResponse {
 80881f0:	f06f 0302 	mvn.w	r3, #2
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 80881f4:	b510      	push	{r4, lr}
class CellularHelperCommonResponse {
 80881f6:	6043      	str	r3, [r0, #4]
 80881f8:	2300      	movs	r3, #0
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 80881fa:	4604      	mov	r4, r0
class CellularHelperCommonResponse {
 80881fc:	7203      	strb	r3, [r0, #8]
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 80881fe:	4b04      	ldr	r3, [pc, #16]	; (8088210 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 8088200:	4904      	ldr	r1, [pc, #16]	; (8088214 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 8088202:	f840 3b0c 	str.w	r3, [r0], #12
 8088206:	f000 ff9d 	bl	8089144 <_ZN6StringC1EPKc>
 808820a:	4620      	mov	r0, r4
 808820c:	bd10      	pop	{r4, pc}
 808820e:	bf00      	nop
 8088210:	080900cc 	.word	0x080900cc
 8088214:	080900b9 	.word	0x080900b9

08088218 <_ZN28CellularHelperStringResponseD1Ev>:
 8088218:	b510      	push	{r4, lr}
 808821a:	4604      	mov	r4, r0
 808821c:	4b03      	ldr	r3, [pc, #12]	; (808822c <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 808821e:	f840 3b0c 	str.w	r3, [r0], #12
 8088222:	f000 ff45 	bl	80890b0 <_ZN6StringD1Ev>
 8088226:	4620      	mov	r0, r4
 8088228:	bd10      	pop	{r4, pc}
 808822a:	bf00      	nop
 808822c:	080900cc 	.word	0x080900cc

08088230 <_ZNK19CellularHelperClass15getManufacturerEv>:
String CellularHelperClass::getManufacturer() const {
 8088230:	b510      	push	{r4, lr}
 8088232:	4604      	mov	r4, r0
 8088234:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8088236:	a801      	add	r0, sp, #4
 8088238:	f7ff ffda 	bl	80881f0 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808823c:	f242 7210 	movw	r2, #10000	; 0x2710
 8088240:	4b07      	ldr	r3, [pc, #28]	; (8088260 <_ZNK19CellularHelperClass15getManufacturerEv+0x30>)
 8088242:	a901      	add	r1, sp, #4
 8088244:	4807      	ldr	r0, [pc, #28]	; (8088264 <_ZNK19CellularHelperClass15getManufacturerEv+0x34>)
 8088246:	f000 fa73 	bl	8088730 <cellular_command>
	return resp.string;
 808824a:	a904      	add	r1, sp, #16
 808824c:	4620      	mov	r0, r4
 808824e:	f000 ffb8 	bl	80891c2 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 8088252:	a801      	add	r0, sp, #4
 8088254:	f7ff ffe0 	bl	8088218 <_ZN28CellularHelperStringResponseD1Ev>
}
 8088258:	4620      	mov	r0, r4
 808825a:	b008      	add	sp, #32
 808825c:	bd10      	pop	{r4, pc}
 808825e:	bf00      	nop
 8088260:	08090097 	.word	0x08090097
 8088264:	08087ffd 	.word	0x08087ffd

08088268 <_ZNK19CellularHelperClass7getIMEIEv>:
String CellularHelperClass::getIMEI() const {
 8088268:	b510      	push	{r4, lr}
 808826a:	4604      	mov	r4, r0
 808826c:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808826e:	a801      	add	r0, sp, #4
 8088270:	f7ff ffbe 	bl	80881f0 <_ZN28CellularHelperStringResponseC1Ev>
 8088274:	f242 7210 	movw	r2, #10000	; 0x2710
 8088278:	4b07      	ldr	r3, [pc, #28]	; (8088298 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 808827a:	a901      	add	r1, sp, #4
 808827c:	4807      	ldr	r0, [pc, #28]	; (808829c <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 808827e:	f000 fa57 	bl	8088730 <cellular_command>
	return resp.string;
 8088282:	a904      	add	r1, sp, #16
 8088284:	4620      	mov	r0, r4
 8088286:	f000 ff9c 	bl	80891c2 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808828a:	a801      	add	r0, sp, #4
 808828c:	f7ff ffc4 	bl	8088218 <_ZN28CellularHelperStringResponseD1Ev>
}
 8088290:	4620      	mov	r0, r4
 8088292:	b008      	add	sp, #32
 8088294:	bd10      	pop	{r4, pc}
 8088296:	bf00      	nop
 8088298:	080900a1 	.word	0x080900a1
 808829c:	08087ffd 	.word	0x08087ffd

080882a0 <_ZNK19CellularHelperClass7getIMSIEv>:
 80882a0:	b510      	push	{r4, lr}
 80882a2:	4604      	mov	r4, r0
 80882a4:	f7ff ffc4 	bl	8088230 <_ZNK19CellularHelperClass15getManufacturerEv>
 80882a8:	4620      	mov	r0, r4
 80882aa:	bd10      	pop	{r4, pc}

080882ac <_ZNK19CellularHelperClass8getICCIDEv>:
String CellularHelperClass::getICCID() const {
 80882ac:	b510      	push	{r4, lr}
 80882ae:	4604      	mov	r4, r0
 80882b0:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 80882b2:	a801      	add	r0, sp, #4
 80882b4:	f7ff ff72 	bl	808819c <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 80882b8:	490a      	ldr	r1, [pc, #40]	; (80882e4 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 80882ba:	a804      	add	r0, sp, #16
 80882bc:	f000 ff94 	bl	80891e8 <_ZN6StringaSEPKc>
 80882c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80882c4:	4b08      	ldr	r3, [pc, #32]	; (80882e8 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 80882c6:	a901      	add	r1, sp, #4
 80882c8:	4808      	ldr	r0, [pc, #32]	; (80882ec <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 80882ca:	f000 fa31 	bl	8088730 <cellular_command>
	return resp.string;
 80882ce:	a908      	add	r1, sp, #32
 80882d0:	4620      	mov	r0, r4
 80882d2:	f000 ff76 	bl	80891c2 <_ZN6StringC1ERKS_>
	CellularHelperPlusStringResponse resp;
 80882d6:	a801      	add	r0, sp, #4
 80882d8:	f7ff ff7a 	bl	80881d0 <_ZN32CellularHelperPlusStringResponseD1Ev>
}
 80882dc:	4620      	mov	r0, r4
 80882de:	b00c      	add	sp, #48	; 0x30
 80882e0:	bd10      	pop	{r4, pc}
 80882e2:	bf00      	nop
 80882e4:	080900ab 	.word	0x080900ab
 80882e8:	080900b0 	.word	0x080900b0
 80882ec:	08087ffd 	.word	0x08087ffd

080882f0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 80882f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80882f4:	460c      	mov	r4, r1
 80882f6:	461e      	mov	r6, r3
	str.reserve(str.length() + (size_t)len + 1);
 80882f8:	1c59      	adds	r1, r3, #1
 80882fa:	68a3      	ldr	r3, [r4, #8]
 80882fc:	4620      	mov	r0, r4
 80882fe:	4419      	add	r1, r3
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8088300:	4617      	mov	r7, r2
 8088302:	f89d 8018 	ldrb.w	r8, [sp, #24]
	for(int ii = 0; ii < len; ii++) {
 8088306:	2500      	movs	r5, #0
	str.reserve(str.length() + (size_t)len + 1);
 8088308:	f000 fef0 	bl	80890ec <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 808830c:	42b5      	cmp	r5, r6
 808830e:	da0c      	bge.n	808832a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 8088310:	5d79      	ldrb	r1, [r7, r5]
 8088312:	f1b8 0f00 	cmp.w	r8, #0
 8088316:	d003      	beq.n	8088320 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x30>
 8088318:	290d      	cmp	r1, #13
 808831a:	d004      	beq.n	8088326 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
 808831c:	290a      	cmp	r1, #10
 808831e:	d002      	beq.n	8088326 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
			str.concat(buf[ii]);
 8088320:	4620      	mov	r0, r4
 8088322:	f001 f800 	bl	8089326 <_ZN6String6concatEc>
	for(int ii = 0; ii < len; ii++) {
 8088326:	3501      	adds	r5, #1
 8088328:	e7f0      	b.n	808830c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
}
 808832a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08088330 <_ZN28CellularHelperStringResponse5parseEiPKci>:
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8088330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 8088332:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8088336:	4604      	mov	r4, r0
 8088338:	460f      	mov	r7, r1
 808833a:	4615      	mov	r5, r2
 808833c:	461e      	mov	r6, r3
	if (enableDebug) {
 808833e:	f1bc 0f00 	cmp.w	ip, #0
 8088342:	d001      	beq.n	8088348 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 8088344:	f7ff fe66 	bl	8088014 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_UNKNOWN) {
 8088348:	b947      	cbnz	r7, 808835c <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 808834a:	2301      	movs	r3, #1
 808834c:	462a      	mov	r2, r5
 808834e:	9300      	str	r3, [sp, #0]
 8088350:	4804      	ldr	r0, [pc, #16]	; (8088364 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 8088352:	4633      	mov	r3, r6
 8088354:	f104 010c 	add.w	r1, r4, #12
 8088358:	f7ff ffca 	bl	80882f0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
}
 808835c:	f04f 30ff 	mov.w	r0, #4294967295
 8088360:	b003      	add	sp, #12
 8088362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8088364:	20000cc4 	.word	0x20000cc4

08088368 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8088368:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 808836a:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808836e:	4606      	mov	r6, r0
 8088370:	460d      	mov	r5, r1
 8088372:	4617      	mov	r7, r2
 8088374:	461c      	mov	r4, r3
 8088376:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 8088378:	f1bc 0f00 	cmp.w	ip, #0
 808837c:	d001      	beq.n	8088382 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 808837e:	f7ff fe49 	bl	8088014 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_PLUS) {
 8088382:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8088386:	d12a      	bne.n	80883de <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		char *copy = (char *) malloc(len + 1);
 8088388:	1c60      	adds	r0, r4, #1
 808838a:	f000 fb05 	bl	8088998 <malloc>
		if (copy) {
 808838e:	4605      	mov	r5, r0
 8088390:	b328      	cbz	r0, 80883de <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 8088392:	4622      	mov	r2, r4
 8088394:	4639      	mov	r1, r7
 8088396:	f003 fe50 	bl	808c03a <strncpy>
			copy[len] = 0;
 808839a:	2300      	movs	r3, #0
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808839c:	2120      	movs	r1, #32
			copy[len] = 0;
 808839e:	552b      	strb	r3, [r5, r4]
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 80883a0:	4a11      	ldr	r2, [pc, #68]	; (80883e8 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 80883a2:	68f3      	ldr	r3, [r6, #12]
 80883a4:	a802      	add	r0, sp, #8
 80883a6:	f000 fb1f 	bl	80889e8 <snprintf>
			char *start = strstr(copy, searchFor);
 80883aa:	4628      	mov	r0, r5
 80883ac:	a902      	add	r1, sp, #8
 80883ae:	f003 fe57 	bl	808c060 <strstr>
			if (start) {
 80883b2:	4604      	mov	r4, r0
 80883b4:	b180      	cbz	r0, 80883d8 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 80883b6:	a802      	add	r0, sp, #8
 80883b8:	f003 fe25 	bl	808c006 <strlen>
 80883bc:	4404      	add	r4, r0
				char *end = strchr(start, '\r');
 80883be:	210d      	movs	r1, #13
 80883c0:	4620      	mov	r0, r4
 80883c2:	f003 fde5 	bl	808bf90 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 80883c6:	2301      	movs	r3, #1
 80883c8:	4622      	mov	r2, r4
 80883ca:	9300      	str	r3, [sp, #0]
 80883cc:	f106 011c 	add.w	r1, r6, #28
 80883d0:	1b03      	subs	r3, r0, r4
 80883d2:	4806      	ldr	r0, [pc, #24]	; (80883ec <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 80883d4:	f7ff ff8c 	bl	80882f0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			free(copy);
 80883d8:	4628      	mov	r0, r5
 80883da:	f000 fae5 	bl	80889a8 <free>
}
 80883de:	f04f 30ff 	mov.w	r0, #4294967295
 80883e2:	b00b      	add	sp, #44	; 0x2c
 80883e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80883e6:	bf00      	nop
 80883e8:	080900ba 	.word	0x080900ba
 80883ec:	20000cc4 	.word	0x20000cc4

080883f0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80883f0:	b508      	push	{r3, lr}
 80883f2:	4b02      	ldr	r3, [pc, #8]	; (80883fc <HAL_Validate_Pin_Function+0xc>)
 80883f4:	681b      	ldr	r3, [r3, #0]
 80883f6:	685b      	ldr	r3, [r3, #4]
 80883f8:	9301      	str	r3, [sp, #4]
 80883fa:	bd08      	pop	{r3, pc}
 80883fc:	080401b0 	.word	0x080401b0

08088400 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8088400:	b508      	push	{r3, lr}
 8088402:	4b02      	ldr	r3, [pc, #8]	; (808840c <HAL_Pin_Mode+0xc>)
 8088404:	681b      	ldr	r3, [r3, #0]
 8088406:	689b      	ldr	r3, [r3, #8]
 8088408:	9301      	str	r3, [sp, #4]
 808840a:	bd08      	pop	{r3, pc}
 808840c:	080401b0 	.word	0x080401b0

08088410 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8088410:	b508      	push	{r3, lr}
 8088412:	4b02      	ldr	r3, [pc, #8]	; (808841c <HAL_Get_Pin_Mode+0xc>)
 8088414:	681b      	ldr	r3, [r3, #0]
 8088416:	68db      	ldr	r3, [r3, #12]
 8088418:	9301      	str	r3, [sp, #4]
 808841a:	bd08      	pop	{r3, pc}
 808841c:	080401b0 	.word	0x080401b0

08088420 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8088420:	b508      	push	{r3, lr}
 8088422:	4b02      	ldr	r3, [pc, #8]	; (808842c <HAL_GPIO_Write+0xc>)
 8088424:	681b      	ldr	r3, [r3, #0]
 8088426:	691b      	ldr	r3, [r3, #16]
 8088428:	9301      	str	r3, [sp, #4]
 808842a:	bd08      	pop	{r3, pc}
 808842c:	080401b0 	.word	0x080401b0

08088430 <hal_adc_set_sample_time>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
 8088430:	b508      	push	{r3, lr}
 8088432:	4b02      	ldr	r3, [pc, #8]	; (808843c <hal_adc_set_sample_time+0xc>)
 8088434:	681b      	ldr	r3, [r3, #0]
 8088436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088438:	9301      	str	r3, [sp, #4]
 808843a:	bd08      	pop	{r3, pc}
 808843c:	080401b0 	.word	0x080401b0

08088440 <hal_adc_read>:
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 8088440:	b508      	push	{r3, lr}
 8088442:	4b02      	ldr	r3, [pc, #8]	; (808844c <hal_adc_read+0xc>)
 8088444:	681b      	ldr	r3, [r3, #0]
 8088446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088448:	9301      	str	r3, [sp, #4]
 808844a:	bd08      	pop	{r3, pc}
 808844c:	080401b0 	.word	0x080401b0

08088450 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8088450:	b508      	push	{r3, lr}
 8088452:	4b02      	ldr	r3, [pc, #8]	; (808845c <HAL_RNG_GetRandomNumber+0xc>)
 8088454:	681b      	ldr	r3, [r3, #0]
 8088456:	685b      	ldr	r3, [r3, #4]
 8088458:	9301      	str	r3, [sp, #4]
 808845a:	bd08      	pop	{r3, pc}
 808845c:	0804019c 	.word	0x0804019c

08088460 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8088460:	b508      	push	{r3, lr}
 8088462:	4b02      	ldr	r3, [pc, #8]	; (808846c <HAL_Delay_Microseconds+0xc>)
 8088464:	681b      	ldr	r3, [r3, #0]
 8088466:	68db      	ldr	r3, [r3, #12]
 8088468:	9301      	str	r3, [sp, #4]
 808846a:	bd08      	pop	{r3, pc}
 808846c:	0804019c 	.word	0x0804019c

08088470 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8088470:	b508      	push	{r3, lr}
 8088472:	4b02      	ldr	r3, [pc, #8]	; (808847c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8088474:	681b      	ldr	r3, [r3, #0]
 8088476:	695b      	ldr	r3, [r3, #20]
 8088478:	9301      	str	r3, [sp, #4]
 808847a:	bd08      	pop	{r3, pc}
 808847c:	0804019c 	.word	0x0804019c

08088480 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 8088480:	b508      	push	{r3, lr}
 8088482:	4b02      	ldr	r3, [pc, #8]	; (808848c <HAL_EEPROM_Init+0xc>)
 8088484:	681b      	ldr	r3, [r3, #0]
 8088486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8088488:	9301      	str	r3, [sp, #4]
 808848a:	bd08      	pop	{r3, pc}
 808848c:	0804019c 	.word	0x0804019c

08088490 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 8088490:	b508      	push	{r3, lr}
 8088492:	4b02      	ldr	r3, [pc, #8]	; (808849c <HAL_EEPROM_Get+0xc>)
 8088494:	681b      	ldr	r3, [r3, #0]
 8088496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8088498:	9301      	str	r3, [sp, #4]
 808849a:	bd08      	pop	{r3, pc}
 808849c:	0804019c 	.word	0x0804019c

080884a0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80884a0:	b508      	push	{r3, lr}
 80884a2:	4b02      	ldr	r3, [pc, #8]	; (80884ac <HAL_EEPROM_Put+0xc>)
 80884a4:	681b      	ldr	r3, [r3, #0]
 80884a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80884a8:	9301      	str	r3, [sp, #4]
 80884aa:	bd08      	pop	{r3, pc}
 80884ac:	0804019c 	.word	0x0804019c

080884b0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80884b0:	b508      	push	{r3, lr}
 80884b2:	4b02      	ldr	r3, [pc, #8]	; (80884bc <hal_rtc_time_is_valid+0xc>)
 80884b4:	681b      	ldr	r3, [r3, #0]
 80884b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80884b8:	9301      	str	r3, [sp, #4]
 80884ba:	bd08      	pop	{r3, pc}
 80884bc:	0804019c 	.word	0x0804019c

080884c0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80884c0:	b508      	push	{r3, lr}
 80884c2:	4b02      	ldr	r3, [pc, #8]	; (80884cc <hal_rtc_get_time+0xc>)
 80884c4:	681b      	ldr	r3, [r3, #0]
 80884c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80884c8:	9301      	str	r3, [sp, #4]
 80884ca:	bd08      	pop	{r3, pc}
 80884cc:	0804019c 	.word	0x0804019c

080884d0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 80884d0:	b508      	push	{r3, lr}
 80884d2:	4b02      	ldr	r3, [pc, #8]	; (80884dc <hal_rtc_set_time+0xc>)
 80884d4:	681b      	ldr	r3, [r3, #0]
 80884d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80884d8:	9301      	str	r3, [sp, #4]
 80884da:	bd08      	pop	{r3, pc}
 80884dc:	0804019c 	.word	0x0804019c

080884e0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80884e0:	b508      	push	{r3, lr}
 80884e2:	4b02      	ldr	r3, [pc, #8]	; (80884ec <os_mutex_recursive_create+0xc>)
 80884e4:	681b      	ldr	r3, [r3, #0]
 80884e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80884e8:	9301      	str	r3, [sp, #4]
 80884ea:	bd08      	pop	{r3, pc}
 80884ec:	080401d0 	.word	0x080401d0

080884f0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80884f0:	b508      	push	{r3, lr}
 80884f2:	4b02      	ldr	r3, [pc, #8]	; (80884fc <os_mutex_recursive_destroy+0xc>)
 80884f4:	681b      	ldr	r3, [r3, #0]
 80884f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80884f8:	9301      	str	r3, [sp, #4]
 80884fa:	bd08      	pop	{r3, pc}
 80884fc:	080401d0 	.word	0x080401d0

08088500 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8088500:	b508      	push	{r3, lr}
 8088502:	4b02      	ldr	r3, [pc, #8]	; (808850c <os_mutex_recursive_lock+0xc>)
 8088504:	681b      	ldr	r3, [r3, #0]
 8088506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8088508:	9301      	str	r3, [sp, #4]
 808850a:	bd08      	pop	{r3, pc}
 808850c:	080401d0 	.word	0x080401d0

08088510 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8088510:	b508      	push	{r3, lr}
 8088512:	4b02      	ldr	r3, [pc, #8]	; (808851c <os_mutex_recursive_unlock+0xc>)
 8088514:	681b      	ldr	r3, [r3, #0]
 8088516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8088518:	9301      	str	r3, [sp, #4]
 808851a:	bd08      	pop	{r3, pc}
 808851c:	080401d0 	.word	0x080401d0

08088520 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 8088520:	b508      	push	{r3, lr}
 8088522:	4b02      	ldr	r3, [pc, #8]	; (808852c <hal_usart_init+0xc>)
 8088524:	681b      	ldr	r3, [r3, #0]
 8088526:	699b      	ldr	r3, [r3, #24]
 8088528:	9301      	str	r3, [sp, #4]
 808852a:	bd08      	pop	{r3, pc}
 808852c:	080401c4 	.word	0x080401c4

08088530 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 8088530:	b508      	push	{r3, lr}
 8088532:	4b02      	ldr	r3, [pc, #8]	; (808853c <hal_usart_write+0xc>)
 8088534:	681b      	ldr	r3, [r3, #0]
 8088536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088538:	9301      	str	r3, [sp, #4]
 808853a:	bd08      	pop	{r3, pc}
 808853c:	080401c4 	.word	0x080401c4

08088540 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 8088540:	b508      	push	{r3, lr}
 8088542:	4b02      	ldr	r3, [pc, #8]	; (808854c <hal_usart_available+0xc>)
 8088544:	681b      	ldr	r3, [r3, #0]
 8088546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8088548:	9301      	str	r3, [sp, #4]
 808854a:	bd08      	pop	{r3, pc}
 808854c:	080401c4 	.word	0x080401c4

08088550 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 8088550:	b508      	push	{r3, lr}
 8088552:	4b02      	ldr	r3, [pc, #8]	; (808855c <hal_usart_read+0xc>)
 8088554:	681b      	ldr	r3, [r3, #0]
 8088556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088558:	9301      	str	r3, [sp, #4]
 808855a:	bd08      	pop	{r3, pc}
 808855c:	080401c4 	.word	0x080401c4

08088560 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 8088560:	b508      	push	{r3, lr}
 8088562:	4b02      	ldr	r3, [pc, #8]	; (808856c <hal_usart_peek+0xc>)
 8088564:	681b      	ldr	r3, [r3, #0]
 8088566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088568:	9301      	str	r3, [sp, #4]
 808856a:	bd08      	pop	{r3, pc}
 808856c:	080401c4 	.word	0x080401c4

08088570 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 8088570:	b508      	push	{r3, lr}
 8088572:	4b02      	ldr	r3, [pc, #8]	; (808857c <hal_usart_flush+0xc>)
 8088574:	681b      	ldr	r3, [r3, #0]
 8088576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088578:	9301      	str	r3, [sp, #4]
 808857a:	bd08      	pop	{r3, pc}
 808857c:	080401c4 	.word	0x080401c4

08088580 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 8088580:	b508      	push	{r3, lr}
 8088582:	4b02      	ldr	r3, [pc, #8]	; (808858c <hal_usart_is_enabled+0xc>)
 8088584:	681b      	ldr	r3, [r3, #0]
 8088586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8088588:	9301      	str	r3, [sp, #4]
 808858a:	bd08      	pop	{r3, pc}
 808858c:	080401c4 	.word	0x080401c4

08088590 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 8088590:	b508      	push	{r3, lr}
 8088592:	4b02      	ldr	r3, [pc, #8]	; (808859c <hal_usart_available_data_for_write+0xc>)
 8088594:	681b      	ldr	r3, [r3, #0]
 8088596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8088598:	9301      	str	r3, [sp, #4]
 808859a:	bd08      	pop	{r3, pc}
 808859c:	080401c4 	.word	0x080401c4

080885a0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80885a0:	b508      	push	{r3, lr}
 80885a2:	4b02      	ldr	r3, [pc, #8]	; (80885ac <hal_usart_begin_config+0xc>)
 80885a4:	681b      	ldr	r3, [r3, #0]
 80885a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80885a8:	9301      	str	r3, [sp, #4]
 80885aa:	bd08      	pop	{r3, pc}
 80885ac:	080401c4 	.word	0x080401c4

080885b0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80885b0:	b508      	push	{r3, lr}
 80885b2:	4b02      	ldr	r3, [pc, #8]	; (80885bc <hal_i2c_begin+0xc>)
 80885b4:	681b      	ldr	r3, [r3, #0]
 80885b6:	68db      	ldr	r3, [r3, #12]
 80885b8:	9301      	str	r3, [sp, #4]
 80885ba:	bd08      	pop	{r3, pc}
 80885bc:	080401ac 	.word	0x080401ac

080885c0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80885c0:	b508      	push	{r3, lr}
 80885c2:	4b02      	ldr	r3, [pc, #8]	; (80885cc <hal_i2c_begin_transmission+0xc>)
 80885c4:	681b      	ldr	r3, [r3, #0]
 80885c6:	699b      	ldr	r3, [r3, #24]
 80885c8:	9301      	str	r3, [sp, #4]
 80885ca:	bd08      	pop	{r3, pc}
 80885cc:	080401ac 	.word	0x080401ac

080885d0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80885d0:	b508      	push	{r3, lr}
 80885d2:	4b02      	ldr	r3, [pc, #8]	; (80885dc <hal_i2c_end_transmission+0xc>)
 80885d4:	681b      	ldr	r3, [r3, #0]
 80885d6:	69db      	ldr	r3, [r3, #28]
 80885d8:	9301      	str	r3, [sp, #4]
 80885da:	bd08      	pop	{r3, pc}
 80885dc:	080401ac 	.word	0x080401ac

080885e0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80885e0:	b508      	push	{r3, lr}
 80885e2:	4b02      	ldr	r3, [pc, #8]	; (80885ec <hal_i2c_write+0xc>)
 80885e4:	681b      	ldr	r3, [r3, #0]
 80885e6:	6a1b      	ldr	r3, [r3, #32]
 80885e8:	9301      	str	r3, [sp, #4]
 80885ea:	bd08      	pop	{r3, pc}
 80885ec:	080401ac 	.word	0x080401ac

080885f0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80885f0:	b508      	push	{r3, lr}
 80885f2:	4b02      	ldr	r3, [pc, #8]	; (80885fc <hal_i2c_available+0xc>)
 80885f4:	681b      	ldr	r3, [r3, #0]
 80885f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80885f8:	9301      	str	r3, [sp, #4]
 80885fa:	bd08      	pop	{r3, pc}
 80885fc:	080401ac 	.word	0x080401ac

08088600 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 8088600:	b508      	push	{r3, lr}
 8088602:	4b02      	ldr	r3, [pc, #8]	; (808860c <hal_i2c_read+0xc>)
 8088604:	681b      	ldr	r3, [r3, #0]
 8088606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8088608:	9301      	str	r3, [sp, #4]
 808860a:	bd08      	pop	{r3, pc}
 808860c:	080401ac 	.word	0x080401ac

08088610 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 8088610:	b508      	push	{r3, lr}
 8088612:	4b02      	ldr	r3, [pc, #8]	; (808861c <hal_i2c_peek+0xc>)
 8088614:	681b      	ldr	r3, [r3, #0]
 8088616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088618:	9301      	str	r3, [sp, #4]
 808861a:	bd08      	pop	{r3, pc}
 808861c:	080401ac 	.word	0x080401ac

08088620 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 8088620:	b508      	push	{r3, lr}
 8088622:	4b02      	ldr	r3, [pc, #8]	; (808862c <hal_i2c_flush+0xc>)
 8088624:	681b      	ldr	r3, [r3, #0]
 8088626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088628:	9301      	str	r3, [sp, #4]
 808862a:	bd08      	pop	{r3, pc}
 808862c:	080401ac 	.word	0x080401ac

08088630 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 8088630:	b508      	push	{r3, lr}
 8088632:	4b02      	ldr	r3, [pc, #8]	; (808863c <hal_i2c_is_enabled+0xc>)
 8088634:	681b      	ldr	r3, [r3, #0]
 8088636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088638:	9301      	str	r3, [sp, #4]
 808863a:	bd08      	pop	{r3, pc}
 808863c:	080401ac 	.word	0x080401ac

08088640 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 8088640:	b508      	push	{r3, lr}
 8088642:	4b02      	ldr	r3, [pc, #8]	; (808864c <hal_i2c_init+0xc>)
 8088644:	681b      	ldr	r3, [r3, #0]
 8088646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8088648:	9301      	str	r3, [sp, #4]
 808864a:	bd08      	pop	{r3, pc}
 808864c:	080401ac 	.word	0x080401ac

08088650 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 8088650:	b508      	push	{r3, lr}
 8088652:	4b02      	ldr	r3, [pc, #8]	; (808865c <hal_i2c_lock+0xc>)
 8088654:	681b      	ldr	r3, [r3, #0]
 8088656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8088658:	9301      	str	r3, [sp, #4]
 808865a:	bd08      	pop	{r3, pc}
 808865c:	080401ac 	.word	0x080401ac

08088660 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 8088660:	b508      	push	{r3, lr}
 8088662:	4b02      	ldr	r3, [pc, #8]	; (808866c <hal_i2c_unlock+0xc>)
 8088664:	681b      	ldr	r3, [r3, #0]
 8088666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8088668:	9301      	str	r3, [sp, #4]
 808866a:	bd08      	pop	{r3, pc}
 808866c:	080401ac 	.word	0x080401ac

08088670 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 8088670:	b508      	push	{r3, lr}
 8088672:	4b02      	ldr	r3, [pc, #8]	; (808867c <hal_i2c_request_ex+0xc>)
 8088674:	681b      	ldr	r3, [r3, #0]
 8088676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8088678:	9301      	str	r3, [sp, #4]
 808867a:	bd08      	pop	{r3, pc}
 808867c:	080401ac 	.word	0x080401ac

08088680 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 8088680:	b508      	push	{r3, lr}
 8088682:	4b02      	ldr	r3, [pc, #8]	; (808868c <hal_spi_begin+0xc>)
 8088684:	681b      	ldr	r3, [r3, #0]
 8088686:	681b      	ldr	r3, [r3, #0]
 8088688:	9301      	str	r3, [sp, #4]
 808868a:	bd08      	pop	{r3, pc}
 808868c:	080401b4 	.word	0x080401b4

08088690 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 8088690:	b508      	push	{r3, lr}
 8088692:	4b02      	ldr	r3, [pc, #8]	; (808869c <hal_spi_set_bit_order+0xc>)
 8088694:	681b      	ldr	r3, [r3, #0]
 8088696:	689b      	ldr	r3, [r3, #8]
 8088698:	9301      	str	r3, [sp, #4]
 808869a:	bd08      	pop	{r3, pc}
 808869c:	080401b4 	.word	0x080401b4

080886a0 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 80886a0:	b508      	push	{r3, lr}
 80886a2:	4b02      	ldr	r3, [pc, #8]	; (80886ac <hal_spi_set_data_mode+0xc>)
 80886a4:	681b      	ldr	r3, [r3, #0]
 80886a6:	68db      	ldr	r3, [r3, #12]
 80886a8:	9301      	str	r3, [sp, #4]
 80886aa:	bd08      	pop	{r3, pc}
 80886ac:	080401b4 	.word	0x080401b4

080886b0 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 80886b0:	b508      	push	{r3, lr}
 80886b2:	4b02      	ldr	r3, [pc, #8]	; (80886bc <hal_spi_set_clock_divider+0xc>)
 80886b4:	681b      	ldr	r3, [r3, #0]
 80886b6:	691b      	ldr	r3, [r3, #16]
 80886b8:	9301      	str	r3, [sp, #4]
 80886ba:	bd08      	pop	{r3, pc}
 80886bc:	080401b4 	.word	0x080401b4

080886c0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80886c0:	b508      	push	{r3, lr}
 80886c2:	4b02      	ldr	r3, [pc, #8]	; (80886cc <hal_spi_transfer+0xc>)
 80886c4:	681b      	ldr	r3, [r3, #0]
 80886c6:	695b      	ldr	r3, [r3, #20]
 80886c8:	9301      	str	r3, [sp, #4]
 80886ca:	bd08      	pop	{r3, pc}
 80886cc:	080401b4 	.word	0x080401b4

080886d0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80886d0:	b508      	push	{r3, lr}
 80886d2:	4b02      	ldr	r3, [pc, #8]	; (80886dc <hal_spi_init+0xc>)
 80886d4:	681b      	ldr	r3, [r3, #0]
 80886d6:	69db      	ldr	r3, [r3, #28]
 80886d8:	9301      	str	r3, [sp, #4]
 80886da:	bd08      	pop	{r3, pc}
 80886dc:	080401b4 	.word	0x080401b4

080886e0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80886e0:	b508      	push	{r3, lr}
 80886e2:	4b02      	ldr	r3, [pc, #8]	; (80886ec <hal_spi_is_enabled+0xc>)
 80886e4:	681b      	ldr	r3, [r3, #0]
 80886e6:	6a1b      	ldr	r3, [r3, #32]
 80886e8:	9301      	str	r3, [sp, #4]
 80886ea:	bd08      	pop	{r3, pc}
 80886ec:	080401b4 	.word	0x080401b4

080886f0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80886f0:	b508      	push	{r3, lr}
 80886f2:	4b02      	ldr	r3, [pc, #8]	; (80886fc <hal_spi_info+0xc>)
 80886f4:	681b      	ldr	r3, [r3, #0]
 80886f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80886f8:	9301      	str	r3, [sp, #4]
 80886fa:	bd08      	pop	{r3, pc}
 80886fc:	080401b4 	.word	0x080401b4

08088700 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
 8088700:	b508      	push	{r3, lr}
 8088702:	4b02      	ldr	r3, [pc, #8]	; (808870c <hal_spi_transfer_dma+0xc>)
 8088704:	681b      	ldr	r3, [r3, #0]
 8088706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8088708:	9301      	str	r3, [sp, #4]
 808870a:	bd08      	pop	{r3, pc}
 808870c:	080401b4 	.word	0x080401b4

08088710 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 8088710:	b508      	push	{r3, lr}
 8088712:	4b02      	ldr	r3, [pc, #8]	; (808871c <hal_spi_transfer_dma_status+0xc>)
 8088714:	681b      	ldr	r3, [r3, #0]
 8088716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8088718:	9301      	str	r3, [sp, #4]
 808871a:	bd08      	pop	{r3, pc}
 808871c:	080401b4 	.word	0x080401b4

08088720 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8088720:	b508      	push	{r3, lr}
 8088722:	4b02      	ldr	r3, [pc, #8]	; (808872c <inet_gethostbyname+0xc>)
 8088724:	681b      	ldr	r3, [r3, #0]
 8088726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8088728:	9301      	str	r3, [sp, #4]
 808872a:	bd08      	pop	{r3, pc}
 808872c:	08060020 	.word	0x08060020

08088730 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8088730:	b508      	push	{r3, lr}
 8088732:	4b02      	ldr	r3, [pc, #8]	; (808873c <cellular_command+0xc>)
 8088734:	681b      	ldr	r3, [r3, #0]
 8088736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8088738:	9301      	str	r3, [sp, #4]
 808873a:	bd08      	pop	{r3, pc}
 808873c:	08060020 	.word	0x08060020

08088740 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8088740:	b508      	push	{r3, lr}
 8088742:	4b02      	ldr	r3, [pc, #8]	; (808874c <HAL_USB_USART_Init+0xc>)
 8088744:	681b      	ldr	r3, [r3, #0]
 8088746:	681b      	ldr	r3, [r3, #0]
 8088748:	9301      	str	r3, [sp, #4]
 808874a:	bd08      	pop	{r3, pc}
 808874c:	0806001c 	.word	0x0806001c

08088750 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8088750:	b508      	push	{r3, lr}
 8088752:	4b02      	ldr	r3, [pc, #8]	; (808875c <HAL_USB_USART_Begin+0xc>)
 8088754:	681b      	ldr	r3, [r3, #0]
 8088756:	685b      	ldr	r3, [r3, #4]
 8088758:	9301      	str	r3, [sp, #4]
 808875a:	bd08      	pop	{r3, pc}
 808875c:	0806001c 	.word	0x0806001c

08088760 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8088760:	b508      	push	{r3, lr}
 8088762:	4b02      	ldr	r3, [pc, #8]	; (808876c <HAL_USB_USART_Available_Data+0xc>)
 8088764:	681b      	ldr	r3, [r3, #0]
 8088766:	691b      	ldr	r3, [r3, #16]
 8088768:	9301      	str	r3, [sp, #4]
 808876a:	bd08      	pop	{r3, pc}
 808876c:	0806001c 	.word	0x0806001c

08088770 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8088770:	b508      	push	{r3, lr}
 8088772:	4b02      	ldr	r3, [pc, #8]	; (808877c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8088774:	681b      	ldr	r3, [r3, #0]
 8088776:	695b      	ldr	r3, [r3, #20]
 8088778:	9301      	str	r3, [sp, #4]
 808877a:	bd08      	pop	{r3, pc}
 808877c:	0806001c 	.word	0x0806001c

08088780 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8088780:	b508      	push	{r3, lr}
 8088782:	4b02      	ldr	r3, [pc, #8]	; (808878c <HAL_USB_USART_Receive_Data+0xc>)
 8088784:	681b      	ldr	r3, [r3, #0]
 8088786:	699b      	ldr	r3, [r3, #24]
 8088788:	9301      	str	r3, [sp, #4]
 808878a:	bd08      	pop	{r3, pc}
 808878c:	0806001c 	.word	0x0806001c

08088790 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8088790:	b508      	push	{r3, lr}
 8088792:	4b02      	ldr	r3, [pc, #8]	; (808879c <HAL_USB_USART_Send_Data+0xc>)
 8088794:	681b      	ldr	r3, [r3, #0]
 8088796:	69db      	ldr	r3, [r3, #28]
 8088798:	9301      	str	r3, [sp, #4]
 808879a:	bd08      	pop	{r3, pc}
 808879c:	0806001c 	.word	0x0806001c

080887a0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80887a0:	b508      	push	{r3, lr}
 80887a2:	4b02      	ldr	r3, [pc, #8]	; (80887ac <HAL_USB_USART_Flush_Data+0xc>)
 80887a4:	681b      	ldr	r3, [r3, #0]
 80887a6:	6a1b      	ldr	r3, [r3, #32]
 80887a8:	9301      	str	r3, [sp, #4]
 80887aa:	bd08      	pop	{r3, pc}
 80887ac:	0806001c 	.word	0x0806001c

080887b0 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80887b0:	b508      	push	{r3, lr}
 80887b2:	4b02      	ldr	r3, [pc, #8]	; (80887bc <log_message_v+0xc>)
 80887b4:	681b      	ldr	r3, [r3, #0]
 80887b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80887b8:	9301      	str	r3, [sp, #4]
 80887ba:	bd08      	pop	{r3, pc}
 80887bc:	080201a0 	.word	0x080201a0

080887c0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80887c0:	b508      	push	{r3, lr}
 80887c2:	4b02      	ldr	r3, [pc, #8]	; (80887cc <system_mode+0xc>)
 80887c4:	681b      	ldr	r3, [r3, #0]
 80887c6:	681b      	ldr	r3, [r3, #0]
 80887c8:	9301      	str	r3, [sp, #4]
 80887ca:	bd08      	pop	{r3, pc}
 80887cc:	080401a4 	.word	0x080401a4

080887d0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80887d0:	b508      	push	{r3, lr}
 80887d2:	4b02      	ldr	r3, [pc, #8]	; (80887dc <set_system_mode+0xc>)
 80887d4:	681b      	ldr	r3, [r3, #0]
 80887d6:	685b      	ldr	r3, [r3, #4]
 80887d8:	9301      	str	r3, [sp, #4]
 80887da:	bd08      	pop	{r3, pc}
 80887dc:	080401a4 	.word	0x080401a4

080887e0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80887e0:	b508      	push	{r3, lr}
 80887e2:	4b02      	ldr	r3, [pc, #8]	; (80887ec <system_delay_ms+0xc>)
 80887e4:	681b      	ldr	r3, [r3, #0]
 80887e6:	695b      	ldr	r3, [r3, #20]
 80887e8:	9301      	str	r3, [sp, #4]
 80887ea:	bd08      	pop	{r3, pc}
 80887ec:	080401a4 	.word	0x080401a4

080887f0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80887f0:	b508      	push	{r3, lr}
 80887f2:	4b02      	ldr	r3, [pc, #8]	; (80887fc <system_thread_set_state+0xc>)
 80887f4:	681b      	ldr	r3, [r3, #0]
 80887f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80887f8:	9301      	str	r3, [sp, #4]
 80887fa:	bd08      	pop	{r3, pc}
 80887fc:	080401a4 	.word	0x080401a4

08088800 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 8088800:	b508      	push	{r3, lr}
 8088802:	4b02      	ldr	r3, [pc, #8]	; (808880c <system_version_info+0xc>)
 8088804:	681b      	ldr	r3, [r3, #0]
 8088806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088808:	9301      	str	r3, [sp, #4]
 808880a:	bd08      	pop	{r3, pc}
 808880c:	080401a4 	.word	0x080401a4

08088810 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8088810:	b508      	push	{r3, lr}
 8088812:	4b02      	ldr	r3, [pc, #8]	; (808881c <application_thread_current+0xc>)
 8088814:	681b      	ldr	r3, [r3, #0]
 8088816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8088818:	9301      	str	r3, [sp, #4]
 808881a:	bd08      	pop	{r3, pc}
 808881c:	080401a4 	.word	0x080401a4

08088820 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8088820:	b508      	push	{r3, lr}
 8088822:	4b02      	ldr	r3, [pc, #8]	; (808882c <application_thread_invoke+0xc>)
 8088824:	681b      	ldr	r3, [r3, #0]
 8088826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8088828:	9301      	str	r3, [sp, #4]
 808882a:	bd08      	pop	{r3, pc}
 808882c:	080401a4 	.word	0x080401a4

08088830 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8088830:	b508      	push	{r3, lr}
 8088832:	4b02      	ldr	r3, [pc, #8]	; (808883c <system_thread_get_state+0xc>)
 8088834:	681b      	ldr	r3, [r3, #0]
 8088836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8088838:	9301      	str	r3, [sp, #4]
 808883a:	bd08      	pop	{r3, pc}
 808883c:	080401a4 	.word	0x080401a4

08088840 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 8088840:	b508      	push	{r3, lr}
 8088842:	4b02      	ldr	r3, [pc, #8]	; (808884c <system_notify_time_changed+0xc>)
 8088844:	681b      	ldr	r3, [r3, #0]
 8088846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8088848:	9301      	str	r3, [sp, #4]
 808884a:	bd08      	pop	{r3, pc}
 808884c:	080401a4 	.word	0x080401a4

08088850 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8088850:	b508      	push	{r3, lr}
 8088852:	4b03      	ldr	r3, [pc, #12]	; (8088860 <system_ctrl_set_app_request_handler+0x10>)
 8088854:	681b      	ldr	r3, [r3, #0]
 8088856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808885a:	9301      	str	r3, [sp, #4]
 808885c:	bd08      	pop	{r3, pc}
 808885e:	0000      	.short	0x0000
 8088860:	080401a4 	.word	0x080401a4

08088864 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8088864:	b508      	push	{r3, lr}
 8088866:	4b03      	ldr	r3, [pc, #12]	; (8088874 <system_ctrl_set_result+0x10>)
 8088868:	681b      	ldr	r3, [r3, #0]
 808886a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808886e:	9301      	str	r3, [sp, #4]
 8088870:	bd08      	pop	{r3, pc}
 8088872:	0000      	.short	0x0000
 8088874:	080401a4 	.word	0x080401a4

08088878 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8088878:	b508      	push	{r3, lr}
 808887a:	4b02      	ldr	r3, [pc, #8]	; (8088884 <network_connect+0xc>)
 808887c:	681b      	ldr	r3, [r3, #0]
 808887e:	685b      	ldr	r3, [r3, #4]
 8088880:	9301      	str	r3, [sp, #4]
 8088882:	bd08      	pop	{r3, pc}
 8088884:	080401c8 	.word	0x080401c8

08088888 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8088888:	b508      	push	{r3, lr}
 808888a:	4b02      	ldr	r3, [pc, #8]	; (8088894 <network_connecting+0xc>)
 808888c:	681b      	ldr	r3, [r3, #0]
 808888e:	689b      	ldr	r3, [r3, #8]
 8088890:	9301      	str	r3, [sp, #4]
 8088892:	bd08      	pop	{r3, pc}
 8088894:	080401c8 	.word	0x080401c8

08088898 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8088898:	b508      	push	{r3, lr}
 808889a:	4b02      	ldr	r3, [pc, #8]	; (80888a4 <network_disconnect+0xc>)
 808889c:	681b      	ldr	r3, [r3, #0]
 808889e:	68db      	ldr	r3, [r3, #12]
 80888a0:	9301      	str	r3, [sp, #4]
 80888a2:	bd08      	pop	{r3, pc}
 80888a4:	080401c8 	.word	0x080401c8

080888a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80888a8:	b508      	push	{r3, lr}
 80888aa:	4b02      	ldr	r3, [pc, #8]	; (80888b4 <network_ready+0xc>)
 80888ac:	681b      	ldr	r3, [r3, #0]
 80888ae:	691b      	ldr	r3, [r3, #16]
 80888b0:	9301      	str	r3, [sp, #4]
 80888b2:	bd08      	pop	{r3, pc}
 80888b4:	080401c8 	.word	0x080401c8

080888b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80888b8:	b508      	push	{r3, lr}
 80888ba:	4b02      	ldr	r3, [pc, #8]	; (80888c4 <network_on+0xc>)
 80888bc:	681b      	ldr	r3, [r3, #0]
 80888be:	695b      	ldr	r3, [r3, #20]
 80888c0:	9301      	str	r3, [sp, #4]
 80888c2:	bd08      	pop	{r3, pc}
 80888c4:	080401c8 	.word	0x080401c8

080888c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80888c8:	b508      	push	{r3, lr}
 80888ca:	4b02      	ldr	r3, [pc, #8]	; (80888d4 <network_off+0xc>)
 80888cc:	681b      	ldr	r3, [r3, #0]
 80888ce:	699b      	ldr	r3, [r3, #24]
 80888d0:	9301      	str	r3, [sp, #4]
 80888d2:	bd08      	pop	{r3, pc}
 80888d4:	080401c8 	.word	0x080401c8

080888d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80888d8:	b508      	push	{r3, lr}
 80888da:	4b02      	ldr	r3, [pc, #8]	; (80888e4 <network_listen+0xc>)
 80888dc:	681b      	ldr	r3, [r3, #0]
 80888de:	69db      	ldr	r3, [r3, #28]
 80888e0:	9301      	str	r3, [sp, #4]
 80888e2:	bd08      	pop	{r3, pc}
 80888e4:	080401c8 	.word	0x080401c8

080888e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80888e8:	b508      	push	{r3, lr}
 80888ea:	4b02      	ldr	r3, [pc, #8]	; (80888f4 <network_listening+0xc>)
 80888ec:	681b      	ldr	r3, [r3, #0]
 80888ee:	6a1b      	ldr	r3, [r3, #32]
 80888f0:	9301      	str	r3, [sp, #4]
 80888f2:	bd08      	pop	{r3, pc}
 80888f4:	080401c8 	.word	0x080401c8

080888f8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80888f8:	b508      	push	{r3, lr}
 80888fa:	4b02      	ldr	r3, [pc, #8]	; (8088904 <network_set_listen_timeout+0xc>)
 80888fc:	681b      	ldr	r3, [r3, #0]
 80888fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088900:	9301      	str	r3, [sp, #4]
 8088902:	bd08      	pop	{r3, pc}
 8088904:	080401c8 	.word	0x080401c8

08088908 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8088908:	b508      	push	{r3, lr}
 808890a:	4b02      	ldr	r3, [pc, #8]	; (8088914 <network_get_listen_timeout+0xc>)
 808890c:	681b      	ldr	r3, [r3, #0]
 808890e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088910:	9301      	str	r3, [sp, #4]
 8088912:	bd08      	pop	{r3, pc}
 8088914:	080401c8 	.word	0x080401c8

08088918 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8088918:	b508      	push	{r3, lr}
 808891a:	4b02      	ldr	r3, [pc, #8]	; (8088924 <spark_variable+0xc>)
 808891c:	681b      	ldr	r3, [r3, #0]
 808891e:	681b      	ldr	r3, [r3, #0]
 8088920:	9301      	str	r3, [sp, #4]
 8088922:	bd08      	pop	{r3, pc}
 8088924:	080401cc 	.word	0x080401cc

08088928 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8088928:	b508      	push	{r3, lr}
 808892a:	4b02      	ldr	r3, [pc, #8]	; (8088934 <spark_function+0xc>)
 808892c:	681b      	ldr	r3, [r3, #0]
 808892e:	685b      	ldr	r3, [r3, #4]
 8088930:	9301      	str	r3, [sp, #4]
 8088932:	bd08      	pop	{r3, pc}
 8088934:	080401cc 	.word	0x080401cc

08088938 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8088938:	b508      	push	{r3, lr}
 808893a:	4b02      	ldr	r3, [pc, #8]	; (8088944 <spark_process+0xc>)
 808893c:	681b      	ldr	r3, [r3, #0]
 808893e:	689b      	ldr	r3, [r3, #8]
 8088940:	9301      	str	r3, [sp, #4]
 8088942:	bd08      	pop	{r3, pc}
 8088944:	080401cc 	.word	0x080401cc

08088948 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8088948:	b508      	push	{r3, lr}
 808894a:	4b02      	ldr	r3, [pc, #8]	; (8088954 <spark_cloud_flag_connect+0xc>)
 808894c:	681b      	ldr	r3, [r3, #0]
 808894e:	68db      	ldr	r3, [r3, #12]
 8088950:	9301      	str	r3, [sp, #4]
 8088952:	bd08      	pop	{r3, pc}
 8088954:	080401cc 	.word	0x080401cc

08088958 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8088958:	b508      	push	{r3, lr}
 808895a:	4b02      	ldr	r3, [pc, #8]	; (8088964 <spark_cloud_flag_connected+0xc>)
 808895c:	681b      	ldr	r3, [r3, #0]
 808895e:	695b      	ldr	r3, [r3, #20]
 8088960:	9301      	str	r3, [sp, #4]
 8088962:	bd08      	pop	{r3, pc}
 8088964:	080401cc 	.word	0x080401cc

08088968 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8088968:	b508      	push	{r3, lr}
 808896a:	4b02      	ldr	r3, [pc, #8]	; (8088974 <spark_send_event+0xc>)
 808896c:	681b      	ldr	r3, [r3, #0]
 808896e:	6a1b      	ldr	r3, [r3, #32]
 8088970:	9301      	str	r3, [sp, #4]
 8088972:	bd08      	pop	{r3, pc}
 8088974:	080401cc 	.word	0x080401cc

08088978 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8088978:	b508      	push	{r3, lr}
 808897a:	4b02      	ldr	r3, [pc, #8]	; (8088984 <spark_sync_time_pending+0xc>)
 808897c:	681b      	ldr	r3, [r3, #0]
 808897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088980:	9301      	str	r3, [sp, #4]
 8088982:	bd08      	pop	{r3, pc}
 8088984:	080401cc 	.word	0x080401cc

08088988 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8088988:	b508      	push	{r3, lr}
 808898a:	4b02      	ldr	r3, [pc, #8]	; (8088994 <spark_set_random_seed_from_cloud_handler+0xc>)
 808898c:	681b      	ldr	r3, [r3, #0]
 808898e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8088990:	9301      	str	r3, [sp, #4]
 8088992:	bd08      	pop	{r3, pc}
 8088994:	080401cc 	.word	0x080401cc

08088998 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8088998:	b508      	push	{r3, lr}
 808899a:	4b02      	ldr	r3, [pc, #8]	; (80889a4 <malloc+0xc>)
 808899c:	681b      	ldr	r3, [r3, #0]
 808899e:	681b      	ldr	r3, [r3, #0]
 80889a0:	9301      	str	r3, [sp, #4]
 80889a2:	bd08      	pop	{r3, pc}
 80889a4:	080401a0 	.word	0x080401a0

080889a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80889a8:	b508      	push	{r3, lr}
 80889aa:	4b02      	ldr	r3, [pc, #8]	; (80889b4 <free+0xc>)
 80889ac:	681b      	ldr	r3, [r3, #0]
 80889ae:	685b      	ldr	r3, [r3, #4]
 80889b0:	9301      	str	r3, [sp, #4]
 80889b2:	bd08      	pop	{r3, pc}
 80889b4:	080401a0 	.word	0x080401a0

080889b8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80889b8:	b508      	push	{r3, lr}
 80889ba:	4b02      	ldr	r3, [pc, #8]	; (80889c4 <realloc+0xc>)
 80889bc:	681b      	ldr	r3, [r3, #0]
 80889be:	689b      	ldr	r3, [r3, #8]
 80889c0:	9301      	str	r3, [sp, #4]
 80889c2:	bd08      	pop	{r3, pc}
 80889c4:	080401a0 	.word	0x080401a0

080889c8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80889c8:	b508      	push	{r3, lr}
 80889ca:	4b02      	ldr	r3, [pc, #8]	; (80889d4 <sprintf+0xc>)
 80889cc:	681b      	ldr	r3, [r3, #0]
 80889ce:	68db      	ldr	r3, [r3, #12]
 80889d0:	9301      	str	r3, [sp, #4]
 80889d2:	bd08      	pop	{r3, pc}
 80889d4:	080401a0 	.word	0x080401a0

080889d8 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80889d8:	b508      	push	{r3, lr}
 80889da:	4b02      	ldr	r3, [pc, #8]	; (80889e4 <siprintf+0xc>)
 80889dc:	681b      	ldr	r3, [r3, #0]
 80889de:	691b      	ldr	r3, [r3, #16]
 80889e0:	9301      	str	r3, [sp, #4]
 80889e2:	bd08      	pop	{r3, pc}
 80889e4:	080401a0 	.word	0x080401a0

080889e8 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80889e8:	b508      	push	{r3, lr}
 80889ea:	4b02      	ldr	r3, [pc, #8]	; (80889f4 <snprintf+0xc>)
 80889ec:	681b      	ldr	r3, [r3, #0]
 80889ee:	69db      	ldr	r3, [r3, #28]
 80889f0:	9301      	str	r3, [sp, #4]
 80889f2:	bd08      	pop	{r3, pc}
 80889f4:	080401a0 	.word	0x080401a0

080889f8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80889f8:	b508      	push	{r3, lr}
 80889fa:	4b02      	ldr	r3, [pc, #8]	; (8088a04 <vsnprintf+0xc>)
 80889fc:	681b      	ldr	r3, [r3, #0]
 80889fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088a00:	9301      	str	r3, [sp, #4]
 8088a02:	bd08      	pop	{r3, pc}
 8088a04:	080401a0 	.word	0x080401a0

08088a08 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8088a08:	b508      	push	{r3, lr}
 8088a0a:	4b02      	ldr	r3, [pc, #8]	; (8088a14 <abort+0xc>)
 8088a0c:	681b      	ldr	r3, [r3, #0]
 8088a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088a10:	9301      	str	r3, [sp, #4]
 8088a12:	bd08      	pop	{r3, pc}
 8088a14:	080401a0 	.word	0x080401a0

08088a18 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8088a18:	b508      	push	{r3, lr}
 8088a1a:	4b02      	ldr	r3, [pc, #8]	; (8088a24 <_malloc_r+0xc>)
 8088a1c:	681b      	ldr	r3, [r3, #0]
 8088a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088a20:	9301      	str	r3, [sp, #4]
 8088a22:	bd08      	pop	{r3, pc}
 8088a24:	080401a0 	.word	0x080401a0

08088a28 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 8088a28:	b508      	push	{r3, lr}
 8088a2a:	4b02      	ldr	r3, [pc, #8]	; (8088a34 <newlib_impure_ptr_callback+0xc>)
 8088a2c:	681b      	ldr	r3, [r3, #0]
 8088a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8088a30:	9301      	str	r3, [sp, #4]
 8088a32:	bd08      	pop	{r3, pc}
 8088a34:	080401a0 	.word	0x080401a0

08088a38 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8088a38:	b508      	push	{r3, lr}
            return &Wire3;
 8088a3a:	f002 f91d 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 8088a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 8088a42:	f001 bfa3 	b.w	808a98c <_ZN7TwoWire4lockEv>

08088a46 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 8088a46:	b510      	push	{r4, lr}
 8088a48:	4604      	mov	r4, r0
    lock_(_lock)
 8088a4a:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 8088a4c:	b109      	cbz	r1, 8088a52 <_ZN4PMICC1Eb+0xc>
        lock();
 8088a4e:	f7ff fff3 	bl	8088a38 <_ZN4PMIC4lockEv.constprop.0>
}
 8088a52:	4620      	mov	r0, r4
 8088a54:	bd10      	pop	{r4, pc}

08088a56 <_ZN4PMIC5beginEv>:
{
 8088a56:	b508      	push	{r3, lr}
            return &Wire3;
 8088a58:	f002 f90e 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    if (!pmicWireInstance()->isEnabled()) {
 8088a5c:	f001 ff92 	bl	808a984 <_ZN7TwoWire9isEnabledEv>
 8088a60:	b918      	cbnz	r0, 8088a6a <_ZN4PMIC5beginEv+0x14>
            return &Wire3;
 8088a62:	f002 f909 	bl	808ac78 <_Z20__fetch_global_Wire3v>
        pmicWireInstance()->begin();
 8088a66:	f001 ff35 	bl	808a8d4 <_ZN7TwoWire5beginEv>
            return &Wire3;
 8088a6a:	f002 f905 	bl	808ac78 <_Z20__fetch_global_Wire3v>
}
 8088a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
 8088a72:	f001 bf87 	b.w	808a984 <_ZN7TwoWire9isEnabledEv>

08088a76 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 8088a76:	b508      	push	{r3, lr}
            return &Wire3;
 8088a78:	f002 f8fe 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 8088a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 8088a80:	f001 bf8d 	b.w	808a99e <_ZN7TwoWire6unlockEv>

08088a84 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 8088a84:	b510      	push	{r4, lr}
    if (lock_) {
 8088a86:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 8088a88:	4604      	mov	r4, r0
    if (lock_) {
 8088a8a:	b10b      	cbz	r3, 8088a90 <_ZN4PMICD1Ev+0xc>
        unlock();
 8088a8c:	f7ff fff3 	bl	8088a76 <_ZN4PMIC6unlockEv>
}
 8088a90:	4620      	mov	r0, r4
 8088a92:	bd10      	pop	{r4, pc}

08088a94 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8088a94:	b510      	push	{r4, lr}
 8088a96:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8088a98:	6800      	ldr	r0, [r0, #0]
 8088a9a:	f7ff ffec 	bl	8088a76 <_ZN4PMIC6unlockEv>
 8088a9e:	4620      	mov	r0, r4
 8088aa0:	bd10      	pop	{r4, pc}

08088aa2 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 8088aa2:	b530      	push	{r4, r5, lr}
 8088aa4:	b087      	sub	sp, #28
 8088aa6:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088aa8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088aaa:	f7ff ffc5 	bl	8088a38 <_ZN4PMIC4lockEv.constprop.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088aae:	236b      	movs	r3, #107	; 0x6b
 8088ab0:	f88d 3008 	strb.w	r3, [sp, #8]
 8088ab4:	2300      	movs	r3, #0
 8088ab6:	2401      	movs	r4, #1
 8088ab8:	9303      	str	r3, [sp, #12]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 8088aba:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088abc:	f88d 4010 	strb.w	r4, [sp, #16]
    timeout_ = ms;
 8088ac0:	9305      	str	r3, [sp, #20]
            return &Wire3;
 8088ac2:	f002 f8d9 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 8088ac6:	a902      	add	r1, sp, #8
 8088ac8:	f001 ff3d 	bl	808a946 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 8088acc:	f002 f8d4 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 8088ad0:	6803      	ldr	r3, [r0, #0]
 8088ad2:	4629      	mov	r1, r5
 8088ad4:	689b      	ldr	r3, [r3, #8]
 8088ad6:	4798      	blx	r3
            return &Wire3;
 8088ad8:	f002 f8ce 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 8088adc:	4621      	mov	r1, r4
 8088ade:	f001 ff4a 	bl	808a976 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 8088ae2:	9403      	str	r4, [sp, #12]
            return &Wire3;
 8088ae4:	f002 f8c8 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 8088ae8:	a902      	add	r1, sp, #8
 8088aea:	f001 fef9 	bl	808a8e0 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 8088aee:	f002 f8c3 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 8088af2:	6803      	ldr	r3, [r0, #0]
 8088af4:	695b      	ldr	r3, [r3, #20]
 8088af6:	4798      	blx	r3
 8088af8:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 8088afa:	a801      	add	r0, sp, #4
 8088afc:	f7ff ffca 	bl	8088a94 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088b00:	b2e0      	uxtb	r0, r4
 8088b02:	b007      	add	sp, #28
 8088b04:	bd30      	pop	{r4, r5, pc}

08088b06 <_ZN4PMIC23readInputSourceRegisterEv>:
    return readRegister(INPUT_SOURCE_REGISTER);
 8088b06:	2100      	movs	r1, #0
 8088b08:	f7ff bfcb 	b.w	8088aa2 <_ZN4PMIC12readRegisterEh>

08088b0c <_ZN4PMIC20getInputCurrentLimitEv>:
uint16_t PMIC::getInputCurrentLimit(void) {
 8088b0c:	b508      	push	{r3, lr}
    byte raw = readInputSourceRegister();
 8088b0e:	f7ff fffa 	bl	8088b06 <_ZN4PMIC23readInputSourceRegisterEv>
}
 8088b12:	4b03      	ldr	r3, [pc, #12]	; (8088b20 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
    return mapping[raw];
 8088b14:	f000 0007 	and.w	r0, r0, #7
}
 8088b18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8088b1c:	bd08      	pop	{r3, pc}
 8088b1e:	bf00      	nop
 8088b20:	080900dc 	.word	0x080900dc

08088b24 <_ZN4PMIC16getChargeCurrentEv>:
    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8088b24:	2102      	movs	r1, #2
 8088b26:	f7ff bfbc 	b.w	8088aa2 <_ZN4PMIC12readRegisterEh>

08088b2a <_ZN4PMIC15getSystemStatusEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8088b2a:	2108      	movs	r1, #8
 8088b2c:	f7ff bfb9 	b.w	8088aa2 <_ZN4PMIC12readRegisterEh>

08088b30 <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 8088b30:	2109      	movs	r1, #9
 8088b32:	f7ff bfb6 	b.w	8088aa2 <_ZN4PMIC12readRegisterEh>

08088b36 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 8088b36:	b570      	push	{r4, r5, r6, lr}
 8088b38:	b086      	sub	sp, #24
 8088b3a:	4614      	mov	r4, r2
 8088b3c:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088b3e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088b40:	f7ff ff7a 	bl	8088a38 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088b44:	236b      	movs	r3, #107	; 0x6b
 8088b46:	f88d 3008 	strb.w	r3, [sp, #8]
 8088b4a:	2300      	movs	r3, #0
 8088b4c:	2601      	movs	r6, #1
 8088b4e:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
 8088b50:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088b52:	f88d 6010 	strb.w	r6, [sp, #16]
    timeout_ = ms;
 8088b56:	9305      	str	r3, [sp, #20]
            return &Wire3;
 8088b58:	f002 f88e 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 8088b5c:	a902      	add	r1, sp, #8
 8088b5e:	f001 fef2 	bl	808a946 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 8088b62:	f002 f889 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(address);
 8088b66:	6803      	ldr	r3, [r0, #0]
 8088b68:	4629      	mov	r1, r5
 8088b6a:	689b      	ldr	r3, [r3, #8]
 8088b6c:	4798      	blx	r3
            return &Wire3;
 8088b6e:	f002 f883 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(DATA);
 8088b72:	6803      	ldr	r3, [r0, #0]
 8088b74:	4621      	mov	r1, r4
 8088b76:	689b      	ldr	r3, [r3, #8]
 8088b78:	4798      	blx	r3
            return &Wire3;
 8088b7a:	f002 f87d 	bl	808ac78 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 8088b7e:	4631      	mov	r1, r6
 8088b80:	f001 fef9 	bl	808a976 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
 8088b84:	a801      	add	r0, sp, #4
 8088b86:	f7ff ff85 	bl	8088a94 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088b8a:	b006      	add	sp, #24
 8088b8c:	bd70      	pop	{r4, r5, r6, pc}

08088b8e <_ZN4PMIC20setInputCurrentLimitEt>:
bool PMIC::setInputCurrentLimit(uint16_t current) {
 8088b8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8088b90:	4604      	mov	r4, r0
 8088b92:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088b94:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088b96:	f7ff ff4f 	bl	8088a38 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8088b9a:	2100      	movs	r1, #0
 8088b9c:	4620      	mov	r0, r4
 8088b9e:	f7ff ff80 	bl	8088aa2 <_ZN4PMIC12readRegisterEh>
    switch (current) {
 8088ba2:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
    byte mask = DATA & 0b11111000;
 8088ba6:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
    switch (current) {
 8088baa:	d02e      	beq.n	8088c0a <_ZN4PMIC20setInputCurrentLimitEt+0x7c>
 8088bac:	d814      	bhi.n	8088bd8 <_ZN4PMIC20setInputCurrentLimitEt+0x4a>
 8088bae:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8088bb2:	d027      	beq.n	8088c04 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8088bb4:	d80a      	bhi.n	8088bcc <_ZN4PMIC20setInputCurrentLimitEt+0x3e>
 8088bb6:	2d64      	cmp	r5, #100	; 0x64
 8088bb8:	d01e      	beq.n	8088bf8 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
 8088bba:	2d96      	cmp	r5, #150	; 0x96
 8088bbc:	d01a      	beq.n	8088bf4 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 8088bbe:	2400      	movs	r4, #0
    std::lock_guard<PMIC> l(*this);
 8088bc0:	a801      	add	r0, sp, #4
 8088bc2:	f7ff ff67 	bl	8088a94 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088bc6:	4620      	mov	r0, r4
 8088bc8:	b003      	add	sp, #12
 8088bca:	bd30      	pop	{r4, r5, pc}
    switch (current) {
 8088bcc:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8088bd0:	d1f5      	bne.n	8088bbe <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8088bd2:	f042 0203 	orr.w	r2, r2, #3
 8088bd6:	e00f      	b.n	8088bf8 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
    switch (current) {
 8088bd8:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8088bdc:	d018      	beq.n	8088c10 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 8088bde:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8088be2:	429d      	cmp	r5, r3
 8088be4:	d017      	beq.n	8088c16 <_ZN4PMIC20setInputCurrentLimitEt+0x88>
 8088be6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8088bea:	429d      	cmp	r5, r3
 8088bec:	d1e7      	bne.n	8088bbe <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 8088bee:	f042 0205 	orr.w	r2, r2, #5
 8088bf2:	e001      	b.n	8088bf8 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 8088bf4:	f042 0201 	orr.w	r2, r2, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8088bf8:	4620      	mov	r0, r4
 8088bfa:	2100      	movs	r1, #0
 8088bfc:	f7ff ff9b 	bl	8088b36 <_ZN4PMIC13writeRegisterEhh>
    return 1; // value was written successfully
 8088c00:	2401      	movs	r4, #1
        break;
 8088c02:	e7dd      	b.n	8088bc0 <_ZN4PMIC20setInputCurrentLimitEt+0x32>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 8088c04:	f042 0202 	orr.w	r2, r2, #2
 8088c08:	e7f6      	b.n	8088bf8 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 8088c0a:	f042 0204 	orr.w	r2, r2, #4
 8088c0e:	e7f3      	b.n	8088bf8 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8088c10:	f042 0206 	orr.w	r2, r2, #6
 8088c14:	e7f0      	b.n	8088bf8 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8088c16:	f042 0207 	orr.w	r2, r2, #7
 8088c1a:	e7ed      	b.n	8088bf8 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>

08088c1c <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
 8088c1c:	b513      	push	{r0, r1, r4, lr}
 8088c1e:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088c20:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088c22:	f7ff ff09 	bl	8088a38 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 8088c26:	2101      	movs	r1, #1
 8088c28:	4620      	mov	r0, r4
 8088c2a:	f7ff ff3a 	bl	8088aa2 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 8088c2e:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 8088c32:	2101      	movs	r1, #1
 8088c34:	4620      	mov	r0, r4
 8088c36:	f042 0210 	orr.w	r2, r2, #16
 8088c3a:	f7ff ff7c 	bl	8088b36 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8088c3e:	a801      	add	r0, sp, #4
 8088c40:	f7ff ff28 	bl	8088a94 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088c44:	2001      	movs	r0, #1
 8088c46:	b002      	add	sp, #8
 8088c48:	bd10      	pop	{r4, pc}

08088c4a <_ZN4PMIC16setChargeCurrentEbbbbbb>:
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8088c4a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8088c4e:	460c      	mov	r4, r1
 8088c50:	4617      	mov	r7, r2
 8088c52:	4605      	mov	r5, r0
 8088c54:	461e      	mov	r6, r3
 8088c56:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 8088c5a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8088c5e:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088c62:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088c64:	f7ff fee8 	bl	8088a38 <_ZN4PMIC4lockEv.constprop.0>
    if (bit7) current = current | 0b10000000;
 8088c68:	2c00      	cmp	r4, #0
 8088c6a:	bf0c      	ite	eq
 8088c6c:	2400      	moveq	r4, #0
 8088c6e:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8088c70:	b10f      	cbz	r7, 8088c76 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x2c>
 8088c72:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    if (bit5) current = current | 0b00100000;
 8088c76:	b10e      	cbz	r6, 8088c7c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x32>
 8088c78:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8088c7c:	f1ba 0f00 	cmp.w	sl, #0
 8088c80:	d001      	beq.n	8088c86 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3c>
 8088c82:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8088c86:	f1b9 0f00 	cmp.w	r9, #0
 8088c8a:	d001      	beq.n	8088c90 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x46>
 8088c8c:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8088c90:	f1b8 0f00 	cmp.w	r8, #0
 8088c94:	d001      	beq.n	8088c9a <_ZN4PMIC16setChargeCurrentEbbbbbb+0x50>
 8088c96:	f044 0404 	orr.w	r4, r4, #4
    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8088c9a:	2102      	movs	r1, #2
 8088c9c:	4628      	mov	r0, r5
 8088c9e:	f7ff ff00 	bl	8088aa2 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
 8088ca2:	f000 0201 	and.w	r2, r0, #1
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8088ca6:	2102      	movs	r1, #2
 8088ca8:	4628      	mov	r0, r5
 8088caa:	4322      	orrs	r2, r4
 8088cac:	f7ff ff43 	bl	8088b36 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8088cb0:	a801      	add	r0, sp, #4
 8088cb2:	f7ff feef 	bl	8088a94 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088cb6:	2001      	movs	r0, #1
 8088cb8:	b002      	add	sp, #8
 8088cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08088cbe <_ZN4PMIC16setChargeVoltageEt>:
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8088cbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8088cc0:	460c      	mov	r4, r1
 8088cc2:	4605      	mov	r5, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088cc4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088cc6:	f7ff feb7 	bl	8088a38 <_ZN4PMIC4lockEv.constprop.0>
    uint32_t best = 0;
 8088cca:	2200      	movs	r2, #0
    int bestDelta = 0x7fffffff;
 8088ccc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8088cd0:	4613      	mov	r3, r2
 8088cd2:	f5c4 615b 	rsb	r1, r4, #3504	; 0xdb0
        int delta = std::abs((int)sum - (int)value);
 8088cd6:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 8088cda:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
        if (delta < bestDelta && sum <= value) {
 8088cde:	4286      	cmp	r6, r0
 8088ce0:	da06      	bge.n	8088cf0 <_ZN4PMIC16setChargeVoltageEt+0x32>
 8088ce2:	f103 07db 	add.w	r7, r3, #219	; 0xdb
 8088ce6:	ebb4 1f07 	cmp.w	r4, r7, lsl #4
 8088cea:	bf24      	itt	cs
 8088cec:	4630      	movcs	r0, r6
 8088cee:	461a      	movcs	r2, r3
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8088cf0:	3301      	adds	r3, #1
 8088cf2:	2b40      	cmp	r3, #64	; 0x40
 8088cf4:	f101 0110 	add.w	r1, r1, #16
 8088cf8:	d1ed      	bne.n	8088cd6 <_ZN4PMIC16setChargeVoltageEt+0x18>
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 8088cfa:	0092      	lsls	r2, r2, #2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8088cfc:	2104      	movs	r1, #4
 8088cfe:	4628      	mov	r0, r5
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 8088d00:	b2d4      	uxtb	r4, r2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8088d02:	f7ff fece 	bl	8088aa2 <_ZN4PMIC12readRegisterEh>
    cvcr |= (currentCvcr & 0b11);
 8088d06:	f000 0203 	and.w	r2, r0, #3
    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);
 8088d0a:	2104      	movs	r1, #4
 8088d0c:	4628      	mov	r0, r5
 8088d0e:	4322      	orrs	r2, r4
 8088d10:	f7ff ff11 	bl	8088b36 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8088d14:	a801      	add	r0, sp, #4
 8088d16:	f7ff febd 	bl	8088a94 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088d1a:	2001      	movs	r0, #1
 8088d1c:	b003      	add	sp, #12
 8088d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088d20 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8088d20:	6880      	ldr	r0, [r0, #8]
 8088d22:	f7ff bbf5 	b.w	8088510 <os_mutex_recursive_unlock>

08088d26 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8088d26:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 8088d28:	2600      	movs	r6, #0
 8088d2a:	4604      	mov	r4, r0
 8088d2c:	460d      	mov	r5, r1
 8088d2e:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 8088d32:	f7ff fbd5 	bl	80884e0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8088d36:	4628      	mov	r0, r5
    _spi = spi;
 8088d38:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8088d3a:	f7ff fcc9 	bl	80886d0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8088d3e:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8088d40:	6066      	str	r6, [r4, #4]
}
 8088d42:	bd70      	pop	{r4, r5, r6, pc}

08088d44 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 8088d44:	b538      	push	{r3, r4, r5, lr}
 8088d46:	4604      	mov	r4, r0
 8088d48:	460d      	mov	r5, r1
    void lock() { os_mutex_recursive_lock(handle_); }
 8088d4a:	6880      	ldr	r0, [r0, #8]
 8088d4c:	f7ff fbd8 	bl	8088500 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 8088d50:	7820      	ldrb	r0, [r4, #0]
 8088d52:	4629      	mov	r1, r5
 8088d54:	f7ff fc94 	bl	8088680 <hal_spi_begin>
        unlock();
 8088d58:	4620      	mov	r0, r4
 8088d5a:	f7ff ffe1 	bl	8088d20 <_ZN8SPIClass6unlockEv>
    }
}
 8088d5e:	bd38      	pop	{r3, r4, r5, pc}

08088d60 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 8088d60:	b538      	push	{r3, r4, r5, lr}
 8088d62:	4604      	mov	r4, r0
 8088d64:	460d      	mov	r5, r1
 8088d66:	6880      	ldr	r0, [r0, #8]
 8088d68:	f7ff fbca 	bl	8088500 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 8088d6c:	7820      	ldrb	r0, [r4, #0]
 8088d6e:	4629      	mov	r1, r5
 8088d70:	f7ff fc8e 	bl	8088690 <hal_spi_set_bit_order>
        unlock();
 8088d74:	4620      	mov	r0, r4
 8088d76:	f7ff ffd3 	bl	8088d20 <_ZN8SPIClass6unlockEv>
    }
}
 8088d7a:	bd38      	pop	{r3, r4, r5, pc}

08088d7c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 8088d7c:	b538      	push	{r3, r4, r5, lr}
 8088d7e:	4604      	mov	r4, r0
 8088d80:	460d      	mov	r5, r1
 8088d82:	6880      	ldr	r0, [r0, #8]
 8088d84:	f7ff fbbc 	bl	8088500 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 8088d88:	7820      	ldrb	r0, [r4, #0]
 8088d8a:	4629      	mov	r1, r5
 8088d8c:	f7ff fc88 	bl	80886a0 <hal_spi_set_data_mode>
        unlock();
 8088d90:	4620      	mov	r0, r4
 8088d92:	f7ff ffc5 	bl	8088d20 <_ZN8SPIClass6unlockEv>
    }
}
 8088d96:	bd38      	pop	{r3, r4, r5, pc}

08088d98 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8088d98:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8088d9a:	2400      	movs	r4, #0
 8088d9c:	0840      	lsrs	r0, r0, #1
 8088d9e:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8088da0:	6818      	ldr	r0, [r3, #0]
 8088da2:	b2e5      	uxtb	r5, r4
 8088da4:	4288      	cmp	r0, r1
 8088da6:	d906      	bls.n	8088db6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8088da8:	3401      	adds	r4, #1
 8088daa:	2c08      	cmp	r4, #8
 8088dac:	d002      	beq.n	8088db4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8088dae:	0840      	lsrs	r0, r0, #1
 8088db0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8088db2:	e7f5      	b.n	8088da0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8088db4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 8088db6:	4b02      	ldr	r3, [pc, #8]	; (8088dc0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8088db8:	5d5b      	ldrb	r3, [r3, r5]
 8088dba:	7013      	strb	r3, [r2, #0]
}
 8088dbc:	bd30      	pop	{r4, r5, pc}
 8088dbe:	bf00      	nop
 8088dc0:	080900ec 	.word	0x080900ec

08088dc4 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8088dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 8088dc6:	2500      	movs	r5, #0
{
 8088dc8:	4604      	mov	r4, r0
 8088dca:	b089      	sub	sp, #36	; 0x24
 8088dcc:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 8088dce:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 8088dd2:	9502      	str	r5, [sp, #8]
 8088dd4:	f7ff fb94 	bl	8088500 <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 8088dd8:	4629      	mov	r1, r5
 8088dda:	2214      	movs	r2, #20
 8088ddc:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 8088dde:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 8088de0:	f003 f8aa 	bl	808bf38 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8088de4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 8088de6:	462a      	mov	r2, r5
 8088de8:	4638      	mov	r0, r7
 8088dea:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 8088dec:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 8088df0:	f7ff fc7e 	bl	80886f0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8088df4:	ab02      	add	r3, sp, #8
 8088df6:	f10d 0207 	add.w	r2, sp, #7
 8088dfa:	4631      	mov	r1, r6
 8088dfc:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 8088dfe:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8088e02:	f7ff ffc9 	bl	8088d98 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 8088e06:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8088e0a:	7820      	ldrb	r0, [r4, #0]
 8088e0c:	f7ff fc50 	bl	80886b0 <hal_spi_set_clock_divider>
        unlock();
 8088e10:	4620      	mov	r0, r4
 8088e12:	f7ff ff85 	bl	8088d20 <_ZN8SPIClass6unlockEv>
    }

    return clock;
}
 8088e16:	9802      	ldr	r0, [sp, #8]
 8088e18:	b009      	add	sp, #36	; 0x24
 8088e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088e1c <_ZN8SPIClass15setClockDividerEh>:
{
 8088e1c:	b538      	push	{r3, r4, r5, lr}
 8088e1e:	4604      	mov	r4, r0
 8088e20:	6880      	ldr	r0, [r0, #8]
 8088e22:	460d      	mov	r5, r1
 8088e24:	f7ff fb6c 	bl	8088500 <os_mutex_recursive_lock>
        if (_dividerReference)
 8088e28:	6861      	ldr	r1, [r4, #4]
 8088e2a:	b199      	cbz	r1, 8088e54 <_ZN8SPIClass15setClockDividerEh+0x38>
    unsigned result = 0;
 8088e2c:	2300      	movs	r3, #0
 8088e2e:	4a0c      	ldr	r2, [pc, #48]	; (8088e60 <_ZN8SPIClass15setClockDividerEh+0x44>)
        if (clock_divisors[result] == divider)
 8088e30:	f812 0b01 	ldrb.w	r0, [r2], #1
 8088e34:	4285      	cmp	r5, r0
 8088e36:	d002      	beq.n	8088e3e <_ZN8SPIClass15setClockDividerEh+0x22>
    for (; result < arraySize(clock_divisors); result++)
 8088e38:	3301      	adds	r3, #1
 8088e3a:	2b08      	cmp	r3, #8
 8088e3c:	d1f8      	bne.n	8088e30 <_ZN8SPIClass15setClockDividerEh+0x14>
    return result + 1;
 8088e3e:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 8088e40:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 8088e42:	2201      	movs	r2, #1
 8088e44:	4620      	mov	r0, r4
 8088e46:	40d9      	lsrs	r1, r3
 8088e48:	f7ff ffbc 	bl	8088dc4 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 8088e4c:	4620      	mov	r0, r4
 8088e4e:	f7ff ff67 	bl	8088d20 <_ZN8SPIClass6unlockEv>
}
 8088e52:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_set_clock_divider(_spi, rate);
 8088e54:	4629      	mov	r1, r5
 8088e56:	7820      	ldrb	r0, [r4, #0]
 8088e58:	f7ff fc2a 	bl	80886b0 <hal_spi_set_clock_divider>
 8088e5c:	e7f6      	b.n	8088e4c <_ZN8SPIClass15setClockDividerEh+0x30>
 8088e5e:	bf00      	nop
 8088e60:	080900ec 	.word	0x080900ec

08088e64 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 8088e64:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 8088e66:	7800      	ldrb	r0, [r0, #0]
 8088e68:	f7ff fc2a 	bl	80886c0 <hal_spi_transfer>
}
 8088e6c:	b2c0      	uxtb	r0, r0
 8088e6e:	bd08      	pop	{r3, pc}

08088e70 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8088e70:	b530      	push	{r4, r5, lr}
 8088e72:	b087      	sub	sp, #28
 8088e74:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8088e76:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 8088e78:	9500      	str	r5, [sp, #0]
 8088e7a:	7800      	ldrb	r0, [r0, #0]
 8088e7c:	f7ff fc40 	bl	8088700 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 8088e80:	b93d      	cbnz	r5, 8088e92 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 8088e82:	7820      	ldrb	r0, [r4, #0]
 8088e84:	a902      	add	r1, sp, #8
 8088e86:	f7ff fc43 	bl	8088710 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 8088e8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8088e8e:	07db      	lsls	r3, r3, #31
 8088e90:	d4f7      	bmi.n	8088e82 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
 8088e92:	b007      	add	sp, #28
 8088e94:	bd30      	pop	{r4, r5, pc}
	...

08088e98 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8088e98:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8088e9a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8088e9c:	b510      	push	{r4, lr}
 8088e9e:	4b08      	ldr	r3, [pc, #32]	; (8088ec0 <_GLOBAL__sub_I_System+0x28>)
 8088ea0:	4c08      	ldr	r4, [pc, #32]	; (8088ec4 <_GLOBAL__sub_I_System+0x2c>)
 8088ea2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8088ea4:	4b08      	ldr	r3, [pc, #32]	; (8088ec8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8088ea6:	6020      	str	r0, [r4, #0]
 8088ea8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 8088eaa:	71a0      	strb	r0, [r4, #6]
 8088eac:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8088eae:	f7ff fc8f 	bl	80887d0 <set_system_mode>
SystemClass System;
 8088eb2:	4620      	mov	r0, r4
 8088eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8088eb8:	4a04      	ldr	r2, [pc, #16]	; (8088ecc <_GLOBAL__sub_I_System+0x34>)
 8088eba:	4905      	ldr	r1, [pc, #20]	; (8088ed0 <_GLOBAL__sub_I_System+0x38>)
 8088ebc:	f001 bf04 	b.w	808acc8 <__aeabi_atexit>
 8088ec0:	20000cd4 	.word	0x20000cd4
 8088ec4:	20000cc8 	.word	0x20000cc8
 8088ec8:	ffff0000 	.word	0xffff0000
 8088ecc:	200002b0 	.word	0x200002b0
 8088ed0:	080809ed 	.word	0x080809ed

08088ed4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8088ed4:	b510      	push	{r4, lr}
 8088ed6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8088ed8:	f003 f895 	bl	808c006 <strlen>
 8088edc:	1e43      	subs	r3, r0, #1
 8088ede:	4620      	mov	r0, r4
 8088ee0:	4423      	add	r3, r4
	while(i<j){
 8088ee2:	4283      	cmp	r3, r0
 8088ee4:	d906      	bls.n	8088ef4 <_Z11str_reversePc+0x20>
		c = *i;
 8088ee6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8088ee8:	7819      	ldrb	r1, [r3, #0]
 8088eea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8088eee:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 8088ef2:	e7f6      	b.n	8088ee2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 8088ef4:	bd10      	pop	{r4, pc}

08088ef6 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 8088ef6:	1e93      	subs	r3, r2, #2
 8088ef8:	2b22      	cmp	r3, #34	; 0x22
 8088efa:	f04f 0300 	mov.w	r3, #0
{
 8088efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088f02:	b08c      	sub	sp, #48	; 0x30
 8088f04:	460d      	mov	r5, r1
 8088f06:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 8088f08:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 8088f0c:	d926      	bls.n	8088f5c <ltoa+0x66>

      if (10 == base && N < 0L)
 8088f0e:	2800      	cmp	r0, #0
 8088f10:	da29      	bge.n	8088f66 <ltoa+0x70>
      {
            *head++ = '-';
 8088f12:	462e      	mov	r6, r5
 8088f14:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 8088f16:	240a      	movs	r4, #10
            *head++ = '-';
 8088f18:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 8088f1c:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 8088f1e:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 8088f22:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 8088f26:	4622      	mov	r2, r4
 8088f28:	4601      	mov	r1, r0
 8088f2a:	a801      	add	r0, sp, #4
 8088f2c:	f002 ffd4 	bl	808bed8 <ldiv>
 8088f30:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 8088f32:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 8088f34:	2b09      	cmp	r3, #9
 8088f36:	bfcc      	ite	gt
 8088f38:	2237      	movgt	r2, #55	; 0x37
 8088f3a:	2230      	movle	r2, #48	; 0x30
 8088f3c:	4413      	add	r3, r2
 8088f3e:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 8088f42:	f108 0801 	add.w	r8, r8, #1
 8088f46:	2800      	cmp	r0, #0
 8088f48:	d1ed      	bne.n	8088f26 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 8088f4a:	4642      	mov	r2, r8
 8088f4c:	4630      	mov	r0, r6
 8088f4e:	1c79      	adds	r1, r7, #1
 8088f50:	f002 ffe4 	bl	808bf1c <memcpy>
      return str;
}
 8088f54:	4628      	mov	r0, r5
 8088f56:	b00c      	add	sp, #48	; 0x30
 8088f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 8088f5c:	2a0a      	cmp	r2, #10
 8088f5e:	d0d6      	beq.n	8088f0e <ltoa+0x18>
      if (uarg)
 8088f60:	b118      	cbz	r0, 8088f6a <ltoa+0x74>
 8088f62:	462e      	mov	r6, r5
 8088f64:	e7db      	b.n	8088f1e <ltoa+0x28>
 8088f66:	240a      	movs	r4, #10
 8088f68:	e7fa      	b.n	8088f60 <ltoa+0x6a>
      else  *tail-- = '0';
 8088f6a:	2330      	movs	r3, #48	; 0x30
 8088f6c:	462e      	mov	r6, r5
      int i = 2;
 8088f6e:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 8088f72:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8088f76:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 8088f7a:	e7e6      	b.n	8088f4a <ltoa+0x54>

08088f7c <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8088f7c:	b570      	push	{r4, r5, r6, lr}
 8088f7e:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8088f80:	1e91      	subs	r1, r2, #2
 8088f82:	2922      	cmp	r1, #34	; 0x22
 8088f84:	d822      	bhi.n	8088fcc <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 8088f86:	4625      	mov	r5, r4

	div_t result;
	while(a){
 8088f88:	b168      	cbz	r0, 8088fa6 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8088f8a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8088f8e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8088f92:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8088f94:	2809      	cmp	r0, #9
                *ptr += '0';
 8088f96:	bf94      	ite	ls
 8088f98:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8088f9a:	3157      	addhi	r1, #87	; 0x57
 8088f9c:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 8088f9e:	4630      	mov	r0, r6
 8088fa0:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 8088fa4:	e7f0      	b.n	8088f88 <ultoa+0xc>
 8088fa6:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 8088fa8:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 8088faa:	4423      	add	r3, r4
 8088fac:	4293      	cmp	r3, r2
 8088fae:	d902      	bls.n	8088fb6 <ultoa+0x3a>
            *ptr++ = '0';
 8088fb0:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 8088fb4:	e7fa      	b.n	8088fac <ultoa+0x30>
 8088fb6:	1b5a      	subs	r2, r3, r5
 8088fb8:	42ab      	cmp	r3, r5
 8088fba:	bf38      	it	cc
 8088fbc:	2200      	movcc	r2, #0

	*ptr = '\0';
 8088fbe:	2300      	movs	r3, #0
	str_reverse(buffer);
 8088fc0:	4620      	mov	r0, r4
	*ptr = '\0';
 8088fc2:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 8088fc4:	f7ff ff86 	bl	8088ed4 <_Z11str_reversePc>
	return buffer;
 8088fc8:	4620      	mov	r0, r4
}
 8088fca:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 8088fcc:	2000      	movs	r0, #0
 8088fce:	e7fc      	b.n	8088fca <ultoa+0x4e>

08088fd0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8088fd0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8088fd2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8088fd4:	460c      	mov	r4, r1
 8088fd6:	4615      	mov	r5, r2
	if(a<0){
 8088fd8:	da0d      	bge.n	8088ff6 <itoa+0x26>
		*buffer = '-';
 8088fda:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8088fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8088fe0:	bf0c      	ite	eq
 8088fe2:	4618      	moveq	r0, r3
 8088fe4:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8088fe6:	2301      	movs	r3, #1
		*buffer = '-';
 8088fe8:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 8088fea:	462a      	mov	r2, r5
 8088fec:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 8088fee:	f7ff ffc5 	bl	8088f7c <ultoa>
	}
	return buffer;
}
 8088ff2:	4620      	mov	r0, r4
 8088ff4:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 8088ff6:	2301      	movs	r3, #1
 8088ff8:	e7f9      	b.n	8088fee <itoa+0x1e>
	...

08088ffc <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8088ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8089000:	4607      	mov	r7, r0
 8089002:	460d      	mov	r5, r1
 8089004:	4616      	mov	r6, r2
 8089006:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 8089008:	2200      	movs	r2, #0
 808900a:	2300      	movs	r3, #0
 808900c:	4638      	mov	r0, r7
 808900e:	4629      	mov	r1, r5
 8089010:	f002 fa9a 	bl	808b548 <__aeabi_dcmplt>
 8089014:	b120      	cbz	r0, 8089020 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 8089016:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 8089018:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 808901c:	f804 3b01 	strb.w	r3, [r4], #1
 8089020:	2300      	movs	r3, #0
    }
    long scale = 1;
 8089022:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 8089026:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 8089028:	b2d9      	uxtb	r1, r3
 808902a:	428e      	cmp	r6, r1
 808902c:	d903      	bls.n	8089036 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 808902e:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 8089032:	3301      	adds	r3, #1
 8089034:	e7f8      	b.n	8089028 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 8089036:	4650      	mov	r0, sl
 8089038:	f001 ffaa 	bl	808af90 <__aeabi_i2d>
 808903c:	463a      	mov	r2, r7
 808903e:	462b      	mov	r3, r5
 8089040:	f002 f810 	bl	808b064 <__aeabi_dmul>
 8089044:	4680      	mov	r8, r0
 8089046:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 8089048:	f002 feea 	bl	808be20 <__aeabi_d2ulz>
 808904c:	4605      	mov	r5, r0
 808904e:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 8089050:	f001 ffd2 	bl	808aff8 <__aeabi_ul2d>
 8089054:	4602      	mov	r2, r0
 8089056:	460b      	mov	r3, r1
 8089058:	4640      	mov	r0, r8
 808905a:	4649      	mov	r1, r9
 808905c:	f001 fe4a 	bl	808acf4 <__aeabi_dsub>
 8089060:	2200      	movs	r2, #0
 8089062:	4b12      	ldr	r3, [pc, #72]	; (80890ac <_Z4dtoadhPc+0xb0>)
 8089064:	f002 fa84 	bl	808b570 <__aeabi_dcmpge>
 8089068:	b110      	cbz	r0, 8089070 <_Z4dtoadhPc+0x74>
        fixed++;
 808906a:	3501      	adds	r5, #1
 808906c:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 8089070:	4652      	mov	r2, sl
 8089072:	4628      	mov	r0, r5
 8089074:	4639      	mov	r1, r7
 8089076:	17d3      	asrs	r3, r2, #31
 8089078:	f002 fe86 	bl	808bd88 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 808907c:	2301      	movs	r3, #1
 808907e:	4615      	mov	r5, r2
 8089080:	4621      	mov	r1, r4
 8089082:	220a      	movs	r2, #10
 8089084:	f7ff ff7a 	bl	8088f7c <ultoa>
    if (prec) {
 8089088:	b16e      	cbz	r6, 80890a6 <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 808908a:	4620      	mov	r0, r4
 808908c:	f002 ffbb 	bl	808c006 <strlen>
        *sout++ = '.';
 8089090:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 8089092:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 8089094:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 8089096:	220a      	movs	r2, #10
 8089098:	4633      	mov	r3, r6
 808909a:	4628      	mov	r0, r5
    }
}
 808909c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 80890a0:	3101      	adds	r1, #1
 80890a2:	f7ff bf6b 	b.w	8088f7c <ultoa>
}
 80890a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80890aa:	bf00      	nop
 80890ac:	3fe00000 	.word	0x3fe00000

080890b0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80890b0:	b510      	push	{r4, lr}
 80890b2:	4604      	mov	r4, r0
{
	free(buffer);
 80890b4:	6800      	ldr	r0, [r0, #0]
 80890b6:	f7ff fc77 	bl	80889a8 <free>
}
 80890ba:	4620      	mov	r0, r4
 80890bc:	bd10      	pop	{r4, pc}

080890be <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80890be:	b510      	push	{r4, lr}
 80890c0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80890c2:	6800      	ldr	r0, [r0, #0]
 80890c4:	b108      	cbz	r0, 80890ca <_ZN6String10invalidateEv+0xc>
 80890c6:	f7ff fc6f 	bl	80889a8 <free>
	buffer = NULL;
 80890ca:	2300      	movs	r3, #0
	capacity = len = 0;
 80890cc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80890d0:	6023      	str	r3, [r4, #0]
}
 80890d2:	bd10      	pop	{r4, pc}

080890d4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80890d4:	b538      	push	{r3, r4, r5, lr}
 80890d6:	4604      	mov	r4, r0
 80890d8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80890da:	6800      	ldr	r0, [r0, #0]
 80890dc:	3101      	adds	r1, #1
 80890de:	f7ff fc6b 	bl	80889b8 <realloc>
	if (newbuffer) {
 80890e2:	b110      	cbz	r0, 80890ea <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80890e4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80890e8:	2001      	movs	r0, #1
	}
	return 0;
}
 80890ea:	bd38      	pop	{r3, r4, r5, pc}

080890ec <_ZN6String7reserveEj>:
{
 80890ec:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80890ee:	6803      	ldr	r3, [r0, #0]
{
 80890f0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80890f2:	b123      	cbz	r3, 80890fe <_ZN6String7reserveEj+0x12>
 80890f4:	6843      	ldr	r3, [r0, #4]
 80890f6:	428b      	cmp	r3, r1
 80890f8:	d301      	bcc.n	80890fe <_ZN6String7reserveEj+0x12>
 80890fa:	2001      	movs	r0, #1
}
 80890fc:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80890fe:	4620      	mov	r0, r4
 8089100:	f7ff ffe8 	bl	80890d4 <_ZN6String12changeBufferEj>
 8089104:	2800      	cmp	r0, #0
 8089106:	d0f9      	beq.n	80890fc <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8089108:	68a3      	ldr	r3, [r4, #8]
 808910a:	2b00      	cmp	r3, #0
 808910c:	d1f5      	bne.n	80890fa <_ZN6String7reserveEj+0xe>
 808910e:	6822      	ldr	r2, [r4, #0]
 8089110:	7013      	strb	r3, [r2, #0]
 8089112:	e7f2      	b.n	80890fa <_ZN6String7reserveEj+0xe>

08089114 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8089114:	b570      	push	{r4, r5, r6, lr}
 8089116:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8089118:	4611      	mov	r1, r2
{
 808911a:	4604      	mov	r4, r0
 808911c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808911e:	f7ff ffe5 	bl	80890ec <_ZN6String7reserveEj>
 8089122:	b920      	cbnz	r0, 808912e <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8089124:	4620      	mov	r0, r4
 8089126:	f7ff ffca 	bl	80890be <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 808912a:	4620      	mov	r0, r4
 808912c:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 808912e:	462a      	mov	r2, r5
 8089130:	4631      	mov	r1, r6
 8089132:	6820      	ldr	r0, [r4, #0]
	len = length;
 8089134:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8089136:	f002 fef1 	bl	808bf1c <memcpy>
	buffer[len] = 0;
 808913a:	2100      	movs	r1, #0
 808913c:	6822      	ldr	r2, [r4, #0]
 808913e:	68a3      	ldr	r3, [r4, #8]
 8089140:	54d1      	strb	r1, [r2, r3]
	return *this;
 8089142:	e7f2      	b.n	808912a <_ZN6String4copyEPKcj+0x16>

08089144 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8089144:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8089146:	2300      	movs	r3, #0
String::String(const char *cstr)
 8089148:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 808914a:	460d      	mov	r5, r1
	capacity = 0;
 808914c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8089150:	6083      	str	r3, [r0, #8]
	flags = 0;
 8089152:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8089154:	b139      	cbz	r1, 8089166 <_ZN6StringC1EPKc+0x22>
 8089156:	4608      	mov	r0, r1
 8089158:	f002 ff55 	bl	808c006 <strlen>
 808915c:	4629      	mov	r1, r5
 808915e:	4602      	mov	r2, r0
 8089160:	4620      	mov	r0, r4
 8089162:	f7ff ffd7 	bl	8089114 <_ZN6String4copyEPKcj>
}
 8089166:	4620      	mov	r0, r4
 8089168:	bd38      	pop	{r3, r4, r5, pc}

0808916a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808916a:	b538      	push	{r3, r4, r5, lr}
 808916c:	4605      	mov	r5, r0
	if (buffer) {
 808916e:	6800      	ldr	r0, [r0, #0]
{
 8089170:	460c      	mov	r4, r1
	if (buffer) {
 8089172:	b168      	cbz	r0, 8089190 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8089174:	686a      	ldr	r2, [r5, #4]
 8089176:	688b      	ldr	r3, [r1, #8]
 8089178:	429a      	cmp	r2, r3
 808917a:	d307      	bcc.n	808918c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 808917c:	6809      	ldr	r1, [r1, #0]
 808917e:	f002 ff1e 	bl	808bfbe <strcpy>
			len = rhs.len;
 8089182:	68a3      	ldr	r3, [r4, #8]
 8089184:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8089186:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8089188:	60a3      	str	r3, [r4, #8]
}
 808918a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 808918c:	f7ff fc0c 	bl	80889a8 <free>
	buffer = rhs.buffer;
 8089190:	6823      	ldr	r3, [r4, #0]
 8089192:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8089194:	6863      	ldr	r3, [r4, #4]
 8089196:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8089198:	68a3      	ldr	r3, [r4, #8]
 808919a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808919c:	2300      	movs	r3, #0
	rhs.capacity = 0;
 808919e:	e9c4 3300 	strd	r3, r3, [r4]
 80891a2:	e7f1      	b.n	8089188 <_ZN6String4moveERS_+0x1e>

080891a4 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80891a4:	4288      	cmp	r0, r1
{
 80891a6:	b510      	push	{r4, lr}
 80891a8:	460b      	mov	r3, r1
 80891aa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80891ac:	d004      	beq.n	80891b8 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80891ae:	6809      	ldr	r1, [r1, #0]
 80891b0:	b121      	cbz	r1, 80891bc <_ZN6StringaSERKS_+0x18>
 80891b2:	689a      	ldr	r2, [r3, #8]
 80891b4:	f7ff ffae 	bl	8089114 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80891b8:	4620      	mov	r0, r4
 80891ba:	bd10      	pop	{r4, pc}
	else invalidate();
 80891bc:	f7ff ff7f 	bl	80890be <_ZN6String10invalidateEv>
 80891c0:	e7fa      	b.n	80891b8 <_ZN6StringaSERKS_+0x14>

080891c2 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80891c2:	2300      	movs	r3, #0
String::String(const String &value)
 80891c4:	b510      	push	{r4, lr}
 80891c6:	4604      	mov	r4, r0
	capacity = 0;
 80891c8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80891cc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80891ce:	7303      	strb	r3, [r0, #12]
	*this = value;
 80891d0:	f7ff ffe8 	bl	80891a4 <_ZN6StringaSERKS_>
}
 80891d4:	4620      	mov	r0, r4
 80891d6:	bd10      	pop	{r4, pc}

080891d8 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80891d8:	4288      	cmp	r0, r1
{
 80891da:	b510      	push	{r4, lr}
 80891dc:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80891de:	d001      	beq.n	80891e4 <_ZN6StringaSEOS_+0xc>
 80891e0:	f7ff ffc3 	bl	808916a <_ZN6String4moveERS_>
	return *this;
}
 80891e4:	4620      	mov	r0, r4
 80891e6:	bd10      	pop	{r4, pc}

080891e8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80891e8:	b538      	push	{r3, r4, r5, lr}
 80891ea:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80891ec:	460c      	mov	r4, r1
 80891ee:	b149      	cbz	r1, 8089204 <_ZN6StringaSEPKc+0x1c>
 80891f0:	4608      	mov	r0, r1
 80891f2:	f002 ff08 	bl	808c006 <strlen>
 80891f6:	4621      	mov	r1, r4
 80891f8:	4602      	mov	r2, r0
 80891fa:	4628      	mov	r0, r5
 80891fc:	f7ff ff8a 	bl	8089114 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8089200:	4628      	mov	r0, r5
 8089202:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 8089204:	f7ff ff5b 	bl	80890be <_ZN6String10invalidateEv>
 8089208:	e7fa      	b.n	8089200 <_ZN6StringaSEPKc+0x18>

0808920a <_ZN6StringC1Ec>:
	buffer = NULL;
 808920a:	2300      	movs	r3, #0
String::String(char c)
 808920c:	b513      	push	{r0, r1, r4, lr}
 808920e:	4604      	mov	r4, r0
	buf[0] = c;
 8089210:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
 8089214:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8089218:	6083      	str	r3, [r0, #8]
	flags = 0;
 808921a:	7303      	strb	r3, [r0, #12]
	*this = buf;
 808921c:	a901      	add	r1, sp, #4
	buf[1] = 0;
 808921e:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 8089222:	f7ff ffe1 	bl	80891e8 <_ZN6StringaSEPKc>
}
 8089226:	4620      	mov	r0, r4
 8089228:	b002      	add	sp, #8
 808922a:	bd10      	pop	{r4, pc}

0808922c <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 808922c:	b510      	push	{r4, lr}
	buffer = NULL;
 808922e:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 8089230:	4604      	mov	r4, r0
 8089232:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 8089234:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 8089238:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808923a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 808923c:	4608      	mov	r0, r1
	itoa(value, buf, base);
 808923e:	a901      	add	r1, sp, #4
 8089240:	f7ff fec6 	bl	8088fd0 <itoa>
	*this = buf;
 8089244:	4620      	mov	r0, r4
 8089246:	a901      	add	r1, sp, #4
 8089248:	f7ff ffce 	bl	80891e8 <_ZN6StringaSEPKc>
}
 808924c:	4620      	mov	r0, r4
 808924e:	b00a      	add	sp, #40	; 0x28
 8089250:	bd10      	pop	{r4, pc}

08089252 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
 8089252:	b510      	push	{r4, lr}
	buffer = NULL;
 8089254:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
 8089256:	4604      	mov	r4, r0
 8089258:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 808925a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808925e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8089260:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
 8089262:	4608      	mov	r0, r1
	ltoa(value, buf, base);
 8089264:	a901      	add	r1, sp, #4
 8089266:	f7ff fe46 	bl	8088ef6 <ltoa>
	*this = buf;
 808926a:	4620      	mov	r0, r4
 808926c:	a901      	add	r1, sp, #4
 808926e:	f7ff ffbb 	bl	80891e8 <_ZN6StringaSEPKc>
}
 8089272:	4620      	mov	r0, r4
 8089274:	b00a      	add	sp, #40	; 0x28
 8089276:	bd10      	pop	{r4, pc}

08089278 <_ZN6StringC1Efi>:
	buffer = NULL;
 8089278:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 808927a:	b530      	push	{r4, r5, lr}
 808927c:	4604      	mov	r4, r0
 808927e:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 8089280:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8089284:	6083      	str	r3, [r0, #8]
	flags = 0;
 8089286:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 8089288:	b2d5      	uxtb	r5, r2
 808928a:	4608      	mov	r0, r1
 808928c:	f001 fe92 	bl	808afb4 <__aeabi_f2d>
 8089290:	462a      	mov	r2, r5
 8089292:	ab01      	add	r3, sp, #4
 8089294:	f7ff feb2 	bl	8088ffc <_Z4dtoadhPc>
        *this = buf;
 8089298:	4620      	mov	r0, r4
 808929a:	a901      	add	r1, sp, #4
 808929c:	f7ff ffa4 	bl	80891e8 <_ZN6StringaSEPKc>
}
 80892a0:	4620      	mov	r0, r4
 80892a2:	b00b      	add	sp, #44	; 0x2c
 80892a4:	bd30      	pop	{r4, r5, pc}

080892a6 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
 80892a6:	b510      	push	{r4, lr}
 80892a8:	4619      	mov	r1, r3
 80892aa:	4604      	mov	r4, r0
	buffer = NULL;
 80892ac:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
 80892ae:	b08a      	sub	sp, #40	; 0x28
 80892b0:	4610      	mov	r0, r2
	capacity = 0;
 80892b2:	e9c4 3300 	strd	r3, r3, [r4]
	dtoa(value, decimalPlaces, buf);
 80892b6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	len = 0;
 80892ba:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80892bc:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
 80892be:	ab01      	add	r3, sp, #4
 80892c0:	f7ff fe9c 	bl	8088ffc <_Z4dtoadhPc>
        *this = buf;
 80892c4:	4620      	mov	r0, r4
 80892c6:	a901      	add	r1, sp, #4
 80892c8:	f7ff ff8e 	bl	80891e8 <_ZN6StringaSEPKc>
}
 80892cc:	4620      	mov	r0, r4
 80892ce:	b00a      	add	sp, #40	; 0x28
 80892d0:	bd10      	pop	{r4, pc}

080892d2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80892d2:	b570      	push	{r4, r5, r6, lr}
 80892d4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80892d6:	460e      	mov	r6, r1
 80892d8:	b909      	cbnz	r1, 80892de <_ZN6String6concatEPKcj+0xc>
 80892da:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80892dc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80892de:	b16a      	cbz	r2, 80892fc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80892e0:	6884      	ldr	r4, [r0, #8]
 80892e2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80892e4:	4621      	mov	r1, r4
 80892e6:	f7ff ff01 	bl	80890ec <_ZN6String7reserveEj>
 80892ea:	2800      	cmp	r0, #0
 80892ec:	d0f5      	beq.n	80892da <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80892ee:	6828      	ldr	r0, [r5, #0]
 80892f0:	68ab      	ldr	r3, [r5, #8]
 80892f2:	4631      	mov	r1, r6
 80892f4:	4418      	add	r0, r3
 80892f6:	f002 fe62 	bl	808bfbe <strcpy>
	len = newlen;
 80892fa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80892fc:	2001      	movs	r0, #1
 80892fe:	e7ed      	b.n	80892dc <_ZN6String6concatEPKcj+0xa>

08089300 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 8089300:	688a      	ldr	r2, [r1, #8]
 8089302:	6809      	ldr	r1, [r1, #0]
 8089304:	f7ff bfe5 	b.w	80892d2 <_ZN6String6concatEPKcj>

08089308 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 8089308:	b538      	push	{r3, r4, r5, lr}
 808930a:	4605      	mov	r5, r0
	if (!cstr) return 0;
 808930c:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 808930e:	4608      	mov	r0, r1
	if (!cstr) return 0;
 8089310:	b141      	cbz	r1, 8089324 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 8089312:	f002 fe78 	bl	808c006 <strlen>
 8089316:	4621      	mov	r1, r4
 8089318:	4602      	mov	r2, r0
 808931a:	4628      	mov	r0, r5
}
 808931c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 8089320:	f7ff bfd7 	b.w	80892d2 <_ZN6String6concatEPKcj>
}
 8089324:	bd38      	pop	{r3, r4, r5, pc}

08089326 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8089326:	2300      	movs	r3, #0
{
 8089328:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 808932a:	2201      	movs	r2, #1
	buf[0] = c;
 808932c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 8089330:	a901      	add	r1, sp, #4
	buf[1] = 0;
 8089332:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 8089336:	f7ff ffcc 	bl	80892d2 <_ZN6String6concatEPKcj>
}
 808933a:	b003      	add	sp, #12
 808933c:	f85d fb04 	ldr.w	pc, [sp], #4

08089340 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8089340:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8089342:	688a      	ldr	r2, [r1, #8]
 8089344:	6809      	ldr	r1, [r1, #0]
{
 8089346:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8089348:	f7ff ffc3 	bl	80892d2 <_ZN6String6concatEPKcj>
 808934c:	b910      	cbnz	r0, 8089354 <_ZplRK15StringSumHelperRK6String+0x14>
 808934e:	4620      	mov	r0, r4
 8089350:	f7ff feb5 	bl	80890be <_ZN6String10invalidateEv>
	return a;
}
 8089354:	4620      	mov	r0, r4
 8089356:	bd10      	pop	{r4, pc}

08089358 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8089358:	b538      	push	{r3, r4, r5, lr}
 808935a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808935c:	460d      	mov	r5, r1
 808935e:	b921      	cbnz	r1, 808936a <_ZplRK15StringSumHelperPKc+0x12>
 8089360:	4620      	mov	r0, r4
 8089362:	f7ff feac 	bl	80890be <_ZN6String10invalidateEv>
	return a;
}
 8089366:	4620      	mov	r0, r4
 8089368:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808936a:	4608      	mov	r0, r1
 808936c:	f002 fe4b 	bl	808c006 <strlen>
 8089370:	4629      	mov	r1, r5
 8089372:	4602      	mov	r2, r0
 8089374:	4620      	mov	r0, r4
 8089376:	f7ff ffac 	bl	80892d2 <_ZN6String6concatEPKcj>
 808937a:	2800      	cmp	r0, #0
 808937c:	d0f0      	beq.n	8089360 <_ZplRK15StringSumHelperPKc+0x8>
 808937e:	e7f2      	b.n	8089366 <_ZplRK15StringSumHelperPKc+0xe>

08089380 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8089380:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8089382:	6882      	ldr	r2, [r0, #8]
 8089384:	b93a      	cbnz	r2, 8089396 <_ZNK6String6equalsEPKc+0x16>
 8089386:	b121      	cbz	r1, 8089392 <_ZNK6String6equalsEPKc+0x12>
 8089388:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 808938a:	fab0 f080 	clz	r0, r0
 808938e:	0940      	lsrs	r0, r0, #5
 8089390:	e000      	b.n	8089394 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8089392:	2001      	movs	r0, #1
}
 8089394:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8089396:	6800      	ldr	r0, [r0, #0]
 8089398:	b909      	cbnz	r1, 808939e <_ZNK6String6equalsEPKc+0x1e>
 808939a:	7800      	ldrb	r0, [r0, #0]
 808939c:	e7f5      	b.n	808938a <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 808939e:	f002 fe04 	bl	808bfaa <strcmp>
 80893a2:	e7f2      	b.n	808938a <_ZNK6String6equalsEPKc+0xa>

080893a4 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80893a4:	6883      	ldr	r3, [r0, #8]
 80893a6:	428b      	cmp	r3, r1
 80893a8:	d903      	bls.n	80893b2 <_ZNK6StringixEj+0xe>
 80893aa:	6800      	ldr	r0, [r0, #0]
 80893ac:	b110      	cbz	r0, 80893b4 <_ZNK6StringixEj+0x10>
	return buffer[index];
 80893ae:	5c40      	ldrb	r0, [r0, r1]
 80893b0:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 80893b2:	2000      	movs	r0, #0
}
 80893b4:	4770      	bx	lr

080893b6 <_ZNK6String6charAtEj>:
	return operator[](loc);
 80893b6:	f7ff bff5 	b.w	80893a4 <_ZNK6StringixEj>

080893ba <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80893ba:	b558      	push	{r3, r4, r6, lr}
 80893bc:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80893be:	b12a      	cbz	r2, 80893cc <_ZNK6String8getBytesEPhjj+0x12>
 80893c0:	b121      	cbz	r1, 80893cc <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 80893c2:	6884      	ldr	r4, [r0, #8]
 80893c4:	429c      	cmp	r4, r3
 80893c6:	d802      	bhi.n	80893ce <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80893c8:	2300      	movs	r3, #0
 80893ca:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 80893cc:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 80893ce:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 80893d0:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 80893d2:	4294      	cmp	r4, r2
 80893d4:	bf28      	it	cs
 80893d6:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 80893d8:	6801      	ldr	r1, [r0, #0]
 80893da:	4622      	mov	r2, r4
 80893dc:	4419      	add	r1, r3
 80893de:	4630      	mov	r0, r6
 80893e0:	f002 fe2b 	bl	808c03a <strncpy>
	buf[n] = 0;
 80893e4:	2300      	movs	r3, #0
 80893e6:	5533      	strb	r3, [r6, r4]
 80893e8:	e7f0      	b.n	80893cc <_ZNK6String8getBytesEPhjj+0x12>
	...

080893ec <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80893ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80893ee:	461d      	mov	r5, r3
	if (left > right) {
 80893f0:	429a      	cmp	r2, r3
 80893f2:	bf88      	it	hi
 80893f4:	4613      	movhi	r3, r2
{
 80893f6:	460f      	mov	r7, r1
 80893f8:	4614      	mov	r4, r2
	if (left > right) {
 80893fa:	bf88      	it	hi
 80893fc:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80893fe:	490b      	ldr	r1, [pc, #44]	; (808942c <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 8089400:	bf88      	it	hi
 8089402:	461d      	movhi	r5, r3
{
 8089404:	4606      	mov	r6, r0
	String out;
 8089406:	f7ff fe9d 	bl	8089144 <_ZN6StringC1EPKc>
	if (left > len) return out;
 808940a:	68ba      	ldr	r2, [r7, #8]
 808940c:	42a2      	cmp	r2, r4
 808940e:	d30a      	bcc.n	8089426 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 8089410:	6839      	ldr	r1, [r7, #0]
 8089412:	42aa      	cmp	r2, r5
 8089414:	bf94      	ite	ls
 8089416:	ebc4 0202 	rsbls	r2, r4, r2
 808941a:	ebc4 0205 	rsbhi	r2, r4, r5
 808941e:	4630      	mov	r0, r6
 8089420:	4421      	add	r1, r4
 8089422:	f7ff fe77 	bl	8089114 <_ZN6String4copyEPKcj>
	return out;
}
 8089426:	4630      	mov	r0, r6
 8089428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808942a:	bf00      	nop
 808942c:	080900b9 	.word	0x080900b9

08089430 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8089430:	6800      	ldr	r0, [r0, #0]
 8089432:	b108      	cbz	r0, 8089438 <_ZNK6String5toIntEv+0x8>
 8089434:	f002 bd3d 	b.w	808beb2 <atol>
	return 0;
}
 8089438:	4770      	bx	lr

0808943a <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808943a:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808943c:	6800      	ldr	r0, [r0, #0]
 808943e:	b120      	cbz	r0, 808944a <_ZNK6String7toFloatEv+0x10>
 8089440:	f002 fd34 	bl	808beac <atof>
 8089444:	f002 f906 	bl	808b654 <__aeabi_d2f>
	return 0;
}
 8089448:	bd08      	pop	{r3, pc}
	return 0;
 808944a:	2000      	movs	r0, #0
 808944c:	e7fc      	b.n	8089448 <_ZNK6String7toFloatEv+0xe>
	...

08089450 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 8089450:	b40e      	push	{r1, r2, r3}
 8089452:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8089454:	ad09      	add	r5, sp, #36	; 0x24
 8089456:	f855 7b04 	ldr.w	r7, [r5], #4
 808945a:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808945c:	462b      	mov	r3, r5
 808945e:	463a      	mov	r2, r7
 8089460:	2105      	movs	r1, #5
 8089462:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 8089464:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8089466:	f7ff fac7 	bl	80889f8 <vsnprintf>
 808946a:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 808946c:	490b      	ldr	r1, [pc, #44]	; (808949c <_ZN6String6formatEPKcz+0x4c>)
 808946e:	4620      	mov	r0, r4
 8089470:	f7ff fe68 	bl	8089144 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 8089474:	4631      	mov	r1, r6
 8089476:	4620      	mov	r0, r4
 8089478:	f7ff fe38 	bl	80890ec <_ZN6String7reserveEj>
    if (result.buffer) {
 808947c:	6820      	ldr	r0, [r4, #0]
 808947e:	b130      	cbz	r0, 808948e <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8089480:	462b      	mov	r3, r5
 8089482:	463a      	mov	r2, r7
 8089484:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 8089486:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8089488:	f7ff fab6 	bl	80889f8 <vsnprintf>
        va_end(marker);
        result.len = n;
 808948c:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 808948e:	4620      	mov	r0, r4
 8089490:	b004      	add	sp, #16
 8089492:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8089496:	b003      	add	sp, #12
 8089498:	4770      	bx	lr
 808949a:	bf00      	nop
 808949c:	080900b9 	.word	0x080900b9

080894a0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80894a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80894a2:	4606      	mov	r6, r0
 80894a4:	460d      	mov	r5, r1
  size_t n = 0;
 80894a6:	2400      	movs	r4, #0
 80894a8:	188f      	adds	r7, r1, r2
  while (size--) {
 80894aa:	42bd      	cmp	r5, r7
 80894ac:	d00c      	beq.n	80894c8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80894ae:	6833      	ldr	r3, [r6, #0]
 80894b0:	4630      	mov	r0, r6
 80894b2:	689b      	ldr	r3, [r3, #8]
 80894b4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80894b8:	4798      	blx	r3
     if (chunk>=0)
 80894ba:	1e03      	subs	r3, r0, #0
 80894bc:	db01      	blt.n	80894c2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80894be:	441c      	add	r4, r3
  while (size--) {
 80894c0:	e7f3      	b.n	80894aa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80894c2:	2c00      	cmp	r4, #0
 80894c4:	bf08      	it	eq
 80894c6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80894c8:	4620      	mov	r0, r4
 80894ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080894cc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80894cc:	b508      	push	{r3, lr}
  return write(str);
 80894ce:	f7fe fa2f 	bl	8087930 <_ZN5Print5writeEPKc>
}
 80894d2:	bd08      	pop	{r3, pc}

080894d4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80894d4:	6803      	ldr	r3, [r0, #0]
 80894d6:	689b      	ldr	r3, [r3, #8]
 80894d8:	4718      	bx	r3

080894da <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80894da:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80894dc:	210d      	movs	r1, #13
{
 80894de:	4605      	mov	r5, r0
  size_t n = print('\r');
 80894e0:	f7ff fff8 	bl	80894d4 <_ZN5Print5printEc>
  n += print('\n');
 80894e4:	210a      	movs	r1, #10
  size_t n = print('\r');
 80894e6:	4604      	mov	r4, r0
  n += print('\n');
 80894e8:	4628      	mov	r0, r5
 80894ea:	f7ff fff3 	bl	80894d4 <_ZN5Print5printEc>
  return n;
}
 80894ee:	4420      	add	r0, r4
 80894f0:	bd38      	pop	{r3, r4, r5, pc}

080894f2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80894f2:	b538      	push	{r3, r4, r5, lr}
 80894f4:	4605      	mov	r5, r0
  return write(str);
 80894f6:	f7fe fa1b 	bl	8087930 <_ZN5Print5writeEPKc>
 80894fa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80894fc:	4628      	mov	r0, r5
 80894fe:	f7ff ffec 	bl	80894da <_ZN5Print7printlnEv>
  return n;
}
 8089502:	4420      	add	r0, r4
 8089504:	bd38      	pop	{r3, r4, r5, pc}

08089506 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 8089506:	b538      	push	{r3, r4, r5, lr}
 8089508:	4605      	mov	r5, r0
  size_t n = print(c);
 808950a:	f7ff ffe3 	bl	80894d4 <_ZN5Print5printEc>
 808950e:	4604      	mov	r4, r0
  n += println();
 8089510:	4628      	mov	r0, r5
 8089512:	f7ff ffe2 	bl	80894da <_ZN5Print7printlnEv>
  return n;
}
 8089516:	4420      	add	r0, r4
 8089518:	bd38      	pop	{r3, r4, r5, pc}

0808951a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808951a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808951c:	2a01      	cmp	r2, #1
 808951e:	bf98      	it	ls
 8089520:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8089522:	b530      	push	{r4, r5, lr}
 8089524:	b08b      	sub	sp, #44	; 0x2c
 8089526:	460c      	mov	r4, r1
  *str = '\0';
 8089528:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 808952c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808952e:	4625      	mov	r5, r4
 8089530:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8089534:	fb04 5312 	mls	r3, r4, r2, r5
 8089538:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808953a:	2b09      	cmp	r3, #9
 808953c:	bf94      	ite	ls
 808953e:	3330      	addls	r3, #48	; 0x30
 8089540:	3337      	addhi	r3, #55	; 0x37
 8089542:	b2db      	uxtb	r3, r3
  } while(n);
 8089544:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8089546:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 808954a:	d9f0      	bls.n	808952e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 808954c:	f7fe f9f0 	bl	8087930 <_ZN5Print5writeEPKc>
}
 8089550:	b00b      	add	sp, #44	; 0x2c
 8089552:	bd30      	pop	{r4, r5, pc}

08089554 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8089554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089558:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808955a:	4619      	mov	r1, r3
 808955c:	4610      	mov	r0, r2
{
 808955e:	4692      	mov	sl, r2
 8089560:	461f      	mov	r7, r3
 8089562:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 8089566:	f002 f817 	bl	808b598 <__aeabi_dcmpun>
 808956a:	b140      	cbz	r0, 808957e <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 808956c:	4950      	ldr	r1, [pc, #320]	; (80896b0 <_ZN5Print10printFloatEdh+0x15c>)
 808956e:	4628      	mov	r0, r5
 8089570:	f7fe f9de 	bl	8087930 <_ZN5Print5writeEPKc>
 8089574:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 8089576:	4620      	mov	r0, r4
 8089578:	b003      	add	sp, #12
 808957a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 808957e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 8089582:	f04f 32ff 	mov.w	r2, #4294967295
 8089586:	4650      	mov	r0, sl
 8089588:	4621      	mov	r1, r4
 808958a:	4b4a      	ldr	r3, [pc, #296]	; (80896b4 <_ZN5Print10printFloatEdh+0x160>)
 808958c:	f002 f804 	bl	808b598 <__aeabi_dcmpun>
 8089590:	b948      	cbnz	r0, 80895a6 <_ZN5Print10printFloatEdh+0x52>
 8089592:	f04f 32ff 	mov.w	r2, #4294967295
 8089596:	4650      	mov	r0, sl
 8089598:	4621      	mov	r1, r4
 808959a:	4b46      	ldr	r3, [pc, #280]	; (80896b4 <_ZN5Print10printFloatEdh+0x160>)
 808959c:	f001 ffde 	bl	808b55c <__aeabi_dcmple>
 80895a0:	b908      	cbnz	r0, 80895a6 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80895a2:	4945      	ldr	r1, [pc, #276]	; (80896b8 <_ZN5Print10printFloatEdh+0x164>)
 80895a4:	e7e3      	b.n	808956e <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80895a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80895aa:	4650      	mov	r0, sl
 80895ac:	4639      	mov	r1, r7
 80895ae:	4b43      	ldr	r3, [pc, #268]	; (80896bc <_ZN5Print10printFloatEdh+0x168>)
 80895b0:	f001 ffe8 	bl	808b584 <__aeabi_dcmpgt>
 80895b4:	b108      	cbz	r0, 80895ba <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80895b6:	4942      	ldr	r1, [pc, #264]	; (80896c0 <_ZN5Print10printFloatEdh+0x16c>)
 80895b8:	e7d9      	b.n	808956e <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80895ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80895be:	4650      	mov	r0, sl
 80895c0:	4639      	mov	r1, r7
 80895c2:	4b40      	ldr	r3, [pc, #256]	; (80896c4 <_ZN5Print10printFloatEdh+0x170>)
 80895c4:	f001 ffc0 	bl	808b548 <__aeabi_dcmplt>
 80895c8:	2800      	cmp	r0, #0
 80895ca:	d1f4      	bne.n	80895b6 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80895cc:	2200      	movs	r2, #0
 80895ce:	2300      	movs	r3, #0
 80895d0:	4650      	mov	r0, sl
 80895d2:	4639      	mov	r1, r7
 80895d4:	f001 ffb8 	bl	808b548 <__aeabi_dcmplt>
 80895d8:	4604      	mov	r4, r0
 80895da:	b130      	cbz	r0, 80895ea <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80895dc:	212d      	movs	r1, #45	; 0x2d
 80895de:	4628      	mov	r0, r5
 80895e0:	f7ff ff78 	bl	80894d4 <_ZN5Print5printEc>
 80895e4:	4604      	mov	r4, r0
     number = -number;
 80895e6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80895ea:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80895ee:	2000      	movs	r0, #0
    rounding /= 10.0;
 80895f0:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80895f4:	4934      	ldr	r1, [pc, #208]	; (80896c8 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80895f6:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80896d0 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80895fa:	fa5f f38b 	uxtb.w	r3, fp
 80895fe:	429e      	cmp	r6, r3
 8089600:	d906      	bls.n	8089610 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 8089602:	4642      	mov	r2, r8
 8089604:	464b      	mov	r3, r9
 8089606:	f001 fe57 	bl	808b2b8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 808960a:	f10b 0b01 	add.w	fp, fp, #1
 808960e:	e7f4      	b.n	80895fa <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 8089610:	463b      	mov	r3, r7
 8089612:	4652      	mov	r2, sl
 8089614:	f001 fb70 	bl	808acf8 <__adddf3>
 8089618:	4689      	mov	r9, r1
 808961a:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 808961c:	f001 fffa 	bl	808b614 <__aeabi_d2uiz>
 8089620:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 8089622:	f001 fca5 	bl	808af70 <__aeabi_ui2d>
 8089626:	4602      	mov	r2, r0
 8089628:	460b      	mov	r3, r1
 808962a:	4640      	mov	r0, r8
 808962c:	4649      	mov	r1, r9
 808962e:	f001 fb61 	bl	808acf4 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8089632:	220a      	movs	r2, #10
 8089634:	4680      	mov	r8, r0
 8089636:	4689      	mov	r9, r1
 8089638:	4628      	mov	r0, r5
 808963a:	4639      	mov	r1, r7
 808963c:	f7ff ff6d 	bl	808951a <_ZN5Print11printNumberEmh>
  n += print(int_part);
 8089640:	4404      	add	r4, r0
  if (digits > 0) {
 8089642:	b126      	cbz	r6, 808964e <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 8089644:	4628      	mov	r0, r5
 8089646:	4921      	ldr	r1, [pc, #132]	; (80896cc <_ZN5Print10printFloatEdh+0x178>)
 8089648:	f7fe f972 	bl	8087930 <_ZN5Print5writeEPKc>
    n += print(".");
 808964c:	4404      	add	r4, r0
    remainder *= 10.0;
 808964e:	f04f 0a00 	mov.w	sl, #0
 8089652:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80896d0 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 8089656:	3e01      	subs	r6, #1
 8089658:	b2f6      	uxtb	r6, r6
 808965a:	2eff      	cmp	r6, #255	; 0xff
 808965c:	d08b      	beq.n	8089576 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 808965e:	4652      	mov	r2, sl
 8089660:	465b      	mov	r3, fp
 8089662:	4640      	mov	r0, r8
 8089664:	4649      	mov	r1, r9
 8089666:	f001 fcfd 	bl	808b064 <__aeabi_dmul>
 808966a:	4680      	mov	r8, r0
 808966c:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 808966e:	f001 ffa9 	bl	808b5c4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 8089672:	1e07      	subs	r7, r0, #0
 8089674:	da19      	bge.n	80896aa <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 8089676:	212d      	movs	r1, #45	; 0x2d
 8089678:	4628      	mov	r0, r5
 808967a:	f7ff ff2b 	bl	80894d4 <_ZN5Print5printEc>
 808967e:	4603      	mov	r3, r0
            val = -n;
 8089680:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 8089682:	220a      	movs	r2, #10
 8089684:	4628      	mov	r0, r5
 8089686:	9301      	str	r3, [sp, #4]
 8089688:	f7ff ff47 	bl	808951a <_ZN5Print11printNumberEmh>
 808968c:	9b01      	ldr	r3, [sp, #4]
 808968e:	4403      	add	r3, r0
    remainder -= toPrint;
 8089690:	4638      	mov	r0, r7
    n += print(toPrint);
 8089692:	441c      	add	r4, r3
    remainder -= toPrint;
 8089694:	f001 fc7c 	bl	808af90 <__aeabi_i2d>
 8089698:	4602      	mov	r2, r0
 808969a:	460b      	mov	r3, r1
 808969c:	4640      	mov	r0, r8
 808969e:	4649      	mov	r1, r9
 80896a0:	f001 fb28 	bl	808acf4 <__aeabi_dsub>
 80896a4:	4680      	mov	r8, r0
 80896a6:	4689      	mov	r9, r1
  while (digits-- > 0)
 80896a8:	e7d5      	b.n	8089656 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80896aa:	4639      	mov	r1, r7
        size_t t = 0;
 80896ac:	2300      	movs	r3, #0
 80896ae:	e7e8      	b.n	8089682 <_ZN5Print10printFloatEdh+0x12e>
 80896b0:	080900f4 	.word	0x080900f4
 80896b4:	7fefffff 	.word	0x7fefffff
 80896b8:	080900f8 	.word	0x080900f8
 80896bc:	41efffff 	.word	0x41efffff
 80896c0:	080900fc 	.word	0x080900fc
 80896c4:	c1efffff 	.word	0xc1efffff
 80896c8:	3fe00000 	.word	0x3fe00000
 80896cc:	0808fc02 	.word	0x0808fc02
 80896d0:	40240000 	.word	0x40240000

080896d4 <_ZN5Print7printlnEdi>:
{
 80896d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80896d6:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80896da:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80896dc:	9100      	str	r1, [sp, #0]
 80896de:	f7ff ff39 	bl	8089554 <_ZN5Print10printFloatEdh>
 80896e2:	4604      	mov	r4, r0
  n += println();
 80896e4:	4628      	mov	r0, r5
 80896e6:	f7ff fef8 	bl	80894da <_ZN5Print7printlnEv>
}
 80896ea:	4420      	add	r0, r4
 80896ec:	b003      	add	sp, #12
 80896ee:	bd30      	pop	{r4, r5, pc}

080896f0 <_ZN5Print7printlnEfi>:
{
 80896f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80896f2:	4604      	mov	r4, r0
    return println((double)num, digits);
 80896f4:	4608      	mov	r0, r1
{
 80896f6:	4615      	mov	r5, r2
    return println((double)num, digits);
 80896f8:	f001 fc5c 	bl	808afb4 <__aeabi_f2d>
 80896fc:	9500      	str	r5, [sp, #0]
 80896fe:	4602      	mov	r2, r0
 8089700:	460b      	mov	r3, r1
 8089702:	4620      	mov	r0, r4
 8089704:	f7ff ffe6 	bl	80896d4 <_ZN5Print7printlnEdi>
}
 8089708:	b003      	add	sp, #12
 808970a:	bd30      	pop	{r4, r5, pc}

0808970c <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 808970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089710:	b086      	sub	sp, #24
 8089712:	af00      	add	r7, sp, #0
 8089714:	4605      	mov	r5, r0
 8089716:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8089718:	1d38      	adds	r0, r7, #4
 808971a:	2114      	movs	r1, #20
{
 808971c:	4614      	mov	r4, r2
    va_copy(args2, args);
 808971e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8089720:	f7ff f96a 	bl	80889f8 <vsnprintf>

    if (n<bufsize)
 8089724:	2813      	cmp	r0, #19
 8089726:	d80e      	bhi.n	8089746 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 8089728:	4628      	mov	r0, r5
 808972a:	1d39      	adds	r1, r7, #4
 808972c:	f7fe f900 	bl	8087930 <_ZN5Print5writeEPKc>
 8089730:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8089732:	b11e      	cbz	r6, 808973c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 8089734:	4628      	mov	r0, r5
 8089736:	f7ff fed0 	bl	80894da <_ZN5Print7printlnEv>
 808973a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 808973c:	4620      	mov	r0, r4
 808973e:	3718      	adds	r7, #24
 8089740:	46bd      	mov	sp, r7
 8089742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 8089746:	f100 0308 	add.w	r3, r0, #8
 808974a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 808974e:	46e8      	mov	r8, sp
        char bigger[n+1];
 8089750:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 8089754:	4622      	mov	r2, r4
 8089756:	1c41      	adds	r1, r0, #1
 8089758:	683b      	ldr	r3, [r7, #0]
 808975a:	4668      	mov	r0, sp
 808975c:	f7ff f94c 	bl	80889f8 <vsnprintf>
  return write(str);
 8089760:	4669      	mov	r1, sp
 8089762:	4628      	mov	r0, r5
 8089764:	f7fe f8e4 	bl	8087930 <_ZN5Print5writeEPKc>
 8089768:	4604      	mov	r4, r0
 808976a:	46c5      	mov	sp, r8
 808976c:	e7e1      	b.n	8089732 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

0808976e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 808976e:	b510      	push	{r4, lr}
 8089770:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8089772:	f7fe fe7d 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 8089776:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 8089778:	6823      	ldr	r3, [r4, #0]
 808977a:	4620      	mov	r0, r4
 808977c:	695b      	ldr	r3, [r3, #20]
 808977e:	4798      	blx	r3
    if (c >= 0) return c;
 8089780:	2800      	cmp	r0, #0
 8089782:	da08      	bge.n	8089796 <_ZN6Stream9timedReadEv+0x28>
 8089784:	f7fe fe74 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 8089788:	68e3      	ldr	r3, [r4, #12]
 808978a:	1ac0      	subs	r0, r0, r3
 808978c:	68a3      	ldr	r3, [r4, #8]
 808978e:	4298      	cmp	r0, r3
 8089790:	d3f2      	bcc.n	8089778 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 8089792:	f04f 30ff 	mov.w	r0, #4294967295
}
 8089796:	bd10      	pop	{r4, pc}

08089798 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 8089798:	6081      	str	r1, [r0, #8]
}
 808979a:	4770      	bx	lr

0808979c <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808979c:	b538      	push	{r3, r4, r5, lr}
 808979e:	460d      	mov	r5, r1
  String ret;
 80897a0:	4907      	ldr	r1, [pc, #28]	; (80897c0 <_ZN6Stream10readStringEv+0x24>)
{
 80897a2:	4604      	mov	r4, r0
  String ret;
 80897a4:	f7ff fcce 	bl	8089144 <_ZN6StringC1EPKc>
  int c = timedRead();
 80897a8:	4628      	mov	r0, r5
 80897aa:	f7ff ffe0 	bl	808976e <_ZN6Stream9timedReadEv>
  while (c >= 0)
 80897ae:	2800      	cmp	r0, #0
 80897b0:	db04      	blt.n	80897bc <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 80897b2:	b2c1      	uxtb	r1, r0
 80897b4:	4620      	mov	r0, r4
 80897b6:	f7ff fdb6 	bl	8089326 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 80897ba:	e7f5      	b.n	80897a8 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
 80897bc:	4620      	mov	r0, r4
 80897be:	bd38      	pop	{r3, r4, r5, pc}
 80897c0:	080900b9 	.word	0x080900b9

080897c4 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 80897c4:	b570      	push	{r4, r5, r6, lr}
 80897c6:	460d      	mov	r5, r1
  String ret;
 80897c8:	4909      	ldr	r1, [pc, #36]	; (80897f0 <_ZN6Stream15readStringUntilEc+0x2c>)
{
 80897ca:	4604      	mov	r4, r0
 80897cc:	4616      	mov	r6, r2
  String ret;
 80897ce:	f7ff fcb9 	bl	8089144 <_ZN6StringC1EPKc>
  int c = timedRead();
 80897d2:	4628      	mov	r0, r5
 80897d4:	f7ff ffcb 	bl	808976e <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 80897d8:	2800      	cmp	r0, #0
 80897da:	db06      	blt.n	80897ea <_ZN6Stream15readStringUntilEc+0x26>
 80897dc:	4286      	cmp	r6, r0
 80897de:	d004      	beq.n	80897ea <_ZN6Stream15readStringUntilEc+0x26>
 80897e0:	b2c1      	uxtb	r1, r0
 80897e2:	4620      	mov	r0, r4
 80897e4:	f7ff fd9f 	bl	8089326 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 80897e8:	e7f3      	b.n	80897d2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
 80897ea:	4620      	mov	r0, r4
 80897ec:	bd70      	pop	{r4, r5, r6, pc}
 80897ee:	bf00      	nop
 80897f0:	080900b9 	.word	0x080900b9

080897f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80897f4:	680b      	ldr	r3, [r1, #0]
 80897f6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80897f8:	b113      	cbz	r3, 8089800 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80897fa:	685a      	ldr	r2, [r3, #4]
 80897fc:	3201      	adds	r2, #1
 80897fe:	605a      	str	r2, [r3, #4]
      }
 8089800:	4770      	bx	lr
	...

08089804 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8089804:	4b01      	ldr	r3, [pc, #4]	; (808980c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8089806:	4a02      	ldr	r2, [pc, #8]	; (8089810 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8089808:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 808980a:	4770      	bx	lr
 808980c:	20000cd8 	.word	0x20000cd8
 8089810:	08090100 	.word	0x08090100

08089814 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8089814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 8089818:	4a15      	ldr	r2, [pc, #84]	; (8089870 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808981a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 808987c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 808981e:	e9d2 3200 	ldrd	r3, r2, [r2]
 8089822:	18c0      	adds	r0, r0, r3
 8089824:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 8089828:	4a12      	ldr	r2, [pc, #72]	; (8089874 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 808982a:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 808982c:	e9d2 3200 	ldrd	r3, r2, [r2]
 8089830:	18c6      	adds	r6, r0, r3
 8089832:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 8089836:	e9d8 2300 	ldrd	r2, r3, [r8]
 808983a:	42bb      	cmp	r3, r7
 808983c:	bf08      	it	eq
 808983e:	42b2      	cmpeq	r2, r6
 8089840:	d013      	beq.n	808986a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 8089842:	a903      	add	r1, sp, #12
 8089844:	4668      	mov	r0, sp
 8089846:	e9cd 6700 	strd	r6, r7, [sp]
 808984a:	f7f6 fbf1 	bl	8080030 <localtime_r>
	calendar_time.tm_year += 1900;
 808984e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8089850:	4d09      	ldr	r5, [pc, #36]	; (8089878 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 8089852:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8089856:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 8089858:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808985a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808985c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808985e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8089860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8089862:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8089866:	6823      	ldr	r3, [r4, #0]
 8089868:	602b      	str	r3, [r5, #0]
    }
}
 808986a:	b00c      	add	sp, #48	; 0x30
 808986c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8089870:	20000d10 	.word	0x20000d10
 8089874:	20000d08 	.word	0x20000d08
 8089878:	20000ce4 	.word	0x20000ce4
 808987c:	20000d18 	.word	0x20000d18

08089880 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 8089880:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 8089882:	2000      	movs	r0, #0
 8089884:	f7ff f878 	bl	8088978 <spark_sync_time_pending>
 8089888:	b128      	cbz	r0, 8089896 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808988a:	f7ff f865 	bl	8088958 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 808988e:	f080 0001 	eor.w	r0, r0, #1
 8089892:	b2c0      	uxtb	r0, r0
    }
 8089894:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8089896:	2001      	movs	r0, #1
 8089898:	e7fc      	b.n	8089894 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

0808989c <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 808989c:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808989e:	f7ff ffb9 	bl	8089814 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80898a2:	4b02      	ldr	r3, [pc, #8]	; (80898ac <_ZN9TimeClass5monthEx+0x10>)
 80898a4:	6918      	ldr	r0, [r3, #16]
}
 80898a6:	3001      	adds	r0, #1
 80898a8:	bd08      	pop	{r3, pc}
 80898aa:	bf00      	nop
 80898ac:	20000ce4 	.word	0x20000ce4

080898b0 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80898b0:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80898b2:	490a      	ldr	r1, [pc, #40]	; (80898dc <_ZN9TimeClass4zoneEf+0x2c>)
{
 80898b4:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80898b6:	f002 f9c9 	bl	808bc4c <__aeabi_fcmplt>
 80898ba:	b968      	cbnz	r0, 80898d8 <_ZN9TimeClass4zoneEf+0x28>
 80898bc:	4620      	mov	r0, r4
 80898be:	4908      	ldr	r1, [pc, #32]	; (80898e0 <_ZN9TimeClass4zoneEf+0x30>)
 80898c0:	f002 f9e2 	bl	808bc88 <__aeabi_fcmpgt>
 80898c4:	b940      	cbnz	r0, 80898d8 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80898c6:	4907      	ldr	r1, [pc, #28]	; (80898e4 <_ZN9TimeClass4zoneEf+0x34>)
 80898c8:	4620      	mov	r0, r4
 80898ca:	f002 f821 	bl	808b910 <__aeabi_fmul>
 80898ce:	f002 fa73 	bl	808bdb8 <__aeabi_f2lz>
 80898d2:	4b05      	ldr	r3, [pc, #20]	; (80898e8 <_ZN9TimeClass4zoneEf+0x38>)
 80898d4:	e9c3 0100 	strd	r0, r1, [r3]
}
 80898d8:	bd10      	pop	{r4, pc}
 80898da:	bf00      	nop
 80898dc:	c1400000 	.word	0xc1400000
 80898e0:	41600000 	.word	0x41600000
 80898e4:	45610000 	.word	0x45610000
 80898e8:	20000d10 	.word	0x20000d10

080898ec <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 80898ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80898ee:	4602      	mov	r2, r0
 80898f0:	460b      	mov	r3, r1
    struct timeval tv = {
 80898f2:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 80898f4:	4668      	mov	r0, sp
    };
 80898f6:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 80898fa:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 80898fe:	f7fe fde7 	bl	80884d0 <hal_rtc_set_time>
 8089902:	4602      	mov	r2, r0
 8089904:	b910      	cbnz	r0, 808990c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 8089906:	4601      	mov	r1, r0
 8089908:	f7fe ff9a 	bl	8088840 <system_notify_time_changed>
    }
}
 808990c:	b005      	add	sp, #20
 808990e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08089914 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8089914:	b530      	push	{r4, r5, lr}
 8089916:	4604      	mov	r4, r0
    t += time_zone_cache;
 8089918:	4818      	ldr	r0, [pc, #96]	; (808997c <_ZN9TimeClass7timeStrEx+0x68>)
{
 808991a:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 808991c:	e9d0 1000 	ldrd	r1, r0, [r0]
 8089920:	1852      	adds	r2, r2, r1
 8089922:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 8089926:	4816      	ldr	r0, [pc, #88]	; (8089980 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8089928:	2500      	movs	r5, #0
    t += dst_current_cache;
 808992a:	e9d0 1000 	ldrd	r1, r0, [r0]
 808992e:	1852      	adds	r2, r2, r1
 8089930:	eb40 0303 	adc.w	r3, r0, r3
 8089934:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8089938:	2224      	movs	r2, #36	; 0x24
 808993a:	2100      	movs	r1, #0
 808993c:	eb0d 0002 	add.w	r0, sp, r2
 8089940:	f002 fafa 	bl	808bf38 <memset>
    localtime_r(&t, &calendar_time);
 8089944:	a909      	add	r1, sp, #36	; 0x24
 8089946:	4668      	mov	r0, sp
 8089948:	f7f6 fb72 	bl	8080030 <localtime_r>
    char ascstr[26] = {};
 808994c:	2216      	movs	r2, #22
 808994e:	4629      	mov	r1, r5
 8089950:	a803      	add	r0, sp, #12
 8089952:	9502      	str	r5, [sp, #8]
 8089954:	f002 faf0 	bl	808bf38 <memset>
    asctime_r(&calendar_time, ascstr);
 8089958:	a902      	add	r1, sp, #8
 808995a:	a809      	add	r0, sp, #36	; 0x24
 808995c:	f002 fa80 	bl	808be60 <asctime_r>
    int len = strlen(ascstr);
 8089960:	a802      	add	r0, sp, #8
 8089962:	f002 fb50 	bl	808c006 <strlen>
    ascstr[len-1] = 0; // remove final newline
 8089966:	ab12      	add	r3, sp, #72	; 0x48
 8089968:	4418      	add	r0, r3
 808996a:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 808996e:	a902      	add	r1, sp, #8
 8089970:	4620      	mov	r0, r4
 8089972:	f7ff fbe7 	bl	8089144 <_ZN6StringC1EPKc>
}
 8089976:	4620      	mov	r0, r4
 8089978:	b013      	add	sp, #76	; 0x4c
 808997a:	bd30      	pop	{r4, r5, pc}
 808997c:	20000d10 	.word	0x20000d10
 8089980:	20000d08 	.word	0x20000d08

08089984 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8089984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089988:	b0a5      	sub	sp, #148	; 0x94
 808998a:	4607      	mov	r7, r0
 808998c:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808998e:	a814      	add	r0, sp, #80	; 0x50
{
 8089990:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8089992:	223f      	movs	r2, #63	; 0x3f
{
 8089994:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8089996:	f002 fb50 	bl	808c03a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 808999a:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808999c:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 808999e:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80899a2:	f002 fb30 	bl	808c006 <strlen>
 80899a6:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80899a8:	bb5d      	cbnz	r5, 8089a02 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 80899aa:	492a      	ldr	r1, [pc, #168]	; (8089a54 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80899ac:	a803      	add	r0, sp, #12
 80899ae:	f002 fb06 	bl	808bfbe <strcpy>
{
 80899b2:	2500      	movs	r5, #0
 80899b4:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80899b6:	f104 3bff 	add.w	fp, r4, #4294967295
 80899ba:	45ab      	cmp	fp, r5
 80899bc:	d936      	bls.n	8089a2c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80899be:	46b1      	mov	r9, r6
 80899c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80899c4:	f105 0a01 	add.w	sl, r5, #1
 80899c8:	2b25      	cmp	r3, #37	; 0x25
 80899ca:	d117      	bne.n	80899fc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 80899cc:	7873      	ldrb	r3, [r6, #1]
 80899ce:	2b7a      	cmp	r3, #122	; 0x7a
 80899d0:	d114      	bne.n	80899fc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 80899d2:	a803      	add	r0, sp, #12
 80899d4:	f002 fb17 	bl	808c006 <strlen>
 80899d8:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80899da:	ab14      	add	r3, sp, #80	; 0x50
 80899dc:	1828      	adds	r0, r5, r0
 80899de:	4418      	add	r0, r3
 80899e0:	ebab 0205 	sub.w	r2, fp, r5
 80899e4:	1cb1      	adds	r1, r6, #2
 80899e6:	f002 fa99 	bl	808bf1c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80899ea:	4622      	mov	r2, r4
 80899ec:	a903      	add	r1, sp, #12
 80899ee:	4630      	mov	r0, r6
 80899f0:	f002 fa94 	bl	808bf1c <memcpy>
            len = strlen(format_str);
 80899f4:	a814      	add	r0, sp, #80	; 0x50
 80899f6:	f002 fb06 	bl	808c006 <strlen>
 80899fa:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 80899fc:	464e      	mov	r6, r9
 80899fe:	4655      	mov	r5, sl
 8089a00:	e7d9      	b.n	80899b6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8089a02:	213c      	movs	r1, #60	; 0x3c
 8089a04:	fb95 f3f1 	sdiv	r3, r5, r1
 8089a08:	2b00      	cmp	r3, #0
 8089a0a:	bfb8      	it	lt
 8089a0c:	425b      	neglt	r3, r3
 8089a0e:	fbb3 f2f1 	udiv	r2, r3, r1
 8089a12:	fb01 3312 	mls	r3, r1, r2, r3
 8089a16:	9300      	str	r3, [sp, #0]
 8089a18:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8089a1c:	2110      	movs	r1, #16
 8089a1e:	fb95 f3f3 	sdiv	r3, r5, r3
 8089a22:	4a0d      	ldr	r2, [pc, #52]	; (8089a58 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 8089a24:	a803      	add	r0, sp, #12
 8089a26:	f7fe ffdf 	bl	80889e8 <snprintf>
 8089a2a:	e7c2      	b.n	80899b2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 8089a2c:	2100      	movs	r1, #0
 8089a2e:	222e      	movs	r2, #46	; 0x2e
 8089a30:	a808      	add	r0, sp, #32
 8089a32:	9107      	str	r1, [sp, #28]
 8089a34:	f002 fa80 	bl	808bf38 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 8089a38:	4643      	mov	r3, r8
 8089a3a:	aa14      	add	r2, sp, #80	; 0x50
 8089a3c:	2132      	movs	r1, #50	; 0x32
 8089a3e:	a807      	add	r0, sp, #28
 8089a40:	f7f6 fafe 	bl	8080040 <strftime>
    return String(buf);
 8089a44:	4638      	mov	r0, r7
 8089a46:	a907      	add	r1, sp, #28
 8089a48:	f7ff fb7c 	bl	8089144 <_ZN6StringC1EPKc>
}
 8089a4c:	4638      	mov	r0, r7
 8089a4e:	b025      	add	sp, #148	; 0x94
 8089a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089a54:	08090104 	.word	0x08090104
 8089a58:	08090106 	.word	0x08090106

08089a5c <_ZN9TimeClass6formatExPKc>:
{
 8089a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089a5e:	b08d      	sub	sp, #52	; 0x34
 8089a60:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8089a62:	4604      	mov	r4, r0
 8089a64:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 8089a68:	b915      	cbnz	r5, 8089a70 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 8089a6a:	4b19      	ldr	r3, [pc, #100]	; (8089ad0 <_ZN9TimeClass6formatExPKc+0x74>)
 8089a6c:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 8089a6e:	b12d      	cbz	r5, 8089a7c <_ZN9TimeClass6formatExPKc+0x20>
 8089a70:	4b18      	ldr	r3, [pc, #96]	; (8089ad4 <_ZN9TimeClass6formatExPKc+0x78>)
 8089a72:	4628      	mov	r0, r5
 8089a74:	6819      	ldr	r1, [r3, #0]
 8089a76:	f002 fa98 	bl	808bfaa <strcmp>
 8089a7a:	b938      	cbnz	r0, 8089a8c <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 8089a7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8089a80:	4620      	mov	r0, r4
 8089a82:	f7ff ff47 	bl	8089914 <_ZN9TimeClass7timeStrEx>
}
 8089a86:	4620      	mov	r0, r4
 8089a88:	b00d      	add	sp, #52	; 0x34
 8089a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 8089a8c:	9900      	ldr	r1, [sp, #0]
 8089a8e:	4e12      	ldr	r6, [pc, #72]	; (8089ad8 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 8089a90:	4f12      	ldr	r7, [pc, #72]	; (8089adc <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 8089a92:	e9d6 3200 	ldrd	r3, r2, [r6]
 8089a96:	185b      	adds	r3, r3, r1
 8089a98:	9901      	ldr	r1, [sp, #4]
 8089a9a:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 8089a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8089aa2:	181b      	adds	r3, r3, r0
 8089aa4:	eb41 0202 	adc.w	r2, r1, r2
 8089aa8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 8089aac:	2100      	movs	r1, #0
 8089aae:	2224      	movs	r2, #36	; 0x24
 8089ab0:	a803      	add	r0, sp, #12
 8089ab2:	f002 fa41 	bl	808bf38 <memset>
    localtime_r(&t, &calendar_time);
 8089ab6:	a903      	add	r1, sp, #12
 8089ab8:	4668      	mov	r0, sp
 8089aba:	f7f6 fab9 	bl	8080030 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8089abe:	6832      	ldr	r2, [r6, #0]
 8089ac0:	683b      	ldr	r3, [r7, #0]
 8089ac2:	4620      	mov	r0, r4
 8089ac4:	4413      	add	r3, r2
 8089ac6:	a903      	add	r1, sp, #12
 8089ac8:	462a      	mov	r2, r5
 8089aca:	f7ff ff5b 	bl	8089984 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 8089ace:	e7da      	b.n	8089a86 <_ZN9TimeClass6formatExPKc+0x2a>
 8089ad0:	20000ce0 	.word	0x20000ce0
 8089ad4:	200000d0 	.word	0x200000d0
 8089ad8:	20000d10 	.word	0x20000d10
 8089adc:	20000d08 	.word	0x20000d08

08089ae0 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 8089ae0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8089ae2:	2000      	movs	r0, #0
 8089ae4:	f7fe fce4 	bl	80884b0 <hal_rtc_time_is_valid>
    if (rtcstate)
 8089ae8:	4604      	mov	r4, r0
 8089aea:	b9a0      	cbnz	r0, 8089b16 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8089aec:	f7fe fe68 	bl	80887c0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8089af0:	2801      	cmp	r0, #1
 8089af2:	d110      	bne.n	8089b16 <_ZN9TimeClass7isValidEv+0x36>
 8089af4:	4620      	mov	r0, r4
 8089af6:	f7fe fe9b 	bl	8088830 <system_thread_get_state>
 8089afa:	b960      	cbnz	r0, 8089b16 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8089afc:	f7ff fec0 	bl	8089880 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8089b00:	b910      	cbnz	r0, 8089b08 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8089b02:	f7fe ff19 	bl	8088938 <spark_process>
        while (_while() && !_condition()) {
 8089b06:	e7f9      	b.n	8089afc <_ZN9TimeClass7isValidEv+0x1c>
 8089b08:	f7ff feba 	bl	8089880 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8089b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8089b10:	2000      	movs	r0, #0
 8089b12:	f7fe bccd 	b.w	80884b0 <hal_rtc_time_is_valid>
}
 8089b16:	4620      	mov	r0, r4
 8089b18:	bd10      	pop	{r4, pc}

08089b1a <_ZN9TimeClass3nowEv>:
{
 8089b1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8089b1c:	f7ff ffe0 	bl	8089ae0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8089b20:	2210      	movs	r2, #16
 8089b22:	2100      	movs	r1, #0
 8089b24:	4668      	mov	r0, sp
 8089b26:	f002 fa07 	bl	808bf38 <memset>
    hal_rtc_get_time(&tv, nullptr);
 8089b2a:	2100      	movs	r1, #0
 8089b2c:	4668      	mov	r0, sp
 8089b2e:	f7fe fcc7 	bl	80884c0 <hal_rtc_get_time>
}
 8089b32:	9800      	ldr	r0, [sp, #0]
 8089b34:	b005      	add	sp, #20
 8089b36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08089b3c <_ZN9TimeClass4hourEv>:
{
 8089b3c:	b508      	push	{r3, lr}
	return hour(now());
 8089b3e:	f7ff ffec 	bl	8089b1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8089b42:	17c1      	asrs	r1, r0, #31
 8089b44:	f7ff fe66 	bl	8089814 <_ZL22Refresh_UnixTime_Cachex>
}
 8089b48:	4b01      	ldr	r3, [pc, #4]	; (8089b50 <_ZN9TimeClass4hourEv+0x14>)
 8089b4a:	6898      	ldr	r0, [r3, #8]
 8089b4c:	bd08      	pop	{r3, pc}
 8089b4e:	bf00      	nop
 8089b50:	20000ce4 	.word	0x20000ce4

08089b54 <_ZN9TimeClass6minuteEv>:
{
 8089b54:	b508      	push	{r3, lr}
	return minute(now());
 8089b56:	f7ff ffe0 	bl	8089b1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8089b5a:	17c1      	asrs	r1, r0, #31
 8089b5c:	f7ff fe5a 	bl	8089814 <_ZL22Refresh_UnixTime_Cachex>
}
 8089b60:	4b01      	ldr	r3, [pc, #4]	; (8089b68 <_ZN9TimeClass6minuteEv+0x14>)
 8089b62:	6858      	ldr	r0, [r3, #4]
 8089b64:	bd08      	pop	{r3, pc}
 8089b66:	bf00      	nop
 8089b68:	20000ce4 	.word	0x20000ce4

08089b6c <_ZN9TimeClass6secondEv>:
{
 8089b6c:	b508      	push	{r3, lr}
	return second(now());
 8089b6e:	f7ff ffd4 	bl	8089b1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8089b72:	17c1      	asrs	r1, r0, #31
 8089b74:	f7ff fe4e 	bl	8089814 <_ZL22Refresh_UnixTime_Cachex>
}
 8089b78:	4b01      	ldr	r3, [pc, #4]	; (8089b80 <_ZN9TimeClass6secondEv+0x14>)
 8089b7a:	6818      	ldr	r0, [r3, #0]
 8089b7c:	bd08      	pop	{r3, pc}
 8089b7e:	bf00      	nop
 8089b80:	20000ce4 	.word	0x20000ce4

08089b84 <_ZN9TimeClass3dayEv>:
{
 8089b84:	b508      	push	{r3, lr}
	return day(now());
 8089b86:	f7ff ffc8 	bl	8089b1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8089b8a:	17c1      	asrs	r1, r0, #31
 8089b8c:	f7ff fe42 	bl	8089814 <_ZL22Refresh_UnixTime_Cachex>
}
 8089b90:	4b01      	ldr	r3, [pc, #4]	; (8089b98 <_ZN9TimeClass3dayEv+0x14>)
 8089b92:	68d8      	ldr	r0, [r3, #12]
 8089b94:	bd08      	pop	{r3, pc}
 8089b96:	bf00      	nop
 8089b98:	20000ce4 	.word	0x20000ce4

08089b9c <_ZN9TimeClass5monthEv>:
{
 8089b9c:	b508      	push	{r3, lr}
	return month(now());
 8089b9e:	f7ff ffbc 	bl	8089b1a <_ZN9TimeClass3nowEv>
}
 8089ba2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 8089ba6:	17c1      	asrs	r1, r0, #31
 8089ba8:	f7ff be78 	b.w	808989c <_ZN9TimeClass5monthEx>

08089bac <_ZN9TimeClass4yearEv>:
{
 8089bac:	b508      	push	{r3, lr}
	return year(now());
 8089bae:	f7ff ffb4 	bl	8089b1a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8089bb2:	17c1      	asrs	r1, r0, #31
 8089bb4:	f7ff fe2e 	bl	8089814 <_ZL22Refresh_UnixTime_Cachex>
}
 8089bb8:	4b01      	ldr	r3, [pc, #4]	; (8089bc0 <_ZN9TimeClass4yearEv+0x14>)
 8089bba:	6958      	ldr	r0, [r3, #20]
 8089bbc:	bd08      	pop	{r3, pc}
 8089bbe:	bf00      	nop
 8089bc0:	20000ce4 	.word	0x20000ce4

08089bc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8089bc4:	4b02      	ldr	r3, [pc, #8]	; (8089bd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8089bc6:	681a      	ldr	r2, [r3, #0]
 8089bc8:	4b02      	ldr	r3, [pc, #8]	; (8089bd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8089bca:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8089bcc:	4770      	bx	lr
 8089bce:	bf00      	nop
 8089bd0:	200000d0 	.word	0x200000d0
 8089bd4:	20000ce0 	.word	0x20000ce0

08089bd8 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    hal_adc_set_sample_time(ADC_SampleTime);
 8089bd8:	f7fe bc2a 	b.w	8088430 <hal_adc_set_sample_time>

08089bdc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8089bdc:	2100      	movs	r1, #0
 8089bde:	f7fe bdff 	b.w	80887e0 <system_delay_ms>

08089be2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8089be2:	b510      	push	{r4, lr}
 8089be4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089be6:	f7fe f9d3 	bl	8087f90 <_ZNSt14_Function_baseD1Ev>
 8089bea:	4620      	mov	r0, r4
 8089bec:	bd10      	pop	{r4, pc}

08089bee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8089bee:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089bf0:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8089bf2:	460b      	mov	r3, r1
 8089bf4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089bf6:	c803      	ldmia	r0, {r0, r1}
 8089bf8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8089bfc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8089c00:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8089c04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8089c08:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8089c0c:	b002      	add	sp, #8
 8089c0e:	bd10      	pop	{r4, pc}

08089c10 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8089c10:	2300      	movs	r3, #0
 8089c12:	4803      	ldr	r0, [pc, #12]	; (8089c20 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8089c14:	4a03      	ldr	r2, [pc, #12]	; (8089c24 <_GLOBAL__sub_I_RGB+0x14>)
 8089c16:	4904      	ldr	r1, [pc, #16]	; (8089c28 <_GLOBAL__sub_I_RGB+0x18>)
 8089c18:	6083      	str	r3, [r0, #8]
 8089c1a:	f001 b855 	b.w	808acc8 <__aeabi_atexit>
 8089c1e:	bf00      	nop
 8089c20:	20000d20 	.word	0x20000d20
 8089c24:	200002b0 	.word	0x200002b0
 8089c28:	08089be3 	.word	0x08089be3

08089c2c <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8089c2c:	6800      	ldr	r0, [r0, #0]
 8089c2e:	f000 bead 	b.w	808a98c <_ZN7TwoWire4lockEv>

08089c32 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8089c32:	b510      	push	{r4, lr}
 8089c34:	4604      	mov	r4, r0
      lock_(_lock) {
 8089c36:	6001      	str	r1, [r0, #0]
 8089c38:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 8089c3a:	b10a      	cbz	r2, 8089c40 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8089c3c:	f7ff fff6 	bl	8089c2c <_ZN9FuelGauge4lockEv>
}
 8089c40:	4620      	mov	r0, r4
 8089c42:	bd10      	pop	{r4, pc}

08089c44 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 8089c44:	b538      	push	{r3, r4, r5, lr}
 8089c46:	4604      	mov	r4, r0
 8089c48:	460d      	mov	r5, r1
            return &Wire3;
 8089c4a:	f001 f815 	bl	808ac78 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 8089c4e:	462a      	mov	r2, r5
            return &Wire3;
 8089c50:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 8089c52:	4620      	mov	r0, r4
 8089c54:	f7ff ffed 	bl	8089c32 <_ZN9FuelGaugeC1ER7TwoWireb>
}
 8089c58:	4620      	mov	r0, r4
 8089c5a:	bd38      	pop	{r3, r4, r5, pc}

08089c5c <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 8089c5c:	6800      	ldr	r0, [r0, #0]
 8089c5e:	f000 be9e 	b.w	808a99e <_ZN7TwoWire6unlockEv>

08089c62 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 8089c62:	b510      	push	{r4, lr}
    if (lock_) {
 8089c64:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 8089c66:	4604      	mov	r4, r0
    if (lock_) {
 8089c68:	b10b      	cbz	r3, 8089c6e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8089c6a:	f7ff fff7 	bl	8089c5c <_ZN9FuelGauge6unlockEv>
}
 8089c6e:	4620      	mov	r0, r4
 8089c70:	bd10      	pop	{r4, pc}

08089c72 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8089c72:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8089c76:	4604      	mov	r4, r0
 8089c78:	460d      	mov	r5, r1
 8089c7a:	4617      	mov	r7, r2
 8089c7c:	461e      	mov	r6, r3
 8089c7e:	f7ff ffd5 	bl	8089c2c <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8089c82:	2336      	movs	r3, #54	; 0x36
 8089c84:	f88d 3000 	strb.w	r3, [sp]
 8089c88:	2300      	movs	r3, #0
 8089c8a:	f04f 0801 	mov.w	r8, #1
 8089c8e:	9301      	str	r3, [sp, #4]
    timeout_ = ms;
 8089c90:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 8089c92:	4669      	mov	r1, sp
 8089c94:	6820      	ldr	r0, [r4, #0]
 8089c96:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8089c98:	f88d 8008 	strb.w	r8, [sp, #8]
 8089c9c:	f000 fe53 	bl	808a946 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 8089ca0:	6820      	ldr	r0, [r4, #0]
 8089ca2:	4629      	mov	r1, r5
 8089ca4:	6803      	ldr	r3, [r0, #0]
 8089ca6:	689b      	ldr	r3, [r3, #8]
 8089ca8:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 8089caa:	4641      	mov	r1, r8
 8089cac:	6820      	ldr	r0, [r4, #0]
 8089cae:	f000 fe62 	bl	808a976 <_ZN7TwoWire15endTransmissionEh>
 8089cb2:	4605      	mov	r5, r0
 8089cb4:	b140      	cbz	r0, 8089cc8 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 8089cb6:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 8089cba:	4620      	mov	r0, r4
 8089cbc:	f7ff ffce 	bl	8089c5c <_ZN9FuelGauge6unlockEv>
}
 8089cc0:	4628      	mov	r0, r5
 8089cc2:	b004      	add	sp, #16
 8089cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 8089cc8:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 8089cca:	4669      	mov	r1, sp
 8089ccc:	6820      	ldr	r0, [r4, #0]
 8089cce:	9301      	str	r3, [sp, #4]
 8089cd0:	f000 fe06 	bl	808a8e0 <_ZN7TwoWire11requestFromERK16WireTransmission>
 8089cd4:	2802      	cmp	r0, #2
 8089cd6:	d1ee      	bne.n	8089cb6 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 8089cd8:	6820      	ldr	r0, [r4, #0]
 8089cda:	6803      	ldr	r3, [r0, #0]
 8089cdc:	695b      	ldr	r3, [r3, #20]
 8089cde:	4798      	blx	r3
 8089ce0:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 8089ce2:	6820      	ldr	r0, [r4, #0]
 8089ce4:	6803      	ldr	r3, [r0, #0]
 8089ce6:	695b      	ldr	r3, [r3, #20]
 8089ce8:	4798      	blx	r3
 8089cea:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 8089cec:	e7e5      	b.n	8089cba <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

08089cf0 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 8089cf0:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 8089cf2:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8089cf4:	2104      	movs	r1, #4
    byte MSB = 0;
 8089cf6:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8089cfa:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8089cfe:	f10d 0206 	add.w	r2, sp, #6
 8089d02:	f10d 0307 	add.w	r3, sp, #7
 8089d06:	f7ff ffb4 	bl	8089c72 <_ZN9FuelGauge12readRegisterEhRhS0_>
 8089d0a:	b9a0      	cbnz	r0, 8089d36 <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 8089d0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8089d10:	f001 f93e 	bl	808af90 <__aeabi_i2d>
 8089d14:	2200      	movs	r2, #0
 8089d16:	4b09      	ldr	r3, [pc, #36]	; (8089d3c <_ZN9FuelGauge6getSoCEv+0x4c>)
 8089d18:	f001 f9a4 	bl	808b064 <__aeabi_dmul>
 8089d1c:	f001 fc9a 	bl	808b654 <__aeabi_d2f>
 8089d20:	4604      	mov	r4, r0
        return MSB + decimal;
 8089d22:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8089d26:	f001 fd9f 	bl	808b868 <__aeabi_i2f>
 8089d2a:	4601      	mov	r1, r0
 8089d2c:	4620      	mov	r0, r4
 8089d2e:	f001 fce7 	bl	808b700 <__addsf3>
}
 8089d32:	b002      	add	sp, #8
 8089d34:	bd10      	pop	{r4, pc}
        return -1.0f;
 8089d36:	4802      	ldr	r0, [pc, #8]	; (8089d40 <_ZN9FuelGauge6getSoCEv+0x50>)
 8089d38:	e7fb      	b.n	8089d32 <_ZN9FuelGauge6getSoCEv+0x42>
 8089d3a:	bf00      	nop
 8089d3c:	3f700000 	.word	0x3f700000
 8089d40:	bf800000 	.word	0xbf800000

08089d44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8089d44:	4b01      	ldr	r3, [pc, #4]	; (8089d4c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8089d46:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8089d48:	4770      	bx	lr
 8089d4a:	bf00      	nop
 8089d4c:	200000d8 	.word	0x200000d8

08089d50 <serialEventRun>:
{
 8089d50:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8089d52:	4b17      	ldr	r3, [pc, #92]	; (8089db0 <serialEventRun+0x60>)
 8089d54:	b143      	cbz	r3, 8089d68 <serialEventRun+0x18>
 8089d56:	f000 fc25 	bl	808a5a4 <_Z16_fetch_usbserialv>
 8089d5a:	6803      	ldr	r3, [r0, #0]
 8089d5c:	691b      	ldr	r3, [r3, #16]
 8089d5e:	4798      	blx	r3
 8089d60:	2800      	cmp	r0, #0
 8089d62:	dd01      	ble.n	8089d68 <serialEventRun+0x18>
        serialEvent();
 8089d64:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8089d68:	4b12      	ldr	r3, [pc, #72]	; (8089db4 <serialEventRun+0x64>)
 8089d6a:	b143      	cbz	r3, 8089d7e <serialEventRun+0x2e>
 8089d6c:	f000 fd38 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 8089d70:	6803      	ldr	r3, [r0, #0]
 8089d72:	691b      	ldr	r3, [r3, #16]
 8089d74:	4798      	blx	r3
 8089d76:	2800      	cmp	r0, #0
 8089d78:	dd01      	ble.n	8089d7e <serialEventRun+0x2e>
        serialEvent1();
 8089d7a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8089d7e:	4b0e      	ldr	r3, [pc, #56]	; (8089db8 <serialEventRun+0x68>)
 8089d80:	b10b      	cbz	r3, 8089d86 <serialEventRun+0x36>
 8089d82:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8089d86:	4b0d      	ldr	r3, [pc, #52]	; (8089dbc <serialEventRun+0x6c>)
 8089d88:	b10b      	cbz	r3, 8089d8e <serialEventRun+0x3e>
 8089d8a:	f7f6 fed1 	bl	8080b30 <_Z15serialEventRun4v>
    if (serialEventRun5) serialEventRun5();
 8089d8e:	4b0c      	ldr	r3, [pc, #48]	; (8089dc0 <serialEventRun+0x70>)
 8089d90:	b10b      	cbz	r3, 8089d96 <serialEventRun+0x46>
 8089d92:	f7f6 ff09 	bl	8080ba8 <_Z15serialEventRun5v>
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8089d96:	4b0b      	ldr	r3, [pc, #44]	; (8089dc4 <serialEventRun+0x74>)
 8089d98:	b143      	cbz	r3, 8089dac <serialEventRun+0x5c>
 8089d9a:	f000 fc41 	bl	808a620 <_Z17_fetch_usbserial1v>
 8089d9e:	6803      	ldr	r3, [r0, #0]
 8089da0:	691b      	ldr	r3, [r3, #16]
 8089da2:	4798      	blx	r3
 8089da4:	2800      	cmp	r0, #0
 8089da6:	dd01      	ble.n	8089dac <serialEventRun+0x5c>
        usbSerialEvent1();
 8089da8:	f3af 8000 	nop.w
}
 8089dac:	bd08      	pop	{r3, pc}
 8089dae:	bf00      	nop
	...
 8089dbc:	08080b31 	.word	0x08080b31
 8089dc0:	08080ba9 	.word	0x08080ba9
 8089dc4:	00000000 	.word	0x00000000

08089dc8 <_post_loop>:
{
 8089dc8:	b508      	push	{r3, lr}
	serialEventRun();
 8089dca:	f7ff ffc1 	bl	8089d50 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8089dce:	f7fe fb4f 	bl	8088470 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8089dd2:	4b01      	ldr	r3, [pc, #4]	; (8089dd8 <_post_loop+0x10>)
 8089dd4:	6018      	str	r0, [r3, #0]
}
 8089dd6:	bd08      	pop	{r3, pc}
 8089dd8:	200011c4 	.word	0x200011c4

08089ddc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8089ddc:	4802      	ldr	r0, [pc, #8]	; (8089de8 <_Z33system_initialize_user_backup_ramv+0xc>)
 8089dde:	4a03      	ldr	r2, [pc, #12]	; (8089dec <_Z33system_initialize_user_backup_ramv+0x10>)
 8089de0:	4903      	ldr	r1, [pc, #12]	; (8089df0 <_Z33system_initialize_user_backup_ramv+0x14>)
 8089de2:	1a12      	subs	r2, r2, r0
 8089de4:	f002 b89a 	b.w	808bf1c <memcpy>
 8089de8:	40024000 	.word	0x40024000
 8089dec:	40024004 	.word	0x40024004
 8089df0:	08090540 	.word	0x08090540

08089df4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8089df4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8089df6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8089df8:	461a      	mov	r2, r3
 8089dfa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8089dfe:	9300      	str	r3, [sp, #0]
 8089e00:	f7fe fd30 	bl	8088864 <system_ctrl_set_result>
}
 8089e04:	b003      	add	sp, #12
 8089e06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08089e0c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8089e0c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8089e0e:	8843      	ldrh	r3, [r0, #2]
 8089e10:	2b0a      	cmp	r3, #10
 8089e12:	d008      	beq.n	8089e26 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8089e14:	2b50      	cmp	r3, #80	; 0x50
 8089e16:	d10b      	bne.n	8089e30 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8089e18:	4b09      	ldr	r3, [pc, #36]	; (8089e40 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8089e1a:	681b      	ldr	r3, [r3, #0]
 8089e1c:	b14b      	cbz	r3, 8089e32 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8089e1e:	b003      	add	sp, #12
 8089e20:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8089e24:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8089e26:	f7ff ffe5 	bl	8089df4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8089e2a:	b003      	add	sp, #12
 8089e2c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8089e30:	2300      	movs	r3, #0
 8089e32:	461a      	mov	r2, r3
 8089e34:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8089e38:	9300      	str	r3, [sp, #0]
 8089e3a:	f7fe fd13 	bl	8088864 <system_ctrl_set_result>
}
 8089e3e:	e7f4      	b.n	8089e2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8089e40:	20000d34 	.word	0x20000d34

08089e44 <module_user_init_hook>:
{
 8089e44:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8089e46:	4c12      	ldr	r4, [pc, #72]	; (8089e90 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8089e48:	2100      	movs	r1, #0
 8089e4a:	4812      	ldr	r0, [pc, #72]	; (8089e94 <module_user_init_hook+0x50>)
 8089e4c:	f7fe fdec 	bl	8088a28 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8089e50:	4d11      	ldr	r5, [pc, #68]	; (8089e98 <module_user_init_hook+0x54>)
 8089e52:	6823      	ldr	r3, [r4, #0]
 8089e54:	42ab      	cmp	r3, r5
 8089e56:	bf0c      	ite	eq
 8089e58:	2201      	moveq	r2, #1
 8089e5a:	2200      	movne	r2, #0
 8089e5c:	4b0f      	ldr	r3, [pc, #60]	; (8089e9c <module_user_init_hook+0x58>)
 8089e5e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8089e60:	d002      	beq.n	8089e68 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8089e62:	f7ff ffbb 	bl	8089ddc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8089e66:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8089e68:	f7fe faf2 	bl	8088450 <HAL_RNG_GetRandomNumber>
 8089e6c:	4604      	mov	r4, r0
    srand(seed);
 8089e6e:	f002 f86b 	bl	808bf48 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8089e72:	4b0b      	ldr	r3, [pc, #44]	; (8089ea0 <module_user_init_hook+0x5c>)
 8089e74:	b113      	cbz	r3, 8089e7c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8089e76:	4620      	mov	r0, r4
 8089e78:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8089e7c:	2100      	movs	r1, #0
 8089e7e:	4808      	ldr	r0, [pc, #32]	; (8089ea0 <module_user_init_hook+0x5c>)
 8089e80:	f7fe fd82 	bl	8088988 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8089e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8089e88:	2100      	movs	r1, #0
 8089e8a:	4806      	ldr	r0, [pc, #24]	; (8089ea4 <module_user_init_hook+0x60>)
 8089e8c:	f7fe bce0 	b.w	8088850 <system_ctrl_set_app_request_handler>
 8089e90:	40024000 	.word	0x40024000
 8089e94:	08089d45 	.word	0x08089d45
 8089e98:	9a271c1e 	.word	0x9a271c1e
 8089e9c:	20000d30 	.word	0x20000d30
 8089ea0:	00000000 	.word	0x00000000
 8089ea4:	08089e0d 	.word	0x08089e0d

08089ea8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8089ea8:	4770      	bx	lr

08089eaa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8089eaa:	2000      	movs	r0, #0
 8089eac:	4770      	bx	lr

08089eae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8089eae:	b510      	push	{r4, lr}
 8089eb0:	4604      	mov	r4, r0
 8089eb2:	2110      	movs	r1, #16
 8089eb4:	f000 ff0d 	bl	808acd2 <_ZdlPvj>
 8089eb8:	4620      	mov	r0, r4
 8089eba:	bd10      	pop	{r4, pc}

08089ebc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8089ebc:	b508      	push	{r3, lr}
      { delete this; }
 8089ebe:	f7ff fff6 	bl	8089eae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8089ec2:	bd08      	pop	{r3, pc}

08089ec4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8089ec4:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8089ec6:	b530      	push	{r4, r5, lr}
        type_(type) {
 8089ec8:	f64f 749c 	movw	r4, #65436	; 0xff9c
 8089ecc:	6002      	str	r2, [r0, #0]
 8089ece:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8089ed0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8089ed2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8089ed4:	680c      	ldr	r4, [r1, #0]
 8089ed6:	8085      	strh	r5, [r0, #4]
 8089ed8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8089eda:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8089edc:	bd30      	pop	{r4, r5, pc}

08089ede <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8089ede:	b510      	push	{r4, lr}
 8089ee0:	4604      	mov	r4, r0
    free((void*)msg_);
 8089ee2:	6800      	ldr	r0, [r0, #0]
 8089ee4:	f7fe fd60 	bl	80889a8 <free>
}
 8089ee8:	4620      	mov	r0, r4
 8089eea:	bd10      	pop	{r4, pc}

08089eec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8089eec:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8089eee:	68c4      	ldr	r4, [r0, #12]
 8089ef0:	b1f4      	cbz	r4, 8089f30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8089ef2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8089ef4:	2b02      	cmp	r3, #2
 8089ef6:	d103      	bne.n	8089f00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8089ef8:	f104 000c 	add.w	r0, r4, #12
 8089efc:	f7ff ffef 	bl	8089ede <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8089f00:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8089f02:	b135      	cbz	r5, 8089f12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 8089f04:	4628      	mov	r0, r5
 8089f06:	f7fe f843 	bl	8087f90 <_ZNSt14_Function_baseD1Ev>
 8089f0a:	2110      	movs	r1, #16
 8089f0c:	4628      	mov	r0, r5
 8089f0e:	f000 fee0 	bl	808acd2 <_ZdlPvj>
 8089f12:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8089f14:	b135      	cbz	r5, 8089f24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8089f16:	4628      	mov	r0, r5
 8089f18:	f7fe f83a 	bl	8087f90 <_ZNSt14_Function_baseD1Ev>
 8089f1c:	2110      	movs	r1, #16
 8089f1e:	4628      	mov	r0, r5
 8089f20:	f000 fed7 	bl	808acd2 <_ZdlPvj>
 8089f24:	4620      	mov	r0, r4
 8089f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8089f2a:	2114      	movs	r1, #20
 8089f2c:	f000 bed1 	b.w	808acd2 <_ZdlPvj>
 8089f30:	bd38      	pop	{r3, r4, r5, pc}

08089f32 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8089f32:	b510      	push	{r4, lr}
 8089f34:	b088      	sub	sp, #32
 8089f36:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8089f38:	4668      	mov	r0, sp
 8089f3a:	f7ff f903 	bl	8089144 <_ZN6StringC1EPKc>
    return (*fn)(p);
 8089f3e:	4669      	mov	r1, sp
 8089f40:	a804      	add	r0, sp, #16
 8089f42:	f7ff f93e 	bl	80891c2 <_ZN6StringC1ERKS_>
 8089f46:	a804      	add	r0, sp, #16
 8089f48:	47a0      	blx	r4
 8089f4a:	4604      	mov	r4, r0
 8089f4c:	a804      	add	r0, sp, #16
 8089f4e:	f7ff f8af 	bl	80890b0 <_ZN6StringD1Ev>
    String p(param);
 8089f52:	4668      	mov	r0, sp
 8089f54:	f7ff f8ac 	bl	80890b0 <_ZN6StringD1Ev>
}
 8089f58:	4620      	mov	r0, r4
 8089f5a:	b008      	add	sp, #32
 8089f5c:	bd10      	pop	{r4, pc}

08089f5e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8089f5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8089f60:	2300      	movs	r3, #0
         size = sizeof(*this);
 8089f62:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8089f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8089f68:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8089f6a:	4669      	mov	r1, sp
 8089f6c:	461a      	mov	r2, r3
 8089f6e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8089f70:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8089f74:	f8ad 4000 	strh.w	r4, [sp]
 8089f78:	f7fe fcd6 	bl	8088928 <spark_function>
}
 8089f7c:	b004      	add	sp, #16
 8089f7e:	bd10      	pop	{r4, pc}

08089f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8089f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8089f82:	460e      	mov	r6, r1
 8089f84:	4604      	mov	r4, r0
 8089f86:	f856 3b04 	ldr.w	r3, [r6], #4
 8089f8a:	460d      	mov	r5, r1
 8089f8c:	a801      	add	r0, sp, #4
 8089f8e:	4631      	mov	r1, r6
 8089f90:	9300      	str	r3, [sp, #0]
 8089f92:	f7ff fc2f 	bl	80897f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8089f96:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8089f98:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8089f9a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8089f9c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8089f9e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8089fa0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8089fa2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8089fa4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8089fa6:	f7f9 fafb 	bl	80835a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8089faa:	4630      	mov	r0, r6
 8089fac:	f7f9 faf8 	bl	80835a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8089fb0:	4628      	mov	r0, r5
 8089fb2:	2108      	movs	r1, #8
 8089fb4:	f000 fe8d 	bl	808acd2 <_ZdlPvj>
        return p;
    }
 8089fb8:	4620      	mov	r0, r4
 8089fba:	b002      	add	sp, #8
 8089fbc:	bd70      	pop	{r4, r5, r6, pc}

08089fbe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089fbe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8089fc0:	b510      	push	{r4, lr}
      if (_M_empty())
 8089fc2:	b90a      	cbnz	r2, 8089fc8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8089fc4:	f000 fe89 	bl	808acda <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089fc8:	68c3      	ldr	r3, [r0, #12]
    }
 8089fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089fce:	4718      	bx	r3

08089fd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8089fd0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8089fd2:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8089fd4:	f100 0110 	add.w	r1, r0, #16
 8089fd8:	f7ff fff1 	bl	8089fbe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8089fdc:	bd08      	pop	{r3, pc}

08089fde <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8089fde:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8089fe0:	b510      	push	{r4, lr}
      if (_M_empty())
 8089fe2:	b90a      	cbnz	r2, 8089fe8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8089fe4:	f000 fe79 	bl	808acda <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089fe8:	68c3      	ldr	r3, [r0, #12]
    }
 8089fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089fee:	4718      	bx	r3

08089ff0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8089ff0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8089ff2:	6800      	ldr	r0, [r0, #0]
 8089ff4:	f100 0110 	add.w	r1, r0, #16
 8089ff8:	f7ff fff1 	bl	8089fde <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8089ffc:	bd08      	pop	{r3, pc}
	...

0808a000 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 808a000:	b538      	push	{r3, r4, r5, lr}
 808a002:	2300      	movs	r3, #0
 808a004:	4604      	mov	r4, r0
 808a006:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808a008:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 808a00a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808a00c:	f7f6 f85d 	bl	80800ca <_Znwj>
 808a010:	b128      	cbz	r0, 808a01e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 808a012:	2301      	movs	r3, #1
 808a014:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 808a018:	4b02      	ldr	r3, [pc, #8]	; (808a024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 808a01a:	60c5      	str	r5, [r0, #12]
 808a01c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808a01e:	6020      	str	r0, [r4, #0]
	}
 808a020:	4620      	mov	r0, r4
 808a022:	bd38      	pop	{r3, r4, r5, pc}
 808a024:	08090138 	.word	0x08090138

0808a028 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 808a028:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808a02a:	2300      	movs	r3, #0
 808a02c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808a02e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808a030:	4604      	mov	r4, r0
 808a032:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808a034:	b12b      	cbz	r3, 808a042 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808a036:	2202      	movs	r2, #2
 808a038:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808a03a:	68eb      	ldr	r3, [r5, #12]
 808a03c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808a03e:	68ab      	ldr	r3, [r5, #8]
 808a040:	60a3      	str	r3, [r4, #8]
    }
 808a042:	4620      	mov	r0, r4
 808a044:	bd38      	pop	{r3, r4, r5, pc}
	...

0808a048 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 808a048:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a04a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808a04c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808a04e:	4668      	mov	r0, sp
 808a050:	f7ff ff38 	bl	8089ec4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808a054:	f04f 0302 	mov.w	r3, #2
 808a058:	e8d4 2f4f 	ldrexb	r2, [r4]
 808a05c:	2a00      	cmp	r2, #0
 808a05e:	d103      	bne.n	808a068 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 808a060:	e8c4 3f41 	strexb	r1, r3, [r4]
 808a064:	2900      	cmp	r1, #0
 808a066:	d1f7      	bne.n	808a058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 808a068:	d125      	bne.n	808a0b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 808a06a:	f104 050c 	add.w	r5, r4, #12
 808a06e:	4669      	mov	r1, sp
 808a070:	4628      	mov	r0, r5
 808a072:	f7ff ff27 	bl	8089ec4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 808a076:	2301      	movs	r3, #1
 808a078:	f3bf 8f5b 	dmb	ish
 808a07c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808a07e:	2000      	movs	r0, #0
 808a080:	f3bf 8f5b 	dmb	ish
 808a084:	f104 0308 	add.w	r3, r4, #8
 808a088:	e853 6f00 	ldrex	r6, [r3]
 808a08c:	e843 0200 	strex	r2, r0, [r3]
 808a090:	2a00      	cmp	r2, #0
 808a092:	d1f9      	bne.n	808a088 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 808a094:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808a098:	b16e      	cbz	r6, 808a0b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 808a09a:	f7fe fbb9 	bl	8088810 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808a09e:	b178      	cbz	r0, 808a0c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808a0a0:	4629      	mov	r1, r5
 808a0a2:	4630      	mov	r0, r6
 808a0a4:	f7ff ff8b 	bl	8089fbe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 808a0a8:	4630      	mov	r0, r6
 808a0aa:	f7fd ff71 	bl	8087f90 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808a0ae:	2110      	movs	r1, #16
 808a0b0:	4630      	mov	r0, r6
 808a0b2:	f000 fe0e 	bl	808acd2 <_ZdlPvj>
        p_->setError(std::move(error));
 808a0b6:	4668      	mov	r0, sp
 808a0b8:	f7ff ff11 	bl	8089ede <_ZN8particle5ErrorD1Ev>
    }
 808a0bc:	b009      	add	sp, #36	; 0x24
 808a0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808a0c0:	4631      	mov	r1, r6
 808a0c2:	a802      	add	r0, sp, #8
 808a0c4:	f7ff ffb0 	bl	808a028 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808a0c8:	68e0      	ldr	r0, [r4, #12]
 808a0ca:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808a0ce:	b108      	cbz	r0, 808a0d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 808a0d0:	f001 ff7e 	bl	808bfd0 <strdup>
        type_(type) {
 808a0d4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808a0d6:	2010      	movs	r0, #16
 808a0d8:	f8ad 501c 	strh.w	r5, [sp, #28]
 808a0dc:	f7f5 fff5 	bl	80800ca <_Znwj>
 808a0e0:	4605      	mov	r5, r0
 808a0e2:	b1e8      	cbz	r0, 808a120 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 808a0e4:	2700      	movs	r7, #0
 808a0e6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808a0e8:	2018      	movs	r0, #24
 808a0ea:	f7f5 ffee 	bl	80800ca <_Znwj>
 808a0ee:	4604      	mov	r4, r0
 808a0f0:	b188      	cbz	r0, 808a116 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808a0f2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808a0f4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808a0f6:	a802      	add	r0, sp, #8
 808a0f8:	f7ff fd79 	bl	8089bee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808a0fc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808a0fe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808a100:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808a102:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808a104:	9204      	str	r2, [sp, #16]
 808a106:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808a108:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808a10a:	60e3      	str	r3, [r4, #12]
 808a10c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 808a110:	9205      	str	r2, [sp, #20]
 808a112:	f7ff fed7 	bl	8089ec4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 808a116:	4b08      	ldr	r3, [pc, #32]	; (808a138 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808a118:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808a11a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808a11c:	4b07      	ldr	r3, [pc, #28]	; (808a13c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 808a11e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 808a120:	a806      	add	r0, sp, #24
 808a122:	f7ff fedc 	bl	8089ede <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808a126:	a802      	add	r0, sp, #8
 808a128:	f7fd ff32 	bl	8087f90 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808a12c:	2200      	movs	r2, #0
 808a12e:	4629      	mov	r1, r5
 808a130:	4803      	ldr	r0, [pc, #12]	; (808a140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808a132:	f7fe fb75 	bl	8088820 <application_thread_invoke>
 808a136:	e7b7      	b.n	808a0a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 808a138:	08089fd1 	.word	0x08089fd1
 808a13c:	0808a269 	.word	0x0808a269
 808a140:	0808a831 	.word	0x0808a831

0808a144 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808a144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808a148:	b08a      	sub	sp, #40	; 0x28
 808a14a:	4605      	mov	r5, r0
 808a14c:	460c      	mov	r4, r1
 808a14e:	4617      	mov	r7, r2
 808a150:	4698      	mov	r8, r3
 808a152:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808a156:	f7fe fbff 	bl	8088958 <spark_cloud_flag_connected>
 808a15a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 808a15c:	4682      	mov	sl, r0
 808a15e:	bb38      	cbnz	r0, 808a1b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 808a160:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808a164:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808a166:	a905      	add	r1, sp, #20
 808a168:	4630      	mov	r0, r6
 808a16a:	f8ad 3018 	strh.w	r3, [sp, #24]
 808a16e:	f7ff fea9 	bl	8089ec4 <_ZN8particle5ErrorC1EOS0_>
 808a172:	2014      	movs	r0, #20
 808a174:	f7f5 ffa9 	bl	80800ca <_Znwj>
 808a178:	4604      	mov	r4, r0
 808a17a:	b148      	cbz	r0, 808a190 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808a17c:	2302      	movs	r3, #2
 808a17e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808a180:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808a182:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808a186:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 808a188:	4631      	mov	r1, r6
 808a18a:	300c      	adds	r0, #12
 808a18c:	f7ff fe9a 	bl	8089ec4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808a190:	4628      	mov	r0, r5
	: __shared_count(__p)
 808a192:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808a194:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 808a198:	f7ff ff32 	bl	808a000 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808a19c:	4630      	mov	r0, r6
 808a19e:	f7ff fe9e 	bl	8089ede <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808a1a2:	a805      	add	r0, sp, #20
 808a1a4:	f7ff fe9b 	bl	8089ede <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 808a1a8:	4628      	mov	r0, r5
 808a1aa:	b00a      	add	sp, #40	; 0x28
 808a1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808a1b0:	230c      	movs	r3, #12
 808a1b2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808a1b6:	2014      	movs	r0, #20
 808a1b8:	e9cd aa08 	strd	sl, sl, [sp, #32]
 808a1bc:	9307      	str	r3, [sp, #28]
 808a1be:	f7f5 ff84 	bl	80800ca <_Znwj>
 808a1c2:	4601      	mov	r1, r0
 808a1c4:	b128      	cbz	r0, 808a1d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808a1c6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 808a1ca:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808a1ce:	f880 a001 	strb.w	sl, [r0, #1]
 808a1d2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808a1d4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 808a1d6:	f7ff ff13 	bl	808a000 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 808a1da:	4b22      	ldr	r3, [pc, #136]	; (808a264 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808a1dc:	2008      	movs	r0, #8
 808a1de:	9308      	str	r3, [sp, #32]
 808a1e0:	f7f5 ff73 	bl	80800ca <_Znwj>
 808a1e4:	4682      	mov	sl, r0
 808a1e6:	b128      	cbz	r0, 808a1f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808a1e8:	9b03      	ldr	r3, [sp, #12]
 808a1ea:	a904      	add	r1, sp, #16
 808a1ec:	f840 3b04 	str.w	r3, [r0], #4
 808a1f0:	f7ff fb00 	bl	80897f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808a1f4:	4642      	mov	r2, r8
 808a1f6:	4639      	mov	r1, r7
 808a1f8:	4620      	mov	r0, r4
 808a1fa:	9600      	str	r6, [sp, #0]
 808a1fc:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 808a200:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808a204:	f7fe fbb0 	bl	8088968 <spark_send_event>
 808a208:	b9b8      	cbnz	r0, 808a23a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 808a20a:	9b03      	ldr	r3, [sp, #12]
 808a20c:	785b      	ldrb	r3, [r3, #1]
 808a20e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808a212:	b993      	cbnz	r3, 808a23a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 808a214:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 808a218:	a905      	add	r1, sp, #20
 808a21a:	a803      	add	r0, sp, #12
 808a21c:	9205      	str	r2, [sp, #20]
 808a21e:	f8ad 3018 	strh.w	r3, [sp, #24]
 808a222:	f7ff ff11 	bl	808a048 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808a226:	a805      	add	r0, sp, #20
 808a228:	f7ff fe59 	bl	8089ede <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808a22c:	a805      	add	r0, sp, #20
 808a22e:	9909      	ldr	r1, [sp, #36]	; 0x24
 808a230:	f7ff fea6 	bl	8089f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 808a234:	a806      	add	r0, sp, #24
 808a236:	f7f9 f9b3 	bl	80835a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808a23a:	9b03      	ldr	r3, [sp, #12]
 808a23c:	a904      	add	r1, sp, #16
 808a23e:	a806      	add	r0, sp, #24
 808a240:	9305      	str	r3, [sp, #20]
 808a242:	f7ff fad7 	bl	80897f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 808a246:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808a248:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808a24a:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 808a24c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808a24e:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 808a250:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 808a252:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 808a254:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 808a256:	f7f9 f9a3 	bl	80835a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808a25a:	a804      	add	r0, sp, #16
 808a25c:	f7f9 f9a0 	bl	80835a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 808a260:	e7a2      	b.n	808a1a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 808a262:	bf00      	nop
 808a264:	0808a32d 	.word	0x0808a32d

0808a268 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 808a268:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808a26a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a26c:	4605      	mov	r5, r0
	  switch (__op)
 808a26e:	d007      	beq.n	808a280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 808a270:	2a03      	cmp	r2, #3
 808a272:	d018      	beq.n	808a2a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 808a274:	2a01      	cmp	r2, #1
 808a276:	d101      	bne.n	808a27c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808a278:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808a27a:	6003      	str	r3, [r0, #0]
	}
 808a27c:	2000      	movs	r0, #0
 808a27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808a280:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 808a282:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808a284:	f7f5 ff21 	bl	80800ca <_Znwj>
 808a288:	4604      	mov	r4, r0
 808a28a:	b150      	cbz	r0, 808a2a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808a28c:	4631      	mov	r1, r6
 808a28e:	f7ff fecb 	bl	808a028 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808a292:	6930      	ldr	r0, [r6, #16]
 808a294:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808a298:	b108      	cbz	r0, 808a29e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 808a29a:	f001 fe99 	bl	808bfd0 <strdup>
        type_(type) {
 808a29e:	6120      	str	r0, [r4, #16]
 808a2a0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 808a2a2:	602c      	str	r4, [r5, #0]
	}
 808a2a4:	e7ea      	b.n	808a27c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808a2a6:	6804      	ldr	r4, [r0, #0]
 808a2a8:	2c00      	cmp	r4, #0
 808a2aa:	d0e7      	beq.n	808a27c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 808a2ac:	f104 0010 	add.w	r0, r4, #16
 808a2b0:	f7ff fe15 	bl	8089ede <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808a2b4:	4620      	mov	r0, r4
 808a2b6:	f7fd fe6b 	bl	8087f90 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808a2ba:	2118      	movs	r1, #24
 808a2bc:	4620      	mov	r0, r4
 808a2be:	f000 fd08 	bl	808acd2 <_ZdlPvj>
 808a2c2:	e7db      	b.n	808a27c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

0808a2c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 808a2c4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808a2c6:	2300      	movs	r3, #0
 808a2c8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808a2ca:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808a2cc:	4604      	mov	r4, r0
 808a2ce:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808a2d0:	b12b      	cbz	r3, 808a2de <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808a2d2:	2202      	movs	r2, #2
 808a2d4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808a2d6:	68eb      	ldr	r3, [r5, #12]
 808a2d8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808a2da:	68ab      	ldr	r3, [r5, #8]
 808a2dc:	60a3      	str	r3, [r4, #8]
    }
 808a2de:	4620      	mov	r0, r4
 808a2e0:	bd38      	pop	{r3, r4, r5, pc}

0808a2e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 808a2e2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808a2e4:	b570      	push	{r4, r5, r6, lr}
 808a2e6:	4604      	mov	r4, r0
	  switch (__op)
 808a2e8:	d007      	beq.n	808a2fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 808a2ea:	2a03      	cmp	r2, #3
 808a2ec:	d012      	beq.n	808a314 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 808a2ee:	2a01      	cmp	r2, #1
 808a2f0:	d101      	bne.n	808a2f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808a2f2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808a2f4:	6003      	str	r3, [r0, #0]
	}
 808a2f6:	2000      	movs	r0, #0
 808a2f8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808a2fa:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 808a2fc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808a2fe:	f7f5 fee4 	bl	80800ca <_Znwj>
 808a302:	4605      	mov	r5, r0
 808a304:	b120      	cbz	r0, 808a310 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 808a306:	4631      	mov	r1, r6
 808a308:	f7ff ffdc 	bl	808a2c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808a30c:	7c33      	ldrb	r3, [r6, #16]
 808a30e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 808a310:	6025      	str	r5, [r4, #0]
	}
 808a312:	e7f0      	b.n	808a2f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808a314:	6804      	ldr	r4, [r0, #0]
 808a316:	2c00      	cmp	r4, #0
 808a318:	d0ed      	beq.n	808a2f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 808a31a:	4620      	mov	r0, r4
 808a31c:	f7fd fe38 	bl	8087f90 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808a320:	2114      	movs	r1, #20
 808a322:	4620      	mov	r0, r4
 808a324:	f000 fcd5 	bl	808acd2 <_ZdlPvj>
 808a328:	e7e5      	b.n	808a2f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

0808a32c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808a32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a32e:	4604      	mov	r4, r0
 808a330:	b089      	sub	sp, #36	; 0x24
 808a332:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808a334:	a801      	add	r0, sp, #4
 808a336:	4611      	mov	r1, r2
 808a338:	f7ff fe22 	bl	8089f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808a33c:	b1a4      	cbz	r4, 808a368 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 808a33e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808a340:	b11d      	cbz	r5, 808a34a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 808a342:	4628      	mov	r0, r5
 808a344:	f001 fe44 	bl	808bfd0 <strdup>
 808a348:	4605      	mov	r5, r0
 808a34a:	a801      	add	r0, sp, #4
 808a34c:	a903      	add	r1, sp, #12
        type_(type) {
 808a34e:	9503      	str	r5, [sp, #12]
 808a350:	f8ad 4010 	strh.w	r4, [sp, #16]
 808a354:	f7ff fe78 	bl	808a048 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808a358:	a803      	add	r0, sp, #12
 808a35a:	f7ff fdc0 	bl	8089ede <_ZN8particle5ErrorD1Ev>
 808a35e:	a802      	add	r0, sp, #8
 808a360:	f7f9 f91e 	bl	80835a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808a364:	b009      	add	sp, #36	; 0x24
 808a366:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808a368:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808a36a:	9d01      	ldr	r5, [sp, #4]
 808a36c:	e8d5 2f4f 	ldrexb	r2, [r5]
 808a370:	2a00      	cmp	r2, #0
 808a372:	d103      	bne.n	808a37c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 808a374:	e8c5 3f41 	strexb	r1, r3, [r5]
 808a378:	2900      	cmp	r1, #0
 808a37a:	d1f7      	bne.n	808a36c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 808a37c:	d1ef      	bne.n	808a35e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 808a37e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 808a380:	f3bf 8f5b 	dmb	ish
 808a384:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808a386:	f3bf 8f5b 	dmb	ish
 808a38a:	1d2b      	adds	r3, r5, #4
 808a38c:	e853 6f00 	ldrex	r6, [r3]
 808a390:	e843 4200 	strex	r2, r4, [r3]
 808a394:	2a00      	cmp	r2, #0
 808a396:	d1f9      	bne.n	808a38c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 808a398:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808a39c:	2e00      	cmp	r6, #0
 808a39e:	d0de      	beq.n	808a35e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 808a3a0:	4620      	mov	r0, r4
 808a3a2:	f7fe fa35 	bl	8088810 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808a3a6:	4607      	mov	r7, r0
 808a3a8:	b160      	cbz	r0, 808a3c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808a3aa:	4630      	mov	r0, r6
 808a3ac:	f105 010c 	add.w	r1, r5, #12
 808a3b0:	f7ff fe15 	bl	8089fde <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 808a3b4:	4630      	mov	r0, r6
 808a3b6:	f7fd fdeb 	bl	8087f90 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808a3ba:	2110      	movs	r1, #16
 808a3bc:	4630      	mov	r0, r6
 808a3be:	f000 fc88 	bl	808acd2 <_ZdlPvj>
 808a3c2:	e7cc      	b.n	808a35e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808a3c4:	4631      	mov	r1, r6
 808a3c6:	a803      	add	r0, sp, #12
 808a3c8:	f7ff ff7c 	bl	808a2c4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808a3cc:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808a3ce:	2010      	movs	r0, #16
 808a3d0:	f88d 301c 	strb.w	r3, [sp, #28]
 808a3d4:	f7f5 fe79 	bl	80800ca <_Znwj>
 808a3d8:	4605      	mov	r5, r0
 808a3da:	b1d0      	cbz	r0, 808a412 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 808a3dc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808a3de:	2014      	movs	r0, #20
 808a3e0:	f7f5 fe73 	bl	80800ca <_Znwj>
 808a3e4:	4604      	mov	r4, r0
 808a3e6:	b178      	cbz	r0, 808a408 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 808a3e8:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808a3ea:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808a3ec:	a803      	add	r0, sp, #12
 808a3ee:	f7ff fbfe 	bl	8089bee <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808a3f2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808a3f4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808a3f6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808a3f8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808a3fa:	9205      	str	r2, [sp, #20]
 808a3fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808a3fe:	60e3      	str	r3, [r4, #12]
 808a400:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 808a404:	9206      	str	r2, [sp, #24]
 808a406:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808a408:	4b06      	ldr	r3, [pc, #24]	; (808a424 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808a40a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808a40c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808a40e:	4b06      	ldr	r3, [pc, #24]	; (808a428 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 808a410:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808a412:	a803      	add	r0, sp, #12
 808a414:	f7fd fdbc 	bl	8087f90 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808a418:	2200      	movs	r2, #0
 808a41a:	4629      	mov	r1, r5
 808a41c:	4803      	ldr	r0, [pc, #12]	; (808a42c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 808a41e:	f7fe f9ff 	bl	8088820 <application_thread_invoke>
 808a422:	e7c7      	b.n	808a3b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 808a424:	08089ff1 	.word	0x08089ff1
 808a428:	0808a2e3 	.word	0x0808a2e3
 808a42c:	0808a831 	.word	0x0808a831

0808a430 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808a430:	4770      	bx	lr

0808a432 <_ZN9IPAddressD0Ev>:
 808a432:	b510      	push	{r4, lr}
 808a434:	4604      	mov	r4, r0
 808a436:	2108      	movs	r1, #8
 808a438:	f000 fc4b 	bl	808acd2 <_ZdlPvj>
 808a43c:	4620      	mov	r0, r4
 808a43e:	bd10      	pop	{r4, pc}

0808a440 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a442:	460e      	mov	r6, r1
 808a444:	2400      	movs	r4, #0
 808a446:	f100 0708 	add.w	r7, r0, #8
 808a44a:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 808a44c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 808a450:	220a      	movs	r2, #10
 808a452:	4630      	mov	r0, r6
 808a454:	f7ff f861 	bl	808951a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808a458:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808a45a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 808a45c:	d101      	bne.n	808a462 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 808a45e:	4620      	mov	r0, r4
 808a460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 808a462:	2c00      	cmp	r4, #0
 808a464:	d0f2      	beq.n	808a44c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808a466:	212e      	movs	r1, #46	; 0x2e
 808a468:	4630      	mov	r0, r6
 808a46a:	f7ff f833 	bl	80894d4 <_ZN5Print5printEc>
 808a46e:	4404      	add	r4, r0
 808a470:	e7ec      	b.n	808a44c <_ZNK9IPAddress7printToER5Print+0xc>
	...

0808a474 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 808a474:	4a02      	ldr	r2, [pc, #8]	; (808a480 <_ZN9IPAddressC1Ev+0xc>)
 808a476:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808a478:	2200      	movs	r2, #0
 808a47a:	6042      	str	r2, [r0, #4]
}
 808a47c:	4770      	bx	lr
 808a47e:	bf00      	nop
 808a480:	08090154 	.word	0x08090154

0808a484 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 808a484:	4a02      	ldr	r2, [pc, #8]	; (808a490 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808a486:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 808a488:	680a      	ldr	r2, [r1, #0]
 808a48a:	6042      	str	r2, [r0, #4]
}
 808a48c:	4770      	bx	lr
 808a48e:	bf00      	nop
 808a490:	08090154 	.word	0x08090154

0808a494 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 808a494:	4a01      	ldr	r2, [pc, #4]	; (808a49c <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 808a496:	e9c0 2100 	strd	r2, r1, [r0]
}
 808a49a:	4770      	bx	lr
 808a49c:	08090154 	.word	0x08090154

0808a4a0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 808a4a0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808a4a2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808a4a6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 808a4aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 808a4ae:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 808a4b2:	6044      	str	r4, [r0, #4]
}
 808a4b4:	bd10      	pop	{r4, pc}
	...

0808a4b8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808a4b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808a4ba:	4d04      	ldr	r5, [pc, #16]	; (808a4cc <_ZN9IPAddressC1Ehhhh+0x14>)
 808a4bc:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808a4be:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808a4c2:	9500      	str	r5, [sp, #0]
 808a4c4:	f7ff ffec 	bl	808a4a0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808a4c8:	b003      	add	sp, #12
 808a4ca:	bd30      	pop	{r4, r5, pc}
 808a4cc:	08090154 	.word	0x08090154

0808a4d0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808a4d0:	7441      	strb	r1, [r0, #17]
}
 808a4d2:	4770      	bx	lr

0808a4d4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808a4d4:	4770      	bx	lr

0808a4d6 <_ZN9USBSerial4readEv>:
{
 808a4d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808a4d8:	2100      	movs	r1, #0
 808a4da:	7c00      	ldrb	r0, [r0, #16]
 808a4dc:	f7fe f950 	bl	8088780 <HAL_USB_USART_Receive_Data>
}
 808a4e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808a4e4:	bd08      	pop	{r3, pc}

0808a4e6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 808a4e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808a4e8:	2101      	movs	r1, #1
 808a4ea:	7c00      	ldrb	r0, [r0, #16]
 808a4ec:	f7fe f948 	bl	8088780 <HAL_USB_USART_Receive_Data>
}
 808a4f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808a4f4:	bd08      	pop	{r3, pc}

0808a4f6 <_ZN9USBSerial17availableForWriteEv>:
{
 808a4f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808a4f8:	7c00      	ldrb	r0, [r0, #16]
 808a4fa:	f7fe f939 	bl	8088770 <HAL_USB_USART_Available_Data_For_Write>
}
 808a4fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a502:	bd08      	pop	{r3, pc}

0808a504 <_ZN9USBSerial9availableEv>:
{
 808a504:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808a506:	7c00      	ldrb	r0, [r0, #16]
 808a508:	f7fe f92a 	bl	8088760 <HAL_USB_USART_Available_Data>
}
 808a50c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a510:	bd08      	pop	{r3, pc}

0808a512 <_ZN9USBSerial5writeEh>:
{
 808a512:	b538      	push	{r3, r4, r5, lr}
 808a514:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808a516:	7c00      	ldrb	r0, [r0, #16]
{
 808a518:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808a51a:	f7fe f929 	bl	8088770 <HAL_USB_USART_Available_Data_For_Write>
 808a51e:	2800      	cmp	r0, #0
 808a520:	dc01      	bgt.n	808a526 <_ZN9USBSerial5writeEh+0x14>
 808a522:	7c60      	ldrb	r0, [r4, #17]
 808a524:	b128      	cbz	r0, 808a532 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808a526:	4629      	mov	r1, r5
 808a528:	7c20      	ldrb	r0, [r4, #16]
 808a52a:	f7fe f931 	bl	8088790 <HAL_USB_USART_Send_Data>
 808a52e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 808a532:	bd38      	pop	{r3, r4, r5, pc}

0808a534 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 808a534:	7c00      	ldrb	r0, [r0, #16]
 808a536:	f7fe b933 	b.w	80887a0 <HAL_USB_USART_Flush_Data>

0808a53a <_ZN9USBSerialD0Ev>:
 808a53a:	b510      	push	{r4, lr}
 808a53c:	4604      	mov	r4, r0
 808a53e:	2114      	movs	r1, #20
 808a540:	f000 fbc7 	bl	808acd2 <_ZdlPvj>
 808a544:	4620      	mov	r0, r4
 808a546:	bd10      	pop	{r4, pc}

0808a548 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808a548:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808a54a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808a54e:	4604      	mov	r4, r0
 808a550:	4608      	mov	r0, r1
 808a552:	2100      	movs	r1, #0
 808a554:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808a558:	4b04      	ldr	r3, [pc, #16]	; (808a56c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808a55a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808a55c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 808a55e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 808a560:	4611      	mov	r1, r2
  _blocking = true;
 808a562:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 808a564:	f7fe f8ec 	bl	8088740 <HAL_USB_USART_Init>
}
 808a568:	4620      	mov	r0, r4
 808a56a:	bd10      	pop	{r4, pc}
 808a56c:	08090168 	.word	0x08090168

0808a570 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808a570:	2200      	movs	r2, #0
 808a572:	7c00      	ldrb	r0, [r0, #16]
 808a574:	f7fe b8ec 	b.w	8088750 <HAL_USB_USART_Begin>

0808a578 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808a578:	b510      	push	{r4, lr}
 808a57a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808a57c:	2214      	movs	r2, #20
 808a57e:	2100      	movs	r1, #0
 808a580:	f001 fcda 	bl	808bf38 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808a584:	4b05      	ldr	r3, [pc, #20]	; (808a59c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808a586:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 808a588:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808a58a:	4b05      	ldr	r3, [pc, #20]	; (808a5a0 <_Z19acquireSerialBufferv+0x28>)
 808a58c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808a58e:	f240 1301 	movw	r3, #257	; 0x101
 808a592:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808a594:	2381      	movs	r3, #129	; 0x81
 808a596:	8223      	strh	r3, [r4, #16]
}
 808a598:	bd10      	pop	{r4, pc}
 808a59a:	bf00      	nop
 808a59c:	20000d68 	.word	0x20000d68
 808a5a0:	20000e69 	.word	0x20000e69

0808a5a4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808a5a4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808a5a6:	4d0f      	ldr	r5, [pc, #60]	; (808a5e4 <_Z16_fetch_usbserialv+0x40>)
{
 808a5a8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808a5aa:	a801      	add	r0, sp, #4
 808a5ac:	f7ff ffe4 	bl	808a578 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808a5b0:	7829      	ldrb	r1, [r5, #0]
 808a5b2:	f3bf 8f5b 	dmb	ish
 808a5b6:	f011 0401 	ands.w	r4, r1, #1
 808a5ba:	d110      	bne.n	808a5de <_Z16_fetch_usbserialv+0x3a>
 808a5bc:	4628      	mov	r0, r5
 808a5be:	f7f5 fd8a 	bl	80800d6 <__cxa_guard_acquire>
 808a5c2:	b160      	cbz	r0, 808a5de <_Z16_fetch_usbserialv+0x3a>
 808a5c4:	4621      	mov	r1, r4
 808a5c6:	aa01      	add	r2, sp, #4
 808a5c8:	4807      	ldr	r0, [pc, #28]	; (808a5e8 <_Z16_fetch_usbserialv+0x44>)
 808a5ca:	f7ff ffbd 	bl	808a548 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808a5ce:	4628      	mov	r0, r5
 808a5d0:	f7f5 fd86 	bl	80800e0 <__cxa_guard_release>
 808a5d4:	4a05      	ldr	r2, [pc, #20]	; (808a5ec <_Z16_fetch_usbserialv+0x48>)
 808a5d6:	4906      	ldr	r1, [pc, #24]	; (808a5f0 <_Z16_fetch_usbserialv+0x4c>)
 808a5d8:	4803      	ldr	r0, [pc, #12]	; (808a5e8 <_Z16_fetch_usbserialv+0x44>)
 808a5da:	f000 fb75 	bl	808acc8 <__aeabi_atexit>
	return _usbserial;
}
 808a5de:	4802      	ldr	r0, [pc, #8]	; (808a5e8 <_Z16_fetch_usbserialv+0x44>)
 808a5e0:	b007      	add	sp, #28
 808a5e2:	bd30      	pop	{r4, r5, pc}
 808a5e4:	20000d38 	.word	0x20000d38
 808a5e8:	20000d40 	.word	0x20000d40
 808a5ec:	200002b0 	.word	0x200002b0
 808a5f0:	0808a4d5 	.word	0x0808a4d5

0808a5f4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808a5f4:	b510      	push	{r4, lr}
 808a5f6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808a5f8:	2214      	movs	r2, #20
 808a5fa:	2100      	movs	r1, #0
 808a5fc:	f001 fc9c 	bl	808bf38 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808a600:	4b05      	ldr	r3, [pc, #20]	; (808a618 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808a602:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 808a604:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808a606:	4b05      	ldr	r3, [pc, #20]	; (808a61c <_Z23acquireUSBSerial1Bufferv+0x28>)
 808a608:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808a60a:	f240 1301 	movw	r3, #257	; 0x101
 808a60e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808a610:	2381      	movs	r3, #129	; 0x81
 808a612:	8223      	strh	r3, [r4, #16]
}
 808a614:	bd10      	pop	{r4, pc}
 808a616:	bf00      	nop
 808a618:	20000eea 	.word	0x20000eea
 808a61c:	20000feb 	.word	0x20000feb

0808a620 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808a620:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808a622:	4c0f      	ldr	r4, [pc, #60]	; (808a660 <_Z17_fetch_usbserial1v+0x40>)
{
 808a624:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808a626:	a801      	add	r0, sp, #4
 808a628:	f7ff ffe4 	bl	808a5f4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808a62c:	7823      	ldrb	r3, [r4, #0]
 808a62e:	f3bf 8f5b 	dmb	ish
 808a632:	07db      	lsls	r3, r3, #31
 808a634:	d410      	bmi.n	808a658 <_Z17_fetch_usbserial1v+0x38>
 808a636:	4620      	mov	r0, r4
 808a638:	f7f5 fd4d 	bl	80800d6 <__cxa_guard_acquire>
 808a63c:	b160      	cbz	r0, 808a658 <_Z17_fetch_usbserial1v+0x38>
 808a63e:	2101      	movs	r1, #1
 808a640:	aa01      	add	r2, sp, #4
 808a642:	4808      	ldr	r0, [pc, #32]	; (808a664 <_Z17_fetch_usbserial1v+0x44>)
 808a644:	f7ff ff80 	bl	808a548 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808a648:	4620      	mov	r0, r4
 808a64a:	f7f5 fd49 	bl	80800e0 <__cxa_guard_release>
 808a64e:	4a06      	ldr	r2, [pc, #24]	; (808a668 <_Z17_fetch_usbserial1v+0x48>)
 808a650:	4906      	ldr	r1, [pc, #24]	; (808a66c <_Z17_fetch_usbserial1v+0x4c>)
 808a652:	4804      	ldr	r0, [pc, #16]	; (808a664 <_Z17_fetch_usbserial1v+0x44>)
 808a654:	f000 fb38 	bl	808acc8 <__aeabi_atexit>
  return _usbserial1;
}
 808a658:	4802      	ldr	r0, [pc, #8]	; (808a664 <_Z17_fetch_usbserial1v+0x44>)
 808a65a:	b006      	add	sp, #24
 808a65c:	bd10      	pop	{r4, pc}
 808a65e:	bf00      	nop
 808a660:	20000d3c 	.word	0x20000d3c
 808a664:	20000d54 	.word	0x20000d54
 808a668:	200002b0 	.word	0x200002b0
 808a66c:	0808a4d5 	.word	0x0808a4d5

0808a670 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808a670:	2200      	movs	r2, #0
 808a672:	6840      	ldr	r0, [r0, #4]
 808a674:	4611      	mov	r1, r2
 808a676:	f7fe b917 	b.w	80888a8 <network_ready>

0808a67a <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808a67a:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 808a67c:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808a67e:	b085      	sub	sp, #20
 808a680:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a682:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808a684:	460f      	mov	r7, r1
 808a686:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808a688:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a68a:	f001 fcbc 	bl	808c006 <strlen>
 808a68e:	687b      	ldr	r3, [r7, #4]
 808a690:	b281      	uxth	r1, r0
 808a692:	9600      	str	r6, [sp, #0]
 808a694:	4628      	mov	r0, r5
 808a696:	aa03      	add	r2, sp, #12
 808a698:	f7fe f842 	bl	8088720 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808a69c:	b130      	cbz	r0, 808a6ac <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808a69e:	4631      	mov	r1, r6
 808a6a0:	4620      	mov	r0, r4
 808a6a2:	f7ff fef7 	bl	808a494 <_ZN9IPAddressC1Em>
    }
 808a6a6:	4620      	mov	r0, r4
 808a6a8:	b005      	add	sp, #20
 808a6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808a6ac:	4620      	mov	r0, r4
 808a6ae:	a903      	add	r1, sp, #12
 808a6b0:	f7ff fee8 	bl	808a484 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 808a6b4:	e7f7      	b.n	808a6a6 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

0808a6b6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 808a6b6:	2200      	movs	r2, #0
 808a6b8:	6840      	ldr	r0, [r0, #4]
 808a6ba:	4611      	mov	r1, r2
 808a6bc:	f7fe b914 	b.w	80888e8 <network_listening>

0808a6c0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808a6c0:	2200      	movs	r2, #0
 808a6c2:	6840      	ldr	r0, [r0, #4]
 808a6c4:	4611      	mov	r1, r2
 808a6c6:	f7fe b91f 	b.w	8088908 <network_get_listen_timeout>

0808a6ca <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808a6ca:	2200      	movs	r2, #0
 808a6cc:	6840      	ldr	r0, [r0, #4]
 808a6ce:	f7fe b913 	b.w	80888f8 <network_set_listen_timeout>

0808a6d2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808a6d2:	2200      	movs	r2, #0
 808a6d4:	6840      	ldr	r0, [r0, #4]
 808a6d6:	f081 0101 	eor.w	r1, r1, #1
 808a6da:	f7fe b8fd 	b.w	80888d8 <network_listen>

0808a6de <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808a6de:	2300      	movs	r3, #0
 808a6e0:	6840      	ldr	r0, [r0, #4]
 808a6e2:	461a      	mov	r2, r3
 808a6e4:	4619      	mov	r1, r3
 808a6e6:	f7fe b8e7 	b.w	80888b8 <network_on>

0808a6ea <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 808a6ea:	2200      	movs	r2, #0
 808a6ec:	6840      	ldr	r0, [r0, #4]
 808a6ee:	4611      	mov	r1, r2
 808a6f0:	f7fe b8ca 	b.w	8088888 <network_connecting>

0808a6f4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808a6f4:	2200      	movs	r2, #0
 808a6f6:	2102      	movs	r1, #2
 808a6f8:	6840      	ldr	r0, [r0, #4]
 808a6fa:	f7fe b8cd 	b.w	8088898 <network_disconnect>

0808a6fe <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808a6fe:	2300      	movs	r3, #0
 808a700:	6840      	ldr	r0, [r0, #4]
 808a702:	461a      	mov	r2, r3
 808a704:	f7fe b8b8 	b.w	8088878 <network_connect>

0808a708 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808a708:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808a70a:	2428      	movs	r4, #40	; 0x28
 808a70c:	4b07      	ldr	r3, [pc, #28]	; (808a72c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808a70e:	4622      	mov	r2, r4
 808a710:	4618      	mov	r0, r3
 808a712:	2100      	movs	r1, #0
 808a714:	f001 fc10 	bl	808bf38 <memset>
        cid = -1;
 808a718:	f04f 32ff 	mov.w	r2, #4294967295
 808a71c:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808a71e:	2204      	movs	r2, #4
 808a720:	4b03      	ldr	r3, [pc, #12]	; (808a730 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808a722:	8004      	strh	r4, [r0, #0]
 808a724:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808a726:	4a03      	ldr	r2, [pc, #12]	; (808a734 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 808a728:	601a      	str	r2, [r3, #0]
 808a72a:	bd10      	pop	{r4, pc}
 808a72c:	20001074 	.word	0x20001074
 808a730:	2000106c 	.word	0x2000106c
 808a734:	08090198 	.word	0x08090198

0808a738 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808a738:	7441      	strb	r1, [r0, #17]
}
 808a73a:	4770      	bx	lr

0808a73c <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 808a73c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 808a73e:	7c00      	ldrb	r0, [r0, #16]
 808a740:	f7fd ff26 	bl	8088590 <hal_usart_available_data_for_write>
}
 808a744:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a748:	bd08      	pop	{r3, pc}

0808a74a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808a74a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808a74c:	7c00      	ldrb	r0, [r0, #16]
 808a74e:	f7fd fef7 	bl	8088540 <hal_usart_available>
}
 808a752:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a756:	bd08      	pop	{r3, pc}

0808a758 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808a758:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 808a75a:	7c00      	ldrb	r0, [r0, #16]
 808a75c:	f7fd ff00 	bl	8088560 <hal_usart_peek>
}
 808a760:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808a764:	bd08      	pop	{r3, pc}

0808a766 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808a766:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808a768:	7c00      	ldrb	r0, [r0, #16]
 808a76a:	f7fd fef1 	bl	8088550 <hal_usart_read>
}
 808a76e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808a772:	bd08      	pop	{r3, pc}

0808a774 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808a774:	7c00      	ldrb	r0, [r0, #16]
 808a776:	f7fd befb 	b.w	8088570 <hal_usart_flush>

0808a77a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808a77a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808a77c:	7c46      	ldrb	r6, [r0, #17]
{
 808a77e:	4604      	mov	r4, r0
 808a780:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808a782:	b12e      	cbz	r6, 808a790 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808a784:	4629      	mov	r1, r5
 808a786:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808a788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 808a78c:	f7fd bed0 	b.w	8088530 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808a790:	7c00      	ldrb	r0, [r0, #16]
 808a792:	f7fd fefd 	bl	8088590 <hal_usart_available_data_for_write>
 808a796:	2800      	cmp	r0, #0
 808a798:	dcf4      	bgt.n	808a784 <_ZN11USARTSerial5writeEh+0xa>
}
 808a79a:	4630      	mov	r0, r6
 808a79c:	bd70      	pop	{r4, r5, r6, pc}
	...

0808a7a0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 808a7a0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808a7a4:	b510      	push	{r4, lr}
 808a7a6:	4604      	mov	r4, r0
 808a7a8:	4608      	mov	r0, r1
 808a7aa:	4611      	mov	r1, r2
 808a7ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808a7b0:	e9c4 c201 	strd	ip, r2, [r4, #4]
 808a7b4:	4a04      	ldr	r2, [pc, #16]	; (808a7c8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808a7b6:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808a7b8:	6022      	str	r2, [r4, #0]
  _blocking = true;
 808a7ba:	2201      	movs	r2, #1
 808a7bc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 808a7be:	461a      	mov	r2, r3
 808a7c0:	f7fd feae 	bl	8088520 <hal_usart_init>
}
 808a7c4:	4620      	mov	r0, r4
 808a7c6:	bd10      	pop	{r4, pc}
 808a7c8:	080901cc 	.word	0x080901cc

0808a7cc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 808a7cc:	2300      	movs	r3, #0
 808a7ce:	7c00      	ldrb	r0, [r0, #16]
 808a7d0:	f7fd bee6 	b.w	80885a0 <hal_usart_begin_config>

0808a7d4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 808a7d4:	2200      	movs	r2, #0
 808a7d6:	f7ff bff9 	b.w	808a7cc <_ZN11USARTSerial5beginEmm>

0808a7da <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 808a7da:	7c00      	ldrb	r0, [r0, #16]
 808a7dc:	f7fd bed0 	b.w	8088580 <hal_usart_is_enabled>

0808a7e0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808a7e0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808a7e2:	4d0d      	ldr	r5, [pc, #52]	; (808a818 <_Z22__fetch_global_Serial1v+0x38>)
 808a7e4:	7829      	ldrb	r1, [r5, #0]
 808a7e6:	f3bf 8f5b 	dmb	ish
 808a7ea:	f011 0401 	ands.w	r4, r1, #1
 808a7ee:	d111      	bne.n	808a814 <_Z22__fetch_global_Serial1v+0x34>
 808a7f0:	4628      	mov	r0, r5
 808a7f2:	f7f5 fc70 	bl	80800d6 <__cxa_guard_acquire>
 808a7f6:	b168      	cbz	r0, 808a814 <_Z22__fetch_global_Serial1v+0x34>
 808a7f8:	4621      	mov	r1, r4
 808a7fa:	4a08      	ldr	r2, [pc, #32]	; (808a81c <_Z22__fetch_global_Serial1v+0x3c>)
 808a7fc:	4b08      	ldr	r3, [pc, #32]	; (808a820 <_Z22__fetch_global_Serial1v+0x40>)
 808a7fe:	4809      	ldr	r0, [pc, #36]	; (808a824 <_Z22__fetch_global_Serial1v+0x44>)
 808a800:	f7ff ffce 	bl	808a7a0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808a804:	4628      	mov	r0, r5
 808a806:	f7f5 fc6b 	bl	80800e0 <__cxa_guard_release>
 808a80a:	4a07      	ldr	r2, [pc, #28]	; (808a828 <_Z22__fetch_global_Serial1v+0x48>)
 808a80c:	4907      	ldr	r1, [pc, #28]	; (808a82c <_Z22__fetch_global_Serial1v+0x4c>)
 808a80e:	4805      	ldr	r0, [pc, #20]	; (808a824 <_Z22__fetch_global_Serial1v+0x44>)
 808a810:	f000 fa5a 	bl	808acc8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808a814:	4803      	ldr	r0, [pc, #12]	; (808a824 <_Z22__fetch_global_Serial1v+0x44>)
 808a816:	bd38      	pop	{r3, r4, r5, pc}
 808a818:	2000109c 	.word	0x2000109c
 808a81c:	200010a0 	.word	0x200010a0
 808a820:	20001124 	.word	0x20001124
 808a824:	200011a8 	.word	0x200011a8
 808a828:	200002b0 	.word	0x200002b0
 808a82c:	08080941 	.word	0x08080941

0808a830 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808a830:	b510      	push	{r4, lr}
      if (_M_empty())
 808a832:	6883      	ldr	r3, [r0, #8]
 808a834:	4604      	mov	r4, r0
 808a836:	b90b      	cbnz	r3, 808a83c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808a838:	f000 fa4f 	bl	808acda <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808a83c:	68c3      	ldr	r3, [r0, #12]
 808a83e:	4798      	blx	r3
      if (_M_manager)
 808a840:	68a3      	ldr	r3, [r4, #8]
 808a842:	b11b      	cbz	r3, 808a84c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808a844:	2203      	movs	r2, #3
 808a846:	4621      	mov	r1, r4
 808a848:	4620      	mov	r0, r4
 808a84a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808a84c:	4620      	mov	r0, r4
}
 808a84e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 808a852:	2110      	movs	r1, #16
 808a854:	f000 ba3d 	b.w	808acd2 <_ZdlPvj>

0808a858 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 808a858:	4770      	bx	lr

0808a85a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808a85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a85c:	4606      	mov	r6, r0
 808a85e:	4615      	mov	r5, r2
 808a860:	460c      	mov	r4, r1
 808a862:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808a864:	42bc      	cmp	r4, r7
 808a866:	d006      	beq.n	808a876 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808a868:	6833      	ldr	r3, [r6, #0]
 808a86a:	4630      	mov	r0, r6
 808a86c:	689b      	ldr	r3, [r3, #8]
 808a86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 808a872:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 808a874:	e7f6      	b.n	808a864 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 808a876:	4628      	mov	r0, r5
 808a878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808a87a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808a87a:	2200      	movs	r2, #0
 808a87c:	7c00      	ldrb	r0, [r0, #16]
 808a87e:	f7fd beaf 	b.w	80885e0 <hal_i2c_write>

0808a882 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 808a882:	2100      	movs	r1, #0
 808a884:	7c00      	ldrb	r0, [r0, #16]
 808a886:	f7fd beb3 	b.w	80885f0 <hal_i2c_available>

0808a88a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808a88a:	2100      	movs	r1, #0
 808a88c:	7c00      	ldrb	r0, [r0, #16]
 808a88e:	f7fd beb7 	b.w	8088600 <hal_i2c_read>

0808a892 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 808a892:	2100      	movs	r1, #0
 808a894:	7c00      	ldrb	r0, [r0, #16]
 808a896:	f7fd bebb 	b.w	8088610 <hal_i2c_peek>

0808a89a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 808a89a:	2100      	movs	r1, #0
 808a89c:	7c00      	ldrb	r0, [r0, #16]
 808a89e:	f7fd bebf 	b.w	8088620 <hal_i2c_flush>

0808a8a2 <_ZN7TwoWireD0Ev>:
 808a8a2:	b510      	push	{r4, lr}
 808a8a4:	4604      	mov	r4, r0
 808a8a6:	2114      	movs	r1, #20
 808a8a8:	f000 fa13 	bl	808acd2 <_ZdlPvj>
 808a8ac:	4620      	mov	r0, r4
 808a8ae:	bd10      	pop	{r4, pc}

0808a8b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808a8b0:	b510      	push	{r4, lr}
 808a8b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808a8b6:	4604      	mov	r4, r0
 808a8b8:	4608      	mov	r0, r1
 808a8ba:	2100      	movs	r1, #0
 808a8bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808a8c0:	4b03      	ldr	r3, [pc, #12]	; (808a8d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 808a8c2:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808a8c4:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 808a8c6:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 808a8c8:	f7fd feba 	bl	8088640 <hal_i2c_init>
}
 808a8cc:	4620      	mov	r0, r4
 808a8ce:	bd10      	pop	{r4, pc}
 808a8d0:	080901fc 	.word	0x080901fc

0808a8d4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808a8d4:	2300      	movs	r3, #0
 808a8d6:	7c00      	ldrb	r0, [r0, #16]
 808a8d8:	461a      	mov	r2, r3
 808a8da:	4619      	mov	r1, r3
 808a8dc:	f7fd be68 	b.w	80885b0 <hal_i2c_begin>

0808a8e0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 808a8e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808a8e2:	2200      	movs	r2, #0
 808a8e4:	2314      	movs	r3, #20
 808a8e6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808a8ea:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 808a8ee:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 808a8f0:	7c00      	ldrb	r0, [r0, #16]
 808a8f2:	f88d 3008 	strb.w	r3, [sp, #8]
 808a8f6:	684b      	ldr	r3, [r1, #4]
 808a8f8:	9303      	str	r3, [sp, #12]
 808a8fa:	68cb      	ldr	r3, [r1, #12]
 808a8fc:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808a8fe:	7a0b      	ldrb	r3, [r1, #8]
 808a900:	a901      	add	r1, sp, #4
 808a902:	9305      	str	r3, [sp, #20]
 808a904:	f7fd feb4 	bl	8088670 <hal_i2c_request_ex>
}
 808a908:	b007      	add	sp, #28
 808a90a:	f85d fb04 	ldr.w	pc, [sp], #4

0808a90e <_ZN7TwoWire11requestFromEhjh>:
{
 808a90e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808a910:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808a912:	f88d 1000 	strb.w	r1, [sp]
 808a916:	f04f 0164 	mov.w	r1, #100	; 0x64
 808a91a:	bf18      	it	ne
 808a91c:	2301      	movne	r3, #1
 808a91e:	9103      	str	r1, [sp, #12]
 808a920:	4669      	mov	r1, sp
    size_ = size;
 808a922:	9201      	str	r2, [sp, #4]
 808a924:	f88d 3008 	strb.w	r3, [sp, #8]
 808a928:	f7ff ffda 	bl	808a8e0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 808a92c:	b005      	add	sp, #20
 808a92e:	f85d fb04 	ldr.w	pc, [sp], #4

0808a932 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 808a932:	2301      	movs	r3, #1
 808a934:	f7ff bfeb 	b.w	808a90e <_ZN7TwoWire11requestFromEhjh>

0808a938 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 808a938:	2200      	movs	r2, #0
 808a93a:	7c00      	ldrb	r0, [r0, #16]
 808a93c:	f7fd be40 	b.w	80885c0 <hal_i2c_begin_transmission>

0808a940 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 808a940:	b2c9      	uxtb	r1, r1
 808a942:	f7ff bff9 	b.w	808a938 <_ZN7TwoWire17beginTransmissionEh>

0808a946 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 808a946:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808a948:	2200      	movs	r2, #0
 808a94a:	460b      	mov	r3, r1
 808a94c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808a950:	2214      	movs	r2, #20
 808a952:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 808a956:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 808a958:	7809      	ldrb	r1, [r1, #0]
    };
 808a95a:	9203      	str	r2, [sp, #12]
 808a95c:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808a95e:	7a1b      	ldrb	r3, [r3, #8]
    };
 808a960:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 808a962:	7c00      	ldrb	r0, [r0, #16]
 808a964:	aa01      	add	r2, sp, #4
 808a966:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808a96a:	9305      	str	r3, [sp, #20]
 808a96c:	f7fd fe28 	bl	80885c0 <hal_i2c_begin_transmission>
}
 808a970:	b007      	add	sp, #28
 808a972:	f85d fb04 	ldr.w	pc, [sp], #4

0808a976 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 808a976:	2200      	movs	r2, #0
 808a978:	7c00      	ldrb	r0, [r0, #16]
 808a97a:	f7fd be29 	b.w	80885d0 <hal_i2c_end_transmission>

0808a97e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 808a97e:	2101      	movs	r1, #1
 808a980:	f7ff bff9 	b.w	808a976 <_ZN7TwoWire15endTransmissionEh>

0808a984 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
 808a984:	2100      	movs	r1, #0
 808a986:	7c00      	ldrb	r0, [r0, #16]
 808a988:	f7fd be52 	b.w	8088630 <hal_i2c_is_enabled>

0808a98c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808a98c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 808a98e:	2100      	movs	r1, #0
 808a990:	7c00      	ldrb	r0, [r0, #16]
 808a992:	f7fd fe5d 	bl	8088650 <hal_i2c_lock>
}
 808a996:	fab0 f080 	clz	r0, r0
 808a99a:	0940      	lsrs	r0, r0, #5
 808a99c:	bd08      	pop	{r3, pc}

0808a99e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808a99e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 808a9a0:	2100      	movs	r1, #0
 808a9a2:	7c00      	ldrb	r0, [r0, #16]
 808a9a4:	f7fd fe5c 	bl	8088660 <hal_i2c_unlock>
}
 808a9a8:	fab0 f080 	clz	r0, r0
 808a9ac:	0940      	lsrs	r0, r0, #5
 808a9ae:	bd08      	pop	{r3, pc}

0808a9b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808a9b0:	2300      	movs	r3, #0
 808a9b2:	6840      	ldr	r0, [r0, #4]
 808a9b4:	461a      	mov	r2, r3
 808a9b6:	f7fd bf5f 	b.w	8088878 <network_connect>

0808a9ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808a9ba:	2200      	movs	r2, #0
 808a9bc:	2102      	movs	r1, #2
 808a9be:	6840      	ldr	r0, [r0, #4]
 808a9c0:	f7fd bf6a 	b.w	8088898 <network_disconnect>

0808a9c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808a9c4:	2200      	movs	r2, #0
 808a9c6:	6840      	ldr	r0, [r0, #4]
 808a9c8:	4611      	mov	r1, r2
 808a9ca:	f7fd bf5d 	b.w	8088888 <network_connecting>

0808a9ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808a9ce:	2200      	movs	r2, #0
 808a9d0:	6840      	ldr	r0, [r0, #4]
 808a9d2:	4611      	mov	r1, r2
 808a9d4:	f7fd bf68 	b.w	80888a8 <network_ready>

0808a9d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808a9d8:	2300      	movs	r3, #0
 808a9da:	6840      	ldr	r0, [r0, #4]
 808a9dc:	461a      	mov	r2, r3
 808a9de:	4619      	mov	r1, r3
 808a9e0:	f7fd bf6a 	b.w	80888b8 <network_on>

0808a9e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808a9e4:	2300      	movs	r3, #0
 808a9e6:	6840      	ldr	r0, [r0, #4]
 808a9e8:	461a      	mov	r2, r3
 808a9ea:	4619      	mov	r1, r3
 808a9ec:	f7fd bf6c 	b.w	80888c8 <network_off>

0808a9f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808a9f0:	2200      	movs	r2, #0
 808a9f2:	6840      	ldr	r0, [r0, #4]
 808a9f4:	f081 0101 	eor.w	r1, r1, #1
 808a9f8:	f7fd bf6e 	b.w	80888d8 <network_listen>

0808a9fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808a9fc:	2200      	movs	r2, #0
 808a9fe:	6840      	ldr	r0, [r0, #4]
 808aa00:	f7fd bf7a 	b.w	80888f8 <network_set_listen_timeout>

0808aa04 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808aa04:	2200      	movs	r2, #0
 808aa06:	6840      	ldr	r0, [r0, #4]
 808aa08:	4611      	mov	r1, r2
 808aa0a:	f7fd bf7d 	b.w	8088908 <network_get_listen_timeout>

0808aa0e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808aa0e:	2200      	movs	r2, #0
 808aa10:	6840      	ldr	r0, [r0, #4]
 808aa12:	4611      	mov	r1, r2
 808aa14:	f7fd bf68 	b.w	80888e8 <network_listening>

0808aa18 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808aa18:	b570      	push	{r4, r5, r6, lr}
 808aa1a:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808aa1c:	2600      	movs	r6, #0
 808aa1e:	b086      	sub	sp, #24
 808aa20:	4604      	mov	r4, r0
    IPAddress addr;
 808aa22:	a804      	add	r0, sp, #16
 808aa24:	f7ff fd26 	bl	808a474 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808aa28:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808aa2a:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808aa2c:	f001 faeb 	bl	808c006 <strlen>
 808aa30:	4b0a      	ldr	r3, [pc, #40]	; (808aa5c <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 808aa32:	9600      	str	r6, [sp, #0]
 808aa34:	b281      	uxth	r1, r0
 808aa36:	685b      	ldr	r3, [r3, #4]
 808aa38:	4628      	mov	r0, r5
 808aa3a:	aa03      	add	r2, sp, #12
 808aa3c:	f7fd fe70 	bl	8088720 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808aa40:	b130      	cbz	r0, 808aa50 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808aa42:	4631      	mov	r1, r6
 808aa44:	4620      	mov	r0, r4
 808aa46:	f7ff fd25 	bl	808a494 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808aa4a:	4620      	mov	r0, r4
 808aa4c:	b006      	add	sp, #24
 808aa4e:	bd70      	pop	{r4, r5, r6, pc}
 808aa50:	4620      	mov	r0, r4
 808aa52:	a903      	add	r1, sp, #12
 808aa54:	f7ff fd16 	bl	808a484 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808aa58:	e7f7      	b.n	808aa4a <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808aa5a:	bf00      	nop
 808aa5c:	2000106c 	.word	0x2000106c

0808aa60 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808aa60:	4b02      	ldr	r3, [pc, #8]	; (808aa6c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808aa62:	4a03      	ldr	r2, [pc, #12]	; (808aa70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808aa64:	601a      	str	r2, [r3, #0]
 808aa66:	2200      	movs	r2, #0
 808aa68:	605a      	str	r2, [r3, #4]

} // spark
 808aa6a:	4770      	bx	lr
 808aa6c:	200011bc 	.word	0x200011bc
 808aa70:	08090224 	.word	0x08090224

0808aa74 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 808aa74:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 808aa76:	b570      	push	{r4, r5, r6, lr}
 808aa78:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 808aa7a:	d901      	bls.n	808aa80 <pinAvailable+0xc>
    return false;
 808aa7c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 808aa7e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808aa80:	f1a0 030d 	sub.w	r3, r0, #13
 808aa84:	2b02      	cmp	r3, #2
 808aa86:	d90b      	bls.n	808aaa0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 808aa88:	2801      	cmp	r0, #1
 808aa8a:	d826      	bhi.n	808aada <pinAvailable+0x66>
 808aa8c:	f000 f8cc 	bl	808ac28 <_Z19__fetch_global_Wirev>
 808aa90:	2100      	movs	r1, #0
 808aa92:	7c00      	ldrb	r0, [r0, #16]
 808aa94:	f7fd fdcc 	bl	8088630 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808aa98:	f080 0001 	eor.w	r0, r0, #1
 808aa9c:	b2c0      	uxtb	r0, r0
 808aa9e:	e7ee      	b.n	808aa7e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 808aaa0:	4e13      	ldr	r6, [pc, #76]	; (808aaf0 <pinAvailable+0x7c>)
 808aaa2:	7831      	ldrb	r1, [r6, #0]
 808aaa4:	f3bf 8f5b 	dmb	ish
 808aaa8:	f011 0501 	ands.w	r5, r1, #1
 808aaac:	d10f      	bne.n	808aace <pinAvailable+0x5a>
 808aaae:	4630      	mov	r0, r6
 808aab0:	f7f5 fb11 	bl	80800d6 <__cxa_guard_acquire>
 808aab4:	b158      	cbz	r0, 808aace <pinAvailable+0x5a>
 808aab6:	4629      	mov	r1, r5
 808aab8:	480e      	ldr	r0, [pc, #56]	; (808aaf4 <pinAvailable+0x80>)
 808aaba:	f7fe f934 	bl	8088d26 <_ZN8SPIClassC1E19hal_spi_interface_t>
 808aabe:	4630      	mov	r0, r6
 808aac0:	f7f5 fb0e 	bl	80800e0 <__cxa_guard_release>
 808aac4:	4a0c      	ldr	r2, [pc, #48]	; (808aaf8 <pinAvailable+0x84>)
 808aac6:	490d      	ldr	r1, [pc, #52]	; (808aafc <pinAvailable+0x88>)
 808aac8:	480a      	ldr	r0, [pc, #40]	; (808aaf4 <pinAvailable+0x80>)
 808aaca:	f000 f8fd 	bl	808acc8 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808aace:	4b09      	ldr	r3, [pc, #36]	; (808aaf4 <pinAvailable+0x80>)
 808aad0:	7818      	ldrb	r0, [r3, #0]
 808aad2:	f7fd fe05 	bl	80886e0 <hal_spi_is_enabled>
 808aad6:	2800      	cmp	r0, #0
 808aad8:	d1d0      	bne.n	808aa7c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808aada:	3c12      	subs	r4, #18
 808aadc:	2c01      	cmp	r4, #1
 808aade:	d805      	bhi.n	808aaec <pinAvailable+0x78>
 808aae0:	f7ff fe7e 	bl	808a7e0 <_Z22__fetch_global_Serial1v>
 808aae4:	7c00      	ldrb	r0, [r0, #16]
 808aae6:	f7fd fd4b 	bl	8088580 <hal_usart_is_enabled>
 808aaea:	e7d5      	b.n	808aa98 <pinAvailable+0x24>
  return true; // 'pin' is available
 808aaec:	2001      	movs	r0, #1
 808aaee:	e7c6      	b.n	808aa7e <pinAvailable+0xa>
 808aaf0:	20000c94 	.word	0x20000c94
 808aaf4:	20000c98 	.word	0x20000c98
 808aaf8:	200002b0 	.word	0x200002b0
 808aafc:	080871e9 	.word	0x080871e9

0808ab00 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808ab00:	282e      	cmp	r0, #46	; 0x2e
{
 808ab02:	b538      	push	{r3, r4, r5, lr}
 808ab04:	4604      	mov	r4, r0
 808ab06:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808ab08:	d80a      	bhi.n	808ab20 <pinMode+0x20>
 808ab0a:	29ff      	cmp	r1, #255	; 0xff
 808ab0c:	d008      	beq.n	808ab20 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 808ab0e:	f7ff ffb1 	bl	808aa74 <pinAvailable>
 808ab12:	b128      	cbz	r0, 808ab20 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 808ab14:	4629      	mov	r1, r5
 808ab16:	4620      	mov	r0, r4
}
 808ab18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 808ab1c:	f7fd bc70 	b.w	8088400 <HAL_Pin_Mode>
}
 808ab20:	bd38      	pop	{r3, r4, r5, pc}

0808ab22 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808ab22:	b538      	push	{r3, r4, r5, lr}
 808ab24:	4604      	mov	r4, r0
 808ab26:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808ab28:	f7fd fc72 	bl	8088410 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808ab2c:	28ff      	cmp	r0, #255	; 0xff
 808ab2e:	d010      	beq.n	808ab52 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 808ab30:	2806      	cmp	r0, #6
 808ab32:	d804      	bhi.n	808ab3e <digitalWrite+0x1c>
 808ab34:	234d      	movs	r3, #77	; 0x4d
 808ab36:	fa23 f000 	lsr.w	r0, r3, r0
 808ab3a:	07c3      	lsls	r3, r0, #31
 808ab3c:	d409      	bmi.n	808ab52 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808ab3e:	4620      	mov	r0, r4
 808ab40:	f7ff ff98 	bl	808aa74 <pinAvailable>
 808ab44:	b128      	cbz	r0, 808ab52 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808ab46:	4629      	mov	r1, r5
 808ab48:	4620      	mov	r0, r4
}
 808ab4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 808ab4e:	f7fd bc67 	b.w	8088420 <HAL_GPIO_Write>
}
 808ab52:	bd38      	pop	{r3, r4, r5, pc}

0808ab54 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808ab54:	b510      	push	{r4, lr}
 808ab56:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808ab58:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808ab5a:	bf9c      	itt	ls
 808ab5c:	340a      	addls	r4, #10
 808ab5e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808ab60:	4620      	mov	r0, r4
 808ab62:	f7ff ff87 	bl	808aa74 <pinAvailable>
 808ab66:	b150      	cbz	r0, 808ab7e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808ab68:	2103      	movs	r1, #3
 808ab6a:	4620      	mov	r0, r4
 808ab6c:	f7fd fc40 	bl	80883f0 <HAL_Validate_Pin_Function>
 808ab70:	2803      	cmp	r0, #3
 808ab72:	d104      	bne.n	808ab7e <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 808ab74:	4620      	mov	r0, r4
}
 808ab76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 808ab7a:	f7fd bc61 	b.w	8088440 <hal_adc_read>
}
 808ab7e:	2000      	movs	r0, #0
 808ab80:	bd10      	pop	{r4, pc}
	...

0808ab84 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 808ab84:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808ab86:	4c08      	ldr	r4, [pc, #32]	; (808aba8 <_Z21__fetch_global_EEPROMv+0x24>)
 808ab88:	7823      	ldrb	r3, [r4, #0]
 808ab8a:	f3bf 8f5b 	dmb	ish
 808ab8e:	07db      	lsls	r3, r3, #31
 808ab90:	d408      	bmi.n	808aba4 <_Z21__fetch_global_EEPROMv+0x20>
 808ab92:	4620      	mov	r0, r4
 808ab94:	f7f5 fa9f 	bl	80800d6 <__cxa_guard_acquire>
 808ab98:	b120      	cbz	r0, 808aba4 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808ab9a:	f7fd fc71 	bl	8088480 <HAL_EEPROM_Init>
 808ab9e:	4620      	mov	r0, r4
 808aba0:	f7f5 fa9e 	bl	80800e0 <__cxa_guard_release>
	return eeprom;
}
 808aba4:	4801      	ldr	r0, [pc, #4]	; (808abac <_Z21__fetch_global_EEPROMv+0x28>)
 808aba6:	bd10      	pop	{r4, pc}
 808aba8:	200011c8 	.word	0x200011c8
 808abac:	200011cc 	.word	0x200011cc

0808abb0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808abb0:	2300      	movs	r3, #0
 808abb2:	b513      	push	{r0, r1, r4, lr}
 808abb4:	4c07      	ldr	r4, [pc, #28]	; (808abd4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808abb6:	461a      	mov	r2, r3
 808abb8:	4619      	mov	r1, r3
 808abba:	4620      	mov	r0, r4
 808abbc:	9300      	str	r3, [sp, #0]
 808abbe:	f7ff fc7b 	bl	808a4b8 <_ZN9IPAddressC1Ehhhh>
 808abc2:	4620      	mov	r0, r4
 808abc4:	4a04      	ldr	r2, [pc, #16]	; (808abd8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808abc6:	4905      	ldr	r1, [pc, #20]	; (808abdc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808abc8:	b002      	add	sp, #8
 808abca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808abce:	f000 b87b 	b.w	808acc8 <__aeabi_atexit>
 808abd2:	bf00      	nop
 808abd4:	200011d0 	.word	0x200011d0
 808abd8:	200002b0 	.word	0x200002b0
 808abdc:	0808a431 	.word	0x0808a431

0808abe0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 808abe0:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 808abe2:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 808abe4:	2520      	movs	r5, #32
 808abe6:	8043      	strh	r3, [r0, #2]
 808abe8:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808abea:	4e08      	ldr	r6, [pc, #32]	; (808ac0c <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 808abec:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 808abee:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808abf0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 808abf2:	6085      	str	r5, [r0, #8]
 808abf4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808abf6:	4628      	mov	r0, r5
 808abf8:	f000 f86d 	bl	808acd6 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808abfc:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808abfe:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808ac00:	4628      	mov	r0, r5
 808ac02:	f000 f868 	bl	808acd6 <_ZnajRKSt9nothrow_t>
	};
 808ac06:	60e0      	str	r0, [r4, #12]

	return config;
}
 808ac08:	4620      	mov	r0, r4
 808ac0a:	bd70      	pop	{r4, r5, r6, pc}
 808ac0c:	08090250 	.word	0x08090250

0808ac10 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 808ac10:	b510      	push	{r4, lr}
 808ac12:	4604      	mov	r4, r0
	return defaultWireConfig();
 808ac14:	f7ff ffe4 	bl	808abe0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 808ac18:	4620      	mov	r0, r4
 808ac1a:	bd10      	pop	{r4, pc}

0808ac1c <_Z18acquireWire3Bufferv>:
 808ac1c:	b510      	push	{r4, lr}
 808ac1e:	4604      	mov	r4, r0
 808ac20:	f7ff ffde 	bl	808abe0 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 808ac24:	4620      	mov	r0, r4
 808ac26:	bd10      	pop	{r4, pc}

0808ac28 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 808ac28:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808ac2a:	4d0f      	ldr	r5, [pc, #60]	; (808ac68 <_Z19__fetch_global_Wirev+0x40>)
{
 808ac2c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808ac2e:	7829      	ldrb	r1, [r5, #0]
 808ac30:	f3bf 8f5b 	dmb	ish
 808ac34:	f011 0401 	ands.w	r4, r1, #1
 808ac38:	d113      	bne.n	808ac62 <_Z19__fetch_global_Wirev+0x3a>
 808ac3a:	4628      	mov	r0, r5
 808ac3c:	f7f5 fa4b 	bl	80800d6 <__cxa_guard_acquire>
 808ac40:	b178      	cbz	r0, 808ac62 <_Z19__fetch_global_Wirev+0x3a>
 808ac42:	a801      	add	r0, sp, #4
 808ac44:	f7ff ffe4 	bl	808ac10 <_Z17acquireWireBufferv>
 808ac48:	4621      	mov	r1, r4
 808ac4a:	aa01      	add	r2, sp, #4
 808ac4c:	4807      	ldr	r0, [pc, #28]	; (808ac6c <_Z19__fetch_global_Wirev+0x44>)
 808ac4e:	f7ff fe2f 	bl	808a8b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808ac52:	4628      	mov	r0, r5
 808ac54:	f7f5 fa44 	bl	80800e0 <__cxa_guard_release>
 808ac58:	4a05      	ldr	r2, [pc, #20]	; (808ac70 <_Z19__fetch_global_Wirev+0x48>)
 808ac5a:	4906      	ldr	r1, [pc, #24]	; (808ac74 <_Z19__fetch_global_Wirev+0x4c>)
 808ac5c:	4803      	ldr	r0, [pc, #12]	; (808ac6c <_Z19__fetch_global_Wirev+0x44>)
 808ac5e:	f000 f833 	bl	808acc8 <__aeabi_atexit>
	return wire;
}
 808ac62:	4802      	ldr	r0, [pc, #8]	; (808ac6c <_Z19__fetch_global_Wirev+0x44>)
 808ac64:	b007      	add	sp, #28
 808ac66:	bd30      	pop	{r4, r5, pc}
 808ac68:	200011d8 	.word	0x200011d8
 808ac6c:	200011e0 	.word	0x200011e0
 808ac70:	200002b0 	.word	0x200002b0
 808ac74:	0808a859 	.word	0x0808a859

0808ac78 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808ac78:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808ac7a:	4c0f      	ldr	r4, [pc, #60]	; (808acb8 <_Z20__fetch_global_Wire3v+0x40>)
{
 808ac7c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808ac7e:	7823      	ldrb	r3, [r4, #0]
 808ac80:	f3bf 8f5b 	dmb	ish
 808ac84:	07db      	lsls	r3, r3, #31
 808ac86:	d413      	bmi.n	808acb0 <_Z20__fetch_global_Wire3v+0x38>
 808ac88:	4620      	mov	r0, r4
 808ac8a:	f7f5 fa24 	bl	80800d6 <__cxa_guard_acquire>
 808ac8e:	b178      	cbz	r0, 808acb0 <_Z20__fetch_global_Wire3v+0x38>
 808ac90:	a801      	add	r0, sp, #4
 808ac92:	f7ff ffc3 	bl	808ac1c <_Z18acquireWire3Bufferv>
 808ac96:	2102      	movs	r1, #2
 808ac98:	aa01      	add	r2, sp, #4
 808ac9a:	4808      	ldr	r0, [pc, #32]	; (808acbc <_Z20__fetch_global_Wire3v+0x44>)
 808ac9c:	f7ff fe08 	bl	808a8b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808aca0:	4620      	mov	r0, r4
 808aca2:	f7f5 fa1d 	bl	80800e0 <__cxa_guard_release>
 808aca6:	4a06      	ldr	r2, [pc, #24]	; (808acc0 <_Z20__fetch_global_Wire3v+0x48>)
 808aca8:	4906      	ldr	r1, [pc, #24]	; (808acc4 <_Z20__fetch_global_Wire3v+0x4c>)
 808acaa:	4804      	ldr	r0, [pc, #16]	; (808acbc <_Z20__fetch_global_Wire3v+0x44>)
 808acac:	f000 f80c 	bl	808acc8 <__aeabi_atexit>
	return wire;
}
 808acb0:	4802      	ldr	r0, [pc, #8]	; (808acbc <_Z20__fetch_global_Wire3v+0x44>)
 808acb2:	b006      	add	sp, #24
 808acb4:	bd10      	pop	{r4, pc}
 808acb6:	bf00      	nop
 808acb8:	200011dc 	.word	0x200011dc
 808acbc:	200011f4 	.word	0x200011f4
 808acc0:	200002b0 	.word	0x200002b0
 808acc4:	0808a859 	.word	0x0808a859

0808acc8 <__aeabi_atexit>:
 808acc8:	460b      	mov	r3, r1
 808acca:	4601      	mov	r1, r0
 808accc:	4618      	mov	r0, r3
 808acce:	f001 b8f5 	b.w	808bebc <__cxa_atexit>

0808acd2 <_ZdlPvj>:
 808acd2:	f7f5 b9fe 	b.w	80800d2 <_ZdlPv>

0808acd6 <_ZnajRKSt9nothrow_t>:
 808acd6:	f7f5 b9fa 	b.w	80800ce <_Znaj>

0808acda <_ZSt25__throw_bad_function_callv>:
 808acda:	b508      	push	{r3, lr}
 808acdc:	f7fd fe94 	bl	8088a08 <abort>

0808ace0 <nan>:
 808ace0:	2000      	movs	r0, #0
 808ace2:	4901      	ldr	r1, [pc, #4]	; (808ace8 <nan+0x8>)
 808ace4:	4770      	bx	lr
 808ace6:	bf00      	nop
 808ace8:	7ff80000 	.word	0x7ff80000

0808acec <__aeabi_drsub>:
 808acec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808acf0:	e002      	b.n	808acf8 <__adddf3>
 808acf2:	bf00      	nop

0808acf4 <__aeabi_dsub>:
 808acf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808acf8 <__adddf3>:
 808acf8:	b530      	push	{r4, r5, lr}
 808acfa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808acfe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808ad02:	ea94 0f05 	teq	r4, r5
 808ad06:	bf08      	it	eq
 808ad08:	ea90 0f02 	teqeq	r0, r2
 808ad0c:	bf1f      	itttt	ne
 808ad0e:	ea54 0c00 	orrsne.w	ip, r4, r0
 808ad12:	ea55 0c02 	orrsne.w	ip, r5, r2
 808ad16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808ad1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808ad1e:	f000 80e2 	beq.w	808aee6 <__adddf3+0x1ee>
 808ad22:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808ad26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808ad2a:	bfb8      	it	lt
 808ad2c:	426d      	neglt	r5, r5
 808ad2e:	dd0c      	ble.n	808ad4a <__adddf3+0x52>
 808ad30:	442c      	add	r4, r5
 808ad32:	ea80 0202 	eor.w	r2, r0, r2
 808ad36:	ea81 0303 	eor.w	r3, r1, r3
 808ad3a:	ea82 0000 	eor.w	r0, r2, r0
 808ad3e:	ea83 0101 	eor.w	r1, r3, r1
 808ad42:	ea80 0202 	eor.w	r2, r0, r2
 808ad46:	ea81 0303 	eor.w	r3, r1, r3
 808ad4a:	2d36      	cmp	r5, #54	; 0x36
 808ad4c:	bf88      	it	hi
 808ad4e:	bd30      	pophi	{r4, r5, pc}
 808ad50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808ad54:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808ad58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808ad5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808ad60:	d002      	beq.n	808ad68 <__adddf3+0x70>
 808ad62:	4240      	negs	r0, r0
 808ad64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ad68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808ad6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808ad70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808ad74:	d002      	beq.n	808ad7c <__adddf3+0x84>
 808ad76:	4252      	negs	r2, r2
 808ad78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ad7c:	ea94 0f05 	teq	r4, r5
 808ad80:	f000 80a7 	beq.w	808aed2 <__adddf3+0x1da>
 808ad84:	f1a4 0401 	sub.w	r4, r4, #1
 808ad88:	f1d5 0e20 	rsbs	lr, r5, #32
 808ad8c:	db0d      	blt.n	808adaa <__adddf3+0xb2>
 808ad8e:	fa02 fc0e 	lsl.w	ip, r2, lr
 808ad92:	fa22 f205 	lsr.w	r2, r2, r5
 808ad96:	1880      	adds	r0, r0, r2
 808ad98:	f141 0100 	adc.w	r1, r1, #0
 808ad9c:	fa03 f20e 	lsl.w	r2, r3, lr
 808ada0:	1880      	adds	r0, r0, r2
 808ada2:	fa43 f305 	asr.w	r3, r3, r5
 808ada6:	4159      	adcs	r1, r3
 808ada8:	e00e      	b.n	808adc8 <__adddf3+0xd0>
 808adaa:	f1a5 0520 	sub.w	r5, r5, #32
 808adae:	f10e 0e20 	add.w	lr, lr, #32
 808adb2:	2a01      	cmp	r2, #1
 808adb4:	fa03 fc0e 	lsl.w	ip, r3, lr
 808adb8:	bf28      	it	cs
 808adba:	f04c 0c02 	orrcs.w	ip, ip, #2
 808adbe:	fa43 f305 	asr.w	r3, r3, r5
 808adc2:	18c0      	adds	r0, r0, r3
 808adc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808adc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808adcc:	d507      	bpl.n	808adde <__adddf3+0xe6>
 808adce:	f04f 0e00 	mov.w	lr, #0
 808add2:	f1dc 0c00 	rsbs	ip, ip, #0
 808add6:	eb7e 0000 	sbcs.w	r0, lr, r0
 808adda:	eb6e 0101 	sbc.w	r1, lr, r1
 808adde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808ade2:	d31b      	bcc.n	808ae1c <__adddf3+0x124>
 808ade4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808ade8:	d30c      	bcc.n	808ae04 <__adddf3+0x10c>
 808adea:	0849      	lsrs	r1, r1, #1
 808adec:	ea5f 0030 	movs.w	r0, r0, rrx
 808adf0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808adf4:	f104 0401 	add.w	r4, r4, #1
 808adf8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808adfc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808ae00:	f080 809a 	bcs.w	808af38 <__adddf3+0x240>
 808ae04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808ae08:	bf08      	it	eq
 808ae0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808ae0e:	f150 0000 	adcs.w	r0, r0, #0
 808ae12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808ae16:	ea41 0105 	orr.w	r1, r1, r5
 808ae1a:	bd30      	pop	{r4, r5, pc}
 808ae1c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808ae20:	4140      	adcs	r0, r0
 808ae22:	eb41 0101 	adc.w	r1, r1, r1
 808ae26:	3c01      	subs	r4, #1
 808ae28:	bf28      	it	cs
 808ae2a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 808ae2e:	d2e9      	bcs.n	808ae04 <__adddf3+0x10c>
 808ae30:	f091 0f00 	teq	r1, #0
 808ae34:	bf04      	itt	eq
 808ae36:	4601      	moveq	r1, r0
 808ae38:	2000      	moveq	r0, #0
 808ae3a:	fab1 f381 	clz	r3, r1
 808ae3e:	bf08      	it	eq
 808ae40:	3320      	addeq	r3, #32
 808ae42:	f1a3 030b 	sub.w	r3, r3, #11
 808ae46:	f1b3 0220 	subs.w	r2, r3, #32
 808ae4a:	da0c      	bge.n	808ae66 <__adddf3+0x16e>
 808ae4c:	320c      	adds	r2, #12
 808ae4e:	dd08      	ble.n	808ae62 <__adddf3+0x16a>
 808ae50:	f102 0c14 	add.w	ip, r2, #20
 808ae54:	f1c2 020c 	rsb	r2, r2, #12
 808ae58:	fa01 f00c 	lsl.w	r0, r1, ip
 808ae5c:	fa21 f102 	lsr.w	r1, r1, r2
 808ae60:	e00c      	b.n	808ae7c <__adddf3+0x184>
 808ae62:	f102 0214 	add.w	r2, r2, #20
 808ae66:	bfd8      	it	le
 808ae68:	f1c2 0c20 	rsble	ip, r2, #32
 808ae6c:	fa01 f102 	lsl.w	r1, r1, r2
 808ae70:	fa20 fc0c 	lsr.w	ip, r0, ip
 808ae74:	bfdc      	itt	le
 808ae76:	ea41 010c 	orrle.w	r1, r1, ip
 808ae7a:	4090      	lslle	r0, r2
 808ae7c:	1ae4      	subs	r4, r4, r3
 808ae7e:	bfa2      	ittt	ge
 808ae80:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808ae84:	4329      	orrge	r1, r5
 808ae86:	bd30      	popge	{r4, r5, pc}
 808ae88:	ea6f 0404 	mvn.w	r4, r4
 808ae8c:	3c1f      	subs	r4, #31
 808ae8e:	da1c      	bge.n	808aeca <__adddf3+0x1d2>
 808ae90:	340c      	adds	r4, #12
 808ae92:	dc0e      	bgt.n	808aeb2 <__adddf3+0x1ba>
 808ae94:	f104 0414 	add.w	r4, r4, #20
 808ae98:	f1c4 0220 	rsb	r2, r4, #32
 808ae9c:	fa20 f004 	lsr.w	r0, r0, r4
 808aea0:	fa01 f302 	lsl.w	r3, r1, r2
 808aea4:	ea40 0003 	orr.w	r0, r0, r3
 808aea8:	fa21 f304 	lsr.w	r3, r1, r4
 808aeac:	ea45 0103 	orr.w	r1, r5, r3
 808aeb0:	bd30      	pop	{r4, r5, pc}
 808aeb2:	f1c4 040c 	rsb	r4, r4, #12
 808aeb6:	f1c4 0220 	rsb	r2, r4, #32
 808aeba:	fa20 f002 	lsr.w	r0, r0, r2
 808aebe:	fa01 f304 	lsl.w	r3, r1, r4
 808aec2:	ea40 0003 	orr.w	r0, r0, r3
 808aec6:	4629      	mov	r1, r5
 808aec8:	bd30      	pop	{r4, r5, pc}
 808aeca:	fa21 f004 	lsr.w	r0, r1, r4
 808aece:	4629      	mov	r1, r5
 808aed0:	bd30      	pop	{r4, r5, pc}
 808aed2:	f094 0f00 	teq	r4, #0
 808aed6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808aeda:	bf06      	itte	eq
 808aedc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808aee0:	3401      	addeq	r4, #1
 808aee2:	3d01      	subne	r5, #1
 808aee4:	e74e      	b.n	808ad84 <__adddf3+0x8c>
 808aee6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808aeea:	bf18      	it	ne
 808aeec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808aef0:	d029      	beq.n	808af46 <__adddf3+0x24e>
 808aef2:	ea94 0f05 	teq	r4, r5
 808aef6:	bf08      	it	eq
 808aef8:	ea90 0f02 	teqeq	r0, r2
 808aefc:	d005      	beq.n	808af0a <__adddf3+0x212>
 808aefe:	ea54 0c00 	orrs.w	ip, r4, r0
 808af02:	bf04      	itt	eq
 808af04:	4619      	moveq	r1, r3
 808af06:	4610      	moveq	r0, r2
 808af08:	bd30      	pop	{r4, r5, pc}
 808af0a:	ea91 0f03 	teq	r1, r3
 808af0e:	bf1e      	ittt	ne
 808af10:	2100      	movne	r1, #0
 808af12:	2000      	movne	r0, #0
 808af14:	bd30      	popne	{r4, r5, pc}
 808af16:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808af1a:	d105      	bne.n	808af28 <__adddf3+0x230>
 808af1c:	0040      	lsls	r0, r0, #1
 808af1e:	4149      	adcs	r1, r1
 808af20:	bf28      	it	cs
 808af22:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808af26:	bd30      	pop	{r4, r5, pc}
 808af28:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808af2c:	bf3c      	itt	cc
 808af2e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808af32:	bd30      	popcc	{r4, r5, pc}
 808af34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808af38:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808af3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808af40:	f04f 0000 	mov.w	r0, #0
 808af44:	bd30      	pop	{r4, r5, pc}
 808af46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808af4a:	bf1a      	itte	ne
 808af4c:	4619      	movne	r1, r3
 808af4e:	4610      	movne	r0, r2
 808af50:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808af54:	bf1c      	itt	ne
 808af56:	460b      	movne	r3, r1
 808af58:	4602      	movne	r2, r0
 808af5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808af5e:	bf06      	itte	eq
 808af60:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808af64:	ea91 0f03 	teqeq	r1, r3
 808af68:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808af6c:	bd30      	pop	{r4, r5, pc}
 808af6e:	bf00      	nop

0808af70 <__aeabi_ui2d>:
 808af70:	f090 0f00 	teq	r0, #0
 808af74:	bf04      	itt	eq
 808af76:	2100      	moveq	r1, #0
 808af78:	4770      	bxeq	lr
 808af7a:	b530      	push	{r4, r5, lr}
 808af7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808af80:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808af84:	f04f 0500 	mov.w	r5, #0
 808af88:	f04f 0100 	mov.w	r1, #0
 808af8c:	e750      	b.n	808ae30 <__adddf3+0x138>
 808af8e:	bf00      	nop

0808af90 <__aeabi_i2d>:
 808af90:	f090 0f00 	teq	r0, #0
 808af94:	bf04      	itt	eq
 808af96:	2100      	moveq	r1, #0
 808af98:	4770      	bxeq	lr
 808af9a:	b530      	push	{r4, r5, lr}
 808af9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808afa0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808afa4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808afa8:	bf48      	it	mi
 808afaa:	4240      	negmi	r0, r0
 808afac:	f04f 0100 	mov.w	r1, #0
 808afb0:	e73e      	b.n	808ae30 <__adddf3+0x138>
 808afb2:	bf00      	nop

0808afb4 <__aeabi_f2d>:
 808afb4:	0042      	lsls	r2, r0, #1
 808afb6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808afba:	ea4f 0131 	mov.w	r1, r1, rrx
 808afbe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808afc2:	bf1f      	itttt	ne
 808afc4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808afc8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808afcc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808afd0:	4770      	bxne	lr
 808afd2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808afd6:	bf08      	it	eq
 808afd8:	4770      	bxeq	lr
 808afda:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 808afde:	bf04      	itt	eq
 808afe0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 808afe4:	4770      	bxeq	lr
 808afe6:	b530      	push	{r4, r5, lr}
 808afe8:	f44f 7460 	mov.w	r4, #896	; 0x380
 808afec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808aff0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808aff4:	e71c      	b.n	808ae30 <__adddf3+0x138>
 808aff6:	bf00      	nop

0808aff8 <__aeabi_ul2d>:
 808aff8:	ea50 0201 	orrs.w	r2, r0, r1
 808affc:	bf08      	it	eq
 808affe:	4770      	bxeq	lr
 808b000:	b530      	push	{r4, r5, lr}
 808b002:	f04f 0500 	mov.w	r5, #0
 808b006:	e00a      	b.n	808b01e <__aeabi_l2d+0x16>

0808b008 <__aeabi_l2d>:
 808b008:	ea50 0201 	orrs.w	r2, r0, r1
 808b00c:	bf08      	it	eq
 808b00e:	4770      	bxeq	lr
 808b010:	b530      	push	{r4, r5, lr}
 808b012:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808b016:	d502      	bpl.n	808b01e <__aeabi_l2d+0x16>
 808b018:	4240      	negs	r0, r0
 808b01a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808b01e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808b022:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808b026:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808b02a:	f43f aed8 	beq.w	808adde <__adddf3+0xe6>
 808b02e:	f04f 0203 	mov.w	r2, #3
 808b032:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808b036:	bf18      	it	ne
 808b038:	3203      	addne	r2, #3
 808b03a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808b03e:	bf18      	it	ne
 808b040:	3203      	addne	r2, #3
 808b042:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808b046:	f1c2 0320 	rsb	r3, r2, #32
 808b04a:	fa00 fc03 	lsl.w	ip, r0, r3
 808b04e:	fa20 f002 	lsr.w	r0, r0, r2
 808b052:	fa01 fe03 	lsl.w	lr, r1, r3
 808b056:	ea40 000e 	orr.w	r0, r0, lr
 808b05a:	fa21 f102 	lsr.w	r1, r1, r2
 808b05e:	4414      	add	r4, r2
 808b060:	e6bd      	b.n	808adde <__adddf3+0xe6>
 808b062:	bf00      	nop

0808b064 <__aeabi_dmul>:
 808b064:	b570      	push	{r4, r5, r6, lr}
 808b066:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808b06a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808b06e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808b072:	bf1d      	ittte	ne
 808b074:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808b078:	ea94 0f0c 	teqne	r4, ip
 808b07c:	ea95 0f0c 	teqne	r5, ip
 808b080:	f000 f8de 	bleq	808b240 <__aeabi_dmul+0x1dc>
 808b084:	442c      	add	r4, r5
 808b086:	ea81 0603 	eor.w	r6, r1, r3
 808b08a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808b08e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808b092:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808b096:	bf18      	it	ne
 808b098:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808b09c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808b0a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808b0a4:	d038      	beq.n	808b118 <__aeabi_dmul+0xb4>
 808b0a6:	fba0 ce02 	umull	ip, lr, r0, r2
 808b0aa:	f04f 0500 	mov.w	r5, #0
 808b0ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 808b0b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808b0b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 808b0ba:	f04f 0600 	mov.w	r6, #0
 808b0be:	fbe1 5603 	umlal	r5, r6, r1, r3
 808b0c2:	f09c 0f00 	teq	ip, #0
 808b0c6:	bf18      	it	ne
 808b0c8:	f04e 0e01 	orrne.w	lr, lr, #1
 808b0cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808b0d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808b0d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808b0d8:	d204      	bcs.n	808b0e4 <__aeabi_dmul+0x80>
 808b0da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808b0de:	416d      	adcs	r5, r5
 808b0e0:	eb46 0606 	adc.w	r6, r6, r6
 808b0e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808b0e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808b0ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808b0f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808b0f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808b0f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808b0fc:	bf88      	it	hi
 808b0fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808b102:	d81e      	bhi.n	808b142 <__aeabi_dmul+0xde>
 808b104:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808b108:	bf08      	it	eq
 808b10a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808b10e:	f150 0000 	adcs.w	r0, r0, #0
 808b112:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808b116:	bd70      	pop	{r4, r5, r6, pc}
 808b118:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808b11c:	ea46 0101 	orr.w	r1, r6, r1
 808b120:	ea40 0002 	orr.w	r0, r0, r2
 808b124:	ea81 0103 	eor.w	r1, r1, r3
 808b128:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808b12c:	bfc2      	ittt	gt
 808b12e:	ebd4 050c 	rsbsgt	r5, r4, ip
 808b132:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808b136:	bd70      	popgt	{r4, r5, r6, pc}
 808b138:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808b13c:	f04f 0e00 	mov.w	lr, #0
 808b140:	3c01      	subs	r4, #1
 808b142:	f300 80ab 	bgt.w	808b29c <__aeabi_dmul+0x238>
 808b146:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808b14a:	bfde      	ittt	le
 808b14c:	2000      	movle	r0, #0
 808b14e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808b152:	bd70      	pople	{r4, r5, r6, pc}
 808b154:	f1c4 0400 	rsb	r4, r4, #0
 808b158:	3c20      	subs	r4, #32
 808b15a:	da35      	bge.n	808b1c8 <__aeabi_dmul+0x164>
 808b15c:	340c      	adds	r4, #12
 808b15e:	dc1b      	bgt.n	808b198 <__aeabi_dmul+0x134>
 808b160:	f104 0414 	add.w	r4, r4, #20
 808b164:	f1c4 0520 	rsb	r5, r4, #32
 808b168:	fa00 f305 	lsl.w	r3, r0, r5
 808b16c:	fa20 f004 	lsr.w	r0, r0, r4
 808b170:	fa01 f205 	lsl.w	r2, r1, r5
 808b174:	ea40 0002 	orr.w	r0, r0, r2
 808b178:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808b17c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808b180:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808b184:	fa21 f604 	lsr.w	r6, r1, r4
 808b188:	eb42 0106 	adc.w	r1, r2, r6
 808b18c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808b190:	bf08      	it	eq
 808b192:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808b196:	bd70      	pop	{r4, r5, r6, pc}
 808b198:	f1c4 040c 	rsb	r4, r4, #12
 808b19c:	f1c4 0520 	rsb	r5, r4, #32
 808b1a0:	fa00 f304 	lsl.w	r3, r0, r4
 808b1a4:	fa20 f005 	lsr.w	r0, r0, r5
 808b1a8:	fa01 f204 	lsl.w	r2, r1, r4
 808b1ac:	ea40 0002 	orr.w	r0, r0, r2
 808b1b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808b1b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808b1b8:	f141 0100 	adc.w	r1, r1, #0
 808b1bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808b1c0:	bf08      	it	eq
 808b1c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808b1c6:	bd70      	pop	{r4, r5, r6, pc}
 808b1c8:	f1c4 0520 	rsb	r5, r4, #32
 808b1cc:	fa00 f205 	lsl.w	r2, r0, r5
 808b1d0:	ea4e 0e02 	orr.w	lr, lr, r2
 808b1d4:	fa20 f304 	lsr.w	r3, r0, r4
 808b1d8:	fa01 f205 	lsl.w	r2, r1, r5
 808b1dc:	ea43 0302 	orr.w	r3, r3, r2
 808b1e0:	fa21 f004 	lsr.w	r0, r1, r4
 808b1e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808b1e8:	fa21 f204 	lsr.w	r2, r1, r4
 808b1ec:	ea20 0002 	bic.w	r0, r0, r2
 808b1f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808b1f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808b1f8:	bf08      	it	eq
 808b1fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808b1fe:	bd70      	pop	{r4, r5, r6, pc}
 808b200:	f094 0f00 	teq	r4, #0
 808b204:	d10f      	bne.n	808b226 <__aeabi_dmul+0x1c2>
 808b206:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808b20a:	0040      	lsls	r0, r0, #1
 808b20c:	eb41 0101 	adc.w	r1, r1, r1
 808b210:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808b214:	bf08      	it	eq
 808b216:	3c01      	subeq	r4, #1
 808b218:	d0f7      	beq.n	808b20a <__aeabi_dmul+0x1a6>
 808b21a:	ea41 0106 	orr.w	r1, r1, r6
 808b21e:	f095 0f00 	teq	r5, #0
 808b222:	bf18      	it	ne
 808b224:	4770      	bxne	lr
 808b226:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808b22a:	0052      	lsls	r2, r2, #1
 808b22c:	eb43 0303 	adc.w	r3, r3, r3
 808b230:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808b234:	bf08      	it	eq
 808b236:	3d01      	subeq	r5, #1
 808b238:	d0f7      	beq.n	808b22a <__aeabi_dmul+0x1c6>
 808b23a:	ea43 0306 	orr.w	r3, r3, r6
 808b23e:	4770      	bx	lr
 808b240:	ea94 0f0c 	teq	r4, ip
 808b244:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808b248:	bf18      	it	ne
 808b24a:	ea95 0f0c 	teqne	r5, ip
 808b24e:	d00c      	beq.n	808b26a <__aeabi_dmul+0x206>
 808b250:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808b254:	bf18      	it	ne
 808b256:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808b25a:	d1d1      	bne.n	808b200 <__aeabi_dmul+0x19c>
 808b25c:	ea81 0103 	eor.w	r1, r1, r3
 808b260:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808b264:	f04f 0000 	mov.w	r0, #0
 808b268:	bd70      	pop	{r4, r5, r6, pc}
 808b26a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808b26e:	bf06      	itte	eq
 808b270:	4610      	moveq	r0, r2
 808b272:	4619      	moveq	r1, r3
 808b274:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808b278:	d019      	beq.n	808b2ae <__aeabi_dmul+0x24a>
 808b27a:	ea94 0f0c 	teq	r4, ip
 808b27e:	d102      	bne.n	808b286 <__aeabi_dmul+0x222>
 808b280:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808b284:	d113      	bne.n	808b2ae <__aeabi_dmul+0x24a>
 808b286:	ea95 0f0c 	teq	r5, ip
 808b28a:	d105      	bne.n	808b298 <__aeabi_dmul+0x234>
 808b28c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808b290:	bf1c      	itt	ne
 808b292:	4610      	movne	r0, r2
 808b294:	4619      	movne	r1, r3
 808b296:	d10a      	bne.n	808b2ae <__aeabi_dmul+0x24a>
 808b298:	ea81 0103 	eor.w	r1, r1, r3
 808b29c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808b2a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808b2a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808b2a8:	f04f 0000 	mov.w	r0, #0
 808b2ac:	bd70      	pop	{r4, r5, r6, pc}
 808b2ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808b2b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808b2b6:	bd70      	pop	{r4, r5, r6, pc}

0808b2b8 <__aeabi_ddiv>:
 808b2b8:	b570      	push	{r4, r5, r6, lr}
 808b2ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808b2be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808b2c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808b2c6:	bf1d      	ittte	ne
 808b2c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808b2cc:	ea94 0f0c 	teqne	r4, ip
 808b2d0:	ea95 0f0c 	teqne	r5, ip
 808b2d4:	f000 f8a7 	bleq	808b426 <__aeabi_ddiv+0x16e>
 808b2d8:	eba4 0405 	sub.w	r4, r4, r5
 808b2dc:	ea81 0e03 	eor.w	lr, r1, r3
 808b2e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808b2e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808b2e8:	f000 8088 	beq.w	808b3fc <__aeabi_ddiv+0x144>
 808b2ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808b2f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808b2f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808b2f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808b2fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808b300:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808b304:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808b308:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808b30c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808b310:	429d      	cmp	r5, r3
 808b312:	bf08      	it	eq
 808b314:	4296      	cmpeq	r6, r2
 808b316:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808b31a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808b31e:	d202      	bcs.n	808b326 <__aeabi_ddiv+0x6e>
 808b320:	085b      	lsrs	r3, r3, #1
 808b322:	ea4f 0232 	mov.w	r2, r2, rrx
 808b326:	1ab6      	subs	r6, r6, r2
 808b328:	eb65 0503 	sbc.w	r5, r5, r3
 808b32c:	085b      	lsrs	r3, r3, #1
 808b32e:	ea4f 0232 	mov.w	r2, r2, rrx
 808b332:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808b336:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808b33a:	ebb6 0e02 	subs.w	lr, r6, r2
 808b33e:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b342:	bf22      	ittt	cs
 808b344:	1ab6      	subcs	r6, r6, r2
 808b346:	4675      	movcs	r5, lr
 808b348:	ea40 000c 	orrcs.w	r0, r0, ip
 808b34c:	085b      	lsrs	r3, r3, #1
 808b34e:	ea4f 0232 	mov.w	r2, r2, rrx
 808b352:	ebb6 0e02 	subs.w	lr, r6, r2
 808b356:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b35a:	bf22      	ittt	cs
 808b35c:	1ab6      	subcs	r6, r6, r2
 808b35e:	4675      	movcs	r5, lr
 808b360:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808b364:	085b      	lsrs	r3, r3, #1
 808b366:	ea4f 0232 	mov.w	r2, r2, rrx
 808b36a:	ebb6 0e02 	subs.w	lr, r6, r2
 808b36e:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b372:	bf22      	ittt	cs
 808b374:	1ab6      	subcs	r6, r6, r2
 808b376:	4675      	movcs	r5, lr
 808b378:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808b37c:	085b      	lsrs	r3, r3, #1
 808b37e:	ea4f 0232 	mov.w	r2, r2, rrx
 808b382:	ebb6 0e02 	subs.w	lr, r6, r2
 808b386:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b38a:	bf22      	ittt	cs
 808b38c:	1ab6      	subcs	r6, r6, r2
 808b38e:	4675      	movcs	r5, lr
 808b390:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808b394:	ea55 0e06 	orrs.w	lr, r5, r6
 808b398:	d018      	beq.n	808b3cc <__aeabi_ddiv+0x114>
 808b39a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808b39e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808b3a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808b3a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808b3aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808b3ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808b3b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808b3b6:	d1c0      	bne.n	808b33a <__aeabi_ddiv+0x82>
 808b3b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808b3bc:	d10b      	bne.n	808b3d6 <__aeabi_ddiv+0x11e>
 808b3be:	ea41 0100 	orr.w	r1, r1, r0
 808b3c2:	f04f 0000 	mov.w	r0, #0
 808b3c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808b3ca:	e7b6      	b.n	808b33a <__aeabi_ddiv+0x82>
 808b3cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808b3d0:	bf04      	itt	eq
 808b3d2:	4301      	orreq	r1, r0
 808b3d4:	2000      	moveq	r0, #0
 808b3d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808b3da:	bf88      	it	hi
 808b3dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808b3e0:	f63f aeaf 	bhi.w	808b142 <__aeabi_dmul+0xde>
 808b3e4:	ebb5 0c03 	subs.w	ip, r5, r3
 808b3e8:	bf04      	itt	eq
 808b3ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 808b3ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808b3f2:	f150 0000 	adcs.w	r0, r0, #0
 808b3f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808b3fa:	bd70      	pop	{r4, r5, r6, pc}
 808b3fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808b400:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808b404:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808b408:	bfc2      	ittt	gt
 808b40a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808b40e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808b412:	bd70      	popgt	{r4, r5, r6, pc}
 808b414:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808b418:	f04f 0e00 	mov.w	lr, #0
 808b41c:	3c01      	subs	r4, #1
 808b41e:	e690      	b.n	808b142 <__aeabi_dmul+0xde>
 808b420:	ea45 0e06 	orr.w	lr, r5, r6
 808b424:	e68d      	b.n	808b142 <__aeabi_dmul+0xde>
 808b426:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808b42a:	ea94 0f0c 	teq	r4, ip
 808b42e:	bf08      	it	eq
 808b430:	ea95 0f0c 	teqeq	r5, ip
 808b434:	f43f af3b 	beq.w	808b2ae <__aeabi_dmul+0x24a>
 808b438:	ea94 0f0c 	teq	r4, ip
 808b43c:	d10a      	bne.n	808b454 <__aeabi_ddiv+0x19c>
 808b43e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808b442:	f47f af34 	bne.w	808b2ae <__aeabi_dmul+0x24a>
 808b446:	ea95 0f0c 	teq	r5, ip
 808b44a:	f47f af25 	bne.w	808b298 <__aeabi_dmul+0x234>
 808b44e:	4610      	mov	r0, r2
 808b450:	4619      	mov	r1, r3
 808b452:	e72c      	b.n	808b2ae <__aeabi_dmul+0x24a>
 808b454:	ea95 0f0c 	teq	r5, ip
 808b458:	d106      	bne.n	808b468 <__aeabi_ddiv+0x1b0>
 808b45a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808b45e:	f43f aefd 	beq.w	808b25c <__aeabi_dmul+0x1f8>
 808b462:	4610      	mov	r0, r2
 808b464:	4619      	mov	r1, r3
 808b466:	e722      	b.n	808b2ae <__aeabi_dmul+0x24a>
 808b468:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808b46c:	bf18      	it	ne
 808b46e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808b472:	f47f aec5 	bne.w	808b200 <__aeabi_dmul+0x19c>
 808b476:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808b47a:	f47f af0d 	bne.w	808b298 <__aeabi_dmul+0x234>
 808b47e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808b482:	f47f aeeb 	bne.w	808b25c <__aeabi_dmul+0x1f8>
 808b486:	e712      	b.n	808b2ae <__aeabi_dmul+0x24a>

0808b488 <__gedf2>:
 808b488:	f04f 3cff 	mov.w	ip, #4294967295
 808b48c:	e006      	b.n	808b49c <__cmpdf2+0x4>
 808b48e:	bf00      	nop

0808b490 <__ledf2>:
 808b490:	f04f 0c01 	mov.w	ip, #1
 808b494:	e002      	b.n	808b49c <__cmpdf2+0x4>
 808b496:	bf00      	nop

0808b498 <__cmpdf2>:
 808b498:	f04f 0c01 	mov.w	ip, #1
 808b49c:	f84d cd04 	str.w	ip, [sp, #-4]!
 808b4a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808b4a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b4a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808b4ac:	bf18      	it	ne
 808b4ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808b4b2:	d01b      	beq.n	808b4ec <__cmpdf2+0x54>
 808b4b4:	b001      	add	sp, #4
 808b4b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808b4ba:	bf0c      	ite	eq
 808b4bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808b4c0:	ea91 0f03 	teqne	r1, r3
 808b4c4:	bf02      	ittt	eq
 808b4c6:	ea90 0f02 	teqeq	r0, r2
 808b4ca:	2000      	moveq	r0, #0
 808b4cc:	4770      	bxeq	lr
 808b4ce:	f110 0f00 	cmn.w	r0, #0
 808b4d2:	ea91 0f03 	teq	r1, r3
 808b4d6:	bf58      	it	pl
 808b4d8:	4299      	cmppl	r1, r3
 808b4da:	bf08      	it	eq
 808b4dc:	4290      	cmpeq	r0, r2
 808b4de:	bf2c      	ite	cs
 808b4e0:	17d8      	asrcs	r0, r3, #31
 808b4e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808b4e6:	f040 0001 	orr.w	r0, r0, #1
 808b4ea:	4770      	bx	lr
 808b4ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808b4f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b4f4:	d102      	bne.n	808b4fc <__cmpdf2+0x64>
 808b4f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808b4fa:	d107      	bne.n	808b50c <__cmpdf2+0x74>
 808b4fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808b500:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b504:	d1d6      	bne.n	808b4b4 <__cmpdf2+0x1c>
 808b506:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808b50a:	d0d3      	beq.n	808b4b4 <__cmpdf2+0x1c>
 808b50c:	f85d 0b04 	ldr.w	r0, [sp], #4
 808b510:	4770      	bx	lr
 808b512:	bf00      	nop

0808b514 <__aeabi_cdrcmple>:
 808b514:	4684      	mov	ip, r0
 808b516:	4610      	mov	r0, r2
 808b518:	4662      	mov	r2, ip
 808b51a:	468c      	mov	ip, r1
 808b51c:	4619      	mov	r1, r3
 808b51e:	4663      	mov	r3, ip
 808b520:	e000      	b.n	808b524 <__aeabi_cdcmpeq>
 808b522:	bf00      	nop

0808b524 <__aeabi_cdcmpeq>:
 808b524:	b501      	push	{r0, lr}
 808b526:	f7ff ffb7 	bl	808b498 <__cmpdf2>
 808b52a:	2800      	cmp	r0, #0
 808b52c:	bf48      	it	mi
 808b52e:	f110 0f00 	cmnmi.w	r0, #0
 808b532:	bd01      	pop	{r0, pc}

0808b534 <__aeabi_dcmpeq>:
 808b534:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b538:	f7ff fff4 	bl	808b524 <__aeabi_cdcmpeq>
 808b53c:	bf0c      	ite	eq
 808b53e:	2001      	moveq	r0, #1
 808b540:	2000      	movne	r0, #0
 808b542:	f85d fb08 	ldr.w	pc, [sp], #8
 808b546:	bf00      	nop

0808b548 <__aeabi_dcmplt>:
 808b548:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b54c:	f7ff ffea 	bl	808b524 <__aeabi_cdcmpeq>
 808b550:	bf34      	ite	cc
 808b552:	2001      	movcc	r0, #1
 808b554:	2000      	movcs	r0, #0
 808b556:	f85d fb08 	ldr.w	pc, [sp], #8
 808b55a:	bf00      	nop

0808b55c <__aeabi_dcmple>:
 808b55c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b560:	f7ff ffe0 	bl	808b524 <__aeabi_cdcmpeq>
 808b564:	bf94      	ite	ls
 808b566:	2001      	movls	r0, #1
 808b568:	2000      	movhi	r0, #0
 808b56a:	f85d fb08 	ldr.w	pc, [sp], #8
 808b56e:	bf00      	nop

0808b570 <__aeabi_dcmpge>:
 808b570:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b574:	f7ff ffce 	bl	808b514 <__aeabi_cdrcmple>
 808b578:	bf94      	ite	ls
 808b57a:	2001      	movls	r0, #1
 808b57c:	2000      	movhi	r0, #0
 808b57e:	f85d fb08 	ldr.w	pc, [sp], #8
 808b582:	bf00      	nop

0808b584 <__aeabi_dcmpgt>:
 808b584:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b588:	f7ff ffc4 	bl	808b514 <__aeabi_cdrcmple>
 808b58c:	bf34      	ite	cc
 808b58e:	2001      	movcc	r0, #1
 808b590:	2000      	movcs	r0, #0
 808b592:	f85d fb08 	ldr.w	pc, [sp], #8
 808b596:	bf00      	nop

0808b598 <__aeabi_dcmpun>:
 808b598:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808b59c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b5a0:	d102      	bne.n	808b5a8 <__aeabi_dcmpun+0x10>
 808b5a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808b5a6:	d10a      	bne.n	808b5be <__aeabi_dcmpun+0x26>
 808b5a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808b5ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b5b0:	d102      	bne.n	808b5b8 <__aeabi_dcmpun+0x20>
 808b5b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808b5b6:	d102      	bne.n	808b5be <__aeabi_dcmpun+0x26>
 808b5b8:	f04f 0000 	mov.w	r0, #0
 808b5bc:	4770      	bx	lr
 808b5be:	f04f 0001 	mov.w	r0, #1
 808b5c2:	4770      	bx	lr

0808b5c4 <__aeabi_d2iz>:
 808b5c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808b5c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808b5cc:	d215      	bcs.n	808b5fa <__aeabi_d2iz+0x36>
 808b5ce:	d511      	bpl.n	808b5f4 <__aeabi_d2iz+0x30>
 808b5d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808b5d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808b5d8:	d912      	bls.n	808b600 <__aeabi_d2iz+0x3c>
 808b5da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b5de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808b5e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808b5e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808b5ea:	fa23 f002 	lsr.w	r0, r3, r2
 808b5ee:	bf18      	it	ne
 808b5f0:	4240      	negne	r0, r0
 808b5f2:	4770      	bx	lr
 808b5f4:	f04f 0000 	mov.w	r0, #0
 808b5f8:	4770      	bx	lr
 808b5fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808b5fe:	d105      	bne.n	808b60c <__aeabi_d2iz+0x48>
 808b600:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808b604:	bf08      	it	eq
 808b606:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808b60a:	4770      	bx	lr
 808b60c:	f04f 0000 	mov.w	r0, #0
 808b610:	4770      	bx	lr
 808b612:	bf00      	nop

0808b614 <__aeabi_d2uiz>:
 808b614:	004a      	lsls	r2, r1, #1
 808b616:	d211      	bcs.n	808b63c <__aeabi_d2uiz+0x28>
 808b618:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808b61c:	d211      	bcs.n	808b642 <__aeabi_d2uiz+0x2e>
 808b61e:	d50d      	bpl.n	808b63c <__aeabi_d2uiz+0x28>
 808b620:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808b624:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808b628:	d40e      	bmi.n	808b648 <__aeabi_d2uiz+0x34>
 808b62a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b62e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808b632:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808b636:	fa23 f002 	lsr.w	r0, r3, r2
 808b63a:	4770      	bx	lr
 808b63c:	f04f 0000 	mov.w	r0, #0
 808b640:	4770      	bx	lr
 808b642:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808b646:	d102      	bne.n	808b64e <__aeabi_d2uiz+0x3a>
 808b648:	f04f 30ff 	mov.w	r0, #4294967295
 808b64c:	4770      	bx	lr
 808b64e:	f04f 0000 	mov.w	r0, #0
 808b652:	4770      	bx	lr

0808b654 <__aeabi_d2f>:
 808b654:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808b658:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808b65c:	bf24      	itt	cs
 808b65e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808b662:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808b666:	d90d      	bls.n	808b684 <__aeabi_d2f+0x30>
 808b668:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808b66c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808b670:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808b674:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808b678:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808b67c:	bf08      	it	eq
 808b67e:	f020 0001 	biceq.w	r0, r0, #1
 808b682:	4770      	bx	lr
 808b684:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808b688:	d121      	bne.n	808b6ce <__aeabi_d2f+0x7a>
 808b68a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808b68e:	bfbc      	itt	lt
 808b690:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808b694:	4770      	bxlt	lr
 808b696:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808b69a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808b69e:	f1c2 0218 	rsb	r2, r2, #24
 808b6a2:	f1c2 0c20 	rsb	ip, r2, #32
 808b6a6:	fa10 f30c 	lsls.w	r3, r0, ip
 808b6aa:	fa20 f002 	lsr.w	r0, r0, r2
 808b6ae:	bf18      	it	ne
 808b6b0:	f040 0001 	orrne.w	r0, r0, #1
 808b6b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b6b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808b6bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 808b6c0:	ea40 000c 	orr.w	r0, r0, ip
 808b6c4:	fa23 f302 	lsr.w	r3, r3, r2
 808b6c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808b6cc:	e7cc      	b.n	808b668 <__aeabi_d2f+0x14>
 808b6ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808b6d2:	d107      	bne.n	808b6e4 <__aeabi_d2f+0x90>
 808b6d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808b6d8:	bf1e      	ittt	ne
 808b6da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808b6de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808b6e2:	4770      	bxne	lr
 808b6e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808b6e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808b6ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b6f0:	4770      	bx	lr
 808b6f2:	bf00      	nop

0808b6f4 <__aeabi_frsub>:
 808b6f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808b6f8:	e002      	b.n	808b700 <__addsf3>
 808b6fa:	bf00      	nop

0808b6fc <__aeabi_fsub>:
 808b6fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808b700 <__addsf3>:
 808b700:	0042      	lsls	r2, r0, #1
 808b702:	bf1f      	itttt	ne
 808b704:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808b708:	ea92 0f03 	teqne	r2, r3
 808b70c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808b710:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808b714:	d06a      	beq.n	808b7ec <__addsf3+0xec>
 808b716:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808b71a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808b71e:	bfc1      	itttt	gt
 808b720:	18d2      	addgt	r2, r2, r3
 808b722:	4041      	eorgt	r1, r0
 808b724:	4048      	eorgt	r0, r1
 808b726:	4041      	eorgt	r1, r0
 808b728:	bfb8      	it	lt
 808b72a:	425b      	neglt	r3, r3
 808b72c:	2b19      	cmp	r3, #25
 808b72e:	bf88      	it	hi
 808b730:	4770      	bxhi	lr
 808b732:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808b736:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b73a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808b73e:	bf18      	it	ne
 808b740:	4240      	negne	r0, r0
 808b742:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808b746:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808b74a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808b74e:	bf18      	it	ne
 808b750:	4249      	negne	r1, r1
 808b752:	ea92 0f03 	teq	r2, r3
 808b756:	d03f      	beq.n	808b7d8 <__addsf3+0xd8>
 808b758:	f1a2 0201 	sub.w	r2, r2, #1
 808b75c:	fa41 fc03 	asr.w	ip, r1, r3
 808b760:	eb10 000c 	adds.w	r0, r0, ip
 808b764:	f1c3 0320 	rsb	r3, r3, #32
 808b768:	fa01 f103 	lsl.w	r1, r1, r3
 808b76c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808b770:	d502      	bpl.n	808b778 <__addsf3+0x78>
 808b772:	4249      	negs	r1, r1
 808b774:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808b778:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808b77c:	d313      	bcc.n	808b7a6 <__addsf3+0xa6>
 808b77e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808b782:	d306      	bcc.n	808b792 <__addsf3+0x92>
 808b784:	0840      	lsrs	r0, r0, #1
 808b786:	ea4f 0131 	mov.w	r1, r1, rrx
 808b78a:	f102 0201 	add.w	r2, r2, #1
 808b78e:	2afe      	cmp	r2, #254	; 0xfe
 808b790:	d251      	bcs.n	808b836 <__addsf3+0x136>
 808b792:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808b796:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808b79a:	bf08      	it	eq
 808b79c:	f020 0001 	biceq.w	r0, r0, #1
 808b7a0:	ea40 0003 	orr.w	r0, r0, r3
 808b7a4:	4770      	bx	lr
 808b7a6:	0049      	lsls	r1, r1, #1
 808b7a8:	eb40 0000 	adc.w	r0, r0, r0
 808b7ac:	3a01      	subs	r2, #1
 808b7ae:	bf28      	it	cs
 808b7b0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 808b7b4:	d2ed      	bcs.n	808b792 <__addsf3+0x92>
 808b7b6:	fab0 fc80 	clz	ip, r0
 808b7ba:	f1ac 0c08 	sub.w	ip, ip, #8
 808b7be:	ebb2 020c 	subs.w	r2, r2, ip
 808b7c2:	fa00 f00c 	lsl.w	r0, r0, ip
 808b7c6:	bfaa      	itet	ge
 808b7c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808b7cc:	4252      	neglt	r2, r2
 808b7ce:	4318      	orrge	r0, r3
 808b7d0:	bfbc      	itt	lt
 808b7d2:	40d0      	lsrlt	r0, r2
 808b7d4:	4318      	orrlt	r0, r3
 808b7d6:	4770      	bx	lr
 808b7d8:	f092 0f00 	teq	r2, #0
 808b7dc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808b7e0:	bf06      	itte	eq
 808b7e2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808b7e6:	3201      	addeq	r2, #1
 808b7e8:	3b01      	subne	r3, #1
 808b7ea:	e7b5      	b.n	808b758 <__addsf3+0x58>
 808b7ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808b7f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808b7f4:	bf18      	it	ne
 808b7f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808b7fa:	d021      	beq.n	808b840 <__addsf3+0x140>
 808b7fc:	ea92 0f03 	teq	r2, r3
 808b800:	d004      	beq.n	808b80c <__addsf3+0x10c>
 808b802:	f092 0f00 	teq	r2, #0
 808b806:	bf08      	it	eq
 808b808:	4608      	moveq	r0, r1
 808b80a:	4770      	bx	lr
 808b80c:	ea90 0f01 	teq	r0, r1
 808b810:	bf1c      	itt	ne
 808b812:	2000      	movne	r0, #0
 808b814:	4770      	bxne	lr
 808b816:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808b81a:	d104      	bne.n	808b826 <__addsf3+0x126>
 808b81c:	0040      	lsls	r0, r0, #1
 808b81e:	bf28      	it	cs
 808b820:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808b824:	4770      	bx	lr
 808b826:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808b82a:	bf3c      	itt	cc
 808b82c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808b830:	4770      	bxcc	lr
 808b832:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808b836:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808b83a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b83e:	4770      	bx	lr
 808b840:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808b844:	bf16      	itet	ne
 808b846:	4608      	movne	r0, r1
 808b848:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808b84c:	4601      	movne	r1, r0
 808b84e:	0242      	lsls	r2, r0, #9
 808b850:	bf06      	itte	eq
 808b852:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808b856:	ea90 0f01 	teqeq	r0, r1
 808b85a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808b85e:	4770      	bx	lr

0808b860 <__aeabi_ui2f>:
 808b860:	f04f 0300 	mov.w	r3, #0
 808b864:	e004      	b.n	808b870 <__aeabi_i2f+0x8>
 808b866:	bf00      	nop

0808b868 <__aeabi_i2f>:
 808b868:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808b86c:	bf48      	it	mi
 808b86e:	4240      	negmi	r0, r0
 808b870:	ea5f 0c00 	movs.w	ip, r0
 808b874:	bf08      	it	eq
 808b876:	4770      	bxeq	lr
 808b878:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808b87c:	4601      	mov	r1, r0
 808b87e:	f04f 0000 	mov.w	r0, #0
 808b882:	e01c      	b.n	808b8be <__aeabi_l2f+0x2a>

0808b884 <__aeabi_ul2f>:
 808b884:	ea50 0201 	orrs.w	r2, r0, r1
 808b888:	bf08      	it	eq
 808b88a:	4770      	bxeq	lr
 808b88c:	f04f 0300 	mov.w	r3, #0
 808b890:	e00a      	b.n	808b8a8 <__aeabi_l2f+0x14>
 808b892:	bf00      	nop

0808b894 <__aeabi_l2f>:
 808b894:	ea50 0201 	orrs.w	r2, r0, r1
 808b898:	bf08      	it	eq
 808b89a:	4770      	bxeq	lr
 808b89c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808b8a0:	d502      	bpl.n	808b8a8 <__aeabi_l2f+0x14>
 808b8a2:	4240      	negs	r0, r0
 808b8a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808b8a8:	ea5f 0c01 	movs.w	ip, r1
 808b8ac:	bf02      	ittt	eq
 808b8ae:	4684      	moveq	ip, r0
 808b8b0:	4601      	moveq	r1, r0
 808b8b2:	2000      	moveq	r0, #0
 808b8b4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808b8b8:	bf08      	it	eq
 808b8ba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808b8be:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808b8c2:	fabc f28c 	clz	r2, ip
 808b8c6:	3a08      	subs	r2, #8
 808b8c8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808b8cc:	db10      	blt.n	808b8f0 <__aeabi_l2f+0x5c>
 808b8ce:	fa01 fc02 	lsl.w	ip, r1, r2
 808b8d2:	4463      	add	r3, ip
 808b8d4:	fa00 fc02 	lsl.w	ip, r0, r2
 808b8d8:	f1c2 0220 	rsb	r2, r2, #32
 808b8dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808b8e0:	fa20 f202 	lsr.w	r2, r0, r2
 808b8e4:	eb43 0002 	adc.w	r0, r3, r2
 808b8e8:	bf08      	it	eq
 808b8ea:	f020 0001 	biceq.w	r0, r0, #1
 808b8ee:	4770      	bx	lr
 808b8f0:	f102 0220 	add.w	r2, r2, #32
 808b8f4:	fa01 fc02 	lsl.w	ip, r1, r2
 808b8f8:	f1c2 0220 	rsb	r2, r2, #32
 808b8fc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808b900:	fa21 f202 	lsr.w	r2, r1, r2
 808b904:	eb43 0002 	adc.w	r0, r3, r2
 808b908:	bf08      	it	eq
 808b90a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808b90e:	4770      	bx	lr

0808b910 <__aeabi_fmul>:
 808b910:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808b914:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808b918:	bf1e      	ittt	ne
 808b91a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808b91e:	ea92 0f0c 	teqne	r2, ip
 808b922:	ea93 0f0c 	teqne	r3, ip
 808b926:	d06f      	beq.n	808ba08 <__aeabi_fmul+0xf8>
 808b928:	441a      	add	r2, r3
 808b92a:	ea80 0c01 	eor.w	ip, r0, r1
 808b92e:	0240      	lsls	r0, r0, #9
 808b930:	bf18      	it	ne
 808b932:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808b936:	d01e      	beq.n	808b976 <__aeabi_fmul+0x66>
 808b938:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808b93c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808b940:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808b944:	fba0 3101 	umull	r3, r1, r0, r1
 808b948:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808b94c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808b950:	bf3e      	ittt	cc
 808b952:	0049      	lslcc	r1, r1, #1
 808b954:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808b958:	005b      	lslcc	r3, r3, #1
 808b95a:	ea40 0001 	orr.w	r0, r0, r1
 808b95e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808b962:	2afd      	cmp	r2, #253	; 0xfd
 808b964:	d81d      	bhi.n	808b9a2 <__aeabi_fmul+0x92>
 808b966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808b96a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808b96e:	bf08      	it	eq
 808b970:	f020 0001 	biceq.w	r0, r0, #1
 808b974:	4770      	bx	lr
 808b976:	f090 0f00 	teq	r0, #0
 808b97a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808b97e:	bf08      	it	eq
 808b980:	0249      	lsleq	r1, r1, #9
 808b982:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808b986:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808b98a:	3a7f      	subs	r2, #127	; 0x7f
 808b98c:	bfc2      	ittt	gt
 808b98e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808b992:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808b996:	4770      	bxgt	lr
 808b998:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b99c:	f04f 0300 	mov.w	r3, #0
 808b9a0:	3a01      	subs	r2, #1
 808b9a2:	dc5d      	bgt.n	808ba60 <__aeabi_fmul+0x150>
 808b9a4:	f112 0f19 	cmn.w	r2, #25
 808b9a8:	bfdc      	itt	le
 808b9aa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808b9ae:	4770      	bxle	lr
 808b9b0:	f1c2 0200 	rsb	r2, r2, #0
 808b9b4:	0041      	lsls	r1, r0, #1
 808b9b6:	fa21 f102 	lsr.w	r1, r1, r2
 808b9ba:	f1c2 0220 	rsb	r2, r2, #32
 808b9be:	fa00 fc02 	lsl.w	ip, r0, r2
 808b9c2:	ea5f 0031 	movs.w	r0, r1, rrx
 808b9c6:	f140 0000 	adc.w	r0, r0, #0
 808b9ca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808b9ce:	bf08      	it	eq
 808b9d0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808b9d4:	4770      	bx	lr
 808b9d6:	f092 0f00 	teq	r2, #0
 808b9da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808b9de:	bf02      	ittt	eq
 808b9e0:	0040      	lsleq	r0, r0, #1
 808b9e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808b9e6:	3a01      	subeq	r2, #1
 808b9e8:	d0f9      	beq.n	808b9de <__aeabi_fmul+0xce>
 808b9ea:	ea40 000c 	orr.w	r0, r0, ip
 808b9ee:	f093 0f00 	teq	r3, #0
 808b9f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808b9f6:	bf02      	ittt	eq
 808b9f8:	0049      	lsleq	r1, r1, #1
 808b9fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808b9fe:	3b01      	subeq	r3, #1
 808ba00:	d0f9      	beq.n	808b9f6 <__aeabi_fmul+0xe6>
 808ba02:	ea41 010c 	orr.w	r1, r1, ip
 808ba06:	e78f      	b.n	808b928 <__aeabi_fmul+0x18>
 808ba08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808ba0c:	ea92 0f0c 	teq	r2, ip
 808ba10:	bf18      	it	ne
 808ba12:	ea93 0f0c 	teqne	r3, ip
 808ba16:	d00a      	beq.n	808ba2e <__aeabi_fmul+0x11e>
 808ba18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808ba1c:	bf18      	it	ne
 808ba1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808ba22:	d1d8      	bne.n	808b9d6 <__aeabi_fmul+0xc6>
 808ba24:	ea80 0001 	eor.w	r0, r0, r1
 808ba28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808ba2c:	4770      	bx	lr
 808ba2e:	f090 0f00 	teq	r0, #0
 808ba32:	bf17      	itett	ne
 808ba34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808ba38:	4608      	moveq	r0, r1
 808ba3a:	f091 0f00 	teqne	r1, #0
 808ba3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808ba42:	d014      	beq.n	808ba6e <__aeabi_fmul+0x15e>
 808ba44:	ea92 0f0c 	teq	r2, ip
 808ba48:	d101      	bne.n	808ba4e <__aeabi_fmul+0x13e>
 808ba4a:	0242      	lsls	r2, r0, #9
 808ba4c:	d10f      	bne.n	808ba6e <__aeabi_fmul+0x15e>
 808ba4e:	ea93 0f0c 	teq	r3, ip
 808ba52:	d103      	bne.n	808ba5c <__aeabi_fmul+0x14c>
 808ba54:	024b      	lsls	r3, r1, #9
 808ba56:	bf18      	it	ne
 808ba58:	4608      	movne	r0, r1
 808ba5a:	d108      	bne.n	808ba6e <__aeabi_fmul+0x15e>
 808ba5c:	ea80 0001 	eor.w	r0, r0, r1
 808ba60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808ba64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808ba68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808ba6c:	4770      	bx	lr
 808ba6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808ba72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808ba76:	4770      	bx	lr

0808ba78 <__aeabi_fdiv>:
 808ba78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808ba7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808ba80:	bf1e      	ittt	ne
 808ba82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808ba86:	ea92 0f0c 	teqne	r2, ip
 808ba8a:	ea93 0f0c 	teqne	r3, ip
 808ba8e:	d069      	beq.n	808bb64 <__aeabi_fdiv+0xec>
 808ba90:	eba2 0203 	sub.w	r2, r2, r3
 808ba94:	ea80 0c01 	eor.w	ip, r0, r1
 808ba98:	0249      	lsls	r1, r1, #9
 808ba9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808ba9e:	d037      	beq.n	808bb10 <__aeabi_fdiv+0x98>
 808baa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808baa4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808baa8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808baac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808bab0:	428b      	cmp	r3, r1
 808bab2:	bf38      	it	cc
 808bab4:	005b      	lslcc	r3, r3, #1
 808bab6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808baba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808babe:	428b      	cmp	r3, r1
 808bac0:	bf24      	itt	cs
 808bac2:	1a5b      	subcs	r3, r3, r1
 808bac4:	ea40 000c 	orrcs.w	r0, r0, ip
 808bac8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808bacc:	bf24      	itt	cs
 808bace:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808bad2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808bad6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808bada:	bf24      	itt	cs
 808badc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808bae0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808bae4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808bae8:	bf24      	itt	cs
 808baea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808baee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808baf2:	011b      	lsls	r3, r3, #4
 808baf4:	bf18      	it	ne
 808baf6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808bafa:	d1e0      	bne.n	808babe <__aeabi_fdiv+0x46>
 808bafc:	2afd      	cmp	r2, #253	; 0xfd
 808bafe:	f63f af50 	bhi.w	808b9a2 <__aeabi_fmul+0x92>
 808bb02:	428b      	cmp	r3, r1
 808bb04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808bb08:	bf08      	it	eq
 808bb0a:	f020 0001 	biceq.w	r0, r0, #1
 808bb0e:	4770      	bx	lr
 808bb10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808bb14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808bb18:	327f      	adds	r2, #127	; 0x7f
 808bb1a:	bfc2      	ittt	gt
 808bb1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808bb20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808bb24:	4770      	bxgt	lr
 808bb26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808bb2a:	f04f 0300 	mov.w	r3, #0
 808bb2e:	3a01      	subs	r2, #1
 808bb30:	e737      	b.n	808b9a2 <__aeabi_fmul+0x92>
 808bb32:	f092 0f00 	teq	r2, #0
 808bb36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808bb3a:	bf02      	ittt	eq
 808bb3c:	0040      	lsleq	r0, r0, #1
 808bb3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808bb42:	3a01      	subeq	r2, #1
 808bb44:	d0f9      	beq.n	808bb3a <__aeabi_fdiv+0xc2>
 808bb46:	ea40 000c 	orr.w	r0, r0, ip
 808bb4a:	f093 0f00 	teq	r3, #0
 808bb4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808bb52:	bf02      	ittt	eq
 808bb54:	0049      	lsleq	r1, r1, #1
 808bb56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808bb5a:	3b01      	subeq	r3, #1
 808bb5c:	d0f9      	beq.n	808bb52 <__aeabi_fdiv+0xda>
 808bb5e:	ea41 010c 	orr.w	r1, r1, ip
 808bb62:	e795      	b.n	808ba90 <__aeabi_fdiv+0x18>
 808bb64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808bb68:	ea92 0f0c 	teq	r2, ip
 808bb6c:	d108      	bne.n	808bb80 <__aeabi_fdiv+0x108>
 808bb6e:	0242      	lsls	r2, r0, #9
 808bb70:	f47f af7d 	bne.w	808ba6e <__aeabi_fmul+0x15e>
 808bb74:	ea93 0f0c 	teq	r3, ip
 808bb78:	f47f af70 	bne.w	808ba5c <__aeabi_fmul+0x14c>
 808bb7c:	4608      	mov	r0, r1
 808bb7e:	e776      	b.n	808ba6e <__aeabi_fmul+0x15e>
 808bb80:	ea93 0f0c 	teq	r3, ip
 808bb84:	d104      	bne.n	808bb90 <__aeabi_fdiv+0x118>
 808bb86:	024b      	lsls	r3, r1, #9
 808bb88:	f43f af4c 	beq.w	808ba24 <__aeabi_fmul+0x114>
 808bb8c:	4608      	mov	r0, r1
 808bb8e:	e76e      	b.n	808ba6e <__aeabi_fmul+0x15e>
 808bb90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808bb94:	bf18      	it	ne
 808bb96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808bb9a:	d1ca      	bne.n	808bb32 <__aeabi_fdiv+0xba>
 808bb9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808bba0:	f47f af5c 	bne.w	808ba5c <__aeabi_fmul+0x14c>
 808bba4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808bba8:	f47f af3c 	bne.w	808ba24 <__aeabi_fmul+0x114>
 808bbac:	e75f      	b.n	808ba6e <__aeabi_fmul+0x15e>
 808bbae:	bf00      	nop

0808bbb0 <__gesf2>:
 808bbb0:	f04f 3cff 	mov.w	ip, #4294967295
 808bbb4:	e006      	b.n	808bbc4 <__cmpsf2+0x4>
 808bbb6:	bf00      	nop

0808bbb8 <__lesf2>:
 808bbb8:	f04f 0c01 	mov.w	ip, #1
 808bbbc:	e002      	b.n	808bbc4 <__cmpsf2+0x4>
 808bbbe:	bf00      	nop

0808bbc0 <__cmpsf2>:
 808bbc0:	f04f 0c01 	mov.w	ip, #1
 808bbc4:	f84d cd04 	str.w	ip, [sp, #-4]!
 808bbc8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808bbcc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808bbd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808bbd4:	bf18      	it	ne
 808bbd6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808bbda:	d011      	beq.n	808bc00 <__cmpsf2+0x40>
 808bbdc:	b001      	add	sp, #4
 808bbde:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808bbe2:	bf18      	it	ne
 808bbe4:	ea90 0f01 	teqne	r0, r1
 808bbe8:	bf58      	it	pl
 808bbea:	ebb2 0003 	subspl.w	r0, r2, r3
 808bbee:	bf88      	it	hi
 808bbf0:	17c8      	asrhi	r0, r1, #31
 808bbf2:	bf38      	it	cc
 808bbf4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808bbf8:	bf18      	it	ne
 808bbfa:	f040 0001 	orrne.w	r0, r0, #1
 808bbfe:	4770      	bx	lr
 808bc00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808bc04:	d102      	bne.n	808bc0c <__cmpsf2+0x4c>
 808bc06:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808bc0a:	d105      	bne.n	808bc18 <__cmpsf2+0x58>
 808bc0c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808bc10:	d1e4      	bne.n	808bbdc <__cmpsf2+0x1c>
 808bc12:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808bc16:	d0e1      	beq.n	808bbdc <__cmpsf2+0x1c>
 808bc18:	f85d 0b04 	ldr.w	r0, [sp], #4
 808bc1c:	4770      	bx	lr
 808bc1e:	bf00      	nop

0808bc20 <__aeabi_cfrcmple>:
 808bc20:	4684      	mov	ip, r0
 808bc22:	4608      	mov	r0, r1
 808bc24:	4661      	mov	r1, ip
 808bc26:	e7ff      	b.n	808bc28 <__aeabi_cfcmpeq>

0808bc28 <__aeabi_cfcmpeq>:
 808bc28:	b50f      	push	{r0, r1, r2, r3, lr}
 808bc2a:	f7ff ffc9 	bl	808bbc0 <__cmpsf2>
 808bc2e:	2800      	cmp	r0, #0
 808bc30:	bf48      	it	mi
 808bc32:	f110 0f00 	cmnmi.w	r0, #0
 808bc36:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808bc38 <__aeabi_fcmpeq>:
 808bc38:	f84d ed08 	str.w	lr, [sp, #-8]!
 808bc3c:	f7ff fff4 	bl	808bc28 <__aeabi_cfcmpeq>
 808bc40:	bf0c      	ite	eq
 808bc42:	2001      	moveq	r0, #1
 808bc44:	2000      	movne	r0, #0
 808bc46:	f85d fb08 	ldr.w	pc, [sp], #8
 808bc4a:	bf00      	nop

0808bc4c <__aeabi_fcmplt>:
 808bc4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808bc50:	f7ff ffea 	bl	808bc28 <__aeabi_cfcmpeq>
 808bc54:	bf34      	ite	cc
 808bc56:	2001      	movcc	r0, #1
 808bc58:	2000      	movcs	r0, #0
 808bc5a:	f85d fb08 	ldr.w	pc, [sp], #8
 808bc5e:	bf00      	nop

0808bc60 <__aeabi_fcmple>:
 808bc60:	f84d ed08 	str.w	lr, [sp, #-8]!
 808bc64:	f7ff ffe0 	bl	808bc28 <__aeabi_cfcmpeq>
 808bc68:	bf94      	ite	ls
 808bc6a:	2001      	movls	r0, #1
 808bc6c:	2000      	movhi	r0, #0
 808bc6e:	f85d fb08 	ldr.w	pc, [sp], #8
 808bc72:	bf00      	nop

0808bc74 <__aeabi_fcmpge>:
 808bc74:	f84d ed08 	str.w	lr, [sp, #-8]!
 808bc78:	f7ff ffd2 	bl	808bc20 <__aeabi_cfrcmple>
 808bc7c:	bf94      	ite	ls
 808bc7e:	2001      	movls	r0, #1
 808bc80:	2000      	movhi	r0, #0
 808bc82:	f85d fb08 	ldr.w	pc, [sp], #8
 808bc86:	bf00      	nop

0808bc88 <__aeabi_fcmpgt>:
 808bc88:	f84d ed08 	str.w	lr, [sp, #-8]!
 808bc8c:	f7ff ffc8 	bl	808bc20 <__aeabi_cfrcmple>
 808bc90:	bf34      	ite	cc
 808bc92:	2001      	movcc	r0, #1
 808bc94:	2000      	movcs	r0, #0
 808bc96:	f85d fb08 	ldr.w	pc, [sp], #8
 808bc9a:	bf00      	nop

0808bc9c <__aeabi_f2iz>:
 808bc9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808bca0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808bca4:	d30f      	bcc.n	808bcc6 <__aeabi_f2iz+0x2a>
 808bca6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808bcaa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808bcae:	d90d      	bls.n	808bccc <__aeabi_f2iz+0x30>
 808bcb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808bcb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808bcb8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808bcbc:	fa23 f002 	lsr.w	r0, r3, r2
 808bcc0:	bf18      	it	ne
 808bcc2:	4240      	negne	r0, r0
 808bcc4:	4770      	bx	lr
 808bcc6:	f04f 0000 	mov.w	r0, #0
 808bcca:	4770      	bx	lr
 808bccc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808bcd0:	d101      	bne.n	808bcd6 <__aeabi_f2iz+0x3a>
 808bcd2:	0242      	lsls	r2, r0, #9
 808bcd4:	d105      	bne.n	808bce2 <__aeabi_f2iz+0x46>
 808bcd6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808bcda:	bf08      	it	eq
 808bcdc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808bce0:	4770      	bx	lr
 808bce2:	f04f 0000 	mov.w	r0, #0
 808bce6:	4770      	bx	lr

0808bce8 <__aeabi_ldivmod>:
 808bce8:	b97b      	cbnz	r3, 808bd0a <__aeabi_ldivmod+0x22>
 808bcea:	b972      	cbnz	r2, 808bd0a <__aeabi_ldivmod+0x22>
 808bcec:	2900      	cmp	r1, #0
 808bcee:	bfbe      	ittt	lt
 808bcf0:	2000      	movlt	r0, #0
 808bcf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808bcf6:	e006      	blt.n	808bd06 <__aeabi_ldivmod+0x1e>
 808bcf8:	bf08      	it	eq
 808bcfa:	2800      	cmpeq	r0, #0
 808bcfc:	bf1c      	itt	ne
 808bcfe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808bd02:	f04f 30ff 	movne.w	r0, #4294967295
 808bd06:	f000 b8a9 	b.w	808be5c <__aeabi_idiv0>
 808bd0a:	f1ad 0c08 	sub.w	ip, sp, #8
 808bd0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808bd12:	2900      	cmp	r1, #0
 808bd14:	db09      	blt.n	808bd2a <__aeabi_ldivmod+0x42>
 808bd16:	2b00      	cmp	r3, #0
 808bd18:	db1a      	blt.n	808bd50 <__aeabi_ldivmod+0x68>
 808bd1a:	f7f4 f981 	bl	8080020 <__udivmoddi4>
 808bd1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 808bd22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808bd26:	b004      	add	sp, #16
 808bd28:	4770      	bx	lr
 808bd2a:	4240      	negs	r0, r0
 808bd2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808bd30:	2b00      	cmp	r3, #0
 808bd32:	db1b      	blt.n	808bd6c <__aeabi_ldivmod+0x84>
 808bd34:	f7f4 f974 	bl	8080020 <__udivmoddi4>
 808bd38:	f8dd e004 	ldr.w	lr, [sp, #4]
 808bd3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808bd40:	b004      	add	sp, #16
 808bd42:	4240      	negs	r0, r0
 808bd44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808bd48:	4252      	negs	r2, r2
 808bd4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808bd4e:	4770      	bx	lr
 808bd50:	4252      	negs	r2, r2
 808bd52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808bd56:	f7f4 f963 	bl	8080020 <__udivmoddi4>
 808bd5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 808bd5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808bd62:	b004      	add	sp, #16
 808bd64:	4240      	negs	r0, r0
 808bd66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808bd6a:	4770      	bx	lr
 808bd6c:	4252      	negs	r2, r2
 808bd6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808bd72:	f7f4 f955 	bl	8080020 <__udivmoddi4>
 808bd76:	f8dd e004 	ldr.w	lr, [sp, #4]
 808bd7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808bd7e:	b004      	add	sp, #16
 808bd80:	4252      	negs	r2, r2
 808bd82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808bd86:	4770      	bx	lr

0808bd88 <__aeabi_uldivmod>:
 808bd88:	b953      	cbnz	r3, 808bda0 <__aeabi_uldivmod+0x18>
 808bd8a:	b94a      	cbnz	r2, 808bda0 <__aeabi_uldivmod+0x18>
 808bd8c:	2900      	cmp	r1, #0
 808bd8e:	bf08      	it	eq
 808bd90:	2800      	cmpeq	r0, #0
 808bd92:	bf1c      	itt	ne
 808bd94:	f04f 31ff 	movne.w	r1, #4294967295
 808bd98:	f04f 30ff 	movne.w	r0, #4294967295
 808bd9c:	f000 b85e 	b.w	808be5c <__aeabi_idiv0>
 808bda0:	f1ad 0c08 	sub.w	ip, sp, #8
 808bda4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808bda8:	f7f4 f93a 	bl	8080020 <__udivmoddi4>
 808bdac:	f8dd e004 	ldr.w	lr, [sp, #4]
 808bdb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808bdb4:	b004      	add	sp, #16
 808bdb6:	4770      	bx	lr

0808bdb8 <__aeabi_f2lz>:
 808bdb8:	b510      	push	{r4, lr}
 808bdba:	2100      	movs	r1, #0
 808bdbc:	4604      	mov	r4, r0
 808bdbe:	f7ff ff45 	bl	808bc4c <__aeabi_fcmplt>
 808bdc2:	b920      	cbnz	r0, 808bdce <__aeabi_f2lz+0x16>
 808bdc4:	4620      	mov	r0, r4
 808bdc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808bdca:	f000 b809 	b.w	808bde0 <__aeabi_f2ulz>
 808bdce:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 808bdd2:	f000 f805 	bl	808bde0 <__aeabi_f2ulz>
 808bdd6:	4240      	negs	r0, r0
 808bdd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808bddc:	bd10      	pop	{r4, pc}
 808bdde:	bf00      	nop

0808bde0 <__aeabi_f2ulz>:
 808bde0:	b5d0      	push	{r4, r6, r7, lr}
 808bde2:	f7ff f8e7 	bl	808afb4 <__aeabi_f2d>
 808bde6:	2200      	movs	r2, #0
 808bde8:	4b0b      	ldr	r3, [pc, #44]	; (808be18 <__aeabi_f2ulz+0x38>)
 808bdea:	4606      	mov	r6, r0
 808bdec:	460f      	mov	r7, r1
 808bdee:	f7ff f939 	bl	808b064 <__aeabi_dmul>
 808bdf2:	f7ff fc0f 	bl	808b614 <__aeabi_d2uiz>
 808bdf6:	4604      	mov	r4, r0
 808bdf8:	f7ff f8ba 	bl	808af70 <__aeabi_ui2d>
 808bdfc:	2200      	movs	r2, #0
 808bdfe:	4b07      	ldr	r3, [pc, #28]	; (808be1c <__aeabi_f2ulz+0x3c>)
 808be00:	f7ff f930 	bl	808b064 <__aeabi_dmul>
 808be04:	4602      	mov	r2, r0
 808be06:	460b      	mov	r3, r1
 808be08:	4630      	mov	r0, r6
 808be0a:	4639      	mov	r1, r7
 808be0c:	f7fe ff72 	bl	808acf4 <__aeabi_dsub>
 808be10:	f7ff fc00 	bl	808b614 <__aeabi_d2uiz>
 808be14:	4621      	mov	r1, r4
 808be16:	bdd0      	pop	{r4, r6, r7, pc}
 808be18:	3df00000 	.word	0x3df00000
 808be1c:	41f00000 	.word	0x41f00000

0808be20 <__aeabi_d2ulz>:
 808be20:	b5d0      	push	{r4, r6, r7, lr}
 808be22:	2200      	movs	r2, #0
 808be24:	4b0b      	ldr	r3, [pc, #44]	; (808be54 <__aeabi_d2ulz+0x34>)
 808be26:	4606      	mov	r6, r0
 808be28:	460f      	mov	r7, r1
 808be2a:	f7ff f91b 	bl	808b064 <__aeabi_dmul>
 808be2e:	f7ff fbf1 	bl	808b614 <__aeabi_d2uiz>
 808be32:	4604      	mov	r4, r0
 808be34:	f7ff f89c 	bl	808af70 <__aeabi_ui2d>
 808be38:	2200      	movs	r2, #0
 808be3a:	4b07      	ldr	r3, [pc, #28]	; (808be58 <__aeabi_d2ulz+0x38>)
 808be3c:	f7ff f912 	bl	808b064 <__aeabi_dmul>
 808be40:	4602      	mov	r2, r0
 808be42:	460b      	mov	r3, r1
 808be44:	4630      	mov	r0, r6
 808be46:	4639      	mov	r1, r7
 808be48:	f7fe ff54 	bl	808acf4 <__aeabi_dsub>
 808be4c:	f7ff fbe2 	bl	808b614 <__aeabi_d2uiz>
 808be50:	4621      	mov	r1, r4
 808be52:	bdd0      	pop	{r4, r6, r7, pc}
 808be54:	3df00000 	.word	0x3df00000
 808be58:	41f00000 	.word	0x41f00000

0808be5c <__aeabi_idiv0>:
 808be5c:	4770      	bx	lr
 808be5e:	bf00      	nop

0808be60 <asctime_r>:
 808be60:	b510      	push	{r4, lr}
 808be62:	460c      	mov	r4, r1
 808be64:	6941      	ldr	r1, [r0, #20]
 808be66:	b086      	sub	sp, #24
 808be68:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808be6c:	6903      	ldr	r3, [r0, #16]
 808be6e:	6982      	ldr	r2, [r0, #24]
 808be70:	9104      	str	r1, [sp, #16]
 808be72:	6801      	ldr	r1, [r0, #0]
 808be74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808be78:	9103      	str	r1, [sp, #12]
 808be7a:	6841      	ldr	r1, [r0, #4]
 808be7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808be80:	9102      	str	r1, [sp, #8]
 808be82:	6881      	ldr	r1, [r0, #8]
 808be84:	9101      	str	r1, [sp, #4]
 808be86:	68c1      	ldr	r1, [r0, #12]
 808be88:	4620      	mov	r0, r4
 808be8a:	9100      	str	r1, [sp, #0]
 808be8c:	4904      	ldr	r1, [pc, #16]	; (808bea0 <asctime_r+0x40>)
 808be8e:	440b      	add	r3, r1
 808be90:	4904      	ldr	r1, [pc, #16]	; (808bea4 <asctime_r+0x44>)
 808be92:	440a      	add	r2, r1
 808be94:	4904      	ldr	r1, [pc, #16]	; (808bea8 <asctime_r+0x48>)
 808be96:	f7fc fd9f 	bl	80889d8 <siprintf>
 808be9a:	4620      	mov	r0, r4
 808be9c:	b006      	add	sp, #24
 808be9e:	bd10      	pop	{r4, pc}
 808bea0:	08090286 	.word	0x08090286
 808bea4:	08090271 	.word	0x08090271
 808bea8:	08090251 	.word	0x08090251

0808beac <atof>:
 808beac:	2100      	movs	r1, #0
 808beae:	f000 bf03 	b.w	808ccb8 <strtod>

0808beb2 <atol>:
 808beb2:	220a      	movs	r2, #10
 808beb4:	2100      	movs	r1, #0
 808beb6:	f000 bf85 	b.w	808cdc4 <strtol>
	...

0808bebc <__cxa_atexit>:
 808bebc:	b510      	push	{r4, lr}
 808bebe:	4604      	mov	r4, r0
 808bec0:	4804      	ldr	r0, [pc, #16]	; (808bed4 <__cxa_atexit+0x18>)
 808bec2:	4613      	mov	r3, r2
 808bec4:	b120      	cbz	r0, 808bed0 <__cxa_atexit+0x14>
 808bec6:	460a      	mov	r2, r1
 808bec8:	2002      	movs	r0, #2
 808beca:	4621      	mov	r1, r4
 808becc:	f3af 8000 	nop.w
 808bed0:	bd10      	pop	{r4, pc}
 808bed2:	bf00      	nop
 808bed4:	00000000 	.word	0x00000000

0808bed8 <ldiv>:
 808bed8:	b510      	push	{r4, lr}
 808beda:	fb91 f4f2 	sdiv	r4, r1, r2
 808bede:	2900      	cmp	r1, #0
 808bee0:	fb02 1314 	mls	r3, r2, r4, r1
 808bee4:	db06      	blt.n	808bef4 <ldiv+0x1c>
 808bee6:	2b00      	cmp	r3, #0
 808bee8:	da01      	bge.n	808beee <ldiv+0x16>
 808beea:	3401      	adds	r4, #1
 808beec:	1a9b      	subs	r3, r3, r2
 808beee:	e9c0 4300 	strd	r4, r3, [r0]
 808bef2:	bd10      	pop	{r4, pc}
 808bef4:	2b00      	cmp	r3, #0
 808bef6:	bfc4      	itt	gt
 808bef8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 808befc:	189b      	addgt	r3, r3, r2
 808befe:	e7f6      	b.n	808beee <ldiv+0x16>

0808bf00 <memcmp>:
 808bf00:	b530      	push	{r4, r5, lr}
 808bf02:	2400      	movs	r4, #0
 808bf04:	3901      	subs	r1, #1
 808bf06:	42a2      	cmp	r2, r4
 808bf08:	d101      	bne.n	808bf0e <memcmp+0xe>
 808bf0a:	2000      	movs	r0, #0
 808bf0c:	e005      	b.n	808bf1a <memcmp+0x1a>
 808bf0e:	5d03      	ldrb	r3, [r0, r4]
 808bf10:	3401      	adds	r4, #1
 808bf12:	5d0d      	ldrb	r5, [r1, r4]
 808bf14:	42ab      	cmp	r3, r5
 808bf16:	d0f6      	beq.n	808bf06 <memcmp+0x6>
 808bf18:	1b58      	subs	r0, r3, r5
 808bf1a:	bd30      	pop	{r4, r5, pc}

0808bf1c <memcpy>:
 808bf1c:	440a      	add	r2, r1
 808bf1e:	4291      	cmp	r1, r2
 808bf20:	f100 33ff 	add.w	r3, r0, #4294967295
 808bf24:	d100      	bne.n	808bf28 <memcpy+0xc>
 808bf26:	4770      	bx	lr
 808bf28:	b510      	push	{r4, lr}
 808bf2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 808bf2e:	4291      	cmp	r1, r2
 808bf30:	f803 4f01 	strb.w	r4, [r3, #1]!
 808bf34:	d1f9      	bne.n	808bf2a <memcpy+0xe>
 808bf36:	bd10      	pop	{r4, pc}

0808bf38 <memset>:
 808bf38:	4603      	mov	r3, r0
 808bf3a:	4402      	add	r2, r0
 808bf3c:	4293      	cmp	r3, r2
 808bf3e:	d100      	bne.n	808bf42 <memset+0xa>
 808bf40:	4770      	bx	lr
 808bf42:	f803 1b01 	strb.w	r1, [r3], #1
 808bf46:	e7f9      	b.n	808bf3c <memset+0x4>

0808bf48 <srand>:
 808bf48:	b538      	push	{r3, r4, r5, lr}
 808bf4a:	4b0d      	ldr	r3, [pc, #52]	; (808bf80 <srand+0x38>)
 808bf4c:	4604      	mov	r4, r0
 808bf4e:	681d      	ldr	r5, [r3, #0]
 808bf50:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808bf52:	b97b      	cbnz	r3, 808bf74 <srand+0x2c>
 808bf54:	2018      	movs	r0, #24
 808bf56:	f7fc fd1f 	bl	8088998 <malloc>
 808bf5a:	4a0a      	ldr	r2, [pc, #40]	; (808bf84 <srand+0x3c>)
 808bf5c:	4b0a      	ldr	r3, [pc, #40]	; (808bf88 <srand+0x40>)
 808bf5e:	63a8      	str	r0, [r5, #56]	; 0x38
 808bf60:	e9c0 2300 	strd	r2, r3, [r0]
 808bf64:	4b09      	ldr	r3, [pc, #36]	; (808bf8c <srand+0x44>)
 808bf66:	2201      	movs	r2, #1
 808bf68:	6083      	str	r3, [r0, #8]
 808bf6a:	230b      	movs	r3, #11
 808bf6c:	8183      	strh	r3, [r0, #12]
 808bf6e:	2300      	movs	r3, #0
 808bf70:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808bf74:	2200      	movs	r2, #0
 808bf76:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808bf78:	611c      	str	r4, [r3, #16]
 808bf7a:	615a      	str	r2, [r3, #20]
 808bf7c:	bd38      	pop	{r3, r4, r5, pc}
 808bf7e:	bf00      	nop
 808bf80:	200000d8 	.word	0x200000d8
 808bf84:	abcd330e 	.word	0xabcd330e
 808bf88:	e66d1234 	.word	0xe66d1234
 808bf8c:	0005deec 	.word	0x0005deec

0808bf90 <strchr>:
 808bf90:	4603      	mov	r3, r0
 808bf92:	b2c9      	uxtb	r1, r1
 808bf94:	4618      	mov	r0, r3
 808bf96:	f813 2b01 	ldrb.w	r2, [r3], #1
 808bf9a:	b112      	cbz	r2, 808bfa2 <strchr+0x12>
 808bf9c:	428a      	cmp	r2, r1
 808bf9e:	d1f9      	bne.n	808bf94 <strchr+0x4>
 808bfa0:	4770      	bx	lr
 808bfa2:	2900      	cmp	r1, #0
 808bfa4:	bf18      	it	ne
 808bfa6:	2000      	movne	r0, #0
 808bfa8:	4770      	bx	lr

0808bfaa <strcmp>:
 808bfaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 808bfae:	f811 3b01 	ldrb.w	r3, [r1], #1
 808bfb2:	2a01      	cmp	r2, #1
 808bfb4:	bf28      	it	cs
 808bfb6:	429a      	cmpcs	r2, r3
 808bfb8:	d0f7      	beq.n	808bfaa <strcmp>
 808bfba:	1ad0      	subs	r0, r2, r3
 808bfbc:	4770      	bx	lr

0808bfbe <strcpy>:
 808bfbe:	4603      	mov	r3, r0
 808bfc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 808bfc4:	f803 2b01 	strb.w	r2, [r3], #1
 808bfc8:	2a00      	cmp	r2, #0
 808bfca:	d1f9      	bne.n	808bfc0 <strcpy+0x2>
 808bfcc:	4770      	bx	lr
	...

0808bfd0 <strdup>:
 808bfd0:	4b02      	ldr	r3, [pc, #8]	; (808bfdc <strdup+0xc>)
 808bfd2:	4601      	mov	r1, r0
 808bfd4:	6818      	ldr	r0, [r3, #0]
 808bfd6:	f000 b803 	b.w	808bfe0 <_strdup_r>
 808bfda:	bf00      	nop
 808bfdc:	200000d8 	.word	0x200000d8

0808bfe0 <_strdup_r>:
 808bfe0:	b570      	push	{r4, r5, r6, lr}
 808bfe2:	4604      	mov	r4, r0
 808bfe4:	4608      	mov	r0, r1
 808bfe6:	460d      	mov	r5, r1
 808bfe8:	f000 f80d 	bl	808c006 <strlen>
 808bfec:	1c46      	adds	r6, r0, #1
 808bfee:	4631      	mov	r1, r6
 808bff0:	4620      	mov	r0, r4
 808bff2:	f7fc fd11 	bl	8088a18 <_malloc_r>
 808bff6:	4604      	mov	r4, r0
 808bff8:	b118      	cbz	r0, 808c002 <_strdup_r+0x22>
 808bffa:	4632      	mov	r2, r6
 808bffc:	4629      	mov	r1, r5
 808bffe:	f7ff ff8d 	bl	808bf1c <memcpy>
 808c002:	4620      	mov	r0, r4
 808c004:	bd70      	pop	{r4, r5, r6, pc}

0808c006 <strlen>:
 808c006:	4603      	mov	r3, r0
 808c008:	f813 2b01 	ldrb.w	r2, [r3], #1
 808c00c:	2a00      	cmp	r2, #0
 808c00e:	d1fb      	bne.n	808c008 <strlen+0x2>
 808c010:	1a18      	subs	r0, r3, r0
 808c012:	3801      	subs	r0, #1
 808c014:	4770      	bx	lr

0808c016 <strncmp>:
 808c016:	b510      	push	{r4, lr}
 808c018:	b16a      	cbz	r2, 808c036 <strncmp+0x20>
 808c01a:	3901      	subs	r1, #1
 808c01c:	1884      	adds	r4, r0, r2
 808c01e:	f810 3b01 	ldrb.w	r3, [r0], #1
 808c022:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808c026:	4293      	cmp	r3, r2
 808c028:	d103      	bne.n	808c032 <strncmp+0x1c>
 808c02a:	42a0      	cmp	r0, r4
 808c02c:	d001      	beq.n	808c032 <strncmp+0x1c>
 808c02e:	2b00      	cmp	r3, #0
 808c030:	d1f5      	bne.n	808c01e <strncmp+0x8>
 808c032:	1a98      	subs	r0, r3, r2
 808c034:	bd10      	pop	{r4, pc}
 808c036:	4610      	mov	r0, r2
 808c038:	e7fc      	b.n	808c034 <strncmp+0x1e>

0808c03a <strncpy>:
 808c03a:	4603      	mov	r3, r0
 808c03c:	b510      	push	{r4, lr}
 808c03e:	3901      	subs	r1, #1
 808c040:	b132      	cbz	r2, 808c050 <strncpy+0x16>
 808c042:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808c046:	3a01      	subs	r2, #1
 808c048:	f803 4b01 	strb.w	r4, [r3], #1
 808c04c:	2c00      	cmp	r4, #0
 808c04e:	d1f7      	bne.n	808c040 <strncpy+0x6>
 808c050:	2100      	movs	r1, #0
 808c052:	441a      	add	r2, r3
 808c054:	4293      	cmp	r3, r2
 808c056:	d100      	bne.n	808c05a <strncpy+0x20>
 808c058:	bd10      	pop	{r4, pc}
 808c05a:	f803 1b01 	strb.w	r1, [r3], #1
 808c05e:	e7f9      	b.n	808c054 <strncpy+0x1a>

0808c060 <strstr>:
 808c060:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c062:	780c      	ldrb	r4, [r1, #0]
 808c064:	b164      	cbz	r4, 808c080 <strstr+0x20>
 808c066:	4603      	mov	r3, r0
 808c068:	781a      	ldrb	r2, [r3, #0]
 808c06a:	4618      	mov	r0, r3
 808c06c:	1c5e      	adds	r6, r3, #1
 808c06e:	b90a      	cbnz	r2, 808c074 <strstr+0x14>
 808c070:	4610      	mov	r0, r2
 808c072:	e005      	b.n	808c080 <strstr+0x20>
 808c074:	4294      	cmp	r4, r2
 808c076:	d108      	bne.n	808c08a <strstr+0x2a>
 808c078:	460d      	mov	r5, r1
 808c07a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808c07e:	b902      	cbnz	r2, 808c082 <strstr+0x22>
 808c080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c082:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 808c086:	4297      	cmp	r7, r2
 808c088:	d0f7      	beq.n	808c07a <strstr+0x1a>
 808c08a:	4633      	mov	r3, r6
 808c08c:	e7ec      	b.n	808c068 <strstr+0x8>

0808c08e <sulp>:
 808c08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c092:	460f      	mov	r7, r1
 808c094:	4690      	mov	r8, r2
 808c096:	f001 fd03 	bl	808daa0 <__ulp>
 808c09a:	4604      	mov	r4, r0
 808c09c:	460d      	mov	r5, r1
 808c09e:	f1b8 0f00 	cmp.w	r8, #0
 808c0a2:	d011      	beq.n	808c0c8 <sulp+0x3a>
 808c0a4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808c0a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c0ac:	2b00      	cmp	r3, #0
 808c0ae:	dd0b      	ble.n	808c0c8 <sulp+0x3a>
 808c0b0:	2400      	movs	r4, #0
 808c0b2:	051b      	lsls	r3, r3, #20
 808c0b4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808c0b8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808c0bc:	4622      	mov	r2, r4
 808c0be:	462b      	mov	r3, r5
 808c0c0:	f7fe ffd0 	bl	808b064 <__aeabi_dmul>
 808c0c4:	4604      	mov	r4, r0
 808c0c6:	460d      	mov	r5, r1
 808c0c8:	4620      	mov	r0, r4
 808c0ca:	4629      	mov	r1, r5
 808c0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808c0d0 <_strtod_l>:
 808c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c0d4:	469b      	mov	fp, r3
 808c0d6:	2300      	movs	r3, #0
 808c0d8:	b0a1      	sub	sp, #132	; 0x84
 808c0da:	931c      	str	r3, [sp, #112]	; 0x70
 808c0dc:	4ba1      	ldr	r3, [pc, #644]	; (808c364 <_strtod_l+0x294>)
 808c0de:	4682      	mov	sl, r0
 808c0e0:	681f      	ldr	r7, [r3, #0]
 808c0e2:	460e      	mov	r6, r1
 808c0e4:	4638      	mov	r0, r7
 808c0e6:	9217      	str	r2, [sp, #92]	; 0x5c
 808c0e8:	f7ff ff8d 	bl	808c006 <strlen>
 808c0ec:	f04f 0800 	mov.w	r8, #0
 808c0f0:	4604      	mov	r4, r0
 808c0f2:	f04f 0900 	mov.w	r9, #0
 808c0f6:	961b      	str	r6, [sp, #108]	; 0x6c
 808c0f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c0fa:	781a      	ldrb	r2, [r3, #0]
 808c0fc:	2a2b      	cmp	r2, #43	; 0x2b
 808c0fe:	d04c      	beq.n	808c19a <_strtod_l+0xca>
 808c100:	d83a      	bhi.n	808c178 <_strtod_l+0xa8>
 808c102:	2a0d      	cmp	r2, #13
 808c104:	d833      	bhi.n	808c16e <_strtod_l+0x9e>
 808c106:	2a08      	cmp	r2, #8
 808c108:	d833      	bhi.n	808c172 <_strtod_l+0xa2>
 808c10a:	2a00      	cmp	r2, #0
 808c10c:	d03d      	beq.n	808c18a <_strtod_l+0xba>
 808c10e:	2300      	movs	r3, #0
 808c110:	930c      	str	r3, [sp, #48]	; 0x30
 808c112:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 808c114:	782b      	ldrb	r3, [r5, #0]
 808c116:	2b30      	cmp	r3, #48	; 0x30
 808c118:	f040 80af 	bne.w	808c27a <_strtod_l+0x1aa>
 808c11c:	786b      	ldrb	r3, [r5, #1]
 808c11e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808c122:	2b58      	cmp	r3, #88	; 0x58
 808c124:	d16c      	bne.n	808c200 <_strtod_l+0x130>
 808c126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808c128:	4650      	mov	r0, sl
 808c12a:	9301      	str	r3, [sp, #4]
 808c12c:	ab1c      	add	r3, sp, #112	; 0x70
 808c12e:	9300      	str	r3, [sp, #0]
 808c130:	4a8d      	ldr	r2, [pc, #564]	; (808c368 <_strtod_l+0x298>)
 808c132:	f8cd b008 	str.w	fp, [sp, #8]
 808c136:	ab1d      	add	r3, sp, #116	; 0x74
 808c138:	a91b      	add	r1, sp, #108	; 0x6c
 808c13a:	f000 feb5 	bl	808cea8 <__gethex>
 808c13e:	f010 0607 	ands.w	r6, r0, #7
 808c142:	4604      	mov	r4, r0
 808c144:	d005      	beq.n	808c152 <_strtod_l+0x82>
 808c146:	2e06      	cmp	r6, #6
 808c148:	d129      	bne.n	808c19e <_strtod_l+0xce>
 808c14a:	2300      	movs	r3, #0
 808c14c:	3501      	adds	r5, #1
 808c14e:	951b      	str	r5, [sp, #108]	; 0x6c
 808c150:	930c      	str	r3, [sp, #48]	; 0x30
 808c152:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c154:	2b00      	cmp	r3, #0
 808c156:	f040 8596 	bne.w	808cc86 <_strtod_l+0xbb6>
 808c15a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808c15c:	b1d3      	cbz	r3, 808c194 <_strtod_l+0xc4>
 808c15e:	4642      	mov	r2, r8
 808c160:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808c164:	4610      	mov	r0, r2
 808c166:	4619      	mov	r1, r3
 808c168:	b021      	add	sp, #132	; 0x84
 808c16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c16e:	2a20      	cmp	r2, #32
 808c170:	d1cd      	bne.n	808c10e <_strtod_l+0x3e>
 808c172:	3301      	adds	r3, #1
 808c174:	931b      	str	r3, [sp, #108]	; 0x6c
 808c176:	e7bf      	b.n	808c0f8 <_strtod_l+0x28>
 808c178:	2a2d      	cmp	r2, #45	; 0x2d
 808c17a:	d1c8      	bne.n	808c10e <_strtod_l+0x3e>
 808c17c:	2201      	movs	r2, #1
 808c17e:	920c      	str	r2, [sp, #48]	; 0x30
 808c180:	1c5a      	adds	r2, r3, #1
 808c182:	921b      	str	r2, [sp, #108]	; 0x6c
 808c184:	785b      	ldrb	r3, [r3, #1]
 808c186:	2b00      	cmp	r3, #0
 808c188:	d1c3      	bne.n	808c112 <_strtod_l+0x42>
 808c18a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c18c:	961b      	str	r6, [sp, #108]	; 0x6c
 808c18e:	2b00      	cmp	r3, #0
 808c190:	f040 8577 	bne.w	808cc82 <_strtod_l+0xbb2>
 808c194:	4642      	mov	r2, r8
 808c196:	464b      	mov	r3, r9
 808c198:	e7e4      	b.n	808c164 <_strtod_l+0x94>
 808c19a:	2200      	movs	r2, #0
 808c19c:	e7ef      	b.n	808c17e <_strtod_l+0xae>
 808c19e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808c1a0:	b13a      	cbz	r2, 808c1b2 <_strtod_l+0xe2>
 808c1a2:	2135      	movs	r1, #53	; 0x35
 808c1a4:	a81e      	add	r0, sp, #120	; 0x78
 808c1a6:	f001 fd72 	bl	808dc8e <__copybits>
 808c1aa:	4650      	mov	r0, sl
 808c1ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 808c1ae:	f001 f9ad 	bl	808d50c <_Bfree>
 808c1b2:	3e01      	subs	r6, #1
 808c1b4:	2e05      	cmp	r6, #5
 808c1b6:	d807      	bhi.n	808c1c8 <_strtod_l+0xf8>
 808c1b8:	e8df f006 	tbb	[pc, r6]
 808c1bc:	1d180b0e 	.word	0x1d180b0e
 808c1c0:	030e      	.short	0x030e
 808c1c2:	f04f 0900 	mov.w	r9, #0
 808c1c6:	46c8      	mov	r8, r9
 808c1c8:	0721      	lsls	r1, r4, #28
 808c1ca:	d5c2      	bpl.n	808c152 <_strtod_l+0x82>
 808c1cc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808c1d0:	e7bf      	b.n	808c152 <_strtod_l+0x82>
 808c1d2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 808c1d6:	e7f7      	b.n	808c1c8 <_strtod_l+0xf8>
 808c1d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 808c1da:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 808c1de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808c1e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808c1e6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808c1ea:	e7ed      	b.n	808c1c8 <_strtod_l+0xf8>
 808c1ec:	f04f 0800 	mov.w	r8, #0
 808c1f0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808c36c <_strtod_l+0x29c>
 808c1f4:	e7e8      	b.n	808c1c8 <_strtod_l+0xf8>
 808c1f6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808c1fa:	f04f 38ff 	mov.w	r8, #4294967295
 808c1fe:	e7e3      	b.n	808c1c8 <_strtod_l+0xf8>
 808c200:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c202:	1c5a      	adds	r2, r3, #1
 808c204:	921b      	str	r2, [sp, #108]	; 0x6c
 808c206:	785b      	ldrb	r3, [r3, #1]
 808c208:	2b30      	cmp	r3, #48	; 0x30
 808c20a:	d0f9      	beq.n	808c200 <_strtod_l+0x130>
 808c20c:	2b00      	cmp	r3, #0
 808c20e:	d0a0      	beq.n	808c152 <_strtod_l+0x82>
 808c210:	2301      	movs	r3, #1
 808c212:	9307      	str	r3, [sp, #28]
 808c214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c216:	220a      	movs	r2, #10
 808c218:	9308      	str	r3, [sp, #32]
 808c21a:	2300      	movs	r3, #0
 808c21c:	469b      	mov	fp, r3
 808c21e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 808c222:	981b      	ldr	r0, [sp, #108]	; 0x6c
 808c224:	7805      	ldrb	r5, [r0, #0]
 808c226:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 808c22a:	b2d9      	uxtb	r1, r3
 808c22c:	2909      	cmp	r1, #9
 808c22e:	d926      	bls.n	808c27e <_strtod_l+0x1ae>
 808c230:	4622      	mov	r2, r4
 808c232:	4639      	mov	r1, r7
 808c234:	f7ff feef 	bl	808c016 <strncmp>
 808c238:	2800      	cmp	r0, #0
 808c23a:	d032      	beq.n	808c2a2 <_strtod_l+0x1d2>
 808c23c:	2000      	movs	r0, #0
 808c23e:	462b      	mov	r3, r5
 808c240:	465c      	mov	r4, fp
 808c242:	4602      	mov	r2, r0
 808c244:	9004      	str	r0, [sp, #16]
 808c246:	2b65      	cmp	r3, #101	; 0x65
 808c248:	d001      	beq.n	808c24e <_strtod_l+0x17e>
 808c24a:	2b45      	cmp	r3, #69	; 0x45
 808c24c:	d113      	bne.n	808c276 <_strtod_l+0x1a6>
 808c24e:	b91c      	cbnz	r4, 808c258 <_strtod_l+0x188>
 808c250:	9b07      	ldr	r3, [sp, #28]
 808c252:	4303      	orrs	r3, r0
 808c254:	d099      	beq.n	808c18a <_strtod_l+0xba>
 808c256:	2400      	movs	r4, #0
 808c258:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 808c25a:	1c73      	adds	r3, r6, #1
 808c25c:	931b      	str	r3, [sp, #108]	; 0x6c
 808c25e:	7873      	ldrb	r3, [r6, #1]
 808c260:	2b2b      	cmp	r3, #43	; 0x2b
 808c262:	d078      	beq.n	808c356 <_strtod_l+0x286>
 808c264:	2b2d      	cmp	r3, #45	; 0x2d
 808c266:	d07b      	beq.n	808c360 <_strtod_l+0x290>
 808c268:	2700      	movs	r7, #0
 808c26a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808c26e:	2909      	cmp	r1, #9
 808c270:	f240 8082 	bls.w	808c378 <_strtod_l+0x2a8>
 808c274:	961b      	str	r6, [sp, #108]	; 0x6c
 808c276:	2500      	movs	r5, #0
 808c278:	e09e      	b.n	808c3b8 <_strtod_l+0x2e8>
 808c27a:	2300      	movs	r3, #0
 808c27c:	e7c9      	b.n	808c212 <_strtod_l+0x142>
 808c27e:	f1bb 0f08 	cmp.w	fp, #8
 808c282:	bfd5      	itete	le
 808c284:	9906      	ldrle	r1, [sp, #24]
 808c286:	9905      	ldrgt	r1, [sp, #20]
 808c288:	fb02 3301 	mlale	r3, r2, r1, r3
 808c28c:	fb02 3301 	mlagt	r3, r2, r1, r3
 808c290:	f100 0001 	add.w	r0, r0, #1
 808c294:	bfd4      	ite	le
 808c296:	9306      	strle	r3, [sp, #24]
 808c298:	9305      	strgt	r3, [sp, #20]
 808c29a:	f10b 0b01 	add.w	fp, fp, #1
 808c29e:	901b      	str	r0, [sp, #108]	; 0x6c
 808c2a0:	e7bf      	b.n	808c222 <_strtod_l+0x152>
 808c2a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c2a4:	191a      	adds	r2, r3, r4
 808c2a6:	921b      	str	r2, [sp, #108]	; 0x6c
 808c2a8:	5d1b      	ldrb	r3, [r3, r4]
 808c2aa:	f1bb 0f00 	cmp.w	fp, #0
 808c2ae:	d036      	beq.n	808c31e <_strtod_l+0x24e>
 808c2b0:	465c      	mov	r4, fp
 808c2b2:	9004      	str	r0, [sp, #16]
 808c2b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 808c2b8:	2a09      	cmp	r2, #9
 808c2ba:	d912      	bls.n	808c2e2 <_strtod_l+0x212>
 808c2bc:	2201      	movs	r2, #1
 808c2be:	e7c2      	b.n	808c246 <_strtod_l+0x176>
 808c2c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c2c2:	3001      	adds	r0, #1
 808c2c4:	1c5a      	adds	r2, r3, #1
 808c2c6:	921b      	str	r2, [sp, #108]	; 0x6c
 808c2c8:	785b      	ldrb	r3, [r3, #1]
 808c2ca:	2b30      	cmp	r3, #48	; 0x30
 808c2cc:	d0f8      	beq.n	808c2c0 <_strtod_l+0x1f0>
 808c2ce:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808c2d2:	2a08      	cmp	r2, #8
 808c2d4:	f200 84dc 	bhi.w	808cc90 <_strtod_l+0xbc0>
 808c2d8:	9004      	str	r0, [sp, #16]
 808c2da:	2000      	movs	r0, #0
 808c2dc:	4604      	mov	r4, r0
 808c2de:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 808c2e0:	9208      	str	r2, [sp, #32]
 808c2e2:	3b30      	subs	r3, #48	; 0x30
 808c2e4:	f100 0201 	add.w	r2, r0, #1
 808c2e8:	d013      	beq.n	808c312 <_strtod_l+0x242>
 808c2ea:	9904      	ldr	r1, [sp, #16]
 808c2ec:	1905      	adds	r5, r0, r4
 808c2ee:	4411      	add	r1, r2
 808c2f0:	9104      	str	r1, [sp, #16]
 808c2f2:	4622      	mov	r2, r4
 808c2f4:	210a      	movs	r1, #10
 808c2f6:	42aa      	cmp	r2, r5
 808c2f8:	d113      	bne.n	808c322 <_strtod_l+0x252>
 808c2fa:	1822      	adds	r2, r4, r0
 808c2fc:	2a08      	cmp	r2, #8
 808c2fe:	f104 0401 	add.w	r4, r4, #1
 808c302:	4404      	add	r4, r0
 808c304:	dc1b      	bgt.n	808c33e <_strtod_l+0x26e>
 808c306:	220a      	movs	r2, #10
 808c308:	9906      	ldr	r1, [sp, #24]
 808c30a:	fb02 3301 	mla	r3, r2, r1, r3
 808c30e:	9306      	str	r3, [sp, #24]
 808c310:	2200      	movs	r2, #0
 808c312:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c314:	4610      	mov	r0, r2
 808c316:	1c59      	adds	r1, r3, #1
 808c318:	911b      	str	r1, [sp, #108]	; 0x6c
 808c31a:	785b      	ldrb	r3, [r3, #1]
 808c31c:	e7ca      	b.n	808c2b4 <_strtod_l+0x1e4>
 808c31e:	4658      	mov	r0, fp
 808c320:	e7d3      	b.n	808c2ca <_strtod_l+0x1fa>
 808c322:	2a08      	cmp	r2, #8
 808c324:	dc04      	bgt.n	808c330 <_strtod_l+0x260>
 808c326:	9f06      	ldr	r7, [sp, #24]
 808c328:	434f      	muls	r7, r1
 808c32a:	9706      	str	r7, [sp, #24]
 808c32c:	3201      	adds	r2, #1
 808c32e:	e7e2      	b.n	808c2f6 <_strtod_l+0x226>
 808c330:	1c57      	adds	r7, r2, #1
 808c332:	2f10      	cmp	r7, #16
 808c334:	bfde      	ittt	le
 808c336:	9f05      	ldrle	r7, [sp, #20]
 808c338:	434f      	mulle	r7, r1
 808c33a:	9705      	strle	r7, [sp, #20]
 808c33c:	e7f6      	b.n	808c32c <_strtod_l+0x25c>
 808c33e:	2c10      	cmp	r4, #16
 808c340:	bfdf      	itttt	le
 808c342:	220a      	movle	r2, #10
 808c344:	9905      	ldrle	r1, [sp, #20]
 808c346:	fb02 3301 	mlale	r3, r2, r1, r3
 808c34a:	9305      	strle	r3, [sp, #20]
 808c34c:	e7e0      	b.n	808c310 <_strtod_l+0x240>
 808c34e:	2300      	movs	r3, #0
 808c350:	2201      	movs	r2, #1
 808c352:	9304      	str	r3, [sp, #16]
 808c354:	e77c      	b.n	808c250 <_strtod_l+0x180>
 808c356:	2700      	movs	r7, #0
 808c358:	1cb3      	adds	r3, r6, #2
 808c35a:	931b      	str	r3, [sp, #108]	; 0x6c
 808c35c:	78b3      	ldrb	r3, [r6, #2]
 808c35e:	e784      	b.n	808c26a <_strtod_l+0x19a>
 808c360:	2701      	movs	r7, #1
 808c362:	e7f9      	b.n	808c358 <_strtod_l+0x288>
 808c364:	08090404 	.word	0x08090404
 808c368:	080902b0 	.word	0x080902b0
 808c36c:	7ff00000 	.word	0x7ff00000
 808c370:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c372:	1c59      	adds	r1, r3, #1
 808c374:	911b      	str	r1, [sp, #108]	; 0x6c
 808c376:	785b      	ldrb	r3, [r3, #1]
 808c378:	2b30      	cmp	r3, #48	; 0x30
 808c37a:	d0f9      	beq.n	808c370 <_strtod_l+0x2a0>
 808c37c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 808c380:	2908      	cmp	r1, #8
 808c382:	f63f af78 	bhi.w	808c276 <_strtod_l+0x1a6>
 808c386:	f04f 0e0a 	mov.w	lr, #10
 808c38a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808c38e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c390:	9309      	str	r3, [sp, #36]	; 0x24
 808c392:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c394:	1c59      	adds	r1, r3, #1
 808c396:	911b      	str	r1, [sp, #108]	; 0x6c
 808c398:	785b      	ldrb	r3, [r3, #1]
 808c39a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 808c39e:	2d09      	cmp	r5, #9
 808c3a0:	d935      	bls.n	808c40e <_strtod_l+0x33e>
 808c3a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808c3a4:	1b49      	subs	r1, r1, r5
 808c3a6:	2908      	cmp	r1, #8
 808c3a8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 808c3ac:	dc02      	bgt.n	808c3b4 <_strtod_l+0x2e4>
 808c3ae:	4565      	cmp	r5, ip
 808c3b0:	bfa8      	it	ge
 808c3b2:	4665      	movge	r5, ip
 808c3b4:	b107      	cbz	r7, 808c3b8 <_strtod_l+0x2e8>
 808c3b6:	426d      	negs	r5, r5
 808c3b8:	2c00      	cmp	r4, #0
 808c3ba:	d14c      	bne.n	808c456 <_strtod_l+0x386>
 808c3bc:	9907      	ldr	r1, [sp, #28]
 808c3be:	4301      	orrs	r1, r0
 808c3c0:	f47f aec7 	bne.w	808c152 <_strtod_l+0x82>
 808c3c4:	2a00      	cmp	r2, #0
 808c3c6:	f47f aee0 	bne.w	808c18a <_strtod_l+0xba>
 808c3ca:	2b69      	cmp	r3, #105	; 0x69
 808c3cc:	d026      	beq.n	808c41c <_strtod_l+0x34c>
 808c3ce:	dc23      	bgt.n	808c418 <_strtod_l+0x348>
 808c3d0:	2b49      	cmp	r3, #73	; 0x49
 808c3d2:	d023      	beq.n	808c41c <_strtod_l+0x34c>
 808c3d4:	2b4e      	cmp	r3, #78	; 0x4e
 808c3d6:	f47f aed8 	bne.w	808c18a <_strtod_l+0xba>
 808c3da:	499c      	ldr	r1, [pc, #624]	; (808c64c <_strtod_l+0x57c>)
 808c3dc:	a81b      	add	r0, sp, #108	; 0x6c
 808c3de:	f000 ff9f 	bl	808d320 <__match>
 808c3e2:	2800      	cmp	r0, #0
 808c3e4:	f43f aed1 	beq.w	808c18a <_strtod_l+0xba>
 808c3e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c3ea:	781b      	ldrb	r3, [r3, #0]
 808c3ec:	2b28      	cmp	r3, #40	; 0x28
 808c3ee:	d12c      	bne.n	808c44a <_strtod_l+0x37a>
 808c3f0:	4997      	ldr	r1, [pc, #604]	; (808c650 <_strtod_l+0x580>)
 808c3f2:	aa1e      	add	r2, sp, #120	; 0x78
 808c3f4:	a81b      	add	r0, sp, #108	; 0x6c
 808c3f6:	f000 ffa7 	bl	808d348 <__hexnan>
 808c3fa:	2805      	cmp	r0, #5
 808c3fc:	d125      	bne.n	808c44a <_strtod_l+0x37a>
 808c3fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 808c400:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 808c404:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808c408:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808c40c:	e6a1      	b.n	808c152 <_strtod_l+0x82>
 808c40e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 808c412:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 808c416:	e7bc      	b.n	808c392 <_strtod_l+0x2c2>
 808c418:	2b6e      	cmp	r3, #110	; 0x6e
 808c41a:	e7dc      	b.n	808c3d6 <_strtod_l+0x306>
 808c41c:	498d      	ldr	r1, [pc, #564]	; (808c654 <_strtod_l+0x584>)
 808c41e:	a81b      	add	r0, sp, #108	; 0x6c
 808c420:	f000 ff7e 	bl	808d320 <__match>
 808c424:	2800      	cmp	r0, #0
 808c426:	f43f aeb0 	beq.w	808c18a <_strtod_l+0xba>
 808c42a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c42c:	498a      	ldr	r1, [pc, #552]	; (808c658 <_strtod_l+0x588>)
 808c42e:	3b01      	subs	r3, #1
 808c430:	a81b      	add	r0, sp, #108	; 0x6c
 808c432:	931b      	str	r3, [sp, #108]	; 0x6c
 808c434:	f000 ff74 	bl	808d320 <__match>
 808c438:	b910      	cbnz	r0, 808c440 <_strtod_l+0x370>
 808c43a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c43c:	3301      	adds	r3, #1
 808c43e:	931b      	str	r3, [sp, #108]	; 0x6c
 808c440:	f04f 0800 	mov.w	r8, #0
 808c444:	f8df 9220 	ldr.w	r9, [pc, #544]	; 808c668 <_strtod_l+0x598>
 808c448:	e683      	b.n	808c152 <_strtod_l+0x82>
 808c44a:	4884      	ldr	r0, [pc, #528]	; (808c65c <_strtod_l+0x58c>)
 808c44c:	f7fe fc48 	bl	808ace0 <nan>
 808c450:	4680      	mov	r8, r0
 808c452:	4689      	mov	r9, r1
 808c454:	e67d      	b.n	808c152 <_strtod_l+0x82>
 808c456:	9b04      	ldr	r3, [sp, #16]
 808c458:	f1bb 0f00 	cmp.w	fp, #0
 808c45c:	bf08      	it	eq
 808c45e:	46a3      	moveq	fp, r4
 808c460:	1aeb      	subs	r3, r5, r3
 808c462:	2c10      	cmp	r4, #16
 808c464:	9806      	ldr	r0, [sp, #24]
 808c466:	4626      	mov	r6, r4
 808c468:	9307      	str	r3, [sp, #28]
 808c46a:	bfa8      	it	ge
 808c46c:	2610      	movge	r6, #16
 808c46e:	f7fe fd7f 	bl	808af70 <__aeabi_ui2d>
 808c472:	2c09      	cmp	r4, #9
 808c474:	4680      	mov	r8, r0
 808c476:	4689      	mov	r9, r1
 808c478:	dd13      	ble.n	808c4a2 <_strtod_l+0x3d2>
 808c47a:	4b79      	ldr	r3, [pc, #484]	; (808c660 <_strtod_l+0x590>)
 808c47c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 808c480:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808c484:	f7fe fdee 	bl	808b064 <__aeabi_dmul>
 808c488:	4680      	mov	r8, r0
 808c48a:	9805      	ldr	r0, [sp, #20]
 808c48c:	4689      	mov	r9, r1
 808c48e:	f7fe fd6f 	bl	808af70 <__aeabi_ui2d>
 808c492:	4602      	mov	r2, r0
 808c494:	460b      	mov	r3, r1
 808c496:	4640      	mov	r0, r8
 808c498:	4649      	mov	r1, r9
 808c49a:	f7fe fc2d 	bl	808acf8 <__adddf3>
 808c49e:	4680      	mov	r8, r0
 808c4a0:	4689      	mov	r9, r1
 808c4a2:	2c0f      	cmp	r4, #15
 808c4a4:	dc36      	bgt.n	808c514 <_strtod_l+0x444>
 808c4a6:	9b07      	ldr	r3, [sp, #28]
 808c4a8:	2b00      	cmp	r3, #0
 808c4aa:	f43f ae52 	beq.w	808c152 <_strtod_l+0x82>
 808c4ae:	dd22      	ble.n	808c4f6 <_strtod_l+0x426>
 808c4b0:	2b16      	cmp	r3, #22
 808c4b2:	dc09      	bgt.n	808c4c8 <_strtod_l+0x3f8>
 808c4b4:	4c6a      	ldr	r4, [pc, #424]	; (808c660 <_strtod_l+0x590>)
 808c4b6:	4642      	mov	r2, r8
 808c4b8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 808c4bc:	464b      	mov	r3, r9
 808c4be:	e9d4 0100 	ldrd	r0, r1, [r4]
 808c4c2:	f7fe fdcf 	bl	808b064 <__aeabi_dmul>
 808c4c6:	e7c3      	b.n	808c450 <_strtod_l+0x380>
 808c4c8:	9a07      	ldr	r2, [sp, #28]
 808c4ca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 808c4ce:	4293      	cmp	r3, r2
 808c4d0:	db20      	blt.n	808c514 <_strtod_l+0x444>
 808c4d2:	4d63      	ldr	r5, [pc, #396]	; (808c660 <_strtod_l+0x590>)
 808c4d4:	f1c4 040f 	rsb	r4, r4, #15
 808c4d8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 808c4dc:	4642      	mov	r2, r8
 808c4de:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c4e2:	464b      	mov	r3, r9
 808c4e4:	f7fe fdbe 	bl	808b064 <__aeabi_dmul>
 808c4e8:	9b07      	ldr	r3, [sp, #28]
 808c4ea:	1b1c      	subs	r4, r3, r4
 808c4ec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 808c4f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 808c4f4:	e7e5      	b.n	808c4c2 <_strtod_l+0x3f2>
 808c4f6:	9b07      	ldr	r3, [sp, #28]
 808c4f8:	3316      	adds	r3, #22
 808c4fa:	db0b      	blt.n	808c514 <_strtod_l+0x444>
 808c4fc:	9b04      	ldr	r3, [sp, #16]
 808c4fe:	4a58      	ldr	r2, [pc, #352]	; (808c660 <_strtod_l+0x590>)
 808c500:	1b5d      	subs	r5, r3, r5
 808c502:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 808c506:	4640      	mov	r0, r8
 808c508:	e9d5 2300 	ldrd	r2, r3, [r5]
 808c50c:	4649      	mov	r1, r9
 808c50e:	f7fe fed3 	bl	808b2b8 <__aeabi_ddiv>
 808c512:	e79d      	b.n	808c450 <_strtod_l+0x380>
 808c514:	9b07      	ldr	r3, [sp, #28]
 808c516:	1ba6      	subs	r6, r4, r6
 808c518:	441e      	add	r6, r3
 808c51a:	2e00      	cmp	r6, #0
 808c51c:	dd71      	ble.n	808c602 <_strtod_l+0x532>
 808c51e:	f016 030f 	ands.w	r3, r6, #15
 808c522:	d00a      	beq.n	808c53a <_strtod_l+0x46a>
 808c524:	494e      	ldr	r1, [pc, #312]	; (808c660 <_strtod_l+0x590>)
 808c526:	4642      	mov	r2, r8
 808c528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 808c52c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c530:	464b      	mov	r3, r9
 808c532:	f7fe fd97 	bl	808b064 <__aeabi_dmul>
 808c536:	4680      	mov	r8, r0
 808c538:	4689      	mov	r9, r1
 808c53a:	f036 060f 	bics.w	r6, r6, #15
 808c53e:	d050      	beq.n	808c5e2 <_strtod_l+0x512>
 808c540:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 808c544:	dd27      	ble.n	808c596 <_strtod_l+0x4c6>
 808c546:	f04f 0b00 	mov.w	fp, #0
 808c54a:	f8cd b010 	str.w	fp, [sp, #16]
 808c54e:	f8cd b020 	str.w	fp, [sp, #32]
 808c552:	f8cd b018 	str.w	fp, [sp, #24]
 808c556:	2322      	movs	r3, #34	; 0x22
 808c558:	f04f 0800 	mov.w	r8, #0
 808c55c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 808c668 <_strtod_l+0x598>
 808c560:	f8ca 3000 	str.w	r3, [sl]
 808c564:	9b08      	ldr	r3, [sp, #32]
 808c566:	2b00      	cmp	r3, #0
 808c568:	f43f adf3 	beq.w	808c152 <_strtod_l+0x82>
 808c56c:	4650      	mov	r0, sl
 808c56e:	991c      	ldr	r1, [sp, #112]	; 0x70
 808c570:	f000 ffcc 	bl	808d50c <_Bfree>
 808c574:	4650      	mov	r0, sl
 808c576:	9906      	ldr	r1, [sp, #24]
 808c578:	f000 ffc8 	bl	808d50c <_Bfree>
 808c57c:	4650      	mov	r0, sl
 808c57e:	9904      	ldr	r1, [sp, #16]
 808c580:	f000 ffc4 	bl	808d50c <_Bfree>
 808c584:	4650      	mov	r0, sl
 808c586:	9908      	ldr	r1, [sp, #32]
 808c588:	f000 ffc0 	bl	808d50c <_Bfree>
 808c58c:	4659      	mov	r1, fp
 808c58e:	4650      	mov	r0, sl
 808c590:	f000 ffbc 	bl	808d50c <_Bfree>
 808c594:	e5dd      	b.n	808c152 <_strtod_l+0x82>
 808c596:	2300      	movs	r3, #0
 808c598:	4640      	mov	r0, r8
 808c59a:	4649      	mov	r1, r9
 808c59c:	461f      	mov	r7, r3
 808c59e:	1136      	asrs	r6, r6, #4
 808c5a0:	2e01      	cmp	r6, #1
 808c5a2:	dc21      	bgt.n	808c5e8 <_strtod_l+0x518>
 808c5a4:	b10b      	cbz	r3, 808c5aa <_strtod_l+0x4da>
 808c5a6:	4680      	mov	r8, r0
 808c5a8:	4689      	mov	r9, r1
 808c5aa:	4b2e      	ldr	r3, [pc, #184]	; (808c664 <_strtod_l+0x594>)
 808c5ac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808c5b0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 808c5b4:	4642      	mov	r2, r8
 808c5b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 808c5ba:	464b      	mov	r3, r9
 808c5bc:	f7fe fd52 	bl	808b064 <__aeabi_dmul>
 808c5c0:	4b29      	ldr	r3, [pc, #164]	; (808c668 <_strtod_l+0x598>)
 808c5c2:	460a      	mov	r2, r1
 808c5c4:	400b      	ands	r3, r1
 808c5c6:	4929      	ldr	r1, [pc, #164]	; (808c66c <_strtod_l+0x59c>)
 808c5c8:	4680      	mov	r8, r0
 808c5ca:	428b      	cmp	r3, r1
 808c5cc:	d8bb      	bhi.n	808c546 <_strtod_l+0x476>
 808c5ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808c5d2:	428b      	cmp	r3, r1
 808c5d4:	bf86      	itte	hi
 808c5d6:	f04f 38ff 	movhi.w	r8, #4294967295
 808c5da:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 808c670 <_strtod_l+0x5a0>
 808c5de:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808c5e2:	2300      	movs	r3, #0
 808c5e4:	9305      	str	r3, [sp, #20]
 808c5e6:	e07e      	b.n	808c6e6 <_strtod_l+0x616>
 808c5e8:	07f2      	lsls	r2, r6, #31
 808c5ea:	d507      	bpl.n	808c5fc <_strtod_l+0x52c>
 808c5ec:	4b1d      	ldr	r3, [pc, #116]	; (808c664 <_strtod_l+0x594>)
 808c5ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 808c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c5f6:	f7fe fd35 	bl	808b064 <__aeabi_dmul>
 808c5fa:	2301      	movs	r3, #1
 808c5fc:	3701      	adds	r7, #1
 808c5fe:	1076      	asrs	r6, r6, #1
 808c600:	e7ce      	b.n	808c5a0 <_strtod_l+0x4d0>
 808c602:	d0ee      	beq.n	808c5e2 <_strtod_l+0x512>
 808c604:	4276      	negs	r6, r6
 808c606:	f016 020f 	ands.w	r2, r6, #15
 808c60a:	d00a      	beq.n	808c622 <_strtod_l+0x552>
 808c60c:	4b14      	ldr	r3, [pc, #80]	; (808c660 <_strtod_l+0x590>)
 808c60e:	4640      	mov	r0, r8
 808c610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808c614:	4649      	mov	r1, r9
 808c616:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c61a:	f7fe fe4d 	bl	808b2b8 <__aeabi_ddiv>
 808c61e:	4680      	mov	r8, r0
 808c620:	4689      	mov	r9, r1
 808c622:	1136      	asrs	r6, r6, #4
 808c624:	d0dd      	beq.n	808c5e2 <_strtod_l+0x512>
 808c626:	2e1f      	cmp	r6, #31
 808c628:	dd24      	ble.n	808c674 <_strtod_l+0x5a4>
 808c62a:	f04f 0b00 	mov.w	fp, #0
 808c62e:	f8cd b010 	str.w	fp, [sp, #16]
 808c632:	f8cd b020 	str.w	fp, [sp, #32]
 808c636:	f8cd b018 	str.w	fp, [sp, #24]
 808c63a:	2322      	movs	r3, #34	; 0x22
 808c63c:	f04f 0800 	mov.w	r8, #0
 808c640:	f04f 0900 	mov.w	r9, #0
 808c644:	f8ca 3000 	str.w	r3, [sl]
 808c648:	e78c      	b.n	808c564 <_strtod_l+0x494>
 808c64a:	bf00      	nop
 808c64c:	080900f5 	.word	0x080900f5
 808c650:	080902c4 	.word	0x080902c4
 808c654:	080900f9 	.word	0x080900f9
 808c658:	080902aa 	.word	0x080902aa
 808c65c:	080900b9 	.word	0x080900b9
 808c660:	08090440 	.word	0x08090440
 808c664:	08090418 	.word	0x08090418
 808c668:	7ff00000 	.word	0x7ff00000
 808c66c:	7ca00000 	.word	0x7ca00000
 808c670:	7fefffff 	.word	0x7fefffff
 808c674:	f016 0310 	ands.w	r3, r6, #16
 808c678:	bf18      	it	ne
 808c67a:	236a      	movne	r3, #106	; 0x6a
 808c67c:	4640      	mov	r0, r8
 808c67e:	9305      	str	r3, [sp, #20]
 808c680:	4649      	mov	r1, r9
 808c682:	2300      	movs	r3, #0
 808c684:	4fb2      	ldr	r7, [pc, #712]	; (808c950 <_strtod_l+0x880>)
 808c686:	07f2      	lsls	r2, r6, #31
 808c688:	d504      	bpl.n	808c694 <_strtod_l+0x5c4>
 808c68a:	e9d7 2300 	ldrd	r2, r3, [r7]
 808c68e:	f7fe fce9 	bl	808b064 <__aeabi_dmul>
 808c692:	2301      	movs	r3, #1
 808c694:	1076      	asrs	r6, r6, #1
 808c696:	f107 0708 	add.w	r7, r7, #8
 808c69a:	d1f4      	bne.n	808c686 <_strtod_l+0x5b6>
 808c69c:	b10b      	cbz	r3, 808c6a2 <_strtod_l+0x5d2>
 808c69e:	4680      	mov	r8, r0
 808c6a0:	4689      	mov	r9, r1
 808c6a2:	9b05      	ldr	r3, [sp, #20]
 808c6a4:	b1bb      	cbz	r3, 808c6d6 <_strtod_l+0x606>
 808c6a6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808c6aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c6ae:	2b00      	cmp	r3, #0
 808c6b0:	4649      	mov	r1, r9
 808c6b2:	dd10      	ble.n	808c6d6 <_strtod_l+0x606>
 808c6b4:	2b1f      	cmp	r3, #31
 808c6b6:	f340 812b 	ble.w	808c910 <_strtod_l+0x840>
 808c6ba:	2b34      	cmp	r3, #52	; 0x34
 808c6bc:	bfd8      	it	le
 808c6be:	f04f 32ff 	movle.w	r2, #4294967295
 808c6c2:	f04f 0800 	mov.w	r8, #0
 808c6c6:	bfcf      	iteee	gt
 808c6c8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808c6cc:	3b20      	suble	r3, #32
 808c6ce:	fa02 f303 	lslle.w	r3, r2, r3
 808c6d2:	ea03 0901 	andle.w	r9, r3, r1
 808c6d6:	2200      	movs	r2, #0
 808c6d8:	2300      	movs	r3, #0
 808c6da:	4640      	mov	r0, r8
 808c6dc:	4649      	mov	r1, r9
 808c6de:	f7fe ff29 	bl	808b534 <__aeabi_dcmpeq>
 808c6e2:	2800      	cmp	r0, #0
 808c6e4:	d1a1      	bne.n	808c62a <_strtod_l+0x55a>
 808c6e6:	9b06      	ldr	r3, [sp, #24]
 808c6e8:	465a      	mov	r2, fp
 808c6ea:	9300      	str	r3, [sp, #0]
 808c6ec:	4650      	mov	r0, sl
 808c6ee:	4623      	mov	r3, r4
 808c6f0:	9908      	ldr	r1, [sp, #32]
 808c6f2:	f000 ff60 	bl	808d5b6 <__s2b>
 808c6f6:	9008      	str	r0, [sp, #32]
 808c6f8:	2800      	cmp	r0, #0
 808c6fa:	f43f af24 	beq.w	808c546 <_strtod_l+0x476>
 808c6fe:	9b04      	ldr	r3, [sp, #16]
 808c700:	f04f 0b00 	mov.w	fp, #0
 808c704:	1b5d      	subs	r5, r3, r5
 808c706:	9b07      	ldr	r3, [sp, #28]
 808c708:	f8cd b010 	str.w	fp, [sp, #16]
 808c70c:	2b00      	cmp	r3, #0
 808c70e:	bfb4      	ite	lt
 808c710:	462b      	movlt	r3, r5
 808c712:	2300      	movge	r3, #0
 808c714:	930e      	str	r3, [sp, #56]	; 0x38
 808c716:	9b07      	ldr	r3, [sp, #28]
 808c718:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 808c71c:	9316      	str	r3, [sp, #88]	; 0x58
 808c71e:	9b08      	ldr	r3, [sp, #32]
 808c720:	4650      	mov	r0, sl
 808c722:	6859      	ldr	r1, [r3, #4]
 808c724:	f000 febe 	bl	808d4a4 <_Balloc>
 808c728:	9006      	str	r0, [sp, #24]
 808c72a:	2800      	cmp	r0, #0
 808c72c:	f43f af13 	beq.w	808c556 <_strtod_l+0x486>
 808c730:	9b08      	ldr	r3, [sp, #32]
 808c732:	300c      	adds	r0, #12
 808c734:	691a      	ldr	r2, [r3, #16]
 808c736:	f103 010c 	add.w	r1, r3, #12
 808c73a:	3202      	adds	r2, #2
 808c73c:	0092      	lsls	r2, r2, #2
 808c73e:	f7ff fbed 	bl	808bf1c <memcpy>
 808c742:	ab1e      	add	r3, sp, #120	; 0x78
 808c744:	9301      	str	r3, [sp, #4]
 808c746:	ab1d      	add	r3, sp, #116	; 0x74
 808c748:	9300      	str	r3, [sp, #0]
 808c74a:	4642      	mov	r2, r8
 808c74c:	464b      	mov	r3, r9
 808c74e:	4650      	mov	r0, sl
 808c750:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 808c754:	f001 fa1e 	bl	808db94 <__d2b>
 808c758:	901c      	str	r0, [sp, #112]	; 0x70
 808c75a:	2800      	cmp	r0, #0
 808c75c:	f43f aefb 	beq.w	808c556 <_strtod_l+0x486>
 808c760:	2101      	movs	r1, #1
 808c762:	4650      	mov	r0, sl
 808c764:	f000 ffb3 	bl	808d6ce <__i2b>
 808c768:	4603      	mov	r3, r0
 808c76a:	9004      	str	r0, [sp, #16]
 808c76c:	2800      	cmp	r0, #0
 808c76e:	f43f aef2 	beq.w	808c556 <_strtod_l+0x486>
 808c772:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 808c774:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 808c776:	2d00      	cmp	r5, #0
 808c778:	bfab      	itete	ge
 808c77a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 808c77c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 808c77e:	18ee      	addge	r6, r5, r3
 808c780:	1b5c      	sublt	r4, r3, r5
 808c782:	9b05      	ldr	r3, [sp, #20]
 808c784:	bfa8      	it	ge
 808c786:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 808c788:	eba5 0503 	sub.w	r5, r5, r3
 808c78c:	4415      	add	r5, r2
 808c78e:	4b71      	ldr	r3, [pc, #452]	; (808c954 <_strtod_l+0x884>)
 808c790:	f105 35ff 	add.w	r5, r5, #4294967295
 808c794:	bfb8      	it	lt
 808c796:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 808c798:	429d      	cmp	r5, r3
 808c79a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 808c79e:	f280 80c9 	bge.w	808c934 <_strtod_l+0x864>
 808c7a2:	1b5b      	subs	r3, r3, r5
 808c7a4:	2b1f      	cmp	r3, #31
 808c7a6:	f04f 0701 	mov.w	r7, #1
 808c7aa:	eba2 0203 	sub.w	r2, r2, r3
 808c7ae:	f300 80b6 	bgt.w	808c91e <_strtod_l+0x84e>
 808c7b2:	2500      	movs	r5, #0
 808c7b4:	fa07 f303 	lsl.w	r3, r7, r3
 808c7b8:	930f      	str	r3, [sp, #60]	; 0x3c
 808c7ba:	18b7      	adds	r7, r6, r2
 808c7bc:	9b05      	ldr	r3, [sp, #20]
 808c7be:	42be      	cmp	r6, r7
 808c7c0:	4414      	add	r4, r2
 808c7c2:	441c      	add	r4, r3
 808c7c4:	4633      	mov	r3, r6
 808c7c6:	bfa8      	it	ge
 808c7c8:	463b      	movge	r3, r7
 808c7ca:	42a3      	cmp	r3, r4
 808c7cc:	bfa8      	it	ge
 808c7ce:	4623      	movge	r3, r4
 808c7d0:	2b00      	cmp	r3, #0
 808c7d2:	bfc2      	ittt	gt
 808c7d4:	1aff      	subgt	r7, r7, r3
 808c7d6:	1ae4      	subgt	r4, r4, r3
 808c7d8:	1af6      	subgt	r6, r6, r3
 808c7da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808c7dc:	2b00      	cmp	r3, #0
 808c7de:	dd17      	ble.n	808c810 <_strtod_l+0x740>
 808c7e0:	461a      	mov	r2, r3
 808c7e2:	4650      	mov	r0, sl
 808c7e4:	9904      	ldr	r1, [sp, #16]
 808c7e6:	f001 f817 	bl	808d818 <__pow5mult>
 808c7ea:	9004      	str	r0, [sp, #16]
 808c7ec:	2800      	cmp	r0, #0
 808c7ee:	f43f aeb2 	beq.w	808c556 <_strtod_l+0x486>
 808c7f2:	4601      	mov	r1, r0
 808c7f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808c7f6:	4650      	mov	r0, sl
 808c7f8:	f000 ff72 	bl	808d6e0 <__multiply>
 808c7fc:	9009      	str	r0, [sp, #36]	; 0x24
 808c7fe:	2800      	cmp	r0, #0
 808c800:	f43f aea9 	beq.w	808c556 <_strtod_l+0x486>
 808c804:	4650      	mov	r0, sl
 808c806:	991c      	ldr	r1, [sp, #112]	; 0x70
 808c808:	f000 fe80 	bl	808d50c <_Bfree>
 808c80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c80e:	931c      	str	r3, [sp, #112]	; 0x70
 808c810:	2f00      	cmp	r7, #0
 808c812:	f300 8093 	bgt.w	808c93c <_strtod_l+0x86c>
 808c816:	9b07      	ldr	r3, [sp, #28]
 808c818:	2b00      	cmp	r3, #0
 808c81a:	dd08      	ble.n	808c82e <_strtod_l+0x75e>
 808c81c:	4650      	mov	r0, sl
 808c81e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808c820:	9906      	ldr	r1, [sp, #24]
 808c822:	f000 fff9 	bl	808d818 <__pow5mult>
 808c826:	9006      	str	r0, [sp, #24]
 808c828:	2800      	cmp	r0, #0
 808c82a:	f43f ae94 	beq.w	808c556 <_strtod_l+0x486>
 808c82e:	2c00      	cmp	r4, #0
 808c830:	dd08      	ble.n	808c844 <_strtod_l+0x774>
 808c832:	4622      	mov	r2, r4
 808c834:	4650      	mov	r0, sl
 808c836:	9906      	ldr	r1, [sp, #24]
 808c838:	f001 f83c 	bl	808d8b4 <__lshift>
 808c83c:	9006      	str	r0, [sp, #24]
 808c83e:	2800      	cmp	r0, #0
 808c840:	f43f ae89 	beq.w	808c556 <_strtod_l+0x486>
 808c844:	2e00      	cmp	r6, #0
 808c846:	dd08      	ble.n	808c85a <_strtod_l+0x78a>
 808c848:	4632      	mov	r2, r6
 808c84a:	4650      	mov	r0, sl
 808c84c:	9904      	ldr	r1, [sp, #16]
 808c84e:	f001 f831 	bl	808d8b4 <__lshift>
 808c852:	9004      	str	r0, [sp, #16]
 808c854:	2800      	cmp	r0, #0
 808c856:	f43f ae7e 	beq.w	808c556 <_strtod_l+0x486>
 808c85a:	4650      	mov	r0, sl
 808c85c:	9a06      	ldr	r2, [sp, #24]
 808c85e:	991c      	ldr	r1, [sp, #112]	; 0x70
 808c860:	f001 f8a2 	bl	808d9a8 <__mdiff>
 808c864:	4683      	mov	fp, r0
 808c866:	2800      	cmp	r0, #0
 808c868:	f43f ae75 	beq.w	808c556 <_strtod_l+0x486>
 808c86c:	2400      	movs	r4, #0
 808c86e:	68c3      	ldr	r3, [r0, #12]
 808c870:	9904      	ldr	r1, [sp, #16]
 808c872:	60c4      	str	r4, [r0, #12]
 808c874:	930d      	str	r3, [sp, #52]	; 0x34
 808c876:	f001 f87c 	bl	808d972 <__mcmp>
 808c87a:	42a0      	cmp	r0, r4
 808c87c:	da70      	bge.n	808c960 <_strtod_l+0x890>
 808c87e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808c880:	ea53 0308 	orrs.w	r3, r3, r8
 808c884:	f040 8096 	bne.w	808c9b4 <_strtod_l+0x8e4>
 808c888:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c88c:	2b00      	cmp	r3, #0
 808c88e:	f040 8091 	bne.w	808c9b4 <_strtod_l+0x8e4>
 808c892:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c896:	0d1b      	lsrs	r3, r3, #20
 808c898:	051b      	lsls	r3, r3, #20
 808c89a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808c89e:	f240 8089 	bls.w	808c9b4 <_strtod_l+0x8e4>
 808c8a2:	f8db 3014 	ldr.w	r3, [fp, #20]
 808c8a6:	b923      	cbnz	r3, 808c8b2 <_strtod_l+0x7e2>
 808c8a8:	f8db 3010 	ldr.w	r3, [fp, #16]
 808c8ac:	2b01      	cmp	r3, #1
 808c8ae:	f340 8081 	ble.w	808c9b4 <_strtod_l+0x8e4>
 808c8b2:	4659      	mov	r1, fp
 808c8b4:	2201      	movs	r2, #1
 808c8b6:	4650      	mov	r0, sl
 808c8b8:	f000 fffc 	bl	808d8b4 <__lshift>
 808c8bc:	9904      	ldr	r1, [sp, #16]
 808c8be:	4683      	mov	fp, r0
 808c8c0:	f001 f857 	bl	808d972 <__mcmp>
 808c8c4:	2800      	cmp	r0, #0
 808c8c6:	dd75      	ble.n	808c9b4 <_strtod_l+0x8e4>
 808c8c8:	9905      	ldr	r1, [sp, #20]
 808c8ca:	464b      	mov	r3, r9
 808c8cc:	4a22      	ldr	r2, [pc, #136]	; (808c958 <_strtod_l+0x888>)
 808c8ce:	2900      	cmp	r1, #0
 808c8d0:	f000 8091 	beq.w	808c9f6 <_strtod_l+0x926>
 808c8d4:	ea02 0109 	and.w	r1, r2, r9
 808c8d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 808c8dc:	f300 808b 	bgt.w	808c9f6 <_strtod_l+0x926>
 808c8e0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 808c8e4:	f77f aea9 	ble.w	808c63a <_strtod_l+0x56a>
 808c8e8:	2300      	movs	r3, #0
 808c8ea:	4a1c      	ldr	r2, [pc, #112]	; (808c95c <_strtod_l+0x88c>)
 808c8ec:	4640      	mov	r0, r8
 808c8ee:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 808c8f2:	4649      	mov	r1, r9
 808c8f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 808c8f8:	f7fe fbb4 	bl	808b064 <__aeabi_dmul>
 808c8fc:	460b      	mov	r3, r1
 808c8fe:	4303      	orrs	r3, r0
 808c900:	bf08      	it	eq
 808c902:	2322      	moveq	r3, #34	; 0x22
 808c904:	4680      	mov	r8, r0
 808c906:	4689      	mov	r9, r1
 808c908:	bf08      	it	eq
 808c90a:	f8ca 3000 	streq.w	r3, [sl]
 808c90e:	e62d      	b.n	808c56c <_strtod_l+0x49c>
 808c910:	f04f 32ff 	mov.w	r2, #4294967295
 808c914:	fa02 f303 	lsl.w	r3, r2, r3
 808c918:	ea03 0808 	and.w	r8, r3, r8
 808c91c:	e6db      	b.n	808c6d6 <_strtod_l+0x606>
 808c91e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 808c922:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 808c926:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 808c92a:	35e2      	adds	r5, #226	; 0xe2
 808c92c:	fa07 f505 	lsl.w	r5, r7, r5
 808c930:	970f      	str	r7, [sp, #60]	; 0x3c
 808c932:	e742      	b.n	808c7ba <_strtod_l+0x6ea>
 808c934:	2301      	movs	r3, #1
 808c936:	2500      	movs	r5, #0
 808c938:	930f      	str	r3, [sp, #60]	; 0x3c
 808c93a:	e73e      	b.n	808c7ba <_strtod_l+0x6ea>
 808c93c:	463a      	mov	r2, r7
 808c93e:	4650      	mov	r0, sl
 808c940:	991c      	ldr	r1, [sp, #112]	; 0x70
 808c942:	f000 ffb7 	bl	808d8b4 <__lshift>
 808c946:	901c      	str	r0, [sp, #112]	; 0x70
 808c948:	2800      	cmp	r0, #0
 808c94a:	f47f af64 	bne.w	808c816 <_strtod_l+0x746>
 808c94e:	e602      	b.n	808c556 <_strtod_l+0x486>
 808c950:	080902d8 	.word	0x080902d8
 808c954:	fffffc02 	.word	0xfffffc02
 808c958:	7ff00000 	.word	0x7ff00000
 808c95c:	39500000 	.word	0x39500000
 808c960:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808c964:	d166      	bne.n	808ca34 <_strtod_l+0x964>
 808c966:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808c968:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c96c:	b35a      	cbz	r2, 808c9c6 <_strtod_l+0x8f6>
 808c96e:	4a9c      	ldr	r2, [pc, #624]	; (808cbe0 <_strtod_l+0xb10>)
 808c970:	4293      	cmp	r3, r2
 808c972:	d12c      	bne.n	808c9ce <_strtod_l+0x8fe>
 808c974:	9b05      	ldr	r3, [sp, #20]
 808c976:	4640      	mov	r0, r8
 808c978:	b303      	cbz	r3, 808c9bc <_strtod_l+0x8ec>
 808c97a:	464b      	mov	r3, r9
 808c97c:	4a99      	ldr	r2, [pc, #612]	; (808cbe4 <_strtod_l+0xb14>)
 808c97e:	f04f 31ff 	mov.w	r1, #4294967295
 808c982:	401a      	ands	r2, r3
 808c984:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 808c988:	d81b      	bhi.n	808c9c2 <_strtod_l+0x8f2>
 808c98a:	0d12      	lsrs	r2, r2, #20
 808c98c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 808c990:	fa01 f303 	lsl.w	r3, r1, r3
 808c994:	4298      	cmp	r0, r3
 808c996:	d11a      	bne.n	808c9ce <_strtod_l+0x8fe>
 808c998:	4b93      	ldr	r3, [pc, #588]	; (808cbe8 <_strtod_l+0xb18>)
 808c99a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808c99c:	429a      	cmp	r2, r3
 808c99e:	d102      	bne.n	808c9a6 <_strtod_l+0x8d6>
 808c9a0:	3001      	adds	r0, #1
 808c9a2:	f43f add8 	beq.w	808c556 <_strtod_l+0x486>
 808c9a6:	f04f 0800 	mov.w	r8, #0
 808c9aa:	4b8e      	ldr	r3, [pc, #568]	; (808cbe4 <_strtod_l+0xb14>)
 808c9ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808c9ae:	401a      	ands	r2, r3
 808c9b0:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 808c9b4:	9b05      	ldr	r3, [sp, #20]
 808c9b6:	2b00      	cmp	r3, #0
 808c9b8:	d196      	bne.n	808c8e8 <_strtod_l+0x818>
 808c9ba:	e5d7      	b.n	808c56c <_strtod_l+0x49c>
 808c9bc:	f04f 33ff 	mov.w	r3, #4294967295
 808c9c0:	e7e8      	b.n	808c994 <_strtod_l+0x8c4>
 808c9c2:	460b      	mov	r3, r1
 808c9c4:	e7e6      	b.n	808c994 <_strtod_l+0x8c4>
 808c9c6:	ea53 0308 	orrs.w	r3, r3, r8
 808c9ca:	f43f af7d 	beq.w	808c8c8 <_strtod_l+0x7f8>
 808c9ce:	b1e5      	cbz	r5, 808ca0a <_strtod_l+0x93a>
 808c9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c9d2:	421d      	tst	r5, r3
 808c9d4:	d0ee      	beq.n	808c9b4 <_strtod_l+0x8e4>
 808c9d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808c9d8:	4640      	mov	r0, r8
 808c9da:	4649      	mov	r1, r9
 808c9dc:	9a05      	ldr	r2, [sp, #20]
 808c9de:	b1c3      	cbz	r3, 808ca12 <_strtod_l+0x942>
 808c9e0:	f7ff fb55 	bl	808c08e <sulp>
 808c9e4:	4602      	mov	r2, r0
 808c9e6:	460b      	mov	r3, r1
 808c9e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808c9ec:	f7fe f984 	bl	808acf8 <__adddf3>
 808c9f0:	4680      	mov	r8, r0
 808c9f2:	4689      	mov	r9, r1
 808c9f4:	e7de      	b.n	808c9b4 <_strtod_l+0x8e4>
 808c9f6:	4013      	ands	r3, r2
 808c9f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808c9fc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808ca00:	f04f 38ff 	mov.w	r8, #4294967295
 808ca04:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808ca08:	e7d4      	b.n	808c9b4 <_strtod_l+0x8e4>
 808ca0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808ca0c:	ea13 0f08 	tst.w	r3, r8
 808ca10:	e7e0      	b.n	808c9d4 <_strtod_l+0x904>
 808ca12:	f7ff fb3c 	bl	808c08e <sulp>
 808ca16:	4602      	mov	r2, r0
 808ca18:	460b      	mov	r3, r1
 808ca1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808ca1e:	f7fe f969 	bl	808acf4 <__aeabi_dsub>
 808ca22:	2200      	movs	r2, #0
 808ca24:	2300      	movs	r3, #0
 808ca26:	4680      	mov	r8, r0
 808ca28:	4689      	mov	r9, r1
 808ca2a:	f7fe fd83 	bl	808b534 <__aeabi_dcmpeq>
 808ca2e:	2800      	cmp	r0, #0
 808ca30:	d0c0      	beq.n	808c9b4 <_strtod_l+0x8e4>
 808ca32:	e602      	b.n	808c63a <_strtod_l+0x56a>
 808ca34:	4658      	mov	r0, fp
 808ca36:	9904      	ldr	r1, [sp, #16]
 808ca38:	f001 f8fb 	bl	808dc32 <__ratio>
 808ca3c:	2200      	movs	r2, #0
 808ca3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808ca42:	4606      	mov	r6, r0
 808ca44:	460f      	mov	r7, r1
 808ca46:	f7fe fd89 	bl	808b55c <__aeabi_dcmple>
 808ca4a:	2800      	cmp	r0, #0
 808ca4c:	d075      	beq.n	808cb3a <_strtod_l+0xa6a>
 808ca4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808ca50:	2b00      	cmp	r3, #0
 808ca52:	d047      	beq.n	808cae4 <_strtod_l+0xa14>
 808ca54:	2600      	movs	r6, #0
 808ca56:	4f65      	ldr	r7, [pc, #404]	; (808cbec <_strtod_l+0xb1c>)
 808ca58:	4d64      	ldr	r5, [pc, #400]	; (808cbec <_strtod_l+0xb1c>)
 808ca5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808ca5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 808ca60:	0d1b      	lsrs	r3, r3, #20
 808ca62:	051b      	lsls	r3, r3, #20
 808ca64:	930f      	str	r3, [sp, #60]	; 0x3c
 808ca66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808ca68:	4b61      	ldr	r3, [pc, #388]	; (808cbf0 <_strtod_l+0xb20>)
 808ca6a:	429a      	cmp	r2, r3
 808ca6c:	f040 80c8 	bne.w	808cc00 <_strtod_l+0xb30>
 808ca70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808ca74:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 808ca78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808ca7a:	4640      	mov	r0, r8
 808ca7c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 808ca80:	4649      	mov	r1, r9
 808ca82:	f001 f80d 	bl	808daa0 <__ulp>
 808ca86:	4602      	mov	r2, r0
 808ca88:	460b      	mov	r3, r1
 808ca8a:	4630      	mov	r0, r6
 808ca8c:	4639      	mov	r1, r7
 808ca8e:	f7fe fae9 	bl	808b064 <__aeabi_dmul>
 808ca92:	4642      	mov	r2, r8
 808ca94:	464b      	mov	r3, r9
 808ca96:	f7fe f92f 	bl	808acf8 <__adddf3>
 808ca9a:	460b      	mov	r3, r1
 808ca9c:	4951      	ldr	r1, [pc, #324]	; (808cbe4 <_strtod_l+0xb14>)
 808ca9e:	4a55      	ldr	r2, [pc, #340]	; (808cbf4 <_strtod_l+0xb24>)
 808caa0:	4019      	ands	r1, r3
 808caa2:	4291      	cmp	r1, r2
 808caa4:	4680      	mov	r8, r0
 808caa6:	d95e      	bls.n	808cb66 <_strtod_l+0xa96>
 808caa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808caaa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 808caae:	4293      	cmp	r3, r2
 808cab0:	d103      	bne.n	808caba <_strtod_l+0x9ea>
 808cab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808cab4:	3301      	adds	r3, #1
 808cab6:	f43f ad4e 	beq.w	808c556 <_strtod_l+0x486>
 808caba:	f04f 38ff 	mov.w	r8, #4294967295
 808cabe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 808cbe8 <_strtod_l+0xb18>
 808cac2:	4650      	mov	r0, sl
 808cac4:	991c      	ldr	r1, [sp, #112]	; 0x70
 808cac6:	f000 fd21 	bl	808d50c <_Bfree>
 808caca:	4650      	mov	r0, sl
 808cacc:	9906      	ldr	r1, [sp, #24]
 808cace:	f000 fd1d 	bl	808d50c <_Bfree>
 808cad2:	4650      	mov	r0, sl
 808cad4:	9904      	ldr	r1, [sp, #16]
 808cad6:	f000 fd19 	bl	808d50c <_Bfree>
 808cada:	4659      	mov	r1, fp
 808cadc:	4650      	mov	r0, sl
 808cade:	f000 fd15 	bl	808d50c <_Bfree>
 808cae2:	e61c      	b.n	808c71e <_strtod_l+0x64e>
 808cae4:	f1b8 0f00 	cmp.w	r8, #0
 808cae8:	d119      	bne.n	808cb1e <_strtod_l+0xa4e>
 808caea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808caec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 808caf0:	b9e3      	cbnz	r3, 808cb2c <_strtod_l+0xa5c>
 808caf2:	2200      	movs	r2, #0
 808caf4:	4630      	mov	r0, r6
 808caf6:	4639      	mov	r1, r7
 808caf8:	4b3c      	ldr	r3, [pc, #240]	; (808cbec <_strtod_l+0xb1c>)
 808cafa:	f7fe fd25 	bl	808b548 <__aeabi_dcmplt>
 808cafe:	b9c8      	cbnz	r0, 808cb34 <_strtod_l+0xa64>
 808cb00:	2200      	movs	r2, #0
 808cb02:	4630      	mov	r0, r6
 808cb04:	4639      	mov	r1, r7
 808cb06:	4b3c      	ldr	r3, [pc, #240]	; (808cbf8 <_strtod_l+0xb28>)
 808cb08:	f7fe faac 	bl	808b064 <__aeabi_dmul>
 808cb0c:	4604      	mov	r4, r0
 808cb0e:	460d      	mov	r5, r1
 808cb10:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808cb14:	9418      	str	r4, [sp, #96]	; 0x60
 808cb16:	9319      	str	r3, [sp, #100]	; 0x64
 808cb18:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 808cb1c:	e79d      	b.n	808ca5a <_strtod_l+0x98a>
 808cb1e:	f1b8 0f01 	cmp.w	r8, #1
 808cb22:	d103      	bne.n	808cb2c <_strtod_l+0xa5c>
 808cb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808cb26:	2b00      	cmp	r3, #0
 808cb28:	f43f ad87 	beq.w	808c63a <_strtod_l+0x56a>
 808cb2c:	2600      	movs	r6, #0
 808cb2e:	2400      	movs	r4, #0
 808cb30:	4f32      	ldr	r7, [pc, #200]	; (808cbfc <_strtod_l+0xb2c>)
 808cb32:	e791      	b.n	808ca58 <_strtod_l+0x988>
 808cb34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 808cb36:	4d30      	ldr	r5, [pc, #192]	; (808cbf8 <_strtod_l+0xb28>)
 808cb38:	e7ea      	b.n	808cb10 <_strtod_l+0xa40>
 808cb3a:	4b2f      	ldr	r3, [pc, #188]	; (808cbf8 <_strtod_l+0xb28>)
 808cb3c:	2200      	movs	r2, #0
 808cb3e:	4630      	mov	r0, r6
 808cb40:	4639      	mov	r1, r7
 808cb42:	f7fe fa8f 	bl	808b064 <__aeabi_dmul>
 808cb46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808cb48:	4604      	mov	r4, r0
 808cb4a:	460d      	mov	r5, r1
 808cb4c:	b933      	cbnz	r3, 808cb5c <_strtod_l+0xa8c>
 808cb4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808cb52:	9010      	str	r0, [sp, #64]	; 0x40
 808cb54:	9311      	str	r3, [sp, #68]	; 0x44
 808cb56:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808cb5a:	e77e      	b.n	808ca5a <_strtod_l+0x98a>
 808cb5c:	4602      	mov	r2, r0
 808cb5e:	460b      	mov	r3, r1
 808cb60:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808cb64:	e7f7      	b.n	808cb56 <_strtod_l+0xa86>
 808cb66:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 808cb6a:	9b05      	ldr	r3, [sp, #20]
 808cb6c:	2b00      	cmp	r3, #0
 808cb6e:	d1a8      	bne.n	808cac2 <_strtod_l+0x9f2>
 808cb70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808cb74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808cb76:	0d1b      	lsrs	r3, r3, #20
 808cb78:	051b      	lsls	r3, r3, #20
 808cb7a:	429a      	cmp	r2, r3
 808cb7c:	d1a1      	bne.n	808cac2 <_strtod_l+0x9f2>
 808cb7e:	4620      	mov	r0, r4
 808cb80:	4629      	mov	r1, r5
 808cb82:	f001 f8e3 	bl	808dd4c <__aeabi_d2lz>
 808cb86:	f7fe fa3f 	bl	808b008 <__aeabi_l2d>
 808cb8a:	4602      	mov	r2, r0
 808cb8c:	460b      	mov	r3, r1
 808cb8e:	4620      	mov	r0, r4
 808cb90:	4629      	mov	r1, r5
 808cb92:	f7fe f8af 	bl	808acf4 <__aeabi_dsub>
 808cb96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808cb98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808cb9c:	ea43 0308 	orr.w	r3, r3, r8
 808cba0:	4313      	orrs	r3, r2
 808cba2:	4604      	mov	r4, r0
 808cba4:	460d      	mov	r5, r1
 808cba6:	d066      	beq.n	808cc76 <_strtod_l+0xba6>
 808cba8:	a309      	add	r3, pc, #36	; (adr r3, 808cbd0 <_strtod_l+0xb00>)
 808cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cbae:	f7fe fccb 	bl	808b548 <__aeabi_dcmplt>
 808cbb2:	2800      	cmp	r0, #0
 808cbb4:	f47f acda 	bne.w	808c56c <_strtod_l+0x49c>
 808cbb8:	a307      	add	r3, pc, #28	; (adr r3, 808cbd8 <_strtod_l+0xb08>)
 808cbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cbbe:	4620      	mov	r0, r4
 808cbc0:	4629      	mov	r1, r5
 808cbc2:	f7fe fcdf 	bl	808b584 <__aeabi_dcmpgt>
 808cbc6:	2800      	cmp	r0, #0
 808cbc8:	f43f af7b 	beq.w	808cac2 <_strtod_l+0x9f2>
 808cbcc:	e4ce      	b.n	808c56c <_strtod_l+0x49c>
 808cbce:	bf00      	nop
 808cbd0:	94a03595 	.word	0x94a03595
 808cbd4:	3fdfffff 	.word	0x3fdfffff
 808cbd8:	35afe535 	.word	0x35afe535
 808cbdc:	3fe00000 	.word	0x3fe00000
 808cbe0:	000fffff 	.word	0x000fffff
 808cbe4:	7ff00000 	.word	0x7ff00000
 808cbe8:	7fefffff 	.word	0x7fefffff
 808cbec:	3ff00000 	.word	0x3ff00000
 808cbf0:	7fe00000 	.word	0x7fe00000
 808cbf4:	7c9fffff 	.word	0x7c9fffff
 808cbf8:	3fe00000 	.word	0x3fe00000
 808cbfc:	bff00000 	.word	0xbff00000
 808cc00:	9b05      	ldr	r3, [sp, #20]
 808cc02:	b313      	cbz	r3, 808cc4a <_strtod_l+0xb7a>
 808cc04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808cc06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808cc0a:	d81e      	bhi.n	808cc4a <_strtod_l+0xb7a>
 808cc0c:	a326      	add	r3, pc, #152	; (adr r3, 808cca8 <_strtod_l+0xbd8>)
 808cc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cc12:	4620      	mov	r0, r4
 808cc14:	4629      	mov	r1, r5
 808cc16:	f7fe fca1 	bl	808b55c <__aeabi_dcmple>
 808cc1a:	b190      	cbz	r0, 808cc42 <_strtod_l+0xb72>
 808cc1c:	4629      	mov	r1, r5
 808cc1e:	4620      	mov	r0, r4
 808cc20:	f7fe fcf8 	bl	808b614 <__aeabi_d2uiz>
 808cc24:	2801      	cmp	r0, #1
 808cc26:	bf38      	it	cc
 808cc28:	2001      	movcc	r0, #1
 808cc2a:	f7fe f9a1 	bl	808af70 <__aeabi_ui2d>
 808cc2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808cc30:	4604      	mov	r4, r0
 808cc32:	460d      	mov	r5, r1
 808cc34:	b9d3      	cbnz	r3, 808cc6c <_strtod_l+0xb9c>
 808cc36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808cc3a:	9012      	str	r0, [sp, #72]	; 0x48
 808cc3c:	9313      	str	r3, [sp, #76]	; 0x4c
 808cc3e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 808cc42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808cc44:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808cc48:	1a9f      	subs	r7, r3, r2
 808cc4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808cc4e:	f000 ff27 	bl	808daa0 <__ulp>
 808cc52:	4602      	mov	r2, r0
 808cc54:	460b      	mov	r3, r1
 808cc56:	4630      	mov	r0, r6
 808cc58:	4639      	mov	r1, r7
 808cc5a:	f7fe fa03 	bl	808b064 <__aeabi_dmul>
 808cc5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808cc62:	f7fe f849 	bl	808acf8 <__adddf3>
 808cc66:	4680      	mov	r8, r0
 808cc68:	4689      	mov	r9, r1
 808cc6a:	e77e      	b.n	808cb6a <_strtod_l+0xa9a>
 808cc6c:	4602      	mov	r2, r0
 808cc6e:	460b      	mov	r3, r1
 808cc70:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 808cc74:	e7e3      	b.n	808cc3e <_strtod_l+0xb6e>
 808cc76:	a30e      	add	r3, pc, #56	; (adr r3, 808ccb0 <_strtod_l+0xbe0>)
 808cc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cc7c:	f7fe fc64 	bl	808b548 <__aeabi_dcmplt>
 808cc80:	e7a1      	b.n	808cbc6 <_strtod_l+0xaf6>
 808cc82:	2300      	movs	r3, #0
 808cc84:	930c      	str	r3, [sp, #48]	; 0x30
 808cc86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808cc88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808cc8a:	6013      	str	r3, [r2, #0]
 808cc8c:	f7ff ba65 	b.w	808c15a <_strtod_l+0x8a>
 808cc90:	2b65      	cmp	r3, #101	; 0x65
 808cc92:	f43f ab5c 	beq.w	808c34e <_strtod_l+0x27e>
 808cc96:	2b45      	cmp	r3, #69	; 0x45
 808cc98:	f43f ab59 	beq.w	808c34e <_strtod_l+0x27e>
 808cc9c:	2201      	movs	r2, #1
 808cc9e:	f7ff bb8d 	b.w	808c3bc <_strtod_l+0x2ec>
 808cca2:	bf00      	nop
 808cca4:	f3af 8000 	nop.w
 808cca8:	ffc00000 	.word	0xffc00000
 808ccac:	41dfffff 	.word	0x41dfffff
 808ccb0:	94a03595 	.word	0x94a03595
 808ccb4:	3fcfffff 	.word	0x3fcfffff

0808ccb8 <strtod>:
 808ccb8:	460a      	mov	r2, r1
 808ccba:	4601      	mov	r1, r0
 808ccbc:	4802      	ldr	r0, [pc, #8]	; (808ccc8 <strtod+0x10>)
 808ccbe:	4b03      	ldr	r3, [pc, #12]	; (808cccc <strtod+0x14>)
 808ccc0:	6800      	ldr	r0, [r0, #0]
 808ccc2:	f7ff ba05 	b.w	808c0d0 <_strtod_l>
 808ccc6:	bf00      	nop
 808ccc8:	200000d8 	.word	0x200000d8
 808cccc:	20000140 	.word	0x20000140

0808ccd0 <_strtol_l.isra.0>:
 808ccd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808ccd4:	468c      	mov	ip, r1
 808ccd6:	4686      	mov	lr, r0
 808ccd8:	4e39      	ldr	r6, [pc, #228]	; (808cdc0 <_strtol_l.isra.0+0xf0>)
 808ccda:	4660      	mov	r0, ip
 808ccdc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808cce0:	5da5      	ldrb	r5, [r4, r6]
 808cce2:	f015 0508 	ands.w	r5, r5, #8
 808cce6:	d1f8      	bne.n	808ccda <_strtol_l.isra.0+0xa>
 808cce8:	2c2d      	cmp	r4, #45	; 0x2d
 808ccea:	d133      	bne.n	808cd54 <_strtol_l.isra.0+0x84>
 808ccec:	f04f 0801 	mov.w	r8, #1
 808ccf0:	f89c 4000 	ldrb.w	r4, [ip]
 808ccf4:	f100 0c02 	add.w	ip, r0, #2
 808ccf8:	2b00      	cmp	r3, #0
 808ccfa:	d05c      	beq.n	808cdb6 <_strtol_l.isra.0+0xe6>
 808ccfc:	2b10      	cmp	r3, #16
 808ccfe:	d10c      	bne.n	808cd1a <_strtol_l.isra.0+0x4a>
 808cd00:	2c30      	cmp	r4, #48	; 0x30
 808cd02:	d10a      	bne.n	808cd1a <_strtol_l.isra.0+0x4a>
 808cd04:	f89c 0000 	ldrb.w	r0, [ip]
 808cd08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808cd0c:	2858      	cmp	r0, #88	; 0x58
 808cd0e:	d14d      	bne.n	808cdac <_strtol_l.isra.0+0xdc>
 808cd10:	2310      	movs	r3, #16
 808cd12:	f89c 4001 	ldrb.w	r4, [ip, #1]
 808cd16:	f10c 0c02 	add.w	ip, ip, #2
 808cd1a:	2600      	movs	r6, #0
 808cd1c:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 808cd20:	3f01      	subs	r7, #1
 808cd22:	fbb7 f9f3 	udiv	r9, r7, r3
 808cd26:	4630      	mov	r0, r6
 808cd28:	fb03 7a19 	mls	sl, r3, r9, r7
 808cd2c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 808cd30:	2d09      	cmp	r5, #9
 808cd32:	d818      	bhi.n	808cd66 <_strtol_l.isra.0+0x96>
 808cd34:	462c      	mov	r4, r5
 808cd36:	42a3      	cmp	r3, r4
 808cd38:	dd24      	ble.n	808cd84 <_strtol_l.isra.0+0xb4>
 808cd3a:	1c75      	adds	r5, r6, #1
 808cd3c:	d007      	beq.n	808cd4e <_strtol_l.isra.0+0x7e>
 808cd3e:	4581      	cmp	r9, r0
 808cd40:	d31d      	bcc.n	808cd7e <_strtol_l.isra.0+0xae>
 808cd42:	d101      	bne.n	808cd48 <_strtol_l.isra.0+0x78>
 808cd44:	45a2      	cmp	sl, r4
 808cd46:	db1a      	blt.n	808cd7e <_strtol_l.isra.0+0xae>
 808cd48:	2601      	movs	r6, #1
 808cd4a:	fb00 4003 	mla	r0, r0, r3, r4
 808cd4e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808cd52:	e7eb      	b.n	808cd2c <_strtol_l.isra.0+0x5c>
 808cd54:	2c2b      	cmp	r4, #43	; 0x2b
 808cd56:	bf08      	it	eq
 808cd58:	f89c 4000 	ldrbeq.w	r4, [ip]
 808cd5c:	46a8      	mov	r8, r5
 808cd5e:	bf08      	it	eq
 808cd60:	f100 0c02 	addeq.w	ip, r0, #2
 808cd64:	e7c8      	b.n	808ccf8 <_strtol_l.isra.0+0x28>
 808cd66:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 808cd6a:	2d19      	cmp	r5, #25
 808cd6c:	d801      	bhi.n	808cd72 <_strtol_l.isra.0+0xa2>
 808cd6e:	3c37      	subs	r4, #55	; 0x37
 808cd70:	e7e1      	b.n	808cd36 <_strtol_l.isra.0+0x66>
 808cd72:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 808cd76:	2d19      	cmp	r5, #25
 808cd78:	d804      	bhi.n	808cd84 <_strtol_l.isra.0+0xb4>
 808cd7a:	3c57      	subs	r4, #87	; 0x57
 808cd7c:	e7db      	b.n	808cd36 <_strtol_l.isra.0+0x66>
 808cd7e:	f04f 36ff 	mov.w	r6, #4294967295
 808cd82:	e7e4      	b.n	808cd4e <_strtol_l.isra.0+0x7e>
 808cd84:	1c73      	adds	r3, r6, #1
 808cd86:	d106      	bne.n	808cd96 <_strtol_l.isra.0+0xc6>
 808cd88:	2322      	movs	r3, #34	; 0x22
 808cd8a:	4638      	mov	r0, r7
 808cd8c:	f8ce 3000 	str.w	r3, [lr]
 808cd90:	b942      	cbnz	r2, 808cda4 <_strtol_l.isra.0+0xd4>
 808cd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cd96:	f1b8 0f00 	cmp.w	r8, #0
 808cd9a:	d000      	beq.n	808cd9e <_strtol_l.isra.0+0xce>
 808cd9c:	4240      	negs	r0, r0
 808cd9e:	2a00      	cmp	r2, #0
 808cda0:	d0f7      	beq.n	808cd92 <_strtol_l.isra.0+0xc2>
 808cda2:	b10e      	cbz	r6, 808cda8 <_strtol_l.isra.0+0xd8>
 808cda4:	f10c 31ff 	add.w	r1, ip, #4294967295
 808cda8:	6011      	str	r1, [r2, #0]
 808cdaa:	e7f2      	b.n	808cd92 <_strtol_l.isra.0+0xc2>
 808cdac:	2430      	movs	r4, #48	; 0x30
 808cdae:	2b00      	cmp	r3, #0
 808cdb0:	d1b3      	bne.n	808cd1a <_strtol_l.isra.0+0x4a>
 808cdb2:	2308      	movs	r3, #8
 808cdb4:	e7b1      	b.n	808cd1a <_strtol_l.isra.0+0x4a>
 808cdb6:	2c30      	cmp	r4, #48	; 0x30
 808cdb8:	d0a4      	beq.n	808cd04 <_strtol_l.isra.0+0x34>
 808cdba:	230a      	movs	r3, #10
 808cdbc:	e7ad      	b.n	808cd1a <_strtol_l.isra.0+0x4a>
 808cdbe:	bf00      	nop
 808cdc0:	08090301 	.word	0x08090301

0808cdc4 <strtol>:
 808cdc4:	4613      	mov	r3, r2
 808cdc6:	460a      	mov	r2, r1
 808cdc8:	4601      	mov	r1, r0
 808cdca:	4802      	ldr	r0, [pc, #8]	; (808cdd4 <strtol+0x10>)
 808cdcc:	6800      	ldr	r0, [r0, #0]
 808cdce:	f7ff bf7f 	b.w	808ccd0 <_strtol_l.isra.0>
 808cdd2:	bf00      	nop
 808cdd4:	200000d8 	.word	0x200000d8

0808cdd8 <rshift>:
 808cdd8:	6903      	ldr	r3, [r0, #16]
 808cdda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808cdde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 808cde2:	f100 0414 	add.w	r4, r0, #20
 808cde6:	ea4f 1261 	mov.w	r2, r1, asr #5
 808cdea:	dd46      	ble.n	808ce7a <rshift+0xa2>
 808cdec:	f011 011f 	ands.w	r1, r1, #31
 808cdf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 808cdf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 808cdf8:	d10c      	bne.n	808ce14 <rshift+0x3c>
 808cdfa:	4629      	mov	r1, r5
 808cdfc:	f100 0710 	add.w	r7, r0, #16
 808ce00:	42b1      	cmp	r1, r6
 808ce02:	d335      	bcc.n	808ce70 <rshift+0x98>
 808ce04:	1a9b      	subs	r3, r3, r2
 808ce06:	009b      	lsls	r3, r3, #2
 808ce08:	1eea      	subs	r2, r5, #3
 808ce0a:	4296      	cmp	r6, r2
 808ce0c:	bf38      	it	cc
 808ce0e:	2300      	movcc	r3, #0
 808ce10:	4423      	add	r3, r4
 808ce12:	e015      	b.n	808ce40 <rshift+0x68>
 808ce14:	46a1      	mov	r9, r4
 808ce16:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 808ce1a:	f1c1 0820 	rsb	r8, r1, #32
 808ce1e:	40cf      	lsrs	r7, r1
 808ce20:	f105 0e04 	add.w	lr, r5, #4
 808ce24:	4576      	cmp	r6, lr
 808ce26:	46f4      	mov	ip, lr
 808ce28:	d816      	bhi.n	808ce58 <rshift+0x80>
 808ce2a:	1a9b      	subs	r3, r3, r2
 808ce2c:	009a      	lsls	r2, r3, #2
 808ce2e:	3a04      	subs	r2, #4
 808ce30:	3501      	adds	r5, #1
 808ce32:	42ae      	cmp	r6, r5
 808ce34:	bf38      	it	cc
 808ce36:	2200      	movcc	r2, #0
 808ce38:	18a3      	adds	r3, r4, r2
 808ce3a:	50a7      	str	r7, [r4, r2]
 808ce3c:	b107      	cbz	r7, 808ce40 <rshift+0x68>
 808ce3e:	3304      	adds	r3, #4
 808ce40:	42a3      	cmp	r3, r4
 808ce42:	eba3 0204 	sub.w	r2, r3, r4
 808ce46:	bf08      	it	eq
 808ce48:	2300      	moveq	r3, #0
 808ce4a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 808ce4e:	6102      	str	r2, [r0, #16]
 808ce50:	bf08      	it	eq
 808ce52:	6143      	streq	r3, [r0, #20]
 808ce54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808ce58:	f8dc c000 	ldr.w	ip, [ip]
 808ce5c:	fa0c fc08 	lsl.w	ip, ip, r8
 808ce60:	ea4c 0707 	orr.w	r7, ip, r7
 808ce64:	f849 7b04 	str.w	r7, [r9], #4
 808ce68:	f85e 7b04 	ldr.w	r7, [lr], #4
 808ce6c:	40cf      	lsrs	r7, r1
 808ce6e:	e7d9      	b.n	808ce24 <rshift+0x4c>
 808ce70:	f851 cb04 	ldr.w	ip, [r1], #4
 808ce74:	f847 cf04 	str.w	ip, [r7, #4]!
 808ce78:	e7c2      	b.n	808ce00 <rshift+0x28>
 808ce7a:	4623      	mov	r3, r4
 808ce7c:	e7e0      	b.n	808ce40 <rshift+0x68>

0808ce7e <__hexdig_fun>:
 808ce7e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808ce82:	2b09      	cmp	r3, #9
 808ce84:	d802      	bhi.n	808ce8c <__hexdig_fun+0xe>
 808ce86:	3820      	subs	r0, #32
 808ce88:	b2c0      	uxtb	r0, r0
 808ce8a:	4770      	bx	lr
 808ce8c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808ce90:	2b05      	cmp	r3, #5
 808ce92:	d801      	bhi.n	808ce98 <__hexdig_fun+0x1a>
 808ce94:	3847      	subs	r0, #71	; 0x47
 808ce96:	e7f7      	b.n	808ce88 <__hexdig_fun+0xa>
 808ce98:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808ce9c:	2b05      	cmp	r3, #5
 808ce9e:	d801      	bhi.n	808cea4 <__hexdig_fun+0x26>
 808cea0:	3827      	subs	r0, #39	; 0x27
 808cea2:	e7f1      	b.n	808ce88 <__hexdig_fun+0xa>
 808cea4:	2000      	movs	r0, #0
 808cea6:	4770      	bx	lr

0808cea8 <__gethex>:
 808cea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ceac:	b08b      	sub	sp, #44	; 0x2c
 808ceae:	9306      	str	r3, [sp, #24]
 808ceb0:	4bba      	ldr	r3, [pc, #744]	; (808d19c <__gethex+0x2f4>)
 808ceb2:	9002      	str	r0, [sp, #8]
 808ceb4:	681b      	ldr	r3, [r3, #0]
 808ceb6:	468b      	mov	fp, r1
 808ceb8:	4618      	mov	r0, r3
 808ceba:	4690      	mov	r8, r2
 808cebc:	9303      	str	r3, [sp, #12]
 808cebe:	f7ff f8a2 	bl	808c006 <strlen>
 808cec2:	4682      	mov	sl, r0
 808cec4:	9b03      	ldr	r3, [sp, #12]
 808cec6:	f8db 2000 	ldr.w	r2, [fp]
 808ceca:	4403      	add	r3, r0
 808cecc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808ced0:	9307      	str	r3, [sp, #28]
 808ced2:	1c93      	adds	r3, r2, #2
 808ced4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 808ced8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 808cedc:	32fe      	adds	r2, #254	; 0xfe
 808cede:	18d1      	adds	r1, r2, r3
 808cee0:	461f      	mov	r7, r3
 808cee2:	f813 0b01 	ldrb.w	r0, [r3], #1
 808cee6:	9101      	str	r1, [sp, #4]
 808cee8:	2830      	cmp	r0, #48	; 0x30
 808ceea:	d0f8      	beq.n	808cede <__gethex+0x36>
 808ceec:	f7ff ffc7 	bl	808ce7e <__hexdig_fun>
 808cef0:	4604      	mov	r4, r0
 808cef2:	2800      	cmp	r0, #0
 808cef4:	d13a      	bne.n	808cf6c <__gethex+0xc4>
 808cef6:	4652      	mov	r2, sl
 808cef8:	4638      	mov	r0, r7
 808cefa:	9903      	ldr	r1, [sp, #12]
 808cefc:	f7ff f88b 	bl	808c016 <strncmp>
 808cf00:	4605      	mov	r5, r0
 808cf02:	2800      	cmp	r0, #0
 808cf04:	d166      	bne.n	808cfd4 <__gethex+0x12c>
 808cf06:	f817 000a 	ldrb.w	r0, [r7, sl]
 808cf0a:	eb07 060a 	add.w	r6, r7, sl
 808cf0e:	f7ff ffb6 	bl	808ce7e <__hexdig_fun>
 808cf12:	2800      	cmp	r0, #0
 808cf14:	d060      	beq.n	808cfd8 <__gethex+0x130>
 808cf16:	4633      	mov	r3, r6
 808cf18:	7818      	ldrb	r0, [r3, #0]
 808cf1a:	461f      	mov	r7, r3
 808cf1c:	2830      	cmp	r0, #48	; 0x30
 808cf1e:	f103 0301 	add.w	r3, r3, #1
 808cf22:	d0f9      	beq.n	808cf18 <__gethex+0x70>
 808cf24:	f7ff ffab 	bl	808ce7e <__hexdig_fun>
 808cf28:	2301      	movs	r3, #1
 808cf2a:	fab0 f480 	clz	r4, r0
 808cf2e:	4635      	mov	r5, r6
 808cf30:	0964      	lsrs	r4, r4, #5
 808cf32:	9301      	str	r3, [sp, #4]
 808cf34:	463a      	mov	r2, r7
 808cf36:	4616      	mov	r6, r2
 808cf38:	7830      	ldrb	r0, [r6, #0]
 808cf3a:	3201      	adds	r2, #1
 808cf3c:	f7ff ff9f 	bl	808ce7e <__hexdig_fun>
 808cf40:	2800      	cmp	r0, #0
 808cf42:	d1f8      	bne.n	808cf36 <__gethex+0x8e>
 808cf44:	4652      	mov	r2, sl
 808cf46:	4630      	mov	r0, r6
 808cf48:	9903      	ldr	r1, [sp, #12]
 808cf4a:	f7ff f864 	bl	808c016 <strncmp>
 808cf4e:	b980      	cbnz	r0, 808cf72 <__gethex+0xca>
 808cf50:	b94d      	cbnz	r5, 808cf66 <__gethex+0xbe>
 808cf52:	eb06 050a 	add.w	r5, r6, sl
 808cf56:	462a      	mov	r2, r5
 808cf58:	4616      	mov	r6, r2
 808cf5a:	7830      	ldrb	r0, [r6, #0]
 808cf5c:	3201      	adds	r2, #1
 808cf5e:	f7ff ff8e 	bl	808ce7e <__hexdig_fun>
 808cf62:	2800      	cmp	r0, #0
 808cf64:	d1f8      	bne.n	808cf58 <__gethex+0xb0>
 808cf66:	1bad      	subs	r5, r5, r6
 808cf68:	00ad      	lsls	r5, r5, #2
 808cf6a:	e004      	b.n	808cf76 <__gethex+0xce>
 808cf6c:	2400      	movs	r4, #0
 808cf6e:	4625      	mov	r5, r4
 808cf70:	e7e0      	b.n	808cf34 <__gethex+0x8c>
 808cf72:	2d00      	cmp	r5, #0
 808cf74:	d1f7      	bne.n	808cf66 <__gethex+0xbe>
 808cf76:	7833      	ldrb	r3, [r6, #0]
 808cf78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808cf7c:	2b50      	cmp	r3, #80	; 0x50
 808cf7e:	d139      	bne.n	808cff4 <__gethex+0x14c>
 808cf80:	7873      	ldrb	r3, [r6, #1]
 808cf82:	2b2b      	cmp	r3, #43	; 0x2b
 808cf84:	d02a      	beq.n	808cfdc <__gethex+0x134>
 808cf86:	2b2d      	cmp	r3, #45	; 0x2d
 808cf88:	d02c      	beq.n	808cfe4 <__gethex+0x13c>
 808cf8a:	f04f 0900 	mov.w	r9, #0
 808cf8e:	1c71      	adds	r1, r6, #1
 808cf90:	7808      	ldrb	r0, [r1, #0]
 808cf92:	f7ff ff74 	bl	808ce7e <__hexdig_fun>
 808cf96:	1e43      	subs	r3, r0, #1
 808cf98:	b2db      	uxtb	r3, r3
 808cf9a:	2b18      	cmp	r3, #24
 808cf9c:	d82a      	bhi.n	808cff4 <__gethex+0x14c>
 808cf9e:	f1a0 0210 	sub.w	r2, r0, #16
 808cfa2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808cfa6:	f7ff ff6a 	bl	808ce7e <__hexdig_fun>
 808cfaa:	1e43      	subs	r3, r0, #1
 808cfac:	b2db      	uxtb	r3, r3
 808cfae:	2b18      	cmp	r3, #24
 808cfb0:	d91b      	bls.n	808cfea <__gethex+0x142>
 808cfb2:	f1b9 0f00 	cmp.w	r9, #0
 808cfb6:	d000      	beq.n	808cfba <__gethex+0x112>
 808cfb8:	4252      	negs	r2, r2
 808cfba:	4415      	add	r5, r2
 808cfbc:	f8cb 1000 	str.w	r1, [fp]
 808cfc0:	b1d4      	cbz	r4, 808cff8 <__gethex+0x150>
 808cfc2:	9b01      	ldr	r3, [sp, #4]
 808cfc4:	2b00      	cmp	r3, #0
 808cfc6:	bf14      	ite	ne
 808cfc8:	2700      	movne	r7, #0
 808cfca:	2706      	moveq	r7, #6
 808cfcc:	4638      	mov	r0, r7
 808cfce:	b00b      	add	sp, #44	; 0x2c
 808cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cfd4:	463e      	mov	r6, r7
 808cfd6:	4625      	mov	r5, r4
 808cfd8:	2401      	movs	r4, #1
 808cfda:	e7cc      	b.n	808cf76 <__gethex+0xce>
 808cfdc:	f04f 0900 	mov.w	r9, #0
 808cfe0:	1cb1      	adds	r1, r6, #2
 808cfe2:	e7d5      	b.n	808cf90 <__gethex+0xe8>
 808cfe4:	f04f 0901 	mov.w	r9, #1
 808cfe8:	e7fa      	b.n	808cfe0 <__gethex+0x138>
 808cfea:	230a      	movs	r3, #10
 808cfec:	fb03 0202 	mla	r2, r3, r2, r0
 808cff0:	3a10      	subs	r2, #16
 808cff2:	e7d6      	b.n	808cfa2 <__gethex+0xfa>
 808cff4:	4631      	mov	r1, r6
 808cff6:	e7e1      	b.n	808cfbc <__gethex+0x114>
 808cff8:	4621      	mov	r1, r4
 808cffa:	1bf3      	subs	r3, r6, r7
 808cffc:	3b01      	subs	r3, #1
 808cffe:	2b07      	cmp	r3, #7
 808d000:	dc50      	bgt.n	808d0a4 <__gethex+0x1fc>
 808d002:	9802      	ldr	r0, [sp, #8]
 808d004:	f000 fa4e 	bl	808d4a4 <_Balloc>
 808d008:	f04f 0b00 	mov.w	fp, #0
 808d00c:	4604      	mov	r4, r0
 808d00e:	f100 0914 	add.w	r9, r0, #20
 808d012:	f1ca 0301 	rsb	r3, sl, #1
 808d016:	f8cd 9010 	str.w	r9, [sp, #16]
 808d01a:	f8cd b004 	str.w	fp, [sp, #4]
 808d01e:	9308      	str	r3, [sp, #32]
 808d020:	42b7      	cmp	r7, r6
 808d022:	d342      	bcc.n	808d0aa <__gethex+0x202>
 808d024:	9f04      	ldr	r7, [sp, #16]
 808d026:	9b01      	ldr	r3, [sp, #4]
 808d028:	f847 3b04 	str.w	r3, [r7], #4
 808d02c:	eba7 0709 	sub.w	r7, r7, r9
 808d030:	10bf      	asrs	r7, r7, #2
 808d032:	6127      	str	r7, [r4, #16]
 808d034:	4618      	mov	r0, r3
 808d036:	f000 fafc 	bl	808d632 <__hi0bits>
 808d03a:	017f      	lsls	r7, r7, #5
 808d03c:	f8d8 6000 	ldr.w	r6, [r8]
 808d040:	1a3f      	subs	r7, r7, r0
 808d042:	42b7      	cmp	r7, r6
 808d044:	dd65      	ble.n	808d112 <__gethex+0x26a>
 808d046:	1bbf      	subs	r7, r7, r6
 808d048:	4639      	mov	r1, r7
 808d04a:	4620      	mov	r0, r4
 808d04c:	f000 fe42 	bl	808dcd4 <__any_on>
 808d050:	4682      	mov	sl, r0
 808d052:	b1a8      	cbz	r0, 808d080 <__gethex+0x1d8>
 808d054:	f04f 0a01 	mov.w	sl, #1
 808d058:	1e7b      	subs	r3, r7, #1
 808d05a:	1159      	asrs	r1, r3, #5
 808d05c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 808d060:	f003 021f 	and.w	r2, r3, #31
 808d064:	fa0a f202 	lsl.w	r2, sl, r2
 808d068:	420a      	tst	r2, r1
 808d06a:	d009      	beq.n	808d080 <__gethex+0x1d8>
 808d06c:	4553      	cmp	r3, sl
 808d06e:	dd05      	ble.n	808d07c <__gethex+0x1d4>
 808d070:	4620      	mov	r0, r4
 808d072:	1eb9      	subs	r1, r7, #2
 808d074:	f000 fe2e 	bl	808dcd4 <__any_on>
 808d078:	2800      	cmp	r0, #0
 808d07a:	d147      	bne.n	808d10c <__gethex+0x264>
 808d07c:	f04f 0a02 	mov.w	sl, #2
 808d080:	4639      	mov	r1, r7
 808d082:	4620      	mov	r0, r4
 808d084:	f7ff fea8 	bl	808cdd8 <rshift>
 808d088:	443d      	add	r5, r7
 808d08a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d08e:	42ab      	cmp	r3, r5
 808d090:	da4d      	bge.n	808d12e <__gethex+0x286>
 808d092:	4621      	mov	r1, r4
 808d094:	9802      	ldr	r0, [sp, #8]
 808d096:	f000 fa39 	bl	808d50c <_Bfree>
 808d09a:	2300      	movs	r3, #0
 808d09c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d09e:	27a3      	movs	r7, #163	; 0xa3
 808d0a0:	6013      	str	r3, [r2, #0]
 808d0a2:	e793      	b.n	808cfcc <__gethex+0x124>
 808d0a4:	3101      	adds	r1, #1
 808d0a6:	105b      	asrs	r3, r3, #1
 808d0a8:	e7a9      	b.n	808cffe <__gethex+0x156>
 808d0aa:	1e73      	subs	r3, r6, #1
 808d0ac:	9a07      	ldr	r2, [sp, #28]
 808d0ae:	9305      	str	r3, [sp, #20]
 808d0b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808d0b4:	4293      	cmp	r3, r2
 808d0b6:	d019      	beq.n	808d0ec <__gethex+0x244>
 808d0b8:	f1bb 0f20 	cmp.w	fp, #32
 808d0bc:	d107      	bne.n	808d0ce <__gethex+0x226>
 808d0be:	9b04      	ldr	r3, [sp, #16]
 808d0c0:	9a01      	ldr	r2, [sp, #4]
 808d0c2:	f843 2b04 	str.w	r2, [r3], #4
 808d0c6:	9304      	str	r3, [sp, #16]
 808d0c8:	2300      	movs	r3, #0
 808d0ca:	469b      	mov	fp, r3
 808d0cc:	9301      	str	r3, [sp, #4]
 808d0ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808d0d2:	f7ff fed4 	bl	808ce7e <__hexdig_fun>
 808d0d6:	9b01      	ldr	r3, [sp, #4]
 808d0d8:	f000 000f 	and.w	r0, r0, #15
 808d0dc:	fa00 f00b 	lsl.w	r0, r0, fp
 808d0e0:	4303      	orrs	r3, r0
 808d0e2:	9301      	str	r3, [sp, #4]
 808d0e4:	f10b 0b04 	add.w	fp, fp, #4
 808d0e8:	9b05      	ldr	r3, [sp, #20]
 808d0ea:	e00d      	b.n	808d108 <__gethex+0x260>
 808d0ec:	9b05      	ldr	r3, [sp, #20]
 808d0ee:	9a08      	ldr	r2, [sp, #32]
 808d0f0:	4413      	add	r3, r2
 808d0f2:	42bb      	cmp	r3, r7
 808d0f4:	d3e0      	bcc.n	808d0b8 <__gethex+0x210>
 808d0f6:	4618      	mov	r0, r3
 808d0f8:	4652      	mov	r2, sl
 808d0fa:	9903      	ldr	r1, [sp, #12]
 808d0fc:	9309      	str	r3, [sp, #36]	; 0x24
 808d0fe:	f7fe ff8a 	bl	808c016 <strncmp>
 808d102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d104:	2800      	cmp	r0, #0
 808d106:	d1d7      	bne.n	808d0b8 <__gethex+0x210>
 808d108:	461e      	mov	r6, r3
 808d10a:	e789      	b.n	808d020 <__gethex+0x178>
 808d10c:	f04f 0a03 	mov.w	sl, #3
 808d110:	e7b6      	b.n	808d080 <__gethex+0x1d8>
 808d112:	da09      	bge.n	808d128 <__gethex+0x280>
 808d114:	1bf7      	subs	r7, r6, r7
 808d116:	4621      	mov	r1, r4
 808d118:	463a      	mov	r2, r7
 808d11a:	9802      	ldr	r0, [sp, #8]
 808d11c:	f000 fbca 	bl	808d8b4 <__lshift>
 808d120:	4604      	mov	r4, r0
 808d122:	1bed      	subs	r5, r5, r7
 808d124:	f100 0914 	add.w	r9, r0, #20
 808d128:	f04f 0a00 	mov.w	sl, #0
 808d12c:	e7ad      	b.n	808d08a <__gethex+0x1e2>
 808d12e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808d132:	42a8      	cmp	r0, r5
 808d134:	dd6e      	ble.n	808d214 <__gethex+0x36c>
 808d136:	1b45      	subs	r5, r0, r5
 808d138:	42ae      	cmp	r6, r5
 808d13a:	dc31      	bgt.n	808d1a0 <__gethex+0x2f8>
 808d13c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d140:	2b02      	cmp	r3, #2
 808d142:	d022      	beq.n	808d18a <__gethex+0x2e2>
 808d144:	2b03      	cmp	r3, #3
 808d146:	d024      	beq.n	808d192 <__gethex+0x2ea>
 808d148:	2b01      	cmp	r3, #1
 808d14a:	d115      	bne.n	808d178 <__gethex+0x2d0>
 808d14c:	42ae      	cmp	r6, r5
 808d14e:	d113      	bne.n	808d178 <__gethex+0x2d0>
 808d150:	2e01      	cmp	r6, #1
 808d152:	d10b      	bne.n	808d16c <__gethex+0x2c4>
 808d154:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808d158:	9a06      	ldr	r2, [sp, #24]
 808d15a:	2762      	movs	r7, #98	; 0x62
 808d15c:	6013      	str	r3, [r2, #0]
 808d15e:	2301      	movs	r3, #1
 808d160:	6123      	str	r3, [r4, #16]
 808d162:	f8c9 3000 	str.w	r3, [r9]
 808d166:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d168:	601c      	str	r4, [r3, #0]
 808d16a:	e72f      	b.n	808cfcc <__gethex+0x124>
 808d16c:	4620      	mov	r0, r4
 808d16e:	1e71      	subs	r1, r6, #1
 808d170:	f000 fdb0 	bl	808dcd4 <__any_on>
 808d174:	2800      	cmp	r0, #0
 808d176:	d1ed      	bne.n	808d154 <__gethex+0x2ac>
 808d178:	4621      	mov	r1, r4
 808d17a:	9802      	ldr	r0, [sp, #8]
 808d17c:	f000 f9c6 	bl	808d50c <_Bfree>
 808d180:	2300      	movs	r3, #0
 808d182:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d184:	2750      	movs	r7, #80	; 0x50
 808d186:	6013      	str	r3, [r2, #0]
 808d188:	e720      	b.n	808cfcc <__gethex+0x124>
 808d18a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d18c:	2b00      	cmp	r3, #0
 808d18e:	d1f3      	bne.n	808d178 <__gethex+0x2d0>
 808d190:	e7e0      	b.n	808d154 <__gethex+0x2ac>
 808d192:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d194:	2b00      	cmp	r3, #0
 808d196:	d1dd      	bne.n	808d154 <__gethex+0x2ac>
 808d198:	e7ee      	b.n	808d178 <__gethex+0x2d0>
 808d19a:	bf00      	nop
 808d19c:	08090404 	.word	0x08090404
 808d1a0:	1e6f      	subs	r7, r5, #1
 808d1a2:	f1ba 0f00 	cmp.w	sl, #0
 808d1a6:	d132      	bne.n	808d20e <__gethex+0x366>
 808d1a8:	b127      	cbz	r7, 808d1b4 <__gethex+0x30c>
 808d1aa:	4639      	mov	r1, r7
 808d1ac:	4620      	mov	r0, r4
 808d1ae:	f000 fd91 	bl	808dcd4 <__any_on>
 808d1b2:	4682      	mov	sl, r0
 808d1b4:	2101      	movs	r1, #1
 808d1b6:	117b      	asrs	r3, r7, #5
 808d1b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 808d1bc:	f007 071f 	and.w	r7, r7, #31
 808d1c0:	fa01 f707 	lsl.w	r7, r1, r7
 808d1c4:	421f      	tst	r7, r3
 808d1c6:	f04f 0702 	mov.w	r7, #2
 808d1ca:	4629      	mov	r1, r5
 808d1cc:	4620      	mov	r0, r4
 808d1ce:	bf18      	it	ne
 808d1d0:	f04a 0a02 	orrne.w	sl, sl, #2
 808d1d4:	1b76      	subs	r6, r6, r5
 808d1d6:	f7ff fdff 	bl	808cdd8 <rshift>
 808d1da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 808d1de:	f1ba 0f00 	cmp.w	sl, #0
 808d1e2:	d048      	beq.n	808d276 <__gethex+0x3ce>
 808d1e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d1e8:	2b02      	cmp	r3, #2
 808d1ea:	d015      	beq.n	808d218 <__gethex+0x370>
 808d1ec:	2b03      	cmp	r3, #3
 808d1ee:	d017      	beq.n	808d220 <__gethex+0x378>
 808d1f0:	2b01      	cmp	r3, #1
 808d1f2:	d109      	bne.n	808d208 <__gethex+0x360>
 808d1f4:	f01a 0f02 	tst.w	sl, #2
 808d1f8:	d006      	beq.n	808d208 <__gethex+0x360>
 808d1fa:	f8d9 0000 	ldr.w	r0, [r9]
 808d1fe:	ea4a 0a00 	orr.w	sl, sl, r0
 808d202:	f01a 0f01 	tst.w	sl, #1
 808d206:	d10e      	bne.n	808d226 <__gethex+0x37e>
 808d208:	f047 0710 	orr.w	r7, r7, #16
 808d20c:	e033      	b.n	808d276 <__gethex+0x3ce>
 808d20e:	f04f 0a01 	mov.w	sl, #1
 808d212:	e7cf      	b.n	808d1b4 <__gethex+0x30c>
 808d214:	2701      	movs	r7, #1
 808d216:	e7e2      	b.n	808d1de <__gethex+0x336>
 808d218:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d21a:	f1c3 0301 	rsb	r3, r3, #1
 808d21e:	9315      	str	r3, [sp, #84]	; 0x54
 808d220:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d222:	2b00      	cmp	r3, #0
 808d224:	d0f0      	beq.n	808d208 <__gethex+0x360>
 808d226:	f04f 0c00 	mov.w	ip, #0
 808d22a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808d22e:	f104 0314 	add.w	r3, r4, #20
 808d232:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 808d236:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 808d23a:	4618      	mov	r0, r3
 808d23c:	f853 2b04 	ldr.w	r2, [r3], #4
 808d240:	f1b2 3fff 	cmp.w	r2, #4294967295
 808d244:	d01c      	beq.n	808d280 <__gethex+0x3d8>
 808d246:	3201      	adds	r2, #1
 808d248:	6002      	str	r2, [r0, #0]
 808d24a:	2f02      	cmp	r7, #2
 808d24c:	f104 0314 	add.w	r3, r4, #20
 808d250:	d138      	bne.n	808d2c4 <__gethex+0x41c>
 808d252:	f8d8 2000 	ldr.w	r2, [r8]
 808d256:	3a01      	subs	r2, #1
 808d258:	42b2      	cmp	r2, r6
 808d25a:	d10a      	bne.n	808d272 <__gethex+0x3ca>
 808d25c:	2201      	movs	r2, #1
 808d25e:	1171      	asrs	r1, r6, #5
 808d260:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808d264:	f006 061f 	and.w	r6, r6, #31
 808d268:	fa02 f606 	lsl.w	r6, r2, r6
 808d26c:	421e      	tst	r6, r3
 808d26e:	bf18      	it	ne
 808d270:	4617      	movne	r7, r2
 808d272:	f047 0720 	orr.w	r7, r7, #32
 808d276:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d278:	601c      	str	r4, [r3, #0]
 808d27a:	9b06      	ldr	r3, [sp, #24]
 808d27c:	601d      	str	r5, [r3, #0]
 808d27e:	e6a5      	b.n	808cfcc <__gethex+0x124>
 808d280:	4299      	cmp	r1, r3
 808d282:	f843 cc04 	str.w	ip, [r3, #-4]
 808d286:	d8d8      	bhi.n	808d23a <__gethex+0x392>
 808d288:	68a3      	ldr	r3, [r4, #8]
 808d28a:	4599      	cmp	r9, r3
 808d28c:	db12      	blt.n	808d2b4 <__gethex+0x40c>
 808d28e:	6861      	ldr	r1, [r4, #4]
 808d290:	9802      	ldr	r0, [sp, #8]
 808d292:	3101      	adds	r1, #1
 808d294:	f000 f906 	bl	808d4a4 <_Balloc>
 808d298:	4682      	mov	sl, r0
 808d29a:	6922      	ldr	r2, [r4, #16]
 808d29c:	f104 010c 	add.w	r1, r4, #12
 808d2a0:	3202      	adds	r2, #2
 808d2a2:	0092      	lsls	r2, r2, #2
 808d2a4:	300c      	adds	r0, #12
 808d2a6:	f7fe fe39 	bl	808bf1c <memcpy>
 808d2aa:	4621      	mov	r1, r4
 808d2ac:	9802      	ldr	r0, [sp, #8]
 808d2ae:	f000 f92d 	bl	808d50c <_Bfree>
 808d2b2:	4654      	mov	r4, sl
 808d2b4:	6923      	ldr	r3, [r4, #16]
 808d2b6:	1c5a      	adds	r2, r3, #1
 808d2b8:	6122      	str	r2, [r4, #16]
 808d2ba:	2201      	movs	r2, #1
 808d2bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 808d2c0:	615a      	str	r2, [r3, #20]
 808d2c2:	e7c2      	b.n	808d24a <__gethex+0x3a2>
 808d2c4:	6922      	ldr	r2, [r4, #16]
 808d2c6:	454a      	cmp	r2, r9
 808d2c8:	dd0b      	ble.n	808d2e2 <__gethex+0x43a>
 808d2ca:	2101      	movs	r1, #1
 808d2cc:	4620      	mov	r0, r4
 808d2ce:	f7ff fd83 	bl	808cdd8 <rshift>
 808d2d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d2d6:	3501      	adds	r5, #1
 808d2d8:	42ab      	cmp	r3, r5
 808d2da:	f6ff aeda 	blt.w	808d092 <__gethex+0x1ea>
 808d2de:	2701      	movs	r7, #1
 808d2e0:	e7c7      	b.n	808d272 <__gethex+0x3ca>
 808d2e2:	f016 061f 	ands.w	r6, r6, #31
 808d2e6:	d0fa      	beq.n	808d2de <__gethex+0x436>
 808d2e8:	449b      	add	fp, r3
 808d2ea:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 808d2ee:	f000 f9a0 	bl	808d632 <__hi0bits>
 808d2f2:	f1c6 0620 	rsb	r6, r6, #32
 808d2f6:	42b0      	cmp	r0, r6
 808d2f8:	dbe7      	blt.n	808d2ca <__gethex+0x422>
 808d2fa:	e7f0      	b.n	808d2de <__gethex+0x436>

0808d2fc <L_shift>:
 808d2fc:	f1c2 0208 	rsb	r2, r2, #8
 808d300:	0092      	lsls	r2, r2, #2
 808d302:	b570      	push	{r4, r5, r6, lr}
 808d304:	f1c2 0620 	rsb	r6, r2, #32
 808d308:	6843      	ldr	r3, [r0, #4]
 808d30a:	6804      	ldr	r4, [r0, #0]
 808d30c:	fa03 f506 	lsl.w	r5, r3, r6
 808d310:	432c      	orrs	r4, r5
 808d312:	40d3      	lsrs	r3, r2
 808d314:	6004      	str	r4, [r0, #0]
 808d316:	f840 3f04 	str.w	r3, [r0, #4]!
 808d31a:	4288      	cmp	r0, r1
 808d31c:	d3f4      	bcc.n	808d308 <L_shift+0xc>
 808d31e:	bd70      	pop	{r4, r5, r6, pc}

0808d320 <__match>:
 808d320:	b530      	push	{r4, r5, lr}
 808d322:	6803      	ldr	r3, [r0, #0]
 808d324:	3301      	adds	r3, #1
 808d326:	f811 4b01 	ldrb.w	r4, [r1], #1
 808d32a:	b914      	cbnz	r4, 808d332 <__match+0x12>
 808d32c:	6003      	str	r3, [r0, #0]
 808d32e:	2001      	movs	r0, #1
 808d330:	bd30      	pop	{r4, r5, pc}
 808d332:	f813 2b01 	ldrb.w	r2, [r3], #1
 808d336:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808d33a:	2d19      	cmp	r5, #25
 808d33c:	bf98      	it	ls
 808d33e:	3220      	addls	r2, #32
 808d340:	42a2      	cmp	r2, r4
 808d342:	d0f0      	beq.n	808d326 <__match+0x6>
 808d344:	2000      	movs	r0, #0
 808d346:	e7f3      	b.n	808d330 <__match+0x10>

0808d348 <__hexnan>:
 808d348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d34c:	2500      	movs	r5, #0
 808d34e:	680b      	ldr	r3, [r1, #0]
 808d350:	4682      	mov	sl, r0
 808d352:	115e      	asrs	r6, r3, #5
 808d354:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808d358:	f013 031f 	ands.w	r3, r3, #31
 808d35c:	bf18      	it	ne
 808d35e:	3604      	addne	r6, #4
 808d360:	1f37      	subs	r7, r6, #4
 808d362:	4690      	mov	r8, r2
 808d364:	46b9      	mov	r9, r7
 808d366:	463c      	mov	r4, r7
 808d368:	46ab      	mov	fp, r5
 808d36a:	b087      	sub	sp, #28
 808d36c:	6801      	ldr	r1, [r0, #0]
 808d36e:	9301      	str	r3, [sp, #4]
 808d370:	f846 5c04 	str.w	r5, [r6, #-4]
 808d374:	9502      	str	r5, [sp, #8]
 808d376:	784a      	ldrb	r2, [r1, #1]
 808d378:	1c4b      	adds	r3, r1, #1
 808d37a:	9303      	str	r3, [sp, #12]
 808d37c:	b342      	cbz	r2, 808d3d0 <__hexnan+0x88>
 808d37e:	4610      	mov	r0, r2
 808d380:	9105      	str	r1, [sp, #20]
 808d382:	9204      	str	r2, [sp, #16]
 808d384:	f7ff fd7b 	bl	808ce7e <__hexdig_fun>
 808d388:	2800      	cmp	r0, #0
 808d38a:	d14f      	bne.n	808d42c <__hexnan+0xe4>
 808d38c:	9a04      	ldr	r2, [sp, #16]
 808d38e:	9905      	ldr	r1, [sp, #20]
 808d390:	2a20      	cmp	r2, #32
 808d392:	d818      	bhi.n	808d3c6 <__hexnan+0x7e>
 808d394:	9b02      	ldr	r3, [sp, #8]
 808d396:	459b      	cmp	fp, r3
 808d398:	dd13      	ble.n	808d3c2 <__hexnan+0x7a>
 808d39a:	454c      	cmp	r4, r9
 808d39c:	d206      	bcs.n	808d3ac <__hexnan+0x64>
 808d39e:	2d07      	cmp	r5, #7
 808d3a0:	dc04      	bgt.n	808d3ac <__hexnan+0x64>
 808d3a2:	462a      	mov	r2, r5
 808d3a4:	4649      	mov	r1, r9
 808d3a6:	4620      	mov	r0, r4
 808d3a8:	f7ff ffa8 	bl	808d2fc <L_shift>
 808d3ac:	4544      	cmp	r4, r8
 808d3ae:	d950      	bls.n	808d452 <__hexnan+0x10a>
 808d3b0:	2300      	movs	r3, #0
 808d3b2:	f1a4 0904 	sub.w	r9, r4, #4
 808d3b6:	f844 3c04 	str.w	r3, [r4, #-4]
 808d3ba:	461d      	mov	r5, r3
 808d3bc:	464c      	mov	r4, r9
 808d3be:	f8cd b008 	str.w	fp, [sp, #8]
 808d3c2:	9903      	ldr	r1, [sp, #12]
 808d3c4:	e7d7      	b.n	808d376 <__hexnan+0x2e>
 808d3c6:	2a29      	cmp	r2, #41	; 0x29
 808d3c8:	d156      	bne.n	808d478 <__hexnan+0x130>
 808d3ca:	3102      	adds	r1, #2
 808d3cc:	f8ca 1000 	str.w	r1, [sl]
 808d3d0:	f1bb 0f00 	cmp.w	fp, #0
 808d3d4:	d050      	beq.n	808d478 <__hexnan+0x130>
 808d3d6:	454c      	cmp	r4, r9
 808d3d8:	d206      	bcs.n	808d3e8 <__hexnan+0xa0>
 808d3da:	2d07      	cmp	r5, #7
 808d3dc:	dc04      	bgt.n	808d3e8 <__hexnan+0xa0>
 808d3de:	462a      	mov	r2, r5
 808d3e0:	4649      	mov	r1, r9
 808d3e2:	4620      	mov	r0, r4
 808d3e4:	f7ff ff8a 	bl	808d2fc <L_shift>
 808d3e8:	4544      	cmp	r4, r8
 808d3ea:	d934      	bls.n	808d456 <__hexnan+0x10e>
 808d3ec:	4623      	mov	r3, r4
 808d3ee:	f1a8 0204 	sub.w	r2, r8, #4
 808d3f2:	f853 1b04 	ldr.w	r1, [r3], #4
 808d3f6:	429f      	cmp	r7, r3
 808d3f8:	f842 1f04 	str.w	r1, [r2, #4]!
 808d3fc:	d2f9      	bcs.n	808d3f2 <__hexnan+0xaa>
 808d3fe:	1b3b      	subs	r3, r7, r4
 808d400:	f023 0303 	bic.w	r3, r3, #3
 808d404:	3304      	adds	r3, #4
 808d406:	3401      	adds	r4, #1
 808d408:	3e03      	subs	r6, #3
 808d40a:	42b4      	cmp	r4, r6
 808d40c:	bf88      	it	hi
 808d40e:	2304      	movhi	r3, #4
 808d410:	2200      	movs	r2, #0
 808d412:	4443      	add	r3, r8
 808d414:	f843 2b04 	str.w	r2, [r3], #4
 808d418:	429f      	cmp	r7, r3
 808d41a:	d2fb      	bcs.n	808d414 <__hexnan+0xcc>
 808d41c:	683b      	ldr	r3, [r7, #0]
 808d41e:	b91b      	cbnz	r3, 808d428 <__hexnan+0xe0>
 808d420:	4547      	cmp	r7, r8
 808d422:	d127      	bne.n	808d474 <__hexnan+0x12c>
 808d424:	2301      	movs	r3, #1
 808d426:	603b      	str	r3, [r7, #0]
 808d428:	2005      	movs	r0, #5
 808d42a:	e026      	b.n	808d47a <__hexnan+0x132>
 808d42c:	3501      	adds	r5, #1
 808d42e:	2d08      	cmp	r5, #8
 808d430:	f10b 0b01 	add.w	fp, fp, #1
 808d434:	dd06      	ble.n	808d444 <__hexnan+0xfc>
 808d436:	4544      	cmp	r4, r8
 808d438:	d9c3      	bls.n	808d3c2 <__hexnan+0x7a>
 808d43a:	2300      	movs	r3, #0
 808d43c:	2501      	movs	r5, #1
 808d43e:	f844 3c04 	str.w	r3, [r4, #-4]
 808d442:	3c04      	subs	r4, #4
 808d444:	6822      	ldr	r2, [r4, #0]
 808d446:	f000 000f 	and.w	r0, r0, #15
 808d44a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 808d44e:	6022      	str	r2, [r4, #0]
 808d450:	e7b7      	b.n	808d3c2 <__hexnan+0x7a>
 808d452:	2508      	movs	r5, #8
 808d454:	e7b5      	b.n	808d3c2 <__hexnan+0x7a>
 808d456:	9b01      	ldr	r3, [sp, #4]
 808d458:	2b00      	cmp	r3, #0
 808d45a:	d0df      	beq.n	808d41c <__hexnan+0xd4>
 808d45c:	f04f 32ff 	mov.w	r2, #4294967295
 808d460:	f1c3 0320 	rsb	r3, r3, #32
 808d464:	fa22 f303 	lsr.w	r3, r2, r3
 808d468:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808d46c:	401a      	ands	r2, r3
 808d46e:	f846 2c04 	str.w	r2, [r6, #-4]
 808d472:	e7d3      	b.n	808d41c <__hexnan+0xd4>
 808d474:	3f04      	subs	r7, #4
 808d476:	e7d1      	b.n	808d41c <__hexnan+0xd4>
 808d478:	2004      	movs	r0, #4
 808d47a:	b007      	add	sp, #28
 808d47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d480 <__ascii_mbtowc>:
 808d480:	b082      	sub	sp, #8
 808d482:	b901      	cbnz	r1, 808d486 <__ascii_mbtowc+0x6>
 808d484:	a901      	add	r1, sp, #4
 808d486:	b142      	cbz	r2, 808d49a <__ascii_mbtowc+0x1a>
 808d488:	b14b      	cbz	r3, 808d49e <__ascii_mbtowc+0x1e>
 808d48a:	7813      	ldrb	r3, [r2, #0]
 808d48c:	600b      	str	r3, [r1, #0]
 808d48e:	7812      	ldrb	r2, [r2, #0]
 808d490:	1e10      	subs	r0, r2, #0
 808d492:	bf18      	it	ne
 808d494:	2001      	movne	r0, #1
 808d496:	b002      	add	sp, #8
 808d498:	4770      	bx	lr
 808d49a:	4610      	mov	r0, r2
 808d49c:	e7fb      	b.n	808d496 <__ascii_mbtowc+0x16>
 808d49e:	f06f 0001 	mvn.w	r0, #1
 808d4a2:	e7f8      	b.n	808d496 <__ascii_mbtowc+0x16>

0808d4a4 <_Balloc>:
 808d4a4:	b570      	push	{r4, r5, r6, lr}
 808d4a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808d4a8:	4604      	mov	r4, r0
 808d4aa:	460d      	mov	r5, r1
 808d4ac:	b93e      	cbnz	r6, 808d4be <_Balloc+0x1a>
 808d4ae:	2010      	movs	r0, #16
 808d4b0:	f7fb fa72 	bl	8088998 <malloc>
 808d4b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808d4b8:	6260      	str	r0, [r4, #36]	; 0x24
 808d4ba:	6006      	str	r6, [r0, #0]
 808d4bc:	60c6      	str	r6, [r0, #12]
 808d4be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 808d4c0:	68f3      	ldr	r3, [r6, #12]
 808d4c2:	b183      	cbz	r3, 808d4e6 <_Balloc+0x42>
 808d4c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808d4c6:	68db      	ldr	r3, [r3, #12]
 808d4c8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 808d4cc:	b9b8      	cbnz	r0, 808d4fe <_Balloc+0x5a>
 808d4ce:	2101      	movs	r1, #1
 808d4d0:	fa01 f605 	lsl.w	r6, r1, r5
 808d4d4:	1d72      	adds	r2, r6, #5
 808d4d6:	4620      	mov	r0, r4
 808d4d8:	0092      	lsls	r2, r2, #2
 808d4da:	f000 fc1c 	bl	808dd16 <_calloc_r>
 808d4de:	b160      	cbz	r0, 808d4fa <_Balloc+0x56>
 808d4e0:	e9c0 5601 	strd	r5, r6, [r0, #4]
 808d4e4:	e00e      	b.n	808d504 <_Balloc+0x60>
 808d4e6:	2221      	movs	r2, #33	; 0x21
 808d4e8:	2104      	movs	r1, #4
 808d4ea:	4620      	mov	r0, r4
 808d4ec:	f000 fc13 	bl	808dd16 <_calloc_r>
 808d4f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808d4f2:	60f0      	str	r0, [r6, #12]
 808d4f4:	68db      	ldr	r3, [r3, #12]
 808d4f6:	2b00      	cmp	r3, #0
 808d4f8:	d1e4      	bne.n	808d4c4 <_Balloc+0x20>
 808d4fa:	2000      	movs	r0, #0
 808d4fc:	bd70      	pop	{r4, r5, r6, pc}
 808d4fe:	6802      	ldr	r2, [r0, #0]
 808d500:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 808d504:	2300      	movs	r3, #0
 808d506:	e9c0 3303 	strd	r3, r3, [r0, #12]
 808d50a:	e7f7      	b.n	808d4fc <_Balloc+0x58>

0808d50c <_Bfree>:
 808d50c:	b570      	push	{r4, r5, r6, lr}
 808d50e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808d510:	4605      	mov	r5, r0
 808d512:	460c      	mov	r4, r1
 808d514:	b93e      	cbnz	r6, 808d526 <_Bfree+0x1a>
 808d516:	2010      	movs	r0, #16
 808d518:	f7fb fa3e 	bl	8088998 <malloc>
 808d51c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808d520:	6268      	str	r0, [r5, #36]	; 0x24
 808d522:	6006      	str	r6, [r0, #0]
 808d524:	60c6      	str	r6, [r0, #12]
 808d526:	b13c      	cbz	r4, 808d538 <_Bfree+0x2c>
 808d528:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 808d52a:	6862      	ldr	r2, [r4, #4]
 808d52c:	68db      	ldr	r3, [r3, #12]
 808d52e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808d532:	6021      	str	r1, [r4, #0]
 808d534:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 808d538:	bd70      	pop	{r4, r5, r6, pc}

0808d53a <__multadd>:
 808d53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d53e:	4698      	mov	r8, r3
 808d540:	460c      	mov	r4, r1
 808d542:	2300      	movs	r3, #0
 808d544:	690e      	ldr	r6, [r1, #16]
 808d546:	4607      	mov	r7, r0
 808d548:	f101 0014 	add.w	r0, r1, #20
 808d54c:	6805      	ldr	r5, [r0, #0]
 808d54e:	3301      	adds	r3, #1
 808d550:	b2a9      	uxth	r1, r5
 808d552:	fb02 8101 	mla	r1, r2, r1, r8
 808d556:	0c2d      	lsrs	r5, r5, #16
 808d558:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 808d55c:	fb02 c505 	mla	r5, r2, r5, ip
 808d560:	b289      	uxth	r1, r1
 808d562:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 808d566:	429e      	cmp	r6, r3
 808d568:	ea4f 4815 	mov.w	r8, r5, lsr #16
 808d56c:	f840 1b04 	str.w	r1, [r0], #4
 808d570:	dcec      	bgt.n	808d54c <__multadd+0x12>
 808d572:	f1b8 0f00 	cmp.w	r8, #0
 808d576:	d01b      	beq.n	808d5b0 <__multadd+0x76>
 808d578:	68a3      	ldr	r3, [r4, #8]
 808d57a:	42b3      	cmp	r3, r6
 808d57c:	dc12      	bgt.n	808d5a4 <__multadd+0x6a>
 808d57e:	6861      	ldr	r1, [r4, #4]
 808d580:	4638      	mov	r0, r7
 808d582:	3101      	adds	r1, #1
 808d584:	f7ff ff8e 	bl	808d4a4 <_Balloc>
 808d588:	4605      	mov	r5, r0
 808d58a:	6922      	ldr	r2, [r4, #16]
 808d58c:	f104 010c 	add.w	r1, r4, #12
 808d590:	3202      	adds	r2, #2
 808d592:	0092      	lsls	r2, r2, #2
 808d594:	300c      	adds	r0, #12
 808d596:	f7fe fcc1 	bl	808bf1c <memcpy>
 808d59a:	4621      	mov	r1, r4
 808d59c:	4638      	mov	r0, r7
 808d59e:	f7ff ffb5 	bl	808d50c <_Bfree>
 808d5a2:	462c      	mov	r4, r5
 808d5a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 808d5a8:	3601      	adds	r6, #1
 808d5aa:	f8c3 8014 	str.w	r8, [r3, #20]
 808d5ae:	6126      	str	r6, [r4, #16]
 808d5b0:	4620      	mov	r0, r4
 808d5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808d5b6 <__s2b>:
 808d5b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808d5ba:	4615      	mov	r5, r2
 808d5bc:	2209      	movs	r2, #9
 808d5be:	461f      	mov	r7, r3
 808d5c0:	3308      	adds	r3, #8
 808d5c2:	460c      	mov	r4, r1
 808d5c4:	fb93 f3f2 	sdiv	r3, r3, r2
 808d5c8:	4606      	mov	r6, r0
 808d5ca:	2201      	movs	r2, #1
 808d5cc:	2100      	movs	r1, #0
 808d5ce:	429a      	cmp	r2, r3
 808d5d0:	db20      	blt.n	808d614 <__s2b+0x5e>
 808d5d2:	4630      	mov	r0, r6
 808d5d4:	f7ff ff66 	bl	808d4a4 <_Balloc>
 808d5d8:	9b08      	ldr	r3, [sp, #32]
 808d5da:	2d09      	cmp	r5, #9
 808d5dc:	6143      	str	r3, [r0, #20]
 808d5de:	f04f 0301 	mov.w	r3, #1
 808d5e2:	6103      	str	r3, [r0, #16]
 808d5e4:	dd19      	ble.n	808d61a <__s2b+0x64>
 808d5e6:	f104 0909 	add.w	r9, r4, #9
 808d5ea:	46c8      	mov	r8, r9
 808d5ec:	442c      	add	r4, r5
 808d5ee:	f818 3b01 	ldrb.w	r3, [r8], #1
 808d5f2:	4601      	mov	r1, r0
 808d5f4:	220a      	movs	r2, #10
 808d5f6:	4630      	mov	r0, r6
 808d5f8:	3b30      	subs	r3, #48	; 0x30
 808d5fa:	f7ff ff9e 	bl	808d53a <__multadd>
 808d5fe:	45a0      	cmp	r8, r4
 808d600:	d1f5      	bne.n	808d5ee <__s2b+0x38>
 808d602:	f1a5 0408 	sub.w	r4, r5, #8
 808d606:	444c      	add	r4, r9
 808d608:	1b2d      	subs	r5, r5, r4
 808d60a:	1963      	adds	r3, r4, r5
 808d60c:	42bb      	cmp	r3, r7
 808d60e:	db07      	blt.n	808d620 <__s2b+0x6a>
 808d610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808d614:	0052      	lsls	r2, r2, #1
 808d616:	3101      	adds	r1, #1
 808d618:	e7d9      	b.n	808d5ce <__s2b+0x18>
 808d61a:	2509      	movs	r5, #9
 808d61c:	340a      	adds	r4, #10
 808d61e:	e7f3      	b.n	808d608 <__s2b+0x52>
 808d620:	f814 3b01 	ldrb.w	r3, [r4], #1
 808d624:	4601      	mov	r1, r0
 808d626:	220a      	movs	r2, #10
 808d628:	4630      	mov	r0, r6
 808d62a:	3b30      	subs	r3, #48	; 0x30
 808d62c:	f7ff ff85 	bl	808d53a <__multadd>
 808d630:	e7eb      	b.n	808d60a <__s2b+0x54>

0808d632 <__hi0bits>:
 808d632:	0c02      	lsrs	r2, r0, #16
 808d634:	0412      	lsls	r2, r2, #16
 808d636:	4603      	mov	r3, r0
 808d638:	b9ca      	cbnz	r2, 808d66e <__hi0bits+0x3c>
 808d63a:	0403      	lsls	r3, r0, #16
 808d63c:	2010      	movs	r0, #16
 808d63e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 808d642:	bf04      	itt	eq
 808d644:	021b      	lsleq	r3, r3, #8
 808d646:	3008      	addeq	r0, #8
 808d648:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 808d64c:	bf04      	itt	eq
 808d64e:	011b      	lsleq	r3, r3, #4
 808d650:	3004      	addeq	r0, #4
 808d652:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 808d656:	bf04      	itt	eq
 808d658:	009b      	lsleq	r3, r3, #2
 808d65a:	3002      	addeq	r0, #2
 808d65c:	2b00      	cmp	r3, #0
 808d65e:	db05      	blt.n	808d66c <__hi0bits+0x3a>
 808d660:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 808d664:	f100 0001 	add.w	r0, r0, #1
 808d668:	bf08      	it	eq
 808d66a:	2020      	moveq	r0, #32
 808d66c:	4770      	bx	lr
 808d66e:	2000      	movs	r0, #0
 808d670:	e7e5      	b.n	808d63e <__hi0bits+0xc>

0808d672 <__lo0bits>:
 808d672:	6803      	ldr	r3, [r0, #0]
 808d674:	4602      	mov	r2, r0
 808d676:	f013 0007 	ands.w	r0, r3, #7
 808d67a:	d00b      	beq.n	808d694 <__lo0bits+0x22>
 808d67c:	07d9      	lsls	r1, r3, #31
 808d67e:	d422      	bmi.n	808d6c6 <__lo0bits+0x54>
 808d680:	0798      	lsls	r0, r3, #30
 808d682:	bf49      	itett	mi
 808d684:	085b      	lsrmi	r3, r3, #1
 808d686:	089b      	lsrpl	r3, r3, #2
 808d688:	2001      	movmi	r0, #1
 808d68a:	6013      	strmi	r3, [r2, #0]
 808d68c:	bf5c      	itt	pl
 808d68e:	2002      	movpl	r0, #2
 808d690:	6013      	strpl	r3, [r2, #0]
 808d692:	4770      	bx	lr
 808d694:	b299      	uxth	r1, r3
 808d696:	b909      	cbnz	r1, 808d69c <__lo0bits+0x2a>
 808d698:	2010      	movs	r0, #16
 808d69a:	0c1b      	lsrs	r3, r3, #16
 808d69c:	f013 0fff 	tst.w	r3, #255	; 0xff
 808d6a0:	bf04      	itt	eq
 808d6a2:	0a1b      	lsreq	r3, r3, #8
 808d6a4:	3008      	addeq	r0, #8
 808d6a6:	0719      	lsls	r1, r3, #28
 808d6a8:	bf04      	itt	eq
 808d6aa:	091b      	lsreq	r3, r3, #4
 808d6ac:	3004      	addeq	r0, #4
 808d6ae:	0799      	lsls	r1, r3, #30
 808d6b0:	bf04      	itt	eq
 808d6b2:	089b      	lsreq	r3, r3, #2
 808d6b4:	3002      	addeq	r0, #2
 808d6b6:	07d9      	lsls	r1, r3, #31
 808d6b8:	d403      	bmi.n	808d6c2 <__lo0bits+0x50>
 808d6ba:	085b      	lsrs	r3, r3, #1
 808d6bc:	f100 0001 	add.w	r0, r0, #1
 808d6c0:	d003      	beq.n	808d6ca <__lo0bits+0x58>
 808d6c2:	6013      	str	r3, [r2, #0]
 808d6c4:	4770      	bx	lr
 808d6c6:	2000      	movs	r0, #0
 808d6c8:	4770      	bx	lr
 808d6ca:	2020      	movs	r0, #32
 808d6cc:	4770      	bx	lr

0808d6ce <__i2b>:
 808d6ce:	b510      	push	{r4, lr}
 808d6d0:	460c      	mov	r4, r1
 808d6d2:	2101      	movs	r1, #1
 808d6d4:	f7ff fee6 	bl	808d4a4 <_Balloc>
 808d6d8:	2201      	movs	r2, #1
 808d6da:	6144      	str	r4, [r0, #20]
 808d6dc:	6102      	str	r2, [r0, #16]
 808d6de:	bd10      	pop	{r4, pc}

0808d6e0 <__multiply>:
 808d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d6e4:	4615      	mov	r5, r2
 808d6e6:	690a      	ldr	r2, [r1, #16]
 808d6e8:	692b      	ldr	r3, [r5, #16]
 808d6ea:	460c      	mov	r4, r1
 808d6ec:	429a      	cmp	r2, r3
 808d6ee:	bfbe      	ittt	lt
 808d6f0:	460b      	movlt	r3, r1
 808d6f2:	462c      	movlt	r4, r5
 808d6f4:	461d      	movlt	r5, r3
 808d6f6:	6927      	ldr	r7, [r4, #16]
 808d6f8:	f8d5 9010 	ldr.w	r9, [r5, #16]
 808d6fc:	68a3      	ldr	r3, [r4, #8]
 808d6fe:	6861      	ldr	r1, [r4, #4]
 808d700:	eb07 0609 	add.w	r6, r7, r9
 808d704:	42b3      	cmp	r3, r6
 808d706:	bfb8      	it	lt
 808d708:	3101      	addlt	r1, #1
 808d70a:	b085      	sub	sp, #20
 808d70c:	f7ff feca 	bl	808d4a4 <_Balloc>
 808d710:	f100 0114 	add.w	r1, r0, #20
 808d714:	460b      	mov	r3, r1
 808d716:	2200      	movs	r2, #0
 808d718:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 808d71c:	4543      	cmp	r3, r8
 808d71e:	d31d      	bcc.n	808d75c <__multiply+0x7c>
 808d720:	f104 0314 	add.w	r3, r4, #20
 808d724:	f105 0214 	add.w	r2, r5, #20
 808d728:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 808d72c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808d730:	9302      	str	r3, [sp, #8]
 808d732:	1b3b      	subs	r3, r7, r4
 808d734:	3b15      	subs	r3, #21
 808d736:	f023 0303 	bic.w	r3, r3, #3
 808d73a:	3304      	adds	r3, #4
 808d73c:	f104 0515 	add.w	r5, r4, #21
 808d740:	42af      	cmp	r7, r5
 808d742:	bf38      	it	cc
 808d744:	2304      	movcc	r3, #4
 808d746:	9301      	str	r3, [sp, #4]
 808d748:	9b02      	ldr	r3, [sp, #8]
 808d74a:	9203      	str	r2, [sp, #12]
 808d74c:	4293      	cmp	r3, r2
 808d74e:	d808      	bhi.n	808d762 <__multiply+0x82>
 808d750:	2e00      	cmp	r6, #0
 808d752:	dc5a      	bgt.n	808d80a <__multiply+0x12a>
 808d754:	6106      	str	r6, [r0, #16]
 808d756:	b005      	add	sp, #20
 808d758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d75c:	f843 2b04 	str.w	r2, [r3], #4
 808d760:	e7dc      	b.n	808d71c <__multiply+0x3c>
 808d762:	f8b2 a000 	ldrh.w	sl, [r2]
 808d766:	f1ba 0f00 	cmp.w	sl, #0
 808d76a:	d024      	beq.n	808d7b6 <__multiply+0xd6>
 808d76c:	4689      	mov	r9, r1
 808d76e:	f04f 0c00 	mov.w	ip, #0
 808d772:	f104 0e14 	add.w	lr, r4, #20
 808d776:	f85e 5b04 	ldr.w	r5, [lr], #4
 808d77a:	f8d9 b000 	ldr.w	fp, [r9]
 808d77e:	b2ab      	uxth	r3, r5
 808d780:	fa1f fb8b 	uxth.w	fp, fp
 808d784:	fb0a b303 	mla	r3, sl, r3, fp
 808d788:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 808d78c:	f8d9 5000 	ldr.w	r5, [r9]
 808d790:	4463      	add	r3, ip
 808d792:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808d796:	fb0a c50b 	mla	r5, sl, fp, ip
 808d79a:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 808d79e:	b29b      	uxth	r3, r3
 808d7a0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 808d7a4:	4577      	cmp	r7, lr
 808d7a6:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808d7aa:	f849 3b04 	str.w	r3, [r9], #4
 808d7ae:	d8e2      	bhi.n	808d776 <__multiply+0x96>
 808d7b0:	9b01      	ldr	r3, [sp, #4]
 808d7b2:	f841 c003 	str.w	ip, [r1, r3]
 808d7b6:	9b03      	ldr	r3, [sp, #12]
 808d7b8:	3204      	adds	r2, #4
 808d7ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 808d7be:	f1b9 0f00 	cmp.w	r9, #0
 808d7c2:	d020      	beq.n	808d806 <__multiply+0x126>
 808d7c4:	468e      	mov	lr, r1
 808d7c6:	f04f 0a00 	mov.w	sl, #0
 808d7ca:	680b      	ldr	r3, [r1, #0]
 808d7cc:	f104 0c14 	add.w	ip, r4, #20
 808d7d0:	f8bc 5000 	ldrh.w	r5, [ip]
 808d7d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 808d7d8:	b29b      	uxth	r3, r3
 808d7da:	fb09 b505 	mla	r5, r9, r5, fp
 808d7de:	44aa      	add	sl, r5
 808d7e0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 808d7e4:	f84e 3b04 	str.w	r3, [lr], #4
 808d7e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 808d7ec:	f8be 5000 	ldrh.w	r5, [lr]
 808d7f0:	0c1b      	lsrs	r3, r3, #16
 808d7f2:	fb09 5303 	mla	r3, r9, r3, r5
 808d7f6:	4567      	cmp	r7, ip
 808d7f8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 808d7fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 808d800:	d8e6      	bhi.n	808d7d0 <__multiply+0xf0>
 808d802:	9d01      	ldr	r5, [sp, #4]
 808d804:	514b      	str	r3, [r1, r5]
 808d806:	3104      	adds	r1, #4
 808d808:	e79e      	b.n	808d748 <__multiply+0x68>
 808d80a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 808d80e:	2b00      	cmp	r3, #0
 808d810:	d1a0      	bne.n	808d754 <__multiply+0x74>
 808d812:	3e01      	subs	r6, #1
 808d814:	e79c      	b.n	808d750 <__multiply+0x70>
	...

0808d818 <__pow5mult>:
 808d818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808d81c:	4615      	mov	r5, r2
 808d81e:	f012 0203 	ands.w	r2, r2, #3
 808d822:	4606      	mov	r6, r0
 808d824:	460f      	mov	r7, r1
 808d826:	d007      	beq.n	808d838 <__pow5mult+0x20>
 808d828:	4c21      	ldr	r4, [pc, #132]	; (808d8b0 <__pow5mult+0x98>)
 808d82a:	3a01      	subs	r2, #1
 808d82c:	2300      	movs	r3, #0
 808d82e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808d832:	f7ff fe82 	bl	808d53a <__multadd>
 808d836:	4607      	mov	r7, r0
 808d838:	10ad      	asrs	r5, r5, #2
 808d83a:	d035      	beq.n	808d8a8 <__pow5mult+0x90>
 808d83c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808d83e:	b93c      	cbnz	r4, 808d850 <__pow5mult+0x38>
 808d840:	2010      	movs	r0, #16
 808d842:	f7fb f8a9 	bl	8088998 <malloc>
 808d846:	e9c0 4401 	strd	r4, r4, [r0, #4]
 808d84a:	6270      	str	r0, [r6, #36]	; 0x24
 808d84c:	6004      	str	r4, [r0, #0]
 808d84e:	60c4      	str	r4, [r0, #12]
 808d850:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808d854:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808d858:	b94c      	cbnz	r4, 808d86e <__pow5mult+0x56>
 808d85a:	f240 2171 	movw	r1, #625	; 0x271
 808d85e:	4630      	mov	r0, r6
 808d860:	f7ff ff35 	bl	808d6ce <__i2b>
 808d864:	2300      	movs	r3, #0
 808d866:	4604      	mov	r4, r0
 808d868:	f8c8 0008 	str.w	r0, [r8, #8]
 808d86c:	6003      	str	r3, [r0, #0]
 808d86e:	f04f 0900 	mov.w	r9, #0
 808d872:	07eb      	lsls	r3, r5, #31
 808d874:	d50a      	bpl.n	808d88c <__pow5mult+0x74>
 808d876:	4639      	mov	r1, r7
 808d878:	4622      	mov	r2, r4
 808d87a:	4630      	mov	r0, r6
 808d87c:	f7ff ff30 	bl	808d6e0 <__multiply>
 808d880:	4680      	mov	r8, r0
 808d882:	4639      	mov	r1, r7
 808d884:	4630      	mov	r0, r6
 808d886:	f7ff fe41 	bl	808d50c <_Bfree>
 808d88a:	4647      	mov	r7, r8
 808d88c:	106d      	asrs	r5, r5, #1
 808d88e:	d00b      	beq.n	808d8a8 <__pow5mult+0x90>
 808d890:	6820      	ldr	r0, [r4, #0]
 808d892:	b938      	cbnz	r0, 808d8a4 <__pow5mult+0x8c>
 808d894:	4622      	mov	r2, r4
 808d896:	4621      	mov	r1, r4
 808d898:	4630      	mov	r0, r6
 808d89a:	f7ff ff21 	bl	808d6e0 <__multiply>
 808d89e:	6020      	str	r0, [r4, #0]
 808d8a0:	f8c0 9000 	str.w	r9, [r0]
 808d8a4:	4604      	mov	r4, r0
 808d8a6:	e7e4      	b.n	808d872 <__pow5mult+0x5a>
 808d8a8:	4638      	mov	r0, r7
 808d8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808d8ae:	bf00      	nop
 808d8b0:	08090508 	.word	0x08090508

0808d8b4 <__lshift>:
 808d8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808d8b8:	460c      	mov	r4, r1
 808d8ba:	4607      	mov	r7, r0
 808d8bc:	4691      	mov	r9, r2
 808d8be:	6923      	ldr	r3, [r4, #16]
 808d8c0:	6849      	ldr	r1, [r1, #4]
 808d8c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 808d8c6:	68a3      	ldr	r3, [r4, #8]
 808d8c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808d8cc:	f108 0601 	add.w	r6, r8, #1
 808d8d0:	42b3      	cmp	r3, r6
 808d8d2:	db3f      	blt.n	808d954 <__lshift+0xa0>
 808d8d4:	4638      	mov	r0, r7
 808d8d6:	f7ff fde5 	bl	808d4a4 <_Balloc>
 808d8da:	2300      	movs	r3, #0
 808d8dc:	4605      	mov	r5, r0
 808d8de:	f100 0114 	add.w	r1, r0, #20
 808d8e2:	f100 0210 	add.w	r2, r0, #16
 808d8e6:	4618      	mov	r0, r3
 808d8e8:	4553      	cmp	r3, sl
 808d8ea:	db36      	blt.n	808d95a <__lshift+0xa6>
 808d8ec:	6920      	ldr	r0, [r4, #16]
 808d8ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 808d8f2:	f104 0314 	add.w	r3, r4, #20
 808d8f6:	f019 091f 	ands.w	r9, r9, #31
 808d8fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 808d8fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 808d902:	d02e      	beq.n	808d962 <__lshift+0xae>
 808d904:	468a      	mov	sl, r1
 808d906:	2200      	movs	r2, #0
 808d908:	f1c9 0e20 	rsb	lr, r9, #32
 808d90c:	6818      	ldr	r0, [r3, #0]
 808d90e:	fa00 f009 	lsl.w	r0, r0, r9
 808d912:	4302      	orrs	r2, r0
 808d914:	f84a 2b04 	str.w	r2, [sl], #4
 808d918:	f853 2b04 	ldr.w	r2, [r3], #4
 808d91c:	459c      	cmp	ip, r3
 808d91e:	fa22 f20e 	lsr.w	r2, r2, lr
 808d922:	d8f3      	bhi.n	808d90c <__lshift+0x58>
 808d924:	ebac 0304 	sub.w	r3, ip, r4
 808d928:	3b15      	subs	r3, #21
 808d92a:	f023 0303 	bic.w	r3, r3, #3
 808d92e:	3304      	adds	r3, #4
 808d930:	f104 0015 	add.w	r0, r4, #21
 808d934:	4560      	cmp	r0, ip
 808d936:	bf88      	it	hi
 808d938:	2304      	movhi	r3, #4
 808d93a:	50ca      	str	r2, [r1, r3]
 808d93c:	b10a      	cbz	r2, 808d942 <__lshift+0x8e>
 808d93e:	f108 0602 	add.w	r6, r8, #2
 808d942:	3e01      	subs	r6, #1
 808d944:	4638      	mov	r0, r7
 808d946:	4621      	mov	r1, r4
 808d948:	612e      	str	r6, [r5, #16]
 808d94a:	f7ff fddf 	bl	808d50c <_Bfree>
 808d94e:	4628      	mov	r0, r5
 808d950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d954:	3101      	adds	r1, #1
 808d956:	005b      	lsls	r3, r3, #1
 808d958:	e7ba      	b.n	808d8d0 <__lshift+0x1c>
 808d95a:	f842 0f04 	str.w	r0, [r2, #4]!
 808d95e:	3301      	adds	r3, #1
 808d960:	e7c2      	b.n	808d8e8 <__lshift+0x34>
 808d962:	3904      	subs	r1, #4
 808d964:	f853 2b04 	ldr.w	r2, [r3], #4
 808d968:	459c      	cmp	ip, r3
 808d96a:	f841 2f04 	str.w	r2, [r1, #4]!
 808d96e:	d8f9      	bhi.n	808d964 <__lshift+0xb0>
 808d970:	e7e7      	b.n	808d942 <__lshift+0x8e>

0808d972 <__mcmp>:
 808d972:	4603      	mov	r3, r0
 808d974:	690a      	ldr	r2, [r1, #16]
 808d976:	6900      	ldr	r0, [r0, #16]
 808d978:	b530      	push	{r4, r5, lr}
 808d97a:	1a80      	subs	r0, r0, r2
 808d97c:	d10d      	bne.n	808d99a <__mcmp+0x28>
 808d97e:	3314      	adds	r3, #20
 808d980:	3114      	adds	r1, #20
 808d982:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 808d986:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 808d98a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 808d98e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 808d992:	4295      	cmp	r5, r2
 808d994:	d002      	beq.n	808d99c <__mcmp+0x2a>
 808d996:	d304      	bcc.n	808d9a2 <__mcmp+0x30>
 808d998:	2001      	movs	r0, #1
 808d99a:	bd30      	pop	{r4, r5, pc}
 808d99c:	42a3      	cmp	r3, r4
 808d99e:	d3f4      	bcc.n	808d98a <__mcmp+0x18>
 808d9a0:	e7fb      	b.n	808d99a <__mcmp+0x28>
 808d9a2:	f04f 30ff 	mov.w	r0, #4294967295
 808d9a6:	e7f8      	b.n	808d99a <__mcmp+0x28>

0808d9a8 <__mdiff>:
 808d9a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d9ac:	460c      	mov	r4, r1
 808d9ae:	4606      	mov	r6, r0
 808d9b0:	4611      	mov	r1, r2
 808d9b2:	4620      	mov	r0, r4
 808d9b4:	4692      	mov	sl, r2
 808d9b6:	f7ff ffdc 	bl	808d972 <__mcmp>
 808d9ba:	1e05      	subs	r5, r0, #0
 808d9bc:	d108      	bne.n	808d9d0 <__mdiff+0x28>
 808d9be:	4629      	mov	r1, r5
 808d9c0:	4630      	mov	r0, r6
 808d9c2:	f7ff fd6f 	bl	808d4a4 <_Balloc>
 808d9c6:	2301      	movs	r3, #1
 808d9c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 808d9cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d9d0:	bfa4      	itt	ge
 808d9d2:	4653      	movge	r3, sl
 808d9d4:	46a2      	movge	sl, r4
 808d9d6:	4630      	mov	r0, r6
 808d9d8:	f8da 1004 	ldr.w	r1, [sl, #4]
 808d9dc:	bfa6      	itte	ge
 808d9de:	461c      	movge	r4, r3
 808d9e0:	2500      	movge	r5, #0
 808d9e2:	2501      	movlt	r5, #1
 808d9e4:	f7ff fd5e 	bl	808d4a4 <_Balloc>
 808d9e8:	f100 0814 	add.w	r8, r0, #20
 808d9ec:	f8da 7010 	ldr.w	r7, [sl, #16]
 808d9f0:	60c5      	str	r5, [r0, #12]
 808d9f2:	f10a 0210 	add.w	r2, sl, #16
 808d9f6:	f10a 0514 	add.w	r5, sl, #20
 808d9fa:	f04f 0c00 	mov.w	ip, #0
 808d9fe:	46c2      	mov	sl, r8
 808da00:	6926      	ldr	r6, [r4, #16]
 808da02:	f104 0914 	add.w	r9, r4, #20
 808da06:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 808da0a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 808da0e:	f852 bf04 	ldr.w	fp, [r2, #4]!
 808da12:	f859 3b04 	ldr.w	r3, [r9], #4
 808da16:	fa1f f18b 	uxth.w	r1, fp
 808da1a:	4461      	add	r1, ip
 808da1c:	fa1f fc83 	uxth.w	ip, r3
 808da20:	0c1b      	lsrs	r3, r3, #16
 808da22:	eba1 010c 	sub.w	r1, r1, ip
 808da26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 808da2a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 808da2e:	b289      	uxth	r1, r1
 808da30:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808da34:	454e      	cmp	r6, r9
 808da36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 808da3a:	f84a 3b04 	str.w	r3, [sl], #4
 808da3e:	d8e6      	bhi.n	808da0e <__mdiff+0x66>
 808da40:	1b33      	subs	r3, r6, r4
 808da42:	3b15      	subs	r3, #21
 808da44:	f023 0303 	bic.w	r3, r3, #3
 808da48:	3415      	adds	r4, #21
 808da4a:	3304      	adds	r3, #4
 808da4c:	42a6      	cmp	r6, r4
 808da4e:	bf38      	it	cc
 808da50:	2304      	movcc	r3, #4
 808da52:	441d      	add	r5, r3
 808da54:	4443      	add	r3, r8
 808da56:	461e      	mov	r6, r3
 808da58:	462c      	mov	r4, r5
 808da5a:	4574      	cmp	r4, lr
 808da5c:	d30e      	bcc.n	808da7c <__mdiff+0xd4>
 808da5e:	f10e 0203 	add.w	r2, lr, #3
 808da62:	1b52      	subs	r2, r2, r5
 808da64:	f022 0203 	bic.w	r2, r2, #3
 808da68:	3d03      	subs	r5, #3
 808da6a:	45ae      	cmp	lr, r5
 808da6c:	bf38      	it	cc
 808da6e:	2200      	movcc	r2, #0
 808da70:	441a      	add	r2, r3
 808da72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 808da76:	b18b      	cbz	r3, 808da9c <__mdiff+0xf4>
 808da78:	6107      	str	r7, [r0, #16]
 808da7a:	e7a7      	b.n	808d9cc <__mdiff+0x24>
 808da7c:	f854 8b04 	ldr.w	r8, [r4], #4
 808da80:	fa1f f288 	uxth.w	r2, r8
 808da84:	4462      	add	r2, ip
 808da86:	1411      	asrs	r1, r2, #16
 808da88:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 808da8c:	b292      	uxth	r2, r2
 808da8e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 808da92:	ea4f 4c21 	mov.w	ip, r1, asr #16
 808da96:	f846 2b04 	str.w	r2, [r6], #4
 808da9a:	e7de      	b.n	808da5a <__mdiff+0xb2>
 808da9c:	3f01      	subs	r7, #1
 808da9e:	e7e8      	b.n	808da72 <__mdiff+0xca>

0808daa0 <__ulp>:
 808daa0:	4b11      	ldr	r3, [pc, #68]	; (808dae8 <__ulp+0x48>)
 808daa2:	400b      	ands	r3, r1
 808daa4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808daa8:	2b00      	cmp	r3, #0
 808daaa:	dd02      	ble.n	808dab2 <__ulp+0x12>
 808daac:	2000      	movs	r0, #0
 808daae:	4619      	mov	r1, r3
 808dab0:	4770      	bx	lr
 808dab2:	425b      	negs	r3, r3
 808dab4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 808dab8:	f04f 0000 	mov.w	r0, #0
 808dabc:	f04f 0100 	mov.w	r1, #0
 808dac0:	ea4f 5223 	mov.w	r2, r3, asr #20
 808dac4:	da04      	bge.n	808dad0 <__ulp+0x30>
 808dac6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 808daca:	fa43 f102 	asr.w	r1, r3, r2
 808dace:	4770      	bx	lr
 808dad0:	f1a2 0314 	sub.w	r3, r2, #20
 808dad4:	2b1e      	cmp	r3, #30
 808dad6:	bfd6      	itet	le
 808dad8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 808dadc:	2301      	movgt	r3, #1
 808dade:	fa22 f303 	lsrle.w	r3, r2, r3
 808dae2:	4618      	mov	r0, r3
 808dae4:	4770      	bx	lr
 808dae6:	bf00      	nop
 808dae8:	7ff00000 	.word	0x7ff00000

0808daec <__b2d>:
 808daec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808daf0:	6907      	ldr	r7, [r0, #16]
 808daf2:	f100 0914 	add.w	r9, r0, #20
 808daf6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 808dafa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 808dafe:	f1a7 0804 	sub.w	r8, r7, #4
 808db02:	4630      	mov	r0, r6
 808db04:	f7ff fd95 	bl	808d632 <__hi0bits>
 808db08:	f1c0 0320 	rsb	r3, r0, #32
 808db0c:	280a      	cmp	r0, #10
 808db0e:	600b      	str	r3, [r1, #0]
 808db10:	491f      	ldr	r1, [pc, #124]	; (808db90 <__b2d+0xa4>)
 808db12:	dc17      	bgt.n	808db44 <__b2d+0x58>
 808db14:	45c1      	cmp	r9, r8
 808db16:	bf28      	it	cs
 808db18:	2200      	movcs	r2, #0
 808db1a:	f1c0 0c0b 	rsb	ip, r0, #11
 808db1e:	fa26 f30c 	lsr.w	r3, r6, ip
 808db22:	bf38      	it	cc
 808db24:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 808db28:	ea43 0501 	orr.w	r5, r3, r1
 808db2c:	f100 0315 	add.w	r3, r0, #21
 808db30:	fa06 f303 	lsl.w	r3, r6, r3
 808db34:	fa22 f20c 	lsr.w	r2, r2, ip
 808db38:	ea43 0402 	orr.w	r4, r3, r2
 808db3c:	4620      	mov	r0, r4
 808db3e:	4629      	mov	r1, r5
 808db40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808db44:	45c1      	cmp	r9, r8
 808db46:	bf2e      	itee	cs
 808db48:	2200      	movcs	r2, #0
 808db4a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 808db4e:	f1a7 0808 	subcc.w	r8, r7, #8
 808db52:	f1b0 030b 	subs.w	r3, r0, #11
 808db56:	d016      	beq.n	808db86 <__b2d+0x9a>
 808db58:	f1c3 0720 	rsb	r7, r3, #32
 808db5c:	fa22 f107 	lsr.w	r1, r2, r7
 808db60:	45c8      	cmp	r8, r9
 808db62:	fa06 f603 	lsl.w	r6, r6, r3
 808db66:	ea46 0601 	orr.w	r6, r6, r1
 808db6a:	bf94      	ite	ls
 808db6c:	2100      	movls	r1, #0
 808db6e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 808db72:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 808db76:	fa02 f003 	lsl.w	r0, r2, r3
 808db7a:	40f9      	lsrs	r1, r7
 808db7c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 808db80:	ea40 0401 	orr.w	r4, r0, r1
 808db84:	e7da      	b.n	808db3c <__b2d+0x50>
 808db86:	4614      	mov	r4, r2
 808db88:	ea46 0501 	orr.w	r5, r6, r1
 808db8c:	e7d6      	b.n	808db3c <__b2d+0x50>
 808db8e:	bf00      	nop
 808db90:	3ff00000 	.word	0x3ff00000

0808db94 <__d2b>:
 808db94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808db98:	461c      	mov	r4, r3
 808db9a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 808db9e:	2101      	movs	r1, #1
 808dba0:	4690      	mov	r8, r2
 808dba2:	f7ff fc7f 	bl	808d4a4 <_Balloc>
 808dba6:	f3c4 0313 	ubfx	r3, r4, #0, #20
 808dbaa:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808dbae:	4607      	mov	r7, r0
 808dbb0:	bb2c      	cbnz	r4, 808dbfe <__d2b+0x6a>
 808dbb2:	9301      	str	r3, [sp, #4]
 808dbb4:	f1b8 0300 	subs.w	r3, r8, #0
 808dbb8:	d026      	beq.n	808dc08 <__d2b+0x74>
 808dbba:	4668      	mov	r0, sp
 808dbbc:	9300      	str	r3, [sp, #0]
 808dbbe:	f7ff fd58 	bl	808d672 <__lo0bits>
 808dbc2:	9900      	ldr	r1, [sp, #0]
 808dbc4:	b1f0      	cbz	r0, 808dc04 <__d2b+0x70>
 808dbc6:	9a01      	ldr	r2, [sp, #4]
 808dbc8:	f1c0 0320 	rsb	r3, r0, #32
 808dbcc:	fa02 f303 	lsl.w	r3, r2, r3
 808dbd0:	430b      	orrs	r3, r1
 808dbd2:	40c2      	lsrs	r2, r0
 808dbd4:	617b      	str	r3, [r7, #20]
 808dbd6:	9201      	str	r2, [sp, #4]
 808dbd8:	9b01      	ldr	r3, [sp, #4]
 808dbda:	2b00      	cmp	r3, #0
 808dbdc:	bf14      	ite	ne
 808dbde:	2102      	movne	r1, #2
 808dbe0:	2101      	moveq	r1, #1
 808dbe2:	61bb      	str	r3, [r7, #24]
 808dbe4:	6139      	str	r1, [r7, #16]
 808dbe6:	b1c4      	cbz	r4, 808dc1a <__d2b+0x86>
 808dbe8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808dbec:	4404      	add	r4, r0
 808dbee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808dbf2:	6034      	str	r4, [r6, #0]
 808dbf4:	6028      	str	r0, [r5, #0]
 808dbf6:	4638      	mov	r0, r7
 808dbf8:	b002      	add	sp, #8
 808dbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808dbfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808dc02:	e7d6      	b.n	808dbb2 <__d2b+0x1e>
 808dc04:	6179      	str	r1, [r7, #20]
 808dc06:	e7e7      	b.n	808dbd8 <__d2b+0x44>
 808dc08:	a801      	add	r0, sp, #4
 808dc0a:	f7ff fd32 	bl	808d672 <__lo0bits>
 808dc0e:	2101      	movs	r1, #1
 808dc10:	9b01      	ldr	r3, [sp, #4]
 808dc12:	6139      	str	r1, [r7, #16]
 808dc14:	617b      	str	r3, [r7, #20]
 808dc16:	3020      	adds	r0, #32
 808dc18:	e7e5      	b.n	808dbe6 <__d2b+0x52>
 808dc1a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808dc1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808dc22:	6030      	str	r0, [r6, #0]
 808dc24:	6918      	ldr	r0, [r3, #16]
 808dc26:	f7ff fd04 	bl	808d632 <__hi0bits>
 808dc2a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 808dc2e:	6029      	str	r1, [r5, #0]
 808dc30:	e7e1      	b.n	808dbf6 <__d2b+0x62>

0808dc32 <__ratio>:
 808dc32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808dc36:	4688      	mov	r8, r1
 808dc38:	4669      	mov	r1, sp
 808dc3a:	4681      	mov	r9, r0
 808dc3c:	f7ff ff56 	bl	808daec <__b2d>
 808dc40:	460f      	mov	r7, r1
 808dc42:	4604      	mov	r4, r0
 808dc44:	460d      	mov	r5, r1
 808dc46:	4640      	mov	r0, r8
 808dc48:	a901      	add	r1, sp, #4
 808dc4a:	f7ff ff4f 	bl	808daec <__b2d>
 808dc4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808dc52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808dc56:	468b      	mov	fp, r1
 808dc58:	eba3 0c02 	sub.w	ip, r3, r2
 808dc5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 808dc60:	1a9b      	subs	r3, r3, r2
 808dc62:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 808dc66:	2b00      	cmp	r3, #0
 808dc68:	bfd5      	itete	le
 808dc6a:	460a      	movle	r2, r1
 808dc6c:	462a      	movgt	r2, r5
 808dc6e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 808dc72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 808dc76:	bfd8      	it	le
 808dc78:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 808dc7c:	465b      	mov	r3, fp
 808dc7e:	4602      	mov	r2, r0
 808dc80:	4639      	mov	r1, r7
 808dc82:	4620      	mov	r0, r4
 808dc84:	f7fd fb18 	bl	808b2b8 <__aeabi_ddiv>
 808dc88:	b003      	add	sp, #12
 808dc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808dc8e <__copybits>:
 808dc8e:	3901      	subs	r1, #1
 808dc90:	b570      	push	{r4, r5, r6, lr}
 808dc92:	1149      	asrs	r1, r1, #5
 808dc94:	6914      	ldr	r4, [r2, #16]
 808dc96:	3101      	adds	r1, #1
 808dc98:	f102 0314 	add.w	r3, r2, #20
 808dc9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808dca0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808dca4:	1f05      	subs	r5, r0, #4
 808dca6:	42a3      	cmp	r3, r4
 808dca8:	d30c      	bcc.n	808dcc4 <__copybits+0x36>
 808dcaa:	1aa3      	subs	r3, r4, r2
 808dcac:	3b11      	subs	r3, #17
 808dcae:	f023 0303 	bic.w	r3, r3, #3
 808dcb2:	3211      	adds	r2, #17
 808dcb4:	42a2      	cmp	r2, r4
 808dcb6:	bf88      	it	hi
 808dcb8:	2300      	movhi	r3, #0
 808dcba:	4418      	add	r0, r3
 808dcbc:	2300      	movs	r3, #0
 808dcbe:	4288      	cmp	r0, r1
 808dcc0:	d305      	bcc.n	808dcce <__copybits+0x40>
 808dcc2:	bd70      	pop	{r4, r5, r6, pc}
 808dcc4:	f853 6b04 	ldr.w	r6, [r3], #4
 808dcc8:	f845 6f04 	str.w	r6, [r5, #4]!
 808dccc:	e7eb      	b.n	808dca6 <__copybits+0x18>
 808dcce:	f840 3b04 	str.w	r3, [r0], #4
 808dcd2:	e7f4      	b.n	808dcbe <__copybits+0x30>

0808dcd4 <__any_on>:
 808dcd4:	f100 0214 	add.w	r2, r0, #20
 808dcd8:	6900      	ldr	r0, [r0, #16]
 808dcda:	114b      	asrs	r3, r1, #5
 808dcdc:	4298      	cmp	r0, r3
 808dcde:	b510      	push	{r4, lr}
 808dce0:	db11      	blt.n	808dd06 <__any_on+0x32>
 808dce2:	dd0a      	ble.n	808dcfa <__any_on+0x26>
 808dce4:	f011 011f 	ands.w	r1, r1, #31
 808dce8:	d007      	beq.n	808dcfa <__any_on+0x26>
 808dcea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808dcee:	fa24 f001 	lsr.w	r0, r4, r1
 808dcf2:	fa00 f101 	lsl.w	r1, r0, r1
 808dcf6:	428c      	cmp	r4, r1
 808dcf8:	d10b      	bne.n	808dd12 <__any_on+0x3e>
 808dcfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808dcfe:	4293      	cmp	r3, r2
 808dd00:	d803      	bhi.n	808dd0a <__any_on+0x36>
 808dd02:	2000      	movs	r0, #0
 808dd04:	bd10      	pop	{r4, pc}
 808dd06:	4603      	mov	r3, r0
 808dd08:	e7f7      	b.n	808dcfa <__any_on+0x26>
 808dd0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808dd0e:	2900      	cmp	r1, #0
 808dd10:	d0f5      	beq.n	808dcfe <__any_on+0x2a>
 808dd12:	2001      	movs	r0, #1
 808dd14:	e7f6      	b.n	808dd04 <__any_on+0x30>

0808dd16 <_calloc_r>:
 808dd16:	b538      	push	{r3, r4, r5, lr}
 808dd18:	fb02 f501 	mul.w	r5, r2, r1
 808dd1c:	4629      	mov	r1, r5
 808dd1e:	f7fa fe7b 	bl	8088a18 <_malloc_r>
 808dd22:	4604      	mov	r4, r0
 808dd24:	b118      	cbz	r0, 808dd2e <_calloc_r+0x18>
 808dd26:	462a      	mov	r2, r5
 808dd28:	2100      	movs	r1, #0
 808dd2a:	f7fe f905 	bl	808bf38 <memset>
 808dd2e:	4620      	mov	r0, r4
 808dd30:	bd38      	pop	{r3, r4, r5, pc}

0808dd32 <__ascii_wctomb>:
 808dd32:	4603      	mov	r3, r0
 808dd34:	4608      	mov	r0, r1
 808dd36:	b141      	cbz	r1, 808dd4a <__ascii_wctomb+0x18>
 808dd38:	2aff      	cmp	r2, #255	; 0xff
 808dd3a:	d904      	bls.n	808dd46 <__ascii_wctomb+0x14>
 808dd3c:	228a      	movs	r2, #138	; 0x8a
 808dd3e:	f04f 30ff 	mov.w	r0, #4294967295
 808dd42:	601a      	str	r2, [r3, #0]
 808dd44:	4770      	bx	lr
 808dd46:	2001      	movs	r0, #1
 808dd48:	700a      	strb	r2, [r1, #0]
 808dd4a:	4770      	bx	lr

0808dd4c <__aeabi_d2lz>:
 808dd4c:	b538      	push	{r3, r4, r5, lr}
 808dd4e:	460c      	mov	r4, r1
 808dd50:	4605      	mov	r5, r0
 808dd52:	4621      	mov	r1, r4
 808dd54:	4628      	mov	r0, r5
 808dd56:	2200      	movs	r2, #0
 808dd58:	2300      	movs	r3, #0
 808dd5a:	f7fd fbf5 	bl	808b548 <__aeabi_dcmplt>
 808dd5e:	b928      	cbnz	r0, 808dd6c <__aeabi_d2lz+0x20>
 808dd60:	4628      	mov	r0, r5
 808dd62:	4621      	mov	r1, r4
 808dd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808dd68:	f7fe b85a 	b.w	808be20 <__aeabi_d2ulz>
 808dd6c:	4628      	mov	r0, r5
 808dd6e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 808dd72:	f7fe f855 	bl	808be20 <__aeabi_d2ulz>
 808dd76:	4240      	negs	r0, r0
 808dd78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808dd7c:	bd38      	pop	{r3, r4, r5, pc}
 808dd7e:	bf00      	nop

0808dd80 <dynalib_user>:
 808dd80:	0051 0808 0091 0808 00b9 0808 00bd 0808     Q...............
 808dd90:	0000 0000 0100 0402 1008 2e25 5832 5400     ..........%.2X.T
 808dda0:	6d65 6570 6172 7574 6572 7220 6165 6964     emperature readi
 808ddb0:	676e 6620 6f72 206d 4948 3848 3231 0030     ng from HIH8120.
 808ddc0:	6554 706d 7265 7461 7275 2065 6572 6461     Temperature read
 808ddd0:	6e69 2067 7266 6d6f 5420 504d 3633 5400     ing from TMP36.T
 808dde0:	6d65 6570 6172 7574 6572 7220 6165 6964     emperature readi
 808ddf0:	676e 6620 6f72 206d 4d42 2045 6f66 2072     ng from BME for 
 808de00:	6c41 6870 7361 6e65 6573 4800 6d75 6469     Alphasense.Humid
 808de10:	7469 2079 6572 6461 6e69 2067 7266 6d6f     ity reading from
 808de20:	4820 4849 3138 3032 4800 6d75 6469 7469      HIH8120.Humidit
 808de30:	2079 6572 6461 6e69 2067 7266 6d6f 4220     y reading from B
 808de40:	454d 5300 6174 7472 6f20 2066 6c61 6870     ME.Start of alph
 808de50:	2061 2032 6572 6461 4300 756f 646c 276e     a 2 read.Couldn'
 808de60:	2074 6f63 6d6d 6e75 6369 7461 2065 6977     t communicate wi
 808de70:	6874 4c20 504d 3139 3030 2030 0032 6168     th LMP91000 2.ha
 808de80:	666c 7620 6572 3266 6120 7364 0031 7453     lf vref2 ads1.St
 808de90:	7461 7375 3d20 203d 2030 7266 6d6f 4c20     atus == 0 from L
 808dea0:	504d 3139 3030 2030 2032 7473 7461 7375     MP91000 2 status
 808deb0:	7220 6765 2d00 3939 5700 6972 6974 676e      reg.-99.Writing
 808dec0:	6420 7461 2061 6f74 6c20 676f 6620 6c69      data to log fil
 808ded0:	2e65 4600 6c69 2065 7453 7261 2074 6974     e..File Start ti
 808dee0:	656d 7473 6d61 3a70 0020 6e55 6261 656c     mestamp: .Unable
 808def0:	7420 206f 7277 7469 2065 6f74 6c20 676f      to write to log
 808df00:	6620 6c69 0065 6e69 7469 4700 4147 4500      file.init.GGA.E
 808df10:	7272 726f 7220 6165 6964 676e 4720 5350     rror reading GPS
 808df20:	4700 5350 7520 6374 7320 7274 6e69 3a67     .GPS utc string:
 808df30:	0020 614c 6974 7574 6564 7320 7274 6e69      .Latitude strin
 808df40:	3a67 0020 6f6c 676e 7469 6475 2065 7473     g: .longitude st
 808df50:	6972 676e 203a 4200 4441 6920 646e 7865     ring: .BAD index
 808df60:	6920 206e 6572 6461 7047 5373 7274 6165      in readGpsStrea
 808df70:	0a6d 4500 7272 726f 7220 6165 6964 676e     m..Error reading
 808df80:	4720 5350 5220 434d 5200 6365 6965 6576      GPS RMC.Receive
 808df90:	2064 6162 2064 6e69 6564 2078 6e69 7220     d bad index in r
 808dfa0:	6165 4764 7370 7453 6572 6d61 6144 6574     eadGpsStreamDate
 808dfb0:	5300 6174 7472 6f20 2066 6c61 6870 2061     .Start of alpha 
 808dfc0:	6572 6461 4300 756f 646c 276e 2074 6f63     read.Couldn't co
 808dfd0:	6d6d 6e75 6369 7461 2065 6977 6874 4c20     mmunicate with L
 808dfe0:	504d 3139 3030 5f30 0031 6148 666c 6f76     MP91000_1.Halfvo
 808dff0:	746c 203a 3125 322e 0a66 000d 6148 666c     lt: %1.2f...Half
 808e000:	6f76 746c 6820 6769 6568 2072 6874 6e61     volt higher than
 808e010:	3020 352e 5300 6174 7574 2073 203d 2030      0.5.Status = 0 
 808e020:	7266 6d6f 4c20 504d 3139 3030 2030 7473     from LMP91000 st
 808e030:	7461 7375 7220 6765 4c00 504d 3031 3030     atus reg.LMP1000
 808e040:	7320 6174 7574 2073 203d 0030 4f43 6d20      status = 0.CO m
 808e050:	6165 7573 6572 656d 746e 3a73 2020 0d0a     easurements:  ..
 808e060:	4100 5f30 6167 3a73 2520 0a64 000d 3141     .A0_gas: %d...A1
 808e070:	615f 7875 203a 6425 0d0a 4100 5f32 6574     _aux: %d...A2_te
 808e080:	706d 203a 6425 0d0a 6800 6c61 5f66 7276     mp: %d...half_vr
 808e090:	6665 203a 6425 0d0a 4000 0021 002c 6553     ef: %d...@!.,.Se
 808e0a0:	646e 6e69 2067 656e 2077 6977 6966 6320     nding new wifi c
 808e0b0:	6572 6564 746e 6169 736c 7420 206f 5345     redentials to ES
 808e0c0:	0050 7553 6363 7365 2173 2a00 4f00 7475     P.Success!.*.Out
 808e0d0:	7570 7474 6e69 2067 4f43 7420 206f 4950     putting CO to PI
 808e0e0:	002e 002d 6425 252f 2f6d 7925 252c 3a48     ..-.%d/%m/%y,%H:
 808e0f0:	4d25 253a 0053 0d0a 0026 6c4f 2064 6e69     %M:%S...&.Old in
 808e100:	7570 2074 7563 7272 6e65 2074 696c 696d     put current limi
 808e110:	3a74 2520 0a64 000d 654e 2077 6e69 7570     t: %d...New inpu
 808e120:	2074 7563 7272 6e65 2074 696c 696d 3a74     t current limit:
 808e130:	2520 0a64 000d 6e49 7263 6165 6973 676e      %d...Increasing
 808e140:	4320 6168 6772 2065 7563 7272 6e65 2074      Charge current 
 808e150:	7266 6d6f 2520 2064 416d 7420 206f 6e00     from %d mA to .n
 808e160:	7765 6320 6168 6772 2065 7563 7272 6e65     ew charge curren
 808e170:	2074 666f 2520 2064 416d 0d0a 4300 7275     t of %d mA...Cur
 808e180:	6572 746e 7320 6f74 6572 2064 7373 6469     rent stored ssid
 808e190:	203a 4300 7275 6572 746e 7320 6f74 6572     : .Current store
 808e1a0:	2064 6170 7373 6f77 6472 203a 5000 656c     d password: .Ple
 808e1b0:	7361 2065 6e65 6574 2072 6170 7373 6f77     ase enter passwo
 808e1c0:	6472 6920 206e 726f 6564 2072 6f74 6d20     rd in order to m
 808e1d0:	6b61 2065 6863 6e61 6567 2e73 0d0a 6200     ake changes....b
 808e1e0:	756f 646c 5000 7361 7773 726f 2064 6f63     ould.Password co
 808e1f0:	7272 6365 2174 4500 746e 7265 6e20 7765     rrect!.Enter new
 808e200:	7320 6973 3a64 5900 756f 2072 656e 2077      ssid:.Your new 
 808e210:	7373 6469 7720 6c69 206c 6562 203a 4900     ssid will be: .I
 808e220:	2073 6874 7369 6f20 616b 3f79 7928 6f20     s this okay?(y o
 808e230:	2072 296e 5300 7661 6e69 2067 656e 2077     r n).Saving new 
 808e240:	7373 6469 4500 746e 7265 6e20 7765 7020     ssid.Enter new p
 808e250:	7361 7773 726f 0064 6f59 7275 6e20 7765     assword.Your new
 808e260:	7020 7361 7773 726f 2064 6977 6c6c 6220      password will b
 808e270:	3a65 0020 6153 6976 676e 6e20 7765 7020     e: .Saving new p
 808e280:	7361 7773 726f 0064 6b6f 7961 202c 6f6e     assword.okay, no
 808e290:	7020 6f72 6c62 6d65 0d0a 5000 656c 7361      problem...Pleas
 808e2a0:	2065 6e65 6574 2072 6170 7373 6f77 6472     e enter password
 808e2b0:	6920 206e 726f 6564 2072 6f74 6520 616e      in order to ena
 808e2c0:	6c62 2065 6164 6174 7020 7375 2068 6f74     ble data push to
 808e2d0:	5320 6e65 6973 6c62 2065 6f49 0074 6d69      Sensible Iot.im
 808e2e0:	6573 736e 6269 656c 4500 616e 6c62 6e69     sensible.Enablin
 808e2f0:	2067 6573 736e 6269 656c 6920 746f 6420     g sensible iot d
 808e300:	7461 2061 7570 6873 002e 0d0a 6e49 6f63     ata push....Inco
 808e310:	7272 6365 2074 6170 7373 6f77 6472 0021     rrect password!.
 808e320:	6c50 6165 6573 6520 746e 7265 7020 7361     Please enter pas
 808e330:	7773 726f 2064 6e69 6f20 6472 7265 7420     sword in order t
 808e340:	206f 7061 6c70 2079 6564 6166 6c75 2074     o apply default 
 808e350:	6573 7474 6e69 7367 5000 7361 7773 726f     settings.Passwor
 808e360:	2064 6f63 7272 6365 2c74 7220 7365 7465     d correct, reset
 808e370:	6974 676e 6120 6c6c 7320 7465 6974 676e     ting all setting
 808e380:	2073 6f74 6420 6665 7561 746c 2021 5020     s to default!  P
 808e390:	656c 7361 2065 6572 6573 2074 6f79 7275     lease reset your
 808e3a0:	4920 2044 6f74 7420 6568 6f20 656e 7320      ID to the one s
 808e3b0:	6f68 6e77 6f20 206e 6f79 7275 6520 636e     hown on your enc
 808e3c0:	6f6c 7573 6572 002e 6e45 6574 2072 656e     losure..Enter ne
 808e3d0:	2077 6544 6976 6563 7420 6d69 2065 6e61     w Device time an
 808e3e0:	2064 6164 6574 2820 3031 6420 6769 7469     d date (10 digit
 808e3f0:	6520 6f70 6863 7420 6d69 7365 6174 706d      epoch timestamp
 808e400:	3a29 0a00 4e0d 7765 4420 7665 6369 2065     ):...New Device 
 808e410:	6954 656d 003a 0d0a 6e49 6176 696c 2064     Time:...Invalid 
 808e420:	6176 756c 2165 4300 7275 6572 746e 4320     value!.Current C
 808e430:	324f 7320 6f6c 6570 003a 7020 6d70 4500     O2 slope:. ppm.E
 808e440:	746e 7265 6e20 7765 4320 324f 7320 6f6c     nter new CO2 slo
 808e450:	6570 0d0a 0a00 4e0d 7765 4320 324f 7320     pe.....New CO2 s
 808e460:	6f6c 6570 203a 4300 7275 6572 746e 4320     lope: .Current C
 808e470:	204f 6c73 706f 3a65 4500 746e 7265 6e20     O slope:.Enter n
 808e480:	7765 4320 204f 6c73 706f 0a65 000d 0d0a     ew CO slope.....
 808e490:	654e 2077 4f43 2041 6c73 706f 3a65 0020     New COA slope: .
 808e4a0:	7543 7272 6e65 2074 4d50 2031 6c73 706f     Current PM1 slop
 808e4b0:	3a65 4500 746e 7265 6e20 7765 5020 314d     e:.Enter new PM1
 808e4c0:	7320 6f6c 6570 0d0a 0a00 4e0d 7765 5020      slope.....New P
 808e4d0:	314d 7320 6f6c 6570 203a 4300 7275 6572     M1 slope: .Curre
 808e4e0:	746e 5020 324d 352e 7320 6f6c 6570 003a     nt PM2.5 slope:.
 808e4f0:	6e45 6574 2072 656e 2077 4d50 2e32 2035     Enter new PM2.5 
 808e500:	6c73 706f 0a65 000d 0d0a 654e 2077 4d50     slope.....New PM
 808e510:	2e32 2035 6c73 706f 3a65 0020 7543 7272     2.5 slope: .Curr
 808e520:	6e65 2074 4d50 3031 7320 6f6c 6570 003a     ent PM10 slope:.
 808e530:	6e45 6574 2072 656e 2077 4d50 3031 7320     Enter new PM10 s
 808e540:	6f6c 6570 0d0a 0a00 4e0d 7765 5020 314d     lope.....New PM1
 808e550:	2030 6c73 706f 3a65 0020 7543 7272 6e65     0 slope: .Curren
 808e560:	2074 6554 706d 7265 7461 7275 2065 6c73     t Temperature sl
 808e570:	706f 3a65 2000 6544 7267 6565 2073 0043     ope:. Degrees C.
 808e580:	6e45 6574 2072 656e 2077 6554 706d 7265     Enter new Temper
 808e590:	7461 7275 2065 6c73 706f 0a65 000d 0d0a     ature slope.....
 808e5a0:	654e 2077 6554 706d 7265 7461 7275 2065     New Temperature 
 808e5b0:	6c73 706f 3a65 0020 7543 7272 6e65 2074     slope: .Current 
 808e5c0:	7250 7365 7573 6572 7320 6f6c 6570 003a     Pressure slope:.
 808e5d0:	7420 726f 0072 6e45 6574 2072 656e 2077      torr.Enter new 
 808e5e0:	7250 7365 7573 6572 7320 6f6c 6570 0d0a     Pressure slope..
 808e5f0:	0a00 4e0d 7765 5020 6572 7373 7275 2065     ...New Pressure 
 808e600:	6c73 706f 3a65 0020 7543 7272 6e65 2074     slope: .Current 
 808e610:	4852 7320 6f6c 6570 003a 2520 4500 746e     RH slope:. %.Ent
 808e620:	7265 6e20 7765 5220 2048 6c73 706f 0a65     er new RH slope.
 808e630:	000d 0d0a 654e 2077 4852 7320 6f6c 6570     ....New RH slope
 808e640:	203a 4300 3a4f 2520 2e31 6633 7020 6d70     : .CO: %1.3f ppm
 808e650:	0d0a 4300 6d6f 616d 646e 203a 4420 7365     ...Command:  Des
 808e660:	7263 7069 6974 6e6f 6100 203a 4120 6a64     cription.a:  Adj
 808e670:	7375 2074 4f43 2032 6c73 706f 0065 3a62     ust CO2 slope.b:
 808e680:	2020 6441 756a 7473 4320 324f 7a20 7265       Adjust CO2 zer
 808e690:	006f 3a63 2020 6441 756a 7473 4320 204f     o.c:  Adjust CO 
 808e6a0:	6c73 706f 0065 3a64 2020 6441 756a 7473     slope.d:  Adjust
 808e6b0:	4320 204f 657a 6f72 6500 203a 4120 6a64      CO zero.e:  Adj
 808e6c0:	7375 2074 4d50 2031 6c73 706f 0065 3a66     ust PM1 slope.f:
 808e6d0:	2020 6441 756a 7473 5020 314d 7a20 7265       Adjust PM1 zer
 808e6e0:	006f 3a67 2020 6441 756a 7473 5020 324d     o.g:  Adjust PM2
 808e6f0:	352e 7320 6f6c 6570 6800 203a 4120 6a64     .5 slope.h:  Adj
 808e700:	7375 2074 4d50 2e32 2035 657a 6f72 6900     ust PM2.5 zero.i
 808e710:	203a 4120 6a64 7375 2074 4d50 3031 7320     :  Adjust PM10 s
 808e720:	6f6c 6570 6a00 203a 4120 6a64 7375 2074     lope.j:  Adjust 
 808e730:	4d50 3031 7a20 7265 006f 3a6b 2020 6441     PM10 zero.k:  Ad
 808e740:	756a 7473 5420 6d65 6570 6172 7574 6572     just Temperature
 808e750:	7320 6f6c 6570 6c00 203a 4120 6a64 7375      slope.l:  Adjus
 808e760:	2074 6554 706d 7265 7461 7275 2065 657a     t Temperature ze
 808e770:	6f72 6d00 203a 4120 6a64 7375 2074 7250     ro.m:  Adjust Pr
 808e780:	7365 7573 6572 7320 6f6c 6570 6e00 203a     essure slope.n: 
 808e790:	4120 6a64 7375 2074 7250 7365 7573 6572      Adjust Pressure
 808e7a0:	7a20 7265 006f 3a6f 2020 6441 756a 7473      zero.o:  Adjust
 808e7b0:	4820 6d75 6469 7469 2079 6c73 706f 0065      Humidity slope.
 808e7c0:	3a70 2020 6441 756a 7473 4820 6d75 6469     p:  Adjust Humid
 808e7d0:	7469 2079 657a 6f72 7100 203a 4520 616e     ity zero.q:  Ena
 808e7e0:	6c62 2065 6573 6972 6c61 6420 6265 6775     ble serial debug
 808e7f0:	6967 676e 7200 203a 4420 7369 6261 656c     ging.r:  Disable
 808e800:	7320 7265 6169 206c 6564 7562 6767 6e69      serial debuggin
 808e810:	0067 3a73 2020 754f 7074 7475 6820 6165     g.s:  Output hea
 808e820:	6564 2072 7473 6972 676e 7400 203a 4520     der string.t:  E
 808e830:	746e 7265 6e20 7765 7420 6d69 2065 6e61     nter new time an
 808e840:	2064 6164 6574 7500 203a 4520 746e 7265     d date.u:  Enter
 808e850:	6e20 7765 7420 6d69 2065 6f7a 656e 7600      new time zone.v
 808e860:	203a 4120 6a64 7375 2074 6874 2065 6544     :  Adjust the De
 808e870:	6976 6563 4920 0044 3a77 2020 6547 2074     vice ID.w:  Get 
 808e880:	6977 6966 6320 6572 6564 746e 6169 736c     wifi credentials
 808e890:	7900 203a 4520 616e 6c62 2065 6563 6c6c     .y:  Enable cell
 808e8a0:	6c75 7261 7a00 203a 4420 7369 6261 656c     ular.z:  Disable
 808e8b0:	6320 6c65 756c 616c 0072 3a31 2020 6441      cellular.1:  Ad
 808e8c0:	756a 7473 6720 7361 6c20 776f 7265 6c20     just gas lower l
 808e8d0:	6d69 7469 3200 203a 4120 6a64 7375 2074     imit.2:  Adjust 
 808e8e0:	6167 2073 7075 6570 2072 696c 696d 0074     gas upper limit.
 808e8f0:	3a33 2020 6547 2074 7562 6c69 2064 6576     3:  Get build ve
 808e900:	7372 6f69 006e 3a34 2020 6e45 6261 656c     rsion.4:  Enable
 808e910:	4f20 6f7a 656e 3500 203a 4420 7369 6261      Ozone.5:  Disab
 808e920:	656c 4f20 6f7a 656e 3600 203a 4520 616e     le Ozone.6:  Ena
 808e930:	6c62 2065 4f56 2743 0073 3a37 2020 6944     ble VOC's.7:  Di
 808e940:	6173 6c62 2065 4f56 2743 0073 3a38 2020     sable VOC's.8:  
 808e950:	754f 7074 7475 7420 6568 5020 494d 2043     Output the PMIC 
 808e960:	7973 7473 6d65 6320 6e6f 6966 7567 6172     system configura
 808e970:	6974 6e6f 3900 203a 4920 636e 6572 7361     tion.9:  Increas
 808e980:	2065 6874 2065 6863 7261 6567 6320 7275     e the charge cur
 808e990:	6572 746e 6220 2079 3436 6d20 0041 3a30     rent by 64 mA.0:
 808e9a0:	2020 6e49 7263 6165 6573 7420 6568 6320       Increase the c
 808e9b0:	7275 6572 746e 6920 706e 7475 6c20 6d69     urrent input lim
 808e9c0:	7469 6220 2079 3031 2030 416d 4100 203a     it by 100 mA.A: 
 808e9d0:	4f20 7475 7570 2074 4f43 6320 6e6f 7473      Output CO const
 808e9e0:	6e61 6c74 2079 6e61 2064 6172 6970 6c64     antly and rapidl
 808e9f0:	0079 3a42 2020 754f 7074 7475 5020 204d     y.B:  Output PM 
 808ea00:	6f63 736e 6174 746e 796c 6120 646e 7220     constantly and r
 808ea10:	7061 6469 796c 4300 203a 4320 6168 676e     apidly.C:  Chang
 808ea20:	2065 6574 706d 7265 7461 7275 2065 6e75     e temperature un
 808ea30:	7469 2073 6f74 4320 6c65 6973 7375 4400     its to Celsius.D
 808ea40:	203a 4420 7369 6261 656c 5420 504d 3633     :  Disable TMP36
 808ea50:	7420 6d65 6570 6172 7574 6572 7320 6e65      temperature sen
 808ea60:	6f73 2072 6e61 2064 7375 2065 4d42 3645     sor and use BME6
 808ea70:	3038 7420 6d65 6570 6172 7574 6572 4500     80 temperature.E
 808ea80:	203a 4520 616e 6c62 2065 4d54 3350 2036     :  Enable TMP36 
 808ea90:	6574 706d 7265 7461 7275 2065 6573 736e     temperature sens
 808eaa0:	726f 6120 646e 6420 7369 6261 656c 4220     or and disable B
 808eab0:	454d 3836 2030 6574 706d 7265 7461 7275     ME680 temperatur
 808eac0:	0065 3a46 2020 6843 6e61 6567 7420 6d65     e.F:  Change tem
 808ead0:	6570 6172 7574 6572 7520 696e 7374 7420     perature units t
 808eae0:	206f 6146 7268 6e65 6568 7469 4700 203a     o Fahrenheit.G: 
 808eaf0:	5220 6165 2064 7a6f 6e6f 2065 7266 6d6f      Read ozone from
 808eb00:	6120 616e 6f6c 2067 6e69 7570 2074 6e28      analog input (n
 808eb10:	746f 6420 6769 7469 6c61 796c 2d20 6220     ot digitally - b
 808eb20:	616f 6472 6420 7065 6e65 6564 746e 0029     oard dependent).
 808eb30:	3a48 2020 6552 6461 6f20 6f7a 656e 6420     H:  Read ozone d
 808eb40:	6769 7469 6c61 796c 2820 6f6e 2074 6874     igitally (not th
 808eb50:	6f72 6775 2068 6e61 6c61 676f 6920 706e     rough analog inp
 808eb60:	7475 2d20 6220 616f 6472 6420 7065 6e65     ut - board depen
 808eb70:	6564 746e 0029 3a49 2020 6441 756a 7473     dent).I:  Adjust
 808eb80:	6620 6572 7571 6e65 7963 6620 726f 7520      frequency for u
 808eb90:	6c70 616f 6964 676e 7420 7268 756f 6867     ploading through
 808eba0:	6320 6c65 756c 616c 0072 3a4a 2020 6552      cellular.J:  Re
 808ebb0:	6573 2074 5345 2c50 4320 324f 202c 6c50     set ESP, CO2, Pl
 808ebc0:	6e61 6f74 6577 0072 3a4b 2020 6f43 746e     antower.K:  Cont
 808ebd0:	6e69 6f75 7375 7320 7265 6169 206c 756f     inuous serial ou
 808ebe0:	7074 7475 6f20 2066 5047 0053 3a4c 2020     tput of GPS.L:  
 808ebf0:	7257 7469 2065 6564 6166 6c75 2074 6573     Write default se
 808ec00:	7474 6e69 7367 4d00 203a 4520 616e 6c62     ttings.M:  Enabl
 808ec10:	2065 3032 2025 6162 7474 7265 2079 6874     e 20% battery th
 808ec20:	6572 6873 6c6f 2064 696c 696d 6974 676e     reshold limiting
 808ec30:	4e00 203a 4420 7369 6261 656c 3220 2530     .N:  Disable 20%
 808ec40:	6220 7461 6574 7972 7420 7268 7365 6f68      battery thresho
 808ec50:	646c 6c20 6d69 7469 6e69 2067 4157 4e52     ld limiting WARN
 808ec60:	4e49 2147 0021 3a4f 2020 6e45 6261 656c     ING!!.O:  Enable
 808ec70:	6c20 776f 7020 776f 7265 6620 726f 4720      low power for G
 808ec80:	5350 6d20 646f 6c75 0065 3a50 2020 7554     PS module.P:  Tu
 808ec90:	6e72 6f20 6666 4220 5441 4546 0054 3a51     rn off BATFET.Q:
 808eca0:	2020 6c41 6f6c 2077 4142 4654 5445 7420       Allow BATFET t
 808ecb0:	206f 7574 6e72 6f20 006e 3a52 2020 6944     o turn on.R:  Di
 808ecc0:	6173 6c62 2065 4241 2043 6f6c 6967 2063     sable ABC logic 
 808ecd0:	6f66 2072 4f43 2032 6573 736e 726f 5300     for CO2 sensor.S
 808ece0:	203a 4520 616e 6c62 2065 4241 2043 6f6c     :  Enable ABC lo
 808ecf0:	6967 2063 6f66 2072 4f43 2032 6573 736e     gic for CO2 sens
 808ed00:	726f 5400 203a 4520 616e 6c62 2f65 6964     or.T:  Enable/di
 808ed10:	6173 6c62 2065 4948 3848 3231 2030 4852     sable HIH8120 RH
 808ed20:	7320 6e65 6f73 0072 3a55 2020 7753 7469      sensor.U:  Swit
 808ed30:	6863 7320 636f 656b 2074 6877 7265 2065     ch socket where 
 808ed40:	4f43 6920 2073 6572 6461 6620 6f72 006d     CO is read from.
 808ed50:	3a57 2020 6e45 6261 656c 442f 7369 6261     W:  Enable/Disab
 808ed60:	656c 6720 6f6f 6c67 2065 6f6c 6163 6974     le google locati
 808ed70:	6e6f 7320 7265 6976 6563 0073 3a56 2020     on services.V:  
 808ed80:	6143 696c 7262 7461 2065 4f43 2032 6573     Calibrate CO2 se
 808ed90:	736e 726f 2d20 6d20 7375 2074 7573 7070     nsor - must supp
 808eda0:	796c 6120 626d 6569 746e 6c20 7665 6c65     ly ambient level
 808edb0:	2820 6f67 6f20 7475 6973 6564 2921 5a00      (go outside!).Z
 808edc0:	203a 4f20 7475 7570 2074 6563 6c6c 6c75     :  Output cellul
 808edd0:	7261 6920 666e 726f 616d 6974 6e6f 2820     ar information (
 808ede0:	4343 4449 202c 4d49 4945 202c 7465 2963     CCID, IMEI, etc)
 808edf0:	2100 203a 4320 6e6f 6974 756e 756f 2073     .!:  Continuous 
 808ee00:	6573 6972 6c61 6f20 7475 7570 2074 666f     serial output of
 808ee10:	5620 434f 7327 4000 2020 4520 616e 6c62      VOC's.@   Enabl
 808ee20:	2f65 6944 6173 6c62 2065 6553 736e 6269     e/Disable Sensib
 808ee30:	656c 692d 746f 6420 7461 2061 7570 6873     le-iot data push
 808ee40:	202e 4920 2066 6e65 6261 656c 2c64 7420     .  If enabled, t
 808ee50:	6d69 2065 6f7a 656e 7720 6c69 206c 6562     ime zone will be
 808ee60:	6920 6e67 726f 6465 2d20 5520 4354 7720      ignored - UTC w
 808ee70:	6c69 206c 6562 7520 6573 2e64 2300 2020     ill be used..#  
 808ee80:	4520 616e 6c62 2f65 6944 6173 6c62 2065      Enable/Disable 
 808ee90:	6163 7472 706f 6570 2072 6f70 6577 2072     cartopper power 
 808eea0:	6f6d 6564 202e 4920 2066 6e65 6261 656c     mode.  If enable
 808eeb0:	2c64 6120 7362 6e65 6563 6f20 2066 7865     d, absence of ex
 808eec0:	6574 6e72 6c61 7020 776f 7265 7720 6c69     ternal power wil
 808eed0:	206c 7473 706f 6320 6c65 756c 616c 2e72     l stop cellular.
 808eee0:	3f00 203a 4f20 7475 7570 2074 6874 7369     .?:  Output this
 808eef0:	6d20 6e65 0075 3a78 2020 7845 7469 2073      menu.x:  Exits 
 808ef00:	6874 7369 6d20 6e65 0075 6170 756d 0070     this menu.pamup.
 808ef10:	7550 6c62 7369 6568 2064 6170 756d 2070     Published pamup 
 808ef20:	6164 6174 0021 6543 6c6c 6c75 7261 6920     data!.Cellular i
 808ef30:	2073 6964 6173 6c62 6465 002e 6f43 6c75     s disabled..Coul
 808ef40:	6e64 7427 6320 6e6f 656e 7463 7420 206f     dn't connect to 
 808ef50:	6170 7472 6369 656c 002e 003b 694c 656e     particle..;.Line
 808ef60:	7420 206f 7277 7469 2065 6f74 6320 6f6c      to write to clo
 808ef70:	6475 003a 6c62 6861 6f66 6e72 776f 5300     ud:.blahfornow.S
 808ef80:	6e65 6964 676e 6420 7461 2061 6f74 6520     ending data to e
 808ef90:	7073 7420 206f 7075 6f6c 6461 7620 6169     sp to upload via
 808efa0:	7720 6669 2e69 2e2e 5300 6e65 6964 676e      wifi....Sending
 808efb0:	6420 7461 2061 6f74 6520 7073 7420 206f      data to esp to 
 808efc0:	7075 6f6c 6461 7620 6169 7720 6669 0069     upload via wifi.
 808efd0:	7257 7469 6e69 2067 6f72 2077 6f74 6620     Writing row to f
 808efe0:	6c69 2e65 4400 5645 432c 284f 7070 296d     ile..DEV,CO(ppm)
 808eff0:	432c 324f 7028 6d70 2c29 4f56 7343 4928     ,CO2(ppm),VOCs(I
 808f000:	5141 2c29 4d50 2c31 4d50 5f32 2c35 4d50     AQ),PM1,PM2_5,PM
 808f010:	3031 542c 4328 2c29 7250 7365 2873 426d     10,T(C),Press(mB
 808f020:	7261 2c29 4852 2528 2c29 334f 7028 6270     ar),RH(%),O3(ppb
 808f030:	2c29 6142 7474 2528 2c29 6e53 2864 6264     ),Batt(%),Snd(db
 808f040:	2c29 614c 6974 7574 6564 4c2c 6e6f 6967     ),Latitude,Longi
 808f050:	7574 6564 4e2c 412f 4e2c 412f 442c 7461     tude,N/A,N/A,Dat
 808f060:	2f65 6954 656d 2400 5a00 0026 6547 7474     e/Time.$.Z&.Gett
 808f070:	6e69 2067 5141 5320 6e79 2063 6164 6174     ing AQ Sync data
 808f080:	6620 6f72 206d 7365 0070 6854 7369 6920      from esp.This i
 808f090:	2073 6863 7261 7620 7265 6973 6e6f 6f20     s char version o
 808f0a0:	2066 6572 6963 7665 6465 5320 7274 6e69     f recieved Strin
 808f0b0:	3a67 0020 6e55 6261 656c 7420 206f 6567     g: .Unable to ge
 808f0c0:	2074 5141 7953 636e 6420 7461 2061 7266     t AQSync data fr
 808f0d0:	6d6f 4520 5053 202c 6f63 6e75 6574 2072     om ESP, counter 
 808f0e0:	6e69 6564 3a78 2520 2e31 6631 0d0a 4000     index: %1.1f...@
 808f0f0:	5400 6968 2073 7369 7720 6168 2074 2049     .This is what I 
 808f100:	6d61 7020 6275 696c 6873 6e69 3a67 0020     am publishing: .
 808f110:	5141 7953 636e 4400 0026 6547 7474 6e69     AQSync.D&.Gettin
 808f120:	2067 7161 7973 636e 6420 6169 6e67 736f     g aqsync diagnos
 808f130:	6974 7363 6620 6f72 206d 7365 0070 6e55     tics from esp.Un
 808f140:	6261 656c 7420 206f 6567 2074 5141 7953     able to get AQSy
 808f150:	636e 6420 6169 2067 7266 6d6f 4520 5053     nc diag from ESP
 808f160:	202c 6f63 6e75 6574 2072 6e69 6564 3a78     , counter index:
 808f170:	2520 2e31 6631 0d0a 5500 6c70 616f 4164      %1.1f...UploadA
 808f180:	5351 6e79 4463 6169 6e67 736f 6974 0063     QSyncDiagnostic.
 808f190:	6567 6574 7065 6f72 646d 7461 0061 5141     geteepromdata.AQ
 808f1a0:	7953 636e 6944 6761 4300 5f4f 657a 6f72     SyncDiag.CO_zero
 808f1b0:	0041 742e 7478 4300 6568 6b63 6e69 2067     A..txt.Checking 
 808f1c0:	6f66 2072 6473 6320 7261 0064 6f6c 5f67     for sd card.log_
 808f1d0:	4300 6572 7461 6465 6e20 7765 6620 6c69     .Created new fil
 808f1e0:	2065 6f74 6c20 676f 7420 206f 5375 2044     e to log to uSD 
 808f1f0:	6163 6472 203a 4e00 206f 5375 2044 6163     card: .No uSD ca
 808f200:	6472 6420 7465 6365 6574 2e64 5300 6174     rd detected..Sta
 808f210:	7472 6e69 2067 4d4c 3950 3031 3030 4320     rting LMP91000 C
 808f220:	204f 6e69 7469 6169 696c 617a 6974 6e6f     O initialization
 808f230:	4300 756f 646c 276e 2074 6f63 6d6d 6e75     .Couldn't commun
 808f240:	6369 7461 2065 6977 6874 4c20 504d 3139     icate with LMP91
 808f250:	3030 5f30 2031 6f66 2072 4f43 4900 696e     000_1 for CO.Ini
 808f260:	6974 6c61 7a69 6465 4c20 504d 3139 3030     tialized LMP9100
 808f270:	5f30 2031 6f66 2072 4f43 4900 696e 6974     0_1 for CO.Initi
 808f280:	6c61 7a69 6465 4c20 504d 3139 3030 2030     alized LMP91000 
 808f290:	6f66 2072 4f43 4300 756f 646c 6e20 746f     for CO.Could not
 808f2a0:	6320 6d6f 756d 696e 6163 6574 7720 7469      communicate wit
 808f2b0:	2068 6441 6661 7572 7469 415f 5344 3131     h Adafruit_ADS11
 808f2c0:	3531 6620 726f 4320 004f 7453 7261 6974     15 for CO.Starti
 808f2d0:	676e 4c20 504d 3139 3030 5f30 2032 6e69     ng LMP91000_2 in
 808f2e0:	7469 6169 696c 617a 6974 6e6f 4300 756f     itialization.Cou
 808f2f0:	646c 276e 2074 6f63 6d6d 6e75 6369 7461     ldn't communicat
 808f300:	2065 6977 6874 4c20 504d 3139 3030 2030     e with LMP91000 
 808f310:	6f66 2072 0032 6e49 7469 6169 696c 657a     for 2.Initialize
 808f320:	2064 4d4c 3950 3031 3030 6620 726f 4320     d LMP91000 for C
 808f330:	204f 0032 5345 2050 6572 6573 2174 4600     O 2.ESP reset!.F
 808f340:	2057 6556 7372 6f69 3a6e 0020 7542 6c69     W Version: .Buil
 808f350:	3a64 0020 7953 7473 6d65 7620 7265 6973     d: .System versi
 808f360:	6e6f 203a 7325 4300 7275 6572 746e 4420     on: %s.Current D
 808f370:	7665 6369 2065 4449 003a 6c50 6165 6573     evice ID:.Please
 808f380:	6520 746e 7265 7020 7361 7773 726f 2064      enter password 
 808f390:	6e69 6f20 6472 7265 7420 206f 6863 6e61     in order to chan
 808f3a0:	6567 7420 6568 4920 0044 6e45 6574 2072     ge the ID.Enter 
 808f3b0:	656e 2077 6544 6976 6563 4920 3a44 0a00     new Device ID:..
 808f3c0:	4e0d 7765 4420 7665 6369 2065 4449 003a     .New Device ID:.
 808f3d0:	6e45 6574 2072 656e 2077 6544 6976 6563     Enter new Device
 808f3e0:	7420 6d69 2065 6f7a 656e 2820 312d 2e32      time zone (-12.
 808f3f0:	2030 6f74 3120 2e34 2930 0a00 4e0d 7765     0 to 14.0)...New
 808f400:	4420 7665 6369 2065 6974 656d 7a20 6e6f      Device time zon
 808f410:	3a65 4300 7275 6572 746e 6c20 776f 7265     e:.Current lower
 808f420:	6c20 6d69 7469 003a 6c50 6165 6573 6520      limit:.Please e
 808f430:	746e 7265 7020 7361 7773 726f 2064 6e69     nter password in
 808f440:	6f20 6472 7265 7420 206f 6863 6e61 6567      order to change
 808f450:	7420 6568 6c20 776f 7265 6c20 6d69 7469      the lower limit
 808f460:	4500 746e 7265 6e20 7765 6c20 776f 7265     .Enter new lower
 808f470:	6c20 6d69 7469 0a3a 000d 0d0a 654e 2077      limit:.....New 
 808f480:	6f6c 6577 2072 696c 696d 3a74 4300 7275     lower limit:.Cur
 808f490:	6572 746e 7520 7070 7265 6c20 6d69 7469     rent upper limit
 808f4a0:	003a 6c50 6165 6573 6520 746e 7265 7020     :.Please enter p
 808f4b0:	7361 7773 726f 2064 6e69 6f20 6472 7265     assword in order
 808f4c0:	7420 206f 6863 6e61 6567 7420 6568 7520      to change the u
 808f4d0:	7070 7265 6c20 6d69 7469 4500 746e 7265     pper limit.Enter
 808f4e0:	6e20 7765 7520 7070 7265 6c20 6d69 7469      new upper limit
 808f4f0:	0a3a 000d 0d0a 654e 2077 7075 6570 2072     :.....New upper 
 808f500:	696c 696d 3a74 4300 7275 6572 746e 4620     limit:.Current F
 808f510:	6572 7571 6e65 7963 203a 2800 327e 7320     requency: .(~2 s
 808f520:	6365 6e6f 2964 6d20 6165 7573 6572 656d     econd) measureme
 808f530:	746e 0073 6e45 6574 2072 656e 2077 6d61     nts.Enter new am
 808f540:	756f 746e 0d0a 0a00 4e0d 7765 4620 6572     ount.....New Fre
 808f550:	7571 6e65 7963 203a 4300 7275 6572 746e     quency: .Current
 808f560:	4320 324f 7a20 7265 3a6f 4500 746e 7265      CO2 zero:.Enter
 808f570:	6e20 7765 4320 324f 5a20 7265 0a6f 000d      new CO2 Zero...
 808f580:	0d0a 654e 2077 4f43 2032 657a 6f72 203a     ..New CO2 zero: 
 808f590:	4300 7275 6572 746e 4320 5f4f 2041 657a     .Current CO_A ze
 808f5a0:	6f72 003a 7020 6270 4500 746e 7265 6e20     ro:. ppb.Enter n
 808f5b0:	7765 4320 204f 655a 6f72 0d0a 0a00 4e0d     ew CO Zero.....N
 808f5c0:	7765 4320 204f 657a 6f72 203a 4300 7275     ew CO zero: .Cur
 808f5d0:	6572 746e 5020 314d 7a20 7265 3a6f 2000     rent PM1 zero:. 
 808f5e0:	6775 6d2f 0033 6e45 6574 2072 656e 2077     ug/m3.Enter new 
 808f5f0:	4d50 2031 655a 6f72 0d0a 0a00 4e0d 7765     PM1 Zero.....New
 808f600:	5020 314d 7a20 7265 3a6f 0020 7543 7272      PM1 zero: .Curr
 808f610:	6e65 2074 4d50 2e32 2035 657a 6f72 003a     ent PM2.5 zero:.
 808f620:	6e45 6574 2072 656e 2077 4d50 2e32 2035     Enter new PM2.5 
 808f630:	655a 6f72 0d0a 0a00 4e0d 7765 5020 324d     Zero.....New PM2
 808f640:	352e 7a20 7265 3a6f 0020 7543 7272 6e65     .5 zero: .Curren
 808f650:	2074 4d50 3031 7a20 7265 3a6f 2000 6d75     t PM10 zero:. um
 808f660:	6d2f 0033 6e45 6574 2072 656e 2077 4d50     /m3.Enter new PM
 808f670:	3031 5a20 7265 0a6f 000d 0d0a 654e 2077     10 Zero.....New 
 808f680:	4d50 3031 7a20 7265 3a6f 0020 7543 7272     PM10 zero: .Curr
 808f690:	6e65 2074 6554 706d 7265 7461 7275 2065     ent Temperature 
 808f6a0:	657a 6f72 003a 6e45 6574 2072 656e 2077     zero:.Enter new 
 808f6b0:	6554 706d 7265 7461 7275 2065 655a 6f72     Temperature Zero
 808f6c0:	0d0a 0a00 4e0d 7765 5420 6d65 6570 6172     .....New Tempera
 808f6d0:	7574 6572 7a20 7265 3a6f 0020 7543 7272     ture zero: .Curr
 808f6e0:	6e65 2074 7250 7365 7573 6572 7a20 7265     ent Pressure zer
 808f6f0:	3a6f 4500 746e 7265 6e20 7765 5020 6572     o:.Enter new Pre
 808f700:	7373 7275 2065 655a 6f72 0d0a 0a00 4e0d     ssure Zero.....N
 808f710:	7765 5020 6572 7373 7275 2065 657a 6f72     ew Pressure zero
 808f720:	203a 4300 7275 6572 746e 5220 2048 657a     : .Current RH ze
 808f730:	6f72 003a 6e45 6574 2072 656e 2077 4852     ro:.Enter new RH
 808f740:	5a20 7265 0a6f 000d 0d0a 654e 2077 4852      Zero.....New RH
 808f750:	7a20 7265 3a6f 0020 654d 756e 003e 6553      zero: .Menu>.Se
 808f760:	6972 6c61 6420 6265 6775 6967 676e 6520     rial debugging e
 808f770:	616e 6c62 6465 002e 6553 6972 6c61 6420     nabled..Serial d
 808f780:	6265 6775 6967 676e 6420 7369 6261 656c     ebugging disable
 808f790:	2e64 4500 616e 6c62 6e69 2067 6543 6c6c     d..Enabling Cell
 808f7a0:	6c75 7261 002e 6543 6c6c 6c75 7261 6120     ular..Cellular a
 808f7b0:	726c 6165 7964 6520 616e 6c62 6465 002e     lready enabled..
 808f7c0:	6944 6173 6c62 6e69 2067 6543 6c6c 6c75     Disabling Cellul
 808f7d0:	7261 4300 6c65 756c 616c 2072 6c61 6572     ar.Cellular alre
 808f7e0:	6461 2079 6964 6173 6c62 6465 002e 754f     ady disabled..Ou
 808f7f0:	7074 7475 6974 676e 6e20 726f 616d 6c6c     tputting normall
 808f800:	0079 754f 7074 7475 6974 676e 6f20 6c6e     y.Outputting onl
 808f810:	2079 4d50 5400 6d65 6570 6172 7574 6572     y PM.Temperature
 808f820:	7520 696e 7374 6120 726c 6165 7964 7320      units already s
 808f830:	7465 7420 206f 6543 736c 7569 2e73 4400     et to Celsius..D
 808f840:	7369 6261 696c 676e 6e20 7765 7420 6d65     isabling new tem
 808f850:	6570 6172 7574 6572 7320 6e65 6f73 0072     perature sensor.
 808f860:	6554 706d 7265 7461 7275 2065 6573 736e     Temperature sens
 808f870:	726f 6120 726c 6165 7964 6420 7369 6261     or already disab
 808f880:	656c 0064 6554 706d 7265 7461 7275 2065     led.Temperature 
 808f890:	6573 736e 726f 6120 726c 6165 7964 6520     sensor already e
 808f8a0:	616e 6c62 6465 5400 6d65 6570 6172 7574     nabled.Temperatu
 808f8b0:	2065 6573 736e 726f 6e20 776f 6520 616e     e sensor now ena
 808f8c0:	6c62 6465 5400 6d65 6570 6172 7574 6572     bled.Temperature
 808f8d0:	7520 696e 7374 6120 726c 6165 7964 7320      units already s
 808f8e0:	7465 7420 206f 6146 7268 6e65 6568 7469     et to Fahrenheit
 808f8f0:	002e 6e41 6c61 676f 7220 6165 6964 676e     ..Analog reading
 808f900:	6f20 2066 7a6f 6e6f 2065 6c61 6572 6461      of ozone alread
 808f910:	2079 6e65 6261 656c 0064 6e41 6c61 676f     y enabled.Analog
 808f920:	7220 6165 6964 676e 6f20 2066 7a6f 6e6f      reading of ozon
 808f930:	2065 6f6e 2077 6e65 6261 656c 0064 6944     e now enabled.Di
 808f940:	6967 6174 206c 6572 6461 6e69 2067 666f     gital reading of
 808f950:	6f20 6f7a 656e 6120 726c 6165 7964 6520      ozone already e
 808f960:	616e 6c62 6465 4400 6769 7469 6c61 7220     nabled.Digital r
 808f970:	6165 6964 676e 6f20 2066 7a6f 6e6f 2065     eading of ozone 
 808f980:	6f6e 2077 6e65 6261 656c 0064 754f 7074     now enabled.Outp
 808f990:	7475 6974 676e 4720 5350 6320 6e6f 6974     utting GPS conti
 808f9a0:	756e 756f 6c73 0079 6142 7474 7265 2079     nuously.Battery 
 808f9b0:	6874 6572 6873 6c6f 2064 6c61 6572 6461     threshold alread
 808f9c0:	2079 6e65 6261 656c 0064 6e45 6261 696c     y enabled.Enabli
 808f9d0:	676e 6220 7461 6574 7972 7420 7268 7365     ng battery thres
 808f9e0:	6f68 646c 6c20 6d69 7469 6e69 0067 6142     hold limiting.Ba
 808f9f0:	7474 7265 2079 6874 6572 6873 6c6f 2064     ttery threshold 
 808fa00:	6c61 6572 6461 2079 6964 6173 6c62 6465     already disabled
 808fa10:	4400 7369 6261 696c 676e 6220 7461 6574     .Disabling batte
 808fa20:	7972 7420 7268 7365 6f68 646c 6c20 6d69     ry threshold lim
 808fa30:	7469 6e69 0067 6e45 6261 696c 676e 6c20     iting.Enabling l
 808fa40:	776f 7020 776f 7265 6620 726f 6720 7370     ow power for gps
 808fa50:	5400 7275 696e 676e 6f20 6666 6220 7461     .Turning off bat
 808fa60:	6566 0074 6c41 6f6c 6977 676e 6220 7461     fet.Allowing bat
 808fa70:	6566 2074 6f74 7420 7275 206e 6e6f 4400     fet to turn on.D
 808fa80:	7369 6261 696c 676e 4120 4342 6c20 676f     isabling ABC log
 808fa90:	6369 6620 726f 4320 324f 7320 6e65 6f73     ic for CO2 senso
 808faa0:	0072 4241 2043 6f6c 6967 2063 6c61 6572     r.ABC logic alre
 808fab0:	6461 2079 6964 6173 6c62 6465 4500 616e     ady disabled.Ena
 808fac0:	6c62 6e69 2067 6261 2063 6f6c 6967 2063     bling abc logic 
 808fad0:	6f66 2072 4f43 2032 6573 736e 726f 4100     for CO2 sensor.A
 808fae0:	4342 6c20 676f 6369 6120 726c 6165 7964     BC logic already
 808faf0:	6520 616e 6c62 6465 4500 616e 6c62 6e69      enabled.Enablin
 808fb00:	2067 4948 3848 3231 2030 4852 7320 6e65     g HIH8120 RH sen
 808fb10:	6f73 0072 6944 6173 6c62 6e69 2067 4948     sor.Disabling HI
 808fb20:	3848 3231 2030 4852 7320 6e65 6f73 0072     H8120 RH sensor.
 808fb30:	6f4e 2077 6572 6461 6e69 2067 4f43 6620     Now reading CO f
 808fb40:	6f72 206d 3255 2d30 6c41 6870 3261 4e00     rom U20-Alpha2.N
 808fb50:	776f 7220 6165 6964 676e 4320 204f 7266     ow reading CO fr
 808fb60:	6d6f 5520 3931 412d 706c 6168 0031 6552     om U19-Alpha1.Re
 808fb70:	6573 6974 676e 7420 6568 4320 324f 7320     seting the CO2 s
 808fb80:	6e65 6f73 0072 6944 6173 6c62 6e69 2067     ensor.Disabling 
 808fb90:	6f67 676f 656c 6c20 636f 7461 6f69 206e     google location 
 808fba0:	6573 7672 6369 7365 002e 6e45 6261 696c     services..Enabli
 808fbb0:	676e 6720 6f6f 6c67 2065 6f6c 6163 6974     ng google locati
 808fbc0:	6e6f 7320 7265 6976 6563 2e73 4700 7465     on services..Get
 808fbd0:	6974 676e 6320 6c65 756c 616c 2072 6e69     ting cellular in
 808fbe0:	6f66 6d72 7461 6f69 2c6e 7420 6968 2073     formation, this 
 808fbf0:	616d 2079 6174 656b 6120 7720 6968 656c     may take a while
 808fc00:	2e2e 002e 4d49 4945 253d 0073 4d49 4953     ....IMEI=%s.IMSI
 808fc10:	253d 0073 4349 4943 3d44 7325 4100 5050     =%s.ICCID=%s.APP
 808fc20:	5620 7265 6973 6e6f 203a 4500 616e 6c62      Version: .Enabl
 808fc30:	6e69 2067 7a4f 6e6f 0065 7a4f 6e6f 2065     ing Ozone.Ozone 
 808fc40:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 808fc50:	6944 6173 6c62 6e69 2067 7a4f 6e6f 0065     Disabling Ozone.
 808fc60:	7a4f 6e6f 2065 6c61 6572 6461 2079 6964     Ozone already di
 808fc70:	6173 6c62 6465 4500 616e 6c62 6e69 2067     sabled.Enabling 
 808fc80:	4f56 7343 5600 434f 2073 6c61 6572 6461     VOCs.VOCs alread
 808fc90:	2079 6e65 6261 656c 0064 6944 6173 6c62     y enabled.Disabl
 808fca0:	6e69 2067 4f56 2743 0073 4f56 2743 2073     ing VOC's.VOC's 
 808fcb0:	6c61 6572 6461 2079 6964 6173 6c62 6465     already disabled
 808fcc0:	4600 7561 746c 203a 5300 7379 6574 206d     .Fault: .System 
 808fcd0:	7473 7461 7375 203a 4f00 7475 7570 7474     status: .Outputt
 808fce0:	6e69 2067 4f56 7343 6320 6e6f 6974 756e     ing VOCs continu
 808fcf0:	756f 6c73 2179 2020 7250 7365 2073 6e61     ously!  Press an
 808fd00:	2079 7562 7474 6e6f 7420 206f 7865 7469     y button to exit
 808fd10:	2e2e 002e 6146 6c69 6465 7420 206f 6572     ....Failed to re
 808fd20:	6461 4220 454d 3836 0030 5654 636f 3d73     ad BME680.TVocs=
 808fd30:	3125 302e 2c66 5420 6d65 3d70 3125 312e     %1.0f, Temp=%1.1
 808fd40:	2c66 7020 6572 7373 253d 2e31 6631 202c     f, press=%1.1f, 
 808fd50:	6872 253d 2e31 6631 0d0a 4400 7369 6261     rh=%1.1f...Disab
 808fd60:	696c 676e 7320 6e65 6973 6c62 2065 6f69     ling sensible io
 808fd70:	2074 6164 6174 7020 7375 2e68 4400 7369     t data push..Dis
 808fd80:	6261 696c 676e 6320 7261 7420 706f 6570     abling car toppe
 808fd90:	2072 6f70 6577 2e72 2020 4500 616e 6c62     r power.  .Enabl
 808fda0:	6e69 2067 6163 2072 6f74 7070 7265 7020     ing car topper p
 808fdb0:	776f 7265 202e 4920 2066 6f6e 6520 7478     ower.  If no ext
 808fdc0:	7265 616e 206c 6f70 6577 2c72 7320 7379     ernal power, sys
 808fdd0:	6574 206d 6977 6c6c 7420 7275 206e 666f     tem will turn of
 808fde0:	2e66 4500 6978 6974 676e 7320 7265 6169     f..Exiting seria
 808fdf0:	206c 656d 756e 2e2e 002e 6e49 6f63 696d     l menu....Incomi
 808fe00:	676e 6220 7479 3a65 4300 6e6f 656e 7463     ng byte:.Connect
 808fe10:	6e69 2067 6f74 6320 6c65 756c 616c 2072     ing to cellular 
 808fe20:	656e 7774 726f 006b 6661 6574 2072 6563     network.after ce
 808fe30:	6c6c 6c75 7261 6e4f 4100 7466 7265 6320     llularOn.After c
 808fe40:	6c65 756c 616c 4f72 006e 6641 6574 2072     ellularOn.After 
 808fe50:	6170 7472 6369 656c 6320 6e6f 656e 7463     particle connect
 808fe60:	7300 7465 6974 676e 7420 6972 6465 635f     .setting tried_c
 808fe70:	6c65 756c 616c 5f72 6f63 6e6e 6365 2074     ellular_connect 
 808fe80:	6f74 6620 6c61 6573 4400 7369 6f63 6e6e     to false.Disconn
 808fe90:	6365 6974 676e 6620 6f72 206d 6563 6c6c     ecting from cell
 808fea0:	6c75 7261 6e20 7465 6f77 6b72 4700 696f     ular network.Goi
 808feb0:	676e 7420 206f 6c73 6565 2070 6562 6163     ng to sleep beca
 808fec0:	7375 2065 6162 7474 7265 2079 7369 6220     use battery is b
 808fed0:	6c65 776f 3220 2530 6320 6168 6772 0065     elow 20% charge.

0808fee0 <_ZTV4File>:
	...
 808fee8:	095f 0808 096f 0808 0989 0808 0983 0808     _...o...........
 808fef8:	0943 0808 09ad 0808 09a7 0808 09a1 0808     C...............

0808ff08 <_ZTV6SdFile>:
	...
 808ff10:	095d 0808 0961 0808 0a49 0808 097d 0808     ]...a...I...}...

0808ff20 <_ZTV5SdFat>:
	...
 808ff28:	09e5 0808 09dd 0808 09d5 0808 09cd 0808     ................
 808ff38:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 808ff48:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 808ff58:	831a 0000                                   ....

0808ff5c <_ZTV10PowerCheck>:
	...
 808ff64:	60e9 0808 6101 0808 6143 696c 7262 7461     .`...a..Calibrat
 808ff74:	6e69 2067 4f43 0032                         ing CO2.

0808ff7c <_ZTV5SdSpi>:
	...
 808ff84:	70b5 0808 70c5 0808 70b1 0808 713d 0808     .p...p...p..=q..
 808ff94:	7161 0808 7151 0808 71a5 0808               aq..Qq...q..

0808ffa0 <_ZTV7HIH61XX>:
	...
 808ffa8:	7d71 0808 7d81 0808 7ec1 0808 6564 6976     q}...}...~..devi
 808ffb8:	6563 6f4c 6163 6f74 0072 5441 5426 0000     ceLocator.AT&T..

0808ffc8 <_ZTV23GoogleMapsDeviceLocator>:
	...
 808ffd0:	7f5d 0808 7f7d 0808 5954 4550 555f 4b4e     ]...}...TYPE_UNK
 808ffe0:	4f4e 4e57 5400 5059 5f45 4b4f 5400 5059     NOWN.TYPE_OK.TYP
 808fff0:	5f45 5245 4f52 0052 5954 4550 435f 4e4f     E_ERROR.TYPE_CON
 8090000:	454e 5443 5400 5059 5f45 4f4e 4143 5252     NECT.TYPE_NOCARR
 8090010:	4549 0052 5954 4550 4e5f 444f 4149 544c     IER.TYPE_NODIALT
 8090020:	4e4f 0045 5954 4550 425f 5355 0059 5954     ONE.TYPE_BUSY.TY
 8090030:	4550 4e5f 414f 534e 4557 0052 5954 4550     PE_NOANSWER.TYPE
 8090040:	505f 4f52 504d 0054 5954 4550 505f 554c     _PROMPT.TYPE_PLU
 8090050:	0053 5954 4550 415f 4f42 5452 4445 7400     S.TYPE_ABORTED.t
 8090060:	7079 3d65 7830 7825 6300 6c65 756c 616c     ype=0x%x.cellula
 8090070:	2072 6572 7073 6e6f 6573 7420 7079 3d65     r response type=
 8090080:	7325 6c20 6e65 253d 0064 6e5c 5c00 0072     %s len=%d.\n.\r.
 8090090:	7830 3025 7832 4100 2b54 4743 494d 0a0d     0x%02x.AT+CGMI..
 80900a0:	4100 2b54 4743 4e53 0a0d 4300 4943 0044     .AT+CGSN...CCID.
 80900b0:	5441 432b 4943 0d44 000a 2b0a 7325 203a     AT+CCID....+%s: 
 80900c0:	0000 0000                                   ....

080900c4 <_ZTV28CellularHelperStringResponse>:
	...
 80900cc:	8331 0808                                   1...

080900d0 <_ZTV32CellularHelperPlusStringResponse>:
	...
 80900d8:	8369 0808                                   i...

080900dc <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 80900dc:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

080900ec <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80900ec:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 80900fc:	766f 0066 7061 0070 005a 2b25 3330 3a64     ovf.app.Z.%+03d:
 809010c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 809011c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 809012c:	0000 0000                                   ....

08090130 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8090138:	9ea9 0808 9eaf 0808 9eed 0808 9ebd 0808     ................
 8090148:	9eab 0808                                   ....

0809014c <_ZTV9IPAddress>:
	...
 8090154:	a441 0808 a431 0808 a433 0808               A...1...3...

08090160 <_ZTV9USBSerial>:
	...
 8090168:	a4d5 0808 a53b 0808 a513 0808 94a1 0808     ....;...........
 8090178:	a505 0808 a4d7 0808 a4e7 0808 a535 0808     ............5...
 8090188:	a4f7 0808 a4d1 0808                         ........

08090190 <_ZTVN5spark13CellularClassE>:
	...
 8090198:	a6ff 0808 a6f5 0808 a6eb 0808 a671 0808     ............q...
 80901a8:	a6df 0808 0a7d 0808 a6d3 0808 a6cb 0808     ....}...........
 80901b8:	a6c1 0808 a6b7 0808 a67b 0808               ........{...

080901c4 <_ZTV11USARTSerial>:
	...
 80901cc:	0941 0808 0a89 0808 a77b 0808 94a1 0808     A.......{.......
 80901dc:	a74b 0808 a767 0808 a759 0808 a775 0808     K...g...Y...u...
 80901ec:	a739 0808 a73d 0808                         9...=...

080901f4 <_ZTV7TwoWire>:
	...
 80901fc:	a859 0808 a8a3 0808 a87b 0808 a85b 0808     Y.......{...[...
 809020c:	a883 0808 a88b 0808 a893 0808 a89b 0808     ................

0809021c <_ZTVN5spark12NetworkClassE>:
	...
 8090224:	a9b1 0808 a9bb 0808 a9c5 0808 a9cf 0808     ................
 8090234:	a9d9 0808 a9e5 0808 a9f1 0808 a9fd 0808     ................
 8090244:	aa05 0808 aa0f 0808 aa19 0808               ............

08090250 <_ZSt7nothrow>:
 8090250:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 8090260:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

08090271 <day_name.4782>:
 8090271:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8090281:	6972 6153                                    riSat

08090286 <mon_name.4783>:
 8090286:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8090296:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80902a6:	4476 6365 6e69 7469 0079                    vDecinity.

080902b0 <fpi.6203>:
 80902b0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80902c0:	0000 0000                                   ....

080902c4 <fpinan.6239>:
 80902c4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80902d4:	0000 0000                                   ....

080902d8 <tinytens>:
 80902d8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80902e8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80902f8:	6f43 64ac 0628 1168                         Co.d(.h.

08090300 <_ctype_>:
 8090300:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8090310:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8090320:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8090330:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8090340:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8090350:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8090360:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8090370:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8090380:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08090404 <_C_numeric_locale>:
 8090404:	fc02 0808 00b9 0809 013c 2000 4f50 4953     ........<.. POSI
 8090414:	0058 0000                                   X...

08090418 <__mprec_bigtens>:
 8090418:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8090428:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8090438:	bf3c 7f73 4fdd 7515                         <.s..O.u

08090440 <__mprec_tens>:
 8090440:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8090450:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8090460:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8090470:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8090480:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8090490:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80904a0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80904b0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80904c0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80904d0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80904e0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80904f0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8090500:	9db4 79d9 7843 44ea                         ...yCx.D

08090508 <p05.6127>:
 8090508:	0005 0000 0019 0000 007d 0000               ........}...

08090514 <link_const_variable_data_end>:
 8090514:	08085e01 	.word	0x08085e01
 8090518:	080871f9 	.word	0x080871f9
 809051c:	08087ff1 	.word	0x08087ff1
 8090520:	08088e99 	.word	0x08088e99
 8090524:	08089805 	.word	0x08089805
 8090528:	08089bc5 	.word	0x08089bc5
 809052c:	08089c11 	.word	0x08089c11
 8090530:	0808a709 	.word	0x0808a709
 8090534:	0808aa61 	.word	0x0808aa61
 8090538:	0808abb1 	.word	0x0808abb1

0809053c <link_constructors_end>:
 809053c:	00000000 	.word	0x00000000
