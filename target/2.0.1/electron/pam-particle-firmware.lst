
c:/Users/abailly/PAM_ESP/pam-particle-firmware/target/2.0.1/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00013170  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08093190  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002bc  20000000  08093194  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001090  200002c0  200002c0  000402c0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08093450  08093450  00033450  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08093478  08093478  00033478  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00293794  00000000  00000000  0003347c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000297e5  00000000  00000000  002c6c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003410  00000000  00000000  002f03f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00008d40  00000000  00000000  002f3805  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003dbb2  00000000  00000000  002fc545  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000650e5  00000000  00000000  0033a0f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c8799  00000000  00000000  0039f1dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00009d48  00000000  00000000  00467978  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0003a3fc  00000000  00000000  004716c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <__udivmoddi4>:

DYNALIB_FN(15, services2, _printf_float, int(struct _reent*, struct _prt_data_t*, FILE*, int(*pfunc)(struct _reent* , FILE*, const char*, size_t), va_list*))
DYNALIB_FN(16, services2, _tzset_unlocked_r, void(struct _reent*))
// FIXME: this doesn't work with LTO, disable for now when importing
#if !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(17, services2, __udivmoddi4, unsigned long(unsigned long, unsigned long, unsigned long*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <__udivmoddi4+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <localtime_r+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080040:	b508      	push	{r3, lr}
 8080042:	4b02      	ldr	r3, [pc, #8]	; (808004c <strftime+0xc>)
 8080044:	681b      	ldr	r3, [r3, #0]
 8080046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080048:	9301      	str	r3, [sp, #4]
 808004a:	bd08      	pop	{r3, pc}
 808004c:	0806002c 	.word	0x0806002c

08080050 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080050:	4809      	ldr	r0, [pc, #36]	; (8080078 <module_user_pre_init+0x28>)
 8080052:	490a      	ldr	r1, [pc, #40]	; (808007c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080054:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080056:	4288      	cmp	r0, r1
 8080058:	d005      	beq.n	8080066 <module_user_pre_init+0x16>
 808005a:	4a09      	ldr	r2, [pc, #36]	; (8080080 <module_user_pre_init+0x30>)
 808005c:	4282      	cmp	r2, r0
 808005e:	d002      	beq.n	8080066 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080060:	1a12      	subs	r2, r2, r0
 8080062:	f00e fb11 	bl	808e688 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080066:	4807      	ldr	r0, [pc, #28]	; (8080084 <module_user_pre_init+0x34>)
 8080068:	4a07      	ldr	r2, [pc, #28]	; (8080088 <module_user_pre_init+0x38>)
 808006a:	2100      	movs	r1, #0
 808006c:	1a12      	subs	r2, r2, r0
 808006e:	f00e fb19 	bl	808e6a4 <memset>
    return &link_heap_start;
}
 8080072:	4806      	ldr	r0, [pc, #24]	; (808008c <module_user_pre_init+0x3c>)
 8080074:	bd08      	pop	{r3, pc}
 8080076:	bf00      	nop
 8080078:	20000000 	.word	0x20000000
 808007c:	08093194 	.word	0x08093194
 8080080:	200002bc 	.word	0x200002bc
 8080084:	200002c0 	.word	0x200002c0
 8080088:	20001350 	.word	0x20001350
 808008c:	20001350 	.word	0x20001350

08080090 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080090:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080092:	f00c f963 	bl	808c35c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080096:	2500      	movs	r5, #0
 8080098:	4e05      	ldr	r6, [pc, #20]	; (80800b0 <module_user_init+0x20>)
 808009a:	4c06      	ldr	r4, [pc, #24]	; (80800b4 <module_user_init+0x24>)
 808009c:	1ba4      	subs	r4, r4, r6
 808009e:	08a4      	lsrs	r4, r4, #2
 80800a0:	42a5      	cmp	r5, r4
 80800a2:	d100      	bne.n	80800a6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80800a4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80800a6:	f856 3b04 	ldr.w	r3, [r6], #4
 80800aa:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80800ac:	3501      	adds	r5, #1
 80800ae:	e7f7      	b.n	80800a0 <module_user_init+0x10>
 80800b0:	08093164 	.word	0x08093164
 80800b4:	0809318c 	.word	0x0809318c

080800b8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800b8:	f005 b9b2 	b.w	8085420 <setup>

080800bc <module_user_loop>:
}

void module_user_loop() {
 80800bc:	b508      	push	{r3, lr}
    loop();
 80800be:	f006 fd9f 	bl	8086c00 <loop>
    _post_loop();
}
 80800c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800c6:	f00c b90b 	b.w	808c2e0 <_post_loop>

080800ca <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ca:	f00a bd99 	b.w	808ac00 <malloc>

080800ce <_Znaj>:
 80800ce:	f00a bd97 	b.w	808ac00 <malloc>

080800d2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800d2:	f00a bd9d 	b.w	808ac10 <free>

080800d6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800d6:	7800      	ldrb	r0, [r0, #0]
 80800d8:	fab0 f080 	clz	r0, r0
 80800dc:	0940      	lsrs	r0, r0, #5
 80800de:	4770      	bx	lr

080800e0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800e0:	2301      	movs	r3, #1
 80800e2:	7003      	strb	r3, [r0, #0]
 80800e4:	4770      	bx	lr

080800e6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800e6:	b148      	cbz	r0, 80800fc <null_ptr_check+0x16>
 80800e8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ea:	b13b      	cbz	r3, 80800fc <null_ptr_check+0x16>
 80800ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800ee:	b12b      	cbz	r3, 80800fc <null_ptr_check+0x16>
 80800f0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800f2:	fab0 f080 	clz	r0, r0
 80800f6:	0940      	lsrs	r0, r0, #5
 80800f8:	4240      	negs	r0, r0
 80800fa:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800fc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 8080100:	4770      	bx	lr

08080102 <set_mem_page>:
{
 8080102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080104:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
 8080106:	4608      	mov	r0, r1
{
 8080108:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 808010a:	f7ff ffec 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808010e:	4605      	mov	r5, r0
 8080110:	bb40      	cbnz	r0, 8080164 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
 8080112:	f012 0f80 	tst.w	r2, #128	; 0x80
 8080116:	bf14      	ite	ne
 8080118:	2300      	movne	r3, #0
 808011a:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
 808011c:	78ca      	ldrb	r2, [r1, #3]
 808011e:	429a      	cmp	r2, r3
 8080120:	d020      	beq.n	8080164 <set_mem_page+0x62>
			dev->mem_page = mem_page;
 8080122:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8080124:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 8080126:	2301      	movs	r3, #1
 8080128:	21f3      	movs	r1, #243	; 0xf3
 808012a:	7860      	ldrb	r0, [r4, #1]
 808012c:	f10d 0207 	add.w	r2, sp, #7
 8080130:	47b0      	blx	r6
 8080132:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080136:	b998      	cbnz	r0, 8080160 <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8080138:	f89d 2007 	ldrb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808013c:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
 808013e:	f022 0210 	bic.w	r2, r2, #16
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080142:	f003 0310 	and.w	r3, r3, #16
 8080146:	4313      	orrs	r3, r2
 8080148:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808014c:	2173      	movs	r1, #115	; 0x73
 808014e:	2301      	movs	r3, #1
 8080150:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8080152:	7860      	ldrb	r0, [r4, #1]
 8080154:	f10d 0207 	add.w	r2, sp, #7
 8080158:	47b0      	blx	r6
 808015a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 808015e:	b108      	cbz	r0, 8080164 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
 8080160:	f06f 0501 	mvn.w	r5, #1
}
 8080164:	4628      	mov	r0, r5
 8080166:	b002      	add	sp, #8
 8080168:	bd70      	pop	{r4, r5, r6, pc}

0808016a <get_mem_page.part.0>:
static int8_t get_mem_page(struct bme680_dev *dev)
 808016a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 808016c:	2301      	movs	r3, #1
static int8_t get_mem_page(struct bme680_dev *dev)
 808016e:	4604      	mov	r4, r0
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8080170:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8080172:	21f3      	movs	r1, #243	; 0xf3
 8080174:	7840      	ldrb	r0, [r0, #1]
 8080176:	f10d 0207 	add.w	r2, sp, #7
 808017a:	47a8      	blx	r5
 808017c:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 8080180:	b930      	cbnz	r0, 8080190 <get_mem_page.part.0+0x26>
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8080182:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080186:	f003 0310 	and.w	r3, r3, #16
 808018a:	70e3      	strb	r3, [r4, #3]
}
 808018c:	b003      	add	sp, #12
 808018e:	bd30      	pop	{r4, r5, pc}
			rslt = BME680_E_COM_FAIL;
 8080190:	f06f 0001 	mvn.w	r0, #1
 8080194:	e7fa      	b.n	808018c <get_mem_page.part.0+0x22>

08080196 <boundary_check.isra.0.constprop.0>:
		if (*value > max) {
 8080196:	7803      	ldrb	r3, [r0, #0]
 8080198:	428b      	cmp	r3, r1
			*value = max;
 808019a:	bf84      	itt	hi
 808019c:	7001      	strbhi	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 808019e:	7813      	ldrbhi	r3, [r2, #0]
}
 80801a0:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 80801a4:	bf84      	itt	hi
 80801a6:	f043 0302 	orrhi.w	r3, r3, #2
 80801aa:	7013      	strbhi	r3, [r2, #0]
}
 80801ac:	4770      	bx	lr

080801ae <bme680_get_regs>:
{
 80801ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80801b2:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 80801b4:	4618      	mov	r0, r3
{
 80801b6:	4688      	mov	r8, r1
 80801b8:	4691      	mov	r9, r2
 80801ba:	461d      	mov	r5, r3
	rslt = null_ptr_check(dev);
 80801bc:	f7ff ff93 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801c0:	4604      	mov	r4, r0
 80801c2:	b9a8      	cbnz	r0, 80801f0 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 80801c4:	78ab      	ldrb	r3, [r5, #2]
 80801c6:	b93b      	cbnz	r3, 80801d8 <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
 80801c8:	4629      	mov	r1, r5
 80801ca:	4630      	mov	r0, r6
 80801cc:	f7ff ff99 	bl	8080102 <set_mem_page>
			if (rslt == BME680_OK)
 80801d0:	4604      	mov	r4, r0
 80801d2:	b908      	cbnz	r0, 80801d8 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801d4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801d8:	464b      	mov	r3, r9
 80801da:	4642      	mov	r2, r8
 80801dc:	4631      	mov	r1, r6
 80801de:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801e0:	7868      	ldrb	r0, [r5, #1]
 80801e2:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801e4:	2800      	cmp	r0, #0
			rslt = BME680_E_COM_FAIL;
 80801e6:	bf18      	it	ne
 80801e8:	f06f 0401 	mvnne.w	r4, #1
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801ec:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}
 80801f0:	4620      	mov	r0, r4
 80801f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801f6 <bme680_set_regs>:
{
 80801f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80801fa:	461c      	mov	r4, r3
 80801fc:	460f      	mov	r7, r1
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801fe:	2100      	movs	r1, #0
{
 8080200:	b08a      	sub	sp, #40	; 0x28
 8080202:	4606      	mov	r6, r0
 8080204:	4690      	mov	r8, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8080206:	a801      	add	r0, sp, #4
 8080208:	2224      	movs	r2, #36	; 0x24
 808020a:	9100      	str	r1, [sp, #0]
 808020c:	f00e fa4a 	bl	808e6a4 <memset>
	rslt = null_ptr_check(dev);
 8080210:	4620      	mov	r0, r4
 8080212:	f7ff ff68 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080216:	b9e8      	cbnz	r0, 8080254 <bme680_set_regs+0x5e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8080218:	f108 33ff 	add.w	r3, r8, #4294967295
 808021c:	2b12      	cmp	r3, #18
 808021e:	d833      	bhi.n	8080288 <bme680_set_regs+0x92>
 8080220:	46ea      	mov	sl, sp
 8080222:	4681      	mov	r9, r0
			for (index = 0; index < len; index++) {
 8080224:	fa1f f888 	uxth.w	r8, r8
 8080228:	fa1f f389 	uxth.w	r3, r9
 808022c:	4543      	cmp	r3, r8
 808022e:	d314      	bcc.n	808025a <bme680_set_regs+0x64>
			if (rslt == BME680_OK) {
 8080230:	b980      	cbnz	r0, 8080254 <bme680_set_regs+0x5e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080232:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8080236:	3a01      	subs	r2, #1
 8080238:	b293      	uxth	r3, r2
 808023a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 808023c:	f89d 1000 	ldrb.w	r1, [sp]
 8080240:	7860      	ldrb	r0, [r4, #1]
 8080242:	f10d 0201 	add.w	r2, sp, #1
 8080246:	47a8      	blx	r5
					rslt = BME680_E_COM_FAIL;
 8080248:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808024a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
 808024e:	bf18      	it	ne
 8080250:	f06f 0001 	mvnne.w	r0, #1
}
 8080254:	b00a      	add	sp, #40	; 0x28
 8080256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dev->intf == BME680_SPI_INTF) {
 808025a:	78a3      	ldrb	r3, [r4, #2]
 808025c:	f816 5009 	ldrb.w	r5, [r6, r9]
 8080260:	b93b      	cbnz	r3, 8080272 <bme680_set_regs+0x7c>
					rslt = set_mem_page(reg_addr[index], dev);
 8080262:	4628      	mov	r0, r5
 8080264:	4621      	mov	r1, r4
 8080266:	f7ff ff4c 	bl	8080102 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 808026a:	f816 5009 	ldrb.w	r5, [r6, r9]
 808026e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080272:	f817 3009 	ldrb.w	r3, [r7, r9]
					tmp_buff[(2 * index)] = reg_addr[index];
 8080276:	f88a 5000 	strb.w	r5, [sl]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 808027a:	f88a 3001 	strb.w	r3, [sl, #1]
			for (index = 0; index < len; index++) {
 808027e:	f109 0901 	add.w	r9, r9, #1
 8080282:	f10a 0a02 	add.w	sl, sl, #2
 8080286:	e7cf      	b.n	8080228 <bme680_set_regs+0x32>
			rslt = BME680_E_INVALID_LENGTH;
 8080288:	f06f 0003 	mvn.w	r0, #3
 808028c:	e7e2      	b.n	8080254 <bme680_set_regs+0x5e>

0808028e <bme680_soft_reset>:
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 808028e:	23e0      	movs	r3, #224	; 0xe0
{
 8080290:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8080292:	f88d 3006 	strb.w	r3, [sp, #6]
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080296:	23b6      	movs	r3, #182	; 0xb6
{
 8080298:	4605      	mov	r5, r0
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 808029a:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 808029e:	f7ff ff22 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802a2:	4604      	mov	r4, r0
 80802a4:	b970      	cbnz	r0, 80802c4 <bme680_soft_reset+0x36>
		if (dev->intf == BME680_SPI_INTF)
 80802a6:	78ab      	ldrb	r3, [r5, #2]
 80802a8:	b17b      	cbz	r3, 80802ca <bme680_soft_reset+0x3c>
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80802aa:	462b      	mov	r3, r5
 80802ac:	2201      	movs	r2, #1
 80802ae:	f10d 0107 	add.w	r1, sp, #7
 80802b2:	f10d 0006 	add.w	r0, sp, #6
 80802b6:	f7ff ff9e 	bl	80801f6 <bme680_set_regs>
 80802ba:	4604      	mov	r4, r0
			dev->delay_ms(BME680_RESET_PERIOD);
 80802bc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80802be:	200a      	movs	r0, #10
 80802c0:	4798      	blx	r3
			if (rslt == BME680_OK) {
 80802c2:	b14c      	cbz	r4, 80802d8 <bme680_soft_reset+0x4a>
}
 80802c4:	4620      	mov	r0, r4
 80802c6:	b003      	add	sp, #12
 80802c8:	bd30      	pop	{r4, r5, pc}
	if (rslt == BME680_OK) {
 80802ca:	4628      	mov	r0, r5
 80802cc:	f7ff ff4d 	bl	808016a <get_mem_page.part.0>
		if (rslt == BME680_OK) {
 80802d0:	4604      	mov	r4, r0
 80802d2:	2800      	cmp	r0, #0
 80802d4:	d1f6      	bne.n	80802c4 <bme680_soft_reset+0x36>
 80802d6:	e7e8      	b.n	80802aa <bme680_soft_reset+0x1c>
				if (dev->intf == BME680_SPI_INTF)
 80802d8:	78ab      	ldrb	r3, [r5, #2]
 80802da:	2b00      	cmp	r3, #0
 80802dc:	d1f2      	bne.n	80802c4 <bme680_soft_reset+0x36>
	rslt = null_ptr_check(dev);
 80802de:	4628      	mov	r0, r5
 80802e0:	f7ff ff01 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802e4:	4604      	mov	r4, r0
 80802e6:	2800      	cmp	r0, #0
 80802e8:	d1ec      	bne.n	80802c4 <bme680_soft_reset+0x36>
 80802ea:	4628      	mov	r0, r5
 80802ec:	f7ff ff3d 	bl	808016a <get_mem_page.part.0>
 80802f0:	4604      	mov	r4, r0
 80802f2:	e7e7      	b.n	80802c4 <bme680_soft_reset+0x36>

080802f4 <bme680_init>:
{
 80802f4:	b530      	push	{r4, r5, lr}
 80802f6:	b08d      	sub	sp, #52	; 0x34
 80802f8:	4605      	mov	r5, r0
	rslt = null_ptr_check(dev);
 80802fa:	f7ff fef4 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802fe:	4604      	mov	r4, r0
 8080300:	2800      	cmp	r0, #0
 8080302:	f040 80c9 	bne.w	8080498 <bme680_init+0x1a4>
		rslt = bme680_soft_reset(dev);
 8080306:	4628      	mov	r0, r5
 8080308:	f7ff ffc1 	bl	808028e <bme680_soft_reset>
		if (rslt == BME680_OK) {
 808030c:	4604      	mov	r4, r0
 808030e:	2800      	cmp	r0, #0
 8080310:	f040 80c2 	bne.w	8080498 <bme680_init+0x1a4>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8080314:	462b      	mov	r3, r5
 8080316:	2201      	movs	r2, #1
 8080318:	4629      	mov	r1, r5
 808031a:	20d0      	movs	r0, #208	; 0xd0
 808031c:	f7ff ff47 	bl	80801ae <bme680_get_regs>
			if (rslt == BME680_OK) {
 8080320:	4604      	mov	r4, r0
 8080322:	2800      	cmp	r0, #0
 8080324:	f040 80b8 	bne.w	8080498 <bme680_init+0x1a4>
				if (dev->chip_id == BME680_CHIP_ID) {
 8080328:	782b      	ldrb	r3, [r5, #0]
 808032a:	2b61      	cmp	r3, #97	; 0x61
 808032c:	f040 80b7 	bne.w	808049e <bme680_init+0x1aa>
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8080330:	4601      	mov	r1, r0
 8080332:	2225      	movs	r2, #37	; 0x25
 8080334:	9001      	str	r0, [sp, #4]
 8080336:	a802      	add	r0, sp, #8
 8080338:	f00e f9b4 	bl	808e6a4 <memset>
	rslt = null_ptr_check(dev);
 808033c:	4628      	mov	r0, r5
	uint8_t temp_var = 0; /* Temporary variable */
 808033e:	f88d 4003 	strb.w	r4, [sp, #3]
	rslt = null_ptr_check(dev);
 8080342:	f7ff fed0 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080346:	4604      	mov	r4, r0
 8080348:	2800      	cmp	r0, #0
 808034a:	f040 80a5 	bne.w	8080498 <bme680_init+0x1a4>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 808034e:	462b      	mov	r3, r5
 8080350:	2219      	movs	r2, #25
 8080352:	2089      	movs	r0, #137	; 0x89
 8080354:	a901      	add	r1, sp, #4
 8080356:	f7ff ff2a 	bl	80801ae <bme680_get_regs>
		if (rslt == BME680_OK)
 808035a:	4604      	mov	r4, r0
 808035c:	b938      	cbnz	r0, 808036e <bme680_init+0x7a>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 808035e:	462b      	mov	r3, r5
 8080360:	2210      	movs	r2, #16
 8080362:	20e1      	movs	r0, #225	; 0xe1
 8080364:	f10d 011d 	add.w	r1, sp, #29
 8080368:	f7ff ff21 	bl	80801ae <bme680_get_regs>
 808036c:	4604      	mov	r4, r0
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 808036e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8080372:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8080376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808037a:	82eb      	strh	r3, [r5, #22]
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 808037c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080380:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8080384:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080388:	832b      	strh	r3, [r5, #24]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 808038a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 808038e:	f89d 200a 	ldrb.w	r2, [sp, #10]
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8080392:	76ab      	strb	r3, [r5, #26]
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8080394:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8080398:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808039c:	83ab      	strh	r3, [r5, #28]
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 808039e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80803a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80803a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803aa:	83eb      	strh	r3, [r5, #30]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80803ac:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80803b0:	f89d 2010 	ldrb.w	r2, [sp, #16]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 80803b4:	f885 3020 	strb.w	r3, [r5, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 80803b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80803bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803c0:	846b      	strh	r3, [r5, #34]	; 0x22
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 80803c2:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80803c6:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80803ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803ce:	84ab      	strh	r3, [r5, #36]	; 0x24
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803d4:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803d8:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80803dc:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80803e0:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80803e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803ec:	852b      	strh	r3, [r5, #40]	; 0x28
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80803ee:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80803f2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80803f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803fa:	856b      	strh	r3, [r5, #42]	; 0x2a
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803fc:	f89d 301b 	ldrb.w	r3, [sp, #27]
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8080400:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8080404:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8080408:	f89d 301e 	ldrb.w	r3, [sp, #30]
 808040c:	f003 020f 	and.w	r2, r3, #15
 8080410:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8080414:	812a      	strh	r2, [r5, #8]
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8080416:	f89d 201d 	ldrb.w	r2, [sp, #29]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 808041a:	091b      	lsrs	r3, r3, #4
 808041c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8080420:	816b      	strh	r3, [r5, #10]
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8080422:	9b08      	ldr	r3, [sp, #32]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8080424:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8080428:	60eb      	str	r3, [r5, #12]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 808042a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 808042e:	742b      	strb	r3, [r5, #16]
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8080430:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8080434:	746b      	strb	r3, [r5, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8080436:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 808043a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808043e:	826b      	strh	r3, [r5, #18]
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8080440:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8080444:	752b      	strb	r3, [r5, #20]
		if (rslt == BME680_OK) {
 8080446:	bb14      	cbnz	r4, 808048e <bme680_init+0x19a>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8080448:	462b      	mov	r3, r5
 808044a:	2201      	movs	r2, #1
 808044c:	2002      	movs	r0, #2
 808044e:	f10d 0103 	add.w	r1, sp, #3
 8080452:	f7ff feac 	bl	80801ae <bme680_get_regs>
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8080456:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 808045a:	4604      	mov	r4, r0
			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 808045c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8080460:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			if (rslt == BME680_OK) {
 8080464:	b998      	cbnz	r0, 808048e <bme680_init+0x19a>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8080466:	462b      	mov	r3, r5
 8080468:	2201      	movs	r2, #1
 808046a:	f10d 0103 	add.w	r1, sp, #3
 808046e:	f7ff fe9e 	bl	80801ae <bme680_get_regs>
				dev->calib.res_heat_val = (int8_t) temp_var;
 8080472:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 8080476:	4604      	mov	r4, r0
				dev->calib.res_heat_val = (int8_t) temp_var;
 8080478:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
				if (rslt == BME680_OK)
 808047c:	b938      	cbnz	r0, 808048e <bme680_init+0x19a>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 808047e:	462b      	mov	r3, r5
 8080480:	2201      	movs	r2, #1
 8080482:	2004      	movs	r0, #4
 8080484:	f10d 0103 	add.w	r1, sp, #3
 8080488:	f7ff fe91 	bl	80801ae <bme680_get_regs>
 808048c:	4604      	mov	r4, r0
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 808048e:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8080492:	111b      	asrs	r3, r3, #4
 8080494:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
}
 8080498:	4620      	mov	r0, r4
 808049a:	b00d      	add	sp, #52	; 0x34
 808049c:	bd30      	pop	{r4, r5, pc}
					rslt = BME680_E_DEV_NOT_FOUND;
 808049e:	f06f 0402 	mvn.w	r4, #2
 80804a2:	e7f9      	b.n	8080498 <bme680_init+0x1a4>

080804a4 <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80804a4:	2374      	movs	r3, #116	; 0x74
{
 80804a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80804a8:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 80804aa:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 80804ae:	f7ff fe1a 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80804b2:	bba0      	cbnz	r0, 808051e <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
 80804b4:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 80804b6:	4623      	mov	r3, r4
 80804b8:	2201      	movs	r2, #1
 80804ba:	2074      	movs	r0, #116	; 0x74
 80804bc:	f10d 0106 	add.w	r1, sp, #6
 80804c0:	f7ff fe75 	bl	80801ae <bme680_get_regs>
			if (rslt == BME680_OK) {
 80804c4:	b9a0      	cbnz	r0, 80804f0 <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80804c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
 80804ca:	f013 0503 	ands.w	r5, r3, #3
 80804ce:	d011      	beq.n	80804f4 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80804d0:	f023 0303 	bic.w	r3, r3, #3
 80804d4:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804d8:	2201      	movs	r2, #1
 80804da:	4623      	mov	r3, r4
 80804dc:	f10d 0106 	add.w	r1, sp, #6
 80804e0:	f10d 0007 	add.w	r0, sp, #7
 80804e4:	f7ff fe87 	bl	80801f6 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80804e8:	200a      	movs	r0, #10
 80804ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80804ec:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
 80804ee:	e7e2      	b.n	80804b6 <bme680_set_sensor_mode+0x12>
 80804f0:	2d00      	cmp	r5, #0
 80804f2:	d1e0      	bne.n	80804b6 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80804f4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80804f8:	b18a      	cbz	r2, 808051e <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80804fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80804fe:	f002 0203 	and.w	r2, r2, #3
 8080502:	f023 0303 	bic.w	r3, r3, #3
 8080506:	4313      	orrs	r3, r2
 8080508:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 808050c:	b938      	cbnz	r0, 808051e <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 808050e:	4623      	mov	r3, r4
 8080510:	2201      	movs	r2, #1
 8080512:	f10d 0106 	add.w	r1, sp, #6
 8080516:	f10d 0007 	add.w	r0, sp, #7
 808051a:	f7ff fe6c 	bl	80801f6 <bme680_set_regs>
}
 808051e:	b003      	add	sp, #12
 8080520:	bd30      	pop	{r4, r5, pc}

08080522 <bme680_set_sensor_settings>:
	uint8_t data = 0;
 8080522:	2300      	movs	r3, #0
{
 8080524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080526:	4606      	mov	r6, r0
 8080528:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 808052a:	4608      	mov	r0, r1
{
 808052c:	460c      	mov	r4, r1
	uint8_t data = 0;
 808052e:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080532:	9304      	str	r3, [sp, #16]
 8080534:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080538:	9306      	str	r3, [sp, #24]
 808053a:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
 808053e:	f7ff fdd2 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080542:	2800      	cmp	r0, #0
 8080544:	f040 80fe 	bne.w	8080744 <bme680_set_sensor_settings+0x222>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080548:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 808054c:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080550:	d105      	bne.n	808055e <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
 8080552:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
			rslt = bme680_set_sensor_mode(dev);
 8080556:	4620      	mov	r0, r4
 8080558:	f7ff ffa4 	bl	80804a4 <bme680_set_sensor_mode>
 808055c:	e007      	b.n	808056e <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
 808055e:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
 8080560:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
 8080564:	f000 80f0 	beq.w	8080748 <bme680_set_sensor_settings+0x226>
		dev->power_mode = BME680_SLEEP_MODE;
 8080568:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
 808056c:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
 808056e:	f016 0510 	ands.w	r5, r6, #16
 8080572:	d020      	beq.n	80805b6 <bme680_set_sensor_settings+0x94>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8080574:	2107      	movs	r1, #7
 8080576:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808057a:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 808057e:	f7ff fe0a 	bl	8080196 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080582:	b930      	cbnz	r0, 8080592 <bme680_set_sensor_settings+0x70>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080584:	4623      	mov	r3, r4
 8080586:	2201      	movs	r2, #1
 8080588:	2075      	movs	r0, #117	; 0x75
 808058a:	f10d 0107 	add.w	r1, sp, #7
 808058e:	f7ff fe0e 	bl	80801ae <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080592:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8080596:	f89d 2007 	ldrb.w	r2, [sp, #7]
 808059a:	009b      	lsls	r3, r3, #2
 808059c:	f022 021c 	bic.w	r2, r2, #28
 80805a0:	f003 031c 	and.w	r3, r3, #28
 80805a4:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 80805a6:	2275      	movs	r2, #117	; 0x75
			count++;
 80805a8:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80805aa:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80805ae:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 80805b2:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
 80805b6:	06b3      	lsls	r3, r6, #26
 80805b8:	d522      	bpl.n	8080600 <bme680_set_sensor_settings+0xde>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 80805ba:	2108      	movs	r1, #8
 80805bc:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80805c0:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 80805c4:	f7ff fde7 	bl	8080196 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 80805c8:	b930      	cbnz	r0, 80805d8 <bme680_set_sensor_settings+0xb6>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80805ca:	4623      	mov	r3, r4
 80805cc:	2201      	movs	r2, #1
 80805ce:	2070      	movs	r0, #112	; 0x70
 80805d0:	f10d 0107 	add.w	r1, sp, #7
 80805d4:	f7ff fdeb 	bl	80801ae <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 80805d8:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80805da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80805de:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80805e2:	f023 0308 	bic.w	r3, r3, #8
 80805e6:	f002 0208 	and.w	r2, r2, #8
 80805ea:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 80805ec:	aa08      	add	r2, sp, #32
 80805ee:	442a      	add	r2, r5
			count++;
 80805f0:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80805f2:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80805f6:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80805fa:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80805fe:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8080600:	07b1      	lsls	r1, r6, #30
 8080602:	d033      	beq.n	808066c <bme680_set_sensor_settings+0x14a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8080604:	2105      	movs	r1, #5
 8080606:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808060a:	f104 0039 	add.w	r0, r4, #57	; 0x39
 808060e:	f7ff fdc2 	bl	8080196 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080612:	b930      	cbnz	r0, 8080622 <bme680_set_sensor_settings+0x100>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080614:	4623      	mov	r3, r4
 8080616:	2201      	movs	r2, #1
 8080618:	2074      	movs	r0, #116	; 0x74
 808061a:	f10d 0107 	add.w	r1, sp, #7
 808061e:	f7ff fdc6 	bl	80801ae <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
 8080622:	07f2      	lsls	r2, r6, #31
 8080624:	d509      	bpl.n	808063a <bme680_set_sensor_settings+0x118>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8080626:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808062a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 808062e:	f003 031f 	and.w	r3, r3, #31
 8080632:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8080636:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
 808063a:	07b3      	lsls	r3, r6, #30
 808063c:	d50b      	bpl.n	8080656 <bme680_set_sensor_settings+0x134>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 808063e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8080642:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8080646:	009b      	lsls	r3, r3, #2
 8080648:	f003 031c 	and.w	r3, r3, #28
 808064c:	f022 021c 	bic.w	r2, r2, #28
 8080650:	4313      	orrs	r3, r2
 8080652:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
 8080656:	2274      	movs	r2, #116	; 0x74
 8080658:	ab08      	add	r3, sp, #32
 808065a:	442b      	add	r3, r5
 808065c:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 8080660:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080664:	3501      	adds	r5, #1
			data_array[count] = data;
 8080666:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 808066a:	b2ed      	uxtb	r5, r5
		if (desired_settings & BME680_OSH_SEL) {
 808066c:	0771      	lsls	r1, r6, #29
 808066e:	d522      	bpl.n	80806b6 <bme680_set_sensor_settings+0x194>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8080670:	2105      	movs	r1, #5
 8080672:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080676:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808067a:	f7ff fd8c 	bl	8080196 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 808067e:	b930      	cbnz	r0, 808068e <bme680_set_sensor_settings+0x16c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080680:	4623      	mov	r3, r4
 8080682:	2201      	movs	r2, #1
 8080684:	2072      	movs	r0, #114	; 0x72
 8080686:	f10d 0107 	add.w	r1, sp, #7
 808068a:	f7ff fd90 	bl	80801ae <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 808068e:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080690:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080694:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8080698:	f023 0307 	bic.w	r3, r3, #7
 808069c:	f002 0207 	and.w	r2, r2, #7
 80806a0:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 80806a2:	aa08      	add	r2, sp, #32
 80806a4:	442a      	add	r2, r5
			count++;
 80806a6:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80806a8:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80806ac:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80806b0:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80806b4:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 80806b6:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 80806ba:	d03a      	beq.n	8080732 <bme680_set_sensor_settings+0x210>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 80806bc:	2101      	movs	r1, #1
 80806be:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80806c2:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 80806c6:	f7ff fd66 	bl	8080196 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK) {
 80806ca:	b960      	cbnz	r0, 80806e6 <bme680_set_sensor_settings+0x1c4>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 80806cc:	210a      	movs	r1, #10
 80806ce:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80806d2:	f7ff fd60 	bl	8080196 <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 80806d6:	b930      	cbnz	r0, 80806e6 <bme680_set_sensor_settings+0x1c4>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80806d8:	4623      	mov	r3, r4
 80806da:	2201      	movs	r2, #1
 80806dc:	2071      	movs	r0, #113	; 0x71
 80806de:	f10d 0107 	add.w	r1, sp, #7
 80806e2:	f7ff fd64 	bl	80801ae <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
 80806e6:	0672      	lsls	r2, r6, #25
 80806e8:	d50b      	bpl.n	8080702 <bme680_set_sensor_settings+0x1e0>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80806ea:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80806ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80806f2:	011b      	lsls	r3, r3, #4
 80806f4:	f003 0310 	and.w	r3, r3, #16
 80806f8:	f022 0210 	bic.w	r2, r2, #16
 80806fc:	4313      	orrs	r3, r2
 80806fe:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
 8080702:	0633      	lsls	r3, r6, #24
 8080704:	d50a      	bpl.n	808071c <bme680_set_sensor_settings+0x1fa>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 8080706:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808070a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 808070e:	f023 030f 	bic.w	r3, r3, #15
 8080712:	f002 020f 	and.w	r2, r2, #15
 8080716:	4313      	orrs	r3, r2
 8080718:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808071c:	2271      	movs	r2, #113	; 0x71
 808071e:	ab08      	add	r3, sp, #32
 8080720:	442b      	add	r3, r5
 8080722:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 8080726:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 808072a:	3501      	adds	r5, #1
			data_array[count] = data;
 808072c:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080730:	b2ed      	uxtb	r5, r5
		if (rslt == BME680_OK)
 8080732:	b928      	cbnz	r0, 8080740 <bme680_set_sensor_settings+0x21e>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8080734:	4623      	mov	r3, r4
 8080736:	462a      	mov	r2, r5
 8080738:	a906      	add	r1, sp, #24
 808073a:	a804      	add	r0, sp, #16
 808073c:	f7ff fd5b 	bl	80801f6 <bme680_set_regs>
		dev->power_mode = intended_power_mode;
 8080740:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 8080744:	b009      	add	sp, #36	; 0x24
 8080746:	bdf0      	pop	{r4, r5, r6, r7, pc}
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080748:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 808074c:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 8080750:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8080754:	bf28      	it	cs
 8080756:	f44f 72c8 	movcs.w	r2, #400	; 0x190
 808075a:	2ac8      	cmp	r2, #200	; 0xc8
 808075c:	bf38      	it	cc
 808075e:	22c8      	movcc	r2, #200	; 0xc8
 8080760:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8080764:	f203 1399 	addw	r3, r3, #409	; 0x199
 8080768:	435a      	muls	r2, r3
 808076a:	2314      	movs	r3, #20
 808076c:	fbb2 f2f3 	udiv	r2, r2, r3
 8080770:	230a      	movs	r3, #10
 8080772:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
 8080776:	fbb2 f2f3 	udiv	r2, r2, r3
 808077a:	f991 3011 	ldrsb.w	r3, [r1, #17]
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 808077e:	f991 1004 	ldrsb.w	r1, [r1, #4]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080782:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8080786:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8080788:	f994 3014 	ldrsb.w	r3, [r4, #20]
 808078c:	434b      	muls	r3, r1
 808078e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8080792:	fb93 f3f1 	sdiv	r3, r3, r1
 8080796:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
 8080798:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 808079c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 80807a0:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 80807a4:	3204      	adds	r2, #4
 80807a6:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 80807aa:	2283      	movs	r2, #131	; 0x83
 80807ac:	434a      	muls	r2, r1
 80807ae:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 80807b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80807b6:	2222      	movs	r2, #34	; 0x22
 80807b8:	3bfa      	subs	r3, #250	; 0xfa
 80807ba:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 80807bc:	2264      	movs	r2, #100	; 0x64
 80807be:	3332      	adds	r3, #50	; 0x32
 80807c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80807c4:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80807c8:	f246 435a 	movw	r3, #25690	; 0x645a
 80807cc:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80807d0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	if (dur >= 0xfc0) {
 80807d4:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80807d8:	d21a      	bcs.n	8080810 <bme680_set_sensor_settings+0x2ee>
		while (dur > 0x3F) {
 80807da:	2b3f      	cmp	r3, #63	; 0x3f
 80807dc:	b2c2      	uxtb	r2, r0
 80807de:	f100 0001 	add.w	r0, r0, #1
 80807e2:	d813      	bhi.n	808080c <bme680_set_sensor_settings+0x2ea>
		durval = (uint8_t) (dur + (factor * 64));
 80807e4:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80807e8:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
 80807ea:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80807ec:	f88d 300d 	strb.w	r3, [sp, #13]
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80807f0:	2202      	movs	r2, #2
 80807f2:	4623      	mov	r3, r4
			dev->gas_sett.nb_conv = 0;
 80807f4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80807f8:	a903      	add	r1, sp, #12
 80807fa:	a802      	add	r0, sp, #8
 80807fc:	f7ff fcfb 	bl	80801f6 <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
 8080800:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 8080804:	2800      	cmp	r0, #0
 8080806:	f47f aeb2 	bne.w	808056e <bme680_set_sensor_settings+0x4c>
 808080a:	e6a4      	b.n	8080556 <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
 808080c:	089b      	lsrs	r3, r3, #2
			factor += 1;
 808080e:	e7e4      	b.n	80807da <bme680_set_sensor_settings+0x2b8>
		durval = 0xff; /* Max duration*/
 8080810:	23ff      	movs	r3, #255	; 0xff
 8080812:	e7ea      	b.n	80807ea <bme680_set_sensor_settings+0x2c8>

08080814 <bme680_get_profile_dur>:
{
 8080814:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080816:	4b18      	ldr	r3, [pc, #96]	; (8080878 <bme680_get_profile_dur+0x64>)
{
 8080818:	4602      	mov	r2, r0
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 808081a:	6818      	ldr	r0, [r3, #0]
 808081c:	889b      	ldrh	r3, [r3, #4]
 808081e:	9000      	str	r0, [sp, #0]
 8080820:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080824:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 8080828:	a802      	add	r0, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 808082a:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 808082e:	4403      	add	r3, r0
 8080830:	f813 0c08 	ldrb.w	r0, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080834:	ab02      	add	r3, sp, #8
 8080836:	441c      	add	r4, r3
 8080838:	f814 3c08 	ldrb.w	r3, [r4, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 808083c:	ac02      	add	r4, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 808083e:	4418      	add	r0, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8080840:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8080844:	4423      	add	r3, r4
 8080846:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 808084a:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 808084e:	4403      	add	r3, r0
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080850:	f241 20b9 	movw	r0, #4793	; 0x12b9
 8080854:	fb04 0303 	mla	r3, r4, r3, r0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808085c:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8080860:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
 8080862:	b29b      	uxth	r3, r3
 8080864:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
 8080866:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 808086a:	b118      	cbz	r0, 8080874 <bme680_get_profile_dur+0x60>
		*duration += dev->gas_sett.heatr_dur;
 808086c:	f8b1 1042 	ldrh.w	r1, [r1, #66]	; 0x42
 8080870:	440b      	add	r3, r1
 8080872:	8013      	strh	r3, [r2, #0]
}
 8080874:	b002      	add	sp, #8
 8080876:	bd10      	pop	{r4, pc}
 8080878:	08090570 	.word	0x08090570

0808087c <bme680_get_sensor_data>:
{
 808087c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080880:	4680      	mov	r8, r0
 8080882:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 8080884:	4608      	mov	r0, r1
{
 8080886:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8080888:	f7ff fc2d 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808088c:	4605      	mov	r5, r0
 808088e:	2800      	cmp	r0, #0
 8080890:	f040 8158 	bne.w	8080b44 <bme680_get_sensor_data+0x2c8>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080894:	9006      	str	r0, [sp, #24]
 8080896:	e9cd 0004 	strd	r0, r0, [sp, #16]
 808089a:	f8cd 001b 	str.w	r0, [sp, #27]
	rslt = null_ptr_check(dev);
 808089e:	4608      	mov	r0, r1
 80808a0:	f7ff fc21 	bl	80800e6 <null_ptr_check>
 80808a4:	270a      	movs	r7, #10
 80808a6:	4605      	mov	r5, r0
		if (rslt == BME680_OK) {
 80808a8:	2d00      	cmp	r5, #0
 80808aa:	f040 8152 	bne.w	8080b52 <bme680_get_sensor_data+0x2d6>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80808ae:	4623      	mov	r3, r4
 80808b0:	220f      	movs	r2, #15
 80808b2:	a904      	add	r1, sp, #16
 80808b4:	201d      	movs	r0, #29
 80808b6:	f7ff fc7a 	bl	80801ae <bme680_get_regs>
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80808ba:	f89d b010 	ldrb.w	fp, [sp, #16]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80808be:	f99d a01e 	ldrsb.w	sl, [sp, #30]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808c2:	f89d 2018 	ldrb.w	r2, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80808c6:	f00b 030f 	and.w	r3, fp, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80808ca:	f00a 0120 	and.w	r1, sl, #32
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80808ce:	f02b 0b7f 	bic.w	fp, fp, #127	; 0x7f
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808d2:	9201      	str	r2, [sp, #4]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80808d4:	ea4b 0101 	orr.w	r1, fp, r1
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808d8:	f89d 2019 	ldrb.w	r2, [sp, #25]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808dc:	f00a 0a10 	and.w	sl, sl, #16
 80808e0:	ea41 010a 	orr.w	r1, r1, sl
 80808e4:	b249      	sxtb	r1, r1
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80808e6:	f888 3001 	strb.w	r3, [r8, #1]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808ea:	9202      	str	r2, [sp, #8]
			data->meas_index = buff[1];
 80808ec:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808f0:	f89d 201d 	ldrb.w	r2, [sp, #29]
			if (data->status & BME680_NEW_DATA_MSK) {
 80808f4:	2900      	cmp	r1, #0
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80808f6:	4605      	mov	r5, r0
			data->meas_index = buff[1];
 80808f8:	f888 3002 	strb.w	r3, [r8, #2]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808fc:	9203      	str	r2, [sp, #12]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80808fe:	f89d 9012 	ldrb.w	r9, [sp, #18]
 8080902:	f89d e013 	ldrb.w	lr, [sp, #19]
				| ((uint32_t) buff[4] / 16));
 8080906:	f89d 3014 	ldrb.w	r3, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 808090a:	f89d c015 	ldrb.w	ip, [sp, #21]
 808090e:	f89d 6016 	ldrb.w	r6, [sp, #22]
				| ((uint32_t) buff[7] / 16));
 8080912:	f89d 0017 	ldrb.w	r0, [sp, #23]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080916:	f89d 201e 	ldrb.w	r2, [sp, #30]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 808091a:	f888 1000 	strb.w	r1, [r8]
			if (data->status & BME680_NEW_DATA_MSK) {
 808091e:	f280 8115 	bge.w	8080b4c <bme680_get_sensor_data+0x2d0>
				| ((uint32_t) buff[7] / 16));
 8080922:	0900      	lsrs	r0, r0, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8080924:	ea40 1606 	orr.w	r6, r0, r6, lsl #4
 8080928:	ea46 3c0c 	orr.w	ip, r6, ip, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 808092c:	8ae6      	ldrh	r6, [r4, #22]
				| ((uint32_t) buff[4] / 16));
 808092e:	091b      	lsrs	r3, r3, #4
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 8080930:	0076      	lsls	r6, r6, #1
 8080932:	ebc6 0cdc 	rsb	ip, r6, ip, lsr #3
 8080936:	4660      	mov	r0, ip
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080938:	ea4f 065c 	mov.w	r6, ip, lsr #1
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 808093c:	17c1      	asrs	r1, r0, #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 808093e:	ea46 76c1 	orr.w	r6, r6, r1, lsl #31
 8080942:	1049      	asrs	r1, r1, #1
 8080944:	4371      	muls	r1, r6
 8080946:	fba6 ab06 	umull	sl, fp, r6, r6
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808094a:	f994 001a 	ldrsb.w	r0, [r4, #26]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 808094e:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
 8080952:	ea4f 361a 	mov.w	r6, sl, lsr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080956:	0101      	lsls	r1, r0, #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080958:	ea46 560b 	orr.w	r6, r6, fp, lsl #20
 808095c:	ea4f 372b 	mov.w	r7, fp, asr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080960:	ea4f 7be1 	mov.w	fp, r1, asr #31
 8080964:	fb06 f00b 	mul.w	r0, r6, fp
 8080968:	fba6 ab01 	umull	sl, fp, r6, r1
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808096c:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080970:	fb01 0707 	mla	r7, r1, r7, r0
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080974:	fb86 010c 	smull	r0, r1, r6, ip
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080978:	44bb      	add	fp, r7
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808097a:	0ac6      	lsrs	r6, r0, #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808097c:	ea4f 309a 	mov.w	r0, sl, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080980:	ea46 5641 	orr.w	r6, r6, r1, lsl #21
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080984:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080988:	1831      	adds	r1, r6, r0
 808098a:	6321      	str	r1, [r4, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 808098c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8080990:	3180      	adds	r1, #128	; 0x80
 8080992:	1209      	asrs	r1, r1, #8
 8080994:	f8a8 1004 	strh.w	r1, [r8, #4]
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080998:	6b21      	ldr	r1, [r4, #48]	; 0x30
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 808099a:	ea43 1e0e 	orr.w	lr, r3, lr, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808099e:	1049      	asrs	r1, r1, #1
 80809a0:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80809a4:	f640 4335 	movw	r3, #3125	; 0xc35
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80809a8:	1088      	asrs	r0, r1, #2
 80809aa:	4340      	muls	r0, r0
		(int32_t)dev->calib.par_p6) >> 2;
 80809ac:	f994 7026 	ldrsb.w	r7, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 80809b0:	12c6      	asrs	r6, r0, #11
 80809b2:	4377      	muls	r7, r6
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 80809b4:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809b8:	1340      	asrs	r0, r0, #13
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 80809ba:	434e      	muls	r6, r1
 80809bc:	0076      	lsls	r6, r6, #1
 80809be:	eb06 06a7 	add.w	r6, r6, r7, asr #2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 80809c2:	f9b4 701e 	ldrsh.w	r7, [r4, #30]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80809c6:	ea4e 3909 	orr.w	r9, lr, r9, lsl #12
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 80809ca:	434f      	muls	r7, r1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80809cc:	f994 1020 	ldrsb.w	r1, [r4, #32]
	pressure_comp = 1048576 - pres_adc;
 80809d0:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80809d4:	0149      	lsls	r1, r1, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809d6:	4341      	muls	r1, r0
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 80809d8:	10c9      	asrs	r1, r1, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809da:	eb01 0167 	add.w	r1, r1, r7, asr #1
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809de:	8ba0      	ldrh	r0, [r4, #28]
	var1 = var1 >> 18;
 80809e0:	1489      	asrs	r1, r1, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809e2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80809e6:	4348      	muls	r0, r1
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80809e8:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
		((int64_t) lookupTable1[gas_range])) >> 16;
 80809ec:	f002 0c0f 	and.w	ip, r2, #15
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80809f0:	0409      	lsls	r1, r1, #16
 80809f2:	eb01 06a6 	add.w	r6, r1, r6, asr #2
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80809f6:	eba9 3626 	sub.w	r6, r9, r6, asr #12
 80809fa:	4373      	muls	r3, r6
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809fc:	13c1      	asrs	r1, r0, #15
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809fe:	fbb3 f1f1 	udiv	r1, r3, r1
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8080a02:	f341 009c 	sbfx	r0, r1, #2, #29
 8080a06:	4340      	muls	r0, r0
 8080a08:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
		(pressure_comp >> 3)) >> 13)) >> 12;
 8080a0c:	1340      	asrs	r0, r0, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 8080a0e:	4358      	muls	r0, r3
		(int32_t)dev->calib.par_p8) >> 13;
 8080a10:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 8080a14:	f341 075d 	sbfx	r7, r1, #1, #30
 8080a18:	437b      	muls	r3, r7
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8080a1a:	f341 16d7 	sbfx	r6, r1, #7, #24
	var2 = ((int32_t)(pressure_comp >> 2) *
 8080a1e:	135b      	asrs	r3, r3, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8080a20:	eb03 3320 	add.w	r3, r3, r0, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 8080a24:	fb06 f006 	mul.w	r0, r6, r6
 8080a28:	4346      	muls	r6, r0
		(int32_t)dev->calib.par_p10) >> 17;
 8080a2a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080a2e:	0992      	lsrs	r2, r2, #6
		(int32_t)(pressure_comp >> 8) *
 8080a30:	4346      	muls	r6, r0
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080a32:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8080a36:	eb03 4366 	add.w	r3, r3, r6, asr #17
 8080a3a:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a3e:	2064      	movs	r0, #100	; 0x64
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080a40:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8080a42:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				data->pressure = calc_pressure(adc_pres, dev);
 8080a46:	f8c8 3008 	str.w	r3, [r8, #8]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a4c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080a54:	3380      	adds	r3, #128	; 0x80
 8080a56:	121b      	asrs	r3, r3, #8
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a58:	4359      	muls	r1, r3
 8080a5a:	fb91 f1f0 	sdiv	r1, r1, r0
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a5e:	f994 600d 	ldrsb.w	r6, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a62:	4359      	muls	r1, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a64:	435e      	muls	r6, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a66:	1189      	asrs	r1, r1, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a68:	fb96 f6f0 	sdiv	r6, r6, r0
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8080a6c:	fb91 f1f0 	sdiv	r1, r1, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080a70:	4431      	add	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 8080a72:	8966      	ldrh	r6, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8080a74:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080a78:	4371      	muls	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 8080a7a:	128e      	asrs	r6, r1, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080a7c:	e9dd 7101 	ldrd	r7, r1, [sp, #4]
 8080a80:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8080a84:	8927      	ldrh	r7, [r4, #8]
 8080a86:	eba1 1107 	sub.w	r1, r1, r7, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8080a8a:	f994 700c 	ldrsb.w	r7, [r4, #12]
 8080a8e:	435f      	muls	r7, r3
 8080a90:	fb97 f7f0 	sdiv	r7, r7, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080a94:	eba1 0167 	sub.w	r1, r1, r7, asr #1
	var3 = var1 * var2;
 8080a98:	4371      	muls	r1, r6
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a9a:	f994 6010 	ldrsb.w	r6, [r4, #16]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a9e:	2700      	movs	r7, #0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080aa0:	4373      	muls	r3, r6
 8080aa2:	fb93 f3f0 	sdiv	r3, r3, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8080aa6:	7be0      	ldrb	r0, [r4, #15]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080aa8:	f240 563c 	movw	r6, #1340	; 0x53c
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080aac:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080ab0:	1388      	asrs	r0, r1, #14
 8080ab2:	4340      	muls	r0, r0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080ab4:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080ab6:	1280      	asrs	r0, r0, #10
	var6 = (var4 * var5) >> 1;
 8080ab8:	4343      	muls	r3, r0
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080aba:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080abe:	1299      	asrs	r1, r3, #10
 8080ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080ac4:	434b      	muls	r3, r1
				data->humidity = calc_humidity(adc_hum, dev);
 8080ac6:	492b      	ldr	r1, [pc, #172]	; (8080b74 <bme680_get_sensor_data+0x2f8>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080ac8:	131b      	asrs	r3, r3, #12
 8080aca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
 8080ace:	428b      	cmp	r3, r1
 8080ad0:	bfd4      	ite	le
 8080ad2:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080ad6:	f8c8 100c 	strgt.w	r1, [r8, #12]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080ada:	2105      	movs	r1, #5
 8080adc:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 8080ae0:	fbc3 6701 	smlal	r6, r7, r3, r1
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080ae4:	4b24      	ldr	r3, [pc, #144]	; (8080b78 <bme680_get_sensor_data+0x2fc>)
 8080ae6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080aea:	fba6 0103 	umull	r0, r1, r6, r3
 8080aee:	fb03 1107 	mla	r1, r3, r7, r1
 8080af2:	0c06      	lsrs	r6, r0, #16
 8080af4:	ea4f 4e21 	mov.w	lr, r1, asr #16
 8080af8:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080afc:	2100      	movs	r1, #0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080afe:	9b03      	ldr	r3, [sp, #12]
 8080b00:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080b04:	03d3      	lsls	r3, r2, #15
 8080b06:	f113 437f 	adds.w	r3, r3, #4278190080	; 0xff000000
 8080b0a:	f141 31ff 	adc.w	r1, r1, #4294967295
 8080b0e:	199a      	adds	r2, r3, r6
 8080b10:	eb41 030e 	adc.w	r3, r1, lr
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080b14:	4919      	ldr	r1, [pc, #100]	; (8080b7c <bme680_get_sensor_data+0x300>)
 8080b16:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8080b1a:	fba1 6706 	umull	r6, r7, r1, r6
 8080b1e:	fb01 770e 	mla	r7, r1, lr, r7
 8080b22:	0a70      	lsrs	r0, r6, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080b24:	0856      	lsrs	r6, r2, #1
 8080b26:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080b2a:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 8080b2e:	ea4f 2c67 	mov.w	ip, r7, asr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8080b32:	1059      	asrs	r1, r3, #1
 8080b34:	1980      	adds	r0, r0, r6
 8080b36:	eb4c 0101 	adc.w	r1, ip, r1
 8080b3a:	f00d fc87 	bl	808e44c <__aeabi_ldivmod>
 8080b3e:	f8c8 0010 	str.w	r0, [r8, #16]
		if (rslt == BME680_OK) {
 8080b42:	b16d      	cbz	r5, 8080b60 <bme680_get_sensor_data+0x2e4>
}
 8080b44:	4628      	mov	r0, r5
 8080b46:	b009      	add	sp, #36	; 0x24
 8080b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8080b4c:	200a      	movs	r0, #10
 8080b4e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080b50:	4798      	blx	r3
	} while (tries);
 8080b52:	3f01      	subs	r7, #1
 8080b54:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8080b58:	f47f aea6 	bne.w	80808a8 <bme680_get_sensor_data+0x2c>
		rslt = BME680_W_NO_NEW_DATA;
 8080b5c:	2502      	movs	r5, #2
	return rslt;
 8080b5e:	e7f1      	b.n	8080b44 <bme680_get_sensor_data+0x2c8>
			if (data->status & BME680_NEW_DATA_MSK)
 8080b60:	f998 3000 	ldrsb.w	r3, [r8]
 8080b64:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080b66:	bfb6      	itet	lt
 8080b68:	2301      	movlt	r3, #1
				dev->new_fields = 0;
 8080b6a:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
				dev->new_fields = 1;
 8080b6e:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
				dev->new_fields = 0;
 8080b72:	e7e7      	b.n	8080b44 <bme680_get_sensor_data+0x2c8>
 8080b74:	000186a0 	.word	0x000186a0
 8080b78:	20000000 	.word	0x20000000
 8080b7c:	20000040 	.word	0x20000040

08080b80 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8080b80:	4770      	bx	lr

08080b82 <_ZN4File9availableEv>:
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080b82:	4602      	mov	r2, r0
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080b84:	7c03      	ldrb	r3, [r0, #16]
 8080b86:	f013 0008 	ands.w	r0, r3, #8
 8080b8a:	bf1e      	ittt	ne
 8080b8c:	6a50      	ldrne	r0, [r2, #36]	; 0x24
 8080b8e:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
 8080b90:	1a18      	subne	r0, r3, r0
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080b92:	2800      	cmp	r0, #0
  }
 8080b94:	bfb8      	it	lt
 8080b96:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
 8080b9a:	4770      	bx	lr

08080b9c <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080b9c:	4770      	bx	lr

08080b9e <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
 8080b9e:	4770      	bx	lr

08080ba0 <_ZN6SdFileD0Ev>:
 8080ba0:	b510      	push	{r4, lr}
 8080ba2:	4604      	mov	r4, r0
 8080ba4:	212c      	movs	r1, #44	; 0x2c
 8080ba6:	f00c fc46 	bl	808d436 <_ZdlPvj>
 8080baa:	4620      	mov	r0, r4
 8080bac:	bd10      	pop	{r4, pc}

08080bae <_ZN4FileD0Ev>:
 8080bae:	b510      	push	{r4, lr}
 8080bb0:	4604      	mov	r4, r0
 8080bb2:	2134      	movs	r1, #52	; 0x34
 8080bb4:	f00c fc3f 	bl	808d436 <_ZdlPvj>
 8080bb8:	4620      	mov	r0, r4
 8080bba:	bd10      	pop	{r4, pc}

08080bbc <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080bbc:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080bbe:	2201      	movs	r2, #1
 8080bc0:	f10d 0107 	add.w	r1, sp, #7
 8080bc4:	3010      	adds	r0, #16
 8080bc6:	f007 fd65 	bl	8088694 <_ZN7FatFile4readEPvj>
 8080bca:	2801      	cmp	r0, #1
 8080bcc:	bf14      	ite	ne
 8080bce:	f04f 30ff 	movne.w	r0, #4294967295
 8080bd2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    return FatFile::read();
  }
 8080bd6:	b003      	add	sp, #12
 8080bd8:	f85d fb04 	ldr.w	pc, [sp], #4

08080bdc <_ZN4File5flushEv>:
    FatFile::sync();
 8080bdc:	3010      	adds	r0, #16
 8080bde:	f007 bed9 	b.w	8088994 <_ZN7FatFile4syncEv>

08080be2 <_ZN4File4peekEv>:
    return FatFile::peek();
 8080be2:	3010      	adds	r0, #16
 8080be4:	f007 be05 	b.w	80887f2 <_ZN7FatFile4peekEv>

08080be8 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080be8:	3010      	adds	r0, #16
 8080bea:	f007 bf5d 	b.w	8088aa8 <_ZN7FatFile5writeEPKvj>

08080bee <_ZN9PrintFile5writeEPKhj>:
    return FatFile::write(buf, size);
 8080bee:	3008      	adds	r0, #8
 8080bf0:	f007 bf5a 	b.w	8088aa8 <_ZN7FatFile5writeEPKvj>

08080bf4 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
 8080bf4:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080bf6:	2201      	movs	r2, #1
 8080bf8:	f88d 1007 	strb.w	r1, [sp, #7]
 8080bfc:	3010      	adds	r0, #16
 8080bfe:	f10d 0107 	add.w	r1, sp, #7
 8080c02:	f007 ff51 	bl	8088aa8 <_ZN7FatFile5writeEPKvj>
  }
 8080c06:	b003      	add	sp, #12
 8080c08:	f85d fb04 	ldr.w	pc, [sp], #4

08080c0c <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 8080c0c:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080c10:	f007 bbab 	b.w	808836a <_ZN9SdSpiCard11writeBlocksEmPKhj>

08080c14 <_ZN9SdFatBase10readBlocksEmPhj>:
    return m_sdCard.readBlocks(block, dst, n);
 8080c14:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080c18:	f007 badf 	b.w	80881da <_ZN9SdSpiCard10readBlocksEmPhj>

08080c1c <_ZN9SdFatBase10writeBlockEmPKh>:
    return m_sdCard.writeBlock(block, src);
 8080c1c:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080c20:	f007 bb1d 	b.w	808825e <_ZN9SdSpiCard10writeBlockEmPKh>

08080c24 <_ZN9SdFatBase9readBlockEmPh>:
    return m_sdCard.readBlock(block, dst);
 8080c24:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080c28:	f007 ba8f 	b.w	808814a <_ZN9SdSpiCard9readBlockEmPh>

08080c2c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080c2c:	b510      	push	{r4, lr}
 8080c2e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080c30:	6800      	ldr	r0, [r0, #0]
 8080c32:	b108      	cbz	r0, 8080c38 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080c34:	f009 ffec 	bl	808ac10 <free>
class SystemClass {
 8080c38:	4620      	mov	r0, r4
 8080c3a:	bd10      	pop	{r4, pc}

08080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 8080c3c:	b510      	push	{r4, lr}
 8080c3e:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080c40:	2204      	movs	r2, #4
 8080c42:	f009 fd45 	bl	808a6d0 <HAL_EEPROM_Put>
        return t;
    }
 8080c46:	4620      	mov	r0, r4
 8080c48:	bd10      	pop	{r4, pc}

08080c4a <_Z20remoteReadStoredVars6String>:
    }

}

int remoteReadStoredVars(String mem_address){
    uint16_t tempValue = 0;
 8080c4a:	2300      	movs	r3, #0
int remoteReadStoredVars(String mem_address){
 8080c4c:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080c4e:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080c52:	f00a fe25 	bl	808b8a0 <_ZNK6String5toIntEv>
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080c56:	2890      	cmp	r0, #144	; 0x90
    int numerical_mem_address = mem_address.toInt();
 8080c58:	4604      	mov	r4, r0
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080c5a:	d80b      	bhi.n	8080c74 <_Z20remoteReadStoredVars6String+0x2a>
        EEPROM.get(numerical_mem_address, tempValue);
 8080c5c:	f00c fb44 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080c60:	4620      	mov	r0, r4
 8080c62:	2202      	movs	r2, #2
 8080c64:	f10d 0106 	add.w	r1, sp, #6
 8080c68:	f009 fd2a 	bl	808a6c0 <HAL_EEPROM_Get>
        return tempValue;
 8080c6c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    }else{
        return -1;
    }
}
 8080c70:	b002      	add	sp, #8
 8080c72:	bd10      	pop	{r4, pc}
        return -1;
 8080c74:	f04f 30ff 	mov.w	r0, #4294967295
 8080c78:	e7fa      	b.n	8080c70 <_Z20remoteReadStoredVars6String+0x26>

08080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>:
    template <typename T> T &get( int idx, T &t )
 8080c7a:	b510      	push	{r4, lr}
 8080c7c:	460c      	mov	r4, r1
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080c7e:	2204      	movs	r2, #4
 8080c80:	f009 fd1e 	bl	808a6c0 <HAL_EEPROM_Get>
    }
 8080c84:	4620      	mov	r0, r4
 8080c86:	bd10      	pop	{r4, pc}

08080c88 <_ZN9PrintFile5writeEh>:
  size_t write(uint8_t b) {
 8080c88:	b507      	push	{r0, r1, r2, lr}
 8080c8a:	2201      	movs	r2, #1
 8080c8c:	f88d 1007 	strb.w	r1, [sp, #7]
 8080c90:	3008      	adds	r0, #8
 8080c92:	f10d 0107 	add.w	r1, sp, #7
 8080c96:	f007 ff07 	bl	8088aa8 <_ZN7FatFile5writeEPKvj>
  }
 8080c9a:	b003      	add	sp, #12
 8080c9c:	f85d fb04 	ldr.w	pc, [sp], #4

08080ca0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080ca0:	b40e      	push	{r1, r2, r3}
 8080ca2:	b503      	push	{r0, r1, lr}
 8080ca4:	ab03      	add	r3, sp, #12
 8080ca6:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 8080caa:	2100      	movs	r1, #0
        va_start(args, format);
 8080cac:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 8080cae:	f00a ff65 	bl	808bb7c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8080cb2:	b002      	add	sp, #8
 8080cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8080cb8:	b003      	add	sp, #12
 8080cba:	4770      	bx	lr

08080cbc <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080cbc:	b40e      	push	{r1, r2, r3}
 8080cbe:	b503      	push	{r0, r1, lr}
 8080cc0:	ab03      	add	r3, sp, #12
 8080cc2:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
 8080cc6:	2101      	movs	r1, #1
        va_start(args, format);
 8080cc8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
 8080cca:	f00a ff57 	bl	808bb7c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8080cce:	b002      	add	sp, #8
 8080cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8080cd4:	b003      	add	sp, #12
 8080cd6:	4770      	bx	lr

08080cd8 <_Z16locationCallbackfff>:
    Log.info("System version: %s", (const char*)System.version());
    

}

void locationCallback(float lat, float lon, float accuracy) {
 8080cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080cdc:	b085      	sub	sp, #20
 8080cde:	4692      	mov	sl, r2
 8080ce0:	460c      	mov	r4, r1
 8080ce2:	4605      	mov	r5, r0
  // Handle the returned location data for the device. This method is passed three arguments:
  // - Latitude
  // - Longitude
  // - Accuracy of estimated location (in meters)
  Serial.println("google geolocation:");
 8080ce4:	f00b fef8 	bl	808cad8 <_Z16_fetch_usbserialv>
 8080ce8:	492e      	ldr	r1, [pc, #184]	; (8080da4 <_Z16locationCallbackfff+0xcc>)
 8080cea:	f00a fe3a 	bl	808b962 <_ZN5Print7printlnEPKc>
  Serial.printlnf("Latitude:%f, longitude:%f, acc:%f", lat, lon, accuracy);
 8080cee:	f00b fef3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8080cf2:	4683      	mov	fp, r0
 8080cf4:	4628      	mov	r0, r5
 8080cf6:	f00c fd0f 	bl	808d718 <__aeabi_f2d>
 8080cfa:	4680      	mov	r8, r0
 8080cfc:	4620      	mov	r0, r4
 8080cfe:	4689      	mov	r9, r1
 8080d00:	f00c fd0a 	bl	808d718 <__aeabi_f2d>
 8080d04:	4606      	mov	r6, r0
 8080d06:	4650      	mov	r0, sl
 8080d08:	460f      	mov	r7, r1
 8080d0a:	f00c fd05 	bl	808d718 <__aeabi_f2d>
 8080d0e:	4604      	mov	r4, r0
 8080d10:	460d      	mov	r5, r1
 8080d12:	464b      	mov	r3, r9
 8080d14:	4642      	mov	r2, r8
 8080d16:	4924      	ldr	r1, [pc, #144]	; (8080da8 <_Z16locationCallbackfff+0xd0>)
 8080d18:	4658      	mov	r0, fp
 8080d1a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8080d1e:	e9cd 6700 	strd	r6, r7, [sp]
 8080d22:	f7ff ffcb 	bl	8080cbc <_ZN5Print8printlnfEPKcz>
  snprintf(geolocation_latitude, sizeof(geolocation_latitude), "%.6f", lat);
 8080d26:	210c      	movs	r1, #12
 8080d28:	4a20      	ldr	r2, [pc, #128]	; (8080dac <_Z16locationCallbackfff+0xd4>)
 8080d2a:	e9cd 8900 	strd	r8, r9, [sp]
 8080d2e:	4820      	ldr	r0, [pc, #128]	; (8080db0 <_Z16locationCallbackfff+0xd8>)
 8080d30:	f009 ff96 	bl	808ac60 <snprintf>
  snprintf(geolocation_longitude, sizeof(geolocation_longitude), "%.6f", lon);
 8080d34:	210d      	movs	r1, #13
 8080d36:	4a1d      	ldr	r2, [pc, #116]	; (8080dac <_Z16locationCallbackfff+0xd4>)
 8080d38:	e9cd 6700 	strd	r6, r7, [sp]
 8080d3c:	481d      	ldr	r0, [pc, #116]	; (8080db4 <_Z16locationCallbackfff+0xdc>)
 8080d3e:	f009 ff8f 	bl	808ac60 <snprintf>
  snprintf(geolocation_accuracy, sizeof(geolocation_accuracy), "%3.2f", accuracy);
 8080d42:	4a1d      	ldr	r2, [pc, #116]	; (8080db8 <_Z16locationCallbackfff+0xe0>)
 8080d44:	2106      	movs	r1, #6
 8080d46:	e9cd 4500 	strd	r4, r5, [sp]
 8080d4a:	481c      	ldr	r0, [pc, #112]	; (8080dbc <_Z16locationCallbackfff+0xe4>)
 8080d4c:	f009 ff88 	bl	808ac60 <snprintf>
  if(gps.get_latitude() == 0){
 8080d50:	481b      	ldr	r0, [pc, #108]	; (8080dc0 <_Z16locationCallbackfff+0xe8>)
 8080d52:	f006 fbbd 	bl	80874d0 <_ZN3GPS12get_latitudeEv>
 8080d56:	2200      	movs	r2, #0
 8080d58:	2300      	movs	r3, #0
 8080d5a:	f00c ff9d 	bl	808dc98 <__aeabi_dcmpeq>
 8080d5e:	b168      	cbz	r0, 8080d7c <_Z16locationCallbackfff+0xa4>
      status_word.status_int |= 0x0008;
 8080d60:	4d18      	ldr	r5, [pc, #96]	; (8080dc4 <_Z16locationCallbackfff+0xec>)
      status_word.status_int &= 0xFFF3;
      if(accuracy < 2){
 8080d62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8080d66:	882c      	ldrh	r4, [r5, #0]
 8080d68:	4650      	mov	r0, sl
 8080d6a:	f024 040c 	bic.w	r4, r4, #12
 8080d6e:	b2a4      	uxth	r4, r4
 8080d70:	f00d fb1e 	bl	808e3b0 <__aeabi_fcmplt>
 8080d74:	b128      	cbz	r0, 8080d82 <_Z16locationCallbackfff+0xaa>
          status_word.status_int |= 0x000C;
 8080d76:	f044 040c 	orr.w	r4, r4, #12
      }else if(accuracy < 5){
          status_word.status_int |= 0x0008;
      }else if(accuracy < 20){
          status_word.status_int |= 0x0004;
 8080d7a:	802c      	strh	r4, [r5, #0]
      }
  }
}
 8080d7c:	b005      	add	sp, #20
 8080d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }else if(accuracy < 5){
 8080d82:	4650      	mov	r0, sl
 8080d84:	4910      	ldr	r1, [pc, #64]	; (8080dc8 <_Z16locationCallbackfff+0xf0>)
 8080d86:	f00d fb13 	bl	808e3b0 <__aeabi_fcmplt>
 8080d8a:	b110      	cbz	r0, 8080d92 <_Z16locationCallbackfff+0xba>
          status_word.status_int |= 0x0008;
 8080d8c:	f044 0408 	orr.w	r4, r4, #8
 8080d90:	e7f3      	b.n	8080d7a <_Z16locationCallbackfff+0xa2>
      }else if(accuracy < 20){
 8080d92:	4650      	mov	r0, sl
 8080d94:	490d      	ldr	r1, [pc, #52]	; (8080dcc <_Z16locationCallbackfff+0xf4>)
 8080d96:	f00d fb0b 	bl	808e3b0 <__aeabi_fcmplt>
 8080d9a:	2800      	cmp	r0, #0
 8080d9c:	d0ed      	beq.n	8080d7a <_Z16locationCallbackfff+0xa2>
          status_word.status_int |= 0x0004;
 8080d9e:	f044 0404 	orr.w	r4, r4, #4
 8080da2:	e7ea      	b.n	8080d7a <_Z16locationCallbackfff+0xa2>
 8080da4:	08090576 	.word	0x08090576
 8080da8:	0809058a 	.word	0x0809058a
 8080dac:	080905ac 	.word	0x080905ac
 8080db0:	200000aa 	.word	0x200000aa
 8080db4:	200000b6 	.word	0x200000b6
 8080db8:	080905b1 	.word	0x080905b1
 8080dbc:	200000a4 	.word	0x200000a4
 8080dc0:	200006b8 	.word	0x200006b8
 8080dc4:	20000c90 	.word	0x20000c90
 8080dc8:	40a00000 	.word	0x40a00000
 8080dcc:	41a00000 	.word	0x41a00000

08080dd0 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080dd0:	2300      	movs	r3, #0
 8080dd2:	6840      	ldr	r0, [r0, #4]
 8080dd4:	461a      	mov	r2, r3
 8080dd6:	4619      	mov	r1, r3
 8080dd8:	f009 bea2 	b.w	808ab20 <network_off>

08080ddc <_ZN11USARTSerialD0Ev>:
 8080ddc:	b510      	push	{r4, lr}
 8080dde:	4604      	mov	r4, r0
 8080de0:	2114      	movs	r1, #20
 8080de2:	f00c fb28 	bl	808d436 <_ZdlPvj>
 8080de6:	4620      	mov	r0, r4
 8080de8:	bd10      	pop	{r4, pc}

08080dea <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080dea:	b538      	push	{r3, r4, r5, lr}
 8080dec:	4605      	mov	r5, r0
    return this->name(name, strlen(name));
 8080dee:	4608      	mov	r0, r1
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080df0:	460c      	mov	r4, r1
    return this->name(name, strlen(name));
 8080df2:	f00d fcbe 	bl	808e772 <strlen>
 8080df6:	4621      	mov	r1, r4
 8080df8:	4602      	mov	r2, r0
 8080dfa:	4628      	mov	r0, r5
}
 8080dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return this->name(name, strlen(name));
 8080e00:	f00c b9ba 	b.w	808d178 <_ZN5spark10JSONWriter4nameEPKcj>

08080e04 <_ZN5spark10JSONWriter5valueERK6String>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
}

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
 8080e04:	688a      	ldr	r2, [r1, #8]
 8080e06:	6809      	ldr	r1, [r1, #0]
 8080e08:	f00c b9c5 	b.w	808d196 <_ZN5spark10JSONWriter5valueEPKcj>

08080e0c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080e0c:	b40e      	push	{r1, r2, r3}
 8080e0e:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080e10:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 8080e12:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8080e14:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8080e16:	b08d      	sub	sp, #52	; 0x34
 8080e18:	aa0f      	add	r2, sp, #60	; 0x3c
 8080e1a:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8080e1e:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080e22:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8080e26:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080e28:	201e      	movs	r0, #30
 8080e2a:	aa04      	add	r2, sp, #16
 8080e2c:	f009 fdd8 	bl	808a9e0 <log_message_v>
}
 8080e30:	b00d      	add	sp, #52	; 0x34
 8080e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080e36:	b003      	add	sp, #12
 8080e38:	4770      	bx	lr
	...

08080e3c <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static hal_usart_ring_buffer_t serial4_rx_buffer;
static hal_usart_ring_buffer_t serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080e3c:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080e3e:	4c0d      	ldr	r4, [pc, #52]	; (8080e74 <_Z22__fetch_global_Serial4v+0x38>)
 8080e40:	7823      	ldrb	r3, [r4, #0]
 8080e42:	f3bf 8f5b 	dmb	ish
 8080e46:	07db      	lsls	r3, r3, #31
 8080e48:	d411      	bmi.n	8080e6e <_Z22__fetch_global_Serial4v+0x32>
 8080e4a:	4620      	mov	r0, r4
 8080e4c:	f7ff f943 	bl	80800d6 <__cxa_guard_acquire>
 8080e50:	b168      	cbz	r0, 8080e6e <_Z22__fetch_global_Serial4v+0x32>
 8080e52:	2103      	movs	r1, #3
 8080e54:	4a08      	ldr	r2, [pc, #32]	; (8080e78 <_Z22__fetch_global_Serial4v+0x3c>)
 8080e56:	4b09      	ldr	r3, [pc, #36]	; (8080e7c <_Z22__fetch_global_Serial4v+0x40>)
 8080e58:	4809      	ldr	r0, [pc, #36]	; (8080e80 <_Z22__fetch_global_Serial4v+0x44>)
 8080e5a:	f00b ff67 	bl	808cd2c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080e5e:	4620      	mov	r0, r4
 8080e60:	f7ff f93e 	bl	80800e0 <__cxa_guard_release>
 8080e64:	4a07      	ldr	r2, [pc, #28]	; (8080e84 <_Z22__fetch_global_Serial4v+0x48>)
 8080e66:	4908      	ldr	r1, [pc, #32]	; (8080e88 <_Z22__fetch_global_Serial4v+0x4c>)
 8080e68:	4805      	ldr	r0, [pc, #20]	; (8080e80 <_Z22__fetch_global_Serial4v+0x44>)
 8080e6a:	f00c fadf 	bl	808d42c <__aeabi_atexit>
	return serial4;
}
 8080e6e:	4804      	ldr	r0, [pc, #16]	; (8080e80 <_Z22__fetch_global_Serial4v+0x44>)
 8080e70:	bd10      	pop	{r4, pc}
 8080e72:	bf00      	nop
 8080e74:	20000324 	.word	0x20000324
 8080e78:	20000330 	.word	0x20000330
 8080e7c:	200003b4 	.word	0x200003b4
 8080e80:	20000544 	.word	0x20000544
 8080e84:	200002c0 	.word	0x200002c0
 8080e88:	08080b81 	.word	0x08080b81

08080e8c <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080e8c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080e8e:	f7ff ffd5 	bl	8080e3c <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080e92:	4b07      	ldr	r3, [pc, #28]	; (8080eb0 <_Z15serialEventRun4v+0x24>)
 8080e94:	4604      	mov	r4, r0
 8080e96:	b153      	cbz	r3, 8080eae <_Z15serialEventRun4v+0x22>
 8080e98:	f00b ff65 	bl	808cd66 <_ZN11USARTSerial9isEnabledEv>
 8080e9c:	b138      	cbz	r0, 8080eae <_Z15serialEventRun4v+0x22>
 8080e9e:	6823      	ldr	r3, [r4, #0]
 8080ea0:	4620      	mov	r0, r4
 8080ea2:	691b      	ldr	r3, [r3, #16]
 8080ea4:	4798      	blx	r3
 8080ea6:	2800      	cmp	r0, #0
 8080ea8:	dd01      	ble.n	8080eae <_Z15serialEventRun4v+0x22>
        handler();
 8080eaa:	f3af 8000 	nop.w
}
 8080eae:	bd10      	pop	{r4, pc}
 8080eb0:	00000000 	.word	0x00000000

08080eb4 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static hal_usart_ring_buffer_t serial5_rx_buffer;
static hal_usart_ring_buffer_t serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080eb4:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080eb6:	4c0d      	ldr	r4, [pc, #52]	; (8080eec <_Z22__fetch_global_Serial5v+0x38>)
 8080eb8:	7823      	ldrb	r3, [r4, #0]
 8080eba:	f3bf 8f5b 	dmb	ish
 8080ebe:	07db      	lsls	r3, r3, #31
 8080ec0:	d411      	bmi.n	8080ee6 <_Z22__fetch_global_Serial5v+0x32>
 8080ec2:	4620      	mov	r0, r4
 8080ec4:	f7ff f907 	bl	80800d6 <__cxa_guard_acquire>
 8080ec8:	b168      	cbz	r0, 8080ee6 <_Z22__fetch_global_Serial5v+0x32>
 8080eca:	2104      	movs	r1, #4
 8080ecc:	4a08      	ldr	r2, [pc, #32]	; (8080ef0 <_Z22__fetch_global_Serial5v+0x3c>)
 8080ece:	4b09      	ldr	r3, [pc, #36]	; (8080ef4 <_Z22__fetch_global_Serial5v+0x40>)
 8080ed0:	4809      	ldr	r0, [pc, #36]	; (8080ef8 <_Z22__fetch_global_Serial5v+0x44>)
 8080ed2:	f00b ff2b 	bl	808cd2c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080ed6:	4620      	mov	r0, r4
 8080ed8:	f7ff f902 	bl	80800e0 <__cxa_guard_release>
 8080edc:	4a07      	ldr	r2, [pc, #28]	; (8080efc <_Z22__fetch_global_Serial5v+0x48>)
 8080ede:	4908      	ldr	r1, [pc, #32]	; (8080f00 <_Z22__fetch_global_Serial5v+0x4c>)
 8080ee0:	4805      	ldr	r0, [pc, #20]	; (8080ef8 <_Z22__fetch_global_Serial5v+0x44>)
 8080ee2:	f00c faa3 	bl	808d42c <__aeabi_atexit>
	return serial5;
}
 8080ee6:	4804      	ldr	r0, [pc, #16]	; (8080ef8 <_Z22__fetch_global_Serial5v+0x44>)
 8080ee8:	bd10      	pop	{r4, pc}
 8080eea:	bf00      	nop
 8080eec:	20000328 	.word	0x20000328
 8080ef0:	20000438 	.word	0x20000438
 8080ef4:	200004bc 	.word	0x200004bc
 8080ef8:	20000558 	.word	0x20000558
 8080efc:	200002c0 	.word	0x200002c0
 8080f00:	08080b81 	.word	0x08080b81

08080f04 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080f04:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080f06:	f7ff ffd5 	bl	8080eb4 <_Z22__fetch_global_Serial5v>
    if (handler && serial.isEnabled() && serial.available()>0)
 8080f0a:	4b07      	ldr	r3, [pc, #28]	; (8080f28 <_Z15serialEventRun5v+0x24>)
 8080f0c:	4604      	mov	r4, r0
 8080f0e:	b153      	cbz	r3, 8080f26 <_Z15serialEventRun5v+0x22>
 8080f10:	f00b ff29 	bl	808cd66 <_ZN11USARTSerial9isEnabledEv>
 8080f14:	b138      	cbz	r0, 8080f26 <_Z15serialEventRun5v+0x22>
 8080f16:	6823      	ldr	r3, [r4, #0]
 8080f18:	4620      	mov	r0, r4
 8080f1a:	691b      	ldr	r3, [r3, #16]
 8080f1c:	4798      	blx	r3
 8080f1e:	2800      	cmp	r0, #0
 8080f20:	dd01      	ble.n	8080f26 <_Z15serialEventRun5v+0x22>
        handler();
 8080f22:	f3af 8000 	nop.w
}
 8080f26:	bd10      	pop	{r4, pc}
 8080f28:	00000000 	.word	0x00000000

08080f2c <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080f2c:	b538      	push	{r3, r4, r5, lr}
 8080f2e:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080f30:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080f34:	f007 f878 	bl	8088028 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080f38:	b908      	cbnz	r0, 8080f3e <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x12>
 8080f3a:	2000      	movs	r0, #0
  }
 8080f3c:	bd38      	pop	{r3, r4, r5, pc}
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080f3e:	f504 6588 	add.w	r5, r4, #1088	; 0x440
    vwd()->close();
 8080f42:	4628      	mov	r0, r5
 8080f44:	f007 fd5c 	bl	8088a00 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080f48:	2101      	movs	r1, #1
 8080f4a:	4620      	mov	r0, r4
 8080f4c:	f007 ff85 	bl	8088e5a <_ZN9FatVolume4initEh>
 8080f50:	4601      	mov	r1, r0
 8080f52:	b168      	cbz	r0, 8080f70 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x44>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080f54:	4621      	mov	r1, r4
 8080f56:	4628      	mov	r0, r5
 8080f58:	f007 fb83 	bl	8088662 <_ZN7FatFile8openRootEP9FatVolume>
 8080f5c:	2800      	cmp	r0, #0
 8080f5e:	d0ec      	beq.n	8080f3a <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    if (!dir->isDir()) {
 8080f60:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080f64:	f013 0f70 	tst.w	r3, #112	; 0x70
 8080f68:	d0e7      	beq.n	8080f3a <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    m_cwd = dir;
 8080f6a:	4b04      	ldr	r3, [pc, #16]	; (8080f7c <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080f6c:	601d      	str	r5, [r3, #0]
    return true;
 8080f6e:	e7e5      	b.n	8080f3c <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x10>
    return (part ? init(part) : init(1) || init(0))
 8080f70:	4620      	mov	r0, r4
 8080f72:	f007 ff72 	bl	8088e5a <_ZN9FatVolume4initEh>
 8080f76:	2800      	cmp	r0, #0
 8080f78:	d1ec      	bne.n	8080f54 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x28>
 8080f7a:	e7de      	b.n	8080f3a <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
 8080f7c:	20000cf4 	.word	0x20000cf4

08080f80 <_Z13writeRegisterhh>:
void writeRegister(uint8_t reg, uint8_t value) {
 8080f80:	b538      	push	{r3, r4, r5, lr}
 8080f82:	460c      	mov	r4, r1
 8080f84:	4605      	mov	r5, r0
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080f86:	f00c fa29 	bl	808d3dc <_Z20__fetch_global_Wire3v>
 8080f8a:	216b      	movs	r1, #107	; 0x6b
 8080f8c:	f00b ff9e 	bl	808cecc <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080f90:	f00c fa24 	bl	808d3dc <_Z20__fetch_global_Wire3v>
 8080f94:	6803      	ldr	r3, [r0, #0]
 8080f96:	4629      	mov	r1, r5
 8080f98:	689b      	ldr	r3, [r3, #8]
 8080f9a:	4798      	blx	r3
    Wire3.write(value);
 8080f9c:	f00c fa1e 	bl	808d3dc <_Z20__fetch_global_Wire3v>
 8080fa0:	6803      	ldr	r3, [r0, #0]
 8080fa2:	4621      	mov	r1, r4
 8080fa4:	689b      	ldr	r3, [r3, #8]
 8080fa6:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080fa8:	f00c fa18 	bl	808d3dc <_Z20__fetch_global_Wire3v>
}
 8080fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire3.endTransmission(true);
 8080fb0:	2101      	movs	r1, #1
 8080fb2:	f00b bfa6 	b.w	808cf02 <_ZN7TwoWire15endTransmissionEh>
	...

08080fb8 <_Z20writeDefaultSettingsv>:
void writeDefaultSettings(void){
 8080fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080fba:	f00c f995 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8080fbe:	f240 6313 	movw	r3, #1555	; 0x613
    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080fc2:	2564      	movs	r5, #100	; 0x64
    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080fc4:	2400      	movs	r4, #0
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080fc6:	a901      	add	r1, sp, #4
 8080fc8:	2000      	movs	r0, #0
 8080fca:	9301      	str	r3, [sp, #4]
 8080fcc:	f7ff fe36 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080fd0:	f00c f98a 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8080fd4:	a901      	add	r1, sp, #4
 8080fd6:	2008      	movs	r0, #8
 8080fd8:	9501      	str	r5, [sp, #4]
 8080fda:	f7ff fe2f 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SLOPE_MEM_ADDRESS, 100);
 8080fde:	f00c f983 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8080fe2:	a901      	add	r1, sp, #4
 8080fe4:	2010      	movs	r0, #16
 8080fe6:	9501      	str	r5, [sp, #4]
 8080fe8:	f7ff fe28 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080fec:	f00c f97c 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8080ff0:	a901      	add	r1, sp, #4
 8080ff2:	2018      	movs	r0, #24
 8080ff4:	9501      	str	r5, [sp, #4]
 8080ff6:	f7ff fe21 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080ffa:	f00c f975 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8080ffe:	a901      	add	r1, sp, #4
 8081000:	2020      	movs	r0, #32
 8081002:	9501      	str	r5, [sp, #4]
 8081004:	f7ff fe1a 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8081008:	f00c f96e 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808100c:	a901      	add	r1, sp, #4
 808100e:	2028      	movs	r0, #40	; 0x28
 8081010:	9501      	str	r5, [sp, #4]
 8081012:	f7ff fe13 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8081016:	f00c f967 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808101a:	a901      	add	r1, sp, #4
 808101c:	2030      	movs	r0, #48	; 0x30
 808101e:	9501      	str	r5, [sp, #4]
 8081020:	f7ff fe0c 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8081024:	f00c f960 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081028:	a901      	add	r1, sp, #4
 808102a:	2038      	movs	r0, #56	; 0x38
 808102c:	9501      	str	r5, [sp, #4]
 808102e:	f7ff fe05 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8081032:	f00c f959 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081036:	a901      	add	r1, sp, #4
 8081038:	2040      	movs	r0, #64	; 0x40
 808103a:	9501      	str	r5, [sp, #4]
 808103c:	f7ff fdfe 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8081040:	f00c f952 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081044:	a901      	add	r1, sp, #4
 8081046:	2004      	movs	r0, #4
 8081048:	9401      	str	r4, [sp, #4]
 808104a:	f7ff fdf7 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_ZERO_MEM_ADDRESS, 0);
 808104e:	f00c f94b 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081052:	a901      	add	r1, sp, #4
 8081054:	200c      	movs	r0, #12
 8081056:	9401      	str	r4, [sp, #4]
 8081058:	f7ff fdf0 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 808105c:	f00c f944 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081060:	a901      	add	r1, sp, #4
 8081062:	2014      	movs	r0, #20
 8081064:	9401      	str	r4, [sp, #4]
 8081066:	f7ff fde9 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 808106a:	f00c f93d 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808106e:	a901      	add	r1, sp, #4
 8081070:	201c      	movs	r0, #28
 8081072:	9401      	str	r4, [sp, #4]
 8081074:	f7ff fde2 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8081078:	f00c f936 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808107c:	a901      	add	r1, sp, #4
 808107e:	2024      	movs	r0, #36	; 0x24
 8081080:	9401      	str	r4, [sp, #4]
 8081082:	f7ff fddb 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8081086:	f00c f92f 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808108a:	a901      	add	r1, sp, #4
 808108c:	202c      	movs	r0, #44	; 0x2c
 808108e:	9401      	str	r4, [sp, #4]
 8081090:	f7ff fdd4 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8081094:	f00c f928 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081098:	a901      	add	r1, sp, #4
 808109a:	2034      	movs	r0, #52	; 0x34
 808109c:	9401      	str	r4, [sp, #4]
 808109e:	f7ff fdcd 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 80810a2:	f00c f921 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80810a6:	a901      	add	r1, sp, #4
 80810a8:	203c      	movs	r0, #60	; 0x3c
 80810aa:	9401      	str	r4, [sp, #4]
 80810ac:	f7ff fdc6 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 80810b0:	f00c f91a 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80810b4:	a901      	add	r1, sp, #4
 80810b6:	2044      	movs	r0, #68	; 0x44
 80810b8:	9401      	str	r4, [sp, #4]
 80810ba:	f7ff fdbf 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 80810be:	f00c f913 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80810c2:	a901      	add	r1, sp, #4
 80810c4:	2048      	movs	r0, #72	; 0x48
 80810c6:	9401      	str	r4, [sp, #4]
 80810c8:	f7ff fdb8 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 80810cc:	f00c f90c 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80810d0:	a901      	add	r1, sp, #4
 80810d2:	2058      	movs	r0, #88	; 0x58
 80810d4:	9401      	str	r4, [sp, #4]
 80810d6:	f7ff fdb1 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 80810da:	f00c f905 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80810de:	4941      	ldr	r1, [pc, #260]	; (80811e4 <_Z20writeDefaultSettingsv+0x22c>)
 80810e0:	205c      	movs	r0, #92	; 0x5c
 80810e2:	f7ff fdab 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 80810e6:	f00c f8ff 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80810ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80810ee:	a901      	add	r1, sp, #4
 80810f0:	204c      	movs	r0, #76	; 0x4c
 80810f2:	9301      	str	r3, [sp, #4]
 80810f4:	f7ff fda2 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 80810f8:	f00c f8f6 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80810fc:	f242 7310 	movw	r3, #10000	; 0x2710
 8081100:	a901      	add	r1, sp, #4
 8081102:	2050      	movs	r0, #80	; 0x50
 8081104:	9301      	str	r3, [sp, #4]
 8081106:	f7ff fd99 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 808110a:	f00c f8ed 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808110e:	f06f 0306 	mvn.w	r3, #6
 8081112:	a901      	add	r1, sp, #4
 8081114:	2054      	movs	r0, #84	; 0x54
 8081116:	9301      	str	r3, [sp, #4]
 8081118:	f7ff fd90 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    Time.zone(tempValue);
 808111c:	4b32      	ldr	r3, [pc, #200]	; (80811e8 <_Z20writeDefaultSettingsv+0x230>)
 808111e:	6818      	ldr	r0, [r3, #0]
 8081120:	f00c ff54 	bl	808dfcc <__aeabi_i2f>
 8081124:	f00a fe50 	bl	808bdc8 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8081128:	f00c f8de 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808112c:	a901      	add	r1, sp, #4
 808112e:	2060      	movs	r0, #96	; 0x60
 8081130:	9401      	str	r4, [sp, #4]
 8081132:	f7ff fd83 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8081136:	f00c f8d7 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808113a:	4628      	mov	r0, r5
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 808113c:	2501      	movs	r5, #1
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 808113e:	a901      	add	r1, sp, #4
 8081140:	9401      	str	r4, [sp, #4]
 8081142:	f7ff fd7b 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8081146:	f00c f8cf 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808114a:	a901      	add	r1, sp, #4
 808114c:	2068      	movs	r0, #104	; 0x68
 808114e:	9501      	str	r5, [sp, #4]
 8081150:	f7ff fd74 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8081154:	f00c f8c8 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081158:	a901      	add	r1, sp, #4
 808115a:	206c      	movs	r0, #108	; 0x6c
 808115c:	9401      	str	r4, [sp, #4]
 808115e:	f7ff fd6d 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS,0);
 8081162:	f00c f8c1 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081166:	a901      	add	r1, sp, #4
 8081168:	2070      	movs	r0, #112	; 0x70
 808116a:	9401      	str	r4, [sp, #4]
 808116c:	f7ff fd66 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8081170:	f00c f8ba 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081174:	a901      	add	r1, sp, #4
 8081176:	2074      	movs	r0, #116	; 0x74
 8081178:	9501      	str	r5, [sp, #4]
 808117a:	f7ff fd5f 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 808117e:	f00c f8b3 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081182:	a901      	add	r1, sp, #4
 8081184:	2078      	movs	r0, #120	; 0x78
 8081186:	9501      	str	r5, [sp, #4]
 8081188:	f7ff fd58 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 808118c:	f00c f8ac 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081190:	a901      	add	r1, sp, #4
 8081192:	207c      	movs	r0, #124	; 0x7c
 8081194:	9401      	str	r4, [sp, #4]
 8081196:	f7ff fd51 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 808119a:	f00c f8a5 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808119e:	a901      	add	r1, sp, #4
 80811a0:	2080      	movs	r0, #128	; 0x80
 80811a2:	9501      	str	r5, [sp, #4]
 80811a4:	f7ff fd4a 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 80811a8:	f00c f89e 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80811ac:	a901      	add	r1, sp, #4
 80811ae:	2084      	movs	r0, #132	; 0x84
 80811b0:	9401      	str	r4, [sp, #4]
 80811b2:	f7ff fd43 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 80811b6:	f00c f897 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80811ba:	a901      	add	r1, sp, #4
 80811bc:	2088      	movs	r0, #136	; 0x88
 80811be:	9401      	str	r4, [sp, #4]
 80811c0:	f7ff fd3c 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, 0);
 80811c4:	f00c f890 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80811c8:	a901      	add	r1, sp, #4
 80811ca:	208c      	movs	r0, #140	; 0x8c
 80811cc:	9401      	str	r4, [sp, #4]
 80811ce:	f7ff fd35 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 80811d2:	f00c f889 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80811d6:	a901      	add	r1, sp, #4
 80811d8:	2090      	movs	r0, #144	; 0x90
 80811da:	9401      	str	r4, [sp, #4]
 80811dc:	f7ff fd2e 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
}
 80811e0:	b003      	add	sp, #12
 80811e2:	bd30      	pop	{r4, r5, pc}
 80811e4:	20000ca8 	.word	0x20000ca8
 80811e8:	20000c94 	.word	0x20000c94

080811ec <_Z14readStoredVarsv>:
void readStoredVars(void){
 80811ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 80811f0:	4cb6      	ldr	r4, [pc, #728]	; (80814cc <_Z14readStoredVarsv+0x2e0>)
 80811f2:	f00c f879 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80811f6:	4621      	mov	r1, r4
 80811f8:	2000      	movs	r0, #0
 80811fa:	f7ff fd3e 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if(DEVICE_id == -1){
 80811fe:	6823      	ldr	r3, [r4, #0]
 8081200:	3301      	adds	r3, #1
 8081202:	d104      	bne.n	808120e <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 8081204:	f240 6313 	movw	r3, #1555	; 0x613
 8081208:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 808120a:	f7ff fed5 	bl	8080fb8 <_Z20writeDefaultSettingsv>
    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 808120e:	f00c f86b 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081212:	a901      	add	r1, sp, #4
 8081214:	2008      	movs	r0, #8
 8081216:	f7ff fd30 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO2_slope = tempValue;
 808121a:	9801      	ldr	r0, [sp, #4]
 808121c:	f00c fed6 	bl	808dfcc <__aeabi_i2f>
    CO2_slope /= 100;
 8081220:	49ab      	ldr	r1, [pc, #684]	; (80814d0 <_Z14readStoredVarsv+0x2e4>)
 8081222:	f00c ffdb 	bl	808e1dc <__aeabi_fdiv>
 8081226:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8081558 <_Z14readStoredVarsv+0x36c>
    CO_slope /= 100;
 808122a:	4faa      	ldr	r7, [pc, #680]	; (80814d4 <_Z14readStoredVarsv+0x2e8>)
    CO2_slope /= 100;
 808122c:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
 8081230:	f00c f85a 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081234:	a901      	add	r1, sp, #4
 8081236:	2010      	movs	r0, #16
 8081238:	f7ff fd1f 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO_slope = tempValue;
 808123c:	9801      	ldr	r0, [sp, #4]
 808123e:	f00c fec5 	bl	808dfcc <__aeabi_i2f>
    CO_slope /= 100;
 8081242:	49a3      	ldr	r1, [pc, #652]	; (80814d0 <_Z14readStoredVarsv+0x2e4>)
 8081244:	f00c ffca 	bl	808e1dc <__aeabi_fdiv>
 8081248:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 808124a:	f00c f84d 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808124e:	a901      	add	r1, sp, #4
 8081250:	2018      	movs	r0, #24
 8081252:	f7ff fd12 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_1_slope = tempValue;
 8081256:	9801      	ldr	r0, [sp, #4]
 8081258:	f00c feb8 	bl	808dfcc <__aeabi_i2f>
    PM_1_slope /= 100;
 808125c:	499c      	ldr	r1, [pc, #624]	; (80814d0 <_Z14readStoredVarsv+0x2e4>)
 808125e:	f00c ffbd 	bl	808e1dc <__aeabi_fdiv>
 8081262:	4e9d      	ldr	r6, [pc, #628]	; (80814d8 <_Z14readStoredVarsv+0x2ec>)
    PM_25_slope /= 100;
 8081264:	4d9d      	ldr	r5, [pc, #628]	; (80814dc <_Z14readStoredVarsv+0x2f0>)
    PM_1_slope /= 100;
 8081266:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8081268:	f00c f83e 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808126c:	a901      	add	r1, sp, #4
 808126e:	2020      	movs	r0, #32
 8081270:	f7ff fd03 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_25_slope = tempValue;
 8081274:	9801      	ldr	r0, [sp, #4]
 8081276:	f00c fea9 	bl	808dfcc <__aeabi_i2f>
    PM_25_slope /= 100;
 808127a:	4995      	ldr	r1, [pc, #596]	; (80814d0 <_Z14readStoredVarsv+0x2e4>)
 808127c:	f00c ffae 	bl	808e1dc <__aeabi_fdiv>
 8081280:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8081282:	f00c f831 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081286:	a901      	add	r1, sp, #4
 8081288:	2028      	movs	r0, #40	; 0x28
 808128a:	f7ff fcf6 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_10_slope = tempValue;
 808128e:	9801      	ldr	r0, [sp, #4]
 8081290:	f00c fe9c 	bl	808dfcc <__aeabi_i2f>
    PM_10_slope /= 100;
 8081294:	498e      	ldr	r1, [pc, #568]	; (80814d0 <_Z14readStoredVarsv+0x2e4>)
 8081296:	f00c ffa1 	bl	808e1dc <__aeabi_fdiv>
 808129a:	4c91      	ldr	r4, [pc, #580]	; (80814e0 <_Z14readStoredVarsv+0x2f4>)
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 808129c:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 808155c <_Z14readStoredVarsv+0x370>
    PM_10_slope /= 100;
 80812a0:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 80812a2:	f00c f821 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80812a6:	a901      	add	r1, sp, #4
 80812a8:	2030      	movs	r0, #48	; 0x30
 80812aa:	f7ff fce6 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    temp_slope = tempValue;
 80812ae:	9801      	ldr	r0, [sp, #4]
 80812b0:	f00c fe8c 	bl	808dfcc <__aeabi_i2f>
    temp_slope /= 100;
 80812b4:	4986      	ldr	r1, [pc, #536]	; (80814d0 <_Z14readStoredVarsv+0x2e4>)
 80812b6:	f00c ff91 	bl	808e1dc <__aeabi_fdiv>
 80812ba:	4b8a      	ldr	r3, [pc, #552]	; (80814e4 <_Z14readStoredVarsv+0x2f8>)
 80812bc:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 80812be:	f00c f813 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80812c2:	a901      	add	r1, sp, #4
 80812c4:	2038      	movs	r0, #56	; 0x38
 80812c6:	f7ff fcd8 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    pressure_slope = tempValue;
 80812ca:	9801      	ldr	r0, [sp, #4]
 80812cc:	f00c fe7e 	bl	808dfcc <__aeabi_i2f>
    pressure_slope /= 100;
 80812d0:	497f      	ldr	r1, [pc, #508]	; (80814d0 <_Z14readStoredVarsv+0x2e4>)
 80812d2:	f00c ff83 	bl	808e1dc <__aeabi_fdiv>
 80812d6:	4b84      	ldr	r3, [pc, #528]	; (80814e8 <_Z14readStoredVarsv+0x2fc>)
 80812d8:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 80812da:	f00c f805 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80812de:	a901      	add	r1, sp, #4
 80812e0:	2040      	movs	r0, #64	; 0x40
 80812e2:	f7ff fcca 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    rh_slope = tempValue;
 80812e6:	9801      	ldr	r0, [sp, #4]
 80812e8:	f00c fe70 	bl	808dfcc <__aeabi_i2f>
    rh_slope /= 100;
 80812ec:	4978      	ldr	r1, [pc, #480]	; (80814d0 <_Z14readStoredVarsv+0x2e4>)
 80812ee:	f00c ff75 	bl	808e1dc <__aeabi_fdiv>
 80812f2:	4b7e      	ldr	r3, [pc, #504]	; (80814ec <_Z14readStoredVarsv+0x300>)
 80812f4:	6018      	str	r0, [r3, #0]
    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 80812f6:	f00b fff7 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80812fa:	497d      	ldr	r1, [pc, #500]	; (80814f0 <_Z14readStoredVarsv+0x304>)
 80812fc:	2004      	movs	r0, #4
 80812fe:	f7ff fcbc 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_ZERO_MEM_ADDRESS, CO_zero);
 8081302:	f00b fff1 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081306:	497b      	ldr	r1, [pc, #492]	; (80814f4 <_Z14readStoredVarsv+0x308>)
 8081308:	200c      	movs	r0, #12
 808130a:	f7ff fcb6 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 808130e:	f00b ffeb 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081312:	4979      	ldr	r1, [pc, #484]	; (80814f8 <_Z14readStoredVarsv+0x30c>)
 8081314:	2014      	movs	r0, #20
 8081316:	f7ff fcb0 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 808131a:	f00b ffe5 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808131e:	4977      	ldr	r1, [pc, #476]	; (80814fc <_Z14readStoredVarsv+0x310>)
 8081320:	201c      	movs	r0, #28
 8081322:	f7ff fcaa 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 8081326:	f00b ffdf 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808132a:	4975      	ldr	r1, [pc, #468]	; (8081500 <_Z14readStoredVarsv+0x314>)
 808132c:	2024      	movs	r0, #36	; 0x24
 808132e:	f7ff fca4 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 8081332:	f00b ffd9 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081336:	4973      	ldr	r1, [pc, #460]	; (8081504 <_Z14readStoredVarsv+0x318>)
 8081338:	202c      	movs	r0, #44	; 0x2c
 808133a:	f7ff fc9e 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 808133e:	f00b ffd3 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081342:	4971      	ldr	r1, [pc, #452]	; (8081508 <_Z14readStoredVarsv+0x31c>)
 8081344:	2034      	movs	r0, #52	; 0x34
 8081346:	f7ff fc98 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 808134a:	f00b ffcd 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808134e:	496f      	ldr	r1, [pc, #444]	; (808150c <_Z14readStoredVarsv+0x320>)
 8081350:	203c      	movs	r0, #60	; 0x3c
 8081352:	f7ff fc92 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8081356:	f00b ffc7 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808135a:	496d      	ldr	r1, [pc, #436]	; (8081510 <_Z14readStoredVarsv+0x324>)
 808135c:	2044      	movs	r0, #68	; 0x44
 808135e:	f7ff fc8c 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8081362:	f00b ffc1 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081366:	496b      	ldr	r1, [pc, #428]	; (8081514 <_Z14readStoredVarsv+0x328>)
 8081368:	2048      	movs	r0, #72	; 0x48
 808136a:	f7ff fc86 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808136e:	f00b ffbb 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081372:	4969      	ldr	r1, [pc, #420]	; (8081518 <_Z14readStoredVarsv+0x32c>)
 8081374:	2058      	movs	r0, #88	; 0x58
 8081376:	f7ff fc80 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 808137a:	f00b ffb5 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808137e:	4967      	ldr	r1, [pc, #412]	; (808151c <_Z14readStoredVarsv+0x330>)
 8081380:	205c      	movs	r0, #92	; 0x5c
 8081382:	f7ff fc7a 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8081386:	f00b ffaf 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808138a:	4965      	ldr	r1, [pc, #404]	; (8081520 <_Z14readStoredVarsv+0x334>)
 808138c:	204c      	movs	r0, #76	; 0x4c
 808138e:	f7ff fc74 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8081392:	f00b ffa9 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081396:	4963      	ldr	r1, [pc, #396]	; (8081524 <_Z14readStoredVarsv+0x338>)
 8081398:	2050      	movs	r0, #80	; 0x50
 808139a:	f7ff fc6e 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 808139e:	f00b ffa3 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80813a2:	a901      	add	r1, sp, #4
 80813a4:	2054      	movs	r0, #84	; 0x54
 80813a6:	f7ff fc68 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    Time.zone(tempValue);
 80813aa:	9801      	ldr	r0, [sp, #4]
 80813ac:	f00c fe0e 	bl	808dfcc <__aeabi_i2f>
 80813b0:	f00a fd0a 	bl	808bdc8 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 80813b4:	f00b ff98 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80813b8:	495b      	ldr	r1, [pc, #364]	; (8081528 <_Z14readStoredVarsv+0x33c>)
 80813ba:	2060      	movs	r0, #96	; 0x60
 80813bc:	f7ff fc5d 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80813c0:	f00b ff92 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80813c4:	4959      	ldr	r1, [pc, #356]	; (808152c <_Z14readStoredVarsv+0x340>)
 80813c6:	2064      	movs	r0, #100	; 0x64
 80813c8:	f7ff fc57 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 80813cc:	f00b ff8c 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80813d0:	4957      	ldr	r1, [pc, #348]	; (8081530 <_Z14readStoredVarsv+0x344>)
 80813d2:	2068      	movs	r0, #104	; 0x68
 80813d4:	f7ff fc51 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80813d8:	f00b ff86 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80813dc:	4955      	ldr	r1, [pc, #340]	; (8081534 <_Z14readStoredVarsv+0x348>)
 80813de:	206c      	movs	r0, #108	; 0x6c
 80813e0:	f7ff fc4b 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 80813e4:	f00b ff80 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80813e8:	4953      	ldr	r1, [pc, #332]	; (8081538 <_Z14readStoredVarsv+0x34c>)
 80813ea:	2070      	movs	r0, #112	; 0x70
 80813ec:	f7ff fc45 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 80813f0:	f00b ff7a 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80813f4:	4951      	ldr	r1, [pc, #324]	; (808153c <_Z14readStoredVarsv+0x350>)
 80813f6:	2074      	movs	r0, #116	; 0x74
 80813f8:	f7ff fc3f 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80813fc:	f00b ff74 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081400:	494f      	ldr	r1, [pc, #316]	; (8081540 <_Z14readStoredVarsv+0x354>)
 8081402:	2078      	movs	r0, #120	; 0x78
 8081404:	f7ff fc39 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8081408:	f00b ff6e 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808140c:	494d      	ldr	r1, [pc, #308]	; (8081544 <_Z14readStoredVarsv+0x358>)
 808140e:	207c      	movs	r0, #124	; 0x7c
 8081410:	f7ff fc33 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8081414:	f00b ff68 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081418:	494b      	ldr	r1, [pc, #300]	; (8081548 <_Z14readStoredVarsv+0x35c>)
 808141a:	2080      	movs	r0, #128	; 0x80
 808141c:	f7ff fc2d 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8081420:	f00b ff62 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081424:	4949      	ldr	r1, [pc, #292]	; (808154c <_Z14readStoredVarsv+0x360>)
 8081426:	2084      	movs	r0, #132	; 0x84
 8081428:	f7ff fc27 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 808142c:	f00b ff5c 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081430:	4947      	ldr	r1, [pc, #284]	; (8081550 <_Z14readStoredVarsv+0x364>)
 8081432:	2088      	movs	r0, #136	; 0x88
 8081434:	f7ff fc21 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8081438:	f00b ff56 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808143c:	4649      	mov	r1, r9
 808143e:	208c      	movs	r0, #140	; 0x8c
 8081440:	f7ff fc1b 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8081444:	f00b ff50 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8081448:	2090      	movs	r0, #144	; 0x90
 808144a:	4942      	ldr	r1, [pc, #264]	; (8081554 <_Z14readStoredVarsv+0x368>)
 808144c:	f7ff fc15 	bl	8080c7a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if(sensible_iot_en){
 8081450:	f8d9 3000 	ldr.w	r3, [r9]
 8081454:	b113      	cbz	r3, 808145c <_Z14readStoredVarsv+0x270>
        Time.zone(0);       //use UTC if using sensible iot upload
 8081456:	2000      	movs	r0, #0
 8081458:	f00a fcb6 	bl	808bdc8 <_ZN9TimeClass4zoneEf>
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 808145c:	f241 3187 	movw	r1, #4999	; 0x1387
 8081460:	4a36      	ldr	r2, [pc, #216]	; (808153c <_Z14readStoredVarsv+0x350>)
    if(!CO2_slope)
 8081462:	f8d8 0000 	ldr.w	r0, [r8]
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 8081466:	6813      	ldr	r3, [r2, #0]
 8081468:	3b01      	subs	r3, #1
 808146a:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 808146c:	bf88      	it	hi
 808146e:	2301      	movhi	r3, #1
    if(!CO2_slope)
 8081470:	f04f 0100 	mov.w	r1, #0
        measurements_to_average = 1;
 8081474:	bf88      	it	hi
 8081476:	6013      	strhi	r3, [r2, #0]
    if(!CO2_slope)
 8081478:	f00c ff90 	bl	808e39c <__aeabi_fcmpeq>
 808147c:	b118      	cbz	r0, 8081486 <_Z14readStoredVarsv+0x29a>
        CO2_slope = 1;
 808147e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081482:	f8c8 3000 	str.w	r3, [r8]
    if(!CO_slope)
 8081486:	2100      	movs	r1, #0
 8081488:	6838      	ldr	r0, [r7, #0]
 808148a:	f00c ff87 	bl	808e39c <__aeabi_fcmpeq>
 808148e:	b110      	cbz	r0, 8081496 <_Z14readStoredVarsv+0x2aa>
        CO_slope = 1;
 8081490:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081494:	603b      	str	r3, [r7, #0]
    if(!PM_1_slope)
 8081496:	2100      	movs	r1, #0
 8081498:	6830      	ldr	r0, [r6, #0]
 808149a:	f00c ff7f 	bl	808e39c <__aeabi_fcmpeq>
 808149e:	b110      	cbz	r0, 80814a6 <_Z14readStoredVarsv+0x2ba>
        PM_1_slope = 1;
 80814a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80814a4:	6033      	str	r3, [r6, #0]
    if(!PM_25_slope)
 80814a6:	2100      	movs	r1, #0
 80814a8:	6828      	ldr	r0, [r5, #0]
 80814aa:	f00c ff77 	bl	808e39c <__aeabi_fcmpeq>
 80814ae:	b110      	cbz	r0, 80814b6 <_Z14readStoredVarsv+0x2ca>
        PM_25_slope = 1;
 80814b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80814b4:	602b      	str	r3, [r5, #0]
    if(!PM_10_slope)
 80814b6:	2100      	movs	r1, #0
 80814b8:	6820      	ldr	r0, [r4, #0]
 80814ba:	f00c ff6f 	bl	808e39c <__aeabi_fcmpeq>
 80814be:	b110      	cbz	r0, 80814c6 <_Z14readStoredVarsv+0x2da>
        PM_10_slope = 1;
 80814c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80814c4:	6023      	str	r3, [r4, #0]
}
 80814c6:	b003      	add	sp, #12
 80814c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80814cc:	20000080 	.word	0x20000080
 80814d0:	42c80000 	.word	0x42c80000
 80814d4:	200002dc 	.word	0x200002dc
 80814d8:	20000308 	.word	0x20000308
 80814dc:	20000310 	.word	0x20000310
 80814e0:	20000300 	.word	0x20000300
 80814e4:	20000c98 	.word	0x20000c98
 80814e8:	200007e4 	.word	0x200007e4
 80814ec:	200007ec 	.word	0x200007ec
 80814f0:	200002d4 	.word	0x200002d4
 80814f4:	200002e8 	.word	0x200002e8
 80814f8:	2000030c 	.word	0x2000030c
 80814fc:	20000314 	.word	0x20000314
 8081500:	20000304 	.word	0x20000304
 8081504:	20000c9c 	.word	0x20000c9c
 8081508:	200007e8 	.word	0x200007e8
 808150c:	200007f0 	.word	0x200007f0
 8081510:	20000c74 	.word	0x20000c74
 8081514:	20000628 	.word	0x20000628
 8081518:	200007a0 	.word	0x200007a0
 808151c:	20000ca8 	.word	0x20000ca8
 8081520:	20000098 	.word	0x20000098
 8081524:	200000a0 	.word	0x200000a0
 8081528:	20000ca0 	.word	0x20000ca0
 808152c:	20000798 	.word	0x20000798
 8081530:	20000794 	.word	0x20000794
 8081534:	2000079c 	.word	0x2000079c
 8081538:	200007a4 	.word	0x200007a4
 808153c:	20000790 	.word	0x20000790
 8081540:	20000580 	.word	0x20000580
 8081544:	2000056c 	.word	0x2000056c
 8081548:	200006fc 	.word	0x200006fc
 808154c:	200002e0 	.word	0x200002e0
 8081550:	200006b0 	.word	0x200006b0
 8081554:	2000061c 	.word	0x2000061c
 8081558:	200002cc 	.word	0x200002cc
 808155c:	20000c70 	.word	0x20000c70

08081560 <_Z7echoGpsv>:
      air_quality_score = hum_score + gas_score;


}

void echoGps(){
 8081560:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while(!Serial.available()){
 8081562:	f00b fab9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081566:	6803      	ldr	r3, [r0, #0]
 8081568:	691b      	ldr	r3, [r3, #16]
 808156a:	4798      	blx	r3
 808156c:	b990      	cbnz	r0, 8081594 <_Z7echoGpsv+0x34>
        if(Serial5.available() > 0){
 808156e:	f7ff fca1 	bl	8080eb4 <_Z22__fetch_global_Serial5v>
 8081572:	6803      	ldr	r3, [r0, #0]
 8081574:	691b      	ldr	r3, [r3, #16]
 8081576:	4798      	blx	r3
 8081578:	2800      	cmp	r0, #0
 808157a:	ddf2      	ble.n	8081562 <_Z7echoGpsv+0x2>
            gps_byte = Serial5.read();
 808157c:	f7ff fc9a 	bl	8080eb4 <_Z22__fetch_global_Serial5v>
 8081580:	6803      	ldr	r3, [r0, #0]
 8081582:	695b      	ldr	r3, [r3, #20]
 8081584:	4798      	blx	r3
 8081586:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081588:	f00b faa6 	bl	808cad8 <_Z16_fetch_usbserialv>
 808158c:	b2e1      	uxtb	r1, r4
 808158e:	f00a f9d9 	bl	808b944 <_ZN5Print5printEc>
 8081592:	e7e6      	b.n	8081562 <_Z7echoGpsv+0x2>
        }

    }
}
 8081594:	bd10      	pop	{r4, pc}
	...

08081598 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
 8081598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808159c:	4606      	mov	r6, r0
 808159e:	460d      	mov	r5, r1
 80815a0:	2400      	movs	r4, #0
    char temp[3];

    for (byte i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
 80815a2:	4f0f      	ldr	r7, [pc, #60]	; (80815e0 <_Z11printPacketPhh+0x48>)
        Serial.print(temp);

        if (i != len - 1)
 80815a4:	f101 38ff 	add.w	r8, r1, #4294967295
    for (byte i = 0; i < len; i++)
 80815a8:	42ac      	cmp	r4, r5
 80815aa:	d012      	beq.n	80815d2 <_Z11printPacketPhh+0x3a>
        sprintf(temp, "%.2X", packet[i]);
 80815ac:	4639      	mov	r1, r7
 80815ae:	5d32      	ldrb	r2, [r6, r4]
 80815b0:	a801      	add	r0, sp, #4
 80815b2:	f009 fb3d 	bl	808ac30 <sprintf>
        Serial.print(temp);
 80815b6:	f00b fa8f 	bl	808cad8 <_Z16_fetch_usbserialv>
 80815ba:	a901      	add	r1, sp, #4
 80815bc:	f00a f9be 	bl	808b93c <_ZN5Print5printEPKc>
        if (i != len - 1)
 80815c0:	45a0      	cmp	r8, r4
 80815c2:	d004      	beq.n	80815ce <_Z11printPacketPhh+0x36>
        {
            Serial.print(' ');
 80815c4:	f00b fa88 	bl	808cad8 <_Z16_fetch_usbserialv>
 80815c8:	2120      	movs	r1, #32
 80815ca:	f00a f9bb 	bl	808b944 <_ZN5Print5printEc>
    for (byte i = 0; i < len; i++)
 80815ce:	3401      	adds	r4, #1
 80815d0:	e7ea      	b.n	80815a8 <_Z11printPacketPhh+0x10>
        }
    }

    Serial.println();
 80815d2:	f00b fa81 	bl	808cad8 <_Z16_fetch_usbserialv>
 80815d6:	f00a f9b8 	bl	808b94a <_ZN5Print7printlnEv>
}
 80815da:	b002      	add	sp, #8
 80815dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80815e0:	080905b7 	.word	0x080905b7

080815e4 <_Z10sendPacketPhh>:
{
 80815e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80815e6:	4604      	mov	r4, r0
 80815e8:	460d      	mov	r5, r1
 80815ea:	4606      	mov	r6, r0
 80815ec:	180f      	adds	r7, r1, r0
    for (byte i = 0; i < len; i++)
 80815ee:	42be      	cmp	r6, r7
 80815f0:	d007      	beq.n	8081602 <_Z10sendPacketPhh+0x1e>
        Serial5.write(packet[i]);
 80815f2:	f7ff fc5f 	bl	8080eb4 <_Z22__fetch_global_Serial5v>
 80815f6:	6803      	ldr	r3, [r0, #0]
 80815f8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80815fc:	689b      	ldr	r3, [r3, #8]
 80815fe:	4798      	blx	r3
    for (byte i = 0; i < len; i++)
 8081600:	e7f5      	b.n	80815ee <_Z10sendPacketPhh+0xa>
    printPacket(packet, len);
 8081602:	4629      	mov	r1, r5
 8081604:	4620      	mov	r0, r4
}
 8081606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    printPacket(packet, len);
 808160a:	f7ff bfc5 	b.w	8081598 <_Z11printPacketPhh>
	...

08081610 <_Z19enableContinuousGPSv>:
{
 8081610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 8081612:	4a07      	ldr	r2, [pc, #28]	; (8081630 <_Z19enableContinuousGPSv+0x20>)
 8081614:	ab01      	add	r3, sp, #4
 8081616:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 808161a:	6851      	ldr	r1, [r2, #4]
 808161c:	8912      	ldrh	r2, [r2, #8]
 808161e:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 8081620:	210a      	movs	r1, #10
 8081622:	a801      	add	r0, sp, #4
    byte packet[] = {
 8081624:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 8081626:	f7ff ffdd 	bl	80815e4 <_Z10sendPacketPhh>
}
 808162a:	b005      	add	sp, #20
 808162c:	f85d fb04 	ldr.w	pc, [sp], #4
 8081630:	0809293c 	.word	0x0809293c

08081634 <_Z17enableLowPowerGPSv>:
{
 8081634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 8081636:	4a07      	ldr	r2, [pc, #28]	; (8081654 <_Z17enableLowPowerGPSv+0x20>)
 8081638:	ab01      	add	r3, sp, #4
 808163a:	f852 0f18 	ldr.w	r0, [r2, #24]!
 808163e:	6851      	ldr	r1, [r2, #4]
 8081640:	8912      	ldrh	r2, [r2, #8]
 8081642:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 8081644:	210a      	movs	r1, #10
 8081646:	a801      	add	r0, sp, #4
    byte packet[] = {
 8081648:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 808164a:	f7ff ffcb 	bl	80815e4 <_Z10sendPacketPhh>
}
 808164e:	b005      	add	sp, #20
 8081650:	f85d fb04 	ldr.w	pc, [sp], #4
 8081654:	0809293c 	.word	0x0809293c

08081658 <_Z15readTemperaturev>:

float readTemperature(void){
 8081658:	b538      	push	{r3, r4, r5, lr}
 808165a:	4b2f      	ldr	r3, [pc, #188]	; (8081718 <_Z15readTemperaturev+0xc0>)
 808165c:	681d      	ldr	r5, [r3, #0]
    float temperature = 0;
    if(hih8120_enabled){
 808165e:	4b2f      	ldr	r3, [pc, #188]	; (808171c <_Z15readTemperaturev+0xc4>)
 8081660:	681b      	ldr	r3, [r3, #0]
 8081662:	b30b      	cbz	r3, 80816a8 <_Z15readTemperaturev+0x50>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 8081664:	4b2e      	ldr	r3, [pc, #184]	; (8081720 <_Z15readTemperaturev+0xc8>)
 8081666:	8958      	ldrh	r0, [r3, #10]
 8081668:	f00c fcac 	bl	808dfc4 <__aeabi_ui2f>
 808166c:	492d      	ldr	r1, [pc, #180]	; (8081724 <_Z15readTemperaturev+0xcc>)
 808166e:	f00c fdb5 	bl	808e1dc <__aeabi_fdiv>
 8081672:	492d      	ldr	r1, [pc, #180]	; (8081728 <_Z15readTemperaturev+0xd0>)
 8081674:	f00c fcfe 	bl	808e074 <__aeabi_fmul>
 8081678:	492c      	ldr	r1, [pc, #176]	; (808172c <_Z15readTemperaturev+0xd4>)
 808167a:	f00c fbf1 	bl	808de60 <__aeabi_fsub>
 808167e:	4604      	mov	r4, r0
        temperature = hih.temperature();
        if(debugging_enabled){
 8081680:	b125      	cbz	r5, 808168c <_Z15readTemperaturev+0x34>
            Serial.println("Temperature reading from HIH8120");
 8081682:	f00b fa29 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081686:	492a      	ldr	r1, [pc, #168]	; (8081730 <_Z15readTemperaturev+0xd8>)
 8081688:	f00a f96b 	bl	808b962 <_ZN5Print7printlnEPKc>
          }
        temperature = bme.temperature;
    }
    //temperature *= 100;

    temperature *= temp_slope;
 808168c:	4b29      	ldr	r3, [pc, #164]	; (8081734 <_Z15readTemperaturev+0xdc>)
 808168e:	4620      	mov	r0, r4
 8081690:	6819      	ldr	r1, [r3, #0]
 8081692:	f00c fcef 	bl	808e074 <__aeabi_fmul>
 8081696:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 8081698:	4b27      	ldr	r3, [pc, #156]	; (8081738 <_Z15readTemperaturev+0xe0>)
 808169a:	6818      	ldr	r0, [r3, #0]
 808169c:	f00c fc96 	bl	808dfcc <__aeabi_i2f>
 80816a0:	4621      	mov	r1, r4
 80816a2:	f00c fbdf 	bl	808de64 <__addsf3>

    return temperature;
    //temperature = temperature +
}
 80816a6:	bd38      	pop	{r3, r4, r5, pc}
    }else if(new_temperature_sensor_enabled){
 80816a8:	4b24      	ldr	r3, [pc, #144]	; (808173c <_Z15readTemperaturev+0xe4>)
 80816aa:	681b      	ldr	r3, [r3, #0]
 80816ac:	b313      	cbz	r3, 80816f4 <_Z15readTemperaturev+0x9c>
        if(debugging_enabled){
 80816ae:	b125      	cbz	r5, 80816ba <_Z15readTemperaturev+0x62>
            Serial.println("Temperature reading from TMP36");
 80816b0:	f00b fa12 	bl	808cad8 <_Z16_fetch_usbserialv>
 80816b4:	4922      	ldr	r1, [pc, #136]	; (8081740 <_Z15readTemperaturev+0xe8>)
 80816b6:	f00a f954 	bl	808b962 <_ZN5Print7printlnEPKc>
        temperature = analogRead(A1);
 80816ba:	200b      	movs	r0, #11
 80816bc:	f00b fdfd 	bl	808d2ba <analogRead>
 80816c0:	f00c fc84 	bl	808dfcc <__aeabi_i2f>
        temperature *= VOLTS_PER_UNIT;
 80816c4:	f00c f828 	bl	808d718 <__aeabi_f2d>
 80816c8:	a30f      	add	r3, pc, #60	; (adr r3, 8081708 <_Z15readTemperaturev+0xb0>)
 80816ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80816ce:	f00c f87b 	bl	808d7c8 <__aeabi_dmul>
 80816d2:	f00c fb71 	bl	808ddb8 <__aeabi_d2f>
        temperature -= TMP36_OFFSET;
 80816d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80816da:	f00c fbc1 	bl	808de60 <__aeabi_fsub>
        temperature /= TMP36_VPDC;
 80816de:	f00c f81b 	bl	808d718 <__aeabi_f2d>
 80816e2:	a30b      	add	r3, pc, #44	; (adr r3, 8081710 <_Z15readTemperaturev+0xb8>)
 80816e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80816e8:	f00c f998 	bl	808da1c <__aeabi_ddiv>
 80816ec:	f00c fb64 	bl	808ddb8 <__aeabi_d2f>
 80816f0:	4604      	mov	r4, r0
 80816f2:	e7cb      	b.n	808168c <_Z15readTemperaturev+0x34>
        if(debugging_enabled){
 80816f4:	b125      	cbz	r5, 8081700 <_Z15readTemperaturev+0xa8>
            Serial.println("Temperature reading from BME for Alphasense");
 80816f6:	f00b f9ef 	bl	808cad8 <_Z16_fetch_usbserialv>
 80816fa:	4912      	ldr	r1, [pc, #72]	; (8081744 <_Z15readTemperaturev+0xec>)
 80816fc:	f00a f931 	bl	808b962 <_ZN5Print7printlnEPKc>
        temperature = bme.temperature;
 8081700:	4b11      	ldr	r3, [pc, #68]	; (8081748 <_Z15readTemperaturev+0xf0>)
 8081702:	681c      	ldr	r4, [r3, #0]
 8081704:	e7c2      	b.n	808168c <_Z15readTemperaturev+0x34>
 8081706:	bf00      	nop
 8081708:	eb1c432d 	.word	0xeb1c432d
 808170c:	3f4a36e2 	.word	0x3f4a36e2
 8081710:	47ae147b 	.word	0x47ae147b
 8081714:	3f847ae1 	.word	0x3f847ae1
 8081718:	20000628 	.word	0x20000628
 808171c:	200006fc 	.word	0x200006fc
 8081720:	200006f0 	.word	0x200006f0
 8081724:	467ff800 	.word	0x467ff800
 8081728:	43250000 	.word	0x43250000
 808172c:	42200000 	.word	0x42200000
 8081730:	080905bc 	.word	0x080905bc
 8081734:	20000c98 	.word	0x20000c98
 8081738:	20000c9c 	.word	0x20000c9c
 808173c:	20000794 	.word	0x20000794
 8081740:	080905dd 	.word	0x080905dd
 8081744:	080905fc 	.word	0x080905fc
 8081748:	20000584 	.word	0x20000584

0808174c <_Z12readHumidityv>:

float readHumidity(void){
 808174c:	b538      	push	{r3, r4, r5, lr}
 808174e:	4b19      	ldr	r3, [pc, #100]	; (80817b4 <_Z12readHumidityv+0x68>)
 8081750:	681d      	ldr	r5, [r3, #0]
    float humidity;
    if(hih8120_enabled){
 8081752:	4b19      	ldr	r3, [pc, #100]	; (80817b8 <_Z12readHumidityv+0x6c>)
 8081754:	681b      	ldr	r3, [r3, #0]
 8081756:	b32b      	cbz	r3, 80817a4 <_Z12readHumidityv+0x58>
            return float(raw) / 16382;
 8081758:	4b18      	ldr	r3, [pc, #96]	; (80817bc <_Z12readHumidityv+0x70>)
 808175a:	8918      	ldrh	r0, [r3, #8]
 808175c:	f00c fc32 	bl	808dfc4 <__aeabi_ui2f>
 8081760:	4917      	ldr	r1, [pc, #92]	; (80817c0 <_Z12readHumidityv+0x74>)
 8081762:	f00c fd3b 	bl	808e1dc <__aeabi_fdiv>
        humidity = hih.humidity();
        humidity *= 100;
 8081766:	4917      	ldr	r1, [pc, #92]	; (80817c4 <_Z12readHumidityv+0x78>)
 8081768:	f00c fc84 	bl	808e074 <__aeabi_fmul>
 808176c:	4604      	mov	r4, r0
        if(debugging_enabled){
 808176e:	b125      	cbz	r5, 808177a <_Z12readHumidityv+0x2e>
            Serial.println("Humidity reading from HIH8120");
 8081770:	f00b f9b2 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081774:	4914      	ldr	r1, [pc, #80]	; (80817c8 <_Z12readHumidityv+0x7c>)
        }
    }else{
        humidity = bme.humidity;
        if(debugging_enabled){
            Serial.println("Humidity reading from BME");
 8081776:	f00a f8f4 	bl	808b962 <_ZN5Print7printlnEPKc>
        }
    }


    humidity *= rh_slope;
 808177a:	4b14      	ldr	r3, [pc, #80]	; (80817cc <_Z12readHumidityv+0x80>)
 808177c:	4620      	mov	r0, r4
 808177e:	6819      	ldr	r1, [r3, #0]
 8081780:	f00c fc78 	bl	808e074 <__aeabi_fmul>
 8081784:	4604      	mov	r4, r0
    humidity += rh_zero;       //user input zero offset
 8081786:	4b12      	ldr	r3, [pc, #72]	; (80817d0 <_Z12readHumidityv+0x84>)
 8081788:	6818      	ldr	r0, [r3, #0]
 808178a:	f00c fc1f 	bl	808dfcc <__aeabi_i2f>
 808178e:	4621      	mov	r1, r4
 8081790:	f00c fb68 	bl	808de64 <__addsf3>
    if(humidity > 100)
 8081794:	490b      	ldr	r1, [pc, #44]	; (80817c4 <_Z12readHumidityv+0x78>)
    humidity += rh_zero;       //user input zero offset
 8081796:	4604      	mov	r4, r0
    if(humidity > 100)
 8081798:	f00c fe28 	bl	808e3ec <__aeabi_fcmpgt>
 808179c:	b100      	cbz	r0, 80817a0 <_Z12readHumidityv+0x54>
        humidity = 100;
 808179e:	4c09      	ldr	r4, [pc, #36]	; (80817c4 <_Z12readHumidityv+0x78>)
    return humidity;
    //temperature = temperature +
}
 80817a0:	4620      	mov	r0, r4
 80817a2:	bd38      	pop	{r3, r4, r5, pc}
        humidity = bme.humidity;
 80817a4:	4b0b      	ldr	r3, [pc, #44]	; (80817d4 <_Z12readHumidityv+0x88>)
 80817a6:	689c      	ldr	r4, [r3, #8]
        if(debugging_enabled){
 80817a8:	2d00      	cmp	r5, #0
 80817aa:	d0e6      	beq.n	808177a <_Z12readHumidityv+0x2e>
            Serial.println("Humidity reading from BME");
 80817ac:	f00b f994 	bl	808cad8 <_Z16_fetch_usbserialv>
 80817b0:	4909      	ldr	r1, [pc, #36]	; (80817d8 <_Z12readHumidityv+0x8c>)
 80817b2:	e7e0      	b.n	8081776 <_Z12readHumidityv+0x2a>
 80817b4:	20000628 	.word	0x20000628
 80817b8:	200006fc 	.word	0x200006fc
 80817bc:	200006f0 	.word	0x200006f0
 80817c0:	467ff800 	.word	0x467ff800
 80817c4:	42c80000 	.word	0x42c80000
 80817c8:	08090628 	.word	0x08090628
 80817cc:	200007ec 	.word	0x200007ec
 80817d0:	200007f0 	.word	0x200007f0
 80817d4:	20000584 	.word	0x20000584
 80817d8:	08090646 	.word	0x08090646
 80817dc:	00000000 	.word	0x00000000

080817e0 <_Z12calculateAQIv>:
void calculateAQI(void){
 80817e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        gas_reference = bme.gas_resistance/100;
 80817e4:	4b6a      	ldr	r3, [pc, #424]	; (8081990 <_Z12calculateAQIv+0x1b0>)
 80817e6:	496b      	ldr	r1, [pc, #428]	; (8081994 <_Z12calculateAQIv+0x1b4>)
 80817e8:	68d8      	ldr	r0, [r3, #12]
 80817ea:	f00c fcf7 	bl	808e1dc <__aeabi_fdiv>
 80817ee:	4c6a      	ldr	r4, [pc, #424]	; (8081998 <_Z12calculateAQIv+0x1b8>)
 80817f0:	6020      	str	r0, [r4, #0]
      float current_humidity = readHumidity();
 80817f2:	f7ff ffab 	bl	808174c <_Z12readHumidityv>
      if(debugging_enabled){
 80817f6:	4b69      	ldr	r3, [pc, #420]	; (808199c <_Z12calculateAQIv+0x1bc>)
      float current_humidity = readHumidity();
 80817f8:	4605      	mov	r5, r0
      if(debugging_enabled){
 80817fa:	681a      	ldr	r2, [r3, #0]
 80817fc:	46a0      	mov	r8, r4
 80817fe:	469a      	mov	sl, r3
 8081800:	b19a      	cbz	r2, 808182a <_Z12calculateAQIv+0x4a>
          Serial.printf("gas resistance: %1.0f, humidity: %1.2f\n\r", gas_reference, current_humidity);
 8081802:	f00b f969 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081806:	4604      	mov	r4, r0
 8081808:	f8d8 0000 	ldr.w	r0, [r8]
 808180c:	f00b ff84 	bl	808d718 <__aeabi_f2d>
 8081810:	4606      	mov	r6, r0
 8081812:	4628      	mov	r0, r5
 8081814:	460f      	mov	r7, r1
 8081816:	f00b ff7f 	bl	808d718 <__aeabi_f2d>
 808181a:	4632      	mov	r2, r6
 808181c:	e9cd 0100 	strd	r0, r1, [sp]
 8081820:	463b      	mov	r3, r7
 8081822:	4620      	mov	r0, r4
 8081824:	495e      	ldr	r1, [pc, #376]	; (80819a0 <_Z12calculateAQIv+0x1c0>)
 8081826:	f7ff fa3b 	bl	8080ca0 <_ZN5Print6printfEPKcz>
      if (current_humidity >= 38 && current_humidity <= 42)
 808182a:	4628      	mov	r0, r5
 808182c:	495d      	ldr	r1, [pc, #372]	; (80819a4 <_Z12calculateAQIv+0x1c4>)
 808182e:	f00c fdd3 	bl	808e3d8 <__aeabi_fcmpge>
 8081832:	4c5d      	ldr	r4, [pc, #372]	; (80819a8 <_Z12calculateAQIv+0x1c8>)
 8081834:	2800      	cmp	r0, #0
 8081836:	d06f      	beq.n	8081918 <_Z12calculateAQIv+0x138>
 8081838:	4628      	mov	r0, r5
 808183a:	495c      	ldr	r1, [pc, #368]	; (80819ac <_Z12calculateAQIv+0x1cc>)
 808183c:	f00c fdc2 	bl	808e3c4 <__aeabi_fcmple>
 8081840:	2800      	cmp	r0, #0
 8081842:	d069      	beq.n	8081918 <_Z12calculateAQIv+0x138>
        hum_score = 0.25*100; // Humidity +/-5% around optimum
 8081844:	4b5a      	ldr	r3, [pc, #360]	; (80819b0 <_Z12calculateAQIv+0x1d0>)
 8081846:	6023      	str	r3, [r4, #0]
      if (gas_reference > gas_upper_limit) gas_reference = gas_upper_limit;
 8081848:	4b5a      	ldr	r3, [pc, #360]	; (80819b4 <_Z12calculateAQIv+0x1d4>)
 808184a:	681e      	ldr	r6, [r3, #0]
 808184c:	4630      	mov	r0, r6
 808184e:	f00c fbbd 	bl	808dfcc <__aeabi_i2f>
 8081852:	f8d8 1000 	ldr.w	r1, [r8]
 8081856:	4605      	mov	r5, r0
 8081858:	f00c fdaa 	bl	808e3b0 <__aeabi_fcmplt>
 808185c:	b108      	cbz	r0, 8081862 <_Z12calculateAQIv+0x82>
 808185e:	f8c8 5000 	str.w	r5, [r8]
      if (gas_reference < gas_lower_limit) gas_reference = gas_lower_limit;
 8081862:	4b55      	ldr	r3, [pc, #340]	; (80819b8 <_Z12calculateAQIv+0x1d8>)
 8081864:	f8d3 b000 	ldr.w	fp, [r3]
 8081868:	4658      	mov	r0, fp
 808186a:	f00c fbaf 	bl	808dfcc <__aeabi_i2f>
 808186e:	f8d8 1000 	ldr.w	r1, [r8]
 8081872:	4605      	mov	r5, r0
 8081874:	f00c fdba 	bl	808e3ec <__aeabi_fcmpgt>
 8081878:	b108      	cbz	r0, 808187e <_Z12calculateAQIv+0x9e>
 808187a:	f8c8 5000 	str.w	r5, [r8]
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 808187e:	eba6 000b 	sub.w	r0, r6, fp
 8081882:	f00b ff37 	bl	808d6f4 <__aeabi_i2d>
 8081886:	4602      	mov	r2, r0
 8081888:	460b      	mov	r3, r1
 808188a:	2000      	movs	r0, #0
 808188c:	494b      	ldr	r1, [pc, #300]	; (80819bc <_Z12calculateAQIv+0x1dc>)
 808188e:	f00c f8c5 	bl	808da1c <__aeabi_ddiv>
 8081892:	4606      	mov	r6, r0
 8081894:	460f      	mov	r7, r1
 8081896:	f8d8 0000 	ldr.w	r0, [r8]
 808189a:	f00b ff3d 	bl	808d718 <__aeabi_f2d>
 808189e:	4632      	mov	r2, r6
 80818a0:	463b      	mov	r3, r7
 80818a2:	f00b ff91 	bl	808d7c8 <__aeabi_dmul>
 80818a6:	4680      	mov	r8, r0
 80818a8:	4658      	mov	r0, fp
 80818aa:	4689      	mov	r9, r1
 80818ac:	f00b ff22 	bl	808d6f4 <__aeabi_i2d>
 80818b0:	4632      	mov	r2, r6
 80818b2:	463b      	mov	r3, r7
 80818b4:	f00b ff88 	bl	808d7c8 <__aeabi_dmul>
 80818b8:	4602      	mov	r2, r0
 80818ba:	460b      	mov	r3, r1
 80818bc:	4640      	mov	r0, r8
 80818be:	4649      	mov	r1, r9
 80818c0:	f00b fdca 	bl	808d458 <__aeabi_dsub>
 80818c4:	4b3e      	ldr	r3, [pc, #248]	; (80819c0 <_Z12calculateAQIv+0x1e0>)
 80818c6:	2200      	movs	r2, #0
 80818c8:	f00b ff7e 	bl	808d7c8 <__aeabi_dmul>
 80818cc:	f00c fa74 	bl	808ddb8 <__aeabi_d2f>
 80818d0:	4d3c      	ldr	r5, [pc, #240]	; (80819c4 <_Z12calculateAQIv+0x1e4>)
      if(debugging_enabled){
 80818d2:	f8da 3000 	ldr.w	r3, [sl]
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 80818d6:	6028      	str	r0, [r5, #0]
      if(debugging_enabled){
 80818d8:	b1ab      	cbz	r3, 8081906 <_Z12calculateAQIv+0x126>
        Serial.print("Gas score: ");
 80818da:	f00b f8fd 	bl	808cad8 <_Z16_fetch_usbserialv>
 80818de:	493a      	ldr	r1, [pc, #232]	; (80819c8 <_Z12calculateAQIv+0x1e8>)
 80818e0:	f00a f82c 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(gas_score);
 80818e4:	f00b f8f8 	bl	808cad8 <_Z16_fetch_usbserialv>
 80818e8:	2202      	movs	r2, #2
 80818ea:	6829      	ldr	r1, [r5, #0]
 80818ec:	f00a f938 	bl	808bb60 <_ZN5Print7printlnEfi>
        Serial.print("Humidity score: ");
 80818f0:	f00b f8f2 	bl	808cad8 <_Z16_fetch_usbserialv>
 80818f4:	4935      	ldr	r1, [pc, #212]	; (80819cc <_Z12calculateAQIv+0x1ec>)
 80818f6:	f00a f821 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(hum_score);
 80818fa:	f00b f8ed 	bl	808cad8 <_Z16_fetch_usbserialv>
 80818fe:	2202      	movs	r2, #2
 8081900:	6821      	ldr	r1, [r4, #0]
 8081902:	f00a f92d 	bl	808bb60 <_ZN5Print7printlnEfi>
      air_quality_score = hum_score + gas_score;
 8081906:	6829      	ldr	r1, [r5, #0]
 8081908:	6820      	ldr	r0, [r4, #0]
 808190a:	f00c faab 	bl	808de64 <__addsf3>
 808190e:	4b30      	ldr	r3, [pc, #192]	; (80819d0 <_Z12calculateAQIv+0x1f0>)
 8081910:	6018      	str	r0, [r3, #0]
}
 8081912:	b003      	add	sp, #12
 8081914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (current_humidity < 38)
 8081918:	4628      	mov	r0, r5
 808191a:	f00b fefd 	bl	808d718 <__aeabi_f2d>
 808191e:	4b2d      	ldr	r3, [pc, #180]	; (80819d4 <_Z12calculateAQIv+0x1f4>)
 8081920:	4606      	mov	r6, r0
 8081922:	460f      	mov	r7, r1
 8081924:	4628      	mov	r0, r5
 8081926:	491f      	ldr	r1, [pc, #124]	; (80819a4 <_Z12calculateAQIv+0x1c4>)
 8081928:	f8d3 9000 	ldr.w	r9, [r3]
 808192c:	f00c fd40 	bl	808e3b0 <__aeabi_fcmplt>
 8081930:	b1a0      	cbz	r0, 808195c <_Z12calculateAQIv+0x17c>
          hum_score = 0.25/hum_reference*current_humidity*100;
 8081932:	4648      	mov	r0, r9
 8081934:	f00b fef0 	bl	808d718 <__aeabi_f2d>
 8081938:	4602      	mov	r2, r0
 808193a:	460b      	mov	r3, r1
 808193c:	2000      	movs	r0, #0
 808193e:	4926      	ldr	r1, [pc, #152]	; (80819d8 <_Z12calculateAQIv+0x1f8>)
 8081940:	f00c f86c 	bl	808da1c <__aeabi_ddiv>
 8081944:	4632      	mov	r2, r6
 8081946:	463b      	mov	r3, r7
 8081948:	f00b ff3e 	bl	808d7c8 <__aeabi_dmul>
          hum_score = ((-0.25/(100-hum_reference)*current_humidity)+0.416666)*100;
 808194c:	2200      	movs	r2, #0
 808194e:	4b1c      	ldr	r3, [pc, #112]	; (80819c0 <_Z12calculateAQIv+0x1e0>)
 8081950:	f00b ff3a 	bl	808d7c8 <__aeabi_dmul>
 8081954:	f00c fa30 	bl	808ddb8 <__aeabi_d2f>
 8081958:	6020      	str	r0, [r4, #0]
 808195a:	e775      	b.n	8081848 <_Z12calculateAQIv+0x68>
 808195c:	4649      	mov	r1, r9
 808195e:	480d      	ldr	r0, [pc, #52]	; (8081994 <_Z12calculateAQIv+0x1b4>)
 8081960:	f00c fa7e 	bl	808de60 <__aeabi_fsub>
 8081964:	f00b fed8 	bl	808d718 <__aeabi_f2d>
 8081968:	4602      	mov	r2, r0
 808196a:	460b      	mov	r3, r1
 808196c:	2000      	movs	r0, #0
 808196e:	491b      	ldr	r1, [pc, #108]	; (80819dc <_Z12calculateAQIv+0x1fc>)
 8081970:	f00c f854 	bl	808da1c <__aeabi_ddiv>
 8081974:	4632      	mov	r2, r6
 8081976:	463b      	mov	r3, r7
 8081978:	f00b ff26 	bl	808d7c8 <__aeabi_dmul>
 808197c:	a302      	add	r3, pc, #8	; (adr r3, 8081988 <_Z12calculateAQIv+0x1a8>)
 808197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081982:	f00b fd6b 	bl	808d45c <__adddf3>
 8081986:	e7e1      	b.n	808194c <_Z12calculateAQIv+0x16c>
 8081988:	ded6ba8c 	.word	0xded6ba8c
 808198c:	3fdaaaa7 	.word	0x3fdaaaa7
 8081990:	20000584 	.word	0x20000584
 8081994:	42c80000 	.word	0x42c80000
 8081998:	2000009c 	.word	0x2000009c
 808199c:	20000628 	.word	0x20000628
 80819a0:	08090660 	.word	0x08090660
 80819a4:	42180000 	.word	0x42180000
 80819a8:	20000700 	.word	0x20000700
 80819ac:	42280000 	.word	0x42280000
 80819b0:	41c80000 	.word	0x41c80000
 80819b4:	200000a0 	.word	0x200000a0
 80819b8:	20000098 	.word	0x20000098
 80819bc:	3fe80000 	.word	0x3fe80000
 80819c0:	40590000 	.word	0x40590000
 80819c4:	200006ac 	.word	0x200006ac
 80819c8:	08090689 	.word	0x08090689
 80819cc:	08090695 	.word	0x08090695
 80819d0:	2000057c 	.word	0x2000057c
 80819d4:	200000c4 	.word	0x200000c4
 80819d8:	3fd00000 	.word	0x3fd00000
 80819dc:	bfd00000 	.word	0xbfd00000

080819e0 <_Z9readSoundv>:
//read sound from
double readSound(void){
 80819e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80819e2:	260a      	movs	r6, #10
    int val;
    double sum = 0;
 80819e4:	2400      	movs	r4, #0
 80819e6:	2500      	movs	r5, #0
    float average = 0;
    for(int i=0; i< 10;i++){
        val = analogRead(sound_input);
 80819e8:	4f11      	ldr	r7, [pc, #68]	; (8081a30 <_Z9readSoundv+0x50>)
 80819ea:	8838      	ldrh	r0, [r7, #0]
 80819ec:	f00b fc65 	bl	808d2ba <analogRead>
        sum += val;
 80819f0:	f00b fe80 	bl	808d6f4 <__aeabi_i2d>
 80819f4:	4602      	mov	r2, r0
 80819f6:	460b      	mov	r3, r1
 80819f8:	4620      	mov	r0, r4
 80819fa:	4629      	mov	r1, r5
 80819fc:	f00b fd2e 	bl	808d45c <__adddf3>
    for(int i=0; i< 10;i++){
 8081a00:	3e01      	subs	r6, #1
        sum += val;
 8081a02:	4604      	mov	r4, r0
 8081a04:	460d      	mov	r5, r1
    for(int i=0; i< 10;i++){
 8081a06:	d1f0      	bne.n	80819ea <_Z9readSoundv+0xa>
        //Serial.print("Sound level: ");
        //Serial.println(val);
    }
    sum = sum/10;
 8081a08:	2200      	movs	r2, #0
 8081a0a:	4b0a      	ldr	r3, [pc, #40]	; (8081a34 <_Z9readSoundv+0x54>)
 8081a0c:	f00c f806 	bl	808da1c <__aeabi_ddiv>
    sum /= 4095;
 8081a10:	a305      	add	r3, pc, #20	; (adr r3, 8081a28 <_Z9readSoundv+0x48>)
 8081a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081a16:	f00c f801 	bl	808da1c <__aeabi_ddiv>
    sum *= 100;
 8081a1a:	2200      	movs	r2, #0
 8081a1c:	4b06      	ldr	r3, [pc, #24]	; (8081a38 <_Z9readSoundv+0x58>)
 8081a1e:	f00b fed3 	bl	808d7c8 <__aeabi_dmul>
    return sum;
}
 8081a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8081a24:	f3af 8000 	nop.w
 8081a28:	00000000 	.word	0x00000000
 8081a2c:	40affe00 	.word	0x40affe00
 8081a30:	200000dc 	.word	0x200000dc
 8081a34:	40240000 	.word	0x40240000
 8081a38:	40590000 	.word	0x40590000

08081a3c <_Z7readCO2v>:
    CO_float += float_offset;

    return CO_float;
}

float readCO2(void){
 8081a3c:	b538      	push	{r3, r4, r5, lr}
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
 8081a3e:	4b14      	ldr	r3, [pc, #80]	; (8081a90 <_Z7readCO2v+0x54>)
 8081a40:	681b      	ldr	r3, [r3, #0]
 8081a42:	b11b      	cbz	r3, 8081a4c <_Z7readCO2v+0x10>
        t6713.readStatus(1);
 8081a44:	2101      	movs	r1, #1
 8081a46:	4813      	ldr	r0, [pc, #76]	; (8081a94 <_Z7readCO2v+0x58>)
 8081a48:	f005 feb4 	bl	80877b4 <_ZN13Telaire_T671310readStatusEi>
    }
    CO2_float = t6713.readPPM();
 8081a4c:	4811      	ldr	r0, [pc, #68]	; (8081a94 <_Z7readCO2v+0x58>)
 8081a4e:	f005 fdd7 	bl	8087600 <_ZN13Telaire_T67137readPPMEv>
 8081a52:	f00c fabb 	bl	808dfcc <__aeabi_i2f>
 8081a56:	4c10      	ldr	r4, [pc, #64]	; (8081a98 <_Z7readCO2v+0x5c>)

    if(CO2_float == 0){
 8081a58:	2100      	movs	r1, #0
    CO2_float = t6713.readPPM();
 8081a5a:	6020      	str	r0, [r4, #0]
 8081a5c:	4605      	mov	r5, r0
    if(CO2_float == 0){
 8081a5e:	f00c fc9d 	bl	808e39c <__aeabi_fcmpeq>
 8081a62:	4b0e      	ldr	r3, [pc, #56]	; (8081a9c <_Z7readCO2v+0x60>)
 8081a64:	b188      	cbz	r0, 8081a8a <_Z7readCO2v+0x4e>
        CO2_float = CO2_float_previous;
 8081a66:	681b      	ldr	r3, [r3, #0]
 8081a68:	6023      	str	r3, [r4, #0]
    }else{
        CO2_float_previous = CO2_float;
    }

    CO2_float *= CO2_slope;
 8081a6a:	4b0d      	ldr	r3, [pc, #52]	; (8081aa0 <_Z7readCO2v+0x64>)
 8081a6c:	6820      	ldr	r0, [r4, #0]
 8081a6e:	6819      	ldr	r1, [r3, #0]
 8081a70:	f00c fb00 	bl	808e074 <__aeabi_fmul>
    CO2_float += CO2_zero;
 8081a74:	4b0b      	ldr	r3, [pc, #44]	; (8081aa4 <_Z7readCO2v+0x68>)
    CO2_float *= CO2_slope;
 8081a76:	4605      	mov	r5, r0
    CO2_float += CO2_zero;
 8081a78:	6818      	ldr	r0, [r3, #0]
 8081a7a:	f00c faa7 	bl	808dfcc <__aeabi_i2f>
 8081a7e:	4601      	mov	r1, r0
 8081a80:	4628      	mov	r0, r5
 8081a82:	f00c f9ef 	bl	808de64 <__addsf3>
 8081a86:	6020      	str	r0, [r4, #0]
    
    return CO2_float;
}
 8081a88:	bd38      	pop	{r3, r4, r5, pc}
        CO2_float_previous = CO2_float;
 8081a8a:	601d      	str	r5, [r3, #0]
 8081a8c:	e7ed      	b.n	8081a6a <_Z7readCO2v+0x2e>
 8081a8e:	bf00      	nop
 8081a90:	20000628 	.word	0x20000628
 8081a94:	20000c92 	.word	0x20000c92
 8081a98:	200002c4 	.word	0x200002c4
 8081a9c:	200002c8 	.word	0x200002c8
 8081aa0:	200002cc 	.word	0x200002cc
 8081aa4:	200002d4 	.word	0x200002d4

08081aa8 <_Z10readAlpha2v>:

      }
      return alpha1_ppmraw;
}

float readAlpha2(void){
 8081aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
    if(debugging_enabled){
 8081aac:	4c8e      	ldr	r4, [pc, #568]	; (8081ce8 <_Z10readAlpha2v+0x240>)
float readAlpha2(void){
 8081aae:	b089      	sub	sp, #36	; 0x24
    String alpha2_ppmRounded;
 8081ab0:	4668      	mov	r0, sp
 8081ab2:	498e      	ldr	r1, [pc, #568]	; (8081cec <_Z10readAlpha2v+0x244>)
 8081ab4:	f009 fd30 	bl	808b518 <_ZN6StringC1EPKc>
    if(debugging_enabled){
 8081ab8:	6823      	ldr	r3, [r4, #0]
 8081aba:	b123      	cbz	r3, 8081ac6 <_Z10readAlpha2v+0x1e>
        Serial.println("Start of alpha 2 read");
 8081abc:	f00b f80c 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081ac0:	498b      	ldr	r1, [pc, #556]	; (8081cf0 <_Z10readAlpha2v+0x248>)
 8081ac2:	f009 ff4e 	bl	808b962 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 8081ac6:	4f8b      	ldr	r7, [pc, #556]	; (8081cf4 <_Z10readAlpha2v+0x24c>)
 8081ac8:	2100      	movs	r1, #0
 8081aca:	8838      	ldrh	r0, [r7, #0]
 8081acc:	f00b fbc9 	bl	808d262 <digitalWrite>

    if(Wire.requestFrom(0x4A,1) == 0){
 8081ad0:	f00b fc5c 	bl	808d38c <_Z19__fetch_global_Wirev>
 8081ad4:	2201      	movs	r2, #1
 8081ad6:	214a      	movs	r1, #74	; 0x4a
 8081ad8:	f00b f9f1 	bl	808cebe <_ZN7TwoWire11requestFromEhj>
 8081adc:	bb38      	cbnz	r0, 8081b2e <_Z10readAlpha2v+0x86>
        Serial.println("Couldn't communicate with LMP91000 2");
 8081ade:	f00a fffb 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081ae2:	4985      	ldr	r1, [pc, #532]	; (8081cf8 <_Z10readAlpha2v+0x250>)
 8081ae4:	f009 ff3d 	bl	808b962 <_ZN5Print7printlnEPKc>
          Serial.println(volt_half_Vref/1000);

        }
    }

    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 8081ae8:	2100      	movs	r1, #0
 8081aea:	4884      	ldr	r0, [pc, #528]	; (8081cfc <_Z10readAlpha2v+0x254>)
 8081aec:	f005 fadd 	bl	80870aa <_ZN8LMP910004readEh>
 8081af0:	b930      	cbnz	r0, 8081b00 <_Z10readAlpha2v+0x58>
        if(debugging_enabled)
 8081af2:	6823      	ldr	r3, [r4, #0]
 8081af4:	b123      	cbz	r3, 8081b00 <_Z10readAlpha2v+0x58>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 8081af6:	f00a ffef 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081afa:	4981      	ldr	r1, [pc, #516]	; (8081d00 <_Z10readAlpha2v+0x258>)
 8081afc:	f009 ff31 	bl	808b962 <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 8081b00:	f00b fc44 	bl	808d38c <_Z19__fetch_global_Wirev>
 8081b04:	2201      	movs	r2, #1
 8081b06:	214a      	movs	r1, #74	; 0x4a
 8081b08:	f00b f9d9 	bl	808cebe <_ZN7TwoWire11requestFromEhj>
 8081b0c:	2800      	cmp	r0, #0
 8081b0e:	d138      	bne.n	8081b82 <_Z10readAlpha2v+0xda>
        alpha2_ppmRounded = "-99";
 8081b10:	4668      	mov	r0, sp
 8081b12:	497c      	ldr	r1, [pc, #496]	; (8081d04 <_Z10readAlpha2v+0x25c>)
 8081b14:	f009 fd52 	bl	808b5bc <_ZN6StringaSEPKc>
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
      }

      digitalWrite(lmp91000_2_en, HIGH);  //disable
 8081b18:	2101      	movs	r1, #1
 8081b1a:	8838      	ldrh	r0, [r7, #0]
 8081b1c:	f00b fba1 	bl	808d262 <digitalWrite>
    String alpha2_ppmRounded;
 8081b20:	4668      	mov	r0, sp
 8081b22:	f009 fcaf 	bl	808b484 <_ZN6StringD1Ev>

      Serial.print("Volt1 Aux:");
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}
 8081b26:	4628      	mov	r0, r5
 8081b28:	b009      	add	sp, #36	; 0x24
 8081b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 8081b2e:	2103      	movs	r1, #3
 8081b30:	4875      	ldr	r0, [pc, #468]	; (8081d08 <_Z10readAlpha2v+0x260>)
 8081b32:	f005 fc01 	bl	8087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 8081b36:	f00c fa49 	bl	808dfcc <__aeabi_i2f>
 8081b3a:	4b74      	ldr	r3, [pc, #464]	; (8081d0c <_Z10readAlpha2v+0x264>)
 8081b3c:	6819      	ldr	r1, [r3, #0]
 8081b3e:	f00c fa99 	bl	808e074 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081b42:	4973      	ldr	r1, [pc, #460]	; (8081d10 <_Z10readAlpha2v+0x268>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081b44:	4680      	mov	r8, r0
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081b46:	f00c fb49 	bl	808e1dc <__aeabi_fdiv>
 8081b4a:	4681      	mov	r9, r0
 8081b4c:	f00b fde4 	bl	808d718 <__aeabi_f2d>
 8081b50:	2200      	movs	r2, #0
 8081b52:	4b70      	ldr	r3, [pc, #448]	; (8081d14 <_Z10readAlpha2v+0x26c>)
 8081b54:	f00b fc80 	bl	808d458 <__aeabi_dsub>
 8081b58:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
 8081b5c:	2200      	movs	r2, #0
 8081b5e:	4659      	mov	r1, fp
 8081b60:	4b6d      	ldr	r3, [pc, #436]	; (8081d18 <_Z10readAlpha2v+0x270>)
 8081b62:	f00c f8c1 	bl	808dce8 <__aeabi_dcmpgt>
 8081b66:	2800      	cmp	r0, #0
 8081b68:	d0be      	beq.n	8081ae8 <_Z10readAlpha2v+0x40>
          Serial.print("half vref2 ads1");
 8081b6a:	f00a ffb5 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081b6e:	496b      	ldr	r1, [pc, #428]	; (8081d1c <_Z10readAlpha2v+0x274>)
 8081b70:	f009 fee4 	bl	808b93c <_ZN5Print5printEPKc>
          Serial.println(volt_half_Vref/1000);
 8081b74:	f00a ffb0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081b78:	2202      	movs	r2, #2
 8081b7a:	4649      	mov	r1, r9
 8081b7c:	f009 fff0 	bl	808bb60 <_ZN5Print7printlnEfi>
 8081b80:	e7b2      	b.n	8081ae8 <_Z10readAlpha2v+0x40>
    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 8081b82:	2100      	movs	r1, #0
 8081b84:	485d      	ldr	r0, [pc, #372]	; (8081cfc <_Z10readAlpha2v+0x254>)
 8081b86:	f005 fa90 	bl	80870aa <_ZN8LMP910004readEh>
 8081b8a:	2800      	cmp	r0, #0
 8081b8c:	d0c0      	beq.n	8081b10 <_Z10readAlpha2v+0x68>
 8081b8e:	4960      	ldr	r1, [pc, #384]	; (8081d10 <_Z10readAlpha2v+0x268>)
 8081b90:	4640      	mov	r0, r8
 8081b92:	f00c fb23 	bl	808e1dc <__aeabi_fdiv>
 8081b96:	f00b fdbf 	bl	808d718 <__aeabi_f2d>
 8081b9a:	2200      	movs	r2, #0
 8081b9c:	4b5d      	ldr	r3, [pc, #372]	; (8081d14 <_Z10readAlpha2v+0x26c>)
 8081b9e:	f00b fc5b 	bl	808d458 <__aeabi_dsub>
 8081ba2:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8081ba6:	2200      	movs	r2, #0
 8081ba8:	4649      	mov	r1, r9
 8081baa:	4b5b      	ldr	r3, [pc, #364]	; (8081d18 <_Z10readAlpha2v+0x270>)
 8081bac:	f00c f89c 	bl	808dce8 <__aeabi_dcmpgt>
 8081bb0:	4604      	mov	r4, r0
 8081bb2:	2800      	cmp	r0, #0
 8081bb4:	d1ac      	bne.n	8081b10 <_Z10readAlpha2v+0x68>
 8081bb6:	f04f 080a 	mov.w	r8, #10
 8081bba:	4681      	mov	r9, r0
 8081bbc:	4682      	mov	sl, r0
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081bbe:	4d52      	ldr	r5, [pc, #328]	; (8081d08 <_Z10readAlpha2v+0x260>)
 8081bc0:	2100      	movs	r1, #0
 8081bc2:	4628      	mov	r0, r5
 8081bc4:	f005 fbb8 	bl	8087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081bc8:	2101      	movs	r1, #1
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081bca:	4482      	add	sl, r0
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081bcc:	4628      	mov	r0, r5
 8081bce:	f005 fbb3 	bl	8087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081bd2:	2102      	movs	r1, #2
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081bd4:	4481      	add	r9, r0
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081bd6:	4628      	mov	r0, r5
 8081bd8:	f005 fbae 	bl	8087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081bdc:	2103      	movs	r1, #3
 8081bde:	4628      	mov	r0, r5
 8081be0:	f005 fbaa 	bl	8087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081be4:	f1b8 0801 	subs.w	r8, r8, #1
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081be8:	4404      	add	r4, r0
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081bea:	d1e9      	bne.n	8081bc0 <_Z10readAlpha2v+0x118>
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8081bec:	f04f 0b0a 	mov.w	fp, #10
        volt0_gas = A0_gas * ads_bitmv;
 8081bf0:	4b46      	ldr	r3, [pc, #280]	; (8081d0c <_Z10readAlpha2v+0x264>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081bf2:	fbb4 f0fb 	udiv	r0, r4, fp
        volt0_gas = A0_gas * ads_bitmv;
 8081bf6:	f8d3 8000 	ldr.w	r8, [r3]
        volt_half_Vref = half_Vref * ads_bitmv;
 8081bfa:	f00c f9e7 	bl	808dfcc <__aeabi_i2f>
 8081bfe:	4641      	mov	r1, r8
 8081c00:	f00c fa38 	bl	808e074 <__aeabi_fmul>
 8081c04:	4604      	mov	r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 8081c06:	fbba f0fb 	udiv	r0, sl, fp
 8081c0a:	f00c f9df 	bl	808dfcc <__aeabi_i2f>
 8081c0e:	4641      	mov	r1, r8
 8081c10:	f00c fa30 	bl	808e074 <__aeabi_fmul>
 8081c14:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8081c16:	4620      	mov	r0, r4
 8081c18:	f00c f922 	bl	808de60 <__aeabi_fsub>
 8081c1c:	4940      	ldr	r1, [pc, #256]	; (8081d20 <_Z10readAlpha2v+0x278>)
 8081c1e:	f00c fadd 	bl	808e1dc <__aeabi_fdiv>
 8081c22:	4605      	mov	r5, r0
        volt1_aux = A1_aux * ads_bitmv;
 8081c24:	fbb9 f0fb 	udiv	r0, r9, fp
 8081c28:	f00c f9d0 	bl	808dfcc <__aeabi_i2f>
 8081c2c:	4641      	mov	r1, r8
 8081c2e:	f00c fa21 	bl	808e074 <__aeabi_fmul>
 8081c32:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8081c34:	4620      	mov	r0, r4
 8081c36:	f00c f913 	bl	808de60 <__aeabi_fsub>
 8081c3a:	493a      	ldr	r1, [pc, #232]	; (8081d24 <_Z10readAlpha2v+0x27c>)
 8081c3c:	f00c face 	bl	808e1dc <__aeabi_fdiv>
 8081c40:	4604      	mov	r4, r0
        if(readTemperature() <= 15){
 8081c42:	f7ff fd09 	bl	8081658 <_Z15readTemperaturev>
 8081c46:	4938      	ldr	r1, [pc, #224]	; (8081d28 <_Z10readAlpha2v+0x280>)
 8081c48:	f00c fbbc 	bl	808e3c4 <__aeabi_fcmple>
 8081c4c:	b1e0      	cbz	r0, 8081c88 <_Z10readAlpha2v+0x1e0>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8081c4e:	4621      	mov	r1, r4
 8081c50:	4628      	mov	r0, r5
 8081c52:	f00c f905 	bl	808de60 <__aeabi_fsub>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8081c56:	4606      	mov	r6, r0
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081c58:	4630      	mov	r0, r6
 8081c5a:	f00b fd5d 	bl	808d718 <__aeabi_f2d>
 8081c5e:	a31e      	add	r3, pc, #120	; (adr r3, 8081cd8 <_Z10readAlpha2v+0x230>)
 8081c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081c64:	f00b feda 	bl	808da1c <__aeabi_ddiv>
 8081c68:	f00c f8a6 	bl	808ddb8 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081c6c:	2202      	movs	r2, #2
 8081c6e:	4601      	mov	r1, r0
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081c70:	4605      	mov	r5, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081c72:	a804      	add	r0, sp, #16
 8081c74:	f009 fcea 	bl	808b64c <_ZN6StringC1Efi>
 8081c78:	4668      	mov	r0, sp
 8081c7a:	a904      	add	r1, sp, #16
 8081c7c:	f009 fc96 	bl	808b5ac <_ZN6StringaSEOS_>
 8081c80:	a804      	add	r0, sp, #16
 8081c82:	f009 fbff 	bl	808b484 <_ZN6StringD1Ev>
 8081c86:	e747      	b.n	8081b18 <_Z10readAlpha2v+0x70>
        else if(readTemperature() <= 25){
 8081c88:	f7ff fce6 	bl	8081658 <_Z15readTemperaturev>
 8081c8c:	4927      	ldr	r1, [pc, #156]	; (8081d2c <_Z10readAlpha2v+0x284>)
 8081c8e:	f00c fb99 	bl	808e3c4 <__aeabi_fcmple>
 8081c92:	b120      	cbz	r0, 8081c9e <_Z10readAlpha2v+0x1f6>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8081c94:	4621      	mov	r1, r4
 8081c96:	4628      	mov	r0, r5
 8081c98:	f00c f8e4 	bl	808de64 <__addsf3>
 8081c9c:	e7db      	b.n	8081c56 <_Z10readAlpha2v+0x1ae>
        else if(readTemperature() > 25){
 8081c9e:	f7ff fcdb 	bl	8081658 <_Z15readTemperaturev>
 8081ca2:	4922      	ldr	r1, [pc, #136]	; (8081d2c <_Z10readAlpha2v+0x284>)
 8081ca4:	f00c fba2 	bl	808e3ec <__aeabi_fcmpgt>
 8081ca8:	2800      	cmp	r0, #0
 8081caa:	d0d5      	beq.n	8081c58 <_Z10readAlpha2v+0x1b0>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8081cac:	4620      	mov	r0, r4
 8081cae:	f00b fd33 	bl	808d718 <__aeabi_f2d>
 8081cb2:	a30b      	add	r3, pc, #44	; (adr r3, 8081ce0 <_Z10readAlpha2v+0x238>)
 8081cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081cb8:	f00b fd86 	bl	808d7c8 <__aeabi_dmul>
 8081cbc:	4680      	mov	r8, r0
 8081cbe:	4628      	mov	r0, r5
 8081cc0:	4689      	mov	r9, r1
 8081cc2:	f00b fd29 	bl	808d718 <__aeabi_f2d>
 8081cc6:	4602      	mov	r2, r0
 8081cc8:	460b      	mov	r3, r1
 8081cca:	4640      	mov	r0, r8
 8081ccc:	4649      	mov	r1, r9
 8081cce:	f00b fbc5 	bl	808d45c <__adddf3>
 8081cd2:	f00c f871 	bl	808ddb8 <__aeabi_d2f>
 8081cd6:	e7be      	b.n	8081c56 <_Z10readAlpha2v+0x1ae>
 8081cd8:	d4fdf3b6 	.word	0xd4fdf3b6
 8081cdc:	3fd6e978 	.word	0x3fd6e978
 8081ce0:	851eb852 	.word	0x851eb852
 8081ce4:	3fe851eb 	.word	0x3fe851eb
 8081ce8:	20000628 	.word	0x20000628
 8081cec:	08092ce2 	.word	0x08092ce2
 8081cf0:	080906a6 	.word	0x080906a6
 8081cf4:	200000cc 	.word	0x200000cc
 8081cf8:	080906bc 	.word	0x080906bc
 8081cfc:	20000705 	.word	0x20000705
 8081d00:	080906f1 	.word	0x080906f1
 8081d04:	08090718 	.word	0x08090718
 8081d08:	20000576 	.word	0x20000576
 8081d0c:	20000084 	.word	0x20000084
 8081d10:	447a0000 	.word	0x447a0000
 8081d14:	3ff40000 	.word	0x3ff40000
 8081d18:	3fe00000 	.word	0x3fe00000
 8081d1c:	080906e1 	.word	0x080906e1
 8081d20:	c2f00000 	.word	0xc2f00000
 8081d24:	c3160000 	.word	0xc3160000
 8081d28:	41700000 	.word	0x41700000
 8081d2c:	41c80000 	.word	0x41c80000

08081d30 <_Z12writeLogFile6String>:
    }else{
        O3_float = getEspOzoneData();
    }
}

void writeLogFile(String data){
 8081d30:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 8081d32:	491e      	ldr	r1, [pc, #120]	; (8081dac <_Z12writeLogFile6String+0x7c>)
 8081d34:	4604      	mov	r4, r0
 8081d36:	b085      	sub	sp, #20
 8081d38:	2302      	movs	r3, #2
 8081d3a:	220c      	movs	r2, #12
 8081d3c:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8081d40:	f7ff f8f4 	bl	8080f2c <_ZN9SdFatBase5beginEP9SdSpiBasehh>
  if (sd.begin(CS)){
 8081d44:	b360      	cbz	r0, 8081da0 <_Z12writeLogFile6String+0x70>
      Serial.println("Writing data to log file.");
 8081d46:	f00a fec7 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081d4a:	4919      	ldr	r1, [pc, #100]	; (8081db0 <_Z12writeLogFile6String+0x80>)
 8081d4c:	f009 fe09 	bl	808b962 <_ZN5Print7printlnEPKc>
    return open(m_cwd, path, oflag);
 8081d50:	4a18      	ldr	r2, [pc, #96]	; (8081db4 <_Z12writeLogFile6String+0x84>)
 8081d52:	4919      	ldr	r1, [pc, #100]	; (8081db8 <_Z12writeLogFile6String+0x88>)
      log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
      if(log_file_started == 0){
 8081d54:	4d19      	ldr	r5, [pc, #100]	; (8081dbc <_Z12writeLogFile6String+0x8c>)
 8081d56:	2346      	movs	r3, #70	; 0x46
 8081d58:	6812      	ldr	r2, [r2, #0]
 8081d5a:	6809      	ldr	r1, [r1, #0]
 8081d5c:	4818      	ldr	r0, [pc, #96]	; (8081dc0 <_Z12writeLogFile6String+0x90>)
 8081d5e:	f006 fe56 	bl	8088a0e <_ZN7FatFile4openEPS_PKch>
 8081d62:	682b      	ldr	r3, [r5, #0]
 8081d64:	b99b      	cbnz	r3, 8081d8e <_Z12writeLogFile6String+0x5e>
          log_file.println("File Start timestamp: ");
 8081d66:	4917      	ldr	r1, [pc, #92]	; (8081dc4 <_Z12writeLogFile6String+0x94>)
 8081d68:	4817      	ldr	r0, [pc, #92]	; (8081dc8 <_Z12writeLogFile6String+0x98>)
 8081d6a:	f009 fdfa 	bl	808b962 <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8081d6e:	f00a f960 	bl	808c032 <_ZN9TimeClass3nowEv>
 8081d72:	17c3      	asrs	r3, r0, #31
 8081d74:	4602      	mov	r2, r0
 8081d76:	4668      	mov	r0, sp
 8081d78:	f00a f858 	bl	808be2c <_ZN9TimeClass7timeStrEx>
          log_file.println(Time.timeStr());
 8081d7c:	9900      	ldr	r1, [sp, #0]
 8081d7e:	4812      	ldr	r0, [pc, #72]	; (8081dc8 <_Z12writeLogFile6String+0x98>)
 8081d80:	f009 fdef 	bl	808b962 <_ZN5Print7printlnEPKc>
 8081d84:	4668      	mov	r0, sp
 8081d86:	f009 fb7d 	bl	808b484 <_ZN6StringD1Ev>
          log_file_started = 1;
 8081d8a:	2301      	movs	r3, #1
 8081d8c:	602b      	str	r3, [r5, #0]
      }
      log_file.println(data);
 8081d8e:	6821      	ldr	r1, [r4, #0]
 8081d90:	480d      	ldr	r0, [pc, #52]	; (8081dc8 <_Z12writeLogFile6String+0x98>)
 8081d92:	f009 fde6 	bl	808b962 <_ZN5Print7printlnEPKc>

      log_file.close();
 8081d96:	480a      	ldr	r0, [pc, #40]	; (8081dc0 <_Z12writeLogFile6String+0x90>)
 8081d98:	f006 fe32 	bl	8088a00 <_ZN7FatFile5closeEv>
  }else{
    Serial.println("Unable to write to log file");
  }
}
 8081d9c:	b005      	add	sp, #20
 8081d9e:	bd30      	pop	{r4, r5, pc}
    Serial.println("Unable to write to log file");
 8081da0:	f00a fe9a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081da4:	4909      	ldr	r1, [pc, #36]	; (8081dcc <_Z12writeLogFile6String+0x9c>)
 8081da6:	f009 fddc 	bl	808b962 <_ZN5Print7printlnEPKc>
}
 8081daa:	e7f7      	b.n	8081d9c <_Z12writeLogFile6String+0x6c>
 8081dac:	20000c68 	.word	0x20000c68
 8081db0:	0809071c 	.word	0x0809071c
 8081db4:	2000074c 	.word	0x2000074c
 8081db8:	20000cf4 	.word	0x20000cf4
 8081dbc:	20000788 	.word	0x20000788
 8081dc0:	20000764 	.word	0x20000764
 8081dc4:	08090736 	.word	0x08090736
 8081dc8:	2000075c 	.word	0x2000075c
 8081dcc:	0809074d 	.word	0x0809074d

08081dd0 <_Z13readGpsStreamv>:
void readGpsStream(void){
 8081dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081dd4:	b08c      	sub	sp, #48	; 0x30
    String gps_sentence = "init";
 8081dd6:	4668      	mov	r0, sp
 8081dd8:	4996      	ldr	r1, [pc, #600]	; (8082034 <_Z13readGpsStreamv+0x264>)
 8081dda:	f009 fb9d 	bl	808b518 <_ZN6StringC1EPKc>
        if(prefix_string.equals("GGA")){
 8081dde:	4f96      	ldr	r7, [pc, #600]	; (8082038 <_Z13readGpsStreamv+0x268>)
        }else if(gps_sentence.equals("init")){
 8081de0:	f8df 8250 	ldr.w	r8, [pc, #592]	; 8082034 <_Z13readGpsStreamv+0x264>
            Serial.println("Error reading GPS");
 8081de4:	4e95      	ldr	r6, [pc, #596]	; (808203c <_Z13readGpsStreamv+0x26c>)
        gps_sentence = Serial5.readStringUntil('\r');
 8081de6:	f7ff f865 	bl	8080eb4 <_Z22__fetch_global_Serial5v>
 8081dea:	220d      	movs	r2, #13
 8081dec:	4601      	mov	r1, r0
 8081dee:	a808      	add	r0, sp, #32
 8081df0:	f009 ff74 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
 8081df4:	a908      	add	r1, sp, #32
 8081df6:	4668      	mov	r0, sp
 8081df8:	f009 fbd8 	bl	808b5ac <_ZN6StringaSEOS_>
 8081dfc:	a808      	add	r0, sp, #32
 8081dfe:	f009 fb41 	bl	808b484 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 8081e02:	2307      	movs	r3, #7
 8081e04:	2204      	movs	r2, #4
 8081e06:	4669      	mov	r1, sp
 8081e08:	a804      	add	r0, sp, #16
 8081e0a:	f009 fd27 	bl	808b85c <_ZNK6String9substringEjj>
        if(prefix_string.equals("GGA")){
 8081e0e:	4639      	mov	r1, r7
 8081e10:	a804      	add	r0, sp, #16
 8081e12:	f009 fcd8 	bl	808b7c6 <_ZNK6String6equalsEPKc>
 8081e16:	4605      	mov	r5, r0
 8081e18:	2800      	cmp	r0, #0
 8081e1a:	d153      	bne.n	8081ec4 <_Z13readGpsStreamv+0xf4>
        }else if(gps_sentence.equals("init")){
 8081e1c:	4641      	mov	r1, r8
 8081e1e:	4668      	mov	r0, sp
 8081e20:	f009 fcd1 	bl	808b7c6 <_ZNK6String6equalsEPKc>
 8081e24:	4604      	mov	r4, r0
 8081e26:	2800      	cmp	r0, #0
 8081e28:	d04f      	beq.n	8081eca <_Z13readGpsStreamv+0xfa>
            Serial.println("Error reading GPS");
 8081e2a:	f00a fe55 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081e2e:	4631      	mov	r1, r6
 8081e30:	f009 fd97 	bl	808b962 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081e34:	4631      	mov	r1, r6
 8081e36:	a808      	add	r0, sp, #32
 8081e38:	f009 fb6e 	bl	808b518 <_ZN6StringC1EPKc>
 8081e3c:	a808      	add	r0, sp, #32
 8081e3e:	f7ff ff77 	bl	8081d30 <_Z12writeLogFile6String>
 8081e42:	a808      	add	r0, sp, #32
 8081e44:	f009 fb1e 	bl	808b484 <_ZN6StringD1Ev>
            error = 1;
 8081e48:	2401      	movs	r4, #1
        String prefix_string = gps_sentence.substring(4,7);
 8081e4a:	a804      	add	r0, sp, #16
 8081e4c:	f009 fb1a 	bl	808b484 <_ZN6StringD1Ev>
    while(!stringFound && !error){
 8081e50:	b385      	cbz	r5, 8081eb4 <_Z13readGpsStreamv+0xe4>
 8081e52:	2400      	movs	r4, #0
 8081e54:	4627      	mov	r7, r4
                        gps.set_horizontalDillution(hdString);
 8081e56:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 8082054 <_Z13readGpsStreamv+0x284>
                        status_word.status_int &= 0xFFF3;
 8081e5a:	4e79      	ldr	r6, [pc, #484]	; (8082040 <_Z13readGpsStreamv+0x270>)
        for(int a = 0; a<gps_sentence.length(); a++){
 8081e5c:	9b02      	ldr	r3, [sp, #8]
 8081e5e:	42a3      	cmp	r3, r4
 8081e60:	d92a      	bls.n	8081eb8 <_Z13readGpsStreamv+0xe8>
            if(gps_sentence.charAt(a) == ','){
 8081e62:	4621      	mov	r1, r4
 8081e64:	4668      	mov	r0, sp
 8081e66:	f009 fce8 	bl	808b83a <_ZNK6String6charAtEj>
 8081e6a:	282c      	cmp	r0, #44	; 0x2c
 8081e6c:	f104 0501 	add.w	r5, r4, #1
 8081e70:	d11e      	bne.n	8081eb0 <_Z13readGpsStreamv+0xe0>
                if(comma_counter == TIME_FIELD_INDEX){
 8081e72:	bb67      	cbnz	r7, 8081ece <_Z13readGpsStreamv+0xfe>
                    if(gps_sentence.charAt(a+1)!=','){
 8081e74:	4629      	mov	r1, r5
 8081e76:	4668      	mov	r0, sp
 8081e78:	f009 fcdf 	bl	808b83a <_ZNK6String6charAtEj>
 8081e7c:	282c      	cmp	r0, #44	; 0x2c
 8081e7e:	d016      	beq.n	8081eae <_Z13readGpsStreamv+0xde>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081e80:	f104 030b 	add.w	r3, r4, #11
 8081e84:	462a      	mov	r2, r5
 8081e86:	4669      	mov	r1, sp
 8081e88:	a808      	add	r0, sp, #32
 8081e8a:	f009 fce7 	bl	808b85c <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081e8e:	4b6d      	ldr	r3, [pc, #436]	; (8082044 <_Z13readGpsStreamv+0x274>)
 8081e90:	681b      	ldr	r3, [r3, #0]
 8081e92:	b14b      	cbz	r3, 8081ea8 <_Z13readGpsStreamv+0xd8>
                            Serial.print("GPS utc string: ");
 8081e94:	f00a fe20 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081e98:	496b      	ldr	r1, [pc, #428]	; (8082048 <_Z13readGpsStreamv+0x278>)
 8081e9a:	f009 fd4f 	bl	808b93c <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081e9e:	f00a fe1b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081ea2:	9908      	ldr	r1, [sp, #32]
 8081ea4:	f009 fd5d 	bl	808b962 <_ZN5Print7printlnEPKc>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081ea8:	a808      	add	r0, sp, #32
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081eaa:	f009 faeb 	bl	808b484 <_ZN6StringD1Ev>
                comma_counter++;
 8081eae:	3701      	adds	r7, #1
        for(int a = 0; a<gps_sentence.length(); a++){
 8081eb0:	462c      	mov	r4, r5
 8081eb2:	e7d3      	b.n	8081e5c <_Z13readGpsStreamv+0x8c>
    while(!stringFound && !error){
 8081eb4:	2c00      	cmp	r4, #0
 8081eb6:	d096      	beq.n	8081de6 <_Z13readGpsStreamv+0x16>
    String gps_sentence = "init";
 8081eb8:	4668      	mov	r0, sp
 8081eba:	f009 fae3 	bl	808b484 <_ZN6StringD1Ev>
}
 8081ebe:	b00c      	add	sp, #48	; 0x30
 8081ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081ec4:	2400      	movs	r4, #0
            stringFound = 1;
 8081ec6:	2501      	movs	r5, #1
 8081ec8:	e7bf      	b.n	8081e4a <_Z13readGpsStreamv+0x7a>
 8081eca:	4605      	mov	r5, r0
 8081ecc:	e7bd      	b.n	8081e4a <_Z13readGpsStreamv+0x7a>
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 8081ece:	2f01      	cmp	r7, #1
 8081ed0:	d12f      	bne.n	8081f32 <_Z13readGpsStreamv+0x162>
                    if(gps_sentence.charAt(a+1)!=','){
 8081ed2:	4629      	mov	r1, r5
 8081ed4:	4668      	mov	r0, sp
 8081ed6:	f009 fcb0 	bl	808b83a <_ZNK6String6charAtEj>
 8081eda:	282c      	cmp	r0, #44	; 0x2c
 8081edc:	d0e7      	beq.n	8081eae <_Z13readGpsStreamv+0xde>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081ede:	f104 030a 	add.w	r3, r4, #10
 8081ee2:	462a      	mov	r2, r5
 8081ee4:	4669      	mov	r1, sp
 8081ee6:	a804      	add	r0, sp, #16
 8081ee8:	f009 fcb8 	bl	808b85c <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081eec:	4b55      	ldr	r3, [pc, #340]	; (8082044 <_Z13readGpsStreamv+0x274>)
 8081eee:	681b      	ldr	r3, [r3, #0]
 8081ef0:	b14b      	cbz	r3, 8081f06 <_Z13readGpsStreamv+0x136>
                          Serial.print("Latitude string: ");
 8081ef2:	f00a fdf1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081ef6:	4955      	ldr	r1, [pc, #340]	; (808204c <_Z13readGpsStreamv+0x27c>)
 8081ef8:	f009 fd20 	bl	808b93c <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 8081efc:	f00a fdec 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081f00:	9904      	ldr	r1, [sp, #16]
 8081f02:	f009 fd1b 	bl	808b93c <_ZN5Print5printEPKc>
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081f06:	a904      	add	r1, sp, #16
 8081f08:	a808      	add	r0, sp, #32
 8081f0a:	f009 fb44 	bl	808b596 <_ZN6StringC1ERKS_>
 8081f0e:	f104 010c 	add.w	r1, r4, #12
 8081f12:	4668      	mov	r0, sp
 8081f14:	f009 fc91 	bl	808b83a <_ZNK6String6charAtEj>
 8081f18:	a908      	add	r1, sp, #32
 8081f1a:	4602      	mov	r2, r0
 8081f1c:	4640      	mov	r0, r8
 8081f1e:	f005 fa35 	bl	808738c <_ZN3GPS15set_lat_decimalE6Stringc>
 8081f22:	a808      	add	r0, sp, #32
 8081f24:	f009 faae 	bl	808b484 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081f28:	8833      	ldrh	r3, [r6, #0]
 8081f2a:	f023 0308 	bic.w	r3, r3, #8
                            status_word.status_int |= 0x0004;
 8081f2e:	8033      	strh	r3, [r6, #0]
 8081f30:	e02c      	b.n	8081f8c <_Z13readGpsStreamv+0x1bc>
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081f32:	2f03      	cmp	r7, #3
 8081f34:	d12c      	bne.n	8081f90 <_Z13readGpsStreamv+0x1c0>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f36:	4629      	mov	r1, r5
 8081f38:	4668      	mov	r0, sp
 8081f3a:	f009 fc7e 	bl	808b83a <_ZNK6String6charAtEj>
 8081f3e:	282c      	cmp	r0, #44	; 0x2c
 8081f40:	d0b5      	beq.n	8081eae <_Z13readGpsStreamv+0xde>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081f42:	f104 030b 	add.w	r3, r4, #11
 8081f46:	462a      	mov	r2, r5
 8081f48:	4669      	mov	r1, sp
 8081f4a:	a804      	add	r0, sp, #16
 8081f4c:	f009 fc86 	bl	808b85c <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081f50:	4b3c      	ldr	r3, [pc, #240]	; (8082044 <_Z13readGpsStreamv+0x274>)
 8081f52:	681b      	ldr	r3, [r3, #0]
 8081f54:	b14b      	cbz	r3, 8081f6a <_Z13readGpsStreamv+0x19a>
                          Serial.print("longitude string: ");
 8081f56:	f00a fdbf 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081f5a:	493d      	ldr	r1, [pc, #244]	; (8082050 <_Z13readGpsStreamv+0x280>)
 8081f5c:	f009 fcee 	bl	808b93c <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081f60:	f00a fdba 	bl	808cad8 <_Z16_fetch_usbserialv>
 8081f64:	9904      	ldr	r1, [sp, #16]
 8081f66:	f009 fce9 	bl	808b93c <_ZN5Print5printEPKc>
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 8081f6a:	a904      	add	r1, sp, #16
 8081f6c:	a808      	add	r0, sp, #32
 8081f6e:	f009 fb12 	bl	808b596 <_ZN6StringC1ERKS_>
 8081f72:	f104 010d 	add.w	r1, r4, #13
 8081f76:	4668      	mov	r0, sp
 8081f78:	f009 fc5f 	bl	808b83a <_ZNK6String6charAtEj>
 8081f7c:	a908      	add	r1, sp, #32
 8081f7e:	4602      	mov	r2, r0
 8081f80:	4640      	mov	r0, r8
 8081f82:	f005 fa4b 	bl	808741c <_ZN3GPS16set_long_decimalE6Stringc>
                        gps.set_satellites(numberOfSatellitesString);
 8081f86:	a808      	add	r0, sp, #32
 8081f88:	f009 fa7c 	bl	808b484 <_ZN6StringD1Ev>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081f8c:	a804      	add	r0, sp, #16
 8081f8e:	e78c      	b.n	8081eaa <_Z13readGpsStreamv+0xda>
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
 8081f90:	2f06      	cmp	r7, #6
 8081f92:	d114      	bne.n	8081fbe <_Z13readGpsStreamv+0x1ee>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f94:	4629      	mov	r1, r5
 8081f96:	4668      	mov	r0, sp
 8081f98:	f009 fc4f 	bl	808b83a <_ZNK6String6charAtEj>
 8081f9c:	282c      	cmp	r0, #44	; 0x2c
 8081f9e:	d086      	beq.n	8081eae <_Z13readGpsStreamv+0xde>
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
 8081fa0:	462a      	mov	r2, r5
 8081fa2:	4669      	mov	r1, sp
 8081fa4:	1ce3      	adds	r3, r4, #3
 8081fa6:	a804      	add	r0, sp, #16
 8081fa8:	f009 fc58 	bl	808b85c <_ZNK6String9substringEjj>
                        gps.set_satellites(numberOfSatellitesString);
 8081fac:	a904      	add	r1, sp, #16
 8081fae:	a808      	add	r0, sp, #32
 8081fb0:	f009 faf1 	bl	808b596 <_ZN6StringC1ERKS_>
 8081fb4:	4640      	mov	r0, r8
 8081fb6:	a908      	add	r1, sp, #32
 8081fb8:	f005 fa76 	bl	80874a8 <_ZN3GPS14set_satellitesE6String>
 8081fbc:	e7e3      	b.n	8081f86 <_Z13readGpsStreamv+0x1b6>
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 8081fbe:	2f07      	cmp	r7, #7
 8081fc0:	f47f af75 	bne.w	8081eae <_Z13readGpsStreamv+0xde>
                    if(gps_sentence.charAt(a+1)!=','){
 8081fc4:	4629      	mov	r1, r5
 8081fc6:	4668      	mov	r0, sp
 8081fc8:	f009 fc37 	bl	808b83a <_ZNK6String6charAtEj>
 8081fcc:	282c      	cmp	r0, #44	; 0x2c
 8081fce:	f43f af6e 	beq.w	8081eae <_Z13readGpsStreamv+0xde>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081fd2:	462a      	mov	r2, r5
 8081fd4:	1ce3      	adds	r3, r4, #3
 8081fd6:	4669      	mov	r1, sp
 8081fd8:	a804      	add	r0, sp, #16
 8081fda:	f009 fc3f 	bl	808b85c <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8081fde:	a904      	add	r1, sp, #16
 8081fe0:	a808      	add	r0, sp, #32
 8081fe2:	f009 fad8 	bl	808b596 <_ZN6StringC1ERKS_>
 8081fe6:	a908      	add	r1, sp, #32
 8081fe8:	4640      	mov	r0, r8
 8081fea:	f005 fa65 	bl	80874b8 <_ZN3GPS23set_horizontalDillutionE6String>
 8081fee:	a808      	add	r0, sp, #32
 8081ff0:	f009 fa48 	bl	808b484 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081ff4:	8833      	ldrh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081ff6:	4640      	mov	r0, r8
                        status_word.status_int &= 0xFFF3;
 8081ff8:	f023 030c 	bic.w	r3, r3, #12
 8081ffc:	8033      	strh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081ffe:	f005 fa71 	bl	80874e4 <_ZN3GPS23get_horizontalDillutionEv>
 8082002:	2801      	cmp	r0, #1
 8082004:	dc03      	bgt.n	808200e <_Z13readGpsStreamv+0x23e>
                            status_word.status_int |= 0x000C;
 8082006:	8833      	ldrh	r3, [r6, #0]
 8082008:	f043 030c 	orr.w	r3, r3, #12
 808200c:	e78f      	b.n	8081f2e <_Z13readGpsStreamv+0x15e>
                        }else if(gps.get_horizontalDillution() < 5){
 808200e:	4640      	mov	r0, r8
 8082010:	f005 fa68 	bl	80874e4 <_ZN3GPS23get_horizontalDillutionEv>
 8082014:	2804      	cmp	r0, #4
 8082016:	dc03      	bgt.n	8082020 <_Z13readGpsStreamv+0x250>
                            status_word.status_int |= 0x0008;
 8082018:	8833      	ldrh	r3, [r6, #0]
 808201a:	f043 0308 	orr.w	r3, r3, #8
 808201e:	e786      	b.n	8081f2e <_Z13readGpsStreamv+0x15e>
                        }else if(gps.get_horizontalDillution() < 20){
 8082020:	4640      	mov	r0, r8
 8082022:	f005 fa5f 	bl	80874e4 <_ZN3GPS23get_horizontalDillutionEv>
 8082026:	2813      	cmp	r0, #19
 8082028:	dcb0      	bgt.n	8081f8c <_Z13readGpsStreamv+0x1bc>
                            status_word.status_int |= 0x0004;
 808202a:	8833      	ldrh	r3, [r6, #0]
 808202c:	f043 0304 	orr.w	r3, r3, #4
 8082030:	e77d      	b.n	8081f2e <_Z13readGpsStreamv+0x15e>
 8082032:	bf00      	nop
 8082034:	08090769 	.word	0x08090769
 8082038:	0809076e 	.word	0x0809076e
 808203c:	08090772 	.word	0x08090772
 8082040:	20000c90 	.word	0x20000c90
 8082044:	20000628 	.word	0x20000628
 8082048:	08090784 	.word	0x08090784
 808204c:	08090795 	.word	0x08090795
 8082050:	080907a7 	.word	0x080907a7
 8082054:	200006b8 	.word	0x200006b8

08082058 <_Z10readAlpha1v>:
float readAlpha1(void){
 8082058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(debugging_enabled){
 808205c:	4da2      	ldr	r5, [pc, #648]	; (80822e8 <_Z10readAlpha1v+0x290>)
float readAlpha1(void){
 808205e:	b08d      	sub	sp, #52	; 0x34
    String alpha1_ppmRounded;
 8082060:	49a2      	ldr	r1, [pc, #648]	; (80822ec <_Z10readAlpha1v+0x294>)
 8082062:	a804      	add	r0, sp, #16
 8082064:	f009 fa58 	bl	808b518 <_ZN6StringC1EPKc>
    if(debugging_enabled){
 8082068:	682b      	ldr	r3, [r5, #0]
 808206a:	b123      	cbz	r3, 8082076 <_Z10readAlpha1v+0x1e>
        Serial.println("Start of alpha read");
 808206c:	f00a fd34 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082070:	499f      	ldr	r1, [pc, #636]	; (80822f0 <_Z10readAlpha1v+0x298>)
 8082072:	f009 fc76 	bl	808b962 <_ZN5Print7printlnEPKc>
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8082076:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8082348 <_Z10readAlpha1v+0x2f0>
 808207a:	2100      	movs	r1, #0
 808207c:	f8b9 0000 	ldrh.w	r0, [r9]
 8082080:	f00b f8ef 	bl	808d262 <digitalWrite>
    if(Wire.requestFrom(0x49,1) == 0){
 8082084:	f00b f982 	bl	808d38c <_Z19__fetch_global_Wirev>
 8082088:	2201      	movs	r2, #1
 808208a:	2149      	movs	r1, #73	; 0x49
 808208c:	f00a ff17 	bl	808cebe <_ZN7TwoWire11requestFromEhj>
 8082090:	f8cd 900c 	str.w	r9, [sp, #12]
 8082094:	2800      	cmp	r0, #0
 8082096:	d15d      	bne.n	8082154 <_Z10readAlpha1v+0xfc>
      if(debugging_enabled){
 8082098:	682b      	ldr	r3, [r5, #0]
 808209a:	b173      	cbz	r3, 80820ba <_Z10readAlpha1v+0x62>
        Serial.println("Couldn't communicate with LMP91000");
 808209c:	f00a fd1c 	bl	808cad8 <_Z16_fetch_usbserialv>
 80820a0:	4994      	ldr	r1, [pc, #592]	; (80822f4 <_Z10readAlpha1v+0x29c>)
 80820a2:	f009 fc5e 	bl	808b962 <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000");
 80820a6:	4993      	ldr	r1, [pc, #588]	; (80822f4 <_Z10readAlpha1v+0x29c>)
            writeLogFile("Halfvolt higher than 0.5");
 80820a8:	a808      	add	r0, sp, #32
 80820aa:	f009 fa35 	bl	808b518 <_ZN6StringC1EPKc>
 80820ae:	a808      	add	r0, sp, #32
 80820b0:	f7ff fe3e 	bl	8081d30 <_Z12writeLogFile6String>
 80820b4:	a808      	add	r0, sp, #32
 80820b6:	f009 f9e5 	bl	808b484 <_ZN6StringD1Ev>
    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 80820ba:	2100      	movs	r1, #0
 80820bc:	488e      	ldr	r0, [pc, #568]	; (80822f8 <_Z10readAlpha1v+0x2a0>)
 80820be:	f004 fff4 	bl	80870aa <_ZN8LMP910004readEh>
 80820c2:	b980      	cbnz	r0, 80820e6 <_Z10readAlpha1v+0x8e>
        if(debugging_enabled){
 80820c4:	682b      	ldr	r3, [r5, #0]
 80820c6:	b173      	cbz	r3, 80820e6 <_Z10readAlpha1v+0x8e>
            Serial.println("Status = 0 from LMP91000 status reg");
 80820c8:	f00a fd06 	bl	808cad8 <_Z16_fetch_usbserialv>
 80820cc:	498b      	ldr	r1, [pc, #556]	; (80822fc <_Z10readAlpha1v+0x2a4>)
 80820ce:	f009 fc48 	bl	808b962 <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 80820d2:	498b      	ldr	r1, [pc, #556]	; (8082300 <_Z10readAlpha1v+0x2a8>)
 80820d4:	a808      	add	r0, sp, #32
 80820d6:	f009 fa1f 	bl	808b518 <_ZN6StringC1EPKc>
 80820da:	a808      	add	r0, sp, #32
 80820dc:	f7ff fe28 	bl	8081d30 <_Z12writeLogFile6String>
 80820e0:	a808      	add	r0, sp, #32
 80820e2:	f009 f9cf 	bl	808b484 <_ZN6StringD1Ev>
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
 80820e6:	f00b f951 	bl	808d38c <_Z19__fetch_global_Wirev>
 80820ea:	2201      	movs	r2, #1
 80820ec:	2149      	movs	r1, #73	; 0x49
 80820ee:	f00a fee6 	bl	808cebe <_ZN7TwoWire11requestFromEhj>
 80820f2:	2800      	cmp	r0, #0
 80820f4:	d15a      	bne.n	80821ac <_Z10readAlpha1v+0x154>
        alpha1_ppmRounded = "-99";
 80820f6:	4983      	ldr	r1, [pc, #524]	; (8082304 <_Z10readAlpha1v+0x2ac>)
 80820f8:	a804      	add	r0, sp, #16
 80820fa:	f009 fa5f 	bl	808b5bc <_ZN6StringaSEPKc>
      digitalWrite(lmp91000_1_en, HIGH);  //disable
 80820fe:	9b03      	ldr	r3, [sp, #12]
 8082100:	2101      	movs	r1, #1
 8082102:	8818      	ldrh	r0, [r3, #0]
 8082104:	f00b f8ad 	bl	808d262 <digitalWrite>
      if(debugging_enabled){
 8082108:	682b      	ldr	r3, [r5, #0]
 808210a:	b1e3      	cbz	r3, 8082146 <_Z10readAlpha1v+0xee>
          Serial.print("CO measurements:  \n\r");
 808210c:	f00a fce4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082110:	497d      	ldr	r1, [pc, #500]	; (8082308 <_Z10readAlpha1v+0x2b0>)
 8082112:	f009 fc13 	bl	808b93c <_ZN5Print5printEPKc>
          Serial.printf("A0_gas: %d\n\r", A0_gas);
 8082116:	f00a fcdf 	bl	808cad8 <_Z16_fetch_usbserialv>
 808211a:	463a      	mov	r2, r7
 808211c:	497b      	ldr	r1, [pc, #492]	; (808230c <_Z10readAlpha1v+0x2b4>)
 808211e:	f7fe fdbf 	bl	8080ca0 <_ZN5Print6printfEPKcz>
          Serial.printf("A1_aux: %d\n\r", A1_aux);
 8082122:	f00a fcd9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082126:	4632      	mov	r2, r6
 8082128:	4979      	ldr	r1, [pc, #484]	; (8082310 <_Z10readAlpha1v+0x2b8>)
 808212a:	f7fe fdb9 	bl	8080ca0 <_ZN5Print6printfEPKcz>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
 808212e:	f00a fcd3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082132:	4652      	mov	r2, sl
 8082134:	4977      	ldr	r1, [pc, #476]	; (8082314 <_Z10readAlpha1v+0x2bc>)
 8082136:	f7fe fdb3 	bl	8080ca0 <_ZN5Print6printfEPKcz>
          Serial.printf("half_vref: %d\n\r", half_Vref);
 808213a:	f00a fccd 	bl	808cad8 <_Z16_fetch_usbserialv>
 808213e:	4622      	mov	r2, r4
 8082140:	4975      	ldr	r1, [pc, #468]	; (8082318 <_Z10readAlpha1v+0x2c0>)
 8082142:	f7fe fdad 	bl	8080ca0 <_ZN5Print6printfEPKcz>
    String alpha1_ppmRounded;
 8082146:	a804      	add	r0, sp, #16
 8082148:	f009 f99c 	bl	808b484 <_ZN6StringD1Ev>
}
 808214c:	4640      	mov	r0, r8
 808214e:	b00d      	add	sp, #52	; 0x34
 8082150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8082154:	2103      	movs	r1, #3
 8082156:	4871      	ldr	r0, [pc, #452]	; (808231c <_Z10readAlpha1v+0x2c4>)
 8082158:	f005 f8ee 	bl	8087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 808215c:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 808215e:	f00b ff35 	bl	808dfcc <__aeabi_i2f>
 8082162:	4b6f      	ldr	r3, [pc, #444]	; (8082320 <_Z10readAlpha1v+0x2c8>)
 8082164:	6819      	ldr	r1, [r3, #0]
 8082166:	f00b ff85 	bl	808e074 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 808216a:	496e      	ldr	r1, [pc, #440]	; (8082324 <_Z10readAlpha1v+0x2cc>)
 808216c:	f00c f836 	bl	808e1dc <__aeabi_fdiv>
 8082170:	f00b fad2 	bl	808d718 <__aeabi_f2d>
 8082174:	4602      	mov	r2, r0
 8082176:	460b      	mov	r3, r1
 8082178:	e9cd 2300 	strd	r2, r3, [sp]
 808217c:	2200      	movs	r2, #0
 808217e:	4b6a      	ldr	r3, [pc, #424]	; (8082328 <_Z10readAlpha1v+0x2d0>)
 8082180:	f00b f96a 	bl	808d458 <__aeabi_dsub>
 8082184:	2200      	movs	r2, #0
 8082186:	4b69      	ldr	r3, [pc, #420]	; (808232c <_Z10readAlpha1v+0x2d4>)
 8082188:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808218c:	f00b fdac 	bl	808dce8 <__aeabi_dcmpgt>
 8082190:	2800      	cmp	r0, #0
 8082192:	d092      	beq.n	80820ba <_Z10readAlpha1v+0x62>
          if(debugging_enabled){
 8082194:	682b      	ldr	r3, [r5, #0]
 8082196:	2b00      	cmp	r3, #0
 8082198:	d08f      	beq.n	80820ba <_Z10readAlpha1v+0x62>
            Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref/1000);
 808219a:	f00a fc9d 	bl	808cad8 <_Z16_fetch_usbserialv>
 808219e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80821a2:	4963      	ldr	r1, [pc, #396]	; (8082330 <_Z10readAlpha1v+0x2d8>)
 80821a4:	f7fe fd7c 	bl	8080ca0 <_ZN5Print6printfEPKcz>
            writeLogFile("Halfvolt higher than 0.5");
 80821a8:	4962      	ldr	r1, [pc, #392]	; (8082334 <_Z10readAlpha1v+0x2dc>)
 80821aa:	e77d      	b.n	80820a8 <_Z10readAlpha1v+0x50>
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
 80821ac:	2100      	movs	r1, #0
 80821ae:	4852      	ldr	r0, [pc, #328]	; (80822f8 <_Z10readAlpha1v+0x2a0>)
 80821b0:	f004 ff7b 	bl	80870aa <_ZN8LMP910004readEh>
 80821b4:	2800      	cmp	r0, #0
 80821b6:	d09e      	beq.n	80820f6 <_Z10readAlpha1v+0x9e>
 80821b8:	2400      	movs	r4, #0
 80821ba:	f04f 090a 	mov.w	r9, #10
 80821be:	46a2      	mov	sl, r4
 80821c0:	46a0      	mov	r8, r4
 80821c2:	4627      	mov	r7, r4
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 80821c4:	4e55      	ldr	r6, [pc, #340]	; (808231c <_Z10readAlpha1v+0x2c4>)
 80821c6:	2100      	movs	r1, #0
 80821c8:	4630      	mov	r0, r6
 80821ca:	f005 f8b5 	bl	8087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 80821ce:	2101      	movs	r1, #1
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 80821d0:	4407      	add	r7, r0
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 80821d2:	4630      	mov	r0, r6
 80821d4:	f005 f8b0 	bl	8087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 80821d8:	2102      	movs	r1, #2
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 80821da:	4480      	add	r8, r0
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 80821dc:	4630      	mov	r0, r6
 80821de:	f005 f8ab 	bl	8087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 80821e2:	2103      	movs	r1, #3
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 80821e4:	4482      	add	sl, r0
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 80821e6:	4630      	mov	r0, r6
 80821e8:	f005 f8a6 	bl	8087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 80821ec:	f1b9 0901 	subs.w	r9, r9, #1
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 80821f0:	4404      	add	r4, r0
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 80821f2:	d1e8      	bne.n	80821c6 <_Z10readAlpha1v+0x16e>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 80821f4:	200a      	movs	r0, #10
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 80821f6:	fbb4 f4f0 	udiv	r4, r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 80821fa:	4b49      	ldr	r3, [pc, #292]	; (8082320 <_Z10readAlpha1v+0x2c8>)
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 80821fc:	fbb8 f6f0 	udiv	r6, r8, r0
        volt0_gas = A0_gas * ads_bitmv;
 8082200:	f8d3 9000 	ldr.w	r9, [r3]
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8082204:	fbb7 f7f0 	udiv	r7, r7, r0
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 8082208:	fbba faf0 	udiv	sl, sl, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 808220c:	4620      	mov	r0, r4
 808220e:	f00b fedd 	bl	808dfcc <__aeabi_i2f>
 8082212:	4649      	mov	r1, r9
 8082214:	f00b ff2e 	bl	808e074 <__aeabi_fmul>
 8082218:	4680      	mov	r8, r0
        volt0_gas = A0_gas * ads_bitmv;
 808221a:	4638      	mov	r0, r7
 808221c:	f00b fed6 	bl	808dfcc <__aeabi_i2f>
 8082220:	4649      	mov	r1, r9
 8082222:	f00b ff27 	bl	808e074 <__aeabi_fmul>
 8082226:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8082228:	4640      	mov	r0, r8
 808222a:	f00b fe19 	bl	808de60 <__aeabi_fsub>
 808222e:	4942      	ldr	r1, [pc, #264]	; (8082338 <_Z10readAlpha1v+0x2e0>)
 8082230:	f00b ffd4 	bl	808e1dc <__aeabi_fdiv>
 8082234:	4683      	mov	fp, r0
        volt1_aux = A1_aux * ads_bitmv;
 8082236:	4630      	mov	r0, r6
 8082238:	f00b fec8 	bl	808dfcc <__aeabi_i2f>
 808223c:	4649      	mov	r1, r9
 808223e:	f00b ff19 	bl	808e074 <__aeabi_fmul>
 8082242:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8082244:	4640      	mov	r0, r8
 8082246:	f00b fe0b 	bl	808de60 <__aeabi_fsub>
 808224a:	493c      	ldr	r1, [pc, #240]	; (808233c <_Z10readAlpha1v+0x2e4>)
 808224c:	f00b ffc6 	bl	808e1dc <__aeabi_fdiv>
 8082250:	4680      	mov	r8, r0
        if(readTemperature() <= 15){
 8082252:	f7ff fa01 	bl	8081658 <_Z15readTemperaturev>
 8082256:	493a      	ldr	r1, [pc, #232]	; (8082340 <_Z10readAlpha1v+0x2e8>)
 8082258:	f00c f8b4 	bl	808e3c4 <__aeabi_fcmple>
 808225c:	b1d0      	cbz	r0, 8082294 <_Z10readAlpha1v+0x23c>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 808225e:	4641      	mov	r1, r8
 8082260:	4658      	mov	r0, fp
 8082262:	f00b fdfd 	bl	808de60 <__aeabi_fsub>
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8082266:	f00b fa57 	bl	808d718 <__aeabi_f2d>
 808226a:	a31b      	add	r3, pc, #108	; (adr r3, 80822d8 <_Z10readAlpha1v+0x280>)
 808226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082270:	f00b fbd4 	bl	808da1c <__aeabi_ddiv>
 8082274:	f00b fda0 	bl	808ddb8 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8082278:	2202      	movs	r2, #2
 808227a:	4601      	mov	r1, r0
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 808227c:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 808227e:	a808      	add	r0, sp, #32
 8082280:	f009 f9e4 	bl	808b64c <_ZN6StringC1Efi>
 8082284:	a908      	add	r1, sp, #32
 8082286:	a804      	add	r0, sp, #16
 8082288:	f009 f990 	bl	808b5ac <_ZN6StringaSEOS_>
 808228c:	a808      	add	r0, sp, #32
 808228e:	f009 f8f9 	bl	808b484 <_ZN6StringD1Ev>
 8082292:	e734      	b.n	80820fe <_Z10readAlpha1v+0xa6>
        else if(readTemperature() <= 25){
 8082294:	f7ff f9e0 	bl	8081658 <_Z15readTemperaturev>
 8082298:	492a      	ldr	r1, [pc, #168]	; (8082344 <_Z10readAlpha1v+0x2ec>)
 808229a:	f00c f893 	bl	808e3c4 <__aeabi_fcmple>
 808229e:	b120      	cbz	r0, 80822aa <_Z10readAlpha1v+0x252>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 80822a0:	4641      	mov	r1, r8
 80822a2:	4658      	mov	r0, fp
 80822a4:	f00b fdde 	bl	808de64 <__addsf3>
 80822a8:	e7dd      	b.n	8082266 <_Z10readAlpha1v+0x20e>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 80822aa:	4640      	mov	r0, r8
 80822ac:	f00b fa34 	bl	808d718 <__aeabi_f2d>
 80822b0:	a30b      	add	r3, pc, #44	; (adr r3, 80822e0 <_Z10readAlpha1v+0x288>)
 80822b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80822b6:	f00b fa87 	bl	808d7c8 <__aeabi_dmul>
 80822ba:	4680      	mov	r8, r0
 80822bc:	4658      	mov	r0, fp
 80822be:	4689      	mov	r9, r1
 80822c0:	f00b fa2a 	bl	808d718 <__aeabi_f2d>
 80822c4:	4602      	mov	r2, r0
 80822c6:	460b      	mov	r3, r1
 80822c8:	4640      	mov	r0, r8
 80822ca:	4649      	mov	r1, r9
 80822cc:	f00b f8c6 	bl	808d45c <__adddf3>
 80822d0:	f00b fd72 	bl	808ddb8 <__aeabi_d2f>
 80822d4:	e7c7      	b.n	8082266 <_Z10readAlpha1v+0x20e>
 80822d6:	bf00      	nop
 80822d8:	d4fdf3b6 	.word	0xd4fdf3b6
 80822dc:	3fd6e978 	.word	0x3fd6e978
 80822e0:	851eb852 	.word	0x851eb852
 80822e4:	3fe851eb 	.word	0x3fe851eb
 80822e8:	20000628 	.word	0x20000628
 80822ec:	08092ce2 	.word	0x08092ce2
 80822f0:	080907ba 	.word	0x080907ba
 80822f4:	080907ce 	.word	0x080907ce
 80822f8:	20000705 	.word	0x20000705
 80822fc:	0809081c 	.word	0x0809081c
 8082300:	08090840 	.word	0x08090840
 8082304:	08090718 	.word	0x08090718
 8082308:	08090853 	.word	0x08090853
 808230c:	08090868 	.word	0x08090868
 8082310:	08090875 	.word	0x08090875
 8082314:	08090882 	.word	0x08090882
 8082318:	08090890 	.word	0x08090890
 808231c:	20000570 	.word	0x20000570
 8082320:	20000084 	.word	0x20000084
 8082324:	447a0000 	.word	0x447a0000
 8082328:	3ff40000 	.word	0x3ff40000
 808232c:	3fe00000 	.word	0x3fe00000
 8082330:	080907f1 	.word	0x080907f1
 8082334:	08090803 	.word	0x08090803
 8082338:	c2f00000 	.word	0xc2f00000
 808233c:	c3160000 	.word	0xc3160000
 8082340:	41700000 	.word	0x41700000
 8082344:	41c80000 	.word	0x41c80000
 8082348:	200000c8 	.word	0x200000c8

0808234c <_Z6readCOv>:
float readCO(void){
 808234c:	b570      	push	{r4, r5, r6, lr}
    if(CO_socket == 0){
 808234e:	4b0f      	ldr	r3, [pc, #60]	; (808238c <_Z6readCOv+0x40>)
 8082350:	4c0f      	ldr	r4, [pc, #60]	; (8082390 <_Z6readCOv+0x44>)
 8082352:	681b      	ldr	r3, [r3, #0]
 8082354:	b9bb      	cbnz	r3, 8082386 <_Z6readCOv+0x3a>
        CO_float = readAlpha1();
 8082356:	f7ff fe7f 	bl	8082058 <_Z10readAlpha1v>
    float_offset = CO_zero;
 808235a:	4b0e      	ldr	r3, [pc, #56]	; (8082394 <_Z6readCOv+0x48>)
        CO_float = readAlpha2();
 808235c:	6020      	str	r0, [r4, #0]
    float_offset = CO_zero;
 808235e:	6818      	ldr	r0, [r3, #0]
 8082360:	f00b fe34 	bl	808dfcc <__aeabi_i2f>
    CO_float *= CO_slope;
 8082364:	4b0c      	ldr	r3, [pc, #48]	; (8082398 <_Z6readCOv+0x4c>)
    float_offset = CO_zero;
 8082366:	4606      	mov	r6, r0
    CO_float *= CO_slope;
 8082368:	6819      	ldr	r1, [r3, #0]
 808236a:	6820      	ldr	r0, [r4, #0]
 808236c:	f00b fe82 	bl	808e074 <__aeabi_fmul>
    float_offset /= 1000;
 8082370:	490a      	ldr	r1, [pc, #40]	; (808239c <_Z6readCOv+0x50>)
    CO_float *= CO_slope;
 8082372:	4605      	mov	r5, r0
    float_offset /= 1000;
 8082374:	4630      	mov	r0, r6
 8082376:	f00b ff31 	bl	808e1dc <__aeabi_fdiv>
 808237a:	4601      	mov	r1, r0
    CO_float += float_offset;
 808237c:	4628      	mov	r0, r5
 808237e:	f00b fd71 	bl	808de64 <__addsf3>
 8082382:	6020      	str	r0, [r4, #0]
}
 8082384:	bd70      	pop	{r4, r5, r6, pc}
        CO_float = readAlpha2();
 8082386:	f7ff fb8f 	bl	8081aa8 <_Z10readAlpha2v>
 808238a:	e7e6      	b.n	808235a <_Z6readCOv+0xe>
 808238c:	200002e0 	.word	0x200002e0
 8082390:	200002d8 	.word	0x200002d8
 8082394:	200002e8 	.word	0x200002e8
 8082398:	200002dc 	.word	0x200002dc
 808239c:	447a0000 	.word	0x447a0000

080823a0 <_Z12sendWifiInfov>:
          }
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
 80823a0:	b510      	push	{r4, lr}
 80823a2:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80823a4:	491d      	ldr	r1, [pc, #116]	; (808241c <_Z12sendWifiInfov+0x7c>)
 80823a6:	a808      	add	r0, sp, #32
 80823a8:	f009 f8b6 	bl	808b518 <_ZN6StringC1EPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 80823ac:	491c      	ldr	r1, [pc, #112]	; (8082420 <_Z12sendWifiInfov+0x80>)
 80823ae:	a804      	add	r0, sp, #16
 80823b0:	f009 f8f1 	bl	808b596 <_ZN6StringC1ERKS_>
 80823b4:	a904      	add	r1, sp, #16
 80823b6:	a808      	add	r0, sp, #32
 80823b8:	f009 f9d1 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 80823bc:	4919      	ldr	r1, [pc, #100]	; (8082424 <_Z12sendWifiInfov+0x84>)
 80823be:	f009 f9da 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 80823c2:	4604      	mov	r4, r0
 80823c4:	4918      	ldr	r1, [pc, #96]	; (8082428 <_Z12sendWifiInfov+0x88>)
 80823c6:	a80c      	add	r0, sp, #48	; 0x30
 80823c8:	f009 f8e5 	bl	808b596 <_ZN6StringC1ERKS_>
 80823cc:	a90c      	add	r1, sp, #48	; 0x30
 80823ce:	4620      	mov	r0, r4
 80823d0:	f009 f9c5 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 80823d4:	4915      	ldr	r1, [pc, #84]	; (808242c <_Z12sendWifiInfov+0x8c>)
 80823d6:	f009 f9ce 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 80823da:	4601      	mov	r1, r0
 80823dc:	4668      	mov	r0, sp
 80823de:	f009 f8da 	bl	808b596 <_ZN6StringC1ERKS_>
 80823e2:	a80c      	add	r0, sp, #48	; 0x30
 80823e4:	f009 f84e 	bl	808b484 <_ZN6StringD1Ev>
 80823e8:	a804      	add	r0, sp, #16
 80823ea:	f009 f84b 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80823ee:	a808      	add	r0, sp, #32
 80823f0:	f009 f848 	bl	808b484 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 80823f4:	f00a fb70 	bl	808cad8 <_Z16_fetch_usbserialv>
 80823f8:	490d      	ldr	r1, [pc, #52]	; (8082430 <_Z12sendWifiInfov+0x90>)
 80823fa:	f009 fab2 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 80823fe:	f00a fcb5 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 8082402:	9900      	ldr	r1, [sp, #0]
 8082404:	f009 faad 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 8082408:	f00a fb66 	bl	808cad8 <_Z16_fetch_usbserialv>
 808240c:	4909      	ldr	r1, [pc, #36]	; (8082434 <_Z12sendWifiInfov+0x94>)
 808240e:	f009 faa8 	bl	808b962 <_ZN5Print7printlnEPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082412:	4668      	mov	r0, sp
 8082414:	f009 f836 	bl	808b484 <_ZN6StringD1Ev>
}
 8082418:	b010      	add	sp, #64	; 0x40
 808241a:	bd10      	pop	{r4, pc}
 808241c:	080908a0 	.word	0x080908a0
 8082420:	20000c80 	.word	0x20000c80
 8082424:	08092a26 	.word	0x08092a26
 8082428:	200007a8 	.word	0x200007a8
 808242c:	0809192d 	.word	0x0809192d
 8082430:	080908a3 	.word	0x080908a3
 8082434:	080908c7 	.word	0x080908c7

08082438 <_Z10checkValuePcc>:
}
char checkValue(char *thebuf, char leng)  {
    char receiveflag=0;
    int receiveSum=0;

    for(int i=0; i<(leng-2); i++) {
 8082438:	2200      	movs	r2, #0
    int receiveSum=0;
 808243a:	4613      	mov	r3, r2
char checkValue(char *thebuf, char leng)  {
 808243c:	b530      	push	{r4, r5, lr}
    for(int i=0; i<(leng-2); i++) {
 808243e:	1e8d      	subs	r5, r1, #2
 8082440:	4295      	cmp	r5, r2
 8082442:	dd03      	ble.n	808244c <_Z10checkValuePcc+0x14>
      receiveSum=receiveSum+thebuf[i];
 8082444:	5c84      	ldrb	r4, [r0, r2]
    for(int i=0; i<(leng-2); i++) {
 8082446:	3201      	adds	r2, #1
      receiveSum=receiveSum+thebuf[i];
 8082448:	4423      	add	r3, r4
    for(int i=0; i<(leng-2); i++) {
 808244a:	e7f9      	b.n	8082440 <_Z10checkValuePcc+0x8>
    }
    receiveSum=receiveSum + 0x42;

    if(receiveSum == ((thebuf[leng-2]<<8)+thebuf[leng-1])) { //check the serial data
 808244c:	4408      	add	r0, r1
 808244e:	f810 2c02 	ldrb.w	r2, [r0, #-2]
 8082452:	f810 0c01 	ldrb.w	r0, [r0, #-1]
    receiveSum=receiveSum + 0x42;
 8082456:	3342      	adds	r3, #66	; 0x42
    if(receiveSum == ((thebuf[leng-2]<<8)+thebuf[leng-1])) { //check the serial data
 8082458:	eb00 2002 	add.w	r0, r0, r2, lsl #8
      receiveSum = 0;
      receiveflag = 1;
    }
    return receiveflag;
}
 808245c:	1ac3      	subs	r3, r0, r3
 808245e:	4258      	negs	r0, r3
 8082460:	4158      	adcs	r0, r3
 8082462:	bd30      	pop	{r4, r5, pc}

08082464 <_Z13transmitPM2_5Pc>:
    int PM01Val;
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
    return PM01Val;
}
//transmit PM Value to PC
float transmitPM2_5(char *thebuf) {
 8082464:	b508      	push	{r3, lr}
    float PM2_5Val;
    PM2_5Val=((thebuf[5]<<8) + thebuf[6]);//count PM2.5 value of the air detector module
 8082466:	7942      	ldrb	r2, [r0, #5]
 8082468:	7980      	ldrb	r0, [r0, #6]
 808246a:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 808246e:	f00b fdad 	bl	808dfcc <__aeabi_i2f>
    return PM2_5Val;
}
 8082472:	bd08      	pop	{r3, pc}

08082474 <_Z13readPlantowerv>:
void readPlantower(void){
 8082474:	b510      	push	{r4, lr}
    if(Serial4.find("B")){    //start to read when detect 0x42
 8082476:	f7fe fce1 	bl	8080e3c <_Z22__fetch_global_Serial4v>
 808247a:	491a      	ldr	r1, [pc, #104]	; (80824e4 <_Z13readPlantowerv+0x70>)
 808247c:	f009 fc06 	bl	808bc8c <_ZN6Stream4findEPc>
 8082480:	b310      	cbz	r0, 80824c8 <_Z13readPlantowerv+0x54>
          Serial4.readBytes(buf,LENG);
 8082482:	4c19      	ldr	r4, [pc, #100]	; (80824e8 <_Z13readPlantowerv+0x74>)
 8082484:	f7fe fcda 	bl	8080e3c <_Z22__fetch_global_Serial4v>
 8082488:	221f      	movs	r2, #31
 808248a:	4621      	mov	r1, r4
 808248c:	f009 fc01 	bl	808bc92 <_ZN6Stream9readBytesEPcj>
          if(buf[0] == 0x4d){
 8082490:	7823      	ldrb	r3, [r4, #0]
 8082492:	2b4d      	cmp	r3, #77	; 0x4d
 8082494:	d117      	bne.n	80824c6 <_Z13readPlantowerv+0x52>
              if(checkValue(buf,LENG)){ //All units are ug/m^3
 8082496:	211f      	movs	r1, #31
 8082498:	4620      	mov	r0, r4
 808249a:	f7ff ffcd 	bl	8082438 <_Z10checkValuePcc>
 808249e:	b190      	cbz	r0, 80824c6 <_Z13readPlantowerv+0x52>
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
 80824a0:	78e2      	ldrb	r2, [r4, #3]
 80824a2:	7923      	ldrb	r3, [r4, #4]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 80824a4:	4620      	mov	r0, r4
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
 80824a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
 80824aa:	4a10      	ldr	r2, [pc, #64]	; (80824ec <_Z13readPlantowerv+0x78>)
 80824ac:	6013      	str	r3, [r2, #0]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 80824ae:	f7ff ffd9 	bl	8082464 <_Z13transmitPM2_5Pc>
 80824b2:	f00b ffa5 	bl	808e400 <__aeabi_f2iz>
 80824b6:	4b0e      	ldr	r3, [pc, #56]	; (80824f0 <_Z13readPlantowerv+0x7c>)
//transmit PM Value to PC
int transmitPM10(char *thebuf)  {
    int PM10Val;
    PM10Val=((thebuf[7]<<8) + thebuf[8]); //count PM10 value of the air detector module
 80824b8:	79e2      	ldrb	r2, [r4, #7]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 80824ba:	6018      	str	r0, [r3, #0]
    PM10Val=((thebuf[7]<<8) + thebuf[8]); //count PM10 value of the air detector module
 80824bc:	7a23      	ldrb	r3, [r4, #8]
 80824be:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                  PM10Value=transmitPM10(buf); //count PM10 value of the air detector module
 80824c2:	4a0c      	ldr	r2, [pc, #48]	; (80824f4 <_Z13readPlantowerv+0x80>)
 80824c4:	6013      	str	r3, [r2, #0]
}
 80824c6:	bd10      	pop	{r4, pc}
        while(Serial4.available()){
 80824c8:	f7fe fcb8 	bl	8080e3c <_Z22__fetch_global_Serial4v>
 80824cc:	6803      	ldr	r3, [r0, #0]
 80824ce:	691b      	ldr	r3, [r3, #16]
 80824d0:	4798      	blx	r3
 80824d2:	2800      	cmp	r0, #0
 80824d4:	d0f7      	beq.n	80824c6 <_Z13readPlantowerv+0x52>
            char clearBuffer = Serial4.read();
 80824d6:	f7fe fcb1 	bl	8080e3c <_Z22__fetch_global_Serial4v>
 80824da:	6803      	ldr	r3, [r0, #0]
 80824dc:	695b      	ldr	r3, [r3, #20]
 80824de:	4798      	blx	r3
        while(Serial4.available()){
 80824e0:	e7f2      	b.n	80824c8 <_Z13readPlantowerv+0x54>
 80824e2:	bf00      	nop
 80824e4:	08092bac 	.word	0x08092bac
 80824e8:	200005fc 	.word	0x200005fc
 80824ec:	200002f4 	.word	0x200002f4
 80824f0:	200002fc 	.word	0x200002fc
 80824f4:	200002f8 	.word	0x200002f8

080824f8 <_Z15outputParticlesv>:
void outputParticles(){
 80824f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        float pressure_correction = bme.pressure/100;
 80824fc:	4e94      	ldr	r6, [pc, #592]	; (8082750 <_Z15outputParticlesv+0x258>)
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 80824fe:	f8df a294 	ldr.w	sl, [pc, #660]	; 8082794 <_Z15outputParticlesv+0x29c>
            pressure_correction /= SEALEVELPRESSURE_HPA;
 8082502:	f8df b294 	ldr.w	fp, [pc, #660]	; 8082798 <_Z15outputParticlesv+0x2a0>
void outputParticles(){
 8082506:	b0c1      	sub	sp, #260	; 0x104
    while(!Serial.available()){
 8082508:	f00a fae6 	bl	808cad8 <_Z16_fetch_usbserialv>
 808250c:	6803      	ldr	r3, [r0, #0]
 808250e:	691b      	ldr	r3, [r3, #16]
 8082510:	4798      	blx	r3
 8082512:	4604      	mov	r4, r0
 8082514:	2800      	cmp	r0, #0
 8082516:	f040 8110 	bne.w	808273a <_Z15outputParticlesv+0x242>
        if (! bme.performReading()) {
 808251a:	488e      	ldr	r0, [pc, #568]	; (8082754 <_Z15outputParticlesv+0x25c>)
 808251c:	f006 fd84 	bl	8089028 <_ZN15Adafruit_BME68014performReadingEv>
 8082520:	b920      	cbnz	r0, 808252c <_Z15outputParticlesv+0x34>
          Serial.println("Failed to read BME680");
 8082522:	f00a fad9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082526:	498c      	ldr	r1, [pc, #560]	; (8082758 <_Z15outputParticlesv+0x260>)
 8082528:	f009 fa1b 	bl	808b962 <_ZN5Print7printlnEPKc>
        readPlantower();
 808252c:	f7ff ffa2 	bl	8082474 <_Z13readPlantowerv>
        readGpsStream();
 8082530:	f7ff fc4e 	bl	8081dd0 <_Z13readGpsStreamv>
        CO2_float = t6713.readPPM();
 8082534:	4889      	ldr	r0, [pc, #548]	; (808275c <_Z15outputParticlesv+0x264>)
 8082536:	f005 f863 	bl	8087600 <_ZN13Telaire_T67137readPPMEv>
        CO2_float += CO2_zero;
 808253a:	4b89      	ldr	r3, [pc, #548]	; (8082760 <_Z15outputParticlesv+0x268>)
        CO2_float = t6713.readPPM();
 808253c:	4607      	mov	r7, r0
        CO2_float += CO2_zero;
 808253e:	6818      	ldr	r0, [r3, #0]
 8082540:	f00b fd44 	bl	808dfcc <__aeabi_i2f>
 8082544:	4605      	mov	r5, r0
        CO2_float = t6713.readPPM();
 8082546:	4638      	mov	r0, r7
 8082548:	f00b fd40 	bl	808dfcc <__aeabi_i2f>
 808254c:	4601      	mov	r1, r0
        CO2_float += CO2_zero;
 808254e:	4628      	mov	r0, r5
 8082550:	f00b fc88 	bl	808de64 <__addsf3>
        CO2_float *= CO2_slope;
 8082554:	4b83      	ldr	r3, [pc, #524]	; (8082764 <_Z15outputParticlesv+0x26c>)
 8082556:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8082790 <_Z15outputParticlesv+0x298>
 808255a:	6819      	ldr	r1, [r3, #0]
 808255c:	f00b fd8a 	bl	808e074 <__aeabi_fmul>
        float pressure_correction = bme.pressure/100;
 8082560:	4b7c      	ldr	r3, [pc, #496]	; (8082754 <_Z15outputParticlesv+0x25c>)
 8082562:	4631      	mov	r1, r6
        CO2_float *= CO2_slope;
 8082564:	f8c8 0000 	str.w	r0, [r8]
 8082568:	4605      	mov	r5, r0
        float pressure_correction = bme.pressure/100;
 808256a:	6858      	ldr	r0, [r3, #4]
 808256c:	f00b fe36 	bl	808e1dc <__aeabi_fdiv>
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8082570:	4631      	mov	r1, r6
        float pressure_correction = bme.pressure/100;
 8082572:	4607      	mov	r7, r0
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8082574:	f00b ff3a 	bl	808e3ec <__aeabi_fcmpgt>
 8082578:	b168      	cbz	r0, 8082596 <_Z15outputParticlesv+0x9e>
 808257a:	4651      	mov	r1, sl
 808257c:	4638      	mov	r0, r7
 808257e:	f00b ff17 	bl	808e3b0 <__aeabi_fcmplt>
 8082582:	b140      	cbz	r0, 8082596 <_Z15outputParticlesv+0x9e>
            pressure_correction /= SEALEVELPRESSURE_HPA;
 8082584:	4659      	mov	r1, fp
 8082586:	4638      	mov	r0, r7
 8082588:	f00b fe28 	bl	808e1dc <__aeabi_fdiv>
            CO2_float *= pressure_correction;
 808258c:	4629      	mov	r1, r5
 808258e:	f00b fd71 	bl	808e074 <__aeabi_fmul>
 8082592:	f8c8 0000 	str.w	r0, [r8]
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8082596:	f7ff f8d9 	bl	808174c <_Z12readHumidityv>
 808259a:	4607      	mov	r7, r0
 808259c:	f7ff f8d6 	bl	808174c <_Z12readHumidityv>
 80825a0:	4631      	mov	r1, r6
 80825a2:	4605      	mov	r5, r0
 80825a4:	4638      	mov	r0, r7
 80825a6:	f00b fe19 	bl	808e1dc <__aeabi_fdiv>
 80825aa:	f00b f8b5 	bl	808d718 <__aeabi_f2d>
 80825ae:	a364      	add	r3, pc, #400	; (adr r3, 8082740 <_Z15outputParticlesv+0x248>)
 80825b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80825b4:	f00b f908 	bl	808d7c8 <__aeabi_dmul>
 80825b8:	4680      	mov	r8, r0
 80825ba:	4689      	mov	r9, r1
 80825bc:	4628      	mov	r0, r5
 80825be:	4631      	mov	r1, r6
 80825c0:	f00b fe0c 	bl	808e1dc <__aeabi_fdiv>
 80825c4:	4601      	mov	r1, r0
 80825c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80825ca:	f00b fc49 	bl	808de60 <__aeabi_fsub>
 80825ce:	f00b f8a3 	bl	808d718 <__aeabi_f2d>
 80825d2:	4602      	mov	r2, r0
 80825d4:	460b      	mov	r3, r1
 80825d6:	4640      	mov	r0, r8
 80825d8:	4649      	mov	r1, r9
 80825da:	f00b fa1f 	bl	808da1c <__aeabi_ddiv>
 80825de:	a35a      	add	r3, pc, #360	; (adr r3, 8082748 <_Z15outputParticlesv+0x250>)
 80825e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80825e4:	f00a ff3a 	bl	808d45c <__adddf3>
 80825e8:	f00b fbe6 	bl	808ddb8 <__aeabi_d2f>
 80825ec:	4605      	mov	r5, r0
 80825ee:	4b5e      	ldr	r3, [pc, #376]	; (8082768 <_Z15outputParticlesv+0x270>)
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 80825f0:	4f5e      	ldr	r7, [pc, #376]	; (808276c <_Z15outputParticlesv+0x274>)
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 80825f2:	6018      	str	r0, [r3, #0]
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 80825f4:	4b5e      	ldr	r3, [pc, #376]	; (8082770 <_Z15outputParticlesv+0x278>)
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 80825f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 808279c <_Z15outputParticlesv+0x2a4>
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 80825fa:	6818      	ldr	r0, [r3, #0]
 80825fc:	f00b fce6 	bl	808dfcc <__aeabi_i2f>
 8082600:	4629      	mov	r1, r5
 8082602:	f00b fd37 	bl	808e074 <__aeabi_fmul>
            wordBytes.myWord = gps.get_latitudeWhole();
 8082606:	4d5b      	ldr	r5, [pc, #364]	; (8082774 <_Z15outputParticlesv+0x27c>)
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8082608:	6038      	str	r0, [r7, #0]
        for(int i=0; i<5; i++){
 808260a:	f10d 090c 	add.w	r9, sp, #12
            ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 808260e:	2201      	movs	r2, #1
 8082610:	f889 2000 	strb.w	r2, [r9]
            wordBytes.myWord = DEVICE_id;
 8082614:	4a58      	ldr	r2, [pc, #352]	; (8082778 <_Z15outputParticlesv+0x280>)
 8082616:	6812      	ldr	r2, [r2, #0]
            ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082618:	f889 2001 	strb.w	r2, [r9, #1]
            ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 808261c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8082620:	f889 2002 	strb.w	r2, [r9, #2]
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8082624:	f8d8 2000 	ldr.w	r2, [r8]
 8082628:	f889 2003 	strb.w	r2, [r9, #3]
            if(i == 0){
 808262c:	2c00      	cmp	r4, #0
 808262e:	d166      	bne.n	80826fe <_Z15outputParticlesv+0x206>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8082630:	2278      	movs	r2, #120	; 0x78
                floatBytes.myFloat = fuel.getSoC();
 8082632:	4852      	ldr	r0, [pc, #328]	; (808277c <_Z15outputParticlesv+0x284>)
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8082634:	f88d 2010 	strb.w	r2, [sp, #16]
                floatBytes.myFloat = fuel.getSoC();
 8082638:	f009 fde6 	bl	808c208 <_ZN9FuelGauge6getSoCEv>
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 808263c:	f3c0 2207 	ubfx	r2, r0, #8, #8
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 8082640:	f889 0005 	strb.w	r0, [r9, #5]
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8082644:	f889 2006 	strb.w	r2, [r9, #6]
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8082648:	f3c0 4207 	ubfx	r2, r0, #16, #8
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 808264c:	f3c0 6007 	ubfx	r0, r0, #24, #8
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8082650:	f889 2007 	strb.w	r2, [r9, #7]
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8082654:	f889 0008 	strb.w	r0, [r9, #8]
            wordBytes.myWord = gps.get_latitudeWhole();
 8082658:	4628      	mov	r0, r5
 808265a:	f004 ff48 	bl	80874ee <_ZN3GPS17get_latitudeWholeEv>
            ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808265e:	f889 0009 	strb.w	r0, [r9, #9]
            ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082662:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8082666:	f889 000a 	strb.w	r0, [r9, #10]
            wordBytes.myWord = gps.get_latitudeFrac();
 808266a:	4628      	mov	r0, r5
 808266c:	f004 ff42 	bl	80874f4 <_ZN3GPS16get_latitudeFracEv>
            ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082670:	f889 000b 	strb.w	r0, [r9, #11]
            ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082674:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8082678:	f889 000c 	strb.w	r0, [r9, #12]
            wordBytes.myWord = gps.get_longitudeWhole();
 808267c:	4628      	mov	r0, r5
 808267e:	f004 ff3c 	bl	80874fa <_ZN3GPS18get_longitudeWholeEv>
            ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082682:	f889 000d 	strb.w	r0, [r9, #13]
            ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082686:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808268a:	f889 000e 	strb.w	r0, [r9, #14]
            wordBytes.myWord = gps.get_longitudeFrac();
 808268e:	4628      	mov	r0, r5
 8082690:	f004 ff36 	bl	8087500 <_ZN3GPS17get_longitudeFracEv>
            ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8082694:	f889 000f 	strb.w	r0, [r9, #15]
            ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8082698:	f3c0 2007 	ubfx	r0, r0, #8, #8
 808269c:	f889 0010 	strb.w	r0, [r9, #16]
            int northSouth = gps.get_nsIndicator();
 80826a0:	4628      	mov	r0, r5
 80826a2:	f004 ff30 	bl	8087506 <_ZN3GPS15get_nsIndicatorEv>
 80826a6:	9001      	str	r0, [sp, #4]
            int eastWest = gps.get_ewIndicator();
 80826a8:	4628      	mov	r0, r5
 80826aa:	f004 ff2f 	bl	808750c <_ZN3GPS15get_ewIndicatorEv>
            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 80826ae:	9a01      	ldr	r2, [sp, #4]
        for(int i=0; i<5; i++){
 80826b0:	3401      	adds	r4, #1
            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 80826b2:	4302      	orrs	r2, r0
 80826b4:	f889 2011 	strb.w	r2, [r9, #17]
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 80826b8:	4628      	mov	r0, r5
 80826ba:	f004 ff13 	bl	80874e4 <_ZN3GPS23get_horizontalDillutionEv>
            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 80826be:	2223      	movs	r2, #35	; 0x23
        for(int i=0; i<5; i++){
 80826c0:	2c05      	cmp	r4, #5
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 80826c2:	f889 0012 	strb.w	r0, [r9, #18]
            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 80826c6:	f889 2013 	strb.w	r2, [r9, #19]
        for(int i=0; i<5; i++){
 80826ca:	f109 0916 	add.w	r9, r9, #22
 80826ce:	d19e      	bne.n	808260e <_Z15outputParticlesv+0x116>
        Serial1.print("$");
 80826d0:	f00a fb4c 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 80826d4:	492a      	ldr	r1, [pc, #168]	; (8082780 <_Z15outputParticlesv+0x288>)
 80826d6:	f009 f931 	bl	808b93c <_ZN5Print5printEPKc>
        Serial1.write(ble_output_array, 5*BLE_PAYLOAD_SIZE);
 80826da:	f00a fb47 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 80826de:	6803      	ldr	r3, [r0, #0]
 80826e0:	226e      	movs	r2, #110	; 0x6e
 80826e2:	68db      	ldr	r3, [r3, #12]
 80826e4:	a903      	add	r1, sp, #12
 80826e6:	4798      	blx	r3
        Serial1.print("&");
 80826e8:	f00a fb40 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 80826ec:	4925      	ldr	r1, [pc, #148]	; (8082784 <_Z15outputParticlesv+0x28c>)
 80826ee:	f009 f925 	bl	808b93c <_ZN5Print5printEPKc>
        sample_counter += 1;
 80826f2:	f8d8 3000 	ldr.w	r3, [r8]
 80826f6:	3301      	adds	r3, #1
 80826f8:	f8c8 3000 	str.w	r3, [r8]
    while(!Serial.available()){
 80826fc:	e704      	b.n	8082508 <_Z15outputParticlesv+0x10>
            }else if(i == 1){
 80826fe:	2c01      	cmp	r4, #1
 8082700:	d107      	bne.n	8082712 <_Z15outputParticlesv+0x21a>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8082702:	2272      	movs	r2, #114	; 0x72
 8082704:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                floatBytes.myFloat = PM01Value;
 8082708:	4a1f      	ldr	r2, [pc, #124]	; (8082788 <_Z15outputParticlesv+0x290>)
                floatBytes.myFloat = PM10Value;
 808270a:	6810      	ldr	r0, [r2, #0]
 808270c:	f00b fc5e 	bl	808dfcc <__aeabi_i2f>
 8082710:	e794      	b.n	808263c <_Z15outputParticlesv+0x144>
            }else if(i == 2){
 8082712:	2c02      	cmp	r4, #2
 8082714:	d104      	bne.n	8082720 <_Z15outputParticlesv+0x228>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8082716:	2252      	movs	r2, #82	; 0x52
                floatBytes.myFloat = corrected_PM_25;
 8082718:	6838      	ldr	r0, [r7, #0]
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 808271a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
                floatBytes.myFloat = corrected_PM_25;
 808271e:	e78d      	b.n	808263c <_Z15outputParticlesv+0x144>
            }else if(i == 3){
 8082720:	2c03      	cmp	r4, #3
 8082722:	d104      	bne.n	808272e <_Z15outputParticlesv+0x236>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 8082724:	2271      	movs	r2, #113	; 0x71
 8082726:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
                floatBytes.myFloat = PM10Value;
 808272a:	4a18      	ldr	r2, [pc, #96]	; (808278c <_Z15outputParticlesv+0x294>)
 808272c:	e7ed      	b.n	808270a <_Z15outputParticlesv+0x212>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 808272e:	2243      	movs	r2, #67	; 0x43
                floatBytes.myFloat = CO2_float;
 8082730:	4b17      	ldr	r3, [pc, #92]	; (8082790 <_Z15outputParticlesv+0x298>)
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8082732:	f889 2004 	strb.w	r2, [r9, #4]
                floatBytes.myFloat = CO2_float;
 8082736:	6818      	ldr	r0, [r3, #0]
 8082738:	e780      	b.n	808263c <_Z15outputParticlesv+0x144>
}
 808273a:	b041      	add	sp, #260	; 0x104
 808273c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082740:	b4395810 	.word	0xb4395810
 8082744:	3fbe76c8 	.word	0x3fbe76c8
 8082748:	70a3d70a 	.word	0x70a3d70a
 808274c:	3ff30a3d 	.word	0x3ff30a3d
 8082750:	42c80000 	.word	0x42c80000
 8082754:	20000584 	.word	0x20000584
 8082758:	080908d0 	.word	0x080908d0
 808275c:	20000c92 	.word	0x20000c92
 8082760:	200002d4 	.word	0x200002d4
 8082764:	200002cc 	.word	0x200002cc
 8082768:	200007b8 	.word	0x200007b8
 808276c:	20000624 	.word	0x20000624
 8082770:	200002fc 	.word	0x200002fc
 8082774:	200006b8 	.word	0x200006b8
 8082778:	20000080 	.word	0x20000080
 808277c:	200006a4 	.word	0x200006a4
 8082780:	080908e6 	.word	0x080908e6
 8082784:	0809192d 	.word	0x0809192d
 8082788:	200002f4 	.word	0x200002f4
 808278c:	200002f8 	.word	0x200002f8
 8082790:	200002c4 	.word	0x200002c4
 8082794:	44bb8000 	.word	0x44bb8000
 8082798:	447d5000 	.word	0x447d5000
 808279c:	200007f4 	.word	0x200007f4

080827a0 <_Z9goToSleepv>:
    return PM10Val;
}

void goToSleep(void){
 80827a0:	b500      	push	{lr}
    //Serial.println("Going to sleep:)");
    digitalWrite(power_led_en, LOW);
 80827a2:	4b1e      	ldr	r3, [pc, #120]	; (808281c <_Z9goToSleepv+0x7c>)
void goToSleep(void){
 80827a4:	b089      	sub	sp, #36	; 0x24
    digitalWrite(power_led_en, LOW);
 80827a6:	8818      	ldrh	r0, [r3, #0]
 80827a8:	2100      	movs	r1, #0
 80827aa:	f00a fd5a 	bl	808d262 <digitalWrite>
    digitalWrite(plantower_en, LOW);
 80827ae:	4b1c      	ldr	r3, [pc, #112]	; (8082820 <_Z9goToSleepv+0x80>)
 80827b0:	2100      	movs	r1, #0
 80827b2:	8818      	ldrh	r0, [r3, #0]
 80827b4:	f00a fd55 	bl	808d262 <digitalWrite>
    digitalWrite(esp_wroom_en, LOW);
 80827b8:	4b1a      	ldr	r3, [pc, #104]	; (8082824 <_Z9goToSleepv+0x84>)
 80827ba:	2100      	movs	r1, #0
 80827bc:	8818      	ldrh	r0, [r3, #0]
 80827be:	f00a fd50 	bl	808d262 <digitalWrite>
    digitalWrite(blower_en, LOW);
 80827c2:	4b19      	ldr	r3, [pc, #100]	; (8082828 <_Z9goToSleepv+0x88>)
 80827c4:	2100      	movs	r1, #0
 80827c6:	8818      	ldrh	r0, [r3, #0]
 80827c8:	f00a fd4b 	bl	808d262 <digitalWrite>
    digitalWrite(co2_en, LOW);
 80827cc:	4b17      	ldr	r3, [pc, #92]	; (808282c <_Z9goToSleepv+0x8c>)
 80827ce:	2100      	movs	r1, #0
 80827d0:	8818      	ldrh	r0, [r3, #0]
 80827d2:	f00a fd46 	bl	808d262 <digitalWrite>
    digitalWrite(fiveVolt_en, LOW);
 80827d6:	4b16      	ldr	r3, [pc, #88]	; (8082830 <_Z9goToSleepv+0x90>)
 80827d8:	2100      	movs	r1, #0
 80827da:	8818      	ldrh	r0, [r3, #0]
 80827dc:	f00a fd41 	bl	808d262 <digitalWrite>
    enableLowPowerGPS();
 80827e0:	f7fe ff28 	bl	8081634 <_Z17enableLowPowerGPSv>
    System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
 80827e4:	2104      	movs	r1, #4
 80827e6:	4b13      	ldr	r3, [pc, #76]	; (8082834 <_Z9goToSleepv+0x94>)
 80827e8:	4a13      	ldr	r2, [pc, #76]	; (8082838 <_Z9goToSleepv+0x98>)
 80827ea:	681b      	ldr	r3, [r3, #0]
 80827ec:	6812      	ldr	r2, [r2, #0]
 80827ee:	005b      	lsls	r3, r3, #1
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(sleepMode, flag, s.count()); }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(std::chrono::seconds s) { return sleep(s.count()); }

    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) { return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag); }
 80827f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80827f4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80827f8:	2201      	movs	r2, #1
 80827fa:	2102      	movs	r1, #2
 80827fc:	9200      	str	r2, [sp, #0]
 80827fe:	f88d 1015 	strb.w	r1, [sp, #21]
 8082802:	f10d 0315 	add.w	r3, sp, #21
 8082806:	f10d 0116 	add.w	r1, sp, #22
 808280a:	a806      	add	r0, sp, #24
 808280c:	f008 fcf6 	bl	808b1fc <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
    System.reset();
 8082810:	f008 fcda 	bl	808b1c8 <_ZN11SystemClass5resetEv>
}
 8082814:	b009      	add	sp, #36	; 0x24
 8082816:	f85d fb04 	ldr.w	pc, [sp], #4
 808281a:	bf00      	nop
 808281c:	200000d4 	.word	0x200000d4
 8082820:	200000d0 	.word	0x200000d0
 8082824:	20000090 	.word	0x20000090
 8082828:	20000088 	.word	0x20000088
 808282c:	2000008c 	.word	0x2000008c
 8082830:	20000094 	.word	0x20000094
 8082834:	200000d8 	.word	0x200000d8
 8082838:	2000032c 	.word	0x2000032c

0808283c <_Z16goToSleepBatteryv>:

void goToSleepBattery(void){
 808283c:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 808283e:	4c2c      	ldr	r4, [pc, #176]	; (80828f0 <_Z16goToSleepBatteryv+0xb4>)
 8082840:	2101      	movs	r1, #1
 8082842:	8820      	ldrh	r0, [r4, #0]
 8082844:	f00a fd0d 	bl	808d262 <digitalWrite>
    delay(250);                   // waits for a second
 8082848:	20fa      	movs	r0, #250	; 0xfa
 808284a:	f009 fc53 	bl	808c0f4 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808284e:	2100      	movs	r1, #0
 8082850:	8820      	ldrh	r0, [r4, #0]
 8082852:	f00a fd06 	bl	808d262 <digitalWrite>
    delay(250);                   // waits for a second
 8082856:	20fa      	movs	r0, #250	; 0xfa
 8082858:	f009 fc4c 	bl	808c0f4 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 808285c:	2101      	movs	r1, #1
 808285e:	8820      	ldrh	r0, [r4, #0]
 8082860:	f00a fcff 	bl	808d262 <digitalWrite>
    delay(250);                   // waits for a second
 8082864:	20fa      	movs	r0, #250	; 0xfa
 8082866:	f009 fc45 	bl	808c0f4 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808286a:	2100      	movs	r1, #0
 808286c:	8820      	ldrh	r0, [r4, #0]
 808286e:	f00a fcf8 	bl	808d262 <digitalWrite>
    delay(250);                   // waits for a second
 8082872:	20fa      	movs	r0, #250	; 0xfa
 8082874:	f009 fc3e 	bl	808c0f4 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8082878:	2101      	movs	r1, #1
 808287a:	8820      	ldrh	r0, [r4, #0]
 808287c:	f00a fcf1 	bl	808d262 <digitalWrite>
    delay(250);                   // waits for a second
 8082880:	20fa      	movs	r0, #250	; 0xfa
 8082882:	f009 fc37 	bl	808c0f4 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082886:	2100      	movs	r1, #0
 8082888:	8820      	ldrh	r0, [r4, #0]
 808288a:	f00a fcea 	bl	808d262 <digitalWrite>
    delay(250);                   // waits for a second
 808288e:	20fa      	movs	r0, #250	; 0xfa
 8082890:	f009 fc30 	bl	808c0f4 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082894:	2101      	movs	r1, #1
 8082896:	8820      	ldrh	r0, [r4, #0]
 8082898:	f00a fce3 	bl	808d262 <digitalWrite>
    delay(250);                   // waits for a second
 808289c:	20fa      	movs	r0, #250	; 0xfa
 808289e:	f009 fc29 	bl	808c0f4 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80828a2:	2100      	movs	r1, #0
 80828a4:	8820      	ldrh	r0, [r4, #0]
 80828a6:	f00a fcdc 	bl	808d262 <digitalWrite>
    delay(250);                   // waits for a second
 80828aa:	20fa      	movs	r0, #250	; 0xfa
 80828ac:	f009 fc22 	bl	808c0f4 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 80828b0:	2101      	movs	r1, #1
 80828b2:	8820      	ldrh	r0, [r4, #0]
 80828b4:	f00a fcd5 	bl	808d262 <digitalWrite>
    delay(250);                   // waits for a second
 80828b8:	20fa      	movs	r0, #250	; 0xfa
 80828ba:	f009 fc1b 	bl	808c0f4 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80828be:	2100      	movs	r1, #0
 80828c0:	8820      	ldrh	r0, [r4, #0]
 80828c2:	f00a fcce 	bl	808d262 <digitalWrite>
    delay(250);                   // waits for a second
 80828c6:	20fa      	movs	r0, #250	; 0xfa
 80828c8:	f009 fc14 	bl	808c0f4 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 80828cc:	2101      	movs	r1, #1
 80828ce:	8820      	ldrh	r0, [r4, #0]
 80828d0:	f00a fcc7 	bl	808d262 <digitalWrite>
    delay(250);                   // waits for a second
 80828d4:	20fa      	movs	r0, #250	; 0xfa
 80828d6:	f009 fc0d 	bl	808c0f4 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80828da:	8820      	ldrh	r0, [r4, #0]
 80828dc:	2100      	movs	r1, #0
 80828de:	f00a fcc0 	bl	808d262 <digitalWrite>
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}
 80828e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeRegister(7, 0b01101011);   //turn off batfet
 80828e6:	216b      	movs	r1, #107	; 0x6b
 80828e8:	2007      	movs	r0, #7
 80828ea:	f7fe bb49 	b.w	8080f80 <_Z13writeRegisterhh>
 80828ee:	bf00      	nop
 80828f0:	200000d4 	.word	0x200000d4

080828f4 <_Z8resetESPv>:

void resetESP(void){
 80828f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(esp_wroom_en, LOW);
 80828f6:	4f17      	ldr	r7, [pc, #92]	; (8082954 <_Z8resetESPv+0x60>)
  digitalWrite(plantower_en, LOW);
 80828f8:	4e17      	ldr	r6, [pc, #92]	; (8082958 <_Z8resetESPv+0x64>)
  digitalWrite(esp_wroom_en, LOW);
 80828fa:	8838      	ldrh	r0, [r7, #0]
  digitalWrite(blower_en, LOW);
 80828fc:	4d17      	ldr	r5, [pc, #92]	; (808295c <_Z8resetESPv+0x68>)
  digitalWrite(esp_wroom_en, LOW);
 80828fe:	2100      	movs	r1, #0
 8082900:	f00a fcaf 	bl	808d262 <digitalWrite>
  digitalWrite(co2_en, LOW);
 8082904:	4c16      	ldr	r4, [pc, #88]	; (8082960 <_Z8resetESPv+0x6c>)
  digitalWrite(plantower_en, LOW);
 8082906:	8830      	ldrh	r0, [r6, #0]
 8082908:	2100      	movs	r1, #0
 808290a:	f00a fcaa 	bl	808d262 <digitalWrite>
  digitalWrite(blower_en, LOW);
 808290e:	8828      	ldrh	r0, [r5, #0]
 8082910:	2100      	movs	r1, #0
 8082912:	f00a fca6 	bl	808d262 <digitalWrite>
  digitalWrite(co2_en, LOW);
 8082916:	2100      	movs	r1, #0
 8082918:	8820      	ldrh	r0, [r4, #0]
 808291a:	f00a fca2 	bl	808d262 <digitalWrite>
  delay(1000);
 808291e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8082922:	f009 fbe7 	bl	808c0f4 <delay>
  digitalWrite(esp_wroom_en, HIGH);
 8082926:	8838      	ldrh	r0, [r7, #0]
 8082928:	2101      	movs	r1, #1
 808292a:	f00a fc9a 	bl	808d262 <digitalWrite>
  digitalWrite(plantower_en, HIGH);
 808292e:	8830      	ldrh	r0, [r6, #0]
 8082930:	2101      	movs	r1, #1
 8082932:	f00a fc96 	bl	808d262 <digitalWrite>
  digitalWrite(blower_en, HIGH);
 8082936:	8828      	ldrh	r0, [r5, #0]
 8082938:	2101      	movs	r1, #1
 808293a:	f00a fc92 	bl	808d262 <digitalWrite>
  digitalWrite(co2_en, HIGH);
 808293e:	8820      	ldrh	r0, [r4, #0]
 8082940:	2101      	movs	r1, #1
 8082942:	f00a fc8e 	bl	808d262 <digitalWrite>
  delay(1000);
}
 8082946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
 808294a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808294e:	f009 bbd1 	b.w	808c0f4 <delay>
 8082952:	bf00      	nop
 8082954:	20000090 	.word	0x20000090
 8082958:	200000d0 	.word	0x200000d0
 808295c:	20000088 	.word	0x20000088
 8082960:	2000008c 	.word	0x2000008c

08082964 <_Z26serialIncreaseInputCurrentv>:
    Serial.println("failed writing string");
  }

}

void serialIncreaseInputCurrent(void){
 8082964:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8082966:	481d      	ldr	r0, [pc, #116]	; (80829dc <_Z26serialIncreaseInputCurrentv+0x78>)
 8082968:	f008 fa0c 	bl	808ad84 <_ZN4PMIC20getInputCurrentLimitEv>
 808296c:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 808296e:	f00a f8b3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082972:	462a      	mov	r2, r5
 8082974:	491a      	ldr	r1, [pc, #104]	; (80829e0 <_Z26serialIncreaseInputCurrentv+0x7c>)
 8082976:	f7fe f993 	bl	8080ca0 <_ZN5Print6printfEPKcz>

    if(inputCurrent == 100){
 808297a:	2d64      	cmp	r5, #100	; 0x64
 808297c:	d01f      	beq.n	80829be <_Z26serialIncreaseInputCurrentv+0x5a>
        inputCurrent = 150;
    }else if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 150){
 808297e:	2d96      	cmp	r5, #150	; 0x96
 8082980:	d01f      	beq.n	80829c2 <_Z26serialIncreaseInputCurrentv+0x5e>
        inputCurrent = 500;
    }else if(inputCurrent == 500){
 8082982:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8082986:	d01f      	beq.n	80829c8 <_Z26serialIncreaseInputCurrentv+0x64>
        inputCurrent = 900;
    }else if(inputCurrent == 900){
 8082988:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 808298c:	d01f      	beq.n	80829ce <_Z26serialIncreaseInputCurrentv+0x6a>
        inputCurrent = 1200;
    }else if(inputCurrent == 1200){
 808298e:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8082992:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8082996:	d007      	beq.n	80829a8 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
 8082998:	42a5      	cmp	r5, r4
 808299a:	d01b      	beq.n	80829d4 <_Z26serialIncreaseInputCurrentv+0x70>
        inputCurrent = 2000;
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
 808299c:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80829a0:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80829a4:	bf18      	it	ne
 80829a6:	462c      	movne	r4, r5
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 80829a8:	b2a1      	uxth	r1, r4
 80829aa:	480c      	ldr	r0, [pc, #48]	; (80829dc <_Z26serialIncreaseInputCurrentv+0x78>)
 80829ac:	f008 fa2b 	bl	808ae06 <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 80829b0:	f00a f892 	bl	808cad8 <_Z16_fetch_usbserialv>
 80829b4:	4622      	mov	r2, r4
 80829b6:	490b      	ldr	r1, [pc, #44]	; (80829e4 <_Z26serialIncreaseInputCurrentv+0x80>)
 80829b8:	f7fe f972 	bl	8080ca0 <_ZN5Print6printfEPKcz>
}
 80829bc:	bd38      	pop	{r3, r4, r5, pc}
        inputCurrent = 150;
 80829be:	2496      	movs	r4, #150	; 0x96
 80829c0:	e7f2      	b.n	80829a8 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 500;
 80829c2:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 80829c6:	e7ef      	b.n	80829a8 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 900;
 80829c8:	f44f 7461 	mov.w	r4, #900	; 0x384
 80829cc:	e7ec      	b.n	80829a8 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 1200;
 80829ce:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 80829d2:	e7e9      	b.n	80829a8 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 2000;
 80829d4:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80829d8:	e7e6      	b.n	80829a8 <_Z26serialIncreaseInputCurrentv+0x44>
 80829da:	bf00      	nop
 80829dc:	200007bc 	.word	0x200007bc
 80829e0:	080908e8 	.word	0x080908e8
 80829e4:	08090906 	.word	0x08090906

080829e8 <_Z27serialIncreaseChargeCurrentv>:

void serialIncreaseChargeCurrent(void){
 80829e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 80829ea:	482d      	ldr	r0, [pc, #180]	; (8082aa0 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 80829ec:	f008 f9d6 	bl	808ad9c <_ZN4PMIC16getChargeCurrentEv>
    //bit 7
    if(chargeCurrent & 0x80){
        total_current += 2048;
 80829f0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80829f4:	bf14      	ite	ne
 80829f6:	f44f 6500 	movne.w	r5, #2048	; 0x800
 80829fa:	2500      	moveq	r5, #0
    byte chargeCurrent = pmic.getChargeCurrent();
 80829fc:	4604      	mov	r4, r0
    }
    //bit 6
    if(chargeCurrent & 0x40){
 80829fe:	0643      	lsls	r3, r0, #25
        total_current += 1024;
 8082a00:	bf48      	it	mi
 8082a02:	f505 6580 	addmi.w	r5, r5, #1024	; 0x400
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8082a06:	0686      	lsls	r6, r0, #26
        total_current += 512;
 8082a08:	bf48      	it	mi
 8082a0a:	f505 7500 	addmi.w	r5, r5, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8082a0e:	06e0      	lsls	r0, r4, #27
        total_current += 256;
 8082a10:	bf48      	it	mi
 8082a12:	f505 7580 	addmi.w	r5, r5, #256	; 0x100
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8082a16:	0721      	lsls	r1, r4, #28
        total_current += 128;
 8082a18:	bf48      	it	mi
 8082a1a:	3580      	addmi	r5, #128	; 0x80
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8082a1c:	0762      	lsls	r2, r4, #29
        total_current += 64;
 8082a1e:	bf48      	it	mi
 8082a20:	3540      	addmi	r5, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8082a22:	f00a f859 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082a26:	462a      	mov	r2, r5
 8082a28:	491e      	ldr	r1, [pc, #120]	; (8082aa4 <_Z27serialIncreaseChargeCurrentv+0xbc>)
 8082a2a:	f7fe f939 	bl	8080ca0 <_ZN5Print6printfEPKcz>
    chargeCurrent += 4;
 8082a2e:	1d20      	adds	r0, r4, #4
    total_current = 0;

    if(chargeCurrent & 0x80){
 8082a30:	0603      	lsls	r3, r0, #24
    bool bit7 = 0;
 8082a32:	bf56      	itet	pl
 8082a34:	2100      	movpl	r1, #0
        total_current += 2048;
 8082a36:	f44f 6500 	movmi.w	r5, #2048	; 0x800
    total_current = 0;
 8082a3a:	460d      	movpl	r5, r1
    chargeCurrent += 4;
 8082a3c:	b2c4      	uxtb	r4, r0
        bit7 = 1;
 8082a3e:	bf48      	it	mi
 8082a40:	2101      	movmi	r1, #1
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8082a42:	f014 0240 	ands.w	r2, r4, #64	; 0x40
        total_current += 1024;
 8082a46:	bf1c      	itt	ne
 8082a48:	f505 6580 	addne.w	r5, r5, #1024	; 0x400
        bit6 = 1;
 8082a4c:	2201      	movne	r2, #1
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8082a4e:	f014 0320 	ands.w	r3, r4, #32
        total_current += 512;
        bit5 = 1;
 8082a52:	bf1c      	itt	ne
 8082a54:	2301      	movne	r3, #1
        total_current += 512;
 8082a56:	f505 7500 	addne.w	r5, r5, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8082a5a:	f014 0010 	ands.w	r0, r4, #16
        total_current += 256;
 8082a5e:	bf1c      	itt	ne
 8082a60:	f505 7580 	addne.w	r5, r5, #256	; 0x100
        bit4 = 1;
 8082a64:	2001      	movne	r0, #1
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8082a66:	f014 0608 	ands.w	r6, r4, #8
        total_current += 128;
 8082a6a:	bf1c      	itt	ne
 8082a6c:	3580      	addne	r5, #128	; 0x80
        bit3 = 1;
 8082a6e:	2601      	movne	r6, #1
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8082a70:	f014 0404 	ands.w	r4, r4, #4
        total_current += 64;
        bit2 = 1;
 8082a74:	bf18      	it	ne
 8082a76:	2401      	movne	r4, #1
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8082a78:	9000      	str	r0, [sp, #0]
 8082a7a:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8082a7e:	4808      	ldr	r0, [pc, #32]	; (8082aa0 <_Z27serialIncreaseChargeCurrentv+0xb8>)
        total_current += 64;
 8082a80:	bf18      	it	ne
 8082a82:	3540      	addne	r5, #64	; 0x40
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8082a84:	f008 fa1d 	bl	808aec2 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8082a88:	4805      	ldr	r0, [pc, #20]	; (8082aa0 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 8082a8a:	f008 f987 	bl	808ad9c <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8082a8e:	f00a f823 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082a92:	462a      	mov	r2, r5
 8082a94:	4904      	ldr	r1, [pc, #16]	; (8082aa8 <_Z27serialIncreaseChargeCurrentv+0xc0>)
 8082a96:	f7fe f903 	bl	8080ca0 <_ZN5Print6printfEPKcz>
}
 8082a9a:	b004      	add	sp, #16
 8082a9c:	bd70      	pop	{r4, r5, r6, pc}
 8082a9e:	bf00      	nop
 8082aa0:	200007bc 	.word	0x200007bc
 8082aa4:	08090924 	.word	0x08090924
 8082aa8:	0809094d 	.word	0x0809094d

08082aac <_Z24serialGetWifiCredentialsv>:

void serialGetWifiCredentials(void){
 8082aac:	b530      	push	{r4, r5, lr}
        operator const char*() const { return c_str(); }
 8082aae:	4d5a      	ldr	r5, [pc, #360]	; (8082c18 <_Z24serialGetWifiCredentialsv+0x16c>)
 8082ab0:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 8082ab2:	f00a f811 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082ab6:	4959      	ldr	r1, [pc, #356]	; (8082c1c <_Z24serialGetWifiCredentialsv+0x170>)
 8082ab8:	f008 ff40 	bl	808b93c <_ZN5Print5printEPKc>
 8082abc:	4c58      	ldr	r4, [pc, #352]	; (8082c20 <_Z24serialGetWifiCredentialsv+0x174>)
    Serial.println(ssid);
 8082abe:	f00a f80b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082ac2:	6829      	ldr	r1, [r5, #0]
 8082ac4:	f008 ff4d 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082ac8:	f00a f806 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082acc:	4955      	ldr	r1, [pc, #340]	; (8082c24 <_Z24serialGetWifiCredentialsv+0x178>)
 8082ace:	f008 ff35 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.println(password);
 8082ad2:	f00a f801 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082ad6:	6821      	ldr	r1, [r4, #0]
 8082ad8:	f008 ff43 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 8082adc:	f009 fffc 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082ae0:	4951      	ldr	r1, [pc, #324]	; (8082c28 <_Z24serialGetWifiCredentialsv+0x17c>)
 8082ae2:	f008 ff3e 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082ae6:	f009 fff7 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082aea:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082aee:	f009 f88b 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082af2:	f009 fff1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082af6:	220d      	movs	r2, #13
 8082af8:	4601      	mov	r1, r0
 8082afa:	4668      	mov	r0, sp
 8082afc:	f009 f8ee 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    if(tempString.equals("bould")){
 8082b00:	4668      	mov	r0, sp
 8082b02:	494a      	ldr	r1, [pc, #296]	; (8082c2c <_Z24serialGetWifiCredentialsv+0x180>)
 8082b04:	f008 fe5f 	bl	808b7c6 <_ZNK6String6equalsEPKc>
 8082b08:	2800      	cmp	r0, #0
 8082b0a:	d074      	beq.n	8082bf6 <_Z24serialGetWifiCredentialsv+0x14a>
        Serial.println("Password correct!");
 8082b0c:	f009 ffe4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082b10:	4947      	ldr	r1, [pc, #284]	; (8082c30 <_Z24serialGetWifiCredentialsv+0x184>)
 8082b12:	f008 ff26 	bl	808b962 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 8082b16:	f009 ffdf 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082b1a:	4946      	ldr	r1, [pc, #280]	; (8082c34 <_Z24serialGetWifiCredentialsv+0x188>)
 8082b1c:	f008 ff21 	bl	808b962 <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 8082b20:	f009 ffda 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082b24:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082b28:	f009 f86e 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 8082b2c:	f009 ffd4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082b30:	220d      	movs	r2, #13
 8082b32:	4601      	mov	r1, r0
 8082b34:	a804      	add	r0, sp, #16
 8082b36:	f009 f8d1 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 8082b3a:	f009 ffcd 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082b3e:	493e      	ldr	r1, [pc, #248]	; (8082c38 <_Z24serialGetWifiCredentialsv+0x18c>)
 8082b40:	f008 fefc 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 8082b44:	f009 ffc8 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082b48:	9904      	ldr	r1, [sp, #16]
 8082b4a:	f008 ff0a 	bl	808b962 <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8082b4e:	f009 ffc3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082b52:	493a      	ldr	r1, [pc, #232]	; (8082c3c <_Z24serialGetWifiCredentialsv+0x190>)
 8082b54:	f008 ff05 	bl	808b962 <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 8082b58:	f009 ffbe 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082b5c:	220d      	movs	r2, #13
 8082b5e:	4601      	mov	r1, r0
 8082b60:	a808      	add	r0, sp, #32
 8082b62:	f009 f8bb 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
        if(ok.equals("y")){
 8082b66:	4936      	ldr	r1, [pc, #216]	; (8082c40 <_Z24serialGetWifiCredentialsv+0x194>)
 8082b68:	a808      	add	r0, sp, #32
 8082b6a:	f008 fe2c 	bl	808b7c6 <_ZNK6String6equalsEPKc>
 8082b6e:	2800      	cmp	r0, #0
 8082b70:	d04c      	beq.n	8082c0c <_Z24serialGetWifiCredentialsv+0x160>
            Serial.println("Saving new ssid");
 8082b72:	f009 ffb1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082b76:	4933      	ldr	r1, [pc, #204]	; (8082c44 <_Z24serialGetWifiCredentialsv+0x198>)
 8082b78:	f008 fef3 	bl	808b962 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082b7c:	a904      	add	r1, sp, #16
 8082b7e:	4628      	mov	r0, r5
 8082b80:	f008 fcfa 	bl	808b578 <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8082b84:	f009 ffa8 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082b88:	492f      	ldr	r1, [pc, #188]	; (8082c48 <_Z24serialGetWifiCredentialsv+0x19c>)
 8082b8a:	f008 feea 	bl	808b962 <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082b8e:	f009 ffa3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082b92:	220d      	movs	r2, #13
 8082b94:	4601      	mov	r1, r0
 8082b96:	a80c      	add	r0, sp, #48	; 0x30
 8082b98:	f009 f8a0 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 8082b9c:	f009 ff9c 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082ba0:	492a      	ldr	r1, [pc, #168]	; (8082c4c <_Z24serialGetWifiCredentialsv+0x1a0>)
 8082ba2:	f008 fecb 	bl	808b93c <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 8082ba6:	f009 ff97 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082baa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082bac:	f008 fed9 	bl	808b962 <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 8082bb0:	f009 ff92 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082bb4:	220d      	movs	r2, #13
 8082bb6:	4601      	mov	r1, r0
 8082bb8:	a810      	add	r0, sp, #64	; 0x40
 8082bba:	f009 f88f 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
            if(ok.equals("y")){
 8082bbe:	4920      	ldr	r1, [pc, #128]	; (8082c40 <_Z24serialGetWifiCredentialsv+0x194>)
 8082bc0:	a810      	add	r0, sp, #64	; 0x40
 8082bc2:	f008 fe00 	bl	808b7c6 <_ZNK6String6equalsEPKc>
 8082bc6:	b1d8      	cbz	r0, 8082c00 <_Z24serialGetWifiCredentialsv+0x154>
                Serial.println("Saving new password");
 8082bc8:	f009 ff86 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082bcc:	4920      	ldr	r1, [pc, #128]	; (8082c50 <_Z24serialGetWifiCredentialsv+0x1a4>)
 8082bce:	f008 fec8 	bl	808b962 <_ZN5Print7printlnEPKc>
                password = tempPassword;
 8082bd2:	a90c      	add	r1, sp, #48	; 0x30
 8082bd4:	4620      	mov	r0, r4
 8082bd6:	f008 fccf 	bl	808b578 <_ZN6StringaSERKS_>
                sendWifiInfo();
 8082bda:	f7ff fbe1 	bl	80823a0 <_Z12sendWifiInfov>
            String ok = Serial.readStringUntil('\r');
 8082bde:	a810      	add	r0, sp, #64	; 0x40
 8082be0:	f008 fc50 	bl	808b484 <_ZN6StringD1Ev>
            String tempPassword = Serial.readStringUntil('\r');
 8082be4:	a80c      	add	r0, sp, #48	; 0x30
 8082be6:	f008 fc4d 	bl	808b484 <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
 8082bea:	a808      	add	r0, sp, #32
 8082bec:	f008 fc4a 	bl	808b484 <_ZN6StringD1Ev>
        String tempSsid = Serial.readStringUntil('\r');
 8082bf0:	a804      	add	r0, sp, #16
 8082bf2:	f008 fc47 	bl	808b484 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8082bf6:	4668      	mov	r0, sp
 8082bf8:	f008 fc44 	bl	808b484 <_ZN6StringD1Ev>
        }else{
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 8082bfc:	b015      	add	sp, #84	; 0x54
 8082bfe:	bd30      	pop	{r4, r5, pc}
                Serial.println("okay, no problem\n\r");
 8082c00:	f009 ff6a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082c04:	4913      	ldr	r1, [pc, #76]	; (8082c54 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082c06:	f008 feac 	bl	808b962 <_ZN5Print7printlnEPKc>
 8082c0a:	e7e8      	b.n	8082bde <_Z24serialGetWifiCredentialsv+0x132>
            Serial.println("okay, no problem\n\r");
 8082c0c:	f009 ff64 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082c10:	4910      	ldr	r1, [pc, #64]	; (8082c54 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082c12:	f008 fea6 	bl	808b962 <_ZN5Print7printlnEPKc>
 8082c16:	e7e8      	b.n	8082bea <_Z24serialGetWifiCredentialsv+0x13e>
 8082c18:	20000c80 	.word	0x20000c80
 8082c1c:	0809096b 	.word	0x0809096b
 8082c20:	200007a8 	.word	0x200007a8
 8082c24:	08090981 	.word	0x08090981
 8082c28:	0809099b 	.word	0x0809099b
 8082c2c:	080909cd 	.word	0x080909cd
 8082c30:	080909d3 	.word	0x080909d3
 8082c34:	080909e5 	.word	0x080909e5
 8082c38:	080909f5 	.word	0x080909f5
 8082c3c:	08090a0d 	.word	0x08090a0d
 8082c40:	080917d6 	.word	0x080917d6
 8082c44:	08090a23 	.word	0x08090a23
 8082c48:	08090a33 	.word	0x08090a33
 8082c4c:	08090a46 	.word	0x08090a46
 8082c50:	08090a62 	.word	0x08090a62
 8082c54:	08090a76 	.word	0x08090a76

08082c58 <_Z26serialSetSensibleIotEnablev>:
void serialSetSensibleIotEnable(void){
 8082c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 8082c5a:	f009 ff3d 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082c5e:	4919      	ldr	r1, [pc, #100]	; (8082cc4 <_Z26serialSetSensibleIotEnablev+0x6c>)
 8082c60:	f008 fe7f 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082c64:	f009 ff38 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082c68:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082c6c:	f008 ffcc 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082c70:	f009 ff32 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082c74:	220d      	movs	r2, #13
 8082c76:	4601      	mov	r1, r0
 8082c78:	4668      	mov	r0, sp
 8082c7a:	f009 f82f 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082c7e:	4668      	mov	r0, sp
 8082c80:	4911      	ldr	r1, [pc, #68]	; (8082cc8 <_Z26serialSetSensibleIotEnablev+0x70>)
 8082c82:	f008 fda0 	bl	808b7c6 <_ZNK6String6equalsEPKc>
    if(tempString == "imsensible"){
 8082c86:	b1b8      	cbz	r0, 8082cb8 <_Z26serialSetSensibleIotEnablev+0x60>
        Serial.println("Password correct!");
 8082c88:	f009 ff26 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082c8c:	490f      	ldr	r1, [pc, #60]	; (8082ccc <_Z26serialSetSensibleIotEnablev+0x74>)
 8082c8e:	f008 fe68 	bl	808b962 <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
 8082c92:	f009 ff21 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082c96:	490e      	ldr	r1, [pc, #56]	; (8082cd0 <_Z26serialSetSensibleIotEnablev+0x78>)
 8082c98:	f008 fe63 	bl	808b962 <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082c9c:	2301      	movs	r3, #1
 8082c9e:	4c0d      	ldr	r4, [pc, #52]	; (8082cd4 <_Z26serialSetSensibleIotEnablev+0x7c>)
 8082ca0:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8082ca2:	f00a fb21 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8082ca6:	4621      	mov	r1, r4
 8082ca8:	208c      	movs	r0, #140	; 0x8c
 8082caa:	f7fd ffc7 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082cae:	4668      	mov	r0, sp
 8082cb0:	f008 fbe8 	bl	808b484 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082cb4:	b004      	add	sp, #16
 8082cb6:	bd10      	pop	{r4, pc}
        Serial.println("\n\rIncorrect password!");
 8082cb8:	f009 ff0e 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082cbc:	4906      	ldr	r1, [pc, #24]	; (8082cd8 <_Z26serialSetSensibleIotEnablev+0x80>)
 8082cbe:	f008 fe50 	bl	808b962 <_ZN5Print7printlnEPKc>
 8082cc2:	e7f4      	b.n	8082cae <_Z26serialSetSensibleIotEnablev+0x56>
 8082cc4:	08090a89 	.word	0x08090a89
 8082cc8:	08090acc 	.word	0x08090acc
 8082ccc:	080909d3 	.word	0x080909d3
 8082cd0:	08090ad7 	.word	0x08090ad7
 8082cd4:	20000c70 	.word	0x20000c70
 8082cd8:	08090af8 	.word	0x08090af8

08082cdc <_Z19serialResetSettingsv>:
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}

void serialResetSettings(void){
 8082cdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    Serial.println();
 8082cde:	f009 fefb 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082ce2:	f008 fe32 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8082ce6:	f009 fef7 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082cea:	4914      	ldr	r1, [pc, #80]	; (8082d3c <_Z19serialResetSettingsv+0x60>)
 8082cec:	f008 fe39 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082cf0:	f009 fef2 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082cf4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082cf8:	f008 ff86 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082cfc:	f009 feec 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082d00:	220d      	movs	r2, #13
 8082d02:	4601      	mov	r1, r0
 8082d04:	4668      	mov	r0, sp
 8082d06:	f008 ffe9 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
 8082d0a:	4668      	mov	r0, sp
 8082d0c:	490c      	ldr	r1, [pc, #48]	; (8082d40 <_Z19serialResetSettingsv+0x64>)
 8082d0e:	f008 fd5a 	bl	808b7c6 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8082d12:	b160      	cbz	r0, 8082d2e <_Z19serialResetSettingsv+0x52>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8082d14:	f009 fee0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082d18:	490a      	ldr	r1, [pc, #40]	; (8082d44 <_Z19serialResetSettingsv+0x68>)
 8082d1a:	f008 fe22 	bl	808b962 <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 8082d1e:	f7fe f94b 	bl	8080fb8 <_Z20writeDefaultSettingsv>
    String tempString = Serial.readStringUntil('\r');
 8082d22:	4668      	mov	r0, sp
 8082d24:	f008 fbae 	bl	808b484 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082d28:	b005      	add	sp, #20
 8082d2a:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rIncorrect password!");
 8082d2e:	f009 fed3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082d32:	4905      	ldr	r1, [pc, #20]	; (8082d48 <_Z19serialResetSettingsv+0x6c>)
 8082d34:	f008 fe15 	bl	808b962 <_ZN5Print7printlnEPKc>
 8082d38:	e7f3      	b.n	8082d22 <_Z19serialResetSettingsv+0x46>
 8082d3a:	bf00      	nop
 8082d3c:	08090b0e 	.word	0x08090b0e
 8082d40:	080909cd 	.word	0x080909cd
 8082d44:	08090b47 	.word	0x08090b47
 8082d48:	08090af8 	.word	0x08090af8

08082d4c <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void){
 8082d4c:	b510      	push	{r4, lr}
 8082d4e:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8082d50:	f009 fec2 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082d54:	4920      	ldr	r1, [pc, #128]	; (8082dd8 <_Z17serialGetTimeDatev+0x8c>)
 8082d56:	f008 fe04 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082d5a:	f009 febd 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082d5e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082d62:	f008 ff51 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082d66:	f009 feb7 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082d6a:	220d      	movs	r2, #13
 8082d6c:	4601      	mov	r1, r0
 8082d6e:	4668      	mov	r0, sp
 8082d70:	f008 ffb4 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082d74:	4668      	mov	r0, sp
 8082d76:	f008 fd93 	bl	808b8a0 <_ZNK6String5toIntEv>
 8082d7a:	4604      	mov	r4, r0
    Serial.println("");
 8082d7c:	f009 feac 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082d80:	4916      	ldr	r1, [pc, #88]	; (8082ddc <_Z17serialGetTimeDatev+0x90>)
 8082d82:	f008 fdee 	bl	808b962 <_ZN5Print7printlnEPKc>
    if(tempValue > 966012661 && tempValue < 4121686261){       //min is the year 2000, max is the year 2100
 8082d86:	4b16      	ldr	r3, [pc, #88]	; (8082de0 <_Z17serialGetTimeDatev+0x94>)
 8082d88:	429c      	cmp	r4, r3
 8082d8a:	dd1e      	ble.n	8082dca <_Z17serialGetTimeDatev+0x7e>
        Time.setTime(tempValue);
 8082d8c:	17e1      	asrs	r1, r4, #31
 8082d8e:	4620      	mov	r0, r4
 8082d90:	f009 f838 	bl	808be04 <_ZN9TimeClass7setTimeEx>
        Serial.print("\n\rNew Device Time:");
 8082d94:	f009 fea0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082d98:	4912      	ldr	r1, [pc, #72]	; (8082de4 <_Z17serialGetTimeDatev+0x98>)
 8082d9a:	f008 fdcf 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 8082d9e:	f009 fe9b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082da2:	4604      	mov	r4, r0
 8082da4:	f009 f945 	bl	808c032 <_ZN9TimeClass3nowEv>
 8082da8:	4602      	mov	r2, r0
 8082daa:	17c3      	asrs	r3, r0, #31
 8082dac:	a804      	add	r0, sp, #16
 8082dae:	f009 f83d 	bl	808be2c <_ZN9TimeClass7timeStrEx>
 8082db2:	4620      	mov	r0, r4
 8082db4:	9904      	ldr	r1, [sp, #16]
 8082db6:	f008 fdd4 	bl	808b962 <_ZN5Print7printlnEPKc>
 8082dba:	a804      	add	r0, sp, #16
 8082dbc:	f008 fb62 	bl	808b484 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8082dc0:	4668      	mov	r0, sp
 8082dc2:	f008 fb5f 	bl	808b484 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082dc6:	b008      	add	sp, #32
 8082dc8:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8082dca:	f009 fe85 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082dce:	4906      	ldr	r1, [pc, #24]	; (8082de8 <_Z17serialGetTimeDatev+0x9c>)
 8082dd0:	f008 fdc7 	bl	808b962 <_ZN5Print7printlnEPKc>
 8082dd4:	e7f4      	b.n	8082dc0 <_Z17serialGetTimeDatev+0x74>
 8082dd6:	bf00      	nop
 8082dd8:	08090bb6 	.word	0x08090bb6
 8082ddc:	08092ce2 	.word	0x08092ce2
 8082de0:	39942ef5 	.word	0x39942ef5
 8082de4:	08090bf1 	.word	0x08090bf1
 8082de8:	08090c04 	.word	0x08090c04

08082dec <_Z17serialGetCo2Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Slope(void){
 8082dec:	b530      	push	{r4, r5, lr}
 8082dee:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8082df0:	f009 fe72 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082df4:	f008 fda9 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 8082df8:	f009 fe6e 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082dfc:	4932      	ldr	r1, [pc, #200]	; (8082ec8 <_Z17serialGetCo2Slopev+0xdc>)
 8082dfe:	f008 fd9d 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 8082e02:	f009 fe69 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082e06:	4604      	mov	r4, r0
 8082e08:	4d30      	ldr	r5, [pc, #192]	; (8082ecc <_Z17serialGetCo2Slopev+0xe0>)
 8082e0a:	2202      	movs	r2, #2
 8082e0c:	6829      	ldr	r1, [r5, #0]
 8082e0e:	a806      	add	r0, sp, #24
 8082e10:	f008 fc1c 	bl	808b64c <_ZN6StringC1Efi>
 8082e14:	9906      	ldr	r1, [sp, #24]
 8082e16:	4620      	mov	r0, r4
 8082e18:	f008 fd90 	bl	808b93c <_ZN5Print5printEPKc>
 8082e1c:	a806      	add	r0, sp, #24
 8082e1e:	f008 fb31 	bl	808b484 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082e22:	f009 fe59 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082e26:	492a      	ldr	r1, [pc, #168]	; (8082ed0 <_Z17serialGetCo2Slopev+0xe4>)
 8082e28:	f008 fd9b 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 8082e2c:	f009 fe54 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082e30:	4928      	ldr	r1, [pc, #160]	; (8082ed4 <_Z17serialGetCo2Slopev+0xe8>)
 8082e32:	f008 fd83 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082e36:	f009 fe4f 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082e3a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082e3e:	f008 fee3 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082e42:	f009 fe49 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082e46:	220d      	movs	r2, #13
 8082e48:	4601      	mov	r1, r0
 8082e4a:	a802      	add	r0, sp, #8
 8082e4c:	f008 ff46 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082e50:	a802      	add	r0, sp, #8
 8082e52:	f008 fd2a 	bl	808b8aa <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8082e56:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082e5a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8082e5c:	f00b fabc 	bl	808e3d8 <__aeabi_fcmpge>
 8082e60:	b358      	cbz	r0, 8082eba <_Z17serialGetCo2Slopev+0xce>
 8082e62:	4620      	mov	r0, r4
 8082e64:	491c      	ldr	r1, [pc, #112]	; (8082ed8 <_Z17serialGetCo2Slopev+0xec>)
 8082e66:	f00b faa3 	bl	808e3b0 <__aeabi_fcmplt>
 8082e6a:	b330      	cbz	r0, 8082eba <_Z17serialGetCo2Slopev+0xce>
        CO2_slope = tempfloat;
        tempfloat *= 100;
 8082e6c:	491b      	ldr	r1, [pc, #108]	; (8082edc <_Z17serialGetCo2Slopev+0xf0>)
 8082e6e:	4620      	mov	r0, r4
        CO2_slope = tempfloat;
 8082e70:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082e72:	f00b f8ff 	bl	808e074 <__aeabi_fmul>
        tempValue = tempfloat;
 8082e76:	f00b fac3 	bl	808e400 <__aeabi_f2iz>
 8082e7a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8082e7c:	f009 fe2c 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082e80:	4917      	ldr	r1, [pc, #92]	; (8082ee0 <_Z17serialGetCo2Slopev+0xf4>)
 8082e82:	f008 fd5b 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope,2));
 8082e86:	f009 fe27 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082e8a:	4604      	mov	r4, r0
 8082e8c:	2202      	movs	r2, #2
 8082e8e:	6829      	ldr	r1, [r5, #0]
 8082e90:	a806      	add	r0, sp, #24
 8082e92:	f008 fbdb 	bl	808b64c <_ZN6StringC1Efi>
 8082e96:	9906      	ldr	r1, [sp, #24]
 8082e98:	4620      	mov	r0, r4
 8082e9a:	f008 fd62 	bl	808b962 <_ZN5Print7printlnEPKc>
 8082e9e:	a806      	add	r0, sp, #24
 8082ea0:	f008 faf0 	bl	808b484 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8082ea4:	f00a fa20 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8082ea8:	2008      	movs	r0, #8
 8082eaa:	a901      	add	r1, sp, #4
 8082eac:	f7fd fec6 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082eb0:	a802      	add	r0, sp, #8
 8082eb2:	f008 fae7 	bl	808b484 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082eb6:	b00b      	add	sp, #44	; 0x2c
 8082eb8:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082eba:	f009 fe0d 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082ebe:	4909      	ldr	r1, [pc, #36]	; (8082ee4 <_Z17serialGetCo2Slopev+0xf8>)
 8082ec0:	f008 fd4f 	bl	808b962 <_ZN5Print7printlnEPKc>
 8082ec4:	e7f4      	b.n	8082eb0 <_Z17serialGetCo2Slopev+0xc4>
 8082ec6:	bf00      	nop
 8082ec8:	08090c15 	.word	0x08090c15
 8082ecc:	200002cc 	.word	0x200002cc
 8082ed0:	08090c28 	.word	0x08090c28
 8082ed4:	08090c2d 	.word	0x08090c2d
 8082ed8:	41200000 	.word	0x41200000
 8082edc:	42c80000 	.word	0x42c80000
 8082ee0:	08090c43 	.word	0x08090c43
 8082ee4:	08090c04 	.word	0x08090c04

08082ee8 <_Z16serialGetCoSlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoSlope(void){
 8082ee8:	b530      	push	{r4, r5, lr}
 8082eea:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8082eec:	f009 fdf4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082ef0:	f008 fd2b 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 8082ef4:	f009 fdf0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082ef8:	4937      	ldr	r1, [pc, #220]	; (8082fd8 <_Z16serialGetCoSlopev+0xf0>)
 8082efa:	f008 fd1f 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(String(CO_slope, 2));
 8082efe:	f009 fdeb 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082f02:	4604      	mov	r4, r0
 8082f04:	4d35      	ldr	r5, [pc, #212]	; (8082fdc <_Z16serialGetCoSlopev+0xf4>)
 8082f06:	2202      	movs	r2, #2
 8082f08:	6829      	ldr	r1, [r5, #0]
 8082f0a:	a806      	add	r0, sp, #24
 8082f0c:	f008 fb9e 	bl	808b64c <_ZN6StringC1Efi>
 8082f10:	9906      	ldr	r1, [sp, #24]
 8082f12:	4620      	mov	r0, r4
 8082f14:	f008 fd12 	bl	808b93c <_ZN5Print5printEPKc>
 8082f18:	a806      	add	r0, sp, #24
 8082f1a:	f008 fab3 	bl	808b484 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082f1e:	f009 fddb 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082f22:	492f      	ldr	r1, [pc, #188]	; (8082fe0 <_Z16serialGetCoSlopev+0xf8>)
 8082f24:	f008 fd1d 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8082f28:	f009 fdd6 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082f2c:	492d      	ldr	r1, [pc, #180]	; (8082fe4 <_Z16serialGetCoSlopev+0xfc>)
 8082f2e:	f008 fd05 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082f32:	f009 fdd1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082f36:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082f3a:	f008 fe65 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082f3e:	f009 fdcb 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082f42:	220d      	movs	r2, #13
 8082f44:	4601      	mov	r1, r0
 8082f46:	a802      	add	r0, sp, #8
 8082f48:	f008 fec8 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082f4c:	a802      	add	r0, sp, #8
 8082f4e:	f008 fcac 	bl	808b8aa <_ZNK6String7toFloatEv>
 8082f52:	4604      	mov	r4, r0
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
 8082f54:	f00a fbe0 	bl	808d718 <__aeabi_f2d>
 8082f58:	a31d      	add	r3, pc, #116	; (adr r3, 8082fd0 <_Z16serialGetCoSlopev+0xe8>)
 8082f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082f5e:	f00a feb9 	bl	808dcd4 <__aeabi_dcmpge>
 8082f62:	b360      	cbz	r0, 8082fbe <_Z16serialGetCoSlopev+0xd6>
 8082f64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8082f68:	4620      	mov	r0, r4
 8082f6a:	f00b fa21 	bl	808e3b0 <__aeabi_fcmplt>
 8082f6e:	b330      	cbz	r0, 8082fbe <_Z16serialGetCoSlopev+0xd6>
        CO_slope = tempfloat;
        tempfloat *= 100;
 8082f70:	491d      	ldr	r1, [pc, #116]	; (8082fe8 <_Z16serialGetCoSlopev+0x100>)
 8082f72:	4620      	mov	r0, r4
        CO_slope = tempfloat;
 8082f74:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082f76:	f00b f87d 	bl	808e074 <__aeabi_fmul>
        tempValue = tempfloat;
 8082f7a:	f00b fa41 	bl	808e400 <__aeabi_f2iz>
 8082f7e:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO slope: ");
 8082f80:	f009 fdaa 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082f84:	4919      	ldr	r1, [pc, #100]	; (8082fec <_Z16serialGetCoSlopev+0x104>)
 8082f86:	f008 fcd9 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(String(CO_slope,2));
 8082f8a:	f009 fda5 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082f8e:	4604      	mov	r4, r0
 8082f90:	2202      	movs	r2, #2
 8082f92:	6829      	ldr	r1, [r5, #0]
 8082f94:	a806      	add	r0, sp, #24
 8082f96:	f008 fb59 	bl	808b64c <_ZN6StringC1Efi>
 8082f9a:	9906      	ldr	r1, [sp, #24]
 8082f9c:	4620      	mov	r0, r4
 8082f9e:	f008 fce0 	bl	808b962 <_ZN5Print7printlnEPKc>
 8082fa2:	a806      	add	r0, sp, #24
 8082fa4:	f008 fa6e 	bl	808b484 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_MEM_ADDRESS, tempValue);
 8082fa8:	f00a f99e 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8082fac:	2010      	movs	r0, #16
 8082fae:	a901      	add	r1, sp, #4
 8082fb0:	f7fd fe44 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082fb4:	a802      	add	r0, sp, #8
 8082fb6:	f008 fa65 	bl	808b484 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082fba:	b00b      	add	sp, #44	; 0x2c
 8082fbc:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082fbe:	f009 fd8b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082fc2:	490b      	ldr	r1, [pc, #44]	; (8082ff0 <_Z16serialGetCoSlopev+0x108>)
 8082fc4:	f008 fccd 	bl	808b962 <_ZN5Print7printlnEPKc>
 8082fc8:	e7f4      	b.n	8082fb4 <_Z16serialGetCoSlopev+0xcc>
 8082fca:	bf00      	nop
 8082fcc:	f3af 8000 	nop.w
 8082fd0:	9999999a 	.word	0x9999999a
 8082fd4:	3fb99999 	.word	0x3fb99999
 8082fd8:	08090c55 	.word	0x08090c55
 8082fdc:	200002dc 	.word	0x200002dc
 8082fe0:	08090c28 	.word	0x08090c28
 8082fe4:	08090c67 	.word	0x08090c67
 8082fe8:	42c80000 	.word	0x42c80000
 8082fec:	08090c7c 	.word	0x08090c7c
 8082ff0:	08090c04 	.word	0x08090c04

08082ff4 <_Z17serialGetPm1Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm1Slope(void){
 8082ff4:	b530      	push	{r4, r5, lr}
 8082ff6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082ff8:	f009 fd6e 	bl	808cad8 <_Z16_fetch_usbserialv>
 8082ffc:	f008 fca5 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 8083000:	f009 fd6a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083004:	4932      	ldr	r1, [pc, #200]	; (80830d0 <_Z17serialGetPm1Slopev+0xdc>)
 8083006:	f008 fc99 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 808300a:	f009 fd65 	bl	808cad8 <_Z16_fetch_usbserialv>
 808300e:	4604      	mov	r4, r0
 8083010:	4d30      	ldr	r5, [pc, #192]	; (80830d4 <_Z17serialGetPm1Slopev+0xe0>)
 8083012:	2202      	movs	r2, #2
 8083014:	6829      	ldr	r1, [r5, #0]
 8083016:	a806      	add	r0, sp, #24
 8083018:	f008 fb18 	bl	808b64c <_ZN6StringC1Efi>
 808301c:	9906      	ldr	r1, [sp, #24]
 808301e:	4620      	mov	r0, r4
 8083020:	f008 fc8c 	bl	808b93c <_ZN5Print5printEPKc>
 8083024:	a806      	add	r0, sp, #24
 8083026:	f008 fa2d 	bl	808b484 <_ZN6StringD1Ev>
    Serial.println(" ");
 808302a:	f009 fd55 	bl	808cad8 <_Z16_fetch_usbserialv>
 808302e:	492a      	ldr	r1, [pc, #168]	; (80830d8 <_Z17serialGetPm1Slopev+0xe4>)
 8083030:	f008 fc97 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 8083034:	f009 fd50 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083038:	4928      	ldr	r1, [pc, #160]	; (80830dc <_Z17serialGetPm1Slopev+0xe8>)
 808303a:	f008 fc7f 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808303e:	f009 fd4b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083042:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083046:	f008 fddf 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808304a:	f009 fd45 	bl	808cad8 <_Z16_fetch_usbserialv>
 808304e:	220d      	movs	r2, #13
 8083050:	4601      	mov	r1, r0
 8083052:	a802      	add	r0, sp, #8
 8083054:	f008 fe42 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083058:	a802      	add	r0, sp, #8
 808305a:	f008 fc26 	bl	808b8aa <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808305e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8083062:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083064:	f00b f9b8 	bl	808e3d8 <__aeabi_fcmpge>
 8083068:	b360      	cbz	r0, 80830c4 <_Z17serialGetPm1Slopev+0xd0>
 808306a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808306e:	4620      	mov	r0, r4
 8083070:	f00b f99e 	bl	808e3b0 <__aeabi_fcmplt>
 8083074:	b330      	cbz	r0, 80830c4 <_Z17serialGetPm1Slopev+0xd0>
        PM_1_slope = tempfloat;
        tempfloat *= 100;
 8083076:	491a      	ldr	r1, [pc, #104]	; (80830e0 <_Z17serialGetPm1Slopev+0xec>)
 8083078:	4620      	mov	r0, r4
        PM_1_slope = tempfloat;
 808307a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 808307c:	f00a fffa 	bl	808e074 <__aeabi_fmul>
        tempValue = tempfloat;
 8083080:	f00b f9be 	bl	808e400 <__aeabi_f2iz>
 8083084:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 8083086:	f009 fd27 	bl	808cad8 <_Z16_fetch_usbserialv>
 808308a:	4916      	ldr	r1, [pc, #88]	; (80830e4 <_Z17serialGetPm1Slopev+0xf0>)
 808308c:	f008 fc56 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 8083090:	f009 fd22 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083094:	4604      	mov	r4, r0
 8083096:	2202      	movs	r2, #2
 8083098:	6829      	ldr	r1, [r5, #0]
 808309a:	a806      	add	r0, sp, #24
 808309c:	f008 fad6 	bl	808b64c <_ZN6StringC1Efi>
 80830a0:	9906      	ldr	r1, [sp, #24]
 80830a2:	4620      	mov	r0, r4
 80830a4:	f008 fc5d 	bl	808b962 <_ZN5Print7printlnEPKc>
 80830a8:	a806      	add	r0, sp, #24
 80830aa:	f008 f9eb 	bl	808b484 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 80830ae:	f00a f91b 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80830b2:	2018      	movs	r0, #24
 80830b4:	a901      	add	r1, sp, #4
 80830b6:	f7fd fdc1 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80830ba:	a802      	add	r0, sp, #8
 80830bc:	f008 f9e2 	bl	808b484 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80830c0:	b00b      	add	sp, #44	; 0x2c
 80830c2:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 80830c4:	f009 fd08 	bl	808cad8 <_Z16_fetch_usbserialv>
 80830c8:	4907      	ldr	r1, [pc, #28]	; (80830e8 <_Z17serialGetPm1Slopev+0xf4>)
 80830ca:	f008 fc4a 	bl	808b962 <_ZN5Print7printlnEPKc>
 80830ce:	e7f4      	b.n	80830ba <_Z17serialGetPm1Slopev+0xc6>
 80830d0:	08090c8d 	.word	0x08090c8d
 80830d4:	20000308 	.word	0x20000308
 80830d8:	08092634 	.word	0x08092634
 80830dc:	08090ca0 	.word	0x08090ca0
 80830e0:	42c80000 	.word	0x42c80000
 80830e4:	08090cb6 	.word	0x08090cb6
 80830e8:	08090c04 	.word	0x08090c04

080830ec <_Z18serialGetPm25Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm25Slope(void){
 80830ec:	b530      	push	{r4, r5, lr}
 80830ee:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80830f0:	f009 fcf2 	bl	808cad8 <_Z16_fetch_usbserialv>
 80830f4:	f008 fc29 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 80830f8:	f009 fcee 	bl	808cad8 <_Z16_fetch_usbserialv>
 80830fc:	4932      	ldr	r1, [pc, #200]	; (80831c8 <_Z18serialGetPm25Slopev+0xdc>)
 80830fe:	f008 fc1d 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 8083102:	f009 fce9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083106:	4604      	mov	r4, r0
 8083108:	4d30      	ldr	r5, [pc, #192]	; (80831cc <_Z18serialGetPm25Slopev+0xe0>)
 808310a:	2202      	movs	r2, #2
 808310c:	6829      	ldr	r1, [r5, #0]
 808310e:	a806      	add	r0, sp, #24
 8083110:	f008 fa9c 	bl	808b64c <_ZN6StringC1Efi>
 8083114:	9906      	ldr	r1, [sp, #24]
 8083116:	4620      	mov	r0, r4
 8083118:	f008 fc10 	bl	808b93c <_ZN5Print5printEPKc>
 808311c:	a806      	add	r0, sp, #24
 808311e:	f008 f9b1 	bl	808b484 <_ZN6StringD1Ev>
    Serial.println(" ");
 8083122:	f009 fcd9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083126:	492a      	ldr	r1, [pc, #168]	; (80831d0 <_Z18serialGetPm25Slopev+0xe4>)
 8083128:	f008 fc1b 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 808312c:	f009 fcd4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083130:	4928      	ldr	r1, [pc, #160]	; (80831d4 <_Z18serialGetPm25Slopev+0xe8>)
 8083132:	f008 fc03 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083136:	f009 fccf 	bl	808cad8 <_Z16_fetch_usbserialv>
 808313a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808313e:	f008 fd63 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083142:	f009 fcc9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083146:	220d      	movs	r2, #13
 8083148:	4601      	mov	r1, r0
 808314a:	a802      	add	r0, sp, #8
 808314c:	f008 fdc6 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083150:	a802      	add	r0, sp, #8
 8083152:	f008 fbaa 	bl	808b8aa <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083156:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 808315a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808315c:	f00b f93c 	bl	808e3d8 <__aeabi_fcmpge>
 8083160:	b360      	cbz	r0, 80831bc <_Z18serialGetPm25Slopev+0xd0>
 8083162:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083166:	4620      	mov	r0, r4
 8083168:	f00b f922 	bl	808e3b0 <__aeabi_fcmplt>
 808316c:	b330      	cbz	r0, 80831bc <_Z18serialGetPm25Slopev+0xd0>
        PM_25_slope = tempfloat;
        tempfloat *= 100;
 808316e:	491a      	ldr	r1, [pc, #104]	; (80831d8 <_Z18serialGetPm25Slopev+0xec>)
 8083170:	4620      	mov	r0, r4
        PM_25_slope = tempfloat;
 8083172:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8083174:	f00a ff7e 	bl	808e074 <__aeabi_fmul>
        tempValue = tempfloat;
 8083178:	f00b f942 	bl	808e400 <__aeabi_f2iz>
 808317c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 808317e:	f009 fcab 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083182:	4916      	ldr	r1, [pc, #88]	; (80831dc <_Z18serialGetPm25Slopev+0xf0>)
 8083184:	f008 fbda 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope,2));
 8083188:	f009 fca6 	bl	808cad8 <_Z16_fetch_usbserialv>
 808318c:	4604      	mov	r4, r0
 808318e:	2202      	movs	r2, #2
 8083190:	6829      	ldr	r1, [r5, #0]
 8083192:	a806      	add	r0, sp, #24
 8083194:	f008 fa5a 	bl	808b64c <_ZN6StringC1Efi>
 8083198:	9906      	ldr	r1, [sp, #24]
 808319a:	4620      	mov	r0, r4
 808319c:	f008 fbe1 	bl	808b962 <_ZN5Print7printlnEPKc>
 80831a0:	a806      	add	r0, sp, #24
 80831a2:	f008 f96f 	bl	808b484 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 80831a6:	f00a f89f 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80831aa:	2020      	movs	r0, #32
 80831ac:	a901      	add	r1, sp, #4
 80831ae:	f7fd fd45 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80831b2:	a802      	add	r0, sp, #8
 80831b4:	f008 f966 	bl	808b484 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80831b8:	b00b      	add	sp, #44	; 0x2c
 80831ba:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 80831bc:	f009 fc8c 	bl	808cad8 <_Z16_fetch_usbserialv>
 80831c0:	4907      	ldr	r1, [pc, #28]	; (80831e0 <_Z18serialGetPm25Slopev+0xf4>)
 80831c2:	f008 fbce 	bl	808b962 <_ZN5Print7printlnEPKc>
 80831c6:	e7f4      	b.n	80831b2 <_Z18serialGetPm25Slopev+0xc6>
 80831c8:	08090cc8 	.word	0x08090cc8
 80831cc:	20000310 	.word	0x20000310
 80831d0:	08092634 	.word	0x08092634
 80831d4:	08090cdd 	.word	0x08090cdd
 80831d8:	42c80000 	.word	0x42c80000
 80831dc:	08090cf5 	.word	0x08090cf5
 80831e0:	08090c04 	.word	0x08090c04

080831e4 <_Z18serialGetPm10Slopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm10Slope(void){
 80831e4:	b530      	push	{r4, r5, lr}
 80831e6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80831e8:	f009 fc76 	bl	808cad8 <_Z16_fetch_usbserialv>
 80831ec:	f008 fbad 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 80831f0:	f009 fc72 	bl	808cad8 <_Z16_fetch_usbserialv>
 80831f4:	4932      	ldr	r1, [pc, #200]	; (80832c0 <_Z18serialGetPm10Slopev+0xdc>)
 80831f6:	f008 fba1 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 80831fa:	f009 fc6d 	bl	808cad8 <_Z16_fetch_usbserialv>
 80831fe:	4604      	mov	r4, r0
 8083200:	4d30      	ldr	r5, [pc, #192]	; (80832c4 <_Z18serialGetPm10Slopev+0xe0>)
 8083202:	2202      	movs	r2, #2
 8083204:	6829      	ldr	r1, [r5, #0]
 8083206:	a806      	add	r0, sp, #24
 8083208:	f008 fa20 	bl	808b64c <_ZN6StringC1Efi>
 808320c:	9906      	ldr	r1, [sp, #24]
 808320e:	4620      	mov	r0, r4
 8083210:	f008 fb94 	bl	808b93c <_ZN5Print5printEPKc>
 8083214:	a806      	add	r0, sp, #24
 8083216:	f008 f935 	bl	808b484 <_ZN6StringD1Ev>
    Serial.println(" ");
 808321a:	f009 fc5d 	bl	808cad8 <_Z16_fetch_usbserialv>
 808321e:	492a      	ldr	r1, [pc, #168]	; (80832c8 <_Z18serialGetPm10Slopev+0xe4>)
 8083220:	f008 fb9f 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 8083224:	f009 fc58 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083228:	4928      	ldr	r1, [pc, #160]	; (80832cc <_Z18serialGetPm10Slopev+0xe8>)
 808322a:	f008 fb87 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808322e:	f009 fc53 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083232:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083236:	f008 fce7 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808323a:	f009 fc4d 	bl	808cad8 <_Z16_fetch_usbserialv>
 808323e:	220d      	movs	r2, #13
 8083240:	4601      	mov	r1, r0
 8083242:	a802      	add	r0, sp, #8
 8083244:	f008 fd4a 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083248:	a802      	add	r0, sp, #8
 808324a:	f008 fb2e 	bl	808b8aa <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808324e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8083252:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083254:	f00b f8c0 	bl	808e3d8 <__aeabi_fcmpge>
 8083258:	b360      	cbz	r0, 80832b4 <_Z18serialGetPm10Slopev+0xd0>
 808325a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808325e:	4620      	mov	r0, r4
 8083260:	f00b f8a6 	bl	808e3b0 <__aeabi_fcmplt>
 8083264:	b330      	cbz	r0, 80832b4 <_Z18serialGetPm10Slopev+0xd0>
        PM_10_slope = tempfloat;
        tempfloat *= 100;
 8083266:	491a      	ldr	r1, [pc, #104]	; (80832d0 <_Z18serialGetPm10Slopev+0xec>)
 8083268:	4620      	mov	r0, r4
        PM_10_slope = tempfloat;
 808326a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 808326c:	f00a ff02 	bl	808e074 <__aeabi_fmul>
        tempValue = tempfloat;
 8083270:	f00b f8c6 	bl	808e400 <__aeabi_f2iz>
 8083274:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 8083276:	f009 fc2f 	bl	808cad8 <_Z16_fetch_usbserialv>
 808327a:	4916      	ldr	r1, [pc, #88]	; (80832d4 <_Z18serialGetPm10Slopev+0xf0>)
 808327c:	f008 fb5e 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope,2));
 8083280:	f009 fc2a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083284:	4604      	mov	r4, r0
 8083286:	2202      	movs	r2, #2
 8083288:	6829      	ldr	r1, [r5, #0]
 808328a:	a806      	add	r0, sp, #24
 808328c:	f008 f9de 	bl	808b64c <_ZN6StringC1Efi>
 8083290:	9906      	ldr	r1, [sp, #24]
 8083292:	4620      	mov	r0, r4
 8083294:	f008 fb65 	bl	808b962 <_ZN5Print7printlnEPKc>
 8083298:	a806      	add	r0, sp, #24
 808329a:	f008 f8f3 	bl	808b484 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 808329e:	f00a f823 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80832a2:	2028      	movs	r0, #40	; 0x28
 80832a4:	a901      	add	r1, sp, #4
 80832a6:	f7fd fcc9 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80832aa:	a802      	add	r0, sp, #8
 80832ac:	f008 f8ea 	bl	808b484 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80832b0:	b00b      	add	sp, #44	; 0x2c
 80832b2:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 80832b4:	f009 fc10 	bl	808cad8 <_Z16_fetch_usbserialv>
 80832b8:	4907      	ldr	r1, [pc, #28]	; (80832d8 <_Z18serialGetPm10Slopev+0xf4>)
 80832ba:	f008 fb52 	bl	808b962 <_ZN5Print7printlnEPKc>
 80832be:	e7f4      	b.n	80832aa <_Z18serialGetPm10Slopev+0xc6>
 80832c0:	08090d09 	.word	0x08090d09
 80832c4:	20000300 	.word	0x20000300
 80832c8:	08092634 	.word	0x08092634
 80832cc:	08090d1d 	.word	0x08090d1d
 80832d0:	42c80000 	.word	0x42c80000
 80832d4:	08090d34 	.word	0x08090d34
 80832d8:	08090c04 	.word	0x08090c04

080832dc <_Z25serialGetTemperatureSlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetTemperatureSlope(void){
 80832dc:	b530      	push	{r4, r5, lr}
 80832de:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80832e0:	f009 fbfa 	bl	808cad8 <_Z16_fetch_usbserialv>
 80832e4:	f008 fb31 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 80832e8:	f009 fbf6 	bl	808cad8 <_Z16_fetch_usbserialv>
 80832ec:	4932      	ldr	r1, [pc, #200]	; (80833b8 <_Z25serialGetTemperatureSlopev+0xdc>)
 80832ee:	f008 fb25 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 80832f2:	f009 fbf1 	bl	808cad8 <_Z16_fetch_usbserialv>
 80832f6:	4604      	mov	r4, r0
 80832f8:	4d30      	ldr	r5, [pc, #192]	; (80833bc <_Z25serialGetTemperatureSlopev+0xe0>)
 80832fa:	2202      	movs	r2, #2
 80832fc:	6829      	ldr	r1, [r5, #0]
 80832fe:	a806      	add	r0, sp, #24
 8083300:	f008 f9a4 	bl	808b64c <_ZN6StringC1Efi>
 8083304:	9906      	ldr	r1, [sp, #24]
 8083306:	4620      	mov	r0, r4
 8083308:	f008 fb18 	bl	808b93c <_ZN5Print5printEPKc>
 808330c:	a806      	add	r0, sp, #24
 808330e:	f008 f8b9 	bl	808b484 <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 8083312:	f009 fbe1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083316:	492a      	ldr	r1, [pc, #168]	; (80833c0 <_Z25serialGetTemperatureSlopev+0xe4>)
 8083318:	f008 fb23 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 808331c:	f009 fbdc 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083320:	4928      	ldr	r1, [pc, #160]	; (80833c4 <_Z25serialGetTemperatureSlopev+0xe8>)
 8083322:	f008 fb0b 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083326:	f009 fbd7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808332a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808332e:	f008 fc6b 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083332:	f009 fbd1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083336:	220d      	movs	r2, #13
 8083338:	4601      	mov	r1, r0
 808333a:	a802      	add	r0, sp, #8
 808333c:	f008 fcce 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083340:	a802      	add	r0, sp, #8
 8083342:	f008 fab2 	bl	808b8aa <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083346:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 808334a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808334c:	f00b f844 	bl	808e3d8 <__aeabi_fcmpge>
 8083350:	b360      	cbz	r0, 80833ac <_Z25serialGetTemperatureSlopev+0xd0>
 8083352:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083356:	4620      	mov	r0, r4
 8083358:	f00b f82a 	bl	808e3b0 <__aeabi_fcmplt>
 808335c:	b330      	cbz	r0, 80833ac <_Z25serialGetTemperatureSlopev+0xd0>
        temp_slope = tempfloat;
        tempfloat *= 100;
 808335e:	491a      	ldr	r1, [pc, #104]	; (80833c8 <_Z25serialGetTemperatureSlopev+0xec>)
 8083360:	4620      	mov	r0, r4
        temp_slope = tempfloat;
 8083362:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8083364:	f00a fe86 	bl	808e074 <__aeabi_fmul>
        tempValue = tempfloat;
 8083368:	f00b f84a 	bl	808e400 <__aeabi_f2iz>
 808336c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 808336e:	f009 fbb3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083372:	4916      	ldr	r1, [pc, #88]	; (80833cc <_Z25serialGetTemperatureSlopev+0xf0>)
 8083374:	f008 fae2 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope,2));
 8083378:	f009 fbae 	bl	808cad8 <_Z16_fetch_usbserialv>
 808337c:	4604      	mov	r4, r0
 808337e:	2202      	movs	r2, #2
 8083380:	6829      	ldr	r1, [r5, #0]
 8083382:	a806      	add	r0, sp, #24
 8083384:	f008 f962 	bl	808b64c <_ZN6StringC1Efi>
 8083388:	9906      	ldr	r1, [sp, #24]
 808338a:	4620      	mov	r0, r4
 808338c:	f008 fae9 	bl	808b962 <_ZN5Print7printlnEPKc>
 8083390:	a806      	add	r0, sp, #24
 8083392:	f008 f877 	bl	808b484 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 8083396:	f009 ffa7 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808339a:	2030      	movs	r0, #48	; 0x30
 808339c:	a901      	add	r1, sp, #4
 808339e:	f7fd fc4d 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80833a2:	a802      	add	r0, sp, #8
 80833a4:	f008 f86e 	bl	808b484 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80833a8:	b00b      	add	sp, #44	; 0x2c
 80833aa:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 80833ac:	f009 fb94 	bl	808cad8 <_Z16_fetch_usbserialv>
 80833b0:	4907      	ldr	r1, [pc, #28]	; (80833d0 <_Z25serialGetTemperatureSlopev+0xf4>)
 80833b2:	f008 fad6 	bl	808b962 <_ZN5Print7printlnEPKc>
 80833b6:	e7f4      	b.n	80833a2 <_Z25serialGetTemperatureSlopev+0xc6>
 80833b8:	08090d47 	.word	0x08090d47
 80833bc:	20000c98 	.word	0x20000c98
 80833c0:	08090d62 	.word	0x08090d62
 80833c4:	08090d6d 	.word	0x08090d6d
 80833c8:	42c80000 	.word	0x42c80000
 80833cc:	08090d8b 	.word	0x08090d8b
 80833d0:	08090c04 	.word	0x08090c04

080833d4 <_Z22serialGetPressureSlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureSlope(void){
 80833d4:	b530      	push	{r4, r5, lr}
 80833d6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80833d8:	f009 fb7e 	bl	808cad8 <_Z16_fetch_usbserialv>
 80833dc:	f008 fab5 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 80833e0:	f009 fb7a 	bl	808cad8 <_Z16_fetch_usbserialv>
 80833e4:	4932      	ldr	r1, [pc, #200]	; (80834b0 <_Z22serialGetPressureSlopev+0xdc>)
 80833e6:	f008 faa9 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 80833ea:	f009 fb75 	bl	808cad8 <_Z16_fetch_usbserialv>
 80833ee:	4604      	mov	r4, r0
 80833f0:	4d30      	ldr	r5, [pc, #192]	; (80834b4 <_Z22serialGetPressureSlopev+0xe0>)
 80833f2:	2202      	movs	r2, #2
 80833f4:	6829      	ldr	r1, [r5, #0]
 80833f6:	a806      	add	r0, sp, #24
 80833f8:	f008 f928 	bl	808b64c <_ZN6StringC1Efi>
 80833fc:	9906      	ldr	r1, [sp, #24]
 80833fe:	4620      	mov	r0, r4
 8083400:	f008 fa9c 	bl	808b93c <_ZN5Print5printEPKc>
 8083404:	a806      	add	r0, sp, #24
 8083406:	f008 f83d 	bl	808b484 <_ZN6StringD1Ev>
    Serial.println(" torr");
 808340a:	f009 fb65 	bl	808cad8 <_Z16_fetch_usbserialv>
 808340e:	492a      	ldr	r1, [pc, #168]	; (80834b8 <_Z22serialGetPressureSlopev+0xe4>)
 8083410:	f008 faa7 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 8083414:	f009 fb60 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083418:	4928      	ldr	r1, [pc, #160]	; (80834bc <_Z22serialGetPressureSlopev+0xe8>)
 808341a:	f008 fa8f 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808341e:	f009 fb5b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083422:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083426:	f008 fbef 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808342a:	f009 fb55 	bl	808cad8 <_Z16_fetch_usbserialv>
 808342e:	220d      	movs	r2, #13
 8083430:	4601      	mov	r1, r0
 8083432:	a802      	add	r0, sp, #8
 8083434:	f008 fc52 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083438:	a802      	add	r0, sp, #8
 808343a:	f008 fa36 	bl	808b8aa <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808343e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8083442:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083444:	f00a ffc8 	bl	808e3d8 <__aeabi_fcmpge>
 8083448:	b360      	cbz	r0, 80834a4 <_Z22serialGetPressureSlopev+0xd0>
 808344a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808344e:	4620      	mov	r0, r4
 8083450:	f00a ffae 	bl	808e3b0 <__aeabi_fcmplt>
 8083454:	b330      	cbz	r0, 80834a4 <_Z22serialGetPressureSlopev+0xd0>
        pressure_slope = tempfloat;
        tempfloat *= 100;
 8083456:	491a      	ldr	r1, [pc, #104]	; (80834c0 <_Z22serialGetPressureSlopev+0xec>)
 8083458:	4620      	mov	r0, r4
        pressure_slope = tempfloat;
 808345a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 808345c:	f00a fe0a 	bl	808e074 <__aeabi_fmul>
        tempValue = tempfloat;
 8083460:	f00a ffce 	bl	808e400 <__aeabi_f2iz>
 8083464:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 8083466:	f009 fb37 	bl	808cad8 <_Z16_fetch_usbserialv>
 808346a:	4916      	ldr	r1, [pc, #88]	; (80834c4 <_Z22serialGetPressureSlopev+0xf0>)
 808346c:	f008 fa66 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope,2));
 8083470:	f009 fb32 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083474:	4604      	mov	r4, r0
 8083476:	2202      	movs	r2, #2
 8083478:	6829      	ldr	r1, [r5, #0]
 808347a:	a806      	add	r0, sp, #24
 808347c:	f008 f8e6 	bl	808b64c <_ZN6StringC1Efi>
 8083480:	9906      	ldr	r1, [sp, #24]
 8083482:	4620      	mov	r0, r4
 8083484:	f008 fa6d 	bl	808b962 <_ZN5Print7printlnEPKc>
 8083488:	a806      	add	r0, sp, #24
 808348a:	f007 fffb 	bl	808b484 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 808348e:	f009 ff2b 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8083492:	2038      	movs	r0, #56	; 0x38
 8083494:	a901      	add	r1, sp, #4
 8083496:	f7fd fbd1 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 808349a:	a802      	add	r0, sp, #8
 808349c:	f007 fff2 	bl	808b484 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80834a0:	b00b      	add	sp, #44	; 0x2c
 80834a2:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 80834a4:	f009 fb18 	bl	808cad8 <_Z16_fetch_usbserialv>
 80834a8:	4907      	ldr	r1, [pc, #28]	; (80834c8 <_Z22serialGetPressureSlopev+0xf4>)
 80834aa:	f008 fa5a 	bl	808b962 <_ZN5Print7printlnEPKc>
 80834ae:	e7f4      	b.n	808349a <_Z22serialGetPressureSlopev+0xc6>
 80834b0:	08090da5 	.word	0x08090da5
 80834b4:	200007e4 	.word	0x200007e4
 80834b8:	08090dbd 	.word	0x08090dbd
 80834bc:	08090dc3 	.word	0x08090dc3
 80834c0:	42c80000 	.word	0x42c80000
 80834c4:	08090dde 	.word	0x08090dde
 80834c8:	08090c04 	.word	0x08090c04

080834cc <_Z22serialGetHumiditySlopev>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumiditySlope(void){
 80834cc:	b530      	push	{r4, r5, lr}
 80834ce:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80834d0:	f009 fb02 	bl	808cad8 <_Z16_fetch_usbserialv>
 80834d4:	f008 fa39 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 80834d8:	f009 fafe 	bl	808cad8 <_Z16_fetch_usbserialv>
 80834dc:	4932      	ldr	r1, [pc, #200]	; (80835a8 <_Z22serialGetHumiditySlopev+0xdc>)
 80834de:	f008 fa2d 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 80834e2:	f009 faf9 	bl	808cad8 <_Z16_fetch_usbserialv>
 80834e6:	4604      	mov	r4, r0
 80834e8:	4d30      	ldr	r5, [pc, #192]	; (80835ac <_Z22serialGetHumiditySlopev+0xe0>)
 80834ea:	2202      	movs	r2, #2
 80834ec:	6829      	ldr	r1, [r5, #0]
 80834ee:	a806      	add	r0, sp, #24
 80834f0:	f008 f8ac 	bl	808b64c <_ZN6StringC1Efi>
 80834f4:	9906      	ldr	r1, [sp, #24]
 80834f6:	4620      	mov	r0, r4
 80834f8:	f008 fa20 	bl	808b93c <_ZN5Print5printEPKc>
 80834fc:	a806      	add	r0, sp, #24
 80834fe:	f007 ffc1 	bl	808b484 <_ZN6StringD1Ev>
    Serial.println(" %");
 8083502:	f009 fae9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083506:	492a      	ldr	r1, [pc, #168]	; (80835b0 <_Z22serialGetHumiditySlopev+0xe4>)
 8083508:	f008 fa2b 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 808350c:	f009 fae4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083510:	4928      	ldr	r1, [pc, #160]	; (80835b4 <_Z22serialGetHumiditySlopev+0xe8>)
 8083512:	f008 fa13 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083516:	f009 fadf 	bl	808cad8 <_Z16_fetch_usbserialv>
 808351a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808351e:	f008 fb73 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083522:	f009 fad9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083526:	220d      	movs	r2, #13
 8083528:	4601      	mov	r1, r0
 808352a:	a802      	add	r0, sp, #8
 808352c:	f008 fbd6 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083530:	a802      	add	r0, sp, #8
 8083532:	f008 f9ba 	bl	808b8aa <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083536:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 808353a:	4604      	mov	r4, r0
    if(tempfloat >= 0.5 && tempfloat < 10){
 808353c:	f00a ff4c 	bl	808e3d8 <__aeabi_fcmpge>
 8083540:	b358      	cbz	r0, 808359a <_Z22serialGetHumiditySlopev+0xce>
 8083542:	4620      	mov	r0, r4
 8083544:	491c      	ldr	r1, [pc, #112]	; (80835b8 <_Z22serialGetHumiditySlopev+0xec>)
 8083546:	f00a ff33 	bl	808e3b0 <__aeabi_fcmplt>
 808354a:	b330      	cbz	r0, 808359a <_Z22serialGetHumiditySlopev+0xce>
        rh_slope = tempfloat;
        tempfloat *= 100;
 808354c:	491b      	ldr	r1, [pc, #108]	; (80835bc <_Z22serialGetHumiditySlopev+0xf0>)
 808354e:	4620      	mov	r0, r4
        rh_slope = tempfloat;
 8083550:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8083552:	f00a fd8f 	bl	808e074 <__aeabi_fmul>
        tempValue = tempfloat;
 8083556:	f00a ff53 	bl	808e400 <__aeabi_f2iz>
 808355a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 808355c:	f009 fabc 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083560:	4917      	ldr	r1, [pc, #92]	; (80835c0 <_Z22serialGetHumiditySlopev+0xf4>)
 8083562:	f008 f9eb 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope,2));
 8083566:	f009 fab7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808356a:	4604      	mov	r4, r0
 808356c:	2202      	movs	r2, #2
 808356e:	6829      	ldr	r1, [r5, #0]
 8083570:	a806      	add	r0, sp, #24
 8083572:	f008 f86b 	bl	808b64c <_ZN6StringC1Efi>
 8083576:	9906      	ldr	r1, [sp, #24]
 8083578:	4620      	mov	r0, r4
 808357a:	f008 f9f2 	bl	808b962 <_ZN5Print7printlnEPKc>
 808357e:	a806      	add	r0, sp, #24
 8083580:	f007 ff80 	bl	808b484 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 8083584:	f009 feb0 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8083588:	2040      	movs	r0, #64	; 0x40
 808358a:	a901      	add	r1, sp, #4
 808358c:	f7fd fb56 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083590:	a802      	add	r0, sp, #8
 8083592:	f007 ff77 	bl	808b484 <_ZN6StringD1Ev>
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083596:	b00b      	add	sp, #44	; 0x2c
 8083598:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 808359a:	f009 fa9d 	bl	808cad8 <_Z16_fetch_usbserialv>
 808359e:	4909      	ldr	r1, [pc, #36]	; (80835c4 <_Z22serialGetHumiditySlopev+0xf8>)
 80835a0:	f008 f9df 	bl	808b962 <_ZN5Print7printlnEPKc>
 80835a4:	e7f4      	b.n	8083590 <_Z22serialGetHumiditySlopev+0xc4>
 80835a6:	bf00      	nop
 80835a8:	08090df5 	.word	0x08090df5
 80835ac:	200007ec 	.word	0x200007ec
 80835b0:	08090e07 	.word	0x08090e07
 80835b4:	08090e0a 	.word	0x08090e0a
 80835b8:	41200000 	.word	0x41200000
 80835bc:	42c80000 	.word	0x42c80000
 80835c0:	08090e1f 	.word	0x08090e1f
 80835c4:	08090c04 	.word	0x08090c04

080835c8 <_Z20readAlpha1Constantlyv>:
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
 80835c8:	b570      	push	{r4, r5, r6, lr}
    while(!Serial.available()){
        CO_float = readCO();
 80835ca:	4d0c      	ldr	r5, [pc, #48]	; (80835fc <_Z20readAlpha1Constantlyv+0x34>)
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
 80835cc:	4e0c      	ldr	r6, [pc, #48]	; (8083600 <_Z20readAlpha1Constantlyv+0x38>)
    while(!Serial.available()){
 80835ce:	f009 fa83 	bl	808cad8 <_Z16_fetch_usbserialv>
 80835d2:	6803      	ldr	r3, [r0, #0]
 80835d4:	691b      	ldr	r3, [r3, #16]
 80835d6:	4798      	blx	r3
 80835d8:	b978      	cbnz	r0, 80835fa <_Z20readAlpha1Constantlyv+0x32>
        CO_float = readCO();
 80835da:	f7fe feb7 	bl	808234c <_Z6readCOv>
 80835de:	6028      	str	r0, [r5, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
 80835e0:	f009 fa7a 	bl	808cad8 <_Z16_fetch_usbserialv>
 80835e4:	4604      	mov	r4, r0
 80835e6:	6828      	ldr	r0, [r5, #0]
 80835e8:	f00a f896 	bl	808d718 <__aeabi_f2d>
 80835ec:	4602      	mov	r2, r0
 80835ee:	460b      	mov	r3, r1
 80835f0:	4620      	mov	r0, r4
 80835f2:	4631      	mov	r1, r6
 80835f4:	f7fd fb54 	bl	8080ca0 <_ZN5Print6printfEPKcz>
    while(!Serial.available()){
 80835f8:	e7e9      	b.n	80835ce <_Z20readAlpha1Constantlyv+0x6>
    }
}
 80835fa:	bd70      	pop	{r4, r5, r6, pc}
 80835fc:	200002d8 	.word	0x200002d8
 8083600:	08090e30 	.word	0x08090e30

08083604 <_Z23outputSerialMenuOptionsv>:
void outputSerialMenuOptions(void){
 8083604:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 8083606:	f009 fa67 	bl	808cad8 <_Z16_fetch_usbserialv>
 808360a:	49a2      	ldr	r1, [pc, #648]	; (8083894 <_Z23outputSerialMenuOptionsv+0x290>)
 808360c:	f008 f9a9 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 8083610:	f009 fa62 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083614:	49a0      	ldr	r1, [pc, #640]	; (8083898 <_Z23outputSerialMenuOptionsv+0x294>)
 8083616:	f008 f9a4 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 808361a:	f009 fa5d 	bl	808cad8 <_Z16_fetch_usbserialv>
 808361e:	499f      	ldr	r1, [pc, #636]	; (808389c <_Z23outputSerialMenuOptionsv+0x298>)
 8083620:	f008 f99f 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 8083624:	f009 fa58 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083628:	499d      	ldr	r1, [pc, #628]	; (80838a0 <_Z23outputSerialMenuOptionsv+0x29c>)
 808362a:	f008 f99a 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 808362e:	f009 fa53 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083632:	499c      	ldr	r1, [pc, #624]	; (80838a4 <_Z23outputSerialMenuOptionsv+0x2a0>)
 8083634:	f008 f995 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 8083638:	f009 fa4e 	bl	808cad8 <_Z16_fetch_usbserialv>
 808363c:	499a      	ldr	r1, [pc, #616]	; (80838a8 <_Z23outputSerialMenuOptionsv+0x2a4>)
 808363e:	f008 f990 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 8083642:	f009 fa49 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083646:	4999      	ldr	r1, [pc, #612]	; (80838ac <_Z23outputSerialMenuOptionsv+0x2a8>)
 8083648:	f008 f98b 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 808364c:	f009 fa44 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083650:	4997      	ldr	r1, [pc, #604]	; (80838b0 <_Z23outputSerialMenuOptionsv+0x2ac>)
 8083652:	f008 f986 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 8083656:	f009 fa3f 	bl	808cad8 <_Z16_fetch_usbserialv>
 808365a:	4996      	ldr	r1, [pc, #600]	; (80838b4 <_Z23outputSerialMenuOptionsv+0x2b0>)
 808365c:	f008 f981 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8083660:	f009 fa3a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083664:	4994      	ldr	r1, [pc, #592]	; (80838b8 <_Z23outputSerialMenuOptionsv+0x2b4>)
 8083666:	f008 f97c 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 808366a:	f009 fa35 	bl	808cad8 <_Z16_fetch_usbserialv>
 808366e:	4993      	ldr	r1, [pc, #588]	; (80838bc <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083670:	f008 f977 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 8083674:	f009 fa30 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083678:	4991      	ldr	r1, [pc, #580]	; (80838c0 <_Z23outputSerialMenuOptionsv+0x2bc>)
 808367a:	f008 f972 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 808367e:	f009 fa2b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083682:	4990      	ldr	r1, [pc, #576]	; (80838c4 <_Z23outputSerialMenuOptionsv+0x2c0>)
 8083684:	f008 f96d 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8083688:	f009 fa26 	bl	808cad8 <_Z16_fetch_usbserialv>
 808368c:	498e      	ldr	r1, [pc, #568]	; (80838c8 <_Z23outputSerialMenuOptionsv+0x2c4>)
 808368e:	f008 f968 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 8083692:	f009 fa21 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083696:	498d      	ldr	r1, [pc, #564]	; (80838cc <_Z23outputSerialMenuOptionsv+0x2c8>)
 8083698:	f008 f963 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 808369c:	f009 fa1c 	bl	808cad8 <_Z16_fetch_usbserialv>
 80836a0:	498b      	ldr	r1, [pc, #556]	; (80838d0 <_Z23outputSerialMenuOptionsv+0x2cc>)
 80836a2:	f008 f95e 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 80836a6:	f009 fa17 	bl	808cad8 <_Z16_fetch_usbserialv>
 80836aa:	498a      	ldr	r1, [pc, #552]	; (80838d4 <_Z23outputSerialMenuOptionsv+0x2d0>)
 80836ac:	f008 f959 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 80836b0:	f009 fa12 	bl	808cad8 <_Z16_fetch_usbserialv>
 80836b4:	4988      	ldr	r1, [pc, #544]	; (80838d8 <_Z23outputSerialMenuOptionsv+0x2d4>)
 80836b6:	f008 f954 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 80836ba:	f009 fa0d 	bl	808cad8 <_Z16_fetch_usbserialv>
 80836be:	4987      	ldr	r1, [pc, #540]	; (80838dc <_Z23outputSerialMenuOptionsv+0x2d8>)
 80836c0:	f008 f94f 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 80836c4:	f009 fa08 	bl	808cad8 <_Z16_fetch_usbserialv>
 80836c8:	4985      	ldr	r1, [pc, #532]	; (80838e0 <_Z23outputSerialMenuOptionsv+0x2dc>)
 80836ca:	f008 f94a 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 80836ce:	f009 fa03 	bl	808cad8 <_Z16_fetch_usbserialv>
 80836d2:	4984      	ldr	r1, [pc, #528]	; (80838e4 <_Z23outputSerialMenuOptionsv+0x2e0>)
 80836d4:	f008 f945 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 80836d8:	f009 f9fe 	bl	808cad8 <_Z16_fetch_usbserialv>
 80836dc:	4982      	ldr	r1, [pc, #520]	; (80838e8 <_Z23outputSerialMenuOptionsv+0x2e4>)
 80836de:	f008 f940 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 80836e2:	f009 f9f9 	bl	808cad8 <_Z16_fetch_usbserialv>
 80836e6:	4981      	ldr	r1, [pc, #516]	; (80838ec <_Z23outputSerialMenuOptionsv+0x2e8>)
 80836e8:	f008 f93b 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 80836ec:	f009 f9f4 	bl	808cad8 <_Z16_fetch_usbserialv>
 80836f0:	497f      	ldr	r1, [pc, #508]	; (80838f0 <_Z23outputSerialMenuOptionsv+0x2ec>)
 80836f2:	f008 f936 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 80836f6:	f009 f9ef 	bl	808cad8 <_Z16_fetch_usbserialv>
 80836fa:	497e      	ldr	r1, [pc, #504]	; (80838f4 <_Z23outputSerialMenuOptionsv+0x2f0>)
 80836fc:	f008 f931 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 8083700:	f009 f9ea 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083704:	497c      	ldr	r1, [pc, #496]	; (80838f8 <_Z23outputSerialMenuOptionsv+0x2f4>)
 8083706:	f008 f92c 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 808370a:	f009 f9e5 	bl	808cad8 <_Z16_fetch_usbserialv>
 808370e:	497b      	ldr	r1, [pc, #492]	; (80838fc <_Z23outputSerialMenuOptionsv+0x2f8>)
 8083710:	f008 f927 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 8083714:	f009 f9e0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083718:	4979      	ldr	r1, [pc, #484]	; (8083900 <_Z23outputSerialMenuOptionsv+0x2fc>)
 808371a:	f008 f922 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 808371e:	f009 f9db 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083722:	4978      	ldr	r1, [pc, #480]	; (8083904 <_Z23outputSerialMenuOptionsv+0x300>)
 8083724:	f008 f91d 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 8083728:	f009 f9d6 	bl	808cad8 <_Z16_fetch_usbserialv>
 808372c:	4976      	ldr	r1, [pc, #472]	; (8083908 <_Z23outputSerialMenuOptionsv+0x304>)
 808372e:	f008 f918 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 8083732:	f009 f9d1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083736:	4975      	ldr	r1, [pc, #468]	; (808390c <_Z23outputSerialMenuOptionsv+0x308>)
 8083738:	f008 f913 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 808373c:	f009 f9cc 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083740:	4973      	ldr	r1, [pc, #460]	; (8083910 <_Z23outputSerialMenuOptionsv+0x30c>)
 8083742:	f008 f90e 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 8083746:	f009 f9c7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808374a:	4972      	ldr	r1, [pc, #456]	; (8083914 <_Z23outputSerialMenuOptionsv+0x310>)
 808374c:	f008 f909 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8083750:	f009 f9c2 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083754:	4970      	ldr	r1, [pc, #448]	; (8083918 <_Z23outputSerialMenuOptionsv+0x314>)
 8083756:	f008 f904 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 808375a:	f009 f9bd 	bl	808cad8 <_Z16_fetch_usbserialv>
 808375e:	496f      	ldr	r1, [pc, #444]	; (808391c <_Z23outputSerialMenuOptionsv+0x318>)
 8083760:	f008 f8ff 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 8083764:	f009 f9b8 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083768:	496d      	ldr	r1, [pc, #436]	; (8083920 <_Z23outputSerialMenuOptionsv+0x31c>)
 808376a:	f008 f8fa 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("A:  Ouptput CO constantly and rapidly");
 808376e:	f009 f9b3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083772:	496c      	ldr	r1, [pc, #432]	; (8083924 <_Z23outputSerialMenuOptionsv+0x320>)
 8083774:	f008 f8f5 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8083778:	f009 f9ae 	bl	808cad8 <_Z16_fetch_usbserialv>
 808377c:	496a      	ldr	r1, [pc, #424]	; (8083928 <_Z23outputSerialMenuOptionsv+0x324>)
 808377e:	f008 f8f0 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celcius");
 8083782:	f009 f9a9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083786:	4969      	ldr	r1, [pc, #420]	; (808392c <_Z23outputSerialMenuOptionsv+0x328>)
 8083788:	f008 f8eb 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 808378c:	f009 f9a4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083790:	4967      	ldr	r1, [pc, #412]	; (8083930 <_Z23outputSerialMenuOptionsv+0x32c>)
 8083792:	f008 f8e6 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 8083796:	f009 f99f 	bl	808cad8 <_Z16_fetch_usbserialv>
 808379a:	4966      	ldr	r1, [pc, #408]	; (8083934 <_Z23outputSerialMenuOptionsv+0x330>)
 808379c:	f008 f8e1 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Farenheit");
 80837a0:	f009 f99a 	bl	808cad8 <_Z16_fetch_usbserialv>
 80837a4:	4964      	ldr	r1, [pc, #400]	; (8083938 <_Z23outputSerialMenuOptionsv+0x334>)
 80837a6:	f008 f8dc 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 80837aa:	f009 f995 	bl	808cad8 <_Z16_fetch_usbserialv>
 80837ae:	4963      	ldr	r1, [pc, #396]	; (808393c <_Z23outputSerialMenuOptionsv+0x338>)
 80837b0:	f008 f8d7 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 80837b4:	f009 f990 	bl	808cad8 <_Z16_fetch_usbserialv>
 80837b8:	4961      	ldr	r1, [pc, #388]	; (8083940 <_Z23outputSerialMenuOptionsv+0x33c>)
 80837ba:	f008 f8d2 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 80837be:	f009 f98b 	bl	808cad8 <_Z16_fetch_usbserialv>
 80837c2:	4960      	ldr	r1, [pc, #384]	; (8083944 <_Z23outputSerialMenuOptionsv+0x340>)
 80837c4:	f008 f8cd 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 80837c8:	f009 f986 	bl	808cad8 <_Z16_fetch_usbserialv>
 80837cc:	495e      	ldr	r1, [pc, #376]	; (8083948 <_Z23outputSerialMenuOptionsv+0x344>)
 80837ce:	f008 f8c8 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 80837d2:	f009 f981 	bl	808cad8 <_Z16_fetch_usbserialv>
 80837d6:	495d      	ldr	r1, [pc, #372]	; (808394c <_Z23outputSerialMenuOptionsv+0x348>)
 80837d8:	f008 f8c3 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 80837dc:	f009 f97c 	bl	808cad8 <_Z16_fetch_usbserialv>
 80837e0:	495b      	ldr	r1, [pc, #364]	; (8083950 <_Z23outputSerialMenuOptionsv+0x34c>)
 80837e2:	f008 f8be 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 80837e6:	f009 f977 	bl	808cad8 <_Z16_fetch_usbserialv>
 80837ea:	495a      	ldr	r1, [pc, #360]	; (8083954 <_Z23outputSerialMenuOptionsv+0x350>)
 80837ec:	f008 f8b9 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 80837f0:	f009 f972 	bl	808cad8 <_Z16_fetch_usbserialv>
 80837f4:	4958      	ldr	r1, [pc, #352]	; (8083958 <_Z23outputSerialMenuOptionsv+0x354>)
 80837f6:	f008 f8b4 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 80837fa:	f009 f96d 	bl	808cad8 <_Z16_fetch_usbserialv>
 80837fe:	4957      	ldr	r1, [pc, #348]	; (808395c <_Z23outputSerialMenuOptionsv+0x358>)
 8083800:	f008 f8af 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 8083804:	f009 f968 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083808:	4955      	ldr	r1, [pc, #340]	; (8083960 <_Z23outputSerialMenuOptionsv+0x35c>)
 808380a:	f008 f8aa 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 808380e:	f009 f963 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083812:	4954      	ldr	r1, [pc, #336]	; (8083964 <_Z23outputSerialMenuOptionsv+0x360>)
 8083814:	f008 f8a5 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 8083818:	f009 f95e 	bl	808cad8 <_Z16_fetch_usbserialv>
 808381c:	4952      	ldr	r1, [pc, #328]	; (8083968 <_Z23outputSerialMenuOptionsv+0x364>)
 808381e:	f008 f8a0 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 8083822:	f009 f959 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083826:	4951      	ldr	r1, [pc, #324]	; (808396c <_Z23outputSerialMenuOptionsv+0x368>)
 8083828:	f008 f89b 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 808382c:	f009 f954 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083830:	494f      	ldr	r1, [pc, #316]	; (8083970 <_Z23outputSerialMenuOptionsv+0x36c>)
 8083832:	f008 f896 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 8083836:	f009 f94f 	bl	808cad8 <_Z16_fetch_usbserialv>
 808383a:	494e      	ldr	r1, [pc, #312]	; (8083974 <_Z23outputSerialMenuOptionsv+0x370>)
 808383c:	f008 f891 	bl	808b962 <_ZN5Print7printlnEPKc>
    
    Serial.println("W:  Enable/Disable google location services");
 8083840:	f009 f94a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083844:	494c      	ldr	r1, [pc, #304]	; (8083978 <_Z23outputSerialMenuOptionsv+0x374>)
 8083846:	f008 f88c 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 808384a:	f009 f945 	bl	808cad8 <_Z16_fetch_usbserialv>
 808384e:	494b      	ldr	r1, [pc, #300]	; (808397c <_Z23outputSerialMenuOptionsv+0x378>)
 8083850:	f008 f887 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 8083854:	f009 f940 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083858:	4949      	ldr	r1, [pc, #292]	; (8083980 <_Z23outputSerialMenuOptionsv+0x37c>)
 808385a:	f008 f882 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 808385e:	f009 f93b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083862:	4948      	ldr	r1, [pc, #288]	; (8083984 <_Z23outputSerialMenuOptionsv+0x380>)
 8083864:	f008 f87d 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083868:	f009 f936 	bl	808cad8 <_Z16_fetch_usbserialv>
 808386c:	4946      	ldr	r1, [pc, #280]	; (8083988 <_Z23outputSerialMenuOptionsv+0x384>)
 808386e:	f008 f878 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
 8083872:	f009 f931 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083876:	4945      	ldr	r1, [pc, #276]	; (808398c <_Z23outputSerialMenuOptionsv+0x388>)
 8083878:	f008 f873 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 808387c:	f009 f92c 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083880:	4943      	ldr	r1, [pc, #268]	; (8083990 <_Z23outputSerialMenuOptionsv+0x38c>)
 8083882:	f008 f86e 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 8083886:	f009 f927 	bl	808cad8 <_Z16_fetch_usbserialv>
  }
 808388a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("x:  Exits this menu");
 808388e:	4941      	ldr	r1, [pc, #260]	; (8083994 <_Z23outputSerialMenuOptionsv+0x390>)
 8083890:	f008 b867 	b.w	808b962 <_ZN5Print7printlnEPKc>
 8083894:	08090e40 	.word	0x08090e40
 8083898:	08090e56 	.word	0x08090e56
 808389c:	08090e6b 	.word	0x08090e6b
 80838a0:	08090e7f 	.word	0x08090e7f
 80838a4:	08090e93 	.word	0x08090e93
 80838a8:	08090ea6 	.word	0x08090ea6
 80838ac:	08090ebb 	.word	0x08090ebb
 80838b0:	08090ecf 	.word	0x08090ecf
 80838b4:	08090ee6 	.word	0x08090ee6
 80838b8:	08090efc 	.word	0x08090efc
 80838bc:	08090f12 	.word	0x08090f12
 80838c0:	08090f27 	.word	0x08090f27
 80838c4:	08090f44 	.word	0x08090f44
 80838c8:	08090f60 	.word	0x08090f60
 80838cc:	08090f7a 	.word	0x08090f7a
 80838d0:	08090f93 	.word	0x08090f93
 80838d4:	08090fad 	.word	0x08090fad
 80838d8:	08090fc6 	.word	0x08090fc6
 80838dc:	08090fe2 	.word	0x08090fe2
 80838e0:	08090fff 	.word	0x08090fff
 80838e4:	08091018 	.word	0x08091018
 80838e8:	08091034 	.word	0x08091034
 80838ec:	0809104c 	.word	0x0809104c
 80838f0:	08091065 	.word	0x08091065
 80838f4:	0809107e 	.word	0x0809107e
 80838f8:	08091092 	.word	0x08091092
 80838fc:	080910a7 	.word	0x080910a7
 8083900:	080910c2 	.word	0x080910c2
 8083904:	080910dd 	.word	0x080910dd
 8083908:	080910f3 	.word	0x080910f3
 808390c:	08091104 	.word	0x08091104
 8083910:	08091116 	.word	0x08091116
 8083914:	08091127 	.word	0x08091127
 8083918:	08091139 	.word	0x08091139
 808391c:	08091162 	.word	0x08091162
 8083920:	0809118b 	.word	0x0809118b
 8083924:	080911ba 	.word	0x080911ba
 8083928:	080911e0 	.word	0x080911e0
 808392c:	08091205 	.word	0x08091205
 8083930:	0809122d 	.word	0x0809122d
 8083934:	0809126d 	.word	0x0809126d
 8083938:	080912b0 	.word	0x080912b0
 808393c:	080912da 	.word	0x080912da
 8083940:	0809131d 	.word	0x0809131d
 8083944:	08091363 	.word	0x08091363
 8083948:	08091397 	.word	0x08091397
 808394c:	080913b5 	.word	0x080913b5
 8083950:	080913d9 	.word	0x080913d9
 8083954:	080913f4 	.word	0x080913f4
 8083958:	0809141e 	.word	0x0809141e
 808395c:	08091453 	.word	0x08091453
 8083960:	08091477 	.word	0x08091477
 8083964:	0809148b 	.word	0x0809148b
 8083968:	080914a7 	.word	0x080914a7
 808396c:	080914cc 	.word	0x080914cc
 8083970:	080914f0 	.word	0x080914f0
 8083974:	08091515 	.word	0x08091515
 8083978:	0809153d 	.word	0x0809153d
 808397c:	08091569 	.word	0x08091569
 8083980:	080915ac 	.word	0x080915ac
 8083984:	080915de 	.word	0x080915de
 8083988:	08091604 	.word	0x08091604
 808398c:	0809166a 	.word	0x0809166a
 8083990:	080916ce 	.word	0x080916ce
 8083994:	080916e3 	.word	0x080916e3

08083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8083998:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808399a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 808399c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 808399e:	b17c      	cbz	r4, 80839c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80839a0:	6863      	ldr	r3, [r4, #4]
 80839a2:	3b01      	subs	r3, #1
 80839a4:	6063      	str	r3, [r4, #4]
 80839a6:	b95b      	cbnz	r3, 80839c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80839a8:	6823      	ldr	r3, [r4, #0]
 80839aa:	4620      	mov	r0, r4
 80839ac:	689b      	ldr	r3, [r3, #8]
 80839ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80839b0:	68a3      	ldr	r3, [r4, #8]
 80839b2:	3b01      	subs	r3, #1
 80839b4:	60a3      	str	r3, [r4, #8]
 80839b6:	b91b      	cbnz	r3, 80839c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80839b8:	6823      	ldr	r3, [r4, #0]
 80839ba:	4620      	mov	r0, r4
 80839bc:	68db      	ldr	r3, [r3, #12]
 80839be:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80839c0:	4628      	mov	r0, r5
 80839c2:	bd38      	pop	{r3, r4, r5, pc}

080839c4 <_Z13outputToCloud6StringS_>:
void outputToCloud(String data, String sensible_data){
 80839c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80839c8:	b09d      	sub	sp, #116	; 0x74
 80839ca:	4607      	mov	r7, r0
 80839cc:	460e      	mov	r6, r1
    String webhook_data = " ";
 80839ce:	a804      	add	r0, sp, #16
 80839d0:	49b0      	ldr	r1, [pc, #704]	; (8083c94 <_Z13outputToCloud6StringS_+0x2d0>)
 80839d2:	f007 fda1 	bl	808b518 <_ZN6StringC1EPKc>
    CO_sum += CO_float;
 80839d6:	f8df 8348 	ldr.w	r8, [pc, #840]	; 8083d20 <_Z13outputToCloud6StringS_+0x35c>
 80839da:	4baf      	ldr	r3, [pc, #700]	; (8083c98 <_Z13outputToCloud6StringS_+0x2d4>)
 80839dc:	f8d8 0000 	ldr.w	r0, [r8]
 80839e0:	6819      	ldr	r1, [r3, #0]
 80839e2:	f00a fa3f 	bl	808de64 <__addsf3>
    CO2_sum += CO2_float;
 80839e6:	4dad      	ldr	r5, [pc, #692]	; (8083c9c <_Z13outputToCloud6StringS_+0x2d8>)
 80839e8:	4bad      	ldr	r3, [pc, #692]	; (8083ca0 <_Z13outputToCloud6StringS_+0x2dc>)
    CO_sum += CO_float;
 80839ea:	f8c8 0000 	str.w	r0, [r8]
    CO2_sum += CO2_float;
 80839ee:	6819      	ldr	r1, [r3, #0]
    CO_sum += CO_float;
 80839f0:	4604      	mov	r4, r0
    CO2_sum += CO2_float;
 80839f2:	6828      	ldr	r0, [r5, #0]
 80839f4:	f00a fa36 	bl	808de64 <__addsf3>
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 80839f8:	4baa      	ldr	r3, [pc, #680]	; (8083ca4 <_Z13outputToCloud6StringS_+0x2e0>)
    measurement_count++;
 80839fa:	f8df b330 	ldr.w	fp, [pc, #816]	; 8083d2c <_Z13outputToCloud6StringS_+0x368>
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 80839fe:	681b      	ldr	r3, [r3, #0]
 8083a00:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8083d24 <_Z13outputToCloud6StringS_+0x360>
    CO2_sum += CO2_float;
 8083a04:	4682      	mov	sl, r0
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 8083a06:	f8c9 3000 	str.w	r3, [r9]
    measurement_count++;
 8083a0a:	f8db 3000 	ldr.w	r3, [fp]
    CO2_sum += CO2_float;
 8083a0e:	6028      	str	r0, [r5, #0]
    measurement_count++;
 8083a10:	1c58      	adds	r0, r3, #1
    if(measurement_count == measurements_to_average){
 8083a12:	4ba5      	ldr	r3, [pc, #660]	; (8083ca8 <_Z13outputToCloud6StringS_+0x2e4>)
    measurement_count++;
 8083a14:	f8cb 0000 	str.w	r0, [fp]
    if(measurement_count == measurements_to_average){
 8083a18:	681b      	ldr	r3, [r3, #0]
 8083a1a:	4298      	cmp	r0, r3
 8083a1c:	f040 8125 	bne.w	8083c6a <_Z13outputToCloud6StringS_+0x2a6>
        CO_sum /= measurements_to_average;
 8083a20:	f00a fad4 	bl	808dfcc <__aeabi_i2f>
 8083a24:	4601      	mov	r1, r0
 8083a26:	9003      	str	r0, [sp, #12]
 8083a28:	4620      	mov	r0, r4
 8083a2a:	f00a fbd7 	bl	808e1dc <__aeabi_fdiv>
        CO2_sum /= measurements_to_average;
 8083a2e:	9903      	ldr	r1, [sp, #12]
        CO_sum /= measurements_to_average;
 8083a30:	f8c8 0000 	str.w	r0, [r8]
        CO2_sum /= measurements_to_average;
 8083a34:	4650      	mov	r0, sl
 8083a36:	f00a fbd1 	bl	808e1dc <__aeabi_fdiv>
        measurement_count = 0;
 8083a3a:	2300      	movs	r3, #0
 8083a3c:	f8cb 3000 	str.w	r3, [fp]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8083a40:	4b9a      	ldr	r3, [pc, #616]	; (8083cac <_Z13outputToCloud6StringS_+0x2e8>)
 8083a42:	220a      	movs	r2, #10
 8083a44:	6819      	ldr	r1, [r3, #0]
        CO2_sum /= measurements_to_average;
 8083a46:	6028      	str	r0, [r5, #0]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8083a48:	a80c      	add	r0, sp, #48	; 0x30
 8083a4a:	f007 fdd9 	bl	808b600 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083a4e:	a90c      	add	r1, sp, #48	; 0x30
 8083a50:	a810      	add	r0, sp, #64	; 0x40
 8083a52:	f007 fda0 	bl	808b596 <_ZN6StringC1ERKS_>
 8083a56:	4996      	ldr	r1, [pc, #600]	; (8083cb0 <_Z13outputToCloud6StringS_+0x2ec>)
 8083a58:	a810      	add	r0, sp, #64	; 0x40
 8083a5a:	f007 fe8c 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083a5e:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8083d30 <_Z13outputToCloud6StringS_+0x36c>
 8083a62:	4683      	mov	fp, r0
 8083a64:	f8da 000c 	ldr.w	r0, [sl, #12]
 8083a68:	f009 fe56 	bl	808d718 <__aeabi_f2d>
 8083a6c:	2200      	movs	r2, #0
 8083a6e:	4b91      	ldr	r3, [pc, #580]	; (8083cb4 <_Z13outputToCloud6StringS_+0x2f0>)
 8083a70:	f009 ffd4 	bl	808da1c <__aeabi_ddiv>
 8083a74:	2401      	movs	r4, #1
 8083a76:	4602      	mov	r2, r0
 8083a78:	460b      	mov	r3, r1
 8083a7a:	9400      	str	r4, [sp, #0]
 8083a7c:	a814      	add	r0, sp, #80	; 0x50
 8083a7e:	f007 fdfc 	bl	808b67a <_ZN6StringC1Edi>
 8083a82:	a914      	add	r1, sp, #80	; 0x50
 8083a84:	4658      	mov	r0, fp
 8083a86:	f007 fe6a 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8083a8a:	498b      	ldr	r1, [pc, #556]	; (8083cb8 <_Z13outputToCloud6StringS_+0x2f4>)
 8083a8c:	f007 fe73 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083a90:	f8d8 1000 	ldr.w	r1, [r8]
 8083a94:	f007 fe8d 	bl	808b7b2 <_ZplRK15StringSumHelperf>
 8083a98:	4988      	ldr	r1, [pc, #544]	; (8083cbc <_Z13outputToCloud6StringS_+0x2f8>)
 8083a9a:	f007 fe6c 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083a9e:	6829      	ldr	r1, [r5, #0]
 8083aa0:	f007 fe87 	bl	808b7b2 <_ZplRK15StringSumHelperf>
 8083aa4:	4986      	ldr	r1, [pc, #536]	; (8083cc0 <_Z13outputToCloud6StringS_+0x2fc>)
 8083aa6:	f007 fe66 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083aaa:	4b86      	ldr	r3, [pc, #536]	; (8083cc4 <_Z13outputToCloud6StringS_+0x300>)
 8083aac:	6819      	ldr	r1, [r3, #0]
 8083aae:	f007 fe76 	bl	808b79e <_ZplRK15StringSumHelperi>
 8083ab2:	4985      	ldr	r1, [pc, #532]	; (8083cc8 <_Z13outputToCloud6StringS_+0x304>)
 8083ab4:	f007 fe5f 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083ab8:	4b84      	ldr	r3, [pc, #528]	; (8083ccc <_Z13outputToCloud6StringS_+0x308>)
 8083aba:	6819      	ldr	r1, [r3, #0]
 8083abc:	f007 fe79 	bl	808b7b2 <_ZplRK15StringSumHelperf>
 8083ac0:	4983      	ldr	r1, [pc, #524]	; (8083cd0 <_Z13outputToCloud6StringS_+0x30c>)
 8083ac2:	f007 fe58 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083ac6:	4b83      	ldr	r3, [pc, #524]	; (8083cd4 <_Z13outputToCloud6StringS_+0x310>)
 8083ac8:	6819      	ldr	r1, [r3, #0]
 8083aca:	f007 fe68 	bl	808b79e <_ZplRK15StringSumHelperi>
 8083ace:	4982      	ldr	r1, [pc, #520]	; (8083cd8 <_Z13outputToCloud6StringS_+0x314>)
 8083ad0:	f007 fe51 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083ad4:	4605      	mov	r5, r0
 8083ad6:	f7fd fdbf 	bl	8081658 <_Z15readTemperaturev>
 8083ada:	4622      	mov	r2, r4
 8083adc:	4601      	mov	r1, r0
 8083ade:	a818      	add	r0, sp, #96	; 0x60
 8083ae0:	f007 fdb4 	bl	808b64c <_ZN6StringC1Efi>
 8083ae4:	4628      	mov	r0, r5
 8083ae6:	a918      	add	r1, sp, #96	; 0x60
 8083ae8:	f007 fe39 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8083aec:	497b      	ldr	r1, [pc, #492]	; (8083cdc <_Z13outputToCloud6StringS_+0x318>)
 8083aee:	f007 fe42 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083af2:	4601      	mov	r1, r0
 8083af4:	a808      	add	r0, sp, #32
 8083af6:	f007 fd4e 	bl	808b596 <_ZN6StringC1ERKS_>
 8083afa:	a818      	add	r0, sp, #96	; 0x60
 8083afc:	f007 fcc2 	bl	808b484 <_ZN6StringD1Ev>
 8083b00:	a814      	add	r0, sp, #80	; 0x50
 8083b02:	f007 fcbf 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083b06:	a810      	add	r0, sp, #64	; 0x40
 8083b08:	f007 fcbc 	bl	808b484 <_ZN6StringD1Ev>
 8083b0c:	a80c      	add	r0, sp, #48	; 0x30
 8083b0e:	f007 fcb9 	bl	808b484 <_ZN6StringD1Ev>
        webhook_data += String(bme.pressure / 100.0, 1) + ",HUM: " + String(bme.humidity, 1) + ",Snd: " + String(sound_average) + ",O3: " + O3_sum + "\n\r";
 8083b12:	f8da 0004 	ldr.w	r0, [sl, #4]
 8083b16:	f009 fdff 	bl	808d718 <__aeabi_f2d>
 8083b1a:	2200      	movs	r2, #0
 8083b1c:	4b70      	ldr	r3, [pc, #448]	; (8083ce0 <_Z13outputToCloud6StringS_+0x31c>)
 8083b1e:	f009 ff7d 	bl	808da1c <__aeabi_ddiv>
 8083b22:	9400      	str	r4, [sp, #0]
 8083b24:	460b      	mov	r3, r1
 8083b26:	4602      	mov	r2, r0
 8083b28:	a80c      	add	r0, sp, #48	; 0x30
 8083b2a:	f007 fda6 	bl	808b67a <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8083b2e:	a90c      	add	r1, sp, #48	; 0x30
 8083b30:	a810      	add	r0, sp, #64	; 0x40
 8083b32:	f007 fd30 	bl	808b596 <_ZN6StringC1ERKS_>
 8083b36:	496b      	ldr	r1, [pc, #428]	; (8083ce4 <_Z13outputToCloud6StringS_+0x320>)
 8083b38:	a810      	add	r0, sp, #64	; 0x40
 8083b3a:	f007 fe1c 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083b3e:	4605      	mov	r5, r0
 8083b40:	4622      	mov	r2, r4
 8083b42:	f8da 1008 	ldr.w	r1, [sl, #8]
 8083b46:	a814      	add	r0, sp, #80	; 0x50
 8083b48:	f007 fd80 	bl	808b64c <_ZN6StringC1Efi>
 8083b4c:	a914      	add	r1, sp, #80	; 0x50
 8083b4e:	4628      	mov	r0, r5
 8083b50:	f007 fe05 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8083b54:	4964      	ldr	r1, [pc, #400]	; (8083ce8 <_Z13outputToCloud6StringS_+0x324>)
 8083b56:	f007 fe0e 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083b5a:	2306      	movs	r3, #6
 8083b5c:	4604      	mov	r4, r0
 8083b5e:	9300      	str	r3, [sp, #0]
 8083b60:	4b62      	ldr	r3, [pc, #392]	; (8083cec <_Z13outputToCloud6StringS_+0x328>)
 8083b62:	a818      	add	r0, sp, #96	; 0x60
 8083b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083b68:	f007 fd87 	bl	808b67a <_ZN6StringC1Edi>
 8083b6c:	4620      	mov	r0, r4
 8083b6e:	a918      	add	r1, sp, #96	; 0x60
 8083b70:	f007 fdf5 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8083b74:	495e      	ldr	r1, [pc, #376]	; (8083cf0 <_Z13outputToCloud6StringS_+0x32c>)
 8083b76:	f007 fdfe 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083b7a:	f8d9 1000 	ldr.w	r1, [r9]
 8083b7e:	f007 fe18 	bl	808b7b2 <_ZplRK15StringSumHelperf>
 8083b82:	495c      	ldr	r1, [pc, #368]	; (8083cf4 <_Z13outputToCloud6StringS_+0x330>)
 8083b84:	f007 fdf7 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083b88:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083b8a:	a808      	add	r0, sp, #32
 8083b8c:	f007 fda2 	bl	808b6d4 <_ZN6String6concatERKS_>
 8083b90:	a818      	add	r0, sp, #96	; 0x60
 8083b92:	f007 fc77 	bl	808b484 <_ZN6StringD1Ev>
 8083b96:	a814      	add	r0, sp, #80	; 0x50
 8083b98:	f007 fc74 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083b9c:	a810      	add	r0, sp, #64	; 0x40
 8083b9e:	f007 fc71 	bl	808b484 <_ZN6StringD1Ev>
 8083ba2:	a80c      	add	r0, sp, #48	; 0x30
 8083ba4:	f007 fc6e 	bl	808b484 <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083ba8:	f006 fffa 	bl	808aba0 <spark_cloud_flag_connected>
 8083bac:	4c52      	ldr	r4, [pc, #328]	; (8083cf8 <_Z13outputToCloud6StringS_+0x334>)
 8083bae:	4b53      	ldr	r3, [pc, #332]	; (8083cfc <_Z13outputToCloud6StringS_+0x338>)
        if(Particle.connected() && serial_cellular_enabled){
 8083bb0:	2800      	cmp	r0, #0
 8083bb2:	d060      	beq.n	8083c76 <_Z13outputToCloud6StringS_+0x2b2>
 8083bb4:	681b      	ldr	r3, [r3, #0]
 8083bb6:	2b00      	cmp	r3, #0
 8083bb8:	d061      	beq.n	8083c7e <_Z13outputToCloud6StringS_+0x2ba>
            status_word.status_int |= 0x0002;
 8083bba:	4a51      	ldr	r2, [pc, #324]	; (8083d00 <_Z13outputToCloud6StringS_+0x33c>)
 8083bbc:	4d51      	ldr	r5, [pc, #324]	; (8083d04 <_Z13outputToCloud6StringS_+0x340>)
 8083bbe:	8813      	ldrh	r3, [r2, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8083bc0:	4951      	ldr	r1, [pc, #324]	; (8083d08 <_Z13outputToCloud6StringS_+0x344>)
 8083bc2:	f043 0302 	orr.w	r3, r3, #2
 8083bc6:	8013      	strh	r3, [r2, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8083bc8:	782b      	ldrb	r3, [r5, #0]
 8083bca:	a818      	add	r0, sp, #96	; 0x60
 8083bcc:	f88d 3000 	strb.w	r3, [sp]
 8083bd0:	683a      	ldr	r2, [r7, #0]
 8083bd2:	233c      	movs	r3, #60	; 0x3c
 8083bd4:	f008 fd50 	bl	808c678 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8083bd8:	a819      	add	r0, sp, #100	; 0x64
 8083bda:	f7ff fedd 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8083bde:	f006 fd5f 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8083be2:	4f4a      	ldr	r7, [pc, #296]	; (8083d0c <_Z13outputToCloud6StringS_+0x348>)
 8083be4:	6038      	str	r0, [r7, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 8083be6:	f006 ffcb 	bl	808ab80 <spark_process>
            if(debugging_enabled){
 8083bea:	6823      	ldr	r3, [r4, #0]
 8083bec:	b173      	cbz	r3, 8083c0c <_Z13outputToCloud6StringS_+0x248>
              Serial.println("Published pamup data!");
 8083bee:	f008 ff73 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083bf2:	4947      	ldr	r1, [pc, #284]	; (8083d10 <_Z13outputToCloud6StringS_+0x34c>)
 8083bf4:	f007 feb5 	bl	808b962 <_ZN5Print7printlnEPKc>
              writeLogFile("Published pamup data!");
 8083bf8:	4945      	ldr	r1, [pc, #276]	; (8083d10 <_Z13outputToCloud6StringS_+0x34c>)
 8083bfa:	a818      	add	r0, sp, #96	; 0x60
 8083bfc:	f007 fc8c 	bl	808b518 <_ZN6StringC1EPKc>
 8083c00:	a818      	add	r0, sp, #96	; 0x60
 8083c02:	f7fe f895 	bl	8081d30 <_Z12writeLogFile6String>
 8083c06:	a818      	add	r0, sp, #96	; 0x60
 8083c08:	f007 fc3c 	bl	808b484 <_ZN6StringD1Ev>
            if(sensible_iot_en){
 8083c0c:	4b41      	ldr	r3, [pc, #260]	; (8083d14 <_Z13outputToCloud6StringS_+0x350>)
 8083c0e:	681b      	ldr	r3, [r3, #0]
 8083c10:	b30b      	cbz	r3, 8083c56 <_Z13outputToCloud6StringS_+0x292>
 8083c12:	782b      	ldrb	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8083c14:	6832      	ldr	r2, [r6, #0]
 8083c16:	4940      	ldr	r1, [pc, #256]	; (8083d18 <_Z13outputToCloud6StringS_+0x354>)
 8083c18:	f88d 3000 	strb.w	r3, [sp]
 8083c1c:	a818      	add	r0, sp, #96	; 0x60
 8083c1e:	233c      	movs	r3, #60	; 0x3c
 8083c20:	f008 fd2a 	bl	808c678 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8083c24:	a819      	add	r0, sp, #100	; 0x64
 8083c26:	f7ff feb7 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return HAL_Timer_Get_Milli_Seconds();
 8083c2a:	f006 fd39 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 8083c2e:	6038      	str	r0, [r7, #0]
    		spark_process();
 8083c30:	f006 ffa6 	bl	808ab80 <spark_process>
                if(debugging_enabled){
 8083c34:	6823      	ldr	r3, [r4, #0]
 8083c36:	b173      	cbz	r3, 8083c56 <_Z13outputToCloud6StringS_+0x292>
                    Serial.println("Published sensible data!");
 8083c38:	f008 ff4e 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083c3c:	4937      	ldr	r1, [pc, #220]	; (8083d1c <_Z13outputToCloud6StringS_+0x358>)
 8083c3e:	f007 fe90 	bl	808b962 <_ZN5Print7printlnEPKc>
                    writeLogFile("Published sensible data!");
 8083c42:	4936      	ldr	r1, [pc, #216]	; (8083d1c <_Z13outputToCloud6StringS_+0x358>)
                    writeLogFile("Couldn't connect to particle.");
 8083c44:	a818      	add	r0, sp, #96	; 0x60
 8083c46:	f007 fc67 	bl	808b518 <_ZN6StringC1EPKc>
 8083c4a:	a818      	add	r0, sp, #96	; 0x60
 8083c4c:	f7fe f870 	bl	8081d30 <_Z12writeLogFile6String>
 8083c50:	a818      	add	r0, sp, #96	; 0x60
 8083c52:	f007 fc17 	bl	808b484 <_ZN6StringD1Ev>
        CO_sum = 0;
 8083c56:	2300      	movs	r3, #0
 8083c58:	4a31      	ldr	r2, [pc, #196]	; (8083d20 <_Z13outputToCloud6StringS_+0x35c>)
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8083c5a:	a808      	add	r0, sp, #32
        CO_sum = 0;
 8083c5c:	6013      	str	r3, [r2, #0]
        CO2_sum = 0;
 8083c5e:	4a0f      	ldr	r2, [pc, #60]	; (8083c9c <_Z13outputToCloud6StringS_+0x2d8>)
 8083c60:	6013      	str	r3, [r2, #0]
        O3_sum = 0;
 8083c62:	4a30      	ldr	r2, [pc, #192]	; (8083d24 <_Z13outputToCloud6StringS_+0x360>)
 8083c64:	6013      	str	r3, [r2, #0]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8083c66:	f007 fc0d 	bl	808b484 <_ZN6StringD1Ev>
    String webhook_data = " ";
 8083c6a:	a804      	add	r0, sp, #16
 8083c6c:	f007 fc0a 	bl	808b484 <_ZN6StringD1Ev>
}
 8083c70:	b01d      	add	sp, #116	; 0x74
 8083c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(serial_cellular_enabled == 0){
 8083c76:	681b      	ldr	r3, [r3, #0]
 8083c78:	6821      	ldr	r1, [r4, #0]
 8083c7a:	2b00      	cmp	r3, #0
 8083c7c:	d15a      	bne.n	8083d34 <_Z13outputToCloud6StringS_+0x370>
                if(debugging_enabled){
 8083c7e:	6823      	ldr	r3, [r4, #0]
 8083c80:	2b00      	cmp	r3, #0
 8083c82:	d0e8      	beq.n	8083c56 <_Z13outputToCloud6StringS_+0x292>
                    Serial.println("Cellular is disabled.");
 8083c84:	f008 ff28 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083c88:	4927      	ldr	r1, [pc, #156]	; (8083d28 <_Z13outputToCloud6StringS_+0x364>)
 8083c8a:	f007 fe6a 	bl	808b962 <_ZN5Print7printlnEPKc>
                    writeLogFile("Cellular is disabled.");
 8083c8e:	4926      	ldr	r1, [pc, #152]	; (8083d28 <_Z13outputToCloud6StringS_+0x364>)
 8083c90:	e7d8      	b.n	8083c44 <_Z13outputToCloud6StringS_+0x280>
 8083c92:	bf00      	nop
 8083c94:	08092634 	.word	0x08092634
 8083c98:	200002d8 	.word	0x200002d8
 8083c9c:	200002d0 	.word	0x200002d0
 8083ca0:	200002c4 	.word	0x200002c4
 8083ca4:	200002ec 	.word	0x200002ec
 8083ca8:	20000790 	.word	0x20000790
 8083cac:	20000080 	.word	0x20000080
 8083cb0:	080916f7 	.word	0x080916f7
 8083cb4:	408f4000 	.word	0x408f4000
 8083cb8:	080916fe 	.word	0x080916fe
 8083cbc:	08091705 	.word	0x08091705
 8083cc0:	0809170d 	.word	0x0809170d
 8083cc4:	200002f4 	.word	0x200002f4
 8083cc8:	08091715 	.word	0x08091715
 8083ccc:	20000624 	.word	0x20000624
 8083cd0:	0809171e 	.word	0x0809171e
 8083cd4:	200002f8 	.word	0x200002f8
 8083cd8:	08091727 	.word	0x08091727
 8083cdc:	0809172f 	.word	0x0809172f
 8083ce0:	40590000 	.word	0x40590000
 8083ce4:	08091738 	.word	0x08091738
 8083ce8:	0809173f 	.word	0x0809173f
 8083cec:	20000c78 	.word	0x20000c78
 8083cf0:	08091746 	.word	0x08091746
 8083cf4:	08090865 	.word	0x08090865
 8083cf8:	20000628 	.word	0x20000628
 8083cfc:	20000c74 	.word	0x20000c74
 8083d00:	20000c90 	.word	0x20000c90
 8083d04:	20000540 	.word	0x20000540
 8083d08:	0809174c 	.word	0x0809174c
 8083d0c:	2000130c 	.word	0x2000130c
 8083d10:	08091752 	.word	0x08091752
 8083d14:	20000c70 	.word	0x20000c70
 8083d18:	08091768 	.word	0x08091768
 8083d1c:	08091776 	.word	0x08091776
 8083d20:	200002e4 	.word	0x200002e4
 8083d24:	200002f0 	.word	0x200002f0
 8083d28:	0809178f 	.word	0x0809178f
 8083d2c:	2000078c 	.word	0x2000078c
 8083d30:	20000584 	.word	0x20000584
                status_word.status_int &= 0xFFFD;   //clear the connected bit
 8083d34:	4a06      	ldr	r2, [pc, #24]	; (8083d50 <_Z13outputToCloud6StringS_+0x38c>)
 8083d36:	8813      	ldrh	r3, [r2, #0]
 8083d38:	f023 0302 	bic.w	r3, r3, #2
 8083d3c:	8013      	strh	r3, [r2, #0]
                if(debugging_enabled){
 8083d3e:	2900      	cmp	r1, #0
 8083d40:	d089      	beq.n	8083c56 <_Z13outputToCloud6StringS_+0x292>
                    Serial.println("Couldn't connect to particle.");
 8083d42:	f008 fec9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8083d46:	4903      	ldr	r1, [pc, #12]	; (8083d54 <_Z13outputToCloud6StringS_+0x390>)
 8083d48:	f007 fe0b 	bl	808b962 <_ZN5Print7printlnEPKc>
                    writeLogFile("Couldn't connect to particle.");
 8083d4c:	4901      	ldr	r1, [pc, #4]	; (8083d54 <_Z13outputToCloud6StringS_+0x390>)
 8083d4e:	e779      	b.n	8083c44 <_Z13outputToCloud6StringS_+0x280>
 8083d50:	20000c90 	.word	0x20000c90
 8083d54:	080917a5 	.word	0x080917a5

08083d58 <_Z15outputDataToESPv>:
void outputDataToESP(void){
 8083d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8083d5c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
    time_t time = Time.now();
 8083d60:	f008 f967 	bl	808c032 <_ZN9TimeClass3nowEv>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8083d64:	4bbc      	ldr	r3, [pc, #752]	; (8084058 <_Z15outputDataToESPv+0x300>)
    time_t time = Time.now();
 8083d66:	4606      	mov	r6, r0
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8083d68:	681a      	ldr	r2, [r3, #0]
 8083d6a:	4bbc      	ldr	r3, [pc, #752]	; (808405c <_Z15outputDataToESPv+0x304>)
    String cloud_output_string = "";    //create a clean string
 8083d6c:	49bc      	ldr	r1, [pc, #752]	; (8084060 <_Z15outputDataToESPv+0x308>)
    time_t time = Time.now();
 8083d6e:	17c7      	asrs	r7, r0, #31
    String cloud_output_string = "";    //create a clean string
 8083d70:	a802      	add	r0, sp, #8
 8083d72:	601a      	str	r2, [r3, #0]
 8083d74:	f007 fbd0 	bl	808b518 <_ZN6StringC1EPKc>
    String csv_output_string = "";
 8083d78:	49b9      	ldr	r1, [pc, #740]	; (8084060 <_Z15outputDataToESPv+0x308>)
 8083d7a:	a806      	add	r0, sp, #24
 8083d7c:	f007 fbcc 	bl	808b518 <_ZN6StringC1EPKc>
    String sensible_string = "";
 8083d80:	49b7      	ldr	r1, [pc, #732]	; (8084060 <_Z15outputDataToESPv+0x308>)
 8083d82:	a80a      	add	r0, sp, #40	; 0x28
 8083d84:	f007 fbc8 	bl	808b518 <_ZN6StringC1EPKc>
    String latitude_string = "";
 8083d88:	49b5      	ldr	r1, [pc, #724]	; (8084060 <_Z15outputDataToESPv+0x308>)
 8083d8a:	a80e      	add	r0, sp, #56	; 0x38
 8083d8c:	f007 fbc4 	bl	808b518 <_ZN6StringC1EPKc>
    String longitude_string = "";
 8083d90:	49b3      	ldr	r1, [pc, #716]	; (8084060 <_Z15outputDataToESPv+0x308>)
 8083d92:	a812      	add	r0, sp, #72	; 0x48
 8083d94:	f007 fbc0 	bl	808b518 <_ZN6StringC1EPKc>
	String & operator += (char c)			{concat(c); return (*this);}
 8083d98:	215e      	movs	r1, #94	; 0x5e
 8083d9a:	a802      	add	r0, sp, #8
	StringSumHelper(const String &s) : String(s) {}
 8083d9c:	ac64      	add	r4, sp, #400	; 0x190
	String & operator += (char c)			{concat(c); return (*this);}
 8083d9e:	f007 fcac 	bl	808b6fa <_ZN6String6concatEc>
    cloud_output_string += String(1) + ";";           //header
 8083da2:	220a      	movs	r2, #10
 8083da4:	2101      	movs	r1, #1
 8083da6:	a827      	add	r0, sp, #156	; 0x9c
 8083da8:	f007 fc2a 	bl	808b600 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083dac:	4620      	mov	r0, r4
 8083dae:	a927      	add	r1, sp, #156	; 0x9c
 8083db0:	f007 fbf1 	bl	808b596 <_ZN6StringC1ERKS_>
 8083db4:	4620      	mov	r0, r4
 8083db6:	49ab      	ldr	r1, [pc, #684]	; (8084064 <_Z15outputDataToESPv+0x30c>)
 8083db8:	f007 fcdd 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083dbc:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083dbe:	a802      	add	r0, sp, #8
 8083dc0:	f007 fc88 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083dc4:	4620      	mov	r0, r4
 8083dc6:	f007 fb5d 	bl	808b484 <_ZN6StringD1Ev>
 8083dca:	a827      	add	r0, sp, #156	; 0x9c
 8083dcc:	f007 fb5a 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(DEVICE_ID_PACKET_CONSTANT) + String(DEVICE_id);   //device id
 8083dd0:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 80840c4 <_Z15outputDataToESPv+0x36c>
 8083dd4:	215a      	movs	r1, #90	; 0x5a
 8083dd6:	a822      	add	r0, sp, #136	; 0x88
 8083dd8:	f007 fc01 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083ddc:	4620      	mov	r0, r4
 8083dde:	a922      	add	r1, sp, #136	; 0x88
 8083de0:	f007 fbd9 	bl	808b596 <_ZN6StringC1ERKS_>
 8083de4:	220a      	movs	r2, #10
 8083de6:	f8d8 1000 	ldr.w	r1, [r8]
 8083dea:	a827      	add	r0, sp, #156	; 0x9c
 8083dec:	f007 fc08 	bl	808b600 <_ZN6StringC1Eih>
 8083df0:	4620      	mov	r0, r4
 8083df2:	a927      	add	r1, sp, #156	; 0x9c
 8083df4:	f007 fcb3 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8083df8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083dfa:	a802      	add	r0, sp, #8
 8083dfc:	f007 fc6a 	bl	808b6d4 <_ZN6String6concatERKS_>
 8083e00:	a827      	add	r0, sp, #156	; 0x9c
 8083e02:	f007 fb3f 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083e06:	4620      	mov	r0, r4
 8083e08:	f007 fb3c 	bl	808b484 <_ZN6StringD1Ev>
 8083e0c:	a822      	add	r0, sp, #136	; 0x88
 8083e0e:	f007 fb39 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(DEVICE_id) + ",";
 8083e12:	220a      	movs	r2, #10
 8083e14:	f8d8 1000 	ldr.w	r1, [r8]
 8083e18:	a827      	add	r0, sp, #156	; 0x9c
 8083e1a:	f007 fbf1 	bl	808b600 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083e1e:	4620      	mov	r0, r4
 8083e20:	a927      	add	r1, sp, #156	; 0x9c
 8083e22:	f007 fbb8 	bl	808b596 <_ZN6StringC1ERKS_>
 8083e26:	4620      	mov	r0, r4
 8083e28:	498f      	ldr	r1, [pc, #572]	; (8084068 <_Z15outputDataToESPv+0x310>)
 8083e2a:	f007 fca4 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8083e2e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083e30:	a806      	add	r0, sp, #24
 8083e32:	f007 fc4f 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083e36:	4620      	mov	r0, r4
 8083e38:	f007 fb24 	bl	808b484 <_ZN6StringD1Ev>
 8083e3c:	a827      	add	r0, sp, #156	; 0x9c
 8083e3e:	f007 fb21 	bl	808b484 <_ZN6StringD1Ev>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 8083e42:	4b8a      	ldr	r3, [pc, #552]	; (808406c <_Z15outputDataToESPv+0x314>)
        state_(BEGIN) {
 8083e44:	2500      	movs	r5, #0
        n_(0) {
 8083e46:	9322      	str	r3, [sp, #136]	; 0x88
 8083e48:	23ff      	movs	r3, #255	; 0xff
    writer.beginObject();
 8083e4a:	a822      	add	r0, sp, #136	; 0x88
 8083e4c:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
        state_(BEGIN) {
 8083e50:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
        n_(0) {
 8083e54:	9424      	str	r4, [sp, #144]	; 0x90
 8083e56:	f009 f92a 	bl	808d0ae <_ZN5spark10JSONWriter11beginObjectEv>
	StringSumHelper(const char *p) : String(p) {}
 8083e5a:	4985      	ldr	r1, [pc, #532]	; (8084070 <_Z15outputDataToESPv+0x318>)
 8083e5c:	a827      	add	r0, sp, #156	; 0x9c
 8083e5e:	f007 fb5b 	bl	808b518 <_ZN6StringC1EPKc>
    String device_string = "PAM-" + String(DEVICE_id);
 8083e62:	220a      	movs	r2, #10
 8083e64:	f8d8 1000 	ldr.w	r1, [r8]
 8083e68:	a81e      	add	r0, sp, #120	; 0x78
 8083e6a:	f007 fbc9 	bl	808b600 <_ZN6StringC1Eih>
 8083e6e:	a91e      	add	r1, sp, #120	; 0x78
 8083e70:	a827      	add	r0, sp, #156	; 0x9c
 8083e72:	f007 fc74 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8083e76:	4601      	mov	r1, r0
 8083e78:	a816      	add	r0, sp, #88	; 0x58
 8083e7a:	f007 fb8c 	bl	808b596 <_ZN6StringC1ERKS_>
 8083e7e:	a81e      	add	r0, sp, #120	; 0x78
 8083e80:	f007 fb00 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083e84:	a827      	add	r0, sp, #156	; 0x9c
 8083e86:	f007 fafd 	bl	808b484 <_ZN6StringD1Ev>
    writer.name("instrumentKey").value(device_string);
 8083e8a:	497a      	ldr	r1, [pc, #488]	; (8084074 <_Z15outputDataToESPv+0x31c>)
 8083e8c:	a822      	add	r0, sp, #136	; 0x88
 8083e8e:	f7fc ffac 	bl	8080dea <_ZN5spark10JSONWriter4nameEPKc>
 8083e92:	a916      	add	r1, sp, #88	; 0x58
 8083e94:	f7fc ffb6 	bl	8080e04 <_ZN5spark10JSONWriter5valueERK6String>
    writer.name("datetime").value(String(Time.format(time, "%Y-%m-%dT%H:%M:%SZ")));
 8083e98:	4977      	ldr	r1, [pc, #476]	; (8084078 <_Z15outputDataToESPv+0x320>)
 8083e9a:	a822      	add	r0, sp, #136	; 0x88
 8083e9c:	f7fc ffa5 	bl	8080dea <_ZN5spark10JSONWriter4nameEPKc>
 8083ea0:	4604      	mov	r4, r0
 8083ea2:	4b76      	ldr	r3, [pc, #472]	; (808407c <_Z15outputDataToESPv+0x324>)
 8083ea4:	4632      	mov	r2, r6
 8083ea6:	4976      	ldr	r1, [pc, #472]	; (8084080 <_Z15outputDataToESPv+0x328>)
 8083ea8:	9300      	str	r3, [sp, #0]
 8083eaa:	a827      	add	r0, sp, #156	; 0x9c
 8083eac:	463b      	mov	r3, r7
 8083eae:	f008 f861 	bl	808bf74 <_ZN9TimeClass6formatExPKc>
 8083eb2:	a927      	add	r1, sp, #156	; 0x9c
 8083eb4:	4620      	mov	r0, r4
 8083eb6:	f7fc ffa5 	bl	8080e04 <_ZN5spark10JSONWriter5valueERK6String>
 8083eba:	a827      	add	r0, sp, #156	; 0x9c
 8083ebc:	f007 fae2 	bl	808b484 <_ZN6StringD1Ev>
    writer.name("CO2").value(String(CO2_float, 0));
 8083ec0:	4970      	ldr	r1, [pc, #448]	; (8084084 <_Z15outputDataToESPv+0x32c>)
 8083ec2:	a822      	add	r0, sp, #136	; 0x88
 8083ec4:	f7fc ff91 	bl	8080dea <_ZN5spark10JSONWriter4nameEPKc>
 8083ec8:	4604      	mov	r4, r0
 8083eca:	4b6f      	ldr	r3, [pc, #444]	; (8084088 <_Z15outputDataToESPv+0x330>)
 8083ecc:	462a      	mov	r2, r5
 8083ece:	6819      	ldr	r1, [r3, #0]
 8083ed0:	a827      	add	r0, sp, #156	; 0x9c
 8083ed2:	f007 fbbb 	bl	808b64c <_ZN6StringC1Efi>
 8083ed6:	a927      	add	r1, sp, #156	; 0x9c
 8083ed8:	4620      	mov	r0, r4
 8083eda:	f7fc ff93 	bl	8080e04 <_ZN5spark10JSONWriter5valueERK6String>
 8083ede:	a827      	add	r0, sp, #156	; 0x9c
 8083ee0:	f007 fad0 	bl	808b484 <_ZN6StringD1Ev>
    writer.name("CO").value(String(CO_float, 3));
 8083ee4:	4969      	ldr	r1, [pc, #420]	; (808408c <_Z15outputDataToESPv+0x334>)
 8083ee6:	a822      	add	r0, sp, #136	; 0x88
 8083ee8:	f7fc ff7f 	bl	8080dea <_ZN5spark10JSONWriter4nameEPKc>
 8083eec:	4604      	mov	r4, r0
 8083eee:	4b68      	ldr	r3, [pc, #416]	; (8084090 <_Z15outputDataToESPv+0x338>)
 8083ef0:	2203      	movs	r2, #3
 8083ef2:	6819      	ldr	r1, [r3, #0]
 8083ef4:	a827      	add	r0, sp, #156	; 0x9c
 8083ef6:	f007 fba9 	bl	808b64c <_ZN6StringC1Efi>
 8083efa:	a927      	add	r1, sp, #156	; 0x9c
 8083efc:	4620      	mov	r0, r4
 8083efe:	f7fc ff81 	bl	8080e04 <_ZN5spark10JSONWriter5valueERK6String>
 8083f02:	a827      	add	r0, sp, #156	; 0x9c
 8083f04:	f007 fabe 	bl	808b484 <_ZN6StringD1Ev>
    writer.name("PM1_0").value(String(PM01Value));
 8083f08:	4962      	ldr	r1, [pc, #392]	; (8084094 <_Z15outputDataToESPv+0x33c>)
 8083f0a:	a822      	add	r0, sp, #136	; 0x88
 8083f0c:	f7fc ff6d 	bl	8080dea <_ZN5spark10JSONWriter4nameEPKc>
 8083f10:	4604      	mov	r4, r0
 8083f12:	4b61      	ldr	r3, [pc, #388]	; (8084098 <_Z15outputDataToESPv+0x340>)
 8083f14:	220a      	movs	r2, #10
 8083f16:	6819      	ldr	r1, [r3, #0]
 8083f18:	a827      	add	r0, sp, #156	; 0x9c
 8083f1a:	f007 fb71 	bl	808b600 <_ZN6StringC1Eih>
 8083f1e:	a927      	add	r1, sp, #156	; 0x9c
 8083f20:	4620      	mov	r0, r4
 8083f22:	f7fc ff6f 	bl	8080e04 <_ZN5spark10JSONWriter5valueERK6String>
 8083f26:	a827      	add	r0, sp, #156	; 0x9c
 8083f28:	f007 faac 	bl	808b484 <_ZN6StringD1Ev>
    writer.name("PM2_5").value(String(corrected_PM_25, 0)); 
 8083f2c:	495b      	ldr	r1, [pc, #364]	; (808409c <_Z15outputDataToESPv+0x344>)
 8083f2e:	a822      	add	r0, sp, #136	; 0x88
 8083f30:	f7fc ff5b 	bl	8080dea <_ZN5spark10JSONWriter4nameEPKc>
 8083f34:	4604      	mov	r4, r0
 8083f36:	4b5a      	ldr	r3, [pc, #360]	; (80840a0 <_Z15outputDataToESPv+0x348>)
 8083f38:	462a      	mov	r2, r5
 8083f3a:	6819      	ldr	r1, [r3, #0]
 8083f3c:	a827      	add	r0, sp, #156	; 0x9c
 8083f3e:	f007 fb85 	bl	808b64c <_ZN6StringC1Efi>
 8083f42:	a927      	add	r1, sp, #156	; 0x9c
 8083f44:	4620      	mov	r0, r4
 8083f46:	f7fc ff5d 	bl	8080e04 <_ZN5spark10JSONWriter5valueERK6String>
 8083f4a:	a827      	add	r0, sp, #156	; 0x9c
 8083f4c:	f007 fa9a 	bl	808b484 <_ZN6StringD1Ev>
    writer.name("Temp").value(String(readTemperature(), 1));
 8083f50:	4954      	ldr	r1, [pc, #336]	; (80840a4 <_Z15outputDataToESPv+0x34c>)
 8083f52:	a822      	add	r0, sp, #136	; 0x88
 8083f54:	f7fc ff49 	bl	8080dea <_ZN5spark10JSONWriter4nameEPKc>
 8083f58:	4604      	mov	r4, r0
 8083f5a:	f7fd fb7d 	bl	8081658 <_Z15readTemperaturev>
 8083f5e:	2201      	movs	r2, #1
 8083f60:	4601      	mov	r1, r0
 8083f62:	a827      	add	r0, sp, #156	; 0x9c
 8083f64:	f007 fb72 	bl	808b64c <_ZN6StringC1Efi>
 8083f68:	a927      	add	r1, sp, #156	; 0x9c
 8083f6a:	4620      	mov	r0, r4
 8083f6c:	f7fc ff4a 	bl	8080e04 <_ZN5spark10JSONWriter5valueERK6String>
 8083f70:	a827      	add	r0, sp, #156	; 0x9c
 8083f72:	f007 fa87 	bl	808b484 <_ZN6StringD1Ev>
    writer.name("Press").value(String(bme.pressure / 100.0, 1));
 8083f76:	494c      	ldr	r1, [pc, #304]	; (80840a8 <_Z15outputDataToESPv+0x350>)
 8083f78:	a822      	add	r0, sp, #136	; 0x88
 8083f7a:	f7fc ff36 	bl	8080dea <_ZN5spark10JSONWriter4nameEPKc>
 8083f7e:	4b4b      	ldr	r3, [pc, #300]	; (80840ac <_Z15outputDataToESPv+0x354>)
 8083f80:	4604      	mov	r4, r0
 8083f82:	6858      	ldr	r0, [r3, #4]
 8083f84:	f009 fbc8 	bl	808d718 <__aeabi_f2d>
 8083f88:	2200      	movs	r2, #0
 8083f8a:	4b49      	ldr	r3, [pc, #292]	; (80840b0 <_Z15outputDataToESPv+0x358>)
 8083f8c:	f009 fd46 	bl	808da1c <__aeabi_ddiv>
 8083f90:	2501      	movs	r5, #1
 8083f92:	460b      	mov	r3, r1
 8083f94:	4602      	mov	r2, r0
 8083f96:	9500      	str	r5, [sp, #0]
 8083f98:	a827      	add	r0, sp, #156	; 0x9c
 8083f9a:	f007 fb6e 	bl	808b67a <_ZN6StringC1Edi>
 8083f9e:	a927      	add	r1, sp, #156	; 0x9c
 8083fa0:	4620      	mov	r0, r4
 8083fa2:	f7fc ff2f 	bl	8080e04 <_ZN5spark10JSONWriter5valueERK6String>
 8083fa6:	a827      	add	r0, sp, #156	; 0x9c
 8083fa8:	f007 fa6c 	bl	808b484 <_ZN6StringD1Ev>
    writer.name("Hmdty").value(String(readHumidity(), 1));
 8083fac:	4941      	ldr	r1, [pc, #260]	; (80840b4 <_Z15outputDataToESPv+0x35c>)
 8083fae:	a822      	add	r0, sp, #136	; 0x88
 8083fb0:	f7fc ff1b 	bl	8080dea <_ZN5spark10JSONWriter4nameEPKc>
 8083fb4:	4604      	mov	r4, r0
 8083fb6:	f7fd fbc9 	bl	808174c <_Z12readHumidityv>
 8083fba:	462a      	mov	r2, r5
 8083fbc:	4601      	mov	r1, r0
 8083fbe:	a827      	add	r0, sp, #156	; 0x9c
 8083fc0:	f007 fb44 	bl	808b64c <_ZN6StringC1Efi>
 8083fc4:	a927      	add	r1, sp, #156	; 0x9c
 8083fc6:	4620      	mov	r0, r4
 8083fc8:	f7fc ff1c 	bl	8080e04 <_ZN5spark10JSONWriter5valueERK6String>
 8083fcc:	a827      	add	r0, sp, #156	; 0x9c
 8083fce:	f007 fa59 	bl	808b484 <_ZN6StringD1Ev>
    if(gps.get_latitude() != 0){
 8083fd2:	4839      	ldr	r0, [pc, #228]	; (80840b8 <_Z15outputDataToESPv+0x360>)
 8083fd4:	f003 fa7c 	bl	80874d0 <_ZN3GPS12get_latitudeEv>
 8083fd8:	2200      	movs	r2, #0
 8083fda:	2300      	movs	r3, #0
 8083fdc:	f009 fe5c 	bl	808dc98 <__aeabi_dcmpeq>
 8083fe0:	2800      	cmp	r0, #0
 8083fe2:	f040 855c 	bne.w	8084a9e <_Z15outputDataToESPv+0xd46>
        if(gps.get_nsIndicator() == 0){
 8083fe6:	4834      	ldr	r0, [pc, #208]	; (80840b8 <_Z15outputDataToESPv+0x360>)
 8083fe8:	f003 fa8d 	bl	8087506 <_ZN3GPS15get_nsIndicatorEv>
 8083fec:	b918      	cbnz	r0, 8083ff6 <_Z15outputDataToESPv+0x29e>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8083fee:	4933      	ldr	r1, [pc, #204]	; (80840bc <_Z15outputDataToESPv+0x364>)
 8083ff0:	a80e      	add	r0, sp, #56	; 0x38
 8083ff2:	f007 fb73 	bl	808b6dc <_ZN6String6concatEPKc>
        latitude_string += String(gps.get_latitude());
 8083ff6:	4830      	ldr	r0, [pc, #192]	; (80840b8 <_Z15outputDataToESPv+0x360>)
 8083ff8:	f003 fa6a 	bl	80874d0 <_ZN3GPS12get_latitudeEv>
 8083ffc:	460b      	mov	r3, r1
 8083ffe:	2106      	movs	r1, #6
 8084000:	4602      	mov	r2, r0
 8084002:	9100      	str	r1, [sp, #0]
 8084004:	a827      	add	r0, sp, #156	; 0x9c
 8084006:	f007 fb38 	bl	808b67a <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808400a:	a927      	add	r1, sp, #156	; 0x9c
 808400c:	a80e      	add	r0, sp, #56	; 0x38
 808400e:	f007 fb61 	bl	808b6d4 <_ZN6String6concatERKS_>
 8084012:	a827      	add	r0, sp, #156	; 0x9c
 8084014:	f007 fa36 	bl	808b484 <_ZN6StringD1Ev>
    writer.name("Lat").value(latitude_string);
 8084018:	4929      	ldr	r1, [pc, #164]	; (80840c0 <_Z15outputDataToESPv+0x368>)
 808401a:	a822      	add	r0, sp, #136	; 0x88
 808401c:	f7fc fee5 	bl	8080dea <_ZN5spark10JSONWriter4nameEPKc>
 8084020:	a90e      	add	r1, sp, #56	; 0x38
 8084022:	f7fc feef 	bl	8080e04 <_ZN5spark10JSONWriter5valueERK6String>
    if(gps.get_longitude() != 0){
 8084026:	4824      	ldr	r0, [pc, #144]	; (80840b8 <_Z15outputDataToESPv+0x360>)
 8084028:	f003 fa57 	bl	80874da <_ZN3GPS13get_longitudeEv>
 808402c:	2200      	movs	r2, #0
 808402e:	2300      	movs	r3, #0
 8084030:	f009 fe32 	bl	808dc98 <__aeabi_dcmpeq>
 8084034:	2800      	cmp	r0, #0
 8084036:	d152      	bne.n	80840de <_Z15outputDataToESPv+0x386>
        if(gps.get_ewIndicator() == 0x01){
 8084038:	481f      	ldr	r0, [pc, #124]	; (80840b8 <_Z15outputDataToESPv+0x360>)
 808403a:	f003 fa67 	bl	808750c <_ZN3GPS15get_ewIndicatorEv>
 808403e:	2801      	cmp	r0, #1
 8084040:	d103      	bne.n	808404a <_Z15outputDataToESPv+0x2f2>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084042:	491e      	ldr	r1, [pc, #120]	; (80840bc <_Z15outputDataToESPv+0x364>)
 8084044:	a812      	add	r0, sp, #72	; 0x48
 8084046:	f007 fb49 	bl	808b6dc <_ZN6String6concatEPKc>
        longitude_string += String(gps.get_longitude());
 808404a:	481b      	ldr	r0, [pc, #108]	; (80840b8 <_Z15outputDataToESPv+0x360>)
 808404c:	f003 fa45 	bl	80874da <_ZN3GPS13get_longitudeEv>
 8084050:	460b      	mov	r3, r1
 8084052:	2106      	movs	r1, #6
 8084054:	4602      	mov	r2, r0
 8084056:	e037      	b.n	80840c8 <_Z15outputDataToESPv+0x370>
 8084058:	200000e4 	.word	0x200000e4
 808405c:	20000e24 	.word	0x20000e24
 8084060:	08092ce2 	.word	0x08092ce2
 8084064:	080917c3 	.word	0x080917c3
 8084068:	08092a26 	.word	0x08092a26
 808406c:	08092e90 	.word	0x08092e90
 8084070:	080917c5 	.word	0x080917c5
 8084074:	080917ca 	.word	0x080917ca
 8084078:	080917d8 	.word	0x080917d8
 808407c:	080917e1 	.word	0x080917e1
 8084080:	20000e20 	.word	0x20000e20
 8084084:	0809297c 	.word	0x0809297c
 8084088:	200002c4 	.word	0x200002c4
 808408c:	08091cc2 	.word	0x08091cc2
 8084090:	200002d8 	.word	0x200002d8
 8084094:	080917f4 	.word	0x080917f4
 8084098:	200002f4 	.word	0x200002f4
 808409c:	080917fa 	.word	0x080917fa
 80840a0:	20000624 	.word	0x20000624
 80840a4:	08091800 	.word	0x08091800
 80840a8:	08091805 	.word	0x08091805
 80840ac:	20000584 	.word	0x20000584
 80840b0:	40590000 	.word	0x40590000
 80840b4:	0809180b 	.word	0x0809180b
 80840b8:	200006b8 	.word	0x200006b8
 80840bc:	080917c8 	.word	0x080917c8
 80840c0:	08091811 	.word	0x08091811
 80840c4:	20000080 	.word	0x20000080
 80840c8:	9100      	str	r1, [sp, #0]
 80840ca:	a827      	add	r0, sp, #156	; 0x9c
 80840cc:	f007 fad5 	bl	808b67a <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80840d0:	a927      	add	r1, sp, #156	; 0x9c
 80840d2:	a812      	add	r0, sp, #72	; 0x48
 80840d4:	f007 fafe 	bl	808b6d4 <_ZN6String6concatERKS_>
 80840d8:	a827      	add	r0, sp, #156	; 0x9c
 80840da:	f007 f9d3 	bl	808b484 <_ZN6StringD1Ev>
    writer.name("Long").value(longitude_string);
 80840de:	49b7      	ldr	r1, [pc, #732]	; (80843bc <_Z15outputDataToESPv+0x664>)
 80840e0:	a822      	add	r0, sp, #136	; 0x88
 80840e2:	f7fc fe82 	bl	8080dea <_ZN5spark10JSONWriter4nameEPKc>
 80840e6:	a912      	add	r1, sp, #72	; 0x48
 80840e8:	f7fc fe8c 	bl	8080e04 <_ZN5spark10JSONWriter5valueERK6String>
    writer.endObject();
 80840ec:	a822      	add	r0, sp, #136	; 0x88
 80840ee:	f008 ffc8 	bl	808d082 <_ZN5spark10JSONWriter9endObjectEv>
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 80840f2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
 80840f6:	4293      	cmp	r3, r2
 80840f8:	bf28      	it	cs
 80840fa:	4613      	movcs	r3, r2
 80840fc:	2400      	movs	r4, #0
 80840fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8084100:	4daf      	ldr	r5, [pc, #700]	; (80843c0 <_Z15outputDataToESPv+0x668>)
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 8084102:	54d4      	strb	r4, [r2, r3]
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8084104:	214d      	movs	r1, #77	; 0x4d
 8084106:	a81a      	add	r0, sp, #104	; 0x68
 8084108:	f007 fa69 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 808410c:	a91a      	add	r1, sp, #104	; 0x68
 808410e:	a827      	add	r0, sp, #156	; 0x9c
 8084110:	f007 fa41 	bl	808b596 <_ZN6StringC1ERKS_>
 8084114:	2203      	movs	r2, #3
 8084116:	6829      	ldr	r1, [r5, #0]
 8084118:	a81e      	add	r0, sp, #120	; 0x78
 808411a:	f007 fa97 	bl	808b64c <_ZN6StringC1Efi>
 808411e:	a91e      	add	r1, sp, #120	; 0x78
 8084120:	a827      	add	r0, sp, #156	; 0x9c
 8084122:	f007 fb1c 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8084126:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084128:	a802      	add	r0, sp, #8
 808412a:	f007 fad3 	bl	808b6d4 <_ZN6String6concatERKS_>
 808412e:	a81e      	add	r0, sp, #120	; 0x78
 8084130:	f007 f9a8 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084134:	a827      	add	r0, sp, #156	; 0x9c
 8084136:	f007 f9a5 	bl	808b484 <_ZN6StringD1Ev>
 808413a:	a81a      	add	r0, sp, #104	; 0x68
 808413c:	f007 f9a2 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(CO_float, 3) + ",";
 8084140:	2203      	movs	r2, #3
 8084142:	6829      	ldr	r1, [r5, #0]
 8084144:	a81e      	add	r0, sp, #120	; 0x78
 8084146:	f007 fa81 	bl	808b64c <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 808414a:	a91e      	add	r1, sp, #120	; 0x78
 808414c:	a827      	add	r0, sp, #156	; 0x9c
 808414e:	f007 fa22 	bl	808b596 <_ZN6StringC1ERKS_>
 8084152:	499c      	ldr	r1, [pc, #624]	; (80843c4 <_Z15outputDataToESPv+0x66c>)
 8084154:	a827      	add	r0, sp, #156	; 0x9c
 8084156:	f007 fb0e 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 808415a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808415c:	a806      	add	r0, sp, #24
 808415e:	f007 fab9 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084162:	a827      	add	r0, sp, #156	; 0x9c
 8084164:	f007 f98e 	bl	808b484 <_ZN6StringD1Ev>
 8084168:	a81e      	add	r0, sp, #120	; 0x78
 808416a:	f007 f98b 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(CARBON_DIOXIDE_PACKET_CONSTANT) + String(CO2_float, 0);
 808416e:	4d96      	ldr	r5, [pc, #600]	; (80843c8 <_Z15outputDataToESPv+0x670>)
 8084170:	2143      	movs	r1, #67	; 0x43
 8084172:	a81a      	add	r0, sp, #104	; 0x68
 8084174:	f007 fa33 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084178:	a91a      	add	r1, sp, #104	; 0x68
 808417a:	a827      	add	r0, sp, #156	; 0x9c
 808417c:	f007 fa0b 	bl	808b596 <_ZN6StringC1ERKS_>
 8084180:	4622      	mov	r2, r4
 8084182:	6829      	ldr	r1, [r5, #0]
 8084184:	a81e      	add	r0, sp, #120	; 0x78
 8084186:	f007 fa61 	bl	808b64c <_ZN6StringC1Efi>
 808418a:	a91e      	add	r1, sp, #120	; 0x78
 808418c:	a827      	add	r0, sp, #156	; 0x9c
 808418e:	f007 fae6 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8084192:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084194:	a802      	add	r0, sp, #8
 8084196:	f007 fa9d 	bl	808b6d4 <_ZN6String6concatERKS_>
 808419a:	a81e      	add	r0, sp, #120	; 0x78
 808419c:	f007 f972 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80841a0:	a827      	add	r0, sp, #156	; 0x9c
 80841a2:	f007 f96f 	bl	808b484 <_ZN6StringD1Ev>
 80841a6:	a81a      	add	r0, sp, #104	; 0x68
 80841a8:	f007 f96c 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(CO2_float, 0) + ",";
 80841ac:	4622      	mov	r2, r4
 80841ae:	6829      	ldr	r1, [r5, #0]
 80841b0:	a81e      	add	r0, sp, #120	; 0x78
 80841b2:	f007 fa4b 	bl	808b64c <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 80841b6:	a91e      	add	r1, sp, #120	; 0x78
 80841b8:	a827      	add	r0, sp, #156	; 0x9c
 80841ba:	f007 f9ec 	bl	808b596 <_ZN6StringC1ERKS_>
 80841be:	4981      	ldr	r1, [pc, #516]	; (80843c4 <_Z15outputDataToESPv+0x66c>)
 80841c0:	a827      	add	r0, sp, #156	; 0x9c
 80841c2:	f007 fad8 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 80841c6:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80841c8:	a806      	add	r0, sp, #24
 80841ca:	f007 fa83 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80841ce:	a827      	add	r0, sp, #156	; 0x9c
 80841d0:	f007 f958 	bl	808b484 <_ZN6StringD1Ev>
 80841d4:	a81e      	add	r0, sp, #120	; 0x78
 80841d6:	f007 f955 	bl	808b484 <_ZN6StringD1Ev>
    if(voc_enabled){
 80841da:	4b7c      	ldr	r3, [pc, #496]	; (80843cc <_Z15outputDataToESPv+0x674>)
 80841dc:	681b      	ldr	r3, [r3, #0]
 80841de:	2b00      	cmp	r3, #0
 80841e0:	d035      	beq.n	808424e <_Z15outputDataToESPv+0x4f6>
        cloud_output_string += String(VOC_PACKET_CONSTANT) + String(air_quality_score, 1);
 80841e2:	2167      	movs	r1, #103	; 0x67
 80841e4:	4c7a      	ldr	r4, [pc, #488]	; (80843d0 <_Z15outputDataToESPv+0x678>)
 80841e6:	a81a      	add	r0, sp, #104	; 0x68
 80841e8:	f007 f9f9 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 80841ec:	a91a      	add	r1, sp, #104	; 0x68
 80841ee:	a827      	add	r0, sp, #156	; 0x9c
 80841f0:	f007 f9d1 	bl	808b596 <_ZN6StringC1ERKS_>
 80841f4:	2201      	movs	r2, #1
 80841f6:	6821      	ldr	r1, [r4, #0]
 80841f8:	a81e      	add	r0, sp, #120	; 0x78
 80841fa:	f007 fa27 	bl	808b64c <_ZN6StringC1Efi>
 80841fe:	a91e      	add	r1, sp, #120	; 0x78
 8084200:	a827      	add	r0, sp, #156	; 0x9c
 8084202:	f007 faac 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8084206:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084208:	a802      	add	r0, sp, #8
 808420a:	f007 fa63 	bl	808b6d4 <_ZN6String6concatERKS_>
 808420e:	a81e      	add	r0, sp, #120	; 0x78
 8084210:	f007 f938 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084214:	a827      	add	r0, sp, #156	; 0x9c
 8084216:	f007 f935 	bl	808b484 <_ZN6StringD1Ev>
 808421a:	a81a      	add	r0, sp, #104	; 0x68
 808421c:	f007 f932 	bl	808b484 <_ZN6StringD1Ev>
        csv_output_string += String(air_quality_score, 1) + ",";
 8084220:	2201      	movs	r2, #1
 8084222:	6821      	ldr	r1, [r4, #0]
 8084224:	a81e      	add	r0, sp, #120	; 0x78
 8084226:	f007 fa11 	bl	808b64c <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 808422a:	a91e      	add	r1, sp, #120	; 0x78
 808422c:	a827      	add	r0, sp, #156	; 0x9c
 808422e:	f007 f9b2 	bl	808b596 <_ZN6StringC1ERKS_>
 8084232:	4964      	ldr	r1, [pc, #400]	; (80843c4 <_Z15outputDataToESPv+0x66c>)
 8084234:	a827      	add	r0, sp, #156	; 0x9c
 8084236:	f007 fa9e 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 808423a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808423c:	a806      	add	r0, sp, #24
 808423e:	f007 fa49 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084242:	a827      	add	r0, sp, #156	; 0x9c
 8084244:	f007 f91e 	bl	808b484 <_ZN6StringD1Ev>
 8084248:	a81e      	add	r0, sp, #120	; 0x78
 808424a:	f007 f91b 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(PM1_PACKET_CONSTANT) + String(PM01Value);
 808424e:	4c61      	ldr	r4, [pc, #388]	; (80843d4 <_Z15outputDataToESPv+0x67c>)
 8084250:	2172      	movs	r1, #114	; 0x72
 8084252:	a81a      	add	r0, sp, #104	; 0x68
 8084254:	f007 f9c3 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084258:	a91a      	add	r1, sp, #104	; 0x68
 808425a:	a827      	add	r0, sp, #156	; 0x9c
 808425c:	f007 f99b 	bl	808b596 <_ZN6StringC1ERKS_>
 8084260:	220a      	movs	r2, #10
 8084262:	6821      	ldr	r1, [r4, #0]
 8084264:	a81e      	add	r0, sp, #120	; 0x78
 8084266:	f007 f9cb 	bl	808b600 <_ZN6StringC1Eih>
 808426a:	a91e      	add	r1, sp, #120	; 0x78
 808426c:	a827      	add	r0, sp, #156	; 0x9c
 808426e:	f007 fa76 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8084272:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084274:	a802      	add	r0, sp, #8
 8084276:	f007 fa2d 	bl	808b6d4 <_ZN6String6concatERKS_>
 808427a:	a81e      	add	r0, sp, #120	; 0x78
 808427c:	f007 f902 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084280:	a827      	add	r0, sp, #156	; 0x9c
 8084282:	f007 f8ff 	bl	808b484 <_ZN6StringD1Ev>
 8084286:	a81a      	add	r0, sp, #104	; 0x68
 8084288:	f007 f8fc 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(PM01Value) + ",";
 808428c:	220a      	movs	r2, #10
 808428e:	6821      	ldr	r1, [r4, #0]
 8084290:	a81e      	add	r0, sp, #120	; 0x78
 8084292:	f007 f9b5 	bl	808b600 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8084296:	a91e      	add	r1, sp, #120	; 0x78
 8084298:	a827      	add	r0, sp, #156	; 0x9c
 808429a:	f007 f97c 	bl	808b596 <_ZN6StringC1ERKS_>
 808429e:	4949      	ldr	r1, [pc, #292]	; (80843c4 <_Z15outputDataToESPv+0x66c>)
 80842a0:	a827      	add	r0, sp, #156	; 0x9c
 80842a2:	f007 fa68 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 80842a6:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80842a8:	a806      	add	r0, sp, #24
 80842aa:	f007 fa13 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80842ae:	a827      	add	r0, sp, #156	; 0x9c
 80842b0:	f007 f8e8 	bl	808b484 <_ZN6StringD1Ev>
 80842b4:	a81e      	add	r0, sp, #120	; 0x78
 80842b6:	f007 f8e5 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(PM2PT5_PACKET_CONSTANT) + String(corrected_PM_25, 0);
 80842ba:	4c47      	ldr	r4, [pc, #284]	; (80843d8 <_Z15outputDataToESPv+0x680>)
 80842bc:	2152      	movs	r1, #82	; 0x52
 80842be:	a81a      	add	r0, sp, #104	; 0x68
 80842c0:	f007 f98d 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 80842c4:	a91a      	add	r1, sp, #104	; 0x68
 80842c6:	a827      	add	r0, sp, #156	; 0x9c
 80842c8:	f007 f965 	bl	808b596 <_ZN6StringC1ERKS_>
 80842cc:	2200      	movs	r2, #0
 80842ce:	6821      	ldr	r1, [r4, #0]
 80842d0:	a81e      	add	r0, sp, #120	; 0x78
 80842d2:	f007 f9bb 	bl	808b64c <_ZN6StringC1Efi>
 80842d6:	a91e      	add	r1, sp, #120	; 0x78
 80842d8:	a827      	add	r0, sp, #156	; 0x9c
 80842da:	f007 fa40 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 80842de:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80842e0:	a802      	add	r0, sp, #8
 80842e2:	f007 f9f7 	bl	808b6d4 <_ZN6String6concatERKS_>
 80842e6:	a81e      	add	r0, sp, #120	; 0x78
 80842e8:	f007 f8cc 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80842ec:	a827      	add	r0, sp, #156	; 0x9c
 80842ee:	f007 f8c9 	bl	808b484 <_ZN6StringD1Ev>
 80842f2:	a81a      	add	r0, sp, #104	; 0x68
 80842f4:	f007 f8c6 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(corrected_PM_25, 0) + ",";
 80842f8:	2200      	movs	r2, #0
 80842fa:	6821      	ldr	r1, [r4, #0]
 80842fc:	a81e      	add	r0, sp, #120	; 0x78
 80842fe:	f007 f9a5 	bl	808b64c <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8084302:	a91e      	add	r1, sp, #120	; 0x78
 8084304:	a827      	add	r0, sp, #156	; 0x9c
 8084306:	f007 f946 	bl	808b596 <_ZN6StringC1ERKS_>
 808430a:	492e      	ldr	r1, [pc, #184]	; (80843c4 <_Z15outputDataToESPv+0x66c>)
 808430c:	a827      	add	r0, sp, #156	; 0x9c
 808430e:	f007 fa32 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8084312:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084314:	a806      	add	r0, sp, #24
 8084316:	f007 f9dd 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808431a:	a827      	add	r0, sp, #156	; 0x9c
 808431c:	f007 f8b2 	bl	808b484 <_ZN6StringD1Ev>
 8084320:	a81e      	add	r0, sp, #120	; 0x78
 8084322:	f007 f8af 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(PM10_PACKET_CONSTANT) + String(PM10Value);
 8084326:	4c2d      	ldr	r4, [pc, #180]	; (80843dc <_Z15outputDataToESPv+0x684>)
 8084328:	2171      	movs	r1, #113	; 0x71
 808432a:	a81a      	add	r0, sp, #104	; 0x68
 808432c:	f007 f957 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084330:	a91a      	add	r1, sp, #104	; 0x68
 8084332:	a827      	add	r0, sp, #156	; 0x9c
 8084334:	f007 f92f 	bl	808b596 <_ZN6StringC1ERKS_>
 8084338:	220a      	movs	r2, #10
 808433a:	6821      	ldr	r1, [r4, #0]
 808433c:	a81e      	add	r0, sp, #120	; 0x78
 808433e:	f007 f95f 	bl	808b600 <_ZN6StringC1Eih>
 8084342:	a91e      	add	r1, sp, #120	; 0x78
 8084344:	a827      	add	r0, sp, #156	; 0x9c
 8084346:	f007 fa0a 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 808434a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808434c:	a802      	add	r0, sp, #8
 808434e:	f007 f9c1 	bl	808b6d4 <_ZN6String6concatERKS_>
 8084352:	a81e      	add	r0, sp, #120	; 0x78
 8084354:	f007 f896 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084358:	a827      	add	r0, sp, #156	; 0x9c
 808435a:	f007 f893 	bl	808b484 <_ZN6StringD1Ev>
 808435e:	a81a      	add	r0, sp, #104	; 0x68
 8084360:	f007 f890 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(PM10Value) + ",";
 8084364:	220a      	movs	r2, #10
 8084366:	6821      	ldr	r1, [r4, #0]
 8084368:	a81e      	add	r0, sp, #120	; 0x78
 808436a:	f007 f949 	bl	808b600 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 808436e:	a91e      	add	r1, sp, #120	; 0x78
 8084370:	a827      	add	r0, sp, #156	; 0x9c
 8084372:	f007 f910 	bl	808b596 <_ZN6StringC1ERKS_>
 8084376:	4913      	ldr	r1, [pc, #76]	; (80843c4 <_Z15outputDataToESPv+0x66c>)
 8084378:	a827      	add	r0, sp, #156	; 0x9c
 808437a:	f007 f9fc 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 808437e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084380:	a806      	add	r0, sp, #24
 8084382:	f007 f9a7 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084386:	a827      	add	r0, sp, #156	; 0x9c
 8084388:	f007 f87c 	bl	808b484 <_ZN6StringD1Ev>
 808438c:	a81e      	add	r0, sp, #120	; 0x78
 808438e:	f007 f879 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(TEMPERATURE_PACKET_CONSTANT) + String(readTemperature(), 1);
 8084392:	2174      	movs	r1, #116	; 0x74
 8084394:	a81a      	add	r0, sp, #104	; 0x68
 8084396:	f007 f922 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 808439a:	a91a      	add	r1, sp, #104	; 0x68
 808439c:	a827      	add	r0, sp, #156	; 0x9c
 808439e:	f007 f8fa 	bl	808b596 <_ZN6StringC1ERKS_>
 80843a2:	f7fd f959 	bl	8081658 <_Z15readTemperaturev>
 80843a6:	2201      	movs	r2, #1
 80843a8:	4601      	mov	r1, r0
 80843aa:	a81e      	add	r0, sp, #120	; 0x78
 80843ac:	f007 f94e 	bl	808b64c <_ZN6StringC1Efi>
 80843b0:	a91e      	add	r1, sp, #120	; 0x78
 80843b2:	a827      	add	r0, sp, #156	; 0x9c
 80843b4:	f007 f9d3 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 80843b8:	4601      	mov	r1, r0
 80843ba:	e011      	b.n	80843e0 <_Z15outputDataToESPv+0x688>
 80843bc:	08091815 	.word	0x08091815
 80843c0:	200002d8 	.word	0x200002d8
 80843c4:	08092a26 	.word	0x08092a26
 80843c8:	200002c4 	.word	0x200002c4
 80843cc:	20000ca8 	.word	0x20000ca8
 80843d0:	2000057c 	.word	0x2000057c
 80843d4:	200002f4 	.word	0x200002f4
 80843d8:	20000624 	.word	0x20000624
 80843dc:	200002f8 	.word	0x200002f8
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80843e0:	a802      	add	r0, sp, #8
 80843e2:	f007 f977 	bl	808b6d4 <_ZN6String6concatERKS_>
 80843e6:	a81e      	add	r0, sp, #120	; 0x78
 80843e8:	f007 f84c 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80843ec:	a827      	add	r0, sp, #156	; 0x9c
 80843ee:	f007 f849 	bl	808b484 <_ZN6StringD1Ev>
 80843f2:	a81a      	add	r0, sp, #104	; 0x68
 80843f4:	f007 f846 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(readTemperature(), 1) + ",";
 80843f8:	f7fd f92e 	bl	8081658 <_Z15readTemperaturev>
 80843fc:	2201      	movs	r2, #1
 80843fe:	4601      	mov	r1, r0
 8084400:	a81e      	add	r0, sp, #120	; 0x78
 8084402:	f007 f923 	bl	808b64c <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8084406:	a91e      	add	r1, sp, #120	; 0x78
 8084408:	a827      	add	r0, sp, #156	; 0x9c
 808440a:	f007 f8c4 	bl	808b596 <_ZN6StringC1ERKS_>
 808440e:	49b7      	ldr	r1, [pc, #732]	; (80846ec <_Z15outputDataToESPv+0x994>)
 8084410:	a827      	add	r0, sp, #156	; 0x9c
 8084412:	f007 f9b0 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8084416:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084418:	a806      	add	r0, sp, #24
 808441a:	f007 f95b 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808441e:	a827      	add	r0, sp, #156	; 0x9c
 8084420:	f007 f830 	bl	808b484 <_ZN6StringD1Ev>
 8084424:	a81e      	add	r0, sp, #120	; 0x78
 8084426:	f007 f82d 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(PRESSURE_PACKET_CONSTANT) + String(bme.pressure / 100.0, 1);
 808442a:	4db1      	ldr	r5, [pc, #708]	; (80846f0 <_Z15outputDataToESPv+0x998>)
 808442c:	2150      	movs	r1, #80	; 0x50
 808442e:	a81a      	add	r0, sp, #104	; 0x68
 8084430:	f007 f8d5 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8084434:	a91a      	add	r1, sp, #104	; 0x68
 8084436:	a827      	add	r0, sp, #156	; 0x9c
 8084438:	f007 f8ad 	bl	808b596 <_ZN6StringC1ERKS_>
 808443c:	6868      	ldr	r0, [r5, #4]
 808443e:	f009 f96b 	bl	808d718 <__aeabi_f2d>
 8084442:	2200      	movs	r2, #0
 8084444:	4bab      	ldr	r3, [pc, #684]	; (80846f4 <_Z15outputDataToESPv+0x99c>)
 8084446:	f009 fae9 	bl	808da1c <__aeabi_ddiv>
 808444a:	2401      	movs	r4, #1
 808444c:	4602      	mov	r2, r0
 808444e:	460b      	mov	r3, r1
 8084450:	9400      	str	r4, [sp, #0]
 8084452:	a81e      	add	r0, sp, #120	; 0x78
 8084454:	f007 f911 	bl	808b67a <_ZN6StringC1Edi>
 8084458:	a91e      	add	r1, sp, #120	; 0x78
 808445a:	a827      	add	r0, sp, #156	; 0x9c
 808445c:	f007 f97f 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8084460:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084462:	a802      	add	r0, sp, #8
 8084464:	f007 f936 	bl	808b6d4 <_ZN6String6concatERKS_>
 8084468:	a81e      	add	r0, sp, #120	; 0x78
 808446a:	f007 f80b 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808446e:	a827      	add	r0, sp, #156	; 0x9c
 8084470:	f007 f808 	bl	808b484 <_ZN6StringD1Ev>
 8084474:	a81a      	add	r0, sp, #104	; 0x68
 8084476:	f007 f805 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(bme.pressure / 100.0, 1) + ",";
 808447a:	6868      	ldr	r0, [r5, #4]
 808447c:	f009 f94c 	bl	808d718 <__aeabi_f2d>
 8084480:	2200      	movs	r2, #0
 8084482:	4b9c      	ldr	r3, [pc, #624]	; (80846f4 <_Z15outputDataToESPv+0x99c>)
 8084484:	f009 faca 	bl	808da1c <__aeabi_ddiv>
 8084488:	9400      	str	r4, [sp, #0]
 808448a:	460b      	mov	r3, r1
 808448c:	4602      	mov	r2, r0
 808448e:	a81e      	add	r0, sp, #120	; 0x78
 8084490:	f007 f8f3 	bl	808b67a <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8084494:	a91e      	add	r1, sp, #120	; 0x78
 8084496:	a827      	add	r0, sp, #156	; 0x9c
 8084498:	f007 f87d 	bl	808b596 <_ZN6StringC1ERKS_>
 808449c:	4993      	ldr	r1, [pc, #588]	; (80846ec <_Z15outputDataToESPv+0x994>)
 808449e:	a827      	add	r0, sp, #156	; 0x9c
 80844a0:	f007 f969 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 80844a4:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80844a6:	a806      	add	r0, sp, #24
 80844a8:	f007 f914 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80844ac:	a827      	add	r0, sp, #156	; 0x9c
 80844ae:	f006 ffe9 	bl	808b484 <_ZN6StringD1Ev>
 80844b2:	a81e      	add	r0, sp, #120	; 0x78
 80844b4:	f006 ffe6 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(HUMIDITY_PACKET_CONSTANT) + String(readHumidity(), 1);
 80844b8:	2168      	movs	r1, #104	; 0x68
 80844ba:	eb0d 0001 	add.w	r0, sp, r1
 80844be:	f007 f88e 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 80844c2:	a91a      	add	r1, sp, #104	; 0x68
 80844c4:	a827      	add	r0, sp, #156	; 0x9c
 80844c6:	f007 f866 	bl	808b596 <_ZN6StringC1ERKS_>
 80844ca:	f7fd f93f 	bl	808174c <_Z12readHumidityv>
 80844ce:	4622      	mov	r2, r4
 80844d0:	4601      	mov	r1, r0
 80844d2:	a81e      	add	r0, sp, #120	; 0x78
 80844d4:	f007 f8ba 	bl	808b64c <_ZN6StringC1Efi>
 80844d8:	a91e      	add	r1, sp, #120	; 0x78
 80844da:	a827      	add	r0, sp, #156	; 0x9c
 80844dc:	f007 f93f 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 80844e0:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80844e2:	a802      	add	r0, sp, #8
 80844e4:	f007 f8f6 	bl	808b6d4 <_ZN6String6concatERKS_>
 80844e8:	a81e      	add	r0, sp, #120	; 0x78
 80844ea:	f006 ffcb 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80844ee:	a827      	add	r0, sp, #156	; 0x9c
 80844f0:	f006 ffc8 	bl	808b484 <_ZN6StringD1Ev>
 80844f4:	a81a      	add	r0, sp, #104	; 0x68
 80844f6:	f006 ffc5 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(readHumidity(), 1) + ",";
 80844fa:	f7fd f927 	bl	808174c <_Z12readHumidityv>
 80844fe:	4622      	mov	r2, r4
 8084500:	4601      	mov	r1, r0
 8084502:	a81e      	add	r0, sp, #120	; 0x78
 8084504:	f007 f8a2 	bl	808b64c <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8084508:	a91e      	add	r1, sp, #120	; 0x78
 808450a:	a827      	add	r0, sp, #156	; 0x9c
 808450c:	f007 f843 	bl	808b596 <_ZN6StringC1ERKS_>
 8084510:	4976      	ldr	r1, [pc, #472]	; (80846ec <_Z15outputDataToESPv+0x994>)
 8084512:	a827      	add	r0, sp, #156	; 0x9c
 8084514:	f007 f92f 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8084518:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808451a:	a806      	add	r0, sp, #24
 808451c:	f007 f8da 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084520:	a827      	add	r0, sp, #156	; 0x9c
 8084522:	f006 ffaf 	bl	808b484 <_ZN6StringD1Ev>
 8084526:	a81e      	add	r0, sp, #120	; 0x78
 8084528:	f006 ffac 	bl	808b484 <_ZN6StringD1Ev>
    if(ozone_enabled){
 808452c:	4b72      	ldr	r3, [pc, #456]	; (80846f8 <_Z15outputDataToESPv+0x9a0>)
 808452e:	681b      	ldr	r3, [r3, #0]
 8084530:	2b00      	cmp	r3, #0
 8084532:	d035      	beq.n	80845a0 <_Z15outputDataToESPv+0x848>
        cloud_output_string += String(OZONE_PACKET_CONSTANT) + String(O3_float, 1);
 8084534:	214f      	movs	r1, #79	; 0x4f
 8084536:	4d71      	ldr	r5, [pc, #452]	; (80846fc <_Z15outputDataToESPv+0x9a4>)
 8084538:	a81a      	add	r0, sp, #104	; 0x68
 808453a:	f007 f850 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 808453e:	a91a      	add	r1, sp, #104	; 0x68
 8084540:	a827      	add	r0, sp, #156	; 0x9c
 8084542:	f007 f828 	bl	808b596 <_ZN6StringC1ERKS_>
 8084546:	4622      	mov	r2, r4
 8084548:	6829      	ldr	r1, [r5, #0]
 808454a:	a81e      	add	r0, sp, #120	; 0x78
 808454c:	f007 f87e 	bl	808b64c <_ZN6StringC1Efi>
 8084550:	a91e      	add	r1, sp, #120	; 0x78
 8084552:	a827      	add	r0, sp, #156	; 0x9c
 8084554:	f007 f903 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8084558:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808455a:	a802      	add	r0, sp, #8
 808455c:	f007 f8ba 	bl	808b6d4 <_ZN6String6concatERKS_>
 8084560:	a81e      	add	r0, sp, #120	; 0x78
 8084562:	f006 ff8f 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084566:	a827      	add	r0, sp, #156	; 0x9c
 8084568:	f006 ff8c 	bl	808b484 <_ZN6StringD1Ev>
 808456c:	a81a      	add	r0, sp, #104	; 0x68
 808456e:	f006 ff89 	bl	808b484 <_ZN6StringD1Ev>
        csv_output_string += String(O3_float, 1) + ",";
 8084572:	4622      	mov	r2, r4
 8084574:	6829      	ldr	r1, [r5, #0]
 8084576:	a81e      	add	r0, sp, #120	; 0x78
 8084578:	f007 f868 	bl	808b64c <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 808457c:	a91e      	add	r1, sp, #120	; 0x78
 808457e:	a827      	add	r0, sp, #156	; 0x9c
 8084580:	f007 f809 	bl	808b596 <_ZN6StringC1ERKS_>
 8084584:	4959      	ldr	r1, [pc, #356]	; (80846ec <_Z15outputDataToESPv+0x994>)
 8084586:	a827      	add	r0, sp, #156	; 0x9c
 8084588:	f007 f8f5 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 808458c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808458e:	a806      	add	r0, sp, #24
 8084590:	f007 f8a0 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084594:	a827      	add	r0, sp, #156	; 0x9c
 8084596:	f006 ff75 	bl	808b484 <_ZN6StringD1Ev>
 808459a:	a81e      	add	r0, sp, #120	; 0x78
 808459c:	f006 ff72 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(BATTERY_PACKET_CONSTANT) + String(fuel.getSoC(), 1);
 80845a0:	2178      	movs	r1, #120	; 0x78
 80845a2:	a81a      	add	r0, sp, #104	; 0x68
 80845a4:	f007 f81b 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 80845a8:	a91a      	add	r1, sp, #104	; 0x68
 80845aa:	a827      	add	r0, sp, #156	; 0x9c
 80845ac:	f006 fff3 	bl	808b596 <_ZN6StringC1ERKS_>
 80845b0:	4853      	ldr	r0, [pc, #332]	; (8084700 <_Z15outputDataToESPv+0x9a8>)
 80845b2:	f007 fe29 	bl	808c208 <_ZN9FuelGauge6getSoCEv>
 80845b6:	2201      	movs	r2, #1
 80845b8:	4601      	mov	r1, r0
 80845ba:	a81e      	add	r0, sp, #120	; 0x78
 80845bc:	f007 f846 	bl	808b64c <_ZN6StringC1Efi>
 80845c0:	a91e      	add	r1, sp, #120	; 0x78
 80845c2:	a827      	add	r0, sp, #156	; 0x9c
 80845c4:	f007 f8cb 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 80845c8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80845ca:	a802      	add	r0, sp, #8
 80845cc:	f007 f882 	bl	808b6d4 <_ZN6String6concatERKS_>
 80845d0:	a81e      	add	r0, sp, #120	; 0x78
 80845d2:	f006 ff57 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80845d6:	a827      	add	r0, sp, #156	; 0x9c
 80845d8:	f006 ff54 	bl	808b484 <_ZN6StringD1Ev>
 80845dc:	a81a      	add	r0, sp, #104	; 0x68
 80845de:	f006 ff51 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(fuel.getSoC(), 1) + ",";
 80845e2:	4847      	ldr	r0, [pc, #284]	; (8084700 <_Z15outputDataToESPv+0x9a8>)
 80845e4:	f007 fe10 	bl	808c208 <_ZN9FuelGauge6getSoCEv>
 80845e8:	2201      	movs	r2, #1
 80845ea:	4601      	mov	r1, r0
 80845ec:	a81e      	add	r0, sp, #120	; 0x78
 80845ee:	f007 f82d 	bl	808b64c <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 80845f2:	a91e      	add	r1, sp, #120	; 0x78
 80845f4:	a827      	add	r0, sp, #156	; 0x9c
 80845f6:	f006 ffce 	bl	808b596 <_ZN6StringC1ERKS_>
 80845fa:	493c      	ldr	r1, [pc, #240]	; (80846ec <_Z15outputDataToESPv+0x994>)
 80845fc:	a827      	add	r0, sp, #156	; 0x9c
 80845fe:	f007 f8ba 	bl	808b776 <_ZplRK15StringSumHelperPKc>
    cloud_output_string += String(SOUND_PACKET_CONSTANT) + String(sound_average, 0);
 8084602:	2500      	movs	r5, #0
    csv_output_string += String(fuel.getSoC(), 1) + ",";
 8084604:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084606:	a806      	add	r0, sp, #24
 8084608:	f007 f864 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808460c:	a827      	add	r0, sp, #156	; 0x9c
 808460e:	f006 ff39 	bl	808b484 <_ZN6StringD1Ev>
 8084612:	a81e      	add	r0, sp, #120	; 0x78
 8084614:	f006 ff36 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(SOUND_PACKET_CONSTANT) + String(sound_average, 0);
 8084618:	2173      	movs	r1, #115	; 0x73
 808461a:	a81a      	add	r0, sp, #104	; 0x68
 808461c:	f006 ffdf 	bl	808b5de <_ZN6StringC1Ec>
 8084620:	4c38      	ldr	r4, [pc, #224]	; (8084704 <_Z15outputDataToESPv+0x9ac>)
	StringSumHelper(const String &s) : String(s) {}
 8084622:	a91a      	add	r1, sp, #104	; 0x68
 8084624:	a827      	add	r0, sp, #156	; 0x9c
 8084626:	f006 ffb6 	bl	808b596 <_ZN6StringC1ERKS_>
 808462a:	9500      	str	r5, [sp, #0]
 808462c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8084630:	a81e      	add	r0, sp, #120	; 0x78
 8084632:	f007 f822 	bl	808b67a <_ZN6StringC1Edi>
 8084636:	a91e      	add	r1, sp, #120	; 0x78
 8084638:	a827      	add	r0, sp, #156	; 0x9c
 808463a:	f007 f890 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 808463e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084640:	a802      	add	r0, sp, #8
 8084642:	f007 f847 	bl	808b6d4 <_ZN6String6concatERKS_>
 8084646:	a81e      	add	r0, sp, #120	; 0x78
 8084648:	f006 ff1c 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 808464c:	a827      	add	r0, sp, #156	; 0x9c
 808464e:	f006 ff19 	bl	808b484 <_ZN6StringD1Ev>
 8084652:	a81a      	add	r0, sp, #104	; 0x68
 8084654:	f006 ff16 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(sound_average, 0) + ",";
 8084658:	9500      	str	r5, [sp, #0]
 808465a:	e9d4 2300 	ldrd	r2, r3, [r4]
 808465e:	a81e      	add	r0, sp, #120	; 0x78
 8084660:	f007 f80b 	bl	808b67a <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8084664:	a91e      	add	r1, sp, #120	; 0x78
 8084666:	a827      	add	r0, sp, #156	; 0x9c
 8084668:	f006 ff95 	bl	808b596 <_ZN6StringC1ERKS_>
 808466c:	491f      	ldr	r1, [pc, #124]	; (80846ec <_Z15outputDataToESPv+0x994>)
 808466e:	a827      	add	r0, sp, #156	; 0x9c
 8084670:	f007 f881 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8084674:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084676:	a806      	add	r0, sp, #24
 8084678:	f007 f82c 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808467c:	a827      	add	r0, sp, #156	; 0x9c
 808467e:	f006 ff01 	bl	808b484 <_ZN6StringD1Ev>
 8084682:	a81e      	add	r0, sp, #120	; 0x78
 8084684:	f006 fefe 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(LATITUDE_PACKET_CONSTANT);
 8084688:	2161      	movs	r1, #97	; 0x61
 808468a:	a827      	add	r0, sp, #156	; 0x9c
 808468c:	f006 ffa7 	bl	808b5de <_ZN6StringC1Ec>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084690:	a927      	add	r1, sp, #156	; 0x9c
 8084692:	a802      	add	r0, sp, #8
 8084694:	f007 f81e 	bl	808b6d4 <_ZN6String6concatERKS_>
 8084698:	a827      	add	r0, sp, #156	; 0x9c
 808469a:	f006 fef3 	bl	808b484 <_ZN6StringD1Ev>
    if(gps.get_latitude() != 0){
 808469e:	481a      	ldr	r0, [pc, #104]	; (8084708 <_Z15outputDataToESPv+0x9b0>)
 80846a0:	f002 ff16 	bl	80874d0 <_ZN3GPS12get_latitudeEv>
 80846a4:	2200      	movs	r2, #0
 80846a6:	2300      	movs	r3, #0
 80846a8:	f009 faf6 	bl	808dc98 <__aeabi_dcmpeq>
 80846ac:	2800      	cmp	r0, #0
 80846ae:	f040 81fc 	bne.w	8084aaa <_Z15outputDataToESPv+0xd52>
        if(gps.get_nsIndicator() == 0){
 80846b2:	4815      	ldr	r0, [pc, #84]	; (8084708 <_Z15outputDataToESPv+0x9b0>)
 80846b4:	f002 ff27 	bl	8087506 <_ZN3GPS15get_nsIndicatorEv>
 80846b8:	b938      	cbnz	r0, 80846ca <_Z15outputDataToESPv+0x972>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80846ba:	4914      	ldr	r1, [pc, #80]	; (808470c <_Z15outputDataToESPv+0x9b4>)
 80846bc:	a806      	add	r0, sp, #24
 80846be:	f007 f80d 	bl	808b6dc <_ZN6String6concatEPKc>
 80846c2:	4912      	ldr	r1, [pc, #72]	; (808470c <_Z15outputDataToESPv+0x9b4>)
 80846c4:	a802      	add	r0, sp, #8
 80846c6:	f007 f809 	bl	808b6dc <_ZN6String6concatEPKc>
        csv_output_string += String(gps.get_latitude()) + ",";
 80846ca:	480f      	ldr	r0, [pc, #60]	; (8084708 <_Z15outputDataToESPv+0x9b0>)
 80846cc:	f002 ff00 	bl	80874d0 <_ZN3GPS12get_latitudeEv>
 80846d0:	2406      	movs	r4, #6
 80846d2:	4602      	mov	r2, r0
 80846d4:	460b      	mov	r3, r1
 80846d6:	9400      	str	r4, [sp, #0]
 80846d8:	a81e      	add	r0, sp, #120	; 0x78
 80846da:	f006 ffce 	bl	808b67a <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80846de:	a91e      	add	r1, sp, #120	; 0x78
 80846e0:	a827      	add	r0, sp, #156	; 0x9c
 80846e2:	f006 ff58 	bl	808b596 <_ZN6StringC1ERKS_>
 80846e6:	4901      	ldr	r1, [pc, #4]	; (80846ec <_Z15outputDataToESPv+0x994>)
 80846e8:	a827      	add	r0, sp, #156	; 0x9c
 80846ea:	e011      	b.n	8084710 <_Z15outputDataToESPv+0x9b8>
 80846ec:	08092a26 	.word	0x08092a26
 80846f0:	20000584 	.word	0x20000584
 80846f4:	40590000 	.word	0x40590000
 80846f8:	200007a0 	.word	0x200007a0
 80846fc:	200002ec 	.word	0x200002ec
 8084700:	200006a4 	.word	0x200006a4
 8084704:	20000c78 	.word	0x20000c78
 8084708:	200006b8 	.word	0x200006b8
 808470c:	080917c8 	.word	0x080917c8
 8084710:	f007 f831 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8084714:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084716:	a806      	add	r0, sp, #24
 8084718:	f006 ffdc 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808471c:	a827      	add	r0, sp, #156	; 0x9c
 808471e:	f006 feb1 	bl	808b484 <_ZN6StringD1Ev>
 8084722:	a81e      	add	r0, sp, #120	; 0x78
 8084724:	f006 feae 	bl	808b484 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_latitude());
 8084728:	48b5      	ldr	r0, [pc, #724]	; (8084a00 <_Z15outputDataToESPv+0xca8>)
 808472a:	f002 fed1 	bl	80874d0 <_ZN3GPS12get_latitudeEv>
 808472e:	9400      	str	r4, [sp, #0]
 8084730:	4602      	mov	r2, r0
 8084732:	460b      	mov	r3, r1
 8084734:	a827      	add	r0, sp, #156	; 0x9c
 8084736:	f006 ffa0 	bl	808b67a <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808473a:	a927      	add	r1, sp, #156	; 0x9c
 808473c:	a802      	add	r0, sp, #8
 808473e:	f006 ffc9 	bl	808b6d4 <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_latitude);
 8084742:	a827      	add	r0, sp, #156	; 0x9c
 8084744:	f006 fe9e 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(LONGITUDE_PACKET_CONSTANT);
 8084748:	216f      	movs	r1, #111	; 0x6f
 808474a:	a827      	add	r0, sp, #156	; 0x9c
 808474c:	f006 ff47 	bl	808b5de <_ZN6StringC1Ec>
 8084750:	a927      	add	r1, sp, #156	; 0x9c
 8084752:	a802      	add	r0, sp, #8
 8084754:	f006 ffbe 	bl	808b6d4 <_ZN6String6concatERKS_>
 8084758:	a827      	add	r0, sp, #156	; 0x9c
 808475a:	f006 fe93 	bl	808b484 <_ZN6StringD1Ev>
    if(gps.get_longitude() != 0){
 808475e:	48a8      	ldr	r0, [pc, #672]	; (8084a00 <_Z15outputDataToESPv+0xca8>)
 8084760:	f002 febb 	bl	80874da <_ZN3GPS13get_longitudeEv>
 8084764:	2200      	movs	r2, #0
 8084766:	2300      	movs	r3, #0
 8084768:	f009 fa96 	bl	808dc98 <__aeabi_dcmpeq>
 808476c:	2800      	cmp	r0, #0
 808476e:	f040 81b7 	bne.w	8084ae0 <_Z15outputDataToESPv+0xd88>
        if(gps.get_ewIndicator() == 0x01){
 8084772:	48a3      	ldr	r0, [pc, #652]	; (8084a00 <_Z15outputDataToESPv+0xca8>)
 8084774:	f002 feca 	bl	808750c <_ZN3GPS15get_ewIndicatorEv>
 8084778:	2801      	cmp	r0, #1
 808477a:	d107      	bne.n	808478c <_Z15outputDataToESPv+0xa34>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808477c:	49a1      	ldr	r1, [pc, #644]	; (8084a04 <_Z15outputDataToESPv+0xcac>)
 808477e:	a806      	add	r0, sp, #24
 8084780:	f006 ffac 	bl	808b6dc <_ZN6String6concatEPKc>
 8084784:	499f      	ldr	r1, [pc, #636]	; (8084a04 <_Z15outputDataToESPv+0xcac>)
 8084786:	a802      	add	r0, sp, #8
 8084788:	f006 ffa8 	bl	808b6dc <_ZN6String6concatEPKc>
        csv_output_string += String(gps.get_longitude()) + ",";
 808478c:	489c      	ldr	r0, [pc, #624]	; (8084a00 <_Z15outputDataToESPv+0xca8>)
 808478e:	f002 fea4 	bl	80874da <_ZN3GPS13get_longitudeEv>
 8084792:	2406      	movs	r4, #6
 8084794:	4602      	mov	r2, r0
 8084796:	460b      	mov	r3, r1
 8084798:	9400      	str	r4, [sp, #0]
 808479a:	a81e      	add	r0, sp, #120	; 0x78
 808479c:	f006 ff6d 	bl	808b67a <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80847a0:	a91e      	add	r1, sp, #120	; 0x78
 80847a2:	a827      	add	r0, sp, #156	; 0x9c
 80847a4:	f006 fef7 	bl	808b596 <_ZN6StringC1ERKS_>
 80847a8:	4997      	ldr	r1, [pc, #604]	; (8084a08 <_Z15outputDataToESPv+0xcb0>)
 80847aa:	a827      	add	r0, sp, #156	; 0x9c
 80847ac:	f006 ffe3 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 80847b0:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80847b2:	a806      	add	r0, sp, #24
 80847b4:	f006 ff8e 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80847b8:	a827      	add	r0, sp, #156	; 0x9c
 80847ba:	f006 fe63 	bl	808b484 <_ZN6StringD1Ev>
 80847be:	a81e      	add	r0, sp, #120	; 0x78
 80847c0:	f006 fe60 	bl	808b484 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_longitude());
 80847c4:	488e      	ldr	r0, [pc, #568]	; (8084a00 <_Z15outputDataToESPv+0xca8>)
 80847c6:	f002 fe88 	bl	80874da <_ZN3GPS13get_longitudeEv>
 80847ca:	9400      	str	r4, [sp, #0]
 80847cc:	4602      	mov	r2, r0
 80847ce:	460b      	mov	r3, r1
 80847d0:	a827      	add	r0, sp, #156	; 0x9c
 80847d2:	f006 ff52 	bl	808b67a <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80847d6:	a927      	add	r1, sp, #156	; 0x9c
 80847d8:	a802      	add	r0, sp, #8
 80847da:	f006 ff7b 	bl	808b6d4 <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_longitude);
 80847de:	a827      	add	r0, sp, #156	; 0x9c
 80847e0:	f006 fe50 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(ACCURACY_PACKET_CONSTANT);
 80847e4:	2163      	movs	r1, #99	; 0x63
 80847e6:	a827      	add	r0, sp, #156	; 0x9c
 80847e8:	f006 fef9 	bl	808b5de <_ZN6StringC1Ec>
 80847ec:	a927      	add	r1, sp, #156	; 0x9c
 80847ee:	a802      	add	r0, sp, #8
 80847f0:	f006 ff70 	bl	808b6d4 <_ZN6String6concatERKS_>
 80847f4:	a827      	add	r0, sp, #156	; 0x9c
 80847f6:	f006 fe45 	bl	808b484 <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0) {
 80847fa:	4881      	ldr	r0, [pc, #516]	; (8084a00 <_Z15outputDataToESPv+0xca8>)
 80847fc:	f002 fe6d 	bl	80874da <_ZN3GPS13get_longitudeEv>
 8084800:	2200      	movs	r2, #0
 8084802:	2300      	movs	r3, #0
 8084804:	f009 fa48 	bl	808dc98 <__aeabi_dcmpeq>
 8084808:	2800      	cmp	r0, #0
 808480a:	f040 8184 	bne.w	8084b16 <_Z15outputDataToESPv+0xdbe>
        csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
 808480e:	487c      	ldr	r0, [pc, #496]	; (8084a00 <_Z15outputDataToESPv+0xca8>)
 8084810:	f002 fe68 	bl	80874e4 <_ZN3GPS23get_horizontalDillutionEv>
 8084814:	f008 ff6e 	bl	808d6f4 <__aeabi_i2d>
 8084818:	2200      	movs	r2, #0
 808481a:	4b7c      	ldr	r3, [pc, #496]	; (8084a0c <_Z15outputDataToESPv+0xcb4>)
 808481c:	f009 f8fe 	bl	808da1c <__aeabi_ddiv>
 8084820:	2406      	movs	r4, #6
 8084822:	4602      	mov	r2, r0
 8084824:	460b      	mov	r3, r1
 8084826:	9400      	str	r4, [sp, #0]
 8084828:	a81e      	add	r0, sp, #120	; 0x78
 808482a:	f006 ff26 	bl	808b67a <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 808482e:	a91e      	add	r1, sp, #120	; 0x78
 8084830:	a827      	add	r0, sp, #156	; 0x9c
 8084832:	f006 feb0 	bl	808b596 <_ZN6StringC1ERKS_>
 8084836:	4974      	ldr	r1, [pc, #464]	; (8084a08 <_Z15outputDataToESPv+0xcb0>)
 8084838:	a827      	add	r0, sp, #156	; 0x9c
 808483a:	f006 ff9c 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 808483e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084840:	a806      	add	r0, sp, #24
 8084842:	f006 ff47 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084846:	a827      	add	r0, sp, #156	; 0x9c
 8084848:	f006 fe1c 	bl	808b484 <_ZN6StringD1Ev>
 808484c:	a81e      	add	r0, sp, #120	; 0x78
 808484e:	f006 fe19 	bl	808b484 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
 8084852:	486b      	ldr	r0, [pc, #428]	; (8084a00 <_Z15outputDataToESPv+0xca8>)
 8084854:	f002 fe46 	bl	80874e4 <_ZN3GPS23get_horizontalDillutionEv>
 8084858:	f008 ff4c 	bl	808d6f4 <__aeabi_i2d>
 808485c:	2200      	movs	r2, #0
 808485e:	4b6b      	ldr	r3, [pc, #428]	; (8084a0c <_Z15outputDataToESPv+0xcb4>)
 8084860:	f009 f8dc 	bl	808da1c <__aeabi_ddiv>
 8084864:	9400      	str	r4, [sp, #0]
 8084866:	4602      	mov	r2, r0
 8084868:	460b      	mov	r3, r1
 808486a:	a827      	add	r0, sp, #156	; 0x9c
 808486c:	f006 ff05 	bl	808b67a <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084870:	a927      	add	r1, sp, #156	; 0x9c
    csv_output_string += String(status_word.status_int) + ",";
 8084872:	4d67      	ldr	r5, [pc, #412]	; (8084a10 <_Z15outputDataToESPv+0xcb8>)
 8084874:	a802      	add	r0, sp, #8
 8084876:	f006 ff2d 	bl	808b6d4 <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_accuracy);
 808487a:	a827      	add	r0, sp, #156	; 0x9c
 808487c:	f006 fe02 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(status_word.status_int) + ",";
 8084880:	220a      	movs	r2, #10
 8084882:	8829      	ldrh	r1, [r5, #0]
 8084884:	a81e      	add	r0, sp, #120	; 0x78
 8084886:	f006 febb 	bl	808b600 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 808488a:	a91e      	add	r1, sp, #120	; 0x78
 808488c:	a827      	add	r0, sp, #156	; 0x9c
 808488e:	f006 fe82 	bl	808b596 <_ZN6StringC1ERKS_>
 8084892:	495d      	ldr	r1, [pc, #372]	; (8084a08 <_Z15outputDataToESPv+0xcb0>)
 8084894:	a827      	add	r0, sp, #156	; 0x9c
 8084896:	f006 ff6e 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 808489a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808489c:	a806      	add	r0, sp, #24
 808489e:	f006 ff19 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80848a2:	a827      	add	r0, sp, #156	; 0x9c
 80848a4:	f006 fdee 	bl	808b484 <_ZN6StringD1Ev>
 80848a8:	a81e      	add	r0, sp, #120	; 0x78
 80848aa:	f006 fdeb 	bl	808b484 <_ZN6StringD1Ev>
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
 80848ae:	4b59      	ldr	r3, [pc, #356]	; (8084a14 <_Z15outputDataToESPv+0xcbc>)
 80848b0:	4632      	mov	r2, r6
 80848b2:	4959      	ldr	r1, [pc, #356]	; (8084a18 <_Z15outputDataToESPv+0xcc0>)
 80848b4:	9300      	str	r3, [sp, #0]
 80848b6:	a827      	add	r0, sp, #156	; 0x9c
 80848b8:	463b      	mov	r3, r7
 80848ba:	f007 fb5b 	bl	808bf74 <_ZN9TimeClass6formatExPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80848be:	a927      	add	r1, sp, #156	; 0x9c
 80848c0:	a806      	add	r0, sp, #24
 80848c2:	f006 ff07 	bl	808b6d4 <_ZN6String6concatERKS_>
 80848c6:	a827      	add	r0, sp, #156	; 0x9c
 80848c8:	f006 fddc 	bl	808b484 <_ZN6StringD1Ev>
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 80848cc:	2159      	movs	r1, #89	; 0x59
 80848ce:	a81a      	add	r0, sp, #104	; 0x68
 80848d0:	f006 fe85 	bl	808b5de <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 80848d4:	a91a      	add	r1, sp, #104	; 0x68
 80848d6:	a827      	add	r0, sp, #156	; 0x9c
 80848d8:	f006 fe5d 	bl	808b596 <_ZN6StringC1ERKS_>
 80848dc:	f007 fba9 	bl	808c032 <_ZN9TimeClass3nowEv>
 80848e0:	220a      	movs	r2, #10
 80848e2:	4601      	mov	r1, r0
 80848e4:	a81e      	add	r0, sp, #120	; 0x78
 80848e6:	f006 fe9e 	bl	808b626 <_ZN6StringC1Elh>
 80848ea:	a91e      	add	r1, sp, #120	; 0x78
 80848ec:	a827      	add	r0, sp, #156	; 0x9c
 80848ee:	f006 ff36 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 80848f2:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80848f4:	a802      	add	r0, sp, #8
 80848f6:	f006 feed 	bl	808b6d4 <_ZN6String6concatERKS_>
 80848fa:	a81e      	add	r0, sp, #120	; 0x78
 80848fc:	f006 fdc2 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8084900:	a827      	add	r0, sp, #156	; 0x9c
 8084902:	f006 fdbf 	bl	808b484 <_ZN6StringD1Ev>
    if(debugging_enabled){
 8084906:	4c45      	ldr	r4, [pc, #276]	; (8084a1c <_Z15outputDataToESPv+0xcc4>)
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8084908:	a81a      	add	r0, sp, #104	; 0x68
 808490a:	f006 fdbb 	bl	808b484 <_ZN6StringD1Ev>
	String & operator += (char c)			{concat(c); return (*this);}
 808490e:	2126      	movs	r1, #38	; 0x26
 8084910:	a802      	add	r0, sp, #8
 8084912:	f006 fef2 	bl	808b6fa <_ZN6String6concatEc>
    if(debugging_enabled){
 8084916:	6823      	ldr	r3, [r4, #0]
 8084918:	462f      	mov	r7, r5
 808491a:	b14b      	cbz	r3, 8084930 <_Z15outputDataToESPv+0xbd8>
        Serial.println("Line to write to cloud:");
 808491c:	f008 f8dc 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084920:	493f      	ldr	r1, [pc, #252]	; (8084a20 <_Z15outputDataToESPv+0xcc8>)
 8084922:	f007 f81e 	bl	808b962 <_ZN5Print7printlnEPKc>
        Serial.println(cloud_output_string);
 8084926:	f008 f8d7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808492a:	9902      	ldr	r1, [sp, #8]
 808492c:	f007 f819 	bl	808b962 <_ZN5Print7printlnEPKc>
    outputToCloud(cloud_output_string, sensible_buf);
 8084930:	a902      	add	r1, sp, #8
 8084932:	a81e      	add	r0, sp, #120	; 0x78
 8084934:	f006 fe2f 	bl	808b596 <_ZN6StringC1ERKS_>
 8084938:	a964      	add	r1, sp, #400	; 0x190
 808493a:	a827      	add	r0, sp, #156	; 0x9c
 808493c:	f006 fdec 	bl	808b518 <_ZN6StringC1EPKc>
 8084940:	a927      	add	r1, sp, #156	; 0x9c
 8084942:	a81e      	add	r0, sp, #120	; 0x78
 8084944:	f7ff f83e 	bl	80839c4 <_Z13outputToCloud6StringS_>
 8084948:	a827      	add	r0, sp, #156	; 0x9c
 808494a:	f006 fd9b 	bl	808b484 <_ZN6StringD1Ev>
 808494e:	a81e      	add	r0, sp, #120	; 0x78
 8084950:	f006 fd98 	bl	808b484 <_ZN6StringD1Ev>
    if(esp_wifi_connection_status){
 8084954:	4b33      	ldr	r3, [pc, #204]	; (8084a24 <_Z15outputDataToESPv+0xccc>)
 8084956:	681b      	ldr	r3, [r3, #0]
 8084958:	b1ab      	cbz	r3, 8084986 <_Z15outputDataToESPv+0xc2e>
        if(debugging_enabled){
 808495a:	6823      	ldr	r3, [r4, #0]
 808495c:	b173      	cbz	r3, 808497c <_Z15outputDataToESPv+0xc24>
            Serial.println("Sending data to esp to upload via wifi...");
 808495e:	f008 f8bb 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084962:	4931      	ldr	r1, [pc, #196]	; (8084a28 <_Z15outputDataToESPv+0xcd0>)
 8084964:	f006 fffd 	bl	808b962 <_ZN5Print7printlnEPKc>
            writeLogFile("Sending data to esp to upload via wifi");
 8084968:	4930      	ldr	r1, [pc, #192]	; (8084a2c <_Z15outputDataToESPv+0xcd4>)
 808496a:	a827      	add	r0, sp, #156	; 0x9c
 808496c:	f006 fdd4 	bl	808b518 <_ZN6StringC1EPKc>
 8084970:	a827      	add	r0, sp, #156	; 0x9c
 8084972:	f7fd f9dd 	bl	8081d30 <_Z12writeLogFile6String>
 8084976:	a827      	add	r0, sp, #156	; 0x9c
 8084978:	f006 fd84 	bl	808b484 <_ZN6StringD1Ev>
        Serial1.println(cloud_output_string);
 808497c:	f008 f9f6 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 8084980:	9902      	ldr	r1, [sp, #8]
 8084982:	f006 ffee 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println(csv_output_string);
 8084986:	f008 f8a7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808498a:	9906      	ldr	r1, [sp, #24]
 808498c:	f006 ffe9 	bl	808b962 <_ZN5Print7printlnEPKc>
 8084990:	4927      	ldr	r1, [pc, #156]	; (8084a30 <_Z15outputDataToESPv+0xcd8>)
 8084992:	2302      	movs	r3, #2
 8084994:	220c      	movs	r2, #12
 8084996:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 808499a:	f7fc fac7 	bl	8080f2c <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS)){
 808499e:	2800      	cmp	r0, #0
 80849a0:	d063      	beq.n	8084a6a <_Z15outputDataToESPv+0xd12>
        if(debugging_enabled)
 80849a2:	6823      	ldr	r3, [r4, #0]
 80849a4:	b123      	cbz	r3, 80849b0 <_Z15outputDataToESPv+0xc58>
            Serial.println("Writing row to file.");
 80849a6:	f008 f897 	bl	808cad8 <_Z16_fetch_usbserialv>
 80849aa:	4922      	ldr	r1, [pc, #136]	; (8084a34 <_Z15outputDataToESPv+0xcdc>)
 80849ac:	f006 ffd9 	bl	808b962 <_ZN5Print7printlnEPKc>
 80849b0:	4a21      	ldr	r2, [pc, #132]	; (8084a38 <_Z15outputDataToESPv+0xce0>)
 80849b2:	4922      	ldr	r1, [pc, #136]	; (8084a3c <_Z15outputDataToESPv+0xce4>)
        if(file_started == 0){
 80849b4:	4c22      	ldr	r4, [pc, #136]	; (8084a40 <_Z15outputDataToESPv+0xce8>)
 80849b6:	2346      	movs	r3, #70	; 0x46
 80849b8:	6812      	ldr	r2, [r2, #0]
 80849ba:	6809      	ldr	r1, [r1, #0]
 80849bc:	4821      	ldr	r0, [pc, #132]	; (8084a44 <_Z15outputDataToESPv+0xcec>)
 80849be:	f004 f826 	bl	8088a0e <_ZN7FatFile4openEPS_PKch>
 80849c2:	6823      	ldr	r3, [r4, #0]
 80849c4:	2b00      	cmp	r3, #0
 80849c6:	d149      	bne.n	8084a5c <_Z15outputDataToESPv+0xd04>
            file.println("File Start timestamp: ");
 80849c8:	491f      	ldr	r1, [pc, #124]	; (8084a48 <_Z15outputDataToESPv+0xcf0>)
 80849ca:	4820      	ldr	r0, [pc, #128]	; (8084a4c <_Z15outputDataToESPv+0xcf4>)
 80849cc:	f006 ffc9 	bl	808b962 <_ZN5Print7printlnEPKc>
                return timeStr(now());
 80849d0:	f007 fb2f 	bl	808c032 <_ZN9TimeClass3nowEv>
 80849d4:	17c3      	asrs	r3, r0, #31
 80849d6:	4602      	mov	r2, r0
 80849d8:	a827      	add	r0, sp, #156	; 0x9c
 80849da:	f007 fa27 	bl	808be2c <_ZN9TimeClass7timeStrEx>
            file.println(Time.timeStr());
 80849de:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80849e0:	481a      	ldr	r0, [pc, #104]	; (8084a4c <_Z15outputDataToESPv+0xcf4>)
 80849e2:	f006 ffbe 	bl	808b962 <_ZN5Print7printlnEPKc>
 80849e6:	a827      	add	r0, sp, #156	; 0x9c
 80849e8:	f006 fd4c 	bl	808b484 <_ZN6StringD1Ev>
            file.println(String(HEADER_STRING));
 80849ec:	4918      	ldr	r1, [pc, #96]	; (8084a50 <_Z15outputDataToESPv+0xcf8>)
 80849ee:	a827      	add	r0, sp, #156	; 0x9c
 80849f0:	f006 fd92 	bl	808b518 <_ZN6StringC1EPKc>
 80849f4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80849f6:	4815      	ldr	r0, [pc, #84]	; (8084a4c <_Z15outputDataToESPv+0xcf4>)
 80849f8:	f006 ffb3 	bl	808b962 <_ZN5Print7printlnEPKc>
 80849fc:	a827      	add	r0, sp, #156	; 0x9c
 80849fe:	e029      	b.n	8084a54 <_Z15outputDataToESPv+0xcfc>
 8084a00:	200006b8 	.word	0x200006b8
 8084a04:	080917c8 	.word	0x080917c8
 8084a08:	08092a26 	.word	0x08092a26
 8084a0c:	40240000 	.word	0x40240000
 8084a10:	20000c90 	.word	0x20000c90
 8084a14:	0809181a 	.word	0x0809181a
 8084a18:	20000e20 	.word	0x20000e20
 8084a1c:	20000628 	.word	0x20000628
 8084a20:	0809182c 	.word	0x0809182c
 8084a24:	2000062c 	.word	0x2000062c
 8084a28:	08091844 	.word	0x08091844
 8084a2c:	0809186e 	.word	0x0809186e
 8084a30:	20000c68 	.word	0x20000c68
 8084a34:	08091895 	.word	0x08091895
 8084a38:	20000690 	.word	0x20000690
 8084a3c:	20000cf4 	.word	0x20000cf4
 8084a40:	200006a0 	.word	0x200006a0
 8084a44:	20000638 	.word	0x20000638
 8084a48:	08090736 	.word	0x08090736
 8084a4c:	20000630 	.word	0x20000630
 8084a50:	080918aa 	.word	0x080918aa
 8084a54:	f006 fd16 	bl	808b484 <_ZN6StringD1Ev>
            file_started = 1;
 8084a58:	2301      	movs	r3, #1
 8084a5a:	6023      	str	r3, [r4, #0]
        file.println(csv_output_string);
 8084a5c:	9906      	ldr	r1, [sp, #24]
 8084a5e:	4898      	ldr	r0, [pc, #608]	; (8084cc0 <_Z15outputDataToESPv+0xf68>)
 8084a60:	f006 ff7f 	bl	808b962 <_ZN5Print7printlnEPKc>
        file.close();
 8084a64:	4897      	ldr	r0, [pc, #604]	; (8084cc4 <_Z15outputDataToESPv+0xf6c>)
 8084a66:	f003 ffcb 	bl	8088a00 <_ZN7FatFile5closeEv>
void outputDataToESP(void){
 8084a6a:	2500      	movs	r5, #0
        wordBytes.myWord = DEVICE_id;
 8084a6c:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 8084d10 <_Z15outputDataToESPv+0xfb8>
            floatBytes.myFloat = bme.pressure / 100.0;
 8084a70:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 8084d14 <_Z15outputDataToESPv+0xfbc>
        wordBytes.myWord = gps.get_latitudeWhole();
 8084a74:	4e94      	ldr	r6, [pc, #592]	; (8084cc8 <_Z15outputDataToESPv+0xf70>)
 8084a76:	ac27      	add	r4, sp, #156	; 0x9c
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 8084a78:	2301      	movs	r3, #1
 8084a7a:	7023      	strb	r3, [r4, #0]
        wordBytes.myWord = DEVICE_id;
 8084a7c:	f8d8 3000 	ldr.w	r3, [r8]
        ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084a80:	7063      	strb	r3, [r4, #1]
        ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084a82:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8084a86:	70a3      	strb	r3, [r4, #2]
        ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8084a88:	4b90      	ldr	r3, [pc, #576]	; (8084ccc <_Z15outputDataToESPv+0xf74>)
 8084a8a:	681b      	ldr	r3, [r3, #0]
 8084a8c:	70e3      	strb	r3, [r4, #3]
        if(i == 0){
 8084a8e:	2d00      	cmp	r5, #0
 8084a90:	d15c      	bne.n	8084b4c <_Z15outputDataToESPv+0xdf4>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_MONOXIDE_PACKET_CONSTANT;
 8084a92:	234d      	movs	r3, #77	; 0x4d
 8084a94:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
            floatBytes.myFloat = CO_float;
 8084a98:	4b8d      	ldr	r3, [pc, #564]	; (8084cd0 <_Z15outputDataToESPv+0xf78>)
            floatBytes.myFloat = air_quality_score;
 8084a9a:	6818      	ldr	r0, [r3, #0]
 8084a9c:	e065      	b.n	8084b6a <_Z15outputDataToESPv+0xe12>
        latitude_string = "";
 8084a9e:	498d      	ldr	r1, [pc, #564]	; (8084cd4 <_Z15outputDataToESPv+0xf7c>)
 8084aa0:	a80e      	add	r0, sp, #56	; 0x38
 8084aa2:	f006 fd8b 	bl	808b5bc <_ZN6StringaSEPKc>
 8084aa6:	f7ff bab7 	b.w	8084018 <_Z15outputDataToESPv+0x2c0>
        csv_output_string += String(geolocation_latitude)+ ",";
 8084aaa:	498b      	ldr	r1, [pc, #556]	; (8084cd8 <_Z15outputDataToESPv+0xf80>)
 8084aac:	a81e      	add	r0, sp, #120	; 0x78
 8084aae:	f006 fd33 	bl	808b518 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8084ab2:	a91e      	add	r1, sp, #120	; 0x78
 8084ab4:	a827      	add	r0, sp, #156	; 0x9c
 8084ab6:	f006 fd6e 	bl	808b596 <_ZN6StringC1ERKS_>
 8084aba:	4988      	ldr	r1, [pc, #544]	; (8084cdc <_Z15outputDataToESPv+0xf84>)
 8084abc:	a827      	add	r0, sp, #156	; 0x9c
 8084abe:	f006 fe5a 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8084ac2:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084ac4:	a806      	add	r0, sp, #24
 8084ac6:	f006 fe05 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084aca:	a827      	add	r0, sp, #156	; 0x9c
 8084acc:	f006 fcda 	bl	808b484 <_ZN6StringD1Ev>
 8084ad0:	a81e      	add	r0, sp, #120	; 0x78
 8084ad2:	f006 fcd7 	bl	808b484 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_latitude);
 8084ad6:	4980      	ldr	r1, [pc, #512]	; (8084cd8 <_Z15outputDataToESPv+0xf80>)
 8084ad8:	a827      	add	r0, sp, #156	; 0x9c
 8084ada:	f006 fd1d 	bl	808b518 <_ZN6StringC1EPKc>
 8084ade:	e62c      	b.n	808473a <_Z15outputDataToESPv+0x9e2>
        csv_output_string += String(geolocation_longitude) + ",";
 8084ae0:	497f      	ldr	r1, [pc, #508]	; (8084ce0 <_Z15outputDataToESPv+0xf88>)
 8084ae2:	a81e      	add	r0, sp, #120	; 0x78
 8084ae4:	f006 fd18 	bl	808b518 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8084ae8:	a91e      	add	r1, sp, #120	; 0x78
 8084aea:	a827      	add	r0, sp, #156	; 0x9c
 8084aec:	f006 fd53 	bl	808b596 <_ZN6StringC1ERKS_>
 8084af0:	497a      	ldr	r1, [pc, #488]	; (8084cdc <_Z15outputDataToESPv+0xf84>)
 8084af2:	a827      	add	r0, sp, #156	; 0x9c
 8084af4:	f006 fe3f 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8084af8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084afa:	a806      	add	r0, sp, #24
 8084afc:	f006 fdea 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084b00:	a827      	add	r0, sp, #156	; 0x9c
 8084b02:	f006 fcbf 	bl	808b484 <_ZN6StringD1Ev>
 8084b06:	a81e      	add	r0, sp, #120	; 0x78
 8084b08:	f006 fcbc 	bl	808b484 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_longitude);
 8084b0c:	4974      	ldr	r1, [pc, #464]	; (8084ce0 <_Z15outputDataToESPv+0xf88>)
 8084b0e:	a827      	add	r0, sp, #156	; 0x9c
 8084b10:	f006 fd02 	bl	808b518 <_ZN6StringC1EPKc>
 8084b14:	e65f      	b.n	80847d6 <_Z15outputDataToESPv+0xa7e>
        csv_output_string += String(geolocation_accuracy) + ",";
 8084b16:	4973      	ldr	r1, [pc, #460]	; (8084ce4 <_Z15outputDataToESPv+0xf8c>)
 8084b18:	a81e      	add	r0, sp, #120	; 0x78
 8084b1a:	f006 fcfd 	bl	808b518 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8084b1e:	a91e      	add	r1, sp, #120	; 0x78
 8084b20:	a827      	add	r0, sp, #156	; 0x9c
 8084b22:	f006 fd38 	bl	808b596 <_ZN6StringC1ERKS_>
 8084b26:	496d      	ldr	r1, [pc, #436]	; (8084cdc <_Z15outputDataToESPv+0xf84>)
 8084b28:	a827      	add	r0, sp, #156	; 0x9c
 8084b2a:	f006 fe24 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8084b2e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084b30:	a806      	add	r0, sp, #24
 8084b32:	f006 fdcf 	bl	808b6d4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8084b36:	a827      	add	r0, sp, #156	; 0x9c
 8084b38:	f006 fca4 	bl	808b484 <_ZN6StringD1Ev>
 8084b3c:	a81e      	add	r0, sp, #120	; 0x78
 8084b3e:	f006 fca1 	bl	808b484 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_accuracy);
 8084b42:	4968      	ldr	r1, [pc, #416]	; (8084ce4 <_Z15outputDataToESPv+0xf8c>)
 8084b44:	a827      	add	r0, sp, #156	; 0x9c
 8084b46:	f006 fce7 	bl	808b518 <_ZN6StringC1EPKc>
 8084b4a:	e691      	b.n	8084870 <_Z15outputDataToESPv+0xb18>
        }else if(i == 1){
 8084b4c:	2d01      	cmp	r5, #1
 8084b4e:	d104      	bne.n	8084b5a <_Z15outputDataToESPv+0xe02>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8084b50:	2343      	movs	r3, #67	; 0x43
 8084b52:	f88d 30b6 	strb.w	r3, [sp, #182]	; 0xb6
            floatBytes.myFloat = CO2_float;
 8084b56:	4b64      	ldr	r3, [pc, #400]	; (8084ce8 <_Z15outputDataToESPv+0xf90>)
 8084b58:	e79f      	b.n	8084a9a <_Z15outputDataToESPv+0xd42>
        }else if(i == 2){
 8084b5a:	2d02      	cmp	r5, #2
 8084b5c:	d16e      	bne.n	8084c3c <_Z15outputDataToESPv+0xee4>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8084b5e:	2378      	movs	r3, #120	; 0x78
            floatBytes.myFloat = fuel.getSoC();
 8084b60:	4862      	ldr	r0, [pc, #392]	; (8084cec <_Z15outputDataToESPv+0xf94>)
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8084b62:	f88d 30cc 	strb.w	r3, [sp, #204]	; 0xcc
            floatBytes.myFloat = fuel.getSoC();
 8084b66:	f007 fb4f 	bl	808c208 <_ZN9FuelGauge6getSoCEv>
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8084b6a:	f3c0 2307 	ubfx	r3, r0, #8, #8
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 8084b6e:	7160      	strb	r0, [r4, #5]
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8084b70:	71a3      	strb	r3, [r4, #6]
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8084b72:	f3c0 4307 	ubfx	r3, r0, #16, #8
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8084b76:	f3c0 6007 	ubfx	r0, r0, #24, #8
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8084b7a:	71e3      	strb	r3, [r4, #7]
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8084b7c:	7220      	strb	r0, [r4, #8]
        wordBytes.myWord = gps.get_latitudeWhole();
 8084b7e:	4630      	mov	r0, r6
 8084b80:	f002 fcb5 	bl	80874ee <_ZN3GPS17get_latitudeWholeEv>
        ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084b84:	7260      	strb	r0, [r4, #9]
        ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084b86:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084b8a:	72a0      	strb	r0, [r4, #10]
        wordBytes.myWord = gps.get_latitudeFrac();
 8084b8c:	4630      	mov	r0, r6
 8084b8e:	f002 fcb1 	bl	80874f4 <_ZN3GPS16get_latitudeFracEv>
        ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084b92:	72e0      	strb	r0, [r4, #11]
        ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084b94:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084b98:	7320      	strb	r0, [r4, #12]
        wordBytes.myWord = gps.get_longitudeWhole();
 8084b9a:	4630      	mov	r0, r6
 8084b9c:	f002 fcad 	bl	80874fa <_ZN3GPS18get_longitudeWholeEv>
        ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084ba0:	7360      	strb	r0, [r4, #13]
        ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084ba2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084ba6:	73a0      	strb	r0, [r4, #14]
        wordBytes.myWord = gps.get_longitudeFrac();
 8084ba8:	4630      	mov	r0, r6
 8084baa:	f002 fca9 	bl	8087500 <_ZN3GPS17get_longitudeFracEv>
        ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8084bae:	73e0      	strb	r0, [r4, #15]
        ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084bb0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084bb4:	7420      	strb	r0, [r4, #16]
        int northSouth = gps.get_nsIndicator();
 8084bb6:	4630      	mov	r0, r6
 8084bb8:	f002 fca5 	bl	8087506 <_ZN3GPS15get_nsIndicatorEv>
 8084bbc:	4682      	mov	sl, r0
        int eastWest = gps.get_ewIndicator();
 8084bbe:	4630      	mov	r0, r6
 8084bc0:	f002 fca4 	bl	808750c <_ZN3GPS15get_ewIndicatorEv>
        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8084bc4:	ea4a 0a00 	orr.w	sl, sl, r0
 8084bc8:	f884 a011 	strb.w	sl, [r4, #17]
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8084bcc:	4630      	mov	r0, r6
 8084bce:	f002 fc89 	bl	80874e4 <_ZN3GPS23get_horizontalDillutionEv>
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8084bd2:	787b      	ldrb	r3, [r7, #1]
    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8084bd4:	3501      	adds	r5, #1
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8084bd6:	74e3      	strb	r3, [r4, #19]
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8084bd8:	783b      	ldrb	r3, [r7, #0]
    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8084bda:	2d0b      	cmp	r5, #11
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8084bdc:	7523      	strb	r3, [r4, #20]
        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8084bde:	f04f 0323 	mov.w	r3, #35	; 0x23
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8084be2:	74a0      	strb	r0, [r4, #18]
        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8084be4:	7563      	strb	r3, [r4, #21]
    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8084be6:	f104 0416 	add.w	r4, r4, #22
 8084bea:	f47f af45 	bne.w	8084a78 <_Z15outputDataToESPv+0xd20>
    Serial1.print("$");
 8084bee:	f008 f8bd 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 8084bf2:	493f      	ldr	r1, [pc, #252]	; (8084cf0 <_Z15outputDataToESPv+0xf98>)
 8084bf4:	f006 fea2 	bl	808b93c <_ZN5Print5printEPKc>
    Serial1.write(ble_output_array, NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE);
 8084bf8:	f008 f8b8 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 8084bfc:	6803      	ldr	r3, [r0, #0]
 8084bfe:	22f2      	movs	r2, #242	; 0xf2
 8084c00:	68db      	ldr	r3, [r3, #12]
 8084c02:	a927      	add	r1, sp, #156	; 0x9c
 8084c04:	4798      	blx	r3
    Serial1.print("&");
 8084c06:	f008 f8b1 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 8084c0a:	493a      	ldr	r1, [pc, #232]	; (8084cf4 <_Z15outputDataToESPv+0xf9c>)
 8084c0c:	f006 fe96 	bl	808b93c <_ZN5Print5printEPKc>
    String device_string = "PAM-" + String(DEVICE_id);
 8084c10:	a816      	add	r0, sp, #88	; 0x58
 8084c12:	f006 fc37 	bl	808b484 <_ZN6StringD1Ev>
    String longitude_string = "";
 8084c16:	a812      	add	r0, sp, #72	; 0x48
 8084c18:	f006 fc34 	bl	808b484 <_ZN6StringD1Ev>
    String latitude_string = "";
 8084c1c:	a80e      	add	r0, sp, #56	; 0x38
 8084c1e:	f006 fc31 	bl	808b484 <_ZN6StringD1Ev>
    String sensible_string = "";
 8084c22:	a80a      	add	r0, sp, #40	; 0x28
 8084c24:	f006 fc2e 	bl	808b484 <_ZN6StringD1Ev>
    String csv_output_string = "";
 8084c28:	a806      	add	r0, sp, #24
 8084c2a:	f006 fc2b 	bl	808b484 <_ZN6StringD1Ev>
    String cloud_output_string = "";    //create a clean string
 8084c2e:	a802      	add	r0, sp, #8
 8084c30:	f006 fc28 	bl	808b484 <_ZN6StringD1Ev>
}
 8084c34:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8084c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }else if(i == 3){
 8084c3c:	2d03      	cmp	r5, #3
 8084c3e:	d107      	bne.n	8084c50 <_Z15outputDataToESPv+0xef8>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8084c40:	2372      	movs	r3, #114	; 0x72
 8084c42:	f88d 30e2 	strb.w	r3, [sp, #226]	; 0xe2
            floatBytes.myFloat = PM01Value;
 8084c46:	4b2c      	ldr	r3, [pc, #176]	; (8084cf8 <_Z15outputDataToESPv+0xfa0>)
            floatBytes.myFloat = PM10Value;
 8084c48:	6818      	ldr	r0, [r3, #0]
 8084c4a:	f009 f9bf 	bl	808dfcc <__aeabi_i2f>
 8084c4e:	e78c      	b.n	8084b6a <_Z15outputDataToESPv+0xe12>
        }else if(i == 4){
 8084c50:	2d04      	cmp	r5, #4
 8084c52:	d104      	bne.n	8084c5e <_Z15outputDataToESPv+0xf06>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8084c54:	2352      	movs	r3, #82	; 0x52
 8084c56:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
            floatBytes.myFloat = corrected_PM_25;
 8084c5a:	4b28      	ldr	r3, [pc, #160]	; (8084cfc <_Z15outputDataToESPv+0xfa4>)
 8084c5c:	e71d      	b.n	8084a9a <_Z15outputDataToESPv+0xd42>
        }else if(i == 5){
 8084c5e:	2d05      	cmp	r5, #5
 8084c60:	d104      	bne.n	8084c6c <_Z15outputDataToESPv+0xf14>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 8084c62:	2371      	movs	r3, #113	; 0x71
 8084c64:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
            floatBytes.myFloat = PM10Value;
 8084c68:	4b25      	ldr	r3, [pc, #148]	; (8084d00 <_Z15outputDataToESPv+0xfa8>)
 8084c6a:	e7ed      	b.n	8084c48 <_Z15outputDataToESPv+0xef0>
        }else if(i == 6){
 8084c6c:	2d06      	cmp	r5, #6
 8084c6e:	d105      	bne.n	8084c7c <_Z15outputDataToESPv+0xf24>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = TEMPERATURE_PACKET_CONSTANT;
 8084c70:	2374      	movs	r3, #116	; 0x74
 8084c72:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
            floatBytes.myFloat = readTemperature();
 8084c76:	f7fc fcef 	bl	8081658 <_Z15readTemperaturev>
 8084c7a:	e776      	b.n	8084b6a <_Z15outputDataToESPv+0xe12>
        }else if(i == 7){
 8084c7c:	2d07      	cmp	r5, #7
 8084c7e:	d108      	bne.n	8084c92 <_Z15outputDataToESPv+0xf3a>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PRESSURE_PACKET_CONSTANT;
 8084c80:	2350      	movs	r3, #80	; 0x50
 8084c82:	f88d 313a 	strb.w	r3, [sp, #314]	; 0x13a
            floatBytes.myFloat = bme.pressure / 100.0;
 8084c86:	4b1f      	ldr	r3, [pc, #124]	; (8084d04 <_Z15outputDataToESPv+0xfac>)
 8084c88:	4649      	mov	r1, r9
 8084c8a:	6858      	ldr	r0, [r3, #4]
 8084c8c:	f009 faa6 	bl	808e1dc <__aeabi_fdiv>
 8084c90:	e76b      	b.n	8084b6a <_Z15outputDataToESPv+0xe12>
        }else if(i == 8){
 8084c92:	2d08      	cmp	r5, #8
 8084c94:	d105      	bne.n	8084ca2 <_Z15outputDataToESPv+0xf4a>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = HUMIDITY_PACKET_CONSTANT;
 8084c96:	2368      	movs	r3, #104	; 0x68
 8084c98:	f88d 3150 	strb.w	r3, [sp, #336]	; 0x150
            floatBytes.myFloat = readHumidity();
 8084c9c:	f7fc fd56 	bl	808174c <_Z12readHumidityv>
 8084ca0:	e763      	b.n	8084b6a <_Z15outputDataToESPv+0xe12>
        }else if(i == 9){
 8084ca2:	2d09      	cmp	r5, #9
 8084ca4:	d108      	bne.n	8084cb8 <_Z15outputDataToESPv+0xf60>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = SOUND_PACKET_CONSTANT;
 8084ca6:	2373      	movs	r3, #115	; 0x73
 8084ca8:	f88d 3166 	strb.w	r3, [sp, #358]	; 0x166
            floatBytes.myFloat = sound_average;
 8084cac:	4b16      	ldr	r3, [pc, #88]	; (8084d08 <_Z15outputDataToESPv+0xfb0>)
 8084cae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8084cb2:	f009 f881 	bl	808ddb8 <__aeabi_d2f>
 8084cb6:	e758      	b.n	8084b6a <_Z15outputDataToESPv+0xe12>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
 8084cb8:	2367      	movs	r3, #103	; 0x67
 8084cba:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = air_quality_score;
 8084cbc:	4b13      	ldr	r3, [pc, #76]	; (8084d0c <_Z15outputDataToESPv+0xfb4>)
 8084cbe:	e6ec      	b.n	8084a9a <_Z15outputDataToESPv+0xd42>
 8084cc0:	20000630 	.word	0x20000630
 8084cc4:	20000638 	.word	0x20000638
 8084cc8:	200006b8 	.word	0x200006b8
 8084ccc:	200007f4 	.word	0x200007f4
 8084cd0:	200002d8 	.word	0x200002d8
 8084cd4:	08092ce2 	.word	0x08092ce2
 8084cd8:	200000aa 	.word	0x200000aa
 8084cdc:	08092a26 	.word	0x08092a26
 8084ce0:	200000b6 	.word	0x200000b6
 8084ce4:	200000a4 	.word	0x200000a4
 8084ce8:	200002c4 	.word	0x200002c4
 8084cec:	200006a4 	.word	0x200006a4
 8084cf0:	080908e6 	.word	0x080908e6
 8084cf4:	0809192d 	.word	0x0809192d
 8084cf8:	200002f4 	.word	0x200002f4
 8084cfc:	20000624 	.word	0x20000624
 8084d00:	200002f8 	.word	0x200002f8
 8084d04:	20000584 	.word	0x20000584
 8084d08:	20000c78 	.word	0x20000c78
 8084d0c:	2000057c 	.word	0x2000057c
 8084d10:	20000080 	.word	0x20000080
 8084d14:	42c80000 	.word	0x42c80000

08084d18 <_ZN5Print5printIiLi0EEEjT_i>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 8084d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084d1c:	4607      	mov	r7, r0
 8084d1e:	460c      	mov	r4, r1
{
    if (base == 0) {
 8084d20:	4615      	mov	r5, r2
 8084d22:	b92a      	cbnz	r2, 8084d30 <_ZN5Print5printIiLi0EEEjT_i+0x18>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 8084d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(n);
 8084d28:	6803      	ldr	r3, [r0, #0]
 8084d2a:	b2c9      	uxtb	r1, r1
 8084d2c:	689b      	ldr	r3, [r3, #8]
 8084d2e:	4718      	bx	r3
        if (n < 0 && base == 10) {
 8084d30:	2900      	cmp	r1, #0
 8084d32:	da0d      	bge.n	8084d50 <_ZN5Print5printIiLi0EEEjT_i+0x38>
 8084d34:	2a0a      	cmp	r2, #10
 8084d36:	d10b      	bne.n	8084d50 <_ZN5Print5printIiLi0EEEjT_i+0x38>
            t = print('-');
 8084d38:	212d      	movs	r1, #45	; 0x2d
 8084d3a:	f006 fe03 	bl	808b944 <_ZN5Print5printEc>
 8084d3e:	4606      	mov	r6, r0
            val = -n;
 8084d40:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8084d42:	4638      	mov	r0, r7
 8084d44:	b2ea      	uxtb	r2, r5
 8084d46:	f006 fe20 	bl	808b98a <_ZN5Print11printNumberEmh>
}
 8084d4a:	4430      	add	r0, r6
 8084d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
 8084d50:	4621      	mov	r1, r4
        size_t t = 0;
 8084d52:	2600      	movs	r6, #0
 8084d54:	e7f5      	b.n	8084d42 <_ZN5Print5printIiLi0EEEjT_i+0x2a>

08084d56 <_ZN5Print7printlnIiLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8084d56:	b538      	push	{r3, r4, r5, lr}
 8084d58:	4605      	mov	r5, r0
        size_t n = print(b, base);
 8084d5a:	f7ff ffdd 	bl	8084d18 <_ZN5Print5printIiLi0EEEjT_i>
 8084d5e:	4604      	mov	r4, r0
        n += println();
 8084d60:	4628      	mov	r0, r5
 8084d62:	f006 fdf2 	bl	808b94a <_ZN5Print7printlnEv>
    }
 8084d66:	4420      	add	r0, r4
 8084d68:	bd38      	pop	{r3, r4, r5, pc}
 8084d6a:	0000      	movs	r0, r0
 8084d6c:	0000      	movs	r0, r0
	...

08084d70 <_Z15getEspOzoneDatav>:
float getEspOzoneData(void){
 8084d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084d74:	b0a9      	sub	sp, #164	; 0xa4
    String getOzoneData = "Z&";
 8084d76:	498a      	ldr	r1, [pc, #552]	; (8084fa0 <_Z15getEspOzoneDatav+0x230>)
 8084d78:	4668      	mov	r0, sp
 8084d7a:	f006 fbcd 	bl	808b518 <_ZN6StringC1EPKc>
    if(debugging_enabled){
 8084d7e:	4c89      	ldr	r4, [pc, #548]	; (8084fa4 <_Z15getEspOzoneDatav+0x234>)
    String recievedData = " ";
 8084d80:	4989      	ldr	r1, [pc, #548]	; (8084fa8 <_Z15getEspOzoneDatav+0x238>)
 8084d82:	a804      	add	r0, sp, #16
 8084d84:	f006 fbc8 	bl	808b518 <_ZN6StringC1EPKc>
    Serial1.setTimeout(3000);
 8084d88:	f007 fff0 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 8084d8c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8084d90:	f006 ff3a 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    if(debugging_enabled){
 8084d94:	6823      	ldr	r3, [r4, #0]
 8084d96:	b173      	cbz	r3, 8084db6 <_Z15getEspOzoneDatav+0x46>
        Serial.println("Getting ozone data from esp");
 8084d98:	f007 fe9e 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084d9c:	4983      	ldr	r1, [pc, #524]	; (8084fac <_Z15getEspOzoneDatav+0x23c>)
 8084d9e:	f006 fde0 	bl	808b962 <_ZN5Print7printlnEPKc>
        writeLogFile("Getting ozone data from esp");
 8084da2:	4982      	ldr	r1, [pc, #520]	; (8084fac <_Z15getEspOzoneDatav+0x23c>)
 8084da4:	a80c      	add	r0, sp, #48	; 0x30
 8084da6:	f006 fbb7 	bl	808b518 <_ZN6StringC1EPKc>
 8084daa:	a80c      	add	r0, sp, #48	; 0x30
 8084dac:	f7fc ffc0 	bl	8081d30 <_Z12writeLogFile6String>
 8084db0:	a80c      	add	r0, sp, #48	; 0x30
 8084db2:	f006 fb67 	bl	808b484 <_ZN6StringD1Ev>
      if(counterIndex > MAX_COUNTER_INDEX){
 8084db6:	f20f 19e0 	addw	r9, pc, #480	; 0x1e0
 8084dba:	e9d9 8900 	ldrd	r8, r9, [r9]
    Serial1.print(getOzoneData);
 8084dbe:	f007 ffd5 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 8084dc2:	9900      	ldr	r1, [sp, #0]
 8084dc4:	f006 fdba 	bl	808b93c <_ZN5Print5printEPKc>
    double counterIndex = 0;
 8084dc8:	2600      	movs	r6, #0
 8084dca:	2700      	movs	r7, #0
    bool timeOut = false;
 8084dcc:	2500      	movs	r5, #0
      counterIndex++;
 8084dce:	f04f 0a00 	mov.w	sl, #0
 8084dd2:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8084fcc <_Z15getEspOzoneDatav+0x25c>
    while(!Serial1.available() && timeOut == false){
 8084dd6:	f007 ffc9 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 8084dda:	6803      	ldr	r3, [r0, #0]
 8084ddc:	691b      	ldr	r3, [r3, #16]
 8084dde:	4798      	blx	r3
 8084de0:	b9c8      	cbnz	r0, 8084e16 <_Z15getEspOzoneDatav+0xa6>
 8084de2:	b9c5      	cbnz	r5, 8084e16 <_Z15getEspOzoneDatav+0xa6>
      counterIndex++;
 8084de4:	4652      	mov	r2, sl
 8084de6:	465b      	mov	r3, fp
 8084de8:	4630      	mov	r0, r6
 8084dea:	4639      	mov	r1, r7
 8084dec:	f008 fb36 	bl	808d45c <__adddf3>
      if(counterIndex > MAX_COUNTER_INDEX){
 8084df0:	4642      	mov	r2, r8
 8084df2:	464b      	mov	r3, r9
      counterIndex++;
 8084df4:	4606      	mov	r6, r0
 8084df6:	460f      	mov	r7, r1
      if(counterIndex > MAX_COUNTER_INDEX){
 8084df8:	f008 ff76 	bl	808dce8 <__aeabi_dcmpgt>
 8084dfc:	2800      	cmp	r0, #0
 8084dfe:	d0ea      	beq.n	8084dd6 <_Z15getEspOzoneDatav+0x66>
        if(debugging_enabled){
 8084e00:	6823      	ldr	r3, [r4, #0]
 8084e02:	b133      	cbz	r3, 8084e12 <_Z15getEspOzoneDatav+0xa2>
          Serial.printf("Unable to get ozone data from ESP, counter index: %1.1f\n\r", counterIndex);
 8084e04:	f007 fe68 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084e08:	4632      	mov	r2, r6
 8084e0a:	463b      	mov	r3, r7
 8084e0c:	4968      	ldr	r1, [pc, #416]	; (8084fb0 <_Z15getEspOzoneDatav+0x240>)
 8084e0e:	f7fb ff47 	bl	8080ca0 <_ZN5Print6printfEPKcz>
        timeOut = true;
 8084e12:	2501      	movs	r5, #1
 8084e14:	e7df      	b.n	8084dd6 <_Z15getEspOzoneDatav+0x66>
    delay(10);
 8084e16:	200a      	movs	r0, #10
 8084e18:	f007 f96c 	bl	808c0f4 <delay>
    recievedData = Serial1.readString();
 8084e1c:	f007 ffa6 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 8084e20:	4601      	mov	r1, r0
 8084e22:	a80c      	add	r0, sp, #48	; 0x30
 8084e24:	f006 ff46 	bl	808bcb4 <_ZN6Stream10readStringEv>
 8084e28:	a90c      	add	r1, sp, #48	; 0x30
 8084e2a:	a804      	add	r0, sp, #16
 8084e2c:	f006 fbbe 	bl	808b5ac <_ZN6StringaSEOS_>
 8084e30:	a80c      	add	r0, sp, #48	; 0x30
 8084e32:	f006 fb27 	bl	808b484 <_ZN6StringD1Ev>
    if(debugging_enabled)
 8084e36:	6823      	ldr	r3, [r4, #0]
 8084e38:	b19b      	cbz	r3, 8084e62 <_Z15getEspOzoneDatav+0xf2>
        Serial.print("RECIEVED DATA FROM ESP: ");
 8084e3a:	f007 fe4d 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084e3e:	495d      	ldr	r1, [pc, #372]	; (8084fb4 <_Z15getEspOzoneDatav+0x244>)
 8084e40:	f006 fd7c 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(recievedData);
 8084e44:	f007 fe48 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084e48:	9904      	ldr	r1, [sp, #16]
 8084e4a:	f006 fd8a 	bl	808b962 <_ZN5Print7printlnEPKc>
        writeLogFile("Recieved data from ESP");
 8084e4e:	495a      	ldr	r1, [pc, #360]	; (8084fb8 <_Z15getEspOzoneDatav+0x248>)
 8084e50:	a80c      	add	r0, sp, #48	; 0x30
 8084e52:	f006 fb61 	bl	808b518 <_ZN6StringC1EPKc>
 8084e56:	a80c      	add	r0, sp, #48	; 0x30
 8084e58:	f7fc ff6a 	bl	8081d30 <_Z12writeLogFile6String>
 8084e5c:	a80c      	add	r0, sp, #48	; 0x30
 8084e5e:	f006 fb11 	bl	808b484 <_ZN6StringD1Ev>
    bool timeOut = false;
 8084e62:	2500      	movs	r5, #0
    String stringArray[NUMBER_OF_FEILDS];
 8084e64:	4e55      	ldr	r6, [pc, #340]	; (8084fbc <_Z15getEspOzoneDatav+0x24c>)
 8084e66:	ab0c      	add	r3, sp, #48	; 0x30
 8084e68:	1958      	adds	r0, r3, r5
 8084e6a:	4631      	mov	r1, r6
 8084e6c:	3510      	adds	r5, #16
 8084e6e:	f006 fb53 	bl	808b518 <_ZN6StringC1EPKc>
 8084e72:	2d70      	cmp	r5, #112	; 0x70
 8084e74:	d1f7      	bne.n	8084e66 <_Z15getEspOzoneDatav+0xf6>
    int from_index = 0;
 8084e76:	2600      	movs	r6, #0
    int comma_count = 0;
 8084e78:	4635      	mov	r5, r6
          Serial.print("comma index: ");
 8084e7a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8084fd0 <_Z15getEspOzoneDatav+0x260>
                Serial.printf("String[%d]:", comma_count);
 8084e7e:	f8df a144 	ldr.w	sl, [pc, #324]	; 8084fc4 <_Z15getEspOzoneDatav+0x254>
        index_of_comma = recievedData.indexOf(',', from_index);
 8084e82:	4632      	mov	r2, r6
 8084e84:	212c      	movs	r1, #44	; 0x2c
 8084e86:	a804      	add	r0, sp, #16
 8084e88:	f006 fcd9 	bl	808b83e <_ZNK6String7indexOfEcj>
        if(debugging_enabled){
 8084e8c:	6823      	ldr	r3, [r4, #0]
        index_of_comma = recievedData.indexOf(',', from_index);
 8084e8e:	4607      	mov	r7, r0
        if(debugging_enabled){
 8084e90:	b153      	cbz	r3, 8084ea8 <_Z15getEspOzoneDatav+0x138>
          Serial.print("comma index: ");
 8084e92:	f007 fe21 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084e96:	4649      	mov	r1, r9
 8084e98:	f006 fd50 	bl	808b93c <_ZN5Print5printEPKc>
          Serial.println(index_of_comma);
 8084e9c:	f007 fe1c 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084ea0:	220a      	movs	r2, #10
 8084ea2:	4639      	mov	r1, r7
 8084ea4:	f7ff ff57 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        if(index_of_comma > 0){
 8084ea8:	2f00      	cmp	r7, #0
 8084eaa:	dd41      	ble.n	8084f30 <_Z15getEspOzoneDatav+0x1c0>
            stringArray[comma_count] = recievedData.substring(from_index, index_of_comma);
 8084eac:	4632      	mov	r2, r6
 8084eae:	463b      	mov	r3, r7
 8084eb0:	a904      	add	r1, sp, #16
 8084eb2:	a808      	add	r0, sp, #32
 8084eb4:	f006 fcd2 	bl	808b85c <_ZNK6String9substringEjj>
 8084eb8:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8084ebc:	ab0c      	add	r3, sp, #48	; 0x30
 8084ebe:	eb03 0008 	add.w	r0, r3, r8
 8084ec2:	a908      	add	r1, sp, #32
 8084ec4:	f006 fb72 	bl	808b5ac <_ZN6StringaSEOS_>
 8084ec8:	a808      	add	r0, sp, #32
 8084eca:	f006 fadb 	bl	808b484 <_ZN6StringD1Ev>
            if(debugging_enabled){
 8084ece:	6823      	ldr	r3, [r4, #0]
 8084ed0:	b163      	cbz	r3, 8084eec <_Z15getEspOzoneDatav+0x17c>
                Serial.printf("String[%d]:", comma_count);
 8084ed2:	f007 fe01 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084ed6:	4651      	mov	r1, sl
 8084ed8:	462a      	mov	r2, r5
 8084eda:	f7fb fee1 	bl	8080ca0 <_ZN5Print6printfEPKcz>
                Serial.println(stringArray[comma_count]);
 8084ede:	f007 fdfb 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084ee2:	ab0c      	add	r3, sp, #48	; 0x30
 8084ee4:	f853 1008 	ldr.w	r1, [r3, r8]
 8084ee8:	f006 fd3b 	bl	808b962 <_ZN5Print7printlnEPKc>
            comma_count++;
 8084eec:	3501      	adds	r5, #1
    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
 8084eee:	2d07      	cmp	r5, #7
            from_index += 1;
 8084ef0:	f107 0601 	add.w	r6, r7, #1
    while(still_searching_for_commas && comma_count < NUMBER_OF_FEILDS){
 8084ef4:	d1c5      	bne.n	8084e82 <_Z15getEspOzoneDatav+0x112>
        ozone_value = stringArray[1].toFloat();
 8084ef6:	a810      	add	r0, sp, #64	; 0x40
 8084ef8:	f006 fcd7 	bl	808b8aa <_ZNK6String7toFloatEv>
        if(debugging_enabled){
 8084efc:	6823      	ldr	r3, [r4, #0]
        ozone_value = stringArray[1].toFloat();
 8084efe:	4605      	mov	r5, r0
        if(debugging_enabled){
 8084f00:	b123      	cbz	r3, 8084f0c <_Z15getEspOzoneDatav+0x19c>
            Serial.println("using string array index 1 due to logging");
 8084f02:	f007 fde9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084f06:	492e      	ldr	r1, [pc, #184]	; (8084fc0 <_Z15getEspOzoneDatav+0x250>)
            Serial.println("using string array index 0, not logging");
 8084f08:	f006 fd2b 	bl	808b962 <_ZN5Print7printlnEPKc>
    float ozone_value = 0.0;
 8084f0c:	2406      	movs	r4, #6
    String stringArray[NUMBER_OF_FEILDS];
 8084f0e:	ab0c      	add	r3, sp, #48	; 0x30
 8084f10:	eb03 1004 	add.w	r0, r3, r4, lsl #4
 8084f14:	f006 fab6 	bl	808b484 <_ZN6StringD1Ev>
 8084f18:	3c01      	subs	r4, #1
 8084f1a:	d2f8      	bcs.n	8084f0e <_Z15getEspOzoneDatav+0x19e>
    String recievedData = " ";
 8084f1c:	a804      	add	r0, sp, #16
 8084f1e:	f006 fab1 	bl	808b484 <_ZN6StringD1Ev>
    String getOzoneData = "Z&";
 8084f22:	4668      	mov	r0, sp
 8084f24:	f006 faae 	bl	808b484 <_ZN6StringD1Ev>
}
 8084f28:	4628      	mov	r0, r5
 8084f2a:	b029      	add	sp, #164	; 0xa4
 8084f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int index_of_cr = recievedData.indexOf('\r', from_index);
 8084f30:	4632      	mov	r2, r6
 8084f32:	210d      	movs	r1, #13
 8084f34:	a804      	add	r0, sp, #16
 8084f36:	f006 fc82 	bl	808b83e <_ZNK6String7indexOfEcj>
            if(index_of_cr > 0){
 8084f3a:	1e03      	subs	r3, r0, #0
 8084f3c:	dd1c      	ble.n	8084f78 <_Z15getEspOzoneDatav+0x208>
                stringArray[comma_count] = recievedData.substring(from_index, index_of_cr);
 8084f3e:	4632      	mov	r2, r6
 8084f40:	a904      	add	r1, sp, #16
 8084f42:	a808      	add	r0, sp, #32
 8084f44:	f006 fc8a 	bl	808b85c <_ZNK6String9substringEjj>
 8084f48:	ab0c      	add	r3, sp, #48	; 0x30
 8084f4a:	eb03 1005 	add.w	r0, r3, r5, lsl #4
 8084f4e:	a908      	add	r1, sp, #32
 8084f50:	f006 fb2c 	bl	808b5ac <_ZN6StringaSEOS_>
 8084f54:	a808      	add	r0, sp, #32
 8084f56:	f006 fa95 	bl	808b484 <_ZN6StringD1Ev>
                if(debugging_enabled){
 8084f5a:	6823      	ldr	r3, [r4, #0]
                stringArray[comma_count] = recievedData.substring(from_index, index_of_cr);
 8084f5c:	012f      	lsls	r7, r5, #4
                if(debugging_enabled){
 8084f5e:	b15b      	cbz	r3, 8084f78 <_Z15getEspOzoneDatav+0x208>
                    Serial.printf("String[%d]:", comma_count);
 8084f60:	f007 fdba 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084f64:	4917      	ldr	r1, [pc, #92]	; (8084fc4 <_Z15getEspOzoneDatav+0x254>)
 8084f66:	462a      	mov	r2, r5
 8084f68:	f7fb fe9a 	bl	8080ca0 <_ZN5Print6printfEPKcz>
                    Serial.println(stringArray[comma_count]);
 8084f6c:	f007 fdb4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084f70:	ab0c      	add	r3, sp, #48	; 0x30
 8084f72:	59d9      	ldr	r1, [r3, r7]
 8084f74:	f006 fcf5 	bl	808b962 <_ZN5Print7printlnEPKc>
    }else if(comma_count == (NUMBER_OF_FIELDS_LOGGING - 1)){
 8084f78:	2d06      	cmp	r5, #6
 8084f7a:	d001      	beq.n	8084f80 <_Z15getEspOzoneDatav+0x210>
    float ozone_value = 0.0;
 8084f7c:	2500      	movs	r5, #0
 8084f7e:	e7c5      	b.n	8084f0c <_Z15getEspOzoneDatav+0x19c>
        ozone_value = stringArray[0].toFloat();
 8084f80:	a80c      	add	r0, sp, #48	; 0x30
 8084f82:	f006 fc92 	bl	808b8aa <_ZNK6String7toFloatEv>
        if(debugging_enabled){
 8084f86:	6823      	ldr	r3, [r4, #0]
        ozone_value = stringArray[0].toFloat();
 8084f88:	4605      	mov	r5, r0
        if(debugging_enabled){
 8084f8a:	2b00      	cmp	r3, #0
 8084f8c:	d0be      	beq.n	8084f0c <_Z15getEspOzoneDatav+0x19c>
            Serial.println("using string array index 0, not logging");
 8084f8e:	f007 fda3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084f92:	490d      	ldr	r1, [pc, #52]	; (8084fc8 <_Z15getEspOzoneDatav+0x258>)
 8084f94:	e7b8      	b.n	8084f08 <_Z15getEspOzoneDatav+0x198>
 8084f96:	bf00      	nop
 8084f98:	00000000 	.word	0x00000000
 8084f9c:	40cd4c00 	.word	0x40cd4c00
 8084fa0:	0809192c 	.word	0x0809192c
 8084fa4:	20000628 	.word	0x20000628
 8084fa8:	08092634 	.word	0x08092634
 8084fac:	0809192f 	.word	0x0809192f
 8084fb0:	0809194b 	.word	0x0809194b
 8084fb4:	08091985 	.word	0x08091985
 8084fb8:	0809199e 	.word	0x0809199e
 8084fbc:	08092ce2 	.word	0x08092ce2
 8084fc0:	080919cf 	.word	0x080919cf
 8084fc4:	080919c3 	.word	0x080919c3
 8084fc8:	080919f9 	.word	0x080919f9
 8084fcc:	3ff00000 	.word	0x3ff00000
 8084fd0:	080919b5 	.word	0x080919b5
 8084fd4:	00000000 	.word	0x00000000

08084fd8 <_Z9readOzonev>:
void readOzone(void){
 8084fd8:	b538      	push	{r3, r4, r5, lr}
    if(ozone_analog_enabled){
 8084fda:	4b21      	ldr	r3, [pc, #132]	; (8085060 <_Z9readOzonev+0x88>)
 8084fdc:	4d21      	ldr	r5, [pc, #132]	; (8085064 <_Z9readOzonev+0x8c>)
 8084fde:	681b      	ldr	r3, [r3, #0]
 8084fe0:	b38b      	cbz	r3, 8085046 <_Z9readOzonev+0x6e>
        tempValue = analogRead(A0);  // read the analogPin for ozone voltage
 8084fe2:	200a      	movs	r0, #10
 8084fe4:	f008 f969 	bl	808d2ba <analogRead>
        if(debugging_enabled){
 8084fe8:	4b1f      	ldr	r3, [pc, #124]	; (8085068 <_Z9readOzonev+0x90>)
        tempValue = analogRead(A0);  // read the analogPin for ozone voltage
 8084fea:	4604      	mov	r4, r0
        if(debugging_enabled){
 8084fec:	681b      	ldr	r3, [r3, #0]
 8084fee:	b153      	cbz	r3, 8085006 <_Z9readOzonev+0x2e>
            Serial.print("Ozone Raw analog in:");
 8084ff0:	f007 fd72 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084ff4:	491d      	ldr	r1, [pc, #116]	; (808506c <_Z9readOzonev+0x94>)
 8084ff6:	f006 fca1 	bl	808b93c <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8084ffa:	f007 fd6d 	bl	808cad8 <_Z16_fetch_usbserialv>
 8084ffe:	220a      	movs	r2, #10
 8085000:	4621      	mov	r1, r4
 8085002:	f7ff fea8 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        O3_float = tempValue;
 8085006:	4620      	mov	r0, r4
 8085008:	f008 ffe0 	bl	808dfcc <__aeabi_i2f>
        O3_float *= VOLTS_PER_UNIT;           //convert digital reading to voltage
 808500c:	f008 fb84 	bl	808d718 <__aeabi_f2d>
 8085010:	a30f      	add	r3, pc, #60	; (adr r3, 8085050 <_Z9readOzonev+0x78>)
 8085012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085016:	f008 fbd7 	bl	808d7c8 <__aeabi_dmul>
 808501a:	f008 fecd 	bl	808ddb8 <__aeabi_d2f>
        O3_float /= VOLTS_PER_PPB;            //convert voltage to ppb of ozone
 808501e:	f008 fb7b 	bl	808d718 <__aeabi_f2d>
 8085022:	a30d      	add	r3, pc, #52	; (adr r3, 8085058 <_Z9readOzonev+0x80>)
 8085024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085028:	f008 fcf8 	bl	808da1c <__aeabi_ddiv>
 808502c:	f008 fec4 	bl	808ddb8 <__aeabi_d2f>
        O3_float += ozone_offset;
 8085030:	4b0f      	ldr	r3, [pc, #60]	; (8085070 <_Z9readOzonev+0x98>)
        O3_float /= VOLTS_PER_PPB;            //convert voltage to ppb of ozone
 8085032:	4604      	mov	r4, r0
        O3_float += ozone_offset;
 8085034:	6818      	ldr	r0, [r3, #0]
 8085036:	f008 ffc9 	bl	808dfcc <__aeabi_i2f>
 808503a:	4601      	mov	r1, r0
 808503c:	4620      	mov	r0, r4
 808503e:	f008 ff11 	bl	808de64 <__addsf3>
        O3_float = getEspOzoneData();
 8085042:	6028      	str	r0, [r5, #0]
}
 8085044:	bd38      	pop	{r3, r4, r5, pc}
        O3_float = getEspOzoneData();
 8085046:	f7ff fe93 	bl	8084d70 <_Z15getEspOzoneDatav>
 808504a:	e7fa      	b.n	8085042 <_Z9readOzonev+0x6a>
 808504c:	f3af 8000 	nop.w
 8085050:	eb1c432d 	.word	0xeb1c432d
 8085054:	3f4a36e2 	.word	0x3f4a36e2
 8085058:	9999999a 	.word	0x9999999a
 808505c:	3f899999 	.word	0x3f899999
 8085060:	2000079c 	.word	0x2000079c
 8085064:	200002ec 	.word	0x200002ec
 8085068:	20000628 	.word	0x20000628
 808506c:	08091a21 	.word	0x08091a21
 8085070:	200007a4 	.word	0x200007a4

08085074 <_Z17serialGetDeviceIdv>:
void serialGetDeviceId(void){
 8085074:	b530      	push	{r4, r5, lr}
 8085076:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8085078:	f007 fd2e 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.println(DEVICE_id);
 808507c:	4d35      	ldr	r5, [pc, #212]	; (8085154 <_Z17serialGetDeviceIdv+0xe0>)
    Serial.println();
 808507e:	f006 fc64 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8085082:	f007 fd29 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085086:	4934      	ldr	r1, [pc, #208]	; (8085158 <_Z17serialGetDeviceIdv+0xe4>)
 8085088:	f006 fc58 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 808508c:	f007 fd24 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085090:	220a      	movs	r2, #10
 8085092:	6829      	ldr	r1, [r5, #0]
 8085094:	f7ff fe5f 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the ID");
 8085098:	f007 fd1e 	bl	808cad8 <_Z16_fetch_usbserialv>
 808509c:	492f      	ldr	r1, [pc, #188]	; (808515c <_Z17serialGetDeviceIdv+0xe8>)
 808509e:	f006 fc60 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80850a2:	f007 fd19 	bl	808cad8 <_Z16_fetch_usbserialv>
 80850a6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80850aa:	f006 fdad 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80850ae:	f007 fd13 	bl	808cad8 <_Z16_fetch_usbserialv>
 80850b2:	220d      	movs	r2, #13
 80850b4:	4601      	mov	r1, r0
 80850b6:	4668      	mov	r0, sp
 80850b8:	f006 fe10 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80850bc:	4668      	mov	r0, sp
 80850be:	4928      	ldr	r1, [pc, #160]	; (8085160 <_Z17serialGetDeviceIdv+0xec>)
 80850c0:	f006 fb81 	bl	808b7c6 <_ZNK6String6equalsEPKc>
    if(tempString == "bould"){
 80850c4:	2800      	cmp	r0, #0
 80850c6:	d03e      	beq.n	8085146 <_Z17serialGetDeviceIdv+0xd2>
        Serial.println("Password correct!");
 80850c8:	f007 fd06 	bl	808cad8 <_Z16_fetch_usbserialv>
 80850cc:	4925      	ldr	r1, [pc, #148]	; (8085164 <_Z17serialGetDeviceIdv+0xf0>)
 80850ce:	f006 fc48 	bl	808b962 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 80850d2:	f007 fd01 	bl	808cad8 <_Z16_fetch_usbserialv>
 80850d6:	4924      	ldr	r1, [pc, #144]	; (8085168 <_Z17serialGetDeviceIdv+0xf4>)
 80850d8:	f006 fc43 	bl	808b962 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 80850dc:	f007 fcfc 	bl	808cad8 <_Z16_fetch_usbserialv>
 80850e0:	220d      	movs	r2, #13
 80850e2:	4601      	mov	r1, r0
 80850e4:	a804      	add	r0, sp, #16
 80850e6:	f006 fdf9 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 80850ea:	a804      	add	r0, sp, #16
 80850ec:	f006 fbd8 	bl	808b8a0 <_ZNK6String5toIntEv>
 80850f0:	4604      	mov	r4, r0
        Serial.println("");
 80850f2:	f007 fcf1 	bl	808cad8 <_Z16_fetch_usbserialv>
 80850f6:	491d      	ldr	r1, [pc, #116]	; (808516c <_Z17serialGetDeviceIdv+0xf8>)
 80850f8:	f006 fc33 	bl	808b962 <_ZN5Print7printlnEPKc>
        if(tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER){
 80850fc:	f242 730c 	movw	r3, #9996	; 0x270c
 8085100:	1ea2      	subs	r2, r4, #2
 8085102:	429a      	cmp	r2, r3
 8085104:	d819      	bhi.n	808513a <_Z17serialGetDeviceIdv+0xc6>
            Serial.print("\n\rNew Device ID:");
 8085106:	f007 fce7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808510a:	4919      	ldr	r1, [pc, #100]	; (8085170 <_Z17serialGetDeviceIdv+0xfc>)
 808510c:	f006 fc16 	bl	808b93c <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8085110:	f007 fce2 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085114:	4621      	mov	r1, r4
 8085116:	220a      	movs	r2, #10
 8085118:	f7ff fe1d 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
            DEVICE_id = tempValue;
 808511c:	602c      	str	r4, [r5, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 808511e:	f008 f8e3 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8085122:	4629      	mov	r1, r5
 8085124:	2000      	movs	r0, #0
 8085126:	f7fb fd89 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 808512a:	a804      	add	r0, sp, #16
 808512c:	f006 f9aa 	bl	808b484 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8085130:	4668      	mov	r0, sp
 8085132:	f006 f9a7 	bl	808b484 <_ZN6StringD1Ev>
}
 8085136:	b009      	add	sp, #36	; 0x24
 8085138:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 808513a:	f007 fccd 	bl	808cad8 <_Z16_fetch_usbserialv>
 808513e:	490d      	ldr	r1, [pc, #52]	; (8085174 <_Z17serialGetDeviceIdv+0x100>)
 8085140:	f006 fc0f 	bl	808b962 <_ZN5Print7printlnEPKc>
 8085144:	e7f1      	b.n	808512a <_Z17serialGetDeviceIdv+0xb6>
        Serial.println("\n\rIncorrect password!");
 8085146:	f007 fcc7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808514a:	490b      	ldr	r1, [pc, #44]	; (8085178 <_Z17serialGetDeviceIdv+0x104>)
 808514c:	f006 fc09 	bl	808b962 <_ZN5Print7printlnEPKc>
 8085150:	e7ee      	b.n	8085130 <_Z17serialGetDeviceIdv+0xbc>
 8085152:	bf00      	nop
 8085154:	20000080 	.word	0x20000080
 8085158:	08091a36 	.word	0x08091a36
 808515c:	08091a49 	.word	0x08091a49
 8085160:	080909cd 	.word	0x080909cd
 8085164:	080909d3 	.word	0x080909d3
 8085168:	08091a79 	.word	0x08091a79
 808516c:	08092ce2 	.word	0x08092ce2
 8085170:	08091a8e 	.word	0x08091a8e
 8085174:	08090c04 	.word	0x08090c04
 8085178:	08090af8 	.word	0x08090af8

0808517c <_Z13serialGetZonev>:
void serialGetZone(void){
 808517c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 808517e:	f007 fcab 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085182:	491f      	ldr	r1, [pc, #124]	; (8085200 <_Z13serialGetZonev+0x84>)
 8085184:	f006 fbed 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8085188:	f007 fca6 	bl	808cad8 <_Z16_fetch_usbserialv>
 808518c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085190:	f006 fd3a 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085194:	f007 fca0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085198:	220d      	movs	r2, #13
 808519a:	4601      	mov	r1, r0
 808519c:	a802      	add	r0, sp, #8
 808519e:	f006 fd9d 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80851a2:	a802      	add	r0, sp, #8
 80851a4:	f006 fb7c 	bl	808b8a0 <_ZNK6String5toIntEv>
 80851a8:	9001      	str	r0, [sp, #4]
    Serial.println("");
 80851aa:	f007 fc95 	bl	808cad8 <_Z16_fetch_usbserialv>
 80851ae:	4915      	ldr	r1, [pc, #84]	; (8085204 <_Z13serialGetZonev+0x88>)
 80851b0:	f006 fbd7 	bl	808b962 <_ZN5Print7printlnEPKc>
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
 80851b4:	9801      	ldr	r0, [sp, #4]
 80851b6:	f100 030c 	add.w	r3, r0, #12
 80851ba:	2b1a      	cmp	r3, #26
 80851bc:	d81a      	bhi.n	80851f4 <_Z13serialGetZonev+0x78>
        Time.zone(tempValue);
 80851be:	f008 ff05 	bl	808dfcc <__aeabi_i2f>
 80851c2:	f006 fe01 	bl	808bdc8 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
 80851c6:	f007 fc87 	bl	808cad8 <_Z16_fetch_usbserialv>
 80851ca:	490f      	ldr	r1, [pc, #60]	; (8085208 <_Z13serialGetZonev+0x8c>)
 80851cc:	f006 fbb6 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80851d0:	f007 fc82 	bl	808cad8 <_Z16_fetch_usbserialv>
 80851d4:	9901      	ldr	r1, [sp, #4]
 80851d6:	220a      	movs	r2, #10
 80851d8:	f7ff fdbd 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 80851dc:	f008 f884 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80851e0:	2054      	movs	r0, #84	; 0x54
 80851e2:	a901      	add	r1, sp, #4
 80851e4:	f7fb fd2a 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80851e8:	a802      	add	r0, sp, #8
 80851ea:	f006 f94b 	bl	808b484 <_ZN6StringD1Ev>
}
 80851ee:	b007      	add	sp, #28
 80851f0:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rInvalid value!");
 80851f4:	f007 fc70 	bl	808cad8 <_Z16_fetch_usbserialv>
 80851f8:	4904      	ldr	r1, [pc, #16]	; (808520c <_Z13serialGetZonev+0x90>)
 80851fa:	f006 fbb2 	bl	808b962 <_ZN5Print7printlnEPKc>
 80851fe:	e7f3      	b.n	80851e8 <_Z13serialGetZonev+0x6c>
 8085200:	08091a9f 	.word	0x08091a9f
 8085204:	08092ce2 	.word	0x08092ce2
 8085208:	08091aca 	.word	0x08091aca
 808520c:	08090c04 	.word	0x08090c04

08085210 <_Z19serialGetLowerLimitv>:
void serialGetLowerLimit(void){
 8085210:	b530      	push	{r4, r5, lr}
 8085212:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8085214:	f007 fc60 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.println(gas_lower_limit);
 8085218:	4d35      	ldr	r5, [pc, #212]	; (80852f0 <_Z19serialGetLowerLimitv+0xe0>)
    Serial.println();
 808521a:	f006 fb96 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 808521e:	f007 fc5b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085222:	4934      	ldr	r1, [pc, #208]	; (80852f4 <_Z19serialGetLowerLimitv+0xe4>)
 8085224:	f006 fb8a 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 8085228:	f007 fc56 	bl	808cad8 <_Z16_fetch_usbserialv>
 808522c:	220a      	movs	r2, #10
 808522e:	6829      	ldr	r1, [r5, #0]
 8085230:	f7ff fd91 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the lower limit");
 8085234:	f007 fc50 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085238:	492f      	ldr	r1, [pc, #188]	; (80852f8 <_Z19serialGetLowerLimitv+0xe8>)
 808523a:	f006 fb92 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808523e:	f007 fc4b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085242:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085246:	f006 fcdf 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808524a:	f007 fc45 	bl	808cad8 <_Z16_fetch_usbserialv>
 808524e:	220d      	movs	r2, #13
 8085250:	4601      	mov	r1, r0
 8085252:	4668      	mov	r0, sp
 8085254:	f006 fd42 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
 8085258:	4668      	mov	r0, sp
 808525a:	4928      	ldr	r1, [pc, #160]	; (80852fc <_Z19serialGetLowerLimitv+0xec>)
 808525c:	f006 fab3 	bl	808b7c6 <_ZNK6String6equalsEPKc>
    if(tempString == "bould"){
 8085260:	2800      	cmp	r0, #0
 8085262:	d03e      	beq.n	80852e2 <_Z19serialGetLowerLimitv+0xd2>
        Serial.println("Password correct!");
 8085264:	f007 fc38 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085268:	4925      	ldr	r1, [pc, #148]	; (8085300 <_Z19serialGetLowerLimitv+0xf0>)
 808526a:	f006 fb7a 	bl	808b962 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 808526e:	f007 fc33 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085272:	4924      	ldr	r1, [pc, #144]	; (8085304 <_Z19serialGetLowerLimitv+0xf4>)
 8085274:	f006 fb75 	bl	808b962 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8085278:	f007 fc2e 	bl	808cad8 <_Z16_fetch_usbserialv>
 808527c:	220d      	movs	r2, #13
 808527e:	4601      	mov	r1, r0
 8085280:	a804      	add	r0, sp, #16
 8085282:	f006 fd2b 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8085286:	a804      	add	r0, sp, #16
 8085288:	f006 fb0a 	bl	808b8a0 <_ZNK6String5toIntEv>
 808528c:	4604      	mov	r4, r0
        Serial.println("");
 808528e:	f007 fc23 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085292:	491d      	ldr	r1, [pc, #116]	; (8085308 <_Z19serialGetLowerLimitv+0xf8>)
 8085294:	f006 fb65 	bl	808b962 <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 20000){
 8085298:	f644 631e 	movw	r3, #19998	; 0x4e1e
 808529c:	1e62      	subs	r2, r4, #1
 808529e:	429a      	cmp	r2, r3
 80852a0:	d819      	bhi.n	80852d6 <_Z19serialGetLowerLimitv+0xc6>
            Serial.print("\n\rNew lower limit:");
 80852a2:	f007 fc19 	bl	808cad8 <_Z16_fetch_usbserialv>
 80852a6:	4919      	ldr	r1, [pc, #100]	; (808530c <_Z19serialGetLowerLimitv+0xfc>)
 80852a8:	f006 fb48 	bl	808b93c <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 80852ac:	f007 fc14 	bl	808cad8 <_Z16_fetch_usbserialv>
 80852b0:	4621      	mov	r1, r4
 80852b2:	220a      	movs	r2, #10
 80852b4:	f7ff fd4f 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
            gas_lower_limit = tempValue;
 80852b8:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 80852ba:	f008 f815 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80852be:	4629      	mov	r1, r5
 80852c0:	204c      	movs	r0, #76	; 0x4c
 80852c2:	f7fb fcbb 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 80852c6:	a804      	add	r0, sp, #16
 80852c8:	f006 f8dc 	bl	808b484 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80852cc:	4668      	mov	r0, sp
 80852ce:	f006 f8d9 	bl	808b484 <_ZN6StringD1Ev>
}
 80852d2:	b009      	add	sp, #36	; 0x24
 80852d4:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 80852d6:	f007 fbff 	bl	808cad8 <_Z16_fetch_usbserialv>
 80852da:	490d      	ldr	r1, [pc, #52]	; (8085310 <_Z19serialGetLowerLimitv+0x100>)
 80852dc:	f006 fb41 	bl	808b962 <_ZN5Print7printlnEPKc>
 80852e0:	e7f1      	b.n	80852c6 <_Z19serialGetLowerLimitv+0xb6>
        Serial.println("\n\rIncorrect password!");
 80852e2:	f007 fbf9 	bl	808cad8 <_Z16_fetch_usbserialv>
 80852e6:	490b      	ldr	r1, [pc, #44]	; (8085314 <_Z19serialGetLowerLimitv+0x104>)
 80852e8:	f006 fb3b 	bl	808b962 <_ZN5Print7printlnEPKc>
 80852ec:	e7ee      	b.n	80852cc <_Z19serialGetLowerLimitv+0xbc>
 80852ee:	bf00      	nop
 80852f0:	20000098 	.word	0x20000098
 80852f4:	08091ae2 	.word	0x08091ae2
 80852f8:	08091af7 	.word	0x08091af7
 80852fc:	080909cd 	.word	0x080909cd
 8085300:	080909d3 	.word	0x080909d3
 8085304:	08091b30 	.word	0x08091b30
 8085308:	08092ce2 	.word	0x08092ce2
 808530c:	08091b49 	.word	0x08091b49
 8085310:	08090c04 	.word	0x08090c04
 8085314:	08090af8 	.word	0x08090af8

08085318 <_Z19serialGetUpperLimitv>:
void serialGetUpperLimit(void){
 8085318:	b530      	push	{r4, r5, lr}
 808531a:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 808531c:	f007 fbdc 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.println(gas_upper_limit);
 8085320:	4d35      	ldr	r5, [pc, #212]	; (80853f8 <_Z19serialGetUpperLimitv+0xe0>)
    Serial.println();
 8085322:	f006 fb12 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 8085326:	f007 fbd7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808532a:	4934      	ldr	r1, [pc, #208]	; (80853fc <_Z19serialGetUpperLimitv+0xe4>)
 808532c:	f006 fb06 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 8085330:	f007 fbd2 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085334:	220a      	movs	r2, #10
 8085336:	6829      	ldr	r1, [r5, #0]
 8085338:	f7ff fd0d 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the upper limit");
 808533c:	f007 fbcc 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085340:	492f      	ldr	r1, [pc, #188]	; (8085400 <_Z19serialGetUpperLimitv+0xe8>)
 8085342:	f006 fb0e 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8085346:	f007 fbc7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808534a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808534e:	f006 fc5b 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085352:	f007 fbc1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085356:	220d      	movs	r2, #13
 8085358:	4601      	mov	r1, r0
 808535a:	4668      	mov	r0, sp
 808535c:	f006 fcbe 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
 8085360:	4668      	mov	r0, sp
 8085362:	4928      	ldr	r1, [pc, #160]	; (8085404 <_Z19serialGetUpperLimitv+0xec>)
 8085364:	f006 fa2f 	bl	808b7c6 <_ZNK6String6equalsEPKc>
    if(tempString == "bould"){
 8085368:	2800      	cmp	r0, #0
 808536a:	d03e      	beq.n	80853ea <_Z19serialGetUpperLimitv+0xd2>
        Serial.println("Password correct!");
 808536c:	f007 fbb4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085370:	4925      	ldr	r1, [pc, #148]	; (8085408 <_Z19serialGetUpperLimitv+0xf0>)
 8085372:	f006 faf6 	bl	808b962 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 8085376:	f007 fbaf 	bl	808cad8 <_Z16_fetch_usbserialv>
 808537a:	4924      	ldr	r1, [pc, #144]	; (808540c <_Z19serialGetUpperLimitv+0xf4>)
 808537c:	f006 faf1 	bl	808b962 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8085380:	f007 fbaa 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085384:	220d      	movs	r2, #13
 8085386:	4601      	mov	r1, r0
 8085388:	a804      	add	r0, sp, #16
 808538a:	f006 fca7 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 808538e:	a804      	add	r0, sp, #16
 8085390:	f006 fa86 	bl	808b8a0 <_ZNK6String5toIntEv>
 8085394:	4604      	mov	r4, r0
        Serial.println("");
 8085396:	f007 fb9f 	bl	808cad8 <_Z16_fetch_usbserialv>
 808539a:	491d      	ldr	r1, [pc, #116]	; (8085410 <_Z19serialGetUpperLimitv+0xf8>)
 808539c:	f006 fae1 	bl	808b962 <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 50000){
 80853a0:	f24c 334e 	movw	r3, #49998	; 0xc34e
 80853a4:	1e62      	subs	r2, r4, #1
 80853a6:	429a      	cmp	r2, r3
 80853a8:	d819      	bhi.n	80853de <_Z19serialGetUpperLimitv+0xc6>
            Serial.print("\n\rNew upper limit:");
 80853aa:	f007 fb95 	bl	808cad8 <_Z16_fetch_usbserialv>
 80853ae:	4919      	ldr	r1, [pc, #100]	; (8085414 <_Z19serialGetUpperLimitv+0xfc>)
 80853b0:	f006 fac4 	bl	808b93c <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 80853b4:	f007 fb90 	bl	808cad8 <_Z16_fetch_usbserialv>
 80853b8:	4621      	mov	r1, r4
 80853ba:	220a      	movs	r2, #10
 80853bc:	f7ff fccb 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
            gas_upper_limit = tempValue;
 80853c0:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 80853c2:	f007 ff91 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80853c6:	4629      	mov	r1, r5
 80853c8:	2050      	movs	r0, #80	; 0x50
 80853ca:	f7fb fc37 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 80853ce:	a804      	add	r0, sp, #16
 80853d0:	f006 f858 	bl	808b484 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80853d4:	4668      	mov	r0, sp
 80853d6:	f006 f855 	bl	808b484 <_ZN6StringD1Ev>
}
 80853da:	b009      	add	sp, #36	; 0x24
 80853dc:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 80853de:	f007 fb7b 	bl	808cad8 <_Z16_fetch_usbserialv>
 80853e2:	490d      	ldr	r1, [pc, #52]	; (8085418 <_Z19serialGetUpperLimitv+0x100>)
 80853e4:	f006 fabd 	bl	808b962 <_ZN5Print7printlnEPKc>
 80853e8:	e7f1      	b.n	80853ce <_Z19serialGetUpperLimitv+0xb6>
        Serial.println("\n\rIncorrect password!");
 80853ea:	f007 fb75 	bl	808cad8 <_Z16_fetch_usbserialv>
 80853ee:	490b      	ldr	r1, [pc, #44]	; (808541c <_Z19serialGetUpperLimitv+0x104>)
 80853f0:	f006 fab7 	bl	808b962 <_ZN5Print7printlnEPKc>
 80853f4:	e7ee      	b.n	80853d4 <_Z19serialGetUpperLimitv+0xbc>
 80853f6:	bf00      	nop
 80853f8:	200000a0 	.word	0x200000a0
 80853fc:	08091b5c 	.word	0x08091b5c
 8085400:	08091b71 	.word	0x08091b71
 8085404:	080909cd 	.word	0x080909cd
 8085408:	080909d3 	.word	0x080909d3
 808540c:	08091baa 	.word	0x08091baa
 8085410:	08092ce2 	.word	0x08092ce2
 8085414:	08091bc3 	.word	0x08091bc3
 8085418:	08090c04 	.word	0x08090c04
 808541c:	08090af8 	.word	0x08090af8

08085420 <setup>:
{
 8085420:	b570      	push	{r4, r5, r6, lr}
 8085422:	b0aa      	sub	sp, #168	; 0xa8
    Serial.println("Starting the initialization");
 8085424:	f007 fb58 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085428:	49c6      	ldr	r1, [pc, #792]	; (8085744 <setup+0x324>)
 808542a:	f006 fa9a 	bl	808b962 <_ZN5Print7printlnEPKc>
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 808542e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8085432:	4bc5      	ldr	r3, [pc, #788]	; (8085748 <setup+0x328>)
    String init_log; //intialization error log
 8085434:	49c5      	ldr	r1, [pc, #788]	; (808574c <setup+0x32c>)
    pinMode(lmp91000_1_en, OUTPUT);
 8085436:	4dc6      	ldr	r5, [pc, #792]	; (8085750 <setup+0x330>)
    String init_log; //intialization error log
 8085438:	a803      	add	r0, sp, #12
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 808543a:	801a      	strh	r2, [r3, #0]
    pinMode(lmp91000_2_en, OUTPUT);
 808543c:	4ec5      	ldr	r6, [pc, #788]	; (8085754 <setup+0x334>)
    String init_log; //intialization error log
 808543e:	f006 f86b 	bl	808b518 <_ZN6StringC1EPKc>
    setADCSampleTime(ADC_SampleTime_480Cycles);
 8085442:	2007      	movs	r0, #7
 8085444:	f006 fe54 	bl	808c0f0 <setADCSampleTime>
    pinMode(lmp91000_1_en, OUTPUT);
 8085448:	2101      	movs	r1, #1
 808544a:	8828      	ldrh	r0, [r5, #0]
 808544c:	f007 fef8 	bl	808d240 <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 8085450:	2101      	movs	r1, #1
 8085452:	8830      	ldrh	r0, [r6, #0]
 8085454:	f007 fef4 	bl	808d240 <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 8085458:	4bbf      	ldr	r3, [pc, #764]	; (8085758 <setup+0x338>)
 808545a:	2101      	movs	r1, #1
 808545c:	8818      	ldrh	r0, [r3, #0]
 808545e:	f007 feef 	bl	808d240 <pinMode>
    pinMode(plantower_en, OUTPUT);
 8085462:	4bbe      	ldr	r3, [pc, #760]	; (808575c <setup+0x33c>)
 8085464:	2101      	movs	r1, #1
 8085466:	8818      	ldrh	r0, [r3, #0]
 8085468:	f007 feea 	bl	808d240 <pinMode>
    pinMode(power_led_en, OUTPUT);
 808546c:	4bbc      	ldr	r3, [pc, #752]	; (8085760 <setup+0x340>)
 808546e:	2101      	movs	r1, #1
 8085470:	8818      	ldrh	r0, [r3, #0]
 8085472:	f007 fee5 	bl	808d240 <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 8085476:	4bbb      	ldr	r3, [pc, #748]	; (8085764 <setup+0x344>)
 8085478:	2101      	movs	r1, #1
 808547a:	8818      	ldrh	r0, [r3, #0]
 808547c:	f007 fee0 	bl	808d240 <pinMode>
    pinMode(blower_en, OUTPUT);
 8085480:	4bb9      	ldr	r3, [pc, #740]	; (8085768 <setup+0x348>)
 8085482:	2101      	movs	r1, #1
 8085484:	8818      	ldrh	r0, [r3, #0]
 8085486:	f007 fedb 	bl	808d240 <pinMode>
    pinMode(D4, INPUT);
 808548a:	2100      	movs	r1, #0
 808548c:	2004      	movs	r0, #4
 808548e:	f007 fed7 	bl	808d240 <pinMode>
    pinMode(co2_en, OUTPUT);
 8085492:	4bb6      	ldr	r3, [pc, #728]	; (808576c <setup+0x34c>)
 8085494:	2101      	movs	r1, #1
 8085496:	8818      	ldrh	r0, [r3, #0]
 8085498:	f007 fed2 	bl	808d240 <pinMode>
    readStoredVars();
 808549c:	f7fb fea6 	bl	80811ec <_Z14readStoredVarsv>
    pmic.begin();
 80854a0:	48b3      	ldr	r0, [pc, #716]	; (8085770 <setup+0x350>)
 80854a2:	f005 fc14 	bl	808acce <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 80854a6:	f241 0170 	movw	r1, #4208	; 0x1070
 80854aa:	48b1      	ldr	r0, [pc, #708]	; (8085770 <setup+0x350>)
 80854ac:	f005 fd43 	bl	808af36 <_ZN4PMIC16setChargeVoltageEt>
    pmic.enableCharging();
 80854b0:	48af      	ldr	r0, [pc, #700]	; (8085770 <setup+0x350>)
 80854b2:	f005 fcef 	bl	808ae94 <_ZN4PMIC14enableChargingEv>
    powerCheck.loop();
 80854b6:	4caf      	ldr	r4, [pc, #700]	; (8085774 <setup+0x354>)
    writeRegister(0, 0b00110100);
 80854b8:	2134      	movs	r1, #52	; 0x34
 80854ba:	2000      	movs	r0, #0
 80854bc:	f7fb fd60 	bl	8080f80 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 80854c0:	211b      	movs	r1, #27
 80854c2:	2001      	movs	r0, #1
 80854c4:	f7fb fd5c 	bl	8080f80 <_Z13writeRegisterhh>
    powerCheck.loop();
 80854c8:	4620      	mov	r0, r4
 80854ca:	f001 fe95 	bl	80871f8 <_ZN10PowerCheck4loopEv>
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 80854ce:	4baa      	ldr	r3, [pc, #680]	; (8085778 <setup+0x358>)
 80854d0:	681b      	ldr	r3, [r3, #0]
 80854d2:	2b00      	cmp	r3, #0
 80854d4:	f000 826e 	beq.w	80859b4 <setup+0x594>
 80854d8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80854dc:	2b00      	cmp	r3, #0
 80854de:	f040 8269 	bne.w	80859b4 <setup+0x594>
        goToSleepBattery();
 80854e2:	f7fd f9ab 	bl	808283c <_Z16goToSleepBatteryv>
    attachInterrupt(D4, System.reset, RISING);
 80854e6:	2300      	movs	r3, #0
 80854e8:	2201      	movs	r2, #1
 80854ea:	9300      	str	r3, [sp, #0]
 80854ec:	2004      	movs	r0, #4
 80854ee:	f04f 33ff 	mov.w	r3, #4294967295
 80854f2:	49a2      	ldr	r1, [pc, #648]	; (808577c <setup+0x35c>)
 80854f4:	f007 fb58 	bl	808cba8 <_Z15attachInterrupttPFvvE13InterruptModeah>
    if(digitalRead(D4)){
 80854f8:	2004      	movs	r0, #4
 80854fa:	f007 fecb 	bl	808d294 <digitalRead>
 80854fe:	b108      	cbz	r0, 8085504 <setup+0xe4>
      goToSleep();
 8085500:	f7fd f94e 	bl	80827a0 <_Z9goToSleepv>
    digitalWrite(lmp91000_1_en, HIGH);
 8085504:	2101      	movs	r1, #1
 8085506:	8828      	ldrh	r0, [r5, #0]
 8085508:	f007 feab 	bl	808d262 <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 808550c:	2101      	movs	r1, #1
 808550e:	8830      	ldrh	r0, [r6, #0]
 8085510:	f007 fea7 	bl	808d262 <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 8085514:	4b92      	ldr	r3, [pc, #584]	; (8085760 <setup+0x340>)
 8085516:	2101      	movs	r1, #1
 8085518:	8818      	ldrh	r0, [r3, #0]
 808551a:	f007 fea2 	bl	808d262 <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 808551e:	4b8f      	ldr	r3, [pc, #572]	; (808575c <setup+0x33c>)
 8085520:	2101      	movs	r1, #1
 8085522:	8818      	ldrh	r0, [r3, #0]
 8085524:	f007 fe9d 	bl	808d262 <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 8085528:	4b8e      	ldr	r3, [pc, #568]	; (8085764 <setup+0x344>)
 808552a:	2101      	movs	r1, #1
 808552c:	8818      	ldrh	r0, [r3, #0]
 808552e:	f007 fe98 	bl	808d262 <digitalWrite>
    digitalWrite(blower_en, HIGH);
 8085532:	4b8d      	ldr	r3, [pc, #564]	; (8085768 <setup+0x348>)
 8085534:	2101      	movs	r1, #1
 8085536:	8818      	ldrh	r0, [r3, #0]
 8085538:	f007 fe93 	bl	808d262 <digitalWrite>
    digitalWrite(co2_en, HIGH);
 808553c:	4b8b      	ldr	r3, [pc, #556]	; (808576c <setup+0x34c>)
 808553e:	2101      	movs	r1, #1
 8085540:	8818      	ldrh	r0, [r3, #0]
 8085542:	f007 fe8e 	bl	808d262 <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 8085546:	4b84      	ldr	r3, [pc, #528]	; (8085758 <setup+0x338>)
 8085548:	2101      	movs	r1, #1
 808554a:	8818      	ldrh	r0, [r3, #0]
 808554c:	f007 fe89 	bl	808d262 <digitalWrite>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8085550:	4a8b      	ldr	r2, [pc, #556]	; (8085780 <setup+0x360>)
 8085552:	498c      	ldr	r1, [pc, #560]	; (8085784 <setup+0x364>)
 8085554:	488c      	ldr	r0, [pc, #560]	; (8085788 <setup+0x368>)
 8085556:	f006 ff9c 	bl	808c492 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Serial1.begin(9600);
 808555a:	f007 fc07 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 808555e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8085562:	f007 fbfd 	bl	808cd60 <_ZN11USARTSerial5beginEm>
    Serial4.begin(9600);
 8085566:	f7fb fc69 	bl	8080e3c <_Z22__fetch_global_Serial4v>
 808556a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808556e:	f007 fbf7 	bl	808cd60 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 8085572:	f7fb fc9f 	bl	8080eb4 <_Z22__fetch_global_Serial5v>
 8085576:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808557a:	f007 fbf1 	bl	808cd60 <_ZN11USARTSerial5beginEm>
    Serial4.setTimeout(5000);
 808557e:	f7fb fc5d 	bl	8080e3c <_Z22__fetch_global_Serial4v>
 8085582:	f241 3188 	movw	r1, #5000	; 0x1388
 8085586:	f006 fb3f 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    delay(10000);
 808558a:	f242 7010 	movw	r0, #10000	; 0x2710
 808558e:	f006 fdb1 	bl	808c0f4 <delay>
    Serial.begin(9600);
 8085592:	f007 faa1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085596:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808559a:	f007 fa83 	bl	808caa4 <_ZN9USBSerial5beginEl>
     fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 808559e:	4b7b      	ldr	r3, [pc, #492]	; (808578c <setup+0x36c>)
 80855a0:	220a      	movs	r2, #10
 80855a2:	6819      	ldr	r1, [r3, #0]
 80855a4:	a807      	add	r0, sp, #28
 80855a6:	f006 f82b 	bl	808b600 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 80855aa:	a907      	add	r1, sp, #28
 80855ac:	a80b      	add	r0, sp, #44	; 0x2c
 80855ae:	f005 fff2 	bl	808b596 <_ZN6StringC1ERKS_>
 80855b2:	4977      	ldr	r1, [pc, #476]	; (8085790 <setup+0x370>)
 80855b4:	a80b      	add	r0, sp, #44	; 0x2c
 80855b6:	f006 f8de 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 80855ba:	4604      	mov	r4, r0
 80855bc:	f006 fd82 	bl	808c0c4 <_ZN9TimeClass4yearEv>
 80855c0:	220a      	movs	r2, #10
 80855c2:	4601      	mov	r1, r0
 80855c4:	a80f      	add	r0, sp, #60	; 0x3c
 80855c6:	f006 f81b 	bl	808b600 <_ZN6StringC1Eih>
 80855ca:	a90f      	add	r1, sp, #60	; 0x3c
 80855cc:	4620      	mov	r0, r4
 80855ce:	f006 f8c6 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 80855d2:	4604      	mov	r4, r0
 80855d4:	f006 fd6e 	bl	808c0b4 <_ZN9TimeClass5monthEv>
 80855d8:	220a      	movs	r2, #10
 80855da:	4601      	mov	r1, r0
 80855dc:	a813      	add	r0, sp, #76	; 0x4c
 80855de:	f006 f80f 	bl	808b600 <_ZN6StringC1Eih>
 80855e2:	a913      	add	r1, sp, #76	; 0x4c
 80855e4:	4620      	mov	r0, r4
 80855e6:	f006 f8ba 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 80855ea:	4604      	mov	r4, r0
 80855ec:	f006 fd56 	bl	808c09c <_ZN9TimeClass3dayEv>
 80855f0:	220a      	movs	r2, #10
 80855f2:	4601      	mov	r1, r0
 80855f4:	a817      	add	r0, sp, #92	; 0x5c
 80855f6:	f006 f803 	bl	808b600 <_ZN6StringC1Eih>
 80855fa:	4620      	mov	r0, r4
 80855fc:	a917      	add	r1, sp, #92	; 0x5c
 80855fe:	f006 f8ae 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8085602:	4963      	ldr	r1, [pc, #396]	; (8085790 <setup+0x370>)
 8085604:	f006 f8b7 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8085608:	4604      	mov	r4, r0
 808560a:	f006 fd23 	bl	808c054 <_ZN9TimeClass4hourEv>
 808560e:	220a      	movs	r2, #10
 8085610:	4601      	mov	r1, r0
 8085612:	a81b      	add	r0, sp, #108	; 0x6c
 8085614:	f005 fff4 	bl	808b600 <_ZN6StringC1Eih>
 8085618:	a91b      	add	r1, sp, #108	; 0x6c
 808561a:	4620      	mov	r0, r4
 808561c:	f006 f89f 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8085620:	4604      	mov	r4, r0
 8085622:	f006 fd23 	bl	808c06c <_ZN9TimeClass6minuteEv>
 8085626:	220a      	movs	r2, #10
 8085628:	4601      	mov	r1, r0
 808562a:	a81f      	add	r0, sp, #124	; 0x7c
 808562c:	f005 ffe8 	bl	808b600 <_ZN6StringC1Eih>
 8085630:	a91f      	add	r1, sp, #124	; 0x7c
 8085632:	4620      	mov	r0, r4
 8085634:	f006 f893 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8085638:	4604      	mov	r4, r0
 808563a:	f006 fd23 	bl	808c084 <_ZN9TimeClass6secondEv>
 808563e:	220a      	movs	r2, #10
 8085640:	4601      	mov	r1, r0
 8085642:	a823      	add	r0, sp, #140	; 0x8c
 8085644:	f005 ffdc 	bl	808b600 <_ZN6StringC1Eih>
 8085648:	4620      	mov	r0, r4
 808564a:	a923      	add	r1, sp, #140	; 0x8c
 808564c:	f006 f887 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 8085650:	4950      	ldr	r1, [pc, #320]	; (8085794 <setup+0x374>)
 8085652:	f006 f890 	bl	808b776 <_ZplRK15StringSumHelperPKc>
 8085656:	4c50      	ldr	r4, [pc, #320]	; (8085798 <setup+0x378>)
 8085658:	4601      	mov	r1, r0
 808565a:	4620      	mov	r0, r4
 808565c:	f005 ff8c 	bl	808b578 <_ZN6StringaSERKS_>
 8085660:	a823      	add	r0, sp, #140	; 0x8c
 8085662:	f005 ff0f 	bl	808b484 <_ZN6StringD1Ev>
 8085666:	a81f      	add	r0, sp, #124	; 0x7c
 8085668:	f005 ff0c 	bl	808b484 <_ZN6StringD1Ev>
 808566c:	a81b      	add	r0, sp, #108	; 0x6c
 808566e:	f005 ff09 	bl	808b484 <_ZN6StringD1Ev>
 8085672:	a817      	add	r0, sp, #92	; 0x5c
 8085674:	f005 ff06 	bl	808b484 <_ZN6StringD1Ev>
 8085678:	a813      	add	r0, sp, #76	; 0x4c
 808567a:	f005 ff03 	bl	808b484 <_ZN6StringD1Ev>
 808567e:	a80f      	add	r0, sp, #60	; 0x3c
 8085680:	f005 ff00 	bl	808b484 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8085684:	a80b      	add	r0, sp, #44	; 0x2c
 8085686:	f005 fefd 	bl	808b484 <_ZN6StringD1Ev>
 808568a:	a807      	add	r0, sp, #28
 808568c:	f005 fefa 	bl	808b484 <_ZN6StringD1Ev>
     Serial.println("Checking for sd card");
 8085690:	f007 fa22 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085694:	4941      	ldr	r1, [pc, #260]	; (808579c <setup+0x37c>)
 8085696:	f006 f964 	bl	808b962 <_ZN5Print7printlnEPKc>
	StringSumHelper(const char *p) : String(p) {}
 808569a:	4941      	ldr	r1, [pc, #260]	; (80857a0 <setup+0x380>)
 808569c:	a823      	add	r0, sp, #140	; 0x8c
 808569e:	f005 ff3b 	bl	808b518 <_ZN6StringC1EPKc>
     logFileName = "log_" + fileName;
 80856a2:	4621      	mov	r1, r4
 80856a4:	a823      	add	r0, sp, #140	; 0x8c
 80856a6:	f006 f85a 	bl	808b75e <_ZplRK15StringSumHelperRK6String>
 80856aa:	4601      	mov	r1, r0
 80856ac:	483d      	ldr	r0, [pc, #244]	; (80857a4 <setup+0x384>)
 80856ae:	f005 ff63 	bl	808b578 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80856b2:	a823      	add	r0, sp, #140	; 0x8c
 80856b4:	f005 fee6 	bl	808b484 <_ZN6StringD1Ev>
 80856b8:	493b      	ldr	r1, [pc, #236]	; (80857a8 <setup+0x388>)
 80856ba:	2302      	movs	r3, #2
 80856bc:	220c      	movs	r2, #12
 80856be:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 80856c2:	f7fb fc33 	bl	8080f2c <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS)) { //if uSD is functioning and MCP error has not been logged yet.
 80856c6:	2800      	cmp	r0, #0
 80856c8:	f000 8188 	beq.w	80859dc <setup+0x5bc>
      Serial.print("Created new file to log to uSD card: ");
 80856cc:	f007 fa04 	bl	808cad8 <_Z16_fetch_usbserialv>
 80856d0:	4936      	ldr	r1, [pc, #216]	; (80857ac <setup+0x38c>)
 80856d2:	f006 f933 	bl	808b93c <_ZN5Print5printEPKc>
      Serial.println(fileName);
 80856d6:	f007 f9ff 	bl	808cad8 <_Z16_fetch_usbserialv>
 80856da:	6821      	ldr	r1, [r4, #0]
    if(debugging_enabled)
 80856dc:	4c34      	ldr	r4, [pc, #208]	; (80857b0 <setup+0x390>)
        Serial.println("No uSD card detected.");
 80856de:	f006 f940 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.println("Starting LMP91000 CO initialization");
 80856e2:	f007 f9f9 	bl	808cad8 <_Z16_fetch_usbserialv>
 80856e6:	4933      	ldr	r1, [pc, #204]	; (80857b4 <setup+0x394>)
 80856e8:	f006 f93b 	bl	808b962 <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 80856ec:	6823      	ldr	r3, [r4, #0]
 80856ee:	b14b      	cbz	r3, 8085704 <setup+0x2e4>
        writeLogFile("Starting LMP91000 CO initialization");
 80856f0:	4930      	ldr	r1, [pc, #192]	; (80857b4 <setup+0x394>)
 80856f2:	a823      	add	r0, sp, #140	; 0x8c
 80856f4:	f005 ff10 	bl	808b518 <_ZN6StringC1EPKc>
 80856f8:	a823      	add	r0, sp, #140	; 0x8c
 80856fa:	f7fc fb19 	bl	8081d30 <_Z12writeLogFile6String>
 80856fe:	a823      	add	r0, sp, #140	; 0x8c
 8085700:	f005 fec0 	bl	808b484 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 8085704:	f007 fe42 	bl	808d38c <_Z19__fetch_global_Wirev>
 8085708:	f007 fbaa 	bl	808ce60 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 808570c:	2100      	movs	r1, #0
 808570e:	8828      	ldrh	r0, [r5, #0]
 8085710:	f007 fda7 	bl	808d262 <digitalWrite>
    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 8085714:	2303      	movs	r3, #3
 8085716:	22b0      	movs	r2, #176	; 0xb0
 8085718:	2118      	movs	r1, #24
 808571a:	4827      	ldr	r0, [pc, #156]	; (80857b8 <setup+0x398>)
 808571c:	f001 fd16 	bl	808714c <_ZN8LMP910009configureEhhh>
 8085720:	2800      	cmp	r0, #0
 8085722:	f040 815f 	bne.w	80859e4 <setup+0x5c4>
          Serial.println("Couldn't communicate with LMP91000 for CO");
 8085726:	f007 f9d7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808572a:	4924      	ldr	r1, [pc, #144]	; (80857bc <setup+0x39c>)
 808572c:	f006 f919 	bl	808b962 <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 8085730:	6823      	ldr	r3, [r4, #0]
 8085732:	2b00      	cmp	r3, #0
 8085734:	d049      	beq.n	80857ca <setup+0x3aa>
            writeLogFile("Couldn't communicate with LMP91000 for CO");
 8085736:	4921      	ldr	r1, [pc, #132]	; (80857bc <setup+0x39c>)
 8085738:	a823      	add	r0, sp, #140	; 0x8c
 808573a:	f005 feed 	bl	808b518 <_ZN6StringC1EPKc>
 808573e:	a823      	add	r0, sp, #140	; 0x8c
 8085740:	e03e      	b.n	80857c0 <setup+0x3a0>
 8085742:	bf00      	nop
 8085744:	08091bd6 	.word	0x08091bd6
 8085748:	20000c90 	.word	0x20000c90
 808574c:	08092ce2 	.word	0x08092ce2
 8085750:	200000c8 	.word	0x200000c8
 8085754:	200000cc 	.word	0x200000cc
 8085758:	20000094 	.word	0x20000094
 808575c:	200000d0 	.word	0x200000d0
 8085760:	200000d4 	.word	0x200000d4
 8085764:	20000090 	.word	0x20000090
 8085768:	20000088 	.word	0x20000088
 808576c:	2000008c 	.word	0x2000008c
 8085770:	200007bc 	.word	0x200007bc
 8085774:	200007c0 	.word	0x200007c0
 8085778:	2000061c 	.word	0x2000061c
 808577c:	0808b1c9 	.word	0x0808b1c9
 8085780:	08091bf2 	.word	0x08091bf2
 8085784:	08080c4b 	.word	0x08080c4b
 8085788:	0808c44b 	.word	0x0808c44b
 808578c:	20000080 	.word	0x20000080
 8085790:	08091c1d 	.word	0x08091c1d
 8085794:	08091c00 	.word	0x08091c00
 8085798:	20000690 	.word	0x20000690
 808579c:	08091c05 	.word	0x08091c05
 80857a0:	08091c1a 	.word	0x08091c1a
 80857a4:	2000074c 	.word	0x2000074c
 80857a8:	20000c68 	.word	0x20000c68
 80857ac:	08091c1f 	.word	0x08091c1f
 80857b0:	20000628 	.word	0x20000628
 80857b4:	08091c5b 	.word	0x08091c5b
 80857b8:	20000705 	.word	0x20000705
 80857bc:	08091c7f 	.word	0x08091c7f
 80857c0:	f7fc fab6 	bl	8081d30 <_Z12writeLogFile6String>
 80857c4:	a823      	add	r0, sp, #140	; 0x8c
 80857c6:	f005 fe5d 	bl	808b484 <_ZN6StringD1Ev>
    ads1.begin();
 80857ca:	48a7      	ldr	r0, [pc, #668]	; (8085a68 <setup+0x648>)
 80857cc:	f001 fdab 	bl	8087326 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x49,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 80857d0:	f007 fddc 	bl	808d38c <_Z19__fetch_global_Wirev>
 80857d4:	2201      	movs	r2, #1
 80857d6:	2149      	movs	r1, #73	; 0x49
 80857d8:	f007 fb71 	bl	808cebe <_ZN7TwoWire11requestFromEhj>
 80857dc:	2800      	cmp	r0, #0
 80857de:	f040 8117 	bne.w	8085a10 <setup+0x5f0>
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 80857e2:	f007 f979 	bl	808cad8 <_Z16_fetch_usbserialv>
 80857e6:	49a1      	ldr	r1, [pc, #644]	; (8085a6c <setup+0x64c>)
 80857e8:	f006 f8bb 	bl	808b962 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 80857ec:	6823      	ldr	r3, [r4, #0]
 80857ee:	b14b      	cbz	r3, 8085804 <setup+0x3e4>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 80857f0:	499e      	ldr	r1, [pc, #632]	; (8085a6c <setup+0x64c>)
 80857f2:	a823      	add	r0, sp, #140	; 0x8c
 80857f4:	f005 fe90 	bl	808b518 <_ZN6StringC1EPKc>
 80857f8:	a823      	add	r0, sp, #140	; 0x8c
 80857fa:	f7fc fa99 	bl	8081d30 <_Z12writeLogFile6String>
 80857fe:	a823      	add	r0, sp, #140	; 0x8c
 8085800:	f005 fe40 	bl	808b484 <_ZN6StringD1Ev>
    Serial.println("Starting LMP91000 2 initialization");
 8085804:	f007 f968 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085808:	4999      	ldr	r1, [pc, #612]	; (8085a70 <setup+0x650>)
 808580a:	f006 f8aa 	bl	808b962 <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 808580e:	6823      	ldr	r3, [r4, #0]
 8085810:	b14b      	cbz	r3, 8085826 <setup+0x406>
        writeLogFile("Starting LMP91000 2 initialization");
 8085812:	4997      	ldr	r1, [pc, #604]	; (8085a70 <setup+0x650>)
 8085814:	a823      	add	r0, sp, #140	; 0x8c
 8085816:	f005 fe7f 	bl	808b518 <_ZN6StringC1EPKc>
 808581a:	a823      	add	r0, sp, #140	; 0x8c
 808581c:	f7fc fa88 	bl	8081d30 <_Z12writeLogFile6String>
 8085820:	a823      	add	r0, sp, #140	; 0x8c
 8085822:	f005 fe2f 	bl	808b484 <_ZN6StringD1Ev>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8085826:	4d93      	ldr	r5, [pc, #588]	; (8085a74 <setup+0x654>)
    Wire.begin();   //this must be done for the LMP91000
 8085828:	f007 fdb0 	bl	808d38c <_Z19__fetch_global_Wirev>
 808582c:	f007 fb18 	bl	808ce60 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8085830:	2100      	movs	r1, #0
 8085832:	8828      	ldrh	r0, [r5, #0]
 8085834:	f007 fd15 	bl	808d262 <digitalWrite>
    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 8085838:	2303      	movs	r3, #3
 808583a:	22b0      	movs	r2, #176	; 0xb0
 808583c:	2118      	movs	r1, #24
 808583e:	488e      	ldr	r0, [pc, #568]	; (8085a78 <setup+0x658>)
 8085840:	f001 fc84 	bl	808714c <_ZN8LMP910009configureEhhh>
 8085844:	2800      	cmp	r0, #0
 8085846:	f040 80e8 	bne.w	8085a1a <setup+0x5fa>
          Serial.println("Couldn't communicate with LMP91000 for 2");
 808584a:	f007 f945 	bl	808cad8 <_Z16_fetch_usbserialv>
 808584e:	498b      	ldr	r1, [pc, #556]	; (8085a7c <setup+0x65c>)
 8085850:	f006 f887 	bl	808b962 <_ZN5Print7printlnEPKc>
          writeLogFile("Couldn't communicate with LMP91000 for 2");
 8085854:	4989      	ldr	r1, [pc, #548]	; (8085a7c <setup+0x65c>)
 8085856:	a823      	add	r0, sp, #140	; 0x8c
 8085858:	f005 fe5e 	bl	808b518 <_ZN6StringC1EPKc>
 808585c:	a823      	add	r0, sp, #140	; 0x8c
 808585e:	f7fc fa67 	bl	8081d30 <_Z12writeLogFile6String>
 8085862:	a823      	add	r0, sp, #140	; 0x8c
 8085864:	f005 fe0e 	bl	808b484 <_ZN6StringD1Ev>
    ads2.begin();
 8085868:	4885      	ldr	r0, [pc, #532]	; (8085a80 <setup+0x660>)
 808586a:	f001 fd5c 	bl	8087326 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x4A,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 808586e:	f007 fd8d 	bl	808d38c <_Z19__fetch_global_Wirev>
 8085872:	2201      	movs	r2, #1
 8085874:	214a      	movs	r1, #74	; 0x4a
 8085876:	f007 fb22 	bl	808cebe <_ZN7TwoWire11requestFromEhj>
 808587a:	2800      	cmp	r0, #0
 808587c:	f040 80e3 	bne.w	8085a46 <setup+0x626>
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8085880:	f007 f92a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085884:	4979      	ldr	r1, [pc, #484]	; (8085a6c <setup+0x64c>)
 8085886:	f006 f86c 	bl	808b962 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 808588a:	6823      	ldr	r3, [r4, #0]
 808588c:	b14b      	cbz	r3, 80858a2 <setup+0x482>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 808588e:	4977      	ldr	r1, [pc, #476]	; (8085a6c <setup+0x64c>)
 8085890:	a823      	add	r0, sp, #140	; 0x8c
 8085892:	f005 fe41 	bl	808b518 <_ZN6StringC1EPKc>
 8085896:	a823      	add	r0, sp, #140	; 0x8c
 8085898:	f7fc fa4a 	bl	8081d30 <_Z12writeLogFile6String>
 808589c:	a823      	add	r0, sp, #140	; 0x8c
 808589e:	f005 fdf1 	bl	808b484 <_ZN6StringD1Ev>
    if (!bme.begin()) {
 80858a2:	2177      	movs	r1, #119	; 0x77
 80858a4:	4877      	ldr	r0, [pc, #476]	; (8085a84 <setup+0x664>)
 80858a6:	f003 fcdd 	bl	8089264 <_ZN15Adafruit_BME6805beginEh>
 80858aa:	2800      	cmp	r0, #0
 80858ac:	f040 80d0 	bne.w	8085a50 <setup+0x630>
      Serial.println("Could not find a valid BME680 sensor, check wiring!");
 80858b0:	f007 f912 	bl	808cad8 <_Z16_fetch_usbserialv>
 80858b4:	4974      	ldr	r1, [pc, #464]	; (8085a88 <setup+0x668>)
 80858b6:	f006 f854 	bl	808b962 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 80858ba:	6823      	ldr	r3, [r4, #0]
 80858bc:	b14b      	cbz	r3, 80858d2 <setup+0x4b2>
          writeLogFile("Could not find a valid BME680 sensor, check wiring!");
 80858be:	4972      	ldr	r1, [pc, #456]	; (8085a88 <setup+0x668>)
        writeLogFile("Initialized BME Sensor");
 80858c0:	a823      	add	r0, sp, #140	; 0x8c
 80858c2:	f005 fe29 	bl	808b518 <_ZN6StringC1EPKc>
 80858c6:	a823      	add	r0, sp, #140	; 0x8c
 80858c8:	f7fc fa32 	bl	8081d30 <_Z12writeLogFile6String>
 80858cc:	a823      	add	r0, sp, #140	; 0x8c
 80858ce:	f005 fdd9 	bl	808b484 <_ZN6StringD1Ev>
    if(!t6713.begin()){
 80858d2:	486e      	ldr	r0, [pc, #440]	; (8085a8c <setup+0x66c>)
 80858d4:	f001 fe22 	bl	808751c <_ZN13Telaire_T67135beginEv>
 80858d8:	b980      	cbnz	r0, 80858fc <setup+0x4dc>
      Serial.println("Could not find a valid T6713 sensor, check wiring!");
 80858da:	f007 f8fd 	bl	808cad8 <_Z16_fetch_usbserialv>
 80858de:	496c      	ldr	r1, [pc, #432]	; (8085a90 <setup+0x670>)
 80858e0:	f006 f83f 	bl	808b962 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 80858e4:	6823      	ldr	r3, [r4, #0]
 80858e6:	b14b      	cbz	r3, 80858fc <setup+0x4dc>
          writeLogFile("Could not find a valid T6713");
 80858e8:	496a      	ldr	r1, [pc, #424]	; (8085a94 <setup+0x674>)
 80858ea:	a823      	add	r0, sp, #140	; 0x8c
 80858ec:	f005 fe14 	bl	808b518 <_ZN6StringC1EPKc>
 80858f0:	a823      	add	r0, sp, #140	; 0x8c
 80858f2:	f7fc fa1d 	bl	8081d30 <_Z12writeLogFile6String>
 80858f6:	a823      	add	r0, sp, #140	; 0x8c
 80858f8:	f005 fdc4 	bl	808b484 <_ZN6StringD1Ev>
    bme.setTemperatureOversampling(BME680_OS_8X);
 80858fc:	2104      	movs	r1, #4
 80858fe:	4861      	ldr	r0, [pc, #388]	; (8085a84 <setup+0x664>)
 8085900:	f003 fc12 	bl	8089128 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme.setHumidityOversampling(BME680_OS_2X);
 8085904:	2102      	movs	r1, #2
 8085906:	485f      	ldr	r0, [pc, #380]	; (8085a84 <setup+0x664>)
 8085908:	f003 fc1b 	bl	8089142 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme.setPressureOversampling(BME680_OS_4X);
 808590c:	2103      	movs	r1, #3
 808590e:	485d      	ldr	r0, [pc, #372]	; (8085a84 <setup+0x664>)
 8085910:	f003 fc24 	bl	808915c <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
 8085914:	2102      	movs	r1, #2
 8085916:	485b      	ldr	r0, [pc, #364]	; (8085a84 <setup+0x664>)
 8085918:	f003 fc2d 	bl	8089176 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
 808591c:	2296      	movs	r2, #150	; 0x96
 808591e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8085922:	4858      	ldr	r0, [pc, #352]	; (8085a84 <setup+0x664>)
 8085924:	f003 fbf2 	bl	808910c <_ZN15Adafruit_BME68012setGasHeaterEtt>
    resetESP();
 8085928:	f7fc ffe4 	bl	80828f4 <_Z8resetESPv>
    Serial.println("ESP reset!");
 808592c:	f007 f8d4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085930:	4959      	ldr	r1, [pc, #356]	; (8085a98 <setup+0x678>)
 8085932:	f006 f816 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("FW Version: ");
 8085936:	f007 f8cf 	bl	808cad8 <_Z16_fetch_usbserialv>
 808593a:	4958      	ldr	r1, [pc, #352]	; (8085a9c <setup+0x67c>)
 808593c:	f005 fffe 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 8085940:	f007 f8ca 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085944:	220a      	movs	r2, #10
 8085946:	2107      	movs	r1, #7
 8085948:	f7ff fa05 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print("Build: ");
 808594c:	f007 f8c4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085950:	4953      	ldr	r1, [pc, #332]	; (8085aa0 <setup+0x680>)
 8085952:	f005 fff3 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 8085956:	f007 f8bf 	bl	808cad8 <_Z16_fetch_usbserialv>
 808595a:	220a      	movs	r2, #10
 808595c:	210d      	movs	r1, #13
 808595e:	f7ff f9fa 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
    enableContinuousGPS();
 8085962:	f7fb fe55 	bl	8081610 <_Z19enableContinuousGPSv>
    if(google_location_en){
 8085966:	4b4f      	ldr	r3, [pc, #316]	; (8085aa4 <setup+0x684>)
 8085968:	681b      	ldr	r3, [r3, #0]
 808596a:	b15b      	cbz	r3, 8085984 <setup+0x564>
        Serial.println("Setting up google maps geolocation.");
 808596c:	f007 f8b4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085970:	494d      	ldr	r1, [pc, #308]	; (8085aa8 <setup+0x688>)
 8085972:	f005 fff6 	bl	808b962 <_ZN5Print7printlnEPKc>
        locator.withSubscribe(locationCallback).withLocatePeriodic(5); //setup google maps geolocation
 8085976:	494d      	ldr	r1, [pc, #308]	; (8085aac <setup+0x68c>)
 8085978:	484d      	ldr	r0, [pc, #308]	; (8085ab0 <setup+0x690>)
 808597a:	f004 f8d9 	bl	8089b30 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
 808597e:	2105      	movs	r1, #5
 8085980:	f003 ffa6 	bl	80898d0 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>
#define SYSTEM_VERSION_200
#define SYSTEM_VERSION_201ALPHA1
#define SYSTEM_VERSION_201ALPHA2
#define SYSTEM_VERSION_201

typedef struct __attribute__((packed)) SystemVersionInfo
 8085984:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8085986:	2100      	movs	r1, #0
 8085988:	a823      	add	r0, sp, #140	; 0x8c
 808598a:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
 808598e:	f005 f84f 	bl	808aa30 <system_version_info>
        return String(info.versionString);
 8085992:	a925      	add	r1, sp, #148	; 0x94
 8085994:	a81f      	add	r0, sp, #124	; 0x7c
 8085996:	f005 fdbf 	bl	808b518 <_ZN6StringC1EPKc>
    Log.info("System version: %s", (const char*)System.version());
 808599a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 808599c:	4945      	ldr	r1, [pc, #276]	; (8085ab4 <setup+0x694>)
 808599e:	4846      	ldr	r0, [pc, #280]	; (8085ab8 <setup+0x698>)
 80859a0:	f7fb fa34 	bl	8080e0c <_ZNK5spark6Logger4infoEPKcz>
 80859a4:	a81f      	add	r0, sp, #124	; 0x7c
 80859a6:	f005 fd6d 	bl	808b484 <_ZN6StringD1Ev>
    String init_log; //intialization error log
 80859aa:	a803      	add	r0, sp, #12
 80859ac:	f005 fd6a 	bl	808b484 <_ZN6StringD1Ev>
}
 80859b0:	b02a      	add	sp, #168	; 0xa8
 80859b2:	bd70      	pop	{r4, r5, r6, pc}
    }else if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 80859b4:	4b41      	ldr	r3, [pc, #260]	; (8085abc <setup+0x69c>)
 80859b6:	681b      	ldr	r3, [r3, #0]
 80859b8:	2b01      	cmp	r3, #1
 80859ba:	f47f ad94 	bne.w	80854e6 <setup+0xc6>
 80859be:	4840      	ldr	r0, [pc, #256]	; (8085ac0 <setup+0x6a0>)
 80859c0:	f006 fc22 	bl	808c208 <_ZN9FuelGauge6getSoCEv>
 80859c4:	493f      	ldr	r1, [pc, #252]	; (8085ac4 <setup+0x6a4>)
 80859c6:	f008 fcf3 	bl	808e3b0 <__aeabi_fcmplt>
 80859ca:	2800      	cmp	r0, #0
 80859cc:	f43f ad8b 	beq.w	80854e6 <setup+0xc6>
 80859d0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80859d4:	2b00      	cmp	r3, #0
 80859d6:	f47f ad86 	bne.w	80854e6 <setup+0xc6>
 80859da:	e582      	b.n	80854e2 <setup+0xc2>
        Serial.println("No uSD card detected.");
 80859dc:	f007 f87c 	bl	808cad8 <_Z16_fetch_usbserialv>
 80859e0:	4939      	ldr	r1, [pc, #228]	; (8085ac8 <setup+0x6a8>)
 80859e2:	e67b      	b.n	80856dc <setup+0x2bc>
          Serial.println("Initialized LMP91000 for CO");
 80859e4:	f007 f878 	bl	808cad8 <_Z16_fetch_usbserialv>
 80859e8:	4938      	ldr	r1, [pc, #224]	; (8085acc <setup+0x6ac>)
 80859ea:	f005 ffba 	bl	808b962 <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 80859ee:	6823      	ldr	r3, [r4, #0]
 80859f0:	b14b      	cbz	r3, 8085a06 <setup+0x5e6>
            writeLogFile("Initialized LMP91000 for CO");
 80859f2:	4936      	ldr	r1, [pc, #216]	; (8085acc <setup+0x6ac>)
 80859f4:	a823      	add	r0, sp, #140	; 0x8c
 80859f6:	f005 fd8f 	bl	808b518 <_ZN6StringC1EPKc>
 80859fa:	a823      	add	r0, sp, #140	; 0x8c
 80859fc:	f7fc f998 	bl	8081d30 <_Z12writeLogFile6String>
 8085a00:	a823      	add	r0, sp, #140	; 0x8c
 8085a02:	f005 fd3f 	bl	808b484 <_ZN6StringD1Ev>
          digitalWrite(lmp91000_1_en, HIGH);  //disable
 8085a06:	2101      	movs	r1, #1
 8085a08:	8828      	ldrh	r0, [r5, #0]
 8085a0a:	f007 fc2a 	bl	808d262 <digitalWrite>
 8085a0e:	e6dc      	b.n	80857ca <setup+0x3aa>
      ads1.setGain(GAIN_TWOTHIRDS);
 8085a10:	2100      	movs	r1, #0
 8085a12:	4815      	ldr	r0, [pc, #84]	; (8085a68 <setup+0x648>)
 8085a14:	f001 fc8e 	bl	8087334 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 8085a18:	e6f4      	b.n	8085804 <setup+0x3e4>
          Serial.println("Initialized LMP91000 for 2");
 8085a1a:	f007 f85d 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085a1e:	492c      	ldr	r1, [pc, #176]	; (8085ad0 <setup+0x6b0>)
 8085a20:	f005 ff9f 	bl	808b962 <_ZN5Print7printlnEPKc>
          if(debugging_enabled)
 8085a24:	6823      	ldr	r3, [r4, #0]
 8085a26:	b14b      	cbz	r3, 8085a3c <setup+0x61c>
            writeLogFile("Initialized LMP91000 for 2");
 8085a28:	4929      	ldr	r1, [pc, #164]	; (8085ad0 <setup+0x6b0>)
 8085a2a:	a823      	add	r0, sp, #140	; 0x8c
 8085a2c:	f005 fd74 	bl	808b518 <_ZN6StringC1EPKc>
 8085a30:	a823      	add	r0, sp, #140	; 0x8c
 8085a32:	f7fc f97d 	bl	8081d30 <_Z12writeLogFile6String>
 8085a36:	a823      	add	r0, sp, #140	; 0x8c
 8085a38:	f005 fd24 	bl	808b484 <_ZN6StringD1Ev>
          digitalWrite(lmp91000_2_en, HIGH);  //disable
 8085a3c:	2101      	movs	r1, #1
 8085a3e:	8828      	ldrh	r0, [r5, #0]
 8085a40:	f007 fc0f 	bl	808d262 <digitalWrite>
 8085a44:	e710      	b.n	8085868 <setup+0x448>
      ads2.setGain(GAIN_TWOTHIRDS);
 8085a46:	2100      	movs	r1, #0
 8085a48:	480d      	ldr	r0, [pc, #52]	; (8085a80 <setup+0x660>)
 8085a4a:	f001 fc73 	bl	8087334 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 8085a4e:	e728      	b.n	80858a2 <setup+0x482>
      Serial.println("Initialized BME Sensor");
 8085a50:	f007 f842 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085a54:	491f      	ldr	r1, [pc, #124]	; (8085ad4 <setup+0x6b4>)
 8085a56:	f005 ff84 	bl	808b962 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8085a5a:	6823      	ldr	r3, [r4, #0]
 8085a5c:	2b00      	cmp	r3, #0
 8085a5e:	f43f af38 	beq.w	80858d2 <setup+0x4b2>
        writeLogFile("Initialized BME Sensor");
 8085a62:	491c      	ldr	r1, [pc, #112]	; (8085ad4 <setup+0x6b4>)
 8085a64:	e72c      	b.n	80858c0 <setup+0x4a0>
 8085a66:	bf00      	nop
 8085a68:	20000570 	.word	0x20000570
 8085a6c:	08091cc5 	.word	0x08091cc5
 8085a70:	08091cf8 	.word	0x08091cf8
 8085a74:	200000cc 	.word	0x200000cc
 8085a78:	20000705 	.word	0x20000705
 8085a7c:	08091d1b 	.word	0x08091d1b
 8085a80:	20000576 	.word	0x20000576
 8085a84:	20000584 	.word	0x20000584
 8085a88:	08091d5f 	.word	0x08091d5f
 8085a8c:	20000c92 	.word	0x20000c92
 8085a90:	08091daa 	.word	0x08091daa
 8085a94:	08091ddd 	.word	0x08091ddd
 8085a98:	08091dfa 	.word	0x08091dfa
 8085a9c:	08091e05 	.word	0x08091e05
 8085aa0:	08091e12 	.word	0x08091e12
 8085aa4:	200006b0 	.word	0x200006b0
 8085aa8:	08091e1a 	.word	0x08091e1a
 8085aac:	08080cd9 	.word	0x08080cd9
 8085ab0:	20000708 	.word	0x20000708
 8085ab4:	08091e3e 	.word	0x08091e3e
 8085ab8:	20000e1c 	.word	0x20000e1c
 8085abc:	20000580 	.word	0x20000580
 8085ac0:	200006a4 	.word	0x200006a4
 8085ac4:	41a00000 	.word	0x41a00000
 8085ac8:	08091c45 	.word	0x08091c45
 8085acc:	08091ca9 	.word	0x08091ca9
 8085ad0:	08091d44 	.word	0x08091d44
 8085ad4:	08091d93 	.word	0x08091d93

08085ad8 <_Z20serialGetAverageTimev>:
void serialGetAverageTime(void){
 8085ad8:	b510      	push	{r4, lr}
 8085ada:	b086      	sub	sp, #24
    Serial.println();
 8085adc:	f006 fffc 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.print(measurements_to_average);
 8085ae0:	4c28      	ldr	r4, [pc, #160]	; (8085b84 <_Z20serialGetAverageTimev+0xac>)
    Serial.println();
 8085ae2:	f005 ff32 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 8085ae6:	f006 fff7 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085aea:	4927      	ldr	r1, [pc, #156]	; (8085b88 <_Z20serialGetAverageTimev+0xb0>)
 8085aec:	f005 ff26 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8085af0:	f006 fff2 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085af4:	220a      	movs	r2, #10
 8085af6:	6821      	ldr	r1, [r4, #0]
 8085af8:	f7ff f90e 	bl	8084d18 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println("(~2 second) measurements");
 8085afc:	f006 ffec 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085b00:	4922      	ldr	r1, [pc, #136]	; (8085b8c <_Z20serialGetAverageTimev+0xb4>)
 8085b02:	f005 ff2e 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 8085b06:	f006 ffe7 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085b0a:	4921      	ldr	r1, [pc, #132]	; (8085b90 <_Z20serialGetAverageTimev+0xb8>)
 8085b0c:	f005 ff16 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085b10:	f006 ffe2 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085b14:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085b18:	f006 f876 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085b1c:	f006 ffdc 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085b20:	220d      	movs	r2, #13
 8085b22:	4601      	mov	r1, r0
 8085b24:	a802      	add	r0, sp, #8
 8085b26:	f006 f8d9 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085b2a:	a802      	add	r0, sp, #8
 8085b2c:	f005 feb8 	bl	808b8a0 <_ZNK6String5toIntEv>
    if(tempValue >= 1 && tempValue < 10000){
 8085b30:	f242 730e 	movw	r3, #9998	; 0x270e
    int tempValue = tempString.toInt();
 8085b34:	9001      	str	r0, [sp, #4]
    if(tempValue >= 1 && tempValue < 10000){
 8085b36:	3801      	subs	r0, #1
 8085b38:	4298      	cmp	r0, r3
 8085b3a:	d81c      	bhi.n	8085b76 <_Z20serialGetAverageTimev+0x9e>
        Serial.print("\n\rNew Frequency: ");
 8085b3c:	f006 ffcc 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085b40:	4914      	ldr	r1, [pc, #80]	; (8085b94 <_Z20serialGetAverageTimev+0xbc>)
 8085b42:	f005 fefb 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085b46:	f006 ffc7 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085b4a:	220a      	movs	r2, #10
 8085b4c:	9901      	ldr	r1, [sp, #4]
 8085b4e:	f7ff f902 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        Serial.println("(~2 second) measurements");
 8085b52:	f006 ffc1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085b56:	490d      	ldr	r1, [pc, #52]	; (8085b8c <_Z20serialGetAverageTimev+0xb4>)
 8085b58:	f005 ff03 	bl	808b962 <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8085b5c:	9b01      	ldr	r3, [sp, #4]
 8085b5e:	6023      	str	r3, [r4, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8085b60:	f007 fbc2 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8085b64:	2074      	movs	r0, #116	; 0x74
 8085b66:	a901      	add	r1, sp, #4
 8085b68:	f7fb f868 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085b6c:	a802      	add	r0, sp, #8
 8085b6e:	f005 fc89 	bl	808b484 <_ZN6StringD1Ev>
}
 8085b72:	b006      	add	sp, #24
 8085b74:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085b76:	f006 ffaf 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085b7a:	4907      	ldr	r1, [pc, #28]	; (8085b98 <_Z20serialGetAverageTimev+0xc0>)
 8085b7c:	f005 fef1 	bl	808b962 <_ZN5Print7printlnEPKc>
 8085b80:	e7f4      	b.n	8085b6c <_Z20serialGetAverageTimev+0x94>
 8085b82:	bf00      	nop
 8085b84:	20000790 	.word	0x20000790
 8085b88:	08091e51 	.word	0x08091e51
 8085b8c:	08091e65 	.word	0x08091e65
 8085b90:	08091e7e 	.word	0x08091e7e
 8085b94:	08091e91 	.word	0x08091e91
 8085b98:	08090c04 	.word	0x08090c04

08085b9c <_Z16serialGetCo2Zerov>:
void serialGetCo2Zero(void){
 8085b9c:	b510      	push	{r4, lr}
 8085b9e:	b086      	sub	sp, #24
    Serial.println();
 8085ba0:	f006 ff9a 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.print(CO2_zero);
 8085ba4:	4c25      	ldr	r4, [pc, #148]	; (8085c3c <_Z16serialGetCo2Zerov+0xa0>)
    Serial.println();
 8085ba6:	f005 fed0 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 8085baa:	f006 ff95 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085bae:	4924      	ldr	r1, [pc, #144]	; (8085c40 <_Z16serialGetCo2Zerov+0xa4>)
 8085bb0:	f005 fec4 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 8085bb4:	f006 ff90 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085bb8:	220a      	movs	r2, #10
 8085bba:	6821      	ldr	r1, [r4, #0]
 8085bbc:	f7ff f8ac 	bl	8084d18 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 8085bc0:	f006 ff8a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085bc4:	491f      	ldr	r1, [pc, #124]	; (8085c44 <_Z16serialGetCo2Zerov+0xa8>)
 8085bc6:	f005 fecc 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 8085bca:	f006 ff85 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085bce:	491e      	ldr	r1, [pc, #120]	; (8085c48 <_Z16serialGetCo2Zerov+0xac>)
 8085bd0:	f005 feb4 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085bd4:	f006 ff80 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085bd8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085bdc:	f006 f814 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085be0:	f006 ff7a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085be4:	220d      	movs	r2, #13
 8085be6:	4601      	mov	r1, r0
 8085be8:	a802      	add	r0, sp, #8
 8085bea:	f006 f877 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085bee:	a802      	add	r0, sp, #8
 8085bf0:	f005 fe56 	bl	808b8a0 <_ZNK6String5toIntEv>
 8085bf4:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085bf6:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085bfa:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085bfe:	d217      	bcs.n	8085c30 <_Z16serialGetCo2Zerov+0x94>
        Serial.print("\n\rNew CO2 zero: ");
 8085c00:	f006 ff6a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085c04:	4911      	ldr	r1, [pc, #68]	; (8085c4c <_Z16serialGetCo2Zerov+0xb0>)
 8085c06:	f005 fe99 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085c0a:	f006 ff65 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085c0e:	9901      	ldr	r1, [sp, #4]
 8085c10:	220a      	movs	r2, #10
 8085c12:	f7ff f8a0 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        CO2_zero = tempValue;
 8085c16:	9b01      	ldr	r3, [sp, #4]
 8085c18:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8085c1a:	f007 fb65 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8085c1e:	2004      	movs	r0, #4
 8085c20:	a901      	add	r1, sp, #4
 8085c22:	f7fb f80b 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085c26:	a802      	add	r0, sp, #8
 8085c28:	f005 fc2c 	bl	808b484 <_ZN6StringD1Ev>
}
 8085c2c:	b006      	add	sp, #24
 8085c2e:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085c30:	f006 ff52 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085c34:	4906      	ldr	r1, [pc, #24]	; (8085c50 <_Z16serialGetCo2Zerov+0xb4>)
 8085c36:	f005 fe94 	bl	808b962 <_ZN5Print7printlnEPKc>
 8085c3a:	e7f4      	b.n	8085c26 <_Z16serialGetCo2Zerov+0x8a>
 8085c3c:	200002d4 	.word	0x200002d4
 8085c40:	08091ea3 	.word	0x08091ea3
 8085c44:	08090c28 	.word	0x08090c28
 8085c48:	08091eb5 	.word	0x08091eb5
 8085c4c:	08091eca 	.word	0x08091eca
 8085c50:	08090c04 	.word	0x08090c04

08085c54 <_Z15serialGetCoZerov>:
void serialGetCoZero(void){
 8085c54:	b510      	push	{r4, lr}
 8085c56:	b086      	sub	sp, #24
    Serial.println();
 8085c58:	f006 ff3e 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.print(CO_zero);
 8085c5c:	4c26      	ldr	r4, [pc, #152]	; (8085cf8 <_Z15serialGetCoZerov+0xa4>)
    Serial.println();
 8085c5e:	f005 fe74 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current CO zero:");
 8085c62:	f006 ff39 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085c66:	4925      	ldr	r1, [pc, #148]	; (8085cfc <_Z15serialGetCoZerov+0xa8>)
 8085c68:	f005 fe68 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(CO_zero);
 8085c6c:	f006 ff34 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085c70:	220a      	movs	r2, #10
 8085c72:	6821      	ldr	r1, [r4, #0]
 8085c74:	f7ff f850 	bl	8084d18 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppb");
 8085c78:	f006 ff2e 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085c7c:	4920      	ldr	r1, [pc, #128]	; (8085d00 <_Z15serialGetCoZerov+0xac>)
 8085c7e:	f005 fe70 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 8085c82:	f006 ff29 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085c86:	491f      	ldr	r1, [pc, #124]	; (8085d04 <_Z15serialGetCoZerov+0xb0>)
 8085c88:	f005 fe58 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085c8c:	f006 ff24 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085c90:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085c94:	f005 ffb8 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085c98:	f006 ff1e 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085c9c:	220d      	movs	r2, #13
 8085c9e:	4601      	mov	r1, r0
 8085ca0:	a802      	add	r0, sp, #8
 8085ca2:	f006 f81b 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085ca6:	a802      	add	r0, sp, #8
 8085ca8:	f005 fdfa 	bl	808b8a0 <_ZNK6String5toIntEv>
    if(tempValue >= -5000 && tempValue < 5000){
 8085cac:	f242 730f 	movw	r3, #9999	; 0x270f
    int tempValue = tempString.toInt();
 8085cb0:	9001      	str	r0, [sp, #4]
    if(tempValue >= -5000 && tempValue < 5000){
 8085cb2:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8085cb6:	3008      	adds	r0, #8
 8085cb8:	4298      	cmp	r0, r3
 8085cba:	d817      	bhi.n	8085cec <_Z15serialGetCoZerov+0x98>
        Serial.print("\n\rNew CO zero: ");
 8085cbc:	f006 ff0c 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085cc0:	4911      	ldr	r1, [pc, #68]	; (8085d08 <_Z15serialGetCoZerov+0xb4>)
 8085cc2:	f005 fe3b 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085cc6:	f006 ff07 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085cca:	9901      	ldr	r1, [sp, #4]
 8085ccc:	220a      	movs	r2, #10
 8085cce:	f7ff f842 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        CO_zero = tempValue;
 8085cd2:	9b01      	ldr	r3, [sp, #4]
 8085cd4:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO_ZERO_MEM_ADDRESS, tempValue);
 8085cd6:	f007 fb07 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8085cda:	200c      	movs	r0, #12
 8085cdc:	a901      	add	r1, sp, #4
 8085cde:	f7fa ffad 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085ce2:	a802      	add	r0, sp, #8
 8085ce4:	f005 fbce 	bl	808b484 <_ZN6StringD1Ev>
}
 8085ce8:	b006      	add	sp, #24
 8085cea:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085cec:	f006 fef4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085cf0:	4906      	ldr	r1, [pc, #24]	; (8085d0c <_Z15serialGetCoZerov+0xb8>)
 8085cf2:	f005 fe36 	bl	808b962 <_ZN5Print7printlnEPKc>
 8085cf6:	e7f4      	b.n	8085ce2 <_Z15serialGetCoZerov+0x8e>
 8085cf8:	200002e8 	.word	0x200002e8
 8085cfc:	08091edb 	.word	0x08091edb
 8085d00:	08091eec 	.word	0x08091eec
 8085d04:	08091ef1 	.word	0x08091ef1
 8085d08:	08091f05 	.word	0x08091f05
 8085d0c:	08090c04 	.word	0x08090c04

08085d10 <_Z16serialGetPm1Zerov>:
void serialGetPm1Zero(void){
 8085d10:	b510      	push	{r4, lr}
 8085d12:	b086      	sub	sp, #24
    Serial.println();
 8085d14:	f006 fee0 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.print(PM_1_zero);
 8085d18:	4c25      	ldr	r4, [pc, #148]	; (8085db0 <_Z16serialGetPm1Zerov+0xa0>)
    Serial.println();
 8085d1a:	f005 fe16 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 8085d1e:	f006 fedb 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085d22:	4924      	ldr	r1, [pc, #144]	; (8085db4 <_Z16serialGetPm1Zerov+0xa4>)
 8085d24:	f005 fe0a 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 8085d28:	f006 fed6 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085d2c:	220a      	movs	r2, #10
 8085d2e:	6821      	ldr	r1, [r4, #0]
 8085d30:	f7fe fff2 	bl	8084d18 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ug/m3");
 8085d34:	f006 fed0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085d38:	491f      	ldr	r1, [pc, #124]	; (8085db8 <_Z16serialGetPm1Zerov+0xa8>)
 8085d3a:	f005 fe12 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 8085d3e:	f006 fecb 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085d42:	491e      	ldr	r1, [pc, #120]	; (8085dbc <_Z16serialGetPm1Zerov+0xac>)
 8085d44:	f005 fdfa 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085d48:	f006 fec6 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085d4c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085d50:	f005 ff5a 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085d54:	f006 fec0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085d58:	220d      	movs	r2, #13
 8085d5a:	4601      	mov	r1, r0
 8085d5c:	a802      	add	r0, sp, #8
 8085d5e:	f005 ffbd 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085d62:	a802      	add	r0, sp, #8
 8085d64:	f005 fd9c 	bl	808b8a0 <_ZNK6String5toIntEv>
 8085d68:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085d6a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085d6e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085d72:	d217      	bcs.n	8085da4 <_Z16serialGetPm1Zerov+0x94>
        Serial.print("\n\rNew PM1 zero: ");
 8085d74:	f006 feb0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085d78:	4911      	ldr	r1, [pc, #68]	; (8085dc0 <_Z16serialGetPm1Zerov+0xb0>)
 8085d7a:	f005 fddf 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085d7e:	f006 feab 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085d82:	9901      	ldr	r1, [sp, #4]
 8085d84:	220a      	movs	r2, #10
 8085d86:	f7fe ffe6 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_1_zero = tempValue;
 8085d8a:	9b01      	ldr	r3, [sp, #4]
 8085d8c:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 8085d8e:	f007 faab 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8085d92:	2014      	movs	r0, #20
 8085d94:	a901      	add	r1, sp, #4
 8085d96:	f7fa ff51 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085d9a:	a802      	add	r0, sp, #8
 8085d9c:	f005 fb72 	bl	808b484 <_ZN6StringD1Ev>
}
 8085da0:	b006      	add	sp, #24
 8085da2:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085da4:	f006 fe98 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085da8:	4906      	ldr	r1, [pc, #24]	; (8085dc4 <_Z16serialGetPm1Zerov+0xb4>)
 8085daa:	f005 fdda 	bl	808b962 <_ZN5Print7printlnEPKc>
 8085dae:	e7f4      	b.n	8085d9a <_Z16serialGetPm1Zerov+0x8a>
 8085db0:	2000030c 	.word	0x2000030c
 8085db4:	08091f15 	.word	0x08091f15
 8085db8:	08091f27 	.word	0x08091f27
 8085dbc:	08091f2e 	.word	0x08091f2e
 8085dc0:	08091f43 	.word	0x08091f43
 8085dc4:	08090c04 	.word	0x08090c04

08085dc8 <_Z17serialGetPm25Zerov>:
void serialGetPm25Zero(void){
 8085dc8:	b510      	push	{r4, lr}
 8085dca:	b086      	sub	sp, #24
    Serial.println();
 8085dcc:	f006 fe84 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.print(PM_25_zero);
 8085dd0:	4c25      	ldr	r4, [pc, #148]	; (8085e68 <_Z17serialGetPm25Zerov+0xa0>)
    Serial.println();
 8085dd2:	f005 fdba 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 8085dd6:	f006 fe7f 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085dda:	4924      	ldr	r1, [pc, #144]	; (8085e6c <_Z17serialGetPm25Zerov+0xa4>)
 8085ddc:	f005 fdae 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 8085de0:	f006 fe7a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085de4:	220a      	movs	r2, #10
 8085de6:	6821      	ldr	r1, [r4, #0]
 8085de8:	f7fe ff96 	bl	8084d18 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ug/m3");
 8085dec:	f006 fe74 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085df0:	491f      	ldr	r1, [pc, #124]	; (8085e70 <_Z17serialGetPm25Zerov+0xa8>)
 8085df2:	f005 fdb6 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 8085df6:	f006 fe6f 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085dfa:	491e      	ldr	r1, [pc, #120]	; (8085e74 <_Z17serialGetPm25Zerov+0xac>)
 8085dfc:	f005 fd9e 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085e00:	f006 fe6a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085e04:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085e08:	f005 fefe 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085e0c:	f006 fe64 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085e10:	220d      	movs	r2, #13
 8085e12:	4601      	mov	r1, r0
 8085e14:	a802      	add	r0, sp, #8
 8085e16:	f005 ff61 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085e1a:	a802      	add	r0, sp, #8
 8085e1c:	f005 fd40 	bl	808b8a0 <_ZNK6String5toIntEv>
 8085e20:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085e22:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085e26:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085e2a:	d217      	bcs.n	8085e5c <_Z17serialGetPm25Zerov+0x94>
        Serial.print("\n\rNew PM2.5 zero: ");
 8085e2c:	f006 fe54 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085e30:	4911      	ldr	r1, [pc, #68]	; (8085e78 <_Z17serialGetPm25Zerov+0xb0>)
 8085e32:	f005 fd83 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085e36:	f006 fe4f 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085e3a:	9901      	ldr	r1, [sp, #4]
 8085e3c:	220a      	movs	r2, #10
 8085e3e:	f7fe ff8a 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_25_zero = tempValue;
 8085e42:	9b01      	ldr	r3, [sp, #4]
 8085e44:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 8085e46:	f007 fa4f 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8085e4a:	201c      	movs	r0, #28
 8085e4c:	a901      	add	r1, sp, #4
 8085e4e:	f7fa fef5 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085e52:	a802      	add	r0, sp, #8
 8085e54:	f005 fb16 	bl	808b484 <_ZN6StringD1Ev>
}
 8085e58:	b006      	add	sp, #24
 8085e5a:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085e5c:	f006 fe3c 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085e60:	4906      	ldr	r1, [pc, #24]	; (8085e7c <_Z17serialGetPm25Zerov+0xb4>)
 8085e62:	f005 fd7e 	bl	808b962 <_ZN5Print7printlnEPKc>
 8085e66:	e7f4      	b.n	8085e52 <_Z17serialGetPm25Zerov+0x8a>
 8085e68:	20000314 	.word	0x20000314
 8085e6c:	08091f54 	.word	0x08091f54
 8085e70:	08091f27 	.word	0x08091f27
 8085e74:	08091f68 	.word	0x08091f68
 8085e78:	08091f7f 	.word	0x08091f7f
 8085e7c:	08090c04 	.word	0x08090c04

08085e80 <_Z17serialGetPm10Zerov>:
void serialGetPm10Zero(void){
 8085e80:	b510      	push	{r4, lr}
 8085e82:	b086      	sub	sp, #24
    Serial.println();
 8085e84:	f006 fe28 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.print(PM_10_zero);
 8085e88:	4c25      	ldr	r4, [pc, #148]	; (8085f20 <_Z17serialGetPm10Zerov+0xa0>)
    Serial.println();
 8085e8a:	f005 fd5e 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 8085e8e:	f006 fe23 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085e92:	4924      	ldr	r1, [pc, #144]	; (8085f24 <_Z17serialGetPm10Zerov+0xa4>)
 8085e94:	f005 fd52 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 8085e98:	f006 fe1e 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085e9c:	220a      	movs	r2, #10
 8085e9e:	6821      	ldr	r1, [r4, #0]
 8085ea0:	f7fe ff3a 	bl	8084d18 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" um/m3");
 8085ea4:	f006 fe18 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085ea8:	491f      	ldr	r1, [pc, #124]	; (8085f28 <_Z17serialGetPm10Zerov+0xa8>)
 8085eaa:	f005 fd5a 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 8085eae:	f006 fe13 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085eb2:	491e      	ldr	r1, [pc, #120]	; (8085f2c <_Z17serialGetPm10Zerov+0xac>)
 8085eb4:	f005 fd42 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085eb8:	f006 fe0e 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085ebc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085ec0:	f005 fea2 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085ec4:	f006 fe08 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085ec8:	220d      	movs	r2, #13
 8085eca:	4601      	mov	r1, r0
 8085ecc:	a802      	add	r0, sp, #8
 8085ece:	f005 ff05 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085ed2:	a802      	add	r0, sp, #8
 8085ed4:	f005 fce4 	bl	808b8a0 <_ZNK6String5toIntEv>
 8085ed8:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8085eda:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085ede:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085ee2:	d217      	bcs.n	8085f14 <_Z17serialGetPm10Zerov+0x94>
        Serial.print("\n\rNew PM10 zero: ");
 8085ee4:	f006 fdf8 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085ee8:	4911      	ldr	r1, [pc, #68]	; (8085f30 <_Z17serialGetPm10Zerov+0xb0>)
 8085eea:	f005 fd27 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085eee:	f006 fdf3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085ef2:	9901      	ldr	r1, [sp, #4]
 8085ef4:	220a      	movs	r2, #10
 8085ef6:	f7fe ff2e 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_10_zero = tempValue;
 8085efa:	9b01      	ldr	r3, [sp, #4]
 8085efc:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 8085efe:	f007 f9f3 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8085f02:	2024      	movs	r0, #36	; 0x24
 8085f04:	a901      	add	r1, sp, #4
 8085f06:	f7fa fe99 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085f0a:	a802      	add	r0, sp, #8
 8085f0c:	f005 faba 	bl	808b484 <_ZN6StringD1Ev>
}
 8085f10:	b006      	add	sp, #24
 8085f12:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085f14:	f006 fde0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085f18:	4906      	ldr	r1, [pc, #24]	; (8085f34 <_Z17serialGetPm10Zerov+0xb4>)
 8085f1a:	f005 fd22 	bl	808b962 <_ZN5Print7printlnEPKc>
 8085f1e:	e7f4      	b.n	8085f0a <_Z17serialGetPm10Zerov+0x8a>
 8085f20:	20000304 	.word	0x20000304
 8085f24:	08091f92 	.word	0x08091f92
 8085f28:	08091fa5 	.word	0x08091fa5
 8085f2c:	08091fac 	.word	0x08091fac
 8085f30:	08091fc2 	.word	0x08091fc2
 8085f34:	08090c04 	.word	0x08090c04

08085f38 <_Z24serialGetTemperatureZerov>:
void serialGetTemperatureZero(void){
 8085f38:	b510      	push	{r4, lr}
 8085f3a:	b086      	sub	sp, #24
    Serial.println();
 8085f3c:	f006 fdcc 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.print(temp_zero);
 8085f40:	4c24      	ldr	r4, [pc, #144]	; (8085fd4 <_Z24serialGetTemperatureZerov+0x9c>)
    Serial.println();
 8085f42:	f005 fd02 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 8085f46:	f006 fdc7 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085f4a:	4923      	ldr	r1, [pc, #140]	; (8085fd8 <_Z24serialGetTemperatureZerov+0xa0>)
 8085f4c:	f005 fcf6 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 8085f50:	f006 fdc2 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085f54:	220a      	movs	r2, #10
 8085f56:	6821      	ldr	r1, [r4, #0]
 8085f58:	f7fe fede 	bl	8084d18 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" Degrees C");
 8085f5c:	f006 fdbc 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085f60:	491e      	ldr	r1, [pc, #120]	; (8085fdc <_Z24serialGetTemperatureZerov+0xa4>)
 8085f62:	f005 fcfe 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 8085f66:	f006 fdb7 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085f6a:	491d      	ldr	r1, [pc, #116]	; (8085fe0 <_Z24serialGetTemperatureZerov+0xa8>)
 8085f6c:	f005 fce6 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085f70:	f006 fdb2 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085f74:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085f78:	f005 fe46 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085f7c:	f006 fdac 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085f80:	220d      	movs	r2, #13
 8085f82:	4601      	mov	r1, r0
 8085f84:	a802      	add	r0, sp, #8
 8085f86:	f005 fea9 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085f8a:	a802      	add	r0, sp, #8
 8085f8c:	f005 fc88 	bl	808b8a0 <_ZNK6String5toIntEv>
 8085f90:	9001      	str	r0, [sp, #4]
    if(tempValue >= -30 && tempValue < 30){
 8085f92:	301e      	adds	r0, #30
 8085f94:	283b      	cmp	r0, #59	; 0x3b
 8085f96:	d817      	bhi.n	8085fc8 <_Z24serialGetTemperatureZerov+0x90>
        Serial.print("\n\rNew Temperature zero: ");
 8085f98:	f006 fd9e 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085f9c:	4911      	ldr	r1, [pc, #68]	; (8085fe4 <_Z24serialGetTemperatureZerov+0xac>)
 8085f9e:	f005 fccd 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085fa2:	f006 fd99 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085fa6:	9901      	ldr	r1, [sp, #4]
 8085fa8:	220a      	movs	r2, #10
 8085faa:	f7fe fed4 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        temp_zero = tempValue;
 8085fae:	9b01      	ldr	r3, [sp, #4]
 8085fb0:	6023      	str	r3, [r4, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 8085fb2:	f007 f999 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8085fb6:	202c      	movs	r0, #44	; 0x2c
 8085fb8:	a901      	add	r1, sp, #4
 8085fba:	f7fa fe3f 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085fbe:	a802      	add	r0, sp, #8
 8085fc0:	f005 fa60 	bl	808b484 <_ZN6StringD1Ev>
}
 8085fc4:	b006      	add	sp, #24
 8085fc6:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085fc8:	f006 fd86 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085fcc:	4906      	ldr	r1, [pc, #24]	; (8085fe8 <_Z24serialGetTemperatureZerov+0xb0>)
 8085fce:	f005 fcc8 	bl	808b962 <_ZN5Print7printlnEPKc>
 8085fd2:	e7f4      	b.n	8085fbe <_Z24serialGetTemperatureZerov+0x86>
 8085fd4:	20000c9c 	.word	0x20000c9c
 8085fd8:	08091fd4 	.word	0x08091fd4
 8085fdc:	08090d62 	.word	0x08090d62
 8085fe0:	08091fee 	.word	0x08091fee
 8085fe4:	0809200b 	.word	0x0809200b
 8085fe8:	08090c04 	.word	0x08090c04

08085fec <_Z21serialGetPressureZerov>:
void serialGetPressureZero(void){
 8085fec:	b510      	push	{r4, lr}
 8085fee:	b086      	sub	sp, #24
    Serial.println();
 8085ff0:	f006 fd72 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.print(pressure_zero);
 8085ff4:	4c25      	ldr	r4, [pc, #148]	; (808608c <_Z21serialGetPressureZerov+0xa0>)
    Serial.println();
 8085ff6:	f005 fca8 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 8085ffa:	f006 fd6d 	bl	808cad8 <_Z16_fetch_usbserialv>
 8085ffe:	4924      	ldr	r1, [pc, #144]	; (8086090 <_Z21serialGetPressureZerov+0xa4>)
 8086000:	f005 fc9c 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8086004:	f006 fd68 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086008:	220a      	movs	r2, #10
 808600a:	6821      	ldr	r1, [r4, #0]
 808600c:	f7fe fe84 	bl	8084d18 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 8086010:	f006 fd62 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086014:	491f      	ldr	r1, [pc, #124]	; (8086094 <_Z21serialGetPressureZerov+0xa8>)
 8086016:	f005 fca4 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 808601a:	f006 fd5d 	bl	808cad8 <_Z16_fetch_usbserialv>
 808601e:	491e      	ldr	r1, [pc, #120]	; (8086098 <_Z21serialGetPressureZerov+0xac>)
 8086020:	f005 fc8c 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8086024:	f006 fd58 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086028:	f24c 3150 	movw	r1, #50000	; 0xc350
 808602c:	f005 fdec 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8086030:	f006 fd52 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086034:	220d      	movs	r2, #13
 8086036:	4601      	mov	r1, r0
 8086038:	a802      	add	r0, sp, #8
 808603a:	f005 fe4f 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808603e:	a802      	add	r0, sp, #8
 8086040:	f005 fc2e 	bl	808b8a0 <_ZNK6String5toIntEv>
 8086044:	9001      	str	r0, [sp, #4]
    if(tempValue >= -1000 && tempValue < 1000){
 8086046:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808604a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808604e:	d217      	bcs.n	8086080 <_Z21serialGetPressureZerov+0x94>
        Serial.print("\n\rNew Pressure zero: ");
 8086050:	f006 fd42 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086054:	4911      	ldr	r1, [pc, #68]	; (808609c <_Z21serialGetPressureZerov+0xb0>)
 8086056:	f005 fc71 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 808605a:	f006 fd3d 	bl	808cad8 <_Z16_fetch_usbserialv>
 808605e:	9901      	ldr	r1, [sp, #4]
 8086060:	220a      	movs	r2, #10
 8086062:	f7fe fe78 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        pressure_zero = tempValue;
 8086066:	9b01      	ldr	r3, [sp, #4]
 8086068:	6023      	str	r3, [r4, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 808606a:	f007 f93d 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808606e:	2034      	movs	r0, #52	; 0x34
 8086070:	a901      	add	r1, sp, #4
 8086072:	f7fa fde3 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8086076:	a802      	add	r0, sp, #8
 8086078:	f005 fa04 	bl	808b484 <_ZN6StringD1Ev>
}
 808607c:	b006      	add	sp, #24
 808607e:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8086080:	f006 fd2a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086084:	4906      	ldr	r1, [pc, #24]	; (80860a0 <_Z21serialGetPressureZerov+0xb4>)
 8086086:	f005 fc6c 	bl	808b962 <_ZN5Print7printlnEPKc>
 808608a:	e7f4      	b.n	8086076 <_Z21serialGetPressureZerov+0x8a>
 808608c:	200007e8 	.word	0x200007e8
 8086090:	08092024 	.word	0x08092024
 8086094:	08090c28 	.word	0x08090c28
 8086098:	0809203b 	.word	0x0809203b
 808609c:	08092055 	.word	0x08092055
 80860a0:	08090c04 	.word	0x08090c04

080860a4 <_Z21serialGetHumidityZerov>:
void serialGetHumidityZero(void){
 80860a4:	b510      	push	{r4, lr}
 80860a6:	b086      	sub	sp, #24
    Serial.println();
 80860a8:	f006 fd16 	bl	808cad8 <_Z16_fetch_usbserialv>
    Serial.print(rh_zero);
 80860ac:	4c24      	ldr	r4, [pc, #144]	; (8086140 <_Z21serialGetHumidityZerov+0x9c>)
    Serial.println();
 80860ae:	f005 fc4c 	bl	808b94a <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 80860b2:	f006 fd11 	bl	808cad8 <_Z16_fetch_usbserialv>
 80860b6:	4923      	ldr	r1, [pc, #140]	; (8086144 <_Z21serialGetHumidityZerov+0xa0>)
 80860b8:	f005 fc40 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 80860bc:	f006 fd0c 	bl	808cad8 <_Z16_fetch_usbserialv>
 80860c0:	220a      	movs	r2, #10
 80860c2:	6821      	ldr	r1, [r4, #0]
 80860c4:	f7fe fe28 	bl	8084d18 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" %");
 80860c8:	f006 fd06 	bl	808cad8 <_Z16_fetch_usbserialv>
 80860cc:	491e      	ldr	r1, [pc, #120]	; (8086148 <_Z21serialGetHumidityZerov+0xa4>)
 80860ce:	f005 fc48 	bl	808b962 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 80860d2:	f006 fd01 	bl	808cad8 <_Z16_fetch_usbserialv>
 80860d6:	491d      	ldr	r1, [pc, #116]	; (808614c <_Z21serialGetHumidityZerov+0xa8>)
 80860d8:	f005 fc30 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80860dc:	f006 fcfc 	bl	808cad8 <_Z16_fetch_usbserialv>
 80860e0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80860e4:	f005 fd90 	bl	808bc08 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80860e8:	f006 fcf6 	bl	808cad8 <_Z16_fetch_usbserialv>
 80860ec:	220d      	movs	r2, #13
 80860ee:	4601      	mov	r1, r0
 80860f0:	a802      	add	r0, sp, #8
 80860f2:	f005 fdf3 	bl	808bcdc <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80860f6:	a802      	add	r0, sp, #8
 80860f8:	f005 fbd2 	bl	808b8a0 <_ZNK6String5toIntEv>
 80860fc:	9001      	str	r0, [sp, #4]
    if(tempValue >= -50 && tempValue < 50){
 80860fe:	3032      	adds	r0, #50	; 0x32
 8086100:	2863      	cmp	r0, #99	; 0x63
 8086102:	d817      	bhi.n	8086134 <_Z21serialGetHumidityZerov+0x90>
        Serial.print("\n\rNew RH zero: ");
 8086104:	f006 fce8 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086108:	4911      	ldr	r1, [pc, #68]	; (8086150 <_Z21serialGetHumidityZerov+0xac>)
 808610a:	f005 fc17 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 808610e:	f006 fce3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086112:	9901      	ldr	r1, [sp, #4]
 8086114:	220a      	movs	r2, #10
 8086116:	f7fe fe1e 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        rh_zero = tempValue;
 808611a:	9b01      	ldr	r3, [sp, #4]
 808611c:	6023      	str	r3, [r4, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 808611e:	f007 f8e3 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8086122:	203c      	movs	r0, #60	; 0x3c
 8086124:	a901      	add	r1, sp, #4
 8086126:	f7fa fd89 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 808612a:	a802      	add	r0, sp, #8
 808612c:	f005 f9aa 	bl	808b484 <_ZN6StringD1Ev>
}
 8086130:	b006      	add	sp, #24
 8086132:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8086134:	f006 fcd0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086138:	4906      	ldr	r1, [pc, #24]	; (8086154 <_Z21serialGetHumidityZerov+0xb0>)
 808613a:	f005 fc12 	bl	808b962 <_ZN5Print7printlnEPKc>
 808613e:	e7f4      	b.n	808612a <_Z21serialGetHumidityZerov+0x86>
 8086140:	200007f0 	.word	0x200007f0
 8086144:	0809206b 	.word	0x0809206b
 8086148:	08090e07 	.word	0x08090e07
 808614c:	0809207c 	.word	0x0809207c
 8086150:	08092090 	.word	0x08092090
 8086154:	08090c04 	.word	0x08090c04

08086158 <_Z10serialMenuv>:
  incomingByte = '0';
 8086158:	2330      	movs	r3, #48	; 0x30
void serialMenu(){
 808615a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  incomingByte = '0';
 808615e:	4cab      	ldr	r4, [pc, #684]	; (808640c <_Z10serialMenuv+0x2b4>)
            if (! bme.performReading()) {
 8086160:	4dab      	ldr	r5, [pc, #684]	; (8086410 <_Z10serialMenuv+0x2b8>)
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 8086162:	4fac      	ldr	r7, [pc, #688]	; (8086414 <_Z10serialMenuv+0x2bc>)
void serialMenu(){
 8086164:	b08a      	sub	sp, #40	; 0x28
  incomingByte = '0';
 8086166:	7023      	strb	r3, [r4, #0]
    Serial.print("Menu>");
 8086168:	f006 fcb6 	bl	808cad8 <_Z16_fetch_usbserialv>
 808616c:	49aa      	ldr	r1, [pc, #680]	; (8086418 <_Z10serialMenuv+0x2c0>)
 808616e:	f005 fbe5 	bl	808b93c <_ZN5Print5printEPKc>
    Serial.flush();
 8086172:	f006 fcb1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086176:	6803      	ldr	r3, [r0, #0]
 8086178:	69db      	ldr	r3, [r3, #28]
 808617a:	4798      	blx	r3
    while(!Serial.available());
 808617c:	f006 fcac 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086180:	6803      	ldr	r3, [r0, #0]
 8086182:	691b      	ldr	r3, [r3, #16]
 8086184:	4798      	blx	r3
 8086186:	2800      	cmp	r0, #0
 8086188:	d0f8      	beq.n	808617c <_Z10serialMenuv+0x24>
    incomingByte = Serial.read();
 808618a:	f006 fca5 	bl	808cad8 <_Z16_fetch_usbserialv>
 808618e:	6803      	ldr	r3, [r0, #0]
 8086190:	695b      	ldr	r3, [r3, #20]
 8086192:	4798      	blx	r3
 8086194:	b2c0      	uxtb	r0, r0
    if(incomingByte == 'a'){
 8086196:	2861      	cmp	r0, #97	; 0x61
    incomingByte = Serial.read();
 8086198:	7020      	strb	r0, [r4, #0]
    if(incomingByte == 'a'){
 808619a:	d108      	bne.n	80861ae <_Z10serialMenuv+0x56>
        serialGetCo2Slope();
 808619c:	f7fc fe26 	bl	8082dec <_Z17serialGetCo2Slopev>
  while(incomingByte!= 'x')
 80861a0:	7823      	ldrb	r3, [r4, #0]
 80861a2:	2b78      	cmp	r3, #120	; 0x78
 80861a4:	d1e0      	bne.n	8086168 <_Z10serialMenuv+0x10>
  Serial.println("Exiting serial menu...");
 80861a6:	f006 fc97 	bl	808cad8 <_Z16_fetch_usbserialv>
 80861aa:	499c      	ldr	r1, [pc, #624]	; (808641c <_Z10serialMenuv+0x2c4>)
 80861ac:	e34c      	b.n	8086848 <_Z10serialMenuv+0x6f0>
    }else if(incomingByte == 'b'){
 80861ae:	2862      	cmp	r0, #98	; 0x62
 80861b0:	d102      	bne.n	80861b8 <_Z10serialMenuv+0x60>
        serialGetCo2Zero();
 80861b2:	f7ff fcf3 	bl	8085b9c <_Z16serialGetCo2Zerov>
 80861b6:	e7f3      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'c'){
 80861b8:	2863      	cmp	r0, #99	; 0x63
 80861ba:	d102      	bne.n	80861c2 <_Z10serialMenuv+0x6a>
        serialGetCoSlope();
 80861bc:	f7fc fe94 	bl	8082ee8 <_Z16serialGetCoSlopev>
 80861c0:	e7ee      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'd'){
 80861c2:	2864      	cmp	r0, #100	; 0x64
 80861c4:	d102      	bne.n	80861cc <_Z10serialMenuv+0x74>
        serialGetCoZero();
 80861c6:	f7ff fd45 	bl	8085c54 <_Z15serialGetCoZerov>
 80861ca:	e7e9      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'e'){
 80861cc:	2865      	cmp	r0, #101	; 0x65
 80861ce:	d102      	bne.n	80861d6 <_Z10serialMenuv+0x7e>
        serialGetPm1Slope();
 80861d0:	f7fc ff10 	bl	8082ff4 <_Z17serialGetPm1Slopev>
 80861d4:	e7e4      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'f'){
 80861d6:	2866      	cmp	r0, #102	; 0x66
 80861d8:	d102      	bne.n	80861e0 <_Z10serialMenuv+0x88>
         serialGetPm1Zero();
 80861da:	f7ff fd99 	bl	8085d10 <_Z16serialGetPm1Zerov>
 80861de:	e7df      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'g'){
 80861e0:	2867      	cmp	r0, #103	; 0x67
 80861e2:	d102      	bne.n	80861ea <_Z10serialMenuv+0x92>
        serialGetPm25Slope();
 80861e4:	f7fc ff82 	bl	80830ec <_Z18serialGetPm25Slopev>
 80861e8:	e7da      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'h'){
 80861ea:	2868      	cmp	r0, #104	; 0x68
 80861ec:	d102      	bne.n	80861f4 <_Z10serialMenuv+0x9c>
        serialGetPm25Zero();
 80861ee:	f7ff fdeb 	bl	8085dc8 <_Z17serialGetPm25Zerov>
 80861f2:	e7d5      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'i'){
 80861f4:	2869      	cmp	r0, #105	; 0x69
 80861f6:	d102      	bne.n	80861fe <_Z10serialMenuv+0xa6>
        serialGetPm10Slope();
 80861f8:	f7fc fff4 	bl	80831e4 <_Z18serialGetPm10Slopev>
 80861fc:	e7d0      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'j'){
 80861fe:	286a      	cmp	r0, #106	; 0x6a
 8086200:	d102      	bne.n	8086208 <_Z10serialMenuv+0xb0>
        serialGetPm10Zero();
 8086202:	f7ff fe3d 	bl	8085e80 <_Z17serialGetPm10Zerov>
 8086206:	e7cb      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'k'){
 8086208:	286b      	cmp	r0, #107	; 0x6b
 808620a:	d102      	bne.n	8086212 <_Z10serialMenuv+0xba>
        serialGetTemperatureSlope();
 808620c:	f7fd f866 	bl	80832dc <_Z25serialGetTemperatureSlopev>
 8086210:	e7c6      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'l'){
 8086212:	286c      	cmp	r0, #108	; 0x6c
 8086214:	d102      	bne.n	808621c <_Z10serialMenuv+0xc4>
        serialGetTemperatureZero();
 8086216:	f7ff fe8f 	bl	8085f38 <_Z24serialGetTemperatureZerov>
 808621a:	e7c1      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'm'){
 808621c:	286d      	cmp	r0, #109	; 0x6d
 808621e:	d102      	bne.n	8086226 <_Z10serialMenuv+0xce>
        serialGetPressureSlope();
 8086220:	f7fd f8d8 	bl	80833d4 <_Z22serialGetPressureSlopev>
 8086224:	e7bc      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'n'){
 8086226:	286e      	cmp	r0, #110	; 0x6e
 8086228:	d102      	bne.n	8086230 <_Z10serialMenuv+0xd8>
        serialGetPressureZero();
 808622a:	f7ff fedf 	bl	8085fec <_Z21serialGetPressureZerov>
 808622e:	e7b7      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'o'){
 8086230:	286f      	cmp	r0, #111	; 0x6f
 8086232:	d102      	bne.n	808623a <_Z10serialMenuv+0xe2>
        serialGetHumiditySlope();
 8086234:	f7fd f94a 	bl	80834cc <_Z22serialGetHumiditySlopev>
 8086238:	e7b2      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'p'){
 808623a:	2870      	cmp	r0, #112	; 0x70
 808623c:	d102      	bne.n	8086244 <_Z10serialMenuv+0xec>
        serialGetHumidityZero();
 808623e:	f7ff ff31 	bl	80860a4 <_Z21serialGetHumidityZerov>
 8086242:	e7ad      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'q'){
 8086244:	2871      	cmp	r0, #113	; 0x71
 8086246:	d10e      	bne.n	8086266 <_Z10serialMenuv+0x10e>
        Serial.println("Serial debugging enabled.");
 8086248:	f006 fc46 	bl	808cad8 <_Z16_fetch_usbserialv>
 808624c:	4974      	ldr	r1, [pc, #464]	; (8086420 <_Z10serialMenuv+0x2c8>)
 808624e:	f005 fb88 	bl	808b962 <_ZN5Print7printlnEPKc>
        debugging_enabled = 1;
 8086252:	2301      	movs	r3, #1
 8086254:	4e73      	ldr	r6, [pc, #460]	; (8086424 <_Z10serialMenuv+0x2cc>)
        debugging_enabled = 0;
 8086256:	6033      	str	r3, [r6, #0]
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8086258:	f007 f846 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808625c:	4631      	mov	r1, r6
 808625e:	2048      	movs	r0, #72	; 0x48
 8086260:	f7fa fcec 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
 8086264:	e79c      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'r'){
 8086266:	2872      	cmp	r0, #114	; 0x72
 8086268:	d107      	bne.n	808627a <_Z10serialMenuv+0x122>
        Serial.println("Serial debugging disabled.");
 808626a:	f006 fc35 	bl	808cad8 <_Z16_fetch_usbserialv>
 808626e:	496e      	ldr	r1, [pc, #440]	; (8086428 <_Z10serialMenuv+0x2d0>)
 8086270:	f005 fb77 	bl	808b962 <_ZN5Print7printlnEPKc>
        debugging_enabled = 0;
 8086274:	4e6b      	ldr	r6, [pc, #428]	; (8086424 <_Z10serialMenuv+0x2cc>)
 8086276:	2300      	movs	r3, #0
 8086278:	e7ed      	b.n	8086256 <_Z10serialMenuv+0xfe>
    }else if(incomingByte == 's'){
 808627a:	2873      	cmp	r0, #115	; 0x73
 808627c:	d10e      	bne.n	808629c <_Z10serialMenuv+0x144>
        Serial.println(String(HEADER_STRING));
 808627e:	f006 fc2b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086282:	4606      	mov	r6, r0
 8086284:	4969      	ldr	r1, [pc, #420]	; (808642c <_Z10serialMenuv+0x2d4>)
 8086286:	a806      	add	r0, sp, #24
 8086288:	f005 f946 	bl	808b518 <_ZN6StringC1EPKc>
 808628c:	4630      	mov	r0, r6
 808628e:	9906      	ldr	r1, [sp, #24]
 8086290:	f005 fb67 	bl	808b962 <_ZN5Print7printlnEPKc>
        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 8086294:	a806      	add	r0, sp, #24
 8086296:	f005 f8f5 	bl	808b484 <_ZN6StringD1Ev>
 808629a:	e781      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 't'){
 808629c:	2874      	cmp	r0, #116	; 0x74
 808629e:	d102      	bne.n	80862a6 <_Z10serialMenuv+0x14e>
        serialGetTimeDate();
 80862a0:	f7fc fd54 	bl	8082d4c <_Z17serialGetTimeDatev>
 80862a4:	e77c      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'u'){
 80862a6:	2875      	cmp	r0, #117	; 0x75
 80862a8:	d102      	bne.n	80862b0 <_Z10serialMenuv+0x158>
        serialGetZone();
 80862aa:	f7fe ff67 	bl	808517c <_Z13serialGetZonev>
 80862ae:	e777      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'v'){
 80862b0:	2876      	cmp	r0, #118	; 0x76
 80862b2:	d102      	bne.n	80862ba <_Z10serialMenuv+0x162>
        serialGetDeviceId();
 80862b4:	f7fe fede 	bl	8085074 <_Z17serialGetDeviceIdv>
 80862b8:	e772      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'w'){
 80862ba:	2877      	cmp	r0, #119	; 0x77
 80862bc:	d102      	bne.n	80862c4 <_Z10serialMenuv+0x16c>
        serialGetWifiCredentials();
 80862be:	f7fc fbf5 	bl	8082aac <_Z24serialGetWifiCredentialsv>
 80862c2:	e76d      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'y'){
 80862c4:	2879      	cmp	r0, #121	; 0x79
 80862c6:	d112      	bne.n	80862ee <_Z10serialMenuv+0x196>
        if(serial_cellular_enabled == 0){
 80862c8:	4e59      	ldr	r6, [pc, #356]	; (8086430 <_Z10serialMenuv+0x2d8>)
 80862ca:	6833      	ldr	r3, [r6, #0]
 80862cc:	b95b      	cbnz	r3, 80862e6 <_Z10serialMenuv+0x18e>
            Serial.println("Enabling Cellular.");
 80862ce:	f006 fc03 	bl	808cad8 <_Z16_fetch_usbserialv>
 80862d2:	4958      	ldr	r1, [pc, #352]	; (8086434 <_Z10serialMenuv+0x2dc>)
            Serial.println("Cellular already enabled.");
 80862d4:	f005 fb45 	bl	808b962 <_ZN5Print7printlnEPKc>
        serial_cellular_enabled = 1;
 80862d8:	2301      	movs	r3, #1
        serial_cellular_enabled = 0;
 80862da:	6033      	str	r3, [r6, #0]
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 80862dc:	f007 f804 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80862e0:	2044      	movs	r0, #68	; 0x44
 80862e2:	4953      	ldr	r1, [pc, #332]	; (8086430 <_Z10serialMenuv+0x2d8>)
 80862e4:	e7bc      	b.n	8086260 <_Z10serialMenuv+0x108>
            Serial.println("Cellular already enabled.");
 80862e6:	f006 fbf7 	bl	808cad8 <_Z16_fetch_usbserialv>
 80862ea:	4953      	ldr	r1, [pc, #332]	; (8086438 <_Z10serialMenuv+0x2e0>)
 80862ec:	e7f2      	b.n	80862d4 <_Z10serialMenuv+0x17c>
    }else if(incomingByte == 'z'){
 80862ee:	287a      	cmp	r0, #122	; 0x7a
 80862f0:	d113      	bne.n	808631a <_Z10serialMenuv+0x1c2>
        if(serial_cellular_enabled == 1){
 80862f2:	4e4f      	ldr	r6, [pc, #316]	; (8086430 <_Z10serialMenuv+0x2d8>)
 80862f4:	6833      	ldr	r3, [r6, #0]
 80862f6:	2b01      	cmp	r3, #1
 80862f8:	d109      	bne.n	808630e <_Z10serialMenuv+0x1b6>
            Serial.println("Disabling Cellular");
 80862fa:	f006 fbed 	bl	808cad8 <_Z16_fetch_usbserialv>
 80862fe:	494f      	ldr	r1, [pc, #316]	; (808643c <_Z10serialMenuv+0x2e4>)
 8086300:	f005 fb2f 	bl	808b962 <_ZN5Print7printlnEPKc>
            Cellular.off();
 8086304:	484e      	ldr	r0, [pc, #312]	; (8086440 <_Z10serialMenuv+0x2e8>)
 8086306:	f7fa fd63 	bl	8080dd0 <_ZN5spark13CellularClass3offEv>
        serial_cellular_enabled = 0;
 808630a:	2300      	movs	r3, #0
 808630c:	e7e5      	b.n	80862da <_Z10serialMenuv+0x182>
            Serial.println("Cellular already disabled.");
 808630e:	f006 fbe3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086312:	494c      	ldr	r1, [pc, #304]	; (8086444 <_Z10serialMenuv+0x2ec>)
 8086314:	f005 fb25 	bl	808b962 <_ZN5Print7printlnEPKc>
 8086318:	e7f7      	b.n	808630a <_Z10serialMenuv+0x1b2>
    }else if(incomingByte == 'F'){
 808631a:	2846      	cmp	r0, #70	; 0x46
 808631c:	d110      	bne.n	8086340 <_Z10serialMenuv+0x1e8>
        if(temperature_units == CELCIUS){
 808631e:	4b4a      	ldr	r3, [pc, #296]	; (8086448 <_Z10serialMenuv+0x2f0>)
 8086320:	681a      	ldr	r2, [r3, #0]
 8086322:	2a01      	cmp	r2, #1
 8086324:	d102      	bne.n	808632c <_Z10serialMenuv+0x1d4>
            temperature_units = FARENHEIT;
 8086326:	2200      	movs	r2, #0
            temperature_units = CELCIUS;
 8086328:	601a      	str	r2, [r3, #0]
 808632a:	e004      	b.n	8086336 <_Z10serialMenuv+0x1de>
            Serial.println("Temperature units already set to Fareneit.");
 808632c:	f006 fbd4 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086330:	4946      	ldr	r1, [pc, #280]	; (808644c <_Z10serialMenuv+0x2f4>)
 8086332:	f005 fb16 	bl	808b962 <_ZN5Print7printlnEPKc>
        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8086336:	f006 ffd7 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808633a:	2060      	movs	r0, #96	; 0x60
 808633c:	4942      	ldr	r1, [pc, #264]	; (8086448 <_Z10serialMenuv+0x2f0>)
 808633e:	e78f      	b.n	8086260 <_Z10serialMenuv+0x108>
    }else if(incomingByte == 'C'){
 8086340:	2843      	cmp	r0, #67	; 0x43
 8086342:	d108      	bne.n	8086356 <_Z10serialMenuv+0x1fe>
        if(temperature_units == FARENHEIT){
 8086344:	4b40      	ldr	r3, [pc, #256]	; (8086448 <_Z10serialMenuv+0x2f0>)
 8086346:	681a      	ldr	r2, [r3, #0]
 8086348:	b90a      	cbnz	r2, 808634e <_Z10serialMenuv+0x1f6>
            temperature_units = CELCIUS;
 808634a:	2201      	movs	r2, #1
 808634c:	e7ec      	b.n	8086328 <_Z10serialMenuv+0x1d0>
            Serial.println("Temperature units already set to Celcius.");
 808634e:	f006 fbc3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086352:	493f      	ldr	r1, [pc, #252]	; (8086450 <_Z10serialMenuv+0x2f8>)
 8086354:	e7ed      	b.n	8086332 <_Z10serialMenuv+0x1da>
    }else if(incomingByte == 'D'){
 8086356:	2844      	cmp	r0, #68	; 0x44
 8086358:	d113      	bne.n	8086382 <_Z10serialMenuv+0x22a>
        if(new_temperature_sensor_enabled == 1){
 808635a:	4b3e      	ldr	r3, [pc, #248]	; (8086454 <_Z10serialMenuv+0x2fc>)
 808635c:	681a      	ldr	r2, [r3, #0]
 808635e:	2a01      	cmp	r2, #1
 8086360:	d10b      	bne.n	808637a <_Z10serialMenuv+0x222>
            new_temperature_sensor_enabled = 0;
 8086362:	2200      	movs	r2, #0
 8086364:	601a      	str	r2, [r3, #0]
            Serial.println("Disabling new temperature sensor");
 8086366:	f006 fbb7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808636a:	493b      	ldr	r1, [pc, #236]	; (8086458 <_Z10serialMenuv+0x300>)
            Serial.println("Temperature sensor already disabled");
 808636c:	f005 faf9 	bl	808b962 <_ZN5Print7printlnEPKc>
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8086370:	f006 ffba 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8086374:	2068      	movs	r0, #104	; 0x68
 8086376:	4937      	ldr	r1, [pc, #220]	; (8086454 <_Z10serialMenuv+0x2fc>)
 8086378:	e772      	b.n	8086260 <_Z10serialMenuv+0x108>
            Serial.println("Temperature sensor already disabled");
 808637a:	f006 fbad 	bl	808cad8 <_Z16_fetch_usbserialv>
 808637e:	4937      	ldr	r1, [pc, #220]	; (808645c <_Z10serialMenuv+0x304>)
 8086380:	e7f4      	b.n	808636c <_Z10serialMenuv+0x214>
    }else if(incomingByte == 'E'){
 8086382:	2845      	cmp	r0, #69	; 0x45
 8086384:	d10d      	bne.n	80863a2 <_Z10serialMenuv+0x24a>
        if(new_temperature_sensor_enabled == 1){
 8086386:	4b33      	ldr	r3, [pc, #204]	; (8086454 <_Z10serialMenuv+0x2fc>)
 8086388:	681a      	ldr	r2, [r3, #0]
 808638a:	2a01      	cmp	r2, #1
 808638c:	d103      	bne.n	8086396 <_Z10serialMenuv+0x23e>
            Serial.println("Temperature sensor already enabled");
 808638e:	f006 fba3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086392:	4933      	ldr	r1, [pc, #204]	; (8086460 <_Z10serialMenuv+0x308>)
 8086394:	e7ea      	b.n	808636c <_Z10serialMenuv+0x214>
            new_temperature_sensor_enabled = 1;
 8086396:	2201      	movs	r2, #1
 8086398:	601a      	str	r2, [r3, #0]
            Serial.println("Temperatue sensor now enabled");
 808639a:	f006 fb9d 	bl	808cad8 <_Z16_fetch_usbserialv>
 808639e:	4931      	ldr	r1, [pc, #196]	; (8086464 <_Z10serialMenuv+0x30c>)
 80863a0:	e7e4      	b.n	808636c <_Z10serialMenuv+0x214>
    }else if(incomingByte == 'G'){      //enable analog reading of ozone and disable esp reading of ozone
 80863a2:	2847      	cmp	r0, #71	; 0x47
 80863a4:	d113      	bne.n	80863ce <_Z10serialMenuv+0x276>
        if(ozone_analog_enabled == 1){
 80863a6:	4b30      	ldr	r3, [pc, #192]	; (8086468 <_Z10serialMenuv+0x310>)
 80863a8:	681a      	ldr	r2, [r3, #0]
 80863aa:	2a01      	cmp	r2, #1
 80863ac:	d109      	bne.n	80863c2 <_Z10serialMenuv+0x26a>
            Serial.println("Analog reading of ozone already enabled");
 80863ae:	f006 fb93 	bl	808cad8 <_Z16_fetch_usbserialv>
 80863b2:	492e      	ldr	r1, [pc, #184]	; (808646c <_Z10serialMenuv+0x314>)
            Serial.println("Analog reading of ozone now enabled");
 80863b4:	f005 fad5 	bl	808b962 <_ZN5Print7printlnEPKc>
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80863b8:	f006 ff96 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80863bc:	206c      	movs	r0, #108	; 0x6c
 80863be:	492a      	ldr	r1, [pc, #168]	; (8086468 <_Z10serialMenuv+0x310>)
 80863c0:	e74e      	b.n	8086260 <_Z10serialMenuv+0x108>
            ozone_analog_enabled = 1;
 80863c2:	2201      	movs	r2, #1
 80863c4:	601a      	str	r2, [r3, #0]
            Serial.println("Analog reading of ozone now enabled");
 80863c6:	f006 fb87 	bl	808cad8 <_Z16_fetch_usbserialv>
 80863ca:	4929      	ldr	r1, [pc, #164]	; (8086470 <_Z10serialMenuv+0x318>)
 80863cc:	e7f2      	b.n	80863b4 <_Z10serialMenuv+0x25c>
    }else if(incomingByte == 'H'){      //disable analog reading of ozone and read from esp
 80863ce:	2848      	cmp	r0, #72	; 0x48
 80863d0:	d10c      	bne.n	80863ec <_Z10serialMenuv+0x294>
        if(ozone_analog_enabled == 0){
 80863d2:	4b25      	ldr	r3, [pc, #148]	; (8086468 <_Z10serialMenuv+0x310>)
 80863d4:	681a      	ldr	r2, [r3, #0]
 80863d6:	b91a      	cbnz	r2, 80863e0 <_Z10serialMenuv+0x288>
            Serial.println("Digital reading of ozone already enabled");
 80863d8:	f006 fb7e 	bl	808cad8 <_Z16_fetch_usbserialv>
 80863dc:	4925      	ldr	r1, [pc, #148]	; (8086474 <_Z10serialMenuv+0x31c>)
 80863de:	e7e9      	b.n	80863b4 <_Z10serialMenuv+0x25c>
            ozone_analog_enabled = 0;
 80863e0:	2200      	movs	r2, #0
 80863e2:	601a      	str	r2, [r3, #0]
            Serial.println("Digital reading of ozone now enabled");
 80863e4:	f006 fb78 	bl	808cad8 <_Z16_fetch_usbserialv>
 80863e8:	4923      	ldr	r1, [pc, #140]	; (8086478 <_Z10serialMenuv+0x320>)
 80863ea:	e7e3      	b.n	80863b4 <_Z10serialMenuv+0x25c>
    }else if(incomingByte == 'I'){      //disable analog reading of ozone and read from esp
 80863ec:	2849      	cmp	r0, #73	; 0x49
 80863ee:	d102      	bne.n	80863f6 <_Z10serialMenuv+0x29e>
        serialGetAverageTime();
 80863f0:	f7ff fb72 	bl	8085ad8 <_Z20serialGetAverageTimev>
 80863f4:	e6d4      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'J'){
 80863f6:	284a      	cmp	r0, #74	; 0x4a
 80863f8:	d142      	bne.n	8086480 <_Z10serialMenuv+0x328>
        resetESP();
 80863fa:	f7fc fa7b 	bl	80828f4 <_Z8resetESPv>
        Serial.println("ESP reset!");
 80863fe:	f006 fb6b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086402:	491e      	ldr	r1, [pc, #120]	; (808647c <_Z10serialMenuv+0x324>)
            Serial.println("ABC logic already enabled");
 8086404:	f005 faad 	bl	808b962 <_ZN5Print7printlnEPKc>
 8086408:	e6ca      	b.n	80861a0 <_Z10serialMenuv+0x48>
 808640a:	bf00      	nop
 808640c:	20000704 	.word	0x20000704
 8086410:	20000584 	.word	0x20000584
 8086414:	42c80000 	.word	0x42c80000
 8086418:	080920a0 	.word	0x080920a0
 808641c:	08092715 	.word	0x08092715
 8086420:	080920a6 	.word	0x080920a6
 8086424:	20000628 	.word	0x20000628
 8086428:	080920c0 	.word	0x080920c0
 808642c:	080918aa 	.word	0x080918aa
 8086430:	20000c74 	.word	0x20000c74
 8086434:	080920db 	.word	0x080920db
 8086438:	080920ee 	.word	0x080920ee
 808643c:	08092108 	.word	0x08092108
 8086440:	200011b4 	.word	0x200011b4
 8086444:	0809211b 	.word	0x0809211b
 8086448:	20000ca0 	.word	0x20000ca0
 808644c:	08092136 	.word	0x08092136
 8086450:	08092161 	.word	0x08092161
 8086454:	20000794 	.word	0x20000794
 8086458:	0809218b 	.word	0x0809218b
 808645c:	080921ac 	.word	0x080921ac
 8086460:	080921d0 	.word	0x080921d0
 8086464:	080921f3 	.word	0x080921f3
 8086468:	2000079c 	.word	0x2000079c
 808646c:	08092211 	.word	0x08092211
 8086470:	08092239 	.word	0x08092239
 8086474:	0809225d 	.word	0x0809225d
 8086478:	08092286 	.word	0x08092286
 808647c:	08091dfa 	.word	0x08091dfa
    }else if(incomingByte == 'K'){
 8086480:	284b      	cmp	r0, #75	; 0x4b
 8086482:	d107      	bne.n	8086494 <_Z10serialMenuv+0x33c>
      Serial.println("Outputting GPS continuously");
 8086484:	f006 fb28 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086488:	49b2      	ldr	r1, [pc, #712]	; (8086754 <_Z10serialMenuv+0x5fc>)
 808648a:	f005 fa6a 	bl	808b962 <_ZN5Print7printlnEPKc>
      echoGps();
 808648e:	f7fb f867 	bl	8081560 <_Z7echoGpsv>
 8086492:	e685      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'L'){
 8086494:	284c      	cmp	r0, #76	; 0x4c
 8086496:	d102      	bne.n	808649e <_Z10serialMenuv+0x346>
      serialResetSettings();
 8086498:	f7fc fc20 	bl	8082cdc <_Z19serialResetSettingsv>
 808649c:	e680      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'M'){
 808649e:	284d      	cmp	r0, #77	; 0x4d
 80864a0:	d113      	bne.n	80864ca <_Z10serialMenuv+0x372>
      if(battery_threshold_enable == 1){
 80864a2:	4ead      	ldr	r6, [pc, #692]	; (8086758 <_Z10serialMenuv+0x600>)
 80864a4:	6833      	ldr	r3, [r6, #0]
 80864a6:	2b01      	cmp	r3, #1
 80864a8:	d103      	bne.n	80864b2 <_Z10serialMenuv+0x35a>
          Serial.println("Battery threshold already enabled");
 80864aa:	f006 fb15 	bl	808cad8 <_Z16_fetch_usbserialv>
 80864ae:	49ab      	ldr	r1, [pc, #684]	; (808675c <_Z10serialMenuv+0x604>)
 80864b0:	e7a8      	b.n	8086404 <_Z10serialMenuv+0x2ac>
          Serial.println("Enabling battery threshold limiting");
 80864b2:	f006 fb11 	bl	808cad8 <_Z16_fetch_usbserialv>
 80864b6:	49aa      	ldr	r1, [pc, #680]	; (8086760 <_Z10serialMenuv+0x608>)
 80864b8:	f005 fa53 	bl	808b962 <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 1;
 80864bc:	2301      	movs	r3, #1
          battery_threshold_enable = 0;
 80864be:	6033      	str	r3, [r6, #0]
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80864c0:	f006 ff12 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80864c4:	4631      	mov	r1, r6
 80864c6:	2078      	movs	r0, #120	; 0x78
 80864c8:	e6ca      	b.n	8086260 <_Z10serialMenuv+0x108>
    }else if(incomingByte == 'N'){
 80864ca:	284e      	cmp	r0, #78	; 0x4e
 80864cc:	d10d      	bne.n	80864ea <_Z10serialMenuv+0x392>
      if(battery_threshold_enable == 0){
 80864ce:	4ea2      	ldr	r6, [pc, #648]	; (8086758 <_Z10serialMenuv+0x600>)
 80864d0:	6833      	ldr	r3, [r6, #0]
 80864d2:	b91b      	cbnz	r3, 80864dc <_Z10serialMenuv+0x384>
          Serial.println("Battery threshold already disabled");
 80864d4:	f006 fb00 	bl	808cad8 <_Z16_fetch_usbserialv>
 80864d8:	49a2      	ldr	r1, [pc, #648]	; (8086764 <_Z10serialMenuv+0x60c>)
 80864da:	e793      	b.n	8086404 <_Z10serialMenuv+0x2ac>
          Serial.println("Disabling battery threshold limiting");
 80864dc:	f006 fafc 	bl	808cad8 <_Z16_fetch_usbserialv>
 80864e0:	49a1      	ldr	r1, [pc, #644]	; (8086768 <_Z10serialMenuv+0x610>)
 80864e2:	f005 fa3e 	bl	808b962 <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 0;
 80864e6:	2300      	movs	r3, #0
 80864e8:	e7e9      	b.n	80864be <_Z10serialMenuv+0x366>
    }else if(incomingByte == 'O'){
 80864ea:	284f      	cmp	r0, #79	; 0x4f
 80864ec:	d107      	bne.n	80864fe <_Z10serialMenuv+0x3a6>
        Serial.println("Enabling low power for gps");
 80864ee:	f006 faf3 	bl	808cad8 <_Z16_fetch_usbserialv>
 80864f2:	499e      	ldr	r1, [pc, #632]	; (808676c <_Z10serialMenuv+0x614>)
 80864f4:	f005 fa35 	bl	808b962 <_ZN5Print7printlnEPKc>
        enableLowPowerGPS();
 80864f8:	f7fb f89c 	bl	8081634 <_Z17enableLowPowerGPSv>
 80864fc:	e650      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte  == 'P'){
 80864fe:	2850      	cmp	r0, #80	; 0x50
 8086500:	d109      	bne.n	8086516 <_Z10serialMenuv+0x3be>
        Serial.println("Turning off batfet");
 8086502:	f006 fae9 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086506:	499a      	ldr	r1, [pc, #616]	; (8086770 <_Z10serialMenuv+0x618>)
 8086508:	f005 fa2b 	bl	808b962 <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01101011);   //turn off batfet
 808650c:	216b      	movs	r1, #107	; 0x6b
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 808650e:	2007      	movs	r0, #7
 8086510:	f7fa fd36 	bl	8080f80 <_Z13writeRegisterhh>
 8086514:	e644      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'Q'){
 8086516:	2851      	cmp	r0, #81	; 0x51
 8086518:	d106      	bne.n	8086528 <_Z10serialMenuv+0x3d0>
        Serial.println("Allowing batfet to turn on");
 808651a:	f006 fadd 	bl	808cad8 <_Z16_fetch_usbserialv>
 808651e:	4995      	ldr	r1, [pc, #596]	; (8086774 <_Z10serialMenuv+0x61c>)
 8086520:	f005 fa1f 	bl	808b962 <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 8086524:	214b      	movs	r1, #75	; 0x4b
 8086526:	e7f2      	b.n	808650e <_Z10serialMenuv+0x3b6>
    }else if(incomingByte == 'R'){
 8086528:	2852      	cmp	r0, #82	; 0x52
 808652a:	d117      	bne.n	808655c <_Z10serialMenuv+0x404>
        if(abc_logic_enabled){
 808652c:	4e92      	ldr	r6, [pc, #584]	; (8086778 <_Z10serialMenuv+0x620>)
 808652e:	6833      	ldr	r3, [r6, #0]
 8086530:	b183      	cbz	r3, 8086554 <_Z10serialMenuv+0x3fc>
            Serial.println("Disabling ABC logic for CO2 sensor");
 8086532:	f006 fad1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086536:	4991      	ldr	r1, [pc, #580]	; (808677c <_Z10serialMenuv+0x624>)
 8086538:	f005 fa13 	bl	808b962 <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 0;
 808653c:	2300      	movs	r3, #0
 808653e:	6033      	str	r3, [r6, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8086540:	f006 fed2 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8086544:	4631      	mov	r1, r6
 8086546:	207c      	movs	r0, #124	; 0x7c
 8086548:	f7fa fb78 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
            t6713.disableABCLogic();
 808654c:	488c      	ldr	r0, [pc, #560]	; (8086780 <_Z10serialMenuv+0x628>)
 808654e:	f001 f8a9 	bl	80876a4 <_ZN13Telaire_T671315disableABCLogicEv>
 8086552:	e625      	b.n	80861a0 <_Z10serialMenuv+0x48>
            Serial.println("ABC logic already disabled");
 8086554:	f006 fac0 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086558:	498a      	ldr	r1, [pc, #552]	; (8086784 <_Z10serialMenuv+0x62c>)
 808655a:	e753      	b.n	8086404 <_Z10serialMenuv+0x2ac>
    }else if(incomingByte == 'S'){
 808655c:	2853      	cmp	r0, #83	; 0x53
 808655e:	d117      	bne.n	8086590 <_Z10serialMenuv+0x438>
        if(!abc_logic_enabled){
 8086560:	4e85      	ldr	r6, [pc, #532]	; (8086778 <_Z10serialMenuv+0x620>)
 8086562:	6833      	ldr	r3, [r6, #0]
 8086564:	b983      	cbnz	r3, 8086588 <_Z10serialMenuv+0x430>
            Serial.println("Enabling abc logic for CO2 sensor");
 8086566:	f006 fab7 	bl	808cad8 <_Z16_fetch_usbserialv>
 808656a:	4987      	ldr	r1, [pc, #540]	; (8086788 <_Z10serialMenuv+0x630>)
 808656c:	f005 f9f9 	bl	808b962 <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 1;
 8086570:	2301      	movs	r3, #1
 8086572:	6033      	str	r3, [r6, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8086574:	f006 feb8 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8086578:	4631      	mov	r1, r6
 808657a:	207c      	movs	r0, #124	; 0x7c
 808657c:	f7fa fb5e 	bl	8080c3c <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
            t6713.enableABCLogic();
 8086580:	487f      	ldr	r0, [pc, #508]	; (8086780 <_Z10serialMenuv+0x628>)
 8086582:	f001 f8b4 	bl	80876ee <_ZN13Telaire_T671314enableABCLogicEv>
 8086586:	e60b      	b.n	80861a0 <_Z10serialMenuv+0x48>
            Serial.println("ABC logic already enabled");
 8086588:	f006 faa6 	bl	808cad8 <_Z16_fetch_usbserialv>
 808658c:	497f      	ldr	r1, [pc, #508]	; (808678c <_Z10serialMenuv+0x634>)
 808658e:	e739      	b.n	8086404 <_Z10serialMenuv+0x2ac>
    }else if(incomingByte == 'T'){
 8086590:	2854      	cmp	r0, #84	; 0x54
 8086592:	d115      	bne.n	80865c0 <_Z10serialMenuv+0x468>
        if(!hih8120_enabled){
 8086594:	4e7e      	ldr	r6, [pc, #504]	; (8086790 <_Z10serialMenuv+0x638>)
 8086596:	6833      	ldr	r3, [r6, #0]
 8086598:	b95b      	cbnz	r3, 80865b2 <_Z10serialMenuv+0x45a>
            Serial.println("Enabling HIH8120 RH sensor");
 808659a:	f006 fa9d 	bl	808cad8 <_Z16_fetch_usbserialv>
 808659e:	497d      	ldr	r1, [pc, #500]	; (8086794 <_Z10serialMenuv+0x63c>)
 80865a0:	f005 f9df 	bl	808b962 <_ZN5Print7printlnEPKc>
            hih8120_enabled = 1;
 80865a4:	2301      	movs	r3, #1
            hih8120_enabled = 0;
 80865a6:	6033      	str	r3, [r6, #0]
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80865a8:	f006 fe9e 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80865ac:	4631      	mov	r1, r6
 80865ae:	2080      	movs	r0, #128	; 0x80
 80865b0:	e656      	b.n	8086260 <_Z10serialMenuv+0x108>
            Serial.println("Disabling HIH8120 RH sensor");
 80865b2:	f006 fa91 	bl	808cad8 <_Z16_fetch_usbserialv>
 80865b6:	4978      	ldr	r1, [pc, #480]	; (8086798 <_Z10serialMenuv+0x640>)
 80865b8:	f005 f9d3 	bl	808b962 <_ZN5Print7printlnEPKc>
            hih8120_enabled = 0;
 80865bc:	2300      	movs	r3, #0
 80865be:	e7f2      	b.n	80865a6 <_Z10serialMenuv+0x44e>
    }else if(incomingByte == 'U'){
 80865c0:	2855      	cmp	r0, #85	; 0x55
 80865c2:	d115      	bne.n	80865f0 <_Z10serialMenuv+0x498>
        if(!CO_socket){
 80865c4:	4e75      	ldr	r6, [pc, #468]	; (808679c <_Z10serialMenuv+0x644>)
 80865c6:	6833      	ldr	r3, [r6, #0]
 80865c8:	b95b      	cbnz	r3, 80865e2 <_Z10serialMenuv+0x48a>
            Serial.println("Now reading CO from U20-Alpha2");
 80865ca:	f006 fa85 	bl	808cad8 <_Z16_fetch_usbserialv>
 80865ce:	4974      	ldr	r1, [pc, #464]	; (80867a0 <_Z10serialMenuv+0x648>)
 80865d0:	f005 f9c7 	bl	808b962 <_ZN5Print7printlnEPKc>
            CO_socket = 1;
 80865d4:	2301      	movs	r3, #1
            CO_socket = 0;
 80865d6:	6033      	str	r3, [r6, #0]
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80865d8:	f006 fe86 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80865dc:	4631      	mov	r1, r6
 80865de:	2084      	movs	r0, #132	; 0x84
 80865e0:	e63e      	b.n	8086260 <_Z10serialMenuv+0x108>
            Serial.println("Now reading CO from U19-Alpha1");
 80865e2:	f006 fa79 	bl	808cad8 <_Z16_fetch_usbserialv>
 80865e6:	496f      	ldr	r1, [pc, #444]	; (80867a4 <_Z10serialMenuv+0x64c>)
 80865e8:	f005 f9bb 	bl	808b962 <_ZN5Print7printlnEPKc>
            CO_socket = 0;
 80865ec:	2300      	movs	r3, #0
 80865ee:	e7f2      	b.n	80865d6 <_Z10serialMenuv+0x47e>
    }else if(incomingByte == 'V'){
 80865f0:	2856      	cmp	r0, #86	; 0x56
 80865f2:	d108      	bne.n	8086606 <_Z10serialMenuv+0x4ae>
        Serial.println("Reseting the CO2 sensor");
 80865f4:	f006 fa70 	bl	808cad8 <_Z16_fetch_usbserialv>
 80865f8:	496b      	ldr	r1, [pc, #428]	; (80867a8 <_Z10serialMenuv+0x650>)
 80865fa:	f005 f9b2 	bl	808b962 <_ZN5Print7printlnEPKc>
        t6713.resetSensor();
 80865fe:	4860      	ldr	r0, [pc, #384]	; (8086780 <_Z10serialMenuv+0x628>)
 8086600:	f001 f82b 	bl	808765a <_ZN13Telaire_T671311resetSensorEv>
 8086604:	e5cc      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '1'){
 8086606:	2831      	cmp	r0, #49	; 0x31
 8086608:	d102      	bne.n	8086610 <_Z10serialMenuv+0x4b8>
        serialGetLowerLimit();
 808660a:	f7fe fe01 	bl	8085210 <_Z19serialGetLowerLimitv>
 808660e:	e5c7      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '2'){
 8086610:	2832      	cmp	r0, #50	; 0x32
 8086612:	d102      	bne.n	808661a <_Z10serialMenuv+0x4c2>
        serialGetUpperLimit();
 8086614:	f7fe fe80 	bl	8085318 <_Z19serialGetUpperLimitv>
 8086618:	e5c2      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '3'){
 808661a:	2833      	cmp	r0, #51	; 0x33
 808661c:	d116      	bne.n	808664c <_Z10serialMenuv+0x4f4>
        Serial.print("APP Version: ");
 808661e:	f006 fa5b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086622:	4962      	ldr	r1, [pc, #392]	; (80867ac <_Z10serialMenuv+0x654>)
 8086624:	f005 f98a 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(APP_VERSION);
 8086628:	f006 fa56 	bl	808cad8 <_Z16_fetch_usbserialv>
 808662c:	220a      	movs	r2, #10
 808662e:	2107      	movs	r1, #7
 8086630:	f7fe fb91 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
        Serial.print("Build: ");
 8086634:	f006 fa50 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086638:	495d      	ldr	r1, [pc, #372]	; (80867b0 <_Z10serialMenuv+0x658>)
 808663a:	f005 f97f 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(BUILD_VERSION);
 808663e:	f006 fa4b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086642:	220a      	movs	r2, #10
 8086644:	210d      	movs	r1, #13
 8086646:	f7fe fb86 	bl	8084d56 <_ZN5Print7printlnIiLi0EEEjT_i>
 808664a:	e5a9      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '4'){
 808664c:	2834      	cmp	r0, #52	; 0x34
 808664e:	d112      	bne.n	8086676 <_Z10serialMenuv+0x51e>
        if(ozone_enabled == 0){
 8086650:	4e58      	ldr	r6, [pc, #352]	; (80867b4 <_Z10serialMenuv+0x65c>)
 8086652:	6833      	ldr	r3, [r6, #0]
 8086654:	b95b      	cbnz	r3, 808666e <_Z10serialMenuv+0x516>
            Serial.println("Enabling Ozone");
 8086656:	f006 fa3f 	bl	808cad8 <_Z16_fetch_usbserialv>
 808665a:	4957      	ldr	r1, [pc, #348]	; (80867b8 <_Z10serialMenuv+0x660>)
            Serial.println("Ozone already enabled");
 808665c:	f005 f981 	bl	808b962 <_ZN5Print7printlnEPKc>
        ozone_enabled = 1;
 8086660:	2301      	movs	r3, #1
        ozone_enabled = 0;
 8086662:	6033      	str	r3, [r6, #0]
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8086664:	f006 fe40 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8086668:	2058      	movs	r0, #88	; 0x58
 808666a:	4952      	ldr	r1, [pc, #328]	; (80867b4 <_Z10serialMenuv+0x65c>)
 808666c:	e5f8      	b.n	8086260 <_Z10serialMenuv+0x108>
            Serial.println("Ozone already enabled");
 808666e:	f006 fa33 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086672:	4952      	ldr	r1, [pc, #328]	; (80867bc <_Z10serialMenuv+0x664>)
 8086674:	e7f2      	b.n	808665c <_Z10serialMenuv+0x504>
    }else if(incomingByte == '5'){
 8086676:	2835      	cmp	r0, #53	; 0x35
 8086678:	d10e      	bne.n	8086698 <_Z10serialMenuv+0x540>
        if(ozone_enabled == 1){
 808667a:	4e4e      	ldr	r6, [pc, #312]	; (80867b4 <_Z10serialMenuv+0x65c>)
 808667c:	6833      	ldr	r3, [r6, #0]
 808667e:	2b01      	cmp	r3, #1
 8086680:	d106      	bne.n	8086690 <_Z10serialMenuv+0x538>
            Serial.println("Disabling Ozone");
 8086682:	f006 fa29 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086686:	494e      	ldr	r1, [pc, #312]	; (80867c0 <_Z10serialMenuv+0x668>)
            Serial.println("Ozone already disabled");
 8086688:	f005 f96b 	bl	808b962 <_ZN5Print7printlnEPKc>
        ozone_enabled = 0;
 808668c:	2300      	movs	r3, #0
 808668e:	e7e8      	b.n	8086662 <_Z10serialMenuv+0x50a>
            Serial.println("Ozone already disabled");
 8086690:	f006 fa22 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086694:	494b      	ldr	r1, [pc, #300]	; (80867c4 <_Z10serialMenuv+0x66c>)
 8086696:	e7f7      	b.n	8086688 <_Z10serialMenuv+0x530>
    }else if(incomingByte == '6'){
 8086698:	2836      	cmp	r0, #54	; 0x36
 808669a:	d112      	bne.n	80866c2 <_Z10serialMenuv+0x56a>
        if(voc_enabled == 0){
 808669c:	4e4a      	ldr	r6, [pc, #296]	; (80867c8 <_Z10serialMenuv+0x670>)
 808669e:	6833      	ldr	r3, [r6, #0]
 80866a0:	b95b      	cbnz	r3, 80866ba <_Z10serialMenuv+0x562>
            Serial.println("Enabling VOC's");
 80866a2:	f006 fa19 	bl	808cad8 <_Z16_fetch_usbserialv>
 80866a6:	4949      	ldr	r1, [pc, #292]	; (80867cc <_Z10serialMenuv+0x674>)
            Serial.println("VOC's already enabled");
 80866a8:	f005 f95b 	bl	808b962 <_ZN5Print7printlnEPKc>
        voc_enabled = 1;
 80866ac:	2301      	movs	r3, #1
        voc_enabled = 0;
 80866ae:	6033      	str	r3, [r6, #0]
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 80866b0:	f006 fe1a 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80866b4:	205c      	movs	r0, #92	; 0x5c
 80866b6:	4944      	ldr	r1, [pc, #272]	; (80867c8 <_Z10serialMenuv+0x670>)
 80866b8:	e5d2      	b.n	8086260 <_Z10serialMenuv+0x108>
            Serial.println("VOC's already enabled");
 80866ba:	f006 fa0d 	bl	808cad8 <_Z16_fetch_usbserialv>
 80866be:	4944      	ldr	r1, [pc, #272]	; (80867d0 <_Z10serialMenuv+0x678>)
 80866c0:	e7f2      	b.n	80866a8 <_Z10serialMenuv+0x550>
    }else if(incomingByte == '7'){
 80866c2:	2837      	cmp	r0, #55	; 0x37
 80866c4:	d10e      	bne.n	80866e4 <_Z10serialMenuv+0x58c>
        if(voc_enabled == 1){
 80866c6:	4e40      	ldr	r6, [pc, #256]	; (80867c8 <_Z10serialMenuv+0x670>)
 80866c8:	6833      	ldr	r3, [r6, #0]
 80866ca:	2b01      	cmp	r3, #1
 80866cc:	d106      	bne.n	80866dc <_Z10serialMenuv+0x584>
            Serial.println("Disabling VOC's");
 80866ce:	f006 fa03 	bl	808cad8 <_Z16_fetch_usbserialv>
 80866d2:	4940      	ldr	r1, [pc, #256]	; (80867d4 <_Z10serialMenuv+0x67c>)
            Serial.println("VOC's already disabled");
 80866d4:	f005 f945 	bl	808b962 <_ZN5Print7printlnEPKc>
        voc_enabled = 0;
 80866d8:	2300      	movs	r3, #0
 80866da:	e7e8      	b.n	80866ae <_Z10serialMenuv+0x556>
            Serial.println("VOC's already disabled");
 80866dc:	f006 f9fc 	bl	808cad8 <_Z16_fetch_usbserialv>
 80866e0:	493d      	ldr	r1, [pc, #244]	; (80867d8 <_Z10serialMenuv+0x680>)
 80866e2:	e7f7      	b.n	80866d4 <_Z10serialMenuv+0x57c>
    }else if(incomingByte == '8'){
 80866e4:	2838      	cmp	r0, #56	; 0x38
 80866e6:	d126      	bne.n	8086736 <_Z10serialMenuv+0x5de>
        Serial.print("Fault: ");
 80866e8:	f006 f9f6 	bl	808cad8 <_Z16_fetch_usbserialv>
 80866ec:	493b      	ldr	r1, [pc, #236]	; (80867dc <_Z10serialMenuv+0x684>)
 80866ee:	f005 f925 	bl	808b93c <_ZN5Print5printEPKc>
        byte fault = pmic.getFault();
 80866f2:	483b      	ldr	r0, [pc, #236]	; (80867e0 <_Z10serialMenuv+0x688>)
 80866f4:	f004 fb58 	bl	808ada8 <_ZN4PMIC8getFaultEv>
 80866f8:	4680      	mov	r8, r0
        Serial.println(fault);
 80866fa:	f006 f9ed 	bl	808cad8 <_Z16_fetch_usbserialv>
 80866fe:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 8086700:	220a      	movs	r2, #10
 8086702:	4641      	mov	r1, r8
 8086704:	f005 f941 	bl	808b98a <_ZN5Print11printNumberEmh>
        n += println();
 8086708:	4630      	mov	r0, r6
 808670a:	f005 f91e 	bl	808b94a <_ZN5Print7printlnEv>
        Serial.print("System status: ");
 808670e:	f006 f9e3 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086712:	4934      	ldr	r1, [pc, #208]	; (80867e4 <_Z10serialMenuv+0x68c>)
 8086714:	f005 f912 	bl	808b93c <_ZN5Print5printEPKc>
        byte systemStatus = pmic.getSystemStatus();
 8086718:	4831      	ldr	r0, [pc, #196]	; (80867e0 <_Z10serialMenuv+0x688>)
 808671a:	f004 fb42 	bl	808ada2 <_ZN4PMIC15getSystemStatusEv>
 808671e:	4680      	mov	r8, r0
        Serial.println(systemStatus);
 8086720:	f006 f9da 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086724:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 8086726:	220a      	movs	r2, #10
 8086728:	4641      	mov	r1, r8
 808672a:	f005 f92e 	bl	808b98a <_ZN5Print11printNumberEmh>
        n += println();
 808672e:	4630      	mov	r0, r6
 8086730:	f005 f90b 	bl	808b94a <_ZN5Print7printlnEv>
        return n;
 8086734:	e534      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '9'){
 8086736:	2839      	cmp	r0, #57	; 0x39
 8086738:	d102      	bne.n	8086740 <_Z10serialMenuv+0x5e8>
        serialIncreaseChargeCurrent();
 808673a:	f7fc f955 	bl	80829e8 <_Z27serialIncreaseChargeCurrentv>
 808673e:	e52f      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '0'){
 8086740:	2830      	cmp	r0, #48	; 0x30
 8086742:	d102      	bne.n	808674a <_Z10serialMenuv+0x5f2>
        serialIncreaseInputCurrent();
 8086744:	f7fc f90e 	bl	8082964 <_Z26serialIncreaseInputCurrentv>
 8086748:	e52a      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'A'){
 808674a:	2841      	cmp	r0, #65	; 0x41
 808674c:	d14c      	bne.n	80867e8 <_Z10serialMenuv+0x690>
        readAlpha1Constantly();
 808674e:	f7fc ff3b 	bl	80835c8 <_Z20readAlpha1Constantlyv>
 8086752:	e525      	b.n	80861a0 <_Z10serialMenuv+0x48>
 8086754:	080922ab 	.word	0x080922ab
 8086758:	20000580 	.word	0x20000580
 808675c:	080922c7 	.word	0x080922c7
 8086760:	080922e9 	.word	0x080922e9
 8086764:	0809230d 	.word	0x0809230d
 8086768:	08092330 	.word	0x08092330
 808676c:	08092355 	.word	0x08092355
 8086770:	08092370 	.word	0x08092370
 8086774:	08092383 	.word	0x08092383
 8086778:	2000056c 	.word	0x2000056c
 808677c:	0809239e 	.word	0x0809239e
 8086780:	20000c92 	.word	0x20000c92
 8086784:	080923c1 	.word	0x080923c1
 8086788:	080923dc 	.word	0x080923dc
 808678c:	080923fe 	.word	0x080923fe
 8086790:	200006fc 	.word	0x200006fc
 8086794:	08092418 	.word	0x08092418
 8086798:	08092433 	.word	0x08092433
 808679c:	200002e0 	.word	0x200002e0
 80867a0:	0809244f 	.word	0x0809244f
 80867a4:	0809246e 	.word	0x0809246e
 80867a8:	0809248d 	.word	0x0809248d
 80867ac:	080924a5 	.word	0x080924a5
 80867b0:	08091e12 	.word	0x08091e12
 80867b4:	200007a0 	.word	0x200007a0
 80867b8:	080924b3 	.word	0x080924b3
 80867bc:	080924c2 	.word	0x080924c2
 80867c0:	080924d8 	.word	0x080924d8
 80867c4:	080924e8 	.word	0x080924e8
 80867c8:	20000ca8 	.word	0x20000ca8
 80867cc:	080924ff 	.word	0x080924ff
 80867d0:	0809250e 	.word	0x0809250e
 80867d4:	08092524 	.word	0x08092524
 80867d8:	08092534 	.word	0x08092534
 80867dc:	0809254b 	.word	0x0809254b
 80867e0:	200007bc 	.word	0x200007bc
 80867e4:	08092553 	.word	0x08092553
    }else if(incomingByte == 'B'){
 80867e8:	2842      	cmp	r0, #66	; 0x42
 80867ea:	d115      	bne.n	8086818 <_Z10serialMenuv+0x6c0>
        if(output_only_particles == 1){
 80867ec:	4b69      	ldr	r3, [pc, #420]	; (8086994 <_Z10serialMenuv+0x83c>)
 80867ee:	681a      	ldr	r2, [r3, #0]
 80867f0:	2a01      	cmp	r2, #1
 80867f2:	d10b      	bne.n	808680c <_Z10serialMenuv+0x6b4>
            output_only_particles = 0;
 80867f4:	2200      	movs	r2, #0
 80867f6:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting normally");
 80867f8:	f006 f96e 	bl	808cad8 <_Z16_fetch_usbserialv>
 80867fc:	4966      	ldr	r1, [pc, #408]	; (8086998 <_Z10serialMenuv+0x840>)
            Serial.println("Outputting only PM");
 80867fe:	f005 f8b0 	bl	808b962 <_ZN5Print7printlnEPKc>
        EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8086802:	f006 fd71 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 8086806:	2064      	movs	r0, #100	; 0x64
 8086808:	4962      	ldr	r1, [pc, #392]	; (8086994 <_Z10serialMenuv+0x83c>)
 808680a:	e529      	b.n	8086260 <_Z10serialMenuv+0x108>
            output_only_particles = 1;
 808680c:	2201      	movs	r2, #1
 808680e:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting only PM");
 8086810:	f006 f962 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086814:	4961      	ldr	r1, [pc, #388]	; (808699c <_Z10serialMenuv+0x844>)
 8086816:	e7f2      	b.n	80867fe <_Z10serialMenuv+0x6a6>
    }else if(incomingByte == '!'){
 8086818:	2821      	cmp	r0, #33	; 0x21
 808681a:	d13b      	bne.n	8086894 <_Z10serialMenuv+0x73c>
        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 808681c:	f006 f95c 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086820:	495f      	ldr	r1, [pc, #380]	; (80869a0 <_Z10serialMenuv+0x848>)
 8086822:	f005 f89e 	bl	808b962 <_ZN5Print7printlnEPKc>
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 8086826:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 80869e8 <_Z10serialMenuv+0x890>
        while(!Serial.available()){
 808682a:	f006 f955 	bl	808cad8 <_Z16_fetch_usbserialv>
 808682e:	6803      	ldr	r3, [r0, #0]
 8086830:	691b      	ldr	r3, [r3, #16]
 8086832:	4798      	blx	r3
 8086834:	2800      	cmp	r0, #0
 8086836:	f47f acb3 	bne.w	80861a0 <_Z10serialMenuv+0x48>
            if (! bme.performReading()) {
 808683a:	4628      	mov	r0, r5
 808683c:	f002 fbf4 	bl	8089028 <_ZN15Adafruit_BME68014performReadingEv>
 8086840:	b938      	cbnz	r0, 8086852 <_Z10serialMenuv+0x6fa>
              Serial.println("Failed to read BME680");
 8086842:	f006 f949 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086846:	4957      	ldr	r1, [pc, #348]	; (80869a4 <_Z10serialMenuv+0x84c>)
  Serial.println("Exiting serial menu...");
 8086848:	f005 f88b 	bl	808b962 <_ZN5Print7printlnEPKc>
}
 808684c:	b00a      	add	sp, #40	; 0x28
 808684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 8086852:	f006 f941 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086856:	4639      	mov	r1, r7
 8086858:	4606      	mov	r6, r0
 808685a:	68e8      	ldr	r0, [r5, #12]
 808685c:	f007 fcbe 	bl	808e1dc <__aeabi_fdiv>
 8086860:	f006 ff5a 	bl	808d718 <__aeabi_f2d>
 8086864:	4680      	mov	r8, r0
 8086866:	68a8      	ldr	r0, [r5, #8]
 8086868:	4689      	mov	r9, r1
 808686a:	f006 ff55 	bl	808d718 <__aeabi_f2d>
 808686e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8086872:	6868      	ldr	r0, [r5, #4]
 8086874:	f006 ff50 	bl	808d718 <__aeabi_f2d>
 8086878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808687c:	6828      	ldr	r0, [r5, #0]
 808687e:	f006 ff4b 	bl	808d718 <__aeabi_f2d>
 8086882:	4642      	mov	r2, r8
 8086884:	e9cd 0100 	strd	r0, r1, [sp]
 8086888:	464b      	mov	r3, r9
 808688a:	4651      	mov	r1, sl
 808688c:	4630      	mov	r0, r6
 808688e:	f7fa fa07 	bl	8080ca0 <_ZN5Print6printfEPKcz>
        while(!Serial.available()){
 8086892:	e7ca      	b.n	808682a <_Z10serialMenuv+0x6d2>
    }else if(incomingByte == '@'){
 8086894:	2840      	cmp	r0, #64	; 0x40
 8086896:	d112      	bne.n	80868be <_Z10serialMenuv+0x766>
        if(sensible_iot_en == 1){
 8086898:	4e43      	ldr	r6, [pc, #268]	; (80869a8 <_Z10serialMenuv+0x850>)
 808689a:	6833      	ldr	r3, [r6, #0]
 808689c:	2b01      	cmp	r3, #1
 808689e:	d10b      	bne.n	80868b8 <_Z10serialMenuv+0x760>
            Serial.println("Disabling sensible iot data push.");
 80868a0:	f006 f91a 	bl	808cad8 <_Z16_fetch_usbserialv>
 80868a4:	4941      	ldr	r1, [pc, #260]	; (80869ac <_Z10serialMenuv+0x854>)
 80868a6:	f005 f85c 	bl	808b962 <_ZN5Print7printlnEPKc>
            sensible_iot_en = 0;
 80868aa:	2300      	movs	r3, #0
 80868ac:	6033      	str	r3, [r6, #0]
            EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80868ae:	f006 fd1b 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80868b2:	4631      	mov	r1, r6
 80868b4:	208c      	movs	r0, #140	; 0x8c
 80868b6:	e4d3      	b.n	8086260 <_Z10serialMenuv+0x108>
            serialSetSensibleIotEnable();
 80868b8:	f7fc f9ce 	bl	8082c58 <_Z26serialSetSensibleIotEnablev>
 80868bc:	e470      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == '#'){
 80868be:	2823      	cmp	r0, #35	; 0x23
 80868c0:	d115      	bne.n	80868ee <_Z10serialMenuv+0x796>
        if(car_topper_power_en == 1){
 80868c2:	4e3b      	ldr	r6, [pc, #236]	; (80869b0 <_Z10serialMenuv+0x858>)
 80868c4:	6833      	ldr	r3, [r6, #0]
 80868c6:	2b01      	cmp	r3, #1
 80868c8:	d10b      	bne.n	80868e2 <_Z10serialMenuv+0x78a>
            car_topper_power_en = 0;
 80868ca:	2300      	movs	r3, #0
 80868cc:	6033      	str	r3, [r6, #0]
            Serial.println("Disabling car topper power.  ");
 80868ce:	f006 f903 	bl	808cad8 <_Z16_fetch_usbserialv>
 80868d2:	4938      	ldr	r1, [pc, #224]	; (80869b4 <_Z10serialMenuv+0x85c>)
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 80868d4:	f005 f845 	bl	808b962 <_ZN5Print7printlnEPKc>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80868d8:	f006 fd06 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 80868dc:	4631      	mov	r1, r6
 80868de:	2090      	movs	r0, #144	; 0x90
 80868e0:	e4be      	b.n	8086260 <_Z10serialMenuv+0x108>
            car_topper_power_en = 1;
 80868e2:	2301      	movs	r3, #1
 80868e4:	6033      	str	r3, [r6, #0]
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 80868e6:	f006 f8f7 	bl	808cad8 <_Z16_fetch_usbserialv>
 80868ea:	4933      	ldr	r1, [pc, #204]	; (80869b8 <_Z10serialMenuv+0x860>)
 80868ec:	e7f2      	b.n	80868d4 <_Z10serialMenuv+0x77c>
    }else if(incomingByte == 'W'){
 80868ee:	2857      	cmp	r0, #87	; 0x57
 80868f0:	d116      	bne.n	8086920 <_Z10serialMenuv+0x7c8>
        if(google_location_en == 1){
 80868f2:	4e32      	ldr	r6, [pc, #200]	; (80869bc <_Z10serialMenuv+0x864>)
 80868f4:	6833      	ldr	r3, [r6, #0]
 80868f6:	2b01      	cmp	r3, #1
 80868f8:	d10b      	bne.n	8086912 <_Z10serialMenuv+0x7ba>
            Serial.println("Disabling google location services.");
 80868fa:	f006 f8ed 	bl	808cad8 <_Z16_fetch_usbserialv>
 80868fe:	4930      	ldr	r1, [pc, #192]	; (80869c0 <_Z10serialMenuv+0x868>)
 8086900:	f005 f82f 	bl	808b962 <_ZN5Print7printlnEPKc>
            google_location_en = 0;
 8086904:	2300      	movs	r3, #0
            google_location_en = 1;
 8086906:	6033      	str	r3, [r6, #0]
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 8086908:	f006 fcee 	bl	808d2e8 <_Z21__fetch_global_EEPROMv>
 808690c:	4631      	mov	r1, r6
 808690e:	2088      	movs	r0, #136	; 0x88
 8086910:	e4a6      	b.n	8086260 <_Z10serialMenuv+0x108>
            Serial.println("Enabling google location services.");
 8086912:	f006 f8e1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086916:	492b      	ldr	r1, [pc, #172]	; (80869c4 <_Z10serialMenuv+0x86c>)
 8086918:	f005 f823 	bl	808b962 <_ZN5Print7printlnEPKc>
            google_location_en = 1;
 808691c:	2301      	movs	r3, #1
 808691e:	e7f2      	b.n	8086906 <_Z10serialMenuv+0x7ae>
    }else if(incomingByte == 'X'){
 8086920:	2858      	cmp	r0, #88	; 0x58
 8086922:	d107      	bne.n	8086934 <_Z10serialMenuv+0x7dc>
            t6713.calibrate(1);
 8086924:	2101      	movs	r1, #1
 8086926:	4828      	ldr	r0, [pc, #160]	; (80869c8 <_Z10serialMenuv+0x870>)
 8086928:	f000 ff06 	bl	8087738 <_ZN13Telaire_T67139calibrateEi>
        co2_calibration_timer = 180;        //6 minutes if measurement cycle is 2 seconds
 808692c:	22b4      	movs	r2, #180	; 0xb4
 808692e:	4b27      	ldr	r3, [pc, #156]	; (80869cc <_Z10serialMenuv+0x874>)
 8086930:	601a      	str	r2, [r3, #0]
 8086932:	e435      	b.n	80861a0 <_Z10serialMenuv+0x48>
    }else if(incomingByte == 'Z'){
 8086934:	285a      	cmp	r0, #90	; 0x5a
 8086936:	d126      	bne.n	8086986 <_Z10serialMenuv+0x82e>
        Serial.println("Getting cellular information, this may take a while...");
 8086938:	f006 f8ce 	bl	808cad8 <_Z16_fetch_usbserialv>
 808693c:	4924      	ldr	r1, [pc, #144]	; (80869d0 <_Z10serialMenuv+0x878>)
 808693e:	f005 f810 	bl	808b962 <_ZN5Print7printlnEPKc>
        Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 8086942:	a806      	add	r0, sp, #24
 8086944:	4923      	ldr	r1, [pc, #140]	; (80869d4 <_Z10serialMenuv+0x87c>)
 8086946:	f003 fcf5 	bl	808a334 <_ZNK19CellularHelperClass7getIMEIEv>
 808694a:	9a06      	ldr	r2, [sp, #24]
 808694c:	4922      	ldr	r1, [pc, #136]	; (80869d8 <_Z10serialMenuv+0x880>)
 808694e:	4823      	ldr	r0, [pc, #140]	; (80869dc <_Z10serialMenuv+0x884>)
 8086950:	f7fa fa5c 	bl	8080e0c <_ZNK5spark6Logger4infoEPKcz>
 8086954:	a806      	add	r0, sp, #24
 8086956:	f004 fd95 	bl	808b484 <_ZN6StringD1Ev>
        Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 808695a:	a806      	add	r0, sp, #24
 808695c:	491d      	ldr	r1, [pc, #116]	; (80869d4 <_Z10serialMenuv+0x87c>)
 808695e:	f003 fd05 	bl	808a36c <_ZNK19CellularHelperClass7getIMSIEv>
 8086962:	9a06      	ldr	r2, [sp, #24]
 8086964:	491e      	ldr	r1, [pc, #120]	; (80869e0 <_Z10serialMenuv+0x888>)
 8086966:	481d      	ldr	r0, [pc, #116]	; (80869dc <_Z10serialMenuv+0x884>)
 8086968:	f7fa fa50 	bl	8080e0c <_ZNK5spark6Logger4infoEPKcz>
 808696c:	a806      	add	r0, sp, #24
 808696e:	f004 fd89 	bl	808b484 <_ZN6StringD1Ev>
        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 8086972:	a806      	add	r0, sp, #24
 8086974:	4917      	ldr	r1, [pc, #92]	; (80869d4 <_Z10serialMenuv+0x87c>)
 8086976:	f003 fcff 	bl	808a378 <_ZNK19CellularHelperClass8getICCIDEv>
 808697a:	9a06      	ldr	r2, [sp, #24]
 808697c:	4919      	ldr	r1, [pc, #100]	; (80869e4 <_Z10serialMenuv+0x88c>)
 808697e:	4817      	ldr	r0, [pc, #92]	; (80869dc <_Z10serialMenuv+0x884>)
 8086980:	f7fa fa44 	bl	8080e0c <_ZNK5spark6Logger4infoEPKcz>
 8086984:	e486      	b.n	8086294 <_Z10serialMenuv+0x13c>
    }else if(incomingByte == '?'){
 8086986:	283f      	cmp	r0, #63	; 0x3f
 8086988:	f47f ac0a 	bne.w	80861a0 <_Z10serialMenuv+0x48>
        outputSerialMenuOptions();
 808698c:	f7fc fe3a 	bl	8083604 <_Z23outputSerialMenuOptionsv>
 8086990:	e406      	b.n	80861a0 <_Z10serialMenuv+0x48>
 8086992:	bf00      	nop
 8086994:	20000798 	.word	0x20000798
 8086998:	08092563 	.word	0x08092563
 808699c:	08092577 	.word	0x08092577
 80869a0:	0809258a 	.word	0x0809258a
 80869a4:	080908d0 	.word	0x080908d0
 80869a8:	20000c70 	.word	0x20000c70
 80869ac:	080925f6 	.word	0x080925f6
 80869b0:	2000061c 	.word	0x2000061c
 80869b4:	08092618 	.word	0x08092618
 80869b8:	08092636 	.word	0x08092636
 80869bc:	200006b0 	.word	0x200006b0
 80869c0:	0809267e 	.word	0x0809267e
 80869c4:	080926a2 	.word	0x080926a2
 80869c8:	20000c92 	.word	0x20000c92
 80869cc:	20000620 	.word	0x20000620
 80869d0:	080926c5 	.word	0x080926c5
 80869d4:	20000e08 	.word	0x20000e08
 80869d8:	080926fc 	.word	0x080926fc
 80869dc:	20000e1c 	.word	0x20000e1c
 80869e0:	08092704 	.word	0x08092704
 80869e4:	0809270c 	.word	0x0809270c
 80869e8:	080925c5 	.word	0x080925c5

080869ec <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
  }
 80869ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 80869ee:	2400      	movs	r4, #0
 80869f0:	2701      	movs	r7, #1
 80869f2:	4b58      	ldr	r3, [pc, #352]	; (8086b54 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x168>)
GoogleMapsDeviceLocator locator;
 80869f4:	4e58      	ldr	r6, [pc, #352]	; (8086b58 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x16c>)
 80869f6:	601c      	str	r4, [r3, #0]
 80869f8:	4b58      	ldr	r3, [pc, #352]	; (8086b5c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x170>)
 80869fa:	4d59      	ldr	r5, [pc, #356]	; (8086b60 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 80869fc:	701f      	strb	r7, [r3, #0]
 80869fe:	4630      	mov	r0, r6
 8086a00:	f002 ff40 	bl	8089884 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8086a04:	462a      	mov	r2, r5
 8086a06:	4957      	ldr	r1, [pc, #348]	; (8086b64 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
 8086a08:	4630      	mov	r0, r6
 8086a0a:	f006 fd0f 	bl	808d42c <__aeabi_atexit>
              error_(SYSTEM_ERROR_NONE) {
 8086a0e:	4e56      	ldr	r6, [pc, #344]	; (8086b68 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
    SleepResult() {}
 8086a10:	4b56      	ldr	r3, [pc, #344]	; (8086b6c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)
              error_(SYSTEM_ERROR_NONE) {
 8086a12:	6034      	str	r4, [r6, #0]
    SleepResult() {}
 8086a14:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
 8086a16:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
 8086a18:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
 8086a1a:	2003      	movs	r0, #3
 8086a1c:	f003 fff0 	bl	808aa00 <set_system_mode>
SYSTEM_MODE(MANUAL);
 8086a20:	462a      	mov	r2, r5
 8086a22:	4630      	mov	r0, r6
 8086a24:	4952      	ldr	r1, [pc, #328]	; (8086b70 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)
 8086a26:	f006 fd01 	bl	808d42c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 8086a2a:	4621      	mov	r1, r4
 8086a2c:	4638      	mov	r0, r7
 8086a2e:	f003 fff7 	bl	808aa20 <system_thread_set_state>
Adafruit_BME680 bme; // I2C
 8086a32:	f04f 31ff 	mov.w	r1, #4294967295
 8086a36:	484f      	ldr	r0, [pc, #316]	; (8086b74 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)
 8086a38:	f002 fae4 	bl	8089004 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 8086a3c:	484e      	ldr	r0, [pc, #312]	; (8086b78 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 8086a3e:	f000 fd6c 	bl	808751a <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000;
 8086a42:	484e      	ldr	r0, [pc, #312]	; (8086b7c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)
 8086a44:	f000 fb30 	bl	80870a8 <_ZN8LMP91000C1Ev>
FuelGauge fuel;
 8086a48:	4e4d      	ldr	r6, [pc, #308]	; (8086b80 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 8086a4a:	2149      	movs	r1, #73	; 0x49
 8086a4c:	484d      	ldr	r0, [pc, #308]	; (8086b84 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
 8086a4e:	f000 fc63 	bl	8087318 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 8086a52:	214a      	movs	r1, #74	; 0x4a
 8086a54:	484c      	ldr	r0, [pc, #304]	; (8086b88 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
 8086a56:	f000 fc5f 	bl	8087318 <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 8086a5a:	4621      	mov	r1, r4
 8086a5c:	4630      	mov	r0, r6
 8086a5e:	f005 fb7d 	bl	808c15c <_ZN9FuelGaugeC1Eb>
 8086a62:	4630      	mov	r0, r6
PMIC pmic;
 8086a64:	4e49      	ldr	r6, [pc, #292]	; (8086b8c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
FuelGauge fuel;
 8086a66:	462a      	mov	r2, r5
 8086a68:	4949      	ldr	r1, [pc, #292]	; (8086b90 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
 8086a6a:	f006 fcdf 	bl	808d42c <__aeabi_atexit>
PMIC pmic;
 8086a6e:	4621      	mov	r1, r4
 8086a70:	4630      	mov	r0, r6
 8086a72:	f004 f924 	bl	808acbe <_ZN4PMICC1Eb>
 8086a76:	4630      	mov	r0, r6
PowerCheck powerCheck;
 8086a78:	4e46      	ldr	r6, [pc, #280]	; (8086b94 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
PMIC pmic;
 8086a7a:	462a      	mov	r2, r5
 8086a7c:	4946      	ldr	r1, [pc, #280]	; (8086b98 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
 8086a7e:	f006 fcd5 	bl	808d42c <__aeabi_atexit>
PowerCheck powerCheck;
 8086a82:	4630      	mov	r0, r6
 8086a84:	f000 fb9e 	bl	80871c4 <_ZN10PowerCheckC1Ev>
 8086a88:	462a      	mov	r2, r5
 8086a8a:	4630      	mov	r0, r6
 8086a8c:	4943      	ldr	r1, [pc, #268]	; (8086b9c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 8086a8e:	f006 fccd 	bl	808d42c <__aeabi_atexit>
HIH61XX hih(0x27);
 8086a92:	2127      	movs	r1, #39	; 0x27
 8086a94:	4842      	ldr	r0, [pc, #264]	; (8086ba0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
 8086a96:	f002 fcc7 	bl	8089428 <_ZN7HIH61XXC1Eh>
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8086a9a:	2219      	movs	r2, #25
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8086a9c:	4b41      	ldr	r3, [pc, #260]	; (8086ba4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8086a9e:	4842      	ldr	r0, [pc, #264]	; (8086ba8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
 8086aa0:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
  SdFat() {
 8086aa4:	4a41      	ldr	r2, [pc, #260]	; (8086bac <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
  SdFile() {}
 8086aa6:	4f42      	ldr	r7, [pc, #264]	; (8086bb0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
  SdFat() {
 8086aa8:	601a      	str	r2, [r3, #0]
SdFile file;
 8086aaa:	4e42      	ldr	r6, [pc, #264]	; (8086bb4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8086aac:	4a42      	ldr	r2, [pc, #264]	; (8086bb8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
 8086aae:	71dc      	strb	r4, [r3, #7]
 8086ab0:	f8a3 4440 	strh.w	r4, [r3, #1088]	; 0x440
 8086ab4:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 8086ab8:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 8086abc:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8086ac0:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 8086ac4:	462a      	mov	r2, r5
 8086ac6:	4631      	mov	r1, r6
 8086ac8:	8104      	strh	r4, [r0, #8]
    Print() : write_error(0) {}
 8086aca:	6044      	str	r4, [r0, #4]
  SdFile() {}
 8086acc:	6007      	str	r7, [r0, #0]
 8086ace:	f006 fcad 	bl	808d42c <__aeabi_atexit>
 8086ad2:	483a      	ldr	r0, [pc, #232]	; (8086bbc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
SdFile log_file;
 8086ad4:	462a      	mov	r2, r5
 8086ad6:	4631      	mov	r1, r6
 8086ad8:	e9c0 7400 	strd	r7, r4, [r0]
 8086adc:	8104      	strh	r4, [r0, #8]
 8086ade:	f006 fca5 	bl	808d42c <__aeabi_atexit>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8086ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8086ae6:	4836      	ldr	r0, [pc, #216]	; (8086bc0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
String fileName;
 8086ae8:	4e36      	ldr	r6, [pc, #216]	; (8086bc4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
 8086aea:	6083      	str	r3, [r0, #8]
  File() {}
 8086aec:	4b36      	ldr	r3, [pc, #216]	; (8086bc8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)
 8086aee:	4f37      	ldr	r7, [pc, #220]	; (8086bcc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 8086af0:	6003      	str	r3, [r0, #0]
File file1;
 8086af2:	462a      	mov	r2, r5
 8086af4:	4936      	ldr	r1, [pc, #216]	; (8086bd0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)
 8086af6:	8204      	strh	r4, [r0, #16]
 8086af8:	6044      	str	r4, [r0, #4]
 8086afa:	f006 fc97 	bl	808d42c <__aeabi_atexit>
String fileName;
 8086afe:	4c35      	ldr	r4, [pc, #212]	; (8086bd4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
 8086b00:	4631      	mov	r1, r6
 8086b02:	4638      	mov	r0, r7
 8086b04:	f004 fd08 	bl	808b518 <_ZN6StringC1EPKc>
 8086b08:	4638      	mov	r0, r7
String logFileName;
 8086b0a:	4f33      	ldr	r7, [pc, #204]	; (8086bd8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
String fileName;
 8086b0c:	462a      	mov	r2, r5
 8086b0e:	4621      	mov	r1, r4
 8086b10:	f006 fc8c 	bl	808d42c <__aeabi_atexit>
String logFileName;
 8086b14:	4631      	mov	r1, r6
 8086b16:	4638      	mov	r0, r7
 8086b18:	f004 fcfe 	bl	808b518 <_ZN6StringC1EPKc>
 8086b1c:	4638      	mov	r0, r7
String ssid; //wifi network name
 8086b1e:	4f2f      	ldr	r7, [pc, #188]	; (8086bdc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
String logFileName;
 8086b20:	462a      	mov	r2, r5
 8086b22:	4621      	mov	r1, r4
 8086b24:	f006 fc82 	bl	808d42c <__aeabi_atexit>
String ssid; //wifi network name
 8086b28:	4631      	mov	r1, r6
 8086b2a:	4638      	mov	r0, r7
 8086b2c:	f004 fcf4 	bl	808b518 <_ZN6StringC1EPKc>
 8086b30:	4638      	mov	r0, r7
String password; //wifi network password
 8086b32:	4f2b      	ldr	r7, [pc, #172]	; (8086be0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f4>)
String ssid; //wifi network name
 8086b34:	462a      	mov	r2, r5
 8086b36:	4621      	mov	r1, r4
 8086b38:	f006 fc78 	bl	808d42c <__aeabi_atexit>
String password; //wifi network password
 8086b3c:	4631      	mov	r1, r6
 8086b3e:	4638      	mov	r0, r7
 8086b40:	f004 fcea 	bl	808b518 <_ZN6StringC1EPKc>
 8086b44:	462a      	mov	r2, r5
 8086b46:	4621      	mov	r1, r4
 8086b48:	4638      	mov	r0, r7
  }
 8086b4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
String password; //wifi network password
 8086b4e:	f006 bc6d 	b.w	808d42c <__aeabi_atexit>
 8086b52:	bf00      	nop
 8086b54:	2000032c 	.word	0x2000032c
 8086b58:	20000708 	.word	0x20000708
 8086b5c:	20000540 	.word	0x20000540
 8086b60:	200002c0 	.word	0x200002c0
 8086b64:	080895f9 	.word	0x080895f9
 8086b68:	20000318 	.word	0x20000318
 8086b6c:	ffff0000 	.word	0xffff0000
 8086b70:	08080c2d 	.word	0x08080c2d
 8086b74:	20000584 	.word	0x20000584
 8086b78:	20000c92 	.word	0x20000c92
 8086b7c:	20000705 	.word	0x20000705
 8086b80:	200006a4 	.word	0x200006a4
 8086b84:	20000570 	.word	0x20000570
 8086b88:	20000576 	.word	0x20000576
 8086b8c:	200007bc 	.word	0x200007bc
 8086b90:	0808c17b 	.word	0x0808c17b
 8086b94:	200007c0 	.word	0x200007c0
 8086b98:	0808acfd 	.word	0x0808acfd
 8086b9c:	08087199 	.word	0x08087199
 8086ba0:	200006f0 	.word	0x200006f0
 8086ba4:	200007f8 	.word	0x200007f8
 8086ba8:	20000630 	.word	0x20000630
 8086bac:	0809292c 	.word	0x0809292c
 8086bb0:	08092914 	.word	0x08092914
 8086bb4:	08080b9d 	.word	0x08080b9d
 8086bb8:	080929c8 	.word	0x080929c8
 8086bbc:	2000075c 	.word	0x2000075c
 8086bc0:	2000065c 	.word	0x2000065c
 8086bc4:	08092ce2 	.word	0x08092ce2
 8086bc8:	080928ec 	.word	0x080928ec
 8086bcc:	20000690 	.word	0x20000690
 8086bd0:	08080b9f 	.word	0x08080b9f
 8086bd4:	0808b485 	.word	0x0808b485
 8086bd8:	2000074c 	.word	0x2000074c
 8086bdc:	20000c80 	.word	0x20000c80
 8086be0:	200007a8 	.word	0x200007a8

08086be4 <_Z11readHIH8120v>:
void readHIH8120(void){
 8086be4:	b510      	push	{r4, lr}
    hih.start();
 8086be6:	4c04      	ldr	r4, [pc, #16]	; (8086bf8 <_Z11readHIH8120v+0x14>)
 8086be8:	4620      	mov	r0, r4
 8086bea:	f002 fc0f 	bl	808940c <_ZN7HIH61XX5startEv>
    hih.update();
 8086bee:	4620      	mov	r0, r4
}
 8086bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hih.update();
 8086bf4:	f002 bc22 	b.w	808943c <_ZN7HIH61XX6updateEv>
 8086bf8:	200006f0 	.word	0x200006f0
 8086bfc:	00000000 	.word	0x00000000

08086c00 <loop>:
void loop() {
 8086c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8086c04:	4b1d      	ldr	r3, [pc, #116]	; (8086c7c <loop+0x7c>)
void loop() {
 8086c06:	b089      	sub	sp, #36	; 0x24
    if(car_topper_power_en && powerCheck.getHasPower() == 0){
 8086c08:	681b      	ldr	r3, [r3, #0]
 8086c0a:	b12b      	cbz	r3, 8086c18 <loop+0x18>
 8086c0c:	4b1c      	ldr	r3, [pc, #112]	; (8086c80 <loop+0x80>)
 8086c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8086c12:	b90b      	cbnz	r3, 8086c18 <loop+0x18>
        goToSleepBattery();
 8086c14:	f7fb fe12 	bl	808283c <_Z16goToSleepBatteryv>
    locator.loop();
 8086c18:	481a      	ldr	r0, [pc, #104]	; (8086c84 <loop+0x84>)
 8086c1a:	f002 ff3b 	bl	8089a94 <_ZN23GoogleMapsDeviceLocator4loopEv>
    if(output_only_particles == 1){
 8086c1e:	4b1a      	ldr	r3, [pc, #104]	; (8086c88 <loop+0x88>)
 8086c20:	681b      	ldr	r3, [r3, #0]
 8086c22:	2b01      	cmp	r3, #1
 8086c24:	d101      	bne.n	8086c2a <loop+0x2a>
        outputParticles();
 8086c26:	f7fb fc67 	bl	80824f8 <_Z15outputParticlesv>
    if(debugging_enabled){
 8086c2a:	4c18      	ldr	r4, [pc, #96]	; (8086c8c <loop+0x8c>)
 8086c2c:	6823      	ldr	r3, [r4, #0]
 8086c2e:	b173      	cbz	r3, 8086c4e <loop+0x4e>
      Serial.println("Before reading bme");
 8086c30:	f005 ff52 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086c34:	4916      	ldr	r1, [pc, #88]	; (8086c90 <loop+0x90>)
 8086c36:	f004 fe94 	bl	808b962 <_ZN5Print7printlnEPKc>
      writeLogFile("before reading bme");
 8086c3a:	4916      	ldr	r1, [pc, #88]	; (8086c94 <loop+0x94>)
 8086c3c:	a804      	add	r0, sp, #16
 8086c3e:	f004 fc6b 	bl	808b518 <_ZN6StringC1EPKc>
 8086c42:	a804      	add	r0, sp, #16
 8086c44:	f7fb f874 	bl	8081d30 <_Z12writeLogFile6String>
 8086c48:	a804      	add	r0, sp, #16
 8086c4a:	f004 fc1b 	bl	808b484 <_ZN6StringD1Ev>
    if (! bme.performReading()) {
 8086c4e:	4d12      	ldr	r5, [pc, #72]	; (8086c98 <loop+0x98>)
 8086c50:	4628      	mov	r0, r5
 8086c52:	f002 f9e9 	bl	8089028 <_ZN15Adafruit_BME68014performReadingEv>
 8086c56:	bb18      	cbnz	r0, 8086ca0 <loop+0xa0>
      Serial.println("Failed to read BME680");
 8086c58:	f005 ff3e 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086c5c:	490f      	ldr	r1, [pc, #60]	; (8086c9c <loop+0x9c>)
 8086c5e:	f004 fe80 	bl	808b962 <_ZN5Print7printlnEPKc>
      writeLogFile("Failed to read BME680");
 8086c62:	490e      	ldr	r1, [pc, #56]	; (8086c9c <loop+0x9c>)
 8086c64:	a804      	add	r0, sp, #16
 8086c66:	f004 fc57 	bl	808b518 <_ZN6StringC1EPKc>
 8086c6a:	a804      	add	r0, sp, #16
 8086c6c:	f7fb f860 	bl	8081d30 <_Z12writeLogFile6String>
 8086c70:	a804      	add	r0, sp, #16
 8086c72:	f004 fc07 	bl	808b484 <_ZN6StringD1Ev>
}
 8086c76:	b009      	add	sp, #36	; 0x24
 8086c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086c7c:	2000061c 	.word	0x2000061c
 8086c80:	200007c0 	.word	0x200007c0
 8086c84:	20000708 	.word	0x20000708
 8086c88:	20000798 	.word	0x20000798
 8086c8c:	20000628 	.word	0x20000628
 8086c90:	0809272c 	.word	0x0809272c
 8086c94:	0809273f 	.word	0x0809273f
 8086c98:	20000584 	.word	0x20000584
 8086c9c:	080908d0 	.word	0x080908d0
      if(debugging_enabled){
 8086ca0:	6823      	ldr	r3, [r4, #0]
 8086ca2:	b1d3      	cbz	r3, 8086cda <loop+0xda>
        Serial.printf("Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.temperature, bme.pressure/100, bme.humidity);
 8086ca4:	f005 ff18 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086ca8:	4606      	mov	r6, r0
 8086caa:	6828      	ldr	r0, [r5, #0]
 8086cac:	f006 fd34 	bl	808d718 <__aeabi_f2d>
 8086cb0:	4680      	mov	r8, r0
 8086cb2:	68a8      	ldr	r0, [r5, #8]
 8086cb4:	4689      	mov	r9, r1
 8086cb6:	f006 fd2f 	bl	808d718 <__aeabi_f2d>
 8086cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086cbe:	49a0      	ldr	r1, [pc, #640]	; (8086f40 <loop+0x340>)
 8086cc0:	6868      	ldr	r0, [r5, #4]
 8086cc2:	f007 fa8b 	bl	808e1dc <__aeabi_fdiv>
 8086cc6:	f006 fd27 	bl	808d718 <__aeabi_f2d>
 8086cca:	4642      	mov	r2, r8
 8086ccc:	e9cd 0100 	strd	r0, r1, [sp]
 8086cd0:	464b      	mov	r3, r9
 8086cd2:	4630      	mov	r0, r6
 8086cd4:	499b      	ldr	r1, [pc, #620]	; (8086f44 <loop+0x344>)
 8086cd6:	f7f9 ffe3 	bl	8080ca0 <_ZN5Print6printfEPKcz>
    if(hih8120_enabled){
 8086cda:	4b9b      	ldr	r3, [pc, #620]	; (8086f48 <loop+0x348>)
 8086cdc:	681b      	ldr	r3, [r3, #0]
 8086cde:	b10b      	cbz	r3, 8086ce4 <loop+0xe4>
        readHIH8120();
 8086ce0:	f7ff ff80 	bl	8086be4 <_Z11readHIH8120v>
    readGpsStream();
 8086ce4:	f7fb f874 	bl	8081dd0 <_Z13readGpsStreamv>
    CO_float = readCO();
 8086ce8:	f7fb fb30 	bl	808234c <_Z6readCOv>
 8086cec:	4b97      	ldr	r3, [pc, #604]	; (8086f4c <loop+0x34c>)
    CO2_float = readCO2();
 8086cee:	4f98      	ldr	r7, [pc, #608]	; (8086f50 <loop+0x350>)
    CO_float = readCO();
 8086cf0:	6018      	str	r0, [r3, #0]
    CO2_float = readCO2();
 8086cf2:	f7fa fea3 	bl	8081a3c <_Z7readCO2v>
    float pressure_correction = bme.pressure/100;
 8086cf6:	4992      	ldr	r1, [pc, #584]	; (8086f40 <loop+0x340>)
    CO2_float = readCO2();
 8086cf8:	6038      	str	r0, [r7, #0]
    float pressure_correction = bme.pressure/100;
 8086cfa:	6868      	ldr	r0, [r5, #4]
 8086cfc:	f007 fa6e 	bl	808e1dc <__aeabi_fdiv>
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086d00:	498f      	ldr	r1, [pc, #572]	; (8086f40 <loop+0x340>)
    float pressure_correction = bme.pressure/100;
 8086d02:	4605      	mov	r5, r0
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086d04:	f007 fb72 	bl	808e3ec <__aeabi_fcmpgt>
 8086d08:	2800      	cmp	r0, #0
 8086d0a:	f000 80fc 	beq.w	8086f06 <loop+0x306>
 8086d0e:	4628      	mov	r0, r5
 8086d10:	4990      	ldr	r1, [pc, #576]	; (8086f54 <loop+0x354>)
 8086d12:	f007 fb4d 	bl	808e3b0 <__aeabi_fcmplt>
 8086d16:	2800      	cmp	r0, #0
 8086d18:	f000 80f5 	beq.w	8086f06 <loop+0x306>
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086d1c:	4628      	mov	r0, r5
 8086d1e:	498e      	ldr	r1, [pc, #568]	; (8086f58 <loop+0x358>)
 8086d20:	f007 fa5c 	bl	808e1dc <__aeabi_fdiv>
        if(debugging_enabled){
 8086d24:	6823      	ldr	r3, [r4, #0]
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086d26:	4605      	mov	r5, r0
        if(debugging_enabled){
 8086d28:	b15b      	cbz	r3, 8086d42 <loop+0x142>
            Serial.printf("pressure correction factor for CO2:%1.2f\n\r", pressure_correction);
 8086d2a:	f005 fed5 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086d2e:	4606      	mov	r6, r0
 8086d30:	4628      	mov	r0, r5
 8086d32:	f006 fcf1 	bl	808d718 <__aeabi_f2d>
 8086d36:	4602      	mov	r2, r0
 8086d38:	460b      	mov	r3, r1
 8086d3a:	4630      	mov	r0, r6
 8086d3c:	4987      	ldr	r1, [pc, #540]	; (8086f5c <loop+0x35c>)
 8086d3e:	f7f9 ffaf 	bl	8080ca0 <_ZN5Print6printfEPKcz>
        CO2_float *= pressure_correction;
 8086d42:	6838      	ldr	r0, [r7, #0]
 8086d44:	4629      	mov	r1, r5
 8086d46:	f007 f995 	bl	808e074 <__aeabi_fmul>
 8086d4a:	6038      	str	r0, [r7, #0]
    if(ozone_enabled){
 8086d4c:	4b84      	ldr	r3, [pc, #528]	; (8086f60 <loop+0x360>)
 8086d4e:	681b      	ldr	r3, [r3, #0]
 8086d50:	b10b      	cbz	r3, 8086d56 <loop+0x156>
        readOzone();
 8086d52:	f7fe f941 	bl	8084fd8 <_Z9readOzonev>
    calculateAQI();
 8086d56:	f7fa fd43 	bl	80817e0 <_Z12calculateAQIv>
    sound_average = readSound();
 8086d5a:	f7fa fe41 	bl	80819e0 <_Z9readSoundv>
 8086d5e:	4b81      	ldr	r3, [pc, #516]	; (8086f64 <loop+0x364>)
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086d60:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8086fb8 <loop+0x3b8>
    sound_average = readSound();
 8086d64:	e9c3 0100 	strd	r0, r1, [r3]
    readPlantower();
 8086d68:	f7fb fb84 	bl	8082474 <_Z13readPlantowerv>
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086d6c:	f7fa fcee 	bl	808174c <_Z12readHumidityv>
 8086d70:	4606      	mov	r6, r0
 8086d72:	f7fa fceb 	bl	808174c <_Z12readHumidityv>
 8086d76:	4972      	ldr	r1, [pc, #456]	; (8086f40 <loop+0x340>)
 8086d78:	4605      	mov	r5, r0
 8086d7a:	4630      	mov	r0, r6
 8086d7c:	f007 fa2e 	bl	808e1dc <__aeabi_fdiv>
 8086d80:	f006 fcca 	bl	808d718 <__aeabi_f2d>
 8086d84:	a36a      	add	r3, pc, #424	; (adr r3, 8086f30 <loop+0x330>)
 8086d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086d8a:	f006 fd1d 	bl	808d7c8 <__aeabi_dmul>
 8086d8e:	4606      	mov	r6, r0
 8086d90:	460f      	mov	r7, r1
 8086d92:	4628      	mov	r0, r5
 8086d94:	496a      	ldr	r1, [pc, #424]	; (8086f40 <loop+0x340>)
 8086d96:	f007 fa21 	bl	808e1dc <__aeabi_fdiv>
 8086d9a:	4601      	mov	r1, r0
 8086d9c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8086da0:	f007 f85e 	bl	808de60 <__aeabi_fsub>
 8086da4:	f006 fcb8 	bl	808d718 <__aeabi_f2d>
 8086da8:	4602      	mov	r2, r0
 8086daa:	460b      	mov	r3, r1
 8086dac:	4630      	mov	r0, r6
 8086dae:	4639      	mov	r1, r7
 8086db0:	f006 fe34 	bl	808da1c <__aeabi_ddiv>
 8086db4:	a360      	add	r3, pc, #384	; (adr r3, 8086f38 <loop+0x338>)
 8086db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086dba:	f006 fb4f 	bl	808d45c <__adddf3>
 8086dbe:	f006 fffb 	bl	808ddb8 <__aeabi_d2f>
    if(debugging_enabled){
 8086dc2:	6823      	ldr	r3, [r4, #0]
 8086dc4:	4645      	mov	r5, r8
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086dc6:	f8c8 0000 	str.w	r0, [r8]
    if(debugging_enabled){
 8086dca:	b1bb      	cbz	r3, 8086dfc <loop+0x1fc>
        Serial.printf("pm2.5 correction factor: %1.2f, %1.2f\n\r", pm_25_correction_factor, readHumidity()/100);
 8086dcc:	f005 fe84 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086dd0:	4606      	mov	r6, r0
 8086dd2:	f8d8 0000 	ldr.w	r0, [r8]
 8086dd6:	f006 fc9f 	bl	808d718 <__aeabi_f2d>
 8086dda:	4689      	mov	r9, r1
 8086ddc:	4680      	mov	r8, r0
 8086dde:	f7fa fcb5 	bl	808174c <_Z12readHumidityv>
 8086de2:	4957      	ldr	r1, [pc, #348]	; (8086f40 <loop+0x340>)
 8086de4:	f007 f9fa 	bl	808e1dc <__aeabi_fdiv>
 8086de8:	f006 fc96 	bl	808d718 <__aeabi_f2d>
 8086dec:	4642      	mov	r2, r8
 8086dee:	e9cd 0100 	strd	r0, r1, [sp]
 8086df2:	464b      	mov	r3, r9
 8086df4:	4630      	mov	r0, r6
 8086df6:	495c      	ldr	r1, [pc, #368]	; (8086f68 <loop+0x368>)
 8086df8:	f7f9 ff52 	bl	8080ca0 <_ZN5Print6printfEPKcz>
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
 8086dfc:	4b5b      	ldr	r3, [pc, #364]	; (8086f6c <loop+0x36c>)
 8086dfe:	6818      	ldr	r0, [r3, #0]
 8086e00:	f007 f8e4 	bl	808dfcc <__aeabi_i2f>
 8086e04:	6829      	ldr	r1, [r5, #0]
 8086e06:	f007 f9e9 	bl	808e1dc <__aeabi_fdiv>
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
 8086e0a:	4b59      	ldr	r3, [pc, #356]	; (8086f70 <loop+0x370>)
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
 8086e0c:	4605      	mov	r5, r0
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
 8086e0e:	6818      	ldr	r0, [r3, #0]
 8086e10:	f007 f8dc 	bl	808dfcc <__aeabi_i2f>
 8086e14:	4601      	mov	r1, r0
 8086e16:	4628      	mov	r0, r5
 8086e18:	f007 f824 	bl	808de64 <__addsf3>
    corrected_PM_25 = corrected_PM_25 * PM_25_slope;
 8086e1c:	4b55      	ldr	r3, [pc, #340]	; (8086f74 <loop+0x374>)
 8086e1e:	6819      	ldr	r1, [r3, #0]
 8086e20:	f007 f928 	bl	808e074 <__aeabi_fmul>
 8086e24:	4b54      	ldr	r3, [pc, #336]	; (8086f78 <loop+0x378>)
 8086e26:	6018      	str	r0, [r3, #0]
    outputDataToESP();
 8086e28:	f7fc ff96 	bl	8083d58 <_Z15outputDataToESPv>
    sample_counter = ++sample_counter;
 8086e2c:	4b53      	ldr	r3, [pc, #332]	; (8086f7c <loop+0x37c>)
 8086e2e:	681a      	ldr	r2, [r3, #0]
    if(sample_counter == 99)    {
 8086e30:	2a62      	cmp	r2, #98	; 0x62
    sample_counter = ++sample_counter;
 8086e32:	f102 0101 	add.w	r1, r2, #1
          sample_counter = 0;
 8086e36:	bf0a      	itet	eq
 8086e38:	2200      	moveq	r2, #0
    sample_counter = ++sample_counter;
 8086e3a:	6019      	strne	r1, [r3, #0]
          sample_counter = 0;
 8086e3c:	601a      	streq	r2, [r3, #0]
    if (Serial.available() > 0) {
 8086e3e:	f005 fe4b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086e42:	6803      	ldr	r3, [r0, #0]
 8086e44:	691b      	ldr	r3, [r3, #16]
 8086e46:	4798      	blx	r3
 8086e48:	2800      	cmp	r0, #0
 8086e4a:	dd1c      	ble.n	8086e86 <loop+0x286>
        incomingByte = Serial.read();
 8086e4c:	f005 fe44 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086e50:	6803      	ldr	r3, [r0, #0]
 8086e52:	4d4b      	ldr	r5, [pc, #300]	; (8086f80 <loop+0x380>)
 8086e54:	695b      	ldr	r3, [r3, #20]
 8086e56:	4798      	blx	r3
        if(debugging_enabled){
 8086e58:	6823      	ldr	r3, [r4, #0]
        incomingByte = Serial.read();
 8086e5a:	7028      	strb	r0, [r5, #0]
        if(debugging_enabled){
 8086e5c:	b14b      	cbz	r3, 8086e72 <loop+0x272>
            Serial.print("incomming byte:");
 8086e5e:	f005 fe3b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086e62:	4948      	ldr	r1, [pc, #288]	; (8086f84 <loop+0x384>)
 8086e64:	f004 fd6a 	bl	808b93c <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 8086e68:	f005 fe36 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086e6c:	7829      	ldrb	r1, [r5, #0]
 8086e6e:	f004 fd82 	bl	808b976 <_ZN5Print7printlnEc>
        Serial.println(incomingByte);
 8086e72:	f005 fe31 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086e76:	7829      	ldrb	r1, [r5, #0]
 8086e78:	f004 fd7d 	bl	808b976 <_ZN5Print7printlnEc>
        if(incomingByte == 'm'){
 8086e7c:	782b      	ldrb	r3, [r5, #0]
 8086e7e:	2b6d      	cmp	r3, #109	; 0x6d
 8086e80:	d101      	bne.n	8086e86 <loop+0x286>
          serialMenu();
 8086e82:	f7ff f969 	bl	8086158 <_Z10serialMenuv>
    if(serial_cellular_enabled){
 8086e86:	4b40      	ldr	r3, [pc, #256]	; (8086f88 <loop+0x388>)
 8086e88:	681b      	ldr	r3, [r3, #0]
 8086e8a:	2b00      	cmp	r3, #0
 8086e8c:	f000 80e2 	beq.w	8087054 <loop+0x454>
        status_word.status_int |= 0x01;
 8086e90:	4a3e      	ldr	r2, [pc, #248]	; (8086f8c <loop+0x38c>)
 8086e92:	8813      	ldrh	r3, [r2, #0]
 8086e94:	f043 0301 	orr.w	r3, r3, #1
 8086e98:	8013      	strh	r3, [r2, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086e9a:	f003 fe81 	bl	808aba0 <spark_cloud_flag_connected>
      if (Particle.connected() == false && tried_cellular_connect == false) {
 8086e9e:	b920      	cbnz	r0, 8086eaa <loop+0x2aa>
 8086ea0:	4b3b      	ldr	r3, [pc, #236]	; (8086f90 <loop+0x390>)
 8086ea2:	781a      	ldrb	r2, [r3, #0]
 8086ea4:	2a00      	cmp	r2, #0
 8086ea6:	f000 8089 	beq.w	8086fbc <loop+0x3bc>
 8086eaa:	f003 fe79 	bl	808aba0 <spark_cloud_flag_connected>
      }else if(Particle.connected() == true){  //this means that it is already connected
 8086eae:	2800      	cmp	r0, #0
 8086eb0:	f040 80c5 	bne.w	808703e <loop+0x43e>
    powerCheck.loop();
 8086eb4:	4d37      	ldr	r5, [pc, #220]	; (8086f94 <loop+0x394>)
 8086eb6:	4628      	mov	r0, r5
 8086eb8:	f000 f99e 	bl	80871f8 <_ZN10PowerCheck4loopEv>
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8086ebc:	4b36      	ldr	r3, [pc, #216]	; (8086f98 <loop+0x398>)
 8086ebe:	681b      	ldr	r3, [r3, #0]
 8086ec0:	2b01      	cmp	r3, #1
 8086ec2:	d110      	bne.n	8086ee6 <loop+0x2e6>
 8086ec4:	4835      	ldr	r0, [pc, #212]	; (8086f9c <loop+0x39c>)
 8086ec6:	f005 f99f 	bl	808c208 <_ZN9FuelGauge6getSoCEv>
 8086eca:	4935      	ldr	r1, [pc, #212]	; (8086fa0 <loop+0x3a0>)
 8086ecc:	f007 fa70 	bl	808e3b0 <__aeabi_fcmplt>
 8086ed0:	b148      	cbz	r0, 8086ee6 <loop+0x2e6>
 8086ed2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8086ed6:	b933      	cbnz	r3, 8086ee6 <loop+0x2e6>
        Serial.println("Going to sleep because battery is below 20% charge");
 8086ed8:	f005 fdfe 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086edc:	4931      	ldr	r1, [pc, #196]	; (8086fa4 <loop+0x3a4>)
 8086ede:	f004 fd40 	bl	808b962 <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8086ee2:	f7fb fcab 	bl	808283c <_Z16goToSleepBatteryv>
    if(co2_calibration_timer){
 8086ee6:	4a30      	ldr	r2, [pc, #192]	; (8086fa8 <loop+0x3a8>)
 8086ee8:	6813      	ldr	r3, [r2, #0]
 8086eea:	2b00      	cmp	r3, #0
 8086eec:	f43f aec3 	beq.w	8086c76 <loop+0x76>
        co2_calibration_timer--;
 8086ef0:	3b01      	subs	r3, #1
 8086ef2:	6013      	str	r3, [r2, #0]
        if(debugging_enabled){
 8086ef4:	6823      	ldr	r3, [r4, #0]
 8086ef6:	2b00      	cmp	r3, #0
 8086ef8:	f43f aebd 	beq.w	8086c76 <loop+0x76>
            t6713.readStatus(1);
 8086efc:	2101      	movs	r1, #1
 8086efe:	482b      	ldr	r0, [pc, #172]	; (8086fac <loop+0x3ac>)
 8086f00:	f000 fc58 	bl	80877b4 <_ZN13Telaire_T671310readStatusEi>
 8086f04:	e6b7      	b.n	8086c76 <loop+0x76>
        Serial.println("Error: Pressure out of range, not using pressure correction for CO2.");
 8086f06:	f005 fde7 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086f0a:	4929      	ldr	r1, [pc, #164]	; (8086fb0 <loop+0x3b0>)
 8086f0c:	f004 fd29 	bl	808b962 <_ZN5Print7printlnEPKc>
        Serial.printf("Pressure=%1.2f\n\r", pressure_correction);
 8086f10:	f005 fde2 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086f14:	4606      	mov	r6, r0
 8086f16:	4628      	mov	r0, r5
 8086f18:	f006 fbfe 	bl	808d718 <__aeabi_f2d>
 8086f1c:	4602      	mov	r2, r0
 8086f1e:	460b      	mov	r3, r1
 8086f20:	4630      	mov	r0, r6
 8086f22:	4924      	ldr	r1, [pc, #144]	; (8086fb4 <loop+0x3b4>)
 8086f24:	f7f9 febc 	bl	8080ca0 <_ZN5Print6printfEPKcz>
 8086f28:	e710      	b.n	8086d4c <loop+0x14c>
 8086f2a:	bf00      	nop
 8086f2c:	f3af 8000 	nop.w
 8086f30:	b4395810 	.word	0xb4395810
 8086f34:	3fbe76c8 	.word	0x3fbe76c8
 8086f38:	70a3d70a 	.word	0x70a3d70a
 8086f3c:	3ff30a3d 	.word	0x3ff30a3d
 8086f40:	42c80000 	.word	0x42c80000
 8086f44:	080925d2 	.word	0x080925d2
 8086f48:	200006fc 	.word	0x200006fc
 8086f4c:	200002d8 	.word	0x200002d8
 8086f50:	200002c4 	.word	0x200002c4
 8086f54:	44bb8000 	.word	0x44bb8000
 8086f58:	447d5000 	.word	0x447d5000
 8086f5c:	08092752 	.word	0x08092752
 8086f60:	200007a0 	.word	0x200007a0
 8086f64:	20000c78 	.word	0x20000c78
 8086f68:	080927d3 	.word	0x080927d3
 8086f6c:	200002fc 	.word	0x200002fc
 8086f70:	20000314 	.word	0x20000314
 8086f74:	20000310 	.word	0x20000310
 8086f78:	20000624 	.word	0x20000624
 8086f7c:	200007f4 	.word	0x200007f4
 8086f80:	20000704 	.word	0x20000704
 8086f84:	080927fb 	.word	0x080927fb
 8086f88:	20000c74 	.word	0x20000c74
 8086f8c:	20000c90 	.word	0x20000c90
 8086f90:	20000ca4 	.word	0x20000ca4
 8086f94:	200007c0 	.word	0x200007c0
 8086f98:	20000580 	.word	0x20000580
 8086f9c:	200006a4 	.word	0x200006a4
 8086fa0:	41a00000 	.word	0x41a00000
 8086fa4:	080928af 	.word	0x080928af
 8086fa8:	20000620 	.word	0x20000620
 8086fac:	20000c92 	.word	0x20000c92
 8086fb0:	0809277d 	.word	0x0809277d
 8086fb4:	080927c2 	.word	0x080927c2
 8086fb8:	200007b8 	.word	0x200007b8
        tried_cellular_connect = true;
 8086fbc:	2201      	movs	r2, #1
 8086fbe:	701a      	strb	r2, [r3, #0]
          if(debugging_enabled){
 8086fc0:	6823      	ldr	r3, [r4, #0]
 8086fc2:	b173      	cbz	r3, 8086fe2 <loop+0x3e2>
            Serial.println("Connecting to cellular network");
 8086fc4:	f005 fd88 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086fc8:	492f      	ldr	r1, [pc, #188]	; (8087088 <loop+0x488>)
 8086fca:	f004 fcca 	bl	808b962 <_ZN5Print7printlnEPKc>
            writeLogFile("Connecting to cellular network");
 8086fce:	492e      	ldr	r1, [pc, #184]	; (8087088 <loop+0x488>)
 8086fd0:	a804      	add	r0, sp, #16
 8086fd2:	f004 faa1 	bl	808b518 <_ZN6StringC1EPKc>
 8086fd6:	a804      	add	r0, sp, #16
 8086fd8:	f7fa feaa 	bl	8081d30 <_Z12writeLogFile6String>
 8086fdc:	a804      	add	r0, sp, #16
 8086fde:	f004 fa51 	bl	808b484 <_ZN6StringD1Ev>
        network_on(*this, 0, 0, NULL);
 8086fe2:	2300      	movs	r3, #0
 8086fe4:	4829      	ldr	r0, [pc, #164]	; (808708c <loop+0x48c>)
 8086fe6:	461a      	mov	r2, r3
 8086fe8:	4619      	mov	r1, r3
 8086fea:	6840      	ldr	r0, [r0, #4]
 8086fec:	f003 fd90 	bl	808ab10 <network_on>
          if(debugging_enabled){
 8086ff0:	6823      	ldr	r3, [r4, #0]
 8086ff2:	b173      	cbz	r3, 8087012 <loop+0x412>
            Serial.println("after cellularOn");
 8086ff4:	f005 fd70 	bl	808cad8 <_Z16_fetch_usbserialv>
 8086ff8:	4925      	ldr	r1, [pc, #148]	; (8087090 <loop+0x490>)
 8086ffa:	f004 fcb2 	bl	808b962 <_ZN5Print7printlnEPKc>
            writeLogFile("After cellularOn");
 8086ffe:	4925      	ldr	r1, [pc, #148]	; (8087094 <loop+0x494>)
 8087000:	a804      	add	r0, sp, #16
 8087002:	f004 fa89 	bl	808b518 <_ZN6StringC1EPKc>
 8087006:	a804      	add	r0, sp, #16
 8087008:	f7fa fe92 	bl	8081d30 <_Z12writeLogFile6String>
 808700c:	a804      	add	r0, sp, #16
 808700e:	f004 fa39 	bl	808b484 <_ZN6StringD1Ev>
        spark_cloud_flag_connect();
 8087012:	f003 fdbd 	bl	808ab90 <spark_cloud_flag_connect>
          if(debugging_enabled){
 8087016:	6823      	ldr	r3, [r4, #0]
 8087018:	2b00      	cmp	r3, #0
 808701a:	f43f af4b 	beq.w	8086eb4 <loop+0x2b4>
            Serial.println("After particle connect");
 808701e:	f005 fd5b 	bl	808cad8 <_Z16_fetch_usbserialv>
 8087022:	491d      	ldr	r1, [pc, #116]	; (8087098 <loop+0x498>)
 8087024:	f004 fc9d 	bl	808b962 <_ZN5Print7printlnEPKc>
            writeLogFile("After particle connect");
 8087028:	491b      	ldr	r1, [pc, #108]	; (8087098 <loop+0x498>)
 808702a:	a804      	add	r0, sp, #16
 808702c:	f004 fa74 	bl	808b518 <_ZN6StringC1EPKc>
 8087030:	a804      	add	r0, sp, #16
 8087032:	f7fa fe7d 	bl	8081d30 <_Z12writeLogFile6String>
 8087036:	a804      	add	r0, sp, #16
 8087038:	f004 fa24 	bl	808b484 <_ZN6StringD1Ev>
 808703c:	e73a      	b.n	8086eb4 <loop+0x2b4>
        if(debugging_enabled){
 808703e:	6823      	ldr	r3, [r4, #0]
 8087040:	b123      	cbz	r3, 808704c <loop+0x44c>
          Serial.println("setting tried_cellular_connect to false");
 8087042:	f005 fd49 	bl	808cad8 <_Z16_fetch_usbserialv>
 8087046:	4915      	ldr	r1, [pc, #84]	; (808709c <loop+0x49c>)
 8087048:	f004 fc8b 	bl	808b962 <_ZN5Print7printlnEPKc>
        tried_cellular_connect = false;
 808704c:	2200      	movs	r2, #0
 808704e:	4b14      	ldr	r3, [pc, #80]	; (80870a0 <loop+0x4a0>)
 8087050:	701a      	strb	r2, [r3, #0]
 8087052:	e72f      	b.n	8086eb4 <loop+0x2b4>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8087054:	f003 fda4 	bl	808aba0 <spark_cloud_flag_connected>
      if (Particle.connected() == true) {
 8087058:	2800      	cmp	r0, #0
 808705a:	f43f af2b 	beq.w	8086eb4 <loop+0x2b4>
          if(debugging_enabled){
 808705e:	6823      	ldr	r3, [r4, #0]
 8087060:	b173      	cbz	r3, 8087080 <loop+0x480>
            Serial.println("Disconnecting from cellular network");
 8087062:	f005 fd39 	bl	808cad8 <_Z16_fetch_usbserialv>
 8087066:	490f      	ldr	r1, [pc, #60]	; (80870a4 <loop+0x4a4>)
 8087068:	f004 fc7b 	bl	808b962 <_ZN5Print7printlnEPKc>
            writeLogFile("Disconnecting from cellular network");
 808706c:	490d      	ldr	r1, [pc, #52]	; (80870a4 <loop+0x4a4>)
 808706e:	a804      	add	r0, sp, #16
 8087070:	f004 fa52 	bl	808b518 <_ZN6StringC1EPKc>
 8087074:	a804      	add	r0, sp, #16
 8087076:	f7fa fe5b 	bl	8081d30 <_Z12writeLogFile6String>
 808707a:	a804      	add	r0, sp, #16
 808707c:	f004 fa02 	bl	808b484 <_ZN6StringD1Ev>
          Cellular.off();
 8087080:	4802      	ldr	r0, [pc, #8]	; (808708c <loop+0x48c>)
 8087082:	f7f9 fea5 	bl	8080dd0 <_ZN5spark13CellularClass3offEv>
 8087086:	e715      	b.n	8086eb4 <loop+0x2b4>
 8087088:	0809280b 	.word	0x0809280b
 808708c:	200011b4 	.word	0x200011b4
 8087090:	0809282a 	.word	0x0809282a
 8087094:	0809283b 	.word	0x0809283b
 8087098:	0809284c 	.word	0x0809284c
 808709c:	08092863 	.word	0x08092863
 80870a0:	20000ca4 	.word	0x20000ca4
 80870a4:	0809288b 	.word	0x0809288b

080870a8 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 80870a8:	4770      	bx	lr

080870aa <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 80870aa:	b510      	push	{r4, lr}
 80870ac:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 80870ae:	f006 f96d 	bl	808d38c <_Z19__fetch_global_Wirev>
 80870b2:	2148      	movs	r1, #72	; 0x48
 80870b4:	f005 ff0a 	bl	808cecc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 80870b8:	f006 f968 	bl	808d38c <_Z19__fetch_global_Wirev>
 80870bc:	6803      	ldr	r3, [r0, #0]
 80870be:	4621      	mov	r1, r4
 80870c0:	689b      	ldr	r3, [r3, #8]
 80870c2:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 80870c4:	f006 f962 	bl	808d38c <_Z19__fetch_global_Wirev>
 80870c8:	2100      	movs	r1, #0
 80870ca:	f005 ff1a 	bl	808cf02 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 80870ce:	f006 f95d 	bl	808d38c <_Z19__fetch_global_Wirev>
 80870d2:	2301      	movs	r3, #1
 80870d4:	2148      	movs	r1, #72	; 0x48
 80870d6:	461a      	mov	r2, r3
 80870d8:	f005 fedf 	bl	808ce9a <_ZN7TwoWire11requestFromEhjh>
      if(Wire.available()){
 80870dc:	f006 f956 	bl	808d38c <_Z19__fetch_global_Wirev>
 80870e0:	6803      	ldr	r3, [r0, #0]
 80870e2:	691b      	ldr	r3, [r3, #16]
 80870e4:	4798      	blx	r3
 80870e6:	b128      	cbz	r0, 80870f4 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 80870e8:	f006 f950 	bl	808d38c <_Z19__fetch_global_Wirev>
 80870ec:	6803      	ldr	r3, [r0, #0]
 80870ee:	695b      	ldr	r3, [r3, #20]
 80870f0:	4798      	blx	r3
 80870f2:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 80870f4:	bd10      	pop	{r4, pc}

080870f6 <_ZN8LMP910005writeEhh>:
uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 80870f6:	b570      	push	{r4, r5, r6, lr}
 80870f8:	4616      	mov	r6, r2
 80870fa:	460c      	mov	r4, r1
 80870fc:	4605      	mov	r5, r0
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 80870fe:	f006 f945 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087102:	2148      	movs	r1, #72	; 0x48
 8087104:	f005 fee2 	bl	808cecc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8087108:	f006 f940 	bl	808d38c <_Z19__fetch_global_Wirev>
 808710c:	6803      	ldr	r3, [r0, #0]
 808710e:	4621      	mov	r1, r4
 8087110:	689b      	ldr	r3, [r3, #8]
 8087112:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8087114:	f006 f93a 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087118:	6803      	ldr	r3, [r0, #0]
 808711a:	4631      	mov	r1, r6
 808711c:	689b      	ldr	r3, [r3, #8]
 808711e:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8087120:	f006 f934 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087124:	2101      	movs	r1, #1
 8087126:	f005 feec 	bl	808cf02 <_ZN7TwoWire15endTransmissionEh>
      return read(reg);
 808712a:	4621      	mov	r1, r4
 808712c:	4628      	mov	r0, r5
}
 808712e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return read(reg);
 8087132:	f7ff bfba 	b.w	80870aa <_ZN8LMP910004readEh>

08087136 <_ZN8LMP910006statusEv>:

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8087136:	2100      	movs	r1, #0
 8087138:	f7ff bfb7 	b.w	80870aa <_ZN8LMP910004readEh>

0808713c <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 808713c:	2201      	movs	r2, #1
 808713e:	4611      	mov	r1, r2
 8087140:	f7ff bfd9 	b.w	80870f6 <_ZN8LMP910005writeEhh>

08087144 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8087144:	2200      	movs	r2, #0
 8087146:	2101      	movs	r1, #1
 8087148:	f7ff bfd5 	b.w	80870f6 <_ZN8LMP910005writeEhh>

0808714c <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 808714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087150:	4604      	mov	r4, r0
 8087152:	4688      	mov	r8, r1
 8087154:	4617      	mov	r7, r2
 8087156:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8087158:	f7ff ffed 	bl	8087136 <_ZN8LMP910006statusEv>
 808715c:	2801      	cmp	r0, #1
 808715e:	4605      	mov	r5, r0
 8087160:	d117      	bne.n	8087192 <_ZN8LMP910009configureEhhh+0x46>
            unlock();
 8087162:	4620      	mov	r0, r4
 8087164:	f7ff ffee 	bl	8087144 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8087168:	4642      	mov	r2, r8
 808716a:	2110      	movs	r1, #16
 808716c:	4620      	mov	r0, r4
 808716e:	f7ff ffc2 	bl	80870f6 <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 8087172:	463a      	mov	r2, r7
 8087174:	2111      	movs	r1, #17
 8087176:	4620      	mov	r0, r4
 8087178:	f7ff ffbd 	bl	80870f6 <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 808717c:	4632      	mov	r2, r6
 808717e:	2112      	movs	r1, #18
 8087180:	4620      	mov	r0, r4
 8087182:	f7ff ffb8 	bl	80870f6 <_ZN8LMP910005writeEhh>
            lock();
 8087186:	4620      	mov	r0, r4
 8087188:	f7ff ffd8 	bl	808713c <_ZN8LMP910004lockEv>
            return 1;
      }
      return 0;
}
 808718c:	4628      	mov	r0, r5
 808718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return 0;
 8087192:	2500      	movs	r5, #0
 8087194:	e7fa      	b.n	808718c <_ZN8LMP910009configureEhhh+0x40>
	...

08087198 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8087198:	b510      	push	{r4, lr}
 808719a:	4604      	mov	r4, r0
 808719c:	4b03      	ldr	r3, [pc, #12]	; (80871ac <_ZN10PowerCheckD1Ev+0x14>)
 808719e:	f840 3b14 	str.w	r3, [r0], #20
 80871a2:	f003 fdab 	bl	808acfc <_ZN4PMICD1Ev>
}
 80871a6:	4620      	mov	r0, r4
 80871a8:	bd10      	pop	{r4, pc}
 80871aa:	bf00      	nop
 80871ac:	08092968 	.word	0x08092968

080871b0 <_ZN10PowerCheckD0Ev>:
PowerCheck::~PowerCheck() {
 80871b0:	b510      	push	{r4, lr}
 80871b2:	4604      	mov	r4, r0
}
 80871b4:	f7ff fff0 	bl	8087198 <_ZN10PowerCheckD1Ev>
 80871b8:	4620      	mov	r0, r4
 80871ba:	2124      	movs	r1, #36	; 0x24
 80871bc:	f006 f93b 	bl	808d436 <_ZdlPvj>
 80871c0:	4620      	mov	r0, r4
 80871c2:	bd10      	pop	{r4, pc}

080871c4 <_ZN10PowerCheckC1Ev>:
PowerCheck::PowerCheck() {
 80871c4:	b538      	push	{r3, r4, r5, lr}
 80871c6:	4b0b      	ldr	r3, [pc, #44]	; (80871f4 <_ZN10PowerCheckC1Ev+0x30>)
 80871c8:	2500      	movs	r5, #0
 80871ca:	2232      	movs	r2, #50	; 0x32
 80871cc:	6003      	str	r3, [r0, #0]
 80871ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80871d2:	4604      	mov	r4, r0
 80871d4:	e9c0 2301 	strd	r2, r3, [r0, #4]
 80871d8:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80871dc:	4629      	mov	r1, r5
 80871de:	3014      	adds	r0, #20
 80871e0:	f003 fd6d 	bl	808acbe <_ZN4PMICC1Eb>
 80871e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}
 80871e8:	4620      	mov	r0, r4
PowerCheck::PowerCheck() {
 80871ea:	e9c4 5506 	strd	r5, r5, [r4, #24]
 80871ee:	6223      	str	r3, [r4, #32]
}
 80871f0:	bd38      	pop	{r3, r4, r5, pc}
 80871f2:	bf00      	nop
 80871f4:	08092968 	.word	0x08092968

080871f8 <_ZN10PowerCheck4loopEv>:

void PowerCheck::loop() {
 80871f8:	b510      	push	{r4, lr}
 80871fa:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80871fc:	f003 fa50 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8087200:	68e3      	ldr	r3, [r4, #12]
 8087202:	1ac0      	subs	r0, r0, r3
 8087204:	6863      	ldr	r3, [r4, #4]
 8087206:	4298      	cmp	r0, r3
 8087208:	d31a      	bcc.n	8087240 <_ZN10PowerCheck4loopEv+0x48>
 808720a:	f003 fa49 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 808720e:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8087210:	f104 0014 	add.w	r0, r4, #20
 8087214:	f003 fdc5 	bl	808ada2 <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8087218:	f010 0304 	ands.w	r3, r0, #4
 808721c:	d00b      	beq.n	8087236 <_ZN10PowerCheck4loopEv+0x3e>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 808721e:	f894 3020 	ldrb.w	r3, [r4, #32]
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8087222:	f3c0 1001 	ubfx	r0, r0, #4, #2
			if (chrgStat != lastChrgStat) {
 8087226:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8087228:	bf1f      	itttt	ne
 808722a:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 808722c:	f884 0020 	strbne.w	r0, [r4, #32]
				changeCount++;
 8087230:	3301      	addne	r3, #1
 8087232:	61e3      	strne	r3, [r4, #28]
			}

			// We have power (USB or VIN)
			hasPower = true;
 8087234:	2301      	movs	r3, #1
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8087236:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		}

		checkCount++;
 808723a:	69a3      	ldr	r3, [r4, #24]
 808723c:	3301      	adds	r3, #1
 808723e:	61a3      	str	r3, [r4, #24]
 8087240:	f003 fa2e 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8087244:	6923      	ldr	r3, [r4, #16]
 8087246:	1ac0      	subs	r0, r0, r3
 8087248:	68a3      	ldr	r3, [r4, #8]
 808724a:	4298      	cmp	r0, r3
 808724c:	d914      	bls.n	8087278 <_ZN10PowerCheck4loopEv+0x80>
 808724e:	f003 fa27 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8087252:	69a3      	ldr	r3, [r4, #24]
		lastSlowCheck = millis();
 8087254:	6120      	str	r0, [r4, #16]
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8087256:	2b0a      	cmp	r3, #10
 8087258:	dc0f      	bgt.n	808727a <_ZN10PowerCheck4loopEv+0x82>
 808725a:	2301      	movs	r3, #1
 808725c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8087260:	f894 3020 	ldrb.w	r3, [r4, #32]
 8087264:	3b01      	subs	r3, #1
 8087266:	2b01      	cmp	r3, #1
 8087268:	bf8c      	ite	hi
 808726a:	2300      	movhi	r3, #0
 808726c:	2301      	movls	r3, #1
 808726e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 8087272:	2300      	movs	r3, #0
		changeCount = 0;
 8087274:	e9c4 3306 	strd	r3, r3, [r4, #24]
	}

}
 8087278:	bd10      	pop	{r4, pc}
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 808727a:	69e2      	ldr	r2, [r4, #28]
 808727c:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8087280:	ddeb      	ble.n	808725a <_ZN10PowerCheck4loopEv+0x62>
 8087282:	2300      	movs	r3, #0
 8087284:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8087288:	e7f1      	b.n	808726e <_ZN10PowerCheck4loopEv+0x76>

0808728a <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 808728a:	b510      	push	{r4, lr}
 808728c:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 808728e:	f006 f87d 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087292:	6803      	ldr	r3, [r0, #0]
 8087294:	4621      	mov	r1, r4
}
 8087296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.write((uint8_t)x);
 808729a:	689b      	ldr	r3, [r3, #8]
 808729c:	4718      	bx	r3

0808729e <_ZL7i2creadv>:
static uint8_t i2cread(void) {
 808729e:	b508      	push	{r3, lr}
  return Wire.read();
 80872a0:	f006 f874 	bl	808d38c <_Z19__fetch_global_Wirev>
 80872a4:	6803      	ldr	r3, [r0, #0]
 80872a6:	695b      	ldr	r3, [r3, #20]
 80872a8:	4798      	blx	r3
}
 80872aa:	b2c0      	uxtb	r0, r0
 80872ac:	bd08      	pop	{r3, pc}

080872ae <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 80872ae:	b570      	push	{r4, r5, r6, lr}
 80872b0:	4606      	mov	r6, r0
 80872b2:	460d      	mov	r5, r1
 80872b4:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 80872b6:	f006 f869 	bl	808d38c <_Z19__fetch_global_Wirev>
 80872ba:	4631      	mov	r1, r6
 80872bc:	f005 fe02 	bl	808cec4 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 80872c0:	4628      	mov	r0, r5
 80872c2:	f7ff ffe2 	bl	808728a <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 80872c6:	0a20      	lsrs	r0, r4, #8
 80872c8:	f7ff ffdf 	bl	808728a <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 80872cc:	b2e0      	uxtb	r0, r4
 80872ce:	f7ff ffdc 	bl	808728a <_ZL8i2cwriteh>
  Wire.endTransmission();
 80872d2:	f006 f85b 	bl	808d38c <_Z19__fetch_global_Wirev>
}
 80872d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 80872da:	f005 be16 	b.w	808cf0a <_ZN7TwoWire15endTransmissionEv>

080872de <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 80872de:	b510      	push	{r4, lr}
 80872e0:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 80872e2:	f006 f853 	bl	808d38c <_Z19__fetch_global_Wirev>
 80872e6:	4621      	mov	r1, r4
 80872e8:	f005 fdec 	bl	808cec4 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 80872ec:	2000      	movs	r0, #0
 80872ee:	f7ff ffcc 	bl	808728a <_ZL8i2cwriteh>
  Wire.endTransmission();
 80872f2:	f006 f84b 	bl	808d38c <_Z19__fetch_global_Wirev>
 80872f6:	f005 fe08 	bl	808cf0a <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 80872fa:	f006 f847 	bl	808d38c <_Z19__fetch_global_Wirev>
 80872fe:	4621      	mov	r1, r4
 8087300:	2202      	movs	r2, #2
 8087302:	f005 fddc 	bl	808cebe <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());  
 8087306:	f7ff ffca 	bl	808729e <_ZL7i2creadv>
 808730a:	4604      	mov	r4, r0
 808730c:	f7ff ffc7 	bl	808729e <_ZL7i2creadv>
 8087310:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8087314:	b280      	uxth	r0, r0
 8087316:	bd10      	pop	{r4, pc}

08087318 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8087318:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 808731a:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 808731c:	2108      	movs	r1, #8
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 808731e:	8082      	strh	r2, [r0, #4]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8087320:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8087322:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 8087324:	4770      	bx	lr

08087326 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8087326:	b508      	push	{r3, lr}
  Wire.begin();
 8087328:	f006 f830 	bl	808d38c <_Z19__fetch_global_Wirev>
}
 808732c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin();
 8087330:	f005 bd96 	b.w	808ce60 <_ZN7TwoWire5beginEv>

08087334 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 8087334:	8081      	strh	r1, [r0, #4]
}
 8087336:	4770      	bx	lr

08087338 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8087338:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 808733a:	b510      	push	{r4, lr}
 808733c:	4604      	mov	r4, r0
  if (channel > 3)
 808733e:	d822      	bhi.n	8087386 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8087340:	2902      	cmp	r1, #2
  config |= m_gain;
 8087342:	8882      	ldrh	r2, [r0, #4]
  switch (channel)
 8087344:	d019      	beq.n	808737a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
 8087346:	2903      	cmp	r1, #3
 8087348:	d01a      	beq.n	8087380 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
 808734a:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 808734c:	bf14      	ite	ne
 808734e:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8087352:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8087356:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 808735a:	2101      	movs	r1, #1
 808735c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8087360:	7820      	ldrb	r0, [r4, #0]
 8087362:	f7ff ffa4 	bl	80872ae <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 8087366:	7860      	ldrb	r0, [r4, #1]
 8087368:	f004 fec4 	bl	808c0f4 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 808736c:	7820      	ldrb	r0, [r4, #0]
 808736e:	f7ff ffb6 	bl	80872de <_ZL12readRegisterhh.isra.0>
 8087372:	78a3      	ldrb	r3, [r4, #2]
 8087374:	4118      	asrs	r0, r3
 8087376:	b280      	uxth	r0, r0
}
 8087378:	bd10      	pop	{r4, pc}
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 808737a:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 808737e:	e7ea      	b.n	8087356 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8087380:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 8087384:	e7e7      	b.n	8087356 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
 8087386:	2000      	movs	r0, #0
 8087388:	e7f6      	b.n	8087378 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>
	...

0808738c <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 808738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087390:	460e      	mov	r6, r1
 8087392:	b088      	sub	sp, #32
 8087394:	4604      	mov	r4, r0
 8087396:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 8087398:	4668      	mov	r0, sp
 808739a:	2302      	movs	r3, #2
 808739c:	2200      	movs	r2, #0
 808739e:	f004 fa5d 	bl	808b85c <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 80873a2:	230a      	movs	r3, #10
 80873a4:	2202      	movs	r2, #2
 80873a6:	4631      	mov	r1, r6
 80873a8:	a804      	add	r0, sp, #16
 80873aa:	f004 fa57 	bl	808b85c <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 80873ae:	4668      	mov	r0, sp
 80873b0:	f004 fa76 	bl	808b8a0 <_ZNK6String5toIntEv>
 80873b4:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 80873b6:	a804      	add	r0, sp, #16
 80873b8:	f004 fa72 	bl	808b8a0 <_ZNK6String5toIntEv>
 80873bc:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 80873be:	4668      	mov	r0, sp
 80873c0:	f004 fa6e 	bl	808b8a0 <_ZNK6String5toIntEv>
 80873c4:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 80873c6:	a804      	add	r0, sp, #16
 80873c8:	f004 fa6f 	bl	808b8aa <_ZNK6String7toFloatEv>
 80873cc:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
 80873ce:	4630      	mov	r0, r6
 80873d0:	f006 f990 	bl	808d6f4 <__aeabi_i2d>
 80873d4:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 80873d6:	4640      	mov	r0, r8
    latitude = whole_part;
 80873d8:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 80873da:	f006 f99d 	bl	808d718 <__aeabi_f2d>
    latitude += (frac_part)/60;
 80873de:	2200      	movs	r2, #0
 80873e0:	4b0d      	ldr	r3, [pc, #52]	; (8087418 <_ZN3GPS15set_lat_decimalE6Stringc+0x8c>)
 80873e2:	f006 fb1b 	bl	808da1c <__aeabi_ddiv>
 80873e6:	460b      	mov	r3, r1
 80873e8:	4602      	mov	r2, r0
 80873ea:	4639      	mov	r1, r7
 80873ec:	4630      	mov	r0, r6
 80873ee:	f006 f835 	bl	808d45c <__adddf3>
    if(nsString == 'S'){
 80873f2:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 80873f4:	bf0c      	ite	eq
 80873f6:	2300      	moveq	r3, #0
 80873f8:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    latitude += (frac_part)/60;
 80873fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
 8087400:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    String frac_str = latString.substring(2,10);
 8087404:	a804      	add	r0, sp, #16
 8087406:	f004 f83d 	bl	808b484 <_ZN6StringD1Ev>
    String whole_str = latString.substring(0,2);
 808740a:	4668      	mov	r0, sp
 808740c:	f004 f83a 	bl	808b484 <_ZN6StringD1Ev>
    }
}
 8087410:	b008      	add	sp, #32
 8087412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087416:	bf00      	nop
 8087418:	404e0000 	.word	0x404e0000

0808741c <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 808741c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087420:	460e      	mov	r6, r1
 8087422:	b088      	sub	sp, #32
 8087424:	4604      	mov	r4, r0
 8087426:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8087428:	4668      	mov	r0, sp
 808742a:	2303      	movs	r3, #3
 808742c:	2200      	movs	r2, #0
 808742e:	f004 fa15 	bl	808b85c <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 8087432:	230a      	movs	r3, #10
 8087434:	2203      	movs	r2, #3
 8087436:	4631      	mov	r1, r6
 8087438:	a804      	add	r0, sp, #16
 808743a:	f004 fa0f 	bl	808b85c <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 808743e:	4668      	mov	r0, sp
 8087440:	f004 fa2e 	bl	808b8a0 <_ZNK6String5toIntEv>
 8087444:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 8087446:	a804      	add	r0, sp, #16
 8087448:	f004 fa2a 	bl	808b8a0 <_ZNK6String5toIntEv>
 808744c:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 808744e:	4668      	mov	r0, sp
 8087450:	f004 fa26 	bl	808b8a0 <_ZNK6String5toIntEv>
 8087454:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8087456:	a804      	add	r0, sp, #16
 8087458:	f004 fa27 	bl	808b8aa <_ZNK6String7toFloatEv>
 808745c:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
 808745e:	4630      	mov	r0, r6
 8087460:	f006 f948 	bl	808d6f4 <__aeabi_i2d>
 8087464:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 8087466:	4640      	mov	r0, r8
    longitude = whole_part;
 8087468:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 808746a:	f006 f955 	bl	808d718 <__aeabi_f2d>
    longitude += (frac_part)/60;
 808746e:	2200      	movs	r2, #0
 8087470:	4b0c      	ldr	r3, [pc, #48]	; (80874a4 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 8087472:	f006 fad3 	bl	808da1c <__aeabi_ddiv>
 8087476:	4602      	mov	r2, r0
 8087478:	460b      	mov	r3, r1
 808747a:	4630      	mov	r0, r6
 808747c:	4639      	mov	r1, r7
 808747e:	f005 ffed 	bl	808d45c <__adddf3>
    if(ewString == 'E'){
 8087482:	3d45      	subs	r5, #69	; 0x45
 8087484:	bf18      	it	ne
 8087486:	2501      	movne	r5, #1
    longitude += (frac_part)/60;
 8087488:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
 808748c:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    String frac_str = longString.substring(3,10);
 8087490:	a804      	add	r0, sp, #16
 8087492:	f003 fff7 	bl	808b484 <_ZN6StringD1Ev>
    String whole_str = longString.substring(0,3);
 8087496:	4668      	mov	r0, sp
 8087498:	f003 fff4 	bl	808b484 <_ZN6StringD1Ev>
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 808749c:	b008      	add	sp, #32
 808749e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80874a2:	bf00      	nop
 80874a4:	404e0000 	.word	0x404e0000

080874a8 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 80874a8:	b510      	push	{r4, lr}
 80874aa:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 80874ac:	4608      	mov	r0, r1
 80874ae:	f004 f9f7 	bl	808b8a0 <_ZNK6String5toIntEv>
 80874b2:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 80874b4:	bd10      	pop	{r4, pc}
	...

080874b8 <_ZN3GPS23set_horizontalDillutionE6String>:

void GPS::set_horizontalDillution(String hdString){
 80874b8:	b510      	push	{r4, lr}
 80874ba:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 80874bc:	4608      	mov	r0, r1
 80874be:	f004 f9f4 	bl	808b8aa <_ZNK6String7toFloatEv>
    temp_float *= 10;
 80874c2:	4902      	ldr	r1, [pc, #8]	; (80874cc <_ZN3GPS23set_horizontalDillutionE6String+0x14>)
 80874c4:	f006 fdd6 	bl	808e074 <__aeabi_fmul>

    horizontal_dillution = temp_float;
 80874c8:	6320      	str	r0, [r4, #48]	; 0x30
}
 80874ca:	bd10      	pop	{r4, pc}
 80874cc:	41200000 	.word	0x41200000

080874d0 <_ZN3GPS12get_latitudeEv>:

double GPS::get_latitude(void){
    return latitude;
}
 80874d0:	f100 0108 	add.w	r1, r0, #8
 80874d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80874d8:	4770      	bx	lr

080874da <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 80874da:	f100 0110 	add.w	r1, r0, #16
 80874de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80874e2:	4770      	bx	lr

080874e4 <_ZN3GPS23get_horizontalDillutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDillution(void){
 80874e4:	b508      	push	{r3, lr}
    return horizontal_dillution;
 80874e6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80874e8:	f006 ff8a 	bl	808e400 <__aeabi_f2iz>
}
 80874ec:	bd08      	pop	{r3, pc}

080874ee <_ZN3GPS17get_latitudeWholeEv>:

int16_t GPS::get_latitudeWhole(void){
    return latWhole;
}
 80874ee:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 80874f2:	4770      	bx	lr

080874f4 <_ZN3GPS16get_latitudeFracEv>:
int16_t GPS::get_latitudeFrac(void){
    return latFrac;
}
 80874f4:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 80874f8:	4770      	bx	lr

080874fa <_ZN3GPS18get_longitudeWholeEv>:
int16_t GPS::get_longitudeWhole(void){
    return longWhole;
}
 80874fa:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
 80874fe:	4770      	bx	lr

08087500 <_ZN3GPS17get_longitudeFracEv>:
int16_t GPS::get_longitudeFrac(void){
    return longFrac;
}
 8087500:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8087504:	4770      	bx	lr

08087506 <_ZN3GPS15get_nsIndicatorEv>:

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 8087506:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 808750a:	4770      	bx	lr

0808750c <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 808750c:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 8087510:	4770      	bx	lr

08087512 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8087512:	6803      	ldr	r3, [r0, #0]
 8087514:	b2c9      	uxtb	r1, r1
 8087516:	689b      	ldr	r3, [r3, #8]
 8087518:	4718      	bx	r3

0808751a <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 808751a:	4770      	bx	lr

0808751c <_ZN13Telaire_T67135beginEv>:

bool Telaire_T6713::begin()
{
 808751c:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("Begin Telaire_T6713");
  #endif
  // start I2C
  Wire.beginTransmission(ADDR_6713);
 808751e:	f005 ff35 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087522:	2115      	movs	r1, #21
 8087524:	f005 fcd2 	bl	808cecc <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 8087528:	f005 ff30 	bl	808d38c <_Z19__fetch_global_Wirev>
 808752c:	2104      	movs	r1, #4
 808752e:	f7ff fff0 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 8087532:	f005 ff2b 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087536:	2113      	movs	r1, #19
 8087538:	f7ff ffeb 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 808753c:	f005 ff26 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087540:	218b      	movs	r1, #139	; 0x8b
 8087542:	f7ff ffe6 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 8087546:	f005 ff21 	bl	808d38c <_Z19__fetch_global_Wirev>
 808754a:	2100      	movs	r1, #0
 808754c:	f7ff ffe1 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 8087550:	f005 ff1c 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087554:	2101      	movs	r1, #1
 8087556:	f7ff ffdc 	bl	8087512 <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 808755a:	f005 ff17 	bl	808d38c <_Z19__fetch_global_Wirev>
 808755e:	f005 fcd4 	bl	808cf0a <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 8087562:	f005 ff13 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087566:	2204      	movs	r2, #4
 8087568:	2115      	movs	r1, #21
 808756a:	f005 fca8 	bl	808cebe <_ZN7TwoWire11requestFromEhj>
  while(Wire.available() == 0);
 808756e:	f005 ff0d 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087572:	6803      	ldr	r3, [r0, #0]
 8087574:	691b      	ldr	r3, [r3, #16]
 8087576:	4798      	blx	r3
 8087578:	2800      	cmp	r0, #0
 808757a:	d0f8      	beq.n	808756e <_ZN13Telaire_T67135beginEv+0x52>
  func_code = Wire.read();
 808757c:	f005 ff06 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087580:	6803      	ldr	r3, [r0, #0]
 8087582:	695b      	ldr	r3, [r3, #20]
 8087584:	4798      	blx	r3
  byte_count = Wire.read();
 8087586:	f005 ff01 	bl	808d38c <_Z19__fetch_global_Wirev>
 808758a:	6803      	ldr	r3, [r0, #0]
 808758c:	695b      	ldr	r3, [r3, #20]
 808758e:	4798      	blx	r3
  MSB = Wire.read();
 8087590:	f005 fefc 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087594:	6803      	ldr	r3, [r0, #0]
 8087596:	695b      	ldr	r3, [r3, #20]
 8087598:	4798      	blx	r3
 808759a:	4604      	mov	r4, r0
  LSB = Wire.read();
 808759c:	f005 fef6 	bl	808d38c <_Z19__fetch_global_Wirev>
 80875a0:	6803      	ldr	r3, [r0, #0]
  Serial.print("MSB: ");
  Serial.println(MSB);
  Serial.print("LSB: ");
  Serial.println(LSB);
  #endif
  int ppm = MSB*256 + LSB;
 80875a2:	b2e4      	uxtb	r4, r4
  LSB = Wire.read();
 80875a4:	695b      	ldr	r3, [r3, #20]
 80875a6:	4798      	blx	r3
  int ppm = MSB*256 + LSB;
 80875a8:	b2c0      	uxtb	r0, r0
 80875aa:	eb00 2004 	add.w	r0, r0, r4, lsl #8
  {
    return false;
  }

  return true;
}
 80875ae:	3800      	subs	r0, #0
 80875b0:	bf18      	it	ne
 80875b2:	2001      	movne	r0, #1
 80875b4:	bd10      	pop	{r4, pc}

080875b6 <_ZN13Telaire_T67138queryPPMEv>:
// send request to read current gas measurement in ppm
// return status: 0 success
void Telaire_T6713::queryPPM()
{
 80875b6:	b508      	push	{r3, lr}
  byte_count = 0;
  MSB = 0;
  LSB = 0;

  // start I2C
  Wire.beginTransmission(ADDR_6713);
 80875b8:	f005 fee8 	bl	808d38c <_Z19__fetch_global_Wirev>
 80875bc:	2115      	movs	r1, #21
 80875be:	f005 fc85 	bl	808cecc <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 80875c2:	f005 fee3 	bl	808d38c <_Z19__fetch_global_Wirev>
 80875c6:	2104      	movs	r1, #4
 80875c8:	f7ff ffa3 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 80875cc:	f005 fede 	bl	808d38c <_Z19__fetch_global_Wirev>
 80875d0:	2113      	movs	r1, #19
 80875d2:	f7ff ff9e 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 80875d6:	f005 fed9 	bl	808d38c <_Z19__fetch_global_Wirev>
 80875da:	218b      	movs	r1, #139	; 0x8b
 80875dc:	f7ff ff99 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 80875e0:	f005 fed4 	bl	808d38c <_Z19__fetch_global_Wirev>
 80875e4:	2100      	movs	r1, #0
 80875e6:	f7ff ff94 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 80875ea:	f005 fecf 	bl	808d38c <_Z19__fetch_global_Wirev>
 80875ee:	2101      	movs	r1, #1
 80875f0:	f7ff ff8f 	bl	8087512 <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 80875f4:	f005 feca 	bl	808d38c <_Z19__fetch_global_Wirev>
  Serial.println(LSB);
  int ppm = MSB*256 + LSB;
  Serial.println(ppm);*/


}
 80875f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.endTransmission();
 80875fc:	f005 bc85 	b.w	808cf0a <_ZN7TwoWire15endTransmissionEv>

08087600 <_ZN13Telaire_T67137readPPMEv>:

// read report of current gas measurement in ppm
int Telaire_T6713::readPPM()
{
 8087600:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("reading gas ppm");
  #endif

  queryPPM();
 8087602:	f7ff ffd8 	bl	80875b6 <_ZN13Telaire_T67138queryPPMEv>
  delay(10);    //test delay
 8087606:	200a      	movs	r0, #10
 8087608:	f004 fd74 	bl	808c0f4 <delay>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 808760c:	f005 febe 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087610:	2204      	movs	r2, #4
 8087612:	2115      	movs	r1, #21
 8087614:	f005 fc53 	bl	808cebe <_ZN7TwoWire11requestFromEhj>

   while(Wire.available() == 0);
 8087618:	f005 feb8 	bl	808d38c <_Z19__fetch_global_Wirev>
 808761c:	6803      	ldr	r3, [r0, #0]
 808761e:	691b      	ldr	r3, [r3, #16]
 8087620:	4798      	blx	r3
 8087622:	2800      	cmp	r0, #0
 8087624:	d0f8      	beq.n	8087618 <_ZN13Telaire_T67137readPPMEv+0x18>
   func_code = Wire.read();
 8087626:	f005 feb1 	bl	808d38c <_Z19__fetch_global_Wirev>
 808762a:	6803      	ldr	r3, [r0, #0]
 808762c:	695b      	ldr	r3, [r3, #20]
 808762e:	4798      	blx	r3
   byte_count = Wire.read();
 8087630:	f005 feac 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087634:	6803      	ldr	r3, [r0, #0]
 8087636:	695b      	ldr	r3, [r3, #20]
 8087638:	4798      	blx	r3
   MSB = Wire.read();
 808763a:	f005 fea7 	bl	808d38c <_Z19__fetch_global_Wirev>
 808763e:	6803      	ldr	r3, [r0, #0]
 8087640:	695b      	ldr	r3, [r3, #20]
 8087642:	4798      	blx	r3
 8087644:	4604      	mov	r4, r0
   LSB = Wire.read();
 8087646:	f005 fea1 	bl	808d38c <_Z19__fetch_global_Wirev>
 808764a:	6803      	ldr	r3, [r0, #0]
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 808764c:	0224      	lsls	r4, r4, #8
   LSB = Wire.read();
 808764e:	695b      	ldr	r3, [r3, #20]
 8087650:	4798      	blx	r3
   return ((MSB<<8)|LSB);
 8087652:	b2a4      	uxth	r4, r4
 8087654:	b2c0      	uxtb	r0, r0
}
 8087656:	4320      	orrs	r0, r4
 8087658:	bd10      	pop	{r4, pc}

0808765a <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 808765a:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 808765c:	f005 fe96 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087660:	2115      	movs	r1, #21
 8087662:	f005 fc33 	bl	808cecc <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 8087666:	f005 fe91 	bl	808d38c <_Z19__fetch_global_Wirev>
 808766a:	2105      	movs	r1, #5
 808766c:	f7ff ff51 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 8087670:	f005 fe8c 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087674:	2103      	movs	r1, #3
 8087676:	f7ff ff4c 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 808767a:	f005 fe87 	bl	808d38c <_Z19__fetch_global_Wirev>
 808767e:	21e8      	movs	r1, #232	; 0xe8
 8087680:	f7ff ff47 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 8087684:	f005 fe82 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087688:	21ff      	movs	r1, #255	; 0xff
 808768a:	f7ff ff42 	bl	8087512 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 808768e:	f005 fe7d 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087692:	2100      	movs	r1, #0
 8087694:	f7ff ff3d 	bl	8087512 <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 8087698:	f005 fe78 	bl	808d38c <_Z19__fetch_global_Wirev>
}
 808769c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   Wire.endTransmission();
 80876a0:	f005 bc33 	b.w	808cf0a <_ZN7TwoWire15endTransmissionEv>

080876a4 <_ZN13Telaire_T671315disableABCLogicEv>:

void Telaire_T6713::disableABCLogic()
{
 80876a4:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 80876a6:	f005 fe71 	bl	808d38c <_Z19__fetch_global_Wirev>
 80876aa:	2115      	movs	r1, #21
 80876ac:	f005 fc0e 	bl	808cecc <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80876b0:	f005 fe6c 	bl	808d38c <_Z19__fetch_global_Wirev>
 80876b4:	2105      	movs	r1, #5
 80876b6:	f7ff ff2c 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80876ba:	f005 fe67 	bl	808d38c <_Z19__fetch_global_Wirev>
 80876be:	2103      	movs	r1, #3
 80876c0:	f7ff ff27 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 80876c4:	f005 fe62 	bl	808d38c <_Z19__fetch_global_Wirev>
 80876c8:	21ee      	movs	r1, #238	; 0xee
 80876ca:	f7ff ff22 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 80876ce:	f005 fe5d 	bl	808d38c <_Z19__fetch_global_Wirev>
 80876d2:	2100      	movs	r1, #0
 80876d4:	f7ff ff1d 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80876d8:	f005 fe58 	bl	808d38c <_Z19__fetch_global_Wirev>
 80876dc:	2100      	movs	r1, #0
 80876de:	f7ff ff18 	bl	8087512 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80876e2:	f005 fe53 	bl	808d38c <_Z19__fetch_global_Wirev>
}
 80876e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 80876ea:	f005 bc0e 	b.w	808cf0a <_ZN7TwoWire15endTransmissionEv>

080876ee <_ZN13Telaire_T671314enableABCLogicEv>:

void Telaire_T6713::enableABCLogic()
{
 80876ee:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 80876f0:	f005 fe4c 	bl	808d38c <_Z19__fetch_global_Wirev>
 80876f4:	2115      	movs	r1, #21
 80876f6:	f005 fbe9 	bl	808cecc <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80876fa:	f005 fe47 	bl	808d38c <_Z19__fetch_global_Wirev>
 80876fe:	2105      	movs	r1, #5
 8087700:	f7ff ff07 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8087704:	f005 fe42 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087708:	2103      	movs	r1, #3
 808770a:	f7ff ff02 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 808770e:	f005 fe3d 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087712:	21ee      	movs	r1, #238	; 0xee
 8087714:	f7ff fefd 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 8087718:	f005 fe38 	bl	808d38c <_Z19__fetch_global_Wirev>
 808771c:	21ff      	movs	r1, #255	; 0xff
 808771e:	f7ff fef8 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8087722:	f005 fe33 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087726:	2100      	movs	r1, #0
 8087728:	f7ff fef3 	bl	8087512 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 808772c:	f005 fe2e 	bl	808d38c <_Z19__fetch_global_Wirev>
}
 8087730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 8087734:	f005 bbe9 	b.w	808cf0a <_ZN7TwoWire15endTransmissionEv>

08087738 <_ZN13Telaire_T67139calibrateEi>:


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 8087738:	b508      	push	{r3, lr}
    if(debugging){
 808773a:	b121      	cbz	r1, 8087746 <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 808773c:	f005 f9cc 	bl	808cad8 <_Z16_fetch_usbserialv>
 8087740:	4913      	ldr	r1, [pc, #76]	; (8087790 <_ZN13Telaire_T67139calibrateEi+0x58>)
 8087742:	f004 f90e 	bl	808b962 <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 8087746:	f005 fe21 	bl	808d38c <_Z19__fetch_global_Wirev>
 808774a:	2115      	movs	r1, #21
 808774c:	f005 fbbe 	bl	808cecc <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8087750:	f005 fe1c 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087754:	2105      	movs	r1, #5
 8087756:	f7ff fedc 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808775a:	f005 fe17 	bl	808d38c <_Z19__fetch_global_Wirev>
 808775e:	2103      	movs	r1, #3
 8087760:	f7ff fed7 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 8087764:	f005 fe12 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087768:	21ec      	movs	r1, #236	; 0xec
 808776a:	f7ff fed2 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 808776e:	f005 fe0d 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087772:	21ff      	movs	r1, #255	; 0xff
 8087774:	f7ff fecd 	bl	8087512 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8087778:	f005 fe08 	bl	808d38c <_Z19__fetch_global_Wirev>
 808777c:	2100      	movs	r1, #0
 808777e:	f7ff fec8 	bl	8087512 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8087782:	f005 fe03 	bl	808d38c <_Z19__fetch_global_Wirev>
}
 8087786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 808778a:	f005 bbbe 	b.w	808cf0a <_ZN7TwoWire15endTransmissionEv>
 808778e:	bf00      	nop
 8087790:	08092970 	.word	0x08092970

08087794 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8087794:	b538      	push	{r3, r4, r5, lr}
 8087796:	4605      	mov	r5, r0
    if (base == 0) {
 8087798:	b942      	cbnz	r2, 80877ac <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
 808779a:	6803      	ldr	r3, [r0, #0]
 808779c:	689b      	ldr	r3, [r3, #8]
 808779e:	4798      	blx	r3
        return printNumber(val, base) + t;
 80877a0:	4604      	mov	r4, r0
        n += println();
 80877a2:	4628      	mov	r0, r5
 80877a4:	f004 f8d1 	bl	808b94a <_ZN5Print7printlnEv>
    }
 80877a8:	4420      	add	r0, r4
 80877aa:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 80877ac:	b2d2      	uxtb	r2, r2
 80877ae:	f004 f8ec 	bl	808b98a <_ZN5Print11printNumberEmh>
 80877b2:	e7f5      	b.n	80877a0 <_ZN5Print7printlnIhLi0EEEjT_i+0xc>

080877b4 <_ZN13Telaire_T671310readStatusEi>:
{
 80877b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80877b8:	460c      	mov	r4, r1
  Wire.beginTransmission(ADDR_6713);
 80877ba:	f005 fde7 	bl	808d38c <_Z19__fetch_global_Wirev>
 80877be:	2115      	movs	r1, #21
 80877c0:	f005 fb84 	bl	808cecc <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x04);
 80877c4:	f005 fde2 	bl	808d38c <_Z19__fetch_global_Wirev>
 80877c8:	2104      	movs	r1, #4
 80877ca:	f7ff fea2 	bl	8087512 <_ZN7TwoWire5writeEi>
  Wire.write(0x13);
 80877ce:	f005 fddd 	bl	808d38c <_Z19__fetch_global_Wirev>
 80877d2:	2113      	movs	r1, #19
 80877d4:	f7ff fe9d 	bl	8087512 <_ZN7TwoWire5writeEi>
  Wire.write(0x8A);
 80877d8:	f005 fdd8 	bl	808d38c <_Z19__fetch_global_Wirev>
 80877dc:	218a      	movs	r1, #138	; 0x8a
 80877de:	f7ff fe98 	bl	8087512 <_ZN7TwoWire5writeEi>
  Wire.write(0x00);
 80877e2:	f005 fdd3 	bl	808d38c <_Z19__fetch_global_Wirev>
 80877e6:	2100      	movs	r1, #0
 80877e8:	f7ff fe93 	bl	8087512 <_ZN7TwoWire5writeEi>
  Wire.write(0x01);
 80877ec:	f005 fdce 	bl	808d38c <_Z19__fetch_global_Wirev>
 80877f0:	2101      	movs	r1, #1
 80877f2:	f7ff fe8e 	bl	8087512 <_ZN7TwoWire5writeEi>
   Wire.endTransmission();
 80877f6:	f005 fdc9 	bl	808d38c <_Z19__fetch_global_Wirev>
 80877fa:	f005 fb86 	bl	808cf0a <_ZN7TwoWire15endTransmissionEv>
   if(debugging){
 80877fe:	b124      	cbz	r4, 808780a <_ZN13Telaire_T671310readStatusEi+0x56>
       Serial.println("reading CO2 sensor status");
 8087800:	f005 f96a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8087804:	492b      	ldr	r1, [pc, #172]	; (80878b4 <_ZN13Telaire_T671310readStatusEi+0x100>)
 8087806:	f004 f8ac 	bl	808b962 <_ZN5Print7printlnEPKc>
   Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 808780a:	f005 fdbf 	bl	808d38c <_Z19__fetch_global_Wirev>
 808780e:	2204      	movs	r2, #4
 8087810:	2115      	movs	r1, #21
 8087812:	f005 fb54 	bl	808cebe <_ZN7TwoWire11requestFromEhj>
   while(Wire.available() == 0);
 8087816:	f005 fdb9 	bl	808d38c <_Z19__fetch_global_Wirev>
 808781a:	6803      	ldr	r3, [r0, #0]
 808781c:	691b      	ldr	r3, [r3, #16]
 808781e:	4798      	blx	r3
 8087820:	2800      	cmp	r0, #0
 8087822:	d0f8      	beq.n	8087816 <_ZN13Telaire_T671310readStatusEi+0x62>
   func_code = Wire.read();
 8087824:	f005 fdb2 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087828:	6803      	ldr	r3, [r0, #0]
 808782a:	695b      	ldr	r3, [r3, #20]
 808782c:	4798      	blx	r3
 808782e:	4680      	mov	r8, r0
   byte_count = Wire.read();
 8087830:	f005 fdac 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087834:	6803      	ldr	r3, [r0, #0]
 8087836:	695b      	ldr	r3, [r3, #20]
 8087838:	4798      	blx	r3
 808783a:	4607      	mov	r7, r0
   MSB = Wire.read();
 808783c:	f005 fda6 	bl	808d38c <_Z19__fetch_global_Wirev>
 8087840:	6803      	ldr	r3, [r0, #0]
 8087842:	695b      	ldr	r3, [r3, #20]
 8087844:	4798      	blx	r3
 8087846:	4606      	mov	r6, r0
   LSB = Wire.read();
 8087848:	f005 fda0 	bl	808d38c <_Z19__fetch_global_Wirev>
 808784c:	6803      	ldr	r3, [r0, #0]
 808784e:	695b      	ldr	r3, [r3, #20]
 8087850:	4798      	blx	r3
 8087852:	4605      	mov	r5, r0
   if(debugging){
 8087854:	b364      	cbz	r4, 80878b0 <_ZN13Telaire_T671310readStatusEi+0xfc>
       Serial.print("Func code: ");
 8087856:	f005 f93f 	bl	808cad8 <_Z16_fetch_usbserialv>
 808785a:	4917      	ldr	r1, [pc, #92]	; (80878b8 <_ZN13Telaire_T671310readStatusEi+0x104>)
 808785c:	f004 f86e 	bl	808b93c <_ZN5Print5printEPKc>
       Serial.println(func_code, HEX);
 8087860:	f005 f93a 	bl	808cad8 <_Z16_fetch_usbserialv>
 8087864:	2210      	movs	r2, #16
 8087866:	fa5f f188 	uxtb.w	r1, r8
 808786a:	f7ff ff93 	bl	8087794 <_ZN5Print7printlnIhLi0EEEjT_i>
       Serial.print("byte count: ");
 808786e:	f005 f933 	bl	808cad8 <_Z16_fetch_usbserialv>
 8087872:	4912      	ldr	r1, [pc, #72]	; (80878bc <_ZN13Telaire_T671310readStatusEi+0x108>)
 8087874:	f004 f862 	bl	808b93c <_ZN5Print5printEPKc>
       Serial.println(byte_count, HEX);
 8087878:	f005 f92e 	bl	808cad8 <_Z16_fetch_usbserialv>
 808787c:	2210      	movs	r2, #16
 808787e:	b2f9      	uxtb	r1, r7
 8087880:	f7ff ff88 	bl	8087794 <_ZN5Print7printlnIhLi0EEEjT_i>
       Serial.print("MSB: ");
 8087884:	f005 f928 	bl	808cad8 <_Z16_fetch_usbserialv>
 8087888:	490d      	ldr	r1, [pc, #52]	; (80878c0 <_ZN13Telaire_T671310readStatusEi+0x10c>)
 808788a:	f004 f857 	bl	808b93c <_ZN5Print5printEPKc>
       Serial.println(MSB, BIN);
 808788e:	f005 f923 	bl	808cad8 <_Z16_fetch_usbserialv>
 8087892:	2202      	movs	r2, #2
 8087894:	b2f1      	uxtb	r1, r6
 8087896:	f7ff ff7d 	bl	8087794 <_ZN5Print7printlnIhLi0EEEjT_i>
       Serial.print("LSB: ");
 808789a:	f005 f91d 	bl	808cad8 <_Z16_fetch_usbserialv>
 808789e:	4909      	ldr	r1, [pc, #36]	; (80878c4 <_ZN13Telaire_T671310readStatusEi+0x110>)
 80878a0:	f004 f84c 	bl	808b93c <_ZN5Print5printEPKc>
       Serial.println(LSB, BIN);
 80878a4:	f005 f918 	bl	808cad8 <_Z16_fetch_usbserialv>
 80878a8:	2202      	movs	r2, #2
 80878aa:	b2e9      	uxtb	r1, r5
 80878ac:	f7ff ff72 	bl	8087794 <_ZN5Print7printlnIhLi0EEEjT_i>
}
 80878b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80878b4:	08092980 	.word	0x08092980
 80878b8:	0809299a 	.word	0x0809299a
 80878bc:	080929a6 	.word	0x080929a6
 80878c0:	080929b3 	.word	0x080929b3
 80878c4:	080929b9 	.word	0x080929b9

080878c8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80878c8:	b510      	push	{r4, lr}
 80878ca:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 80878cc:	3028      	adds	r0, #40	; 0x28
 80878ce:	f001 f9bf 	bl	8088c50 <_ZN8FatCache4syncEv>
 80878d2:	b128      	cbz	r0, 80878e0 <_ZN9FatVolume9cacheSyncEv+0x18>
 80878d4:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 80878d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync();
 80878dc:	f001 b9b8 	b.w	8088c50 <_ZN8FatCache4syncEv>
  }
 80878e0:	bd10      	pop	{r4, pc}

080878e2 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80878e2:	1e41      	subs	r1, r0, #1
 80878e4:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
 80878e8:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80878ea:	0842      	lsrs	r2, r0, #1
 80878ec:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 80878f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80878f4:	4410      	add	r0, r2
  for (uint8_t i = 0; i < 11; i++) {
 80878f6:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80878f8:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  for (uint8_t i = 0; i < 11; i++) {
 80878fc:	d1f5      	bne.n	80878ea <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
 80878fe:	4770      	bx	lr

08087900 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8087900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8087904:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8087906:	f810 3b01 	ldrb.w	r3, [r0], #1
 808790a:	2b20      	cmp	r3, #32
 808790c:	d0fa      	beq.n	8087904 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
 808790e:	2400      	movs	r4, #0
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8087910:	4d6a      	ldr	r5, [pc, #424]	; (8087abc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
  fname->lfn = path;
 8087912:	608e      	str	r6, [r1, #8]
    c = path[len];
 8087914:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
 8087916:	b1c3      	cbz	r3, 808794a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
 8087918:	2b2f      	cmp	r3, #47	; 0x2f
 808791a:	d016      	beq.n	808794a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808791c:	2b5c      	cmp	r3, #92	; 0x5c
 808791e:	d102      	bne.n	8087926 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8087920:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
 8087922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8087926:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 808792a:	b2c0      	uxtb	r0, r0
 808792c:	281d      	cmp	r0, #29
 808792e:	d803      	bhi.n	8087938 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
 8087930:	fa25 f000 	lsr.w	r0, r5, r0
 8087934:	07c0      	lsls	r0, r0, #31
 8087936:	d4f3      	bmi.n	8087920 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8087938:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 808793c:	283c      	cmp	r0, #60	; 0x3c
 808793e:	d0ef      	beq.n	8087920 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
 8087940:	3b20      	subs	r3, #32
 8087942:	2b5e      	cmp	r3, #94	; 0x5e
 8087944:	d8ec      	bhi.n	8087920 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
 8087946:	3401      	adds	r4, #1
    c = path[len];
 8087948:	e7e4      	b.n	8087914 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
 808794a:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
 808794c:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 808794e:	4607      	mov	r7, r0
 8087950:	f810 5b01 	ldrb.w	r5, [r0], #1
 8087954:	2d20      	cmp	r5, #32
 8087956:	d0fa      	beq.n	808794e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
 8087958:	2d2f      	cmp	r5, #47	; 0x2f
 808795a:	d0f8      	beq.n	808794e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
 808795c:	6017      	str	r7, [r2, #0]
  while (len) {
 808795e:	b14c      	cbz	r4, 8087974 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
 8087960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8087964:	2a2e      	cmp	r2, #46	; 0x2e
 8087966:	d001      	beq.n	808796c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
 8087968:	2a20      	cmp	r2, #32
 808796a:	d101      	bne.n	8087970 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
 808796c:	3c01      	subs	r4, #1
  while (len) {
 808796e:	e7f6      	b.n	808795e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
 8087970:	2cff      	cmp	r4, #255	; 0xff
 8087972:	dcd5      	bgt.n	8087920 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
 8087974:	2020      	movs	r0, #32
  fname->len = len;
 8087976:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
 8087978:	f101 030d 	add.w	r3, r1, #13
 808797c:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
 8087980:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
 8087984:	4293      	cmp	r3, r2
 8087986:	d1fb      	bne.n	8087980 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8087988:	f04f 0800 	mov.w	r8, #0
 808798c:	f816 3008 	ldrb.w	r3, [r6, r8]
 8087990:	2b2e      	cmp	r3, #46	; 0x2e
 8087992:	d001      	beq.n	8087998 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
 8087994:	2b20      	cmp	r3, #32
 8087996:	d102      	bne.n	808799e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
 8087998:	f108 0801 	add.w	r8, r8, #1
 808799c:	e7f6      	b.n	808798c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
 808799e:	fab8 f088 	clz	r0, r8
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80879a2:	1e65      	subs	r5, r4, #1
  is83 = !si;
 80879a4:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80879a6:	1c6b      	adds	r3, r5, #1
 80879a8:	d002      	beq.n	80879b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
 80879aa:	5d73      	ldrb	r3, [r6, r5]
 80879ac:	2b2e      	cmp	r3, #46	; 0x2e
 80879ae:	d114      	bne.n	80879da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80879b0:	f04f 0900 	mov.w	r9, #0
 80879b4:	2707      	movs	r7, #7
 80879b6:	464a      	mov	r2, r9
 80879b8:	46ca      	mov	sl, r9
 80879ba:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
 80879be:	45a0      	cmp	r8, r4
 80879c0:	da69      	bge.n	8087a96 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
 80879c2:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
 80879c6:	2b20      	cmp	r3, #32
 80879c8:	d003      	beq.n	80879d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
 80879ca:	2b2e      	cmp	r3, #46	; 0x2e
 80879cc:	d107      	bne.n	80879de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 80879ce:	45a8      	cmp	r8, r5
 80879d0:	d012      	beq.n	80879f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
 80879d2:	2000      	movs	r0, #0
  for (; si < len; si++) {
 80879d4:	f108 0801 	add.w	r8, r8, #1
 80879d8:	e7f1      	b.n	80879be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80879da:	3d01      	subs	r5, #1
 80879dc:	e7e3      	b.n	80879a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
 80879de:	2b22      	cmp	r3, #34	; 0x22
 80879e0:	d008      	beq.n	80879f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
 80879e2:	2b7c      	cmp	r3, #124	; 0x7c
 80879e4:	d006      	beq.n	80879f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80879e6:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80879ea:	f1bc 0f05 	cmp.w	ip, #5
 80879ee:	d80b      	bhi.n	8087a08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
 80879f0:	2b2d      	cmp	r3, #45	; 0x2d
 80879f2:	d013      	beq.n	8087a1c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
 80879f4:	45a8      	cmp	r8, r5
 80879f6:	d15c      	bne.n	8087ab2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
 80879f8:	2f0a      	cmp	r7, #10
 80879fa:	d04b      	beq.n	8087a94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 80879fc:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 80879fe:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8087a00:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8087a02:	f04f 0e10 	mov.w	lr, #16
 8087a06:	e7e5      	b.n	80879d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
 8087a08:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8087a0c:	f1bc 0f05 	cmp.w	ip, #5
 8087a10:	d9f0      	bls.n	80879f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
 8087a12:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8087a16:	f1bc 0f02 	cmp.w	ip, #2
 8087a1a:	d9eb      	bls.n	80879f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
 8087a1c:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8087a20:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8087a24:	d8e6      	bhi.n	80879f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
 8087a26:	45a8      	cmp	r8, r5
 8087a28:	d0e6      	beq.n	80879f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
 8087a2a:	42ba      	cmp	r2, r7
 8087a2c:	d830      	bhi.n	8087a90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
 8087a2e:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8087a32:	f1bc 0f19 	cmp.w	ip, #25
 8087a36:	d81a      	bhi.n	8087a6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
 8087a38:	3b20      	subs	r3, #32
        lc |= bit;
 8087a3a:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
 8087a3e:	b2db      	uxtb	r3, r3
        lc |= bit;
 8087a40:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
 8087a44:	f102 0c01 	add.w	ip, r2, #1
 8087a48:	fa5f fc8c 	uxtb.w	ip, ip
 8087a4c:	440a      	add	r2, r1
      if (i < 7) {
 8087a4e:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
 8087a52:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
 8087a54:	d801      	bhi.n	8087a5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
 8087a56:	f881 c00c 	strb.w	ip, [r1, #12]
 8087a5a:	4662      	mov	r2, ip
 8087a5c:	e7ba      	b.n	80879d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
 8087a5e:	45a8      	cmp	r8, r5
 8087a60:	dc18      	bgt.n	8087a94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 8087a62:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 8087a64:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8087a66:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8087a68:	f04f 0e10 	mov.w	lr, #16
 8087a6c:	e7b1      	b.n	80879d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
 8087a6e:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8087a72:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8087a76:	bf98      	it	ls
 8087a78:	ea4e 0a0a 	orrls.w	sl, lr, sl
 8087a7c:	e7e2      	b.n	8087a44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8087a7e:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
 8087a80:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8087a82:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8087a84:	4419      	add	r1, r3
 8087a86:	237e      	movs	r3, #126	; 0x7e
 8087a88:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8087a8a:	2331      	movs	r3, #49	; 0x31
 8087a8c:	738b      	strb	r3, [r1, #14]
 8087a8e:	e748      	b.n	8087922 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
 8087a90:	2f0a      	cmp	r7, #10
 8087a92:	d1e4      	bne.n	8087a5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
 8087a94:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
 8087a96:	7b4b      	ldrb	r3, [r1, #13]
 8087a98:	2b20      	cmp	r3, #32
 8087a9a:	f43f af41 	beq.w	8087920 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
 8087a9e:	2800      	cmp	r0, #0
 8087aa0:	d0ed      	beq.n	8087a7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8087aa2:	ea1a 0f09 	tst.w	sl, r9
 8087aa6:	bf18      	it	ne
 8087aa8:	f04f 0902 	movne.w	r9, #2
 8087aac:	f881 9000 	strb.w	r9, [r1]
 8087ab0:	e737      	b.n	8087922 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
 8087ab2:	42ba      	cmp	r2, r7
 8087ab4:	d8ec      	bhi.n	8087a90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
 8087ab6:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
 8087ab8:	2000      	movs	r0, #0
 8087aba:	e7c3      	b.n	8087a44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
 8087abc:	31000101 	.word	0x31000101

08087ac0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8087ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8087ac4:	4606      	mov	r6, r0
 8087ac6:	460c      	mov	r4, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8087ac8:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8087aca:	277e      	movs	r7, #126	; 0x7e
  uint8_t pos = fname->seqPos;;
 8087acc:	f891 900c 	ldrb.w	r9, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087ad0:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8087ad4:	6861      	ldr	r1, [r4, #4]
 8087ad6:	68a2      	ldr	r2, [r4, #8]
 8087ad8:	186b      	adds	r3, r5, r1
 8087ada:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8087adc:	4411      	add	r1, r2
 8087ade:	4291      	cmp	r1, r2
 8087ae0:	d006      	beq.n	8087af0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
 8087ae2:	f812 0b01 	ldrb.w	r0, [r2], #1
 8087ae6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8087aea:	4043      	eors	r3, r0
 8087aec:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8087aee:	e7f6      	b.n	8087ade <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
 8087af0:	f1b9 0f03 	cmp.w	r9, #3
 8087af4:	bf28      	it	cs
 8087af6:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087afa:	f109 0204 	add.w	r2, r9, #4
 8087afe:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8087b00:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087b04:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087b06:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087b08:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087b0a:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087b0c:	bf94      	ite	ls
 8087b0e:	3130      	addls	r1, #48	; 0x30
 8087b10:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087b12:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087b14:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8087b16:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087b1a:	d1f1      	bne.n	8087b00 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
 8087b1c:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
 8087b20:	2100      	movs	r1, #0
 8087b22:	4630      	mov	r0, r6
 8087b24:	735f      	strb	r7, [r3, #13]
 8087b26:	f000 fe96 	bl	8088856 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 8087b2a:	2101      	movs	r1, #1
 8087b2c:	4630      	mov	r0, r6
 8087b2e:	f000 fe73 	bl	8088818 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8087b32:	4601      	mov	r1, r0
 8087b34:	b928      	cbnz	r0, 8087b42 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8087b36:	7870      	ldrb	r0, [r6, #1]
 8087b38:	fab0 f080 	clz	r0, r0
 8087b3c:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 8087b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
 8087b42:	7803      	ldrb	r3, [r0, #0]
 8087b44:	b16b      	cbz	r3, 8087b62 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087b46:	7ac3      	ldrb	r3, [r0, #11]
 8087b48:	071b      	lsls	r3, r3, #28
 8087b4a:	d4ee      	bmi.n	8087b2a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8087b4c:	220b      	movs	r2, #11
 8087b4e:	4640      	mov	r0, r8
 8087b50:	f006 fd8c 	bl	808e66c <memcmp>
 8087b54:	2800      	cmp	r0, #0
 8087b56:	d1e8      	bne.n	8087b2a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
 8087b58:	3501      	adds	r5, #1
 8087b5a:	b2ad      	uxth	r5, r5
 8087b5c:	2d64      	cmp	r5, #100	; 0x64
 8087b5e:	d1b9      	bne.n	8087ad4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 8087b60:	e7ed      	b.n	8087b3e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
 8087b62:	2001      	movs	r0, #1
 8087b64:	e7eb      	b.n	8087b3e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

08087b68 <_ZN7FatFile4openEPS_P7fname_th>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087b6c:	b089      	sub	sp, #36	; 0x24
 8087b6e:	9304      	str	r3, [sp, #16]
  if (!dirFile->isDir() || isOpen()) {
 8087b70:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087b72:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 8087b74:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8087b78:	4690      	mov	r8, r2
 8087b7a:	9005      	str	r0, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
 8087b7c:	d103      	bne.n	8087b86 <_ZN7FatFile4openEPS_P7fname_th+0x1e>
  return false;
 8087b7e:	2000      	movs	r0, #0
}
 8087b80:	b009      	add	sp, #36	; 0x24
 8087b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
 8087b86:	9b05      	ldr	r3, [sp, #20]
 8087b88:	781b      	ldrb	r3, [r3, #0]
 8087b8a:	2b00      	cmp	r3, #0
 8087b8c:	d1f7      	bne.n	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  size_t len = fname->len;
 8087b8e:	6853      	ldr	r3, [r2, #4]
 8087b90:	4628      	mov	r0, r5
 8087b92:	9303      	str	r3, [sp, #12]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8087b94:	7813      	ldrb	r3, [r2, #0]
 8087b96:	0799      	lsls	r1, r3, #30
 8087b98:	bf18      	it	ne
 8087b9a:	9b03      	ldrne	r3, [sp, #12]
 8087b9c:	f04f 0100 	mov.w	r1, #0
 8087ba0:	bf1f      	itttt	ne
 8087ba2:	f103 070c 	addne.w	r7, r3, #12
 8087ba6:	230d      	movne	r3, #13
 8087ba8:	fbb7 f7f3 	udivne	r7, r7, r3
 8087bac:	3701      	addne	r7, #1
 8087bae:	bf0c      	ite	eq
 8087bb0:	2701      	moveq	r7, #1
 8087bb2:	b2ff      	uxtbne	r7, r7
 8087bb4:	f000 fe4f 	bl	8088856 <_ZN7FatFile7seekSetEm>
  }
 8087bb8:	2300      	movs	r3, #0
 8087bba:	469b      	mov	fp, r3
 8087bbc:	461c      	mov	r4, r3
 8087bbe:	461e      	mov	r6, r3
 8087bc0:	469a      	mov	sl, r3
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087bc2:	f108 020d 	add.w	r2, r8, #13
 8087bc6:	9302      	str	r3, [sp, #8]
 8087bc8:	9207      	str	r2, [sp, #28]
    curIndex = dirFile->m_curPosition/32;
 8087bca:	696a      	ldr	r2, [r5, #20]
    dir = dirFile->readDirCache(true);
 8087bcc:	2101      	movs	r1, #1
 8087bce:	4628      	mov	r0, r5
 8087bd0:	9306      	str	r3, [sp, #24]
    curIndex = dirFile->m_curPosition/32;
 8087bd2:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8087bd6:	f000 fe1f 	bl	8088818 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087bda:	9b06      	ldr	r3, [sp, #24]
 8087bdc:	2800      	cmp	r0, #0
 8087bde:	d16c      	bne.n	8087cba <_ZN7FatFile4openEPS_P7fname_th+0x152>
      if (dirFile->getError()) {
 8087be0:	786b      	ldrb	r3, [r5, #1]
 8087be2:	2b00      	cmp	r3, #0
 8087be4:	d1cb      	bne.n	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8087be6:	9b04      	ldr	r3, [sp, #16]
 8087be8:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8087bec:	2b42      	cmp	r3, #66	; 0x42
 8087bee:	d1c6      	bne.n	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (freeFound == 0) {
 8087bf0:	9b02      	ldr	r3, [sp, #8]
 8087bf2:	2c00      	cmp	r4, #0
 8087bf4:	bf08      	it	eq
 8087bf6:	464b      	moveq	r3, r9
 8087bf8:	9302      	str	r3, [sp, #8]
  while (freeFound < freeNeed) {
 8087bfa:	42bc      	cmp	r4, r7
 8087bfc:	f0c0 8103 	bcc.w	8087e06 <_ZN7FatFile4openEPS_P7fname_th+0x29e>
  if (fnameFound) {
 8087c00:	f1ba 0f00 	cmp.w	sl, #0
 8087c04:	f040 811b 	bne.w	8087e3e <_ZN7FatFile4openEPS_P7fname_th+0x2d6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8087c08:	9b02      	ldr	r3, [sp, #8]
 8087c0a:	4628      	mov	r0, r5
 8087c0c:	0159      	lsls	r1, r3, #5
 8087c0e:	f000 fe22 	bl	8088856 <_ZN7FatFile7seekSetEm>
 8087c12:	2800      	cmp	r0, #0
 8087c14:	d0b3      	beq.n	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  lfnOrd = freeNeed - 1;
 8087c16:	3f01      	subs	r7, #1
 8087c18:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087c1c:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087c1e:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
 8087c22:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087c24:	2e00      	cmp	r6, #0
 8087c26:	f000 8121 	beq.w	8087e6c <_ZN7FatFile4openEPS_P7fname_th+0x304>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087c2a:	2100      	movs	r1, #0
 8087c2c:	4628      	mov	r0, r5
 8087c2e:	f000 fdf3 	bl	8088818 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8087c32:	4604      	mov	r4, r0
 8087c34:	2800      	cmp	r0, #0
 8087c36:	d0a2      	beq.n	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087c38:	4556      	cmp	r6, sl
 8087c3a:	bf18      	it	ne
 8087c3c:	46b3      	movne	fp, r6
    dirFile->m_vol->cacheDirty();
 8087c3e:	68aa      	ldr	r2, [r5, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087c40:	bf08      	it	eq
 8087c42:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
    m_status |= CACHE_STATUS_DIRTY;
 8087c46:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8087c4a:	f043 0301 	orr.w	r3, r3, #1
 8087c4e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8087c52:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8087c56:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
 8087c58:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8087c5c:	f108 000d 	add.w	r0, r8, #13
 8087c60:	f7ff fe3f 	bl	80878e2 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087c64:	220d      	movs	r2, #13
 8087c66:	2300      	movs	r3, #0
 8087c68:	f00b 0b1f 	and.w	fp, fp, #31
 8087c6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8087c70:	fb02 f20b 	mul.w	r2, r2, fp
    ldir->chksum = lfnChecksum(fname->sfn);
 8087c74:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
 8087c76:	f884 901a 	strb.w	r9, [r4, #26]
 8087c7a:	f884 901b 	strb.w	r9, [r4, #27]
    lfnPutName(ldir, fname->lfn, len);
 8087c7e:	f8d8 c008 	ldr.w	ip, [r8, #8]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087c82:	9903      	ldr	r1, [sp, #12]
 8087c84:	4291      	cmp	r1, r2
 8087c86:	f240 80e2 	bls.w	8087e4e <_ZN7FatFile4openEPS_P7fname_th+0x2e6>
 8087c8a:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
 8087c8e:	2b04      	cmp	r3, #4
 8087c90:	fa5f fe83 	uxtb.w	lr, r3
 8087c94:	f103 0001 	add.w	r0, r3, #1
 8087c98:	f200 80df 	bhi.w	8087e5a <_ZN7FatFile4openEPS_P7fname_th+0x2f2>
    ldir->name1[i] = c;
 8087c9c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8087ca0:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
 8087ca4:	280d      	cmp	r0, #13
 8087ca6:	4603      	mov	r3, r0
 8087ca8:	f102 0201 	add.w	r2, r2, #1
 8087cac:	d1e9      	bne.n	8087c82 <_ZN7FatFile4openEPS_P7fname_th+0x11a>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087cae:	3e01      	subs	r6, #1
 8087cb0:	b2f6      	uxtb	r6, r6
 8087cb2:	e7b7      	b.n	8087c24 <_ZN7FatFile4openEPS_P7fname_th+0xbc>
        fnameFound = true;
 8087cb4:	f04f 0a01 	mov.w	sl, #1
 8087cb8:	e787      	b.n	8087bca <_ZN7FatFile4openEPS_P7fname_th+0x62>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8087cba:	7802      	ldrb	r2, [r0, #0]
 8087cbc:	2ae5      	cmp	r2, #229	; 0xe5
 8087cbe:	d000      	beq.n	8087cc2 <_ZN7FatFile4openEPS_P7fname_th+0x15a>
 8087cc0:	b97a      	cbnz	r2, 8087ce2 <_ZN7FatFile4openEPS_P7fname_th+0x17a>
    curIndex = dirFile->m_curPosition/32;
 8087cc2:	9902      	ldr	r1, [sp, #8]
 8087cc4:	2c00      	cmp	r4, #0
 8087cc6:	bf08      	it	eq
 8087cc8:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
 8087cca:	42bc      	cmp	r4, r7
        freeFound++;
 8087ccc:	bf38      	it	cc
 8087cce:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
 8087cd0:	9102      	str	r1, [sp, #8]
        freeFound++;
 8087cd2:	bf38      	it	cc
 8087cd4:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
 8087cd6:	2a00      	cmp	r2, #0
 8087cd8:	d085      	beq.n	8087be6 <_ZN7FatFile4openEPS_P7fname_th+0x7e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087cda:	2ae5      	cmp	r2, #229	; 0xe5
 8087cdc:	d104      	bne.n	8087ce8 <_ZN7FatFile4openEPS_P7fname_th+0x180>
      lfnOrd = 0;
 8087cde:	2600      	movs	r6, #0
 8087ce0:	e773      	b.n	8087bca <_ZN7FatFile4openEPS_P7fname_th+0x62>
        freeFound = 0;
 8087ce2:	42bc      	cmp	r4, r7
 8087ce4:	bf38      	it	cc
 8087ce6:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087ce8:	2a2e      	cmp	r2, #46	; 0x2e
 8087cea:	d0f8      	beq.n	8087cde <_ZN7FatFile4openEPS_P7fname_th+0x176>
    } else if (DIR_IS_LONG_NAME(dir)) {
 8087cec:	7ac1      	ldrb	r1, [r0, #11]
 8087cee:	290f      	cmp	r1, #15
 8087cf0:	d15d      	bne.n	8087dae <_ZN7FatFile4openEPS_P7fname_th+0x246>
      if (!lfnOrd) {
 8087cf2:	bb3e      	cbnz	r6, 8087d44 <_ZN7FatFile4openEPS_P7fname_th+0x1dc>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8087cf4:	f012 0640 	ands.w	r6, r2, #64	; 0x40
 8087cf8:	f43f af67 	beq.w	8087bca <_ZN7FatFile4openEPS_P7fname_th+0x62>
        lfnOrd = ord = ldir->ord & 0X1F;
 8087cfc:	f002 061f 	and.w	r6, r2, #31
 8087d00:	46b3      	mov	fp, r6
        chksum = ldir->chksum;
 8087d02:	7b43      	ldrb	r3, [r0, #13]
      size_t k = 13*(ord - 1);
 8087d04:	f04f 0e0d 	mov.w	lr, #13
 8087d08:	f10b 32ff 	add.w	r2, fp, #4294967295
 8087d0c:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
 8087d10:	9a03      	ldr	r2, [sp, #12]
 8087d12:	4572      	cmp	r2, lr
 8087d14:	d9e3      	bls.n	8087cde <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8087d16:	f04f 0c00 	mov.w	ip, #0
 8087d1a:	eba2 020e 	sub.w	r2, r2, lr
 8087d1e:	9206      	str	r2, [sp, #24]
  if (i < LDIR_NAME1_DIM) {
 8087d20:	f1bc 0f04 	cmp.w	ip, #4
 8087d24:	eb0c 090e 	add.w	r9, ip, lr
 8087d28:	fa5f f28c 	uxtb.w	r2, ip
 8087d2c:	d814      	bhi.n	8087d58 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
    return ldir->name1[i];
 8087d2e:	eb00 024c 	add.w	r2, r0, ip, lsl #1
 8087d32:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
 8087d36:	9906      	ldr	r1, [sp, #24]
 8087d38:	458c      	cmp	ip, r1
 8087d3a:	d11b      	bne.n	8087d74 <_ZN7FatFile4openEPS_P7fname_th+0x20c>
            lfnOrd = 0;
 8087d3c:	2a00      	cmp	r2, #0
 8087d3e:	bf18      	it	ne
 8087d40:	2600      	movne	r6, #0
 8087d42:	e742      	b.n	8087bca <_ZN7FatFile4openEPS_P7fname_th+0x62>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8087d44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8087d48:	fa5f fb8b 	uxtb.w	fp, fp
 8087d4c:	455a      	cmp	r2, fp
 8087d4e:	d1c6      	bne.n	8087cde <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8087d50:	7b42      	ldrb	r2, [r0, #13]
 8087d52:	429a      	cmp	r2, r3
 8087d54:	d0d6      	beq.n	8087d04 <_ZN7FatFile4openEPS_P7fname_th+0x19c>
 8087d56:	e7c2      	b.n	8087cde <_ZN7FatFile4openEPS_P7fname_th+0x176>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087d58:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087d5a:	bf95      	itete	ls
 8087d5c:	f10c 32ff 	addls.w	r2, ip, #4294967295
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087d60:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087d64:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087d68:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087d6c:	bf94      	ite	ls
 8087d6e:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087d70:	8892      	ldrhhi	r2, [r2, #4]
 8087d72:	e7e0      	b.n	8087d36 <_ZN7FatFile4openEPS_P7fname_th+0x1ce>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087d74:	2aff      	cmp	r2, #255	; 0xff
 8087d76:	d8b2      	bhi.n	8087cde <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8087d78:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087d7a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8087d7e:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087d80:	f8d8 1008 	ldr.w	r1, [r8, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087d84:	bf98      	it	ls
 8087d86:	3220      	addls	r2, #32
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087d88:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087d8c:	bf98      	it	ls
 8087d8e:	b2d2      	uxtbls	r2, r2
 8087d90:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
 8087d94:	f1b9 0f19 	cmp.w	r9, #25
 8087d98:	bf9c      	itt	ls
 8087d9a:	3120      	addls	r1, #32
 8087d9c:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087d9e:	4291      	cmp	r1, r2
 8087da0:	d19d      	bne.n	8087cde <_ZN7FatFile4openEPS_P7fname_th+0x176>
      for (uint8_t i = 0; i < 13; i++) {
 8087da2:	f10c 0c01 	add.w	ip, ip, #1
 8087da6:	f1bc 0f0d 	cmp.w	ip, #13
 8087daa:	d1b9      	bne.n	8087d20 <_ZN7FatFile4openEPS_P7fname_th+0x1b8>
 8087dac:	e70d      	b.n	8087bca <_ZN7FatFile4openEPS_P7fname_th+0x62>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8087dae:	070a      	lsls	r2, r1, #28
 8087db0:	d495      	bmi.n	8087cde <_ZN7FatFile4openEPS_P7fname_th+0x176>
      if (lfnOrd) {
 8087db2:	b166      	cbz	r6, 8087dce <_ZN7FatFile4openEPS_P7fname_th+0x266>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8087db4:	f1bb 0f01 	cmp.w	fp, #1
 8087db8:	9302      	str	r3, [sp, #8]
 8087dba:	f47f aee0 	bne.w	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8087dbe:	f7ff fd90 	bl	80878e2 <_ZN7FatFile11lfnChecksumEPh>
 8087dc2:	9b02      	ldr	r3, [sp, #8]
 8087dc4:	4298      	cmp	r0, r3
 8087dc6:	f47f aeda 	bne.w	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8087dca:	46b2      	mov	sl, r6
 8087dcc:	e00e      	b.n	8087dec <_ZN7FatFile4openEPS_P7fname_th+0x284>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087dce:	220b      	movs	r2, #11
 8087dd0:	9907      	ldr	r1, [sp, #28]
 8087dd2:	9306      	str	r3, [sp, #24]
 8087dd4:	f006 fc4a 	bl	808e66c <memcmp>
 8087dd8:	9b06      	ldr	r3, [sp, #24]
 8087dda:	2800      	cmp	r0, #0
 8087ddc:	f47f aef5 	bne.w	8087bca <_ZN7FatFile4openEPS_P7fname_th+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8087de0:	f898 a000 	ldrb.w	sl, [r8]
 8087de4:	f01a 0a01 	ands.w	sl, sl, #1
 8087de8:	f47f af64 	bne.w	8087cb4 <_ZN7FatFile4openEPS_P7fname_th+0x14c>
  if (oflag & O_EXCL) {
 8087dec:	9b04      	ldr	r3, [sp, #16]
 8087dee:	061b      	lsls	r3, r3, #24
 8087df0:	f53f aec5 	bmi.w	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8087df4:	464a      	mov	r2, r9
 8087df6:	4629      	mov	r1, r5
 8087df8:	9b04      	ldr	r3, [sp, #16]
 8087dfa:	9805      	ldr	r0, [sp, #20]
 8087dfc:	f8cd a000 	str.w	sl, [sp]
 8087e00:	f000 fd6c 	bl	80888dc <_ZN7FatFile15openCachedEntryEPS_thh>
 8087e04:	e6bc      	b.n	8087b80 <_ZN7FatFile4openEPS_P7fname_th+0x18>
    dir = dirFile->readDirCache();
 8087e06:	2100      	movs	r1, #0
 8087e08:	4628      	mov	r0, r5
 8087e0a:	f000 fd05 	bl	8088818 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087e0e:	b998      	cbnz	r0, 8087e38 <_ZN7FatFile4openEPS_P7fname_th+0x2d0>
      if (dirFile->getError()) {
 8087e10:	786b      	ldrb	r3, [r5, #1]
 8087e12:	2b00      	cmp	r3, #0
 8087e14:	f47f aeb3 	bne.w	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (!dirFile->addDirCluster()) {
 8087e18:	4628      	mov	r0, r5
 8087e1a:	f000 fbd5 	bl	80885c8 <_ZN7FatFile13addDirClusterEv>
 8087e1e:	2800      	cmp	r0, #0
 8087e20:	f43f aead 	beq.w	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8087e24:	68ab      	ldr	r3, [r5, #8]
 8087e26:	791b      	ldrb	r3, [r3, #4]
 8087e28:	2b01      	cmp	r3, #1
 8087e2a:	f63f aee9 	bhi.w	8087c00 <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound += 16;
 8087e2e:	3410      	adds	r4, #16
 8087e30:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8087e32:	42a7      	cmp	r7, r4
 8087e34:	d8f0      	bhi.n	8087e18 <_ZN7FatFile4openEPS_P7fname_th+0x2b0>
 8087e36:	e6e3      	b.n	8087c00 <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound++;
 8087e38:	3401      	adds	r4, #1
 8087e3a:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8087e3c:	e6dd      	b.n	8087bfa <_ZN7FatFile4openEPS_P7fname_th+0x92>
    if (!dirFile->lfnUniqueSfn(fname)) {
 8087e3e:	4641      	mov	r1, r8
 8087e40:	4628      	mov	r0, r5
 8087e42:	f7ff fe3d 	bl	8087ac0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8087e46:	2800      	cmp	r0, #0
 8087e48:	f47f aede 	bne.w	8087c08 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8087e4c:	e697      	b.n	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087e4e:	bf14      	ite	ne
 8087e50:	f04f 31ff 	movne.w	r1, #4294967295
 8087e54:	2100      	moveq	r1, #0
 8087e56:	b289      	uxth	r1, r1
 8087e58:	e719      	b.n	8087c8e <_ZN7FatFile4openEPS_P7fname_th+0x126>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087e5a:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8087e5e:	bf94      	ite	ls
 8087e60:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8087e64:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
 8087e68:	8099      	strh	r1, [r3, #4]
 8087e6a:	e71b      	b.n	8087ca4 <_ZN7FatFile4openEPS_P7fname_th+0x13c>
  dir = dirFile->readDirCache();
 8087e6c:	4631      	mov	r1, r6
 8087e6e:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
 8087e70:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
 8087e72:	f000 fcd1 	bl	8088818 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8087e76:	4604      	mov	r4, r0
 8087e78:	2800      	cmp	r0, #0
 8087e7a:	f43f ae80 	beq.w	8087b7e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  memset(dir, 0, sizeof(dir_t));
 8087e7e:	2220      	movs	r2, #32
 8087e80:	4631      	mov	r1, r6
 8087e82:	f006 fc0f 	bl	808e6a4 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8087e86:	4643      	mov	r3, r8
 8087e88:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8087e8c:	6022      	str	r2, [r4, #0]
 8087e8e:	685a      	ldr	r2, [r3, #4]
 8087e90:	6062      	str	r2, [r4, #4]
 8087e92:	891a      	ldrh	r2, [r3, #8]
 8087e94:	8122      	strh	r2, [r4, #8]
 8087e96:	7a9b      	ldrb	r3, [r3, #10]
 8087e98:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8087e9a:	f898 3000 	ldrb.w	r3, [r8]
 8087e9e:	f003 0318 	and.w	r3, r3, #24
 8087ea2:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
 8087ea4:	4b0f      	ldr	r3, [pc, #60]	; (8087ee4 <_ZN7FatFile4openEPS_P7fname_th+0x37c>)
 8087ea6:	681b      	ldr	r3, [r3, #0]
 8087ea8:	b19b      	cbz	r3, 8087ed2 <_ZN7FatFile4openEPS_P7fname_th+0x36a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8087eaa:	f104 010e 	add.w	r1, r4, #14
 8087eae:	f104 0010 	add.w	r0, r4, #16
 8087eb2:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
 8087eb4:	8a23      	ldrh	r3, [r4, #16]
  curIndex = dirFile->m_curPosition/32;
 8087eb6:	f3c7 194f 	ubfx	r9, r7, #5, #16
  dir->lastAccessDate = dir->creationDate;
 8087eba:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
 8087ebc:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
 8087ebe:	89e3      	ldrh	r3, [r4, #14]
 8087ec0:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
 8087ec2:	68aa      	ldr	r2, [r5, #8]
 8087ec4:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8087ec8:	f043 0301 	orr.w	r3, r3, #1
 8087ecc:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
 8087ed0:	e790      	b.n	8087df4 <_ZN7FatFile4openEPS_P7fname_th+0x28c>
    dir->creationDate = FAT_DEFAULT_DATE;
 8087ed2:	2321      	movs	r3, #33	; 0x21
 8087ed4:	7423      	strb	r3, [r4, #16]
 8087ed6:	2328      	movs	r3, #40	; 0x28
 8087ed8:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8087eda:	2308      	movs	r3, #8
 8087edc:	73a6      	strb	r6, [r4, #14]
 8087ede:	73e3      	strb	r3, [r4, #15]
 8087ee0:	e7e8      	b.n	8087eb4 <_ZN7FatFile4openEPS_P7fname_th+0x34c>
 8087ee2:	bf00      	nop
 8087ee4:	20000cf0 	.word	0x20000cf0

08087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8087ee8:	6803      	ldr	r3, [r0, #0]
 8087eea:	68db      	ldr	r3, [r3, #12]
 8087eec:	4718      	bx	r3

08087eee <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8087eee:	6803      	ldr	r3, [r0, #0]
 8087ef0:	695b      	ldr	r3, [r3, #20]
 8087ef2:	4718      	bx	r3

08087ef4 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8087ef4:	b510      	push	{r4, lr}
  if (!m_selected) {
 8087ef6:	7903      	ldrb	r3, [r0, #4]
void SdSpiCard::chipSelectHigh() {
 8087ef8:	4604      	mov	r4, r0
  if (!m_selected) {
 8087efa:	b16b      	cbz	r3, 8087f18 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8087efc:	2101      	movs	r1, #1
 8087efe:	7940      	ldrb	r0, [r0, #5]
 8087f00:	f005 f9af 	bl	808d262 <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8087f04:	21ff      	movs	r1, #255	; 0xff
 8087f06:	6820      	ldr	r0, [r4, #0]
 8087f08:	f7ff fff1 	bl	8087eee <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiEndTransaction();
 8087f0c:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8087f0e:	6803      	ldr	r3, [r0, #0]
 8087f10:	689b      	ldr	r3, [r3, #8]
 8087f12:	4798      	blx	r3
  m_selected = false;
 8087f14:	2300      	movs	r3, #0
 8087f16:	7123      	strb	r3, [r4, #4]
}
 8087f18:	bd10      	pop	{r4, pc}

08087f1a <_ZN9SdSpiCard13chipSelectLowEv>:
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8087f1a:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8087f1c:	7905      	ldrb	r5, [r0, #4]
void SdSpiCard::chipSelectLow() {
 8087f1e:	4604      	mov	r4, r0
  if (m_selected) {
 8087f20:	b955      	cbnz	r5, 8087f38 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
 8087f22:	6800      	ldr	r0, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8087f24:	79e1      	ldrb	r1, [r4, #7]
 8087f26:	6803      	ldr	r3, [r0, #0]
 8087f28:	685b      	ldr	r3, [r3, #4]
 8087f2a:	4798      	blx	r3
  digitalWrite(m_chipSelectPin, LOW);
 8087f2c:	4629      	mov	r1, r5
 8087f2e:	7960      	ldrb	r0, [r4, #5]
 8087f30:	f005 f997 	bl	808d262 <digitalWrite>
  m_selected = true;
 8087f34:	2301      	movs	r3, #1
 8087f36:	7123      	strb	r3, [r4, #4]
}
 8087f38:	bd38      	pop	{r3, r4, r5, pc}

08087f3a <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8087f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087f3c:	4604      	mov	r4, r0
 8087f3e:	460d      	mov	r5, r1
 8087f40:	4616      	mov	r6, r2
 8087f42:	f002 fbad 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
 8087f46:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8087f48:	6820      	ldr	r0, [r4, #0]
 8087f4a:	f7ff ffcd 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8087f4e:	28ff      	cmp	r0, #255	; 0xff
 8087f50:	7220      	strb	r0, [r4, #8]
 8087f52:	d10c      	bne.n	8087f6e <_ZN9SdSpiCard8readDataEPhj+0x34>
 8087f54:	f002 fba4 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8087f58:	1bc3      	subs	r3, r0, r7
 8087f5a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8087f5e:	d9f3      	bls.n	8087f48 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 8087f60:	2311      	movs	r3, #17
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8087f62:	4620      	mov	r0, r4
 8087f64:	71a3      	strb	r3, [r4, #6]
 8087f66:	f7ff ffc5 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087f6a:	2000      	movs	r0, #0
}
 8087f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 8087f6e:	28fe      	cmp	r0, #254	; 0xfe
 8087f70:	d001      	beq.n	8087f76 <_ZN9SdSpiCard8readDataEPhj+0x3c>
 8087f72:	230f      	movs	r3, #15
 8087f74:	e7f5      	b.n	8087f62 <_ZN9SdSpiCard8readDataEPhj+0x28>
  if ((m_status = spiReceive(dst, count))) {
 8087f76:	6820      	ldr	r0, [r4, #0]
    return m_spi->receive(buf, n);
 8087f78:	4632      	mov	r2, r6
 8087f7a:	6803      	ldr	r3, [r0, #0]
 8087f7c:	4629      	mov	r1, r5
 8087f7e:	691b      	ldr	r3, [r3, #16]
 8087f80:	4798      	blx	r3
 8087f82:	7220      	strb	r0, [r4, #8]
 8087f84:	b108      	cbz	r0, 8087f8a <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 8087f86:	231c      	movs	r3, #28
 8087f88:	e7eb      	b.n	8087f62 <_ZN9SdSpiCard8readDataEPhj+0x28>
  spiReceive();
 8087f8a:	6820      	ldr	r0, [r4, #0]
 8087f8c:	f7ff ffac 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
 8087f90:	6820      	ldr	r0, [r4, #0]
 8087f92:	f7ff ffa9 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8087f96:	2001      	movs	r0, #1
 8087f98:	e7e8      	b.n	8087f6c <_ZN9SdSpiCard8readDataEPhj+0x32>

08087f9a <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8087f9a:	b570      	push	{r4, r5, r6, lr}
 8087f9c:	4606      	mov	r6, r0
 8087f9e:	460c      	mov	r4, r1
 8087fa0:	f002 fb7e 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
 8087fa4:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8087fa6:	6830      	ldr	r0, [r6, #0]
 8087fa8:	f7ff ff9e 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8087fac:	28ff      	cmp	r0, #255	; 0xff
 8087fae:	d006      	beq.n	8087fbe <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8087fb0:	f002 fb76 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8087fb4:	1b43      	subs	r3, r0, r5
 8087fb6:	42a3      	cmp	r3, r4
 8087fb8:	d3f5      	bcc.n	8087fa6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8087fba:	2000      	movs	r0, #0
}
 8087fbc:	bd70      	pop	{r4, r5, r6, pc}
  return true;
 8087fbe:	2001      	movs	r0, #1
 8087fc0:	e7fc      	b.n	8087fbc <_ZN9SdSpiCard11waitNotBusyEt+0x22>

08087fc2 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8087fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_selected) {
 8087fc4:	7903      	ldrb	r3, [r0, #4]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8087fc6:	4604      	mov	r4, r0
 8087fc8:	460d      	mov	r5, r1
 8087fca:	9201      	str	r2, [sp, #4]
  if (!m_selected) {
 8087fcc:	b90b      	cbnz	r3, 8087fd2 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8087fce:	f7ff ffa4 	bl	8087f1a <_ZN9SdSpiCard13chipSelectLowEv>
  waitNotBusy(SD_WRITE_TIMEOUT);
 8087fd2:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087fd6:	4620      	mov	r0, r4
 8087fd8:	f7ff ffdf 	bl	8087f9a <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
 8087fdc:	6820      	ldr	r0, [r4, #0]
 8087fde:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8087fe2:	f7ff ff84 	bl	8087eee <_ZN9SdSpiCard7spiSendEh.isra.0>
 8087fe6:	2603      	movs	r6, #3
    spiSend(pa[i]);
 8087fe8:	af01      	add	r7, sp, #4
 8087fea:	5db9      	ldrb	r1, [r7, r6]
 8087fec:	6820      	ldr	r0, [r4, #0]
 8087fee:	f7ff ff7e 	bl	8087eee <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
 8087ff2:	3e01      	subs	r6, #1
 8087ff4:	d2f9      	bcs.n	8087fea <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8087ff6:	2d00      	cmp	r5, #0
 8087ff8:	bf0c      	ite	eq
 8087ffa:	2195      	moveq	r1, #149	; 0x95
 8087ffc:	2187      	movne	r1, #135	; 0x87
 8087ffe:	6820      	ldr	r0, [r4, #0]
 8088000:	f7ff ff75 	bl	8087eee <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (cmd == CMD12) {
 8088004:	2d0c      	cmp	r5, #12
 8088006:	d102      	bne.n	808800e <_ZN9SdSpiCard11cardCommandEhm+0x4c>
    spiReceive();
 8088008:	6820      	ldr	r0, [r4, #0]
 808800a:	f7ff ff6d 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 808800e:	2500      	movs	r5, #0
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8088010:	6820      	ldr	r0, [r4, #0]
 8088012:	f7ff ff69 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8088016:	0603      	lsls	r3, r0, #24
 8088018:	7220      	strb	r0, [r4, #8]
 808801a:	d503      	bpl.n	8088024 <_ZN9SdSpiCard11cardCommandEhm+0x62>
 808801c:	3501      	adds	r5, #1
 808801e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8088022:	d1f5      	bne.n	8088010 <_ZN9SdSpiCard11cardCommandEhm+0x4e>
}
 8088024:	b003      	add	sp, #12
 8088026:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088028 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8088028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808802a:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 808802c:	2300      	movs	r3, #0
  m_chipSelectPin = chipSelectPin;
 808802e:	7142      	strb	r2, [r0, #5]
  m_errorCode = m_type = 0;
 8088030:	7243      	strb	r3, [r0, #9]
 8088032:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8088034:	6001      	str	r1, [r0, #0]
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8088036:	4604      	mov	r4, r0
 8088038:	f002 fb32 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
 808803c:	4605      	mov	r5, r0
  spiBegin(m_chipSelectPin);
 808803e:	6820      	ldr	r0, [r4, #0]
    m_spi->begin(chipSelectPin);
 8088040:	7961      	ldrb	r1, [r4, #5]
 8088042:	6803      	ldr	r3, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8088044:	260a      	movs	r6, #10
    m_spi->begin(chipSelectPin);
 8088046:	681b      	ldr	r3, [r3, #0]
 8088048:	4798      	blx	r3
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 808804a:	2180      	movs	r1, #128	; 0x80
  spiBeginTransaction(m_sckDivisor);
 808804c:	6820      	ldr	r0, [r4, #0]
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 808804e:	71e1      	strb	r1, [r4, #7]
    m_spi->beginTransaction(spiDivisor);
 8088050:	6803      	ldr	r3, [r0, #0]
 8088052:	685b      	ldr	r3, [r3, #4]
 8088054:	4798      	blx	r3
    spiSend(0XFF);
 8088056:	21ff      	movs	r1, #255	; 0xff
 8088058:	6820      	ldr	r0, [r4, #0]
 808805a:	3e01      	subs	r6, #1
 808805c:	f7ff ff47 	bl	8087eee <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
 8088060:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8088064:	d1f7      	bne.n	8088056 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
  spiEndTransaction();
 8088066:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8088068:	6803      	ldr	r3, [r0, #0]
 808806a:	689b      	ldr	r3, [r3, #8]
 808806c:	4798      	blx	r3
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 808806e:	2200      	movs	r2, #0
 8088070:	4620      	mov	r0, r4
 8088072:	4611      	mov	r1, r2
 8088074:	f7ff ffa5 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
 8088078:	2801      	cmp	r0, #1
 808807a:	d00c      	beq.n	8088096 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
 808807c:	f002 fb10 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8088080:	1b40      	subs	r0, r0, r5
 8088082:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8088086:	d9f2      	bls.n	808806e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
    m_errorCode = code;
 8088088:	2301      	movs	r3, #1
  chipSelectHigh();
 808808a:	4620      	mov	r0, r4
 808808c:	71a3      	strb	r3, [r4, #6]
 808808e:	f7ff ff31 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088092:	2000      	movs	r0, #0
}
 8088094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8088096:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 808809a:	2108      	movs	r1, #8
 808809c:	4620      	mov	r0, r4
 808809e:	f7ff ff90 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
 80880a2:	2805      	cmp	r0, #5
 80880a4:	d116      	bne.n	80880d4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xac>
    m_type = value;
 80880a6:	2301      	movs	r3, #1
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80880a8:	2600      	movs	r6, #0
 80880aa:	7263      	strb	r3, [r4, #9]
    cardCommand(CMD55, 0);
 80880ac:	2200      	movs	r2, #0
 80880ae:	2137      	movs	r1, #55	; 0x37
 80880b0:	4620      	mov	r0, r4
 80880b2:	f7ff ff86 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80880b6:	4632      	mov	r2, r6
 80880b8:	2129      	movs	r1, #41	; 0x29
 80880ba:	4620      	mov	r0, r4
 80880bc:	f7ff ff81 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 80880c0:	4602      	mov	r2, r0
 80880c2:	b1f8      	cbz	r0, 8088104 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xdc>
 80880c4:	f002 faec 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 80880c8:	1b40      	subs	r0, r0, r5
 80880ca:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80880ce:	d9ed      	bls.n	80880ac <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
    m_errorCode = code;
 80880d0:	230a      	movs	r3, #10
 80880d2:	e7da      	b.n	808808a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
 80880d4:	2604      	movs	r6, #4
      m_status = spiReceive();
 80880d6:	6820      	ldr	r0, [r4, #0]
 80880d8:	f7ff ff06 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80880dc:	3e01      	subs	r6, #1
    for (uint8_t i = 0; i < 4; i++) {
 80880de:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      m_status = spiReceive();
 80880e2:	7220      	strb	r0, [r4, #8]
    for (uint8_t i = 0; i < 4; i++) {
 80880e4:	d1f7      	bne.n	80880d6 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xae>
    if (m_status == 0XAA) {
 80880e6:	28aa      	cmp	r0, #170	; 0xaa
 80880e8:	d104      	bne.n	80880f4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xcc>
    m_type = value;
 80880ea:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80880ec:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 80880f0:	7263      	strb	r3, [r4, #9]
    return m_type;
 80880f2:	e7db      	b.n	80880ac <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
 80880f4:	f002 fad4 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 80880f8:	1b40      	subs	r0, r0, r5
 80880fa:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80880fe:	d9ca      	bls.n	8088096 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
    m_errorCode = code;
 8088100:	2302      	movs	r3, #2
 8088102:	e7c2      	b.n	808808a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
  if (type() == SD_CARD_TYPE_SD2) {
 8088104:	7a63      	ldrb	r3, [r4, #9]
 8088106:	2b02      	cmp	r3, #2
 8088108:	d119      	bne.n	808813e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x116>
    if (cardCommand(CMD58, 0)) {
 808810a:	213a      	movs	r1, #58	; 0x3a
 808810c:	4620      	mov	r0, r4
 808810e:	f7ff ff58 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
 8088112:	b108      	cbz	r0, 8088118 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf0>
 8088114:	2308      	movs	r3, #8
 8088116:	e7b8      	b.n	808808a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
    if ((spiReceive() & 0XC0) == 0XC0) {
 8088118:	6820      	ldr	r0, [r4, #0]
 808811a:	f7ff fee5 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 808811e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8088122:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 8088124:	bf08      	it	eq
 8088126:	2303      	moveq	r3, #3
      spiReceive();
 8088128:	6820      	ldr	r0, [r4, #0]
 808812a:	bf08      	it	eq
 808812c:	7263      	strbeq	r3, [r4, #9]
 808812e:	f7ff fedb 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8088132:	6820      	ldr	r0, [r4, #0]
 8088134:	f7ff fed8 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8088138:	6820      	ldr	r0, [r4, #0]
 808813a:	f7ff fed5 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  chipSelectHigh();
 808813e:	4620      	mov	r0, r4
 8088140:	f7ff fed8 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8088144:	2001      	movs	r0, #1
  m_sckDivisor = sckDivisor;
 8088146:	71e7      	strb	r7, [r4, #7]
  return true;
 8088148:	e7a4      	b.n	8088094 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6c>

0808814a <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 808814a:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 808814c:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 808814e:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8088150:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8088152:	bf18      	it	ne
 8088154:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 8088156:	460a      	mov	r2, r1
 8088158:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 808815a:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 808815c:	f7ff ff31 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
 8088160:	b130      	cbz	r0, 8088170 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 8088162:	2304      	movs	r3, #4
 8088164:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8088166:	4620      	mov	r0, r4
 8088168:	f7ff fec4 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808816c:	2500      	movs	r5, #0
 808816e:	e00b      	b.n	8088188 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 8088170:	4629      	mov	r1, r5
 8088172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8088176:	4620      	mov	r0, r4
 8088178:	f7ff fedf 	bl	8087f3a <_ZN9SdSpiCard8readDataEPhj>
 808817c:	4605      	mov	r5, r0
 808817e:	2800      	cmp	r0, #0
 8088180:	d0f1      	beq.n	8088166 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  chipSelectHigh();
 8088182:	4620      	mov	r0, r4
 8088184:	f7ff feb6 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8088188:	4628      	mov	r0, r5
 808818a:	bd38      	pop	{r3, r4, r5, pc}

0808818c <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
 808818c:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 808818e:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8088190:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 8088192:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8088194:	bf18      	it	ne
 8088196:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
 8088198:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
 808819a:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
 808819c:	f7ff ff11 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
 80881a0:	b130      	cbz	r0, 80881b0 <_ZN9SdSpiCard9readStartEm+0x24>
 80881a2:	2305      	movs	r3, #5
  chipSelectHigh();
 80881a4:	4620      	mov	r0, r4
 80881a6:	71a3      	strb	r3, [r4, #6]
 80881a8:	f7ff fea4 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80881ac:	2000      	movs	r0, #0
}
 80881ae:	bd10      	pop	{r4, pc}
  return true;
 80881b0:	2001      	movs	r0, #1
 80881b2:	e7fc      	b.n	80881ae <_ZN9SdSpiCard9readStartEm+0x22>

080881b4 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 80881b4:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 80881b6:	2200      	movs	r2, #0
 80881b8:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
 80881ba:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 80881bc:	f7ff ff01 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
 80881c0:	b130      	cbz	r0, 80881d0 <_ZN9SdSpiCard8readStopEv+0x1c>
 80881c2:	2303      	movs	r3, #3
  chipSelectHigh();
 80881c4:	4620      	mov	r0, r4
 80881c6:	71a3      	strb	r3, [r4, #6]
 80881c8:	f7ff fe94 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80881cc:	2000      	movs	r0, #0
}
 80881ce:	bd10      	pop	{r4, pc}
  chipSelectHigh();
 80881d0:	4620      	mov	r0, r4
 80881d2:	f7ff fe8f 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80881d6:	2001      	movs	r0, #1
 80881d8:	e7f9      	b.n	80881ce <_ZN9SdSpiCard8readStopEv+0x1a>

080881da <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 80881da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80881dc:	4604      	mov	r4, r0
 80881de:	4616      	mov	r6, r2
 80881e0:	461f      	mov	r7, r3
  if (!readStart(block)) {
 80881e2:	f7ff ffd3 	bl	808818c <_ZN9SdSpiCard9readStartEm>
 80881e6:	b168      	cbz	r0, 8088204 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
 80881e8:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 80881ea:	b2ab      	uxth	r3, r5
 80881ec:	42bb      	cmp	r3, r7
 80881ee:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 80881f2:	d209      	bcs.n	8088208 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
 80881f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80881f8:	4620      	mov	r0, r4
 80881fa:	f7ff fe9e 	bl	8087f3a <_ZN9SdSpiCard8readDataEPhj>
 80881fe:	3501      	adds	r5, #1
 8088200:	2800      	cmp	r0, #0
 8088202:	d1f2      	bne.n	80881ea <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
 8088204:	2000      	movs	r0, #0
 8088206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
 8088208:	4620      	mov	r0, r4
}
 808820a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
 808820e:	f7ff bfd1 	b.w	80881b4 <_ZN9SdSpiCard8readStopEv>

08088212 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8088212:	b538      	push	{r3, r4, r5, lr}
 8088214:	4604      	mov	r4, r0
 8088216:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8088218:	6800      	ldr	r0, [r0, #0]
 808821a:	f7ff fe68 	bl	8087eee <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(src, 512);
 808821e:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8088220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8088224:	6803      	ldr	r3, [r0, #0]
 8088226:	4629      	mov	r1, r5
 8088228:	699b      	ldr	r3, [r3, #24]
 808822a:	4798      	blx	r3
  spiSend(crc >> 8);
 808822c:	21ff      	movs	r1, #255	; 0xff
 808822e:	6820      	ldr	r0, [r4, #0]
 8088230:	f7ff fe5d 	bl	8087eee <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
 8088234:	21ff      	movs	r1, #255	; 0xff
 8088236:	6820      	ldr	r0, [r4, #0]
 8088238:	f7ff fe59 	bl	8087eee <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
 808823c:	6820      	ldr	r0, [r4, #0]
 808823e:	f7ff fe53 	bl	8087ee8 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8088242:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8088244:	f000 001f 	and.w	r0, r0, #31
 8088248:	2805      	cmp	r0, #5
 808824a:	d006      	beq.n	808825a <_ZN9SdSpiCard9writeDataEhPKh+0x48>
    m_errorCode = code;
 808824c:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 808824e:	4620      	mov	r0, r4
 8088250:	71a3      	strb	r3, [r4, #6]
 8088252:	f7ff fe4f 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088256:	2000      	movs	r0, #0
}
 8088258:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 808825a:	2001      	movs	r0, #1
 808825c:	e7fc      	b.n	8088258 <_ZN9SdSpiCard9writeDataEhPKh+0x46>

0808825e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808825e:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8088260:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8088262:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8088264:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8088266:	bf18      	it	ne
 8088268:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 808826a:	460a      	mov	r2, r1
 808826c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808826e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 8088270:	f7ff fea7 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
 8088274:	b130      	cbz	r0, 8088284 <_ZN9SdSpiCard10writeBlockEmPKh+0x26>
 8088276:	2306      	movs	r3, #6
 8088278:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 808827a:	4620      	mov	r0, r4
 808827c:	f7ff fe3a 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088280:	2500      	movs	r5, #0
 8088282:	e00a      	b.n	808829a <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
  if (!writeData(DATA_START_BLOCK, src)) {
 8088284:	462a      	mov	r2, r5
 8088286:	21fe      	movs	r1, #254	; 0xfe
 8088288:	4620      	mov	r0, r4
 808828a:	f7ff ffc2 	bl	8088212 <_ZN9SdSpiCard9writeDataEhPKh>
 808828e:	4605      	mov	r5, r0
 8088290:	2800      	cmp	r0, #0
 8088292:	d0f2      	beq.n	808827a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  chipSelectHigh();
 8088294:	4620      	mov	r0, r4
 8088296:	f7ff fe2d 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
}
 808829a:	4628      	mov	r0, r5
 808829c:	bd38      	pop	{r3, r4, r5, pc}

0808829e <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 808829e:	b570      	push	{r4, r5, r6, lr}
 80882a0:	4604      	mov	r4, r0
 80882a2:	460e      	mov	r6, r1
  bool selected = m_selected;
 80882a4:	7905      	ldrb	r5, [r0, #4]
  chipSelectLow();
 80882a6:	f7ff fe38 	bl	8087f1a <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80882aa:	f44f 7116 	mov.w	r1, #600	; 0x258
 80882ae:	4620      	mov	r0, r4
 80882b0:	f7ff fe73 	bl	8087f9a <_ZN9SdSpiCard11waitNotBusyEt>
 80882b4:	b930      	cbnz	r0, 80882c4 <_ZN9SdSpiCard9writeDataEPKh+0x26>
 80882b6:	2317      	movs	r3, #23
 80882b8:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 80882ba:	4620      	mov	r0, r4
 80882bc:	f7ff fe1a 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80882c0:	2500      	movs	r5, #0
 80882c2:	e00c      	b.n	80882de <_ZN9SdSpiCard9writeDataEPKh+0x40>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 80882c4:	4632      	mov	r2, r6
 80882c6:	21fc      	movs	r1, #252	; 0xfc
 80882c8:	4620      	mov	r0, r4
 80882ca:	f7ff ffa2 	bl	8088212 <_ZN9SdSpiCard9writeDataEhPKh>
 80882ce:	4606      	mov	r6, r0
 80882d0:	2800      	cmp	r0, #0
 80882d2:	d0f2      	beq.n	80882ba <_ZN9SdSpiCard9writeDataEPKh+0x1c>
  if (!selected) {
 80882d4:	b91d      	cbnz	r5, 80882de <_ZN9SdSpiCard9writeDataEPKh+0x40>
    chipSelectHigh();
 80882d6:	4620      	mov	r0, r4
 80882d8:	f7ff fe0c 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80882dc:	4635      	mov	r5, r6
}
 80882de:	4628      	mov	r0, r5
 80882e0:	bd70      	pop	{r4, r5, r6, pc}

080882e2 <_ZN9SdSpiCard10writeStartEmm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 80882e2:	b570      	push	{r4, r5, r6, lr}
 80882e4:	4604      	mov	r4, r0
 80882e6:	4616      	mov	r6, r2
 80882e8:	460d      	mov	r5, r1
    cardCommand(CMD55, 0);
 80882ea:	2200      	movs	r2, #0
 80882ec:	2137      	movs	r1, #55	; 0x37
 80882ee:	f7ff fe68 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80882f2:	4632      	mov	r2, r6
 80882f4:	2117      	movs	r1, #23
 80882f6:	4620      	mov	r0, r4
 80882f8:	f7ff fe63 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 80882fc:	b130      	cbz	r0, 808830c <_ZN9SdSpiCard10writeStartEmm+0x2a>
    m_errorCode = code;
 80882fe:	2309      	movs	r3, #9
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8088300:	4620      	mov	r0, r4
 8088302:	71a3      	strb	r3, [r4, #6]
 8088304:	f7ff fdf6 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088308:	2000      	movs	r0, #0
}
 808830a:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
 808830c:	7a63      	ldrb	r3, [r4, #9]
  if (cardCommand(CMD25, blockNumber)) {
 808830e:	2119      	movs	r1, #25
  if (type() != SD_CARD_TYPE_SDHC) {
 8088310:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8088312:	bf18      	it	ne
 8088314:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, blockNumber)) {
 8088316:	462a      	mov	r2, r5
 8088318:	4620      	mov	r0, r4
 808831a:	f7ff fe52 	bl	8087fc2 <_ZN9SdSpiCard11cardCommandEhm>
 808831e:	b108      	cbz	r0, 8088324 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8088320:	2307      	movs	r3, #7
 8088322:	e7ed      	b.n	8088300 <_ZN9SdSpiCard10writeStartEmm+0x1e>
  return true;
 8088324:	2001      	movs	r0, #1
 8088326:	e7f0      	b.n	808830a <_ZN9SdSpiCard10writeStartEmm+0x28>

08088328 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8088328:	b538      	push	{r3, r4, r5, lr}
 808832a:	4604      	mov	r4, r0
  chipSelectLow();
 808832c:	f7ff fdf5 	bl	8087f1a <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8088330:	f44f 7116 	mov.w	r1, #600	; 0x258
 8088334:	4620      	mov	r0, r4
 8088336:	f7ff fe30 	bl	8087f9a <_ZN9SdSpiCard11waitNotBusyEt>
 808833a:	b178      	cbz	r0, 808835c <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 808833c:	21fd      	movs	r1, #253	; 0xfd
 808833e:	6820      	ldr	r0, [r4, #0]
 8088340:	f7ff fdd5 	bl	8087eee <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8088344:	f44f 7116 	mov.w	r1, #600	; 0x258
 8088348:	4620      	mov	r0, r4
 808834a:	f7ff fe26 	bl	8087f9a <_ZN9SdSpiCard11waitNotBusyEt>
 808834e:	4605      	mov	r5, r0
 8088350:	b120      	cbz	r0, 808835c <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  chipSelectHigh();
 8088352:	4620      	mov	r0, r4
 8088354:	f7ff fdce 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
 8088358:	4628      	mov	r0, r5
 808835a:	bd38      	pop	{r3, r4, r5, pc}
 808835c:	2312      	movs	r3, #18
  chipSelectHigh();
 808835e:	4620      	mov	r0, r4
 8088360:	71a3      	strb	r3, [r4, #6]
 8088362:	f7ff fdc7 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8088366:	2500      	movs	r5, #0
 8088368:	e7f6      	b.n	8088358 <_ZN9SdSpiCard9writeStopEv+0x30>

0808836a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 808836a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808836c:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 808836e:	461a      	mov	r2, r3
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8088370:	4604      	mov	r4, r0
 8088372:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8088374:	f7ff ffb5 	bl	80882e2 <_ZN9SdSpiCard10writeStartEmm>
 8088378:	b170      	cbz	r0, 8088398 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 808837a:	2500      	movs	r5, #0
 808837c:	42b5      	cmp	r5, r6
  return writeStop();
 808837e:	4620      	mov	r0, r4
 8088380:	eb07 2145 	add.w	r1, r7, r5, lsl #9
  for (size_t b = 0; b < count; b++, src += 512) {
 8088384:	d004      	beq.n	8088390 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8088386:	f7ff ff8a 	bl	808829e <_ZN9SdSpiCard9writeDataEPKh>
 808838a:	b128      	cbz	r0, 8088398 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 808838c:	3501      	adds	r5, #1
 808838e:	e7f5      	b.n	808837c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
}
 8088390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
 8088394:	f7ff bfc8 	b.w	8088328 <_ZN9SdSpiCard9writeStopEv>
  chipSelectHigh();
 8088398:	4620      	mov	r0, r4
 808839a:	f7ff fdab 	bl	8087ef4 <_ZN9SdSpiCard14chipSelectHighEv>
}
 808839e:	2000      	movs	r0, #0
 80883a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080883a4 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80883a4:	2201      	movs	r2, #1
 80883a6:	4b01      	ldr	r3, [pc, #4]	; (80883ac <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80883a8:	701a      	strb	r2, [r3, #0]
}
 80883aa:	4770      	bx	lr
 80883ac:	20000cdc 	.word	0x20000cdc

080883b0 <_ZN5SdSpi14endTransactionEv>:
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
}
 80883b0:	4770      	bx	lr
	...

080883b4 <_ZN5SdSpi5beginEh>:
  spiPtr[m_spiIf]->begin(chipSelectPin);
 80883b4:	7902      	ldrb	r2, [r0, #4]
 80883b6:	4b02      	ldr	r3, [pc, #8]	; (80883c0 <_ZN5SdSpi5beginEh+0xc>)
 80883b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80883bc:	f002 be0c 	b.w	808afd8 <_ZN8SPIClass5beginEt>
 80883c0:	20000ce0 	.word	0x20000ce0

080883c4 <_ZN5SdSpi16beginTransactionEh>:
void SdSpi::beginTransaction(uint8_t divisor) {
 80883c4:	b570      	push	{r4, r5, r6, lr}
 80883c6:	4605      	mov	r5, r0
 80883c8:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 80883ca:	7903      	ldrb	r3, [r0, #4]
 80883cc:	4e19      	ldr	r6, [pc, #100]	; (8088434 <_ZN5SdSpi16beginTransactionEh+0x70>)
 80883ce:	2101      	movs	r1, #1
 80883d0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80883d4:	f002 fe0e 	bl	808aff4 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 80883d8:	792b      	ldrb	r3, [r5, #4]
 80883da:	2100      	movs	r1, #0
 80883dc:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80883e0:	f002 fe16 	bl	808b010 <_ZN8SPIClass11setDataModeEh>
  if (divisor <= 2) {
 80883e4:	2c02      	cmp	r4, #2
 80883e6:	d91b      	bls.n	8088420 <_ZN5SdSpi16beginTransactionEh+0x5c>
  } else  if (divisor <= 4) {
 80883e8:	2c04      	cmp	r4, #4
 80883ea:	d91b      	bls.n	8088424 <_ZN5SdSpi16beginTransactionEh+0x60>
  } else  if (divisor <= 8) {
 80883ec:	2c08      	cmp	r4, #8
 80883ee:	d91b      	bls.n	8088428 <_ZN5SdSpi16beginTransactionEh+0x64>
  } else  if (divisor <= 16) {
 80883f0:	2c10      	cmp	r4, #16
 80883f2:	d91b      	bls.n	808842c <_ZN5SdSpi16beginTransactionEh+0x68>
  } else  if (divisor <= 32) {
 80883f4:	2c20      	cmp	r4, #32
 80883f6:	d91b      	bls.n	8088430 <_ZN5SdSpi16beginTransactionEh+0x6c>
    v = SPI_CLOCK_DIV128;
 80883f8:	2c41      	cmp	r4, #65	; 0x41
 80883fa:	bf34      	ite	cc
 80883fc:	2128      	movcc	r1, #40	; 0x28
 80883fe:	2130      	movcs	r1, #48	; 0x30
  spiPtr[m_spiIf]->setClockDivider(v);
 8088400:	792b      	ldrb	r3, [r5, #4]
 8088402:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8088406:	f002 fe53 	bl	808b0b0 <_ZN8SPIClass15setClockDividerEh>
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 808840a:	7929      	ldrb	r1, [r5, #4]
 808840c:	233c      	movs	r3, #60	; 0x3c
 808840e:	fb01 4404 	mla	r4, r1, r4, r4
 8088412:	2118      	movs	r1, #24
 8088414:	434c      	muls	r4, r1
 8088416:	fbb4 f4f3 	udiv	r4, r4, r3
 808841a:	4b07      	ldr	r3, [pc, #28]	; (8088438 <_ZN5SdSpi16beginTransactionEh+0x74>)
 808841c:	601c      	str	r4, [r3, #0]
}
 808841e:	bd70      	pop	{r4, r5, r6, pc}
    v = SPI_CLOCK_DIV2;
 8088420:	2100      	movs	r1, #0
 8088422:	e7ed      	b.n	8088400 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV4;
 8088424:	2108      	movs	r1, #8
 8088426:	e7eb      	b.n	8088400 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV8;
 8088428:	2110      	movs	r1, #16
 808842a:	e7e9      	b.n	8088400 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV16;
 808842c:	2118      	movs	r1, #24
 808842e:	e7e7      	b.n	8088400 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV32;
 8088430:	2120      	movs	r1, #32
 8088432:	e7e5      	b.n	8088400 <_ZN5SdSpi16beginTransactionEh+0x3c>
 8088434:	20000ce0 	.word	0x20000ce0
 8088438:	20000cec 	.word	0x20000cec

0808843c <_ZN5SdSpi7receiveEv>:
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 808843c:	7902      	ldrb	r2, [r0, #4]
 808843e:	4b03      	ldr	r3, [pc, #12]	; (808844c <_ZN5SdSpi7receiveEv+0x10>)
 8088440:	21ff      	movs	r1, #255	; 0xff
 8088442:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8088446:	f002 be57 	b.w	808b0f8 <_ZN8SPIClass8transferEh>
 808844a:	bf00      	nop
 808844c:	20000ce0 	.word	0x20000ce0

08088450 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8088450:	7902      	ldrb	r2, [r0, #4]
 8088452:	4b02      	ldr	r3, [pc, #8]	; (808845c <_ZN5SdSpi4sendEh+0xc>)
 8088454:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8088458:	f002 be4e 	b.w	808b0f8 <_ZN8SPIClass8transferEh>
 808845c:	20000ce0 	.word	0x20000ce0

08088460 <_ZN5SdSpi7receiveEPhj>:
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8088460:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8088462:	460e      	mov	r6, r1
  SPI_DMA_TransferCompleted = false;
 8088464:	2100      	movs	r1, #0
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8088466:	4613      	mov	r3, r2
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8088468:	4a0a      	ldr	r2, [pc, #40]	; (8088494 <_ZN5SdSpi7receiveEPhj+0x34>)
 808846a:	7905      	ldrb	r5, [r0, #4]
 808846c:	480a      	ldr	r0, [pc, #40]	; (8088498 <_ZN5SdSpi7receiveEPhj+0x38>)
 808846e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
 8088470:	4c0a      	ldr	r4, [pc, #40]	; (808849c <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8088472:	4632      	mov	r2, r6
 8088474:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  SPI_DMA_TransferCompleted = false;
 8088478:	7021      	strb	r1, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808847a:	f002 fe43 	bl	808b104 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 808847e:	7823      	ldrb	r3, [r4, #0]
 8088480:	2b00      	cmp	r3, #0
 8088482:	d0fc      	beq.n	808847e <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8088484:	4b06      	ldr	r3, [pc, #24]	; (80884a0 <_ZN5SdSpi7receiveEPhj+0x40>)
 8088486:	6818      	ldr	r0, [r3, #0]
 8088488:	b108      	cbz	r0, 808848e <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 808848a:	f002 f901 	bl	808a690 <HAL_Delay_Microseconds>
}
 808848e:	2000      	movs	r0, #0
 8088490:	b002      	add	sp, #8
 8088492:	bd70      	pop	{r4, r5, r6, pc}
 8088494:	080883a5 	.word	0x080883a5
 8088498:	20000ce0 	.word	0x20000ce0
 808849c:	20000cdc 	.word	0x20000cdc
 80884a0:	20000cec 	.word	0x20000cec

080884a4 <_ZN5SdSpi4sendEPKhj>:
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 80884a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80884a6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
 80884a8:	2200      	movs	r2, #0

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80884aa:	7905      	ldrb	r5, [r0, #4]
 80884ac:	480a      	ldr	r0, [pc, #40]	; (80884d8 <_ZN5SdSpi4sendEPKhj+0x34>)
  SPI_DMA_TransferCompleted = false;
 80884ae:	4c0b      	ldr	r4, [pc, #44]	; (80884dc <_ZN5SdSpi4sendEPKhj+0x38>)
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80884b0:	9000      	str	r0, [sp, #0]
 80884b2:	480b      	ldr	r0, [pc, #44]	; (80884e0 <_ZN5SdSpi4sendEPKhj+0x3c>)
  SPI_DMA_TransferCompleted = false;
 80884b4:	7022      	strb	r2, [r4, #0]
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80884b6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80884ba:	f002 fe23 	bl	808b104 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 80884be:	7823      	ldrb	r3, [r4, #0]
 80884c0:	2b00      	cmp	r3, #0
 80884c2:	d0fc      	beq.n	80884be <_ZN5SdSpi4sendEPKhj+0x1a>
  if (bugDelay) {
 80884c4:	4b07      	ldr	r3, [pc, #28]	; (80884e4 <_ZN5SdSpi4sendEPKhj+0x40>)
 80884c6:	6818      	ldr	r0, [r3, #0]
 80884c8:	b120      	cbz	r0, 80884d4 <_ZN5SdSpi4sendEPKhj+0x30>
    delayMicroseconds(bugDelay);
  }
}
 80884ca:	b003      	add	sp, #12
 80884cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80884d0:	f002 b8de 	b.w	808a690 <HAL_Delay_Microseconds>
 80884d4:	b003      	add	sp, #12
 80884d6:	bd30      	pop	{r4, r5, pc}
 80884d8:	080883a5 	.word	0x080883a5
 80884dc:	20000cdc 	.word	0x20000cdc
 80884e0:	20000ce0 	.word	0x20000ce0
 80884e4:	20000cec 	.word	0x20000cec

080884e8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80884e8:	b510      	push	{r4, lr}
 80884ea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80884ec:	6880      	ldr	r0, [r0, #8]
 80884ee:	b108      	cbz	r0, 80884f4 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80884f0:	f002 f916 	bl	808a720 <os_mutex_recursive_destroy>
 80884f4:	4620      	mov	r0, r4
 80884f6:	bd10      	pop	{r4, pc}

080884f8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 80884f8:	b538      	push	{r3, r4, r5, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80884fa:	4d25      	ldr	r5, [pc, #148]	; (8088590 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x98>)
 80884fc:	7829      	ldrb	r1, [r5, #0]
 80884fe:	f3bf 8f5b 	dmb	ish
 8088502:	f011 0401 	ands.w	r4, r1, #1
 8088506:	d10f      	bne.n	8088528 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x30>
 8088508:	4628      	mov	r0, r5
 808850a:	f7f7 fde4 	bl	80800d6 <__cxa_guard_acquire>
 808850e:	b158      	cbz	r0, 8088528 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x30>
 8088510:	4621      	mov	r1, r4
 8088512:	4820      	ldr	r0, [pc, #128]	; (8088594 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 8088514:	f002 fd43 	bl	808af9e <_ZN8SPIClassC1E19hal_spi_interface_t>
 8088518:	4628      	mov	r0, r5
 808851a:	f7f7 fde1 	bl	80800e0 <__cxa_guard_release>
 808851e:	4a1e      	ldr	r2, [pc, #120]	; (8088598 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 8088520:	491e      	ldr	r1, [pc, #120]	; (808859c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8088522:	481c      	ldr	r0, [pc, #112]	; (8088594 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 8088524:	f004 ff82 	bl	808d42c <__aeabi_atexit>
};
 8088528:	4b1a      	ldr	r3, [pc, #104]	; (8088594 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 808852a:	4c1d      	ldr	r4, [pc, #116]	; (80885a0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa8>)
 808852c:	4d1d      	ldr	r5, [pc, #116]	; (80885a4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xac>)
 808852e:	6023      	str	r3, [r4, #0]
 8088530:	782b      	ldrb	r3, [r5, #0]
 8088532:	f3bf 8f5b 	dmb	ish
 8088536:	07da      	lsls	r2, r3, #31
 8088538:	d40f      	bmi.n	808855a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x62>
 808853a:	4628      	mov	r0, r5
 808853c:	f7f7 fdcb 	bl	80800d6 <__cxa_guard_acquire>
 8088540:	b158      	cbz	r0, 808855a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x62>
 8088542:	2101      	movs	r1, #1
 8088544:	4818      	ldr	r0, [pc, #96]	; (80885a8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8088546:	f002 fd2a 	bl	808af9e <_ZN8SPIClassC1E19hal_spi_interface_t>
 808854a:	4628      	mov	r0, r5
 808854c:	f7f7 fdc8 	bl	80800e0 <__cxa_guard_release>
 8088550:	4a11      	ldr	r2, [pc, #68]	; (8088598 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 8088552:	4912      	ldr	r1, [pc, #72]	; (808859c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8088554:	4814      	ldr	r0, [pc, #80]	; (80885a8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8088556:	f004 ff69 	bl	808d42c <__aeabi_atexit>
 808855a:	4b13      	ldr	r3, [pc, #76]	; (80885a8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 808855c:	4d13      	ldr	r5, [pc, #76]	; (80885ac <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb4>)
 808855e:	6063      	str	r3, [r4, #4]
 8088560:	782b      	ldrb	r3, [r5, #0]
 8088562:	f3bf 8f5b 	dmb	ish
 8088566:	07db      	lsls	r3, r3, #31
 8088568:	d40f      	bmi.n	808858a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x92>
 808856a:	4628      	mov	r0, r5
 808856c:	f7f7 fdb3 	bl	80800d6 <__cxa_guard_acquire>
 8088570:	b158      	cbz	r0, 808858a <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x92>
 8088572:	2102      	movs	r1, #2
 8088574:	480e      	ldr	r0, [pc, #56]	; (80885b0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8088576:	f002 fd12 	bl	808af9e <_ZN8SPIClassC1E19hal_spi_interface_t>
 808857a:	4628      	mov	r0, r5
 808857c:	f7f7 fdb0 	bl	80800e0 <__cxa_guard_release>
 8088580:	4a05      	ldr	r2, [pc, #20]	; (8088598 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 8088582:	4906      	ldr	r1, [pc, #24]	; (808859c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8088584:	480a      	ldr	r0, [pc, #40]	; (80885b0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8088586:	f004 ff51 	bl	808d42c <__aeabi_atexit>
 808858a:	4b09      	ldr	r3, [pc, #36]	; (80885b0 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 808858c:	60a3      	str	r3, [r4, #8]
}
 808858e:	bd38      	pop	{r3, r4, r5, pc}
 8088590:	20000ccc 	.word	0x20000ccc
 8088594:	20000cd0 	.word	0x20000cd0
 8088598:	200002c0 	.word	0x200002c0
 808859c:	080884e9 	.word	0x080884e9
 80885a0:	20000ce0 	.word	0x20000ce0
 80885a4:	20000cbc 	.word	0x20000cbc
 80885a8:	20000cc0 	.word	0x20000cc0
 80885ac:	20000cac 	.word	0x20000cac
 80885b0:	20000cb0 	.word	0x20000cb0

080885b4 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80885b4:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80885b6:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
 80885b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80885bc:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80885be:	f100 0210 	add.w	r2, r0, #16
 80885c2:	6880      	ldr	r0, [r0, #8]
 80885c4:	f000 bbed 	b.w	8088da2 <_ZN9FatVolume15allocateClusterEmPm>

080885c8 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80885c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80885cc:	7801      	ldrb	r1, [r0, #0]
bool FatFile::addDirCluster() {
 80885ce:	4604      	mov	r4, r0
  if (isRootFixed()) {
 80885d0:	f011 0520 	ands.w	r5, r1, #32
 80885d4:	d003      	beq.n	80885de <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 80885d6:	2600      	movs	r6, #0
}
 80885d8:	4630      	mov	r0, r6
 80885da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
 80885de:	6942      	ldr	r2, [r0, #20]
 80885e0:	4b17      	ldr	r3, [pc, #92]	; (8088640 <_ZN7FatFile13addDirClusterEv+0x78>)
 80885e2:	429a      	cmp	r2, r3
 80885e4:	d2f7      	bcs.n	80885d6 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
 80885e6:	f7ff ffe5 	bl	80885b4 <_ZN7FatFile10addClusterEv>
 80885ea:	4606      	mov	r6, r0
 80885ec:	2800      	cmp	r0, #0
 80885ee:	d0f2      	beq.n	80885d6 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterStartBlock(m_curCluster);
 80885f0:	6921      	ldr	r1, [r4, #16]
 80885f2:	68a0      	ldr	r0, [r4, #8]
 80885f4:	f000 fb76 	bl	8088ce4 <_ZNK9FatVolume17clusterStartBlockEm>
 80885f8:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
 80885fa:	68a0      	ldr	r0, [r4, #8]
 80885fc:	2205      	movs	r2, #5
 80885fe:	4639      	mov	r1, r7
 8088600:	3028      	adds	r0, #40	; 0x28
 8088602:	f000 fb4c 	bl	8088c9e <_ZN8FatCache4readEmh>
  if (!pc) {
 8088606:	4680      	mov	r8, r0
 8088608:	2800      	cmp	r0, #0
 808860a:	d0e4      	beq.n	80885d6 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
 808860c:	4629      	mov	r1, r5
 808860e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8088612:	f006 f847 	bl	808e6a4 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8088616:	2501      	movs	r5, #1
 8088618:	68a0      	ldr	r0, [r4, #8]
 808861a:	7902      	ldrb	r2, [r0, #4]
 808861c:	42aa      	cmp	r2, r5
 808861e:	d909      	bls.n	8088634 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8088620:	6803      	ldr	r3, [r0, #0]
 8088622:	4642      	mov	r2, r8
 8088624:	685b      	ldr	r3, [r3, #4]
 8088626:	19e9      	adds	r1, r5, r7
 8088628:	4798      	blx	r3
 808862a:	2800      	cmp	r0, #0
 808862c:	d0d3      	beq.n	80885d6 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 808862e:	3501      	adds	r5, #1
 8088630:	b2ed      	uxtb	r5, r5
 8088632:	e7f1      	b.n	8088618 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8088634:	6963      	ldr	r3, [r4, #20]
 8088636:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 808863a:	6163      	str	r3, [r4, #20]
  return true;
 808863c:	e7cc      	b.n	80885d8 <_ZN7FatFile13addDirClusterEv+0x10>
 808863e:	bf00      	nop
 8088640:	001ffe00 	.word	0x001ffe00

08088644 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8088644:	b510      	push	{r4, lr}
 8088646:	4604      	mov	r4, r0
 8088648:	6880      	ldr	r0, [r0, #8]
 808864a:	460a      	mov	r2, r1
 808864c:	3028      	adds	r0, #40	; 0x28
 808864e:	69a1      	ldr	r1, [r4, #24]
 8088650:	f000 fb25 	bl	8088c9e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8088654:	b120      	cbz	r0, 8088660 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8088656:	88a3      	ldrh	r3, [r4, #4]
 8088658:	f003 030f 	and.w	r3, r3, #15
 808865c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8088660:	bd10      	pop	{r4, pc}

08088662 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8088662:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8088664:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
 8088666:	4605      	mov	r5, r0
 8088668:	460e      	mov	r6, r1
  if (isOpen()) {
 808866a:	b94c      	cbnz	r4, 8088680 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 808866c:	2224      	movs	r2, #36	; 0x24
 808866e:	4621      	mov	r1, r4
 8088670:	f006 f818 	bl	808e6a4 <memset>

  m_vol = vol;
 8088674:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8088676:	79f3      	ldrb	r3, [r6, #7]
 8088678:	2b10      	cmp	r3, #16
 808867a:	d003      	beq.n	8088684 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 808867c:	2b20      	cmp	r3, #32
 808867e:	d007      	beq.n	8088690 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = O_READ;
  return true;

fail:
  return false;
 8088680:	2000      	movs	r0, #0
 8088682:	e004      	b.n	808868e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
 8088684:	2320      	movs	r3, #32
  m_flags = O_READ;
 8088686:	2401      	movs	r4, #1
  return true;
 8088688:	4620      	mov	r0, r4
    m_attr = FILE_ATTR_ROOT32;
 808868a:	702b      	strb	r3, [r5, #0]
  m_flags = O_READ;
 808868c:	70ac      	strb	r4, [r5, #2]
}
 808868e:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
 8088690:	2340      	movs	r3, #64	; 0x40
 8088692:	e7f8      	b.n	8088686 <_ZN7FatFile8openRootEP9FatVolume+0x24>

08088694 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8088694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8088698:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
 808869a:	4604      	mov	r4, r0
 808869c:	4688      	mov	r8, r1
 808869e:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & O_READ)) {
 80886a0:	2b00      	cmp	r3, #0
 80886a2:	d05d      	beq.n	8088760 <_ZN7FatFile4readEPvj+0xcc>
 80886a4:	7882      	ldrb	r2, [r0, #2]
 80886a6:	07d1      	lsls	r1, r2, #31
 80886a8:	d55a      	bpl.n	8088760 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 80886aa:	071a      	lsls	r2, r3, #28
 80886ac:	d52d      	bpl.n	808870a <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 80886ae:	69c3      	ldr	r3, [r0, #28]
 80886b0:	6942      	ldr	r2, [r0, #20]
 80886b2:	1a9b      	subs	r3, r3, r2
 80886b4:	429d      	cmp	r5, r3
 80886b6:	bf28      	it	cs
 80886b8:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80886ba:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
 80886bc:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80886c0:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
 80886c4:	2e00      	cmp	r6, #0
 80886c6:	f000 8090 	beq.w	80887ea <_ZN7FatFile4readEPvj+0x156>
    if (isRootFixed()) {
 80886ca:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
 80886cc:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 80886ce:	0697      	lsls	r7, r2, #26
 80886d0:	68a0      	ldr	r0, [r4, #8]
    offset = m_curPosition & 0X1FF;  // offset in block
 80886d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
 80886d6:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 80886da:	d51f      	bpl.n	808871c <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80886dc:	6a00      	ldr	r0, [r0, #32]
 80886de:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 80886e0:	68a0      	ldr	r0, [r4, #8]
 80886e2:	f1ba 0f00 	cmp.w	sl, #0
 80886e6:	d142      	bne.n	808876e <_ZN7FatFile4readEPvj+0xda>
 80886e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80886ec:	d33f      	bcc.n	808876e <_ZN7FatFile4readEPvj+0xda>
    return m_cache.lbn();
 80886ee:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80886f0:	4291      	cmp	r1, r2
 80886f2:	d03c      	beq.n	808876e <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 80886f4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80886f8:	d252      	bcs.n	80887a0 <_ZN7FatFile4readEPvj+0x10c>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80886fa:	6803      	ldr	r3, [r0, #0]
 80886fc:	4642      	mov	r2, r8
 80886fe:	681b      	ldr	r3, [r3, #0]
 8088700:	4798      	blx	r3
 8088702:	b368      	cbz	r0, 8088760 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
 8088704:	f44f 7700 	mov.w	r7, #512	; 0x200
 8088708:	e044      	b.n	8088794 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
 808870a:	069b      	lsls	r3, r3, #26
 808870c:	d5d5      	bpl.n	80886ba <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 808870e:	6883      	ldr	r3, [r0, #8]
 8088710:	891a      	ldrh	r2, [r3, #8]
 8088712:	6943      	ldr	r3, [r0, #20]
 8088714:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 8088718:	b29b      	uxth	r3, r3
 808871a:	e7cb      	b.n	80886b4 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 808871c:	f890 9005 	ldrb.w	r9, [r0, #5]
 8088720:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
 8088724:	f1ba 0f00 	cmp.w	sl, #0
 8088728:	d108      	bne.n	808873c <_ZN7FatFile4readEPvj+0xa8>
 808872a:	f1b9 0f00 	cmp.w	r9, #0
 808872e:	d105      	bne.n	808873c <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
 8088730:	b95b      	cbnz	r3, 808874a <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8088732:	0653      	lsls	r3, r2, #25
 8088734:	bf4c      	ite	mi
 8088736:	6a03      	ldrmi	r3, [r0, #32]
 8088738:	6a23      	ldrpl	r3, [r4, #32]
 808873a:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 808873c:	6921      	ldr	r1, [r4, #16]
 808873e:	68a0      	ldr	r0, [r4, #8]
 8088740:	f000 fad0 	bl	8088ce4 <_ZNK9FatVolume17clusterStartBlockEm>
 8088744:	eb09 0100 	add.w	r1, r9, r0
 8088748:	e7ca      	b.n	80886e0 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808874a:	465a      	mov	r2, fp
 808874c:	6921      	ldr	r1, [r4, #16]
 808874e:	f000 facf 	bl	8088cf0 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8088752:	2800      	cmp	r0, #0
 8088754:	db04      	blt.n	8088760 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
 8088756:	d1f1      	bne.n	808873c <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
 8088758:	7823      	ldrb	r3, [r4, #0]
 808875a:	f013 0f70 	tst.w	r3, #112	; 0x70
 808875e:	d144      	bne.n	80887ea <_ZN7FatFile4readEPvj+0x156>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8088760:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8088762:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
 8088766:	f043 0302 	orr.w	r3, r3, #2
 808876a:	7063      	strb	r3, [r4, #1]
  return -1;
 808876c:	e03e      	b.n	80887ec <_ZN7FatFile4readEPvj+0x158>
      n = 512 - offset;
 808876e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
 8088772:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
 8088774:	f04f 0200 	mov.w	r2, #0
 8088778:	f100 0028 	add.w	r0, r0, #40	; 0x28
 808877c:	bf28      	it	cs
 808877e:	4637      	movcs	r7, r6
 8088780:	f000 fa8d 	bl	8088c9e <_ZN8FatCache4readEmh>
      if (!pc) {
 8088784:	2800      	cmp	r0, #0
 8088786:	d0eb      	beq.n	8088760 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
 8088788:	eb00 010a 	add.w	r1, r0, sl
 808878c:	463a      	mov	r2, r7
 808878e:	4640      	mov	r0, r8
 8088790:	f005 ff7a 	bl	808e688 <memcpy>
    m_curPosition += n;
 8088794:	6963      	ldr	r3, [r4, #20]
    dst += n;
 8088796:	44b8      	add	r8, r7
    m_curPosition += n;
 8088798:	443b      	add	r3, r7
 808879a:	6163      	str	r3, [r4, #20]
    toRead -= n;
 808879c:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 808879e:	e791      	b.n	80886c4 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
 80887a0:	7827      	ldrb	r7, [r4, #0]
      uint8_t nb = toRead >> 9;
 80887a2:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 80887a6:	06bf      	lsls	r7, r7, #26
 80887a8:	d406      	bmi.n	80887b8 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 80887aa:	7907      	ldrb	r7, [r0, #4]
 80887ac:	eba7 0709 	sub.w	r7, r7, r9
 80887b0:	b2ff      	uxtb	r7, r7
 80887b2:	42bb      	cmp	r3, r7
 80887b4:	bf28      	it	cs
 80887b6:	463b      	movcs	r3, r7
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80887b8:	4291      	cmp	r1, r2
      n = 512*nb;
 80887ba:	ea4f 2743 	mov.w	r7, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80887be:	d208      	bcs.n	80887d2 <_ZN7FatFile4readEPvj+0x13e>
      if (!m_vol->readBlocks(block, dst, nb)) {
 80887c0:	68a0      	ldr	r0, [r4, #8]
 80887c2:	6802      	ldr	r2, [r0, #0]
 80887c4:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80887c8:	4642      	mov	r2, r8
 80887ca:	47d0      	blx	sl
 80887cc:	2800      	cmp	r0, #0
 80887ce:	d1e1      	bne.n	8088794 <_ZN7FatFile4readEPvj+0x100>
 80887d0:	e7c6      	b.n	8088760 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80887d2:	441a      	add	r2, r3
 80887d4:	428a      	cmp	r2, r1
 80887d6:	d9f3      	bls.n	80887c0 <_ZN7FatFile4readEPvj+0x12c>
 80887d8:	e9cd 1300 	strd	r1, r3, [sp]
        if (!m_vol->cacheSync()) {
 80887dc:	f7ff f874 	bl	80878c8 <_ZN9FatVolume9cacheSyncEv>
 80887e0:	e9dd 1300 	ldrd	r1, r3, [sp]
 80887e4:	2800      	cmp	r0, #0
 80887e6:	d1eb      	bne.n	80887c0 <_ZN7FatFile4readEPvj+0x12c>
 80887e8:	e7ba      	b.n	8088760 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
 80887ea:	1ba8      	subs	r0, r5, r6
}
 80887ec:	b003      	add	sp, #12
 80887ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080887f2 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 80887f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
 80887f4:	2201      	movs	r2, #1
  pos->cluster = m_curCluster;
 80887f6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80887fa:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 80887fe:	4604      	mov	r4, r0
 8088800:	f7ff ff48 	bl	8088694 <_ZN7FatFile4readEPvj>
 8088804:	2801      	cmp	r0, #1
 8088806:	bf12      	itee	ne
 8088808:	f04f 30ff 	movne.w	r0, #4294967295
 808880c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
 8088810:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
 8088814:	b002      	add	sp, #8
 8088816:	bd70      	pop	{r4, r5, r6, pc}

08088818 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8088818:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
 808881a:	6943      	ldr	r3, [r0, #20]
dir_t* FatFile::readDirCache(bool skipReadOk) {
 808881c:	4604      	mov	r4, r0
  if (i == 0 || !skipReadOk) {
 808881e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8088822:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 8088826:	d000      	beq.n	808882a <_ZN7FatFile12readDirCacheEb+0x12>
 8088828:	b999      	cbnz	r1, 8088852 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 808882a:	2201      	movs	r2, #1
 808882c:	4620      	mov	r0, r4
 808882e:	f10d 0107 	add.w	r1, sp, #7
 8088832:	f7ff ff2f 	bl	8088694 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
 8088836:	b240      	sxtb	r0, r0
 8088838:	2801      	cmp	r0, #1
 808883a:	d002      	beq.n	8088842 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
 808883c:	2000      	movs	r0, #0
}
 808883e:	b003      	add	sp, #12
 8088840:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
 8088842:	6963      	ldr	r3, [r4, #20]
 8088844:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
 8088846:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
 8088848:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
 808884a:	3034      	adds	r0, #52	; 0x34
 808884c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8088850:	e7f5      	b.n	808883e <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
 8088852:	3320      	adds	r3, #32
 8088854:	e7f7      	b.n	8088846 <_ZN7FatFile12readDirCacheEb+0x2e>

08088856 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
 8088856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
 808885a:	7802      	ldrb	r2, [r0, #0]
bool FatFile::seekSet(uint32_t pos) {
 808885c:	4604      	mov	r4, r0
 808885e:	460d      	mov	r5, r1
  uint32_t tmp = m_curCluster;
 8088860:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
 8088862:	b162      	cbz	r2, 808887e <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
 8088864:	6940      	ldr	r0, [r0, #20]
 8088866:	4288      	cmp	r0, r1
 8088868:	d002      	beq.n	8088870 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
 808886a:	b919      	cbnz	r1, 8088874 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
 808886c:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
 808886e:	6165      	str	r5, [r4, #20]
    return true;
 8088870:	2001      	movs	r0, #1
 8088872:	e006      	b.n	8088882 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
 8088874:	0716      	lsls	r6, r2, #28
 8088876:	d506      	bpl.n	8088886 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
 8088878:	69e3      	ldr	r3, [r4, #28]
 808887a:	428b      	cmp	r3, r1
 808887c:	d20b      	bcs.n	8088896 <_ZN7FatFile7seekSetEm+0x40>
  return false;
 808887e:	2000      	movs	r0, #0
  m_curCluster = tmp;
 8088880:	6127      	str	r7, [r4, #16]
}
 8088882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 8088886:	0691      	lsls	r1, r2, #26
 8088888:	d505      	bpl.n	8088896 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 808888a:	68a3      	ldr	r3, [r4, #8]
 808888c:	891b      	ldrh	r3, [r3, #8]
 808888e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 8088892:	d9ec      	bls.n	808886e <_ZN7FatFile7seekSetEm+0x18>
 8088894:	e7f3      	b.n	808887e <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8088896:	f8d4 c008 	ldr.w	ip, [r4, #8]
 808889a:	1e43      	subs	r3, r0, #1
 808889c:	f89c 6006 	ldrb.w	r6, [ip, #6]
 80888a0:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80888a4:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80888a6:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80888a8:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
 80888aa:	42b3      	cmp	r3, r6
 80888ac:	d800      	bhi.n	80888b0 <_ZN7FatFile7seekSetEm+0x5a>
 80888ae:	b998      	cbnz	r0, 80888d8 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80888b0:	0653      	lsls	r3, r2, #25
 80888b2:	bf4c      	ite	mi
 80888b4:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 80888b8:	6a23      	ldrpl	r3, [r4, #32]
 80888ba:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80888bc:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 80888c0:	2e00      	cmp	r6, #0
 80888c2:	d0d4      	beq.n	808886e <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80888c4:	4642      	mov	r2, r8
 80888c6:	6921      	ldr	r1, [r4, #16]
 80888c8:	68a0      	ldr	r0, [r4, #8]
 80888ca:	f000 fa11 	bl	8088cf0 <_ZN9FatVolume6fatGetEmPm>
 80888ce:	2800      	cmp	r0, #0
 80888d0:	f106 36ff 	add.w	r6, r6, #4294967295
 80888d4:	dcf4      	bgt.n	80888c0 <_ZN7FatFile7seekSetEm+0x6a>
 80888d6:	e7d2      	b.n	808887e <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
 80888d8:	1af6      	subs	r6, r6, r3
 80888da:	e7ef      	b.n	80888bc <_ZN7FatFile7seekSetEm+0x66>

080888dc <_ZN7FatFile15openCachedEntryEPS_thh>:
                              uint8_t oflag, uint8_t lfnOrd) {
 80888dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80888de:	460f      	mov	r7, r1
 80888e0:	4604      	mov	r4, r0
 80888e2:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
 80888e4:	2100      	movs	r1, #0
 80888e6:	2224      	movs	r2, #36	; 0x24
                              uint8_t oflag, uint8_t lfnOrd) {
 80888e8:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
 80888ea:	f005 fedb 	bl	808e6a4 <memset>
  m_vol = dirFile->m_vol;
 80888ee:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80888f0:	80a5      	strh	r5, [r4, #4]
  m_vol = dirFile->m_vol;
 80888f2:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 80888f4:	6a3b      	ldr	r3, [r7, #32]
 80888f6:	f005 050f 	and.w	r5, r5, #15
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80888fa:	f100 0234 	add.w	r2, r0, #52	; 0x34
  m_dirCluster = dirFile->m_firstCluster;
 80888fe:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8088900:	016b      	lsls	r3, r5, #5
 8088902:	eb02 1545 	add.w	r5, r2, r5, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8088906:	7aea      	ldrb	r2, [r5, #11]
 8088908:	0717      	lsls	r7, r2, #28
 808890a:	d502      	bpl.n	8088912 <_ZN7FatFile15openCachedEntryEPS_thh+0x36>
  m_attr = FILE_ATTR_CLOSED;
 808890c:	2000      	movs	r0, #0
 808890e:	7020      	strb	r0, [r4, #0]
}
 8088910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8088912:	18c2      	adds	r2, r0, r3
 8088914:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
 8088918:	f001 0117 	and.w	r1, r1, #23
 808891c:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 808891e:	7aea      	ldrb	r2, [r5, #11]
 8088920:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
 8088924:	bf08      	it	eq
 8088926:	f041 0108 	orreq.w	r1, r1, #8
  m_lfnOrd = lfnOrd;
 808892a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    m_attr |= FILE_ATTR_FILE;
 808892e:	bf08      	it	eq
 8088930:	7021      	strbeq	r1, [r4, #0]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8088932:	f016 0f32 	tst.w	r6, #50	; 0x32
  m_lfnOrd = lfnOrd;
 8088936:	70e2      	strb	r2, [r4, #3]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8088938:	d004      	beq.n	8088944 <_ZN7FatFile15openCachedEntryEPS_thh+0x68>
    if (isSubDir() || isReadOnly()) {
 808893a:	7822      	ldrb	r2, [r4, #0]
 808893c:	06d5      	lsls	r5, r2, #27
 808893e:	d4e5      	bmi.n	808890c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
 8088940:	07d1      	lsls	r1, r2, #31
 8088942:	d4e3      	bmi.n	808890c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
  m_flags = oflag & F_OFLAG;
 8088944:	f006 020f 	and.w	r2, r6, #15
 8088948:	70a2      	strb	r2, [r4, #2]
    return m_cache.lbn();
 808894a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 808894c:	4403      	add	r3, r0
  m_dirBlock = m_vol->cacheBlockNumber();
 808894e:	61a2      	str	r2, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8088950:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
                 | dir->firstClusterLow;
 8088954:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8088958:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
 808895c:	06f2      	lsls	r2, r6, #27
 808895e:	d50d      	bpl.n	808897c <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8088960:	b939      	cbnz	r1, 8088972 <_ZN7FatFile15openCachedEntryEPS_thh+0x96>
    m_flags |= F_FILE_DIR_DIRTY;
 8088962:	78a3      	ldrb	r3, [r4, #2]
 8088964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8088968:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 808896a:	06b3      	lsls	r3, r6, #26
 808896c:	d40a      	bmi.n	8088984 <_ZN7FatFile15openCachedEntryEPS_thh+0xa8>
  return true;
 808896e:	2001      	movs	r0, #1
 8088970:	e7ce      	b.n	8088910 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8088972:	f000 fa52 	bl	8088e1a <_ZN9FatVolume9freeChainEm>
 8088976:	2800      	cmp	r0, #0
 8088978:	d1f3      	bne.n	8088962 <_ZN7FatFile15openCachedEntryEPS_thh+0x86>
 808897a:	e7c7      	b.n	808890c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
    m_firstCluster = firstCluster;
 808897c:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 808897e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8088980:	61e3      	str	r3, [r4, #28]
 8088982:	e7f2      	b.n	808896a <_ZN7FatFile15openCachedEntryEPS_thh+0x8e>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8088984:	4620      	mov	r0, r4
 8088986:	69e1      	ldr	r1, [r4, #28]
 8088988:	f7ff ff65 	bl	8088856 <_ZN7FatFile7seekSetEm>
 808898c:	2800      	cmp	r0, #0
 808898e:	d1ee      	bne.n	808896e <_ZN7FatFile15openCachedEntryEPS_thh+0x92>
 8088990:	e7bc      	b.n	808890c <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
	...

08088994 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8088994:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8088996:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 8088998:	4604      	mov	r4, r0
  if (!isOpen()) {
 808899a:	b90b      	cbnz	r3, 80889a0 <_ZN7FatFile4syncEv+0xc>
    return true;
 808899c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 808899e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 80889a0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80889a4:	2b00      	cmp	r3, #0
 80889a6:	da23      	bge.n	80889f0 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80889a8:	2101      	movs	r1, #1
 80889aa:	f7ff fe4b 	bl	8088644 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80889ae:	4605      	mov	r5, r0
 80889b0:	b928      	cbnz	r0, 80889be <_ZN7FatFile4syncEv+0x2a>
  m_error |= WRITE_ERROR;
 80889b2:	7863      	ldrb	r3, [r4, #1]
  return false;
 80889b4:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 80889b6:	f043 0301 	orr.w	r3, r3, #1
 80889ba:	7063      	strb	r3, [r4, #1]
  return false;
 80889bc:	e7ef      	b.n	808899e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80889be:	7803      	ldrb	r3, [r0, #0]
 80889c0:	2be5      	cmp	r3, #229	; 0xe5
 80889c2:	d0f6      	beq.n	80889b2 <_ZN7FatFile4syncEv+0x1e>
    if (isFile()) {
 80889c4:	7823      	ldrb	r3, [r4, #0]
 80889c6:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 80889c8:	bf44      	itt	mi
 80889ca:	69e3      	ldrmi	r3, [r4, #28]
 80889cc:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 80889ce:	8c23      	ldrh	r3, [r4, #32]
 80889d0:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 80889d2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80889d4:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 80889d6:	4b09      	ldr	r3, [pc, #36]	; (80889fc <_ZN7FatFile4syncEv+0x68>)
 80889d8:	681b      	ldr	r3, [r3, #0]
 80889da:	b12b      	cbz	r3, 80889e8 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80889dc:	f100 0116 	add.w	r1, r0, #22
 80889e0:	3018      	adds	r0, #24
 80889e2:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80889e4:	8b2b      	ldrh	r3, [r5, #24]
 80889e6:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 80889e8:	78a3      	ldrb	r3, [r4, #2]
 80889ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80889ee:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 80889f0:	68a0      	ldr	r0, [r4, #8]
 80889f2:	f7fe ff69 	bl	80878c8 <_ZN9FatVolume9cacheSyncEv>
 80889f6:	2800      	cmp	r0, #0
 80889f8:	d0db      	beq.n	80889b2 <_ZN7FatFile4syncEv+0x1e>
 80889fa:	e7cf      	b.n	808899c <_ZN7FatFile4syncEv+0x8>
 80889fc:	20000cf0 	.word	0x20000cf0

08088a00 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 8088a00:	b510      	push	{r4, lr}
 8088a02:	4604      	mov	r4, r0
  bool rtn = sync();
 8088a04:	f7ff ffc6 	bl	8088994 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8088a08:	2300      	movs	r3, #0
 8088a0a:	7023      	strb	r3, [r4, #0]
}
 8088a0c:	bd10      	pop	{r4, pc}

08088a0e <_ZN7FatFile4openEPS_PKch>:
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8088a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088a10:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8088a12:	2300      	movs	r3, #0
 8088a14:	b093      	sub	sp, #76	; 0x4c
 8088a16:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
 8088a1a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8088a1c:	4606      	mov	r6, r0
 8088a1e:	460c      	mov	r4, r1
 8088a20:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 8088a22:	b113      	cbz	r3, 8088a2a <_ZN7FatFile4openEPS_PKch+0x1c>
  return false;
 8088a24:	2000      	movs	r0, #0
}
 8088a26:	b013      	add	sp, #76	; 0x4c
 8088a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
 8088a2a:	780b      	ldrb	r3, [r1, #0]
 8088a2c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8088a30:	d0f8      	beq.n	8088a24 <_ZN7FatFile4openEPS_PKch+0x16>
  if (isDirSeparator(*path)) {
 8088a32:	7813      	ldrb	r3, [r2, #0]
 8088a34:	2b2f      	cmp	r3, #47	; 0x2f
 8088a36:	d112      	bne.n	8088a5e <_ZN7FatFile4openEPS_PKch+0x50>
    while (isDirSeparator(*path)) {
 8088a38:	9a01      	ldr	r2, [sp, #4]
 8088a3a:	7813      	ldrb	r3, [r2, #0]
 8088a3c:	2b2f      	cmp	r3, #47	; 0x2f
 8088a3e:	d102      	bne.n	8088a46 <_ZN7FatFile4openEPS_PKch+0x38>
      path++;
 8088a40:	3201      	adds	r2, #1
 8088a42:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 8088a44:	e7f8      	b.n	8088a38 <_ZN7FatFile4openEPS_PKch+0x2a>
    if (*path == 0) {
 8088a46:	68a1      	ldr	r1, [r4, #8]
 8088a48:	b91b      	cbnz	r3, 8088a52 <_ZN7FatFile4openEPS_PKch+0x44>
      return openRoot(dirFile->m_vol);
 8088a4a:	4630      	mov	r0, r6
 8088a4c:	f7ff fe09 	bl	8088662 <_ZN7FatFile8openRootEP9FatVolume>
 8088a50:	e7e9      	b.n	8088a26 <_ZN7FatFile4openEPS_PKch+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8088a52:	a809      	add	r0, sp, #36	; 0x24
 8088a54:	f7ff fe05 	bl	8088662 <_ZN7FatFile8openRootEP9FatVolume>
 8088a58:	2800      	cmp	r0, #0
 8088a5a:	d0e3      	beq.n	8088a24 <_ZN7FatFile4openEPS_PKch+0x16>
    dirFile = &tmpDir;
 8088a5c:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 8088a5e:	9801      	ldr	r0, [sp, #4]
 8088a60:	aa01      	add	r2, sp, #4
 8088a62:	a903      	add	r1, sp, #12
 8088a64:	f7fe ff4c 	bl	8087900 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8088a68:	2800      	cmp	r0, #0
 8088a6a:	d0db      	beq.n	8088a24 <_ZN7FatFile4openEPS_PKch+0x16>
    if (*path == 0) {
 8088a6c:	9b01      	ldr	r3, [sp, #4]
 8088a6e:	781b      	ldrb	r3, [r3, #0]
 8088a70:	b19b      	cbz	r3, 8088a9a <_ZN7FatFile4openEPS_PKch+0x8c>
    if (!open(dirFile, &fname, O_READ)) {
 8088a72:	2301      	movs	r3, #1
 8088a74:	4621      	mov	r1, r4
 8088a76:	4630      	mov	r0, r6
 8088a78:	aa03      	add	r2, sp, #12
 8088a7a:	f7ff f875 	bl	8087b68 <_ZN7FatFile4openEPS_P7fname_th>
 8088a7e:	2800      	cmp	r0, #0
 8088a80:	d0d0      	beq.n	8088a24 <_ZN7FatFile4openEPS_PKch+0x16>
    tmpDir = *this;
 8088a82:	4635      	mov	r5, r6
 8088a84:	ac09      	add	r4, sp, #36	; 0x24
 8088a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088a8e:	682b      	ldr	r3, [r5, #0]
    close();
 8088a90:	4630      	mov	r0, r6
    tmpDir = *this;
 8088a92:	6023      	str	r3, [r4, #0]
    close();
 8088a94:	f7ff ffb4 	bl	8088a00 <_ZN7FatFile5closeEv>
  while (1) {
 8088a98:	e7e0      	b.n	8088a5c <_ZN7FatFile4openEPS_PKch+0x4e>
  return open(dirFile, &fname, oflag);
 8088a9a:	463b      	mov	r3, r7
 8088a9c:	4621      	mov	r1, r4
 8088a9e:	4630      	mov	r0, r6
 8088aa0:	aa03      	add	r2, sp, #12
 8088aa2:	f7ff f861 	bl	8087b68 <_ZN7FatFile4openEPS_P7fname_th>
 8088aa6:	e7be      	b.n	8088a26 <_ZN7FatFile4openEPS_PKch+0x18>

08088aa8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8088aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088aac:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
 8088aae:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088ab0:	071d      	lsls	r5, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
 8088ab2:	4689      	mov	r9, r1
 8088ab4:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & O_WRITE)) {
 8088ab6:	d55b      	bpl.n	8088b70 <_ZN7FatFile5writeEPKvj+0xc8>
 8088ab8:	7883      	ldrb	r3, [r0, #2]
 8088aba:	0799      	lsls	r1, r3, #30
 8088abc:	d558      	bpl.n	8088b70 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 8088abe:	075a      	lsls	r2, r3, #29
 8088ac0:	d451      	bmi.n	8088b66 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8088ac2:	6963      	ldr	r3, [r4, #20]
 8088ac4:	43db      	mvns	r3, r3
 8088ac6:	42bb      	cmp	r3, r7
 8088ac8:	d352      	bcc.n	8088b70 <_ZN7FatFile5writeEPKvj+0xc8>
 8088aca:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088acc:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
 8088ad0:	6963      	ldr	r3, [r4, #20]
 8088ad2:	f1b8 0f00 	cmp.w	r8, #0
 8088ad6:	f000 808f 	beq.w	8088bf8 <_ZN7FatFile5writeEPKvj+0x150>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8088ada:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8088adc:	f3c3 0508 	ubfx	r5, r3, #0, #9
    return (position >> 9) & m_clusterBlockMask;
 8088ae0:	7946      	ldrb	r6, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8088ae2:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 8088ae6:	d10e      	bne.n	8088b06 <_ZN7FatFile5writeEPKvj+0x5e>
 8088ae8:	b96d      	cbnz	r5, 8088b06 <_ZN7FatFile5writeEPKvj+0x5e>
 8088aea:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
 8088aec:	2900      	cmp	r1, #0
 8088aee:	d046      	beq.n	8088b7e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088af0:	4652      	mov	r2, sl
 8088af2:	f000 f8fd 	bl	8088cf0 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8088af6:	2800      	cmp	r0, #0
 8088af8:	db3a      	blt.n	8088b70 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8088afa:	d104      	bne.n	8088b06 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
 8088afc:	4620      	mov	r0, r4
 8088afe:	f7ff fd59 	bl	80885b4 <_ZN7FatFile10addClusterEv>
 8088b02:	2800      	cmp	r0, #0
 8088b04:	d034      	beq.n	8088b70 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8088b06:	6921      	ldr	r1, [r4, #16]
 8088b08:	68a0      	ldr	r0, [r4, #8]
 8088b0a:	f000 f8eb 	bl	8088ce4 <_ZNK9FatVolume17clusterStartBlockEm>
 8088b0e:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8088b10:	68a0      	ldr	r0, [r4, #8]
 8088b12:	b915      	cbnz	r5, 8088b1a <_ZN7FatFile5writeEPKvj+0x72>
 8088b14:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8088b18:	d23f      	bcs.n	8088b9a <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8088b1a:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
 8088b1e:	4546      	cmp	r6, r8
 8088b20:	bf28      	it	cs
 8088b22:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8088b24:	2d00      	cmp	r5, #0
 8088b26:	d136      	bne.n	8088b96 <_ZN7FatFile5writeEPKvj+0xee>
 8088b28:	6962      	ldr	r2, [r4, #20]
 8088b2a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8088b2c:	429a      	cmp	r2, r3
 8088b2e:	bf34      	ite	cc
 8088b30:	2201      	movcc	r2, #1
 8088b32:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
 8088b34:	3028      	adds	r0, #40	; 0x28
 8088b36:	f000 f8b2 	bl	8088c9e <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8088b3a:	b1c8      	cbz	r0, 8088b70 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8088b3c:	4428      	add	r0, r5
 8088b3e:	4632      	mov	r2, r6
 8088b40:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8088b42:	4435      	add	r5, r6
      memcpy(dst, src, n);
 8088b44:	f005 fda0 	bl	808e688 <memcpy>
      if (512 == (n + blockOffset)) {
 8088b48:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8088b4c:	d104      	bne.n	8088b58 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
 8088b4e:	68a0      	ldr	r0, [r4, #8]
 8088b50:	3028      	adds	r0, #40	; 0x28
 8088b52:	f000 f87d 	bl	8088c50 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8088b56:	b158      	cbz	r0, 8088b70 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8088b58:	6963      	ldr	r3, [r4, #20]
    src += n;
 8088b5a:	44b1      	add	r9, r6
    m_curPosition += n;
 8088b5c:	4433      	add	r3, r6
 8088b5e:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 8088b60:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
 8088b64:	e7b4      	b.n	8088ad0 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
 8088b66:	69c1      	ldr	r1, [r0, #28]
 8088b68:	f7ff fe75 	bl	8088856 <_ZN7FatFile7seekSetEm>
 8088b6c:	2800      	cmp	r0, #0
 8088b6e:	d1a8      	bne.n	8088ac2 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8088b70:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8088b72:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= WRITE_ERROR;
 8088b76:	f043 0301 	orr.w	r3, r3, #1
 8088b7a:	7063      	strb	r3, [r4, #1]
  return -1;
 8088b7c:	e04d      	b.n	8088c1a <_ZN7FatFile5writeEPKvj+0x172>
        if (m_firstCluster == 0) {
 8088b7e:	6a23      	ldr	r3, [r4, #32]
 8088b80:	b93b      	cbnz	r3, 8088b92 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
 8088b82:	4620      	mov	r0, r4
 8088b84:	f7ff fd16 	bl	80885b4 <_ZN7FatFile10addClusterEv>
 8088b88:	2800      	cmp	r0, #0
 8088b8a:	d0f1      	beq.n	8088b70 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
 8088b8c:	6923      	ldr	r3, [r4, #16]
 8088b8e:	6223      	str	r3, [r4, #32]
 8088b90:	e7b9      	b.n	8088b06 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
 8088b92:	6123      	str	r3, [r4, #16]
 8088b94:	e7b7      	b.n	8088b06 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8088b96:	2201      	movs	r2, #1
 8088b98:	e7cc      	b.n	8088b34 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
 8088b9a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8088b9e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8088ba0:	d319      	bcc.n	8088bd6 <_ZN7FatFile5writeEPKvj+0x12e>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8088ba2:	7903      	ldrb	r3, [r0, #4]
      uint8_t nBlock = nToWrite >> 9;
 8088ba4:	f3c8 2c47 	ubfx	ip, r8, #9, #8
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8088ba8:	1b9b      	subs	r3, r3, r6
 8088baa:	b2db      	uxtb	r3, r3
 8088bac:	4563      	cmp	r3, ip
 8088bae:	bf28      	it	cs
 8088bb0:	4663      	movcs	r3, ip
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8088bb2:	4291      	cmp	r1, r2
      n = 512*nBlock;
 8088bb4:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8088bb8:	d307      	bcc.n	8088bca <_ZN7FatFile5writeEPKvj+0x122>
 8088bba:	441a      	add	r2, r3
 8088bbc:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
 8088bbe:	bf82      	ittt	hi
 8088bc0:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
 8088bc4:	f880 5028 	strbhi.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088bc8:	6302      	strhi	r2, [r0, #48]	; 0x30
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8088bca:	68a0      	ldr	r0, [r4, #8]
 8088bcc:	6802      	ldr	r2, [r0, #0]
 8088bce:	68d5      	ldr	r5, [r2, #12]
 8088bd0:	464a      	mov	r2, r9
 8088bd2:	47a8      	blx	r5
 8088bd4:	e7bf      	b.n	8088b56 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
 8088bd6:	4291      	cmp	r1, r2
 8088bd8:	bf02      	ittt	eq
 8088bda:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
 8088bde:	f880 5028 	strbeq.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088be2:	6303      	streq	r3, [r0, #48]	; 0x30
      if (!m_vol->writeBlock(block, src)) {
 8088be4:	68a0      	ldr	r0, [r4, #8]
 8088be6:	464a      	mov	r2, r9
 8088be8:	6803      	ldr	r3, [r0, #0]
 8088bea:	685b      	ldr	r3, [r3, #4]
 8088bec:	4798      	blx	r3
 8088bee:	2800      	cmp	r0, #0
 8088bf0:	d0be      	beq.n	8088b70 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
 8088bf2:	f44f 7600 	mov.w	r6, #512	; 0x200
 8088bf6:	e7af      	b.n	8088b58 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
 8088bf8:	69e1      	ldr	r1, [r4, #28]
 8088bfa:	78a2      	ldrb	r2, [r4, #2]
 8088bfc:	4299      	cmp	r1, r3
 8088bfe:	d204      	bcs.n	8088c0a <_ZN7FatFile5writeEPKvj+0x162>
    m_fileSize = m_curPosition;
 8088c00:	61e3      	str	r3, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 8088c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8088c06:	70a2      	strb	r2, [r4, #2]
 8088c08:	e003      	b.n	8088c12 <_ZN7FatFile5writeEPKvj+0x16a>
  } else if (m_dateTime) {
 8088c0a:	4b08      	ldr	r3, [pc, #32]	; (8088c2c <_ZN7FatFile5writeEPKvj+0x184>)
 8088c0c:	681b      	ldr	r3, [r3, #0]
 8088c0e:	2b00      	cmp	r3, #0
 8088c10:	d1f7      	bne.n	8088c02 <_ZN7FatFile5writeEPKvj+0x15a>
  if (m_flags & O_SYNC) {
 8088c12:	78a3      	ldrb	r3, [r4, #2]
 8088c14:	071b      	lsls	r3, r3, #28
 8088c16:	d402      	bmi.n	8088c1e <_ZN7FatFile5writeEPKvj+0x176>
  return nbyte;
 8088c18:	4638      	mov	r0, r7
}
 8088c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
 8088c1e:	4620      	mov	r0, r4
 8088c20:	f7ff feb8 	bl	8088994 <_ZN7FatFile4syncEv>
 8088c24:	2800      	cmp	r0, #0
 8088c26:	d1f7      	bne.n	8088c18 <_ZN7FatFile5writeEPKvj+0x170>
 8088c28:	e7a2      	b.n	8088b70 <_ZN7FatFile5writeEPKvj+0xc8>
 8088c2a:	bf00      	nop
 8088c2c:	20000cf0 	.word	0x20000cf0

08088c30 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8088c30:	b570      	push	{r4, r5, r6, lr}
 8088c32:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8088c34:	460c      	mov	r4, r1
    }
 8088c36:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 8088c38:	b149      	cbz	r1, 8088c4e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8088c3a:	f005 fd9a 	bl	808e772 <strlen>
 8088c3e:	682b      	ldr	r3, [r5, #0]
 8088c40:	4602      	mov	r2, r0
 8088c42:	4621      	mov	r1, r4
 8088c44:	4628      	mov	r0, r5
    }
 8088c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8088c4a:	68db      	ldr	r3, [r3, #12]
 8088c4c:	4718      	bx	r3
    }
 8088c4e:	bd70      	pop	{r4, r5, r6, pc}

08088c50 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8088c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8088c52:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 8088c54:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8088c56:	07da      	lsls	r2, r3, #31
 8088c58:	d51f      	bpl.n	8088c9a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8088c5a:	6840      	ldr	r0, [r0, #4]
 8088c5c:	f104 060c 	add.w	r6, r4, #12
 8088c60:	6803      	ldr	r3, [r0, #0]
 8088c62:	4632      	mov	r2, r6
 8088c64:	685b      	ldr	r3, [r3, #4]
 8088c66:	68a1      	ldr	r1, [r4, #8]
 8088c68:	4798      	blx	r3
 8088c6a:	4605      	mov	r5, r0
 8088c6c:	b910      	cbnz	r0, 8088c74 <_ZN8FatCache4syncEv+0x24>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8088c6e:	2500      	movs	r5, #0
}
 8088c70:	4628      	mov	r0, r5
 8088c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8088c74:	7823      	ldrb	r3, [r4, #0]
 8088c76:	079b      	lsls	r3, r3, #30
 8088c78:	d404      	bmi.n	8088c84 <_ZN8FatCache4syncEv+0x34>
    m_status &= ~CACHE_STATUS_DIRTY;
 8088c7a:	7823      	ldrb	r3, [r4, #0]
 8088c7c:	f023 0301 	bic.w	r3, r3, #1
 8088c80:	7023      	strb	r3, [r4, #0]
 8088c82:	e7f5      	b.n	8088c70 <_ZN8FatCache4syncEv+0x20>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8088c84:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8088c88:	6901      	ldr	r1, [r0, #16]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8088c8a:	6803      	ldr	r3, [r0, #0]
 8088c8c:	4632      	mov	r2, r6
 8088c8e:	685b      	ldr	r3, [r3, #4]
 8088c90:	4439      	add	r1, r7
 8088c92:	4798      	blx	r3
 8088c94:	2800      	cmp	r0, #0
 8088c96:	d1f0      	bne.n	8088c7a <_ZN8FatCache4syncEv+0x2a>
 8088c98:	e7e9      	b.n	8088c6e <_ZN8FatCache4syncEv+0x1e>
  return true;
 8088c9a:	2501      	movs	r5, #1
 8088c9c:	e7e8      	b.n	8088c70 <_ZN8FatCache4syncEv+0x20>

08088c9e <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088c9e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8088ca0:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088ca2:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8088ca4:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088ca6:	460e      	mov	r6, r1
 8088ca8:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8088caa:	d009      	beq.n	8088cc0 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 8088cac:	f7ff ffd0 	bl	8088c50 <_ZN8FatCache4syncEv>
 8088cb0:	b908      	cbnz	r0, 8088cb6 <_ZN8FatCache4readEmh+0x18>
  return 0;
 8088cb2:	2000      	movs	r0, #0
}
 8088cb4:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 8088cb6:	076b      	lsls	r3, r5, #29
 8088cb8:	d50a      	bpl.n	8088cd0 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 8088cba:	2300      	movs	r3, #0
    m_lbn = lbn;
 8088cbc:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 8088cbe:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 8088cc0:	4620      	mov	r0, r4
 8088cc2:	7822      	ldrb	r2, [r4, #0]
 8088cc4:	f005 0503 	and.w	r5, r5, #3
 8088cc8:	4315      	orrs	r5, r2
 8088cca:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 8088cce:	e7f1      	b.n	8088cb4 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8088cd0:	6860      	ldr	r0, [r4, #4]
 8088cd2:	4631      	mov	r1, r6
 8088cd4:	6803      	ldr	r3, [r0, #0]
 8088cd6:	f104 020c 	add.w	r2, r4, #12
 8088cda:	681b      	ldr	r3, [r3, #0]
 8088cdc:	4798      	blx	r3
 8088cde:	2800      	cmp	r0, #0
 8088ce0:	d1eb      	bne.n	8088cba <_ZN8FatCache4readEmh+0x1c>
 8088ce2:	e7e6      	b.n	8088cb2 <_ZN8FatCache4readEmh+0x14>

08088ce4 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8088ce4:	7983      	ldrb	r3, [r0, #6]
 8088ce6:	3902      	subs	r1, #2
 8088ce8:	6940      	ldr	r0, [r0, #20]
 8088cea:	4099      	lsls	r1, r3
}
 8088cec:	4408      	add	r0, r1
 8088cee:	4770      	bx	lr

08088cf0 <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088cf0:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088cf2:	79c3      	ldrb	r3, [r0, #7]
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088cf4:	4605      	mov	r5, r0
  if (m_fatType == 32) {
 8088cf6:	2b20      	cmp	r3, #32
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088cf8:	460c      	mov	r4, r1
 8088cfa:	4616      	mov	r6, r2
  if (m_fatType == 32) {
 8088cfc:	d118      	bne.n	8088d30 <_ZN9FatVolume6fatGetEmPm+0x40>
    lba = m_fatStartBlock + (cluster >> 7);
 8088cfe:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 8088d00:	2202      	movs	r2, #2
 8088d02:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8088d06:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088d0a:	f7ff ffc8 	bl	8088c9e <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8088d0e:	b910      	cbnz	r0, 8088d16 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8088d10:	f04f 30ff 	mov.w	r0, #4294967295
}
 8088d14:	bd70      	pop	{r4, r5, r6, pc}
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8088d16:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8088d1a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8088d1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
 8088d22:	69ea      	ldr	r2, [r5, #28]
 8088d24:	4293      	cmp	r3, r2
  return 1;
 8088d26:	bf96      	itet	ls
 8088d28:	2001      	movls	r0, #1
    return 0;
 8088d2a:	2000      	movhi	r0, #0
  *value = next;
 8088d2c:	6033      	strls	r3, [r6, #0]
  return 1;
 8088d2e:	e7f1      	b.n	8088d14 <_ZN9FatVolume6fatGetEmPm+0x24>
  if (m_fatType == 16) {
 8088d30:	2b10      	cmp	r3, #16
 8088d32:	d1ed      	bne.n	8088d10 <_ZN9FatVolume6fatGetEmPm+0x20>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8088d34:	6983      	ldr	r3, [r0, #24]
 8088d36:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8088d3a:	2202      	movs	r2, #2
 8088d3c:	4419      	add	r1, r3
 8088d3e:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088d42:	f7ff ffac 	bl	8088c9e <_ZN8FatCache4readEmh>
    if (!pc) {
 8088d46:	2800      	cmp	r0, #0
 8088d48:	d0e2      	beq.n	8088d10 <_ZN9FatVolume6fatGetEmPm+0x20>
    next = pc->fat16[cluster & 0XFF];
 8088d4a:	b2e4      	uxtb	r4, r4
 8088d4c:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
 8088d50:	e7e7      	b.n	8088d22 <_ZN9FatVolume6fatGetEmPm+0x32>

08088d52 <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088d52:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8088d54:	79c3      	ldrb	r3, [r0, #7]
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088d56:	460c      	mov	r4, r1
  if (m_fatType == 32) {
 8088d58:	2b20      	cmp	r3, #32
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088d5a:	4615      	mov	r5, r2
  if (m_fatType == 32) {
 8088d5c:	d110      	bne.n	8088d80 <_ZN9FatVolume6fatPutEmm+0x2e>
    lba = m_fatStartBlock + (cluster >> 7);
 8088d5e:	6981      	ldr	r1, [r0, #24]
 8088d60:	2203      	movs	r2, #3
 8088d62:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8088d66:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088d6a:	f7ff ff98 	bl	8088c9e <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8088d6e:	b908      	cbnz	r0, 8088d74 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8088d70:	2000      	movs	r0, #0
}
 8088d72:	bd38      	pop	{r3, r4, r5, pc}
    pc->fat32[cluster & 0X7F] = value;
 8088d74:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8088d78:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
 8088d7c:	2001      	movs	r0, #1
 8088d7e:	e7f8      	b.n	8088d72 <_ZN9FatVolume6fatPutEmm+0x20>
  if (m_fatType == 16) {
 8088d80:	2b10      	cmp	r3, #16
 8088d82:	d1f5      	bne.n	8088d70 <_ZN9FatVolume6fatPutEmm+0x1e>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8088d84:	6983      	ldr	r3, [r0, #24]
 8088d86:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8088d8a:	2203      	movs	r2, #3
 8088d8c:	4419      	add	r1, r3
 8088d8e:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8088d92:	f7ff ff84 	bl	8088c9e <_ZN8FatCache4readEmh>
    if (!pc) {
 8088d96:	2800      	cmp	r0, #0
 8088d98:	d0ea      	beq.n	8088d70 <_ZN9FatVolume6fatPutEmm+0x1e>
    pc->fat16[cluster & 0XFF] = value;
 8088d9a:	b2e4      	uxtb	r4, r4
 8088d9c:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 8088da0:	e7ec      	b.n	8088d7c <_ZN9FatVolume6fatPutEmm+0x2a>

08088da2 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8088da2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8088da6:	4605      	mov	r5, r0
 8088da8:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8088daa:	460f      	mov	r7, r1
 8088dac:	b9b9      	cbnz	r1, 8088dde <_ZN9FatVolume15allocateClusterEmPm+0x3c>
 8088dae:	68c6      	ldr	r6, [r0, #12]
 8088db0:	4634      	mov	r4, r6
    if (find > m_lastCluster) {
 8088db2:	69eb      	ldr	r3, [r5, #28]
    find++;
 8088db4:	3401      	adds	r4, #1
      find = 2;
 8088db6:	42a3      	cmp	r3, r4
 8088db8:	bf38      	it	cc
 8088dba:	2402      	movcc	r4, #2
    int8_t fg = fatGet(find, &f);
 8088dbc:	4628      	mov	r0, r5
 8088dbe:	4621      	mov	r1, r4
 8088dc0:	aa01      	add	r2, sp, #4
 8088dc2:	f7ff ff95 	bl	8088cf0 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8088dc6:	2800      	cmp	r0, #0
 8088dc8:	db04      	blt.n	8088dd4 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (fg && f == 0) {
 8088dca:	d001      	beq.n	8088dd0 <_ZN9FatVolume15allocateClusterEmPm+0x2e>
 8088dcc:	9b01      	ldr	r3, [sp, #4]
 8088dce:	b143      	cbz	r3, 8088de2 <_ZN9FatVolume15allocateClusterEmPm+0x40>
    if (find == start) {
 8088dd0:	42b4      	cmp	r4, r6
 8088dd2:	d1ee      	bne.n	8088db2 <_ZN9FatVolume15allocateClusterEmPm+0x10>
  return false;
 8088dd4:	2600      	movs	r6, #0
}
 8088dd6:	4630      	mov	r0, r6
 8088dd8:	b002      	add	sp, #8
 8088dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8088dde:	460e      	mov	r6, r1
 8088de0:	e7e6      	b.n	8088db0 <_ZN9FatVolume15allocateClusterEmPm+0xe>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8088de2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8088de6:	4621      	mov	r1, r4
 8088de8:	4628      	mov	r0, r5
 8088dea:	f7ff ffb2 	bl	8088d52 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
 8088dee:	4606      	mov	r6, r0
 8088df0:	2800      	cmp	r0, #0
 8088df2:	d0ef      	beq.n	8088dd4 <_ZN9FatVolume15allocateClusterEmPm+0x32>
  if (current) {
 8088df4:	b17f      	cbz	r7, 8088e16 <_ZN9FatVolume15allocateClusterEmPm+0x74>
    if (!fatPut(current, find)) {
 8088df6:	4622      	mov	r2, r4
 8088df8:	4639      	mov	r1, r7
 8088dfa:	4628      	mov	r0, r5
 8088dfc:	f7ff ffa9 	bl	8088d52 <_ZN9FatVolume6fatPutEmm>
 8088e00:	2800      	cmp	r0, #0
 8088e02:	d0e7      	beq.n	8088dd4 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (m_freeClusterCount >= 0) {
 8088e04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8088e06:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8088e08:	bfa4      	itt	ge
 8088e0a:	f103 33ff 	addge.w	r3, r3, #4294967295
 8088e0e:	626b      	strge	r3, [r5, #36]	; 0x24
  *next = find;
 8088e10:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8088e14:	e7df      	b.n	8088dd6 <_ZN9FatVolume15allocateClusterEmPm+0x34>
    m_allocSearchStart = find;
 8088e16:	60ec      	str	r4, [r5, #12]
 8088e18:	e7f4      	b.n	8088e04 <_ZN9FatVolume15allocateClusterEmPm+0x62>

08088e1a <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8088e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8088e1c:	4604      	mov	r4, r0
 8088e1e:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8088e20:	4629      	mov	r1, r5
 8088e22:	4620      	mov	r0, r4
 8088e24:	aa01      	add	r2, sp, #4
 8088e26:	f7ff ff63 	bl	8088cf0 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8088e2a:	1e06      	subs	r6, r0, #0
 8088e2c:	db13      	blt.n	8088e56 <_ZN9FatVolume9freeChainEm+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8088e2e:	2200      	movs	r2, #0
 8088e30:	4629      	mov	r1, r5
 8088e32:	4620      	mov	r0, r4
 8088e34:	f7ff ff8d 	bl	8088d52 <_ZN9FatVolume6fatPutEmm>
 8088e38:	b168      	cbz	r0, 8088e56 <_ZN9FatVolume9freeChainEm+0x3c>
    if (m_freeClusterCount >= 0) {
 8088e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8088e3c:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8088e3e:	bfa4      	itt	ge
 8088e40:	3301      	addge	r3, #1
 8088e42:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8088e44:	68e3      	ldr	r3, [r4, #12]
 8088e46:	42ab      	cmp	r3, r5
      m_allocSearchStart = cluster;
 8088e48:	bf88      	it	hi
 8088e4a:	60e5      	strhi	r5, [r4, #12]
    }
    cluster = next;
 8088e4c:	9d01      	ldr	r5, [sp, #4]
  } while (fg);
 8088e4e:	2e00      	cmp	r6, #0
 8088e50:	d1e6      	bne.n	8088e20 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8088e52:	b002      	add	sp, #8
 8088e54:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8088e56:	2000      	movs	r0, #0
 8088e58:	e7fb      	b.n	8088e52 <_ZN9FatVolume9freeChainEm+0x38>

08088e5a <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8088e5a:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 8088e5c:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 8088e5e:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8088e60:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 8088e62:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
 8088e66:	4604      	mov	r4, r0
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8088e68:	460d      	mov	r5, r1
  m_fatType = 0;
 8088e6a:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 8088e6c:	f100 0628 	add.w	r6, r0, #40	; 0x28
    m_vol = vol;
 8088e70:	62c0      	str	r0, [r0, #44]	; 0x2c
    m_status = 0;
 8088e72:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8088e76:	6303      	str	r3, [r0, #48]	; 0x30
    m_vol = vol;
 8088e78:	f8c0 0238 	str.w	r0, [r0, #568]	; 0x238
    m_status = 0;
 8088e7c:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8088e80:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  if (part) {
 8088e84:	b1b9      	cbz	r1, 8088eb6 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 8088e86:	2904      	cmp	r1, #4
 8088e88:	d901      	bls.n	8088e8e <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8088e8a:	2000      	movs	r0, #0
}
 8088e8c:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 8088e8e:	4611      	mov	r1, r2
 8088e90:	4630      	mov	r0, r6
 8088e92:	f7ff ff04 	bl	8088c9e <_ZN8FatCache4readEmh>
    if (!pc) {
 8088e96:	2800      	cmp	r0, #0
 8088e98:	d0f7      	beq.n	8088e8a <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8088e9a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8088e9e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8088ea2:	065b      	lsls	r3, r3, #25
 8088ea4:	d1f1      	bne.n	8088e8a <_ZN9FatVolume4initEh+0x30>
 8088ea6:	f105 011b 	add.w	r1, r5, #27
 8088eaa:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8088eae:	f8d1 5006 	ldr.w	r5, [r1, #6]
 8088eb2:	2d00      	cmp	r5, #0
 8088eb4:	d0e9      	beq.n	8088e8a <_ZN9FatVolume4initEh+0x30>
 8088eb6:	2200      	movs	r2, #0
 8088eb8:	4629      	mov	r1, r5
 8088eba:	4630      	mov	r0, r6
 8088ebc:	f7ff feef 	bl	8088c9e <_ZN8FatCache4readEmh>
  if (!pc) {
 8088ec0:	2800      	cmp	r0, #0
 8088ec2:	d0e2      	beq.n	8088e8a <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 8088ec4:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8088ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8088ecc:	d1dd      	bne.n	8088e8a <_ZN9FatVolume4initEh+0x30>
 8088ece:	7c03      	ldrb	r3, [r0, #16]
 8088ed0:	2b02      	cmp	r3, #2
 8088ed2:	d1da      	bne.n	8088e8a <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 8088ed4:	89c3      	ldrh	r3, [r0, #14]
 8088ed6:	2b00      	cmp	r3, #0
 8088ed8:	d0d7      	beq.n	8088e8a <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088eda:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 8088edc:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8088ede:	1e4b      	subs	r3, r1, #1
 8088ee0:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 8088ee2:	2300      	movs	r3, #0
 8088ee4:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088ee6:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8088ee8:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088eea:	4299      	cmp	r1, r3
 8088eec:	d007      	beq.n	8088efe <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 8088eee:	3e01      	subs	r6, #1
 8088ef0:	d0cb      	beq.n	8088e8a <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8088ef2:	79a2      	ldrb	r2, [r4, #6]
 8088ef4:	005b      	lsls	r3, r3, #1
 8088ef6:	3201      	adds	r2, #1
 8088ef8:	b2db      	uxtb	r3, r3
 8088efa:	71a2      	strb	r2, [r4, #6]
 8088efc:	e7f5      	b.n	8088eea <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8088efe:	8ac1      	ldrh	r1, [r0, #22]
 8088f00:	b901      	cbnz	r1, 8088f04 <_ZN9FatVolume4initEh+0xaa>
 8088f02:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8088f04:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8088f06:	89c3      	ldrh	r3, [r0, #14]
 8088f08:	442b      	add	r3, r5
 8088f0a:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8088f0c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8088f10:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8088f14:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8088f16:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8088f18:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 8088f1c:	0149      	lsls	r1, r1, #5
 8088f1e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8088f22:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 8088f26:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 8088f28:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 8088f2c:	b902      	cbnz	r2, 8088f30 <_ZN9FatVolume4initEh+0xd6>
 8088f2e:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8088f30:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 8088f32:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8088f34:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 8088f36:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 8088f38:	1c4b      	adds	r3, r1, #1
 8088f3a:	61e3      	str	r3, [r4, #28]
    m_freeClusterCount = value;
 8088f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8088f40:	6263      	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
 8088f42:	f640 73f4 	movw	r3, #4084	; 0xff4
 8088f46:	4299      	cmp	r1, r3
 8088f48:	d802      	bhi.n	8088f50 <_ZN9FatVolume4initEh+0xf6>
    m_fatType = 12;
 8088f4a:	230c      	movs	r3, #12
 8088f4c:	71e3      	strb	r3, [r4, #7]
 8088f4e:	e79c      	b.n	8088e8a <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 8088f50:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8088f54:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 8088f56:	bf89      	itett	hi
 8088f58:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 8088f5a:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 8088f5c:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8088f5e:	2320      	movhi	r3, #32
  return true;
 8088f60:	2001      	movs	r0, #1
    m_fatType = 32;
 8088f62:	71e3      	strb	r3, [r4, #7]
 8088f64:	e792      	b.n	8088e8c <_ZN9FatVolume4initEh+0x32>

08088f66 <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
 8088f66:	f003 b8c5 	b.w	808c0f4 <delay>

08088f6a <_ZL9i2c_writehhPht>:
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088f6c:	4607      	mov	r7, r0
 8088f6e:	4614      	mov	r4, r2
 8088f70:	461d      	mov	r5, r3
 8088f72:	460e      	mov	r6, r1
  Wire.beginTransmission((uint8_t)dev_id);
 8088f74:	f004 fa0a 	bl	808d38c <_Z19__fetch_global_Wirev>
 8088f78:	4639      	mov	r1, r7
 8088f7a:	f003 ffa3 	bl	808cec4 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8088f7e:	f004 fa05 	bl	808d38c <_Z19__fetch_global_Wirev>
 8088f82:	6803      	ldr	r3, [r0, #0]
 8088f84:	4631      	mov	r1, r6
 8088f86:	689b      	ldr	r3, [r3, #8]
 8088f88:	4798      	blx	r3
 8088f8a:	4425      	add	r5, r4
  while (len--) {
 8088f8c:	42ac      	cmp	r4, r5
 8088f8e:	d007      	beq.n	8088fa0 <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
 8088f90:	f004 f9fc 	bl	808d38c <_Z19__fetch_global_Wirev>
 8088f94:	6803      	ldr	r3, [r0, #0]
 8088f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8088f9a:	689b      	ldr	r3, [r3, #8]
 8088f9c:	4798      	blx	r3
  while (len--) {
 8088f9e:	e7f5      	b.n	8088f8c <_ZL9i2c_writehhPht+0x22>
  Wire.endTransmission();
 8088fa0:	f004 f9f4 	bl	808d38c <_Z19__fetch_global_Wirev>
 8088fa4:	f003 ffb1 	bl	808cf0a <_ZN7TwoWire15endTransmissionEv>
}
 8088fa8:	2000      	movs	r0, #0
 8088faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088fac <_ZL8i2c_readhhPht>:
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8088fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088fae:	4606      	mov	r6, r0
 8088fb0:	4615      	mov	r5, r2
 8088fb2:	461c      	mov	r4, r3
 8088fb4:	460f      	mov	r7, r1
  Wire.beginTransmission((uint8_t)dev_id);
 8088fb6:	f004 f9e9 	bl	808d38c <_Z19__fetch_global_Wirev>
 8088fba:	4631      	mov	r1, r6
 8088fbc:	f003 ff82 	bl	808cec4 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8088fc0:	f004 f9e4 	bl	808d38c <_Z19__fetch_global_Wirev>
 8088fc4:	6803      	ldr	r3, [r0, #0]
 8088fc6:	4639      	mov	r1, r7
 8088fc8:	689b      	ldr	r3, [r3, #8]
 8088fca:	4798      	blx	r3
  Wire.endTransmission();
 8088fcc:	f004 f9de 	bl	808d38c <_Z19__fetch_global_Wirev>
 8088fd0:	f003 ff9b 	bl	808cf0a <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
 8088fd4:	f004 f9da 	bl	808d38c <_Z19__fetch_global_Wirev>
 8088fd8:	4631      	mov	r1, r6
 8088fda:	b2e2      	uxtb	r2, r4
 8088fdc:	f003 ff6f 	bl	808cebe <_ZN7TwoWire11requestFromEhj>
 8088fe0:	4284      	cmp	r4, r0
 8088fe2:	d10a      	bne.n	8088ffa <_ZL8i2c_readhhPht+0x4e>
 8088fe4:	442c      	add	r4, r5
  while (len--) {
 8088fe6:	42ac      	cmp	r4, r5
 8088fe8:	d009      	beq.n	8088ffe <_ZL8i2c_readhhPht+0x52>
    *reg_data = (uint8_t)Wire.read();
 8088fea:	f004 f9cf 	bl	808d38c <_Z19__fetch_global_Wirev>
 8088fee:	6803      	ldr	r3, [r0, #0]
 8088ff0:	695b      	ldr	r3, [r3, #20]
 8088ff2:	4798      	blx	r3
 8088ff4:	f805 0b01 	strb.w	r0, [r5], #1
  while (len--) {
 8088ff8:	e7f5      	b.n	8088fe6 <_ZL8i2c_readhhPht+0x3a>
    return 1;
 8088ffa:	2001      	movs	r0, #1
}
 8088ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8088ffe:	2000      	movs	r0, #0
 8089000:	e7fc      	b.n	8088ffc <_ZL8i2c_readhhPht+0x50>
	...

08089004 <_ZN15Adafruit_BME680C1Ea>:
  _BME680_SoftwareSPI_MOSI = -1;
 8089004:	22ff      	movs	r2, #255	; 0xff
  : _cs(cspin)
 8089006:	7701      	strb	r1, [r0, #28]
  _BME680_SoftwareSPI_MOSI = -1;
 8089008:	4904      	ldr	r1, [pc, #16]	; (808901c <_ZN15Adafruit_BME680C1Ea+0x18>)
 808900a:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 808900c:	4904      	ldr	r1, [pc, #16]	; (8089020 <_ZN15Adafruit_BME680C1Ea+0x1c>)
 808900e:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8089010:	4904      	ldr	r1, [pc, #16]	; (8089024 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8089012:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8089014:	2200      	movs	r2, #0
 8089016:	6102      	str	r2, [r0, #16]
 8089018:	7502      	strb	r2, [r0, #20]
}
 808901a:	4770      	bx	lr
 808901c:	20000cf9 	.word	0x20000cf9
 8089020:	20000cf8 	.word	0x20000cf8
 8089024:	20000cfa 	.word	0x20000cfa

08089028 <_ZN15Adafruit_BME68014performReadingEv>:
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8089028:	2301      	movs	r3, #1
bool Adafruit_BME680::performReading(void) {
 808902a:	b530      	push	{r4, r5, lr}
 808902c:	4604      	mov	r4, r0
  gas_sensor.power_mode = BME680_FORCED_MODE;
 808902e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  if (_humEnabled)
 8089032:	7ca3      	ldrb	r3, [r4, #18]
  uint8_t set_required_settings = 0;
 8089034:	7c40      	ldrb	r0, [r0, #17]
bool Adafruit_BME680::performReading(void) {
 8089036:	b087      	sub	sp, #28
  if (_humEnabled)
 8089038:	b10b      	cbz	r3, 808903e <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 808903a:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 808903e:	7ce3      	ldrb	r3, [r4, #19]
 8089040:	b10b      	cbz	r3, 8089046 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 8089042:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8089046:	7c23      	ldrb	r3, [r4, #16]
 8089048:	b10b      	cbz	r3, 808904e <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 808904a:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 808904e:	7d23      	ldrb	r3, [r4, #20]
 8089050:	b10b      	cbz	r3, 8089056 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8089052:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8089056:	f104 0520 	add.w	r5, r4, #32
 808905a:	4629      	mov	r1, r5
 808905c:	f7f7 fa61 	bl	8080522 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8089060:	b118      	cbz	r0, 808906a <_ZN15Adafruit_BME68014performReadingEv+0x42>
    return false;
 8089062:	2500      	movs	r5, #0
}
 8089064:	4628      	mov	r0, r5
 8089066:	b007      	add	sp, #28
 8089068:	bd30      	pop	{r4, r5, pc}
  rslt = bme680_set_sensor_mode(&gas_sensor);
 808906a:	4628      	mov	r0, r5
 808906c:	f7f7 fa1a 	bl	80804a4 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8089070:	2800      	cmp	r0, #0
 8089072:	d1f6      	bne.n	8089062 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8089074:	4629      	mov	r1, r5
 8089076:	f10d 0002 	add.w	r0, sp, #2
 808907a:	f7f7 fbcb 	bl	8080814 <bme680_get_profile_dur>
  delay(meas_period * 2); /* Delay till the measurement is ready */
 808907e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8089082:	0040      	lsls	r0, r0, #1
 8089084:	f003 f836 	bl	808c0f4 <delay>
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8089088:	4629      	mov	r1, r5
 808908a:	a801      	add	r0, sp, #4
 808908c:	f7f7 fbf6 	bl	808087c <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8089090:	2800      	cmp	r0, #0
 8089092:	d1e6      	bne.n	8089062 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  if (_tempEnabled) {
 8089094:	7c63      	ldrb	r3, [r4, #17]
 8089096:	b33b      	cbz	r3, 80890e8 <_ZN15Adafruit_BME68014performReadingEv+0xc0>
    temperature = data.temperature / 100.0;
 8089098:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 808909c:	f004 fb2a 	bl	808d6f4 <__aeabi_i2d>
 80890a0:	2200      	movs	r2, #0
 80890a2:	4b17      	ldr	r3, [pc, #92]	; (8089100 <_ZN15Adafruit_BME68014performReadingEv+0xd8>)
 80890a4:	f004 fcba 	bl	808da1c <__aeabi_ddiv>
 80890a8:	f004 fe86 	bl	808ddb8 <__aeabi_d2f>
  if (_humEnabled) {
 80890ac:	7ca3      	ldrb	r3, [r4, #18]
 80890ae:	6020      	str	r0, [r4, #0]
 80890b0:	b1e3      	cbz	r3, 80890ec <_ZN15Adafruit_BME68014performReadingEv+0xc4>
    humidity = data.humidity / 1000.0;
 80890b2:	9804      	ldr	r0, [sp, #16]
 80890b4:	f004 fb0e 	bl	808d6d4 <__aeabi_ui2d>
 80890b8:	2200      	movs	r2, #0
 80890ba:	4b12      	ldr	r3, [pc, #72]	; (8089104 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 80890bc:	f004 fcae 	bl	808da1c <__aeabi_ddiv>
 80890c0:	f004 fe7a 	bl	808ddb8 <__aeabi_d2f>
  if (_presEnabled) {
 80890c4:	7ce3      	ldrb	r3, [r4, #19]
 80890c6:	60a0      	str	r0, [r4, #8]
 80890c8:	b193      	cbz	r3, 80890f0 <_ZN15Adafruit_BME68014performReadingEv+0xc8>
    pressure = data.pressure;
 80890ca:	9803      	ldr	r0, [sp, #12]
 80890cc:	f004 ff7a 	bl	808dfc4 <__aeabi_ui2f>
  if (_gasEnabled) {
 80890d0:	7d25      	ldrb	r5, [r4, #20]
 80890d2:	6060      	str	r0, [r4, #4]
 80890d4:	b18d      	cbz	r5, 80890fa <_ZN15Adafruit_BME68014performReadingEv+0xd2>
    if (data.status & BME680_HEAT_STAB_MSK) {
 80890d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80890da:	06db      	lsls	r3, r3, #27
 80890dc:	d50a      	bpl.n	80890f4 <_ZN15Adafruit_BME68014performReadingEv+0xcc>
      gas_resistance = data.gas_resistance;
 80890de:	9805      	ldr	r0, [sp, #20]
 80890e0:	f004 ff70 	bl	808dfc4 <__aeabi_ui2f>
 80890e4:	60e0      	str	r0, [r4, #12]
 80890e6:	e7bd      	b.n	8089064 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
    temperature = NAN;
 80890e8:	4807      	ldr	r0, [pc, #28]	; (8089108 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80890ea:	e7df      	b.n	80890ac <_ZN15Adafruit_BME68014performReadingEv+0x84>
    humidity = NAN;
 80890ec:	4806      	ldr	r0, [pc, #24]	; (8089108 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80890ee:	e7e9      	b.n	80890c4 <_ZN15Adafruit_BME68014performReadingEv+0x9c>
    pressure = NAN;
 80890f0:	4805      	ldr	r0, [pc, #20]	; (8089108 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80890f2:	e7ed      	b.n	80890d0 <_ZN15Adafruit_BME68014performReadingEv+0xa8>
      gas_resistance = 0;
 80890f4:	2300      	movs	r3, #0
 80890f6:	60e3      	str	r3, [r4, #12]
 80890f8:	e7b4      	b.n	8089064 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
  return true;
 80890fa:	2501      	movs	r5, #1
 80890fc:	e7b2      	b.n	8089064 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
 80890fe:	bf00      	nop
 8089100:	40590000 	.word	0x40590000
 8089104:	408f4000 	.word	0x408f4000
 8089108:	7fc00000 	.word	0x7fc00000

0808910c <_ZN15Adafruit_BME68012setGasHeaterEtt>:
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 808910c:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 8089110:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
 8089114:	b101      	cbz	r1, 8089118 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
 8089116:	b92a      	cbnz	r2, 8089124 <_ZN15Adafruit_BME68012setGasHeaterEtt+0x18>
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 8089118:	2300      	movs	r3, #0
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 808911a:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
 808911e:	7503      	strb	r3, [r0, #20]
}
 8089120:	2001      	movs	r0, #1
 8089122:	4770      	bx	lr
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8089124:	2301      	movs	r3, #1
 8089126:	e7f8      	b.n	808911a <_ZN15Adafruit_BME68012setGasHeaterEtt+0xe>

08089128 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 8089128:	2905      	cmp	r1, #5
bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 808912a:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 808912c:	d807      	bhi.n	808913e <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>
  gas_sensor.tph_sett.os_temp = oversample;
 808912e:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
  if (oversample == BME680_OS_NONE)
 8089132:	2001      	movs	r0, #1
 8089134:	b909      	cbnz	r1, 808913a <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
 8089136:	7459      	strb	r1, [r3, #17]
 8089138:	4770      	bx	lr
    _tempEnabled = true;
 808913a:	7458      	strb	r0, [r3, #17]
 808913c:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 808913e:	2000      	movs	r0, #0
}
 8089140:	4770      	bx	lr

08089142 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 8089142:	2905      	cmp	r1, #5
bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 8089144:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8089146:	d807      	bhi.n	8089158 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>
  gas_sensor.tph_sett.os_hum = oversample;
 8089148:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
  if (oversample == BME680_OS_NONE)
 808914c:	2001      	movs	r0, #1
 808914e:	b909      	cbnz	r1, 8089154 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
 8089150:	7499      	strb	r1, [r3, #18]
 8089152:	4770      	bx	lr
    _humEnabled = true;
 8089154:	7498      	strb	r0, [r3, #18]
 8089156:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 8089158:	2000      	movs	r0, #0
}
 808915a:	4770      	bx	lr

0808915c <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
  if (oversample > BME680_OS_16X) return false;
 808915c:	2905      	cmp	r1, #5
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 808915e:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8089160:	d807      	bhi.n	8089172 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>
  gas_sensor.tph_sett.os_pres = oversample;
 8089162:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
  if (oversample == BME680_OS_NONE)
 8089166:	2001      	movs	r0, #1
 8089168:	b909      	cbnz	r1, 808916e <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
 808916a:	74d9      	strb	r1, [r3, #19]
 808916c:	4770      	bx	lr
    _presEnabled = true;
 808916e:	74d8      	strb	r0, [r3, #19]
 8089170:	4770      	bx	lr
  if (oversample > BME680_OS_16X) return false;
 8089172:	2000      	movs	r0, #0
}
 8089174:	4770      	bx	lr

08089176 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8089176:	2907      	cmp	r1, #7
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 8089178:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 808917a:	d807      	bhi.n	808918c <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>
  gas_sensor.tph_sett.filter = filtersize;
 808917c:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
  if (filtersize == BME680_FILTER_SIZE_0)
 8089180:	2001      	movs	r0, #1
 8089182:	b909      	cbnz	r1, 8089188 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
 8089184:	7419      	strb	r1, [r3, #16]
 8089186:	4770      	bx	lr
    _filterEnabled = true;
 8089188:	7418      	strb	r0, [r3, #16]
 808918a:	4770      	bx	lr
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 808918c:	2000      	movs	r0, #0
}
 808918e:	4770      	bx	lr

08089190 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 8089190:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 8089192:	4d0c      	ldr	r5, [pc, #48]	; (80891c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 8089194:	7829      	ldrb	r1, [r5, #0]
 8089196:	f3bf 8f5b 	dmb	ish
 808919a:	f011 0401 	ands.w	r4, r1, #1
 808919e:	d10f      	bne.n	80891c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80891a0:	4628      	mov	r0, r5
 80891a2:	f7f6 ff98 	bl	80800d6 <__cxa_guard_acquire>
 80891a6:	b158      	cbz	r0, 80891c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80891a8:	4621      	mov	r1, r4
 80891aa:	4807      	ldr	r0, [pc, #28]	; (80891c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80891ac:	f001 fef7 	bl	808af9e <_ZN8SPIClassC1E19hal_spi_interface_t>
 80891b0:	4628      	mov	r0, r5
 80891b2:	f7f6 ff95 	bl	80800e0 <__cxa_guard_release>
 80891b6:	4a05      	ldr	r2, [pc, #20]	; (80891cc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 80891b8:	4905      	ldr	r1, [pc, #20]	; (80891d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 80891ba:	4803      	ldr	r0, [pc, #12]	; (80891c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80891bc:	f004 f936 	bl	808d42c <__aeabi_atexit>
        return instance;
    }
 80891c0:	4801      	ldr	r0, [pc, #4]	; (80891c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80891c2:	bd38      	pop	{r3, r4, r5, pc}
 80891c4:	20000ccc 	.word	0x20000ccc
 80891c8:	20000cd0 	.word	0x20000cd0
 80891cc:	200002c0 	.word	0x200002c0
 80891d0:	080884e9 	.word	0x080884e9

080891d4 <_ZL12spi_transferh>:
static uint8_t spi_transfer(uint8_t x) {
 80891d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
 80891d8:	4d1b      	ldr	r5, [pc, #108]	; (8089248 <_ZL12spi_transferh+0x74>)
static uint8_t spi_transfer(uint8_t x) {
 80891da:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
 80891dc:	f995 3000 	ldrsb.w	r3, [r5]
 80891e0:	3301      	adds	r3, #1
 80891e2:	d106      	bne.n	80891f2 <_ZL12spi_transferh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80891e4:	f7ff ffd4 	bl	8089190 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80891e8:	4641      	mov	r1, r8
}
 80891ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80891ee:	f001 bf83 	b.w	808b0f8 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
 80891f2:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
 80891f4:	2607      	movs	r6, #7
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 80891f6:	f8df 9054 	ldr.w	r9, [pc, #84]	; 808924c <_ZL12spi_transferh+0x78>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 80891fa:	f8df a054 	ldr.w	sl, [pc, #84]	; 8089250 <_ZL12spi_transferh+0x7c>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 80891fe:	2701      	movs	r7, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
 8089200:	f995 0000 	ldrsb.w	r0, [r5]
 8089204:	2100      	movs	r1, #0
 8089206:	b280      	uxth	r0, r0
 8089208:	f004 f82b 	bl	808d262 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 808920c:	f999 0000 	ldrsb.w	r0, [r9]
 8089210:	fa07 f106 	lsl.w	r1, r7, r6
 8089214:	ea01 0108 	and.w	r1, r1, r8
 8089218:	b280      	uxth	r0, r0
 808921a:	f004 f822 	bl	808d262 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
 808921e:	f995 0000 	ldrsb.w	r0, [r5]
 8089222:	4639      	mov	r1, r7
 8089224:	b280      	uxth	r0, r0
 8089226:	f004 f81c 	bl	808d262 <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 808922a:	f99a 0000 	ldrsb.w	r0, [sl]
    reply <<= 1;
 808922e:	0064      	lsls	r4, r4, #1
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8089230:	b280      	uxth	r0, r0
    reply <<= 1;
 8089232:	b2e4      	uxtb	r4, r4
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8089234:	f004 f82e 	bl	808d294 <digitalRead>
 8089238:	b100      	cbz	r0, 808923c <_ZL12spi_transferh+0x68>
      reply |= 1;
 808923a:	433c      	orrs	r4, r7
  for (int i=7; i>=0; i--) {
 808923c:	3e01      	subs	r6, #1
 808923e:	d2de      	bcs.n	80891fe <_ZL12spi_transferh+0x2a>
}
 8089240:	4620      	mov	r0, r4
 8089242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089246:	bf00      	nop
 8089248:	20000cfa 	.word	0x20000cfa
 808924c:	20000cf9 	.word	0x20000cf9
 8089250:	20000cf8 	.word	0x20000cf8

08089254 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>:
    void begin() {
 8089254:	b508      	push	{r3, lr}
        instance().begin();
 8089256:	f7ff ff9b 	bl	8089190 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
 808925a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().begin();
 808925e:	f001 bead 	b.w	808afbc <_ZN8SPIClass5beginEv>
	...

08089264 <_ZN15Adafruit_BME6805beginEh>:
bool Adafruit_BME680::begin(uint8_t addr) {
 8089264:	b538      	push	{r3, r4, r5, lr}
 8089266:	4604      	mov	r4, r0
  _i2caddr = addr;
 8089268:	7541      	strb	r1, [r0, #21]
  if (_cs == -1) {
 808926a:	f990 001c 	ldrsb.w	r0, [r0, #28]
bool Adafruit_BME680::begin(uint8_t addr) {
 808926e:	460d      	mov	r5, r1
  if (_cs == -1) {
 8089270:	1c42      	adds	r2, r0, #1
 8089272:	d122      	bne.n	80892ba <_ZN15Adafruit_BME6805beginEh+0x56>
    Wire.begin();
 8089274:	f004 f88a 	bl	808d38c <_Z19__fetch_global_Wirev>
 8089278:	f003 fdf2 	bl	808ce60 <_ZN7TwoWire5beginEv>
    gas_sensor.intf = BME680_I2C_INTF;
 808927c:	2301      	movs	r3, #1
 808927e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
 8089282:	4b26      	ldr	r3, [pc, #152]	; (808931c <_ZN15Adafruit_BME6805beginEh+0xb8>)
    gas_sensor.dev_id = addr;
 8089284:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.read = &i2c_read;
 8089288:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
 808928a:	4b25      	ldr	r3, [pc, #148]	; (8089320 <_ZN15Adafruit_BME6805beginEh+0xbc>)
    gas_sensor.write = &spi_write;
 808928c:	66e3      	str	r3, [r4, #108]	; 0x6c
  gas_sensor.delay_ms = delay_msec;
 808928e:	4b25      	ldr	r3, [pc, #148]	; (8089324 <_ZN15Adafruit_BME6805beginEh+0xc0>)
  rslt = bme680_init(&gas_sensor);
 8089290:	f104 0020 	add.w	r0, r4, #32
  gas_sensor.delay_ms = delay_msec;
 8089294:	6723      	str	r3, [r4, #112]	; 0x70
  rslt = bme680_init(&gas_sensor);
 8089296:	f7f7 f82d 	bl	80802f4 <bme680_init>
  if (rslt != BME680_OK)
 808929a:	2800      	cmp	r0, #0
 808929c:	d13b      	bne.n	8089316 <_ZN15Adafruit_BME6805beginEh+0xb2>
  gas_sensor.tph_sett.os_hum = oversample;
 808929e:	4b22      	ldr	r3, [pc, #136]	; (8089328 <_ZN15Adafruit_BME6805beginEh+0xc4>)
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80892a0:	2001      	movs	r0, #1
  gas_sensor.tph_sett.os_hum = oversample;
 80892a2:	65a3      	str	r3, [r4, #88]	; 0x58
    _filterEnabled = true;
 80892a4:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 80892a8:	6123      	str	r3, [r4, #16]
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80892aa:	4b20      	ldr	r3, [pc, #128]	; (808932c <_ZN15Adafruit_BME6805beginEh+0xc8>)
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80892ac:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
 80892b0:	7520      	strb	r0, [r4, #20]
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80892b2:	6623      	str	r3, [r4, #96]	; 0x60
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80892b4:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
}
 80892b8:	bd38      	pop	{r3, r4, r5, pc}
    digitalWrite(_cs, HIGH);
 80892ba:	2101      	movs	r1, #1
 80892bc:	b280      	uxth	r0, r0
 80892be:	f003 ffd0 	bl	808d262 <digitalWrite>
    pinMode(_cs, OUTPUT);
 80892c2:	f994 001c 	ldrsb.w	r0, [r4, #28]
 80892c6:	2101      	movs	r1, #1
 80892c8:	b280      	uxth	r0, r0
 80892ca:	f003 ffb9 	bl	808d240 <pinMode>
    if (_BME680_SoftwareSPI_SCK == -1) {
 80892ce:	4b18      	ldr	r3, [pc, #96]	; (8089330 <_ZN15Adafruit_BME6805beginEh+0xcc>)
 80892d0:	f993 0000 	ldrsb.w	r0, [r3]
 80892d4:	1c43      	adds	r3, r0, #1
 80892d6:	d10b      	bne.n	80892f0 <_ZN15Adafruit_BME6805beginEh+0x8c>
      SPI.begin();
 80892d8:	f7ff ffbc 	bl	8089254 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
    gas_sensor.dev_id = _cs;
 80892dc:	7f23      	ldrb	r3, [r4, #28]
 80892de:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
 80892e2:	2300      	movs	r3, #0
 80892e4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
 80892e8:	4b12      	ldr	r3, [pc, #72]	; (8089334 <_ZN15Adafruit_BME6805beginEh+0xd0>)
 80892ea:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
 80892ec:	4b12      	ldr	r3, [pc, #72]	; (8089338 <_ZN15Adafruit_BME6805beginEh+0xd4>)
 80892ee:	e7cd      	b.n	808928c <_ZN15Adafruit_BME6805beginEh+0x28>
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
 80892f0:	2101      	movs	r1, #1
 80892f2:	b280      	uxth	r0, r0
 80892f4:	f003 ffa4 	bl	808d240 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
 80892f8:	4b10      	ldr	r3, [pc, #64]	; (808933c <_ZN15Adafruit_BME6805beginEh+0xd8>)
 80892fa:	2101      	movs	r1, #1
 80892fc:	f993 0000 	ldrsb.w	r0, [r3]
 8089300:	b280      	uxth	r0, r0
 8089302:	f003 ff9d 	bl	808d240 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
 8089306:	4b0e      	ldr	r3, [pc, #56]	; (8089340 <_ZN15Adafruit_BME6805beginEh+0xdc>)
 8089308:	2100      	movs	r1, #0
 808930a:	f993 0000 	ldrsb.w	r0, [r3]
 808930e:	b280      	uxth	r0, r0
 8089310:	f003 ff96 	bl	808d240 <pinMode>
 8089314:	e7e2      	b.n	80892dc <_ZN15Adafruit_BME6805beginEh+0x78>
    return false;
 8089316:	2000      	movs	r0, #0
 8089318:	e7ce      	b.n	80892b8 <_ZN15Adafruit_BME6805beginEh+0x54>
 808931a:	bf00      	nop
 808931c:	08088fad 	.word	0x08088fad
 8089320:	08088f6b 	.word	0x08088f6b
 8089324:	08088f67 	.word	0x08088f67
 8089328:	02030402 	.word	0x02030402
 808932c:	00960140 	.word	0x00960140
 8089330:	20000cfa 	.word	0x20000cfa
 8089334:	08089345 	.word	0x08089345
 8089338:	080893a9 	.word	0x080893a9
 808933c:	20000cf9 	.word	0x20000cf9
 8089340:	20000cf8 	.word	0x20000cf8

08089344 <_ZL8spi_readhhPht>:
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8089344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089346:	460f      	mov	r7, r1
  digitalWrite(cspin, LOW);
 8089348:	2100      	movs	r1, #0
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 808934a:	461d      	mov	r5, r3
 808934c:	4614      	mov	r4, r2
  digitalWrite(cspin, LOW);
 808934e:	4606      	mov	r6, r0
 8089350:	f003 ff87 	bl	808d262 <digitalWrite>
  if (_BME680_SoftwareSPI_SCK == -1) {
 8089354:	4b13      	ldr	r3, [pc, #76]	; (80893a4 <_ZL8spi_readhhPht+0x60>)
 8089356:	f993 3000 	ldrsb.w	r3, [r3]
 808935a:	3301      	adds	r3, #1
 808935c:	d110      	bne.n	8089380 <_ZL8spi_readhhPht+0x3c>
    SPI.begin();
 808935e:	f7ff ff79 	bl	8089254 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
        instance().setClockDivider(divider);
 8089362:	f7ff ff15 	bl	8089190 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8089366:	2140      	movs	r1, #64	; 0x40
 8089368:	f001 fea2 	bl	808b0b0 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
 808936c:	f7ff ff10 	bl	8089190 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 8089370:	2101      	movs	r1, #1
 8089372:	f001 fe3f 	bl	808aff4 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
 8089376:	f7ff ff0b 	bl	8089190 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 808937a:	2100      	movs	r1, #0
 808937c:	f001 fe48 	bl	808b010 <_ZN8SPIClass11setDataModeEh>
  spi_transfer(reg_addr);
 8089380:	4638      	mov	r0, r7
 8089382:	f7ff ff27 	bl	80891d4 <_ZL12spi_transferh>
 8089386:	4425      	add	r5, r4
  while (len--) {
 8089388:	42ac      	cmp	r4, r5
 808938a:	d005      	beq.n	8089398 <_ZL8spi_readhhPht+0x54>
    *reg_data = spi_transfer(0x00);
 808938c:	2000      	movs	r0, #0
 808938e:	f7ff ff21 	bl	80891d4 <_ZL12spi_transferh>
 8089392:	f804 0b01 	strb.w	r0, [r4], #1
  while (len--) {
 8089396:	e7f7      	b.n	8089388 <_ZL8spi_readhhPht+0x44>
  digitalWrite(cspin, HIGH);
 8089398:	4630      	mov	r0, r6
 808939a:	2101      	movs	r1, #1
 808939c:	f003 ff61 	bl	808d262 <digitalWrite>
}
 80893a0:	2000      	movs	r0, #0
 80893a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80893a4:	20000cfa 	.word	0x20000cfa

080893a8 <_ZL9spi_writehhPht>:
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80893a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80893aa:	460f      	mov	r7, r1
  digitalWrite(cspin, LOW);
 80893ac:	2100      	movs	r1, #0
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80893ae:	461d      	mov	r5, r3
 80893b0:	4614      	mov	r4, r2
  digitalWrite(cspin, LOW);
 80893b2:	4606      	mov	r6, r0
 80893b4:	f003 ff55 	bl	808d262 <digitalWrite>
  if (_BME680_SoftwareSPI_SCK == -1) {
 80893b8:	4b13      	ldr	r3, [pc, #76]	; (8089408 <_ZL9spi_writehhPht+0x60>)
 80893ba:	f993 3000 	ldrsb.w	r3, [r3]
 80893be:	3301      	adds	r3, #1
 80893c0:	d110      	bne.n	80893e4 <_ZL9spi_writehhPht+0x3c>
    SPI.begin();
 80893c2:	f7ff ff47 	bl	8089254 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE5beginEv.isra.0>
        instance().setClockDivider(divider);
 80893c6:	f7ff fee3 	bl	8089190 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80893ca:	2140      	movs	r1, #64	; 0x40
 80893cc:	f001 fe70 	bl	808b0b0 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
 80893d0:	f7ff fede 	bl	8089190 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80893d4:	2101      	movs	r1, #1
 80893d6:	f001 fe0d 	bl	808aff4 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
 80893da:	f7ff fed9 	bl	8089190 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80893de:	2100      	movs	r1, #0
 80893e0:	f001 fe16 	bl	808b010 <_ZN8SPIClass11setDataModeEh>
  spi_transfer(reg_addr);
 80893e4:	4638      	mov	r0, r7
 80893e6:	f7ff fef5 	bl	80891d4 <_ZL12spi_transferh>
 80893ea:	4425      	add	r5, r4
  while (len--) {
 80893ec:	42ac      	cmp	r4, r5
 80893ee:	d004      	beq.n	80893fa <_ZL9spi_writehhPht+0x52>
    spi_transfer(*reg_data);
 80893f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80893f4:	f7ff feee 	bl	80891d4 <_ZL12spi_transferh>
  while (len--) {
 80893f8:	e7f8      	b.n	80893ec <_ZL9spi_writehhPht+0x44>
  digitalWrite(cspin, HIGH);
 80893fa:	4630      	mov	r0, r6
 80893fc:	2101      	movs	r1, #1
 80893fe:	f003 ff30 	bl	808d262 <digitalWrite>
}
 8089402:	2000      	movs	r0, #0
 8089404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8089406:	bf00      	nop
 8089408:	20000cfa 	.word	0x20000cfa

0808940c <_ZN7HIH61XX5startEv>:

uint8_t HIH61XX::start() {
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
 808940c:	7983      	ldrb	r3, [r0, #6]
 808940e:	f063 037f 	orn	r3, r3, #127	; 0x7f

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8089412:	f023 030f 	bic.w	r3, r3, #15
 8089416:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 8089418:	2000      	movs	r0, #0
 808941a:	4770      	bx	lr

0808941c <_ZN7HIH61XX4stopEv>:

uint8_t HIH61XX::stop() {
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
 808941c:	7983      	ldrb	r3, [r0, #6]
 808941e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8089422:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 8089424:	2000      	movs	r0, #0
 8089426:	4770      	bx	lr

08089428 <_ZN7HIH61XXC1Eh>:
HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 8089428:	4a03      	ldr	r2, [pc, #12]	; (8089438 <_ZN7HIH61XXC1Eh+0x10>)
 808942a:	7101      	strb	r1, [r0, #4]
 808942c:	6002      	str	r2, [r0, #0]
 808942e:	2200      	movs	r2, #0
 8089430:	7182      	strb	r2, [r0, #6]
 8089432:	6082      	str	r2, [r0, #8]
}
 8089434:	4770      	bx	lr
 8089436:	bf00      	nop
 8089438:	080929ec 	.word	0x080929ec

0808943c <_ZN7HIH61XX6updateEv>:

uint8_t HIH61XX::update() {
 808943c:	b570      	push	{r4, r5, r6, lr}
            return f & RunningFlag;
 808943e:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8089442:	4604      	mov	r4, r0
    if (!isRunning()) {
 8089444:	2b00      	cmp	r3, #0
 8089446:	db07      	blt.n	8089458 <_ZN7HIH61XX6updateEv+0x1c>
        return setError(NotRunningError);
 8089448:	2603      	movs	r6, #3
            f = (f & ~ErrorMask) | error;
 808944a:	f023 030f 	bic.w	r3, r3, #15
 808944e:	f043 0303 	orr.w	r3, r3, #3
 8089452:	7183      	strb	r3, [r0, #6]
    } else {
        Serial.print("...");
        Serial.println(azer);
        return setError(ConnectionError);
    }
}
 8089454:	4630      	mov	r0, r6
 8089456:	bd70      	pop	{r4, r5, r6, pc}
    Wire.beginTransmission(a);
 8089458:	f003 ff98 	bl	808d38c <_Z19__fetch_global_Wirev>
 808945c:	7921      	ldrb	r1, [r4, #4]
 808945e:	f003 fd31 	bl	808cec4 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 8089462:	f003 ff93 	bl	808d38c <_Z19__fetch_global_Wirev>
 8089466:	f003 fd50 	bl	808cf0a <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 808946a:	4606      	mov	r6, r0
 808946c:	2800      	cmp	r0, #0
 808946e:	d15b      	bne.n	8089528 <_ZN7HIH61XX6updateEv+0xec>
            delay(10);
 8089470:	200a      	movs	r0, #10
 8089472:	f002 fe3f 	bl	808c0f4 <delay>
            Wire.requestFrom(a, (uint8_t) 4);
 8089476:	f003 ff89 	bl	808d38c <_Z19__fetch_global_Wirev>
 808947a:	2204      	movs	r2, #4
 808947c:	7921      	ldrb	r1, [r4, #4]
 808947e:	f003 fd1e 	bl	808cebe <_ZN7TwoWire11requestFromEhj>
            if (Wire.available()) {
 8089482:	f003 ff83 	bl	808d38c <_Z19__fetch_global_Wirev>
 8089486:	6803      	ldr	r3, [r0, #0]
 8089488:	691b      	ldr	r3, [r3, #16]
 808948a:	4798      	blx	r3
 808948c:	2800      	cmp	r0, #0
 808948e:	d043      	beq.n	8089518 <_ZN7HIH61XX6updateEv+0xdc>
                x = Wire.read();
 8089490:	f003 ff7c 	bl	808d38c <_Z19__fetch_global_Wirev>
 8089494:	6803      	ldr	r3, [r0, #0]
 8089496:	695b      	ldr	r3, [r3, #20]
 8089498:	4798      	blx	r3
 808949a:	4605      	mov	r5, r0
                y = Wire.read();
 808949c:	f003 ff76 	bl	808d38c <_Z19__fetch_global_Wirev>
 80894a0:	6803      	ldr	r3, [r0, #0]
 80894a2:	695b      	ldr	r3, [r3, #20]
 80894a4:	4798      	blx	r3
                s = x >> 6;
 80894a6:	f3c5 1381 	ubfx	r3, r5, #6, #2
                switch (s) {
 80894aa:	2b01      	cmp	r3, #1
 80894ac:	d023      	beq.n	80894f6 <_ZN7HIH61XX6updateEv+0xba>
 80894ae:	2b02      	cmp	r3, #2
 80894b0:	d026      	beq.n	8089500 <_ZN7HIH61XX6updateEv+0xc4>
 80894b2:	2b00      	cmp	r3, #0
 80894b4:	d1dc      	bne.n	8089470 <_ZN7HIH61XX6updateEv+0x34>
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 80894b6:	022d      	lsls	r5, r5, #8
 80894b8:	b2c0      	uxtb	r0, r0
 80894ba:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
 80894be:	4305      	orrs	r5, r0
 80894c0:	8125      	strh	r5, [r4, #8]
                        x = Wire.read();
 80894c2:	f003 ff63 	bl	808d38c <_Z19__fetch_global_Wirev>
 80894c6:	6803      	ldr	r3, [r0, #0]
 80894c8:	695b      	ldr	r3, [r3, #20]
 80894ca:	4798      	blx	r3
 80894cc:	4605      	mov	r5, r0
                        y = Wire.read();
 80894ce:	f003 ff5d 	bl	808d38c <_Z19__fetch_global_Wirev>
 80894d2:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 80894d4:	022d      	lsls	r5, r5, #8
                        y = Wire.read();
 80894d6:	695b      	ldr	r3, [r3, #20]
 80894d8:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 80894da:	b2ad      	uxth	r5, r5
 80894dc:	b2c0      	uxtb	r0, r0
 80894de:	4305      	orrs	r5, r0
 80894e0:	10ad      	asrs	r5, r5, #2
 80894e2:	8165      	strh	r5, [r4, #10]
                        Wire.endTransmission();
 80894e4:	f003 ff52 	bl	808d38c <_Z19__fetch_global_Wirev>
 80894e8:	f003 fd0f 	bl	808cf0a <_ZN7TwoWire15endTransmissionEv>
 80894ec:	79a3      	ldrb	r3, [r4, #6]
 80894ee:	f023 030f 	bic.w	r3, r3, #15
 80894f2:	71a3      	strb	r3, [r4, #6]
                        return setError(0);
 80894f4:	e7ae      	b.n	8089454 <_ZN7HIH61XX6updateEv+0x18>
                        Wire.endTransmission();
 80894f6:	f003 ff49 	bl	808d38c <_Z19__fetch_global_Wirev>
 80894fa:	f003 fd06 	bl	808cf0a <_ZN7TwoWire15endTransmissionEv>
                        break;
 80894fe:	e7b7      	b.n	8089470 <_ZN7HIH61XX6updateEv+0x34>
                        Wire.endTransmission();
 8089500:	f003 ff44 	bl	808d38c <_Z19__fetch_global_Wirev>
 8089504:	f003 fd01 	bl	808cf0a <_ZN7TwoWire15endTransmissionEv>
 8089508:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 808950a:	2604      	movs	r6, #4
 808950c:	f023 030f 	bic.w	r3, r3, #15
 8089510:	f043 0304 	orr.w	r3, r3, #4
 8089514:	71a3      	strb	r3, [r4, #6]
 8089516:	e79d      	b.n	8089454 <_ZN7HIH61XX6updateEv+0x18>
 8089518:	79a3      	ldrb	r3, [r4, #6]
                return setError(CommunicationError);
 808951a:	2602      	movs	r6, #2
 808951c:	f023 030f 	bic.w	r3, r3, #15
 8089520:	f043 0302 	orr.w	r3, r3, #2
 8089524:	71a3      	strb	r3, [r4, #6]
 8089526:	e795      	b.n	8089454 <_ZN7HIH61XX6updateEv+0x18>
        Serial.print("...");
 8089528:	f003 fad6 	bl	808cad8 <_Z16_fetch_usbserialv>
 808952c:	490a      	ldr	r1, [pc, #40]	; (8089558 <_ZN7HIH61XX6updateEv+0x11c>)
 808952e:	f002 fa05 	bl	808b93c <_ZN5Print5printEPKc>
        Serial.println(azer);
 8089532:	f003 fad1 	bl	808cad8 <_Z16_fetch_usbserialv>
 8089536:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8089538:	4631      	mov	r1, r6
 808953a:	220a      	movs	r2, #10
 808953c:	f002 fa25 	bl	808b98a <_ZN5Print11printNumberEmh>
        n += println();
 8089540:	4628      	mov	r0, r5
 8089542:	f002 fa02 	bl	808b94a <_ZN5Print7printlnEv>
 8089546:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 8089548:	2601      	movs	r6, #1
 808954a:	f023 030f 	bic.w	r3, r3, #15
 808954e:	f043 0301 	orr.w	r3, r3, #1
 8089552:	71a3      	strb	r3, [r4, #6]
 8089554:	e77e      	b.n	8089454 <_ZN7HIH61XX6updateEv+0x18>
 8089556:	bf00      	nop
 8089558:	080926f8 	.word	0x080926f8

0808955c <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 808955c:	2a68      	cmp	r2, #104	; 0x68
uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 808955e:	b538      	push	{r3, r4, r5, lr}
 8089560:	460d      	mov	r5, r1
    switch (command) {
 8089562:	d01a      	beq.n	808959a <_ZN7HIH61XX14commandProcessER6Streamh+0x3e>
 8089564:	d80c      	bhi.n	8089580 <_ZN7HIH61XX14commandProcessER6Streamh+0x24>
 8089566:	2a31      	cmp	r2, #49	; 0x31
 8089568:	d038      	beq.n	80895dc <_ZN7HIH61XX14commandProcessER6Streamh+0x80>
 808956a:	2a61      	cmp	r2, #97	; 0x61
 808956c:	d030      	beq.n	80895d0 <_ZN7HIH61XX14commandProcessER6Streamh+0x74>
 808956e:	2a30      	cmp	r2, #48	; 0x30
 8089570:	d038      	beq.n	80895e4 <_ZN7HIH61XX14commandProcessER6Streamh+0x88>
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 8089572:	220a      	movs	r2, #10
 8089574:	21fe      	movs	r1, #254	; 0xfe
 8089576:	4628      	mov	r0, r5
 8089578:	f7fe f90c 	bl	8087794 <_ZN5Print7printlnIhLi0EEEjT_i>
            //  stop
        case '0':
            return commandReply(stream, stop());
    }

    return commandReply(stream, 254);
 808957c:	24fe      	movs	r4, #254	; 0xfe
 808957e:	e018      	b.n	80895b2 <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
    switch (command) {
 8089580:	2a74      	cmp	r2, #116	; 0x74
 8089582:	d018      	beq.n	80895b6 <_ZN7HIH61XX14commandProcessER6Streamh+0x5a>
 8089584:	2a75      	cmp	r2, #117	; 0x75
 8089586:	d1f4      	bne.n	8089572 <_ZN7HIH61XX14commandProcessER6Streamh+0x16>
            return commandReply(stream, update());
 8089588:	f7ff ff58 	bl	808943c <_ZN7HIH61XX6updateEv>
            return commandReply(stream, stop());
 808958c:	4604      	mov	r4, r0
 808958e:	4601      	mov	r1, r0
 8089590:	220a      	movs	r2, #10
 8089592:	4628      	mov	r0, r5
 8089594:	f7fe f8fe 	bl	8087794 <_ZN5Print7printlnIhLi0EEEjT_i>
 8089598:	e00b      	b.n	80895b2 <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
            return float(raw) / 16382;
 808959a:	8900      	ldrh	r0, [r0, #8]
 808959c:	f004 fd12 	bl	808dfc4 <__aeabi_ui2f>
 80895a0:	4912      	ldr	r1, [pc, #72]	; (80895ec <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 80895a2:	f004 fe1b 	bl	808e1dc <__aeabi_fdiv>
            return (float(raw) / 16382) * 165 - 40;
 80895a6:	4601      	mov	r1, r0
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 80895a8:	2202      	movs	r2, #2
 80895aa:	4628      	mov	r0, r5
 80895ac:	f002 fad8 	bl	808bb60 <_ZN5Print7printlnEfi>
            return commandReply(stream, 0, temperature());
 80895b0:	2400      	movs	r4, #0
}
 80895b2:	4620      	mov	r0, r4
 80895b4:	bd38      	pop	{r3, r4, r5, pc}
            return (float(raw) / 16382) * 165 - 40;
 80895b6:	8940      	ldrh	r0, [r0, #10]
 80895b8:	f004 fd04 	bl	808dfc4 <__aeabi_ui2f>
 80895bc:	490b      	ldr	r1, [pc, #44]	; (80895ec <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 80895be:	f004 fe0d 	bl	808e1dc <__aeabi_fdiv>
 80895c2:	490b      	ldr	r1, [pc, #44]	; (80895f0 <_ZN7HIH61XX14commandProcessER6Streamh+0x94>)
 80895c4:	f004 fd56 	bl	808e074 <__aeabi_fmul>
 80895c8:	490a      	ldr	r1, [pc, #40]	; (80895f4 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 80895ca:	f004 fc49 	bl	808de60 <__aeabi_fsub>
 80895ce:	e7ea      	b.n	80895a6 <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
            stream.println(data);
 80895d0:	7901      	ldrb	r1, [r0, #4]
 80895d2:	220a      	movs	r2, #10
 80895d4:	4628      	mov	r0, r5
 80895d6:	f7fe f8dd 	bl	8087794 <_ZN5Print7printlnIhLi0EEEjT_i>
 80895da:	e7e9      	b.n	80895b0 <_ZN7HIH61XX14commandProcessER6Streamh+0x54>
            return commandReply(stream, start());
 80895dc:	6803      	ldr	r3, [r0, #0]
 80895de:	681b      	ldr	r3, [r3, #0]
            return commandReply(stream, stop());
 80895e0:	4798      	blx	r3
 80895e2:	e7d3      	b.n	808958c <_ZN7HIH61XX14commandProcessER6Streamh+0x30>
 80895e4:	6803      	ldr	r3, [r0, #0]
 80895e6:	685b      	ldr	r3, [r3, #4]
 80895e8:	e7fa      	b.n	80895e0 <_ZN7HIH61XX14commandProcessER6Streamh+0x84>
 80895ea:	bf00      	nop
 80895ec:	467ff800 	.word	0x467ff800
 80895f0:	43250000 	.word	0x43250000
 80895f4:	42200000 	.word	0x42200000

080895f8 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 80895f8:	b510      	push	{r4, lr}
 80895fa:	4604      	mov	r4, r0
 80895fc:	4b05      	ldr	r3, [pc, #20]	; (8089614 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 80895fe:	f840 3b2c 	str.w	r3, [r0], #44
 8089602:	f001 ff3f 	bl	808b484 <_ZN6StringD1Ev>
 8089606:	f104 000c 	add.w	r0, r4, #12
 808960a:	f001 ff3b 	bl	808b484 <_ZN6StringD1Ev>

}
 808960e:	4620      	mov	r0, r4
 8089610:	bd10      	pop	{r4, pc}
 8089612:	bf00      	nop
 8089614:	08092a94 	.word	0x08092a94

08089618 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8089618:	b510      	push	{r4, lr}
 808961a:	4604      	mov	r4, r0
}
 808961c:	f7ff ffec 	bl	80895f8 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8089620:	4620      	mov	r0, r4
 8089622:	2144      	movs	r1, #68	; 0x44
 8089624:	f003 ff07 	bl	808d436 <_ZdlPvj>
 8089628:	4620      	mov	r0, r4
 808962a:	bd10      	pop	{r4, pc}

0808962c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>:
#endif /* Wiring_WiFi */


#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
 808962c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 808962e:	4604      	mov	r4, r0
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 8089630:	4e16      	ldr	r6, [pc, #88]	; (808968c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x60>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 8089632:	6863      	ldr	r3, [r4, #4]
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 8089634:	6830      	ldr	r0, [r6, #0]
 8089636:	4d16      	ldr	r5, [pc, #88]	; (8089690 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x64>)
	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 8089638:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 808963c:	9303      	str	r3, [sp, #12]
 808963e:	6823      	ldr	r3, [r4, #0]
 8089640:	4a14      	ldr	r2, [pc, #80]	; (8089694 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x68>)
 8089642:	9302      	str	r3, [sp, #8]
 8089644:	68a3      	ldr	r3, [r4, #8]
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 8089646:	1a2d      	subs	r5, r5, r0
	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 8089648:	9301      	str	r3, [sp, #4]
 808964a:	68e3      	ldr	r3, [r4, #12]
 808964c:	9300      	str	r3, [sp, #0]
 808964e:	4b12      	ldr	r3, [pc, #72]	; (8089698 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x6c>)
 8089650:	295b      	cmp	r1, #91	; 0x5b
 8089652:	bf18      	it	ne
 8089654:	4613      	movne	r3, r2
 8089656:	4629      	mov	r1, r5
 8089658:	4a10      	ldr	r2, [pc, #64]	; (808969c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x70>)
 808965a:	f001 fb01 	bl	808ac60 <snprintf>
			"%s{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
 808965e:	4285      	cmp	r5, r0
 8089660:	d312      	bcc.n	8089688 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 8089662:	68a2      	ldr	r2, [r4, #8]
 8089664:	b182      	cbz	r2, 8089688 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 8089666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808966a:	429a      	cmp	r2, r3
 808966c:	d00c      	beq.n	8089688 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 808966e:	6822      	ldr	r2, [r4, #0]
 8089670:	429a      	cmp	r2, r3
 8089672:	d009      	beq.n	8089688 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 8089674:	6862      	ldr	r2, [r4, #4]
 8089676:	429a      	cmp	r2, r3
 8089678:	d006      	beq.n	8089688 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 808967a:	6833      	ldr	r3, [r6, #0]
		numAdded++;
 808967c:	4a08      	ldr	r2, [pc, #32]	; (80896a0 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x74>)
		requestCur += sizeNeeded;
 808967e:	4418      	add	r0, r3
		numAdded++;
 8089680:	6813      	ldr	r3, [r2, #0]
		requestCur += sizeNeeded;
 8089682:	6030      	str	r0, [r6, #0]
		numAdded++;
 8089684:	3301      	adds	r3, #1
 8089686:	6013      	str	r3, [r2, #0]
	}

}
 8089688:	b004      	add	sp, #16
 808968a:	bd70      	pop	{r4, r5, r6, pc}
 808968c:	20000dfc 	.word	0x20000dfc
 8089690:	20000df7 	.word	0x20000df7
 8089694:	08092a26 	.word	0x08092a26
 8089698:	08092ce2 	.word	0x08092ce2
 808969c:	080929f8 	.word	0x080929f8
 80896a0:	20000e04 	.word	0x20000e04

080896a4 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 80896a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80896a8:	4604      	mov	r4, r0
	if (callback) {
 80896aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 80896ac:	4610      	mov	r0, r2
	if (callback) {
 80896ae:	b383      	cbz	r3, 8089712 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x6e>
		char *mutableCopy = strdup(data);
 80896b0:	f005 f844 	bl	808e73c <strdup>
		part = strtok_r(mutableCopy, ",", &end);
 80896b4:	4918      	ldr	r1, [pc, #96]	; (8089718 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 80896b6:	aa01      	add	r2, sp, #4
		char *mutableCopy = strdup(data);
 80896b8:	4605      	mov	r5, r0
		part = strtok_r(mutableCopy, ",", &end);
 80896ba:	f005 fee9 	bl	808f490 <strtok_r>
		if (part) {
 80896be:	b328      	cbz	r0, 808970c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
			lat = atof(part);
 80896c0:	f004 ffa6 	bl	808e610 <atof>
			part = strtok_r(NULL, ",", &end);
 80896c4:	aa01      	add	r2, sp, #4
			lat = atof(part);
 80896c6:	4606      	mov	r6, r0
 80896c8:	460f      	mov	r7, r1
			part = strtok_r(NULL, ",", &end);
 80896ca:	2000      	movs	r0, #0
 80896cc:	4912      	ldr	r1, [pc, #72]	; (8089718 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 80896ce:	f005 fedf 	bl	808f490 <strtok_r>
			if (part) {
 80896d2:	b1d8      	cbz	r0, 808970c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
				lon = atof(part);
 80896d4:	f004 ff9c 	bl	808e610 <atof>
				part = strtok_r(NULL, ",", &end);
 80896d8:	aa01      	add	r2, sp, #4
				lon = atof(part);
 80896da:	4680      	mov	r8, r0
 80896dc:	4689      	mov	r9, r1
				part = strtok_r(NULL, ",", &end);
 80896de:	2000      	movs	r0, #0
 80896e0:	490d      	ldr	r1, [pc, #52]	; (8089718 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 80896e2:	f005 fed5 	bl	808f490 <strtok_r>
				if (part) {
 80896e6:	b188      	cbz	r0, 808970c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
					accuracy = atof(part);
 80896e8:	f004 ff92 	bl	808e610 <atof>
 80896ec:	f004 fb64 	bl	808ddb8 <__aeabi_d2f>
				lon = atof(part);
 80896f0:	4649      	mov	r1, r9
					accuracy = atof(part);
 80896f2:	4682      	mov	sl, r0
				lon = atof(part);
 80896f4:	4640      	mov	r0, r8
 80896f6:	f004 fb5f 	bl	808ddb8 <__aeabi_d2f>
 80896fa:	4680      	mov	r8, r0
			lat = atof(part);
 80896fc:	4639      	mov	r1, r7
 80896fe:	4630      	mov	r0, r6
 8089700:	f004 fb5a 	bl	808ddb8 <__aeabi_d2f>
					(*callback)(lat, lon, accuracy);
 8089704:	4652      	mov	r2, sl
 8089706:	4641      	mov	r1, r8
 8089708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808970a:	4798      	blx	r3
		free(mutableCopy);
 808970c:	4628      	mov	r0, r5
 808970e:	f001 fa7f 	bl	808ac10 <free>
}
 8089712:	b002      	add	sp, #8
 8089714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089718:	08092a26 	.word	0x08092a26

0808971c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0>:

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 808971c:	b570      	push	{r4, r5, r6, lr}
 808971e:	b0ca      	sub	sp, #296	; 0x128
};

template <size_t MAX_NEIGHBOR_CELLS>
class CellularHelperEnvironmentResponseStatic : public CellularHelperEnvironmentResponse {
public:
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 8089720:	2204      	movs	r2, #4
 8089722:	a91e      	add	r1, sp, #120	; 0x78
 8089724:	a805      	add	r0, sp, #20
 8089726:	f000 fb7f 	bl	8089e28 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>
 808972a:	2504      	movs	r5, #4
class CellularHelperEnvironmentCellData { // 44 bytes
 808972c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8089730:	22ff      	movs	r2, #255	; 0xff
 8089732:	2100      	movs	r1, #0
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 8089734:	4b2e      	ldr	r3, [pc, #184]	; (80897f0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd4>)
 8089736:	9305      	str	r3, [sp, #20]
 8089738:	ab05      	add	r3, sp, #20
 808973a:	3d01      	subs	r5, #1
class CellularHelperEnvironmentCellData { // 44 bytes
 808973c:	e9c3 0219 	strd	r0, r2, [r3, #100]	; 0x64
 8089740:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
 8089744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 8089748:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 808974c:	d1f5      	bne.n	808973a <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0x1e>
	}

	// First try to get info on neighboring cells. This doesn't work for me using the U260
	CellularHelperEnvironmentResponseStatic<4> envResp;

	CellularHelper.getEnvironment(5, envResp);
 808974e:	2105      	movs	r1, #5
 8089750:	4828      	ldr	r0, [pc, #160]	; (80897f4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd8>)
 8089752:	aa05      	add	r2, sp, #20
 8089754:	f000 fe80 	bl	808a458 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>

	if (envResp.resp != RESP_OK) {
 8089758:	9b06      	ldr	r3, [sp, #24]
 808975a:	3302      	adds	r3, #2
 808975c:	d004      	beq.n	8089768 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0x4c>
		// We couldn't get neighboring cells, so try just the receiving cell
		CellularHelper.getEnvironment(3, envResp);
 808975e:	2103      	movs	r1, #3
 8089760:	4824      	ldr	r0, [pc, #144]	; (80897f4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd8>)
 8089762:	aa05      	add	r2, sp, #20
 8089764:	f000 fe78 	bl	808a458 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089768:	4c23      	ldr	r4, [pc, #140]	; (80897f8 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xdc>)
			CellularHelper.getOperatorName().c_str());
 808976a:	2209      	movs	r2, #9
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 808976c:	6826      	ldr	r6, [r4, #0]
			CellularHelper.getOperatorName().c_str());
 808976e:	4921      	ldr	r1, [pc, #132]	; (80897f4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xd8>)
 8089770:	a801      	add	r0, sp, #4
 8089772:	f000 fe3f 	bl	808a3f4 <_ZNK19CellularHelperClass15getOperatorNameEi>
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089776:	9a01      	ldr	r2, [sp, #4]
 8089778:	4920      	ldr	r1, [pc, #128]	; (80897fc <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xe0>)
 808977a:	4630      	mov	r0, r6
 808977c:	f001 fa58 	bl	808ac30 <sprintf>
 8089780:	6823      	ldr	r3, [r4, #0]
	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
		cellularAddTower(&envResp.neighbors[ii]);
 8089782:	262c      	movs	r6, #44	; 0x2c
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089784:	4403      	add	r3, r0
			CellularHelper.getOperatorName().c_str());
 8089786:	a801      	add	r0, sp, #4
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 8089788:	6023      	str	r3, [r4, #0]
			CellularHelper.getOperatorName().c_str());
 808978a:	f001 fe7b 	bl	808b484 <_ZN6StringD1Ev>
	requestCur += sprintf(requestCur, "\"a\":[");
 808978e:	6823      	ldr	r3, [r4, #0]
 8089790:	491b      	ldr	r1, [pc, #108]	; (8089800 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xe4>)
 8089792:	4618      	mov	r0, r3
 8089794:	f004 ffc9 	bl	808e72a <strcpy>
 8089798:	4603      	mov	r3, r0
	cellularAddTower(&envResp.service);
 808979a:	a810      	add	r0, sp, #64	; 0x40
	requestCur += sprintf(requestCur, "\"a\":[");
 808979c:	3305      	adds	r3, #5
 808979e:	6023      	str	r3, [r4, #0]
	cellularAddTower(&envResp.service);
 80897a0:	f7ff ff44 	bl	808962c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>
	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 80897a4:	a805      	add	r0, sp, #20
 80897a6:	f000 fd0f 	bl	808a1c8 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>
 80897aa:	42a8      	cmp	r0, r5
 80897ac:	d906      	bls.n	80897bc <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xa0>
		cellularAddTower(&envResp.neighbors[ii]);
 80897ae:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80897b0:	fb06 0005 	mla	r0, r6, r5, r0
 80897b4:	f7ff ff3a 	bl	808962c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>
	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 80897b8:	3501      	adds	r5, #1
 80897ba:	e7f3      	b.n	80897a4 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0x88>
	}

	*requestCur++ = ']';
 80897bc:	225d      	movs	r2, #93	; 0x5d
 80897be:	6823      	ldr	r3, [r4, #0]
 80897c0:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 80897c2:	227d      	movs	r2, #125	; 0x7d
 80897c4:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 80897c6:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 80897c8:	1d1a      	adds	r2, r3, #4
 80897ca:	6022      	str	r2, [r4, #0]
 80897cc:	2200      	movs	r2, #0
 80897ce:	70da      	strb	r2, [r3, #3]

	if (numAdded == 0) {
 80897d0:	4b0c      	ldr	r3, [pc, #48]	; (8089804 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xe8>)
 80897d2:	681b      	ldr	r3, [r3, #0]
 80897d4:	b90b      	cbnz	r3, 80897da <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xbe>
		requestBuf[0] = 0;
 80897d6:	4a0c      	ldr	r2, [pc, #48]	; (8089808 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xec>)
 80897d8:	7013      	strb	r3, [r2, #0]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80897da:	4b0c      	ldr	r3, [pc, #48]	; (808980c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xf0>)
 80897dc:	a80c      	add	r0, sp, #48	; 0x30
 80897de:	9305      	str	r3, [sp, #20]
 80897e0:	f001 fe50 	bl	808b484 <_ZN6StringD1Ev>
 80897e4:	a808      	add	r0, sp, #32
 80897e6:	f001 fe4d 	bl	808b484 <_ZN6StringD1Ev>
	}

	return requestBuf;
}
 80897ea:	4807      	ldr	r0, [pc, #28]	; (8089808 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0+0xec>)
 80897ec:	b04a      	add	sp, #296	; 0x128
 80897ee:	bd70      	pop	{r4, r5, r6, pc}
 80897f0:	08092a88 	.word	0x08092a88
 80897f4:	20000e08 	.word	0x20000e08
 80897f8:	20000dfc 	.word	0x20000dfc
 80897fc:	08092a18 	.word	0x08092a18
 8089800:	08092a28 	.word	0x08092a28
 8089804:	20000e04 	.word	0x20000e04
 8089808:	20000cfb 	.word	0x20000cfb
 808980c:	08092d00 	.word	0x08092d00

08089810 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8089810:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8089812:	b538      	push	{r3, r4, r5, lr}
 8089814:	4604      	mov	r4, r0
	  switch (__op)
 8089816:	d007      	beq.n	8089828 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
 8089818:	2a03      	cmp	r2, #3
 808981a:	d011      	beq.n	8089840 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
 808981c:	2a01      	cmp	r2, #1
 808981e:	d101      	bne.n	8089824 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8089820:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 8089822:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8089824:	2000      	movs	r0, #0
 8089826:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 8089828:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 808982a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808982c:	f7f6 fc4d 	bl	80800ca <_Znwj>
 8089830:	4603      	mov	r3, r0
 8089832:	2800      	cmp	r0, #0
 8089834:	d0f5      	beq.n	8089822 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 8089836:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 808983a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 808983e:	e7f0      	b.n	8089822 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 8089840:	6800      	ldr	r0, [r0, #0]
 8089842:	2800      	cmp	r0, #0
 8089844:	d0ee      	beq.n	8089824 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
 8089846:	210c      	movs	r1, #12
 8089848:	f003 fdf5 	bl	808d436 <_ZdlPvj>
 808984c:	e7ea      	b.n	8089824 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM23GoogleMapsDeviceLocatorFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

0808984e <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM23GoogleMapsDeviceLocatorFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808984e:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 8089850:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
 8089852:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 8089854:	685c      	ldr	r4, [r3, #4]
 8089856:	689d      	ldr	r5, [r3, #8]
 8089858:	1066      	asrs	r6, r4, #1
 808985a:	eb05 0064 	add.w	r0, r5, r4, asr #1
 808985e:	07e4      	lsls	r4, r4, #31
 8089860:	bf48      	it	mi
 8089862:	59ac      	ldrmi	r4, [r5, r6]
 8089864:	681b      	ldr	r3, [r3, #0]
 8089866:	6812      	ldr	r2, [r2, #0]
 8089868:	bf48      	it	mi
 808986a:	58e3      	ldrmi	r3, [r4, r3]
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 808986c:	bc70      	pop	{r4, r5, r6}
 808986e:	4718      	bx	r3

08089870 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8089870:	b510      	push	{r4, lr}
      if (_M_manager)
 8089872:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8089874:	4604      	mov	r4, r0
      if (_M_manager)
 8089876:	b113      	cbz	r3, 808987e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8089878:	2203      	movs	r2, #3
 808987a:	4601      	mov	r1, r0
 808987c:	4798      	blx	r3
    }
 808987e:	4620      	mov	r0, r4
 8089880:	bd10      	pop	{r4, pc}
	...

08089884 <_ZN23GoogleMapsDeviceLocatorC1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8089884:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8089886:	4b0f      	ldr	r3, [pc, #60]	; (80898c4 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
 8089888:	2500      	movs	r5, #0
 808988a:	6003      	str	r3, [r0, #0]
 808988c:	f242 7310 	movw	r3, #10000	; 0x2710
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8089890:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8089892:	e9c0 5301 	strd	r5, r3, [r0, #4]
 8089896:	490c      	ldr	r1, [pc, #48]	; (80898c8 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8089898:	300c      	adds	r0, #12
 808989a:	f001 fe3d 	bl	808b518 <_ZN6StringC1EPKc>
 808989e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80898a2:	e9c4 5507 	strd	r5, r5, [r4, #28]
 80898a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80898a8:	4908      	ldr	r1, [pc, #32]	; (80898cc <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 80898aa:	6265      	str	r5, [r4, #36]	; 0x24
 80898ac:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80898b0:	f001 fe32 	bl	808b518 <_ZN6StringC1EPKc>
 80898b4:	f44f 729b 	mov.w	r2, #310	; 0x136
 80898b8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
}
 80898bc:	4620      	mov	r0, r4
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 80898be:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
}
 80898c2:	bd38      	pop	{r3, r4, r5, pc}
 80898c4:	08092a94 	.word	0x08092a94
 80898c8:	08092a2e 	.word	0x08092a2e
 80898cc:	08092a3c 	.word	0x08092a3c

080898d0 <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
	locatorMode = LOCATOR_MODE_PERIODIC;
 80898d0:	2202      	movs	r2, #2
	periodMs = secondsPeriodic * 1000;
 80898d2:	2905      	cmp	r1, #5
 80898d4:	bf38      	it	cc
 80898d6:	2105      	movcc	r1, #5
	locatorMode = LOCATOR_MODE_PERIODIC;
 80898d8:	6042      	str	r2, [r0, #4]
	periodMs = secondsPeriodic * 1000;
 80898da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80898de:	4351      	muls	r1, r2
 80898e0:	6081      	str	r1, [r0, #8]
}
 80898e2:	4770      	bx	lr

080898e4 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>:
const char *GoogleMapsDeviceLocator::cellularScanLTE() {
 80898e4:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularHelperCommonResponse {
 80898e6:	f06f 0302 	mvn.w	r3, #2
 80898ea:	2400      	movs	r4, #0
 80898ec:	b097      	sub	sp, #92	; 0x5c
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80898ee:	4e32      	ldr	r6, [pc, #200]	; (80899b8 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd4>)
 80898f0:	4605      	mov	r5, r0
 80898f2:	4932      	ldr	r1, [pc, #200]	; (80899bc <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd8>)
 80898f4:	a809      	add	r0, sp, #36	; 0x24
class CellularHelperCommonResponse {
 80898f6:	9307      	str	r3, [sp, #28]
 80898f8:	f88d 4020 	strb.w	r4, [sp, #32]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80898fc:	9606      	str	r6, [sp, #24]
 80898fe:	f001 fe0b 	bl	808b518 <_ZN6StringC1EPKc>
 8089902:	492e      	ldr	r1, [pc, #184]	; (80899bc <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd8>)
 8089904:	a80d      	add	r0, sp, #52	; 0x34
 8089906:	f001 fe07 	bl	808b518 <_ZN6StringC1EPKc>

	void postProcess();
	String toString() const;
};

class CellularHelperCREGResponse :  public CellularHelperPlusStringResponse {
 808990a:	4b2d      	ldr	r3, [pc, #180]	; (80899c0 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xdc>)
 808990c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8089910:	9306      	str	r3, [sp, #24]
 8089912:	f04f 33ff 	mov.w	r3, #4294967295
	CellularHelper.getCREG(resp);
 8089916:	a906      	add	r1, sp, #24
 8089918:	482a      	ldr	r0, [pc, #168]	; (80899c4 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe0>)
 808991a:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
 808991e:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
 8089922:	9412      	str	r4, [sp, #72]	; 0x48
 8089924:	9415      	str	r4, [sp, #84]	; 0x54
 8089926:	f000 fdb1 	bl	808a48c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>
	Serial.println(resp.toString().c_str());
 808992a:	f003 f8d5 	bl	808cad8 <_Z16_fetch_usbserialv>
 808992e:	4604      	mov	r4, r0
 8089930:	a906      	add	r1, sp, #24
 8089932:	a802      	add	r0, sp, #8
 8089934:	f000 fc8c 	bl	808a250 <_ZNK26CellularHelperCREGResponse8toStringEv>
 8089938:	9902      	ldr	r1, [sp, #8]
 808993a:	4620      	mov	r0, r4
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 808993c:	4c22      	ldr	r4, [pc, #136]	; (80899c8 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe4>)
	Serial.println(resp.toString().c_str());
 808993e:	f002 f810 	bl	808b962 <_ZN5Print7printlnEPKc>
 8089942:	a802      	add	r0, sp, #8
 8089944:	f001 fd9e 	bl	808b484 <_ZN6StringD1Ev>
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 8089948:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 808994a:	4920      	ldr	r1, [pc, #128]	; (80899cc <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe8>)
 808994c:	6820      	ldr	r0, [r4, #0]
 808994e:	f001 f96f 	bl	808ac30 <sprintf>
 8089952:	6823      	ldr	r3, [r4, #0]
	requestCur += sprintf(requestCur, "\"a\":[");
 8089954:	491e      	ldr	r1, [pc, #120]	; (80899d0 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xec>)
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 8089956:	4403      	add	r3, r0
	requestCur += sprintf(requestCur, "\"a\":[");
 8089958:	4618      	mov	r0, r3
 808995a:	f004 fee6 	bl	808e72a <strcpy>
	if (resp.valid) {
 808995e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	requestCur += sprintf(requestCur, "\"a\":[");
 8089962:	3005      	adds	r0, #5
 8089964:	4f1b      	ldr	r7, [pc, #108]	; (80899d4 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf0>)
 8089966:	6020      	str	r0, [r4, #0]
	if (resp.valid) {
 8089968:	b173      	cbz	r3, 8089988 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xa4>
		requestCur += sprintf(requestCur,
 808996a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 808996c:	491a      	ldr	r1, [pc, #104]	; (80899d8 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf4>)
 808996e:	9301      	str	r3, [sp, #4]
 8089970:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8089972:	9300      	str	r3, [sp, #0]
 8089974:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8089978:	f001 f95a 	bl	808ac30 <sprintf>
 808997c:	6823      	ldr	r3, [r4, #0]
 808997e:	4403      	add	r3, r0
 8089980:	6023      	str	r3, [r4, #0]
		numAdded++;
 8089982:	683b      	ldr	r3, [r7, #0]
 8089984:	3301      	adds	r3, #1
 8089986:	603b      	str	r3, [r7, #0]
	*requestCur++ = ']';
 8089988:	225d      	movs	r2, #93	; 0x5d
 808998a:	6823      	ldr	r3, [r4, #0]
 808998c:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 808998e:	227d      	movs	r2, #125	; 0x7d
 8089990:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 8089992:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 8089994:	1d1a      	adds	r2, r3, #4
 8089996:	6022      	str	r2, [r4, #0]
 8089998:	2200      	movs	r2, #0
 808999a:	70da      	strb	r2, [r3, #3]
	if (numAdded == 0) {
 808999c:	683b      	ldr	r3, [r7, #0]
 808999e:	b90b      	cbnz	r3, 80899a4 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc0>
		requestBuf[0] = 0;
 80899a0:	4a0e      	ldr	r2, [pc, #56]	; (80899dc <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf8>)
 80899a2:	7013      	strb	r3, [r2, #0]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 80899a4:	a80d      	add	r0, sp, #52	; 0x34
 80899a6:	9606      	str	r6, [sp, #24]
 80899a8:	f001 fd6c 	bl	808b484 <_ZN6StringD1Ev>
 80899ac:	a809      	add	r0, sp, #36	; 0x24
 80899ae:	f001 fd69 	bl	808b484 <_ZN6StringD1Ev>
}
 80899b2:	480a      	ldr	r0, [pc, #40]	; (80899dc <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf8>)
 80899b4:	b017      	add	sp, #92	; 0x5c
 80899b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80899b8:	08092d00 	.word	0x08092d00
 80899bc:	08092ce2 	.word	0x08092ce2
 80899c0:	08092a7c 	.word	0x08092a7c
 80899c4:	20000e08 	.word	0x20000e08
 80899c8:	20000dfc 	.word	0x20000dfc
 80899cc:	08092a18 	.word	0x08092a18
 80899d0:	08092a28 	.word	0x08092a28
 80899d4:	20000e04 	.word	0x20000e04
 80899d8:	080929fa 	.word	0x080929fa
 80899dc:	20000cfb 	.word	0x20000cfb

080899e0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv>:
	requestCur = requestBuf;
 80899e0:	4b0a      	ldr	r3, [pc, #40]	; (8089a0c <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x2c>)
 80899e2:	4a0b      	ldr	r2, [pc, #44]	; (8089a10 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x30>)
const char *GoogleMapsDeviceLocator::cellularScan() {
 80899e4:	b510      	push	{r4, lr}
	requestCur = requestBuf;
 80899e6:	601a      	str	r2, [r3, #0]
	numAdded = 0;
 80899e8:	2200      	movs	r2, #0
 80899ea:	4b0a      	ldr	r3, [pc, #40]	; (8089a14 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x34>)
const char *GoogleMapsDeviceLocator::cellularScan() {
 80899ec:	4604      	mov	r4, r0
	if (CellularHelper.isLTE()) {
 80899ee:	480a      	ldr	r0, [pc, #40]	; (8089a18 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x38>)
	numAdded = 0;
 80899f0:	601a      	str	r2, [r3, #0]
	if (CellularHelper.isLTE()) {
 80899f2:	f000 fce3 	bl	808a3bc <_ZNK19CellularHelperClass5isLTEEv>
 80899f6:	b120      	cbz	r0, 8089a02 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x22>
		return cellularScanLTE();
 80899f8:	4620      	mov	r0, r4
}
 80899fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return cellularScanLTE();
 80899fe:	f7ff bf71 	b.w	80898e4 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>
}
 8089a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8089a06:	f7ff be89 	b.w	808971c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.0>
 8089a0a:	bf00      	nop
 8089a0c:	20000dfc 	.word	0x20000dfc
 8089a10:	20000cfb 	.word	0x20000cfb
 8089a14:	20000e04 	.word	0x20000e04
 8089a18:	20000e08 	.word	0x20000e08

08089a1c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
void GoogleMapsDeviceLocator::publishLocation() {
 8089a1c:	b530      	push	{r4, r5, lr}
 8089a1e:	4605      	mov	r5, r0
 8089a20:	b085      	sub	sp, #20
	Serial.println("publishLocation");
 8089a22:	f003 f859 	bl	808cad8 <_Z16_fetch_usbserialv>
 8089a26:	4918      	ldr	r1, [pc, #96]	; (8089a88 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
 8089a28:	f001 ff9b 	bl	808b962 <_ZN5Print7printlnEPKc>
	return cellularScan();
 8089a2c:	4628      	mov	r0, r5
 8089a2e:	f7ff ffd7 	bl	80899e0 <_ZN23GoogleMapsDeviceLocator12cellularScanEv>
 8089a32:	4604      	mov	r4, r0
	Serial.printlnf("scanData=%s", scanData);
 8089a34:	f003 f850 	bl	808cad8 <_Z16_fetch_usbserialv>
 8089a38:	4622      	mov	r2, r4
 8089a3a:	4914      	ldr	r1, [pc, #80]	; (8089a8c <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
 8089a3c:	f7f7 f93e 	bl	8080cbc <_ZN5Print8printlnfEPKcz>
	if (scanData[0]) {
 8089a40:	7823      	ldrb	r3, [r4, #0]
 8089a42:	b1f3      	cbz	r3, 8089a82 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
 8089a44:	f001 f8ac 	bl	808aba0 <spark_cloud_flag_connected>
		if (Particle.connected()) {
 8089a48:	b1d8      	cbz	r0, 8089a82 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8089a4a:	4b11      	ldr	r3, [pc, #68]	; (8089a90 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8089a4c:	4622      	mov	r2, r4
 8089a4e:	781b      	ldrb	r3, [r3, #0]
 8089a50:	68e9      	ldr	r1, [r5, #12]
 8089a52:	f88d 3000 	strb.w	r3, [sp]
 8089a56:	a802      	add	r0, sp, #8
 8089a58:	233c      	movs	r3, #60	; 0x3c
 8089a5a:	f002 fe0d 	bl	808c678 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
 8089a5e:	9c03      	ldr	r4, [sp, #12]
 8089a60:	b17c      	cbz	r4, 8089a82 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
      if (--_M_use_count == 0)
 8089a62:	6863      	ldr	r3, [r4, #4]
 8089a64:	3b01      	subs	r3, #1
 8089a66:	6063      	str	r3, [r4, #4]
 8089a68:	b95b      	cbnz	r3, 8089a82 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
          _M_dispose();
 8089a6a:	6823      	ldr	r3, [r4, #0]
 8089a6c:	4620      	mov	r0, r4
 8089a6e:	689b      	ldr	r3, [r3, #8]
 8089a70:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8089a72:	68a3      	ldr	r3, [r4, #8]
 8089a74:	3b01      	subs	r3, #1
 8089a76:	60a3      	str	r3, [r4, #8]
 8089a78:	b91b      	cbnz	r3, 8089a82 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x66>
            _M_destroy();
 8089a7a:	6823      	ldr	r3, [r4, #0]
 8089a7c:	4620      	mov	r0, r4
 8089a7e:	68db      	ldr	r3, [r3, #12]
 8089a80:	4798      	blx	r3
}
 8089a82:	b005      	add	sp, #20
 8089a84:	bd30      	pop	{r4, r5, pc}
 8089a86:	bf00      	nop
 8089a88:	08092a41 	.word	0x08092a41
 8089a8c:	08092a51 	.word	0x08092a51
 8089a90:	20000e00 	.word	0x20000e00

08089a94 <_ZN23GoogleMapsDeviceLocator4loopEv>:
void GoogleMapsDeviceLocator::loop() {
 8089a94:	b510      	push	{r4, lr}
	switch(state) {
 8089a96:	6a03      	ldr	r3, [r0, #32]
void GoogleMapsDeviceLocator::loop() {
 8089a98:	4604      	mov	r4, r0
	switch(state) {
 8089a9a:	2b02      	cmp	r3, #2
 8089a9c:	d00b      	beq.n	8089ab6 <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
 8089a9e:	2b03      	cmp	r3, #3
 8089aa0:	d022      	beq.n	8089ae8 <_ZN23GoogleMapsDeviceLocator4loopEv+0x54>
 8089aa2:	b9bb      	cbnz	r3, 8089ad4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8089aa4:	f001 f87c 	bl	808aba0 <spark_cloud_flag_connected>
		if (Particle.connected()) {
 8089aa8:	b1a0      	cbz	r0, 8089ad4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
			state = CONNECTED_WAIT_STATE;
 8089aaa:	2302      	movs	r3, #2
 8089aac:	6223      	str	r3, [r4, #32]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8089aae:	f000 fdf7 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
 8089ab2:	61e0      	str	r0, [r4, #28]
 8089ab4:	e00e      	b.n	8089ad4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
 8089ab6:	f000 fdf3 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
		if (millis() - stateTime >= waitAfterConnect) {
 8089aba:	69e3      	ldr	r3, [r4, #28]
 8089abc:	1ac0      	subs	r0, r0, r3
 8089abe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8089ac0:	4298      	cmp	r0, r3
 8089ac2:	d307      	bcc.n	8089ad4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
			if (locatorMode == LOCATOR_MODE_ONCE) {
 8089ac4:	6863      	ldr	r3, [r4, #4]
 8089ac6:	2b01      	cmp	r3, #1
 8089ac8:	d105      	bne.n	8089ad6 <_ZN23GoogleMapsDeviceLocator4loopEv+0x42>
				publishLocation();
 8089aca:	4620      	mov	r0, r4
 8089acc:	f7ff ffa6 	bl	8089a1c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
				state = IDLE_STATE;
 8089ad0:	2304      	movs	r3, #4
 8089ad2:	6223      	str	r3, [r4, #32]
}
 8089ad4:	bd10      	pop	{r4, pc}
			if (locatorMode == LOCATOR_MODE_MANUAL) {
 8089ad6:	2b00      	cmp	r3, #0
 8089ad8:	d0fa      	beq.n	8089ad0 <_ZN23GoogleMapsDeviceLocator4loopEv+0x3c>
				state = CONNECTED_STATE;
 8089ada:	2303      	movs	r3, #3
 8089adc:	6223      	str	r3, [r4, #32]
 8089ade:	f000 fddf 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
 8089ae2:	68a3      	ldr	r3, [r4, #8]
 8089ae4:	1ac0      	subs	r0, r0, r3
 8089ae6:	e7e4      	b.n	8089ab2 <_ZN23GoogleMapsDeviceLocator4loopEv+0x1e>
 8089ae8:	f001 f85a 	bl	808aba0 <spark_cloud_flag_connected>
		if (Particle.connected()) {
 8089aec:	b170      	cbz	r0, 8089b0c <_ZN23GoogleMapsDeviceLocator4loopEv+0x78>
 8089aee:	f000 fdd7 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
 8089af2:	69e3      	ldr	r3, [r4, #28]
 8089af4:	1ac0      	subs	r0, r0, r3
 8089af6:	68a3      	ldr	r3, [r4, #8]
 8089af8:	4298      	cmp	r0, r3
 8089afa:	d3eb      	bcc.n	8089ad4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>
 8089afc:	f000 fdd0 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
 8089b00:	61e0      	str	r0, [r4, #28]
				publishLocation();
 8089b02:	4620      	mov	r0, r4
}
 8089b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				publishLocation();
 8089b08:	f7ff bf88 	b.w	8089a1c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			state = CONNECT_WAIT_STATE;
 8089b0c:	6220      	str	r0, [r4, #32]
}
 8089b0e:	e7e1      	b.n	8089ad4 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

08089b10 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089b10:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8089b12:	2300      	movs	r3, #0
 8089b14:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8089b16:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8089b18:	4604      	mov	r4, r0
 8089b1a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8089b1c:	b12b      	cbz	r3, 8089b2a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089b1e:	2202      	movs	r2, #2
 8089b20:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8089b22:	68eb      	ldr	r3, [r5, #12]
 8089b24:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8089b26:	68ab      	ldr	r3, [r5, #8]
 8089b28:	60a3      	str	r3, [r4, #8]
	}
    }
 8089b2a:	4620      	mov	r0, r4
 8089b2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08089b30 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 8089b30:	b530      	push	{r4, r5, lr}
 8089b32:	b08b      	sub	sp, #44	; 0x2c
	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
 8089b34:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
 8089b36:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 8089b38:	4604      	mov	r4, r0
    static String deviceID(void) { return spark_deviceID(); }
 8089b3a:	a806      	add	r0, sp, #24
 8089b3c:	f001 f838 	bl	808abb0 <spark_deviceID>
	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
 8089b40:	9b06      	ldr	r3, [sp, #24]
 8089b42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8089b46:	9300      	str	r3, [sp, #0]
 8089b48:	462b      	mov	r3, r5
    _Function_base() : _M_manager(nullptr) { }
 8089b4a:	2500      	movs	r5, #0
 8089b4c:	4a19      	ldr	r2, [pc, #100]	; (8089bb4 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
 8089b4e:	481a      	ldr	r0, [pc, #104]	; (8089bb8 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 8089b50:	f001 f886 	bl	808ac60 <snprintf>
 8089b54:	a806      	add	r0, sp, #24
 8089b56:	f001 fc95 	bl	808b484 <_ZN6StringD1Ev>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089b5a:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 8089b5c:	9504      	str	r5, [sp, #16]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089b5e:	f7f6 fab4 	bl	80800ca <_Znwj>
 8089b62:	b118      	cbz	r0, 8089b6c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8089b64:	4b15      	ldr	r3, [pc, #84]	; (8089bbc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8089b66:	6084      	str	r4, [r0, #8]
 8089b68:	e9c0 3500 	strd	r3, r5, [r0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089b6c:	4b14      	ldr	r3, [pc, #80]	; (8089bc0 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089b6e:	9002      	str	r0, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 8089b70:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8089b72:	4b14      	ldr	r3, [pc, #80]	; (8089bc4 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
        return subscribe_wiring(eventName, handler, scope);
 8089b74:	a902      	add	r1, sp, #8
 8089b76:	a806      	add	r0, sp, #24
 8089b78:	9304      	str	r3, [sp, #16]
 8089b7a:	f7ff ffc9 	bl	8089b10 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    }

    bool subscribe_wiring(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope, const char *deviceID = NULL)
    {
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 8089b7e:	9b08      	ldr	r3, [sp, #32]
 8089b80:	b17b      	cbz	r3, 8089ba2 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
 8089b82:	2010      	movs	r0, #16
 8089b84:	f7f6 faa1 	bl	80800ca <_Znwj>
 8089b88:	4605      	mov	r5, r0
 8089b8a:	b150      	cbz	r0, 8089ba2 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
 8089b8c:	a906      	add	r1, sp, #24
 8089b8e:	f7ff ffbf 	bl	8089b10 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 8089b92:	2300      	movs	r3, #0
 8089b94:	462a      	mov	r2, r5
 8089b96:	e9cd 3300 	strd	r3, r3, [sp]
 8089b9a:	490b      	ldr	r1, [pc, #44]	; (8089bc8 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
 8089b9c:	4806      	ldr	r0, [pc, #24]	; (8089bb8 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 8089b9e:	f001 f817 	bl	808abd0 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
 8089ba2:	a806      	add	r0, sp, #24
 8089ba4:	f7ff fe64 	bl	8089870 <_ZNSt14_Function_baseD1Ev>
 8089ba8:	a802      	add	r0, sp, #8
 8089baa:	f7ff fe61 	bl	8089870 <_ZNSt14_Function_baseD1Ev>
}
 8089bae:	4620      	mov	r0, r4
 8089bb0:	b00b      	add	sp, #44	; 0x2c
 8089bb2:	bd30      	pop	{r4, r5, pc}
 8089bb4:	08092a5d 	.word	0x08092a5d
 8089bb8:	20000cfb 	.word	0x20000cfb
 8089bbc:	080896a5 	.word	0x080896a5
 8089bc0:	0808984f 	.word	0x0808984f
 8089bc4:	08089811 	.word	0x08089811
 8089bc8:	0808c477 	.word	0x0808c477

08089bcc <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
        val_(val) {
 8089bcc:	2201      	movs	r2, #1
 8089bce:	4b01      	ldr	r3, [pc, #4]	; (8089bd4 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
 8089bd0:	701a      	strb	r2, [r3, #0]
}
 8089bd2:	4770      	bx	lr
 8089bd4:	20000e00 	.word	0x20000e00

08089bd8 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8089bd8:	b430      	push	{r4, r5}
 8089bda:	4605      	mov	r5, r0
 8089bdc:	4618      	mov	r0, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8089bde:	681b      	ldr	r3, [r3, #0]
 8089be0:	681c      	ldr	r4, [r3, #0]
 8089be2:	4613      	mov	r3, r2
 8089be4:	46a4      	mov	ip, r4
 8089be6:	460a      	mov	r2, r1
 8089be8:	4629      	mov	r1, r5
}
 8089bea:	bc30      	pop	{r4, r5}
	return presp->parse(type, buf, len);
 8089bec:	4760      	bx	ip
	...

08089bf0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8089bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8089bf4:	460c      	mov	r4, r1
 8089bf6:	b08d      	sub	sp, #52	; 0x34
	String typeStr;
 8089bf8:	494d      	ldr	r1, [pc, #308]	; (8089d30 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8089bfa:	a804      	add	r0, sp, #16
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8089bfc:	4616      	mov	r6, r2
 8089bfe:	461d      	mov	r5, r3
	String typeStr;
 8089c00:	f001 fc8a 	bl	808b518 <_ZN6StringC1EPKc>
	switch(type) {
 8089c04:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8089c08:	d064      	beq.n	8089cd4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe4>
 8089c0a:	dc1f      	bgt.n	8089c4c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5c>
 8089c0c:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8089c10:	d05c      	beq.n	8089ccc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8089c12:	dc13      	bgt.n	8089c3c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x4c>
 8089c14:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8089c18:	d056      	beq.n	8089cc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd8>
 8089c1a:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8089c1e:	d055      	beq.n	8089ccc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8089c20:	b35c      	cbz	r4, 8089c7a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8a>
		typeStr = String::format("type=0x%x", type);
 8089c22:	4622      	mov	r2, r4
 8089c24:	a808      	add	r0, sp, #32
 8089c26:	4943      	ldr	r1, [pc, #268]	; (8089d34 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8089c28:	f001 fe4a 	bl	808b8c0 <_ZN6String6formatEPKcz>
 8089c2c:	a908      	add	r1, sp, #32
 8089c2e:	a804      	add	r0, sp, #16
 8089c30:	f001 fcbc 	bl	808b5ac <_ZN6StringaSEOS_>
 8089c34:	a808      	add	r0, sp, #32
 8089c36:	f001 fc25 	bl	808b484 <_ZN6StringD1Ev>
		break;
 8089c3a:	e022      	b.n	8089c82 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x92>
	switch(type) {
 8089c3c:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8089c40:	d046      	beq.n	8089cd0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe0>
 8089c42:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8089c46:	d1ec      	bne.n	8089c22 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_NOCARRIER";
 8089c48:	493b      	ldr	r1, [pc, #236]	; (8089d38 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
 8089c4a:	e017      	b.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8089c4c:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8089c50:	d046      	beq.n	8089ce0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8089c52:	dc0a      	bgt.n	8089c6a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7a>
 8089c54:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8089c58:	d03e      	beq.n	8089cd8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe8>
 8089c5a:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8089c5e:	d03d      	beq.n	8089cdc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xec>
 8089c60:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8089c64:	d1dd      	bne.n	8089c22 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_BUSY";
 8089c66:	4935      	ldr	r1, [pc, #212]	; (8089d3c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8089c68:	e008      	b.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8089c6a:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8089c6e:	d037      	beq.n	8089ce0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8089c70:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8089c74:	d1d5      	bne.n	8089c22 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_ABORTED";
 8089c76:	4932      	ldr	r1, [pc, #200]	; (8089d40 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8089c78:	e000      	b.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_UNKNOWN";
 8089c7a:	4932      	ldr	r1, [pc, #200]	; (8089d44 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
		typeStr = "TYPE_OK";
 8089c7c:	a804      	add	r0, sp, #16
 8089c7e:	f001 fc9d 	bl	808b5bc <_ZN6StringaSEPKc>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8089c82:	462b      	mov	r3, r5
 8089c84:	9a04      	ldr	r2, [sp, #16]
 8089c86:	4930      	ldr	r1, [pc, #192]	; (8089d48 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8089c88:	4830      	ldr	r0, [pc, #192]	; (8089d4c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8089c8a:	f7f7 f8bf 	bl	8080e0c <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8089c8e:	4928      	ldr	r1, [pc, #160]	; (8089d30 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8089c90:	a808      	add	r0, sp, #32
 8089c92:	f001 fc41 	bl	808b518 <_ZN6StringC1EPKc>
	for(int ii = 0; ii < len; ii++) {
 8089c96:	2400      	movs	r4, #0
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8089c98:	4f2d      	ldr	r7, [pc, #180]	; (8089d50 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8089c9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8089d70 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x180>
 8089c9e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8089d74 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x184>
	for(int ii = 0; ii < len; ii++) {
 8089ca2:	42ac      	cmp	r4, r5
 8089ca4:	da35      	bge.n	8089d12 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x122>
		if (buf[ii] == '\n') {
 8089ca6:	5d31      	ldrb	r1, [r6, r4]
 8089ca8:	290a      	cmp	r1, #10
 8089caa:	d11b      	bne.n	8089ce4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf4>
 8089cac:	4649      	mov	r1, r9
 8089cae:	a808      	add	r0, sp, #32
 8089cb0:	f001 fd14 	bl	808b6dc <_ZN6String6concatEPKc>
			Log.info(out);
 8089cb4:	9908      	ldr	r1, [sp, #32]
 8089cb6:	4825      	ldr	r0, [pc, #148]	; (8089d4c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8089cb8:	f7f7 f8a8 	bl	8080e0c <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8089cbc:	491c      	ldr	r1, [pc, #112]	; (8089d30 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8089cbe:	a808      	add	r0, sp, #32
 8089cc0:	f001 fc7c 	bl	808b5bc <_ZN6StringaSEPKc>
	for(int ii = 0; ii < len; ii++) {
 8089cc4:	3401      	adds	r4, #1
 8089cc6:	e7ec      	b.n	8089ca2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb2>
		typeStr = "TYPE_OK";
 8089cc8:	4922      	ldr	r1, [pc, #136]	; (8089d54 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8089cca:	e7d7      	b.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_ERROR";
 8089ccc:	4922      	ldr	r1, [pc, #136]	; (8089d58 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8089cce:	e7d5      	b.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_CONNECT";
 8089cd0:	4922      	ldr	r1, [pc, #136]	; (8089d5c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8089cd2:	e7d3      	b.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NODIALTONE";
 8089cd4:	4922      	ldr	r1, [pc, #136]	; (8089d60 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089cd6:	e7d1      	b.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NOANSWER";
 8089cd8:	4922      	ldr	r1, [pc, #136]	; (8089d64 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8089cda:	e7cf      	b.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PROMPT";
 8089cdc:	4922      	ldr	r1, [pc, #136]	; (8089d68 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8089cde:	e7cd      	b.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PLUS";
 8089ce0:	4922      	ldr	r1, [pc, #136]	; (8089d6c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8089ce2:	e7cb      	b.n	8089c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		if (buf[ii] == '\r') {
 8089ce4:	290d      	cmp	r1, #13
 8089ce6:	d104      	bne.n	8089cf2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x102>
 8089ce8:	4641      	mov	r1, r8
			out.concat(hex);
 8089cea:	a808      	add	r0, sp, #32
 8089cec:	f001 fcf6 	bl	808b6dc <_ZN6String6concatEPKc>
 8089cf0:	e7e8      	b.n	8089cc4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8089cf2:	f1a1 0320 	sub.w	r3, r1, #32
 8089cf6:	2b5e      	cmp	r3, #94	; 0x5e
 8089cf8:	d907      	bls.n	8089d0a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11a>
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8089cfa:	460b      	mov	r3, r1
 8089cfc:	463a      	mov	r2, r7
 8089cfe:	210a      	movs	r1, #10
 8089d00:	a801      	add	r0, sp, #4
 8089d02:	f000 ffad 	bl	808ac60 <snprintf>
			out.concat(hex);
 8089d06:	a901      	add	r1, sp, #4
 8089d08:	e7ef      	b.n	8089cea <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xfa>
			out.concat(buf[ii]);
 8089d0a:	a808      	add	r0, sp, #32
 8089d0c:	f001 fcf5 	bl	808b6fa <_ZN6String6concatEc>
 8089d10:	e7d8      	b.n	8089cc4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
	if (out.length() > 0) {
 8089d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089d14:	b11b      	cbz	r3, 8089d1e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x12e>
		Log.info(out);
 8089d16:	9908      	ldr	r1, [sp, #32]
 8089d18:	480c      	ldr	r0, [pc, #48]	; (8089d4c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8089d1a:	f7f7 f877 	bl	8080e0c <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8089d1e:	a808      	add	r0, sp, #32
 8089d20:	f001 fbb0 	bl	808b484 <_ZN6StringD1Ev>
	String typeStr;
 8089d24:	a804      	add	r0, sp, #16
 8089d26:	f001 fbad 	bl	808b484 <_ZN6StringD1Ev>
}
 8089d2a:	b00d      	add	sp, #52	; 0x34
 8089d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8089d30:	08092ce2 	.word	0x08092ce2
 8089d34:	08092b23 	.word	0x08092b23
 8089d38:	08092ac9 	.word	0x08092ac9
 8089d3c:	08092ae8 	.word	0x08092ae8
 8089d40:	08092b16 	.word	0x08092b16
 8089d44:	08092a9c 	.word	0x08092a9c
 8089d48:	08092b2d 	.word	0x08092b2d
 8089d4c:	20000e1c 	.word	0x20000e1c
 8089d50:	08092b54 	.word	0x08092b54
 8089d54:	08092aa9 	.word	0x08092aa9
 8089d58:	08092ab1 	.word	0x08092ab1
 8089d5c:	08092abc 	.word	0x08092abc
 8089d60:	08092ad8 	.word	0x08092ad8
 8089d64:	08092af2 	.word	0x08092af2
 8089d68:	08092b00 	.word	0x08092b00
 8089d6c:	08092b0c 	.word	0x08092b0c
 8089d70:	08092b51 	.word	0x08092b51
 8089d74:	08092b4e 	.word	0x08092b4e

08089d78 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>:
String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 8089d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8089d7c:	460e      	mov	r6, r1
 8089d7e:	4604      	mov	r4, r0
	for(size_t ii = 0; ii < string.length(); ii++) {
 8089d80:	2500      	movs	r5, #0
	String result;
 8089d82:	4913      	ldr	r1, [pc, #76]	; (8089dd0 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x58>)
String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 8089d84:	4690      	mov	r8, r2
	String result;
 8089d86:	f001 fbc7 	bl	808b518 <_ZN6StringC1EPKc>
	result.reserve(string.length());
 8089d8a:	4620      	mov	r0, r4
 8089d8c:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8089d8e:	f001 fb97 	bl	808b4c0 <_ZN6String7reserveEj>
	bool inQuoted = false;
 8089d92:	462f      	mov	r7, r5
		char ch = string.charAt(ii);
 8089d94:	f106 091c 	add.w	r9, r6, #28
	for(size_t ii = 0; ii < string.length(); ii++) {
 8089d98:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8089d9a:	429d      	cmp	r5, r3
 8089d9c:	d215      	bcs.n	8089dca <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x52>
		char ch = string.charAt(ii);
 8089d9e:	4629      	mov	r1, r5
 8089da0:	4648      	mov	r0, r9
 8089da2:	f001 fd4a 	bl	808b83a <_ZNK6String6charAtEj>
		if (ch == '"') {
 8089da6:	2822      	cmp	r0, #34	; 0x22
		char ch = string.charAt(ii);
 8089da8:	4601      	mov	r1, r0
		if (ch == '"') {
 8089daa:	d106      	bne.n	8089dba <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x42>
			if (!inQuoted && onlyFirst) {
 8089dac:	b15f      	cbz	r7, 8089dc6 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
 8089dae:	f1b8 0f00 	cmp.w	r8, #0
 8089db2:	d10a      	bne.n	8089dca <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x52>
			inQuoted = !inQuoted;
 8089db4:	4647      	mov	r7, r8
	for(size_t ii = 0; ii < string.length(); ii++) {
 8089db6:	3501      	adds	r5, #1
 8089db8:	e7ee      	b.n	8089d98 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x20>
			if (inQuoted) {
 8089dba:	2f00      	cmp	r7, #0
 8089dbc:	d0fb      	beq.n	8089db6 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
				result.concat(ch);
 8089dbe:	4620      	mov	r0, r4
 8089dc0:	f001 fc9b 	bl	808b6fa <_ZN6String6concatEc>
 8089dc4:	e7f7      	b.n	8089db6 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
			inQuoted = !inQuoted;
 8089dc6:	2701      	movs	r7, #1
 8089dc8:	e7f5      	b.n	8089db6 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x3e>
}
 8089dca:	4620      	mov	r0, r4
 8089dcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8089dd0:	08092ce2 	.word	0x08092ce2

08089dd4 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 8089dd4:	b538      	push	{r3, r4, r5, lr}
class CellularHelperCommonResponse {
 8089dd6:	f06f 0302 	mvn.w	r3, #2
 8089dda:	6043      	str	r3, [r0, #4]
 8089ddc:	2300      	movs	r3, #0
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089dde:	4604      	mov	r4, r0
 8089de0:	4d07      	ldr	r5, [pc, #28]	; (8089e00 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
class CellularHelperCommonResponse {
 8089de2:	7203      	strb	r3, [r0, #8]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089de4:	4b07      	ldr	r3, [pc, #28]	; (8089e04 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 8089de6:	4629      	mov	r1, r5
 8089de8:	f840 3b0c 	str.w	r3, [r0], #12
 8089dec:	f001 fb94 	bl	808b518 <_ZN6StringC1EPKc>
 8089df0:	4629      	mov	r1, r5
 8089df2:	f104 001c 	add.w	r0, r4, #28
 8089df6:	f001 fb8f 	bl	808b518 <_ZN6StringC1EPKc>
 8089dfa:	4620      	mov	r0, r4
 8089dfc:	bd38      	pop	{r3, r4, r5, pc}
 8089dfe:	bf00      	nop
 8089e00:	08092ce2 	.word	0x08092ce2
 8089e04:	08092d00 	.word	0x08092d00

08089e08 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8089e08:	b510      	push	{r4, lr}
 8089e0a:	4604      	mov	r4, r0
 8089e0c:	4b05      	ldr	r3, [pc, #20]	; (8089e24 <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8089e0e:	f840 3b1c 	str.w	r3, [r0], #28
 8089e12:	f001 fb37 	bl	808b484 <_ZN6StringD1Ev>
 8089e16:	f104 000c 	add.w	r0, r4, #12
 8089e1a:	f001 fb33 	bl	808b484 <_ZN6StringD1Ev>
 8089e1e:	4620      	mov	r0, r4
 8089e20:	bd10      	pop	{r4, pc}
 8089e22:	bf00      	nop
 8089e24:	08092d00 	.word	0x08092d00

08089e28 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>:
CellularHelperEnvironmentResponse::CellularHelperEnvironmentResponse(CellularHelperEnvironmentCellData *neighbors, size_t numNeighbors) :
 8089e28:	b570      	push	{r4, r5, r6, lr}
 8089e2a:	4604      	mov	r4, r0
 8089e2c:	4615      	mov	r5, r2
 8089e2e:	460e      	mov	r6, r1
	neighbors(neighbors), numNeighbors(numNeighbors) {
 8089e30:	f7ff ffd0 	bl	8089dd4 <_ZN32CellularHelperPlusStringResponseC1Ev>
 8089e34:	4b08      	ldr	r3, [pc, #32]	; (8089e58 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj+0x30>)
class CellularHelperEnvironmentCellData { // 44 bytes
 8089e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8089e3a:	6023      	str	r3, [r4, #0]
 8089e3c:	23ff      	movs	r3, #255	; 0xff
 8089e3e:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
 8089e42:	e9c4 3615 	strd	r3, r6, [r4, #84]	; 0x54
 8089e46:	2200      	movs	r2, #0
 8089e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8089e4c:	4620      	mov	r0, r4
 8089e4e:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
	neighbors(neighbors), numNeighbors(numNeighbors) {
 8089e52:	65e5      	str	r5, [r4, #92]	; 0x5c
 8089e54:	6623      	str	r3, [r4, #96]	; 0x60
}
 8089e56:	bd70      	pop	{r4, r5, r6, pc}
 8089e58:	08092d0c 	.word	0x08092d0c

08089e5c <_ZNK33CellularHelperEnvironmentCellData7isValidEb>:
bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {
 8089e5c:	4603      	mov	r3, r0
	if (mcc > 999) {
 8089e5e:	681a      	ldr	r2, [r3, #0]
bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {
 8089e60:	4608      	mov	r0, r1
	if (mcc > 999) {
 8089e62:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8089e66:	da11      	bge.n	8089e8c <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x30>
	if (!ignoreCI) {
 8089e68:	b989      	cbnz	r1, 8089e8e <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x32>
		if (isUMTS) {
 8089e6a:	68d9      	ldr	r1, [r3, #12]
 8089e6c:	7f1b      	ldrb	r3, [r3, #28]
 8089e6e:	b133      	cbz	r3, 8089e7e <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x22>
			if (ci >= 0xfffffff) {
 8089e70:	f06f 4070 	mvn.w	r0, #4026531840	; 0xf0000000
 8089e74:	4281      	cmp	r1, r0
 8089e76:	bfac      	ite	ge
 8089e78:	2000      	movge	r0, #0
 8089e7a:	2001      	movlt	r0, #1
 8089e7c:	4770      	bx	lr
			if (ci >= 0xffff) {
 8089e7e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8089e82:	4281      	cmp	r1, r0
 8089e84:	bfcc      	ite	gt
 8089e86:	2000      	movgt	r0, #0
 8089e88:	2001      	movle	r0, #1
 8089e8a:	4770      	bx	lr
		return false;
 8089e8c:	2000      	movs	r0, #0
}
 8089e8e:	4770      	bx	lr

08089e90 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>:
void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 8089e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089e92:	4605      	mov	r5, r0
 8089e94:	b085      	sub	sp, #20
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 8089e96:	4608      	mov	r0, r1
void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 8089e98:	460f      	mov	r7, r1
 8089e9a:	4614      	mov	r4, r2
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 8089e9c:	f004 fc69 	bl	808e772 <strlen>
 8089ea0:	280f      	cmp	r0, #15
 8089ea2:	d906      	bls.n	8089eb2 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x22>
		Log.info("key too long key=%s value=%s", key, value);
 8089ea4:	4623      	mov	r3, r4
 8089ea6:	463a      	mov	r2, r7
 8089ea8:	495c      	ldr	r1, [pc, #368]	; (808a01c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18c>)
		Log.info("unknown key=%s value=%s", key, value);
 8089eaa:	485d      	ldr	r0, [pc, #372]	; (808a020 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x190>)
 8089eac:	f7f6 ffae 	bl	8080e0c <_ZNK5spark6Logger4infoEPKcz>
 8089eb0:	e019      	b.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	size_t ii = 0;
 8089eb2:	2600      	movs	r6, #0
	for(; key[ii]; ii++) {
 8089eb4:	5db8      	ldrb	r0, [r7, r6]
 8089eb6:	b128      	cbz	r0, 8089ec4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x34>
		ucCopy[ii] = toupper(key[ii]);
 8089eb8:	f005 fb72 	bl	808f5a0 <toupper>
 8089ebc:	f80d 0006 	strb.w	r0, [sp, r6]
	for(; key[ii]; ii++) {
 8089ec0:	3601      	adds	r6, #1
 8089ec2:	e7f7      	b.n	8089eb4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x24>
	ucCopy[ii] = 0;
 8089ec4:	ab04      	add	r3, sp, #16
 8089ec6:	441e      	add	r6, r3
 8089ec8:	f806 0c10 	strb.w	r0, [r6, #-16]
	if (strcmp(ucCopy, "RAT") == 0) {
 8089ecc:	4955      	ldr	r1, [pc, #340]	; (808a024 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x194>)
 8089ece:	4668      	mov	r0, sp
 8089ed0:	f004 fc21 	bl	808e716 <strcmp>
 8089ed4:	b948      	cbnz	r0, 8089eea <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x5a>
		isUMTS = (strstr(value, "UMTS") != NULL);
 8089ed6:	4620      	mov	r0, r4
 8089ed8:	4953      	ldr	r1, [pc, #332]	; (808a028 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x198>)
 8089eda:	f004 fc77 	bl	808e7cc <strstr>
 8089ede:	3800      	subs	r0, #0
 8089ee0:	bf18      	it	ne
 8089ee2:	2001      	movne	r0, #1
 8089ee4:	7728      	strb	r0, [r5, #28]
}
 8089ee6:	b005      	add	sp, #20
 8089ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (strcmp(ucCopy, "MCC") == 0) {
 8089eea:	4668      	mov	r0, sp
 8089eec:	494f      	ldr	r1, [pc, #316]	; (808a02c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x19c>)
 8089eee:	f004 fc12 	bl	808e716 <strcmp>
 8089ef2:	b920      	cbnz	r0, 8089efe <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x6e>
		mcc = atoi(value);
 8089ef4:	4620      	mov	r0, r4
 8089ef6:	f004 fb8e 	bl	808e616 <atoi>
 8089efa:	6028      	str	r0, [r5, #0]
 8089efc:	e7f3      	b.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "MNC") == 0) {
 8089efe:	4668      	mov	r0, sp
 8089f00:	494b      	ldr	r1, [pc, #300]	; (808a030 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a0>)
 8089f02:	f004 fc08 	bl	808e716 <strcmp>
 8089f06:	b920      	cbnz	r0, 8089f12 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x82>
		mnc = atoi(value);
 8089f08:	4620      	mov	r0, r4
 8089f0a:	f004 fb84 	bl	808e616 <atoi>
 8089f0e:	6068      	str	r0, [r5, #4]
 8089f10:	e7e9      	b.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "LAC") == 0) {
 8089f12:	4948      	ldr	r1, [pc, #288]	; (808a034 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a4>)
 8089f14:	4668      	mov	r0, sp
 8089f16:	f004 fbfe 	bl	808e716 <strcmp>
 8089f1a:	4601      	mov	r1, r0
 8089f1c:	b928      	cbnz	r0, 8089f2a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x9a>
		lac = (int) strtol(value, NULL, 16); // hex
 8089f1e:	2210      	movs	r2, #16
 8089f20:	4620      	mov	r0, r4
 8089f22:	f005 fb33 	bl	808f58c <strtol>
 8089f26:	60a8      	str	r0, [r5, #8]
 8089f28:	e7dd      	b.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "CI") == 0) {
 8089f2a:	4943      	ldr	r1, [pc, #268]	; (808a038 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a8>)
 8089f2c:	4668      	mov	r0, sp
 8089f2e:	f004 fbf2 	bl	808e716 <strcmp>
 8089f32:	4601      	mov	r1, r0
 8089f34:	b928      	cbnz	r0, 8089f42 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xb2>
		ci = (int) strtol(value, NULL, 16); // hex
 8089f36:	2210      	movs	r2, #16
 8089f38:	4620      	mov	r0, r4
 8089f3a:	f005 fb27 	bl	808f58c <strtol>
 8089f3e:	60e8      	str	r0, [r5, #12]
 8089f40:	e7d1      	b.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "BSIC") == 0) {
 8089f42:	493e      	ldr	r1, [pc, #248]	; (808a03c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1ac>)
 8089f44:	4668      	mov	r0, sp
 8089f46:	f004 fbe6 	bl	808e716 <strcmp>
 8089f4a:	4601      	mov	r1, r0
 8089f4c:	b928      	cbnz	r0, 8089f5a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xca>
		bsic = (int) strtol(value, NULL, 16); // hex
 8089f4e:	2210      	movs	r2, #16
 8089f50:	4620      	mov	r0, r4
 8089f52:	f005 fb1b 	bl	808f58c <strtol>
 8089f56:	6128      	str	r0, [r5, #16]
 8089f58:	e7c5      	b.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "ARFCN") == 0) { // Usually "Arfcn"
 8089f5a:	4668      	mov	r0, sp
 8089f5c:	4938      	ldr	r1, [pc, #224]	; (808a040 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b0>)
 8089f5e:	f004 fbda 	bl	808e716 <strcmp>
 8089f62:	b920      	cbnz	r0, 8089f6e <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xde>
		arfcn = atoi(value);
 8089f64:	4620      	mov	r0, r4
 8089f66:	f004 fb56 	bl	808e616 <atoi>
 8089f6a:	6168      	str	r0, [r5, #20]
 8089f6c:	e7bb      	b.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "ARFCN_DED") == 0 || strcmp(ucCopy, "RXLEVSUB") == 0 || strcmp(ucCopy, "T_ADV") == 0) {
 8089f6e:	4668      	mov	r0, sp
 8089f70:	4934      	ldr	r1, [pc, #208]	; (808a044 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b4>)
 8089f72:	f004 fbd0 	bl	808e716 <strcmp>
 8089f76:	2800      	cmp	r0, #0
 8089f78:	d0b5      	beq.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 8089f7a:	4668      	mov	r0, sp
 8089f7c:	4932      	ldr	r1, [pc, #200]	; (808a048 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b8>)
 8089f7e:	f004 fbca 	bl	808e716 <strcmp>
 8089f82:	2800      	cmp	r0, #0
 8089f84:	d0af      	beq.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 8089f86:	4668      	mov	r0, sp
 8089f88:	4930      	ldr	r1, [pc, #192]	; (808a04c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1bc>)
 8089f8a:	f004 fbc4 	bl	808e716 <strcmp>
 8089f8e:	2800      	cmp	r0, #0
 8089f90:	d0a9      	beq.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "RXLEV") == 0) { // Sometimes RxLev
 8089f92:	492f      	ldr	r1, [pc, #188]	; (808a050 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c0>)
 8089f94:	4668      	mov	r0, sp
 8089f96:	f004 fbbe 	bl	808e716 <strcmp>
 8089f9a:	4601      	mov	r1, r0
 8089f9c:	b928      	cbnz	r0, 8089faa <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x11a>
		rxlev = (int) strtol(value, NULL, 16); // hex
 8089f9e:	2210      	movs	r2, #16
 8089fa0:	4620      	mov	r0, r4
 8089fa2:	f005 faf3 	bl	808f58c <strtol>
 8089fa6:	61a8      	str	r0, [r5, #24]
 8089fa8:	e79d      	b.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "DLF") == 0) {
 8089faa:	4668      	mov	r0, sp
 8089fac:	4929      	ldr	r1, [pc, #164]	; (808a054 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c4>)
 8089fae:	f004 fbb2 	bl	808e716 <strcmp>
 8089fb2:	b920      	cbnz	r0, 8089fbe <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x12e>
		dlf = atoi(value);
 8089fb4:	4620      	mov	r0, r4
 8089fb6:	f004 fb2e 	bl	808e616 <atoi>
 8089fba:	6228      	str	r0, [r5, #32]
 8089fbc:	e793      	b.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "ULF") == 0) {
 8089fbe:	4668      	mov	r0, sp
 8089fc0:	4925      	ldr	r1, [pc, #148]	; (808a058 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c8>)
 8089fc2:	f004 fba8 	bl	808e716 <strcmp>
 8089fc6:	b930      	cbnz	r0, 8089fd6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x146>
		ulf = atoi(value);
 8089fc8:	4620      	mov	r0, r4
 8089fca:	f004 fb24 	bl	808e616 <atoi>
		isUMTS = true;
 8089fce:	2301      	movs	r3, #1
		ulf = atoi(value);
 8089fd0:	6268      	str	r0, [r5, #36]	; 0x24
		isUMTS = true;
 8089fd2:	772b      	strb	r3, [r5, #28]
 8089fd4:	e787      	b.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "RSCP LEV") == 0) {
 8089fd6:	4668      	mov	r0, sp
 8089fd8:	4920      	ldr	r1, [pc, #128]	; (808a05c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1cc>)
 8089fda:	f004 fb9c 	bl	808e716 <strcmp>
 8089fde:	b920      	cbnz	r0, 8089fea <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x15a>
		rscpLev = atoi(value);
 8089fe0:	4620      	mov	r0, r4
 8089fe2:	f004 fb18 	bl	808e616 <atoi>
 8089fe6:	62a8      	str	r0, [r5, #40]	; 0x28
 8089fe8:	e77d      	b.n	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
	if (strcmp(ucCopy, "RAC") == 0 || strcmp(ucCopy, "SC") == 0 || strcmp(ucCopy, "ECN0 LEV") == 0) {
 8089fea:	4668      	mov	r0, sp
 8089fec:	491c      	ldr	r1, [pc, #112]	; (808a060 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d0>)
 8089fee:	f004 fb92 	bl	808e716 <strcmp>
 8089ff2:	2800      	cmp	r0, #0
 8089ff4:	f43f af77 	beq.w	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 8089ff8:	4668      	mov	r0, sp
 8089ffa:	491a      	ldr	r1, [pc, #104]	; (808a064 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d4>)
 8089ffc:	f004 fb8b 	bl	808e716 <strcmp>
 808a000:	2800      	cmp	r0, #0
 808a002:	f43f af70 	beq.w	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
 808a006:	4668      	mov	r0, sp
 808a008:	4917      	ldr	r1, [pc, #92]	; (808a068 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d8>)
 808a00a:	f004 fb84 	bl	808e716 <strcmp>
 808a00e:	2800      	cmp	r0, #0
 808a010:	f43f af69 	beq.w	8089ee6 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x56>
		Log.info("unknown key=%s value=%s", key, value);
 808a014:	4623      	mov	r3, r4
 808a016:	463a      	mov	r2, r7
 808a018:	4914      	ldr	r1, [pc, #80]	; (808a06c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1dc>)
 808a01a:	e746      	b.n	8089eaa <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a>
 808a01c:	08092b5b 	.word	0x08092b5b
 808a020:	20000e1c 	.word	0x20000e1c
 808a024:	08092b78 	.word	0x08092b78
 808a028:	08092b7c 	.word	0x08092b7c
 808a02c:	08092b81 	.word	0x08092b81
 808a030:	08092b85 	.word	0x08092b85
 808a034:	08092b89 	.word	0x08092b89
 808a038:	08092b8d 	.word	0x08092b8d
 808a03c:	08092b90 	.word	0x08092b90
 808a040:	08092b95 	.word	0x08092b95
 808a044:	08092b9b 	.word	0x08092b9b
 808a048:	08092ba5 	.word	0x08092ba5
 808a04c:	08092bae 	.word	0x08092bae
 808a050:	08092bb4 	.word	0x08092bb4
 808a054:	08092bba 	.word	0x08092bba
 808a058:	08092bbe 	.word	0x08092bbe
 808a05c:	08092bc2 	.word	0x08092bc2
 808a060:	08092bcb 	.word	0x08092bcb
 808a064:	08092bcf 	.word	0x08092bcf
 808a068:	08092bd2 	.word	0x08092bd2
 808a06c:	08092bdb 	.word	0x08092bdb

0808a070 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>:
void CellularHelperEnvironmentCellData::parse(const char *str) {
 808a070:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808a074:	4605      	mov	r5, r0
	char *mutableCopy = strdup(str);
 808a076:	4608      	mov	r0, r1
 808a078:	f004 fb60 	bl	808e73c <strdup>
	char *pair = strtok_r(mutableCopy, ",", &endStr);
 808a07c:	4912      	ldr	r1, [pc, #72]	; (808a0c8 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x58>)
 808a07e:	aa01      	add	r2, sp, #4
	char *mutableCopy = strdup(str);
 808a080:	4604      	mov	r4, r0
			*colon = 0;
 808a082:	2700      	movs	r7, #0
	char *pair = strtok_r(mutableCopy, ",", &endStr);
 808a084:	f005 fa04 	bl	808f490 <strtok_r>
		pair = strtok_r(NULL, ",", &endStr);
 808a088:	4e0f      	ldr	r6, [pc, #60]	; (808a0c8 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x58>)
	while(pair) {
 808a08a:	b1b8      	cbz	r0, 808a0bc <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x4c>
 808a08c:	4680      	mov	r8, r0
		while(*pair == ' ') {
 808a08e:	f898 3000 	ldrb.w	r3, [r8]
 808a092:	3001      	adds	r0, #1
 808a094:	2b20      	cmp	r3, #32
 808a096:	d0f9      	beq.n	808a08c <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x1c>
		char *colon = strchr(pair, ':');
 808a098:	213a      	movs	r1, #58	; 0x3a
 808a09a:	4640      	mov	r0, r8
 808a09c:	f004 fb2e 	bl	808e6fc <strchr>
		if (colon != NULL) {
 808a0a0:	4602      	mov	r2, r0
 808a0a2:	b128      	cbz	r0, 808a0b0 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x40>
			addKeyValue(key, value);
 808a0a4:	4641      	mov	r1, r8
 808a0a6:	4628      	mov	r0, r5
			*colon = 0;
 808a0a8:	f802 7b01 	strb.w	r7, [r2], #1
			addKeyValue(key, value);
 808a0ac:	f7ff fef0 	bl	8089e90 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>
		pair = strtok_r(NULL, ",", &endStr);
 808a0b0:	4631      	mov	r1, r6
 808a0b2:	aa01      	add	r2, sp, #4
 808a0b4:	2000      	movs	r0, #0
 808a0b6:	f005 f9eb 	bl	808f490 <strtok_r>
	while(pair) {
 808a0ba:	e7e6      	b.n	808a08a <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x1a>
	free(mutableCopy);
 808a0bc:	4620      	mov	r0, r4
 808a0be:	f000 fda7 	bl	808ac10 <free>
}
 808a0c2:	b002      	add	sp, #8
 808a0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808a0c8:	08092a26 	.word	0x08092a26

0808a0cc <_ZN33CellularHelperEnvironmentResponse5parseEiPKci>:
int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 808a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (enableDebug) {
 808a0d0:	7a06      	ldrb	r6, [r0, #8]
int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 808a0d2:	4605      	mov	r5, r0
 808a0d4:	460f      	mov	r7, r1
 808a0d6:	4690      	mov	r8, r2
 808a0d8:	461c      	mov	r4, r3
 808a0da:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 808a0dc:	b10e      	cbz	r6, 808a0e2 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x16>
		logCellularDebug(type, buf, len);
 808a0de:	f7ff fd87 	bl	8089bf0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_UNKNOWN || type == TYPE_PLUS) {
 808a0e2:	f437 0980 	bics.w	r9, r7, #4194304	; 0x400000
 808a0e6:	d161      	bne.n	808a1ac <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xe0>
		char *copy = (char *) malloc(len + 1);
 808a0e8:	1c60      	adds	r0, r4, #1
 808a0ea:	f000 fd89 	bl	808ac00 <malloc>
		if (copy) {
 808a0ee:	4606      	mov	r6, r0
 808a0f0:	2800      	cmp	r0, #0
 808a0f2:	d05b      	beq.n	808a1ac <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xe0>
			strncpy(copy, buf, len);
 808a0f4:	4622      	mov	r2, r4
 808a0f6:	4641      	mov	r1, r8
 808a0f8:	f004 fb55 	bl	808e7a6 <strncpy>
			copy[len] = 0;
 808a0fc:	f806 9004 	strb.w	r9, [r6, r4]
			size_t searchForLen = snprintf(searchFor, sizeof(searchFor), "+%s: ", command.c_str());
 808a100:	2120      	movs	r1, #32
 808a102:	68eb      	ldr	r3, [r5, #12]
 808a104:	4a2c      	ldr	r2, [pc, #176]	; (808a1b8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xec>)
 808a106:	a802      	add	r0, sp, #8
 808a108:	f000 fdaa 	bl	808ac60 <snprintf>
			char *line = strtok_r(copy, "\r\n", &endStr);
 808a10c:	492b      	ldr	r1, [pc, #172]	; (808a1bc <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf0>)
			size_t searchForLen = snprintf(searchFor, sizeof(searchFor), "+%s: ", command.c_str());
 808a10e:	4680      	mov	r8, r0
			char *line = strtok_r(copy, "\r\n", &endStr);
 808a110:	aa01      	add	r2, sp, #4
 808a112:	4630      	mov	r0, r6
 808a114:	f005 f9bc 	bl	808f490 <strtok_r>
 808a118:	4604      	mov	r4, r0
					if (strncmp(line, "MCC:", 4) == 0) {
 808a11a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 808a1c0 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf4>
					if (strncmp(line, "RAT:", 4) == 0) {
 808a11e:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 808a1c4 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf8>
				line = strtok_r(NULL, "\r\n", &endStr);
 808a122:	f8df 9098 	ldr.w	r9, [pc, #152]	; 808a1bc <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xf0>
			while(line) {
 808a126:	2c00      	cmp	r4, #0
 808a128:	d03d      	beq.n	808a1a6 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xda>
				if (line[0]) {
 808a12a:	7823      	ldrb	r3, [r4, #0]
 808a12c:	b1d3      	cbz	r3, 808a164 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
					if (type == TYPE_PLUS && strncmp(line, searchFor, searchForLen) == 0) {
 808a12e:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 808a132:	d106      	bne.n	808a142 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x76>
 808a134:	4642      	mov	r2, r8
 808a136:	4620      	mov	r0, r4
 808a138:	a902      	add	r1, sp, #8
 808a13a:	f004 fb22 	bl	808e782 <strncmp>
 808a13e:	b900      	cbnz	r0, 808a142 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x76>
						line += searchForLen;
 808a140:	4444      	add	r4, r8
					if (strncmp(line, "MCC:", 4) == 0) {
 808a142:	2204      	movs	r2, #4
 808a144:	4651      	mov	r1, sl
 808a146:	4620      	mov	r0, r4
 808a148:	f004 fb1b 	bl	808e782 <strncmp>
 808a14c:	bb00      	cbnz	r0, 808a190 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc4>
						if (curDataIndex < 0) {
 808a14e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 808a150:	2b00      	cmp	r3, #0
 808a152:	da0e      	bge.n	808a172 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xa6>
							service.parse(line);
 808a154:	4621      	mov	r1, r4
 808a156:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808a15a:	f7ff ff89 	bl	808a070 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
							curDataIndex++;
 808a15e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 808a160:	3301      	adds	r3, #1
 808a162:	662b      	str	r3, [r5, #96]	; 0x60
				line = strtok_r(NULL, "\r\n", &endStr);
 808a164:	4649      	mov	r1, r9
 808a166:	2000      	movs	r0, #0
 808a168:	aa01      	add	r2, sp, #4
 808a16a:	f005 f991 	bl	808f490 <strtok_r>
 808a16e:	4604      	mov	r4, r0
			while(line) {
 808a170:	e7d9      	b.n	808a126 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x5a>
						if (neighbors && (size_t)curDataIndex < numNeighbors) {
 808a172:	6daa      	ldr	r2, [r5, #88]	; 0x58
 808a174:	2a00      	cmp	r2, #0
 808a176:	d0f5      	beq.n	808a164 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
 808a178:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 808a17a:	428b      	cmp	r3, r1
 808a17c:	d2f2      	bcs.n	808a164 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
							neighbors[curDataIndex++].parse(line);
 808a17e:	202c      	movs	r0, #44	; 0x2c
 808a180:	1c59      	adds	r1, r3, #1
 808a182:	6629      	str	r1, [r5, #96]	; 0x60
 808a184:	4621      	mov	r1, r4
 808a186:	fb00 2003 	mla	r0, r0, r3, r2
						service.parse(line);
 808a18a:	f7ff ff71 	bl	808a070 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
 808a18e:	e7e9      	b.n	808a164 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
					if (strncmp(line, "RAT:", 4) == 0) {
 808a190:	2204      	movs	r2, #4
 808a192:	4659      	mov	r1, fp
 808a194:	4620      	mov	r0, r4
 808a196:	f004 faf4 	bl	808e782 <strncmp>
 808a19a:	2800      	cmp	r0, #0
 808a19c:	d1e2      	bne.n	808a164 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x98>
						service.parse(line);
 808a19e:	4621      	mov	r1, r4
 808a1a0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808a1a4:	e7f1      	b.n	808a18a <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xbe>
			free(copy);
 808a1a6:	4630      	mov	r0, r6
 808a1a8:	f000 fd32 	bl	808ac10 <free>
}
 808a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 808a1b0:	b00b      	add	sp, #44	; 0x2c
 808a1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a1b6:	bf00      	nop
 808a1b8:	08092ce4 	.word	0x08092ce4
 808a1bc:	08092ce0 	.word	0x08092ce0
 808a1c0:	08092bf3 	.word	0x08092bf3
 808a1c4:	08092bf8 	.word	0x08092bf8

0808a1c8 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>:
size_t CellularHelperEnvironmentResponse::getNumNeighbors() const {
 808a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (curDataIndex < 0) {
 808a1ca:	6e05      	ldr	r5, [r0, #96]	; 0x60
 808a1cc:	2d00      	cmp	r5, #0
 808a1ce:	db10      	blt.n	808a1f2 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x2a>
		if (neighbors) {
 808a1d0:	6d86      	ldr	r6, [r0, #88]	; 0x58
 808a1d2:	b15e      	cbz	r6, 808a1ec <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a1d4:	2400      	movs	r4, #0
				if (!neighbors[ii].isValid()) {
 808a1d6:	272c      	movs	r7, #44	; 0x2c
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a1d8:	42ac      	cmp	r4, r5
 808a1da:	d007      	beq.n	808a1ec <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
				if (!neighbors[ii].isValid()) {
 808a1dc:	2100      	movs	r1, #0
 808a1de:	fb07 6004 	mla	r0, r7, r4, r6
 808a1e2:	f7ff fe3b 	bl	8089e5c <_ZNK33CellularHelperEnvironmentCellData7isValidEb>
 808a1e6:	b110      	cbz	r0, 808a1ee <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x26>
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a1e8:	3401      	adds	r4, #1
 808a1ea:	e7f5      	b.n	808a1d8 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x10>
		return curDataIndex;
 808a1ec:	462c      	mov	r4, r5
}
 808a1ee:	4620      	mov	r0, r4
 808a1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 808a1f2:	2400      	movs	r4, #0
 808a1f4:	e7fb      	b.n	808a1ee <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x26>
	...

0808a1f8 <_ZN26CellularHelperCREGResponse11postProcessEv>:
void CellularHelperCREGResponse::postProcess() {
 808a1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a1fc:	f100 0738 	add.w	r7, r0, #56	; 0x38
void CellularHelperCREGResponse::postProcess() {
 808a200:	b086      	sub	sp, #24
	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a202:	f100 083c 	add.w	r8, r0, #60	; 0x3c
 808a206:	e9cd 7801 	strd	r7, r8, [sp, #4]
 808a20a:	f100 0634 	add.w	r6, r0, #52	; 0x34
 808a20e:	f100 0530 	add.w	r5, r0, #48	; 0x30
 808a212:	9600      	str	r6, [sp, #0]
void CellularHelperCREGResponse::postProcess() {
 808a214:	4604      	mov	r4, r0
	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a216:	462b      	mov	r3, r5
 808a218:	490b      	ldr	r1, [pc, #44]	; (808a248 <_ZN26CellularHelperCREGResponse11postProcessEv+0x50>)
 808a21a:	69c0      	ldr	r0, [r0, #28]
 808a21c:	aa05      	add	r2, sp, #20
 808a21e:	f000 fd17 	bl	808ac50 <sscanf>
 808a222:	2805      	cmp	r0, #5
 808a224:	d105      	bne.n	808a232 <_ZN26CellularHelperCREGResponse11postProcessEv+0x3a>
		valid = true;
 808a226:	2301      	movs	r3, #1
 808a228:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 808a22c:	b006      	add	sp, #24
 808a22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sscanf(string.c_str(), "%d,\"%x\",\"%x\",%d", &stat, &lac, &ci, &rat) == 4) {
 808a232:	4633      	mov	r3, r6
 808a234:	462a      	mov	r2, r5
 808a236:	e9cd 7800 	strd	r7, r8, [sp]
 808a23a:	4904      	ldr	r1, [pc, #16]	; (808a24c <_ZN26CellularHelperCREGResponse11postProcessEv+0x54>)
 808a23c:	69e0      	ldr	r0, [r4, #28]
 808a23e:	f000 fd07 	bl	808ac50 <sscanf>
 808a242:	2804      	cmp	r0, #4
 808a244:	d1f2      	bne.n	808a22c <_ZN26CellularHelperCREGResponse11postProcessEv+0x34>
 808a246:	e7ee      	b.n	808a226 <_ZN26CellularHelperCREGResponse11postProcessEv+0x2e>
 808a248:	08092c2d 	.word	0x08092c2d
 808a24c:	08092c30 	.word	0x08092c30

0808a250 <_ZNK26CellularHelperCREGResponse8toStringEv>:
String CellularHelperCREGResponse::toString() const {
 808a250:	b513      	push	{r0, r1, r4, lr}
	if (valid) {
 808a252:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
String CellularHelperCREGResponse::toString() const {
 808a256:	4604      	mov	r4, r0
	if (valid) {
 808a258:	b15b      	cbz	r3, 808a272 <_ZNK26CellularHelperCREGResponse8toStringEv+0x22>
		return String::format("stat=%d lac=0x%x ci=0x%x rat=%d", stat, lac, ci, rat);
 808a25a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 808a25c:	9301      	str	r3, [sp, #4]
 808a25e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 808a260:	9300      	str	r3, [sp, #0]
 808a262:	e9d1 230c 	ldrd	r2, r3, [r1, #48]	; 0x30
 808a266:	4905      	ldr	r1, [pc, #20]	; (808a27c <_ZNK26CellularHelperCREGResponse8toStringEv+0x2c>)
 808a268:	f001 fb2a 	bl	808b8c0 <_ZN6String6formatEPKcz>
}
 808a26c:	4620      	mov	r0, r4
 808a26e:	b002      	add	sp, #8
 808a270:	bd10      	pop	{r4, pc}
		return "valid=false";
 808a272:	4903      	ldr	r1, [pc, #12]	; (808a280 <_ZNK26CellularHelperCREGResponse8toStringEv+0x30>)
 808a274:	f001 f950 	bl	808b518 <_ZN6StringC1EPKc>
 808a278:	e7f8      	b.n	808a26c <_ZNK26CellularHelperCREGResponse8toStringEv+0x1c>
 808a27a:	bf00      	nop
 808a27c:	08092c40 	.word	0x08092c40
 808a280:	08092c21 	.word	0x08092c21

0808a284 <_ZN28CellularHelperStringResponseC1Ev>:
class CellularHelperCommonResponse {
 808a284:	f06f 0302 	mvn.w	r3, #2
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a288:	b510      	push	{r4, lr}
class CellularHelperCommonResponse {
 808a28a:	6043      	str	r3, [r0, #4]
 808a28c:	2300      	movs	r3, #0
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a28e:	4604      	mov	r4, r0
class CellularHelperCommonResponse {
 808a290:	7203      	strb	r3, [r0, #8]
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a292:	4b04      	ldr	r3, [pc, #16]	; (808a2a4 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 808a294:	4904      	ldr	r1, [pc, #16]	; (808a2a8 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 808a296:	f840 3b0c 	str.w	r3, [r0], #12
 808a29a:	f001 f93d 	bl	808b518 <_ZN6StringC1EPKc>
 808a29e:	4620      	mov	r0, r4
 808a2a0:	bd10      	pop	{r4, pc}
 808a2a2:	bf00      	nop
 808a2a4:	08092cf4 	.word	0x08092cf4
 808a2a8:	08092ce2 	.word	0x08092ce2

0808a2ac <_ZN28CellularHelperStringResponseD1Ev>:
 808a2ac:	b510      	push	{r4, lr}
 808a2ae:	4604      	mov	r4, r0
 808a2b0:	4b03      	ldr	r3, [pc, #12]	; (808a2c0 <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 808a2b2:	f840 3b0c 	str.w	r3, [r0], #12
 808a2b6:	f001 f8e5 	bl	808b484 <_ZN6StringD1Ev>
 808a2ba:	4620      	mov	r0, r4
 808a2bc:	bd10      	pop	{r4, pc}
 808a2be:	bf00      	nop
 808a2c0:	08092cf4 	.word	0x08092cf4

0808a2c4 <_ZNK19CellularHelperClass15getManufacturerEv>:
String CellularHelperClass::getManufacturer() const {
 808a2c4:	b510      	push	{r4, lr}
 808a2c6:	4604      	mov	r4, r0
 808a2c8:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a2ca:	a801      	add	r0, sp, #4
 808a2cc:	f7ff ffda 	bl	808a284 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808a2d0:	f242 7210 	movw	r2, #10000	; 0x2710
 808a2d4:	4b07      	ldr	r3, [pc, #28]	; (808a2f4 <_ZNK19CellularHelperClass15getManufacturerEv+0x30>)
 808a2d6:	a901      	add	r1, sp, #4
 808a2d8:	4807      	ldr	r0, [pc, #28]	; (808a2f8 <_ZNK19CellularHelperClass15getManufacturerEv+0x34>)
 808a2da:	f000 fb41 	bl	808a960 <cellular_command>
	return resp.string;
 808a2de:	a904      	add	r1, sp, #16
 808a2e0:	4620      	mov	r0, r4
 808a2e2:	f001 f958 	bl	808b596 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808a2e6:	a801      	add	r0, sp, #4
 808a2e8:	f7ff ffe0 	bl	808a2ac <_ZN28CellularHelperStringResponseD1Ev>
}
 808a2ec:	4620      	mov	r0, r4
 808a2ee:	b008      	add	sp, #32
 808a2f0:	bd10      	pop	{r4, pc}
 808a2f2:	bf00      	nop
 808a2f4:	08092c60 	.word	0x08092c60
 808a2f8:	08089bd9 	.word	0x08089bd9

0808a2fc <_ZNK19CellularHelperClass8getModelEv>:
String CellularHelperClass::getModel() const {
 808a2fc:	b510      	push	{r4, lr}
 808a2fe:	4604      	mov	r4, r0
 808a300:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a302:	a801      	add	r0, sp, #4
 808a304:	f7ff ffbe 	bl	808a284 <_ZN28CellularHelperStringResponseC1Ev>
 808a308:	f242 7210 	movw	r2, #10000	; 0x2710
 808a30c:	4b07      	ldr	r3, [pc, #28]	; (808a32c <_ZNK19CellularHelperClass8getModelEv+0x30>)
 808a30e:	a901      	add	r1, sp, #4
 808a310:	4807      	ldr	r0, [pc, #28]	; (808a330 <_ZNK19CellularHelperClass8getModelEv+0x34>)
 808a312:	f000 fb25 	bl	808a960 <cellular_command>
	return resp.string;
 808a316:	a904      	add	r1, sp, #16
 808a318:	4620      	mov	r0, r4
 808a31a:	f001 f93c 	bl	808b596 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808a31e:	a801      	add	r0, sp, #4
 808a320:	f7ff ffc4 	bl	808a2ac <_ZN28CellularHelperStringResponseD1Ev>
}
 808a324:	4620      	mov	r0, r4
 808a326:	b008      	add	sp, #32
 808a328:	bd10      	pop	{r4, pc}
 808a32a:	bf00      	nop
 808a32c:	08092c6a 	.word	0x08092c6a
 808a330:	08089bd9 	.word	0x08089bd9

0808a334 <_ZNK19CellularHelperClass7getIMEIEv>:
String CellularHelperClass::getIMEI() const {
 808a334:	b510      	push	{r4, lr}
 808a336:	4604      	mov	r4, r0
 808a338:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a33a:	a801      	add	r0, sp, #4
 808a33c:	f7ff ffa2 	bl	808a284 <_ZN28CellularHelperStringResponseC1Ev>
 808a340:	f242 7210 	movw	r2, #10000	; 0x2710
 808a344:	4b07      	ldr	r3, [pc, #28]	; (808a364 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 808a346:	a901      	add	r1, sp, #4
 808a348:	4807      	ldr	r0, [pc, #28]	; (808a368 <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 808a34a:	f000 fb09 	bl	808a960 <cellular_command>
	return resp.string;
 808a34e:	a904      	add	r1, sp, #16
 808a350:	4620      	mov	r0, r4
 808a352:	f001 f920 	bl	808b596 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808a356:	a801      	add	r0, sp, #4
 808a358:	f7ff ffa8 	bl	808a2ac <_ZN28CellularHelperStringResponseD1Ev>
}
 808a35c:	4620      	mov	r0, r4
 808a35e:	b008      	add	sp, #32
 808a360:	bd10      	pop	{r4, pc}
 808a362:	bf00      	nop
 808a364:	08092c74 	.word	0x08092c74
 808a368:	08089bd9 	.word	0x08089bd9

0808a36c <_ZNK19CellularHelperClass7getIMSIEv>:
 808a36c:	b510      	push	{r4, lr}
 808a36e:	4604      	mov	r4, r0
 808a370:	f7ff ffa8 	bl	808a2c4 <_ZNK19CellularHelperClass15getManufacturerEv>
 808a374:	4620      	mov	r0, r4
 808a376:	bd10      	pop	{r4, pc}

0808a378 <_ZNK19CellularHelperClass8getICCIDEv>:
String CellularHelperClass::getICCID() const {
 808a378:	b510      	push	{r4, lr}
 808a37a:	4604      	mov	r4, r0
 808a37c:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 808a37e:	a801      	add	r0, sp, #4
 808a380:	f7ff fd28 	bl	8089dd4 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 808a384:	490a      	ldr	r1, [pc, #40]	; (808a3b0 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 808a386:	a804      	add	r0, sp, #16
 808a388:	f001 f918 	bl	808b5bc <_ZN6StringaSEPKc>
 808a38c:	f242 7210 	movw	r2, #10000	; 0x2710
 808a390:	4b08      	ldr	r3, [pc, #32]	; (808a3b4 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 808a392:	a901      	add	r1, sp, #4
 808a394:	4808      	ldr	r0, [pc, #32]	; (808a3b8 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 808a396:	f000 fae3 	bl	808a960 <cellular_command>
	return resp.string;
 808a39a:	a908      	add	r1, sp, #32
 808a39c:	4620      	mov	r0, r4
 808a39e:	f001 f8fa 	bl	808b596 <_ZN6StringC1ERKS_>
	CellularHelperPlusStringResponse resp;
 808a3a2:	a801      	add	r0, sp, #4
 808a3a4:	f7ff fd30 	bl	8089e08 <_ZN32CellularHelperPlusStringResponseD1Ev>
}
 808a3a8:	4620      	mov	r0, r4
 808a3aa:	b00c      	add	sp, #48	; 0x30
 808a3ac:	bd10      	pop	{r4, pc}
 808a3ae:	bf00      	nop
 808a3b0:	08092c7e 	.word	0x08092c7e
 808a3b4:	08092c83 	.word	0x08092c83
 808a3b8:	08089bd9 	.word	0x08089bd9

0808a3bc <_ZNK19CellularHelperClass5isLTEEv>:
bool CellularHelperClass::isLTE() const {
 808a3bc:	b510      	push	{r4, lr}
 808a3be:	b088      	sub	sp, #32
 808a3c0:	4601      	mov	r1, r0
	return getModel().startsWith("SARA-R4");
 808a3c2:	4668      	mov	r0, sp
 808a3c4:	f7ff ff9a 	bl	808a2fc <_ZNK19CellularHelperClass8getModelEv>
 808a3c8:	4909      	ldr	r1, [pc, #36]	; (808a3f0 <_ZNK19CellularHelperClass5isLTEEv+0x34>)
 808a3ca:	a804      	add	r0, sp, #16
 808a3cc:	f001 f8a4 	bl	808b518 <_ZN6StringC1EPKc>
 808a3d0:	a904      	add	r1, sp, #16
 808a3d2:	4668      	mov	r0, sp
 808a3d4:	f001 fa1f 	bl	808b816 <_ZNK6String10startsWithERKS_>
 808a3d8:	4604      	mov	r4, r0
 808a3da:	a804      	add	r0, sp, #16
 808a3dc:	f001 f852 	bl	808b484 <_ZN6StringD1Ev>
 808a3e0:	4668      	mov	r0, sp
 808a3e2:	f001 f84f 	bl	808b484 <_ZN6StringD1Ev>
}
 808a3e6:	1e20      	subs	r0, r4, #0
 808a3e8:	bf18      	it	ne
 808a3ea:	2001      	movne	r0, #1
 808a3ec:	b008      	add	sp, #32
 808a3ee:	bd10      	pop	{r4, pc}
 808a3f0:	08092c8d 	.word	0x08092c8d

0808a3f4 <_ZNK19CellularHelperClass15getOperatorNameEi>:
String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a3f4:	b530      	push	{r4, r5, lr}
 808a3f6:	4615      	mov	r5, r2
 808a3f8:	b093      	sub	sp, #76	; 0x4c
	String result;
 808a3fa:	4913      	ldr	r1, [pc, #76]	; (808a448 <_ZNK19CellularHelperClass15getOperatorNameEi+0x54>)
String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a3fc:	4604      	mov	r4, r0
	String result;
 808a3fe:	f001 f88b 	bl	808b518 <_ZN6StringC1EPKc>
	CellularHelperPlusStringResponse resp;
 808a402:	a807      	add	r0, sp, #28
 808a404:	f7ff fce6 	bl	8089dd4 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "UDOPN";
 808a408:	4910      	ldr	r1, [pc, #64]	; (808a44c <_ZNK19CellularHelperClass15getOperatorNameEi+0x58>)
 808a40a:	a80a      	add	r0, sp, #40	; 0x28
 808a40c:	f001 f8d6 	bl	808b5bc <_ZN6StringaSEPKc>
 808a410:	f242 7210 	movw	r2, #10000	; 0x2710
 808a414:	4b0e      	ldr	r3, [pc, #56]	; (808a450 <_ZNK19CellularHelperClass15getOperatorNameEi+0x5c>)
 808a416:	480f      	ldr	r0, [pc, #60]	; (808a454 <_ZNK19CellularHelperClass15getOperatorNameEi+0x60>)
 808a418:	9500      	str	r5, [sp, #0]
 808a41a:	a907      	add	r1, sp, #28
 808a41c:	f000 faa0 	bl	808a960 <cellular_command>
	if (respCode == RESP_OK) {
 808a420:	3002      	adds	r0, #2
 808a422:	d10b      	bne.n	808a43c <_ZNK19CellularHelperClass15getOperatorNameEi+0x48>
		result = resp.getDoubleQuotedPart();
 808a424:	2201      	movs	r2, #1
 808a426:	a907      	add	r1, sp, #28
 808a428:	a803      	add	r0, sp, #12
 808a42a:	f7ff fca5 	bl	8089d78 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>
 808a42e:	4620      	mov	r0, r4
 808a430:	a903      	add	r1, sp, #12
 808a432:	f001 f8bb 	bl	808b5ac <_ZN6StringaSEOS_>
 808a436:	a803      	add	r0, sp, #12
 808a438:	f001 f824 	bl	808b484 <_ZN6StringD1Ev>
	CellularHelperPlusStringResponse resp;
 808a43c:	a807      	add	r0, sp, #28
 808a43e:	f7ff fce3 	bl	8089e08 <_ZN32CellularHelperPlusStringResponseD1Ev>
}
 808a442:	4620      	mov	r0, r4
 808a444:	b013      	add	sp, #76	; 0x4c
 808a446:	bd30      	pop	{r4, r5, pc}
 808a448:	08092ce2 	.word	0x08092ce2
 808a44c:	08092c95 	.word	0x08092c95
 808a450:	08092c9b 	.word	0x08092c9b
 808a454:	08089bd9 	.word	0x08089bd9

0808a458 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>:
void CellularHelperClass::getEnvironment(int mode, CellularHelperEnvironmentResponse &resp) const {
 808a458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808a45a:	4614      	mov	r4, r2
 808a45c:	460d      	mov	r5, r1
	resp.command = "CGED";
 808a45e:	f102 000c 	add.w	r0, r2, #12
 808a462:	4907      	ldr	r1, [pc, #28]	; (808a480 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x28>)
 808a464:	f001 f8aa 	bl	808b5bc <_ZN6StringaSEPKc>
 808a468:	f242 7210 	movw	r2, #10000	; 0x2710
 808a46c:	4621      	mov	r1, r4
 808a46e:	4b05      	ldr	r3, [pc, #20]	; (808a484 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x2c>)
 808a470:	9500      	str	r5, [sp, #0]
 808a472:	4805      	ldr	r0, [pc, #20]	; (808a488 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x30>)
 808a474:	f000 fa74 	bl	808a960 <cellular_command>
	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGED=%d\r\n", mode);
 808a478:	6060      	str	r0, [r4, #4]
}
 808a47a:	b003      	add	sp, #12
 808a47c:	bd30      	pop	{r4, r5, pc}
 808a47e:	bf00      	nop
 808a480:	08092ca9 	.word	0x08092ca9
 808a484:	08092cae 	.word	0x08092cae
 808a488:	08089bd9 	.word	0x08089bd9

0808a48c <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>:
void CellularHelperClass::getCREG(CellularHelperCREGResponse &resp) const {
 808a48c:	b510      	push	{r4, lr}
 808a48e:	460c      	mov	r4, r1
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a490:	2100      	movs	r1, #0
 808a492:	f242 7210 	movw	r2, #10000	; 0x2710
 808a496:	4608      	mov	r0, r1
 808a498:	4b10      	ldr	r3, [pc, #64]	; (808a4dc <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x50>)
 808a49a:	f000 fa61 	bl	808a960 <cellular_command>
	if (tempResp == RESP_OK) {
 808a49e:	3002      	adds	r0, #2
 808a4a0:	d11a      	bne.n	808a4d8 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
		resp.command = "CREG";
 808a4a2:	490f      	ldr	r1, [pc, #60]	; (808a4e0 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x54>)
 808a4a4:	f104 000c 	add.w	r0, r4, #12
 808a4a8:	f001 f888 	bl	808b5bc <_ZN6StringaSEPKc>
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808a4ac:	f242 7210 	movw	r2, #10000	; 0x2710
 808a4b0:	4621      	mov	r1, r4
 808a4b2:	4b0c      	ldr	r3, [pc, #48]	; (808a4e4 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x58>)
 808a4b4:	480c      	ldr	r0, [pc, #48]	; (808a4e8 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x5c>)
 808a4b6:	f000 fa53 	bl	808a960 <cellular_command>
		resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CREG?\r\n");
 808a4ba:	6060      	str	r0, [r4, #4]
		if (resp.resp == RESP_OK) {
 808a4bc:	3002      	adds	r0, #2
 808a4be:	d10b      	bne.n	808a4d8 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
			resp.postProcess();
 808a4c0:	4620      	mov	r0, r4
 808a4c2:	f7ff fe99 	bl	808a1f8 <_ZN26CellularHelperCREGResponse11postProcessEv>
}
 808a4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a4ca:	2100      	movs	r1, #0
 808a4cc:	f242 7210 	movw	r2, #10000	; 0x2710
 808a4d0:	4608      	mov	r0, r1
 808a4d2:	4b06      	ldr	r3, [pc, #24]	; (808a4ec <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x60>)
 808a4d4:	f000 ba44 	b.w	808a960 <cellular_command>
 808a4d8:	bd10      	pop	{r4, pc}
 808a4da:	bf00      	nop
 808a4dc:	08092cbb 	.word	0x08092cbb
 808a4e0:	08092cc7 	.word	0x08092cc7
 808a4e4:	08092ccc 	.word	0x08092ccc
 808a4e8:	08089bd9 	.word	0x08089bd9
 808a4ec:	08092cd7 	.word	0x08092cd7

0808a4f0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a4f4:	460c      	mov	r4, r1
 808a4f6:	461e      	mov	r6, r3
	str.reserve(str.length() + (size_t)len + 1);
 808a4f8:	1c59      	adds	r1, r3, #1
 808a4fa:	68a3      	ldr	r3, [r4, #8]
 808a4fc:	4620      	mov	r0, r4
 808a4fe:	4419      	add	r1, r3
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a500:	4617      	mov	r7, r2
 808a502:	f89d 8018 	ldrb.w	r8, [sp, #24]
	for(int ii = 0; ii < len; ii++) {
 808a506:	2500      	movs	r5, #0
	str.reserve(str.length() + (size_t)len + 1);
 808a508:	f000 ffda 	bl	808b4c0 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 808a50c:	42b5      	cmp	r5, r6
 808a50e:	da0c      	bge.n	808a52a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 808a510:	5d79      	ldrb	r1, [r7, r5]
 808a512:	f1b8 0f00 	cmp.w	r8, #0
 808a516:	d003      	beq.n	808a520 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x30>
 808a518:	290d      	cmp	r1, #13
 808a51a:	d004      	beq.n	808a526 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
 808a51c:	290a      	cmp	r1, #10
 808a51e:	d002      	beq.n	808a526 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
			str.concat(buf[ii]);
 808a520:	4620      	mov	r0, r4
 808a522:	f001 f8ea 	bl	808b6fa <_ZN6String6concatEc>
	for(int ii = 0; ii < len; ii++) {
 808a526:	3501      	adds	r5, #1
 808a528:	e7f0      	b.n	808a50c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
}
 808a52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808a530 <_ZN28CellularHelperStringResponse5parseEiPKci>:
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a532:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a536:	4604      	mov	r4, r0
 808a538:	460f      	mov	r7, r1
 808a53a:	4615      	mov	r5, r2
 808a53c:	461e      	mov	r6, r3
	if (enableDebug) {
 808a53e:	f1bc 0f00 	cmp.w	ip, #0
 808a542:	d001      	beq.n	808a548 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 808a544:	f7ff fb54 	bl	8089bf0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_UNKNOWN) {
 808a548:	b947      	cbnz	r7, 808a55c <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 808a54a:	2301      	movs	r3, #1
 808a54c:	462a      	mov	r2, r5
 808a54e:	9300      	str	r3, [sp, #0]
 808a550:	4804      	ldr	r0, [pc, #16]	; (808a564 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 808a552:	4633      	mov	r3, r6
 808a554:	f104 010c 	add.w	r1, r4, #12
 808a558:	f7ff ffca 	bl	808a4f0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
}
 808a55c:	f04f 30ff 	mov.w	r0, #4294967295
 808a560:	b003      	add	sp, #12
 808a562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a564:	20000e08 	.word	0x20000e08

0808a568 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a568:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a56a:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a56e:	4606      	mov	r6, r0
 808a570:	460d      	mov	r5, r1
 808a572:	4617      	mov	r7, r2
 808a574:	461c      	mov	r4, r3
 808a576:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 808a578:	f1bc 0f00 	cmp.w	ip, #0
 808a57c:	d001      	beq.n	808a582 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 808a57e:	f7ff fb37 	bl	8089bf0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_PLUS) {
 808a582:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 808a586:	d12a      	bne.n	808a5de <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		char *copy = (char *) malloc(len + 1);
 808a588:	1c60      	adds	r0, r4, #1
 808a58a:	f000 fb39 	bl	808ac00 <malloc>
		if (copy) {
 808a58e:	4605      	mov	r5, r0
 808a590:	b328      	cbz	r0, 808a5de <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 808a592:	4622      	mov	r2, r4
 808a594:	4639      	mov	r1, r7
 808a596:	f004 f906 	bl	808e7a6 <strncpy>
			copy[len] = 0;
 808a59a:	2300      	movs	r3, #0
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808a59c:	2120      	movs	r1, #32
			copy[len] = 0;
 808a59e:	552b      	strb	r3, [r5, r4]
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808a5a0:	4a11      	ldr	r2, [pc, #68]	; (808a5e8 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 808a5a2:	68f3      	ldr	r3, [r6, #12]
 808a5a4:	a802      	add	r0, sp, #8
 808a5a6:	f000 fb5b 	bl	808ac60 <snprintf>
			char *start = strstr(copy, searchFor);
 808a5aa:	4628      	mov	r0, r5
 808a5ac:	a902      	add	r1, sp, #8
 808a5ae:	f004 f90d 	bl	808e7cc <strstr>
			if (start) {
 808a5b2:	4604      	mov	r4, r0
 808a5b4:	b180      	cbz	r0, 808a5d8 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 808a5b6:	a802      	add	r0, sp, #8
 808a5b8:	f004 f8db 	bl	808e772 <strlen>
 808a5bc:	4404      	add	r4, r0
				char *end = strchr(start, '\r');
 808a5be:	210d      	movs	r1, #13
 808a5c0:	4620      	mov	r0, r4
 808a5c2:	f004 f89b 	bl	808e6fc <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 808a5c6:	2301      	movs	r3, #1
 808a5c8:	4622      	mov	r2, r4
 808a5ca:	9300      	str	r3, [sp, #0]
 808a5cc:	f106 011c 	add.w	r1, r6, #28
 808a5d0:	1b03      	subs	r3, r0, r4
 808a5d2:	4806      	ldr	r0, [pc, #24]	; (808a5ec <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 808a5d4:	f7ff ff8c 	bl	808a4f0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			free(copy);
 808a5d8:	4628      	mov	r0, r5
 808a5da:	f000 fb19 	bl	808ac10 <free>
}
 808a5de:	f04f 30ff 	mov.w	r0, #4294967295
 808a5e2:	b00b      	add	sp, #44	; 0x2c
 808a5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a5e6:	bf00      	nop
 808a5e8:	08092ce3 	.word	0x08092ce3
 808a5ec:	20000e08 	.word	0x20000e08

0808a5f0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808a5f0:	b508      	push	{r3, lr}
 808a5f2:	4b02      	ldr	r3, [pc, #8]	; (808a5fc <HAL_Validate_Pin_Function+0xc>)
 808a5f4:	681b      	ldr	r3, [r3, #0]
 808a5f6:	685b      	ldr	r3, [r3, #4]
 808a5f8:	9301      	str	r3, [sp, #4]
 808a5fa:	bd08      	pop	{r3, pc}
 808a5fc:	080401b0 	.word	0x080401b0

0808a600 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808a600:	b508      	push	{r3, lr}
 808a602:	4b02      	ldr	r3, [pc, #8]	; (808a60c <HAL_Pin_Mode+0xc>)
 808a604:	681b      	ldr	r3, [r3, #0]
 808a606:	689b      	ldr	r3, [r3, #8]
 808a608:	9301      	str	r3, [sp, #4]
 808a60a:	bd08      	pop	{r3, pc}
 808a60c:	080401b0 	.word	0x080401b0

0808a610 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808a610:	b508      	push	{r3, lr}
 808a612:	4b02      	ldr	r3, [pc, #8]	; (808a61c <HAL_Get_Pin_Mode+0xc>)
 808a614:	681b      	ldr	r3, [r3, #0]
 808a616:	68db      	ldr	r3, [r3, #12]
 808a618:	9301      	str	r3, [sp, #4]
 808a61a:	bd08      	pop	{r3, pc}
 808a61c:	080401b0 	.word	0x080401b0

0808a620 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808a620:	b508      	push	{r3, lr}
 808a622:	4b02      	ldr	r3, [pc, #8]	; (808a62c <HAL_GPIO_Write+0xc>)
 808a624:	681b      	ldr	r3, [r3, #0]
 808a626:	691b      	ldr	r3, [r3, #16]
 808a628:	9301      	str	r3, [sp, #4]
 808a62a:	bd08      	pop	{r3, pc}
 808a62c:	080401b0 	.word	0x080401b0

0808a630 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808a630:	b508      	push	{r3, lr}
 808a632:	4b02      	ldr	r3, [pc, #8]	; (808a63c <HAL_GPIO_Read+0xc>)
 808a634:	681b      	ldr	r3, [r3, #0]
 808a636:	695b      	ldr	r3, [r3, #20]
 808a638:	9301      	str	r3, [sp, #4]
 808a63a:	bd08      	pop	{r3, pc}
 808a63c:	080401b0 	.word	0x080401b0

0808a640 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 808a640:	b508      	push	{r3, lr}
 808a642:	4b02      	ldr	r3, [pc, #8]	; (808a64c <HAL_Interrupts_Attach+0xc>)
 808a644:	681b      	ldr	r3, [r3, #0]
 808a646:	699b      	ldr	r3, [r3, #24]
 808a648:	9301      	str	r3, [sp, #4]
 808a64a:	bd08      	pop	{r3, pc}
 808a64c:	080401b0 	.word	0x080401b0

0808a650 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 808a650:	b508      	push	{r3, lr}
 808a652:	4b02      	ldr	r3, [pc, #8]	; (808a65c <HAL_Interrupts_Detach+0xc>)
 808a654:	681b      	ldr	r3, [r3, #0]
 808a656:	69db      	ldr	r3, [r3, #28]
 808a658:	9301      	str	r3, [sp, #4]
 808a65a:	bd08      	pop	{r3, pc}
 808a65c:	080401b0 	.word	0x080401b0

0808a660 <hal_adc_set_sample_time>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
 808a660:	b508      	push	{r3, lr}
 808a662:	4b02      	ldr	r3, [pc, #8]	; (808a66c <hal_adc_set_sample_time+0xc>)
 808a664:	681b      	ldr	r3, [r3, #0]
 808a666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a668:	9301      	str	r3, [sp, #4]
 808a66a:	bd08      	pop	{r3, pc}
 808a66c:	080401b0 	.word	0x080401b0

0808a670 <hal_adc_read>:
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 808a670:	b508      	push	{r3, lr}
 808a672:	4b02      	ldr	r3, [pc, #8]	; (808a67c <hal_adc_read+0xc>)
 808a674:	681b      	ldr	r3, [r3, #0]
 808a676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a678:	9301      	str	r3, [sp, #4]
 808a67a:	bd08      	pop	{r3, pc}
 808a67c:	080401b0 	.word	0x080401b0

0808a680 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808a680:	b508      	push	{r3, lr}
 808a682:	4b02      	ldr	r3, [pc, #8]	; (808a68c <HAL_RNG_GetRandomNumber+0xc>)
 808a684:	681b      	ldr	r3, [r3, #0]
 808a686:	685b      	ldr	r3, [r3, #4]
 808a688:	9301      	str	r3, [sp, #4]
 808a68a:	bd08      	pop	{r3, pc}
 808a68c:	0804019c 	.word	0x0804019c

0808a690 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 808a690:	b508      	push	{r3, lr}
 808a692:	4b02      	ldr	r3, [pc, #8]	; (808a69c <HAL_Delay_Microseconds+0xc>)
 808a694:	681b      	ldr	r3, [r3, #0]
 808a696:	68db      	ldr	r3, [r3, #12]
 808a698:	9301      	str	r3, [sp, #4]
 808a69a:	bd08      	pop	{r3, pc}
 808a69c:	0804019c 	.word	0x0804019c

0808a6a0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808a6a0:	b508      	push	{r3, lr}
 808a6a2:	4b02      	ldr	r3, [pc, #8]	; (808a6ac <HAL_Timer_Get_Milli_Seconds+0xc>)
 808a6a4:	681b      	ldr	r3, [r3, #0]
 808a6a6:	695b      	ldr	r3, [r3, #20]
 808a6a8:	9301      	str	r3, [sp, #4]
 808a6aa:	bd08      	pop	{r3, pc}
 808a6ac:	0804019c 	.word	0x0804019c

0808a6b0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 808a6b0:	b508      	push	{r3, lr}
 808a6b2:	4b02      	ldr	r3, [pc, #8]	; (808a6bc <HAL_EEPROM_Init+0xc>)
 808a6b4:	681b      	ldr	r3, [r3, #0]
 808a6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a6b8:	9301      	str	r3, [sp, #4]
 808a6ba:	bd08      	pop	{r3, pc}
 808a6bc:	0804019c 	.word	0x0804019c

0808a6c0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 808a6c0:	b508      	push	{r3, lr}
 808a6c2:	4b02      	ldr	r3, [pc, #8]	; (808a6cc <HAL_EEPROM_Get+0xc>)
 808a6c4:	681b      	ldr	r3, [r3, #0]
 808a6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a6c8:	9301      	str	r3, [sp, #4]
 808a6ca:	bd08      	pop	{r3, pc}
 808a6cc:	0804019c 	.word	0x0804019c

0808a6d0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 808a6d0:	b508      	push	{r3, lr}
 808a6d2:	4b02      	ldr	r3, [pc, #8]	; (808a6dc <HAL_EEPROM_Put+0xc>)
 808a6d4:	681b      	ldr	r3, [r3, #0]
 808a6d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a6d8:	9301      	str	r3, [sp, #4]
 808a6da:	bd08      	pop	{r3, pc}
 808a6dc:	0804019c 	.word	0x0804019c

0808a6e0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 808a6e0:	b508      	push	{r3, lr}
 808a6e2:	4b02      	ldr	r3, [pc, #8]	; (808a6ec <hal_rtc_time_is_valid+0xc>)
 808a6e4:	681b      	ldr	r3, [r3, #0]
 808a6e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808a6e8:	9301      	str	r3, [sp, #4]
 808a6ea:	bd08      	pop	{r3, pc}
 808a6ec:	0804019c 	.word	0x0804019c

0808a6f0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 808a6f0:	b508      	push	{r3, lr}
 808a6f2:	4b02      	ldr	r3, [pc, #8]	; (808a6fc <hal_rtc_get_time+0xc>)
 808a6f4:	681b      	ldr	r3, [r3, #0]
 808a6f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808a6f8:	9301      	str	r3, [sp, #4]
 808a6fa:	bd08      	pop	{r3, pc}
 808a6fc:	0804019c 	.word	0x0804019c

0808a700 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 808a700:	b508      	push	{r3, lr}
 808a702:	4b02      	ldr	r3, [pc, #8]	; (808a70c <hal_rtc_set_time+0xc>)
 808a704:	681b      	ldr	r3, [r3, #0]
 808a706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808a708:	9301      	str	r3, [sp, #4]
 808a70a:	bd08      	pop	{r3, pc}
 808a70c:	0804019c 	.word	0x0804019c

0808a710 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 808a710:	b508      	push	{r3, lr}
 808a712:	4b02      	ldr	r3, [pc, #8]	; (808a71c <os_mutex_recursive_create+0xc>)
 808a714:	681b      	ldr	r3, [r3, #0]
 808a716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a718:	9301      	str	r3, [sp, #4]
 808a71a:	bd08      	pop	{r3, pc}
 808a71c:	080401d0 	.word	0x080401d0

0808a720 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 808a720:	b508      	push	{r3, lr}
 808a722:	4b02      	ldr	r3, [pc, #8]	; (808a72c <os_mutex_recursive_destroy+0xc>)
 808a724:	681b      	ldr	r3, [r3, #0]
 808a726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a728:	9301      	str	r3, [sp, #4]
 808a72a:	bd08      	pop	{r3, pc}
 808a72c:	080401d0 	.word	0x080401d0

0808a730 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 808a730:	b508      	push	{r3, lr}
 808a732:	4b02      	ldr	r3, [pc, #8]	; (808a73c <os_mutex_recursive_lock+0xc>)
 808a734:	681b      	ldr	r3, [r3, #0]
 808a736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a738:	9301      	str	r3, [sp, #4]
 808a73a:	bd08      	pop	{r3, pc}
 808a73c:	080401d0 	.word	0x080401d0

0808a740 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 808a740:	b508      	push	{r3, lr}
 808a742:	4b02      	ldr	r3, [pc, #8]	; (808a74c <os_mutex_recursive_unlock+0xc>)
 808a744:	681b      	ldr	r3, [r3, #0]
 808a746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808a748:	9301      	str	r3, [sp, #4]
 808a74a:	bd08      	pop	{r3, pc}
 808a74c:	080401d0 	.word	0x080401d0

0808a750 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 808a750:	b508      	push	{r3, lr}
 808a752:	4b02      	ldr	r3, [pc, #8]	; (808a75c <hal_usart_init+0xc>)
 808a754:	681b      	ldr	r3, [r3, #0]
 808a756:	699b      	ldr	r3, [r3, #24]
 808a758:	9301      	str	r3, [sp, #4]
 808a75a:	bd08      	pop	{r3, pc}
 808a75c:	080401c4 	.word	0x080401c4

0808a760 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 808a760:	b508      	push	{r3, lr}
 808a762:	4b02      	ldr	r3, [pc, #8]	; (808a76c <hal_usart_write+0xc>)
 808a764:	681b      	ldr	r3, [r3, #0]
 808a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a768:	9301      	str	r3, [sp, #4]
 808a76a:	bd08      	pop	{r3, pc}
 808a76c:	080401c4 	.word	0x080401c4

0808a770 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 808a770:	b508      	push	{r3, lr}
 808a772:	4b02      	ldr	r3, [pc, #8]	; (808a77c <hal_usart_available+0xc>)
 808a774:	681b      	ldr	r3, [r3, #0]
 808a776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a778:	9301      	str	r3, [sp, #4]
 808a77a:	bd08      	pop	{r3, pc}
 808a77c:	080401c4 	.word	0x080401c4

0808a780 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 808a780:	b508      	push	{r3, lr}
 808a782:	4b02      	ldr	r3, [pc, #8]	; (808a78c <hal_usart_read+0xc>)
 808a784:	681b      	ldr	r3, [r3, #0]
 808a786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a788:	9301      	str	r3, [sp, #4]
 808a78a:	bd08      	pop	{r3, pc}
 808a78c:	080401c4 	.word	0x080401c4

0808a790 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 808a790:	b508      	push	{r3, lr}
 808a792:	4b02      	ldr	r3, [pc, #8]	; (808a79c <hal_usart_peek+0xc>)
 808a794:	681b      	ldr	r3, [r3, #0]
 808a796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a798:	9301      	str	r3, [sp, #4]
 808a79a:	bd08      	pop	{r3, pc}
 808a79c:	080401c4 	.word	0x080401c4

0808a7a0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 808a7a0:	b508      	push	{r3, lr}
 808a7a2:	4b02      	ldr	r3, [pc, #8]	; (808a7ac <hal_usart_flush+0xc>)
 808a7a4:	681b      	ldr	r3, [r3, #0]
 808a7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a7a8:	9301      	str	r3, [sp, #4]
 808a7aa:	bd08      	pop	{r3, pc}
 808a7ac:	080401c4 	.word	0x080401c4

0808a7b0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 808a7b0:	b508      	push	{r3, lr}
 808a7b2:	4b02      	ldr	r3, [pc, #8]	; (808a7bc <hal_usart_is_enabled+0xc>)
 808a7b4:	681b      	ldr	r3, [r3, #0]
 808a7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a7b8:	9301      	str	r3, [sp, #4]
 808a7ba:	bd08      	pop	{r3, pc}
 808a7bc:	080401c4 	.word	0x080401c4

0808a7c0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 808a7c0:	b508      	push	{r3, lr}
 808a7c2:	4b02      	ldr	r3, [pc, #8]	; (808a7cc <hal_usart_available_data_for_write+0xc>)
 808a7c4:	681b      	ldr	r3, [r3, #0]
 808a7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808a7c8:	9301      	str	r3, [sp, #4]
 808a7ca:	bd08      	pop	{r3, pc}
 808a7cc:	080401c4 	.word	0x080401c4

0808a7d0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 808a7d0:	b508      	push	{r3, lr}
 808a7d2:	4b02      	ldr	r3, [pc, #8]	; (808a7dc <hal_usart_begin_config+0xc>)
 808a7d4:	681b      	ldr	r3, [r3, #0]
 808a7d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a7d8:	9301      	str	r3, [sp, #4]
 808a7da:	bd08      	pop	{r3, pc}
 808a7dc:	080401c4 	.word	0x080401c4

0808a7e0 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 808a7e0:	b508      	push	{r3, lr}
 808a7e2:	4b02      	ldr	r3, [pc, #8]	; (808a7ec <hal_i2c_begin+0xc>)
 808a7e4:	681b      	ldr	r3, [r3, #0]
 808a7e6:	68db      	ldr	r3, [r3, #12]
 808a7e8:	9301      	str	r3, [sp, #4]
 808a7ea:	bd08      	pop	{r3, pc}
 808a7ec:	080401ac 	.word	0x080401ac

0808a7f0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 808a7f0:	b508      	push	{r3, lr}
 808a7f2:	4b02      	ldr	r3, [pc, #8]	; (808a7fc <hal_i2c_begin_transmission+0xc>)
 808a7f4:	681b      	ldr	r3, [r3, #0]
 808a7f6:	699b      	ldr	r3, [r3, #24]
 808a7f8:	9301      	str	r3, [sp, #4]
 808a7fa:	bd08      	pop	{r3, pc}
 808a7fc:	080401ac 	.word	0x080401ac

0808a800 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 808a800:	b508      	push	{r3, lr}
 808a802:	4b02      	ldr	r3, [pc, #8]	; (808a80c <hal_i2c_end_transmission+0xc>)
 808a804:	681b      	ldr	r3, [r3, #0]
 808a806:	69db      	ldr	r3, [r3, #28]
 808a808:	9301      	str	r3, [sp, #4]
 808a80a:	bd08      	pop	{r3, pc}
 808a80c:	080401ac 	.word	0x080401ac

0808a810 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 808a810:	b508      	push	{r3, lr}
 808a812:	4b02      	ldr	r3, [pc, #8]	; (808a81c <hal_i2c_write+0xc>)
 808a814:	681b      	ldr	r3, [r3, #0]
 808a816:	6a1b      	ldr	r3, [r3, #32]
 808a818:	9301      	str	r3, [sp, #4]
 808a81a:	bd08      	pop	{r3, pc}
 808a81c:	080401ac 	.word	0x080401ac

0808a820 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 808a820:	b508      	push	{r3, lr}
 808a822:	4b02      	ldr	r3, [pc, #8]	; (808a82c <hal_i2c_available+0xc>)
 808a824:	681b      	ldr	r3, [r3, #0]
 808a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a828:	9301      	str	r3, [sp, #4]
 808a82a:	bd08      	pop	{r3, pc}
 808a82c:	080401ac 	.word	0x080401ac

0808a830 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 808a830:	b508      	push	{r3, lr}
 808a832:	4b02      	ldr	r3, [pc, #8]	; (808a83c <hal_i2c_read+0xc>)
 808a834:	681b      	ldr	r3, [r3, #0]
 808a836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a838:	9301      	str	r3, [sp, #4]
 808a83a:	bd08      	pop	{r3, pc}
 808a83c:	080401ac 	.word	0x080401ac

0808a840 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 808a840:	b508      	push	{r3, lr}
 808a842:	4b02      	ldr	r3, [pc, #8]	; (808a84c <hal_i2c_peek+0xc>)
 808a844:	681b      	ldr	r3, [r3, #0]
 808a846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a848:	9301      	str	r3, [sp, #4]
 808a84a:	bd08      	pop	{r3, pc}
 808a84c:	080401ac 	.word	0x080401ac

0808a850 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 808a850:	b508      	push	{r3, lr}
 808a852:	4b02      	ldr	r3, [pc, #8]	; (808a85c <hal_i2c_flush+0xc>)
 808a854:	681b      	ldr	r3, [r3, #0]
 808a856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a858:	9301      	str	r3, [sp, #4]
 808a85a:	bd08      	pop	{r3, pc}
 808a85c:	080401ac 	.word	0x080401ac

0808a860 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 808a860:	b508      	push	{r3, lr}
 808a862:	4b02      	ldr	r3, [pc, #8]	; (808a86c <hal_i2c_is_enabled+0xc>)
 808a864:	681b      	ldr	r3, [r3, #0]
 808a866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808a868:	9301      	str	r3, [sp, #4]
 808a86a:	bd08      	pop	{r3, pc}
 808a86c:	080401ac 	.word	0x080401ac

0808a870 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 808a870:	b508      	push	{r3, lr}
 808a872:	4b02      	ldr	r3, [pc, #8]	; (808a87c <hal_i2c_init+0xc>)
 808a874:	681b      	ldr	r3, [r3, #0]
 808a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808a878:	9301      	str	r3, [sp, #4]
 808a87a:	bd08      	pop	{r3, pc}
 808a87c:	080401ac 	.word	0x080401ac

0808a880 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 808a880:	b508      	push	{r3, lr}
 808a882:	4b02      	ldr	r3, [pc, #8]	; (808a88c <hal_i2c_lock+0xc>)
 808a884:	681b      	ldr	r3, [r3, #0]
 808a886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a888:	9301      	str	r3, [sp, #4]
 808a88a:	bd08      	pop	{r3, pc}
 808a88c:	080401ac 	.word	0x080401ac

0808a890 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 808a890:	b508      	push	{r3, lr}
 808a892:	4b02      	ldr	r3, [pc, #8]	; (808a89c <hal_i2c_unlock+0xc>)
 808a894:	681b      	ldr	r3, [r3, #0]
 808a896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808a898:	9301      	str	r3, [sp, #4]
 808a89a:	bd08      	pop	{r3, pc}
 808a89c:	080401ac 	.word	0x080401ac

0808a8a0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 808a8a0:	b508      	push	{r3, lr}
 808a8a2:	4b02      	ldr	r3, [pc, #8]	; (808a8ac <hal_i2c_request_ex+0xc>)
 808a8a4:	681b      	ldr	r3, [r3, #0]
 808a8a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808a8a8:	9301      	str	r3, [sp, #4]
 808a8aa:	bd08      	pop	{r3, pc}
 808a8ac:	080401ac 	.word	0x080401ac

0808a8b0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 808a8b0:	b508      	push	{r3, lr}
 808a8b2:	4b02      	ldr	r3, [pc, #8]	; (808a8bc <hal_spi_begin+0xc>)
 808a8b4:	681b      	ldr	r3, [r3, #0]
 808a8b6:	681b      	ldr	r3, [r3, #0]
 808a8b8:	9301      	str	r3, [sp, #4]
 808a8ba:	bd08      	pop	{r3, pc}
 808a8bc:	080401b4 	.word	0x080401b4

0808a8c0 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 808a8c0:	b508      	push	{r3, lr}
 808a8c2:	4b02      	ldr	r3, [pc, #8]	; (808a8cc <hal_spi_set_bit_order+0xc>)
 808a8c4:	681b      	ldr	r3, [r3, #0]
 808a8c6:	689b      	ldr	r3, [r3, #8]
 808a8c8:	9301      	str	r3, [sp, #4]
 808a8ca:	bd08      	pop	{r3, pc}
 808a8cc:	080401b4 	.word	0x080401b4

0808a8d0 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 808a8d0:	b508      	push	{r3, lr}
 808a8d2:	4b02      	ldr	r3, [pc, #8]	; (808a8dc <hal_spi_set_data_mode+0xc>)
 808a8d4:	681b      	ldr	r3, [r3, #0]
 808a8d6:	68db      	ldr	r3, [r3, #12]
 808a8d8:	9301      	str	r3, [sp, #4]
 808a8da:	bd08      	pop	{r3, pc}
 808a8dc:	080401b4 	.word	0x080401b4

0808a8e0 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 808a8e0:	b508      	push	{r3, lr}
 808a8e2:	4b02      	ldr	r3, [pc, #8]	; (808a8ec <hal_spi_set_clock_divider+0xc>)
 808a8e4:	681b      	ldr	r3, [r3, #0]
 808a8e6:	691b      	ldr	r3, [r3, #16]
 808a8e8:	9301      	str	r3, [sp, #4]
 808a8ea:	bd08      	pop	{r3, pc}
 808a8ec:	080401b4 	.word	0x080401b4

0808a8f0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 808a8f0:	b508      	push	{r3, lr}
 808a8f2:	4b02      	ldr	r3, [pc, #8]	; (808a8fc <hal_spi_transfer+0xc>)
 808a8f4:	681b      	ldr	r3, [r3, #0]
 808a8f6:	695b      	ldr	r3, [r3, #20]
 808a8f8:	9301      	str	r3, [sp, #4]
 808a8fa:	bd08      	pop	{r3, pc}
 808a8fc:	080401b4 	.word	0x080401b4

0808a900 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 808a900:	b508      	push	{r3, lr}
 808a902:	4b02      	ldr	r3, [pc, #8]	; (808a90c <hal_spi_init+0xc>)
 808a904:	681b      	ldr	r3, [r3, #0]
 808a906:	69db      	ldr	r3, [r3, #28]
 808a908:	9301      	str	r3, [sp, #4]
 808a90a:	bd08      	pop	{r3, pc}
 808a90c:	080401b4 	.word	0x080401b4

0808a910 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 808a910:	b508      	push	{r3, lr}
 808a912:	4b02      	ldr	r3, [pc, #8]	; (808a91c <hal_spi_is_enabled+0xc>)
 808a914:	681b      	ldr	r3, [r3, #0]
 808a916:	6a1b      	ldr	r3, [r3, #32]
 808a918:	9301      	str	r3, [sp, #4]
 808a91a:	bd08      	pop	{r3, pc}
 808a91c:	080401b4 	.word	0x080401b4

0808a920 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 808a920:	b508      	push	{r3, lr}
 808a922:	4b02      	ldr	r3, [pc, #8]	; (808a92c <hal_spi_info+0xc>)
 808a924:	681b      	ldr	r3, [r3, #0]
 808a926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a928:	9301      	str	r3, [sp, #4]
 808a92a:	bd08      	pop	{r3, pc}
 808a92c:	080401b4 	.word	0x080401b4

0808a930 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
 808a930:	b508      	push	{r3, lr}
 808a932:	4b02      	ldr	r3, [pc, #8]	; (808a93c <hal_spi_transfer_dma+0xc>)
 808a934:	681b      	ldr	r3, [r3, #0]
 808a936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a938:	9301      	str	r3, [sp, #4]
 808a93a:	bd08      	pop	{r3, pc}
 808a93c:	080401b4 	.word	0x080401b4

0808a940 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 808a940:	b508      	push	{r3, lr}
 808a942:	4b02      	ldr	r3, [pc, #8]	; (808a94c <hal_spi_transfer_dma_status+0xc>)
 808a944:	681b      	ldr	r3, [r3, #0]
 808a946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a948:	9301      	str	r3, [sp, #4]
 808a94a:	bd08      	pop	{r3, pc}
 808a94c:	080401b4 	.word	0x080401b4

0808a950 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808a950:	b508      	push	{r3, lr}
 808a952:	4b02      	ldr	r3, [pc, #8]	; (808a95c <inet_gethostbyname+0xc>)
 808a954:	681b      	ldr	r3, [r3, #0]
 808a956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808a958:	9301      	str	r3, [sp, #4]
 808a95a:	bd08      	pop	{r3, pc}
 808a95c:	08060020 	.word	0x08060020

0808a960 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 808a960:	b508      	push	{r3, lr}
 808a962:	4b02      	ldr	r3, [pc, #8]	; (808a96c <cellular_command+0xc>)
 808a964:	681b      	ldr	r3, [r3, #0]
 808a966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808a968:	9301      	str	r3, [sp, #4]
 808a96a:	bd08      	pop	{r3, pc}
 808a96c:	08060020 	.word	0x08060020

0808a970 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808a970:	b508      	push	{r3, lr}
 808a972:	4b02      	ldr	r3, [pc, #8]	; (808a97c <HAL_USB_USART_Init+0xc>)
 808a974:	681b      	ldr	r3, [r3, #0]
 808a976:	681b      	ldr	r3, [r3, #0]
 808a978:	9301      	str	r3, [sp, #4]
 808a97a:	bd08      	pop	{r3, pc}
 808a97c:	0806001c 	.word	0x0806001c

0808a980 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 808a980:	b508      	push	{r3, lr}
 808a982:	4b02      	ldr	r3, [pc, #8]	; (808a98c <HAL_USB_USART_Begin+0xc>)
 808a984:	681b      	ldr	r3, [r3, #0]
 808a986:	685b      	ldr	r3, [r3, #4]
 808a988:	9301      	str	r3, [sp, #4]
 808a98a:	bd08      	pop	{r3, pc}
 808a98c:	0806001c 	.word	0x0806001c

0808a990 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808a990:	b508      	push	{r3, lr}
 808a992:	4b02      	ldr	r3, [pc, #8]	; (808a99c <HAL_USB_USART_Available_Data+0xc>)
 808a994:	681b      	ldr	r3, [r3, #0]
 808a996:	691b      	ldr	r3, [r3, #16]
 808a998:	9301      	str	r3, [sp, #4]
 808a99a:	bd08      	pop	{r3, pc}
 808a99c:	0806001c 	.word	0x0806001c

0808a9a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808a9a0:	b508      	push	{r3, lr}
 808a9a2:	4b02      	ldr	r3, [pc, #8]	; (808a9ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808a9a4:	681b      	ldr	r3, [r3, #0]
 808a9a6:	695b      	ldr	r3, [r3, #20]
 808a9a8:	9301      	str	r3, [sp, #4]
 808a9aa:	bd08      	pop	{r3, pc}
 808a9ac:	0806001c 	.word	0x0806001c

0808a9b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808a9b0:	b508      	push	{r3, lr}
 808a9b2:	4b02      	ldr	r3, [pc, #8]	; (808a9bc <HAL_USB_USART_Receive_Data+0xc>)
 808a9b4:	681b      	ldr	r3, [r3, #0]
 808a9b6:	699b      	ldr	r3, [r3, #24]
 808a9b8:	9301      	str	r3, [sp, #4]
 808a9ba:	bd08      	pop	{r3, pc}
 808a9bc:	0806001c 	.word	0x0806001c

0808a9c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808a9c0:	b508      	push	{r3, lr}
 808a9c2:	4b02      	ldr	r3, [pc, #8]	; (808a9cc <HAL_USB_USART_Send_Data+0xc>)
 808a9c4:	681b      	ldr	r3, [r3, #0]
 808a9c6:	69db      	ldr	r3, [r3, #28]
 808a9c8:	9301      	str	r3, [sp, #4]
 808a9ca:	bd08      	pop	{r3, pc}
 808a9cc:	0806001c 	.word	0x0806001c

0808a9d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808a9d0:	b508      	push	{r3, lr}
 808a9d2:	4b02      	ldr	r3, [pc, #8]	; (808a9dc <HAL_USB_USART_Flush_Data+0xc>)
 808a9d4:	681b      	ldr	r3, [r3, #0]
 808a9d6:	6a1b      	ldr	r3, [r3, #32]
 808a9d8:	9301      	str	r3, [sp, #4]
 808a9da:	bd08      	pop	{r3, pc}
 808a9dc:	0806001c 	.word	0x0806001c

0808a9e0 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 808a9e0:	b508      	push	{r3, lr}
 808a9e2:	4b02      	ldr	r3, [pc, #8]	; (808a9ec <log_message_v+0xc>)
 808a9e4:	681b      	ldr	r3, [r3, #0]
 808a9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808a9e8:	9301      	str	r3, [sp, #4]
 808a9ea:	bd08      	pop	{r3, pc}
 808a9ec:	080201a0 	.word	0x080201a0

0808a9f0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808a9f0:	b508      	push	{r3, lr}
 808a9f2:	4b02      	ldr	r3, [pc, #8]	; (808a9fc <system_mode+0xc>)
 808a9f4:	681b      	ldr	r3, [r3, #0]
 808a9f6:	681b      	ldr	r3, [r3, #0]
 808a9f8:	9301      	str	r3, [sp, #4]
 808a9fa:	bd08      	pop	{r3, pc}
 808a9fc:	080401a4 	.word	0x080401a4

0808aa00 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808aa00:	b508      	push	{r3, lr}
 808aa02:	4b02      	ldr	r3, [pc, #8]	; (808aa0c <set_system_mode+0xc>)
 808aa04:	681b      	ldr	r3, [r3, #0]
 808aa06:	685b      	ldr	r3, [r3, #4]
 808aa08:	9301      	str	r3, [sp, #4]
 808aa0a:	bd08      	pop	{r3, pc}
 808aa0c:	080401a4 	.word	0x080401a4

0808aa10 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808aa10:	b508      	push	{r3, lr}
 808aa12:	4b02      	ldr	r3, [pc, #8]	; (808aa1c <system_delay_ms+0xc>)
 808aa14:	681b      	ldr	r3, [r3, #0]
 808aa16:	695b      	ldr	r3, [r3, #20]
 808aa18:	9301      	str	r3, [sp, #4]
 808aa1a:	bd08      	pop	{r3, pc}
 808aa1c:	080401a4 	.word	0x080401a4

0808aa20 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808aa20:	b508      	push	{r3, lr}
 808aa22:	4b02      	ldr	r3, [pc, #8]	; (808aa2c <system_thread_set_state+0xc>)
 808aa24:	681b      	ldr	r3, [r3, #0]
 808aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808aa28:	9301      	str	r3, [sp, #4]
 808aa2a:	bd08      	pop	{r3, pc}
 808aa2c:	080401a4 	.word	0x080401a4

0808aa30 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 808aa30:	b508      	push	{r3, lr}
 808aa32:	4b02      	ldr	r3, [pc, #8]	; (808aa3c <system_version_info+0xc>)
 808aa34:	681b      	ldr	r3, [r3, #0]
 808aa36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808aa38:	9301      	str	r3, [sp, #4]
 808aa3a:	bd08      	pop	{r3, pc}
 808aa3c:	080401a4 	.word	0x080401a4

0808aa40 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 808aa40:	b508      	push	{r3, lr}
 808aa42:	4b02      	ldr	r3, [pc, #8]	; (808aa4c <application_thread_current+0xc>)
 808aa44:	681b      	ldr	r3, [r3, #0]
 808aa46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808aa48:	9301      	str	r3, [sp, #4]
 808aa4a:	bd08      	pop	{r3, pc}
 808aa4c:	080401a4 	.word	0x080401a4

0808aa50 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 808aa50:	b508      	push	{r3, lr}
 808aa52:	4b02      	ldr	r3, [pc, #8]	; (808aa5c <application_thread_invoke+0xc>)
 808aa54:	681b      	ldr	r3, [r3, #0]
 808aa56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808aa58:	9301      	str	r3, [sp, #4]
 808aa5a:	bd08      	pop	{r3, pc}
 808aa5c:	080401a4 	.word	0x080401a4

0808aa60 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808aa60:	b508      	push	{r3, lr}
 808aa62:	4b02      	ldr	r3, [pc, #8]	; (808aa6c <system_thread_get_state+0xc>)
 808aa64:	681b      	ldr	r3, [r3, #0]
 808aa66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808aa68:	9301      	str	r3, [sp, #4]
 808aa6a:	bd08      	pop	{r3, pc}
 808aa6c:	080401a4 	.word	0x080401a4

0808aa70 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 808aa70:	b508      	push	{r3, lr}
 808aa72:	4b02      	ldr	r3, [pc, #8]	; (808aa7c <system_notify_time_changed+0xc>)
 808aa74:	681b      	ldr	r3, [r3, #0]
 808aa76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808aa78:	9301      	str	r3, [sp, #4]
 808aa7a:	bd08      	pop	{r3, pc}
 808aa7c:	080401a4 	.word	0x080401a4

0808aa80 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808aa80:	b508      	push	{r3, lr}
 808aa82:	4b03      	ldr	r3, [pc, #12]	; (808aa90 <system_ctrl_set_app_request_handler+0x10>)
 808aa84:	681b      	ldr	r3, [r3, #0]
 808aa86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808aa8a:	9301      	str	r3, [sp, #4]
 808aa8c:	bd08      	pop	{r3, pc}
 808aa8e:	0000      	.short	0x0000
 808aa90:	080401a4 	.word	0x080401a4

0808aa94 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808aa94:	b508      	push	{r3, lr}
 808aa96:	4b03      	ldr	r3, [pc, #12]	; (808aaa4 <system_ctrl_set_result+0x10>)
 808aa98:	681b      	ldr	r3, [r3, #0]
 808aa9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808aa9e:	9301      	str	r3, [sp, #4]
 808aaa0:	bd08      	pop	{r3, pc}
 808aaa2:	0000      	.short	0x0000
 808aaa4:	080401a4 	.word	0x080401a4

0808aaa8 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 808aaa8:	b508      	push	{r3, lr}
 808aaaa:	4b03      	ldr	r3, [pc, #12]	; (808aab8 <system_sleep_pins+0x10>)
 808aaac:	681b      	ldr	r3, [r3, #0]
 808aaae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 808aab2:	9301      	str	r3, [sp, #4]
 808aab4:	bd08      	pop	{r3, pc}
 808aab6:	0000      	.short	0x0000
 808aab8:	080401a4 	.word	0x080401a4

0808aabc <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 808aabc:	b508      	push	{r3, lr}
 808aabe:	4b03      	ldr	r3, [pc, #12]	; (808aacc <system_reset+0x10>)
 808aac0:	681b      	ldr	r3, [r3, #0]
 808aac2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 808aac6:	9301      	str	r3, [sp, #4]
 808aac8:	bd08      	pop	{r3, pc}
 808aaca:	0000      	.short	0x0000
 808aacc:	080401a4 	.word	0x080401a4

0808aad0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808aad0:	b508      	push	{r3, lr}
 808aad2:	4b02      	ldr	r3, [pc, #8]	; (808aadc <network_connect+0xc>)
 808aad4:	681b      	ldr	r3, [r3, #0]
 808aad6:	685b      	ldr	r3, [r3, #4]
 808aad8:	9301      	str	r3, [sp, #4]
 808aada:	bd08      	pop	{r3, pc}
 808aadc:	080401c8 	.word	0x080401c8

0808aae0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808aae0:	b508      	push	{r3, lr}
 808aae2:	4b02      	ldr	r3, [pc, #8]	; (808aaec <network_connecting+0xc>)
 808aae4:	681b      	ldr	r3, [r3, #0]
 808aae6:	689b      	ldr	r3, [r3, #8]
 808aae8:	9301      	str	r3, [sp, #4]
 808aaea:	bd08      	pop	{r3, pc}
 808aaec:	080401c8 	.word	0x080401c8

0808aaf0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808aaf0:	b508      	push	{r3, lr}
 808aaf2:	4b02      	ldr	r3, [pc, #8]	; (808aafc <network_disconnect+0xc>)
 808aaf4:	681b      	ldr	r3, [r3, #0]
 808aaf6:	68db      	ldr	r3, [r3, #12]
 808aaf8:	9301      	str	r3, [sp, #4]
 808aafa:	bd08      	pop	{r3, pc}
 808aafc:	080401c8 	.word	0x080401c8

0808ab00 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808ab00:	b508      	push	{r3, lr}
 808ab02:	4b02      	ldr	r3, [pc, #8]	; (808ab0c <network_ready+0xc>)
 808ab04:	681b      	ldr	r3, [r3, #0]
 808ab06:	691b      	ldr	r3, [r3, #16]
 808ab08:	9301      	str	r3, [sp, #4]
 808ab0a:	bd08      	pop	{r3, pc}
 808ab0c:	080401c8 	.word	0x080401c8

0808ab10 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808ab10:	b508      	push	{r3, lr}
 808ab12:	4b02      	ldr	r3, [pc, #8]	; (808ab1c <network_on+0xc>)
 808ab14:	681b      	ldr	r3, [r3, #0]
 808ab16:	695b      	ldr	r3, [r3, #20]
 808ab18:	9301      	str	r3, [sp, #4]
 808ab1a:	bd08      	pop	{r3, pc}
 808ab1c:	080401c8 	.word	0x080401c8

0808ab20 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808ab20:	b508      	push	{r3, lr}
 808ab22:	4b02      	ldr	r3, [pc, #8]	; (808ab2c <network_off+0xc>)
 808ab24:	681b      	ldr	r3, [r3, #0]
 808ab26:	699b      	ldr	r3, [r3, #24]
 808ab28:	9301      	str	r3, [sp, #4]
 808ab2a:	bd08      	pop	{r3, pc}
 808ab2c:	080401c8 	.word	0x080401c8

0808ab30 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808ab30:	b508      	push	{r3, lr}
 808ab32:	4b02      	ldr	r3, [pc, #8]	; (808ab3c <network_listen+0xc>)
 808ab34:	681b      	ldr	r3, [r3, #0]
 808ab36:	69db      	ldr	r3, [r3, #28]
 808ab38:	9301      	str	r3, [sp, #4]
 808ab3a:	bd08      	pop	{r3, pc}
 808ab3c:	080401c8 	.word	0x080401c8

0808ab40 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808ab40:	b508      	push	{r3, lr}
 808ab42:	4b02      	ldr	r3, [pc, #8]	; (808ab4c <network_listening+0xc>)
 808ab44:	681b      	ldr	r3, [r3, #0]
 808ab46:	6a1b      	ldr	r3, [r3, #32]
 808ab48:	9301      	str	r3, [sp, #4]
 808ab4a:	bd08      	pop	{r3, pc}
 808ab4c:	080401c8 	.word	0x080401c8

0808ab50 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808ab50:	b508      	push	{r3, lr}
 808ab52:	4b02      	ldr	r3, [pc, #8]	; (808ab5c <network_set_listen_timeout+0xc>)
 808ab54:	681b      	ldr	r3, [r3, #0]
 808ab56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808ab58:	9301      	str	r3, [sp, #4]
 808ab5a:	bd08      	pop	{r3, pc}
 808ab5c:	080401c8 	.word	0x080401c8

0808ab60 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808ab60:	b508      	push	{r3, lr}
 808ab62:	4b02      	ldr	r3, [pc, #8]	; (808ab6c <network_get_listen_timeout+0xc>)
 808ab64:	681b      	ldr	r3, [r3, #0]
 808ab66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808ab68:	9301      	str	r3, [sp, #4]
 808ab6a:	bd08      	pop	{r3, pc}
 808ab6c:	080401c8 	.word	0x080401c8

0808ab70 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808ab70:	b508      	push	{r3, lr}
 808ab72:	4b02      	ldr	r3, [pc, #8]	; (808ab7c <spark_function+0xc>)
 808ab74:	681b      	ldr	r3, [r3, #0]
 808ab76:	685b      	ldr	r3, [r3, #4]
 808ab78:	9301      	str	r3, [sp, #4]
 808ab7a:	bd08      	pop	{r3, pc}
 808ab7c:	080401cc 	.word	0x080401cc

0808ab80 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808ab80:	b508      	push	{r3, lr}
 808ab82:	4b02      	ldr	r3, [pc, #8]	; (808ab8c <spark_process+0xc>)
 808ab84:	681b      	ldr	r3, [r3, #0]
 808ab86:	689b      	ldr	r3, [r3, #8]
 808ab88:	9301      	str	r3, [sp, #4]
 808ab8a:	bd08      	pop	{r3, pc}
 808ab8c:	080401cc 	.word	0x080401cc

0808ab90 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808ab90:	b508      	push	{r3, lr}
 808ab92:	4b02      	ldr	r3, [pc, #8]	; (808ab9c <spark_cloud_flag_connect+0xc>)
 808ab94:	681b      	ldr	r3, [r3, #0]
 808ab96:	68db      	ldr	r3, [r3, #12]
 808ab98:	9301      	str	r3, [sp, #4]
 808ab9a:	bd08      	pop	{r3, pc}
 808ab9c:	080401cc 	.word	0x080401cc

0808aba0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808aba0:	b508      	push	{r3, lr}
 808aba2:	4b02      	ldr	r3, [pc, #8]	; (808abac <spark_cloud_flag_connected+0xc>)
 808aba4:	681b      	ldr	r3, [r3, #0]
 808aba6:	695b      	ldr	r3, [r3, #20]
 808aba8:	9301      	str	r3, [sp, #4]
 808abaa:	bd08      	pop	{r3, pc}
 808abac:	080401cc 	.word	0x080401cc

0808abb0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 808abb0:	b508      	push	{r3, lr}
 808abb2:	4b02      	ldr	r3, [pc, #8]	; (808abbc <spark_deviceID+0xc>)
 808abb4:	681b      	ldr	r3, [r3, #0]
 808abb6:	69db      	ldr	r3, [r3, #28]
 808abb8:	9301      	str	r3, [sp, #4]
 808abba:	bd08      	pop	{r3, pc}
 808abbc:	080401cc 	.word	0x080401cc

0808abc0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808abc0:	b508      	push	{r3, lr}
 808abc2:	4b02      	ldr	r3, [pc, #8]	; (808abcc <spark_send_event+0xc>)
 808abc4:	681b      	ldr	r3, [r3, #0]
 808abc6:	6a1b      	ldr	r3, [r3, #32]
 808abc8:	9301      	str	r3, [sp, #4]
 808abca:	bd08      	pop	{r3, pc}
 808abcc:	080401cc 	.word	0x080401cc

0808abd0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 808abd0:	b508      	push	{r3, lr}
 808abd2:	4b02      	ldr	r3, [pc, #8]	; (808abdc <spark_subscribe+0xc>)
 808abd4:	681b      	ldr	r3, [r3, #0]
 808abd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808abd8:	9301      	str	r3, [sp, #4]
 808abda:	bd08      	pop	{r3, pc}
 808abdc:	080401cc 	.word	0x080401cc

0808abe0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808abe0:	b508      	push	{r3, lr}
 808abe2:	4b02      	ldr	r3, [pc, #8]	; (808abec <spark_sync_time_pending+0xc>)
 808abe4:	681b      	ldr	r3, [r3, #0]
 808abe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808abe8:	9301      	str	r3, [sp, #4]
 808abea:	bd08      	pop	{r3, pc}
 808abec:	080401cc 	.word	0x080401cc

0808abf0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808abf0:	b508      	push	{r3, lr}
 808abf2:	4b02      	ldr	r3, [pc, #8]	; (808abfc <spark_set_random_seed_from_cloud_handler+0xc>)
 808abf4:	681b      	ldr	r3, [r3, #0]
 808abf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808abf8:	9301      	str	r3, [sp, #4]
 808abfa:	bd08      	pop	{r3, pc}
 808abfc:	080401cc 	.word	0x080401cc

0808ac00 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808ac00:	b508      	push	{r3, lr}
 808ac02:	4b02      	ldr	r3, [pc, #8]	; (808ac0c <malloc+0xc>)
 808ac04:	681b      	ldr	r3, [r3, #0]
 808ac06:	681b      	ldr	r3, [r3, #0]
 808ac08:	9301      	str	r3, [sp, #4]
 808ac0a:	bd08      	pop	{r3, pc}
 808ac0c:	080401a0 	.word	0x080401a0

0808ac10 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808ac10:	b508      	push	{r3, lr}
 808ac12:	4b02      	ldr	r3, [pc, #8]	; (808ac1c <free+0xc>)
 808ac14:	681b      	ldr	r3, [r3, #0]
 808ac16:	685b      	ldr	r3, [r3, #4]
 808ac18:	9301      	str	r3, [sp, #4]
 808ac1a:	bd08      	pop	{r3, pc}
 808ac1c:	080401a0 	.word	0x080401a0

0808ac20 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808ac20:	b508      	push	{r3, lr}
 808ac22:	4b02      	ldr	r3, [pc, #8]	; (808ac2c <realloc+0xc>)
 808ac24:	681b      	ldr	r3, [r3, #0]
 808ac26:	689b      	ldr	r3, [r3, #8]
 808ac28:	9301      	str	r3, [sp, #4]
 808ac2a:	bd08      	pop	{r3, pc}
 808ac2c:	080401a0 	.word	0x080401a0

0808ac30 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 808ac30:	b508      	push	{r3, lr}
 808ac32:	4b02      	ldr	r3, [pc, #8]	; (808ac3c <sprintf+0xc>)
 808ac34:	681b      	ldr	r3, [r3, #0]
 808ac36:	68db      	ldr	r3, [r3, #12]
 808ac38:	9301      	str	r3, [sp, #4]
 808ac3a:	bd08      	pop	{r3, pc}
 808ac3c:	080401a0 	.word	0x080401a0

0808ac40 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 808ac40:	b508      	push	{r3, lr}
 808ac42:	4b02      	ldr	r3, [pc, #8]	; (808ac4c <siprintf+0xc>)
 808ac44:	681b      	ldr	r3, [r3, #0]
 808ac46:	691b      	ldr	r3, [r3, #16]
 808ac48:	9301      	str	r3, [sp, #4]
 808ac4a:	bd08      	pop	{r3, pc}
 808ac4c:	080401a0 	.word	0x080401a0

0808ac50 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 808ac50:	b508      	push	{r3, lr}
 808ac52:	4b02      	ldr	r3, [pc, #8]	; (808ac5c <sscanf+0xc>)
 808ac54:	681b      	ldr	r3, [r3, #0]
 808ac56:	695b      	ldr	r3, [r3, #20]
 808ac58:	9301      	str	r3, [sp, #4]
 808ac5a:	bd08      	pop	{r3, pc}
 808ac5c:	080401a0 	.word	0x080401a0

0808ac60 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808ac60:	b508      	push	{r3, lr}
 808ac62:	4b02      	ldr	r3, [pc, #8]	; (808ac6c <snprintf+0xc>)
 808ac64:	681b      	ldr	r3, [r3, #0]
 808ac66:	69db      	ldr	r3, [r3, #28]
 808ac68:	9301      	str	r3, [sp, #4]
 808ac6a:	bd08      	pop	{r3, pc}
 808ac6c:	080401a0 	.word	0x080401a0

0808ac70 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 808ac70:	b508      	push	{r3, lr}
 808ac72:	4b02      	ldr	r3, [pc, #8]	; (808ac7c <vsnprintf+0xc>)
 808ac74:	681b      	ldr	r3, [r3, #0]
 808ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808ac78:	9301      	str	r3, [sp, #4]
 808ac7a:	bd08      	pop	{r3, pc}
 808ac7c:	080401a0 	.word	0x080401a0

0808ac80 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808ac80:	b508      	push	{r3, lr}
 808ac82:	4b02      	ldr	r3, [pc, #8]	; (808ac8c <abort+0xc>)
 808ac84:	681b      	ldr	r3, [r3, #0]
 808ac86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808ac88:	9301      	str	r3, [sp, #4]
 808ac8a:	bd08      	pop	{r3, pc}
 808ac8c:	080401a0 	.word	0x080401a0

0808ac90 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808ac90:	b508      	push	{r3, lr}
 808ac92:	4b02      	ldr	r3, [pc, #8]	; (808ac9c <_malloc_r+0xc>)
 808ac94:	681b      	ldr	r3, [r3, #0]
 808ac96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808ac98:	9301      	str	r3, [sp, #4]
 808ac9a:	bd08      	pop	{r3, pc}
 808ac9c:	080401a0 	.word	0x080401a0

0808aca0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 808aca0:	b508      	push	{r3, lr}
 808aca2:	4b02      	ldr	r3, [pc, #8]	; (808acac <newlib_impure_ptr_callback+0xc>)
 808aca4:	681b      	ldr	r3, [r3, #0]
 808aca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808aca8:	9301      	str	r3, [sp, #4]
 808acaa:	bd08      	pop	{r3, pc}
 808acac:	080401a0 	.word	0x080401a0

0808acb0 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 808acb0:	b508      	push	{r3, lr}
            return &Wire3;
 808acb2:	f002 fb93 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 808acb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 808acba:	f002 b92d 	b.w	808cf18 <_ZN7TwoWire4lockEv>

0808acbe <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 808acbe:	b510      	push	{r4, lr}
 808acc0:	4604      	mov	r4, r0
    lock_(_lock)
 808acc2:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 808acc4:	b109      	cbz	r1, 808acca <_ZN4PMICC1Eb+0xc>
        lock();
 808acc6:	f7ff fff3 	bl	808acb0 <_ZN4PMIC4lockEv.constprop.0>
}
 808acca:	4620      	mov	r0, r4
 808accc:	bd10      	pop	{r4, pc}

0808acce <_ZN4PMIC5beginEv>:
{
 808acce:	b508      	push	{r3, lr}
            return &Wire3;
 808acd0:	f002 fb84 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    if (!pmicWireInstance()->isEnabled()) {
 808acd4:	f002 f91c 	bl	808cf10 <_ZN7TwoWire9isEnabledEv>
 808acd8:	b918      	cbnz	r0, 808ace2 <_ZN4PMIC5beginEv+0x14>
            return &Wire3;
 808acda:	f002 fb7f 	bl	808d3dc <_Z20__fetch_global_Wire3v>
        pmicWireInstance()->begin();
 808acde:	f002 f8bf 	bl	808ce60 <_ZN7TwoWire5beginEv>
            return &Wire3;
 808ace2:	f002 fb7b 	bl	808d3dc <_Z20__fetch_global_Wire3v>
}
 808ace6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
 808acea:	f002 b911 	b.w	808cf10 <_ZN7TwoWire9isEnabledEv>

0808acee <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 808acee:	b508      	push	{r3, lr}
            return &Wire3;
 808acf0:	f002 fb74 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 808acf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 808acf8:	f002 b917 	b.w	808cf2a <_ZN7TwoWire6unlockEv>

0808acfc <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 808acfc:	b510      	push	{r4, lr}
    if (lock_) {
 808acfe:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 808ad00:	4604      	mov	r4, r0
    if (lock_) {
 808ad02:	b10b      	cbz	r3, 808ad08 <_ZN4PMICD1Ev+0xc>
        unlock();
 808ad04:	f7ff fff3 	bl	808acee <_ZN4PMIC6unlockEv>
}
 808ad08:	4620      	mov	r0, r4
 808ad0a:	bd10      	pop	{r4, pc}

0808ad0c <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808ad0c:	b510      	push	{r4, lr}
 808ad0e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808ad10:	6800      	ldr	r0, [r0, #0]
 808ad12:	f7ff ffec 	bl	808acee <_ZN4PMIC6unlockEv>
 808ad16:	4620      	mov	r0, r4
 808ad18:	bd10      	pop	{r4, pc}

0808ad1a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 808ad1a:	b530      	push	{r4, r5, lr}
 808ad1c:	b087      	sub	sp, #28
 808ad1e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ad20:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808ad22:	f7ff ffc5 	bl	808acb0 <_ZN4PMIC4lockEv.constprop.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808ad26:	236b      	movs	r3, #107	; 0x6b
 808ad28:	f88d 3008 	strb.w	r3, [sp, #8]
 808ad2c:	2300      	movs	r3, #0
 808ad2e:	2401      	movs	r4, #1
 808ad30:	9303      	str	r3, [sp, #12]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 808ad32:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808ad34:	f88d 4010 	strb.w	r4, [sp, #16]
    timeout_ = ms;
 808ad38:	9305      	str	r3, [sp, #20]
            return &Wire3;
 808ad3a:	f002 fb4f 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 808ad3e:	a902      	add	r1, sp, #8
 808ad40:	f002 f8c7 	bl	808ced2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 808ad44:	f002 fb4a 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 808ad48:	6803      	ldr	r3, [r0, #0]
 808ad4a:	4629      	mov	r1, r5
 808ad4c:	689b      	ldr	r3, [r3, #8]
 808ad4e:	4798      	blx	r3
            return &Wire3;
 808ad50:	f002 fb44 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 808ad54:	4621      	mov	r1, r4
 808ad56:	f002 f8d4 	bl	808cf02 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 808ad5a:	9403      	str	r4, [sp, #12]
            return &Wire3;
 808ad5c:	f002 fb3e 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 808ad60:	a902      	add	r1, sp, #8
 808ad62:	f002 f883 	bl	808ce6c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 808ad66:	f002 fb39 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 808ad6a:	6803      	ldr	r3, [r0, #0]
 808ad6c:	695b      	ldr	r3, [r3, #20]
 808ad6e:	4798      	blx	r3
 808ad70:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 808ad72:	a801      	add	r0, sp, #4
 808ad74:	f7ff ffca 	bl	808ad0c <_ZNSt10lock_guardI4PMICED1Ev>
}
 808ad78:	b2e0      	uxtb	r0, r4
 808ad7a:	b007      	add	sp, #28
 808ad7c:	bd30      	pop	{r4, r5, pc}

0808ad7e <_ZN4PMIC23readInputSourceRegisterEv>:
    return readRegister(INPUT_SOURCE_REGISTER);
 808ad7e:	2100      	movs	r1, #0
 808ad80:	f7ff bfcb 	b.w	808ad1a <_ZN4PMIC12readRegisterEh>

0808ad84 <_ZN4PMIC20getInputCurrentLimitEv>:
uint16_t PMIC::getInputCurrentLimit(void) {
 808ad84:	b508      	push	{r3, lr}
    byte raw = readInputSourceRegister();
 808ad86:	f7ff fffa 	bl	808ad7e <_ZN4PMIC23readInputSourceRegisterEv>
}
 808ad8a:	4b03      	ldr	r3, [pc, #12]	; (808ad98 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
    return mapping[raw];
 808ad8c:	f000 0007 	and.w	r0, r0, #7
}
 808ad90:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 808ad94:	bd08      	pop	{r3, pc}
 808ad96:	bf00      	nop
 808ad98:	08092d10 	.word	0x08092d10

0808ad9c <_ZN4PMIC16getChargeCurrentEv>:
    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808ad9c:	2102      	movs	r1, #2
 808ad9e:	f7ff bfbc 	b.w	808ad1a <_ZN4PMIC12readRegisterEh>

0808ada2 <_ZN4PMIC15getSystemStatusEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808ada2:	2108      	movs	r1, #8
 808ada4:	f7ff bfb9 	b.w	808ad1a <_ZN4PMIC12readRegisterEh>

0808ada8 <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 808ada8:	2109      	movs	r1, #9
 808adaa:	f7ff bfb6 	b.w	808ad1a <_ZN4PMIC12readRegisterEh>

0808adae <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 808adae:	b570      	push	{r4, r5, r6, lr}
 808adb0:	b086      	sub	sp, #24
 808adb2:	4614      	mov	r4, r2
 808adb4:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808adb6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808adb8:	f7ff ff7a 	bl	808acb0 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808adbc:	236b      	movs	r3, #107	; 0x6b
 808adbe:	f88d 3008 	strb.w	r3, [sp, #8]
 808adc2:	2300      	movs	r3, #0
 808adc4:	2601      	movs	r6, #1
 808adc6:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
 808adc8:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808adca:	f88d 6010 	strb.w	r6, [sp, #16]
    timeout_ = ms;
 808adce:	9305      	str	r3, [sp, #20]
            return &Wire3;
 808add0:	f002 fb04 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 808add4:	a902      	add	r1, sp, #8
 808add6:	f002 f87c 	bl	808ced2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 808adda:	f002 faff 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(address);
 808adde:	6803      	ldr	r3, [r0, #0]
 808ade0:	4629      	mov	r1, r5
 808ade2:	689b      	ldr	r3, [r3, #8]
 808ade4:	4798      	blx	r3
            return &Wire3;
 808ade6:	f002 faf9 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(DATA);
 808adea:	6803      	ldr	r3, [r0, #0]
 808adec:	4621      	mov	r1, r4
 808adee:	689b      	ldr	r3, [r3, #8]
 808adf0:	4798      	blx	r3
            return &Wire3;
 808adf2:	f002 faf3 	bl	808d3dc <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 808adf6:	4631      	mov	r1, r6
 808adf8:	f002 f883 	bl	808cf02 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
 808adfc:	a801      	add	r0, sp, #4
 808adfe:	f7ff ff85 	bl	808ad0c <_ZNSt10lock_guardI4PMICED1Ev>
}
 808ae02:	b006      	add	sp, #24
 808ae04:	bd70      	pop	{r4, r5, r6, pc}

0808ae06 <_ZN4PMIC20setInputCurrentLimitEt>:
bool PMIC::setInputCurrentLimit(uint16_t current) {
 808ae06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808ae08:	4604      	mov	r4, r0
 808ae0a:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ae0c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808ae0e:	f7ff ff4f 	bl	808acb0 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 808ae12:	2100      	movs	r1, #0
 808ae14:	4620      	mov	r0, r4
 808ae16:	f7ff ff80 	bl	808ad1a <_ZN4PMIC12readRegisterEh>
    switch (current) {
 808ae1a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
    byte mask = DATA & 0b11111000;
 808ae1e:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
    switch (current) {
 808ae22:	d02e      	beq.n	808ae82 <_ZN4PMIC20setInputCurrentLimitEt+0x7c>
 808ae24:	d814      	bhi.n	808ae50 <_ZN4PMIC20setInputCurrentLimitEt+0x4a>
 808ae26:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808ae2a:	d027      	beq.n	808ae7c <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 808ae2c:	d80a      	bhi.n	808ae44 <_ZN4PMIC20setInputCurrentLimitEt+0x3e>
 808ae2e:	2d64      	cmp	r5, #100	; 0x64
 808ae30:	d01e      	beq.n	808ae70 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
 808ae32:	2d96      	cmp	r5, #150	; 0x96
 808ae34:	d01a      	beq.n	808ae6c <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 808ae36:	2400      	movs	r4, #0
    std::lock_guard<PMIC> l(*this);
 808ae38:	a801      	add	r0, sp, #4
 808ae3a:	f7ff ff67 	bl	808ad0c <_ZNSt10lock_guardI4PMICED1Ev>
}
 808ae3e:	4620      	mov	r0, r4
 808ae40:	b003      	add	sp, #12
 808ae42:	bd30      	pop	{r4, r5, pc}
    switch (current) {
 808ae44:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 808ae48:	d1f5      	bne.n	808ae36 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 808ae4a:	f042 0203 	orr.w	r2, r2, #3
 808ae4e:	e00f      	b.n	808ae70 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
    switch (current) {
 808ae50:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 808ae54:	d018      	beq.n	808ae88 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 808ae56:	f640 33b8 	movw	r3, #3000	; 0xbb8
 808ae5a:	429d      	cmp	r5, r3
 808ae5c:	d017      	beq.n	808ae8e <_ZN4PMIC20setInputCurrentLimitEt+0x88>
 808ae5e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 808ae62:	429d      	cmp	r5, r3
 808ae64:	d1e7      	bne.n	808ae36 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 808ae66:	f042 0205 	orr.w	r2, r2, #5
 808ae6a:	e001      	b.n	808ae70 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 808ae6c:	f042 0201 	orr.w	r2, r2, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 808ae70:	4620      	mov	r0, r4
 808ae72:	2100      	movs	r1, #0
 808ae74:	f7ff ff9b 	bl	808adae <_ZN4PMIC13writeRegisterEhh>
    return 1; // value was written successfully
 808ae78:	2401      	movs	r4, #1
        break;
 808ae7a:	e7dd      	b.n	808ae38 <_ZN4PMIC20setInputCurrentLimitEt+0x32>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 808ae7c:	f042 0202 	orr.w	r2, r2, #2
 808ae80:	e7f6      	b.n	808ae70 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 808ae82:	f042 0204 	orr.w	r2, r2, #4
 808ae86:	e7f3      	b.n	808ae70 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 808ae88:	f042 0206 	orr.w	r2, r2, #6
 808ae8c:	e7f0      	b.n	808ae70 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 808ae8e:	f042 0207 	orr.w	r2, r2, #7
 808ae92:	e7ed      	b.n	808ae70 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>

0808ae94 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
 808ae94:	b513      	push	{r0, r1, r4, lr}
 808ae96:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808ae98:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808ae9a:	f7ff ff09 	bl	808acb0 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 808ae9e:	2101      	movs	r1, #1
 808aea0:	4620      	mov	r0, r4
 808aea2:	f7ff ff3a 	bl	808ad1a <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 808aea6:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 808aeaa:	2101      	movs	r1, #1
 808aeac:	4620      	mov	r0, r4
 808aeae:	f042 0210 	orr.w	r2, r2, #16
 808aeb2:	f7ff ff7c 	bl	808adae <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808aeb6:	a801      	add	r0, sp, #4
 808aeb8:	f7ff ff28 	bl	808ad0c <_ZNSt10lock_guardI4PMICED1Ev>
}
 808aebc:	2001      	movs	r0, #1
 808aebe:	b002      	add	sp, #8
 808aec0:	bd10      	pop	{r4, pc}

0808aec2 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 808aec2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 808aec6:	460c      	mov	r4, r1
 808aec8:	4617      	mov	r7, r2
 808aeca:	4605      	mov	r5, r0
 808aecc:	461e      	mov	r6, r3
 808aece:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 808aed2:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 808aed6:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808aeda:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808aedc:	f7ff fee8 	bl	808acb0 <_ZN4PMIC4lockEv.constprop.0>
    if (bit7) current = current | 0b10000000;
 808aee0:	2c00      	cmp	r4, #0
 808aee2:	bf0c      	ite	eq
 808aee4:	2400      	moveq	r4, #0
 808aee6:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 808aee8:	b10f      	cbz	r7, 808aeee <_ZN4PMIC16setChargeCurrentEbbbbbb+0x2c>
 808aeea:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    if (bit5) current = current | 0b00100000;
 808aeee:	b10e      	cbz	r6, 808aef4 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x32>
 808aef0:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 808aef4:	f1ba 0f00 	cmp.w	sl, #0
 808aef8:	d001      	beq.n	808aefe <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3c>
 808aefa:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 808aefe:	f1b9 0f00 	cmp.w	r9, #0
 808af02:	d001      	beq.n	808af08 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x46>
 808af04:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 808af08:	f1b8 0f00 	cmp.w	r8, #0
 808af0c:	d001      	beq.n	808af12 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x50>
 808af0e:	f044 0404 	orr.w	r4, r4, #4
    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808af12:	2102      	movs	r1, #2
 808af14:	4628      	mov	r0, r5
 808af16:	f7ff ff00 	bl	808ad1a <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
 808af1a:	f000 0201 	and.w	r2, r0, #1
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 808af1e:	2102      	movs	r1, #2
 808af20:	4628      	mov	r0, r5
 808af22:	4322      	orrs	r2, r4
 808af24:	f7ff ff43 	bl	808adae <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808af28:	a801      	add	r0, sp, #4
 808af2a:	f7ff feef 	bl	808ad0c <_ZNSt10lock_guardI4PMICED1Ev>
}
 808af2e:	2001      	movs	r0, #1
 808af30:	b002      	add	sp, #8
 808af32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808af36 <_ZN4PMIC16setChargeVoltageEt>:
bool PMIC::setChargeVoltage(uint16_t voltage) {
 808af36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808af38:	460c      	mov	r4, r1
 808af3a:	4605      	mov	r5, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808af3c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808af3e:	f7ff feb7 	bl	808acb0 <_ZN4PMIC4lockEv.constprop.0>
    uint32_t best = 0;
 808af42:	2200      	movs	r2, #0
    int bestDelta = 0x7fffffff;
 808af44:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 808af48:	4613      	mov	r3, r2
 808af4a:	f5c4 615b 	rsb	r1, r4, #3504	; 0xdb0
        int delta = std::abs((int)sum - (int)value);
 808af4e:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 808af52:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
        if (delta < bestDelta && sum <= value) {
 808af56:	4286      	cmp	r6, r0
 808af58:	da06      	bge.n	808af68 <_ZN4PMIC16setChargeVoltageEt+0x32>
 808af5a:	f103 07db 	add.w	r7, r3, #219	; 0xdb
 808af5e:	ebb4 1f07 	cmp.w	r4, r7, lsl #4
 808af62:	bf24      	itt	cs
 808af64:	4630      	movcs	r0, r6
 808af66:	461a      	movcs	r2, r3
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 808af68:	3301      	adds	r3, #1
 808af6a:	2b40      	cmp	r3, #64	; 0x40
 808af6c:	f101 0110 	add.w	r1, r1, #16
 808af70:	d1ed      	bne.n	808af4e <_ZN4PMIC16setChargeVoltageEt+0x18>
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 808af72:	0092      	lsls	r2, r2, #2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808af74:	2104      	movs	r1, #4
 808af76:	4628      	mov	r0, r5
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 808af78:	b2d4      	uxtb	r4, r2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808af7a:	f7ff fece 	bl	808ad1a <_ZN4PMIC12readRegisterEh>
    cvcr |= (currentCvcr & 0b11);
 808af7e:	f000 0203 	and.w	r2, r0, #3
    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);
 808af82:	2104      	movs	r1, #4
 808af84:	4628      	mov	r0, r5
 808af86:	4322      	orrs	r2, r4
 808af88:	f7ff ff11 	bl	808adae <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 808af8c:	a801      	add	r0, sp, #4
 808af8e:	f7ff febd 	bl	808ad0c <_ZNSt10lock_guardI4PMICED1Ev>
}
 808af92:	2001      	movs	r0, #1
 808af94:	b003      	add	sp, #12
 808af96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808af98 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 808af98:	6880      	ldr	r0, [r0, #8]
 808af9a:	f7ff bbd1 	b.w	808a740 <os_mutex_recursive_unlock>

0808af9e <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 808af9e:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 808afa0:	2600      	movs	r6, #0
 808afa2:	4604      	mov	r4, r0
 808afa4:	460d      	mov	r5, r1
 808afa6:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 808afaa:	f7ff fbb1 	bl	808a710 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 808afae:	4628      	mov	r0, r5
    _spi = spi;
 808afb0:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 808afb2:	f7ff fca5 	bl	808a900 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 808afb6:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 808afb8:	6066      	str	r6, [r4, #4]
}
 808afba:	bd70      	pop	{r4, r5, r6, pc}

0808afbc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 808afbc:	b510      	push	{r4, lr}
 808afbe:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 808afc0:	6880      	ldr	r0, [r0, #8]
 808afc2:	f7ff fbb5 	bl	808a730 <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 808afc6:	7820      	ldrb	r0, [r4, #0]
 808afc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 808afcc:	f7ff fc70 	bl	808a8b0 <hal_spi_begin>
        unlock();
 808afd0:	4620      	mov	r0, r4
 808afd2:	f7ff ffe1 	bl	808af98 <_ZN8SPIClass6unlockEv>
    }
}
 808afd6:	bd10      	pop	{r4, pc}

0808afd8 <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
 808afd8:	b538      	push	{r3, r4, r5, lr}
 808afda:	4604      	mov	r4, r0
 808afdc:	460d      	mov	r5, r1
 808afde:	6880      	ldr	r0, [r0, #8]
 808afe0:	f7ff fba6 	bl	808a730 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 808afe4:	7820      	ldrb	r0, [r4, #0]
 808afe6:	4629      	mov	r1, r5
 808afe8:	f7ff fc62 	bl	808a8b0 <hal_spi_begin>
        unlock();
 808afec:	4620      	mov	r0, r4
 808afee:	f7ff ffd3 	bl	808af98 <_ZN8SPIClass6unlockEv>
    }
}
 808aff2:	bd38      	pop	{r3, r4, r5, pc}

0808aff4 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 808aff4:	b538      	push	{r3, r4, r5, lr}
 808aff6:	4604      	mov	r4, r0
 808aff8:	460d      	mov	r5, r1
 808affa:	6880      	ldr	r0, [r0, #8]
 808affc:	f7ff fb98 	bl	808a730 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 808b000:	7820      	ldrb	r0, [r4, #0]
 808b002:	4629      	mov	r1, r5
 808b004:	f7ff fc5c 	bl	808a8c0 <hal_spi_set_bit_order>
        unlock();
 808b008:	4620      	mov	r0, r4
 808b00a:	f7ff ffc5 	bl	808af98 <_ZN8SPIClass6unlockEv>
    }
}
 808b00e:	bd38      	pop	{r3, r4, r5, pc}

0808b010 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 808b010:	b538      	push	{r3, r4, r5, lr}
 808b012:	4604      	mov	r4, r0
 808b014:	460d      	mov	r5, r1
 808b016:	6880      	ldr	r0, [r0, #8]
 808b018:	f7ff fb8a 	bl	808a730 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 808b01c:	7820      	ldrb	r0, [r4, #0]
 808b01e:	4629      	mov	r1, r5
 808b020:	f7ff fc56 	bl	808a8d0 <hal_spi_set_data_mode>
        unlock();
 808b024:	4620      	mov	r0, r4
 808b026:	f7ff ffb7 	bl	808af98 <_ZN8SPIClass6unlockEv>
    }
}
 808b02a:	bd38      	pop	{r3, r4, r5, pc}

0808b02c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 808b02c:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 808b02e:	2400      	movs	r4, #0
 808b030:	0840      	lsrs	r0, r0, #1
 808b032:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808b034:	6818      	ldr	r0, [r3, #0]
 808b036:	b2e5      	uxtb	r5, r4
 808b038:	4288      	cmp	r0, r1
 808b03a:	d906      	bls.n	808b04a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 808b03c:	3401      	adds	r4, #1
 808b03e:	2c08      	cmp	r4, #8
 808b040:	d002      	beq.n	808b048 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 808b042:	0840      	lsrs	r0, r0, #1
 808b044:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 808b046:	e7f5      	b.n	808b034 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 808b048:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 808b04a:	4b02      	ldr	r3, [pc, #8]	; (808b054 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 808b04c:	5d5b      	ldrb	r3, [r3, r5]
 808b04e:	7013      	strb	r3, [r2, #0]
}
 808b050:	bd30      	pop	{r4, r5, pc}
 808b052:	bf00      	nop
 808b054:	08092d20 	.word	0x08092d20

0808b058 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808b058:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 808b05a:	2500      	movs	r5, #0
{
 808b05c:	4604      	mov	r4, r0
 808b05e:	b089      	sub	sp, #36	; 0x24
 808b060:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 808b062:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 808b066:	9502      	str	r5, [sp, #8]
 808b068:	f7ff fb62 	bl	808a730 <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 808b06c:	4629      	mov	r1, r5
 808b06e:	2214      	movs	r2, #20
 808b070:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 808b072:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 808b074:	f003 fb16 	bl	808e6a4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 808b078:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 808b07a:	462a      	mov	r2, r5
 808b07c:	4638      	mov	r0, r7
 808b07e:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 808b080:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 808b084:	f7ff fc4c 	bl	808a920 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808b088:	ab02      	add	r3, sp, #8
 808b08a:	f10d 0207 	add.w	r2, sp, #7
 808b08e:	4631      	mov	r1, r6
 808b090:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 808b092:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 808b096:	f7ff ffc9 	bl	808b02c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 808b09a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 808b09e:	7820      	ldrb	r0, [r4, #0]
 808b0a0:	f7ff fc1e 	bl	808a8e0 <hal_spi_set_clock_divider>
        unlock();
 808b0a4:	4620      	mov	r0, r4
 808b0a6:	f7ff ff77 	bl	808af98 <_ZN8SPIClass6unlockEv>
    }

    return clock;
}
 808b0aa:	9802      	ldr	r0, [sp, #8]
 808b0ac:	b009      	add	sp, #36	; 0x24
 808b0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b0b0 <_ZN8SPIClass15setClockDividerEh>:
{
 808b0b0:	b538      	push	{r3, r4, r5, lr}
 808b0b2:	4604      	mov	r4, r0
 808b0b4:	6880      	ldr	r0, [r0, #8]
 808b0b6:	460d      	mov	r5, r1
 808b0b8:	f7ff fb3a 	bl	808a730 <os_mutex_recursive_lock>
        if (_dividerReference)
 808b0bc:	6861      	ldr	r1, [r4, #4]
 808b0be:	b199      	cbz	r1, 808b0e8 <_ZN8SPIClass15setClockDividerEh+0x38>
    unsigned result = 0;
 808b0c0:	2300      	movs	r3, #0
 808b0c2:	4a0c      	ldr	r2, [pc, #48]	; (808b0f4 <_ZN8SPIClass15setClockDividerEh+0x44>)
        if (clock_divisors[result] == divider)
 808b0c4:	f812 0b01 	ldrb.w	r0, [r2], #1
 808b0c8:	4285      	cmp	r5, r0
 808b0ca:	d002      	beq.n	808b0d2 <_ZN8SPIClass15setClockDividerEh+0x22>
    for (; result < arraySize(clock_divisors); result++)
 808b0cc:	3301      	adds	r3, #1
 808b0ce:	2b08      	cmp	r3, #8
 808b0d0:	d1f8      	bne.n	808b0c4 <_ZN8SPIClass15setClockDividerEh+0x14>
    return result + 1;
 808b0d2:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 808b0d4:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 808b0d6:	2201      	movs	r2, #1
 808b0d8:	4620      	mov	r0, r4
 808b0da:	40d9      	lsrs	r1, r3
 808b0dc:	f7ff ffbc 	bl	808b058 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 808b0e0:	4620      	mov	r0, r4
 808b0e2:	f7ff ff59 	bl	808af98 <_ZN8SPIClass6unlockEv>
}
 808b0e6:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_set_clock_divider(_spi, rate);
 808b0e8:	4629      	mov	r1, r5
 808b0ea:	7820      	ldrb	r0, [r4, #0]
 808b0ec:	f7ff fbf8 	bl	808a8e0 <hal_spi_set_clock_divider>
 808b0f0:	e7f6      	b.n	808b0e0 <_ZN8SPIClass15setClockDividerEh+0x30>
 808b0f2:	bf00      	nop
 808b0f4:	08092d20 	.word	0x08092d20

0808b0f8 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 808b0f8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 808b0fa:	7800      	ldrb	r0, [r0, #0]
 808b0fc:	f7ff fbf8 	bl	808a8f0 <hal_spi_transfer>
}
 808b100:	b2c0      	uxtb	r0, r0
 808b102:	bd08      	pop	{r3, pc}

0808b104 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 808b104:	b530      	push	{r4, r5, lr}
 808b106:	b087      	sub	sp, #28
 808b108:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808b10a:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 808b10c:	9500      	str	r5, [sp, #0]
 808b10e:	7800      	ldrb	r0, [r0, #0]
 808b110:	f7ff fc0e 	bl	808a930 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 808b114:	b93d      	cbnz	r5, 808b126 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 808b116:	7820      	ldrb	r0, [r4, #0]
 808b118:	a902      	add	r1, sp, #8
 808b11a:	f7ff fc11 	bl	808a940 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 808b11e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 808b122:	07db      	lsls	r3, r3, #31
 808b124:	d4f7      	bmi.n	808b116 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
 808b126:	b007      	add	sp, #28
 808b128:	bd30      	pop	{r4, r5, pc}

0808b12a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 808b12a:	b510      	push	{r4, lr}
 808b12c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 808b12e:	6800      	ldr	r0, [r0, #0]
 808b130:	b118      	cbz	r0, 808b13a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 808b132:	f7ff fd6d 	bl	808ac10 <free>
            wakeupSource_ = nullptr;
 808b136:	2300      	movs	r3, #0
 808b138:	6023      	str	r3, [r4, #0]
        }
    }
 808b13a:	bd10      	pop	{r4, pc}

0808b13c <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808b13c:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
 808b13e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808b142:	460d      	mov	r5, r1
        error_ = result.error_;
 808b144:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 808b146:	460b      	mov	r3, r1
 808b148:	f853 2f06 	ldr.w	r2, [r3, #6]!
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 808b14c:	4604      	mov	r4, r0
        compatResult_ = result.compatResult_;
 808b14e:	f8c0 2006 	str.w	r2, [r0, #6]
 808b152:	889b      	ldrh	r3, [r3, #4]
 808b154:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 808b156:	f7ff ffe8 	bl	808b12a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
 808b15a:	682b      	ldr	r3, [r5, #0]
 808b15c:	b113      	cbz	r3, 808b164 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
 808b15e:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
 808b160:	2300      	movs	r3, #0
 808b162:	602b      	str	r3, [r5, #0]
    }
 808b164:	4620      	mov	r0, r4
 808b166:	bd38      	pop	{r3, r4, r5, pc}

0808b168 <_ZN17SystemSleepResult13toSleepResultEv>:
        if (error_ || wakeupSource_) {
 808b168:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SleepResult toSleepResult() {
 808b16c:	b510      	push	{r4, lr}
 808b16e:	680a      	ldr	r2, [r1, #0]
        if (error_ || wakeupSource_) {
 808b170:	b933      	cbnz	r3, 808b180 <_ZN17SystemSleepResult13toSleepResultEv+0x18>
 808b172:	b932      	cbnz	r2, 808b182 <_ZN17SystemSleepResult13toSleepResultEv+0x1a>
        return compatResult_;
 808b174:	f851 3f06 	ldr.w	r3, [r1, #6]!
 808b178:	6003      	str	r3, [r0, #0]
 808b17a:	888b      	ldrh	r3, [r1, #4]
 808b17c:	8083      	strh	r3, [r0, #4]
    }
 808b17e:	bd10      	pop	{r4, pc}
        if (wakeupSource_) {
 808b180:	b122      	cbz	r2, 808b18c <_ZN17SystemSleepResult13toSleepResultEv+0x24>
            return static_cast<SystemSleepWakeupReason>(wakeupSource_->type);
 808b182:	8894      	ldrh	r4, [r2, #4]
            switch (wakeupReason()) {
 808b184:	2c01      	cmp	r4, #1
 808b186:	d003      	beq.n	808b190 <_ZN17SystemSleepResult13toSleepResultEv+0x28>
 808b188:	2c04      	cmp	r4, #4
 808b18a:	d006      	beq.n	808b19a <_ZN17SystemSleepResult13toSleepResultEv+0x32>
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 808b18c:	2204      	movs	r2, #4
 808b18e:	e005      	b.n	808b19c <_ZN17SystemSleepResult13toSleepResultEv+0x34>
            return reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeupSource_)->pin;
 808b190:	8992      	ldrh	r2, [r2, #12]
                    compatResult_ = SleepResult(WAKEUP_REASON_PIN, error(), wakeupPin());
 808b192:	718c      	strb	r4, [r1, #6]
 808b194:	810b      	strh	r3, [r1, #8]
 808b196:	814a      	strh	r2, [r1, #10]
                    break;
 808b198:	e7ec      	b.n	808b174 <_ZN17SystemSleepResult13toSleepResultEv+0xc>
                    compatResult_ = SleepResult(WAKEUP_REASON_RTC, error());
 808b19a:	2202      	movs	r2, #2
                    compatResult_ = SleepResult(WAKEUP_REASON_UNKNOWN, error());
 808b19c:	810b      	strh	r3, [r1, #8]
 808b19e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808b1a2:	718a      	strb	r2, [r1, #6]
 808b1a4:	814b      	strh	r3, [r1, #10]
                    break;
 808b1a6:	e7e5      	b.n	808b174 <_ZN17SystemSleepResult13toSleepResultEv+0xc>

0808b1a8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 808b1a8:	b507      	push	{r0, r1, r2, lr}
 808b1aa:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 808b1ac:	2100      	movs	r1, #0
{
 808b1ae:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 808b1b0:	9100      	str	r1, [sp, #0]
 808b1b2:	2001      	movs	r0, #1
 808b1b4:	218c      	movs	r1, #140	; 0x8c
 808b1b6:	f7ff fc81 	bl	808aabc <system_reset>
}
 808b1ba:	b003      	add	sp, #12
 808b1bc:	f85d fb04 	ldr.w	pc, [sp], #4

0808b1c0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 808b1c0:	4601      	mov	r1, r0
    reset(0, flags);
 808b1c2:	2000      	movs	r0, #0
 808b1c4:	f7ff bff0 	b.w	808b1a8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

0808b1c8 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 808b1c8:	2000      	movs	r0, #0
 808b1ca:	f7ff bff9 	b.w	808b1c0 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

0808b1ce <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 808b1ce:	b510      	push	{r4, lr}
 808b1d0:	2400      	movs	r4, #0
 808b1d2:	7004      	strb	r4, [r0, #0]
 808b1d4:	8044      	strh	r4, [r0, #2]
 808b1d6:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 808b1da:	2900      	cmp	r1, #0
SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 808b1dc:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 808b1de:	dd08      	ble.n	808b1f2 <_ZN11SleepResultC1EiPKtj+0x24>
        // pin
        --ret;
 808b1e0:	3901      	subs	r1, #1
        if ((size_t)ret < pinsSize) {
 808b1e2:	428b      	cmp	r3, r1
 808b1e4:	d904      	bls.n	808b1f0 <_ZN11SleepResultC1EiPKtj+0x22>
            pin_ = pins[ret];
 808b1e6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 808b1ea:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 808b1ec:	2301      	movs	r3, #1
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
        reason_ = WAKEUP_REASON_RTC;
 808b1ee:	7003      	strb	r3, [r0, #0]
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
    }
}
 808b1f0:	bd10      	pop	{r4, pc}
    } else if (ret == 0) {
 808b1f2:	d101      	bne.n	808b1f8 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 808b1f4:	2302      	movs	r3, #2
 808b1f6:	e7fa      	b.n	808b1ee <_ZN11SleepResultC1EiPKtj+0x20>
        err_ = static_cast<system_error_t>(ret);
 808b1f8:	8041      	strh	r1, [r0, #2]
 808b1fa:	e7f9      	b.n	808b1f0 <_ZN11SleepResultC1EiPKtj+0x22>

0808b1fc <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808b1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b1fe:	460d      	mov	r5, r1
 808b200:	4616      	mov	r6, r2
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b202:	2700      	movs	r7, #0
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808b204:	b08b      	sub	sp, #44	; 0x2c
 808b206:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b208:	9b12      	ldr	r3, [sp, #72]	; 0x48
SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 808b20a:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b20c:	9301      	str	r3, [sp, #4]
 808b20e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808b210:	4631      	mov	r1, r6
 808b212:	9300      	str	r3, [sp, #0]
 808b214:	4628      	mov	r0, r5
 808b216:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808b218:	9702      	str	r7, [sp, #8]
 808b21a:	f7ff fc45 	bl	808aaa8 <system_sleep_pins>
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 808b21e:	4633      	mov	r3, r6
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808b220:	4601      	mov	r1, r0
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
 808b222:	462a      	mov	r2, r5
 808b224:	a805      	add	r0, sp, #20
 808b226:	f7ff ffd2 	bl	808b1ce <_ZN11SleepResultC1EiPKtj>
 808b22a:	4d0f      	ldr	r5, [pc, #60]	; (808b268 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x6c>)
 808b22c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 808b230:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 808b234:	f8bd 3018 	ldrh.w	r3, [sp, #24]
              compatResult_(r) {
 808b238:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
 808b23c:	4628      	mov	r0, r5
 808b23e:	a907      	add	r1, sp, #28
 808b240:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 808b244:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 808b248:	9707      	str	r7, [sp, #28]
 808b24a:	f8ad 7020 	strh.w	r7, [sp, #32]
 808b24e:	f7ff ff75 	bl	808b13c <_ZN17SystemSleepResultaSEOS_>
        freeWakeupSourceMemory();
 808b252:	a807      	add	r0, sp, #28
 808b254:	f7ff ff69 	bl	808b12a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        return toSleepResult();
 808b258:	4620      	mov	r0, r4
 808b25a:	4629      	mov	r1, r5
 808b25c:	f7ff ff84 	bl	808b168 <_ZN17SystemSleepResult13toSleepResultEv>
}
 808b260:	4620      	mov	r0, r4
 808b262:	b00b      	add	sp, #44	; 0x2c
 808b264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808b266:	bf00      	nop
 808b268:	20000e0c 	.word	0x20000e0c

0808b26c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808b26c:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 808b26e:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 808b270:	b510      	push	{r4, lr}
 808b272:	4b08      	ldr	r3, [pc, #32]	; (808b294 <_GLOBAL__sub_I_System+0x28>)
 808b274:	4c08      	ldr	r4, [pc, #32]	; (808b298 <_GLOBAL__sub_I_System+0x2c>)
 808b276:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 808b278:	4b08      	ldr	r3, [pc, #32]	; (808b29c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 808b27a:	6020      	str	r0, [r4, #0]
 808b27c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 808b27e:	71a0      	strb	r0, [r4, #6]
 808b280:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808b282:	f7ff fbbd 	bl	808aa00 <set_system_mode>
SystemClass System;
 808b286:	4620      	mov	r0, r4
 808b288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 808b28c:	4a04      	ldr	r2, [pc, #16]	; (808b2a0 <_GLOBAL__sub_I_System+0x34>)
 808b28e:	4905      	ldr	r1, [pc, #20]	; (808b2a4 <_GLOBAL__sub_I_System+0x38>)
 808b290:	f002 b8cc 	b.w	808d42c <__aeabi_atexit>
 808b294:	20000e18 	.word	0x20000e18
 808b298:	20000e0c 	.word	0x20000e0c
 808b29c:	ffff0000 	.word	0xffff0000
 808b2a0:	200002c0 	.word	0x200002c0
 808b2a4:	08080c2d 	.word	0x08080c2d

0808b2a8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 808b2a8:	b510      	push	{r4, lr}
 808b2aa:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 808b2ac:	f003 fa61 	bl	808e772 <strlen>
 808b2b0:	1e43      	subs	r3, r0, #1
 808b2b2:	4620      	mov	r0, r4
 808b2b4:	4423      	add	r3, r4
	while(i<j){
 808b2b6:	4283      	cmp	r3, r0
 808b2b8:	d906      	bls.n	808b2c8 <_Z11str_reversePc+0x20>
		c = *i;
 808b2ba:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 808b2bc:	7819      	ldrb	r1, [r3, #0]
 808b2be:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 808b2c2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 808b2c6:	e7f6      	b.n	808b2b6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 808b2c8:	bd10      	pop	{r4, pc}

0808b2ca <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 808b2ca:	1e93      	subs	r3, r2, #2
 808b2cc:	2b22      	cmp	r3, #34	; 0x22
 808b2ce:	f04f 0300 	mov.w	r3, #0
{
 808b2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b2d6:	b08c      	sub	sp, #48	; 0x30
 808b2d8:	460d      	mov	r5, r1
 808b2da:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 808b2dc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 808b2e0:	d926      	bls.n	808b330 <ltoa+0x66>

      if (10 == base && N < 0L)
 808b2e2:	2800      	cmp	r0, #0
 808b2e4:	da29      	bge.n	808b33a <ltoa+0x70>
      {
            *head++ = '-';
 808b2e6:	462e      	mov	r6, r5
 808b2e8:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 808b2ea:	240a      	movs	r4, #10
            *head++ = '-';
 808b2ec:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 808b2f0:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 808b2f2:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 808b2f6:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 808b2fa:	4622      	mov	r2, r4
 808b2fc:	4601      	mov	r1, r0
 808b2fe:	a801      	add	r0, sp, #4
 808b300:	f003 f9a0 	bl	808e644 <ldiv>
 808b304:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 808b306:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 808b308:	2b09      	cmp	r3, #9
 808b30a:	bfcc      	ite	gt
 808b30c:	2237      	movgt	r2, #55	; 0x37
 808b30e:	2230      	movle	r2, #48	; 0x30
 808b310:	4413      	add	r3, r2
 808b312:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 808b316:	f108 0801 	add.w	r8, r8, #1
 808b31a:	2800      	cmp	r0, #0
 808b31c:	d1ed      	bne.n	808b2fa <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 808b31e:	4642      	mov	r2, r8
 808b320:	4630      	mov	r0, r6
 808b322:	1c79      	adds	r1, r7, #1
 808b324:	f003 f9b0 	bl	808e688 <memcpy>
      return str;
}
 808b328:	4628      	mov	r0, r5
 808b32a:	b00c      	add	sp, #48	; 0x30
 808b32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 808b330:	2a0a      	cmp	r2, #10
 808b332:	d0d6      	beq.n	808b2e2 <ltoa+0x18>
      if (uarg)
 808b334:	b118      	cbz	r0, 808b33e <ltoa+0x74>
 808b336:	462e      	mov	r6, r5
 808b338:	e7db      	b.n	808b2f2 <ltoa+0x28>
 808b33a:	240a      	movs	r4, #10
 808b33c:	e7fa      	b.n	808b334 <ltoa+0x6a>
      else  *tail-- = '0';
 808b33e:	2330      	movs	r3, #48	; 0x30
 808b340:	462e      	mov	r6, r5
      int i = 2;
 808b342:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 808b346:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 808b34a:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 808b34e:	e7e6      	b.n	808b31e <ltoa+0x54>

0808b350 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 808b350:	b570      	push	{r4, r5, r6, lr}
 808b352:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 808b354:	1e91      	subs	r1, r2, #2
 808b356:	2922      	cmp	r1, #34	; 0x22
 808b358:	d822      	bhi.n	808b3a0 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 808b35a:	4625      	mov	r5, r4

	div_t result;
	while(a){
 808b35c:	b168      	cbz	r0, 808b37a <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 808b35e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 808b362:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 808b366:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808b368:	2809      	cmp	r0, #9
                *ptr += '0';
 808b36a:	bf94      	ite	ls
 808b36c:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 808b36e:	3157      	addhi	r1, #87	; 0x57
 808b370:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 808b372:	4630      	mov	r0, r6
 808b374:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 808b378:	e7f0      	b.n	808b35c <ultoa+0xc>
 808b37a:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 808b37c:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 808b37e:	4423      	add	r3, r4
 808b380:	4293      	cmp	r3, r2
 808b382:	d902      	bls.n	808b38a <ultoa+0x3a>
            *ptr++ = '0';
 808b384:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 808b388:	e7fa      	b.n	808b380 <ultoa+0x30>
 808b38a:	1b5a      	subs	r2, r3, r5
 808b38c:	42ab      	cmp	r3, r5
 808b38e:	bf38      	it	cc
 808b390:	2200      	movcc	r2, #0

	*ptr = '\0';
 808b392:	2300      	movs	r3, #0
	str_reverse(buffer);
 808b394:	4620      	mov	r0, r4
	*ptr = '\0';
 808b396:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 808b398:	f7ff ff86 	bl	808b2a8 <_Z11str_reversePc>
	return buffer;
 808b39c:	4620      	mov	r0, r4
}
 808b39e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 808b3a0:	2000      	movs	r0, #0
 808b3a2:	e7fc      	b.n	808b39e <ultoa+0x4e>

0808b3a4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808b3a4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 808b3a6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808b3a8:	460c      	mov	r4, r1
 808b3aa:	4615      	mov	r5, r2
	if(a<0){
 808b3ac:	da0d      	bge.n	808b3ca <itoa+0x26>
		*buffer = '-';
 808b3ae:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808b3b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808b3b4:	bf0c      	ite	eq
 808b3b6:	4618      	moveq	r0, r3
 808b3b8:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 808b3ba:	2301      	movs	r3, #1
		*buffer = '-';
 808b3bc:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 808b3be:	462a      	mov	r2, r5
 808b3c0:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 808b3c2:	f7ff ffc5 	bl	808b350 <ultoa>
	}
	return buffer;
}
 808b3c6:	4620      	mov	r0, r4
 808b3c8:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 808b3ca:	2301      	movs	r3, #1
 808b3cc:	e7f9      	b.n	808b3c2 <itoa+0x1e>
	...

0808b3d0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 808b3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b3d4:	4607      	mov	r7, r0
 808b3d6:	460d      	mov	r5, r1
 808b3d8:	4616      	mov	r6, r2
 808b3da:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 808b3dc:	2200      	movs	r2, #0
 808b3de:	2300      	movs	r3, #0
 808b3e0:	4638      	mov	r0, r7
 808b3e2:	4629      	mov	r1, r5
 808b3e4:	f002 fc62 	bl	808dcac <__aeabi_dcmplt>
 808b3e8:	b120      	cbz	r0, 808b3f4 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 808b3ea:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 808b3ec:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 808b3f0:	f804 3b01 	strb.w	r3, [r4], #1
 808b3f4:	2300      	movs	r3, #0
    }
    long scale = 1;
 808b3f6:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 808b3fa:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 808b3fc:	b2d9      	uxtb	r1, r3
 808b3fe:	428e      	cmp	r6, r1
 808b400:	d903      	bls.n	808b40a <_Z4dtoadhPc+0x3a>
        scale *= 10;
 808b402:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 808b406:	3301      	adds	r3, #1
 808b408:	e7f8      	b.n	808b3fc <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 808b40a:	4650      	mov	r0, sl
 808b40c:	f002 f972 	bl	808d6f4 <__aeabi_i2d>
 808b410:	463a      	mov	r2, r7
 808b412:	462b      	mov	r3, r5
 808b414:	f002 f9d8 	bl	808d7c8 <__aeabi_dmul>
 808b418:	4680      	mov	r8, r0
 808b41a:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 808b41c:	f003 f8b2 	bl	808e584 <__aeabi_d2ulz>
 808b420:	4605      	mov	r5, r0
 808b422:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 808b424:	f002 f99a 	bl	808d75c <__aeabi_ul2d>
 808b428:	4602      	mov	r2, r0
 808b42a:	460b      	mov	r3, r1
 808b42c:	4640      	mov	r0, r8
 808b42e:	4649      	mov	r1, r9
 808b430:	f002 f812 	bl	808d458 <__aeabi_dsub>
 808b434:	2200      	movs	r2, #0
 808b436:	4b12      	ldr	r3, [pc, #72]	; (808b480 <_Z4dtoadhPc+0xb0>)
 808b438:	f002 fc4c 	bl	808dcd4 <__aeabi_dcmpge>
 808b43c:	b110      	cbz	r0, 808b444 <_Z4dtoadhPc+0x74>
        fixed++;
 808b43e:	3501      	adds	r5, #1
 808b440:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 808b444:	4652      	mov	r2, sl
 808b446:	4628      	mov	r0, r5
 808b448:	4639      	mov	r1, r7
 808b44a:	17d3      	asrs	r3, r2, #31
 808b44c:	f003 f84e 	bl	808e4ec <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 808b450:	2301      	movs	r3, #1
 808b452:	4615      	mov	r5, r2
 808b454:	4621      	mov	r1, r4
 808b456:	220a      	movs	r2, #10
 808b458:	f7ff ff7a 	bl	808b350 <ultoa>
    if (prec) {
 808b45c:	b16e      	cbz	r6, 808b47a <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 808b45e:	4620      	mov	r0, r4
 808b460:	f003 f987 	bl	808e772 <strlen>
        *sout++ = '.';
 808b464:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 808b466:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 808b468:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 808b46a:	220a      	movs	r2, #10
 808b46c:	4633      	mov	r3, r6
 808b46e:	4628      	mov	r0, r5
    }
}
 808b470:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 808b474:	3101      	adds	r1, #1
 808b476:	f7ff bf6b 	b.w	808b350 <ultoa>
}
 808b47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b47e:	bf00      	nop
 808b480:	3fe00000 	.word	0x3fe00000

0808b484 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808b484:	b510      	push	{r4, lr}
 808b486:	4604      	mov	r4, r0
{
	free(buffer);
 808b488:	6800      	ldr	r0, [r0, #0]
 808b48a:	f7ff fbc1 	bl	808ac10 <free>
}
 808b48e:	4620      	mov	r0, r4
 808b490:	bd10      	pop	{r4, pc}

0808b492 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808b492:	b510      	push	{r4, lr}
 808b494:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808b496:	6800      	ldr	r0, [r0, #0]
 808b498:	b108      	cbz	r0, 808b49e <_ZN6String10invalidateEv+0xc>
 808b49a:	f7ff fbb9 	bl	808ac10 <free>
	buffer = NULL;
 808b49e:	2300      	movs	r3, #0
	capacity = len = 0;
 808b4a0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 808b4a4:	6023      	str	r3, [r4, #0]
}
 808b4a6:	bd10      	pop	{r4, pc}

0808b4a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808b4a8:	b538      	push	{r3, r4, r5, lr}
 808b4aa:	4604      	mov	r4, r0
 808b4ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808b4ae:	6800      	ldr	r0, [r0, #0]
 808b4b0:	3101      	adds	r1, #1
 808b4b2:	f7ff fbb5 	bl	808ac20 <realloc>
	if (newbuffer) {
 808b4b6:	b110      	cbz	r0, 808b4be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808b4b8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 808b4bc:	2001      	movs	r0, #1
	}
	return 0;
}
 808b4be:	bd38      	pop	{r3, r4, r5, pc}

0808b4c0 <_ZN6String7reserveEj>:
{
 808b4c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808b4c2:	6803      	ldr	r3, [r0, #0]
{
 808b4c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808b4c6:	b123      	cbz	r3, 808b4d2 <_ZN6String7reserveEj+0x12>
 808b4c8:	6843      	ldr	r3, [r0, #4]
 808b4ca:	428b      	cmp	r3, r1
 808b4cc:	d301      	bcc.n	808b4d2 <_ZN6String7reserveEj+0x12>
 808b4ce:	2001      	movs	r0, #1
}
 808b4d0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 808b4d2:	4620      	mov	r0, r4
 808b4d4:	f7ff ffe8 	bl	808b4a8 <_ZN6String12changeBufferEj>
 808b4d8:	2800      	cmp	r0, #0
 808b4da:	d0f9      	beq.n	808b4d0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 808b4dc:	68a3      	ldr	r3, [r4, #8]
 808b4de:	2b00      	cmp	r3, #0
 808b4e0:	d1f5      	bne.n	808b4ce <_ZN6String7reserveEj+0xe>
 808b4e2:	6822      	ldr	r2, [r4, #0]
 808b4e4:	7013      	strb	r3, [r2, #0]
 808b4e6:	e7f2      	b.n	808b4ce <_ZN6String7reserveEj+0xe>

0808b4e8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808b4e8:	b570      	push	{r4, r5, r6, lr}
 808b4ea:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808b4ec:	4611      	mov	r1, r2
{
 808b4ee:	4604      	mov	r4, r0
 808b4f0:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808b4f2:	f7ff ffe5 	bl	808b4c0 <_ZN6String7reserveEj>
 808b4f6:	b920      	cbnz	r0, 808b502 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 808b4f8:	4620      	mov	r0, r4
 808b4fa:	f7ff ffca 	bl	808b492 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 808b4fe:	4620      	mov	r0, r4
 808b500:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 808b502:	462a      	mov	r2, r5
 808b504:	4631      	mov	r1, r6
 808b506:	6820      	ldr	r0, [r4, #0]
	len = length;
 808b508:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808b50a:	f003 f8bd 	bl	808e688 <memcpy>
	buffer[len] = 0;
 808b50e:	2100      	movs	r1, #0
 808b510:	6822      	ldr	r2, [r4, #0]
 808b512:	68a3      	ldr	r3, [r4, #8]
 808b514:	54d1      	strb	r1, [r2, r3]
	return *this;
 808b516:	e7f2      	b.n	808b4fe <_ZN6String4copyEPKcj+0x16>

0808b518 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 808b518:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 808b51a:	2300      	movs	r3, #0
String::String(const char *cstr)
 808b51c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 808b51e:	460d      	mov	r5, r1
	capacity = 0;
 808b520:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b524:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b526:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 808b528:	b139      	cbz	r1, 808b53a <_ZN6StringC1EPKc+0x22>
 808b52a:	4608      	mov	r0, r1
 808b52c:	f003 f921 	bl	808e772 <strlen>
 808b530:	4629      	mov	r1, r5
 808b532:	4602      	mov	r2, r0
 808b534:	4620      	mov	r0, r4
 808b536:	f7ff ffd7 	bl	808b4e8 <_ZN6String4copyEPKcj>
}
 808b53a:	4620      	mov	r0, r4
 808b53c:	bd38      	pop	{r3, r4, r5, pc}

0808b53e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808b53e:	b538      	push	{r3, r4, r5, lr}
 808b540:	4605      	mov	r5, r0
	if (buffer) {
 808b542:	6800      	ldr	r0, [r0, #0]
{
 808b544:	460c      	mov	r4, r1
	if (buffer) {
 808b546:	b168      	cbz	r0, 808b564 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 808b548:	686a      	ldr	r2, [r5, #4]
 808b54a:	688b      	ldr	r3, [r1, #8]
 808b54c:	429a      	cmp	r2, r3
 808b54e:	d307      	bcc.n	808b560 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 808b550:	6809      	ldr	r1, [r1, #0]
 808b552:	f003 f8ea 	bl	808e72a <strcpy>
			len = rhs.len;
 808b556:	68a3      	ldr	r3, [r4, #8]
 808b558:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 808b55a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 808b55c:	60a3      	str	r3, [r4, #8]
}
 808b55e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 808b560:	f7ff fb56 	bl	808ac10 <free>
	buffer = rhs.buffer;
 808b564:	6823      	ldr	r3, [r4, #0]
 808b566:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 808b568:	6863      	ldr	r3, [r4, #4]
 808b56a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 808b56c:	68a3      	ldr	r3, [r4, #8]
 808b56e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808b570:	2300      	movs	r3, #0
	rhs.capacity = 0;
 808b572:	e9c4 3300 	strd	r3, r3, [r4]
 808b576:	e7f1      	b.n	808b55c <_ZN6String4moveERS_+0x1e>

0808b578 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808b578:	4288      	cmp	r0, r1
{
 808b57a:	b510      	push	{r4, lr}
 808b57c:	460b      	mov	r3, r1
 808b57e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808b580:	d004      	beq.n	808b58c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808b582:	6809      	ldr	r1, [r1, #0]
 808b584:	b121      	cbz	r1, 808b590 <_ZN6StringaSERKS_+0x18>
 808b586:	689a      	ldr	r2, [r3, #8]
 808b588:	f7ff ffae 	bl	808b4e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 808b58c:	4620      	mov	r0, r4
 808b58e:	bd10      	pop	{r4, pc}
	else invalidate();
 808b590:	f7ff ff7f 	bl	808b492 <_ZN6String10invalidateEv>
 808b594:	e7fa      	b.n	808b58c <_ZN6StringaSERKS_+0x14>

0808b596 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 808b596:	2300      	movs	r3, #0
String::String(const String &value)
 808b598:	b510      	push	{r4, lr}
 808b59a:	4604      	mov	r4, r0
	capacity = 0;
 808b59c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b5a0:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b5a2:	7303      	strb	r3, [r0, #12]
	*this = value;
 808b5a4:	f7ff ffe8 	bl	808b578 <_ZN6StringaSERKS_>
}
 808b5a8:	4620      	mov	r0, r4
 808b5aa:	bd10      	pop	{r4, pc}

0808b5ac <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 808b5ac:	4288      	cmp	r0, r1
{
 808b5ae:	b510      	push	{r4, lr}
 808b5b0:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 808b5b2:	d001      	beq.n	808b5b8 <_ZN6StringaSEOS_+0xc>
 808b5b4:	f7ff ffc3 	bl	808b53e <_ZN6String4moveERS_>
	return *this;
}
 808b5b8:	4620      	mov	r0, r4
 808b5ba:	bd10      	pop	{r4, pc}

0808b5bc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808b5bc:	b538      	push	{r3, r4, r5, lr}
 808b5be:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808b5c0:	460c      	mov	r4, r1
 808b5c2:	b149      	cbz	r1, 808b5d8 <_ZN6StringaSEPKc+0x1c>
 808b5c4:	4608      	mov	r0, r1
 808b5c6:	f003 f8d4 	bl	808e772 <strlen>
 808b5ca:	4621      	mov	r1, r4
 808b5cc:	4602      	mov	r2, r0
 808b5ce:	4628      	mov	r0, r5
 808b5d0:	f7ff ff8a 	bl	808b4e8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 808b5d4:	4628      	mov	r0, r5
 808b5d6:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 808b5d8:	f7ff ff5b 	bl	808b492 <_ZN6String10invalidateEv>
 808b5dc:	e7fa      	b.n	808b5d4 <_ZN6StringaSEPKc+0x18>

0808b5de <_ZN6StringC1Ec>:
	buffer = NULL;
 808b5de:	2300      	movs	r3, #0
String::String(char c)
 808b5e0:	b513      	push	{r0, r1, r4, lr}
 808b5e2:	4604      	mov	r4, r0
	buf[0] = c;
 808b5e4:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
 808b5e8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b5ec:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b5ee:	7303      	strb	r3, [r0, #12]
	*this = buf;
 808b5f0:	a901      	add	r1, sp, #4
	buf[1] = 0;
 808b5f2:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 808b5f6:	f7ff ffe1 	bl	808b5bc <_ZN6StringaSEPKc>
}
 808b5fa:	4620      	mov	r0, r4
 808b5fc:	b002      	add	sp, #8
 808b5fe:	bd10      	pop	{r4, pc}

0808b600 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 808b600:	b510      	push	{r4, lr}
	buffer = NULL;
 808b602:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 808b604:	4604      	mov	r4, r0
 808b606:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 808b608:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808b60c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b60e:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 808b610:	4608      	mov	r0, r1
	itoa(value, buf, base);
 808b612:	a901      	add	r1, sp, #4
 808b614:	f7ff fec6 	bl	808b3a4 <itoa>
	*this = buf;
 808b618:	4620      	mov	r0, r4
 808b61a:	a901      	add	r1, sp, #4
 808b61c:	f7ff ffce 	bl	808b5bc <_ZN6StringaSEPKc>
}
 808b620:	4620      	mov	r0, r4
 808b622:	b00a      	add	sp, #40	; 0x28
 808b624:	bd10      	pop	{r4, pc}

0808b626 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
 808b626:	b510      	push	{r4, lr}
	buffer = NULL;
 808b628:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
 808b62a:	4604      	mov	r4, r0
 808b62c:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 808b62e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808b632:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b634:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
 808b636:	4608      	mov	r0, r1
	ltoa(value, buf, base);
 808b638:	a901      	add	r1, sp, #4
 808b63a:	f7ff fe46 	bl	808b2ca <ltoa>
	*this = buf;
 808b63e:	4620      	mov	r0, r4
 808b640:	a901      	add	r1, sp, #4
 808b642:	f7ff ffbb 	bl	808b5bc <_ZN6StringaSEPKc>
}
 808b646:	4620      	mov	r0, r4
 808b648:	b00a      	add	sp, #40	; 0x28
 808b64a:	bd10      	pop	{r4, pc}

0808b64c <_ZN6StringC1Efi>:
	buffer = NULL;
 808b64c:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 808b64e:	b530      	push	{r4, r5, lr}
 808b650:	4604      	mov	r4, r0
 808b652:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 808b654:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808b658:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b65a:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 808b65c:	b2d5      	uxtb	r5, r2
 808b65e:	4608      	mov	r0, r1
 808b660:	f002 f85a 	bl	808d718 <__aeabi_f2d>
 808b664:	462a      	mov	r2, r5
 808b666:	ab01      	add	r3, sp, #4
 808b668:	f7ff feb2 	bl	808b3d0 <_Z4dtoadhPc>
        *this = buf;
 808b66c:	4620      	mov	r0, r4
 808b66e:	a901      	add	r1, sp, #4
 808b670:	f7ff ffa4 	bl	808b5bc <_ZN6StringaSEPKc>
}
 808b674:	4620      	mov	r0, r4
 808b676:	b00b      	add	sp, #44	; 0x2c
 808b678:	bd30      	pop	{r4, r5, pc}

0808b67a <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
 808b67a:	b510      	push	{r4, lr}
 808b67c:	4619      	mov	r1, r3
 808b67e:	4604      	mov	r4, r0
	buffer = NULL;
 808b680:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
 808b682:	b08a      	sub	sp, #40	; 0x28
 808b684:	4610      	mov	r0, r2
	capacity = 0;
 808b686:	e9c4 3300 	strd	r3, r3, [r4]
	dtoa(value, decimalPlaces, buf);
 808b68a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	len = 0;
 808b68e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b690:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
 808b692:	ab01      	add	r3, sp, #4
 808b694:	f7ff fe9c 	bl	808b3d0 <_Z4dtoadhPc>
        *this = buf;
 808b698:	4620      	mov	r0, r4
 808b69a:	a901      	add	r1, sp, #4
 808b69c:	f7ff ff8e 	bl	808b5bc <_ZN6StringaSEPKc>
}
 808b6a0:	4620      	mov	r0, r4
 808b6a2:	b00a      	add	sp, #40	; 0x28
 808b6a4:	bd10      	pop	{r4, pc}

0808b6a6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808b6a6:	b570      	push	{r4, r5, r6, lr}
 808b6a8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808b6aa:	460e      	mov	r6, r1
 808b6ac:	b909      	cbnz	r1, 808b6b2 <_ZN6String6concatEPKcj+0xc>
 808b6ae:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 808b6b0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 808b6b2:	b16a      	cbz	r2, 808b6d0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 808b6b4:	6884      	ldr	r4, [r0, #8]
 808b6b6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 808b6b8:	4621      	mov	r1, r4
 808b6ba:	f7ff ff01 	bl	808b4c0 <_ZN6String7reserveEj>
 808b6be:	2800      	cmp	r0, #0
 808b6c0:	d0f5      	beq.n	808b6ae <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 808b6c2:	6828      	ldr	r0, [r5, #0]
 808b6c4:	68ab      	ldr	r3, [r5, #8]
 808b6c6:	4631      	mov	r1, r6
 808b6c8:	4418      	add	r0, r3
 808b6ca:	f003 f82e 	bl	808e72a <strcpy>
	len = newlen;
 808b6ce:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 808b6d0:	2001      	movs	r0, #1
 808b6d2:	e7ed      	b.n	808b6b0 <_ZN6String6concatEPKcj+0xa>

0808b6d4 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 808b6d4:	688a      	ldr	r2, [r1, #8]
 808b6d6:	6809      	ldr	r1, [r1, #0]
 808b6d8:	f7ff bfe5 	b.w	808b6a6 <_ZN6String6concatEPKcj>

0808b6dc <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 808b6dc:	b538      	push	{r3, r4, r5, lr}
 808b6de:	4605      	mov	r5, r0
	if (!cstr) return 0;
 808b6e0:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 808b6e2:	4608      	mov	r0, r1
	if (!cstr) return 0;
 808b6e4:	b141      	cbz	r1, 808b6f8 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 808b6e6:	f003 f844 	bl	808e772 <strlen>
 808b6ea:	4621      	mov	r1, r4
 808b6ec:	4602      	mov	r2, r0
 808b6ee:	4628      	mov	r0, r5
}
 808b6f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 808b6f4:	f7ff bfd7 	b.w	808b6a6 <_ZN6String6concatEPKcj>
}
 808b6f8:	bd38      	pop	{r3, r4, r5, pc}

0808b6fa <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b6fa:	2300      	movs	r3, #0
{
 808b6fc:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 808b6fe:	2201      	movs	r2, #1
	buf[0] = c;
 808b700:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 808b704:	a901      	add	r1, sp, #4
	buf[1] = 0;
 808b706:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 808b70a:	f7ff ffcc 	bl	808b6a6 <_ZN6String6concatEPKcj>
}
 808b70e:	b003      	add	sp, #12
 808b710:	f85d fb04 	ldr.w	pc, [sp], #4

0808b714 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 808b714:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 808b716:	220a      	movs	r2, #10
{
 808b718:	4604      	mov	r4, r0
 808b71a:	4608      	mov	r0, r1
	itoa(num, buf, 10);
 808b71c:	4669      	mov	r1, sp
 808b71e:	f7ff fe41 	bl	808b3a4 <itoa>
	return concat(buf, strlen(buf));
 808b722:	4668      	mov	r0, sp
 808b724:	f003 f825 	bl	808e772 <strlen>
 808b728:	4669      	mov	r1, sp
 808b72a:	4602      	mov	r2, r0
 808b72c:	4620      	mov	r0, r4
 808b72e:	f7ff ffba 	bl	808b6a6 <_ZN6String6concatEPKcj>
}
 808b732:	b002      	add	sp, #8
 808b734:	bd10      	pop	{r4, pc}

0808b736 <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
 808b736:	b510      	push	{r4, lr}
 808b738:	4604      	mov	r4, r0
 808b73a:	b086      	sub	sp, #24
	char buf[20];
	dtoa(num, 6, buf);
 808b73c:	4608      	mov	r0, r1
 808b73e:	f001 ffeb 	bl	808d718 <__aeabi_f2d>
 808b742:	ab01      	add	r3, sp, #4
 808b744:	2206      	movs	r2, #6
 808b746:	f7ff fe43 	bl	808b3d0 <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
 808b74a:	a801      	add	r0, sp, #4
 808b74c:	f003 f811 	bl	808e772 <strlen>
 808b750:	a901      	add	r1, sp, #4
 808b752:	4602      	mov	r2, r0
 808b754:	4620      	mov	r0, r4
 808b756:	f7ff ffa6 	bl	808b6a6 <_ZN6String6concatEPKcj>
}
 808b75a:	b006      	add	sp, #24
 808b75c:	bd10      	pop	{r4, pc}

0808b75e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808b75e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b760:	688a      	ldr	r2, [r1, #8]
 808b762:	6809      	ldr	r1, [r1, #0]
{
 808b764:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b766:	f7ff ff9e 	bl	808b6a6 <_ZN6String6concatEPKcj>
 808b76a:	b910      	cbnz	r0, 808b772 <_ZplRK15StringSumHelperRK6String+0x14>
 808b76c:	4620      	mov	r0, r4
 808b76e:	f7ff fe90 	bl	808b492 <_ZN6String10invalidateEv>
	return a;
}
 808b772:	4620      	mov	r0, r4
 808b774:	bd10      	pop	{r4, pc}

0808b776 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 808b776:	b538      	push	{r3, r4, r5, lr}
 808b778:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808b77a:	460d      	mov	r5, r1
 808b77c:	b921      	cbnz	r1, 808b788 <_ZplRK15StringSumHelperPKc+0x12>
 808b77e:	4620      	mov	r0, r4
 808b780:	f7ff fe87 	bl	808b492 <_ZN6String10invalidateEv>
	return a;
}
 808b784:	4620      	mov	r0, r4
 808b786:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808b788:	4608      	mov	r0, r1
 808b78a:	f002 fff2 	bl	808e772 <strlen>
 808b78e:	4629      	mov	r1, r5
 808b790:	4602      	mov	r2, r0
 808b792:	4620      	mov	r0, r4
 808b794:	f7ff ff87 	bl	808b6a6 <_ZN6String6concatEPKcj>
 808b798:	2800      	cmp	r0, #0
 808b79a:	d0f0      	beq.n	808b77e <_ZplRK15StringSumHelperPKc+0x8>
 808b79c:	e7f2      	b.n	808b784 <_ZplRK15StringSumHelperPKc+0xe>

0808b79e <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
 808b79e:	b510      	push	{r4, lr}
 808b7a0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b7a2:	f7ff ffb7 	bl	808b714 <_ZN6String6concatEi>
 808b7a6:	b910      	cbnz	r0, 808b7ae <_ZplRK15StringSumHelperi+0x10>
 808b7a8:	4620      	mov	r0, r4
 808b7aa:	f7ff fe72 	bl	808b492 <_ZN6String10invalidateEv>
	return a;
}
 808b7ae:	4620      	mov	r0, r4
 808b7b0:	bd10      	pop	{r4, pc}

0808b7b2 <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
 808b7b2:	b510      	push	{r4, lr}
 808b7b4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b7b6:	f7ff ffbe 	bl	808b736 <_ZN6String6concatEf>
 808b7ba:	b910      	cbnz	r0, 808b7c2 <_ZplRK15StringSumHelperf+0x10>
 808b7bc:	4620      	mov	r0, r4
 808b7be:	f7ff fe68 	bl	808b492 <_ZN6String10invalidateEv>
	return a;
}
 808b7c2:	4620      	mov	r0, r4
 808b7c4:	bd10      	pop	{r4, pc}

0808b7c6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808b7c6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b7c8:	6882      	ldr	r2, [r0, #8]
 808b7ca:	b93a      	cbnz	r2, 808b7dc <_ZNK6String6equalsEPKc+0x16>
 808b7cc:	b121      	cbz	r1, 808b7d8 <_ZNK6String6equalsEPKc+0x12>
 808b7ce:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 808b7d0:	fab0 f080 	clz	r0, r0
 808b7d4:	0940      	lsrs	r0, r0, #5
 808b7d6:	e000      	b.n	808b7da <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b7d8:	2001      	movs	r0, #1
}
 808b7da:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808b7dc:	6800      	ldr	r0, [r0, #0]
 808b7de:	b909      	cbnz	r1, 808b7e4 <_ZNK6String6equalsEPKc+0x1e>
 808b7e0:	7800      	ldrb	r0, [r0, #0]
 808b7e2:	e7f5      	b.n	808b7d0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 808b7e4:	f002 ff97 	bl	808e716 <strcmp>
 808b7e8:	e7f2      	b.n	808b7d0 <_ZNK6String6equalsEPKc+0xa>

0808b7ea <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 808b7ea:	4613      	mov	r3, r2
 808b7ec:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b7ee:	688a      	ldr	r2, [r1, #8]
 808b7f0:	6884      	ldr	r4, [r0, #8]
 808b7f2:	1aa4      	subs	r4, r4, r2
 808b7f4:	429c      	cmp	r4, r3
 808b7f6:	d30a      	bcc.n	808b80e <_ZNK6String10startsWithERKS_j+0x24>
 808b7f8:	6800      	ldr	r0, [r0, #0]
 808b7fa:	b138      	cbz	r0, 808b80c <_ZNK6String10startsWithERKS_j+0x22>
 808b7fc:	6809      	ldr	r1, [r1, #0]
 808b7fe:	b141      	cbz	r1, 808b812 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 808b800:	4418      	add	r0, r3
 808b802:	f002 ffbe 	bl	808e782 <strncmp>
 808b806:	fab0 f080 	clz	r0, r0
 808b80a:	0940      	lsrs	r0, r0, #5
}
 808b80c:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b80e:	2000      	movs	r0, #0
 808b810:	e7fc      	b.n	808b80c <_ZNK6String10startsWithERKS_j+0x22>
 808b812:	4608      	mov	r0, r1
 808b814:	e7fa      	b.n	808b80c <_ZNK6String10startsWithERKS_j+0x22>

0808b816 <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 808b816:	6882      	ldr	r2, [r0, #8]
 808b818:	688b      	ldr	r3, [r1, #8]
 808b81a:	429a      	cmp	r2, r3
 808b81c:	d302      	bcc.n	808b824 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 808b81e:	2200      	movs	r2, #0
 808b820:	f7ff bfe3 	b.w	808b7ea <_ZNK6String10startsWithERKS_j>
}
 808b824:	2000      	movs	r0, #0
 808b826:	4770      	bx	lr

0808b828 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808b828:	6883      	ldr	r3, [r0, #8]
 808b82a:	428b      	cmp	r3, r1
 808b82c:	d903      	bls.n	808b836 <_ZNK6StringixEj+0xe>
 808b82e:	6800      	ldr	r0, [r0, #0]
 808b830:	b110      	cbz	r0, 808b838 <_ZNK6StringixEj+0x10>
	return buffer[index];
 808b832:	5c40      	ldrb	r0, [r0, r1]
 808b834:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 808b836:	2000      	movs	r0, #0
}
 808b838:	4770      	bx	lr

0808b83a <_ZNK6String6charAtEj>:
	return operator[](loc);
 808b83a:	f7ff bff5 	b.w	808b828 <_ZNK6StringixEj>

0808b83e <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 808b83e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 808b840:	6883      	ldr	r3, [r0, #8]
 808b842:	4293      	cmp	r3, r2
 808b844:	d906      	bls.n	808b854 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 808b846:	6804      	ldr	r4, [r0, #0]
 808b848:	18a0      	adds	r0, r4, r2
 808b84a:	f002 ff57 	bl	808e6fc <strchr>
	if (temp == NULL) return -1;
 808b84e:	b108      	cbz	r0, 808b854 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 808b850:	1b00      	subs	r0, r0, r4
}
 808b852:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 808b854:	f04f 30ff 	mov.w	r0, #4294967295
 808b858:	e7fb      	b.n	808b852 <_ZNK6String7indexOfEcj+0x14>
	...

0808b85c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b85e:	461d      	mov	r5, r3
	if (left > right) {
 808b860:	429a      	cmp	r2, r3
 808b862:	bf88      	it	hi
 808b864:	4613      	movhi	r3, r2
{
 808b866:	460f      	mov	r7, r1
 808b868:	4614      	mov	r4, r2
	if (left > right) {
 808b86a:	bf88      	it	hi
 808b86c:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808b86e:	490b      	ldr	r1, [pc, #44]	; (808b89c <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 808b870:	bf88      	it	hi
 808b872:	461d      	movhi	r5, r3
{
 808b874:	4606      	mov	r6, r0
	String out;
 808b876:	f7ff fe4f 	bl	808b518 <_ZN6StringC1EPKc>
	if (left > len) return out;
 808b87a:	68ba      	ldr	r2, [r7, #8]
 808b87c:	42a2      	cmp	r2, r4
 808b87e:	d30a      	bcc.n	808b896 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 808b880:	6839      	ldr	r1, [r7, #0]
 808b882:	42aa      	cmp	r2, r5
 808b884:	bf94      	ite	ls
 808b886:	ebc4 0202 	rsbls	r2, r4, r2
 808b88a:	ebc4 0205 	rsbhi	r2, r4, r5
 808b88e:	4630      	mov	r0, r6
 808b890:	4421      	add	r1, r4
 808b892:	f7ff fe29 	bl	808b4e8 <_ZN6String4copyEPKcj>
	return out;
}
 808b896:	4630      	mov	r0, r6
 808b898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808b89a:	bf00      	nop
 808b89c:	08092ce2 	.word	0x08092ce2

0808b8a0 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 808b8a0:	6800      	ldr	r0, [r0, #0]
 808b8a2:	b108      	cbz	r0, 808b8a8 <_ZNK6String5toIntEv+0x8>
 808b8a4:	f002 bebb 	b.w	808e61e <atol>
	return 0;
}
 808b8a8:	4770      	bx	lr

0808b8aa <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808b8aa:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808b8ac:	6800      	ldr	r0, [r0, #0]
 808b8ae:	b120      	cbz	r0, 808b8ba <_ZNK6String7toFloatEv+0x10>
 808b8b0:	f002 feae 	bl	808e610 <atof>
 808b8b4:	f002 fa80 	bl	808ddb8 <__aeabi_d2f>
	return 0;
}
 808b8b8:	bd08      	pop	{r3, pc}
	return 0;
 808b8ba:	2000      	movs	r0, #0
 808b8bc:	e7fc      	b.n	808b8b8 <_ZNK6String7toFloatEv+0xe>
	...

0808b8c0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 808b8c0:	b40e      	push	{r1, r2, r3}
 808b8c2:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 808b8c4:	ad09      	add	r5, sp, #36	; 0x24
 808b8c6:	f855 7b04 	ldr.w	r7, [r5], #4
 808b8ca:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808b8cc:	462b      	mov	r3, r5
 808b8ce:	463a      	mov	r2, r7
 808b8d0:	2105      	movs	r1, #5
 808b8d2:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 808b8d4:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808b8d6:	f7ff f9cb 	bl	808ac70 <vsnprintf>
 808b8da:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 808b8dc:	490b      	ldr	r1, [pc, #44]	; (808b90c <_ZN6String6formatEPKcz+0x4c>)
 808b8de:	4620      	mov	r0, r4
 808b8e0:	f7ff fe1a 	bl	808b518 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 808b8e4:	4631      	mov	r1, r6
 808b8e6:	4620      	mov	r0, r4
 808b8e8:	f7ff fdea 	bl	808b4c0 <_ZN6String7reserveEj>
    if (result.buffer) {
 808b8ec:	6820      	ldr	r0, [r4, #0]
 808b8ee:	b130      	cbz	r0, 808b8fe <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808b8f0:	462b      	mov	r3, r5
 808b8f2:	463a      	mov	r2, r7
 808b8f4:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 808b8f6:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808b8f8:	f7ff f9ba 	bl	808ac70 <vsnprintf>
        va_end(marker);
        result.len = n;
 808b8fc:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 808b8fe:	4620      	mov	r0, r4
 808b900:	b004      	add	sp, #16
 808b902:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 808b906:	b003      	add	sp, #12
 808b908:	4770      	bx	lr
 808b90a:	bf00      	nop
 808b90c:	08092ce2 	.word	0x08092ce2

0808b910 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808b910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b912:	4606      	mov	r6, r0
 808b914:	460d      	mov	r5, r1
  size_t n = 0;
 808b916:	2400      	movs	r4, #0
 808b918:	188f      	adds	r7, r1, r2
  while (size--) {
 808b91a:	42bd      	cmp	r5, r7
 808b91c:	d00c      	beq.n	808b938 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808b91e:	6833      	ldr	r3, [r6, #0]
 808b920:	4630      	mov	r0, r6
 808b922:	689b      	ldr	r3, [r3, #8]
 808b924:	f815 1b01 	ldrb.w	r1, [r5], #1
 808b928:	4798      	blx	r3
     if (chunk>=0)
 808b92a:	1e03      	subs	r3, r0, #0
 808b92c:	db01      	blt.n	808b932 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808b92e:	441c      	add	r4, r3
  while (size--) {
 808b930:	e7f3      	b.n	808b91a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808b932:	2c00      	cmp	r4, #0
 808b934:	bf08      	it	eq
 808b936:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 808b938:	4620      	mov	r0, r4
 808b93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b93c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 808b93c:	b508      	push	{r3, lr}
  return write(str);
 808b93e:	f7fd f977 	bl	8088c30 <_ZN5Print5writeEPKc>
}
 808b942:	bd08      	pop	{r3, pc}

0808b944 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 808b944:	6803      	ldr	r3, [r0, #0]
 808b946:	689b      	ldr	r3, [r3, #8]
 808b948:	4718      	bx	r3

0808b94a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808b94a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808b94c:	210d      	movs	r1, #13
{
 808b94e:	4605      	mov	r5, r0
  size_t n = print('\r');
 808b950:	f7ff fff8 	bl	808b944 <_ZN5Print5printEc>
  n += print('\n');
 808b954:	210a      	movs	r1, #10
  size_t n = print('\r');
 808b956:	4604      	mov	r4, r0
  n += print('\n');
 808b958:	4628      	mov	r0, r5
 808b95a:	f7ff fff3 	bl	808b944 <_ZN5Print5printEc>
  return n;
}
 808b95e:	4420      	add	r0, r4
 808b960:	bd38      	pop	{r3, r4, r5, pc}

0808b962 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808b962:	b538      	push	{r3, r4, r5, lr}
 808b964:	4605      	mov	r5, r0
  return write(str);
 808b966:	f7fd f963 	bl	8088c30 <_ZN5Print5writeEPKc>
 808b96a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 808b96c:	4628      	mov	r0, r5
 808b96e:	f7ff ffec 	bl	808b94a <_ZN5Print7printlnEv>
  return n;
}
 808b972:	4420      	add	r0, r4
 808b974:	bd38      	pop	{r3, r4, r5, pc}

0808b976 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 808b976:	b538      	push	{r3, r4, r5, lr}
 808b978:	4605      	mov	r5, r0
  size_t n = print(c);
 808b97a:	f7ff ffe3 	bl	808b944 <_ZN5Print5printEc>
 808b97e:	4604      	mov	r4, r0
  n += println();
 808b980:	4628      	mov	r0, r5
 808b982:	f7ff ffe2 	bl	808b94a <_ZN5Print7printlnEv>
  return n;
}
 808b986:	4420      	add	r0, r4
 808b988:	bd38      	pop	{r3, r4, r5, pc}

0808b98a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808b98a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808b98c:	2a01      	cmp	r2, #1
 808b98e:	bf98      	it	ls
 808b990:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 808b992:	b530      	push	{r4, r5, lr}
 808b994:	b08b      	sub	sp, #44	; 0x2c
 808b996:	460c      	mov	r4, r1
  *str = '\0';
 808b998:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 808b99c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808b99e:	4625      	mov	r5, r4
 808b9a0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 808b9a4:	fb04 5312 	mls	r3, r4, r2, r5
 808b9a8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808b9aa:	2b09      	cmp	r3, #9
 808b9ac:	bf94      	ite	ls
 808b9ae:	3330      	addls	r3, #48	; 0x30
 808b9b0:	3337      	addhi	r3, #55	; 0x37
 808b9b2:	b2db      	uxtb	r3, r3
  } while(n);
 808b9b4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808b9b6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 808b9ba:	d9f0      	bls.n	808b99e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 808b9bc:	f7fd f938 	bl	8088c30 <_ZN5Print5writeEPKc>
}
 808b9c0:	b00b      	add	sp, #44	; 0x2c
 808b9c2:	bd30      	pop	{r4, r5, pc}

0808b9c4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808b9c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b9c8:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808b9ca:	4619      	mov	r1, r3
 808b9cc:	4610      	mov	r0, r2
{
 808b9ce:	4692      	mov	sl, r2
 808b9d0:	461f      	mov	r7, r3
 808b9d2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 808b9d6:	f002 f991 	bl	808dcfc <__aeabi_dcmpun>
 808b9da:	b140      	cbz	r0, 808b9ee <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 808b9dc:	4950      	ldr	r1, [pc, #320]	; (808bb20 <_ZN5Print10printFloatEdh+0x15c>)
 808b9de:	4628      	mov	r0, r5
 808b9e0:	f7fd f926 	bl	8088c30 <_ZN5Print5writeEPKc>
 808b9e4:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 808b9e6:	4620      	mov	r0, r4
 808b9e8:	b003      	add	sp, #12
 808b9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 808b9ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 808b9f2:	f04f 32ff 	mov.w	r2, #4294967295
 808b9f6:	4650      	mov	r0, sl
 808b9f8:	4621      	mov	r1, r4
 808b9fa:	4b4a      	ldr	r3, [pc, #296]	; (808bb24 <_ZN5Print10printFloatEdh+0x160>)
 808b9fc:	f002 f97e 	bl	808dcfc <__aeabi_dcmpun>
 808ba00:	b948      	cbnz	r0, 808ba16 <_ZN5Print10printFloatEdh+0x52>
 808ba02:	f04f 32ff 	mov.w	r2, #4294967295
 808ba06:	4650      	mov	r0, sl
 808ba08:	4621      	mov	r1, r4
 808ba0a:	4b46      	ldr	r3, [pc, #280]	; (808bb24 <_ZN5Print10printFloatEdh+0x160>)
 808ba0c:	f002 f958 	bl	808dcc0 <__aeabi_dcmple>
 808ba10:	b908      	cbnz	r0, 808ba16 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 808ba12:	4945      	ldr	r1, [pc, #276]	; (808bb28 <_ZN5Print10printFloatEdh+0x164>)
 808ba14:	e7e3      	b.n	808b9de <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 808ba16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808ba1a:	4650      	mov	r0, sl
 808ba1c:	4639      	mov	r1, r7
 808ba1e:	4b43      	ldr	r3, [pc, #268]	; (808bb2c <_ZN5Print10printFloatEdh+0x168>)
 808ba20:	f002 f962 	bl	808dce8 <__aeabi_dcmpgt>
 808ba24:	b108      	cbz	r0, 808ba2a <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 808ba26:	4942      	ldr	r1, [pc, #264]	; (808bb30 <_ZN5Print10printFloatEdh+0x16c>)
 808ba28:	e7d9      	b.n	808b9de <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 808ba2a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808ba2e:	4650      	mov	r0, sl
 808ba30:	4639      	mov	r1, r7
 808ba32:	4b40      	ldr	r3, [pc, #256]	; (808bb34 <_ZN5Print10printFloatEdh+0x170>)
 808ba34:	f002 f93a 	bl	808dcac <__aeabi_dcmplt>
 808ba38:	2800      	cmp	r0, #0
 808ba3a:	d1f4      	bne.n	808ba26 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 808ba3c:	2200      	movs	r2, #0
 808ba3e:	2300      	movs	r3, #0
 808ba40:	4650      	mov	r0, sl
 808ba42:	4639      	mov	r1, r7
 808ba44:	f002 f932 	bl	808dcac <__aeabi_dcmplt>
 808ba48:	4604      	mov	r4, r0
 808ba4a:	b130      	cbz	r0, 808ba5a <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 808ba4c:	212d      	movs	r1, #45	; 0x2d
 808ba4e:	4628      	mov	r0, r5
 808ba50:	f7ff ff78 	bl	808b944 <_ZN5Print5printEc>
 808ba54:	4604      	mov	r4, r0
     number = -number;
 808ba56:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 808ba5a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 808ba5e:	2000      	movs	r0, #0
    rounding /= 10.0;
 808ba60:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 808ba64:	4934      	ldr	r1, [pc, #208]	; (808bb38 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 808ba66:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 808bb40 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 808ba6a:	fa5f f38b 	uxtb.w	r3, fp
 808ba6e:	429e      	cmp	r6, r3
 808ba70:	d906      	bls.n	808ba80 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 808ba72:	4642      	mov	r2, r8
 808ba74:	464b      	mov	r3, r9
 808ba76:	f001 ffd1 	bl	808da1c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 808ba7a:	f10b 0b01 	add.w	fp, fp, #1
 808ba7e:	e7f4      	b.n	808ba6a <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 808ba80:	463b      	mov	r3, r7
 808ba82:	4652      	mov	r2, sl
 808ba84:	f001 fcea 	bl	808d45c <__adddf3>
 808ba88:	4689      	mov	r9, r1
 808ba8a:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 808ba8c:	f002 f974 	bl	808dd78 <__aeabi_d2uiz>
 808ba90:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 808ba92:	f001 fe1f 	bl	808d6d4 <__aeabi_ui2d>
 808ba96:	4602      	mov	r2, r0
 808ba98:	460b      	mov	r3, r1
 808ba9a:	4640      	mov	r0, r8
 808ba9c:	4649      	mov	r1, r9
 808ba9e:	f001 fcdb 	bl	808d458 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 808baa2:	220a      	movs	r2, #10
 808baa4:	4680      	mov	r8, r0
 808baa6:	4689      	mov	r9, r1
 808baa8:	4628      	mov	r0, r5
 808baaa:	4639      	mov	r1, r7
 808baac:	f7ff ff6d 	bl	808b98a <_ZN5Print11printNumberEmh>
  n += print(int_part);
 808bab0:	4404      	add	r4, r0
  if (digits > 0) {
 808bab2:	b126      	cbz	r6, 808babe <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 808bab4:	4628      	mov	r0, r5
 808bab6:	4921      	ldr	r1, [pc, #132]	; (808bb3c <_ZN5Print10printFloatEdh+0x178>)
 808bab8:	f7fd f8ba 	bl	8088c30 <_ZN5Print5writeEPKc>
    n += print(".");
 808babc:	4404      	add	r4, r0
    remainder *= 10.0;
 808babe:	f04f 0a00 	mov.w	sl, #0
 808bac2:	f8df b07c 	ldr.w	fp, [pc, #124]	; 808bb40 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 808bac6:	3e01      	subs	r6, #1
 808bac8:	b2f6      	uxtb	r6, r6
 808baca:	2eff      	cmp	r6, #255	; 0xff
 808bacc:	d08b      	beq.n	808b9e6 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 808bace:	4652      	mov	r2, sl
 808bad0:	465b      	mov	r3, fp
 808bad2:	4640      	mov	r0, r8
 808bad4:	4649      	mov	r1, r9
 808bad6:	f001 fe77 	bl	808d7c8 <__aeabi_dmul>
 808bada:	4680      	mov	r8, r0
 808badc:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 808bade:	f002 f923 	bl	808dd28 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 808bae2:	1e07      	subs	r7, r0, #0
 808bae4:	da19      	bge.n	808bb1a <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 808bae6:	212d      	movs	r1, #45	; 0x2d
 808bae8:	4628      	mov	r0, r5
 808baea:	f7ff ff2b 	bl	808b944 <_ZN5Print5printEc>
 808baee:	4603      	mov	r3, r0
            val = -n;
 808baf0:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 808baf2:	220a      	movs	r2, #10
 808baf4:	4628      	mov	r0, r5
 808baf6:	9301      	str	r3, [sp, #4]
 808baf8:	f7ff ff47 	bl	808b98a <_ZN5Print11printNumberEmh>
 808bafc:	9b01      	ldr	r3, [sp, #4]
 808bafe:	4403      	add	r3, r0
    remainder -= toPrint;
 808bb00:	4638      	mov	r0, r7
    n += print(toPrint);
 808bb02:	441c      	add	r4, r3
    remainder -= toPrint;
 808bb04:	f001 fdf6 	bl	808d6f4 <__aeabi_i2d>
 808bb08:	4602      	mov	r2, r0
 808bb0a:	460b      	mov	r3, r1
 808bb0c:	4640      	mov	r0, r8
 808bb0e:	4649      	mov	r1, r9
 808bb10:	f001 fca2 	bl	808d458 <__aeabi_dsub>
 808bb14:	4680      	mov	r8, r0
 808bb16:	4689      	mov	r9, r1
  while (digits-- > 0)
 808bb18:	e7d5      	b.n	808bac6 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 808bb1a:	4639      	mov	r1, r7
        size_t t = 0;
 808bb1c:	2300      	movs	r3, #0
 808bb1e:	e7e8      	b.n	808baf2 <_ZN5Print10printFloatEdh+0x12e>
 808bb20:	08092d28 	.word	0x08092d28
 808bb24:	7fefffff 	.word	0x7fefffff
 808bb28:	08092d2c 	.word	0x08092d2c
 808bb2c:	41efffff 	.word	0x41efffff
 808bb30:	08092d30 	.word	0x08092d30
 808bb34:	c1efffff 	.word	0xc1efffff
 808bb38:	3fe00000 	.word	0x3fe00000
 808bb3c:	080926fa 	.word	0x080926fa
 808bb40:	40240000 	.word	0x40240000

0808bb44 <_ZN5Print7printlnEdi>:
{
 808bb44:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 808bb46:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 808bb4a:	4605      	mov	r5, r0
  return printFloat(n, digits);
 808bb4c:	9100      	str	r1, [sp, #0]
 808bb4e:	f7ff ff39 	bl	808b9c4 <_ZN5Print10printFloatEdh>
 808bb52:	4604      	mov	r4, r0
  n += println();
 808bb54:	4628      	mov	r0, r5
 808bb56:	f7ff fef8 	bl	808b94a <_ZN5Print7printlnEv>
}
 808bb5a:	4420      	add	r0, r4
 808bb5c:	b003      	add	sp, #12
 808bb5e:	bd30      	pop	{r4, r5, pc}

0808bb60 <_ZN5Print7printlnEfi>:
{
 808bb60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808bb62:	4604      	mov	r4, r0
    return println((double)num, digits);
 808bb64:	4608      	mov	r0, r1
{
 808bb66:	4615      	mov	r5, r2
    return println((double)num, digits);
 808bb68:	f001 fdd6 	bl	808d718 <__aeabi_f2d>
 808bb6c:	9500      	str	r5, [sp, #0]
 808bb6e:	4602      	mov	r2, r0
 808bb70:	460b      	mov	r3, r1
 808bb72:	4620      	mov	r0, r4
 808bb74:	f7ff ffe6 	bl	808bb44 <_ZN5Print7printlnEdi>
}
 808bb78:	b003      	add	sp, #12
 808bb7a:	bd30      	pop	{r4, r5, pc}

0808bb7c <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 808bb7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808bb80:	b086      	sub	sp, #24
 808bb82:	af00      	add	r7, sp, #0
 808bb84:	4605      	mov	r5, r0
 808bb86:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 808bb88:	1d38      	adds	r0, r7, #4
 808bb8a:	2114      	movs	r1, #20
{
 808bb8c:	4614      	mov	r4, r2
    va_copy(args2, args);
 808bb8e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 808bb90:	f7ff f86e 	bl	808ac70 <vsnprintf>

    if (n<bufsize)
 808bb94:	2813      	cmp	r0, #19
 808bb96:	d80e      	bhi.n	808bbb6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 808bb98:	4628      	mov	r0, r5
 808bb9a:	1d39      	adds	r1, r7, #4
 808bb9c:	f7fd f848 	bl	8088c30 <_ZN5Print5writeEPKc>
 808bba0:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 808bba2:	b11e      	cbz	r6, 808bbac <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 808bba4:	4628      	mov	r0, r5
 808bba6:	f7ff fed0 	bl	808b94a <_ZN5Print7printlnEv>
 808bbaa:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 808bbac:	4620      	mov	r0, r4
 808bbae:	3718      	adds	r7, #24
 808bbb0:	46bd      	mov	sp, r7
 808bbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 808bbb6:	f100 0308 	add.w	r3, r0, #8
 808bbba:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 808bbbe:	46e8      	mov	r8, sp
        char bigger[n+1];
 808bbc0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 808bbc4:	4622      	mov	r2, r4
 808bbc6:	1c41      	adds	r1, r0, #1
 808bbc8:	683b      	ldr	r3, [r7, #0]
 808bbca:	4668      	mov	r0, sp
 808bbcc:	f7ff f850 	bl	808ac70 <vsnprintf>
  return write(str);
 808bbd0:	4669      	mov	r1, sp
 808bbd2:	4628      	mov	r0, r5
 808bbd4:	f7fd f82c 	bl	8088c30 <_ZN5Print5writeEPKc>
 808bbd8:	4604      	mov	r4, r0
 808bbda:	46c5      	mov	sp, r8
 808bbdc:	e7e1      	b.n	808bba2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

0808bbde <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 808bbde:	b510      	push	{r4, lr}
 808bbe0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808bbe2:	f7fe fd5d 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 808bbe6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 808bbe8:	6823      	ldr	r3, [r4, #0]
 808bbea:	4620      	mov	r0, r4
 808bbec:	695b      	ldr	r3, [r3, #20]
 808bbee:	4798      	blx	r3
    if (c >= 0) return c;
 808bbf0:	2800      	cmp	r0, #0
 808bbf2:	da08      	bge.n	808bc06 <_ZN6Stream9timedReadEv+0x28>
 808bbf4:	f7fe fd54 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 808bbf8:	68e3      	ldr	r3, [r4, #12]
 808bbfa:	1ac0      	subs	r0, r0, r3
 808bbfc:	68a3      	ldr	r3, [r4, #8]
 808bbfe:	4298      	cmp	r0, r3
 808bc00:	d3f2      	bcc.n	808bbe8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 808bc02:	f04f 30ff 	mov.w	r0, #4294967295
}
 808bc06:	bd10      	pop	{r4, pc}

0808bc08 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 808bc08:	6081      	str	r1, [r0, #8]
}
 808bc0a:	4770      	bx	lr

0808bc0c <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 808bc0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bc10:	469b      	mov	fp, r3
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
 808bc12:	780b      	ldrb	r3, [r1, #0]
{
 808bc14:	4681      	mov	r9, r0
 808bc16:	460f      	mov	r7, r1
 808bc18:	4692      	mov	sl, r2
 808bc1a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if( *target == 0)
 808bc1e:	b9f3      	cbnz	r3, 808bc5e <_ZN6Stream9findUntilEPcjS0_j+0x52>
    return true;   // return true if target is a null string
 808bc20:	2001      	movs	r0, #1
    }
    else
      termIndex = 0;
  }
  return false;
}
 808bc22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      termIndex = 0;
 808bc26:	2400      	movs	r4, #0
  while( (c = timedRead()) > 0){
 808bc28:	4648      	mov	r0, r9
 808bc2a:	f7ff ffd8 	bl	808bbde <_ZN6Stream9timedReadEv>
 808bc2e:	1e06      	subs	r6, r0, #0
 808bc30:	dd13      	ble.n	808bc5a <_ZN6Stream9findUntilEPcjS0_j+0x4e>
    if(c != target[index])
 808bc32:	5d7b      	ldrb	r3, [r7, r5]
 808bc34:	429e      	cmp	r6, r3
 808bc36:	d003      	beq.n	808bc40 <_ZN6Stream9findUntilEPcjS0_j+0x34>
    if( c == target[index]){
 808bc38:	783b      	ldrb	r3, [r7, #0]
      index = 0; // reset index if any char does not match
 808bc3a:	2500      	movs	r5, #0
    if( c == target[index]){
 808bc3c:	429e      	cmp	r6, r3
 808bc3e:	d102      	bne.n	808bc46 <_ZN6Stream9findUntilEPcjS0_j+0x3a>
      if(++index >= targetLen){ // return true if all chars in the target match
 808bc40:	3501      	adds	r5, #1
 808bc42:	45aa      	cmp	sl, r5
 808bc44:	d9ec      	bls.n	808bc20 <_ZN6Stream9findUntilEPcjS0_j+0x14>
    if(termLen > 0 && c == terminator[termIndex]){
 808bc46:	f1b8 0f00 	cmp.w	r8, #0
 808bc4a:	d0ec      	beq.n	808bc26 <_ZN6Stream9findUntilEPcjS0_j+0x1a>
 808bc4c:	f81b 3004 	ldrb.w	r3, [fp, r4]
 808bc50:	429e      	cmp	r6, r3
 808bc52:	d1e8      	bne.n	808bc26 <_ZN6Stream9findUntilEPcjS0_j+0x1a>
      if(++termIndex >= termLen)
 808bc54:	3401      	adds	r4, #1
 808bc56:	45a0      	cmp	r8, r4
 808bc58:	d8e6      	bhi.n	808bc28 <_ZN6Stream9findUntilEPcjS0_j+0x1c>
  return false;
 808bc5a:	2000      	movs	r0, #0
 808bc5c:	e7e1      	b.n	808bc22 <_ZN6Stream9findUntilEPcjS0_j+0x16>
  size_t termIndex = 0;
 808bc5e:	2400      	movs	r4, #0
  size_t index = 0;  // maximum target string length is 64k bytes!
 808bc60:	4625      	mov	r5, r4
 808bc62:	e7e1      	b.n	808bc28 <_ZN6Stream9findUntilEPcjS0_j+0x1c>

0808bc64 <_ZN6Stream9findUntilEPcS0_>:
{
 808bc64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808bc66:	4606      	mov	r6, r0
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808bc68:	4608      	mov	r0, r1
{
 808bc6a:	4615      	mov	r5, r2
 808bc6c:	460c      	mov	r4, r1
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808bc6e:	f002 fd80 	bl	808e772 <strlen>
 808bc72:	4607      	mov	r7, r0
 808bc74:	4628      	mov	r0, r5
 808bc76:	f002 fd7c 	bl	808e772 <strlen>
 808bc7a:	462b      	mov	r3, r5
 808bc7c:	9000      	str	r0, [sp, #0]
 808bc7e:	463a      	mov	r2, r7
 808bc80:	4621      	mov	r1, r4
 808bc82:	4630      	mov	r0, r6
 808bc84:	f7ff ffc2 	bl	808bc0c <_ZN6Stream9findUntilEPcjS0_j>
}
 808bc88:	b003      	add	sp, #12
 808bc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808bc8c <_ZN6Stream4findEPc>:
  return findUntil(target, NULL);
 808bc8c:	2200      	movs	r2, #0
 808bc8e:	f7ff bfe9 	b.w	808bc64 <_ZN6Stream9findUntilEPcS0_>

0808bc92 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 808bc92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808bc94:	4606      	mov	r6, r0
 808bc96:	460d      	mov	r5, r1
 808bc98:	4617      	mov	r7, r2
  size_t count = 0;
 808bc9a:	2400      	movs	r4, #0
  while (count < length) {
 808bc9c:	42bc      	cmp	r4, r7
 808bc9e:	d007      	beq.n	808bcb0 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
 808bca0:	4630      	mov	r0, r6
 808bca2:	f7ff ff9c 	bl	808bbde <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 808bca6:	1e03      	subs	r3, r0, #0
 808bca8:	db02      	blt.n	808bcb0 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
 808bcaa:	552b      	strb	r3, [r5, r4]
    count++;
 808bcac:	3401      	adds	r4, #1
  while (count < length) {
 808bcae:	e7f5      	b.n	808bc9c <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
 808bcb0:	4620      	mov	r0, r4
 808bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808bcb4 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808bcb4:	b538      	push	{r3, r4, r5, lr}
 808bcb6:	460d      	mov	r5, r1
  String ret;
 808bcb8:	4907      	ldr	r1, [pc, #28]	; (808bcd8 <_ZN6Stream10readStringEv+0x24>)
{
 808bcba:	4604      	mov	r4, r0
  String ret;
 808bcbc:	f7ff fc2c 	bl	808b518 <_ZN6StringC1EPKc>
  int c = timedRead();
 808bcc0:	4628      	mov	r0, r5
 808bcc2:	f7ff ff8c 	bl	808bbde <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808bcc6:	2800      	cmp	r0, #0
 808bcc8:	db04      	blt.n	808bcd4 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808bcca:	b2c1      	uxtb	r1, r0
 808bccc:	4620      	mov	r0, r4
 808bcce:	f7ff fd14 	bl	808b6fa <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 808bcd2:	e7f5      	b.n	808bcc0 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
 808bcd4:	4620      	mov	r0, r4
 808bcd6:	bd38      	pop	{r3, r4, r5, pc}
 808bcd8:	08092ce2 	.word	0x08092ce2

0808bcdc <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 808bcdc:	b570      	push	{r4, r5, r6, lr}
 808bcde:	460d      	mov	r5, r1
  String ret;
 808bce0:	4909      	ldr	r1, [pc, #36]	; (808bd08 <_ZN6Stream15readStringUntilEc+0x2c>)
{
 808bce2:	4604      	mov	r4, r0
 808bce4:	4616      	mov	r6, r2
  String ret;
 808bce6:	f7ff fc17 	bl	808b518 <_ZN6StringC1EPKc>
  int c = timedRead();
 808bcea:	4628      	mov	r0, r5
 808bcec:	f7ff ff77 	bl	808bbde <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 808bcf0:	2800      	cmp	r0, #0
 808bcf2:	db06      	blt.n	808bd02 <_ZN6Stream15readStringUntilEc+0x26>
 808bcf4:	4286      	cmp	r6, r0
 808bcf6:	d004      	beq.n	808bd02 <_ZN6Stream15readStringUntilEc+0x26>
 808bcf8:	b2c1      	uxtb	r1, r0
 808bcfa:	4620      	mov	r0, r4
 808bcfc:	f7ff fcfd 	bl	808b6fa <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 808bd00:	e7f3      	b.n	808bcea <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
 808bd02:	4620      	mov	r0, r4
 808bd04:	bd70      	pop	{r4, r5, r6, pc}
 808bd06:	bf00      	nop
 808bd08:	08092ce2 	.word	0x08092ce2

0808bd0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 808bd0c:	680b      	ldr	r3, [r1, #0]
 808bd0e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 808bd10:	b113      	cbz	r3, 808bd18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 808bd12:	685a      	ldr	r2, [r3, #4]
 808bd14:	3201      	adds	r2, #1
 808bd16:	605a      	str	r2, [r3, #4]
      }
 808bd18:	4770      	bx	lr
	...

0808bd1c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808bd1c:	4b01      	ldr	r3, [pc, #4]	; (808bd24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808bd1e:	4a02      	ldr	r2, [pc, #8]	; (808bd28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808bd20:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 808bd22:	4770      	bx	lr
 808bd24:	20000e1c 	.word	0x20000e1c
 808bd28:	08092d34 	.word	0x08092d34

0808bd2c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808bd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 808bd30:	4a15      	ldr	r2, [pc, #84]	; (808bd88 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808bd32:	f8df 8060 	ldr.w	r8, [pc, #96]	; 808bd94 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 808bd36:	e9d2 3200 	ldrd	r3, r2, [r2]
 808bd3a:	18c0      	adds	r0, r0, r3
 808bd3c:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 808bd40:	4a12      	ldr	r2, [pc, #72]	; (808bd8c <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 808bd42:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 808bd44:	e9d2 3200 	ldrd	r3, r2, [r2]
 808bd48:	18c6      	adds	r6, r0, r3
 808bd4a:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 808bd4e:	e9d8 2300 	ldrd	r2, r3, [r8]
 808bd52:	42bb      	cmp	r3, r7
 808bd54:	bf08      	it	eq
 808bd56:	42b2      	cmpeq	r2, r6
 808bd58:	d013      	beq.n	808bd82 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 808bd5a:	a903      	add	r1, sp, #12
 808bd5c:	4668      	mov	r0, sp
 808bd5e:	e9cd 6700 	strd	r6, r7, [sp]
 808bd62:	f7f4 f965 	bl	8080030 <localtime_r>
	calendar_time.tm_year += 1900;
 808bd66:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bd68:	4d09      	ldr	r5, [pc, #36]	; (808bd90 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 808bd6a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bd6e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 808bd70:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bd72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808bd74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808bd76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808bd78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808bd7a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bd7e:	6823      	ldr	r3, [r4, #0]
 808bd80:	602b      	str	r3, [r5, #0]
    }
}
 808bd82:	b00c      	add	sp, #48	; 0x30
 808bd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808bd88:	20000e58 	.word	0x20000e58
 808bd8c:	20000e50 	.word	0x20000e50
 808bd90:	20000e28 	.word	0x20000e28
 808bd94:	20000e60 	.word	0x20000e60

0808bd98 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 808bd98:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808bd9a:	2000      	movs	r0, #0
 808bd9c:	f7fe ff20 	bl	808abe0 <spark_sync_time_pending>
 808bda0:	b128      	cbz	r0, 808bdae <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808bda2:	f7fe fefd 	bl	808aba0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 808bda6:	f080 0001 	eor.w	r0, r0, #1
 808bdaa:	b2c0      	uxtb	r0, r0
    }
 808bdac:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 808bdae:	2001      	movs	r0, #1
 808bdb0:	e7fc      	b.n	808bdac <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

0808bdb4 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 808bdb4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808bdb6:	f7ff ffb9 	bl	808bd2c <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 808bdba:	4b02      	ldr	r3, [pc, #8]	; (808bdc4 <_ZN9TimeClass5monthEx+0x10>)
 808bdbc:	6918      	ldr	r0, [r3, #16]
}
 808bdbe:	3001      	adds	r0, #1
 808bdc0:	bd08      	pop	{r3, pc}
 808bdc2:	bf00      	nop
 808bdc4:	20000e28 	.word	0x20000e28

0808bdc8 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808bdc8:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808bdca:	490a      	ldr	r1, [pc, #40]	; (808bdf4 <_ZN9TimeClass4zoneEf+0x2c>)
{
 808bdcc:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808bdce:	f002 faef 	bl	808e3b0 <__aeabi_fcmplt>
 808bdd2:	b968      	cbnz	r0, 808bdf0 <_ZN9TimeClass4zoneEf+0x28>
 808bdd4:	4620      	mov	r0, r4
 808bdd6:	4908      	ldr	r1, [pc, #32]	; (808bdf8 <_ZN9TimeClass4zoneEf+0x30>)
 808bdd8:	f002 fb08 	bl	808e3ec <__aeabi_fcmpgt>
 808bddc:	b940      	cbnz	r0, 808bdf0 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808bdde:	4907      	ldr	r1, [pc, #28]	; (808bdfc <_ZN9TimeClass4zoneEf+0x34>)
 808bde0:	4620      	mov	r0, r4
 808bde2:	f002 f947 	bl	808e074 <__aeabi_fmul>
 808bde6:	f002 fb99 	bl	808e51c <__aeabi_f2lz>
 808bdea:	4b05      	ldr	r3, [pc, #20]	; (808be00 <_ZN9TimeClass4zoneEf+0x38>)
 808bdec:	e9c3 0100 	strd	r0, r1, [r3]
}
 808bdf0:	bd10      	pop	{r4, pc}
 808bdf2:	bf00      	nop
 808bdf4:	c1400000 	.word	0xc1400000
 808bdf8:	41600000 	.word	0x41600000
 808bdfc:	45610000 	.word	0x45610000
 808be00:	20000e58 	.word	0x20000e58

0808be04 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 808be04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808be06:	4602      	mov	r2, r0
 808be08:	460b      	mov	r3, r1
    struct timeval tv = {
 808be0a:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 808be0c:	4668      	mov	r0, sp
    };
 808be0e:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 808be12:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 808be16:	f7fe fc73 	bl	808a700 <hal_rtc_set_time>
 808be1a:	4602      	mov	r2, r0
 808be1c:	b910      	cbnz	r0, 808be24 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 808be1e:	4601      	mov	r1, r0
 808be20:	f7fe fe26 	bl	808aa70 <system_notify_time_changed>
    }
}
 808be24:	b005      	add	sp, #20
 808be26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808be2c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808be2c:	b530      	push	{r4, r5, lr}
 808be2e:	4604      	mov	r4, r0
    t += time_zone_cache;
 808be30:	4818      	ldr	r0, [pc, #96]	; (808be94 <_ZN9TimeClass7timeStrEx+0x68>)
{
 808be32:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 808be34:	e9d0 1000 	ldrd	r1, r0, [r0]
 808be38:	1852      	adds	r2, r2, r1
 808be3a:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 808be3e:	4816      	ldr	r0, [pc, #88]	; (808be98 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 808be40:	2500      	movs	r5, #0
    t += dst_current_cache;
 808be42:	e9d0 1000 	ldrd	r1, r0, [r0]
 808be46:	1852      	adds	r2, r2, r1
 808be48:	eb40 0303 	adc.w	r3, r0, r3
 808be4c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 808be50:	2224      	movs	r2, #36	; 0x24
 808be52:	2100      	movs	r1, #0
 808be54:	eb0d 0002 	add.w	r0, sp, r2
 808be58:	f002 fc24 	bl	808e6a4 <memset>
    localtime_r(&t, &calendar_time);
 808be5c:	a909      	add	r1, sp, #36	; 0x24
 808be5e:	4668      	mov	r0, sp
 808be60:	f7f4 f8e6 	bl	8080030 <localtime_r>
    char ascstr[26] = {};
 808be64:	2216      	movs	r2, #22
 808be66:	4629      	mov	r1, r5
 808be68:	a803      	add	r0, sp, #12
 808be6a:	9502      	str	r5, [sp, #8]
 808be6c:	f002 fc1a 	bl	808e6a4 <memset>
    asctime_r(&calendar_time, ascstr);
 808be70:	a902      	add	r1, sp, #8
 808be72:	a809      	add	r0, sp, #36	; 0x24
 808be74:	f002 fba6 	bl	808e5c4 <asctime_r>
    int len = strlen(ascstr);
 808be78:	a802      	add	r0, sp, #8
 808be7a:	f002 fc7a 	bl	808e772 <strlen>
    ascstr[len-1] = 0; // remove final newline
 808be7e:	ab12      	add	r3, sp, #72	; 0x48
 808be80:	4418      	add	r0, r3
 808be82:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 808be86:	a902      	add	r1, sp, #8
 808be88:	4620      	mov	r0, r4
 808be8a:	f7ff fb45 	bl	808b518 <_ZN6StringC1EPKc>
}
 808be8e:	4620      	mov	r0, r4
 808be90:	b013      	add	sp, #76	; 0x4c
 808be92:	bd30      	pop	{r4, r5, pc}
 808be94:	20000e58 	.word	0x20000e58
 808be98:	20000e50 	.word	0x20000e50

0808be9c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808be9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bea0:	b0a5      	sub	sp, #148	; 0x94
 808bea2:	4607      	mov	r7, r0
 808bea4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808bea6:	a814      	add	r0, sp, #80	; 0x50
{
 808bea8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808beaa:	223f      	movs	r2, #63	; 0x3f
{
 808beac:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808beae:	f002 fc7a 	bl	808e7a6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 808beb2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808beb4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 808beb6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808beba:	f002 fc5a 	bl	808e772 <strlen>
 808bebe:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 808bec0:	bb5d      	cbnz	r5, 808bf1a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 808bec2:	492a      	ldr	r1, [pc, #168]	; (808bf6c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 808bec4:	a803      	add	r0, sp, #12
 808bec6:	f002 fc30 	bl	808e72a <strcpy>
{
 808beca:	2500      	movs	r5, #0
 808becc:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808bece:	f104 3bff 	add.w	fp, r4, #4294967295
 808bed2:	45ab      	cmp	fp, r5
 808bed4:	d936      	bls.n	808bf44 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808bed6:	46b1      	mov	r9, r6
 808bed8:	f819 3b01 	ldrb.w	r3, [r9], #1
 808bedc:	f105 0a01 	add.w	sl, r5, #1
 808bee0:	2b25      	cmp	r3, #37	; 0x25
 808bee2:	d117      	bne.n	808bf14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 808bee4:	7873      	ldrb	r3, [r6, #1]
 808bee6:	2b7a      	cmp	r3, #122	; 0x7a
 808bee8:	d114      	bne.n	808bf14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 808beea:	a803      	add	r0, sp, #12
 808beec:	f002 fc41 	bl	808e772 <strlen>
 808bef0:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808bef2:	ab14      	add	r3, sp, #80	; 0x50
 808bef4:	1828      	adds	r0, r5, r0
 808bef6:	4418      	add	r0, r3
 808bef8:	ebab 0205 	sub.w	r2, fp, r5
 808befc:	1cb1      	adds	r1, r6, #2
 808befe:	f002 fbc3 	bl	808e688 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808bf02:	4622      	mov	r2, r4
 808bf04:	a903      	add	r1, sp, #12
 808bf06:	4630      	mov	r0, r6
 808bf08:	f002 fbbe 	bl	808e688 <memcpy>
            len = strlen(format_str);
 808bf0c:	a814      	add	r0, sp, #80	; 0x50
 808bf0e:	f002 fc30 	bl	808e772 <strlen>
 808bf12:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 808bf14:	464e      	mov	r6, r9
 808bf16:	4655      	mov	r5, sl
 808bf18:	e7d9      	b.n	808bece <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808bf1a:	213c      	movs	r1, #60	; 0x3c
 808bf1c:	fb95 f3f1 	sdiv	r3, r5, r1
 808bf20:	2b00      	cmp	r3, #0
 808bf22:	bfb8      	it	lt
 808bf24:	425b      	neglt	r3, r3
 808bf26:	fbb3 f2f1 	udiv	r2, r3, r1
 808bf2a:	fb01 3312 	mls	r3, r1, r2, r3
 808bf2e:	9300      	str	r3, [sp, #0]
 808bf30:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808bf34:	2110      	movs	r1, #16
 808bf36:	fb95 f3f3 	sdiv	r3, r5, r3
 808bf3a:	4a0d      	ldr	r2, [pc, #52]	; (808bf70 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 808bf3c:	a803      	add	r0, sp, #12
 808bf3e:	f7fe fe8f 	bl	808ac60 <snprintf>
 808bf42:	e7c2      	b.n	808beca <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 808bf44:	2100      	movs	r1, #0
 808bf46:	222e      	movs	r2, #46	; 0x2e
 808bf48:	a808      	add	r0, sp, #32
 808bf4a:	9107      	str	r1, [sp, #28]
 808bf4c:	f002 fbaa 	bl	808e6a4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 808bf50:	4643      	mov	r3, r8
 808bf52:	aa14      	add	r2, sp, #80	; 0x50
 808bf54:	2132      	movs	r1, #50	; 0x32
 808bf56:	a807      	add	r0, sp, #28
 808bf58:	f7f4 f872 	bl	8080040 <strftime>
    return String(buf);
 808bf5c:	4638      	mov	r0, r7
 808bf5e:	a907      	add	r1, sp, #28
 808bf60:	f7ff fada 	bl	808b518 <_ZN6StringC1EPKc>
}
 808bf64:	4638      	mov	r0, r7
 808bf66:	b025      	add	sp, #148	; 0x94
 808bf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bf6c:	080917f2 	.word	0x080917f2
 808bf70:	08092d38 	.word	0x08092d38

0808bf74 <_ZN9TimeClass6formatExPKc>:
{
 808bf74:	b5f0      	push	{r4, r5, r6, r7, lr}
 808bf76:	b08d      	sub	sp, #52	; 0x34
 808bf78:	9d12      	ldr	r5, [sp, #72]	; 0x48
 808bf7a:	4604      	mov	r4, r0
 808bf7c:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 808bf80:	b915      	cbnz	r5, 808bf88 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 808bf82:	4b19      	ldr	r3, [pc, #100]	; (808bfe8 <_ZN9TimeClass6formatExPKc+0x74>)
 808bf84:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 808bf86:	b12d      	cbz	r5, 808bf94 <_ZN9TimeClass6formatExPKc+0x20>
 808bf88:	4b18      	ldr	r3, [pc, #96]	; (808bfec <_ZN9TimeClass6formatExPKc+0x78>)
 808bf8a:	4628      	mov	r0, r5
 808bf8c:	6819      	ldr	r1, [r3, #0]
 808bf8e:	f002 fbc2 	bl	808e716 <strcmp>
 808bf92:	b938      	cbnz	r0, 808bfa4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 808bf94:	e9dd 2300 	ldrd	r2, r3, [sp]
 808bf98:	4620      	mov	r0, r4
 808bf9a:	f7ff ff47 	bl	808be2c <_ZN9TimeClass7timeStrEx>
}
 808bf9e:	4620      	mov	r0, r4
 808bfa0:	b00d      	add	sp, #52	; 0x34
 808bfa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 808bfa4:	9900      	ldr	r1, [sp, #0]
 808bfa6:	4e12      	ldr	r6, [pc, #72]	; (808bff0 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 808bfa8:	4f12      	ldr	r7, [pc, #72]	; (808bff4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 808bfaa:	e9d6 3200 	ldrd	r3, r2, [r6]
 808bfae:	185b      	adds	r3, r3, r1
 808bfb0:	9901      	ldr	r1, [sp, #4]
 808bfb2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 808bfb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 808bfba:	181b      	adds	r3, r3, r0
 808bfbc:	eb41 0202 	adc.w	r2, r1, r2
 808bfc0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 808bfc4:	2100      	movs	r1, #0
 808bfc6:	2224      	movs	r2, #36	; 0x24
 808bfc8:	a803      	add	r0, sp, #12
 808bfca:	f002 fb6b 	bl	808e6a4 <memset>
    localtime_r(&t, &calendar_time);
 808bfce:	a903      	add	r1, sp, #12
 808bfd0:	4668      	mov	r0, sp
 808bfd2:	f7f4 f82d 	bl	8080030 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808bfd6:	6832      	ldr	r2, [r6, #0]
 808bfd8:	683b      	ldr	r3, [r7, #0]
 808bfda:	4620      	mov	r0, r4
 808bfdc:	4413      	add	r3, r2
 808bfde:	a903      	add	r1, sp, #12
 808bfe0:	462a      	mov	r2, r5
 808bfe2:	f7ff ff5b 	bl	808be9c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 808bfe6:	e7da      	b.n	808bf9e <_ZN9TimeClass6formatExPKc+0x2a>
 808bfe8:	20000e24 	.word	0x20000e24
 808bfec:	200000e0 	.word	0x200000e0
 808bff0:	20000e58 	.word	0x20000e58
 808bff4:	20000e50 	.word	0x20000e50

0808bff8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 808bff8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 808bffa:	2000      	movs	r0, #0
 808bffc:	f7fe fb70 	bl	808a6e0 <hal_rtc_time_is_valid>
    if (rtcstate)
 808c000:	4604      	mov	r4, r0
 808c002:	b9a0      	cbnz	r0, 808c02e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 808c004:	f7fe fcf4 	bl	808a9f0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808c008:	2801      	cmp	r0, #1
 808c00a:	d110      	bne.n	808c02e <_ZN9TimeClass7isValidEv+0x36>
 808c00c:	4620      	mov	r0, r4
 808c00e:	f7fe fd27 	bl	808aa60 <system_thread_get_state>
 808c012:	b960      	cbnz	r0, 808c02e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 808c014:	f7ff fec0 	bl	808bd98 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808c018:	b910      	cbnz	r0, 808c020 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 808c01a:	f7fe fdb1 	bl	808ab80 <spark_process>
        while (_while() && !_condition()) {
 808c01e:	e7f9      	b.n	808c014 <_ZN9TimeClass7isValidEv+0x1c>
 808c020:	f7ff feba 	bl	808bd98 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 808c024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 808c028:	2000      	movs	r0, #0
 808c02a:	f7fe bb59 	b.w	808a6e0 <hal_rtc_time_is_valid>
}
 808c02e:	4620      	mov	r0, r4
 808c030:	bd10      	pop	{r4, pc}

0808c032 <_ZN9TimeClass3nowEv>:
{
 808c032:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 808c034:	f7ff ffe0 	bl	808bff8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 808c038:	2210      	movs	r2, #16
 808c03a:	2100      	movs	r1, #0
 808c03c:	4668      	mov	r0, sp
 808c03e:	f002 fb31 	bl	808e6a4 <memset>
    hal_rtc_get_time(&tv, nullptr);
 808c042:	2100      	movs	r1, #0
 808c044:	4668      	mov	r0, sp
 808c046:	f7fe fb53 	bl	808a6f0 <hal_rtc_get_time>
}
 808c04a:	9800      	ldr	r0, [sp, #0]
 808c04c:	b005      	add	sp, #20
 808c04e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808c054 <_ZN9TimeClass4hourEv>:
{
 808c054:	b508      	push	{r3, lr}
	return hour(now());
 808c056:	f7ff ffec 	bl	808c032 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808c05a:	17c1      	asrs	r1, r0, #31
 808c05c:	f7ff fe66 	bl	808bd2c <_ZL22Refresh_UnixTime_Cachex>
}
 808c060:	4b01      	ldr	r3, [pc, #4]	; (808c068 <_ZN9TimeClass4hourEv+0x14>)
 808c062:	6898      	ldr	r0, [r3, #8]
 808c064:	bd08      	pop	{r3, pc}
 808c066:	bf00      	nop
 808c068:	20000e28 	.word	0x20000e28

0808c06c <_ZN9TimeClass6minuteEv>:
{
 808c06c:	b508      	push	{r3, lr}
	return minute(now());
 808c06e:	f7ff ffe0 	bl	808c032 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808c072:	17c1      	asrs	r1, r0, #31
 808c074:	f7ff fe5a 	bl	808bd2c <_ZL22Refresh_UnixTime_Cachex>
}
 808c078:	4b01      	ldr	r3, [pc, #4]	; (808c080 <_ZN9TimeClass6minuteEv+0x14>)
 808c07a:	6858      	ldr	r0, [r3, #4]
 808c07c:	bd08      	pop	{r3, pc}
 808c07e:	bf00      	nop
 808c080:	20000e28 	.word	0x20000e28

0808c084 <_ZN9TimeClass6secondEv>:
{
 808c084:	b508      	push	{r3, lr}
	return second(now());
 808c086:	f7ff ffd4 	bl	808c032 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808c08a:	17c1      	asrs	r1, r0, #31
 808c08c:	f7ff fe4e 	bl	808bd2c <_ZL22Refresh_UnixTime_Cachex>
}
 808c090:	4b01      	ldr	r3, [pc, #4]	; (808c098 <_ZN9TimeClass6secondEv+0x14>)
 808c092:	6818      	ldr	r0, [r3, #0]
 808c094:	bd08      	pop	{r3, pc}
 808c096:	bf00      	nop
 808c098:	20000e28 	.word	0x20000e28

0808c09c <_ZN9TimeClass3dayEv>:
{
 808c09c:	b508      	push	{r3, lr}
	return day(now());
 808c09e:	f7ff ffc8 	bl	808c032 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808c0a2:	17c1      	asrs	r1, r0, #31
 808c0a4:	f7ff fe42 	bl	808bd2c <_ZL22Refresh_UnixTime_Cachex>
}
 808c0a8:	4b01      	ldr	r3, [pc, #4]	; (808c0b0 <_ZN9TimeClass3dayEv+0x14>)
 808c0aa:	68d8      	ldr	r0, [r3, #12]
 808c0ac:	bd08      	pop	{r3, pc}
 808c0ae:	bf00      	nop
 808c0b0:	20000e28 	.word	0x20000e28

0808c0b4 <_ZN9TimeClass5monthEv>:
{
 808c0b4:	b508      	push	{r3, lr}
	return month(now());
 808c0b6:	f7ff ffbc 	bl	808c032 <_ZN9TimeClass3nowEv>
}
 808c0ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 808c0be:	17c1      	asrs	r1, r0, #31
 808c0c0:	f7ff be78 	b.w	808bdb4 <_ZN9TimeClass5monthEx>

0808c0c4 <_ZN9TimeClass4yearEv>:
{
 808c0c4:	b508      	push	{r3, lr}
	return year(now());
 808c0c6:	f7ff ffb4 	bl	808c032 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 808c0ca:	17c1      	asrs	r1, r0, #31
 808c0cc:	f7ff fe2e 	bl	808bd2c <_ZL22Refresh_UnixTime_Cachex>
}
 808c0d0:	4b01      	ldr	r3, [pc, #4]	; (808c0d8 <_ZN9TimeClass4yearEv+0x14>)
 808c0d2:	6958      	ldr	r0, [r3, #20]
 808c0d4:	bd08      	pop	{r3, pc}
 808c0d6:	bf00      	nop
 808c0d8:	20000e28 	.word	0x20000e28

0808c0dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808c0dc:	4b02      	ldr	r3, [pc, #8]	; (808c0e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808c0de:	681a      	ldr	r2, [r3, #0]
 808c0e0:	4b02      	ldr	r3, [pc, #8]	; (808c0ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808c0e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 808c0e4:	4770      	bx	lr
 808c0e6:	bf00      	nop
 808c0e8:	200000e0 	.word	0x200000e0
 808c0ec:	20000e24 	.word	0x20000e24

0808c0f0 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    hal_adc_set_sample_time(ADC_SampleTime);
 808c0f0:	f7fe bab6 	b.w	808a660 <hal_adc_set_sample_time>

0808c0f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808c0f4:	2100      	movs	r1, #0
 808c0f6:	f7fe bc8b 	b.w	808aa10 <system_delay_ms>

0808c0fa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808c0fa:	b510      	push	{r4, lr}
 808c0fc:	4604      	mov	r4, r0
 808c0fe:	f7fd fbb7 	bl	8089870 <_ZNSt14_Function_baseD1Ev>
 808c102:	4620      	mov	r0, r4
 808c104:	bd10      	pop	{r4, pc}

0808c106 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 808c106:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c108:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 808c10a:	460b      	mov	r3, r1
 808c10c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c10e:	c803      	ldmia	r0, {r0, r1}
 808c110:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808c114:	e893 0003 	ldmia.w	r3, {r0, r1}
 808c118:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808c11c:	e894 0003 	ldmia.w	r4, {r0, r1}
 808c120:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808c124:	b002      	add	sp, #8
 808c126:	bd10      	pop	{r4, pc}

0808c128 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 808c128:	2300      	movs	r3, #0
 808c12a:	4803      	ldr	r0, [pc, #12]	; (808c138 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808c12c:	4a03      	ldr	r2, [pc, #12]	; (808c13c <_GLOBAL__sub_I_RGB+0x14>)
 808c12e:	4904      	ldr	r1, [pc, #16]	; (808c140 <_GLOBAL__sub_I_RGB+0x18>)
 808c130:	6083      	str	r3, [r0, #8]
 808c132:	f001 b97b 	b.w	808d42c <__aeabi_atexit>
 808c136:	bf00      	nop
 808c138:	20000e68 	.word	0x20000e68
 808c13c:	200002c0 	.word	0x200002c0
 808c140:	0808c0fb 	.word	0x0808c0fb

0808c144 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808c144:	6800      	ldr	r0, [r0, #0]
 808c146:	f000 bee7 	b.w	808cf18 <_ZN7TwoWire4lockEv>

0808c14a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808c14a:	b510      	push	{r4, lr}
 808c14c:	4604      	mov	r4, r0
      lock_(_lock) {
 808c14e:	6001      	str	r1, [r0, #0]
 808c150:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 808c152:	b10a      	cbz	r2, 808c158 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808c154:	f7ff fff6 	bl	808c144 <_ZN9FuelGauge4lockEv>
}
 808c158:	4620      	mov	r0, r4
 808c15a:	bd10      	pop	{r4, pc}

0808c15c <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 808c15c:	b538      	push	{r3, r4, r5, lr}
 808c15e:	4604      	mov	r4, r0
 808c160:	460d      	mov	r5, r1
            return &Wire3;
 808c162:	f001 f93b 	bl	808d3dc <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 808c166:	462a      	mov	r2, r5
            return &Wire3;
 808c168:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 808c16a:	4620      	mov	r0, r4
 808c16c:	f7ff ffed 	bl	808c14a <_ZN9FuelGaugeC1ER7TwoWireb>
}
 808c170:	4620      	mov	r0, r4
 808c172:	bd38      	pop	{r3, r4, r5, pc}

0808c174 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 808c174:	6800      	ldr	r0, [r0, #0]
 808c176:	f000 bed8 	b.w	808cf2a <_ZN7TwoWire6unlockEv>

0808c17a <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 808c17a:	b510      	push	{r4, lr}
    if (lock_) {
 808c17c:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 808c17e:	4604      	mov	r4, r0
    if (lock_) {
 808c180:	b10b      	cbz	r3, 808c186 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808c182:	f7ff fff7 	bl	808c174 <_ZN9FuelGauge6unlockEv>
}
 808c186:	4620      	mov	r0, r4
 808c188:	bd10      	pop	{r4, pc}

0808c18a <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808c18a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 808c18e:	4604      	mov	r4, r0
 808c190:	460d      	mov	r5, r1
 808c192:	4617      	mov	r7, r2
 808c194:	461e      	mov	r6, r3
 808c196:	f7ff ffd5 	bl	808c144 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808c19a:	2336      	movs	r3, #54	; 0x36
 808c19c:	f88d 3000 	strb.w	r3, [sp]
 808c1a0:	2300      	movs	r3, #0
 808c1a2:	f04f 0801 	mov.w	r8, #1
 808c1a6:	9301      	str	r3, [sp, #4]
    timeout_ = ms;
 808c1a8:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 808c1aa:	4669      	mov	r1, sp
 808c1ac:	6820      	ldr	r0, [r4, #0]
 808c1ae:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808c1b0:	f88d 8008 	strb.w	r8, [sp, #8]
 808c1b4:	f000 fe8d 	bl	808ced2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 808c1b8:	6820      	ldr	r0, [r4, #0]
 808c1ba:	4629      	mov	r1, r5
 808c1bc:	6803      	ldr	r3, [r0, #0]
 808c1be:	689b      	ldr	r3, [r3, #8]
 808c1c0:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 808c1c2:	4641      	mov	r1, r8
 808c1c4:	6820      	ldr	r0, [r4, #0]
 808c1c6:	f000 fe9c 	bl	808cf02 <_ZN7TwoWire15endTransmissionEh>
 808c1ca:	4605      	mov	r5, r0
 808c1cc:	b140      	cbz	r0, 808c1e0 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 808c1ce:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 808c1d2:	4620      	mov	r0, r4
 808c1d4:	f7ff ffce 	bl	808c174 <_ZN9FuelGauge6unlockEv>
}
 808c1d8:	4628      	mov	r0, r5
 808c1da:	b004      	add	sp, #16
 808c1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 808c1e0:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 808c1e2:	4669      	mov	r1, sp
 808c1e4:	6820      	ldr	r0, [r4, #0]
 808c1e6:	9301      	str	r3, [sp, #4]
 808c1e8:	f000 fe40 	bl	808ce6c <_ZN7TwoWire11requestFromERK16WireTransmission>
 808c1ec:	2802      	cmp	r0, #2
 808c1ee:	d1ee      	bne.n	808c1ce <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 808c1f0:	6820      	ldr	r0, [r4, #0]
 808c1f2:	6803      	ldr	r3, [r0, #0]
 808c1f4:	695b      	ldr	r3, [r3, #20]
 808c1f6:	4798      	blx	r3
 808c1f8:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 808c1fa:	6820      	ldr	r0, [r4, #0]
 808c1fc:	6803      	ldr	r3, [r0, #0]
 808c1fe:	695b      	ldr	r3, [r3, #20]
 808c200:	4798      	blx	r3
 808c202:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 808c204:	e7e5      	b.n	808c1d2 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

0808c208 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 808c208:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 808c20a:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808c20c:	2104      	movs	r1, #4
    byte MSB = 0;
 808c20e:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 808c212:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 808c216:	f10d 0206 	add.w	r2, sp, #6
 808c21a:	f10d 0307 	add.w	r3, sp, #7
 808c21e:	f7ff ffb4 	bl	808c18a <_ZN9FuelGauge12readRegisterEhRhS0_>
 808c222:	b9a0      	cbnz	r0, 808c24e <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 808c224:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808c228:	f001 fa64 	bl	808d6f4 <__aeabi_i2d>
 808c22c:	2200      	movs	r2, #0
 808c22e:	4b09      	ldr	r3, [pc, #36]	; (808c254 <_ZN9FuelGauge6getSoCEv+0x4c>)
 808c230:	f001 faca 	bl	808d7c8 <__aeabi_dmul>
 808c234:	f001 fdc0 	bl	808ddb8 <__aeabi_d2f>
 808c238:	4604      	mov	r4, r0
        return MSB + decimal;
 808c23a:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808c23e:	f001 fec5 	bl	808dfcc <__aeabi_i2f>
 808c242:	4601      	mov	r1, r0
 808c244:	4620      	mov	r0, r4
 808c246:	f001 fe0d 	bl	808de64 <__addsf3>
}
 808c24a:	b002      	add	sp, #8
 808c24c:	bd10      	pop	{r4, pc}
        return -1.0f;
 808c24e:	4802      	ldr	r0, [pc, #8]	; (808c258 <_ZN9FuelGauge6getSoCEv+0x50>)
 808c250:	e7fb      	b.n	808c24a <_ZN9FuelGauge6getSoCEv+0x42>
 808c252:	bf00      	nop
 808c254:	3f700000 	.word	0x3f700000
 808c258:	bf800000 	.word	0xbf800000

0808c25c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 808c25c:	4b01      	ldr	r3, [pc, #4]	; (808c264 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 808c25e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 808c260:	4770      	bx	lr
 808c262:	bf00      	nop
 808c264:	200000e8 	.word	0x200000e8

0808c268 <serialEventRun>:
{
 808c268:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808c26a:	4b17      	ldr	r3, [pc, #92]	; (808c2c8 <serialEventRun+0x60>)
 808c26c:	b143      	cbz	r3, 808c280 <serialEventRun+0x18>
 808c26e:	f000 fc33 	bl	808cad8 <_Z16_fetch_usbserialv>
 808c272:	6803      	ldr	r3, [r0, #0]
 808c274:	691b      	ldr	r3, [r3, #16]
 808c276:	4798      	blx	r3
 808c278:	2800      	cmp	r0, #0
 808c27a:	dd01      	ble.n	808c280 <serialEventRun+0x18>
        serialEvent();
 808c27c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 808c280:	4b12      	ldr	r3, [pc, #72]	; (808c2cc <serialEventRun+0x64>)
 808c282:	b143      	cbz	r3, 808c296 <serialEventRun+0x2e>
 808c284:	f000 fd72 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 808c288:	6803      	ldr	r3, [r0, #0]
 808c28a:	691b      	ldr	r3, [r3, #16]
 808c28c:	4798      	blx	r3
 808c28e:	2800      	cmp	r0, #0
 808c290:	dd01      	ble.n	808c296 <serialEventRun+0x2e>
        serialEvent1();
 808c292:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 808c296:	4b0e      	ldr	r3, [pc, #56]	; (808c2d0 <serialEventRun+0x68>)
 808c298:	b10b      	cbz	r3, 808c29e <serialEventRun+0x36>
 808c29a:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 808c29e:	4b0d      	ldr	r3, [pc, #52]	; (808c2d4 <serialEventRun+0x6c>)
 808c2a0:	b10b      	cbz	r3, 808c2a6 <serialEventRun+0x3e>
 808c2a2:	f7f4 fdf3 	bl	8080e8c <_Z15serialEventRun4v>
    if (serialEventRun5) serialEventRun5();
 808c2a6:	4b0c      	ldr	r3, [pc, #48]	; (808c2d8 <serialEventRun+0x70>)
 808c2a8:	b10b      	cbz	r3, 808c2ae <serialEventRun+0x46>
 808c2aa:	f7f4 fe2b 	bl	8080f04 <_Z15serialEventRun5v>
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808c2ae:	4b0b      	ldr	r3, [pc, #44]	; (808c2dc <serialEventRun+0x74>)
 808c2b0:	b143      	cbz	r3, 808c2c4 <serialEventRun+0x5c>
 808c2b2:	f000 fc4f 	bl	808cb54 <_Z17_fetch_usbserial1v>
 808c2b6:	6803      	ldr	r3, [r0, #0]
 808c2b8:	691b      	ldr	r3, [r3, #16]
 808c2ba:	4798      	blx	r3
 808c2bc:	2800      	cmp	r0, #0
 808c2be:	dd01      	ble.n	808c2c4 <serialEventRun+0x5c>
        usbSerialEvent1();
 808c2c0:	f3af 8000 	nop.w
}
 808c2c4:	bd08      	pop	{r3, pc}
 808c2c6:	bf00      	nop
	...
 808c2d4:	08080e8d 	.word	0x08080e8d
 808c2d8:	08080f05 	.word	0x08080f05
 808c2dc:	00000000 	.word	0x00000000

0808c2e0 <_post_loop>:
{
 808c2e0:	b508      	push	{r3, lr}
	serialEventRun();
 808c2e2:	f7ff ffc1 	bl	808c268 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808c2e6:	f7fe f9db 	bl	808a6a0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808c2ea:	4b01      	ldr	r3, [pc, #4]	; (808c2f0 <_post_loop+0x10>)
 808c2ec:	6018      	str	r0, [r3, #0]
}
 808c2ee:	bd08      	pop	{r3, pc}
 808c2f0:	2000130c 	.word	0x2000130c

0808c2f4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808c2f4:	4802      	ldr	r0, [pc, #8]	; (808c300 <_Z33system_initialize_user_backup_ramv+0xc>)
 808c2f6:	4a03      	ldr	r2, [pc, #12]	; (808c304 <_Z33system_initialize_user_backup_ramv+0x10>)
 808c2f8:	4903      	ldr	r1, [pc, #12]	; (808c308 <_Z33system_initialize_user_backup_ramv+0x14>)
 808c2fa:	1a12      	subs	r2, r2, r0
 808c2fc:	f002 b9c4 	b.w	808e688 <memcpy>
 808c300:	40024000 	.word	0x40024000
 808c304:	40024004 	.word	0x40024004
 808c308:	08093190 	.word	0x08093190

0808c30c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808c30c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808c30e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808c310:	461a      	mov	r2, r3
 808c312:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808c316:	9300      	str	r3, [sp, #0]
 808c318:	f7fe fbbc 	bl	808aa94 <system_ctrl_set_result>
}
 808c31c:	b003      	add	sp, #12
 808c31e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808c324 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 808c324:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808c326:	8843      	ldrh	r3, [r0, #2]
 808c328:	2b0a      	cmp	r3, #10
 808c32a:	d008      	beq.n	808c33e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808c32c:	2b50      	cmp	r3, #80	; 0x50
 808c32e:	d10b      	bne.n	808c348 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 808c330:	4b09      	ldr	r3, [pc, #36]	; (808c358 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808c332:	681b      	ldr	r3, [r3, #0]
 808c334:	b14b      	cbz	r3, 808c34a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 808c336:	b003      	add	sp, #12
 808c338:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 808c33c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 808c33e:	f7ff ffe5 	bl	808c30c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 808c342:	b003      	add	sp, #12
 808c344:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808c348:	2300      	movs	r3, #0
 808c34a:	461a      	mov	r2, r3
 808c34c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808c350:	9300      	str	r3, [sp, #0]
 808c352:	f7fe fb9f 	bl	808aa94 <system_ctrl_set_result>
}
 808c356:	e7f4      	b.n	808c342 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 808c358:	20000e7c 	.word	0x20000e7c

0808c35c <module_user_init_hook>:
{
 808c35c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808c35e:	4c12      	ldr	r4, [pc, #72]	; (808c3a8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 808c360:	2100      	movs	r1, #0
 808c362:	4812      	ldr	r0, [pc, #72]	; (808c3ac <module_user_init_hook+0x50>)
 808c364:	f7fe fc9c 	bl	808aca0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808c368:	4d11      	ldr	r5, [pc, #68]	; (808c3b0 <module_user_init_hook+0x54>)
 808c36a:	6823      	ldr	r3, [r4, #0]
 808c36c:	42ab      	cmp	r3, r5
 808c36e:	bf0c      	ite	eq
 808c370:	2201      	moveq	r2, #1
 808c372:	2200      	movne	r2, #0
 808c374:	4b0f      	ldr	r3, [pc, #60]	; (808c3b4 <module_user_init_hook+0x58>)
 808c376:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808c378:	d002      	beq.n	808c380 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 808c37a:	f7ff ffbb 	bl	808c2f4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808c37e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808c380:	f7fe f97e 	bl	808a680 <HAL_RNG_GetRandomNumber>
 808c384:	4604      	mov	r4, r0
    srand(seed);
 808c386:	f002 f995 	bl	808e6b4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808c38a:	4b0b      	ldr	r3, [pc, #44]	; (808c3b8 <module_user_init_hook+0x5c>)
 808c38c:	b113      	cbz	r3, 808c394 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 808c38e:	4620      	mov	r0, r4
 808c390:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808c394:	2100      	movs	r1, #0
 808c396:	4808      	ldr	r0, [pc, #32]	; (808c3b8 <module_user_init_hook+0x5c>)
 808c398:	f7fe fc2a 	bl	808abf0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808c39c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808c3a0:	2100      	movs	r1, #0
 808c3a2:	4806      	ldr	r0, [pc, #24]	; (808c3bc <module_user_init_hook+0x60>)
 808c3a4:	f7fe bb6c 	b.w	808aa80 <system_ctrl_set_app_request_handler>
 808c3a8:	40024000 	.word	0x40024000
 808c3ac:	0808c25d 	.word	0x0808c25d
 808c3b0:	9a271c1e 	.word	0x9a271c1e
 808c3b4:	20000e78 	.word	0x20000e78
 808c3b8:	00000000 	.word	0x00000000
 808c3bc:	0808c325 	.word	0x0808c325

0808c3c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808c3c0:	4770      	bx	lr

0808c3c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 808c3c2:	2000      	movs	r0, #0
 808c3c4:	4770      	bx	lr

0808c3c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808c3c6:	b510      	push	{r4, lr}
 808c3c8:	4604      	mov	r4, r0
 808c3ca:	2110      	movs	r1, #16
 808c3cc:	f001 f833 	bl	808d436 <_ZdlPvj>
 808c3d0:	4620      	mov	r0, r4
 808c3d2:	bd10      	pop	{r4, pc}

0808c3d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 808c3d4:	b508      	push	{r3, lr}
      { delete this; }
 808c3d6:	f7ff fff6 	bl	808c3c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808c3da:	bd08      	pop	{r3, pc}

0808c3dc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808c3dc:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808c3de:	b530      	push	{r4, r5, lr}
        type_(type) {
 808c3e0:	f64f 749c 	movw	r4, #65436	; 0xff9c
 808c3e4:	6002      	str	r2, [r0, #0]
 808c3e6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 808c3e8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808c3ea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 808c3ec:	680c      	ldr	r4, [r1, #0]
 808c3ee:	8085      	strh	r5, [r0, #4]
 808c3f0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808c3f2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808c3f4:	bd30      	pop	{r4, r5, pc}

0808c3f6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808c3f6:	b510      	push	{r4, lr}
 808c3f8:	4604      	mov	r4, r0
    free((void*)msg_);
 808c3fa:	6800      	ldr	r0, [r0, #0]
 808c3fc:	f7fe fc08 	bl	808ac10 <free>
}
 808c400:	4620      	mov	r0, r4
 808c402:	bd10      	pop	{r4, pc}

0808c404 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 808c404:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808c406:	68c4      	ldr	r4, [r0, #12]
 808c408:	b1f4      	cbz	r4, 808c448 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 808c40a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808c40c:	2b02      	cmp	r3, #2
 808c40e:	d103      	bne.n	808c418 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808c410:	f104 000c 	add.w	r0, r4, #12
 808c414:	f7ff ffef 	bl	808c3f6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 808c418:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 808c41a:	b135      	cbz	r5, 808c42a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 808c41c:	4628      	mov	r0, r5
 808c41e:	f7fd fa27 	bl	8089870 <_ZNSt14_Function_baseD1Ev>
 808c422:	2110      	movs	r1, #16
 808c424:	4628      	mov	r0, r5
 808c426:	f001 f806 	bl	808d436 <_ZdlPvj>
 808c42a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808c42c:	b135      	cbz	r5, 808c43c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 808c42e:	4628      	mov	r0, r5
 808c430:	f7fd fa1e 	bl	8089870 <_ZNSt14_Function_baseD1Ev>
 808c434:	2110      	movs	r1, #16
 808c436:	4628      	mov	r0, r5
 808c438:	f000 fffd 	bl	808d436 <_ZdlPvj>
 808c43c:	4620      	mov	r0, r4
 808c43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808c442:	2114      	movs	r1, #20
 808c444:	f000 bff7 	b.w	808d436 <_ZdlPvj>
 808c448:	bd38      	pop	{r3, r4, r5, pc}

0808c44a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808c44a:	b510      	push	{r4, lr}
 808c44c:	b088      	sub	sp, #32
 808c44e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808c450:	4668      	mov	r0, sp
 808c452:	f7ff f861 	bl	808b518 <_ZN6StringC1EPKc>
    return (*fn)(p);
 808c456:	4669      	mov	r1, sp
 808c458:	a804      	add	r0, sp, #16
 808c45a:	f7ff f89c 	bl	808b596 <_ZN6StringC1ERKS_>
 808c45e:	a804      	add	r0, sp, #16
 808c460:	47a0      	blx	r4
 808c462:	4604      	mov	r4, r0
 808c464:	a804      	add	r0, sp, #16
 808c466:	f7ff f80d 	bl	808b484 <_ZN6StringD1Ev>
    String p(param);
 808c46a:	4668      	mov	r0, sp
 808c46c:	f7ff f80a 	bl	808b484 <_ZN6StringD1Ev>
}
 808c470:	4620      	mov	r0, r4
 808c472:	b008      	add	sp, #32
 808c474:	bd10      	pop	{r4, pc}

0808c476 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 808c476:	b507      	push	{r0, r1, r2, lr}
 808c478:	e9cd 1200 	strd	r1, r2, [sp]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c47c:	6882      	ldr	r2, [r0, #8]
 808c47e:	b90a      	cbnz	r2, 808c484 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 808c480:	f000 ffdd 	bl	808d43e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c484:	4669      	mov	r1, sp
 808c486:	68c3      	ldr	r3, [r0, #12]
 808c488:	aa01      	add	r2, sp, #4
 808c48a:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 808c48c:	b003      	add	sp, #12
 808c48e:	f85d fb04 	ldr.w	pc, [sp], #4

0808c492 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808c492:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 808c494:	2300      	movs	r3, #0
         size = sizeof(*this);
 808c496:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 808c498:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 808c49c:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808c49e:	4669      	mov	r1, sp
 808c4a0:	461a      	mov	r2, r3
 808c4a2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 808c4a4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 808c4a8:	f8ad 4000 	strh.w	r4, [sp]
 808c4ac:	f7fe fb60 	bl	808ab70 <spark_function>
}
 808c4b0:	b004      	add	sp, #16
 808c4b2:	bd10      	pop	{r4, pc}

0808c4b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808c4b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c4b6:	460e      	mov	r6, r1
 808c4b8:	4604      	mov	r4, r0
 808c4ba:	f856 3b04 	ldr.w	r3, [r6], #4
 808c4be:	460d      	mov	r5, r1
 808c4c0:	a801      	add	r0, sp, #4
 808c4c2:	4631      	mov	r1, r6
 808c4c4:	9300      	str	r3, [sp, #0]
 808c4c6:	f7ff fc21 	bl	808bd0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c4ca:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808c4cc:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c4ce:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 808c4d0:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808c4d2:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 808c4d4:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 808c4d6:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808c4d8:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 808c4da:	f7f7 fa5d 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c4de:	4630      	mov	r0, r6
 808c4e0:	f7f7 fa5a 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 808c4e4:	4628      	mov	r0, r5
 808c4e6:	2108      	movs	r1, #8
 808c4e8:	f000 ffa5 	bl	808d436 <_ZdlPvj>
        return p;
    }
 808c4ec:	4620      	mov	r0, r4
 808c4ee:	b002      	add	sp, #8
 808c4f0:	bd70      	pop	{r4, r5, r6, pc}

0808c4f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 808c4f2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808c4f4:	b510      	push	{r4, lr}
      if (_M_empty())
 808c4f6:	b90a      	cbnz	r2, 808c4fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808c4f8:	f000 ffa1 	bl	808d43e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c4fc:	68c3      	ldr	r3, [r0, #12]
    }
 808c4fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c502:	4718      	bx	r3

0808c504 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808c504:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808c506:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 808c508:	f100 0110 	add.w	r1, r0, #16
 808c50c:	f7ff fff1 	bl	808c4f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 808c510:	bd08      	pop	{r3, pc}

0808c512 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 808c512:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 808c514:	b510      	push	{r4, lr}
      if (_M_empty())
 808c516:	b90a      	cbnz	r2, 808c51c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808c518:	f000 ff91 	bl	808d43e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c51c:	68c3      	ldr	r3, [r0, #12]
    }
 808c51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c522:	4718      	bx	r3

0808c524 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808c524:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 808c526:	6800      	ldr	r0, [r0, #0]
 808c528:	f100 0110 	add.w	r1, r0, #16
 808c52c:	f7ff fff1 	bl	808c512 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 808c530:	bd08      	pop	{r3, pc}
	...

0808c534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 808c534:	b538      	push	{r3, r4, r5, lr}
 808c536:	2300      	movs	r3, #0
 808c538:	4604      	mov	r4, r0
 808c53a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c53c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 808c53e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c540:	f7f3 fdc3 	bl	80800ca <_Znwj>
 808c544:	b128      	cbz	r0, 808c552 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 808c546:	2301      	movs	r3, #1
 808c548:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 808c54c:	4b02      	ldr	r3, [pc, #8]	; (808c558 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 808c54e:	60c5      	str	r5, [r0, #12]
 808c550:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c552:	6020      	str	r0, [r4, #0]
	}
 808c554:	4620      	mov	r0, r4
 808c556:	bd38      	pop	{r3, r4, r5, pc}
 808c558:	08092d68 	.word	0x08092d68

0808c55c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 808c55c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808c55e:	2300      	movs	r3, #0
 808c560:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808c562:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808c564:	4604      	mov	r4, r0
 808c566:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808c568:	b12b      	cbz	r3, 808c576 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808c56a:	2202      	movs	r2, #2
 808c56c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808c56e:	68eb      	ldr	r3, [r5, #12]
 808c570:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808c572:	68ab      	ldr	r3, [r5, #8]
 808c574:	60a3      	str	r3, [r4, #8]
    }
 808c576:	4620      	mov	r0, r4
 808c578:	bd38      	pop	{r3, r4, r5, pc}
	...

0808c57c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 808c57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c57e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808c580:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808c582:	4668      	mov	r0, sp
 808c584:	f7ff ff2a 	bl	808c3dc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808c588:	f04f 0302 	mov.w	r3, #2
 808c58c:	e8d4 2f4f 	ldrexb	r2, [r4]
 808c590:	2a00      	cmp	r2, #0
 808c592:	d103      	bne.n	808c59c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 808c594:	e8c4 3f41 	strexb	r1, r3, [r4]
 808c598:	2900      	cmp	r1, #0
 808c59a:	d1f7      	bne.n	808c58c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 808c59c:	d125      	bne.n	808c5ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 808c59e:	f104 050c 	add.w	r5, r4, #12
 808c5a2:	4669      	mov	r1, sp
 808c5a4:	4628      	mov	r0, r5
 808c5a6:	f7ff ff19 	bl	808c3dc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 808c5aa:	2301      	movs	r3, #1
 808c5ac:	f3bf 8f5b 	dmb	ish
 808c5b0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808c5b2:	2000      	movs	r0, #0
 808c5b4:	f3bf 8f5b 	dmb	ish
 808c5b8:	f104 0308 	add.w	r3, r4, #8
 808c5bc:	e853 6f00 	ldrex	r6, [r3]
 808c5c0:	e843 0200 	strex	r2, r0, [r3]
 808c5c4:	2a00      	cmp	r2, #0
 808c5c6:	d1f9      	bne.n	808c5bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 808c5c8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808c5cc:	b16e      	cbz	r6, 808c5ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 808c5ce:	f7fe fa37 	bl	808aa40 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808c5d2:	b178      	cbz	r0, 808c5f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c5d4:	4629      	mov	r1, r5
 808c5d6:	4630      	mov	r0, r6
 808c5d8:	f7ff ff8b 	bl	808c4f2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 808c5dc:	4630      	mov	r0, r6
 808c5de:	f7fd f947 	bl	8089870 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808c5e2:	2110      	movs	r1, #16
 808c5e4:	4630      	mov	r0, r6
 808c5e6:	f000 ff26 	bl	808d436 <_ZdlPvj>
        p_->setError(std::move(error));
 808c5ea:	4668      	mov	r0, sp
 808c5ec:	f7ff ff03 	bl	808c3f6 <_ZN8particle5ErrorD1Ev>
    }
 808c5f0:	b009      	add	sp, #36	; 0x24
 808c5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c5f4:	4631      	mov	r1, r6
 808c5f6:	a802      	add	r0, sp, #8
 808c5f8:	f7ff ffb0 	bl	808c55c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808c5fc:	68e0      	ldr	r0, [r4, #12]
 808c5fe:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808c602:	b108      	cbz	r0, 808c608 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 808c604:	f002 f89a 	bl	808e73c <strdup>
        type_(type) {
 808c608:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c60a:	2010      	movs	r0, #16
 808c60c:	f8ad 501c 	strh.w	r5, [sp, #28]
 808c610:	f7f3 fd5b 	bl	80800ca <_Znwj>
 808c614:	4605      	mov	r5, r0
 808c616:	b1e8      	cbz	r0, 808c654 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 808c618:	2700      	movs	r7, #0
 808c61a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c61c:	2018      	movs	r0, #24
 808c61e:	f7f3 fd54 	bl	80800ca <_Znwj>
 808c622:	4604      	mov	r4, r0
 808c624:	b188      	cbz	r0, 808c64a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808c626:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808c628:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808c62a:	a802      	add	r0, sp, #8
 808c62c:	f7ff fd6b 	bl	808c106 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c630:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808c632:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c634:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c636:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808c638:	9204      	str	r2, [sp, #16]
 808c63a:	68e2      	ldr	r2, [r4, #12]
 808c63c:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808c63e:	60e3      	str	r3, [r4, #12]
 808c640:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 808c644:	9205      	str	r2, [sp, #20]
 808c646:	f7ff fec9 	bl	808c3dc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 808c64a:	4b08      	ldr	r3, [pc, #32]	; (808c66c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c64c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808c64e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c650:	4b07      	ldr	r3, [pc, #28]	; (808c670 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 808c652:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 808c654:	a806      	add	r0, sp, #24
 808c656:	f7ff fece 	bl	808c3f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808c65a:	a802      	add	r0, sp, #8
 808c65c:	f7fd f908 	bl	8089870 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c660:	2200      	movs	r2, #0
 808c662:	4629      	mov	r1, r5
 808c664:	4803      	ldr	r0, [pc, #12]	; (808c674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808c666:	f7fe f9f3 	bl	808aa50 <application_thread_invoke>
 808c66a:	e7b7      	b.n	808c5dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 808c66c:	0808c505 	.word	0x0808c505
 808c670:	0808c79d 	.word	0x0808c79d
 808c674:	0808cdbd 	.word	0x0808cdbd

0808c678 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808c678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c67c:	b08a      	sub	sp, #40	; 0x28
 808c67e:	4605      	mov	r5, r0
 808c680:	460c      	mov	r4, r1
 808c682:	4617      	mov	r7, r2
 808c684:	4698      	mov	r8, r3
 808c686:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808c68a:	f7fe fa89 	bl	808aba0 <spark_cloud_flag_connected>
 808c68e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 808c690:	4682      	mov	sl, r0
 808c692:	bb38      	cbnz	r0, 808c6e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 808c694:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808c698:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808c69a:	a905      	add	r1, sp, #20
 808c69c:	4630      	mov	r0, r6
 808c69e:	f8ad 3018 	strh.w	r3, [sp, #24]
 808c6a2:	f7ff fe9b 	bl	808c3dc <_ZN8particle5ErrorC1EOS0_>
 808c6a6:	2014      	movs	r0, #20
 808c6a8:	f7f3 fd0f 	bl	80800ca <_Znwj>
 808c6ac:	4604      	mov	r4, r0
 808c6ae:	b148      	cbz	r0, 808c6c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808c6b0:	2302      	movs	r3, #2
 808c6b2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c6b4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808c6b6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c6ba:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 808c6bc:	4631      	mov	r1, r6
 808c6be:	300c      	adds	r0, #12
 808c6c0:	f7ff fe8c 	bl	808c3dc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808c6c4:	4628      	mov	r0, r5
	: __shared_count(__p)
 808c6c6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808c6c8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 808c6cc:	f7ff ff32 	bl	808c534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808c6d0:	4630      	mov	r0, r6
 808c6d2:	f7ff fe90 	bl	808c3f6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808c6d6:	a805      	add	r0, sp, #20
 808c6d8:	f7ff fe8d 	bl	808c3f6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 808c6dc:	4628      	mov	r0, r5
 808c6de:	b00a      	add	sp, #40	; 0x28
 808c6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808c6e4:	230c      	movs	r3, #12
 808c6e6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808c6ea:	2014      	movs	r0, #20
 808c6ec:	e9cd aa08 	strd	sl, sl, [sp, #32]
 808c6f0:	9307      	str	r3, [sp, #28]
 808c6f2:	f7f3 fcea 	bl	80800ca <_Znwj>
 808c6f6:	4601      	mov	r1, r0
 808c6f8:	b128      	cbz	r0, 808c706 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808c6fa:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 808c6fe:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c702:	f880 a001 	strb.w	sl, [r0, #1]
 808c706:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808c708:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 808c70a:	f7ff ff13 	bl	808c534 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 808c70e:	4b22      	ldr	r3, [pc, #136]	; (808c798 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808c710:	2008      	movs	r0, #8
 808c712:	9308      	str	r3, [sp, #32]
 808c714:	f7f3 fcd9 	bl	80800ca <_Znwj>
 808c718:	4682      	mov	sl, r0
 808c71a:	b128      	cbz	r0, 808c728 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c71c:	9b03      	ldr	r3, [sp, #12]
 808c71e:	a904      	add	r1, sp, #16
 808c720:	f840 3b04 	str.w	r3, [r0], #4
 808c724:	f7ff faf2 	bl	808bd0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c728:	4642      	mov	r2, r8
 808c72a:	4639      	mov	r1, r7
 808c72c:	4620      	mov	r0, r4
 808c72e:	9600      	str	r6, [sp, #0]
 808c730:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 808c734:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c738:	f7fe fa42 	bl	808abc0 <spark_send_event>
 808c73c:	b9b8      	cbnz	r0, 808c76e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 808c73e:	9b03      	ldr	r3, [sp, #12]
 808c740:	785b      	ldrb	r3, [r3, #1]
 808c742:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808c746:	b993      	cbnz	r3, 808c76e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 808c748:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 808c74c:	a905      	add	r1, sp, #20
 808c74e:	a803      	add	r0, sp, #12
 808c750:	9205      	str	r2, [sp, #20]
 808c752:	f8ad 3018 	strh.w	r3, [sp, #24]
 808c756:	f7ff ff11 	bl	808c57c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808c75a:	a805      	add	r0, sp, #20
 808c75c:	f7ff fe4b 	bl	808c3f6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808c760:	a805      	add	r0, sp, #20
 808c762:	9909      	ldr	r1, [sp, #36]	; 0x24
 808c764:	f7ff fea6 	bl	808c4b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 808c768:	a806      	add	r0, sp, #24
 808c76a:	f7f7 f915 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c76e:	9b03      	ldr	r3, [sp, #12]
 808c770:	a904      	add	r1, sp, #16
 808c772:	a806      	add	r0, sp, #24
 808c774:	9305      	str	r3, [sp, #20]
 808c776:	f7ff fac9 	bl	808bd0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c77a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808c77c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c77e:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 808c780:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808c782:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 808c784:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 808c786:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 808c788:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 808c78a:	f7f7 f905 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c78e:	a804      	add	r0, sp, #16
 808c790:	f7f7 f902 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 808c794:	e7a2      	b.n	808c6dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 808c796:	bf00      	nop
 808c798:	0808c861 	.word	0x0808c861

0808c79c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 808c79c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c7a0:	4605      	mov	r5, r0
	  switch (__op)
 808c7a2:	d007      	beq.n	808c7b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 808c7a4:	2a03      	cmp	r2, #3
 808c7a6:	d018      	beq.n	808c7da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 808c7a8:	2a01      	cmp	r2, #1
 808c7aa:	d101      	bne.n	808c7b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808c7ac:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c7ae:	6003      	str	r3, [r0, #0]
	}
 808c7b0:	2000      	movs	r0, #0
 808c7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808c7b4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 808c7b6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808c7b8:	f7f3 fc87 	bl	80800ca <_Znwj>
 808c7bc:	4604      	mov	r4, r0
 808c7be:	b150      	cbz	r0, 808c7d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
 808c7c0:	4631      	mov	r1, r6
 808c7c2:	f7ff fecb 	bl	808c55c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808c7c6:	6930      	ldr	r0, [r6, #16]
 808c7c8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808c7cc:	b108      	cbz	r0, 808c7d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 808c7ce:	f001 ffb5 	bl	808e73c <strdup>
        type_(type) {
 808c7d2:	6120      	str	r0, [r4, #16]
 808c7d4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 808c7d6:	602c      	str	r4, [r5, #0]
	}
 808c7d8:	e7ea      	b.n	808c7b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808c7da:	6804      	ldr	r4, [r0, #0]
 808c7dc:	2c00      	cmp	r4, #0
 808c7de:	d0e7      	beq.n	808c7b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 808c7e0:	f104 0010 	add.w	r0, r4, #16
 808c7e4:	f7ff fe07 	bl	808c3f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808c7e8:	4620      	mov	r0, r4
 808c7ea:	f7fd f841 	bl	8089870 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808c7ee:	2118      	movs	r1, #24
 808c7f0:	4620      	mov	r0, r4
 808c7f2:	f000 fe20 	bl	808d436 <_ZdlPvj>
 808c7f6:	e7db      	b.n	808c7b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

0808c7f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 808c7f8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808c7fa:	2300      	movs	r3, #0
 808c7fc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808c7fe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808c800:	4604      	mov	r4, r0
 808c802:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808c804:	b12b      	cbz	r3, 808c812 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808c806:	2202      	movs	r2, #2
 808c808:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808c80a:	68eb      	ldr	r3, [r5, #12]
 808c80c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808c80e:	68ab      	ldr	r3, [r5, #8]
 808c810:	60a3      	str	r3, [r4, #8]
    }
 808c812:	4620      	mov	r0, r4
 808c814:	bd38      	pop	{r3, r4, r5, pc}

0808c816 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 808c816:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c818:	b570      	push	{r4, r5, r6, lr}
 808c81a:	4604      	mov	r4, r0
	  switch (__op)
 808c81c:	d007      	beq.n	808c82e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 808c81e:	2a03      	cmp	r2, #3
 808c820:	d012      	beq.n	808c848 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 808c822:	2a01      	cmp	r2, #1
 808c824:	d101      	bne.n	808c82a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808c826:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c828:	6003      	str	r3, [r0, #0]
	}
 808c82a:	2000      	movs	r0, #0
 808c82c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808c82e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 808c830:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808c832:	f7f3 fc4a 	bl	80800ca <_Znwj>
 808c836:	4605      	mov	r5, r0
 808c838:	b120      	cbz	r0, 808c844 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 808c83a:	4631      	mov	r1, r6
 808c83c:	f7ff ffdc 	bl	808c7f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808c840:	7c33      	ldrb	r3, [r6, #16]
 808c842:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 808c844:	6025      	str	r5, [r4, #0]
	}
 808c846:	e7f0      	b.n	808c82a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808c848:	6804      	ldr	r4, [r0, #0]
 808c84a:	2c00      	cmp	r4, #0
 808c84c:	d0ed      	beq.n	808c82a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 808c84e:	4620      	mov	r0, r4
 808c850:	f7fd f80e 	bl	8089870 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808c854:	2114      	movs	r1, #20
 808c856:	4620      	mov	r0, r4
 808c858:	f000 fded 	bl	808d436 <_ZdlPvj>
 808c85c:	e7e5      	b.n	808c82a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

0808c860 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808c860:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c862:	4604      	mov	r4, r0
 808c864:	b089      	sub	sp, #36	; 0x24
 808c866:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808c868:	a801      	add	r0, sp, #4
 808c86a:	4611      	mov	r1, r2
 808c86c:	f7ff fe22 	bl	808c4b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808c870:	b1a4      	cbz	r4, 808c89c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 808c872:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808c874:	b11d      	cbz	r5, 808c87e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 808c876:	4628      	mov	r0, r5
 808c878:	f001 ff60 	bl	808e73c <strdup>
 808c87c:	4605      	mov	r5, r0
 808c87e:	a801      	add	r0, sp, #4
 808c880:	a903      	add	r1, sp, #12
        type_(type) {
 808c882:	9503      	str	r5, [sp, #12]
 808c884:	f8ad 4010 	strh.w	r4, [sp, #16]
 808c888:	f7ff fe78 	bl	808c57c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808c88c:	a803      	add	r0, sp, #12
 808c88e:	f7ff fdb2 	bl	808c3f6 <_ZN8particle5ErrorD1Ev>
 808c892:	a802      	add	r0, sp, #8
 808c894:	f7f7 f880 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808c898:	b009      	add	sp, #36	; 0x24
 808c89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808c89c:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808c89e:	9d01      	ldr	r5, [sp, #4]
 808c8a0:	e8d5 2f4f 	ldrexb	r2, [r5]
 808c8a4:	2a00      	cmp	r2, #0
 808c8a6:	d103      	bne.n	808c8b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 808c8a8:	e8c5 3f41 	strexb	r1, r3, [r5]
 808c8ac:	2900      	cmp	r1, #0
 808c8ae:	d1f7      	bne.n	808c8a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 808c8b0:	d1ef      	bne.n	808c892 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 808c8b2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 808c8b4:	f3bf 8f5b 	dmb	ish
 808c8b8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808c8ba:	f3bf 8f5b 	dmb	ish
 808c8be:	1d2b      	adds	r3, r5, #4
 808c8c0:	e853 6f00 	ldrex	r6, [r3]
 808c8c4:	e843 4200 	strex	r2, r4, [r3]
 808c8c8:	2a00      	cmp	r2, #0
 808c8ca:	d1f9      	bne.n	808c8c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 808c8cc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808c8d0:	2e00      	cmp	r6, #0
 808c8d2:	d0de      	beq.n	808c892 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 808c8d4:	4620      	mov	r0, r4
 808c8d6:	f7fe f8b3 	bl	808aa40 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808c8da:	4607      	mov	r7, r0
 808c8dc:	b160      	cbz	r0, 808c8f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c8de:	4630      	mov	r0, r6
 808c8e0:	f105 010c 	add.w	r1, r5, #12
 808c8e4:	f7ff fe15 	bl	808c512 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 808c8e8:	4630      	mov	r0, r6
 808c8ea:	f7fc ffc1 	bl	8089870 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808c8ee:	2110      	movs	r1, #16
 808c8f0:	4630      	mov	r0, r6
 808c8f2:	f000 fda0 	bl	808d436 <_ZdlPvj>
 808c8f6:	e7cc      	b.n	808c892 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c8f8:	4631      	mov	r1, r6
 808c8fa:	a803      	add	r0, sp, #12
 808c8fc:	f7ff ff7c 	bl	808c7f8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808c900:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c902:	2010      	movs	r0, #16
 808c904:	f88d 301c 	strb.w	r3, [sp, #28]
 808c908:	f7f3 fbdf 	bl	80800ca <_Znwj>
 808c90c:	4605      	mov	r5, r0
 808c90e:	b1d0      	cbz	r0, 808c946 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 808c910:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c912:	2014      	movs	r0, #20
 808c914:	f7f3 fbd9 	bl	80800ca <_Znwj>
 808c918:	4604      	mov	r4, r0
 808c91a:	b178      	cbz	r0, 808c93c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 808c91c:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808c91e:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808c920:	a803      	add	r0, sp, #12
 808c922:	f7ff fbf0 	bl	808c106 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c926:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808c928:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c92a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c92c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808c92e:	9205      	str	r2, [sp, #20]
 808c930:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808c932:	60e3      	str	r3, [r4, #12]
 808c934:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 808c938:	9206      	str	r2, [sp, #24]
 808c93a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808c93c:	4b06      	ldr	r3, [pc, #24]	; (808c958 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c93e:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808c940:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c942:	4b06      	ldr	r3, [pc, #24]	; (808c95c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 808c944:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808c946:	a803      	add	r0, sp, #12
 808c948:	f7fc ff92 	bl	8089870 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c94c:	2200      	movs	r2, #0
 808c94e:	4629      	mov	r1, r5
 808c950:	4803      	ldr	r0, [pc, #12]	; (808c960 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 808c952:	f7fe f87d 	bl	808aa50 <application_thread_invoke>
 808c956:	e7c7      	b.n	808c8e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 808c958:	0808c525 	.word	0x0808c525
 808c95c:	0808c817 	.word	0x0808c817
 808c960:	0808cdbd 	.word	0x0808cdbd

0808c964 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808c964:	4770      	bx	lr

0808c966 <_ZN9IPAddressD0Ev>:
 808c966:	b510      	push	{r4, lr}
 808c968:	4604      	mov	r4, r0
 808c96a:	2108      	movs	r1, #8
 808c96c:	f000 fd63 	bl	808d436 <_ZdlPvj>
 808c970:	4620      	mov	r0, r4
 808c972:	bd10      	pop	{r4, pc}

0808c974 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808c974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c976:	460e      	mov	r6, r1
 808c978:	2400      	movs	r4, #0
 808c97a:	f100 0708 	add.w	r7, r0, #8
 808c97e:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 808c980:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 808c984:	220a      	movs	r2, #10
 808c986:	4630      	mov	r0, r6
 808c988:	f7fe ffff 	bl	808b98a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808c98c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808c98e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 808c990:	d101      	bne.n	808c996 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 808c992:	4620      	mov	r0, r4
 808c994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 808c996:	2c00      	cmp	r4, #0
 808c998:	d0f2      	beq.n	808c980 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808c99a:	212e      	movs	r1, #46	; 0x2e
 808c99c:	4630      	mov	r0, r6
 808c99e:	f7fe ffd1 	bl	808b944 <_ZN5Print5printEc>
 808c9a2:	4404      	add	r4, r0
 808c9a4:	e7ec      	b.n	808c980 <_ZNK9IPAddress7printToER5Print+0xc>
	...

0808c9a8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 808c9a8:	4a02      	ldr	r2, [pc, #8]	; (808c9b4 <_ZN9IPAddressC1Ev+0xc>)
 808c9aa:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808c9ac:	2200      	movs	r2, #0
 808c9ae:	6042      	str	r2, [r0, #4]
}
 808c9b0:	4770      	bx	lr
 808c9b2:	bf00      	nop
 808c9b4:	08092d84 	.word	0x08092d84

0808c9b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 808c9b8:	4a02      	ldr	r2, [pc, #8]	; (808c9c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808c9ba:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 808c9bc:	680a      	ldr	r2, [r1, #0]
 808c9be:	6042      	str	r2, [r0, #4]
}
 808c9c0:	4770      	bx	lr
 808c9c2:	bf00      	nop
 808c9c4:	08092d84 	.word	0x08092d84

0808c9c8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 808c9c8:	4a01      	ldr	r2, [pc, #4]	; (808c9d0 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 808c9ca:	e9c0 2100 	strd	r2, r1, [r0]
}
 808c9ce:	4770      	bx	lr
 808c9d0:	08092d84 	.word	0x08092d84

0808c9d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 808c9d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808c9d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808c9da:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 808c9de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 808c9e2:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 808c9e6:	6044      	str	r4, [r0, #4]
}
 808c9e8:	bd10      	pop	{r4, pc}
	...

0808c9ec <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808c9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808c9ee:	4d04      	ldr	r5, [pc, #16]	; (808ca00 <_ZN9IPAddressC1Ehhhh+0x14>)
 808c9f0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808c9f2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808c9f6:	9500      	str	r5, [sp, #0]
 808c9f8:	f7ff ffec 	bl	808c9d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808c9fc:	b003      	add	sp, #12
 808c9fe:	bd30      	pop	{r4, r5, pc}
 808ca00:	08092d84 	.word	0x08092d84

0808ca04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808ca04:	7441      	strb	r1, [r0, #17]
}
 808ca06:	4770      	bx	lr

0808ca08 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808ca08:	4770      	bx	lr

0808ca0a <_ZN9USBSerial4readEv>:
{
 808ca0a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808ca0c:	2100      	movs	r1, #0
 808ca0e:	7c00      	ldrb	r0, [r0, #16]
 808ca10:	f7fd ffce 	bl	808a9b0 <HAL_USB_USART_Receive_Data>
}
 808ca14:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808ca18:	bd08      	pop	{r3, pc}

0808ca1a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 808ca1a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808ca1c:	2101      	movs	r1, #1
 808ca1e:	7c00      	ldrb	r0, [r0, #16]
 808ca20:	f7fd ffc6 	bl	808a9b0 <HAL_USB_USART_Receive_Data>
}
 808ca24:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808ca28:	bd08      	pop	{r3, pc}

0808ca2a <_ZN9USBSerial17availableForWriteEv>:
{
 808ca2a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808ca2c:	7c00      	ldrb	r0, [r0, #16]
 808ca2e:	f7fd ffb7 	bl	808a9a0 <HAL_USB_USART_Available_Data_For_Write>
}
 808ca32:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808ca36:	bd08      	pop	{r3, pc}

0808ca38 <_ZN9USBSerial9availableEv>:
{
 808ca38:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808ca3a:	7c00      	ldrb	r0, [r0, #16]
 808ca3c:	f7fd ffa8 	bl	808a990 <HAL_USB_USART_Available_Data>
}
 808ca40:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808ca44:	bd08      	pop	{r3, pc}

0808ca46 <_ZN9USBSerial5writeEh>:
{
 808ca46:	b538      	push	{r3, r4, r5, lr}
 808ca48:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808ca4a:	7c00      	ldrb	r0, [r0, #16]
{
 808ca4c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808ca4e:	f7fd ffa7 	bl	808a9a0 <HAL_USB_USART_Available_Data_For_Write>
 808ca52:	2800      	cmp	r0, #0
 808ca54:	dc01      	bgt.n	808ca5a <_ZN9USBSerial5writeEh+0x14>
 808ca56:	7c60      	ldrb	r0, [r4, #17]
 808ca58:	b128      	cbz	r0, 808ca66 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808ca5a:	4629      	mov	r1, r5
 808ca5c:	7c20      	ldrb	r0, [r4, #16]
 808ca5e:	f7fd ffaf 	bl	808a9c0 <HAL_USB_USART_Send_Data>
 808ca62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 808ca66:	bd38      	pop	{r3, r4, r5, pc}

0808ca68 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 808ca68:	7c00      	ldrb	r0, [r0, #16]
 808ca6a:	f7fd bfb1 	b.w	808a9d0 <HAL_USB_USART_Flush_Data>

0808ca6e <_ZN9USBSerialD0Ev>:
 808ca6e:	b510      	push	{r4, lr}
 808ca70:	4604      	mov	r4, r0
 808ca72:	2114      	movs	r1, #20
 808ca74:	f000 fcdf 	bl	808d436 <_ZdlPvj>
 808ca78:	4620      	mov	r0, r4
 808ca7a:	bd10      	pop	{r4, pc}

0808ca7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808ca7c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808ca7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808ca82:	4604      	mov	r4, r0
 808ca84:	4608      	mov	r0, r1
 808ca86:	2100      	movs	r1, #0
 808ca88:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808ca8c:	4b04      	ldr	r3, [pc, #16]	; (808caa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808ca8e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808ca90:	6023      	str	r3, [r4, #0]
  _blocking = true;
 808ca92:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 808ca94:	4611      	mov	r1, r2
  _blocking = true;
 808ca96:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 808ca98:	f7fd ff6a 	bl	808a970 <HAL_USB_USART_Init>
}
 808ca9c:	4620      	mov	r0, r4
 808ca9e:	bd10      	pop	{r4, pc}
 808caa0:	08092d98 	.word	0x08092d98

0808caa4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808caa4:	2200      	movs	r2, #0
 808caa6:	7c00      	ldrb	r0, [r0, #16]
 808caa8:	f7fd bf6a 	b.w	808a980 <HAL_USB_USART_Begin>

0808caac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808caac:	b510      	push	{r4, lr}
 808caae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808cab0:	2214      	movs	r2, #20
 808cab2:	2100      	movs	r1, #0
 808cab4:	f001 fdf6 	bl	808e6a4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808cab8:	4b05      	ldr	r3, [pc, #20]	; (808cad0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808caba:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 808cabc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808cabe:	4b05      	ldr	r3, [pc, #20]	; (808cad4 <_Z19acquireSerialBufferv+0x28>)
 808cac0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808cac2:	f240 1301 	movw	r3, #257	; 0x101
 808cac6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808cac8:	2381      	movs	r3, #129	; 0x81
 808caca:	8223      	strh	r3, [r4, #16]
}
 808cacc:	bd10      	pop	{r4, pc}
 808cace:	bf00      	nop
 808cad0:	20000eb0 	.word	0x20000eb0
 808cad4:	20000fb1 	.word	0x20000fb1

0808cad8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808cad8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808cada:	4d0f      	ldr	r5, [pc, #60]	; (808cb18 <_Z16_fetch_usbserialv+0x40>)
{
 808cadc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808cade:	a801      	add	r0, sp, #4
 808cae0:	f7ff ffe4 	bl	808caac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808cae4:	7829      	ldrb	r1, [r5, #0]
 808cae6:	f3bf 8f5b 	dmb	ish
 808caea:	f011 0401 	ands.w	r4, r1, #1
 808caee:	d110      	bne.n	808cb12 <_Z16_fetch_usbserialv+0x3a>
 808caf0:	4628      	mov	r0, r5
 808caf2:	f7f3 faf0 	bl	80800d6 <__cxa_guard_acquire>
 808caf6:	b160      	cbz	r0, 808cb12 <_Z16_fetch_usbserialv+0x3a>
 808caf8:	4621      	mov	r1, r4
 808cafa:	aa01      	add	r2, sp, #4
 808cafc:	4807      	ldr	r0, [pc, #28]	; (808cb1c <_Z16_fetch_usbserialv+0x44>)
 808cafe:	f7ff ffbd 	bl	808ca7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808cb02:	4628      	mov	r0, r5
 808cb04:	f7f3 faec 	bl	80800e0 <__cxa_guard_release>
 808cb08:	4a05      	ldr	r2, [pc, #20]	; (808cb20 <_Z16_fetch_usbserialv+0x48>)
 808cb0a:	4906      	ldr	r1, [pc, #24]	; (808cb24 <_Z16_fetch_usbserialv+0x4c>)
 808cb0c:	4803      	ldr	r0, [pc, #12]	; (808cb1c <_Z16_fetch_usbserialv+0x44>)
 808cb0e:	f000 fc8d 	bl	808d42c <__aeabi_atexit>
	return _usbserial;
}
 808cb12:	4802      	ldr	r0, [pc, #8]	; (808cb1c <_Z16_fetch_usbserialv+0x44>)
 808cb14:	b007      	add	sp, #28
 808cb16:	bd30      	pop	{r4, r5, pc}
 808cb18:	20000e80 	.word	0x20000e80
 808cb1c:	20000e88 	.word	0x20000e88
 808cb20:	200002c0 	.word	0x200002c0
 808cb24:	0808ca09 	.word	0x0808ca09

0808cb28 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808cb28:	b510      	push	{r4, lr}
 808cb2a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808cb2c:	2214      	movs	r2, #20
 808cb2e:	2100      	movs	r1, #0
 808cb30:	f001 fdb8 	bl	808e6a4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808cb34:	4b05      	ldr	r3, [pc, #20]	; (808cb4c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808cb36:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 808cb38:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808cb3a:	4b05      	ldr	r3, [pc, #20]	; (808cb50 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808cb3c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808cb3e:	f240 1301 	movw	r3, #257	; 0x101
 808cb42:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808cb44:	2381      	movs	r3, #129	; 0x81
 808cb46:	8223      	strh	r3, [r4, #16]
}
 808cb48:	bd10      	pop	{r4, pc}
 808cb4a:	bf00      	nop
 808cb4c:	20001032 	.word	0x20001032
 808cb50:	20001133 	.word	0x20001133

0808cb54 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808cb54:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808cb56:	4c0f      	ldr	r4, [pc, #60]	; (808cb94 <_Z17_fetch_usbserial1v+0x40>)
{
 808cb58:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808cb5a:	a801      	add	r0, sp, #4
 808cb5c:	f7ff ffe4 	bl	808cb28 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808cb60:	7823      	ldrb	r3, [r4, #0]
 808cb62:	f3bf 8f5b 	dmb	ish
 808cb66:	07db      	lsls	r3, r3, #31
 808cb68:	d410      	bmi.n	808cb8c <_Z17_fetch_usbserial1v+0x38>
 808cb6a:	4620      	mov	r0, r4
 808cb6c:	f7f3 fab3 	bl	80800d6 <__cxa_guard_acquire>
 808cb70:	b160      	cbz	r0, 808cb8c <_Z17_fetch_usbserial1v+0x38>
 808cb72:	2101      	movs	r1, #1
 808cb74:	aa01      	add	r2, sp, #4
 808cb76:	4808      	ldr	r0, [pc, #32]	; (808cb98 <_Z17_fetch_usbserial1v+0x44>)
 808cb78:	f7ff ff80 	bl	808ca7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808cb7c:	4620      	mov	r0, r4
 808cb7e:	f7f3 faaf 	bl	80800e0 <__cxa_guard_release>
 808cb82:	4a06      	ldr	r2, [pc, #24]	; (808cb9c <_Z17_fetch_usbserial1v+0x48>)
 808cb84:	4906      	ldr	r1, [pc, #24]	; (808cba0 <_Z17_fetch_usbserial1v+0x4c>)
 808cb86:	4804      	ldr	r0, [pc, #16]	; (808cb98 <_Z17_fetch_usbserial1v+0x44>)
 808cb88:	f000 fc50 	bl	808d42c <__aeabi_atexit>
  return _usbserial1;
}
 808cb8c:	4802      	ldr	r0, [pc, #8]	; (808cb98 <_Z17_fetch_usbserial1v+0x44>)
 808cb8e:	b006      	add	sp, #24
 808cb90:	bd10      	pop	{r4, pc}
 808cb92:	bf00      	nop
 808cb94:	20000e84 	.word	0x20000e84
 808cb98:	20000e9c 	.word	0x20000e9c
 808cb9c:	200002c0 	.word	0x200002c0
 808cba0:	0808ca09 	.word	0x0808ca09

0808cba4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 808cba4:	4700      	bx	r0
	...

0808cba8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 808cba8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 808cbac:	2400      	movs	r4, #0
{
 808cbae:	461d      	mov	r5, r3
 808cbb0:	460f      	mov	r7, r1
 808cbb2:	4690      	mov	r8, r2
 808cbb4:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 808cbb6:	f7fd fd4b 	bl	808a650 <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808cbba:	2304      	movs	r3, #4
  if (priority >= 0) {
 808cbbc:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808cbbe:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 808cbc2:	bfa8      	it	ge
 808cbc4:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 808cbc8:	f8ad 400d 	strh.w	r4, [sp, #13]
 808cbcc:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 808cbd0:	bfa4      	itt	ge
 808cbd2:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 808cbd4:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808cbd8:	463a      	mov	r2, r7
 808cbda:	4643      	mov	r3, r8
 808cbdc:	4630      	mov	r0, r6
 808cbde:	4906      	ldr	r1, [pc, #24]	; (808cbf8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 808cbe0:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808cbe2:	bfa8      	it	ge
 808cbe4:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 808cbe8:	f7fd fd2a 	bl	808a640 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 808cbec:	fab0 f080 	clz	r0, r0
 808cbf0:	0940      	lsrs	r0, r0, #5
 808cbf2:	b004      	add	sp, #16
 808cbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808cbf8:	0808cba5 	.word	0x0808cba5

0808cbfc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808cbfc:	2200      	movs	r2, #0
 808cbfe:	6840      	ldr	r0, [r0, #4]
 808cc00:	4611      	mov	r1, r2
 808cc02:	f7fd bf7d 	b.w	808ab00 <network_ready>

0808cc06 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808cc06:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 808cc08:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808cc0a:	b085      	sub	sp, #20
 808cc0c:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cc0e:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808cc10:	460f      	mov	r7, r1
 808cc12:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808cc14:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cc16:	f001 fdac 	bl	808e772 <strlen>
 808cc1a:	687b      	ldr	r3, [r7, #4]
 808cc1c:	b281      	uxth	r1, r0
 808cc1e:	9600      	str	r6, [sp, #0]
 808cc20:	4628      	mov	r0, r5
 808cc22:	aa03      	add	r2, sp, #12
 808cc24:	f7fd fe94 	bl	808a950 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808cc28:	b130      	cbz	r0, 808cc38 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808cc2a:	4631      	mov	r1, r6
 808cc2c:	4620      	mov	r0, r4
 808cc2e:	f7ff fecb 	bl	808c9c8 <_ZN9IPAddressC1Em>
    }
 808cc32:	4620      	mov	r0, r4
 808cc34:	b005      	add	sp, #20
 808cc36:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808cc38:	4620      	mov	r0, r4
 808cc3a:	a903      	add	r1, sp, #12
 808cc3c:	f7ff febc 	bl	808c9b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 808cc40:	e7f7      	b.n	808cc32 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

0808cc42 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 808cc42:	2200      	movs	r2, #0
 808cc44:	6840      	ldr	r0, [r0, #4]
 808cc46:	4611      	mov	r1, r2
 808cc48:	f7fd bf7a 	b.w	808ab40 <network_listening>

0808cc4c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808cc4c:	2200      	movs	r2, #0
 808cc4e:	6840      	ldr	r0, [r0, #4]
 808cc50:	4611      	mov	r1, r2
 808cc52:	f7fd bf85 	b.w	808ab60 <network_get_listen_timeout>

0808cc56 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808cc56:	2200      	movs	r2, #0
 808cc58:	6840      	ldr	r0, [r0, #4]
 808cc5a:	f7fd bf79 	b.w	808ab50 <network_set_listen_timeout>

0808cc5e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808cc5e:	2200      	movs	r2, #0
 808cc60:	6840      	ldr	r0, [r0, #4]
 808cc62:	f081 0101 	eor.w	r1, r1, #1
 808cc66:	f7fd bf63 	b.w	808ab30 <network_listen>

0808cc6a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808cc6a:	2300      	movs	r3, #0
 808cc6c:	6840      	ldr	r0, [r0, #4]
 808cc6e:	461a      	mov	r2, r3
 808cc70:	4619      	mov	r1, r3
 808cc72:	f7fd bf4d 	b.w	808ab10 <network_on>

0808cc76 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 808cc76:	2200      	movs	r2, #0
 808cc78:	6840      	ldr	r0, [r0, #4]
 808cc7a:	4611      	mov	r1, r2
 808cc7c:	f7fd bf30 	b.w	808aae0 <network_connecting>

0808cc80 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808cc80:	2200      	movs	r2, #0
 808cc82:	2102      	movs	r1, #2
 808cc84:	6840      	ldr	r0, [r0, #4]
 808cc86:	f7fd bf33 	b.w	808aaf0 <network_disconnect>

0808cc8a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808cc8a:	2300      	movs	r3, #0
 808cc8c:	6840      	ldr	r0, [r0, #4]
 808cc8e:	461a      	mov	r2, r3
 808cc90:	f7fd bf1e 	b.w	808aad0 <network_connect>

0808cc94 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808cc94:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808cc96:	2428      	movs	r4, #40	; 0x28
 808cc98:	4b07      	ldr	r3, [pc, #28]	; (808ccb8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808cc9a:	4622      	mov	r2, r4
 808cc9c:	4618      	mov	r0, r3
 808cc9e:	2100      	movs	r1, #0
 808cca0:	f001 fd00 	bl	808e6a4 <memset>
        cid = -1;
 808cca4:	f04f 32ff 	mov.w	r2, #4294967295
 808cca8:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808ccaa:	2204      	movs	r2, #4
 808ccac:	4b03      	ldr	r3, [pc, #12]	; (808ccbc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808ccae:	8004      	strh	r4, [r0, #0]
 808ccb0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808ccb2:	4a03      	ldr	r2, [pc, #12]	; (808ccc0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 808ccb4:	601a      	str	r2, [r3, #0]
 808ccb6:	bd10      	pop	{r4, pc}
 808ccb8:	200011bc 	.word	0x200011bc
 808ccbc:	200011b4 	.word	0x200011b4
 808ccc0:	08092dc8 	.word	0x08092dc8

0808ccc4 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808ccc4:	7441      	strb	r1, [r0, #17]
}
 808ccc6:	4770      	bx	lr

0808ccc8 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 808ccc8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 808ccca:	7c00      	ldrb	r0, [r0, #16]
 808cccc:	f7fd fd78 	bl	808a7c0 <hal_usart_available_data_for_write>
}
 808ccd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808ccd4:	bd08      	pop	{r3, pc}

0808ccd6 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808ccd6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808ccd8:	7c00      	ldrb	r0, [r0, #16]
 808ccda:	f7fd fd49 	bl	808a770 <hal_usart_available>
}
 808ccde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808cce2:	bd08      	pop	{r3, pc}

0808cce4 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808cce4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 808cce6:	7c00      	ldrb	r0, [r0, #16]
 808cce8:	f7fd fd52 	bl	808a790 <hal_usart_peek>
}
 808ccec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808ccf0:	bd08      	pop	{r3, pc}

0808ccf2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808ccf2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808ccf4:	7c00      	ldrb	r0, [r0, #16]
 808ccf6:	f7fd fd43 	bl	808a780 <hal_usart_read>
}
 808ccfa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808ccfe:	bd08      	pop	{r3, pc}

0808cd00 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808cd00:	7c00      	ldrb	r0, [r0, #16]
 808cd02:	f7fd bd4d 	b.w	808a7a0 <hal_usart_flush>

0808cd06 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808cd06:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808cd08:	7c46      	ldrb	r6, [r0, #17]
{
 808cd0a:	4604      	mov	r4, r0
 808cd0c:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808cd0e:	b12e      	cbz	r6, 808cd1c <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808cd10:	4629      	mov	r1, r5
 808cd12:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808cd14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 808cd18:	f7fd bd22 	b.w	808a760 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808cd1c:	7c00      	ldrb	r0, [r0, #16]
 808cd1e:	f7fd fd4f 	bl	808a7c0 <hal_usart_available_data_for_write>
 808cd22:	2800      	cmp	r0, #0
 808cd24:	dcf4      	bgt.n	808cd10 <_ZN11USARTSerial5writeEh+0xa>
}
 808cd26:	4630      	mov	r0, r6
 808cd28:	bd70      	pop	{r4, r5, r6, pc}
	...

0808cd2c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 808cd2c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808cd30:	b510      	push	{r4, lr}
 808cd32:	4604      	mov	r4, r0
 808cd34:	4608      	mov	r0, r1
 808cd36:	4611      	mov	r1, r2
 808cd38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808cd3c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 808cd40:	4a04      	ldr	r2, [pc, #16]	; (808cd54 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808cd42:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808cd44:	6022      	str	r2, [r4, #0]
  _blocking = true;
 808cd46:	2201      	movs	r2, #1
 808cd48:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 808cd4a:	461a      	mov	r2, r3
 808cd4c:	f7fd fd00 	bl	808a750 <hal_usart_init>
}
 808cd50:	4620      	mov	r0, r4
 808cd52:	bd10      	pop	{r4, pc}
 808cd54:	08092dfc 	.word	0x08092dfc

0808cd58 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 808cd58:	2300      	movs	r3, #0
 808cd5a:	7c00      	ldrb	r0, [r0, #16]
 808cd5c:	f7fd bd38 	b.w	808a7d0 <hal_usart_begin_config>

0808cd60 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 808cd60:	2200      	movs	r2, #0
 808cd62:	f7ff bff9 	b.w	808cd58 <_ZN11USARTSerial5beginEmm>

0808cd66 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 808cd66:	7c00      	ldrb	r0, [r0, #16]
 808cd68:	f7fd bd22 	b.w	808a7b0 <hal_usart_is_enabled>

0808cd6c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808cd6c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808cd6e:	4d0d      	ldr	r5, [pc, #52]	; (808cda4 <_Z22__fetch_global_Serial1v+0x38>)
 808cd70:	7829      	ldrb	r1, [r5, #0]
 808cd72:	f3bf 8f5b 	dmb	ish
 808cd76:	f011 0401 	ands.w	r4, r1, #1
 808cd7a:	d111      	bne.n	808cda0 <_Z22__fetch_global_Serial1v+0x34>
 808cd7c:	4628      	mov	r0, r5
 808cd7e:	f7f3 f9aa 	bl	80800d6 <__cxa_guard_acquire>
 808cd82:	b168      	cbz	r0, 808cda0 <_Z22__fetch_global_Serial1v+0x34>
 808cd84:	4621      	mov	r1, r4
 808cd86:	4a08      	ldr	r2, [pc, #32]	; (808cda8 <_Z22__fetch_global_Serial1v+0x3c>)
 808cd88:	4b08      	ldr	r3, [pc, #32]	; (808cdac <_Z22__fetch_global_Serial1v+0x40>)
 808cd8a:	4809      	ldr	r0, [pc, #36]	; (808cdb0 <_Z22__fetch_global_Serial1v+0x44>)
 808cd8c:	f7ff ffce 	bl	808cd2c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808cd90:	4628      	mov	r0, r5
 808cd92:	f7f3 f9a5 	bl	80800e0 <__cxa_guard_release>
 808cd96:	4a07      	ldr	r2, [pc, #28]	; (808cdb4 <_Z22__fetch_global_Serial1v+0x48>)
 808cd98:	4907      	ldr	r1, [pc, #28]	; (808cdb8 <_Z22__fetch_global_Serial1v+0x4c>)
 808cd9a:	4805      	ldr	r0, [pc, #20]	; (808cdb0 <_Z22__fetch_global_Serial1v+0x44>)
 808cd9c:	f000 fb46 	bl	808d42c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808cda0:	4803      	ldr	r0, [pc, #12]	; (808cdb0 <_Z22__fetch_global_Serial1v+0x44>)
 808cda2:	bd38      	pop	{r3, r4, r5, pc}
 808cda4:	200011e4 	.word	0x200011e4
 808cda8:	200011e8 	.word	0x200011e8
 808cdac:	2000126c 	.word	0x2000126c
 808cdb0:	200012f0 	.word	0x200012f0
 808cdb4:	200002c0 	.word	0x200002c0
 808cdb8:	08080b81 	.word	0x08080b81

0808cdbc <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808cdbc:	b510      	push	{r4, lr}
      if (_M_empty())
 808cdbe:	6883      	ldr	r3, [r0, #8]
 808cdc0:	4604      	mov	r4, r0
 808cdc2:	b90b      	cbnz	r3, 808cdc8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808cdc4:	f000 fb3b 	bl	808d43e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808cdc8:	68c3      	ldr	r3, [r0, #12]
 808cdca:	4798      	blx	r3
      if (_M_manager)
 808cdcc:	68a3      	ldr	r3, [r4, #8]
 808cdce:	b11b      	cbz	r3, 808cdd8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808cdd0:	2203      	movs	r2, #3
 808cdd2:	4621      	mov	r1, r4
 808cdd4:	4620      	mov	r0, r4
 808cdd6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808cdd8:	4620      	mov	r0, r4
}
 808cdda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 808cdde:	2110      	movs	r1, #16
 808cde0:	f000 bb29 	b.w	808d436 <_ZdlPvj>

0808cde4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 808cde4:	4770      	bx	lr

0808cde6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808cde6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808cde8:	4606      	mov	r6, r0
 808cdea:	4615      	mov	r5, r2
 808cdec:	460c      	mov	r4, r1
 808cdee:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808cdf0:	42bc      	cmp	r4, r7
 808cdf2:	d006      	beq.n	808ce02 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808cdf4:	6833      	ldr	r3, [r6, #0]
 808cdf6:	4630      	mov	r0, r6
 808cdf8:	689b      	ldr	r3, [r3, #8]
 808cdfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 808cdfe:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 808ce00:	e7f6      	b.n	808cdf0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 808ce02:	4628      	mov	r0, r5
 808ce04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808ce06 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808ce06:	2200      	movs	r2, #0
 808ce08:	7c00      	ldrb	r0, [r0, #16]
 808ce0a:	f7fd bd01 	b.w	808a810 <hal_i2c_write>

0808ce0e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 808ce0e:	2100      	movs	r1, #0
 808ce10:	7c00      	ldrb	r0, [r0, #16]
 808ce12:	f7fd bd05 	b.w	808a820 <hal_i2c_available>

0808ce16 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808ce16:	2100      	movs	r1, #0
 808ce18:	7c00      	ldrb	r0, [r0, #16]
 808ce1a:	f7fd bd09 	b.w	808a830 <hal_i2c_read>

0808ce1e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 808ce1e:	2100      	movs	r1, #0
 808ce20:	7c00      	ldrb	r0, [r0, #16]
 808ce22:	f7fd bd0d 	b.w	808a840 <hal_i2c_peek>

0808ce26 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 808ce26:	2100      	movs	r1, #0
 808ce28:	7c00      	ldrb	r0, [r0, #16]
 808ce2a:	f7fd bd11 	b.w	808a850 <hal_i2c_flush>

0808ce2e <_ZN7TwoWireD0Ev>:
 808ce2e:	b510      	push	{r4, lr}
 808ce30:	4604      	mov	r4, r0
 808ce32:	2114      	movs	r1, #20
 808ce34:	f000 faff 	bl	808d436 <_ZdlPvj>
 808ce38:	4620      	mov	r0, r4
 808ce3a:	bd10      	pop	{r4, pc}

0808ce3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808ce3c:	b510      	push	{r4, lr}
 808ce3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808ce42:	4604      	mov	r4, r0
 808ce44:	4608      	mov	r0, r1
 808ce46:	2100      	movs	r1, #0
 808ce48:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808ce4c:	4b03      	ldr	r3, [pc, #12]	; (808ce5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 808ce4e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808ce50:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 808ce52:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 808ce54:	f7fd fd0c 	bl	808a870 <hal_i2c_init>
}
 808ce58:	4620      	mov	r0, r4
 808ce5a:	bd10      	pop	{r4, pc}
 808ce5c:	08092e2c 	.word	0x08092e2c

0808ce60 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808ce60:	2300      	movs	r3, #0
 808ce62:	7c00      	ldrb	r0, [r0, #16]
 808ce64:	461a      	mov	r2, r3
 808ce66:	4619      	mov	r1, r3
 808ce68:	f7fd bcba 	b.w	808a7e0 <hal_i2c_begin>

0808ce6c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 808ce6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808ce6e:	2200      	movs	r2, #0
 808ce70:	2314      	movs	r3, #20
 808ce72:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808ce76:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 808ce7a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 808ce7c:	7c00      	ldrb	r0, [r0, #16]
 808ce7e:	f88d 3008 	strb.w	r3, [sp, #8]
 808ce82:	684b      	ldr	r3, [r1, #4]
 808ce84:	9303      	str	r3, [sp, #12]
 808ce86:	68cb      	ldr	r3, [r1, #12]
 808ce88:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808ce8a:	7a0b      	ldrb	r3, [r1, #8]
 808ce8c:	a901      	add	r1, sp, #4
 808ce8e:	9305      	str	r3, [sp, #20]
 808ce90:	f7fd fd06 	bl	808a8a0 <hal_i2c_request_ex>
}
 808ce94:	b007      	add	sp, #28
 808ce96:	f85d fb04 	ldr.w	pc, [sp], #4

0808ce9a <_ZN7TwoWire11requestFromEhjh>:
{
 808ce9a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808ce9c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808ce9e:	f88d 1000 	strb.w	r1, [sp]
 808cea2:	f04f 0164 	mov.w	r1, #100	; 0x64
 808cea6:	bf18      	it	ne
 808cea8:	2301      	movne	r3, #1
 808ceaa:	9103      	str	r1, [sp, #12]
 808ceac:	4669      	mov	r1, sp
    size_ = size;
 808ceae:	9201      	str	r2, [sp, #4]
 808ceb0:	f88d 3008 	strb.w	r3, [sp, #8]
 808ceb4:	f7ff ffda 	bl	808ce6c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 808ceb8:	b005      	add	sp, #20
 808ceba:	f85d fb04 	ldr.w	pc, [sp], #4

0808cebe <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 808cebe:	2301      	movs	r3, #1
 808cec0:	f7ff bfeb 	b.w	808ce9a <_ZN7TwoWire11requestFromEhjh>

0808cec4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 808cec4:	2200      	movs	r2, #0
 808cec6:	7c00      	ldrb	r0, [r0, #16]
 808cec8:	f7fd bc92 	b.w	808a7f0 <hal_i2c_begin_transmission>

0808cecc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 808cecc:	b2c9      	uxtb	r1, r1
 808cece:	f7ff bff9 	b.w	808cec4 <_ZN7TwoWire17beginTransmissionEh>

0808ced2 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 808ced2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808ced4:	2200      	movs	r2, #0
 808ced6:	460b      	mov	r3, r1
 808ced8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808cedc:	2214      	movs	r2, #20
 808cede:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 808cee2:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 808cee4:	7809      	ldrb	r1, [r1, #0]
    };
 808cee6:	9203      	str	r2, [sp, #12]
 808cee8:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808ceea:	7a1b      	ldrb	r3, [r3, #8]
    };
 808ceec:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 808ceee:	7c00      	ldrb	r0, [r0, #16]
 808cef0:	aa01      	add	r2, sp, #4
 808cef2:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808cef6:	9305      	str	r3, [sp, #20]
 808cef8:	f7fd fc7a 	bl	808a7f0 <hal_i2c_begin_transmission>
}
 808cefc:	b007      	add	sp, #28
 808cefe:	f85d fb04 	ldr.w	pc, [sp], #4

0808cf02 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 808cf02:	2200      	movs	r2, #0
 808cf04:	7c00      	ldrb	r0, [r0, #16]
 808cf06:	f7fd bc7b 	b.w	808a800 <hal_i2c_end_transmission>

0808cf0a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 808cf0a:	2101      	movs	r1, #1
 808cf0c:	f7ff bff9 	b.w	808cf02 <_ZN7TwoWire15endTransmissionEh>

0808cf10 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
 808cf10:	2100      	movs	r1, #0
 808cf12:	7c00      	ldrb	r0, [r0, #16]
 808cf14:	f7fd bca4 	b.w	808a860 <hal_i2c_is_enabled>

0808cf18 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808cf18:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 808cf1a:	2100      	movs	r1, #0
 808cf1c:	7c00      	ldrb	r0, [r0, #16]
 808cf1e:	f7fd fcaf 	bl	808a880 <hal_i2c_lock>
}
 808cf22:	fab0 f080 	clz	r0, r0
 808cf26:	0940      	lsrs	r0, r0, #5
 808cf28:	bd08      	pop	{r3, pc}

0808cf2a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808cf2a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 808cf2c:	2100      	movs	r1, #0
 808cf2e:	7c00      	ldrb	r0, [r0, #16]
 808cf30:	f7fd fcae 	bl	808a890 <hal_i2c_unlock>
}
 808cf34:	fab0 f080 	clz	r0, r0
 808cf38:	0940      	lsrs	r0, r0, #5
 808cf3a:	bd08      	pop	{r3, pc}

0808cf3c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808cf3c:	2300      	movs	r3, #0
 808cf3e:	6840      	ldr	r0, [r0, #4]
 808cf40:	461a      	mov	r2, r3
 808cf42:	f7fd bdc5 	b.w	808aad0 <network_connect>

0808cf46 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808cf46:	2200      	movs	r2, #0
 808cf48:	2102      	movs	r1, #2
 808cf4a:	6840      	ldr	r0, [r0, #4]
 808cf4c:	f7fd bdd0 	b.w	808aaf0 <network_disconnect>

0808cf50 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808cf50:	2200      	movs	r2, #0
 808cf52:	6840      	ldr	r0, [r0, #4]
 808cf54:	4611      	mov	r1, r2
 808cf56:	f7fd bdc3 	b.w	808aae0 <network_connecting>

0808cf5a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808cf5a:	2200      	movs	r2, #0
 808cf5c:	6840      	ldr	r0, [r0, #4]
 808cf5e:	4611      	mov	r1, r2
 808cf60:	f7fd bdce 	b.w	808ab00 <network_ready>

0808cf64 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808cf64:	2300      	movs	r3, #0
 808cf66:	6840      	ldr	r0, [r0, #4]
 808cf68:	461a      	mov	r2, r3
 808cf6a:	4619      	mov	r1, r3
 808cf6c:	f7fd bdd0 	b.w	808ab10 <network_on>

0808cf70 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808cf70:	2300      	movs	r3, #0
 808cf72:	6840      	ldr	r0, [r0, #4]
 808cf74:	461a      	mov	r2, r3
 808cf76:	4619      	mov	r1, r3
 808cf78:	f7fd bdd2 	b.w	808ab20 <network_off>

0808cf7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808cf7c:	2200      	movs	r2, #0
 808cf7e:	6840      	ldr	r0, [r0, #4]
 808cf80:	f081 0101 	eor.w	r1, r1, #1
 808cf84:	f7fd bdd4 	b.w	808ab30 <network_listen>

0808cf88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808cf88:	2200      	movs	r2, #0
 808cf8a:	6840      	ldr	r0, [r0, #4]
 808cf8c:	f7fd bde0 	b.w	808ab50 <network_set_listen_timeout>

0808cf90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808cf90:	2200      	movs	r2, #0
 808cf92:	6840      	ldr	r0, [r0, #4]
 808cf94:	4611      	mov	r1, r2
 808cf96:	f7fd bde3 	b.w	808ab60 <network_get_listen_timeout>

0808cf9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808cf9a:	2200      	movs	r2, #0
 808cf9c:	6840      	ldr	r0, [r0, #4]
 808cf9e:	4611      	mov	r1, r2
 808cfa0:	f7fd bdce 	b.w	808ab40 <network_listening>

0808cfa4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808cfa4:	b570      	push	{r4, r5, r6, lr}
 808cfa6:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808cfa8:	2600      	movs	r6, #0
 808cfaa:	b086      	sub	sp, #24
 808cfac:	4604      	mov	r4, r0
    IPAddress addr;
 808cfae:	a804      	add	r0, sp, #16
 808cfb0:	f7ff fcfa 	bl	808c9a8 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cfb4:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808cfb6:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cfb8:	f001 fbdb 	bl	808e772 <strlen>
 808cfbc:	4b0a      	ldr	r3, [pc, #40]	; (808cfe8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 808cfbe:	9600      	str	r6, [sp, #0]
 808cfc0:	b281      	uxth	r1, r0
 808cfc2:	685b      	ldr	r3, [r3, #4]
 808cfc4:	4628      	mov	r0, r5
 808cfc6:	aa03      	add	r2, sp, #12
 808cfc8:	f7fd fcc2 	bl	808a950 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808cfcc:	b130      	cbz	r0, 808cfdc <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808cfce:	4631      	mov	r1, r6
 808cfd0:	4620      	mov	r0, r4
 808cfd2:	f7ff fcf9 	bl	808c9c8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808cfd6:	4620      	mov	r0, r4
 808cfd8:	b006      	add	sp, #24
 808cfda:	bd70      	pop	{r4, r5, r6, pc}
 808cfdc:	4620      	mov	r0, r4
 808cfde:	a903      	add	r1, sp, #12
 808cfe0:	f7ff fcea 	bl	808c9b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808cfe4:	e7f7      	b.n	808cfd6 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808cfe6:	bf00      	nop
 808cfe8:	200011b4 	.word	0x200011b4

0808cfec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808cfec:	4b02      	ldr	r3, [pc, #8]	; (808cff8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808cfee:	4a03      	ldr	r2, [pc, #12]	; (808cffc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808cff0:	601a      	str	r2, [r3, #0]
 808cff2:	2200      	movs	r2, #0
 808cff4:	605a      	str	r2, [r3, #4]

} // spark
 808cff6:	4770      	bx	lr
 808cff8:	20001304 	.word	0x20001304
 808cffc:	08092e54 	.word	0x08092e54

0808d000 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
 808d000:	4770      	bx	lr

0808d002 <_ZN5spark16JSONBufferWriterD0Ev>:
 808d002:	b510      	push	{r4, lr}
 808d004:	4604      	mov	r4, r0
 808d006:	2114      	movs	r1, #20
 808d008:	f000 fa15 	bl	808d436 <_ZdlPvj>
 808d00c:	4620      	mov	r0, r4
 808d00e:	bd10      	pop	{r4, pc}

0808d010 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808d010:	b538      	push	{r3, r4, r5, lr}
 808d012:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 808d014:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 808d018:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808d01a:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 808d01c:	d207      	bcs.n	808d02e <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 808d01e:	1ad2      	subs	r2, r2, r3
 808d020:	6880      	ldr	r0, [r0, #8]
 808d022:	42aa      	cmp	r2, r5
 808d024:	bf28      	it	cs
 808d026:	462a      	movcs	r2, r5
 808d028:	4418      	add	r0, r3
 808d02a:	f001 fb2d 	bl	808e688 <memcpy>
    }
    n_ += size;
 808d02e:	6922      	ldr	r2, [r4, #16]
 808d030:	442a      	add	r2, r5
 808d032:	6122      	str	r2, [r4, #16]
}
 808d034:	bd38      	pop	{r3, r4, r5, pc}

0808d036 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 808d036:	b40e      	push	{r1, r2, r3}
 808d038:	b517      	push	{r0, r1, r2, r4, lr}
 808d03a:	4604      	mov	r4, r0
 808d03c:	ab05      	add	r3, sp, #20
 808d03e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808d042:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
 808d044:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808d046:	6903      	ldr	r3, [r0, #16]
 808d048:	6880      	ldr	r0, [r0, #8]
 808d04a:	428b      	cmp	r3, r1
 808d04c:	bf34      	ite	cc
 808d04e:	1ac9      	subcc	r1, r1, r3
 808d050:	2100      	movcs	r1, #0
 808d052:	4418      	add	r0, r3
 808d054:	9b01      	ldr	r3, [sp, #4]
 808d056:	f7fd fe0b 	bl	808ac70 <vsnprintf>
    va_end(args);
    n_ += n;
 808d05a:	6923      	ldr	r3, [r4, #16]
 808d05c:	4403      	add	r3, r0
 808d05e:	6123      	str	r3, [r4, #16]
}
 808d060:	b003      	add	sp, #12
 808d062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808d066:	b003      	add	sp, #12
 808d068:	4770      	bx	lr

0808d06a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808d06a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 808d06c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 808d06e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 808d072:	2201      	movs	r2, #1
 808d074:	689b      	ldr	r3, [r3, #8]
 808d076:	f10d 0107 	add.w	r1, sp, #7
 808d07a:	4798      	blx	r3
}
 808d07c:	b003      	add	sp, #12
 808d07e:	f85d fb04 	ldr.w	pc, [sp], #4

0808d082 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 808d082:	b510      	push	{r4, lr}
    write('}');
 808d084:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 808d086:	4604      	mov	r4, r0
    write('}');
 808d088:	f7ff ffef 	bl	808d06a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 808d08c:	2301      	movs	r3, #1
}
 808d08e:	4620      	mov	r0, r4
    state_ = NEXT;
 808d090:	7123      	strb	r3, [r4, #4]
}
 808d092:	bd10      	pop	{r4, pc}

0808d094 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
 808d094:	b508      	push	{r3, lr}
    switch (state_) {
 808d096:	7903      	ldrb	r3, [r0, #4]
 808d098:	2b01      	cmp	r3, #1
 808d09a:	d002      	beq.n	808d0a2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 808d09c:	2b02      	cmp	r3, #2
 808d09e:	d004      	beq.n	808d0aa <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
 808d0a0:	bd08      	pop	{r3, pc}
        write(',');
 808d0a2:	212c      	movs	r1, #44	; 0x2c
        write(':');
 808d0a4:	f7ff ffe1 	bl	808d06a <_ZN5spark10JSONWriter5writeEc>
}
 808d0a8:	e7fa      	b.n	808d0a0 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 808d0aa:	213a      	movs	r1, #58	; 0x3a
 808d0ac:	e7fa      	b.n	808d0a4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

0808d0ae <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 808d0ae:	b510      	push	{r4, lr}
 808d0b0:	4604      	mov	r4, r0
    writeSeparator();
 808d0b2:	f7ff ffef 	bl	808d094 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 808d0b6:	4620      	mov	r0, r4
 808d0b8:	217b      	movs	r1, #123	; 0x7b
 808d0ba:	f7ff ffd6 	bl	808d06a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 808d0be:	2300      	movs	r3, #0
}
 808d0c0:	4620      	mov	r0, r4
    state_ = BEGIN;
 808d0c2:	7123      	strb	r3, [r4, #4]
}
 808d0c4:	bd10      	pop	{r4, pc}
	...

0808d0c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808d0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d0cc:	460d      	mov	r5, r1
 808d0ce:	4617      	mov	r7, r2
    write('"');
 808d0d0:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808d0d2:	4604      	mov	r4, r0
    write('"');
 808d0d4:	f7ff ffc9 	bl	808d06a <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
 808d0d8:	4629      	mov	r1, r5
                printf("u%04x", (unsigned)c);
 808d0da:	f8df 8098 	ldr.w	r8, [pc, #152]	; 808d174 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
    const char* const end = str + size;
 808d0de:	442f      	add	r7, r5
    while (s != end) {
 808d0e0:	42bd      	cmp	r5, r7
 808d0e2:	462a      	mov	r2, r5
 808d0e4:	d038      	beq.n	808d158 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
 808d0e6:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808d0ea:	2e22      	cmp	r6, #34	; 0x22
 808d0ec:	d003      	beq.n	808d0f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 808d0ee:	2e5c      	cmp	r6, #92	; 0x5c
 808d0f0:	d001      	beq.n	808d0f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
 808d0f2:	2e1f      	cmp	r6, #31
 808d0f4:	d8f4      	bhi.n	808d0e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 808d0f6:	6823      	ldr	r3, [r4, #0]
 808d0f8:	1a52      	subs	r2, r2, r1
 808d0fa:	4620      	mov	r0, r4
 808d0fc:	689b      	ldr	r3, [r3, #8]
 808d0fe:	4798      	blx	r3
            write('\\');
 808d100:	215c      	movs	r1, #92	; 0x5c
 808d102:	4620      	mov	r0, r4
 808d104:	f7ff ffb1 	bl	808d06a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 808d108:	2e0d      	cmp	r6, #13
 808d10a:	d80a      	bhi.n	808d122 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
 808d10c:	2e07      	cmp	r6, #7
 808d10e:	d91c      	bls.n	808d14a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 808d110:	f1a6 0308 	sub.w	r3, r6, #8
 808d114:	2b05      	cmp	r3, #5
 808d116:	d818      	bhi.n	808d14a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
 808d118:	e8df f003 	tbb	[pc, r3]
 808d11c:	17110f0d 	.word	0x17110f0d
 808d120:	1513      	.short	0x1513
 808d122:	2e22      	cmp	r6, #34	; 0x22
 808d124:	d001      	beq.n	808d12a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808d126:	2e5c      	cmp	r6, #92	; 0x5c
 808d128:	d10f      	bne.n	808d14a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
 808d12a:	4631      	mov	r1, r6
                write('b');
 808d12c:	4620      	mov	r0, r4
 808d12e:	f7ff ff9c 	bl	808d06a <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
 808d132:	4629      	mov	r1, r5
    while (s != end) {
 808d134:	e7d4      	b.n	808d0e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 808d136:	2162      	movs	r1, #98	; 0x62
 808d138:	e7f8      	b.n	808d12c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
 808d13a:	2174      	movs	r1, #116	; 0x74
 808d13c:	e7f6      	b.n	808d12c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
 808d13e:	216e      	movs	r1, #110	; 0x6e
 808d140:	e7f4      	b.n	808d12c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
 808d142:	2166      	movs	r1, #102	; 0x66
 808d144:	e7f2      	b.n	808d12c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
 808d146:	2172      	movs	r1, #114	; 0x72
 808d148:	e7f0      	b.n	808d12c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
 808d14a:	6823      	ldr	r3, [r4, #0]
 808d14c:	4632      	mov	r2, r6
 808d14e:	4641      	mov	r1, r8
 808d150:	4620      	mov	r0, r4
 808d152:	68db      	ldr	r3, [r3, #12]
 808d154:	4798      	blx	r3
                break;
 808d156:	e7ec      	b.n	808d132 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
    if (s != str) {
 808d158:	428d      	cmp	r5, r1
 808d15a:	d004      	beq.n	808d166 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
 808d15c:	6823      	ldr	r3, [r4, #0]
 808d15e:	4620      	mov	r0, r4
 808d160:	689b      	ldr	r3, [r3, #8]
 808d162:	1a6a      	subs	r2, r5, r1
 808d164:	4798      	blx	r3
    write('"');
 808d166:	2122      	movs	r1, #34	; 0x22
 808d168:	4620      	mov	r0, r4
 808d16a:	f7ff ff7e 	bl	808d06a <_ZN5spark10JSONWriter5writeEc>
}
 808d16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808d172:	bf00      	nop
 808d174:	08092e80 	.word	0x08092e80

0808d178 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808d178:	b570      	push	{r4, r5, r6, lr}
 808d17a:	4604      	mov	r4, r0
 808d17c:	460d      	mov	r5, r1
 808d17e:	4616      	mov	r6, r2
    writeSeparator();
 808d180:	f7ff ff88 	bl	808d094 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 808d184:	4620      	mov	r0, r4
 808d186:	4632      	mov	r2, r6
 808d188:	4629      	mov	r1, r5
 808d18a:	f7ff ff9d 	bl	808d0c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 808d18e:	2302      	movs	r3, #2
}
 808d190:	4620      	mov	r0, r4
    state_ = VALUE;
 808d192:	7123      	strb	r3, [r4, #4]
}
 808d194:	bd70      	pop	{r4, r5, r6, pc}

0808d196 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808d196:	b570      	push	{r4, r5, r6, lr}
 808d198:	4604      	mov	r4, r0
 808d19a:	460d      	mov	r5, r1
 808d19c:	4616      	mov	r6, r2
    writeSeparator();
 808d19e:	f7ff ff79 	bl	808d094 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 808d1a2:	4620      	mov	r0, r4
 808d1a4:	4632      	mov	r2, r6
 808d1a6:	4629      	mov	r1, r5
 808d1a8:	f7ff ff8e 	bl	808d0c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 808d1ac:	2301      	movs	r3, #1
}
 808d1ae:	4620      	mov	r0, r4
    state_ = NEXT;
 808d1b0:	7123      	strb	r3, [r4, #4]
}
 808d1b2:	bd70      	pop	{r4, r5, r6, pc}

0808d1b4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 808d1b4:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 808d1b6:	b570      	push	{r4, r5, r6, lr}
 808d1b8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 808d1ba:	d901      	bls.n	808d1c0 <pinAvailable+0xc>
    return false;
 808d1bc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 808d1be:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808d1c0:	f1a0 030d 	sub.w	r3, r0, #13
 808d1c4:	2b02      	cmp	r3, #2
 808d1c6:	d90b      	bls.n	808d1e0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 808d1c8:	2801      	cmp	r0, #1
 808d1ca:	d826      	bhi.n	808d21a <pinAvailable+0x66>
 808d1cc:	f000 f8de 	bl	808d38c <_Z19__fetch_global_Wirev>
 808d1d0:	2100      	movs	r1, #0
 808d1d2:	7c00      	ldrb	r0, [r0, #16]
 808d1d4:	f7fd fb44 	bl	808a860 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808d1d8:	f080 0001 	eor.w	r0, r0, #1
 808d1dc:	b2c0      	uxtb	r0, r0
 808d1de:	e7ee      	b.n	808d1be <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 808d1e0:	4e13      	ldr	r6, [pc, #76]	; (808d230 <pinAvailable+0x7c>)
 808d1e2:	7831      	ldrb	r1, [r6, #0]
 808d1e4:	f3bf 8f5b 	dmb	ish
 808d1e8:	f011 0501 	ands.w	r5, r1, #1
 808d1ec:	d10f      	bne.n	808d20e <pinAvailable+0x5a>
 808d1ee:	4630      	mov	r0, r6
 808d1f0:	f7f2 ff71 	bl	80800d6 <__cxa_guard_acquire>
 808d1f4:	b158      	cbz	r0, 808d20e <pinAvailable+0x5a>
 808d1f6:	4629      	mov	r1, r5
 808d1f8:	480e      	ldr	r0, [pc, #56]	; (808d234 <pinAvailable+0x80>)
 808d1fa:	f7fd fed0 	bl	808af9e <_ZN8SPIClassC1E19hal_spi_interface_t>
 808d1fe:	4630      	mov	r0, r6
 808d200:	f7f2 ff6e 	bl	80800e0 <__cxa_guard_release>
 808d204:	4a0c      	ldr	r2, [pc, #48]	; (808d238 <pinAvailable+0x84>)
 808d206:	490d      	ldr	r1, [pc, #52]	; (808d23c <pinAvailable+0x88>)
 808d208:	480a      	ldr	r0, [pc, #40]	; (808d234 <pinAvailable+0x80>)
 808d20a:	f000 f90f 	bl	808d42c <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808d20e:	4b09      	ldr	r3, [pc, #36]	; (808d234 <pinAvailable+0x80>)
 808d210:	7818      	ldrb	r0, [r3, #0]
 808d212:	f7fd fb7d 	bl	808a910 <hal_spi_is_enabled>
 808d216:	2800      	cmp	r0, #0
 808d218:	d1d0      	bne.n	808d1bc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808d21a:	3c12      	subs	r4, #18
 808d21c:	2c01      	cmp	r4, #1
 808d21e:	d805      	bhi.n	808d22c <pinAvailable+0x78>
 808d220:	f7ff fda4 	bl	808cd6c <_Z22__fetch_global_Serial1v>
 808d224:	7c00      	ldrb	r0, [r0, #16]
 808d226:	f7fd fac3 	bl	808a7b0 <hal_usart_is_enabled>
 808d22a:	e7d5      	b.n	808d1d8 <pinAvailable+0x24>
  return true; // 'pin' is available
 808d22c:	2001      	movs	r0, #1
 808d22e:	e7c6      	b.n	808d1be <pinAvailable+0xa>
 808d230:	20000ccc 	.word	0x20000ccc
 808d234:	20000cd0 	.word	0x20000cd0
 808d238:	200002c0 	.word	0x200002c0
 808d23c:	080884e9 	.word	0x080884e9

0808d240 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808d240:	282e      	cmp	r0, #46	; 0x2e
{
 808d242:	b538      	push	{r3, r4, r5, lr}
 808d244:	4604      	mov	r4, r0
 808d246:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808d248:	d80a      	bhi.n	808d260 <pinMode+0x20>
 808d24a:	29ff      	cmp	r1, #255	; 0xff
 808d24c:	d008      	beq.n	808d260 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 808d24e:	f7ff ffb1 	bl	808d1b4 <pinAvailable>
 808d252:	b128      	cbz	r0, 808d260 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 808d254:	4629      	mov	r1, r5
 808d256:	4620      	mov	r0, r4
}
 808d258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 808d25c:	f7fd b9d0 	b.w	808a600 <HAL_Pin_Mode>
}
 808d260:	bd38      	pop	{r3, r4, r5, pc}

0808d262 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808d262:	b538      	push	{r3, r4, r5, lr}
 808d264:	4604      	mov	r4, r0
 808d266:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808d268:	f7fd f9d2 	bl	808a610 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808d26c:	28ff      	cmp	r0, #255	; 0xff
 808d26e:	d010      	beq.n	808d292 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 808d270:	2806      	cmp	r0, #6
 808d272:	d804      	bhi.n	808d27e <digitalWrite+0x1c>
 808d274:	234d      	movs	r3, #77	; 0x4d
 808d276:	fa23 f000 	lsr.w	r0, r3, r0
 808d27a:	07c3      	lsls	r3, r0, #31
 808d27c:	d409      	bmi.n	808d292 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808d27e:	4620      	mov	r0, r4
 808d280:	f7ff ff98 	bl	808d1b4 <pinAvailable>
 808d284:	b128      	cbz	r0, 808d292 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808d286:	4629      	mov	r1, r5
 808d288:	4620      	mov	r0, r4
}
 808d28a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 808d28e:	f7fd b9c7 	b.w	808a620 <HAL_GPIO_Write>
}
 808d292:	bd38      	pop	{r3, r4, r5, pc}

0808d294 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 808d294:	b510      	push	{r4, lr}
 808d296:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808d298:	f7fd f9ba 	bl	808a610 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 808d29c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 808d29e:	b2db      	uxtb	r3, r3
 808d2a0:	2b01      	cmp	r3, #1
 808d2a2:	d908      	bls.n	808d2b6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 808d2a4:	4620      	mov	r0, r4
 808d2a6:	f7ff ff85 	bl	808d1b4 <pinAvailable>
 808d2aa:	b120      	cbz	r0, 808d2b6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808d2ac:	4620      	mov	r0, r4
}
 808d2ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 808d2b2:	f7fd b9bd 	b.w	808a630 <HAL_GPIO_Read>
}
 808d2b6:	2000      	movs	r0, #0
 808d2b8:	bd10      	pop	{r4, pc}

0808d2ba <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808d2ba:	b510      	push	{r4, lr}
 808d2bc:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808d2be:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808d2c0:	bf9c      	itt	ls
 808d2c2:	340a      	addls	r4, #10
 808d2c4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808d2c6:	4620      	mov	r0, r4
 808d2c8:	f7ff ff74 	bl	808d1b4 <pinAvailable>
 808d2cc:	b150      	cbz	r0, 808d2e4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808d2ce:	2103      	movs	r1, #3
 808d2d0:	4620      	mov	r0, r4
 808d2d2:	f7fd f98d 	bl	808a5f0 <HAL_Validate_Pin_Function>
 808d2d6:	2803      	cmp	r0, #3
 808d2d8:	d104      	bne.n	808d2e4 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 808d2da:	4620      	mov	r0, r4
}
 808d2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 808d2e0:	f7fd b9c6 	b.w	808a670 <hal_adc_read>
}
 808d2e4:	2000      	movs	r0, #0
 808d2e6:	bd10      	pop	{r4, pc}

0808d2e8 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 808d2e8:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808d2ea:	4c08      	ldr	r4, [pc, #32]	; (808d30c <_Z21__fetch_global_EEPROMv+0x24>)
 808d2ec:	7823      	ldrb	r3, [r4, #0]
 808d2ee:	f3bf 8f5b 	dmb	ish
 808d2f2:	07db      	lsls	r3, r3, #31
 808d2f4:	d408      	bmi.n	808d308 <_Z21__fetch_global_EEPROMv+0x20>
 808d2f6:	4620      	mov	r0, r4
 808d2f8:	f7f2 feed 	bl	80800d6 <__cxa_guard_acquire>
 808d2fc:	b120      	cbz	r0, 808d308 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808d2fe:	f7fd f9d7 	bl	808a6b0 <HAL_EEPROM_Init>
 808d302:	4620      	mov	r0, r4
 808d304:	f7f2 feec 	bl	80800e0 <__cxa_guard_release>
	return eeprom;
}
 808d308:	4801      	ldr	r0, [pc, #4]	; (808d310 <_Z21__fetch_global_EEPROMv+0x28>)
 808d30a:	bd10      	pop	{r4, pc}
 808d30c:	20001310 	.word	0x20001310
 808d310:	20001314 	.word	0x20001314

0808d314 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808d314:	2300      	movs	r3, #0
 808d316:	b513      	push	{r0, r1, r4, lr}
 808d318:	4c07      	ldr	r4, [pc, #28]	; (808d338 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808d31a:	461a      	mov	r2, r3
 808d31c:	4619      	mov	r1, r3
 808d31e:	4620      	mov	r0, r4
 808d320:	9300      	str	r3, [sp, #0]
 808d322:	f7ff fb63 	bl	808c9ec <_ZN9IPAddressC1Ehhhh>
 808d326:	4620      	mov	r0, r4
 808d328:	4a04      	ldr	r2, [pc, #16]	; (808d33c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808d32a:	4905      	ldr	r1, [pc, #20]	; (808d340 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808d32c:	b002      	add	sp, #8
 808d32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808d332:	f000 b87b 	b.w	808d42c <__aeabi_atexit>
 808d336:	bf00      	nop
 808d338:	20001318 	.word	0x20001318
 808d33c:	200002c0 	.word	0x200002c0
 808d340:	0808c965 	.word	0x0808c965

0808d344 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 808d344:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 808d346:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 808d348:	2520      	movs	r5, #32
 808d34a:	8043      	strh	r3, [r0, #2]
 808d34c:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d34e:	4e08      	ldr	r6, [pc, #32]	; (808d370 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 808d350:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 808d352:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d354:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 808d356:	6085      	str	r5, [r0, #8]
 808d358:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d35a:	4628      	mov	r0, r5
 808d35c:	f000 f86d 	bl	808d43a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d360:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808d362:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808d364:	4628      	mov	r0, r5
 808d366:	f000 f868 	bl	808d43a <_ZnajRKSt9nothrow_t>
	};
 808d36a:	60e0      	str	r0, [r4, #12]

	return config;
}
 808d36c:	4620      	mov	r0, r4
 808d36e:	bd70      	pop	{r4, r5, r6, pc}
 808d370:	08092ea0 	.word	0x08092ea0

0808d374 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 808d374:	b510      	push	{r4, lr}
 808d376:	4604      	mov	r4, r0
	return defaultWireConfig();
 808d378:	f7ff ffe4 	bl	808d344 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 808d37c:	4620      	mov	r0, r4
 808d37e:	bd10      	pop	{r4, pc}

0808d380 <_Z18acquireWire3Bufferv>:
 808d380:	b510      	push	{r4, lr}
 808d382:	4604      	mov	r4, r0
 808d384:	f7ff ffde 	bl	808d344 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 808d388:	4620      	mov	r0, r4
 808d38a:	bd10      	pop	{r4, pc}

0808d38c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 808d38c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808d38e:	4d0f      	ldr	r5, [pc, #60]	; (808d3cc <_Z19__fetch_global_Wirev+0x40>)
{
 808d390:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808d392:	7829      	ldrb	r1, [r5, #0]
 808d394:	f3bf 8f5b 	dmb	ish
 808d398:	f011 0401 	ands.w	r4, r1, #1
 808d39c:	d113      	bne.n	808d3c6 <_Z19__fetch_global_Wirev+0x3a>
 808d39e:	4628      	mov	r0, r5
 808d3a0:	f7f2 fe99 	bl	80800d6 <__cxa_guard_acquire>
 808d3a4:	b178      	cbz	r0, 808d3c6 <_Z19__fetch_global_Wirev+0x3a>
 808d3a6:	a801      	add	r0, sp, #4
 808d3a8:	f7ff ffe4 	bl	808d374 <_Z17acquireWireBufferv>
 808d3ac:	4621      	mov	r1, r4
 808d3ae:	aa01      	add	r2, sp, #4
 808d3b0:	4807      	ldr	r0, [pc, #28]	; (808d3d0 <_Z19__fetch_global_Wirev+0x44>)
 808d3b2:	f7ff fd43 	bl	808ce3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808d3b6:	4628      	mov	r0, r5
 808d3b8:	f7f2 fe92 	bl	80800e0 <__cxa_guard_release>
 808d3bc:	4a05      	ldr	r2, [pc, #20]	; (808d3d4 <_Z19__fetch_global_Wirev+0x48>)
 808d3be:	4906      	ldr	r1, [pc, #24]	; (808d3d8 <_Z19__fetch_global_Wirev+0x4c>)
 808d3c0:	4803      	ldr	r0, [pc, #12]	; (808d3d0 <_Z19__fetch_global_Wirev+0x44>)
 808d3c2:	f000 f833 	bl	808d42c <__aeabi_atexit>
	return wire;
}
 808d3c6:	4802      	ldr	r0, [pc, #8]	; (808d3d0 <_Z19__fetch_global_Wirev+0x44>)
 808d3c8:	b007      	add	sp, #28
 808d3ca:	bd30      	pop	{r4, r5, pc}
 808d3cc:	20001320 	.word	0x20001320
 808d3d0:	20001328 	.word	0x20001328
 808d3d4:	200002c0 	.word	0x200002c0
 808d3d8:	0808cde5 	.word	0x0808cde5

0808d3dc <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808d3dc:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808d3de:	4c0f      	ldr	r4, [pc, #60]	; (808d41c <_Z20__fetch_global_Wire3v+0x40>)
{
 808d3e0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808d3e2:	7823      	ldrb	r3, [r4, #0]
 808d3e4:	f3bf 8f5b 	dmb	ish
 808d3e8:	07db      	lsls	r3, r3, #31
 808d3ea:	d413      	bmi.n	808d414 <_Z20__fetch_global_Wire3v+0x38>
 808d3ec:	4620      	mov	r0, r4
 808d3ee:	f7f2 fe72 	bl	80800d6 <__cxa_guard_acquire>
 808d3f2:	b178      	cbz	r0, 808d414 <_Z20__fetch_global_Wire3v+0x38>
 808d3f4:	a801      	add	r0, sp, #4
 808d3f6:	f7ff ffc3 	bl	808d380 <_Z18acquireWire3Bufferv>
 808d3fa:	2102      	movs	r1, #2
 808d3fc:	aa01      	add	r2, sp, #4
 808d3fe:	4808      	ldr	r0, [pc, #32]	; (808d420 <_Z20__fetch_global_Wire3v+0x44>)
 808d400:	f7ff fd1c 	bl	808ce3c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808d404:	4620      	mov	r0, r4
 808d406:	f7f2 fe6b 	bl	80800e0 <__cxa_guard_release>
 808d40a:	4a06      	ldr	r2, [pc, #24]	; (808d424 <_Z20__fetch_global_Wire3v+0x48>)
 808d40c:	4906      	ldr	r1, [pc, #24]	; (808d428 <_Z20__fetch_global_Wire3v+0x4c>)
 808d40e:	4804      	ldr	r0, [pc, #16]	; (808d420 <_Z20__fetch_global_Wire3v+0x44>)
 808d410:	f000 f80c 	bl	808d42c <__aeabi_atexit>
	return wire;
}
 808d414:	4802      	ldr	r0, [pc, #8]	; (808d420 <_Z20__fetch_global_Wire3v+0x44>)
 808d416:	b006      	add	sp, #24
 808d418:	bd10      	pop	{r4, pc}
 808d41a:	bf00      	nop
 808d41c:	20001324 	.word	0x20001324
 808d420:	2000133c 	.word	0x2000133c
 808d424:	200002c0 	.word	0x200002c0
 808d428:	0808cde5 	.word	0x0808cde5

0808d42c <__aeabi_atexit>:
 808d42c:	460b      	mov	r3, r1
 808d42e:	4601      	mov	r1, r0
 808d430:	4618      	mov	r0, r3
 808d432:	f001 b8f9 	b.w	808e628 <__cxa_atexit>

0808d436 <_ZdlPvj>:
 808d436:	f7f2 be4c 	b.w	80800d2 <_ZdlPv>

0808d43a <_ZnajRKSt9nothrow_t>:
 808d43a:	f7f2 be48 	b.w	80800ce <_Znaj>

0808d43e <_ZSt25__throw_bad_function_callv>:
 808d43e:	b508      	push	{r3, lr}
 808d440:	f7fd fc1e 	bl	808ac80 <abort>

0808d444 <nan>:
 808d444:	2000      	movs	r0, #0
 808d446:	4901      	ldr	r1, [pc, #4]	; (808d44c <nan+0x8>)
 808d448:	4770      	bx	lr
 808d44a:	bf00      	nop
 808d44c:	7ff80000 	.word	0x7ff80000

0808d450 <__aeabi_drsub>:
 808d450:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808d454:	e002      	b.n	808d45c <__adddf3>
 808d456:	bf00      	nop

0808d458 <__aeabi_dsub>:
 808d458:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808d45c <__adddf3>:
 808d45c:	b530      	push	{r4, r5, lr}
 808d45e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808d462:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808d466:	ea94 0f05 	teq	r4, r5
 808d46a:	bf08      	it	eq
 808d46c:	ea90 0f02 	teqeq	r0, r2
 808d470:	bf1f      	itttt	ne
 808d472:	ea54 0c00 	orrsne.w	ip, r4, r0
 808d476:	ea55 0c02 	orrsne.w	ip, r5, r2
 808d47a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808d47e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d482:	f000 80e2 	beq.w	808d64a <__adddf3+0x1ee>
 808d486:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808d48a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808d48e:	bfb8      	it	lt
 808d490:	426d      	neglt	r5, r5
 808d492:	dd0c      	ble.n	808d4ae <__adddf3+0x52>
 808d494:	442c      	add	r4, r5
 808d496:	ea80 0202 	eor.w	r2, r0, r2
 808d49a:	ea81 0303 	eor.w	r3, r1, r3
 808d49e:	ea82 0000 	eor.w	r0, r2, r0
 808d4a2:	ea83 0101 	eor.w	r1, r3, r1
 808d4a6:	ea80 0202 	eor.w	r2, r0, r2
 808d4aa:	ea81 0303 	eor.w	r3, r1, r3
 808d4ae:	2d36      	cmp	r5, #54	; 0x36
 808d4b0:	bf88      	it	hi
 808d4b2:	bd30      	pophi	{r4, r5, pc}
 808d4b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808d4b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808d4bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808d4c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808d4c4:	d002      	beq.n	808d4cc <__adddf3+0x70>
 808d4c6:	4240      	negs	r0, r0
 808d4c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d4cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808d4d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808d4d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808d4d8:	d002      	beq.n	808d4e0 <__adddf3+0x84>
 808d4da:	4252      	negs	r2, r2
 808d4dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808d4e0:	ea94 0f05 	teq	r4, r5
 808d4e4:	f000 80a7 	beq.w	808d636 <__adddf3+0x1da>
 808d4e8:	f1a4 0401 	sub.w	r4, r4, #1
 808d4ec:	f1d5 0e20 	rsbs	lr, r5, #32
 808d4f0:	db0d      	blt.n	808d50e <__adddf3+0xb2>
 808d4f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 808d4f6:	fa22 f205 	lsr.w	r2, r2, r5
 808d4fa:	1880      	adds	r0, r0, r2
 808d4fc:	f141 0100 	adc.w	r1, r1, #0
 808d500:	fa03 f20e 	lsl.w	r2, r3, lr
 808d504:	1880      	adds	r0, r0, r2
 808d506:	fa43 f305 	asr.w	r3, r3, r5
 808d50a:	4159      	adcs	r1, r3
 808d50c:	e00e      	b.n	808d52c <__adddf3+0xd0>
 808d50e:	f1a5 0520 	sub.w	r5, r5, #32
 808d512:	f10e 0e20 	add.w	lr, lr, #32
 808d516:	2a01      	cmp	r2, #1
 808d518:	fa03 fc0e 	lsl.w	ip, r3, lr
 808d51c:	bf28      	it	cs
 808d51e:	f04c 0c02 	orrcs.w	ip, ip, #2
 808d522:	fa43 f305 	asr.w	r3, r3, r5
 808d526:	18c0      	adds	r0, r0, r3
 808d528:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808d52c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d530:	d507      	bpl.n	808d542 <__adddf3+0xe6>
 808d532:	f04f 0e00 	mov.w	lr, #0
 808d536:	f1dc 0c00 	rsbs	ip, ip, #0
 808d53a:	eb7e 0000 	sbcs.w	r0, lr, r0
 808d53e:	eb6e 0101 	sbc.w	r1, lr, r1
 808d542:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808d546:	d31b      	bcc.n	808d580 <__adddf3+0x124>
 808d548:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808d54c:	d30c      	bcc.n	808d568 <__adddf3+0x10c>
 808d54e:	0849      	lsrs	r1, r1, #1
 808d550:	ea5f 0030 	movs.w	r0, r0, rrx
 808d554:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808d558:	f104 0401 	add.w	r4, r4, #1
 808d55c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808d560:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808d564:	f080 809a 	bcs.w	808d69c <__adddf3+0x240>
 808d568:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808d56c:	bf08      	it	eq
 808d56e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808d572:	f150 0000 	adcs.w	r0, r0, #0
 808d576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d57a:	ea41 0105 	orr.w	r1, r1, r5
 808d57e:	bd30      	pop	{r4, r5, pc}
 808d580:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808d584:	4140      	adcs	r0, r0
 808d586:	eb41 0101 	adc.w	r1, r1, r1
 808d58a:	3c01      	subs	r4, #1
 808d58c:	bf28      	it	cs
 808d58e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 808d592:	d2e9      	bcs.n	808d568 <__adddf3+0x10c>
 808d594:	f091 0f00 	teq	r1, #0
 808d598:	bf04      	itt	eq
 808d59a:	4601      	moveq	r1, r0
 808d59c:	2000      	moveq	r0, #0
 808d59e:	fab1 f381 	clz	r3, r1
 808d5a2:	bf08      	it	eq
 808d5a4:	3320      	addeq	r3, #32
 808d5a6:	f1a3 030b 	sub.w	r3, r3, #11
 808d5aa:	f1b3 0220 	subs.w	r2, r3, #32
 808d5ae:	da0c      	bge.n	808d5ca <__adddf3+0x16e>
 808d5b0:	320c      	adds	r2, #12
 808d5b2:	dd08      	ble.n	808d5c6 <__adddf3+0x16a>
 808d5b4:	f102 0c14 	add.w	ip, r2, #20
 808d5b8:	f1c2 020c 	rsb	r2, r2, #12
 808d5bc:	fa01 f00c 	lsl.w	r0, r1, ip
 808d5c0:	fa21 f102 	lsr.w	r1, r1, r2
 808d5c4:	e00c      	b.n	808d5e0 <__adddf3+0x184>
 808d5c6:	f102 0214 	add.w	r2, r2, #20
 808d5ca:	bfd8      	it	le
 808d5cc:	f1c2 0c20 	rsble	ip, r2, #32
 808d5d0:	fa01 f102 	lsl.w	r1, r1, r2
 808d5d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 808d5d8:	bfdc      	itt	le
 808d5da:	ea41 010c 	orrle.w	r1, r1, ip
 808d5de:	4090      	lslle	r0, r2
 808d5e0:	1ae4      	subs	r4, r4, r3
 808d5e2:	bfa2      	ittt	ge
 808d5e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808d5e8:	4329      	orrge	r1, r5
 808d5ea:	bd30      	popge	{r4, r5, pc}
 808d5ec:	ea6f 0404 	mvn.w	r4, r4
 808d5f0:	3c1f      	subs	r4, #31
 808d5f2:	da1c      	bge.n	808d62e <__adddf3+0x1d2>
 808d5f4:	340c      	adds	r4, #12
 808d5f6:	dc0e      	bgt.n	808d616 <__adddf3+0x1ba>
 808d5f8:	f104 0414 	add.w	r4, r4, #20
 808d5fc:	f1c4 0220 	rsb	r2, r4, #32
 808d600:	fa20 f004 	lsr.w	r0, r0, r4
 808d604:	fa01 f302 	lsl.w	r3, r1, r2
 808d608:	ea40 0003 	orr.w	r0, r0, r3
 808d60c:	fa21 f304 	lsr.w	r3, r1, r4
 808d610:	ea45 0103 	orr.w	r1, r5, r3
 808d614:	bd30      	pop	{r4, r5, pc}
 808d616:	f1c4 040c 	rsb	r4, r4, #12
 808d61a:	f1c4 0220 	rsb	r2, r4, #32
 808d61e:	fa20 f002 	lsr.w	r0, r0, r2
 808d622:	fa01 f304 	lsl.w	r3, r1, r4
 808d626:	ea40 0003 	orr.w	r0, r0, r3
 808d62a:	4629      	mov	r1, r5
 808d62c:	bd30      	pop	{r4, r5, pc}
 808d62e:	fa21 f004 	lsr.w	r0, r1, r4
 808d632:	4629      	mov	r1, r5
 808d634:	bd30      	pop	{r4, r5, pc}
 808d636:	f094 0f00 	teq	r4, #0
 808d63a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808d63e:	bf06      	itte	eq
 808d640:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808d644:	3401      	addeq	r4, #1
 808d646:	3d01      	subne	r5, #1
 808d648:	e74e      	b.n	808d4e8 <__adddf3+0x8c>
 808d64a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d64e:	bf18      	it	ne
 808d650:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d654:	d029      	beq.n	808d6aa <__adddf3+0x24e>
 808d656:	ea94 0f05 	teq	r4, r5
 808d65a:	bf08      	it	eq
 808d65c:	ea90 0f02 	teqeq	r0, r2
 808d660:	d005      	beq.n	808d66e <__adddf3+0x212>
 808d662:	ea54 0c00 	orrs.w	ip, r4, r0
 808d666:	bf04      	itt	eq
 808d668:	4619      	moveq	r1, r3
 808d66a:	4610      	moveq	r0, r2
 808d66c:	bd30      	pop	{r4, r5, pc}
 808d66e:	ea91 0f03 	teq	r1, r3
 808d672:	bf1e      	ittt	ne
 808d674:	2100      	movne	r1, #0
 808d676:	2000      	movne	r0, #0
 808d678:	bd30      	popne	{r4, r5, pc}
 808d67a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808d67e:	d105      	bne.n	808d68c <__adddf3+0x230>
 808d680:	0040      	lsls	r0, r0, #1
 808d682:	4149      	adcs	r1, r1
 808d684:	bf28      	it	cs
 808d686:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808d68a:	bd30      	pop	{r4, r5, pc}
 808d68c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808d690:	bf3c      	itt	cc
 808d692:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808d696:	bd30      	popcc	{r4, r5, pc}
 808d698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d69c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808d6a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808d6a4:	f04f 0000 	mov.w	r0, #0
 808d6a8:	bd30      	pop	{r4, r5, pc}
 808d6aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d6ae:	bf1a      	itte	ne
 808d6b0:	4619      	movne	r1, r3
 808d6b2:	4610      	movne	r0, r2
 808d6b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808d6b8:	bf1c      	itt	ne
 808d6ba:	460b      	movne	r3, r1
 808d6bc:	4602      	movne	r2, r0
 808d6be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808d6c2:	bf06      	itte	eq
 808d6c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808d6c8:	ea91 0f03 	teqeq	r1, r3
 808d6cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808d6d0:	bd30      	pop	{r4, r5, pc}
 808d6d2:	bf00      	nop

0808d6d4 <__aeabi_ui2d>:
 808d6d4:	f090 0f00 	teq	r0, #0
 808d6d8:	bf04      	itt	eq
 808d6da:	2100      	moveq	r1, #0
 808d6dc:	4770      	bxeq	lr
 808d6de:	b530      	push	{r4, r5, lr}
 808d6e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d6e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d6e8:	f04f 0500 	mov.w	r5, #0
 808d6ec:	f04f 0100 	mov.w	r1, #0
 808d6f0:	e750      	b.n	808d594 <__adddf3+0x138>
 808d6f2:	bf00      	nop

0808d6f4 <__aeabi_i2d>:
 808d6f4:	f090 0f00 	teq	r0, #0
 808d6f8:	bf04      	itt	eq
 808d6fa:	2100      	moveq	r1, #0
 808d6fc:	4770      	bxeq	lr
 808d6fe:	b530      	push	{r4, r5, lr}
 808d700:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d704:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d708:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808d70c:	bf48      	it	mi
 808d70e:	4240      	negmi	r0, r0
 808d710:	f04f 0100 	mov.w	r1, #0
 808d714:	e73e      	b.n	808d594 <__adddf3+0x138>
 808d716:	bf00      	nop

0808d718 <__aeabi_f2d>:
 808d718:	0042      	lsls	r2, r0, #1
 808d71a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808d71e:	ea4f 0131 	mov.w	r1, r1, rrx
 808d722:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808d726:	bf1f      	itttt	ne
 808d728:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808d72c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808d730:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808d734:	4770      	bxne	lr
 808d736:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808d73a:	bf08      	it	eq
 808d73c:	4770      	bxeq	lr
 808d73e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 808d742:	bf04      	itt	eq
 808d744:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 808d748:	4770      	bxeq	lr
 808d74a:	b530      	push	{r4, r5, lr}
 808d74c:	f44f 7460 	mov.w	r4, #896	; 0x380
 808d750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808d758:	e71c      	b.n	808d594 <__adddf3+0x138>
 808d75a:	bf00      	nop

0808d75c <__aeabi_ul2d>:
 808d75c:	ea50 0201 	orrs.w	r2, r0, r1
 808d760:	bf08      	it	eq
 808d762:	4770      	bxeq	lr
 808d764:	b530      	push	{r4, r5, lr}
 808d766:	f04f 0500 	mov.w	r5, #0
 808d76a:	e00a      	b.n	808d782 <__aeabi_l2d+0x16>

0808d76c <__aeabi_l2d>:
 808d76c:	ea50 0201 	orrs.w	r2, r0, r1
 808d770:	bf08      	it	eq
 808d772:	4770      	bxeq	lr
 808d774:	b530      	push	{r4, r5, lr}
 808d776:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808d77a:	d502      	bpl.n	808d782 <__aeabi_l2d+0x16>
 808d77c:	4240      	negs	r0, r0
 808d77e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d782:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d786:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d78a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808d78e:	f43f aed8 	beq.w	808d542 <__adddf3+0xe6>
 808d792:	f04f 0203 	mov.w	r2, #3
 808d796:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808d79a:	bf18      	it	ne
 808d79c:	3203      	addne	r2, #3
 808d79e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808d7a2:	bf18      	it	ne
 808d7a4:	3203      	addne	r2, #3
 808d7a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808d7aa:	f1c2 0320 	rsb	r3, r2, #32
 808d7ae:	fa00 fc03 	lsl.w	ip, r0, r3
 808d7b2:	fa20 f002 	lsr.w	r0, r0, r2
 808d7b6:	fa01 fe03 	lsl.w	lr, r1, r3
 808d7ba:	ea40 000e 	orr.w	r0, r0, lr
 808d7be:	fa21 f102 	lsr.w	r1, r1, r2
 808d7c2:	4414      	add	r4, r2
 808d7c4:	e6bd      	b.n	808d542 <__adddf3+0xe6>
 808d7c6:	bf00      	nop

0808d7c8 <__aeabi_dmul>:
 808d7c8:	b570      	push	{r4, r5, r6, lr}
 808d7ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808d7ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808d7d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808d7d6:	bf1d      	ittte	ne
 808d7d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808d7dc:	ea94 0f0c 	teqne	r4, ip
 808d7e0:	ea95 0f0c 	teqne	r5, ip
 808d7e4:	f000 f8de 	bleq	808d9a4 <__aeabi_dmul+0x1dc>
 808d7e8:	442c      	add	r4, r5
 808d7ea:	ea81 0603 	eor.w	r6, r1, r3
 808d7ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808d7f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808d7f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808d7fa:	bf18      	it	ne
 808d7fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808d800:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808d808:	d038      	beq.n	808d87c <__aeabi_dmul+0xb4>
 808d80a:	fba0 ce02 	umull	ip, lr, r0, r2
 808d80e:	f04f 0500 	mov.w	r5, #0
 808d812:	fbe1 e502 	umlal	lr, r5, r1, r2
 808d816:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808d81a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808d81e:	f04f 0600 	mov.w	r6, #0
 808d822:	fbe1 5603 	umlal	r5, r6, r1, r3
 808d826:	f09c 0f00 	teq	ip, #0
 808d82a:	bf18      	it	ne
 808d82c:	f04e 0e01 	orrne.w	lr, lr, #1
 808d830:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808d834:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808d838:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808d83c:	d204      	bcs.n	808d848 <__aeabi_dmul+0x80>
 808d83e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808d842:	416d      	adcs	r5, r5
 808d844:	eb46 0606 	adc.w	r6, r6, r6
 808d848:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808d84c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808d850:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808d854:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808d858:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808d85c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808d860:	bf88      	it	hi
 808d862:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808d866:	d81e      	bhi.n	808d8a6 <__aeabi_dmul+0xde>
 808d868:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808d86c:	bf08      	it	eq
 808d86e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808d872:	f150 0000 	adcs.w	r0, r0, #0
 808d876:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d87a:	bd70      	pop	{r4, r5, r6, pc}
 808d87c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808d880:	ea46 0101 	orr.w	r1, r6, r1
 808d884:	ea40 0002 	orr.w	r0, r0, r2
 808d888:	ea81 0103 	eor.w	r1, r1, r3
 808d88c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808d890:	bfc2      	ittt	gt
 808d892:	ebd4 050c 	rsbsgt	r5, r4, ip
 808d896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808d89a:	bd70      	popgt	{r4, r5, r6, pc}
 808d89c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808d8a0:	f04f 0e00 	mov.w	lr, #0
 808d8a4:	3c01      	subs	r4, #1
 808d8a6:	f300 80ab 	bgt.w	808da00 <__aeabi_dmul+0x238>
 808d8aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808d8ae:	bfde      	ittt	le
 808d8b0:	2000      	movle	r0, #0
 808d8b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808d8b6:	bd70      	pople	{r4, r5, r6, pc}
 808d8b8:	f1c4 0400 	rsb	r4, r4, #0
 808d8bc:	3c20      	subs	r4, #32
 808d8be:	da35      	bge.n	808d92c <__aeabi_dmul+0x164>
 808d8c0:	340c      	adds	r4, #12
 808d8c2:	dc1b      	bgt.n	808d8fc <__aeabi_dmul+0x134>
 808d8c4:	f104 0414 	add.w	r4, r4, #20
 808d8c8:	f1c4 0520 	rsb	r5, r4, #32
 808d8cc:	fa00 f305 	lsl.w	r3, r0, r5
 808d8d0:	fa20 f004 	lsr.w	r0, r0, r4
 808d8d4:	fa01 f205 	lsl.w	r2, r1, r5
 808d8d8:	ea40 0002 	orr.w	r0, r0, r2
 808d8dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808d8e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808d8e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808d8e8:	fa21 f604 	lsr.w	r6, r1, r4
 808d8ec:	eb42 0106 	adc.w	r1, r2, r6
 808d8f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d8f4:	bf08      	it	eq
 808d8f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d8fa:	bd70      	pop	{r4, r5, r6, pc}
 808d8fc:	f1c4 040c 	rsb	r4, r4, #12
 808d900:	f1c4 0520 	rsb	r5, r4, #32
 808d904:	fa00 f304 	lsl.w	r3, r0, r4
 808d908:	fa20 f005 	lsr.w	r0, r0, r5
 808d90c:	fa01 f204 	lsl.w	r2, r1, r4
 808d910:	ea40 0002 	orr.w	r0, r0, r2
 808d914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d918:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808d91c:	f141 0100 	adc.w	r1, r1, #0
 808d920:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d924:	bf08      	it	eq
 808d926:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d92a:	bd70      	pop	{r4, r5, r6, pc}
 808d92c:	f1c4 0520 	rsb	r5, r4, #32
 808d930:	fa00 f205 	lsl.w	r2, r0, r5
 808d934:	ea4e 0e02 	orr.w	lr, lr, r2
 808d938:	fa20 f304 	lsr.w	r3, r0, r4
 808d93c:	fa01 f205 	lsl.w	r2, r1, r5
 808d940:	ea43 0302 	orr.w	r3, r3, r2
 808d944:	fa21 f004 	lsr.w	r0, r1, r4
 808d948:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d94c:	fa21 f204 	lsr.w	r2, r1, r4
 808d950:	ea20 0002 	bic.w	r0, r0, r2
 808d954:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808d958:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808d95c:	bf08      	it	eq
 808d95e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808d962:	bd70      	pop	{r4, r5, r6, pc}
 808d964:	f094 0f00 	teq	r4, #0
 808d968:	d10f      	bne.n	808d98a <__aeabi_dmul+0x1c2>
 808d96a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808d96e:	0040      	lsls	r0, r0, #1
 808d970:	eb41 0101 	adc.w	r1, r1, r1
 808d974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d978:	bf08      	it	eq
 808d97a:	3c01      	subeq	r4, #1
 808d97c:	d0f7      	beq.n	808d96e <__aeabi_dmul+0x1a6>
 808d97e:	ea41 0106 	orr.w	r1, r1, r6
 808d982:	f095 0f00 	teq	r5, #0
 808d986:	bf18      	it	ne
 808d988:	4770      	bxne	lr
 808d98a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808d98e:	0052      	lsls	r2, r2, #1
 808d990:	eb43 0303 	adc.w	r3, r3, r3
 808d994:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808d998:	bf08      	it	eq
 808d99a:	3d01      	subeq	r5, #1
 808d99c:	d0f7      	beq.n	808d98e <__aeabi_dmul+0x1c6>
 808d99e:	ea43 0306 	orr.w	r3, r3, r6
 808d9a2:	4770      	bx	lr
 808d9a4:	ea94 0f0c 	teq	r4, ip
 808d9a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808d9ac:	bf18      	it	ne
 808d9ae:	ea95 0f0c 	teqne	r5, ip
 808d9b2:	d00c      	beq.n	808d9ce <__aeabi_dmul+0x206>
 808d9b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d9b8:	bf18      	it	ne
 808d9ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d9be:	d1d1      	bne.n	808d964 <__aeabi_dmul+0x19c>
 808d9c0:	ea81 0103 	eor.w	r1, r1, r3
 808d9c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808d9c8:	f04f 0000 	mov.w	r0, #0
 808d9cc:	bd70      	pop	{r4, r5, r6, pc}
 808d9ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808d9d2:	bf06      	itte	eq
 808d9d4:	4610      	moveq	r0, r2
 808d9d6:	4619      	moveq	r1, r3
 808d9d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808d9dc:	d019      	beq.n	808da12 <__aeabi_dmul+0x24a>
 808d9de:	ea94 0f0c 	teq	r4, ip
 808d9e2:	d102      	bne.n	808d9ea <__aeabi_dmul+0x222>
 808d9e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808d9e8:	d113      	bne.n	808da12 <__aeabi_dmul+0x24a>
 808d9ea:	ea95 0f0c 	teq	r5, ip
 808d9ee:	d105      	bne.n	808d9fc <__aeabi_dmul+0x234>
 808d9f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808d9f4:	bf1c      	itt	ne
 808d9f6:	4610      	movne	r0, r2
 808d9f8:	4619      	movne	r1, r3
 808d9fa:	d10a      	bne.n	808da12 <__aeabi_dmul+0x24a>
 808d9fc:	ea81 0103 	eor.w	r1, r1, r3
 808da00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808da04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808da08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808da0c:	f04f 0000 	mov.w	r0, #0
 808da10:	bd70      	pop	{r4, r5, r6, pc}
 808da12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808da16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808da1a:	bd70      	pop	{r4, r5, r6, pc}

0808da1c <__aeabi_ddiv>:
 808da1c:	b570      	push	{r4, r5, r6, lr}
 808da1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808da22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808da26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808da2a:	bf1d      	ittte	ne
 808da2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808da30:	ea94 0f0c 	teqne	r4, ip
 808da34:	ea95 0f0c 	teqne	r5, ip
 808da38:	f000 f8a7 	bleq	808db8a <__aeabi_ddiv+0x16e>
 808da3c:	eba4 0405 	sub.w	r4, r4, r5
 808da40:	ea81 0e03 	eor.w	lr, r1, r3
 808da44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808da48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808da4c:	f000 8088 	beq.w	808db60 <__aeabi_ddiv+0x144>
 808da50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808da54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808da58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808da5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808da60:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808da64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808da68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808da6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808da70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808da74:	429d      	cmp	r5, r3
 808da76:	bf08      	it	eq
 808da78:	4296      	cmpeq	r6, r2
 808da7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808da7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808da82:	d202      	bcs.n	808da8a <__aeabi_ddiv+0x6e>
 808da84:	085b      	lsrs	r3, r3, #1
 808da86:	ea4f 0232 	mov.w	r2, r2, rrx
 808da8a:	1ab6      	subs	r6, r6, r2
 808da8c:	eb65 0503 	sbc.w	r5, r5, r3
 808da90:	085b      	lsrs	r3, r3, #1
 808da92:	ea4f 0232 	mov.w	r2, r2, rrx
 808da96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808da9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808da9e:	ebb6 0e02 	subs.w	lr, r6, r2
 808daa2:	eb75 0e03 	sbcs.w	lr, r5, r3
 808daa6:	bf22      	ittt	cs
 808daa8:	1ab6      	subcs	r6, r6, r2
 808daaa:	4675      	movcs	r5, lr
 808daac:	ea40 000c 	orrcs.w	r0, r0, ip
 808dab0:	085b      	lsrs	r3, r3, #1
 808dab2:	ea4f 0232 	mov.w	r2, r2, rrx
 808dab6:	ebb6 0e02 	subs.w	lr, r6, r2
 808daba:	eb75 0e03 	sbcs.w	lr, r5, r3
 808dabe:	bf22      	ittt	cs
 808dac0:	1ab6      	subcs	r6, r6, r2
 808dac2:	4675      	movcs	r5, lr
 808dac4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808dac8:	085b      	lsrs	r3, r3, #1
 808daca:	ea4f 0232 	mov.w	r2, r2, rrx
 808dace:	ebb6 0e02 	subs.w	lr, r6, r2
 808dad2:	eb75 0e03 	sbcs.w	lr, r5, r3
 808dad6:	bf22      	ittt	cs
 808dad8:	1ab6      	subcs	r6, r6, r2
 808dada:	4675      	movcs	r5, lr
 808dadc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808dae0:	085b      	lsrs	r3, r3, #1
 808dae2:	ea4f 0232 	mov.w	r2, r2, rrx
 808dae6:	ebb6 0e02 	subs.w	lr, r6, r2
 808daea:	eb75 0e03 	sbcs.w	lr, r5, r3
 808daee:	bf22      	ittt	cs
 808daf0:	1ab6      	subcs	r6, r6, r2
 808daf2:	4675      	movcs	r5, lr
 808daf4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808daf8:	ea55 0e06 	orrs.w	lr, r5, r6
 808dafc:	d018      	beq.n	808db30 <__aeabi_ddiv+0x114>
 808dafe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808db02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808db06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808db0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808db0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808db12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808db16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808db1a:	d1c0      	bne.n	808da9e <__aeabi_ddiv+0x82>
 808db1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808db20:	d10b      	bne.n	808db3a <__aeabi_ddiv+0x11e>
 808db22:	ea41 0100 	orr.w	r1, r1, r0
 808db26:	f04f 0000 	mov.w	r0, #0
 808db2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808db2e:	e7b6      	b.n	808da9e <__aeabi_ddiv+0x82>
 808db30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808db34:	bf04      	itt	eq
 808db36:	4301      	orreq	r1, r0
 808db38:	2000      	moveq	r0, #0
 808db3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808db3e:	bf88      	it	hi
 808db40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808db44:	f63f aeaf 	bhi.w	808d8a6 <__aeabi_dmul+0xde>
 808db48:	ebb5 0c03 	subs.w	ip, r5, r3
 808db4c:	bf04      	itt	eq
 808db4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 808db52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808db56:	f150 0000 	adcs.w	r0, r0, #0
 808db5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808db5e:	bd70      	pop	{r4, r5, r6, pc}
 808db60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808db64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808db68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808db6c:	bfc2      	ittt	gt
 808db6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 808db72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808db76:	bd70      	popgt	{r4, r5, r6, pc}
 808db78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808db7c:	f04f 0e00 	mov.w	lr, #0
 808db80:	3c01      	subs	r4, #1
 808db82:	e690      	b.n	808d8a6 <__aeabi_dmul+0xde>
 808db84:	ea45 0e06 	orr.w	lr, r5, r6
 808db88:	e68d      	b.n	808d8a6 <__aeabi_dmul+0xde>
 808db8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808db8e:	ea94 0f0c 	teq	r4, ip
 808db92:	bf08      	it	eq
 808db94:	ea95 0f0c 	teqeq	r5, ip
 808db98:	f43f af3b 	beq.w	808da12 <__aeabi_dmul+0x24a>
 808db9c:	ea94 0f0c 	teq	r4, ip
 808dba0:	d10a      	bne.n	808dbb8 <__aeabi_ddiv+0x19c>
 808dba2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808dba6:	f47f af34 	bne.w	808da12 <__aeabi_dmul+0x24a>
 808dbaa:	ea95 0f0c 	teq	r5, ip
 808dbae:	f47f af25 	bne.w	808d9fc <__aeabi_dmul+0x234>
 808dbb2:	4610      	mov	r0, r2
 808dbb4:	4619      	mov	r1, r3
 808dbb6:	e72c      	b.n	808da12 <__aeabi_dmul+0x24a>
 808dbb8:	ea95 0f0c 	teq	r5, ip
 808dbbc:	d106      	bne.n	808dbcc <__aeabi_ddiv+0x1b0>
 808dbbe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808dbc2:	f43f aefd 	beq.w	808d9c0 <__aeabi_dmul+0x1f8>
 808dbc6:	4610      	mov	r0, r2
 808dbc8:	4619      	mov	r1, r3
 808dbca:	e722      	b.n	808da12 <__aeabi_dmul+0x24a>
 808dbcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808dbd0:	bf18      	it	ne
 808dbd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808dbd6:	f47f aec5 	bne.w	808d964 <__aeabi_dmul+0x19c>
 808dbda:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808dbde:	f47f af0d 	bne.w	808d9fc <__aeabi_dmul+0x234>
 808dbe2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808dbe6:	f47f aeeb 	bne.w	808d9c0 <__aeabi_dmul+0x1f8>
 808dbea:	e712      	b.n	808da12 <__aeabi_dmul+0x24a>

0808dbec <__gedf2>:
 808dbec:	f04f 3cff 	mov.w	ip, #4294967295
 808dbf0:	e006      	b.n	808dc00 <__cmpdf2+0x4>
 808dbf2:	bf00      	nop

0808dbf4 <__ledf2>:
 808dbf4:	f04f 0c01 	mov.w	ip, #1
 808dbf8:	e002      	b.n	808dc00 <__cmpdf2+0x4>
 808dbfa:	bf00      	nop

0808dbfc <__cmpdf2>:
 808dbfc:	f04f 0c01 	mov.w	ip, #1
 808dc00:	f84d cd04 	str.w	ip, [sp, #-4]!
 808dc04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808dc08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dc0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808dc10:	bf18      	it	ne
 808dc12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808dc16:	d01b      	beq.n	808dc50 <__cmpdf2+0x54>
 808dc18:	b001      	add	sp, #4
 808dc1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808dc1e:	bf0c      	ite	eq
 808dc20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808dc24:	ea91 0f03 	teqne	r1, r3
 808dc28:	bf02      	ittt	eq
 808dc2a:	ea90 0f02 	teqeq	r0, r2
 808dc2e:	2000      	moveq	r0, #0
 808dc30:	4770      	bxeq	lr
 808dc32:	f110 0f00 	cmn.w	r0, #0
 808dc36:	ea91 0f03 	teq	r1, r3
 808dc3a:	bf58      	it	pl
 808dc3c:	4299      	cmppl	r1, r3
 808dc3e:	bf08      	it	eq
 808dc40:	4290      	cmpeq	r0, r2
 808dc42:	bf2c      	ite	cs
 808dc44:	17d8      	asrcs	r0, r3, #31
 808dc46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808dc4a:	f040 0001 	orr.w	r0, r0, #1
 808dc4e:	4770      	bx	lr
 808dc50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808dc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dc58:	d102      	bne.n	808dc60 <__cmpdf2+0x64>
 808dc5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808dc5e:	d107      	bne.n	808dc70 <__cmpdf2+0x74>
 808dc60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808dc64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dc68:	d1d6      	bne.n	808dc18 <__cmpdf2+0x1c>
 808dc6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808dc6e:	d0d3      	beq.n	808dc18 <__cmpdf2+0x1c>
 808dc70:	f85d 0b04 	ldr.w	r0, [sp], #4
 808dc74:	4770      	bx	lr
 808dc76:	bf00      	nop

0808dc78 <__aeabi_cdrcmple>:
 808dc78:	4684      	mov	ip, r0
 808dc7a:	4610      	mov	r0, r2
 808dc7c:	4662      	mov	r2, ip
 808dc7e:	468c      	mov	ip, r1
 808dc80:	4619      	mov	r1, r3
 808dc82:	4663      	mov	r3, ip
 808dc84:	e000      	b.n	808dc88 <__aeabi_cdcmpeq>
 808dc86:	bf00      	nop

0808dc88 <__aeabi_cdcmpeq>:
 808dc88:	b501      	push	{r0, lr}
 808dc8a:	f7ff ffb7 	bl	808dbfc <__cmpdf2>
 808dc8e:	2800      	cmp	r0, #0
 808dc90:	bf48      	it	mi
 808dc92:	f110 0f00 	cmnmi.w	r0, #0
 808dc96:	bd01      	pop	{r0, pc}

0808dc98 <__aeabi_dcmpeq>:
 808dc98:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dc9c:	f7ff fff4 	bl	808dc88 <__aeabi_cdcmpeq>
 808dca0:	bf0c      	ite	eq
 808dca2:	2001      	moveq	r0, #1
 808dca4:	2000      	movne	r0, #0
 808dca6:	f85d fb08 	ldr.w	pc, [sp], #8
 808dcaa:	bf00      	nop

0808dcac <__aeabi_dcmplt>:
 808dcac:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dcb0:	f7ff ffea 	bl	808dc88 <__aeabi_cdcmpeq>
 808dcb4:	bf34      	ite	cc
 808dcb6:	2001      	movcc	r0, #1
 808dcb8:	2000      	movcs	r0, #0
 808dcba:	f85d fb08 	ldr.w	pc, [sp], #8
 808dcbe:	bf00      	nop

0808dcc0 <__aeabi_dcmple>:
 808dcc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dcc4:	f7ff ffe0 	bl	808dc88 <__aeabi_cdcmpeq>
 808dcc8:	bf94      	ite	ls
 808dcca:	2001      	movls	r0, #1
 808dccc:	2000      	movhi	r0, #0
 808dcce:	f85d fb08 	ldr.w	pc, [sp], #8
 808dcd2:	bf00      	nop

0808dcd4 <__aeabi_dcmpge>:
 808dcd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dcd8:	f7ff ffce 	bl	808dc78 <__aeabi_cdrcmple>
 808dcdc:	bf94      	ite	ls
 808dcde:	2001      	movls	r0, #1
 808dce0:	2000      	movhi	r0, #0
 808dce2:	f85d fb08 	ldr.w	pc, [sp], #8
 808dce6:	bf00      	nop

0808dce8 <__aeabi_dcmpgt>:
 808dce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808dcec:	f7ff ffc4 	bl	808dc78 <__aeabi_cdrcmple>
 808dcf0:	bf34      	ite	cc
 808dcf2:	2001      	movcc	r0, #1
 808dcf4:	2000      	movcs	r0, #0
 808dcf6:	f85d fb08 	ldr.w	pc, [sp], #8
 808dcfa:	bf00      	nop

0808dcfc <__aeabi_dcmpun>:
 808dcfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808dd00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dd04:	d102      	bne.n	808dd0c <__aeabi_dcmpun+0x10>
 808dd06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808dd0a:	d10a      	bne.n	808dd22 <__aeabi_dcmpun+0x26>
 808dd0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808dd10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dd14:	d102      	bne.n	808dd1c <__aeabi_dcmpun+0x20>
 808dd16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808dd1a:	d102      	bne.n	808dd22 <__aeabi_dcmpun+0x26>
 808dd1c:	f04f 0000 	mov.w	r0, #0
 808dd20:	4770      	bx	lr
 808dd22:	f04f 0001 	mov.w	r0, #1
 808dd26:	4770      	bx	lr

0808dd28 <__aeabi_d2iz>:
 808dd28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808dd2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808dd30:	d215      	bcs.n	808dd5e <__aeabi_d2iz+0x36>
 808dd32:	d511      	bpl.n	808dd58 <__aeabi_d2iz+0x30>
 808dd34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808dd38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808dd3c:	d912      	bls.n	808dd64 <__aeabi_d2iz+0x3c>
 808dd3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808dd42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808dd46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808dd4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808dd4e:	fa23 f002 	lsr.w	r0, r3, r2
 808dd52:	bf18      	it	ne
 808dd54:	4240      	negne	r0, r0
 808dd56:	4770      	bx	lr
 808dd58:	f04f 0000 	mov.w	r0, #0
 808dd5c:	4770      	bx	lr
 808dd5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808dd62:	d105      	bne.n	808dd70 <__aeabi_d2iz+0x48>
 808dd64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808dd68:	bf08      	it	eq
 808dd6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808dd6e:	4770      	bx	lr
 808dd70:	f04f 0000 	mov.w	r0, #0
 808dd74:	4770      	bx	lr
 808dd76:	bf00      	nop

0808dd78 <__aeabi_d2uiz>:
 808dd78:	004a      	lsls	r2, r1, #1
 808dd7a:	d211      	bcs.n	808dda0 <__aeabi_d2uiz+0x28>
 808dd7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808dd80:	d211      	bcs.n	808dda6 <__aeabi_d2uiz+0x2e>
 808dd82:	d50d      	bpl.n	808dda0 <__aeabi_d2uiz+0x28>
 808dd84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808dd88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808dd8c:	d40e      	bmi.n	808ddac <__aeabi_d2uiz+0x34>
 808dd8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808dd92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808dd96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808dd9a:	fa23 f002 	lsr.w	r0, r3, r2
 808dd9e:	4770      	bx	lr
 808dda0:	f04f 0000 	mov.w	r0, #0
 808dda4:	4770      	bx	lr
 808dda6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808ddaa:	d102      	bne.n	808ddb2 <__aeabi_d2uiz+0x3a>
 808ddac:	f04f 30ff 	mov.w	r0, #4294967295
 808ddb0:	4770      	bx	lr
 808ddb2:	f04f 0000 	mov.w	r0, #0
 808ddb6:	4770      	bx	lr

0808ddb8 <__aeabi_d2f>:
 808ddb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808ddbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808ddc0:	bf24      	itt	cs
 808ddc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808ddc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808ddca:	d90d      	bls.n	808dde8 <__aeabi_d2f+0x30>
 808ddcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808ddd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808ddd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808ddd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808dddc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808dde0:	bf08      	it	eq
 808dde2:	f020 0001 	biceq.w	r0, r0, #1
 808dde6:	4770      	bx	lr
 808dde8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808ddec:	d121      	bne.n	808de32 <__aeabi_d2f+0x7a>
 808ddee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808ddf2:	bfbc      	itt	lt
 808ddf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808ddf8:	4770      	bxlt	lr
 808ddfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808ddfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808de02:	f1c2 0218 	rsb	r2, r2, #24
 808de06:	f1c2 0c20 	rsb	ip, r2, #32
 808de0a:	fa10 f30c 	lsls.w	r3, r0, ip
 808de0e:	fa20 f002 	lsr.w	r0, r0, r2
 808de12:	bf18      	it	ne
 808de14:	f040 0001 	orrne.w	r0, r0, #1
 808de18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808de1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808de20:	fa03 fc0c 	lsl.w	ip, r3, ip
 808de24:	ea40 000c 	orr.w	r0, r0, ip
 808de28:	fa23 f302 	lsr.w	r3, r3, r2
 808de2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808de30:	e7cc      	b.n	808ddcc <__aeabi_d2f+0x14>
 808de32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808de36:	d107      	bne.n	808de48 <__aeabi_d2f+0x90>
 808de38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808de3c:	bf1e      	ittt	ne
 808de3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808de42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808de46:	4770      	bxne	lr
 808de48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808de4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808de50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808de54:	4770      	bx	lr
 808de56:	bf00      	nop

0808de58 <__aeabi_frsub>:
 808de58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808de5c:	e002      	b.n	808de64 <__addsf3>
 808de5e:	bf00      	nop

0808de60 <__aeabi_fsub>:
 808de60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808de64 <__addsf3>:
 808de64:	0042      	lsls	r2, r0, #1
 808de66:	bf1f      	itttt	ne
 808de68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808de6c:	ea92 0f03 	teqne	r2, r3
 808de70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808de74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808de78:	d06a      	beq.n	808df50 <__addsf3+0xec>
 808de7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808de7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808de82:	bfc1      	itttt	gt
 808de84:	18d2      	addgt	r2, r2, r3
 808de86:	4041      	eorgt	r1, r0
 808de88:	4048      	eorgt	r0, r1
 808de8a:	4041      	eorgt	r1, r0
 808de8c:	bfb8      	it	lt
 808de8e:	425b      	neglt	r3, r3
 808de90:	2b19      	cmp	r3, #25
 808de92:	bf88      	it	hi
 808de94:	4770      	bxhi	lr
 808de96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808de9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808de9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808dea2:	bf18      	it	ne
 808dea4:	4240      	negne	r0, r0
 808dea6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808deaa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808deae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808deb2:	bf18      	it	ne
 808deb4:	4249      	negne	r1, r1
 808deb6:	ea92 0f03 	teq	r2, r3
 808deba:	d03f      	beq.n	808df3c <__addsf3+0xd8>
 808debc:	f1a2 0201 	sub.w	r2, r2, #1
 808dec0:	fa41 fc03 	asr.w	ip, r1, r3
 808dec4:	eb10 000c 	adds.w	r0, r0, ip
 808dec8:	f1c3 0320 	rsb	r3, r3, #32
 808decc:	fa01 f103 	lsl.w	r1, r1, r3
 808ded0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808ded4:	d502      	bpl.n	808dedc <__addsf3+0x78>
 808ded6:	4249      	negs	r1, r1
 808ded8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808dedc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808dee0:	d313      	bcc.n	808df0a <__addsf3+0xa6>
 808dee2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808dee6:	d306      	bcc.n	808def6 <__addsf3+0x92>
 808dee8:	0840      	lsrs	r0, r0, #1
 808deea:	ea4f 0131 	mov.w	r1, r1, rrx
 808deee:	f102 0201 	add.w	r2, r2, #1
 808def2:	2afe      	cmp	r2, #254	; 0xfe
 808def4:	d251      	bcs.n	808df9a <__addsf3+0x136>
 808def6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808defa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808defe:	bf08      	it	eq
 808df00:	f020 0001 	biceq.w	r0, r0, #1
 808df04:	ea40 0003 	orr.w	r0, r0, r3
 808df08:	4770      	bx	lr
 808df0a:	0049      	lsls	r1, r1, #1
 808df0c:	eb40 0000 	adc.w	r0, r0, r0
 808df10:	3a01      	subs	r2, #1
 808df12:	bf28      	it	cs
 808df14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 808df18:	d2ed      	bcs.n	808def6 <__addsf3+0x92>
 808df1a:	fab0 fc80 	clz	ip, r0
 808df1e:	f1ac 0c08 	sub.w	ip, ip, #8
 808df22:	ebb2 020c 	subs.w	r2, r2, ip
 808df26:	fa00 f00c 	lsl.w	r0, r0, ip
 808df2a:	bfaa      	itet	ge
 808df2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808df30:	4252      	neglt	r2, r2
 808df32:	4318      	orrge	r0, r3
 808df34:	bfbc      	itt	lt
 808df36:	40d0      	lsrlt	r0, r2
 808df38:	4318      	orrlt	r0, r3
 808df3a:	4770      	bx	lr
 808df3c:	f092 0f00 	teq	r2, #0
 808df40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808df44:	bf06      	itte	eq
 808df46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808df4a:	3201      	addeq	r2, #1
 808df4c:	3b01      	subne	r3, #1
 808df4e:	e7b5      	b.n	808debc <__addsf3+0x58>
 808df50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808df54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808df58:	bf18      	it	ne
 808df5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808df5e:	d021      	beq.n	808dfa4 <__addsf3+0x140>
 808df60:	ea92 0f03 	teq	r2, r3
 808df64:	d004      	beq.n	808df70 <__addsf3+0x10c>
 808df66:	f092 0f00 	teq	r2, #0
 808df6a:	bf08      	it	eq
 808df6c:	4608      	moveq	r0, r1
 808df6e:	4770      	bx	lr
 808df70:	ea90 0f01 	teq	r0, r1
 808df74:	bf1c      	itt	ne
 808df76:	2000      	movne	r0, #0
 808df78:	4770      	bxne	lr
 808df7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808df7e:	d104      	bne.n	808df8a <__addsf3+0x126>
 808df80:	0040      	lsls	r0, r0, #1
 808df82:	bf28      	it	cs
 808df84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808df88:	4770      	bx	lr
 808df8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808df8e:	bf3c      	itt	cc
 808df90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808df94:	4770      	bxcc	lr
 808df96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808df9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808df9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808dfa2:	4770      	bx	lr
 808dfa4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808dfa8:	bf16      	itet	ne
 808dfaa:	4608      	movne	r0, r1
 808dfac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808dfb0:	4601      	movne	r1, r0
 808dfb2:	0242      	lsls	r2, r0, #9
 808dfb4:	bf06      	itte	eq
 808dfb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808dfba:	ea90 0f01 	teqeq	r0, r1
 808dfbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808dfc2:	4770      	bx	lr

0808dfc4 <__aeabi_ui2f>:
 808dfc4:	f04f 0300 	mov.w	r3, #0
 808dfc8:	e004      	b.n	808dfd4 <__aeabi_i2f+0x8>
 808dfca:	bf00      	nop

0808dfcc <__aeabi_i2f>:
 808dfcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808dfd0:	bf48      	it	mi
 808dfd2:	4240      	negmi	r0, r0
 808dfd4:	ea5f 0c00 	movs.w	ip, r0
 808dfd8:	bf08      	it	eq
 808dfda:	4770      	bxeq	lr
 808dfdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808dfe0:	4601      	mov	r1, r0
 808dfe2:	f04f 0000 	mov.w	r0, #0
 808dfe6:	e01c      	b.n	808e022 <__aeabi_l2f+0x2a>

0808dfe8 <__aeabi_ul2f>:
 808dfe8:	ea50 0201 	orrs.w	r2, r0, r1
 808dfec:	bf08      	it	eq
 808dfee:	4770      	bxeq	lr
 808dff0:	f04f 0300 	mov.w	r3, #0
 808dff4:	e00a      	b.n	808e00c <__aeabi_l2f+0x14>
 808dff6:	bf00      	nop

0808dff8 <__aeabi_l2f>:
 808dff8:	ea50 0201 	orrs.w	r2, r0, r1
 808dffc:	bf08      	it	eq
 808dffe:	4770      	bxeq	lr
 808e000:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808e004:	d502      	bpl.n	808e00c <__aeabi_l2f+0x14>
 808e006:	4240      	negs	r0, r0
 808e008:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e00c:	ea5f 0c01 	movs.w	ip, r1
 808e010:	bf02      	ittt	eq
 808e012:	4684      	moveq	ip, r0
 808e014:	4601      	moveq	r1, r0
 808e016:	2000      	moveq	r0, #0
 808e018:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808e01c:	bf08      	it	eq
 808e01e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808e022:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808e026:	fabc f28c 	clz	r2, ip
 808e02a:	3a08      	subs	r2, #8
 808e02c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808e030:	db10      	blt.n	808e054 <__aeabi_l2f+0x5c>
 808e032:	fa01 fc02 	lsl.w	ip, r1, r2
 808e036:	4463      	add	r3, ip
 808e038:	fa00 fc02 	lsl.w	ip, r0, r2
 808e03c:	f1c2 0220 	rsb	r2, r2, #32
 808e040:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808e044:	fa20 f202 	lsr.w	r2, r0, r2
 808e048:	eb43 0002 	adc.w	r0, r3, r2
 808e04c:	bf08      	it	eq
 808e04e:	f020 0001 	biceq.w	r0, r0, #1
 808e052:	4770      	bx	lr
 808e054:	f102 0220 	add.w	r2, r2, #32
 808e058:	fa01 fc02 	lsl.w	ip, r1, r2
 808e05c:	f1c2 0220 	rsb	r2, r2, #32
 808e060:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808e064:	fa21 f202 	lsr.w	r2, r1, r2
 808e068:	eb43 0002 	adc.w	r0, r3, r2
 808e06c:	bf08      	it	eq
 808e06e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808e072:	4770      	bx	lr

0808e074 <__aeabi_fmul>:
 808e074:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808e078:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808e07c:	bf1e      	ittt	ne
 808e07e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808e082:	ea92 0f0c 	teqne	r2, ip
 808e086:	ea93 0f0c 	teqne	r3, ip
 808e08a:	d06f      	beq.n	808e16c <__aeabi_fmul+0xf8>
 808e08c:	441a      	add	r2, r3
 808e08e:	ea80 0c01 	eor.w	ip, r0, r1
 808e092:	0240      	lsls	r0, r0, #9
 808e094:	bf18      	it	ne
 808e096:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808e09a:	d01e      	beq.n	808e0da <__aeabi_fmul+0x66>
 808e09c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808e0a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808e0a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808e0a8:	fba0 3101 	umull	r3, r1, r0, r1
 808e0ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808e0b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808e0b4:	bf3e      	ittt	cc
 808e0b6:	0049      	lslcc	r1, r1, #1
 808e0b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808e0bc:	005b      	lslcc	r3, r3, #1
 808e0be:	ea40 0001 	orr.w	r0, r0, r1
 808e0c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808e0c6:	2afd      	cmp	r2, #253	; 0xfd
 808e0c8:	d81d      	bhi.n	808e106 <__aeabi_fmul+0x92>
 808e0ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808e0ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808e0d2:	bf08      	it	eq
 808e0d4:	f020 0001 	biceq.w	r0, r0, #1
 808e0d8:	4770      	bx	lr
 808e0da:	f090 0f00 	teq	r0, #0
 808e0de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808e0e2:	bf08      	it	eq
 808e0e4:	0249      	lsleq	r1, r1, #9
 808e0e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808e0ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808e0ee:	3a7f      	subs	r2, #127	; 0x7f
 808e0f0:	bfc2      	ittt	gt
 808e0f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808e0f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808e0fa:	4770      	bxgt	lr
 808e0fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e100:	f04f 0300 	mov.w	r3, #0
 808e104:	3a01      	subs	r2, #1
 808e106:	dc5d      	bgt.n	808e1c4 <__aeabi_fmul+0x150>
 808e108:	f112 0f19 	cmn.w	r2, #25
 808e10c:	bfdc      	itt	le
 808e10e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808e112:	4770      	bxle	lr
 808e114:	f1c2 0200 	rsb	r2, r2, #0
 808e118:	0041      	lsls	r1, r0, #1
 808e11a:	fa21 f102 	lsr.w	r1, r1, r2
 808e11e:	f1c2 0220 	rsb	r2, r2, #32
 808e122:	fa00 fc02 	lsl.w	ip, r0, r2
 808e126:	ea5f 0031 	movs.w	r0, r1, rrx
 808e12a:	f140 0000 	adc.w	r0, r0, #0
 808e12e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808e132:	bf08      	it	eq
 808e134:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808e138:	4770      	bx	lr
 808e13a:	f092 0f00 	teq	r2, #0
 808e13e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808e142:	bf02      	ittt	eq
 808e144:	0040      	lsleq	r0, r0, #1
 808e146:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808e14a:	3a01      	subeq	r2, #1
 808e14c:	d0f9      	beq.n	808e142 <__aeabi_fmul+0xce>
 808e14e:	ea40 000c 	orr.w	r0, r0, ip
 808e152:	f093 0f00 	teq	r3, #0
 808e156:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808e15a:	bf02      	ittt	eq
 808e15c:	0049      	lsleq	r1, r1, #1
 808e15e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808e162:	3b01      	subeq	r3, #1
 808e164:	d0f9      	beq.n	808e15a <__aeabi_fmul+0xe6>
 808e166:	ea41 010c 	orr.w	r1, r1, ip
 808e16a:	e78f      	b.n	808e08c <__aeabi_fmul+0x18>
 808e16c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808e170:	ea92 0f0c 	teq	r2, ip
 808e174:	bf18      	it	ne
 808e176:	ea93 0f0c 	teqne	r3, ip
 808e17a:	d00a      	beq.n	808e192 <__aeabi_fmul+0x11e>
 808e17c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808e180:	bf18      	it	ne
 808e182:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808e186:	d1d8      	bne.n	808e13a <__aeabi_fmul+0xc6>
 808e188:	ea80 0001 	eor.w	r0, r0, r1
 808e18c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808e190:	4770      	bx	lr
 808e192:	f090 0f00 	teq	r0, #0
 808e196:	bf17      	itett	ne
 808e198:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808e19c:	4608      	moveq	r0, r1
 808e19e:	f091 0f00 	teqne	r1, #0
 808e1a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808e1a6:	d014      	beq.n	808e1d2 <__aeabi_fmul+0x15e>
 808e1a8:	ea92 0f0c 	teq	r2, ip
 808e1ac:	d101      	bne.n	808e1b2 <__aeabi_fmul+0x13e>
 808e1ae:	0242      	lsls	r2, r0, #9
 808e1b0:	d10f      	bne.n	808e1d2 <__aeabi_fmul+0x15e>
 808e1b2:	ea93 0f0c 	teq	r3, ip
 808e1b6:	d103      	bne.n	808e1c0 <__aeabi_fmul+0x14c>
 808e1b8:	024b      	lsls	r3, r1, #9
 808e1ba:	bf18      	it	ne
 808e1bc:	4608      	movne	r0, r1
 808e1be:	d108      	bne.n	808e1d2 <__aeabi_fmul+0x15e>
 808e1c0:	ea80 0001 	eor.w	r0, r0, r1
 808e1c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808e1c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808e1cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e1d0:	4770      	bx	lr
 808e1d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808e1d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808e1da:	4770      	bx	lr

0808e1dc <__aeabi_fdiv>:
 808e1dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808e1e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808e1e4:	bf1e      	ittt	ne
 808e1e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808e1ea:	ea92 0f0c 	teqne	r2, ip
 808e1ee:	ea93 0f0c 	teqne	r3, ip
 808e1f2:	d069      	beq.n	808e2c8 <__aeabi_fdiv+0xec>
 808e1f4:	eba2 0203 	sub.w	r2, r2, r3
 808e1f8:	ea80 0c01 	eor.w	ip, r0, r1
 808e1fc:	0249      	lsls	r1, r1, #9
 808e1fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808e202:	d037      	beq.n	808e274 <__aeabi_fdiv+0x98>
 808e204:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808e208:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808e20c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808e210:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808e214:	428b      	cmp	r3, r1
 808e216:	bf38      	it	cc
 808e218:	005b      	lslcc	r3, r3, #1
 808e21a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808e21e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808e222:	428b      	cmp	r3, r1
 808e224:	bf24      	itt	cs
 808e226:	1a5b      	subcs	r3, r3, r1
 808e228:	ea40 000c 	orrcs.w	r0, r0, ip
 808e22c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808e230:	bf24      	itt	cs
 808e232:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808e236:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808e23a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808e23e:	bf24      	itt	cs
 808e240:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808e244:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808e248:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808e24c:	bf24      	itt	cs
 808e24e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808e252:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808e256:	011b      	lsls	r3, r3, #4
 808e258:	bf18      	it	ne
 808e25a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808e25e:	d1e0      	bne.n	808e222 <__aeabi_fdiv+0x46>
 808e260:	2afd      	cmp	r2, #253	; 0xfd
 808e262:	f63f af50 	bhi.w	808e106 <__aeabi_fmul+0x92>
 808e266:	428b      	cmp	r3, r1
 808e268:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808e26c:	bf08      	it	eq
 808e26e:	f020 0001 	biceq.w	r0, r0, #1
 808e272:	4770      	bx	lr
 808e274:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808e278:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808e27c:	327f      	adds	r2, #127	; 0x7f
 808e27e:	bfc2      	ittt	gt
 808e280:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808e284:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808e288:	4770      	bxgt	lr
 808e28a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e28e:	f04f 0300 	mov.w	r3, #0
 808e292:	3a01      	subs	r2, #1
 808e294:	e737      	b.n	808e106 <__aeabi_fmul+0x92>
 808e296:	f092 0f00 	teq	r2, #0
 808e29a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808e29e:	bf02      	ittt	eq
 808e2a0:	0040      	lsleq	r0, r0, #1
 808e2a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808e2a6:	3a01      	subeq	r2, #1
 808e2a8:	d0f9      	beq.n	808e29e <__aeabi_fdiv+0xc2>
 808e2aa:	ea40 000c 	orr.w	r0, r0, ip
 808e2ae:	f093 0f00 	teq	r3, #0
 808e2b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808e2b6:	bf02      	ittt	eq
 808e2b8:	0049      	lsleq	r1, r1, #1
 808e2ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808e2be:	3b01      	subeq	r3, #1
 808e2c0:	d0f9      	beq.n	808e2b6 <__aeabi_fdiv+0xda>
 808e2c2:	ea41 010c 	orr.w	r1, r1, ip
 808e2c6:	e795      	b.n	808e1f4 <__aeabi_fdiv+0x18>
 808e2c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808e2cc:	ea92 0f0c 	teq	r2, ip
 808e2d0:	d108      	bne.n	808e2e4 <__aeabi_fdiv+0x108>
 808e2d2:	0242      	lsls	r2, r0, #9
 808e2d4:	f47f af7d 	bne.w	808e1d2 <__aeabi_fmul+0x15e>
 808e2d8:	ea93 0f0c 	teq	r3, ip
 808e2dc:	f47f af70 	bne.w	808e1c0 <__aeabi_fmul+0x14c>
 808e2e0:	4608      	mov	r0, r1
 808e2e2:	e776      	b.n	808e1d2 <__aeabi_fmul+0x15e>
 808e2e4:	ea93 0f0c 	teq	r3, ip
 808e2e8:	d104      	bne.n	808e2f4 <__aeabi_fdiv+0x118>
 808e2ea:	024b      	lsls	r3, r1, #9
 808e2ec:	f43f af4c 	beq.w	808e188 <__aeabi_fmul+0x114>
 808e2f0:	4608      	mov	r0, r1
 808e2f2:	e76e      	b.n	808e1d2 <__aeabi_fmul+0x15e>
 808e2f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808e2f8:	bf18      	it	ne
 808e2fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808e2fe:	d1ca      	bne.n	808e296 <__aeabi_fdiv+0xba>
 808e300:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808e304:	f47f af5c 	bne.w	808e1c0 <__aeabi_fmul+0x14c>
 808e308:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808e30c:	f47f af3c 	bne.w	808e188 <__aeabi_fmul+0x114>
 808e310:	e75f      	b.n	808e1d2 <__aeabi_fmul+0x15e>
 808e312:	bf00      	nop

0808e314 <__gesf2>:
 808e314:	f04f 3cff 	mov.w	ip, #4294967295
 808e318:	e006      	b.n	808e328 <__cmpsf2+0x4>
 808e31a:	bf00      	nop

0808e31c <__lesf2>:
 808e31c:	f04f 0c01 	mov.w	ip, #1
 808e320:	e002      	b.n	808e328 <__cmpsf2+0x4>
 808e322:	bf00      	nop

0808e324 <__cmpsf2>:
 808e324:	f04f 0c01 	mov.w	ip, #1
 808e328:	f84d cd04 	str.w	ip, [sp, #-4]!
 808e32c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808e330:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808e334:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808e338:	bf18      	it	ne
 808e33a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808e33e:	d011      	beq.n	808e364 <__cmpsf2+0x40>
 808e340:	b001      	add	sp, #4
 808e342:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808e346:	bf18      	it	ne
 808e348:	ea90 0f01 	teqne	r0, r1
 808e34c:	bf58      	it	pl
 808e34e:	ebb2 0003 	subspl.w	r0, r2, r3
 808e352:	bf88      	it	hi
 808e354:	17c8      	asrhi	r0, r1, #31
 808e356:	bf38      	it	cc
 808e358:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808e35c:	bf18      	it	ne
 808e35e:	f040 0001 	orrne.w	r0, r0, #1
 808e362:	4770      	bx	lr
 808e364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808e368:	d102      	bne.n	808e370 <__cmpsf2+0x4c>
 808e36a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808e36e:	d105      	bne.n	808e37c <__cmpsf2+0x58>
 808e370:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808e374:	d1e4      	bne.n	808e340 <__cmpsf2+0x1c>
 808e376:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808e37a:	d0e1      	beq.n	808e340 <__cmpsf2+0x1c>
 808e37c:	f85d 0b04 	ldr.w	r0, [sp], #4
 808e380:	4770      	bx	lr
 808e382:	bf00      	nop

0808e384 <__aeabi_cfrcmple>:
 808e384:	4684      	mov	ip, r0
 808e386:	4608      	mov	r0, r1
 808e388:	4661      	mov	r1, ip
 808e38a:	e7ff      	b.n	808e38c <__aeabi_cfcmpeq>

0808e38c <__aeabi_cfcmpeq>:
 808e38c:	b50f      	push	{r0, r1, r2, r3, lr}
 808e38e:	f7ff ffc9 	bl	808e324 <__cmpsf2>
 808e392:	2800      	cmp	r0, #0
 808e394:	bf48      	it	mi
 808e396:	f110 0f00 	cmnmi.w	r0, #0
 808e39a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808e39c <__aeabi_fcmpeq>:
 808e39c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e3a0:	f7ff fff4 	bl	808e38c <__aeabi_cfcmpeq>
 808e3a4:	bf0c      	ite	eq
 808e3a6:	2001      	moveq	r0, #1
 808e3a8:	2000      	movne	r0, #0
 808e3aa:	f85d fb08 	ldr.w	pc, [sp], #8
 808e3ae:	bf00      	nop

0808e3b0 <__aeabi_fcmplt>:
 808e3b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e3b4:	f7ff ffea 	bl	808e38c <__aeabi_cfcmpeq>
 808e3b8:	bf34      	ite	cc
 808e3ba:	2001      	movcc	r0, #1
 808e3bc:	2000      	movcs	r0, #0
 808e3be:	f85d fb08 	ldr.w	pc, [sp], #8
 808e3c2:	bf00      	nop

0808e3c4 <__aeabi_fcmple>:
 808e3c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e3c8:	f7ff ffe0 	bl	808e38c <__aeabi_cfcmpeq>
 808e3cc:	bf94      	ite	ls
 808e3ce:	2001      	movls	r0, #1
 808e3d0:	2000      	movhi	r0, #0
 808e3d2:	f85d fb08 	ldr.w	pc, [sp], #8
 808e3d6:	bf00      	nop

0808e3d8 <__aeabi_fcmpge>:
 808e3d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e3dc:	f7ff ffd2 	bl	808e384 <__aeabi_cfrcmple>
 808e3e0:	bf94      	ite	ls
 808e3e2:	2001      	movls	r0, #1
 808e3e4:	2000      	movhi	r0, #0
 808e3e6:	f85d fb08 	ldr.w	pc, [sp], #8
 808e3ea:	bf00      	nop

0808e3ec <__aeabi_fcmpgt>:
 808e3ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e3f0:	f7ff ffc8 	bl	808e384 <__aeabi_cfrcmple>
 808e3f4:	bf34      	ite	cc
 808e3f6:	2001      	movcc	r0, #1
 808e3f8:	2000      	movcs	r0, #0
 808e3fa:	f85d fb08 	ldr.w	pc, [sp], #8
 808e3fe:	bf00      	nop

0808e400 <__aeabi_f2iz>:
 808e400:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808e404:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808e408:	d30f      	bcc.n	808e42a <__aeabi_f2iz+0x2a>
 808e40a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808e40e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808e412:	d90d      	bls.n	808e430 <__aeabi_f2iz+0x30>
 808e414:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808e418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808e41c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808e420:	fa23 f002 	lsr.w	r0, r3, r2
 808e424:	bf18      	it	ne
 808e426:	4240      	negne	r0, r0
 808e428:	4770      	bx	lr
 808e42a:	f04f 0000 	mov.w	r0, #0
 808e42e:	4770      	bx	lr
 808e430:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808e434:	d101      	bne.n	808e43a <__aeabi_f2iz+0x3a>
 808e436:	0242      	lsls	r2, r0, #9
 808e438:	d105      	bne.n	808e446 <__aeabi_f2iz+0x46>
 808e43a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808e43e:	bf08      	it	eq
 808e440:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808e444:	4770      	bx	lr
 808e446:	f04f 0000 	mov.w	r0, #0
 808e44a:	4770      	bx	lr

0808e44c <__aeabi_ldivmod>:
 808e44c:	b97b      	cbnz	r3, 808e46e <__aeabi_ldivmod+0x22>
 808e44e:	b972      	cbnz	r2, 808e46e <__aeabi_ldivmod+0x22>
 808e450:	2900      	cmp	r1, #0
 808e452:	bfbe      	ittt	lt
 808e454:	2000      	movlt	r0, #0
 808e456:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808e45a:	e006      	blt.n	808e46a <__aeabi_ldivmod+0x1e>
 808e45c:	bf08      	it	eq
 808e45e:	2800      	cmpeq	r0, #0
 808e460:	bf1c      	itt	ne
 808e462:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808e466:	f04f 30ff 	movne.w	r0, #4294967295
 808e46a:	f000 b8a9 	b.w	808e5c0 <__aeabi_idiv0>
 808e46e:	f1ad 0c08 	sub.w	ip, sp, #8
 808e472:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e476:	2900      	cmp	r1, #0
 808e478:	db09      	blt.n	808e48e <__aeabi_ldivmod+0x42>
 808e47a:	2b00      	cmp	r3, #0
 808e47c:	db1a      	blt.n	808e4b4 <__aeabi_ldivmod+0x68>
 808e47e:	f7f1 fdcf 	bl	8080020 <__udivmoddi4>
 808e482:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e48a:	b004      	add	sp, #16
 808e48c:	4770      	bx	lr
 808e48e:	4240      	negs	r0, r0
 808e490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e494:	2b00      	cmp	r3, #0
 808e496:	db1b      	blt.n	808e4d0 <__aeabi_ldivmod+0x84>
 808e498:	f7f1 fdc2 	bl	8080020 <__udivmoddi4>
 808e49c:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e4a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e4a4:	b004      	add	sp, #16
 808e4a6:	4240      	negs	r0, r0
 808e4a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e4ac:	4252      	negs	r2, r2
 808e4ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e4b2:	4770      	bx	lr
 808e4b4:	4252      	negs	r2, r2
 808e4b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e4ba:	f7f1 fdb1 	bl	8080020 <__udivmoddi4>
 808e4be:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e4c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e4c6:	b004      	add	sp, #16
 808e4c8:	4240      	negs	r0, r0
 808e4ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e4ce:	4770      	bx	lr
 808e4d0:	4252      	negs	r2, r2
 808e4d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e4d6:	f7f1 fda3 	bl	8080020 <__udivmoddi4>
 808e4da:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e4de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e4e2:	b004      	add	sp, #16
 808e4e4:	4252      	negs	r2, r2
 808e4e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e4ea:	4770      	bx	lr

0808e4ec <__aeabi_uldivmod>:
 808e4ec:	b953      	cbnz	r3, 808e504 <__aeabi_uldivmod+0x18>
 808e4ee:	b94a      	cbnz	r2, 808e504 <__aeabi_uldivmod+0x18>
 808e4f0:	2900      	cmp	r1, #0
 808e4f2:	bf08      	it	eq
 808e4f4:	2800      	cmpeq	r0, #0
 808e4f6:	bf1c      	itt	ne
 808e4f8:	f04f 31ff 	movne.w	r1, #4294967295
 808e4fc:	f04f 30ff 	movne.w	r0, #4294967295
 808e500:	f000 b85e 	b.w	808e5c0 <__aeabi_idiv0>
 808e504:	f1ad 0c08 	sub.w	ip, sp, #8
 808e508:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e50c:	f7f1 fd88 	bl	8080020 <__udivmoddi4>
 808e510:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e514:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e518:	b004      	add	sp, #16
 808e51a:	4770      	bx	lr

0808e51c <__aeabi_f2lz>:
 808e51c:	b510      	push	{r4, lr}
 808e51e:	2100      	movs	r1, #0
 808e520:	4604      	mov	r4, r0
 808e522:	f7ff ff45 	bl	808e3b0 <__aeabi_fcmplt>
 808e526:	b920      	cbnz	r0, 808e532 <__aeabi_f2lz+0x16>
 808e528:	4620      	mov	r0, r4
 808e52a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808e52e:	f000 b809 	b.w	808e544 <__aeabi_f2ulz>
 808e532:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 808e536:	f000 f805 	bl	808e544 <__aeabi_f2ulz>
 808e53a:	4240      	negs	r0, r0
 808e53c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e540:	bd10      	pop	{r4, pc}
 808e542:	bf00      	nop

0808e544 <__aeabi_f2ulz>:
 808e544:	b5d0      	push	{r4, r6, r7, lr}
 808e546:	f7ff f8e7 	bl	808d718 <__aeabi_f2d>
 808e54a:	2200      	movs	r2, #0
 808e54c:	4b0b      	ldr	r3, [pc, #44]	; (808e57c <__aeabi_f2ulz+0x38>)
 808e54e:	4606      	mov	r6, r0
 808e550:	460f      	mov	r7, r1
 808e552:	f7ff f939 	bl	808d7c8 <__aeabi_dmul>
 808e556:	f7ff fc0f 	bl	808dd78 <__aeabi_d2uiz>
 808e55a:	4604      	mov	r4, r0
 808e55c:	f7ff f8ba 	bl	808d6d4 <__aeabi_ui2d>
 808e560:	2200      	movs	r2, #0
 808e562:	4b07      	ldr	r3, [pc, #28]	; (808e580 <__aeabi_f2ulz+0x3c>)
 808e564:	f7ff f930 	bl	808d7c8 <__aeabi_dmul>
 808e568:	4602      	mov	r2, r0
 808e56a:	460b      	mov	r3, r1
 808e56c:	4630      	mov	r0, r6
 808e56e:	4639      	mov	r1, r7
 808e570:	f7fe ff72 	bl	808d458 <__aeabi_dsub>
 808e574:	f7ff fc00 	bl	808dd78 <__aeabi_d2uiz>
 808e578:	4621      	mov	r1, r4
 808e57a:	bdd0      	pop	{r4, r6, r7, pc}
 808e57c:	3df00000 	.word	0x3df00000
 808e580:	41f00000 	.word	0x41f00000

0808e584 <__aeabi_d2ulz>:
 808e584:	b5d0      	push	{r4, r6, r7, lr}
 808e586:	2200      	movs	r2, #0
 808e588:	4b0b      	ldr	r3, [pc, #44]	; (808e5b8 <__aeabi_d2ulz+0x34>)
 808e58a:	4606      	mov	r6, r0
 808e58c:	460f      	mov	r7, r1
 808e58e:	f7ff f91b 	bl	808d7c8 <__aeabi_dmul>
 808e592:	f7ff fbf1 	bl	808dd78 <__aeabi_d2uiz>
 808e596:	4604      	mov	r4, r0
 808e598:	f7ff f89c 	bl	808d6d4 <__aeabi_ui2d>
 808e59c:	2200      	movs	r2, #0
 808e59e:	4b07      	ldr	r3, [pc, #28]	; (808e5bc <__aeabi_d2ulz+0x38>)
 808e5a0:	f7ff f912 	bl	808d7c8 <__aeabi_dmul>
 808e5a4:	4602      	mov	r2, r0
 808e5a6:	460b      	mov	r3, r1
 808e5a8:	4630      	mov	r0, r6
 808e5aa:	4639      	mov	r1, r7
 808e5ac:	f7fe ff54 	bl	808d458 <__aeabi_dsub>
 808e5b0:	f7ff fbe2 	bl	808dd78 <__aeabi_d2uiz>
 808e5b4:	4621      	mov	r1, r4
 808e5b6:	bdd0      	pop	{r4, r6, r7, pc}
 808e5b8:	3df00000 	.word	0x3df00000
 808e5bc:	41f00000 	.word	0x41f00000

0808e5c0 <__aeabi_idiv0>:
 808e5c0:	4770      	bx	lr
 808e5c2:	bf00      	nop

0808e5c4 <asctime_r>:
 808e5c4:	b510      	push	{r4, lr}
 808e5c6:	460c      	mov	r4, r1
 808e5c8:	6941      	ldr	r1, [r0, #20]
 808e5ca:	b086      	sub	sp, #24
 808e5cc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808e5d0:	6903      	ldr	r3, [r0, #16]
 808e5d2:	6982      	ldr	r2, [r0, #24]
 808e5d4:	9104      	str	r1, [sp, #16]
 808e5d6:	6801      	ldr	r1, [r0, #0]
 808e5d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808e5dc:	9103      	str	r1, [sp, #12]
 808e5de:	6841      	ldr	r1, [r0, #4]
 808e5e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808e5e4:	9102      	str	r1, [sp, #8]
 808e5e6:	6881      	ldr	r1, [r0, #8]
 808e5e8:	9101      	str	r1, [sp, #4]
 808e5ea:	68c1      	ldr	r1, [r0, #12]
 808e5ec:	4620      	mov	r0, r4
 808e5ee:	9100      	str	r1, [sp, #0]
 808e5f0:	4904      	ldr	r1, [pc, #16]	; (808e604 <asctime_r+0x40>)
 808e5f2:	440b      	add	r3, r1
 808e5f4:	4904      	ldr	r1, [pc, #16]	; (808e608 <asctime_r+0x44>)
 808e5f6:	440a      	add	r2, r1
 808e5f8:	4904      	ldr	r1, [pc, #16]	; (808e60c <asctime_r+0x48>)
 808e5fa:	f7fc fb21 	bl	808ac40 <siprintf>
 808e5fe:	4620      	mov	r0, r4
 808e600:	b006      	add	sp, #24
 808e602:	bd10      	pop	{r4, pc}
 808e604:	08092ed6 	.word	0x08092ed6
 808e608:	08092ec1 	.word	0x08092ec1
 808e60c:	08092ea1 	.word	0x08092ea1

0808e610 <atof>:
 808e610:	2100      	movs	r1, #0
 808e612:	f000 bf09 	b.w	808f428 <strtod>

0808e616 <atoi>:
 808e616:	220a      	movs	r2, #10
 808e618:	2100      	movs	r1, #0
 808e61a:	f000 bfb7 	b.w	808f58c <strtol>

0808e61e <atol>:
 808e61e:	220a      	movs	r2, #10
 808e620:	2100      	movs	r1, #0
 808e622:	f000 bfb3 	b.w	808f58c <strtol>
	...

0808e628 <__cxa_atexit>:
 808e628:	b510      	push	{r4, lr}
 808e62a:	4604      	mov	r4, r0
 808e62c:	4804      	ldr	r0, [pc, #16]	; (808e640 <__cxa_atexit+0x18>)
 808e62e:	4613      	mov	r3, r2
 808e630:	b120      	cbz	r0, 808e63c <__cxa_atexit+0x14>
 808e632:	460a      	mov	r2, r1
 808e634:	2002      	movs	r0, #2
 808e636:	4621      	mov	r1, r4
 808e638:	f3af 8000 	nop.w
 808e63c:	bd10      	pop	{r4, pc}
 808e63e:	bf00      	nop
 808e640:	00000000 	.word	0x00000000

0808e644 <ldiv>:
 808e644:	b510      	push	{r4, lr}
 808e646:	fb91 f4f2 	sdiv	r4, r1, r2
 808e64a:	2900      	cmp	r1, #0
 808e64c:	fb02 1314 	mls	r3, r2, r4, r1
 808e650:	db06      	blt.n	808e660 <ldiv+0x1c>
 808e652:	2b00      	cmp	r3, #0
 808e654:	da01      	bge.n	808e65a <ldiv+0x16>
 808e656:	3401      	adds	r4, #1
 808e658:	1a9b      	subs	r3, r3, r2
 808e65a:	e9c0 4300 	strd	r4, r3, [r0]
 808e65e:	bd10      	pop	{r4, pc}
 808e660:	2b00      	cmp	r3, #0
 808e662:	bfc4      	itt	gt
 808e664:	f104 34ff 	addgt.w	r4, r4, #4294967295
 808e668:	189b      	addgt	r3, r3, r2
 808e66a:	e7f6      	b.n	808e65a <ldiv+0x16>

0808e66c <memcmp>:
 808e66c:	b530      	push	{r4, r5, lr}
 808e66e:	2400      	movs	r4, #0
 808e670:	3901      	subs	r1, #1
 808e672:	42a2      	cmp	r2, r4
 808e674:	d101      	bne.n	808e67a <memcmp+0xe>
 808e676:	2000      	movs	r0, #0
 808e678:	e005      	b.n	808e686 <memcmp+0x1a>
 808e67a:	5d03      	ldrb	r3, [r0, r4]
 808e67c:	3401      	adds	r4, #1
 808e67e:	5d0d      	ldrb	r5, [r1, r4]
 808e680:	42ab      	cmp	r3, r5
 808e682:	d0f6      	beq.n	808e672 <memcmp+0x6>
 808e684:	1b58      	subs	r0, r3, r5
 808e686:	bd30      	pop	{r4, r5, pc}

0808e688 <memcpy>:
 808e688:	440a      	add	r2, r1
 808e68a:	4291      	cmp	r1, r2
 808e68c:	f100 33ff 	add.w	r3, r0, #4294967295
 808e690:	d100      	bne.n	808e694 <memcpy+0xc>
 808e692:	4770      	bx	lr
 808e694:	b510      	push	{r4, lr}
 808e696:	f811 4b01 	ldrb.w	r4, [r1], #1
 808e69a:	4291      	cmp	r1, r2
 808e69c:	f803 4f01 	strb.w	r4, [r3, #1]!
 808e6a0:	d1f9      	bne.n	808e696 <memcpy+0xe>
 808e6a2:	bd10      	pop	{r4, pc}

0808e6a4 <memset>:
 808e6a4:	4603      	mov	r3, r0
 808e6a6:	4402      	add	r2, r0
 808e6a8:	4293      	cmp	r3, r2
 808e6aa:	d100      	bne.n	808e6ae <memset+0xa>
 808e6ac:	4770      	bx	lr
 808e6ae:	f803 1b01 	strb.w	r1, [r3], #1
 808e6b2:	e7f9      	b.n	808e6a8 <memset+0x4>

0808e6b4 <srand>:
 808e6b4:	b538      	push	{r3, r4, r5, lr}
 808e6b6:	4b0d      	ldr	r3, [pc, #52]	; (808e6ec <srand+0x38>)
 808e6b8:	4604      	mov	r4, r0
 808e6ba:	681d      	ldr	r5, [r3, #0]
 808e6bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808e6be:	b97b      	cbnz	r3, 808e6e0 <srand+0x2c>
 808e6c0:	2018      	movs	r0, #24
 808e6c2:	f7fc fa9d 	bl	808ac00 <malloc>
 808e6c6:	4a0a      	ldr	r2, [pc, #40]	; (808e6f0 <srand+0x3c>)
 808e6c8:	4b0a      	ldr	r3, [pc, #40]	; (808e6f4 <srand+0x40>)
 808e6ca:	63a8      	str	r0, [r5, #56]	; 0x38
 808e6cc:	e9c0 2300 	strd	r2, r3, [r0]
 808e6d0:	4b09      	ldr	r3, [pc, #36]	; (808e6f8 <srand+0x44>)
 808e6d2:	2201      	movs	r2, #1
 808e6d4:	6083      	str	r3, [r0, #8]
 808e6d6:	230b      	movs	r3, #11
 808e6d8:	8183      	strh	r3, [r0, #12]
 808e6da:	2300      	movs	r3, #0
 808e6dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808e6e0:	2200      	movs	r2, #0
 808e6e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808e6e4:	611c      	str	r4, [r3, #16]
 808e6e6:	615a      	str	r2, [r3, #20]
 808e6e8:	bd38      	pop	{r3, r4, r5, pc}
 808e6ea:	bf00      	nop
 808e6ec:	200000e8 	.word	0x200000e8
 808e6f0:	abcd330e 	.word	0xabcd330e
 808e6f4:	e66d1234 	.word	0xe66d1234
 808e6f8:	0005deec 	.word	0x0005deec

0808e6fc <strchr>:
 808e6fc:	4603      	mov	r3, r0
 808e6fe:	b2c9      	uxtb	r1, r1
 808e700:	4618      	mov	r0, r3
 808e702:	f813 2b01 	ldrb.w	r2, [r3], #1
 808e706:	b112      	cbz	r2, 808e70e <strchr+0x12>
 808e708:	428a      	cmp	r2, r1
 808e70a:	d1f9      	bne.n	808e700 <strchr+0x4>
 808e70c:	4770      	bx	lr
 808e70e:	2900      	cmp	r1, #0
 808e710:	bf18      	it	ne
 808e712:	2000      	movne	r0, #0
 808e714:	4770      	bx	lr

0808e716 <strcmp>:
 808e716:	f810 2b01 	ldrb.w	r2, [r0], #1
 808e71a:	f811 3b01 	ldrb.w	r3, [r1], #1
 808e71e:	2a01      	cmp	r2, #1
 808e720:	bf28      	it	cs
 808e722:	429a      	cmpcs	r2, r3
 808e724:	d0f7      	beq.n	808e716 <strcmp>
 808e726:	1ad0      	subs	r0, r2, r3
 808e728:	4770      	bx	lr

0808e72a <strcpy>:
 808e72a:	4603      	mov	r3, r0
 808e72c:	f811 2b01 	ldrb.w	r2, [r1], #1
 808e730:	f803 2b01 	strb.w	r2, [r3], #1
 808e734:	2a00      	cmp	r2, #0
 808e736:	d1f9      	bne.n	808e72c <strcpy+0x2>
 808e738:	4770      	bx	lr
	...

0808e73c <strdup>:
 808e73c:	4b02      	ldr	r3, [pc, #8]	; (808e748 <strdup+0xc>)
 808e73e:	4601      	mov	r1, r0
 808e740:	6818      	ldr	r0, [r3, #0]
 808e742:	f000 b803 	b.w	808e74c <_strdup_r>
 808e746:	bf00      	nop
 808e748:	200000e8 	.word	0x200000e8

0808e74c <_strdup_r>:
 808e74c:	b570      	push	{r4, r5, r6, lr}
 808e74e:	4604      	mov	r4, r0
 808e750:	4608      	mov	r0, r1
 808e752:	460d      	mov	r5, r1
 808e754:	f000 f80d 	bl	808e772 <strlen>
 808e758:	1c46      	adds	r6, r0, #1
 808e75a:	4631      	mov	r1, r6
 808e75c:	4620      	mov	r0, r4
 808e75e:	f7fc fa97 	bl	808ac90 <_malloc_r>
 808e762:	4604      	mov	r4, r0
 808e764:	b118      	cbz	r0, 808e76e <_strdup_r+0x22>
 808e766:	4632      	mov	r2, r6
 808e768:	4629      	mov	r1, r5
 808e76a:	f7ff ff8d 	bl	808e688 <memcpy>
 808e76e:	4620      	mov	r0, r4
 808e770:	bd70      	pop	{r4, r5, r6, pc}

0808e772 <strlen>:
 808e772:	4603      	mov	r3, r0
 808e774:	f813 2b01 	ldrb.w	r2, [r3], #1
 808e778:	2a00      	cmp	r2, #0
 808e77a:	d1fb      	bne.n	808e774 <strlen+0x2>
 808e77c:	1a18      	subs	r0, r3, r0
 808e77e:	3801      	subs	r0, #1
 808e780:	4770      	bx	lr

0808e782 <strncmp>:
 808e782:	b510      	push	{r4, lr}
 808e784:	b16a      	cbz	r2, 808e7a2 <strncmp+0x20>
 808e786:	3901      	subs	r1, #1
 808e788:	1884      	adds	r4, r0, r2
 808e78a:	f810 3b01 	ldrb.w	r3, [r0], #1
 808e78e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808e792:	4293      	cmp	r3, r2
 808e794:	d103      	bne.n	808e79e <strncmp+0x1c>
 808e796:	42a0      	cmp	r0, r4
 808e798:	d001      	beq.n	808e79e <strncmp+0x1c>
 808e79a:	2b00      	cmp	r3, #0
 808e79c:	d1f5      	bne.n	808e78a <strncmp+0x8>
 808e79e:	1a98      	subs	r0, r3, r2
 808e7a0:	bd10      	pop	{r4, pc}
 808e7a2:	4610      	mov	r0, r2
 808e7a4:	e7fc      	b.n	808e7a0 <strncmp+0x1e>

0808e7a6 <strncpy>:
 808e7a6:	4603      	mov	r3, r0
 808e7a8:	b510      	push	{r4, lr}
 808e7aa:	3901      	subs	r1, #1
 808e7ac:	b132      	cbz	r2, 808e7bc <strncpy+0x16>
 808e7ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808e7b2:	3a01      	subs	r2, #1
 808e7b4:	f803 4b01 	strb.w	r4, [r3], #1
 808e7b8:	2c00      	cmp	r4, #0
 808e7ba:	d1f7      	bne.n	808e7ac <strncpy+0x6>
 808e7bc:	2100      	movs	r1, #0
 808e7be:	441a      	add	r2, r3
 808e7c0:	4293      	cmp	r3, r2
 808e7c2:	d100      	bne.n	808e7c6 <strncpy+0x20>
 808e7c4:	bd10      	pop	{r4, pc}
 808e7c6:	f803 1b01 	strb.w	r1, [r3], #1
 808e7ca:	e7f9      	b.n	808e7c0 <strncpy+0x1a>

0808e7cc <strstr>:
 808e7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 808e7ce:	780c      	ldrb	r4, [r1, #0]
 808e7d0:	b164      	cbz	r4, 808e7ec <strstr+0x20>
 808e7d2:	4603      	mov	r3, r0
 808e7d4:	781a      	ldrb	r2, [r3, #0]
 808e7d6:	4618      	mov	r0, r3
 808e7d8:	1c5e      	adds	r6, r3, #1
 808e7da:	b90a      	cbnz	r2, 808e7e0 <strstr+0x14>
 808e7dc:	4610      	mov	r0, r2
 808e7de:	e005      	b.n	808e7ec <strstr+0x20>
 808e7e0:	4294      	cmp	r4, r2
 808e7e2:	d108      	bne.n	808e7f6 <strstr+0x2a>
 808e7e4:	460d      	mov	r5, r1
 808e7e6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808e7ea:	b902      	cbnz	r2, 808e7ee <strstr+0x22>
 808e7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808e7ee:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 808e7f2:	4297      	cmp	r7, r2
 808e7f4:	d0f7      	beq.n	808e7e6 <strstr+0x1a>
 808e7f6:	4633      	mov	r3, r6
 808e7f8:	e7ec      	b.n	808e7d4 <strstr+0x8>

0808e7fa <sulp>:
 808e7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e7fe:	460f      	mov	r7, r1
 808e800:	4690      	mov	r8, r2
 808e802:	f001 fd3b 	bl	809027c <__ulp>
 808e806:	4604      	mov	r4, r0
 808e808:	460d      	mov	r5, r1
 808e80a:	f1b8 0f00 	cmp.w	r8, #0
 808e80e:	d011      	beq.n	808e834 <sulp+0x3a>
 808e810:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808e814:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808e818:	2b00      	cmp	r3, #0
 808e81a:	dd0b      	ble.n	808e834 <sulp+0x3a>
 808e81c:	2400      	movs	r4, #0
 808e81e:	051b      	lsls	r3, r3, #20
 808e820:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808e824:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808e828:	4622      	mov	r2, r4
 808e82a:	462b      	mov	r3, r5
 808e82c:	f7fe ffcc 	bl	808d7c8 <__aeabi_dmul>
 808e830:	4604      	mov	r4, r0
 808e832:	460d      	mov	r5, r1
 808e834:	4620      	mov	r0, r4
 808e836:	4629      	mov	r1, r5
 808e838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808e83c:	0000      	movs	r0, r0
	...

0808e840 <_strtod_l>:
 808e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e844:	469b      	mov	fp, r3
 808e846:	2300      	movs	r3, #0
 808e848:	b0a1      	sub	sp, #132	; 0x84
 808e84a:	931c      	str	r3, [sp, #112]	; 0x70
 808e84c:	4ba1      	ldr	r3, [pc, #644]	; (808ead4 <_strtod_l+0x294>)
 808e84e:	4682      	mov	sl, r0
 808e850:	681f      	ldr	r7, [r3, #0]
 808e852:	460e      	mov	r6, r1
 808e854:	4638      	mov	r0, r7
 808e856:	9217      	str	r2, [sp, #92]	; 0x5c
 808e858:	f7ff ff8b 	bl	808e772 <strlen>
 808e85c:	f04f 0800 	mov.w	r8, #0
 808e860:	4604      	mov	r4, r0
 808e862:	f04f 0900 	mov.w	r9, #0
 808e866:	961b      	str	r6, [sp, #108]	; 0x6c
 808e868:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808e86a:	781a      	ldrb	r2, [r3, #0]
 808e86c:	2a2b      	cmp	r2, #43	; 0x2b
 808e86e:	d04c      	beq.n	808e90a <_strtod_l+0xca>
 808e870:	d83a      	bhi.n	808e8e8 <_strtod_l+0xa8>
 808e872:	2a0d      	cmp	r2, #13
 808e874:	d833      	bhi.n	808e8de <_strtod_l+0x9e>
 808e876:	2a08      	cmp	r2, #8
 808e878:	d833      	bhi.n	808e8e2 <_strtod_l+0xa2>
 808e87a:	2a00      	cmp	r2, #0
 808e87c:	d03d      	beq.n	808e8fa <_strtod_l+0xba>
 808e87e:	2300      	movs	r3, #0
 808e880:	930c      	str	r3, [sp, #48]	; 0x30
 808e882:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 808e884:	782b      	ldrb	r3, [r5, #0]
 808e886:	2b30      	cmp	r3, #48	; 0x30
 808e888:	f040 80af 	bne.w	808e9ea <_strtod_l+0x1aa>
 808e88c:	786b      	ldrb	r3, [r5, #1]
 808e88e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808e892:	2b58      	cmp	r3, #88	; 0x58
 808e894:	d16c      	bne.n	808e970 <_strtod_l+0x130>
 808e896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808e898:	4650      	mov	r0, sl
 808e89a:	9301      	str	r3, [sp, #4]
 808e89c:	ab1c      	add	r3, sp, #112	; 0x70
 808e89e:	9300      	str	r3, [sp, #0]
 808e8a0:	4a8d      	ldr	r2, [pc, #564]	; (808ead8 <_strtod_l+0x298>)
 808e8a2:	f8cd b008 	str.w	fp, [sp, #8]
 808e8a6:	ab1d      	add	r3, sp, #116	; 0x74
 808e8a8:	a91b      	add	r1, sp, #108	; 0x6c
 808e8aa:	f000 feeb 	bl	808f684 <__gethex>
 808e8ae:	f010 0607 	ands.w	r6, r0, #7
 808e8b2:	4604      	mov	r4, r0
 808e8b4:	d005      	beq.n	808e8c2 <_strtod_l+0x82>
 808e8b6:	2e06      	cmp	r6, #6
 808e8b8:	d129      	bne.n	808e90e <_strtod_l+0xce>
 808e8ba:	2300      	movs	r3, #0
 808e8bc:	3501      	adds	r5, #1
 808e8be:	951b      	str	r5, [sp, #108]	; 0x6c
 808e8c0:	930c      	str	r3, [sp, #48]	; 0x30
 808e8c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e8c4:	2b00      	cmp	r3, #0
 808e8c6:	f040 8596 	bne.w	808f3f6 <_strtod_l+0xbb6>
 808e8ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808e8cc:	b1d3      	cbz	r3, 808e904 <_strtod_l+0xc4>
 808e8ce:	4642      	mov	r2, r8
 808e8d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808e8d4:	4610      	mov	r0, r2
 808e8d6:	4619      	mov	r1, r3
 808e8d8:	b021      	add	sp, #132	; 0x84
 808e8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e8de:	2a20      	cmp	r2, #32
 808e8e0:	d1cd      	bne.n	808e87e <_strtod_l+0x3e>
 808e8e2:	3301      	adds	r3, #1
 808e8e4:	931b      	str	r3, [sp, #108]	; 0x6c
 808e8e6:	e7bf      	b.n	808e868 <_strtod_l+0x28>
 808e8e8:	2a2d      	cmp	r2, #45	; 0x2d
 808e8ea:	d1c8      	bne.n	808e87e <_strtod_l+0x3e>
 808e8ec:	2201      	movs	r2, #1
 808e8ee:	920c      	str	r2, [sp, #48]	; 0x30
 808e8f0:	1c5a      	adds	r2, r3, #1
 808e8f2:	921b      	str	r2, [sp, #108]	; 0x6c
 808e8f4:	785b      	ldrb	r3, [r3, #1]
 808e8f6:	2b00      	cmp	r3, #0
 808e8f8:	d1c3      	bne.n	808e882 <_strtod_l+0x42>
 808e8fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808e8fc:	961b      	str	r6, [sp, #108]	; 0x6c
 808e8fe:	2b00      	cmp	r3, #0
 808e900:	f040 8577 	bne.w	808f3f2 <_strtod_l+0xbb2>
 808e904:	4642      	mov	r2, r8
 808e906:	464b      	mov	r3, r9
 808e908:	e7e4      	b.n	808e8d4 <_strtod_l+0x94>
 808e90a:	2200      	movs	r2, #0
 808e90c:	e7ef      	b.n	808e8ee <_strtod_l+0xae>
 808e90e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808e910:	b13a      	cbz	r2, 808e922 <_strtod_l+0xe2>
 808e912:	2135      	movs	r1, #53	; 0x35
 808e914:	a81e      	add	r0, sp, #120	; 0x78
 808e916:	f001 fda8 	bl	809046a <__copybits>
 808e91a:	4650      	mov	r0, sl
 808e91c:	991c      	ldr	r1, [sp, #112]	; 0x70
 808e91e:	f001 f9e3 	bl	808fce8 <_Bfree>
 808e922:	3e01      	subs	r6, #1
 808e924:	2e05      	cmp	r6, #5
 808e926:	d807      	bhi.n	808e938 <_strtod_l+0xf8>
 808e928:	e8df f006 	tbb	[pc, r6]
 808e92c:	1d180b0e 	.word	0x1d180b0e
 808e930:	030e      	.short	0x030e
 808e932:	f04f 0900 	mov.w	r9, #0
 808e936:	46c8      	mov	r8, r9
 808e938:	0721      	lsls	r1, r4, #28
 808e93a:	d5c2      	bpl.n	808e8c2 <_strtod_l+0x82>
 808e93c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808e940:	e7bf      	b.n	808e8c2 <_strtod_l+0x82>
 808e942:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 808e946:	e7f7      	b.n	808e938 <_strtod_l+0xf8>
 808e948:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 808e94a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 808e94e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808e952:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808e956:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808e95a:	e7ed      	b.n	808e938 <_strtod_l+0xf8>
 808e95c:	f04f 0800 	mov.w	r8, #0
 808e960:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808eadc <_strtod_l+0x29c>
 808e964:	e7e8      	b.n	808e938 <_strtod_l+0xf8>
 808e966:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808e96a:	f04f 38ff 	mov.w	r8, #4294967295
 808e96e:	e7e3      	b.n	808e938 <_strtod_l+0xf8>
 808e970:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808e972:	1c5a      	adds	r2, r3, #1
 808e974:	921b      	str	r2, [sp, #108]	; 0x6c
 808e976:	785b      	ldrb	r3, [r3, #1]
 808e978:	2b30      	cmp	r3, #48	; 0x30
 808e97a:	d0f9      	beq.n	808e970 <_strtod_l+0x130>
 808e97c:	2b00      	cmp	r3, #0
 808e97e:	d0a0      	beq.n	808e8c2 <_strtod_l+0x82>
 808e980:	2301      	movs	r3, #1
 808e982:	9307      	str	r3, [sp, #28]
 808e984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808e986:	220a      	movs	r2, #10
 808e988:	9308      	str	r3, [sp, #32]
 808e98a:	2300      	movs	r3, #0
 808e98c:	469b      	mov	fp, r3
 808e98e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 808e992:	981b      	ldr	r0, [sp, #108]	; 0x6c
 808e994:	7805      	ldrb	r5, [r0, #0]
 808e996:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 808e99a:	b2d9      	uxtb	r1, r3
 808e99c:	2909      	cmp	r1, #9
 808e99e:	d926      	bls.n	808e9ee <_strtod_l+0x1ae>
 808e9a0:	4622      	mov	r2, r4
 808e9a2:	4639      	mov	r1, r7
 808e9a4:	f7ff feed 	bl	808e782 <strncmp>
 808e9a8:	2800      	cmp	r0, #0
 808e9aa:	d032      	beq.n	808ea12 <_strtod_l+0x1d2>
 808e9ac:	2000      	movs	r0, #0
 808e9ae:	462b      	mov	r3, r5
 808e9b0:	465c      	mov	r4, fp
 808e9b2:	4602      	mov	r2, r0
 808e9b4:	9004      	str	r0, [sp, #16]
 808e9b6:	2b65      	cmp	r3, #101	; 0x65
 808e9b8:	d001      	beq.n	808e9be <_strtod_l+0x17e>
 808e9ba:	2b45      	cmp	r3, #69	; 0x45
 808e9bc:	d113      	bne.n	808e9e6 <_strtod_l+0x1a6>
 808e9be:	b91c      	cbnz	r4, 808e9c8 <_strtod_l+0x188>
 808e9c0:	9b07      	ldr	r3, [sp, #28]
 808e9c2:	4303      	orrs	r3, r0
 808e9c4:	d099      	beq.n	808e8fa <_strtod_l+0xba>
 808e9c6:	2400      	movs	r4, #0
 808e9c8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 808e9ca:	1c73      	adds	r3, r6, #1
 808e9cc:	931b      	str	r3, [sp, #108]	; 0x6c
 808e9ce:	7873      	ldrb	r3, [r6, #1]
 808e9d0:	2b2b      	cmp	r3, #43	; 0x2b
 808e9d2:	d078      	beq.n	808eac6 <_strtod_l+0x286>
 808e9d4:	2b2d      	cmp	r3, #45	; 0x2d
 808e9d6:	d07b      	beq.n	808ead0 <_strtod_l+0x290>
 808e9d8:	2700      	movs	r7, #0
 808e9da:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808e9de:	2909      	cmp	r1, #9
 808e9e0:	f240 8082 	bls.w	808eae8 <_strtod_l+0x2a8>
 808e9e4:	961b      	str	r6, [sp, #108]	; 0x6c
 808e9e6:	2500      	movs	r5, #0
 808e9e8:	e09e      	b.n	808eb28 <_strtod_l+0x2e8>
 808e9ea:	2300      	movs	r3, #0
 808e9ec:	e7c9      	b.n	808e982 <_strtod_l+0x142>
 808e9ee:	f1bb 0f08 	cmp.w	fp, #8
 808e9f2:	bfd5      	itete	le
 808e9f4:	9906      	ldrle	r1, [sp, #24]
 808e9f6:	9905      	ldrgt	r1, [sp, #20]
 808e9f8:	fb02 3301 	mlale	r3, r2, r1, r3
 808e9fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 808ea00:	f100 0001 	add.w	r0, r0, #1
 808ea04:	bfd4      	ite	le
 808ea06:	9306      	strle	r3, [sp, #24]
 808ea08:	9305      	strgt	r3, [sp, #20]
 808ea0a:	f10b 0b01 	add.w	fp, fp, #1
 808ea0e:	901b      	str	r0, [sp, #108]	; 0x6c
 808ea10:	e7bf      	b.n	808e992 <_strtod_l+0x152>
 808ea12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808ea14:	191a      	adds	r2, r3, r4
 808ea16:	921b      	str	r2, [sp, #108]	; 0x6c
 808ea18:	5d1b      	ldrb	r3, [r3, r4]
 808ea1a:	f1bb 0f00 	cmp.w	fp, #0
 808ea1e:	d036      	beq.n	808ea8e <_strtod_l+0x24e>
 808ea20:	465c      	mov	r4, fp
 808ea22:	9004      	str	r0, [sp, #16]
 808ea24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 808ea28:	2a09      	cmp	r2, #9
 808ea2a:	d912      	bls.n	808ea52 <_strtod_l+0x212>
 808ea2c:	2201      	movs	r2, #1
 808ea2e:	e7c2      	b.n	808e9b6 <_strtod_l+0x176>
 808ea30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808ea32:	3001      	adds	r0, #1
 808ea34:	1c5a      	adds	r2, r3, #1
 808ea36:	921b      	str	r2, [sp, #108]	; 0x6c
 808ea38:	785b      	ldrb	r3, [r3, #1]
 808ea3a:	2b30      	cmp	r3, #48	; 0x30
 808ea3c:	d0f8      	beq.n	808ea30 <_strtod_l+0x1f0>
 808ea3e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808ea42:	2a08      	cmp	r2, #8
 808ea44:	f200 84dc 	bhi.w	808f400 <_strtod_l+0xbc0>
 808ea48:	9004      	str	r0, [sp, #16]
 808ea4a:	2000      	movs	r0, #0
 808ea4c:	4604      	mov	r4, r0
 808ea4e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 808ea50:	9208      	str	r2, [sp, #32]
 808ea52:	3b30      	subs	r3, #48	; 0x30
 808ea54:	f100 0201 	add.w	r2, r0, #1
 808ea58:	d013      	beq.n	808ea82 <_strtod_l+0x242>
 808ea5a:	9904      	ldr	r1, [sp, #16]
 808ea5c:	1905      	adds	r5, r0, r4
 808ea5e:	4411      	add	r1, r2
 808ea60:	9104      	str	r1, [sp, #16]
 808ea62:	4622      	mov	r2, r4
 808ea64:	210a      	movs	r1, #10
 808ea66:	42aa      	cmp	r2, r5
 808ea68:	d113      	bne.n	808ea92 <_strtod_l+0x252>
 808ea6a:	1822      	adds	r2, r4, r0
 808ea6c:	2a08      	cmp	r2, #8
 808ea6e:	f104 0401 	add.w	r4, r4, #1
 808ea72:	4404      	add	r4, r0
 808ea74:	dc1b      	bgt.n	808eaae <_strtod_l+0x26e>
 808ea76:	220a      	movs	r2, #10
 808ea78:	9906      	ldr	r1, [sp, #24]
 808ea7a:	fb02 3301 	mla	r3, r2, r1, r3
 808ea7e:	9306      	str	r3, [sp, #24]
 808ea80:	2200      	movs	r2, #0
 808ea82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808ea84:	4610      	mov	r0, r2
 808ea86:	1c59      	adds	r1, r3, #1
 808ea88:	911b      	str	r1, [sp, #108]	; 0x6c
 808ea8a:	785b      	ldrb	r3, [r3, #1]
 808ea8c:	e7ca      	b.n	808ea24 <_strtod_l+0x1e4>
 808ea8e:	4658      	mov	r0, fp
 808ea90:	e7d3      	b.n	808ea3a <_strtod_l+0x1fa>
 808ea92:	2a08      	cmp	r2, #8
 808ea94:	dc04      	bgt.n	808eaa0 <_strtod_l+0x260>
 808ea96:	9f06      	ldr	r7, [sp, #24]
 808ea98:	434f      	muls	r7, r1
 808ea9a:	9706      	str	r7, [sp, #24]
 808ea9c:	3201      	adds	r2, #1
 808ea9e:	e7e2      	b.n	808ea66 <_strtod_l+0x226>
 808eaa0:	1c57      	adds	r7, r2, #1
 808eaa2:	2f10      	cmp	r7, #16
 808eaa4:	bfde      	ittt	le
 808eaa6:	9f05      	ldrle	r7, [sp, #20]
 808eaa8:	434f      	mulle	r7, r1
 808eaaa:	9705      	strle	r7, [sp, #20]
 808eaac:	e7f6      	b.n	808ea9c <_strtod_l+0x25c>
 808eaae:	2c10      	cmp	r4, #16
 808eab0:	bfdf      	itttt	le
 808eab2:	220a      	movle	r2, #10
 808eab4:	9905      	ldrle	r1, [sp, #20]
 808eab6:	fb02 3301 	mlale	r3, r2, r1, r3
 808eaba:	9305      	strle	r3, [sp, #20]
 808eabc:	e7e0      	b.n	808ea80 <_strtod_l+0x240>
 808eabe:	2300      	movs	r3, #0
 808eac0:	2201      	movs	r2, #1
 808eac2:	9304      	str	r3, [sp, #16]
 808eac4:	e77c      	b.n	808e9c0 <_strtod_l+0x180>
 808eac6:	2700      	movs	r7, #0
 808eac8:	1cb3      	adds	r3, r6, #2
 808eaca:	931b      	str	r3, [sp, #108]	; 0x6c
 808eacc:	78b3      	ldrb	r3, [r6, #2]
 808eace:	e784      	b.n	808e9da <_strtod_l+0x19a>
 808ead0:	2701      	movs	r7, #1
 808ead2:	e7f9      	b.n	808eac8 <_strtod_l+0x288>
 808ead4:	08093054 	.word	0x08093054
 808ead8:	08092f00 	.word	0x08092f00
 808eadc:	7ff00000 	.word	0x7ff00000
 808eae0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808eae2:	1c59      	adds	r1, r3, #1
 808eae4:	911b      	str	r1, [sp, #108]	; 0x6c
 808eae6:	785b      	ldrb	r3, [r3, #1]
 808eae8:	2b30      	cmp	r3, #48	; 0x30
 808eaea:	d0f9      	beq.n	808eae0 <_strtod_l+0x2a0>
 808eaec:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 808eaf0:	2908      	cmp	r1, #8
 808eaf2:	f63f af78 	bhi.w	808e9e6 <_strtod_l+0x1a6>
 808eaf6:	f04f 0e0a 	mov.w	lr, #10
 808eafa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808eafe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808eb00:	9309      	str	r3, [sp, #36]	; 0x24
 808eb02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808eb04:	1c59      	adds	r1, r3, #1
 808eb06:	911b      	str	r1, [sp, #108]	; 0x6c
 808eb08:	785b      	ldrb	r3, [r3, #1]
 808eb0a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 808eb0e:	2d09      	cmp	r5, #9
 808eb10:	d935      	bls.n	808eb7e <_strtod_l+0x33e>
 808eb12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808eb14:	1b49      	subs	r1, r1, r5
 808eb16:	2908      	cmp	r1, #8
 808eb18:	f644 651f 	movw	r5, #19999	; 0x4e1f
 808eb1c:	dc02      	bgt.n	808eb24 <_strtod_l+0x2e4>
 808eb1e:	4565      	cmp	r5, ip
 808eb20:	bfa8      	it	ge
 808eb22:	4665      	movge	r5, ip
 808eb24:	b107      	cbz	r7, 808eb28 <_strtod_l+0x2e8>
 808eb26:	426d      	negs	r5, r5
 808eb28:	2c00      	cmp	r4, #0
 808eb2a:	d14c      	bne.n	808ebc6 <_strtod_l+0x386>
 808eb2c:	9907      	ldr	r1, [sp, #28]
 808eb2e:	4301      	orrs	r1, r0
 808eb30:	f47f aec7 	bne.w	808e8c2 <_strtod_l+0x82>
 808eb34:	2a00      	cmp	r2, #0
 808eb36:	f47f aee0 	bne.w	808e8fa <_strtod_l+0xba>
 808eb3a:	2b69      	cmp	r3, #105	; 0x69
 808eb3c:	d026      	beq.n	808eb8c <_strtod_l+0x34c>
 808eb3e:	dc23      	bgt.n	808eb88 <_strtod_l+0x348>
 808eb40:	2b49      	cmp	r3, #73	; 0x49
 808eb42:	d023      	beq.n	808eb8c <_strtod_l+0x34c>
 808eb44:	2b4e      	cmp	r3, #78	; 0x4e
 808eb46:	f47f aed8 	bne.w	808e8fa <_strtod_l+0xba>
 808eb4a:	499c      	ldr	r1, [pc, #624]	; (808edbc <_strtod_l+0x57c>)
 808eb4c:	a81b      	add	r0, sp, #108	; 0x6c
 808eb4e:	f000 ffd5 	bl	808fafc <__match>
 808eb52:	2800      	cmp	r0, #0
 808eb54:	f43f aed1 	beq.w	808e8fa <_strtod_l+0xba>
 808eb58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808eb5a:	781b      	ldrb	r3, [r3, #0]
 808eb5c:	2b28      	cmp	r3, #40	; 0x28
 808eb5e:	d12c      	bne.n	808ebba <_strtod_l+0x37a>
 808eb60:	4997      	ldr	r1, [pc, #604]	; (808edc0 <_strtod_l+0x580>)
 808eb62:	aa1e      	add	r2, sp, #120	; 0x78
 808eb64:	a81b      	add	r0, sp, #108	; 0x6c
 808eb66:	f000 ffdd 	bl	808fb24 <__hexnan>
 808eb6a:	2805      	cmp	r0, #5
 808eb6c:	d125      	bne.n	808ebba <_strtod_l+0x37a>
 808eb6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 808eb70:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 808eb74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808eb78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808eb7c:	e6a1      	b.n	808e8c2 <_strtod_l+0x82>
 808eb7e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 808eb82:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 808eb86:	e7bc      	b.n	808eb02 <_strtod_l+0x2c2>
 808eb88:	2b6e      	cmp	r3, #110	; 0x6e
 808eb8a:	e7dc      	b.n	808eb46 <_strtod_l+0x306>
 808eb8c:	498d      	ldr	r1, [pc, #564]	; (808edc4 <_strtod_l+0x584>)
 808eb8e:	a81b      	add	r0, sp, #108	; 0x6c
 808eb90:	f000 ffb4 	bl	808fafc <__match>
 808eb94:	2800      	cmp	r0, #0
 808eb96:	f43f aeb0 	beq.w	808e8fa <_strtod_l+0xba>
 808eb9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808eb9c:	498a      	ldr	r1, [pc, #552]	; (808edc8 <_strtod_l+0x588>)
 808eb9e:	3b01      	subs	r3, #1
 808eba0:	a81b      	add	r0, sp, #108	; 0x6c
 808eba2:	931b      	str	r3, [sp, #108]	; 0x6c
 808eba4:	f000 ffaa 	bl	808fafc <__match>
 808eba8:	b910      	cbnz	r0, 808ebb0 <_strtod_l+0x370>
 808ebaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808ebac:	3301      	adds	r3, #1
 808ebae:	931b      	str	r3, [sp, #108]	; 0x6c
 808ebb0:	f04f 0800 	mov.w	r8, #0
 808ebb4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 808edd8 <_strtod_l+0x598>
 808ebb8:	e683      	b.n	808e8c2 <_strtod_l+0x82>
 808ebba:	4884      	ldr	r0, [pc, #528]	; (808edcc <_strtod_l+0x58c>)
 808ebbc:	f7fe fc42 	bl	808d444 <nan>
 808ebc0:	4680      	mov	r8, r0
 808ebc2:	4689      	mov	r9, r1
 808ebc4:	e67d      	b.n	808e8c2 <_strtod_l+0x82>
 808ebc6:	9b04      	ldr	r3, [sp, #16]
 808ebc8:	f1bb 0f00 	cmp.w	fp, #0
 808ebcc:	bf08      	it	eq
 808ebce:	46a3      	moveq	fp, r4
 808ebd0:	1aeb      	subs	r3, r5, r3
 808ebd2:	2c10      	cmp	r4, #16
 808ebd4:	9806      	ldr	r0, [sp, #24]
 808ebd6:	4626      	mov	r6, r4
 808ebd8:	9307      	str	r3, [sp, #28]
 808ebda:	bfa8      	it	ge
 808ebdc:	2610      	movge	r6, #16
 808ebde:	f7fe fd79 	bl	808d6d4 <__aeabi_ui2d>
 808ebe2:	2c09      	cmp	r4, #9
 808ebe4:	4680      	mov	r8, r0
 808ebe6:	4689      	mov	r9, r1
 808ebe8:	dd13      	ble.n	808ec12 <_strtod_l+0x3d2>
 808ebea:	4b79      	ldr	r3, [pc, #484]	; (808edd0 <_strtod_l+0x590>)
 808ebec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 808ebf0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808ebf4:	f7fe fde8 	bl	808d7c8 <__aeabi_dmul>
 808ebf8:	4680      	mov	r8, r0
 808ebfa:	9805      	ldr	r0, [sp, #20]
 808ebfc:	4689      	mov	r9, r1
 808ebfe:	f7fe fd69 	bl	808d6d4 <__aeabi_ui2d>
 808ec02:	4602      	mov	r2, r0
 808ec04:	460b      	mov	r3, r1
 808ec06:	4640      	mov	r0, r8
 808ec08:	4649      	mov	r1, r9
 808ec0a:	f7fe fc27 	bl	808d45c <__adddf3>
 808ec0e:	4680      	mov	r8, r0
 808ec10:	4689      	mov	r9, r1
 808ec12:	2c0f      	cmp	r4, #15
 808ec14:	dc36      	bgt.n	808ec84 <_strtod_l+0x444>
 808ec16:	9b07      	ldr	r3, [sp, #28]
 808ec18:	2b00      	cmp	r3, #0
 808ec1a:	f43f ae52 	beq.w	808e8c2 <_strtod_l+0x82>
 808ec1e:	dd22      	ble.n	808ec66 <_strtod_l+0x426>
 808ec20:	2b16      	cmp	r3, #22
 808ec22:	dc09      	bgt.n	808ec38 <_strtod_l+0x3f8>
 808ec24:	4c6a      	ldr	r4, [pc, #424]	; (808edd0 <_strtod_l+0x590>)
 808ec26:	4642      	mov	r2, r8
 808ec28:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 808ec2c:	464b      	mov	r3, r9
 808ec2e:	e9d4 0100 	ldrd	r0, r1, [r4]
 808ec32:	f7fe fdc9 	bl	808d7c8 <__aeabi_dmul>
 808ec36:	e7c3      	b.n	808ebc0 <_strtod_l+0x380>
 808ec38:	9a07      	ldr	r2, [sp, #28]
 808ec3a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 808ec3e:	4293      	cmp	r3, r2
 808ec40:	db20      	blt.n	808ec84 <_strtod_l+0x444>
 808ec42:	4d63      	ldr	r5, [pc, #396]	; (808edd0 <_strtod_l+0x590>)
 808ec44:	f1c4 040f 	rsb	r4, r4, #15
 808ec48:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 808ec4c:	4642      	mov	r2, r8
 808ec4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ec52:	464b      	mov	r3, r9
 808ec54:	f7fe fdb8 	bl	808d7c8 <__aeabi_dmul>
 808ec58:	9b07      	ldr	r3, [sp, #28]
 808ec5a:	1b1c      	subs	r4, r3, r4
 808ec5c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 808ec60:	e9d5 2300 	ldrd	r2, r3, [r5]
 808ec64:	e7e5      	b.n	808ec32 <_strtod_l+0x3f2>
 808ec66:	9b07      	ldr	r3, [sp, #28]
 808ec68:	3316      	adds	r3, #22
 808ec6a:	db0b      	blt.n	808ec84 <_strtod_l+0x444>
 808ec6c:	9b04      	ldr	r3, [sp, #16]
 808ec6e:	4a58      	ldr	r2, [pc, #352]	; (808edd0 <_strtod_l+0x590>)
 808ec70:	1b5d      	subs	r5, r3, r5
 808ec72:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 808ec76:	4640      	mov	r0, r8
 808ec78:	e9d5 2300 	ldrd	r2, r3, [r5]
 808ec7c:	4649      	mov	r1, r9
 808ec7e:	f7fe fecd 	bl	808da1c <__aeabi_ddiv>
 808ec82:	e79d      	b.n	808ebc0 <_strtod_l+0x380>
 808ec84:	9b07      	ldr	r3, [sp, #28]
 808ec86:	1ba6      	subs	r6, r4, r6
 808ec88:	441e      	add	r6, r3
 808ec8a:	2e00      	cmp	r6, #0
 808ec8c:	dd71      	ble.n	808ed72 <_strtod_l+0x532>
 808ec8e:	f016 030f 	ands.w	r3, r6, #15
 808ec92:	d00a      	beq.n	808ecaa <_strtod_l+0x46a>
 808ec94:	494e      	ldr	r1, [pc, #312]	; (808edd0 <_strtod_l+0x590>)
 808ec96:	4642      	mov	r2, r8
 808ec98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 808ec9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808eca0:	464b      	mov	r3, r9
 808eca2:	f7fe fd91 	bl	808d7c8 <__aeabi_dmul>
 808eca6:	4680      	mov	r8, r0
 808eca8:	4689      	mov	r9, r1
 808ecaa:	f036 060f 	bics.w	r6, r6, #15
 808ecae:	d050      	beq.n	808ed52 <_strtod_l+0x512>
 808ecb0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 808ecb4:	dd27      	ble.n	808ed06 <_strtod_l+0x4c6>
 808ecb6:	f04f 0b00 	mov.w	fp, #0
 808ecba:	f8cd b010 	str.w	fp, [sp, #16]
 808ecbe:	f8cd b020 	str.w	fp, [sp, #32]
 808ecc2:	f8cd b018 	str.w	fp, [sp, #24]
 808ecc6:	2322      	movs	r3, #34	; 0x22
 808ecc8:	f04f 0800 	mov.w	r8, #0
 808eccc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 808edd8 <_strtod_l+0x598>
 808ecd0:	f8ca 3000 	str.w	r3, [sl]
 808ecd4:	9b08      	ldr	r3, [sp, #32]
 808ecd6:	2b00      	cmp	r3, #0
 808ecd8:	f43f adf3 	beq.w	808e8c2 <_strtod_l+0x82>
 808ecdc:	4650      	mov	r0, sl
 808ecde:	991c      	ldr	r1, [sp, #112]	; 0x70
 808ece0:	f001 f802 	bl	808fce8 <_Bfree>
 808ece4:	4650      	mov	r0, sl
 808ece6:	9906      	ldr	r1, [sp, #24]
 808ece8:	f000 fffe 	bl	808fce8 <_Bfree>
 808ecec:	4650      	mov	r0, sl
 808ecee:	9904      	ldr	r1, [sp, #16]
 808ecf0:	f000 fffa 	bl	808fce8 <_Bfree>
 808ecf4:	4650      	mov	r0, sl
 808ecf6:	9908      	ldr	r1, [sp, #32]
 808ecf8:	f000 fff6 	bl	808fce8 <_Bfree>
 808ecfc:	4659      	mov	r1, fp
 808ecfe:	4650      	mov	r0, sl
 808ed00:	f000 fff2 	bl	808fce8 <_Bfree>
 808ed04:	e5dd      	b.n	808e8c2 <_strtod_l+0x82>
 808ed06:	2300      	movs	r3, #0
 808ed08:	4640      	mov	r0, r8
 808ed0a:	4649      	mov	r1, r9
 808ed0c:	461f      	mov	r7, r3
 808ed0e:	1136      	asrs	r6, r6, #4
 808ed10:	2e01      	cmp	r6, #1
 808ed12:	dc21      	bgt.n	808ed58 <_strtod_l+0x518>
 808ed14:	b10b      	cbz	r3, 808ed1a <_strtod_l+0x4da>
 808ed16:	4680      	mov	r8, r0
 808ed18:	4689      	mov	r9, r1
 808ed1a:	4b2e      	ldr	r3, [pc, #184]	; (808edd4 <_strtod_l+0x594>)
 808ed1c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808ed20:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 808ed24:	4642      	mov	r2, r8
 808ed26:	e9d7 0100 	ldrd	r0, r1, [r7]
 808ed2a:	464b      	mov	r3, r9
 808ed2c:	f7fe fd4c 	bl	808d7c8 <__aeabi_dmul>
 808ed30:	4b29      	ldr	r3, [pc, #164]	; (808edd8 <_strtod_l+0x598>)
 808ed32:	460a      	mov	r2, r1
 808ed34:	400b      	ands	r3, r1
 808ed36:	4929      	ldr	r1, [pc, #164]	; (808eddc <_strtod_l+0x59c>)
 808ed38:	4680      	mov	r8, r0
 808ed3a:	428b      	cmp	r3, r1
 808ed3c:	d8bb      	bhi.n	808ecb6 <_strtod_l+0x476>
 808ed3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808ed42:	428b      	cmp	r3, r1
 808ed44:	bf86      	itte	hi
 808ed46:	f04f 38ff 	movhi.w	r8, #4294967295
 808ed4a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 808ede0 <_strtod_l+0x5a0>
 808ed4e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808ed52:	2300      	movs	r3, #0
 808ed54:	9305      	str	r3, [sp, #20]
 808ed56:	e07e      	b.n	808ee56 <_strtod_l+0x616>
 808ed58:	07f2      	lsls	r2, r6, #31
 808ed5a:	d507      	bpl.n	808ed6c <_strtod_l+0x52c>
 808ed5c:	4b1d      	ldr	r3, [pc, #116]	; (808edd4 <_strtod_l+0x594>)
 808ed5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 808ed62:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ed66:	f7fe fd2f 	bl	808d7c8 <__aeabi_dmul>
 808ed6a:	2301      	movs	r3, #1
 808ed6c:	3701      	adds	r7, #1
 808ed6e:	1076      	asrs	r6, r6, #1
 808ed70:	e7ce      	b.n	808ed10 <_strtod_l+0x4d0>
 808ed72:	d0ee      	beq.n	808ed52 <_strtod_l+0x512>
 808ed74:	4276      	negs	r6, r6
 808ed76:	f016 020f 	ands.w	r2, r6, #15
 808ed7a:	d00a      	beq.n	808ed92 <_strtod_l+0x552>
 808ed7c:	4b14      	ldr	r3, [pc, #80]	; (808edd0 <_strtod_l+0x590>)
 808ed7e:	4640      	mov	r0, r8
 808ed80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808ed84:	4649      	mov	r1, r9
 808ed86:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ed8a:	f7fe fe47 	bl	808da1c <__aeabi_ddiv>
 808ed8e:	4680      	mov	r8, r0
 808ed90:	4689      	mov	r9, r1
 808ed92:	1136      	asrs	r6, r6, #4
 808ed94:	d0dd      	beq.n	808ed52 <_strtod_l+0x512>
 808ed96:	2e1f      	cmp	r6, #31
 808ed98:	dd24      	ble.n	808ede4 <_strtod_l+0x5a4>
 808ed9a:	f04f 0b00 	mov.w	fp, #0
 808ed9e:	f8cd b010 	str.w	fp, [sp, #16]
 808eda2:	f8cd b020 	str.w	fp, [sp, #32]
 808eda6:	f8cd b018 	str.w	fp, [sp, #24]
 808edaa:	2322      	movs	r3, #34	; 0x22
 808edac:	f04f 0800 	mov.w	r8, #0
 808edb0:	f04f 0900 	mov.w	r9, #0
 808edb4:	f8ca 3000 	str.w	r3, [sl]
 808edb8:	e78c      	b.n	808ecd4 <_strtod_l+0x494>
 808edba:	bf00      	nop
 808edbc:	08092d29 	.word	0x08092d29
 808edc0:	08092f14 	.word	0x08092f14
 808edc4:	08092d2d 	.word	0x08092d2d
 808edc8:	08092efa 	.word	0x08092efa
 808edcc:	08092ce2 	.word	0x08092ce2
 808edd0:	08093090 	.word	0x08093090
 808edd4:	08093068 	.word	0x08093068
 808edd8:	7ff00000 	.word	0x7ff00000
 808eddc:	7ca00000 	.word	0x7ca00000
 808ede0:	7fefffff 	.word	0x7fefffff
 808ede4:	f016 0310 	ands.w	r3, r6, #16
 808ede8:	bf18      	it	ne
 808edea:	236a      	movne	r3, #106	; 0x6a
 808edec:	4640      	mov	r0, r8
 808edee:	9305      	str	r3, [sp, #20]
 808edf0:	4649      	mov	r1, r9
 808edf2:	2300      	movs	r3, #0
 808edf4:	4fb2      	ldr	r7, [pc, #712]	; (808f0c0 <_strtod_l+0x880>)
 808edf6:	07f2      	lsls	r2, r6, #31
 808edf8:	d504      	bpl.n	808ee04 <_strtod_l+0x5c4>
 808edfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 808edfe:	f7fe fce3 	bl	808d7c8 <__aeabi_dmul>
 808ee02:	2301      	movs	r3, #1
 808ee04:	1076      	asrs	r6, r6, #1
 808ee06:	f107 0708 	add.w	r7, r7, #8
 808ee0a:	d1f4      	bne.n	808edf6 <_strtod_l+0x5b6>
 808ee0c:	b10b      	cbz	r3, 808ee12 <_strtod_l+0x5d2>
 808ee0e:	4680      	mov	r8, r0
 808ee10:	4689      	mov	r9, r1
 808ee12:	9b05      	ldr	r3, [sp, #20]
 808ee14:	b1bb      	cbz	r3, 808ee46 <_strtod_l+0x606>
 808ee16:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808ee1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808ee1e:	2b00      	cmp	r3, #0
 808ee20:	4649      	mov	r1, r9
 808ee22:	dd10      	ble.n	808ee46 <_strtod_l+0x606>
 808ee24:	2b1f      	cmp	r3, #31
 808ee26:	f340 812b 	ble.w	808f080 <_strtod_l+0x840>
 808ee2a:	2b34      	cmp	r3, #52	; 0x34
 808ee2c:	bfd8      	it	le
 808ee2e:	f04f 32ff 	movle.w	r2, #4294967295
 808ee32:	f04f 0800 	mov.w	r8, #0
 808ee36:	bfcf      	iteee	gt
 808ee38:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808ee3c:	3b20      	suble	r3, #32
 808ee3e:	fa02 f303 	lslle.w	r3, r2, r3
 808ee42:	ea03 0901 	andle.w	r9, r3, r1
 808ee46:	2200      	movs	r2, #0
 808ee48:	2300      	movs	r3, #0
 808ee4a:	4640      	mov	r0, r8
 808ee4c:	4649      	mov	r1, r9
 808ee4e:	f7fe ff23 	bl	808dc98 <__aeabi_dcmpeq>
 808ee52:	2800      	cmp	r0, #0
 808ee54:	d1a1      	bne.n	808ed9a <_strtod_l+0x55a>
 808ee56:	9b06      	ldr	r3, [sp, #24]
 808ee58:	465a      	mov	r2, fp
 808ee5a:	9300      	str	r3, [sp, #0]
 808ee5c:	4650      	mov	r0, sl
 808ee5e:	4623      	mov	r3, r4
 808ee60:	9908      	ldr	r1, [sp, #32]
 808ee62:	f000 ff96 	bl	808fd92 <__s2b>
 808ee66:	9008      	str	r0, [sp, #32]
 808ee68:	2800      	cmp	r0, #0
 808ee6a:	f43f af24 	beq.w	808ecb6 <_strtod_l+0x476>
 808ee6e:	9b04      	ldr	r3, [sp, #16]
 808ee70:	f04f 0b00 	mov.w	fp, #0
 808ee74:	1b5d      	subs	r5, r3, r5
 808ee76:	9b07      	ldr	r3, [sp, #28]
 808ee78:	f8cd b010 	str.w	fp, [sp, #16]
 808ee7c:	2b00      	cmp	r3, #0
 808ee7e:	bfb4      	ite	lt
 808ee80:	462b      	movlt	r3, r5
 808ee82:	2300      	movge	r3, #0
 808ee84:	930e      	str	r3, [sp, #56]	; 0x38
 808ee86:	9b07      	ldr	r3, [sp, #28]
 808ee88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 808ee8c:	9316      	str	r3, [sp, #88]	; 0x58
 808ee8e:	9b08      	ldr	r3, [sp, #32]
 808ee90:	4650      	mov	r0, sl
 808ee92:	6859      	ldr	r1, [r3, #4]
 808ee94:	f000 fef4 	bl	808fc80 <_Balloc>
 808ee98:	9006      	str	r0, [sp, #24]
 808ee9a:	2800      	cmp	r0, #0
 808ee9c:	f43f af13 	beq.w	808ecc6 <_strtod_l+0x486>
 808eea0:	9b08      	ldr	r3, [sp, #32]
 808eea2:	300c      	adds	r0, #12
 808eea4:	691a      	ldr	r2, [r3, #16]
 808eea6:	f103 010c 	add.w	r1, r3, #12
 808eeaa:	3202      	adds	r2, #2
 808eeac:	0092      	lsls	r2, r2, #2
 808eeae:	f7ff fbeb 	bl	808e688 <memcpy>
 808eeb2:	ab1e      	add	r3, sp, #120	; 0x78
 808eeb4:	9301      	str	r3, [sp, #4]
 808eeb6:	ab1d      	add	r3, sp, #116	; 0x74
 808eeb8:	9300      	str	r3, [sp, #0]
 808eeba:	4642      	mov	r2, r8
 808eebc:	464b      	mov	r3, r9
 808eebe:	4650      	mov	r0, sl
 808eec0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 808eec4:	f001 fa54 	bl	8090370 <__d2b>
 808eec8:	901c      	str	r0, [sp, #112]	; 0x70
 808eeca:	2800      	cmp	r0, #0
 808eecc:	f43f aefb 	beq.w	808ecc6 <_strtod_l+0x486>
 808eed0:	2101      	movs	r1, #1
 808eed2:	4650      	mov	r0, sl
 808eed4:	f000 ffe9 	bl	808feaa <__i2b>
 808eed8:	4603      	mov	r3, r0
 808eeda:	9004      	str	r0, [sp, #16]
 808eedc:	2800      	cmp	r0, #0
 808eede:	f43f aef2 	beq.w	808ecc6 <_strtod_l+0x486>
 808eee2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 808eee4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 808eee6:	2d00      	cmp	r5, #0
 808eee8:	bfab      	itete	ge
 808eeea:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 808eeec:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 808eeee:	18ee      	addge	r6, r5, r3
 808eef0:	1b5c      	sublt	r4, r3, r5
 808eef2:	9b05      	ldr	r3, [sp, #20]
 808eef4:	bfa8      	it	ge
 808eef6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 808eef8:	eba5 0503 	sub.w	r5, r5, r3
 808eefc:	4415      	add	r5, r2
 808eefe:	4b71      	ldr	r3, [pc, #452]	; (808f0c4 <_strtod_l+0x884>)
 808ef00:	f105 35ff 	add.w	r5, r5, #4294967295
 808ef04:	bfb8      	it	lt
 808ef06:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 808ef08:	429d      	cmp	r5, r3
 808ef0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 808ef0e:	f280 80c9 	bge.w	808f0a4 <_strtod_l+0x864>
 808ef12:	1b5b      	subs	r3, r3, r5
 808ef14:	2b1f      	cmp	r3, #31
 808ef16:	f04f 0701 	mov.w	r7, #1
 808ef1a:	eba2 0203 	sub.w	r2, r2, r3
 808ef1e:	f300 80b6 	bgt.w	808f08e <_strtod_l+0x84e>
 808ef22:	2500      	movs	r5, #0
 808ef24:	fa07 f303 	lsl.w	r3, r7, r3
 808ef28:	930f      	str	r3, [sp, #60]	; 0x3c
 808ef2a:	18b7      	adds	r7, r6, r2
 808ef2c:	9b05      	ldr	r3, [sp, #20]
 808ef2e:	42be      	cmp	r6, r7
 808ef30:	4414      	add	r4, r2
 808ef32:	441c      	add	r4, r3
 808ef34:	4633      	mov	r3, r6
 808ef36:	bfa8      	it	ge
 808ef38:	463b      	movge	r3, r7
 808ef3a:	42a3      	cmp	r3, r4
 808ef3c:	bfa8      	it	ge
 808ef3e:	4623      	movge	r3, r4
 808ef40:	2b00      	cmp	r3, #0
 808ef42:	bfc2      	ittt	gt
 808ef44:	1aff      	subgt	r7, r7, r3
 808ef46:	1ae4      	subgt	r4, r4, r3
 808ef48:	1af6      	subgt	r6, r6, r3
 808ef4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808ef4c:	2b00      	cmp	r3, #0
 808ef4e:	dd17      	ble.n	808ef80 <_strtod_l+0x740>
 808ef50:	461a      	mov	r2, r3
 808ef52:	4650      	mov	r0, sl
 808ef54:	9904      	ldr	r1, [sp, #16]
 808ef56:	f001 f84d 	bl	808fff4 <__pow5mult>
 808ef5a:	9004      	str	r0, [sp, #16]
 808ef5c:	2800      	cmp	r0, #0
 808ef5e:	f43f aeb2 	beq.w	808ecc6 <_strtod_l+0x486>
 808ef62:	4601      	mov	r1, r0
 808ef64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808ef66:	4650      	mov	r0, sl
 808ef68:	f000 ffa8 	bl	808febc <__multiply>
 808ef6c:	9009      	str	r0, [sp, #36]	; 0x24
 808ef6e:	2800      	cmp	r0, #0
 808ef70:	f43f aea9 	beq.w	808ecc6 <_strtod_l+0x486>
 808ef74:	4650      	mov	r0, sl
 808ef76:	991c      	ldr	r1, [sp, #112]	; 0x70
 808ef78:	f000 feb6 	bl	808fce8 <_Bfree>
 808ef7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808ef7e:	931c      	str	r3, [sp, #112]	; 0x70
 808ef80:	2f00      	cmp	r7, #0
 808ef82:	f300 8093 	bgt.w	808f0ac <_strtod_l+0x86c>
 808ef86:	9b07      	ldr	r3, [sp, #28]
 808ef88:	2b00      	cmp	r3, #0
 808ef8a:	dd08      	ble.n	808ef9e <_strtod_l+0x75e>
 808ef8c:	4650      	mov	r0, sl
 808ef8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808ef90:	9906      	ldr	r1, [sp, #24]
 808ef92:	f001 f82f 	bl	808fff4 <__pow5mult>
 808ef96:	9006      	str	r0, [sp, #24]
 808ef98:	2800      	cmp	r0, #0
 808ef9a:	f43f ae94 	beq.w	808ecc6 <_strtod_l+0x486>
 808ef9e:	2c00      	cmp	r4, #0
 808efa0:	dd08      	ble.n	808efb4 <_strtod_l+0x774>
 808efa2:	4622      	mov	r2, r4
 808efa4:	4650      	mov	r0, sl
 808efa6:	9906      	ldr	r1, [sp, #24]
 808efa8:	f001 f872 	bl	8090090 <__lshift>
 808efac:	9006      	str	r0, [sp, #24]
 808efae:	2800      	cmp	r0, #0
 808efb0:	f43f ae89 	beq.w	808ecc6 <_strtod_l+0x486>
 808efb4:	2e00      	cmp	r6, #0
 808efb6:	dd08      	ble.n	808efca <_strtod_l+0x78a>
 808efb8:	4632      	mov	r2, r6
 808efba:	4650      	mov	r0, sl
 808efbc:	9904      	ldr	r1, [sp, #16]
 808efbe:	f001 f867 	bl	8090090 <__lshift>
 808efc2:	9004      	str	r0, [sp, #16]
 808efc4:	2800      	cmp	r0, #0
 808efc6:	f43f ae7e 	beq.w	808ecc6 <_strtod_l+0x486>
 808efca:	4650      	mov	r0, sl
 808efcc:	9a06      	ldr	r2, [sp, #24]
 808efce:	991c      	ldr	r1, [sp, #112]	; 0x70
 808efd0:	f001 f8d8 	bl	8090184 <__mdiff>
 808efd4:	4683      	mov	fp, r0
 808efd6:	2800      	cmp	r0, #0
 808efd8:	f43f ae75 	beq.w	808ecc6 <_strtod_l+0x486>
 808efdc:	2400      	movs	r4, #0
 808efde:	68c3      	ldr	r3, [r0, #12]
 808efe0:	9904      	ldr	r1, [sp, #16]
 808efe2:	60c4      	str	r4, [r0, #12]
 808efe4:	930d      	str	r3, [sp, #52]	; 0x34
 808efe6:	f001 f8b2 	bl	809014e <__mcmp>
 808efea:	42a0      	cmp	r0, r4
 808efec:	da70      	bge.n	808f0d0 <_strtod_l+0x890>
 808efee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808eff0:	ea53 0308 	orrs.w	r3, r3, r8
 808eff4:	f040 8096 	bne.w	808f124 <_strtod_l+0x8e4>
 808eff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808effc:	2b00      	cmp	r3, #0
 808effe:	f040 8091 	bne.w	808f124 <_strtod_l+0x8e4>
 808f002:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808f006:	0d1b      	lsrs	r3, r3, #20
 808f008:	051b      	lsls	r3, r3, #20
 808f00a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808f00e:	f240 8089 	bls.w	808f124 <_strtod_l+0x8e4>
 808f012:	f8db 3014 	ldr.w	r3, [fp, #20]
 808f016:	b923      	cbnz	r3, 808f022 <_strtod_l+0x7e2>
 808f018:	f8db 3010 	ldr.w	r3, [fp, #16]
 808f01c:	2b01      	cmp	r3, #1
 808f01e:	f340 8081 	ble.w	808f124 <_strtod_l+0x8e4>
 808f022:	4659      	mov	r1, fp
 808f024:	2201      	movs	r2, #1
 808f026:	4650      	mov	r0, sl
 808f028:	f001 f832 	bl	8090090 <__lshift>
 808f02c:	9904      	ldr	r1, [sp, #16]
 808f02e:	4683      	mov	fp, r0
 808f030:	f001 f88d 	bl	809014e <__mcmp>
 808f034:	2800      	cmp	r0, #0
 808f036:	dd75      	ble.n	808f124 <_strtod_l+0x8e4>
 808f038:	9905      	ldr	r1, [sp, #20]
 808f03a:	464b      	mov	r3, r9
 808f03c:	4a22      	ldr	r2, [pc, #136]	; (808f0c8 <_strtod_l+0x888>)
 808f03e:	2900      	cmp	r1, #0
 808f040:	f000 8091 	beq.w	808f166 <_strtod_l+0x926>
 808f044:	ea02 0109 	and.w	r1, r2, r9
 808f048:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 808f04c:	f300 808b 	bgt.w	808f166 <_strtod_l+0x926>
 808f050:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 808f054:	f77f aea9 	ble.w	808edaa <_strtod_l+0x56a>
 808f058:	2300      	movs	r3, #0
 808f05a:	4a1c      	ldr	r2, [pc, #112]	; (808f0cc <_strtod_l+0x88c>)
 808f05c:	4640      	mov	r0, r8
 808f05e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 808f062:	4649      	mov	r1, r9
 808f064:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 808f068:	f7fe fbae 	bl	808d7c8 <__aeabi_dmul>
 808f06c:	460b      	mov	r3, r1
 808f06e:	4303      	orrs	r3, r0
 808f070:	bf08      	it	eq
 808f072:	2322      	moveq	r3, #34	; 0x22
 808f074:	4680      	mov	r8, r0
 808f076:	4689      	mov	r9, r1
 808f078:	bf08      	it	eq
 808f07a:	f8ca 3000 	streq.w	r3, [sl]
 808f07e:	e62d      	b.n	808ecdc <_strtod_l+0x49c>
 808f080:	f04f 32ff 	mov.w	r2, #4294967295
 808f084:	fa02 f303 	lsl.w	r3, r2, r3
 808f088:	ea03 0808 	and.w	r8, r3, r8
 808f08c:	e6db      	b.n	808ee46 <_strtod_l+0x606>
 808f08e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 808f092:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 808f096:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 808f09a:	35e2      	adds	r5, #226	; 0xe2
 808f09c:	fa07 f505 	lsl.w	r5, r7, r5
 808f0a0:	970f      	str	r7, [sp, #60]	; 0x3c
 808f0a2:	e742      	b.n	808ef2a <_strtod_l+0x6ea>
 808f0a4:	2301      	movs	r3, #1
 808f0a6:	2500      	movs	r5, #0
 808f0a8:	930f      	str	r3, [sp, #60]	; 0x3c
 808f0aa:	e73e      	b.n	808ef2a <_strtod_l+0x6ea>
 808f0ac:	463a      	mov	r2, r7
 808f0ae:	4650      	mov	r0, sl
 808f0b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 808f0b2:	f000 ffed 	bl	8090090 <__lshift>
 808f0b6:	901c      	str	r0, [sp, #112]	; 0x70
 808f0b8:	2800      	cmp	r0, #0
 808f0ba:	f47f af64 	bne.w	808ef86 <_strtod_l+0x746>
 808f0be:	e602      	b.n	808ecc6 <_strtod_l+0x486>
 808f0c0:	08092f28 	.word	0x08092f28
 808f0c4:	fffffc02 	.word	0xfffffc02
 808f0c8:	7ff00000 	.word	0x7ff00000
 808f0cc:	39500000 	.word	0x39500000
 808f0d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808f0d4:	d166      	bne.n	808f1a4 <_strtod_l+0x964>
 808f0d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808f0d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808f0dc:	b35a      	cbz	r2, 808f136 <_strtod_l+0x8f6>
 808f0de:	4a9c      	ldr	r2, [pc, #624]	; (808f350 <_strtod_l+0xb10>)
 808f0e0:	4293      	cmp	r3, r2
 808f0e2:	d12c      	bne.n	808f13e <_strtod_l+0x8fe>
 808f0e4:	9b05      	ldr	r3, [sp, #20]
 808f0e6:	4640      	mov	r0, r8
 808f0e8:	b303      	cbz	r3, 808f12c <_strtod_l+0x8ec>
 808f0ea:	464b      	mov	r3, r9
 808f0ec:	4a99      	ldr	r2, [pc, #612]	; (808f354 <_strtod_l+0xb14>)
 808f0ee:	f04f 31ff 	mov.w	r1, #4294967295
 808f0f2:	401a      	ands	r2, r3
 808f0f4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 808f0f8:	d81b      	bhi.n	808f132 <_strtod_l+0x8f2>
 808f0fa:	0d12      	lsrs	r2, r2, #20
 808f0fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 808f100:	fa01 f303 	lsl.w	r3, r1, r3
 808f104:	4298      	cmp	r0, r3
 808f106:	d11a      	bne.n	808f13e <_strtod_l+0x8fe>
 808f108:	4b93      	ldr	r3, [pc, #588]	; (808f358 <_strtod_l+0xb18>)
 808f10a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808f10c:	429a      	cmp	r2, r3
 808f10e:	d102      	bne.n	808f116 <_strtod_l+0x8d6>
 808f110:	3001      	adds	r0, #1
 808f112:	f43f add8 	beq.w	808ecc6 <_strtod_l+0x486>
 808f116:	f04f 0800 	mov.w	r8, #0
 808f11a:	4b8e      	ldr	r3, [pc, #568]	; (808f354 <_strtod_l+0xb14>)
 808f11c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808f11e:	401a      	ands	r2, r3
 808f120:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 808f124:	9b05      	ldr	r3, [sp, #20]
 808f126:	2b00      	cmp	r3, #0
 808f128:	d196      	bne.n	808f058 <_strtod_l+0x818>
 808f12a:	e5d7      	b.n	808ecdc <_strtod_l+0x49c>
 808f12c:	f04f 33ff 	mov.w	r3, #4294967295
 808f130:	e7e8      	b.n	808f104 <_strtod_l+0x8c4>
 808f132:	460b      	mov	r3, r1
 808f134:	e7e6      	b.n	808f104 <_strtod_l+0x8c4>
 808f136:	ea53 0308 	orrs.w	r3, r3, r8
 808f13a:	f43f af7d 	beq.w	808f038 <_strtod_l+0x7f8>
 808f13e:	b1e5      	cbz	r5, 808f17a <_strtod_l+0x93a>
 808f140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808f142:	421d      	tst	r5, r3
 808f144:	d0ee      	beq.n	808f124 <_strtod_l+0x8e4>
 808f146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808f148:	4640      	mov	r0, r8
 808f14a:	4649      	mov	r1, r9
 808f14c:	9a05      	ldr	r2, [sp, #20]
 808f14e:	b1c3      	cbz	r3, 808f182 <_strtod_l+0x942>
 808f150:	f7ff fb53 	bl	808e7fa <sulp>
 808f154:	4602      	mov	r2, r0
 808f156:	460b      	mov	r3, r1
 808f158:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808f15c:	f7fe f97e 	bl	808d45c <__adddf3>
 808f160:	4680      	mov	r8, r0
 808f162:	4689      	mov	r9, r1
 808f164:	e7de      	b.n	808f124 <_strtod_l+0x8e4>
 808f166:	4013      	ands	r3, r2
 808f168:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808f16c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808f170:	f04f 38ff 	mov.w	r8, #4294967295
 808f174:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808f178:	e7d4      	b.n	808f124 <_strtod_l+0x8e4>
 808f17a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808f17c:	ea13 0f08 	tst.w	r3, r8
 808f180:	e7e0      	b.n	808f144 <_strtod_l+0x904>
 808f182:	f7ff fb3a 	bl	808e7fa <sulp>
 808f186:	4602      	mov	r2, r0
 808f188:	460b      	mov	r3, r1
 808f18a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808f18e:	f7fe f963 	bl	808d458 <__aeabi_dsub>
 808f192:	2200      	movs	r2, #0
 808f194:	2300      	movs	r3, #0
 808f196:	4680      	mov	r8, r0
 808f198:	4689      	mov	r9, r1
 808f19a:	f7fe fd7d 	bl	808dc98 <__aeabi_dcmpeq>
 808f19e:	2800      	cmp	r0, #0
 808f1a0:	d0c0      	beq.n	808f124 <_strtod_l+0x8e4>
 808f1a2:	e602      	b.n	808edaa <_strtod_l+0x56a>
 808f1a4:	4658      	mov	r0, fp
 808f1a6:	9904      	ldr	r1, [sp, #16]
 808f1a8:	f001 f931 	bl	809040e <__ratio>
 808f1ac:	2200      	movs	r2, #0
 808f1ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808f1b2:	4606      	mov	r6, r0
 808f1b4:	460f      	mov	r7, r1
 808f1b6:	f7fe fd83 	bl	808dcc0 <__aeabi_dcmple>
 808f1ba:	2800      	cmp	r0, #0
 808f1bc:	d075      	beq.n	808f2aa <_strtod_l+0xa6a>
 808f1be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808f1c0:	2b00      	cmp	r3, #0
 808f1c2:	d047      	beq.n	808f254 <_strtod_l+0xa14>
 808f1c4:	2600      	movs	r6, #0
 808f1c6:	4f65      	ldr	r7, [pc, #404]	; (808f35c <_strtod_l+0xb1c>)
 808f1c8:	4d64      	ldr	r5, [pc, #400]	; (808f35c <_strtod_l+0xb1c>)
 808f1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808f1cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 808f1d0:	0d1b      	lsrs	r3, r3, #20
 808f1d2:	051b      	lsls	r3, r3, #20
 808f1d4:	930f      	str	r3, [sp, #60]	; 0x3c
 808f1d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808f1d8:	4b61      	ldr	r3, [pc, #388]	; (808f360 <_strtod_l+0xb20>)
 808f1da:	429a      	cmp	r2, r3
 808f1dc:	f040 80c8 	bne.w	808f370 <_strtod_l+0xb30>
 808f1e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808f1e4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 808f1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808f1ea:	4640      	mov	r0, r8
 808f1ec:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 808f1f0:	4649      	mov	r1, r9
 808f1f2:	f001 f843 	bl	809027c <__ulp>
 808f1f6:	4602      	mov	r2, r0
 808f1f8:	460b      	mov	r3, r1
 808f1fa:	4630      	mov	r0, r6
 808f1fc:	4639      	mov	r1, r7
 808f1fe:	f7fe fae3 	bl	808d7c8 <__aeabi_dmul>
 808f202:	4642      	mov	r2, r8
 808f204:	464b      	mov	r3, r9
 808f206:	f7fe f929 	bl	808d45c <__adddf3>
 808f20a:	460b      	mov	r3, r1
 808f20c:	4951      	ldr	r1, [pc, #324]	; (808f354 <_strtod_l+0xb14>)
 808f20e:	4a55      	ldr	r2, [pc, #340]	; (808f364 <_strtod_l+0xb24>)
 808f210:	4019      	ands	r1, r3
 808f212:	4291      	cmp	r1, r2
 808f214:	4680      	mov	r8, r0
 808f216:	d95e      	bls.n	808f2d6 <_strtod_l+0xa96>
 808f218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808f21a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 808f21e:	4293      	cmp	r3, r2
 808f220:	d103      	bne.n	808f22a <_strtod_l+0x9ea>
 808f222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808f224:	3301      	adds	r3, #1
 808f226:	f43f ad4e 	beq.w	808ecc6 <_strtod_l+0x486>
 808f22a:	f04f 38ff 	mov.w	r8, #4294967295
 808f22e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 808f358 <_strtod_l+0xb18>
 808f232:	4650      	mov	r0, sl
 808f234:	991c      	ldr	r1, [sp, #112]	; 0x70
 808f236:	f000 fd57 	bl	808fce8 <_Bfree>
 808f23a:	4650      	mov	r0, sl
 808f23c:	9906      	ldr	r1, [sp, #24]
 808f23e:	f000 fd53 	bl	808fce8 <_Bfree>
 808f242:	4650      	mov	r0, sl
 808f244:	9904      	ldr	r1, [sp, #16]
 808f246:	f000 fd4f 	bl	808fce8 <_Bfree>
 808f24a:	4659      	mov	r1, fp
 808f24c:	4650      	mov	r0, sl
 808f24e:	f000 fd4b 	bl	808fce8 <_Bfree>
 808f252:	e61c      	b.n	808ee8e <_strtod_l+0x64e>
 808f254:	f1b8 0f00 	cmp.w	r8, #0
 808f258:	d119      	bne.n	808f28e <_strtod_l+0xa4e>
 808f25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808f25c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 808f260:	b9e3      	cbnz	r3, 808f29c <_strtod_l+0xa5c>
 808f262:	2200      	movs	r2, #0
 808f264:	4630      	mov	r0, r6
 808f266:	4639      	mov	r1, r7
 808f268:	4b3c      	ldr	r3, [pc, #240]	; (808f35c <_strtod_l+0xb1c>)
 808f26a:	f7fe fd1f 	bl	808dcac <__aeabi_dcmplt>
 808f26e:	b9c8      	cbnz	r0, 808f2a4 <_strtod_l+0xa64>
 808f270:	2200      	movs	r2, #0
 808f272:	4630      	mov	r0, r6
 808f274:	4639      	mov	r1, r7
 808f276:	4b3c      	ldr	r3, [pc, #240]	; (808f368 <_strtod_l+0xb28>)
 808f278:	f7fe faa6 	bl	808d7c8 <__aeabi_dmul>
 808f27c:	4604      	mov	r4, r0
 808f27e:	460d      	mov	r5, r1
 808f280:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808f284:	9418      	str	r4, [sp, #96]	; 0x60
 808f286:	9319      	str	r3, [sp, #100]	; 0x64
 808f288:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 808f28c:	e79d      	b.n	808f1ca <_strtod_l+0x98a>
 808f28e:	f1b8 0f01 	cmp.w	r8, #1
 808f292:	d103      	bne.n	808f29c <_strtod_l+0xa5c>
 808f294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808f296:	2b00      	cmp	r3, #0
 808f298:	f43f ad87 	beq.w	808edaa <_strtod_l+0x56a>
 808f29c:	2600      	movs	r6, #0
 808f29e:	2400      	movs	r4, #0
 808f2a0:	4f32      	ldr	r7, [pc, #200]	; (808f36c <_strtod_l+0xb2c>)
 808f2a2:	e791      	b.n	808f1c8 <_strtod_l+0x988>
 808f2a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 808f2a6:	4d30      	ldr	r5, [pc, #192]	; (808f368 <_strtod_l+0xb28>)
 808f2a8:	e7ea      	b.n	808f280 <_strtod_l+0xa40>
 808f2aa:	4b2f      	ldr	r3, [pc, #188]	; (808f368 <_strtod_l+0xb28>)
 808f2ac:	2200      	movs	r2, #0
 808f2ae:	4630      	mov	r0, r6
 808f2b0:	4639      	mov	r1, r7
 808f2b2:	f7fe fa89 	bl	808d7c8 <__aeabi_dmul>
 808f2b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808f2b8:	4604      	mov	r4, r0
 808f2ba:	460d      	mov	r5, r1
 808f2bc:	b933      	cbnz	r3, 808f2cc <_strtod_l+0xa8c>
 808f2be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808f2c2:	9010      	str	r0, [sp, #64]	; 0x40
 808f2c4:	9311      	str	r3, [sp, #68]	; 0x44
 808f2c6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808f2ca:	e77e      	b.n	808f1ca <_strtod_l+0x98a>
 808f2cc:	4602      	mov	r2, r0
 808f2ce:	460b      	mov	r3, r1
 808f2d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808f2d4:	e7f7      	b.n	808f2c6 <_strtod_l+0xa86>
 808f2d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 808f2da:	9b05      	ldr	r3, [sp, #20]
 808f2dc:	2b00      	cmp	r3, #0
 808f2de:	d1a8      	bne.n	808f232 <_strtod_l+0x9f2>
 808f2e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808f2e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808f2e6:	0d1b      	lsrs	r3, r3, #20
 808f2e8:	051b      	lsls	r3, r3, #20
 808f2ea:	429a      	cmp	r2, r3
 808f2ec:	d1a1      	bne.n	808f232 <_strtod_l+0x9f2>
 808f2ee:	4620      	mov	r0, r4
 808f2f0:	4629      	mov	r1, r5
 808f2f2:	f001 f919 	bl	8090528 <__aeabi_d2lz>
 808f2f6:	f7fe fa39 	bl	808d76c <__aeabi_l2d>
 808f2fa:	4602      	mov	r2, r0
 808f2fc:	460b      	mov	r3, r1
 808f2fe:	4620      	mov	r0, r4
 808f300:	4629      	mov	r1, r5
 808f302:	f7fe f8a9 	bl	808d458 <__aeabi_dsub>
 808f306:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808f308:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808f30c:	ea43 0308 	orr.w	r3, r3, r8
 808f310:	4313      	orrs	r3, r2
 808f312:	4604      	mov	r4, r0
 808f314:	460d      	mov	r5, r1
 808f316:	d066      	beq.n	808f3e6 <_strtod_l+0xba6>
 808f318:	a309      	add	r3, pc, #36	; (adr r3, 808f340 <_strtod_l+0xb00>)
 808f31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808f31e:	f7fe fcc5 	bl	808dcac <__aeabi_dcmplt>
 808f322:	2800      	cmp	r0, #0
 808f324:	f47f acda 	bne.w	808ecdc <_strtod_l+0x49c>
 808f328:	a307      	add	r3, pc, #28	; (adr r3, 808f348 <_strtod_l+0xb08>)
 808f32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808f32e:	4620      	mov	r0, r4
 808f330:	4629      	mov	r1, r5
 808f332:	f7fe fcd9 	bl	808dce8 <__aeabi_dcmpgt>
 808f336:	2800      	cmp	r0, #0
 808f338:	f43f af7b 	beq.w	808f232 <_strtod_l+0x9f2>
 808f33c:	e4ce      	b.n	808ecdc <_strtod_l+0x49c>
 808f33e:	bf00      	nop
 808f340:	94a03595 	.word	0x94a03595
 808f344:	3fdfffff 	.word	0x3fdfffff
 808f348:	35afe535 	.word	0x35afe535
 808f34c:	3fe00000 	.word	0x3fe00000
 808f350:	000fffff 	.word	0x000fffff
 808f354:	7ff00000 	.word	0x7ff00000
 808f358:	7fefffff 	.word	0x7fefffff
 808f35c:	3ff00000 	.word	0x3ff00000
 808f360:	7fe00000 	.word	0x7fe00000
 808f364:	7c9fffff 	.word	0x7c9fffff
 808f368:	3fe00000 	.word	0x3fe00000
 808f36c:	bff00000 	.word	0xbff00000
 808f370:	9b05      	ldr	r3, [sp, #20]
 808f372:	b313      	cbz	r3, 808f3ba <_strtod_l+0xb7a>
 808f374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808f376:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808f37a:	d81e      	bhi.n	808f3ba <_strtod_l+0xb7a>
 808f37c:	a326      	add	r3, pc, #152	; (adr r3, 808f418 <_strtod_l+0xbd8>)
 808f37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808f382:	4620      	mov	r0, r4
 808f384:	4629      	mov	r1, r5
 808f386:	f7fe fc9b 	bl	808dcc0 <__aeabi_dcmple>
 808f38a:	b190      	cbz	r0, 808f3b2 <_strtod_l+0xb72>
 808f38c:	4629      	mov	r1, r5
 808f38e:	4620      	mov	r0, r4
 808f390:	f7fe fcf2 	bl	808dd78 <__aeabi_d2uiz>
 808f394:	2801      	cmp	r0, #1
 808f396:	bf38      	it	cc
 808f398:	2001      	movcc	r0, #1
 808f39a:	f7fe f99b 	bl	808d6d4 <__aeabi_ui2d>
 808f39e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808f3a0:	4604      	mov	r4, r0
 808f3a2:	460d      	mov	r5, r1
 808f3a4:	b9d3      	cbnz	r3, 808f3dc <_strtod_l+0xb9c>
 808f3a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808f3aa:	9012      	str	r0, [sp, #72]	; 0x48
 808f3ac:	9313      	str	r3, [sp, #76]	; 0x4c
 808f3ae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 808f3b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808f3b4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808f3b8:	1a9f      	subs	r7, r3, r2
 808f3ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808f3be:	f000 ff5d 	bl	809027c <__ulp>
 808f3c2:	4602      	mov	r2, r0
 808f3c4:	460b      	mov	r3, r1
 808f3c6:	4630      	mov	r0, r6
 808f3c8:	4639      	mov	r1, r7
 808f3ca:	f7fe f9fd 	bl	808d7c8 <__aeabi_dmul>
 808f3ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808f3d2:	f7fe f843 	bl	808d45c <__adddf3>
 808f3d6:	4680      	mov	r8, r0
 808f3d8:	4689      	mov	r9, r1
 808f3da:	e77e      	b.n	808f2da <_strtod_l+0xa9a>
 808f3dc:	4602      	mov	r2, r0
 808f3de:	460b      	mov	r3, r1
 808f3e0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 808f3e4:	e7e3      	b.n	808f3ae <_strtod_l+0xb6e>
 808f3e6:	a30e      	add	r3, pc, #56	; (adr r3, 808f420 <_strtod_l+0xbe0>)
 808f3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808f3ec:	f7fe fc5e 	bl	808dcac <__aeabi_dcmplt>
 808f3f0:	e7a1      	b.n	808f336 <_strtod_l+0xaf6>
 808f3f2:	2300      	movs	r3, #0
 808f3f4:	930c      	str	r3, [sp, #48]	; 0x30
 808f3f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808f3f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808f3fa:	6013      	str	r3, [r2, #0]
 808f3fc:	f7ff ba65 	b.w	808e8ca <_strtod_l+0x8a>
 808f400:	2b65      	cmp	r3, #101	; 0x65
 808f402:	f43f ab5c 	beq.w	808eabe <_strtod_l+0x27e>
 808f406:	2b45      	cmp	r3, #69	; 0x45
 808f408:	f43f ab59 	beq.w	808eabe <_strtod_l+0x27e>
 808f40c:	2201      	movs	r2, #1
 808f40e:	f7ff bb8d 	b.w	808eb2c <_strtod_l+0x2ec>
 808f412:	bf00      	nop
 808f414:	f3af 8000 	nop.w
 808f418:	ffc00000 	.word	0xffc00000
 808f41c:	41dfffff 	.word	0x41dfffff
 808f420:	94a03595 	.word	0x94a03595
 808f424:	3fcfffff 	.word	0x3fcfffff

0808f428 <strtod>:
 808f428:	460a      	mov	r2, r1
 808f42a:	4601      	mov	r1, r0
 808f42c:	4802      	ldr	r0, [pc, #8]	; (808f438 <strtod+0x10>)
 808f42e:	4b03      	ldr	r3, [pc, #12]	; (808f43c <strtod+0x14>)
 808f430:	6800      	ldr	r0, [r0, #0]
 808f432:	f7ff ba05 	b.w	808e840 <_strtod_l>
 808f436:	bf00      	nop
 808f438:	200000e8 	.word	0x200000e8
 808f43c:	20000150 	.word	0x20000150

0808f440 <__strtok_r>:
 808f440:	b5f0      	push	{r4, r5, r6, r7, lr}
 808f442:	b908      	cbnz	r0, 808f448 <__strtok_r+0x8>
 808f444:	6810      	ldr	r0, [r2, #0]
 808f446:	b188      	cbz	r0, 808f46c <__strtok_r+0x2c>
 808f448:	4604      	mov	r4, r0
 808f44a:	460f      	mov	r7, r1
 808f44c:	4620      	mov	r0, r4
 808f44e:	f814 5b01 	ldrb.w	r5, [r4], #1
 808f452:	f817 6b01 	ldrb.w	r6, [r7], #1
 808f456:	b91e      	cbnz	r6, 808f460 <__strtok_r+0x20>
 808f458:	b965      	cbnz	r5, 808f474 <__strtok_r+0x34>
 808f45a:	4628      	mov	r0, r5
 808f45c:	6015      	str	r5, [r2, #0]
 808f45e:	e005      	b.n	808f46c <__strtok_r+0x2c>
 808f460:	42b5      	cmp	r5, r6
 808f462:	d1f6      	bne.n	808f452 <__strtok_r+0x12>
 808f464:	2b00      	cmp	r3, #0
 808f466:	d1f0      	bne.n	808f44a <__strtok_r+0xa>
 808f468:	6014      	str	r4, [r2, #0]
 808f46a:	7003      	strb	r3, [r0, #0]
 808f46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808f46e:	461c      	mov	r4, r3
 808f470:	e00c      	b.n	808f48c <__strtok_r+0x4c>
 808f472:	b915      	cbnz	r5, 808f47a <__strtok_r+0x3a>
 808f474:	460e      	mov	r6, r1
 808f476:	f814 3b01 	ldrb.w	r3, [r4], #1
 808f47a:	f816 5b01 	ldrb.w	r5, [r6], #1
 808f47e:	42ab      	cmp	r3, r5
 808f480:	d1f7      	bne.n	808f472 <__strtok_r+0x32>
 808f482:	2b00      	cmp	r3, #0
 808f484:	d0f3      	beq.n	808f46e <__strtok_r+0x2e>
 808f486:	2300      	movs	r3, #0
 808f488:	f804 3c01 	strb.w	r3, [r4, #-1]
 808f48c:	6014      	str	r4, [r2, #0]
 808f48e:	e7ed      	b.n	808f46c <__strtok_r+0x2c>

0808f490 <strtok_r>:
 808f490:	2301      	movs	r3, #1
 808f492:	f7ff bfd5 	b.w	808f440 <__strtok_r>
	...

0808f498 <_strtol_l.isra.0>:
 808f498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808f49c:	468c      	mov	ip, r1
 808f49e:	4686      	mov	lr, r0
 808f4a0:	4e39      	ldr	r6, [pc, #228]	; (808f588 <_strtol_l.isra.0+0xf0>)
 808f4a2:	4660      	mov	r0, ip
 808f4a4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808f4a8:	5da5      	ldrb	r5, [r4, r6]
 808f4aa:	f015 0508 	ands.w	r5, r5, #8
 808f4ae:	d1f8      	bne.n	808f4a2 <_strtol_l.isra.0+0xa>
 808f4b0:	2c2d      	cmp	r4, #45	; 0x2d
 808f4b2:	d133      	bne.n	808f51c <_strtol_l.isra.0+0x84>
 808f4b4:	f04f 0801 	mov.w	r8, #1
 808f4b8:	f89c 4000 	ldrb.w	r4, [ip]
 808f4bc:	f100 0c02 	add.w	ip, r0, #2
 808f4c0:	2b00      	cmp	r3, #0
 808f4c2:	d05c      	beq.n	808f57e <_strtol_l.isra.0+0xe6>
 808f4c4:	2b10      	cmp	r3, #16
 808f4c6:	d10c      	bne.n	808f4e2 <_strtol_l.isra.0+0x4a>
 808f4c8:	2c30      	cmp	r4, #48	; 0x30
 808f4ca:	d10a      	bne.n	808f4e2 <_strtol_l.isra.0+0x4a>
 808f4cc:	f89c 0000 	ldrb.w	r0, [ip]
 808f4d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808f4d4:	2858      	cmp	r0, #88	; 0x58
 808f4d6:	d14d      	bne.n	808f574 <_strtol_l.isra.0+0xdc>
 808f4d8:	2310      	movs	r3, #16
 808f4da:	f89c 4001 	ldrb.w	r4, [ip, #1]
 808f4de:	f10c 0c02 	add.w	ip, ip, #2
 808f4e2:	2600      	movs	r6, #0
 808f4e4:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 808f4e8:	3f01      	subs	r7, #1
 808f4ea:	fbb7 f9f3 	udiv	r9, r7, r3
 808f4ee:	4630      	mov	r0, r6
 808f4f0:	fb03 7a19 	mls	sl, r3, r9, r7
 808f4f4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 808f4f8:	2d09      	cmp	r5, #9
 808f4fa:	d818      	bhi.n	808f52e <_strtol_l.isra.0+0x96>
 808f4fc:	462c      	mov	r4, r5
 808f4fe:	42a3      	cmp	r3, r4
 808f500:	dd24      	ble.n	808f54c <_strtol_l.isra.0+0xb4>
 808f502:	1c75      	adds	r5, r6, #1
 808f504:	d007      	beq.n	808f516 <_strtol_l.isra.0+0x7e>
 808f506:	4581      	cmp	r9, r0
 808f508:	d31d      	bcc.n	808f546 <_strtol_l.isra.0+0xae>
 808f50a:	d101      	bne.n	808f510 <_strtol_l.isra.0+0x78>
 808f50c:	45a2      	cmp	sl, r4
 808f50e:	db1a      	blt.n	808f546 <_strtol_l.isra.0+0xae>
 808f510:	2601      	movs	r6, #1
 808f512:	fb00 4003 	mla	r0, r0, r3, r4
 808f516:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808f51a:	e7eb      	b.n	808f4f4 <_strtol_l.isra.0+0x5c>
 808f51c:	2c2b      	cmp	r4, #43	; 0x2b
 808f51e:	bf08      	it	eq
 808f520:	f89c 4000 	ldrbeq.w	r4, [ip]
 808f524:	46a8      	mov	r8, r5
 808f526:	bf08      	it	eq
 808f528:	f100 0c02 	addeq.w	ip, r0, #2
 808f52c:	e7c8      	b.n	808f4c0 <_strtol_l.isra.0+0x28>
 808f52e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 808f532:	2d19      	cmp	r5, #25
 808f534:	d801      	bhi.n	808f53a <_strtol_l.isra.0+0xa2>
 808f536:	3c37      	subs	r4, #55	; 0x37
 808f538:	e7e1      	b.n	808f4fe <_strtol_l.isra.0+0x66>
 808f53a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 808f53e:	2d19      	cmp	r5, #25
 808f540:	d804      	bhi.n	808f54c <_strtol_l.isra.0+0xb4>
 808f542:	3c57      	subs	r4, #87	; 0x57
 808f544:	e7db      	b.n	808f4fe <_strtol_l.isra.0+0x66>
 808f546:	f04f 36ff 	mov.w	r6, #4294967295
 808f54a:	e7e4      	b.n	808f516 <_strtol_l.isra.0+0x7e>
 808f54c:	1c73      	adds	r3, r6, #1
 808f54e:	d106      	bne.n	808f55e <_strtol_l.isra.0+0xc6>
 808f550:	2322      	movs	r3, #34	; 0x22
 808f552:	4638      	mov	r0, r7
 808f554:	f8ce 3000 	str.w	r3, [lr]
 808f558:	b942      	cbnz	r2, 808f56c <_strtol_l.isra.0+0xd4>
 808f55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808f55e:	f1b8 0f00 	cmp.w	r8, #0
 808f562:	d000      	beq.n	808f566 <_strtol_l.isra.0+0xce>
 808f564:	4240      	negs	r0, r0
 808f566:	2a00      	cmp	r2, #0
 808f568:	d0f7      	beq.n	808f55a <_strtol_l.isra.0+0xc2>
 808f56a:	b10e      	cbz	r6, 808f570 <_strtol_l.isra.0+0xd8>
 808f56c:	f10c 31ff 	add.w	r1, ip, #4294967295
 808f570:	6011      	str	r1, [r2, #0]
 808f572:	e7f2      	b.n	808f55a <_strtol_l.isra.0+0xc2>
 808f574:	2430      	movs	r4, #48	; 0x30
 808f576:	2b00      	cmp	r3, #0
 808f578:	d1b3      	bne.n	808f4e2 <_strtol_l.isra.0+0x4a>
 808f57a:	2308      	movs	r3, #8
 808f57c:	e7b1      	b.n	808f4e2 <_strtol_l.isra.0+0x4a>
 808f57e:	2c30      	cmp	r4, #48	; 0x30
 808f580:	d0a4      	beq.n	808f4cc <_strtol_l.isra.0+0x34>
 808f582:	230a      	movs	r3, #10
 808f584:	e7ad      	b.n	808f4e2 <_strtol_l.isra.0+0x4a>
 808f586:	bf00      	nop
 808f588:	08092f51 	.word	0x08092f51

0808f58c <strtol>:
 808f58c:	4613      	mov	r3, r2
 808f58e:	460a      	mov	r2, r1
 808f590:	4601      	mov	r1, r0
 808f592:	4802      	ldr	r0, [pc, #8]	; (808f59c <strtol+0x10>)
 808f594:	6800      	ldr	r0, [r0, #0]
 808f596:	f7ff bf7f 	b.w	808f498 <_strtol_l.isra.0>
 808f59a:	bf00      	nop
 808f59c:	200000e8 	.word	0x200000e8

0808f5a0 <toupper>:
 808f5a0:	4b03      	ldr	r3, [pc, #12]	; (808f5b0 <toupper+0x10>)
 808f5a2:	5cc3      	ldrb	r3, [r0, r3]
 808f5a4:	f003 0303 	and.w	r3, r3, #3
 808f5a8:	2b02      	cmp	r3, #2
 808f5aa:	bf08      	it	eq
 808f5ac:	3820      	subeq	r0, #32
 808f5ae:	4770      	bx	lr
 808f5b0:	08092f51 	.word	0x08092f51

0808f5b4 <rshift>:
 808f5b4:	6903      	ldr	r3, [r0, #16]
 808f5b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808f5ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 808f5be:	f100 0414 	add.w	r4, r0, #20
 808f5c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 808f5c6:	dd46      	ble.n	808f656 <rshift+0xa2>
 808f5c8:	f011 011f 	ands.w	r1, r1, #31
 808f5cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 808f5d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 808f5d4:	d10c      	bne.n	808f5f0 <rshift+0x3c>
 808f5d6:	4629      	mov	r1, r5
 808f5d8:	f100 0710 	add.w	r7, r0, #16
 808f5dc:	42b1      	cmp	r1, r6
 808f5de:	d335      	bcc.n	808f64c <rshift+0x98>
 808f5e0:	1a9b      	subs	r3, r3, r2
 808f5e2:	009b      	lsls	r3, r3, #2
 808f5e4:	1eea      	subs	r2, r5, #3
 808f5e6:	4296      	cmp	r6, r2
 808f5e8:	bf38      	it	cc
 808f5ea:	2300      	movcc	r3, #0
 808f5ec:	4423      	add	r3, r4
 808f5ee:	e015      	b.n	808f61c <rshift+0x68>
 808f5f0:	46a1      	mov	r9, r4
 808f5f2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 808f5f6:	f1c1 0820 	rsb	r8, r1, #32
 808f5fa:	40cf      	lsrs	r7, r1
 808f5fc:	f105 0e04 	add.w	lr, r5, #4
 808f600:	4576      	cmp	r6, lr
 808f602:	46f4      	mov	ip, lr
 808f604:	d816      	bhi.n	808f634 <rshift+0x80>
 808f606:	1a9b      	subs	r3, r3, r2
 808f608:	009a      	lsls	r2, r3, #2
 808f60a:	3a04      	subs	r2, #4
 808f60c:	3501      	adds	r5, #1
 808f60e:	42ae      	cmp	r6, r5
 808f610:	bf38      	it	cc
 808f612:	2200      	movcc	r2, #0
 808f614:	18a3      	adds	r3, r4, r2
 808f616:	50a7      	str	r7, [r4, r2]
 808f618:	b107      	cbz	r7, 808f61c <rshift+0x68>
 808f61a:	3304      	adds	r3, #4
 808f61c:	42a3      	cmp	r3, r4
 808f61e:	eba3 0204 	sub.w	r2, r3, r4
 808f622:	bf08      	it	eq
 808f624:	2300      	moveq	r3, #0
 808f626:	ea4f 02a2 	mov.w	r2, r2, asr #2
 808f62a:	6102      	str	r2, [r0, #16]
 808f62c:	bf08      	it	eq
 808f62e:	6143      	streq	r3, [r0, #20]
 808f630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808f634:	f8dc c000 	ldr.w	ip, [ip]
 808f638:	fa0c fc08 	lsl.w	ip, ip, r8
 808f63c:	ea4c 0707 	orr.w	r7, ip, r7
 808f640:	f849 7b04 	str.w	r7, [r9], #4
 808f644:	f85e 7b04 	ldr.w	r7, [lr], #4
 808f648:	40cf      	lsrs	r7, r1
 808f64a:	e7d9      	b.n	808f600 <rshift+0x4c>
 808f64c:	f851 cb04 	ldr.w	ip, [r1], #4
 808f650:	f847 cf04 	str.w	ip, [r7, #4]!
 808f654:	e7c2      	b.n	808f5dc <rshift+0x28>
 808f656:	4623      	mov	r3, r4
 808f658:	e7e0      	b.n	808f61c <rshift+0x68>

0808f65a <__hexdig_fun>:
 808f65a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808f65e:	2b09      	cmp	r3, #9
 808f660:	d802      	bhi.n	808f668 <__hexdig_fun+0xe>
 808f662:	3820      	subs	r0, #32
 808f664:	b2c0      	uxtb	r0, r0
 808f666:	4770      	bx	lr
 808f668:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808f66c:	2b05      	cmp	r3, #5
 808f66e:	d801      	bhi.n	808f674 <__hexdig_fun+0x1a>
 808f670:	3847      	subs	r0, #71	; 0x47
 808f672:	e7f7      	b.n	808f664 <__hexdig_fun+0xa>
 808f674:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808f678:	2b05      	cmp	r3, #5
 808f67a:	d801      	bhi.n	808f680 <__hexdig_fun+0x26>
 808f67c:	3827      	subs	r0, #39	; 0x27
 808f67e:	e7f1      	b.n	808f664 <__hexdig_fun+0xa>
 808f680:	2000      	movs	r0, #0
 808f682:	4770      	bx	lr

0808f684 <__gethex>:
 808f684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808f688:	b08b      	sub	sp, #44	; 0x2c
 808f68a:	9306      	str	r3, [sp, #24]
 808f68c:	4bba      	ldr	r3, [pc, #744]	; (808f978 <__gethex+0x2f4>)
 808f68e:	9002      	str	r0, [sp, #8]
 808f690:	681b      	ldr	r3, [r3, #0]
 808f692:	468b      	mov	fp, r1
 808f694:	4618      	mov	r0, r3
 808f696:	4690      	mov	r8, r2
 808f698:	9303      	str	r3, [sp, #12]
 808f69a:	f7ff f86a 	bl	808e772 <strlen>
 808f69e:	4682      	mov	sl, r0
 808f6a0:	9b03      	ldr	r3, [sp, #12]
 808f6a2:	f8db 2000 	ldr.w	r2, [fp]
 808f6a6:	4403      	add	r3, r0
 808f6a8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808f6ac:	9307      	str	r3, [sp, #28]
 808f6ae:	1c93      	adds	r3, r2, #2
 808f6b0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 808f6b4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 808f6b8:	32fe      	adds	r2, #254	; 0xfe
 808f6ba:	18d1      	adds	r1, r2, r3
 808f6bc:	461f      	mov	r7, r3
 808f6be:	f813 0b01 	ldrb.w	r0, [r3], #1
 808f6c2:	9101      	str	r1, [sp, #4]
 808f6c4:	2830      	cmp	r0, #48	; 0x30
 808f6c6:	d0f8      	beq.n	808f6ba <__gethex+0x36>
 808f6c8:	f7ff ffc7 	bl	808f65a <__hexdig_fun>
 808f6cc:	4604      	mov	r4, r0
 808f6ce:	2800      	cmp	r0, #0
 808f6d0:	d13a      	bne.n	808f748 <__gethex+0xc4>
 808f6d2:	4652      	mov	r2, sl
 808f6d4:	4638      	mov	r0, r7
 808f6d6:	9903      	ldr	r1, [sp, #12]
 808f6d8:	f7ff f853 	bl	808e782 <strncmp>
 808f6dc:	4605      	mov	r5, r0
 808f6de:	2800      	cmp	r0, #0
 808f6e0:	d166      	bne.n	808f7b0 <__gethex+0x12c>
 808f6e2:	f817 000a 	ldrb.w	r0, [r7, sl]
 808f6e6:	eb07 060a 	add.w	r6, r7, sl
 808f6ea:	f7ff ffb6 	bl	808f65a <__hexdig_fun>
 808f6ee:	2800      	cmp	r0, #0
 808f6f0:	d060      	beq.n	808f7b4 <__gethex+0x130>
 808f6f2:	4633      	mov	r3, r6
 808f6f4:	7818      	ldrb	r0, [r3, #0]
 808f6f6:	461f      	mov	r7, r3
 808f6f8:	2830      	cmp	r0, #48	; 0x30
 808f6fa:	f103 0301 	add.w	r3, r3, #1
 808f6fe:	d0f9      	beq.n	808f6f4 <__gethex+0x70>
 808f700:	f7ff ffab 	bl	808f65a <__hexdig_fun>
 808f704:	2301      	movs	r3, #1
 808f706:	fab0 f480 	clz	r4, r0
 808f70a:	4635      	mov	r5, r6
 808f70c:	0964      	lsrs	r4, r4, #5
 808f70e:	9301      	str	r3, [sp, #4]
 808f710:	463a      	mov	r2, r7
 808f712:	4616      	mov	r6, r2
 808f714:	7830      	ldrb	r0, [r6, #0]
 808f716:	3201      	adds	r2, #1
 808f718:	f7ff ff9f 	bl	808f65a <__hexdig_fun>
 808f71c:	2800      	cmp	r0, #0
 808f71e:	d1f8      	bne.n	808f712 <__gethex+0x8e>
 808f720:	4652      	mov	r2, sl
 808f722:	4630      	mov	r0, r6
 808f724:	9903      	ldr	r1, [sp, #12]
 808f726:	f7ff f82c 	bl	808e782 <strncmp>
 808f72a:	b980      	cbnz	r0, 808f74e <__gethex+0xca>
 808f72c:	b94d      	cbnz	r5, 808f742 <__gethex+0xbe>
 808f72e:	eb06 050a 	add.w	r5, r6, sl
 808f732:	462a      	mov	r2, r5
 808f734:	4616      	mov	r6, r2
 808f736:	7830      	ldrb	r0, [r6, #0]
 808f738:	3201      	adds	r2, #1
 808f73a:	f7ff ff8e 	bl	808f65a <__hexdig_fun>
 808f73e:	2800      	cmp	r0, #0
 808f740:	d1f8      	bne.n	808f734 <__gethex+0xb0>
 808f742:	1bad      	subs	r5, r5, r6
 808f744:	00ad      	lsls	r5, r5, #2
 808f746:	e004      	b.n	808f752 <__gethex+0xce>
 808f748:	2400      	movs	r4, #0
 808f74a:	4625      	mov	r5, r4
 808f74c:	e7e0      	b.n	808f710 <__gethex+0x8c>
 808f74e:	2d00      	cmp	r5, #0
 808f750:	d1f7      	bne.n	808f742 <__gethex+0xbe>
 808f752:	7833      	ldrb	r3, [r6, #0]
 808f754:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808f758:	2b50      	cmp	r3, #80	; 0x50
 808f75a:	d139      	bne.n	808f7d0 <__gethex+0x14c>
 808f75c:	7873      	ldrb	r3, [r6, #1]
 808f75e:	2b2b      	cmp	r3, #43	; 0x2b
 808f760:	d02a      	beq.n	808f7b8 <__gethex+0x134>
 808f762:	2b2d      	cmp	r3, #45	; 0x2d
 808f764:	d02c      	beq.n	808f7c0 <__gethex+0x13c>
 808f766:	f04f 0900 	mov.w	r9, #0
 808f76a:	1c71      	adds	r1, r6, #1
 808f76c:	7808      	ldrb	r0, [r1, #0]
 808f76e:	f7ff ff74 	bl	808f65a <__hexdig_fun>
 808f772:	1e43      	subs	r3, r0, #1
 808f774:	b2db      	uxtb	r3, r3
 808f776:	2b18      	cmp	r3, #24
 808f778:	d82a      	bhi.n	808f7d0 <__gethex+0x14c>
 808f77a:	f1a0 0210 	sub.w	r2, r0, #16
 808f77e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808f782:	f7ff ff6a 	bl	808f65a <__hexdig_fun>
 808f786:	1e43      	subs	r3, r0, #1
 808f788:	b2db      	uxtb	r3, r3
 808f78a:	2b18      	cmp	r3, #24
 808f78c:	d91b      	bls.n	808f7c6 <__gethex+0x142>
 808f78e:	f1b9 0f00 	cmp.w	r9, #0
 808f792:	d000      	beq.n	808f796 <__gethex+0x112>
 808f794:	4252      	negs	r2, r2
 808f796:	4415      	add	r5, r2
 808f798:	f8cb 1000 	str.w	r1, [fp]
 808f79c:	b1d4      	cbz	r4, 808f7d4 <__gethex+0x150>
 808f79e:	9b01      	ldr	r3, [sp, #4]
 808f7a0:	2b00      	cmp	r3, #0
 808f7a2:	bf14      	ite	ne
 808f7a4:	2700      	movne	r7, #0
 808f7a6:	2706      	moveq	r7, #6
 808f7a8:	4638      	mov	r0, r7
 808f7aa:	b00b      	add	sp, #44	; 0x2c
 808f7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f7b0:	463e      	mov	r6, r7
 808f7b2:	4625      	mov	r5, r4
 808f7b4:	2401      	movs	r4, #1
 808f7b6:	e7cc      	b.n	808f752 <__gethex+0xce>
 808f7b8:	f04f 0900 	mov.w	r9, #0
 808f7bc:	1cb1      	adds	r1, r6, #2
 808f7be:	e7d5      	b.n	808f76c <__gethex+0xe8>
 808f7c0:	f04f 0901 	mov.w	r9, #1
 808f7c4:	e7fa      	b.n	808f7bc <__gethex+0x138>
 808f7c6:	230a      	movs	r3, #10
 808f7c8:	fb03 0202 	mla	r2, r3, r2, r0
 808f7cc:	3a10      	subs	r2, #16
 808f7ce:	e7d6      	b.n	808f77e <__gethex+0xfa>
 808f7d0:	4631      	mov	r1, r6
 808f7d2:	e7e1      	b.n	808f798 <__gethex+0x114>
 808f7d4:	4621      	mov	r1, r4
 808f7d6:	1bf3      	subs	r3, r6, r7
 808f7d8:	3b01      	subs	r3, #1
 808f7da:	2b07      	cmp	r3, #7
 808f7dc:	dc50      	bgt.n	808f880 <__gethex+0x1fc>
 808f7de:	9802      	ldr	r0, [sp, #8]
 808f7e0:	f000 fa4e 	bl	808fc80 <_Balloc>
 808f7e4:	f04f 0b00 	mov.w	fp, #0
 808f7e8:	4604      	mov	r4, r0
 808f7ea:	f100 0914 	add.w	r9, r0, #20
 808f7ee:	f1ca 0301 	rsb	r3, sl, #1
 808f7f2:	f8cd 9010 	str.w	r9, [sp, #16]
 808f7f6:	f8cd b004 	str.w	fp, [sp, #4]
 808f7fa:	9308      	str	r3, [sp, #32]
 808f7fc:	42b7      	cmp	r7, r6
 808f7fe:	d342      	bcc.n	808f886 <__gethex+0x202>
 808f800:	9f04      	ldr	r7, [sp, #16]
 808f802:	9b01      	ldr	r3, [sp, #4]
 808f804:	f847 3b04 	str.w	r3, [r7], #4
 808f808:	eba7 0709 	sub.w	r7, r7, r9
 808f80c:	10bf      	asrs	r7, r7, #2
 808f80e:	6127      	str	r7, [r4, #16]
 808f810:	4618      	mov	r0, r3
 808f812:	f000 fafc 	bl	808fe0e <__hi0bits>
 808f816:	017f      	lsls	r7, r7, #5
 808f818:	f8d8 6000 	ldr.w	r6, [r8]
 808f81c:	1a3f      	subs	r7, r7, r0
 808f81e:	42b7      	cmp	r7, r6
 808f820:	dd65      	ble.n	808f8ee <__gethex+0x26a>
 808f822:	1bbf      	subs	r7, r7, r6
 808f824:	4639      	mov	r1, r7
 808f826:	4620      	mov	r0, r4
 808f828:	f000 fe42 	bl	80904b0 <__any_on>
 808f82c:	4682      	mov	sl, r0
 808f82e:	b1a8      	cbz	r0, 808f85c <__gethex+0x1d8>
 808f830:	f04f 0a01 	mov.w	sl, #1
 808f834:	1e7b      	subs	r3, r7, #1
 808f836:	1159      	asrs	r1, r3, #5
 808f838:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 808f83c:	f003 021f 	and.w	r2, r3, #31
 808f840:	fa0a f202 	lsl.w	r2, sl, r2
 808f844:	420a      	tst	r2, r1
 808f846:	d009      	beq.n	808f85c <__gethex+0x1d8>
 808f848:	4553      	cmp	r3, sl
 808f84a:	dd05      	ble.n	808f858 <__gethex+0x1d4>
 808f84c:	4620      	mov	r0, r4
 808f84e:	1eb9      	subs	r1, r7, #2
 808f850:	f000 fe2e 	bl	80904b0 <__any_on>
 808f854:	2800      	cmp	r0, #0
 808f856:	d147      	bne.n	808f8e8 <__gethex+0x264>
 808f858:	f04f 0a02 	mov.w	sl, #2
 808f85c:	4639      	mov	r1, r7
 808f85e:	4620      	mov	r0, r4
 808f860:	f7ff fea8 	bl	808f5b4 <rshift>
 808f864:	443d      	add	r5, r7
 808f866:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808f86a:	42ab      	cmp	r3, r5
 808f86c:	da4d      	bge.n	808f90a <__gethex+0x286>
 808f86e:	4621      	mov	r1, r4
 808f870:	9802      	ldr	r0, [sp, #8]
 808f872:	f000 fa39 	bl	808fce8 <_Bfree>
 808f876:	2300      	movs	r3, #0
 808f878:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808f87a:	27a3      	movs	r7, #163	; 0xa3
 808f87c:	6013      	str	r3, [r2, #0]
 808f87e:	e793      	b.n	808f7a8 <__gethex+0x124>
 808f880:	3101      	adds	r1, #1
 808f882:	105b      	asrs	r3, r3, #1
 808f884:	e7a9      	b.n	808f7da <__gethex+0x156>
 808f886:	1e73      	subs	r3, r6, #1
 808f888:	9a07      	ldr	r2, [sp, #28]
 808f88a:	9305      	str	r3, [sp, #20]
 808f88c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808f890:	4293      	cmp	r3, r2
 808f892:	d019      	beq.n	808f8c8 <__gethex+0x244>
 808f894:	f1bb 0f20 	cmp.w	fp, #32
 808f898:	d107      	bne.n	808f8aa <__gethex+0x226>
 808f89a:	9b04      	ldr	r3, [sp, #16]
 808f89c:	9a01      	ldr	r2, [sp, #4]
 808f89e:	f843 2b04 	str.w	r2, [r3], #4
 808f8a2:	9304      	str	r3, [sp, #16]
 808f8a4:	2300      	movs	r3, #0
 808f8a6:	469b      	mov	fp, r3
 808f8a8:	9301      	str	r3, [sp, #4]
 808f8aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808f8ae:	f7ff fed4 	bl	808f65a <__hexdig_fun>
 808f8b2:	9b01      	ldr	r3, [sp, #4]
 808f8b4:	f000 000f 	and.w	r0, r0, #15
 808f8b8:	fa00 f00b 	lsl.w	r0, r0, fp
 808f8bc:	4303      	orrs	r3, r0
 808f8be:	9301      	str	r3, [sp, #4]
 808f8c0:	f10b 0b04 	add.w	fp, fp, #4
 808f8c4:	9b05      	ldr	r3, [sp, #20]
 808f8c6:	e00d      	b.n	808f8e4 <__gethex+0x260>
 808f8c8:	9b05      	ldr	r3, [sp, #20]
 808f8ca:	9a08      	ldr	r2, [sp, #32]
 808f8cc:	4413      	add	r3, r2
 808f8ce:	42bb      	cmp	r3, r7
 808f8d0:	d3e0      	bcc.n	808f894 <__gethex+0x210>
 808f8d2:	4618      	mov	r0, r3
 808f8d4:	4652      	mov	r2, sl
 808f8d6:	9903      	ldr	r1, [sp, #12]
 808f8d8:	9309      	str	r3, [sp, #36]	; 0x24
 808f8da:	f7fe ff52 	bl	808e782 <strncmp>
 808f8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808f8e0:	2800      	cmp	r0, #0
 808f8e2:	d1d7      	bne.n	808f894 <__gethex+0x210>
 808f8e4:	461e      	mov	r6, r3
 808f8e6:	e789      	b.n	808f7fc <__gethex+0x178>
 808f8e8:	f04f 0a03 	mov.w	sl, #3
 808f8ec:	e7b6      	b.n	808f85c <__gethex+0x1d8>
 808f8ee:	da09      	bge.n	808f904 <__gethex+0x280>
 808f8f0:	1bf7      	subs	r7, r6, r7
 808f8f2:	4621      	mov	r1, r4
 808f8f4:	463a      	mov	r2, r7
 808f8f6:	9802      	ldr	r0, [sp, #8]
 808f8f8:	f000 fbca 	bl	8090090 <__lshift>
 808f8fc:	4604      	mov	r4, r0
 808f8fe:	1bed      	subs	r5, r5, r7
 808f900:	f100 0914 	add.w	r9, r0, #20
 808f904:	f04f 0a00 	mov.w	sl, #0
 808f908:	e7ad      	b.n	808f866 <__gethex+0x1e2>
 808f90a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808f90e:	42a8      	cmp	r0, r5
 808f910:	dd6e      	ble.n	808f9f0 <__gethex+0x36c>
 808f912:	1b45      	subs	r5, r0, r5
 808f914:	42ae      	cmp	r6, r5
 808f916:	dc31      	bgt.n	808f97c <__gethex+0x2f8>
 808f918:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808f91c:	2b02      	cmp	r3, #2
 808f91e:	d022      	beq.n	808f966 <__gethex+0x2e2>
 808f920:	2b03      	cmp	r3, #3
 808f922:	d024      	beq.n	808f96e <__gethex+0x2ea>
 808f924:	2b01      	cmp	r3, #1
 808f926:	d115      	bne.n	808f954 <__gethex+0x2d0>
 808f928:	42ae      	cmp	r6, r5
 808f92a:	d113      	bne.n	808f954 <__gethex+0x2d0>
 808f92c:	2e01      	cmp	r6, #1
 808f92e:	d10b      	bne.n	808f948 <__gethex+0x2c4>
 808f930:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808f934:	9a06      	ldr	r2, [sp, #24]
 808f936:	2762      	movs	r7, #98	; 0x62
 808f938:	6013      	str	r3, [r2, #0]
 808f93a:	2301      	movs	r3, #1
 808f93c:	6123      	str	r3, [r4, #16]
 808f93e:	f8c9 3000 	str.w	r3, [r9]
 808f942:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808f944:	601c      	str	r4, [r3, #0]
 808f946:	e72f      	b.n	808f7a8 <__gethex+0x124>
 808f948:	4620      	mov	r0, r4
 808f94a:	1e71      	subs	r1, r6, #1
 808f94c:	f000 fdb0 	bl	80904b0 <__any_on>
 808f950:	2800      	cmp	r0, #0
 808f952:	d1ed      	bne.n	808f930 <__gethex+0x2ac>
 808f954:	4621      	mov	r1, r4
 808f956:	9802      	ldr	r0, [sp, #8]
 808f958:	f000 f9c6 	bl	808fce8 <_Bfree>
 808f95c:	2300      	movs	r3, #0
 808f95e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808f960:	2750      	movs	r7, #80	; 0x50
 808f962:	6013      	str	r3, [r2, #0]
 808f964:	e720      	b.n	808f7a8 <__gethex+0x124>
 808f966:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808f968:	2b00      	cmp	r3, #0
 808f96a:	d1f3      	bne.n	808f954 <__gethex+0x2d0>
 808f96c:	e7e0      	b.n	808f930 <__gethex+0x2ac>
 808f96e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808f970:	2b00      	cmp	r3, #0
 808f972:	d1dd      	bne.n	808f930 <__gethex+0x2ac>
 808f974:	e7ee      	b.n	808f954 <__gethex+0x2d0>
 808f976:	bf00      	nop
 808f978:	08093054 	.word	0x08093054
 808f97c:	1e6f      	subs	r7, r5, #1
 808f97e:	f1ba 0f00 	cmp.w	sl, #0
 808f982:	d132      	bne.n	808f9ea <__gethex+0x366>
 808f984:	b127      	cbz	r7, 808f990 <__gethex+0x30c>
 808f986:	4639      	mov	r1, r7
 808f988:	4620      	mov	r0, r4
 808f98a:	f000 fd91 	bl	80904b0 <__any_on>
 808f98e:	4682      	mov	sl, r0
 808f990:	2101      	movs	r1, #1
 808f992:	117b      	asrs	r3, r7, #5
 808f994:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 808f998:	f007 071f 	and.w	r7, r7, #31
 808f99c:	fa01 f707 	lsl.w	r7, r1, r7
 808f9a0:	421f      	tst	r7, r3
 808f9a2:	f04f 0702 	mov.w	r7, #2
 808f9a6:	4629      	mov	r1, r5
 808f9a8:	4620      	mov	r0, r4
 808f9aa:	bf18      	it	ne
 808f9ac:	f04a 0a02 	orrne.w	sl, sl, #2
 808f9b0:	1b76      	subs	r6, r6, r5
 808f9b2:	f7ff fdff 	bl	808f5b4 <rshift>
 808f9b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 808f9ba:	f1ba 0f00 	cmp.w	sl, #0
 808f9be:	d048      	beq.n	808fa52 <__gethex+0x3ce>
 808f9c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808f9c4:	2b02      	cmp	r3, #2
 808f9c6:	d015      	beq.n	808f9f4 <__gethex+0x370>
 808f9c8:	2b03      	cmp	r3, #3
 808f9ca:	d017      	beq.n	808f9fc <__gethex+0x378>
 808f9cc:	2b01      	cmp	r3, #1
 808f9ce:	d109      	bne.n	808f9e4 <__gethex+0x360>
 808f9d0:	f01a 0f02 	tst.w	sl, #2
 808f9d4:	d006      	beq.n	808f9e4 <__gethex+0x360>
 808f9d6:	f8d9 0000 	ldr.w	r0, [r9]
 808f9da:	ea4a 0a00 	orr.w	sl, sl, r0
 808f9de:	f01a 0f01 	tst.w	sl, #1
 808f9e2:	d10e      	bne.n	808fa02 <__gethex+0x37e>
 808f9e4:	f047 0710 	orr.w	r7, r7, #16
 808f9e8:	e033      	b.n	808fa52 <__gethex+0x3ce>
 808f9ea:	f04f 0a01 	mov.w	sl, #1
 808f9ee:	e7cf      	b.n	808f990 <__gethex+0x30c>
 808f9f0:	2701      	movs	r7, #1
 808f9f2:	e7e2      	b.n	808f9ba <__gethex+0x336>
 808f9f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808f9f6:	f1c3 0301 	rsb	r3, r3, #1
 808f9fa:	9315      	str	r3, [sp, #84]	; 0x54
 808f9fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808f9fe:	2b00      	cmp	r3, #0
 808fa00:	d0f0      	beq.n	808f9e4 <__gethex+0x360>
 808fa02:	f04f 0c00 	mov.w	ip, #0
 808fa06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808fa0a:	f104 0314 	add.w	r3, r4, #20
 808fa0e:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 808fa12:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 808fa16:	4618      	mov	r0, r3
 808fa18:	f853 2b04 	ldr.w	r2, [r3], #4
 808fa1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 808fa20:	d01c      	beq.n	808fa5c <__gethex+0x3d8>
 808fa22:	3201      	adds	r2, #1
 808fa24:	6002      	str	r2, [r0, #0]
 808fa26:	2f02      	cmp	r7, #2
 808fa28:	f104 0314 	add.w	r3, r4, #20
 808fa2c:	d138      	bne.n	808faa0 <__gethex+0x41c>
 808fa2e:	f8d8 2000 	ldr.w	r2, [r8]
 808fa32:	3a01      	subs	r2, #1
 808fa34:	42b2      	cmp	r2, r6
 808fa36:	d10a      	bne.n	808fa4e <__gethex+0x3ca>
 808fa38:	2201      	movs	r2, #1
 808fa3a:	1171      	asrs	r1, r6, #5
 808fa3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808fa40:	f006 061f 	and.w	r6, r6, #31
 808fa44:	fa02 f606 	lsl.w	r6, r2, r6
 808fa48:	421e      	tst	r6, r3
 808fa4a:	bf18      	it	ne
 808fa4c:	4617      	movne	r7, r2
 808fa4e:	f047 0720 	orr.w	r7, r7, #32
 808fa52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808fa54:	601c      	str	r4, [r3, #0]
 808fa56:	9b06      	ldr	r3, [sp, #24]
 808fa58:	601d      	str	r5, [r3, #0]
 808fa5a:	e6a5      	b.n	808f7a8 <__gethex+0x124>
 808fa5c:	4299      	cmp	r1, r3
 808fa5e:	f843 cc04 	str.w	ip, [r3, #-4]
 808fa62:	d8d8      	bhi.n	808fa16 <__gethex+0x392>
 808fa64:	68a3      	ldr	r3, [r4, #8]
 808fa66:	4599      	cmp	r9, r3
 808fa68:	db12      	blt.n	808fa90 <__gethex+0x40c>
 808fa6a:	6861      	ldr	r1, [r4, #4]
 808fa6c:	9802      	ldr	r0, [sp, #8]
 808fa6e:	3101      	adds	r1, #1
 808fa70:	f000 f906 	bl	808fc80 <_Balloc>
 808fa74:	4682      	mov	sl, r0
 808fa76:	6922      	ldr	r2, [r4, #16]
 808fa78:	f104 010c 	add.w	r1, r4, #12
 808fa7c:	3202      	adds	r2, #2
 808fa7e:	0092      	lsls	r2, r2, #2
 808fa80:	300c      	adds	r0, #12
 808fa82:	f7fe fe01 	bl	808e688 <memcpy>
 808fa86:	4621      	mov	r1, r4
 808fa88:	9802      	ldr	r0, [sp, #8]
 808fa8a:	f000 f92d 	bl	808fce8 <_Bfree>
 808fa8e:	4654      	mov	r4, sl
 808fa90:	6923      	ldr	r3, [r4, #16]
 808fa92:	1c5a      	adds	r2, r3, #1
 808fa94:	6122      	str	r2, [r4, #16]
 808fa96:	2201      	movs	r2, #1
 808fa98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 808fa9c:	615a      	str	r2, [r3, #20]
 808fa9e:	e7c2      	b.n	808fa26 <__gethex+0x3a2>
 808faa0:	6922      	ldr	r2, [r4, #16]
 808faa2:	454a      	cmp	r2, r9
 808faa4:	dd0b      	ble.n	808fabe <__gethex+0x43a>
 808faa6:	2101      	movs	r1, #1
 808faa8:	4620      	mov	r0, r4
 808faaa:	f7ff fd83 	bl	808f5b4 <rshift>
 808faae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808fab2:	3501      	adds	r5, #1
 808fab4:	42ab      	cmp	r3, r5
 808fab6:	f6ff aeda 	blt.w	808f86e <__gethex+0x1ea>
 808faba:	2701      	movs	r7, #1
 808fabc:	e7c7      	b.n	808fa4e <__gethex+0x3ca>
 808fabe:	f016 061f 	ands.w	r6, r6, #31
 808fac2:	d0fa      	beq.n	808faba <__gethex+0x436>
 808fac4:	449b      	add	fp, r3
 808fac6:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 808faca:	f000 f9a0 	bl	808fe0e <__hi0bits>
 808face:	f1c6 0620 	rsb	r6, r6, #32
 808fad2:	42b0      	cmp	r0, r6
 808fad4:	dbe7      	blt.n	808faa6 <__gethex+0x422>
 808fad6:	e7f0      	b.n	808faba <__gethex+0x436>

0808fad8 <L_shift>:
 808fad8:	f1c2 0208 	rsb	r2, r2, #8
 808fadc:	0092      	lsls	r2, r2, #2
 808fade:	b570      	push	{r4, r5, r6, lr}
 808fae0:	f1c2 0620 	rsb	r6, r2, #32
 808fae4:	6843      	ldr	r3, [r0, #4]
 808fae6:	6804      	ldr	r4, [r0, #0]
 808fae8:	fa03 f506 	lsl.w	r5, r3, r6
 808faec:	432c      	orrs	r4, r5
 808faee:	40d3      	lsrs	r3, r2
 808faf0:	6004      	str	r4, [r0, #0]
 808faf2:	f840 3f04 	str.w	r3, [r0, #4]!
 808faf6:	4288      	cmp	r0, r1
 808faf8:	d3f4      	bcc.n	808fae4 <L_shift+0xc>
 808fafa:	bd70      	pop	{r4, r5, r6, pc}

0808fafc <__match>:
 808fafc:	b530      	push	{r4, r5, lr}
 808fafe:	6803      	ldr	r3, [r0, #0]
 808fb00:	3301      	adds	r3, #1
 808fb02:	f811 4b01 	ldrb.w	r4, [r1], #1
 808fb06:	b914      	cbnz	r4, 808fb0e <__match+0x12>
 808fb08:	6003      	str	r3, [r0, #0]
 808fb0a:	2001      	movs	r0, #1
 808fb0c:	bd30      	pop	{r4, r5, pc}
 808fb0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 808fb12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808fb16:	2d19      	cmp	r5, #25
 808fb18:	bf98      	it	ls
 808fb1a:	3220      	addls	r2, #32
 808fb1c:	42a2      	cmp	r2, r4
 808fb1e:	d0f0      	beq.n	808fb02 <__match+0x6>
 808fb20:	2000      	movs	r0, #0
 808fb22:	e7f3      	b.n	808fb0c <__match+0x10>

0808fb24 <__hexnan>:
 808fb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808fb28:	2500      	movs	r5, #0
 808fb2a:	680b      	ldr	r3, [r1, #0]
 808fb2c:	4682      	mov	sl, r0
 808fb2e:	115e      	asrs	r6, r3, #5
 808fb30:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808fb34:	f013 031f 	ands.w	r3, r3, #31
 808fb38:	bf18      	it	ne
 808fb3a:	3604      	addne	r6, #4
 808fb3c:	1f37      	subs	r7, r6, #4
 808fb3e:	4690      	mov	r8, r2
 808fb40:	46b9      	mov	r9, r7
 808fb42:	463c      	mov	r4, r7
 808fb44:	46ab      	mov	fp, r5
 808fb46:	b087      	sub	sp, #28
 808fb48:	6801      	ldr	r1, [r0, #0]
 808fb4a:	9301      	str	r3, [sp, #4]
 808fb4c:	f846 5c04 	str.w	r5, [r6, #-4]
 808fb50:	9502      	str	r5, [sp, #8]
 808fb52:	784a      	ldrb	r2, [r1, #1]
 808fb54:	1c4b      	adds	r3, r1, #1
 808fb56:	9303      	str	r3, [sp, #12]
 808fb58:	b342      	cbz	r2, 808fbac <__hexnan+0x88>
 808fb5a:	4610      	mov	r0, r2
 808fb5c:	9105      	str	r1, [sp, #20]
 808fb5e:	9204      	str	r2, [sp, #16]
 808fb60:	f7ff fd7b 	bl	808f65a <__hexdig_fun>
 808fb64:	2800      	cmp	r0, #0
 808fb66:	d14f      	bne.n	808fc08 <__hexnan+0xe4>
 808fb68:	9a04      	ldr	r2, [sp, #16]
 808fb6a:	9905      	ldr	r1, [sp, #20]
 808fb6c:	2a20      	cmp	r2, #32
 808fb6e:	d818      	bhi.n	808fba2 <__hexnan+0x7e>
 808fb70:	9b02      	ldr	r3, [sp, #8]
 808fb72:	459b      	cmp	fp, r3
 808fb74:	dd13      	ble.n	808fb9e <__hexnan+0x7a>
 808fb76:	454c      	cmp	r4, r9
 808fb78:	d206      	bcs.n	808fb88 <__hexnan+0x64>
 808fb7a:	2d07      	cmp	r5, #7
 808fb7c:	dc04      	bgt.n	808fb88 <__hexnan+0x64>
 808fb7e:	462a      	mov	r2, r5
 808fb80:	4649      	mov	r1, r9
 808fb82:	4620      	mov	r0, r4
 808fb84:	f7ff ffa8 	bl	808fad8 <L_shift>
 808fb88:	4544      	cmp	r4, r8
 808fb8a:	d950      	bls.n	808fc2e <__hexnan+0x10a>
 808fb8c:	2300      	movs	r3, #0
 808fb8e:	f1a4 0904 	sub.w	r9, r4, #4
 808fb92:	f844 3c04 	str.w	r3, [r4, #-4]
 808fb96:	461d      	mov	r5, r3
 808fb98:	464c      	mov	r4, r9
 808fb9a:	f8cd b008 	str.w	fp, [sp, #8]
 808fb9e:	9903      	ldr	r1, [sp, #12]
 808fba0:	e7d7      	b.n	808fb52 <__hexnan+0x2e>
 808fba2:	2a29      	cmp	r2, #41	; 0x29
 808fba4:	d156      	bne.n	808fc54 <__hexnan+0x130>
 808fba6:	3102      	adds	r1, #2
 808fba8:	f8ca 1000 	str.w	r1, [sl]
 808fbac:	f1bb 0f00 	cmp.w	fp, #0
 808fbb0:	d050      	beq.n	808fc54 <__hexnan+0x130>
 808fbb2:	454c      	cmp	r4, r9
 808fbb4:	d206      	bcs.n	808fbc4 <__hexnan+0xa0>
 808fbb6:	2d07      	cmp	r5, #7
 808fbb8:	dc04      	bgt.n	808fbc4 <__hexnan+0xa0>
 808fbba:	462a      	mov	r2, r5
 808fbbc:	4649      	mov	r1, r9
 808fbbe:	4620      	mov	r0, r4
 808fbc0:	f7ff ff8a 	bl	808fad8 <L_shift>
 808fbc4:	4544      	cmp	r4, r8
 808fbc6:	d934      	bls.n	808fc32 <__hexnan+0x10e>
 808fbc8:	4623      	mov	r3, r4
 808fbca:	f1a8 0204 	sub.w	r2, r8, #4
 808fbce:	f853 1b04 	ldr.w	r1, [r3], #4
 808fbd2:	429f      	cmp	r7, r3
 808fbd4:	f842 1f04 	str.w	r1, [r2, #4]!
 808fbd8:	d2f9      	bcs.n	808fbce <__hexnan+0xaa>
 808fbda:	1b3b      	subs	r3, r7, r4
 808fbdc:	f023 0303 	bic.w	r3, r3, #3
 808fbe0:	3304      	adds	r3, #4
 808fbe2:	3401      	adds	r4, #1
 808fbe4:	3e03      	subs	r6, #3
 808fbe6:	42b4      	cmp	r4, r6
 808fbe8:	bf88      	it	hi
 808fbea:	2304      	movhi	r3, #4
 808fbec:	2200      	movs	r2, #0
 808fbee:	4443      	add	r3, r8
 808fbf0:	f843 2b04 	str.w	r2, [r3], #4
 808fbf4:	429f      	cmp	r7, r3
 808fbf6:	d2fb      	bcs.n	808fbf0 <__hexnan+0xcc>
 808fbf8:	683b      	ldr	r3, [r7, #0]
 808fbfa:	b91b      	cbnz	r3, 808fc04 <__hexnan+0xe0>
 808fbfc:	4547      	cmp	r7, r8
 808fbfe:	d127      	bne.n	808fc50 <__hexnan+0x12c>
 808fc00:	2301      	movs	r3, #1
 808fc02:	603b      	str	r3, [r7, #0]
 808fc04:	2005      	movs	r0, #5
 808fc06:	e026      	b.n	808fc56 <__hexnan+0x132>
 808fc08:	3501      	adds	r5, #1
 808fc0a:	2d08      	cmp	r5, #8
 808fc0c:	f10b 0b01 	add.w	fp, fp, #1
 808fc10:	dd06      	ble.n	808fc20 <__hexnan+0xfc>
 808fc12:	4544      	cmp	r4, r8
 808fc14:	d9c3      	bls.n	808fb9e <__hexnan+0x7a>
 808fc16:	2300      	movs	r3, #0
 808fc18:	2501      	movs	r5, #1
 808fc1a:	f844 3c04 	str.w	r3, [r4, #-4]
 808fc1e:	3c04      	subs	r4, #4
 808fc20:	6822      	ldr	r2, [r4, #0]
 808fc22:	f000 000f 	and.w	r0, r0, #15
 808fc26:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 808fc2a:	6022      	str	r2, [r4, #0]
 808fc2c:	e7b7      	b.n	808fb9e <__hexnan+0x7a>
 808fc2e:	2508      	movs	r5, #8
 808fc30:	e7b5      	b.n	808fb9e <__hexnan+0x7a>
 808fc32:	9b01      	ldr	r3, [sp, #4]
 808fc34:	2b00      	cmp	r3, #0
 808fc36:	d0df      	beq.n	808fbf8 <__hexnan+0xd4>
 808fc38:	f04f 32ff 	mov.w	r2, #4294967295
 808fc3c:	f1c3 0320 	rsb	r3, r3, #32
 808fc40:	fa22 f303 	lsr.w	r3, r2, r3
 808fc44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808fc48:	401a      	ands	r2, r3
 808fc4a:	f846 2c04 	str.w	r2, [r6, #-4]
 808fc4e:	e7d3      	b.n	808fbf8 <__hexnan+0xd4>
 808fc50:	3f04      	subs	r7, #4
 808fc52:	e7d1      	b.n	808fbf8 <__hexnan+0xd4>
 808fc54:	2004      	movs	r0, #4
 808fc56:	b007      	add	sp, #28
 808fc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808fc5c <__ascii_mbtowc>:
 808fc5c:	b082      	sub	sp, #8
 808fc5e:	b901      	cbnz	r1, 808fc62 <__ascii_mbtowc+0x6>
 808fc60:	a901      	add	r1, sp, #4
 808fc62:	b142      	cbz	r2, 808fc76 <__ascii_mbtowc+0x1a>
 808fc64:	b14b      	cbz	r3, 808fc7a <__ascii_mbtowc+0x1e>
 808fc66:	7813      	ldrb	r3, [r2, #0]
 808fc68:	600b      	str	r3, [r1, #0]
 808fc6a:	7812      	ldrb	r2, [r2, #0]
 808fc6c:	1e10      	subs	r0, r2, #0
 808fc6e:	bf18      	it	ne
 808fc70:	2001      	movne	r0, #1
 808fc72:	b002      	add	sp, #8
 808fc74:	4770      	bx	lr
 808fc76:	4610      	mov	r0, r2
 808fc78:	e7fb      	b.n	808fc72 <__ascii_mbtowc+0x16>
 808fc7a:	f06f 0001 	mvn.w	r0, #1
 808fc7e:	e7f8      	b.n	808fc72 <__ascii_mbtowc+0x16>

0808fc80 <_Balloc>:
 808fc80:	b570      	push	{r4, r5, r6, lr}
 808fc82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808fc84:	4604      	mov	r4, r0
 808fc86:	460d      	mov	r5, r1
 808fc88:	b93e      	cbnz	r6, 808fc9a <_Balloc+0x1a>
 808fc8a:	2010      	movs	r0, #16
 808fc8c:	f7fa ffb8 	bl	808ac00 <malloc>
 808fc90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808fc94:	6260      	str	r0, [r4, #36]	; 0x24
 808fc96:	6006      	str	r6, [r0, #0]
 808fc98:	60c6      	str	r6, [r0, #12]
 808fc9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 808fc9c:	68f3      	ldr	r3, [r6, #12]
 808fc9e:	b183      	cbz	r3, 808fcc2 <_Balloc+0x42>
 808fca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808fca2:	68db      	ldr	r3, [r3, #12]
 808fca4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 808fca8:	b9b8      	cbnz	r0, 808fcda <_Balloc+0x5a>
 808fcaa:	2101      	movs	r1, #1
 808fcac:	fa01 f605 	lsl.w	r6, r1, r5
 808fcb0:	1d72      	adds	r2, r6, #5
 808fcb2:	4620      	mov	r0, r4
 808fcb4:	0092      	lsls	r2, r2, #2
 808fcb6:	f000 fc1c 	bl	80904f2 <_calloc_r>
 808fcba:	b160      	cbz	r0, 808fcd6 <_Balloc+0x56>
 808fcbc:	e9c0 5601 	strd	r5, r6, [r0, #4]
 808fcc0:	e00e      	b.n	808fce0 <_Balloc+0x60>
 808fcc2:	2221      	movs	r2, #33	; 0x21
 808fcc4:	2104      	movs	r1, #4
 808fcc6:	4620      	mov	r0, r4
 808fcc8:	f000 fc13 	bl	80904f2 <_calloc_r>
 808fccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808fcce:	60f0      	str	r0, [r6, #12]
 808fcd0:	68db      	ldr	r3, [r3, #12]
 808fcd2:	2b00      	cmp	r3, #0
 808fcd4:	d1e4      	bne.n	808fca0 <_Balloc+0x20>
 808fcd6:	2000      	movs	r0, #0
 808fcd8:	bd70      	pop	{r4, r5, r6, pc}
 808fcda:	6802      	ldr	r2, [r0, #0]
 808fcdc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 808fce0:	2300      	movs	r3, #0
 808fce2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 808fce6:	e7f7      	b.n	808fcd8 <_Balloc+0x58>

0808fce8 <_Bfree>:
 808fce8:	b570      	push	{r4, r5, r6, lr}
 808fcea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808fcec:	4605      	mov	r5, r0
 808fcee:	460c      	mov	r4, r1
 808fcf0:	b93e      	cbnz	r6, 808fd02 <_Bfree+0x1a>
 808fcf2:	2010      	movs	r0, #16
 808fcf4:	f7fa ff84 	bl	808ac00 <malloc>
 808fcf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808fcfc:	6268      	str	r0, [r5, #36]	; 0x24
 808fcfe:	6006      	str	r6, [r0, #0]
 808fd00:	60c6      	str	r6, [r0, #12]
 808fd02:	b13c      	cbz	r4, 808fd14 <_Bfree+0x2c>
 808fd04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 808fd06:	6862      	ldr	r2, [r4, #4]
 808fd08:	68db      	ldr	r3, [r3, #12]
 808fd0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808fd0e:	6021      	str	r1, [r4, #0]
 808fd10:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 808fd14:	bd70      	pop	{r4, r5, r6, pc}

0808fd16 <__multadd>:
 808fd16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808fd1a:	4698      	mov	r8, r3
 808fd1c:	460c      	mov	r4, r1
 808fd1e:	2300      	movs	r3, #0
 808fd20:	690e      	ldr	r6, [r1, #16]
 808fd22:	4607      	mov	r7, r0
 808fd24:	f101 0014 	add.w	r0, r1, #20
 808fd28:	6805      	ldr	r5, [r0, #0]
 808fd2a:	3301      	adds	r3, #1
 808fd2c:	b2a9      	uxth	r1, r5
 808fd2e:	fb02 8101 	mla	r1, r2, r1, r8
 808fd32:	0c2d      	lsrs	r5, r5, #16
 808fd34:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 808fd38:	fb02 c505 	mla	r5, r2, r5, ip
 808fd3c:	b289      	uxth	r1, r1
 808fd3e:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 808fd42:	429e      	cmp	r6, r3
 808fd44:	ea4f 4815 	mov.w	r8, r5, lsr #16
 808fd48:	f840 1b04 	str.w	r1, [r0], #4
 808fd4c:	dcec      	bgt.n	808fd28 <__multadd+0x12>
 808fd4e:	f1b8 0f00 	cmp.w	r8, #0
 808fd52:	d01b      	beq.n	808fd8c <__multadd+0x76>
 808fd54:	68a3      	ldr	r3, [r4, #8]
 808fd56:	42b3      	cmp	r3, r6
 808fd58:	dc12      	bgt.n	808fd80 <__multadd+0x6a>
 808fd5a:	6861      	ldr	r1, [r4, #4]
 808fd5c:	4638      	mov	r0, r7
 808fd5e:	3101      	adds	r1, #1
 808fd60:	f7ff ff8e 	bl	808fc80 <_Balloc>
 808fd64:	4605      	mov	r5, r0
 808fd66:	6922      	ldr	r2, [r4, #16]
 808fd68:	f104 010c 	add.w	r1, r4, #12
 808fd6c:	3202      	adds	r2, #2
 808fd6e:	0092      	lsls	r2, r2, #2
 808fd70:	300c      	adds	r0, #12
 808fd72:	f7fe fc89 	bl	808e688 <memcpy>
 808fd76:	4621      	mov	r1, r4
 808fd78:	4638      	mov	r0, r7
 808fd7a:	f7ff ffb5 	bl	808fce8 <_Bfree>
 808fd7e:	462c      	mov	r4, r5
 808fd80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 808fd84:	3601      	adds	r6, #1
 808fd86:	f8c3 8014 	str.w	r8, [r3, #20]
 808fd8a:	6126      	str	r6, [r4, #16]
 808fd8c:	4620      	mov	r0, r4
 808fd8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808fd92 <__s2b>:
 808fd92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808fd96:	4615      	mov	r5, r2
 808fd98:	2209      	movs	r2, #9
 808fd9a:	461f      	mov	r7, r3
 808fd9c:	3308      	adds	r3, #8
 808fd9e:	460c      	mov	r4, r1
 808fda0:	fb93 f3f2 	sdiv	r3, r3, r2
 808fda4:	4606      	mov	r6, r0
 808fda6:	2201      	movs	r2, #1
 808fda8:	2100      	movs	r1, #0
 808fdaa:	429a      	cmp	r2, r3
 808fdac:	db20      	blt.n	808fdf0 <__s2b+0x5e>
 808fdae:	4630      	mov	r0, r6
 808fdb0:	f7ff ff66 	bl	808fc80 <_Balloc>
 808fdb4:	9b08      	ldr	r3, [sp, #32]
 808fdb6:	2d09      	cmp	r5, #9
 808fdb8:	6143      	str	r3, [r0, #20]
 808fdba:	f04f 0301 	mov.w	r3, #1
 808fdbe:	6103      	str	r3, [r0, #16]
 808fdc0:	dd19      	ble.n	808fdf6 <__s2b+0x64>
 808fdc2:	f104 0909 	add.w	r9, r4, #9
 808fdc6:	46c8      	mov	r8, r9
 808fdc8:	442c      	add	r4, r5
 808fdca:	f818 3b01 	ldrb.w	r3, [r8], #1
 808fdce:	4601      	mov	r1, r0
 808fdd0:	220a      	movs	r2, #10
 808fdd2:	4630      	mov	r0, r6
 808fdd4:	3b30      	subs	r3, #48	; 0x30
 808fdd6:	f7ff ff9e 	bl	808fd16 <__multadd>
 808fdda:	45a0      	cmp	r8, r4
 808fddc:	d1f5      	bne.n	808fdca <__s2b+0x38>
 808fdde:	f1a5 0408 	sub.w	r4, r5, #8
 808fde2:	444c      	add	r4, r9
 808fde4:	1b2d      	subs	r5, r5, r4
 808fde6:	1963      	adds	r3, r4, r5
 808fde8:	42bb      	cmp	r3, r7
 808fdea:	db07      	blt.n	808fdfc <__s2b+0x6a>
 808fdec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808fdf0:	0052      	lsls	r2, r2, #1
 808fdf2:	3101      	adds	r1, #1
 808fdf4:	e7d9      	b.n	808fdaa <__s2b+0x18>
 808fdf6:	2509      	movs	r5, #9
 808fdf8:	340a      	adds	r4, #10
 808fdfa:	e7f3      	b.n	808fde4 <__s2b+0x52>
 808fdfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 808fe00:	4601      	mov	r1, r0
 808fe02:	220a      	movs	r2, #10
 808fe04:	4630      	mov	r0, r6
 808fe06:	3b30      	subs	r3, #48	; 0x30
 808fe08:	f7ff ff85 	bl	808fd16 <__multadd>
 808fe0c:	e7eb      	b.n	808fde6 <__s2b+0x54>

0808fe0e <__hi0bits>:
 808fe0e:	0c02      	lsrs	r2, r0, #16
 808fe10:	0412      	lsls	r2, r2, #16
 808fe12:	4603      	mov	r3, r0
 808fe14:	b9ca      	cbnz	r2, 808fe4a <__hi0bits+0x3c>
 808fe16:	0403      	lsls	r3, r0, #16
 808fe18:	2010      	movs	r0, #16
 808fe1a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 808fe1e:	bf04      	itt	eq
 808fe20:	021b      	lsleq	r3, r3, #8
 808fe22:	3008      	addeq	r0, #8
 808fe24:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 808fe28:	bf04      	itt	eq
 808fe2a:	011b      	lsleq	r3, r3, #4
 808fe2c:	3004      	addeq	r0, #4
 808fe2e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 808fe32:	bf04      	itt	eq
 808fe34:	009b      	lsleq	r3, r3, #2
 808fe36:	3002      	addeq	r0, #2
 808fe38:	2b00      	cmp	r3, #0
 808fe3a:	db05      	blt.n	808fe48 <__hi0bits+0x3a>
 808fe3c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 808fe40:	f100 0001 	add.w	r0, r0, #1
 808fe44:	bf08      	it	eq
 808fe46:	2020      	moveq	r0, #32
 808fe48:	4770      	bx	lr
 808fe4a:	2000      	movs	r0, #0
 808fe4c:	e7e5      	b.n	808fe1a <__hi0bits+0xc>

0808fe4e <__lo0bits>:
 808fe4e:	6803      	ldr	r3, [r0, #0]
 808fe50:	4602      	mov	r2, r0
 808fe52:	f013 0007 	ands.w	r0, r3, #7
 808fe56:	d00b      	beq.n	808fe70 <__lo0bits+0x22>
 808fe58:	07d9      	lsls	r1, r3, #31
 808fe5a:	d422      	bmi.n	808fea2 <__lo0bits+0x54>
 808fe5c:	0798      	lsls	r0, r3, #30
 808fe5e:	bf49      	itett	mi
 808fe60:	085b      	lsrmi	r3, r3, #1
 808fe62:	089b      	lsrpl	r3, r3, #2
 808fe64:	2001      	movmi	r0, #1
 808fe66:	6013      	strmi	r3, [r2, #0]
 808fe68:	bf5c      	itt	pl
 808fe6a:	2002      	movpl	r0, #2
 808fe6c:	6013      	strpl	r3, [r2, #0]
 808fe6e:	4770      	bx	lr
 808fe70:	b299      	uxth	r1, r3
 808fe72:	b909      	cbnz	r1, 808fe78 <__lo0bits+0x2a>
 808fe74:	2010      	movs	r0, #16
 808fe76:	0c1b      	lsrs	r3, r3, #16
 808fe78:	f013 0fff 	tst.w	r3, #255	; 0xff
 808fe7c:	bf04      	itt	eq
 808fe7e:	0a1b      	lsreq	r3, r3, #8
 808fe80:	3008      	addeq	r0, #8
 808fe82:	0719      	lsls	r1, r3, #28
 808fe84:	bf04      	itt	eq
 808fe86:	091b      	lsreq	r3, r3, #4
 808fe88:	3004      	addeq	r0, #4
 808fe8a:	0799      	lsls	r1, r3, #30
 808fe8c:	bf04      	itt	eq
 808fe8e:	089b      	lsreq	r3, r3, #2
 808fe90:	3002      	addeq	r0, #2
 808fe92:	07d9      	lsls	r1, r3, #31
 808fe94:	d403      	bmi.n	808fe9e <__lo0bits+0x50>
 808fe96:	085b      	lsrs	r3, r3, #1
 808fe98:	f100 0001 	add.w	r0, r0, #1
 808fe9c:	d003      	beq.n	808fea6 <__lo0bits+0x58>
 808fe9e:	6013      	str	r3, [r2, #0]
 808fea0:	4770      	bx	lr
 808fea2:	2000      	movs	r0, #0
 808fea4:	4770      	bx	lr
 808fea6:	2020      	movs	r0, #32
 808fea8:	4770      	bx	lr

0808feaa <__i2b>:
 808feaa:	b510      	push	{r4, lr}
 808feac:	460c      	mov	r4, r1
 808feae:	2101      	movs	r1, #1
 808feb0:	f7ff fee6 	bl	808fc80 <_Balloc>
 808feb4:	2201      	movs	r2, #1
 808feb6:	6144      	str	r4, [r0, #20]
 808feb8:	6102      	str	r2, [r0, #16]
 808feba:	bd10      	pop	{r4, pc}

0808febc <__multiply>:
 808febc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808fec0:	4615      	mov	r5, r2
 808fec2:	690a      	ldr	r2, [r1, #16]
 808fec4:	692b      	ldr	r3, [r5, #16]
 808fec6:	460c      	mov	r4, r1
 808fec8:	429a      	cmp	r2, r3
 808feca:	bfbe      	ittt	lt
 808fecc:	460b      	movlt	r3, r1
 808fece:	462c      	movlt	r4, r5
 808fed0:	461d      	movlt	r5, r3
 808fed2:	6927      	ldr	r7, [r4, #16]
 808fed4:	f8d5 9010 	ldr.w	r9, [r5, #16]
 808fed8:	68a3      	ldr	r3, [r4, #8]
 808feda:	6861      	ldr	r1, [r4, #4]
 808fedc:	eb07 0609 	add.w	r6, r7, r9
 808fee0:	42b3      	cmp	r3, r6
 808fee2:	bfb8      	it	lt
 808fee4:	3101      	addlt	r1, #1
 808fee6:	b085      	sub	sp, #20
 808fee8:	f7ff feca 	bl	808fc80 <_Balloc>
 808feec:	f100 0114 	add.w	r1, r0, #20
 808fef0:	460b      	mov	r3, r1
 808fef2:	2200      	movs	r2, #0
 808fef4:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 808fef8:	4543      	cmp	r3, r8
 808fefa:	d31d      	bcc.n	808ff38 <__multiply+0x7c>
 808fefc:	f104 0314 	add.w	r3, r4, #20
 808ff00:	f105 0214 	add.w	r2, r5, #20
 808ff04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 808ff08:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808ff0c:	9302      	str	r3, [sp, #8]
 808ff0e:	1b3b      	subs	r3, r7, r4
 808ff10:	3b15      	subs	r3, #21
 808ff12:	f023 0303 	bic.w	r3, r3, #3
 808ff16:	3304      	adds	r3, #4
 808ff18:	f104 0515 	add.w	r5, r4, #21
 808ff1c:	42af      	cmp	r7, r5
 808ff1e:	bf38      	it	cc
 808ff20:	2304      	movcc	r3, #4
 808ff22:	9301      	str	r3, [sp, #4]
 808ff24:	9b02      	ldr	r3, [sp, #8]
 808ff26:	9203      	str	r2, [sp, #12]
 808ff28:	4293      	cmp	r3, r2
 808ff2a:	d808      	bhi.n	808ff3e <__multiply+0x82>
 808ff2c:	2e00      	cmp	r6, #0
 808ff2e:	dc5a      	bgt.n	808ffe6 <__multiply+0x12a>
 808ff30:	6106      	str	r6, [r0, #16]
 808ff32:	b005      	add	sp, #20
 808ff34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ff38:	f843 2b04 	str.w	r2, [r3], #4
 808ff3c:	e7dc      	b.n	808fef8 <__multiply+0x3c>
 808ff3e:	f8b2 a000 	ldrh.w	sl, [r2]
 808ff42:	f1ba 0f00 	cmp.w	sl, #0
 808ff46:	d024      	beq.n	808ff92 <__multiply+0xd6>
 808ff48:	4689      	mov	r9, r1
 808ff4a:	f04f 0c00 	mov.w	ip, #0
 808ff4e:	f104 0e14 	add.w	lr, r4, #20
 808ff52:	f85e 5b04 	ldr.w	r5, [lr], #4
 808ff56:	f8d9 b000 	ldr.w	fp, [r9]
 808ff5a:	b2ab      	uxth	r3, r5
 808ff5c:	fa1f fb8b 	uxth.w	fp, fp
 808ff60:	fb0a b303 	mla	r3, sl, r3, fp
 808ff64:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 808ff68:	f8d9 5000 	ldr.w	r5, [r9]
 808ff6c:	4463      	add	r3, ip
 808ff6e:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808ff72:	fb0a c50b 	mla	r5, sl, fp, ip
 808ff76:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 808ff7a:	b29b      	uxth	r3, r3
 808ff7c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 808ff80:	4577      	cmp	r7, lr
 808ff82:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808ff86:	f849 3b04 	str.w	r3, [r9], #4
 808ff8a:	d8e2      	bhi.n	808ff52 <__multiply+0x96>
 808ff8c:	9b01      	ldr	r3, [sp, #4]
 808ff8e:	f841 c003 	str.w	ip, [r1, r3]
 808ff92:	9b03      	ldr	r3, [sp, #12]
 808ff94:	3204      	adds	r2, #4
 808ff96:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 808ff9a:	f1b9 0f00 	cmp.w	r9, #0
 808ff9e:	d020      	beq.n	808ffe2 <__multiply+0x126>
 808ffa0:	468e      	mov	lr, r1
 808ffa2:	f04f 0a00 	mov.w	sl, #0
 808ffa6:	680b      	ldr	r3, [r1, #0]
 808ffa8:	f104 0c14 	add.w	ip, r4, #20
 808ffac:	f8bc 5000 	ldrh.w	r5, [ip]
 808ffb0:	f8be b002 	ldrh.w	fp, [lr, #2]
 808ffb4:	b29b      	uxth	r3, r3
 808ffb6:	fb09 b505 	mla	r5, r9, r5, fp
 808ffba:	44aa      	add	sl, r5
 808ffbc:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 808ffc0:	f84e 3b04 	str.w	r3, [lr], #4
 808ffc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 808ffc8:	f8be 5000 	ldrh.w	r5, [lr]
 808ffcc:	0c1b      	lsrs	r3, r3, #16
 808ffce:	fb09 5303 	mla	r3, r9, r3, r5
 808ffd2:	4567      	cmp	r7, ip
 808ffd4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 808ffd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 808ffdc:	d8e6      	bhi.n	808ffac <__multiply+0xf0>
 808ffde:	9d01      	ldr	r5, [sp, #4]
 808ffe0:	514b      	str	r3, [r1, r5]
 808ffe2:	3104      	adds	r1, #4
 808ffe4:	e79e      	b.n	808ff24 <__multiply+0x68>
 808ffe6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 808ffea:	2b00      	cmp	r3, #0
 808ffec:	d1a0      	bne.n	808ff30 <__multiply+0x74>
 808ffee:	3e01      	subs	r6, #1
 808fff0:	e79c      	b.n	808ff2c <__multiply+0x70>
	...

0808fff4 <__pow5mult>:
 808fff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808fff8:	4615      	mov	r5, r2
 808fffa:	f012 0203 	ands.w	r2, r2, #3
 808fffe:	4606      	mov	r6, r0
 8090000:	460f      	mov	r7, r1
 8090002:	d007      	beq.n	8090014 <__pow5mult+0x20>
 8090004:	4c21      	ldr	r4, [pc, #132]	; (809008c <__pow5mult+0x98>)
 8090006:	3a01      	subs	r2, #1
 8090008:	2300      	movs	r3, #0
 809000a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 809000e:	f7ff fe82 	bl	808fd16 <__multadd>
 8090012:	4607      	mov	r7, r0
 8090014:	10ad      	asrs	r5, r5, #2
 8090016:	d035      	beq.n	8090084 <__pow5mult+0x90>
 8090018:	6a74      	ldr	r4, [r6, #36]	; 0x24
 809001a:	b93c      	cbnz	r4, 809002c <__pow5mult+0x38>
 809001c:	2010      	movs	r0, #16
 809001e:	f7fa fdef 	bl	808ac00 <malloc>
 8090022:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8090026:	6270      	str	r0, [r6, #36]	; 0x24
 8090028:	6004      	str	r4, [r0, #0]
 809002a:	60c4      	str	r4, [r0, #12]
 809002c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8090030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8090034:	b94c      	cbnz	r4, 809004a <__pow5mult+0x56>
 8090036:	f240 2171 	movw	r1, #625	; 0x271
 809003a:	4630      	mov	r0, r6
 809003c:	f7ff ff35 	bl	808feaa <__i2b>
 8090040:	2300      	movs	r3, #0
 8090042:	4604      	mov	r4, r0
 8090044:	f8c8 0008 	str.w	r0, [r8, #8]
 8090048:	6003      	str	r3, [r0, #0]
 809004a:	f04f 0900 	mov.w	r9, #0
 809004e:	07eb      	lsls	r3, r5, #31
 8090050:	d50a      	bpl.n	8090068 <__pow5mult+0x74>
 8090052:	4639      	mov	r1, r7
 8090054:	4622      	mov	r2, r4
 8090056:	4630      	mov	r0, r6
 8090058:	f7ff ff30 	bl	808febc <__multiply>
 809005c:	4680      	mov	r8, r0
 809005e:	4639      	mov	r1, r7
 8090060:	4630      	mov	r0, r6
 8090062:	f7ff fe41 	bl	808fce8 <_Bfree>
 8090066:	4647      	mov	r7, r8
 8090068:	106d      	asrs	r5, r5, #1
 809006a:	d00b      	beq.n	8090084 <__pow5mult+0x90>
 809006c:	6820      	ldr	r0, [r4, #0]
 809006e:	b938      	cbnz	r0, 8090080 <__pow5mult+0x8c>
 8090070:	4622      	mov	r2, r4
 8090072:	4621      	mov	r1, r4
 8090074:	4630      	mov	r0, r6
 8090076:	f7ff ff21 	bl	808febc <__multiply>
 809007a:	6020      	str	r0, [r4, #0]
 809007c:	f8c0 9000 	str.w	r9, [r0]
 8090080:	4604      	mov	r4, r0
 8090082:	e7e4      	b.n	809004e <__pow5mult+0x5a>
 8090084:	4638      	mov	r0, r7
 8090086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 809008a:	bf00      	nop
 809008c:	08093158 	.word	0x08093158

08090090 <__lshift>:
 8090090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8090094:	460c      	mov	r4, r1
 8090096:	4607      	mov	r7, r0
 8090098:	4691      	mov	r9, r2
 809009a:	6923      	ldr	r3, [r4, #16]
 809009c:	6849      	ldr	r1, [r1, #4]
 809009e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80900a2:	68a3      	ldr	r3, [r4, #8]
 80900a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80900a8:	f108 0601 	add.w	r6, r8, #1
 80900ac:	42b3      	cmp	r3, r6
 80900ae:	db3f      	blt.n	8090130 <__lshift+0xa0>
 80900b0:	4638      	mov	r0, r7
 80900b2:	f7ff fde5 	bl	808fc80 <_Balloc>
 80900b6:	2300      	movs	r3, #0
 80900b8:	4605      	mov	r5, r0
 80900ba:	f100 0114 	add.w	r1, r0, #20
 80900be:	f100 0210 	add.w	r2, r0, #16
 80900c2:	4618      	mov	r0, r3
 80900c4:	4553      	cmp	r3, sl
 80900c6:	db36      	blt.n	8090136 <__lshift+0xa6>
 80900c8:	6920      	ldr	r0, [r4, #16]
 80900ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80900ce:	f104 0314 	add.w	r3, r4, #20
 80900d2:	f019 091f 	ands.w	r9, r9, #31
 80900d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80900da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80900de:	d02e      	beq.n	809013e <__lshift+0xae>
 80900e0:	468a      	mov	sl, r1
 80900e2:	2200      	movs	r2, #0
 80900e4:	f1c9 0e20 	rsb	lr, r9, #32
 80900e8:	6818      	ldr	r0, [r3, #0]
 80900ea:	fa00 f009 	lsl.w	r0, r0, r9
 80900ee:	4302      	orrs	r2, r0
 80900f0:	f84a 2b04 	str.w	r2, [sl], #4
 80900f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80900f8:	459c      	cmp	ip, r3
 80900fa:	fa22 f20e 	lsr.w	r2, r2, lr
 80900fe:	d8f3      	bhi.n	80900e8 <__lshift+0x58>
 8090100:	ebac 0304 	sub.w	r3, ip, r4
 8090104:	3b15      	subs	r3, #21
 8090106:	f023 0303 	bic.w	r3, r3, #3
 809010a:	3304      	adds	r3, #4
 809010c:	f104 0015 	add.w	r0, r4, #21
 8090110:	4560      	cmp	r0, ip
 8090112:	bf88      	it	hi
 8090114:	2304      	movhi	r3, #4
 8090116:	50ca      	str	r2, [r1, r3]
 8090118:	b10a      	cbz	r2, 809011e <__lshift+0x8e>
 809011a:	f108 0602 	add.w	r6, r8, #2
 809011e:	3e01      	subs	r6, #1
 8090120:	4638      	mov	r0, r7
 8090122:	4621      	mov	r1, r4
 8090124:	612e      	str	r6, [r5, #16]
 8090126:	f7ff fddf 	bl	808fce8 <_Bfree>
 809012a:	4628      	mov	r0, r5
 809012c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090130:	3101      	adds	r1, #1
 8090132:	005b      	lsls	r3, r3, #1
 8090134:	e7ba      	b.n	80900ac <__lshift+0x1c>
 8090136:	f842 0f04 	str.w	r0, [r2, #4]!
 809013a:	3301      	adds	r3, #1
 809013c:	e7c2      	b.n	80900c4 <__lshift+0x34>
 809013e:	3904      	subs	r1, #4
 8090140:	f853 2b04 	ldr.w	r2, [r3], #4
 8090144:	459c      	cmp	ip, r3
 8090146:	f841 2f04 	str.w	r2, [r1, #4]!
 809014a:	d8f9      	bhi.n	8090140 <__lshift+0xb0>
 809014c:	e7e7      	b.n	809011e <__lshift+0x8e>

0809014e <__mcmp>:
 809014e:	4603      	mov	r3, r0
 8090150:	690a      	ldr	r2, [r1, #16]
 8090152:	6900      	ldr	r0, [r0, #16]
 8090154:	b530      	push	{r4, r5, lr}
 8090156:	1a80      	subs	r0, r0, r2
 8090158:	d10d      	bne.n	8090176 <__mcmp+0x28>
 809015a:	3314      	adds	r3, #20
 809015c:	3114      	adds	r1, #20
 809015e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8090162:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8090166:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 809016a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 809016e:	4295      	cmp	r5, r2
 8090170:	d002      	beq.n	8090178 <__mcmp+0x2a>
 8090172:	d304      	bcc.n	809017e <__mcmp+0x30>
 8090174:	2001      	movs	r0, #1
 8090176:	bd30      	pop	{r4, r5, pc}
 8090178:	42a3      	cmp	r3, r4
 809017a:	d3f4      	bcc.n	8090166 <__mcmp+0x18>
 809017c:	e7fb      	b.n	8090176 <__mcmp+0x28>
 809017e:	f04f 30ff 	mov.w	r0, #4294967295
 8090182:	e7f8      	b.n	8090176 <__mcmp+0x28>

08090184 <__mdiff>:
 8090184:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090188:	460c      	mov	r4, r1
 809018a:	4606      	mov	r6, r0
 809018c:	4611      	mov	r1, r2
 809018e:	4620      	mov	r0, r4
 8090190:	4692      	mov	sl, r2
 8090192:	f7ff ffdc 	bl	809014e <__mcmp>
 8090196:	1e05      	subs	r5, r0, #0
 8090198:	d108      	bne.n	80901ac <__mdiff+0x28>
 809019a:	4629      	mov	r1, r5
 809019c:	4630      	mov	r0, r6
 809019e:	f7ff fd6f 	bl	808fc80 <_Balloc>
 80901a2:	2301      	movs	r3, #1
 80901a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80901a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80901ac:	bfa4      	itt	ge
 80901ae:	4653      	movge	r3, sl
 80901b0:	46a2      	movge	sl, r4
 80901b2:	4630      	mov	r0, r6
 80901b4:	f8da 1004 	ldr.w	r1, [sl, #4]
 80901b8:	bfa6      	itte	ge
 80901ba:	461c      	movge	r4, r3
 80901bc:	2500      	movge	r5, #0
 80901be:	2501      	movlt	r5, #1
 80901c0:	f7ff fd5e 	bl	808fc80 <_Balloc>
 80901c4:	f100 0814 	add.w	r8, r0, #20
 80901c8:	f8da 7010 	ldr.w	r7, [sl, #16]
 80901cc:	60c5      	str	r5, [r0, #12]
 80901ce:	f10a 0210 	add.w	r2, sl, #16
 80901d2:	f10a 0514 	add.w	r5, sl, #20
 80901d6:	f04f 0c00 	mov.w	ip, #0
 80901da:	46c2      	mov	sl, r8
 80901dc:	6926      	ldr	r6, [r4, #16]
 80901de:	f104 0914 	add.w	r9, r4, #20
 80901e2:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80901e6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80901ea:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80901ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80901f2:	fa1f f18b 	uxth.w	r1, fp
 80901f6:	4461      	add	r1, ip
 80901f8:	fa1f fc83 	uxth.w	ip, r3
 80901fc:	0c1b      	lsrs	r3, r3, #16
 80901fe:	eba1 010c 	sub.w	r1, r1, ip
 8090202:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8090206:	eb03 4321 	add.w	r3, r3, r1, asr #16
 809020a:	b289      	uxth	r1, r1
 809020c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8090210:	454e      	cmp	r6, r9
 8090212:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8090216:	f84a 3b04 	str.w	r3, [sl], #4
 809021a:	d8e6      	bhi.n	80901ea <__mdiff+0x66>
 809021c:	1b33      	subs	r3, r6, r4
 809021e:	3b15      	subs	r3, #21
 8090220:	f023 0303 	bic.w	r3, r3, #3
 8090224:	3415      	adds	r4, #21
 8090226:	3304      	adds	r3, #4
 8090228:	42a6      	cmp	r6, r4
 809022a:	bf38      	it	cc
 809022c:	2304      	movcc	r3, #4
 809022e:	441d      	add	r5, r3
 8090230:	4443      	add	r3, r8
 8090232:	461e      	mov	r6, r3
 8090234:	462c      	mov	r4, r5
 8090236:	4574      	cmp	r4, lr
 8090238:	d30e      	bcc.n	8090258 <__mdiff+0xd4>
 809023a:	f10e 0203 	add.w	r2, lr, #3
 809023e:	1b52      	subs	r2, r2, r5
 8090240:	f022 0203 	bic.w	r2, r2, #3
 8090244:	3d03      	subs	r5, #3
 8090246:	45ae      	cmp	lr, r5
 8090248:	bf38      	it	cc
 809024a:	2200      	movcc	r2, #0
 809024c:	441a      	add	r2, r3
 809024e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8090252:	b18b      	cbz	r3, 8090278 <__mdiff+0xf4>
 8090254:	6107      	str	r7, [r0, #16]
 8090256:	e7a7      	b.n	80901a8 <__mdiff+0x24>
 8090258:	f854 8b04 	ldr.w	r8, [r4], #4
 809025c:	fa1f f288 	uxth.w	r2, r8
 8090260:	4462      	add	r2, ip
 8090262:	1411      	asrs	r1, r2, #16
 8090264:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8090268:	b292      	uxth	r2, r2
 809026a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 809026e:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8090272:	f846 2b04 	str.w	r2, [r6], #4
 8090276:	e7de      	b.n	8090236 <__mdiff+0xb2>
 8090278:	3f01      	subs	r7, #1
 809027a:	e7e8      	b.n	809024e <__mdiff+0xca>

0809027c <__ulp>:
 809027c:	4b11      	ldr	r3, [pc, #68]	; (80902c4 <__ulp+0x48>)
 809027e:	400b      	ands	r3, r1
 8090280:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8090284:	2b00      	cmp	r3, #0
 8090286:	dd02      	ble.n	809028e <__ulp+0x12>
 8090288:	2000      	movs	r0, #0
 809028a:	4619      	mov	r1, r3
 809028c:	4770      	bx	lr
 809028e:	425b      	negs	r3, r3
 8090290:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8090294:	f04f 0000 	mov.w	r0, #0
 8090298:	f04f 0100 	mov.w	r1, #0
 809029c:	ea4f 5223 	mov.w	r2, r3, asr #20
 80902a0:	da04      	bge.n	80902ac <__ulp+0x30>
 80902a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80902a6:	fa43 f102 	asr.w	r1, r3, r2
 80902aa:	4770      	bx	lr
 80902ac:	f1a2 0314 	sub.w	r3, r2, #20
 80902b0:	2b1e      	cmp	r3, #30
 80902b2:	bfd6      	itet	le
 80902b4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80902b8:	2301      	movgt	r3, #1
 80902ba:	fa22 f303 	lsrle.w	r3, r2, r3
 80902be:	4618      	mov	r0, r3
 80902c0:	4770      	bx	lr
 80902c2:	bf00      	nop
 80902c4:	7ff00000 	.word	0x7ff00000

080902c8 <__b2d>:
 80902c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80902cc:	6907      	ldr	r7, [r0, #16]
 80902ce:	f100 0914 	add.w	r9, r0, #20
 80902d2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80902d6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80902da:	f1a7 0804 	sub.w	r8, r7, #4
 80902de:	4630      	mov	r0, r6
 80902e0:	f7ff fd95 	bl	808fe0e <__hi0bits>
 80902e4:	f1c0 0320 	rsb	r3, r0, #32
 80902e8:	280a      	cmp	r0, #10
 80902ea:	600b      	str	r3, [r1, #0]
 80902ec:	491f      	ldr	r1, [pc, #124]	; (809036c <__b2d+0xa4>)
 80902ee:	dc17      	bgt.n	8090320 <__b2d+0x58>
 80902f0:	45c1      	cmp	r9, r8
 80902f2:	bf28      	it	cs
 80902f4:	2200      	movcs	r2, #0
 80902f6:	f1c0 0c0b 	rsb	ip, r0, #11
 80902fa:	fa26 f30c 	lsr.w	r3, r6, ip
 80902fe:	bf38      	it	cc
 8090300:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8090304:	ea43 0501 	orr.w	r5, r3, r1
 8090308:	f100 0315 	add.w	r3, r0, #21
 809030c:	fa06 f303 	lsl.w	r3, r6, r3
 8090310:	fa22 f20c 	lsr.w	r2, r2, ip
 8090314:	ea43 0402 	orr.w	r4, r3, r2
 8090318:	4620      	mov	r0, r4
 809031a:	4629      	mov	r1, r5
 809031c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8090320:	45c1      	cmp	r9, r8
 8090322:	bf2e      	itee	cs
 8090324:	2200      	movcs	r2, #0
 8090326:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 809032a:	f1a7 0808 	subcc.w	r8, r7, #8
 809032e:	f1b0 030b 	subs.w	r3, r0, #11
 8090332:	d016      	beq.n	8090362 <__b2d+0x9a>
 8090334:	f1c3 0720 	rsb	r7, r3, #32
 8090338:	fa22 f107 	lsr.w	r1, r2, r7
 809033c:	45c8      	cmp	r8, r9
 809033e:	fa06 f603 	lsl.w	r6, r6, r3
 8090342:	ea46 0601 	orr.w	r6, r6, r1
 8090346:	bf94      	ite	ls
 8090348:	2100      	movls	r1, #0
 809034a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 809034e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8090352:	fa02 f003 	lsl.w	r0, r2, r3
 8090356:	40f9      	lsrs	r1, r7
 8090358:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 809035c:	ea40 0401 	orr.w	r4, r0, r1
 8090360:	e7da      	b.n	8090318 <__b2d+0x50>
 8090362:	4614      	mov	r4, r2
 8090364:	ea46 0501 	orr.w	r5, r6, r1
 8090368:	e7d6      	b.n	8090318 <__b2d+0x50>
 809036a:	bf00      	nop
 809036c:	3ff00000 	.word	0x3ff00000

08090370 <__d2b>:
 8090370:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8090374:	461c      	mov	r4, r3
 8090376:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 809037a:	2101      	movs	r1, #1
 809037c:	4690      	mov	r8, r2
 809037e:	f7ff fc7f 	bl	808fc80 <_Balloc>
 8090382:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8090386:	f3c4 540a 	ubfx	r4, r4, #20, #11
 809038a:	4607      	mov	r7, r0
 809038c:	bb2c      	cbnz	r4, 80903da <__d2b+0x6a>
 809038e:	9301      	str	r3, [sp, #4]
 8090390:	f1b8 0300 	subs.w	r3, r8, #0
 8090394:	d026      	beq.n	80903e4 <__d2b+0x74>
 8090396:	4668      	mov	r0, sp
 8090398:	9300      	str	r3, [sp, #0]
 809039a:	f7ff fd58 	bl	808fe4e <__lo0bits>
 809039e:	9900      	ldr	r1, [sp, #0]
 80903a0:	b1f0      	cbz	r0, 80903e0 <__d2b+0x70>
 80903a2:	9a01      	ldr	r2, [sp, #4]
 80903a4:	f1c0 0320 	rsb	r3, r0, #32
 80903a8:	fa02 f303 	lsl.w	r3, r2, r3
 80903ac:	430b      	orrs	r3, r1
 80903ae:	40c2      	lsrs	r2, r0
 80903b0:	617b      	str	r3, [r7, #20]
 80903b2:	9201      	str	r2, [sp, #4]
 80903b4:	9b01      	ldr	r3, [sp, #4]
 80903b6:	2b00      	cmp	r3, #0
 80903b8:	bf14      	ite	ne
 80903ba:	2102      	movne	r1, #2
 80903bc:	2101      	moveq	r1, #1
 80903be:	61bb      	str	r3, [r7, #24]
 80903c0:	6139      	str	r1, [r7, #16]
 80903c2:	b1c4      	cbz	r4, 80903f6 <__d2b+0x86>
 80903c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80903c8:	4404      	add	r4, r0
 80903ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80903ce:	6034      	str	r4, [r6, #0]
 80903d0:	6028      	str	r0, [r5, #0]
 80903d2:	4638      	mov	r0, r7
 80903d4:	b002      	add	sp, #8
 80903d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80903da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80903de:	e7d6      	b.n	809038e <__d2b+0x1e>
 80903e0:	6179      	str	r1, [r7, #20]
 80903e2:	e7e7      	b.n	80903b4 <__d2b+0x44>
 80903e4:	a801      	add	r0, sp, #4
 80903e6:	f7ff fd32 	bl	808fe4e <__lo0bits>
 80903ea:	2101      	movs	r1, #1
 80903ec:	9b01      	ldr	r3, [sp, #4]
 80903ee:	6139      	str	r1, [r7, #16]
 80903f0:	617b      	str	r3, [r7, #20]
 80903f2:	3020      	adds	r0, #32
 80903f4:	e7e5      	b.n	80903c2 <__d2b+0x52>
 80903f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80903fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80903fe:	6030      	str	r0, [r6, #0]
 8090400:	6918      	ldr	r0, [r3, #16]
 8090402:	f7ff fd04 	bl	808fe0e <__hi0bits>
 8090406:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 809040a:	6029      	str	r1, [r5, #0]
 809040c:	e7e1      	b.n	80903d2 <__d2b+0x62>

0809040e <__ratio>:
 809040e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090412:	4688      	mov	r8, r1
 8090414:	4669      	mov	r1, sp
 8090416:	4681      	mov	r9, r0
 8090418:	f7ff ff56 	bl	80902c8 <__b2d>
 809041c:	460f      	mov	r7, r1
 809041e:	4604      	mov	r4, r0
 8090420:	460d      	mov	r5, r1
 8090422:	4640      	mov	r0, r8
 8090424:	a901      	add	r1, sp, #4
 8090426:	f7ff ff4f 	bl	80902c8 <__b2d>
 809042a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 809042e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8090432:	468b      	mov	fp, r1
 8090434:	eba3 0c02 	sub.w	ip, r3, r2
 8090438:	e9dd 3200 	ldrd	r3, r2, [sp]
 809043c:	1a9b      	subs	r3, r3, r2
 809043e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8090442:	2b00      	cmp	r3, #0
 8090444:	bfd5      	itete	le
 8090446:	460a      	movle	r2, r1
 8090448:	462a      	movgt	r2, r5
 809044a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 809044e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8090452:	bfd8      	it	le
 8090454:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8090458:	465b      	mov	r3, fp
 809045a:	4602      	mov	r2, r0
 809045c:	4639      	mov	r1, r7
 809045e:	4620      	mov	r0, r4
 8090460:	f7fd fadc 	bl	808da1c <__aeabi_ddiv>
 8090464:	b003      	add	sp, #12
 8090466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0809046a <__copybits>:
 809046a:	3901      	subs	r1, #1
 809046c:	b570      	push	{r4, r5, r6, lr}
 809046e:	1149      	asrs	r1, r1, #5
 8090470:	6914      	ldr	r4, [r2, #16]
 8090472:	3101      	adds	r1, #1
 8090474:	f102 0314 	add.w	r3, r2, #20
 8090478:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 809047c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8090480:	1f05      	subs	r5, r0, #4
 8090482:	42a3      	cmp	r3, r4
 8090484:	d30c      	bcc.n	80904a0 <__copybits+0x36>
 8090486:	1aa3      	subs	r3, r4, r2
 8090488:	3b11      	subs	r3, #17
 809048a:	f023 0303 	bic.w	r3, r3, #3
 809048e:	3211      	adds	r2, #17
 8090490:	42a2      	cmp	r2, r4
 8090492:	bf88      	it	hi
 8090494:	2300      	movhi	r3, #0
 8090496:	4418      	add	r0, r3
 8090498:	2300      	movs	r3, #0
 809049a:	4288      	cmp	r0, r1
 809049c:	d305      	bcc.n	80904aa <__copybits+0x40>
 809049e:	bd70      	pop	{r4, r5, r6, pc}
 80904a0:	f853 6b04 	ldr.w	r6, [r3], #4
 80904a4:	f845 6f04 	str.w	r6, [r5, #4]!
 80904a8:	e7eb      	b.n	8090482 <__copybits+0x18>
 80904aa:	f840 3b04 	str.w	r3, [r0], #4
 80904ae:	e7f4      	b.n	809049a <__copybits+0x30>

080904b0 <__any_on>:
 80904b0:	f100 0214 	add.w	r2, r0, #20
 80904b4:	6900      	ldr	r0, [r0, #16]
 80904b6:	114b      	asrs	r3, r1, #5
 80904b8:	4298      	cmp	r0, r3
 80904ba:	b510      	push	{r4, lr}
 80904bc:	db11      	blt.n	80904e2 <__any_on+0x32>
 80904be:	dd0a      	ble.n	80904d6 <__any_on+0x26>
 80904c0:	f011 011f 	ands.w	r1, r1, #31
 80904c4:	d007      	beq.n	80904d6 <__any_on+0x26>
 80904c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80904ca:	fa24 f001 	lsr.w	r0, r4, r1
 80904ce:	fa00 f101 	lsl.w	r1, r0, r1
 80904d2:	428c      	cmp	r4, r1
 80904d4:	d10b      	bne.n	80904ee <__any_on+0x3e>
 80904d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80904da:	4293      	cmp	r3, r2
 80904dc:	d803      	bhi.n	80904e6 <__any_on+0x36>
 80904de:	2000      	movs	r0, #0
 80904e0:	bd10      	pop	{r4, pc}
 80904e2:	4603      	mov	r3, r0
 80904e4:	e7f7      	b.n	80904d6 <__any_on+0x26>
 80904e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80904ea:	2900      	cmp	r1, #0
 80904ec:	d0f5      	beq.n	80904da <__any_on+0x2a>
 80904ee:	2001      	movs	r0, #1
 80904f0:	e7f6      	b.n	80904e0 <__any_on+0x30>

080904f2 <_calloc_r>:
 80904f2:	b538      	push	{r3, r4, r5, lr}
 80904f4:	fb02 f501 	mul.w	r5, r2, r1
 80904f8:	4629      	mov	r1, r5
 80904fa:	f7fa fbc9 	bl	808ac90 <_malloc_r>
 80904fe:	4604      	mov	r4, r0
 8090500:	b118      	cbz	r0, 809050a <_calloc_r+0x18>
 8090502:	462a      	mov	r2, r5
 8090504:	2100      	movs	r1, #0
 8090506:	f7fe f8cd 	bl	808e6a4 <memset>
 809050a:	4620      	mov	r0, r4
 809050c:	bd38      	pop	{r3, r4, r5, pc}

0809050e <__ascii_wctomb>:
 809050e:	4603      	mov	r3, r0
 8090510:	4608      	mov	r0, r1
 8090512:	b141      	cbz	r1, 8090526 <__ascii_wctomb+0x18>
 8090514:	2aff      	cmp	r2, #255	; 0xff
 8090516:	d904      	bls.n	8090522 <__ascii_wctomb+0x14>
 8090518:	228a      	movs	r2, #138	; 0x8a
 809051a:	f04f 30ff 	mov.w	r0, #4294967295
 809051e:	601a      	str	r2, [r3, #0]
 8090520:	4770      	bx	lr
 8090522:	2001      	movs	r0, #1
 8090524:	700a      	strb	r2, [r1, #0]
 8090526:	4770      	bx	lr

08090528 <__aeabi_d2lz>:
 8090528:	b538      	push	{r3, r4, r5, lr}
 809052a:	460c      	mov	r4, r1
 809052c:	4605      	mov	r5, r0
 809052e:	4621      	mov	r1, r4
 8090530:	4628      	mov	r0, r5
 8090532:	2200      	movs	r2, #0
 8090534:	2300      	movs	r3, #0
 8090536:	f7fd fbb9 	bl	808dcac <__aeabi_dcmplt>
 809053a:	b928      	cbnz	r0, 8090548 <__aeabi_d2lz+0x20>
 809053c:	4628      	mov	r0, r5
 809053e:	4621      	mov	r1, r4
 8090540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8090544:	f7fe b81e 	b.w	808e584 <__aeabi_d2ulz>
 8090548:	4628      	mov	r0, r5
 809054a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 809054e:	f7fe f819 	bl	808e584 <__aeabi_d2ulz>
 8090552:	4240      	negs	r0, r0
 8090554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8090558:	bd38      	pop	{r3, r4, r5, pc}
 809055a:	bf00      	nop

0809055c <dynalib_user>:
 809055c:	0051 0808 0091 0808 00b9 0808 00bd 0808     Q...............
 809056c:	0000 0000 0100 0402 1008 6f67 676f 656c     ..........google
 809057c:	6720 6f65 6f6c 6163 6974 6e6f 003a 614c      geolocation:.La
 809058c:	6974 7574 6564 253a 2c66 6c20 6e6f 6967     titude:%f, longi
 809059c:	7574 6564 253a 2c66 6120 6363 253a 0066     tude:%f, acc:%f.
 80905ac:	2e25 6636 2500 2e33 6632 2500 322e 0058     %.6f.%3.2f.%.2X.
 80905bc:	6554 706d 7265 7461 7275 2065 6572 6461     Temperature read
 80905cc:	6e69 2067 7266 6d6f 4820 4849 3138 3032     ing from HIH8120
 80905dc:	5400 6d65 6570 6172 7574 6572 7220 6165     .Temperature rea
 80905ec:	6964 676e 6620 6f72 206d 4d54 3350 0036     ding from TMP36.
 80905fc:	6554 706d 7265 7461 7275 2065 6572 6461     Temperature read
 809060c:	6e69 2067 7266 6d6f 4220 454d 6620 726f     ing from BME for
 809061c:	4120 706c 6168 6573 736e 0065 7548 696d      Alphasense.Humi
 809062c:	6964 7974 7220 6165 6964 676e 6620 6f72     dity reading fro
 809063c:	206d 4948 3848 3231 0030 7548 696d 6964     m HIH8120.Humidi
 809064c:	7974 7220 6165 6964 676e 6620 6f72 206d     ty reading from 
 809065c:	4d42 0045 6167 2073 6572 6973 7473 6e61     BME.gas resistan
 809066c:	6563 203a 3125 302e 2c66 6820 6d75 6469     ce: %1.0f, humid
 809067c:	7469 3a79 2520 2e31 6632 0d0a 4700 7361     ity: %1.2f...Gas
 809068c:	7320 6f63 6572 203a 4800 6d75 6469 7469      score: .Humidit
 809069c:	2079 6373 726f 3a65 0020 7453 7261 2074     y score: .Start 
 80906ac:	666f 6120 706c 6168 3220 7220 6165 0064     of alpha 2 read.
 80906bc:	6f43 6c75 6e64 7427 6320 6d6f 756d 696e     Couldn't communi
 80906cc:	6163 6574 7720 7469 2068 4d4c 3950 3031     cate with LMP910
 80906dc:	3030 3220 6800 6c61 2066 7276 6665 2032     00 2.half vref2 
 80906ec:	6461 3173 5300 6174 7574 2073 3d3d 3020     ads1.Status == 0
 80906fc:	6620 6f72 206d 4d4c 3950 3031 3030 3220      from LMP91000 2
 809070c:	7320 6174 7574 2073 6572 0067 392d 0039      status reg.-99.
 809071c:	7257 7469 6e69 2067 6164 6174 7420 206f     Writing data to 
 809072c:	6f6c 2067 6966 656c 002e 6946 656c 5320     log file..File S
 809073c:	6174 7472 7420 6d69 7365 6174 706d 203a     tart timestamp: 
 809074c:	5500 616e 6c62 2065 6f74 7720 6972 6574     .Unable to write
 809075c:	7420 206f 6f6c 2067 6966 656c 6900 696e      to log file.ini
 809076c:	0074 4747 0041 7245 6f72 2072 6572 6461     t.GGA.Error read
 809077c:	6e69 2067 5047 0053 5047 2053 7475 2063     ing GPS.GPS utc 
 809078c:	7473 6972 676e 203a 4c00 7461 7469 6475     string: .Latitud
 809079c:	2065 7473 6972 676e 203a 6c00 6e6f 6967     e string: .longi
 80907ac:	7574 6564 7320 7274 6e69 3a67 0020 7453     tude string: .St
 80907bc:	7261 2074 666f 6120 706c 6168 7220 6165     art of alpha rea
 80907cc:	0064 6f43 6c75 6e64 7427 6320 6d6f 756d     d.Couldn't commu
 80907dc:	696e 6163 6574 7720 7469 2068 4d4c 3950     nicate with LMP9
 80907ec:	3031 3030 4800 6c61 7666 6c6f 3a74 2520     1000.Halfvolt: %
 80907fc:	2e31 6632 0d0a 4800 6c61 7666 6c6f 2074     1.2f...Halfvolt 
 809080c:	6968 6867 7265 7420 6168 206e 2e30 0035     higher than 0.5.
 809081c:	7453 7461 7375 3d20 3020 6620 6f72 206d     Status = 0 from 
 809082c:	4d4c 3950 3031 3030 7320 6174 7574 2073     LMP91000 status 
 809083c:	6572 0067 4d4c 3150 3030 2030 7473 7461     reg.LMP1000 stat
 809084c:	7375 3d20 3020 4300 204f 656d 7361 7275     us = 0.CO measur
 809085c:	6d65 6e65 7374 203a 0a20 000d 3041 675f     ements:  ...A0_g
 809086c:	7361 203a 6425 0d0a 4100 5f31 7561 3a78     as: %d...A1_aux:
 809087c:	2520 0a64 000d 3241 745f 6d65 3a70 2520      %d...A2_temp: %
 809088c:	0a64 000d 6168 666c 765f 6572 3a66 2520     d...half_vref: %
 809089c:	0a64 000d 2140 5300 6e65 6964 676e 6e20     d...@!.Sending n
 80908ac:	7765 7720 6669 2069 7263 6465 6e65 6974     ew wifi credenti
 80908bc:	6c61 2073 6f74 4520 5053 5300 6375 6563     als to ESP.Succe
 80908cc:	7373 0021 6146 6c69 6465 7420 206f 6572     ss!.Failed to re
 80908dc:	6461 4220 454d 3836 0030 0024 6c4f 2064     ad BME680.$.Old 
 80908ec:	6e69 7570 2074 7563 7272 6e65 2074 696c     input current li
 80908fc:	696d 3a74 2520 0a64 000d 654e 2077 6e69     mit: %d...New in
 809090c:	7570 2074 7563 7272 6e65 2074 696c 696d     put current limi
 809091c:	3a74 2520 0a64 000d 6e49 7263 6165 6973     t: %d...Increasi
 809092c:	676e 4320 6168 6772 2065 7563 7272 6e65     ng Charge curren
 809093c:	2074 7266 6d6f 2520 2064 416d 7420 206f     t from %d mA to 
 809094c:	6e00 7765 6320 6168 6772 2065 7563 7272     .new charge curr
 809095c:	6e65 2074 666f 2520 2064 416d 0d0a 4300     ent of %d mA...C
 809096c:	7275 6572 746e 7320 6f74 6572 2064 7373     urrent stored ss
 809097c:	6469 203a 4300 7275 6572 746e 7320 6f74     id: .Current sto
 809098c:	6572 2064 6170 7373 6f77 6472 203a 5000     red password: .P
 809099c:	656c 7361 2065 6e65 6574 2072 6170 7373     lease enter pass
 80909ac:	6f77 6472 6920 206e 726f 6564 2072 6f74     word in order to
 80909bc:	6d20 6b61 2065 6863 6e61 6567 2e73 0d0a      make changes...
 80909cc:	6200 756f 646c 5000 7361 7773 726f 2064     .bould.Password 
 80909dc:	6f63 7272 6365 2174 4500 746e 7265 6e20     correct!.Enter n
 80909ec:	7765 7320 6973 3a64 5900 756f 2072 656e     ew ssid:.Your ne
 80909fc:	2077 7373 6469 7720 6c69 206c 6562 203a     w ssid will be: 
 8090a0c:	4900 2073 6874 7369 6f20 616b 3f79 7928     .Is this okay?(y
 8090a1c:	6f20 2072 296e 5300 7661 6e69 2067 656e      or n).Saving ne
 8090a2c:	2077 7373 6469 4500 746e 7265 6e20 7765     w ssid.Enter new
 8090a3c:	7020 7361 7773 726f 0064 6f59 7275 6e20      password.Your n
 8090a4c:	7765 7020 7361 7773 726f 2064 6977 6c6c     ew password will
 8090a5c:	6220 3a65 0020 6153 6976 676e 6e20 7765      be: .Saving new
 8090a6c:	7020 7361 7773 726f 0064 6b6f 7961 202c      password.okay, 
 8090a7c:	6f6e 7020 6f72 6c62 6d65 0d0a 5000 656c     no problem...Ple
 8090a8c:	7361 2065 6e65 6574 2072 6170 7373 6f77     ase enter passwo
 8090a9c:	6472 6920 206e 726f 6564 2072 6f74 6520     rd in order to e
 8090aac:	616e 6c62 2065 6164 6174 7020 7375 2068     nable data push 
 8090abc:	6f74 5320 6e65 6973 6c62 2065 6f49 0074     to Sensible Iot.
 8090acc:	6d69 6573 736e 6269 656c 4500 616e 6c62     imsensible.Enabl
 8090adc:	6e69 2067 6573 736e 6269 656c 6920 746f     ing sensible iot
 8090aec:	6420 7461 2061 7570 6873 002e 0d0a 6e49      data push....In
 8090afc:	6f63 7272 6365 2074 6170 7373 6f77 6472     correct password
 8090b0c:	0021 6c50 6165 6573 6520 746e 7265 7020     !.Please enter p
 8090b1c:	7361 7773 726f 2064 6e69 6f20 6472 7265     assword in order
 8090b2c:	7420 206f 7061 6c70 2079 6564 6166 6c75      to apply defaul
 8090b3c:	2074 6573 7474 6e69 7367 5000 7361 7773     t settings.Passw
 8090b4c:	726f 2064 6f63 7272 6365 2c74 7220 7365     ord correct, res
 8090b5c:	7465 6974 676e 6120 6c6c 7320 7465 6974     etting all setti
 8090b6c:	676e 2073 6f74 6420 6665 7561 746c 2021     ngs to default! 
 8090b7c:	5020 656c 7361 2065 6572 6573 2074 6f79      Please reset yo
 8090b8c:	7275 4920 2044 6f74 7420 6568 6f20 656e     ur ID to the one
 8090b9c:	7320 6f68 6e77 6f20 206e 6f79 7275 6520      shown on your e
 8090bac:	636e 6f6c 7573 6572 002e 6e45 6574 2072     nclosure..Enter 
 8090bbc:	656e 2077 6544 6976 6563 7420 6d69 2065     new Device time 
 8090bcc:	6e61 2064 6164 6574 2820 3031 6420 6769     and date (10 dig
 8090bdc:	7469 6520 6f70 6863 7420 6d69 7365 6174     it epoch timesta
 8090bec:	706d 3a29 0a00 4e0d 7765 4420 7665 6369     mp):...New Devic
 8090bfc:	2065 6954 656d 003a 0d0a 6e49 6176 696c     e Time:...Invali
 8090c0c:	2064 6176 756c 2165 4300 7275 6572 746e     d value!.Current
 8090c1c:	4320 324f 7320 6f6c 6570 003a 7020 6d70      CO2 slope:. ppm
 8090c2c:	4500 746e 7265 6e20 7765 4320 324f 7320     .Enter new CO2 s
 8090c3c:	6f6c 6570 0d0a 0a00 4e0d 7765 4320 324f     lope.....New CO2
 8090c4c:	7320 6f6c 6570 203a 4300 7275 6572 746e      slope: .Current
 8090c5c:	4320 204f 6c73 706f 3a65 4500 746e 7265      CO slope:.Enter
 8090c6c:	6e20 7765 4320 204f 6c73 706f 0a65 000d      new CO slope...
 8090c7c:	0d0a 654e 2077 4f43 7320 6f6c 6570 203a     ..New CO slope: 
 8090c8c:	4300 7275 6572 746e 5020 314d 7320 6f6c     .Current PM1 slo
 8090c9c:	6570 003a 6e45 6574 2072 656e 2077 4d50     pe:.Enter new PM
 8090cac:	2031 6c73 706f 0a65 000d 0d0a 654e 2077     1 slope.....New 
 8090cbc:	4d50 2031 6c73 706f 3a65 0020 7543 7272     PM1 slope: .Curr
 8090ccc:	6e65 2074 4d50 2e32 2035 6c73 706f 3a65     ent PM2.5 slope:
 8090cdc:	4500 746e 7265 6e20 7765 5020 324d 352e     .Enter new PM2.5
 8090cec:	7320 6f6c 6570 0d0a 0a00 4e0d 7765 5020      slope.....New P
 8090cfc:	324d 352e 7320 6f6c 6570 203a 4300 7275     M2.5 slope: .Cur
 8090d0c:	6572 746e 5020 314d 2030 6c73 706f 3a65     rent PM10 slope:
 8090d1c:	4500 746e 7265 6e20 7765 5020 314d 2030     .Enter new PM10 
 8090d2c:	6c73 706f 0a65 000d 0d0a 654e 2077 4d50     slope.....New PM
 8090d3c:	3031 7320 6f6c 6570 203a 4300 7275 6572     10 slope: .Curre
 8090d4c:	746e 5420 6d65 6570 6172 7574 6572 7320     nt Temperature s
 8090d5c:	6f6c 6570 003a 4420 6765 6572 7365 4320     lope:. Degrees C
 8090d6c:	4500 746e 7265 6e20 7765 5420 6d65 6570     .Enter new Tempe
 8090d7c:	6172 7574 6572 7320 6f6c 6570 0d0a 0a00     rature slope....
 8090d8c:	4e0d 7765 5420 6d65 6570 6172 7574 6572     .New Temperature
 8090d9c:	7320 6f6c 6570 203a 4300 7275 6572 746e      slope: .Current
 8090dac:	5020 6572 7373 7275 2065 6c73 706f 3a65      Pressure slope:
 8090dbc:	2000 6f74 7272 4500 746e 7265 6e20 7765     . torr.Enter new
 8090dcc:	5020 6572 7373 7275 2065 6c73 706f 0a65      Pressure slope.
 8090ddc:	000d 0d0a 654e 2077 7250 7365 7573 6572     ....New Pressure
 8090dec:	7320 6f6c 6570 203a 4300 7275 6572 746e      slope: .Current
 8090dfc:	5220 2048 6c73 706f 3a65 2000 0025 6e45      RH slope:. %.En
 8090e0c:	6574 2072 656e 2077 4852 7320 6f6c 6570     ter new RH slope
 8090e1c:	0d0a 0a00 4e0d 7765 5220 2048 6c73 706f     .....New RH slop
 8090e2c:	3a65 0020 4f43 203a 3125 332e 2066 7070     e: .CO: %1.3f pp
 8090e3c:	0a6d 000d 6f43 6d6d 6e61 3a64 2020 6544     m...Command:  De
 8090e4c:	6373 6972 7470 6f69 006e 3a61 2020 6441     scription.a:  Ad
 8090e5c:	756a 7473 4320 324f 7320 6f6c 6570 6200     just CO2 slope.b
 8090e6c:	203a 4120 6a64 7375 2074 4f43 2032 657a     :  Adjust CO2 ze
 8090e7c:	6f72 6300 203a 4120 6a64 7375 2074 4f43     ro.c:  Adjust CO
 8090e8c:	7320 6f6c 6570 6400 203a 4120 6a64 7375      slope.d:  Adjus
 8090e9c:	2074 4f43 7a20 7265 006f 3a65 2020 6441     t CO zero.e:  Ad
 8090eac:	756a 7473 5020 314d 7320 6f6c 6570 6600     just PM1 slope.f
 8090ebc:	203a 4120 6a64 7375 2074 4d50 2031 657a     :  Adjust PM1 ze
 8090ecc:	6f72 6700 203a 4120 6a64 7375 2074 4d50     ro.g:  Adjust PM
 8090edc:	2e32 2035 6c73 706f 0065 3a68 2020 6441     2.5 slope.h:  Ad
 8090eec:	756a 7473 5020 324d 352e 7a20 7265 006f     just PM2.5 zero.
 8090efc:	3a69 2020 6441 756a 7473 5020 314d 2030     i:  Adjust PM10 
 8090f0c:	6c73 706f 0065 3a6a 2020 6441 756a 7473     slope.j:  Adjust
 8090f1c:	5020 314d 2030 657a 6f72 6b00 203a 4120      PM10 zero.k:  A
 8090f2c:	6a64 7375 2074 6554 706d 7265 7461 7275     djust Temperatur
 8090f3c:	2065 6c73 706f 0065 3a6c 2020 6441 756a     e slope.l:  Adju
 8090f4c:	7473 5420 6d65 6570 6172 7574 6572 7a20     st Temperature z
 8090f5c:	7265 006f 3a6d 2020 6441 756a 7473 5020     ero.m:  Adjust P
 8090f6c:	6572 7373 7275 2065 6c73 706f 0065 3a6e     ressure slope.n:
 8090f7c:	2020 6441 756a 7473 5020 6572 7373 7275       Adjust Pressur
 8090f8c:	2065 657a 6f72 6f00 203a 4120 6a64 7375     e zero.o:  Adjus
 8090f9c:	2074 7548 696d 6964 7974 7320 6f6c 6570     t Humidity slope
 8090fac:	7000 203a 4120 6a64 7375 2074 7548 696d     .p:  Adjust Humi
 8090fbc:	6964 7974 7a20 7265 006f 3a71 2020 6e45     dity zero.q:  En
 8090fcc:	6261 656c 7320 7265 6169 206c 6564 7562     able serial debu
 8090fdc:	6767 6e69 0067 3a72 2020 6944 6173 6c62     gging.r:  Disabl
 8090fec:	2065 6573 6972 6c61 6420 6265 6775 6967     e serial debuggi
 8090ffc:	676e 7300 203a 4f20 7475 7570 2074 6568     ng.s:  Output he
 809100c:	6461 7265 7320 7274 6e69 0067 3a74 2020     ader string.t:  
 809101c:	6e45 6574 2072 656e 2077 6974 656d 6120     Enter new time a
 809102c:	646e 6420 7461 0065 3a75 2020 6e45 6574     nd date.u:  Ente
 809103c:	2072 656e 2077 6974 656d 7a20 6e6f 0065     r new time zone.
 809104c:	3a76 2020 6441 756a 7473 7420 6568 4420     v:  Adjust the D
 809105c:	7665 6369 2065 4449 7700 203a 4720 7465     evice ID.w:  Get
 809106c:	7720 6669 2069 7263 6465 6e65 6974 6c61      wifi credential
 809107c:	0073 3a79 2020 6e45 6261 656c 6320 6c65     s.y:  Enable cel
 809108c:	756c 616c 0072 3a7a 2020 6944 6173 6c62     lular.z:  Disabl
 809109c:	2065 6563 6c6c 6c75 7261 3100 203a 4120     e cellular.1:  A
 80910ac:	6a64 7375 2074 6167 2073 6f6c 6577 2072     djust gas lower 
 80910bc:	696c 696d 0074 3a32 2020 6441 756a 7473     limit.2:  Adjust
 80910cc:	6720 7361 7520 7070 7265 6c20 6d69 7469      gas upper limit
 80910dc:	3300 203a 4720 7465 6220 6975 646c 7620     .3:  Get build v
 80910ec:	7265 6973 6e6f 3400 203a 4520 616e 6c62     ersion.4:  Enabl
 80910fc:	2065 7a4f 6e6f 0065 3a35 2020 6944 6173     e Ozone.5:  Disa
 809110c:	6c62 2065 7a4f 6e6f 0065 3a36 2020 6e45     ble Ozone.6:  En
 809111c:	6261 656c 5620 434f 7327 3700 203a 4420     able VOC's.7:  D
 809112c:	7369 6261 656c 5620 434f 7327 3800 203a     isable VOC's.8: 
 809113c:	4f20 7475 7570 2074 6874 2065 4d50 4349      Output the PMIC
 809114c:	7320 7379 6574 206d 6f63 666e 6769 7275      system configur
 809115c:	7461 6f69 006e 3a39 2020 6e49 7263 6165     ation.9:  Increa
 809116c:	6573 7420 6568 6320 6168 6772 2065 7563     se the charge cu
 809117c:	7272 6e65 2074 7962 3620 2034 416d 3000     rrent by 64 mA.0
 809118c:	203a 4920 636e 6572 7361 2065 6874 2065     :  Increase the 
 809119c:	7563 7272 6e65 2074 6e69 7570 2074 696c     current input li
 80911ac:	696d 2074 7962 3120 3030 6d20 0041 3a41     mit by 100 mA.A:
 80911bc:	2020 754f 7470 7570 2074 4f43 6320 6e6f       Ouptput CO con
 80911cc:	7473 6e61 6c74 2079 6e61 2064 6172 6970     stantly and rapi
 80911dc:	6c64 0079 3a42 2020 754f 7074 7475 5020     dly.B:  Output P
 80911ec:	204d 6f63 736e 6174 746e 796c 6120 646e     M constantly and
 80911fc:	7220 7061 6469 796c 4300 203a 4320 6168      rapidly.C:  Cha
 809120c:	676e 2065 6574 706d 7265 7461 7275 2065     nge temperature 
 809121c:	6e75 7469 2073 6f74 4320 6c65 6963 7375     units to Celcius
 809122c:	4400 203a 4420 7369 6261 656c 5420 504d     .D:  Disable TMP
 809123c:	3633 7420 6d65 6570 6172 7574 6572 7320     36 temperature s
 809124c:	6e65 6f73 2072 6e61 2064 7375 2065 4d42     ensor and use BM
 809125c:	3645 3038 7420 6d65 6570 6172 7574 6572     E680 temperature
 809126c:	4500 203a 4520 616e 6c62 2065 4d54 3350     .E:  Enable TMP3
 809127c:	2036 6574 706d 7265 7461 7275 2065 6573     6 temperature se
 809128c:	736e 726f 6120 646e 6420 7369 6261 656c     nsor and disable
 809129c:	4220 454d 3836 2030 6574 706d 7265 7461      BME680 temperat
 80912ac:	7275 0065 3a46 2020 6843 6e61 6567 7420     ure.F:  Change t
 80912bc:	6d65 6570 6172 7574 6572 7520 696e 7374     emperature units
 80912cc:	7420 206f 6146 6572 686e 6965 0074 3a47      to Farenheit.G:
 80912dc:	2020 6552 6461 6f20 6f7a 656e 6620 6f72       Read ozone fro
 80912ec:	206d 6e61 6c61 676f 6920 706e 7475 2820     m analog input (
 80912fc:	6f6e 2074 6964 6967 6174 6c6c 2079 202d     not digitally - 
 809130c:	6f62 7261 2064 6564 6570 646e 6e65 2974     board dependent)
 809131c:	4800 203a 5220 6165 2064 7a6f 6e6f 2065     .H:  Read ozone 
 809132c:	6964 6967 6174 6c6c 2079 6e28 746f 7420     digitally (not t
 809133c:	7268 756f 6867 6120 616e 6f6c 2067 6e69     hrough analog in
 809134c:	7570 2074 202d 6f62 7261 2064 6564 6570     put - board depe
 809135c:	646e 6e65 2974 4900 203a 4120 6a64 7375     ndent).I:  Adjus
 809136c:	2074 7266 7165 6575 636e 2079 6f66 2072     t frequency for 
 809137c:	7075 6f6c 6461 6e69 2067 6874 6f72 6775     uploading throug
 809138c:	2068 6563 6c6c 6c75 7261 4a00 203a 5220     h cellular.J:  R
 809139c:	7365 7465 4520 5053 202c 4f43 2c32 5020     eset ESP, CO2, P
 80913ac:	616c 746e 776f 7265 4b00 203a 4320 6e6f     lantower.K:  Con
 80913bc:	6974 756e 756f 2073 6573 6972 6c61 6f20     tinuous serial o
 80913cc:	7475 7570 2074 666f 4720 5350 4c00 203a     utput of GPS.L: 
 80913dc:	5720 6972 6574 6420 6665 7561 746c 7320      Write default s
 80913ec:	7465 6974 676e 0073 3a4d 2020 6e45 6261     ettings.M:  Enab
 80913fc:	656c 3220 2530 6220 7461 6574 7972 7420     le 20% battery t
 809140c:	7268 7365 6f68 646c 6c20 6d69 7469 6e69     hreshold limitin
 809141c:	0067 3a4e 2020 6944 6173 6c62 2065 3032     g.N:  Disable 20
 809142c:	2025 6162 7474 7265 2079 6874 6572 6873     % battery thresh
 809143c:	6c6f 2064 696c 696d 6974 676e 5720 5241     old limiting WAR
 809144c:	494e 474e 2121 4f00 203a 4520 616e 6c62     NING!!.O:  Enabl
 809145c:	2065 6f6c 2077 6f70 6577 2072 6f66 2072     e low power for 
 809146c:	5047 2053 6f6d 7564 656c 5000 203a 5420     GPS module.P:  T
 809147c:	7275 206e 666f 2066 4142 4654 5445 5100     urn off BATFET.Q
 809148c:	203a 4120 6c6c 776f 4220 5441 4546 2054     :  Allow BATFET 
 809149c:	6f74 7420 7275 206e 6e6f 5200 203a 4420     to turn on.R:  D
 80914ac:	7369 6261 656c 4120 4342 6c20 676f 6369     isable ABC logic
 80914bc:	6620 726f 4320 324f 7320 6e65 6f73 0072      for CO2 sensor.
 80914cc:	3a53 2020 6e45 6261 656c 4120 4342 6c20     S:  Enable ABC l
 80914dc:	676f 6369 6620 726f 4320 324f 7320 6e65     ogic for CO2 sen
 80914ec:	6f73 0072 3a54 2020 6e45 6261 656c 642f     sor.T:  Enable/d
 80914fc:	7369 6261 656c 4820 4849 3138 3032 5220     isable HIH8120 R
 809150c:	2048 6573 736e 726f 5500 203a 5320 6977     H sensor.U:  Swi
 809151c:	6374 2068 6f73 6b63 7465 7720 6568 6572     tch socket where
 809152c:	4320 204f 7369 7220 6165 2064 7266 6d6f      CO is read from
 809153c:	5700 203a 4520 616e 6c62 2f65 6944 6173     .W:  Enable/Disa
 809154c:	6c62 2065 6f67 676f 656c 6c20 636f 7461     ble google locat
 809155c:	6f69 206e 6573 7672 6369 7365 5600 203a     ion services.V: 
 809156c:	4320 6c61 6269 6172 6574 4320 324f 7320      Calibrate CO2 s
 809157c:	6e65 6f73 2072 202d 756d 7473 7320 7075     ensor - must sup
 809158c:	6c70 2079 6d61 6962 6e65 2074 656c 6576     ply ambient leve
 809159c:	206c 6728 206f 756f 7374 6469 2165 0029     l (go outside!).
 80915ac:	3a5a 2020 754f 7074 7475 6320 6c65 756c     Z:  Output cellu
 80915bc:	616c 2072 6e69 6f66 6d72 7461 6f69 206e     lar information 
 80915cc:	4328 4943 2c44 4920 454d 2c49 6520 6374     (CCID, IMEI, etc
 80915dc:	0029 3a21 2020 6f43 746e 6e69 6f75 7375     ).!:  Continuous
 80915ec:	7320 7265 6169 206c 756f 7074 7475 6f20      serial output o
 80915fc:	2066 4f56 2743 0073 2040 2020 6e45 6261     f VOC's.@   Enab
 809160c:	656c 442f 7369 6261 656c 5320 6e65 6973     le/Disable Sensi
 809161c:	6c62 2d65 6f69 2074 6164 6174 7020 7375     ble-iot data pus
 809162c:	2e68 2020 6649 6520 616e 6c62 6465 202c     h.  If enabled, 
 809163c:	6974 656d 7a20 6e6f 2065 6977 6c6c 6220     time zone will b
 809164c:	2065 6769 6f6e 6572 2064 202d 5455 2043     e ignored - UTC 
 809165c:	6977 6c6c 6220 2065 7375 6465 002e 2023     will be used..# 
 809166c:	2020 6e45 6261 656c 442f 7369 6261 656c       Enable/Disable
 809167c:	6320 7261 6f74 7070 7265 7020 776f 7265      cartopper power
 809168c:	6d20 646f 2e65 2020 6649 6520 616e 6c62      mode.  If enabl
 809169c:	6465 202c 6261 6573 736e 2065 666f 6520     ed, absense of e
 80916ac:	7478 7265 616e 206c 6f70 6577 2072 6977     xternal power wi
 80916bc:	6c6c 7320 6f74 2070 6563 6c6c 6c75 7261     ll stop cellular
 80916cc:	002e 3a3f 2020 754f 7074 7475 7420 6968     ..?:  Output thi
 80916dc:	2073 656d 756e 7800 203a 4520 6978 7374     s menu.x:  Exits
 80916ec:	7420 6968 2073 656d 756e 2c00 4f56 3a43      this menu.,VOC:
 80916fc:	0020 202c 4f43 203a 2c00 4320 324f 203a      ., CO: ., CO2: 
 809170c:	2c00 5020 314d 203a 2c00 4d50 2e32 3a35     ., PM1: .,PM2.5:
 809171c:	0020 202c 4d50 3031 203a 2c00 6554 706d      ., PM10: .,Temp
 809172c:	203a 2c00 7250 7365 3a73 0020 482c 4d55     : .,Press: .,HUM
 809173c:	203a 2c00 6e53 3a64 0020 4f2c 3a33 0020     : .,Snd: .,O3: .
 809174c:	6170 756d 0070 7550 6c62 7369 6568 2064     pamup.Published 
 809175c:	6170 756d 2070 6164 6174 0021 6573 736e     pamup data!.sens
 809176c:	6269 656c 6150 556d 0070 7550 6c62 7369     iblePamUp.Publis
 809177c:	6568 2064 6573 736e 6269 656c 6420 7461     hed sensible dat
 809178c:	2161 4300 6c65 756c 616c 2072 7369 6420     a!.Cellular is d
 809179c:	7369 6261 656c 2e64 4300 756f 646c 276e     isabled..Couldn'
 80917ac:	2074 6f63 6e6e 6365 2074 6f74 7020 7261     t connect to par
 80917bc:	6974 6c63 2e65 3b00 5000 4d41 002d 6e69     ticle..;.PAM-.in
 80917cc:	7473 7572 656d 746e 654b 0079 6164 6574     strumentKey.date
 80917dc:	6974 656d 2500 2d59 6d25 252d 5464 4825     time.%Y-%m-%dT%H
 80917ec:	253a 3a4d 5325 005a 4d50 5f31 0030 4d50     :%M:%SZ.PM1_0.PM
 80917fc:	5f32 0035 6554 706d 5000 6572 7373 4800     2_5.Temp.Press.H
 809180c:	646d 7974 4c00 7461 4c00 6e6f 0067 6425     mdty.Lat.Long.%d
 809181c:	252f 2f6d 7925 252c 3a48 4d25 253a 0053     /%m/%y,%H:%M:%S.
 809182c:	694c 656e 7420 206f 7277 7469 2065 6f74     Line to write to
 809183c:	6320 6f6c 6475 003a 6553 646e 6e69 2067      cloud:.Sending 
 809184c:	6164 6174 7420 206f 7365 2070 6f74 7520     data to esp to u
 809185c:	6c70 616f 2064 6976 2061 6977 6966 2e2e     pload via wifi..
 809186c:	002e 6553 646e 6e69 2067 6164 6174 7420     ..Sending data t
 809187c:	206f 7365 2070 6f74 7520 6c70 616f 2064     o esp to upload 
 809188c:	6976 2061 6977 6966 5700 6972 6974 676e     via wifi.Writing
 809189c:	7220 776f 7420 206f 6966 656c 002e 4544      row to file..DE
 80918ac:	2c56 4f43 7028 6d70 2c29 4f43 2832 7070     V,CO(ppm),CO2(pp
 80918bc:	296d 562c 434f 2873 4149 2951 502c 314d     m),VOCs(IAQ),PM1
 80918cc:	502c 324d 355f 502c 314d 2c30 2854 2943     ,PM2_5,PM10,T(C)
 80918dc:	502c 6572 7373 6d28 6142 2972 522c 2848     ,Press(mBar),RH(
 80918ec:	2925 4f2c 2833 7070 2962 422c 7461 2874     %),O3(ppb),Batt(
 80918fc:	2925 532c 646e 6428 2962 4c2c 7461 7469     %),Snd(db),Latit
 809190c:	6475 2c65 6f4c 676e 7469 6475 2c65 2f4e     ude,Longitude,N/
 809191c:	2c41 2f4e 2c41 6144 6574 542f 6d69 0065     A,N/A,Date/Time.
 809192c:	265a 4700 7465 6974 676e 6f20 6f7a 656e     Z&.Getting ozone
 809193c:	6420 7461 2061 7266 6d6f 6520 7073 5500      data from esp.U
 809194c:	616e 6c62 2065 6f74 6720 7465 6f20 6f7a     nable to get ozo
 809195c:	656e 6420 7461 2061 7266 6d6f 4520 5053     ne data from ESP
 809196c:	202c 6f63 6e75 6574 2072 6e69 6564 3a78     , counter index:
 809197c:	2520 2e31 6631 0d0a 5200 4345 4549 4556      %1.1f...RECIEVE
 809198c:	2044 4144 4154 4620 4f52 204d 5345 3a50     D DATA FROM ESP:
 809199c:	0020 6552 6963 7665 6465 6420 7461 2061      .Recieved data 
 80919ac:	7266 6d6f 4520 5053 6300 6d6f 616d 6920     from ESP.comma i
 80919bc:	646e 7865 203a 5300 7274 6e69 5b67 6425     ndex: .String[%d
 80919cc:	3a5d 7500 6973 676e 7320 7274 6e69 2067     ]:.using string 
 80919dc:	7261 6172 2079 6e69 6564 2078 2031 7564     array index 1 du
 80919ec:	2065 6f74 6c20 676f 6967 676e 7500 6973     e to logging.usi
 80919fc:	676e 7320 7274 6e69 2067 7261 6172 2079     ng string array 
 8091a0c:	6e69 6564 2078 2c30 6e20 746f 6c20 676f     index 0, not log
 8091a1c:	6967 676e 4f00 6f7a 656e 5220 7761 6120     ging.Ozone Raw a
 8091a2c:	616e 6f6c 2067 6e69 003a 7543 7272 6e65     nalog in:.Curren
 8091a3c:	2074 6544 6976 6563 4920 3a44 5000 656c     t Device ID:.Ple
 8091a4c:	7361 2065 6e65 6574 2072 6170 7373 6f77     ase enter passwo
 8091a5c:	6472 6920 206e 726f 6564 2072 6f74 6320     rd in order to c
 8091a6c:	6168 676e 2065 6874 2065 4449 4500 746e     hange the ID.Ent
 8091a7c:	7265 6e20 7765 4420 7665 6369 2065 4449     er new Device ID
 8091a8c:	003a 0d0a 654e 2077 6544 6976 6563 4920     :...New Device I
 8091a9c:	3a44 4500 746e 7265 6e20 7765 4420 7665     D:.Enter new Dev
 8091aac:	6369 2065 6974 656d 7a20 6e6f 2065 2d28     ice time zone (-
 8091abc:	3231 302e 7420 206f 3431 302e 0029 0d0a     12.0 to 14.0)...
 8091acc:	654e 2077 6544 6976 6563 7420 6d69 2065     New Device time 
 8091adc:	6f7a 656e 003a 7543 7272 6e65 2074 6f6c     zone:.Current lo
 8091aec:	6577 2072 696c 696d 3a74 5000 656c 7361     wer limit:.Pleas
 8091afc:	2065 6e65 6574 2072 6170 7373 6f77 6472     e enter password
 8091b0c:	6920 206e 726f 6564 2072 6f74 6320 6168      in order to cha
 8091b1c:	676e 2065 6874 2065 6f6c 6577 2072 696c     nge the lower li
 8091b2c:	696d 0074 6e45 6574 2072 656e 2077 6f6c     mit.Enter new lo
 8091b3c:	6577 2072 696c 696d 3a74 0d0a 0a00 4e0d     wer limit:.....N
 8091b4c:	7765 6c20 776f 7265 6c20 6d69 7469 003a     ew lower limit:.
 8091b5c:	7543 7272 6e65 2074 7075 6570 2072 696c     Current upper li
 8091b6c:	696d 3a74 5000 656c 7361 2065 6e65 6574     mit:.Please ente
 8091b7c:	2072 6170 7373 6f77 6472 6920 206e 726f     r password in or
 8091b8c:	6564 2072 6f74 6320 6168 676e 2065 6874     der to change th
 8091b9c:	2065 7075 6570 2072 696c 696d 0074 6e45     e upper limit.En
 8091bac:	6574 2072 656e 2077 7075 6570 2072 696c     ter new upper li
 8091bbc:	696d 3a74 0d0a 0a00 4e0d 7765 7520 7070     mit:.....New upp
 8091bcc:	7265 6c20 6d69 7469 003a 7453 7261 6974     er limit:.Starti
 8091bdc:	676e 7420 6568 6920 696e 6974 6c61 7a69     ng the initializ
 8091bec:	7461 6f69 006e 6567 6574 7065 6f72 646d     ation.geteepromd
 8091bfc:	7461 0061 742e 7478 4300 6568 6b63 6e69     ata..txt.Checkin
 8091c0c:	2067 6f66 2072 6473 6320 7261 0064 6f6c     g for sd card.lo
 8091c1c:	5f67 4300 6572 7461 6465 6e20 7765 6620     g_.Created new f
 8091c2c:	6c69 2065 6f74 6c20 676f 7420 206f 5375     ile to log to uS
 8091c3c:	2044 6163 6472 203a 4e00 206f 5375 2044     D card: .No uSD 
 8091c4c:	6163 6472 6420 7465 6365 6574 2e64 5300     card detected..S
 8091c5c:	6174 7472 6e69 2067 4d4c 3950 3031 3030     tarting LMP91000
 8091c6c:	4320 204f 6e69 7469 6169 696c 617a 6974      CO initializati
 8091c7c:	6e6f 4300 756f 646c 276e 2074 6f63 6d6d     on.Couldn't comm
 8091c8c:	6e75 6369 7461 2065 6977 6874 4c20 504d     unicate with LMP
 8091c9c:	3139 3030 2030 6f66 2072 4f43 4900 696e     91000 for CO.Ini
 8091cac:	6974 6c61 7a69 6465 4c20 504d 3139 3030     tialized LMP9100
 8091cbc:	2030 6f66 2072 4f43 4300 756f 646c 6e20     0 for CO.Could n
 8091ccc:	746f 6320 6d6f 756d 696e 6163 6574 7720     ot communicate w
 8091cdc:	7469 2068 6441 6661 7572 7469 415f 5344     ith Adafruit_ADS
 8091cec:	3131 3531 6620 726f 4320 004f 7453 7261     1115 for CO.Star
 8091cfc:	6974 676e 4c20 504d 3139 3030 2030 2032     ting LMP91000 2 
 8091d0c:	6e69 7469 6169 696c 617a 6974 6e6f 4300     initialization.C
 8091d1c:	756f 646c 276e 2074 6f63 6d6d 6e75 6369     ouldn't communic
 8091d2c:	7461 2065 6977 6874 4c20 504d 3139 3030     ate with LMP9100
 8091d3c:	2030 6f66 2072 0032 6e49 7469 6169 696c     0 for 2.Initiali
 8091d4c:	657a 2064 4d4c 3950 3031 3030 6620 726f     zed LMP91000 for
 8091d5c:	3220 4300 756f 646c 6e20 746f 6620 6e69      2.Could not fin
 8091d6c:	2064 2061 6176 696c 2064 4d42 3645 3038     d a valid BME680
 8091d7c:	7320 6e65 6f73 2c72 6320 6568 6b63 7720      sensor, check w
 8091d8c:	7269 6e69 2167 4900 696e 6974 6c61 7a69     iring!.Initializ
 8091d9c:	6465 4220 454d 5320 6e65 6f73 0072 6f43     ed BME Sensor.Co
 8091dac:	6c75 2064 6f6e 2074 6966 646e 6120 7620     uld not find a v
 8091dbc:	6c61 6469 5420 3736 3331 7320 6e65 6f73     alid T6713 senso
 8091dcc:	2c72 6320 6568 6b63 7720 7269 6e69 2167     r, check wiring!
 8091ddc:	4300 756f 646c 6e20 746f 6620 6e69 2064     .Could not find 
 8091dec:	2061 6176 696c 2064 3654 3137 0033 5345     a valid T6713.ES
 8091dfc:	2050 6572 6573 2174 4600 2057 6556 7372     P reset!.FW Vers
 8091e0c:	6f69 3a6e 0020 7542 6c69 3a64 0020 6553     ion: .Build: .Se
 8091e1c:	7474 6e69 2067 7075 6720 6f6f 6c67 2065     tting up google 
 8091e2c:	616d 7370 6720 6f65 6f6c 6163 6974 6e6f     maps geolocation
 8091e3c:	002e 7953 7473 6d65 7620 7265 6973 6e6f     ..System version
 8091e4c:	203a 7325 4300 7275 6572 746e 4620 6572     : %s.Current Fre
 8091e5c:	7571 6e65 7963 203a 2800 327e 7320 6365     quency: .(~2 sec
 8091e6c:	6e6f 2964 6d20 6165 7573 6572 656d 746e     ond) measurement
 8091e7c:	0073 6e45 6574 2072 656e 2077 6d61 756f     s.Enter new amou
 8091e8c:	746e 0d0a 0a00 4e0d 7765 4620 6572 7571     nt.....New Frequ
 8091e9c:	6e65 7963 203a 4300 7275 6572 746e 4320     ency: .Current C
 8091eac:	324f 7a20 7265 3a6f 4500 746e 7265 6e20     O2 zero:.Enter n
 8091ebc:	7765 4320 324f 5a20 7265 0a6f 000d 0d0a     ew CO2 Zero.....
 8091ecc:	654e 2077 4f43 2032 657a 6f72 203a 4300     New CO2 zero: .C
 8091edc:	7275 6572 746e 4320 204f 657a 6f72 003a     urrent CO zero:.
 8091eec:	7020 6270 4500 746e 7265 6e20 7765 4320      ppb.Enter new C
 8091efc:	204f 655a 6f72 0d0a 0a00 4e0d 7765 4320     O Zero.....New C
 8091f0c:	204f 657a 6f72 203a 4300 7275 6572 746e     O zero: .Current
 8091f1c:	5020 314d 7a20 7265 3a6f 2000 6775 6d2f      PM1 zero:. ug/m
 8091f2c:	0033 6e45 6574 2072 656e 2077 4d50 2031     3.Enter new PM1 
 8091f3c:	655a 6f72 0d0a 0a00 4e0d 7765 5020 314d     Zero.....New PM1
 8091f4c:	7a20 7265 3a6f 0020 7543 7272 6e65 2074      zero: .Current 
 8091f5c:	4d50 2e32 2035 657a 6f72 003a 6e45 6574     PM2.5 zero:.Ente
 8091f6c:	2072 656e 2077 4d50 2e32 2035 655a 6f72     r new PM2.5 Zero
 8091f7c:	0d0a 0a00 4e0d 7765 5020 324d 352e 7a20     .....New PM2.5 z
 8091f8c:	7265 3a6f 0020 7543 7272 6e65 2074 4d50     ero: .Current PM
 8091f9c:	3031 7a20 7265 3a6f 2000 6d75 6d2f 0033     10 zero:. um/m3.
 8091fac:	6e45 6574 2072 656e 2077 4d50 3031 5a20     Enter new PM10 Z
 8091fbc:	7265 0a6f 000d 0d0a 654e 2077 4d50 3031     ero.....New PM10
 8091fcc:	7a20 7265 3a6f 0020 7543 7272 6e65 2074      zero: .Current 
 8091fdc:	6554 706d 7265 7461 7275 2065 657a 6f72     Temperature zero
 8091fec:	003a 6e45 6574 2072 656e 2077 6554 706d     :.Enter new Temp
 8091ffc:	7265 7461 7275 2065 655a 6f72 0d0a 0a00     erature Zero....
 809200c:	4e0d 7765 5420 6d65 6570 6172 7574 6572     .New Temperature
 809201c:	7a20 7265 3a6f 0020 7543 7272 6e65 2074      zero: .Current 
 809202c:	7250 7365 7573 6572 7a20 7265 3a6f 4500     Pressure zero:.E
 809203c:	746e 7265 6e20 7765 5020 6572 7373 7275     nter new Pressur
 809204c:	2065 655a 6f72 0d0a 0a00 4e0d 7765 5020     e Zero.....New P
 809205c:	6572 7373 7275 2065 657a 6f72 203a 4300     ressure zero: .C
 809206c:	7275 6572 746e 5220 2048 657a 6f72 003a     urrent RH zero:.
 809207c:	6e45 6574 2072 656e 2077 4852 5a20 7265     Enter new RH Zer
 809208c:	0a6f 000d 0d0a 654e 2077 4852 7a20 7265     o.....New RH zer
 809209c:	3a6f 0020 654d 756e 003e 6553 6972 6c61     o: .Menu>.Serial
 80920ac:	6420 6265 6775 6967 676e 6520 616e 6c62      debugging enabl
 80920bc:	6465 002e 6553 6972 6c61 6420 6265 6775     ed..Serial debug
 80920cc:	6967 676e 6420 7369 6261 656c 2e64 4500     ging disabled..E
 80920dc:	616e 6c62 6e69 2067 6543 6c6c 6c75 7261     nabling Cellular
 80920ec:	002e 6543 6c6c 6c75 7261 6120 726c 6165     ..Cellular alrea
 80920fc:	7964 6520 616e 6c62 6465 002e 6944 6173     dy enabled..Disa
 809210c:	6c62 6e69 2067 6543 6c6c 6c75 7261 4300     bling Cellular.C
 809211c:	6c65 756c 616c 2072 6c61 6572 6461 2079     ellular already 
 809212c:	6964 6173 6c62 6465 002e 6554 706d 7265     disabled..Temper
 809213c:	7461 7275 2065 6e75 7469 2073 6c61 6572     ature units alre
 809214c:	6461 2079 6573 2074 6f74 4620 7261 6e65     ady set to Faren
 809215c:	6965 2e74 5400 6d65 6570 6172 7574 6572     eit..Temperature
 809216c:	7520 696e 7374 6120 726c 6165 7964 7320      units already s
 809217c:	7465 7420 206f 6543 636c 7569 2e73 4400     et to Celcius..D
 809218c:	7369 6261 696c 676e 6e20 7765 7420 6d65     isabling new tem
 809219c:	6570 6172 7574 6572 7320 6e65 6f73 0072     perature sensor.
 80921ac:	6554 706d 7265 7461 7275 2065 6573 736e     Temperature sens
 80921bc:	726f 6120 726c 6165 7964 6420 7369 6261     or already disab
 80921cc:	656c 0064 6554 706d 7265 7461 7275 2065     led.Temperature 
 80921dc:	6573 736e 726f 6120 726c 6165 7964 6520     sensor already e
 80921ec:	616e 6c62 6465 5400 6d65 6570 6172 7574     nabled.Temperatu
 80921fc:	2065 6573 736e 726f 6e20 776f 6520 616e     e sensor now ena
 809220c:	6c62 6465 4100 616e 6f6c 2067 6572 6461     bled.Analog read
 809221c:	6e69 2067 666f 6f20 6f7a 656e 6120 726c     ing of ozone alr
 809222c:	6165 7964 6520 616e 6c62 6465 4100 616e     eady enabled.Ana
 809223c:	6f6c 2067 6572 6461 6e69 2067 666f 6f20     log reading of o
 809224c:	6f7a 656e 6e20 776f 6520 616e 6c62 6465     zone now enabled
 809225c:	4400 6769 7469 6c61 7220 6165 6964 676e     .Digital reading
 809226c:	6f20 2066 7a6f 6e6f 2065 6c61 6572 6461      of ozone alread
 809227c:	2079 6e65 6261 656c 0064 6944 6967 6174     y enabled.Digita
 809228c:	206c 6572 6461 6e69 2067 666f 6f20 6f7a     l reading of ozo
 809229c:	656e 6e20 776f 6520 616e 6c62 6465 4f00     ne now enabled.O
 80922ac:	7475 7570 7474 6e69 2067 5047 2053 6f63     utputting GPS co
 80922bc:	746e 6e69 6f75 7375 796c 4200 7461 6574     ntinuously.Batte
 80922cc:	7972 7420 7268 7365 6f68 646c 6120 726c     ry threshold alr
 80922dc:	6165 7964 6520 616e 6c62 6465 4500 616e     eady enabled.Ena
 80922ec:	6c62 6e69 2067 6162 7474 7265 2079 6874     bling battery th
 80922fc:	6572 6873 6c6f 2064 696c 696d 6974 676e     reshold limiting
 809230c:	4200 7461 6574 7972 7420 7268 7365 6f68     .Battery thresho
 809231c:	646c 6120 726c 6165 7964 6420 7369 6261     ld already disab
 809232c:	656c 0064 6944 6173 6c62 6e69 2067 6162     led.Disabling ba
 809233c:	7474 7265 2079 6874 6572 6873 6c6f 2064     ttery threshold 
 809234c:	696c 696d 6974 676e 4500 616e 6c62 6e69     limiting.Enablin
 809235c:	2067 6f6c 2077 6f70 6577 2072 6f66 2072     g low power for 
 809236c:	7067 0073 7554 6e72 6e69 2067 666f 2066     gps.Turning off 
 809237c:	6162 6674 7465 4100 6c6c 776f 6e69 2067     batfet.Allowing 
 809238c:	6162 6674 7465 7420 206f 7574 6e72 6f20     batfet to turn o
 809239c:	006e 6944 6173 6c62 6e69 2067 4241 2043     n.Disabling ABC 
 80923ac:	6f6c 6967 2063 6f66 2072 4f43 2032 6573     logic for CO2 se
 80923bc:	736e 726f 4100 4342 6c20 676f 6369 6120     nsor.ABC logic a
 80923cc:	726c 6165 7964 6420 7369 6261 656c 0064     lready disabled.
 80923dc:	6e45 6261 696c 676e 6120 6362 6c20 676f     Enabling abc log
 80923ec:	6369 6620 726f 4320 324f 7320 6e65 6f73     ic for CO2 senso
 80923fc:	0072 4241 2043 6f6c 6967 2063 6c61 6572     r.ABC logic alre
 809240c:	6461 2079 6e65 6261 656c 0064 6e45 6261     ady enabled.Enab
 809241c:	696c 676e 4820 4849 3138 3032 5220 2048     ling HIH8120 RH 
 809242c:	6573 736e 726f 4400 7369 6261 696c 676e     sensor.Disabling
 809243c:	4820 4849 3138 3032 5220 2048 6573 736e      HIH8120 RH sens
 809244c:	726f 4e00 776f 7220 6165 6964 676e 4320     or.Now reading C
 809245c:	204f 7266 6d6f 5520 3032 412d 706c 6168     O from U20-Alpha
 809246c:	0032 6f4e 2077 6572 6461 6e69 2067 4f43     2.Now reading CO
 809247c:	6620 6f72 206d 3155 2d39 6c41 6870 3161      from U19-Alpha1
 809248c:	5200 7365 7465 6e69 2067 6874 2065 4f43     .Reseting the CO
 809249c:	2032 6573 736e 726f 4100 5050 5620 7265     2 sensor.APP Ver
 80924ac:	6973 6e6f 203a 4500 616e 6c62 6e69 2067     sion: .Enabling 
 80924bc:	7a4f 6e6f 0065 7a4f 6e6f 2065 6c61 6572     Ozone.Ozone alre
 80924cc:	6461 2079 6e65 6261 656c 0064 6944 6173     ady enabled.Disa
 80924dc:	6c62 6e69 2067 7a4f 6e6f 0065 7a4f 6e6f     bling Ozone.Ozon
 80924ec:	2065 6c61 6572 6461 2079 6964 6173 6c62     e already disabl
 80924fc:	6465 4500 616e 6c62 6e69 2067 4f56 2743     ed.Enabling VOC'
 809250c:	0073 4f56 2743 2073 6c61 6572 6461 2079     s.VOC's already 
 809251c:	6e65 6261 656c 0064 6944 6173 6c62 6e69     enabled.Disablin
 809252c:	2067 4f56 2743 0073 4f56 2743 2073 6c61     g VOC's.VOC's al
 809253c:	6572 6461 2079 6964 6173 6c62 6465 4600     ready disabled.F
 809254c:	7561 746c 203a 5300 7379 6574 206d 7473     ault: .System st
 809255c:	7461 7375 203a 4f00 7475 7570 7474 6e69     atus: .Outputtin
 809256c:	2067 6f6e 6d72 6c61 796c 4f00 7475 7570     g normally.Outpu
 809257c:	7474 6e69 2067 6e6f 796c 5020 004d 754f     tting only PM.Ou
 809258c:	7074 7475 6974 676e 5620 434f 2073 6f63     tputting VOCs co
 809259c:	746e 6e69 6f75 7375 796c 2021 5020 6572     ntinuously!  Pre
 80925ac:	7373 6120 796e 6220 7475 6f74 206e 6f74     ss any button to
 80925bc:	6520 6978 2e74 2e2e 5400 6f56 7363 253d      exit....TVocs=%
 80925cc:	2e31 6630 202c 6554 706d 253d 2e31 6631     1.0f, Temp=%1.1f
 80925dc:	202c 7270 7365 3d73 3125 312e 2c66 7220     , press=%1.1f, r
 80925ec:	3d68 3125 312e 0a66 000d 6944 6173 6c62     h=%1.1f...Disabl
 80925fc:	6e69 2067 6573 736e 6269 656c 6920 746f     ing sensible iot
 809260c:	6420 7461 2061 7570 6873 002e 6944 6173      data push..Disa
 809261c:	6c62 6e69 2067 6163 2072 6f74 7070 7265     bling car topper
 809262c:	7020 776f 7265 202e 0020 6e45 6261 696c      power.  .Enabli
 809263c:	676e 6320 7261 7420 706f 6570 2072 6f70     ng car topper po
 809264c:	6577 2e72 2020 6649 6e20 206f 7865 6574     wer.  If no exte
 809265c:	6e72 6c61 7020 776f 7265 202c 7973 7473     rnal power, syst
 809266c:	6d65 7720 6c69 206c 7574 6e72 6f20 6666     em will turn off
 809267c:	002e 6944 6173 6c62 6e69 2067 6f67 676f     ..Disabling goog
 809268c:	656c 6c20 636f 7461 6f69 206e 6573 7672     le location serv
 809269c:	6369 7365 002e 6e45 6261 696c 676e 6720     ices..Enabling g
 80926ac:	6f6f 6c67 2065 6f6c 6163 6974 6e6f 7320     oogle location s
 80926bc:	7265 6976 6563 2e73 4700 7465 6974 676e     ervices..Getting
 80926cc:	6320 6c65 756c 616c 2072 6e69 6f66 6d72      cellular inform
 80926dc:	7461 6f69 2c6e 7420 6968 2073 616d 2079     ation, this may 
 80926ec:	6174 656b 6120 7720 6968 656c 2e2e 002e     take a while....
 80926fc:	4d49 4945 253d 0073 4d49 4953 253d 0073     IMEI=%s.IMSI=%s.
 809270c:	4349 4943 3d44 7325 4500 6978 6974 676e     ICCID=%s.Exiting
 809271c:	7320 7265 6169 206c 656d 756e 2e2e 002e      serial menu....
 809272c:	6542 6f66 6572 7220 6165 6964 676e 6220     Before reading b
 809273c:	656d 6200 6665 726f 2065 6572 6461 6e69     me.before readin
 809274c:	2067 6d62 0065 7270 7365 7573 6572 6320     g bme.pressure c
 809275c:	726f 6572 7463 6f69 206e 6166 7463 726f     orrection factor
 809276c:	6620 726f 4320 324f 253a 2e31 6632 0d0a      for CO2:%1.2f..
 809277c:	4500 7272 726f 203a 7250 7365 7573 6572     .Error: Pressure
 809278c:	6f20 7475 6f20 2066 6172 676e 2c65 6e20      out of range, n
 809279c:	746f 7520 6973 676e 7020 6572 7373 7275     ot using pressur
 80927ac:	2065 6f63 7272 6365 6974 6e6f 6620 726f     e correction for
 80927bc:	4320 324f 002e 7250 7365 7573 6572 253d      CO2..Pressure=%
 80927cc:	2e31 6632 0d0a 7000 326d 352e 6320 726f     1.2f...pm2.5 cor
 80927dc:	6572 7463 6f69 206e 6166 7463 726f 203a     rection factor: 
 80927ec:	3125 322e 2c66 2520 2e31 6632 0d0a 6900     %1.2f, %1.2f...i
 80927fc:	636e 6d6f 696d 676e 6220 7479 3a65 4300     ncomming byte:.C
 809280c:	6e6f 656e 7463 6e69 2067 6f74 6320 6c65     onnecting to cel
 809281c:	756c 616c 2072 656e 7774 726f 006b 6661     lular network.af
 809282c:	6574 2072 6563 6c6c 6c75 7261 6e4f 4100     ter cellularOn.A
 809283c:	7466 7265 6320 6c65 756c 616c 4f72 006e     fter cellularOn.
 809284c:	6641 6574 2072 6170 7472 6369 656c 6320     After particle c
 809285c:	6e6f 656e 7463 7300 7465 6974 676e 7420     onnect.setting t
 809286c:	6972 6465 635f 6c65 756c 616c 5f72 6f63     ried_cellular_co
 809287c:	6e6e 6365 2074 6f74 6620 6c61 6573 4400     nnect to false.D
 809288c:	7369 6f63 6e6e 6365 6974 676e 6620 6f72     isconnecting fro
 809289c:	206d 6563 6c6c 6c75 7261 6e20 7465 6f77     m cellular netwo
 80928ac:	6b72 4700 696f 676e 7420 206f 6c73 6565     rk.Going to slee
 80928bc:	2070 6562 6163 7375 2065 6162 7474 7265     p because batter
 80928cc:	2079 7369 6220 6c65 776f 3220 2530 6320     y is below 20% c
 80928dc:	6168 6772 0065 0000                         harge...

080928e4 <_ZTV4File>:
	...
 80928ec:	0b9f 0808 0baf 0808 0bf5 0808 0be9 0808     ................
 80928fc:	0b83 0808 0bbd 0808 0be3 0808 0bdd 0808     ................

0809290c <_ZTV6SdFile>:
	...
 8092914:	0b9d 0808 0ba1 0808 0c89 0808 0bef 0808     ................

08092924 <_ZTV5SdFat>:
	...
 809292c:	0c25 0808 0c1d 0808 0c15 0808 0c0d 0808     %...............
 809293c:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 809294c:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 809295c:	831a 0000                                   ....

08092960 <_ZTV10PowerCheck>:
	...
 8092968:	7199 0808 71b1 0808 6143 696c 7262 7461     .q...q..Calibrat
 8092978:	6e69 2067 4f43 0032 6572 6461 6e69 2067     ing CO2.reading 
 8092988:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 8092998:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 80929a8:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 80929b8:	4c00 4253 203a 0000                         .LSB: ..

080929c0 <_ZTV5SdSpi>:
	...
 80929c8:	83b5 0808 83c5 0808 83b1 0808 843d 0808     ............=...
 80929d8:	8461 0808 8451 0808 84a5 0808               a...Q.......

080929e4 <_ZTV7HIH61XX>:
	...
 80929ec:	940d 0808 941d 0808 955d 0808 7325 227b     ........]...%s{"
 80929fc:	2269 253a 2c64 6c22 3a22 7525 222c 2263     i":%d,"l":%u,"c"
 8092a0c:	253a 2c64 6e22 3a22 6425 007d 227b 2263     :%d,"n":%d}.{"c"
 8092a1c:	7b3a 6f22 3a22 2522 2273 002c 6122 3a22     :{"o":"%s",."a":
 8092a2c:	005b 6564 6976 6563 6f4c 6163 6f74 0072     [.deviceLocator.
 8092a3c:	5441 5426 7000 6275 696c 6873 6f4c 6163     AT&T.publishLoca
 8092a4c:	6974 6e6f 7300 6163 446e 7461 3d61 7325     tion.scanData=%s
 8092a5c:	6800 6f6f 2d6b 6572 7073 6e6f 6573 252f     .hook-response/%
 8092a6c:	2f73 7325 0000 0000                         s/%s....

08092a74 <_ZTV26CellularHelperCREGResponse>:
	...
 8092a7c:	a569 0808                                   i...

08092a80 <_ZTV39CellularHelperEnvironmentResponseStaticILj4EE>:
	...
 8092a88:	a0cd 0808                                   ....

08092a8c <_ZTV23GoogleMapsDeviceLocator>:
	...
 8092a94:	95f9 0808 9619 0808 5954 4550 555f 4b4e     ........TYPE_UNK
 8092aa4:	4f4e 4e57 5400 5059 5f45 4b4f 5400 5059     NOWN.TYPE_OK.TYP
 8092ab4:	5f45 5245 4f52 0052 5954 4550 435f 4e4f     E_ERROR.TYPE_CON
 8092ac4:	454e 5443 5400 5059 5f45 4f4e 4143 5252     NECT.TYPE_NOCARR
 8092ad4:	4549 0052 5954 4550 4e5f 444f 4149 544c     IER.TYPE_NODIALT
 8092ae4:	4e4f 0045 5954 4550 425f 5355 0059 5954     ONE.TYPE_BUSY.TY
 8092af4:	4550 4e5f 414f 534e 4557 0052 5954 4550     PE_NOANSWER.TYPE
 8092b04:	505f 4f52 504d 0054 5954 4550 505f 554c     _PROMPT.TYPE_PLU
 8092b14:	0053 5954 4550 415f 4f42 5452 4445 7400     S.TYPE_ABORTED.t
 8092b24:	7079 3d65 7830 7825 6300 6c65 756c 616c     ype=0x%x.cellula
 8092b34:	2072 6572 7073 6e6f 6573 7420 7079 3d65     r response type=
 8092b44:	7325 6c20 6e65 253d 0064 6e5c 5c00 0072     %s len=%d.\n.\r.
 8092b54:	7830 3025 7832 6b00 7965 7420 6f6f 6c20     0x%02x.key too l
 8092b64:	6e6f 2067 656b 3d79 7325 7620 6c61 6575     ong key=%s value
 8092b74:	253d 0073 4152 0054 4d55 5354 4d00 4343     =%s.RAT.UMTS.MCC
 8092b84:	4d00 434e 4c00 4341 4300 0049 5342 4349     .MNC.LAC.CI.BSIC
 8092b94:	4100 4652 4e43 4100 4652 4e43 445f 4445     .ARFCN.ARFCN_DED
 8092ba4:	5200 4c58 5645 5553 0042 5f54 4441 0056     .RXLEVSUB.T_ADV.
 8092bb4:	5852 454c 0056 4c44 0046 4c55 0046 5352     RXLEV.DLF.ULF.RS
 8092bc4:	5043 4c20 5645 5200 4341 5300 0043 4345     CP LEV.RAC.SC.EC
 8092bd4:	304e 4c20 5645 7500 6b6e 6f6e 6e77 6b20     N0 LEV.unknown k
 8092be4:	7965 253d 2073 6176 756c 3d65 7325 4d00     ey=%s value=%s.M
 8092bf4:	4343 003a 4152 3a54 6c00 7461 253d 2066     CC:.RAT:.lat=%f 
 8092c04:	6f6c 3d6e 6625 6120 746c 253d 2064 6e75     lon=%f alt=%d un
 8092c14:	6563 7472 6961 746e 3d79 6425 7600 6c61     certainty=%d.val
 8092c24:	6469 663d 6c61 6573 2500 2c64 6425 222c     id=false.%d,%d,"
 8092c34:	7825 2c22 2522 2278 252c 0064 7473 7461     %x","%x",%d.stat
 8092c44:	253d 2064 616c 3d63 7830 7825 6320 3d69     =%d lac=0x%x ci=
 8092c54:	7830 7825 7220 7461 253d 0064 5441 432b     0x%x rat=%d.AT+C
 8092c64:	4d47 0d49 000a 5441 432b 4d47 0d4d 000a     GMI...AT+CGMM...
 8092c74:	5441 432b 5347 0d4e 000a 4343 4449 4100     AT+CGSN...CCID.A
 8092c84:	2b54 4343 4449 0a0d 5300 5241 2d41 3452     T+CCID...SARA-R4
 8092c94:	5500 4f44 4e50 4100 2b54 4455 504f 3d4e     .UDOPN.AT+UDOPN=
 8092ca4:	6425 0a0d 4300 4547 0044 5441 432b 4547     %d...CGED.AT+CGE
 8092cb4:	3d44 6425 0a0d 4100 2b54 5243 4745 323d     D=%d...AT+CREG=2
 8092cc4:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 8092cd4:	0a0d 4100 2b54 5243 4745 303d 0a0d 0a00     ...AT+CREG=0....
 8092ce4:	252b 3a73 0020 0000                         +%s: ...

08092cec <_ZTV28CellularHelperStringResponse>:
	...
 8092cf4:	a531 0808                                   1...

08092cf8 <_ZTV32CellularHelperPlusStringResponse>:
	...
 8092d00:	a569 0808                                   i...

08092d04 <_ZTV33CellularHelperEnvironmentResponse>:
	...
 8092d0c:	a0cd 0808                                   ....

08092d10 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 8092d10:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

08092d20 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 8092d20:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 8092d30:	766f 0066 7061 0070 2b25 3330 3a64 3025     ovf.app.%+03d:%0
 8092d40:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8092d50:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08092d60 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8092d68:	c3c1 0808 c3c7 0808 c405 0808 c3d5 0808     ................
 8092d78:	c3c3 0808                                   ....

08092d7c <_ZTV9IPAddress>:
	...
 8092d84:	c975 0808 c965 0808 c967 0808               u...e...g...

08092d90 <_ZTV9USBSerial>:
	...
 8092d98:	ca09 0808 ca6f 0808 ca47 0808 b911 0808     ....o...G.......
 8092da8:	ca39 0808 ca0b 0808 ca1b 0808 ca69 0808     9...........i...
 8092db8:	ca2b 0808 ca05 0808                         +.......

08092dc0 <_ZTVN5spark13CellularClassE>:
	...
 8092dc8:	cc8b 0808 cc81 0808 cc77 0808 cbfd 0808     ........w.......
 8092dd8:	cc6b 0808 0dd1 0808 cc5f 0808 cc57 0808     k......._...W...
 8092de8:	cc4d 0808 cc43 0808 cc07 0808               M...C.......

08092df4 <_ZTV11USARTSerial>:
	...
 8092dfc:	0b81 0808 0ddd 0808 cd07 0808 b911 0808     ................
 8092e0c:	ccd7 0808 ccf3 0808 cce5 0808 cd01 0808     ................
 8092e1c:	ccc5 0808 ccc9 0808                         ........

08092e24 <_ZTV7TwoWire>:
	...
 8092e2c:	cde5 0808 ce2f 0808 ce07 0808 cde7 0808     ..../...........
 8092e3c:	ce0f 0808 ce17 0808 ce1f 0808 ce27 0808     ............'...

08092e4c <_ZTVN5spark12NetworkClassE>:
	...
 8092e54:	cf3d 0808 cf47 0808 cf51 0808 cf5b 0808     =...G...Q...[...
 8092e64:	cf65 0808 cf71 0808 cf7d 0808 cf89 0808     e...q...}.......
 8092e74:	cf91 0808 cf9b 0808 cfa5 0808 2575 3430     ............u%04
 8092e84:	0078 0000                                   x...

08092e88 <_ZTVN5spark16JSONBufferWriterE>:
	...
 8092e90:	d001 0808 d003 0808 d011 0808 d037 0808     ............7...

08092ea0 <_ZSt7nothrow>:
 8092ea0:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 8092eb0:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

08092ec1 <day_name.4782>:
 8092ec1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8092ed1:	6972 6153                                    riSat

08092ed6 <mon_name.4783>:
 8092ed6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8092ee6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8092ef6:	4476 6365 6e69 7469 0079                    vDecinity.

08092f00 <fpi.6203>:
 8092f00:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8092f10:	0000 0000                                   ....

08092f14 <fpinan.6239>:
 8092f14:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 8092f24:	0000 0000                                   ....

08092f28 <tinytens>:
 8092f28:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8092f38:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8092f48:	6f43 64ac 0628 1168                         Co.d(.h.

08092f50 <_ctype_>:
 8092f50:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8092f60:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8092f70:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8092f80:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8092f90:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8092fa0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8092fb0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8092fc0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8092fd0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08093054 <_C_numeric_locale>:
 8093054:	26fa 0809 2ce2 0809 014c 2000 4f50 4953     .&...,..L.. POSI
 8093064:	0058 0000                                   X...

08093068 <__mprec_bigtens>:
 8093068:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8093078:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8093088:	bf3c 7f73 4fdd 7515                         <.s..O.u

08093090 <__mprec_tens>:
 8093090:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80930a0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80930b0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80930c0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80930d0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80930e0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80930f0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8093100:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8093110:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8093120:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8093130:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8093140:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8093150:	9db4 79d9 7843 44ea                         ...yCx.D

08093158 <p05.6127>:
 8093158:	0005 0000 0019 0000 007d 0000               ........}...

08093164 <link_const_variable_data_end>:
 8093164:	080869ed 	.word	0x080869ed
 8093168:	080884f9 	.word	0x080884f9
 809316c:	08089bcd 	.word	0x08089bcd
 8093170:	0808b26d 	.word	0x0808b26d
 8093174:	0808bd1d 	.word	0x0808bd1d
 8093178:	0808c0dd 	.word	0x0808c0dd
 809317c:	0808c129 	.word	0x0808c129
 8093180:	0808cc95 	.word	0x0808cc95
 8093184:	0808cfed 	.word	0x0808cfed
 8093188:	0808d315 	.word	0x0808d315

0809318c <link_constructors_end>:
 809318c:	00000000 	.word	0x00000000
