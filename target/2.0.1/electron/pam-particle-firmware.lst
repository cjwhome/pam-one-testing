
c:/Users/abailly/PAM_ESP/pam-particle-firmware/target/2.0.1/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000104e0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08090500  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002ac  20000000  08090504  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000f58  200002b0  200002b0  000402b0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080907b0  080907b0  000307b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080907d8  080907d8  000307d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00282a18  00000000  00000000  000307dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00027f02  00000000  00000000  002b31f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00003190  00000000  00000000  002db0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00008478  00000000  00000000  002de286  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003ccbe  00000000  00000000  002e66fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000609f8  00000000  00000000  003233bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c5d2f  00000000  00000000  00383db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000944c  00000000  00000000  00449ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00035e9a  00000000  00000000  00452f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <__udivmoddi4>:

DYNALIB_FN(15, services2, _printf_float, int(struct _reent*, struct _prt_data_t*, FILE*, int(*pfunc)(struct _reent* , FILE*, const char*, size_t), va_list*))
DYNALIB_FN(16, services2, _tzset_unlocked_r, void(struct _reent*))
// FIXME: this doesn't work with LTO, disable for now when importing
#if !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(17, services2, __udivmoddi4, unsigned long(unsigned long, unsigned long, unsigned long*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <__udivmoddi4+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <localtime_r+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080040:	b508      	push	{r3, lr}
 8080042:	4b02      	ldr	r3, [pc, #8]	; (808004c <strftime+0xc>)
 8080044:	681b      	ldr	r3, [r3, #0]
 8080046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080048:	9301      	str	r3, [sp, #4]
 808004a:	bd08      	pop	{r3, pc}
 808004c:	0806002c 	.word	0x0806002c

08080050 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080050:	4809      	ldr	r0, [pc, #36]	; (8080078 <module_user_pre_init+0x28>)
 8080052:	490a      	ldr	r1, [pc, #40]	; (808007c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080054:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080056:	4288      	cmp	r0, r1
 8080058:	d005      	beq.n	8080066 <module_user_pre_init+0x16>
 808005a:	4a09      	ldr	r2, [pc, #36]	; (8080080 <module_user_pre_init+0x30>)
 808005c:	4282      	cmp	r2, r0
 808005e:	d002      	beq.n	8080066 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080060:	1a12      	subs	r2, r2, r0
 8080062:	f00b ff39 	bl	808bed8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080066:	4807      	ldr	r0, [pc, #28]	; (8080084 <module_user_pre_init+0x34>)
 8080068:	4a07      	ldr	r2, [pc, #28]	; (8080088 <module_user_pre_init+0x38>)
 808006a:	2100      	movs	r1, #0
 808006c:	1a12      	subs	r2, r2, r0
 808006e:	f00b ff41 	bl	808bef4 <memset>
    return &link_heap_start;
}
 8080072:	4806      	ldr	r0, [pc, #24]	; (808008c <module_user_pre_init+0x3c>)
 8080074:	bd08      	pop	{r3, pc}
 8080076:	bf00      	nop
 8080078:	20000000 	.word	0x20000000
 808007c:	08090504 	.word	0x08090504
 8080080:	200002ac 	.word	0x200002ac
 8080084:	200002b0 	.word	0x200002b0
 8080088:	20001208 	.word	0x20001208
 808008c:	20001208 	.word	0x20001208

08080090 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080090:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080092:	f009 feb5 	bl	8089e00 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080096:	2500      	movs	r5, #0
 8080098:	4e05      	ldr	r6, [pc, #20]	; (80800b0 <module_user_init+0x20>)
 808009a:	4c06      	ldr	r4, [pc, #24]	; (80800b4 <module_user_init+0x24>)
 808009c:	1ba4      	subs	r4, r4, r6
 808009e:	08a4      	lsrs	r4, r4, #2
 80800a0:	42a5      	cmp	r5, r4
 80800a2:	d100      	bne.n	80800a6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80800a4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80800a6:	f856 3b04 	ldr.w	r3, [r6], #4
 80800aa:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80800ac:	3501      	adds	r5, #1
 80800ae:	e7f7      	b.n	80800a0 <module_user_init+0x10>
 80800b0:	080904d4 	.word	0x080904d4
 80800b4:	080904fc 	.word	0x080904fc

080800b8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800b8:	f004 b8f0 	b.w	808429c <setup>

080800bc <module_user_loop>:
}

void module_user_loop() {
 80800bc:	b508      	push	{r3, lr}
    loop();
 80800be:	f005 fd6d 	bl	8085b9c <loop>
    _post_loop();
}
 80800c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800c6:	f009 be5d 	b.w	8089d84 <_post_loop>

080800ca <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ca:	f008 bc43 	b.w	8088954 <malloc>

080800ce <_Znaj>:
 80800ce:	f008 bc41 	b.w	8088954 <malloc>

080800d2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800d2:	f008 bc47 	b.w	8088964 <free>

080800d6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800d6:	7800      	ldrb	r0, [r0, #0]
 80800d8:	fab0 f080 	clz	r0, r0
 80800dc:	0940      	lsrs	r0, r0, #5
 80800de:	4770      	bx	lr

080800e0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800e0:	2301      	movs	r3, #1
 80800e2:	7003      	strb	r3, [r0, #0]
 80800e4:	4770      	bx	lr

080800e6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800e6:	b148      	cbz	r0, 80800fc <null_ptr_check+0x16>
 80800e8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ea:	b13b      	cbz	r3, 80800fc <null_ptr_check+0x16>
 80800ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800ee:	b12b      	cbz	r3, 80800fc <null_ptr_check+0x16>
 80800f0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800f2:	fab0 f080 	clz	r0, r0
 80800f6:	0940      	lsrs	r0, r0, #5
 80800f8:	4240      	negs	r0, r0
 80800fa:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800fc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 8080100:	4770      	bx	lr

08080102 <set_mem_page>:
{
 8080102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080104:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
 8080106:	4608      	mov	r0, r1
{
 8080108:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 808010a:	f7ff ffec 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808010e:	4605      	mov	r5, r0
 8080110:	bb40      	cbnz	r0, 8080164 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
 8080112:	f012 0f80 	tst.w	r2, #128	; 0x80
 8080116:	bf14      	ite	ne
 8080118:	2300      	movne	r3, #0
 808011a:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
 808011c:	78ca      	ldrb	r2, [r1, #3]
 808011e:	429a      	cmp	r2, r3
 8080120:	d020      	beq.n	8080164 <set_mem_page+0x62>
			dev->mem_page = mem_page;
 8080122:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8080124:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 8080126:	2301      	movs	r3, #1
 8080128:	21f3      	movs	r1, #243	; 0xf3
 808012a:	7860      	ldrb	r0, [r4, #1]
 808012c:	f10d 0207 	add.w	r2, sp, #7
 8080130:	47b0      	blx	r6
 8080132:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080136:	b998      	cbnz	r0, 8080160 <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8080138:	f89d 2007 	ldrb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808013c:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
 808013e:	f022 0210 	bic.w	r2, r2, #16
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080142:	f003 0310 	and.w	r3, r3, #16
 8080146:	4313      	orrs	r3, r2
 8080148:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808014c:	2173      	movs	r1, #115	; 0x73
 808014e:	2301      	movs	r3, #1
 8080150:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8080152:	7860      	ldrb	r0, [r4, #1]
 8080154:	f10d 0207 	add.w	r2, sp, #7
 8080158:	47b0      	blx	r6
 808015a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 808015e:	b108      	cbz	r0, 8080164 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
 8080160:	f06f 0501 	mvn.w	r5, #1
}
 8080164:	4628      	mov	r0, r5
 8080166:	b002      	add	sp, #8
 8080168:	bd70      	pop	{r4, r5, r6, pc}

0808016a <boundary_check.isra.0.constprop.0>:
		if (*value > max) {
 808016a:	7803      	ldrb	r3, [r0, #0]
 808016c:	428b      	cmp	r3, r1
			*value = max;
 808016e:	bf84      	itt	hi
 8080170:	7001      	strbhi	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080172:	7813      	ldrbhi	r3, [r2, #0]
}
 8080174:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080178:	bf84      	itt	hi
 808017a:	f043 0302 	orrhi.w	r3, r3, #2
 808017e:	7013      	strbhi	r3, [r2, #0]
}
 8080180:	4770      	bx	lr

08080182 <bme680_get_regs>:
{
 8080182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080186:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 8080188:	4618      	mov	r0, r3
{
 808018a:	4688      	mov	r8, r1
 808018c:	4691      	mov	r9, r2
 808018e:	461d      	mov	r5, r3
	rslt = null_ptr_check(dev);
 8080190:	f7ff ffa9 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080194:	4604      	mov	r4, r0
 8080196:	b9a8      	cbnz	r0, 80801c4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 8080198:	78ab      	ldrb	r3, [r5, #2]
 808019a:	b93b      	cbnz	r3, 80801ac <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
 808019c:	4629      	mov	r1, r5
 808019e:	4630      	mov	r0, r6
 80801a0:	f7ff ffaf 	bl	8080102 <set_mem_page>
			if (rslt == BME680_OK)
 80801a4:	4604      	mov	r4, r0
 80801a6:	b908      	cbnz	r0, 80801ac <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801a8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801ac:	464b      	mov	r3, r9
 80801ae:	4642      	mov	r2, r8
 80801b0:	4631      	mov	r1, r6
 80801b2:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801b4:	7868      	ldrb	r0, [r5, #1]
 80801b6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801b8:	2800      	cmp	r0, #0
			rslt = BME680_E_COM_FAIL;
 80801ba:	bf18      	it	ne
 80801bc:	f06f 0401 	mvnne.w	r4, #1
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801c0:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}
 80801c4:	4620      	mov	r0, r4
 80801c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801ca <bme680_set_regs>:
{
 80801ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80801ce:	461c      	mov	r4, r3
 80801d0:	460f      	mov	r7, r1
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801d2:	2100      	movs	r1, #0
{
 80801d4:	b08a      	sub	sp, #40	; 0x28
 80801d6:	4606      	mov	r6, r0
 80801d8:	4690      	mov	r8, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801da:	a801      	add	r0, sp, #4
 80801dc:	2224      	movs	r2, #36	; 0x24
 80801de:	9100      	str	r1, [sp, #0]
 80801e0:	f00b fe88 	bl	808bef4 <memset>
	rslt = null_ptr_check(dev);
 80801e4:	4620      	mov	r0, r4
 80801e6:	f7ff ff7e 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801ea:	b9e8      	cbnz	r0, 8080228 <bme680_set_regs+0x5e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80801f0:	2b12      	cmp	r3, #18
 80801f2:	d833      	bhi.n	808025c <bme680_set_regs+0x92>
 80801f4:	46ea      	mov	sl, sp
 80801f6:	4681      	mov	r9, r0
			for (index = 0; index < len; index++) {
 80801f8:	fa1f f888 	uxth.w	r8, r8
 80801fc:	fa1f f389 	uxth.w	r3, r9
 8080200:	4543      	cmp	r3, r8
 8080202:	d314      	bcc.n	808022e <bme680_set_regs+0x64>
			if (rslt == BME680_OK) {
 8080204:	b980      	cbnz	r0, 8080228 <bme680_set_regs+0x5e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080206:	ea4f 0248 	mov.w	r2, r8, lsl #1
 808020a:	3a01      	subs	r2, #1
 808020c:	b293      	uxth	r3, r2
 808020e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8080210:	f89d 1000 	ldrb.w	r1, [sp]
 8080214:	7860      	ldrb	r0, [r4, #1]
 8080216:	f10d 0201 	add.w	r2, sp, #1
 808021a:	47a8      	blx	r5
					rslt = BME680_E_COM_FAIL;
 808021c:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808021e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
 8080222:	bf18      	it	ne
 8080224:	f06f 0001 	mvnne.w	r0, #1
}
 8080228:	b00a      	add	sp, #40	; 0x28
 808022a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dev->intf == BME680_SPI_INTF) {
 808022e:	78a3      	ldrb	r3, [r4, #2]
 8080230:	f816 5009 	ldrb.w	r5, [r6, r9]
 8080234:	b93b      	cbnz	r3, 8080246 <bme680_set_regs+0x7c>
					rslt = set_mem_page(reg_addr[index], dev);
 8080236:	4628      	mov	r0, r5
 8080238:	4621      	mov	r1, r4
 808023a:	f7ff ff62 	bl	8080102 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 808023e:	f816 5009 	ldrb.w	r5, [r6, r9]
 8080242:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080246:	f817 3009 	ldrb.w	r3, [r7, r9]
					tmp_buff[(2 * index)] = reg_addr[index];
 808024a:	f88a 5000 	strb.w	r5, [sl]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 808024e:	f88a 3001 	strb.w	r3, [sl, #1]
			for (index = 0; index < len; index++) {
 8080252:	f109 0901 	add.w	r9, r9, #1
 8080256:	f10a 0a02 	add.w	sl, sl, #2
 808025a:	e7cf      	b.n	80801fc <bme680_set_regs+0x32>
			rslt = BME680_E_INVALID_LENGTH;
 808025c:	f06f 0003 	mvn.w	r0, #3
 8080260:	e7e2      	b.n	8080228 <bme680_set_regs+0x5e>

08080262 <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080262:	2374      	movs	r3, #116	; 0x74
{
 8080264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080266:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080268:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 808026c:	f7ff ff3b 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080270:	bba0      	cbnz	r0, 80802dc <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
 8080272:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8080274:	4623      	mov	r3, r4
 8080276:	2201      	movs	r2, #1
 8080278:	2074      	movs	r0, #116	; 0x74
 808027a:	f10d 0106 	add.w	r1, sp, #6
 808027e:	f7ff ff80 	bl	8080182 <bme680_get_regs>
			if (rslt == BME680_OK) {
 8080282:	b9a0      	cbnz	r0, 80802ae <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8080284:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
 8080288:	f013 0503 	ands.w	r5, r3, #3
 808028c:	d011      	beq.n	80802b2 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 808028e:	f023 0303 	bic.w	r3, r3, #3
 8080292:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8080296:	2201      	movs	r2, #1
 8080298:	4623      	mov	r3, r4
 808029a:	f10d 0106 	add.w	r1, sp, #6
 808029e:	f10d 0007 	add.w	r0, sp, #7
 80802a2:	f7ff ff92 	bl	80801ca <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80802a6:	200a      	movs	r0, #10
 80802a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80802aa:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
 80802ac:	e7e2      	b.n	8080274 <bme680_set_sensor_mode+0x12>
 80802ae:	2d00      	cmp	r5, #0
 80802b0:	d1e0      	bne.n	8080274 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80802b2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80802b6:	b18a      	cbz	r2, 80802dc <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80802b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80802bc:	f002 0203 	and.w	r2, r2, #3
 80802c0:	f023 0303 	bic.w	r3, r3, #3
 80802c4:	4313      	orrs	r3, r2
 80802c6:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80802ca:	b938      	cbnz	r0, 80802dc <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80802cc:	4623      	mov	r3, r4
 80802ce:	2201      	movs	r2, #1
 80802d0:	f10d 0106 	add.w	r1, sp, #6
 80802d4:	f10d 0007 	add.w	r0, sp, #7
 80802d8:	f7ff ff77 	bl	80801ca <bme680_set_regs>
}
 80802dc:	b003      	add	sp, #12
 80802de:	bd30      	pop	{r4, r5, pc}

080802e0 <bme680_set_sensor_settings>:
	uint8_t data = 0;
 80802e0:	2300      	movs	r3, #0
{
 80802e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80802e4:	4606      	mov	r6, r0
 80802e6:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 80802e8:	4608      	mov	r0, r1
{
 80802ea:	460c      	mov	r4, r1
	uint8_t data = 0;
 80802ec:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802f0:	9304      	str	r3, [sp, #16]
 80802f2:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802f6:	9306      	str	r3, [sp, #24]
 80802f8:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
 80802fc:	f7ff fef3 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080300:	2800      	cmp	r0, #0
 8080302:	f040 80fe 	bne.w	8080502 <bme680_set_sensor_settings+0x222>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080306:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 808030a:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
 808030e:	d105      	bne.n	808031c <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
 8080310:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
			rslt = bme680_set_sensor_mode(dev);
 8080314:	4620      	mov	r0, r4
 8080316:	f7ff ffa4 	bl	8080262 <bme680_set_sensor_mode>
 808031a:	e007      	b.n	808032c <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
 808031c:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
 808031e:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
 8080322:	f000 80f0 	beq.w	8080506 <bme680_set_sensor_settings+0x226>
		dev->power_mode = BME680_SLEEP_MODE;
 8080326:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
 808032a:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
 808032c:	f016 0510 	ands.w	r5, r6, #16
 8080330:	d020      	beq.n	8080374 <bme680_set_sensor_settings+0x94>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8080332:	2107      	movs	r1, #7
 8080334:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080338:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 808033c:	f7ff ff15 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080340:	b930      	cbnz	r0, 8080350 <bme680_set_sensor_settings+0x70>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080342:	4623      	mov	r3, r4
 8080344:	2201      	movs	r2, #1
 8080346:	2075      	movs	r0, #117	; 0x75
 8080348:	f10d 0107 	add.w	r1, sp, #7
 808034c:	f7ff ff19 	bl	8080182 <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080350:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8080354:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8080358:	009b      	lsls	r3, r3, #2
 808035a:	f022 021c 	bic.w	r2, r2, #28
 808035e:	f003 031c 	and.w	r3, r3, #28
 8080362:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8080364:	2275      	movs	r2, #117	; 0x75
			count++;
 8080366:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080368:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808036c:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080370:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080374:	06b3      	lsls	r3, r6, #26
 8080376:	d522      	bpl.n	80803be <bme680_set_sensor_settings+0xde>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8080378:	2108      	movs	r1, #8
 808037a:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808037e:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080382:	f7ff fef2 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080386:	b930      	cbnz	r0, 8080396 <bme680_set_sensor_settings+0xb6>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080388:	4623      	mov	r3, r4
 808038a:	2201      	movs	r2, #1
 808038c:	2070      	movs	r0, #112	; 0x70
 808038e:	f10d 0107 	add.w	r1, sp, #7
 8080392:	f7ff fef6 	bl	8080182 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 8080396:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080398:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808039c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80803a0:	f023 0308 	bic.w	r3, r3, #8
 80803a4:	f002 0208 	and.w	r2, r2, #8
 80803a8:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 80803aa:	aa08      	add	r2, sp, #32
 80803ac:	442a      	add	r2, r5
			count++;
 80803ae:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80803b0:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80803b4:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80803b8:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80803bc:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80803be:	07b1      	lsls	r1, r6, #30
 80803c0:	d033      	beq.n	808042a <bme680_set_sensor_settings+0x14a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80803c2:	2105      	movs	r1, #5
 80803c4:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80803c8:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80803cc:	f7ff fecd 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 80803d0:	b930      	cbnz	r0, 80803e0 <bme680_set_sensor_settings+0x100>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80803d2:	4623      	mov	r3, r4
 80803d4:	2201      	movs	r2, #1
 80803d6:	2074      	movs	r0, #116	; 0x74
 80803d8:	f10d 0107 	add.w	r1, sp, #7
 80803dc:	f7ff fed1 	bl	8080182 <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
 80803e0:	07f2      	lsls	r2, r6, #31
 80803e2:	d509      	bpl.n	80803f8 <bme680_set_sensor_settings+0x118>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80803e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80803e8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80803ec:	f003 031f 	and.w	r3, r3, #31
 80803f0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80803f4:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
 80803f8:	07b3      	lsls	r3, r6, #30
 80803fa:	d50b      	bpl.n	8080414 <bme680_set_sensor_settings+0x134>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80803fc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8080400:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8080404:	009b      	lsls	r3, r3, #2
 8080406:	f003 031c 	and.w	r3, r3, #28
 808040a:	f022 021c 	bic.w	r2, r2, #28
 808040e:	4313      	orrs	r3, r2
 8080410:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
 8080414:	2274      	movs	r2, #116	; 0x74
 8080416:	ab08      	add	r3, sp, #32
 8080418:	442b      	add	r3, r5
 808041a:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 808041e:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080422:	3501      	adds	r5, #1
			data_array[count] = data;
 8080424:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080428:	b2ed      	uxtb	r5, r5
		if (desired_settings & BME680_OSH_SEL) {
 808042a:	0771      	lsls	r1, r6, #29
 808042c:	d522      	bpl.n	8080474 <bme680_set_sensor_settings+0x194>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 808042e:	2105      	movs	r1, #5
 8080430:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080434:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8080438:	f7ff fe97 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 808043c:	b930      	cbnz	r0, 808044c <bme680_set_sensor_settings+0x16c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808043e:	4623      	mov	r3, r4
 8080440:	2201      	movs	r2, #1
 8080442:	2072      	movs	r0, #114	; 0x72
 8080444:	f10d 0107 	add.w	r1, sp, #7
 8080448:	f7ff fe9b 	bl	8080182 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 808044c:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 808044e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080452:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8080456:	f023 0307 	bic.w	r3, r3, #7
 808045a:	f002 0207 	and.w	r2, r2, #7
 808045e:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8080460:	aa08      	add	r2, sp, #32
 8080462:	442a      	add	r2, r5
			count++;
 8080464:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080466:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808046a:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808046e:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080472:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080474:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8080478:	d03a      	beq.n	80804f0 <bme680_set_sensor_settings+0x210>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 808047a:	2101      	movs	r1, #1
 808047c:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080480:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080484:	f7ff fe71 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK) {
 8080488:	b960      	cbnz	r0, 80804a4 <bme680_set_sensor_settings+0x1c4>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808048a:	210a      	movs	r1, #10
 808048c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080490:	f7ff fe6b 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080494:	b930      	cbnz	r0, 80804a4 <bme680_set_sensor_settings+0x1c4>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080496:	4623      	mov	r3, r4
 8080498:	2201      	movs	r2, #1
 808049a:	2071      	movs	r0, #113	; 0x71
 808049c:	f10d 0107 	add.w	r1, sp, #7
 80804a0:	f7ff fe6f 	bl	8080182 <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
 80804a4:	0672      	lsls	r2, r6, #25
 80804a6:	d50b      	bpl.n	80804c0 <bme680_set_sensor_settings+0x1e0>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80804a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80804ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80804b0:	011b      	lsls	r3, r3, #4
 80804b2:	f003 0310 	and.w	r3, r3, #16
 80804b6:	f022 0210 	bic.w	r2, r2, #16
 80804ba:	4313      	orrs	r3, r2
 80804bc:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
 80804c0:	0633      	lsls	r3, r6, #24
 80804c2:	d50a      	bpl.n	80804da <bme680_set_sensor_settings+0x1fa>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80804c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80804c8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80804cc:	f023 030f 	bic.w	r3, r3, #15
 80804d0:	f002 020f 	and.w	r2, r2, #15
 80804d4:	4313      	orrs	r3, r2
 80804d6:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80804da:	2271      	movs	r2, #113	; 0x71
 80804dc:	ab08      	add	r3, sp, #32
 80804de:	442b      	add	r3, r5
 80804e0:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80804e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80804e8:	3501      	adds	r5, #1
			data_array[count] = data;
 80804ea:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80804ee:	b2ed      	uxtb	r5, r5
		if (rslt == BME680_OK)
 80804f0:	b928      	cbnz	r0, 80804fe <bme680_set_sensor_settings+0x21e>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80804f2:	4623      	mov	r3, r4
 80804f4:	462a      	mov	r2, r5
 80804f6:	a906      	add	r1, sp, #24
 80804f8:	a804      	add	r0, sp, #16
 80804fa:	f7ff fe66 	bl	80801ca <bme680_set_regs>
		dev->power_mode = intended_power_mode;
 80804fe:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 8080502:	b009      	add	sp, #36	; 0x24
 8080504:	bdf0      	pop	{r4, r5, r6, r7, pc}
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080506:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 808050a:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 808050e:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8080512:	bf28      	it	cs
 8080514:	f44f 72c8 	movcs.w	r2, #400	; 0x190
 8080518:	2ac8      	cmp	r2, #200	; 0xc8
 808051a:	bf38      	it	cc
 808051c:	22c8      	movcc	r2, #200	; 0xc8
 808051e:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8080522:	f203 1399 	addw	r3, r3, #409	; 0x199
 8080526:	435a      	muls	r2, r3
 8080528:	2314      	movs	r3, #20
 808052a:	fbb2 f2f3 	udiv	r2, r2, r3
 808052e:	230a      	movs	r3, #10
 8080530:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
 8080534:	fbb2 f2f3 	udiv	r2, r2, r3
 8080538:	f991 3011 	ldrsb.w	r3, [r1, #17]
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 808053c:	f991 1004 	ldrsb.w	r1, [r1, #4]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080540:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8080544:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8080546:	f994 3014 	ldrsb.w	r3, [r4, #20]
 808054a:	434b      	muls	r3, r1
 808054c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8080550:	fb93 f3f1 	sdiv	r3, r3, r1
 8080554:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
 8080556:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 808055a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 808055e:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8080562:	3204      	adds	r2, #4
 8080564:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 8080568:	2283      	movs	r2, #131	; 0x83
 808056a:	434a      	muls	r2, r1
 808056c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8080570:	fbb3 f3f2 	udiv	r3, r3, r2
 8080574:	2222      	movs	r2, #34	; 0x22
 8080576:	3bfa      	subs	r3, #250	; 0xfa
 8080578:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 808057a:	2264      	movs	r2, #100	; 0x64
 808057c:	3332      	adds	r3, #50	; 0x32
 808057e:	fb93 f3f2 	sdiv	r3, r3, r2
 8080582:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8080586:	f246 435a 	movw	r3, #25690	; 0x645a
 808058a:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 808058e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	if (dur >= 0xfc0) {
 8080592:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8080596:	d21a      	bcs.n	80805ce <bme680_set_sensor_settings+0x2ee>
		while (dur > 0x3F) {
 8080598:	2b3f      	cmp	r3, #63	; 0x3f
 808059a:	b2c2      	uxtb	r2, r0
 808059c:	f100 0001 	add.w	r0, r0, #1
 80805a0:	d813      	bhi.n	80805ca <bme680_set_sensor_settings+0x2ea>
		durval = (uint8_t) (dur + (factor * 64));
 80805a2:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80805a6:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
 80805a8:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805aa:	f88d 300d 	strb.w	r3, [sp, #13]
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805ae:	2202      	movs	r2, #2
 80805b0:	4623      	mov	r3, r4
			dev->gas_sett.nb_conv = 0;
 80805b2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805b6:	a903      	add	r1, sp, #12
 80805b8:	a802      	add	r0, sp, #8
 80805ba:	f7ff fe06 	bl	80801ca <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
 80805be:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80805c2:	2800      	cmp	r0, #0
 80805c4:	f47f aeb2 	bne.w	808032c <bme680_set_sensor_settings+0x4c>
 80805c8:	e6a4      	b.n	8080314 <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
 80805ca:	089b      	lsrs	r3, r3, #2
			factor += 1;
 80805cc:	e7e4      	b.n	8080598 <bme680_set_sensor_settings+0x2b8>
		durval = 0xff; /* Max duration*/
 80805ce:	23ff      	movs	r3, #255	; 0xff
 80805d0:	e7ea      	b.n	80805a8 <bme680_set_sensor_settings+0x2c8>
	...

080805d4 <bme680_get_profile_dur>:
{
 80805d4:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805d6:	4b18      	ldr	r3, [pc, #96]	; (8080638 <bme680_get_profile_dur+0x64>)
{
 80805d8:	4602      	mov	r2, r0
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805da:	6818      	ldr	r0, [r3, #0]
 80805dc:	889b      	ldrh	r3, [r3, #4]
 80805de:	9000      	str	r0, [sp, #0]
 80805e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805e4:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 80805e8:	a802      	add	r0, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805ea:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805ee:	4403      	add	r3, r0
 80805f0:	f813 0c08 	ldrb.w	r0, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805f4:	ab02      	add	r3, sp, #8
 80805f6:	441c      	add	r4, r3
 80805f8:	f814 3c08 	ldrb.w	r3, [r4, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80805fc:	ac02      	add	r4, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805fe:	4418      	add	r0, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8080600:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8080604:	4423      	add	r3, r4
 8080606:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 808060a:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 808060e:	4403      	add	r3, r0
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080610:	f241 20b9 	movw	r0, #4793	; 0x12b9
 8080614:	fb04 0303 	mla	r3, r4, r3, r0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808061c:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8080620:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
 8080622:	b29b      	uxth	r3, r3
 8080624:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
 8080626:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 808062a:	b118      	cbz	r0, 8080634 <bme680_get_profile_dur+0x60>
		*duration += dev->gas_sett.heatr_dur;
 808062c:	f8b1 1042 	ldrh.w	r1, [r1, #66]	; 0x42
 8080630:	440b      	add	r3, r1
 8080632:	8013      	strh	r3, [r2, #0]
}
 8080634:	b002      	add	sp, #8
 8080636:	bd10      	pop	{r4, pc}
 8080638:	0808dd54 	.word	0x0808dd54

0808063c <bme680_get_sensor_data>:
{
 808063c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080640:	4680      	mov	r8, r0
 8080642:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 8080644:	4608      	mov	r0, r1
{
 8080646:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8080648:	f7ff fd4d 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808064c:	4605      	mov	r5, r0
 808064e:	2800      	cmp	r0, #0
 8080650:	f040 8158 	bne.w	8080904 <bme680_get_sensor_data+0x2c8>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080654:	9006      	str	r0, [sp, #24]
 8080656:	e9cd 0004 	strd	r0, r0, [sp, #16]
 808065a:	f8cd 001b 	str.w	r0, [sp, #27]
	rslt = null_ptr_check(dev);
 808065e:	4608      	mov	r0, r1
 8080660:	f7ff fd41 	bl	80800e6 <null_ptr_check>
 8080664:	270a      	movs	r7, #10
 8080666:	4605      	mov	r5, r0
		if (rslt == BME680_OK) {
 8080668:	2d00      	cmp	r5, #0
 808066a:	f040 8152 	bne.w	8080912 <bme680_get_sensor_data+0x2d6>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 808066e:	4623      	mov	r3, r4
 8080670:	220f      	movs	r2, #15
 8080672:	a904      	add	r1, sp, #16
 8080674:	201d      	movs	r0, #29
 8080676:	f7ff fd84 	bl	8080182 <bme680_get_regs>
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808067a:	f89d b010 	ldrb.w	fp, [sp, #16]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808067e:	f99d a01e 	ldrsb.w	sl, [sp, #30]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080682:	f89d 2018 	ldrb.w	r2, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8080686:	f00b 030f 	and.w	r3, fp, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808068a:	f00a 0120 	and.w	r1, sl, #32
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808068e:	f02b 0b7f 	bic.w	fp, fp, #127	; 0x7f
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080692:	9201      	str	r2, [sp, #4]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8080694:	ea4b 0101 	orr.w	r1, fp, r1
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080698:	f89d 2019 	ldrb.w	r2, [sp, #25]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 808069c:	f00a 0a10 	and.w	sl, sl, #16
 80806a0:	ea41 010a 	orr.w	r1, r1, sl
 80806a4:	b249      	sxtb	r1, r1
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80806a6:	f888 3001 	strb.w	r3, [r8, #1]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80806aa:	9202      	str	r2, [sp, #8]
			data->meas_index = buff[1];
 80806ac:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80806b0:	f89d 201d 	ldrb.w	r2, [sp, #29]
			if (data->status & BME680_NEW_DATA_MSK) {
 80806b4:	2900      	cmp	r1, #0
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80806b6:	4605      	mov	r5, r0
			data->meas_index = buff[1];
 80806b8:	f888 3002 	strb.w	r3, [r8, #2]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80806bc:	9203      	str	r2, [sp, #12]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80806be:	f89d 9012 	ldrb.w	r9, [sp, #18]
 80806c2:	f89d e013 	ldrb.w	lr, [sp, #19]
				| ((uint32_t) buff[4] / 16));
 80806c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80806ca:	f89d c015 	ldrb.w	ip, [sp, #21]
 80806ce:	f89d 6016 	ldrb.w	r6, [sp, #22]
				| ((uint32_t) buff[7] / 16));
 80806d2:	f89d 0017 	ldrb.w	r0, [sp, #23]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80806d6:	f89d 201e 	ldrb.w	r2, [sp, #30]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806da:	f888 1000 	strb.w	r1, [r8]
			if (data->status & BME680_NEW_DATA_MSK) {
 80806de:	f280 8115 	bge.w	808090c <bme680_get_sensor_data+0x2d0>
				| ((uint32_t) buff[7] / 16));
 80806e2:	0900      	lsrs	r0, r0, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80806e4:	ea40 1606 	orr.w	r6, r0, r6, lsl #4
 80806e8:	ea46 3c0c 	orr.w	ip, r6, ip, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806ec:	8ae6      	ldrh	r6, [r4, #22]
				| ((uint32_t) buff[4] / 16));
 80806ee:	091b      	lsrs	r3, r3, #4
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806f0:	0076      	lsls	r6, r6, #1
 80806f2:	ebc6 0cdc 	rsb	ip, r6, ip, lsr #3
 80806f6:	4660      	mov	r0, ip
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80806f8:	ea4f 065c 	mov.w	r6, ip, lsr #1
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806fc:	17c1      	asrs	r1, r0, #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80806fe:	ea46 76c1 	orr.w	r6, r6, r1, lsl #31
 8080702:	1049      	asrs	r1, r1, #1
 8080704:	4371      	muls	r1, r6
 8080706:	fba6 ab06 	umull	sl, fp, r6, r6
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808070a:	f994 001a 	ldrsb.w	r0, [r4, #26]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 808070e:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
 8080712:	ea4f 361a 	mov.w	r6, sl, lsr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080716:	0101      	lsls	r1, r0, #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080718:	ea46 560b 	orr.w	r6, r6, fp, lsl #20
 808071c:	ea4f 372b 	mov.w	r7, fp, asr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080720:	ea4f 7be1 	mov.w	fp, r1, asr #31
 8080724:	fb06 f00b 	mul.w	r0, r6, fp
 8080728:	fba6 ab01 	umull	sl, fp, r6, r1
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808072c:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080730:	fb01 0707 	mla	r7, r1, r7, r0
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080734:	fb86 010c 	smull	r0, r1, r6, ip
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080738:	44bb      	add	fp, r7
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808073a:	0ac6      	lsrs	r6, r0, #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808073c:	ea4f 309a 	mov.w	r0, sl, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080740:	ea46 5641 	orr.w	r6, r6, r1, lsl #21
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080744:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080748:	1831      	adds	r1, r6, r0
 808074a:	6321      	str	r1, [r4, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 808074c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8080750:	3180      	adds	r1, #128	; 0x80
 8080752:	1209      	asrs	r1, r1, #8
 8080754:	f8a8 1004 	strh.w	r1, [r8, #4]
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080758:	6b21      	ldr	r1, [r4, #48]	; 0x30
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 808075a:	ea43 1e0e 	orr.w	lr, r3, lr, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808075e:	1049      	asrs	r1, r1, #1
 8080760:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8080764:	f640 4335 	movw	r3, #3125	; 0xc35
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080768:	1088      	asrs	r0, r1, #2
 808076a:	4340      	muls	r0, r0
		(int32_t)dev->calib.par_p6) >> 2;
 808076c:	f994 7026 	ldrsb.w	r7, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080770:	12c6      	asrs	r6, r0, #11
 8080772:	4377      	muls	r7, r6
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8080774:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080778:	1340      	asrs	r0, r0, #13
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 808077a:	434e      	muls	r6, r1
 808077c:	0076      	lsls	r6, r6, #1
 808077e:	eb06 06a7 	add.w	r6, r6, r7, asr #2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080782:	f9b4 701e 	ldrsh.w	r7, [r4, #30]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080786:	ea4e 3909 	orr.w	r9, lr, r9, lsl #12
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 808078a:	434f      	muls	r7, r1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 808078c:	f994 1020 	ldrsb.w	r1, [r4, #32]
	pressure_comp = 1048576 - pres_adc;
 8080790:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8080794:	0149      	lsls	r1, r1, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080796:	4341      	muls	r1, r0
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8080798:	10c9      	asrs	r1, r1, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808079a:	eb01 0167 	add.w	r1, r1, r7, asr #1
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 808079e:	8ba0      	ldrh	r0, [r4, #28]
	var1 = var1 >> 18;
 80807a0:	1489      	asrs	r1, r1, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80807a2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80807a6:	4348      	muls	r0, r1
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80807a8:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
		((int64_t) lookupTable1[gas_range])) >> 16;
 80807ac:	f002 0c0f 	and.w	ip, r2, #15
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80807b0:	0409      	lsls	r1, r1, #16
 80807b2:	eb01 06a6 	add.w	r6, r1, r6, asr #2
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80807b6:	eba9 3626 	sub.w	r6, r9, r6, asr #12
 80807ba:	4373      	muls	r3, r6
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80807bc:	13c1      	asrs	r1, r0, #15
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80807be:	fbb3 f1f1 	udiv	r1, r3, r1
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80807c2:	f341 009c 	sbfx	r0, r1, #2, #29
 80807c6:	4340      	muls	r0, r0
 80807c8:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
		(pressure_comp >> 3)) >> 13)) >> 12;
 80807cc:	1340      	asrs	r0, r0, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80807ce:	4358      	muls	r0, r3
		(int32_t)dev->calib.par_p8) >> 13;
 80807d0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 80807d4:	f341 075d 	sbfx	r7, r1, #1, #30
 80807d8:	437b      	muls	r3, r7
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80807da:	f341 16d7 	sbfx	r6, r1, #7, #24
	var2 = ((int32_t)(pressure_comp >> 2) *
 80807de:	135b      	asrs	r3, r3, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80807e0:	eb03 3320 	add.w	r3, r3, r0, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80807e4:	fb06 f006 	mul.w	r0, r6, r6
 80807e8:	4346      	muls	r6, r0
		(int32_t)dev->calib.par_p10) >> 17;
 80807ea:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80807ee:	0992      	lsrs	r2, r2, #6
		(int32_t)(pressure_comp >> 8) *
 80807f0:	4346      	muls	r6, r0
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80807f2:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80807f6:	eb03 4366 	add.w	r3, r3, r6, asr #17
 80807fa:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80807fe:	2064      	movs	r0, #100	; 0x64
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080800:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8080802:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				data->pressure = calc_pressure(adc_pres, dev);
 8080806:	f8c8 3008 	str.w	r3, [r8, #8]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 808080a:	6b23      	ldr	r3, [r4, #48]	; 0x30
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 808080c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080810:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080814:	3380      	adds	r3, #128	; 0x80
 8080816:	121b      	asrs	r3, r3, #8
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080818:	4359      	muls	r1, r3
 808081a:	fb91 f1f0 	sdiv	r1, r1, r0
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 808081e:	f994 600d 	ldrsb.w	r6, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080822:	4359      	muls	r1, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080824:	435e      	muls	r6, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080826:	1189      	asrs	r1, r1, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080828:	fb96 f6f0 	sdiv	r6, r6, r0
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 808082c:	fb91 f1f0 	sdiv	r1, r1, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080830:	4431      	add	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 8080832:	8966      	ldrh	r6, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8080834:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080838:	4371      	muls	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 808083a:	128e      	asrs	r6, r1, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 808083c:	e9dd 7101 	ldrd	r7, r1, [sp, #4]
 8080840:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8080844:	8927      	ldrh	r7, [r4, #8]
 8080846:	eba1 1107 	sub.w	r1, r1, r7, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 808084a:	f994 700c 	ldrsb.w	r7, [r4, #12]
 808084e:	435f      	muls	r7, r3
 8080850:	fb97 f7f0 	sdiv	r7, r7, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080854:	eba1 0167 	sub.w	r1, r1, r7, asr #1
	var3 = var1 * var2;
 8080858:	4371      	muls	r1, r6
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808085a:	f994 6010 	ldrsb.w	r6, [r4, #16]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 808085e:	2700      	movs	r7, #0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080860:	4373      	muls	r3, r6
 8080862:	fb93 f3f0 	sdiv	r3, r3, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8080866:	7be0      	ldrb	r0, [r4, #15]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080868:	f240 563c 	movw	r6, #1340	; 0x53c
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808086c:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080870:	1388      	asrs	r0, r1, #14
 8080872:	4340      	muls	r0, r0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080874:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080876:	1280      	asrs	r0, r0, #10
	var6 = (var4 * var5) >> 1;
 8080878:	4343      	muls	r3, r0
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 808087a:	eb01 0363 	add.w	r3, r1, r3, asr #1
 808087e:	1299      	asrs	r1, r3, #10
 8080880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080884:	434b      	muls	r3, r1
				data->humidity = calc_humidity(adc_hum, dev);
 8080886:	492b      	ldr	r1, [pc, #172]	; (8080934 <bme680_get_sensor_data+0x2f8>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080888:	131b      	asrs	r3, r3, #12
 808088a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
 808088e:	428b      	cmp	r3, r1
 8080890:	bfd4      	ite	le
 8080892:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080896:	f8c8 100c 	strgt.w	r1, [r8, #12]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 808089a:	2105      	movs	r1, #5
 808089c:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 80808a0:	fbc3 6701 	smlal	r6, r7, r3, r1
		((int64_t) lookupTable1[gas_range])) >> 16;
 80808a4:	4b24      	ldr	r3, [pc, #144]	; (8080938 <bme680_get_sensor_data+0x2fc>)
 80808a6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80808aa:	fba6 0103 	umull	r0, r1, r6, r3
 80808ae:	fb03 1107 	mla	r1, r3, r7, r1
 80808b2:	0c06      	lsrs	r6, r0, #16
 80808b4:	ea4f 4e21 	mov.w	lr, r1, asr #16
 80808b8:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808bc:	2100      	movs	r1, #0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808be:	9b03      	ldr	r3, [sp, #12]
 80808c0:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808c4:	03d3      	lsls	r3, r2, #15
 80808c6:	f113 437f 	adds.w	r3, r3, #4278190080	; 0xff000000
 80808ca:	f141 31ff 	adc.w	r1, r1, #4294967295
 80808ce:	199a      	adds	r2, r3, r6
 80808d0:	eb41 030e 	adc.w	r3, r1, lr
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80808d4:	4919      	ldr	r1, [pc, #100]	; (808093c <bme680_get_sensor_data+0x300>)
 80808d6:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80808da:	fba1 6706 	umull	r6, r7, r1, r6
 80808de:	fb01 770e 	mla	r7, r1, lr, r7
 80808e2:	0a70      	lsrs	r0, r6, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 80808e4:	0856      	lsrs	r6, r2, #1
 80808e6:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80808ea:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 80808ee:	ea4f 2c67 	mov.w	ip, r7, asr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 80808f2:	1059      	asrs	r1, r3, #1
 80808f4:	1980      	adds	r0, r0, r6
 80808f6:	eb4c 0101 	adc.w	r1, ip, r1
 80808fa:	f00b f9d3 	bl	808bca4 <__aeabi_ldivmod>
 80808fe:	f8c8 0010 	str.w	r0, [r8, #16]
		if (rslt == BME680_OK) {
 8080902:	b16d      	cbz	r5, 8080920 <bme680_get_sensor_data+0x2e4>
}
 8080904:	4628      	mov	r0, r5
 8080906:	b009      	add	sp, #36	; 0x24
 8080908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 808090c:	200a      	movs	r0, #10
 808090e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080910:	4798      	blx	r3
	} while (tries);
 8080912:	3f01      	subs	r7, #1
 8080914:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8080918:	f47f aea6 	bne.w	8080668 <bme680_get_sensor_data+0x2c>
		rslt = BME680_W_NO_NEW_DATA;
 808091c:	2502      	movs	r5, #2
	return rslt;
 808091e:	e7f1      	b.n	8080904 <bme680_get_sensor_data+0x2c8>
			if (data->status & BME680_NEW_DATA_MSK)
 8080920:	f998 3000 	ldrsb.w	r3, [r8]
 8080924:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080926:	bfb6      	itet	lt
 8080928:	2301      	movlt	r3, #1
				dev->new_fields = 0;
 808092a:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
				dev->new_fields = 1;
 808092e:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
				dev->new_fields = 0;
 8080932:	e7e7      	b.n	8080904 <bme680_get_sensor_data+0x2c8>
 8080934:	000186a0 	.word	0x000186a0
 8080938:	20000000 	.word	0x20000000
 808093c:	20000040 	.word	0x20000040

08080940 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8080940:	4770      	bx	lr

08080942 <_ZN4File9availableEv>:
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080942:	4602      	mov	r2, r0
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080944:	7c03      	ldrb	r3, [r0, #16]
 8080946:	f013 0008 	ands.w	r0, r3, #8
 808094a:	bf1e      	ittt	ne
 808094c:	6a50      	ldrne	r0, [r2, #36]	; 0x24
 808094e:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
 8080950:	1a18      	subne	r0, r3, r0
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080952:	2800      	cmp	r0, #0
  }
 8080954:	bfb8      	it	lt
 8080956:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
 808095a:	4770      	bx	lr

0808095c <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 808095c:	4770      	bx	lr

0808095e <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
 808095e:	4770      	bx	lr

08080960 <_ZN6SdFileD0Ev>:
 8080960:	b510      	push	{r4, lr}
 8080962:	4604      	mov	r4, r0
 8080964:	212c      	movs	r1, #44	; 0x2c
 8080966:	f00a f992 	bl	808ac8e <_ZdlPvj>
 808096a:	4620      	mov	r0, r4
 808096c:	bd10      	pop	{r4, pc}

0808096e <_ZN4FileD0Ev>:
 808096e:	b510      	push	{r4, lr}
 8080970:	4604      	mov	r4, r0
 8080972:	2134      	movs	r1, #52	; 0x34
 8080974:	f00a f98b 	bl	808ac8e <_ZdlPvj>
 8080978:	4620      	mov	r0, r4
 808097a:	bd10      	pop	{r4, pc}

0808097c <_ZN9PrintFile5writeEPKhj>:
    return FatFile::write(buf, size);
 808097c:	3008      	adds	r0, #8
 808097e:	f006 bef1 	b.w	8087764 <_ZN7FatFile5writeEPKvj>

08080982 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080982:	3010      	adds	r0, #16
 8080984:	f006 beee 	b.w	8087764 <_ZN7FatFile5writeEPKvj>

08080988 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
 8080988:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 808098a:	2201      	movs	r2, #1
 808098c:	f88d 1007 	strb.w	r1, [sp, #7]
 8080990:	3010      	adds	r0, #16
 8080992:	f10d 0107 	add.w	r1, sp, #7
 8080996:	f006 fee5 	bl	8087764 <_ZN7FatFile5writeEPKvj>
  }
 808099a:	b003      	add	sp, #12
 808099c:	f85d fb04 	ldr.w	pc, [sp], #4

080809a0 <_ZN4File5flushEv>:
    FatFile::sync();
 80809a0:	3010      	adds	r0, #16
 80809a2:	f006 be55 	b.w	8087650 <_ZN7FatFile4syncEv>

080809a6 <_ZN4File4peekEv>:
    return FatFile::peek();
 80809a6:	3010      	adds	r0, #16
 80809a8:	f006 bd81 	b.w	80874ae <_ZN7FatFile4peekEv>

080809ac <_ZN4File4readEv>:
  int read() {
 80809ac:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
 80809ae:	2201      	movs	r2, #1
 80809b0:	f10d 0107 	add.w	r1, sp, #7
 80809b4:	3010      	adds	r0, #16
 80809b6:	f006 fccb 	bl	8087350 <_ZN7FatFile4readEPvj>
 80809ba:	2801      	cmp	r0, #1
 80809bc:	bf14      	ite	ne
 80809be:	f04f 30ff 	movne.w	r0, #4294967295
 80809c2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  }
 80809c6:	b003      	add	sp, #12
 80809c8:	f85d fb04 	ldr.w	pc, [sp], #4

080809cc <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 80809cc:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809d0:	f006 bb29 	b.w	8087026 <_ZN9SdSpiCard11writeBlocksEmPKhj>

080809d4 <_ZN9SdFatBase10readBlocksEmPhj>:
    return m_sdCard.readBlocks(block, dst, n);
 80809d4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809d8:	f006 ba5d 	b.w	8086e96 <_ZN9SdSpiCard10readBlocksEmPhj>

080809dc <_ZN9SdFatBase10writeBlockEmPKh>:
    return m_sdCard.writeBlock(block, src);
 80809dc:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809e0:	f006 ba9b 	b.w	8086f1a <_ZN9SdSpiCard10writeBlockEmPKh>

080809e4 <_ZN9SdFatBase9readBlockEmPh>:
    return m_sdCard.readBlock(block, dst);
 80809e4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809e8:	f006 ba0d 	b.w	8086e06 <_ZN9SdSpiCard9readBlockEmPh>

080809ec <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80809ec:	b510      	push	{r4, lr}
 80809ee:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80809f0:	6800      	ldr	r0, [r0, #0]
 80809f2:	b108      	cbz	r0, 80809f8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 80809f4:	f007 ffb6 	bl	8088964 <free>
class SystemClass {
 80809f8:	4620      	mov	r0, r4
 80809fa:	bd10      	pop	{r4, pc}

080809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 80809fc:	b510      	push	{r4, lr}
 80809fe:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080a00:	2204      	movs	r2, #4
 8080a02:	f007 fd2b 	bl	808845c <HAL_EEPROM_Put>
        return t;
    }
 8080a06:	4620      	mov	r0, r4
 8080a08:	bd10      	pop	{r4, pc}

08080a0a <_Z20remoteReadStoredVars6String>:
    }
}

int remoteReadStoredVars(String mem_address) 
{
    uint16_t tempValue = 0;
 8080a0a:	2300      	movs	r3, #0
{
 8080a0c:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080a0e:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080a12:	f008 fceb 	bl	80893ec <_ZNK6String5toIntEv>
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 8080a16:	2898      	cmp	r0, #152	; 0x98
    int numerical_mem_address = mem_address.toInt();
 8080a18:	4604      	mov	r4, r0
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 8080a1a:	d80b      	bhi.n	8080a34 <_Z20remoteReadStoredVars6String+0x2a>
    {
        EEPROM.get(numerical_mem_address, tempValue);
 8080a1c:	f00a f890 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a20:	4620      	mov	r0, r4
 8080a22:	2202      	movs	r2, #2
 8080a24:	f10d 0106 	add.w	r1, sp, #6
 8080a28:	f007 fd10 	bl	808844c <HAL_EEPROM_Get>
        return tempValue;
 8080a2c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    }
    else 
    {
        return -1;
    }
}
 8080a30:	b002      	add	sp, #8
 8080a32:	bd10      	pop	{r4, pc}
        return -1;
 8080a34:	f04f 30ff 	mov.w	r0, #4294967295
 8080a38:	e7fa      	b.n	8080a30 <_Z20remoteReadStoredVars6String+0x26>

08080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>:
    template <typename T> T &get( int idx, T &t )
 8080a3a:	b510      	push	{r4, lr}
 8080a3c:	460c      	mov	r4, r1
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a3e:	2204      	movs	r2, #4
 8080a40:	f007 fd04 	bl	808844c <HAL_EEPROM_Get>
    }
 8080a44:	4620      	mov	r0, r4
 8080a46:	bd10      	pop	{r4, pc}

08080a48 <_ZN9PrintFile5writeEh>:
  size_t write(uint8_t b) {
 8080a48:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
 8080a4a:	2201      	movs	r2, #1
 8080a4c:	f88d 1007 	strb.w	r1, [sp, #7]
 8080a50:	3008      	adds	r0, #8
 8080a52:	f10d 0107 	add.w	r1, sp, #7
 8080a56:	f006 fe85 	bl	8087764 <_ZN7FatFile5writeEPKvj>
  }
 8080a5a:	b003      	add	sp, #12
 8080a5c:	f85d fb04 	ldr.w	pc, [sp], #4

08080a60 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080a60:	b40e      	push	{r1, r2, r3}
 8080a62:	b503      	push	{r0, r1, lr}
 8080a64:	ab03      	add	r3, sp, #12
 8080a66:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 8080a6a:	2100      	movs	r1, #0
        va_start(args, format);
 8080a6c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 8080a6e:	f008 fe2b 	bl	80896c8 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8080a72:	b002      	add	sp, #8
 8080a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8080a78:	b003      	add	sp, #12
 8080a7a:	4770      	bx	lr

08080a7c <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080a7c:	2300      	movs	r3, #0
 8080a7e:	6840      	ldr	r0, [r0, #4]
 8080a80:	461a      	mov	r2, r3
 8080a82:	4619      	mov	r1, r3
 8080a84:	f007 befe 	b.w	8088884 <network_off>

08080a88 <_ZN11USARTSerialD0Ev>:
 8080a88:	b510      	push	{r4, lr}
 8080a8a:	4604      	mov	r4, r0
 8080a8c:	2114      	movs	r1, #20
 8080a8e:	f00a f8fe 	bl	808ac8e <_ZdlPvj>
 8080a92:	4620      	mov	r0, r4
 8080a94:	bd10      	pop	{r4, pc}

08080a96 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080a96:	b40e      	push	{r1, r2, r3}
 8080a98:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080a9a:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 8080a9c:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8080a9e:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8080aa0:	b08d      	sub	sp, #52	; 0x34
 8080aa2:	aa0f      	add	r2, sp, #60	; 0x3c
 8080aa4:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8080aa8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080aac:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8080ab0:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080ab2:	201e      	movs	r0, #30
 8080ab4:	aa04      	add	r2, sp, #16
 8080ab6:	f007 fe59 	bl	808876c <log_message_v>
}
 8080aba:	b00d      	add	sp, #52	; 0x34
 8080abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080ac0:	b003      	add	sp, #12
 8080ac2:	4770      	bx	lr

08080ac4 <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static hal_usart_ring_buffer_t serial4_rx_buffer;
static hal_usart_ring_buffer_t serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080ac4:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080ac6:	4c0d      	ldr	r4, [pc, #52]	; (8080afc <_Z22__fetch_global_Serial4v+0x38>)
 8080ac8:	7823      	ldrb	r3, [r4, #0]
 8080aca:	f3bf 8f5b 	dmb	ish
 8080ace:	07db      	lsls	r3, r3, #31
 8080ad0:	d411      	bmi.n	8080af6 <_Z22__fetch_global_Serial4v+0x32>
 8080ad2:	4620      	mov	r0, r4
 8080ad4:	f7ff faff 	bl	80800d6 <__cxa_guard_acquire>
 8080ad8:	b168      	cbz	r0, 8080af6 <_Z22__fetch_global_Serial4v+0x32>
 8080ada:	2103      	movs	r1, #3
 8080adc:	4a08      	ldr	r2, [pc, #32]	; (8080b00 <_Z22__fetch_global_Serial4v+0x3c>)
 8080ade:	4b09      	ldr	r3, [pc, #36]	; (8080b04 <_Z22__fetch_global_Serial4v+0x40>)
 8080ae0:	4809      	ldr	r0, [pc, #36]	; (8080b08 <_Z22__fetch_global_Serial4v+0x44>)
 8080ae2:	f009 fe3b 	bl	808a75c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080ae6:	4620      	mov	r0, r4
 8080ae8:	f7ff fafa 	bl	80800e0 <__cxa_guard_release>
 8080aec:	4a07      	ldr	r2, [pc, #28]	; (8080b0c <_Z22__fetch_global_Serial4v+0x48>)
 8080aee:	4908      	ldr	r1, [pc, #32]	; (8080b10 <_Z22__fetch_global_Serial4v+0x4c>)
 8080af0:	4805      	ldr	r0, [pc, #20]	; (8080b08 <_Z22__fetch_global_Serial4v+0x44>)
 8080af2:	f00a f8c7 	bl	808ac84 <__aeabi_atexit>
	return serial4;
}
 8080af6:	4804      	ldr	r0, [pc, #16]	; (8080b08 <_Z22__fetch_global_Serial4v+0x44>)
 8080af8:	bd10      	pop	{r4, pc}
 8080afa:	bf00      	nop
 8080afc:	20000308 	.word	0x20000308
 8080b00:	20000310 	.word	0x20000310
 8080b04:	20000394 	.word	0x20000394
 8080b08:	20000524 	.word	0x20000524
 8080b0c:	200002b0 	.word	0x200002b0
 8080b10:	08080941 	.word	0x08080941

08080b14 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080b14:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080b16:	f7ff ffd5 	bl	8080ac4 <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080b1a:	4b07      	ldr	r3, [pc, #28]	; (8080b38 <_Z15serialEventRun4v+0x24>)
 8080b1c:	4604      	mov	r4, r0
 8080b1e:	b153      	cbz	r3, 8080b36 <_Z15serialEventRun4v+0x22>
 8080b20:	f009 fe39 	bl	808a796 <_ZN11USARTSerial9isEnabledEv>
 8080b24:	b138      	cbz	r0, 8080b36 <_Z15serialEventRun4v+0x22>
 8080b26:	6823      	ldr	r3, [r4, #0]
 8080b28:	4620      	mov	r0, r4
 8080b2a:	691b      	ldr	r3, [r3, #16]
 8080b2c:	4798      	blx	r3
 8080b2e:	2800      	cmp	r0, #0
 8080b30:	dd01      	ble.n	8080b36 <_Z15serialEventRun4v+0x22>
        handler();
 8080b32:	f3af 8000 	nop.w
}
 8080b36:	bd10      	pop	{r4, pc}
 8080b38:	00000000 	.word	0x00000000

08080b3c <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static hal_usart_ring_buffer_t serial5_rx_buffer;
static hal_usart_ring_buffer_t serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080b3c:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080b3e:	4c0d      	ldr	r4, [pc, #52]	; (8080b74 <_Z22__fetch_global_Serial5v+0x38>)
 8080b40:	7823      	ldrb	r3, [r4, #0]
 8080b42:	f3bf 8f5b 	dmb	ish
 8080b46:	07db      	lsls	r3, r3, #31
 8080b48:	d411      	bmi.n	8080b6e <_Z22__fetch_global_Serial5v+0x32>
 8080b4a:	4620      	mov	r0, r4
 8080b4c:	f7ff fac3 	bl	80800d6 <__cxa_guard_acquire>
 8080b50:	b168      	cbz	r0, 8080b6e <_Z22__fetch_global_Serial5v+0x32>
 8080b52:	2104      	movs	r1, #4
 8080b54:	4a08      	ldr	r2, [pc, #32]	; (8080b78 <_Z22__fetch_global_Serial5v+0x3c>)
 8080b56:	4b09      	ldr	r3, [pc, #36]	; (8080b7c <_Z22__fetch_global_Serial5v+0x40>)
 8080b58:	4809      	ldr	r0, [pc, #36]	; (8080b80 <_Z22__fetch_global_Serial5v+0x44>)
 8080b5a:	f009 fdff 	bl	808a75c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080b5e:	4620      	mov	r0, r4
 8080b60:	f7ff fabe 	bl	80800e0 <__cxa_guard_release>
 8080b64:	4a07      	ldr	r2, [pc, #28]	; (8080b84 <_Z22__fetch_global_Serial5v+0x48>)
 8080b66:	4908      	ldr	r1, [pc, #32]	; (8080b88 <_Z22__fetch_global_Serial5v+0x4c>)
 8080b68:	4805      	ldr	r0, [pc, #20]	; (8080b80 <_Z22__fetch_global_Serial5v+0x44>)
 8080b6a:	f00a f88b 	bl	808ac84 <__aeabi_atexit>
	return serial5;
}
 8080b6e:	4804      	ldr	r0, [pc, #16]	; (8080b80 <_Z22__fetch_global_Serial5v+0x44>)
 8080b70:	bd10      	pop	{r4, pc}
 8080b72:	bf00      	nop
 8080b74:	2000030c 	.word	0x2000030c
 8080b78:	20000418 	.word	0x20000418
 8080b7c:	2000049c 	.word	0x2000049c
 8080b80:	20000538 	.word	0x20000538
 8080b84:	200002b0 	.word	0x200002b0
 8080b88:	08080941 	.word	0x08080941

08080b8c <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080b8c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080b8e:	f7ff ffd5 	bl	8080b3c <_Z22__fetch_global_Serial5v>
    if (handler && serial.isEnabled() && serial.available()>0)
 8080b92:	4b07      	ldr	r3, [pc, #28]	; (8080bb0 <_Z15serialEventRun5v+0x24>)
 8080b94:	4604      	mov	r4, r0
 8080b96:	b153      	cbz	r3, 8080bae <_Z15serialEventRun5v+0x22>
 8080b98:	f009 fdfd 	bl	808a796 <_ZN11USARTSerial9isEnabledEv>
 8080b9c:	b138      	cbz	r0, 8080bae <_Z15serialEventRun5v+0x22>
 8080b9e:	6823      	ldr	r3, [r4, #0]
 8080ba0:	4620      	mov	r0, r4
 8080ba2:	691b      	ldr	r3, [r3, #16]
 8080ba4:	4798      	blx	r3
 8080ba6:	2800      	cmp	r0, #0
 8080ba8:	dd01      	ble.n	8080bae <_Z15serialEventRun5v+0x22>
        handler();
 8080baa:	f3af 8000 	nop.w
}
 8080bae:	bd10      	pop	{r4, pc}
 8080bb0:	00000000 	.word	0x00000000

08080bb4 <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080bb4:	b538      	push	{r3, r4, r5, lr}
 8080bb6:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080bb8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080bbc:	f006 f892 	bl	8086ce4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080bc0:	b908      	cbnz	r0, 8080bc6 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x12>
 8080bc2:	2000      	movs	r0, #0
  }
 8080bc4:	bd38      	pop	{r3, r4, r5, pc}
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080bc6:	f504 6588 	add.w	r5, r4, #1088	; 0x440
    vwd()->close();
 8080bca:	4628      	mov	r0, r5
 8080bcc:	f006 fd76 	bl	80876bc <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080bd0:	2101      	movs	r1, #1
 8080bd2:	4620      	mov	r0, r4
 8080bd4:	f006 ff9f 	bl	8087b16 <_ZN9FatVolume4initEh>
 8080bd8:	4601      	mov	r1, r0
 8080bda:	b168      	cbz	r0, 8080bf8 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x44>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080bdc:	4621      	mov	r1, r4
 8080bde:	4628      	mov	r0, r5
 8080be0:	f006 fb9d 	bl	808731e <_ZN7FatFile8openRootEP9FatVolume>
 8080be4:	2800      	cmp	r0, #0
 8080be6:	d0ec      	beq.n	8080bc2 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    if (!dir->isDir()) {
 8080be8:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080bec:	f013 0f70 	tst.w	r3, #112	; 0x70
 8080bf0:	d0e7      	beq.n	8080bc2 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    m_cwd = dir;
 8080bf2:	4b04      	ldr	r3, [pc, #16]	; (8080c04 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080bf4:	601d      	str	r5, [r3, #0]
    return true;
 8080bf6:	e7e5      	b.n	8080bc4 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x10>
    return (part ? init(part) : init(1) || init(0))
 8080bf8:	4620      	mov	r0, r4
 8080bfa:	f006 ff8c 	bl	8087b16 <_ZN9FatVolume4initEh>
 8080bfe:	2800      	cmp	r0, #0
 8080c00:	d1ec      	bne.n	8080bdc <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x28>
 8080c02:	e7de      	b.n	8080bc2 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
 8080c04:	20000cbc 	.word	0x20000cbc

08080c08 <_Z13writeRegisterhh>:
{
 8080c08:	b538      	push	{r3, r4, r5, lr}
 8080c0a:	460c      	mov	r4, r1
 8080c0c:	4605      	mov	r5, r0
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080c0e:	f00a f811 	bl	808ac34 <_Z20__fetch_global_Wire3v>
 8080c12:	216b      	movs	r1, #107	; 0x6b
 8080c14:	f009 fe72 	bl	808a8fc <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080c18:	f00a f80c 	bl	808ac34 <_Z20__fetch_global_Wire3v>
 8080c1c:	6803      	ldr	r3, [r0, #0]
 8080c1e:	4629      	mov	r1, r5
 8080c20:	689b      	ldr	r3, [r3, #8]
 8080c22:	4798      	blx	r3
    Wire3.write(value);
 8080c24:	f00a f806 	bl	808ac34 <_Z20__fetch_global_Wire3v>
 8080c28:	6803      	ldr	r3, [r0, #0]
 8080c2a:	4621      	mov	r1, r4
 8080c2c:	689b      	ldr	r3, [r3, #8]
 8080c2e:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080c30:	f00a f800 	bl	808ac34 <_Z20__fetch_global_Wire3v>
}
 8080c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire3.endTransmission(true);
 8080c38:	2101      	movs	r1, #1
 8080c3a:	f009 be7a 	b.w	808a932 <_ZN7TwoWire15endTransmissionEh>
	...

08080c40 <_Z20writeDefaultSettingsv>:
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void)
{
 8080c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080c42:	f009 ff7d 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080c46:	f240 6313 	movw	r3, #1555	; 0x613

    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080c4a:	2564      	movs	r5, #100	; 0x64
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080c4c:	2400      	movs	r4, #0
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080c4e:	a901      	add	r1, sp, #4
 8080c50:	2000      	movs	r0, #0
 8080c52:	9301      	str	r3, [sp, #4]
 8080c54:	f7ff fed2 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080c58:	f009 ff72 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080c5c:	a901      	add	r1, sp, #4
 8080c5e:	2008      	movs	r0, #8
 8080c60:	9501      	str	r5, [sp, #4]
 8080c62:	f7ff fecb 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, 100);
 8080c66:	f009 ff6b 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080c6a:	a901      	add	r1, sp, #4
 8080c6c:	2010      	movs	r0, #16
 8080c6e:	9501      	str	r5, [sp, #4]
 8080c70:	f7ff fec4 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SLOPE_B_MEM_ADDRESS, 100);
 8080c74:	f009 ff64 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080c78:	a901      	add	r1, sp, #4
 8080c7a:	2098      	movs	r0, #152	; 0x98
 8080c7c:	9501      	str	r5, [sp, #4]
 8080c7e:	f7ff febd 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080c82:	f009 ff5d 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080c86:	a901      	add	r1, sp, #4
 8080c88:	2018      	movs	r0, #24
 8080c8a:	9501      	str	r5, [sp, #4]
 8080c8c:	f7ff feb6 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080c90:	f009 ff56 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080c94:	a901      	add	r1, sp, #4
 8080c96:	2020      	movs	r0, #32
 8080c98:	9501      	str	r5, [sp, #4]
 8080c9a:	f7ff feaf 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080c9e:	f009 ff4f 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080ca2:	a901      	add	r1, sp, #4
 8080ca4:	2028      	movs	r0, #40	; 0x28
 8080ca6:	9501      	str	r5, [sp, #4]
 8080ca8:	f7ff fea8 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080cac:	f009 ff48 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080cb0:	a901      	add	r1, sp, #4
 8080cb2:	2030      	movs	r0, #48	; 0x30
 8080cb4:	9501      	str	r5, [sp, #4]
 8080cb6:	f7ff fea1 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080cba:	f009 ff41 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080cbe:	a901      	add	r1, sp, #4
 8080cc0:	2038      	movs	r0, #56	; 0x38
 8080cc2:	9501      	str	r5, [sp, #4]
 8080cc4:	f7ff fe9a 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080cc8:	f009 ff3a 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080ccc:	a901      	add	r1, sp, #4
 8080cce:	2040      	movs	r0, #64	; 0x40
 8080cd0:	9501      	str	r5, [sp, #4]
 8080cd2:	f7ff fe93 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080cd6:	f009 ff33 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080cda:	a901      	add	r1, sp, #4
 8080cdc:	2004      	movs	r0, #4
 8080cde:	9401      	str	r4, [sp, #4]
 8080ce0:	f7ff fe8c 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_ZERO_A_MEM_ADDRESS, 0);
 8080ce4:	f009 ff2c 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080ce8:	a901      	add	r1, sp, #4
 8080cea:	200c      	movs	r0, #12
 8080cec:	9401      	str	r4, [sp, #4]
 8080cee:	f7ff fe85 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_ZERO_B_MEM_ADDRESS, 0);
 8080cf2:	f009 ff25 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080cf6:	a901      	add	r1, sp, #4
 8080cf8:	2094      	movs	r0, #148	; 0x94
 8080cfa:	9401      	str	r4, [sp, #4]
 8080cfc:	f7ff fe7e 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080d00:	f009 ff1e 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080d04:	a901      	add	r1, sp, #4
 8080d06:	2014      	movs	r0, #20
 8080d08:	9401      	str	r4, [sp, #4]
 8080d0a:	f7ff fe77 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8080d0e:	f009 ff17 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080d12:	a901      	add	r1, sp, #4
 8080d14:	201c      	movs	r0, #28
 8080d16:	9401      	str	r4, [sp, #4]
 8080d18:	f7ff fe70 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8080d1c:	f009 ff10 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080d20:	a901      	add	r1, sp, #4
 8080d22:	2024      	movs	r0, #36	; 0x24
 8080d24:	9401      	str	r4, [sp, #4]
 8080d26:	f7ff fe69 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8080d2a:	f009 ff09 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080d2e:	a901      	add	r1, sp, #4
 8080d30:	202c      	movs	r0, #44	; 0x2c
 8080d32:	9401      	str	r4, [sp, #4]
 8080d34:	f7ff fe62 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8080d38:	f009 ff02 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080d3c:	a901      	add	r1, sp, #4
 8080d3e:	2034      	movs	r0, #52	; 0x34
 8080d40:	9401      	str	r4, [sp, #4]
 8080d42:	f7ff fe5b 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8080d46:	f009 fefb 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080d4a:	a901      	add	r1, sp, #4
 8080d4c:	203c      	movs	r0, #60	; 0x3c
 8080d4e:	9401      	str	r4, [sp, #4]
 8080d50:	f7ff fe54 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8080d54:	f009 fef4 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080d58:	a901      	add	r1, sp, #4
 8080d5a:	2044      	movs	r0, #68	; 0x44
 8080d5c:	9401      	str	r4, [sp, #4]
 8080d5e:	f7ff fe4d 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8080d62:	f009 feed 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080d66:	a901      	add	r1, sp, #4
 8080d68:	2048      	movs	r0, #72	; 0x48
 8080d6a:	9401      	str	r4, [sp, #4]
 8080d6c:	f7ff fe46 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8080d70:	f009 fee6 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080d74:	a901      	add	r1, sp, #4
 8080d76:	2058      	movs	r0, #88	; 0x58
 8080d78:	9401      	str	r4, [sp, #4]
 8080d7a:	f7ff fe3f 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080d7e:	f009 fedf 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080d82:	4941      	ldr	r1, [pc, #260]	; (8080e88 <_Z20writeDefaultSettingsv+0x248>)
 8080d84:	205c      	movs	r0, #92	; 0x5c
 8080d86:	f7ff fe39 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 8080d8a:	f009 fed9 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080d92:	a901      	add	r1, sp, #4
 8080d94:	204c      	movs	r0, #76	; 0x4c
 8080d96:	9301      	str	r3, [sp, #4]
 8080d98:	f7ff fe30 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8080d9c:	f009 fed0 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080da0:	f242 7310 	movw	r3, #10000	; 0x2710
 8080da4:	a901      	add	r1, sp, #4
 8080da6:	2050      	movs	r0, #80	; 0x50
 8080da8:	9301      	str	r3, [sp, #4]
 8080daa:	f7ff fe27 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 8080dae:	f009 fec7 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080db2:	f06f 0306 	mvn.w	r3, #6
 8080db6:	a901      	add	r1, sp, #4
 8080db8:	2054      	movs	r0, #84	; 0x54
 8080dba:	9301      	str	r3, [sp, #4]
 8080dbc:	f7ff fe1e 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    Time.zone(tempValue);
 8080dc0:	4b32      	ldr	r3, [pc, #200]	; (8080e8c <_Z20writeDefaultSettingsv+0x24c>)
 8080dc2:	6818      	ldr	r0, [r3, #0]
 8080dc4:	f00a fd2e 	bl	808b824 <__aeabi_i2f>
 8080dc8:	f008 fd50 	bl	808986c <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8080dcc:	f009 feb8 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080dd0:	a901      	add	r1, sp, #4
 8080dd2:	2060      	movs	r0, #96	; 0x60
 8080dd4:	9401      	str	r4, [sp, #4]
 8080dd6:	f7ff fe11 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080dda:	f009 feb1 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080dde:	4628      	mov	r0, r5
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080de0:	2501      	movs	r5, #1
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080de2:	a901      	add	r1, sp, #4
 8080de4:	9401      	str	r4, [sp, #4]
 8080de6:	f7ff fe09 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080dea:	f009 fea9 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080dee:	a901      	add	r1, sp, #4
 8080df0:	2068      	movs	r0, #104	; 0x68
 8080df2:	9501      	str	r5, [sp, #4]
 8080df4:	f7ff fe02 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8080df8:	f009 fea2 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080dfc:	a901      	add	r1, sp, #4
 8080dfe:	206c      	movs	r0, #108	; 0x6c
 8080e00:	9401      	str	r4, [sp, #4]
 8080e02:	f7ff fdfb 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS, 0);
 8080e06:	f009 fe9b 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080e0a:	a901      	add	r1, sp, #4
 8080e0c:	2070      	movs	r0, #112	; 0x70
 8080e0e:	9401      	str	r4, [sp, #4]
 8080e10:	f7ff fdf4 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8080e14:	f009 fe94 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080e18:	a901      	add	r1, sp, #4
 8080e1a:	2074      	movs	r0, #116	; 0x74
 8080e1c:	9501      	str	r5, [sp, #4]
 8080e1e:	f7ff fded 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 8080e22:	f009 fe8d 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080e26:	a901      	add	r1, sp, #4
 8080e28:	2078      	movs	r0, #120	; 0x78
 8080e2a:	9501      	str	r5, [sp, #4]
 8080e2c:	f7ff fde6 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8080e30:	f009 fe86 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080e34:	a901      	add	r1, sp, #4
 8080e36:	207c      	movs	r0, #124	; 0x7c
 8080e38:	9401      	str	r4, [sp, #4]
 8080e3a:	f7ff fddf 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 8080e3e:	f009 fe7f 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080e42:	a901      	add	r1, sp, #4
 8080e44:	2080      	movs	r0, #128	; 0x80
 8080e46:	9501      	str	r5, [sp, #4]
 8080e48:	f7ff fdd8 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8080e4c:	f009 fe78 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080e50:	a901      	add	r1, sp, #4
 8080e52:	2084      	movs	r0, #132	; 0x84
 8080e54:	9401      	str	r4, [sp, #4]
 8080e56:	f7ff fdd1 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 8080e5a:	f009 fe71 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080e5e:	a901      	add	r1, sp, #4
 8080e60:	2088      	movs	r0, #136	; 0x88
 8080e62:	9401      	str	r4, [sp, #4]
 8080e64:	f7ff fdca 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
 8080e68:	f009 fe6a 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080e6c:	a901      	add	r1, sp, #4
 8080e6e:	208c      	movs	r0, #140	; 0x8c
 8080e70:	9401      	str	r4, [sp, #4]
 8080e72:	f7ff fdc3 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 8080e76:	f009 fe63 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080e7a:	a901      	add	r1, sp, #4
 8080e7c:	2090      	movs	r0, #144	; 0x90
 8080e7e:	9401      	str	r4, [sp, #4]
 8080e80:	f7ff fdbc 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
}
 8080e84:	b003      	add	sp, #12
 8080e86:	bd30      	pop	{r4, r5, pc}
 8080e88:	20000c70 	.word	0x20000c70
 8080e8c:	20000c5c 	.word	0x20000c5c

08080e90 <_Z14readStoredVarsv>:
{
 8080e90:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8080e94:	4cc6      	ldr	r4, [pc, #792]	; (80811b0 <_Z14readStoredVarsv+0x320>)
 8080e96:	f009 fe53 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080e9a:	4621      	mov	r1, r4
 8080e9c:	2000      	movs	r0, #0
 8080e9e:	f7ff fdcc 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if (DEVICE_id == -1) 
 8080ea2:	6823      	ldr	r3, [r4, #0]
 8080ea4:	3301      	adds	r3, #1
 8080ea6:	d104      	bne.n	8080eb2 <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 8080ea8:	f240 6313 	movw	r3, #1555	; 0x613
 8080eac:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 8080eae:	f7ff fec7 	bl	8080c40 <_Z20writeDefaultSettingsv>
    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8080eb2:	f009 fe45 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080eb6:	a901      	add	r1, sp, #4
 8080eb8:	2008      	movs	r0, #8
 8080eba:	f7ff fdbe 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO2_slope = tempValue;
 8080ebe:	9801      	ldr	r0, [sp, #4]
 8080ec0:	f00a fcb0 	bl	808b824 <__aeabi_i2f>
    CO2_slope /= 100;
 8080ec4:	49bb      	ldr	r1, [pc, #748]	; (80811b4 <_Z14readStoredVarsv+0x324>)
 8080ec6:	f00a fdb5 	bl	808ba34 <__aeabi_fdiv>
 8080eca:	f8df 9374 	ldr.w	r9, [pc, #884]	; 8081240 <_Z14readStoredVarsv+0x3b0>
    CO_slopeA /= 100;
 8080ece:	f8df 8374 	ldr.w	r8, [pc, #884]	; 8081244 <_Z14readStoredVarsv+0x3b4>
    CO2_slope /= 100;
 8080ed2:	f8c9 0000 	str.w	r0, [r9]
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 8080ed6:	f009 fe33 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080eda:	a901      	add	r1, sp, #4
 8080edc:	2010      	movs	r0, #16
 8080ede:	f7ff fdac 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO_slopeA = tempValue;
 8080ee2:	9801      	ldr	r0, [sp, #4]
 8080ee4:	f00a fc9e 	bl	808b824 <__aeabi_i2f>
    CO_slopeA /= 100;
 8080ee8:	49b2      	ldr	r1, [pc, #712]	; (80811b4 <_Z14readStoredVarsv+0x324>)
 8080eea:	f00a fda3 	bl	808ba34 <__aeabi_fdiv>
 8080eee:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_B_MEM_ADDRESS, tempValue);
 8080ef2:	f009 fe25 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080ef6:	a901      	add	r1, sp, #4
 8080ef8:	2098      	movs	r0, #152	; 0x98
 8080efa:	f7ff fd9e 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO_slopeB = tempValue;
 8080efe:	9801      	ldr	r0, [sp, #4]
 8080f00:	f00a fc90 	bl	808b824 <__aeabi_i2f>
    CO_slopeB /= 100;
 8080f04:	49ab      	ldr	r1, [pc, #684]	; (80811b4 <_Z14readStoredVarsv+0x324>)
 8080f06:	f00a fd95 	bl	808ba34 <__aeabi_fdiv>
 8080f0a:	4fab      	ldr	r7, [pc, #684]	; (80811b8 <_Z14readStoredVarsv+0x328>)
    PM_1_slope /= 100;
 8080f0c:	4eab      	ldr	r6, [pc, #684]	; (80811bc <_Z14readStoredVarsv+0x32c>)
    CO_slopeB /= 100;
 8080f0e:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8080f10:	f009 fe16 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080f14:	a901      	add	r1, sp, #4
 8080f16:	2018      	movs	r0, #24
 8080f18:	f7ff fd8f 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_1_slope = tempValue;
 8080f1c:	9801      	ldr	r0, [sp, #4]
 8080f1e:	f00a fc81 	bl	808b824 <__aeabi_i2f>
    PM_1_slope /= 100;
 8080f22:	49a4      	ldr	r1, [pc, #656]	; (80811b4 <_Z14readStoredVarsv+0x324>)
 8080f24:	f00a fd86 	bl	808ba34 <__aeabi_fdiv>
 8080f28:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8080f2a:	f009 fe09 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080f2e:	a901      	add	r1, sp, #4
 8080f30:	2020      	movs	r0, #32
 8080f32:	f7ff fd82 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_25_slope = tempValue;
 8080f36:	9801      	ldr	r0, [sp, #4]
 8080f38:	f00a fc74 	bl	808b824 <__aeabi_i2f>
    PM_25_slope /= 100;
 8080f3c:	499d      	ldr	r1, [pc, #628]	; (80811b4 <_Z14readStoredVarsv+0x324>)
 8080f3e:	f00a fd79 	bl	808ba34 <__aeabi_fdiv>
 8080f42:	4d9f      	ldr	r5, [pc, #636]	; (80811c0 <_Z14readStoredVarsv+0x330>)
    PM_10_slope /= 100;
 8080f44:	4c9f      	ldr	r4, [pc, #636]	; (80811c4 <_Z14readStoredVarsv+0x334>)
    PM_25_slope /= 100;
 8080f46:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8080f48:	f009 fdfa 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080f4c:	a901      	add	r1, sp, #4
 8080f4e:	2028      	movs	r0, #40	; 0x28
 8080f50:	f7ff fd73 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_10_slope = tempValue;
 8080f54:	9801      	ldr	r0, [sp, #4]
 8080f56:	f00a fc65 	bl	808b824 <__aeabi_i2f>
    PM_10_slope /= 100;
 8080f5a:	4996      	ldr	r1, [pc, #600]	; (80811b4 <_Z14readStoredVarsv+0x324>)
 8080f5c:	f00a fd6a 	bl	808ba34 <__aeabi_fdiv>
 8080f60:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 8080f62:	f009 fded 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080f66:	a901      	add	r1, sp, #4
 8080f68:	2030      	movs	r0, #48	; 0x30
 8080f6a:	f7ff fd66 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    temp_slope = tempValue;
 8080f6e:	9801      	ldr	r0, [sp, #4]
 8080f70:	f00a fc58 	bl	808b824 <__aeabi_i2f>
    temp_slope /= 100;
 8080f74:	498f      	ldr	r1, [pc, #572]	; (80811b4 <_Z14readStoredVarsv+0x324>)
 8080f76:	f00a fd5d 	bl	808ba34 <__aeabi_fdiv>
 8080f7a:	4b93      	ldr	r3, [pc, #588]	; (80811c8 <_Z14readStoredVarsv+0x338>)
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8080f7c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8081248 <_Z14readStoredVarsv+0x3b8>
    temp_slope /= 100;
 8080f80:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8080f82:	f009 fddd 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080f86:	a901      	add	r1, sp, #4
 8080f88:	2038      	movs	r0, #56	; 0x38
 8080f8a:	f7ff fd56 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    pressure_slope = tempValue;
 8080f8e:	9801      	ldr	r0, [sp, #4]
 8080f90:	f00a fc48 	bl	808b824 <__aeabi_i2f>
    pressure_slope /= 100;
 8080f94:	4987      	ldr	r1, [pc, #540]	; (80811b4 <_Z14readStoredVarsv+0x324>)
 8080f96:	f00a fd4d 	bl	808ba34 <__aeabi_fdiv>
 8080f9a:	4b8c      	ldr	r3, [pc, #560]	; (80811cc <_Z14readStoredVarsv+0x33c>)
 8080f9c:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8080f9e:	f009 fdcf 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080fa2:	a901      	add	r1, sp, #4
 8080fa4:	2040      	movs	r0, #64	; 0x40
 8080fa6:	f7ff fd48 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    rh_slope = tempValue;
 8080faa:	9801      	ldr	r0, [sp, #4]
 8080fac:	f00a fc3a 	bl	808b824 <__aeabi_i2f>
    rh_slope /= 100;
 8080fb0:	4980      	ldr	r1, [pc, #512]	; (80811b4 <_Z14readStoredVarsv+0x324>)
 8080fb2:	f00a fd3f 	bl	808ba34 <__aeabi_fdiv>
 8080fb6:	4b86      	ldr	r3, [pc, #536]	; (80811d0 <_Z14readStoredVarsv+0x340>)
 8080fb8:	6018      	str	r0, [r3, #0]
    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 8080fba:	f009 fdc1 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080fbe:	4985      	ldr	r1, [pc, #532]	; (80811d4 <_Z14readStoredVarsv+0x344>)
 8080fc0:	2004      	movs	r0, #4
 8080fc2:	f7ff fd3a 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_ZERO_A_MEM_ADDRESS, CO_zeroA);
 8080fc6:	f009 fdbb 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080fca:	4983      	ldr	r1, [pc, #524]	; (80811d8 <_Z14readStoredVarsv+0x348>)
 8080fcc:	200c      	movs	r0, #12
 8080fce:	f7ff fd34 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_ZERO_B_MEM_ADDRESS, CO_zeroB);
 8080fd2:	f009 fdb5 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080fd6:	4981      	ldr	r1, [pc, #516]	; (80811dc <_Z14readStoredVarsv+0x34c>)
 8080fd8:	2094      	movs	r0, #148	; 0x94
 8080fda:	f7ff fd2e 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 8080fde:	f009 fdaf 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080fe2:	497f      	ldr	r1, [pc, #508]	; (80811e0 <_Z14readStoredVarsv+0x350>)
 8080fe4:	2014      	movs	r0, #20
 8080fe6:	f7ff fd28 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 8080fea:	f009 fda9 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080fee:	497d      	ldr	r1, [pc, #500]	; (80811e4 <_Z14readStoredVarsv+0x354>)
 8080ff0:	201c      	movs	r0, #28
 8080ff2:	f7ff fd22 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 8080ff6:	f009 fda3 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8080ffa:	497b      	ldr	r1, [pc, #492]	; (80811e8 <_Z14readStoredVarsv+0x358>)
 8080ffc:	2024      	movs	r0, #36	; 0x24
 8080ffe:	f7ff fd1c 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 8081002:	f009 fd9d 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8081006:	4979      	ldr	r1, [pc, #484]	; (80811ec <_Z14readStoredVarsv+0x35c>)
 8081008:	202c      	movs	r0, #44	; 0x2c
 808100a:	f7ff fd16 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 808100e:	f009 fd97 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8081012:	4977      	ldr	r1, [pc, #476]	; (80811f0 <_Z14readStoredVarsv+0x360>)
 8081014:	2034      	movs	r0, #52	; 0x34
 8081016:	f7ff fd10 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 808101a:	f009 fd91 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808101e:	4975      	ldr	r1, [pc, #468]	; (80811f4 <_Z14readStoredVarsv+0x364>)
 8081020:	203c      	movs	r0, #60	; 0x3c
 8081022:	f7ff fd0a 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8081026:	f009 fd8b 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808102a:	4973      	ldr	r1, [pc, #460]	; (80811f8 <_Z14readStoredVarsv+0x368>)
 808102c:	2044      	movs	r0, #68	; 0x44
 808102e:	f7ff fd04 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8081032:	f009 fd85 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8081036:	4971      	ldr	r1, [pc, #452]	; (80811fc <_Z14readStoredVarsv+0x36c>)
 8081038:	2048      	movs	r0, #72	; 0x48
 808103a:	f7ff fcfe 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808103e:	f009 fd7f 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8081042:	496f      	ldr	r1, [pc, #444]	; (8081200 <_Z14readStoredVarsv+0x370>)
 8081044:	2058      	movs	r0, #88	; 0x58
 8081046:	f7ff fcf8 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 808104a:	f009 fd79 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808104e:	496d      	ldr	r1, [pc, #436]	; (8081204 <_Z14readStoredVarsv+0x374>)
 8081050:	205c      	movs	r0, #92	; 0x5c
 8081052:	f7ff fcf2 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8081056:	f009 fd73 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808105a:	496b      	ldr	r1, [pc, #428]	; (8081208 <_Z14readStoredVarsv+0x378>)
 808105c:	204c      	movs	r0, #76	; 0x4c
 808105e:	f7ff fcec 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8081062:	f009 fd6d 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8081066:	4969      	ldr	r1, [pc, #420]	; (808120c <_Z14readStoredVarsv+0x37c>)
 8081068:	2050      	movs	r0, #80	; 0x50
 808106a:	f7ff fce6 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 808106e:	f009 fd67 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8081072:	a901      	add	r1, sp, #4
 8081074:	2054      	movs	r0, #84	; 0x54
 8081076:	f7ff fce0 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    Time.zone(tempValue);
 808107a:	9801      	ldr	r0, [sp, #4]
 808107c:	f00a fbd2 	bl	808b824 <__aeabi_i2f>
 8081080:	f008 fbf4 	bl	808986c <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8081084:	f009 fd5c 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8081088:	4961      	ldr	r1, [pc, #388]	; (8081210 <_Z14readStoredVarsv+0x380>)
 808108a:	2060      	movs	r0, #96	; 0x60
 808108c:	f7ff fcd5 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8081090:	f009 fd56 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8081094:	495f      	ldr	r1, [pc, #380]	; (8081214 <_Z14readStoredVarsv+0x384>)
 8081096:	2064      	movs	r0, #100	; 0x64
 8081098:	f7ff fccf 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 808109c:	f009 fd50 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80810a0:	495d      	ldr	r1, [pc, #372]	; (8081218 <_Z14readStoredVarsv+0x388>)
 80810a2:	2068      	movs	r0, #104	; 0x68
 80810a4:	f7ff fcc9 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80810a8:	f009 fd4a 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80810ac:	495b      	ldr	r1, [pc, #364]	; (808121c <_Z14readStoredVarsv+0x38c>)
 80810ae:	206c      	movs	r0, #108	; 0x6c
 80810b0:	f7ff fcc3 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 80810b4:	f009 fd44 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80810b8:	4959      	ldr	r1, [pc, #356]	; (8081220 <_Z14readStoredVarsv+0x390>)
 80810ba:	2070      	movs	r0, #112	; 0x70
 80810bc:	f7ff fcbd 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 80810c0:	f009 fd3e 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80810c4:	4957      	ldr	r1, [pc, #348]	; (8081224 <_Z14readStoredVarsv+0x394>)
 80810c6:	2074      	movs	r0, #116	; 0x74
 80810c8:	f7ff fcb7 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80810cc:	f009 fd38 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80810d0:	4955      	ldr	r1, [pc, #340]	; (8081228 <_Z14readStoredVarsv+0x398>)
 80810d2:	2078      	movs	r0, #120	; 0x78
 80810d4:	f7ff fcb1 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80810d8:	f009 fd32 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80810dc:	4953      	ldr	r1, [pc, #332]	; (808122c <_Z14readStoredVarsv+0x39c>)
 80810de:	207c      	movs	r0, #124	; 0x7c
 80810e0:	f7ff fcab 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80810e4:	f009 fd2c 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80810e8:	4951      	ldr	r1, [pc, #324]	; (8081230 <_Z14readStoredVarsv+0x3a0>)
 80810ea:	2080      	movs	r0, #128	; 0x80
 80810ec:	f7ff fca5 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80810f0:	f009 fd26 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80810f4:	494f      	ldr	r1, [pc, #316]	; (8081234 <_Z14readStoredVarsv+0x3a4>)
 80810f6:	2084      	movs	r0, #132	; 0x84
 80810f8:	f7ff fc9f 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80810fc:	f009 fd20 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8081100:	494d      	ldr	r1, [pc, #308]	; (8081238 <_Z14readStoredVarsv+0x3a8>)
 8081102:	2088      	movs	r0, #136	; 0x88
 8081104:	f7ff fc99 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8081108:	f009 fd1a 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808110c:	4651      	mov	r1, sl
 808110e:	208c      	movs	r0, #140	; 0x8c
 8081110:	f7ff fc93 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8081114:	f009 fd14 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8081118:	2090      	movs	r0, #144	; 0x90
 808111a:	4948      	ldr	r1, [pc, #288]	; (808123c <_Z14readStoredVarsv+0x3ac>)
 808111c:	f7ff fc8d 	bl	8080a3a <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if (sensible_iot_en) 
 8081120:	f8da 3000 	ldr.w	r3, [sl]
 8081124:	b113      	cbz	r3, 808112c <_Z14readStoredVarsv+0x29c>
        Time.zone(0);       //use UTC if using sensible iot upload
 8081126:	2000      	movs	r0, #0
 8081128:	f008 fba0 	bl	808986c <_ZN9TimeClass4zoneEf>
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 808112c:	f241 3187 	movw	r1, #4999	; 0x1387
 8081130:	4a3c      	ldr	r2, [pc, #240]	; (8081224 <_Z14readStoredVarsv+0x394>)
    if (!CO2_slope)
 8081132:	f8d9 0000 	ldr.w	r0, [r9]
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 8081136:	6813      	ldr	r3, [r2, #0]
 8081138:	3b01      	subs	r3, #1
 808113a:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 808113c:	bf88      	it	hi
 808113e:	2301      	movhi	r3, #1
    if (!CO2_slope)
 8081140:	f04f 0100 	mov.w	r1, #0
        measurements_to_average = 1;
 8081144:	bf88      	it	hi
 8081146:	6013      	strhi	r3, [r2, #0]
    if (!CO2_slope)
 8081148:	f00a fd54 	bl	808bbf4 <__aeabi_fcmpeq>
 808114c:	b118      	cbz	r0, 8081156 <_Z14readStoredVarsv+0x2c6>
        CO2_slope = 1;
 808114e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081152:	f8c9 3000 	str.w	r3, [r9]
    if (!CO_slopeA)
 8081156:	2100      	movs	r1, #0
 8081158:	f8d8 0000 	ldr.w	r0, [r8]
 808115c:	f00a fd4a 	bl	808bbf4 <__aeabi_fcmpeq>
 8081160:	b118      	cbz	r0, 808116a <_Z14readStoredVarsv+0x2da>
        CO_slopeA = 1;
 8081162:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081166:	f8c8 3000 	str.w	r3, [r8]
    if (!CO_slopeB)
 808116a:	2100      	movs	r1, #0
 808116c:	6838      	ldr	r0, [r7, #0]
 808116e:	f00a fd41 	bl	808bbf4 <__aeabi_fcmpeq>
 8081172:	b110      	cbz	r0, 808117a <_Z14readStoredVarsv+0x2ea>
        CO_slopeB = 1;
 8081174:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081178:	603b      	str	r3, [r7, #0]
    if (!PM_1_slope)
 808117a:	2100      	movs	r1, #0
 808117c:	6830      	ldr	r0, [r6, #0]
 808117e:	f00a fd39 	bl	808bbf4 <__aeabi_fcmpeq>
 8081182:	b110      	cbz	r0, 808118a <_Z14readStoredVarsv+0x2fa>
        PM_1_slope = 1;
 8081184:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081188:	6033      	str	r3, [r6, #0]
    if (!PM_25_slope)
 808118a:	2100      	movs	r1, #0
 808118c:	6828      	ldr	r0, [r5, #0]
 808118e:	f00a fd31 	bl	808bbf4 <__aeabi_fcmpeq>
 8081192:	b110      	cbz	r0, 808119a <_Z14readStoredVarsv+0x30a>
        PM_25_slope = 1;
 8081194:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081198:	602b      	str	r3, [r5, #0]
    if (!PM_10_slope)
 808119a:	2100      	movs	r1, #0
 808119c:	6820      	ldr	r0, [r4, #0]
 808119e:	f00a fd29 	bl	808bbf4 <__aeabi_fcmpeq>
 80811a2:	b110      	cbz	r0, 80811aa <_Z14readStoredVarsv+0x31a>
        PM_10_slope = 1;
 80811a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80811a8:	6023      	str	r3, [r4, #0]
}
 80811aa:	b002      	add	sp, #8
 80811ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80811b0:	20000080 	.word	0x20000080
 80811b4:	42c80000 	.word	0x42c80000
 80811b8:	200002cc 	.word	0x200002cc
 80811bc:	200002ec 	.word	0x200002ec
 80811c0:	200002f4 	.word	0x200002f4
 80811c4:	200002e4 	.word	0x200002e4
 80811c8:	20000c60 	.word	0x20000c60
 80811cc:	20000798 	.word	0x20000798
 80811d0:	200007a0 	.word	0x200007a0
 80811d4:	200002bc 	.word	0x200002bc
 80811d8:	200002d4 	.word	0x200002d4
 80811dc:	200002d8 	.word	0x200002d8
 80811e0:	200002f0 	.word	0x200002f0
 80811e4:	200002f8 	.word	0x200002f8
 80811e8:	200002e8 	.word	0x200002e8
 80811ec:	20000c64 	.word	0x20000c64
 80811f0:	2000079c 	.word	0x2000079c
 80811f4:	200007a4 	.word	0x200007a4
 80811f8:	20000c28 	.word	0x20000c28
 80811fc:	200005e8 	.word	0x200005e8
 8081200:	20000758 	.word	0x20000758
 8081204:	20000c70 	.word	0x20000c70
 8081208:	20000098 	.word	0x20000098
 808120c:	2000009c 	.word	0x2000009c
 8081210:	20000c68 	.word	0x20000c68
 8081214:	20000750 	.word	0x20000750
 8081218:	2000074c 	.word	0x2000074c
 808121c:	20000754 	.word	0x20000754
 8081220:	2000075c 	.word	0x2000075c
 8081224:	20000748 	.word	0x20000748
 8081228:	20000560 	.word	0x20000560
 808122c:	2000054c 	.word	0x2000054c
 8081230:	200006b4 	.word	0x200006b4
 8081234:	200002d0 	.word	0x200002d0
 8081238:	2000066c 	.word	0x2000066c
 808123c:	200005dc 	.word	0x200005dc
 8081240:	200002b8 	.word	0x200002b8
 8081244:	200002c8 	.word	0x200002c8
 8081248:	20000c24 	.word	0x20000c24

0808124c <_Z7echoGpsv>:
        goToSleepBattery();
    }
}

void echoGps() 
{
 808124c:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while (!Serial.available()) 
 808124e:	f009 f987 	bl	808a560 <_Z16_fetch_usbserialv>
 8081252:	6803      	ldr	r3, [r0, #0]
 8081254:	691b      	ldr	r3, [r3, #16]
 8081256:	4798      	blx	r3
 8081258:	b990      	cbnz	r0, 8081280 <_Z7echoGpsv+0x34>
    {
        if (Serial5.available() > 0) 
 808125a:	f7ff fc6f 	bl	8080b3c <_Z22__fetch_global_Serial5v>
 808125e:	6803      	ldr	r3, [r0, #0]
 8081260:	691b      	ldr	r3, [r3, #16]
 8081262:	4798      	blx	r3
 8081264:	2800      	cmp	r0, #0
 8081266:	ddf2      	ble.n	808124e <_Z7echoGpsv+0x2>
        {
            gps_byte = Serial5.read();
 8081268:	f7ff fc68 	bl	8080b3c <_Z22__fetch_global_Serial5v>
 808126c:	6803      	ldr	r3, [r0, #0]
 808126e:	695b      	ldr	r3, [r3, #20]
 8081270:	4798      	blx	r3
 8081272:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081274:	f009 f974 	bl	808a560 <_Z16_fetch_usbserialv>
 8081278:	b2e1      	uxtb	r1, r4
 808127a:	f008 f909 	bl	8089490 <_ZN5Print5printEc>
 808127e:	e7e6      	b.n	808124e <_Z7echoGpsv+0x2>
        }
    }
}
 8081280:	bd10      	pop	{r4, pc}
	...

08081284 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte* packet, byte len)
{
 8081284:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8081288:	4606      	mov	r6, r0
 808128a:	460d      	mov	r5, r1
 808128c:	2400      	movs	r4, #0
    char temp[3];

    for (uint8_t i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
 808128e:	4f0f      	ldr	r7, [pc, #60]	; (80812cc <_Z11printPacketPhh+0x48>)
        Serial.print(temp);

        if (i != len - 1)
 8081290:	f101 38ff 	add.w	r8, r1, #4294967295
    for (uint8_t i = 0; i < len; i++)
 8081294:	42ac      	cmp	r4, r5
 8081296:	d012      	beq.n	80812be <_Z11printPacketPhh+0x3a>
        sprintf(temp, "%.2X", packet[i]);
 8081298:	4639      	mov	r1, r7
 808129a:	5d32      	ldrb	r2, [r6, r4]
 808129c:	a801      	add	r0, sp, #4
 808129e:	f007 fb71 	bl	8088984 <sprintf>
        Serial.print(temp);
 80812a2:	f009 f95d 	bl	808a560 <_Z16_fetch_usbserialv>
 80812a6:	a901      	add	r1, sp, #4
 80812a8:	f008 f8ee 	bl	8089488 <_ZN5Print5printEPKc>
        if (i != len - 1)
 80812ac:	45a0      	cmp	r8, r4
 80812ae:	d004      	beq.n	80812ba <_Z11printPacketPhh+0x36>
        {
            Serial.print(' ');
 80812b0:	f009 f956 	bl	808a560 <_Z16_fetch_usbserialv>
 80812b4:	2120      	movs	r1, #32
 80812b6:	f008 f8eb 	bl	8089490 <_ZN5Print5printEc>
    for (uint8_t i = 0; i < len; i++)
 80812ba:	3401      	adds	r4, #1
 80812bc:	e7ea      	b.n	8081294 <_Z11printPacketPhh+0x10>
        }
    }

    Serial.println();
 80812be:	f009 f94f 	bl	808a560 <_Z16_fetch_usbserialv>
 80812c2:	f008 f8e8 	bl	8089496 <_ZN5Print7printlnEv>
}
 80812c6:	b002      	add	sp, #8
 80812c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80812cc:	0808dd5a 	.word	0x0808dd5a

080812d0 <_Z10sendPacketPhh>:
{
 80812d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80812d2:	4604      	mov	r4, r0
 80812d4:	460d      	mov	r5, r1
 80812d6:	4606      	mov	r6, r0
 80812d8:	180f      	adds	r7, r1, r0
    for (uint8_t i = 0; i < len; i++)
 80812da:	42be      	cmp	r6, r7
 80812dc:	d007      	beq.n	80812ee <_Z10sendPacketPhh+0x1e>
        Serial5.write(packet[i]);
 80812de:	f7ff fc2d 	bl	8080b3c <_Z22__fetch_global_Serial5v>
 80812e2:	6803      	ldr	r3, [r0, #0]
 80812e4:	f816 1b01 	ldrb.w	r1, [r6], #1
 80812e8:	689b      	ldr	r3, [r3, #8]
 80812ea:	4798      	blx	r3
    for (uint8_t i = 0; i < len; i++)
 80812ec:	e7f5      	b.n	80812da <_Z10sendPacketPhh+0xa>
    printPacket(packet, len);
 80812ee:	4629      	mov	r1, r5
 80812f0:	4620      	mov	r0, r4
}
 80812f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    printPacket(packet, len);
 80812f6:	f7ff bfc5 	b.w	8081284 <_Z11printPacketPhh>
	...

080812fc <_Z19enableContinuousGPSv>:
{
 80812fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 80812fe:	4a07      	ldr	r2, [pc, #28]	; (808131c <_Z19enableContinuousGPSv+0x20>)
 8081300:	ab01      	add	r3, sp, #4
 8081302:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 8081306:	6851      	ldr	r1, [r2, #4]
 8081308:	8912      	ldrh	r2, [r2, #8]
 808130a:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 808130c:	210a      	movs	r1, #10
 808130e:	a801      	add	r0, sp, #4
    byte packet[] = {
 8081310:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 8081312:	f7ff ffdd 	bl	80812d0 <_Z10sendPacketPhh>
}
 8081316:	b005      	add	sp, #20
 8081318:	f85d fb04 	ldr.w	pc, [sp], #4
 808131c:	0808fef4 	.word	0x0808fef4

08081320 <_Z17enableLowPowerGPSv>:
{
 8081320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 8081322:	4a07      	ldr	r2, [pc, #28]	; (8081340 <_Z17enableLowPowerGPSv+0x20>)
 8081324:	ab01      	add	r3, sp, #4
 8081326:	f852 0f18 	ldr.w	r0, [r2, #24]!
 808132a:	6851      	ldr	r1, [r2, #4]
 808132c:	8912      	ldrh	r2, [r2, #8]
 808132e:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 8081330:	210a      	movs	r1, #10
 8081332:	a801      	add	r0, sp, #4
    byte packet[] = {
 8081334:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 8081336:	f7ff ffcb 	bl	80812d0 <_Z10sendPacketPhh>
}
 808133a:	b005      	add	sp, #20
 808133c:	f85d fb04 	ldr.w	pc, [sp], #4
 8081340:	0808fef4 	.word	0x0808fef4
 8081344:	00000000 	.word	0x00000000

08081348 <_Z15readTemperaturev>:

float readTemperature(void)
{
 8081348:	b538      	push	{r3, r4, r5, lr}
 808134a:	4b2f      	ldr	r3, [pc, #188]	; (8081408 <_Z15readTemperaturev+0xc0>)
 808134c:	681d      	ldr	r5, [r3, #0]
    float temperature = 0;
    if (hih8120_enabled)
 808134e:	4b2f      	ldr	r3, [pc, #188]	; (808140c <_Z15readTemperaturev+0xc4>)
 8081350:	681b      	ldr	r3, [r3, #0]
 8081352:	b30b      	cbz	r3, 8081398 <_Z15readTemperaturev+0x50>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 8081354:	4b2e      	ldr	r3, [pc, #184]	; (8081410 <_Z15readTemperaturev+0xc8>)
 8081356:	8958      	ldrh	r0, [r3, #10]
 8081358:	f00a fa60 	bl	808b81c <__aeabi_ui2f>
 808135c:	492d      	ldr	r1, [pc, #180]	; (8081414 <_Z15readTemperaturev+0xcc>)
 808135e:	f00a fb69 	bl	808ba34 <__aeabi_fdiv>
 8081362:	492d      	ldr	r1, [pc, #180]	; (8081418 <_Z15readTemperaturev+0xd0>)
 8081364:	f00a fab2 	bl	808b8cc <__aeabi_fmul>
 8081368:	492c      	ldr	r1, [pc, #176]	; (808141c <_Z15readTemperaturev+0xd4>)
 808136a:	f00a f9a5 	bl	808b6b8 <__aeabi_fsub>
 808136e:	4604      	mov	r4, r0
    {
        temperature = hih.temperature();
        if (debugging_enabled)
 8081370:	b125      	cbz	r5, 808137c <_Z15readTemperaturev+0x34>
        {
            Serial.println("Temperature reading from HIH8120");
 8081372:	f009 f8f5 	bl	808a560 <_Z16_fetch_usbserialv>
 8081376:	492a      	ldr	r1, [pc, #168]	; (8081420 <_Z15readTemperaturev+0xd8>)
 8081378:	f008 f899 	bl	80894ae <_ZN5Print7printlnEPKc>
        {
            Serial.println("Temperature reading from BME for Alphasense");
        }
        temperature = bme.temperature;
    }
    temperature *= temp_slope;
 808137c:	4b29      	ldr	r3, [pc, #164]	; (8081424 <_Z15readTemperaturev+0xdc>)
 808137e:	4620      	mov	r0, r4
 8081380:	6819      	ldr	r1, [r3, #0]
 8081382:	f00a faa3 	bl	808b8cc <__aeabi_fmul>
 8081386:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 8081388:	4b27      	ldr	r3, [pc, #156]	; (8081428 <_Z15readTemperaturev+0xe0>)
 808138a:	6818      	ldr	r0, [r3, #0]
 808138c:	f00a fa4a 	bl	808b824 <__aeabi_i2f>
 8081390:	4621      	mov	r1, r4
 8081392:	f00a f993 	bl	808b6bc <__addsf3>
    return temperature;
}
 8081396:	bd38      	pop	{r3, r4, r5, pc}
    else if (new_temperature_sensor_enabled)
 8081398:	4b24      	ldr	r3, [pc, #144]	; (808142c <_Z15readTemperaturev+0xe4>)
 808139a:	681b      	ldr	r3, [r3, #0]
 808139c:	b313      	cbz	r3, 80813e4 <_Z15readTemperaturev+0x9c>
        if (debugging_enabled)
 808139e:	b125      	cbz	r5, 80813aa <_Z15readTemperaturev+0x62>
            Serial.println("Temperature reading from TMP36");
 80813a0:	f009 f8de 	bl	808a560 <_Z16_fetch_usbserialv>
 80813a4:	4922      	ldr	r1, [pc, #136]	; (8081430 <_Z15readTemperaturev+0xe8>)
 80813a6:	f008 f882 	bl	80894ae <_ZN5Print7printlnEPKc>
        temperature = analogRead(A1);
 80813aa:	200b      	movs	r0, #11
 80813ac:	f009 fbb0 	bl	808ab10 <analogRead>
 80813b0:	f00a fa38 	bl	808b824 <__aeabi_i2f>
        temperature *= VOLTS_PER_UNIT;
 80813b4:	f009 fddc 	bl	808af70 <__aeabi_f2d>
 80813b8:	a30f      	add	r3, pc, #60	; (adr r3, 80813f8 <_Z15readTemperaturev+0xb0>)
 80813ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80813be:	f009 fe2f 	bl	808b020 <__aeabi_dmul>
 80813c2:	f00a f925 	bl	808b610 <__aeabi_d2f>
        temperature -= TMP36_OFFSET;
 80813c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80813ca:	f00a f975 	bl	808b6b8 <__aeabi_fsub>
        temperature /= TMP36_VPDC;
 80813ce:	f009 fdcf 	bl	808af70 <__aeabi_f2d>
 80813d2:	a30b      	add	r3, pc, #44	; (adr r3, 8081400 <_Z15readTemperaturev+0xb8>)
 80813d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80813d8:	f009 ff4c 	bl	808b274 <__aeabi_ddiv>
 80813dc:	f00a f918 	bl	808b610 <__aeabi_d2f>
 80813e0:	4604      	mov	r4, r0
 80813e2:	e7cb      	b.n	808137c <_Z15readTemperaturev+0x34>
        if (debugging_enabled)
 80813e4:	b125      	cbz	r5, 80813f0 <_Z15readTemperaturev+0xa8>
            Serial.println("Temperature reading from BME for Alphasense");
 80813e6:	f009 f8bb 	bl	808a560 <_Z16_fetch_usbserialv>
 80813ea:	4912      	ldr	r1, [pc, #72]	; (8081434 <_Z15readTemperaturev+0xec>)
 80813ec:	f008 f85f 	bl	80894ae <_ZN5Print7printlnEPKc>
        temperature = bme.temperature;
 80813f0:	4b11      	ldr	r3, [pc, #68]	; (8081438 <_Z15readTemperaturev+0xf0>)
 80813f2:	681c      	ldr	r4, [r3, #0]
 80813f4:	e7c2      	b.n	808137c <_Z15readTemperaturev+0x34>
 80813f6:	bf00      	nop
 80813f8:	eb1c432d 	.word	0xeb1c432d
 80813fc:	3f4a36e2 	.word	0x3f4a36e2
 8081400:	47ae147b 	.word	0x47ae147b
 8081404:	3f847ae1 	.word	0x3f847ae1
 8081408:	200005e8 	.word	0x200005e8
 808140c:	200006b4 	.word	0x200006b4
 8081410:	200006a8 	.word	0x200006a8
 8081414:	467ff800 	.word	0x467ff800
 8081418:	43250000 	.word	0x43250000
 808141c:	42200000 	.word	0x42200000
 8081420:	0808dd5f 	.word	0x0808dd5f
 8081424:	20000c60 	.word	0x20000c60
 8081428:	20000c64 	.word	0x20000c64
 808142c:	2000074c 	.word	0x2000074c
 8081430:	0808dd80 	.word	0x0808dd80
 8081434:	0808dd9f 	.word	0x0808dd9f
 8081438:	20000564 	.word	0x20000564

0808143c <_Z12readHumidityv>:

float readHumidity(void)
{
 808143c:	b538      	push	{r3, r4, r5, lr}
 808143e:	4b19      	ldr	r3, [pc, #100]	; (80814a4 <_Z12readHumidityv+0x68>)
 8081440:	681d      	ldr	r5, [r3, #0]
    float humidity;
    if (hih8120_enabled)
 8081442:	4b19      	ldr	r3, [pc, #100]	; (80814a8 <_Z12readHumidityv+0x6c>)
 8081444:	681b      	ldr	r3, [r3, #0]
 8081446:	b32b      	cbz	r3, 8081494 <_Z12readHumidityv+0x58>
            return float(raw) / 16382;
 8081448:	4b18      	ldr	r3, [pc, #96]	; (80814ac <_Z12readHumidityv+0x70>)
 808144a:	8918      	ldrh	r0, [r3, #8]
 808144c:	f00a f9e6 	bl	808b81c <__aeabi_ui2f>
 8081450:	4917      	ldr	r1, [pc, #92]	; (80814b0 <_Z12readHumidityv+0x74>)
 8081452:	f00a faef 	bl	808ba34 <__aeabi_fdiv>
    {
        humidity = hih.humidity();
        humidity *= 100;
 8081456:	4917      	ldr	r1, [pc, #92]	; (80814b4 <_Z12readHumidityv+0x78>)
 8081458:	f00a fa38 	bl	808b8cc <__aeabi_fmul>
 808145c:	4604      	mov	r4, r0
        if (debugging_enabled)
 808145e:	b125      	cbz	r5, 808146a <_Z12readHumidityv+0x2e>
        {
            Serial.println("Humidity reading from HIH8120");
 8081460:	f009 f87e 	bl	808a560 <_Z16_fetch_usbserialv>
 8081464:	4914      	ldr	r1, [pc, #80]	; (80814b8 <_Z12readHumidityv+0x7c>)
    else
    {
        humidity = bme.humidity;
        if (debugging_enabled)
        {
            Serial.println("Humidity reading from BME");
 8081466:	f008 f822 	bl	80894ae <_ZN5Print7printlnEPKc>
        }
    }

    humidity *= rh_slope;
 808146a:	4b14      	ldr	r3, [pc, #80]	; (80814bc <_Z12readHumidityv+0x80>)
 808146c:	4620      	mov	r0, r4
 808146e:	6819      	ldr	r1, [r3, #0]
 8081470:	f00a fa2c 	bl	808b8cc <__aeabi_fmul>
 8081474:	4604      	mov	r4, r0
    humidity += rh_zero;       //user input zero offset
 8081476:	4b12      	ldr	r3, [pc, #72]	; (80814c0 <_Z12readHumidityv+0x84>)
 8081478:	6818      	ldr	r0, [r3, #0]
 808147a:	f00a f9d3 	bl	808b824 <__aeabi_i2f>
 808147e:	4621      	mov	r1, r4
 8081480:	f00a f91c 	bl	808b6bc <__addsf3>
    if (humidity > 100)
 8081484:	490b      	ldr	r1, [pc, #44]	; (80814b4 <_Z12readHumidityv+0x78>)
    humidity += rh_zero;       //user input zero offset
 8081486:	4604      	mov	r4, r0
    if (humidity > 100)
 8081488:	f00a fbdc 	bl	808bc44 <__aeabi_fcmpgt>
 808148c:	b100      	cbz	r0, 8081490 <_Z12readHumidityv+0x54>
        humidity = 100;
 808148e:	4c09      	ldr	r4, [pc, #36]	; (80814b4 <_Z12readHumidityv+0x78>)
    return humidity;
}
 8081490:	4620      	mov	r0, r4
 8081492:	bd38      	pop	{r3, r4, r5, pc}
        humidity = bme.humidity;
 8081494:	4b0b      	ldr	r3, [pc, #44]	; (80814c4 <_Z12readHumidityv+0x88>)
 8081496:	689c      	ldr	r4, [r3, #8]
        if (debugging_enabled)
 8081498:	2d00      	cmp	r5, #0
 808149a:	d0e6      	beq.n	808146a <_Z12readHumidityv+0x2e>
            Serial.println("Humidity reading from BME");
 808149c:	f009 f860 	bl	808a560 <_Z16_fetch_usbserialv>
 80814a0:	4909      	ldr	r1, [pc, #36]	; (80814c8 <_Z12readHumidityv+0x8c>)
 80814a2:	e7e0      	b.n	8081466 <_Z12readHumidityv+0x2a>
 80814a4:	200005e8 	.word	0x200005e8
 80814a8:	200006b4 	.word	0x200006b4
 80814ac:	200006a8 	.word	0x200006a8
 80814b0:	467ff800 	.word	0x467ff800
 80814b4:	42c80000 	.word	0x42c80000
 80814b8:	0808ddcb 	.word	0x0808ddcb
 80814bc:	200007a0 	.word	0x200007a0
 80814c0:	200007a4 	.word	0x200007a4
 80814c4:	20000564 	.word	0x20000564
 80814c8:	0808dde9 	.word	0x0808dde9
 80814cc:	00000000 	.word	0x00000000

080814d0 <_Z10readAlpha2v>:
    }
    return alpha1_ppmraw;
}

float readAlpha2(void)
{
 80814d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha2_ppmraw = 0;
    String alpha2_ppmRounded = "";

    if (debugging_enabled)
 80814d4:	4f8e      	ldr	r7, [pc, #568]	; (8081710 <_Z10readAlpha2v+0x240>)
{
 80814d6:	b088      	sub	sp, #32
    String alpha2_ppmRounded = "";
 80814d8:	4668      	mov	r0, sp
 80814da:	498e      	ldr	r1, [pc, #568]	; (8081714 <_Z10readAlpha2v+0x244>)
 80814dc:	f007 fe10 	bl	8089100 <_ZN6StringC1EPKc>
    if (debugging_enabled)
 80814e0:	683a      	ldr	r2, [r7, #0]
 80814e2:	b122      	cbz	r2, 80814ee <_Z10readAlpha2v+0x1e>
    {
        Serial.println("Start of alpha 2 read");
 80814e4:	f009 f83c 	bl	808a560 <_Z16_fetch_usbserialv>
 80814e8:	498b      	ldr	r1, [pc, #556]	; (8081718 <_Z10readAlpha2v+0x248>)
 80814ea:	f007 ffe0 	bl	80894ae <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 80814ee:	4d8b      	ldr	r5, [pc, #556]	; (808171c <_Z10readAlpha2v+0x24c>)
 80814f0:	2100      	movs	r1, #0
 80814f2:	8828      	ldrh	r0, [r5, #0]
 80814f4:	f009 faf3 	bl	808aade <digitalWrite>

    if (Wire.requestFrom(0x4A, 1) == 0)
 80814f8:	f009 fb74 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80814fc:	2201      	movs	r2, #1
 80814fe:	214a      	movs	r1, #74	; 0x4a
 8081500:	f009 f9f5 	bl	808a8ee <_ZN7TwoWire11requestFromEhj>
 8081504:	bb48      	cbnz	r0, 808155a <_Z10readAlpha2v+0x8a>
    {
        Serial.println("Couldn't communicate with LMP91000 2");
 8081506:	f009 f82b 	bl	808a560 <_Z16_fetch_usbserialv>
 808150a:	4985      	ldr	r1, [pc, #532]	; (8081720 <_Z10readAlpha2v+0x250>)
 808150c:	f007 ffcf 	bl	80894ae <_ZN5Print7printlnEPKc>
    float volt_half_Vref = 0;
 8081510:	2400      	movs	r4, #0
            Serial.print("half vref2 ads1");
            Serial.println(volt_half_Vref / 1000);
        }
    }

    if (lmp91000_2.read(LMP91000_STATUS_REG) == 0)
 8081512:	2100      	movs	r1, #0
 8081514:	4883      	ldr	r0, [pc, #524]	; (8081724 <_Z10readAlpha2v+0x254>)
 8081516:	f004 fd4e 	bl	8085fb6 <_ZN8LMP910004readEh>
 808151a:	b930      	cbnz	r0, 808152a <_Z10readAlpha2v+0x5a>
    {
        if (debugging_enabled)
 808151c:	683b      	ldr	r3, [r7, #0]
 808151e:	b123      	cbz	r3, 808152a <_Z10readAlpha2v+0x5a>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 8081520:	f009 f81e 	bl	808a560 <_Z16_fetch_usbserialv>
 8081524:	4980      	ldr	r1, [pc, #512]	; (8081728 <_Z10readAlpha2v+0x258>)
 8081526:	f007 ffc2 	bl	80894ae <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
 808152a:	f009 fb5b 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808152e:	2201      	movs	r2, #1
 8081530:	214a      	movs	r1, #74	; 0x4a
 8081532:	f009 f9dc 	bl	808a8ee <_ZN7TwoWire11requestFromEhj>
 8081536:	2800      	cmp	r0, #0
 8081538:	d139      	bne.n	80815ae <_Z10readAlpha2v+0xde>
    {
        alpha2_ppmRounded = "-99";
 808153a:	4668      	mov	r0, sp
 808153c:	497b      	ldr	r1, [pc, #492]	; (808172c <_Z10readAlpha2v+0x25c>)
 808153e:	f007 fe31 	bl	80891a4 <_ZN6StringaSEPKc>
    float alpha2_ppmraw = 0;
 8081542:	2400      	movs	r4, #0
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
    }

    digitalWrite(lmp91000_2_en, HIGH);  //disable
 8081544:	2101      	movs	r1, #1
 8081546:	8828      	ldrh	r0, [r5, #0]
 8081548:	f009 fac9 	bl	808aade <digitalWrite>
    String alpha2_ppmRounded = "";
 808154c:	4668      	mov	r0, sp
 808154e:	f007 fd8d 	bl	808906c <_ZN6StringD1Ev>

    Serial.print("Volt1 Aux:");
    Serial.print(volt1_aux);
    Serial.println("Volts");*/
    return alpha2_ppmraw;
}
 8081552:	4620      	mov	r0, r4
 8081554:	b008      	add	sp, #32
 8081556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 808155a:	2103      	movs	r1, #3
 808155c:	4874      	ldr	r0, [pc, #464]	; (8081730 <_Z10readAlpha2v+0x260>)
 808155e:	f004 fe71 	bl	8086244 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 8081562:	f00a f95f 	bl	808b824 <__aeabi_i2f>
 8081566:	4b73      	ldr	r3, [pc, #460]	; (8081734 <_Z10readAlpha2v+0x264>)
 8081568:	6819      	ldr	r1, [r3, #0]
 808156a:	f00a f9af 	bl	808b8cc <__aeabi_fmul>
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 808156e:	4972      	ldr	r1, [pc, #456]	; (8081738 <_Z10readAlpha2v+0x268>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081570:	4604      	mov	r4, r0
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8081572:	f00a fa5f 	bl	808ba34 <__aeabi_fdiv>
 8081576:	4606      	mov	r6, r0
 8081578:	f009 fcfa 	bl	808af70 <__aeabi_f2d>
 808157c:	2200      	movs	r2, #0
 808157e:	4b6f      	ldr	r3, [pc, #444]	; (808173c <_Z10readAlpha2v+0x26c>)
 8081580:	f009 fb96 	bl	808acb0 <__aeabi_dsub>
 8081584:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8081588:	2200      	movs	r2, #0
 808158a:	4649      	mov	r1, r9
 808158c:	4b6c      	ldr	r3, [pc, #432]	; (8081740 <_Z10readAlpha2v+0x270>)
 808158e:	f009 ffd7 	bl	808b540 <__aeabi_dcmpgt>
 8081592:	2800      	cmp	r0, #0
 8081594:	d0bd      	beq.n	8081512 <_Z10readAlpha2v+0x42>
            Serial.print("half vref2 ads1");
 8081596:	f008 ffe3 	bl	808a560 <_Z16_fetch_usbserialv>
 808159a:	496a      	ldr	r1, [pc, #424]	; (8081744 <_Z10readAlpha2v+0x274>)
 808159c:	f007 ff74 	bl	8089488 <_ZN5Print5printEPKc>
            Serial.println(volt_half_Vref / 1000);
 80815a0:	f008 ffde 	bl	808a560 <_Z16_fetch_usbserialv>
 80815a4:	2202      	movs	r2, #2
 80815a6:	4631      	mov	r1, r6
 80815a8:	f008 f880 	bl	80896ac <_ZN5Print7printlnEfi>
 80815ac:	e7b1      	b.n	8081512 <_Z10readAlpha2v+0x42>
    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
 80815ae:	2100      	movs	r1, #0
 80815b0:	485c      	ldr	r0, [pc, #368]	; (8081724 <_Z10readAlpha2v+0x254>)
 80815b2:	f004 fd00 	bl	8085fb6 <_ZN8LMP910004readEh>
 80815b6:	2800      	cmp	r0, #0
 80815b8:	d0bf      	beq.n	808153a <_Z10readAlpha2v+0x6a>
 80815ba:	4620      	mov	r0, r4
 80815bc:	495e      	ldr	r1, [pc, #376]	; (8081738 <_Z10readAlpha2v+0x268>)
 80815be:	f00a fa39 	bl	808ba34 <__aeabi_fdiv>
 80815c2:	f009 fcd5 	bl	808af70 <__aeabi_f2d>
 80815c6:	2200      	movs	r2, #0
 80815c8:	4b5c      	ldr	r3, [pc, #368]	; (808173c <_Z10readAlpha2v+0x26c>)
 80815ca:	f009 fb71 	bl	808acb0 <__aeabi_dsub>
 80815ce:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80815d2:	2200      	movs	r2, #0
 80815d4:	4639      	mov	r1, r7
 80815d6:	4b5a      	ldr	r3, [pc, #360]	; (8081740 <_Z10readAlpha2v+0x270>)
 80815d8:	f009 ffb2 	bl	808b540 <__aeabi_dcmpgt>
 80815dc:	4604      	mov	r4, r0
 80815de:	2800      	cmp	r0, #0
 80815e0:	d1ab      	bne.n	808153a <_Z10readAlpha2v+0x6a>
 80815e2:	270a      	movs	r7, #10
 80815e4:	4680      	mov	r8, r0
 80815e6:	4681      	mov	r9, r0
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 80815e8:	4e51      	ldr	r6, [pc, #324]	; (8081730 <_Z10readAlpha2v+0x260>)
 80815ea:	2100      	movs	r1, #0
 80815ec:	4630      	mov	r0, r6
 80815ee:	f004 fe29 	bl	8086244 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80815f2:	2101      	movs	r1, #1
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 80815f4:	4481      	add	r9, r0
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80815f6:	4630      	mov	r0, r6
 80815f8:	f004 fe24 	bl	8086244 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 80815fc:	2102      	movs	r1, #2
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80815fe:	4480      	add	r8, r0
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081600:	4630      	mov	r0, r6
 8081602:	f004 fe1f 	bl	8086244 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081606:	2103      	movs	r1, #3
 8081608:	4630      	mov	r0, r6
 808160a:	f004 fe1b 	bl	8086244 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 808160e:	3f01      	subs	r7, #1
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081610:	4404      	add	r4, r0
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081612:	d1ea      	bne.n	80815ea <_Z10readAlpha2v+0x11a>
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8081614:	f04f 0a0a 	mov.w	sl, #10
        volt0_gas = A0_gas * ads_bitmv;
 8081618:	4b46      	ldr	r3, [pc, #280]	; (8081734 <_Z10readAlpha2v+0x264>)
        volt_half_Vref = half_Vref * ads_bitmv;
 808161a:	fbb4 f0fa 	udiv	r0, r4, sl
        volt0_gas = A0_gas * ads_bitmv;
 808161e:	681f      	ldr	r7, [r3, #0]
        volt_half_Vref = half_Vref * ads_bitmv;
 8081620:	f00a f900 	bl	808b824 <__aeabi_i2f>
 8081624:	4639      	mov	r1, r7
 8081626:	f00a f951 	bl	808b8cc <__aeabi_fmul>
 808162a:	4604      	mov	r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 808162c:	fbb9 f0fa 	udiv	r0, r9, sl
 8081630:	f00a f8f8 	bl	808b824 <__aeabi_i2f>
 8081634:	4639      	mov	r1, r7
 8081636:	f00a f949 	bl	808b8cc <__aeabi_fmul>
 808163a:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 808163c:	4620      	mov	r0, r4
 808163e:	f00a f83b 	bl	808b6b8 <__aeabi_fsub>
 8081642:	4941      	ldr	r1, [pc, #260]	; (8081748 <_Z10readAlpha2v+0x278>)
 8081644:	f00a f9f6 	bl	808ba34 <__aeabi_fdiv>
 8081648:	4606      	mov	r6, r0
        volt1_aux = A1_aux * ads_bitmv;
 808164a:	fbb8 f0fa 	udiv	r0, r8, sl
 808164e:	f00a f8e9 	bl	808b824 <__aeabi_i2f>
 8081652:	4639      	mov	r1, r7
 8081654:	f00a f93a 	bl	808b8cc <__aeabi_fmul>
 8081658:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 808165a:	4620      	mov	r0, r4
 808165c:	f00a f82c 	bl	808b6b8 <__aeabi_fsub>
 8081660:	493a      	ldr	r1, [pc, #232]	; (808174c <_Z10readAlpha2v+0x27c>)
 8081662:	f00a f9e7 	bl	808ba34 <__aeabi_fdiv>
 8081666:	4604      	mov	r4, r0
        if (readTemperature() <= 15)
 8081668:	f7ff fe6e 	bl	8081348 <_Z15readTemperaturev>
 808166c:	4938      	ldr	r1, [pc, #224]	; (8081750 <_Z10readAlpha2v+0x280>)
 808166e:	f00a fad5 	bl	808bc1c <__aeabi_fcmple>
 8081672:	b1d0      	cbz	r0, 80816aa <_Z10readAlpha2v+0x1da>
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 8081674:	4621      	mov	r1, r4
 8081676:	4630      	mov	r0, r6
 8081678:	f00a f81e 	bl	808b6b8 <__aeabi_fsub>
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 808167c:	f009 fc78 	bl	808af70 <__aeabi_f2d>
 8081680:	a31f      	add	r3, pc, #124	; (adr r3, 8081700 <_Z10readAlpha2v+0x230>)
 8081682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081686:	f009 fdf5 	bl	808b274 <__aeabi_ddiv>
 808168a:	f009 ffc1 	bl	808b610 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 808168e:	2202      	movs	r2, #2
 8081690:	4601      	mov	r1, r0
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081692:	4604      	mov	r4, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081694:	a804      	add	r0, sp, #16
 8081696:	f007 fdcd 	bl	8089234 <_ZN6StringC1Efi>
 808169a:	4668      	mov	r0, sp
 808169c:	a904      	add	r1, sp, #16
 808169e:	f007 fd79 	bl	8089194 <_ZN6StringaSEOS_>
 80816a2:	a804      	add	r0, sp, #16
 80816a4:	f007 fce2 	bl	808906c <_ZN6StringD1Ev>
 80816a8:	e74c      	b.n	8081544 <_Z10readAlpha2v+0x74>
        else if (readTemperature() <= 25)
 80816aa:	f7ff fe4d 	bl	8081348 <_Z15readTemperaturev>
 80816ae:	4929      	ldr	r1, [pc, #164]	; (8081754 <_Z10readAlpha2v+0x284>)
 80816b0:	f00a fab4 	bl	808bc1c <__aeabi_fcmple>
 80816b4:	b120      	cbz	r0, 80816c0 <_Z10readAlpha2v+0x1f0>
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 80816b6:	4621      	mov	r1, r4
 80816b8:	4630      	mov	r0, r6
 80816ba:	f009 ffff 	bl	808b6bc <__addsf3>
 80816be:	e7dd      	b.n	808167c <_Z10readAlpha2v+0x1ac>
        else if (readTemperature() > 25)
 80816c0:	f7ff fe42 	bl	8081348 <_Z15readTemperaturev>
 80816c4:	4923      	ldr	r1, [pc, #140]	; (8081754 <_Z10readAlpha2v+0x284>)
 80816c6:	f00a fabd 	bl	808bc44 <__aeabi_fcmpgt>
 80816ca:	b1a8      	cbz	r0, 80816f8 <_Z10readAlpha2v+0x228>
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 80816cc:	4620      	mov	r0, r4
 80816ce:	f009 fc4f 	bl	808af70 <__aeabi_f2d>
 80816d2:	a30d      	add	r3, pc, #52	; (adr r3, 8081708 <_Z10readAlpha2v+0x238>)
 80816d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80816d8:	f009 fca2 	bl	808b020 <__aeabi_dmul>
 80816dc:	4680      	mov	r8, r0
 80816de:	4630      	mov	r0, r6
 80816e0:	4689      	mov	r9, r1
 80816e2:	f009 fc45 	bl	808af70 <__aeabi_f2d>
 80816e6:	4602      	mov	r2, r0
 80816e8:	460b      	mov	r3, r1
 80816ea:	4640      	mov	r0, r8
 80816ec:	4649      	mov	r1, r9
 80816ee:	f009 fae1 	bl	808acb4 <__adddf3>
 80816f2:	f009 ff8d 	bl	808b610 <__aeabi_d2f>
 80816f6:	e7c1      	b.n	808167c <_Z10readAlpha2v+0x1ac>
    float correctedCurrent = 0;
 80816f8:	2000      	movs	r0, #0
 80816fa:	e7bf      	b.n	808167c <_Z10readAlpha2v+0x1ac>
 80816fc:	f3af 8000 	nop.w
 8081700:	d4fdf3b6 	.word	0xd4fdf3b6
 8081704:	3fd6e978 	.word	0x3fd6e978
 8081708:	851eb852 	.word	0x851eb852
 808170c:	3fe851eb 	.word	0x3fe851eb
 8081710:	200005e8 	.word	0x200005e8
 8081714:	08090075 	.word	0x08090075
 8081718:	0808de03 	.word	0x0808de03
 808171c:	200000c4 	.word	0x200000c4
 8081720:	0808de19 	.word	0x0808de19
 8081724:	200006ba 	.word	0x200006ba
 8081728:	0808de4e 	.word	0x0808de4e
 808172c:	0808de75 	.word	0x0808de75
 8081730:	20000556 	.word	0x20000556
 8081734:	20000084 	.word	0x20000084
 8081738:	447a0000 	.word	0x447a0000
 808173c:	3ff40000 	.word	0x3ff40000
 8081740:	3fe00000 	.word	0x3fe00000
 8081744:	0808de3e 	.word	0x0808de3e
 8081748:	c2f00000 	.word	0xc2f00000
 808174c:	c3160000 	.word	0xc3160000
 8081750:	41700000 	.word	0x41700000
 8081754:	41c80000 	.word	0x41c80000

08081758 <_Z12writeLogFile6String>:

void writeLogFile(String data)
{
 8081758:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 808175a:	491e      	ldr	r1, [pc, #120]	; (80817d4 <_Z12writeLogFile6String+0x7c>)
 808175c:	4604      	mov	r4, r0
 808175e:	b085      	sub	sp, #20
 8081760:	2302      	movs	r3, #2
 8081762:	220c      	movs	r2, #12
 8081764:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8081768:	f7ff fa24 	bl	8080bb4 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS))
 808176c:	b360      	cbz	r0, 80817c8 <_Z12writeLogFile6String+0x70>
    {
        Serial.println("Writing data to log file.");
 808176e:	f008 fef7 	bl	808a560 <_Z16_fetch_usbserialv>
 8081772:	4919      	ldr	r1, [pc, #100]	; (80817d8 <_Z12writeLogFile6String+0x80>)
 8081774:	f007 fe9b 	bl	80894ae <_ZN5Print7printlnEPKc>
    return open(m_cwd, path, oflag);
 8081778:	4a18      	ldr	r2, [pc, #96]	; (80817dc <_Z12writeLogFile6String+0x84>)
 808177a:	4919      	ldr	r1, [pc, #100]	; (80817e0 <_Z12writeLogFile6String+0x88>)
        log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
        if (log_file_started == 0)
 808177c:	4d19      	ldr	r5, [pc, #100]	; (80817e4 <_Z12writeLogFile6String+0x8c>)
 808177e:	2346      	movs	r3, #70	; 0x46
 8081780:	6812      	ldr	r2, [r2, #0]
 8081782:	6809      	ldr	r1, [r1, #0]
 8081784:	4818      	ldr	r0, [pc, #96]	; (80817e8 <_Z12writeLogFile6String+0x90>)
 8081786:	f005 ffa0 	bl	80876ca <_ZN7FatFile4openEPS_PKch>
 808178a:	682b      	ldr	r3, [r5, #0]
 808178c:	b99b      	cbnz	r3, 80817b6 <_Z12writeLogFile6String+0x5e>
        {
            log_file.println("File Start timestamp: ");
 808178e:	4917      	ldr	r1, [pc, #92]	; (80817ec <_Z12writeLogFile6String+0x94>)
 8081790:	4817      	ldr	r0, [pc, #92]	; (80817f0 <_Z12writeLogFile6String+0x98>)
 8081792:	f007 fe8c 	bl	80894ae <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8081796:	f008 f99e 	bl	8089ad6 <_ZN9TimeClass3nowEv>
 808179a:	17c3      	asrs	r3, r0, #31
 808179c:	4602      	mov	r2, r0
 808179e:	4668      	mov	r0, sp
 80817a0:	f008 f896 	bl	80898d0 <_ZN9TimeClass7timeStrEx>
            log_file.println(Time.timeStr());
 80817a4:	9900      	ldr	r1, [sp, #0]
 80817a6:	4812      	ldr	r0, [pc, #72]	; (80817f0 <_Z12writeLogFile6String+0x98>)
 80817a8:	f007 fe81 	bl	80894ae <_ZN5Print7printlnEPKc>
 80817ac:	4668      	mov	r0, sp
 80817ae:	f007 fc5d 	bl	808906c <_ZN6StringD1Ev>
            log_file_started = 1;
 80817b2:	2301      	movs	r3, #1
 80817b4:	602b      	str	r3, [r5, #0]
        }
        log_file.println(data);
 80817b6:	6821      	ldr	r1, [r4, #0]
 80817b8:	480d      	ldr	r0, [pc, #52]	; (80817f0 <_Z12writeLogFile6String+0x98>)
 80817ba:	f007 fe78 	bl	80894ae <_ZN5Print7printlnEPKc>

        log_file.close();
 80817be:	480a      	ldr	r0, [pc, #40]	; (80817e8 <_Z12writeLogFile6String+0x90>)
 80817c0:	f005 ff7c 	bl	80876bc <_ZN7FatFile5closeEv>
    }
    else
    {
        Serial.println("Unable to write to log file");
    }
}
 80817c4:	b005      	add	sp, #20
 80817c6:	bd30      	pop	{r4, r5, pc}
        Serial.println("Unable to write to log file");
 80817c8:	f008 feca 	bl	808a560 <_Z16_fetch_usbserialv>
 80817cc:	4909      	ldr	r1, [pc, #36]	; (80817f4 <_Z12writeLogFile6String+0x9c>)
 80817ce:	f007 fe6e 	bl	80894ae <_ZN5Print7printlnEPKc>
}
 80817d2:	e7f7      	b.n	80817c4 <_Z12writeLogFile6String+0x6c>
 80817d4:	20000c1c 	.word	0x20000c1c
 80817d8:	0808de79 	.word	0x0808de79
 80817dc:	20000700 	.word	0x20000700
 80817e0:	20000cbc 	.word	0x20000cbc
 80817e4:	2000073c 	.word	0x2000073c
 80817e8:	20000718 	.word	0x20000718
 80817ec:	0808de93 	.word	0x0808de93
 80817f0:	20000710 	.word	0x20000710
 80817f4:	0808deaa 	.word	0x0808deaa

080817f8 <_Z13readGpsStreamv>:
{
 80817f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80817fc:	b08c      	sub	sp, #48	; 0x30
    String gps_sentence = "init";
 80817fe:	4668      	mov	r0, sp
 8081800:	49b9      	ldr	r1, [pc, #740]	; (8081ae8 <_Z13readGpsStreamv+0x2f0>)
 8081802:	f007 fc7d 	bl	8089100 <_ZN6StringC1EPKc>
        if (prefix_string.equals("GGA")) 
 8081806:	4fb9      	ldr	r7, [pc, #740]	; (8081aec <_Z13readGpsStreamv+0x2f4>)
        else if (gps_sentence.equals("init")) 
 8081808:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8081ae8 <_Z13readGpsStreamv+0x2f0>
            Serial.println("Error reading GPS");
 808180c:	4eb8      	ldr	r6, [pc, #736]	; (8081af0 <_Z13readGpsStreamv+0x2f8>)
        gps_sentence = Serial5.readStringUntil('\r');
 808180e:	f7ff f995 	bl	8080b3c <_Z22__fetch_global_Serial5v>
 8081812:	220d      	movs	r2, #13
 8081814:	4601      	mov	r1, r0
 8081816:	a808      	add	r0, sp, #32
 8081818:	f007 ffb2 	bl	8089780 <_ZN6Stream15readStringUntilEc>
 808181c:	a908      	add	r1, sp, #32
 808181e:	4668      	mov	r0, sp
 8081820:	f007 fcb8 	bl	8089194 <_ZN6StringaSEOS_>
 8081824:	a808      	add	r0, sp, #32
 8081826:	f007 fc21 	bl	808906c <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4, 7);
 808182a:	2307      	movs	r3, #7
 808182c:	2204      	movs	r2, #4
 808182e:	4669      	mov	r1, sp
 8081830:	a804      	add	r0, sp, #16
 8081832:	f007 fdb9 	bl	80893a8 <_ZNK6String9substringEjj>
        if (prefix_string.equals("GGA")) 
 8081836:	4639      	mov	r1, r7
 8081838:	a804      	add	r0, sp, #16
 808183a:	f007 fd7f 	bl	808933c <_ZNK6String6equalsEPKc>
 808183e:	4605      	mov	r5, r0
 8081840:	bb68      	cbnz	r0, 808189e <_Z13readGpsStreamv+0xa6>
        else if (gps_sentence.equals("init")) 
 8081842:	4641      	mov	r1, r8
 8081844:	4668      	mov	r0, sp
 8081846:	f007 fd79 	bl	808933c <_ZNK6String6equalsEPKc>
 808184a:	4604      	mov	r4, r0
 808184c:	b350      	cbz	r0, 80818a4 <_Z13readGpsStreamv+0xac>
            Serial.println("Error reading GPS");
 808184e:	f008 fe87 	bl	808a560 <_Z16_fetch_usbserialv>
 8081852:	4631      	mov	r1, r6
 8081854:	f007 fe2b 	bl	80894ae <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081858:	4631      	mov	r1, r6
 808185a:	a808      	add	r0, sp, #32
 808185c:	f007 fc50 	bl	8089100 <_ZN6StringC1EPKc>
 8081860:	a808      	add	r0, sp, #32
 8081862:	f7ff ff79 	bl	8081758 <_Z12writeLogFile6String>
 8081866:	a808      	add	r0, sp, #32
 8081868:	f007 fc00 	bl	808906c <_ZN6StringD1Ev>
            error = 1;
 808186c:	2401      	movs	r4, #1
        String prefix_string = gps_sentence.substring(4, 7);
 808186e:	a804      	add	r0, sp, #16
 8081870:	f007 fbfc 	bl	808906c <_ZN6StringD1Ev>
    while (!stringFound && !error) 
 8081874:	b15d      	cbz	r5, 808188e <_Z13readGpsStreamv+0x96>
        String tempStr;
 8081876:	f04f 0800 	mov.w	r8, #0
 808187a:	499e      	ldr	r1, [pc, #632]	; (8081af4 <_Z13readGpsStreamv+0x2fc>)
 808187c:	a804      	add	r0, sp, #16
 808187e:	f007 fc3f 	bl	8089100 <_ZN6StringC1EPKc>
        comma_counter = 0;
 8081882:	4647      	mov	r7, r8
                    Serial.printf("BAD index in readGpsStream\n");
 8081884:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8081b10 <_Z13readGpsStreamv+0x318>
                        gps.set_horizontalDilution(tempStr);
 8081888:	4e9b      	ldr	r6, [pc, #620]	; (8081af8 <_Z13readGpsStreamv+0x300>)
                        status_word.status_int &= 0xFFF3;
 808188a:	4d9c      	ldr	r5, [pc, #624]	; (8081afc <_Z13readGpsStreamv+0x304>)
 808188c:	e032      	b.n	80818f4 <_Z13readGpsStreamv+0xfc>
    while (!stringFound && !error) 
 808188e:	2c00      	cmp	r4, #0
 8081890:	d0bd      	beq.n	808180e <_Z13readGpsStreamv+0x16>
    String gps_sentence = "init";
 8081892:	4668      	mov	r0, sp
 8081894:	f007 fbea 	bl	808906c <_ZN6StringD1Ev>
}
 8081898:	b00c      	add	sp, #48	; 0x30
 808189a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808189e:	2400      	movs	r4, #0
            stringFound = 1;
 80818a0:	2501      	movs	r5, #1
 80818a2:	e7e4      	b.n	808186e <_Z13readGpsStreamv+0x76>
 80818a4:	4605      	mov	r5, r0
 80818a6:	e7e2      	b.n	808186e <_Z13readGpsStreamv+0x76>
                    if (gps_sentence.charAt(a + 1) != ',')
 80818a8:	f104 0a01 	add.w	sl, r4, #1
 80818ac:	4651      	mov	r1, sl
 80818ae:	4668      	mov	r0, sp
 80818b0:	f007 fd5f 	bl	8089372 <_ZNK6String6charAtEj>
 80818b4:	282c      	cmp	r0, #44	; 0x2c
 80818b6:	d01a      	beq.n	80818ee <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 80818b8:	f104 030b 	add.w	r3, r4, #11
 80818bc:	4652      	mov	r2, sl
 80818be:	4669      	mov	r1, sp
 80818c0:	a808      	add	r0, sp, #32
 80818c2:	f007 fd71 	bl	80893a8 <_ZNK6String9substringEjj>
 80818c6:	a908      	add	r1, sp, #32
 80818c8:	a804      	add	r0, sp, #16
 80818ca:	f007 fc63 	bl	8089194 <_ZN6StringaSEOS_>
 80818ce:	a808      	add	r0, sp, #32
 80818d0:	f007 fbcc 	bl	808906c <_ZN6StringD1Ev>
                        if (debugging_enabled)
 80818d4:	4b8a      	ldr	r3, [pc, #552]	; (8081b00 <_Z13readGpsStreamv+0x308>)
 80818d6:	681b      	ldr	r3, [r3, #0]
 80818d8:	b14b      	cbz	r3, 80818ee <_Z13readGpsStreamv+0xf6>
                            Serial.print("GPS utc string: ");
 80818da:	f008 fe41 	bl	808a560 <_Z16_fetch_usbserialv>
 80818de:	4989      	ldr	r1, [pc, #548]	; (8081b04 <_Z13readGpsStreamv+0x30c>)
 80818e0:	f007 fdd2 	bl	8089488 <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 80818e4:	f008 fe3c 	bl	808a560 <_Z16_fetch_usbserialv>
 80818e8:	9904      	ldr	r1, [sp, #16]
 80818ea:	f007 fde0 	bl	80894ae <_ZN5Print7printlnEPKc>
                comma_counter++;
 80818ee:	3701      	adds	r7, #1
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 80818f0:	f108 0801 	add.w	r8, r8, #1
 80818f4:	9b02      	ldr	r3, [sp, #8]
 80818f6:	fa1f f488 	uxth.w	r4, r8
 80818fa:	42a3      	cmp	r3, r4
 80818fc:	f240 80f0 	bls.w	8081ae0 <_Z13readGpsStreamv+0x2e8>
            if (gps_sentence.charAt(a) == ',')
 8081900:	4621      	mov	r1, r4
 8081902:	4668      	mov	r0, sp
 8081904:	f007 fd35 	bl	8089372 <_ZNK6String6charAtEj>
 8081908:	282c      	cmp	r0, #44	; 0x2c
 808190a:	d1f1      	bne.n	80818f0 <_Z13readGpsStreamv+0xf8>
                switch (comma_counter)
 808190c:	2f07      	cmp	r7, #7
 808190e:	f200 80e1 	bhi.w	8081ad4 <_Z13readGpsStreamv+0x2dc>
 8081912:	a301      	add	r3, pc, #4	; (adr r3, 8081918 <_Z13readGpsStreamv+0x120>)
 8081914:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8081918:	080818a9 	.word	0x080818a9
 808191c:	08081939 	.word	0x08081939
 8081920:	08081ad5 	.word	0x08081ad5
 8081924:	080819ab 	.word	0x080819ab
 8081928:	08081ad5 	.word	0x08081ad5
 808192c:	08081ad5 	.word	0x08081ad5
 8081930:	08081a15 	.word	0x08081a15
 8081934:	08081a53 	.word	0x08081a53
                    if (gps_sentence.charAt(a + 1) != ',')
 8081938:	f104 0a01 	add.w	sl, r4, #1
 808193c:	4651      	mov	r1, sl
 808193e:	4668      	mov	r0, sp
 8081940:	f007 fd17 	bl	8089372 <_ZNK6String6charAtEj>
 8081944:	282c      	cmp	r0, #44	; 0x2c
 8081946:	d0d2      	beq.n	80818ee <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 8081948:	f104 030a 	add.w	r3, r4, #10
 808194c:	4652      	mov	r2, sl
 808194e:	4669      	mov	r1, sp
 8081950:	a808      	add	r0, sp, #32
 8081952:	f007 fd29 	bl	80893a8 <_ZNK6String9substringEjj>
 8081956:	a908      	add	r1, sp, #32
 8081958:	a804      	add	r0, sp, #16
 808195a:	f007 fc1b 	bl	8089194 <_ZN6StringaSEOS_>
 808195e:	a808      	add	r0, sp, #32
 8081960:	f007 fb84 	bl	808906c <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081964:	4b66      	ldr	r3, [pc, #408]	; (8081b00 <_Z13readGpsStreamv+0x308>)
 8081966:	681b      	ldr	r3, [r3, #0]
 8081968:	b14b      	cbz	r3, 808197e <_Z13readGpsStreamv+0x186>
                            Serial.print("Latitude string: ");
 808196a:	f008 fdf9 	bl	808a560 <_Z16_fetch_usbserialv>
 808196e:	4966      	ldr	r1, [pc, #408]	; (8081b08 <_Z13readGpsStreamv+0x310>)
 8081970:	f007 fd8a 	bl	8089488 <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081974:	f008 fdf4 	bl	808a560 <_Z16_fetch_usbserialv>
 8081978:	9904      	ldr	r1, [sp, #16]
 808197a:	f007 fd85 	bl	8089488 <_ZN5Print5printEPKc>
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 808197e:	a904      	add	r1, sp, #16
 8081980:	a808      	add	r0, sp, #32
 8081982:	f007 fbfc 	bl	808917e <_ZN6StringC1ERKS_>
 8081986:	f104 010c 	add.w	r1, r4, #12
 808198a:	4668      	mov	r0, sp
 808198c:	f007 fcf1 	bl	8089372 <_ZNK6String6charAtEj>
 8081990:	a908      	add	r1, sp, #32
 8081992:	4602      	mov	r2, r0
 8081994:	4630      	mov	r0, r6
 8081996:	f004 fc7f 	bl	8086298 <_ZN3GPS15set_lat_decimalE6Stringc>
 808199a:	a808      	add	r0, sp, #32
 808199c:	f007 fb66 	bl	808906c <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 80819a0:	882b      	ldrh	r3, [r5, #0]
 80819a2:	f023 0308 	bic.w	r3, r3, #8
                            status_word.status_int |= 0x000C;
 80819a6:	802b      	strh	r3, [r5, #0]
 80819a8:	e7a1      	b.n	80818ee <_Z13readGpsStreamv+0xf6>
                    if (gps_sentence.charAt(a + 1) != ',')
 80819aa:	f104 0a01 	add.w	sl, r4, #1
 80819ae:	4651      	mov	r1, sl
 80819b0:	4668      	mov	r0, sp
 80819b2:	f007 fcde 	bl	8089372 <_ZNK6String6charAtEj>
 80819b6:	282c      	cmp	r0, #44	; 0x2c
 80819b8:	d099      	beq.n	80818ee <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 80819ba:	f104 030b 	add.w	r3, r4, #11
 80819be:	4652      	mov	r2, sl
 80819c0:	4669      	mov	r1, sp
 80819c2:	a808      	add	r0, sp, #32
 80819c4:	f007 fcf0 	bl	80893a8 <_ZNK6String9substringEjj>
 80819c8:	a908      	add	r1, sp, #32
 80819ca:	a804      	add	r0, sp, #16
 80819cc:	f007 fbe2 	bl	8089194 <_ZN6StringaSEOS_>
 80819d0:	a808      	add	r0, sp, #32
 80819d2:	f007 fb4b 	bl	808906c <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 80819d6:	4b4a      	ldr	r3, [pc, #296]	; (8081b00 <_Z13readGpsStreamv+0x308>)
 80819d8:	681b      	ldr	r3, [r3, #0]
 80819da:	b14b      	cbz	r3, 80819f0 <_Z13readGpsStreamv+0x1f8>
                            Serial.print("longitude string: ");
 80819dc:	f008 fdc0 	bl	808a560 <_Z16_fetch_usbserialv>
 80819e0:	494a      	ldr	r1, [pc, #296]	; (8081b0c <_Z13readGpsStreamv+0x314>)
 80819e2:	f007 fd51 	bl	8089488 <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 80819e6:	f008 fdbb 	bl	808a560 <_Z16_fetch_usbserialv>
 80819ea:	9904      	ldr	r1, [sp, #16]
 80819ec:	f007 fd4c 	bl	8089488 <_ZN5Print5printEPKc>
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 80819f0:	a904      	add	r1, sp, #16
 80819f2:	a808      	add	r0, sp, #32
 80819f4:	f007 fbc3 	bl	808917e <_ZN6StringC1ERKS_>
 80819f8:	f104 010d 	add.w	r1, r4, #13
 80819fc:	4668      	mov	r0, sp
 80819fe:	f007 fcb8 	bl	8089372 <_ZNK6String6charAtEj>
 8081a02:	a908      	add	r1, sp, #32
 8081a04:	4602      	mov	r2, r0
 8081a06:	4630      	mov	r0, r6
 8081a08:	f004 fc8e 	bl	8086328 <_ZN3GPS16set_long_decimalE6Stringc>
                        gps.set_satellites(tempStr);
 8081a0c:	a808      	add	r0, sp, #32
 8081a0e:	f007 fb2d 	bl	808906c <_ZN6StringD1Ev>
 8081a12:	e76c      	b.n	80818ee <_Z13readGpsStreamv+0xf6>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081a14:	f104 0a01 	add.w	sl, r4, #1
 8081a18:	4651      	mov	r1, sl
 8081a1a:	4668      	mov	r0, sp
 8081a1c:	f007 fca9 	bl	8089372 <_ZNK6String6charAtEj>
 8081a20:	282c      	cmp	r0, #44	; 0x2c
 8081a22:	f43f af64 	beq.w	80818ee <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081a26:	4652      	mov	r2, sl
 8081a28:	1ce3      	adds	r3, r4, #3
 8081a2a:	4669      	mov	r1, sp
 8081a2c:	a808      	add	r0, sp, #32
 8081a2e:	f007 fcbb 	bl	80893a8 <_ZNK6String9substringEjj>
 8081a32:	a908      	add	r1, sp, #32
 8081a34:	a804      	add	r0, sp, #16
 8081a36:	f007 fbad 	bl	8089194 <_ZN6StringaSEOS_>
 8081a3a:	a808      	add	r0, sp, #32
 8081a3c:	f007 fb16 	bl	808906c <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 8081a40:	a904      	add	r1, sp, #16
 8081a42:	a808      	add	r0, sp, #32
 8081a44:	f007 fb9b 	bl	808917e <_ZN6StringC1ERKS_>
 8081a48:	4630      	mov	r0, r6
 8081a4a:	a908      	add	r1, sp, #32
 8081a4c:	f004 fcb2 	bl	80863b4 <_ZN3GPS14set_satellitesE6String>
 8081a50:	e7dc      	b.n	8081a0c <_Z13readGpsStreamv+0x214>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081a52:	f104 0a01 	add.w	sl, r4, #1
 8081a56:	4651      	mov	r1, sl
 8081a58:	4668      	mov	r0, sp
 8081a5a:	f007 fc8a 	bl	8089372 <_ZNK6String6charAtEj>
 8081a5e:	282c      	cmp	r0, #44	; 0x2c
 8081a60:	f43f af45 	beq.w	80818ee <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081a64:	4652      	mov	r2, sl
 8081a66:	1ce3      	adds	r3, r4, #3
 8081a68:	4669      	mov	r1, sp
 8081a6a:	a808      	add	r0, sp, #32
 8081a6c:	f007 fc9c 	bl	80893a8 <_ZNK6String9substringEjj>
 8081a70:	a908      	add	r1, sp, #32
 8081a72:	a804      	add	r0, sp, #16
 8081a74:	f007 fb8e 	bl	8089194 <_ZN6StringaSEOS_>
 8081a78:	a808      	add	r0, sp, #32
 8081a7a:	f007 faf7 	bl	808906c <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 8081a7e:	a904      	add	r1, sp, #16
 8081a80:	a808      	add	r0, sp, #32
 8081a82:	f007 fb7c 	bl	808917e <_ZN6StringC1ERKS_>
 8081a86:	a908      	add	r1, sp, #32
 8081a88:	4630      	mov	r0, r6
 8081a8a:	f004 fc9b 	bl	80863c4 <_ZN3GPS22set_horizontalDilutionE6String>
 8081a8e:	a808      	add	r0, sp, #32
 8081a90:	f007 faec 	bl	808906c <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081a94:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081a96:	4630      	mov	r0, r6
                        status_word.status_int &= 0xFFF3;
 8081a98:	f023 030c 	bic.w	r3, r3, #12
 8081a9c:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081a9e:	f004 fca7 	bl	80863f0 <_ZN3GPS22get_horizontalDilutionEv>
 8081aa2:	2801      	cmp	r0, #1
 8081aa4:	dc03      	bgt.n	8081aae <_Z13readGpsStreamv+0x2b6>
                            status_word.status_int |= 0x000C;
 8081aa6:	882b      	ldrh	r3, [r5, #0]
 8081aa8:	f043 030c 	orr.w	r3, r3, #12
 8081aac:	e77b      	b.n	80819a6 <_Z13readGpsStreamv+0x1ae>
                        else if (gps.get_horizontalDilution() < 5)
 8081aae:	4630      	mov	r0, r6
 8081ab0:	f004 fc9e 	bl	80863f0 <_ZN3GPS22get_horizontalDilutionEv>
 8081ab4:	2804      	cmp	r0, #4
 8081ab6:	dc03      	bgt.n	8081ac0 <_Z13readGpsStreamv+0x2c8>
                            status_word.status_int |= 0x0008;
 8081ab8:	882b      	ldrh	r3, [r5, #0]
 8081aba:	f043 0308 	orr.w	r3, r3, #8
 8081abe:	e772      	b.n	80819a6 <_Z13readGpsStreamv+0x1ae>
                        else if (gps.get_horizontalDilution() < 20)
 8081ac0:	4630      	mov	r0, r6
 8081ac2:	f004 fc95 	bl	80863f0 <_ZN3GPS22get_horizontalDilutionEv>
 8081ac6:	2813      	cmp	r0, #19
 8081ac8:	f73f af11 	bgt.w	80818ee <_Z13readGpsStreamv+0xf6>
                            status_word.status_int |= 0x0004;
 8081acc:	882b      	ldrh	r3, [r5, #0]
 8081ace:	f043 0304 	orr.w	r3, r3, #4
 8081ad2:	e768      	b.n	80819a6 <_Z13readGpsStreamv+0x1ae>
                    Serial.printf("BAD index in readGpsStream\n");
 8081ad4:	f008 fd44 	bl	808a560 <_Z16_fetch_usbserialv>
 8081ad8:	4649      	mov	r1, r9
 8081ada:	f7fe ffc1 	bl	8080a60 <_ZN5Print6printfEPKcz>
                    break;
 8081ade:	e706      	b.n	80818ee <_Z13readGpsStreamv+0xf6>
        String tempStr;
 8081ae0:	a804      	add	r0, sp, #16
 8081ae2:	f007 fac3 	bl	808906c <_ZN6StringD1Ev>
 8081ae6:	e6d4      	b.n	8081892 <_Z13readGpsStreamv+0x9a>
 8081ae8:	0808dec6 	.word	0x0808dec6
 8081aec:	0808decb 	.word	0x0808decb
 8081af0:	0808decf 	.word	0x0808decf
 8081af4:	08090075 	.word	0x08090075
 8081af8:	20000670 	.word	0x20000670
 8081afc:	20000c48 	.word	0x20000c48
 8081b00:	200005e8 	.word	0x200005e8
 8081b04:	0808dee1 	.word	0x0808dee1
 8081b08:	0808def2 	.word	0x0808def2
 8081b0c:	0808df04 	.word	0x0808df04
 8081b10:	0808df17 	.word	0x0808df17

08081b14 <_Z17readGpsStreamDatev>:
{
 8081b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081b18:	b090      	sub	sp, #64	; 0x40
    String gps_sentence = "init";
 8081b1a:	49b6      	ldr	r1, [pc, #728]	; (8081df4 <_Z17readGpsStreamDatev+0x2e0>)
 8081b1c:	4668      	mov	r0, sp
 8081b1e:	f007 faef 	bl	8089100 <_ZN6StringC1EPKc>
    String prefix_string;
 8081b22:	49b5      	ldr	r1, [pc, #724]	; (8081df8 <_Z17readGpsStreamDatev+0x2e4>)
 8081b24:	a804      	add	r0, sp, #16
 8081b26:	f007 faeb 	bl	8089100 <_ZN6StringC1EPKc>
        if (prefix_string.equals("RMC"))
 8081b2a:	4db4      	ldr	r5, [pc, #720]	; (8081dfc <_Z17readGpsStreamDatev+0x2e8>)
        else if (gps_sentence.equals("init"))
 8081b2c:	4cb1      	ldr	r4, [pc, #708]	; (8081df4 <_Z17readGpsStreamDatev+0x2e0>)
        gps_sentence = Serial5.readStringUntil('\r');
 8081b2e:	f7ff f805 	bl	8080b3c <_Z22__fetch_global_Serial5v>
 8081b32:	220d      	movs	r2, #13
 8081b34:	4601      	mov	r1, r0
 8081b36:	a80c      	add	r0, sp, #48	; 0x30
 8081b38:	f007 fe22 	bl	8089780 <_ZN6Stream15readStringUntilEc>
 8081b3c:	a90c      	add	r1, sp, #48	; 0x30
 8081b3e:	4668      	mov	r0, sp
 8081b40:	f007 fb28 	bl	8089194 <_ZN6StringaSEOS_>
 8081b44:	a80c      	add	r0, sp, #48	; 0x30
 8081b46:	f007 fa91 	bl	808906c <_ZN6StringD1Ev>
        prefix_string = gps_sentence.substring(4, 7);
 8081b4a:	2307      	movs	r3, #7
 8081b4c:	2204      	movs	r2, #4
 8081b4e:	4669      	mov	r1, sp
 8081b50:	a80c      	add	r0, sp, #48	; 0x30
 8081b52:	f007 fc29 	bl	80893a8 <_ZNK6String9substringEjj>
 8081b56:	a90c      	add	r1, sp, #48	; 0x30
 8081b58:	a804      	add	r0, sp, #16
 8081b5a:	f007 fb1b 	bl	8089194 <_ZN6StringaSEOS_>
 8081b5e:	a80c      	add	r0, sp, #48	; 0x30
 8081b60:	f007 fa84 	bl	808906c <_ZN6StringD1Ev>
        if (prefix_string.equals("RMC"))
 8081b64:	4629      	mov	r1, r5
 8081b66:	a804      	add	r0, sp, #16
 8081b68:	f007 fbe8 	bl	808933c <_ZNK6String6equalsEPKc>
 8081b6c:	2800      	cmp	r0, #0
 8081b6e:	f040 8136 	bne.w	8081dde <_Z17readGpsStreamDatev+0x2ca>
        else if (gps_sentence.equals("init"))
 8081b72:	4621      	mov	r1, r4
 8081b74:	4668      	mov	r0, sp
 8081b76:	f007 fbe1 	bl	808933c <_ZNK6String6equalsEPKc>
 8081b7a:	2800      	cmp	r0, #0
 8081b7c:	d0d7      	beq.n	8081b2e <_Z17readGpsStreamDatev+0x1a>
            Serial.println("Error reading GPS RMC");
 8081b7e:	f008 fcef 	bl	808a560 <_Z16_fetch_usbserialv>
 8081b82:	499f      	ldr	r1, [pc, #636]	; (8081e00 <_Z17readGpsStreamDatev+0x2ec>)
 8081b84:	f007 fc93 	bl	80894ae <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS RMC");
 8081b88:	499d      	ldr	r1, [pc, #628]	; (8081e00 <_Z17readGpsStreamDatev+0x2ec>)
 8081b8a:	a80c      	add	r0, sp, #48	; 0x30
 8081b8c:	f007 fab8 	bl	8089100 <_ZN6StringC1EPKc>
 8081b90:	a80c      	add	r0, sp, #48	; 0x30
 8081b92:	f7ff fde1 	bl	8081758 <_Z12writeLogFile6String>
 8081b96:	a80c      	add	r0, sp, #48	; 0x30
        String tempStr;
 8081b98:	f007 fa68 	bl	808906c <_ZN6StringD1Ev>
    String prefix_string;
 8081b9c:	a804      	add	r0, sp, #16
 8081b9e:	f007 fa65 	bl	808906c <_ZN6StringD1Ev>
    String gps_sentence = "init";
 8081ba2:	4668      	mov	r0, sp
 8081ba4:	f007 fa62 	bl	808906c <_ZN6StringD1Ev>
}
 8081ba8:	b010      	add	sp, #64	; 0x40
 8081baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (gps_sentence.charAt(a + 1) != ',')
 8081bae:	f104 0a01 	add.w	sl, r4, #1
 8081bb2:	4651      	mov	r1, sl
 8081bb4:	4668      	mov	r0, sp
 8081bb6:	f007 fbdc 	bl	8089372 <_ZNK6String6charAtEj>
 8081bba:	282c      	cmp	r0, #44	; 0x2c
 8081bbc:	f000 808a 	beq.w	8081cd4 <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081bc0:	f104 030b 	add.w	r3, r4, #11
 8081bc4:	4652      	mov	r2, sl
 8081bc6:	4669      	mov	r1, sp
 8081bc8:	a80c      	add	r0, sp, #48	; 0x30
 8081bca:	f007 fbed 	bl	80893a8 <_ZNK6String9substringEjj>
 8081bce:	a90c      	add	r1, sp, #48	; 0x30
 8081bd0:	a808      	add	r0, sp, #32
 8081bd2:	f007 fadf 	bl	8089194 <_ZN6StringaSEOS_>
 8081bd6:	a80c      	add	r0, sp, #48	; 0x30
 8081bd8:	f007 fa48 	bl	808906c <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081bdc:	4b89      	ldr	r3, [pc, #548]	; (8081e04 <_Z17readGpsStreamDatev+0x2f0>)
 8081bde:	681b      	ldr	r3, [r3, #0]
 8081be0:	2b00      	cmp	r3, #0
 8081be2:	d077      	beq.n	8081cd4 <_Z17readGpsStreamDatev+0x1c0>
                            Serial.print("GPS utc string: ");
 8081be4:	f008 fcbc 	bl	808a560 <_Z16_fetch_usbserialv>
 8081be8:	4987      	ldr	r1, [pc, #540]	; (8081e08 <_Z17readGpsStreamDatev+0x2f4>)
 8081bea:	f007 fc4d 	bl	8089488 <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 8081bee:	f008 fcb7 	bl	808a560 <_Z16_fetch_usbserialv>
 8081bf2:	9908      	ldr	r1, [sp, #32]
                    Serial.println("Received bad index in readGpsStreamDate");
 8081bf4:	f007 fc5b 	bl	80894ae <_ZN5Print7printlnEPKc>
                    break;
 8081bf8:	e06c      	b.n	8081cd4 <_Z17readGpsStreamDatev+0x1c0>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081bfa:	f104 0a01 	add.w	sl, r4, #1
 8081bfe:	4651      	mov	r1, sl
 8081c00:	4668      	mov	r0, sp
 8081c02:	f007 fbb6 	bl	8089372 <_ZNK6String6charAtEj>
 8081c06:	282c      	cmp	r0, #44	; 0x2c
 8081c08:	d064      	beq.n	8081cd4 <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 8081c0a:	f104 030a 	add.w	r3, r4, #10
 8081c0e:	4652      	mov	r2, sl
 8081c10:	4669      	mov	r1, sp
 8081c12:	a80c      	add	r0, sp, #48	; 0x30
 8081c14:	f007 fbc8 	bl	80893a8 <_ZNK6String9substringEjj>
 8081c18:	a90c      	add	r1, sp, #48	; 0x30
 8081c1a:	a808      	add	r0, sp, #32
 8081c1c:	f007 faba 	bl	8089194 <_ZN6StringaSEOS_>
 8081c20:	a80c      	add	r0, sp, #48	; 0x30
 8081c22:	f007 fa23 	bl	808906c <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 8081c26:	4b77      	ldr	r3, [pc, #476]	; (8081e04 <_Z17readGpsStreamDatev+0x2f0>)
 8081c28:	681b      	ldr	r3, [r3, #0]
 8081c2a:	b14b      	cbz	r3, 8081c40 <_Z17readGpsStreamDatev+0x12c>
                            Serial.print("Latitude string: ");
 8081c2c:	f008 fc98 	bl	808a560 <_Z16_fetch_usbserialv>
 8081c30:	4976      	ldr	r1, [pc, #472]	; (8081e0c <_Z17readGpsStreamDatev+0x2f8>)
 8081c32:	f007 fc29 	bl	8089488 <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081c36:	f008 fc93 	bl	808a560 <_Z16_fetch_usbserialv>
 8081c3a:	9908      	ldr	r1, [sp, #32]
 8081c3c:	f007 fc24 	bl	8089488 <_ZN5Print5printEPKc>
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 8081c40:	a908      	add	r1, sp, #32
 8081c42:	a80c      	add	r0, sp, #48	; 0x30
 8081c44:	f007 fa9b 	bl	808917e <_ZN6StringC1ERKS_>
 8081c48:	f104 010c 	add.w	r1, r4, #12
 8081c4c:	4668      	mov	r0, sp
 8081c4e:	f007 fb90 	bl	8089372 <_ZNK6String6charAtEj>
 8081c52:	a90c      	add	r1, sp, #48	; 0x30
 8081c54:	4602      	mov	r2, r0
 8081c56:	4630      	mov	r0, r6
 8081c58:	f004 fb1e 	bl	8086298 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081c5c:	a80c      	add	r0, sp, #48	; 0x30
 8081c5e:	f007 fa05 	bl	808906c <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081c62:	882b      	ldrh	r3, [r5, #0]
 8081c64:	f023 0308 	bic.w	r3, r3, #8
                            status_word.status_int |= 0x0004;
 8081c68:	802b      	strh	r3, [r5, #0]
 8081c6a:	e033      	b.n	8081cd4 <_Z17readGpsStreamDatev+0x1c0>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081c6c:	f104 0a01 	add.w	sl, r4, #1
 8081c70:	4651      	mov	r1, sl
 8081c72:	4668      	mov	r0, sp
 8081c74:	f007 fb7d 	bl	8089372 <_ZNK6String6charAtEj>
 8081c78:	282c      	cmp	r0, #44	; 0x2c
 8081c7a:	d02b      	beq.n	8081cd4 <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081c7c:	f104 030b 	add.w	r3, r4, #11
 8081c80:	4652      	mov	r2, sl
 8081c82:	4669      	mov	r1, sp
 8081c84:	a80c      	add	r0, sp, #48	; 0x30
 8081c86:	f007 fb8f 	bl	80893a8 <_ZNK6String9substringEjj>
 8081c8a:	a90c      	add	r1, sp, #48	; 0x30
 8081c8c:	a808      	add	r0, sp, #32
 8081c8e:	f007 fa81 	bl	8089194 <_ZN6StringaSEOS_>
 8081c92:	a80c      	add	r0, sp, #48	; 0x30
 8081c94:	f007 f9ea 	bl	808906c <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081c98:	4b5a      	ldr	r3, [pc, #360]	; (8081e04 <_Z17readGpsStreamDatev+0x2f0>)
 8081c9a:	681b      	ldr	r3, [r3, #0]
 8081c9c:	b14b      	cbz	r3, 8081cb2 <_Z17readGpsStreamDatev+0x19e>
                            Serial.print("longitude string: ");
 8081c9e:	f008 fc5f 	bl	808a560 <_Z16_fetch_usbserialv>
 8081ca2:	495b      	ldr	r1, [pc, #364]	; (8081e10 <_Z17readGpsStreamDatev+0x2fc>)
 8081ca4:	f007 fbf0 	bl	8089488 <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081ca8:	f008 fc5a 	bl	808a560 <_Z16_fetch_usbserialv>
 8081cac:	9908      	ldr	r1, [sp, #32]
 8081cae:	f007 fbeb 	bl	8089488 <_ZN5Print5printEPKc>
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 8081cb2:	a908      	add	r1, sp, #32
 8081cb4:	a80c      	add	r0, sp, #48	; 0x30
 8081cb6:	f007 fa62 	bl	808917e <_ZN6StringC1ERKS_>
 8081cba:	f104 010d 	add.w	r1, r4, #13
 8081cbe:	4668      	mov	r0, sp
 8081cc0:	f007 fb57 	bl	8089372 <_ZNK6String6charAtEj>
 8081cc4:	a90c      	add	r1, sp, #48	; 0x30
 8081cc6:	4602      	mov	r2, r0
 8081cc8:	4630      	mov	r0, r6
 8081cca:	f004 fb2d 	bl	8086328 <_ZN3GPS16set_long_decimalE6Stringc>
                        gps.set_satellites(tempStr);
 8081cce:	a80c      	add	r0, sp, #48	; 0x30
 8081cd0:	f007 f9cc 	bl	808906c <_ZN6StringD1Ev>
                comma_counter++;
 8081cd4:	f108 0801 	add.w	r8, r8, #1
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 8081cd8:	3701      	adds	r7, #1
 8081cda:	9b02      	ldr	r3, [sp, #8]
 8081cdc:	b2bc      	uxth	r4, r7
 8081cde:	42a3      	cmp	r3, r4
 8081ce0:	d97b      	bls.n	8081dda <_Z17readGpsStreamDatev+0x2c6>
            if (gps_sentence.charAt(a) == ',')
 8081ce2:	4621      	mov	r1, r4
 8081ce4:	4668      	mov	r0, sp
 8081ce6:	f007 fb44 	bl	8089372 <_ZNK6String6charAtEj>
 8081cea:	282c      	cmp	r0, #44	; 0x2c
 8081cec:	d1f4      	bne.n	8081cd8 <_Z17readGpsStreamDatev+0x1c4>
                switch (comma_counter)
 8081cee:	f108 33ff 	add.w	r3, r8, #4294967295
 8081cf2:	2b06      	cmp	r3, #6
 8081cf4:	d86d      	bhi.n	8081dd2 <_Z17readGpsStreamDatev+0x2be>
 8081cf6:	a201      	add	r2, pc, #4	; (adr r2, 8081cfc <_Z17readGpsStreamDatev+0x1e8>)
 8081cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8081cfc:	08081bfb 	.word	0x08081bfb
 8081d00:	08081dd3 	.word	0x08081dd3
 8081d04:	08081c6d 	.word	0x08081c6d
 8081d08:	08081dd3 	.word	0x08081dd3
 8081d0c:	08081d19 	.word	0x08081d19
 8081d10:	08081baf 	.word	0x08081baf
 8081d14:	08081d55 	.word	0x08081d55
                    if (gps_sentence.charAt(a + 1) != ',')
 8081d18:	f104 0a01 	add.w	sl, r4, #1
 8081d1c:	4651      	mov	r1, sl
 8081d1e:	4668      	mov	r0, sp
 8081d20:	f007 fb27 	bl	8089372 <_ZNK6String6charAtEj>
 8081d24:	282c      	cmp	r0, #44	; 0x2c
 8081d26:	d0d5      	beq.n	8081cd4 <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081d28:	4652      	mov	r2, sl
 8081d2a:	1ce3      	adds	r3, r4, #3
 8081d2c:	4669      	mov	r1, sp
 8081d2e:	a80c      	add	r0, sp, #48	; 0x30
 8081d30:	f007 fb3a 	bl	80893a8 <_ZNK6String9substringEjj>
 8081d34:	a90c      	add	r1, sp, #48	; 0x30
 8081d36:	a808      	add	r0, sp, #32
 8081d38:	f007 fa2c 	bl	8089194 <_ZN6StringaSEOS_>
 8081d3c:	a80c      	add	r0, sp, #48	; 0x30
 8081d3e:	f007 f995 	bl	808906c <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 8081d42:	a908      	add	r1, sp, #32
 8081d44:	a80c      	add	r0, sp, #48	; 0x30
 8081d46:	f007 fa1a 	bl	808917e <_ZN6StringC1ERKS_>
 8081d4a:	4630      	mov	r0, r6
 8081d4c:	a90c      	add	r1, sp, #48	; 0x30
 8081d4e:	f004 fb31 	bl	80863b4 <_ZN3GPS14set_satellitesE6String>
 8081d52:	e7bc      	b.n	8081cce <_Z17readGpsStreamDatev+0x1ba>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081d54:	f104 0a01 	add.w	sl, r4, #1
 8081d58:	4651      	mov	r1, sl
 8081d5a:	4668      	mov	r0, sp
 8081d5c:	f007 fb09 	bl	8089372 <_ZNK6String6charAtEj>
 8081d60:	282c      	cmp	r0, #44	; 0x2c
 8081d62:	d0b7      	beq.n	8081cd4 <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081d64:	4652      	mov	r2, sl
 8081d66:	1ce3      	adds	r3, r4, #3
 8081d68:	4669      	mov	r1, sp
 8081d6a:	a80c      	add	r0, sp, #48	; 0x30
 8081d6c:	f007 fb1c 	bl	80893a8 <_ZNK6String9substringEjj>
 8081d70:	a90c      	add	r1, sp, #48	; 0x30
 8081d72:	a808      	add	r0, sp, #32
 8081d74:	f007 fa0e 	bl	8089194 <_ZN6StringaSEOS_>
 8081d78:	a80c      	add	r0, sp, #48	; 0x30
 8081d7a:	f007 f977 	bl	808906c <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 8081d7e:	a908      	add	r1, sp, #32
 8081d80:	a80c      	add	r0, sp, #48	; 0x30
 8081d82:	f007 f9fc 	bl	808917e <_ZN6StringC1ERKS_>
 8081d86:	a90c      	add	r1, sp, #48	; 0x30
 8081d88:	4630      	mov	r0, r6
 8081d8a:	f004 fb1b 	bl	80863c4 <_ZN3GPS22set_horizontalDilutionE6String>
 8081d8e:	a80c      	add	r0, sp, #48	; 0x30
 8081d90:	f007 f96c 	bl	808906c <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081d94:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081d96:	4630      	mov	r0, r6
                        status_word.status_int &= 0xFFF3;
 8081d98:	f023 030c 	bic.w	r3, r3, #12
 8081d9c:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081d9e:	f004 fb27 	bl	80863f0 <_ZN3GPS22get_horizontalDilutionEv>
 8081da2:	2801      	cmp	r0, #1
 8081da4:	dc03      	bgt.n	8081dae <_Z17readGpsStreamDatev+0x29a>
                            status_word.status_int |= 0x000C;
 8081da6:	882b      	ldrh	r3, [r5, #0]
 8081da8:	f043 030c 	orr.w	r3, r3, #12
 8081dac:	e75c      	b.n	8081c68 <_Z17readGpsStreamDatev+0x154>
                        else if (gps.get_horizontalDilution() < 5)
 8081dae:	4630      	mov	r0, r6
 8081db0:	f004 fb1e 	bl	80863f0 <_ZN3GPS22get_horizontalDilutionEv>
 8081db4:	2804      	cmp	r0, #4
 8081db6:	dc03      	bgt.n	8081dc0 <_Z17readGpsStreamDatev+0x2ac>
                            status_word.status_int |= 0x0008;
 8081db8:	882b      	ldrh	r3, [r5, #0]
 8081dba:	f043 0308 	orr.w	r3, r3, #8
 8081dbe:	e753      	b.n	8081c68 <_Z17readGpsStreamDatev+0x154>
                        else if (gps.get_horizontalDilution() < 20)
 8081dc0:	4630      	mov	r0, r6
 8081dc2:	f004 fb15 	bl	80863f0 <_ZN3GPS22get_horizontalDilutionEv>
 8081dc6:	2813      	cmp	r0, #19
 8081dc8:	dc84      	bgt.n	8081cd4 <_Z17readGpsStreamDatev+0x1c0>
                            status_word.status_int |= 0x0004;
 8081dca:	882b      	ldrh	r3, [r5, #0]
 8081dcc:	f043 0304 	orr.w	r3, r3, #4
 8081dd0:	e74a      	b.n	8081c68 <_Z17readGpsStreamDatev+0x154>
                    Serial.println("Received bad index in readGpsStreamDate");
 8081dd2:	f008 fbc5 	bl	808a560 <_Z16_fetch_usbserialv>
 8081dd6:	4649      	mov	r1, r9
 8081dd8:	e70c      	b.n	8081bf4 <_Z17readGpsStreamDatev+0xe0>
        String tempStr;
 8081dda:	a808      	add	r0, sp, #32
 8081ddc:	e6dc      	b.n	8081b98 <_Z17readGpsStreamDatev+0x84>
 8081dde:	2700      	movs	r7, #0
 8081de0:	4905      	ldr	r1, [pc, #20]	; (8081df8 <_Z17readGpsStreamDatev+0x2e4>)
 8081de2:	a808      	add	r0, sp, #32
 8081de4:	f007 f98c 	bl	8089100 <_ZN6StringC1EPKc>
        comma_counter = 0;
 8081de8:	46b8      	mov	r8, r7
                    Serial.println("Received bad index in readGpsStreamDate");
 8081dea:	f8df 9030 	ldr.w	r9, [pc, #48]	; 8081e1c <_Z17readGpsStreamDatev+0x308>
                        gps.set_horizontalDilution(tempStr);
 8081dee:	4e09      	ldr	r6, [pc, #36]	; (8081e14 <_Z17readGpsStreamDatev+0x300>)
                        status_word.status_int &= 0xFFF3;
 8081df0:	4d09      	ldr	r5, [pc, #36]	; (8081e18 <_Z17readGpsStreamDatev+0x304>)
 8081df2:	e772      	b.n	8081cda <_Z17readGpsStreamDatev+0x1c6>
 8081df4:	0808dec6 	.word	0x0808dec6
 8081df8:	08090075 	.word	0x08090075
 8081dfc:	0808df45 	.word	0x0808df45
 8081e00:	0808df33 	.word	0x0808df33
 8081e04:	200005e8 	.word	0x200005e8
 8081e08:	0808dee1 	.word	0x0808dee1
 8081e0c:	0808def2 	.word	0x0808def2
 8081e10:	0808df04 	.word	0x0808df04
 8081e14:	20000670 	.word	0x20000670
 8081e18:	20000c48 	.word	0x20000c48
 8081e1c:	0808df49 	.word	0x0808df49

08081e20 <_Z10readAlpha1v>:
{
 8081e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081e24:	b08b      	sub	sp, #44	; 0x2c
    String alpha1_ppmRounded = "";
 8081e26:	49ac      	ldr	r1, [pc, #688]	; (80820d8 <_Z10readAlpha1v+0x2b8>)
 8081e28:	a802      	add	r0, sp, #8
 8081e2a:	f007 f969 	bl	8089100 <_ZN6StringC1EPKc>
    if (debugging_enabled)
 8081e2e:	4bab      	ldr	r3, [pc, #684]	; (80820dc <_Z10readAlpha1v+0x2bc>)
 8081e30:	681a      	ldr	r2, [r3, #0]
 8081e32:	469a      	mov	sl, r3
 8081e34:	b122      	cbz	r2, 8081e40 <_Z10readAlpha1v+0x20>
        Serial.println("Start of alpha read");
 8081e36:	f008 fb93 	bl	808a560 <_Z16_fetch_usbserialv>
 8081e3a:	49a9      	ldr	r1, [pc, #676]	; (80820e0 <_Z10readAlpha1v+0x2c0>)
 8081e3c:	f007 fb37 	bl	80894ae <_ZN5Print7printlnEPKc>
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8081e40:	4ca8      	ldr	r4, [pc, #672]	; (80820e4 <_Z10readAlpha1v+0x2c4>)
 8081e42:	2100      	movs	r1, #0
 8081e44:	8820      	ldrh	r0, [r4, #0]
 8081e46:	f008 fe4a 	bl	808aade <digitalWrite>
    if (Wire.requestFrom(0x49, 1) == 0)
 8081e4a:	f008 fecb 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8081e4e:	2201      	movs	r2, #1
 8081e50:	2149      	movs	r1, #73	; 0x49
 8081e52:	f008 fd4c 	bl	808a8ee <_ZN7TwoWire11requestFromEhj>
 8081e56:	9401      	str	r4, [sp, #4]
 8081e58:	4605      	mov	r5, r0
 8081e5a:	2800      	cmp	r0, #0
 8081e5c:	d166      	bne.n	8081f2c <_Z10readAlpha1v+0x10c>
        if (debugging_enabled)
 8081e5e:	f8da 4000 	ldr.w	r4, [sl]
 8081e62:	b17c      	cbz	r4, 8081e84 <_Z10readAlpha1v+0x64>
            Serial.println("Couldn't communicate with LMP91000_1");
 8081e64:	f008 fb7c 	bl	808a560 <_Z16_fetch_usbserialv>
 8081e68:	499f      	ldr	r1, [pc, #636]	; (80820e8 <_Z10readAlpha1v+0x2c8>)
 8081e6a:	f007 fb20 	bl	80894ae <_ZN5Print7printlnEPKc>
            writeLogFile("Couldn't communicate with LMP91000_1");
 8081e6e:	499e      	ldr	r1, [pc, #632]	; (80820e8 <_Z10readAlpha1v+0x2c8>)
 8081e70:	a806      	add	r0, sp, #24
 8081e72:	f007 f945 	bl	8089100 <_ZN6StringC1EPKc>
 8081e76:	a806      	add	r0, sp, #24
 8081e78:	f7ff fc6e 	bl	8081758 <_Z12writeLogFile6String>
 8081e7c:	a806      	add	r0, sp, #24
 8081e7e:	f007 f8f5 	bl	808906c <_ZN6StringD1Ev>
    int32_t half_Vref = 0; //half of Vref
 8081e82:	462c      	mov	r4, r5
    if (lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081e84:	2100      	movs	r1, #0
 8081e86:	4899      	ldr	r0, [pc, #612]	; (80820ec <_Z10readAlpha1v+0x2cc>)
 8081e88:	f004 f895 	bl	8085fb6 <_ZN8LMP910004readEh>
 8081e8c:	b988      	cbnz	r0, 8081eb2 <_Z10readAlpha1v+0x92>
        if (debugging_enabled)
 8081e8e:	f8da 3000 	ldr.w	r3, [sl]
 8081e92:	b173      	cbz	r3, 8081eb2 <_Z10readAlpha1v+0x92>
            Serial.println("Status = 0 from LMP91000 status reg");
 8081e94:	f008 fb64 	bl	808a560 <_Z16_fetch_usbserialv>
 8081e98:	4995      	ldr	r1, [pc, #596]	; (80820f0 <_Z10readAlpha1v+0x2d0>)
 8081e9a:	f007 fb08 	bl	80894ae <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8081e9e:	4995      	ldr	r1, [pc, #596]	; (80820f4 <_Z10readAlpha1v+0x2d4>)
 8081ea0:	a806      	add	r0, sp, #24
 8081ea2:	f007 f92d 	bl	8089100 <_ZN6StringC1EPKc>
 8081ea6:	a806      	add	r0, sp, #24
 8081ea8:	f7ff fc56 	bl	8081758 <_Z12writeLogFile6String>
 8081eac:	a806      	add	r0, sp, #24
 8081eae:	f007 f8dd 	bl	808906c <_ZN6StringD1Ev>
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081eb2:	f008 fe97 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8081eb6:	2201      	movs	r2, #1
 8081eb8:	2149      	movs	r1, #73	; 0x49
 8081eba:	f008 fd18 	bl	808a8ee <_ZN7TwoWire11requestFromEhj>
 8081ebe:	2800      	cmp	r0, #0
 8081ec0:	d169      	bne.n	8081f96 <_Z10readAlpha1v+0x176>
    int32_t A2_temperature = 0; //temperature
 8081ec2:	2500      	movs	r5, #0
        alpha1_ppmRounded = "-99";
 8081ec4:	498c      	ldr	r1, [pc, #560]	; (80820f8 <_Z10readAlpha1v+0x2d8>)
 8081ec6:	a802      	add	r0, sp, #8
 8081ec8:	f007 f96c 	bl	80891a4 <_ZN6StringaSEPKc>
    float alpha1_ppmraw = 0;
 8081ecc:	f04f 0800 	mov.w	r8, #0
    int32_t A1_aux = 0; //aux out
 8081ed0:	462e      	mov	r6, r5
    int32_t A0_gas = 0; //gas
 8081ed2:	462f      	mov	r7, r5
    digitalWrite(lmp91000_1_en, HIGH);  //disable
 8081ed4:	9b01      	ldr	r3, [sp, #4]
 8081ed6:	2101      	movs	r1, #1
 8081ed8:	8818      	ldrh	r0, [r3, #0]
 8081eda:	f008 fe00 	bl	808aade <digitalWrite>
    if (debugging_enabled)
 8081ede:	f8da 3000 	ldr.w	r3, [sl]
 8081ee2:	b1e3      	cbz	r3, 8081f1e <_Z10readAlpha1v+0xfe>
        Serial.print("CO measurements:  \n\r");
 8081ee4:	f008 fb3c 	bl	808a560 <_Z16_fetch_usbserialv>
 8081ee8:	4984      	ldr	r1, [pc, #528]	; (80820fc <_Z10readAlpha1v+0x2dc>)
 8081eea:	f007 facd 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.printf("A0_gas: %d\n\r", A0_gas);
 8081eee:	f008 fb37 	bl	808a560 <_Z16_fetch_usbserialv>
 8081ef2:	463a      	mov	r2, r7
 8081ef4:	4982      	ldr	r1, [pc, #520]	; (8082100 <_Z10readAlpha1v+0x2e0>)
 8081ef6:	f7fe fdb3 	bl	8080a60 <_ZN5Print6printfEPKcz>
        Serial.printf("A1_aux: %d\n\r", A1_aux);
 8081efa:	f008 fb31 	bl	808a560 <_Z16_fetch_usbserialv>
 8081efe:	4632      	mov	r2, r6
 8081f00:	4980      	ldr	r1, [pc, #512]	; (8082104 <_Z10readAlpha1v+0x2e4>)
 8081f02:	f7fe fdad 	bl	8080a60 <_ZN5Print6printfEPKcz>
        Serial.printf("A2_temp: %d\n\r", A2_temperature);
 8081f06:	f008 fb2b 	bl	808a560 <_Z16_fetch_usbserialv>
 8081f0a:	462a      	mov	r2, r5
 8081f0c:	497e      	ldr	r1, [pc, #504]	; (8082108 <_Z10readAlpha1v+0x2e8>)
 8081f0e:	f7fe fda7 	bl	8080a60 <_ZN5Print6printfEPKcz>
        Serial.printf("half_vref: %d\n\r", half_Vref);
 8081f12:	f008 fb25 	bl	808a560 <_Z16_fetch_usbserialv>
 8081f16:	4622      	mov	r2, r4
 8081f18:	497c      	ldr	r1, [pc, #496]	; (808210c <_Z10readAlpha1v+0x2ec>)
 8081f1a:	f7fe fda1 	bl	8080a60 <_ZN5Print6printfEPKcz>
    String alpha1_ppmRounded = "";
 8081f1e:	a802      	add	r0, sp, #8
 8081f20:	f007 f8a4 	bl	808906c <_ZN6StringD1Ev>
}
 8081f24:	4640      	mov	r0, r8
 8081f26:	b00b      	add	sp, #44	; 0x2c
 8081f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8081f2c:	2103      	movs	r1, #3
 8081f2e:	4878      	ldr	r0, [pc, #480]	; (8082110 <_Z10readAlpha1v+0x2f0>)
 8081f30:	f004 f988 	bl	8086244 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8081f34:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 8081f36:	f009 fc75 	bl	808b824 <__aeabi_i2f>
 8081f3a:	4b76      	ldr	r3, [pc, #472]	; (8082114 <_Z10readAlpha1v+0x2f4>)
 8081f3c:	6819      	ldr	r1, [r3, #0]
 8081f3e:	f009 fcc5 	bl	808b8cc <__aeabi_fmul>
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8081f42:	4975      	ldr	r1, [pc, #468]	; (8082118 <_Z10readAlpha1v+0x2f8>)
 8081f44:	f009 fd76 	bl	808ba34 <__aeabi_fdiv>
 8081f48:	f009 f812 	bl	808af70 <__aeabi_f2d>
 8081f4c:	2200      	movs	r2, #0
 8081f4e:	4b73      	ldr	r3, [pc, #460]	; (808211c <_Z10readAlpha1v+0x2fc>)
 8081f50:	4606      	mov	r6, r0
 8081f52:	460f      	mov	r7, r1
 8081f54:	f008 feac 	bl	808acb0 <__aeabi_dsub>
 8081f58:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8081f5c:	2200      	movs	r2, #0
 8081f5e:	4649      	mov	r1, r9
 8081f60:	4b6f      	ldr	r3, [pc, #444]	; (8082120 <_Z10readAlpha1v+0x300>)
 8081f62:	f009 faed 	bl	808b540 <__aeabi_dcmpgt>
 8081f66:	2800      	cmp	r0, #0
 8081f68:	d08c      	beq.n	8081e84 <_Z10readAlpha1v+0x64>
            if (debugging_enabled)
 8081f6a:	f8da 3000 	ldr.w	r3, [sl]
 8081f6e:	2b00      	cmp	r3, #0
 8081f70:	d088      	beq.n	8081e84 <_Z10readAlpha1v+0x64>
                Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref / 1000);
 8081f72:	f008 faf5 	bl	808a560 <_Z16_fetch_usbserialv>
 8081f76:	4632      	mov	r2, r6
 8081f78:	463b      	mov	r3, r7
 8081f7a:	496a      	ldr	r1, [pc, #424]	; (8082124 <_Z10readAlpha1v+0x304>)
 8081f7c:	f7fe fd70 	bl	8080a60 <_ZN5Print6printfEPKcz>
                writeLogFile("Halfvolt higher than 0.5");
 8081f80:	4969      	ldr	r1, [pc, #420]	; (8082128 <_Z10readAlpha1v+0x308>)
 8081f82:	a806      	add	r0, sp, #24
 8081f84:	f007 f8bc 	bl	8089100 <_ZN6StringC1EPKc>
 8081f88:	a806      	add	r0, sp, #24
 8081f8a:	f7ff fbe5 	bl	8081758 <_Z12writeLogFile6String>
 8081f8e:	a806      	add	r0, sp, #24
 8081f90:	f007 f86c 	bl	808906c <_ZN6StringD1Ev>
 8081f94:	e776      	b.n	8081e84 <_Z10readAlpha1v+0x64>
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081f96:	2100      	movs	r1, #0
 8081f98:	4854      	ldr	r0, [pc, #336]	; (80820ec <_Z10readAlpha1v+0x2cc>)
 8081f9a:	f004 f80c 	bl	8085fb6 <_ZN8LMP910004readEh>
 8081f9e:	2800      	cmp	r0, #0
 8081fa0:	d08f      	beq.n	8081ec2 <_Z10readAlpha1v+0xa2>
 8081fa2:	2400      	movs	r4, #0
 8081fa4:	f04f 080a 	mov.w	r8, #10
 8081fa8:	46a1      	mov	r9, r4
 8081faa:	4626      	mov	r6, r4
 8081fac:	4627      	mov	r7, r4
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8081fae:	4d58      	ldr	r5, [pc, #352]	; (8082110 <_Z10readAlpha1v+0x2f0>)
 8081fb0:	2100      	movs	r1, #0
 8081fb2:	4628      	mov	r0, r5
 8081fb4:	f004 f946 	bl	8086244 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081fb8:	2101      	movs	r1, #1
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8081fba:	4407      	add	r7, r0
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081fbc:	4628      	mov	r0, r5
 8081fbe:	f004 f941 	bl	8086244 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081fc2:	2102      	movs	r1, #2
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081fc4:	4406      	add	r6, r0
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081fc6:	4628      	mov	r0, r5
 8081fc8:	f004 f93c 	bl	8086244 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081fcc:	2103      	movs	r1, #3
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081fce:	4481      	add	r9, r0
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081fd0:	4628      	mov	r0, r5
 8081fd2:	f004 f937 	bl	8086244 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8081fd6:	f108 38ff 	add.w	r8, r8, #4294967295
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081fda:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081fde:	4404      	add	r4, r0
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081fe0:	d1e6      	bne.n	8081fb0 <_Z10readAlpha1v+0x190>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8081fe2:	200a      	movs	r0, #10
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8081fe4:	fbb4 f4f0 	udiv	r4, r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 8081fe8:	4b4a      	ldr	r3, [pc, #296]	; (8082114 <_Z10readAlpha1v+0x2f4>)
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 8081fea:	fbb9 f5f0 	udiv	r5, r9, r0
        volt0_gas = A0_gas * ads_bitmv;
 8081fee:	f8d3 9000 	ldr.w	r9, [r3]
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8081ff2:	fbb7 f7f0 	udiv	r7, r7, r0
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 8081ff6:	fbb6 f6f0 	udiv	r6, r6, r0
        volt_half_Vref = half_Vref * ads_bitmv;
 8081ffa:	4620      	mov	r0, r4
 8081ffc:	f009 fc12 	bl	808b824 <__aeabi_i2f>
 8082000:	4649      	mov	r1, r9
 8082002:	f009 fc63 	bl	808b8cc <__aeabi_fmul>
 8082006:	4680      	mov	r8, r0
        volt0_gas = A0_gas * ads_bitmv;
 8082008:	4638      	mov	r0, r7
 808200a:	f009 fc0b 	bl	808b824 <__aeabi_i2f>
 808200e:	4649      	mov	r1, r9
 8082010:	f009 fc5c 	bl	808b8cc <__aeabi_fmul>
 8082014:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 8082016:	4640      	mov	r0, r8
 8082018:	f009 fb4e 	bl	808b6b8 <__aeabi_fsub>
 808201c:	4943      	ldr	r1, [pc, #268]	; (808212c <_Z10readAlpha1v+0x30c>)
 808201e:	f009 fd09 	bl	808ba34 <__aeabi_fdiv>
 8082022:	4683      	mov	fp, r0
        volt1_aux = A1_aux * ads_bitmv;
 8082024:	4630      	mov	r0, r6
 8082026:	f009 fbfd 	bl	808b824 <__aeabi_i2f>
 808202a:	4649      	mov	r1, r9
 808202c:	f009 fc4e 	bl	808b8cc <__aeabi_fmul>
 8082030:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 8082032:	4640      	mov	r0, r8
 8082034:	f009 fb40 	bl	808b6b8 <__aeabi_fsub>
 8082038:	493d      	ldr	r1, [pc, #244]	; (8082130 <_Z10readAlpha1v+0x310>)
 808203a:	f009 fcfb 	bl	808ba34 <__aeabi_fdiv>
 808203e:	4680      	mov	r8, r0
        if (readTemperature() <= 15)
 8082040:	f7ff f982 	bl	8081348 <_Z15readTemperaturev>
 8082044:	493b      	ldr	r1, [pc, #236]	; (8082134 <_Z10readAlpha1v+0x314>)
 8082046:	f009 fde9 	bl	808bc1c <__aeabi_fcmple>
 808204a:	b1d0      	cbz	r0, 8082082 <_Z10readAlpha1v+0x262>
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 808204c:	4641      	mov	r1, r8
 808204e:	4658      	mov	r0, fp
 8082050:	f009 fb32 	bl	808b6b8 <__aeabi_fsub>
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8082054:	f008 ff8c 	bl	808af70 <__aeabi_f2d>
 8082058:	a31b      	add	r3, pc, #108	; (adr r3, 80820c8 <_Z10readAlpha1v+0x2a8>)
 808205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808205e:	f009 f909 	bl	808b274 <__aeabi_ddiv>
 8082062:	f009 fad5 	bl	808b610 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8082066:	2202      	movs	r2, #2
 8082068:	4601      	mov	r1, r0
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 808206a:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 808206c:	a806      	add	r0, sp, #24
 808206e:	f007 f8e1 	bl	8089234 <_ZN6StringC1Efi>
 8082072:	a906      	add	r1, sp, #24
 8082074:	a802      	add	r0, sp, #8
 8082076:	f007 f88d 	bl	8089194 <_ZN6StringaSEOS_>
 808207a:	a806      	add	r0, sp, #24
 808207c:	f006 fff6 	bl	808906c <_ZN6StringD1Ev>
 8082080:	e728      	b.n	8081ed4 <_Z10readAlpha1v+0xb4>
        else if (readTemperature() <= 25)
 8082082:	f7ff f961 	bl	8081348 <_Z15readTemperaturev>
 8082086:	492c      	ldr	r1, [pc, #176]	; (8082138 <_Z10readAlpha1v+0x318>)
 8082088:	f009 fdc8 	bl	808bc1c <__aeabi_fcmple>
 808208c:	b120      	cbz	r0, 8082098 <_Z10readAlpha1v+0x278>
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 808208e:	4641      	mov	r1, r8
 8082090:	4658      	mov	r0, fp
 8082092:	f009 fb13 	bl	808b6bc <__addsf3>
 8082096:	e7dd      	b.n	8082054 <_Z10readAlpha1v+0x234>
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 8082098:	4640      	mov	r0, r8
 808209a:	f008 ff69 	bl	808af70 <__aeabi_f2d>
 808209e:	a30c      	add	r3, pc, #48	; (adr r3, 80820d0 <_Z10readAlpha1v+0x2b0>)
 80820a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80820a4:	f008 ffbc 	bl	808b020 <__aeabi_dmul>
 80820a8:	4680      	mov	r8, r0
 80820aa:	4658      	mov	r0, fp
 80820ac:	4689      	mov	r9, r1
 80820ae:	f008 ff5f 	bl	808af70 <__aeabi_f2d>
 80820b2:	4602      	mov	r2, r0
 80820b4:	460b      	mov	r3, r1
 80820b6:	4640      	mov	r0, r8
 80820b8:	4649      	mov	r1, r9
 80820ba:	f008 fdfb 	bl	808acb4 <__adddf3>
 80820be:	f009 faa7 	bl	808b610 <__aeabi_d2f>
 80820c2:	e7c7      	b.n	8082054 <_Z10readAlpha1v+0x234>
 80820c4:	f3af 8000 	nop.w
 80820c8:	d4fdf3b6 	.word	0xd4fdf3b6
 80820cc:	3fd6e978 	.word	0x3fd6e978
 80820d0:	851eb852 	.word	0x851eb852
 80820d4:	3fe851eb 	.word	0x3fe851eb
 80820d8:	08090075 	.word	0x08090075
 80820dc:	200005e8 	.word	0x200005e8
 80820e0:	0808df71 	.word	0x0808df71
 80820e4:	200000c0 	.word	0x200000c0
 80820e8:	0808df85 	.word	0x0808df85
 80820ec:	200006b9 	.word	0x200006b9
 80820f0:	0808dfd5 	.word	0x0808dfd5
 80820f4:	0808dff9 	.word	0x0808dff9
 80820f8:	0808de75 	.word	0x0808de75
 80820fc:	0808e00c 	.word	0x0808e00c
 8082100:	0808e021 	.word	0x0808e021
 8082104:	0808e02e 	.word	0x0808e02e
 8082108:	0808e03b 	.word	0x0808e03b
 808210c:	0808e049 	.word	0x0808e049
 8082110:	20000550 	.word	0x20000550
 8082114:	20000084 	.word	0x20000084
 8082118:	447a0000 	.word	0x447a0000
 808211c:	3ff40000 	.word	0x3ff40000
 8082120:	3fe00000 	.word	0x3fe00000
 8082124:	0808dfaa 	.word	0x0808dfaa
 8082128:	0808dfbc 	.word	0x0808dfbc
 808212c:	c2f00000 	.word	0xc2f00000
 8082130:	c3160000 	.word	0xc3160000
 8082134:	41700000 	.word	0x41700000
 8082138:	41c80000 	.word	0x41c80000

0808213c <_Z12sendWifiInfov>:
    }
}

//send wifi information to the ESP
void sendWifiInfo(void)
{
 808213c:	b510      	push	{r4, lr}
 808213e:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8082140:	491d      	ldr	r1, [pc, #116]	; (80821b8 <_Z12sendWifiInfov+0x7c>)
 8082142:	a808      	add	r0, sp, #32
 8082144:	f006 ffdc 	bl	8089100 <_ZN6StringC1EPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082148:	491c      	ldr	r1, [pc, #112]	; (80821bc <_Z12sendWifiInfov+0x80>)
 808214a:	a804      	add	r0, sp, #16
 808214c:	f007 f817 	bl	808917e <_ZN6StringC1ERKS_>
 8082150:	a904      	add	r1, sp, #16
 8082152:	a808      	add	r0, sp, #32
 8082154:	f007 f8d2 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 8082158:	4919      	ldr	r1, [pc, #100]	; (80821c0 <_Z12sendWifiInfov+0x84>)
 808215a:	f007 f8db 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 808215e:	4604      	mov	r4, r0
 8082160:	4918      	ldr	r1, [pc, #96]	; (80821c4 <_Z12sendWifiInfov+0x88>)
 8082162:	a80c      	add	r0, sp, #48	; 0x30
 8082164:	f007 f80b 	bl	808917e <_ZN6StringC1ERKS_>
 8082168:	a90c      	add	r1, sp, #48	; 0x30
 808216a:	4620      	mov	r0, r4
 808216c:	f007 f8c6 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 8082170:	4915      	ldr	r1, [pc, #84]	; (80821c8 <_Z12sendWifiInfov+0x8c>)
 8082172:	f007 f8cf 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8082176:	4601      	mov	r1, r0
 8082178:	4668      	mov	r0, sp
 808217a:	f007 f800 	bl	808917e <_ZN6StringC1ERKS_>
 808217e:	a80c      	add	r0, sp, #48	; 0x30
 8082180:	f006 ff74 	bl	808906c <_ZN6StringD1Ev>
 8082184:	a804      	add	r0, sp, #16
 8082186:	f006 ff71 	bl	808906c <_ZN6StringD1Ev>
class StringSumHelper : public String
 808218a:	a808      	add	r0, sp, #32
 808218c:	f006 ff6e 	bl	808906c <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 8082190:	f008 f9e6 	bl	808a560 <_Z16_fetch_usbserialv>
 8082194:	490d      	ldr	r1, [pc, #52]	; (80821cc <_Z12sendWifiInfov+0x90>)
 8082196:	f007 f98a 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 808219a:	f008 faff 	bl	808a79c <_Z22__fetch_global_Serial1v>
 808219e:	9900      	ldr	r1, [sp, #0]
 80821a0:	f007 f985 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 80821a4:	f008 f9dc 	bl	808a560 <_Z16_fetch_usbserialv>
 80821a8:	4909      	ldr	r1, [pc, #36]	; (80821d0 <_Z12sendWifiInfov+0x94>)
 80821aa:	f007 f980 	bl	80894ae <_ZN5Print7printlnEPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 80821ae:	4668      	mov	r0, sp
 80821b0:	f006 ff5c 	bl	808906c <_ZN6StringD1Ev>
}
 80821b4:	b010      	add	sp, #64	; 0x40
 80821b6:	bd10      	pop	{r4, pc}
 80821b8:	0808e059 	.word	0x0808e059
 80821bc:	20000c38 	.word	0x20000c38
 80821c0:	0808e05c 	.word	0x0808e05c
 80821c4:	20000760 	.word	0x20000760
 80821c8:	0808e15f 	.word	0x0808e15f
 80821cc:	0808e05e 	.word	0x0808e05e
 80821d0:	0808e082 	.word	0x0808e082
 80821d4:	00000000 	.word	0x00000000

080821d8 <_Z16getEspAQSyncDatav>:
    return ozone_value;
    //parseOzoneString(receivedData);
}

void getEspAQSyncData(void)
{
 80821d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80821dc:	b08d      	sub	sp, #52	; 0x34
 80821de:	af00      	add	r7, sp, #0
    String getAQSyncData = "Z&";
 80821e0:	4965      	ldr	r1, [pc, #404]	; (8082378 <_Z16getEspAQSyncDatav+0x1a0>)
 80821e2:	4638      	mov	r0, r7
 80821e4:	f006 ff8c 	bl	8089100 <_ZN6StringC1EPKc>
    bool timeOut = false;
    double counterIndex = 0;

    //If esp doesn't answer, keep going
    Serial1.setTimeout(3000);
    if (debugging_enabled)
 80821e8:	4e64      	ldr	r6, [pc, #400]	; (808237c <_Z16getEspAQSyncDatav+0x1a4>)
    String receivedData = " ";
 80821ea:	4965      	ldr	r1, [pc, #404]	; (8082380 <_Z16getEspAQSyncDatav+0x1a8>)
 80821ec:	f107 0010 	add.w	r0, r7, #16
 80821f0:	f006 ff86 	bl	8089100 <_ZN6StringC1EPKc>
    Serial1.setTimeout(3000);
 80821f4:	f008 fad2 	bl	808a79c <_Z22__fetch_global_Serial1v>
 80821f8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80821fc:	f007 faaa 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    if (debugging_enabled)
 8082200:	6833      	ldr	r3, [r6, #0]
 8082202:	b18b      	cbz	r3, 8082228 <_Z16getEspAQSyncDatav+0x50>
    {
        Serial.println("Getting AQ Sync data from esp");
 8082204:	f008 f9ac 	bl	808a560 <_Z16_fetch_usbserialv>
 8082208:	495e      	ldr	r1, [pc, #376]	; (8082384 <_Z16getEspAQSyncDatav+0x1ac>)
 808220a:	f007 f950 	bl	80894ae <_ZN5Print7printlnEPKc>
        writeLogFile("Getting AQ Sync data from esp");
 808220e:	495d      	ldr	r1, [pc, #372]	; (8082384 <_Z16getEspAQSyncDatav+0x1ac>)
 8082210:	f107 0020 	add.w	r0, r7, #32
 8082214:	f006 ff74 	bl	8089100 <_ZN6StringC1EPKc>
 8082218:	f107 0020 	add.w	r0, r7, #32
 808221c:	f7ff fa9c 	bl	8081758 <_Z12writeLogFile6String>
 8082220:	f107 0020 	add.w	r0, r7, #32
 8082224:	f006 ff22 	bl	808906c <_ZN6StringD1Ev>
    Serial1.print(getAQSyncData);
    while (!Serial1.available() && !timeOut)
    {
        //delay(1);
        counterIndex++;
        if (counterIndex > MAX_COUNTER_INDEX)
 8082228:	f20f 1944 	addw	r9, pc, #324	; 0x144
 808222c:	e9d9 8900 	ldrd	r8, r9, [r9]
    Serial1.print(getAQSyncData);
 8082230:	f008 fab4 	bl	808a79c <_Z22__fetch_global_Serial1v>
 8082234:	6839      	ldr	r1, [r7, #0]
 8082236:	f007 f927 	bl	8089488 <_ZN5Print5printEPKc>
    double counterIndex = 0;
 808223a:	2400      	movs	r4, #0
 808223c:	2500      	movs	r5, #0
    bool timeOut = false;
 808223e:	f04f 0a00 	mov.w	sl, #0
        {
            if (debugging_enabled)
            {
                Serial.printf("Unable to get AQSync data from ESP, counter index: %1.1f\n\r", counterIndex);
 8082242:	f8df b150 	ldr.w	fp, [pc, #336]	; 8082394 <_Z16getEspAQSyncDatav+0x1bc>
    while (!Serial1.available() && !timeOut)
 8082246:	f008 faa9 	bl	808a79c <_Z22__fetch_global_Serial1v>
 808224a:	6803      	ldr	r3, [r0, #0]
 808224c:	691b      	ldr	r3, [r3, #16]
 808224e:	4798      	blx	r3
 8082250:	b9e0      	cbnz	r0, 808228c <_Z16getEspAQSyncDatav+0xb4>
 8082252:	f1ba 0f00 	cmp.w	sl, #0
 8082256:	d119      	bne.n	808228c <_Z16getEspAQSyncDatav+0xb4>
        counterIndex++;
 8082258:	2200      	movs	r2, #0
 808225a:	4620      	mov	r0, r4
 808225c:	4629      	mov	r1, r5
 808225e:	4b4a      	ldr	r3, [pc, #296]	; (8082388 <_Z16getEspAQSyncDatav+0x1b0>)
 8082260:	f008 fd28 	bl	808acb4 <__adddf3>
        if (counterIndex > MAX_COUNTER_INDEX)
 8082264:	4642      	mov	r2, r8
 8082266:	464b      	mov	r3, r9
        counterIndex++;
 8082268:	4604      	mov	r4, r0
 808226a:	460d      	mov	r5, r1
        if (counterIndex > MAX_COUNTER_INDEX)
 808226c:	f009 f968 	bl	808b540 <__aeabi_dcmpgt>
 8082270:	2800      	cmp	r0, #0
 8082272:	d0e8      	beq.n	8082246 <_Z16getEspAQSyncDatav+0x6e>
            if (debugging_enabled)
 8082274:	6833      	ldr	r3, [r6, #0]
 8082276:	b133      	cbz	r3, 8082286 <_Z16getEspAQSyncDatav+0xae>
                Serial.printf("Unable to get AQSync data from ESP, counter index: %1.1f\n\r", counterIndex);
 8082278:	f008 f972 	bl	808a560 <_Z16_fetch_usbserialv>
 808227c:	4622      	mov	r2, r4
 808227e:	462b      	mov	r3, r5
 8082280:	4659      	mov	r1, fp
 8082282:	f7fe fbed 	bl	8080a60 <_ZN5Print6printfEPKcz>
            }
            timeOut = true;
 8082286:	f04f 0a01 	mov.w	sl, #1
 808228a:	e7dc      	b.n	8082246 <_Z16getEspAQSyncDatav+0x6e>
        }
    }

    delay(10);
 808228c:	200a      	movs	r0, #10
 808228e:	f007 fc83 	bl	8089b98 <delay>


    // String placeHolder;
    receivedData = Serial1.readString();
 8082292:	f008 fa83 	bl	808a79c <_Z22__fetch_global_Serial1v>
 8082296:	4601      	mov	r1, r0
 8082298:	f107 0020 	add.w	r0, r7, #32
 808229c:	f007 fa5c 	bl	8089758 <_ZN6Stream10readStringEv>
 80822a0:	f107 0120 	add.w	r1, r7, #32
 80822a4:	f107 0010 	add.w	r0, r7, #16
 80822a8:	f006 ff74 	bl	8089194 <_ZN6StringaSEOS_>
 80822ac:	f107 0020 	add.w	r0, r7, #32
 80822b0:	f006 fedc 	bl	808906c <_ZN6StringD1Ev>
    char buffer[receivedData.length()];
 80822b4:	69ba      	ldr	r2, [r7, #24]
		{getBytes((unsigned char *)buf, bufsize, index);}
 80822b6:	f107 0010 	add.w	r0, r7, #16
 80822ba:	1dd3      	adds	r3, r2, #7
 80822bc:	f023 0307 	bic.w	r3, r3, #7
 80822c0:	ebad 0d03 	sub.w	sp, sp, r3
 80822c4:	4669      	mov	r1, sp
 80822c6:	2300      	movs	r3, #0
 80822c8:	f007 f855 	bl	8089376 <_ZNK6String8getBytesEPhjj>
    receivedData.toCharArray(buffer, receivedData.length());
    String deviceSection;
 80822cc:	492f      	ldr	r1, [pc, #188]	; (808238c <_Z16getEspAQSyncDatav+0x1b4>)
 80822ce:	f107 0020 	add.w	r0, r7, #32
 80822d2:	f006 ff15 	bl	8089100 <_ZN6StringC1EPKc>
    Serial.println("This is char version of recieved String: ");
 80822d6:	f008 f943 	bl	808a560 <_Z16_fetch_usbserialv>
 80822da:	492d      	ldr	r1, [pc, #180]	; (8082390 <_Z16getEspAQSyncDatav+0x1b8>)
 80822dc:	f007 f8e7 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println(buffer);
 80822e0:	f008 f93e 	bl	808a560 <_Z16_fetch_usbserialv>
 80822e4:	4669      	mov	r1, sp
    char buffer[receivedData.length()];
 80822e6:	466d      	mov	r5, sp
    Serial.println(buffer);
 80822e8:	f007 f8e1 	bl	80894ae <_ZN5Print7printlnEPKc>

    for (int i = 1; i < strlen(buffer); i++) {
 80822ec:	2401      	movs	r4, #1
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80822ee:	4e27      	ldr	r6, [pc, #156]	; (808238c <_Z16getEspAQSyncDatav+0x1b4>)
 80822f0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8082398 <_Z16getEspAQSyncDatav+0x1c0>
        if (buffer[i] == '@' && deviceSection != "" && deviceSection != "@") {
            //if (Particle.connected() && serial_cellular_enabled) {
                Serial.println("This is what I am publishing: ");
 80822f4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 808239c <_Z16getEspAQSyncDatav+0x1c4>
    for (int i = 1; i < strlen(buffer); i++) {
 80822f8:	4628      	mov	r0, r5
 80822fa:	f009 fe62 	bl	808bfc2 <strlen>
 80822fe:	42a0      	cmp	r0, r4
 8082300:	d927      	bls.n	8082352 <_Z16getEspAQSyncDatav+0x17a>
        if (buffer[i] == '@' && deviceSection != "" && deviceSection != "@") {
 8082302:	5d2b      	ldrb	r3, [r5, r4]
 8082304:	2b40      	cmp	r3, #64	; 0x40
 8082306:	d006      	beq.n	8082316 <_Z16getEspAQSyncDatav+0x13e>
	String & operator += (char c)			{concat(c); return (*this);}
 8082308:	5d29      	ldrb	r1, [r5, r4]
 808230a:	f107 0020 	add.w	r0, r7, #32
 808230e:	f006 ffe8 	bl	80892e2 <_ZN6String6concatEc>
    for (int i = 1; i < strlen(buffer); i++) {
 8082312:	3401      	adds	r4, #1
 8082314:	e7f0      	b.n	80822f8 <_Z16getEspAQSyncDatav+0x120>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8082316:	4631      	mov	r1, r6
 8082318:	f107 0020 	add.w	r0, r7, #32
 808231c:	f007 f80e 	bl	808933c <_ZNK6String6equalsEPKc>
        if (buffer[i] == '@' && deviceSection != "" && deviceSection != "@") {
 8082320:	2800      	cmp	r0, #0
 8082322:	d1f1      	bne.n	8082308 <_Z16getEspAQSyncDatav+0x130>
 8082324:	4641      	mov	r1, r8
 8082326:	f107 0020 	add.w	r0, r7, #32
 808232a:	f007 f807 	bl	808933c <_ZNK6String6equalsEPKc>
 808232e:	2800      	cmp	r0, #0
 8082330:	d1ea      	bne.n	8082308 <_Z16getEspAQSyncDatav+0x130>
                Serial.println("This is what I am publishing: ");
 8082332:	f008 f915 	bl	808a560 <_Z16_fetch_usbserialv>
 8082336:	4649      	mov	r1, r9
 8082338:	f007 f8b9 	bl	80894ae <_ZN5Print7printlnEPKc>
                Serial.println(deviceSection);
 808233c:	f008 f910 	bl	808a560 <_Z16_fetch_usbserialv>
 8082340:	6a39      	ldr	r1, [r7, #32]
 8082342:	f007 f8b4 	bl	80894ae <_ZN5Print7printlnEPKc>
                //Particle.publish("AQSync", deviceSection, PRIVATE);
                //Particle.process(); //attempt at ensuring the publish is complete before sleeping
                deviceSection = "";
 8082346:	4631      	mov	r1, r6
 8082348:	f107 0020 	add.w	r0, r7, #32
 808234c:	f006 ff2a 	bl	80891a4 <_ZN6StringaSEPKc>
 8082350:	e7df      	b.n	8082312 <_Z16getEspAQSyncDatav+0x13a>
    String deviceSection;
 8082352:	f107 0020 	add.w	r0, r7, #32
 8082356:	f006 fe89 	bl	808906c <_ZN6StringD1Ev>
    String receivedData = " ";
 808235a:	f107 0010 	add.w	r0, r7, #16
 808235e:	f006 fe85 	bl	808906c <_ZN6StringD1Ev>
    String getAQSyncData = "Z&";
 8082362:	4638      	mov	r0, r7
 8082364:	f006 fe82 	bl	808906c <_ZN6StringD1Ev>
            //writeLogFile("using string array index 0, not logging");
          }
    }
    return ozone_value;
    //parseOzoneString(receivedData);*/
}
 8082368:	3734      	adds	r7, #52	; 0x34
 808236a:	46bd      	mov	sp, r7
 808236c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082370:	00000000 	.word	0x00000000
 8082374:	40cd4c00 	.word	0x40cd4c00
 8082378:	0808e08b 	.word	0x0808e08b
 808237c:	200005e8 	.word	0x200005e8
 8082380:	0808fd52 	.word	0x0808fd52
 8082384:	0808e08e 	.word	0x0808e08e
 8082388:	3ff00000 	.word	0x3ff00000
 808238c:	08090075 	.word	0x08090075
 8082390:	0808e0ac 	.word	0x0808e0ac
 8082394:	0808e0d6 	.word	0x0808e0d6
 8082398:	0808e111 	.word	0x0808e111
 808239c:	0808e113 	.word	0x0808e113

080823a0 <_Z16goToSleepBatteryv>:
    //System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
    System.reset();
}

void goToSleepBattery(void)
{
 80823a0:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80823a2:	4c2c      	ldr	r4, [pc, #176]	; (8082454 <_Z16goToSleepBatteryv+0xb4>)
 80823a4:	2101      	movs	r1, #1
 80823a6:	8820      	ldrh	r0, [r4, #0]
 80823a8:	f008 fb99 	bl	808aade <digitalWrite>
    delay(250);                   // waits for a second
 80823ac:	20fa      	movs	r0, #250	; 0xfa
 80823ae:	f007 fbf3 	bl	8089b98 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80823b2:	2100      	movs	r1, #0
 80823b4:	8820      	ldrh	r0, [r4, #0]
 80823b6:	f008 fb92 	bl	808aade <digitalWrite>
    delay(250);                   // waits for a second
 80823ba:	20fa      	movs	r0, #250	; 0xfa
 80823bc:	f007 fbec 	bl	8089b98 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80823c0:	2101      	movs	r1, #1
 80823c2:	8820      	ldrh	r0, [r4, #0]
 80823c4:	f008 fb8b 	bl	808aade <digitalWrite>
    delay(250);                   // waits for a second
 80823c8:	20fa      	movs	r0, #250	; 0xfa
 80823ca:	f007 fbe5 	bl	8089b98 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80823ce:	2100      	movs	r1, #0
 80823d0:	8820      	ldrh	r0, [r4, #0]
 80823d2:	f008 fb84 	bl	808aade <digitalWrite>
    delay(250);                   // waits for a second
 80823d6:	20fa      	movs	r0, #250	; 0xfa
 80823d8:	f007 fbde 	bl	8089b98 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80823dc:	2101      	movs	r1, #1
 80823de:	8820      	ldrh	r0, [r4, #0]
 80823e0:	f008 fb7d 	bl	808aade <digitalWrite>
    delay(250);                   // waits for a second
 80823e4:	20fa      	movs	r0, #250	; 0xfa
 80823e6:	f007 fbd7 	bl	8089b98 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80823ea:	2100      	movs	r1, #0
 80823ec:	8820      	ldrh	r0, [r4, #0]
 80823ee:	f008 fb76 	bl	808aade <digitalWrite>
    delay(250);                   // waits for a second
 80823f2:	20fa      	movs	r0, #250	; 0xfa
 80823f4:	f007 fbd0 	bl	8089b98 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 80823f8:	2101      	movs	r1, #1
 80823fa:	8820      	ldrh	r0, [r4, #0]
 80823fc:	f008 fb6f 	bl	808aade <digitalWrite>
    delay(250);                   // waits for a second
 8082400:	20fa      	movs	r0, #250	; 0xfa
 8082402:	f007 fbc9 	bl	8089b98 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082406:	2100      	movs	r1, #0
 8082408:	8820      	ldrh	r0, [r4, #0]
 808240a:	f008 fb68 	bl	808aade <digitalWrite>
    delay(250);                   // waits for a second
 808240e:	20fa      	movs	r0, #250	; 0xfa
 8082410:	f007 fbc2 	bl	8089b98 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082414:	2101      	movs	r1, #1
 8082416:	8820      	ldrh	r0, [r4, #0]
 8082418:	f008 fb61 	bl	808aade <digitalWrite>
    delay(250);                   // waits for a second
 808241c:	20fa      	movs	r0, #250	; 0xfa
 808241e:	f007 fbbb 	bl	8089b98 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082422:	2100      	movs	r1, #0
 8082424:	8820      	ldrh	r0, [r4, #0]
 8082426:	f008 fb5a 	bl	808aade <digitalWrite>
    delay(250);                   // waits for a second
 808242a:	20fa      	movs	r0, #250	; 0xfa
 808242c:	f007 fbb4 	bl	8089b98 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082430:	2101      	movs	r1, #1
 8082432:	8820      	ldrh	r0, [r4, #0]
 8082434:	f008 fb53 	bl	808aade <digitalWrite>
    delay(250);                   // waits for a second
 8082438:	20fa      	movs	r0, #250	; 0xfa
 808243a:	f007 fbad 	bl	8089b98 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808243e:	8820      	ldrh	r0, [r4, #0]
 8082440:	2100      	movs	r1, #0
 8082442:	f008 fb4c 	bl	808aade <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);
}
 8082446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeRegister(7, 0b01101011);   //turn off batfet
 808244a:	216b      	movs	r1, #107	; 0x6b
 808244c:	2007      	movs	r0, #7
 808244e:	f7fe bbdb 	b.w	8080c08 <_Z13writeRegisterhh>
 8082452:	bf00      	nop
 8082454:	200000cc 	.word	0x200000cc

08082458 <_Z8resetESPv>:

void resetESP(void)
{
 8082458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    digitalWrite(esp_wroom_en, LOW);
 808245a:	4f17      	ldr	r7, [pc, #92]	; (80824b8 <_Z8resetESPv+0x60>)
    digitalWrite(plantower_en, LOW);
 808245c:	4e17      	ldr	r6, [pc, #92]	; (80824bc <_Z8resetESPv+0x64>)
    digitalWrite(esp_wroom_en, LOW);
 808245e:	8838      	ldrh	r0, [r7, #0]
    digitalWrite(blower_en, LOW);
 8082460:	4d17      	ldr	r5, [pc, #92]	; (80824c0 <_Z8resetESPv+0x68>)
    digitalWrite(esp_wroom_en, LOW);
 8082462:	2100      	movs	r1, #0
 8082464:	f008 fb3b 	bl	808aade <digitalWrite>
    digitalWrite(co2_en, LOW);
 8082468:	4c16      	ldr	r4, [pc, #88]	; (80824c4 <_Z8resetESPv+0x6c>)
    digitalWrite(plantower_en, LOW);
 808246a:	8830      	ldrh	r0, [r6, #0]
 808246c:	2100      	movs	r1, #0
 808246e:	f008 fb36 	bl	808aade <digitalWrite>
    digitalWrite(blower_en, LOW);
 8082472:	8828      	ldrh	r0, [r5, #0]
 8082474:	2100      	movs	r1, #0
 8082476:	f008 fb32 	bl	808aade <digitalWrite>
    digitalWrite(co2_en, LOW);
 808247a:	2100      	movs	r1, #0
 808247c:	8820      	ldrh	r0, [r4, #0]
 808247e:	f008 fb2e 	bl	808aade <digitalWrite>
    delay(1000);
 8082482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8082486:	f007 fb87 	bl	8089b98 <delay>
    digitalWrite(esp_wroom_en, HIGH);
 808248a:	8838      	ldrh	r0, [r7, #0]
 808248c:	2101      	movs	r1, #1
 808248e:	f008 fb26 	bl	808aade <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 8082492:	8830      	ldrh	r0, [r6, #0]
 8082494:	2101      	movs	r1, #1
 8082496:	f008 fb22 	bl	808aade <digitalWrite>
    digitalWrite(blower_en, HIGH);
 808249a:	8828      	ldrh	r0, [r5, #0]
 808249c:	2101      	movs	r1, #1
 808249e:	f008 fb1e 	bl	808aade <digitalWrite>
    digitalWrite(co2_en, HIGH);
 80824a2:	8820      	ldrh	r0, [r4, #0]
 80824a4:	2101      	movs	r1, #1
 80824a6:	f008 fb1a 	bl	808aade <digitalWrite>
    delay(1000);
}
 80824aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    delay(1000);
 80824ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80824b2:	f007 bb71 	b.w	8089b98 <delay>
 80824b6:	bf00      	nop
 80824b8:	20000090 	.word	0x20000090
 80824bc:	200000c8 	.word	0x200000c8
 80824c0:	20000088 	.word	0x20000088
 80824c4:	2000008c 	.word	0x2000008c

080824c8 <_Z12outputCOtoPIv>:
    }
    Serial.println("Exiting serial menu...");
}

void outputCOtoPI(void)
{
 80824c8:	b500      	push	{lr}
 80824ca:	b08f      	sub	sp, #60	; 0x3c
    String CO_string = "*";
 80824cc:	4983      	ldr	r1, [pc, #524]	; (80826dc <_Z12outputCOtoPIv+0x214>)
 80824ce:	a802      	add	r0, sp, #8
 80824d0:	f006 fe16 	bl	8089100 <_ZN6StringC1EPKc>
    Serial.println("Outputting CO to PI.");
 80824d4:	f008 f844 	bl	808a560 <_Z16_fetch_usbserialv>
 80824d8:	4981      	ldr	r1, [pc, #516]	; (80826e0 <_Z12outputCOtoPIv+0x218>)
 80824da:	f006 ffe8 	bl	80894ae <_ZN5Print7printlnEPKc>

    CO_string += String(measurement_number, 0) + ",";
 80824de:	2300      	movs	r3, #0
 80824e0:	9300      	str	r3, [sp, #0]
 80824e2:	4b80      	ldr	r3, [pc, #512]	; (80826e4 <_Z12outputCOtoPIv+0x21c>)
 80824e4:	a806      	add	r0, sp, #24
 80824e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80824ea:	f006 feba 	bl	8089262 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80824ee:	a906      	add	r1, sp, #24
 80824f0:	a80a      	add	r0, sp, #40	; 0x28
 80824f2:	f006 fe44 	bl	808917e <_ZN6StringC1ERKS_>
 80824f6:	497c      	ldr	r1, [pc, #496]	; (80826e8 <_Z12outputCOtoPIv+0x220>)
 80824f8:	a80a      	add	r0, sp, #40	; 0x28
 80824fa:	f006 ff0b 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 80824fe:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082500:	a802      	add	r0, sp, #8
 8082502:	f006 fedb 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082506:	a80a      	add	r0, sp, #40	; 0x28
 8082508:	f006 fdb0 	bl	808906c <_ZN6StringD1Ev>
 808250c:	a806      	add	r0, sp, #24
 808250e:	f006 fdad 	bl	808906c <_ZN6StringD1Ev>
    CO_string += String(CO_float_A, 3) + ",";
 8082512:	4b76      	ldr	r3, [pc, #472]	; (80826ec <_Z12outputCOtoPIv+0x224>)
 8082514:	2203      	movs	r2, #3
 8082516:	6819      	ldr	r1, [r3, #0]
 8082518:	a806      	add	r0, sp, #24
 808251a:	f006 fe8b 	bl	8089234 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 808251e:	a906      	add	r1, sp, #24
 8082520:	a80a      	add	r0, sp, #40	; 0x28
 8082522:	f006 fe2c 	bl	808917e <_ZN6StringC1ERKS_>
 8082526:	4970      	ldr	r1, [pc, #448]	; (80826e8 <_Z12outputCOtoPIv+0x220>)
 8082528:	a80a      	add	r0, sp, #40	; 0x28
 808252a:	f006 fef3 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 808252e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082530:	a802      	add	r0, sp, #8
 8082532:	f006 fec3 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082536:	a80a      	add	r0, sp, #40	; 0x28
 8082538:	f006 fd98 	bl	808906c <_ZN6StringD1Ev>
 808253c:	a806      	add	r0, sp, #24
 808253e:	f006 fd95 	bl	808906c <_ZN6StringD1Ev>
    CO_string += String(CO_float_B, 3) + ",";
 8082542:	4b6b      	ldr	r3, [pc, #428]	; (80826f0 <_Z12outputCOtoPIv+0x228>)
 8082544:	2203      	movs	r2, #3
 8082546:	6819      	ldr	r1, [r3, #0]
 8082548:	a806      	add	r0, sp, #24
 808254a:	f006 fe73 	bl	8089234 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 808254e:	a906      	add	r1, sp, #24
 8082550:	a80a      	add	r0, sp, #40	; 0x28
 8082552:	f006 fe14 	bl	808917e <_ZN6StringC1ERKS_>
 8082556:	4964      	ldr	r1, [pc, #400]	; (80826e8 <_Z12outputCOtoPIv+0x220>)
 8082558:	a80a      	add	r0, sp, #40	; 0x28
 808255a:	f006 fedb 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 808255e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082560:	a802      	add	r0, sp, #8
 8082562:	f006 feab 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082566:	a80a      	add	r0, sp, #40	; 0x28
 8082568:	f006 fd80 	bl	808906c <_ZN6StringD1Ev>
 808256c:	a806      	add	r0, sp, #24
 808256e:	f006 fd7d 	bl	808906c <_ZN6StringD1Ev>
    if (gps.get_latitude() != 0)
 8082572:	4860      	ldr	r0, [pc, #384]	; (80826f4 <_Z12outputCOtoPIv+0x22c>)
 8082574:	f003 ff32 	bl	80863dc <_ZN3GPS12get_latitudeEv>
 8082578:	2200      	movs	r2, #0
 808257a:	2300      	movs	r3, #0
 808257c:	f008 ffb8 	bl	808b4f0 <__aeabi_dcmpeq>
 8082580:	2800      	cmp	r0, #0
 8082582:	f040 809c 	bne.w	80826be <_Z12outputCOtoPIv+0x1f6>
    {
        if (gps.get_nsIndicator() == 0)
 8082586:	485b      	ldr	r0, [pc, #364]	; (80826f4 <_Z12outputCOtoPIv+0x22c>)
 8082588:	f003 ff43 	bl	8086412 <_ZN3GPS15get_nsIndicatorEv>
 808258c:	b918      	cbnz	r0, 8082596 <_Z12outputCOtoPIv+0xce>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808258e:	495a      	ldr	r1, [pc, #360]	; (80826f8 <_Z12outputCOtoPIv+0x230>)
 8082590:	a802      	add	r0, sp, #8
 8082592:	f006 fe97 	bl	80892c4 <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_latitude()) + ",";
 8082596:	4857      	ldr	r0, [pc, #348]	; (80826f4 <_Z12outputCOtoPIv+0x22c>)
 8082598:	f003 ff20 	bl	80863dc <_ZN3GPS12get_latitudeEv>
 808259c:	460b      	mov	r3, r1
 808259e:	2106      	movs	r1, #6
 80825a0:	4602      	mov	r2, r0
 80825a2:	9100      	str	r1, [sp, #0]
 80825a4:	a806      	add	r0, sp, #24
 80825a6:	f006 fe5c 	bl	8089262 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80825aa:	a906      	add	r1, sp, #24
 80825ac:	a80a      	add	r0, sp, #40	; 0x28
 80825ae:	f006 fde6 	bl	808917e <_ZN6StringC1ERKS_>
    }
    else
    {
        CO_string += String(geolocation_latitude) + ",";
 80825b2:	494d      	ldr	r1, [pc, #308]	; (80826e8 <_Z12outputCOtoPIv+0x220>)
 80825b4:	a80a      	add	r0, sp, #40	; 0x28
 80825b6:	f006 fead 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 80825ba:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80825bc:	a802      	add	r0, sp, #8
 80825be:	f006 fe7d 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80825c2:	a80a      	add	r0, sp, #40	; 0x28
 80825c4:	f006 fd52 	bl	808906c <_ZN6StringD1Ev>
 80825c8:	a806      	add	r0, sp, #24
 80825ca:	f006 fd4f 	bl	808906c <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 80825ce:	4849      	ldr	r0, [pc, #292]	; (80826f4 <_Z12outputCOtoPIv+0x22c>)
 80825d0:	f003 ff09 	bl	80863e6 <_ZN3GPS13get_longitudeEv>
 80825d4:	2200      	movs	r2, #0
 80825d6:	2300      	movs	r3, #0
 80825d8:	f008 ff8a 	bl	808b4f0 <__aeabi_dcmpeq>
 80825dc:	2800      	cmp	r0, #0
 80825de:	d173      	bne.n	80826c8 <_Z12outputCOtoPIv+0x200>
    {
        if (gps.get_ewIndicator() == 0x01)
 80825e0:	4844      	ldr	r0, [pc, #272]	; (80826f4 <_Z12outputCOtoPIv+0x22c>)
 80825e2:	f003 ff19 	bl	8086418 <_ZN3GPS15get_ewIndicatorEv>
 80825e6:	2801      	cmp	r0, #1
 80825e8:	d103      	bne.n	80825f2 <_Z12outputCOtoPIv+0x12a>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80825ea:	4943      	ldr	r1, [pc, #268]	; (80826f8 <_Z12outputCOtoPIv+0x230>)
 80825ec:	a802      	add	r0, sp, #8
 80825ee:	f006 fe69 	bl	80892c4 <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_longitude()) + ",";
 80825f2:	4840      	ldr	r0, [pc, #256]	; (80826f4 <_Z12outputCOtoPIv+0x22c>)
 80825f4:	f003 fef7 	bl	80863e6 <_ZN3GPS13get_longitudeEv>
 80825f8:	460b      	mov	r3, r1
 80825fa:	2106      	movs	r1, #6
 80825fc:	4602      	mov	r2, r0
 80825fe:	9100      	str	r1, [sp, #0]
 8082600:	a806      	add	r0, sp, #24
 8082602:	f006 fe2e 	bl	8089262 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8082606:	a906      	add	r1, sp, #24
 8082608:	a80a      	add	r0, sp, #40	; 0x28
 808260a:	f006 fdb8 	bl	808917e <_ZN6StringC1ERKS_>
    }
    else
    {
        CO_string += String(geolocation_longitude) + ",";
 808260e:	4936      	ldr	r1, [pc, #216]	; (80826e8 <_Z12outputCOtoPIv+0x220>)
 8082610:	a80a      	add	r0, sp, #40	; 0x28
 8082612:	f006 fe7f 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8082616:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082618:	a802      	add	r0, sp, #8
 808261a:	f006 fe4f 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808261e:	a80a      	add	r0, sp, #40	; 0x28
 8082620:	f006 fd24 	bl	808906c <_ZN6StringD1Ev>
 8082624:	a806      	add	r0, sp, #24
 8082626:	f006 fd21 	bl	808906c <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 808262a:	4832      	ldr	r0, [pc, #200]	; (80826f4 <_Z12outputCOtoPIv+0x22c>)
 808262c:	f003 fedb 	bl	80863e6 <_ZN3GPS13get_longitudeEv>
 8082630:	2200      	movs	r2, #0
 8082632:	2300      	movs	r3, #0
 8082634:	f008 ff5c 	bl	808b4f0 <__aeabi_dcmpeq>
 8082638:	2800      	cmp	r0, #0
 808263a:	d14a      	bne.n	80826d2 <_Z12outputCOtoPIv+0x20a>
    {
        CO_string += String(gps.get_horizontalDilution() / 10.0) + ",";
 808263c:	482d      	ldr	r0, [pc, #180]	; (80826f4 <_Z12outputCOtoPIv+0x22c>)
 808263e:	f003 fed7 	bl	80863f0 <_ZN3GPS22get_horizontalDilutionEv>
 8082642:	f008 fc83 	bl	808af4c <__aeabi_i2d>
 8082646:	2200      	movs	r2, #0
 8082648:	4b2c      	ldr	r3, [pc, #176]	; (80826fc <_Z12outputCOtoPIv+0x234>)
 808264a:	f008 fe13 	bl	808b274 <__aeabi_ddiv>
 808264e:	460b      	mov	r3, r1
 8082650:	2106      	movs	r1, #6
 8082652:	4602      	mov	r2, r0
 8082654:	9100      	str	r1, [sp, #0]
 8082656:	a806      	add	r0, sp, #24
 8082658:	f006 fe03 	bl	8089262 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 808265c:	a906      	add	r1, sp, #24
 808265e:	a80a      	add	r0, sp, #40	; 0x28
 8082660:	f006 fd8d 	bl	808917e <_ZN6StringC1ERKS_>
    }
    else
    {
        CO_string += String(geolocation_accuracy) + ",";
 8082664:	4920      	ldr	r1, [pc, #128]	; (80826e8 <_Z12outputCOtoPIv+0x220>)
 8082666:	a80a      	add	r0, sp, #40	; 0x28
 8082668:	f006 fe54 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 808266c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808266e:	a802      	add	r0, sp, #8
 8082670:	f006 fe24 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082674:	a80a      	add	r0, sp, #40	; 0x28
 8082676:	f006 fcf9 	bl	808906c <_ZN6StringD1Ev>
 808267a:	a806      	add	r0, sp, #24
 808267c:	f006 fcf6 	bl	808906c <_ZN6StringD1Ev>
    }

    CO_string += String(Time.format(systemTime, "%d/%m/%y,%H:%M:%S"));
 8082680:	4b1f      	ldr	r3, [pc, #124]	; (8082700 <_Z12outputCOtoPIv+0x238>)
 8082682:	a80a      	add	r0, sp, #40	; 0x28
 8082684:	9300      	str	r3, [sp, #0]
 8082686:	4b1f      	ldr	r3, [pc, #124]	; (8082704 <_Z12outputCOtoPIv+0x23c>)
 8082688:	491f      	ldr	r1, [pc, #124]	; (8082708 <_Z12outputCOtoPIv+0x240>)
 808268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808268e:	f007 f9c3 	bl	8089a18 <_ZN9TimeClass6formatExPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082692:	a90a      	add	r1, sp, #40	; 0x28
 8082694:	a802      	add	r0, sp, #8
 8082696:	f006 fe11 	bl	80892bc <_ZN6String6concatERKS_>
 808269a:	a80a      	add	r0, sp, #40	; 0x28
 808269c:	f006 fce6 	bl	808906c <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80826a0:	491a      	ldr	r1, [pc, #104]	; (808270c <_Z12outputCOtoPIv+0x244>)
 80826a2:	a802      	add	r0, sp, #8
 80826a4:	f006 fe0e 	bl	80892c4 <_ZN6String6concatEPKc>
    //get a current time string

    CO_string += "\n\r&";
    Serial1.print(CO_string);
 80826a8:	f008 f878 	bl	808a79c <_Z22__fetch_global_Serial1v>
 80826ac:	9902      	ldr	r1, [sp, #8]
 80826ae:	f006 feeb 	bl	8089488 <_ZN5Print5printEPKc>
    String CO_string = "*";
 80826b2:	a802      	add	r0, sp, #8
 80826b4:	f006 fcda 	bl	808906c <_ZN6StringD1Ev>
    //send ending delimeter
    //Serial1.print("&");
}
 80826b8:	b00f      	add	sp, #60	; 0x3c
 80826ba:	f85d fb04 	ldr.w	pc, [sp], #4
        CO_string += String(geolocation_latitude) + ",";
 80826be:	4914      	ldr	r1, [pc, #80]	; (8082710 <_Z12outputCOtoPIv+0x248>)
 80826c0:	a806      	add	r0, sp, #24
 80826c2:	f006 fd1d 	bl	8089100 <_ZN6StringC1EPKc>
 80826c6:	e770      	b.n	80825aa <_Z12outputCOtoPIv+0xe2>
        CO_string += String(geolocation_longitude) + ",";
 80826c8:	4912      	ldr	r1, [pc, #72]	; (8082714 <_Z12outputCOtoPIv+0x24c>)
 80826ca:	a806      	add	r0, sp, #24
 80826cc:	f006 fd18 	bl	8089100 <_ZN6StringC1EPKc>
 80826d0:	e799      	b.n	8082606 <_Z12outputCOtoPIv+0x13e>
        CO_string += String(geolocation_accuracy) + ",";
 80826d2:	4911      	ldr	r1, [pc, #68]	; (8082718 <_Z12outputCOtoPIv+0x250>)
 80826d4:	a806      	add	r0, sp, #24
 80826d6:	f006 fd13 	bl	8089100 <_ZN6StringC1EPKc>
 80826da:	e7bf      	b.n	808265c <_Z12outputCOtoPIv+0x194>
 80826dc:	0808e132 	.word	0x0808e132
 80826e0:	0808e134 	.word	0x0808e134
 80826e4:	20000740 	.word	0x20000740
 80826e8:	0808e05c 	.word	0x0808e05c
 80826ec:	200002c0 	.word	0x200002c0
 80826f0:	200002c4 	.word	0x200002c4
 80826f4:	20000670 	.word	0x20000670
 80826f8:	0808e149 	.word	0x0808e149
 80826fc:	40240000 	.word	0x40240000
 8082700:	0808e14b 	.word	0x0808e14b
 8082704:	20000c50 	.word	0x20000c50
 8082708:	20000cdc 	.word	0x20000cdc
 808270c:	0808e15d 	.word	0x0808e15d
 8082710:	200000a6 	.word	0x200000a6
 8082714:	200000b2 	.word	0x200000b2
 8082718:	200000a0 	.word	0x200000a0

0808271c <_Z26serialIncreaseInputCurrentv>:
        Serial.println("Failed writing string");
    }
}

void serialIncreaseInputCurrent(void)
{
 808271c:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 808271e:	481d      	ldr	r0, [pc, #116]	; (8082794 <_Z26serialIncreaseInputCurrentv+0x78>)
 8082720:	f006 f9d2 	bl	8088ac8 <_ZN4PMIC20getInputCurrentLimitEv>
 8082724:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8082726:	f007 ff1b 	bl	808a560 <_Z16_fetch_usbserialv>
 808272a:	462a      	mov	r2, r5
 808272c:	491a      	ldr	r1, [pc, #104]	; (8082798 <_Z26serialIncreaseInputCurrentv+0x7c>)
 808272e:	f7fe f997 	bl	8080a60 <_ZN5Print6printfEPKcz>

    if (inputCurrent == 100)
 8082732:	2d64      	cmp	r5, #100	; 0x64
 8082734:	d01f      	beq.n	8082776 <_Z26serialIncreaseInputCurrentv+0x5a>
    }
    else if (inputCurrent == 100)
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 150)
 8082736:	2d96      	cmp	r5, #150	; 0x96
 8082738:	d01f      	beq.n	808277a <_Z26serialIncreaseInputCurrentv+0x5e>
    {
        inputCurrent = 500;
    }
    else if (inputCurrent == 500)
 808273a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808273e:	d01f      	beq.n	8082780 <_Z26serialIncreaseInputCurrentv+0x64>
    {
        inputCurrent = 900;
    }
    else if (inputCurrent == 900)
 8082740:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8082744:	d01f      	beq.n	8082786 <_Z26serialIncreaseInputCurrentv+0x6a>
    {
        inputCurrent = 1200;
    }
    else if (inputCurrent == 1200)
 8082746:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 808274a:	f240 54dc 	movw	r4, #1500	; 0x5dc
 808274e:	d007      	beq.n	8082760 <_Z26serialIncreaseInputCurrentv+0x44>
    {
        inputCurrent = 1500;
    }
    else if (inputCurrent == 1500)
 8082750:	42a5      	cmp	r5, r4
 8082752:	d01b      	beq.n	808278c <_Z26serialIncreaseInputCurrentv+0x70>
    {
        inputCurrent = 2000;
    }
    else if (inputCurrent == 2000)
    {
        inputCurrent = 3000;
 8082754:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8082758:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 808275c:	bf18      	it	ne
 808275e:	462c      	movne	r4, r5
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 8082760:	b2a1      	uxth	r1, r4
 8082762:	480c      	ldr	r0, [pc, #48]	; (8082794 <_Z26serialIncreaseInputCurrentv+0x78>)
 8082764:	f006 f9f1 	bl	8088b4a <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 8082768:	f007 fefa 	bl	808a560 <_Z16_fetch_usbserialv>
 808276c:	4622      	mov	r2, r4
 808276e:	490b      	ldr	r1, [pc, #44]	; (808279c <_Z26serialIncreaseInputCurrentv+0x80>)
 8082770:	f7fe f976 	bl	8080a60 <_ZN5Print6printfEPKcz>
}
 8082774:	bd38      	pop	{r3, r4, r5, pc}
        inputCurrent = 150;
 8082776:	2496      	movs	r4, #150	; 0x96
 8082778:	e7f2      	b.n	8082760 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 500;
 808277a:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 808277e:	e7ef      	b.n	8082760 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 900;
 8082780:	f44f 7461 	mov.w	r4, #900	; 0x384
 8082784:	e7ec      	b.n	8082760 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 1200;
 8082786:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 808278a:	e7e9      	b.n	8082760 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 2000;
 808278c:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 8082790:	e7e6      	b.n	8082760 <_Z26serialIncreaseInputCurrentv+0x44>
 8082792:	bf00      	nop
 8082794:	20000770 	.word	0x20000770
 8082798:	0808e161 	.word	0x0808e161
 808279c:	0808e17f 	.word	0x0808e17f

080827a0 <_Z27serialIncreaseChargeCurrentv>:

void serialIncreaseChargeCurrent(void)
{
 80827a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 80827a2:	482d      	ldr	r0, [pc, #180]	; (8082858 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 80827a4:	f006 f99c 	bl	8088ae0 <_ZN4PMIC16getChargeCurrentEv>
    //bit 7
    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
 80827a8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80827ac:	bf14      	ite	ne
 80827ae:	f44f 6500 	movne.w	r5, #2048	; 0x800
 80827b2:	2500      	moveq	r5, #0
    byte chargeCurrent = pmic.getChargeCurrent();
 80827b4:	4604      	mov	r4, r0
    }
    //bit 6
    if (chargeCurrent & 0x40)
 80827b6:	0643      	lsls	r3, r0, #25
    {
        total_current += 1024;
 80827b8:	bf48      	it	mi
 80827ba:	f505 6580 	addmi.w	r5, r5, #1024	; 0x400
    }
    //bit 5
    if (chargeCurrent & 0x20)
 80827be:	0686      	lsls	r6, r0, #26
    {
        total_current += 512;
 80827c0:	bf48      	it	mi
 80827c2:	f505 7500 	addmi.w	r5, r5, #512	; 0x200
    }
    //bit 4
    if (chargeCurrent & 0x10) {
 80827c6:	06e0      	lsls	r0, r4, #27
        total_current += 256;
 80827c8:	bf48      	it	mi
 80827ca:	f505 7580 	addmi.w	r5, r5, #256	; 0x100
    }
    //bit 3
    if (chargeCurrent & 0x08)
 80827ce:	0721      	lsls	r1, r4, #28
    {
        total_current += 128;
 80827d0:	bf48      	it	mi
 80827d2:	3580      	addmi	r5, #128	; 0x80
    }
    //bit 2
    if (chargeCurrent & 0x04)
 80827d4:	0762      	lsls	r2, r4, #29
    {
        total_current += 64;
 80827d6:	bf48      	it	mi
 80827d8:	3540      	addmi	r5, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 80827da:	f007 fec1 	bl	808a560 <_Z16_fetch_usbserialv>
 80827de:	462a      	mov	r2, r5
 80827e0:	491e      	ldr	r1, [pc, #120]	; (808285c <_Z27serialIncreaseChargeCurrentv+0xbc>)
 80827e2:	f7fe f93d 	bl	8080a60 <_ZN5Print6printfEPKcz>
    chargeCurrent += 4;
 80827e6:	1d20      	adds	r0, r4, #4
    total_current = 0;

    if (chargeCurrent & 0x80)
 80827e8:	0603      	lsls	r3, r0, #24
    bool bit7 = 0;
 80827ea:	bf56      	itet	pl
 80827ec:	2100      	movpl	r1, #0
    {
        total_current += 2048;
 80827ee:	f44f 6500 	movmi.w	r5, #2048	; 0x800
    total_current = 0;
 80827f2:	460d      	movpl	r5, r1
    chargeCurrent += 4;
 80827f4:	b2c4      	uxtb	r4, r0
        bit7 = 1;
 80827f6:	bf48      	it	mi
 80827f8:	2101      	movmi	r1, #1
    }
    //bit 6
    if (chargeCurrent & 0x40)
 80827fa:	f014 0240 	ands.w	r2, r4, #64	; 0x40
    {
        total_current += 1024;
 80827fe:	bf1c      	itt	ne
 8082800:	f505 6580 	addne.w	r5, r5, #1024	; 0x400
        bit6 = 1;
 8082804:	2201      	movne	r2, #1
    }
    //bit 5
    if (chargeCurrent & 0x20)
 8082806:	f014 0320 	ands.w	r3, r4, #32
    {
        total_current += 512;
        bit5 = 1;
 808280a:	bf1c      	itt	ne
 808280c:	2301      	movne	r3, #1
        total_current += 512;
 808280e:	f505 7500 	addne.w	r5, r5, #512	; 0x200
    }
    //bit 4
    if (chargeCurrent & 0x10)
 8082812:	f014 0010 	ands.w	r0, r4, #16
    {
        total_current += 256;
 8082816:	bf1c      	itt	ne
 8082818:	f505 7580 	addne.w	r5, r5, #256	; 0x100
        bit4 = 1;
 808281c:	2001      	movne	r0, #1
    }
    //bit 3
    if (chargeCurrent & 0x08)
 808281e:	f014 0608 	ands.w	r6, r4, #8
    {
        total_current += 128;
 8082822:	bf1c      	itt	ne
 8082824:	3580      	addne	r5, #128	; 0x80
        bit3 = 1;
 8082826:	2601      	movne	r6, #1
    }
    //bit 2
    if (chargeCurrent & 0x04)
 8082828:	f014 0404 	ands.w	r4, r4, #4
    {
        total_current += 64;
        bit2 = 1;
 808282c:	bf18      	it	ne
 808282e:	2401      	movne	r4, #1
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8082830:	9000      	str	r0, [sp, #0]
 8082832:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8082836:	4808      	ldr	r0, [pc, #32]	; (8082858 <_Z27serialIncreaseChargeCurrentv+0xb8>)
        total_current += 64;
 8082838:	bf18      	it	ne
 808283a:	3540      	addne	r5, #64	; 0x40
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 808283c:	f006 f9e3 	bl	8088c06 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8082840:	4805      	ldr	r0, [pc, #20]	; (8082858 <_Z27serialIncreaseChargeCurrentv+0xb8>)
 8082842:	f006 f94d 	bl	8088ae0 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8082846:	f007 fe8b 	bl	808a560 <_Z16_fetch_usbserialv>
 808284a:	462a      	mov	r2, r5
 808284c:	4904      	ldr	r1, [pc, #16]	; (8082860 <_Z27serialIncreaseChargeCurrentv+0xc0>)
 808284e:	f7fe f907 	bl	8080a60 <_ZN5Print6printfEPKcz>
}
 8082852:	b004      	add	sp, #16
 8082854:	bd70      	pop	{r4, r5, r6, pc}
 8082856:	bf00      	nop
 8082858:	20000770 	.word	0x20000770
 808285c:	0808e19d 	.word	0x0808e19d
 8082860:	0808e1c6 	.word	0x0808e1c6

08082864 <_Z24serialGetWifiCredentialsv>:

void serialGetWifiCredentials(void)
{
 8082864:	b530      	push	{r4, r5, lr}
        operator const char*() const { return c_str(); }
 8082866:	4d5a      	ldr	r5, [pc, #360]	; (80829d0 <_Z24serialGetWifiCredentialsv+0x16c>)
 8082868:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 808286a:	f007 fe79 	bl	808a560 <_Z16_fetch_usbserialv>
 808286e:	4959      	ldr	r1, [pc, #356]	; (80829d4 <_Z24serialGetWifiCredentialsv+0x170>)
 8082870:	f006 fe0a 	bl	8089488 <_ZN5Print5printEPKc>
 8082874:	4c58      	ldr	r4, [pc, #352]	; (80829d8 <_Z24serialGetWifiCredentialsv+0x174>)
    Serial.println(ssid);
 8082876:	f007 fe73 	bl	808a560 <_Z16_fetch_usbserialv>
 808287a:	6829      	ldr	r1, [r5, #0]
 808287c:	f006 fe17 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082880:	f007 fe6e 	bl	808a560 <_Z16_fetch_usbserialv>
 8082884:	4955      	ldr	r1, [pc, #340]	; (80829dc <_Z24serialGetWifiCredentialsv+0x178>)
 8082886:	f006 fdff 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.println(password);
 808288a:	f007 fe69 	bl	808a560 <_Z16_fetch_usbserialv>
 808288e:	6821      	ldr	r1, [r4, #0]
 8082890:	f006 fe0d 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 8082894:	f007 fe64 	bl	808a560 <_Z16_fetch_usbserialv>
 8082898:	4951      	ldr	r1, [pc, #324]	; (80829e0 <_Z24serialGetWifiCredentialsv+0x17c>)
 808289a:	f006 fe08 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808289e:	f007 fe5f 	bl	808a560 <_Z16_fetch_usbserialv>
 80828a2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80828a6:	f006 ff55 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80828aa:	f007 fe59 	bl	808a560 <_Z16_fetch_usbserialv>
 80828ae:	220d      	movs	r2, #13
 80828b0:	4601      	mov	r1, r0
 80828b2:	4668      	mov	r0, sp
 80828b4:	f006 ff64 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    if (tempString.equals("bould"))
 80828b8:	4668      	mov	r0, sp
 80828ba:	494a      	ldr	r1, [pc, #296]	; (80829e4 <_Z24serialGetWifiCredentialsv+0x180>)
 80828bc:	f006 fd3e 	bl	808933c <_ZNK6String6equalsEPKc>
 80828c0:	2800      	cmp	r0, #0
 80828c2:	d074      	beq.n	80829ae <_Z24serialGetWifiCredentialsv+0x14a>
    {
        Serial.println("Password correct!");
 80828c4:	f007 fe4c 	bl	808a560 <_Z16_fetch_usbserialv>
 80828c8:	4947      	ldr	r1, [pc, #284]	; (80829e8 <_Z24serialGetWifiCredentialsv+0x184>)
 80828ca:	f006 fdf0 	bl	80894ae <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 80828ce:	f007 fe47 	bl	808a560 <_Z16_fetch_usbserialv>
 80828d2:	4946      	ldr	r1, [pc, #280]	; (80829ec <_Z24serialGetWifiCredentialsv+0x188>)
 80828d4:	f006 fdeb 	bl	80894ae <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 80828d8:	f007 fe42 	bl	808a560 <_Z16_fetch_usbserialv>
 80828dc:	f24c 3150 	movw	r1, #50000	; 0xc350
 80828e0:	f006 ff38 	bl	8089754 <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 80828e4:	f007 fe3c 	bl	808a560 <_Z16_fetch_usbserialv>
 80828e8:	220d      	movs	r2, #13
 80828ea:	4601      	mov	r1, r0
 80828ec:	a804      	add	r0, sp, #16
 80828ee:	f006 ff47 	bl	8089780 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 80828f2:	f007 fe35 	bl	808a560 <_Z16_fetch_usbserialv>
 80828f6:	493e      	ldr	r1, [pc, #248]	; (80829f0 <_Z24serialGetWifiCredentialsv+0x18c>)
 80828f8:	f006 fdc6 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 80828fc:	f007 fe30 	bl	808a560 <_Z16_fetch_usbserialv>
 8082900:	9904      	ldr	r1, [sp, #16]
 8082902:	f006 fdd4 	bl	80894ae <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8082906:	f007 fe2b 	bl	808a560 <_Z16_fetch_usbserialv>
 808290a:	493a      	ldr	r1, [pc, #232]	; (80829f4 <_Z24serialGetWifiCredentialsv+0x190>)
 808290c:	f006 fdcf 	bl	80894ae <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 8082910:	f007 fe26 	bl	808a560 <_Z16_fetch_usbserialv>
 8082914:	220d      	movs	r2, #13
 8082916:	4601      	mov	r1, r0
 8082918:	a808      	add	r0, sp, #32
 808291a:	f006 ff31 	bl	8089780 <_ZN6Stream15readStringUntilEc>
        if (ok.equals("y"))
 808291e:	4936      	ldr	r1, [pc, #216]	; (80829f8 <_Z24serialGetWifiCredentialsv+0x194>)
 8082920:	a808      	add	r0, sp, #32
 8082922:	f006 fd0b 	bl	808933c <_ZNK6String6equalsEPKc>
 8082926:	2800      	cmp	r0, #0
 8082928:	d04c      	beq.n	80829c4 <_Z24serialGetWifiCredentialsv+0x160>
        {
            Serial.println("Saving new ssid");
 808292a:	f007 fe19 	bl	808a560 <_Z16_fetch_usbserialv>
 808292e:	4933      	ldr	r1, [pc, #204]	; (80829fc <_Z24serialGetWifiCredentialsv+0x198>)
 8082930:	f006 fdbd 	bl	80894ae <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082934:	a904      	add	r1, sp, #16
 8082936:	4628      	mov	r0, r5
 8082938:	f006 fc12 	bl	8089160 <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 808293c:	f007 fe10 	bl	808a560 <_Z16_fetch_usbserialv>
 8082940:	492f      	ldr	r1, [pc, #188]	; (8082a00 <_Z24serialGetWifiCredentialsv+0x19c>)
 8082942:	f006 fdb4 	bl	80894ae <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082946:	f007 fe0b 	bl	808a560 <_Z16_fetch_usbserialv>
 808294a:	220d      	movs	r2, #13
 808294c:	4601      	mov	r1, r0
 808294e:	a80c      	add	r0, sp, #48	; 0x30
 8082950:	f006 ff16 	bl	8089780 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 8082954:	f007 fe04 	bl	808a560 <_Z16_fetch_usbserialv>
 8082958:	492a      	ldr	r1, [pc, #168]	; (8082a04 <_Z24serialGetWifiCredentialsv+0x1a0>)
 808295a:	f006 fd95 	bl	8089488 <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 808295e:	f007 fdff 	bl	808a560 <_Z16_fetch_usbserialv>
 8082962:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082964:	f006 fda3 	bl	80894ae <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 8082968:	f007 fdfa 	bl	808a560 <_Z16_fetch_usbserialv>
 808296c:	220d      	movs	r2, #13
 808296e:	4601      	mov	r1, r0
 8082970:	a810      	add	r0, sp, #64	; 0x40
 8082972:	f006 ff05 	bl	8089780 <_ZN6Stream15readStringUntilEc>
            if (ok.equals("y"))
 8082976:	4920      	ldr	r1, [pc, #128]	; (80829f8 <_Z24serialGetWifiCredentialsv+0x194>)
 8082978:	a810      	add	r0, sp, #64	; 0x40
 808297a:	f006 fcdf 	bl	808933c <_ZNK6String6equalsEPKc>
 808297e:	b1d8      	cbz	r0, 80829b8 <_Z24serialGetWifiCredentialsv+0x154>
            {
                Serial.println("Saving new password");
 8082980:	f007 fdee 	bl	808a560 <_Z16_fetch_usbserialv>
 8082984:	4920      	ldr	r1, [pc, #128]	; (8082a08 <_Z24serialGetWifiCredentialsv+0x1a4>)
 8082986:	f006 fd92 	bl	80894ae <_ZN5Print7printlnEPKc>
                password = tempPassword;
 808298a:	a90c      	add	r1, sp, #48	; 0x30
 808298c:	4620      	mov	r0, r4
 808298e:	f006 fbe7 	bl	8089160 <_ZN6StringaSERKS_>
                sendWifiInfo();
 8082992:	f7ff fbd3 	bl	808213c <_Z12sendWifiInfov>
            String ok = Serial.readStringUntil('\r');
 8082996:	a810      	add	r0, sp, #64	; 0x40
 8082998:	f006 fb68 	bl	808906c <_ZN6StringD1Ev>
            String tempPassword = Serial.readStringUntil('\r');
 808299c:	a80c      	add	r0, sp, #48	; 0x30
 808299e:	f006 fb65 	bl	808906c <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
 80829a2:	a808      	add	r0, sp, #32
 80829a4:	f006 fb62 	bl	808906c <_ZN6StringD1Ev>
        String tempSsid = Serial.readStringUntil('\r');
 80829a8:	a804      	add	r0, sp, #16
 80829aa:	f006 fb5f 	bl	808906c <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80829ae:	4668      	mov	r0, sp
 80829b0:	f006 fb5c 	bl	808906c <_ZN6StringD1Ev>
        {
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 80829b4:	b015      	add	sp, #84	; 0x54
 80829b6:	bd30      	pop	{r4, r5, pc}
                Serial.println("okay, no problem\n\r");
 80829b8:	f007 fdd2 	bl	808a560 <_Z16_fetch_usbserialv>
 80829bc:	4913      	ldr	r1, [pc, #76]	; (8082a0c <_Z24serialGetWifiCredentialsv+0x1a8>)
 80829be:	f006 fd76 	bl	80894ae <_ZN5Print7printlnEPKc>
 80829c2:	e7e8      	b.n	8082996 <_Z24serialGetWifiCredentialsv+0x132>
            Serial.println("okay, no problem\n\r");
 80829c4:	f007 fdcc 	bl	808a560 <_Z16_fetch_usbserialv>
 80829c8:	4910      	ldr	r1, [pc, #64]	; (8082a0c <_Z24serialGetWifiCredentialsv+0x1a8>)
 80829ca:	f006 fd70 	bl	80894ae <_ZN5Print7printlnEPKc>
 80829ce:	e7e8      	b.n	80829a2 <_Z24serialGetWifiCredentialsv+0x13e>
 80829d0:	20000c38 	.word	0x20000c38
 80829d4:	0808e1e4 	.word	0x0808e1e4
 80829d8:	20000760 	.word	0x20000760
 80829dc:	0808e1fa 	.word	0x0808e1fa
 80829e0:	0808e214 	.word	0x0808e214
 80829e4:	0808e246 	.word	0x0808e246
 80829e8:	0808e24c 	.word	0x0808e24c
 80829ec:	0808e25e 	.word	0x0808e25e
 80829f0:	0808e26e 	.word	0x0808e26e
 80829f4:	0808e286 	.word	0x0808e286
 80829f8:	0808ea7c 	.word	0x0808ea7c
 80829fc:	0808e29c 	.word	0x0808e29c
 8082a00:	0808e2ac 	.word	0x0808e2ac
 8082a04:	0808e2bf 	.word	0x0808e2bf
 8082a08:	0808e2db 	.word	0x0808e2db
 8082a0c:	0808e2ef 	.word	0x0808e2ef

08082a10 <_Z26serialSetSensibleIotEnablev>:

void serialSetSensibleIotEnable(void)
{
 8082a10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 8082a12:	f007 fda5 	bl	808a560 <_Z16_fetch_usbserialv>
 8082a16:	4919      	ldr	r1, [pc, #100]	; (8082a7c <_Z26serialSetSensibleIotEnablev+0x6c>)
 8082a18:	f006 fd49 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082a1c:	f007 fda0 	bl	808a560 <_Z16_fetch_usbserialv>
 8082a20:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082a24:	f006 fe96 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082a28:	f007 fd9a 	bl	808a560 <_Z16_fetch_usbserialv>
 8082a2c:	220d      	movs	r2, #13
 8082a2e:	4601      	mov	r1, r0
 8082a30:	4668      	mov	r0, sp
 8082a32:	f006 fea5 	bl	8089780 <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082a36:	4668      	mov	r0, sp
 8082a38:	4911      	ldr	r1, [pc, #68]	; (8082a80 <_Z26serialSetSensibleIotEnablev+0x70>)
 8082a3a:	f006 fc7f 	bl	808933c <_ZNK6String6equalsEPKc>
    if (tempString == "imsensible")
 8082a3e:	b1b8      	cbz	r0, 8082a70 <_Z26serialSetSensibleIotEnablev+0x60>
    {
        Serial.println("Password correct!");
 8082a40:	f007 fd8e 	bl	808a560 <_Z16_fetch_usbserialv>
 8082a44:	490f      	ldr	r1, [pc, #60]	; (8082a84 <_Z26serialSetSensibleIotEnablev+0x74>)
 8082a46:	f006 fd32 	bl	80894ae <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
 8082a4a:	f007 fd89 	bl	808a560 <_Z16_fetch_usbserialv>
 8082a4e:	490e      	ldr	r1, [pc, #56]	; (8082a88 <_Z26serialSetSensibleIotEnablev+0x78>)
 8082a50:	f006 fd2d 	bl	80894ae <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082a54:	2301      	movs	r3, #1
 8082a56:	4c0d      	ldr	r4, [pc, #52]	; (8082a8c <_Z26serialSetSensibleIotEnablev+0x7c>)
 8082a58:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8082a5a:	f008 f871 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8082a5e:	4621      	mov	r1, r4
 8082a60:	208c      	movs	r0, #140	; 0x8c
 8082a62:	f7fd ffcb 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082a66:	4668      	mov	r0, sp
 8082a68:	f006 fb00 	bl	808906c <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082a6c:	b004      	add	sp, #16
 8082a6e:	bd10      	pop	{r4, pc}
        Serial.println("\n\rIncorrect password!");
 8082a70:	f007 fd76 	bl	808a560 <_Z16_fetch_usbserialv>
 8082a74:	4906      	ldr	r1, [pc, #24]	; (8082a90 <_Z26serialSetSensibleIotEnablev+0x80>)
 8082a76:	f006 fd1a 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082a7a:	e7f4      	b.n	8082a66 <_Z26serialSetSensibleIotEnablev+0x56>
 8082a7c:	0808e302 	.word	0x0808e302
 8082a80:	0808e345 	.word	0x0808e345
 8082a84:	0808e24c 	.word	0x0808e24c
 8082a88:	0808e350 	.word	0x0808e350
 8082a8c:	20000c24 	.word	0x20000c24
 8082a90:	0808e371 	.word	0x0808e371

08082a94 <_Z19serialResetSettingsv>:
        Serial.println("\n\rIncorrect password!");
    }
}

void serialResetSettings(void)
{
 8082a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println();
 8082a96:	f007 fd63 	bl	808a560 <_Z16_fetch_usbserialv>
 8082a9a:	f006 fcfc 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8082a9e:	f007 fd5f 	bl	808a560 <_Z16_fetch_usbserialv>
 8082aa2:	4914      	ldr	r1, [pc, #80]	; (8082af4 <_Z19serialResetSettingsv+0x60>)
 8082aa4:	f006 fd03 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082aa8:	f007 fd5a 	bl	808a560 <_Z16_fetch_usbserialv>
 8082aac:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082ab0:	f006 fe50 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082ab4:	f007 fd54 	bl	808a560 <_Z16_fetch_usbserialv>
 8082ab8:	220d      	movs	r2, #13
 8082aba:	4601      	mov	r1, r0
 8082abc:	4668      	mov	r0, sp
 8082abe:	f006 fe5f 	bl	8089780 <_ZN6Stream15readStringUntilEc>
 8082ac2:	4668      	mov	r0, sp
 8082ac4:	490c      	ldr	r1, [pc, #48]	; (8082af8 <_Z19serialResetSettingsv+0x64>)
 8082ac6:	f006 fc39 	bl	808933c <_ZNK6String6equalsEPKc>

    if (tempString == "bould")
 8082aca:	b160      	cbz	r0, 8082ae6 <_Z19serialResetSettingsv+0x52>
    {
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8082acc:	f007 fd48 	bl	808a560 <_Z16_fetch_usbserialv>
 8082ad0:	490a      	ldr	r1, [pc, #40]	; (8082afc <_Z19serialResetSettingsv+0x68>)
 8082ad2:	f006 fcec 	bl	80894ae <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 8082ad6:	f7fe f8b3 	bl	8080c40 <_Z20writeDefaultSettingsv>
    String tempString = Serial.readStringUntil('\r');
 8082ada:	4668      	mov	r0, sp
 8082adc:	f006 fac6 	bl	808906c <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082ae0:	b005      	add	sp, #20
 8082ae2:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rIncorrect password!");
 8082ae6:	f007 fd3b 	bl	808a560 <_Z16_fetch_usbserialv>
 8082aea:	4905      	ldr	r1, [pc, #20]	; (8082b00 <_Z19serialResetSettingsv+0x6c>)
 8082aec:	f006 fcdf 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082af0:	e7f3      	b.n	8082ada <_Z19serialResetSettingsv+0x46>
 8082af2:	bf00      	nop
 8082af4:	0808e387 	.word	0x0808e387
 8082af8:	0808e246 	.word	0x0808e246
 8082afc:	0808e3c0 	.word	0x0808e3c0
 8082b00:	0808e371 	.word	0x0808e371

08082b04 <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void)
{
 8082b04:	b510      	push	{r4, lr}
 8082b06:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8082b08:	f007 fd2a 	bl	808a560 <_Z16_fetch_usbserialv>
 8082b0c:	4920      	ldr	r1, [pc, #128]	; (8082b90 <_Z17serialGetTimeDatev+0x8c>)
 8082b0e:	f006 fcce 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082b12:	f007 fd25 	bl	808a560 <_Z16_fetch_usbserialv>
 8082b16:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082b1a:	f006 fe1b 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082b1e:	f007 fd1f 	bl	808a560 <_Z16_fetch_usbserialv>
 8082b22:	220d      	movs	r2, #13
 8082b24:	4601      	mov	r1, r0
 8082b26:	4668      	mov	r0, sp
 8082b28:	f006 fe2a 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082b2c:	4668      	mov	r0, sp
 8082b2e:	f006 fc5d 	bl	80893ec <_ZNK6String5toIntEv>
 8082b32:	4604      	mov	r4, r0
    Serial.println("");
 8082b34:	f007 fd14 	bl	808a560 <_Z16_fetch_usbserialv>
 8082b38:	4916      	ldr	r1, [pc, #88]	; (8082b94 <_Z17serialGetTimeDatev+0x90>)
 8082b3a:	f006 fcb8 	bl	80894ae <_ZN5Print7printlnEPKc>

    //min is the year 2000, max is the year 2100
    if (tempValue > 966012661 && tempValue < 4121686261)
 8082b3e:	4b16      	ldr	r3, [pc, #88]	; (8082b98 <_Z17serialGetTimeDatev+0x94>)
 8082b40:	429c      	cmp	r4, r3
 8082b42:	dd1e      	ble.n	8082b82 <_Z17serialGetTimeDatev+0x7e>
    {
        Time.setTime(tempValue);
 8082b44:	17e1      	asrs	r1, r4, #31
 8082b46:	4620      	mov	r0, r4
 8082b48:	f006 feae 	bl	80898a8 <_ZN9TimeClass7setTimeEx>
        Serial.print("\n\rNew Device Time:");
 8082b4c:	f007 fd08 	bl	808a560 <_Z16_fetch_usbserialv>
 8082b50:	4912      	ldr	r1, [pc, #72]	; (8082b9c <_Z17serialGetTimeDatev+0x98>)
 8082b52:	f006 fc99 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 8082b56:	f007 fd03 	bl	808a560 <_Z16_fetch_usbserialv>
 8082b5a:	4604      	mov	r4, r0
 8082b5c:	f006 ffbb 	bl	8089ad6 <_ZN9TimeClass3nowEv>
 8082b60:	4602      	mov	r2, r0
 8082b62:	17c3      	asrs	r3, r0, #31
 8082b64:	a804      	add	r0, sp, #16
 8082b66:	f006 feb3 	bl	80898d0 <_ZN9TimeClass7timeStrEx>
 8082b6a:	4620      	mov	r0, r4
 8082b6c:	9904      	ldr	r1, [sp, #16]
 8082b6e:	f006 fc9e 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082b72:	a804      	add	r0, sp, #16
 8082b74:	f006 fa7a 	bl	808906c <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8082b78:	4668      	mov	r0, sp
 8082b7a:	f006 fa77 	bl	808906c <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082b7e:	b008      	add	sp, #32
 8082b80:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8082b82:	f007 fced 	bl	808a560 <_Z16_fetch_usbserialv>
 8082b86:	4906      	ldr	r1, [pc, #24]	; (8082ba0 <_Z17serialGetTimeDatev+0x9c>)
 8082b88:	f006 fc91 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082b8c:	e7f4      	b.n	8082b78 <_Z17serialGetTimeDatev+0x74>
 8082b8e:	bf00      	nop
 8082b90:	0808e42f 	.word	0x0808e42f
 8082b94:	08090075 	.word	0x08090075
 8082b98:	39942ef5 	.word	0x39942ef5
 8082b9c:	0808e46a 	.word	0x0808e46a
 8082ba0:	0808e47d 	.word	0x0808e47d

08082ba4 <_Z17serialGetCo2Slopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Slope(void)
{
 8082ba4:	b530      	push	{r4, r5, lr}
 8082ba6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082ba8:	f007 fcda 	bl	808a560 <_Z16_fetch_usbserialv>
 8082bac:	f006 fc73 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 8082bb0:	f007 fcd6 	bl	808a560 <_Z16_fetch_usbserialv>
 8082bb4:	4932      	ldr	r1, [pc, #200]	; (8082c80 <_Z17serialGetCo2Slopev+0xdc>)
 8082bb6:	f006 fc67 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 8082bba:	f007 fcd1 	bl	808a560 <_Z16_fetch_usbserialv>
 8082bbe:	4604      	mov	r4, r0
 8082bc0:	4d30      	ldr	r5, [pc, #192]	; (8082c84 <_Z17serialGetCo2Slopev+0xe0>)
 8082bc2:	2202      	movs	r2, #2
 8082bc4:	6829      	ldr	r1, [r5, #0]
 8082bc6:	a806      	add	r0, sp, #24
 8082bc8:	f006 fb34 	bl	8089234 <_ZN6StringC1Efi>
 8082bcc:	9906      	ldr	r1, [sp, #24]
 8082bce:	4620      	mov	r0, r4
 8082bd0:	f006 fc5a 	bl	8089488 <_ZN5Print5printEPKc>
 8082bd4:	a806      	add	r0, sp, #24
 8082bd6:	f006 fa49 	bl	808906c <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082bda:	f007 fcc1 	bl	808a560 <_Z16_fetch_usbserialv>
 8082bde:	492a      	ldr	r1, [pc, #168]	; (8082c88 <_Z17serialGetCo2Slopev+0xe4>)
 8082be0:	f006 fc65 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 8082be4:	f007 fcbc 	bl	808a560 <_Z16_fetch_usbserialv>
 8082be8:	4928      	ldr	r1, [pc, #160]	; (8082c8c <_Z17serialGetCo2Slopev+0xe8>)
 8082bea:	f006 fc4d 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082bee:	f007 fcb7 	bl	808a560 <_Z16_fetch_usbserialv>
 8082bf2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082bf6:	f006 fdad 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082bfa:	f007 fcb1 	bl	808a560 <_Z16_fetch_usbserialv>
 8082bfe:	220d      	movs	r2, #13
 8082c00:	4601      	mov	r1, r0
 8082c02:	a802      	add	r0, sp, #8
 8082c04:	f006 fdbc 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082c08:	a802      	add	r0, sp, #8
 8082c0a:	f006 fbf4 	bl	80893f6 <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10.0)
 8082c0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082c12:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 10.0)
 8082c14:	f009 f80c 	bl	808bc30 <__aeabi_fcmpge>
 8082c18:	b358      	cbz	r0, 8082c72 <_Z17serialGetCo2Slopev+0xce>
 8082c1a:	4620      	mov	r0, r4
 8082c1c:	491c      	ldr	r1, [pc, #112]	; (8082c90 <_Z17serialGetCo2Slopev+0xec>)
 8082c1e:	f008 fff3 	bl	808bc08 <__aeabi_fcmplt>
 8082c22:	b330      	cbz	r0, 8082c72 <_Z17serialGetCo2Slopev+0xce>
    {
        CO2_slope = tempfloat;
        tempfloat *= 100;
 8082c24:	491b      	ldr	r1, [pc, #108]	; (8082c94 <_Z17serialGetCo2Slopev+0xf0>)
 8082c26:	4620      	mov	r0, r4
        CO2_slope = tempfloat;
 8082c28:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082c2a:	f008 fe4f 	bl	808b8cc <__aeabi_fmul>
        tempValue = tempfloat;
 8082c2e:	f009 f813 	bl	808bc58 <__aeabi_f2iz>
 8082c32:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8082c34:	f007 fc94 	bl	808a560 <_Z16_fetch_usbserialv>
 8082c38:	4917      	ldr	r1, [pc, #92]	; (8082c98 <_Z17serialGetCo2Slopev+0xf4>)
 8082c3a:	f006 fc25 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope, 2));
 8082c3e:	f007 fc8f 	bl	808a560 <_Z16_fetch_usbserialv>
 8082c42:	4604      	mov	r4, r0
 8082c44:	2202      	movs	r2, #2
 8082c46:	6829      	ldr	r1, [r5, #0]
 8082c48:	a806      	add	r0, sp, #24
 8082c4a:	f006 faf3 	bl	8089234 <_ZN6StringC1Efi>
 8082c4e:	9906      	ldr	r1, [sp, #24]
 8082c50:	4620      	mov	r0, r4
 8082c52:	f006 fc2c 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082c56:	a806      	add	r0, sp, #24
 8082c58:	f006 fa08 	bl	808906c <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8082c5c:	f007 ff70 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8082c60:	2008      	movs	r0, #8
 8082c62:	a901      	add	r1, sp, #4
 8082c64:	f7fd feca 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082c68:	a802      	add	r0, sp, #8
 8082c6a:	f006 f9ff 	bl	808906c <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082c6e:	b00b      	add	sp, #44	; 0x2c
 8082c70:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082c72:	f007 fc75 	bl	808a560 <_Z16_fetch_usbserialv>
 8082c76:	4909      	ldr	r1, [pc, #36]	; (8082c9c <_Z17serialGetCo2Slopev+0xf8>)
 8082c78:	f006 fc19 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082c7c:	e7f4      	b.n	8082c68 <_Z17serialGetCo2Slopev+0xc4>
 8082c7e:	bf00      	nop
 8082c80:	0808e48e 	.word	0x0808e48e
 8082c84:	200002b8 	.word	0x200002b8
 8082c88:	0808e4a1 	.word	0x0808e4a1
 8082c8c:	0808e4a6 	.word	0x0808e4a6
 8082c90:	41200000 	.word	0x41200000
 8082c94:	42c80000 	.word	0x42c80000
 8082c98:	0808e4bc 	.word	0x0808e4bc
 8082c9c:	0808e47d 	.word	0x0808e47d

08082ca0 <_Z16serialGetCoSlopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoSlope(void)
{
 8082ca0:	b530      	push	{r4, r5, lr}
 8082ca2:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082ca4:	f007 fc5c 	bl	808a560 <_Z16_fetch_usbserialv>
 8082ca8:	f006 fbf5 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 8082cac:	f007 fc58 	bl	808a560 <_Z16_fetch_usbserialv>
 8082cb0:	4937      	ldr	r1, [pc, #220]	; (8082d90 <_Z16serialGetCoSlopev+0xf0>)
 8082cb2:	f006 fbe9 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(String(CO_slopeA, 2));
 8082cb6:	f007 fc53 	bl	808a560 <_Z16_fetch_usbserialv>
 8082cba:	4604      	mov	r4, r0
 8082cbc:	4d35      	ldr	r5, [pc, #212]	; (8082d94 <_Z16serialGetCoSlopev+0xf4>)
 8082cbe:	2202      	movs	r2, #2
 8082cc0:	6829      	ldr	r1, [r5, #0]
 8082cc2:	a806      	add	r0, sp, #24
 8082cc4:	f006 fab6 	bl	8089234 <_ZN6StringC1Efi>
 8082cc8:	9906      	ldr	r1, [sp, #24]
 8082cca:	4620      	mov	r0, r4
 8082ccc:	f006 fbdc 	bl	8089488 <_ZN5Print5printEPKc>
 8082cd0:	a806      	add	r0, sp, #24
 8082cd2:	f006 f9cb 	bl	808906c <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082cd6:	f007 fc43 	bl	808a560 <_Z16_fetch_usbserialv>
 8082cda:	492f      	ldr	r1, [pc, #188]	; (8082d98 <_Z16serialGetCoSlopev+0xf8>)
 8082cdc:	f006 fbe7 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8082ce0:	f007 fc3e 	bl	808a560 <_Z16_fetch_usbserialv>
 8082ce4:	492d      	ldr	r1, [pc, #180]	; (8082d9c <_Z16serialGetCoSlopev+0xfc>)
 8082ce6:	f006 fbcf 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082cea:	f007 fc39 	bl	808a560 <_Z16_fetch_usbserialv>
 8082cee:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082cf2:	f006 fd2f 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082cf6:	f007 fc33 	bl	808a560 <_Z16_fetch_usbserialv>
 8082cfa:	220d      	movs	r2, #13
 8082cfc:	4601      	mov	r1, r0
 8082cfe:	a802      	add	r0, sp, #8
 8082d00:	f006 fd3e 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082d04:	a802      	add	r0, sp, #8
 8082d06:	f006 fb76 	bl	80893f6 <_ZNK6String7toFloatEv>
 8082d0a:	4604      	mov	r4, r0
    int tempValue;

    if (tempfloat >= 0.1 && tempfloat < 2.0)
 8082d0c:	f008 f930 	bl	808af70 <__aeabi_f2d>
 8082d10:	a31d      	add	r3, pc, #116	; (adr r3, 8082d88 <_Z16serialGetCoSlopev+0xe8>)
 8082d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082d16:	f008 fc09 	bl	808b52c <__aeabi_dcmpge>
 8082d1a:	b360      	cbz	r0, 8082d76 <_Z16serialGetCoSlopev+0xd6>
 8082d1c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8082d20:	4620      	mov	r0, r4
 8082d22:	f008 ff71 	bl	808bc08 <__aeabi_fcmplt>
 8082d26:	b330      	cbz	r0, 8082d76 <_Z16serialGetCoSlopev+0xd6>
    {
        CO_slopeA = tempfloat;
        tempfloat *= 100;
 8082d28:	491d      	ldr	r1, [pc, #116]	; (8082da0 <_Z16serialGetCoSlopev+0x100>)
 8082d2a:	4620      	mov	r0, r4
        CO_slopeA = tempfloat;
 8082d2c:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082d2e:	f008 fdcd 	bl	808b8cc <__aeabi_fmul>
        tempValue = tempfloat;
 8082d32:	f008 ff91 	bl	808bc58 <__aeabi_f2iz>
 8082d36:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew COA slope: ");
 8082d38:	f007 fc12 	bl	808a560 <_Z16_fetch_usbserialv>
 8082d3c:	4919      	ldr	r1, [pc, #100]	; (8082da4 <_Z16serialGetCoSlopev+0x104>)
 8082d3e:	f006 fba3 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(String(CO_slopeA, 2));
 8082d42:	f007 fc0d 	bl	808a560 <_Z16_fetch_usbserialv>
 8082d46:	4604      	mov	r4, r0
 8082d48:	2202      	movs	r2, #2
 8082d4a:	6829      	ldr	r1, [r5, #0]
 8082d4c:	a806      	add	r0, sp, #24
 8082d4e:	f006 fa71 	bl	8089234 <_ZN6StringC1Efi>
 8082d52:	9906      	ldr	r1, [sp, #24]
 8082d54:	4620      	mov	r0, r4
 8082d56:	f006 fbaa 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082d5a:	a806      	add	r0, sp, #24
 8082d5c:	f006 f986 	bl	808906c <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 8082d60:	f007 feee 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8082d64:	2010      	movs	r0, #16
 8082d66:	a901      	add	r1, sp, #4
 8082d68:	f7fd fe48 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082d6c:	a802      	add	r0, sp, #8
 8082d6e:	f006 f97d 	bl	808906c <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082d72:	b00b      	add	sp, #44	; 0x2c
 8082d74:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082d76:	f007 fbf3 	bl	808a560 <_Z16_fetch_usbserialv>
 8082d7a:	490b      	ldr	r1, [pc, #44]	; (8082da8 <_Z16serialGetCoSlopev+0x108>)
 8082d7c:	f006 fb97 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082d80:	e7f4      	b.n	8082d6c <_Z16serialGetCoSlopev+0xcc>
 8082d82:	bf00      	nop
 8082d84:	f3af 8000 	nop.w
 8082d88:	9999999a 	.word	0x9999999a
 8082d8c:	3fb99999 	.word	0x3fb99999
 8082d90:	0808e4ce 	.word	0x0808e4ce
 8082d94:	200002c8 	.word	0x200002c8
 8082d98:	0808e4a1 	.word	0x0808e4a1
 8082d9c:	0808e4e0 	.word	0x0808e4e0
 8082da0:	42c80000 	.word	0x42c80000
 8082da4:	0808e4f5 	.word	0x0808e4f5
 8082da8:	0808e47d 	.word	0x0808e47d

08082dac <_Z17serialGetPm1Slopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm1Slope(void)
{
 8082dac:	b530      	push	{r4, r5, lr}
 8082dae:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082db0:	f007 fbd6 	bl	808a560 <_Z16_fetch_usbserialv>
 8082db4:	f006 fb6f 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 8082db8:	f007 fbd2 	bl	808a560 <_Z16_fetch_usbserialv>
 8082dbc:	4932      	ldr	r1, [pc, #200]	; (8082e88 <_Z17serialGetPm1Slopev+0xdc>)
 8082dbe:	f006 fb63 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 8082dc2:	f007 fbcd 	bl	808a560 <_Z16_fetch_usbserialv>
 8082dc6:	4604      	mov	r4, r0
 8082dc8:	4d30      	ldr	r5, [pc, #192]	; (8082e8c <_Z17serialGetPm1Slopev+0xe0>)
 8082dca:	2202      	movs	r2, #2
 8082dcc:	6829      	ldr	r1, [r5, #0]
 8082dce:	a806      	add	r0, sp, #24
 8082dd0:	f006 fa30 	bl	8089234 <_ZN6StringC1Efi>
 8082dd4:	9906      	ldr	r1, [sp, #24]
 8082dd6:	4620      	mov	r0, r4
 8082dd8:	f006 fb56 	bl	8089488 <_ZN5Print5printEPKc>
 8082ddc:	a806      	add	r0, sp, #24
 8082dde:	f006 f945 	bl	808906c <_ZN6StringD1Ev>
    Serial.println(" ");
 8082de2:	f007 fbbd 	bl	808a560 <_Z16_fetch_usbserialv>
 8082de6:	492a      	ldr	r1, [pc, #168]	; (8082e90 <_Z17serialGetPm1Slopev+0xe4>)
 8082de8:	f006 fb61 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 8082dec:	f007 fbb8 	bl	808a560 <_Z16_fetch_usbserialv>
 8082df0:	4928      	ldr	r1, [pc, #160]	; (8082e94 <_Z17serialGetPm1Slopev+0xe8>)
 8082df2:	f006 fb49 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082df6:	f007 fbb3 	bl	808a560 <_Z16_fetch_usbserialv>
 8082dfa:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082dfe:	f006 fca9 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082e02:	f007 fbad 	bl	808a560 <_Z16_fetch_usbserialv>
 8082e06:	220d      	movs	r2, #13
 8082e08:	4601      	mov	r1, r0
 8082e0a:	a802      	add	r0, sp, #8
 8082e0c:	f006 fcb8 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082e10:	a802      	add	r0, sp, #8
 8082e12:	f006 faf0 	bl	80893f6 <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082e16:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082e1a:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082e1c:	f008 ff08 	bl	808bc30 <__aeabi_fcmpge>
 8082e20:	b360      	cbz	r0, 8082e7c <_Z17serialGetPm1Slopev+0xd0>
 8082e22:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082e26:	4620      	mov	r0, r4
 8082e28:	f008 feee 	bl	808bc08 <__aeabi_fcmplt>
 8082e2c:	b330      	cbz	r0, 8082e7c <_Z17serialGetPm1Slopev+0xd0>
    {
        PM_1_slope = tempfloat;
        tempfloat *= 100;
 8082e2e:	491a      	ldr	r1, [pc, #104]	; (8082e98 <_Z17serialGetPm1Slopev+0xec>)
 8082e30:	4620      	mov	r0, r4
        PM_1_slope = tempfloat;
 8082e32:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082e34:	f008 fd4a 	bl	808b8cc <__aeabi_fmul>
        tempValue = tempfloat;
 8082e38:	f008 ff0e 	bl	808bc58 <__aeabi_f2iz>
 8082e3c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 8082e3e:	f007 fb8f 	bl	808a560 <_Z16_fetch_usbserialv>
 8082e42:	4916      	ldr	r1, [pc, #88]	; (8082e9c <_Z17serialGetPm1Slopev+0xf0>)
 8082e44:	f006 fb20 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 8082e48:	f007 fb8a 	bl	808a560 <_Z16_fetch_usbserialv>
 8082e4c:	4604      	mov	r4, r0
 8082e4e:	2202      	movs	r2, #2
 8082e50:	6829      	ldr	r1, [r5, #0]
 8082e52:	a806      	add	r0, sp, #24
 8082e54:	f006 f9ee 	bl	8089234 <_ZN6StringC1Efi>
 8082e58:	9906      	ldr	r1, [sp, #24]
 8082e5a:	4620      	mov	r0, r4
 8082e5c:	f006 fb27 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082e60:	a806      	add	r0, sp, #24
 8082e62:	f006 f903 	bl	808906c <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8082e66:	f007 fe6b 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8082e6a:	2018      	movs	r0, #24
 8082e6c:	a901      	add	r1, sp, #4
 8082e6e:	f7fd fdc5 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082e72:	a802      	add	r0, sp, #8
 8082e74:	f006 f8fa 	bl	808906c <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082e78:	b00b      	add	sp, #44	; 0x2c
 8082e7a:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082e7c:	f007 fb70 	bl	808a560 <_Z16_fetch_usbserialv>
 8082e80:	4907      	ldr	r1, [pc, #28]	; (8082ea0 <_Z17serialGetPm1Slopev+0xf4>)
 8082e82:	f006 fb14 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082e86:	e7f4      	b.n	8082e72 <_Z17serialGetPm1Slopev+0xc6>
 8082e88:	0808e507 	.word	0x0808e507
 8082e8c:	200002ec 	.word	0x200002ec
 8082e90:	0808fd52 	.word	0x0808fd52
 8082e94:	0808e51a 	.word	0x0808e51a
 8082e98:	42c80000 	.word	0x42c80000
 8082e9c:	0808e530 	.word	0x0808e530
 8082ea0:	0808e47d 	.word	0x0808e47d

08082ea4 <_Z18serialGetPm25Slopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm25Slope(void)
{
 8082ea4:	b530      	push	{r4, r5, lr}
 8082ea6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082ea8:	f007 fb5a 	bl	808a560 <_Z16_fetch_usbserialv>
 8082eac:	f006 faf3 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 8082eb0:	f007 fb56 	bl	808a560 <_Z16_fetch_usbserialv>
 8082eb4:	4932      	ldr	r1, [pc, #200]	; (8082f80 <_Z18serialGetPm25Slopev+0xdc>)
 8082eb6:	f006 fae7 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 8082eba:	f007 fb51 	bl	808a560 <_Z16_fetch_usbserialv>
 8082ebe:	4604      	mov	r4, r0
 8082ec0:	4d30      	ldr	r5, [pc, #192]	; (8082f84 <_Z18serialGetPm25Slopev+0xe0>)
 8082ec2:	2202      	movs	r2, #2
 8082ec4:	6829      	ldr	r1, [r5, #0]
 8082ec6:	a806      	add	r0, sp, #24
 8082ec8:	f006 f9b4 	bl	8089234 <_ZN6StringC1Efi>
 8082ecc:	9906      	ldr	r1, [sp, #24]
 8082ece:	4620      	mov	r0, r4
 8082ed0:	f006 fada 	bl	8089488 <_ZN5Print5printEPKc>
 8082ed4:	a806      	add	r0, sp, #24
 8082ed6:	f006 f8c9 	bl	808906c <_ZN6StringD1Ev>
    Serial.println(" ");
 8082eda:	f007 fb41 	bl	808a560 <_Z16_fetch_usbserialv>
 8082ede:	492a      	ldr	r1, [pc, #168]	; (8082f88 <_Z18serialGetPm25Slopev+0xe4>)
 8082ee0:	f006 fae5 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 8082ee4:	f007 fb3c 	bl	808a560 <_Z16_fetch_usbserialv>
 8082ee8:	4928      	ldr	r1, [pc, #160]	; (8082f8c <_Z18serialGetPm25Slopev+0xe8>)
 8082eea:	f006 facd 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082eee:	f007 fb37 	bl	808a560 <_Z16_fetch_usbserialv>
 8082ef2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082ef6:	f006 fc2d 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082efa:	f007 fb31 	bl	808a560 <_Z16_fetch_usbserialv>
 8082efe:	220d      	movs	r2, #13
 8082f00:	4601      	mov	r1, r0
 8082f02:	a802      	add	r0, sp, #8
 8082f04:	f006 fc3c 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082f08:	a802      	add	r0, sp, #8
 8082f0a:	f006 fa74 	bl	80893f6 <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082f0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082f12:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082f14:	f008 fe8c 	bl	808bc30 <__aeabi_fcmpge>
 8082f18:	b360      	cbz	r0, 8082f74 <_Z18serialGetPm25Slopev+0xd0>
 8082f1a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082f1e:	4620      	mov	r0, r4
 8082f20:	f008 fe72 	bl	808bc08 <__aeabi_fcmplt>
 8082f24:	b330      	cbz	r0, 8082f74 <_Z18serialGetPm25Slopev+0xd0>
    {
        PM_25_slope = tempfloat;
        tempfloat *= 100;
 8082f26:	491a      	ldr	r1, [pc, #104]	; (8082f90 <_Z18serialGetPm25Slopev+0xec>)
 8082f28:	4620      	mov	r0, r4
        PM_25_slope = tempfloat;
 8082f2a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082f2c:	f008 fcce 	bl	808b8cc <__aeabi_fmul>
        tempValue = tempfloat;
 8082f30:	f008 fe92 	bl	808bc58 <__aeabi_f2iz>
 8082f34:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 8082f36:	f007 fb13 	bl	808a560 <_Z16_fetch_usbserialv>
 8082f3a:	4916      	ldr	r1, [pc, #88]	; (8082f94 <_Z18serialGetPm25Slopev+0xf0>)
 8082f3c:	f006 faa4 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope, 2));
 8082f40:	f007 fb0e 	bl	808a560 <_Z16_fetch_usbserialv>
 8082f44:	4604      	mov	r4, r0
 8082f46:	2202      	movs	r2, #2
 8082f48:	6829      	ldr	r1, [r5, #0]
 8082f4a:	a806      	add	r0, sp, #24
 8082f4c:	f006 f972 	bl	8089234 <_ZN6StringC1Efi>
 8082f50:	9906      	ldr	r1, [sp, #24]
 8082f52:	4620      	mov	r0, r4
 8082f54:	f006 faab 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082f58:	a806      	add	r0, sp, #24
 8082f5a:	f006 f887 	bl	808906c <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8082f5e:	f007 fdef 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8082f62:	2020      	movs	r0, #32
 8082f64:	a901      	add	r1, sp, #4
 8082f66:	f7fd fd49 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082f6a:	a802      	add	r0, sp, #8
 8082f6c:	f006 f87e 	bl	808906c <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082f70:	b00b      	add	sp, #44	; 0x2c
 8082f72:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082f74:	f007 faf4 	bl	808a560 <_Z16_fetch_usbserialv>
 8082f78:	4907      	ldr	r1, [pc, #28]	; (8082f98 <_Z18serialGetPm25Slopev+0xf4>)
 8082f7a:	f006 fa98 	bl	80894ae <_ZN5Print7printlnEPKc>
 8082f7e:	e7f4      	b.n	8082f6a <_Z18serialGetPm25Slopev+0xc6>
 8082f80:	0808e542 	.word	0x0808e542
 8082f84:	200002f4 	.word	0x200002f4
 8082f88:	0808fd52 	.word	0x0808fd52
 8082f8c:	0808e557 	.word	0x0808e557
 8082f90:	42c80000 	.word	0x42c80000
 8082f94:	0808e56f 	.word	0x0808e56f
 8082f98:	0808e47d 	.word	0x0808e47d

08082f9c <_Z18serialGetPm10Slopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm10Slope(void)
{
 8082f9c:	b530      	push	{r4, r5, lr}
 8082f9e:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082fa0:	f007 fade 	bl	808a560 <_Z16_fetch_usbserialv>
 8082fa4:	f006 fa77 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 8082fa8:	f007 fada 	bl	808a560 <_Z16_fetch_usbserialv>
 8082fac:	4932      	ldr	r1, [pc, #200]	; (8083078 <_Z18serialGetPm10Slopev+0xdc>)
 8082fae:	f006 fa6b 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 8082fb2:	f007 fad5 	bl	808a560 <_Z16_fetch_usbserialv>
 8082fb6:	4604      	mov	r4, r0
 8082fb8:	4d30      	ldr	r5, [pc, #192]	; (808307c <_Z18serialGetPm10Slopev+0xe0>)
 8082fba:	2202      	movs	r2, #2
 8082fbc:	6829      	ldr	r1, [r5, #0]
 8082fbe:	a806      	add	r0, sp, #24
 8082fc0:	f006 f938 	bl	8089234 <_ZN6StringC1Efi>
 8082fc4:	9906      	ldr	r1, [sp, #24]
 8082fc6:	4620      	mov	r0, r4
 8082fc8:	f006 fa5e 	bl	8089488 <_ZN5Print5printEPKc>
 8082fcc:	a806      	add	r0, sp, #24
 8082fce:	f006 f84d 	bl	808906c <_ZN6StringD1Ev>
    Serial.println(" ");
 8082fd2:	f007 fac5 	bl	808a560 <_Z16_fetch_usbserialv>
 8082fd6:	492a      	ldr	r1, [pc, #168]	; (8083080 <_Z18serialGetPm10Slopev+0xe4>)
 8082fd8:	f006 fa69 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 8082fdc:	f007 fac0 	bl	808a560 <_Z16_fetch_usbserialv>
 8082fe0:	4928      	ldr	r1, [pc, #160]	; (8083084 <_Z18serialGetPm10Slopev+0xe8>)
 8082fe2:	f006 fa51 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082fe6:	f007 fabb 	bl	808a560 <_Z16_fetch_usbserialv>
 8082fea:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082fee:	f006 fbb1 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082ff2:	f007 fab5 	bl	808a560 <_Z16_fetch_usbserialv>
 8082ff6:	220d      	movs	r2, #13
 8082ff8:	4601      	mov	r1, r0
 8082ffa:	a802      	add	r0, sp, #8
 8082ffc:	f006 fbc0 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083000:	a802      	add	r0, sp, #8
 8083002:	f006 f9f8 	bl	80893f6 <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8083006:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 808300a:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 808300c:	f008 fe10 	bl	808bc30 <__aeabi_fcmpge>
 8083010:	b360      	cbz	r0, 808306c <_Z18serialGetPm10Slopev+0xd0>
 8083012:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083016:	4620      	mov	r0, r4
 8083018:	f008 fdf6 	bl	808bc08 <__aeabi_fcmplt>
 808301c:	b330      	cbz	r0, 808306c <_Z18serialGetPm10Slopev+0xd0>
    {
        PM_10_slope = tempfloat;
        tempfloat *= 100;
 808301e:	491a      	ldr	r1, [pc, #104]	; (8083088 <_Z18serialGetPm10Slopev+0xec>)
 8083020:	4620      	mov	r0, r4
        PM_10_slope = tempfloat;
 8083022:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8083024:	f008 fc52 	bl	808b8cc <__aeabi_fmul>
        tempValue = tempfloat;
 8083028:	f008 fe16 	bl	808bc58 <__aeabi_f2iz>
 808302c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 808302e:	f007 fa97 	bl	808a560 <_Z16_fetch_usbserialv>
 8083032:	4916      	ldr	r1, [pc, #88]	; (808308c <_Z18serialGetPm10Slopev+0xf0>)
 8083034:	f006 fa28 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope, 2));
 8083038:	f007 fa92 	bl	808a560 <_Z16_fetch_usbserialv>
 808303c:	4604      	mov	r4, r0
 808303e:	2202      	movs	r2, #2
 8083040:	6829      	ldr	r1, [r5, #0]
 8083042:	a806      	add	r0, sp, #24
 8083044:	f006 f8f6 	bl	8089234 <_ZN6StringC1Efi>
 8083048:	9906      	ldr	r1, [sp, #24]
 808304a:	4620      	mov	r0, r4
 808304c:	f006 fa2f 	bl	80894ae <_ZN5Print7printlnEPKc>
 8083050:	a806      	add	r0, sp, #24
 8083052:	f006 f80b 	bl	808906c <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8083056:	f007 fd73 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808305a:	2028      	movs	r0, #40	; 0x28
 808305c:	a901      	add	r1, sp, #4
 808305e:	f7fd fccd 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083062:	a802      	add	r0, sp, #8
 8083064:	f006 f802 	bl	808906c <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083068:	b00b      	add	sp, #44	; 0x2c
 808306a:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 808306c:	f007 fa78 	bl	808a560 <_Z16_fetch_usbserialv>
 8083070:	4907      	ldr	r1, [pc, #28]	; (8083090 <_Z18serialGetPm10Slopev+0xf4>)
 8083072:	f006 fa1c 	bl	80894ae <_ZN5Print7printlnEPKc>
 8083076:	e7f4      	b.n	8083062 <_Z18serialGetPm10Slopev+0xc6>
 8083078:	0808e583 	.word	0x0808e583
 808307c:	200002e4 	.word	0x200002e4
 8083080:	0808fd52 	.word	0x0808fd52
 8083084:	0808e597 	.word	0x0808e597
 8083088:	42c80000 	.word	0x42c80000
 808308c:	0808e5ae 	.word	0x0808e5ae
 8083090:	0808e47d 	.word	0x0808e47d

08083094 <_Z25serialGetTemperatureSlopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetTemperatureSlope(void) 
{
 8083094:	b530      	push	{r4, r5, lr}
 8083096:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083098:	f007 fa62 	bl	808a560 <_Z16_fetch_usbserialv>
 808309c:	f006 f9fb 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 80830a0:	f007 fa5e 	bl	808a560 <_Z16_fetch_usbserialv>
 80830a4:	4932      	ldr	r1, [pc, #200]	; (8083170 <_Z25serialGetTemperatureSlopev+0xdc>)
 80830a6:	f006 f9ef 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 80830aa:	f007 fa59 	bl	808a560 <_Z16_fetch_usbserialv>
 80830ae:	4604      	mov	r4, r0
 80830b0:	4d30      	ldr	r5, [pc, #192]	; (8083174 <_Z25serialGetTemperatureSlopev+0xe0>)
 80830b2:	2202      	movs	r2, #2
 80830b4:	6829      	ldr	r1, [r5, #0]
 80830b6:	a806      	add	r0, sp, #24
 80830b8:	f006 f8bc 	bl	8089234 <_ZN6StringC1Efi>
 80830bc:	9906      	ldr	r1, [sp, #24]
 80830be:	4620      	mov	r0, r4
 80830c0:	f006 f9e2 	bl	8089488 <_ZN5Print5printEPKc>
 80830c4:	a806      	add	r0, sp, #24
 80830c6:	f005 ffd1 	bl	808906c <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 80830ca:	f007 fa49 	bl	808a560 <_Z16_fetch_usbserialv>
 80830ce:	492a      	ldr	r1, [pc, #168]	; (8083178 <_Z25serialGetTemperatureSlopev+0xe4>)
 80830d0:	f006 f9ed 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 80830d4:	f007 fa44 	bl	808a560 <_Z16_fetch_usbserialv>
 80830d8:	4928      	ldr	r1, [pc, #160]	; (808317c <_Z25serialGetTemperatureSlopev+0xe8>)
 80830da:	f006 f9d5 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80830de:	f007 fa3f 	bl	808a560 <_Z16_fetch_usbserialv>
 80830e2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80830e6:	f006 fb35 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80830ea:	f007 fa39 	bl	808a560 <_Z16_fetch_usbserialv>
 80830ee:	220d      	movs	r2, #13
 80830f0:	4601      	mov	r1, r0
 80830f2:	a802      	add	r0, sp, #8
 80830f4:	f006 fb44 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80830f8:	a802      	add	r0, sp, #8
 80830fa:	f006 f97c 	bl	80893f6 <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 80830fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8083102:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8083104:	f008 fd94 	bl	808bc30 <__aeabi_fcmpge>
 8083108:	b360      	cbz	r0, 8083164 <_Z25serialGetTemperatureSlopev+0xd0>
 808310a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808310e:	4620      	mov	r0, r4
 8083110:	f008 fd7a 	bl	808bc08 <__aeabi_fcmplt>
 8083114:	b330      	cbz	r0, 8083164 <_Z25serialGetTemperatureSlopev+0xd0>
    {
        temp_slope = tempfloat;
        tempfloat *= 100;
 8083116:	491a      	ldr	r1, [pc, #104]	; (8083180 <_Z25serialGetTemperatureSlopev+0xec>)
 8083118:	4620      	mov	r0, r4
        temp_slope = tempfloat;
 808311a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 808311c:	f008 fbd6 	bl	808b8cc <__aeabi_fmul>
        tempValue = tempfloat;
 8083120:	f008 fd9a 	bl	808bc58 <__aeabi_f2iz>
 8083124:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 8083126:	f007 fa1b 	bl	808a560 <_Z16_fetch_usbserialv>
 808312a:	4916      	ldr	r1, [pc, #88]	; (8083184 <_Z25serialGetTemperatureSlopev+0xf0>)
 808312c:	f006 f9ac 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope, 2));
 8083130:	f007 fa16 	bl	808a560 <_Z16_fetch_usbserialv>
 8083134:	4604      	mov	r4, r0
 8083136:	2202      	movs	r2, #2
 8083138:	6829      	ldr	r1, [r5, #0]
 808313a:	a806      	add	r0, sp, #24
 808313c:	f006 f87a 	bl	8089234 <_ZN6StringC1Efi>
 8083140:	9906      	ldr	r1, [sp, #24]
 8083142:	4620      	mov	r0, r4
 8083144:	f006 f9b3 	bl	80894ae <_ZN5Print7printlnEPKc>
 8083148:	a806      	add	r0, sp, #24
 808314a:	f005 ff8f 	bl	808906c <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 808314e:	f007 fcf7 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8083152:	2030      	movs	r0, #48	; 0x30
 8083154:	a901      	add	r1, sp, #4
 8083156:	f7fd fc51 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 808315a:	a802      	add	r0, sp, #8
 808315c:	f005 ff86 	bl	808906c <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083160:	b00b      	add	sp, #44	; 0x2c
 8083162:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8083164:	f007 f9fc 	bl	808a560 <_Z16_fetch_usbserialv>
 8083168:	4907      	ldr	r1, [pc, #28]	; (8083188 <_Z25serialGetTemperatureSlopev+0xf4>)
 808316a:	f006 f9a0 	bl	80894ae <_ZN5Print7printlnEPKc>
 808316e:	e7f4      	b.n	808315a <_Z25serialGetTemperatureSlopev+0xc6>
 8083170:	0808e5c1 	.word	0x0808e5c1
 8083174:	20000c60 	.word	0x20000c60
 8083178:	0808e5dc 	.word	0x0808e5dc
 808317c:	0808e5e7 	.word	0x0808e5e7
 8083180:	42c80000 	.word	0x42c80000
 8083184:	0808e605 	.word	0x0808e605
 8083188:	0808e47d 	.word	0x0808e47d

0808318c <_Z22serialGetPressureSlopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureSlope(void)
{
 808318c:	b530      	push	{r4, r5, lr}
 808318e:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083190:	f007 f9e6 	bl	808a560 <_Z16_fetch_usbserialv>
 8083194:	f006 f97f 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 8083198:	f007 f9e2 	bl	808a560 <_Z16_fetch_usbserialv>
 808319c:	4932      	ldr	r1, [pc, #200]	; (8083268 <_Z22serialGetPressureSlopev+0xdc>)
 808319e:	f006 f973 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 80831a2:	f007 f9dd 	bl	808a560 <_Z16_fetch_usbserialv>
 80831a6:	4604      	mov	r4, r0
 80831a8:	4d30      	ldr	r5, [pc, #192]	; (808326c <_Z22serialGetPressureSlopev+0xe0>)
 80831aa:	2202      	movs	r2, #2
 80831ac:	6829      	ldr	r1, [r5, #0]
 80831ae:	a806      	add	r0, sp, #24
 80831b0:	f006 f840 	bl	8089234 <_ZN6StringC1Efi>
 80831b4:	9906      	ldr	r1, [sp, #24]
 80831b6:	4620      	mov	r0, r4
 80831b8:	f006 f966 	bl	8089488 <_ZN5Print5printEPKc>
 80831bc:	a806      	add	r0, sp, #24
 80831be:	f005 ff55 	bl	808906c <_ZN6StringD1Ev>
    Serial.println(" torr");
 80831c2:	f007 f9cd 	bl	808a560 <_Z16_fetch_usbserialv>
 80831c6:	492a      	ldr	r1, [pc, #168]	; (8083270 <_Z22serialGetPressureSlopev+0xe4>)
 80831c8:	f006 f971 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 80831cc:	f007 f9c8 	bl	808a560 <_Z16_fetch_usbserialv>
 80831d0:	4928      	ldr	r1, [pc, #160]	; (8083274 <_Z22serialGetPressureSlopev+0xe8>)
 80831d2:	f006 f959 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80831d6:	f007 f9c3 	bl	808a560 <_Z16_fetch_usbserialv>
 80831da:	f24c 3150 	movw	r1, #50000	; 0xc350
 80831de:	f006 fab9 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80831e2:	f007 f9bd 	bl	808a560 <_Z16_fetch_usbserialv>
 80831e6:	220d      	movs	r2, #13
 80831e8:	4601      	mov	r1, r0
 80831ea:	a802      	add	r0, sp, #8
 80831ec:	f006 fac8 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80831f0:	a802      	add	r0, sp, #8
 80831f2:	f006 f900 	bl	80893f6 <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 80831f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 80831fa:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 80831fc:	f008 fd18 	bl	808bc30 <__aeabi_fcmpge>
 8083200:	b360      	cbz	r0, 808325c <_Z22serialGetPressureSlopev+0xd0>
 8083202:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083206:	4620      	mov	r0, r4
 8083208:	f008 fcfe 	bl	808bc08 <__aeabi_fcmplt>
 808320c:	b330      	cbz	r0, 808325c <_Z22serialGetPressureSlopev+0xd0>
    {
        pressure_slope = tempfloat;
        tempfloat *= 100;
 808320e:	491a      	ldr	r1, [pc, #104]	; (8083278 <_Z22serialGetPressureSlopev+0xec>)
 8083210:	4620      	mov	r0, r4
        pressure_slope = tempfloat;
 8083212:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8083214:	f008 fb5a 	bl	808b8cc <__aeabi_fmul>
        tempValue = tempfloat;
 8083218:	f008 fd1e 	bl	808bc58 <__aeabi_f2iz>
 808321c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 808321e:	f007 f99f 	bl	808a560 <_Z16_fetch_usbserialv>
 8083222:	4916      	ldr	r1, [pc, #88]	; (808327c <_Z22serialGetPressureSlopev+0xf0>)
 8083224:	f006 f930 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope, 2));
 8083228:	f007 f99a 	bl	808a560 <_Z16_fetch_usbserialv>
 808322c:	4604      	mov	r4, r0
 808322e:	2202      	movs	r2, #2
 8083230:	6829      	ldr	r1, [r5, #0]
 8083232:	a806      	add	r0, sp, #24
 8083234:	f005 fffe 	bl	8089234 <_ZN6StringC1Efi>
 8083238:	9906      	ldr	r1, [sp, #24]
 808323a:	4620      	mov	r0, r4
 808323c:	f006 f937 	bl	80894ae <_ZN5Print7printlnEPKc>
 8083240:	a806      	add	r0, sp, #24
 8083242:	f005 ff13 	bl	808906c <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8083246:	f007 fc7b 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808324a:	2038      	movs	r0, #56	; 0x38
 808324c:	a901      	add	r1, sp, #4
 808324e:	f7fd fbd5 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083252:	a802      	add	r0, sp, #8
 8083254:	f005 ff0a 	bl	808906c <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083258:	b00b      	add	sp, #44	; 0x2c
 808325a:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 808325c:	f007 f980 	bl	808a560 <_Z16_fetch_usbserialv>
 8083260:	4907      	ldr	r1, [pc, #28]	; (8083280 <_Z22serialGetPressureSlopev+0xf4>)
 8083262:	f006 f924 	bl	80894ae <_ZN5Print7printlnEPKc>
 8083266:	e7f4      	b.n	8083252 <_Z22serialGetPressureSlopev+0xc6>
 8083268:	0808e61f 	.word	0x0808e61f
 808326c:	20000798 	.word	0x20000798
 8083270:	0808e637 	.word	0x0808e637
 8083274:	0808e63d 	.word	0x0808e63d
 8083278:	42c80000 	.word	0x42c80000
 808327c:	0808e658 	.word	0x0808e658
 8083280:	0808e47d 	.word	0x0808e47d

08083284 <_Z22serialGetHumiditySlopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumiditySlope(void)
{
 8083284:	b530      	push	{r4, r5, lr}
 8083286:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083288:	f007 f96a 	bl	808a560 <_Z16_fetch_usbserialv>
 808328c:	f006 f903 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 8083290:	f007 f966 	bl	808a560 <_Z16_fetch_usbserialv>
 8083294:	4932      	ldr	r1, [pc, #200]	; (8083360 <_Z22serialGetHumiditySlopev+0xdc>)
 8083296:	f006 f8f7 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 808329a:	f007 f961 	bl	808a560 <_Z16_fetch_usbserialv>
 808329e:	4604      	mov	r4, r0
 80832a0:	4d30      	ldr	r5, [pc, #192]	; (8083364 <_Z22serialGetHumiditySlopev+0xe0>)
 80832a2:	2202      	movs	r2, #2
 80832a4:	6829      	ldr	r1, [r5, #0]
 80832a6:	a806      	add	r0, sp, #24
 80832a8:	f005 ffc4 	bl	8089234 <_ZN6StringC1Efi>
 80832ac:	9906      	ldr	r1, [sp, #24]
 80832ae:	4620      	mov	r0, r4
 80832b0:	f006 f8ea 	bl	8089488 <_ZN5Print5printEPKc>
 80832b4:	a806      	add	r0, sp, #24
 80832b6:	f005 fed9 	bl	808906c <_ZN6StringD1Ev>
    Serial.println(" %");
 80832ba:	f007 f951 	bl	808a560 <_Z16_fetch_usbserialv>
 80832be:	492a      	ldr	r1, [pc, #168]	; (8083368 <_Z22serialGetHumiditySlopev+0xe4>)
 80832c0:	f006 f8f5 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 80832c4:	f007 f94c 	bl	808a560 <_Z16_fetch_usbserialv>
 80832c8:	4928      	ldr	r1, [pc, #160]	; (808336c <_Z22serialGetHumiditySlopev+0xe8>)
 80832ca:	f006 f8dd 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80832ce:	f007 f947 	bl	808a560 <_Z16_fetch_usbserialv>
 80832d2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80832d6:	f006 fa3d 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80832da:	f007 f941 	bl	808a560 <_Z16_fetch_usbserialv>
 80832de:	220d      	movs	r2, #13
 80832e0:	4601      	mov	r1, r0
 80832e2:	a802      	add	r0, sp, #8
 80832e4:	f006 fa4c 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80832e8:	a802      	add	r0, sp, #8
 80832ea:	f006 f884 	bl	80893f6 <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10)
 80832ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 80832f2:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 10)
 80832f4:	f008 fc9c 	bl	808bc30 <__aeabi_fcmpge>
 80832f8:	b358      	cbz	r0, 8083352 <_Z22serialGetHumiditySlopev+0xce>
 80832fa:	4620      	mov	r0, r4
 80832fc:	491c      	ldr	r1, [pc, #112]	; (8083370 <_Z22serialGetHumiditySlopev+0xec>)
 80832fe:	f008 fc83 	bl	808bc08 <__aeabi_fcmplt>
 8083302:	b330      	cbz	r0, 8083352 <_Z22serialGetHumiditySlopev+0xce>
    {
        rh_slope = tempfloat;
        tempfloat *= 100;
 8083304:	491b      	ldr	r1, [pc, #108]	; (8083374 <_Z22serialGetHumiditySlopev+0xf0>)
 8083306:	4620      	mov	r0, r4
        rh_slope = tempfloat;
 8083308:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 808330a:	f008 fadf 	bl	808b8cc <__aeabi_fmul>
        tempValue = tempfloat;
 808330e:	f008 fca3 	bl	808bc58 <__aeabi_f2iz>
 8083312:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 8083314:	f007 f924 	bl	808a560 <_Z16_fetch_usbserialv>
 8083318:	4917      	ldr	r1, [pc, #92]	; (8083378 <_Z22serialGetHumiditySlopev+0xf4>)
 808331a:	f006 f8b5 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope, 2));
 808331e:	f007 f91f 	bl	808a560 <_Z16_fetch_usbserialv>
 8083322:	4604      	mov	r4, r0
 8083324:	2202      	movs	r2, #2
 8083326:	6829      	ldr	r1, [r5, #0]
 8083328:	a806      	add	r0, sp, #24
 808332a:	f005 ff83 	bl	8089234 <_ZN6StringC1Efi>
 808332e:	9906      	ldr	r1, [sp, #24]
 8083330:	4620      	mov	r0, r4
 8083332:	f006 f8bc 	bl	80894ae <_ZN5Print7printlnEPKc>
 8083336:	a806      	add	r0, sp, #24
 8083338:	f005 fe98 	bl	808906c <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 808333c:	f007 fc00 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8083340:	2040      	movs	r0, #64	; 0x40
 8083342:	a901      	add	r1, sp, #4
 8083344:	f7fd fb5a 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083348:	a802      	add	r0, sp, #8
 808334a:	f005 fe8f 	bl	808906c <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 808334e:	b00b      	add	sp, #44	; 0x2c
 8083350:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8083352:	f007 f905 	bl	808a560 <_Z16_fetch_usbserialv>
 8083356:	4909      	ldr	r1, [pc, #36]	; (808337c <_Z22serialGetHumiditySlopev+0xf8>)
 8083358:	f006 f8a9 	bl	80894ae <_ZN5Print7printlnEPKc>
 808335c:	e7f4      	b.n	8083348 <_Z22serialGetHumiditySlopev+0xc4>
 808335e:	bf00      	nop
 8083360:	0808e66f 	.word	0x0808e66f
 8083364:	200007a0 	.word	0x200007a0
 8083368:	0808e681 	.word	0x0808e681
 808336c:	0808e684 	.word	0x0808e684
 8083370:	41200000 	.word	0x41200000
 8083374:	42c80000 	.word	0x42c80000
 8083378:	0808e699 	.word	0x0808e699
 808337c:	0808e47d 	.word	0x0808e47d

08083380 <_Z20readAlpha1Constantlyv>:
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void)
{
 8083380:	b570      	push	{r4, r5, r6, lr}
    while (!Serial.available())
    {
        CO_float_A = readCO_A();
 8083382:	4d0c      	ldr	r5, [pc, #48]	; (80833b4 <_Z20readAlpha1Constantlyv+0x34>)
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
 8083384:	4e0c      	ldr	r6, [pc, #48]	; (80833b8 <_Z20readAlpha1Constantlyv+0x38>)
    while (!Serial.available())
 8083386:	f007 f8eb 	bl	808a560 <_Z16_fetch_usbserialv>
 808338a:	6803      	ldr	r3, [r0, #0]
 808338c:	691b      	ldr	r3, [r3, #16]
 808338e:	4798      	blx	r3
 8083390:	b978      	cbnz	r0, 80833b2 <_Z20readAlpha1Constantlyv+0x32>
    CO_float = readAlpha1();
 8083392:	f7fe fd45 	bl	8081e20 <_Z10readAlpha1v>
        CO_float_A = readCO_A();
 8083396:	6028      	str	r0, [r5, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
 8083398:	f007 f8e2 	bl	808a560 <_Z16_fetch_usbserialv>
 808339c:	4604      	mov	r4, r0
 808339e:	6828      	ldr	r0, [r5, #0]
 80833a0:	f007 fde6 	bl	808af70 <__aeabi_f2d>
 80833a4:	4602      	mov	r2, r0
 80833a6:	460b      	mov	r3, r1
 80833a8:	4620      	mov	r0, r4
 80833aa:	4631      	mov	r1, r6
 80833ac:	f7fd fb58 	bl	8080a60 <_ZN5Print6printfEPKcz>
    while (!Serial.available())
 80833b0:	e7e9      	b.n	8083386 <_Z20readAlpha1Constantlyv+0x6>
    }
}
 80833b2:	bd70      	pop	{r4, r5, r6, pc}
 80833b4:	200002c0 	.word	0x200002c0
 80833b8:	0808e6aa 	.word	0x0808e6aa

080833bc <_Z23outputSerialMenuOptionsv>:

void outputSerialMenuOptions(void)
{
 80833bc:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 80833be:	f007 f8cf 	bl	808a560 <_Z16_fetch_usbserialv>
 80833c2:	49a2      	ldr	r1, [pc, #648]	; (808364c <_Z23outputSerialMenuOptionsv+0x290>)
 80833c4:	f006 f873 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 80833c8:	f007 f8ca 	bl	808a560 <_Z16_fetch_usbserialv>
 80833cc:	49a0      	ldr	r1, [pc, #640]	; (8083650 <_Z23outputSerialMenuOptionsv+0x294>)
 80833ce:	f006 f86e 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 80833d2:	f007 f8c5 	bl	808a560 <_Z16_fetch_usbserialv>
 80833d6:	499f      	ldr	r1, [pc, #636]	; (8083654 <_Z23outputSerialMenuOptionsv+0x298>)
 80833d8:	f006 f869 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 80833dc:	f007 f8c0 	bl	808a560 <_Z16_fetch_usbserialv>
 80833e0:	499d      	ldr	r1, [pc, #628]	; (8083658 <_Z23outputSerialMenuOptionsv+0x29c>)
 80833e2:	f006 f864 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 80833e6:	f007 f8bb 	bl	808a560 <_Z16_fetch_usbserialv>
 80833ea:	499c      	ldr	r1, [pc, #624]	; (808365c <_Z23outputSerialMenuOptionsv+0x2a0>)
 80833ec:	f006 f85f 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 80833f0:	f007 f8b6 	bl	808a560 <_Z16_fetch_usbserialv>
 80833f4:	499a      	ldr	r1, [pc, #616]	; (8083660 <_Z23outputSerialMenuOptionsv+0x2a4>)
 80833f6:	f006 f85a 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 80833fa:	f007 f8b1 	bl	808a560 <_Z16_fetch_usbserialv>
 80833fe:	4999      	ldr	r1, [pc, #612]	; (8083664 <_Z23outputSerialMenuOptionsv+0x2a8>)
 8083400:	f006 f855 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 8083404:	f007 f8ac 	bl	808a560 <_Z16_fetch_usbserialv>
 8083408:	4997      	ldr	r1, [pc, #604]	; (8083668 <_Z23outputSerialMenuOptionsv+0x2ac>)
 808340a:	f006 f850 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 808340e:	f007 f8a7 	bl	808a560 <_Z16_fetch_usbserialv>
 8083412:	4996      	ldr	r1, [pc, #600]	; (808366c <_Z23outputSerialMenuOptionsv+0x2b0>)
 8083414:	f006 f84b 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8083418:	f007 f8a2 	bl	808a560 <_Z16_fetch_usbserialv>
 808341c:	4994      	ldr	r1, [pc, #592]	; (8083670 <_Z23outputSerialMenuOptionsv+0x2b4>)
 808341e:	f006 f846 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 8083422:	f007 f89d 	bl	808a560 <_Z16_fetch_usbserialv>
 8083426:	4993      	ldr	r1, [pc, #588]	; (8083674 <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083428:	f006 f841 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 808342c:	f007 f898 	bl	808a560 <_Z16_fetch_usbserialv>
 8083430:	4991      	ldr	r1, [pc, #580]	; (8083678 <_Z23outputSerialMenuOptionsv+0x2bc>)
 8083432:	f006 f83c 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 8083436:	f007 f893 	bl	808a560 <_Z16_fetch_usbserialv>
 808343a:	4990      	ldr	r1, [pc, #576]	; (808367c <_Z23outputSerialMenuOptionsv+0x2c0>)
 808343c:	f006 f837 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8083440:	f007 f88e 	bl	808a560 <_Z16_fetch_usbserialv>
 8083444:	498e      	ldr	r1, [pc, #568]	; (8083680 <_Z23outputSerialMenuOptionsv+0x2c4>)
 8083446:	f006 f832 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 808344a:	f007 f889 	bl	808a560 <_Z16_fetch_usbserialv>
 808344e:	498d      	ldr	r1, [pc, #564]	; (8083684 <_Z23outputSerialMenuOptionsv+0x2c8>)
 8083450:	f006 f82d 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 8083454:	f007 f884 	bl	808a560 <_Z16_fetch_usbserialv>
 8083458:	498b      	ldr	r1, [pc, #556]	; (8083688 <_Z23outputSerialMenuOptionsv+0x2cc>)
 808345a:	f006 f828 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 808345e:	f007 f87f 	bl	808a560 <_Z16_fetch_usbserialv>
 8083462:	498a      	ldr	r1, [pc, #552]	; (808368c <_Z23outputSerialMenuOptionsv+0x2d0>)
 8083464:	f006 f823 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 8083468:	f007 f87a 	bl	808a560 <_Z16_fetch_usbserialv>
 808346c:	4988      	ldr	r1, [pc, #544]	; (8083690 <_Z23outputSerialMenuOptionsv+0x2d4>)
 808346e:	f006 f81e 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 8083472:	f007 f875 	bl	808a560 <_Z16_fetch_usbserialv>
 8083476:	4987      	ldr	r1, [pc, #540]	; (8083694 <_Z23outputSerialMenuOptionsv+0x2d8>)
 8083478:	f006 f819 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 808347c:	f007 f870 	bl	808a560 <_Z16_fetch_usbserialv>
 8083480:	4985      	ldr	r1, [pc, #532]	; (8083698 <_Z23outputSerialMenuOptionsv+0x2dc>)
 8083482:	f006 f814 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 8083486:	f007 f86b 	bl	808a560 <_Z16_fetch_usbserialv>
 808348a:	4984      	ldr	r1, [pc, #528]	; (808369c <_Z23outputSerialMenuOptionsv+0x2e0>)
 808348c:	f006 f80f 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 8083490:	f007 f866 	bl	808a560 <_Z16_fetch_usbserialv>
 8083494:	4982      	ldr	r1, [pc, #520]	; (80836a0 <_Z23outputSerialMenuOptionsv+0x2e4>)
 8083496:	f006 f80a 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 808349a:	f007 f861 	bl	808a560 <_Z16_fetch_usbserialv>
 808349e:	4981      	ldr	r1, [pc, #516]	; (80836a4 <_Z23outputSerialMenuOptionsv+0x2e8>)
 80834a0:	f006 f805 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 80834a4:	f007 f85c 	bl	808a560 <_Z16_fetch_usbserialv>
 80834a8:	497f      	ldr	r1, [pc, #508]	; (80836a8 <_Z23outputSerialMenuOptionsv+0x2ec>)
 80834aa:	f006 f800 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 80834ae:	f007 f857 	bl	808a560 <_Z16_fetch_usbserialv>
 80834b2:	497e      	ldr	r1, [pc, #504]	; (80836ac <_Z23outputSerialMenuOptionsv+0x2f0>)
 80834b4:	f005 fffb 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 80834b8:	f007 f852 	bl	808a560 <_Z16_fetch_usbserialv>
 80834bc:	497c      	ldr	r1, [pc, #496]	; (80836b0 <_Z23outputSerialMenuOptionsv+0x2f4>)
 80834be:	f005 fff6 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 80834c2:	f007 f84d 	bl	808a560 <_Z16_fetch_usbserialv>
 80834c6:	497b      	ldr	r1, [pc, #492]	; (80836b4 <_Z23outputSerialMenuOptionsv+0x2f8>)
 80834c8:	f005 fff1 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 80834cc:	f007 f848 	bl	808a560 <_Z16_fetch_usbserialv>
 80834d0:	4979      	ldr	r1, [pc, #484]	; (80836b8 <_Z23outputSerialMenuOptionsv+0x2fc>)
 80834d2:	f005 ffec 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 80834d6:	f007 f843 	bl	808a560 <_Z16_fetch_usbserialv>
 80834da:	4978      	ldr	r1, [pc, #480]	; (80836bc <_Z23outputSerialMenuOptionsv+0x300>)
 80834dc:	f005 ffe7 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 80834e0:	f007 f83e 	bl	808a560 <_Z16_fetch_usbserialv>
 80834e4:	4976      	ldr	r1, [pc, #472]	; (80836c0 <_Z23outputSerialMenuOptionsv+0x304>)
 80834e6:	f005 ffe2 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 80834ea:	f007 f839 	bl	808a560 <_Z16_fetch_usbserialv>
 80834ee:	4975      	ldr	r1, [pc, #468]	; (80836c4 <_Z23outputSerialMenuOptionsv+0x308>)
 80834f0:	f005 ffdd 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 80834f4:	f007 f834 	bl	808a560 <_Z16_fetch_usbserialv>
 80834f8:	4973      	ldr	r1, [pc, #460]	; (80836c8 <_Z23outputSerialMenuOptionsv+0x30c>)
 80834fa:	f005 ffd8 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 80834fe:	f007 f82f 	bl	808a560 <_Z16_fetch_usbserialv>
 8083502:	4972      	ldr	r1, [pc, #456]	; (80836cc <_Z23outputSerialMenuOptionsv+0x310>)
 8083504:	f005 ffd3 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8083508:	f007 f82a 	bl	808a560 <_Z16_fetch_usbserialv>
 808350c:	4970      	ldr	r1, [pc, #448]	; (80836d0 <_Z23outputSerialMenuOptionsv+0x314>)
 808350e:	f005 ffce 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 8083512:	f007 f825 	bl	808a560 <_Z16_fetch_usbserialv>
 8083516:	496f      	ldr	r1, [pc, #444]	; (80836d4 <_Z23outputSerialMenuOptionsv+0x318>)
 8083518:	f005 ffc9 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 808351c:	f007 f820 	bl	808a560 <_Z16_fetch_usbserialv>
 8083520:	496d      	ldr	r1, [pc, #436]	; (80836d8 <_Z23outputSerialMenuOptionsv+0x31c>)
 8083522:	f005 ffc4 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("A:  Output CO constantly and rapidly");
 8083526:	f007 f81b 	bl	808a560 <_Z16_fetch_usbserialv>
 808352a:	496c      	ldr	r1, [pc, #432]	; (80836dc <_Z23outputSerialMenuOptionsv+0x320>)
 808352c:	f005 ffbf 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8083530:	f007 f816 	bl	808a560 <_Z16_fetch_usbserialv>
 8083534:	496a      	ldr	r1, [pc, #424]	; (80836e0 <_Z23outputSerialMenuOptionsv+0x324>)
 8083536:	f005 ffba 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celsius");
 808353a:	f007 f811 	bl	808a560 <_Z16_fetch_usbserialv>
 808353e:	4969      	ldr	r1, [pc, #420]	; (80836e4 <_Z23outputSerialMenuOptionsv+0x328>)
 8083540:	f005 ffb5 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8083544:	f007 f80c 	bl	808a560 <_Z16_fetch_usbserialv>
 8083548:	4967      	ldr	r1, [pc, #412]	; (80836e8 <_Z23outputSerialMenuOptionsv+0x32c>)
 808354a:	f005 ffb0 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 808354e:	f007 f807 	bl	808a560 <_Z16_fetch_usbserialv>
 8083552:	4966      	ldr	r1, [pc, #408]	; (80836ec <_Z23outputSerialMenuOptionsv+0x330>)
 8083554:	f005 ffab 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Fahrenheit");
 8083558:	f007 f802 	bl	808a560 <_Z16_fetch_usbserialv>
 808355c:	4964      	ldr	r1, [pc, #400]	; (80836f0 <_Z23outputSerialMenuOptionsv+0x334>)
 808355e:	f005 ffa6 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 8083562:	f006 fffd 	bl	808a560 <_Z16_fetch_usbserialv>
 8083566:	4963      	ldr	r1, [pc, #396]	; (80836f4 <_Z23outputSerialMenuOptionsv+0x338>)
 8083568:	f005 ffa1 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 808356c:	f006 fff8 	bl	808a560 <_Z16_fetch_usbserialv>
 8083570:	4961      	ldr	r1, [pc, #388]	; (80836f8 <_Z23outputSerialMenuOptionsv+0x33c>)
 8083572:	f005 ff9c 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 8083576:	f006 fff3 	bl	808a560 <_Z16_fetch_usbserialv>
 808357a:	4960      	ldr	r1, [pc, #384]	; (80836fc <_Z23outputSerialMenuOptionsv+0x340>)
 808357c:	f005 ff97 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 8083580:	f006 ffee 	bl	808a560 <_Z16_fetch_usbserialv>
 8083584:	495e      	ldr	r1, [pc, #376]	; (8083700 <_Z23outputSerialMenuOptionsv+0x344>)
 8083586:	f005 ff92 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 808358a:	f006 ffe9 	bl	808a560 <_Z16_fetch_usbserialv>
 808358e:	495d      	ldr	r1, [pc, #372]	; (8083704 <_Z23outputSerialMenuOptionsv+0x348>)
 8083590:	f005 ff8d 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 8083594:	f006 ffe4 	bl	808a560 <_Z16_fetch_usbserialv>
 8083598:	495b      	ldr	r1, [pc, #364]	; (8083708 <_Z23outputSerialMenuOptionsv+0x34c>)
 808359a:	f005 ff88 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 808359e:	f006 ffdf 	bl	808a560 <_Z16_fetch_usbserialv>
 80835a2:	495a      	ldr	r1, [pc, #360]	; (808370c <_Z23outputSerialMenuOptionsv+0x350>)
 80835a4:	f005 ff83 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 80835a8:	f006 ffda 	bl	808a560 <_Z16_fetch_usbserialv>
 80835ac:	4958      	ldr	r1, [pc, #352]	; (8083710 <_Z23outputSerialMenuOptionsv+0x354>)
 80835ae:	f005 ff7e 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 80835b2:	f006 ffd5 	bl	808a560 <_Z16_fetch_usbserialv>
 80835b6:	4957      	ldr	r1, [pc, #348]	; (8083714 <_Z23outputSerialMenuOptionsv+0x358>)
 80835b8:	f005 ff79 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 80835bc:	f006 ffd0 	bl	808a560 <_Z16_fetch_usbserialv>
 80835c0:	4955      	ldr	r1, [pc, #340]	; (8083718 <_Z23outputSerialMenuOptionsv+0x35c>)
 80835c2:	f005 ff74 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 80835c6:	f006 ffcb 	bl	808a560 <_Z16_fetch_usbserialv>
 80835ca:	4954      	ldr	r1, [pc, #336]	; (808371c <_Z23outputSerialMenuOptionsv+0x360>)
 80835cc:	f005 ff6f 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 80835d0:	f006 ffc6 	bl	808a560 <_Z16_fetch_usbserialv>
 80835d4:	4952      	ldr	r1, [pc, #328]	; (8083720 <_Z23outputSerialMenuOptionsv+0x364>)
 80835d6:	f005 ff6a 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 80835da:	f006 ffc1 	bl	808a560 <_Z16_fetch_usbserialv>
 80835de:	4951      	ldr	r1, [pc, #324]	; (8083724 <_Z23outputSerialMenuOptionsv+0x368>)
 80835e0:	f005 ff65 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 80835e4:	f006 ffbc 	bl	808a560 <_Z16_fetch_usbserialv>
 80835e8:	494f      	ldr	r1, [pc, #316]	; (8083728 <_Z23outputSerialMenuOptionsv+0x36c>)
 80835ea:	f005 ff60 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 80835ee:	f006 ffb7 	bl	808a560 <_Z16_fetch_usbserialv>
 80835f2:	494e      	ldr	r1, [pc, #312]	; (808372c <_Z23outputSerialMenuOptionsv+0x370>)
 80835f4:	f005 ff5b 	bl	80894ae <_ZN5Print7printlnEPKc>

    Serial.println("W:  Enable/Disable google location services");
 80835f8:	f006 ffb2 	bl	808a560 <_Z16_fetch_usbserialv>
 80835fc:	494c      	ldr	r1, [pc, #304]	; (8083730 <_Z23outputSerialMenuOptionsv+0x374>)
 80835fe:	f005 ff56 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 8083602:	f006 ffad 	bl	808a560 <_Z16_fetch_usbserialv>
 8083606:	494b      	ldr	r1, [pc, #300]	; (8083734 <_Z23outputSerialMenuOptionsv+0x378>)
 8083608:	f005 ff51 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 808360c:	f006 ffa8 	bl	808a560 <_Z16_fetch_usbserialv>
 8083610:	4949      	ldr	r1, [pc, #292]	; (8083738 <_Z23outputSerialMenuOptionsv+0x37c>)
 8083612:	f005 ff4c 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 8083616:	f006 ffa3 	bl	808a560 <_Z16_fetch_usbserialv>
 808361a:	4948      	ldr	r1, [pc, #288]	; (808373c <_Z23outputSerialMenuOptionsv+0x380>)
 808361c:	f005 ff47 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083620:	f006 ff9e 	bl	808a560 <_Z16_fetch_usbserialv>
 8083624:	4946      	ldr	r1, [pc, #280]	; (8083740 <_Z23outputSerialMenuOptionsv+0x384>)
 8083626:	f005 ff42 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
 808362a:	f006 ff99 	bl	808a560 <_Z16_fetch_usbserialv>
 808362e:	4945      	ldr	r1, [pc, #276]	; (8083744 <_Z23outputSerialMenuOptionsv+0x388>)
 8083630:	f005 ff3d 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8083634:	f006 ff94 	bl	808a560 <_Z16_fetch_usbserialv>
 8083638:	4943      	ldr	r1, [pc, #268]	; (8083748 <_Z23outputSerialMenuOptionsv+0x38c>)
 808363a:	f005 ff38 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 808363e:	f006 ff8f 	bl	808a560 <_Z16_fetch_usbserialv>
}
 8083642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("x:  Exits this menu");
 8083646:	4941      	ldr	r1, [pc, #260]	; (808374c <_Z23outputSerialMenuOptionsv+0x390>)
 8083648:	f005 bf31 	b.w	80894ae <_ZN5Print7printlnEPKc>
 808364c:	0808e6ba 	.word	0x0808e6ba
 8083650:	0808e6d0 	.word	0x0808e6d0
 8083654:	0808e6e5 	.word	0x0808e6e5
 8083658:	0808e6f9 	.word	0x0808e6f9
 808365c:	0808e70d 	.word	0x0808e70d
 8083660:	0808e720 	.word	0x0808e720
 8083664:	0808e735 	.word	0x0808e735
 8083668:	0808e749 	.word	0x0808e749
 808366c:	0808e760 	.word	0x0808e760
 8083670:	0808e776 	.word	0x0808e776
 8083674:	0808e78c 	.word	0x0808e78c
 8083678:	0808e7a1 	.word	0x0808e7a1
 808367c:	0808e7be 	.word	0x0808e7be
 8083680:	0808e7da 	.word	0x0808e7da
 8083684:	0808e7f4 	.word	0x0808e7f4
 8083688:	0808e80d 	.word	0x0808e80d
 808368c:	0808e827 	.word	0x0808e827
 8083690:	0808e840 	.word	0x0808e840
 8083694:	0808e85c 	.word	0x0808e85c
 8083698:	0808e879 	.word	0x0808e879
 808369c:	0808e892 	.word	0x0808e892
 80836a0:	0808e8ae 	.word	0x0808e8ae
 80836a4:	0808e8c6 	.word	0x0808e8c6
 80836a8:	0808e8df 	.word	0x0808e8df
 80836ac:	0808e8f8 	.word	0x0808e8f8
 80836b0:	0808e90c 	.word	0x0808e90c
 80836b4:	0808e921 	.word	0x0808e921
 80836b8:	0808e93c 	.word	0x0808e93c
 80836bc:	0808e957 	.word	0x0808e957
 80836c0:	0808e96d 	.word	0x0808e96d
 80836c4:	0808e97e 	.word	0x0808e97e
 80836c8:	0808e990 	.word	0x0808e990
 80836cc:	0808e9a1 	.word	0x0808e9a1
 80836d0:	0808e9b3 	.word	0x0808e9b3
 80836d4:	0808e9dc 	.word	0x0808e9dc
 80836d8:	0808ea05 	.word	0x0808ea05
 80836dc:	0808ea34 	.word	0x0808ea34
 80836e0:	0808ea59 	.word	0x0808ea59
 80836e4:	0808ea7e 	.word	0x0808ea7e
 80836e8:	0808eaa6 	.word	0x0808eaa6
 80836ec:	0808eae6 	.word	0x0808eae6
 80836f0:	0808eb29 	.word	0x0808eb29
 80836f4:	0808eb54 	.word	0x0808eb54
 80836f8:	0808eb97 	.word	0x0808eb97
 80836fc:	0808ebdd 	.word	0x0808ebdd
 8083700:	0808ec11 	.word	0x0808ec11
 8083704:	0808ec2f 	.word	0x0808ec2f
 8083708:	0808ec53 	.word	0x0808ec53
 808370c:	0808ec6e 	.word	0x0808ec6e
 8083710:	0808ec98 	.word	0x0808ec98
 8083714:	0808eccd 	.word	0x0808eccd
 8083718:	0808ecf1 	.word	0x0808ecf1
 808371c:	0808ed05 	.word	0x0808ed05
 8083720:	0808ed21 	.word	0x0808ed21
 8083724:	0808ed46 	.word	0x0808ed46
 8083728:	0808ed6a 	.word	0x0808ed6a
 808372c:	0808ed8f 	.word	0x0808ed8f
 8083730:	0808edb7 	.word	0x0808edb7
 8083734:	0808ede3 	.word	0x0808ede3
 8083738:	0808ee26 	.word	0x0808ee26
 808373c:	0808ee58 	.word	0x0808ee58
 8083740:	0808ee7e 	.word	0x0808ee7e
 8083744:	0808eee4 	.word	0x0808eee4
 8083748:	0808ef48 	.word	0x0808ef48
 808374c:	0808ef5d 	.word	0x0808ef5d

08083750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8083750:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8083752:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8083754:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 8083756:	b17c      	cbz	r4, 8083778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 8083758:	6863      	ldr	r3, [r4, #4]
 808375a:	3b01      	subs	r3, #1
 808375c:	6063      	str	r3, [r4, #4]
 808375e:	b95b      	cbnz	r3, 8083778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8083760:	6823      	ldr	r3, [r4, #0]
 8083762:	4620      	mov	r0, r4
 8083764:	689b      	ldr	r3, [r3, #8]
 8083766:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8083768:	68a3      	ldr	r3, [r4, #8]
 808376a:	3b01      	subs	r3, #1
 808376c:	60a3      	str	r3, [r4, #8]
 808376e:	b91b      	cbnz	r3, 8083778 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8083770:	6823      	ldr	r3, [r4, #0]
 8083772:	4620      	mov	r0, r4
 8083774:	68db      	ldr	r3, [r3, #12]
 8083776:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 8083778:	4628      	mov	r0, r5
 808377a:	bd38      	pop	{r3, r4, r5, pc}

0808377c <_Z13outputToCloud6StringS_>:
{
 808377c:	b530      	push	{r4, r5, lr}
 808377e:	b08b      	sub	sp, #44	; 0x2c
    String webhook_data = " ";
 8083780:	492b      	ldr	r1, [pc, #172]	; (8083830 <_Z13outputToCloud6StringS_+0xb4>)
{
 8083782:	4605      	mov	r5, r0
    String webhook_data = " ";
 8083784:	a802      	add	r0, sp, #8
 8083786:	f005 fcbb 	bl	8089100 <_ZN6StringC1EPKc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808378a:	f005 f8c3 	bl	8088914 <spark_cloud_flag_connected>
 808378e:	4c29      	ldr	r4, [pc, #164]	; (8083834 <_Z13outputToCloud6StringS_+0xb8>)
 8083790:	4b29      	ldr	r3, [pc, #164]	; (8083838 <_Z13outputToCloud6StringS_+0xbc>)
    if(Particle.connected() && serial_cellular_enabled)
 8083792:	2800      	cmp	r0, #0
 8083794:	d030      	beq.n	80837f8 <_Z13outputToCloud6StringS_+0x7c>
 8083796:	681b      	ldr	r3, [r3, #0]
 8083798:	2b00      	cmp	r3, #0
 808379a:	d030      	beq.n	80837fe <_Z13outputToCloud6StringS_+0x82>
        status_word.status_int |= 0x0002;
 808379c:	4a27      	ldr	r2, [pc, #156]	; (808383c <_Z13outputToCloud6StringS_+0xc0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808379e:	4928      	ldr	r1, [pc, #160]	; (8083840 <_Z13outputToCloud6StringS_+0xc4>)
 80837a0:	8813      	ldrh	r3, [r2, #0]
 80837a2:	a806      	add	r0, sp, #24
 80837a4:	f043 0302 	orr.w	r3, r3, #2
 80837a8:	8013      	strh	r3, [r2, #0]
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80837aa:	4b26      	ldr	r3, [pc, #152]	; (8083844 <_Z13outputToCloud6StringS_+0xc8>)
 80837ac:	682a      	ldr	r2, [r5, #0]
 80837ae:	781b      	ldrb	r3, [r3, #0]
 80837b0:	f88d 3000 	strb.w	r3, [sp]
 80837b4:	233c      	movs	r3, #60	; 0x3c
 80837b6:	f006 fca3 	bl	808a100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80837ba:	a807      	add	r0, sp, #28
 80837bc:	f7ff ffc8 	bl	8083750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80837c0:	f004 fe34 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80837c4:	4b20      	ldr	r3, [pc, #128]	; (8083848 <_Z13outputToCloud6StringS_+0xcc>)
 80837c6:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
 80837c8:	f005 f894 	bl	80888f4 <spark_process>
        if(debugging_enabled)
 80837cc:	6823      	ldr	r3, [r4, #0]
 80837ce:	b173      	cbz	r3, 80837ee <_Z13outputToCloud6StringS_+0x72>
            Serial.println("Published pamup data!");
 80837d0:	f006 fec6 	bl	808a560 <_Z16_fetch_usbserialv>
 80837d4:	491d      	ldr	r1, [pc, #116]	; (808384c <_Z13outputToCloud6StringS_+0xd0>)
 80837d6:	f005 fe6a 	bl	80894ae <_ZN5Print7printlnEPKc>
            writeLogFile("Published pamup data!");
 80837da:	491c      	ldr	r1, [pc, #112]	; (808384c <_Z13outputToCloud6StringS_+0xd0>)
                writeLogFile("Couldn't connect to particle.");
 80837dc:	a806      	add	r0, sp, #24
 80837de:	f005 fc8f 	bl	8089100 <_ZN6StringC1EPKc>
 80837e2:	a806      	add	r0, sp, #24
 80837e4:	f7fd ffb8 	bl	8081758 <_Z12writeLogFile6String>
 80837e8:	a806      	add	r0, sp, #24
 80837ea:	f005 fc3f 	bl	808906c <_ZN6StringD1Ev>
    String webhook_data = " ";
 80837ee:	a802      	add	r0, sp, #8
 80837f0:	f005 fc3c 	bl	808906c <_ZN6StringD1Ev>
}
 80837f4:	b00b      	add	sp, #44	; 0x2c
 80837f6:	bd30      	pop	{r4, r5, pc}
        if(serial_cellular_enabled == 0)
 80837f8:	681b      	ldr	r3, [r3, #0]
 80837fa:	6821      	ldr	r1, [r4, #0]
 80837fc:	b94b      	cbnz	r3, 8083812 <_Z13outputToCloud6StringS_+0x96>
            if(debugging_enabled)
 80837fe:	6823      	ldr	r3, [r4, #0]
 8083800:	2b00      	cmp	r3, #0
 8083802:	d0f4      	beq.n	80837ee <_Z13outputToCloud6StringS_+0x72>
                Serial.println("Cellular is disabled.");
 8083804:	f006 feac 	bl	808a560 <_Z16_fetch_usbserialv>
 8083808:	4911      	ldr	r1, [pc, #68]	; (8083850 <_Z13outputToCloud6StringS_+0xd4>)
 808380a:	f005 fe50 	bl	80894ae <_ZN5Print7printlnEPKc>
                writeLogFile("Cellular is disabled.");
 808380e:	4910      	ldr	r1, [pc, #64]	; (8083850 <_Z13outputToCloud6StringS_+0xd4>)
 8083810:	e7e4      	b.n	80837dc <_Z13outputToCloud6StringS_+0x60>
            status_word.status_int &= 0xFFFD;   //clear the connected bit
 8083812:	4a0a      	ldr	r2, [pc, #40]	; (808383c <_Z13outputToCloud6StringS_+0xc0>)
 8083814:	8813      	ldrh	r3, [r2, #0]
 8083816:	f023 0302 	bic.w	r3, r3, #2
 808381a:	8013      	strh	r3, [r2, #0]
            if(debugging_enabled)
 808381c:	2900      	cmp	r1, #0
 808381e:	d0e6      	beq.n	80837ee <_Z13outputToCloud6StringS_+0x72>
                Serial.println("Couldn't connect to particle.");
 8083820:	f006 fe9e 	bl	808a560 <_Z16_fetch_usbserialv>
 8083824:	490b      	ldr	r1, [pc, #44]	; (8083854 <_Z13outputToCloud6StringS_+0xd8>)
 8083826:	f005 fe42 	bl	80894ae <_ZN5Print7printlnEPKc>
                writeLogFile("Couldn't connect to particle.");
 808382a:	490a      	ldr	r1, [pc, #40]	; (8083854 <_Z13outputToCloud6StringS_+0xd8>)
 808382c:	e7d6      	b.n	80837dc <_Z13outputToCloud6StringS_+0x60>
 808382e:	bf00      	nop
 8083830:	0808fd52 	.word	0x0808fd52
 8083834:	200005e8 	.word	0x200005e8
 8083838:	20000c28 	.word	0x20000c28
 808383c:	20000c48 	.word	0x20000c48
 8083840:	0808ef71 	.word	0x0808ef71
 8083844:	20000520 	.word	0x20000520
 8083848:	200011c4 	.word	0x200011c4
 808384c:	0808ef77 	.word	0x0808ef77
 8083850:	0808ef8d 	.word	0x0808ef8d
 8083854:	0808efa3 	.word	0x0808efa3

08083858 <_Z15outputDataToESPv>:
{
 8083858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808385c:	b0dc      	sub	sp, #368	; 0x170
    time_t time = Time.now();
 808385e:	f006 f93a 	bl	8089ad6 <_ZN9TimeClass3nowEv>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8083862:	4bb8      	ldr	r3, [pc, #736]	; (8083b44 <_Z15outputDataToESPv+0x2ec>)
    String cloud_output_string = "";    //create a clean string
 8083864:	49b8      	ldr	r1, [pc, #736]	; (8083b48 <_Z15outputDataToESPv+0x2f0>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8083866:	681a      	ldr	r2, [r3, #0]
 8083868:	4bb8      	ldr	r3, [pc, #736]	; (8083b4c <_Z15outputDataToESPv+0x2f4>)
    time_t time = Time.now();
 808386a:	4604      	mov	r4, r0
 808386c:	17c5      	asrs	r5, r0, #31
    String cloud_output_string = "";    //create a clean string
 808386e:	a803      	add	r0, sp, #12
 8083870:	601a      	str	r2, [r3, #0]
 8083872:	f005 fc45 	bl	8089100 <_ZN6StringC1EPKc>
    String csv_output_string = "";
 8083876:	49b4      	ldr	r1, [pc, #720]	; (8083b48 <_Z15outputDataToESPv+0x2f0>)
 8083878:	a807      	add	r0, sp, #28
 808387a:	f005 fc41 	bl	8089100 <_ZN6StringC1EPKc>
    String sensible_string = "";
 808387e:	49b2      	ldr	r1, [pc, #712]	; (8083b48 <_Z15outputDataToESPv+0x2f0>)
 8083880:	a80b      	add	r0, sp, #44	; 0x2c
 8083882:	f005 fc3d 	bl	8089100 <_ZN6StringC1EPKc>
    String latitude_string = "";
 8083886:	49b0      	ldr	r1, [pc, #704]	; (8083b48 <_Z15outputDataToESPv+0x2f0>)
 8083888:	a80f      	add	r0, sp, #60	; 0x3c
 808388a:	f005 fc39 	bl	8089100 <_ZN6StringC1EPKc>
    String longitude_string = "";
 808388e:	49ae      	ldr	r1, [pc, #696]	; (8083b48 <_Z15outputDataToESPv+0x2f0>)
 8083890:	a813      	add	r0, sp, #76	; 0x4c
 8083892:	f005 fc35 	bl	8089100 <_ZN6StringC1EPKc>
	String & operator += (char c)			{concat(c); return (*this);}
 8083896:	215e      	movs	r1, #94	; 0x5e
 8083898:	a803      	add	r0, sp, #12
 808389a:	f005 fd22 	bl	80892e2 <_ZN6String6concatEc>
    cloud_output_string += String(1) + ";";           //header
 808389e:	220a      	movs	r2, #10
 80838a0:	2101      	movs	r1, #1
 80838a2:	a81b      	add	r0, sp, #108	; 0x6c
 80838a4:	f005 fca0 	bl	80891e8 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 80838a8:	a91b      	add	r1, sp, #108	; 0x6c
 80838aa:	a81f      	add	r0, sp, #124	; 0x7c
 80838ac:	f005 fc67 	bl	808917e <_ZN6StringC1ERKS_>
 80838b0:	49a7      	ldr	r1, [pc, #668]	; (8083b50 <_Z15outputDataToESPv+0x2f8>)
 80838b2:	a81f      	add	r0, sp, #124	; 0x7c
 80838b4:	f005 fd2e 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 80838b8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80838ba:	a803      	add	r0, sp, #12
 80838bc:	f005 fcfe 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80838c0:	a81f      	add	r0, sp, #124	; 0x7c
 80838c2:	f005 fbd3 	bl	808906c <_ZN6StringD1Ev>
 80838c6:	a81b      	add	r0, sp, #108	; 0x6c
 80838c8:	f005 fbd0 	bl	808906c <_ZN6StringD1Ev>
    cloud_output_string += String(DEVICE_ID_PACKET_CONSTANT) + String(DEVICE_id);   //device id
 80838cc:	4ea1      	ldr	r6, [pc, #644]	; (8083b54 <_Z15outputDataToESPv+0x2fc>)
 80838ce:	215a      	movs	r1, #90	; 0x5a
 80838d0:	a817      	add	r0, sp, #92	; 0x5c
 80838d2:	f005 fc78 	bl	80891c6 <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 80838d6:	a917      	add	r1, sp, #92	; 0x5c
 80838d8:	a81f      	add	r0, sp, #124	; 0x7c
 80838da:	f005 fc50 	bl	808917e <_ZN6StringC1ERKS_>
 80838de:	220a      	movs	r2, #10
 80838e0:	6831      	ldr	r1, [r6, #0]
 80838e2:	a81b      	add	r0, sp, #108	; 0x6c
 80838e4:	f005 fc80 	bl	80891e8 <_ZN6StringC1Eih>
 80838e8:	a91b      	add	r1, sp, #108	; 0x6c
 80838ea:	a81f      	add	r0, sp, #124	; 0x7c
 80838ec:	f005 fd06 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 80838f0:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80838f2:	a803      	add	r0, sp, #12
 80838f4:	f005 fce2 	bl	80892bc <_ZN6String6concatERKS_>
 80838f8:	a81b      	add	r0, sp, #108	; 0x6c
 80838fa:	f005 fbb7 	bl	808906c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80838fe:	a81f      	add	r0, sp, #124	; 0x7c
 8083900:	f005 fbb4 	bl	808906c <_ZN6StringD1Ev>
 8083904:	a817      	add	r0, sp, #92	; 0x5c
 8083906:	f005 fbb1 	bl	808906c <_ZN6StringD1Ev>
    csv_output_string += String(DEVICE_id) + ",";
 808390a:	220a      	movs	r2, #10
 808390c:	6831      	ldr	r1, [r6, #0]
 808390e:	a81b      	add	r0, sp, #108	; 0x6c
 8083910:	f005 fc6a 	bl	80891e8 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083914:	a91b      	add	r1, sp, #108	; 0x6c
 8083916:	a81f      	add	r0, sp, #124	; 0x7c
 8083918:	f005 fc31 	bl	808917e <_ZN6StringC1ERKS_>
 808391c:	498e      	ldr	r1, [pc, #568]	; (8083b58 <_Z15outputDataToESPv+0x300>)
 808391e:	a81f      	add	r0, sp, #124	; 0x7c
 8083920:	f005 fcf8 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8083924:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083926:	a807      	add	r0, sp, #28
 8083928:	f005 fcc8 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808392c:	a81f      	add	r0, sp, #124	; 0x7c
 808392e:	f005 fb9d 	bl	808906c <_ZN6StringD1Ev>
 8083932:	a81b      	add	r0, sp, #108	; 0x6c
 8083934:	f005 fb9a 	bl	808906c <_ZN6StringD1Ev>
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float_A, 3);
 8083938:	4e88      	ldr	r6, [pc, #544]	; (8083b5c <_Z15outputDataToESPv+0x304>)
 808393a:	214d      	movs	r1, #77	; 0x4d
 808393c:	a817      	add	r0, sp, #92	; 0x5c
 808393e:	f005 fc42 	bl	80891c6 <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083942:	a917      	add	r1, sp, #92	; 0x5c
 8083944:	a81f      	add	r0, sp, #124	; 0x7c
 8083946:	f005 fc1a 	bl	808917e <_ZN6StringC1ERKS_>
 808394a:	2203      	movs	r2, #3
 808394c:	6831      	ldr	r1, [r6, #0]
 808394e:	a81b      	add	r0, sp, #108	; 0x6c
 8083950:	f005 fc70 	bl	8089234 <_ZN6StringC1Efi>
 8083954:	a91b      	add	r1, sp, #108	; 0x6c
 8083956:	a81f      	add	r0, sp, #124	; 0x7c
 8083958:	f005 fcd0 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 808395c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808395e:	a803      	add	r0, sp, #12
 8083960:	f005 fcac 	bl	80892bc <_ZN6String6concatERKS_>
 8083964:	a81b      	add	r0, sp, #108	; 0x6c
 8083966:	f005 fb81 	bl	808906c <_ZN6StringD1Ev>
class StringSumHelper : public String
 808396a:	a81f      	add	r0, sp, #124	; 0x7c
 808396c:	f005 fb7e 	bl	808906c <_ZN6StringD1Ev>
 8083970:	a817      	add	r0, sp, #92	; 0x5c
 8083972:	f005 fb7b 	bl	808906c <_ZN6StringD1Ev>
    csv_output_string += String(CO_float_A, 3) + ",";
 8083976:	2203      	movs	r2, #3
 8083978:	6831      	ldr	r1, [r6, #0]
 808397a:	a81b      	add	r0, sp, #108	; 0x6c
 808397c:	f005 fc5a 	bl	8089234 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8083980:	a91b      	add	r1, sp, #108	; 0x6c
 8083982:	a81f      	add	r0, sp, #124	; 0x7c
 8083984:	f005 fbfb 	bl	808917e <_ZN6StringC1ERKS_>
 8083988:	4973      	ldr	r1, [pc, #460]	; (8083b58 <_Z15outputDataToESPv+0x300>)
 808398a:	a81f      	add	r0, sp, #124	; 0x7c
 808398c:	f005 fcc2 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8083990:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083992:	a807      	add	r0, sp, #28
 8083994:	f005 fc92 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083998:	a81f      	add	r0, sp, #124	; 0x7c
 808399a:	f005 fb67 	bl	808906c <_ZN6StringD1Ev>
 808399e:	a81b      	add	r0, sp, #108	; 0x6c
 80839a0:	f005 fb64 	bl	808906c <_ZN6StringD1Ev>
    csv_output_string += String(CO_float_B, 3) + ",";
 80839a4:	4b6e      	ldr	r3, [pc, #440]	; (8083b60 <_Z15outputDataToESPv+0x308>)
 80839a6:	2203      	movs	r2, #3
 80839a8:	6819      	ldr	r1, [r3, #0]
 80839aa:	a81b      	add	r0, sp, #108	; 0x6c
 80839ac:	f005 fc42 	bl	8089234 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 80839b0:	a91b      	add	r1, sp, #108	; 0x6c
 80839b2:	a81f      	add	r0, sp, #124	; 0x7c
 80839b4:	f005 fbe3 	bl	808917e <_ZN6StringC1ERKS_>
 80839b8:	4967      	ldr	r1, [pc, #412]	; (8083b58 <_Z15outputDataToESPv+0x300>)
 80839ba:	a81f      	add	r0, sp, #124	; 0x7c
 80839bc:	f005 fcaa 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 80839c0:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80839c2:	a807      	add	r0, sp, #28
 80839c4:	f005 fc7a 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80839c8:	a81f      	add	r0, sp, #124	; 0x7c
 80839ca:	f005 fb4f 	bl	808906c <_ZN6StringD1Ev>
 80839ce:	a81b      	add	r0, sp, #108	; 0x6c
 80839d0:	f005 fb4c 	bl	808906c <_ZN6StringD1Ev>
    cloud_output_string += String(LATITUDE_PACKET_CONSTANT);
 80839d4:	2161      	movs	r1, #97	; 0x61
 80839d6:	a81f      	add	r0, sp, #124	; 0x7c
 80839d8:	f005 fbf5 	bl	80891c6 <_ZN6StringC1Ec>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80839dc:	a91f      	add	r1, sp, #124	; 0x7c
 80839de:	a803      	add	r0, sp, #12
 80839e0:	f005 fc6c 	bl	80892bc <_ZN6String6concatERKS_>
 80839e4:	a81f      	add	r0, sp, #124	; 0x7c
 80839e6:	f005 fb41 	bl	808906c <_ZN6StringD1Ev>
    if (gps.get_latitude() != 0)
 80839ea:	485e      	ldr	r0, [pc, #376]	; (8083b64 <_Z15outputDataToESPv+0x30c>)
 80839ec:	f002 fcf6 	bl	80863dc <_ZN3GPS12get_latitudeEv>
 80839f0:	2200      	movs	r2, #0
 80839f2:	2300      	movs	r3, #0
 80839f4:	f007 fd7c 	bl	808b4f0 <__aeabi_dcmpeq>
 80839f8:	2800      	cmp	r0, #0
 80839fa:	f040 81d5 	bne.w	8083da8 <_Z15outputDataToESPv+0x550>
        if (gps.get_nsIndicator() == 0)
 80839fe:	4859      	ldr	r0, [pc, #356]	; (8083b64 <_Z15outputDataToESPv+0x30c>)
 8083a00:	f002 fd07 	bl	8086412 <_ZN3GPS15get_nsIndicatorEv>
 8083a04:	b938      	cbnz	r0, 8083a16 <_Z15outputDataToESPv+0x1be>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8083a06:	4958      	ldr	r1, [pc, #352]	; (8083b68 <_Z15outputDataToESPv+0x310>)
 8083a08:	a807      	add	r0, sp, #28
 8083a0a:	f005 fc5b 	bl	80892c4 <_ZN6String6concatEPKc>
 8083a0e:	4956      	ldr	r1, [pc, #344]	; (8083b68 <_Z15outputDataToESPv+0x310>)
 8083a10:	a803      	add	r0, sp, #12
 8083a12:	f005 fc57 	bl	80892c4 <_ZN6String6concatEPKc>
        csv_output_string += String(gps.get_latitude()) + ",";
 8083a16:	4853      	ldr	r0, [pc, #332]	; (8083b64 <_Z15outputDataToESPv+0x30c>)
 8083a18:	f002 fce0 	bl	80863dc <_ZN3GPS12get_latitudeEv>
 8083a1c:	2606      	movs	r6, #6
 8083a1e:	4602      	mov	r2, r0
 8083a20:	460b      	mov	r3, r1
 8083a22:	9600      	str	r6, [sp, #0]
 8083a24:	a81b      	add	r0, sp, #108	; 0x6c
 8083a26:	f005 fc1c 	bl	8089262 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8083a2a:	a91b      	add	r1, sp, #108	; 0x6c
 8083a2c:	a81f      	add	r0, sp, #124	; 0x7c
 8083a2e:	f005 fba6 	bl	808917e <_ZN6StringC1ERKS_>
 8083a32:	4949      	ldr	r1, [pc, #292]	; (8083b58 <_Z15outputDataToESPv+0x300>)
 8083a34:	a81f      	add	r0, sp, #124	; 0x7c
 8083a36:	f005 fc6d 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8083a3a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083a3c:	a807      	add	r0, sp, #28
 8083a3e:	f005 fc3d 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083a42:	a81f      	add	r0, sp, #124	; 0x7c
 8083a44:	f005 fb12 	bl	808906c <_ZN6StringD1Ev>
 8083a48:	a81b      	add	r0, sp, #108	; 0x6c
 8083a4a:	f005 fb0f 	bl	808906c <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_latitude());
 8083a4e:	4845      	ldr	r0, [pc, #276]	; (8083b64 <_Z15outputDataToESPv+0x30c>)
 8083a50:	f002 fcc4 	bl	80863dc <_ZN3GPS12get_latitudeEv>
 8083a54:	9600      	str	r6, [sp, #0]
 8083a56:	4602      	mov	r2, r0
 8083a58:	460b      	mov	r3, r1
 8083a5a:	a81f      	add	r0, sp, #124	; 0x7c
 8083a5c:	f005 fc01 	bl	8089262 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083a60:	a91f      	add	r1, sp, #124	; 0x7c
 8083a62:	a803      	add	r0, sp, #12
 8083a64:	f005 fc2a 	bl	80892bc <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_latitude);
 8083a68:	a81f      	add	r0, sp, #124	; 0x7c
 8083a6a:	f005 faff 	bl	808906c <_ZN6StringD1Ev>
    cloud_output_string += String(LONGITUDE_PACKET_CONSTANT);
 8083a6e:	216f      	movs	r1, #111	; 0x6f
 8083a70:	a81f      	add	r0, sp, #124	; 0x7c
 8083a72:	f005 fba8 	bl	80891c6 <_ZN6StringC1Ec>
 8083a76:	a91f      	add	r1, sp, #124	; 0x7c
 8083a78:	a803      	add	r0, sp, #12
 8083a7a:	f005 fc1f 	bl	80892bc <_ZN6String6concatERKS_>
 8083a7e:	a81f      	add	r0, sp, #124	; 0x7c
 8083a80:	f005 faf4 	bl	808906c <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0)
 8083a84:	4837      	ldr	r0, [pc, #220]	; (8083b64 <_Z15outputDataToESPv+0x30c>)
 8083a86:	f002 fcae 	bl	80863e6 <_ZN3GPS13get_longitudeEv>
 8083a8a:	2200      	movs	r2, #0
 8083a8c:	2300      	movs	r3, #0
 8083a8e:	f007 fd2f 	bl	808b4f0 <__aeabi_dcmpeq>
 8083a92:	2800      	cmp	r0, #0
 8083a94:	f040 81a3 	bne.w	8083dde <_Z15outputDataToESPv+0x586>
        if (gps.get_ewIndicator() == 0x01)
 8083a98:	4832      	ldr	r0, [pc, #200]	; (8083b64 <_Z15outputDataToESPv+0x30c>)
 8083a9a:	f002 fcbd 	bl	8086418 <_ZN3GPS15get_ewIndicatorEv>
 8083a9e:	2801      	cmp	r0, #1
 8083aa0:	d107      	bne.n	8083ab2 <_Z15outputDataToESPv+0x25a>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8083aa2:	4931      	ldr	r1, [pc, #196]	; (8083b68 <_Z15outputDataToESPv+0x310>)
 8083aa4:	a807      	add	r0, sp, #28
 8083aa6:	f005 fc0d 	bl	80892c4 <_ZN6String6concatEPKc>
 8083aaa:	492f      	ldr	r1, [pc, #188]	; (8083b68 <_Z15outputDataToESPv+0x310>)
 8083aac:	a803      	add	r0, sp, #12
 8083aae:	f005 fc09 	bl	80892c4 <_ZN6String6concatEPKc>
        csv_output_string += String(gps.get_longitude()) + ",";
 8083ab2:	482c      	ldr	r0, [pc, #176]	; (8083b64 <_Z15outputDataToESPv+0x30c>)
 8083ab4:	f002 fc97 	bl	80863e6 <_ZN3GPS13get_longitudeEv>
 8083ab8:	2606      	movs	r6, #6
 8083aba:	4602      	mov	r2, r0
 8083abc:	460b      	mov	r3, r1
 8083abe:	9600      	str	r6, [sp, #0]
 8083ac0:	a81b      	add	r0, sp, #108	; 0x6c
 8083ac2:	f005 fbce 	bl	8089262 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8083ac6:	a91b      	add	r1, sp, #108	; 0x6c
 8083ac8:	a81f      	add	r0, sp, #124	; 0x7c
 8083aca:	f005 fb58 	bl	808917e <_ZN6StringC1ERKS_>
 8083ace:	4922      	ldr	r1, [pc, #136]	; (8083b58 <_Z15outputDataToESPv+0x300>)
 8083ad0:	a81f      	add	r0, sp, #124	; 0x7c
 8083ad2:	f005 fc1f 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8083ad6:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083ad8:	a807      	add	r0, sp, #28
 8083ada:	f005 fbef 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083ade:	a81f      	add	r0, sp, #124	; 0x7c
 8083ae0:	f005 fac4 	bl	808906c <_ZN6StringD1Ev>
 8083ae4:	a81b      	add	r0, sp, #108	; 0x6c
 8083ae6:	f005 fac1 	bl	808906c <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_longitude());
 8083aea:	481e      	ldr	r0, [pc, #120]	; (8083b64 <_Z15outputDataToESPv+0x30c>)
 8083aec:	f002 fc7b 	bl	80863e6 <_ZN3GPS13get_longitudeEv>
 8083af0:	9600      	str	r6, [sp, #0]
 8083af2:	4602      	mov	r2, r0
 8083af4:	460b      	mov	r3, r1
 8083af6:	a81f      	add	r0, sp, #124	; 0x7c
 8083af8:	f005 fbb3 	bl	8089262 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083afc:	a91f      	add	r1, sp, #124	; 0x7c
 8083afe:	a803      	add	r0, sp, #12
 8083b00:	f005 fbdc 	bl	80892bc <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_longitude);
 8083b04:	a81f      	add	r0, sp, #124	; 0x7c
 8083b06:	f005 fab1 	bl	808906c <_ZN6StringD1Ev>
    cloud_output_string += String(ACCURACY_PACKET_CONSTANT);
 8083b0a:	2163      	movs	r1, #99	; 0x63
 8083b0c:	a81f      	add	r0, sp, #124	; 0x7c
 8083b0e:	f005 fb5a 	bl	80891c6 <_ZN6StringC1Ec>
 8083b12:	a91f      	add	r1, sp, #124	; 0x7c
 8083b14:	a803      	add	r0, sp, #12
 8083b16:	f005 fbd1 	bl	80892bc <_ZN6String6concatERKS_>
 8083b1a:	a81f      	add	r0, sp, #124	; 0x7c
 8083b1c:	f005 faa6 	bl	808906c <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0)
 8083b20:	4810      	ldr	r0, [pc, #64]	; (8083b64 <_Z15outputDataToESPv+0x30c>)
 8083b22:	f002 fc60 	bl	80863e6 <_ZN3GPS13get_longitudeEv>
 8083b26:	2200      	movs	r2, #0
 8083b28:	2300      	movs	r3, #0
 8083b2a:	f007 fce1 	bl	808b4f0 <__aeabi_dcmpeq>
 8083b2e:	2800      	cmp	r0, #0
 8083b30:	f040 81a4 	bne.w	8083e7c <_Z15outputDataToESPv+0x624>
        csv_output_string += String(gps.get_horizontalDilution() / 10.0) + ",";
 8083b34:	480b      	ldr	r0, [pc, #44]	; (8083b64 <_Z15outputDataToESPv+0x30c>)
 8083b36:	f002 fc5b 	bl	80863f0 <_ZN3GPS22get_horizontalDilutionEv>
 8083b3a:	f007 fa07 	bl	808af4c <__aeabi_i2d>
 8083b3e:	2200      	movs	r2, #0
 8083b40:	e014      	b.n	8083b6c <_Z15outputDataToESPv+0x314>
 8083b42:	bf00      	nop
 8083b44:	200000d4 	.word	0x200000d4
 8083b48:	08090075 	.word	0x08090075
 8083b4c:	20000ce0 	.word	0x20000ce0
 8083b50:	0808efc1 	.word	0x0808efc1
 8083b54:	20000080 	.word	0x20000080
 8083b58:	0808e05c 	.word	0x0808e05c
 8083b5c:	200002c0 	.word	0x200002c0
 8083b60:	200002c4 	.word	0x200002c4
 8083b64:	20000670 	.word	0x20000670
 8083b68:	0808e149 	.word	0x0808e149
 8083b6c:	4ba9      	ldr	r3, [pc, #676]	; (8083e14 <_Z15outputDataToESPv+0x5bc>)
 8083b6e:	f007 fb81 	bl	808b274 <__aeabi_ddiv>
 8083b72:	2606      	movs	r6, #6
 8083b74:	4602      	mov	r2, r0
 8083b76:	460b      	mov	r3, r1
 8083b78:	9600      	str	r6, [sp, #0]
 8083b7a:	a81b      	add	r0, sp, #108	; 0x6c
 8083b7c:	f005 fb71 	bl	8089262 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8083b80:	a91b      	add	r1, sp, #108	; 0x6c
 8083b82:	a81f      	add	r0, sp, #124	; 0x7c
 8083b84:	f005 fafb 	bl	808917e <_ZN6StringC1ERKS_>
 8083b88:	49a3      	ldr	r1, [pc, #652]	; (8083e18 <_Z15outputDataToESPv+0x5c0>)
 8083b8a:	a81f      	add	r0, sp, #124	; 0x7c
 8083b8c:	f005 fbc2 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8083b90:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083b92:	a807      	add	r0, sp, #28
 8083b94:	f005 fb92 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083b98:	a81f      	add	r0, sp, #124	; 0x7c
 8083b9a:	f005 fa67 	bl	808906c <_ZN6StringD1Ev>
 8083b9e:	a81b      	add	r0, sp, #108	; 0x6c
 8083ba0:	f005 fa64 	bl	808906c <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_horizontalDilution() / 10.0);
 8083ba4:	489d      	ldr	r0, [pc, #628]	; (8083e1c <_Z15outputDataToESPv+0x5c4>)
 8083ba6:	f002 fc23 	bl	80863f0 <_ZN3GPS22get_horizontalDilutionEv>
 8083baa:	f007 f9cf 	bl	808af4c <__aeabi_i2d>
 8083bae:	2200      	movs	r2, #0
 8083bb0:	4b98      	ldr	r3, [pc, #608]	; (8083e14 <_Z15outputDataToESPv+0x5bc>)
 8083bb2:	f007 fb5f 	bl	808b274 <__aeabi_ddiv>
 8083bb6:	9600      	str	r6, [sp, #0]
 8083bb8:	4602      	mov	r2, r0
 8083bba:	460b      	mov	r3, r1
 8083bbc:	a81f      	add	r0, sp, #124	; 0x7c
 8083bbe:	f005 fb50 	bl	8089262 <_ZN6StringC1Edi>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083bc2:	a91f      	add	r1, sp, #124	; 0x7c
    csv_output_string += String(status_word.status_int) + ",";
 8083bc4:	4e96      	ldr	r6, [pc, #600]	; (8083e20 <_Z15outputDataToESPv+0x5c8>)
 8083bc6:	a803      	add	r0, sp, #12
 8083bc8:	f005 fb78 	bl	80892bc <_ZN6String6concatERKS_>
        cloud_output_string += String(geolocation_accuracy);
 8083bcc:	a81f      	add	r0, sp, #124	; 0x7c
 8083bce:	f005 fa4d 	bl	808906c <_ZN6StringD1Ev>
    csv_output_string += String(status_word.status_int) + ",";
 8083bd2:	220a      	movs	r2, #10
 8083bd4:	8831      	ldrh	r1, [r6, #0]
 8083bd6:	a81b      	add	r0, sp, #108	; 0x6c
 8083bd8:	f005 fb06 	bl	80891e8 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8083bdc:	a91b      	add	r1, sp, #108	; 0x6c
 8083bde:	a81f      	add	r0, sp, #124	; 0x7c
 8083be0:	f005 facd 	bl	808917e <_ZN6StringC1ERKS_>
 8083be4:	498c      	ldr	r1, [pc, #560]	; (8083e18 <_Z15outputDataToESPv+0x5c0>)
 8083be6:	a81f      	add	r0, sp, #124	; 0x7c
 8083be8:	f005 fb94 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8083bec:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083bee:	a807      	add	r0, sp, #28
 8083bf0:	f005 fb64 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083bf4:	a81f      	add	r0, sp, #124	; 0x7c
 8083bf6:	f005 fa39 	bl	808906c <_ZN6StringD1Ev>
 8083bfa:	a81b      	add	r0, sp, #108	; 0x6c
 8083bfc:	f005 fa36 	bl	808906c <_ZN6StringD1Ev>
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
 8083c00:	4b88      	ldr	r3, [pc, #544]	; (8083e24 <_Z15outputDataToESPv+0x5cc>)
 8083c02:	4622      	mov	r2, r4
 8083c04:	4988      	ldr	r1, [pc, #544]	; (8083e28 <_Z15outputDataToESPv+0x5d0>)
 8083c06:	9300      	str	r3, [sp, #0]
 8083c08:	a81f      	add	r0, sp, #124	; 0x7c
 8083c0a:	462b      	mov	r3, r5
 8083c0c:	f005 ff04 	bl	8089a18 <_ZN9TimeClass6formatExPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083c10:	a91f      	add	r1, sp, #124	; 0x7c
 8083c12:	a807      	add	r0, sp, #28
 8083c14:	f005 fb52 	bl	80892bc <_ZN6String6concatERKS_>
 8083c18:	a81f      	add	r0, sp, #124	; 0x7c
 8083c1a:	f005 fa27 	bl	808906c <_ZN6StringD1Ev>
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8083c1e:	2159      	movs	r1, #89	; 0x59
 8083c20:	a817      	add	r0, sp, #92	; 0x5c
 8083c22:	f005 fad0 	bl	80891c6 <_ZN6StringC1Ec>
	StringSumHelper(const String &s) : String(s) {}
 8083c26:	a917      	add	r1, sp, #92	; 0x5c
 8083c28:	a81f      	add	r0, sp, #124	; 0x7c
 8083c2a:	f005 faa8 	bl	808917e <_ZN6StringC1ERKS_>
 8083c2e:	f005 ff52 	bl	8089ad6 <_ZN9TimeClass3nowEv>
 8083c32:	220a      	movs	r2, #10
 8083c34:	4601      	mov	r1, r0
 8083c36:	a81b      	add	r0, sp, #108	; 0x6c
 8083c38:	f005 fae9 	bl	808920e <_ZN6StringC1Elh>
 8083c3c:	a91b      	add	r1, sp, #108	; 0x6c
 8083c3e:	a81f      	add	r0, sp, #124	; 0x7c
 8083c40:	f005 fb5c 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 8083c44:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083c46:	a803      	add	r0, sp, #12
 8083c48:	f005 fb38 	bl	80892bc <_ZN6String6concatERKS_>
 8083c4c:	a81b      	add	r0, sp, #108	; 0x6c
 8083c4e:	f005 fa0d 	bl	808906c <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083c52:	a81f      	add	r0, sp, #124	; 0x7c
 8083c54:	f005 fa0a 	bl	808906c <_ZN6StringD1Ev>
    if (debugging_enabled)
 8083c58:	4c74      	ldr	r4, [pc, #464]	; (8083e2c <_Z15outputDataToESPv+0x5d4>)
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8083c5a:	a817      	add	r0, sp, #92	; 0x5c
 8083c5c:	f005 fa06 	bl	808906c <_ZN6StringD1Ev>
	String & operator += (char c)			{concat(c); return (*this);}
 8083c60:	2126      	movs	r1, #38	; 0x26
 8083c62:	a803      	add	r0, sp, #12
 8083c64:	f005 fb3d 	bl	80892e2 <_ZN6String6concatEc>
    if (debugging_enabled)
 8083c68:	6823      	ldr	r3, [r4, #0]
 8083c6a:	b14b      	cbz	r3, 8083c80 <_Z15outputDataToESPv+0x428>
        Serial.println("Line to write to cloud:");
 8083c6c:	f006 fc78 	bl	808a560 <_Z16_fetch_usbserialv>
 8083c70:	496f      	ldr	r1, [pc, #444]	; (8083e30 <_Z15outputDataToESPv+0x5d8>)
 8083c72:	f005 fc1c 	bl	80894ae <_ZN5Print7printlnEPKc>
        Serial.println(cloud_output_string);
 8083c76:	f006 fc73 	bl	808a560 <_Z16_fetch_usbserialv>
 8083c7a:	9903      	ldr	r1, [sp, #12]
 8083c7c:	f005 fc17 	bl	80894ae <_ZN5Print7printlnEPKc>
    outputToCloud(cloud_output_string, "blahfornow");
 8083c80:	a903      	add	r1, sp, #12
 8083c82:	a81b      	add	r0, sp, #108	; 0x6c
 8083c84:	f005 fa7b 	bl	808917e <_ZN6StringC1ERKS_>
 8083c88:	496a      	ldr	r1, [pc, #424]	; (8083e34 <_Z15outputDataToESPv+0x5dc>)
 8083c8a:	a81f      	add	r0, sp, #124	; 0x7c
 8083c8c:	f005 fa38 	bl	8089100 <_ZN6StringC1EPKc>
 8083c90:	a91f      	add	r1, sp, #124	; 0x7c
 8083c92:	a81b      	add	r0, sp, #108	; 0x6c
 8083c94:	f7ff fd72 	bl	808377c <_Z13outputToCloud6StringS_>
 8083c98:	a81f      	add	r0, sp, #124	; 0x7c
 8083c9a:	f005 f9e7 	bl	808906c <_ZN6StringD1Ev>
 8083c9e:	a81b      	add	r0, sp, #108	; 0x6c
 8083ca0:	f005 f9e4 	bl	808906c <_ZN6StringD1Ev>
    if (esp_wifi_connection_status)
 8083ca4:	4b64      	ldr	r3, [pc, #400]	; (8083e38 <_Z15outputDataToESPv+0x5e0>)
 8083ca6:	681b      	ldr	r3, [r3, #0]
 8083ca8:	b1ab      	cbz	r3, 8083cd6 <_Z15outputDataToESPv+0x47e>
        if (debugging_enabled)
 8083caa:	6823      	ldr	r3, [r4, #0]
 8083cac:	b173      	cbz	r3, 8083ccc <_Z15outputDataToESPv+0x474>
            Serial.println("Sending data to esp to upload via wifi...");
 8083cae:	f006 fc57 	bl	808a560 <_Z16_fetch_usbserialv>
 8083cb2:	4962      	ldr	r1, [pc, #392]	; (8083e3c <_Z15outputDataToESPv+0x5e4>)
 8083cb4:	f005 fbfb 	bl	80894ae <_ZN5Print7printlnEPKc>
            writeLogFile("Sending data to esp to upload via wifi");
 8083cb8:	4961      	ldr	r1, [pc, #388]	; (8083e40 <_Z15outputDataToESPv+0x5e8>)
 8083cba:	a81f      	add	r0, sp, #124	; 0x7c
 8083cbc:	f005 fa20 	bl	8089100 <_ZN6StringC1EPKc>
 8083cc0:	a81f      	add	r0, sp, #124	; 0x7c
 8083cc2:	f7fd fd49 	bl	8081758 <_Z12writeLogFile6String>
 8083cc6:	a81f      	add	r0, sp, #124	; 0x7c
 8083cc8:	f005 f9d0 	bl	808906c <_ZN6StringD1Ev>
        Serial1.println(cloud_output_string);
 8083ccc:	f006 fd66 	bl	808a79c <_Z22__fetch_global_Serial1v>
 8083cd0:	9903      	ldr	r1, [sp, #12]
 8083cd2:	f005 fbec 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println(csv_output_string);
 8083cd6:	f006 fc43 	bl	808a560 <_Z16_fetch_usbserialv>
 8083cda:	9907      	ldr	r1, [sp, #28]
 8083cdc:	f005 fbe7 	bl	80894ae <_ZN5Print7printlnEPKc>
 8083ce0:	4958      	ldr	r1, [pc, #352]	; (8083e44 <_Z15outputDataToESPv+0x5ec>)
 8083ce2:	2302      	movs	r3, #2
 8083ce4:	220c      	movs	r2, #12
 8083ce6:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8083cea:	f7fc ff63 	bl	8080bb4 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS))
 8083cee:	2800      	cmp	r0, #0
 8083cf0:	d037      	beq.n	8083d62 <_Z15outputDataToESPv+0x50a>
        if (debugging_enabled)
 8083cf2:	6823      	ldr	r3, [r4, #0]
 8083cf4:	b123      	cbz	r3, 8083d00 <_Z15outputDataToESPv+0x4a8>
            Serial.println("Writing row to file.");
 8083cf6:	f006 fc33 	bl	808a560 <_Z16_fetch_usbserialv>
 8083cfa:	4953      	ldr	r1, [pc, #332]	; (8083e48 <_Z15outputDataToESPv+0x5f0>)
 8083cfc:	f005 fbd7 	bl	80894ae <_ZN5Print7printlnEPKc>
 8083d00:	4a52      	ldr	r2, [pc, #328]	; (8083e4c <_Z15outputDataToESPv+0x5f4>)
 8083d02:	4953      	ldr	r1, [pc, #332]	; (8083e50 <_Z15outputDataToESPv+0x5f8>)
        if (file_started == 0)
 8083d04:	4c53      	ldr	r4, [pc, #332]	; (8083e54 <_Z15outputDataToESPv+0x5fc>)
 8083d06:	2346      	movs	r3, #70	; 0x46
 8083d08:	6812      	ldr	r2, [r2, #0]
 8083d0a:	6809      	ldr	r1, [r1, #0]
 8083d0c:	4852      	ldr	r0, [pc, #328]	; (8083e58 <_Z15outputDataToESPv+0x600>)
 8083d0e:	f003 fcdc 	bl	80876ca <_ZN7FatFile4openEPS_PKch>
 8083d12:	6823      	ldr	r3, [r4, #0]
 8083d14:	b9f3      	cbnz	r3, 8083d54 <_Z15outputDataToESPv+0x4fc>
            file.println("File Start timestamp: ");
 8083d16:	4951      	ldr	r1, [pc, #324]	; (8083e5c <_Z15outputDataToESPv+0x604>)
 8083d18:	4851      	ldr	r0, [pc, #324]	; (8083e60 <_Z15outputDataToESPv+0x608>)
 8083d1a:	f005 fbc8 	bl	80894ae <_ZN5Print7printlnEPKc>
                return timeStr(now());
 8083d1e:	f005 feda 	bl	8089ad6 <_ZN9TimeClass3nowEv>
 8083d22:	17c3      	asrs	r3, r0, #31
 8083d24:	4602      	mov	r2, r0
 8083d26:	a81f      	add	r0, sp, #124	; 0x7c
 8083d28:	f005 fdd2 	bl	80898d0 <_ZN9TimeClass7timeStrEx>
            file.println(Time.timeStr());
 8083d2c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8083d2e:	484c      	ldr	r0, [pc, #304]	; (8083e60 <_Z15outputDataToESPv+0x608>)
 8083d30:	f005 fbbd 	bl	80894ae <_ZN5Print7printlnEPKc>
 8083d34:	a81f      	add	r0, sp, #124	; 0x7c
 8083d36:	f005 f999 	bl	808906c <_ZN6StringD1Ev>
            file.println(String(HEADER_STRING));
 8083d3a:	494a      	ldr	r1, [pc, #296]	; (8083e64 <_Z15outputDataToESPv+0x60c>)
 8083d3c:	a81f      	add	r0, sp, #124	; 0x7c
 8083d3e:	f005 f9df 	bl	8089100 <_ZN6StringC1EPKc>
 8083d42:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8083d44:	4846      	ldr	r0, [pc, #280]	; (8083e60 <_Z15outputDataToESPv+0x608>)
 8083d46:	f005 fbb2 	bl	80894ae <_ZN5Print7printlnEPKc>
 8083d4a:	a81f      	add	r0, sp, #124	; 0x7c
 8083d4c:	f005 f98e 	bl	808906c <_ZN6StringD1Ev>
            file_started = 1;
 8083d50:	2301      	movs	r3, #1
 8083d52:	6023      	str	r3, [r4, #0]
        file.println(csv_output_string);
 8083d54:	9907      	ldr	r1, [sp, #28]
 8083d56:	4842      	ldr	r0, [pc, #264]	; (8083e60 <_Z15outputDataToESPv+0x608>)
 8083d58:	f005 fba9 	bl	80894ae <_ZN5Print7printlnEPKc>
        file.close();
 8083d5c:	483e      	ldr	r0, [pc, #248]	; (8083e58 <_Z15outputDataToESPv+0x600>)
 8083d5e:	f003 fcad 	bl	80876bc <_ZN7FatFile5closeEv>
{
 8083d62:	2700      	movs	r7, #0
        wordBytes.myWord = DEVICE_id;
 8083d64:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8083e74 <_Z15outputDataToESPv+0x61c>
            floatBytes.myFloat = bme.pressure / 100.0;
 8083d68:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8083e78 <_Z15outputDataToESPv+0x620>
        wordBytes.myWord = gps.get_latitudeWhole();
 8083d6c:	4d2b      	ldr	r5, [pc, #172]	; (8083e1c <_Z15outputDataToESPv+0x5c4>)
 8083d6e:	ac1f      	add	r4, sp, #124	; 0x7c
        ble_output_array[0 + i * (BLE_PAYLOAD_SIZE)] = 1;
 8083d70:	2301      	movs	r3, #1
 8083d72:	7023      	strb	r3, [r4, #0]
        wordBytes.myWord = DEVICE_id;
 8083d74:	f8d8 3000 	ldr.w	r3, [r8]
        ble_output_array[1 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8083d78:	7063      	strb	r3, [r4, #1]
        ble_output_array[2 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8083d7a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8083d7e:	70a3      	strb	r3, [r4, #2]
        ble_output_array[3 + i * (BLE_PAYLOAD_SIZE)] = sample_counter;
 8083d80:	4b39      	ldr	r3, [pc, #228]	; (8083e68 <_Z15outputDataToESPv+0x610>)
 8083d82:	681b      	ldr	r3, [r3, #0]
 8083d84:	70e3      	strb	r3, [r4, #3]
        switch (i)
 8083d86:	b2fb      	uxtb	r3, r7
 8083d88:	3b01      	subs	r3, #1
 8083d8a:	2b09      	cmp	r3, #9
 8083d8c:	f200 8091 	bhi.w	8083eb2 <_Z15outputDataToESPv+0x65a>
 8083d90:	e8df f013 	tbh	[pc, r3, lsl #1]
 8083d94:	00980094 	.word	0x00980094
 8083d98:	01090102 	.word	0x01090102
 8083d9c:	0111010d 	.word	0x0111010d
 8083da0:	011e0116 	.word	0x011e0116
 8083da4:	012b0123 	.word	0x012b0123
        csv_output_string += String(geolocation_latitude) + ",";
 8083da8:	4930      	ldr	r1, [pc, #192]	; (8083e6c <_Z15outputDataToESPv+0x614>)
 8083daa:	a81b      	add	r0, sp, #108	; 0x6c
 8083dac:	f005 f9a8 	bl	8089100 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8083db0:	a91b      	add	r1, sp, #108	; 0x6c
 8083db2:	a81f      	add	r0, sp, #124	; 0x7c
 8083db4:	f005 f9e3 	bl	808917e <_ZN6StringC1ERKS_>
 8083db8:	4917      	ldr	r1, [pc, #92]	; (8083e18 <_Z15outputDataToESPv+0x5c0>)
 8083dba:	a81f      	add	r0, sp, #124	; 0x7c
 8083dbc:	f005 faaa 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8083dc0:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083dc2:	a807      	add	r0, sp, #28
 8083dc4:	f005 fa7a 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083dc8:	a81f      	add	r0, sp, #124	; 0x7c
 8083dca:	f005 f94f 	bl	808906c <_ZN6StringD1Ev>
 8083dce:	a81b      	add	r0, sp, #108	; 0x6c
 8083dd0:	f005 f94c 	bl	808906c <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_latitude);
 8083dd4:	4925      	ldr	r1, [pc, #148]	; (8083e6c <_Z15outputDataToESPv+0x614>)
 8083dd6:	a81f      	add	r0, sp, #124	; 0x7c
 8083dd8:	f005 f992 	bl	8089100 <_ZN6StringC1EPKc>
 8083ddc:	e640      	b.n	8083a60 <_Z15outputDataToESPv+0x208>
        csv_output_string += String(geolocation_longitude) + ",";
 8083dde:	4924      	ldr	r1, [pc, #144]	; (8083e70 <_Z15outputDataToESPv+0x618>)
 8083de0:	a81b      	add	r0, sp, #108	; 0x6c
 8083de2:	f005 f98d 	bl	8089100 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8083de6:	a91b      	add	r1, sp, #108	; 0x6c
 8083de8:	a81f      	add	r0, sp, #124	; 0x7c
 8083dea:	f005 f9c8 	bl	808917e <_ZN6StringC1ERKS_>
 8083dee:	490a      	ldr	r1, [pc, #40]	; (8083e18 <_Z15outputDataToESPv+0x5c0>)
 8083df0:	a81f      	add	r0, sp, #124	; 0x7c
 8083df2:	f005 fa8f 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8083df6:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083df8:	a807      	add	r0, sp, #28
 8083dfa:	f005 fa5f 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083dfe:	a81f      	add	r0, sp, #124	; 0x7c
 8083e00:	f005 f934 	bl	808906c <_ZN6StringD1Ev>
 8083e04:	a81b      	add	r0, sp, #108	; 0x6c
 8083e06:	f005 f931 	bl	808906c <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_longitude);
 8083e0a:	4919      	ldr	r1, [pc, #100]	; (8083e70 <_Z15outputDataToESPv+0x618>)
 8083e0c:	a81f      	add	r0, sp, #124	; 0x7c
 8083e0e:	f005 f977 	bl	8089100 <_ZN6StringC1EPKc>
 8083e12:	e673      	b.n	8083afc <_Z15outputDataToESPv+0x2a4>
 8083e14:	40240000 	.word	0x40240000
 8083e18:	0808e05c 	.word	0x0808e05c
 8083e1c:	20000670 	.word	0x20000670
 8083e20:	20000c48 	.word	0x20000c48
 8083e24:	0808e14b 	.word	0x0808e14b
 8083e28:	20000cdc 	.word	0x20000cdc
 8083e2c:	200005e8 	.word	0x200005e8
 8083e30:	0808efc3 	.word	0x0808efc3
 8083e34:	0808efdb 	.word	0x0808efdb
 8083e38:	200005ec 	.word	0x200005ec
 8083e3c:	0808efe6 	.word	0x0808efe6
 8083e40:	0808f010 	.word	0x0808f010
 8083e44:	20000c1c 	.word	0x20000c1c
 8083e48:	0808f037 	.word	0x0808f037
 8083e4c:	20000650 	.word	0x20000650
 8083e50:	20000cbc 	.word	0x20000cbc
 8083e54:	20000660 	.word	0x20000660
 8083e58:	200005f8 	.word	0x200005f8
 8083e5c:	0808de93 	.word	0x0808de93
 8083e60:	200005f0 	.word	0x200005f0
 8083e64:	0808f04c 	.word	0x0808f04c
 8083e68:	200007a8 	.word	0x200007a8
 8083e6c:	200000a6 	.word	0x200000a6
 8083e70:	200000b2 	.word	0x200000b2
 8083e74:	20000080 	.word	0x20000080
 8083e78:	42c80000 	.word	0x42c80000
        csv_output_string += String(geolocation_accuracy) + ",";
 8083e7c:	495d      	ldr	r1, [pc, #372]	; (8083ff4 <_Z15outputDataToESPv+0x79c>)
 8083e7e:	a81b      	add	r0, sp, #108	; 0x6c
 8083e80:	f005 f93e 	bl	8089100 <_ZN6StringC1EPKc>
	StringSumHelper(const String &s) : String(s) {}
 8083e84:	a91b      	add	r1, sp, #108	; 0x6c
 8083e86:	a81f      	add	r0, sp, #124	; 0x7c
 8083e88:	f005 f979 	bl	808917e <_ZN6StringC1ERKS_>
 8083e8c:	495a      	ldr	r1, [pc, #360]	; (8083ff8 <_Z15outputDataToESPv+0x7a0>)
 8083e8e:	a81f      	add	r0, sp, #124	; 0x7c
 8083e90:	f005 fa40 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8083e94:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8083e96:	a807      	add	r0, sp, #28
 8083e98:	f005 fa10 	bl	80892bc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8083e9c:	a81f      	add	r0, sp, #124	; 0x7c
 8083e9e:	f005 f8e5 	bl	808906c <_ZN6StringD1Ev>
 8083ea2:	a81b      	add	r0, sp, #108	; 0x6c
 8083ea4:	f005 f8e2 	bl	808906c <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_accuracy);
 8083ea8:	4952      	ldr	r1, [pc, #328]	; (8083ff4 <_Z15outputDataToESPv+0x79c>)
 8083eaa:	a81f      	add	r0, sp, #124	; 0x7c
 8083eac:	f005 f928 	bl	8089100 <_ZN6StringC1EPKc>
 8083eb0:	e687      	b.n	8083bc2 <_Z15outputDataToESPv+0x36a>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = CARBON_MONOXIDE_PACKET_CONSTANT;
 8083eb2:	234d      	movs	r3, #77	; 0x4d
 8083eb4:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = CO_float_A;
 8083eb6:	4b51      	ldr	r3, [pc, #324]	; (8083ffc <_Z15outputDataToESPv+0x7a4>)
            floatBytes.myFloat = air_quality_score;
 8083eb8:	6818      	ldr	r0, [r3, #0]
            break;
 8083eba:	e008      	b.n	8083ece <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8083ebc:	2343      	movs	r3, #67	; 0x43
 8083ebe:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = CO2_float;
 8083ec0:	4b4f      	ldr	r3, [pc, #316]	; (8084000 <_Z15outputDataToESPv+0x7a8>)
 8083ec2:	e7f9      	b.n	8083eb8 <_Z15outputDataToESPv+0x660>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8083ec4:	2378      	movs	r3, #120	; 0x78
            floatBytes.myFloat = fuel.getSoC();
 8083ec6:	484f      	ldr	r0, [pc, #316]	; (8084004 <_Z15outputDataToESPv+0x7ac>)
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8083ec8:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = fuel.getSoC();
 8083eca:	f005 feef 	bl	8089cac <_ZN9FuelGauge6getSoCEv>
        ble_output_array[6 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8083ece:	f3c0 2307 	ubfx	r3, r0, #8, #8
        ble_output_array[5 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 8083ed2:	7160      	strb	r0, [r4, #5]
        ble_output_array[6 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8083ed4:	71a3      	strb	r3, [r4, #6]
        ble_output_array[7 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8083ed6:	f3c0 4307 	ubfx	r3, r0, #16, #8
        ble_output_array[8 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8083eda:	f3c0 6007 	ubfx	r0, r0, #24, #8
        ble_output_array[7 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8083ede:	71e3      	strb	r3, [r4, #7]
        ble_output_array[8 + i * (BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8083ee0:	7220      	strb	r0, [r4, #8]
        wordBytes.myWord = gps.get_latitudeWhole();
 8083ee2:	4628      	mov	r0, r5
 8083ee4:	f002 fa89 	bl	80863fa <_ZN3GPS17get_latitudeWholeEv>
        ble_output_array[9 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8083ee8:	7260      	strb	r0, [r4, #9]
        ble_output_array[10 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8083eea:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8083eee:	72a0      	strb	r0, [r4, #10]
        wordBytes.myWord = gps.get_latitudeFrac();
 8083ef0:	4628      	mov	r0, r5
 8083ef2:	f002 fa85 	bl	8086400 <_ZN3GPS16get_latitudeFracEv>
        ble_output_array[11 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8083ef6:	72e0      	strb	r0, [r4, #11]
        ble_output_array[12 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8083ef8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8083efc:	7320      	strb	r0, [r4, #12]
        wordBytes.myWord = gps.get_longitudeWhole();
 8083efe:	4628      	mov	r0, r5
 8083f00:	f002 fa81 	bl	8086406 <_ZN3GPS18get_longitudeWholeEv>
        ble_output_array[13 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8083f04:	7360      	strb	r0, [r4, #13]
        ble_output_array[14 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8083f06:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8083f0a:	73a0      	strb	r0, [r4, #14]
        wordBytes.myWord = gps.get_longitudeFrac();
 8083f0c:	4628      	mov	r0, r5
 8083f0e:	f002 fa7d 	bl	808640c <_ZN3GPS17get_longitudeFracEv>
        ble_output_array[15 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8083f12:	73e0      	strb	r0, [r4, #15]
        ble_output_array[16 + i * (BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8083f14:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8083f18:	7420      	strb	r0, [r4, #16]
        int northSouth = gps.get_nsIndicator();
 8083f1a:	4628      	mov	r0, r5
 8083f1c:	f002 fa79 	bl	8086412 <_ZN3GPS15get_nsIndicatorEv>
 8083f20:	4682      	mov	sl, r0
        int eastWest = gps.get_ewIndicator();
 8083f22:	4628      	mov	r0, r5
 8083f24:	f002 fa78 	bl	8086418 <_ZN3GPS15get_ewIndicatorEv>
        ble_output_array[17 + i * (BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8083f28:	ea4a 0a00 	orr.w	sl, sl, r0
 8083f2c:	f884 a011 	strb.w	sl, [r4, #17]
        ble_output_array[18 + i * (BLE_PAYLOAD_SIZE)] = gps.get_horizontalDilution();
 8083f30:	4628      	mov	r0, r5
 8083f32:	f002 fa5d 	bl	80863f0 <_ZN3GPS22get_horizontalDilutionEv>
        ble_output_array[19 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8083f36:	7873      	ldrb	r3, [r6, #1]
 8083f38:	3701      	adds	r7, #1
 8083f3a:	74e3      	strb	r3, [r4, #19]
        ble_output_array[20 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8083f3c:	7833      	ldrb	r3, [r6, #0]
    for (uint8_t i = 0; i < NUMBER_OF_SPECIES; i++)
 8083f3e:	2f0b      	cmp	r7, #11
        ble_output_array[20 + i * (BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8083f40:	7523      	strb	r3, [r4, #20]
        ble_output_array[21 + i * (BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8083f42:	f04f 0323 	mov.w	r3, #35	; 0x23
        ble_output_array[18 + i * (BLE_PAYLOAD_SIZE)] = gps.get_horizontalDilution();
 8083f46:	74a0      	strb	r0, [r4, #18]
        ble_output_array[21 + i * (BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8083f48:	7563      	strb	r3, [r4, #21]
    for (uint8_t i = 0; i < NUMBER_OF_SPECIES; i++)
 8083f4a:	f104 0416 	add.w	r4, r4, #22
 8083f4e:	f47f af0f 	bne.w	8083d70 <_Z15outputDataToESPv+0x518>
    Serial1.print("$");
 8083f52:	f006 fc23 	bl	808a79c <_Z22__fetch_global_Serial1v>
 8083f56:	492c      	ldr	r1, [pc, #176]	; (8084008 <_Z15outputDataToESPv+0x7b0>)
 8083f58:	f005 fa96 	bl	8089488 <_ZN5Print5printEPKc>
    Serial1.write(ble_output_array, NUMBER_OF_SPECIES * BLE_PAYLOAD_SIZE);
 8083f5c:	f006 fc1e 	bl	808a79c <_Z22__fetch_global_Serial1v>
 8083f60:	6803      	ldr	r3, [r0, #0]
 8083f62:	22f2      	movs	r2, #242	; 0xf2
 8083f64:	68db      	ldr	r3, [r3, #12]
 8083f66:	a91f      	add	r1, sp, #124	; 0x7c
 8083f68:	4798      	blx	r3
    Serial1.print("&");
 8083f6a:	f006 fc17 	bl	808a79c <_Z22__fetch_global_Serial1v>
 8083f6e:	4927      	ldr	r1, [pc, #156]	; (808400c <_Z15outputDataToESPv+0x7b4>)
 8083f70:	f005 fa8a 	bl	8089488 <_ZN5Print5printEPKc>
    String longitude_string = "";
 8083f74:	a813      	add	r0, sp, #76	; 0x4c
 8083f76:	f005 f879 	bl	808906c <_ZN6StringD1Ev>
    String latitude_string = "";
 8083f7a:	a80f      	add	r0, sp, #60	; 0x3c
 8083f7c:	f005 f876 	bl	808906c <_ZN6StringD1Ev>
    String sensible_string = "";
 8083f80:	a80b      	add	r0, sp, #44	; 0x2c
 8083f82:	f005 f873 	bl	808906c <_ZN6StringD1Ev>
    String csv_output_string = "";
 8083f86:	a807      	add	r0, sp, #28
 8083f88:	f005 f870 	bl	808906c <_ZN6StringD1Ev>
    String cloud_output_string = "";    //create a clean string
 8083f8c:	a803      	add	r0, sp, #12
 8083f8e:	f005 f86d 	bl	808906c <_ZN6StringD1Ev>
}
 8083f92:	b05c      	add	sp, #368	; 0x170
 8083f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8083f98:	2372      	movs	r3, #114	; 0x72
 8083f9a:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = PM01Value;
 8083f9c:	4b1c      	ldr	r3, [pc, #112]	; (8084010 <_Z15outputDataToESPv+0x7b8>)
            floatBytes.myFloat = PM10Value;
 8083f9e:	6818      	ldr	r0, [r3, #0]
 8083fa0:	f007 fc40 	bl	808b824 <__aeabi_i2f>
            break;
 8083fa4:	e793      	b.n	8083ece <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8083fa6:	2352      	movs	r3, #82	; 0x52
 8083fa8:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = corrected_PM_25;
 8083faa:	4b1a      	ldr	r3, [pc, #104]	; (8084014 <_Z15outputDataToESPv+0x7bc>)
 8083fac:	e784      	b.n	8083eb8 <_Z15outputDataToESPv+0x660>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 8083fae:	2371      	movs	r3, #113	; 0x71
 8083fb0:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = PM10Value;
 8083fb2:	4b19      	ldr	r3, [pc, #100]	; (8084018 <_Z15outputDataToESPv+0x7c0>)
 8083fb4:	e7f3      	b.n	8083f9e <_Z15outputDataToESPv+0x746>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = TEMPERATURE_PACKET_CONSTANT;
 8083fb6:	2374      	movs	r3, #116	; 0x74
 8083fb8:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = readTemperature();
 8083fba:	f7fd f9c5 	bl	8081348 <_Z15readTemperaturev>
            break;
 8083fbe:	e786      	b.n	8083ece <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = PRESSURE_PACKET_CONSTANT;
 8083fc0:	2350      	movs	r3, #80	; 0x50
 8083fc2:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = bme.pressure / 100.0;
 8083fc4:	4b15      	ldr	r3, [pc, #84]	; (808401c <_Z15outputDataToESPv+0x7c4>)
 8083fc6:	4649      	mov	r1, r9
 8083fc8:	6858      	ldr	r0, [r3, #4]
 8083fca:	f007 fd33 	bl	808ba34 <__aeabi_fdiv>
            break;
 8083fce:	e77e      	b.n	8083ece <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = HUMIDITY_PACKET_CONSTANT;
 8083fd0:	2368      	movs	r3, #104	; 0x68
 8083fd2:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = readHumidity();
 8083fd4:	f7fd fa32 	bl	808143c <_Z12readHumidityv>
            break;
 8083fd8:	e779      	b.n	8083ece <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = SOUND_PACKET_CONSTANT;
 8083fda:	2373      	movs	r3, #115	; 0x73
 8083fdc:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = sound_average;
 8083fde:	4b10      	ldr	r3, [pc, #64]	; (8084020 <_Z15outputDataToESPv+0x7c8>)
 8083fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8083fe4:	f007 fb14 	bl	808b610 <__aeabi_d2f>
            break;
 8083fe8:	e771      	b.n	8083ece <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i * (BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
 8083fea:	2367      	movs	r3, #103	; 0x67
 8083fec:	7123      	strb	r3, [r4, #4]
            floatBytes.myFloat = air_quality_score;
 8083fee:	4b0d      	ldr	r3, [pc, #52]	; (8084024 <_Z15outputDataToESPv+0x7cc>)
 8083ff0:	e762      	b.n	8083eb8 <_Z15outputDataToESPv+0x660>
 8083ff2:	bf00      	nop
 8083ff4:	200000a0 	.word	0x200000a0
 8083ff8:	0808e05c 	.word	0x0808e05c
 8083ffc:	200002c0 	.word	0x200002c0
 8084000:	200002b4 	.word	0x200002b4
 8084004:	20000664 	.word	0x20000664
 8084008:	0808f0ce 	.word	0x0808f0ce
 808400c:	0808e15f 	.word	0x0808e15f
 8084010:	200002dc 	.word	0x200002dc
 8084014:	200005e4 	.word	0x200005e4
 8084018:	200002e0 	.word	0x200002e0
 808401c:	20000564 	.word	0x20000564
 8084020:	20000c30 	.word	0x20000c30
 8084024:	2000055c 	.word	0x2000055c

08084028 <_Z23getEspAQSyncDiagnostics6String>:
int getEspAQSyncDiagnostics(String command){
 8084028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808402c:	b091      	sub	sp, #68	; 0x44
 808402e:	af02      	add	r7, sp, #8
    String getAQSyncDiag = "D&";
 8084030:	4977      	ldr	r1, [pc, #476]	; (8084210 <_Z23getEspAQSyncDiagnostics6String+0x1e8>)
 8084032:	f107 0008 	add.w	r0, r7, #8
 8084036:	f005 f863 	bl	8089100 <_ZN6StringC1EPKc>
    if(debugging_enabled){
 808403a:	4e76      	ldr	r6, [pc, #472]	; (8084214 <_Z23getEspAQSyncDiagnostics6String+0x1ec>)
    String receivedData = " ";
 808403c:	4976      	ldr	r1, [pc, #472]	; (8084218 <_Z23getEspAQSyncDiagnostics6String+0x1f0>)
 808403e:	f107 0018 	add.w	r0, r7, #24
 8084042:	f005 f85d 	bl	8089100 <_ZN6StringC1EPKc>
    Serial1.setTimeout(3000);
 8084046:	f006 fba9 	bl	808a79c <_Z22__fetch_global_Serial1v>
 808404a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 808404e:	f005 fb81 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    if(debugging_enabled){
 8084052:	6833      	ldr	r3, [r6, #0]
 8084054:	b18b      	cbz	r3, 808407a <_Z23getEspAQSyncDiagnostics6String+0x52>
        Serial.println("Getting aqsync diagnostics from esp");
 8084056:	f006 fa83 	bl	808a560 <_Z16_fetch_usbserialv>
 808405a:	4970      	ldr	r1, [pc, #448]	; (808421c <_Z23getEspAQSyncDiagnostics6String+0x1f4>)
 808405c:	f005 fa27 	bl	80894ae <_ZN5Print7printlnEPKc>
        writeLogFile("Getting aqsync diagnostics from esp");
 8084060:	496e      	ldr	r1, [pc, #440]	; (808421c <_Z23getEspAQSyncDiagnostics6String+0x1f4>)
 8084062:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8084066:	f005 f84b 	bl	8089100 <_ZN6StringC1EPKc>
 808406a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 808406e:	f7fd fb73 	bl	8081758 <_Z12writeLogFile6String>
 8084072:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8084076:	f004 fff9 	bl	808906c <_ZN6StringD1Ev>
      if(counterIndex > MAX_COUNTER_INDEX){
 808407a:	f20f 198c 	addw	r9, pc, #396	; 0x18c
 808407e:	e9d9 8900 	ldrd	r8, r9, [r9]
    Serial1.print(getAQSyncDiag);
 8084082:	f006 fb8b 	bl	808a79c <_Z22__fetch_global_Serial1v>
 8084086:	68b9      	ldr	r1, [r7, #8]
 8084088:	f005 f9fe 	bl	8089488 <_ZN5Print5printEPKc>
    double counterIndex = 0;
 808408c:	2400      	movs	r4, #0
 808408e:	2500      	movs	r5, #0
    bool timeOut = false;
 8084090:	f04f 0a00 	mov.w	sl, #0
          Serial.printf("Unable to get AQSync diag from ESP, counter index: %1.1f\n\r", counterIndex);
 8084094:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 808423c <_Z23getEspAQSyncDiagnostics6String+0x214>
    while(!Serial1.available() && timeOut == false){
 8084098:	f006 fb80 	bl	808a79c <_Z22__fetch_global_Serial1v>
 808409c:	6803      	ldr	r3, [r0, #0]
 808409e:	691b      	ldr	r3, [r3, #16]
 80840a0:	4798      	blx	r3
 80840a2:	b9e0      	cbnz	r0, 80840de <_Z23getEspAQSyncDiagnostics6String+0xb6>
 80840a4:	f1ba 0f00 	cmp.w	sl, #0
 80840a8:	d119      	bne.n	80840de <_Z23getEspAQSyncDiagnostics6String+0xb6>
      counterIndex++;
 80840aa:	2200      	movs	r2, #0
 80840ac:	4620      	mov	r0, r4
 80840ae:	4629      	mov	r1, r5
 80840b0:	4b5b      	ldr	r3, [pc, #364]	; (8084220 <_Z23getEspAQSyncDiagnostics6String+0x1f8>)
 80840b2:	f006 fdff 	bl	808acb4 <__adddf3>
      if(counterIndex > MAX_COUNTER_INDEX){
 80840b6:	4642      	mov	r2, r8
 80840b8:	464b      	mov	r3, r9
      counterIndex++;
 80840ba:	4604      	mov	r4, r0
 80840bc:	460d      	mov	r5, r1
      if(counterIndex > MAX_COUNTER_INDEX){
 80840be:	f007 fa3f 	bl	808b540 <__aeabi_dcmpgt>
 80840c2:	2800      	cmp	r0, #0
 80840c4:	d0e8      	beq.n	8084098 <_Z23getEspAQSyncDiagnostics6String+0x70>
        if(debugging_enabled){
 80840c6:	6833      	ldr	r3, [r6, #0]
 80840c8:	b133      	cbz	r3, 80840d8 <_Z23getEspAQSyncDiagnostics6String+0xb0>
          Serial.printf("Unable to get AQSync diag from ESP, counter index: %1.1f\n\r", counterIndex);
 80840ca:	f006 fa49 	bl	808a560 <_Z16_fetch_usbserialv>
 80840ce:	4622      	mov	r2, r4
 80840d0:	462b      	mov	r3, r5
 80840d2:	4659      	mov	r1, fp
 80840d4:	f7fc fcc4 	bl	8080a60 <_ZN5Print6printfEPKcz>
        timeOut = true;
 80840d8:	f04f 0a01 	mov.w	sl, #1
 80840dc:	e7dc      	b.n	8084098 <_Z23getEspAQSyncDiagnostics6String+0x70>
    delay(10);
 80840de:	200a      	movs	r0, #10
 80840e0:	f005 fd5a 	bl	8089b98 <delay>
    receivedData = Serial1.readString();
 80840e4:	f006 fb5a 	bl	808a79c <_Z22__fetch_global_Serial1v>
 80840e8:	4601      	mov	r1, r0
 80840ea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80840ee:	f005 fb33 	bl	8089758 <_ZN6Stream10readStringEv>
 80840f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80840f6:	f107 0018 	add.w	r0, r7, #24
 80840fa:	f005 f84b 	bl	8089194 <_ZN6StringaSEOS_>
 80840fe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8084102:	f004 ffb3 	bl	808906c <_ZN6StringD1Ev>
    char buffer[receivedData.length()];
 8084106:	6a3a      	ldr	r2, [r7, #32]
		{getBytes((unsigned char *)buf, bufsize, index);}
 8084108:	f107 0018 	add.w	r0, r7, #24
 808410c:	1dd3      	adds	r3, r2, #7
 808410e:	f023 0307 	bic.w	r3, r3, #7
 8084112:	ebad 0d03 	sub.w	sp, sp, r3
 8084116:	ad02      	add	r5, sp, #8
 8084118:	2300      	movs	r3, #0
 808411a:	4629      	mov	r1, r5
 808411c:	f005 f92b 	bl	8089376 <_ZNK6String8getBytesEPhjj>
    String deviceSection;
 8084120:	4940      	ldr	r1, [pc, #256]	; (8084224 <_Z23getEspAQSyncDiagnostics6String+0x1fc>)
 8084122:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8084126:	f004 ffeb 	bl	8089100 <_ZN6StringC1EPKc>
    Serial.println("This is char version of recieved String: ");
 808412a:	f006 fa19 	bl	808a560 <_Z16_fetch_usbserialv>
 808412e:	493e      	ldr	r1, [pc, #248]	; (8084228 <_Z23getEspAQSyncDiagnostics6String+0x200>)
 8084130:	f005 f9bd 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println(buffer);
 8084134:	f006 fa14 	bl	808a560 <_Z16_fetch_usbserialv>
 8084138:	4629      	mov	r1, r5
 808413a:	f005 f9b8 	bl	80894ae <_ZN5Print7printlnEPKc>
    for (int i = 1; i < strlen(buffer); i++) {
 808413e:	2401      	movs	r4, #1
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8084140:	4e38      	ldr	r6, [pc, #224]	; (8084224 <_Z23getEspAQSyncDiagnostics6String+0x1fc>)
 8084142:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8084240 <_Z23getEspAQSyncDiagnostics6String+0x218>
            if (Particle.connected() && serial_cellular_enabled) {
 8084146:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8084244 <_Z23getEspAQSyncDiagnostics6String+0x21c>
    for (int i = 1; i < strlen(buffer); i++) {
 808414a:	4628      	mov	r0, r5
 808414c:	f007 ff39 	bl	808bfc2 <strlen>
 8084150:	42a0      	cmp	r0, r4
 8084152:	d953      	bls.n	80841fc <_Z23getEspAQSyncDiagnostics6String+0x1d4>
        if (buffer[i] == '@' && deviceSection != "" && deviceSection != "@") {
 8084154:	5d2b      	ldrb	r3, [r5, r4]
 8084156:	2b40      	cmp	r3, #64	; 0x40
 8084158:	d006      	beq.n	8084168 <_Z23getEspAQSyncDiagnostics6String+0x140>
	String & operator += (char c)			{concat(c); return (*this);}
 808415a:	5d29      	ldrb	r1, [r5, r4]
 808415c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8084160:	f005 f8bf 	bl	80892e2 <_ZN6String6concatEc>
    for (int i = 1; i < strlen(buffer); i++) {
 8084164:	3401      	adds	r4, #1
 8084166:	e7f0      	b.n	808414a <_Z23getEspAQSyncDiagnostics6String+0x122>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8084168:	4631      	mov	r1, r6
 808416a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 808416e:	f005 f8e5 	bl	808933c <_ZNK6String6equalsEPKc>
        if (buffer[i] == '@' && deviceSection != "" && deviceSection != "@") {
 8084172:	2800      	cmp	r0, #0
 8084174:	d1f1      	bne.n	808415a <_Z23getEspAQSyncDiagnostics6String+0x132>
 8084176:	4641      	mov	r1, r8
 8084178:	f107 0028 	add.w	r0, r7, #40	; 0x28
 808417c:	f005 f8de 	bl	808933c <_ZNK6String6equalsEPKc>
 8084180:	2800      	cmp	r0, #0
 8084182:	d1ea      	bne.n	808415a <_Z23getEspAQSyncDiagnostics6String+0x132>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8084184:	f004 fbc6 	bl	8088914 <spark_cloud_flag_connected>
            if (Particle.connected() && serial_cellular_enabled) {
 8084188:	2800      	cmp	r0, #0
 808418a:	d0eb      	beq.n	8084164 <_Z23getEspAQSyncDiagnostics6String+0x13c>
 808418c:	f8d9 3000 	ldr.w	r3, [r9]
 8084190:	2b00      	cmp	r3, #0
 8084192:	d0e7      	beq.n	8084164 <_Z23getEspAQSyncDiagnostics6String+0x13c>
                Serial.println("This is what I am publishing: ");
 8084194:	f006 f9e4 	bl	808a560 <_Z16_fetch_usbserialv>
 8084198:	4924      	ldr	r1, [pc, #144]	; (808422c <_Z23getEspAQSyncDiagnostics6String+0x204>)
 808419a:	f005 f988 	bl	80894ae <_ZN5Print7printlnEPKc>
                Serial.println(deviceSection);
 808419e:	f006 f9df 	bl	808a560 <_Z16_fetch_usbserialv>
 80841a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80841a4:	f005 f983 	bl	80894ae <_ZN5Print7printlnEPKc>
 80841a8:	4b21      	ldr	r3, [pc, #132]	; (8084230 <_Z23getEspAQSyncDiagnostics6String+0x208>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80841aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80841ac:	781b      	ldrb	r3, [r3, #0]
 80841ae:	4921      	ldr	r1, [pc, #132]	; (8084234 <_Z23getEspAQSyncDiagnostics6String+0x20c>)
 80841b0:	4638      	mov	r0, r7
 80841b2:	f88d 3000 	strb.w	r3, [sp]
 80841b6:	233c      	movs	r3, #60	; 0x3c
 80841b8:	f005 ffa2 	bl	808a100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80841bc:	1d38      	adds	r0, r7, #4
 80841be:	f7ff fac7 	bl	8083750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return HAL_Timer_Get_Milli_Seconds();
 80841c2:	f004 f933 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
 80841c6:	4b1c      	ldr	r3, [pc, #112]	; (8084238 <_Z23getEspAQSyncDiagnostics6String+0x210>)
                return 1;
 80841c8:	2401      	movs	r4, #1
 80841ca:	6018      	str	r0, [r3, #0]
    		spark_process();
 80841cc:	f004 fb92 	bl	80888f4 <spark_process>
                deviceSection = "";
 80841d0:	4914      	ldr	r1, [pc, #80]	; (8084224 <_Z23getEspAQSyncDiagnostics6String+0x1fc>)
 80841d2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80841d6:	f004 ffe5 	bl	80891a4 <_ZN6StringaSEPKc>
    String deviceSection;
 80841da:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80841de:	f004 ff45 	bl	808906c <_ZN6StringD1Ev>
    String receivedData = " ";
 80841e2:	f107 0018 	add.w	r0, r7, #24
 80841e6:	f004 ff41 	bl	808906c <_ZN6StringD1Ev>
    String getAQSyncDiag = "D&";
 80841ea:	f107 0008 	add.w	r0, r7, #8
 80841ee:	f004 ff3d 	bl	808906c <_ZN6StringD1Ev>
}
 80841f2:	4620      	mov	r0, r4
 80841f4:	373c      	adds	r7, #60	; 0x3c
 80841f6:	46bd      	mov	sp, r7
 80841f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 80841fc:	f04f 34ff 	mov.w	r4, #4294967295
 8084200:	e7eb      	b.n	80841da <_Z23getEspAQSyncDiagnostics6String+0x1b2>
 8084202:	bf00      	nop
 8084204:	f3af 8000 	nop.w
 8084208:	00000000 	.word	0x00000000
 808420c:	40cd4c00 	.word	0x40cd4c00
 8084210:	0808f0d0 	.word	0x0808f0d0
 8084214:	200005e8 	.word	0x200005e8
 8084218:	0808fd52 	.word	0x0808fd52
 808421c:	0808f0d3 	.word	0x0808f0d3
 8084220:	3ff00000 	.word	0x3ff00000
 8084224:	08090075 	.word	0x08090075
 8084228:	0808e0ac 	.word	0x0808e0ac
 808422c:	0808e113 	.word	0x0808e113
 8084230:	20000520 	.word	0x20000520
 8084234:	0808f132 	.word	0x0808f132
 8084238:	200011c4 	.word	0x200011c4
 808423c:	0808f0f7 	.word	0x0808f0f7
 8084240:	0808e111 	.word	0x0808e111
 8084244:	20000c28 	.word	0x20000c28

08084248 <_ZN5Print5printIiLi0EEEjT_i>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 8084248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808424c:	4607      	mov	r7, r0
 808424e:	460c      	mov	r4, r1
{
    if (base == 0) {
 8084250:	4615      	mov	r5, r2
 8084252:	b92a      	cbnz	r2, 8084260 <_ZN5Print5printIiLi0EEEjT_i+0x18>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 8084254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(n);
 8084258:	6803      	ldr	r3, [r0, #0]
 808425a:	b2c9      	uxtb	r1, r1
 808425c:	689b      	ldr	r3, [r3, #8]
 808425e:	4718      	bx	r3
        if (n < 0 && base == 10) {
 8084260:	2900      	cmp	r1, #0
 8084262:	da0d      	bge.n	8084280 <_ZN5Print5printIiLi0EEEjT_i+0x38>
 8084264:	2a0a      	cmp	r2, #10
 8084266:	d10b      	bne.n	8084280 <_ZN5Print5printIiLi0EEEjT_i+0x38>
            t = print('-');
 8084268:	212d      	movs	r1, #45	; 0x2d
 808426a:	f005 f911 	bl	8089490 <_ZN5Print5printEc>
 808426e:	4606      	mov	r6, r0
            val = -n;
 8084270:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8084272:	4638      	mov	r0, r7
 8084274:	b2ea      	uxtb	r2, r5
 8084276:	f005 f92e 	bl	80894d6 <_ZN5Print11printNumberEmh>
}
 808427a:	4430      	add	r0, r6
 808427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
 8084280:	4621      	mov	r1, r4
        size_t t = 0;
 8084282:	2600      	movs	r6, #0
 8084284:	e7f5      	b.n	8084272 <_ZN5Print5printIiLi0EEEjT_i+0x2a>

08084286 <_ZN5Print7printlnIiLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8084286:	b538      	push	{r3, r4, r5, lr}
 8084288:	4605      	mov	r5, r0
        size_t n = print(b, base);
 808428a:	f7ff ffdd 	bl	8084248 <_ZN5Print5printIiLi0EEEjT_i>
 808428e:	4604      	mov	r4, r0
        n += println();
 8084290:	4628      	mov	r0, r5
 8084292:	f005 f900 	bl	8089496 <_ZN5Print7printlnEv>
    }
 8084296:	4420      	add	r0, r4
 8084298:	bd38      	pop	{r3, r4, r5, pc}
	...

0808429c <setup>:
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 808429c:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
{
 80842a0:	b570      	push	{r4, r5, r6, lr}
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80842a2:	4bc6      	ldr	r3, [pc, #792]	; (80845bc <setup+0x320>)
{
 80842a4:	b0a8      	sub	sp, #160	; 0xa0
    String init_log;
 80842a6:	49c6      	ldr	r1, [pc, #792]	; (80845c0 <setup+0x324>)
    pinMode(lmp91000_1_en, OUTPUT);
 80842a8:	4dc6      	ldr	r5, [pc, #792]	; (80845c4 <setup+0x328>)
    String init_log;
 80842aa:	a801      	add	r0, sp, #4
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80842ac:	801a      	strh	r2, [r3, #0]
    pinMode(lmp91000_2_en, OUTPUT);
 80842ae:	4cc6      	ldr	r4, [pc, #792]	; (80845c8 <setup+0x32c>)
    String init_log;
 80842b0:	f004 ff26 	bl	8089100 <_ZN6StringC1EPKc>
    setADCSampleTime(ADC_SampleTime_480Cycles);
 80842b4:	2007      	movs	r0, #7
 80842b6:	f005 fc6d 	bl	8089b94 <setADCSampleTime>
    pinMode(lmp91000_1_en, OUTPUT);
 80842ba:	2101      	movs	r1, #1
 80842bc:	8828      	ldrh	r0, [r5, #0]
 80842be:	f006 fbfd 	bl	808aabc <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 80842c2:	2101      	movs	r1, #1
 80842c4:	8820      	ldrh	r0, [r4, #0]
 80842c6:	f006 fbf9 	bl	808aabc <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 80842ca:	4bc0      	ldr	r3, [pc, #768]	; (80845cc <setup+0x330>)
 80842cc:	2101      	movs	r1, #1
 80842ce:	8818      	ldrh	r0, [r3, #0]
 80842d0:	f006 fbf4 	bl	808aabc <pinMode>
    pinMode(plantower_en, OUTPUT);
 80842d4:	4bbe      	ldr	r3, [pc, #760]	; (80845d0 <setup+0x334>)
 80842d6:	2101      	movs	r1, #1
 80842d8:	8818      	ldrh	r0, [r3, #0]
 80842da:	f006 fbef 	bl	808aabc <pinMode>
    pinMode(power_led_en, OUTPUT);
 80842de:	4bbd      	ldr	r3, [pc, #756]	; (80845d4 <setup+0x338>)
 80842e0:	2101      	movs	r1, #1
 80842e2:	8818      	ldrh	r0, [r3, #0]
 80842e4:	f006 fbea 	bl	808aabc <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 80842e8:	4bbb      	ldr	r3, [pc, #748]	; (80845d8 <setup+0x33c>)
 80842ea:	2101      	movs	r1, #1
 80842ec:	8818      	ldrh	r0, [r3, #0]
 80842ee:	f006 fbe5 	bl	808aabc <pinMode>
    pinMode(blower_en, OUTPUT);
 80842f2:	4bba      	ldr	r3, [pc, #744]	; (80845dc <setup+0x340>)
 80842f4:	2101      	movs	r1, #1
 80842f6:	8818      	ldrh	r0, [r3, #0]
 80842f8:	f006 fbe0 	bl	808aabc <pinMode>
    pinMode(co2_en, OUTPUT);
 80842fc:	4bb8      	ldr	r3, [pc, #736]	; (80845e0 <setup+0x344>)
 80842fe:	2101      	movs	r1, #1
 8084300:	8818      	ldrh	r0, [r3, #0]
 8084302:	f006 fbdb 	bl	808aabc <pinMode>
    readStoredVars();
 8084306:	f7fc fdc3 	bl	8080e90 <_Z14readStoredVarsv>
    pmic.begin();
 808430a:	48b6      	ldr	r0, [pc, #728]	; (80845e4 <setup+0x348>)
 808430c:	f004 fb81 	bl	8088a12 <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 8084310:	f241 0170 	movw	r1, #4208	; 0x1070
 8084314:	48b3      	ldr	r0, [pc, #716]	; (80845e4 <setup+0x348>)
 8084316:	f004 fcb0 	bl	8088c7a <_ZN4PMIC16setChargeVoltageEt>
    pmic.enableCharging();
 808431a:	48b2      	ldr	r0, [pc, #712]	; (80845e4 <setup+0x348>)
 808431c:	f004 fc5c 	bl	8088bd8 <_ZN4PMIC14enableChargingEv>
    powerCheck.loop();
 8084320:	4eb1      	ldr	r6, [pc, #708]	; (80845e8 <setup+0x34c>)
    writeRegister(0, 0b00110100);
 8084322:	2134      	movs	r1, #52	; 0x34
 8084324:	2000      	movs	r0, #0
 8084326:	f7fc fc6f 	bl	8080c08 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 808432a:	211b      	movs	r1, #27
 808432c:	2001      	movs	r0, #1
 808432e:	f7fc fc6b 	bl	8080c08 <_Z13writeRegisterhh>
    powerCheck.loop();
 8084332:	4630      	mov	r0, r6
 8084334:	f001 fee6 	bl	8086104 <_ZN10PowerCheck4loopEv>
    if (powerCheck.getHasPower() == 0) 
 8084338:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 808433c:	2b00      	cmp	r3, #0
 808433e:	f040 8216 	bne.w	808476e <setup+0x4d2>
        goToSleepBattery();
 8084342:	f7fe f82d 	bl	80823a0 <_Z16goToSleepBatteryv>
    digitalWrite(lmp91000_1_en, HIGH);
 8084346:	2101      	movs	r1, #1
 8084348:	8828      	ldrh	r0, [r5, #0]
 808434a:	f006 fbc8 	bl	808aade <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 808434e:	8820      	ldrh	r0, [r4, #0]
 8084350:	2101      	movs	r1, #1
 8084352:	f006 fbc4 	bl	808aade <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 8084356:	4b9f      	ldr	r3, [pc, #636]	; (80845d4 <setup+0x338>)
 8084358:	2101      	movs	r1, #1
 808435a:	8818      	ldrh	r0, [r3, #0]
 808435c:	f006 fbbf 	bl	808aade <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 8084360:	4b9b      	ldr	r3, [pc, #620]	; (80845d0 <setup+0x334>)
 8084362:	2101      	movs	r1, #1
 8084364:	8818      	ldrh	r0, [r3, #0]
 8084366:	f006 fbba 	bl	808aade <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 808436a:	4b9b      	ldr	r3, [pc, #620]	; (80845d8 <setup+0x33c>)
 808436c:	2101      	movs	r1, #1
 808436e:	8818      	ldrh	r0, [r3, #0]
 8084370:	f006 fbb5 	bl	808aade <digitalWrite>
    digitalWrite(blower_en, HIGH);
 8084374:	4b99      	ldr	r3, [pc, #612]	; (80845dc <setup+0x340>)
 8084376:	2101      	movs	r1, #1
 8084378:	8818      	ldrh	r0, [r3, #0]
 808437a:	f006 fbb0 	bl	808aade <digitalWrite>
    digitalWrite(co2_en, HIGH);
 808437e:	4b98      	ldr	r3, [pc, #608]	; (80845e0 <setup+0x344>)
 8084380:	2101      	movs	r1, #1
 8084382:	8818      	ldrh	r0, [r3, #0]
 8084384:	f006 fbab 	bl	808aade <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 8084388:	4b90      	ldr	r3, [pc, #576]	; (80845cc <setup+0x330>)
 808438a:	2101      	movs	r1, #1
 808438c:	8818      	ldrh	r0, [r3, #0]
 808438e:	f006 fba6 	bl	808aade <digitalWrite>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8084392:	4a96      	ldr	r2, [pc, #600]	; (80845ec <setup+0x350>)
 8084394:	4996      	ldr	r1, [pc, #600]	; (80845f0 <setup+0x354>)
 8084396:	4897      	ldr	r0, [pc, #604]	; (80845f4 <setup+0x358>)
 8084398:	f005 fdbf 	bl	8089f1a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 808439c:	4a96      	ldr	r2, [pc, #600]	; (80845f8 <setup+0x35c>)
 808439e:	4997      	ldr	r1, [pc, #604]	; (80845fc <setup+0x360>)
 80843a0:	4894      	ldr	r0, [pc, #592]	; (80845f4 <setup+0x358>)
 80843a2:	f005 fdba 	bl	8089f1a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80843a6:	2300      	movs	r3, #0
 80843a8:	2202      	movs	r2, #2
 80843aa:	4995      	ldr	r1, [pc, #596]	; (8084600 <setup+0x364>)
 80843ac:	4895      	ldr	r0, [pc, #596]	; (8084604 <setup+0x368>)
 80843ae:	f004 fa91 	bl	80888d4 <spark_variable>
    Serial1.begin(9600);
 80843b2:	f006 f9f3 	bl	808a79c <_Z22__fetch_global_Serial1v>
 80843b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80843ba:	f006 f9e9 	bl	808a790 <_ZN11USARTSerial5beginEm>
    Serial4.begin(9600);
 80843be:	f7fc fb81 	bl	8080ac4 <_Z22__fetch_global_Serial4v>
 80843c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80843c6:	f006 f9e3 	bl	808a790 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 80843ca:	f7fc fbb7 	bl	8080b3c <_Z22__fetch_global_Serial5v>
 80843ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80843d2:	f006 f9dd 	bl	808a790 <_ZN11USARTSerial5beginEm>
    Serial4.setTimeout(5000);
 80843d6:	f7fc fb75 	bl	8080ac4 <_Z22__fetch_global_Serial4v>
 80843da:	f241 3188 	movw	r1, #5000	; 0x1388
 80843de:	f005 f9b9 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    delay(10000);
 80843e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80843e6:	f005 fbd7 	bl	8089b98 <delay>
    Serial.begin(9600);
 80843ea:	f006 f8b9 	bl	808a560 <_Z16_fetch_usbserialv>
 80843ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80843f2:	f006 f89b 	bl	808a52c <_ZN9USBSerial5beginEl>
    fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 80843f6:	4b84      	ldr	r3, [pc, #528]	; (8084608 <setup+0x36c>)
 80843f8:	220a      	movs	r2, #10
 80843fa:	6819      	ldr	r1, [r3, #0]
 80843fc:	a805      	add	r0, sp, #20
 80843fe:	f004 fef3 	bl	80891e8 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 8084402:	a905      	add	r1, sp, #20
 8084404:	a809      	add	r0, sp, #36	; 0x24
 8084406:	f004 feba 	bl	808917e <_ZN6StringC1ERKS_>
 808440a:	4980      	ldr	r1, [pc, #512]	; (808460c <setup+0x370>)
 808440c:	a809      	add	r0, sp, #36	; 0x24
 808440e:	f004 ff81 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8084412:	4604      	mov	r4, r0
 8084414:	f005 fba8 	bl	8089b68 <_ZN9TimeClass4yearEv>
 8084418:	220a      	movs	r2, #10
 808441a:	4601      	mov	r1, r0
 808441c:	a80d      	add	r0, sp, #52	; 0x34
 808441e:	f004 fee3 	bl	80891e8 <_ZN6StringC1Eih>
 8084422:	a90d      	add	r1, sp, #52	; 0x34
 8084424:	4620      	mov	r0, r4
 8084426:	f004 ff69 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 808442a:	4604      	mov	r4, r0
 808442c:	f005 fb94 	bl	8089b58 <_ZN9TimeClass5monthEv>
 8084430:	220a      	movs	r2, #10
 8084432:	4601      	mov	r1, r0
 8084434:	a811      	add	r0, sp, #68	; 0x44
 8084436:	f004 fed7 	bl	80891e8 <_ZN6StringC1Eih>
 808443a:	a911      	add	r1, sp, #68	; 0x44
 808443c:	4620      	mov	r0, r4
 808443e:	f004 ff5d 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 8084442:	4604      	mov	r4, r0
 8084444:	f005 fb7c 	bl	8089b40 <_ZN9TimeClass3dayEv>
 8084448:	220a      	movs	r2, #10
 808444a:	4601      	mov	r1, r0
 808444c:	a815      	add	r0, sp, #84	; 0x54
 808444e:	f004 fecb 	bl	80891e8 <_ZN6StringC1Eih>
 8084452:	4620      	mov	r0, r4
 8084454:	a915      	add	r1, sp, #84	; 0x54
 8084456:	f004 ff51 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 808445a:	496c      	ldr	r1, [pc, #432]	; (808460c <setup+0x370>)
 808445c:	f004 ff5a 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 8084460:	4604      	mov	r4, r0
 8084462:	f005 fb49 	bl	8089af8 <_ZN9TimeClass4hourEv>
 8084466:	220a      	movs	r2, #10
 8084468:	4601      	mov	r1, r0
 808446a:	a819      	add	r0, sp, #100	; 0x64
 808446c:	f004 febc 	bl	80891e8 <_ZN6StringC1Eih>
 8084470:	a919      	add	r1, sp, #100	; 0x64
 8084472:	4620      	mov	r0, r4
 8084474:	f004 ff42 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 8084478:	4604      	mov	r4, r0
 808447a:	f005 fb49 	bl	8089b10 <_ZN9TimeClass6minuteEv>
 808447e:	220a      	movs	r2, #10
 8084480:	4601      	mov	r1, r0
 8084482:	a81d      	add	r0, sp, #116	; 0x74
 8084484:	f004 feb0 	bl	80891e8 <_ZN6StringC1Eih>
 8084488:	a91d      	add	r1, sp, #116	; 0x74
 808448a:	4620      	mov	r0, r4
 808448c:	f004 ff36 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 8084490:	4604      	mov	r4, r0
 8084492:	f005 fb49 	bl	8089b28 <_ZN9TimeClass6secondEv>
 8084496:	220a      	movs	r2, #10
 8084498:	4601      	mov	r1, r0
 808449a:	a821      	add	r0, sp, #132	; 0x84
 808449c:	f004 fea4 	bl	80891e8 <_ZN6StringC1Eih>
 80844a0:	4620      	mov	r0, r4
 80844a2:	a921      	add	r1, sp, #132	; 0x84
 80844a4:	f004 ff2a 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 80844a8:	4959      	ldr	r1, [pc, #356]	; (8084610 <setup+0x374>)
 80844aa:	f004 ff33 	bl	8089314 <_ZplRK15StringSumHelperPKc>
 80844ae:	4c59      	ldr	r4, [pc, #356]	; (8084614 <setup+0x378>)
 80844b0:	4601      	mov	r1, r0
 80844b2:	4620      	mov	r0, r4
 80844b4:	f004 fe54 	bl	8089160 <_ZN6StringaSERKS_>
 80844b8:	a821      	add	r0, sp, #132	; 0x84
 80844ba:	f004 fdd7 	bl	808906c <_ZN6StringD1Ev>
 80844be:	a81d      	add	r0, sp, #116	; 0x74
 80844c0:	f004 fdd4 	bl	808906c <_ZN6StringD1Ev>
 80844c4:	a819      	add	r0, sp, #100	; 0x64
 80844c6:	f004 fdd1 	bl	808906c <_ZN6StringD1Ev>
 80844ca:	a815      	add	r0, sp, #84	; 0x54
 80844cc:	f004 fdce 	bl	808906c <_ZN6StringD1Ev>
 80844d0:	a811      	add	r0, sp, #68	; 0x44
 80844d2:	f004 fdcb 	bl	808906c <_ZN6StringD1Ev>
 80844d6:	a80d      	add	r0, sp, #52	; 0x34
 80844d8:	f004 fdc8 	bl	808906c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80844dc:	a809      	add	r0, sp, #36	; 0x24
 80844de:	f004 fdc5 	bl	808906c <_ZN6StringD1Ev>
 80844e2:	a805      	add	r0, sp, #20
 80844e4:	f004 fdc2 	bl	808906c <_ZN6StringD1Ev>
    Serial.println("Checking for sd card");
 80844e8:	f006 f83a 	bl	808a560 <_Z16_fetch_usbserialv>
 80844ec:	494a      	ldr	r1, [pc, #296]	; (8084618 <setup+0x37c>)
 80844ee:	f004 ffde 	bl	80894ae <_ZN5Print7printlnEPKc>
	StringSumHelper(const char *p) : String(p) {}
 80844f2:	494a      	ldr	r1, [pc, #296]	; (808461c <setup+0x380>)
 80844f4:	a821      	add	r0, sp, #132	; 0x84
 80844f6:	f004 fe03 	bl	8089100 <_ZN6StringC1EPKc>
    logFileName = "log_" + fileName;
 80844fa:	4621      	mov	r1, r4
 80844fc:	a821      	add	r0, sp, #132	; 0x84
 80844fe:	f004 fefd 	bl	80892fc <_ZplRK15StringSumHelperRK6String>
 8084502:	4601      	mov	r1, r0
 8084504:	4846      	ldr	r0, [pc, #280]	; (8084620 <setup+0x384>)
 8084506:	f004 fe2b 	bl	8089160 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 808450a:	a821      	add	r0, sp, #132	; 0x84
 808450c:	f004 fdae 	bl	808906c <_ZN6StringD1Ev>
 8084510:	4944      	ldr	r1, [pc, #272]	; (8084624 <setup+0x388>)
 8084512:	2302      	movs	r3, #2
 8084514:	220c      	movs	r2, #12
 8084516:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 808451a:	f7fc fb4b 	bl	8080bb4 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS)) 
 808451e:	2800      	cmp	r0, #0
 8084520:	f000 8139 	beq.w	8084796 <setup+0x4fa>
        Serial.print("Created new file to log to uSD card: ");
 8084524:	f006 f81c 	bl	808a560 <_Z16_fetch_usbserialv>
 8084528:	493f      	ldr	r1, [pc, #252]	; (8084628 <setup+0x38c>)
 808452a:	f004 ffad 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(fileName);
 808452e:	f006 f817 	bl	808a560 <_Z16_fetch_usbserialv>
 8084532:	6821      	ldr	r1, [r4, #0]
    if (debugging_enabled)
 8084534:	4c3d      	ldr	r4, [pc, #244]	; (808462c <setup+0x390>)
        Serial.println("No uSD card detected.");
 8084536:	f004 ffba 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.println("Starting LMP91000 CO initialization");
 808453a:	f006 f811 	bl	808a560 <_Z16_fetch_usbserialv>
 808453e:	493c      	ldr	r1, [pc, #240]	; (8084630 <setup+0x394>)
 8084540:	f004 ffb5 	bl	80894ae <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 8084544:	6823      	ldr	r3, [r4, #0]
 8084546:	b14b      	cbz	r3, 808455c <setup+0x2c0>
        writeLogFile("Starting LMP91000 CO initialization");
 8084548:	4939      	ldr	r1, [pc, #228]	; (8084630 <setup+0x394>)
 808454a:	a821      	add	r0, sp, #132	; 0x84
 808454c:	f004 fdd8 	bl	8089100 <_ZN6StringC1EPKc>
 8084550:	a821      	add	r0, sp, #132	; 0x84
 8084552:	f7fd f901 	bl	8081758 <_Z12writeLogFile6String>
 8084556:	a821      	add	r0, sp, #132	; 0x84
 8084558:	f004 fd88 	bl	808906c <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 808455c:	f006 fb42 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8084560:	f006 f996 	bl	808a890 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 8084564:	2100      	movs	r1, #0
 8084566:	8828      	ldrh	r0, [r5, #0]
 8084568:	f006 fab9 	bl	808aade <digitalWrite>
    if (lmp91000_1.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0) 
 808456c:	2303      	movs	r3, #3
 808456e:	22b0      	movs	r2, #176	; 0xb0
 8084570:	2118      	movs	r1, #24
 8084572:	4830      	ldr	r0, [pc, #192]	; (8084634 <setup+0x398>)
 8084574:	f001 fd70 	bl	8086058 <_ZN8LMP910009configureEhhh>
 8084578:	2800      	cmp	r0, #0
 808457a:	f040 8110 	bne.w	808479e <setup+0x502>
        Serial.println("Couldn't communicate with LMP91000_1 for CO");
 808457e:	f005 ffef 	bl	808a560 <_Z16_fetch_usbserialv>
 8084582:	492d      	ldr	r1, [pc, #180]	; (8084638 <setup+0x39c>)
 8084584:	f004 ff93 	bl	80894ae <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 8084588:	6823      	ldr	r3, [r4, #0]
 808458a:	b14b      	cbz	r3, 80845a0 <setup+0x304>
            writeLogFile("Couldn't communicate with LMP91000_1 for CO");
 808458c:	492a      	ldr	r1, [pc, #168]	; (8084638 <setup+0x39c>)
 808458e:	a821      	add	r0, sp, #132	; 0x84
 8084590:	f004 fdb6 	bl	8089100 <_ZN6StringC1EPKc>
 8084594:	a821      	add	r0, sp, #132	; 0x84
 8084596:	f7fd f8df 	bl	8081758 <_Z12writeLogFile6String>
 808459a:	a821      	add	r0, sp, #132	; 0x84
 808459c:	f004 fd66 	bl	808906c <_ZN6StringD1Ev>
    ads1.begin();
 80845a0:	4826      	ldr	r0, [pc, #152]	; (808463c <setup+0x3a0>)
 80845a2:	f001 fe46 	bl	8086232 <_ZN16Adafruit_ADS10155beginEv>
    if (Wire.requestFrom(0x49, 1) == 0) 
 80845a6:	f006 fb1d 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80845aa:	2201      	movs	r2, #1
 80845ac:	2149      	movs	r1, #73	; 0x49
 80845ae:	f006 f99e 	bl	808a8ee <_ZN7TwoWire11requestFromEhj>
 80845b2:	2800      	cmp	r0, #0
 80845b4:	f040 8109 	bne.w	80847ca <setup+0x52e>
 80845b8:	e042      	b.n	8084640 <setup+0x3a4>
 80845ba:	bf00      	nop
 80845bc:	20000c48 	.word	0x20000c48
 80845c0:	08090075 	.word	0x08090075
 80845c4:	200000c0 	.word	0x200000c0
 80845c8:	200000c4 	.word	0x200000c4
 80845cc:	20000094 	.word	0x20000094
 80845d0:	200000c8 	.word	0x200000c8
 80845d4:	200000cc 	.word	0x200000cc
 80845d8:	20000090 	.word	0x20000090
 80845dc:	20000088 	.word	0x20000088
 80845e0:	2000008c 	.word	0x2000008c
 80845e4:	20000770 	.word	0x20000770
 80845e8:	20000774 	.word	0x20000774
 80845ec:	0808f149 	.word	0x0808f149
 80845f0:	08080a0b 	.word	0x08080a0b
 80845f4:	08089eef 	.word	0x08089eef
 80845f8:	0808f157 	.word	0x0808f157
 80845fc:	08084029 	.word	0x08084029
 8084600:	200002d4 	.word	0x200002d4
 8084604:	0808f162 	.word	0x0808f162
 8084608:	20000080 	.word	0x20000080
 808460c:	0808f188 	.word	0x0808f188
 8084610:	0808f16b 	.word	0x0808f16b
 8084614:	20000650 	.word	0x20000650
 8084618:	0808f170 	.word	0x0808f170
 808461c:	0808f185 	.word	0x0808f185
 8084620:	20000700 	.word	0x20000700
 8084624:	20000c1c 	.word	0x20000c1c
 8084628:	0808f18a 	.word	0x0808f18a
 808462c:	200005e8 	.word	0x200005e8
 8084630:	0808f1c6 	.word	0x0808f1c6
 8084634:	200006b9 	.word	0x200006b9
 8084638:	0808f1ea 	.word	0x0808f1ea
 808463c:	20000550 	.word	0x20000550
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8084640:	f005 ff8e 	bl	808a560 <_Z16_fetch_usbserialv>
 8084644:	4971      	ldr	r1, [pc, #452]	; (808480c <setup+0x570>)
 8084646:	f004 ff32 	bl	80894ae <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 808464a:	6823      	ldr	r3, [r4, #0]
 808464c:	b14b      	cbz	r3, 8084662 <setup+0x3c6>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 808464e:	496f      	ldr	r1, [pc, #444]	; (808480c <setup+0x570>)
 8084650:	a821      	add	r0, sp, #132	; 0x84
 8084652:	f004 fd55 	bl	8089100 <_ZN6StringC1EPKc>
 8084656:	a821      	add	r0, sp, #132	; 0x84
 8084658:	f7fd f87e 	bl	8081758 <_Z12writeLogFile6String>
 808465c:	a821      	add	r0, sp, #132	; 0x84
 808465e:	f004 fd05 	bl	808906c <_ZN6StringD1Ev>
    Serial.println("Starting LMP91000_2 initialization");
 8084662:	f005 ff7d 	bl	808a560 <_Z16_fetch_usbserialv>
 8084666:	496a      	ldr	r1, [pc, #424]	; (8084810 <setup+0x574>)
 8084668:	f004 ff21 	bl	80894ae <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 808466c:	6823      	ldr	r3, [r4, #0]
 808466e:	b14b      	cbz	r3, 8084684 <setup+0x3e8>
        writeLogFile("Starting LMP91000_2 initialization");
 8084670:	4967      	ldr	r1, [pc, #412]	; (8084810 <setup+0x574>)
 8084672:	a821      	add	r0, sp, #132	; 0x84
 8084674:	f004 fd44 	bl	8089100 <_ZN6StringC1EPKc>
 8084678:	a821      	add	r0, sp, #132	; 0x84
 808467a:	f7fd f86d 	bl	8081758 <_Z12writeLogFile6String>
 808467e:	a821      	add	r0, sp, #132	; 0x84
 8084680:	f004 fcf4 	bl	808906c <_ZN6StringD1Ev>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8084684:	4d63      	ldr	r5, [pc, #396]	; (8084814 <setup+0x578>)
    Wire.begin();   //this must be done for the LMP91000
 8084686:	f006 faad 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808468a:	f006 f901 	bl	808a890 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 808468e:	2100      	movs	r1, #0
 8084690:	8828      	ldrh	r0, [r5, #0]
 8084692:	f006 fa24 	bl	808aade <digitalWrite>
    if (lmp91000_2.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 8084696:	2303      	movs	r3, #3
 8084698:	22b0      	movs	r2, #176	; 0xb0
 808469a:	2118      	movs	r1, #24
 808469c:	485e      	ldr	r0, [pc, #376]	; (8084818 <setup+0x57c>)
 808469e:	f001 fcdb 	bl	8086058 <_ZN8LMP910009configureEhhh>
 80846a2:	2800      	cmp	r0, #0
 80846a4:	f040 8096 	bne.w	80847d4 <setup+0x538>
        Serial.println("Couldn't communicate with LMP91000 for 2");
 80846a8:	f005 ff5a 	bl	808a560 <_Z16_fetch_usbserialv>
 80846ac:	495b      	ldr	r1, [pc, #364]	; (808481c <setup+0x580>)
 80846ae:	f004 fefe 	bl	80894ae <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000 for 2");
 80846b2:	495a      	ldr	r1, [pc, #360]	; (808481c <setup+0x580>)
 80846b4:	a821      	add	r0, sp, #132	; 0x84
 80846b6:	f004 fd23 	bl	8089100 <_ZN6StringC1EPKc>
 80846ba:	a821      	add	r0, sp, #132	; 0x84
 80846bc:	f7fd f84c 	bl	8081758 <_Z12writeLogFile6String>
 80846c0:	a821      	add	r0, sp, #132	; 0x84
 80846c2:	f004 fcd3 	bl	808906c <_ZN6StringD1Ev>
    ads2.begin();
 80846c6:	4856      	ldr	r0, [pc, #344]	; (8084820 <setup+0x584>)
 80846c8:	f001 fdb3 	bl	8086232 <_ZN16Adafruit_ADS10155beginEv>
    if (Wire.requestFrom(0x4A, 1) == 0) 
 80846cc:	f006 fa8a 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80846d0:	2201      	movs	r2, #1
 80846d2:	214a      	movs	r1, #74	; 0x4a
 80846d4:	f006 f90b 	bl	808a8ee <_ZN7TwoWire11requestFromEhj>
 80846d8:	2800      	cmp	r0, #0
 80846da:	f040 8091 	bne.w	8084800 <setup+0x564>
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 80846de:	f005 ff3f 	bl	808a560 <_Z16_fetch_usbserialv>
 80846e2:	494a      	ldr	r1, [pc, #296]	; (808480c <setup+0x570>)
 80846e4:	f004 fee3 	bl	80894ae <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 80846e8:	6823      	ldr	r3, [r4, #0]
 80846ea:	b14b      	cbz	r3, 8084700 <setup+0x464>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 80846ec:	4947      	ldr	r1, [pc, #284]	; (808480c <setup+0x570>)
 80846ee:	a821      	add	r0, sp, #132	; 0x84
 80846f0:	f004 fd06 	bl	8089100 <_ZN6StringC1EPKc>
 80846f4:	a821      	add	r0, sp, #132	; 0x84
 80846f6:	f7fd f82f 	bl	8081758 <_Z12writeLogFile6String>
 80846fa:	a821      	add	r0, sp, #132	; 0x84
 80846fc:	f004 fcb6 	bl	808906c <_ZN6StringD1Ev>
    resetESP();
 8084700:	f7fd feaa 	bl	8082458 <_Z8resetESPv>
    Serial.println("ESP reset!");
 8084704:	f005 ff2c 	bl	808a560 <_Z16_fetch_usbserialv>
 8084708:	4946      	ldr	r1, [pc, #280]	; (8084824 <setup+0x588>)
 808470a:	f004 fed0 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("FW Version: ");
 808470e:	f005 ff27 	bl	808a560 <_Z16_fetch_usbserialv>
 8084712:	4945      	ldr	r1, [pc, #276]	; (8084828 <setup+0x58c>)
 8084714:	f004 feb8 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 8084718:	f005 ff22 	bl	808a560 <_Z16_fetch_usbserialv>
 808471c:	220a      	movs	r2, #10
 808471e:	2146      	movs	r1, #70	; 0x46
 8084720:	f7ff fdb1 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print("Build: ");
 8084724:	f005 ff1c 	bl	808a560 <_Z16_fetch_usbserialv>
 8084728:	4940      	ldr	r1, [pc, #256]	; (808482c <setup+0x590>)
 808472a:	f004 fead 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 808472e:	f005 ff17 	bl	808a560 <_Z16_fetch_usbserialv>
 8084732:	220a      	movs	r2, #10
 8084734:	210d      	movs	r1, #13
 8084736:	f7ff fda6 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
    enableContinuousGPS();
 808473a:	f7fc fddf 	bl	80812fc <_Z19enableContinuousGPSv>
#define SYSTEM_VERSION_200
#define SYSTEM_VERSION_201ALPHA1
#define SYSTEM_VERSION_201ALPHA2
#define SYSTEM_VERSION_201

typedef struct __attribute__((packed)) SystemVersionInfo
 808473e:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8084740:	2100      	movs	r1, #0
 8084742:	a821      	add	r0, sp, #132	; 0x84
 8084744:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8084748:	f004 f838 	bl	80887bc <system_version_info>
        return String(info.versionString);
 808474c:	a923      	add	r1, sp, #140	; 0x8c
 808474e:	a81d      	add	r0, sp, #116	; 0x74
 8084750:	f004 fcd6 	bl	8089100 <_ZN6StringC1EPKc>
    Log.info("System version: %s", (const char*)System.version());
 8084754:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8084756:	4936      	ldr	r1, [pc, #216]	; (8084830 <setup+0x594>)
 8084758:	4836      	ldr	r0, [pc, #216]	; (8084834 <setup+0x598>)
 808475a:	f7fc f99c 	bl	8080a96 <_ZNK5spark6Logger4infoEPKcz>
 808475e:	a81d      	add	r0, sp, #116	; 0x74
 8084760:	f004 fc84 	bl	808906c <_ZN6StringD1Ev>
    String init_log;
 8084764:	a801      	add	r0, sp, #4
 8084766:	f004 fc81 	bl	808906c <_ZN6StringD1Ev>
}
 808476a:	b028      	add	sp, #160	; 0xa0
 808476c:	bd70      	pop	{r4, r5, r6, pc}
    else if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 808476e:	4b32      	ldr	r3, [pc, #200]	; (8084838 <setup+0x59c>)
 8084770:	681b      	ldr	r3, [r3, #0]
 8084772:	2b01      	cmp	r3, #1
 8084774:	f47f ade7 	bne.w	8084346 <setup+0xaa>
 8084778:	4830      	ldr	r0, [pc, #192]	; (808483c <setup+0x5a0>)
 808477a:	f005 fa97 	bl	8089cac <_ZN9FuelGauge6getSoCEv>
 808477e:	4930      	ldr	r1, [pc, #192]	; (8084840 <setup+0x5a4>)
 8084780:	f007 fa42 	bl	808bc08 <__aeabi_fcmplt>
 8084784:	2800      	cmp	r0, #0
 8084786:	f43f adde 	beq.w	8084346 <setup+0xaa>
 808478a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 808478e:	2b00      	cmp	r3, #0
 8084790:	f47f add9 	bne.w	8084346 <setup+0xaa>
 8084794:	e5d5      	b.n	8084342 <setup+0xa6>
        Serial.println("No uSD card detected.");
 8084796:	f005 fee3 	bl	808a560 <_Z16_fetch_usbserialv>
 808479a:	492a      	ldr	r1, [pc, #168]	; (8084844 <setup+0x5a8>)
 808479c:	e6ca      	b.n	8084534 <setup+0x298>
        Serial.println("Initialized LMP91000_1 for CO");
 808479e:	f005 fedf 	bl	808a560 <_Z16_fetch_usbserialv>
 80847a2:	4929      	ldr	r1, [pc, #164]	; (8084848 <setup+0x5ac>)
 80847a4:	f004 fe83 	bl	80894ae <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 80847a8:	6823      	ldr	r3, [r4, #0]
 80847aa:	b14b      	cbz	r3, 80847c0 <setup+0x524>
            writeLogFile("Initialized LMP91000 for CO");
 80847ac:	4927      	ldr	r1, [pc, #156]	; (808484c <setup+0x5b0>)
 80847ae:	a821      	add	r0, sp, #132	; 0x84
 80847b0:	f004 fca6 	bl	8089100 <_ZN6StringC1EPKc>
 80847b4:	a821      	add	r0, sp, #132	; 0x84
 80847b6:	f7fc ffcf 	bl	8081758 <_Z12writeLogFile6String>
 80847ba:	a821      	add	r0, sp, #132	; 0x84
 80847bc:	f004 fc56 	bl	808906c <_ZN6StringD1Ev>
        digitalWrite(lmp91000_1_en, HIGH);  //disable
 80847c0:	2101      	movs	r1, #1
 80847c2:	8828      	ldrh	r0, [r5, #0]
 80847c4:	f006 f98b 	bl	808aade <digitalWrite>
 80847c8:	e6ea      	b.n	80845a0 <setup+0x304>
        ads1.setGain(GAIN_TWOTHIRDS);
 80847ca:	2100      	movs	r1, #0
 80847cc:	4820      	ldr	r0, [pc, #128]	; (8084850 <setup+0x5b4>)
 80847ce:	f001 fd37 	bl	8086240 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 80847d2:	e746      	b.n	8084662 <setup+0x3c6>
        Serial.println("Initialized LMP91000 for CO 2");
 80847d4:	f005 fec4 	bl	808a560 <_Z16_fetch_usbserialv>
 80847d8:	491e      	ldr	r1, [pc, #120]	; (8084854 <setup+0x5b8>)
 80847da:	f004 fe68 	bl	80894ae <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 80847de:	6823      	ldr	r3, [r4, #0]
 80847e0:	b14b      	cbz	r3, 80847f6 <setup+0x55a>
            writeLogFile("Initialized LMP91000 for CO 2");
 80847e2:	491c      	ldr	r1, [pc, #112]	; (8084854 <setup+0x5b8>)
 80847e4:	a821      	add	r0, sp, #132	; 0x84
 80847e6:	f004 fc8b 	bl	8089100 <_ZN6StringC1EPKc>
 80847ea:	a821      	add	r0, sp, #132	; 0x84
 80847ec:	f7fc ffb4 	bl	8081758 <_Z12writeLogFile6String>
 80847f0:	a821      	add	r0, sp, #132	; 0x84
 80847f2:	f004 fc3b 	bl	808906c <_ZN6StringD1Ev>
        digitalWrite(lmp91000_2_en, HIGH);  //disable
 80847f6:	2101      	movs	r1, #1
 80847f8:	8828      	ldrh	r0, [r5, #0]
 80847fa:	f006 f970 	bl	808aade <digitalWrite>
 80847fe:	e762      	b.n	80846c6 <setup+0x42a>
        ads2.setGain(GAIN_TWOTHIRDS);
 8084800:	2100      	movs	r1, #0
 8084802:	4807      	ldr	r0, [pc, #28]	; (8084820 <setup+0x584>)
 8084804:	f001 fd1c 	bl	8086240 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 8084808:	e77a      	b.n	8084700 <setup+0x464>
 808480a:	bf00      	nop
 808480c:	0808f250 	.word	0x0808f250
 8084810:	0808f283 	.word	0x0808f283
 8084814:	200000c4 	.word	0x200000c4
 8084818:	200006ba 	.word	0x200006ba
 808481c:	0808f2a6 	.word	0x0808f2a6
 8084820:	20000556 	.word	0x20000556
 8084824:	0808f2ed 	.word	0x0808f2ed
 8084828:	0808f2f8 	.word	0x0808f2f8
 808482c:	0808f305 	.word	0x0808f305
 8084830:	0808f30d 	.word	0x0808f30d
 8084834:	20000cd8 	.word	0x20000cd8
 8084838:	20000560 	.word	0x20000560
 808483c:	20000664 	.word	0x20000664
 8084840:	41a00000 	.word	0x41a00000
 8084844:	0808f1b0 	.word	0x0808f1b0
 8084848:	0808f216 	.word	0x0808f216
 808484c:	0808f234 	.word	0x0808f234
 8084850:	20000550 	.word	0x20000550
 8084854:	0808f2cf 	.word	0x0808f2cf

08084858 <_Z17serialGetDeviceIdv>:
{
 8084858:	b530      	push	{r4, r5, lr}
 808485a:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 808485c:	f005 fe80 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.println(DEVICE_id);
 8084860:	4d35      	ldr	r5, [pc, #212]	; (8084938 <_Z17serialGetDeviceIdv+0xe0>)
    Serial.println();
 8084862:	f004 fe18 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8084866:	f005 fe7b 	bl	808a560 <_Z16_fetch_usbserialv>
 808486a:	4934      	ldr	r1, [pc, #208]	; (808493c <_Z17serialGetDeviceIdv+0xe4>)
 808486c:	f004 fe0c 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 8084870:	f005 fe76 	bl	808a560 <_Z16_fetch_usbserialv>
 8084874:	220a      	movs	r2, #10
 8084876:	6829      	ldr	r1, [r5, #0]
 8084878:	f7ff fd05 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the ID");
 808487c:	f005 fe70 	bl	808a560 <_Z16_fetch_usbserialv>
 8084880:	492f      	ldr	r1, [pc, #188]	; (8084940 <_Z17serialGetDeviceIdv+0xe8>)
 8084882:	f004 fe14 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8084886:	f005 fe6b 	bl	808a560 <_Z16_fetch_usbserialv>
 808488a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808488e:	f004 ff61 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084892:	f005 fe65 	bl	808a560 <_Z16_fetch_usbserialv>
 8084896:	220d      	movs	r2, #13
 8084898:	4601      	mov	r1, r0
 808489a:	4668      	mov	r0, sp
 808489c:	f004 ff70 	bl	8089780 <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80848a0:	4668      	mov	r0, sp
 80848a2:	4928      	ldr	r1, [pc, #160]	; (8084944 <_Z17serialGetDeviceIdv+0xec>)
 80848a4:	f004 fd4a 	bl	808933c <_ZNK6String6equalsEPKc>
    if (tempString == SERIAL_PASSWORD)
 80848a8:	2800      	cmp	r0, #0
 80848aa:	d03e      	beq.n	808492a <_Z17serialGetDeviceIdv+0xd2>
        Serial.println("Password correct!");
 80848ac:	f005 fe58 	bl	808a560 <_Z16_fetch_usbserialv>
 80848b0:	4925      	ldr	r1, [pc, #148]	; (8084948 <_Z17serialGetDeviceIdv+0xf0>)
 80848b2:	f004 fdfc 	bl	80894ae <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 80848b6:	f005 fe53 	bl	808a560 <_Z16_fetch_usbserialv>
 80848ba:	4924      	ldr	r1, [pc, #144]	; (808494c <_Z17serialGetDeviceIdv+0xf4>)
 80848bc:	f004 fdf7 	bl	80894ae <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 80848c0:	f005 fe4e 	bl	808a560 <_Z16_fetch_usbserialv>
 80848c4:	220d      	movs	r2, #13
 80848c6:	4601      	mov	r1, r0
 80848c8:	a804      	add	r0, sp, #16
 80848ca:	f004 ff59 	bl	8089780 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 80848ce:	a804      	add	r0, sp, #16
 80848d0:	f004 fd8c 	bl	80893ec <_ZNK6String5toIntEv>
 80848d4:	4604      	mov	r4, r0
        Serial.println("");
 80848d6:	f005 fe43 	bl	808a560 <_Z16_fetch_usbserialv>
 80848da:	491d      	ldr	r1, [pc, #116]	; (8084950 <_Z17serialGetDeviceIdv+0xf8>)
 80848dc:	f004 fde7 	bl	80894ae <_ZN5Print7printlnEPKc>
        if (tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER)
 80848e0:	f242 730c 	movw	r3, #9996	; 0x270c
 80848e4:	1ea2      	subs	r2, r4, #2
 80848e6:	429a      	cmp	r2, r3
 80848e8:	d819      	bhi.n	808491e <_Z17serialGetDeviceIdv+0xc6>
            Serial.print("\n\rNew Device ID:");
 80848ea:	f005 fe39 	bl	808a560 <_Z16_fetch_usbserialv>
 80848ee:	4919      	ldr	r1, [pc, #100]	; (8084954 <_Z17serialGetDeviceIdv+0xfc>)
 80848f0:	f004 fdca 	bl	8089488 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 80848f4:	f005 fe34 	bl	808a560 <_Z16_fetch_usbserialv>
 80848f8:	4621      	mov	r1, r4
 80848fa:	220a      	movs	r2, #10
 80848fc:	f7ff fcc3 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
            DEVICE_id = tempValue;
 8084900:	602c      	str	r4, [r5, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8084902:	f006 f91d 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8084906:	4629      	mov	r1, r5
 8084908:	2000      	movs	r0, #0
 808490a:	f7fc f877 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 808490e:	a804      	add	r0, sp, #16
 8084910:	f004 fbac 	bl	808906c <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8084914:	4668      	mov	r0, sp
 8084916:	f004 fba9 	bl	808906c <_ZN6StringD1Ev>
}
 808491a:	b009      	add	sp, #36	; 0x24
 808491c:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 808491e:	f005 fe1f 	bl	808a560 <_Z16_fetch_usbserialv>
 8084922:	490d      	ldr	r1, [pc, #52]	; (8084958 <_Z17serialGetDeviceIdv+0x100>)
 8084924:	f004 fdc3 	bl	80894ae <_ZN5Print7printlnEPKc>
 8084928:	e7f1      	b.n	808490e <_Z17serialGetDeviceIdv+0xb6>
        Serial.println("\n\rIncorrect password!");
 808492a:	f005 fe19 	bl	808a560 <_Z16_fetch_usbserialv>
 808492e:	490b      	ldr	r1, [pc, #44]	; (808495c <_Z17serialGetDeviceIdv+0x104>)
 8084930:	f004 fdbd 	bl	80894ae <_ZN5Print7printlnEPKc>
 8084934:	e7ee      	b.n	8084914 <_Z17serialGetDeviceIdv+0xbc>
 8084936:	bf00      	nop
 8084938:	20000080 	.word	0x20000080
 808493c:	0808f320 	.word	0x0808f320
 8084940:	0808f333 	.word	0x0808f333
 8084944:	0808e246 	.word	0x0808e246
 8084948:	0808e24c 	.word	0x0808e24c
 808494c:	0808f363 	.word	0x0808f363
 8084950:	08090075 	.word	0x08090075
 8084954:	0808f378 	.word	0x0808f378
 8084958:	0808e47d 	.word	0x0808e47d
 808495c:	0808e371 	.word	0x0808e371

08084960 <_Z13serialGetZonev>:
{
 8084960:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 8084962:	f005 fdfd 	bl	808a560 <_Z16_fetch_usbserialv>
 8084966:	491f      	ldr	r1, [pc, #124]	; (80849e4 <_Z13serialGetZonev+0x84>)
 8084968:	f004 fda1 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808496c:	f005 fdf8 	bl	808a560 <_Z16_fetch_usbserialv>
 8084970:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084974:	f004 feee 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084978:	f005 fdf2 	bl	808a560 <_Z16_fetch_usbserialv>
 808497c:	220d      	movs	r2, #13
 808497e:	4601      	mov	r1, r0
 8084980:	a802      	add	r0, sp, #8
 8084982:	f004 fefd 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084986:	a802      	add	r0, sp, #8
 8084988:	f004 fd30 	bl	80893ec <_ZNK6String5toIntEv>
 808498c:	9001      	str	r0, [sp, #4]
    Serial.println("");
 808498e:	f005 fde7 	bl	808a560 <_Z16_fetch_usbserialv>
 8084992:	4915      	ldr	r1, [pc, #84]	; (80849e8 <_Z13serialGetZonev+0x88>)
 8084994:	f004 fd8b 	bl	80894ae <_ZN5Print7printlnEPKc>
    if (tempValue >= -12 && tempValue <= 14)
 8084998:	9801      	ldr	r0, [sp, #4]
 808499a:	f100 030c 	add.w	r3, r0, #12
 808499e:	2b1a      	cmp	r3, #26
 80849a0:	d81a      	bhi.n	80849d8 <_Z13serialGetZonev+0x78>
        Time.zone(tempValue);
 80849a2:	f006 ff3f 	bl	808b824 <__aeabi_i2f>
 80849a6:	f004 ff61 	bl	808986c <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
 80849aa:	f005 fdd9 	bl	808a560 <_Z16_fetch_usbserialv>
 80849ae:	490f      	ldr	r1, [pc, #60]	; (80849ec <_Z13serialGetZonev+0x8c>)
 80849b0:	f004 fd6a 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80849b4:	f005 fdd4 	bl	808a560 <_Z16_fetch_usbserialv>
 80849b8:	9901      	ldr	r1, [sp, #4]
 80849ba:	220a      	movs	r2, #10
 80849bc:	f7ff fc63 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 80849c0:	f006 f8be 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80849c4:	2054      	movs	r0, #84	; 0x54
 80849c6:	a901      	add	r1, sp, #4
 80849c8:	f7fc f818 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80849cc:	a802      	add	r0, sp, #8
 80849ce:	f004 fb4d 	bl	808906c <_ZN6StringD1Ev>
}
 80849d2:	b007      	add	sp, #28
 80849d4:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rInvalid value!");
 80849d8:	f005 fdc2 	bl	808a560 <_Z16_fetch_usbserialv>
 80849dc:	4904      	ldr	r1, [pc, #16]	; (80849f0 <_Z13serialGetZonev+0x90>)
 80849de:	f004 fd66 	bl	80894ae <_ZN5Print7printlnEPKc>
 80849e2:	e7f3      	b.n	80849cc <_Z13serialGetZonev+0x6c>
 80849e4:	0808f389 	.word	0x0808f389
 80849e8:	08090075 	.word	0x08090075
 80849ec:	0808f3b4 	.word	0x0808f3b4
 80849f0:	0808e47d 	.word	0x0808e47d

080849f4 <_Z19serialGetLowerLimitv>:
{
 80849f4:	b530      	push	{r4, r5, lr}
 80849f6:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 80849f8:	f005 fdb2 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.println(gas_lower_limit);
 80849fc:	4d35      	ldr	r5, [pc, #212]	; (8084ad4 <_Z19serialGetLowerLimitv+0xe0>)
    Serial.println();
 80849fe:	f004 fd4a 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 8084a02:	f005 fdad 	bl	808a560 <_Z16_fetch_usbserialv>
 8084a06:	4934      	ldr	r1, [pc, #208]	; (8084ad8 <_Z19serialGetLowerLimitv+0xe4>)
 8084a08:	f004 fd3e 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 8084a0c:	f005 fda8 	bl	808a560 <_Z16_fetch_usbserialv>
 8084a10:	220a      	movs	r2, #10
 8084a12:	6829      	ldr	r1, [r5, #0]
 8084a14:	f7ff fc37 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the lower limit");
 8084a18:	f005 fda2 	bl	808a560 <_Z16_fetch_usbserialv>
 8084a1c:	492f      	ldr	r1, [pc, #188]	; (8084adc <_Z19serialGetLowerLimitv+0xe8>)
 8084a1e:	f004 fd46 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8084a22:	f005 fd9d 	bl	808a560 <_Z16_fetch_usbserialv>
 8084a26:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084a2a:	f004 fe93 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084a2e:	f005 fd97 	bl	808a560 <_Z16_fetch_usbserialv>
 8084a32:	220d      	movs	r2, #13
 8084a34:	4601      	mov	r1, r0
 8084a36:	4668      	mov	r0, sp
 8084a38:	f004 fea2 	bl	8089780 <_ZN6Stream15readStringUntilEc>
 8084a3c:	4668      	mov	r0, sp
 8084a3e:	4928      	ldr	r1, [pc, #160]	; (8084ae0 <_Z19serialGetLowerLimitv+0xec>)
 8084a40:	f004 fc7c 	bl	808933c <_ZNK6String6equalsEPKc>
    if (tempString == "bould")
 8084a44:	2800      	cmp	r0, #0
 8084a46:	d03e      	beq.n	8084ac6 <_Z19serialGetLowerLimitv+0xd2>
        Serial.println("Password correct!");
 8084a48:	f005 fd8a 	bl	808a560 <_Z16_fetch_usbserialv>
 8084a4c:	4925      	ldr	r1, [pc, #148]	; (8084ae4 <_Z19serialGetLowerLimitv+0xf0>)
 8084a4e:	f004 fd2e 	bl	80894ae <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 8084a52:	f005 fd85 	bl	808a560 <_Z16_fetch_usbserialv>
 8084a56:	4924      	ldr	r1, [pc, #144]	; (8084ae8 <_Z19serialGetLowerLimitv+0xf4>)
 8084a58:	f004 fd29 	bl	80894ae <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8084a5c:	f005 fd80 	bl	808a560 <_Z16_fetch_usbserialv>
 8084a60:	220d      	movs	r2, #13
 8084a62:	4601      	mov	r1, r0
 8084a64:	a804      	add	r0, sp, #16
 8084a66:	f004 fe8b 	bl	8089780 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8084a6a:	a804      	add	r0, sp, #16
 8084a6c:	f004 fcbe 	bl	80893ec <_ZNK6String5toIntEv>
 8084a70:	4604      	mov	r4, r0
        Serial.println("");
 8084a72:	f005 fd75 	bl	808a560 <_Z16_fetch_usbserialv>
 8084a76:	491d      	ldr	r1, [pc, #116]	; (8084aec <_Z19serialGetLowerLimitv+0xf8>)
 8084a78:	f004 fd19 	bl	80894ae <_ZN5Print7printlnEPKc>
        if (tempValue > 0 && tempValue < 20000)
 8084a7c:	f644 631e 	movw	r3, #19998	; 0x4e1e
 8084a80:	1e62      	subs	r2, r4, #1
 8084a82:	429a      	cmp	r2, r3
 8084a84:	d819      	bhi.n	8084aba <_Z19serialGetLowerLimitv+0xc6>
            Serial.print("\n\rNew lower limit:");
 8084a86:	f005 fd6b 	bl	808a560 <_Z16_fetch_usbserialv>
 8084a8a:	4919      	ldr	r1, [pc, #100]	; (8084af0 <_Z19serialGetLowerLimitv+0xfc>)
 8084a8c:	f004 fcfc 	bl	8089488 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8084a90:	f005 fd66 	bl	808a560 <_Z16_fetch_usbserialv>
 8084a94:	4621      	mov	r1, r4
 8084a96:	220a      	movs	r2, #10
 8084a98:	f7ff fbf5 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
            gas_lower_limit = tempValue;
 8084a9c:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8084a9e:	f006 f84f 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8084aa2:	4629      	mov	r1, r5
 8084aa4:	204c      	movs	r0, #76	; 0x4c
 8084aa6:	f7fb ffa9 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 8084aaa:	a804      	add	r0, sp, #16
 8084aac:	f004 fade 	bl	808906c <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8084ab0:	4668      	mov	r0, sp
 8084ab2:	f004 fadb 	bl	808906c <_ZN6StringD1Ev>
}
 8084ab6:	b009      	add	sp, #36	; 0x24
 8084ab8:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 8084aba:	f005 fd51 	bl	808a560 <_Z16_fetch_usbserialv>
 8084abe:	490d      	ldr	r1, [pc, #52]	; (8084af4 <_Z19serialGetLowerLimitv+0x100>)
 8084ac0:	f004 fcf5 	bl	80894ae <_ZN5Print7printlnEPKc>
 8084ac4:	e7f1      	b.n	8084aaa <_Z19serialGetLowerLimitv+0xb6>
        Serial.println("\n\rIncorrect password!");
 8084ac6:	f005 fd4b 	bl	808a560 <_Z16_fetch_usbserialv>
 8084aca:	490b      	ldr	r1, [pc, #44]	; (8084af8 <_Z19serialGetLowerLimitv+0x104>)
 8084acc:	f004 fcef 	bl	80894ae <_ZN5Print7printlnEPKc>
 8084ad0:	e7ee      	b.n	8084ab0 <_Z19serialGetLowerLimitv+0xbc>
 8084ad2:	bf00      	nop
 8084ad4:	20000098 	.word	0x20000098
 8084ad8:	0808f3cc 	.word	0x0808f3cc
 8084adc:	0808f3e1 	.word	0x0808f3e1
 8084ae0:	0808e246 	.word	0x0808e246
 8084ae4:	0808e24c 	.word	0x0808e24c
 8084ae8:	0808f41a 	.word	0x0808f41a
 8084aec:	08090075 	.word	0x08090075
 8084af0:	0808f433 	.word	0x0808f433
 8084af4:	0808e47d 	.word	0x0808e47d
 8084af8:	0808e371 	.word	0x0808e371

08084afc <_Z19serialGetUpperLimitv>:
{
 8084afc:	b530      	push	{r4, r5, lr}
 8084afe:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8084b00:	f005 fd2e 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.println(gas_upper_limit);
 8084b04:	4d35      	ldr	r5, [pc, #212]	; (8084bdc <_Z19serialGetUpperLimitv+0xe0>)
    Serial.println();
 8084b06:	f004 fcc6 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 8084b0a:	f005 fd29 	bl	808a560 <_Z16_fetch_usbserialv>
 8084b0e:	4934      	ldr	r1, [pc, #208]	; (8084be0 <_Z19serialGetUpperLimitv+0xe4>)
 8084b10:	f004 fcba 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 8084b14:	f005 fd24 	bl	808a560 <_Z16_fetch_usbserialv>
 8084b18:	220a      	movs	r2, #10
 8084b1a:	6829      	ldr	r1, [r5, #0]
 8084b1c:	f7ff fbb3 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the upper limit");
 8084b20:	f005 fd1e 	bl	808a560 <_Z16_fetch_usbserialv>
 8084b24:	492f      	ldr	r1, [pc, #188]	; (8084be4 <_Z19serialGetUpperLimitv+0xe8>)
 8084b26:	f004 fcc2 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8084b2a:	f005 fd19 	bl	808a560 <_Z16_fetch_usbserialv>
 8084b2e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084b32:	f004 fe0f 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084b36:	f005 fd13 	bl	808a560 <_Z16_fetch_usbserialv>
 8084b3a:	220d      	movs	r2, #13
 8084b3c:	4601      	mov	r1, r0
 8084b3e:	4668      	mov	r0, sp
 8084b40:	f004 fe1e 	bl	8089780 <_ZN6Stream15readStringUntilEc>
 8084b44:	4668      	mov	r0, sp
 8084b46:	4928      	ldr	r1, [pc, #160]	; (8084be8 <_Z19serialGetUpperLimitv+0xec>)
 8084b48:	f004 fbf8 	bl	808933c <_ZNK6String6equalsEPKc>
    if (tempString == "bould")
 8084b4c:	2800      	cmp	r0, #0
 8084b4e:	d03e      	beq.n	8084bce <_Z19serialGetUpperLimitv+0xd2>
        Serial.println("Password correct!");
 8084b50:	f005 fd06 	bl	808a560 <_Z16_fetch_usbserialv>
 8084b54:	4925      	ldr	r1, [pc, #148]	; (8084bec <_Z19serialGetUpperLimitv+0xf0>)
 8084b56:	f004 fcaa 	bl	80894ae <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 8084b5a:	f005 fd01 	bl	808a560 <_Z16_fetch_usbserialv>
 8084b5e:	4924      	ldr	r1, [pc, #144]	; (8084bf0 <_Z19serialGetUpperLimitv+0xf4>)
 8084b60:	f004 fca5 	bl	80894ae <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8084b64:	f005 fcfc 	bl	808a560 <_Z16_fetch_usbserialv>
 8084b68:	220d      	movs	r2, #13
 8084b6a:	4601      	mov	r1, r0
 8084b6c:	a804      	add	r0, sp, #16
 8084b6e:	f004 fe07 	bl	8089780 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8084b72:	a804      	add	r0, sp, #16
 8084b74:	f004 fc3a 	bl	80893ec <_ZNK6String5toIntEv>
 8084b78:	4604      	mov	r4, r0
        Serial.println("");
 8084b7a:	f005 fcf1 	bl	808a560 <_Z16_fetch_usbserialv>
 8084b7e:	491d      	ldr	r1, [pc, #116]	; (8084bf4 <_Z19serialGetUpperLimitv+0xf8>)
 8084b80:	f004 fc95 	bl	80894ae <_ZN5Print7printlnEPKc>
        if (tempValue > 0 && tempValue < 50000)
 8084b84:	f24c 334e 	movw	r3, #49998	; 0xc34e
 8084b88:	1e62      	subs	r2, r4, #1
 8084b8a:	429a      	cmp	r2, r3
 8084b8c:	d819      	bhi.n	8084bc2 <_Z19serialGetUpperLimitv+0xc6>
            Serial.print("\n\rNew upper limit:");
 8084b8e:	f005 fce7 	bl	808a560 <_Z16_fetch_usbserialv>
 8084b92:	4919      	ldr	r1, [pc, #100]	; (8084bf8 <_Z19serialGetUpperLimitv+0xfc>)
 8084b94:	f004 fc78 	bl	8089488 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8084b98:	f005 fce2 	bl	808a560 <_Z16_fetch_usbserialv>
 8084b9c:	4621      	mov	r1, r4
 8084b9e:	220a      	movs	r2, #10
 8084ba0:	f7ff fb71 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
            gas_upper_limit = tempValue;
 8084ba4:	602c      	str	r4, [r5, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8084ba6:	f005 ffcb 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8084baa:	4629      	mov	r1, r5
 8084bac:	2050      	movs	r0, #80	; 0x50
 8084bae:	f7fb ff25 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 8084bb2:	a804      	add	r0, sp, #16
 8084bb4:	f004 fa5a 	bl	808906c <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 8084bb8:	4668      	mov	r0, sp
 8084bba:	f004 fa57 	bl	808906c <_ZN6StringD1Ev>
}
 8084bbe:	b009      	add	sp, #36	; 0x24
 8084bc0:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 8084bc2:	f005 fccd 	bl	808a560 <_Z16_fetch_usbserialv>
 8084bc6:	490d      	ldr	r1, [pc, #52]	; (8084bfc <_Z19serialGetUpperLimitv+0x100>)
 8084bc8:	f004 fc71 	bl	80894ae <_ZN5Print7printlnEPKc>
 8084bcc:	e7f1      	b.n	8084bb2 <_Z19serialGetUpperLimitv+0xb6>
        Serial.println("\n\rIncorrect password!");
 8084bce:	f005 fcc7 	bl	808a560 <_Z16_fetch_usbserialv>
 8084bd2:	490b      	ldr	r1, [pc, #44]	; (8084c00 <_Z19serialGetUpperLimitv+0x104>)
 8084bd4:	f004 fc6b 	bl	80894ae <_ZN5Print7printlnEPKc>
 8084bd8:	e7ee      	b.n	8084bb8 <_Z19serialGetUpperLimitv+0xbc>
 8084bda:	bf00      	nop
 8084bdc:	2000009c 	.word	0x2000009c
 8084be0:	0808f446 	.word	0x0808f446
 8084be4:	0808f45b 	.word	0x0808f45b
 8084be8:	0808e246 	.word	0x0808e246
 8084bec:	0808e24c 	.word	0x0808e24c
 8084bf0:	0808f494 	.word	0x0808f494
 8084bf4:	08090075 	.word	0x08090075
 8084bf8:	0808f4ad 	.word	0x0808f4ad
 8084bfc:	0808e47d 	.word	0x0808e47d
 8084c00:	0808e371 	.word	0x0808e371

08084c04 <_Z20serialGetAverageTimev>:
{
 8084c04:	b510      	push	{r4, lr}
 8084c06:	b086      	sub	sp, #24
    Serial.println();
 8084c08:	f005 fcaa 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.print(measurements_to_average);
 8084c0c:	4c28      	ldr	r4, [pc, #160]	; (8084cb0 <_Z20serialGetAverageTimev+0xac>)
    Serial.println();
 8084c0e:	f004 fc42 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 8084c12:	f005 fca5 	bl	808a560 <_Z16_fetch_usbserialv>
 8084c16:	4927      	ldr	r1, [pc, #156]	; (8084cb4 <_Z20serialGetAverageTimev+0xb0>)
 8084c18:	f004 fc36 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8084c1c:	f005 fca0 	bl	808a560 <_Z16_fetch_usbserialv>
 8084c20:	220a      	movs	r2, #10
 8084c22:	6821      	ldr	r1, [r4, #0]
 8084c24:	f7ff fb10 	bl	8084248 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println("(~2 second) measurements");
 8084c28:	f005 fc9a 	bl	808a560 <_Z16_fetch_usbserialv>
 8084c2c:	4922      	ldr	r1, [pc, #136]	; (8084cb8 <_Z20serialGetAverageTimev+0xb4>)
 8084c2e:	f004 fc3e 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 8084c32:	f005 fc95 	bl	808a560 <_Z16_fetch_usbserialv>
 8084c36:	4921      	ldr	r1, [pc, #132]	; (8084cbc <_Z20serialGetAverageTimev+0xb8>)
 8084c38:	f004 fc26 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8084c3c:	f005 fc90 	bl	808a560 <_Z16_fetch_usbserialv>
 8084c40:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084c44:	f004 fd86 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084c48:	f005 fc8a 	bl	808a560 <_Z16_fetch_usbserialv>
 8084c4c:	220d      	movs	r2, #13
 8084c4e:	4601      	mov	r1, r0
 8084c50:	a802      	add	r0, sp, #8
 8084c52:	f004 fd95 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084c56:	a802      	add	r0, sp, #8
 8084c58:	f004 fbc8 	bl	80893ec <_ZNK6String5toIntEv>
    if (tempValue >= 1 && tempValue < 10000)
 8084c5c:	f242 730e 	movw	r3, #9998	; 0x270e
    int tempValue = tempString.toInt();
 8084c60:	9001      	str	r0, [sp, #4]
    if (tempValue >= 1 && tempValue < 10000)
 8084c62:	3801      	subs	r0, #1
 8084c64:	4298      	cmp	r0, r3
 8084c66:	d81c      	bhi.n	8084ca2 <_Z20serialGetAverageTimev+0x9e>
        Serial.print("\n\rNew Frequency: ");
 8084c68:	f005 fc7a 	bl	808a560 <_Z16_fetch_usbserialv>
 8084c6c:	4914      	ldr	r1, [pc, #80]	; (8084cc0 <_Z20serialGetAverageTimev+0xbc>)
 8084c6e:	f004 fc0b 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8084c72:	f005 fc75 	bl	808a560 <_Z16_fetch_usbserialv>
 8084c76:	220a      	movs	r2, #10
 8084c78:	9901      	ldr	r1, [sp, #4]
 8084c7a:	f7ff fb04 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
        Serial.println("(~2 second) measurements");
 8084c7e:	f005 fc6f 	bl	808a560 <_Z16_fetch_usbserialv>
 8084c82:	490d      	ldr	r1, [pc, #52]	; (8084cb8 <_Z20serialGetAverageTimev+0xb4>)
 8084c84:	f004 fc13 	bl	80894ae <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8084c88:	9b01      	ldr	r3, [sp, #4]
 8084c8a:	6023      	str	r3, [r4, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8084c8c:	f005 ff58 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8084c90:	2074      	movs	r0, #116	; 0x74
 8084c92:	a901      	add	r1, sp, #4
 8084c94:	f7fb feb2 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8084c98:	a802      	add	r0, sp, #8
 8084c9a:	f004 f9e7 	bl	808906c <_ZN6StringD1Ev>
}
 8084c9e:	b006      	add	sp, #24
 8084ca0:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8084ca2:	f005 fc5d 	bl	808a560 <_Z16_fetch_usbserialv>
 8084ca6:	4907      	ldr	r1, [pc, #28]	; (8084cc4 <_Z20serialGetAverageTimev+0xc0>)
 8084ca8:	f004 fc01 	bl	80894ae <_ZN5Print7printlnEPKc>
 8084cac:	e7f4      	b.n	8084c98 <_Z20serialGetAverageTimev+0x94>
 8084cae:	bf00      	nop
 8084cb0:	20000748 	.word	0x20000748
 8084cb4:	0808f4c0 	.word	0x0808f4c0
 8084cb8:	0808f4d4 	.word	0x0808f4d4
 8084cbc:	0808f4ed 	.word	0x0808f4ed
 8084cc0:	0808f500 	.word	0x0808f500
 8084cc4:	0808e47d 	.word	0x0808e47d

08084cc8 <_Z16serialGetCo2Zerov>:
{
 8084cc8:	b510      	push	{r4, lr}
 8084cca:	b086      	sub	sp, #24
    Serial.println();
 8084ccc:	f005 fc48 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.print(CO2_zero);
 8084cd0:	4c25      	ldr	r4, [pc, #148]	; (8084d68 <_Z16serialGetCo2Zerov+0xa0>)
    Serial.println();
 8084cd2:	f004 fbe0 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 8084cd6:	f005 fc43 	bl	808a560 <_Z16_fetch_usbserialv>
 8084cda:	4924      	ldr	r1, [pc, #144]	; (8084d6c <_Z16serialGetCo2Zerov+0xa4>)
 8084cdc:	f004 fbd4 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 8084ce0:	f005 fc3e 	bl	808a560 <_Z16_fetch_usbserialv>
 8084ce4:	220a      	movs	r2, #10
 8084ce6:	6821      	ldr	r1, [r4, #0]
 8084ce8:	f7ff faae 	bl	8084248 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 8084cec:	f005 fc38 	bl	808a560 <_Z16_fetch_usbserialv>
 8084cf0:	491f      	ldr	r1, [pc, #124]	; (8084d70 <_Z16serialGetCo2Zerov+0xa8>)
 8084cf2:	f004 fbdc 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 8084cf6:	f005 fc33 	bl	808a560 <_Z16_fetch_usbserialv>
 8084cfa:	491e      	ldr	r1, [pc, #120]	; (8084d74 <_Z16serialGetCo2Zerov+0xac>)
 8084cfc:	f004 fbc4 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8084d00:	f005 fc2e 	bl	808a560 <_Z16_fetch_usbserialv>
 8084d04:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084d08:	f004 fd24 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084d0c:	f005 fc28 	bl	808a560 <_Z16_fetch_usbserialv>
 8084d10:	220d      	movs	r2, #13
 8084d12:	4601      	mov	r1, r0
 8084d14:	a802      	add	r0, sp, #8
 8084d16:	f004 fd33 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084d1a:	a802      	add	r0, sp, #8
 8084d1c:	f004 fb66 	bl	80893ec <_ZNK6String5toIntEv>
 8084d20:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 8084d22:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8084d26:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8084d2a:	d217      	bcs.n	8084d5c <_Z16serialGetCo2Zerov+0x94>
        Serial.print("\n\rNew CO2 zero: ");
 8084d2c:	f005 fc18 	bl	808a560 <_Z16_fetch_usbserialv>
 8084d30:	4911      	ldr	r1, [pc, #68]	; (8084d78 <_Z16serialGetCo2Zerov+0xb0>)
 8084d32:	f004 fba9 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8084d36:	f005 fc13 	bl	808a560 <_Z16_fetch_usbserialv>
 8084d3a:	9901      	ldr	r1, [sp, #4]
 8084d3c:	220a      	movs	r2, #10
 8084d3e:	f7ff faa2 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
        CO2_zero = tempValue;
 8084d42:	9b01      	ldr	r3, [sp, #4]
 8084d44:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8084d46:	f005 fefb 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8084d4a:	2004      	movs	r0, #4
 8084d4c:	a901      	add	r1, sp, #4
 8084d4e:	f7fb fe55 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8084d52:	a802      	add	r0, sp, #8
 8084d54:	f004 f98a 	bl	808906c <_ZN6StringD1Ev>
}
 8084d58:	b006      	add	sp, #24
 8084d5a:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8084d5c:	f005 fc00 	bl	808a560 <_Z16_fetch_usbserialv>
 8084d60:	4906      	ldr	r1, [pc, #24]	; (8084d7c <_Z16serialGetCo2Zerov+0xb4>)
 8084d62:	f004 fba4 	bl	80894ae <_ZN5Print7printlnEPKc>
 8084d66:	e7f4      	b.n	8084d52 <_Z16serialGetCo2Zerov+0x8a>
 8084d68:	200002bc 	.word	0x200002bc
 8084d6c:	0808f512 	.word	0x0808f512
 8084d70:	0808e4a1 	.word	0x0808e4a1
 8084d74:	0808f524 	.word	0x0808f524
 8084d78:	0808f539 	.word	0x0808f539
 8084d7c:	0808e47d 	.word	0x0808e47d

08084d80 <_Z15serialGetCoZerov>:
{
 8084d80:	b510      	push	{r4, lr}
 8084d82:	b086      	sub	sp, #24
    Serial.println();
 8084d84:	f005 fbec 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.print(CO_zeroA);
 8084d88:	4c26      	ldr	r4, [pc, #152]	; (8084e24 <_Z15serialGetCoZerov+0xa4>)
    Serial.println();
 8084d8a:	f004 fb84 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current CO_A zero:");
 8084d8e:	f005 fbe7 	bl	808a560 <_Z16_fetch_usbserialv>
 8084d92:	4925      	ldr	r1, [pc, #148]	; (8084e28 <_Z15serialGetCoZerov+0xa8>)
 8084d94:	f004 fb78 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(CO_zeroA);
 8084d98:	f005 fbe2 	bl	808a560 <_Z16_fetch_usbserialv>
 8084d9c:	220a      	movs	r2, #10
 8084d9e:	6821      	ldr	r1, [r4, #0]
 8084da0:	f7ff fa52 	bl	8084248 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppb");
 8084da4:	f005 fbdc 	bl	808a560 <_Z16_fetch_usbserialv>
 8084da8:	4920      	ldr	r1, [pc, #128]	; (8084e2c <_Z15serialGetCoZerov+0xac>)
 8084daa:	f004 fb80 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 8084dae:	f005 fbd7 	bl	808a560 <_Z16_fetch_usbserialv>
 8084db2:	491f      	ldr	r1, [pc, #124]	; (8084e30 <_Z15serialGetCoZerov+0xb0>)
 8084db4:	f004 fb68 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8084db8:	f005 fbd2 	bl	808a560 <_Z16_fetch_usbserialv>
 8084dbc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084dc0:	f004 fcc8 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084dc4:	f005 fbcc 	bl	808a560 <_Z16_fetch_usbserialv>
 8084dc8:	220d      	movs	r2, #13
 8084dca:	4601      	mov	r1, r0
 8084dcc:	a802      	add	r0, sp, #8
 8084dce:	f004 fcd7 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084dd2:	a802      	add	r0, sp, #8
 8084dd4:	f004 fb0a 	bl	80893ec <_ZNK6String5toIntEv>
    if (tempValue >= -5000 && tempValue < 5000)
 8084dd8:	f242 730f 	movw	r3, #9999	; 0x270f
    int tempValue = tempString.toInt();
 8084ddc:	9001      	str	r0, [sp, #4]
    if (tempValue >= -5000 && tempValue < 5000)
 8084dde:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8084de2:	3008      	adds	r0, #8
 8084de4:	4298      	cmp	r0, r3
 8084de6:	d817      	bhi.n	8084e18 <_Z15serialGetCoZerov+0x98>
        Serial.print("\n\rNew CO zero: ");
 8084de8:	f005 fbba 	bl	808a560 <_Z16_fetch_usbserialv>
 8084dec:	4911      	ldr	r1, [pc, #68]	; (8084e34 <_Z15serialGetCoZerov+0xb4>)
 8084dee:	f004 fb4b 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8084df2:	f005 fbb5 	bl	808a560 <_Z16_fetch_usbserialv>
 8084df6:	9901      	ldr	r1, [sp, #4]
 8084df8:	220a      	movs	r2, #10
 8084dfa:	f7ff fa44 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
        CO_zeroA = tempValue;
 8084dfe:	9b01      	ldr	r3, [sp, #4]
 8084e00:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO_ZERO_A_MEM_ADDRESS, tempValue);
 8084e02:	f005 fe9d 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8084e06:	200c      	movs	r0, #12
 8084e08:	a901      	add	r1, sp, #4
 8084e0a:	f7fb fdf7 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8084e0e:	a802      	add	r0, sp, #8
 8084e10:	f004 f92c 	bl	808906c <_ZN6StringD1Ev>
}
 8084e14:	b006      	add	sp, #24
 8084e16:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8084e18:	f005 fba2 	bl	808a560 <_Z16_fetch_usbserialv>
 8084e1c:	4906      	ldr	r1, [pc, #24]	; (8084e38 <_Z15serialGetCoZerov+0xb8>)
 8084e1e:	f004 fb46 	bl	80894ae <_ZN5Print7printlnEPKc>
 8084e22:	e7f4      	b.n	8084e0e <_Z15serialGetCoZerov+0x8e>
 8084e24:	200002d4 	.word	0x200002d4
 8084e28:	0808f54a 	.word	0x0808f54a
 8084e2c:	0808f55d 	.word	0x0808f55d
 8084e30:	0808f562 	.word	0x0808f562
 8084e34:	0808f576 	.word	0x0808f576
 8084e38:	0808e47d 	.word	0x0808e47d

08084e3c <_Z16serialGetPm1Zerov>:
{
 8084e3c:	b510      	push	{r4, lr}
 8084e3e:	b086      	sub	sp, #24
    Serial.println();
 8084e40:	f005 fb8e 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.print(PM_1_zero);
 8084e44:	4c25      	ldr	r4, [pc, #148]	; (8084edc <_Z16serialGetPm1Zerov+0xa0>)
    Serial.println();
 8084e46:	f004 fb26 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 8084e4a:	f005 fb89 	bl	808a560 <_Z16_fetch_usbserialv>
 8084e4e:	4924      	ldr	r1, [pc, #144]	; (8084ee0 <_Z16serialGetPm1Zerov+0xa4>)
 8084e50:	f004 fb1a 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 8084e54:	f005 fb84 	bl	808a560 <_Z16_fetch_usbserialv>
 8084e58:	220a      	movs	r2, #10
 8084e5a:	6821      	ldr	r1, [r4, #0]
 8084e5c:	f7ff f9f4 	bl	8084248 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ug/m3");
 8084e60:	f005 fb7e 	bl	808a560 <_Z16_fetch_usbserialv>
 8084e64:	491f      	ldr	r1, [pc, #124]	; (8084ee4 <_Z16serialGetPm1Zerov+0xa8>)
 8084e66:	f004 fb22 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 8084e6a:	f005 fb79 	bl	808a560 <_Z16_fetch_usbserialv>
 8084e6e:	491e      	ldr	r1, [pc, #120]	; (8084ee8 <_Z16serialGetPm1Zerov+0xac>)
 8084e70:	f004 fb0a 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8084e74:	f005 fb74 	bl	808a560 <_Z16_fetch_usbserialv>
 8084e78:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084e7c:	f004 fc6a 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084e80:	f005 fb6e 	bl	808a560 <_Z16_fetch_usbserialv>
 8084e84:	220d      	movs	r2, #13
 8084e86:	4601      	mov	r1, r0
 8084e88:	a802      	add	r0, sp, #8
 8084e8a:	f004 fc79 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084e8e:	a802      	add	r0, sp, #8
 8084e90:	f004 faac 	bl	80893ec <_ZNK6String5toIntEv>
 8084e94:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 8084e96:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8084e9a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8084e9e:	d217      	bcs.n	8084ed0 <_Z16serialGetPm1Zerov+0x94>
        Serial.print("\n\rNew PM1 zero: ");
 8084ea0:	f005 fb5e 	bl	808a560 <_Z16_fetch_usbserialv>
 8084ea4:	4911      	ldr	r1, [pc, #68]	; (8084eec <_Z16serialGetPm1Zerov+0xb0>)
 8084ea6:	f004 faef 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8084eaa:	f005 fb59 	bl	808a560 <_Z16_fetch_usbserialv>
 8084eae:	9901      	ldr	r1, [sp, #4]
 8084eb0:	220a      	movs	r2, #10
 8084eb2:	f7ff f9e8 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_1_zero = tempValue;
 8084eb6:	9b01      	ldr	r3, [sp, #4]
 8084eb8:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 8084eba:	f005 fe41 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8084ebe:	2014      	movs	r0, #20
 8084ec0:	a901      	add	r1, sp, #4
 8084ec2:	f7fb fd9b 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8084ec6:	a802      	add	r0, sp, #8
 8084ec8:	f004 f8d0 	bl	808906c <_ZN6StringD1Ev>
}
 8084ecc:	b006      	add	sp, #24
 8084ece:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8084ed0:	f005 fb46 	bl	808a560 <_Z16_fetch_usbserialv>
 8084ed4:	4906      	ldr	r1, [pc, #24]	; (8084ef0 <_Z16serialGetPm1Zerov+0xb4>)
 8084ed6:	f004 faea 	bl	80894ae <_ZN5Print7printlnEPKc>
 8084eda:	e7f4      	b.n	8084ec6 <_Z16serialGetPm1Zerov+0x8a>
 8084edc:	200002f0 	.word	0x200002f0
 8084ee0:	0808f586 	.word	0x0808f586
 8084ee4:	0808f598 	.word	0x0808f598
 8084ee8:	0808f59f 	.word	0x0808f59f
 8084eec:	0808f5b4 	.word	0x0808f5b4
 8084ef0:	0808e47d 	.word	0x0808e47d

08084ef4 <_Z17serialGetPm25Zerov>:
{
 8084ef4:	b510      	push	{r4, lr}
 8084ef6:	b086      	sub	sp, #24
    Serial.println();
 8084ef8:	f005 fb32 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.print(PM_25_zero);
 8084efc:	4c25      	ldr	r4, [pc, #148]	; (8084f94 <_Z17serialGetPm25Zerov+0xa0>)
    Serial.println();
 8084efe:	f004 faca 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 8084f02:	f005 fb2d 	bl	808a560 <_Z16_fetch_usbserialv>
 8084f06:	4924      	ldr	r1, [pc, #144]	; (8084f98 <_Z17serialGetPm25Zerov+0xa4>)
 8084f08:	f004 fabe 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 8084f0c:	f005 fb28 	bl	808a560 <_Z16_fetch_usbserialv>
 8084f10:	220a      	movs	r2, #10
 8084f12:	6821      	ldr	r1, [r4, #0]
 8084f14:	f7ff f998 	bl	8084248 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ug/m3");
 8084f18:	f005 fb22 	bl	808a560 <_Z16_fetch_usbserialv>
 8084f1c:	491f      	ldr	r1, [pc, #124]	; (8084f9c <_Z17serialGetPm25Zerov+0xa8>)
 8084f1e:	f004 fac6 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 8084f22:	f005 fb1d 	bl	808a560 <_Z16_fetch_usbserialv>
 8084f26:	491e      	ldr	r1, [pc, #120]	; (8084fa0 <_Z17serialGetPm25Zerov+0xac>)
 8084f28:	f004 faae 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8084f2c:	f005 fb18 	bl	808a560 <_Z16_fetch_usbserialv>
 8084f30:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084f34:	f004 fc0e 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084f38:	f005 fb12 	bl	808a560 <_Z16_fetch_usbserialv>
 8084f3c:	220d      	movs	r2, #13
 8084f3e:	4601      	mov	r1, r0
 8084f40:	a802      	add	r0, sp, #8
 8084f42:	f004 fc1d 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084f46:	a802      	add	r0, sp, #8
 8084f48:	f004 fa50 	bl	80893ec <_ZNK6String5toIntEv>
 8084f4c:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 8084f4e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8084f52:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8084f56:	d217      	bcs.n	8084f88 <_Z17serialGetPm25Zerov+0x94>
        Serial.print("\n\rNew PM2.5 zero: ");
 8084f58:	f005 fb02 	bl	808a560 <_Z16_fetch_usbserialv>
 8084f5c:	4911      	ldr	r1, [pc, #68]	; (8084fa4 <_Z17serialGetPm25Zerov+0xb0>)
 8084f5e:	f004 fa93 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8084f62:	f005 fafd 	bl	808a560 <_Z16_fetch_usbserialv>
 8084f66:	9901      	ldr	r1, [sp, #4]
 8084f68:	220a      	movs	r2, #10
 8084f6a:	f7ff f98c 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_25_zero = tempValue;
 8084f6e:	9b01      	ldr	r3, [sp, #4]
 8084f70:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 8084f72:	f005 fde5 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8084f76:	201c      	movs	r0, #28
 8084f78:	a901      	add	r1, sp, #4
 8084f7a:	f7fb fd3f 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8084f7e:	a802      	add	r0, sp, #8
 8084f80:	f004 f874 	bl	808906c <_ZN6StringD1Ev>
}
 8084f84:	b006      	add	sp, #24
 8084f86:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8084f88:	f005 faea 	bl	808a560 <_Z16_fetch_usbserialv>
 8084f8c:	4906      	ldr	r1, [pc, #24]	; (8084fa8 <_Z17serialGetPm25Zerov+0xb4>)
 8084f8e:	f004 fa8e 	bl	80894ae <_ZN5Print7printlnEPKc>
 8084f92:	e7f4      	b.n	8084f7e <_Z17serialGetPm25Zerov+0x8a>
 8084f94:	200002f8 	.word	0x200002f8
 8084f98:	0808f5c5 	.word	0x0808f5c5
 8084f9c:	0808f598 	.word	0x0808f598
 8084fa0:	0808f5d9 	.word	0x0808f5d9
 8084fa4:	0808f5f0 	.word	0x0808f5f0
 8084fa8:	0808e47d 	.word	0x0808e47d

08084fac <_Z17serialGetPm10Zerov>:
{
 8084fac:	b510      	push	{r4, lr}
 8084fae:	b086      	sub	sp, #24
    Serial.println();
 8084fb0:	f005 fad6 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.print(PM_10_zero);
 8084fb4:	4c25      	ldr	r4, [pc, #148]	; (808504c <_Z17serialGetPm10Zerov+0xa0>)
    Serial.println();
 8084fb6:	f004 fa6e 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 8084fba:	f005 fad1 	bl	808a560 <_Z16_fetch_usbserialv>
 8084fbe:	4924      	ldr	r1, [pc, #144]	; (8085050 <_Z17serialGetPm10Zerov+0xa4>)
 8084fc0:	f004 fa62 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 8084fc4:	f005 facc 	bl	808a560 <_Z16_fetch_usbserialv>
 8084fc8:	220a      	movs	r2, #10
 8084fca:	6821      	ldr	r1, [r4, #0]
 8084fcc:	f7ff f93c 	bl	8084248 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" um/m3");
 8084fd0:	f005 fac6 	bl	808a560 <_Z16_fetch_usbserialv>
 8084fd4:	491f      	ldr	r1, [pc, #124]	; (8085054 <_Z17serialGetPm10Zerov+0xa8>)
 8084fd6:	f004 fa6a 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 8084fda:	f005 fac1 	bl	808a560 <_Z16_fetch_usbserialv>
 8084fde:	491e      	ldr	r1, [pc, #120]	; (8085058 <_Z17serialGetPm10Zerov+0xac>)
 8084fe0:	f004 fa52 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8084fe4:	f005 fabc 	bl	808a560 <_Z16_fetch_usbserialv>
 8084fe8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084fec:	f004 fbb2 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084ff0:	f005 fab6 	bl	808a560 <_Z16_fetch_usbserialv>
 8084ff4:	220d      	movs	r2, #13
 8084ff6:	4601      	mov	r1, r0
 8084ff8:	a802      	add	r0, sp, #8
 8084ffa:	f004 fbc1 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8084ffe:	a802      	add	r0, sp, #8
 8085000:	f004 f9f4 	bl	80893ec <_ZNK6String5toIntEv>
 8085004:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 8085006:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808500a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808500e:	d217      	bcs.n	8085040 <_Z17serialGetPm10Zerov+0x94>
        Serial.print("\n\rNew PM10 zero: ");
 8085010:	f005 faa6 	bl	808a560 <_Z16_fetch_usbserialv>
 8085014:	4911      	ldr	r1, [pc, #68]	; (808505c <_Z17serialGetPm10Zerov+0xb0>)
 8085016:	f004 fa37 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 808501a:	f005 faa1 	bl	808a560 <_Z16_fetch_usbserialv>
 808501e:	9901      	ldr	r1, [sp, #4]
 8085020:	220a      	movs	r2, #10
 8085022:	f7ff f930 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
        PM_10_zero = tempValue;
 8085026:	9b01      	ldr	r3, [sp, #4]
 8085028:	6023      	str	r3, [r4, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 808502a:	f005 fd89 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808502e:	2024      	movs	r0, #36	; 0x24
 8085030:	a901      	add	r1, sp, #4
 8085032:	f7fb fce3 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085036:	a802      	add	r0, sp, #8
 8085038:	f004 f818 	bl	808906c <_ZN6StringD1Ev>
}
 808503c:	b006      	add	sp, #24
 808503e:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085040:	f005 fa8e 	bl	808a560 <_Z16_fetch_usbserialv>
 8085044:	4906      	ldr	r1, [pc, #24]	; (8085060 <_Z17serialGetPm10Zerov+0xb4>)
 8085046:	f004 fa32 	bl	80894ae <_ZN5Print7printlnEPKc>
 808504a:	e7f4      	b.n	8085036 <_Z17serialGetPm10Zerov+0x8a>
 808504c:	200002e8 	.word	0x200002e8
 8085050:	0808f603 	.word	0x0808f603
 8085054:	0808f616 	.word	0x0808f616
 8085058:	0808f61d 	.word	0x0808f61d
 808505c:	0808f633 	.word	0x0808f633
 8085060:	0808e47d 	.word	0x0808e47d

08085064 <_Z24serialGetTemperatureZerov>:
{
 8085064:	b510      	push	{r4, lr}
 8085066:	b086      	sub	sp, #24
    Serial.println();
 8085068:	f005 fa7a 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.print(temp_zero);
 808506c:	4c24      	ldr	r4, [pc, #144]	; (8085100 <_Z24serialGetTemperatureZerov+0x9c>)
    Serial.println();
 808506e:	f004 fa12 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 8085072:	f005 fa75 	bl	808a560 <_Z16_fetch_usbserialv>
 8085076:	4923      	ldr	r1, [pc, #140]	; (8085104 <_Z24serialGetTemperatureZerov+0xa0>)
 8085078:	f004 fa06 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 808507c:	f005 fa70 	bl	808a560 <_Z16_fetch_usbserialv>
 8085080:	220a      	movs	r2, #10
 8085082:	6821      	ldr	r1, [r4, #0]
 8085084:	f7ff f8e0 	bl	8084248 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" Degrees C");
 8085088:	f005 fa6a 	bl	808a560 <_Z16_fetch_usbserialv>
 808508c:	491e      	ldr	r1, [pc, #120]	; (8085108 <_Z24serialGetTemperatureZerov+0xa4>)
 808508e:	f004 fa0e 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 8085092:	f005 fa65 	bl	808a560 <_Z16_fetch_usbserialv>
 8085096:	491d      	ldr	r1, [pc, #116]	; (808510c <_Z24serialGetTemperatureZerov+0xa8>)
 8085098:	f004 f9f6 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808509c:	f005 fa60 	bl	808a560 <_Z16_fetch_usbserialv>
 80850a0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80850a4:	f004 fb56 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80850a8:	f005 fa5a 	bl	808a560 <_Z16_fetch_usbserialv>
 80850ac:	220d      	movs	r2, #13
 80850ae:	4601      	mov	r1, r0
 80850b0:	a802      	add	r0, sp, #8
 80850b2:	f004 fb65 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80850b6:	a802      	add	r0, sp, #8
 80850b8:	f004 f998 	bl	80893ec <_ZNK6String5toIntEv>
 80850bc:	9001      	str	r0, [sp, #4]
    if (tempValue >= -30 && tempValue < 30)
 80850be:	301e      	adds	r0, #30
 80850c0:	283b      	cmp	r0, #59	; 0x3b
 80850c2:	d817      	bhi.n	80850f4 <_Z24serialGetTemperatureZerov+0x90>
        Serial.print("\n\rNew Temperature zero: ");
 80850c4:	f005 fa4c 	bl	808a560 <_Z16_fetch_usbserialv>
 80850c8:	4911      	ldr	r1, [pc, #68]	; (8085110 <_Z24serialGetTemperatureZerov+0xac>)
 80850ca:	f004 f9dd 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80850ce:	f005 fa47 	bl	808a560 <_Z16_fetch_usbserialv>
 80850d2:	9901      	ldr	r1, [sp, #4]
 80850d4:	220a      	movs	r2, #10
 80850d6:	f7ff f8d6 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
        temp_zero = tempValue;
 80850da:	9b01      	ldr	r3, [sp, #4]
 80850dc:	6023      	str	r3, [r4, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 80850de:	f005 fd2f 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80850e2:	202c      	movs	r0, #44	; 0x2c
 80850e4:	a901      	add	r1, sp, #4
 80850e6:	f7fb fc89 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80850ea:	a802      	add	r0, sp, #8
 80850ec:	f003 ffbe 	bl	808906c <_ZN6StringD1Ev>
}
 80850f0:	b006      	add	sp, #24
 80850f2:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 80850f4:	f005 fa34 	bl	808a560 <_Z16_fetch_usbserialv>
 80850f8:	4906      	ldr	r1, [pc, #24]	; (8085114 <_Z24serialGetTemperatureZerov+0xb0>)
 80850fa:	f004 f9d8 	bl	80894ae <_ZN5Print7printlnEPKc>
 80850fe:	e7f4      	b.n	80850ea <_Z24serialGetTemperatureZerov+0x86>
 8085100:	20000c64 	.word	0x20000c64
 8085104:	0808f645 	.word	0x0808f645
 8085108:	0808e5dc 	.word	0x0808e5dc
 808510c:	0808f65f 	.word	0x0808f65f
 8085110:	0808f67c 	.word	0x0808f67c
 8085114:	0808e47d 	.word	0x0808e47d

08085118 <_Z21serialGetPressureZerov>:
{
 8085118:	b510      	push	{r4, lr}
 808511a:	b086      	sub	sp, #24
    Serial.println();
 808511c:	f005 fa20 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.print(pressure_zero);
 8085120:	4c25      	ldr	r4, [pc, #148]	; (80851b8 <_Z21serialGetPressureZerov+0xa0>)
    Serial.println();
 8085122:	f004 f9b8 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 8085126:	f005 fa1b 	bl	808a560 <_Z16_fetch_usbserialv>
 808512a:	4924      	ldr	r1, [pc, #144]	; (80851bc <_Z21serialGetPressureZerov+0xa4>)
 808512c:	f004 f9ac 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8085130:	f005 fa16 	bl	808a560 <_Z16_fetch_usbserialv>
 8085134:	220a      	movs	r2, #10
 8085136:	6821      	ldr	r1, [r4, #0]
 8085138:	f7ff f886 	bl	8084248 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 808513c:	f005 fa10 	bl	808a560 <_Z16_fetch_usbserialv>
 8085140:	491f      	ldr	r1, [pc, #124]	; (80851c0 <_Z21serialGetPressureZerov+0xa8>)
 8085142:	f004 f9b4 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 8085146:	f005 fa0b 	bl	808a560 <_Z16_fetch_usbserialv>
 808514a:	491e      	ldr	r1, [pc, #120]	; (80851c4 <_Z21serialGetPressureZerov+0xac>)
 808514c:	f004 f99c 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085150:	f005 fa06 	bl	808a560 <_Z16_fetch_usbserialv>
 8085154:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085158:	f004 fafc 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808515c:	f005 fa00 	bl	808a560 <_Z16_fetch_usbserialv>
 8085160:	220d      	movs	r2, #13
 8085162:	4601      	mov	r1, r0
 8085164:	a802      	add	r0, sp, #8
 8085166:	f004 fb0b 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808516a:	a802      	add	r0, sp, #8
 808516c:	f004 f93e 	bl	80893ec <_ZNK6String5toIntEv>
 8085170:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 8085172:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8085176:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808517a:	d217      	bcs.n	80851ac <_Z21serialGetPressureZerov+0x94>
        Serial.print("\n\rNew Pressure zero: ");
 808517c:	f005 f9f0 	bl	808a560 <_Z16_fetch_usbserialv>
 8085180:	4911      	ldr	r1, [pc, #68]	; (80851c8 <_Z21serialGetPressureZerov+0xb0>)
 8085182:	f004 f981 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8085186:	f005 f9eb 	bl	808a560 <_Z16_fetch_usbserialv>
 808518a:	9901      	ldr	r1, [sp, #4]
 808518c:	220a      	movs	r2, #10
 808518e:	f7ff f87a 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
        pressure_zero = tempValue;
 8085192:	9b01      	ldr	r3, [sp, #4]
 8085194:	6023      	str	r3, [r4, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 8085196:	f005 fcd3 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808519a:	2034      	movs	r0, #52	; 0x34
 808519c:	a901      	add	r1, sp, #4
 808519e:	f7fb fc2d 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 80851a2:	a802      	add	r0, sp, #8
 80851a4:	f003 ff62 	bl	808906c <_ZN6StringD1Ev>
}
 80851a8:	b006      	add	sp, #24
 80851aa:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 80851ac:	f005 f9d8 	bl	808a560 <_Z16_fetch_usbserialv>
 80851b0:	4906      	ldr	r1, [pc, #24]	; (80851cc <_Z21serialGetPressureZerov+0xb4>)
 80851b2:	f004 f97c 	bl	80894ae <_ZN5Print7printlnEPKc>
 80851b6:	e7f4      	b.n	80851a2 <_Z21serialGetPressureZerov+0x8a>
 80851b8:	2000079c 	.word	0x2000079c
 80851bc:	0808f695 	.word	0x0808f695
 80851c0:	0808e4a1 	.word	0x0808e4a1
 80851c4:	0808f6ac 	.word	0x0808f6ac
 80851c8:	0808f6c6 	.word	0x0808f6c6
 80851cc:	0808e47d 	.word	0x0808e47d

080851d0 <_Z21serialGetHumidityZerov>:
{
 80851d0:	b510      	push	{r4, lr}
 80851d2:	b086      	sub	sp, #24
    Serial.println();
 80851d4:	f005 f9c4 	bl	808a560 <_Z16_fetch_usbserialv>
    Serial.print(rh_zero);
 80851d8:	4c24      	ldr	r4, [pc, #144]	; (808526c <_Z21serialGetHumidityZerov+0x9c>)
    Serial.println();
 80851da:	f004 f95c 	bl	8089496 <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 80851de:	f005 f9bf 	bl	808a560 <_Z16_fetch_usbserialv>
 80851e2:	4923      	ldr	r1, [pc, #140]	; (8085270 <_Z21serialGetHumidityZerov+0xa0>)
 80851e4:	f004 f950 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 80851e8:	f005 f9ba 	bl	808a560 <_Z16_fetch_usbserialv>
 80851ec:	220a      	movs	r2, #10
 80851ee:	6821      	ldr	r1, [r4, #0]
 80851f0:	f7ff f82a 	bl	8084248 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" %");
 80851f4:	f005 f9b4 	bl	808a560 <_Z16_fetch_usbserialv>
 80851f8:	491e      	ldr	r1, [pc, #120]	; (8085274 <_Z21serialGetHumidityZerov+0xa4>)
 80851fa:	f004 f958 	bl	80894ae <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 80851fe:	f005 f9af 	bl	808a560 <_Z16_fetch_usbserialv>
 8085202:	491d      	ldr	r1, [pc, #116]	; (8085278 <_Z21serialGetHumidityZerov+0xa8>)
 8085204:	f004 f940 	bl	8089488 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8085208:	f005 f9aa 	bl	808a560 <_Z16_fetch_usbserialv>
 808520c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8085210:	f004 faa0 	bl	8089754 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8085214:	f005 f9a4 	bl	808a560 <_Z16_fetch_usbserialv>
 8085218:	220d      	movs	r2, #13
 808521a:	4601      	mov	r1, r0
 808521c:	a802      	add	r0, sp, #8
 808521e:	f004 faaf 	bl	8089780 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8085222:	a802      	add	r0, sp, #8
 8085224:	f004 f8e2 	bl	80893ec <_ZNK6String5toIntEv>
 8085228:	9001      	str	r0, [sp, #4]
    if (tempValue >= -50 && tempValue < 50)
 808522a:	3032      	adds	r0, #50	; 0x32
 808522c:	2863      	cmp	r0, #99	; 0x63
 808522e:	d817      	bhi.n	8085260 <_Z21serialGetHumidityZerov+0x90>
        Serial.print("\n\rNew RH zero: ");
 8085230:	f005 f996 	bl	808a560 <_Z16_fetch_usbserialv>
 8085234:	4911      	ldr	r1, [pc, #68]	; (808527c <_Z21serialGetHumidityZerov+0xac>)
 8085236:	f004 f927 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 808523a:	f005 f991 	bl	808a560 <_Z16_fetch_usbserialv>
 808523e:	9901      	ldr	r1, [sp, #4]
 8085240:	220a      	movs	r2, #10
 8085242:	f7ff f820 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
        rh_zero = tempValue;
 8085246:	9b01      	ldr	r3, [sp, #4]
 8085248:	6023      	str	r3, [r4, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 808524a:	f005 fc79 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808524e:	203c      	movs	r0, #60	; 0x3c
 8085250:	a901      	add	r1, sp, #4
 8085252:	f7fb fbd3 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8085256:	a802      	add	r0, sp, #8
 8085258:	f003 ff08 	bl	808906c <_ZN6StringD1Ev>
}
 808525c:	b006      	add	sp, #24
 808525e:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8085260:	f005 f97e 	bl	808a560 <_Z16_fetch_usbserialv>
 8085264:	4906      	ldr	r1, [pc, #24]	; (8085280 <_Z21serialGetHumidityZerov+0xb0>)
 8085266:	f004 f922 	bl	80894ae <_ZN5Print7printlnEPKc>
 808526a:	e7f4      	b.n	8085256 <_Z21serialGetHumidityZerov+0x86>
 808526c:	200007a4 	.word	0x200007a4
 8085270:	0808f6dc 	.word	0x0808f6dc
 8085274:	0808e681 	.word	0x0808e681
 8085278:	0808f6ed 	.word	0x0808f6ed
 808527c:	0808f701 	.word	0x0808f701
 8085280:	0808e47d 	.word	0x0808e47d

08085284 <_Z10serialMenuv>:
    incomingByte = '0';
 8085284:	2330      	movs	r3, #48	; 0x30
{
 8085286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    incomingByte = '0';
 808528a:	4cc7      	ldr	r4, [pc, #796]	; (80855a8 <_Z10serialMenuv+0x324>)
                if (!bme.performReading())
 808528c:	4dc7      	ldr	r5, [pc, #796]	; (80855ac <_Z10serialMenuv+0x328>)
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 808528e:	4fc8      	ldr	r7, [pc, #800]	; (80855b0 <_Z10serialMenuv+0x32c>)
{
 8085290:	b08a      	sub	sp, #40	; 0x28
    incomingByte = '0';
 8085292:	7023      	strb	r3, [r4, #0]
        Serial.print("Menu>");
 8085294:	4ec7      	ldr	r6, [pc, #796]	; (80855b4 <_Z10serialMenuv+0x330>)
    while (incomingByte != 'x')
 8085296:	7823      	ldrb	r3, [r4, #0]
 8085298:	2b78      	cmp	r3, #120	; 0x78
 808529a:	f000 844b 	beq.w	8085b34 <_Z10serialMenuv+0x8b0>
        Serial.print("Menu>");
 808529e:	f005 f95f 	bl	808a560 <_Z16_fetch_usbserialv>
 80852a2:	4631      	mov	r1, r6
 80852a4:	f004 f8f0 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.flush();
 80852a8:	f005 f95a 	bl	808a560 <_Z16_fetch_usbserialv>
 80852ac:	6803      	ldr	r3, [r0, #0]
 80852ae:	69db      	ldr	r3, [r3, #28]
 80852b0:	4798      	blx	r3
        while (!Serial.available());
 80852b2:	f005 f955 	bl	808a560 <_Z16_fetch_usbserialv>
 80852b6:	6803      	ldr	r3, [r0, #0]
 80852b8:	691b      	ldr	r3, [r3, #16]
 80852ba:	4798      	blx	r3
 80852bc:	2800      	cmp	r0, #0
 80852be:	d0f8      	beq.n	80852b2 <_Z10serialMenuv+0x2e>
        incomingByte = Serial.read();
 80852c0:	f005 f94e 	bl	808a560 <_Z16_fetch_usbserialv>
 80852c4:	6803      	ldr	r3, [r0, #0]
 80852c6:	695b      	ldr	r3, [r3, #20]
 80852c8:	4798      	blx	r3
 80852ca:	b2c0      	uxtb	r0, r0
 80852cc:	7020      	strb	r0, [r4, #0]
        switch (incomingByte)
 80852ce:	3821      	subs	r0, #33	; 0x21
 80852d0:	2859      	cmp	r0, #89	; 0x59
 80852d2:	d8e0      	bhi.n	8085296 <_Z10serialMenuv+0x12>
 80852d4:	a301      	add	r3, pc, #4	; (adr r3, 80852dc <_Z10serialMenuv+0x58>)
 80852d6:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80852da:	bf00      	nop
 80852dc:	08085a59 	.word	0x08085a59
 80852e0:	08085297 	.word	0x08085297
 80852e4:	08085af9 	.word	0x08085af9
 80852e8:	08085297 	.word	0x08085297
 80852ec:	08085297 	.word	0x08085297
 80852f0:	08085297 	.word	0x08085297
 80852f4:	08085297 	.word	0x08085297
 80852f8:	08085297 	.word	0x08085297
 80852fc:	08085297 	.word	0x08085297
 8085300:	08085b25 	.word	0x08085b25
 8085304:	08085297 	.word	0x08085297
 8085308:	08085297 	.word	0x08085297
 808530c:	08085297 	.word	0x08085297
 8085310:	08085297 	.word	0x08085297
 8085314:	08085297 	.word	0x08085297
 8085318:	08085a53 	.word	0x08085a53
 808531c:	08085887 	.word	0x08085887
 8085320:	0808588d 	.word	0x0808588d
 8085324:	08085949 	.word	0x08085949
 8085328:	08085977 	.word	0x08085977
 808532c:	0808599d 	.word	0x0808599d
 8085330:	080859bb 	.word	0x080859bb
 8085334:	080859e1 	.word	0x080859e1
 8085338:	080859ff 	.word	0x080859ff
 808533c:	08085a4d 	.word	0x08085a4d
 8085340:	08085297 	.word	0x08085297
 8085344:	08085297 	.word	0x08085297
 8085348:	08085297 	.word	0x08085297
 808534c:	08085297 	.word	0x08085297
 8085350:	08085297 	.word	0x08085297
 8085354:	08085b2d 	.word	0x08085b2d
 8085358:	08085ad1 	.word	0x08085ad1
 808535c:	08085557 	.word	0x08085557
 8085360:	0808555d 	.word	0x0808555d
 8085364:	08085589 	.word	0x08085589
 8085368:	080855f5 	.word	0x080855f5
 808536c:	0808561d 	.word	0x0808561d
 8085370:	08085639 	.word	0x08085639
 8085374:	0808564d 	.word	0x0808564d
 8085378:	08085675 	.word	0x08085675
 808537c:	0808568f 	.word	0x0808568f
 8085380:	08085695 	.word	0x08085695
 8085384:	080856a5 	.word	0x080856a5
 8085388:	080856b5 	.word	0x080856b5
 808538c:	080856bb 	.word	0x080856bb
 8085390:	080856e3 	.word	0x080856e3
 8085394:	080856ff 	.word	0x080856ff
 8085398:	0808570f 	.word	0x0808570f
 808539c:	08085723 	.word	0x08085723
 80853a0:	08085731 	.word	0x08085731
 80853a4:	08085761 	.word	0x08085761
 80853a8:	08085791 	.word	0x08085791
 80853ac:	080857bd 	.word	0x080857bd
 80853b0:	080857e9 	.word	0x080857e9
 80853b4:	080857fb 	.word	0x080857fb
 80853b8:	08085829 	.word	0x08085829
 80853bc:	08085297 	.word	0x08085297
 80853c0:	08085839 	.word	0x08085839
 80853c4:	08085297 	.word	0x08085297
 80853c8:	08085297 	.word	0x08085297
 80853cc:	08085297 	.word	0x08085297
 80853d0:	08085297 	.word	0x08085297
 80853d4:	08085297 	.word	0x08085297
 80853d8:	08085297 	.word	0x08085297
 80853dc:	08085445 	.word	0x08085445
 80853e0:	0808544b 	.word	0x0808544b
 80853e4:	08085451 	.word	0x08085451
 80853e8:	08085457 	.word	0x08085457
 80853ec:	0808545d 	.word	0x0808545d
 80853f0:	08085463 	.word	0x08085463
 80853f4:	08085469 	.word	0x08085469
 80853f8:	0808546f 	.word	0x0808546f
 80853fc:	08085475 	.word	0x08085475
 8085400:	0808547b 	.word	0x0808547b
 8085404:	08085481 	.word	0x08085481
 8085408:	08085487 	.word	0x08085487
 808540c:	0808548d 	.word	0x0808548d
 8085410:	08085493 	.word	0x08085493
 8085414:	08085499 	.word	0x08085499
 8085418:	0808549f 	.word	0x0808549f
 808541c:	080854a5 	.word	0x080854a5
 8085420:	080854c3 	.word	0x080854c3
 8085424:	080854d3 	.word	0x080854d3
 8085428:	080854f1 	.word	0x080854f1
 808542c:	080854f7 	.word	0x080854f7
 8085430:	080854fd 	.word	0x080854fd
 8085434:	08085503 	.word	0x08085503
 8085438:	08085297 	.word	0x08085297
 808543c:	08085509 	.word	0x08085509
 8085440:	0808552f 	.word	0x0808552f
            serialGetCo2Slope();
 8085444:	f7fd fbae 	bl	8082ba4 <_Z17serialGetCo2Slopev>
            break;
 8085448:	e724      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetCo2Zero();
 808544a:	f7ff fc3d 	bl	8084cc8 <_Z16serialGetCo2Zerov>
            break;
 808544e:	e721      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetCoSlope();
 8085450:	f7fd fc26 	bl	8082ca0 <_Z16serialGetCoSlopev>
            break;
 8085454:	e71e      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetCoZero();
 8085456:	f7ff fc93 	bl	8084d80 <_Z15serialGetCoZerov>
            break;
 808545a:	e71b      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetPm1Slope();
 808545c:	f7fd fca6 	bl	8082dac <_Z17serialGetPm1Slopev>
            break;
 8085460:	e718      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetPm1Zero();
 8085462:	f7ff fceb 	bl	8084e3c <_Z16serialGetPm1Zerov>
            break;
 8085466:	e715      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetPm25Slope();
 8085468:	f7fd fd1c 	bl	8082ea4 <_Z18serialGetPm25Slopev>
            break;
 808546c:	e712      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetPm25Zero();
 808546e:	f7ff fd41 	bl	8084ef4 <_Z17serialGetPm25Zerov>
            break;
 8085472:	e70f      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetPm10Slope();
 8085474:	f7fd fd92 	bl	8082f9c <_Z18serialGetPm10Slopev>
            break;
 8085478:	e70c      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetPm10Zero();
 808547a:	f7ff fd97 	bl	8084fac <_Z17serialGetPm10Zerov>
            break;
 808547e:	e709      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetTemperatureSlope();
 8085480:	f7fd fe08 	bl	8083094 <_Z25serialGetTemperatureSlopev>
            break;
 8085484:	e706      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetTemperatureZero();
 8085486:	f7ff fded 	bl	8085064 <_Z24serialGetTemperatureZerov>
            break;
 808548a:	e703      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetPressureSlope();
 808548c:	f7fd fe7e 	bl	808318c <_Z22serialGetPressureSlopev>
            break;
 8085490:	e700      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetPressureZero();
 8085492:	f7ff fe41 	bl	8085118 <_Z21serialGetPressureZerov>
            break;
 8085496:	e6fd      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetHumiditySlope();
 8085498:	f7fd fef4 	bl	8083284 <_Z22serialGetHumiditySlopev>
            break;
 808549c:	e6fa      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetHumidityZero();
 808549e:	f7ff fe97 	bl	80851d0 <_Z21serialGetHumidityZerov>
            break;
 80854a2:	e6f7      	b.n	8085294 <_Z10serialMenuv+0x10>
            Serial.println("Serial debugging enabled.");
 80854a4:	f005 f85c 	bl	808a560 <_Z16_fetch_usbserialv>
 80854a8:	4943      	ldr	r1, [pc, #268]	; (80855b8 <_Z10serialMenuv+0x334>)
 80854aa:	f004 f800 	bl	80894ae <_ZN5Print7printlnEPKc>
            debugging_enabled = 1;
 80854ae:	2301      	movs	r3, #1
 80854b0:	4e42      	ldr	r6, [pc, #264]	; (80855bc <_Z10serialMenuv+0x338>)
            debugging_enabled = 0;
 80854b2:	6033      	str	r3, [r6, #0]
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 80854b4:	f005 fb44 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80854b8:	4631      	mov	r1, r6
 80854ba:	2048      	movs	r0, #72	; 0x48
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80854bc:	f7fb fa9e 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
 80854c0:	e6e8      	b.n	8085294 <_Z10serialMenuv+0x10>
            Serial.println("Serial debugging disabled.");
 80854c2:	f005 f84d 	bl	808a560 <_Z16_fetch_usbserialv>
 80854c6:	493e      	ldr	r1, [pc, #248]	; (80855c0 <_Z10serialMenuv+0x33c>)
 80854c8:	f003 fff1 	bl	80894ae <_ZN5Print7printlnEPKc>
            debugging_enabled = 0;
 80854cc:	4e3b      	ldr	r6, [pc, #236]	; (80855bc <_Z10serialMenuv+0x338>)
 80854ce:	2300      	movs	r3, #0
 80854d0:	e7ef      	b.n	80854b2 <_Z10serialMenuv+0x22e>
            Serial.println(String(HEADER_STRING));
 80854d2:	f005 f845 	bl	808a560 <_Z16_fetch_usbserialv>
 80854d6:	4606      	mov	r6, r0
 80854d8:	493a      	ldr	r1, [pc, #232]	; (80855c4 <_Z10serialMenuv+0x340>)
 80854da:	a806      	add	r0, sp, #24
 80854dc:	f003 fe10 	bl	8089100 <_ZN6StringC1EPKc>
 80854e0:	4630      	mov	r0, r6
 80854e2:	9906      	ldr	r1, [sp, #24]
 80854e4:	f003 ffe3 	bl	80894ae <_ZN5Print7printlnEPKc>
            Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 80854e8:	a806      	add	r0, sp, #24
 80854ea:	f003 fdbf 	bl	808906c <_ZN6StringD1Ev>
            break;
 80854ee:	e6d1      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetTimeDate();
 80854f0:	f7fd fb08 	bl	8082b04 <_Z17serialGetTimeDatev>
            break;
 80854f4:	e6ce      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetZone();
 80854f6:	f7ff fa33 	bl	8084960 <_Z13serialGetZonev>
            break;
 80854fa:	e6cb      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetDeviceId();
 80854fc:	f7ff f9ac 	bl	8084858 <_Z17serialGetDeviceIdv>
            break;
 8085500:	e6c8      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetWifiCredentials();
 8085502:	f7fd f9af 	bl	8082864 <_Z24serialGetWifiCredentialsv>
            break;
 8085506:	e6c5      	b.n	8085294 <_Z10serialMenuv+0x10>
            if (serial_cellular_enabled == 0)
 8085508:	4e2f      	ldr	r6, [pc, #188]	; (80855c8 <_Z10serialMenuv+0x344>)
 808550a:	6833      	ldr	r3, [r6, #0]
 808550c:	b95b      	cbnz	r3, 8085526 <_Z10serialMenuv+0x2a2>
                Serial.println("Enabling Cellular.");
 808550e:	f005 f827 	bl	808a560 <_Z16_fetch_usbserialv>
 8085512:	492e      	ldr	r1, [pc, #184]	; (80855cc <_Z10serialMenuv+0x348>)
                Serial.println("Cellular already enabled.");
 8085514:	f003 ffcb 	bl	80894ae <_ZN5Print7printlnEPKc>
            serial_cellular_enabled = 1;
 8085518:	2301      	movs	r3, #1
            serial_cellular_enabled = 0;
 808551a:	6033      	str	r3, [r6, #0]
            EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 808551c:	f005 fb10 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8085520:	2044      	movs	r0, #68	; 0x44
 8085522:	4929      	ldr	r1, [pc, #164]	; (80855c8 <_Z10serialMenuv+0x344>)
 8085524:	e7ca      	b.n	80854bc <_Z10serialMenuv+0x238>
                Serial.println("Cellular already enabled.");
 8085526:	f005 f81b 	bl	808a560 <_Z16_fetch_usbserialv>
 808552a:	4929      	ldr	r1, [pc, #164]	; (80855d0 <_Z10serialMenuv+0x34c>)
 808552c:	e7f2      	b.n	8085514 <_Z10serialMenuv+0x290>
            if (serial_cellular_enabled == 1)
 808552e:	4e26      	ldr	r6, [pc, #152]	; (80855c8 <_Z10serialMenuv+0x344>)
 8085530:	6833      	ldr	r3, [r6, #0]
 8085532:	2b01      	cmp	r3, #1
 8085534:	d109      	bne.n	808554a <_Z10serialMenuv+0x2c6>
                Serial.println("Disabling Cellular");
 8085536:	f005 f813 	bl	808a560 <_Z16_fetch_usbserialv>
 808553a:	4926      	ldr	r1, [pc, #152]	; (80855d4 <_Z10serialMenuv+0x350>)
 808553c:	f003 ffb7 	bl	80894ae <_ZN5Print7printlnEPKc>
                Cellular.off();
 8085540:	4825      	ldr	r0, [pc, #148]	; (80855d8 <_Z10serialMenuv+0x354>)
 8085542:	f7fb fa9b 	bl	8080a7c <_ZN5spark13CellularClass3offEv>
            serial_cellular_enabled = 0;
 8085546:	2300      	movs	r3, #0
 8085548:	e7e7      	b.n	808551a <_Z10serialMenuv+0x296>
                Serial.println("Cellular already disabled.");
 808554a:	f005 f809 	bl	808a560 <_Z16_fetch_usbserialv>
 808554e:	4923      	ldr	r1, [pc, #140]	; (80855dc <_Z10serialMenuv+0x358>)
 8085550:	f003 ffad 	bl	80894ae <_ZN5Print7printlnEPKc>
 8085554:	e7f7      	b.n	8085546 <_Z10serialMenuv+0x2c2>
            readAlpha1Constantly();
 8085556:	f7fd ff13 	bl	8083380 <_Z20readAlpha1Constantlyv>
            break;
 808555a:	e69b      	b.n	8085294 <_Z10serialMenuv+0x10>
            if (output_only_particles == 1)
 808555c:	4b20      	ldr	r3, [pc, #128]	; (80855e0 <_Z10serialMenuv+0x35c>)
 808555e:	681a      	ldr	r2, [r3, #0]
 8085560:	2a01      	cmp	r2, #1
 8085562:	d10b      	bne.n	808557c <_Z10serialMenuv+0x2f8>
                output_only_particles = 0;
 8085564:	2200      	movs	r2, #0
 8085566:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting normally");
 8085568:	f004 fffa 	bl	808a560 <_Z16_fetch_usbserialv>
 808556c:	491d      	ldr	r1, [pc, #116]	; (80855e4 <_Z10serialMenuv+0x360>)
                Serial.println("Outputting only PM");
 808556e:	f003 ff9e 	bl	80894ae <_ZN5Print7printlnEPKc>
            EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8085572:	f005 fae5 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8085576:	2064      	movs	r0, #100	; 0x64
 8085578:	4919      	ldr	r1, [pc, #100]	; (80855e0 <_Z10serialMenuv+0x35c>)
 808557a:	e79f      	b.n	80854bc <_Z10serialMenuv+0x238>
                output_only_particles = 1;
 808557c:	2201      	movs	r2, #1
 808557e:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting only PM");
 8085580:	f004 ffee 	bl	808a560 <_Z16_fetch_usbserialv>
 8085584:	4918      	ldr	r1, [pc, #96]	; (80855e8 <_Z10serialMenuv+0x364>)
 8085586:	e7f2      	b.n	808556e <_Z10serialMenuv+0x2ea>
            if (temperature_units == FAHRENHEIT)
 8085588:	4b18      	ldr	r3, [pc, #96]	; (80855ec <_Z10serialMenuv+0x368>)
 808558a:	681a      	ldr	r2, [r3, #0]
 808558c:	b912      	cbnz	r2, 8085594 <_Z10serialMenuv+0x310>
                temperature_units = CELSIUS;
 808558e:	2201      	movs	r2, #1
                temperature_units = FAHRENHEIT;
 8085590:	601a      	str	r2, [r3, #0]
 8085592:	e004      	b.n	808559e <_Z10serialMenuv+0x31a>
                Serial.println("Temperature units already set to Celsius.");
 8085594:	f004 ffe4 	bl	808a560 <_Z16_fetch_usbserialv>
 8085598:	4915      	ldr	r1, [pc, #84]	; (80855f0 <_Z10serialMenuv+0x36c>)
 808559a:	f003 ff88 	bl	80894ae <_ZN5Print7printlnEPKc>
            EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 808559e:	f005 facf 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80855a2:	2060      	movs	r0, #96	; 0x60
 80855a4:	4911      	ldr	r1, [pc, #68]	; (80855ec <_Z10serialMenuv+0x368>)
 80855a6:	e789      	b.n	80854bc <_Z10serialMenuv+0x238>
 80855a8:	200006b8 	.word	0x200006b8
 80855ac:	20000564 	.word	0x20000564
 80855b0:	42c80000 	.word	0x42c80000
 80855b4:	0808f711 	.word	0x0808f711
 80855b8:	0808f717 	.word	0x0808f717
 80855bc:	200005e8 	.word	0x200005e8
 80855c0:	0808f731 	.word	0x0808f731
 80855c4:	0808f04c 	.word	0x0808f04c
 80855c8:	20000c28 	.word	0x20000c28
 80855cc:	0808f74c 	.word	0x0808f74c
 80855d0:	0808f75f 	.word	0x0808f75f
 80855d4:	0808f779 	.word	0x0808f779
 80855d8:	2000106c 	.word	0x2000106c
 80855dc:	0808f78c 	.word	0x0808f78c
 80855e0:	20000750 	.word	0x20000750
 80855e4:	0808f7a7 	.word	0x0808f7a7
 80855e8:	0808f7bb 	.word	0x0808f7bb
 80855ec:	20000c68 	.word	0x20000c68
 80855f0:	0808f7ce 	.word	0x0808f7ce
            if (new_temperature_sensor_enabled == 1)
 80855f4:	4ba7      	ldr	r3, [pc, #668]	; (8085894 <_Z10serialMenuv+0x610>)
 80855f6:	681a      	ldr	r2, [r3, #0]
 80855f8:	2a01      	cmp	r2, #1
 80855fa:	d10b      	bne.n	8085614 <_Z10serialMenuv+0x390>
                new_temperature_sensor_enabled = 0;
 80855fc:	2200      	movs	r2, #0
 80855fe:	601a      	str	r2, [r3, #0]
                Serial.println("Disabling new temperature sensor");
 8085600:	f004 ffae 	bl	808a560 <_Z16_fetch_usbserialv>
 8085604:	49a4      	ldr	r1, [pc, #656]	; (8085898 <_Z10serialMenuv+0x614>)
                Serial.println("Temperature sensor already disabled");
 8085606:	f003 ff52 	bl	80894ae <_ZN5Print7printlnEPKc>
            EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 808560a:	f005 fa99 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808560e:	2068      	movs	r0, #104	; 0x68
 8085610:	49a0      	ldr	r1, [pc, #640]	; (8085894 <_Z10serialMenuv+0x610>)
 8085612:	e753      	b.n	80854bc <_Z10serialMenuv+0x238>
                Serial.println("Temperature sensor already disabled");
 8085614:	f004 ffa4 	bl	808a560 <_Z16_fetch_usbserialv>
 8085618:	49a0      	ldr	r1, [pc, #640]	; (808589c <_Z10serialMenuv+0x618>)
 808561a:	e7f4      	b.n	8085606 <_Z10serialMenuv+0x382>
            if (new_temperature_sensor_enabled == 1)
 808561c:	4b9d      	ldr	r3, [pc, #628]	; (8085894 <_Z10serialMenuv+0x610>)
 808561e:	681a      	ldr	r2, [r3, #0]
 8085620:	2a01      	cmp	r2, #1
 8085622:	d103      	bne.n	808562c <_Z10serialMenuv+0x3a8>
                Serial.println("Temperature sensor already enabled");
 8085624:	f004 ff9c 	bl	808a560 <_Z16_fetch_usbserialv>
 8085628:	499d      	ldr	r1, [pc, #628]	; (80858a0 <_Z10serialMenuv+0x61c>)
 808562a:	e7ec      	b.n	8085606 <_Z10serialMenuv+0x382>
                new_temperature_sensor_enabled = 1;
 808562c:	2201      	movs	r2, #1
 808562e:	601a      	str	r2, [r3, #0]
                Serial.println("Temperatue sensor now enabled");
 8085630:	f004 ff96 	bl	808a560 <_Z16_fetch_usbserialv>
 8085634:	499b      	ldr	r1, [pc, #620]	; (80858a4 <_Z10serialMenuv+0x620>)
 8085636:	e7e6      	b.n	8085606 <_Z10serialMenuv+0x382>
            if (temperature_units == CELSIUS)
 8085638:	4b9b      	ldr	r3, [pc, #620]	; (80858a8 <_Z10serialMenuv+0x624>)
 808563a:	681a      	ldr	r2, [r3, #0]
 808563c:	2a01      	cmp	r2, #1
 808563e:	d101      	bne.n	8085644 <_Z10serialMenuv+0x3c0>
                temperature_units = FAHRENHEIT;
 8085640:	2200      	movs	r2, #0
 8085642:	e7a5      	b.n	8085590 <_Z10serialMenuv+0x30c>
                Serial.println("Temperature units already set to Fahrenheit.");
 8085644:	f004 ff8c 	bl	808a560 <_Z16_fetch_usbserialv>
 8085648:	4998      	ldr	r1, [pc, #608]	; (80858ac <_Z10serialMenuv+0x628>)
 808564a:	e7a6      	b.n	808559a <_Z10serialMenuv+0x316>
            if (ozone_analog_enabled == 1)
 808564c:	4b98      	ldr	r3, [pc, #608]	; (80858b0 <_Z10serialMenuv+0x62c>)
 808564e:	681a      	ldr	r2, [r3, #0]
 8085650:	2a01      	cmp	r2, #1
 8085652:	d109      	bne.n	8085668 <_Z10serialMenuv+0x3e4>
                Serial.println("Analog reading of ozone already enabled");
 8085654:	f004 ff84 	bl	808a560 <_Z16_fetch_usbserialv>
 8085658:	4996      	ldr	r1, [pc, #600]	; (80858b4 <_Z10serialMenuv+0x630>)
                Serial.println("Analog reading of ozone now enabled");
 808565a:	f003 ff28 	bl	80894ae <_ZN5Print7printlnEPKc>
            EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 808565e:	f005 fa6f 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8085662:	206c      	movs	r0, #108	; 0x6c
 8085664:	4992      	ldr	r1, [pc, #584]	; (80858b0 <_Z10serialMenuv+0x62c>)
 8085666:	e729      	b.n	80854bc <_Z10serialMenuv+0x238>
                ozone_analog_enabled = 1;
 8085668:	2201      	movs	r2, #1
 808566a:	601a      	str	r2, [r3, #0]
                Serial.println("Analog reading of ozone now enabled");
 808566c:	f004 ff78 	bl	808a560 <_Z16_fetch_usbserialv>
 8085670:	4991      	ldr	r1, [pc, #580]	; (80858b8 <_Z10serialMenuv+0x634>)
 8085672:	e7f2      	b.n	808565a <_Z10serialMenuv+0x3d6>
            if (ozone_analog_enabled == 0)
 8085674:	4b8e      	ldr	r3, [pc, #568]	; (80858b0 <_Z10serialMenuv+0x62c>)
 8085676:	681a      	ldr	r2, [r3, #0]
 8085678:	b91a      	cbnz	r2, 8085682 <_Z10serialMenuv+0x3fe>
                Serial.println("Digital reading of ozone already enabled");
 808567a:	f004 ff71 	bl	808a560 <_Z16_fetch_usbserialv>
 808567e:	498f      	ldr	r1, [pc, #572]	; (80858bc <_Z10serialMenuv+0x638>)
 8085680:	e7eb      	b.n	808565a <_Z10serialMenuv+0x3d6>
                ozone_analog_enabled = 0;
 8085682:	2200      	movs	r2, #0
 8085684:	601a      	str	r2, [r3, #0]
                Serial.println("Digital reading of ozone now enabled");
 8085686:	f004 ff6b 	bl	808a560 <_Z16_fetch_usbserialv>
 808568a:	498d      	ldr	r1, [pc, #564]	; (80858c0 <_Z10serialMenuv+0x63c>)
 808568c:	e7e5      	b.n	808565a <_Z10serialMenuv+0x3d6>
            serialGetAverageTime();
 808568e:	f7ff fab9 	bl	8084c04 <_Z20serialGetAverageTimev>
            break;
 8085692:	e5ff      	b.n	8085294 <_Z10serialMenuv+0x10>
            resetESP();
 8085694:	f7fc fee0 	bl	8082458 <_Z8resetESPv>
            Serial.println("ESP reset!");
 8085698:	f004 ff62 	bl	808a560 <_Z16_fetch_usbserialv>
 808569c:	4989      	ldr	r1, [pc, #548]	; (80858c4 <_Z10serialMenuv+0x640>)
                Serial.println("Battery threshold already enabled");
 808569e:	f003 ff06 	bl	80894ae <_ZN5Print7printlnEPKc>
 80856a2:	e5f7      	b.n	8085294 <_Z10serialMenuv+0x10>
            Serial.println("Outputting GPS continuously");
 80856a4:	f004 ff5c 	bl	808a560 <_Z16_fetch_usbserialv>
 80856a8:	4987      	ldr	r1, [pc, #540]	; (80858c8 <_Z10serialMenuv+0x644>)
 80856aa:	f003 ff00 	bl	80894ae <_ZN5Print7printlnEPKc>
            echoGps();
 80856ae:	f7fb fdcd 	bl	808124c <_Z7echoGpsv>
            break;
 80856b2:	e5ef      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialResetSettings();
 80856b4:	f7fd f9ee 	bl	8082a94 <_Z19serialResetSettingsv>
            break;
 80856b8:	e5ec      	b.n	8085294 <_Z10serialMenuv+0x10>
            if (battery_threshold_enable == 1)
 80856ba:	4e84      	ldr	r6, [pc, #528]	; (80858cc <_Z10serialMenuv+0x648>)
 80856bc:	6833      	ldr	r3, [r6, #0]
 80856be:	2b01      	cmp	r3, #1
 80856c0:	d103      	bne.n	80856ca <_Z10serialMenuv+0x446>
                Serial.println("Battery threshold already enabled");
 80856c2:	f004 ff4d 	bl	808a560 <_Z16_fetch_usbserialv>
 80856c6:	4982      	ldr	r1, [pc, #520]	; (80858d0 <_Z10serialMenuv+0x64c>)
 80856c8:	e7e9      	b.n	808569e <_Z10serialMenuv+0x41a>
                Serial.println("Enabling battery threshold limiting");
 80856ca:	f004 ff49 	bl	808a560 <_Z16_fetch_usbserialv>
 80856ce:	4981      	ldr	r1, [pc, #516]	; (80858d4 <_Z10serialMenuv+0x650>)
 80856d0:	f003 feed 	bl	80894ae <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 1;
 80856d4:	2301      	movs	r3, #1
                battery_threshold_enable = 0;
 80856d6:	6033      	str	r3, [r6, #0]
                EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80856d8:	f005 fa32 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80856dc:	4631      	mov	r1, r6
 80856de:	2078      	movs	r0, #120	; 0x78
 80856e0:	e6ec      	b.n	80854bc <_Z10serialMenuv+0x238>
            if (battery_threshold_enable == 0)
 80856e2:	4e7a      	ldr	r6, [pc, #488]	; (80858cc <_Z10serialMenuv+0x648>)
 80856e4:	6833      	ldr	r3, [r6, #0]
 80856e6:	b91b      	cbnz	r3, 80856f0 <_Z10serialMenuv+0x46c>
                Serial.println("Battery threshold already disabled");
 80856e8:	f004 ff3a 	bl	808a560 <_Z16_fetch_usbserialv>
 80856ec:	497a      	ldr	r1, [pc, #488]	; (80858d8 <_Z10serialMenuv+0x654>)
 80856ee:	e7d6      	b.n	808569e <_Z10serialMenuv+0x41a>
                Serial.println("Disabling battery threshold limiting");
 80856f0:	f004 ff36 	bl	808a560 <_Z16_fetch_usbserialv>
 80856f4:	4979      	ldr	r1, [pc, #484]	; (80858dc <_Z10serialMenuv+0x658>)
 80856f6:	f003 feda 	bl	80894ae <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 0;
 80856fa:	2300      	movs	r3, #0
 80856fc:	e7eb      	b.n	80856d6 <_Z10serialMenuv+0x452>
            Serial.println("Enabling low power for gps");
 80856fe:	f004 ff2f 	bl	808a560 <_Z16_fetch_usbserialv>
 8085702:	4977      	ldr	r1, [pc, #476]	; (80858e0 <_Z10serialMenuv+0x65c>)
 8085704:	f003 fed3 	bl	80894ae <_ZN5Print7printlnEPKc>
            enableLowPowerGPS();
 8085708:	f7fb fe0a 	bl	8081320 <_Z17enableLowPowerGPSv>
            break;
 808570c:	e5c2      	b.n	8085294 <_Z10serialMenuv+0x10>
            Serial.println("Turning off batfet");
 808570e:	f004 ff27 	bl	808a560 <_Z16_fetch_usbserialv>
 8085712:	4974      	ldr	r1, [pc, #464]	; (80858e4 <_Z10serialMenuv+0x660>)
 8085714:	f003 fecb 	bl	80894ae <_ZN5Print7printlnEPKc>
            writeRegister(7, 0b01101011);
 8085718:	216b      	movs	r1, #107	; 0x6b
            writeRegister(7, 0b01001011);
 808571a:	2007      	movs	r0, #7
 808571c:	f7fb fa74 	bl	8080c08 <_Z13writeRegisterhh>
            break;
 8085720:	e5b8      	b.n	8085294 <_Z10serialMenuv+0x10>
            Serial.println("Allowing batfet to turn on");
 8085722:	f004 ff1d 	bl	808a560 <_Z16_fetch_usbserialv>
 8085726:	4970      	ldr	r1, [pc, #448]	; (80858e8 <_Z10serialMenuv+0x664>)
 8085728:	f003 fec1 	bl	80894ae <_ZN5Print7printlnEPKc>
            writeRegister(7, 0b01001011);
 808572c:	214b      	movs	r1, #75	; 0x4b
 808572e:	e7f4      	b.n	808571a <_Z10serialMenuv+0x496>
            if (abc_logic_enabled)
 8085730:	4e6e      	ldr	r6, [pc, #440]	; (80858ec <_Z10serialMenuv+0x668>)
 8085732:	6833      	ldr	r3, [r6, #0]
 8085734:	b183      	cbz	r3, 8085758 <_Z10serialMenuv+0x4d4>
                Serial.println("Disabling ABC logic for CO2 sensor");
 8085736:	f004 ff13 	bl	808a560 <_Z16_fetch_usbserialv>
 808573a:	496d      	ldr	r1, [pc, #436]	; (80858f0 <_Z10serialMenuv+0x66c>)
 808573c:	f003 feb7 	bl	80894ae <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 0;
 8085740:	2300      	movs	r3, #0
 8085742:	6033      	str	r3, [r6, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8085744:	f005 f9fc 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8085748:	4631      	mov	r1, r6
 808574a:	207c      	movs	r0, #124	; 0x7c
 808574c:	f7fb f956 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
                t6713.disableABCLogic();
 8085750:	4868      	ldr	r0, [pc, #416]	; (80858f4 <_Z10serialMenuv+0x670>)
 8085752:	f000 fe8e 	bl	8086472 <_ZN13Telaire_T671315disableABCLogicEv>
 8085756:	e59d      	b.n	8085294 <_Z10serialMenuv+0x10>
                Serial.println("ABC logic already disabled");
 8085758:	f004 ff02 	bl	808a560 <_Z16_fetch_usbserialv>
 808575c:	4966      	ldr	r1, [pc, #408]	; (80858f8 <_Z10serialMenuv+0x674>)
 808575e:	e79e      	b.n	808569e <_Z10serialMenuv+0x41a>
            if (!abc_logic_enabled)
 8085760:	4e62      	ldr	r6, [pc, #392]	; (80858ec <_Z10serialMenuv+0x668>)
 8085762:	6833      	ldr	r3, [r6, #0]
 8085764:	b983      	cbnz	r3, 8085788 <_Z10serialMenuv+0x504>
                Serial.println("Enabling abc logic for CO2 sensor");
 8085766:	f004 fefb 	bl	808a560 <_Z16_fetch_usbserialv>
 808576a:	4964      	ldr	r1, [pc, #400]	; (80858fc <_Z10serialMenuv+0x678>)
 808576c:	f003 fe9f 	bl	80894ae <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 1;
 8085770:	2301      	movs	r3, #1
 8085772:	6033      	str	r3, [r6, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8085774:	f005 f9e4 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8085778:	4631      	mov	r1, r6
 808577a:	207c      	movs	r0, #124	; 0x7c
 808577c:	f7fb f93e 	bl	80809fc <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
                t6713.enableABCLogic();
 8085780:	485c      	ldr	r0, [pc, #368]	; (80858f4 <_Z10serialMenuv+0x670>)
 8085782:	f000 fe9b 	bl	80864bc <_ZN13Telaire_T671314enableABCLogicEv>
 8085786:	e585      	b.n	8085294 <_Z10serialMenuv+0x10>
                Serial.println("ABC logic already enabled");
 8085788:	f004 feea 	bl	808a560 <_Z16_fetch_usbserialv>
 808578c:	495c      	ldr	r1, [pc, #368]	; (8085900 <_Z10serialMenuv+0x67c>)
 808578e:	e786      	b.n	808569e <_Z10serialMenuv+0x41a>
            if (!hih8120_enabled)
 8085790:	4e5c      	ldr	r6, [pc, #368]	; (8085904 <_Z10serialMenuv+0x680>)
 8085792:	6833      	ldr	r3, [r6, #0]
 8085794:	b95b      	cbnz	r3, 80857ae <_Z10serialMenuv+0x52a>
                Serial.println("Enabling HIH8120 RH sensor");
 8085796:	f004 fee3 	bl	808a560 <_Z16_fetch_usbserialv>
 808579a:	495b      	ldr	r1, [pc, #364]	; (8085908 <_Z10serialMenuv+0x684>)
 808579c:	f003 fe87 	bl	80894ae <_ZN5Print7printlnEPKc>
                hih8120_enabled = 1;
 80857a0:	2301      	movs	r3, #1
                hih8120_enabled = 0;
 80857a2:	6033      	str	r3, [r6, #0]
                EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80857a4:	f005 f9cc 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80857a8:	4631      	mov	r1, r6
 80857aa:	2080      	movs	r0, #128	; 0x80
 80857ac:	e686      	b.n	80854bc <_Z10serialMenuv+0x238>
                Serial.println("Disabling HIH8120 RH sensor");
 80857ae:	f004 fed7 	bl	808a560 <_Z16_fetch_usbserialv>
 80857b2:	4956      	ldr	r1, [pc, #344]	; (808590c <_Z10serialMenuv+0x688>)
 80857b4:	f003 fe7b 	bl	80894ae <_ZN5Print7printlnEPKc>
                hih8120_enabled = 0;
 80857b8:	2300      	movs	r3, #0
 80857ba:	e7f2      	b.n	80857a2 <_Z10serialMenuv+0x51e>
            if (!CO_socket)
 80857bc:	4e54      	ldr	r6, [pc, #336]	; (8085910 <_Z10serialMenuv+0x68c>)
 80857be:	6833      	ldr	r3, [r6, #0]
 80857c0:	b95b      	cbnz	r3, 80857da <_Z10serialMenuv+0x556>
                Serial.println("Now reading CO from U20-Alpha2");
 80857c2:	f004 fecd 	bl	808a560 <_Z16_fetch_usbserialv>
 80857c6:	4953      	ldr	r1, [pc, #332]	; (8085914 <_Z10serialMenuv+0x690>)
 80857c8:	f003 fe71 	bl	80894ae <_ZN5Print7printlnEPKc>
                CO_socket = 1;
 80857cc:	2301      	movs	r3, #1
                CO_socket = 0;
 80857ce:	6033      	str	r3, [r6, #0]
                EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80857d0:	f005 f9b6 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80857d4:	4631      	mov	r1, r6
 80857d6:	2084      	movs	r0, #132	; 0x84
 80857d8:	e670      	b.n	80854bc <_Z10serialMenuv+0x238>
                Serial.println("Now reading CO from U19-Alpha1");
 80857da:	f004 fec1 	bl	808a560 <_Z16_fetch_usbserialv>
 80857de:	494e      	ldr	r1, [pc, #312]	; (8085918 <_Z10serialMenuv+0x694>)
 80857e0:	f003 fe65 	bl	80894ae <_ZN5Print7printlnEPKc>
                CO_socket = 0;
 80857e4:	2300      	movs	r3, #0
 80857e6:	e7f2      	b.n	80857ce <_Z10serialMenuv+0x54a>
            Serial.println("Reseting the CO2 sensor");
 80857e8:	f004 feba 	bl	808a560 <_Z16_fetch_usbserialv>
 80857ec:	494b      	ldr	r1, [pc, #300]	; (808591c <_Z10serialMenuv+0x698>)
 80857ee:	f003 fe5e 	bl	80894ae <_ZN5Print7printlnEPKc>
            t6713.resetSensor();
 80857f2:	4840      	ldr	r0, [pc, #256]	; (80858f4 <_Z10serialMenuv+0x670>)
 80857f4:	f000 fe18 	bl	8086428 <_ZN13Telaire_T671311resetSensorEv>
            break;
 80857f8:	e54c      	b.n	8085294 <_Z10serialMenuv+0x10>
            if (google_location_en == 1)
 80857fa:	4e49      	ldr	r6, [pc, #292]	; (8085920 <_Z10serialMenuv+0x69c>)
 80857fc:	6833      	ldr	r3, [r6, #0]
 80857fe:	2b01      	cmp	r3, #1
 8085800:	d10b      	bne.n	808581a <_Z10serialMenuv+0x596>
                Serial.println("Disabling google location services.");
 8085802:	f004 fead 	bl	808a560 <_Z16_fetch_usbserialv>
 8085806:	4947      	ldr	r1, [pc, #284]	; (8085924 <_Z10serialMenuv+0x6a0>)
 8085808:	f003 fe51 	bl	80894ae <_ZN5Print7printlnEPKc>
                google_location_en = 0;
 808580c:	2300      	movs	r3, #0
                google_location_en = 1;
 808580e:	6033      	str	r3, [r6, #0]
                EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 8085810:	f005 f996 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8085814:	4631      	mov	r1, r6
 8085816:	2088      	movs	r0, #136	; 0x88
 8085818:	e650      	b.n	80854bc <_Z10serialMenuv+0x238>
                Serial.println("Enabling google location services.");
 808581a:	f004 fea1 	bl	808a560 <_Z16_fetch_usbserialv>
 808581e:	4942      	ldr	r1, [pc, #264]	; (8085928 <_Z10serialMenuv+0x6a4>)
 8085820:	f003 fe45 	bl	80894ae <_ZN5Print7printlnEPKc>
                google_location_en = 1;
 8085824:	2301      	movs	r3, #1
 8085826:	e7f2      	b.n	808580e <_Z10serialMenuv+0x58a>
            t6713.calibrate(1);
 8085828:	2101      	movs	r1, #1
 808582a:	4832      	ldr	r0, [pc, #200]	; (80858f4 <_Z10serialMenuv+0x670>)
 808582c:	f000 fe6c 	bl	8086508 <_ZN13Telaire_T67139calibrateEi>
            co2_calibration_timer = 180;
 8085830:	22b4      	movs	r2, #180	; 0xb4
 8085832:	4b3e      	ldr	r3, [pc, #248]	; (808592c <_Z10serialMenuv+0x6a8>)
 8085834:	601a      	str	r2, [r3, #0]
            break;
 8085836:	e52d      	b.n	8085294 <_Z10serialMenuv+0x10>
            Serial.println("Getting cellular information, this may take a while...");
 8085838:	f004 fe92 	bl	808a560 <_Z16_fetch_usbserialv>
 808583c:	493c      	ldr	r1, [pc, #240]	; (8085930 <_Z10serialMenuv+0x6ac>)
 808583e:	f003 fe36 	bl	80894ae <_ZN5Print7printlnEPKc>
            Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 8085842:	a806      	add	r0, sp, #24
 8085844:	493b      	ldr	r1, [pc, #236]	; (8085934 <_Z10serialMenuv+0x6b0>)
 8085846:	f002 fced 	bl	8088224 <_ZNK19CellularHelperClass7getIMEIEv>
 808584a:	9a06      	ldr	r2, [sp, #24]
 808584c:	493a      	ldr	r1, [pc, #232]	; (8085938 <_Z10serialMenuv+0x6b4>)
 808584e:	483b      	ldr	r0, [pc, #236]	; (808593c <_Z10serialMenuv+0x6b8>)
 8085850:	f7fb f921 	bl	8080a96 <_ZNK5spark6Logger4infoEPKcz>
 8085854:	a806      	add	r0, sp, #24
 8085856:	f003 fc09 	bl	808906c <_ZN6StringD1Ev>
            Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 808585a:	a806      	add	r0, sp, #24
 808585c:	4935      	ldr	r1, [pc, #212]	; (8085934 <_Z10serialMenuv+0x6b0>)
 808585e:	f002 fcfd 	bl	808825c <_ZNK19CellularHelperClass7getIMSIEv>
 8085862:	9a06      	ldr	r2, [sp, #24]
 8085864:	4936      	ldr	r1, [pc, #216]	; (8085940 <_Z10serialMenuv+0x6bc>)
 8085866:	4835      	ldr	r0, [pc, #212]	; (808593c <_Z10serialMenuv+0x6b8>)
 8085868:	f7fb f915 	bl	8080a96 <_ZNK5spark6Logger4infoEPKcz>
 808586c:	a806      	add	r0, sp, #24
 808586e:	f003 fbfd 	bl	808906c <_ZN6StringD1Ev>
            Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 8085872:	a806      	add	r0, sp, #24
 8085874:	492f      	ldr	r1, [pc, #188]	; (8085934 <_Z10serialMenuv+0x6b0>)
 8085876:	f002 fcf7 	bl	8088268 <_ZNK19CellularHelperClass8getICCIDEv>
 808587a:	9a06      	ldr	r2, [sp, #24]
 808587c:	4931      	ldr	r1, [pc, #196]	; (8085944 <_Z10serialMenuv+0x6c0>)
 808587e:	482f      	ldr	r0, [pc, #188]	; (808593c <_Z10serialMenuv+0x6b8>)
 8085880:	f7fb f909 	bl	8080a96 <_ZNK5spark6Logger4infoEPKcz>
 8085884:	e630      	b.n	80854e8 <_Z10serialMenuv+0x264>
            serialGetLowerLimit();
 8085886:	f7ff f8b5 	bl	80849f4 <_Z19serialGetLowerLimitv>
            break;
 808588a:	e503      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialGetUpperLimit();
 808588c:	f7ff f936 	bl	8084afc <_Z19serialGetUpperLimitv>
            break;
 8085890:	e500      	b.n	8085294 <_Z10serialMenuv+0x10>
 8085892:	bf00      	nop
 8085894:	2000074c 	.word	0x2000074c
 8085898:	0808f7f8 	.word	0x0808f7f8
 808589c:	0808f819 	.word	0x0808f819
 80858a0:	0808f83d 	.word	0x0808f83d
 80858a4:	0808f860 	.word	0x0808f860
 80858a8:	20000c68 	.word	0x20000c68
 80858ac:	0808f87e 	.word	0x0808f87e
 80858b0:	20000754 	.word	0x20000754
 80858b4:	0808f8ab 	.word	0x0808f8ab
 80858b8:	0808f8d3 	.word	0x0808f8d3
 80858bc:	0808f8f7 	.word	0x0808f8f7
 80858c0:	0808f920 	.word	0x0808f920
 80858c4:	0808f2ed 	.word	0x0808f2ed
 80858c8:	0808f945 	.word	0x0808f945
 80858cc:	20000560 	.word	0x20000560
 80858d0:	0808f961 	.word	0x0808f961
 80858d4:	0808f983 	.word	0x0808f983
 80858d8:	0808f9a7 	.word	0x0808f9a7
 80858dc:	0808f9ca 	.word	0x0808f9ca
 80858e0:	0808f9ef 	.word	0x0808f9ef
 80858e4:	0808fa0a 	.word	0x0808fa0a
 80858e8:	0808fa1d 	.word	0x0808fa1d
 80858ec:	2000054c 	.word	0x2000054c
 80858f0:	0808fa38 	.word	0x0808fa38
 80858f4:	20000c58 	.word	0x20000c58
 80858f8:	0808fa5b 	.word	0x0808fa5b
 80858fc:	0808fa76 	.word	0x0808fa76
 8085900:	0808fa98 	.word	0x0808fa98
 8085904:	200006b4 	.word	0x200006b4
 8085908:	0808fab2 	.word	0x0808fab2
 808590c:	0808facd 	.word	0x0808facd
 8085910:	200002d0 	.word	0x200002d0
 8085914:	0808fae9 	.word	0x0808fae9
 8085918:	0808fb08 	.word	0x0808fb08
 808591c:	0808fb27 	.word	0x0808fb27
 8085920:	2000066c 	.word	0x2000066c
 8085924:	0808fb3f 	.word	0x0808fb3f
 8085928:	0808fb63 	.word	0x0808fb63
 808592c:	200005e0 	.word	0x200005e0
 8085930:	0808fb86 	.word	0x0808fb86
 8085934:	20000cc4 	.word	0x20000cc4
 8085938:	0808fbbd 	.word	0x0808fbbd
 808593c:	20000cd8 	.word	0x20000cd8
 8085940:	0808fbc5 	.word	0x0808fbc5
 8085944:	0808fbcd 	.word	0x0808fbcd
            Serial.print("APP Version: ");
 8085948:	f004 fe0a 	bl	808a560 <_Z16_fetch_usbserialv>
 808594c:	497b      	ldr	r1, [pc, #492]	; (8085b3c <_Z10serialMenuv+0x8b8>)
 808594e:	f003 fd9b 	bl	8089488 <_ZN5Print5printEPKc>
            Serial.println(APP_VERSION);
 8085952:	f004 fe05 	bl	808a560 <_Z16_fetch_usbserialv>
 8085956:	220a      	movs	r2, #10
 8085958:	2146      	movs	r1, #70	; 0x46
 808595a:	f7fe fc94 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
            Serial.print("Build: ");
 808595e:	f004 fdff 	bl	808a560 <_Z16_fetch_usbserialv>
 8085962:	4977      	ldr	r1, [pc, #476]	; (8085b40 <_Z10serialMenuv+0x8bc>)
 8085964:	f003 fd90 	bl	8089488 <_ZN5Print5printEPKc>
            Serial.println(BUILD_VERSION);
 8085968:	f004 fdfa 	bl	808a560 <_Z16_fetch_usbserialv>
 808596c:	220a      	movs	r2, #10
 808596e:	210d      	movs	r1, #13
 8085970:	f7fe fc89 	bl	8084286 <_ZN5Print7printlnIiLi0EEEjT_i>
            break;
 8085974:	e48e      	b.n	8085294 <_Z10serialMenuv+0x10>
            if (ozone_enabled == 0)
 8085976:	4e73      	ldr	r6, [pc, #460]	; (8085b44 <_Z10serialMenuv+0x8c0>)
 8085978:	6833      	ldr	r3, [r6, #0]
 808597a:	b95b      	cbnz	r3, 8085994 <_Z10serialMenuv+0x710>
                Serial.println("Enabling Ozone");
 808597c:	f004 fdf0 	bl	808a560 <_Z16_fetch_usbserialv>
 8085980:	4971      	ldr	r1, [pc, #452]	; (8085b48 <_Z10serialMenuv+0x8c4>)
                Serial.println("Ozone already enabled");
 8085982:	f003 fd94 	bl	80894ae <_ZN5Print7printlnEPKc>
            ozone_enabled = 1;
 8085986:	2301      	movs	r3, #1
            ozone_enabled = 0;
 8085988:	6033      	str	r3, [r6, #0]
            EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808598a:	f005 f8d9 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 808598e:	2058      	movs	r0, #88	; 0x58
 8085990:	496c      	ldr	r1, [pc, #432]	; (8085b44 <_Z10serialMenuv+0x8c0>)
 8085992:	e593      	b.n	80854bc <_Z10serialMenuv+0x238>
                Serial.println("Ozone already enabled");
 8085994:	f004 fde4 	bl	808a560 <_Z16_fetch_usbserialv>
 8085998:	496c      	ldr	r1, [pc, #432]	; (8085b4c <_Z10serialMenuv+0x8c8>)
 808599a:	e7f2      	b.n	8085982 <_Z10serialMenuv+0x6fe>
            if (ozone_enabled == 1)
 808599c:	4e69      	ldr	r6, [pc, #420]	; (8085b44 <_Z10serialMenuv+0x8c0>)
 808599e:	6833      	ldr	r3, [r6, #0]
 80859a0:	2b01      	cmp	r3, #1
 80859a2:	d106      	bne.n	80859b2 <_Z10serialMenuv+0x72e>
                Serial.println("Disabling Ozone");
 80859a4:	f004 fddc 	bl	808a560 <_Z16_fetch_usbserialv>
 80859a8:	4969      	ldr	r1, [pc, #420]	; (8085b50 <_Z10serialMenuv+0x8cc>)
                Serial.println("Ozone already disabled");
 80859aa:	f003 fd80 	bl	80894ae <_ZN5Print7printlnEPKc>
            ozone_enabled = 0;
 80859ae:	2300      	movs	r3, #0
 80859b0:	e7ea      	b.n	8085988 <_Z10serialMenuv+0x704>
                Serial.println("Ozone already disabled");
 80859b2:	f004 fdd5 	bl	808a560 <_Z16_fetch_usbserialv>
 80859b6:	4967      	ldr	r1, [pc, #412]	; (8085b54 <_Z10serialMenuv+0x8d0>)
 80859b8:	e7f7      	b.n	80859aa <_Z10serialMenuv+0x726>
            if (voc_enabled == 0)
 80859ba:	4e67      	ldr	r6, [pc, #412]	; (8085b58 <_Z10serialMenuv+0x8d4>)
 80859bc:	6833      	ldr	r3, [r6, #0]
 80859be:	b95b      	cbnz	r3, 80859d8 <_Z10serialMenuv+0x754>
                Serial.println("Enabling VOCs");
 80859c0:	f004 fdce 	bl	808a560 <_Z16_fetch_usbserialv>
 80859c4:	4965      	ldr	r1, [pc, #404]	; (8085b5c <_Z10serialMenuv+0x8d8>)
                Serial.println("VOCs already enabled");
 80859c6:	f003 fd72 	bl	80894ae <_ZN5Print7printlnEPKc>
            voc_enabled = 1;
 80859ca:	2301      	movs	r3, #1
            voc_enabled = 0;
 80859cc:	6033      	str	r3, [r6, #0]
            EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 80859ce:	f005 f8b7 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 80859d2:	205c      	movs	r0, #92	; 0x5c
 80859d4:	4960      	ldr	r1, [pc, #384]	; (8085b58 <_Z10serialMenuv+0x8d4>)
 80859d6:	e571      	b.n	80854bc <_Z10serialMenuv+0x238>
                Serial.println("VOCs already enabled");
 80859d8:	f004 fdc2 	bl	808a560 <_Z16_fetch_usbserialv>
 80859dc:	4960      	ldr	r1, [pc, #384]	; (8085b60 <_Z10serialMenuv+0x8dc>)
 80859de:	e7f2      	b.n	80859c6 <_Z10serialMenuv+0x742>
            if (voc_enabled == 1)
 80859e0:	4e5d      	ldr	r6, [pc, #372]	; (8085b58 <_Z10serialMenuv+0x8d4>)
 80859e2:	6833      	ldr	r3, [r6, #0]
 80859e4:	2b01      	cmp	r3, #1
 80859e6:	d106      	bne.n	80859f6 <_Z10serialMenuv+0x772>
                Serial.println("Disabling VOC's");
 80859e8:	f004 fdba 	bl	808a560 <_Z16_fetch_usbserialv>
 80859ec:	495d      	ldr	r1, [pc, #372]	; (8085b64 <_Z10serialMenuv+0x8e0>)
                Serial.println("VOC's already disabled");
 80859ee:	f003 fd5e 	bl	80894ae <_ZN5Print7printlnEPKc>
            voc_enabled = 0;
 80859f2:	2300      	movs	r3, #0
 80859f4:	e7ea      	b.n	80859cc <_Z10serialMenuv+0x748>
                Serial.println("VOC's already disabled");
 80859f6:	f004 fdb3 	bl	808a560 <_Z16_fetch_usbserialv>
 80859fa:	495b      	ldr	r1, [pc, #364]	; (8085b68 <_Z10serialMenuv+0x8e4>)
 80859fc:	e7f7      	b.n	80859ee <_Z10serialMenuv+0x76a>
            Serial.print("Fault: ");
 80859fe:	f004 fdaf 	bl	808a560 <_Z16_fetch_usbserialv>
 8085a02:	495a      	ldr	r1, [pc, #360]	; (8085b6c <_Z10serialMenuv+0x8e8>)
 8085a04:	f003 fd40 	bl	8089488 <_ZN5Print5printEPKc>
            fault = pmic.getFault();
 8085a08:	4859      	ldr	r0, [pc, #356]	; (8085b70 <_Z10serialMenuv+0x8ec>)
 8085a0a:	f003 f86f 	bl	8088aec <_ZN4PMIC8getFaultEv>
 8085a0e:	4680      	mov	r8, r0
            Serial.println(fault);
 8085a10:	f004 fda6 	bl	808a560 <_Z16_fetch_usbserialv>
 8085a14:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 8085a16:	220a      	movs	r2, #10
 8085a18:	4641      	mov	r1, r8
 8085a1a:	f003 fd5c 	bl	80894d6 <_ZN5Print11printNumberEmh>
        n += println();
 8085a1e:	4630      	mov	r0, r6
 8085a20:	f003 fd39 	bl	8089496 <_ZN5Print7printlnEv>
            Serial.print("System status: ");
 8085a24:	f004 fd9c 	bl	808a560 <_Z16_fetch_usbserialv>
 8085a28:	4952      	ldr	r1, [pc, #328]	; (8085b74 <_Z10serialMenuv+0x8f0>)
 8085a2a:	f003 fd2d 	bl	8089488 <_ZN5Print5printEPKc>
            systemStatus = pmic.getSystemStatus();
 8085a2e:	4850      	ldr	r0, [pc, #320]	; (8085b70 <_Z10serialMenuv+0x8ec>)
 8085a30:	f003 f859 	bl	8088ae6 <_ZN4PMIC15getSystemStatusEv>
 8085a34:	4680      	mov	r8, r0
            Serial.println(systemStatus);
 8085a36:	f004 fd93 	bl	808a560 <_Z16_fetch_usbserialv>
 8085a3a:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 8085a3c:	220a      	movs	r2, #10
 8085a3e:	4641      	mov	r1, r8
 8085a40:	f003 fd49 	bl	80894d6 <_ZN5Print11printNumberEmh>
        n += println();
 8085a44:	4630      	mov	r0, r6
 8085a46:	f003 fd26 	bl	8089496 <_ZN5Print7printlnEv>
        return n;
 8085a4a:	e423      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialIncreaseChargeCurrent();
 8085a4c:	f7fc fea8 	bl	80827a0 <_Z27serialIncreaseChargeCurrentv>
            break;
 8085a50:	e420      	b.n	8085294 <_Z10serialMenuv+0x10>
            serialIncreaseInputCurrent();
 8085a52:	f7fc fe63 	bl	808271c <_Z26serialIncreaseInputCurrentv>
            break;
 8085a56:	e41d      	b.n	8085294 <_Z10serialMenuv+0x10>
            Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 8085a58:	f004 fd82 	bl	808a560 <_Z16_fetch_usbserialv>
 8085a5c:	4946      	ldr	r1, [pc, #280]	; (8085b78 <_Z10serialMenuv+0x8f4>)
 8085a5e:	f003 fd26 	bl	80894ae <_ZN5Print7printlnEPKc>
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 8085a62:	f8df a134 	ldr.w	sl, [pc, #308]	; 8085b98 <_Z10serialMenuv+0x914>
            while (!Serial.available())
 8085a66:	f004 fd7b 	bl	808a560 <_Z16_fetch_usbserialv>
 8085a6a:	6803      	ldr	r3, [r0, #0]
 8085a6c:	691b      	ldr	r3, [r3, #16]
 8085a6e:	4798      	blx	r3
 8085a70:	2800      	cmp	r0, #0
 8085a72:	f47f ac0f 	bne.w	8085294 <_Z10serialMenuv+0x10>
                if (!bme.performReading())
 8085a76:	4628      	mov	r0, r5
 8085a78:	f002 f8e6 	bl	8087c48 <_ZN15Adafruit_BME68014performReadingEv>
 8085a7c:	b938      	cbnz	r0, 8085a8e <_Z10serialMenuv+0x80a>
                    Serial.println("Failed to read BME680");
 8085a7e:	f004 fd6f 	bl	808a560 <_Z16_fetch_usbserialv>
 8085a82:	493e      	ldr	r1, [pc, #248]	; (8085b7c <_Z10serialMenuv+0x8f8>)
    Serial.println("Exiting serial menu...");
 8085a84:	f003 fd13 	bl	80894ae <_ZN5Print7printlnEPKc>
}
 8085a88:	b00a      	add	sp, #40	; 0x28
 8085a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 8085a8e:	f004 fd67 	bl	808a560 <_Z16_fetch_usbserialv>
 8085a92:	4639      	mov	r1, r7
 8085a94:	4606      	mov	r6, r0
 8085a96:	68e8      	ldr	r0, [r5, #12]
 8085a98:	f005 ffcc 	bl	808ba34 <__aeabi_fdiv>
 8085a9c:	f005 fa68 	bl	808af70 <__aeabi_f2d>
 8085aa0:	4680      	mov	r8, r0
 8085aa2:	68a8      	ldr	r0, [r5, #8]
 8085aa4:	4689      	mov	r9, r1
 8085aa6:	f005 fa63 	bl	808af70 <__aeabi_f2d>
 8085aaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8085aae:	6868      	ldr	r0, [r5, #4]
 8085ab0:	f005 fa5e 	bl	808af70 <__aeabi_f2d>
 8085ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8085ab8:	6828      	ldr	r0, [r5, #0]
 8085aba:	f005 fa59 	bl	808af70 <__aeabi_f2d>
 8085abe:	4642      	mov	r2, r8
 8085ac0:	e9cd 0100 	strd	r0, r1, [sp]
 8085ac4:	464b      	mov	r3, r9
 8085ac6:	4651      	mov	r1, sl
 8085ac8:	4630      	mov	r0, r6
 8085aca:	f7fa ffc9 	bl	8080a60 <_ZN5Print6printfEPKcz>
            while (!Serial.available())
 8085ace:	e7ca      	b.n	8085a66 <_Z10serialMenuv+0x7e2>
            if (sensible_iot_en == 1)
 8085ad0:	4e2b      	ldr	r6, [pc, #172]	; (8085b80 <_Z10serialMenuv+0x8fc>)
 8085ad2:	6833      	ldr	r3, [r6, #0]
 8085ad4:	2b01      	cmp	r3, #1
 8085ad6:	d10b      	bne.n	8085af0 <_Z10serialMenuv+0x86c>
                Serial.println("Disabling sensible iot data push.");
 8085ad8:	f004 fd42 	bl	808a560 <_Z16_fetch_usbserialv>
 8085adc:	4929      	ldr	r1, [pc, #164]	; (8085b84 <_Z10serialMenuv+0x900>)
 8085ade:	f003 fce6 	bl	80894ae <_ZN5Print7printlnEPKc>
                sensible_iot_en = 0;
 8085ae2:	2300      	movs	r3, #0
 8085ae4:	6033      	str	r3, [r6, #0]
                EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8085ae6:	f005 f82b 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8085aea:	4631      	mov	r1, r6
 8085aec:	208c      	movs	r0, #140	; 0x8c
 8085aee:	e4e5      	b.n	80854bc <_Z10serialMenuv+0x238>
                serialSetSensibleIotEnable();
 8085af0:	f7fc ff8e 	bl	8082a10 <_Z26serialSetSensibleIotEnablev>
 8085af4:	f7ff bbce 	b.w	8085294 <_Z10serialMenuv+0x10>
            if (car_topper_power_en == 1)
 8085af8:	4e23      	ldr	r6, [pc, #140]	; (8085b88 <_Z10serialMenuv+0x904>)
 8085afa:	6833      	ldr	r3, [r6, #0]
 8085afc:	2b01      	cmp	r3, #1
 8085afe:	d10b      	bne.n	8085b18 <_Z10serialMenuv+0x894>
                car_topper_power_en = 0;
 8085b00:	2300      	movs	r3, #0
 8085b02:	6033      	str	r3, [r6, #0]
                Serial.println("Disabling car topper power.  ");
 8085b04:	f004 fd2c 	bl	808a560 <_Z16_fetch_usbserialv>
 8085b08:	4920      	ldr	r1, [pc, #128]	; (8085b8c <_Z10serialMenuv+0x908>)
                Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 8085b0a:	f003 fcd0 	bl	80894ae <_ZN5Print7printlnEPKc>
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8085b0e:	f005 f817 	bl	808ab40 <_Z21__fetch_global_EEPROMv>
 8085b12:	4631      	mov	r1, r6
 8085b14:	2090      	movs	r0, #144	; 0x90
 8085b16:	e4d1      	b.n	80854bc <_Z10serialMenuv+0x238>
                car_topper_power_en = 1;
 8085b18:	2301      	movs	r3, #1
 8085b1a:	6033      	str	r3, [r6, #0]
                Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 8085b1c:	f004 fd20 	bl	808a560 <_Z16_fetch_usbserialv>
 8085b20:	491b      	ldr	r1, [pc, #108]	; (8085b90 <_Z10serialMenuv+0x90c>)
 8085b22:	e7f2      	b.n	8085b0a <_Z10serialMenuv+0x886>
            outputCOtoPI();
 8085b24:	f7fc fcd0 	bl	80824c8 <_Z12outputCOtoPIv>
            break;
 8085b28:	f7ff bbb4 	b.w	8085294 <_Z10serialMenuv+0x10>
            outputSerialMenuOptions();
 8085b2c:	f7fd fc46 	bl	80833bc <_Z23outputSerialMenuOptionsv>
            break;
 8085b30:	f7ff bbb0 	b.w	8085294 <_Z10serialMenuv+0x10>
    Serial.println("Exiting serial menu...");
 8085b34:	f004 fd14 	bl	808a560 <_Z16_fetch_usbserialv>
 8085b38:	4916      	ldr	r1, [pc, #88]	; (8085b94 <_Z10serialMenuv+0x910>)
 8085b3a:	e7a3      	b.n	8085a84 <_Z10serialMenuv+0x800>
 8085b3c:	0808fbd6 	.word	0x0808fbd6
 8085b40:	0808f305 	.word	0x0808f305
 8085b44:	20000758 	.word	0x20000758
 8085b48:	0808fbe4 	.word	0x0808fbe4
 8085b4c:	0808fbf3 	.word	0x0808fbf3
 8085b50:	0808fc09 	.word	0x0808fc09
 8085b54:	0808fc19 	.word	0x0808fc19
 8085b58:	20000c70 	.word	0x20000c70
 8085b5c:	0808fc30 	.word	0x0808fc30
 8085b60:	0808fc3e 	.word	0x0808fc3e
 8085b64:	0808fc53 	.word	0x0808fc53
 8085b68:	0808fc63 	.word	0x0808fc63
 8085b6c:	0808fc7a 	.word	0x0808fc7a
 8085b70:	20000770 	.word	0x20000770
 8085b74:	0808fc82 	.word	0x0808fc82
 8085b78:	0808fc92 	.word	0x0808fc92
 8085b7c:	0808fccd 	.word	0x0808fccd
 8085b80:	20000c24 	.word	0x20000c24
 8085b84:	0808fd14 	.word	0x0808fd14
 8085b88:	200005dc 	.word	0x200005dc
 8085b8c:	0808fd36 	.word	0x0808fd36
 8085b90:	0808fd54 	.word	0x0808fd54
 8085b94:	0808fd9c 	.word	0x0808fd9c
 8085b98:	0808fce3 	.word	0x0808fce3

08085b9c <loop>:
{
 8085b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    measurement_number++;
 8085b9e:	4c6e      	ldr	r4, [pc, #440]	; (8085d58 <loop+0x1bc>)
 8085ba0:	2200      	movs	r2, #0
 8085ba2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8085ba6:	4b6d      	ldr	r3, [pc, #436]	; (8085d5c <loop+0x1c0>)
 8085ba8:	f005 f884 	bl	808acb4 <__adddf3>
 8085bac:	e9c4 0100 	strd	r0, r1, [r4]
    CO_float = readAlpha1();
 8085bb0:	f7fc f936 	bl	8081e20 <_Z10readAlpha1v>
    CO_float_A = readCO_A();
 8085bb4:	4b6a      	ldr	r3, [pc, #424]	; (8085d60 <loop+0x1c4>)
 8085bb6:	6018      	str	r0, [r3, #0]
    CO_float = readAlpha2();
 8085bb8:	f7fb fc8a 	bl	80814d0 <_Z10readAlpha2v>
    CO_float_B = readCO_B();
 8085bbc:	4b69      	ldr	r3, [pc, #420]	; (8085d64 <loop+0x1c8>)
 8085bbe:	6018      	str	r0, [r3, #0]
    readGpsStream();
 8085bc0:	f7fb fe1a 	bl	80817f8 <_Z13readGpsStreamv>
    readGpsStreamDate();        //get the gps date and time along with the cellular time and determine which one to output
 8085bc4:	f7fb ffa6 	bl	8081b14 <_Z17readGpsStreamDatev>
    systemTime = Time.now();
 8085bc8:	f003 ff85 	bl	8089ad6 <_ZN9TimeClass3nowEv>
 8085bcc:	4b66      	ldr	r3, [pc, #408]	; (8085d68 <loop+0x1cc>)
 8085bce:	17c1      	asrs	r1, r0, #31
 8085bd0:	e9c3 0100 	strd	r0, r1, [r3]
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8085bd4:	4b65      	ldr	r3, [pc, #404]	; (8085d6c <loop+0x1d0>)
            this->format_spec = format;
 8085bd6:	681a      	ldr	r2, [r3, #0]
 8085bd8:	4b65      	ldr	r3, [pc, #404]	; (8085d70 <loop+0x1d4>)
 8085bda:	601a      	str	r2, [r3, #0]
    getEspAQSyncData();
 8085bdc:	f7fc fafc 	bl	80821d8 <_Z16getEspAQSyncDatav>
    outputDataToESP();
 8085be0:	f7fd fe3a 	bl	8083858 <_Z15outputDataToESPv>
    if (Serial.available() > 0) 
 8085be4:	f004 fcbc 	bl	808a560 <_Z16_fetch_usbserialv>
 8085be8:	6803      	ldr	r3, [r0, #0]
 8085bea:	691b      	ldr	r3, [r3, #16]
 8085bec:	4798      	blx	r3
 8085bee:	2800      	cmp	r0, #0
 8085bf0:	dd1d      	ble.n	8085c2e <loop+0x92>
        incomingByte = Serial.read();
 8085bf2:	f004 fcb5 	bl	808a560 <_Z16_fetch_usbserialv>
 8085bf6:	6803      	ldr	r3, [r0, #0]
 8085bf8:	4c5e      	ldr	r4, [pc, #376]	; (8085d74 <loop+0x1d8>)
 8085bfa:	695b      	ldr	r3, [r3, #20]
 8085bfc:	4798      	blx	r3
        if (debugging_enabled) 
 8085bfe:	4b5e      	ldr	r3, [pc, #376]	; (8085d78 <loop+0x1dc>)
        incomingByte = Serial.read();
 8085c00:	7020      	strb	r0, [r4, #0]
        if (debugging_enabled) 
 8085c02:	681b      	ldr	r3, [r3, #0]
 8085c04:	b14b      	cbz	r3, 8085c1a <loop+0x7e>
            Serial.print("Incoming byte:");
 8085c06:	f004 fcab 	bl	808a560 <_Z16_fetch_usbserialv>
 8085c0a:	495c      	ldr	r1, [pc, #368]	; (8085d7c <loop+0x1e0>)
 8085c0c:	f003 fc3c 	bl	8089488 <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 8085c10:	f004 fca6 	bl	808a560 <_Z16_fetch_usbserialv>
 8085c14:	7821      	ldrb	r1, [r4, #0]
 8085c16:	f003 fc54 	bl	80894c2 <_ZN5Print7printlnEc>
        Serial.println(incomingByte);
 8085c1a:	f004 fca1 	bl	808a560 <_Z16_fetch_usbserialv>
 8085c1e:	7821      	ldrb	r1, [r4, #0]
 8085c20:	f003 fc4f 	bl	80894c2 <_ZN5Print7printlnEc>
        if (incomingByte == 'm') 
 8085c24:	7823      	ldrb	r3, [r4, #0]
 8085c26:	2b6d      	cmp	r3, #109	; 0x6d
 8085c28:	d101      	bne.n	8085c2e <loop+0x92>
            serialMenu();
 8085c2a:	f7ff fb2b 	bl	8085284 <_Z10serialMenuv>
    if (serial_cellular_enabled) 
 8085c2e:	4b54      	ldr	r3, [pc, #336]	; (8085d80 <loop+0x1e4>)
 8085c30:	681b      	ldr	r3, [r3, #0]
 8085c32:	2b00      	cmp	r3, #0
 8085c34:	d076      	beq.n	8085d24 <loop+0x188>
        status_word.status_int |= 0x01;
 8085c36:	4a53      	ldr	r2, [pc, #332]	; (8085d84 <loop+0x1e8>)
 8085c38:	8813      	ldrh	r3, [r2, #0]
 8085c3a:	f043 0301 	orr.w	r3, r3, #1
 8085c3e:	8013      	strh	r3, [r2, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8085c40:	f002 fe68 	bl	8088914 <spark_cloud_flag_connected>
        if (!Particle.connected() && !tried_cellular_connect) 
 8085c44:	2800      	cmp	r0, #0
 8085c46:	d143      	bne.n	8085cd0 <loop+0x134>
 8085c48:	4b4f      	ldr	r3, [pc, #316]	; (8085d88 <loop+0x1ec>)
 8085c4a:	781a      	ldrb	r2, [r3, #0]
 8085c4c:	2a00      	cmp	r2, #0
 8085c4e:	d13f      	bne.n	8085cd0 <loop+0x134>
            tried_cellular_connect = true;
 8085c50:	2201      	movs	r2, #1
            if (debugging_enabled) 
 8085c52:	4c49      	ldr	r4, [pc, #292]	; (8085d78 <loop+0x1dc>)
            tried_cellular_connect = true;
 8085c54:	701a      	strb	r2, [r3, #0]
            if (debugging_enabled) 
 8085c56:	6823      	ldr	r3, [r4, #0]
 8085c58:	b173      	cbz	r3, 8085c78 <loop+0xdc>
                Serial.println("Connecting to cellular network");
 8085c5a:	f004 fc81 	bl	808a560 <_Z16_fetch_usbserialv>
 8085c5e:	494b      	ldr	r1, [pc, #300]	; (8085d8c <loop+0x1f0>)
 8085c60:	f003 fc25 	bl	80894ae <_ZN5Print7printlnEPKc>
                writeLogFile("Connecting to cellular network");
 8085c64:	4949      	ldr	r1, [pc, #292]	; (8085d8c <loop+0x1f0>)
 8085c66:	4668      	mov	r0, sp
 8085c68:	f003 fa4a 	bl	8089100 <_ZN6StringC1EPKc>
 8085c6c:	4668      	mov	r0, sp
 8085c6e:	f7fb fd73 	bl	8081758 <_Z12writeLogFile6String>
 8085c72:	4668      	mov	r0, sp
 8085c74:	f003 f9fa 	bl	808906c <_ZN6StringD1Ev>
        network_on(*this, 0, 0, NULL);
 8085c78:	2300      	movs	r3, #0
 8085c7a:	4845      	ldr	r0, [pc, #276]	; (8085d90 <loop+0x1f4>)
 8085c7c:	461a      	mov	r2, r3
 8085c7e:	4619      	mov	r1, r3
 8085c80:	6840      	ldr	r0, [r0, #4]
 8085c82:	f002 fdf7 	bl	8088874 <network_on>
            if (debugging_enabled) 
 8085c86:	6823      	ldr	r3, [r4, #0]
 8085c88:	b173      	cbz	r3, 8085ca8 <loop+0x10c>
                Serial.println("after cellularOn");
 8085c8a:	f004 fc69 	bl	808a560 <_Z16_fetch_usbserialv>
 8085c8e:	4941      	ldr	r1, [pc, #260]	; (8085d94 <loop+0x1f8>)
 8085c90:	f003 fc0d 	bl	80894ae <_ZN5Print7printlnEPKc>
                writeLogFile("After cellularOn");
 8085c94:	4940      	ldr	r1, [pc, #256]	; (8085d98 <loop+0x1fc>)
 8085c96:	4668      	mov	r0, sp
 8085c98:	f003 fa32 	bl	8089100 <_ZN6StringC1EPKc>
 8085c9c:	4668      	mov	r0, sp
 8085c9e:	f7fb fd5b 	bl	8081758 <_Z12writeLogFile6String>
 8085ca2:	4668      	mov	r0, sp
 8085ca4:	f003 f9e2 	bl	808906c <_ZN6StringD1Ev>
        spark_cloud_flag_connect();
 8085ca8:	f002 fe2c 	bl	8088904 <spark_cloud_flag_connect>
            if (debugging_enabled)
 8085cac:	6823      	ldr	r3, [r4, #0]
 8085cae:	b193      	cbz	r3, 8085cd6 <loop+0x13a>
                Serial.println("After particle connect");
 8085cb0:	f004 fc56 	bl	808a560 <_Z16_fetch_usbserialv>
 8085cb4:	4939      	ldr	r1, [pc, #228]	; (8085d9c <loop+0x200>)
 8085cb6:	f003 fbfa 	bl	80894ae <_ZN5Print7printlnEPKc>
                writeLogFile("After particle connect");
 8085cba:	4938      	ldr	r1, [pc, #224]	; (8085d9c <loop+0x200>)
 8085cbc:	4668      	mov	r0, sp
 8085cbe:	f003 fa1f 	bl	8089100 <_ZN6StringC1EPKc>
 8085cc2:	4668      	mov	r0, sp
 8085cc4:	f7fb fd48 	bl	8081758 <_Z12writeLogFile6String>
 8085cc8:	4668      	mov	r0, sp
 8085cca:	f003 f9cf 	bl	808906c <_ZN6StringD1Ev>
 8085cce:	e002      	b.n	8085cd6 <loop+0x13a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8085cd0:	f002 fe20 	bl	8088914 <spark_cloud_flag_connected>
        else if (Particle.connected()) 
 8085cd4:	b9d0      	cbnz	r0, 8085d0c <loop+0x170>
    powerCheck.loop();
 8085cd6:	4c32      	ldr	r4, [pc, #200]	; (8085da0 <loop+0x204>)
 8085cd8:	4620      	mov	r0, r4
 8085cda:	f000 fa13 	bl	8086104 <_ZN10PowerCheck4loopEv>
    if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 8085cde:	4b31      	ldr	r3, [pc, #196]	; (8085da4 <loop+0x208>)
 8085ce0:	681b      	ldr	r3, [r3, #0]
 8085ce2:	2b01      	cmp	r3, #1
 8085ce4:	d110      	bne.n	8085d08 <loop+0x16c>
 8085ce6:	4830      	ldr	r0, [pc, #192]	; (8085da8 <loop+0x20c>)
 8085ce8:	f003 ffe0 	bl	8089cac <_ZN9FuelGauge6getSoCEv>
 8085cec:	492f      	ldr	r1, [pc, #188]	; (8085dac <loop+0x210>)
 8085cee:	f005 ff8b 	bl	808bc08 <__aeabi_fcmplt>
 8085cf2:	b148      	cbz	r0, 8085d08 <loop+0x16c>
 8085cf4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8085cf8:	b933      	cbnz	r3, 8085d08 <loop+0x16c>
        Serial.println("Going to sleep because battery is below 20% charge");
 8085cfa:	f004 fc31 	bl	808a560 <_Z16_fetch_usbserialv>
 8085cfe:	492c      	ldr	r1, [pc, #176]	; (8085db0 <loop+0x214>)
 8085d00:	f003 fbd5 	bl	80894ae <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8085d04:	f7fc fb4c 	bl	80823a0 <_Z16goToSleepBatteryv>
}
 8085d08:	b004      	add	sp, #16
 8085d0a:	bd10      	pop	{r4, pc}
            if (debugging_enabled) 
 8085d0c:	4b1a      	ldr	r3, [pc, #104]	; (8085d78 <loop+0x1dc>)
 8085d0e:	681b      	ldr	r3, [r3, #0]
 8085d10:	b123      	cbz	r3, 8085d1c <loop+0x180>
                Serial.println("setting tried_cellular_connect to false");
 8085d12:	f004 fc25 	bl	808a560 <_Z16_fetch_usbserialv>
 8085d16:	4927      	ldr	r1, [pc, #156]	; (8085db4 <loop+0x218>)
 8085d18:	f003 fbc9 	bl	80894ae <_ZN5Print7printlnEPKc>
            tried_cellular_connect = false;
 8085d1c:	2200      	movs	r2, #0
 8085d1e:	4b1a      	ldr	r3, [pc, #104]	; (8085d88 <loop+0x1ec>)
 8085d20:	701a      	strb	r2, [r3, #0]
 8085d22:	e7d8      	b.n	8085cd6 <loop+0x13a>
 8085d24:	f002 fdf6 	bl	8088914 <spark_cloud_flag_connected>
        if (Particle.connected()) 
 8085d28:	2800      	cmp	r0, #0
 8085d2a:	d0d4      	beq.n	8085cd6 <loop+0x13a>
            if (debugging_enabled) 
 8085d2c:	4b12      	ldr	r3, [pc, #72]	; (8085d78 <loop+0x1dc>)
 8085d2e:	681b      	ldr	r3, [r3, #0]
 8085d30:	b173      	cbz	r3, 8085d50 <loop+0x1b4>
                Serial.println("Disconnecting from cellular network");
 8085d32:	f004 fc15 	bl	808a560 <_Z16_fetch_usbserialv>
 8085d36:	4920      	ldr	r1, [pc, #128]	; (8085db8 <loop+0x21c>)
 8085d38:	f003 fbb9 	bl	80894ae <_ZN5Print7printlnEPKc>
                writeLogFile("Disconnecting from cellular network");
 8085d3c:	491e      	ldr	r1, [pc, #120]	; (8085db8 <loop+0x21c>)
 8085d3e:	4668      	mov	r0, sp
 8085d40:	f003 f9de 	bl	8089100 <_ZN6StringC1EPKc>
 8085d44:	4668      	mov	r0, sp
 8085d46:	f7fb fd07 	bl	8081758 <_Z12writeLogFile6String>
 8085d4a:	4668      	mov	r0, sp
 8085d4c:	f003 f98e 	bl	808906c <_ZN6StringD1Ev>
            Cellular.off();
 8085d50:	480f      	ldr	r0, [pc, #60]	; (8085d90 <loop+0x1f4>)
 8085d52:	f7fa fe93 	bl	8080a7c <_ZN5spark13CellularClass3offEv>
 8085d56:	e7be      	b.n	8085cd6 <loop+0x13a>
 8085d58:	20000740 	.word	0x20000740
 8085d5c:	3ff00000 	.word	0x3ff00000
 8085d60:	200002c0 	.word	0x200002c0
 8085d64:	200002c4 	.word	0x200002c4
 8085d68:	20000c50 	.word	0x20000c50
 8085d6c:	200000d4 	.word	0x200000d4
 8085d70:	20000ce0 	.word	0x20000ce0
 8085d74:	200006b8 	.word	0x200006b8
 8085d78:	200005e8 	.word	0x200005e8
 8085d7c:	0808fdb3 	.word	0x0808fdb3
 8085d80:	20000c28 	.word	0x20000c28
 8085d84:	20000c48 	.word	0x20000c48
 8085d88:	20000c6c 	.word	0x20000c6c
 8085d8c:	0808fdc2 	.word	0x0808fdc2
 8085d90:	2000106c 	.word	0x2000106c
 8085d94:	0808fde1 	.word	0x0808fde1
 8085d98:	0808fdf2 	.word	0x0808fdf2
 8085d9c:	0808fe03 	.word	0x0808fe03
 8085da0:	20000774 	.word	0x20000774
 8085da4:	20000560 	.word	0x20000560
 8085da8:	20000664 	.word	0x20000664
 8085dac:	41a00000 	.word	0x41a00000
 8085db0:	0808fe66 	.word	0x0808fe66
 8085db4:	0808fe1a 	.word	0x0808fe1a
 8085db8:	0808fe42 	.word	0x0808fe42

08085dbc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
}
 8085dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
 8085dbe:	2701      	movs	r7, #1
 8085dc0:	4b58      	ldr	r3, [pc, #352]	; (8085f24 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x168>)
GoogleMapsDeviceLocator locator;
 8085dc2:	4c59      	ldr	r4, [pc, #356]	; (8085f28 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x16c>)
 8085dc4:	701f      	strb	r7, [r3, #0]
 8085dc6:	4620      	mov	r0, r4
 8085dc8:	f002 f8ca 	bl	8087f60 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8085dcc:	4620      	mov	r0, r4
              error_(SYSTEM_ERROR_NONE) {
 8085dce:	2400      	movs	r4, #0
 8085dd0:	4d56      	ldr	r5, [pc, #344]	; (8085f2c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x170>)
 8085dd2:	4957      	ldr	r1, [pc, #348]	; (8085f30 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 8085dd4:	462a      	mov	r2, r5
 8085dd6:	f004 ff55 	bl	808ac84 <__aeabi_atexit>
 8085dda:	4e56      	ldr	r6, [pc, #344]	; (8085f34 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
    SleepResult() {}
 8085ddc:	4b56      	ldr	r3, [pc, #344]	; (8085f38 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
              error_(SYSTEM_ERROR_NONE) {
 8085dde:	6034      	str	r4, [r6, #0]
    SleepResult() {}
 8085de0:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
 8085de2:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
 8085de4:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
 8085de6:	2003      	movs	r0, #3
 8085de8:	f002 fcd0 	bl	808878c <set_system_mode>
SYSTEM_MODE(MANUAL);
 8085dec:	462a      	mov	r2, r5
 8085dee:	4630      	mov	r0, r6
 8085df0:	4952      	ldr	r1, [pc, #328]	; (8085f3c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)
 8085df2:	f004 ff47 	bl	808ac84 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 8085df6:	4621      	mov	r1, r4
 8085df8:	4638      	mov	r0, r7
 8085dfa:	f002 fcd7 	bl	80887ac <system_thread_set_state>
Adafruit_BME680 bme; // I2C
 8085dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8085e02:	484f      	ldr	r0, [pc, #316]	; (8085f40 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)
 8085e04:	f001 ff0e 	bl	8087c24 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 8085e08:	484e      	ldr	r0, [pc, #312]	; (8085f44 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)
 8085e0a:	f000 fb0c 	bl	8086426 <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000_1;
 8085e0e:	484e      	ldr	r0, [pc, #312]	; (8085f48 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 8085e10:	f000 f8d0 	bl	8085fb4 <_ZN8LMP91000C1Ev>
LMP91000 lmp91000_2;
 8085e14:	484d      	ldr	r0, [pc, #308]	; (8085f4c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)
 8085e16:	f000 f8cd 	bl	8085fb4 <_ZN8LMP91000C1Ev>
FuelGauge fuel;
 8085e1a:	4e4d      	ldr	r6, [pc, #308]	; (8085f50 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 8085e1c:	2149      	movs	r1, #73	; 0x49
 8085e1e:	484d      	ldr	r0, [pc, #308]	; (8085f54 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
 8085e20:	f000 fa00 	bl	8086224 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 8085e24:	214a      	movs	r1, #74	; 0x4a
 8085e26:	484c      	ldr	r0, [pc, #304]	; (8085f58 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
 8085e28:	f000 f9fc 	bl	8086224 <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 8085e2c:	4621      	mov	r1, r4
 8085e2e:	4630      	mov	r0, r6
 8085e30:	f003 fee6 	bl	8089c00 <_ZN9FuelGaugeC1Eb>
 8085e34:	4630      	mov	r0, r6
PMIC pmic;
 8085e36:	4e49      	ldr	r6, [pc, #292]	; (8085f5c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
FuelGauge fuel;
 8085e38:	462a      	mov	r2, r5
 8085e3a:	4949      	ldr	r1, [pc, #292]	; (8085f60 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
 8085e3c:	f004 ff22 	bl	808ac84 <__aeabi_atexit>
PMIC pmic;
 8085e40:	4621      	mov	r1, r4
 8085e42:	4630      	mov	r0, r6
 8085e44:	f002 fddd 	bl	8088a02 <_ZN4PMICC1Eb>
 8085e48:	4630      	mov	r0, r6
PowerCheck powerCheck;
 8085e4a:	4e46      	ldr	r6, [pc, #280]	; (8085f64 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
PMIC pmic;
 8085e4c:	462a      	mov	r2, r5
 8085e4e:	4946      	ldr	r1, [pc, #280]	; (8085f68 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
 8085e50:	f004 ff18 	bl	808ac84 <__aeabi_atexit>
PowerCheck powerCheck;
 8085e54:	4630      	mov	r0, r6
 8085e56:	f000 f93b 	bl	80860d0 <_ZN10PowerCheckC1Ev>
 8085e5a:	462a      	mov	r2, r5
 8085e5c:	4630      	mov	r0, r6
 8085e5e:	4943      	ldr	r1, [pc, #268]	; (8085f6c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 8085e60:	f004 ff10 	bl	808ac84 <__aeabi_atexit>
HIH61XX hih(0x27);
 8085e64:	2127      	movs	r1, #39	; 0x27
 8085e66:	4842      	ldr	r0, [pc, #264]	; (8085f70 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
 8085e68:	f001 ff6e 	bl	8087d48 <_ZN7HIH61XXC1Eh>
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8085e6c:	2219      	movs	r2, #25
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8085e6e:	4b41      	ldr	r3, [pc, #260]	; (8085f74 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8085e70:	4841      	ldr	r0, [pc, #260]	; (8085f78 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
 8085e72:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
  SdFat() {
 8085e76:	4a41      	ldr	r2, [pc, #260]	; (8085f7c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
  SdFile() {}
 8085e78:	4f41      	ldr	r7, [pc, #260]	; (8085f80 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
  SdFat() {
 8085e7a:	601a      	str	r2, [r3, #0]
SdFile file;
 8085e7c:	4e41      	ldr	r6, [pc, #260]	; (8085f84 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8085e7e:	4a42      	ldr	r2, [pc, #264]	; (8085f88 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
 8085e80:	71dc      	strb	r4, [r3, #7]
 8085e82:	f8a3 4440 	strh.w	r4, [r3, #1088]	; 0x440
 8085e86:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 8085e8a:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 8085e8e:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8085e92:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 8085e96:	462a      	mov	r2, r5
 8085e98:	4631      	mov	r1, r6
 8085e9a:	8104      	strh	r4, [r0, #8]
    Print() : write_error(0) {}
 8085e9c:	6044      	str	r4, [r0, #4]
  SdFile() {}
 8085e9e:	6007      	str	r7, [r0, #0]
 8085ea0:	f004 fef0 	bl	808ac84 <__aeabi_atexit>
 8085ea4:	4839      	ldr	r0, [pc, #228]	; (8085f8c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
SdFile log_file;
 8085ea6:	462a      	mov	r2, r5
 8085ea8:	4631      	mov	r1, r6
 8085eaa:	e9c0 7400 	strd	r7, r4, [r0]
 8085eae:	8104      	strh	r4, [r0, #8]
 8085eb0:	f004 fee8 	bl	808ac84 <__aeabi_atexit>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8085eb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8085eb8:	4835      	ldr	r0, [pc, #212]	; (8085f90 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
String fileName;
 8085eba:	4e36      	ldr	r6, [pc, #216]	; (8085f94 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
 8085ebc:	6083      	str	r3, [r0, #8]
  File() {}
 8085ebe:	4b36      	ldr	r3, [pc, #216]	; (8085f98 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)
 8085ec0:	4f36      	ldr	r7, [pc, #216]	; (8085f9c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 8085ec2:	6003      	str	r3, [r0, #0]
File file1;
 8085ec4:	462a      	mov	r2, r5
 8085ec6:	4936      	ldr	r1, [pc, #216]	; (8085fa0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)
 8085ec8:	8204      	strh	r4, [r0, #16]
 8085eca:	6044      	str	r4, [r0, #4]
 8085ecc:	f004 feda 	bl	808ac84 <__aeabi_atexit>
String fileName;
 8085ed0:	4c34      	ldr	r4, [pc, #208]	; (8085fa4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
 8085ed2:	4631      	mov	r1, r6
 8085ed4:	4638      	mov	r0, r7
 8085ed6:	f003 f913 	bl	8089100 <_ZN6StringC1EPKc>
 8085eda:	4638      	mov	r0, r7
String logFileName;
 8085edc:	4f32      	ldr	r7, [pc, #200]	; (8085fa8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
String fileName;
 8085ede:	462a      	mov	r2, r5
 8085ee0:	4621      	mov	r1, r4
 8085ee2:	f004 fecf 	bl	808ac84 <__aeabi_atexit>
String logFileName;
 8085ee6:	4631      	mov	r1, r6
 8085ee8:	4638      	mov	r0, r7
 8085eea:	f003 f909 	bl	8089100 <_ZN6StringC1EPKc>
 8085eee:	4638      	mov	r0, r7
String ssid;        //wifi network name
 8085ef0:	4f2e      	ldr	r7, [pc, #184]	; (8085fac <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
String logFileName;
 8085ef2:	462a      	mov	r2, r5
 8085ef4:	4621      	mov	r1, r4
 8085ef6:	f004 fec5 	bl	808ac84 <__aeabi_atexit>
String ssid;        //wifi network name
 8085efa:	4631      	mov	r1, r6
 8085efc:	4638      	mov	r0, r7
 8085efe:	f003 f8ff 	bl	8089100 <_ZN6StringC1EPKc>
 8085f02:	4638      	mov	r0, r7
String password;    //wifi network password
 8085f04:	4f2a      	ldr	r7, [pc, #168]	; (8085fb0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f4>)
String ssid;        //wifi network name
 8085f06:	462a      	mov	r2, r5
 8085f08:	4621      	mov	r1, r4
 8085f0a:	f004 febb 	bl	808ac84 <__aeabi_atexit>
String password;    //wifi network password
 8085f0e:	4631      	mov	r1, r6
 8085f10:	4638      	mov	r0, r7
 8085f12:	f003 f8f5 	bl	8089100 <_ZN6StringC1EPKc>
 8085f16:	462a      	mov	r2, r5
 8085f18:	4621      	mov	r1, r4
 8085f1a:	4638      	mov	r0, r7
}
 8085f1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
String password;    //wifi network password
 8085f20:	f004 beb0 	b.w	808ac84 <__aeabi_atexit>
 8085f24:	20000520 	.word	0x20000520
 8085f28:	200006bc 	.word	0x200006bc
 8085f2c:	200002b0 	.word	0x200002b0
 8085f30:	08087f19 	.word	0x08087f19
 8085f34:	200002fc 	.word	0x200002fc
 8085f38:	ffff0000 	.word	0xffff0000
 8085f3c:	080809ed 	.word	0x080809ed
 8085f40:	20000564 	.word	0x20000564
 8085f44:	20000c58 	.word	0x20000c58
 8085f48:	200006b9 	.word	0x200006b9
 8085f4c:	200006ba 	.word	0x200006ba
 8085f50:	20000664 	.word	0x20000664
 8085f54:	20000550 	.word	0x20000550
 8085f58:	20000556 	.word	0x20000556
 8085f5c:	20000770 	.word	0x20000770
 8085f60:	08089c1f 	.word	0x08089c1f
 8085f64:	20000774 	.word	0x20000774
 8085f68:	08088a41 	.word	0x08088a41
 8085f6c:	080860a5 	.word	0x080860a5
 8085f70:	200006a8 	.word	0x200006a8
 8085f74:	200007ac 	.word	0x200007ac
 8085f78:	200005f0 	.word	0x200005f0
 8085f7c:	0808fee4 	.word	0x0808fee4
 8085f80:	0808fecc 	.word	0x0808fecc
 8085f84:	0808095d 	.word	0x0808095d
 8085f88:	0808ff40 	.word	0x0808ff40
 8085f8c:	20000710 	.word	0x20000710
 8085f90:	2000061c 	.word	0x2000061c
 8085f94:	08090075 	.word	0x08090075
 8085f98:	0808fea4 	.word	0x0808fea4
 8085f9c:	20000650 	.word	0x20000650
 8085fa0:	0808095f 	.word	0x0808095f
 8085fa4:	0808906d 	.word	0x0808906d
 8085fa8:	20000700 	.word	0x20000700
 8085fac:	20000c38 	.word	0x20000c38
 8085fb0:	20000760 	.word	0x20000760

08085fb4 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8085fb4:	4770      	bx	lr

08085fb6 <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 8085fb6:	b510      	push	{r4, lr}
 8085fb8:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8085fba:	f004 fe13 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8085fbe:	2148      	movs	r1, #72	; 0x48
 8085fc0:	f004 fc9c 	bl	808a8fc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8085fc4:	f004 fe0e 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8085fc8:	6803      	ldr	r3, [r0, #0]
 8085fca:	4621      	mov	r1, r4
 8085fcc:	689b      	ldr	r3, [r3, #8]
 8085fce:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8085fd0:	f004 fe08 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8085fd4:	2100      	movs	r1, #0
 8085fd6:	f004 fcac 	bl	808a932 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 8085fda:	f004 fe03 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8085fde:	2301      	movs	r3, #1
 8085fe0:	2148      	movs	r1, #72	; 0x48
 8085fe2:	461a      	mov	r2, r3
 8085fe4:	f004 fc71 	bl	808a8ca <_ZN7TwoWire11requestFromEhjh>
      if(Wire.available()){
 8085fe8:	f004 fdfc 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8085fec:	6803      	ldr	r3, [r0, #0]
 8085fee:	691b      	ldr	r3, [r3, #16]
 8085ff0:	4798      	blx	r3
 8085ff2:	b128      	cbz	r0, 8086000 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8085ff4:	f004 fdf6 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8085ff8:	6803      	ldr	r3, [r0, #0]
 8085ffa:	695b      	ldr	r3, [r3, #20]
 8085ffc:	4798      	blx	r3
 8085ffe:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8086000:	bd10      	pop	{r4, pc}

08086002 <_ZN8LMP910005writeEhh>:
uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8086002:	b570      	push	{r4, r5, r6, lr}
 8086004:	4616      	mov	r6, r2
 8086006:	460c      	mov	r4, r1
 8086008:	4605      	mov	r5, r0
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 808600a:	f004 fdeb 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808600e:	2148      	movs	r1, #72	; 0x48
 8086010:	f004 fc74 	bl	808a8fc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8086014:	f004 fde6 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086018:	6803      	ldr	r3, [r0, #0]
 808601a:	4621      	mov	r1, r4
 808601c:	689b      	ldr	r3, [r3, #8]
 808601e:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8086020:	f004 fde0 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086024:	6803      	ldr	r3, [r0, #0]
 8086026:	4631      	mov	r1, r6
 8086028:	689b      	ldr	r3, [r3, #8]
 808602a:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 808602c:	f004 fdda 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086030:	2101      	movs	r1, #1
 8086032:	f004 fc7e 	bl	808a932 <_ZN7TwoWire15endTransmissionEh>
      return read(reg);
 8086036:	4621      	mov	r1, r4
 8086038:	4628      	mov	r0, r5
}
 808603a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return read(reg);
 808603e:	f7ff bfba 	b.w	8085fb6 <_ZN8LMP910004readEh>

08086042 <_ZN8LMP910006statusEv>:

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8086042:	2100      	movs	r1, #0
 8086044:	f7ff bfb7 	b.w	8085fb6 <_ZN8LMP910004readEh>

08086048 <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8086048:	2201      	movs	r2, #1
 808604a:	4611      	mov	r1, r2
 808604c:	f7ff bfd9 	b.w	8086002 <_ZN8LMP910005writeEhh>

08086050 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8086050:	2200      	movs	r2, #0
 8086052:	2101      	movs	r1, #1
 8086054:	f7ff bfd5 	b.w	8086002 <_ZN8LMP910005writeEhh>

08086058 <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8086058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808605c:	4604      	mov	r4, r0
 808605e:	4688      	mov	r8, r1
 8086060:	4617      	mov	r7, r2
 8086062:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8086064:	f7ff ffed 	bl	8086042 <_ZN8LMP910006statusEv>
 8086068:	2801      	cmp	r0, #1
 808606a:	4605      	mov	r5, r0
 808606c:	d117      	bne.n	808609e <_ZN8LMP910009configureEhhh+0x46>
            unlock();
 808606e:	4620      	mov	r0, r4
 8086070:	f7ff ffee 	bl	8086050 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8086074:	4642      	mov	r2, r8
 8086076:	2110      	movs	r1, #16
 8086078:	4620      	mov	r0, r4
 808607a:	f7ff ffc2 	bl	8086002 <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 808607e:	463a      	mov	r2, r7
 8086080:	2111      	movs	r1, #17
 8086082:	4620      	mov	r0, r4
 8086084:	f7ff ffbd 	bl	8086002 <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 8086088:	4632      	mov	r2, r6
 808608a:	2112      	movs	r1, #18
 808608c:	4620      	mov	r0, r4
 808608e:	f7ff ffb8 	bl	8086002 <_ZN8LMP910005writeEhh>
            lock();
 8086092:	4620      	mov	r0, r4
 8086094:	f7ff ffd8 	bl	8086048 <_ZN8LMP910004lockEv>
            return 1;
      }
      return 0;
}
 8086098:	4628      	mov	r0, r5
 808609a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return 0;
 808609e:	2500      	movs	r5, #0
 80860a0:	e7fa      	b.n	8086098 <_ZN8LMP910009configureEhhh+0x40>
	...

080860a4 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 80860a4:	b510      	push	{r4, lr}
 80860a6:	4604      	mov	r4, r0
 80860a8:	4b03      	ldr	r3, [pc, #12]	; (80860b8 <_ZN10PowerCheckD1Ev+0x14>)
 80860aa:	f840 3b14 	str.w	r3, [r0], #20
 80860ae:	f002 fcc7 	bl	8088a40 <_ZN4PMICD1Ev>
}
 80860b2:	4620      	mov	r0, r4
 80860b4:	bd10      	pop	{r4, pc}
 80860b6:	bf00      	nop
 80860b8:	0808ff20 	.word	0x0808ff20

080860bc <_ZN10PowerCheckD0Ev>:
PowerCheck::~PowerCheck() {
 80860bc:	b510      	push	{r4, lr}
 80860be:	4604      	mov	r4, r0
}
 80860c0:	f7ff fff0 	bl	80860a4 <_ZN10PowerCheckD1Ev>
 80860c4:	4620      	mov	r0, r4
 80860c6:	2124      	movs	r1, #36	; 0x24
 80860c8:	f004 fde1 	bl	808ac8e <_ZdlPvj>
 80860cc:	4620      	mov	r0, r4
 80860ce:	bd10      	pop	{r4, pc}

080860d0 <_ZN10PowerCheckC1Ev>:
PowerCheck::PowerCheck() {
 80860d0:	b538      	push	{r3, r4, r5, lr}
 80860d2:	4b0b      	ldr	r3, [pc, #44]	; (8086100 <_ZN10PowerCheckC1Ev+0x30>)
 80860d4:	2500      	movs	r5, #0
 80860d6:	2232      	movs	r2, #50	; 0x32
 80860d8:	6003      	str	r3, [r0, #0]
 80860da:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80860de:	4604      	mov	r4, r0
 80860e0:	e9c0 2301 	strd	r2, r3, [r0, #4]
 80860e4:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80860e8:	4629      	mov	r1, r5
 80860ea:	3014      	adds	r0, #20
 80860ec:	f002 fc89 	bl	8088a02 <_ZN4PMICC1Eb>
 80860f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}
 80860f4:	4620      	mov	r0, r4
PowerCheck::PowerCheck() {
 80860f6:	e9c4 5506 	strd	r5, r5, [r4, #24]
 80860fa:	6223      	str	r3, [r4, #32]
}
 80860fc:	bd38      	pop	{r3, r4, r5, pc}
 80860fe:	bf00      	nop
 8086100:	0808ff20 	.word	0x0808ff20

08086104 <_ZN10PowerCheck4loopEv>:

void PowerCheck::loop() {
 8086104:	b510      	push	{r4, lr}
 8086106:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8086108:	f002 f990 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 808610c:	68e3      	ldr	r3, [r4, #12]
 808610e:	1ac0      	subs	r0, r0, r3
 8086110:	6863      	ldr	r3, [r4, #4]
 8086112:	4298      	cmp	r0, r3
 8086114:	d31a      	bcc.n	808614c <_ZN10PowerCheck4loopEv+0x48>
 8086116:	f002 f989 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 808611a:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 808611c:	f104 0014 	add.w	r0, r4, #20
 8086120:	f002 fce1 	bl	8088ae6 <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8086124:	f010 0304 	ands.w	r3, r0, #4
 8086128:	d00b      	beq.n	8086142 <_ZN10PowerCheck4loopEv+0x3e>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 808612a:	f894 3020 	ldrb.w	r3, [r4, #32]
			byte chrgStat = (systemStatus >> 4) & 0x3;
 808612e:	f3c0 1001 	ubfx	r0, r0, #4, #2
			if (chrgStat != lastChrgStat) {
 8086132:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8086134:	bf1f      	itttt	ne
 8086136:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 8086138:	f884 0020 	strbne.w	r0, [r4, #32]
				changeCount++;
 808613c:	3301      	addne	r3, #1
 808613e:	61e3      	strne	r3, [r4, #28]
			}

			// We have power (USB or VIN)
			hasPower = true;
 8086140:	2301      	movs	r3, #1
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8086142:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		}

		checkCount++;
 8086146:	69a3      	ldr	r3, [r4, #24]
 8086148:	3301      	adds	r3, #1
 808614a:	61a3      	str	r3, [r4, #24]
 808614c:	f002 f96e 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8086150:	6923      	ldr	r3, [r4, #16]
 8086152:	1ac0      	subs	r0, r0, r3
 8086154:	68a3      	ldr	r3, [r4, #8]
 8086156:	4298      	cmp	r0, r3
 8086158:	d914      	bls.n	8086184 <_ZN10PowerCheck4loopEv+0x80>
 808615a:	f002 f967 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 808615e:	69a3      	ldr	r3, [r4, #24]
		lastSlowCheck = millis();
 8086160:	6120      	str	r0, [r4, #16]
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8086162:	2b0a      	cmp	r3, #10
 8086164:	dc0f      	bgt.n	8086186 <_ZN10PowerCheck4loopEv+0x82>
 8086166:	2301      	movs	r3, #1
 8086168:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 808616c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8086170:	3b01      	subs	r3, #1
 8086172:	2b01      	cmp	r3, #1
 8086174:	bf8c      	ite	hi
 8086176:	2300      	movhi	r3, #0
 8086178:	2301      	movls	r3, #1
 808617a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 808617e:	2300      	movs	r3, #0
		changeCount = 0;
 8086180:	e9c4 3306 	strd	r3, r3, [r4, #24]
	}

}
 8086184:	bd10      	pop	{r4, pc}
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8086186:	69e2      	ldr	r2, [r4, #28]
 8086188:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 808618c:	ddeb      	ble.n	8086166 <_ZN10PowerCheck4loopEv+0x62>
 808618e:	2300      	movs	r3, #0
 8086190:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8086194:	e7f1      	b.n	808617a <_ZN10PowerCheck4loopEv+0x76>

08086196 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 8086196:	b510      	push	{r4, lr}
 8086198:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 808619a:	f004 fd23 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808619e:	6803      	ldr	r3, [r0, #0]
 80861a0:	4621      	mov	r1, r4
}
 80861a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.write((uint8_t)x);
 80861a6:	689b      	ldr	r3, [r3, #8]
 80861a8:	4718      	bx	r3

080861aa <_ZL7i2creadv>:
static uint8_t i2cread(void) {
 80861aa:	b508      	push	{r3, lr}
  return Wire.read();
 80861ac:	f004 fd1a 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80861b0:	6803      	ldr	r3, [r0, #0]
 80861b2:	695b      	ldr	r3, [r3, #20]
 80861b4:	4798      	blx	r3
}
 80861b6:	b2c0      	uxtb	r0, r0
 80861b8:	bd08      	pop	{r3, pc}

080861ba <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 80861ba:	b570      	push	{r4, r5, r6, lr}
 80861bc:	4606      	mov	r6, r0
 80861be:	460d      	mov	r5, r1
 80861c0:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 80861c2:	f004 fd0f 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80861c6:	4631      	mov	r1, r6
 80861c8:	f004 fb94 	bl	808a8f4 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 80861cc:	4628      	mov	r0, r5
 80861ce:	f7ff ffe2 	bl	8086196 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 80861d2:	0a20      	lsrs	r0, r4, #8
 80861d4:	f7ff ffdf 	bl	8086196 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 80861d8:	b2e0      	uxtb	r0, r4
 80861da:	f7ff ffdc 	bl	8086196 <_ZL8i2cwriteh>
  Wire.endTransmission();
 80861de:	f004 fd01 	bl	808abe4 <_Z19__fetch_global_Wirev>
}
 80861e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 80861e6:	f004 bba8 	b.w	808a93a <_ZN7TwoWire15endTransmissionEv>

080861ea <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 80861ea:	b510      	push	{r4, lr}
 80861ec:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 80861ee:	f004 fcf9 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80861f2:	4621      	mov	r1, r4
 80861f4:	f004 fb7e 	bl	808a8f4 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 80861f8:	2000      	movs	r0, #0
 80861fa:	f7ff ffcc 	bl	8086196 <_ZL8i2cwriteh>
  Wire.endTransmission();
 80861fe:	f004 fcf1 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086202:	f004 fb9a 	bl	808a93a <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8086206:	f004 fced 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808620a:	4621      	mov	r1, r4
 808620c:	2202      	movs	r2, #2
 808620e:	f004 fb6e 	bl	808a8ee <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());  
 8086212:	f7ff ffca 	bl	80861aa <_ZL7i2creadv>
 8086216:	4604      	mov	r4, r0
 8086218:	f7ff ffc7 	bl	80861aa <_ZL7i2creadv>
 808621c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8086220:	b280      	uxth	r0, r0
 8086222:	bd10      	pop	{r4, pc}

08086224 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8086224:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8086226:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8086228:	2108      	movs	r1, #8
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 808622a:	8082      	strh	r2, [r0, #4]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 808622c:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 808622e:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 8086230:	4770      	bx	lr

08086232 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8086232:	b508      	push	{r3, lr}
  Wire.begin();
 8086234:	f004 fcd6 	bl	808abe4 <_Z19__fetch_global_Wirev>
}
 8086238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin();
 808623c:	f004 bb28 	b.w	808a890 <_ZN7TwoWire5beginEv>

08086240 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 8086240:	8081      	strh	r1, [r0, #4]
}
 8086242:	4770      	bx	lr

08086244 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8086244:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8086246:	b510      	push	{r4, lr}
 8086248:	4604      	mov	r4, r0
  if (channel > 3)
 808624a:	d822      	bhi.n	8086292 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 808624c:	2902      	cmp	r1, #2
  config |= m_gain;
 808624e:	8882      	ldrh	r2, [r0, #4]
  switch (channel)
 8086250:	d019      	beq.n	8086286 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
 8086252:	2903      	cmp	r1, #3
 8086254:	d01a      	beq.n	808628c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
 8086256:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8086258:	bf14      	ite	ne
 808625a:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 808625e:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8086262:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 8086266:	2101      	movs	r1, #1
 8086268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 808626c:	7820      	ldrb	r0, [r4, #0]
 808626e:	f7ff ffa4 	bl	80861ba <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 8086272:	7860      	ldrb	r0, [r4, #1]
 8086274:	f003 fc90 	bl	8089b98 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 8086278:	7820      	ldrb	r0, [r4, #0]
 808627a:	f7ff ffb6 	bl	80861ea <_ZL12readRegisterhh.isra.0>
 808627e:	78a3      	ldrb	r3, [r4, #2]
 8086280:	4118      	asrs	r0, r3
 8086282:	b280      	uxth	r0, r0
}
 8086284:	bd10      	pop	{r4, pc}
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8086286:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 808628a:	e7ea      	b.n	8086262 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 808628c:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 8086290:	e7e7      	b.n	8086262 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
 8086292:	2000      	movs	r0, #0
 8086294:	e7f6      	b.n	8086284 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>
	...

08086298 <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"

//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 8086298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808629c:	460e      	mov	r6, r1
 808629e:	b088      	sub	sp, #32
 80862a0:	4604      	mov	r4, r0
 80862a2:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 80862a4:	4668      	mov	r0, sp
 80862a6:	2302      	movs	r3, #2
 80862a8:	2200      	movs	r2, #0
 80862aa:	f003 f87d 	bl	80893a8 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 80862ae:	230a      	movs	r3, #10
 80862b0:	2202      	movs	r2, #2
 80862b2:	4631      	mov	r1, r6
 80862b4:	a804      	add	r0, sp, #16
 80862b6:	f003 f877 	bl	80893a8 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 80862ba:	4668      	mov	r0, sp
 80862bc:	f003 f896 	bl	80893ec <_ZNK6String5toIntEv>
 80862c0:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 80862c2:	a804      	add	r0, sp, #16
 80862c4:	f003 f892 	bl	80893ec <_ZNK6String5toIntEv>
 80862c8:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 80862ca:	4668      	mov	r0, sp
 80862cc:	f003 f88e 	bl	80893ec <_ZNK6String5toIntEv>
 80862d0:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 80862d2:	a804      	add	r0, sp, #16
 80862d4:	f003 f88f 	bl	80893f6 <_ZNK6String7toFloatEv>
 80862d8:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
 80862da:	4630      	mov	r0, r6
 80862dc:	f004 fe36 	bl	808af4c <__aeabi_i2d>
 80862e0:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 80862e2:	4640      	mov	r0, r8
    latitude = whole_part;
 80862e4:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 80862e6:	f004 fe43 	bl	808af70 <__aeabi_f2d>
    latitude += (frac_part)/60;
 80862ea:	2200      	movs	r2, #0
 80862ec:	4b0d      	ldr	r3, [pc, #52]	; (8086324 <_ZN3GPS15set_lat_decimalE6Stringc+0x8c>)
 80862ee:	f004 ffc1 	bl	808b274 <__aeabi_ddiv>
 80862f2:	460b      	mov	r3, r1
 80862f4:	4602      	mov	r2, r0
 80862f6:	4639      	mov	r1, r7
 80862f8:	4630      	mov	r0, r6
 80862fa:	f004 fcdb 	bl	808acb4 <__adddf3>
    if(nsString == 'S'){
 80862fe:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8086300:	bf0c      	ite	eq
 8086302:	2300      	moveq	r3, #0
 8086304:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    latitude += (frac_part)/60;
 8086308:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
 808630c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    String frac_str = latString.substring(2,10);
 8086310:	a804      	add	r0, sp, #16
 8086312:	f002 feab 	bl	808906c <_ZN6StringD1Ev>
    String whole_str = latString.substring(0,2);
 8086316:	4668      	mov	r0, sp
 8086318:	f002 fea8 	bl	808906c <_ZN6StringD1Ev>
    }
}
 808631c:	b008      	add	sp, #32
 808631e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086322:	bf00      	nop
 8086324:	404e0000 	.word	0x404e0000

08086328 <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8086328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808632c:	460e      	mov	r6, r1
 808632e:	b088      	sub	sp, #32
 8086330:	4604      	mov	r4, r0
 8086332:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8086334:	4668      	mov	r0, sp
 8086336:	2303      	movs	r3, #3
 8086338:	2200      	movs	r2, #0
 808633a:	f003 f835 	bl	80893a8 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 808633e:	230a      	movs	r3, #10
 8086340:	2203      	movs	r2, #3
 8086342:	4631      	mov	r1, r6
 8086344:	a804      	add	r0, sp, #16
 8086346:	f003 f82f 	bl	80893a8 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 808634a:	4668      	mov	r0, sp
 808634c:	f003 f84e 	bl	80893ec <_ZNK6String5toIntEv>
 8086350:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 8086352:	a804      	add	r0, sp, #16
 8086354:	f003 f84a 	bl	80893ec <_ZNK6String5toIntEv>
 8086358:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 808635a:	4668      	mov	r0, sp
 808635c:	f003 f846 	bl	80893ec <_ZNK6String5toIntEv>
 8086360:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8086362:	a804      	add	r0, sp, #16
 8086364:	f003 f847 	bl	80893f6 <_ZNK6String7toFloatEv>
 8086368:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
 808636a:	4630      	mov	r0, r6
 808636c:	f004 fdee 	bl	808af4c <__aeabi_i2d>
 8086370:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 8086372:	4640      	mov	r0, r8
    longitude = whole_part;
 8086374:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 8086376:	f004 fdfb 	bl	808af70 <__aeabi_f2d>
    longitude += (frac_part)/60;
 808637a:	2200      	movs	r2, #0
 808637c:	4b0c      	ldr	r3, [pc, #48]	; (80863b0 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 808637e:	f004 ff79 	bl	808b274 <__aeabi_ddiv>
 8086382:	4602      	mov	r2, r0
 8086384:	460b      	mov	r3, r1
 8086386:	4630      	mov	r0, r6
 8086388:	4639      	mov	r1, r7
 808638a:	f004 fc93 	bl	808acb4 <__adddf3>
    if(ewString == 'E'){
 808638e:	3d45      	subs	r5, #69	; 0x45
 8086390:	bf18      	it	ne
 8086392:	2501      	movne	r5, #1
    longitude += (frac_part)/60;
 8086394:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
 8086398:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    String frac_str = longString.substring(3,10);
 808639c:	a804      	add	r0, sp, #16
 808639e:	f002 fe65 	bl	808906c <_ZN6StringD1Ev>
    String whole_str = longString.substring(0,3);
 80863a2:	4668      	mov	r0, sp
 80863a4:	f002 fe62 	bl	808906c <_ZN6StringD1Ev>
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 80863a8:	b008      	add	sp, #32
 80863aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80863ae:	bf00      	nop
 80863b0:	404e0000 	.word	0x404e0000

080863b4 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 80863b4:	b510      	push	{r4, lr}
 80863b6:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 80863b8:	4608      	mov	r0, r1
 80863ba:	f003 f817 	bl	80893ec <_ZNK6String5toIntEv>
 80863be:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 80863c0:	bd10      	pop	{r4, pc}
	...

080863c4 <_ZN3GPS22set_horizontalDilutionE6String>:

void GPS::set_horizontalDilution(String hdString){
 80863c4:	b510      	push	{r4, lr}
 80863c6:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 80863c8:	4608      	mov	r0, r1
 80863ca:	f003 f814 	bl	80893f6 <_ZNK6String7toFloatEv>
    temp_float *= 10;
 80863ce:	4902      	ldr	r1, [pc, #8]	; (80863d8 <_ZN3GPS22set_horizontalDilutionE6String+0x14>)
 80863d0:	f005 fa7c 	bl	808b8cc <__aeabi_fmul>

    horizontal_dilution = temp_float;
 80863d4:	6320      	str	r0, [r4, #48]	; 0x30
}
 80863d6:	bd10      	pop	{r4, pc}
 80863d8:	41200000 	.word	0x41200000

080863dc <_ZN3GPS12get_latitudeEv>:

double GPS::get_latitude(void){
    return latitude;
}
 80863dc:	f100 0108 	add.w	r1, r0, #8
 80863e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80863e4:	4770      	bx	lr

080863e6 <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 80863e6:	f100 0110 	add.w	r1, r0, #16
 80863ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80863ee:	4770      	bx	lr

080863f0 <_ZN3GPS22get_horizontalDilutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDilution(void){
 80863f0:	b508      	push	{r3, lr}
    return horizontal_dilution;
 80863f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80863f4:	f005 fc30 	bl	808bc58 <__aeabi_f2iz>
}
 80863f8:	bd08      	pop	{r3, pc}

080863fa <_ZN3GPS17get_latitudeWholeEv>:

int16_t GPS::get_latitudeWhole(void){
    return latWhole;
}
 80863fa:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 80863fe:	4770      	bx	lr

08086400 <_ZN3GPS16get_latitudeFracEv>:
int16_t GPS::get_latitudeFrac(void){
    return latFrac;
}
 8086400:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 8086404:	4770      	bx	lr

08086406 <_ZN3GPS18get_longitudeWholeEv>:
int16_t GPS::get_longitudeWhole(void){
    return longWhole;
}
 8086406:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
 808640a:	4770      	bx	lr

0808640c <_ZN3GPS17get_longitudeFracEv>:
int16_t GPS::get_longitudeFrac(void){
    return longFrac;
}
 808640c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8086410:	4770      	bx	lr

08086412 <_ZN3GPS15get_nsIndicatorEv>:

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 8086412:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 8086416:	4770      	bx	lr

08086418 <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 8086418:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 808641c:	4770      	bx	lr

0808641e <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 808641e:	6803      	ldr	r3, [r0, #0]
 8086420:	b2c9      	uxtb	r1, r1
 8086422:	689b      	ldr	r3, [r3, #8]
 8086424:	4718      	bx	r3

08086426 <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 8086426:	4770      	bx	lr

08086428 <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 8086428:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 808642a:	f004 fbdb 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808642e:	2115      	movs	r1, #21
 8086430:	f004 fa64 	bl	808a8fc <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 8086434:	f004 fbd6 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086438:	2105      	movs	r1, #5
 808643a:	f7ff fff0 	bl	808641e <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 808643e:	f004 fbd1 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086442:	2103      	movs	r1, #3
 8086444:	f7ff ffeb 	bl	808641e <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 8086448:	f004 fbcc 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808644c:	21e8      	movs	r1, #232	; 0xe8
 808644e:	f7ff ffe6 	bl	808641e <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 8086452:	f004 fbc7 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086456:	21ff      	movs	r1, #255	; 0xff
 8086458:	f7ff ffe1 	bl	808641e <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 808645c:	f004 fbc2 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086460:	2100      	movs	r1, #0
 8086462:	f7ff ffdc 	bl	808641e <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 8086466:	f004 fbbd 	bl	808abe4 <_Z19__fetch_global_Wirev>
}
 808646a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   Wire.endTransmission();
 808646e:	f004 ba64 	b.w	808a93a <_ZN7TwoWire15endTransmissionEv>

08086472 <_ZN13Telaire_T671315disableABCLogicEv>:

void Telaire_T6713::disableABCLogic()
{
 8086472:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8086474:	f004 fbb6 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086478:	2115      	movs	r1, #21
 808647a:	f004 fa3f 	bl	808a8fc <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 808647e:	f004 fbb1 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086482:	2105      	movs	r1, #5
 8086484:	f7ff ffcb 	bl	808641e <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8086488:	f004 fbac 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808648c:	2103      	movs	r1, #3
 808648e:	f7ff ffc6 	bl	808641e <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8086492:	f004 fba7 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086496:	21ee      	movs	r1, #238	; 0xee
 8086498:	f7ff ffc1 	bl	808641e <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 808649c:	f004 fba2 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80864a0:	2100      	movs	r1, #0
 80864a2:	f7ff ffbc 	bl	808641e <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80864a6:	f004 fb9d 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80864aa:	2100      	movs	r1, #0
 80864ac:	f7ff ffb7 	bl	808641e <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80864b0:	f004 fb98 	bl	808abe4 <_Z19__fetch_global_Wirev>
}
 80864b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 80864b8:	f004 ba3f 	b.w	808a93a <_ZN7TwoWire15endTransmissionEv>

080864bc <_ZN13Telaire_T671314enableABCLogicEv>:

void Telaire_T6713::enableABCLogic()
{
 80864bc:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 80864be:	f004 fb91 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80864c2:	2115      	movs	r1, #21
 80864c4:	f004 fa1a 	bl	808a8fc <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80864c8:	f004 fb8c 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80864cc:	2105      	movs	r1, #5
 80864ce:	f7ff ffa6 	bl	808641e <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80864d2:	f004 fb87 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80864d6:	2103      	movs	r1, #3
 80864d8:	f7ff ffa1 	bl	808641e <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 80864dc:	f004 fb82 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80864e0:	21ee      	movs	r1, #238	; 0xee
 80864e2:	f7ff ff9c 	bl	808641e <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 80864e6:	f004 fb7d 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80864ea:	21ff      	movs	r1, #255	; 0xff
 80864ec:	f7ff ff97 	bl	808641e <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80864f0:	f004 fb78 	bl	808abe4 <_Z19__fetch_global_Wirev>
 80864f4:	2100      	movs	r1, #0
 80864f6:	f7ff ff92 	bl	808641e <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80864fa:	f004 fb73 	bl	808abe4 <_Z19__fetch_global_Wirev>
}
 80864fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 8086502:	f004 ba1a 	b.w	808a93a <_ZN7TwoWire15endTransmissionEv>
	...

08086508 <_ZN13Telaire_T67139calibrateEi>:


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 8086508:	b508      	push	{r3, lr}
    if(debugging){
 808650a:	b121      	cbz	r1, 8086516 <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 808650c:	f004 f828 	bl	808a560 <_Z16_fetch_usbserialv>
 8086510:	4913      	ldr	r1, [pc, #76]	; (8086560 <_ZN13Telaire_T67139calibrateEi+0x58>)
 8086512:	f002 ffcc 	bl	80894ae <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 8086516:	f004 fb65 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808651a:	2115      	movs	r1, #21
 808651c:	f004 f9ee 	bl	808a8fc <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8086520:	f004 fb60 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086524:	2105      	movs	r1, #5
 8086526:	f7ff ff7a 	bl	808641e <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808652a:	f004 fb5b 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808652e:	2103      	movs	r1, #3
 8086530:	f7ff ff75 	bl	808641e <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 8086534:	f004 fb56 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086538:	21ec      	movs	r1, #236	; 0xec
 808653a:	f7ff ff70 	bl	808641e <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 808653e:	f004 fb51 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8086542:	21ff      	movs	r1, #255	; 0xff
 8086544:	f7ff ff6b 	bl	808641e <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8086548:	f004 fb4c 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808654c:	2100      	movs	r1, #0
 808654e:	f7ff ff66 	bl	808641e <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8086552:	f004 fb47 	bl	808abe4 <_Z19__fetch_global_Wirev>
}
 8086556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 808655a:	f004 b9ee 	b.w	808a93a <_ZN7TwoWire15endTransmissionEv>
 808655e:	bf00      	nop
 8086560:	0808ff28 	.word	0x0808ff28

08086564 <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8086564:	b538      	push	{r3, r4, r5, lr}
 8086566:	4605      	mov	r5, r0
    if (base == 0) {
 8086568:	b942      	cbnz	r2, 808657c <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
 808656a:	6803      	ldr	r3, [r0, #0]
 808656c:	689b      	ldr	r3, [r3, #8]
 808656e:	4798      	blx	r3
        return printNumber(val, base) + t;
 8086570:	4604      	mov	r4, r0
        n += println();
 8086572:	4628      	mov	r0, r5
 8086574:	f002 ff8f 	bl	8089496 <_ZN5Print7printlnEv>
    }
 8086578:	4420      	add	r0, r4
 808657a:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 808657c:	b2d2      	uxtb	r2, r2
 808657e:	f002 ffaa 	bl	80894d6 <_ZN5Print11printNumberEmh>
 8086582:	e7f5      	b.n	8086570 <_ZN5Print7printlnIhLi0EEEjT_i+0xc>

08086584 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8086584:	b510      	push	{r4, lr}
 8086586:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8086588:	3028      	adds	r0, #40	; 0x28
 808658a:	f001 f9bf 	bl	808790c <_ZN8FatCache4syncEv>
 808658e:	b128      	cbz	r0, 808659c <_ZN9FatVolume9cacheSyncEv+0x18>
 8086590:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 8086594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync();
 8086598:	f001 b9b8 	b.w	808790c <_ZN8FatCache4syncEv>
  }
 808659c:	bd10      	pop	{r4, pc}

0808659e <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808659e:	1e41      	subs	r1, r0, #1
 80865a0:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
 80865a4:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80865a6:	0842      	lsrs	r2, r0, #1
 80865a8:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 80865ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80865b0:	4410      	add	r0, r2
  for (uint8_t i = 0; i < 11; i++) {
 80865b2:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80865b4:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  for (uint8_t i = 0; i < 11; i++) {
 80865b8:	d1f5      	bne.n	80865a6 <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
 80865ba:	4770      	bx	lr

080865bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 80865bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80865c0:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 80865c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80865c6:	2b20      	cmp	r3, #32
 80865c8:	d0fa      	beq.n	80865c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
 80865ca:	2400      	movs	r4, #0
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80865cc:	4d6a      	ldr	r5, [pc, #424]	; (8086778 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
  fname->lfn = path;
 80865ce:	608e      	str	r6, [r1, #8]
    c = path[len];
 80865d0:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
 80865d2:	b1c3      	cbz	r3, 8086606 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
 80865d4:	2b2f      	cmp	r3, #47	; 0x2f
 80865d6:	d016      	beq.n	8086606 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80865d8:	2b5c      	cmp	r3, #92	; 0x5c
 80865da:	d102      	bne.n	80865e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 80865dc:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
 80865de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80865e2:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 80865e6:	b2c0      	uxtb	r0, r0
 80865e8:	281d      	cmp	r0, #29
 80865ea:	d803      	bhi.n	80865f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
 80865ec:	fa25 f000 	lsr.w	r0, r5, r0
 80865f0:	07c0      	lsls	r0, r0, #31
 80865f2:	d4f3      	bmi.n	80865dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80865f4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 80865f8:	283c      	cmp	r0, #60	; 0x3c
 80865fa:	d0ef      	beq.n	80865dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
 80865fc:	3b20      	subs	r3, #32
 80865fe:	2b5e      	cmp	r3, #94	; 0x5e
 8086600:	d8ec      	bhi.n	80865dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
 8086602:	3401      	adds	r4, #1
    c = path[len];
 8086604:	e7e4      	b.n	80865d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
 8086606:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
 8086608:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 808660a:	4607      	mov	r7, r0
 808660c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8086610:	2d20      	cmp	r5, #32
 8086612:	d0fa      	beq.n	808660a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
 8086614:	2d2f      	cmp	r5, #47	; 0x2f
 8086616:	d0f8      	beq.n	808660a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
 8086618:	6017      	str	r7, [r2, #0]
  while (len) {
 808661a:	b14c      	cbz	r4, 8086630 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
 808661c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8086620:	2a2e      	cmp	r2, #46	; 0x2e
 8086622:	d001      	beq.n	8086628 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
 8086624:	2a20      	cmp	r2, #32
 8086626:	d101      	bne.n	808662c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
 8086628:	3c01      	subs	r4, #1
  while (len) {
 808662a:	e7f6      	b.n	808661a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
 808662c:	2cff      	cmp	r4, #255	; 0xff
 808662e:	dcd5      	bgt.n	80865dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
 8086630:	2020      	movs	r0, #32
  fname->len = len;
 8086632:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
 8086634:	f101 030d 	add.w	r3, r1, #13
 8086638:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
 808663c:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
 8086640:	4293      	cmp	r3, r2
 8086642:	d1fb      	bne.n	808663c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8086644:	f04f 0800 	mov.w	r8, #0
 8086648:	f816 3008 	ldrb.w	r3, [r6, r8]
 808664c:	2b2e      	cmp	r3, #46	; 0x2e
 808664e:	d001      	beq.n	8086654 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
 8086650:	2b20      	cmp	r3, #32
 8086652:	d102      	bne.n	808665a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
 8086654:	f108 0801 	add.w	r8, r8, #1
 8086658:	e7f6      	b.n	8086648 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
 808665a:	fab8 f088 	clz	r0, r8
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808665e:	1e65      	subs	r5, r4, #1
  is83 = !si;
 8086660:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8086662:	1c6b      	adds	r3, r5, #1
 8086664:	d002      	beq.n	808666c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
 8086666:	5d73      	ldrb	r3, [r6, r5]
 8086668:	2b2e      	cmp	r3, #46	; 0x2e
 808666a:	d114      	bne.n	8086696 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 808666c:	f04f 0900 	mov.w	r9, #0
 8086670:	2707      	movs	r7, #7
 8086672:	464a      	mov	r2, r9
 8086674:	46ca      	mov	sl, r9
 8086676:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
 808667a:	45a0      	cmp	r8, r4
 808667c:	da69      	bge.n	8086752 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
 808667e:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
 8086682:	2b20      	cmp	r3, #32
 8086684:	d003      	beq.n	808668e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
 8086686:	2b2e      	cmp	r3, #46	; 0x2e
 8086688:	d107      	bne.n	808669a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 808668a:	45a8      	cmp	r8, r5
 808668c:	d012      	beq.n	80866b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
 808668e:	2000      	movs	r0, #0
  for (; si < len; si++) {
 8086690:	f108 0801 	add.w	r8, r8, #1
 8086694:	e7f1      	b.n	808667a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8086696:	3d01      	subs	r5, #1
 8086698:	e7e3      	b.n	8086662 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
 808669a:	2b22      	cmp	r3, #34	; 0x22
 808669c:	d008      	beq.n	80866b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
 808669e:	2b7c      	cmp	r3, #124	; 0x7c
 80866a0:	d006      	beq.n	80866b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80866a2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80866a6:	f1bc 0f05 	cmp.w	ip, #5
 80866aa:	d80b      	bhi.n	80866c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
 80866ac:	2b2d      	cmp	r3, #45	; 0x2d
 80866ae:	d013      	beq.n	80866d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
 80866b0:	45a8      	cmp	r8, r5
 80866b2:	d15c      	bne.n	808676e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
 80866b4:	2f0a      	cmp	r7, #10
 80866b6:	d04b      	beq.n	8086750 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 80866b8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 80866ba:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 80866bc:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80866be:	f04f 0e10 	mov.w	lr, #16
 80866c2:	e7e5      	b.n	8086690 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
 80866c4:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80866c8:	f1bc 0f05 	cmp.w	ip, #5
 80866cc:	d9f0      	bls.n	80866b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
 80866ce:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 80866d2:	f1bc 0f02 	cmp.w	ip, #2
 80866d6:	d9eb      	bls.n	80866b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
 80866d8:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80866dc:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80866e0:	d8e6      	bhi.n	80866b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
 80866e2:	45a8      	cmp	r8, r5
 80866e4:	d0e6      	beq.n	80866b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
 80866e6:	42ba      	cmp	r2, r7
 80866e8:	d830      	bhi.n	808674c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
 80866ea:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80866ee:	f1bc 0f19 	cmp.w	ip, #25
 80866f2:	d81a      	bhi.n	808672a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
 80866f4:	3b20      	subs	r3, #32
        lc |= bit;
 80866f6:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
 80866fa:	b2db      	uxtb	r3, r3
        lc |= bit;
 80866fc:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
 8086700:	f102 0c01 	add.w	ip, r2, #1
 8086704:	fa5f fc8c 	uxtb.w	ip, ip
 8086708:	440a      	add	r2, r1
      if (i < 7) {
 808670a:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
 808670e:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
 8086710:	d801      	bhi.n	8086716 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
 8086712:	f881 c00c 	strb.w	ip, [r1, #12]
 8086716:	4662      	mov	r2, ip
 8086718:	e7ba      	b.n	8086690 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
 808671a:	45a8      	cmp	r8, r5
 808671c:	dc18      	bgt.n	8086750 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 808671e:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 8086720:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8086722:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8086724:	f04f 0e10 	mov.w	lr, #16
 8086728:	e7b1      	b.n	808668e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
 808672a:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 808672e:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8086732:	bf98      	it	ls
 8086734:	ea4e 0a0a 	orrls.w	sl, lr, sl
 8086738:	e7e2      	b.n	8086700 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->flags = FNAME_FLAG_LOST_CHARS;
 808673a:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
 808673c:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 808673e:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8086740:	4419      	add	r1, r3
 8086742:	237e      	movs	r3, #126	; 0x7e
 8086744:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8086746:	2331      	movs	r3, #49	; 0x31
 8086748:	738b      	strb	r3, [r1, #14]
 808674a:	e748      	b.n	80865de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
 808674c:	2f0a      	cmp	r7, #10
 808674e:	d1e4      	bne.n	808671a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
 8086750:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
 8086752:	7b4b      	ldrb	r3, [r1, #13]
 8086754:	2b20      	cmp	r3, #32
 8086756:	f43f af41 	beq.w	80865dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
 808675a:	2800      	cmp	r0, #0
 808675c:	d0ed      	beq.n	808673a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 808675e:	ea1a 0f09 	tst.w	sl, r9
 8086762:	bf18      	it	ne
 8086764:	f04f 0902 	movne.w	r9, #2
 8086768:	f881 9000 	strb.w	r9, [r1]
 808676c:	e737      	b.n	80865de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
 808676e:	42ba      	cmp	r2, r7
 8086770:	d8ec      	bhi.n	808674c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
 8086772:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
 8086774:	2000      	movs	r0, #0
 8086776:	e7c3      	b.n	8086700 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
 8086778:	31000101 	.word	0x31000101

0808677c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 808677c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8086780:	4606      	mov	r6, r0
 8086782:	460c      	mov	r4, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8086784:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8086786:	277e      	movs	r7, #126	; 0x7e
  uint8_t pos = fname->seqPos;;
 8086788:	f891 900c 	ldrb.w	r9, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 808678c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8086790:	6861      	ldr	r1, [r4, #4]
 8086792:	68a2      	ldr	r2, [r4, #8]
 8086794:	186b      	adds	r3, r5, r1
 8086796:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8086798:	4411      	add	r1, r2
 808679a:	4291      	cmp	r1, r2
 808679c:	d006      	beq.n	80867ac <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
 808679e:	f812 0b01 	ldrb.w	r0, [r2], #1
 80867a2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80867a6:	4043      	eors	r3, r0
 80867a8:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 80867aa:	e7f6      	b.n	808679a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
 80867ac:	f1b9 0f03 	cmp.w	r9, #3
 80867b0:	bf28      	it	cs
 80867b2:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80867b6:	f109 0204 	add.w	r2, r9, #4
 80867ba:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 80867bc:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80867c0:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80867c2:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80867c4:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80867c6:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80867c8:	bf94      	ite	ls
 80867ca:	3130      	addls	r1, #48	; 0x30
 80867cc:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80867ce:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80867d0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 80867d2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80867d6:	d1f1      	bne.n	80867bc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
 80867d8:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
 80867dc:	2100      	movs	r1, #0
 80867de:	4630      	mov	r0, r6
 80867e0:	735f      	strb	r7, [r3, #13]
 80867e2:	f000 fe96 	bl	8087512 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 80867e6:	2101      	movs	r1, #1
 80867e8:	4630      	mov	r0, r6
 80867ea:	f000 fe73 	bl	80874d4 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80867ee:	4601      	mov	r1, r0
 80867f0:	b928      	cbnz	r0, 80867fe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80867f2:	7870      	ldrb	r0, [r6, #1]
 80867f4:	fab0 f080 	clz	r0, r0
 80867f8:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 80867fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
 80867fe:	7803      	ldrb	r3, [r0, #0]
 8086800:	b16b      	cbz	r3, 808681e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8086802:	7ac3      	ldrb	r3, [r0, #11]
 8086804:	071b      	lsls	r3, r3, #28
 8086806:	d4ee      	bmi.n	80867e6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8086808:	220b      	movs	r2, #11
 808680a:	4640      	mov	r0, r8
 808680c:	f005 fb56 	bl	808bebc <memcmp>
 8086810:	2800      	cmp	r0, #0
 8086812:	d1e8      	bne.n	80867e6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
 8086814:	3501      	adds	r5, #1
 8086816:	b2ad      	uxth	r5, r5
 8086818:	2d64      	cmp	r5, #100	; 0x64
 808681a:	d1b9      	bne.n	8086790 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 808681c:	e7ed      	b.n	80867fa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
 808681e:	2001      	movs	r0, #1
 8086820:	e7eb      	b.n	80867fa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

08086824 <_ZN7FatFile4openEPS_P7fname_th>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8086824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086828:	b089      	sub	sp, #36	; 0x24
 808682a:	9304      	str	r3, [sp, #16]
  if (!dirFile->isDir() || isOpen()) {
 808682c:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 808682e:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 8086830:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8086834:	4690      	mov	r8, r2
 8086836:	9005      	str	r0, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
 8086838:	d103      	bne.n	8086842 <_ZN7FatFile4openEPS_P7fname_th+0x1e>
  return false;
 808683a:	2000      	movs	r0, #0
}
 808683c:	b009      	add	sp, #36	; 0x24
 808683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
 8086842:	9b05      	ldr	r3, [sp, #20]
 8086844:	781b      	ldrb	r3, [r3, #0]
 8086846:	2b00      	cmp	r3, #0
 8086848:	d1f7      	bne.n	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  size_t len = fname->len;
 808684a:	6853      	ldr	r3, [r2, #4]
 808684c:	4628      	mov	r0, r5
 808684e:	9303      	str	r3, [sp, #12]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8086850:	7813      	ldrb	r3, [r2, #0]
 8086852:	0799      	lsls	r1, r3, #30
 8086854:	bf18      	it	ne
 8086856:	9b03      	ldrne	r3, [sp, #12]
 8086858:	f04f 0100 	mov.w	r1, #0
 808685c:	bf1f      	itttt	ne
 808685e:	f103 070c 	addne.w	r7, r3, #12
 8086862:	230d      	movne	r3, #13
 8086864:	fbb7 f7f3 	udivne	r7, r7, r3
 8086868:	3701      	addne	r7, #1
 808686a:	bf0c      	ite	eq
 808686c:	2701      	moveq	r7, #1
 808686e:	b2ff      	uxtbne	r7, r7
 8086870:	f000 fe4f 	bl	8087512 <_ZN7FatFile7seekSetEm>
  }
 8086874:	2300      	movs	r3, #0
 8086876:	469b      	mov	fp, r3
 8086878:	461c      	mov	r4, r3
 808687a:	461e      	mov	r6, r3
 808687c:	469a      	mov	sl, r3
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808687e:	f108 020d 	add.w	r2, r8, #13
 8086882:	9302      	str	r3, [sp, #8]
 8086884:	9207      	str	r2, [sp, #28]
    curIndex = dirFile->m_curPosition/32;
 8086886:	696a      	ldr	r2, [r5, #20]
    dir = dirFile->readDirCache(true);
 8086888:	2101      	movs	r1, #1
 808688a:	4628      	mov	r0, r5
 808688c:	9306      	str	r3, [sp, #24]
    curIndex = dirFile->m_curPosition/32;
 808688e:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8086892:	f000 fe1f 	bl	80874d4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8086896:	9b06      	ldr	r3, [sp, #24]
 8086898:	2800      	cmp	r0, #0
 808689a:	d16c      	bne.n	8086976 <_ZN7FatFile4openEPS_P7fname_th+0x152>
      if (dirFile->getError()) {
 808689c:	786b      	ldrb	r3, [r5, #1]
 808689e:	2b00      	cmp	r3, #0
 80868a0:	d1cb      	bne.n	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 80868a2:	9b04      	ldr	r3, [sp, #16]
 80868a4:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80868a8:	2b42      	cmp	r3, #66	; 0x42
 80868aa:	d1c6      	bne.n	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (freeFound == 0) {
 80868ac:	9b02      	ldr	r3, [sp, #8]
 80868ae:	2c00      	cmp	r4, #0
 80868b0:	bf08      	it	eq
 80868b2:	464b      	moveq	r3, r9
 80868b4:	9302      	str	r3, [sp, #8]
  while (freeFound < freeNeed) {
 80868b6:	42bc      	cmp	r4, r7
 80868b8:	f0c0 8103 	bcc.w	8086ac2 <_ZN7FatFile4openEPS_P7fname_th+0x29e>
  if (fnameFound) {
 80868bc:	f1ba 0f00 	cmp.w	sl, #0
 80868c0:	f040 811b 	bne.w	8086afa <_ZN7FatFile4openEPS_P7fname_th+0x2d6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
 80868c4:	9b02      	ldr	r3, [sp, #8]
 80868c6:	4628      	mov	r0, r5
 80868c8:	0159      	lsls	r1, r3, #5
 80868ca:	f000 fe22 	bl	8087512 <_ZN7FatFile7seekSetEm>
 80868ce:	2800      	cmp	r0, #0
 80868d0:	d0b3      	beq.n	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  lfnOrd = freeNeed - 1;
 80868d2:	3f01      	subs	r7, #1
 80868d4:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80868d8:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80868da:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
 80868de:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80868e0:	2e00      	cmp	r6, #0
 80868e2:	f000 8121 	beq.w	8086b28 <_ZN7FatFile4openEPS_P7fname_th+0x304>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80868e6:	2100      	movs	r1, #0
 80868e8:	4628      	mov	r0, r5
 80868ea:	f000 fdf3 	bl	80874d4 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 80868ee:	4604      	mov	r4, r0
 80868f0:	2800      	cmp	r0, #0
 80868f2:	d0a2      	beq.n	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80868f4:	4556      	cmp	r6, sl
 80868f6:	bf18      	it	ne
 80868f8:	46b3      	movne	fp, r6
    dirFile->m_vol->cacheDirty();
 80868fa:	68aa      	ldr	r2, [r5, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80868fc:	bf08      	it	eq
 80868fe:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
    m_status |= CACHE_STATUS_DIRTY;
 8086902:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8086906:	f043 0301 	orr.w	r3, r3, #1
 808690a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 808690e:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8086912:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
 8086914:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8086918:	f108 000d 	add.w	r0, r8, #13
 808691c:	f7ff fe3f 	bl	808659e <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8086920:	220d      	movs	r2, #13
 8086922:	2300      	movs	r3, #0
 8086924:	f00b 0b1f 	and.w	fp, fp, #31
 8086928:	f10b 3bff 	add.w	fp, fp, #4294967295
 808692c:	fb02 f20b 	mul.w	r2, r2, fp
    ldir->chksum = lfnChecksum(fname->sfn);
 8086930:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
 8086932:	f884 901a 	strb.w	r9, [r4, #26]
 8086936:	f884 901b 	strb.w	r9, [r4, #27]
    lfnPutName(ldir, fname->lfn, len);
 808693a:	f8d8 c008 	ldr.w	ip, [r8, #8]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 808693e:	9903      	ldr	r1, [sp, #12]
 8086940:	4291      	cmp	r1, r2
 8086942:	f240 80e2 	bls.w	8086b0a <_ZN7FatFile4openEPS_P7fname_th+0x2e6>
 8086946:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
 808694a:	2b04      	cmp	r3, #4
 808694c:	fa5f fe83 	uxtb.w	lr, r3
 8086950:	f103 0001 	add.w	r0, r3, #1
 8086954:	f200 80df 	bhi.w	8086b16 <_ZN7FatFile4openEPS_P7fname_th+0x2f2>
    ldir->name1[i] = c;
 8086958:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 808695c:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
 8086960:	280d      	cmp	r0, #13
 8086962:	4603      	mov	r3, r0
 8086964:	f102 0201 	add.w	r2, r2, #1
 8086968:	d1e9      	bne.n	808693e <_ZN7FatFile4openEPS_P7fname_th+0x11a>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 808696a:	3e01      	subs	r6, #1
 808696c:	b2f6      	uxtb	r6, r6
 808696e:	e7b7      	b.n	80868e0 <_ZN7FatFile4openEPS_P7fname_th+0xbc>
        fnameFound = true;
 8086970:	f04f 0a01 	mov.w	sl, #1
 8086974:	e787      	b.n	8086886 <_ZN7FatFile4openEPS_P7fname_th+0x62>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8086976:	7802      	ldrb	r2, [r0, #0]
 8086978:	2ae5      	cmp	r2, #229	; 0xe5
 808697a:	d000      	beq.n	808697e <_ZN7FatFile4openEPS_P7fname_th+0x15a>
 808697c:	b97a      	cbnz	r2, 808699e <_ZN7FatFile4openEPS_P7fname_th+0x17a>
    curIndex = dirFile->m_curPosition/32;
 808697e:	9902      	ldr	r1, [sp, #8]
 8086980:	2c00      	cmp	r4, #0
 8086982:	bf08      	it	eq
 8086984:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
 8086986:	42bc      	cmp	r4, r7
        freeFound++;
 8086988:	bf38      	it	cc
 808698a:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
 808698c:	9102      	str	r1, [sp, #8]
        freeFound++;
 808698e:	bf38      	it	cc
 8086990:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
 8086992:	2a00      	cmp	r2, #0
 8086994:	d085      	beq.n	80868a2 <_ZN7FatFile4openEPS_P7fname_th+0x7e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8086996:	2ae5      	cmp	r2, #229	; 0xe5
 8086998:	d104      	bne.n	80869a4 <_ZN7FatFile4openEPS_P7fname_th+0x180>
      lfnOrd = 0;
 808699a:	2600      	movs	r6, #0
 808699c:	e773      	b.n	8086886 <_ZN7FatFile4openEPS_P7fname_th+0x62>
        freeFound = 0;
 808699e:	42bc      	cmp	r4, r7
 80869a0:	bf38      	it	cc
 80869a2:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80869a4:	2a2e      	cmp	r2, #46	; 0x2e
 80869a6:	d0f8      	beq.n	808699a <_ZN7FatFile4openEPS_P7fname_th+0x176>
    } else if (DIR_IS_LONG_NAME(dir)) {
 80869a8:	7ac1      	ldrb	r1, [r0, #11]
 80869aa:	290f      	cmp	r1, #15
 80869ac:	d15d      	bne.n	8086a6a <_ZN7FatFile4openEPS_P7fname_th+0x246>
      if (!lfnOrd) {
 80869ae:	bb3e      	cbnz	r6, 8086a00 <_ZN7FatFile4openEPS_P7fname_th+0x1dc>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80869b0:	f012 0640 	ands.w	r6, r2, #64	; 0x40
 80869b4:	f43f af67 	beq.w	8086886 <_ZN7FatFile4openEPS_P7fname_th+0x62>
        lfnOrd = ord = ldir->ord & 0X1F;
 80869b8:	f002 061f 	and.w	r6, r2, #31
 80869bc:	46b3      	mov	fp, r6
        chksum = ldir->chksum;
 80869be:	7b43      	ldrb	r3, [r0, #13]
      size_t k = 13*(ord - 1);
 80869c0:	f04f 0e0d 	mov.w	lr, #13
 80869c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80869c8:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
 80869cc:	9a03      	ldr	r2, [sp, #12]
 80869ce:	4572      	cmp	r2, lr
 80869d0:	d9e3      	bls.n	808699a <_ZN7FatFile4openEPS_P7fname_th+0x176>
 80869d2:	f04f 0c00 	mov.w	ip, #0
 80869d6:	eba2 020e 	sub.w	r2, r2, lr
 80869da:	9206      	str	r2, [sp, #24]
  if (i < LDIR_NAME1_DIM) {
 80869dc:	f1bc 0f04 	cmp.w	ip, #4
 80869e0:	eb0c 090e 	add.w	r9, ip, lr
 80869e4:	fa5f f28c 	uxtb.w	r2, ip
 80869e8:	d814      	bhi.n	8086a14 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
    return ldir->name1[i];
 80869ea:	eb00 024c 	add.w	r2, r0, ip, lsl #1
 80869ee:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
 80869f2:	9906      	ldr	r1, [sp, #24]
 80869f4:	458c      	cmp	ip, r1
 80869f6:	d11b      	bne.n	8086a30 <_ZN7FatFile4openEPS_P7fname_th+0x20c>
            lfnOrd = 0;
 80869f8:	2a00      	cmp	r2, #0
 80869fa:	bf18      	it	ne
 80869fc:	2600      	movne	r6, #0
 80869fe:	e742      	b.n	8086886 <_ZN7FatFile4openEPS_P7fname_th+0x62>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8086a00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8086a04:	fa5f fb8b 	uxtb.w	fp, fp
 8086a08:	455a      	cmp	r2, fp
 8086a0a:	d1c6      	bne.n	808699a <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8086a0c:	7b42      	ldrb	r2, [r0, #13]
 8086a0e:	429a      	cmp	r2, r3
 8086a10:	d0d6      	beq.n	80869c0 <_ZN7FatFile4openEPS_P7fname_th+0x19c>
 8086a12:	e7c2      	b.n	808699a <_ZN7FatFile4openEPS_P7fname_th+0x176>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8086a14:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8086a16:	bf95      	itete	ls
 8086a18:	f10c 32ff 	addls.w	r2, ip, #4294967295
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8086a1c:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8086a20:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8086a24:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 8086a28:	bf94      	ite	ls
 8086a2a:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8086a2c:	8892      	ldrhhi	r2, [r2, #4]
 8086a2e:	e7e0      	b.n	80869f2 <_ZN7FatFile4openEPS_P7fname_th+0x1ce>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086a30:	2aff      	cmp	r2, #255	; 0xff
 8086a32:	d8b2      	bhi.n	808699a <_ZN7FatFile4openEPS_P7fname_th+0x176>
 8086a34:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8086a36:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8086a3a:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086a3c:	f8d8 1008 	ldr.w	r1, [r8, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8086a40:	bf98      	it	ls
 8086a42:	3220      	addls	r2, #32
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086a44:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8086a48:	bf98      	it	ls
 8086a4a:	b2d2      	uxtbls	r2, r2
 8086a4c:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
 8086a50:	f1b9 0f19 	cmp.w	r9, #25
 8086a54:	bf9c      	itt	ls
 8086a56:	3120      	addls	r1, #32
 8086a58:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086a5a:	4291      	cmp	r1, r2
 8086a5c:	d19d      	bne.n	808699a <_ZN7FatFile4openEPS_P7fname_th+0x176>
      for (uint8_t i = 0; i < 13; i++) {
 8086a5e:	f10c 0c01 	add.w	ip, ip, #1
 8086a62:	f1bc 0f0d 	cmp.w	ip, #13
 8086a66:	d1b9      	bne.n	80869dc <_ZN7FatFile4openEPS_P7fname_th+0x1b8>
 8086a68:	e70d      	b.n	8086886 <_ZN7FatFile4openEPS_P7fname_th+0x62>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8086a6a:	070a      	lsls	r2, r1, #28
 8086a6c:	d495      	bmi.n	808699a <_ZN7FatFile4openEPS_P7fname_th+0x176>
      if (lfnOrd) {
 8086a6e:	b166      	cbz	r6, 8086a8a <_ZN7FatFile4openEPS_P7fname_th+0x266>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8086a70:	f1bb 0f01 	cmp.w	fp, #1
 8086a74:	9302      	str	r3, [sp, #8]
 8086a76:	f47f aee0 	bne.w	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8086a7a:	f7ff fd90 	bl	808659e <_ZN7FatFile11lfnChecksumEPh>
 8086a7e:	9b02      	ldr	r3, [sp, #8]
 8086a80:	4298      	cmp	r0, r3
 8086a82:	f47f aeda 	bne.w	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8086a86:	46b2      	mov	sl, r6
 8086a88:	e00e      	b.n	8086aa8 <_ZN7FatFile4openEPS_P7fname_th+0x284>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8086a8a:	220b      	movs	r2, #11
 8086a8c:	9907      	ldr	r1, [sp, #28]
 8086a8e:	9306      	str	r3, [sp, #24]
 8086a90:	f005 fa14 	bl	808bebc <memcmp>
 8086a94:	9b06      	ldr	r3, [sp, #24]
 8086a96:	2800      	cmp	r0, #0
 8086a98:	f47f aef5 	bne.w	8086886 <_ZN7FatFile4openEPS_P7fname_th+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8086a9c:	f898 a000 	ldrb.w	sl, [r8]
 8086aa0:	f01a 0a01 	ands.w	sl, sl, #1
 8086aa4:	f47f af64 	bne.w	8086970 <_ZN7FatFile4openEPS_P7fname_th+0x14c>
  if (oflag & O_EXCL) {
 8086aa8:	9b04      	ldr	r3, [sp, #16]
 8086aaa:	061b      	lsls	r3, r3, #24
 8086aac:	f53f aec5 	bmi.w	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8086ab0:	464a      	mov	r2, r9
 8086ab2:	4629      	mov	r1, r5
 8086ab4:	9b04      	ldr	r3, [sp, #16]
 8086ab6:	9805      	ldr	r0, [sp, #20]
 8086ab8:	f8cd a000 	str.w	sl, [sp]
 8086abc:	f000 fd6c 	bl	8087598 <_ZN7FatFile15openCachedEntryEPS_thh>
 8086ac0:	e6bc      	b.n	808683c <_ZN7FatFile4openEPS_P7fname_th+0x18>
    dir = dirFile->readDirCache();
 8086ac2:	2100      	movs	r1, #0
 8086ac4:	4628      	mov	r0, r5
 8086ac6:	f000 fd05 	bl	80874d4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8086aca:	b998      	cbnz	r0, 8086af4 <_ZN7FatFile4openEPS_P7fname_th+0x2d0>
      if (dirFile->getError()) {
 8086acc:	786b      	ldrb	r3, [r5, #1]
 8086ace:	2b00      	cmp	r3, #0
 8086ad0:	f47f aeb3 	bne.w	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (!dirFile->addDirCluster()) {
 8086ad4:	4628      	mov	r0, r5
 8086ad6:	f000 fbd5 	bl	8087284 <_ZN7FatFile13addDirClusterEv>
 8086ada:	2800      	cmp	r0, #0
 8086adc:	f43f aead 	beq.w	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8086ae0:	68ab      	ldr	r3, [r5, #8]
 8086ae2:	791b      	ldrb	r3, [r3, #4]
 8086ae4:	2b01      	cmp	r3, #1
 8086ae6:	f63f aee9 	bhi.w	80868bc <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound += 16;
 8086aea:	3410      	adds	r4, #16
 8086aec:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8086aee:	42a7      	cmp	r7, r4
 8086af0:	d8f0      	bhi.n	8086ad4 <_ZN7FatFile4openEPS_P7fname_th+0x2b0>
 8086af2:	e6e3      	b.n	80868bc <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound++;
 8086af4:	3401      	adds	r4, #1
 8086af6:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8086af8:	e6dd      	b.n	80868b6 <_ZN7FatFile4openEPS_P7fname_th+0x92>
    if (!dirFile->lfnUniqueSfn(fname)) {
 8086afa:	4641      	mov	r1, r8
 8086afc:	4628      	mov	r0, r5
 8086afe:	f7ff fe3d 	bl	808677c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8086b02:	2800      	cmp	r0, #0
 8086b04:	f47f aede 	bne.w	80868c4 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8086b08:	e697      	b.n	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8086b0a:	bf14      	ite	ne
 8086b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8086b10:	2100      	moveq	r1, #0
 8086b12:	b289      	uxth	r1, r1
 8086b14:	e719      	b.n	808694a <_ZN7FatFile4openEPS_P7fname_th+0x126>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8086b16:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8086b1a:	bf94      	ite	ls
 8086b1c:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8086b20:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
 8086b24:	8099      	strh	r1, [r3, #4]
 8086b26:	e71b      	b.n	8086960 <_ZN7FatFile4openEPS_P7fname_th+0x13c>
  dir = dirFile->readDirCache();
 8086b28:	4631      	mov	r1, r6
 8086b2a:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
 8086b2c:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
 8086b2e:	f000 fcd1 	bl	80874d4 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8086b32:	4604      	mov	r4, r0
 8086b34:	2800      	cmp	r0, #0
 8086b36:	f43f ae80 	beq.w	808683a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  memset(dir, 0, sizeof(dir_t));
 8086b3a:	2220      	movs	r2, #32
 8086b3c:	4631      	mov	r1, r6
 8086b3e:	f005 f9d9 	bl	808bef4 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8086b42:	4643      	mov	r3, r8
 8086b44:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8086b48:	6022      	str	r2, [r4, #0]
 8086b4a:	685a      	ldr	r2, [r3, #4]
 8086b4c:	6062      	str	r2, [r4, #4]
 8086b4e:	891a      	ldrh	r2, [r3, #8]
 8086b50:	8122      	strh	r2, [r4, #8]
 8086b52:	7a9b      	ldrb	r3, [r3, #10]
 8086b54:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8086b56:	f898 3000 	ldrb.w	r3, [r8]
 8086b5a:	f003 0318 	and.w	r3, r3, #24
 8086b5e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
 8086b60:	4b0f      	ldr	r3, [pc, #60]	; (8086ba0 <_ZN7FatFile4openEPS_P7fname_th+0x37c>)
 8086b62:	681b      	ldr	r3, [r3, #0]
 8086b64:	b19b      	cbz	r3, 8086b8e <_ZN7FatFile4openEPS_P7fname_th+0x36a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8086b66:	f104 010e 	add.w	r1, r4, #14
 8086b6a:	f104 0010 	add.w	r0, r4, #16
 8086b6e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
 8086b70:	8a23      	ldrh	r3, [r4, #16]
  curIndex = dirFile->m_curPosition/32;
 8086b72:	f3c7 194f 	ubfx	r9, r7, #5, #16
  dir->lastAccessDate = dir->creationDate;
 8086b76:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
 8086b78:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
 8086b7a:	89e3      	ldrh	r3, [r4, #14]
 8086b7c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
 8086b7e:	68aa      	ldr	r2, [r5, #8]
 8086b80:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8086b84:	f043 0301 	orr.w	r3, r3, #1
 8086b88:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
 8086b8c:	e790      	b.n	8086ab0 <_ZN7FatFile4openEPS_P7fname_th+0x28c>
    dir->creationDate = FAT_DEFAULT_DATE;
 8086b8e:	2321      	movs	r3, #33	; 0x21
 8086b90:	7423      	strb	r3, [r4, #16]
 8086b92:	2328      	movs	r3, #40	; 0x28
 8086b94:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8086b96:	2308      	movs	r3, #8
 8086b98:	73a6      	strb	r6, [r4, #14]
 8086b9a:	73e3      	strb	r3, [r4, #15]
 8086b9c:	e7e8      	b.n	8086b70 <_ZN7FatFile4openEPS_P7fname_th+0x34c>
 8086b9e:	bf00      	nop
 8086ba0:	20000cb8 	.word	0x20000cb8

08086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8086ba4:	6803      	ldr	r3, [r0, #0]
 8086ba6:	68db      	ldr	r3, [r3, #12]
 8086ba8:	4718      	bx	r3

08086baa <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8086baa:	6803      	ldr	r3, [r0, #0]
 8086bac:	695b      	ldr	r3, [r3, #20]
 8086bae:	4718      	bx	r3

08086bb0 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8086bb0:	b510      	push	{r4, lr}
  if (!m_selected) {
 8086bb2:	7903      	ldrb	r3, [r0, #4]
void SdSpiCard::chipSelectHigh() {
 8086bb4:	4604      	mov	r4, r0
  if (!m_selected) {
 8086bb6:	b16b      	cbz	r3, 8086bd4 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8086bb8:	2101      	movs	r1, #1
 8086bba:	7940      	ldrb	r0, [r0, #5]
 8086bbc:	f003 ff8f 	bl	808aade <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8086bc0:	21ff      	movs	r1, #255	; 0xff
 8086bc2:	6820      	ldr	r0, [r4, #0]
 8086bc4:	f7ff fff1 	bl	8086baa <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiEndTransaction();
 8086bc8:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8086bca:	6803      	ldr	r3, [r0, #0]
 8086bcc:	689b      	ldr	r3, [r3, #8]
 8086bce:	4798      	blx	r3
  m_selected = false;
 8086bd0:	2300      	movs	r3, #0
 8086bd2:	7123      	strb	r3, [r4, #4]
}
 8086bd4:	bd10      	pop	{r4, pc}

08086bd6 <_ZN9SdSpiCard13chipSelectLowEv>:
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8086bd6:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8086bd8:	7905      	ldrb	r5, [r0, #4]
void SdSpiCard::chipSelectLow() {
 8086bda:	4604      	mov	r4, r0
  if (m_selected) {
 8086bdc:	b955      	cbnz	r5, 8086bf4 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
 8086bde:	6800      	ldr	r0, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8086be0:	79e1      	ldrb	r1, [r4, #7]
 8086be2:	6803      	ldr	r3, [r0, #0]
 8086be4:	685b      	ldr	r3, [r3, #4]
 8086be6:	4798      	blx	r3
  digitalWrite(m_chipSelectPin, LOW);
 8086be8:	4629      	mov	r1, r5
 8086bea:	7960      	ldrb	r0, [r4, #5]
 8086bec:	f003 ff77 	bl	808aade <digitalWrite>
  m_selected = true;
 8086bf0:	2301      	movs	r3, #1
 8086bf2:	7123      	strb	r3, [r4, #4]
}
 8086bf4:	bd38      	pop	{r3, r4, r5, pc}

08086bf6 <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8086bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086bf8:	4604      	mov	r4, r0
 8086bfa:	460d      	mov	r5, r1
 8086bfc:	4616      	mov	r6, r2
 8086bfe:	f001 fc15 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
 8086c02:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8086c04:	6820      	ldr	r0, [r4, #0]
 8086c06:	f7ff ffcd 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086c0a:	28ff      	cmp	r0, #255	; 0xff
 8086c0c:	7220      	strb	r0, [r4, #8]
 8086c0e:	d10c      	bne.n	8086c2a <_ZN9SdSpiCard8readDataEPhj+0x34>
 8086c10:	f001 fc0c 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8086c14:	1bc3      	subs	r3, r0, r7
 8086c16:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8086c1a:	d9f3      	bls.n	8086c04 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 8086c1c:	2311      	movs	r3, #17
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8086c1e:	4620      	mov	r0, r4
 8086c20:	71a3      	strb	r3, [r4, #6]
 8086c22:	f7ff ffc5 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086c26:	2000      	movs	r0, #0
}
 8086c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 8086c2a:	28fe      	cmp	r0, #254	; 0xfe
 8086c2c:	d001      	beq.n	8086c32 <_ZN9SdSpiCard8readDataEPhj+0x3c>
 8086c2e:	230f      	movs	r3, #15
 8086c30:	e7f5      	b.n	8086c1e <_ZN9SdSpiCard8readDataEPhj+0x28>
  if ((m_status = spiReceive(dst, count))) {
 8086c32:	6820      	ldr	r0, [r4, #0]
    return m_spi->receive(buf, n);
 8086c34:	4632      	mov	r2, r6
 8086c36:	6803      	ldr	r3, [r0, #0]
 8086c38:	4629      	mov	r1, r5
 8086c3a:	691b      	ldr	r3, [r3, #16]
 8086c3c:	4798      	blx	r3
 8086c3e:	7220      	strb	r0, [r4, #8]
 8086c40:	b108      	cbz	r0, 8086c46 <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 8086c42:	231c      	movs	r3, #28
 8086c44:	e7eb      	b.n	8086c1e <_ZN9SdSpiCard8readDataEPhj+0x28>
  spiReceive();
 8086c46:	6820      	ldr	r0, [r4, #0]
 8086c48:	f7ff ffac 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
 8086c4c:	6820      	ldr	r0, [r4, #0]
 8086c4e:	f7ff ffa9 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086c52:	2001      	movs	r0, #1
 8086c54:	e7e8      	b.n	8086c28 <_ZN9SdSpiCard8readDataEPhj+0x32>

08086c56 <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8086c56:	b570      	push	{r4, r5, r6, lr}
 8086c58:	4606      	mov	r6, r0
 8086c5a:	460c      	mov	r4, r1
 8086c5c:	f001 fbe6 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
 8086c60:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8086c62:	6830      	ldr	r0, [r6, #0]
 8086c64:	f7ff ff9e 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086c68:	28ff      	cmp	r0, #255	; 0xff
 8086c6a:	d006      	beq.n	8086c7a <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8086c6c:	f001 fbde 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8086c70:	1b43      	subs	r3, r0, r5
 8086c72:	42a3      	cmp	r3, r4
 8086c74:	d3f5      	bcc.n	8086c62 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8086c76:	2000      	movs	r0, #0
}
 8086c78:	bd70      	pop	{r4, r5, r6, pc}
  return true;
 8086c7a:	2001      	movs	r0, #1
 8086c7c:	e7fc      	b.n	8086c78 <_ZN9SdSpiCard11waitNotBusyEt+0x22>

08086c7e <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8086c7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_selected) {
 8086c80:	7903      	ldrb	r3, [r0, #4]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8086c82:	4604      	mov	r4, r0
 8086c84:	460d      	mov	r5, r1
 8086c86:	9201      	str	r2, [sp, #4]
  if (!m_selected) {
 8086c88:	b90b      	cbnz	r3, 8086c8e <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8086c8a:	f7ff ffa4 	bl	8086bd6 <_ZN9SdSpiCard13chipSelectLowEv>
  waitNotBusy(SD_WRITE_TIMEOUT);
 8086c8e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086c92:	4620      	mov	r0, r4
 8086c94:	f7ff ffdf 	bl	8086c56 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
 8086c98:	6820      	ldr	r0, [r4, #0]
 8086c9a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8086c9e:	f7ff ff84 	bl	8086baa <_ZN9SdSpiCard7spiSendEh.isra.0>
 8086ca2:	2603      	movs	r6, #3
    spiSend(pa[i]);
 8086ca4:	af01      	add	r7, sp, #4
 8086ca6:	5db9      	ldrb	r1, [r7, r6]
 8086ca8:	6820      	ldr	r0, [r4, #0]
 8086caa:	f7ff ff7e 	bl	8086baa <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
 8086cae:	3e01      	subs	r6, #1
 8086cb0:	d2f9      	bcs.n	8086ca6 <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8086cb2:	2d00      	cmp	r5, #0
 8086cb4:	bf0c      	ite	eq
 8086cb6:	2195      	moveq	r1, #149	; 0x95
 8086cb8:	2187      	movne	r1, #135	; 0x87
 8086cba:	6820      	ldr	r0, [r4, #0]
 8086cbc:	f7ff ff75 	bl	8086baa <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (cmd == CMD12) {
 8086cc0:	2d0c      	cmp	r5, #12
 8086cc2:	d102      	bne.n	8086cca <_ZN9SdSpiCard11cardCommandEhm+0x4c>
    spiReceive();
 8086cc4:	6820      	ldr	r0, [r4, #0]
 8086cc6:	f7ff ff6d 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8086cca:	2500      	movs	r5, #0
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8086ccc:	6820      	ldr	r0, [r4, #0]
 8086cce:	f7ff ff69 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086cd2:	0603      	lsls	r3, r0, #24
 8086cd4:	7220      	strb	r0, [r4, #8]
 8086cd6:	d503      	bpl.n	8086ce0 <_ZN9SdSpiCard11cardCommandEhm+0x62>
 8086cd8:	3501      	adds	r5, #1
 8086cda:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8086cde:	d1f5      	bne.n	8086ccc <_ZN9SdSpiCard11cardCommandEhm+0x4e>
}
 8086ce0:	b003      	add	sp, #12
 8086ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086ce4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8086ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086ce6:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8086ce8:	2300      	movs	r3, #0
  m_chipSelectPin = chipSelectPin;
 8086cea:	7142      	strb	r2, [r0, #5]
  m_errorCode = m_type = 0;
 8086cec:	7243      	strb	r3, [r0, #9]
 8086cee:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8086cf0:	6001      	str	r1, [r0, #0]
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8086cf2:	4604      	mov	r4, r0
 8086cf4:	f001 fb9a 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
 8086cf8:	4605      	mov	r5, r0
  spiBegin(m_chipSelectPin);
 8086cfa:	6820      	ldr	r0, [r4, #0]
    m_spi->begin(chipSelectPin);
 8086cfc:	7961      	ldrb	r1, [r4, #5]
 8086cfe:	6803      	ldr	r3, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8086d00:	260a      	movs	r6, #10
    m_spi->begin(chipSelectPin);
 8086d02:	681b      	ldr	r3, [r3, #0]
 8086d04:	4798      	blx	r3
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8086d06:	2180      	movs	r1, #128	; 0x80
  spiBeginTransaction(m_sckDivisor);
 8086d08:	6820      	ldr	r0, [r4, #0]
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8086d0a:	71e1      	strb	r1, [r4, #7]
    m_spi->beginTransaction(spiDivisor);
 8086d0c:	6803      	ldr	r3, [r0, #0]
 8086d0e:	685b      	ldr	r3, [r3, #4]
 8086d10:	4798      	blx	r3
    spiSend(0XFF);
 8086d12:	21ff      	movs	r1, #255	; 0xff
 8086d14:	6820      	ldr	r0, [r4, #0]
 8086d16:	3e01      	subs	r6, #1
 8086d18:	f7ff ff47 	bl	8086baa <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
 8086d1c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8086d20:	d1f7      	bne.n	8086d12 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
  spiEndTransaction();
 8086d22:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8086d24:	6803      	ldr	r3, [r0, #0]
 8086d26:	689b      	ldr	r3, [r3, #8]
 8086d28:	4798      	blx	r3
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 8086d2a:	2200      	movs	r2, #0
 8086d2c:	4620      	mov	r0, r4
 8086d2e:	4611      	mov	r1, r2
 8086d30:	f7ff ffa5 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
 8086d34:	2801      	cmp	r0, #1
 8086d36:	d00c      	beq.n	8086d52 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
 8086d38:	f001 fb78 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8086d3c:	1b40      	subs	r0, r0, r5
 8086d3e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8086d42:	d9f2      	bls.n	8086d2a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
    m_errorCode = code;
 8086d44:	2301      	movs	r3, #1
  chipSelectHigh();
 8086d46:	4620      	mov	r0, r4
 8086d48:	71a3      	strb	r3, [r4, #6]
 8086d4a:	f7ff ff31 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086d4e:	2000      	movs	r0, #0
}
 8086d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8086d52:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8086d56:	2108      	movs	r1, #8
 8086d58:	4620      	mov	r0, r4
 8086d5a:	f7ff ff90 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
 8086d5e:	2805      	cmp	r0, #5
 8086d60:	d116      	bne.n	8086d90 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xac>
    m_type = value;
 8086d62:	2301      	movs	r3, #1
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8086d64:	2600      	movs	r6, #0
 8086d66:	7263      	strb	r3, [r4, #9]
    cardCommand(CMD55, 0);
 8086d68:	2200      	movs	r2, #0
 8086d6a:	2137      	movs	r1, #55	; 0x37
 8086d6c:	4620      	mov	r0, r4
 8086d6e:	f7ff ff86 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8086d72:	4632      	mov	r2, r6
 8086d74:	2129      	movs	r1, #41	; 0x29
 8086d76:	4620      	mov	r0, r4
 8086d78:	f7ff ff81 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8086d7c:	4602      	mov	r2, r0
 8086d7e:	b1f8      	cbz	r0, 8086dc0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xdc>
 8086d80:	f001 fb54 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8086d84:	1b40      	subs	r0, r0, r5
 8086d86:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8086d8a:	d9ed      	bls.n	8086d68 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
    m_errorCode = code;
 8086d8c:	230a      	movs	r3, #10
 8086d8e:	e7da      	b.n	8086d46 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
 8086d90:	2604      	movs	r6, #4
      m_status = spiReceive();
 8086d92:	6820      	ldr	r0, [r4, #0]
 8086d94:	f7ff ff06 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086d98:	3e01      	subs	r6, #1
    for (uint8_t i = 0; i < 4; i++) {
 8086d9a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      m_status = spiReceive();
 8086d9e:	7220      	strb	r0, [r4, #8]
    for (uint8_t i = 0; i < 4; i++) {
 8086da0:	d1f7      	bne.n	8086d92 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xae>
    if (m_status == 0XAA) {
 8086da2:	28aa      	cmp	r0, #170	; 0xaa
 8086da4:	d104      	bne.n	8086db0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xcc>
    m_type = value;
 8086da6:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8086da8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8086dac:	7263      	strb	r3, [r4, #9]
    return m_type;
 8086dae:	e7db      	b.n	8086d68 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
 8086db0:	f001 fb3c 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8086db4:	1b40      	subs	r0, r0, r5
 8086db6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8086dba:	d9ca      	bls.n	8086d52 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
    m_errorCode = code;
 8086dbc:	2302      	movs	r3, #2
 8086dbe:	e7c2      	b.n	8086d46 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
  if (type() == SD_CARD_TYPE_SD2) {
 8086dc0:	7a63      	ldrb	r3, [r4, #9]
 8086dc2:	2b02      	cmp	r3, #2
 8086dc4:	d119      	bne.n	8086dfa <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x116>
    if (cardCommand(CMD58, 0)) {
 8086dc6:	213a      	movs	r1, #58	; 0x3a
 8086dc8:	4620      	mov	r0, r4
 8086dca:	f7ff ff58 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
 8086dce:	b108      	cbz	r0, 8086dd4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf0>
 8086dd0:	2308      	movs	r3, #8
 8086dd2:	e7b8      	b.n	8086d46 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
    if ((spiReceive() & 0XC0) == 0XC0) {
 8086dd4:	6820      	ldr	r0, [r4, #0]
 8086dd6:	f7ff fee5 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086dda:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8086dde:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 8086de0:	bf08      	it	eq
 8086de2:	2303      	moveq	r3, #3
      spiReceive();
 8086de4:	6820      	ldr	r0, [r4, #0]
 8086de6:	bf08      	it	eq
 8086de8:	7263      	strbeq	r3, [r4, #9]
 8086dea:	f7ff fedb 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086dee:	6820      	ldr	r0, [r4, #0]
 8086df0:	f7ff fed8 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086df4:	6820      	ldr	r0, [r4, #0]
 8086df6:	f7ff fed5 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  chipSelectHigh();
 8086dfa:	4620      	mov	r0, r4
 8086dfc:	f7ff fed8 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086e00:	2001      	movs	r0, #1
  m_sckDivisor = sckDivisor;
 8086e02:	71e7      	strb	r7, [r4, #7]
  return true;
 8086e04:	e7a4      	b.n	8086d50 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6c>

08086e06 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8086e06:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8086e08:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8086e0a:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8086e0c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086e0e:	bf18      	it	ne
 8086e10:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 8086e12:	460a      	mov	r2, r1
 8086e14:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8086e16:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 8086e18:	f7ff ff31 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
 8086e1c:	b130      	cbz	r0, 8086e2c <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 8086e1e:	2304      	movs	r3, #4
 8086e20:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8086e22:	4620      	mov	r0, r4
 8086e24:	f7ff fec4 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086e28:	2500      	movs	r5, #0
 8086e2a:	e00b      	b.n	8086e44 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 8086e2c:	4629      	mov	r1, r5
 8086e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086e32:	4620      	mov	r0, r4
 8086e34:	f7ff fedf 	bl	8086bf6 <_ZN9SdSpiCard8readDataEPhj>
 8086e38:	4605      	mov	r5, r0
 8086e3a:	2800      	cmp	r0, #0
 8086e3c:	d0f1      	beq.n	8086e22 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  chipSelectHigh();
 8086e3e:	4620      	mov	r0, r4
 8086e40:	f7ff feb6 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8086e44:	4628      	mov	r0, r5
 8086e46:	bd38      	pop	{r3, r4, r5, pc}

08086e48 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8086e48:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8086e4a:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8086e4c:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 8086e4e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086e50:	bf18      	it	ne
 8086e52:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
 8086e54:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8086e56:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
 8086e58:	f7ff ff11 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
 8086e5c:	b130      	cbz	r0, 8086e6c <_ZN9SdSpiCard9readStartEm+0x24>
 8086e5e:	2305      	movs	r3, #5
  chipSelectHigh();
 8086e60:	4620      	mov	r0, r4
 8086e62:	71a3      	strb	r3, [r4, #6]
 8086e64:	f7ff fea4 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086e68:	2000      	movs	r0, #0
}
 8086e6a:	bd10      	pop	{r4, pc}
  return true;
 8086e6c:	2001      	movs	r0, #1
 8086e6e:	e7fc      	b.n	8086e6a <_ZN9SdSpiCard9readStartEm+0x22>

08086e70 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 8086e70:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8086e72:	2200      	movs	r2, #0
 8086e74:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
 8086e76:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8086e78:	f7ff ff01 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
 8086e7c:	b130      	cbz	r0, 8086e8c <_ZN9SdSpiCard8readStopEv+0x1c>
 8086e7e:	2303      	movs	r3, #3
  chipSelectHigh();
 8086e80:	4620      	mov	r0, r4
 8086e82:	71a3      	strb	r3, [r4, #6]
 8086e84:	f7ff fe94 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086e88:	2000      	movs	r0, #0
}
 8086e8a:	bd10      	pop	{r4, pc}
  chipSelectHigh();
 8086e8c:	4620      	mov	r0, r4
 8086e8e:	f7ff fe8f 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086e92:	2001      	movs	r0, #1
 8086e94:	e7f9      	b.n	8086e8a <_ZN9SdSpiCard8readStopEv+0x1a>

08086e96 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8086e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086e98:	4604      	mov	r4, r0
 8086e9a:	4616      	mov	r6, r2
 8086e9c:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8086e9e:	f7ff ffd3 	bl	8086e48 <_ZN9SdSpiCard9readStartEm>
 8086ea2:	b168      	cbz	r0, 8086ec0 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
 8086ea4:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8086ea6:	b2ab      	uxth	r3, r5
 8086ea8:	42bb      	cmp	r3, r7
 8086eaa:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 8086eae:	d209      	bcs.n	8086ec4 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
 8086eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086eb4:	4620      	mov	r0, r4
 8086eb6:	f7ff fe9e 	bl	8086bf6 <_ZN9SdSpiCard8readDataEPhj>
 8086eba:	3501      	adds	r5, #1
 8086ebc:	2800      	cmp	r0, #0
 8086ebe:	d1f2      	bne.n	8086ea6 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
 8086ec0:	2000      	movs	r0, #0
 8086ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
 8086ec4:	4620      	mov	r0, r4
}
 8086ec6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
 8086eca:	f7ff bfd1 	b.w	8086e70 <_ZN9SdSpiCard8readStopEv>

08086ece <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8086ece:	b538      	push	{r3, r4, r5, lr}
 8086ed0:	4604      	mov	r4, r0
 8086ed2:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8086ed4:	6800      	ldr	r0, [r0, #0]
 8086ed6:	f7ff fe68 	bl	8086baa <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(src, 512);
 8086eda:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8086edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086ee0:	6803      	ldr	r3, [r0, #0]
 8086ee2:	4629      	mov	r1, r5
 8086ee4:	699b      	ldr	r3, [r3, #24]
 8086ee6:	4798      	blx	r3
  spiSend(crc >> 8);
 8086ee8:	21ff      	movs	r1, #255	; 0xff
 8086eea:	6820      	ldr	r0, [r4, #0]
 8086eec:	f7ff fe5d 	bl	8086baa <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
 8086ef0:	21ff      	movs	r1, #255	; 0xff
 8086ef2:	6820      	ldr	r0, [r4, #0]
 8086ef4:	f7ff fe59 	bl	8086baa <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
 8086ef8:	6820      	ldr	r0, [r4, #0]
 8086efa:	f7ff fe53 	bl	8086ba4 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8086efe:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8086f00:	f000 001f 	and.w	r0, r0, #31
 8086f04:	2805      	cmp	r0, #5
 8086f06:	d006      	beq.n	8086f16 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
    m_errorCode = code;
 8086f08:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8086f0a:	4620      	mov	r0, r4
 8086f0c:	71a3      	strb	r3, [r4, #6]
 8086f0e:	f7ff fe4f 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086f12:	2000      	movs	r0, #0
}
 8086f14:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 8086f16:	2001      	movs	r0, #1
 8086f18:	e7fc      	b.n	8086f14 <_ZN9SdSpiCard9writeDataEhPKh+0x46>

08086f1a <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086f1a:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8086f1c:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086f1e:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8086f20:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086f22:	bf18      	it	ne
 8086f24:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 8086f26:	460a      	mov	r2, r1
 8086f28:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086f2a:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 8086f2c:	f7ff fea7 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
 8086f30:	b130      	cbz	r0, 8086f40 <_ZN9SdSpiCard10writeBlockEmPKh+0x26>
 8086f32:	2306      	movs	r3, #6
 8086f34:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8086f36:	4620      	mov	r0, r4
 8086f38:	f7ff fe3a 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086f3c:	2500      	movs	r5, #0
 8086f3e:	e00a      	b.n	8086f56 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
  if (!writeData(DATA_START_BLOCK, src)) {
 8086f40:	462a      	mov	r2, r5
 8086f42:	21fe      	movs	r1, #254	; 0xfe
 8086f44:	4620      	mov	r0, r4
 8086f46:	f7ff ffc2 	bl	8086ece <_ZN9SdSpiCard9writeDataEhPKh>
 8086f4a:	4605      	mov	r5, r0
 8086f4c:	2800      	cmp	r0, #0
 8086f4e:	d0f2      	beq.n	8086f36 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  chipSelectHigh();
 8086f50:	4620      	mov	r0, r4
 8086f52:	f7ff fe2d 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8086f56:	4628      	mov	r0, r5
 8086f58:	bd38      	pop	{r3, r4, r5, pc}

08086f5a <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 8086f5a:	b570      	push	{r4, r5, r6, lr}
 8086f5c:	4604      	mov	r4, r0
 8086f5e:	460e      	mov	r6, r1
  bool selected = m_selected;
 8086f60:	7905      	ldrb	r5, [r0, #4]
  chipSelectLow();
 8086f62:	f7ff fe38 	bl	8086bd6 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8086f66:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086f6a:	4620      	mov	r0, r4
 8086f6c:	f7ff fe73 	bl	8086c56 <_ZN9SdSpiCard11waitNotBusyEt>
 8086f70:	b930      	cbnz	r0, 8086f80 <_ZN9SdSpiCard9writeDataEPKh+0x26>
 8086f72:	2317      	movs	r3, #23
 8086f74:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8086f76:	4620      	mov	r0, r4
 8086f78:	f7ff fe1a 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086f7c:	2500      	movs	r5, #0
 8086f7e:	e00c      	b.n	8086f9a <_ZN9SdSpiCard9writeDataEPKh+0x40>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8086f80:	4632      	mov	r2, r6
 8086f82:	21fc      	movs	r1, #252	; 0xfc
 8086f84:	4620      	mov	r0, r4
 8086f86:	f7ff ffa2 	bl	8086ece <_ZN9SdSpiCard9writeDataEhPKh>
 8086f8a:	4606      	mov	r6, r0
 8086f8c:	2800      	cmp	r0, #0
 8086f8e:	d0f2      	beq.n	8086f76 <_ZN9SdSpiCard9writeDataEPKh+0x1c>
  if (!selected) {
 8086f90:	b91d      	cbnz	r5, 8086f9a <_ZN9SdSpiCard9writeDataEPKh+0x40>
    chipSelectHigh();
 8086f92:	4620      	mov	r0, r4
 8086f94:	f7ff fe0c 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086f98:	4635      	mov	r5, r6
}
 8086f9a:	4628      	mov	r0, r5
 8086f9c:	bd70      	pop	{r4, r5, r6, pc}

08086f9e <_ZN9SdSpiCard10writeStartEmm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 8086f9e:	b570      	push	{r4, r5, r6, lr}
 8086fa0:	4604      	mov	r4, r0
 8086fa2:	4616      	mov	r6, r2
 8086fa4:	460d      	mov	r5, r1
    cardCommand(CMD55, 0);
 8086fa6:	2200      	movs	r2, #0
 8086fa8:	2137      	movs	r1, #55	; 0x37
 8086faa:	f7ff fe68 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8086fae:	4632      	mov	r2, r6
 8086fb0:	2117      	movs	r1, #23
 8086fb2:	4620      	mov	r0, r4
 8086fb4:	f7ff fe63 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8086fb8:	b130      	cbz	r0, 8086fc8 <_ZN9SdSpiCard10writeStartEmm+0x2a>
    m_errorCode = code;
 8086fba:	2309      	movs	r3, #9
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8086fbc:	4620      	mov	r0, r4
 8086fbe:	71a3      	strb	r3, [r4, #6]
 8086fc0:	f7ff fdf6 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086fc4:	2000      	movs	r0, #0
}
 8086fc6:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
 8086fc8:	7a63      	ldrb	r3, [r4, #9]
  if (cardCommand(CMD25, blockNumber)) {
 8086fca:	2119      	movs	r1, #25
  if (type() != SD_CARD_TYPE_SDHC) {
 8086fcc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086fce:	bf18      	it	ne
 8086fd0:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, blockNumber)) {
 8086fd2:	462a      	mov	r2, r5
 8086fd4:	4620      	mov	r0, r4
 8086fd6:	f7ff fe52 	bl	8086c7e <_ZN9SdSpiCard11cardCommandEhm>
 8086fda:	b108      	cbz	r0, 8086fe0 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8086fdc:	2307      	movs	r3, #7
 8086fde:	e7ed      	b.n	8086fbc <_ZN9SdSpiCard10writeStartEmm+0x1e>
  return true;
 8086fe0:	2001      	movs	r0, #1
 8086fe2:	e7f0      	b.n	8086fc6 <_ZN9SdSpiCard10writeStartEmm+0x28>

08086fe4 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8086fe4:	b538      	push	{r3, r4, r5, lr}
 8086fe6:	4604      	mov	r4, r0
  chipSelectLow();
 8086fe8:	f7ff fdf5 	bl	8086bd6 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8086fec:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086ff0:	4620      	mov	r0, r4
 8086ff2:	f7ff fe30 	bl	8086c56 <_ZN9SdSpiCard11waitNotBusyEt>
 8086ff6:	b178      	cbz	r0, 8087018 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8086ff8:	21fd      	movs	r1, #253	; 0xfd
 8086ffa:	6820      	ldr	r0, [r4, #0]
 8086ffc:	f7ff fdd5 	bl	8086baa <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8087000:	f44f 7116 	mov.w	r1, #600	; 0x258
 8087004:	4620      	mov	r0, r4
 8087006:	f7ff fe26 	bl	8086c56 <_ZN9SdSpiCard11waitNotBusyEt>
 808700a:	4605      	mov	r5, r0
 808700c:	b120      	cbz	r0, 8087018 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  chipSelectHigh();
 808700e:	4620      	mov	r0, r4
 8087010:	f7ff fdce 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
 8087014:	4628      	mov	r0, r5
 8087016:	bd38      	pop	{r3, r4, r5, pc}
 8087018:	2312      	movs	r3, #18
  chipSelectHigh();
 808701a:	4620      	mov	r0, r4
 808701c:	71a3      	strb	r3, [r4, #6]
 808701e:	f7ff fdc7 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8087022:	2500      	movs	r5, #0
 8087024:	e7f6      	b.n	8087014 <_ZN9SdSpiCard9writeStopEv+0x30>

08087026 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8087026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087028:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 808702a:	461a      	mov	r2, r3
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 808702c:	4604      	mov	r4, r0
 808702e:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8087030:	f7ff ffb5 	bl	8086f9e <_ZN9SdSpiCard10writeStartEmm>
 8087034:	b170      	cbz	r0, 8087054 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 8087036:	2500      	movs	r5, #0
 8087038:	42b5      	cmp	r5, r6
  return writeStop();
 808703a:	4620      	mov	r0, r4
 808703c:	eb07 2145 	add.w	r1, r7, r5, lsl #9
  for (size_t b = 0; b < count; b++, src += 512) {
 8087040:	d004      	beq.n	808704c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8087042:	f7ff ff8a 	bl	8086f5a <_ZN9SdSpiCard9writeDataEPKh>
 8087046:	b128      	cbz	r0, 8087054 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 8087048:	3501      	adds	r5, #1
 808704a:	e7f5      	b.n	8087038 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
}
 808704c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
 8087050:	f7ff bfc8 	b.w	8086fe4 <_ZN9SdSpiCard9writeStopEv>
  chipSelectHigh();
 8087054:	4620      	mov	r0, r4
 8087056:	f7ff fdab 	bl	8086bb0 <_ZN9SdSpiCard14chipSelectHighEv>
}
 808705a:	2000      	movs	r0, #0
 808705c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08087060 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8087060:	2201      	movs	r2, #1
 8087062:	4b01      	ldr	r3, [pc, #4]	; (8087068 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8087064:	701a      	strb	r2, [r3, #0]
}
 8087066:	4770      	bx	lr
 8087068:	20000ca4 	.word	0x20000ca4

0808706c <_ZN5SdSpi14endTransactionEv>:
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
}
 808706c:	4770      	bx	lr
	...

08087070 <_ZN5SdSpi5beginEh>:
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8087070:	7902      	ldrb	r2, [r0, #4]
 8087072:	4b02      	ldr	r3, [pc, #8]	; (808707c <_ZN5SdSpi5beginEh+0xc>)
 8087074:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8087078:	f001 be42 	b.w	8088d00 <_ZN8SPIClass5beginEt>
 808707c:	20000ca8 	.word	0x20000ca8

08087080 <_ZN5SdSpi16beginTransactionEh>:
void SdSpi::beginTransaction(uint8_t divisor) {
 8087080:	b570      	push	{r4, r5, r6, lr}
 8087082:	4605      	mov	r5, r0
 8087084:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8087086:	7903      	ldrb	r3, [r0, #4]
 8087088:	4e19      	ldr	r6, [pc, #100]	; (80870f0 <_ZN5SdSpi16beginTransactionEh+0x70>)
 808708a:	2101      	movs	r1, #1
 808708c:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8087090:	f001 fe44 	bl	8088d1c <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8087094:	792b      	ldrb	r3, [r5, #4]
 8087096:	2100      	movs	r1, #0
 8087098:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 808709c:	f001 fe4c 	bl	8088d38 <_ZN8SPIClass11setDataModeEh>
  if (divisor <= 2) {
 80870a0:	2c02      	cmp	r4, #2
 80870a2:	d91b      	bls.n	80870dc <_ZN5SdSpi16beginTransactionEh+0x5c>
  } else  if (divisor <= 4) {
 80870a4:	2c04      	cmp	r4, #4
 80870a6:	d91b      	bls.n	80870e0 <_ZN5SdSpi16beginTransactionEh+0x60>
  } else  if (divisor <= 8) {
 80870a8:	2c08      	cmp	r4, #8
 80870aa:	d91b      	bls.n	80870e4 <_ZN5SdSpi16beginTransactionEh+0x64>
  } else  if (divisor <= 16) {
 80870ac:	2c10      	cmp	r4, #16
 80870ae:	d91b      	bls.n	80870e8 <_ZN5SdSpi16beginTransactionEh+0x68>
  } else  if (divisor <= 32) {
 80870b0:	2c20      	cmp	r4, #32
 80870b2:	d91b      	bls.n	80870ec <_ZN5SdSpi16beginTransactionEh+0x6c>
    v = SPI_CLOCK_DIV128;
 80870b4:	2c41      	cmp	r4, #65	; 0x41
 80870b6:	bf34      	ite	cc
 80870b8:	2128      	movcc	r1, #40	; 0x28
 80870ba:	2130      	movcs	r1, #48	; 0x30
  spiPtr[m_spiIf]->setClockDivider(v);
 80870bc:	792b      	ldrb	r3, [r5, #4]
 80870be:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 80870c2:	f001 fe89 	bl	8088dd8 <_ZN8SPIClass15setClockDividerEh>
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 80870c6:	7929      	ldrb	r1, [r5, #4]
 80870c8:	233c      	movs	r3, #60	; 0x3c
 80870ca:	fb01 4404 	mla	r4, r1, r4, r4
 80870ce:	2118      	movs	r1, #24
 80870d0:	434c      	muls	r4, r1
 80870d2:	fbb4 f4f3 	udiv	r4, r4, r3
 80870d6:	4b07      	ldr	r3, [pc, #28]	; (80870f4 <_ZN5SdSpi16beginTransactionEh+0x74>)
 80870d8:	601c      	str	r4, [r3, #0]
}
 80870da:	bd70      	pop	{r4, r5, r6, pc}
    v = SPI_CLOCK_DIV2;
 80870dc:	2100      	movs	r1, #0
 80870de:	e7ed      	b.n	80870bc <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV4;
 80870e0:	2108      	movs	r1, #8
 80870e2:	e7eb      	b.n	80870bc <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV8;
 80870e4:	2110      	movs	r1, #16
 80870e6:	e7e9      	b.n	80870bc <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV16;
 80870e8:	2118      	movs	r1, #24
 80870ea:	e7e7      	b.n	80870bc <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV32;
 80870ec:	2120      	movs	r1, #32
 80870ee:	e7e5      	b.n	80870bc <_ZN5SdSpi16beginTransactionEh+0x3c>
 80870f0:	20000ca8 	.word	0x20000ca8
 80870f4:	20000cb4 	.word	0x20000cb4

080870f8 <_ZN5SdSpi7receiveEv>:
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 80870f8:	7902      	ldrb	r2, [r0, #4]
 80870fa:	4b03      	ldr	r3, [pc, #12]	; (8087108 <_ZN5SdSpi7receiveEv+0x10>)
 80870fc:	21ff      	movs	r1, #255	; 0xff
 80870fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8087102:	f001 be8d 	b.w	8088e20 <_ZN8SPIClass8transferEh>
 8087106:	bf00      	nop
 8087108:	20000ca8 	.word	0x20000ca8

0808710c <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 808710c:	7902      	ldrb	r2, [r0, #4]
 808710e:	4b02      	ldr	r3, [pc, #8]	; (8087118 <_ZN5SdSpi4sendEh+0xc>)
 8087110:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8087114:	f001 be84 	b.w	8088e20 <_ZN8SPIClass8transferEh>
 8087118:	20000ca8 	.word	0x20000ca8

0808711c <_ZN5SdSpi7receiveEPhj>:
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 808711c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808711e:	460e      	mov	r6, r1
  SPI_DMA_TransferCompleted = false;
 8087120:	2100      	movs	r1, #0
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8087122:	4613      	mov	r3, r2
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8087124:	4a0a      	ldr	r2, [pc, #40]	; (8087150 <_ZN5SdSpi7receiveEPhj+0x34>)
 8087126:	7905      	ldrb	r5, [r0, #4]
 8087128:	480a      	ldr	r0, [pc, #40]	; (8087154 <_ZN5SdSpi7receiveEPhj+0x38>)
 808712a:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
 808712c:	4c0a      	ldr	r4, [pc, #40]	; (8087158 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808712e:	4632      	mov	r2, r6
 8087130:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  SPI_DMA_TransferCompleted = false;
 8087134:	7021      	strb	r1, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8087136:	f001 fe79 	bl	8088e2c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 808713a:	7823      	ldrb	r3, [r4, #0]
 808713c:	2b00      	cmp	r3, #0
 808713e:	d0fc      	beq.n	808713a <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8087140:	4b06      	ldr	r3, [pc, #24]	; (808715c <_ZN5SdSpi7receiveEPhj+0x40>)
 8087142:	6818      	ldr	r0, [r3, #0]
 8087144:	b108      	cbz	r0, 808714a <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8087146:	f001 f969 	bl	808841c <HAL_Delay_Microseconds>
}
 808714a:	2000      	movs	r0, #0
 808714c:	b002      	add	sp, #8
 808714e:	bd70      	pop	{r4, r5, r6, pc}
 8087150:	08087061 	.word	0x08087061
 8087154:	20000ca8 	.word	0x20000ca8
 8087158:	20000ca4 	.word	0x20000ca4
 808715c:	20000cb4 	.word	0x20000cb4

08087160 <_ZN5SdSpi4sendEPKhj>:
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8087160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087162:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
 8087164:	2200      	movs	r2, #0

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8087166:	7905      	ldrb	r5, [r0, #4]
 8087168:	480a      	ldr	r0, [pc, #40]	; (8087194 <_ZN5SdSpi4sendEPKhj+0x34>)
  SPI_DMA_TransferCompleted = false;
 808716a:	4c0b      	ldr	r4, [pc, #44]	; (8087198 <_ZN5SdSpi4sendEPKhj+0x38>)
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 808716c:	9000      	str	r0, [sp, #0]
 808716e:	480b      	ldr	r0, [pc, #44]	; (808719c <_ZN5SdSpi4sendEPKhj+0x3c>)
  SPI_DMA_TransferCompleted = false;
 8087170:	7022      	strb	r2, [r4, #0]
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8087172:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8087176:	f001 fe59 	bl	8088e2c <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 808717a:	7823      	ldrb	r3, [r4, #0]
 808717c:	2b00      	cmp	r3, #0
 808717e:	d0fc      	beq.n	808717a <_ZN5SdSpi4sendEPKhj+0x1a>
  if (bugDelay) {
 8087180:	4b07      	ldr	r3, [pc, #28]	; (80871a0 <_ZN5SdSpi4sendEPKhj+0x40>)
 8087182:	6818      	ldr	r0, [r3, #0]
 8087184:	b120      	cbz	r0, 8087190 <_ZN5SdSpi4sendEPKhj+0x30>
    delayMicroseconds(bugDelay);
  }
}
 8087186:	b003      	add	sp, #12
 8087188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 808718c:	f001 b946 	b.w	808841c <HAL_Delay_Microseconds>
 8087190:	b003      	add	sp, #12
 8087192:	bd30      	pop	{r4, r5, pc}
 8087194:	08087061 	.word	0x08087061
 8087198:	20000ca4 	.word	0x20000ca4
 808719c:	20000ca8 	.word	0x20000ca8
 80871a0:	20000cb4 	.word	0x20000cb4

080871a4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80871a4:	b510      	push	{r4, lr}
 80871a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80871a8:	6880      	ldr	r0, [r0, #8]
 80871aa:	b108      	cbz	r0, 80871b0 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80871ac:	f001 f97e 	bl	80884ac <os_mutex_recursive_destroy>
 80871b0:	4620      	mov	r0, r4
 80871b2:	bd10      	pop	{r4, pc}

080871b4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 80871b4:	b538      	push	{r3, r4, r5, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80871b6:	4d25      	ldr	r5, [pc, #148]	; (808724c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x98>)
 80871b8:	7829      	ldrb	r1, [r5, #0]
 80871ba:	f3bf 8f5b 	dmb	ish
 80871be:	f011 0401 	ands.w	r4, r1, #1
 80871c2:	d10f      	bne.n	80871e4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x30>
 80871c4:	4628      	mov	r0, r5
 80871c6:	f7f8 ff86 	bl	80800d6 <__cxa_guard_acquire>
 80871ca:	b158      	cbz	r0, 80871e4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x30>
 80871cc:	4621      	mov	r1, r4
 80871ce:	4820      	ldr	r0, [pc, #128]	; (8087250 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 80871d0:	f001 fd87 	bl	8088ce2 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80871d4:	4628      	mov	r0, r5
 80871d6:	f7f8 ff83 	bl	80800e0 <__cxa_guard_release>
 80871da:	4a1e      	ldr	r2, [pc, #120]	; (8087254 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 80871dc:	491e      	ldr	r1, [pc, #120]	; (8087258 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 80871de:	481c      	ldr	r0, [pc, #112]	; (8087250 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 80871e0:	f003 fd50 	bl	808ac84 <__aeabi_atexit>
};
 80871e4:	4b1a      	ldr	r3, [pc, #104]	; (8087250 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 80871e6:	4c1d      	ldr	r4, [pc, #116]	; (808725c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa8>)
 80871e8:	4d1d      	ldr	r5, [pc, #116]	; (8087260 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xac>)
 80871ea:	6023      	str	r3, [r4, #0]
 80871ec:	782b      	ldrb	r3, [r5, #0]
 80871ee:	f3bf 8f5b 	dmb	ish
 80871f2:	07da      	lsls	r2, r3, #31
 80871f4:	d40f      	bmi.n	8087216 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x62>
 80871f6:	4628      	mov	r0, r5
 80871f8:	f7f8 ff6d 	bl	80800d6 <__cxa_guard_acquire>
 80871fc:	b158      	cbz	r0, 8087216 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x62>
 80871fe:	2101      	movs	r1, #1
 8087200:	4818      	ldr	r0, [pc, #96]	; (8087264 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8087202:	f001 fd6e 	bl	8088ce2 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8087206:	4628      	mov	r0, r5
 8087208:	f7f8 ff6a 	bl	80800e0 <__cxa_guard_release>
 808720c:	4a11      	ldr	r2, [pc, #68]	; (8087254 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 808720e:	4912      	ldr	r1, [pc, #72]	; (8087258 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8087210:	4814      	ldr	r0, [pc, #80]	; (8087264 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8087212:	f003 fd37 	bl	808ac84 <__aeabi_atexit>
 8087216:	4b13      	ldr	r3, [pc, #76]	; (8087264 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8087218:	4d13      	ldr	r5, [pc, #76]	; (8087268 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb4>)
 808721a:	6063      	str	r3, [r4, #4]
 808721c:	782b      	ldrb	r3, [r5, #0]
 808721e:	f3bf 8f5b 	dmb	ish
 8087222:	07db      	lsls	r3, r3, #31
 8087224:	d40f      	bmi.n	8087246 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x92>
 8087226:	4628      	mov	r0, r5
 8087228:	f7f8 ff55 	bl	80800d6 <__cxa_guard_acquire>
 808722c:	b158      	cbz	r0, 8087246 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x92>
 808722e:	2102      	movs	r1, #2
 8087230:	480e      	ldr	r0, [pc, #56]	; (808726c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8087232:	f001 fd56 	bl	8088ce2 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8087236:	4628      	mov	r0, r5
 8087238:	f7f8 ff52 	bl	80800e0 <__cxa_guard_release>
 808723c:	4a05      	ldr	r2, [pc, #20]	; (8087254 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 808723e:	4906      	ldr	r1, [pc, #24]	; (8087258 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8087240:	480a      	ldr	r0, [pc, #40]	; (808726c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8087242:	f003 fd1f 	bl	808ac84 <__aeabi_atexit>
 8087246:	4b09      	ldr	r3, [pc, #36]	; (808726c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8087248:	60a3      	str	r3, [r4, #8]
}
 808724a:	bd38      	pop	{r3, r4, r5, pc}
 808724c:	20000c94 	.word	0x20000c94
 8087250:	20000c98 	.word	0x20000c98
 8087254:	200002b0 	.word	0x200002b0
 8087258:	080871a5 	.word	0x080871a5
 808725c:	20000ca8 	.word	0x20000ca8
 8087260:	20000c84 	.word	0x20000c84
 8087264:	20000c88 	.word	0x20000c88
 8087268:	20000c74 	.word	0x20000c74
 808726c:	20000c78 	.word	0x20000c78

08087270 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8087270:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8087272:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
 8087274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8087278:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 808727a:	f100 0210 	add.w	r2, r0, #16
 808727e:	6880      	ldr	r0, [r0, #8]
 8087280:	f000 bbed 	b.w	8087a5e <_ZN9FatVolume15allocateClusterEmPm>

08087284 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8087284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8087288:	7801      	ldrb	r1, [r0, #0]
bool FatFile::addDirCluster() {
 808728a:	4604      	mov	r4, r0
  if (isRootFixed()) {
 808728c:	f011 0520 	ands.w	r5, r1, #32
 8087290:	d003      	beq.n	808729a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8087292:	2600      	movs	r6, #0
}
 8087294:	4630      	mov	r0, r6
 8087296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
 808729a:	6942      	ldr	r2, [r0, #20]
 808729c:	4b17      	ldr	r3, [pc, #92]	; (80872fc <_ZN7FatFile13addDirClusterEv+0x78>)
 808729e:	429a      	cmp	r2, r3
 80872a0:	d2f7      	bcs.n	8087292 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
 80872a2:	f7ff ffe5 	bl	8087270 <_ZN7FatFile10addClusterEv>
 80872a6:	4606      	mov	r6, r0
 80872a8:	2800      	cmp	r0, #0
 80872aa:	d0f2      	beq.n	8087292 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterStartBlock(m_curCluster);
 80872ac:	6921      	ldr	r1, [r4, #16]
 80872ae:	68a0      	ldr	r0, [r4, #8]
 80872b0:	f000 fb76 	bl	80879a0 <_ZNK9FatVolume17clusterStartBlockEm>
 80872b4:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
 80872b6:	68a0      	ldr	r0, [r4, #8]
 80872b8:	2205      	movs	r2, #5
 80872ba:	4639      	mov	r1, r7
 80872bc:	3028      	adds	r0, #40	; 0x28
 80872be:	f000 fb4c 	bl	808795a <_ZN8FatCache4readEmh>
  if (!pc) {
 80872c2:	4680      	mov	r8, r0
 80872c4:	2800      	cmp	r0, #0
 80872c6:	d0e4      	beq.n	8087292 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
 80872c8:	4629      	mov	r1, r5
 80872ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80872ce:	f004 fe11 	bl	808bef4 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80872d2:	2501      	movs	r5, #1
 80872d4:	68a0      	ldr	r0, [r4, #8]
 80872d6:	7902      	ldrb	r2, [r0, #4]
 80872d8:	42aa      	cmp	r2, r5
 80872da:	d909      	bls.n	80872f0 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80872dc:	6803      	ldr	r3, [r0, #0]
 80872de:	4642      	mov	r2, r8
 80872e0:	685b      	ldr	r3, [r3, #4]
 80872e2:	19e9      	adds	r1, r5, r7
 80872e4:	4798      	blx	r3
 80872e6:	2800      	cmp	r0, #0
 80872e8:	d0d3      	beq.n	8087292 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80872ea:	3501      	adds	r5, #1
 80872ec:	b2ed      	uxtb	r5, r5
 80872ee:	e7f1      	b.n	80872d4 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80872f0:	6963      	ldr	r3, [r4, #20]
 80872f2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80872f6:	6163      	str	r3, [r4, #20]
  return true;
 80872f8:	e7cc      	b.n	8087294 <_ZN7FatFile13addDirClusterEv+0x10>
 80872fa:	bf00      	nop
 80872fc:	001ffe00 	.word	0x001ffe00

08087300 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8087300:	b510      	push	{r4, lr}
 8087302:	4604      	mov	r4, r0
 8087304:	6880      	ldr	r0, [r0, #8]
 8087306:	460a      	mov	r2, r1
 8087308:	3028      	adds	r0, #40	; 0x28
 808730a:	69a1      	ldr	r1, [r4, #24]
 808730c:	f000 fb25 	bl	808795a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8087310:	b120      	cbz	r0, 808731c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8087312:	88a3      	ldrh	r3, [r4, #4]
 8087314:	f003 030f 	and.w	r3, r3, #15
 8087318:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 808731c:	bd10      	pop	{r4, pc}

0808731e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 808731e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8087320:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
 8087322:	4605      	mov	r5, r0
 8087324:	460e      	mov	r6, r1
  if (isOpen()) {
 8087326:	b94c      	cbnz	r4, 808733c <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8087328:	2224      	movs	r2, #36	; 0x24
 808732a:	4621      	mov	r1, r4
 808732c:	f004 fde2 	bl	808bef4 <memset>

  m_vol = vol;
 8087330:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8087332:	79f3      	ldrb	r3, [r6, #7]
 8087334:	2b10      	cmp	r3, #16
 8087336:	d003      	beq.n	8087340 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8087338:	2b20      	cmp	r3, #32
 808733a:	d007      	beq.n	808734c <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = O_READ;
  return true;

fail:
  return false;
 808733c:	2000      	movs	r0, #0
 808733e:	e004      	b.n	808734a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
 8087340:	2320      	movs	r3, #32
  m_flags = O_READ;
 8087342:	2401      	movs	r4, #1
  return true;
 8087344:	4620      	mov	r0, r4
    m_attr = FILE_ATTR_ROOT32;
 8087346:	702b      	strb	r3, [r5, #0]
  m_flags = O_READ;
 8087348:	70ac      	strb	r4, [r5, #2]
}
 808734a:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
 808734c:	2340      	movs	r3, #64	; 0x40
 808734e:	e7f8      	b.n	8087342 <_ZN7FatFile8openRootEP9FatVolume+0x24>

08087350 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8087350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8087354:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
 8087356:	4604      	mov	r4, r0
 8087358:	4688      	mov	r8, r1
 808735a:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & O_READ)) {
 808735c:	2b00      	cmp	r3, #0
 808735e:	d05d      	beq.n	808741c <_ZN7FatFile4readEPvj+0xcc>
 8087360:	7882      	ldrb	r2, [r0, #2]
 8087362:	07d1      	lsls	r1, r2, #31
 8087364:	d55a      	bpl.n	808741c <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8087366:	071a      	lsls	r2, r3, #28
 8087368:	d52d      	bpl.n	80873c6 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 808736a:	69c3      	ldr	r3, [r0, #28]
 808736c:	6942      	ldr	r2, [r0, #20]
 808736e:	1a9b      	subs	r3, r3, r2
 8087370:	429d      	cmp	r5, r3
 8087372:	bf28      	it	cs
 8087374:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8087376:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
 8087378:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808737c:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
 8087380:	2e00      	cmp	r6, #0
 8087382:	f000 8090 	beq.w	80874a6 <_ZN7FatFile4readEPvj+0x156>
    if (isRootFixed()) {
 8087386:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
 8087388:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 808738a:	0697      	lsls	r7, r2, #26
 808738c:	68a0      	ldr	r0, [r4, #8]
    offset = m_curPosition & 0X1FF;  // offset in block
 808738e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
 8087392:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8087396:	d51f      	bpl.n	80873d8 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8087398:	6a00      	ldr	r0, [r0, #32]
 808739a:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 808739c:	68a0      	ldr	r0, [r4, #8]
 808739e:	f1ba 0f00 	cmp.w	sl, #0
 80873a2:	d142      	bne.n	808742a <_ZN7FatFile4readEPvj+0xda>
 80873a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80873a8:	d33f      	bcc.n	808742a <_ZN7FatFile4readEPvj+0xda>
    return m_cache.lbn();
 80873aa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80873ac:	4291      	cmp	r1, r2
 80873ae:	d03c      	beq.n	808742a <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 80873b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80873b4:	d252      	bcs.n	808745c <_ZN7FatFile4readEPvj+0x10c>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80873b6:	6803      	ldr	r3, [r0, #0]
 80873b8:	4642      	mov	r2, r8
 80873ba:	681b      	ldr	r3, [r3, #0]
 80873bc:	4798      	blx	r3
 80873be:	b368      	cbz	r0, 808741c <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
 80873c0:	f44f 7700 	mov.w	r7, #512	; 0x200
 80873c4:	e044      	b.n	8087450 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
 80873c6:	069b      	lsls	r3, r3, #26
 80873c8:	d5d5      	bpl.n	8087376 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 80873ca:	6883      	ldr	r3, [r0, #8]
 80873cc:	891a      	ldrh	r2, [r3, #8]
 80873ce:	6943      	ldr	r3, [r0, #20]
 80873d0:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 80873d4:	b29b      	uxth	r3, r3
 80873d6:	e7cb      	b.n	8087370 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80873d8:	f890 9005 	ldrb.w	r9, [r0, #5]
 80873dc:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
 80873e0:	f1ba 0f00 	cmp.w	sl, #0
 80873e4:	d108      	bne.n	80873f8 <_ZN7FatFile4readEPvj+0xa8>
 80873e6:	f1b9 0f00 	cmp.w	r9, #0
 80873ea:	d105      	bne.n	80873f8 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
 80873ec:	b95b      	cbnz	r3, 8087406 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80873ee:	0653      	lsls	r3, r2, #25
 80873f0:	bf4c      	ite	mi
 80873f2:	6a03      	ldrmi	r3, [r0, #32]
 80873f4:	6a23      	ldrpl	r3, [r4, #32]
 80873f6:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80873f8:	6921      	ldr	r1, [r4, #16]
 80873fa:	68a0      	ldr	r0, [r4, #8]
 80873fc:	f000 fad0 	bl	80879a0 <_ZNK9FatVolume17clusterStartBlockEm>
 8087400:	eb09 0100 	add.w	r1, r9, r0
 8087404:	e7ca      	b.n	808739c <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8087406:	465a      	mov	r2, fp
 8087408:	6921      	ldr	r1, [r4, #16]
 808740a:	f000 facf 	bl	80879ac <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 808740e:	2800      	cmp	r0, #0
 8087410:	db04      	blt.n	808741c <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
 8087412:	d1f1      	bne.n	80873f8 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
 8087414:	7823      	ldrb	r3, [r4, #0]
 8087416:	f013 0f70 	tst.w	r3, #112	; 0x70
 808741a:	d144      	bne.n	80874a6 <_ZN7FatFile4readEPvj+0x156>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 808741c:	7863      	ldrb	r3, [r4, #1]
  return -1;
 808741e:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
 8087422:	f043 0302 	orr.w	r3, r3, #2
 8087426:	7063      	strb	r3, [r4, #1]
  return -1;
 8087428:	e03e      	b.n	80874a8 <_ZN7FatFile4readEPvj+0x158>
      n = 512 - offset;
 808742a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
 808742e:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
 8087430:	f04f 0200 	mov.w	r2, #0
 8087434:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8087438:	bf28      	it	cs
 808743a:	4637      	movcs	r7, r6
 808743c:	f000 fa8d 	bl	808795a <_ZN8FatCache4readEmh>
      if (!pc) {
 8087440:	2800      	cmp	r0, #0
 8087442:	d0eb      	beq.n	808741c <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
 8087444:	eb00 010a 	add.w	r1, r0, sl
 8087448:	463a      	mov	r2, r7
 808744a:	4640      	mov	r0, r8
 808744c:	f004 fd44 	bl	808bed8 <memcpy>
    m_curPosition += n;
 8087450:	6963      	ldr	r3, [r4, #20]
    dst += n;
 8087452:	44b8      	add	r8, r7
    m_curPosition += n;
 8087454:	443b      	add	r3, r7
 8087456:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8087458:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 808745a:	e791      	b.n	8087380 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
 808745c:	7827      	ldrb	r7, [r4, #0]
      uint8_t nb = toRead >> 9;
 808745e:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 8087462:	06bf      	lsls	r7, r7, #26
 8087464:	d406      	bmi.n	8087474 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8087466:	7907      	ldrb	r7, [r0, #4]
 8087468:	eba7 0709 	sub.w	r7, r7, r9
 808746c:	b2ff      	uxtb	r7, r7
 808746e:	42bb      	cmp	r3, r7
 8087470:	bf28      	it	cs
 8087472:	463b      	movcs	r3, r7
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8087474:	4291      	cmp	r1, r2
      n = 512*nb;
 8087476:	ea4f 2743 	mov.w	r7, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808747a:	d208      	bcs.n	808748e <_ZN7FatFile4readEPvj+0x13e>
      if (!m_vol->readBlocks(block, dst, nb)) {
 808747c:	68a0      	ldr	r0, [r4, #8]
 808747e:	6802      	ldr	r2, [r0, #0]
 8087480:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8087484:	4642      	mov	r2, r8
 8087486:	47d0      	blx	sl
 8087488:	2800      	cmp	r0, #0
 808748a:	d1e1      	bne.n	8087450 <_ZN7FatFile4readEPvj+0x100>
 808748c:	e7c6      	b.n	808741c <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808748e:	441a      	add	r2, r3
 8087490:	428a      	cmp	r2, r1
 8087492:	d9f3      	bls.n	808747c <_ZN7FatFile4readEPvj+0x12c>
 8087494:	e9cd 1300 	strd	r1, r3, [sp]
        if (!m_vol->cacheSync()) {
 8087498:	f7ff f874 	bl	8086584 <_ZN9FatVolume9cacheSyncEv>
 808749c:	e9dd 1300 	ldrd	r1, r3, [sp]
 80874a0:	2800      	cmp	r0, #0
 80874a2:	d1eb      	bne.n	808747c <_ZN7FatFile4readEPvj+0x12c>
 80874a4:	e7ba      	b.n	808741c <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
 80874a6:	1ba8      	subs	r0, r5, r6
}
 80874a8:	b003      	add	sp, #12
 80874aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080874ae <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 80874ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
 80874b0:	2201      	movs	r2, #1
  pos->cluster = m_curCluster;
 80874b2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 80874b6:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 80874ba:	4604      	mov	r4, r0
 80874bc:	f7ff ff48 	bl	8087350 <_ZN7FatFile4readEPvj>
 80874c0:	2801      	cmp	r0, #1
 80874c2:	bf12      	itee	ne
 80874c4:	f04f 30ff 	movne.w	r0, #4294967295
 80874c8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
 80874cc:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
 80874d0:	b002      	add	sp, #8
 80874d2:	bd70      	pop	{r4, r5, r6, pc}

080874d4 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80874d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80874d6:	6943      	ldr	r3, [r0, #20]
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80874d8:	4604      	mov	r4, r0
  if (i == 0 || !skipReadOk) {
 80874da:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80874de:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 80874e2:	d000      	beq.n	80874e6 <_ZN7FatFile12readDirCacheEb+0x12>
 80874e4:	b999      	cbnz	r1, 808750e <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 80874e6:	2201      	movs	r2, #1
 80874e8:	4620      	mov	r0, r4
 80874ea:	f10d 0107 	add.w	r1, sp, #7
 80874ee:	f7ff ff2f 	bl	8087350 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
 80874f2:	b240      	sxtb	r0, r0
 80874f4:	2801      	cmp	r0, #1
 80874f6:	d002      	beq.n	80874fe <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
 80874f8:	2000      	movs	r0, #0
}
 80874fa:	b003      	add	sp, #12
 80874fc:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
 80874fe:	6963      	ldr	r3, [r4, #20]
 8087500:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
 8087502:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
 8087504:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
 8087506:	3034      	adds	r0, #52	; 0x34
 8087508:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 808750c:	e7f5      	b.n	80874fa <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
 808750e:	3320      	adds	r3, #32
 8087510:	e7f7      	b.n	8087502 <_ZN7FatFile12readDirCacheEb+0x2e>

08087512 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
 8087512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
 8087516:	7802      	ldrb	r2, [r0, #0]
bool FatFile::seekSet(uint32_t pos) {
 8087518:	4604      	mov	r4, r0
 808751a:	460d      	mov	r5, r1
  uint32_t tmp = m_curCluster;
 808751c:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
 808751e:	b162      	cbz	r2, 808753a <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
 8087520:	6940      	ldr	r0, [r0, #20]
 8087522:	4288      	cmp	r0, r1
 8087524:	d002      	beq.n	808752c <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
 8087526:	b919      	cbnz	r1, 8087530 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
 8087528:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
 808752a:	6165      	str	r5, [r4, #20]
    return true;
 808752c:	2001      	movs	r0, #1
 808752e:	e006      	b.n	808753e <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
 8087530:	0716      	lsls	r6, r2, #28
 8087532:	d506      	bpl.n	8087542 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
 8087534:	69e3      	ldr	r3, [r4, #28]
 8087536:	428b      	cmp	r3, r1
 8087538:	d20b      	bcs.n	8087552 <_ZN7FatFile7seekSetEm+0x40>
  return false;
 808753a:	2000      	movs	r0, #0
  m_curCluster = tmp;
 808753c:	6127      	str	r7, [r4, #16]
}
 808753e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 8087542:	0691      	lsls	r1, r2, #26
 8087544:	d505      	bpl.n	8087552 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8087546:	68a3      	ldr	r3, [r4, #8]
 8087548:	891b      	ldrh	r3, [r3, #8]
 808754a:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 808754e:	d9ec      	bls.n	808752a <_ZN7FatFile7seekSetEm+0x18>
 8087550:	e7f3      	b.n	808753a <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8087552:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8087556:	1e43      	subs	r3, r0, #1
 8087558:	f89c 6006 	ldrb.w	r6, [ip, #6]
 808755c:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8087560:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8087562:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8087564:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
 8087566:	42b3      	cmp	r3, r6
 8087568:	d800      	bhi.n	808756c <_ZN7FatFile7seekSetEm+0x5a>
 808756a:	b998      	cbnz	r0, 8087594 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 808756c:	0653      	lsls	r3, r2, #25
 808756e:	bf4c      	ite	mi
 8087570:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 8087574:	6a23      	ldrpl	r3, [r4, #32]
 8087576:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8087578:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 808757c:	2e00      	cmp	r6, #0
 808757e:	d0d4      	beq.n	808752a <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8087580:	4642      	mov	r2, r8
 8087582:	6921      	ldr	r1, [r4, #16]
 8087584:	68a0      	ldr	r0, [r4, #8]
 8087586:	f000 fa11 	bl	80879ac <_ZN9FatVolume6fatGetEmPm>
 808758a:	2800      	cmp	r0, #0
 808758c:	f106 36ff 	add.w	r6, r6, #4294967295
 8087590:	dcf4      	bgt.n	808757c <_ZN7FatFile7seekSetEm+0x6a>
 8087592:	e7d2      	b.n	808753a <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
 8087594:	1af6      	subs	r6, r6, r3
 8087596:	e7ef      	b.n	8087578 <_ZN7FatFile7seekSetEm+0x66>

08087598 <_ZN7FatFile15openCachedEntryEPS_thh>:
                              uint8_t oflag, uint8_t lfnOrd) {
 8087598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808759a:	460f      	mov	r7, r1
 808759c:	4604      	mov	r4, r0
 808759e:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
 80875a0:	2100      	movs	r1, #0
 80875a2:	2224      	movs	r2, #36	; 0x24
                              uint8_t oflag, uint8_t lfnOrd) {
 80875a4:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
 80875a6:	f004 fca5 	bl	808bef4 <memset>
  m_vol = dirFile->m_vol;
 80875aa:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80875ac:	80a5      	strh	r5, [r4, #4]
  m_vol = dirFile->m_vol;
 80875ae:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 80875b0:	6a3b      	ldr	r3, [r7, #32]
 80875b2:	f005 050f 	and.w	r5, r5, #15
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80875b6:	f100 0234 	add.w	r2, r0, #52	; 0x34
  m_dirCluster = dirFile->m_firstCluster;
 80875ba:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80875bc:	016b      	lsls	r3, r5, #5
 80875be:	eb02 1545 	add.w	r5, r2, r5, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80875c2:	7aea      	ldrb	r2, [r5, #11]
 80875c4:	0717      	lsls	r7, r2, #28
 80875c6:	d502      	bpl.n	80875ce <_ZN7FatFile15openCachedEntryEPS_thh+0x36>
  m_attr = FILE_ATTR_CLOSED;
 80875c8:	2000      	movs	r0, #0
 80875ca:	7020      	strb	r0, [r4, #0]
}
 80875cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80875ce:	18c2      	adds	r2, r0, r3
 80875d0:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
 80875d4:	f001 0117 	and.w	r1, r1, #23
 80875d8:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80875da:	7aea      	ldrb	r2, [r5, #11]
 80875dc:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
 80875e0:	bf08      	it	eq
 80875e2:	f041 0108 	orreq.w	r1, r1, #8
  m_lfnOrd = lfnOrd;
 80875e6:	f89d 2018 	ldrb.w	r2, [sp, #24]
    m_attr |= FILE_ATTR_FILE;
 80875ea:	bf08      	it	eq
 80875ec:	7021      	strbeq	r1, [r4, #0]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80875ee:	f016 0f32 	tst.w	r6, #50	; 0x32
  m_lfnOrd = lfnOrd;
 80875f2:	70e2      	strb	r2, [r4, #3]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 80875f4:	d004      	beq.n	8087600 <_ZN7FatFile15openCachedEntryEPS_thh+0x68>
    if (isSubDir() || isReadOnly()) {
 80875f6:	7822      	ldrb	r2, [r4, #0]
 80875f8:	06d5      	lsls	r5, r2, #27
 80875fa:	d4e5      	bmi.n	80875c8 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
 80875fc:	07d1      	lsls	r1, r2, #31
 80875fe:	d4e3      	bmi.n	80875c8 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
  m_flags = oflag & F_OFLAG;
 8087600:	f006 020f 	and.w	r2, r6, #15
 8087604:	70a2      	strb	r2, [r4, #2]
    return m_cache.lbn();
 8087606:	6b02      	ldr	r2, [r0, #48]	; 0x30
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8087608:	4403      	add	r3, r0
  m_dirBlock = m_vol->cacheBlockNumber();
 808760a:	61a2      	str	r2, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 808760c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
                 | dir->firstClusterLow;
 8087610:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8087614:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
 8087618:	06f2      	lsls	r2, r6, #27
 808761a:	d50d      	bpl.n	8087638 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 808761c:	b939      	cbnz	r1, 808762e <_ZN7FatFile15openCachedEntryEPS_thh+0x96>
    m_flags |= F_FILE_DIR_DIRTY;
 808761e:	78a3      	ldrb	r3, [r4, #2]
 8087620:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8087624:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8087626:	06b3      	lsls	r3, r6, #26
 8087628:	d40a      	bmi.n	8087640 <_ZN7FatFile15openCachedEntryEPS_thh+0xa8>
  return true;
 808762a:	2001      	movs	r0, #1
 808762c:	e7ce      	b.n	80875cc <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 808762e:	f000 fa52 	bl	8087ad6 <_ZN9FatVolume9freeChainEm>
 8087632:	2800      	cmp	r0, #0
 8087634:	d1f3      	bne.n	808761e <_ZN7FatFile15openCachedEntryEPS_thh+0x86>
 8087636:	e7c7      	b.n	80875c8 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
    m_firstCluster = firstCluster;
 8087638:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 808763a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808763c:	61e3      	str	r3, [r4, #28]
 808763e:	e7f2      	b.n	8087626 <_ZN7FatFile15openCachedEntryEPS_thh+0x8e>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8087640:	4620      	mov	r0, r4
 8087642:	69e1      	ldr	r1, [r4, #28]
 8087644:	f7ff ff65 	bl	8087512 <_ZN7FatFile7seekSetEm>
 8087648:	2800      	cmp	r0, #0
 808764a:	d1ee      	bne.n	808762a <_ZN7FatFile15openCachedEntryEPS_thh+0x92>
 808764c:	e7bc      	b.n	80875c8 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
	...

08087650 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8087650:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8087652:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 8087654:	4604      	mov	r4, r0
  if (!isOpen()) {
 8087656:	b90b      	cbnz	r3, 808765c <_ZN7FatFile4syncEv+0xc>
    return true;
 8087658:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 808765a:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 808765c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8087660:	2b00      	cmp	r3, #0
 8087662:	da23      	bge.n	80876ac <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8087664:	2101      	movs	r1, #1
 8087666:	f7ff fe4b 	bl	8087300 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 808766a:	4605      	mov	r5, r0
 808766c:	b928      	cbnz	r0, 808767a <_ZN7FatFile4syncEv+0x2a>
  m_error |= WRITE_ERROR;
 808766e:	7863      	ldrb	r3, [r4, #1]
  return false;
 8087670:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 8087672:	f043 0301 	orr.w	r3, r3, #1
 8087676:	7063      	strb	r3, [r4, #1]
  return false;
 8087678:	e7ef      	b.n	808765a <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 808767a:	7803      	ldrb	r3, [r0, #0]
 808767c:	2be5      	cmp	r3, #229	; 0xe5
 808767e:	d0f6      	beq.n	808766e <_ZN7FatFile4syncEv+0x1e>
    if (isFile()) {
 8087680:	7823      	ldrb	r3, [r4, #0]
 8087682:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8087684:	bf44      	itt	mi
 8087686:	69e3      	ldrmi	r3, [r4, #28]
 8087688:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 808768a:	8c23      	ldrh	r3, [r4, #32]
 808768c:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 808768e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8087690:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 8087692:	4b09      	ldr	r3, [pc, #36]	; (80876b8 <_ZN7FatFile4syncEv+0x68>)
 8087694:	681b      	ldr	r3, [r3, #0]
 8087696:	b12b      	cbz	r3, 80876a4 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8087698:	f100 0116 	add.w	r1, r0, #22
 808769c:	3018      	adds	r0, #24
 808769e:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80876a0:	8b2b      	ldrh	r3, [r5, #24]
 80876a2:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 80876a4:	78a3      	ldrb	r3, [r4, #2]
 80876a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80876aa:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 80876ac:	68a0      	ldr	r0, [r4, #8]
 80876ae:	f7fe ff69 	bl	8086584 <_ZN9FatVolume9cacheSyncEv>
 80876b2:	2800      	cmp	r0, #0
 80876b4:	d0db      	beq.n	808766e <_ZN7FatFile4syncEv+0x1e>
 80876b6:	e7cf      	b.n	8087658 <_ZN7FatFile4syncEv+0x8>
 80876b8:	20000cb8 	.word	0x20000cb8

080876bc <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 80876bc:	b510      	push	{r4, lr}
 80876be:	4604      	mov	r4, r0
  bool rtn = sync();
 80876c0:	f7ff ffc6 	bl	8087650 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 80876c4:	2300      	movs	r3, #0
 80876c6:	7023      	strb	r3, [r4, #0]
}
 80876c8:	bd10      	pop	{r4, pc}

080876ca <_ZN7FatFile4openEPS_PKch>:
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 80876ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80876cc:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80876ce:	2300      	movs	r3, #0
 80876d0:	b093      	sub	sp, #76	; 0x4c
 80876d2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
 80876d6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 80876d8:	4606      	mov	r6, r0
 80876da:	460c      	mov	r4, r1
 80876dc:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 80876de:	b113      	cbz	r3, 80876e6 <_ZN7FatFile4openEPS_PKch+0x1c>
  return false;
 80876e0:	2000      	movs	r0, #0
}
 80876e2:	b013      	add	sp, #76	; 0x4c
 80876e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
 80876e6:	780b      	ldrb	r3, [r1, #0]
 80876e8:	f013 0f70 	tst.w	r3, #112	; 0x70
 80876ec:	d0f8      	beq.n	80876e0 <_ZN7FatFile4openEPS_PKch+0x16>
  if (isDirSeparator(*path)) {
 80876ee:	7813      	ldrb	r3, [r2, #0]
 80876f0:	2b2f      	cmp	r3, #47	; 0x2f
 80876f2:	d112      	bne.n	808771a <_ZN7FatFile4openEPS_PKch+0x50>
    while (isDirSeparator(*path)) {
 80876f4:	9a01      	ldr	r2, [sp, #4]
 80876f6:	7813      	ldrb	r3, [r2, #0]
 80876f8:	2b2f      	cmp	r3, #47	; 0x2f
 80876fa:	d102      	bne.n	8087702 <_ZN7FatFile4openEPS_PKch+0x38>
      path++;
 80876fc:	3201      	adds	r2, #1
 80876fe:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 8087700:	e7f8      	b.n	80876f4 <_ZN7FatFile4openEPS_PKch+0x2a>
    if (*path == 0) {
 8087702:	68a1      	ldr	r1, [r4, #8]
 8087704:	b91b      	cbnz	r3, 808770e <_ZN7FatFile4openEPS_PKch+0x44>
      return openRoot(dirFile->m_vol);
 8087706:	4630      	mov	r0, r6
 8087708:	f7ff fe09 	bl	808731e <_ZN7FatFile8openRootEP9FatVolume>
 808770c:	e7e9      	b.n	80876e2 <_ZN7FatFile4openEPS_PKch+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 808770e:	a809      	add	r0, sp, #36	; 0x24
 8087710:	f7ff fe05 	bl	808731e <_ZN7FatFile8openRootEP9FatVolume>
 8087714:	2800      	cmp	r0, #0
 8087716:	d0e3      	beq.n	80876e0 <_ZN7FatFile4openEPS_PKch+0x16>
    dirFile = &tmpDir;
 8087718:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 808771a:	9801      	ldr	r0, [sp, #4]
 808771c:	aa01      	add	r2, sp, #4
 808771e:	a903      	add	r1, sp, #12
 8087720:	f7fe ff4c 	bl	80865bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8087724:	2800      	cmp	r0, #0
 8087726:	d0db      	beq.n	80876e0 <_ZN7FatFile4openEPS_PKch+0x16>
    if (*path == 0) {
 8087728:	9b01      	ldr	r3, [sp, #4]
 808772a:	781b      	ldrb	r3, [r3, #0]
 808772c:	b19b      	cbz	r3, 8087756 <_ZN7FatFile4openEPS_PKch+0x8c>
    if (!open(dirFile, &fname, O_READ)) {
 808772e:	2301      	movs	r3, #1
 8087730:	4621      	mov	r1, r4
 8087732:	4630      	mov	r0, r6
 8087734:	aa03      	add	r2, sp, #12
 8087736:	f7ff f875 	bl	8086824 <_ZN7FatFile4openEPS_P7fname_th>
 808773a:	2800      	cmp	r0, #0
 808773c:	d0d0      	beq.n	80876e0 <_ZN7FatFile4openEPS_PKch+0x16>
    tmpDir = *this;
 808773e:	4635      	mov	r5, r6
 8087740:	ac09      	add	r4, sp, #36	; 0x24
 8087742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8087744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8087746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8087748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808774a:	682b      	ldr	r3, [r5, #0]
    close();
 808774c:	4630      	mov	r0, r6
    tmpDir = *this;
 808774e:	6023      	str	r3, [r4, #0]
    close();
 8087750:	f7ff ffb4 	bl	80876bc <_ZN7FatFile5closeEv>
  while (1) {
 8087754:	e7e0      	b.n	8087718 <_ZN7FatFile4openEPS_PKch+0x4e>
  return open(dirFile, &fname, oflag);
 8087756:	463b      	mov	r3, r7
 8087758:	4621      	mov	r1, r4
 808775a:	4630      	mov	r0, r6
 808775c:	aa03      	add	r2, sp, #12
 808775e:	f7ff f861 	bl	8086824 <_ZN7FatFile4openEPS_P7fname_th>
 8087762:	e7be      	b.n	80876e2 <_ZN7FatFile4openEPS_PKch+0x18>

08087764 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8087764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8087768:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
 808776a:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & O_WRITE)) {
 808776c:	071d      	lsls	r5, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
 808776e:	4689      	mov	r9, r1
 8087770:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & O_WRITE)) {
 8087772:	d55b      	bpl.n	808782c <_ZN7FatFile5writeEPKvj+0xc8>
 8087774:	7883      	ldrb	r3, [r0, #2]
 8087776:	0799      	lsls	r1, r3, #30
 8087778:	d558      	bpl.n	808782c <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 808777a:	075a      	lsls	r2, r3, #29
 808777c:	d451      	bmi.n	8087822 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 808777e:	6963      	ldr	r3, [r4, #20]
 8087780:	43db      	mvns	r3, r3
 8087782:	42bb      	cmp	r3, r7
 8087784:	d352      	bcc.n	808782c <_ZN7FatFile5writeEPKvj+0xc8>
 8087786:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8087788:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
 808778c:	6963      	ldr	r3, [r4, #20]
 808778e:	f1b8 0f00 	cmp.w	r8, #0
 8087792:	f000 808f 	beq.w	80878b4 <_ZN7FatFile5writeEPKvj+0x150>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8087796:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8087798:	f3c3 0508 	ubfx	r5, r3, #0, #9
    return (position >> 9) & m_clusterBlockMask;
 808779c:	7946      	ldrb	r6, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 808779e:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 80877a2:	d10e      	bne.n	80877c2 <_ZN7FatFile5writeEPKvj+0x5e>
 80877a4:	b96d      	cbnz	r5, 80877c2 <_ZN7FatFile5writeEPKvj+0x5e>
 80877a6:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
 80877a8:	2900      	cmp	r1, #0
 80877aa:	d046      	beq.n	808783a <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80877ac:	4652      	mov	r2, sl
 80877ae:	f000 f8fd 	bl	80879ac <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80877b2:	2800      	cmp	r0, #0
 80877b4:	db3a      	blt.n	808782c <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80877b6:	d104      	bne.n	80877c2 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
 80877b8:	4620      	mov	r0, r4
 80877ba:	f7ff fd59 	bl	8087270 <_ZN7FatFile10addClusterEv>
 80877be:	2800      	cmp	r0, #0
 80877c0:	d034      	beq.n	808782c <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80877c2:	6921      	ldr	r1, [r4, #16]
 80877c4:	68a0      	ldr	r0, [r4, #8]
 80877c6:	f000 f8eb 	bl	80879a0 <_ZNK9FatVolume17clusterStartBlockEm>
 80877ca:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
 80877cc:	68a0      	ldr	r0, [r4, #8]
 80877ce:	b915      	cbnz	r5, 80877d6 <_ZN7FatFile5writeEPKvj+0x72>
 80877d0:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 80877d4:	d23f      	bcs.n	8087856 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 80877d6:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
 80877da:	4546      	cmp	r6, r8
 80877dc:	bf28      	it	cs
 80877de:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 80877e0:	2d00      	cmp	r5, #0
 80877e2:	d136      	bne.n	8087852 <_ZN7FatFile5writeEPKvj+0xee>
 80877e4:	6962      	ldr	r2, [r4, #20]
 80877e6:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 80877e8:	429a      	cmp	r2, r3
 80877ea:	bf34      	ite	cc
 80877ec:	2201      	movcc	r2, #1
 80877ee:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
 80877f0:	3028      	adds	r0, #40	; 0x28
 80877f2:	f000 f8b2 	bl	808795a <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 80877f6:	b1c8      	cbz	r0, 808782c <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80877f8:	4428      	add	r0, r5
 80877fa:	4632      	mov	r2, r6
 80877fc:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 80877fe:	4435      	add	r5, r6
      memcpy(dst, src, n);
 8087800:	f004 fb6a 	bl	808bed8 <memcpy>
      if (512 == (n + blockOffset)) {
 8087804:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8087808:	d104      	bne.n	8087814 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
 808780a:	68a0      	ldr	r0, [r4, #8]
 808780c:	3028      	adds	r0, #40	; 0x28
 808780e:	f000 f87d 	bl	808790c <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8087812:	b158      	cbz	r0, 808782c <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8087814:	6963      	ldr	r3, [r4, #20]
    src += n;
 8087816:	44b1      	add	r9, r6
    m_curPosition += n;
 8087818:	4433      	add	r3, r6
 808781a:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 808781c:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
 8087820:	e7b4      	b.n	808778c <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
 8087822:	69c1      	ldr	r1, [r0, #28]
 8087824:	f7ff fe75 	bl	8087512 <_ZN7FatFile7seekSetEm>
 8087828:	2800      	cmp	r0, #0
 808782a:	d1a8      	bne.n	808777e <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 808782c:	7863      	ldrb	r3, [r4, #1]
  return -1;
 808782e:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= WRITE_ERROR;
 8087832:	f043 0301 	orr.w	r3, r3, #1
 8087836:	7063      	strb	r3, [r4, #1]
  return -1;
 8087838:	e04d      	b.n	80878d6 <_ZN7FatFile5writeEPKvj+0x172>
        if (m_firstCluster == 0) {
 808783a:	6a23      	ldr	r3, [r4, #32]
 808783c:	b93b      	cbnz	r3, 808784e <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
 808783e:	4620      	mov	r0, r4
 8087840:	f7ff fd16 	bl	8087270 <_ZN7FatFile10addClusterEv>
 8087844:	2800      	cmp	r0, #0
 8087846:	d0f1      	beq.n	808782c <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
 8087848:	6923      	ldr	r3, [r4, #16]
 808784a:	6223      	str	r3, [r4, #32]
 808784c:	e7b9      	b.n	80877c2 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
 808784e:	6123      	str	r3, [r4, #16]
 8087850:	e7b7      	b.n	80877c2 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8087852:	2201      	movs	r2, #1
 8087854:	e7cc      	b.n	80877f0 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
 8087856:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 808785a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 808785c:	d319      	bcc.n	8087892 <_ZN7FatFile5writeEPKvj+0x12e>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 808785e:	7903      	ldrb	r3, [r0, #4]
      uint8_t nBlock = nToWrite >> 9;
 8087860:	f3c8 2c47 	ubfx	ip, r8, #9, #8
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8087864:	1b9b      	subs	r3, r3, r6
 8087866:	b2db      	uxtb	r3, r3
 8087868:	4563      	cmp	r3, ip
 808786a:	bf28      	it	cs
 808786c:	4663      	movcs	r3, ip
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 808786e:	4291      	cmp	r1, r2
      n = 512*nBlock;
 8087870:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8087874:	d307      	bcc.n	8087886 <_ZN7FatFile5writeEPKvj+0x122>
 8087876:	441a      	add	r2, r3
 8087878:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
 808787a:	bf82      	ittt	hi
 808787c:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
 8087880:	f880 5028 	strbhi.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8087884:	6302      	strhi	r2, [r0, #48]	; 0x30
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8087886:	68a0      	ldr	r0, [r4, #8]
 8087888:	6802      	ldr	r2, [r0, #0]
 808788a:	68d5      	ldr	r5, [r2, #12]
 808788c:	464a      	mov	r2, r9
 808788e:	47a8      	blx	r5
 8087890:	e7bf      	b.n	8087812 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
 8087892:	4291      	cmp	r1, r2
 8087894:	bf02      	ittt	eq
 8087896:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
 808789a:	f880 5028 	strbeq.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 808789e:	6303      	streq	r3, [r0, #48]	; 0x30
      if (!m_vol->writeBlock(block, src)) {
 80878a0:	68a0      	ldr	r0, [r4, #8]
 80878a2:	464a      	mov	r2, r9
 80878a4:	6803      	ldr	r3, [r0, #0]
 80878a6:	685b      	ldr	r3, [r3, #4]
 80878a8:	4798      	blx	r3
 80878aa:	2800      	cmp	r0, #0
 80878ac:	d0be      	beq.n	808782c <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
 80878ae:	f44f 7600 	mov.w	r6, #512	; 0x200
 80878b2:	e7af      	b.n	8087814 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
 80878b4:	69e1      	ldr	r1, [r4, #28]
 80878b6:	78a2      	ldrb	r2, [r4, #2]
 80878b8:	4299      	cmp	r1, r3
 80878ba:	d204      	bcs.n	80878c6 <_ZN7FatFile5writeEPKvj+0x162>
    m_fileSize = m_curPosition;
 80878bc:	61e3      	str	r3, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 80878be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80878c2:	70a2      	strb	r2, [r4, #2]
 80878c4:	e003      	b.n	80878ce <_ZN7FatFile5writeEPKvj+0x16a>
  } else if (m_dateTime) {
 80878c6:	4b08      	ldr	r3, [pc, #32]	; (80878e8 <_ZN7FatFile5writeEPKvj+0x184>)
 80878c8:	681b      	ldr	r3, [r3, #0]
 80878ca:	2b00      	cmp	r3, #0
 80878cc:	d1f7      	bne.n	80878be <_ZN7FatFile5writeEPKvj+0x15a>
  if (m_flags & O_SYNC) {
 80878ce:	78a3      	ldrb	r3, [r4, #2]
 80878d0:	071b      	lsls	r3, r3, #28
 80878d2:	d402      	bmi.n	80878da <_ZN7FatFile5writeEPKvj+0x176>
  return nbyte;
 80878d4:	4638      	mov	r0, r7
}
 80878d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
 80878da:	4620      	mov	r0, r4
 80878dc:	f7ff feb8 	bl	8087650 <_ZN7FatFile4syncEv>
 80878e0:	2800      	cmp	r0, #0
 80878e2:	d1f7      	bne.n	80878d4 <_ZN7FatFile5writeEPKvj+0x170>
 80878e4:	e7a2      	b.n	808782c <_ZN7FatFile5writeEPKvj+0xc8>
 80878e6:	bf00      	nop
 80878e8:	20000cb8 	.word	0x20000cb8

080878ec <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80878ec:	b570      	push	{r4, r5, r6, lr}
 80878ee:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80878f0:	460c      	mov	r4, r1
    }
 80878f2:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80878f4:	b149      	cbz	r1, 808790a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80878f6:	f004 fb64 	bl	808bfc2 <strlen>
 80878fa:	682b      	ldr	r3, [r5, #0]
 80878fc:	4602      	mov	r2, r0
 80878fe:	4621      	mov	r1, r4
 8087900:	4628      	mov	r0, r5
    }
 8087902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 8087906:	68db      	ldr	r3, [r3, #12]
 8087908:	4718      	bx	r3
    }
 808790a:	bd70      	pop	{r4, r5, r6, pc}

0808790c <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 808790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 808790e:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 8087910:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8087912:	07da      	lsls	r2, r3, #31
 8087914:	d51f      	bpl.n	8087956 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8087916:	6840      	ldr	r0, [r0, #4]
 8087918:	f104 060c 	add.w	r6, r4, #12
 808791c:	6803      	ldr	r3, [r0, #0]
 808791e:	4632      	mov	r2, r6
 8087920:	685b      	ldr	r3, [r3, #4]
 8087922:	68a1      	ldr	r1, [r4, #8]
 8087924:	4798      	blx	r3
 8087926:	4605      	mov	r5, r0
 8087928:	b910      	cbnz	r0, 8087930 <_ZN8FatCache4syncEv+0x24>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 808792a:	2500      	movs	r5, #0
}
 808792c:	4628      	mov	r0, r5
 808792e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8087930:	7823      	ldrb	r3, [r4, #0]
 8087932:	079b      	lsls	r3, r3, #30
 8087934:	d404      	bmi.n	8087940 <_ZN8FatCache4syncEv+0x34>
    m_status &= ~CACHE_STATUS_DIRTY;
 8087936:	7823      	ldrb	r3, [r4, #0]
 8087938:	f023 0301 	bic.w	r3, r3, #1
 808793c:	7023      	strb	r3, [r4, #0]
 808793e:	e7f5      	b.n	808792c <_ZN8FatCache4syncEv+0x20>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8087940:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8087944:	6901      	ldr	r1, [r0, #16]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8087946:	6803      	ldr	r3, [r0, #0]
 8087948:	4632      	mov	r2, r6
 808794a:	685b      	ldr	r3, [r3, #4]
 808794c:	4439      	add	r1, r7
 808794e:	4798      	blx	r3
 8087950:	2800      	cmp	r0, #0
 8087952:	d1f0      	bne.n	8087936 <_ZN8FatCache4syncEv+0x2a>
 8087954:	e7e9      	b.n	808792a <_ZN8FatCache4syncEv+0x1e>
  return true;
 8087956:	2501      	movs	r5, #1
 8087958:	e7e8      	b.n	808792c <_ZN8FatCache4syncEv+0x20>

0808795a <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808795a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 808795c:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808795e:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8087960:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8087962:	460e      	mov	r6, r1
 8087964:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8087966:	d009      	beq.n	808797c <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 8087968:	f7ff ffd0 	bl	808790c <_ZN8FatCache4syncEv>
 808796c:	b908      	cbnz	r0, 8087972 <_ZN8FatCache4readEmh+0x18>
  return 0;
 808796e:	2000      	movs	r0, #0
}
 8087970:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 8087972:	076b      	lsls	r3, r5, #29
 8087974:	d50a      	bpl.n	808798c <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 8087976:	2300      	movs	r3, #0
    m_lbn = lbn;
 8087978:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 808797a:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 808797c:	4620      	mov	r0, r4
 808797e:	7822      	ldrb	r2, [r4, #0]
 8087980:	f005 0503 	and.w	r5, r5, #3
 8087984:	4315      	orrs	r5, r2
 8087986:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 808798a:	e7f1      	b.n	8087970 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 808798c:	6860      	ldr	r0, [r4, #4]
 808798e:	4631      	mov	r1, r6
 8087990:	6803      	ldr	r3, [r0, #0]
 8087992:	f104 020c 	add.w	r2, r4, #12
 8087996:	681b      	ldr	r3, [r3, #0]
 8087998:	4798      	blx	r3
 808799a:	2800      	cmp	r0, #0
 808799c:	d1eb      	bne.n	8087976 <_ZN8FatCache4readEmh+0x1c>
 808799e:	e7e6      	b.n	808796e <_ZN8FatCache4readEmh+0x14>

080879a0 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 80879a0:	7983      	ldrb	r3, [r0, #6]
 80879a2:	3902      	subs	r1, #2
 80879a4:	6940      	ldr	r0, [r0, #20]
 80879a6:	4099      	lsls	r1, r3
}
 80879a8:	4408      	add	r0, r1
 80879aa:	4770      	bx	lr

080879ac <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80879ac:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80879ae:	79c3      	ldrb	r3, [r0, #7]
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80879b0:	4605      	mov	r5, r0
  if (m_fatType == 32) {
 80879b2:	2b20      	cmp	r3, #32
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80879b4:	460c      	mov	r4, r1
 80879b6:	4616      	mov	r6, r2
  if (m_fatType == 32) {
 80879b8:	d118      	bne.n	80879ec <_ZN9FatVolume6fatGetEmPm+0x40>
    lba = m_fatStartBlock + (cluster >> 7);
 80879ba:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 80879bc:	2202      	movs	r2, #2
 80879be:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80879c2:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80879c6:	f7ff ffc8 	bl	808795a <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80879ca:	b910      	cbnz	r0, 80879d2 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 80879cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80879d0:	bd70      	pop	{r4, r5, r6, pc}
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 80879d2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80879d6:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80879da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
 80879de:	69ea      	ldr	r2, [r5, #28]
 80879e0:	4293      	cmp	r3, r2
  return 1;
 80879e2:	bf96      	itet	ls
 80879e4:	2001      	movls	r0, #1
    return 0;
 80879e6:	2000      	movhi	r0, #0
  *value = next;
 80879e8:	6033      	strls	r3, [r6, #0]
  return 1;
 80879ea:	e7f1      	b.n	80879d0 <_ZN9FatVolume6fatGetEmPm+0x24>
  if (m_fatType == 16) {
 80879ec:	2b10      	cmp	r3, #16
 80879ee:	d1ed      	bne.n	80879cc <_ZN9FatVolume6fatGetEmPm+0x20>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 80879f0:	6983      	ldr	r3, [r0, #24]
 80879f2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80879f6:	2202      	movs	r2, #2
 80879f8:	4419      	add	r1, r3
 80879fa:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80879fe:	f7ff ffac 	bl	808795a <_ZN8FatCache4readEmh>
    if (!pc) {
 8087a02:	2800      	cmp	r0, #0
 8087a04:	d0e2      	beq.n	80879cc <_ZN9FatVolume6fatGetEmPm+0x20>
    next = pc->fat16[cluster & 0XFF];
 8087a06:	b2e4      	uxtb	r4, r4
 8087a08:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
 8087a0c:	e7e7      	b.n	80879de <_ZN9FatVolume6fatGetEmPm+0x32>

08087a0e <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8087a0e:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8087a10:	79c3      	ldrb	r3, [r0, #7]
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8087a12:	460c      	mov	r4, r1
  if (m_fatType == 32) {
 8087a14:	2b20      	cmp	r3, #32
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8087a16:	4615      	mov	r5, r2
  if (m_fatType == 32) {
 8087a18:	d110      	bne.n	8087a3c <_ZN9FatVolume6fatPutEmm+0x2e>
    lba = m_fatStartBlock + (cluster >> 7);
 8087a1a:	6981      	ldr	r1, [r0, #24]
 8087a1c:	2203      	movs	r2, #3
 8087a1e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8087a22:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8087a26:	f7ff ff98 	bl	808795a <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8087a2a:	b908      	cbnz	r0, 8087a30 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8087a2c:	2000      	movs	r0, #0
}
 8087a2e:	bd38      	pop	{r3, r4, r5, pc}
    pc->fat32[cluster & 0X7F] = value;
 8087a30:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8087a34:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
 8087a38:	2001      	movs	r0, #1
 8087a3a:	e7f8      	b.n	8087a2e <_ZN9FatVolume6fatPutEmm+0x20>
  if (m_fatType == 16) {
 8087a3c:	2b10      	cmp	r3, #16
 8087a3e:	d1f5      	bne.n	8087a2c <_ZN9FatVolume6fatPutEmm+0x1e>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8087a40:	6983      	ldr	r3, [r0, #24]
 8087a42:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8087a46:	2203      	movs	r2, #3
 8087a48:	4419      	add	r1, r3
 8087a4a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8087a4e:	f7ff ff84 	bl	808795a <_ZN8FatCache4readEmh>
    if (!pc) {
 8087a52:	2800      	cmp	r0, #0
 8087a54:	d0ea      	beq.n	8087a2c <_ZN9FatVolume6fatPutEmm+0x1e>
    pc->fat16[cluster & 0XFF] = value;
 8087a56:	b2e4      	uxtb	r4, r4
 8087a58:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 8087a5c:	e7ec      	b.n	8087a38 <_ZN9FatVolume6fatPutEmm+0x2a>

08087a5e <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8087a5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8087a62:	4605      	mov	r5, r0
 8087a64:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8087a66:	460f      	mov	r7, r1
 8087a68:	b9b9      	cbnz	r1, 8087a9a <_ZN9FatVolume15allocateClusterEmPm+0x3c>
 8087a6a:	68c6      	ldr	r6, [r0, #12]
 8087a6c:	4634      	mov	r4, r6
    if (find > m_lastCluster) {
 8087a6e:	69eb      	ldr	r3, [r5, #28]
    find++;
 8087a70:	3401      	adds	r4, #1
      find = 2;
 8087a72:	42a3      	cmp	r3, r4
 8087a74:	bf38      	it	cc
 8087a76:	2402      	movcc	r4, #2
    int8_t fg = fatGet(find, &f);
 8087a78:	4628      	mov	r0, r5
 8087a7a:	4621      	mov	r1, r4
 8087a7c:	aa01      	add	r2, sp, #4
 8087a7e:	f7ff ff95 	bl	80879ac <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8087a82:	2800      	cmp	r0, #0
 8087a84:	db04      	blt.n	8087a90 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (fg && f == 0) {
 8087a86:	d001      	beq.n	8087a8c <_ZN9FatVolume15allocateClusterEmPm+0x2e>
 8087a88:	9b01      	ldr	r3, [sp, #4]
 8087a8a:	b143      	cbz	r3, 8087a9e <_ZN9FatVolume15allocateClusterEmPm+0x40>
    if (find == start) {
 8087a8c:	42b4      	cmp	r4, r6
 8087a8e:	d1ee      	bne.n	8087a6e <_ZN9FatVolume15allocateClusterEmPm+0x10>
  return false;
 8087a90:	2600      	movs	r6, #0
}
 8087a92:	4630      	mov	r0, r6
 8087a94:	b002      	add	sp, #8
 8087a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087a9a:	460e      	mov	r6, r1
 8087a9c:	e7e6      	b.n	8087a6c <_ZN9FatVolume15allocateClusterEmPm+0xe>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8087a9e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8087aa2:	4621      	mov	r1, r4
 8087aa4:	4628      	mov	r0, r5
 8087aa6:	f7ff ffb2 	bl	8087a0e <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
 8087aaa:	4606      	mov	r6, r0
 8087aac:	2800      	cmp	r0, #0
 8087aae:	d0ef      	beq.n	8087a90 <_ZN9FatVolume15allocateClusterEmPm+0x32>
  if (current) {
 8087ab0:	b17f      	cbz	r7, 8087ad2 <_ZN9FatVolume15allocateClusterEmPm+0x74>
    if (!fatPut(current, find)) {
 8087ab2:	4622      	mov	r2, r4
 8087ab4:	4639      	mov	r1, r7
 8087ab6:	4628      	mov	r0, r5
 8087ab8:	f7ff ffa9 	bl	8087a0e <_ZN9FatVolume6fatPutEmm>
 8087abc:	2800      	cmp	r0, #0
 8087abe:	d0e7      	beq.n	8087a90 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (m_freeClusterCount >= 0) {
 8087ac0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8087ac2:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8087ac4:	bfa4      	itt	ge
 8087ac6:	f103 33ff 	addge.w	r3, r3, #4294967295
 8087aca:	626b      	strge	r3, [r5, #36]	; 0x24
  *next = find;
 8087acc:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8087ad0:	e7df      	b.n	8087a92 <_ZN9FatVolume15allocateClusterEmPm+0x34>
    m_allocSearchStart = find;
 8087ad2:	60ec      	str	r4, [r5, #12]
 8087ad4:	e7f4      	b.n	8087ac0 <_ZN9FatVolume15allocateClusterEmPm+0x62>

08087ad6 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8087ad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8087ad8:	4604      	mov	r4, r0
 8087ada:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8087adc:	4629      	mov	r1, r5
 8087ade:	4620      	mov	r0, r4
 8087ae0:	aa01      	add	r2, sp, #4
 8087ae2:	f7ff ff63 	bl	80879ac <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8087ae6:	1e06      	subs	r6, r0, #0
 8087ae8:	db13      	blt.n	8087b12 <_ZN9FatVolume9freeChainEm+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8087aea:	2200      	movs	r2, #0
 8087aec:	4629      	mov	r1, r5
 8087aee:	4620      	mov	r0, r4
 8087af0:	f7ff ff8d 	bl	8087a0e <_ZN9FatVolume6fatPutEmm>
 8087af4:	b168      	cbz	r0, 8087b12 <_ZN9FatVolume9freeChainEm+0x3c>
    if (m_freeClusterCount >= 0) {
 8087af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8087af8:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8087afa:	bfa4      	itt	ge
 8087afc:	3301      	addge	r3, #1
 8087afe:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8087b00:	68e3      	ldr	r3, [r4, #12]
 8087b02:	42ab      	cmp	r3, r5
      m_allocSearchStart = cluster;
 8087b04:	bf88      	it	hi
 8087b06:	60e5      	strhi	r5, [r4, #12]
    }
    cluster = next;
 8087b08:	9d01      	ldr	r5, [sp, #4]
  } while (fg);
 8087b0a:	2e00      	cmp	r6, #0
 8087b0c:	d1e6      	bne.n	8087adc <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8087b0e:	b002      	add	sp, #8
 8087b10:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8087b12:	2000      	movs	r0, #0
 8087b14:	e7fb      	b.n	8087b0e <_ZN9FatVolume9freeChainEm+0x38>

08087b16 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8087b16:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 8087b18:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 8087b1a:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 8087b1c:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 8087b1e:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
 8087b22:	4604      	mov	r4, r0
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8087b24:	460d      	mov	r5, r1
  m_fatType = 0;
 8087b26:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 8087b28:	f100 0628 	add.w	r6, r0, #40	; 0x28
    m_vol = vol;
 8087b2c:	62c0      	str	r0, [r0, #44]	; 0x2c
    m_status = 0;
 8087b2e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8087b32:	6303      	str	r3, [r0, #48]	; 0x30
    m_vol = vol;
 8087b34:	f8c0 0238 	str.w	r0, [r0, #568]	; 0x238
    m_status = 0;
 8087b38:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8087b3c:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  if (part) {
 8087b40:	b1b9      	cbz	r1, 8087b72 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 8087b42:	2904      	cmp	r1, #4
 8087b44:	d901      	bls.n	8087b4a <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8087b46:	2000      	movs	r0, #0
}
 8087b48:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 8087b4a:	4611      	mov	r1, r2
 8087b4c:	4630      	mov	r0, r6
 8087b4e:	f7ff ff04 	bl	808795a <_ZN8FatCache4readEmh>
    if (!pc) {
 8087b52:	2800      	cmp	r0, #0
 8087b54:	d0f7      	beq.n	8087b46 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8087b56:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8087b5a:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8087b5e:	065b      	lsls	r3, r3, #25
 8087b60:	d1f1      	bne.n	8087b46 <_ZN9FatVolume4initEh+0x30>
 8087b62:	f105 011b 	add.w	r1, r5, #27
 8087b66:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8087b6a:	f8d1 5006 	ldr.w	r5, [r1, #6]
 8087b6e:	2d00      	cmp	r5, #0
 8087b70:	d0e9      	beq.n	8087b46 <_ZN9FatVolume4initEh+0x30>
 8087b72:	2200      	movs	r2, #0
 8087b74:	4629      	mov	r1, r5
 8087b76:	4630      	mov	r0, r6
 8087b78:	f7ff feef 	bl	808795a <_ZN8FatCache4readEmh>
  if (!pc) {
 8087b7c:	2800      	cmp	r0, #0
 8087b7e:	d0e2      	beq.n	8087b46 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 8087b80:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8087b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8087b88:	d1dd      	bne.n	8087b46 <_ZN9FatVolume4initEh+0x30>
 8087b8a:	7c03      	ldrb	r3, [r0, #16]
 8087b8c:	2b02      	cmp	r3, #2
 8087b8e:	d1da      	bne.n	8087b46 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 8087b90:	89c3      	ldrh	r3, [r0, #14]
 8087b92:	2b00      	cmp	r3, #0
 8087b94:	d0d7      	beq.n	8087b46 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8087b96:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 8087b98:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8087b9a:	1e4b      	subs	r3, r1, #1
 8087b9c:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 8087b9e:	2300      	movs	r3, #0
 8087ba0:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8087ba2:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8087ba4:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8087ba6:	4299      	cmp	r1, r3
 8087ba8:	d007      	beq.n	8087bba <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 8087baa:	3e01      	subs	r6, #1
 8087bac:	d0cb      	beq.n	8087b46 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8087bae:	79a2      	ldrb	r2, [r4, #6]
 8087bb0:	005b      	lsls	r3, r3, #1
 8087bb2:	3201      	adds	r2, #1
 8087bb4:	b2db      	uxtb	r3, r3
 8087bb6:	71a2      	strb	r2, [r4, #6]
 8087bb8:	e7f5      	b.n	8087ba6 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8087bba:	8ac1      	ldrh	r1, [r0, #22]
 8087bbc:	b901      	cbnz	r1, 8087bc0 <_ZN9FatVolume4initEh+0xaa>
 8087bbe:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8087bc0:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8087bc2:	89c3      	ldrh	r3, [r0, #14]
 8087bc4:	442b      	add	r3, r5
 8087bc6:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8087bc8:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8087bcc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8087bd0:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8087bd2:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8087bd4:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 8087bd8:	0149      	lsls	r1, r1, #5
 8087bda:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8087bde:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 8087be2:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 8087be4:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 8087be8:	b902      	cbnz	r2, 8087bec <_ZN9FatVolume4initEh+0xd6>
 8087bea:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8087bec:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 8087bee:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8087bf0:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 8087bf2:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 8087bf4:	1c4b      	adds	r3, r1, #1
 8087bf6:	61e3      	str	r3, [r4, #28]
    m_freeClusterCount = value;
 8087bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8087bfc:	6263      	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
 8087bfe:	f640 73f4 	movw	r3, #4084	; 0xff4
 8087c02:	4299      	cmp	r1, r3
 8087c04:	d802      	bhi.n	8087c0c <_ZN9FatVolume4initEh+0xf6>
    m_fatType = 12;
 8087c06:	230c      	movs	r3, #12
 8087c08:	71e3      	strb	r3, [r4, #7]
 8087c0a:	e79c      	b.n	8087b46 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 8087c0c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8087c10:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 8087c12:	bf89      	itett	hi
 8087c14:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 8087c16:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 8087c18:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8087c1a:	2320      	movhi	r3, #32
  return true;
 8087c1c:	2001      	movs	r0, #1
    m_fatType = 32;
 8087c1e:	71e3      	strb	r3, [r4, #7]
 8087c20:	e792      	b.n	8087b48 <_ZN9FatVolume4initEh+0x32>
	...

08087c24 <_ZN15Adafruit_BME680C1Ea>:
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
{
  _BME680_SoftwareSPI_MOSI = -1;
 8087c24:	22ff      	movs	r2, #255	; 0xff
  : _cs(cspin)
 8087c26:	7701      	strb	r1, [r0, #28]
  _BME680_SoftwareSPI_MOSI = -1;
 8087c28:	4904      	ldr	r1, [pc, #16]	; (8087c3c <_ZN15Adafruit_BME680C1Ea+0x18>)
 8087c2a:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 8087c2c:	4904      	ldr	r1, [pc, #16]	; (8087c40 <_ZN15Adafruit_BME680C1Ea+0x1c>)
 8087c2e:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8087c30:	4904      	ldr	r1, [pc, #16]	; (8087c44 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8087c32:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8087c34:	2200      	movs	r2, #0
 8087c36:	6102      	str	r2, [r0, #16]
 8087c38:	7502      	strb	r2, [r0, #20]
}
 8087c3a:	4770      	bx	lr
 8087c3c:	20000cc1 	.word	0x20000cc1
 8087c40:	20000cc0 	.word	0x20000cc0
 8087c44:	20000cc2 	.word	0x20000cc2

08087c48 <_ZN15Adafruit_BME68014performReadingEv>:
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8087c48:	2301      	movs	r3, #1
bool Adafruit_BME680::performReading(void) {
 8087c4a:	b530      	push	{r4, r5, lr}
 8087c4c:	4604      	mov	r4, r0
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8087c4e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 8087c52:	7ca3      	ldrb	r3, [r4, #18]
  uint8_t set_required_settings = 0;
 8087c54:	7c40      	ldrb	r0, [r0, #17]
bool Adafruit_BME680::performReading(void) {
 8087c56:	b087      	sub	sp, #28
  if (_humEnabled)
 8087c58:	b10b      	cbz	r3, 8087c5e <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 8087c5a:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8087c5e:	7ce3      	ldrb	r3, [r4, #19]
 8087c60:	b10b      	cbz	r3, 8087c66 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 8087c62:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8087c66:	7c23      	ldrb	r3, [r4, #16]
 8087c68:	b10b      	cbz	r3, 8087c6e <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 8087c6a:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8087c6e:	7d23      	ldrb	r3, [r4, #20]
 8087c70:	b10b      	cbz	r3, 8087c76 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8087c72:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8087c76:	f104 0520 	add.w	r5, r4, #32
 8087c7a:	4629      	mov	r1, r5
 8087c7c:	f7f8 fb30 	bl	80802e0 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8087c80:	b118      	cbz	r0, 8087c8a <_ZN15Adafruit_BME68014performReadingEv+0x42>
    return false;
 8087c82:	2500      	movs	r5, #0
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
}
 8087c84:	4628      	mov	r0, r5
 8087c86:	b007      	add	sp, #28
 8087c88:	bd30      	pop	{r4, r5, pc}
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8087c8a:	4628      	mov	r0, r5
 8087c8c:	f7f8 fae9 	bl	8080262 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8087c90:	2800      	cmp	r0, #0
 8087c92:	d1f6      	bne.n	8087c82 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8087c94:	4629      	mov	r1, r5
 8087c96:	f10d 0002 	add.w	r0, sp, #2
 8087c9a:	f7f8 fc9b 	bl	80805d4 <bme680_get_profile_dur>
  delay(meas_period * 2); /* Delay till the measurement is ready */
 8087c9e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8087ca2:	0040      	lsls	r0, r0, #1
 8087ca4:	f001 ff78 	bl	8089b98 <delay>
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8087ca8:	4629      	mov	r1, r5
 8087caa:	a801      	add	r0, sp, #4
 8087cac:	f7f8 fcc6 	bl	808063c <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8087cb0:	2800      	cmp	r0, #0
 8087cb2:	d1e6      	bne.n	8087c82 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  if (_tempEnabled) {
 8087cb4:	7c63      	ldrb	r3, [r4, #17]
 8087cb6:	b33b      	cbz	r3, 8087d08 <_ZN15Adafruit_BME68014performReadingEv+0xc0>
    temperature = data.temperature / 100.0;
 8087cb8:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8087cbc:	f003 f946 	bl	808af4c <__aeabi_i2d>
 8087cc0:	2200      	movs	r2, #0
 8087cc2:	4b17      	ldr	r3, [pc, #92]	; (8087d20 <_ZN15Adafruit_BME68014performReadingEv+0xd8>)
 8087cc4:	f003 fad6 	bl	808b274 <__aeabi_ddiv>
 8087cc8:	f003 fca2 	bl	808b610 <__aeabi_d2f>
  if (_humEnabled) {
 8087ccc:	7ca3      	ldrb	r3, [r4, #18]
 8087cce:	6020      	str	r0, [r4, #0]
 8087cd0:	b1e3      	cbz	r3, 8087d0c <_ZN15Adafruit_BME68014performReadingEv+0xc4>
    humidity = data.humidity / 1000.0;
 8087cd2:	9804      	ldr	r0, [sp, #16]
 8087cd4:	f003 f92a 	bl	808af2c <__aeabi_ui2d>
 8087cd8:	2200      	movs	r2, #0
 8087cda:	4b12      	ldr	r3, [pc, #72]	; (8087d24 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8087cdc:	f003 faca 	bl	808b274 <__aeabi_ddiv>
 8087ce0:	f003 fc96 	bl	808b610 <__aeabi_d2f>
  if (_presEnabled) {
 8087ce4:	7ce3      	ldrb	r3, [r4, #19]
 8087ce6:	60a0      	str	r0, [r4, #8]
 8087ce8:	b193      	cbz	r3, 8087d10 <_ZN15Adafruit_BME68014performReadingEv+0xc8>
    pressure = data.pressure;
 8087cea:	9803      	ldr	r0, [sp, #12]
 8087cec:	f003 fd96 	bl	808b81c <__aeabi_ui2f>
  if (_gasEnabled) {
 8087cf0:	7d25      	ldrb	r5, [r4, #20]
 8087cf2:	6060      	str	r0, [r4, #4]
 8087cf4:	b18d      	cbz	r5, 8087d1a <_ZN15Adafruit_BME68014performReadingEv+0xd2>
    if (data.status & BME680_HEAT_STAB_MSK) {
 8087cf6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8087cfa:	06db      	lsls	r3, r3, #27
 8087cfc:	d50a      	bpl.n	8087d14 <_ZN15Adafruit_BME68014performReadingEv+0xcc>
      gas_resistance = data.gas_resistance;
 8087cfe:	9805      	ldr	r0, [sp, #20]
 8087d00:	f003 fd8c 	bl	808b81c <__aeabi_ui2f>
 8087d04:	60e0      	str	r0, [r4, #12]
 8087d06:	e7bd      	b.n	8087c84 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
    temperature = NAN;
 8087d08:	4807      	ldr	r0, [pc, #28]	; (8087d28 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8087d0a:	e7df      	b.n	8087ccc <_ZN15Adafruit_BME68014performReadingEv+0x84>
    humidity = NAN;
 8087d0c:	4806      	ldr	r0, [pc, #24]	; (8087d28 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8087d0e:	e7e9      	b.n	8087ce4 <_ZN15Adafruit_BME68014performReadingEv+0x9c>
    pressure = NAN;
 8087d10:	4805      	ldr	r0, [pc, #20]	; (8087d28 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8087d12:	e7ed      	b.n	8087cf0 <_ZN15Adafruit_BME68014performReadingEv+0xa8>
      gas_resistance = 0;
 8087d14:	2300      	movs	r3, #0
 8087d16:	60e3      	str	r3, [r4, #12]
 8087d18:	e7b4      	b.n	8087c84 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
  return true;
 8087d1a:	2501      	movs	r5, #1
 8087d1c:	e7b2      	b.n	8087c84 <_ZN15Adafruit_BME68014performReadingEv+0x3c>
 8087d1e:	bf00      	nop
 8087d20:	40590000 	.word	0x40590000
 8087d24:	408f4000 	.word	0x408f4000
 8087d28:	7fc00000 	.word	0x7fc00000

08087d2c <_ZN7HIH61XX5startEv>:

uint8_t HIH61XX::start() {
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
 8087d2c:	7983      	ldrb	r3, [r0, #6]
 8087d2e:	f063 037f 	orn	r3, r3, #127	; 0x7f

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8087d32:	f023 030f 	bic.w	r3, r3, #15
 8087d36:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 8087d38:	2000      	movs	r0, #0
 8087d3a:	4770      	bx	lr

08087d3c <_ZN7HIH61XX4stopEv>:

uint8_t HIH61XX::stop() {
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
 8087d3c:	7983      	ldrb	r3, [r0, #6]
 8087d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8087d42:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 8087d44:	2000      	movs	r0, #0
 8087d46:	4770      	bx	lr

08087d48 <_ZN7HIH61XXC1Eh>:
HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 8087d48:	4a03      	ldr	r2, [pc, #12]	; (8087d58 <_ZN7HIH61XXC1Eh+0x10>)
 8087d4a:	7101      	strb	r1, [r0, #4]
 8087d4c:	6002      	str	r2, [r0, #0]
 8087d4e:	2200      	movs	r2, #0
 8087d50:	7182      	strb	r2, [r0, #6]
 8087d52:	6082      	str	r2, [r0, #8]
}
 8087d54:	4770      	bx	lr
 8087d56:	bf00      	nop
 8087d58:	0808ff64 	.word	0x0808ff64

08087d5c <_ZN7HIH61XX6updateEv>:

uint8_t HIH61XX::update() {
 8087d5c:	b570      	push	{r4, r5, r6, lr}
            return f & RunningFlag;
 8087d5e:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8087d62:	4604      	mov	r4, r0
    if (!isRunning()) {
 8087d64:	2b00      	cmp	r3, #0
 8087d66:	db07      	blt.n	8087d78 <_ZN7HIH61XX6updateEv+0x1c>
        return setError(NotRunningError);
 8087d68:	2603      	movs	r6, #3
            f = (f & ~ErrorMask) | error;
 8087d6a:	f023 030f 	bic.w	r3, r3, #15
 8087d6e:	f043 0303 	orr.w	r3, r3, #3
 8087d72:	7183      	strb	r3, [r0, #6]
    } else {
        Serial.print("...");
        Serial.println(azer);
        return setError(ConnectionError);
    }
}
 8087d74:	4630      	mov	r0, r6
 8087d76:	bd70      	pop	{r4, r5, r6, pc}
    Wire.beginTransmission(a);
 8087d78:	f002 ff34 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8087d7c:	7921      	ldrb	r1, [r4, #4]
 8087d7e:	f002 fdb9 	bl	808a8f4 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 8087d82:	f002 ff2f 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8087d86:	f002 fdd8 	bl	808a93a <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 8087d8a:	4606      	mov	r6, r0
 8087d8c:	2800      	cmp	r0, #0
 8087d8e:	d15b      	bne.n	8087e48 <_ZN7HIH61XX6updateEv+0xec>
            delay(10);
 8087d90:	200a      	movs	r0, #10
 8087d92:	f001 ff01 	bl	8089b98 <delay>
            Wire.requestFrom(a, (uint8_t) 4);
 8087d96:	f002 ff25 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8087d9a:	2204      	movs	r2, #4
 8087d9c:	7921      	ldrb	r1, [r4, #4]
 8087d9e:	f002 fda6 	bl	808a8ee <_ZN7TwoWire11requestFromEhj>
            if (Wire.available()) {
 8087da2:	f002 ff1f 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8087da6:	6803      	ldr	r3, [r0, #0]
 8087da8:	691b      	ldr	r3, [r3, #16]
 8087daa:	4798      	blx	r3
 8087dac:	2800      	cmp	r0, #0
 8087dae:	d043      	beq.n	8087e38 <_ZN7HIH61XX6updateEv+0xdc>
                x = Wire.read();
 8087db0:	f002 ff18 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8087db4:	6803      	ldr	r3, [r0, #0]
 8087db6:	695b      	ldr	r3, [r3, #20]
 8087db8:	4798      	blx	r3
 8087dba:	4605      	mov	r5, r0
                y = Wire.read();
 8087dbc:	f002 ff12 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8087dc0:	6803      	ldr	r3, [r0, #0]
 8087dc2:	695b      	ldr	r3, [r3, #20]
 8087dc4:	4798      	blx	r3
                s = x >> 6;
 8087dc6:	f3c5 1381 	ubfx	r3, r5, #6, #2
                switch (s) {
 8087dca:	2b01      	cmp	r3, #1
 8087dcc:	d023      	beq.n	8087e16 <_ZN7HIH61XX6updateEv+0xba>
 8087dce:	2b02      	cmp	r3, #2
 8087dd0:	d026      	beq.n	8087e20 <_ZN7HIH61XX6updateEv+0xc4>
 8087dd2:	2b00      	cmp	r3, #0
 8087dd4:	d1dc      	bne.n	8087d90 <_ZN7HIH61XX6updateEv+0x34>
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 8087dd6:	022d      	lsls	r5, r5, #8
 8087dd8:	b2c0      	uxtb	r0, r0
 8087dda:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
 8087dde:	4305      	orrs	r5, r0
 8087de0:	8125      	strh	r5, [r4, #8]
                        x = Wire.read();
 8087de2:	f002 feff 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8087de6:	6803      	ldr	r3, [r0, #0]
 8087de8:	695b      	ldr	r3, [r3, #20]
 8087dea:	4798      	blx	r3
 8087dec:	4605      	mov	r5, r0
                        y = Wire.read();
 8087dee:	f002 fef9 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8087df2:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8087df4:	022d      	lsls	r5, r5, #8
                        y = Wire.read();
 8087df6:	695b      	ldr	r3, [r3, #20]
 8087df8:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8087dfa:	b2ad      	uxth	r5, r5
 8087dfc:	b2c0      	uxtb	r0, r0
 8087dfe:	4305      	orrs	r5, r0
 8087e00:	10ad      	asrs	r5, r5, #2
 8087e02:	8165      	strh	r5, [r4, #10]
                        Wire.endTransmission();
 8087e04:	f002 feee 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8087e08:	f002 fd97 	bl	808a93a <_ZN7TwoWire15endTransmissionEv>
 8087e0c:	79a3      	ldrb	r3, [r4, #6]
 8087e0e:	f023 030f 	bic.w	r3, r3, #15
 8087e12:	71a3      	strb	r3, [r4, #6]
                        return setError(0);
 8087e14:	e7ae      	b.n	8087d74 <_ZN7HIH61XX6updateEv+0x18>
                        Wire.endTransmission();
 8087e16:	f002 fee5 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8087e1a:	f002 fd8e 	bl	808a93a <_ZN7TwoWire15endTransmissionEv>
                        break;
 8087e1e:	e7b7      	b.n	8087d90 <_ZN7HIH61XX6updateEv+0x34>
                        Wire.endTransmission();
 8087e20:	f002 fee0 	bl	808abe4 <_Z19__fetch_global_Wirev>
 8087e24:	f002 fd89 	bl	808a93a <_ZN7TwoWire15endTransmissionEv>
 8087e28:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 8087e2a:	2604      	movs	r6, #4
 8087e2c:	f023 030f 	bic.w	r3, r3, #15
 8087e30:	f043 0304 	orr.w	r3, r3, #4
 8087e34:	71a3      	strb	r3, [r4, #6]
 8087e36:	e79d      	b.n	8087d74 <_ZN7HIH61XX6updateEv+0x18>
 8087e38:	79a3      	ldrb	r3, [r4, #6]
                return setError(CommunicationError);
 8087e3a:	2602      	movs	r6, #2
 8087e3c:	f023 030f 	bic.w	r3, r3, #15
 8087e40:	f043 0302 	orr.w	r3, r3, #2
 8087e44:	71a3      	strb	r3, [r4, #6]
 8087e46:	e795      	b.n	8087d74 <_ZN7HIH61XX6updateEv+0x18>
        Serial.print("...");
 8087e48:	f002 fb8a 	bl	808a560 <_Z16_fetch_usbserialv>
 8087e4c:	490a      	ldr	r1, [pc, #40]	; (8087e78 <_ZN7HIH61XX6updateEv+0x11c>)
 8087e4e:	f001 fb1b 	bl	8089488 <_ZN5Print5printEPKc>
        Serial.println(azer);
 8087e52:	f002 fb85 	bl	808a560 <_Z16_fetch_usbserialv>
 8087e56:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8087e58:	4631      	mov	r1, r6
 8087e5a:	220a      	movs	r2, #10
 8087e5c:	f001 fb3b 	bl	80894d6 <_ZN5Print11printNumberEmh>
        n += println();
 8087e60:	4628      	mov	r0, r5
 8087e62:	f001 fb18 	bl	8089496 <_ZN5Print7printlnEv>
 8087e66:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 8087e68:	2601      	movs	r6, #1
 8087e6a:	f023 030f 	bic.w	r3, r3, #15
 8087e6e:	f043 0301 	orr.w	r3, r3, #1
 8087e72:	71a3      	strb	r3, [r4, #6]
 8087e74:	e77e      	b.n	8087d74 <_ZN7HIH61XX6updateEv+0x18>
 8087e76:	bf00      	nop
 8087e78:	0808fbb9 	.word	0x0808fbb9

08087e7c <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8087e7c:	2a68      	cmp	r2, #104	; 0x68
uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 8087e7e:	b538      	push	{r3, r4, r5, lr}
 8087e80:	460d      	mov	r5, r1
    switch (command) {
 8087e82:	d01a      	beq.n	8087eba <_ZN7HIH61XX14commandProcessER6Streamh+0x3e>
 8087e84:	d80c      	bhi.n	8087ea0 <_ZN7HIH61XX14commandProcessER6Streamh+0x24>
 8087e86:	2a31      	cmp	r2, #49	; 0x31
 8087e88:	d038      	beq.n	8087efc <_ZN7HIH61XX14commandProcessER6Streamh+0x80>
 8087e8a:	2a61      	cmp	r2, #97	; 0x61
 8087e8c:	d030      	beq.n	8087ef0 <_ZN7HIH61XX14commandProcessER6Streamh+0x74>
 8087e8e:	2a30      	cmp	r2, #48	; 0x30
 8087e90:	d038      	beq.n	8087f04 <_ZN7HIH61XX14commandProcessER6Streamh+0x88>
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 8087e92:	220a      	movs	r2, #10
 8087e94:	21fe      	movs	r1, #254	; 0xfe
 8087e96:	4628      	mov	r0, r5
 8087e98:	f7fe fb64 	bl	8086564 <_ZN5Print7printlnIhLi0EEEjT_i>
            //  stop
        case '0':
            return commandReply(stream, stop());
    }

    return commandReply(stream, 254);
 8087e9c:	24fe      	movs	r4, #254	; 0xfe
 8087e9e:	e018      	b.n	8087ed2 <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
    switch (command) {
 8087ea0:	2a74      	cmp	r2, #116	; 0x74
 8087ea2:	d018      	beq.n	8087ed6 <_ZN7HIH61XX14commandProcessER6Streamh+0x5a>
 8087ea4:	2a75      	cmp	r2, #117	; 0x75
 8087ea6:	d1f4      	bne.n	8087e92 <_ZN7HIH61XX14commandProcessER6Streamh+0x16>
            return commandReply(stream, update());
 8087ea8:	f7ff ff58 	bl	8087d5c <_ZN7HIH61XX6updateEv>
            return commandReply(stream, stop());
 8087eac:	4604      	mov	r4, r0
 8087eae:	4601      	mov	r1, r0
 8087eb0:	220a      	movs	r2, #10
 8087eb2:	4628      	mov	r0, r5
 8087eb4:	f7fe fb56 	bl	8086564 <_ZN5Print7printlnIhLi0EEEjT_i>
 8087eb8:	e00b      	b.n	8087ed2 <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
            return float(raw) / 16382;
 8087eba:	8900      	ldrh	r0, [r0, #8]
 8087ebc:	f003 fcae 	bl	808b81c <__aeabi_ui2f>
 8087ec0:	4912      	ldr	r1, [pc, #72]	; (8087f0c <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 8087ec2:	f003 fdb7 	bl	808ba34 <__aeabi_fdiv>
            return (float(raw) / 16382) * 165 - 40;
 8087ec6:	4601      	mov	r1, r0
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 8087ec8:	2202      	movs	r2, #2
 8087eca:	4628      	mov	r0, r5
 8087ecc:	f001 fbee 	bl	80896ac <_ZN5Print7printlnEfi>
            return commandReply(stream, 0, temperature());
 8087ed0:	2400      	movs	r4, #0
}
 8087ed2:	4620      	mov	r0, r4
 8087ed4:	bd38      	pop	{r3, r4, r5, pc}
            return (float(raw) / 16382) * 165 - 40;
 8087ed6:	8940      	ldrh	r0, [r0, #10]
 8087ed8:	f003 fca0 	bl	808b81c <__aeabi_ui2f>
 8087edc:	490b      	ldr	r1, [pc, #44]	; (8087f0c <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 8087ede:	f003 fda9 	bl	808ba34 <__aeabi_fdiv>
 8087ee2:	490b      	ldr	r1, [pc, #44]	; (8087f10 <_ZN7HIH61XX14commandProcessER6Streamh+0x94>)
 8087ee4:	f003 fcf2 	bl	808b8cc <__aeabi_fmul>
 8087ee8:	490a      	ldr	r1, [pc, #40]	; (8087f14 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8087eea:	f003 fbe5 	bl	808b6b8 <__aeabi_fsub>
 8087eee:	e7ea      	b.n	8087ec6 <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
            stream.println(data);
 8087ef0:	7901      	ldrb	r1, [r0, #4]
 8087ef2:	220a      	movs	r2, #10
 8087ef4:	4628      	mov	r0, r5
 8087ef6:	f7fe fb35 	bl	8086564 <_ZN5Print7printlnIhLi0EEEjT_i>
 8087efa:	e7e9      	b.n	8087ed0 <_ZN7HIH61XX14commandProcessER6Streamh+0x54>
            return commandReply(stream, start());
 8087efc:	6803      	ldr	r3, [r0, #0]
 8087efe:	681b      	ldr	r3, [r3, #0]
            return commandReply(stream, stop());
 8087f00:	4798      	blx	r3
 8087f02:	e7d3      	b.n	8087eac <_ZN7HIH61XX14commandProcessER6Streamh+0x30>
 8087f04:	6803      	ldr	r3, [r0, #0]
 8087f06:	685b      	ldr	r3, [r3, #4]
 8087f08:	e7fa      	b.n	8087f00 <_ZN7HIH61XX14commandProcessER6Streamh+0x84>
 8087f0a:	bf00      	nop
 8087f0c:	467ff800 	.word	0x467ff800
 8087f10:	43250000 	.word	0x43250000
 8087f14:	42200000 	.word	0x42200000

08087f18 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8087f18:	b510      	push	{r4, lr}
 8087f1a:	4604      	mov	r4, r0
 8087f1c:	4b05      	ldr	r3, [pc, #20]	; (8087f34 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 8087f1e:	f840 3b2c 	str.w	r3, [r0], #44
 8087f22:	f001 f8a3 	bl	808906c <_ZN6StringD1Ev>
 8087f26:	f104 000c 	add.w	r0, r4, #12
 8087f2a:	f001 f89f 	bl	808906c <_ZN6StringD1Ev>

}
 8087f2e:	4620      	mov	r0, r4
 8087f30:	bd10      	pop	{r4, pc}
 8087f32:	bf00      	nop
 8087f34:	0808ff8c 	.word	0x0808ff8c

08087f38 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8087f38:	b510      	push	{r4, lr}
 8087f3a:	4604      	mov	r4, r0
}
 8087f3c:	f7ff ffec 	bl	8087f18 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8087f40:	4620      	mov	r0, r4
 8087f42:	2144      	movs	r1, #68	; 0x44
 8087f44:	f002 fea3 	bl	808ac8e <_ZdlPvj>
 8087f48:	4620      	mov	r0, r4
 8087f4a:	bd10      	pop	{r4, pc}

08087f4c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8087f4c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8087f4e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8087f50:	4604      	mov	r4, r0
      if (_M_manager)
 8087f52:	b113      	cbz	r3, 8087f5a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8087f54:	2203      	movs	r2, #3
 8087f56:	4601      	mov	r1, r0
 8087f58:	4798      	blx	r3
    }
 8087f5a:	4620      	mov	r0, r4
 8087f5c:	bd10      	pop	{r4, pc}
	...

08087f60 <_ZN23GoogleMapsDeviceLocatorC1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8087f60:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8087f62:	4b0f      	ldr	r3, [pc, #60]	; (8087fa0 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
 8087f64:	2500      	movs	r5, #0
 8087f66:	6003      	str	r3, [r0, #0]
 8087f68:	f242 7310 	movw	r3, #10000	; 0x2710
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8087f6c:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8087f6e:	e9c0 5301 	strd	r5, r3, [r0, #4]
 8087f72:	490c      	ldr	r1, [pc, #48]	; (8087fa4 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8087f74:	300c      	adds	r0, #12
 8087f76:	f001 f8c3 	bl	8089100 <_ZN6StringC1EPKc>
 8087f7a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8087f7e:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8087f82:	62a3      	str	r3, [r4, #40]	; 0x28
 8087f84:	4908      	ldr	r1, [pc, #32]	; (8087fa8 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8087f86:	6265      	str	r5, [r4, #36]	; 0x24
 8087f88:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8087f8c:	f001 f8b8 	bl	8089100 <_ZN6StringC1EPKc>
 8087f90:	f44f 729b 	mov.w	r2, #310	; 0x136
 8087f94:	f44f 73cd 	mov.w	r3, #410	; 0x19a
}
 8087f98:	4620      	mov	r0, r4
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8087f9a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
}
 8087f9e:	bd38      	pop	{r3, r4, r5, pc}
 8087fa0:	0808ff8c 	.word	0x0808ff8c
 8087fa4:	0808ff70 	.word	0x0808ff70
 8087fa8:	0808ff7e 	.word	0x0808ff7e

08087fac <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8087fac:	2201      	movs	r2, #1
 8087fae:	4b01      	ldr	r3, [pc, #4]	; (8087fb4 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
 8087fb0:	701a      	strb	r2, [r3, #0]
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
 8087fb2:	4770      	bx	lr
 8087fb4:	20000cc3 	.word	0x20000cc3

08087fb8 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8087fb8:	b430      	push	{r4, r5}
 8087fba:	4605      	mov	r5, r0
 8087fbc:	4618      	mov	r0, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8087fbe:	681b      	ldr	r3, [r3, #0]
 8087fc0:	681c      	ldr	r4, [r3, #0]
 8087fc2:	4613      	mov	r3, r2
 8087fc4:	46a4      	mov	ip, r4
 8087fc6:	460a      	mov	r2, r1
 8087fc8:	4629      	mov	r1, r5
}
 8087fca:	bc30      	pop	{r4, r5}
	return presp->parse(type, buf, len);
 8087fcc:	4760      	bx	ip
	...

08087fd0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8087fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8087fd4:	460c      	mov	r4, r1
 8087fd6:	b08d      	sub	sp, #52	; 0x34
	String typeStr;
 8087fd8:	494d      	ldr	r1, [pc, #308]	; (8088110 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8087fda:	a804      	add	r0, sp, #16
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8087fdc:	4616      	mov	r6, r2
 8087fde:	461d      	mov	r5, r3
	String typeStr;
 8087fe0:	f001 f88e 	bl	8089100 <_ZN6StringC1EPKc>
	switch(type) {
 8087fe4:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8087fe8:	d064      	beq.n	80880b4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe4>
 8087fea:	dc1f      	bgt.n	808802c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5c>
 8087fec:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8087ff0:	d05c      	beq.n	80880ac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8087ff2:	dc13      	bgt.n	808801c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x4c>
 8087ff4:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8087ff8:	d056      	beq.n	80880a8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd8>
 8087ffa:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8087ffe:	d055      	beq.n	80880ac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8088000:	b35c      	cbz	r4, 808805a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8a>
		typeStr = String::format("type=0x%x", type);
 8088002:	4622      	mov	r2, r4
 8088004:	a808      	add	r0, sp, #32
 8088006:	4943      	ldr	r1, [pc, #268]	; (8088114 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8088008:	f001 fa00 	bl	808940c <_ZN6String6formatEPKcz>
 808800c:	a908      	add	r1, sp, #32
 808800e:	a804      	add	r0, sp, #16
 8088010:	f001 f8c0 	bl	8089194 <_ZN6StringaSEOS_>
 8088014:	a808      	add	r0, sp, #32
 8088016:	f001 f829 	bl	808906c <_ZN6StringD1Ev>
		break;
 808801a:	e022      	b.n	8088062 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x92>
	switch(type) {
 808801c:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8088020:	d046      	beq.n	80880b0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe0>
 8088022:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8088026:	d1ec      	bne.n	8088002 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_NOCARRIER";
 8088028:	493b      	ldr	r1, [pc, #236]	; (8088118 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
 808802a:	e017      	b.n	808805c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 808802c:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8088030:	d046      	beq.n	80880c0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8088032:	dc0a      	bgt.n	808804a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7a>
 8088034:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8088038:	d03e      	beq.n	80880b8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe8>
 808803a:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 808803e:	d03d      	beq.n	80880bc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xec>
 8088040:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8088044:	d1dd      	bne.n	8088002 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_BUSY";
 8088046:	4935      	ldr	r1, [pc, #212]	; (808811c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8088048:	e008      	b.n	808805c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 808804a:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 808804e:	d037      	beq.n	80880c0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8088050:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8088054:	d1d5      	bne.n	8088002 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_ABORTED";
 8088056:	4932      	ldr	r1, [pc, #200]	; (8088120 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8088058:	e000      	b.n	808805c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_UNKNOWN";
 808805a:	4932      	ldr	r1, [pc, #200]	; (8088124 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
		typeStr = "TYPE_OK";
 808805c:	a804      	add	r0, sp, #16
 808805e:	f001 f8a1 	bl	80891a4 <_ZN6StringaSEPKc>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8088062:	462b      	mov	r3, r5
 8088064:	9a04      	ldr	r2, [sp, #16]
 8088066:	4930      	ldr	r1, [pc, #192]	; (8088128 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8088068:	4830      	ldr	r0, [pc, #192]	; (808812c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 808806a:	f7f8 fd14 	bl	8080a96 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 808806e:	4928      	ldr	r1, [pc, #160]	; (8088110 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8088070:	a808      	add	r0, sp, #32
 8088072:	f001 f845 	bl	8089100 <_ZN6StringC1EPKc>
	for(int ii = 0; ii < len; ii++) {
 8088076:	2400      	movs	r4, #0
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8088078:	4f2d      	ldr	r7, [pc, #180]	; (8088130 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808807a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8088150 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x180>
 808807e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8088154 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x184>
	for(int ii = 0; ii < len; ii++) {
 8088082:	42ac      	cmp	r4, r5
 8088084:	da35      	bge.n	80880f2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x122>
		if (buf[ii] == '\n') {
 8088086:	5d31      	ldrb	r1, [r6, r4]
 8088088:	290a      	cmp	r1, #10
 808808a:	d11b      	bne.n	80880c4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf4>
 808808c:	4649      	mov	r1, r9
 808808e:	a808      	add	r0, sp, #32
 8088090:	f001 f918 	bl	80892c4 <_ZN6String6concatEPKc>
			Log.info(out);
 8088094:	9908      	ldr	r1, [sp, #32]
 8088096:	4825      	ldr	r0, [pc, #148]	; (808812c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8088098:	f7f8 fcfd 	bl	8080a96 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 808809c:	491c      	ldr	r1, [pc, #112]	; (8088110 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 808809e:	a808      	add	r0, sp, #32
 80880a0:	f001 f880 	bl	80891a4 <_ZN6StringaSEPKc>
	for(int ii = 0; ii < len; ii++) {
 80880a4:	3401      	adds	r4, #1
 80880a6:	e7ec      	b.n	8088082 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb2>
		typeStr = "TYPE_OK";
 80880a8:	4922      	ldr	r1, [pc, #136]	; (8088134 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 80880aa:	e7d7      	b.n	808805c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_ERROR";
 80880ac:	4922      	ldr	r1, [pc, #136]	; (8088138 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 80880ae:	e7d5      	b.n	808805c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_CONNECT";
 80880b0:	4922      	ldr	r1, [pc, #136]	; (808813c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 80880b2:	e7d3      	b.n	808805c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NODIALTONE";
 80880b4:	4922      	ldr	r1, [pc, #136]	; (8088140 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 80880b6:	e7d1      	b.n	808805c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NOANSWER";
 80880b8:	4922      	ldr	r1, [pc, #136]	; (8088144 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 80880ba:	e7cf      	b.n	808805c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PROMPT";
 80880bc:	4922      	ldr	r1, [pc, #136]	; (8088148 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 80880be:	e7cd      	b.n	808805c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PLUS";
 80880c0:	4922      	ldr	r1, [pc, #136]	; (808814c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 80880c2:	e7cb      	b.n	808805c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		if (buf[ii] == '\r') {
 80880c4:	290d      	cmp	r1, #13
 80880c6:	d104      	bne.n	80880d2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x102>
 80880c8:	4641      	mov	r1, r8
			out.concat(hex);
 80880ca:	a808      	add	r0, sp, #32
 80880cc:	f001 f8fa 	bl	80892c4 <_ZN6String6concatEPKc>
 80880d0:	e7e8      	b.n	80880a4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 80880d2:	f1a1 0320 	sub.w	r3, r1, #32
 80880d6:	2b5e      	cmp	r3, #94	; 0x5e
 80880d8:	d907      	bls.n	80880ea <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11a>
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 80880da:	460b      	mov	r3, r1
 80880dc:	463a      	mov	r2, r7
 80880de:	210a      	movs	r1, #10
 80880e0:	a801      	add	r0, sp, #4
 80880e2:	f000 fc5f 	bl	80889a4 <snprintf>
			out.concat(hex);
 80880e6:	a901      	add	r1, sp, #4
 80880e8:	e7ef      	b.n	80880ca <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xfa>
			out.concat(buf[ii]);
 80880ea:	a808      	add	r0, sp, #32
 80880ec:	f001 f8f9 	bl	80892e2 <_ZN6String6concatEc>
 80880f0:	e7d8      	b.n	80880a4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
	if (out.length() > 0) {
 80880f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80880f4:	b11b      	cbz	r3, 80880fe <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x12e>
		Log.info(out);
 80880f6:	9908      	ldr	r1, [sp, #32]
 80880f8:	480c      	ldr	r0, [pc, #48]	; (808812c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 80880fa:	f7f8 fccc 	bl	8080a96 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 80880fe:	a808      	add	r0, sp, #32
 8088100:	f000 ffb4 	bl	808906c <_ZN6StringD1Ev>
	String typeStr;
 8088104:	a804      	add	r0, sp, #16
 8088106:	f000 ffb1 	bl	808906c <_ZN6StringD1Ev>
}
 808810a:	b00d      	add	sp, #52	; 0x34
 808810c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8088110:	08090075 	.word	0x08090075
 8088114:	0809001b 	.word	0x0809001b
 8088118:	0808ffc1 	.word	0x0808ffc1
 808811c:	0808ffe0 	.word	0x0808ffe0
 8088120:	0809000e 	.word	0x0809000e
 8088124:	0808ff94 	.word	0x0808ff94
 8088128:	08090025 	.word	0x08090025
 808812c:	20000cd8 	.word	0x20000cd8
 8088130:	0809004c 	.word	0x0809004c
 8088134:	0808ffa1 	.word	0x0808ffa1
 8088138:	0808ffa9 	.word	0x0808ffa9
 808813c:	0808ffb4 	.word	0x0808ffb4
 8088140:	0808ffd0 	.word	0x0808ffd0
 8088144:	0808ffea 	.word	0x0808ffea
 8088148:	0808fff8 	.word	0x0808fff8
 808814c:	08090004 	.word	0x08090004
 8088150:	08090049 	.word	0x08090049
 8088154:	08090046 	.word	0x08090046

08088158 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8088158:	b538      	push	{r3, r4, r5, lr}
class CellularHelperCommonResponse {
 808815a:	f06f 0302 	mvn.w	r3, #2
 808815e:	6043      	str	r3, [r0, #4]
 8088160:	2300      	movs	r3, #0
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8088162:	4604      	mov	r4, r0
 8088164:	4d07      	ldr	r5, [pc, #28]	; (8088184 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
class CellularHelperCommonResponse {
 8088166:	7203      	strb	r3, [r0, #8]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8088168:	4b07      	ldr	r3, [pc, #28]	; (8088188 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 808816a:	4629      	mov	r1, r5
 808816c:	f840 3b0c 	str.w	r3, [r0], #12
 8088170:	f000 ffc6 	bl	8089100 <_ZN6StringC1EPKc>
 8088174:	4629      	mov	r1, r5
 8088176:	f104 001c 	add.w	r0, r4, #28
 808817a:	f000 ffc1 	bl	8089100 <_ZN6StringC1EPKc>
 808817e:	4620      	mov	r0, r4
 8088180:	bd38      	pop	{r3, r4, r5, pc}
 8088182:	bf00      	nop
 8088184:	08090075 	.word	0x08090075
 8088188:	08090094 	.word	0x08090094

0808818c <_ZN32CellularHelperPlusStringResponseD1Ev>:
 808818c:	b510      	push	{r4, lr}
 808818e:	4604      	mov	r4, r0
 8088190:	4b05      	ldr	r3, [pc, #20]	; (80881a8 <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8088192:	f840 3b1c 	str.w	r3, [r0], #28
 8088196:	f000 ff69 	bl	808906c <_ZN6StringD1Ev>
 808819a:	f104 000c 	add.w	r0, r4, #12
 808819e:	f000 ff65 	bl	808906c <_ZN6StringD1Ev>
 80881a2:	4620      	mov	r0, r4
 80881a4:	bd10      	pop	{r4, pc}
 80881a6:	bf00      	nop
 80881a8:	08090094 	.word	0x08090094

080881ac <_ZN28CellularHelperStringResponseC1Ev>:
class CellularHelperCommonResponse {
 80881ac:	f06f 0302 	mvn.w	r3, #2
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 80881b0:	b510      	push	{r4, lr}
class CellularHelperCommonResponse {
 80881b2:	6043      	str	r3, [r0, #4]
 80881b4:	2300      	movs	r3, #0
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 80881b6:	4604      	mov	r4, r0
class CellularHelperCommonResponse {
 80881b8:	7203      	strb	r3, [r0, #8]
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 80881ba:	4b04      	ldr	r3, [pc, #16]	; (80881cc <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 80881bc:	4904      	ldr	r1, [pc, #16]	; (80881d0 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 80881be:	f840 3b0c 	str.w	r3, [r0], #12
 80881c2:	f000 ff9d 	bl	8089100 <_ZN6StringC1EPKc>
 80881c6:	4620      	mov	r0, r4
 80881c8:	bd10      	pop	{r4, pc}
 80881ca:	bf00      	nop
 80881cc:	08090088 	.word	0x08090088
 80881d0:	08090075 	.word	0x08090075

080881d4 <_ZN28CellularHelperStringResponseD1Ev>:
 80881d4:	b510      	push	{r4, lr}
 80881d6:	4604      	mov	r4, r0
 80881d8:	4b03      	ldr	r3, [pc, #12]	; (80881e8 <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 80881da:	f840 3b0c 	str.w	r3, [r0], #12
 80881de:	f000 ff45 	bl	808906c <_ZN6StringD1Ev>
 80881e2:	4620      	mov	r0, r4
 80881e4:	bd10      	pop	{r4, pc}
 80881e6:	bf00      	nop
 80881e8:	08090088 	.word	0x08090088

080881ec <_ZNK19CellularHelperClass15getManufacturerEv>:
String CellularHelperClass::getManufacturer() const {
 80881ec:	b510      	push	{r4, lr}
 80881ee:	4604      	mov	r4, r0
 80881f0:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 80881f2:	a801      	add	r0, sp, #4
 80881f4:	f7ff ffda 	bl	80881ac <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 80881f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80881fc:	4b07      	ldr	r3, [pc, #28]	; (808821c <_ZNK19CellularHelperClass15getManufacturerEv+0x30>)
 80881fe:	a901      	add	r1, sp, #4
 8088200:	4807      	ldr	r0, [pc, #28]	; (8088220 <_ZNK19CellularHelperClass15getManufacturerEv+0x34>)
 8088202:	f000 fa73 	bl	80886ec <cellular_command>
	return resp.string;
 8088206:	a904      	add	r1, sp, #16
 8088208:	4620      	mov	r0, r4
 808820a:	f000 ffb8 	bl	808917e <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 808820e:	a801      	add	r0, sp, #4
 8088210:	f7ff ffe0 	bl	80881d4 <_ZN28CellularHelperStringResponseD1Ev>
}
 8088214:	4620      	mov	r0, r4
 8088216:	b008      	add	sp, #32
 8088218:	bd10      	pop	{r4, pc}
 808821a:	bf00      	nop
 808821c:	08090053 	.word	0x08090053
 8088220:	08087fb9 	.word	0x08087fb9

08088224 <_ZNK19CellularHelperClass7getIMEIEv>:
String CellularHelperClass::getIMEI() const {
 8088224:	b510      	push	{r4, lr}
 8088226:	4604      	mov	r4, r0
 8088228:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808822a:	a801      	add	r0, sp, #4
 808822c:	f7ff ffbe 	bl	80881ac <_ZN28CellularHelperStringResponseC1Ev>
 8088230:	f242 7210 	movw	r2, #10000	; 0x2710
 8088234:	4b07      	ldr	r3, [pc, #28]	; (8088254 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 8088236:	a901      	add	r1, sp, #4
 8088238:	4807      	ldr	r0, [pc, #28]	; (8088258 <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 808823a:	f000 fa57 	bl	80886ec <cellular_command>
	return resp.string;
 808823e:	a904      	add	r1, sp, #16
 8088240:	4620      	mov	r0, r4
 8088242:	f000 ff9c 	bl	808917e <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 8088246:	a801      	add	r0, sp, #4
 8088248:	f7ff ffc4 	bl	80881d4 <_ZN28CellularHelperStringResponseD1Ev>
}
 808824c:	4620      	mov	r0, r4
 808824e:	b008      	add	sp, #32
 8088250:	bd10      	pop	{r4, pc}
 8088252:	bf00      	nop
 8088254:	0809005d 	.word	0x0809005d
 8088258:	08087fb9 	.word	0x08087fb9

0808825c <_ZNK19CellularHelperClass7getIMSIEv>:
 808825c:	b510      	push	{r4, lr}
 808825e:	4604      	mov	r4, r0
 8088260:	f7ff ffc4 	bl	80881ec <_ZNK19CellularHelperClass15getManufacturerEv>
 8088264:	4620      	mov	r0, r4
 8088266:	bd10      	pop	{r4, pc}

08088268 <_ZNK19CellularHelperClass8getICCIDEv>:
String CellularHelperClass::getICCID() const {
 8088268:	b510      	push	{r4, lr}
 808826a:	4604      	mov	r4, r0
 808826c:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 808826e:	a801      	add	r0, sp, #4
 8088270:	f7ff ff72 	bl	8088158 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 8088274:	490a      	ldr	r1, [pc, #40]	; (80882a0 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 8088276:	a804      	add	r0, sp, #16
 8088278:	f000 ff94 	bl	80891a4 <_ZN6StringaSEPKc>
 808827c:	f242 7210 	movw	r2, #10000	; 0x2710
 8088280:	4b08      	ldr	r3, [pc, #32]	; (80882a4 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 8088282:	a901      	add	r1, sp, #4
 8088284:	4808      	ldr	r0, [pc, #32]	; (80882a8 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 8088286:	f000 fa31 	bl	80886ec <cellular_command>
	return resp.string;
 808828a:	a908      	add	r1, sp, #32
 808828c:	4620      	mov	r0, r4
 808828e:	f000 ff76 	bl	808917e <_ZN6StringC1ERKS_>
	CellularHelperPlusStringResponse resp;
 8088292:	a801      	add	r0, sp, #4
 8088294:	f7ff ff7a 	bl	808818c <_ZN32CellularHelperPlusStringResponseD1Ev>
}
 8088298:	4620      	mov	r0, r4
 808829a:	b00c      	add	sp, #48	; 0x30
 808829c:	bd10      	pop	{r4, pc}
 808829e:	bf00      	nop
 80882a0:	08090067 	.word	0x08090067
 80882a4:	0809006c 	.word	0x0809006c
 80882a8:	08087fb9 	.word	0x08087fb9

080882ac <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 80882ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80882b0:	460c      	mov	r4, r1
 80882b2:	461e      	mov	r6, r3
	str.reserve(str.length() + (size_t)len + 1);
 80882b4:	1c59      	adds	r1, r3, #1
 80882b6:	68a3      	ldr	r3, [r4, #8]
 80882b8:	4620      	mov	r0, r4
 80882ba:	4419      	add	r1, r3
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 80882bc:	4617      	mov	r7, r2
 80882be:	f89d 8018 	ldrb.w	r8, [sp, #24]
	for(int ii = 0; ii < len; ii++) {
 80882c2:	2500      	movs	r5, #0
	str.reserve(str.length() + (size_t)len + 1);
 80882c4:	f000 fef0 	bl	80890a8 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 80882c8:	42b5      	cmp	r5, r6
 80882ca:	da0c      	bge.n	80882e6 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 80882cc:	5d79      	ldrb	r1, [r7, r5]
 80882ce:	f1b8 0f00 	cmp.w	r8, #0
 80882d2:	d003      	beq.n	80882dc <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x30>
 80882d4:	290d      	cmp	r1, #13
 80882d6:	d004      	beq.n	80882e2 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
 80882d8:	290a      	cmp	r1, #10
 80882da:	d002      	beq.n	80882e2 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
			str.concat(buf[ii]);
 80882dc:	4620      	mov	r0, r4
 80882de:	f001 f800 	bl	80892e2 <_ZN6String6concatEc>
	for(int ii = 0; ii < len; ii++) {
 80882e2:	3501      	adds	r5, #1
 80882e4:	e7f0      	b.n	80882c8 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
}
 80882e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080882ec <_ZN28CellularHelperStringResponse5parseEiPKci>:
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 80882ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 80882ee:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 80882f2:	4604      	mov	r4, r0
 80882f4:	460f      	mov	r7, r1
 80882f6:	4615      	mov	r5, r2
 80882f8:	461e      	mov	r6, r3
	if (enableDebug) {
 80882fa:	f1bc 0f00 	cmp.w	ip, #0
 80882fe:	d001      	beq.n	8088304 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 8088300:	f7ff fe66 	bl	8087fd0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_UNKNOWN) {
 8088304:	b947      	cbnz	r7, 8088318 <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 8088306:	2301      	movs	r3, #1
 8088308:	462a      	mov	r2, r5
 808830a:	9300      	str	r3, [sp, #0]
 808830c:	4804      	ldr	r0, [pc, #16]	; (8088320 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 808830e:	4633      	mov	r3, r6
 8088310:	f104 010c 	add.w	r1, r4, #12
 8088314:	f7ff ffca 	bl	80882ac <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
}
 8088318:	f04f 30ff 	mov.w	r0, #4294967295
 808831c:	b003      	add	sp, #12
 808831e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8088320:	20000cc4 	.word	0x20000cc4

08088324 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8088324:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 8088326:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808832a:	4606      	mov	r6, r0
 808832c:	460d      	mov	r5, r1
 808832e:	4617      	mov	r7, r2
 8088330:	461c      	mov	r4, r3
 8088332:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 8088334:	f1bc 0f00 	cmp.w	ip, #0
 8088338:	d001      	beq.n	808833e <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 808833a:	f7ff fe49 	bl	8087fd0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_PLUS) {
 808833e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8088342:	d12a      	bne.n	808839a <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		char *copy = (char *) malloc(len + 1);
 8088344:	1c60      	adds	r0, r4, #1
 8088346:	f000 fb05 	bl	8088954 <malloc>
		if (copy) {
 808834a:	4605      	mov	r5, r0
 808834c:	b328      	cbz	r0, 808839a <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 808834e:	4622      	mov	r2, r4
 8088350:	4639      	mov	r1, r7
 8088352:	f003 fe50 	bl	808bff6 <strncpy>
			copy[len] = 0;
 8088356:	2300      	movs	r3, #0
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8088358:	2120      	movs	r1, #32
			copy[len] = 0;
 808835a:	552b      	strb	r3, [r5, r4]
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808835c:	4a11      	ldr	r2, [pc, #68]	; (80883a4 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 808835e:	68f3      	ldr	r3, [r6, #12]
 8088360:	a802      	add	r0, sp, #8
 8088362:	f000 fb1f 	bl	80889a4 <snprintf>
			char *start = strstr(copy, searchFor);
 8088366:	4628      	mov	r0, r5
 8088368:	a902      	add	r1, sp, #8
 808836a:	f003 fe57 	bl	808c01c <strstr>
			if (start) {
 808836e:	4604      	mov	r4, r0
 8088370:	b180      	cbz	r0, 8088394 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 8088372:	a802      	add	r0, sp, #8
 8088374:	f003 fe25 	bl	808bfc2 <strlen>
 8088378:	4404      	add	r4, r0
				char *end = strchr(start, '\r');
 808837a:	210d      	movs	r1, #13
 808837c:	4620      	mov	r0, r4
 808837e:	f003 fde5 	bl	808bf4c <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 8088382:	2301      	movs	r3, #1
 8088384:	4622      	mov	r2, r4
 8088386:	9300      	str	r3, [sp, #0]
 8088388:	f106 011c 	add.w	r1, r6, #28
 808838c:	1b03      	subs	r3, r0, r4
 808838e:	4806      	ldr	r0, [pc, #24]	; (80883a8 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 8088390:	f7ff ff8c 	bl	80882ac <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			free(copy);
 8088394:	4628      	mov	r0, r5
 8088396:	f000 fae5 	bl	8088964 <free>
}
 808839a:	f04f 30ff 	mov.w	r0, #4294967295
 808839e:	b00b      	add	sp, #44	; 0x2c
 80883a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80883a2:	bf00      	nop
 80883a4:	08090076 	.word	0x08090076
 80883a8:	20000cc4 	.word	0x20000cc4

080883ac <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80883ac:	b508      	push	{r3, lr}
 80883ae:	4b02      	ldr	r3, [pc, #8]	; (80883b8 <HAL_Validate_Pin_Function+0xc>)
 80883b0:	681b      	ldr	r3, [r3, #0]
 80883b2:	685b      	ldr	r3, [r3, #4]
 80883b4:	9301      	str	r3, [sp, #4]
 80883b6:	bd08      	pop	{r3, pc}
 80883b8:	080401b0 	.word	0x080401b0

080883bc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80883bc:	b508      	push	{r3, lr}
 80883be:	4b02      	ldr	r3, [pc, #8]	; (80883c8 <HAL_Pin_Mode+0xc>)
 80883c0:	681b      	ldr	r3, [r3, #0]
 80883c2:	689b      	ldr	r3, [r3, #8]
 80883c4:	9301      	str	r3, [sp, #4]
 80883c6:	bd08      	pop	{r3, pc}
 80883c8:	080401b0 	.word	0x080401b0

080883cc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80883cc:	b508      	push	{r3, lr}
 80883ce:	4b02      	ldr	r3, [pc, #8]	; (80883d8 <HAL_Get_Pin_Mode+0xc>)
 80883d0:	681b      	ldr	r3, [r3, #0]
 80883d2:	68db      	ldr	r3, [r3, #12]
 80883d4:	9301      	str	r3, [sp, #4]
 80883d6:	bd08      	pop	{r3, pc}
 80883d8:	080401b0 	.word	0x080401b0

080883dc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80883dc:	b508      	push	{r3, lr}
 80883de:	4b02      	ldr	r3, [pc, #8]	; (80883e8 <HAL_GPIO_Write+0xc>)
 80883e0:	681b      	ldr	r3, [r3, #0]
 80883e2:	691b      	ldr	r3, [r3, #16]
 80883e4:	9301      	str	r3, [sp, #4]
 80883e6:	bd08      	pop	{r3, pc}
 80883e8:	080401b0 	.word	0x080401b0

080883ec <hal_adc_set_sample_time>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
 80883ec:	b508      	push	{r3, lr}
 80883ee:	4b02      	ldr	r3, [pc, #8]	; (80883f8 <hal_adc_set_sample_time+0xc>)
 80883f0:	681b      	ldr	r3, [r3, #0]
 80883f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80883f4:	9301      	str	r3, [sp, #4]
 80883f6:	bd08      	pop	{r3, pc}
 80883f8:	080401b0 	.word	0x080401b0

080883fc <hal_adc_read>:
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80883fc:	b508      	push	{r3, lr}
 80883fe:	4b02      	ldr	r3, [pc, #8]	; (8088408 <hal_adc_read+0xc>)
 8088400:	681b      	ldr	r3, [r3, #0]
 8088402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088404:	9301      	str	r3, [sp, #4]
 8088406:	bd08      	pop	{r3, pc}
 8088408:	080401b0 	.word	0x080401b0

0808840c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808840c:	b508      	push	{r3, lr}
 808840e:	4b02      	ldr	r3, [pc, #8]	; (8088418 <HAL_RNG_GetRandomNumber+0xc>)
 8088410:	681b      	ldr	r3, [r3, #0]
 8088412:	685b      	ldr	r3, [r3, #4]
 8088414:	9301      	str	r3, [sp, #4]
 8088416:	bd08      	pop	{r3, pc}
 8088418:	0804019c 	.word	0x0804019c

0808841c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 808841c:	b508      	push	{r3, lr}
 808841e:	4b02      	ldr	r3, [pc, #8]	; (8088428 <HAL_Delay_Microseconds+0xc>)
 8088420:	681b      	ldr	r3, [r3, #0]
 8088422:	68db      	ldr	r3, [r3, #12]
 8088424:	9301      	str	r3, [sp, #4]
 8088426:	bd08      	pop	{r3, pc}
 8088428:	0804019c 	.word	0x0804019c

0808842c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808842c:	b508      	push	{r3, lr}
 808842e:	4b02      	ldr	r3, [pc, #8]	; (8088438 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8088430:	681b      	ldr	r3, [r3, #0]
 8088432:	695b      	ldr	r3, [r3, #20]
 8088434:	9301      	str	r3, [sp, #4]
 8088436:	bd08      	pop	{r3, pc}
 8088438:	0804019c 	.word	0x0804019c

0808843c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 808843c:	b508      	push	{r3, lr}
 808843e:	4b02      	ldr	r3, [pc, #8]	; (8088448 <HAL_EEPROM_Init+0xc>)
 8088440:	681b      	ldr	r3, [r3, #0]
 8088442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8088444:	9301      	str	r3, [sp, #4]
 8088446:	bd08      	pop	{r3, pc}
 8088448:	0804019c 	.word	0x0804019c

0808844c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 808844c:	b508      	push	{r3, lr}
 808844e:	4b02      	ldr	r3, [pc, #8]	; (8088458 <HAL_EEPROM_Get+0xc>)
 8088450:	681b      	ldr	r3, [r3, #0]
 8088452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8088454:	9301      	str	r3, [sp, #4]
 8088456:	bd08      	pop	{r3, pc}
 8088458:	0804019c 	.word	0x0804019c

0808845c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 808845c:	b508      	push	{r3, lr}
 808845e:	4b02      	ldr	r3, [pc, #8]	; (8088468 <HAL_EEPROM_Put+0xc>)
 8088460:	681b      	ldr	r3, [r3, #0]
 8088462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8088464:	9301      	str	r3, [sp, #4]
 8088466:	bd08      	pop	{r3, pc}
 8088468:	0804019c 	.word	0x0804019c

0808846c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 808846c:	b508      	push	{r3, lr}
 808846e:	4b02      	ldr	r3, [pc, #8]	; (8088478 <hal_rtc_time_is_valid+0xc>)
 8088470:	681b      	ldr	r3, [r3, #0]
 8088472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8088474:	9301      	str	r3, [sp, #4]
 8088476:	bd08      	pop	{r3, pc}
 8088478:	0804019c 	.word	0x0804019c

0808847c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 808847c:	b508      	push	{r3, lr}
 808847e:	4b02      	ldr	r3, [pc, #8]	; (8088488 <hal_rtc_get_time+0xc>)
 8088480:	681b      	ldr	r3, [r3, #0]
 8088482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8088484:	9301      	str	r3, [sp, #4]
 8088486:	bd08      	pop	{r3, pc}
 8088488:	0804019c 	.word	0x0804019c

0808848c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 808848c:	b508      	push	{r3, lr}
 808848e:	4b02      	ldr	r3, [pc, #8]	; (8088498 <hal_rtc_set_time+0xc>)
 8088490:	681b      	ldr	r3, [r3, #0]
 8088492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8088494:	9301      	str	r3, [sp, #4]
 8088496:	bd08      	pop	{r3, pc}
 8088498:	0804019c 	.word	0x0804019c

0808849c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 808849c:	b508      	push	{r3, lr}
 808849e:	4b02      	ldr	r3, [pc, #8]	; (80884a8 <os_mutex_recursive_create+0xc>)
 80884a0:	681b      	ldr	r3, [r3, #0]
 80884a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80884a4:	9301      	str	r3, [sp, #4]
 80884a6:	bd08      	pop	{r3, pc}
 80884a8:	080401d0 	.word	0x080401d0

080884ac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80884ac:	b508      	push	{r3, lr}
 80884ae:	4b02      	ldr	r3, [pc, #8]	; (80884b8 <os_mutex_recursive_destroy+0xc>)
 80884b0:	681b      	ldr	r3, [r3, #0]
 80884b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80884b4:	9301      	str	r3, [sp, #4]
 80884b6:	bd08      	pop	{r3, pc}
 80884b8:	080401d0 	.word	0x080401d0

080884bc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80884bc:	b508      	push	{r3, lr}
 80884be:	4b02      	ldr	r3, [pc, #8]	; (80884c8 <os_mutex_recursive_lock+0xc>)
 80884c0:	681b      	ldr	r3, [r3, #0]
 80884c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80884c4:	9301      	str	r3, [sp, #4]
 80884c6:	bd08      	pop	{r3, pc}
 80884c8:	080401d0 	.word	0x080401d0

080884cc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80884cc:	b508      	push	{r3, lr}
 80884ce:	4b02      	ldr	r3, [pc, #8]	; (80884d8 <os_mutex_recursive_unlock+0xc>)
 80884d0:	681b      	ldr	r3, [r3, #0]
 80884d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80884d4:	9301      	str	r3, [sp, #4]
 80884d6:	bd08      	pop	{r3, pc}
 80884d8:	080401d0 	.word	0x080401d0

080884dc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80884dc:	b508      	push	{r3, lr}
 80884de:	4b02      	ldr	r3, [pc, #8]	; (80884e8 <hal_usart_init+0xc>)
 80884e0:	681b      	ldr	r3, [r3, #0]
 80884e2:	699b      	ldr	r3, [r3, #24]
 80884e4:	9301      	str	r3, [sp, #4]
 80884e6:	bd08      	pop	{r3, pc}
 80884e8:	080401c4 	.word	0x080401c4

080884ec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80884ec:	b508      	push	{r3, lr}
 80884ee:	4b02      	ldr	r3, [pc, #8]	; (80884f8 <hal_usart_write+0xc>)
 80884f0:	681b      	ldr	r3, [r3, #0]
 80884f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80884f4:	9301      	str	r3, [sp, #4]
 80884f6:	bd08      	pop	{r3, pc}
 80884f8:	080401c4 	.word	0x080401c4

080884fc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80884fc:	b508      	push	{r3, lr}
 80884fe:	4b02      	ldr	r3, [pc, #8]	; (8088508 <hal_usart_available+0xc>)
 8088500:	681b      	ldr	r3, [r3, #0]
 8088502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8088504:	9301      	str	r3, [sp, #4]
 8088506:	bd08      	pop	{r3, pc}
 8088508:	080401c4 	.word	0x080401c4

0808850c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 808850c:	b508      	push	{r3, lr}
 808850e:	4b02      	ldr	r3, [pc, #8]	; (8088518 <hal_usart_read+0xc>)
 8088510:	681b      	ldr	r3, [r3, #0]
 8088512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088514:	9301      	str	r3, [sp, #4]
 8088516:	bd08      	pop	{r3, pc}
 8088518:	080401c4 	.word	0x080401c4

0808851c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 808851c:	b508      	push	{r3, lr}
 808851e:	4b02      	ldr	r3, [pc, #8]	; (8088528 <hal_usart_peek+0xc>)
 8088520:	681b      	ldr	r3, [r3, #0]
 8088522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088524:	9301      	str	r3, [sp, #4]
 8088526:	bd08      	pop	{r3, pc}
 8088528:	080401c4 	.word	0x080401c4

0808852c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 808852c:	b508      	push	{r3, lr}
 808852e:	4b02      	ldr	r3, [pc, #8]	; (8088538 <hal_usart_flush+0xc>)
 8088530:	681b      	ldr	r3, [r3, #0]
 8088532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088534:	9301      	str	r3, [sp, #4]
 8088536:	bd08      	pop	{r3, pc}
 8088538:	080401c4 	.word	0x080401c4

0808853c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 808853c:	b508      	push	{r3, lr}
 808853e:	4b02      	ldr	r3, [pc, #8]	; (8088548 <hal_usart_is_enabled+0xc>)
 8088540:	681b      	ldr	r3, [r3, #0]
 8088542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8088544:	9301      	str	r3, [sp, #4]
 8088546:	bd08      	pop	{r3, pc}
 8088548:	080401c4 	.word	0x080401c4

0808854c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 808854c:	b508      	push	{r3, lr}
 808854e:	4b02      	ldr	r3, [pc, #8]	; (8088558 <hal_usart_available_data_for_write+0xc>)
 8088550:	681b      	ldr	r3, [r3, #0]
 8088552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8088554:	9301      	str	r3, [sp, #4]
 8088556:	bd08      	pop	{r3, pc}
 8088558:	080401c4 	.word	0x080401c4

0808855c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 808855c:	b508      	push	{r3, lr}
 808855e:	4b02      	ldr	r3, [pc, #8]	; (8088568 <hal_usart_begin_config+0xc>)
 8088560:	681b      	ldr	r3, [r3, #0]
 8088562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8088564:	9301      	str	r3, [sp, #4]
 8088566:	bd08      	pop	{r3, pc}
 8088568:	080401c4 	.word	0x080401c4

0808856c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 808856c:	b508      	push	{r3, lr}
 808856e:	4b02      	ldr	r3, [pc, #8]	; (8088578 <hal_i2c_begin+0xc>)
 8088570:	681b      	ldr	r3, [r3, #0]
 8088572:	68db      	ldr	r3, [r3, #12]
 8088574:	9301      	str	r3, [sp, #4]
 8088576:	bd08      	pop	{r3, pc}
 8088578:	080401ac 	.word	0x080401ac

0808857c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 808857c:	b508      	push	{r3, lr}
 808857e:	4b02      	ldr	r3, [pc, #8]	; (8088588 <hal_i2c_begin_transmission+0xc>)
 8088580:	681b      	ldr	r3, [r3, #0]
 8088582:	699b      	ldr	r3, [r3, #24]
 8088584:	9301      	str	r3, [sp, #4]
 8088586:	bd08      	pop	{r3, pc}
 8088588:	080401ac 	.word	0x080401ac

0808858c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 808858c:	b508      	push	{r3, lr}
 808858e:	4b02      	ldr	r3, [pc, #8]	; (8088598 <hal_i2c_end_transmission+0xc>)
 8088590:	681b      	ldr	r3, [r3, #0]
 8088592:	69db      	ldr	r3, [r3, #28]
 8088594:	9301      	str	r3, [sp, #4]
 8088596:	bd08      	pop	{r3, pc}
 8088598:	080401ac 	.word	0x080401ac

0808859c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 808859c:	b508      	push	{r3, lr}
 808859e:	4b02      	ldr	r3, [pc, #8]	; (80885a8 <hal_i2c_write+0xc>)
 80885a0:	681b      	ldr	r3, [r3, #0]
 80885a2:	6a1b      	ldr	r3, [r3, #32]
 80885a4:	9301      	str	r3, [sp, #4]
 80885a6:	bd08      	pop	{r3, pc}
 80885a8:	080401ac 	.word	0x080401ac

080885ac <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80885ac:	b508      	push	{r3, lr}
 80885ae:	4b02      	ldr	r3, [pc, #8]	; (80885b8 <hal_i2c_available+0xc>)
 80885b0:	681b      	ldr	r3, [r3, #0]
 80885b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80885b4:	9301      	str	r3, [sp, #4]
 80885b6:	bd08      	pop	{r3, pc}
 80885b8:	080401ac 	.word	0x080401ac

080885bc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80885bc:	b508      	push	{r3, lr}
 80885be:	4b02      	ldr	r3, [pc, #8]	; (80885c8 <hal_i2c_read+0xc>)
 80885c0:	681b      	ldr	r3, [r3, #0]
 80885c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80885c4:	9301      	str	r3, [sp, #4]
 80885c6:	bd08      	pop	{r3, pc}
 80885c8:	080401ac 	.word	0x080401ac

080885cc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80885cc:	b508      	push	{r3, lr}
 80885ce:	4b02      	ldr	r3, [pc, #8]	; (80885d8 <hal_i2c_peek+0xc>)
 80885d0:	681b      	ldr	r3, [r3, #0]
 80885d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80885d4:	9301      	str	r3, [sp, #4]
 80885d6:	bd08      	pop	{r3, pc}
 80885d8:	080401ac 	.word	0x080401ac

080885dc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80885dc:	b508      	push	{r3, lr}
 80885de:	4b02      	ldr	r3, [pc, #8]	; (80885e8 <hal_i2c_flush+0xc>)
 80885e0:	681b      	ldr	r3, [r3, #0]
 80885e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80885e4:	9301      	str	r3, [sp, #4]
 80885e6:	bd08      	pop	{r3, pc}
 80885e8:	080401ac 	.word	0x080401ac

080885ec <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80885ec:	b508      	push	{r3, lr}
 80885ee:	4b02      	ldr	r3, [pc, #8]	; (80885f8 <hal_i2c_is_enabled+0xc>)
 80885f0:	681b      	ldr	r3, [r3, #0]
 80885f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80885f4:	9301      	str	r3, [sp, #4]
 80885f6:	bd08      	pop	{r3, pc}
 80885f8:	080401ac 	.word	0x080401ac

080885fc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80885fc:	b508      	push	{r3, lr}
 80885fe:	4b02      	ldr	r3, [pc, #8]	; (8088608 <hal_i2c_init+0xc>)
 8088600:	681b      	ldr	r3, [r3, #0]
 8088602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8088604:	9301      	str	r3, [sp, #4]
 8088606:	bd08      	pop	{r3, pc}
 8088608:	080401ac 	.word	0x080401ac

0808860c <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 808860c:	b508      	push	{r3, lr}
 808860e:	4b02      	ldr	r3, [pc, #8]	; (8088618 <hal_i2c_lock+0xc>)
 8088610:	681b      	ldr	r3, [r3, #0]
 8088612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8088614:	9301      	str	r3, [sp, #4]
 8088616:	bd08      	pop	{r3, pc}
 8088618:	080401ac 	.word	0x080401ac

0808861c <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 808861c:	b508      	push	{r3, lr}
 808861e:	4b02      	ldr	r3, [pc, #8]	; (8088628 <hal_i2c_unlock+0xc>)
 8088620:	681b      	ldr	r3, [r3, #0]
 8088622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8088624:	9301      	str	r3, [sp, #4]
 8088626:	bd08      	pop	{r3, pc}
 8088628:	080401ac 	.word	0x080401ac

0808862c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 808862c:	b508      	push	{r3, lr}
 808862e:	4b02      	ldr	r3, [pc, #8]	; (8088638 <hal_i2c_request_ex+0xc>)
 8088630:	681b      	ldr	r3, [r3, #0]
 8088632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8088634:	9301      	str	r3, [sp, #4]
 8088636:	bd08      	pop	{r3, pc}
 8088638:	080401ac 	.word	0x080401ac

0808863c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 808863c:	b508      	push	{r3, lr}
 808863e:	4b02      	ldr	r3, [pc, #8]	; (8088648 <hal_spi_begin+0xc>)
 8088640:	681b      	ldr	r3, [r3, #0]
 8088642:	681b      	ldr	r3, [r3, #0]
 8088644:	9301      	str	r3, [sp, #4]
 8088646:	bd08      	pop	{r3, pc}
 8088648:	080401b4 	.word	0x080401b4

0808864c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 808864c:	b508      	push	{r3, lr}
 808864e:	4b02      	ldr	r3, [pc, #8]	; (8088658 <hal_spi_set_bit_order+0xc>)
 8088650:	681b      	ldr	r3, [r3, #0]
 8088652:	689b      	ldr	r3, [r3, #8]
 8088654:	9301      	str	r3, [sp, #4]
 8088656:	bd08      	pop	{r3, pc}
 8088658:	080401b4 	.word	0x080401b4

0808865c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 808865c:	b508      	push	{r3, lr}
 808865e:	4b02      	ldr	r3, [pc, #8]	; (8088668 <hal_spi_set_data_mode+0xc>)
 8088660:	681b      	ldr	r3, [r3, #0]
 8088662:	68db      	ldr	r3, [r3, #12]
 8088664:	9301      	str	r3, [sp, #4]
 8088666:	bd08      	pop	{r3, pc}
 8088668:	080401b4 	.word	0x080401b4

0808866c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 808866c:	b508      	push	{r3, lr}
 808866e:	4b02      	ldr	r3, [pc, #8]	; (8088678 <hal_spi_set_clock_divider+0xc>)
 8088670:	681b      	ldr	r3, [r3, #0]
 8088672:	691b      	ldr	r3, [r3, #16]
 8088674:	9301      	str	r3, [sp, #4]
 8088676:	bd08      	pop	{r3, pc}
 8088678:	080401b4 	.word	0x080401b4

0808867c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 808867c:	b508      	push	{r3, lr}
 808867e:	4b02      	ldr	r3, [pc, #8]	; (8088688 <hal_spi_transfer+0xc>)
 8088680:	681b      	ldr	r3, [r3, #0]
 8088682:	695b      	ldr	r3, [r3, #20]
 8088684:	9301      	str	r3, [sp, #4]
 8088686:	bd08      	pop	{r3, pc}
 8088688:	080401b4 	.word	0x080401b4

0808868c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 808868c:	b508      	push	{r3, lr}
 808868e:	4b02      	ldr	r3, [pc, #8]	; (8088698 <hal_spi_init+0xc>)
 8088690:	681b      	ldr	r3, [r3, #0]
 8088692:	69db      	ldr	r3, [r3, #28]
 8088694:	9301      	str	r3, [sp, #4]
 8088696:	bd08      	pop	{r3, pc}
 8088698:	080401b4 	.word	0x080401b4

0808869c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 808869c:	b508      	push	{r3, lr}
 808869e:	4b02      	ldr	r3, [pc, #8]	; (80886a8 <hal_spi_is_enabled+0xc>)
 80886a0:	681b      	ldr	r3, [r3, #0]
 80886a2:	6a1b      	ldr	r3, [r3, #32]
 80886a4:	9301      	str	r3, [sp, #4]
 80886a6:	bd08      	pop	{r3, pc}
 80886a8:	080401b4 	.word	0x080401b4

080886ac <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80886ac:	b508      	push	{r3, lr}
 80886ae:	4b02      	ldr	r3, [pc, #8]	; (80886b8 <hal_spi_info+0xc>)
 80886b0:	681b      	ldr	r3, [r3, #0]
 80886b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80886b4:	9301      	str	r3, [sp, #4]
 80886b6:	bd08      	pop	{r3, pc}
 80886b8:	080401b4 	.word	0x080401b4

080886bc <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
 80886bc:	b508      	push	{r3, lr}
 80886be:	4b02      	ldr	r3, [pc, #8]	; (80886c8 <hal_spi_transfer_dma+0xc>)
 80886c0:	681b      	ldr	r3, [r3, #0]
 80886c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80886c4:	9301      	str	r3, [sp, #4]
 80886c6:	bd08      	pop	{r3, pc}
 80886c8:	080401b4 	.word	0x080401b4

080886cc <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 80886cc:	b508      	push	{r3, lr}
 80886ce:	4b02      	ldr	r3, [pc, #8]	; (80886d8 <hal_spi_transfer_dma_status+0xc>)
 80886d0:	681b      	ldr	r3, [r3, #0]
 80886d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80886d4:	9301      	str	r3, [sp, #4]
 80886d6:	bd08      	pop	{r3, pc}
 80886d8:	080401b4 	.word	0x080401b4

080886dc <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80886dc:	b508      	push	{r3, lr}
 80886de:	4b02      	ldr	r3, [pc, #8]	; (80886e8 <inet_gethostbyname+0xc>)
 80886e0:	681b      	ldr	r3, [r3, #0]
 80886e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80886e4:	9301      	str	r3, [sp, #4]
 80886e6:	bd08      	pop	{r3, pc}
 80886e8:	08060020 	.word	0x08060020

080886ec <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 80886ec:	b508      	push	{r3, lr}
 80886ee:	4b02      	ldr	r3, [pc, #8]	; (80886f8 <cellular_command+0xc>)
 80886f0:	681b      	ldr	r3, [r3, #0]
 80886f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80886f4:	9301      	str	r3, [sp, #4]
 80886f6:	bd08      	pop	{r3, pc}
 80886f8:	08060020 	.word	0x08060020

080886fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80886fc:	b508      	push	{r3, lr}
 80886fe:	4b02      	ldr	r3, [pc, #8]	; (8088708 <HAL_USB_USART_Init+0xc>)
 8088700:	681b      	ldr	r3, [r3, #0]
 8088702:	681b      	ldr	r3, [r3, #0]
 8088704:	9301      	str	r3, [sp, #4]
 8088706:	bd08      	pop	{r3, pc}
 8088708:	0806001c 	.word	0x0806001c

0808870c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 808870c:	b508      	push	{r3, lr}
 808870e:	4b02      	ldr	r3, [pc, #8]	; (8088718 <HAL_USB_USART_Begin+0xc>)
 8088710:	681b      	ldr	r3, [r3, #0]
 8088712:	685b      	ldr	r3, [r3, #4]
 8088714:	9301      	str	r3, [sp, #4]
 8088716:	bd08      	pop	{r3, pc}
 8088718:	0806001c 	.word	0x0806001c

0808871c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808871c:	b508      	push	{r3, lr}
 808871e:	4b02      	ldr	r3, [pc, #8]	; (8088728 <HAL_USB_USART_Available_Data+0xc>)
 8088720:	681b      	ldr	r3, [r3, #0]
 8088722:	691b      	ldr	r3, [r3, #16]
 8088724:	9301      	str	r3, [sp, #4]
 8088726:	bd08      	pop	{r3, pc}
 8088728:	0806001c 	.word	0x0806001c

0808872c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808872c:	b508      	push	{r3, lr}
 808872e:	4b02      	ldr	r3, [pc, #8]	; (8088738 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8088730:	681b      	ldr	r3, [r3, #0]
 8088732:	695b      	ldr	r3, [r3, #20]
 8088734:	9301      	str	r3, [sp, #4]
 8088736:	bd08      	pop	{r3, pc}
 8088738:	0806001c 	.word	0x0806001c

0808873c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808873c:	b508      	push	{r3, lr}
 808873e:	4b02      	ldr	r3, [pc, #8]	; (8088748 <HAL_USB_USART_Receive_Data+0xc>)
 8088740:	681b      	ldr	r3, [r3, #0]
 8088742:	699b      	ldr	r3, [r3, #24]
 8088744:	9301      	str	r3, [sp, #4]
 8088746:	bd08      	pop	{r3, pc}
 8088748:	0806001c 	.word	0x0806001c

0808874c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808874c:	b508      	push	{r3, lr}
 808874e:	4b02      	ldr	r3, [pc, #8]	; (8088758 <HAL_USB_USART_Send_Data+0xc>)
 8088750:	681b      	ldr	r3, [r3, #0]
 8088752:	69db      	ldr	r3, [r3, #28]
 8088754:	9301      	str	r3, [sp, #4]
 8088756:	bd08      	pop	{r3, pc}
 8088758:	0806001c 	.word	0x0806001c

0808875c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808875c:	b508      	push	{r3, lr}
 808875e:	4b02      	ldr	r3, [pc, #8]	; (8088768 <HAL_USB_USART_Flush_Data+0xc>)
 8088760:	681b      	ldr	r3, [r3, #0]
 8088762:	6a1b      	ldr	r3, [r3, #32]
 8088764:	9301      	str	r3, [sp, #4]
 8088766:	bd08      	pop	{r3, pc}
 8088768:	0806001c 	.word	0x0806001c

0808876c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 808876c:	b508      	push	{r3, lr}
 808876e:	4b02      	ldr	r3, [pc, #8]	; (8088778 <log_message_v+0xc>)
 8088770:	681b      	ldr	r3, [r3, #0]
 8088772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8088774:	9301      	str	r3, [sp, #4]
 8088776:	bd08      	pop	{r3, pc}
 8088778:	080201a0 	.word	0x080201a0

0808877c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808877c:	b508      	push	{r3, lr}
 808877e:	4b02      	ldr	r3, [pc, #8]	; (8088788 <system_mode+0xc>)
 8088780:	681b      	ldr	r3, [r3, #0]
 8088782:	681b      	ldr	r3, [r3, #0]
 8088784:	9301      	str	r3, [sp, #4]
 8088786:	bd08      	pop	{r3, pc}
 8088788:	080401a4 	.word	0x080401a4

0808878c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808878c:	b508      	push	{r3, lr}
 808878e:	4b02      	ldr	r3, [pc, #8]	; (8088798 <set_system_mode+0xc>)
 8088790:	681b      	ldr	r3, [r3, #0]
 8088792:	685b      	ldr	r3, [r3, #4]
 8088794:	9301      	str	r3, [sp, #4]
 8088796:	bd08      	pop	{r3, pc}
 8088798:	080401a4 	.word	0x080401a4

0808879c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808879c:	b508      	push	{r3, lr}
 808879e:	4b02      	ldr	r3, [pc, #8]	; (80887a8 <system_delay_ms+0xc>)
 80887a0:	681b      	ldr	r3, [r3, #0]
 80887a2:	695b      	ldr	r3, [r3, #20]
 80887a4:	9301      	str	r3, [sp, #4]
 80887a6:	bd08      	pop	{r3, pc}
 80887a8:	080401a4 	.word	0x080401a4

080887ac <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80887ac:	b508      	push	{r3, lr}
 80887ae:	4b02      	ldr	r3, [pc, #8]	; (80887b8 <system_thread_set_state+0xc>)
 80887b0:	681b      	ldr	r3, [r3, #0]
 80887b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80887b4:	9301      	str	r3, [sp, #4]
 80887b6:	bd08      	pop	{r3, pc}
 80887b8:	080401a4 	.word	0x080401a4

080887bc <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 80887bc:	b508      	push	{r3, lr}
 80887be:	4b02      	ldr	r3, [pc, #8]	; (80887c8 <system_version_info+0xc>)
 80887c0:	681b      	ldr	r3, [r3, #0]
 80887c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80887c4:	9301      	str	r3, [sp, #4]
 80887c6:	bd08      	pop	{r3, pc}
 80887c8:	080401a4 	.word	0x080401a4

080887cc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80887cc:	b508      	push	{r3, lr}
 80887ce:	4b02      	ldr	r3, [pc, #8]	; (80887d8 <application_thread_current+0xc>)
 80887d0:	681b      	ldr	r3, [r3, #0]
 80887d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80887d4:	9301      	str	r3, [sp, #4]
 80887d6:	bd08      	pop	{r3, pc}
 80887d8:	080401a4 	.word	0x080401a4

080887dc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80887dc:	b508      	push	{r3, lr}
 80887de:	4b02      	ldr	r3, [pc, #8]	; (80887e8 <application_thread_invoke+0xc>)
 80887e0:	681b      	ldr	r3, [r3, #0]
 80887e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80887e4:	9301      	str	r3, [sp, #4]
 80887e6:	bd08      	pop	{r3, pc}
 80887e8:	080401a4 	.word	0x080401a4

080887ec <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80887ec:	b508      	push	{r3, lr}
 80887ee:	4b02      	ldr	r3, [pc, #8]	; (80887f8 <system_thread_get_state+0xc>)
 80887f0:	681b      	ldr	r3, [r3, #0]
 80887f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80887f4:	9301      	str	r3, [sp, #4]
 80887f6:	bd08      	pop	{r3, pc}
 80887f8:	080401a4 	.word	0x080401a4

080887fc <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 80887fc:	b508      	push	{r3, lr}
 80887fe:	4b02      	ldr	r3, [pc, #8]	; (8088808 <system_notify_time_changed+0xc>)
 8088800:	681b      	ldr	r3, [r3, #0]
 8088802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8088804:	9301      	str	r3, [sp, #4]
 8088806:	bd08      	pop	{r3, pc}
 8088808:	080401a4 	.word	0x080401a4

0808880c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808880c:	b508      	push	{r3, lr}
 808880e:	4b03      	ldr	r3, [pc, #12]	; (808881c <system_ctrl_set_app_request_handler+0x10>)
 8088810:	681b      	ldr	r3, [r3, #0]
 8088812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8088816:	9301      	str	r3, [sp, #4]
 8088818:	bd08      	pop	{r3, pc}
 808881a:	0000      	.short	0x0000
 808881c:	080401a4 	.word	0x080401a4

08088820 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8088820:	b508      	push	{r3, lr}
 8088822:	4b03      	ldr	r3, [pc, #12]	; (8088830 <system_ctrl_set_result+0x10>)
 8088824:	681b      	ldr	r3, [r3, #0]
 8088826:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808882a:	9301      	str	r3, [sp, #4]
 808882c:	bd08      	pop	{r3, pc}
 808882e:	0000      	.short	0x0000
 8088830:	080401a4 	.word	0x080401a4

08088834 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8088834:	b508      	push	{r3, lr}
 8088836:	4b02      	ldr	r3, [pc, #8]	; (8088840 <network_connect+0xc>)
 8088838:	681b      	ldr	r3, [r3, #0]
 808883a:	685b      	ldr	r3, [r3, #4]
 808883c:	9301      	str	r3, [sp, #4]
 808883e:	bd08      	pop	{r3, pc}
 8088840:	080401c8 	.word	0x080401c8

08088844 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8088844:	b508      	push	{r3, lr}
 8088846:	4b02      	ldr	r3, [pc, #8]	; (8088850 <network_connecting+0xc>)
 8088848:	681b      	ldr	r3, [r3, #0]
 808884a:	689b      	ldr	r3, [r3, #8]
 808884c:	9301      	str	r3, [sp, #4]
 808884e:	bd08      	pop	{r3, pc}
 8088850:	080401c8 	.word	0x080401c8

08088854 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8088854:	b508      	push	{r3, lr}
 8088856:	4b02      	ldr	r3, [pc, #8]	; (8088860 <network_disconnect+0xc>)
 8088858:	681b      	ldr	r3, [r3, #0]
 808885a:	68db      	ldr	r3, [r3, #12]
 808885c:	9301      	str	r3, [sp, #4]
 808885e:	bd08      	pop	{r3, pc}
 8088860:	080401c8 	.word	0x080401c8

08088864 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8088864:	b508      	push	{r3, lr}
 8088866:	4b02      	ldr	r3, [pc, #8]	; (8088870 <network_ready+0xc>)
 8088868:	681b      	ldr	r3, [r3, #0]
 808886a:	691b      	ldr	r3, [r3, #16]
 808886c:	9301      	str	r3, [sp, #4]
 808886e:	bd08      	pop	{r3, pc}
 8088870:	080401c8 	.word	0x080401c8

08088874 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8088874:	b508      	push	{r3, lr}
 8088876:	4b02      	ldr	r3, [pc, #8]	; (8088880 <network_on+0xc>)
 8088878:	681b      	ldr	r3, [r3, #0]
 808887a:	695b      	ldr	r3, [r3, #20]
 808887c:	9301      	str	r3, [sp, #4]
 808887e:	bd08      	pop	{r3, pc}
 8088880:	080401c8 	.word	0x080401c8

08088884 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8088884:	b508      	push	{r3, lr}
 8088886:	4b02      	ldr	r3, [pc, #8]	; (8088890 <network_off+0xc>)
 8088888:	681b      	ldr	r3, [r3, #0]
 808888a:	699b      	ldr	r3, [r3, #24]
 808888c:	9301      	str	r3, [sp, #4]
 808888e:	bd08      	pop	{r3, pc}
 8088890:	080401c8 	.word	0x080401c8

08088894 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8088894:	b508      	push	{r3, lr}
 8088896:	4b02      	ldr	r3, [pc, #8]	; (80888a0 <network_listen+0xc>)
 8088898:	681b      	ldr	r3, [r3, #0]
 808889a:	69db      	ldr	r3, [r3, #28]
 808889c:	9301      	str	r3, [sp, #4]
 808889e:	bd08      	pop	{r3, pc}
 80888a0:	080401c8 	.word	0x080401c8

080888a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80888a4:	b508      	push	{r3, lr}
 80888a6:	4b02      	ldr	r3, [pc, #8]	; (80888b0 <network_listening+0xc>)
 80888a8:	681b      	ldr	r3, [r3, #0]
 80888aa:	6a1b      	ldr	r3, [r3, #32]
 80888ac:	9301      	str	r3, [sp, #4]
 80888ae:	bd08      	pop	{r3, pc}
 80888b0:	080401c8 	.word	0x080401c8

080888b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80888b4:	b508      	push	{r3, lr}
 80888b6:	4b02      	ldr	r3, [pc, #8]	; (80888c0 <network_set_listen_timeout+0xc>)
 80888b8:	681b      	ldr	r3, [r3, #0]
 80888ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80888bc:	9301      	str	r3, [sp, #4]
 80888be:	bd08      	pop	{r3, pc}
 80888c0:	080401c8 	.word	0x080401c8

080888c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80888c4:	b508      	push	{r3, lr}
 80888c6:	4b02      	ldr	r3, [pc, #8]	; (80888d0 <network_get_listen_timeout+0xc>)
 80888c8:	681b      	ldr	r3, [r3, #0]
 80888ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80888cc:	9301      	str	r3, [sp, #4]
 80888ce:	bd08      	pop	{r3, pc}
 80888d0:	080401c8 	.word	0x080401c8

080888d4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80888d4:	b508      	push	{r3, lr}
 80888d6:	4b02      	ldr	r3, [pc, #8]	; (80888e0 <spark_variable+0xc>)
 80888d8:	681b      	ldr	r3, [r3, #0]
 80888da:	681b      	ldr	r3, [r3, #0]
 80888dc:	9301      	str	r3, [sp, #4]
 80888de:	bd08      	pop	{r3, pc}
 80888e0:	080401cc 	.word	0x080401cc

080888e4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80888e4:	b508      	push	{r3, lr}
 80888e6:	4b02      	ldr	r3, [pc, #8]	; (80888f0 <spark_function+0xc>)
 80888e8:	681b      	ldr	r3, [r3, #0]
 80888ea:	685b      	ldr	r3, [r3, #4]
 80888ec:	9301      	str	r3, [sp, #4]
 80888ee:	bd08      	pop	{r3, pc}
 80888f0:	080401cc 	.word	0x080401cc

080888f4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80888f4:	b508      	push	{r3, lr}
 80888f6:	4b02      	ldr	r3, [pc, #8]	; (8088900 <spark_process+0xc>)
 80888f8:	681b      	ldr	r3, [r3, #0]
 80888fa:	689b      	ldr	r3, [r3, #8]
 80888fc:	9301      	str	r3, [sp, #4]
 80888fe:	bd08      	pop	{r3, pc}
 8088900:	080401cc 	.word	0x080401cc

08088904 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8088904:	b508      	push	{r3, lr}
 8088906:	4b02      	ldr	r3, [pc, #8]	; (8088910 <spark_cloud_flag_connect+0xc>)
 8088908:	681b      	ldr	r3, [r3, #0]
 808890a:	68db      	ldr	r3, [r3, #12]
 808890c:	9301      	str	r3, [sp, #4]
 808890e:	bd08      	pop	{r3, pc}
 8088910:	080401cc 	.word	0x080401cc

08088914 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8088914:	b508      	push	{r3, lr}
 8088916:	4b02      	ldr	r3, [pc, #8]	; (8088920 <spark_cloud_flag_connected+0xc>)
 8088918:	681b      	ldr	r3, [r3, #0]
 808891a:	695b      	ldr	r3, [r3, #20]
 808891c:	9301      	str	r3, [sp, #4]
 808891e:	bd08      	pop	{r3, pc}
 8088920:	080401cc 	.word	0x080401cc

08088924 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8088924:	b508      	push	{r3, lr}
 8088926:	4b02      	ldr	r3, [pc, #8]	; (8088930 <spark_send_event+0xc>)
 8088928:	681b      	ldr	r3, [r3, #0]
 808892a:	6a1b      	ldr	r3, [r3, #32]
 808892c:	9301      	str	r3, [sp, #4]
 808892e:	bd08      	pop	{r3, pc}
 8088930:	080401cc 	.word	0x080401cc

08088934 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8088934:	b508      	push	{r3, lr}
 8088936:	4b02      	ldr	r3, [pc, #8]	; (8088940 <spark_sync_time_pending+0xc>)
 8088938:	681b      	ldr	r3, [r3, #0]
 808893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808893c:	9301      	str	r3, [sp, #4]
 808893e:	bd08      	pop	{r3, pc}
 8088940:	080401cc 	.word	0x080401cc

08088944 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8088944:	b508      	push	{r3, lr}
 8088946:	4b02      	ldr	r3, [pc, #8]	; (8088950 <spark_set_random_seed_from_cloud_handler+0xc>)
 8088948:	681b      	ldr	r3, [r3, #0]
 808894a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808894c:	9301      	str	r3, [sp, #4]
 808894e:	bd08      	pop	{r3, pc}
 8088950:	080401cc 	.word	0x080401cc

08088954 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8088954:	b508      	push	{r3, lr}
 8088956:	4b02      	ldr	r3, [pc, #8]	; (8088960 <malloc+0xc>)
 8088958:	681b      	ldr	r3, [r3, #0]
 808895a:	681b      	ldr	r3, [r3, #0]
 808895c:	9301      	str	r3, [sp, #4]
 808895e:	bd08      	pop	{r3, pc}
 8088960:	080401a0 	.word	0x080401a0

08088964 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8088964:	b508      	push	{r3, lr}
 8088966:	4b02      	ldr	r3, [pc, #8]	; (8088970 <free+0xc>)
 8088968:	681b      	ldr	r3, [r3, #0]
 808896a:	685b      	ldr	r3, [r3, #4]
 808896c:	9301      	str	r3, [sp, #4]
 808896e:	bd08      	pop	{r3, pc}
 8088970:	080401a0 	.word	0x080401a0

08088974 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8088974:	b508      	push	{r3, lr}
 8088976:	4b02      	ldr	r3, [pc, #8]	; (8088980 <realloc+0xc>)
 8088978:	681b      	ldr	r3, [r3, #0]
 808897a:	689b      	ldr	r3, [r3, #8]
 808897c:	9301      	str	r3, [sp, #4]
 808897e:	bd08      	pop	{r3, pc}
 8088980:	080401a0 	.word	0x080401a0

08088984 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8088984:	b508      	push	{r3, lr}
 8088986:	4b02      	ldr	r3, [pc, #8]	; (8088990 <sprintf+0xc>)
 8088988:	681b      	ldr	r3, [r3, #0]
 808898a:	68db      	ldr	r3, [r3, #12]
 808898c:	9301      	str	r3, [sp, #4]
 808898e:	bd08      	pop	{r3, pc}
 8088990:	080401a0 	.word	0x080401a0

08088994 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8088994:	b508      	push	{r3, lr}
 8088996:	4b02      	ldr	r3, [pc, #8]	; (80889a0 <siprintf+0xc>)
 8088998:	681b      	ldr	r3, [r3, #0]
 808899a:	691b      	ldr	r3, [r3, #16]
 808899c:	9301      	str	r3, [sp, #4]
 808899e:	bd08      	pop	{r3, pc}
 80889a0:	080401a0 	.word	0x080401a0

080889a4 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80889a4:	b508      	push	{r3, lr}
 80889a6:	4b02      	ldr	r3, [pc, #8]	; (80889b0 <snprintf+0xc>)
 80889a8:	681b      	ldr	r3, [r3, #0]
 80889aa:	69db      	ldr	r3, [r3, #28]
 80889ac:	9301      	str	r3, [sp, #4]
 80889ae:	bd08      	pop	{r3, pc}
 80889b0:	080401a0 	.word	0x080401a0

080889b4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80889b4:	b508      	push	{r3, lr}
 80889b6:	4b02      	ldr	r3, [pc, #8]	; (80889c0 <vsnprintf+0xc>)
 80889b8:	681b      	ldr	r3, [r3, #0]
 80889ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80889bc:	9301      	str	r3, [sp, #4]
 80889be:	bd08      	pop	{r3, pc}
 80889c0:	080401a0 	.word	0x080401a0

080889c4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80889c4:	b508      	push	{r3, lr}
 80889c6:	4b02      	ldr	r3, [pc, #8]	; (80889d0 <abort+0xc>)
 80889c8:	681b      	ldr	r3, [r3, #0]
 80889ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80889cc:	9301      	str	r3, [sp, #4]
 80889ce:	bd08      	pop	{r3, pc}
 80889d0:	080401a0 	.word	0x080401a0

080889d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80889d4:	b508      	push	{r3, lr}
 80889d6:	4b02      	ldr	r3, [pc, #8]	; (80889e0 <_malloc_r+0xc>)
 80889d8:	681b      	ldr	r3, [r3, #0]
 80889da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80889dc:	9301      	str	r3, [sp, #4]
 80889de:	bd08      	pop	{r3, pc}
 80889e0:	080401a0 	.word	0x080401a0

080889e4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80889e4:	b508      	push	{r3, lr}
 80889e6:	4b02      	ldr	r3, [pc, #8]	; (80889f0 <newlib_impure_ptr_callback+0xc>)
 80889e8:	681b      	ldr	r3, [r3, #0]
 80889ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80889ec:	9301      	str	r3, [sp, #4]
 80889ee:	bd08      	pop	{r3, pc}
 80889f0:	080401a0 	.word	0x080401a0

080889f4 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 80889f4:	b508      	push	{r3, lr}
            return &Wire3;
 80889f6:	f002 f91d 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 80889fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 80889fe:	f001 bfa3 	b.w	808a948 <_ZN7TwoWire4lockEv>

08088a02 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 8088a02:	b510      	push	{r4, lr}
 8088a04:	4604      	mov	r4, r0
    lock_(_lock)
 8088a06:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 8088a08:	b109      	cbz	r1, 8088a0e <_ZN4PMICC1Eb+0xc>
        lock();
 8088a0a:	f7ff fff3 	bl	80889f4 <_ZN4PMIC4lockEv.constprop.0>
}
 8088a0e:	4620      	mov	r0, r4
 8088a10:	bd10      	pop	{r4, pc}

08088a12 <_ZN4PMIC5beginEv>:
{
 8088a12:	b508      	push	{r3, lr}
            return &Wire3;
 8088a14:	f002 f90e 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    if (!pmicWireInstance()->isEnabled()) {
 8088a18:	f001 ff92 	bl	808a940 <_ZN7TwoWire9isEnabledEv>
 8088a1c:	b918      	cbnz	r0, 8088a26 <_ZN4PMIC5beginEv+0x14>
            return &Wire3;
 8088a1e:	f002 f909 	bl	808ac34 <_Z20__fetch_global_Wire3v>
        pmicWireInstance()->begin();
 8088a22:	f001 ff35 	bl	808a890 <_ZN7TwoWire5beginEv>
            return &Wire3;
 8088a26:	f002 f905 	bl	808ac34 <_Z20__fetch_global_Wire3v>
}
 8088a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
 8088a2e:	f001 bf87 	b.w	808a940 <_ZN7TwoWire9isEnabledEv>

08088a32 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 8088a32:	b508      	push	{r3, lr}
            return &Wire3;
 8088a34:	f002 f8fe 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 8088a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 8088a3c:	f001 bf8d 	b.w	808a95a <_ZN7TwoWire6unlockEv>

08088a40 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 8088a40:	b510      	push	{r4, lr}
    if (lock_) {
 8088a42:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 8088a44:	4604      	mov	r4, r0
    if (lock_) {
 8088a46:	b10b      	cbz	r3, 8088a4c <_ZN4PMICD1Ev+0xc>
        unlock();
 8088a48:	f7ff fff3 	bl	8088a32 <_ZN4PMIC6unlockEv>
}
 8088a4c:	4620      	mov	r0, r4
 8088a4e:	bd10      	pop	{r4, pc}

08088a50 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8088a50:	b510      	push	{r4, lr}
 8088a52:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8088a54:	6800      	ldr	r0, [r0, #0]
 8088a56:	f7ff ffec 	bl	8088a32 <_ZN4PMIC6unlockEv>
 8088a5a:	4620      	mov	r0, r4
 8088a5c:	bd10      	pop	{r4, pc}

08088a5e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 8088a5e:	b530      	push	{r4, r5, lr}
 8088a60:	b087      	sub	sp, #28
 8088a62:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088a64:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088a66:	f7ff ffc5 	bl	80889f4 <_ZN4PMIC4lockEv.constprop.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088a6a:	236b      	movs	r3, #107	; 0x6b
 8088a6c:	f88d 3008 	strb.w	r3, [sp, #8]
 8088a70:	2300      	movs	r3, #0
 8088a72:	2401      	movs	r4, #1
 8088a74:	9303      	str	r3, [sp, #12]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 8088a76:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088a78:	f88d 4010 	strb.w	r4, [sp, #16]
    timeout_ = ms;
 8088a7c:	9305      	str	r3, [sp, #20]
            return &Wire3;
 8088a7e:	f002 f8d9 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 8088a82:	a902      	add	r1, sp, #8
 8088a84:	f001 ff3d 	bl	808a902 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 8088a88:	f002 f8d4 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 8088a8c:	6803      	ldr	r3, [r0, #0]
 8088a8e:	4629      	mov	r1, r5
 8088a90:	689b      	ldr	r3, [r3, #8]
 8088a92:	4798      	blx	r3
            return &Wire3;
 8088a94:	f002 f8ce 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 8088a98:	4621      	mov	r1, r4
 8088a9a:	f001 ff4a 	bl	808a932 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 8088a9e:	9403      	str	r4, [sp, #12]
            return &Wire3;
 8088aa0:	f002 f8c8 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 8088aa4:	a902      	add	r1, sp, #8
 8088aa6:	f001 fef9 	bl	808a89c <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 8088aaa:	f002 f8c3 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 8088aae:	6803      	ldr	r3, [r0, #0]
 8088ab0:	695b      	ldr	r3, [r3, #20]
 8088ab2:	4798      	blx	r3
 8088ab4:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 8088ab6:	a801      	add	r0, sp, #4
 8088ab8:	f7ff ffca 	bl	8088a50 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088abc:	b2e0      	uxtb	r0, r4
 8088abe:	b007      	add	sp, #28
 8088ac0:	bd30      	pop	{r4, r5, pc}

08088ac2 <_ZN4PMIC23readInputSourceRegisterEv>:
    return readRegister(INPUT_SOURCE_REGISTER);
 8088ac2:	2100      	movs	r1, #0
 8088ac4:	f7ff bfcb 	b.w	8088a5e <_ZN4PMIC12readRegisterEh>

08088ac8 <_ZN4PMIC20getInputCurrentLimitEv>:
uint16_t PMIC::getInputCurrentLimit(void) {
 8088ac8:	b508      	push	{r3, lr}
    byte raw = readInputSourceRegister();
 8088aca:	f7ff fffa 	bl	8088ac2 <_ZN4PMIC23readInputSourceRegisterEv>
}
 8088ace:	4b03      	ldr	r3, [pc, #12]	; (8088adc <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
    return mapping[raw];
 8088ad0:	f000 0007 	and.w	r0, r0, #7
}
 8088ad4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8088ad8:	bd08      	pop	{r3, pc}
 8088ada:	bf00      	nop
 8088adc:	08090098 	.word	0x08090098

08088ae0 <_ZN4PMIC16getChargeCurrentEv>:
    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8088ae0:	2102      	movs	r1, #2
 8088ae2:	f7ff bfbc 	b.w	8088a5e <_ZN4PMIC12readRegisterEh>

08088ae6 <_ZN4PMIC15getSystemStatusEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8088ae6:	2108      	movs	r1, #8
 8088ae8:	f7ff bfb9 	b.w	8088a5e <_ZN4PMIC12readRegisterEh>

08088aec <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 8088aec:	2109      	movs	r1, #9
 8088aee:	f7ff bfb6 	b.w	8088a5e <_ZN4PMIC12readRegisterEh>

08088af2 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 8088af2:	b570      	push	{r4, r5, r6, lr}
 8088af4:	b086      	sub	sp, #24
 8088af6:	4614      	mov	r4, r2
 8088af8:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088afa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088afc:	f7ff ff7a 	bl	80889f4 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088b00:	236b      	movs	r3, #107	; 0x6b
 8088b02:	f88d 3008 	strb.w	r3, [sp, #8]
 8088b06:	2300      	movs	r3, #0
 8088b08:	2601      	movs	r6, #1
 8088b0a:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
 8088b0c:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088b0e:	f88d 6010 	strb.w	r6, [sp, #16]
    timeout_ = ms;
 8088b12:	9305      	str	r3, [sp, #20]
            return &Wire3;
 8088b14:	f002 f88e 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 8088b18:	a902      	add	r1, sp, #8
 8088b1a:	f001 fef2 	bl	808a902 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 8088b1e:	f002 f889 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(address);
 8088b22:	6803      	ldr	r3, [r0, #0]
 8088b24:	4629      	mov	r1, r5
 8088b26:	689b      	ldr	r3, [r3, #8]
 8088b28:	4798      	blx	r3
            return &Wire3;
 8088b2a:	f002 f883 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(DATA);
 8088b2e:	6803      	ldr	r3, [r0, #0]
 8088b30:	4621      	mov	r1, r4
 8088b32:	689b      	ldr	r3, [r3, #8]
 8088b34:	4798      	blx	r3
            return &Wire3;
 8088b36:	f002 f87d 	bl	808ac34 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 8088b3a:	4631      	mov	r1, r6
 8088b3c:	f001 fef9 	bl	808a932 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
 8088b40:	a801      	add	r0, sp, #4
 8088b42:	f7ff ff85 	bl	8088a50 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088b46:	b006      	add	sp, #24
 8088b48:	bd70      	pop	{r4, r5, r6, pc}

08088b4a <_ZN4PMIC20setInputCurrentLimitEt>:
bool PMIC::setInputCurrentLimit(uint16_t current) {
 8088b4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8088b4c:	4604      	mov	r4, r0
 8088b4e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088b50:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088b52:	f7ff ff4f 	bl	80889f4 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8088b56:	2100      	movs	r1, #0
 8088b58:	4620      	mov	r0, r4
 8088b5a:	f7ff ff80 	bl	8088a5e <_ZN4PMIC12readRegisterEh>
    switch (current) {
 8088b5e:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
    byte mask = DATA & 0b11111000;
 8088b62:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
    switch (current) {
 8088b66:	d02e      	beq.n	8088bc6 <_ZN4PMIC20setInputCurrentLimitEt+0x7c>
 8088b68:	d814      	bhi.n	8088b94 <_ZN4PMIC20setInputCurrentLimitEt+0x4a>
 8088b6a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8088b6e:	d027      	beq.n	8088bc0 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8088b70:	d80a      	bhi.n	8088b88 <_ZN4PMIC20setInputCurrentLimitEt+0x3e>
 8088b72:	2d64      	cmp	r5, #100	; 0x64
 8088b74:	d01e      	beq.n	8088bb4 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
 8088b76:	2d96      	cmp	r5, #150	; 0x96
 8088b78:	d01a      	beq.n	8088bb0 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 8088b7a:	2400      	movs	r4, #0
    std::lock_guard<PMIC> l(*this);
 8088b7c:	a801      	add	r0, sp, #4
 8088b7e:	f7ff ff67 	bl	8088a50 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088b82:	4620      	mov	r0, r4
 8088b84:	b003      	add	sp, #12
 8088b86:	bd30      	pop	{r4, r5, pc}
    switch (current) {
 8088b88:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8088b8c:	d1f5      	bne.n	8088b7a <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8088b8e:	f042 0203 	orr.w	r2, r2, #3
 8088b92:	e00f      	b.n	8088bb4 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
    switch (current) {
 8088b94:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8088b98:	d018      	beq.n	8088bcc <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 8088b9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8088b9e:	429d      	cmp	r5, r3
 8088ba0:	d017      	beq.n	8088bd2 <_ZN4PMIC20setInputCurrentLimitEt+0x88>
 8088ba2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8088ba6:	429d      	cmp	r5, r3
 8088ba8:	d1e7      	bne.n	8088b7a <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 8088baa:	f042 0205 	orr.w	r2, r2, #5
 8088bae:	e001      	b.n	8088bb4 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 8088bb0:	f042 0201 	orr.w	r2, r2, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8088bb4:	4620      	mov	r0, r4
 8088bb6:	2100      	movs	r1, #0
 8088bb8:	f7ff ff9b 	bl	8088af2 <_ZN4PMIC13writeRegisterEhh>
    return 1; // value was written successfully
 8088bbc:	2401      	movs	r4, #1
        break;
 8088bbe:	e7dd      	b.n	8088b7c <_ZN4PMIC20setInputCurrentLimitEt+0x32>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 8088bc0:	f042 0202 	orr.w	r2, r2, #2
 8088bc4:	e7f6      	b.n	8088bb4 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 8088bc6:	f042 0204 	orr.w	r2, r2, #4
 8088bca:	e7f3      	b.n	8088bb4 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8088bcc:	f042 0206 	orr.w	r2, r2, #6
 8088bd0:	e7f0      	b.n	8088bb4 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8088bd2:	f042 0207 	orr.w	r2, r2, #7
 8088bd6:	e7ed      	b.n	8088bb4 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>

08088bd8 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
 8088bd8:	b513      	push	{r0, r1, r4, lr}
 8088bda:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088bdc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088bde:	f7ff ff09 	bl	80889f4 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 8088be2:	2101      	movs	r1, #1
 8088be4:	4620      	mov	r0, r4
 8088be6:	f7ff ff3a 	bl	8088a5e <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 8088bea:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 8088bee:	2101      	movs	r1, #1
 8088bf0:	4620      	mov	r0, r4
 8088bf2:	f042 0210 	orr.w	r2, r2, #16
 8088bf6:	f7ff ff7c 	bl	8088af2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8088bfa:	a801      	add	r0, sp, #4
 8088bfc:	f7ff ff28 	bl	8088a50 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088c00:	2001      	movs	r0, #1
 8088c02:	b002      	add	sp, #8
 8088c04:	bd10      	pop	{r4, pc}

08088c06 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8088c06:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8088c0a:	460c      	mov	r4, r1
 8088c0c:	4617      	mov	r7, r2
 8088c0e:	4605      	mov	r5, r0
 8088c10:	461e      	mov	r6, r3
 8088c12:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 8088c16:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8088c1a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088c1e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088c20:	f7ff fee8 	bl	80889f4 <_ZN4PMIC4lockEv.constprop.0>
    if (bit7) current = current | 0b10000000;
 8088c24:	2c00      	cmp	r4, #0
 8088c26:	bf0c      	ite	eq
 8088c28:	2400      	moveq	r4, #0
 8088c2a:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8088c2c:	b10f      	cbz	r7, 8088c32 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x2c>
 8088c2e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    if (bit5) current = current | 0b00100000;
 8088c32:	b10e      	cbz	r6, 8088c38 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x32>
 8088c34:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8088c38:	f1ba 0f00 	cmp.w	sl, #0
 8088c3c:	d001      	beq.n	8088c42 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3c>
 8088c3e:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8088c42:	f1b9 0f00 	cmp.w	r9, #0
 8088c46:	d001      	beq.n	8088c4c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x46>
 8088c48:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8088c4c:	f1b8 0f00 	cmp.w	r8, #0
 8088c50:	d001      	beq.n	8088c56 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x50>
 8088c52:	f044 0404 	orr.w	r4, r4, #4
    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8088c56:	2102      	movs	r1, #2
 8088c58:	4628      	mov	r0, r5
 8088c5a:	f7ff ff00 	bl	8088a5e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
 8088c5e:	f000 0201 	and.w	r2, r0, #1
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8088c62:	2102      	movs	r1, #2
 8088c64:	4628      	mov	r0, r5
 8088c66:	4322      	orrs	r2, r4
 8088c68:	f7ff ff43 	bl	8088af2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8088c6c:	a801      	add	r0, sp, #4
 8088c6e:	f7ff feef 	bl	8088a50 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088c72:	2001      	movs	r0, #1
 8088c74:	b002      	add	sp, #8
 8088c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08088c7a <_ZN4PMIC16setChargeVoltageEt>:
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8088c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8088c7c:	460c      	mov	r4, r1
 8088c7e:	4605      	mov	r5, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088c80:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088c82:	f7ff feb7 	bl	80889f4 <_ZN4PMIC4lockEv.constprop.0>
    uint32_t best = 0;
 8088c86:	2200      	movs	r2, #0
    int bestDelta = 0x7fffffff;
 8088c88:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8088c8c:	4613      	mov	r3, r2
 8088c8e:	f5c4 615b 	rsb	r1, r4, #3504	; 0xdb0
        int delta = std::abs((int)sum - (int)value);
 8088c92:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 8088c96:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
        if (delta < bestDelta && sum <= value) {
 8088c9a:	4286      	cmp	r6, r0
 8088c9c:	da06      	bge.n	8088cac <_ZN4PMIC16setChargeVoltageEt+0x32>
 8088c9e:	f103 07db 	add.w	r7, r3, #219	; 0xdb
 8088ca2:	ebb4 1f07 	cmp.w	r4, r7, lsl #4
 8088ca6:	bf24      	itt	cs
 8088ca8:	4630      	movcs	r0, r6
 8088caa:	461a      	movcs	r2, r3
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8088cac:	3301      	adds	r3, #1
 8088cae:	2b40      	cmp	r3, #64	; 0x40
 8088cb0:	f101 0110 	add.w	r1, r1, #16
 8088cb4:	d1ed      	bne.n	8088c92 <_ZN4PMIC16setChargeVoltageEt+0x18>
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 8088cb6:	0092      	lsls	r2, r2, #2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8088cb8:	2104      	movs	r1, #4
 8088cba:	4628      	mov	r0, r5
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 8088cbc:	b2d4      	uxtb	r4, r2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8088cbe:	f7ff fece 	bl	8088a5e <_ZN4PMIC12readRegisterEh>
    cvcr |= (currentCvcr & 0b11);
 8088cc2:	f000 0203 	and.w	r2, r0, #3
    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);
 8088cc6:	2104      	movs	r1, #4
 8088cc8:	4628      	mov	r0, r5
 8088cca:	4322      	orrs	r2, r4
 8088ccc:	f7ff ff11 	bl	8088af2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8088cd0:	a801      	add	r0, sp, #4
 8088cd2:	f7ff febd 	bl	8088a50 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8088cd6:	2001      	movs	r0, #1
 8088cd8:	b003      	add	sp, #12
 8088cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088cdc <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8088cdc:	6880      	ldr	r0, [r0, #8]
 8088cde:	f7ff bbf5 	b.w	80884cc <os_mutex_recursive_unlock>

08088ce2 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8088ce2:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 8088ce4:	2600      	movs	r6, #0
 8088ce6:	4604      	mov	r4, r0
 8088ce8:	460d      	mov	r5, r1
 8088cea:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 8088cee:	f7ff fbd5 	bl	808849c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8088cf2:	4628      	mov	r0, r5
    _spi = spi;
 8088cf4:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8088cf6:	f7ff fcc9 	bl	808868c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8088cfa:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8088cfc:	6066      	str	r6, [r4, #4]
}
 8088cfe:	bd70      	pop	{r4, r5, r6, pc}

08088d00 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 8088d00:	b538      	push	{r3, r4, r5, lr}
 8088d02:	4604      	mov	r4, r0
 8088d04:	460d      	mov	r5, r1
    void lock() { os_mutex_recursive_lock(handle_); }
 8088d06:	6880      	ldr	r0, [r0, #8]
 8088d08:	f7ff fbd8 	bl	80884bc <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 8088d0c:	7820      	ldrb	r0, [r4, #0]
 8088d0e:	4629      	mov	r1, r5
 8088d10:	f7ff fc94 	bl	808863c <hal_spi_begin>
        unlock();
 8088d14:	4620      	mov	r0, r4
 8088d16:	f7ff ffe1 	bl	8088cdc <_ZN8SPIClass6unlockEv>
    }
}
 8088d1a:	bd38      	pop	{r3, r4, r5, pc}

08088d1c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 8088d1c:	b538      	push	{r3, r4, r5, lr}
 8088d1e:	4604      	mov	r4, r0
 8088d20:	460d      	mov	r5, r1
 8088d22:	6880      	ldr	r0, [r0, #8]
 8088d24:	f7ff fbca 	bl	80884bc <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 8088d28:	7820      	ldrb	r0, [r4, #0]
 8088d2a:	4629      	mov	r1, r5
 8088d2c:	f7ff fc8e 	bl	808864c <hal_spi_set_bit_order>
        unlock();
 8088d30:	4620      	mov	r0, r4
 8088d32:	f7ff ffd3 	bl	8088cdc <_ZN8SPIClass6unlockEv>
    }
}
 8088d36:	bd38      	pop	{r3, r4, r5, pc}

08088d38 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 8088d38:	b538      	push	{r3, r4, r5, lr}
 8088d3a:	4604      	mov	r4, r0
 8088d3c:	460d      	mov	r5, r1
 8088d3e:	6880      	ldr	r0, [r0, #8]
 8088d40:	f7ff fbbc 	bl	80884bc <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 8088d44:	7820      	ldrb	r0, [r4, #0]
 8088d46:	4629      	mov	r1, r5
 8088d48:	f7ff fc88 	bl	808865c <hal_spi_set_data_mode>
        unlock();
 8088d4c:	4620      	mov	r0, r4
 8088d4e:	f7ff ffc5 	bl	8088cdc <_ZN8SPIClass6unlockEv>
    }
}
 8088d52:	bd38      	pop	{r3, r4, r5, pc}

08088d54 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8088d54:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8088d56:	2400      	movs	r4, #0
 8088d58:	0840      	lsrs	r0, r0, #1
 8088d5a:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8088d5c:	6818      	ldr	r0, [r3, #0]
 8088d5e:	b2e5      	uxtb	r5, r4
 8088d60:	4288      	cmp	r0, r1
 8088d62:	d906      	bls.n	8088d72 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8088d64:	3401      	adds	r4, #1
 8088d66:	2c08      	cmp	r4, #8
 8088d68:	d002      	beq.n	8088d70 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8088d6a:	0840      	lsrs	r0, r0, #1
 8088d6c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8088d6e:	e7f5      	b.n	8088d5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8088d70:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 8088d72:	4b02      	ldr	r3, [pc, #8]	; (8088d7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8088d74:	5d5b      	ldrb	r3, [r3, r5]
 8088d76:	7013      	strb	r3, [r2, #0]
}
 8088d78:	bd30      	pop	{r4, r5, pc}
 8088d7a:	bf00      	nop
 8088d7c:	080900a8 	.word	0x080900a8

08088d80 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8088d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 8088d82:	2500      	movs	r5, #0
{
 8088d84:	4604      	mov	r4, r0
 8088d86:	b089      	sub	sp, #36	; 0x24
 8088d88:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 8088d8a:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 8088d8e:	9502      	str	r5, [sp, #8]
 8088d90:	f7ff fb94 	bl	80884bc <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 8088d94:	4629      	mov	r1, r5
 8088d96:	2214      	movs	r2, #20
 8088d98:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 8088d9a:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 8088d9c:	f003 f8aa 	bl	808bef4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8088da0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 8088da2:	462a      	mov	r2, r5
 8088da4:	4638      	mov	r0, r7
 8088da6:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 8088da8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 8088dac:	f7ff fc7e 	bl	80886ac <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8088db0:	ab02      	add	r3, sp, #8
 8088db2:	f10d 0207 	add.w	r2, sp, #7
 8088db6:	4631      	mov	r1, r6
 8088db8:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 8088dba:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8088dbe:	f7ff ffc9 	bl	8088d54 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 8088dc2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8088dc6:	7820      	ldrb	r0, [r4, #0]
 8088dc8:	f7ff fc50 	bl	808866c <hal_spi_set_clock_divider>
        unlock();
 8088dcc:	4620      	mov	r0, r4
 8088dce:	f7ff ff85 	bl	8088cdc <_ZN8SPIClass6unlockEv>
    }

    return clock;
}
 8088dd2:	9802      	ldr	r0, [sp, #8]
 8088dd4:	b009      	add	sp, #36	; 0x24
 8088dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088dd8 <_ZN8SPIClass15setClockDividerEh>:
{
 8088dd8:	b538      	push	{r3, r4, r5, lr}
 8088dda:	4604      	mov	r4, r0
 8088ddc:	6880      	ldr	r0, [r0, #8]
 8088dde:	460d      	mov	r5, r1
 8088de0:	f7ff fb6c 	bl	80884bc <os_mutex_recursive_lock>
        if (_dividerReference)
 8088de4:	6861      	ldr	r1, [r4, #4]
 8088de6:	b199      	cbz	r1, 8088e10 <_ZN8SPIClass15setClockDividerEh+0x38>
    unsigned result = 0;
 8088de8:	2300      	movs	r3, #0
 8088dea:	4a0c      	ldr	r2, [pc, #48]	; (8088e1c <_ZN8SPIClass15setClockDividerEh+0x44>)
        if (clock_divisors[result] == divider)
 8088dec:	f812 0b01 	ldrb.w	r0, [r2], #1
 8088df0:	4285      	cmp	r5, r0
 8088df2:	d002      	beq.n	8088dfa <_ZN8SPIClass15setClockDividerEh+0x22>
    for (; result < arraySize(clock_divisors); result++)
 8088df4:	3301      	adds	r3, #1
 8088df6:	2b08      	cmp	r3, #8
 8088df8:	d1f8      	bne.n	8088dec <_ZN8SPIClass15setClockDividerEh+0x14>
    return result + 1;
 8088dfa:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 8088dfc:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 8088dfe:	2201      	movs	r2, #1
 8088e00:	4620      	mov	r0, r4
 8088e02:	40d9      	lsrs	r1, r3
 8088e04:	f7ff ffbc 	bl	8088d80 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 8088e08:	4620      	mov	r0, r4
 8088e0a:	f7ff ff67 	bl	8088cdc <_ZN8SPIClass6unlockEv>
}
 8088e0e:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_set_clock_divider(_spi, rate);
 8088e10:	4629      	mov	r1, r5
 8088e12:	7820      	ldrb	r0, [r4, #0]
 8088e14:	f7ff fc2a 	bl	808866c <hal_spi_set_clock_divider>
 8088e18:	e7f6      	b.n	8088e08 <_ZN8SPIClass15setClockDividerEh+0x30>
 8088e1a:	bf00      	nop
 8088e1c:	080900a8 	.word	0x080900a8

08088e20 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 8088e20:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 8088e22:	7800      	ldrb	r0, [r0, #0]
 8088e24:	f7ff fc2a 	bl	808867c <hal_spi_transfer>
}
 8088e28:	b2c0      	uxtb	r0, r0
 8088e2a:	bd08      	pop	{r3, pc}

08088e2c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8088e2c:	b530      	push	{r4, r5, lr}
 8088e2e:	b087      	sub	sp, #28
 8088e30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8088e32:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 8088e34:	9500      	str	r5, [sp, #0]
 8088e36:	7800      	ldrb	r0, [r0, #0]
 8088e38:	f7ff fc40 	bl	80886bc <hal_spi_transfer_dma>
    if (user_callback == NULL)
 8088e3c:	b93d      	cbnz	r5, 8088e4e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 8088e3e:	7820      	ldrb	r0, [r4, #0]
 8088e40:	a902      	add	r1, sp, #8
 8088e42:	f7ff fc43 	bl	80886cc <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 8088e46:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8088e4a:	07db      	lsls	r3, r3, #31
 8088e4c:	d4f7      	bmi.n	8088e3e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
 8088e4e:	b007      	add	sp, #28
 8088e50:	bd30      	pop	{r4, r5, pc}
	...

08088e54 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8088e54:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8088e56:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8088e58:	b510      	push	{r4, lr}
 8088e5a:	4b08      	ldr	r3, [pc, #32]	; (8088e7c <_GLOBAL__sub_I_System+0x28>)
 8088e5c:	4c08      	ldr	r4, [pc, #32]	; (8088e80 <_GLOBAL__sub_I_System+0x2c>)
 8088e5e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8088e60:	4b08      	ldr	r3, [pc, #32]	; (8088e84 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8088e62:	6020      	str	r0, [r4, #0]
 8088e64:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 8088e66:	71a0      	strb	r0, [r4, #6]
 8088e68:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8088e6a:	f7ff fc8f 	bl	808878c <set_system_mode>
SystemClass System;
 8088e6e:	4620      	mov	r0, r4
 8088e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8088e74:	4a04      	ldr	r2, [pc, #16]	; (8088e88 <_GLOBAL__sub_I_System+0x34>)
 8088e76:	4905      	ldr	r1, [pc, #20]	; (8088e8c <_GLOBAL__sub_I_System+0x38>)
 8088e78:	f001 bf04 	b.w	808ac84 <__aeabi_atexit>
 8088e7c:	20000cd4 	.word	0x20000cd4
 8088e80:	20000cc8 	.word	0x20000cc8
 8088e84:	ffff0000 	.word	0xffff0000
 8088e88:	200002b0 	.word	0x200002b0
 8088e8c:	080809ed 	.word	0x080809ed

08088e90 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8088e90:	b510      	push	{r4, lr}
 8088e92:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8088e94:	f003 f895 	bl	808bfc2 <strlen>
 8088e98:	1e43      	subs	r3, r0, #1
 8088e9a:	4620      	mov	r0, r4
 8088e9c:	4423      	add	r3, r4
	while(i<j){
 8088e9e:	4283      	cmp	r3, r0
 8088ea0:	d906      	bls.n	8088eb0 <_Z11str_reversePc+0x20>
		c = *i;
 8088ea2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8088ea4:	7819      	ldrb	r1, [r3, #0]
 8088ea6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8088eaa:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 8088eae:	e7f6      	b.n	8088e9e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 8088eb0:	bd10      	pop	{r4, pc}

08088eb2 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 8088eb2:	1e93      	subs	r3, r2, #2
 8088eb4:	2b22      	cmp	r3, #34	; 0x22
 8088eb6:	f04f 0300 	mov.w	r3, #0
{
 8088eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088ebe:	b08c      	sub	sp, #48	; 0x30
 8088ec0:	460d      	mov	r5, r1
 8088ec2:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 8088ec4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 8088ec8:	d926      	bls.n	8088f18 <ltoa+0x66>

      if (10 == base && N < 0L)
 8088eca:	2800      	cmp	r0, #0
 8088ecc:	da29      	bge.n	8088f22 <ltoa+0x70>
      {
            *head++ = '-';
 8088ece:	462e      	mov	r6, r5
 8088ed0:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 8088ed2:	240a      	movs	r4, #10
            *head++ = '-';
 8088ed4:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 8088ed8:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 8088eda:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 8088ede:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 8088ee2:	4622      	mov	r2, r4
 8088ee4:	4601      	mov	r1, r0
 8088ee6:	a801      	add	r0, sp, #4
 8088ee8:	f002 ffd4 	bl	808be94 <ldiv>
 8088eec:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 8088eee:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 8088ef0:	2b09      	cmp	r3, #9
 8088ef2:	bfcc      	ite	gt
 8088ef4:	2237      	movgt	r2, #55	; 0x37
 8088ef6:	2230      	movle	r2, #48	; 0x30
 8088ef8:	4413      	add	r3, r2
 8088efa:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 8088efe:	f108 0801 	add.w	r8, r8, #1
 8088f02:	2800      	cmp	r0, #0
 8088f04:	d1ed      	bne.n	8088ee2 <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 8088f06:	4642      	mov	r2, r8
 8088f08:	4630      	mov	r0, r6
 8088f0a:	1c79      	adds	r1, r7, #1
 8088f0c:	f002 ffe4 	bl	808bed8 <memcpy>
      return str;
}
 8088f10:	4628      	mov	r0, r5
 8088f12:	b00c      	add	sp, #48	; 0x30
 8088f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 8088f18:	2a0a      	cmp	r2, #10
 8088f1a:	d0d6      	beq.n	8088eca <ltoa+0x18>
      if (uarg)
 8088f1c:	b118      	cbz	r0, 8088f26 <ltoa+0x74>
 8088f1e:	462e      	mov	r6, r5
 8088f20:	e7db      	b.n	8088eda <ltoa+0x28>
 8088f22:	240a      	movs	r4, #10
 8088f24:	e7fa      	b.n	8088f1c <ltoa+0x6a>
      else  *tail-- = '0';
 8088f26:	2330      	movs	r3, #48	; 0x30
 8088f28:	462e      	mov	r6, r5
      int i = 2;
 8088f2a:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 8088f2e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8088f32:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 8088f36:	e7e6      	b.n	8088f06 <ltoa+0x54>

08088f38 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8088f38:	b570      	push	{r4, r5, r6, lr}
 8088f3a:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8088f3c:	1e91      	subs	r1, r2, #2
 8088f3e:	2922      	cmp	r1, #34	; 0x22
 8088f40:	d822      	bhi.n	8088f88 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 8088f42:	4625      	mov	r5, r4

	div_t result;
	while(a){
 8088f44:	b168      	cbz	r0, 8088f62 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8088f46:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8088f4a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8088f4e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8088f50:	2809      	cmp	r0, #9
                *ptr += '0';
 8088f52:	bf94      	ite	ls
 8088f54:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8088f56:	3157      	addhi	r1, #87	; 0x57
 8088f58:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 8088f5a:	4630      	mov	r0, r6
 8088f5c:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 8088f60:	e7f0      	b.n	8088f44 <ultoa+0xc>
 8088f62:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 8088f64:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 8088f66:	4423      	add	r3, r4
 8088f68:	4293      	cmp	r3, r2
 8088f6a:	d902      	bls.n	8088f72 <ultoa+0x3a>
            *ptr++ = '0';
 8088f6c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 8088f70:	e7fa      	b.n	8088f68 <ultoa+0x30>
 8088f72:	1b5a      	subs	r2, r3, r5
 8088f74:	42ab      	cmp	r3, r5
 8088f76:	bf38      	it	cc
 8088f78:	2200      	movcc	r2, #0

	*ptr = '\0';
 8088f7a:	2300      	movs	r3, #0
	str_reverse(buffer);
 8088f7c:	4620      	mov	r0, r4
	*ptr = '\0';
 8088f7e:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 8088f80:	f7ff ff86 	bl	8088e90 <_Z11str_reversePc>
	return buffer;
 8088f84:	4620      	mov	r0, r4
}
 8088f86:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 8088f88:	2000      	movs	r0, #0
 8088f8a:	e7fc      	b.n	8088f86 <ultoa+0x4e>

08088f8c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8088f8c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8088f8e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8088f90:	460c      	mov	r4, r1
 8088f92:	4615      	mov	r5, r2
	if(a<0){
 8088f94:	da0d      	bge.n	8088fb2 <itoa+0x26>
		*buffer = '-';
 8088f96:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8088f98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8088f9c:	bf0c      	ite	eq
 8088f9e:	4618      	moveq	r0, r3
 8088fa0:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8088fa2:	2301      	movs	r3, #1
		*buffer = '-';
 8088fa4:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 8088fa6:	462a      	mov	r2, r5
 8088fa8:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 8088faa:	f7ff ffc5 	bl	8088f38 <ultoa>
	}
	return buffer;
}
 8088fae:	4620      	mov	r0, r4
 8088fb0:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 8088fb2:	2301      	movs	r3, #1
 8088fb4:	e7f9      	b.n	8088faa <itoa+0x1e>
	...

08088fb8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8088fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8088fbc:	4607      	mov	r7, r0
 8088fbe:	460d      	mov	r5, r1
 8088fc0:	4616      	mov	r6, r2
 8088fc2:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 8088fc4:	2200      	movs	r2, #0
 8088fc6:	2300      	movs	r3, #0
 8088fc8:	4638      	mov	r0, r7
 8088fca:	4629      	mov	r1, r5
 8088fcc:	f002 fa9a 	bl	808b504 <__aeabi_dcmplt>
 8088fd0:	b120      	cbz	r0, 8088fdc <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 8088fd2:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 8088fd4:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 8088fd8:	f804 3b01 	strb.w	r3, [r4], #1
 8088fdc:	2300      	movs	r3, #0
    }
    long scale = 1;
 8088fde:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 8088fe2:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 8088fe4:	b2d9      	uxtb	r1, r3
 8088fe6:	428e      	cmp	r6, r1
 8088fe8:	d903      	bls.n	8088ff2 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 8088fea:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 8088fee:	3301      	adds	r3, #1
 8088ff0:	e7f8      	b.n	8088fe4 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 8088ff2:	4650      	mov	r0, sl
 8088ff4:	f001 ffaa 	bl	808af4c <__aeabi_i2d>
 8088ff8:	463a      	mov	r2, r7
 8088ffa:	462b      	mov	r3, r5
 8088ffc:	f002 f810 	bl	808b020 <__aeabi_dmul>
 8089000:	4680      	mov	r8, r0
 8089002:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 8089004:	f002 feea 	bl	808bddc <__aeabi_d2ulz>
 8089008:	4605      	mov	r5, r0
 808900a:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 808900c:	f001 ffd2 	bl	808afb4 <__aeabi_ul2d>
 8089010:	4602      	mov	r2, r0
 8089012:	460b      	mov	r3, r1
 8089014:	4640      	mov	r0, r8
 8089016:	4649      	mov	r1, r9
 8089018:	f001 fe4a 	bl	808acb0 <__aeabi_dsub>
 808901c:	2200      	movs	r2, #0
 808901e:	4b12      	ldr	r3, [pc, #72]	; (8089068 <_Z4dtoadhPc+0xb0>)
 8089020:	f002 fa84 	bl	808b52c <__aeabi_dcmpge>
 8089024:	b110      	cbz	r0, 808902c <_Z4dtoadhPc+0x74>
        fixed++;
 8089026:	3501      	adds	r5, #1
 8089028:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 808902c:	4652      	mov	r2, sl
 808902e:	4628      	mov	r0, r5
 8089030:	4639      	mov	r1, r7
 8089032:	17d3      	asrs	r3, r2, #31
 8089034:	f002 fe86 	bl	808bd44 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 8089038:	2301      	movs	r3, #1
 808903a:	4615      	mov	r5, r2
 808903c:	4621      	mov	r1, r4
 808903e:	220a      	movs	r2, #10
 8089040:	f7ff ff7a 	bl	8088f38 <ultoa>
    if (prec) {
 8089044:	b16e      	cbz	r6, 8089062 <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 8089046:	4620      	mov	r0, r4
 8089048:	f002 ffbb 	bl	808bfc2 <strlen>
        *sout++ = '.';
 808904c:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 808904e:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 8089050:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 8089052:	220a      	movs	r2, #10
 8089054:	4633      	mov	r3, r6
 8089056:	4628      	mov	r0, r5
    }
}
 8089058:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 808905c:	3101      	adds	r1, #1
 808905e:	f7ff bf6b 	b.w	8088f38 <ultoa>
}
 8089062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089066:	bf00      	nop
 8089068:	3fe00000 	.word	0x3fe00000

0808906c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808906c:	b510      	push	{r4, lr}
 808906e:	4604      	mov	r4, r0
{
	free(buffer);
 8089070:	6800      	ldr	r0, [r0, #0]
 8089072:	f7ff fc77 	bl	8088964 <free>
}
 8089076:	4620      	mov	r0, r4
 8089078:	bd10      	pop	{r4, pc}

0808907a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808907a:	b510      	push	{r4, lr}
 808907c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808907e:	6800      	ldr	r0, [r0, #0]
 8089080:	b108      	cbz	r0, 8089086 <_ZN6String10invalidateEv+0xc>
 8089082:	f7ff fc6f 	bl	8088964 <free>
	buffer = NULL;
 8089086:	2300      	movs	r3, #0
	capacity = len = 0;
 8089088:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 808908c:	6023      	str	r3, [r4, #0]
}
 808908e:	bd10      	pop	{r4, pc}

08089090 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8089090:	b538      	push	{r3, r4, r5, lr}
 8089092:	4604      	mov	r4, r0
 8089094:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8089096:	6800      	ldr	r0, [r0, #0]
 8089098:	3101      	adds	r1, #1
 808909a:	f7ff fc6b 	bl	8088974 <realloc>
	if (newbuffer) {
 808909e:	b110      	cbz	r0, 80890a6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80890a0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80890a4:	2001      	movs	r0, #1
	}
	return 0;
}
 80890a6:	bd38      	pop	{r3, r4, r5, pc}

080890a8 <_ZN6String7reserveEj>:
{
 80890a8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80890aa:	6803      	ldr	r3, [r0, #0]
{
 80890ac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80890ae:	b123      	cbz	r3, 80890ba <_ZN6String7reserveEj+0x12>
 80890b0:	6843      	ldr	r3, [r0, #4]
 80890b2:	428b      	cmp	r3, r1
 80890b4:	d301      	bcc.n	80890ba <_ZN6String7reserveEj+0x12>
 80890b6:	2001      	movs	r0, #1
}
 80890b8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80890ba:	4620      	mov	r0, r4
 80890bc:	f7ff ffe8 	bl	8089090 <_ZN6String12changeBufferEj>
 80890c0:	2800      	cmp	r0, #0
 80890c2:	d0f9      	beq.n	80890b8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80890c4:	68a3      	ldr	r3, [r4, #8]
 80890c6:	2b00      	cmp	r3, #0
 80890c8:	d1f5      	bne.n	80890b6 <_ZN6String7reserveEj+0xe>
 80890ca:	6822      	ldr	r2, [r4, #0]
 80890cc:	7013      	strb	r3, [r2, #0]
 80890ce:	e7f2      	b.n	80890b6 <_ZN6String7reserveEj+0xe>

080890d0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80890d0:	b570      	push	{r4, r5, r6, lr}
 80890d2:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80890d4:	4611      	mov	r1, r2
{
 80890d6:	4604      	mov	r4, r0
 80890d8:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80890da:	f7ff ffe5 	bl	80890a8 <_ZN6String7reserveEj>
 80890de:	b920      	cbnz	r0, 80890ea <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80890e0:	4620      	mov	r0, r4
 80890e2:	f7ff ffca 	bl	808907a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80890e6:	4620      	mov	r0, r4
 80890e8:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80890ea:	462a      	mov	r2, r5
 80890ec:	4631      	mov	r1, r6
 80890ee:	6820      	ldr	r0, [r4, #0]
	len = length;
 80890f0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80890f2:	f002 fef1 	bl	808bed8 <memcpy>
	buffer[len] = 0;
 80890f6:	2100      	movs	r1, #0
 80890f8:	6822      	ldr	r2, [r4, #0]
 80890fa:	68a3      	ldr	r3, [r4, #8]
 80890fc:	54d1      	strb	r1, [r2, r3]
	return *this;
 80890fe:	e7f2      	b.n	80890e6 <_ZN6String4copyEPKcj+0x16>

08089100 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8089100:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8089102:	2300      	movs	r3, #0
String::String(const char *cstr)
 8089104:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8089106:	460d      	mov	r5, r1
	capacity = 0;
 8089108:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 808910c:	6083      	str	r3, [r0, #8]
	flags = 0;
 808910e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8089110:	b139      	cbz	r1, 8089122 <_ZN6StringC1EPKc+0x22>
 8089112:	4608      	mov	r0, r1
 8089114:	f002 ff55 	bl	808bfc2 <strlen>
 8089118:	4629      	mov	r1, r5
 808911a:	4602      	mov	r2, r0
 808911c:	4620      	mov	r0, r4
 808911e:	f7ff ffd7 	bl	80890d0 <_ZN6String4copyEPKcj>
}
 8089122:	4620      	mov	r0, r4
 8089124:	bd38      	pop	{r3, r4, r5, pc}

08089126 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8089126:	b538      	push	{r3, r4, r5, lr}
 8089128:	4605      	mov	r5, r0
	if (buffer) {
 808912a:	6800      	ldr	r0, [r0, #0]
{
 808912c:	460c      	mov	r4, r1
	if (buffer) {
 808912e:	b168      	cbz	r0, 808914c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8089130:	686a      	ldr	r2, [r5, #4]
 8089132:	688b      	ldr	r3, [r1, #8]
 8089134:	429a      	cmp	r2, r3
 8089136:	d307      	bcc.n	8089148 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 8089138:	6809      	ldr	r1, [r1, #0]
 808913a:	f002 ff1e 	bl	808bf7a <strcpy>
			len = rhs.len;
 808913e:	68a3      	ldr	r3, [r4, #8]
 8089140:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8089142:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8089144:	60a3      	str	r3, [r4, #8]
}
 8089146:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 8089148:	f7ff fc0c 	bl	8088964 <free>
	buffer = rhs.buffer;
 808914c:	6823      	ldr	r3, [r4, #0]
 808914e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8089150:	6863      	ldr	r3, [r4, #4]
 8089152:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8089154:	68a3      	ldr	r3, [r4, #8]
 8089156:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8089158:	2300      	movs	r3, #0
	rhs.capacity = 0;
 808915a:	e9c4 3300 	strd	r3, r3, [r4]
 808915e:	e7f1      	b.n	8089144 <_ZN6String4moveERS_+0x1e>

08089160 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8089160:	4288      	cmp	r0, r1
{
 8089162:	b510      	push	{r4, lr}
 8089164:	460b      	mov	r3, r1
 8089166:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8089168:	d004      	beq.n	8089174 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808916a:	6809      	ldr	r1, [r1, #0]
 808916c:	b121      	cbz	r1, 8089178 <_ZN6StringaSERKS_+0x18>
 808916e:	689a      	ldr	r2, [r3, #8]
 8089170:	f7ff ffae 	bl	80890d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8089174:	4620      	mov	r0, r4
 8089176:	bd10      	pop	{r4, pc}
	else invalidate();
 8089178:	f7ff ff7f 	bl	808907a <_ZN6String10invalidateEv>
 808917c:	e7fa      	b.n	8089174 <_ZN6StringaSERKS_+0x14>

0808917e <_ZN6StringC1ERKS_>:
	buffer = NULL;
 808917e:	2300      	movs	r3, #0
String::String(const String &value)
 8089180:	b510      	push	{r4, lr}
 8089182:	4604      	mov	r4, r0
	capacity = 0;
 8089184:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8089188:	6083      	str	r3, [r0, #8]
	flags = 0;
 808918a:	7303      	strb	r3, [r0, #12]
	*this = value;
 808918c:	f7ff ffe8 	bl	8089160 <_ZN6StringaSERKS_>
}
 8089190:	4620      	mov	r0, r4
 8089192:	bd10      	pop	{r4, pc}

08089194 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8089194:	4288      	cmp	r0, r1
{
 8089196:	b510      	push	{r4, lr}
 8089198:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 808919a:	d001      	beq.n	80891a0 <_ZN6StringaSEOS_+0xc>
 808919c:	f7ff ffc3 	bl	8089126 <_ZN6String4moveERS_>
	return *this;
}
 80891a0:	4620      	mov	r0, r4
 80891a2:	bd10      	pop	{r4, pc}

080891a4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80891a4:	b538      	push	{r3, r4, r5, lr}
 80891a6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80891a8:	460c      	mov	r4, r1
 80891aa:	b149      	cbz	r1, 80891c0 <_ZN6StringaSEPKc+0x1c>
 80891ac:	4608      	mov	r0, r1
 80891ae:	f002 ff08 	bl	808bfc2 <strlen>
 80891b2:	4621      	mov	r1, r4
 80891b4:	4602      	mov	r2, r0
 80891b6:	4628      	mov	r0, r5
 80891b8:	f7ff ff8a 	bl	80890d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80891bc:	4628      	mov	r0, r5
 80891be:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80891c0:	f7ff ff5b 	bl	808907a <_ZN6String10invalidateEv>
 80891c4:	e7fa      	b.n	80891bc <_ZN6StringaSEPKc+0x18>

080891c6 <_ZN6StringC1Ec>:
	buffer = NULL;
 80891c6:	2300      	movs	r3, #0
String::String(char c)
 80891c8:	b513      	push	{r0, r1, r4, lr}
 80891ca:	4604      	mov	r4, r0
	buf[0] = c;
 80891cc:	f88d 1004 	strb.w	r1, [sp, #4]
	capacity = 0;
 80891d0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80891d4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80891d6:	7303      	strb	r3, [r0, #12]
	*this = buf;
 80891d8:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80891da:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 80891de:	f7ff ffe1 	bl	80891a4 <_ZN6StringaSEPKc>
}
 80891e2:	4620      	mov	r0, r4
 80891e4:	b002      	add	sp, #8
 80891e6:	bd10      	pop	{r4, pc}

080891e8 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80891e8:	b510      	push	{r4, lr}
	buffer = NULL;
 80891ea:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80891ec:	4604      	mov	r4, r0
 80891ee:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80891f0:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80891f4:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80891f6:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80891f8:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80891fa:	a901      	add	r1, sp, #4
 80891fc:	f7ff fec6 	bl	8088f8c <itoa>
	*this = buf;
 8089200:	4620      	mov	r0, r4
 8089202:	a901      	add	r1, sp, #4
 8089204:	f7ff ffce 	bl	80891a4 <_ZN6StringaSEPKc>
}
 8089208:	4620      	mov	r0, r4
 808920a:	b00a      	add	sp, #40	; 0x28
 808920c:	bd10      	pop	{r4, pc}

0808920e <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
 808920e:	b510      	push	{r4, lr}
	buffer = NULL;
 8089210:	2300      	movs	r3, #0
String::String(long value, unsigned char base)
 8089212:	4604      	mov	r4, r0
 8089214:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 8089216:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 808921a:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808921c:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
 808921e:	4608      	mov	r0, r1
	ltoa(value, buf, base);
 8089220:	a901      	add	r1, sp, #4
 8089222:	f7ff fe46 	bl	8088eb2 <ltoa>
	*this = buf;
 8089226:	4620      	mov	r0, r4
 8089228:	a901      	add	r1, sp, #4
 808922a:	f7ff ffbb 	bl	80891a4 <_ZN6StringaSEPKc>
}
 808922e:	4620      	mov	r0, r4
 8089230:	b00a      	add	sp, #40	; 0x28
 8089232:	bd10      	pop	{r4, pc}

08089234 <_ZN6StringC1Efi>:
	buffer = NULL;
 8089234:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 8089236:	b530      	push	{r4, r5, lr}
 8089238:	4604      	mov	r4, r0
 808923a:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 808923c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8089240:	6083      	str	r3, [r0, #8]
	flags = 0;
 8089242:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 8089244:	b2d5      	uxtb	r5, r2
 8089246:	4608      	mov	r0, r1
 8089248:	f001 fe92 	bl	808af70 <__aeabi_f2d>
 808924c:	462a      	mov	r2, r5
 808924e:	ab01      	add	r3, sp, #4
 8089250:	f7ff feb2 	bl	8088fb8 <_Z4dtoadhPc>
        *this = buf;
 8089254:	4620      	mov	r0, r4
 8089256:	a901      	add	r1, sp, #4
 8089258:	f7ff ffa4 	bl	80891a4 <_ZN6StringaSEPKc>
}
 808925c:	4620      	mov	r0, r4
 808925e:	b00b      	add	sp, #44	; 0x2c
 8089260:	bd30      	pop	{r4, r5, pc}

08089262 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
 8089262:	b510      	push	{r4, lr}
 8089264:	4619      	mov	r1, r3
 8089266:	4604      	mov	r4, r0
	buffer = NULL;
 8089268:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
 808926a:	b08a      	sub	sp, #40	; 0x28
 808926c:	4610      	mov	r0, r2
	capacity = 0;
 808926e:	e9c4 3300 	strd	r3, r3, [r4]
	dtoa(value, decimalPlaces, buf);
 8089272:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	len = 0;
 8089276:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8089278:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
 808927a:	ab01      	add	r3, sp, #4
 808927c:	f7ff fe9c 	bl	8088fb8 <_Z4dtoadhPc>
        *this = buf;
 8089280:	4620      	mov	r0, r4
 8089282:	a901      	add	r1, sp, #4
 8089284:	f7ff ff8e 	bl	80891a4 <_ZN6StringaSEPKc>
}
 8089288:	4620      	mov	r0, r4
 808928a:	b00a      	add	sp, #40	; 0x28
 808928c:	bd10      	pop	{r4, pc}

0808928e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808928e:	b570      	push	{r4, r5, r6, lr}
 8089290:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8089292:	460e      	mov	r6, r1
 8089294:	b909      	cbnz	r1, 808929a <_ZN6String6concatEPKcj+0xc>
 8089296:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8089298:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 808929a:	b16a      	cbz	r2, 80892b8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 808929c:	6884      	ldr	r4, [r0, #8]
 808929e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80892a0:	4621      	mov	r1, r4
 80892a2:	f7ff ff01 	bl	80890a8 <_ZN6String7reserveEj>
 80892a6:	2800      	cmp	r0, #0
 80892a8:	d0f5      	beq.n	8089296 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80892aa:	6828      	ldr	r0, [r5, #0]
 80892ac:	68ab      	ldr	r3, [r5, #8]
 80892ae:	4631      	mov	r1, r6
 80892b0:	4418      	add	r0, r3
 80892b2:	f002 fe62 	bl	808bf7a <strcpy>
	len = newlen;
 80892b6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80892b8:	2001      	movs	r0, #1
 80892ba:	e7ed      	b.n	8089298 <_ZN6String6concatEPKcj+0xa>

080892bc <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80892bc:	688a      	ldr	r2, [r1, #8]
 80892be:	6809      	ldr	r1, [r1, #0]
 80892c0:	f7ff bfe5 	b.w	808928e <_ZN6String6concatEPKcj>

080892c4 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 80892c4:	b538      	push	{r3, r4, r5, lr}
 80892c6:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80892c8:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80892ca:	4608      	mov	r0, r1
	if (!cstr) return 0;
 80892cc:	b141      	cbz	r1, 80892e0 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80892ce:	f002 fe78 	bl	808bfc2 <strlen>
 80892d2:	4621      	mov	r1, r4
 80892d4:	4602      	mov	r2, r0
 80892d6:	4628      	mov	r0, r5
}
 80892d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 80892dc:	f7ff bfd7 	b.w	808928e <_ZN6String6concatEPKcj>
}
 80892e0:	bd38      	pop	{r3, r4, r5, pc}

080892e2 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80892e2:	2300      	movs	r3, #0
{
 80892e4:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80892e6:	2201      	movs	r2, #1
	buf[0] = c;
 80892e8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80892ec:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80892ee:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80892f2:	f7ff ffcc 	bl	808928e <_ZN6String6concatEPKcj>
}
 80892f6:	b003      	add	sp, #12
 80892f8:	f85d fb04 	ldr.w	pc, [sp], #4

080892fc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80892fc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80892fe:	688a      	ldr	r2, [r1, #8]
 8089300:	6809      	ldr	r1, [r1, #0]
{
 8089302:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8089304:	f7ff ffc3 	bl	808928e <_ZN6String6concatEPKcj>
 8089308:	b910      	cbnz	r0, 8089310 <_ZplRK15StringSumHelperRK6String+0x14>
 808930a:	4620      	mov	r0, r4
 808930c:	f7ff feb5 	bl	808907a <_ZN6String10invalidateEv>
	return a;
}
 8089310:	4620      	mov	r0, r4
 8089312:	bd10      	pop	{r4, pc}

08089314 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8089314:	b538      	push	{r3, r4, r5, lr}
 8089316:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8089318:	460d      	mov	r5, r1
 808931a:	b921      	cbnz	r1, 8089326 <_ZplRK15StringSumHelperPKc+0x12>
 808931c:	4620      	mov	r0, r4
 808931e:	f7ff feac 	bl	808907a <_ZN6String10invalidateEv>
	return a;
}
 8089322:	4620      	mov	r0, r4
 8089324:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8089326:	4608      	mov	r0, r1
 8089328:	f002 fe4b 	bl	808bfc2 <strlen>
 808932c:	4629      	mov	r1, r5
 808932e:	4602      	mov	r2, r0
 8089330:	4620      	mov	r0, r4
 8089332:	f7ff ffac 	bl	808928e <_ZN6String6concatEPKcj>
 8089336:	2800      	cmp	r0, #0
 8089338:	d0f0      	beq.n	808931c <_ZplRK15StringSumHelperPKc+0x8>
 808933a:	e7f2      	b.n	8089322 <_ZplRK15StringSumHelperPKc+0xe>

0808933c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808933c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808933e:	6882      	ldr	r2, [r0, #8]
 8089340:	b93a      	cbnz	r2, 8089352 <_ZNK6String6equalsEPKc+0x16>
 8089342:	b121      	cbz	r1, 808934e <_ZNK6String6equalsEPKc+0x12>
 8089344:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8089346:	fab0 f080 	clz	r0, r0
 808934a:	0940      	lsrs	r0, r0, #5
 808934c:	e000      	b.n	8089350 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808934e:	2001      	movs	r0, #1
}
 8089350:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8089352:	6800      	ldr	r0, [r0, #0]
 8089354:	b909      	cbnz	r1, 808935a <_ZNK6String6equalsEPKc+0x1e>
 8089356:	7800      	ldrb	r0, [r0, #0]
 8089358:	e7f5      	b.n	8089346 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 808935a:	f002 fe04 	bl	808bf66 <strcmp>
 808935e:	e7f2      	b.n	8089346 <_ZNK6String6equalsEPKc+0xa>

08089360 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8089360:	6883      	ldr	r3, [r0, #8]
 8089362:	428b      	cmp	r3, r1
 8089364:	d903      	bls.n	808936e <_ZNK6StringixEj+0xe>
 8089366:	6800      	ldr	r0, [r0, #0]
 8089368:	b110      	cbz	r0, 8089370 <_ZNK6StringixEj+0x10>
	return buffer[index];
 808936a:	5c40      	ldrb	r0, [r0, r1]
 808936c:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 808936e:	2000      	movs	r0, #0
}
 8089370:	4770      	bx	lr

08089372 <_ZNK6String6charAtEj>:
	return operator[](loc);
 8089372:	f7ff bff5 	b.w	8089360 <_ZNK6StringixEj>

08089376 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8089376:	b558      	push	{r3, r4, r6, lr}
 8089378:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 808937a:	b12a      	cbz	r2, 8089388 <_ZNK6String8getBytesEPhjj+0x12>
 808937c:	b121      	cbz	r1, 8089388 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 808937e:	6884      	ldr	r4, [r0, #8]
 8089380:	429c      	cmp	r4, r3
 8089382:	d802      	bhi.n	808938a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8089384:	2300      	movs	r3, #0
 8089386:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 8089388:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 808938a:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 808938c:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 808938e:	4294      	cmp	r4, r2
 8089390:	bf28      	it	cs
 8089392:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 8089394:	6801      	ldr	r1, [r0, #0]
 8089396:	4622      	mov	r2, r4
 8089398:	4419      	add	r1, r3
 808939a:	4630      	mov	r0, r6
 808939c:	f002 fe2b 	bl	808bff6 <strncpy>
	buf[n] = 0;
 80893a0:	2300      	movs	r3, #0
 80893a2:	5533      	strb	r3, [r6, r4]
 80893a4:	e7f0      	b.n	8089388 <_ZNK6String8getBytesEPhjj+0x12>
	...

080893a8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80893a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80893aa:	461d      	mov	r5, r3
	if (left > right) {
 80893ac:	429a      	cmp	r2, r3
 80893ae:	bf88      	it	hi
 80893b0:	4613      	movhi	r3, r2
{
 80893b2:	460f      	mov	r7, r1
 80893b4:	4614      	mov	r4, r2
	if (left > right) {
 80893b6:	bf88      	it	hi
 80893b8:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80893ba:	490b      	ldr	r1, [pc, #44]	; (80893e8 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80893bc:	bf88      	it	hi
 80893be:	461d      	movhi	r5, r3
{
 80893c0:	4606      	mov	r6, r0
	String out;
 80893c2:	f7ff fe9d 	bl	8089100 <_ZN6StringC1EPKc>
	if (left > len) return out;
 80893c6:	68ba      	ldr	r2, [r7, #8]
 80893c8:	42a2      	cmp	r2, r4
 80893ca:	d30a      	bcc.n	80893e2 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80893cc:	6839      	ldr	r1, [r7, #0]
 80893ce:	42aa      	cmp	r2, r5
 80893d0:	bf94      	ite	ls
 80893d2:	ebc4 0202 	rsbls	r2, r4, r2
 80893d6:	ebc4 0205 	rsbhi	r2, r4, r5
 80893da:	4630      	mov	r0, r6
 80893dc:	4421      	add	r1, r4
 80893de:	f7ff fe77 	bl	80890d0 <_ZN6String4copyEPKcj>
	return out;
}
 80893e2:	4630      	mov	r0, r6
 80893e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80893e6:	bf00      	nop
 80893e8:	08090075 	.word	0x08090075

080893ec <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80893ec:	6800      	ldr	r0, [r0, #0]
 80893ee:	b108      	cbz	r0, 80893f4 <_ZNK6String5toIntEv+0x8>
 80893f0:	f002 bd3d 	b.w	808be6e <atol>
	return 0;
}
 80893f4:	4770      	bx	lr

080893f6 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 80893f6:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80893f8:	6800      	ldr	r0, [r0, #0]
 80893fa:	b120      	cbz	r0, 8089406 <_ZNK6String7toFloatEv+0x10>
 80893fc:	f002 fd34 	bl	808be68 <atof>
 8089400:	f002 f906 	bl	808b610 <__aeabi_d2f>
	return 0;
}
 8089404:	bd08      	pop	{r3, pc}
	return 0;
 8089406:	2000      	movs	r0, #0
 8089408:	e7fc      	b.n	8089404 <_ZNK6String7toFloatEv+0xe>
	...

0808940c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 808940c:	b40e      	push	{r1, r2, r3}
 808940e:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8089410:	ad09      	add	r5, sp, #36	; 0x24
 8089412:	f855 7b04 	ldr.w	r7, [r5], #4
 8089416:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8089418:	462b      	mov	r3, r5
 808941a:	463a      	mov	r2, r7
 808941c:	2105      	movs	r1, #5
 808941e:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 8089420:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8089422:	f7ff fac7 	bl	80889b4 <vsnprintf>
 8089426:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 8089428:	490b      	ldr	r1, [pc, #44]	; (8089458 <_ZN6String6formatEPKcz+0x4c>)
 808942a:	4620      	mov	r0, r4
 808942c:	f7ff fe68 	bl	8089100 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 8089430:	4631      	mov	r1, r6
 8089432:	4620      	mov	r0, r4
 8089434:	f7ff fe38 	bl	80890a8 <_ZN6String7reserveEj>
    if (result.buffer) {
 8089438:	6820      	ldr	r0, [r4, #0]
 808943a:	b130      	cbz	r0, 808944a <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808943c:	462b      	mov	r3, r5
 808943e:	463a      	mov	r2, r7
 8089440:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 8089442:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8089444:	f7ff fab6 	bl	80889b4 <vsnprintf>
        va_end(marker);
        result.len = n;
 8089448:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 808944a:	4620      	mov	r0, r4
 808944c:	b004      	add	sp, #16
 808944e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8089452:	b003      	add	sp, #12
 8089454:	4770      	bx	lr
 8089456:	bf00      	nop
 8089458:	08090075 	.word	0x08090075

0808945c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808945c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808945e:	4606      	mov	r6, r0
 8089460:	460d      	mov	r5, r1
  size_t n = 0;
 8089462:	2400      	movs	r4, #0
 8089464:	188f      	adds	r7, r1, r2
  while (size--) {
 8089466:	42bd      	cmp	r5, r7
 8089468:	d00c      	beq.n	8089484 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808946a:	6833      	ldr	r3, [r6, #0]
 808946c:	4630      	mov	r0, r6
 808946e:	689b      	ldr	r3, [r3, #8]
 8089470:	f815 1b01 	ldrb.w	r1, [r5], #1
 8089474:	4798      	blx	r3
     if (chunk>=0)
 8089476:	1e03      	subs	r3, r0, #0
 8089478:	db01      	blt.n	808947e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808947a:	441c      	add	r4, r3
  while (size--) {
 808947c:	e7f3      	b.n	8089466 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808947e:	2c00      	cmp	r4, #0
 8089480:	bf08      	it	eq
 8089482:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8089484:	4620      	mov	r0, r4
 8089486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08089488 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 8089488:	b508      	push	{r3, lr}
  return write(str);
 808948a:	f7fe fa2f 	bl	80878ec <_ZN5Print5writeEPKc>
}
 808948e:	bd08      	pop	{r3, pc}

08089490 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 8089490:	6803      	ldr	r3, [r0, #0]
 8089492:	689b      	ldr	r3, [r3, #8]
 8089494:	4718      	bx	r3

08089496 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8089496:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8089498:	210d      	movs	r1, #13
{
 808949a:	4605      	mov	r5, r0
  size_t n = print('\r');
 808949c:	f7ff fff8 	bl	8089490 <_ZN5Print5printEc>
  n += print('\n');
 80894a0:	210a      	movs	r1, #10
  size_t n = print('\r');
 80894a2:	4604      	mov	r4, r0
  n += print('\n');
 80894a4:	4628      	mov	r0, r5
 80894a6:	f7ff fff3 	bl	8089490 <_ZN5Print5printEc>
  return n;
}
 80894aa:	4420      	add	r0, r4
 80894ac:	bd38      	pop	{r3, r4, r5, pc}

080894ae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80894ae:	b538      	push	{r3, r4, r5, lr}
 80894b0:	4605      	mov	r5, r0
  return write(str);
 80894b2:	f7fe fa1b 	bl	80878ec <_ZN5Print5writeEPKc>
 80894b6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80894b8:	4628      	mov	r0, r5
 80894ba:	f7ff ffec 	bl	8089496 <_ZN5Print7printlnEv>
  return n;
}
 80894be:	4420      	add	r0, r4
 80894c0:	bd38      	pop	{r3, r4, r5, pc}

080894c2 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 80894c2:	b538      	push	{r3, r4, r5, lr}
 80894c4:	4605      	mov	r5, r0
  size_t n = print(c);
 80894c6:	f7ff ffe3 	bl	8089490 <_ZN5Print5printEc>
 80894ca:	4604      	mov	r4, r0
  n += println();
 80894cc:	4628      	mov	r0, r5
 80894ce:	f7ff ffe2 	bl	8089496 <_ZN5Print7printlnEv>
  return n;
}
 80894d2:	4420      	add	r0, r4
 80894d4:	bd38      	pop	{r3, r4, r5, pc}

080894d6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80894d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80894d8:	2a01      	cmp	r2, #1
 80894da:	bf98      	it	ls
 80894dc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80894de:	b530      	push	{r4, r5, lr}
 80894e0:	b08b      	sub	sp, #44	; 0x2c
 80894e2:	460c      	mov	r4, r1
  *str = '\0';
 80894e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80894e8:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80894ea:	4625      	mov	r5, r4
 80894ec:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80894f0:	fb04 5312 	mls	r3, r4, r2, r5
 80894f4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80894f6:	2b09      	cmp	r3, #9
 80894f8:	bf94      	ite	ls
 80894fa:	3330      	addls	r3, #48	; 0x30
 80894fc:	3337      	addhi	r3, #55	; 0x37
 80894fe:	b2db      	uxtb	r3, r3
  } while(n);
 8089500:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8089502:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 8089506:	d9f0      	bls.n	80894ea <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 8089508:	f7fe f9f0 	bl	80878ec <_ZN5Print5writeEPKc>
}
 808950c:	b00b      	add	sp, #44	; 0x2c
 808950e:	bd30      	pop	{r4, r5, pc}

08089510 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8089510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089514:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8089516:	4619      	mov	r1, r3
 8089518:	4610      	mov	r0, r2
{
 808951a:	4692      	mov	sl, r2
 808951c:	461f      	mov	r7, r3
 808951e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 8089522:	f002 f817 	bl	808b554 <__aeabi_dcmpun>
 8089526:	b140      	cbz	r0, 808953a <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 8089528:	4950      	ldr	r1, [pc, #320]	; (808966c <_ZN5Print10printFloatEdh+0x15c>)
 808952a:	4628      	mov	r0, r5
 808952c:	f7fe f9de 	bl	80878ec <_ZN5Print5writeEPKc>
 8089530:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 8089532:	4620      	mov	r0, r4
 8089534:	b003      	add	sp, #12
 8089536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 808953a:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 808953e:	f04f 32ff 	mov.w	r2, #4294967295
 8089542:	4650      	mov	r0, sl
 8089544:	4621      	mov	r1, r4
 8089546:	4b4a      	ldr	r3, [pc, #296]	; (8089670 <_ZN5Print10printFloatEdh+0x160>)
 8089548:	f002 f804 	bl	808b554 <__aeabi_dcmpun>
 808954c:	b948      	cbnz	r0, 8089562 <_ZN5Print10printFloatEdh+0x52>
 808954e:	f04f 32ff 	mov.w	r2, #4294967295
 8089552:	4650      	mov	r0, sl
 8089554:	4621      	mov	r1, r4
 8089556:	4b46      	ldr	r3, [pc, #280]	; (8089670 <_ZN5Print10printFloatEdh+0x160>)
 8089558:	f001 ffde 	bl	808b518 <__aeabi_dcmple>
 808955c:	b908      	cbnz	r0, 8089562 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 808955e:	4945      	ldr	r1, [pc, #276]	; (8089674 <_ZN5Print10printFloatEdh+0x164>)
 8089560:	e7e3      	b.n	808952a <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8089562:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8089566:	4650      	mov	r0, sl
 8089568:	4639      	mov	r1, r7
 808956a:	4b43      	ldr	r3, [pc, #268]	; (8089678 <_ZN5Print10printFloatEdh+0x168>)
 808956c:	f001 ffe8 	bl	808b540 <__aeabi_dcmpgt>
 8089570:	b108      	cbz	r0, 8089576 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 8089572:	4942      	ldr	r1, [pc, #264]	; (808967c <_ZN5Print10printFloatEdh+0x16c>)
 8089574:	e7d9      	b.n	808952a <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8089576:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808957a:	4650      	mov	r0, sl
 808957c:	4639      	mov	r1, r7
 808957e:	4b40      	ldr	r3, [pc, #256]	; (8089680 <_ZN5Print10printFloatEdh+0x170>)
 8089580:	f001 ffc0 	bl	808b504 <__aeabi_dcmplt>
 8089584:	2800      	cmp	r0, #0
 8089586:	d1f4      	bne.n	8089572 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 8089588:	2200      	movs	r2, #0
 808958a:	2300      	movs	r3, #0
 808958c:	4650      	mov	r0, sl
 808958e:	4639      	mov	r1, r7
 8089590:	f001 ffb8 	bl	808b504 <__aeabi_dcmplt>
 8089594:	4604      	mov	r4, r0
 8089596:	b130      	cbz	r0, 80895a6 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 8089598:	212d      	movs	r1, #45	; 0x2d
 808959a:	4628      	mov	r0, r5
 808959c:	f7ff ff78 	bl	8089490 <_ZN5Print5printEc>
 80895a0:	4604      	mov	r4, r0
     number = -number;
 80895a2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80895a6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80895aa:	2000      	movs	r0, #0
    rounding /= 10.0;
 80895ac:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80895b0:	4934      	ldr	r1, [pc, #208]	; (8089684 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80895b2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 808968c <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80895b6:	fa5f f38b 	uxtb.w	r3, fp
 80895ba:	429e      	cmp	r6, r3
 80895bc:	d906      	bls.n	80895cc <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80895be:	4642      	mov	r2, r8
 80895c0:	464b      	mov	r3, r9
 80895c2:	f001 fe57 	bl	808b274 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80895c6:	f10b 0b01 	add.w	fp, fp, #1
 80895ca:	e7f4      	b.n	80895b6 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80895cc:	463b      	mov	r3, r7
 80895ce:	4652      	mov	r2, sl
 80895d0:	f001 fb70 	bl	808acb4 <__adddf3>
 80895d4:	4689      	mov	r9, r1
 80895d6:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80895d8:	f001 fffa 	bl	808b5d0 <__aeabi_d2uiz>
 80895dc:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80895de:	f001 fca5 	bl	808af2c <__aeabi_ui2d>
 80895e2:	4602      	mov	r2, r0
 80895e4:	460b      	mov	r3, r1
 80895e6:	4640      	mov	r0, r8
 80895e8:	4649      	mov	r1, r9
 80895ea:	f001 fb61 	bl	808acb0 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80895ee:	220a      	movs	r2, #10
 80895f0:	4680      	mov	r8, r0
 80895f2:	4689      	mov	r9, r1
 80895f4:	4628      	mov	r0, r5
 80895f6:	4639      	mov	r1, r7
 80895f8:	f7ff ff6d 	bl	80894d6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80895fc:	4404      	add	r4, r0
  if (digits > 0) {
 80895fe:	b126      	cbz	r6, 808960a <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 8089600:	4628      	mov	r0, r5
 8089602:	4921      	ldr	r1, [pc, #132]	; (8089688 <_ZN5Print10printFloatEdh+0x178>)
 8089604:	f7fe f972 	bl	80878ec <_ZN5Print5writeEPKc>
    n += print(".");
 8089608:	4404      	add	r4, r0
    remainder *= 10.0;
 808960a:	f04f 0a00 	mov.w	sl, #0
 808960e:	f8df b07c 	ldr.w	fp, [pc, #124]	; 808968c <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 8089612:	3e01      	subs	r6, #1
 8089614:	b2f6      	uxtb	r6, r6
 8089616:	2eff      	cmp	r6, #255	; 0xff
 8089618:	d08b      	beq.n	8089532 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 808961a:	4652      	mov	r2, sl
 808961c:	465b      	mov	r3, fp
 808961e:	4640      	mov	r0, r8
 8089620:	4649      	mov	r1, r9
 8089622:	f001 fcfd 	bl	808b020 <__aeabi_dmul>
 8089626:	4680      	mov	r8, r0
 8089628:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 808962a:	f001 ffa9 	bl	808b580 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 808962e:	1e07      	subs	r7, r0, #0
 8089630:	da19      	bge.n	8089666 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 8089632:	212d      	movs	r1, #45	; 0x2d
 8089634:	4628      	mov	r0, r5
 8089636:	f7ff ff2b 	bl	8089490 <_ZN5Print5printEc>
 808963a:	4603      	mov	r3, r0
            val = -n;
 808963c:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 808963e:	220a      	movs	r2, #10
 8089640:	4628      	mov	r0, r5
 8089642:	9301      	str	r3, [sp, #4]
 8089644:	f7ff ff47 	bl	80894d6 <_ZN5Print11printNumberEmh>
 8089648:	9b01      	ldr	r3, [sp, #4]
 808964a:	4403      	add	r3, r0
    remainder -= toPrint;
 808964c:	4638      	mov	r0, r7
    n += print(toPrint);
 808964e:	441c      	add	r4, r3
    remainder -= toPrint;
 8089650:	f001 fc7c 	bl	808af4c <__aeabi_i2d>
 8089654:	4602      	mov	r2, r0
 8089656:	460b      	mov	r3, r1
 8089658:	4640      	mov	r0, r8
 808965a:	4649      	mov	r1, r9
 808965c:	f001 fb28 	bl	808acb0 <__aeabi_dsub>
 8089660:	4680      	mov	r8, r0
 8089662:	4689      	mov	r9, r1
  while (digits-- > 0)
 8089664:	e7d5      	b.n	8089612 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 8089666:	4639      	mov	r1, r7
        size_t t = 0;
 8089668:	2300      	movs	r3, #0
 808966a:	e7e8      	b.n	808963e <_ZN5Print10printFloatEdh+0x12e>
 808966c:	080900b0 	.word	0x080900b0
 8089670:	7fefffff 	.word	0x7fefffff
 8089674:	080900b4 	.word	0x080900b4
 8089678:	41efffff 	.word	0x41efffff
 808967c:	080900b8 	.word	0x080900b8
 8089680:	c1efffff 	.word	0xc1efffff
 8089684:	3fe00000 	.word	0x3fe00000
 8089688:	0808fbbb 	.word	0x0808fbbb
 808968c:	40240000 	.word	0x40240000

08089690 <_ZN5Print7printlnEdi>:
{
 8089690:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 8089692:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 8089696:	4605      	mov	r5, r0
  return printFloat(n, digits);
 8089698:	9100      	str	r1, [sp, #0]
 808969a:	f7ff ff39 	bl	8089510 <_ZN5Print10printFloatEdh>
 808969e:	4604      	mov	r4, r0
  n += println();
 80896a0:	4628      	mov	r0, r5
 80896a2:	f7ff fef8 	bl	8089496 <_ZN5Print7printlnEv>
}
 80896a6:	4420      	add	r0, r4
 80896a8:	b003      	add	sp, #12
 80896aa:	bd30      	pop	{r4, r5, pc}

080896ac <_ZN5Print7printlnEfi>:
{
 80896ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80896ae:	4604      	mov	r4, r0
    return println((double)num, digits);
 80896b0:	4608      	mov	r0, r1
{
 80896b2:	4615      	mov	r5, r2
    return println((double)num, digits);
 80896b4:	f001 fc5c 	bl	808af70 <__aeabi_f2d>
 80896b8:	9500      	str	r5, [sp, #0]
 80896ba:	4602      	mov	r2, r0
 80896bc:	460b      	mov	r3, r1
 80896be:	4620      	mov	r0, r4
 80896c0:	f7ff ffe6 	bl	8089690 <_ZN5Print7printlnEdi>
}
 80896c4:	b003      	add	sp, #12
 80896c6:	bd30      	pop	{r4, r5, pc}

080896c8 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 80896c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80896cc:	b086      	sub	sp, #24
 80896ce:	af00      	add	r7, sp, #0
 80896d0:	4605      	mov	r5, r0
 80896d2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 80896d4:	1d38      	adds	r0, r7, #4
 80896d6:	2114      	movs	r1, #20
{
 80896d8:	4614      	mov	r4, r2
    va_copy(args2, args);
 80896da:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 80896dc:	f7ff f96a 	bl	80889b4 <vsnprintf>

    if (n<bufsize)
 80896e0:	2813      	cmp	r0, #19
 80896e2:	d80e      	bhi.n	8089702 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 80896e4:	4628      	mov	r0, r5
 80896e6:	1d39      	adds	r1, r7, #4
 80896e8:	f7fe f900 	bl	80878ec <_ZN5Print5writeEPKc>
 80896ec:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 80896ee:	b11e      	cbz	r6, 80896f8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 80896f0:	4628      	mov	r0, r5
 80896f2:	f7ff fed0 	bl	8089496 <_ZN5Print7printlnEv>
 80896f6:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 80896f8:	4620      	mov	r0, r4
 80896fa:	3718      	adds	r7, #24
 80896fc:	46bd      	mov	sp, r7
 80896fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 8089702:	f100 0308 	add.w	r3, r0, #8
 8089706:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 808970a:	46e8      	mov	r8, sp
        char bigger[n+1];
 808970c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 8089710:	4622      	mov	r2, r4
 8089712:	1c41      	adds	r1, r0, #1
 8089714:	683b      	ldr	r3, [r7, #0]
 8089716:	4668      	mov	r0, sp
 8089718:	f7ff f94c 	bl	80889b4 <vsnprintf>
  return write(str);
 808971c:	4669      	mov	r1, sp
 808971e:	4628      	mov	r0, r5
 8089720:	f7fe f8e4 	bl	80878ec <_ZN5Print5writeEPKc>
 8089724:	4604      	mov	r4, r0
 8089726:	46c5      	mov	sp, r8
 8089728:	e7e1      	b.n	80896ee <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

0808972a <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 808972a:	b510      	push	{r4, lr}
 808972c:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808972e:	f7fe fe7d 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 8089732:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 8089734:	6823      	ldr	r3, [r4, #0]
 8089736:	4620      	mov	r0, r4
 8089738:	695b      	ldr	r3, [r3, #20]
 808973a:	4798      	blx	r3
    if (c >= 0) return c;
 808973c:	2800      	cmp	r0, #0
 808973e:	da08      	bge.n	8089752 <_ZN6Stream9timedReadEv+0x28>
 8089740:	f7fe fe74 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 8089744:	68e3      	ldr	r3, [r4, #12]
 8089746:	1ac0      	subs	r0, r0, r3
 8089748:	68a3      	ldr	r3, [r4, #8]
 808974a:	4298      	cmp	r0, r3
 808974c:	d3f2      	bcc.n	8089734 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 808974e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8089752:	bd10      	pop	{r4, pc}

08089754 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 8089754:	6081      	str	r1, [r0, #8]
}
 8089756:	4770      	bx	lr

08089758 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 8089758:	b538      	push	{r3, r4, r5, lr}
 808975a:	460d      	mov	r5, r1
  String ret;
 808975c:	4907      	ldr	r1, [pc, #28]	; (808977c <_ZN6Stream10readStringEv+0x24>)
{
 808975e:	4604      	mov	r4, r0
  String ret;
 8089760:	f7ff fcce 	bl	8089100 <_ZN6StringC1EPKc>
  int c = timedRead();
 8089764:	4628      	mov	r0, r5
 8089766:	f7ff ffe0 	bl	808972a <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808976a:	2800      	cmp	r0, #0
 808976c:	db04      	blt.n	8089778 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808976e:	b2c1      	uxtb	r1, r0
 8089770:	4620      	mov	r0, r4
 8089772:	f7ff fdb6 	bl	80892e2 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 8089776:	e7f5      	b.n	8089764 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
 8089778:	4620      	mov	r0, r4
 808977a:	bd38      	pop	{r3, r4, r5, pc}
 808977c:	08090075 	.word	0x08090075

08089780 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 8089780:	b570      	push	{r4, r5, r6, lr}
 8089782:	460d      	mov	r5, r1
  String ret;
 8089784:	4909      	ldr	r1, [pc, #36]	; (80897ac <_ZN6Stream15readStringUntilEc+0x2c>)
{
 8089786:	4604      	mov	r4, r0
 8089788:	4616      	mov	r6, r2
  String ret;
 808978a:	f7ff fcb9 	bl	8089100 <_ZN6StringC1EPKc>
  int c = timedRead();
 808978e:	4628      	mov	r0, r5
 8089790:	f7ff ffcb 	bl	808972a <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 8089794:	2800      	cmp	r0, #0
 8089796:	db06      	blt.n	80897a6 <_ZN6Stream15readStringUntilEc+0x26>
 8089798:	4286      	cmp	r6, r0
 808979a:	d004      	beq.n	80897a6 <_ZN6Stream15readStringUntilEc+0x26>
 808979c:	b2c1      	uxtb	r1, r0
 808979e:	4620      	mov	r0, r4
 80897a0:	f7ff fd9f 	bl	80892e2 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 80897a4:	e7f3      	b.n	808978e <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
 80897a6:	4620      	mov	r0, r4
 80897a8:	bd70      	pop	{r4, r5, r6, pc}
 80897aa:	bf00      	nop
 80897ac:	08090075 	.word	0x08090075

080897b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80897b0:	680b      	ldr	r3, [r1, #0]
 80897b2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80897b4:	b113      	cbz	r3, 80897bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80897b6:	685a      	ldr	r2, [r3, #4]
 80897b8:	3201      	adds	r2, #1
 80897ba:	605a      	str	r2, [r3, #4]
      }
 80897bc:	4770      	bx	lr
	...

080897c0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80897c0:	4b01      	ldr	r3, [pc, #4]	; (80897c8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80897c2:	4a02      	ldr	r2, [pc, #8]	; (80897cc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80897c4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80897c6:	4770      	bx	lr
 80897c8:	20000cd8 	.word	0x20000cd8
 80897cc:	080900bc 	.word	0x080900bc

080897d0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80897d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80897d4:	4a15      	ldr	r2, [pc, #84]	; (808982c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80897d6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8089838 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 80897da:	e9d2 3200 	ldrd	r3, r2, [r2]
 80897de:	18c0      	adds	r0, r0, r3
 80897e0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 80897e4:	4a12      	ldr	r2, [pc, #72]	; (8089830 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 80897e6:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 80897e8:	e9d2 3200 	ldrd	r3, r2, [r2]
 80897ec:	18c6      	adds	r6, r0, r3
 80897ee:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 80897f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80897f6:	42bb      	cmp	r3, r7
 80897f8:	bf08      	it	eq
 80897fa:	42b2      	cmpeq	r2, r6
 80897fc:	d013      	beq.n	8089826 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80897fe:	a903      	add	r1, sp, #12
 8089800:	4668      	mov	r0, sp
 8089802:	e9cd 6700 	strd	r6, r7, [sp]
 8089806:	f7f6 fc13 	bl	8080030 <localtime_r>
	calendar_time.tm_year += 1900;
 808980a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808980c:	4d09      	ldr	r5, [pc, #36]	; (8089834 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 808980e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8089812:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 8089814:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8089816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8089818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808981a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808981c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808981e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8089822:	6823      	ldr	r3, [r4, #0]
 8089824:	602b      	str	r3, [r5, #0]
    }
}
 8089826:	b00c      	add	sp, #48	; 0x30
 8089828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808982c:	20000d10 	.word	0x20000d10
 8089830:	20000d08 	.word	0x20000d08
 8089834:	20000ce4 	.word	0x20000ce4
 8089838:	20000d18 	.word	0x20000d18

0808983c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 808983c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 808983e:	2000      	movs	r0, #0
 8089840:	f7ff f878 	bl	8088934 <spark_sync_time_pending>
 8089844:	b128      	cbz	r0, 8089852 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8089846:	f7ff f865 	bl	8088914 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 808984a:	f080 0001 	eor.w	r0, r0, #1
 808984e:	b2c0      	uxtb	r0, r0
    }
 8089850:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 8089852:	2001      	movs	r0, #1
 8089854:	e7fc      	b.n	8089850 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

08089858 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 8089858:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808985a:	f7ff ffb9 	bl	80897d0 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 808985e:	4b02      	ldr	r3, [pc, #8]	; (8089868 <_ZN9TimeClass5monthEx+0x10>)
 8089860:	6918      	ldr	r0, [r3, #16]
}
 8089862:	3001      	adds	r0, #1
 8089864:	bd08      	pop	{r3, pc}
 8089866:	bf00      	nop
 8089868:	20000ce4 	.word	0x20000ce4

0808986c <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808986c:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808986e:	490a      	ldr	r1, [pc, #40]	; (8089898 <_ZN9TimeClass4zoneEf+0x2c>)
{
 8089870:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8089872:	f002 f9c9 	bl	808bc08 <__aeabi_fcmplt>
 8089876:	b968      	cbnz	r0, 8089894 <_ZN9TimeClass4zoneEf+0x28>
 8089878:	4620      	mov	r0, r4
 808987a:	4908      	ldr	r1, [pc, #32]	; (808989c <_ZN9TimeClass4zoneEf+0x30>)
 808987c:	f002 f9e2 	bl	808bc44 <__aeabi_fcmpgt>
 8089880:	b940      	cbnz	r0, 8089894 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8089882:	4907      	ldr	r1, [pc, #28]	; (80898a0 <_ZN9TimeClass4zoneEf+0x34>)
 8089884:	4620      	mov	r0, r4
 8089886:	f002 f821 	bl	808b8cc <__aeabi_fmul>
 808988a:	f002 fa73 	bl	808bd74 <__aeabi_f2lz>
 808988e:	4b05      	ldr	r3, [pc, #20]	; (80898a4 <_ZN9TimeClass4zoneEf+0x38>)
 8089890:	e9c3 0100 	strd	r0, r1, [r3]
}
 8089894:	bd10      	pop	{r4, pc}
 8089896:	bf00      	nop
 8089898:	c1400000 	.word	0xc1400000
 808989c:	41600000 	.word	0x41600000
 80898a0:	45610000 	.word	0x45610000
 80898a4:	20000d10 	.word	0x20000d10

080898a8 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 80898a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80898aa:	4602      	mov	r2, r0
 80898ac:	460b      	mov	r3, r1
    struct timeval tv = {
 80898ae:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 80898b0:	4668      	mov	r0, sp
    };
 80898b2:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 80898b6:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 80898ba:	f7fe fde7 	bl	808848c <hal_rtc_set_time>
 80898be:	4602      	mov	r2, r0
 80898c0:	b910      	cbnz	r0, 80898c8 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 80898c2:	4601      	mov	r1, r0
 80898c4:	f7fe ff9a 	bl	80887fc <system_notify_time_changed>
    }
}
 80898c8:	b005      	add	sp, #20
 80898ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080898d0 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80898d0:	b530      	push	{r4, r5, lr}
 80898d2:	4604      	mov	r4, r0
    t += time_zone_cache;
 80898d4:	4818      	ldr	r0, [pc, #96]	; (8089938 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80898d6:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80898d8:	e9d0 1000 	ldrd	r1, r0, [r0]
 80898dc:	1852      	adds	r2, r2, r1
 80898de:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80898e2:	4816      	ldr	r0, [pc, #88]	; (808993c <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80898e4:	2500      	movs	r5, #0
    t += dst_current_cache;
 80898e6:	e9d0 1000 	ldrd	r1, r0, [r0]
 80898ea:	1852      	adds	r2, r2, r1
 80898ec:	eb40 0303 	adc.w	r3, r0, r3
 80898f0:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80898f4:	2224      	movs	r2, #36	; 0x24
 80898f6:	2100      	movs	r1, #0
 80898f8:	eb0d 0002 	add.w	r0, sp, r2
 80898fc:	f002 fafa 	bl	808bef4 <memset>
    localtime_r(&t, &calendar_time);
 8089900:	a909      	add	r1, sp, #36	; 0x24
 8089902:	4668      	mov	r0, sp
 8089904:	f7f6 fb94 	bl	8080030 <localtime_r>
    char ascstr[26] = {};
 8089908:	2216      	movs	r2, #22
 808990a:	4629      	mov	r1, r5
 808990c:	a803      	add	r0, sp, #12
 808990e:	9502      	str	r5, [sp, #8]
 8089910:	f002 faf0 	bl	808bef4 <memset>
    asctime_r(&calendar_time, ascstr);
 8089914:	a902      	add	r1, sp, #8
 8089916:	a809      	add	r0, sp, #36	; 0x24
 8089918:	f002 fa80 	bl	808be1c <asctime_r>
    int len = strlen(ascstr);
 808991c:	a802      	add	r0, sp, #8
 808991e:	f002 fb50 	bl	808bfc2 <strlen>
    ascstr[len-1] = 0; // remove final newline
 8089922:	ab12      	add	r3, sp, #72	; 0x48
 8089924:	4418      	add	r0, r3
 8089926:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 808992a:	a902      	add	r1, sp, #8
 808992c:	4620      	mov	r0, r4
 808992e:	f7ff fbe7 	bl	8089100 <_ZN6StringC1EPKc>
}
 8089932:	4620      	mov	r0, r4
 8089934:	b013      	add	sp, #76	; 0x4c
 8089936:	bd30      	pop	{r4, r5, pc}
 8089938:	20000d10 	.word	0x20000d10
 808993c:	20000d08 	.word	0x20000d08

08089940 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8089940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089944:	b0a5      	sub	sp, #148	; 0x94
 8089946:	4607      	mov	r7, r0
 8089948:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808994a:	a814      	add	r0, sp, #80	; 0x50
{
 808994c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 808994e:	223f      	movs	r2, #63	; 0x3f
{
 8089950:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 8089952:	f002 fb50 	bl	808bff6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 8089956:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 8089958:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 808995a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 808995e:	f002 fb30 	bl	808bfc2 <strlen>
 8089962:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8089964:	bb5d      	cbnz	r5, 80899be <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 8089966:	492a      	ldr	r1, [pc, #168]	; (8089a10 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 8089968:	a803      	add	r0, sp, #12
 808996a:	f002 fb06 	bl	808bf7a <strcpy>
{
 808996e:	2500      	movs	r5, #0
 8089970:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8089972:	f104 3bff 	add.w	fp, r4, #4294967295
 8089976:	45ab      	cmp	fp, r5
 8089978:	d936      	bls.n	80899e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808997a:	46b1      	mov	r9, r6
 808997c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8089980:	f105 0a01 	add.w	sl, r5, #1
 8089984:	2b25      	cmp	r3, #37	; 0x25
 8089986:	d117      	bne.n	80899b8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 8089988:	7873      	ldrb	r3, [r6, #1]
 808998a:	2b7a      	cmp	r3, #122	; 0x7a
 808998c:	d114      	bne.n	80899b8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 808998e:	a803      	add	r0, sp, #12
 8089990:	f002 fb17 	bl	808bfc2 <strlen>
 8089994:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8089996:	ab14      	add	r3, sp, #80	; 0x50
 8089998:	1828      	adds	r0, r5, r0
 808999a:	4418      	add	r0, r3
 808999c:	ebab 0205 	sub.w	r2, fp, r5
 80899a0:	1cb1      	adds	r1, r6, #2
 80899a2:	f002 fa99 	bl	808bed8 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80899a6:	4622      	mov	r2, r4
 80899a8:	a903      	add	r1, sp, #12
 80899aa:	4630      	mov	r0, r6
 80899ac:	f002 fa94 	bl	808bed8 <memcpy>
            len = strlen(format_str);
 80899b0:	a814      	add	r0, sp, #80	; 0x50
 80899b2:	f002 fb06 	bl	808bfc2 <strlen>
 80899b6:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 80899b8:	464e      	mov	r6, r9
 80899ba:	4655      	mov	r5, sl
 80899bc:	e7d9      	b.n	8089972 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80899be:	213c      	movs	r1, #60	; 0x3c
 80899c0:	fb95 f3f1 	sdiv	r3, r5, r1
 80899c4:	2b00      	cmp	r3, #0
 80899c6:	bfb8      	it	lt
 80899c8:	425b      	neglt	r3, r3
 80899ca:	fbb3 f2f1 	udiv	r2, r3, r1
 80899ce:	fb01 3312 	mls	r3, r1, r2, r3
 80899d2:	9300      	str	r3, [sp, #0]
 80899d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80899d8:	2110      	movs	r1, #16
 80899da:	fb95 f3f3 	sdiv	r3, r5, r3
 80899de:	4a0d      	ldr	r2, [pc, #52]	; (8089a14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 80899e0:	a803      	add	r0, sp, #12
 80899e2:	f7fe ffdf 	bl	80889a4 <snprintf>
 80899e6:	e7c2      	b.n	808996e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 80899e8:	2100      	movs	r1, #0
 80899ea:	222e      	movs	r2, #46	; 0x2e
 80899ec:	a808      	add	r0, sp, #32
 80899ee:	9107      	str	r1, [sp, #28]
 80899f0:	f002 fa80 	bl	808bef4 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 80899f4:	4643      	mov	r3, r8
 80899f6:	aa14      	add	r2, sp, #80	; 0x50
 80899f8:	2132      	movs	r1, #50	; 0x32
 80899fa:	a807      	add	r0, sp, #28
 80899fc:	f7f6 fb20 	bl	8080040 <strftime>
    return String(buf);
 8089a00:	4638      	mov	r0, r7
 8089a02:	a907      	add	r1, sp, #28
 8089a04:	f7ff fb7c 	bl	8089100 <_ZN6StringC1EPKc>
}
 8089a08:	4638      	mov	r0, r7
 8089a0a:	b025      	add	sp, #148	; 0x94
 8089a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089a10:	080900c0 	.word	0x080900c0
 8089a14:	080900c2 	.word	0x080900c2

08089a18 <_ZN9TimeClass6formatExPKc>:
{
 8089a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089a1a:	b08d      	sub	sp, #52	; 0x34
 8089a1c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8089a1e:	4604      	mov	r4, r0
 8089a20:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 8089a24:	b915      	cbnz	r5, 8089a2c <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 8089a26:	4b19      	ldr	r3, [pc, #100]	; (8089a8c <_ZN9TimeClass6formatExPKc+0x74>)
 8089a28:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 8089a2a:	b12d      	cbz	r5, 8089a38 <_ZN9TimeClass6formatExPKc+0x20>
 8089a2c:	4b18      	ldr	r3, [pc, #96]	; (8089a90 <_ZN9TimeClass6formatExPKc+0x78>)
 8089a2e:	4628      	mov	r0, r5
 8089a30:	6819      	ldr	r1, [r3, #0]
 8089a32:	f002 fa98 	bl	808bf66 <strcmp>
 8089a36:	b938      	cbnz	r0, 8089a48 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 8089a38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8089a3c:	4620      	mov	r0, r4
 8089a3e:	f7ff ff47 	bl	80898d0 <_ZN9TimeClass7timeStrEx>
}
 8089a42:	4620      	mov	r0, r4
 8089a44:	b00d      	add	sp, #52	; 0x34
 8089a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 8089a48:	9900      	ldr	r1, [sp, #0]
 8089a4a:	4e12      	ldr	r6, [pc, #72]	; (8089a94 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 8089a4c:	4f12      	ldr	r7, [pc, #72]	; (8089a98 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 8089a4e:	e9d6 3200 	ldrd	r3, r2, [r6]
 8089a52:	185b      	adds	r3, r3, r1
 8089a54:	9901      	ldr	r1, [sp, #4]
 8089a56:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 8089a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8089a5e:	181b      	adds	r3, r3, r0
 8089a60:	eb41 0202 	adc.w	r2, r1, r2
 8089a64:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 8089a68:	2100      	movs	r1, #0
 8089a6a:	2224      	movs	r2, #36	; 0x24
 8089a6c:	a803      	add	r0, sp, #12
 8089a6e:	f002 fa41 	bl	808bef4 <memset>
    localtime_r(&t, &calendar_time);
 8089a72:	a903      	add	r1, sp, #12
 8089a74:	4668      	mov	r0, sp
 8089a76:	f7f6 fadb 	bl	8080030 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8089a7a:	6832      	ldr	r2, [r6, #0]
 8089a7c:	683b      	ldr	r3, [r7, #0]
 8089a7e:	4620      	mov	r0, r4
 8089a80:	4413      	add	r3, r2
 8089a82:	a903      	add	r1, sp, #12
 8089a84:	462a      	mov	r2, r5
 8089a86:	f7ff ff5b 	bl	8089940 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 8089a8a:	e7da      	b.n	8089a42 <_ZN9TimeClass6formatExPKc+0x2a>
 8089a8c:	20000ce0 	.word	0x20000ce0
 8089a90:	200000d0 	.word	0x200000d0
 8089a94:	20000d10 	.word	0x20000d10
 8089a98:	20000d08 	.word	0x20000d08

08089a9c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 8089a9c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8089a9e:	2000      	movs	r0, #0
 8089aa0:	f7fe fce4 	bl	808846c <hal_rtc_time_is_valid>
    if (rtcstate)
 8089aa4:	4604      	mov	r4, r0
 8089aa6:	b9a0      	cbnz	r0, 8089ad2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8089aa8:	f7fe fe68 	bl	808877c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8089aac:	2801      	cmp	r0, #1
 8089aae:	d110      	bne.n	8089ad2 <_ZN9TimeClass7isValidEv+0x36>
 8089ab0:	4620      	mov	r0, r4
 8089ab2:	f7fe fe9b 	bl	80887ec <system_thread_get_state>
 8089ab6:	b960      	cbnz	r0, 8089ad2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 8089ab8:	f7ff fec0 	bl	808983c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8089abc:	b910      	cbnz	r0, 8089ac4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8089abe:	f7fe ff19 	bl	80888f4 <spark_process>
        while (_while() && !_condition()) {
 8089ac2:	e7f9      	b.n	8089ab8 <_ZN9TimeClass7isValidEv+0x1c>
 8089ac4:	f7ff feba 	bl	808983c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 8089ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8089acc:	2000      	movs	r0, #0
 8089ace:	f7fe bccd 	b.w	808846c <hal_rtc_time_is_valid>
}
 8089ad2:	4620      	mov	r0, r4
 8089ad4:	bd10      	pop	{r4, pc}

08089ad6 <_ZN9TimeClass3nowEv>:
{
 8089ad6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 8089ad8:	f7ff ffe0 	bl	8089a9c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8089adc:	2210      	movs	r2, #16
 8089ade:	2100      	movs	r1, #0
 8089ae0:	4668      	mov	r0, sp
 8089ae2:	f002 fa07 	bl	808bef4 <memset>
    hal_rtc_get_time(&tv, nullptr);
 8089ae6:	2100      	movs	r1, #0
 8089ae8:	4668      	mov	r0, sp
 8089aea:	f7fe fcc7 	bl	808847c <hal_rtc_get_time>
}
 8089aee:	9800      	ldr	r0, [sp, #0]
 8089af0:	b005      	add	sp, #20
 8089af2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08089af8 <_ZN9TimeClass4hourEv>:
{
 8089af8:	b508      	push	{r3, lr}
	return hour(now());
 8089afa:	f7ff ffec 	bl	8089ad6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8089afe:	17c1      	asrs	r1, r0, #31
 8089b00:	f7ff fe66 	bl	80897d0 <_ZL22Refresh_UnixTime_Cachex>
}
 8089b04:	4b01      	ldr	r3, [pc, #4]	; (8089b0c <_ZN9TimeClass4hourEv+0x14>)
 8089b06:	6898      	ldr	r0, [r3, #8]
 8089b08:	bd08      	pop	{r3, pc}
 8089b0a:	bf00      	nop
 8089b0c:	20000ce4 	.word	0x20000ce4

08089b10 <_ZN9TimeClass6minuteEv>:
{
 8089b10:	b508      	push	{r3, lr}
	return minute(now());
 8089b12:	f7ff ffe0 	bl	8089ad6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8089b16:	17c1      	asrs	r1, r0, #31
 8089b18:	f7ff fe5a 	bl	80897d0 <_ZL22Refresh_UnixTime_Cachex>
}
 8089b1c:	4b01      	ldr	r3, [pc, #4]	; (8089b24 <_ZN9TimeClass6minuteEv+0x14>)
 8089b1e:	6858      	ldr	r0, [r3, #4]
 8089b20:	bd08      	pop	{r3, pc}
 8089b22:	bf00      	nop
 8089b24:	20000ce4 	.word	0x20000ce4

08089b28 <_ZN9TimeClass6secondEv>:
{
 8089b28:	b508      	push	{r3, lr}
	return second(now());
 8089b2a:	f7ff ffd4 	bl	8089ad6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8089b2e:	17c1      	asrs	r1, r0, #31
 8089b30:	f7ff fe4e 	bl	80897d0 <_ZL22Refresh_UnixTime_Cachex>
}
 8089b34:	4b01      	ldr	r3, [pc, #4]	; (8089b3c <_ZN9TimeClass6secondEv+0x14>)
 8089b36:	6818      	ldr	r0, [r3, #0]
 8089b38:	bd08      	pop	{r3, pc}
 8089b3a:	bf00      	nop
 8089b3c:	20000ce4 	.word	0x20000ce4

08089b40 <_ZN9TimeClass3dayEv>:
{
 8089b40:	b508      	push	{r3, lr}
	return day(now());
 8089b42:	f7ff ffc8 	bl	8089ad6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8089b46:	17c1      	asrs	r1, r0, #31
 8089b48:	f7ff fe42 	bl	80897d0 <_ZL22Refresh_UnixTime_Cachex>
}
 8089b4c:	4b01      	ldr	r3, [pc, #4]	; (8089b54 <_ZN9TimeClass3dayEv+0x14>)
 8089b4e:	68d8      	ldr	r0, [r3, #12]
 8089b50:	bd08      	pop	{r3, pc}
 8089b52:	bf00      	nop
 8089b54:	20000ce4 	.word	0x20000ce4

08089b58 <_ZN9TimeClass5monthEv>:
{
 8089b58:	b508      	push	{r3, lr}
	return month(now());
 8089b5a:	f7ff ffbc 	bl	8089ad6 <_ZN9TimeClass3nowEv>
}
 8089b5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 8089b62:	17c1      	asrs	r1, r0, #31
 8089b64:	f7ff be78 	b.w	8089858 <_ZN9TimeClass5monthEx>

08089b68 <_ZN9TimeClass4yearEv>:
{
 8089b68:	b508      	push	{r3, lr}
	return year(now());
 8089b6a:	f7ff ffb4 	bl	8089ad6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8089b6e:	17c1      	asrs	r1, r0, #31
 8089b70:	f7ff fe2e 	bl	80897d0 <_ZL22Refresh_UnixTime_Cachex>
}
 8089b74:	4b01      	ldr	r3, [pc, #4]	; (8089b7c <_ZN9TimeClass4yearEv+0x14>)
 8089b76:	6958      	ldr	r0, [r3, #20]
 8089b78:	bd08      	pop	{r3, pc}
 8089b7a:	bf00      	nop
 8089b7c:	20000ce4 	.word	0x20000ce4

08089b80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8089b80:	4b02      	ldr	r3, [pc, #8]	; (8089b8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8089b82:	681a      	ldr	r2, [r3, #0]
 8089b84:	4b02      	ldr	r3, [pc, #8]	; (8089b90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8089b86:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8089b88:	4770      	bx	lr
 8089b8a:	bf00      	nop
 8089b8c:	200000d0 	.word	0x200000d0
 8089b90:	20000ce0 	.word	0x20000ce0

08089b94 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    hal_adc_set_sample_time(ADC_SampleTime);
 8089b94:	f7fe bc2a 	b.w	80883ec <hal_adc_set_sample_time>

08089b98 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8089b98:	2100      	movs	r1, #0
 8089b9a:	f7fe bdff 	b.w	808879c <system_delay_ms>

08089b9e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8089b9e:	b510      	push	{r4, lr}
 8089ba0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089ba2:	f7fe f9d3 	bl	8087f4c <_ZNSt14_Function_baseD1Ev>
 8089ba6:	4620      	mov	r0, r4
 8089ba8:	bd10      	pop	{r4, pc}

08089baa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8089baa:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089bac:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8089bae:	460b      	mov	r3, r1
 8089bb0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089bb2:	c803      	ldmia	r0, {r0, r1}
 8089bb4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8089bb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8089bbc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8089bc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8089bc4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8089bc8:	b002      	add	sp, #8
 8089bca:	bd10      	pop	{r4, pc}

08089bcc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8089bcc:	2300      	movs	r3, #0
 8089bce:	4803      	ldr	r0, [pc, #12]	; (8089bdc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8089bd0:	4a03      	ldr	r2, [pc, #12]	; (8089be0 <_GLOBAL__sub_I_RGB+0x14>)
 8089bd2:	4904      	ldr	r1, [pc, #16]	; (8089be4 <_GLOBAL__sub_I_RGB+0x18>)
 8089bd4:	6083      	str	r3, [r0, #8]
 8089bd6:	f001 b855 	b.w	808ac84 <__aeabi_atexit>
 8089bda:	bf00      	nop
 8089bdc:	20000d20 	.word	0x20000d20
 8089be0:	200002b0 	.word	0x200002b0
 8089be4:	08089b9f 	.word	0x08089b9f

08089be8 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8089be8:	6800      	ldr	r0, [r0, #0]
 8089bea:	f000 bead 	b.w	808a948 <_ZN7TwoWire4lockEv>

08089bee <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8089bee:	b510      	push	{r4, lr}
 8089bf0:	4604      	mov	r4, r0
      lock_(_lock) {
 8089bf2:	6001      	str	r1, [r0, #0]
 8089bf4:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 8089bf6:	b10a      	cbz	r2, 8089bfc <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8089bf8:	f7ff fff6 	bl	8089be8 <_ZN9FuelGauge4lockEv>
}
 8089bfc:	4620      	mov	r0, r4
 8089bfe:	bd10      	pop	{r4, pc}

08089c00 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 8089c00:	b538      	push	{r3, r4, r5, lr}
 8089c02:	4604      	mov	r4, r0
 8089c04:	460d      	mov	r5, r1
            return &Wire3;
 8089c06:	f001 f815 	bl	808ac34 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 8089c0a:	462a      	mov	r2, r5
            return &Wire3;
 8089c0c:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 8089c0e:	4620      	mov	r0, r4
 8089c10:	f7ff ffed 	bl	8089bee <_ZN9FuelGaugeC1ER7TwoWireb>
}
 8089c14:	4620      	mov	r0, r4
 8089c16:	bd38      	pop	{r3, r4, r5, pc}

08089c18 <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 8089c18:	6800      	ldr	r0, [r0, #0]
 8089c1a:	f000 be9e 	b.w	808a95a <_ZN7TwoWire6unlockEv>

08089c1e <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 8089c1e:	b510      	push	{r4, lr}
    if (lock_) {
 8089c20:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 8089c22:	4604      	mov	r4, r0
    if (lock_) {
 8089c24:	b10b      	cbz	r3, 8089c2a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8089c26:	f7ff fff7 	bl	8089c18 <_ZN9FuelGauge6unlockEv>
}
 8089c2a:	4620      	mov	r0, r4
 8089c2c:	bd10      	pop	{r4, pc}

08089c2e <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8089c2e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8089c32:	4604      	mov	r4, r0
 8089c34:	460d      	mov	r5, r1
 8089c36:	4617      	mov	r7, r2
 8089c38:	461e      	mov	r6, r3
 8089c3a:	f7ff ffd5 	bl	8089be8 <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8089c3e:	2336      	movs	r3, #54	; 0x36
 8089c40:	f88d 3000 	strb.w	r3, [sp]
 8089c44:	2300      	movs	r3, #0
 8089c46:	f04f 0801 	mov.w	r8, #1
 8089c4a:	9301      	str	r3, [sp, #4]
    timeout_ = ms;
 8089c4c:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 8089c4e:	4669      	mov	r1, sp
 8089c50:	6820      	ldr	r0, [r4, #0]
 8089c52:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8089c54:	f88d 8008 	strb.w	r8, [sp, #8]
 8089c58:	f000 fe53 	bl	808a902 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 8089c5c:	6820      	ldr	r0, [r4, #0]
 8089c5e:	4629      	mov	r1, r5
 8089c60:	6803      	ldr	r3, [r0, #0]
 8089c62:	689b      	ldr	r3, [r3, #8]
 8089c64:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 8089c66:	4641      	mov	r1, r8
 8089c68:	6820      	ldr	r0, [r4, #0]
 8089c6a:	f000 fe62 	bl	808a932 <_ZN7TwoWire15endTransmissionEh>
 8089c6e:	4605      	mov	r5, r0
 8089c70:	b140      	cbz	r0, 8089c84 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 8089c72:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 8089c76:	4620      	mov	r0, r4
 8089c78:	f7ff ffce 	bl	8089c18 <_ZN9FuelGauge6unlockEv>
}
 8089c7c:	4628      	mov	r0, r5
 8089c7e:	b004      	add	sp, #16
 8089c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 8089c84:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 8089c86:	4669      	mov	r1, sp
 8089c88:	6820      	ldr	r0, [r4, #0]
 8089c8a:	9301      	str	r3, [sp, #4]
 8089c8c:	f000 fe06 	bl	808a89c <_ZN7TwoWire11requestFromERK16WireTransmission>
 8089c90:	2802      	cmp	r0, #2
 8089c92:	d1ee      	bne.n	8089c72 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 8089c94:	6820      	ldr	r0, [r4, #0]
 8089c96:	6803      	ldr	r3, [r0, #0]
 8089c98:	695b      	ldr	r3, [r3, #20]
 8089c9a:	4798      	blx	r3
 8089c9c:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 8089c9e:	6820      	ldr	r0, [r4, #0]
 8089ca0:	6803      	ldr	r3, [r0, #0]
 8089ca2:	695b      	ldr	r3, [r3, #20]
 8089ca4:	4798      	blx	r3
 8089ca6:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 8089ca8:	e7e5      	b.n	8089c76 <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

08089cac <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 8089cac:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 8089cae:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8089cb0:	2104      	movs	r1, #4
    byte MSB = 0;
 8089cb2:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8089cb6:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8089cba:	f10d 0206 	add.w	r2, sp, #6
 8089cbe:	f10d 0307 	add.w	r3, sp, #7
 8089cc2:	f7ff ffb4 	bl	8089c2e <_ZN9FuelGauge12readRegisterEhRhS0_>
 8089cc6:	b9a0      	cbnz	r0, 8089cf2 <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 8089cc8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8089ccc:	f001 f93e 	bl	808af4c <__aeabi_i2d>
 8089cd0:	2200      	movs	r2, #0
 8089cd2:	4b09      	ldr	r3, [pc, #36]	; (8089cf8 <_ZN9FuelGauge6getSoCEv+0x4c>)
 8089cd4:	f001 f9a4 	bl	808b020 <__aeabi_dmul>
 8089cd8:	f001 fc9a 	bl	808b610 <__aeabi_d2f>
 8089cdc:	4604      	mov	r4, r0
        return MSB + decimal;
 8089cde:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8089ce2:	f001 fd9f 	bl	808b824 <__aeabi_i2f>
 8089ce6:	4601      	mov	r1, r0
 8089ce8:	4620      	mov	r0, r4
 8089cea:	f001 fce7 	bl	808b6bc <__addsf3>
}
 8089cee:	b002      	add	sp, #8
 8089cf0:	bd10      	pop	{r4, pc}
        return -1.0f;
 8089cf2:	4802      	ldr	r0, [pc, #8]	; (8089cfc <_ZN9FuelGauge6getSoCEv+0x50>)
 8089cf4:	e7fb      	b.n	8089cee <_ZN9FuelGauge6getSoCEv+0x42>
 8089cf6:	bf00      	nop
 8089cf8:	3f700000 	.word	0x3f700000
 8089cfc:	bf800000 	.word	0xbf800000

08089d00 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8089d00:	4b01      	ldr	r3, [pc, #4]	; (8089d08 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8089d02:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8089d04:	4770      	bx	lr
 8089d06:	bf00      	nop
 8089d08:	200000d8 	.word	0x200000d8

08089d0c <serialEventRun>:
{
 8089d0c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8089d0e:	4b17      	ldr	r3, [pc, #92]	; (8089d6c <serialEventRun+0x60>)
 8089d10:	b143      	cbz	r3, 8089d24 <serialEventRun+0x18>
 8089d12:	f000 fc25 	bl	808a560 <_Z16_fetch_usbserialv>
 8089d16:	6803      	ldr	r3, [r0, #0]
 8089d18:	691b      	ldr	r3, [r3, #16]
 8089d1a:	4798      	blx	r3
 8089d1c:	2800      	cmp	r0, #0
 8089d1e:	dd01      	ble.n	8089d24 <serialEventRun+0x18>
        serialEvent();
 8089d20:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8089d24:	4b12      	ldr	r3, [pc, #72]	; (8089d70 <serialEventRun+0x64>)
 8089d26:	b143      	cbz	r3, 8089d3a <serialEventRun+0x2e>
 8089d28:	f000 fd38 	bl	808a79c <_Z22__fetch_global_Serial1v>
 8089d2c:	6803      	ldr	r3, [r0, #0]
 8089d2e:	691b      	ldr	r3, [r3, #16]
 8089d30:	4798      	blx	r3
 8089d32:	2800      	cmp	r0, #0
 8089d34:	dd01      	ble.n	8089d3a <serialEventRun+0x2e>
        serialEvent1();
 8089d36:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8089d3a:	4b0e      	ldr	r3, [pc, #56]	; (8089d74 <serialEventRun+0x68>)
 8089d3c:	b10b      	cbz	r3, 8089d42 <serialEventRun+0x36>
 8089d3e:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8089d42:	4b0d      	ldr	r3, [pc, #52]	; (8089d78 <serialEventRun+0x6c>)
 8089d44:	b10b      	cbz	r3, 8089d4a <serialEventRun+0x3e>
 8089d46:	f7f6 fee5 	bl	8080b14 <_Z15serialEventRun4v>
    if (serialEventRun5) serialEventRun5();
 8089d4a:	4b0c      	ldr	r3, [pc, #48]	; (8089d7c <serialEventRun+0x70>)
 8089d4c:	b10b      	cbz	r3, 8089d52 <serialEventRun+0x46>
 8089d4e:	f7f6 ff1d 	bl	8080b8c <_Z15serialEventRun5v>
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8089d52:	4b0b      	ldr	r3, [pc, #44]	; (8089d80 <serialEventRun+0x74>)
 8089d54:	b143      	cbz	r3, 8089d68 <serialEventRun+0x5c>
 8089d56:	f000 fc41 	bl	808a5dc <_Z17_fetch_usbserial1v>
 8089d5a:	6803      	ldr	r3, [r0, #0]
 8089d5c:	691b      	ldr	r3, [r3, #16]
 8089d5e:	4798      	blx	r3
 8089d60:	2800      	cmp	r0, #0
 8089d62:	dd01      	ble.n	8089d68 <serialEventRun+0x5c>
        usbSerialEvent1();
 8089d64:	f3af 8000 	nop.w
}
 8089d68:	bd08      	pop	{r3, pc}
 8089d6a:	bf00      	nop
	...
 8089d78:	08080b15 	.word	0x08080b15
 8089d7c:	08080b8d 	.word	0x08080b8d
 8089d80:	00000000 	.word	0x00000000

08089d84 <_post_loop>:
{
 8089d84:	b508      	push	{r3, lr}
	serialEventRun();
 8089d86:	f7ff ffc1 	bl	8089d0c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8089d8a:	f7fe fb4f 	bl	808842c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8089d8e:	4b01      	ldr	r3, [pc, #4]	; (8089d94 <_post_loop+0x10>)
 8089d90:	6018      	str	r0, [r3, #0]
}
 8089d92:	bd08      	pop	{r3, pc}
 8089d94:	200011c4 	.word	0x200011c4

08089d98 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8089d98:	4802      	ldr	r0, [pc, #8]	; (8089da4 <_Z33system_initialize_user_backup_ramv+0xc>)
 8089d9a:	4a03      	ldr	r2, [pc, #12]	; (8089da8 <_Z33system_initialize_user_backup_ramv+0x10>)
 8089d9c:	4903      	ldr	r1, [pc, #12]	; (8089dac <_Z33system_initialize_user_backup_ramv+0x14>)
 8089d9e:	1a12      	subs	r2, r2, r0
 8089da0:	f002 b89a 	b.w	808bed8 <memcpy>
 8089da4:	40024000 	.word	0x40024000
 8089da8:	40024004 	.word	0x40024004
 8089dac:	08090500 	.word	0x08090500

08089db0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8089db0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8089db2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8089db4:	461a      	mov	r2, r3
 8089db6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8089dba:	9300      	str	r3, [sp, #0]
 8089dbc:	f7fe fd30 	bl	8088820 <system_ctrl_set_result>
}
 8089dc0:	b003      	add	sp, #12
 8089dc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08089dc8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8089dc8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8089dca:	8843      	ldrh	r3, [r0, #2]
 8089dcc:	2b0a      	cmp	r3, #10
 8089dce:	d008      	beq.n	8089de2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8089dd0:	2b50      	cmp	r3, #80	; 0x50
 8089dd2:	d10b      	bne.n	8089dec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8089dd4:	4b09      	ldr	r3, [pc, #36]	; (8089dfc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8089dd6:	681b      	ldr	r3, [r3, #0]
 8089dd8:	b14b      	cbz	r3, 8089dee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8089dda:	b003      	add	sp, #12
 8089ddc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8089de0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8089de2:	f7ff ffe5 	bl	8089db0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8089de6:	b003      	add	sp, #12
 8089de8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8089dec:	2300      	movs	r3, #0
 8089dee:	461a      	mov	r2, r3
 8089df0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8089df4:	9300      	str	r3, [sp, #0]
 8089df6:	f7fe fd13 	bl	8088820 <system_ctrl_set_result>
}
 8089dfa:	e7f4      	b.n	8089de6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8089dfc:	20000d34 	.word	0x20000d34

08089e00 <module_user_init_hook>:
{
 8089e00:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8089e02:	4c12      	ldr	r4, [pc, #72]	; (8089e4c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8089e04:	2100      	movs	r1, #0
 8089e06:	4812      	ldr	r0, [pc, #72]	; (8089e50 <module_user_init_hook+0x50>)
 8089e08:	f7fe fdec 	bl	80889e4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8089e0c:	4d11      	ldr	r5, [pc, #68]	; (8089e54 <module_user_init_hook+0x54>)
 8089e0e:	6823      	ldr	r3, [r4, #0]
 8089e10:	42ab      	cmp	r3, r5
 8089e12:	bf0c      	ite	eq
 8089e14:	2201      	moveq	r2, #1
 8089e16:	2200      	movne	r2, #0
 8089e18:	4b0f      	ldr	r3, [pc, #60]	; (8089e58 <module_user_init_hook+0x58>)
 8089e1a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8089e1c:	d002      	beq.n	8089e24 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8089e1e:	f7ff ffbb 	bl	8089d98 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8089e22:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8089e24:	f7fe faf2 	bl	808840c <HAL_RNG_GetRandomNumber>
 8089e28:	4604      	mov	r4, r0
    srand(seed);
 8089e2a:	f002 f86b 	bl	808bf04 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8089e2e:	4b0b      	ldr	r3, [pc, #44]	; (8089e5c <module_user_init_hook+0x5c>)
 8089e30:	b113      	cbz	r3, 8089e38 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8089e32:	4620      	mov	r0, r4
 8089e34:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8089e38:	2100      	movs	r1, #0
 8089e3a:	4808      	ldr	r0, [pc, #32]	; (8089e5c <module_user_init_hook+0x5c>)
 8089e3c:	f7fe fd82 	bl	8088944 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8089e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8089e44:	2100      	movs	r1, #0
 8089e46:	4806      	ldr	r0, [pc, #24]	; (8089e60 <module_user_init_hook+0x60>)
 8089e48:	f7fe bce0 	b.w	808880c <system_ctrl_set_app_request_handler>
 8089e4c:	40024000 	.word	0x40024000
 8089e50:	08089d01 	.word	0x08089d01
 8089e54:	9a271c1e 	.word	0x9a271c1e
 8089e58:	20000d30 	.word	0x20000d30
 8089e5c:	00000000 	.word	0x00000000
 8089e60:	08089dc9 	.word	0x08089dc9

08089e64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8089e64:	4770      	bx	lr

08089e66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8089e66:	2000      	movs	r0, #0
 8089e68:	4770      	bx	lr

08089e6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8089e6a:	b510      	push	{r4, lr}
 8089e6c:	4604      	mov	r4, r0
 8089e6e:	2110      	movs	r1, #16
 8089e70:	f000 ff0d 	bl	808ac8e <_ZdlPvj>
 8089e74:	4620      	mov	r0, r4
 8089e76:	bd10      	pop	{r4, pc}

08089e78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8089e78:	b508      	push	{r3, lr}
      { delete this; }
 8089e7a:	f7ff fff6 	bl	8089e6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8089e7e:	bd08      	pop	{r3, pc}

08089e80 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8089e80:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8089e82:	b530      	push	{r4, r5, lr}
        type_(type) {
 8089e84:	f64f 749c 	movw	r4, #65436	; 0xff9c
 8089e88:	6002      	str	r2, [r0, #0]
 8089e8a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8089e8c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8089e8e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8089e90:	680c      	ldr	r4, [r1, #0]
 8089e92:	8085      	strh	r5, [r0, #4]
 8089e94:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8089e96:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8089e98:	bd30      	pop	{r4, r5, pc}

08089e9a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8089e9a:	b510      	push	{r4, lr}
 8089e9c:	4604      	mov	r4, r0
    free((void*)msg_);
 8089e9e:	6800      	ldr	r0, [r0, #0]
 8089ea0:	f7fe fd60 	bl	8088964 <free>
}
 8089ea4:	4620      	mov	r0, r4
 8089ea6:	bd10      	pop	{r4, pc}

08089ea8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8089ea8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8089eaa:	68c4      	ldr	r4, [r0, #12]
 8089eac:	b1f4      	cbz	r4, 8089eec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8089eae:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8089eb0:	2b02      	cmp	r3, #2
 8089eb2:	d103      	bne.n	8089ebc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8089eb4:	f104 000c 	add.w	r0, r4, #12
 8089eb8:	f7ff ffef 	bl	8089e9a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8089ebc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8089ebe:	b135      	cbz	r5, 8089ece <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 8089ec0:	4628      	mov	r0, r5
 8089ec2:	f7fe f843 	bl	8087f4c <_ZNSt14_Function_baseD1Ev>
 8089ec6:	2110      	movs	r1, #16
 8089ec8:	4628      	mov	r0, r5
 8089eca:	f000 fee0 	bl	808ac8e <_ZdlPvj>
 8089ece:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8089ed0:	b135      	cbz	r5, 8089ee0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8089ed2:	4628      	mov	r0, r5
 8089ed4:	f7fe f83a 	bl	8087f4c <_ZNSt14_Function_baseD1Ev>
 8089ed8:	2110      	movs	r1, #16
 8089eda:	4628      	mov	r0, r5
 8089edc:	f000 fed7 	bl	808ac8e <_ZdlPvj>
 8089ee0:	4620      	mov	r0, r4
 8089ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8089ee6:	2114      	movs	r1, #20
 8089ee8:	f000 bed1 	b.w	808ac8e <_ZdlPvj>
 8089eec:	bd38      	pop	{r3, r4, r5, pc}

08089eee <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8089eee:	b510      	push	{r4, lr}
 8089ef0:	b088      	sub	sp, #32
 8089ef2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8089ef4:	4668      	mov	r0, sp
 8089ef6:	f7ff f903 	bl	8089100 <_ZN6StringC1EPKc>
    return (*fn)(p);
 8089efa:	4669      	mov	r1, sp
 8089efc:	a804      	add	r0, sp, #16
 8089efe:	f7ff f93e 	bl	808917e <_ZN6StringC1ERKS_>
 8089f02:	a804      	add	r0, sp, #16
 8089f04:	47a0      	blx	r4
 8089f06:	4604      	mov	r4, r0
 8089f08:	a804      	add	r0, sp, #16
 8089f0a:	f7ff f8af 	bl	808906c <_ZN6StringD1Ev>
    String p(param);
 8089f0e:	4668      	mov	r0, sp
 8089f10:	f7ff f8ac 	bl	808906c <_ZN6StringD1Ev>
}
 8089f14:	4620      	mov	r0, r4
 8089f16:	b008      	add	sp, #32
 8089f18:	bd10      	pop	{r4, pc}

08089f1a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8089f1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8089f1c:	2300      	movs	r3, #0
         size = sizeof(*this);
 8089f1e:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8089f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8089f24:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8089f26:	4669      	mov	r1, sp
 8089f28:	461a      	mov	r2, r3
 8089f2a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8089f2c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8089f30:	f8ad 4000 	strh.w	r4, [sp]
 8089f34:	f7fe fcd6 	bl	80888e4 <spark_function>
}
 8089f38:	b004      	add	sp, #16
 8089f3a:	bd10      	pop	{r4, pc}

08089f3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8089f3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8089f3e:	460e      	mov	r6, r1
 8089f40:	4604      	mov	r4, r0
 8089f42:	f856 3b04 	ldr.w	r3, [r6], #4
 8089f46:	460d      	mov	r5, r1
 8089f48:	a801      	add	r0, sp, #4
 8089f4a:	4631      	mov	r1, r6
 8089f4c:	9300      	str	r3, [sp, #0]
 8089f4e:	f7ff fc2f 	bl	80897b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8089f52:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8089f54:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8089f56:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8089f58:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8089f5a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8089f5c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8089f5e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8089f60:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8089f62:	f7f9 fbf5 	bl	8083750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8089f66:	4630      	mov	r0, r6
 8089f68:	f7f9 fbf2 	bl	8083750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8089f6c:	4628      	mov	r0, r5
 8089f6e:	2108      	movs	r1, #8
 8089f70:	f000 fe8d 	bl	808ac8e <_ZdlPvj>
        return p;
    }
 8089f74:	4620      	mov	r0, r4
 8089f76:	b002      	add	sp, #8
 8089f78:	bd70      	pop	{r4, r5, r6, pc}

08089f7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089f7a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8089f7c:	b510      	push	{r4, lr}
      if (_M_empty())
 8089f7e:	b90a      	cbnz	r2, 8089f84 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8089f80:	f000 fe89 	bl	808ac96 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089f84:	68c3      	ldr	r3, [r0, #12]
    }
 8089f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089f8a:	4718      	bx	r3

08089f8c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8089f8c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8089f8e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8089f90:	f100 0110 	add.w	r1, r0, #16
 8089f94:	f7ff fff1 	bl	8089f7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8089f98:	bd08      	pop	{r3, pc}

08089f9a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8089f9a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8089f9c:	b510      	push	{r4, lr}
      if (_M_empty())
 8089f9e:	b90a      	cbnz	r2, 8089fa4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8089fa0:	f000 fe79 	bl	808ac96 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089fa4:	68c3      	ldr	r3, [r0, #12]
    }
 8089fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089faa:	4718      	bx	r3

08089fac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8089fac:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8089fae:	6800      	ldr	r0, [r0, #0]
 8089fb0:	f100 0110 	add.w	r1, r0, #16
 8089fb4:	f7ff fff1 	bl	8089f9a <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8089fb8:	bd08      	pop	{r3, pc}
	...

08089fbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8089fbc:	b538      	push	{r3, r4, r5, lr}
 8089fbe:	2300      	movs	r3, #0
 8089fc0:	4604      	mov	r4, r0
 8089fc2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8089fc4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8089fc6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8089fc8:	f7f6 f87f 	bl	80800ca <_Znwj>
 8089fcc:	b128      	cbz	r0, 8089fda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8089fce:	2301      	movs	r3, #1
 8089fd0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8089fd4:	4b02      	ldr	r3, [pc, #8]	; (8089fe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8089fd6:	60c5      	str	r5, [r0, #12]
 8089fd8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8089fda:	6020      	str	r0, [r4, #0]
	}
 8089fdc:	4620      	mov	r0, r4
 8089fde:	bd38      	pop	{r3, r4, r5, pc}
 8089fe0:	080900f4 	.word	0x080900f4

08089fe4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8089fe4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8089fe6:	2300      	movs	r3, #0
 8089fe8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8089fea:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8089fec:	4604      	mov	r4, r0
 8089fee:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8089ff0:	b12b      	cbz	r3, 8089ffe <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089ff2:	2202      	movs	r2, #2
 8089ff4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8089ff6:	68eb      	ldr	r3, [r5, #12]
 8089ff8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8089ffa:	68ab      	ldr	r3, [r5, #8]
 8089ffc:	60a3      	str	r3, [r4, #8]
    }
 8089ffe:	4620      	mov	r0, r4
 808a000:	bd38      	pop	{r3, r4, r5, pc}
	...

0808a004 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 808a004:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a006:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808a008:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808a00a:	4668      	mov	r0, sp
 808a00c:	f7ff ff38 	bl	8089e80 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808a010:	f04f 0302 	mov.w	r3, #2
 808a014:	e8d4 2f4f 	ldrexb	r2, [r4]
 808a018:	2a00      	cmp	r2, #0
 808a01a:	d103      	bne.n	808a024 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 808a01c:	e8c4 3f41 	strexb	r1, r3, [r4]
 808a020:	2900      	cmp	r1, #0
 808a022:	d1f7      	bne.n	808a014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 808a024:	d125      	bne.n	808a072 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 808a026:	f104 050c 	add.w	r5, r4, #12
 808a02a:	4669      	mov	r1, sp
 808a02c:	4628      	mov	r0, r5
 808a02e:	f7ff ff27 	bl	8089e80 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 808a032:	2301      	movs	r3, #1
 808a034:	f3bf 8f5b 	dmb	ish
 808a038:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808a03a:	2000      	movs	r0, #0
 808a03c:	f3bf 8f5b 	dmb	ish
 808a040:	f104 0308 	add.w	r3, r4, #8
 808a044:	e853 6f00 	ldrex	r6, [r3]
 808a048:	e843 0200 	strex	r2, r0, [r3]
 808a04c:	2a00      	cmp	r2, #0
 808a04e:	d1f9      	bne.n	808a044 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 808a050:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808a054:	b16e      	cbz	r6, 808a072 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 808a056:	f7fe fbb9 	bl	80887cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808a05a:	b178      	cbz	r0, 808a07c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808a05c:	4629      	mov	r1, r5
 808a05e:	4630      	mov	r0, r6
 808a060:	f7ff ff8b 	bl	8089f7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 808a064:	4630      	mov	r0, r6
 808a066:	f7fd ff71 	bl	8087f4c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808a06a:	2110      	movs	r1, #16
 808a06c:	4630      	mov	r0, r6
 808a06e:	f000 fe0e 	bl	808ac8e <_ZdlPvj>
        p_->setError(std::move(error));
 808a072:	4668      	mov	r0, sp
 808a074:	f7ff ff11 	bl	8089e9a <_ZN8particle5ErrorD1Ev>
    }
 808a078:	b009      	add	sp, #36	; 0x24
 808a07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808a07c:	4631      	mov	r1, r6
 808a07e:	a802      	add	r0, sp, #8
 808a080:	f7ff ffb0 	bl	8089fe4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808a084:	68e0      	ldr	r0, [r4, #12]
 808a086:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808a08a:	b108      	cbz	r0, 808a090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 808a08c:	f001 ff7e 	bl	808bf8c <strdup>
        type_(type) {
 808a090:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808a092:	2010      	movs	r0, #16
 808a094:	f8ad 501c 	strh.w	r5, [sp, #28]
 808a098:	f7f6 f817 	bl	80800ca <_Znwj>
 808a09c:	4605      	mov	r5, r0
 808a09e:	b1e8      	cbz	r0, 808a0dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 808a0a0:	2700      	movs	r7, #0
 808a0a2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808a0a4:	2018      	movs	r0, #24
 808a0a6:	f7f6 f810 	bl	80800ca <_Znwj>
 808a0aa:	4604      	mov	r4, r0
 808a0ac:	b188      	cbz	r0, 808a0d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 808a0ae:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808a0b0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808a0b2:	a802      	add	r0, sp, #8
 808a0b4:	f7ff fd79 	bl	8089baa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808a0b8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808a0ba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808a0bc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808a0be:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808a0c0:	9204      	str	r2, [sp, #16]
 808a0c2:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808a0c4:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808a0c6:	60e3      	str	r3, [r4, #12]
 808a0c8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 808a0cc:	9205      	str	r2, [sp, #20]
 808a0ce:	f7ff fed7 	bl	8089e80 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 808a0d2:	4b08      	ldr	r3, [pc, #32]	; (808a0f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808a0d4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808a0d6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808a0d8:	4b07      	ldr	r3, [pc, #28]	; (808a0f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 808a0da:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 808a0dc:	a806      	add	r0, sp, #24
 808a0de:	f7ff fedc 	bl	8089e9a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808a0e2:	a802      	add	r0, sp, #8
 808a0e4:	f7fd ff32 	bl	8087f4c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808a0e8:	2200      	movs	r2, #0
 808a0ea:	4629      	mov	r1, r5
 808a0ec:	4803      	ldr	r0, [pc, #12]	; (808a0fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 808a0ee:	f7fe fb75 	bl	80887dc <application_thread_invoke>
 808a0f2:	e7b7      	b.n	808a064 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 808a0f4:	08089f8d 	.word	0x08089f8d
 808a0f8:	0808a225 	.word	0x0808a225
 808a0fc:	0808a7ed 	.word	0x0808a7ed

0808a100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808a100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808a104:	b08a      	sub	sp, #40	; 0x28
 808a106:	4605      	mov	r5, r0
 808a108:	460c      	mov	r4, r1
 808a10a:	4617      	mov	r7, r2
 808a10c:	4698      	mov	r8, r3
 808a10e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808a112:	f7fe fbff 	bl	8088914 <spark_cloud_flag_connected>
 808a116:	ae07      	add	r6, sp, #28
    if (!connected()) {
 808a118:	4682      	mov	sl, r0
 808a11a:	bb38      	cbnz	r0, 808a16c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 808a11c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808a120:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808a122:	a905      	add	r1, sp, #20
 808a124:	4630      	mov	r0, r6
 808a126:	f8ad 3018 	strh.w	r3, [sp, #24]
 808a12a:	f7ff fea9 	bl	8089e80 <_ZN8particle5ErrorC1EOS0_>
 808a12e:	2014      	movs	r0, #20
 808a130:	f7f5 ffcb 	bl	80800ca <_Znwj>
 808a134:	4604      	mov	r4, r0
 808a136:	b148      	cbz	r0, 808a14c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808a138:	2302      	movs	r3, #2
 808a13a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808a13c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808a13e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808a142:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 808a144:	4631      	mov	r1, r6
 808a146:	300c      	adds	r0, #12
 808a148:	f7ff fe9a 	bl	8089e80 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808a14c:	4628      	mov	r0, r5
	: __shared_count(__p)
 808a14e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808a150:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 808a154:	f7ff ff32 	bl	8089fbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808a158:	4630      	mov	r0, r6
 808a15a:	f7ff fe9e 	bl	8089e9a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808a15e:	a805      	add	r0, sp, #20
 808a160:	f7ff fe9b 	bl	8089e9a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 808a164:	4628      	mov	r0, r5
 808a166:	b00a      	add	sp, #40	; 0x28
 808a168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808a16c:	230c      	movs	r3, #12
 808a16e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808a172:	2014      	movs	r0, #20
 808a174:	e9cd aa08 	strd	sl, sl, [sp, #32]
 808a178:	9307      	str	r3, [sp, #28]
 808a17a:	f7f5 ffa6 	bl	80800ca <_Znwj>
 808a17e:	4601      	mov	r1, r0
 808a180:	b128      	cbz	r0, 808a18e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808a182:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 808a186:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808a18a:	f880 a001 	strb.w	sl, [r0, #1]
 808a18e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 808a190:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 808a192:	f7ff ff13 	bl	8089fbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 808a196:	4b22      	ldr	r3, [pc, #136]	; (808a220 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808a198:	2008      	movs	r0, #8
 808a19a:	9308      	str	r3, [sp, #32]
 808a19c:	f7f5 ff95 	bl	80800ca <_Znwj>
 808a1a0:	4682      	mov	sl, r0
 808a1a2:	b128      	cbz	r0, 808a1b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808a1a4:	9b03      	ldr	r3, [sp, #12]
 808a1a6:	a904      	add	r1, sp, #16
 808a1a8:	f840 3b04 	str.w	r3, [r0], #4
 808a1ac:	f7ff fb00 	bl	80897b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808a1b0:	4642      	mov	r2, r8
 808a1b2:	4639      	mov	r1, r7
 808a1b4:	4620      	mov	r0, r4
 808a1b6:	9600      	str	r6, [sp, #0]
 808a1b8:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 808a1bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808a1c0:	f7fe fbb0 	bl	8088924 <spark_send_event>
 808a1c4:	b9b8      	cbnz	r0, 808a1f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 808a1c6:	9b03      	ldr	r3, [sp, #12]
 808a1c8:	785b      	ldrb	r3, [r3, #1]
 808a1ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808a1ce:	b993      	cbnz	r3, 808a1f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 808a1d0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 808a1d4:	a905      	add	r1, sp, #20
 808a1d6:	a803      	add	r0, sp, #12
 808a1d8:	9205      	str	r2, [sp, #20]
 808a1da:	f8ad 3018 	strh.w	r3, [sp, #24]
 808a1de:	f7ff ff11 	bl	808a004 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808a1e2:	a805      	add	r0, sp, #20
 808a1e4:	f7ff fe59 	bl	8089e9a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808a1e8:	a805      	add	r0, sp, #20
 808a1ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 808a1ec:	f7ff fea6 	bl	8089f3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 808a1f0:	a806      	add	r0, sp, #24
 808a1f2:	f7f9 faad 	bl	8083750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808a1f6:	9b03      	ldr	r3, [sp, #12]
 808a1f8:	a904      	add	r1, sp, #16
 808a1fa:	a806      	add	r0, sp, #24
 808a1fc:	9305      	str	r3, [sp, #20]
 808a1fe:	f7ff fad7 	bl	80897b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 808a202:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808a204:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808a206:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 808a208:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808a20a:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 808a20c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 808a20e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 808a210:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 808a212:	f7f9 fa9d 	bl	8083750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808a216:	a804      	add	r0, sp, #16
 808a218:	f7f9 fa9a 	bl	8083750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 808a21c:	e7a2      	b.n	808a164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 808a21e:	bf00      	nop
 808a220:	0808a2e9 	.word	0x0808a2e9

0808a224 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 808a224:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808a226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a228:	4605      	mov	r5, r0
	  switch (__op)
 808a22a:	d007      	beq.n	808a23c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 808a22c:	2a03      	cmp	r2, #3
 808a22e:	d018      	beq.n	808a262 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 808a230:	2a01      	cmp	r2, #1
 808a232:	d101      	bne.n	808a238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808a234:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808a236:	6003      	str	r3, [r0, #0]
	}
 808a238:	2000      	movs	r0, #0
 808a23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808a23c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 808a23e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808a240:	f7f5 ff43 	bl	80800ca <_Znwj>
 808a244:	4604      	mov	r4, r0
 808a246:	b150      	cbz	r0, 808a25e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808a248:	4631      	mov	r1, r6
 808a24a:	f7ff fecb 	bl	8089fe4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 808a24e:	6930      	ldr	r0, [r6, #16]
 808a250:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808a254:	b108      	cbz	r0, 808a25a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 808a256:	f001 fe99 	bl	808bf8c <strdup>
        type_(type) {
 808a25a:	6120      	str	r0, [r4, #16]
 808a25c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 808a25e:	602c      	str	r4, [r5, #0]
	}
 808a260:	e7ea      	b.n	808a238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808a262:	6804      	ldr	r4, [r0, #0]
 808a264:	2c00      	cmp	r4, #0
 808a266:	d0e7      	beq.n	808a238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 808a268:	f104 0010 	add.w	r0, r4, #16
 808a26c:	f7ff fe15 	bl	8089e9a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 808a270:	4620      	mov	r0, r4
 808a272:	f7fd fe6b 	bl	8087f4c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808a276:	2118      	movs	r1, #24
 808a278:	4620      	mov	r0, r4
 808a27a:	f000 fd08 	bl	808ac8e <_ZdlPvj>
 808a27e:	e7db      	b.n	808a238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

0808a280 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 808a280:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 808a282:	2300      	movs	r3, #0
 808a284:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808a286:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808a288:	4604      	mov	r4, r0
 808a28a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 808a28c:	b12b      	cbz	r3, 808a29a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808a28e:	2202      	movs	r2, #2
 808a290:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808a292:	68eb      	ldr	r3, [r5, #12]
 808a294:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808a296:	68ab      	ldr	r3, [r5, #8]
 808a298:	60a3      	str	r3, [r4, #8]
    }
 808a29a:	4620      	mov	r0, r4
 808a29c:	bd38      	pop	{r3, r4, r5, pc}

0808a29e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 808a29e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808a2a0:	b570      	push	{r4, r5, r6, lr}
 808a2a2:	4604      	mov	r4, r0
	  switch (__op)
 808a2a4:	d007      	beq.n	808a2b6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 808a2a6:	2a03      	cmp	r2, #3
 808a2a8:	d012      	beq.n	808a2d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 808a2aa:	2a01      	cmp	r2, #1
 808a2ac:	d101      	bne.n	808a2b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 808a2ae:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808a2b0:	6003      	str	r3, [r0, #0]
	}
 808a2b2:	2000      	movs	r0, #0
 808a2b4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808a2b6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 808a2b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808a2ba:	f7f5 ff06 	bl	80800ca <_Znwj>
 808a2be:	4605      	mov	r5, r0
 808a2c0:	b120      	cbz	r0, 808a2cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 808a2c2:	4631      	mov	r1, r6
 808a2c4:	f7ff ffdc 	bl	808a280 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808a2c8:	7c33      	ldrb	r3, [r6, #16]
 808a2ca:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 808a2cc:	6025      	str	r5, [r4, #0]
	}
 808a2ce:	e7f0      	b.n	808a2b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 808a2d0:	6804      	ldr	r4, [r0, #0]
 808a2d2:	2c00      	cmp	r4, #0
 808a2d4:	d0ed      	beq.n	808a2b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 808a2d6:	4620      	mov	r0, r4
 808a2d8:	f7fd fe38 	bl	8087f4c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808a2dc:	2114      	movs	r1, #20
 808a2de:	4620      	mov	r0, r4
 808a2e0:	f000 fcd5 	bl	808ac8e <_ZdlPvj>
 808a2e4:	e7e5      	b.n	808a2b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

0808a2e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808a2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a2ea:	4604      	mov	r4, r0
 808a2ec:	b089      	sub	sp, #36	; 0x24
 808a2ee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808a2f0:	a801      	add	r0, sp, #4
 808a2f2:	4611      	mov	r1, r2
 808a2f4:	f7ff fe22 	bl	8089f3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808a2f8:	b1a4      	cbz	r4, 808a324 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 808a2fa:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 808a2fc:	b11d      	cbz	r5, 808a306 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 808a2fe:	4628      	mov	r0, r5
 808a300:	f001 fe44 	bl	808bf8c <strdup>
 808a304:	4605      	mov	r5, r0
 808a306:	a801      	add	r0, sp, #4
 808a308:	a903      	add	r1, sp, #12
        type_(type) {
 808a30a:	9503      	str	r5, [sp, #12]
 808a30c:	f8ad 4010 	strh.w	r4, [sp, #16]
 808a310:	f7ff fe78 	bl	808a004 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808a314:	a803      	add	r0, sp, #12
 808a316:	f7ff fdc0 	bl	8089e9a <_ZN8particle5ErrorD1Ev>
 808a31a:	a802      	add	r0, sp, #8
 808a31c:	f7f9 fa18 	bl	8083750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 808a320:	b009      	add	sp, #36	; 0x24
 808a322:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 808a324:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 808a326:	9d01      	ldr	r5, [sp, #4]
 808a328:	e8d5 2f4f 	ldrexb	r2, [r5]
 808a32c:	2a00      	cmp	r2, #0
 808a32e:	d103      	bne.n	808a338 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 808a330:	e8c5 3f41 	strexb	r1, r3, [r5]
 808a334:	2900      	cmp	r1, #0
 808a336:	d1f7      	bne.n	808a328 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 808a338:	d1ef      	bne.n	808a31a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 808a33a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 808a33c:	f3bf 8f5b 	dmb	ish
 808a340:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 808a342:	f3bf 8f5b 	dmb	ish
 808a346:	1d2b      	adds	r3, r5, #4
 808a348:	e853 6f00 	ldrex	r6, [r3]
 808a34c:	e843 4200 	strex	r2, r4, [r3]
 808a350:	2a00      	cmp	r2, #0
 808a352:	d1f9      	bne.n	808a348 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 808a354:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 808a358:	2e00      	cmp	r6, #0
 808a35a:	d0de      	beq.n	808a31a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 808a35c:	4620      	mov	r0, r4
 808a35e:	f7fe fa35 	bl	80887cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 808a362:	4607      	mov	r7, r0
 808a364:	b160      	cbz	r0, 808a380 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808a366:	4630      	mov	r0, r6
 808a368:	f105 010c 	add.w	r1, r5, #12
 808a36c:	f7ff fe15 	bl	8089f9a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 808a370:	4630      	mov	r0, r6
 808a372:	f7fd fdeb 	bl	8087f4c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808a376:	2110      	movs	r1, #16
 808a378:	4630      	mov	r0, r6
 808a37a:	f000 fc88 	bl	808ac8e <_ZdlPvj>
 808a37e:	e7cc      	b.n	808a31a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808a380:	4631      	mov	r1, r6
 808a382:	a803      	add	r0, sp, #12
 808a384:	f7ff ff7c 	bl	808a280 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808a388:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808a38a:	2010      	movs	r0, #16
 808a38c:	f88d 301c 	strb.w	r3, [sp, #28]
 808a390:	f7f5 fe9b 	bl	80800ca <_Znwj>
 808a394:	4605      	mov	r5, r0
 808a396:	b1d0      	cbz	r0, 808a3ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 808a398:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808a39a:	2014      	movs	r0, #20
 808a39c:	f7f5 fe95 	bl	80800ca <_Znwj>
 808a3a0:	4604      	mov	r4, r0
 808a3a2:	b178      	cbz	r0, 808a3c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 808a3a4:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808a3a6:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808a3a8:	a803      	add	r0, sp, #12
 808a3aa:	f7ff fbfe 	bl	8089baa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808a3ae:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808a3b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808a3b2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808a3b4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808a3b6:	9205      	str	r2, [sp, #20]
 808a3b8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808a3ba:	60e3      	str	r3, [r4, #12]
 808a3bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 808a3c0:	9206      	str	r2, [sp, #24]
 808a3c2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 808a3c4:	4b06      	ldr	r3, [pc, #24]	; (808a3e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808a3c6:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808a3c8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808a3ca:	4b06      	ldr	r3, [pc, #24]	; (808a3e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 808a3cc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 808a3ce:	a803      	add	r0, sp, #12
 808a3d0:	f7fd fdbc 	bl	8087f4c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808a3d4:	2200      	movs	r2, #0
 808a3d6:	4629      	mov	r1, r5
 808a3d8:	4803      	ldr	r0, [pc, #12]	; (808a3e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 808a3da:	f7fe f9ff 	bl	80887dc <application_thread_invoke>
 808a3de:	e7c7      	b.n	808a370 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 808a3e0:	08089fad 	.word	0x08089fad
 808a3e4:	0808a29f 	.word	0x0808a29f
 808a3e8:	0808a7ed 	.word	0x0808a7ed

0808a3ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808a3ec:	4770      	bx	lr

0808a3ee <_ZN9IPAddressD0Ev>:
 808a3ee:	b510      	push	{r4, lr}
 808a3f0:	4604      	mov	r4, r0
 808a3f2:	2108      	movs	r1, #8
 808a3f4:	f000 fc4b 	bl	808ac8e <_ZdlPvj>
 808a3f8:	4620      	mov	r0, r4
 808a3fa:	bd10      	pop	{r4, pc}

0808a3fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a3fe:	460e      	mov	r6, r1
 808a400:	2400      	movs	r4, #0
 808a402:	f100 0708 	add.w	r7, r0, #8
 808a406:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 808a408:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 808a40c:	220a      	movs	r2, #10
 808a40e:	4630      	mov	r0, r6
 808a410:	f7ff f861 	bl	80894d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808a414:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808a416:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 808a418:	d101      	bne.n	808a41e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 808a41a:	4620      	mov	r0, r4
 808a41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 808a41e:	2c00      	cmp	r4, #0
 808a420:	d0f2      	beq.n	808a408 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808a422:	212e      	movs	r1, #46	; 0x2e
 808a424:	4630      	mov	r0, r6
 808a426:	f7ff f833 	bl	8089490 <_ZN5Print5printEc>
 808a42a:	4404      	add	r4, r0
 808a42c:	e7ec      	b.n	808a408 <_ZNK9IPAddress7printToER5Print+0xc>
	...

0808a430 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 808a430:	4a02      	ldr	r2, [pc, #8]	; (808a43c <_ZN9IPAddressC1Ev+0xc>)
 808a432:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808a434:	2200      	movs	r2, #0
 808a436:	6042      	str	r2, [r0, #4]
}
 808a438:	4770      	bx	lr
 808a43a:	bf00      	nop
 808a43c:	08090110 	.word	0x08090110

0808a440 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 808a440:	4a02      	ldr	r2, [pc, #8]	; (808a44c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808a442:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 808a444:	680a      	ldr	r2, [r1, #0]
 808a446:	6042      	str	r2, [r0, #4]
}
 808a448:	4770      	bx	lr
 808a44a:	bf00      	nop
 808a44c:	08090110 	.word	0x08090110

0808a450 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 808a450:	4a01      	ldr	r2, [pc, #4]	; (808a458 <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 808a452:	e9c0 2100 	strd	r2, r1, [r0]
}
 808a456:	4770      	bx	lr
 808a458:	08090110 	.word	0x08090110

0808a45c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 808a45c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808a45e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808a462:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 808a466:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 808a46a:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 808a46e:	6044      	str	r4, [r0, #4]
}
 808a470:	bd10      	pop	{r4, pc}
	...

0808a474 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808a474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808a476:	4d04      	ldr	r5, [pc, #16]	; (808a488 <_ZN9IPAddressC1Ehhhh+0x14>)
 808a478:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808a47a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808a47e:	9500      	str	r5, [sp, #0]
 808a480:	f7ff ffec 	bl	808a45c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808a484:	b003      	add	sp, #12
 808a486:	bd30      	pop	{r4, r5, pc}
 808a488:	08090110 	.word	0x08090110

0808a48c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808a48c:	7441      	strb	r1, [r0, #17]
}
 808a48e:	4770      	bx	lr

0808a490 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808a490:	4770      	bx	lr

0808a492 <_ZN9USBSerial4readEv>:
{
 808a492:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808a494:	2100      	movs	r1, #0
 808a496:	7c00      	ldrb	r0, [r0, #16]
 808a498:	f7fe f950 	bl	808873c <HAL_USB_USART_Receive_Data>
}
 808a49c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808a4a0:	bd08      	pop	{r3, pc}

0808a4a2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 808a4a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808a4a4:	2101      	movs	r1, #1
 808a4a6:	7c00      	ldrb	r0, [r0, #16]
 808a4a8:	f7fe f948 	bl	808873c <HAL_USB_USART_Receive_Data>
}
 808a4ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808a4b0:	bd08      	pop	{r3, pc}

0808a4b2 <_ZN9USBSerial17availableForWriteEv>:
{
 808a4b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808a4b4:	7c00      	ldrb	r0, [r0, #16]
 808a4b6:	f7fe f939 	bl	808872c <HAL_USB_USART_Available_Data_For_Write>
}
 808a4ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a4be:	bd08      	pop	{r3, pc}

0808a4c0 <_ZN9USBSerial9availableEv>:
{
 808a4c0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808a4c2:	7c00      	ldrb	r0, [r0, #16]
 808a4c4:	f7fe f92a 	bl	808871c <HAL_USB_USART_Available_Data>
}
 808a4c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a4cc:	bd08      	pop	{r3, pc}

0808a4ce <_ZN9USBSerial5writeEh>:
{
 808a4ce:	b538      	push	{r3, r4, r5, lr}
 808a4d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808a4d2:	7c00      	ldrb	r0, [r0, #16]
{
 808a4d4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808a4d6:	f7fe f929 	bl	808872c <HAL_USB_USART_Available_Data_For_Write>
 808a4da:	2800      	cmp	r0, #0
 808a4dc:	dc01      	bgt.n	808a4e2 <_ZN9USBSerial5writeEh+0x14>
 808a4de:	7c60      	ldrb	r0, [r4, #17]
 808a4e0:	b128      	cbz	r0, 808a4ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808a4e2:	4629      	mov	r1, r5
 808a4e4:	7c20      	ldrb	r0, [r4, #16]
 808a4e6:	f7fe f931 	bl	808874c <HAL_USB_USART_Send_Data>
 808a4ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 808a4ee:	bd38      	pop	{r3, r4, r5, pc}

0808a4f0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 808a4f0:	7c00      	ldrb	r0, [r0, #16]
 808a4f2:	f7fe b933 	b.w	808875c <HAL_USB_USART_Flush_Data>

0808a4f6 <_ZN9USBSerialD0Ev>:
 808a4f6:	b510      	push	{r4, lr}
 808a4f8:	4604      	mov	r4, r0
 808a4fa:	2114      	movs	r1, #20
 808a4fc:	f000 fbc7 	bl	808ac8e <_ZdlPvj>
 808a500:	4620      	mov	r0, r4
 808a502:	bd10      	pop	{r4, pc}

0808a504 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808a504:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808a506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808a50a:	4604      	mov	r4, r0
 808a50c:	4608      	mov	r0, r1
 808a50e:	2100      	movs	r1, #0
 808a510:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808a514:	4b04      	ldr	r3, [pc, #16]	; (808a528 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 808a516:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808a518:	6023      	str	r3, [r4, #0]
  _blocking = true;
 808a51a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 808a51c:	4611      	mov	r1, r2
  _blocking = true;
 808a51e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 808a520:	f7fe f8ec 	bl	80886fc <HAL_USB_USART_Init>
}
 808a524:	4620      	mov	r0, r4
 808a526:	bd10      	pop	{r4, pc}
 808a528:	08090124 	.word	0x08090124

0808a52c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808a52c:	2200      	movs	r2, #0
 808a52e:	7c00      	ldrb	r0, [r0, #16]
 808a530:	f7fe b8ec 	b.w	808870c <HAL_USB_USART_Begin>

0808a534 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808a534:	b510      	push	{r4, lr}
 808a536:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808a538:	2214      	movs	r2, #20
 808a53a:	2100      	movs	r1, #0
 808a53c:	f001 fcda 	bl	808bef4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808a540:	4b05      	ldr	r3, [pc, #20]	; (808a558 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808a542:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 808a544:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808a546:	4b05      	ldr	r3, [pc, #20]	; (808a55c <_Z19acquireSerialBufferv+0x28>)
 808a548:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808a54a:	f240 1301 	movw	r3, #257	; 0x101
 808a54e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808a550:	2381      	movs	r3, #129	; 0x81
 808a552:	8223      	strh	r3, [r4, #16]
}
 808a554:	bd10      	pop	{r4, pc}
 808a556:	bf00      	nop
 808a558:	20000d68 	.word	0x20000d68
 808a55c:	20000e69 	.word	0x20000e69

0808a560 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808a560:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808a562:	4d0f      	ldr	r5, [pc, #60]	; (808a5a0 <_Z16_fetch_usbserialv+0x40>)
{
 808a564:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808a566:	a801      	add	r0, sp, #4
 808a568:	f7ff ffe4 	bl	808a534 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808a56c:	7829      	ldrb	r1, [r5, #0]
 808a56e:	f3bf 8f5b 	dmb	ish
 808a572:	f011 0401 	ands.w	r4, r1, #1
 808a576:	d110      	bne.n	808a59a <_Z16_fetch_usbserialv+0x3a>
 808a578:	4628      	mov	r0, r5
 808a57a:	f7f5 fdac 	bl	80800d6 <__cxa_guard_acquire>
 808a57e:	b160      	cbz	r0, 808a59a <_Z16_fetch_usbserialv+0x3a>
 808a580:	4621      	mov	r1, r4
 808a582:	aa01      	add	r2, sp, #4
 808a584:	4807      	ldr	r0, [pc, #28]	; (808a5a4 <_Z16_fetch_usbserialv+0x44>)
 808a586:	f7ff ffbd 	bl	808a504 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808a58a:	4628      	mov	r0, r5
 808a58c:	f7f5 fda8 	bl	80800e0 <__cxa_guard_release>
 808a590:	4a05      	ldr	r2, [pc, #20]	; (808a5a8 <_Z16_fetch_usbserialv+0x48>)
 808a592:	4906      	ldr	r1, [pc, #24]	; (808a5ac <_Z16_fetch_usbserialv+0x4c>)
 808a594:	4803      	ldr	r0, [pc, #12]	; (808a5a4 <_Z16_fetch_usbserialv+0x44>)
 808a596:	f000 fb75 	bl	808ac84 <__aeabi_atexit>
	return _usbserial;
}
 808a59a:	4802      	ldr	r0, [pc, #8]	; (808a5a4 <_Z16_fetch_usbserialv+0x44>)
 808a59c:	b007      	add	sp, #28
 808a59e:	bd30      	pop	{r4, r5, pc}
 808a5a0:	20000d38 	.word	0x20000d38
 808a5a4:	20000d40 	.word	0x20000d40
 808a5a8:	200002b0 	.word	0x200002b0
 808a5ac:	0808a491 	.word	0x0808a491

0808a5b0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808a5b0:	b510      	push	{r4, lr}
 808a5b2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808a5b4:	2214      	movs	r2, #20
 808a5b6:	2100      	movs	r1, #0
 808a5b8:	f001 fc9c 	bl	808bef4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808a5bc:	4b05      	ldr	r3, [pc, #20]	; (808a5d4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808a5be:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 808a5c0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808a5c2:	4b05      	ldr	r3, [pc, #20]	; (808a5d8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808a5c4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808a5c6:	f240 1301 	movw	r3, #257	; 0x101
 808a5ca:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808a5cc:	2381      	movs	r3, #129	; 0x81
 808a5ce:	8223      	strh	r3, [r4, #16]
}
 808a5d0:	bd10      	pop	{r4, pc}
 808a5d2:	bf00      	nop
 808a5d4:	20000eea 	.word	0x20000eea
 808a5d8:	20000feb 	.word	0x20000feb

0808a5dc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808a5dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808a5de:	4c0f      	ldr	r4, [pc, #60]	; (808a61c <_Z17_fetch_usbserial1v+0x40>)
{
 808a5e0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808a5e2:	a801      	add	r0, sp, #4
 808a5e4:	f7ff ffe4 	bl	808a5b0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808a5e8:	7823      	ldrb	r3, [r4, #0]
 808a5ea:	f3bf 8f5b 	dmb	ish
 808a5ee:	07db      	lsls	r3, r3, #31
 808a5f0:	d410      	bmi.n	808a614 <_Z17_fetch_usbserial1v+0x38>
 808a5f2:	4620      	mov	r0, r4
 808a5f4:	f7f5 fd6f 	bl	80800d6 <__cxa_guard_acquire>
 808a5f8:	b160      	cbz	r0, 808a614 <_Z17_fetch_usbserial1v+0x38>
 808a5fa:	2101      	movs	r1, #1
 808a5fc:	aa01      	add	r2, sp, #4
 808a5fe:	4808      	ldr	r0, [pc, #32]	; (808a620 <_Z17_fetch_usbserial1v+0x44>)
 808a600:	f7ff ff80 	bl	808a504 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808a604:	4620      	mov	r0, r4
 808a606:	f7f5 fd6b 	bl	80800e0 <__cxa_guard_release>
 808a60a:	4a06      	ldr	r2, [pc, #24]	; (808a624 <_Z17_fetch_usbserial1v+0x48>)
 808a60c:	4906      	ldr	r1, [pc, #24]	; (808a628 <_Z17_fetch_usbserial1v+0x4c>)
 808a60e:	4804      	ldr	r0, [pc, #16]	; (808a620 <_Z17_fetch_usbserial1v+0x44>)
 808a610:	f000 fb38 	bl	808ac84 <__aeabi_atexit>
  return _usbserial1;
}
 808a614:	4802      	ldr	r0, [pc, #8]	; (808a620 <_Z17_fetch_usbserial1v+0x44>)
 808a616:	b006      	add	sp, #24
 808a618:	bd10      	pop	{r4, pc}
 808a61a:	bf00      	nop
 808a61c:	20000d3c 	.word	0x20000d3c
 808a620:	20000d54 	.word	0x20000d54
 808a624:	200002b0 	.word	0x200002b0
 808a628:	0808a491 	.word	0x0808a491

0808a62c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808a62c:	2200      	movs	r2, #0
 808a62e:	6840      	ldr	r0, [r0, #4]
 808a630:	4611      	mov	r1, r2
 808a632:	f7fe b917 	b.w	8088864 <network_ready>

0808a636 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808a636:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 808a638:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 808a63a:	b085      	sub	sp, #20
 808a63c:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a63e:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 808a640:	460f      	mov	r7, r1
 808a642:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808a644:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a646:	f001 fcbc 	bl	808bfc2 <strlen>
 808a64a:	687b      	ldr	r3, [r7, #4]
 808a64c:	b281      	uxth	r1, r0
 808a64e:	9600      	str	r6, [sp, #0]
 808a650:	4628      	mov	r0, r5
 808a652:	aa03      	add	r2, sp, #12
 808a654:	f7fe f842 	bl	80886dc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808a658:	b130      	cbz	r0, 808a668 <_ZN5spark13CellularClass7resolveEPKc+0x32>
 808a65a:	4631      	mov	r1, r6
 808a65c:	4620      	mov	r0, r4
 808a65e:	f7ff fef7 	bl	808a450 <_ZN9IPAddressC1Em>
    }
 808a662:	4620      	mov	r0, r4
 808a664:	b005      	add	sp, #20
 808a666:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808a668:	4620      	mov	r0, r4
 808a66a:	a903      	add	r1, sp, #12
 808a66c:	f7ff fee8 	bl	808a440 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 808a670:	e7f7      	b.n	808a662 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

0808a672 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 808a672:	2200      	movs	r2, #0
 808a674:	6840      	ldr	r0, [r0, #4]
 808a676:	4611      	mov	r1, r2
 808a678:	f7fe b914 	b.w	80888a4 <network_listening>

0808a67c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 808a67c:	2200      	movs	r2, #0
 808a67e:	6840      	ldr	r0, [r0, #4]
 808a680:	4611      	mov	r1, r2
 808a682:	f7fe b91f 	b.w	80888c4 <network_get_listen_timeout>

0808a686 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808a686:	2200      	movs	r2, #0
 808a688:	6840      	ldr	r0, [r0, #4]
 808a68a:	f7fe b913 	b.w	80888b4 <network_set_listen_timeout>

0808a68e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 808a68e:	2200      	movs	r2, #0
 808a690:	6840      	ldr	r0, [r0, #4]
 808a692:	f081 0101 	eor.w	r1, r1, #1
 808a696:	f7fe b8fd 	b.w	8088894 <network_listen>

0808a69a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808a69a:	2300      	movs	r3, #0
 808a69c:	6840      	ldr	r0, [r0, #4]
 808a69e:	461a      	mov	r2, r3
 808a6a0:	4619      	mov	r1, r3
 808a6a2:	f7fe b8e7 	b.w	8088874 <network_on>

0808a6a6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 808a6a6:	2200      	movs	r2, #0
 808a6a8:	6840      	ldr	r0, [r0, #4]
 808a6aa:	4611      	mov	r1, r2
 808a6ac:	f7fe b8ca 	b.w	8088844 <network_connecting>

0808a6b0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808a6b0:	2200      	movs	r2, #0
 808a6b2:	2102      	movs	r1, #2
 808a6b4:	6840      	ldr	r0, [r0, #4]
 808a6b6:	f7fe b8cd 	b.w	8088854 <network_disconnect>

0808a6ba <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808a6ba:	2300      	movs	r3, #0
 808a6bc:	6840      	ldr	r0, [r0, #4]
 808a6be:	461a      	mov	r2, r3
 808a6c0:	f7fe b8b8 	b.w	8088834 <network_connect>

0808a6c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808a6c4:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808a6c6:	2428      	movs	r4, #40	; 0x28
 808a6c8:	4b07      	ldr	r3, [pc, #28]	; (808a6e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808a6ca:	4622      	mov	r2, r4
 808a6cc:	4618      	mov	r0, r3
 808a6ce:	2100      	movs	r1, #0
 808a6d0:	f001 fc10 	bl	808bef4 <memset>
        cid = -1;
 808a6d4:	f04f 32ff 	mov.w	r2, #4294967295
 808a6d8:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808a6da:	2204      	movs	r2, #4
 808a6dc:	4b03      	ldr	r3, [pc, #12]	; (808a6ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 808a6de:	8004      	strh	r4, [r0, #0]
 808a6e0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808a6e2:	4a03      	ldr	r2, [pc, #12]	; (808a6f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 808a6e4:	601a      	str	r2, [r3, #0]
 808a6e6:	bd10      	pop	{r4, pc}
 808a6e8:	20001074 	.word	0x20001074
 808a6ec:	2000106c 	.word	0x2000106c
 808a6f0:	08090154 	.word	0x08090154

0808a6f4 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808a6f4:	7441      	strb	r1, [r0, #17]
}
 808a6f6:	4770      	bx	lr

0808a6f8 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 808a6f8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 808a6fa:	7c00      	ldrb	r0, [r0, #16]
 808a6fc:	f7fd ff26 	bl	808854c <hal_usart_available_data_for_write>
}
 808a700:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a704:	bd08      	pop	{r3, pc}

0808a706 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808a706:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808a708:	7c00      	ldrb	r0, [r0, #16]
 808a70a:	f7fd fef7 	bl	80884fc <hal_usart_available>
}
 808a70e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a712:	bd08      	pop	{r3, pc}

0808a714 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808a714:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 808a716:	7c00      	ldrb	r0, [r0, #16]
 808a718:	f7fd ff00 	bl	808851c <hal_usart_peek>
}
 808a71c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808a720:	bd08      	pop	{r3, pc}

0808a722 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808a722:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 808a724:	7c00      	ldrb	r0, [r0, #16]
 808a726:	f7fd fef1 	bl	808850c <hal_usart_read>
}
 808a72a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 808a72e:	bd08      	pop	{r3, pc}

0808a730 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 808a730:	7c00      	ldrb	r0, [r0, #16]
 808a732:	f7fd befb 	b.w	808852c <hal_usart_flush>

0808a736 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808a736:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808a738:	7c46      	ldrb	r6, [r0, #17]
{
 808a73a:	4604      	mov	r4, r0
 808a73c:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808a73e:	b12e      	cbz	r6, 808a74c <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 808a740:	4629      	mov	r1, r5
 808a742:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808a744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 808a748:	f7fd bed0 	b.w	80884ec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 808a74c:	7c00      	ldrb	r0, [r0, #16]
 808a74e:	f7fd fefd 	bl	808854c <hal_usart_available_data_for_write>
 808a752:	2800      	cmp	r0, #0
 808a754:	dcf4      	bgt.n	808a740 <_ZN11USARTSerial5writeEh+0xa>
}
 808a756:	4630      	mov	r0, r6
 808a758:	bd70      	pop	{r4, r5, r6, pc}
	...

0808a75c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 808a75c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808a760:	b510      	push	{r4, lr}
 808a762:	4604      	mov	r4, r0
 808a764:	4608      	mov	r0, r1
 808a766:	4611      	mov	r1, r2
 808a768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808a76c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 808a770:	4a04      	ldr	r2, [pc, #16]	; (808a784 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 808a772:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 808a774:	6022      	str	r2, [r4, #0]
  _blocking = true;
 808a776:	2201      	movs	r2, #1
 808a778:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 808a77a:	461a      	mov	r2, r3
 808a77c:	f7fd feae 	bl	80884dc <hal_usart_init>
}
 808a780:	4620      	mov	r0, r4
 808a782:	bd10      	pop	{r4, pc}
 808a784:	08090188 	.word	0x08090188

0808a788 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 808a788:	2300      	movs	r3, #0
 808a78a:	7c00      	ldrb	r0, [r0, #16]
 808a78c:	f7fd bee6 	b.w	808855c <hal_usart_begin_config>

0808a790 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 808a790:	2200      	movs	r2, #0
 808a792:	f7ff bff9 	b.w	808a788 <_ZN11USARTSerial5beginEmm>

0808a796 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 808a796:	7c00      	ldrb	r0, [r0, #16]
 808a798:	f7fd bed0 	b.w	808853c <hal_usart_is_enabled>

0808a79c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808a79c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808a79e:	4d0d      	ldr	r5, [pc, #52]	; (808a7d4 <_Z22__fetch_global_Serial1v+0x38>)
 808a7a0:	7829      	ldrb	r1, [r5, #0]
 808a7a2:	f3bf 8f5b 	dmb	ish
 808a7a6:	f011 0401 	ands.w	r4, r1, #1
 808a7aa:	d111      	bne.n	808a7d0 <_Z22__fetch_global_Serial1v+0x34>
 808a7ac:	4628      	mov	r0, r5
 808a7ae:	f7f5 fc92 	bl	80800d6 <__cxa_guard_acquire>
 808a7b2:	b168      	cbz	r0, 808a7d0 <_Z22__fetch_global_Serial1v+0x34>
 808a7b4:	4621      	mov	r1, r4
 808a7b6:	4a08      	ldr	r2, [pc, #32]	; (808a7d8 <_Z22__fetch_global_Serial1v+0x3c>)
 808a7b8:	4b08      	ldr	r3, [pc, #32]	; (808a7dc <_Z22__fetch_global_Serial1v+0x40>)
 808a7ba:	4809      	ldr	r0, [pc, #36]	; (808a7e0 <_Z22__fetch_global_Serial1v+0x44>)
 808a7bc:	f7ff ffce 	bl	808a75c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 808a7c0:	4628      	mov	r0, r5
 808a7c2:	f7f5 fc8d 	bl	80800e0 <__cxa_guard_release>
 808a7c6:	4a07      	ldr	r2, [pc, #28]	; (808a7e4 <_Z22__fetch_global_Serial1v+0x48>)
 808a7c8:	4907      	ldr	r1, [pc, #28]	; (808a7e8 <_Z22__fetch_global_Serial1v+0x4c>)
 808a7ca:	4805      	ldr	r0, [pc, #20]	; (808a7e0 <_Z22__fetch_global_Serial1v+0x44>)
 808a7cc:	f000 fa5a 	bl	808ac84 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808a7d0:	4803      	ldr	r0, [pc, #12]	; (808a7e0 <_Z22__fetch_global_Serial1v+0x44>)
 808a7d2:	bd38      	pop	{r3, r4, r5, pc}
 808a7d4:	2000109c 	.word	0x2000109c
 808a7d8:	200010a0 	.word	0x200010a0
 808a7dc:	20001124 	.word	0x20001124
 808a7e0:	200011a8 	.word	0x200011a8
 808a7e4:	200002b0 	.word	0x200002b0
 808a7e8:	08080941 	.word	0x08080941

0808a7ec <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808a7ec:	b510      	push	{r4, lr}
      if (_M_empty())
 808a7ee:	6883      	ldr	r3, [r0, #8]
 808a7f0:	4604      	mov	r4, r0
 808a7f2:	b90b      	cbnz	r3, 808a7f8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808a7f4:	f000 fa4f 	bl	808ac96 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808a7f8:	68c3      	ldr	r3, [r0, #12]
 808a7fa:	4798      	blx	r3
      if (_M_manager)
 808a7fc:	68a3      	ldr	r3, [r4, #8]
 808a7fe:	b11b      	cbz	r3, 808a808 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808a800:	2203      	movs	r2, #3
 808a802:	4621      	mov	r1, r4
 808a804:	4620      	mov	r0, r4
 808a806:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808a808:	4620      	mov	r0, r4
}
 808a80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 808a80e:	2110      	movs	r1, #16
 808a810:	f000 ba3d 	b.w	808ac8e <_ZdlPvj>

0808a814 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 808a814:	4770      	bx	lr

0808a816 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808a816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a818:	4606      	mov	r6, r0
 808a81a:	4615      	mov	r5, r2
 808a81c:	460c      	mov	r4, r1
 808a81e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808a820:	42bc      	cmp	r4, r7
 808a822:	d006      	beq.n	808a832 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808a824:	6833      	ldr	r3, [r6, #0]
 808a826:	4630      	mov	r0, r6
 808a828:	689b      	ldr	r3, [r3, #8]
 808a82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 808a82e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 808a830:	e7f6      	b.n	808a820 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 808a832:	4628      	mov	r0, r5
 808a834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808a836 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 808a836:	2200      	movs	r2, #0
 808a838:	7c00      	ldrb	r0, [r0, #16]
 808a83a:	f7fd beaf 	b.w	808859c <hal_i2c_write>

0808a83e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 808a83e:	2100      	movs	r1, #0
 808a840:	7c00      	ldrb	r0, [r0, #16]
 808a842:	f7fd beb3 	b.w	80885ac <hal_i2c_available>

0808a846 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 808a846:	2100      	movs	r1, #0
 808a848:	7c00      	ldrb	r0, [r0, #16]
 808a84a:	f7fd beb7 	b.w	80885bc <hal_i2c_read>

0808a84e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 808a84e:	2100      	movs	r1, #0
 808a850:	7c00      	ldrb	r0, [r0, #16]
 808a852:	f7fd bebb 	b.w	80885cc <hal_i2c_peek>

0808a856 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 808a856:	2100      	movs	r1, #0
 808a858:	7c00      	ldrb	r0, [r0, #16]
 808a85a:	f7fd bebf 	b.w	80885dc <hal_i2c_flush>

0808a85e <_ZN7TwoWireD0Ev>:
 808a85e:	b510      	push	{r4, lr}
 808a860:	4604      	mov	r4, r0
 808a862:	2114      	movs	r1, #20
 808a864:	f000 fa13 	bl	808ac8e <_ZdlPvj>
 808a868:	4620      	mov	r0, r4
 808a86a:	bd10      	pop	{r4, pc}

0808a86c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808a86c:	b510      	push	{r4, lr}
 808a86e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808a872:	4604      	mov	r4, r0
 808a874:	4608      	mov	r0, r1
 808a876:	2100      	movs	r1, #0
 808a878:	e9c4 1301 	strd	r1, r3, [r4, #4]
 808a87c:	4b03      	ldr	r3, [pc, #12]	; (808a88c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 808a87e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 808a880:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 808a882:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 808a884:	f7fd feba 	bl	80885fc <hal_i2c_init>
}
 808a888:	4620      	mov	r0, r4
 808a88a:	bd10      	pop	{r4, pc}
 808a88c:	080901b8 	.word	0x080901b8

0808a890 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808a890:	2300      	movs	r3, #0
 808a892:	7c00      	ldrb	r0, [r0, #16]
 808a894:	461a      	mov	r2, r3
 808a896:	4619      	mov	r1, r3
 808a898:	f7fd be68 	b.w	808856c <hal_i2c_begin>

0808a89c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 808a89c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808a89e:	2200      	movs	r2, #0
 808a8a0:	2314      	movs	r3, #20
 808a8a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808a8a6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 808a8aa:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 808a8ac:	7c00      	ldrb	r0, [r0, #16]
 808a8ae:	f88d 3008 	strb.w	r3, [sp, #8]
 808a8b2:	684b      	ldr	r3, [r1, #4]
 808a8b4:	9303      	str	r3, [sp, #12]
 808a8b6:	68cb      	ldr	r3, [r1, #12]
 808a8b8:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808a8ba:	7a0b      	ldrb	r3, [r1, #8]
 808a8bc:	a901      	add	r1, sp, #4
 808a8be:	9305      	str	r3, [sp, #20]
 808a8c0:	f7fd feb4 	bl	808862c <hal_i2c_request_ex>
}
 808a8c4:	b007      	add	sp, #28
 808a8c6:	f85d fb04 	ldr.w	pc, [sp], #4

0808a8ca <_ZN7TwoWire11requestFromEhjh>:
{
 808a8ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 808a8cc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808a8ce:	f88d 1000 	strb.w	r1, [sp]
 808a8d2:	f04f 0164 	mov.w	r1, #100	; 0x64
 808a8d6:	bf18      	it	ne
 808a8d8:	2301      	movne	r3, #1
 808a8da:	9103      	str	r1, [sp, #12]
 808a8dc:	4669      	mov	r1, sp
    size_ = size;
 808a8de:	9201      	str	r2, [sp, #4]
 808a8e0:	f88d 3008 	strb.w	r3, [sp, #8]
 808a8e4:	f7ff ffda 	bl	808a89c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 808a8e8:	b005      	add	sp, #20
 808a8ea:	f85d fb04 	ldr.w	pc, [sp], #4

0808a8ee <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 808a8ee:	2301      	movs	r3, #1
 808a8f0:	f7ff bfeb 	b.w	808a8ca <_ZN7TwoWire11requestFromEhjh>

0808a8f4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 808a8f4:	2200      	movs	r2, #0
 808a8f6:	7c00      	ldrb	r0, [r0, #16]
 808a8f8:	f7fd be40 	b.w	808857c <hal_i2c_begin_transmission>

0808a8fc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 808a8fc:	b2c9      	uxtb	r1, r1
 808a8fe:	f7ff bff9 	b.w	808a8f4 <_ZN7TwoWire17beginTransmissionEh>

0808a902 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 808a902:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 808a904:	2200      	movs	r2, #0
 808a906:	460b      	mov	r3, r1
 808a908:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808a90c:	2214      	movs	r2, #20
 808a90e:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 808a912:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 808a914:	7809      	ldrb	r1, [r1, #0]
    };
 808a916:	9203      	str	r2, [sp, #12]
 808a918:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808a91a:	7a1b      	ldrb	r3, [r3, #8]
    };
 808a91c:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 808a91e:	7c00      	ldrb	r0, [r0, #16]
 808a920:	aa01      	add	r2, sp, #4
 808a922:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808a926:	9305      	str	r3, [sp, #20]
 808a928:	f7fd fe28 	bl	808857c <hal_i2c_begin_transmission>
}
 808a92c:	b007      	add	sp, #28
 808a92e:	f85d fb04 	ldr.w	pc, [sp], #4

0808a932 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 808a932:	2200      	movs	r2, #0
 808a934:	7c00      	ldrb	r0, [r0, #16]
 808a936:	f7fd be29 	b.w	808858c <hal_i2c_end_transmission>

0808a93a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 808a93a:	2101      	movs	r1, #1
 808a93c:	f7ff bff9 	b.w	808a932 <_ZN7TwoWire15endTransmissionEh>

0808a940 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
 808a940:	2100      	movs	r1, #0
 808a942:	7c00      	ldrb	r0, [r0, #16]
 808a944:	f7fd be52 	b.w	80885ec <hal_i2c_is_enabled>

0808a948 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808a948:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 808a94a:	2100      	movs	r1, #0
 808a94c:	7c00      	ldrb	r0, [r0, #16]
 808a94e:	f7fd fe5d 	bl	808860c <hal_i2c_lock>
}
 808a952:	fab0 f080 	clz	r0, r0
 808a956:	0940      	lsrs	r0, r0, #5
 808a958:	bd08      	pop	{r3, pc}

0808a95a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808a95a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 808a95c:	2100      	movs	r1, #0
 808a95e:	7c00      	ldrb	r0, [r0, #16]
 808a960:	f7fd fe5c 	bl	808861c <hal_i2c_unlock>
}
 808a964:	fab0 f080 	clz	r0, r0
 808a968:	0940      	lsrs	r0, r0, #5
 808a96a:	bd08      	pop	{r3, pc}

0808a96c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808a96c:	2300      	movs	r3, #0
 808a96e:	6840      	ldr	r0, [r0, #4]
 808a970:	461a      	mov	r2, r3
 808a972:	f7fd bf5f 	b.w	8088834 <network_connect>

0808a976 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808a976:	2200      	movs	r2, #0
 808a978:	2102      	movs	r1, #2
 808a97a:	6840      	ldr	r0, [r0, #4]
 808a97c:	f7fd bf6a 	b.w	8088854 <network_disconnect>

0808a980 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808a980:	2200      	movs	r2, #0
 808a982:	6840      	ldr	r0, [r0, #4]
 808a984:	4611      	mov	r1, r2
 808a986:	f7fd bf5d 	b.w	8088844 <network_connecting>

0808a98a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808a98a:	2200      	movs	r2, #0
 808a98c:	6840      	ldr	r0, [r0, #4]
 808a98e:	4611      	mov	r1, r2
 808a990:	f7fd bf68 	b.w	8088864 <network_ready>

0808a994 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808a994:	2300      	movs	r3, #0
 808a996:	6840      	ldr	r0, [r0, #4]
 808a998:	461a      	mov	r2, r3
 808a99a:	4619      	mov	r1, r3
 808a99c:	f7fd bf6a 	b.w	8088874 <network_on>

0808a9a0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808a9a0:	2300      	movs	r3, #0
 808a9a2:	6840      	ldr	r0, [r0, #4]
 808a9a4:	461a      	mov	r2, r3
 808a9a6:	4619      	mov	r1, r3
 808a9a8:	f7fd bf6c 	b.w	8088884 <network_off>

0808a9ac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808a9ac:	2200      	movs	r2, #0
 808a9ae:	6840      	ldr	r0, [r0, #4]
 808a9b0:	f081 0101 	eor.w	r1, r1, #1
 808a9b4:	f7fd bf6e 	b.w	8088894 <network_listen>

0808a9b8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808a9b8:	2200      	movs	r2, #0
 808a9ba:	6840      	ldr	r0, [r0, #4]
 808a9bc:	f7fd bf7a 	b.w	80888b4 <network_set_listen_timeout>

0808a9c0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808a9c0:	2200      	movs	r2, #0
 808a9c2:	6840      	ldr	r0, [r0, #4]
 808a9c4:	4611      	mov	r1, r2
 808a9c6:	f7fd bf7d 	b.w	80888c4 <network_get_listen_timeout>

0808a9ca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808a9ca:	2200      	movs	r2, #0
 808a9cc:	6840      	ldr	r0, [r0, #4]
 808a9ce:	4611      	mov	r1, r2
 808a9d0:	f7fd bf68 	b.w	80888a4 <network_listening>

0808a9d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808a9d4:	b570      	push	{r4, r5, r6, lr}
 808a9d6:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808a9d8:	2600      	movs	r6, #0
 808a9da:	b086      	sub	sp, #24
 808a9dc:	4604      	mov	r4, r0
    IPAddress addr;
 808a9de:	a804      	add	r0, sp, #16
 808a9e0:	f7ff fd26 	bl	808a430 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a9e4:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808a9e6:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a9e8:	f001 faeb 	bl	808bfc2 <strlen>
 808a9ec:	4b0a      	ldr	r3, [pc, #40]	; (808aa18 <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 808a9ee:	9600      	str	r6, [sp, #0]
 808a9f0:	b281      	uxth	r1, r0
 808a9f2:	685b      	ldr	r3, [r3, #4]
 808a9f4:	4628      	mov	r0, r5
 808a9f6:	aa03      	add	r2, sp, #12
 808a9f8:	f7fd fe70 	bl	80886dc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808a9fc:	b130      	cbz	r0, 808aa0c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808a9fe:	4631      	mov	r1, r6
 808aa00:	4620      	mov	r0, r4
 808aa02:	f7ff fd25 	bl	808a450 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808aa06:	4620      	mov	r0, r4
 808aa08:	b006      	add	sp, #24
 808aa0a:	bd70      	pop	{r4, r5, r6, pc}
 808aa0c:	4620      	mov	r0, r4
 808aa0e:	a903      	add	r1, sp, #12
 808aa10:	f7ff fd16 	bl	808a440 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 808aa14:	e7f7      	b.n	808aa06 <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 808aa16:	bf00      	nop
 808aa18:	2000106c 	.word	0x2000106c

0808aa1c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808aa1c:	4b02      	ldr	r3, [pc, #8]	; (808aa28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808aa1e:	4a03      	ldr	r2, [pc, #12]	; (808aa2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808aa20:	601a      	str	r2, [r3, #0]
 808aa22:	2200      	movs	r2, #0
 808aa24:	605a      	str	r2, [r3, #4]

} // spark
 808aa26:	4770      	bx	lr
 808aa28:	200011bc 	.word	0x200011bc
 808aa2c:	080901e0 	.word	0x080901e0

0808aa30 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 808aa30:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 808aa32:	b570      	push	{r4, r5, r6, lr}
 808aa34:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 808aa36:	d901      	bls.n	808aa3c <pinAvailable+0xc>
    return false;
 808aa38:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 808aa3a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808aa3c:	f1a0 030d 	sub.w	r3, r0, #13
 808aa40:	2b02      	cmp	r3, #2
 808aa42:	d90b      	bls.n	808aa5c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 808aa44:	2801      	cmp	r0, #1
 808aa46:	d826      	bhi.n	808aa96 <pinAvailable+0x66>
 808aa48:	f000 f8cc 	bl	808abe4 <_Z19__fetch_global_Wirev>
 808aa4c:	2100      	movs	r1, #0
 808aa4e:	7c00      	ldrb	r0, [r0, #16]
 808aa50:	f7fd fdcc 	bl	80885ec <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808aa54:	f080 0001 	eor.w	r0, r0, #1
 808aa58:	b2c0      	uxtb	r0, r0
 808aa5a:	e7ee      	b.n	808aa3a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 808aa5c:	4e13      	ldr	r6, [pc, #76]	; (808aaac <pinAvailable+0x7c>)
 808aa5e:	7831      	ldrb	r1, [r6, #0]
 808aa60:	f3bf 8f5b 	dmb	ish
 808aa64:	f011 0501 	ands.w	r5, r1, #1
 808aa68:	d10f      	bne.n	808aa8a <pinAvailable+0x5a>
 808aa6a:	4630      	mov	r0, r6
 808aa6c:	f7f5 fb33 	bl	80800d6 <__cxa_guard_acquire>
 808aa70:	b158      	cbz	r0, 808aa8a <pinAvailable+0x5a>
 808aa72:	4629      	mov	r1, r5
 808aa74:	480e      	ldr	r0, [pc, #56]	; (808aab0 <pinAvailable+0x80>)
 808aa76:	f7fe f934 	bl	8088ce2 <_ZN8SPIClassC1E19hal_spi_interface_t>
 808aa7a:	4630      	mov	r0, r6
 808aa7c:	f7f5 fb30 	bl	80800e0 <__cxa_guard_release>
 808aa80:	4a0c      	ldr	r2, [pc, #48]	; (808aab4 <pinAvailable+0x84>)
 808aa82:	490d      	ldr	r1, [pc, #52]	; (808aab8 <pinAvailable+0x88>)
 808aa84:	480a      	ldr	r0, [pc, #40]	; (808aab0 <pinAvailable+0x80>)
 808aa86:	f000 f8fd 	bl	808ac84 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808aa8a:	4b09      	ldr	r3, [pc, #36]	; (808aab0 <pinAvailable+0x80>)
 808aa8c:	7818      	ldrb	r0, [r3, #0]
 808aa8e:	f7fd fe05 	bl	808869c <hal_spi_is_enabled>
 808aa92:	2800      	cmp	r0, #0
 808aa94:	d1d0      	bne.n	808aa38 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808aa96:	3c12      	subs	r4, #18
 808aa98:	2c01      	cmp	r4, #1
 808aa9a:	d805      	bhi.n	808aaa8 <pinAvailable+0x78>
 808aa9c:	f7ff fe7e 	bl	808a79c <_Z22__fetch_global_Serial1v>
 808aaa0:	7c00      	ldrb	r0, [r0, #16]
 808aaa2:	f7fd fd4b 	bl	808853c <hal_usart_is_enabled>
 808aaa6:	e7d5      	b.n	808aa54 <pinAvailable+0x24>
  return true; // 'pin' is available
 808aaa8:	2001      	movs	r0, #1
 808aaaa:	e7c6      	b.n	808aa3a <pinAvailable+0xa>
 808aaac:	20000c94 	.word	0x20000c94
 808aab0:	20000c98 	.word	0x20000c98
 808aab4:	200002b0 	.word	0x200002b0
 808aab8:	080871a5 	.word	0x080871a5

0808aabc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808aabc:	282e      	cmp	r0, #46	; 0x2e
{
 808aabe:	b538      	push	{r3, r4, r5, lr}
 808aac0:	4604      	mov	r4, r0
 808aac2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808aac4:	d80a      	bhi.n	808aadc <pinMode+0x20>
 808aac6:	29ff      	cmp	r1, #255	; 0xff
 808aac8:	d008      	beq.n	808aadc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 808aaca:	f7ff ffb1 	bl	808aa30 <pinAvailable>
 808aace:	b128      	cbz	r0, 808aadc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 808aad0:	4629      	mov	r1, r5
 808aad2:	4620      	mov	r0, r4
}
 808aad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 808aad8:	f7fd bc70 	b.w	80883bc <HAL_Pin_Mode>
}
 808aadc:	bd38      	pop	{r3, r4, r5, pc}

0808aade <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808aade:	b538      	push	{r3, r4, r5, lr}
 808aae0:	4604      	mov	r4, r0
 808aae2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808aae4:	f7fd fc72 	bl	80883cc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808aae8:	28ff      	cmp	r0, #255	; 0xff
 808aaea:	d010      	beq.n	808ab0e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 808aaec:	2806      	cmp	r0, #6
 808aaee:	d804      	bhi.n	808aafa <digitalWrite+0x1c>
 808aaf0:	234d      	movs	r3, #77	; 0x4d
 808aaf2:	fa23 f000 	lsr.w	r0, r3, r0
 808aaf6:	07c3      	lsls	r3, r0, #31
 808aaf8:	d409      	bmi.n	808ab0e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808aafa:	4620      	mov	r0, r4
 808aafc:	f7ff ff98 	bl	808aa30 <pinAvailable>
 808ab00:	b128      	cbz	r0, 808ab0e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808ab02:	4629      	mov	r1, r5
 808ab04:	4620      	mov	r0, r4
}
 808ab06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 808ab0a:	f7fd bc67 	b.w	80883dc <HAL_GPIO_Write>
}
 808ab0e:	bd38      	pop	{r3, r4, r5, pc}

0808ab10 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808ab10:	b510      	push	{r4, lr}
 808ab12:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808ab14:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808ab16:	bf9c      	itt	ls
 808ab18:	340a      	addls	r4, #10
 808ab1a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808ab1c:	4620      	mov	r0, r4
 808ab1e:	f7ff ff87 	bl	808aa30 <pinAvailable>
 808ab22:	b150      	cbz	r0, 808ab3a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808ab24:	2103      	movs	r1, #3
 808ab26:	4620      	mov	r0, r4
 808ab28:	f7fd fc40 	bl	80883ac <HAL_Validate_Pin_Function>
 808ab2c:	2803      	cmp	r0, #3
 808ab2e:	d104      	bne.n	808ab3a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 808ab30:	4620      	mov	r0, r4
}
 808ab32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 808ab36:	f7fd bc61 	b.w	80883fc <hal_adc_read>
}
 808ab3a:	2000      	movs	r0, #0
 808ab3c:	bd10      	pop	{r4, pc}
	...

0808ab40 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 808ab40:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808ab42:	4c08      	ldr	r4, [pc, #32]	; (808ab64 <_Z21__fetch_global_EEPROMv+0x24>)
 808ab44:	7823      	ldrb	r3, [r4, #0]
 808ab46:	f3bf 8f5b 	dmb	ish
 808ab4a:	07db      	lsls	r3, r3, #31
 808ab4c:	d408      	bmi.n	808ab60 <_Z21__fetch_global_EEPROMv+0x20>
 808ab4e:	4620      	mov	r0, r4
 808ab50:	f7f5 fac1 	bl	80800d6 <__cxa_guard_acquire>
 808ab54:	b120      	cbz	r0, 808ab60 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808ab56:	f7fd fc71 	bl	808843c <HAL_EEPROM_Init>
 808ab5a:	4620      	mov	r0, r4
 808ab5c:	f7f5 fac0 	bl	80800e0 <__cxa_guard_release>
	return eeprom;
}
 808ab60:	4801      	ldr	r0, [pc, #4]	; (808ab68 <_Z21__fetch_global_EEPROMv+0x28>)
 808ab62:	bd10      	pop	{r4, pc}
 808ab64:	200011c8 	.word	0x200011c8
 808ab68:	200011cc 	.word	0x200011cc

0808ab6c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808ab6c:	2300      	movs	r3, #0
 808ab6e:	b513      	push	{r0, r1, r4, lr}
 808ab70:	4c07      	ldr	r4, [pc, #28]	; (808ab90 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808ab72:	461a      	mov	r2, r3
 808ab74:	4619      	mov	r1, r3
 808ab76:	4620      	mov	r0, r4
 808ab78:	9300      	str	r3, [sp, #0]
 808ab7a:	f7ff fc7b 	bl	808a474 <_ZN9IPAddressC1Ehhhh>
 808ab7e:	4620      	mov	r0, r4
 808ab80:	4a04      	ldr	r2, [pc, #16]	; (808ab94 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808ab82:	4905      	ldr	r1, [pc, #20]	; (808ab98 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808ab84:	b002      	add	sp, #8
 808ab86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808ab8a:	f000 b87b 	b.w	808ac84 <__aeabi_atexit>
 808ab8e:	bf00      	nop
 808ab90:	200011d0 	.word	0x200011d0
 808ab94:	200002b0 	.word	0x200002b0
 808ab98:	0808a3ed 	.word	0x0808a3ed

0808ab9c <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 808ab9c:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 808ab9e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 808aba0:	2520      	movs	r5, #32
 808aba2:	8043      	strh	r3, [r0, #2]
 808aba4:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808aba6:	4e08      	ldr	r6, [pc, #32]	; (808abc8 <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 808aba8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 808abaa:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808abac:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 808abae:	6085      	str	r5, [r0, #8]
 808abb0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808abb2:	4628      	mov	r0, r5
 808abb4:	f000 f86d 	bl	808ac92 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808abb8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 808abba:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 808abbc:	4628      	mov	r0, r5
 808abbe:	f000 f868 	bl	808ac92 <_ZnajRKSt9nothrow_t>
	};
 808abc2:	60e0      	str	r0, [r4, #12]

	return config;
}
 808abc4:	4620      	mov	r0, r4
 808abc6:	bd70      	pop	{r4, r5, r6, pc}
 808abc8:	0809020c 	.word	0x0809020c

0808abcc <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 808abcc:	b510      	push	{r4, lr}
 808abce:	4604      	mov	r4, r0
	return defaultWireConfig();
 808abd0:	f7ff ffe4 	bl	808ab9c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 808abd4:	4620      	mov	r0, r4
 808abd6:	bd10      	pop	{r4, pc}

0808abd8 <_Z18acquireWire3Bufferv>:
 808abd8:	b510      	push	{r4, lr}
 808abda:	4604      	mov	r4, r0
 808abdc:	f7ff ffde 	bl	808ab9c <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 808abe0:	4620      	mov	r0, r4
 808abe2:	bd10      	pop	{r4, pc}

0808abe4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 808abe4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808abe6:	4d0f      	ldr	r5, [pc, #60]	; (808ac24 <_Z19__fetch_global_Wirev+0x40>)
{
 808abe8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 808abea:	7829      	ldrb	r1, [r5, #0]
 808abec:	f3bf 8f5b 	dmb	ish
 808abf0:	f011 0401 	ands.w	r4, r1, #1
 808abf4:	d113      	bne.n	808ac1e <_Z19__fetch_global_Wirev+0x3a>
 808abf6:	4628      	mov	r0, r5
 808abf8:	f7f5 fa6d 	bl	80800d6 <__cxa_guard_acquire>
 808abfc:	b178      	cbz	r0, 808ac1e <_Z19__fetch_global_Wirev+0x3a>
 808abfe:	a801      	add	r0, sp, #4
 808ac00:	f7ff ffe4 	bl	808abcc <_Z17acquireWireBufferv>
 808ac04:	4621      	mov	r1, r4
 808ac06:	aa01      	add	r2, sp, #4
 808ac08:	4807      	ldr	r0, [pc, #28]	; (808ac28 <_Z19__fetch_global_Wirev+0x44>)
 808ac0a:	f7ff fe2f 	bl	808a86c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808ac0e:	4628      	mov	r0, r5
 808ac10:	f7f5 fa66 	bl	80800e0 <__cxa_guard_release>
 808ac14:	4a05      	ldr	r2, [pc, #20]	; (808ac2c <_Z19__fetch_global_Wirev+0x48>)
 808ac16:	4906      	ldr	r1, [pc, #24]	; (808ac30 <_Z19__fetch_global_Wirev+0x4c>)
 808ac18:	4803      	ldr	r0, [pc, #12]	; (808ac28 <_Z19__fetch_global_Wirev+0x44>)
 808ac1a:	f000 f833 	bl	808ac84 <__aeabi_atexit>
	return wire;
}
 808ac1e:	4802      	ldr	r0, [pc, #8]	; (808ac28 <_Z19__fetch_global_Wirev+0x44>)
 808ac20:	b007      	add	sp, #28
 808ac22:	bd30      	pop	{r4, r5, pc}
 808ac24:	200011d8 	.word	0x200011d8
 808ac28:	200011e0 	.word	0x200011e0
 808ac2c:	200002b0 	.word	0x200002b0
 808ac30:	0808a815 	.word	0x0808a815

0808ac34 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808ac34:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808ac36:	4c0f      	ldr	r4, [pc, #60]	; (808ac74 <_Z20__fetch_global_Wire3v+0x40>)
{
 808ac38:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 808ac3a:	7823      	ldrb	r3, [r4, #0]
 808ac3c:	f3bf 8f5b 	dmb	ish
 808ac40:	07db      	lsls	r3, r3, #31
 808ac42:	d413      	bmi.n	808ac6c <_Z20__fetch_global_Wire3v+0x38>
 808ac44:	4620      	mov	r0, r4
 808ac46:	f7f5 fa46 	bl	80800d6 <__cxa_guard_acquire>
 808ac4a:	b178      	cbz	r0, 808ac6c <_Z20__fetch_global_Wire3v+0x38>
 808ac4c:	a801      	add	r0, sp, #4
 808ac4e:	f7ff ffc3 	bl	808abd8 <_Z18acquireWire3Bufferv>
 808ac52:	2102      	movs	r1, #2
 808ac54:	aa01      	add	r2, sp, #4
 808ac56:	4808      	ldr	r0, [pc, #32]	; (808ac78 <_Z20__fetch_global_Wire3v+0x44>)
 808ac58:	f7ff fe08 	bl	808a86c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 808ac5c:	4620      	mov	r0, r4
 808ac5e:	f7f5 fa3f 	bl	80800e0 <__cxa_guard_release>
 808ac62:	4a06      	ldr	r2, [pc, #24]	; (808ac7c <_Z20__fetch_global_Wire3v+0x48>)
 808ac64:	4906      	ldr	r1, [pc, #24]	; (808ac80 <_Z20__fetch_global_Wire3v+0x4c>)
 808ac66:	4804      	ldr	r0, [pc, #16]	; (808ac78 <_Z20__fetch_global_Wire3v+0x44>)
 808ac68:	f000 f80c 	bl	808ac84 <__aeabi_atexit>
	return wire;
}
 808ac6c:	4802      	ldr	r0, [pc, #8]	; (808ac78 <_Z20__fetch_global_Wire3v+0x44>)
 808ac6e:	b006      	add	sp, #24
 808ac70:	bd10      	pop	{r4, pc}
 808ac72:	bf00      	nop
 808ac74:	200011dc 	.word	0x200011dc
 808ac78:	200011f4 	.word	0x200011f4
 808ac7c:	200002b0 	.word	0x200002b0
 808ac80:	0808a815 	.word	0x0808a815

0808ac84 <__aeabi_atexit>:
 808ac84:	460b      	mov	r3, r1
 808ac86:	4601      	mov	r1, r0
 808ac88:	4618      	mov	r0, r3
 808ac8a:	f001 b8f5 	b.w	808be78 <__cxa_atexit>

0808ac8e <_ZdlPvj>:
 808ac8e:	f7f5 ba20 	b.w	80800d2 <_ZdlPv>

0808ac92 <_ZnajRKSt9nothrow_t>:
 808ac92:	f7f5 ba1c 	b.w	80800ce <_Znaj>

0808ac96 <_ZSt25__throw_bad_function_callv>:
 808ac96:	b508      	push	{r3, lr}
 808ac98:	f7fd fe94 	bl	80889c4 <abort>

0808ac9c <nan>:
 808ac9c:	2000      	movs	r0, #0
 808ac9e:	4901      	ldr	r1, [pc, #4]	; (808aca4 <nan+0x8>)
 808aca0:	4770      	bx	lr
 808aca2:	bf00      	nop
 808aca4:	7ff80000 	.word	0x7ff80000

0808aca8 <__aeabi_drsub>:
 808aca8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808acac:	e002      	b.n	808acb4 <__adddf3>
 808acae:	bf00      	nop

0808acb0 <__aeabi_dsub>:
 808acb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808acb4 <__adddf3>:
 808acb4:	b530      	push	{r4, r5, lr}
 808acb6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808acba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808acbe:	ea94 0f05 	teq	r4, r5
 808acc2:	bf08      	it	eq
 808acc4:	ea90 0f02 	teqeq	r0, r2
 808acc8:	bf1f      	itttt	ne
 808acca:	ea54 0c00 	orrsne.w	ip, r4, r0
 808acce:	ea55 0c02 	orrsne.w	ip, r5, r2
 808acd2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808acd6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808acda:	f000 80e2 	beq.w	808aea2 <__adddf3+0x1ee>
 808acde:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808ace2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808ace6:	bfb8      	it	lt
 808ace8:	426d      	neglt	r5, r5
 808acea:	dd0c      	ble.n	808ad06 <__adddf3+0x52>
 808acec:	442c      	add	r4, r5
 808acee:	ea80 0202 	eor.w	r2, r0, r2
 808acf2:	ea81 0303 	eor.w	r3, r1, r3
 808acf6:	ea82 0000 	eor.w	r0, r2, r0
 808acfa:	ea83 0101 	eor.w	r1, r3, r1
 808acfe:	ea80 0202 	eor.w	r2, r0, r2
 808ad02:	ea81 0303 	eor.w	r3, r1, r3
 808ad06:	2d36      	cmp	r5, #54	; 0x36
 808ad08:	bf88      	it	hi
 808ad0a:	bd30      	pophi	{r4, r5, pc}
 808ad0c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808ad10:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808ad14:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808ad18:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808ad1c:	d002      	beq.n	808ad24 <__adddf3+0x70>
 808ad1e:	4240      	negs	r0, r0
 808ad20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ad24:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808ad28:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808ad2c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808ad30:	d002      	beq.n	808ad38 <__adddf3+0x84>
 808ad32:	4252      	negs	r2, r2
 808ad34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ad38:	ea94 0f05 	teq	r4, r5
 808ad3c:	f000 80a7 	beq.w	808ae8e <__adddf3+0x1da>
 808ad40:	f1a4 0401 	sub.w	r4, r4, #1
 808ad44:	f1d5 0e20 	rsbs	lr, r5, #32
 808ad48:	db0d      	blt.n	808ad66 <__adddf3+0xb2>
 808ad4a:	fa02 fc0e 	lsl.w	ip, r2, lr
 808ad4e:	fa22 f205 	lsr.w	r2, r2, r5
 808ad52:	1880      	adds	r0, r0, r2
 808ad54:	f141 0100 	adc.w	r1, r1, #0
 808ad58:	fa03 f20e 	lsl.w	r2, r3, lr
 808ad5c:	1880      	adds	r0, r0, r2
 808ad5e:	fa43 f305 	asr.w	r3, r3, r5
 808ad62:	4159      	adcs	r1, r3
 808ad64:	e00e      	b.n	808ad84 <__adddf3+0xd0>
 808ad66:	f1a5 0520 	sub.w	r5, r5, #32
 808ad6a:	f10e 0e20 	add.w	lr, lr, #32
 808ad6e:	2a01      	cmp	r2, #1
 808ad70:	fa03 fc0e 	lsl.w	ip, r3, lr
 808ad74:	bf28      	it	cs
 808ad76:	f04c 0c02 	orrcs.w	ip, ip, #2
 808ad7a:	fa43 f305 	asr.w	r3, r3, r5
 808ad7e:	18c0      	adds	r0, r0, r3
 808ad80:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808ad84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808ad88:	d507      	bpl.n	808ad9a <__adddf3+0xe6>
 808ad8a:	f04f 0e00 	mov.w	lr, #0
 808ad8e:	f1dc 0c00 	rsbs	ip, ip, #0
 808ad92:	eb7e 0000 	sbcs.w	r0, lr, r0
 808ad96:	eb6e 0101 	sbc.w	r1, lr, r1
 808ad9a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808ad9e:	d31b      	bcc.n	808add8 <__adddf3+0x124>
 808ada0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808ada4:	d30c      	bcc.n	808adc0 <__adddf3+0x10c>
 808ada6:	0849      	lsrs	r1, r1, #1
 808ada8:	ea5f 0030 	movs.w	r0, r0, rrx
 808adac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808adb0:	f104 0401 	add.w	r4, r4, #1
 808adb4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808adb8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808adbc:	f080 809a 	bcs.w	808aef4 <__adddf3+0x240>
 808adc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808adc4:	bf08      	it	eq
 808adc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808adca:	f150 0000 	adcs.w	r0, r0, #0
 808adce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808add2:	ea41 0105 	orr.w	r1, r1, r5
 808add6:	bd30      	pop	{r4, r5, pc}
 808add8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808addc:	4140      	adcs	r0, r0
 808adde:	eb41 0101 	adc.w	r1, r1, r1
 808ade2:	3c01      	subs	r4, #1
 808ade4:	bf28      	it	cs
 808ade6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 808adea:	d2e9      	bcs.n	808adc0 <__adddf3+0x10c>
 808adec:	f091 0f00 	teq	r1, #0
 808adf0:	bf04      	itt	eq
 808adf2:	4601      	moveq	r1, r0
 808adf4:	2000      	moveq	r0, #0
 808adf6:	fab1 f381 	clz	r3, r1
 808adfa:	bf08      	it	eq
 808adfc:	3320      	addeq	r3, #32
 808adfe:	f1a3 030b 	sub.w	r3, r3, #11
 808ae02:	f1b3 0220 	subs.w	r2, r3, #32
 808ae06:	da0c      	bge.n	808ae22 <__adddf3+0x16e>
 808ae08:	320c      	adds	r2, #12
 808ae0a:	dd08      	ble.n	808ae1e <__adddf3+0x16a>
 808ae0c:	f102 0c14 	add.w	ip, r2, #20
 808ae10:	f1c2 020c 	rsb	r2, r2, #12
 808ae14:	fa01 f00c 	lsl.w	r0, r1, ip
 808ae18:	fa21 f102 	lsr.w	r1, r1, r2
 808ae1c:	e00c      	b.n	808ae38 <__adddf3+0x184>
 808ae1e:	f102 0214 	add.w	r2, r2, #20
 808ae22:	bfd8      	it	le
 808ae24:	f1c2 0c20 	rsble	ip, r2, #32
 808ae28:	fa01 f102 	lsl.w	r1, r1, r2
 808ae2c:	fa20 fc0c 	lsr.w	ip, r0, ip
 808ae30:	bfdc      	itt	le
 808ae32:	ea41 010c 	orrle.w	r1, r1, ip
 808ae36:	4090      	lslle	r0, r2
 808ae38:	1ae4      	subs	r4, r4, r3
 808ae3a:	bfa2      	ittt	ge
 808ae3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808ae40:	4329      	orrge	r1, r5
 808ae42:	bd30      	popge	{r4, r5, pc}
 808ae44:	ea6f 0404 	mvn.w	r4, r4
 808ae48:	3c1f      	subs	r4, #31
 808ae4a:	da1c      	bge.n	808ae86 <__adddf3+0x1d2>
 808ae4c:	340c      	adds	r4, #12
 808ae4e:	dc0e      	bgt.n	808ae6e <__adddf3+0x1ba>
 808ae50:	f104 0414 	add.w	r4, r4, #20
 808ae54:	f1c4 0220 	rsb	r2, r4, #32
 808ae58:	fa20 f004 	lsr.w	r0, r0, r4
 808ae5c:	fa01 f302 	lsl.w	r3, r1, r2
 808ae60:	ea40 0003 	orr.w	r0, r0, r3
 808ae64:	fa21 f304 	lsr.w	r3, r1, r4
 808ae68:	ea45 0103 	orr.w	r1, r5, r3
 808ae6c:	bd30      	pop	{r4, r5, pc}
 808ae6e:	f1c4 040c 	rsb	r4, r4, #12
 808ae72:	f1c4 0220 	rsb	r2, r4, #32
 808ae76:	fa20 f002 	lsr.w	r0, r0, r2
 808ae7a:	fa01 f304 	lsl.w	r3, r1, r4
 808ae7e:	ea40 0003 	orr.w	r0, r0, r3
 808ae82:	4629      	mov	r1, r5
 808ae84:	bd30      	pop	{r4, r5, pc}
 808ae86:	fa21 f004 	lsr.w	r0, r1, r4
 808ae8a:	4629      	mov	r1, r5
 808ae8c:	bd30      	pop	{r4, r5, pc}
 808ae8e:	f094 0f00 	teq	r4, #0
 808ae92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808ae96:	bf06      	itte	eq
 808ae98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808ae9c:	3401      	addeq	r4, #1
 808ae9e:	3d01      	subne	r5, #1
 808aea0:	e74e      	b.n	808ad40 <__adddf3+0x8c>
 808aea2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808aea6:	bf18      	it	ne
 808aea8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808aeac:	d029      	beq.n	808af02 <__adddf3+0x24e>
 808aeae:	ea94 0f05 	teq	r4, r5
 808aeb2:	bf08      	it	eq
 808aeb4:	ea90 0f02 	teqeq	r0, r2
 808aeb8:	d005      	beq.n	808aec6 <__adddf3+0x212>
 808aeba:	ea54 0c00 	orrs.w	ip, r4, r0
 808aebe:	bf04      	itt	eq
 808aec0:	4619      	moveq	r1, r3
 808aec2:	4610      	moveq	r0, r2
 808aec4:	bd30      	pop	{r4, r5, pc}
 808aec6:	ea91 0f03 	teq	r1, r3
 808aeca:	bf1e      	ittt	ne
 808aecc:	2100      	movne	r1, #0
 808aece:	2000      	movne	r0, #0
 808aed0:	bd30      	popne	{r4, r5, pc}
 808aed2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808aed6:	d105      	bne.n	808aee4 <__adddf3+0x230>
 808aed8:	0040      	lsls	r0, r0, #1
 808aeda:	4149      	adcs	r1, r1
 808aedc:	bf28      	it	cs
 808aede:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808aee2:	bd30      	pop	{r4, r5, pc}
 808aee4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808aee8:	bf3c      	itt	cc
 808aeea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808aeee:	bd30      	popcc	{r4, r5, pc}
 808aef0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808aef4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808aef8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808aefc:	f04f 0000 	mov.w	r0, #0
 808af00:	bd30      	pop	{r4, r5, pc}
 808af02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808af06:	bf1a      	itte	ne
 808af08:	4619      	movne	r1, r3
 808af0a:	4610      	movne	r0, r2
 808af0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808af10:	bf1c      	itt	ne
 808af12:	460b      	movne	r3, r1
 808af14:	4602      	movne	r2, r0
 808af16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808af1a:	bf06      	itte	eq
 808af1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808af20:	ea91 0f03 	teqeq	r1, r3
 808af24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808af28:	bd30      	pop	{r4, r5, pc}
 808af2a:	bf00      	nop

0808af2c <__aeabi_ui2d>:
 808af2c:	f090 0f00 	teq	r0, #0
 808af30:	bf04      	itt	eq
 808af32:	2100      	moveq	r1, #0
 808af34:	4770      	bxeq	lr
 808af36:	b530      	push	{r4, r5, lr}
 808af38:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808af3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808af40:	f04f 0500 	mov.w	r5, #0
 808af44:	f04f 0100 	mov.w	r1, #0
 808af48:	e750      	b.n	808adec <__adddf3+0x138>
 808af4a:	bf00      	nop

0808af4c <__aeabi_i2d>:
 808af4c:	f090 0f00 	teq	r0, #0
 808af50:	bf04      	itt	eq
 808af52:	2100      	moveq	r1, #0
 808af54:	4770      	bxeq	lr
 808af56:	b530      	push	{r4, r5, lr}
 808af58:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808af5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808af60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808af64:	bf48      	it	mi
 808af66:	4240      	negmi	r0, r0
 808af68:	f04f 0100 	mov.w	r1, #0
 808af6c:	e73e      	b.n	808adec <__adddf3+0x138>
 808af6e:	bf00      	nop

0808af70 <__aeabi_f2d>:
 808af70:	0042      	lsls	r2, r0, #1
 808af72:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808af76:	ea4f 0131 	mov.w	r1, r1, rrx
 808af7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808af7e:	bf1f      	itttt	ne
 808af80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808af84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808af88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808af8c:	4770      	bxne	lr
 808af8e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808af92:	bf08      	it	eq
 808af94:	4770      	bxeq	lr
 808af96:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 808af9a:	bf04      	itt	eq
 808af9c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 808afa0:	4770      	bxeq	lr
 808afa2:	b530      	push	{r4, r5, lr}
 808afa4:	f44f 7460 	mov.w	r4, #896	; 0x380
 808afa8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808afac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808afb0:	e71c      	b.n	808adec <__adddf3+0x138>
 808afb2:	bf00      	nop

0808afb4 <__aeabi_ul2d>:
 808afb4:	ea50 0201 	orrs.w	r2, r0, r1
 808afb8:	bf08      	it	eq
 808afba:	4770      	bxeq	lr
 808afbc:	b530      	push	{r4, r5, lr}
 808afbe:	f04f 0500 	mov.w	r5, #0
 808afc2:	e00a      	b.n	808afda <__aeabi_l2d+0x16>

0808afc4 <__aeabi_l2d>:
 808afc4:	ea50 0201 	orrs.w	r2, r0, r1
 808afc8:	bf08      	it	eq
 808afca:	4770      	bxeq	lr
 808afcc:	b530      	push	{r4, r5, lr}
 808afce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808afd2:	d502      	bpl.n	808afda <__aeabi_l2d+0x16>
 808afd4:	4240      	negs	r0, r0
 808afd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808afda:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808afde:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808afe2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808afe6:	f43f aed8 	beq.w	808ad9a <__adddf3+0xe6>
 808afea:	f04f 0203 	mov.w	r2, #3
 808afee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808aff2:	bf18      	it	ne
 808aff4:	3203      	addne	r2, #3
 808aff6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808affa:	bf18      	it	ne
 808affc:	3203      	addne	r2, #3
 808affe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808b002:	f1c2 0320 	rsb	r3, r2, #32
 808b006:	fa00 fc03 	lsl.w	ip, r0, r3
 808b00a:	fa20 f002 	lsr.w	r0, r0, r2
 808b00e:	fa01 fe03 	lsl.w	lr, r1, r3
 808b012:	ea40 000e 	orr.w	r0, r0, lr
 808b016:	fa21 f102 	lsr.w	r1, r1, r2
 808b01a:	4414      	add	r4, r2
 808b01c:	e6bd      	b.n	808ad9a <__adddf3+0xe6>
 808b01e:	bf00      	nop

0808b020 <__aeabi_dmul>:
 808b020:	b570      	push	{r4, r5, r6, lr}
 808b022:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808b026:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808b02a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808b02e:	bf1d      	ittte	ne
 808b030:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808b034:	ea94 0f0c 	teqne	r4, ip
 808b038:	ea95 0f0c 	teqne	r5, ip
 808b03c:	f000 f8de 	bleq	808b1fc <__aeabi_dmul+0x1dc>
 808b040:	442c      	add	r4, r5
 808b042:	ea81 0603 	eor.w	r6, r1, r3
 808b046:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808b04a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808b04e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808b052:	bf18      	it	ne
 808b054:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808b058:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808b05c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808b060:	d038      	beq.n	808b0d4 <__aeabi_dmul+0xb4>
 808b062:	fba0 ce02 	umull	ip, lr, r0, r2
 808b066:	f04f 0500 	mov.w	r5, #0
 808b06a:	fbe1 e502 	umlal	lr, r5, r1, r2
 808b06e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808b072:	fbe0 e503 	umlal	lr, r5, r0, r3
 808b076:	f04f 0600 	mov.w	r6, #0
 808b07a:	fbe1 5603 	umlal	r5, r6, r1, r3
 808b07e:	f09c 0f00 	teq	ip, #0
 808b082:	bf18      	it	ne
 808b084:	f04e 0e01 	orrne.w	lr, lr, #1
 808b088:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808b08c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808b090:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808b094:	d204      	bcs.n	808b0a0 <__aeabi_dmul+0x80>
 808b096:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808b09a:	416d      	adcs	r5, r5
 808b09c:	eb46 0606 	adc.w	r6, r6, r6
 808b0a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808b0a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808b0a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808b0ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808b0b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808b0b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808b0b8:	bf88      	it	hi
 808b0ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808b0be:	d81e      	bhi.n	808b0fe <__aeabi_dmul+0xde>
 808b0c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808b0c4:	bf08      	it	eq
 808b0c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808b0ca:	f150 0000 	adcs.w	r0, r0, #0
 808b0ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808b0d2:	bd70      	pop	{r4, r5, r6, pc}
 808b0d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808b0d8:	ea46 0101 	orr.w	r1, r6, r1
 808b0dc:	ea40 0002 	orr.w	r0, r0, r2
 808b0e0:	ea81 0103 	eor.w	r1, r1, r3
 808b0e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808b0e8:	bfc2      	ittt	gt
 808b0ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 808b0ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808b0f2:	bd70      	popgt	{r4, r5, r6, pc}
 808b0f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808b0f8:	f04f 0e00 	mov.w	lr, #0
 808b0fc:	3c01      	subs	r4, #1
 808b0fe:	f300 80ab 	bgt.w	808b258 <__aeabi_dmul+0x238>
 808b102:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808b106:	bfde      	ittt	le
 808b108:	2000      	movle	r0, #0
 808b10a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808b10e:	bd70      	pople	{r4, r5, r6, pc}
 808b110:	f1c4 0400 	rsb	r4, r4, #0
 808b114:	3c20      	subs	r4, #32
 808b116:	da35      	bge.n	808b184 <__aeabi_dmul+0x164>
 808b118:	340c      	adds	r4, #12
 808b11a:	dc1b      	bgt.n	808b154 <__aeabi_dmul+0x134>
 808b11c:	f104 0414 	add.w	r4, r4, #20
 808b120:	f1c4 0520 	rsb	r5, r4, #32
 808b124:	fa00 f305 	lsl.w	r3, r0, r5
 808b128:	fa20 f004 	lsr.w	r0, r0, r4
 808b12c:	fa01 f205 	lsl.w	r2, r1, r5
 808b130:	ea40 0002 	orr.w	r0, r0, r2
 808b134:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808b138:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808b13c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808b140:	fa21 f604 	lsr.w	r6, r1, r4
 808b144:	eb42 0106 	adc.w	r1, r2, r6
 808b148:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808b14c:	bf08      	it	eq
 808b14e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808b152:	bd70      	pop	{r4, r5, r6, pc}
 808b154:	f1c4 040c 	rsb	r4, r4, #12
 808b158:	f1c4 0520 	rsb	r5, r4, #32
 808b15c:	fa00 f304 	lsl.w	r3, r0, r4
 808b160:	fa20 f005 	lsr.w	r0, r0, r5
 808b164:	fa01 f204 	lsl.w	r2, r1, r4
 808b168:	ea40 0002 	orr.w	r0, r0, r2
 808b16c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808b170:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808b174:	f141 0100 	adc.w	r1, r1, #0
 808b178:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808b17c:	bf08      	it	eq
 808b17e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808b182:	bd70      	pop	{r4, r5, r6, pc}
 808b184:	f1c4 0520 	rsb	r5, r4, #32
 808b188:	fa00 f205 	lsl.w	r2, r0, r5
 808b18c:	ea4e 0e02 	orr.w	lr, lr, r2
 808b190:	fa20 f304 	lsr.w	r3, r0, r4
 808b194:	fa01 f205 	lsl.w	r2, r1, r5
 808b198:	ea43 0302 	orr.w	r3, r3, r2
 808b19c:	fa21 f004 	lsr.w	r0, r1, r4
 808b1a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808b1a4:	fa21 f204 	lsr.w	r2, r1, r4
 808b1a8:	ea20 0002 	bic.w	r0, r0, r2
 808b1ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808b1b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808b1b4:	bf08      	it	eq
 808b1b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808b1ba:	bd70      	pop	{r4, r5, r6, pc}
 808b1bc:	f094 0f00 	teq	r4, #0
 808b1c0:	d10f      	bne.n	808b1e2 <__aeabi_dmul+0x1c2>
 808b1c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808b1c6:	0040      	lsls	r0, r0, #1
 808b1c8:	eb41 0101 	adc.w	r1, r1, r1
 808b1cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808b1d0:	bf08      	it	eq
 808b1d2:	3c01      	subeq	r4, #1
 808b1d4:	d0f7      	beq.n	808b1c6 <__aeabi_dmul+0x1a6>
 808b1d6:	ea41 0106 	orr.w	r1, r1, r6
 808b1da:	f095 0f00 	teq	r5, #0
 808b1de:	bf18      	it	ne
 808b1e0:	4770      	bxne	lr
 808b1e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808b1e6:	0052      	lsls	r2, r2, #1
 808b1e8:	eb43 0303 	adc.w	r3, r3, r3
 808b1ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808b1f0:	bf08      	it	eq
 808b1f2:	3d01      	subeq	r5, #1
 808b1f4:	d0f7      	beq.n	808b1e6 <__aeabi_dmul+0x1c6>
 808b1f6:	ea43 0306 	orr.w	r3, r3, r6
 808b1fa:	4770      	bx	lr
 808b1fc:	ea94 0f0c 	teq	r4, ip
 808b200:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808b204:	bf18      	it	ne
 808b206:	ea95 0f0c 	teqne	r5, ip
 808b20a:	d00c      	beq.n	808b226 <__aeabi_dmul+0x206>
 808b20c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808b210:	bf18      	it	ne
 808b212:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808b216:	d1d1      	bne.n	808b1bc <__aeabi_dmul+0x19c>
 808b218:	ea81 0103 	eor.w	r1, r1, r3
 808b21c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808b220:	f04f 0000 	mov.w	r0, #0
 808b224:	bd70      	pop	{r4, r5, r6, pc}
 808b226:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808b22a:	bf06      	itte	eq
 808b22c:	4610      	moveq	r0, r2
 808b22e:	4619      	moveq	r1, r3
 808b230:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808b234:	d019      	beq.n	808b26a <__aeabi_dmul+0x24a>
 808b236:	ea94 0f0c 	teq	r4, ip
 808b23a:	d102      	bne.n	808b242 <__aeabi_dmul+0x222>
 808b23c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808b240:	d113      	bne.n	808b26a <__aeabi_dmul+0x24a>
 808b242:	ea95 0f0c 	teq	r5, ip
 808b246:	d105      	bne.n	808b254 <__aeabi_dmul+0x234>
 808b248:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808b24c:	bf1c      	itt	ne
 808b24e:	4610      	movne	r0, r2
 808b250:	4619      	movne	r1, r3
 808b252:	d10a      	bne.n	808b26a <__aeabi_dmul+0x24a>
 808b254:	ea81 0103 	eor.w	r1, r1, r3
 808b258:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808b25c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808b260:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808b264:	f04f 0000 	mov.w	r0, #0
 808b268:	bd70      	pop	{r4, r5, r6, pc}
 808b26a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808b26e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808b272:	bd70      	pop	{r4, r5, r6, pc}

0808b274 <__aeabi_ddiv>:
 808b274:	b570      	push	{r4, r5, r6, lr}
 808b276:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808b27a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808b27e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808b282:	bf1d      	ittte	ne
 808b284:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808b288:	ea94 0f0c 	teqne	r4, ip
 808b28c:	ea95 0f0c 	teqne	r5, ip
 808b290:	f000 f8a7 	bleq	808b3e2 <__aeabi_ddiv+0x16e>
 808b294:	eba4 0405 	sub.w	r4, r4, r5
 808b298:	ea81 0e03 	eor.w	lr, r1, r3
 808b29c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808b2a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808b2a4:	f000 8088 	beq.w	808b3b8 <__aeabi_ddiv+0x144>
 808b2a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808b2ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808b2b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808b2b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808b2b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808b2bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808b2c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808b2c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808b2c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808b2cc:	429d      	cmp	r5, r3
 808b2ce:	bf08      	it	eq
 808b2d0:	4296      	cmpeq	r6, r2
 808b2d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808b2d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808b2da:	d202      	bcs.n	808b2e2 <__aeabi_ddiv+0x6e>
 808b2dc:	085b      	lsrs	r3, r3, #1
 808b2de:	ea4f 0232 	mov.w	r2, r2, rrx
 808b2e2:	1ab6      	subs	r6, r6, r2
 808b2e4:	eb65 0503 	sbc.w	r5, r5, r3
 808b2e8:	085b      	lsrs	r3, r3, #1
 808b2ea:	ea4f 0232 	mov.w	r2, r2, rrx
 808b2ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808b2f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808b2f6:	ebb6 0e02 	subs.w	lr, r6, r2
 808b2fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b2fe:	bf22      	ittt	cs
 808b300:	1ab6      	subcs	r6, r6, r2
 808b302:	4675      	movcs	r5, lr
 808b304:	ea40 000c 	orrcs.w	r0, r0, ip
 808b308:	085b      	lsrs	r3, r3, #1
 808b30a:	ea4f 0232 	mov.w	r2, r2, rrx
 808b30e:	ebb6 0e02 	subs.w	lr, r6, r2
 808b312:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b316:	bf22      	ittt	cs
 808b318:	1ab6      	subcs	r6, r6, r2
 808b31a:	4675      	movcs	r5, lr
 808b31c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808b320:	085b      	lsrs	r3, r3, #1
 808b322:	ea4f 0232 	mov.w	r2, r2, rrx
 808b326:	ebb6 0e02 	subs.w	lr, r6, r2
 808b32a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b32e:	bf22      	ittt	cs
 808b330:	1ab6      	subcs	r6, r6, r2
 808b332:	4675      	movcs	r5, lr
 808b334:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808b338:	085b      	lsrs	r3, r3, #1
 808b33a:	ea4f 0232 	mov.w	r2, r2, rrx
 808b33e:	ebb6 0e02 	subs.w	lr, r6, r2
 808b342:	eb75 0e03 	sbcs.w	lr, r5, r3
 808b346:	bf22      	ittt	cs
 808b348:	1ab6      	subcs	r6, r6, r2
 808b34a:	4675      	movcs	r5, lr
 808b34c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808b350:	ea55 0e06 	orrs.w	lr, r5, r6
 808b354:	d018      	beq.n	808b388 <__aeabi_ddiv+0x114>
 808b356:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808b35a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808b35e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808b362:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808b366:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808b36a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808b36e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808b372:	d1c0      	bne.n	808b2f6 <__aeabi_ddiv+0x82>
 808b374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808b378:	d10b      	bne.n	808b392 <__aeabi_ddiv+0x11e>
 808b37a:	ea41 0100 	orr.w	r1, r1, r0
 808b37e:	f04f 0000 	mov.w	r0, #0
 808b382:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808b386:	e7b6      	b.n	808b2f6 <__aeabi_ddiv+0x82>
 808b388:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808b38c:	bf04      	itt	eq
 808b38e:	4301      	orreq	r1, r0
 808b390:	2000      	moveq	r0, #0
 808b392:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808b396:	bf88      	it	hi
 808b398:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808b39c:	f63f aeaf 	bhi.w	808b0fe <__aeabi_dmul+0xde>
 808b3a0:	ebb5 0c03 	subs.w	ip, r5, r3
 808b3a4:	bf04      	itt	eq
 808b3a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 808b3aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808b3ae:	f150 0000 	adcs.w	r0, r0, #0
 808b3b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808b3b6:	bd70      	pop	{r4, r5, r6, pc}
 808b3b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808b3bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808b3c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808b3c4:	bfc2      	ittt	gt
 808b3c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 808b3ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808b3ce:	bd70      	popgt	{r4, r5, r6, pc}
 808b3d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808b3d4:	f04f 0e00 	mov.w	lr, #0
 808b3d8:	3c01      	subs	r4, #1
 808b3da:	e690      	b.n	808b0fe <__aeabi_dmul+0xde>
 808b3dc:	ea45 0e06 	orr.w	lr, r5, r6
 808b3e0:	e68d      	b.n	808b0fe <__aeabi_dmul+0xde>
 808b3e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808b3e6:	ea94 0f0c 	teq	r4, ip
 808b3ea:	bf08      	it	eq
 808b3ec:	ea95 0f0c 	teqeq	r5, ip
 808b3f0:	f43f af3b 	beq.w	808b26a <__aeabi_dmul+0x24a>
 808b3f4:	ea94 0f0c 	teq	r4, ip
 808b3f8:	d10a      	bne.n	808b410 <__aeabi_ddiv+0x19c>
 808b3fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808b3fe:	f47f af34 	bne.w	808b26a <__aeabi_dmul+0x24a>
 808b402:	ea95 0f0c 	teq	r5, ip
 808b406:	f47f af25 	bne.w	808b254 <__aeabi_dmul+0x234>
 808b40a:	4610      	mov	r0, r2
 808b40c:	4619      	mov	r1, r3
 808b40e:	e72c      	b.n	808b26a <__aeabi_dmul+0x24a>
 808b410:	ea95 0f0c 	teq	r5, ip
 808b414:	d106      	bne.n	808b424 <__aeabi_ddiv+0x1b0>
 808b416:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808b41a:	f43f aefd 	beq.w	808b218 <__aeabi_dmul+0x1f8>
 808b41e:	4610      	mov	r0, r2
 808b420:	4619      	mov	r1, r3
 808b422:	e722      	b.n	808b26a <__aeabi_dmul+0x24a>
 808b424:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808b428:	bf18      	it	ne
 808b42a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808b42e:	f47f aec5 	bne.w	808b1bc <__aeabi_dmul+0x19c>
 808b432:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808b436:	f47f af0d 	bne.w	808b254 <__aeabi_dmul+0x234>
 808b43a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808b43e:	f47f aeeb 	bne.w	808b218 <__aeabi_dmul+0x1f8>
 808b442:	e712      	b.n	808b26a <__aeabi_dmul+0x24a>

0808b444 <__gedf2>:
 808b444:	f04f 3cff 	mov.w	ip, #4294967295
 808b448:	e006      	b.n	808b458 <__cmpdf2+0x4>
 808b44a:	bf00      	nop

0808b44c <__ledf2>:
 808b44c:	f04f 0c01 	mov.w	ip, #1
 808b450:	e002      	b.n	808b458 <__cmpdf2+0x4>
 808b452:	bf00      	nop

0808b454 <__cmpdf2>:
 808b454:	f04f 0c01 	mov.w	ip, #1
 808b458:	f84d cd04 	str.w	ip, [sp, #-4]!
 808b45c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808b460:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b464:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808b468:	bf18      	it	ne
 808b46a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808b46e:	d01b      	beq.n	808b4a8 <__cmpdf2+0x54>
 808b470:	b001      	add	sp, #4
 808b472:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808b476:	bf0c      	ite	eq
 808b478:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808b47c:	ea91 0f03 	teqne	r1, r3
 808b480:	bf02      	ittt	eq
 808b482:	ea90 0f02 	teqeq	r0, r2
 808b486:	2000      	moveq	r0, #0
 808b488:	4770      	bxeq	lr
 808b48a:	f110 0f00 	cmn.w	r0, #0
 808b48e:	ea91 0f03 	teq	r1, r3
 808b492:	bf58      	it	pl
 808b494:	4299      	cmppl	r1, r3
 808b496:	bf08      	it	eq
 808b498:	4290      	cmpeq	r0, r2
 808b49a:	bf2c      	ite	cs
 808b49c:	17d8      	asrcs	r0, r3, #31
 808b49e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808b4a2:	f040 0001 	orr.w	r0, r0, #1
 808b4a6:	4770      	bx	lr
 808b4a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808b4ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b4b0:	d102      	bne.n	808b4b8 <__cmpdf2+0x64>
 808b4b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808b4b6:	d107      	bne.n	808b4c8 <__cmpdf2+0x74>
 808b4b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808b4bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b4c0:	d1d6      	bne.n	808b470 <__cmpdf2+0x1c>
 808b4c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808b4c6:	d0d3      	beq.n	808b470 <__cmpdf2+0x1c>
 808b4c8:	f85d 0b04 	ldr.w	r0, [sp], #4
 808b4cc:	4770      	bx	lr
 808b4ce:	bf00      	nop

0808b4d0 <__aeabi_cdrcmple>:
 808b4d0:	4684      	mov	ip, r0
 808b4d2:	4610      	mov	r0, r2
 808b4d4:	4662      	mov	r2, ip
 808b4d6:	468c      	mov	ip, r1
 808b4d8:	4619      	mov	r1, r3
 808b4da:	4663      	mov	r3, ip
 808b4dc:	e000      	b.n	808b4e0 <__aeabi_cdcmpeq>
 808b4de:	bf00      	nop

0808b4e0 <__aeabi_cdcmpeq>:
 808b4e0:	b501      	push	{r0, lr}
 808b4e2:	f7ff ffb7 	bl	808b454 <__cmpdf2>
 808b4e6:	2800      	cmp	r0, #0
 808b4e8:	bf48      	it	mi
 808b4ea:	f110 0f00 	cmnmi.w	r0, #0
 808b4ee:	bd01      	pop	{r0, pc}

0808b4f0 <__aeabi_dcmpeq>:
 808b4f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b4f4:	f7ff fff4 	bl	808b4e0 <__aeabi_cdcmpeq>
 808b4f8:	bf0c      	ite	eq
 808b4fa:	2001      	moveq	r0, #1
 808b4fc:	2000      	movne	r0, #0
 808b4fe:	f85d fb08 	ldr.w	pc, [sp], #8
 808b502:	bf00      	nop

0808b504 <__aeabi_dcmplt>:
 808b504:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b508:	f7ff ffea 	bl	808b4e0 <__aeabi_cdcmpeq>
 808b50c:	bf34      	ite	cc
 808b50e:	2001      	movcc	r0, #1
 808b510:	2000      	movcs	r0, #0
 808b512:	f85d fb08 	ldr.w	pc, [sp], #8
 808b516:	bf00      	nop

0808b518 <__aeabi_dcmple>:
 808b518:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b51c:	f7ff ffe0 	bl	808b4e0 <__aeabi_cdcmpeq>
 808b520:	bf94      	ite	ls
 808b522:	2001      	movls	r0, #1
 808b524:	2000      	movhi	r0, #0
 808b526:	f85d fb08 	ldr.w	pc, [sp], #8
 808b52a:	bf00      	nop

0808b52c <__aeabi_dcmpge>:
 808b52c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b530:	f7ff ffce 	bl	808b4d0 <__aeabi_cdrcmple>
 808b534:	bf94      	ite	ls
 808b536:	2001      	movls	r0, #1
 808b538:	2000      	movhi	r0, #0
 808b53a:	f85d fb08 	ldr.w	pc, [sp], #8
 808b53e:	bf00      	nop

0808b540 <__aeabi_dcmpgt>:
 808b540:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b544:	f7ff ffc4 	bl	808b4d0 <__aeabi_cdrcmple>
 808b548:	bf34      	ite	cc
 808b54a:	2001      	movcc	r0, #1
 808b54c:	2000      	movcs	r0, #0
 808b54e:	f85d fb08 	ldr.w	pc, [sp], #8
 808b552:	bf00      	nop

0808b554 <__aeabi_dcmpun>:
 808b554:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808b558:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b55c:	d102      	bne.n	808b564 <__aeabi_dcmpun+0x10>
 808b55e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808b562:	d10a      	bne.n	808b57a <__aeabi_dcmpun+0x26>
 808b564:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808b568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b56c:	d102      	bne.n	808b574 <__aeabi_dcmpun+0x20>
 808b56e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808b572:	d102      	bne.n	808b57a <__aeabi_dcmpun+0x26>
 808b574:	f04f 0000 	mov.w	r0, #0
 808b578:	4770      	bx	lr
 808b57a:	f04f 0001 	mov.w	r0, #1
 808b57e:	4770      	bx	lr

0808b580 <__aeabi_d2iz>:
 808b580:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808b584:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808b588:	d215      	bcs.n	808b5b6 <__aeabi_d2iz+0x36>
 808b58a:	d511      	bpl.n	808b5b0 <__aeabi_d2iz+0x30>
 808b58c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808b590:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808b594:	d912      	bls.n	808b5bc <__aeabi_d2iz+0x3c>
 808b596:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b59a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808b59e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808b5a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808b5a6:	fa23 f002 	lsr.w	r0, r3, r2
 808b5aa:	bf18      	it	ne
 808b5ac:	4240      	negne	r0, r0
 808b5ae:	4770      	bx	lr
 808b5b0:	f04f 0000 	mov.w	r0, #0
 808b5b4:	4770      	bx	lr
 808b5b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808b5ba:	d105      	bne.n	808b5c8 <__aeabi_d2iz+0x48>
 808b5bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808b5c0:	bf08      	it	eq
 808b5c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808b5c6:	4770      	bx	lr
 808b5c8:	f04f 0000 	mov.w	r0, #0
 808b5cc:	4770      	bx	lr
 808b5ce:	bf00      	nop

0808b5d0 <__aeabi_d2uiz>:
 808b5d0:	004a      	lsls	r2, r1, #1
 808b5d2:	d211      	bcs.n	808b5f8 <__aeabi_d2uiz+0x28>
 808b5d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808b5d8:	d211      	bcs.n	808b5fe <__aeabi_d2uiz+0x2e>
 808b5da:	d50d      	bpl.n	808b5f8 <__aeabi_d2uiz+0x28>
 808b5dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808b5e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808b5e4:	d40e      	bmi.n	808b604 <__aeabi_d2uiz+0x34>
 808b5e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b5ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808b5ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808b5f2:	fa23 f002 	lsr.w	r0, r3, r2
 808b5f6:	4770      	bx	lr
 808b5f8:	f04f 0000 	mov.w	r0, #0
 808b5fc:	4770      	bx	lr
 808b5fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808b602:	d102      	bne.n	808b60a <__aeabi_d2uiz+0x3a>
 808b604:	f04f 30ff 	mov.w	r0, #4294967295
 808b608:	4770      	bx	lr
 808b60a:	f04f 0000 	mov.w	r0, #0
 808b60e:	4770      	bx	lr

0808b610 <__aeabi_d2f>:
 808b610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808b614:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808b618:	bf24      	itt	cs
 808b61a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808b61e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808b622:	d90d      	bls.n	808b640 <__aeabi_d2f+0x30>
 808b624:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808b628:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808b62c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808b630:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808b634:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808b638:	bf08      	it	eq
 808b63a:	f020 0001 	biceq.w	r0, r0, #1
 808b63e:	4770      	bx	lr
 808b640:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808b644:	d121      	bne.n	808b68a <__aeabi_d2f+0x7a>
 808b646:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808b64a:	bfbc      	itt	lt
 808b64c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808b650:	4770      	bxlt	lr
 808b652:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808b656:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808b65a:	f1c2 0218 	rsb	r2, r2, #24
 808b65e:	f1c2 0c20 	rsb	ip, r2, #32
 808b662:	fa10 f30c 	lsls.w	r3, r0, ip
 808b666:	fa20 f002 	lsr.w	r0, r0, r2
 808b66a:	bf18      	it	ne
 808b66c:	f040 0001 	orrne.w	r0, r0, #1
 808b670:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b674:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808b678:	fa03 fc0c 	lsl.w	ip, r3, ip
 808b67c:	ea40 000c 	orr.w	r0, r0, ip
 808b680:	fa23 f302 	lsr.w	r3, r3, r2
 808b684:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808b688:	e7cc      	b.n	808b624 <__aeabi_d2f+0x14>
 808b68a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808b68e:	d107      	bne.n	808b6a0 <__aeabi_d2f+0x90>
 808b690:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808b694:	bf1e      	ittt	ne
 808b696:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808b69a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808b69e:	4770      	bxne	lr
 808b6a0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808b6a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808b6a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b6ac:	4770      	bx	lr
 808b6ae:	bf00      	nop

0808b6b0 <__aeabi_frsub>:
 808b6b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808b6b4:	e002      	b.n	808b6bc <__addsf3>
 808b6b6:	bf00      	nop

0808b6b8 <__aeabi_fsub>:
 808b6b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808b6bc <__addsf3>:
 808b6bc:	0042      	lsls	r2, r0, #1
 808b6be:	bf1f      	itttt	ne
 808b6c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808b6c4:	ea92 0f03 	teqne	r2, r3
 808b6c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808b6cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808b6d0:	d06a      	beq.n	808b7a8 <__addsf3+0xec>
 808b6d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808b6d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808b6da:	bfc1      	itttt	gt
 808b6dc:	18d2      	addgt	r2, r2, r3
 808b6de:	4041      	eorgt	r1, r0
 808b6e0:	4048      	eorgt	r0, r1
 808b6e2:	4041      	eorgt	r1, r0
 808b6e4:	bfb8      	it	lt
 808b6e6:	425b      	neglt	r3, r3
 808b6e8:	2b19      	cmp	r3, #25
 808b6ea:	bf88      	it	hi
 808b6ec:	4770      	bxhi	lr
 808b6ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808b6f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b6f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808b6fa:	bf18      	it	ne
 808b6fc:	4240      	negne	r0, r0
 808b6fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808b702:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808b706:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808b70a:	bf18      	it	ne
 808b70c:	4249      	negne	r1, r1
 808b70e:	ea92 0f03 	teq	r2, r3
 808b712:	d03f      	beq.n	808b794 <__addsf3+0xd8>
 808b714:	f1a2 0201 	sub.w	r2, r2, #1
 808b718:	fa41 fc03 	asr.w	ip, r1, r3
 808b71c:	eb10 000c 	adds.w	r0, r0, ip
 808b720:	f1c3 0320 	rsb	r3, r3, #32
 808b724:	fa01 f103 	lsl.w	r1, r1, r3
 808b728:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808b72c:	d502      	bpl.n	808b734 <__addsf3+0x78>
 808b72e:	4249      	negs	r1, r1
 808b730:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808b734:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808b738:	d313      	bcc.n	808b762 <__addsf3+0xa6>
 808b73a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808b73e:	d306      	bcc.n	808b74e <__addsf3+0x92>
 808b740:	0840      	lsrs	r0, r0, #1
 808b742:	ea4f 0131 	mov.w	r1, r1, rrx
 808b746:	f102 0201 	add.w	r2, r2, #1
 808b74a:	2afe      	cmp	r2, #254	; 0xfe
 808b74c:	d251      	bcs.n	808b7f2 <__addsf3+0x136>
 808b74e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808b752:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808b756:	bf08      	it	eq
 808b758:	f020 0001 	biceq.w	r0, r0, #1
 808b75c:	ea40 0003 	orr.w	r0, r0, r3
 808b760:	4770      	bx	lr
 808b762:	0049      	lsls	r1, r1, #1
 808b764:	eb40 0000 	adc.w	r0, r0, r0
 808b768:	3a01      	subs	r2, #1
 808b76a:	bf28      	it	cs
 808b76c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 808b770:	d2ed      	bcs.n	808b74e <__addsf3+0x92>
 808b772:	fab0 fc80 	clz	ip, r0
 808b776:	f1ac 0c08 	sub.w	ip, ip, #8
 808b77a:	ebb2 020c 	subs.w	r2, r2, ip
 808b77e:	fa00 f00c 	lsl.w	r0, r0, ip
 808b782:	bfaa      	itet	ge
 808b784:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808b788:	4252      	neglt	r2, r2
 808b78a:	4318      	orrge	r0, r3
 808b78c:	bfbc      	itt	lt
 808b78e:	40d0      	lsrlt	r0, r2
 808b790:	4318      	orrlt	r0, r3
 808b792:	4770      	bx	lr
 808b794:	f092 0f00 	teq	r2, #0
 808b798:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808b79c:	bf06      	itte	eq
 808b79e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808b7a2:	3201      	addeq	r2, #1
 808b7a4:	3b01      	subne	r3, #1
 808b7a6:	e7b5      	b.n	808b714 <__addsf3+0x58>
 808b7a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808b7ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808b7b0:	bf18      	it	ne
 808b7b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808b7b6:	d021      	beq.n	808b7fc <__addsf3+0x140>
 808b7b8:	ea92 0f03 	teq	r2, r3
 808b7bc:	d004      	beq.n	808b7c8 <__addsf3+0x10c>
 808b7be:	f092 0f00 	teq	r2, #0
 808b7c2:	bf08      	it	eq
 808b7c4:	4608      	moveq	r0, r1
 808b7c6:	4770      	bx	lr
 808b7c8:	ea90 0f01 	teq	r0, r1
 808b7cc:	bf1c      	itt	ne
 808b7ce:	2000      	movne	r0, #0
 808b7d0:	4770      	bxne	lr
 808b7d2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808b7d6:	d104      	bne.n	808b7e2 <__addsf3+0x126>
 808b7d8:	0040      	lsls	r0, r0, #1
 808b7da:	bf28      	it	cs
 808b7dc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808b7e0:	4770      	bx	lr
 808b7e2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808b7e6:	bf3c      	itt	cc
 808b7e8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808b7ec:	4770      	bxcc	lr
 808b7ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808b7f2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808b7f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b7fa:	4770      	bx	lr
 808b7fc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808b800:	bf16      	itet	ne
 808b802:	4608      	movne	r0, r1
 808b804:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808b808:	4601      	movne	r1, r0
 808b80a:	0242      	lsls	r2, r0, #9
 808b80c:	bf06      	itte	eq
 808b80e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808b812:	ea90 0f01 	teqeq	r0, r1
 808b816:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808b81a:	4770      	bx	lr

0808b81c <__aeabi_ui2f>:
 808b81c:	f04f 0300 	mov.w	r3, #0
 808b820:	e004      	b.n	808b82c <__aeabi_i2f+0x8>
 808b822:	bf00      	nop

0808b824 <__aeabi_i2f>:
 808b824:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808b828:	bf48      	it	mi
 808b82a:	4240      	negmi	r0, r0
 808b82c:	ea5f 0c00 	movs.w	ip, r0
 808b830:	bf08      	it	eq
 808b832:	4770      	bxeq	lr
 808b834:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808b838:	4601      	mov	r1, r0
 808b83a:	f04f 0000 	mov.w	r0, #0
 808b83e:	e01c      	b.n	808b87a <__aeabi_l2f+0x2a>

0808b840 <__aeabi_ul2f>:
 808b840:	ea50 0201 	orrs.w	r2, r0, r1
 808b844:	bf08      	it	eq
 808b846:	4770      	bxeq	lr
 808b848:	f04f 0300 	mov.w	r3, #0
 808b84c:	e00a      	b.n	808b864 <__aeabi_l2f+0x14>
 808b84e:	bf00      	nop

0808b850 <__aeabi_l2f>:
 808b850:	ea50 0201 	orrs.w	r2, r0, r1
 808b854:	bf08      	it	eq
 808b856:	4770      	bxeq	lr
 808b858:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808b85c:	d502      	bpl.n	808b864 <__aeabi_l2f+0x14>
 808b85e:	4240      	negs	r0, r0
 808b860:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808b864:	ea5f 0c01 	movs.w	ip, r1
 808b868:	bf02      	ittt	eq
 808b86a:	4684      	moveq	ip, r0
 808b86c:	4601      	moveq	r1, r0
 808b86e:	2000      	moveq	r0, #0
 808b870:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808b874:	bf08      	it	eq
 808b876:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808b87a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808b87e:	fabc f28c 	clz	r2, ip
 808b882:	3a08      	subs	r2, #8
 808b884:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808b888:	db10      	blt.n	808b8ac <__aeabi_l2f+0x5c>
 808b88a:	fa01 fc02 	lsl.w	ip, r1, r2
 808b88e:	4463      	add	r3, ip
 808b890:	fa00 fc02 	lsl.w	ip, r0, r2
 808b894:	f1c2 0220 	rsb	r2, r2, #32
 808b898:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808b89c:	fa20 f202 	lsr.w	r2, r0, r2
 808b8a0:	eb43 0002 	adc.w	r0, r3, r2
 808b8a4:	bf08      	it	eq
 808b8a6:	f020 0001 	biceq.w	r0, r0, #1
 808b8aa:	4770      	bx	lr
 808b8ac:	f102 0220 	add.w	r2, r2, #32
 808b8b0:	fa01 fc02 	lsl.w	ip, r1, r2
 808b8b4:	f1c2 0220 	rsb	r2, r2, #32
 808b8b8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808b8bc:	fa21 f202 	lsr.w	r2, r1, r2
 808b8c0:	eb43 0002 	adc.w	r0, r3, r2
 808b8c4:	bf08      	it	eq
 808b8c6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808b8ca:	4770      	bx	lr

0808b8cc <__aeabi_fmul>:
 808b8cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808b8d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808b8d4:	bf1e      	ittt	ne
 808b8d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808b8da:	ea92 0f0c 	teqne	r2, ip
 808b8de:	ea93 0f0c 	teqne	r3, ip
 808b8e2:	d06f      	beq.n	808b9c4 <__aeabi_fmul+0xf8>
 808b8e4:	441a      	add	r2, r3
 808b8e6:	ea80 0c01 	eor.w	ip, r0, r1
 808b8ea:	0240      	lsls	r0, r0, #9
 808b8ec:	bf18      	it	ne
 808b8ee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808b8f2:	d01e      	beq.n	808b932 <__aeabi_fmul+0x66>
 808b8f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808b8f8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808b8fc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808b900:	fba0 3101 	umull	r3, r1, r0, r1
 808b904:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808b908:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808b90c:	bf3e      	ittt	cc
 808b90e:	0049      	lslcc	r1, r1, #1
 808b910:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808b914:	005b      	lslcc	r3, r3, #1
 808b916:	ea40 0001 	orr.w	r0, r0, r1
 808b91a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808b91e:	2afd      	cmp	r2, #253	; 0xfd
 808b920:	d81d      	bhi.n	808b95e <__aeabi_fmul+0x92>
 808b922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808b926:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808b92a:	bf08      	it	eq
 808b92c:	f020 0001 	biceq.w	r0, r0, #1
 808b930:	4770      	bx	lr
 808b932:	f090 0f00 	teq	r0, #0
 808b936:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808b93a:	bf08      	it	eq
 808b93c:	0249      	lsleq	r1, r1, #9
 808b93e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808b942:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808b946:	3a7f      	subs	r2, #127	; 0x7f
 808b948:	bfc2      	ittt	gt
 808b94a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808b94e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808b952:	4770      	bxgt	lr
 808b954:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b958:	f04f 0300 	mov.w	r3, #0
 808b95c:	3a01      	subs	r2, #1
 808b95e:	dc5d      	bgt.n	808ba1c <__aeabi_fmul+0x150>
 808b960:	f112 0f19 	cmn.w	r2, #25
 808b964:	bfdc      	itt	le
 808b966:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808b96a:	4770      	bxle	lr
 808b96c:	f1c2 0200 	rsb	r2, r2, #0
 808b970:	0041      	lsls	r1, r0, #1
 808b972:	fa21 f102 	lsr.w	r1, r1, r2
 808b976:	f1c2 0220 	rsb	r2, r2, #32
 808b97a:	fa00 fc02 	lsl.w	ip, r0, r2
 808b97e:	ea5f 0031 	movs.w	r0, r1, rrx
 808b982:	f140 0000 	adc.w	r0, r0, #0
 808b986:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808b98a:	bf08      	it	eq
 808b98c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808b990:	4770      	bx	lr
 808b992:	f092 0f00 	teq	r2, #0
 808b996:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808b99a:	bf02      	ittt	eq
 808b99c:	0040      	lsleq	r0, r0, #1
 808b99e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808b9a2:	3a01      	subeq	r2, #1
 808b9a4:	d0f9      	beq.n	808b99a <__aeabi_fmul+0xce>
 808b9a6:	ea40 000c 	orr.w	r0, r0, ip
 808b9aa:	f093 0f00 	teq	r3, #0
 808b9ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808b9b2:	bf02      	ittt	eq
 808b9b4:	0049      	lsleq	r1, r1, #1
 808b9b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808b9ba:	3b01      	subeq	r3, #1
 808b9bc:	d0f9      	beq.n	808b9b2 <__aeabi_fmul+0xe6>
 808b9be:	ea41 010c 	orr.w	r1, r1, ip
 808b9c2:	e78f      	b.n	808b8e4 <__aeabi_fmul+0x18>
 808b9c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808b9c8:	ea92 0f0c 	teq	r2, ip
 808b9cc:	bf18      	it	ne
 808b9ce:	ea93 0f0c 	teqne	r3, ip
 808b9d2:	d00a      	beq.n	808b9ea <__aeabi_fmul+0x11e>
 808b9d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808b9d8:	bf18      	it	ne
 808b9da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808b9de:	d1d8      	bne.n	808b992 <__aeabi_fmul+0xc6>
 808b9e0:	ea80 0001 	eor.w	r0, r0, r1
 808b9e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808b9e8:	4770      	bx	lr
 808b9ea:	f090 0f00 	teq	r0, #0
 808b9ee:	bf17      	itett	ne
 808b9f0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808b9f4:	4608      	moveq	r0, r1
 808b9f6:	f091 0f00 	teqne	r1, #0
 808b9fa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808b9fe:	d014      	beq.n	808ba2a <__aeabi_fmul+0x15e>
 808ba00:	ea92 0f0c 	teq	r2, ip
 808ba04:	d101      	bne.n	808ba0a <__aeabi_fmul+0x13e>
 808ba06:	0242      	lsls	r2, r0, #9
 808ba08:	d10f      	bne.n	808ba2a <__aeabi_fmul+0x15e>
 808ba0a:	ea93 0f0c 	teq	r3, ip
 808ba0e:	d103      	bne.n	808ba18 <__aeabi_fmul+0x14c>
 808ba10:	024b      	lsls	r3, r1, #9
 808ba12:	bf18      	it	ne
 808ba14:	4608      	movne	r0, r1
 808ba16:	d108      	bne.n	808ba2a <__aeabi_fmul+0x15e>
 808ba18:	ea80 0001 	eor.w	r0, r0, r1
 808ba1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808ba20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808ba24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808ba28:	4770      	bx	lr
 808ba2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808ba2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808ba32:	4770      	bx	lr

0808ba34 <__aeabi_fdiv>:
 808ba34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808ba38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808ba3c:	bf1e      	ittt	ne
 808ba3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808ba42:	ea92 0f0c 	teqne	r2, ip
 808ba46:	ea93 0f0c 	teqne	r3, ip
 808ba4a:	d069      	beq.n	808bb20 <__aeabi_fdiv+0xec>
 808ba4c:	eba2 0203 	sub.w	r2, r2, r3
 808ba50:	ea80 0c01 	eor.w	ip, r0, r1
 808ba54:	0249      	lsls	r1, r1, #9
 808ba56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808ba5a:	d037      	beq.n	808bacc <__aeabi_fdiv+0x98>
 808ba5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808ba60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808ba64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808ba68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808ba6c:	428b      	cmp	r3, r1
 808ba6e:	bf38      	it	cc
 808ba70:	005b      	lslcc	r3, r3, #1
 808ba72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808ba76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808ba7a:	428b      	cmp	r3, r1
 808ba7c:	bf24      	itt	cs
 808ba7e:	1a5b      	subcs	r3, r3, r1
 808ba80:	ea40 000c 	orrcs.w	r0, r0, ip
 808ba84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808ba88:	bf24      	itt	cs
 808ba8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808ba8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808ba92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808ba96:	bf24      	itt	cs
 808ba98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808ba9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808baa0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808baa4:	bf24      	itt	cs
 808baa6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808baaa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808baae:	011b      	lsls	r3, r3, #4
 808bab0:	bf18      	it	ne
 808bab2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808bab6:	d1e0      	bne.n	808ba7a <__aeabi_fdiv+0x46>
 808bab8:	2afd      	cmp	r2, #253	; 0xfd
 808baba:	f63f af50 	bhi.w	808b95e <__aeabi_fmul+0x92>
 808babe:	428b      	cmp	r3, r1
 808bac0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808bac4:	bf08      	it	eq
 808bac6:	f020 0001 	biceq.w	r0, r0, #1
 808baca:	4770      	bx	lr
 808bacc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808bad0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808bad4:	327f      	adds	r2, #127	; 0x7f
 808bad6:	bfc2      	ittt	gt
 808bad8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808badc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808bae0:	4770      	bxgt	lr
 808bae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808bae6:	f04f 0300 	mov.w	r3, #0
 808baea:	3a01      	subs	r2, #1
 808baec:	e737      	b.n	808b95e <__aeabi_fmul+0x92>
 808baee:	f092 0f00 	teq	r2, #0
 808baf2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808baf6:	bf02      	ittt	eq
 808baf8:	0040      	lsleq	r0, r0, #1
 808bafa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808bafe:	3a01      	subeq	r2, #1
 808bb00:	d0f9      	beq.n	808baf6 <__aeabi_fdiv+0xc2>
 808bb02:	ea40 000c 	orr.w	r0, r0, ip
 808bb06:	f093 0f00 	teq	r3, #0
 808bb0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808bb0e:	bf02      	ittt	eq
 808bb10:	0049      	lsleq	r1, r1, #1
 808bb12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808bb16:	3b01      	subeq	r3, #1
 808bb18:	d0f9      	beq.n	808bb0e <__aeabi_fdiv+0xda>
 808bb1a:	ea41 010c 	orr.w	r1, r1, ip
 808bb1e:	e795      	b.n	808ba4c <__aeabi_fdiv+0x18>
 808bb20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808bb24:	ea92 0f0c 	teq	r2, ip
 808bb28:	d108      	bne.n	808bb3c <__aeabi_fdiv+0x108>
 808bb2a:	0242      	lsls	r2, r0, #9
 808bb2c:	f47f af7d 	bne.w	808ba2a <__aeabi_fmul+0x15e>
 808bb30:	ea93 0f0c 	teq	r3, ip
 808bb34:	f47f af70 	bne.w	808ba18 <__aeabi_fmul+0x14c>
 808bb38:	4608      	mov	r0, r1
 808bb3a:	e776      	b.n	808ba2a <__aeabi_fmul+0x15e>
 808bb3c:	ea93 0f0c 	teq	r3, ip
 808bb40:	d104      	bne.n	808bb4c <__aeabi_fdiv+0x118>
 808bb42:	024b      	lsls	r3, r1, #9
 808bb44:	f43f af4c 	beq.w	808b9e0 <__aeabi_fmul+0x114>
 808bb48:	4608      	mov	r0, r1
 808bb4a:	e76e      	b.n	808ba2a <__aeabi_fmul+0x15e>
 808bb4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808bb50:	bf18      	it	ne
 808bb52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808bb56:	d1ca      	bne.n	808baee <__aeabi_fdiv+0xba>
 808bb58:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808bb5c:	f47f af5c 	bne.w	808ba18 <__aeabi_fmul+0x14c>
 808bb60:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808bb64:	f47f af3c 	bne.w	808b9e0 <__aeabi_fmul+0x114>
 808bb68:	e75f      	b.n	808ba2a <__aeabi_fmul+0x15e>
 808bb6a:	bf00      	nop

0808bb6c <__gesf2>:
 808bb6c:	f04f 3cff 	mov.w	ip, #4294967295
 808bb70:	e006      	b.n	808bb80 <__cmpsf2+0x4>
 808bb72:	bf00      	nop

0808bb74 <__lesf2>:
 808bb74:	f04f 0c01 	mov.w	ip, #1
 808bb78:	e002      	b.n	808bb80 <__cmpsf2+0x4>
 808bb7a:	bf00      	nop

0808bb7c <__cmpsf2>:
 808bb7c:	f04f 0c01 	mov.w	ip, #1
 808bb80:	f84d cd04 	str.w	ip, [sp, #-4]!
 808bb84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808bb88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808bb8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808bb90:	bf18      	it	ne
 808bb92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808bb96:	d011      	beq.n	808bbbc <__cmpsf2+0x40>
 808bb98:	b001      	add	sp, #4
 808bb9a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808bb9e:	bf18      	it	ne
 808bba0:	ea90 0f01 	teqne	r0, r1
 808bba4:	bf58      	it	pl
 808bba6:	ebb2 0003 	subspl.w	r0, r2, r3
 808bbaa:	bf88      	it	hi
 808bbac:	17c8      	asrhi	r0, r1, #31
 808bbae:	bf38      	it	cc
 808bbb0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808bbb4:	bf18      	it	ne
 808bbb6:	f040 0001 	orrne.w	r0, r0, #1
 808bbba:	4770      	bx	lr
 808bbbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808bbc0:	d102      	bne.n	808bbc8 <__cmpsf2+0x4c>
 808bbc2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808bbc6:	d105      	bne.n	808bbd4 <__cmpsf2+0x58>
 808bbc8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808bbcc:	d1e4      	bne.n	808bb98 <__cmpsf2+0x1c>
 808bbce:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808bbd2:	d0e1      	beq.n	808bb98 <__cmpsf2+0x1c>
 808bbd4:	f85d 0b04 	ldr.w	r0, [sp], #4
 808bbd8:	4770      	bx	lr
 808bbda:	bf00      	nop

0808bbdc <__aeabi_cfrcmple>:
 808bbdc:	4684      	mov	ip, r0
 808bbde:	4608      	mov	r0, r1
 808bbe0:	4661      	mov	r1, ip
 808bbe2:	e7ff      	b.n	808bbe4 <__aeabi_cfcmpeq>

0808bbe4 <__aeabi_cfcmpeq>:
 808bbe4:	b50f      	push	{r0, r1, r2, r3, lr}
 808bbe6:	f7ff ffc9 	bl	808bb7c <__cmpsf2>
 808bbea:	2800      	cmp	r0, #0
 808bbec:	bf48      	it	mi
 808bbee:	f110 0f00 	cmnmi.w	r0, #0
 808bbf2:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808bbf4 <__aeabi_fcmpeq>:
 808bbf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808bbf8:	f7ff fff4 	bl	808bbe4 <__aeabi_cfcmpeq>
 808bbfc:	bf0c      	ite	eq
 808bbfe:	2001      	moveq	r0, #1
 808bc00:	2000      	movne	r0, #0
 808bc02:	f85d fb08 	ldr.w	pc, [sp], #8
 808bc06:	bf00      	nop

0808bc08 <__aeabi_fcmplt>:
 808bc08:	f84d ed08 	str.w	lr, [sp, #-8]!
 808bc0c:	f7ff ffea 	bl	808bbe4 <__aeabi_cfcmpeq>
 808bc10:	bf34      	ite	cc
 808bc12:	2001      	movcc	r0, #1
 808bc14:	2000      	movcs	r0, #0
 808bc16:	f85d fb08 	ldr.w	pc, [sp], #8
 808bc1a:	bf00      	nop

0808bc1c <__aeabi_fcmple>:
 808bc1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808bc20:	f7ff ffe0 	bl	808bbe4 <__aeabi_cfcmpeq>
 808bc24:	bf94      	ite	ls
 808bc26:	2001      	movls	r0, #1
 808bc28:	2000      	movhi	r0, #0
 808bc2a:	f85d fb08 	ldr.w	pc, [sp], #8
 808bc2e:	bf00      	nop

0808bc30 <__aeabi_fcmpge>:
 808bc30:	f84d ed08 	str.w	lr, [sp, #-8]!
 808bc34:	f7ff ffd2 	bl	808bbdc <__aeabi_cfrcmple>
 808bc38:	bf94      	ite	ls
 808bc3a:	2001      	movls	r0, #1
 808bc3c:	2000      	movhi	r0, #0
 808bc3e:	f85d fb08 	ldr.w	pc, [sp], #8
 808bc42:	bf00      	nop

0808bc44 <__aeabi_fcmpgt>:
 808bc44:	f84d ed08 	str.w	lr, [sp, #-8]!
 808bc48:	f7ff ffc8 	bl	808bbdc <__aeabi_cfrcmple>
 808bc4c:	bf34      	ite	cc
 808bc4e:	2001      	movcc	r0, #1
 808bc50:	2000      	movcs	r0, #0
 808bc52:	f85d fb08 	ldr.w	pc, [sp], #8
 808bc56:	bf00      	nop

0808bc58 <__aeabi_f2iz>:
 808bc58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808bc5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808bc60:	d30f      	bcc.n	808bc82 <__aeabi_f2iz+0x2a>
 808bc62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808bc66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808bc6a:	d90d      	bls.n	808bc88 <__aeabi_f2iz+0x30>
 808bc6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808bc70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808bc74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808bc78:	fa23 f002 	lsr.w	r0, r3, r2
 808bc7c:	bf18      	it	ne
 808bc7e:	4240      	negne	r0, r0
 808bc80:	4770      	bx	lr
 808bc82:	f04f 0000 	mov.w	r0, #0
 808bc86:	4770      	bx	lr
 808bc88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808bc8c:	d101      	bne.n	808bc92 <__aeabi_f2iz+0x3a>
 808bc8e:	0242      	lsls	r2, r0, #9
 808bc90:	d105      	bne.n	808bc9e <__aeabi_f2iz+0x46>
 808bc92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808bc96:	bf08      	it	eq
 808bc98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808bc9c:	4770      	bx	lr
 808bc9e:	f04f 0000 	mov.w	r0, #0
 808bca2:	4770      	bx	lr

0808bca4 <__aeabi_ldivmod>:
 808bca4:	b97b      	cbnz	r3, 808bcc6 <__aeabi_ldivmod+0x22>
 808bca6:	b972      	cbnz	r2, 808bcc6 <__aeabi_ldivmod+0x22>
 808bca8:	2900      	cmp	r1, #0
 808bcaa:	bfbe      	ittt	lt
 808bcac:	2000      	movlt	r0, #0
 808bcae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808bcb2:	e006      	blt.n	808bcc2 <__aeabi_ldivmod+0x1e>
 808bcb4:	bf08      	it	eq
 808bcb6:	2800      	cmpeq	r0, #0
 808bcb8:	bf1c      	itt	ne
 808bcba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808bcbe:	f04f 30ff 	movne.w	r0, #4294967295
 808bcc2:	f000 b8a9 	b.w	808be18 <__aeabi_idiv0>
 808bcc6:	f1ad 0c08 	sub.w	ip, sp, #8
 808bcca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808bcce:	2900      	cmp	r1, #0
 808bcd0:	db09      	blt.n	808bce6 <__aeabi_ldivmod+0x42>
 808bcd2:	2b00      	cmp	r3, #0
 808bcd4:	db1a      	blt.n	808bd0c <__aeabi_ldivmod+0x68>
 808bcd6:	f7f4 f9a3 	bl	8080020 <__udivmoddi4>
 808bcda:	f8dd e004 	ldr.w	lr, [sp, #4]
 808bcde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808bce2:	b004      	add	sp, #16
 808bce4:	4770      	bx	lr
 808bce6:	4240      	negs	r0, r0
 808bce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808bcec:	2b00      	cmp	r3, #0
 808bcee:	db1b      	blt.n	808bd28 <__aeabi_ldivmod+0x84>
 808bcf0:	f7f4 f996 	bl	8080020 <__udivmoddi4>
 808bcf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 808bcf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808bcfc:	b004      	add	sp, #16
 808bcfe:	4240      	negs	r0, r0
 808bd00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808bd04:	4252      	negs	r2, r2
 808bd06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808bd0a:	4770      	bx	lr
 808bd0c:	4252      	negs	r2, r2
 808bd0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808bd12:	f7f4 f985 	bl	8080020 <__udivmoddi4>
 808bd16:	f8dd e004 	ldr.w	lr, [sp, #4]
 808bd1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808bd1e:	b004      	add	sp, #16
 808bd20:	4240      	negs	r0, r0
 808bd22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808bd26:	4770      	bx	lr
 808bd28:	4252      	negs	r2, r2
 808bd2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808bd2e:	f7f4 f977 	bl	8080020 <__udivmoddi4>
 808bd32:	f8dd e004 	ldr.w	lr, [sp, #4]
 808bd36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808bd3a:	b004      	add	sp, #16
 808bd3c:	4252      	negs	r2, r2
 808bd3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808bd42:	4770      	bx	lr

0808bd44 <__aeabi_uldivmod>:
 808bd44:	b953      	cbnz	r3, 808bd5c <__aeabi_uldivmod+0x18>
 808bd46:	b94a      	cbnz	r2, 808bd5c <__aeabi_uldivmod+0x18>
 808bd48:	2900      	cmp	r1, #0
 808bd4a:	bf08      	it	eq
 808bd4c:	2800      	cmpeq	r0, #0
 808bd4e:	bf1c      	itt	ne
 808bd50:	f04f 31ff 	movne.w	r1, #4294967295
 808bd54:	f04f 30ff 	movne.w	r0, #4294967295
 808bd58:	f000 b85e 	b.w	808be18 <__aeabi_idiv0>
 808bd5c:	f1ad 0c08 	sub.w	ip, sp, #8
 808bd60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808bd64:	f7f4 f95c 	bl	8080020 <__udivmoddi4>
 808bd68:	f8dd e004 	ldr.w	lr, [sp, #4]
 808bd6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808bd70:	b004      	add	sp, #16
 808bd72:	4770      	bx	lr

0808bd74 <__aeabi_f2lz>:
 808bd74:	b510      	push	{r4, lr}
 808bd76:	2100      	movs	r1, #0
 808bd78:	4604      	mov	r4, r0
 808bd7a:	f7ff ff45 	bl	808bc08 <__aeabi_fcmplt>
 808bd7e:	b920      	cbnz	r0, 808bd8a <__aeabi_f2lz+0x16>
 808bd80:	4620      	mov	r0, r4
 808bd82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808bd86:	f000 b809 	b.w	808bd9c <__aeabi_f2ulz>
 808bd8a:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 808bd8e:	f000 f805 	bl	808bd9c <__aeabi_f2ulz>
 808bd92:	4240      	negs	r0, r0
 808bd94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808bd98:	bd10      	pop	{r4, pc}
 808bd9a:	bf00      	nop

0808bd9c <__aeabi_f2ulz>:
 808bd9c:	b5d0      	push	{r4, r6, r7, lr}
 808bd9e:	f7ff f8e7 	bl	808af70 <__aeabi_f2d>
 808bda2:	2200      	movs	r2, #0
 808bda4:	4b0b      	ldr	r3, [pc, #44]	; (808bdd4 <__aeabi_f2ulz+0x38>)
 808bda6:	4606      	mov	r6, r0
 808bda8:	460f      	mov	r7, r1
 808bdaa:	f7ff f939 	bl	808b020 <__aeabi_dmul>
 808bdae:	f7ff fc0f 	bl	808b5d0 <__aeabi_d2uiz>
 808bdb2:	4604      	mov	r4, r0
 808bdb4:	f7ff f8ba 	bl	808af2c <__aeabi_ui2d>
 808bdb8:	2200      	movs	r2, #0
 808bdba:	4b07      	ldr	r3, [pc, #28]	; (808bdd8 <__aeabi_f2ulz+0x3c>)
 808bdbc:	f7ff f930 	bl	808b020 <__aeabi_dmul>
 808bdc0:	4602      	mov	r2, r0
 808bdc2:	460b      	mov	r3, r1
 808bdc4:	4630      	mov	r0, r6
 808bdc6:	4639      	mov	r1, r7
 808bdc8:	f7fe ff72 	bl	808acb0 <__aeabi_dsub>
 808bdcc:	f7ff fc00 	bl	808b5d0 <__aeabi_d2uiz>
 808bdd0:	4621      	mov	r1, r4
 808bdd2:	bdd0      	pop	{r4, r6, r7, pc}
 808bdd4:	3df00000 	.word	0x3df00000
 808bdd8:	41f00000 	.word	0x41f00000

0808bddc <__aeabi_d2ulz>:
 808bddc:	b5d0      	push	{r4, r6, r7, lr}
 808bdde:	2200      	movs	r2, #0
 808bde0:	4b0b      	ldr	r3, [pc, #44]	; (808be10 <__aeabi_d2ulz+0x34>)
 808bde2:	4606      	mov	r6, r0
 808bde4:	460f      	mov	r7, r1
 808bde6:	f7ff f91b 	bl	808b020 <__aeabi_dmul>
 808bdea:	f7ff fbf1 	bl	808b5d0 <__aeabi_d2uiz>
 808bdee:	4604      	mov	r4, r0
 808bdf0:	f7ff f89c 	bl	808af2c <__aeabi_ui2d>
 808bdf4:	2200      	movs	r2, #0
 808bdf6:	4b07      	ldr	r3, [pc, #28]	; (808be14 <__aeabi_d2ulz+0x38>)
 808bdf8:	f7ff f912 	bl	808b020 <__aeabi_dmul>
 808bdfc:	4602      	mov	r2, r0
 808bdfe:	460b      	mov	r3, r1
 808be00:	4630      	mov	r0, r6
 808be02:	4639      	mov	r1, r7
 808be04:	f7fe ff54 	bl	808acb0 <__aeabi_dsub>
 808be08:	f7ff fbe2 	bl	808b5d0 <__aeabi_d2uiz>
 808be0c:	4621      	mov	r1, r4
 808be0e:	bdd0      	pop	{r4, r6, r7, pc}
 808be10:	3df00000 	.word	0x3df00000
 808be14:	41f00000 	.word	0x41f00000

0808be18 <__aeabi_idiv0>:
 808be18:	4770      	bx	lr
 808be1a:	bf00      	nop

0808be1c <asctime_r>:
 808be1c:	b510      	push	{r4, lr}
 808be1e:	460c      	mov	r4, r1
 808be20:	6941      	ldr	r1, [r0, #20]
 808be22:	b086      	sub	sp, #24
 808be24:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808be28:	6903      	ldr	r3, [r0, #16]
 808be2a:	6982      	ldr	r2, [r0, #24]
 808be2c:	9104      	str	r1, [sp, #16]
 808be2e:	6801      	ldr	r1, [r0, #0]
 808be30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808be34:	9103      	str	r1, [sp, #12]
 808be36:	6841      	ldr	r1, [r0, #4]
 808be38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808be3c:	9102      	str	r1, [sp, #8]
 808be3e:	6881      	ldr	r1, [r0, #8]
 808be40:	9101      	str	r1, [sp, #4]
 808be42:	68c1      	ldr	r1, [r0, #12]
 808be44:	4620      	mov	r0, r4
 808be46:	9100      	str	r1, [sp, #0]
 808be48:	4904      	ldr	r1, [pc, #16]	; (808be5c <asctime_r+0x40>)
 808be4a:	440b      	add	r3, r1
 808be4c:	4904      	ldr	r1, [pc, #16]	; (808be60 <asctime_r+0x44>)
 808be4e:	440a      	add	r2, r1
 808be50:	4904      	ldr	r1, [pc, #16]	; (808be64 <asctime_r+0x48>)
 808be52:	f7fc fd9f 	bl	8088994 <siprintf>
 808be56:	4620      	mov	r0, r4
 808be58:	b006      	add	sp, #24
 808be5a:	bd10      	pop	{r4, pc}
 808be5c:	08090242 	.word	0x08090242
 808be60:	0809022d 	.word	0x0809022d
 808be64:	0809020d 	.word	0x0809020d

0808be68 <atof>:
 808be68:	2100      	movs	r1, #0
 808be6a:	f000 bf05 	b.w	808cc78 <strtod>

0808be6e <atol>:
 808be6e:	220a      	movs	r2, #10
 808be70:	2100      	movs	r1, #0
 808be72:	f000 bf87 	b.w	808cd84 <strtol>
	...

0808be78 <__cxa_atexit>:
 808be78:	b510      	push	{r4, lr}
 808be7a:	4604      	mov	r4, r0
 808be7c:	4804      	ldr	r0, [pc, #16]	; (808be90 <__cxa_atexit+0x18>)
 808be7e:	4613      	mov	r3, r2
 808be80:	b120      	cbz	r0, 808be8c <__cxa_atexit+0x14>
 808be82:	460a      	mov	r2, r1
 808be84:	2002      	movs	r0, #2
 808be86:	4621      	mov	r1, r4
 808be88:	f3af 8000 	nop.w
 808be8c:	bd10      	pop	{r4, pc}
 808be8e:	bf00      	nop
 808be90:	00000000 	.word	0x00000000

0808be94 <ldiv>:
 808be94:	b510      	push	{r4, lr}
 808be96:	fb91 f4f2 	sdiv	r4, r1, r2
 808be9a:	2900      	cmp	r1, #0
 808be9c:	fb02 1314 	mls	r3, r2, r4, r1
 808bea0:	db06      	blt.n	808beb0 <ldiv+0x1c>
 808bea2:	2b00      	cmp	r3, #0
 808bea4:	da01      	bge.n	808beaa <ldiv+0x16>
 808bea6:	3401      	adds	r4, #1
 808bea8:	1a9b      	subs	r3, r3, r2
 808beaa:	e9c0 4300 	strd	r4, r3, [r0]
 808beae:	bd10      	pop	{r4, pc}
 808beb0:	2b00      	cmp	r3, #0
 808beb2:	bfc4      	itt	gt
 808beb4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 808beb8:	189b      	addgt	r3, r3, r2
 808beba:	e7f6      	b.n	808beaa <ldiv+0x16>

0808bebc <memcmp>:
 808bebc:	b530      	push	{r4, r5, lr}
 808bebe:	2400      	movs	r4, #0
 808bec0:	3901      	subs	r1, #1
 808bec2:	42a2      	cmp	r2, r4
 808bec4:	d101      	bne.n	808beca <memcmp+0xe>
 808bec6:	2000      	movs	r0, #0
 808bec8:	e005      	b.n	808bed6 <memcmp+0x1a>
 808beca:	5d03      	ldrb	r3, [r0, r4]
 808becc:	3401      	adds	r4, #1
 808bece:	5d0d      	ldrb	r5, [r1, r4]
 808bed0:	42ab      	cmp	r3, r5
 808bed2:	d0f6      	beq.n	808bec2 <memcmp+0x6>
 808bed4:	1b58      	subs	r0, r3, r5
 808bed6:	bd30      	pop	{r4, r5, pc}

0808bed8 <memcpy>:
 808bed8:	440a      	add	r2, r1
 808beda:	4291      	cmp	r1, r2
 808bedc:	f100 33ff 	add.w	r3, r0, #4294967295
 808bee0:	d100      	bne.n	808bee4 <memcpy+0xc>
 808bee2:	4770      	bx	lr
 808bee4:	b510      	push	{r4, lr}
 808bee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 808beea:	4291      	cmp	r1, r2
 808beec:	f803 4f01 	strb.w	r4, [r3, #1]!
 808bef0:	d1f9      	bne.n	808bee6 <memcpy+0xe>
 808bef2:	bd10      	pop	{r4, pc}

0808bef4 <memset>:
 808bef4:	4603      	mov	r3, r0
 808bef6:	4402      	add	r2, r0
 808bef8:	4293      	cmp	r3, r2
 808befa:	d100      	bne.n	808befe <memset+0xa>
 808befc:	4770      	bx	lr
 808befe:	f803 1b01 	strb.w	r1, [r3], #1
 808bf02:	e7f9      	b.n	808bef8 <memset+0x4>

0808bf04 <srand>:
 808bf04:	b538      	push	{r3, r4, r5, lr}
 808bf06:	4b0d      	ldr	r3, [pc, #52]	; (808bf3c <srand+0x38>)
 808bf08:	4604      	mov	r4, r0
 808bf0a:	681d      	ldr	r5, [r3, #0]
 808bf0c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808bf0e:	b97b      	cbnz	r3, 808bf30 <srand+0x2c>
 808bf10:	2018      	movs	r0, #24
 808bf12:	f7fc fd1f 	bl	8088954 <malloc>
 808bf16:	4a0a      	ldr	r2, [pc, #40]	; (808bf40 <srand+0x3c>)
 808bf18:	4b0a      	ldr	r3, [pc, #40]	; (808bf44 <srand+0x40>)
 808bf1a:	63a8      	str	r0, [r5, #56]	; 0x38
 808bf1c:	e9c0 2300 	strd	r2, r3, [r0]
 808bf20:	4b09      	ldr	r3, [pc, #36]	; (808bf48 <srand+0x44>)
 808bf22:	2201      	movs	r2, #1
 808bf24:	6083      	str	r3, [r0, #8]
 808bf26:	230b      	movs	r3, #11
 808bf28:	8183      	strh	r3, [r0, #12]
 808bf2a:	2300      	movs	r3, #0
 808bf2c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808bf30:	2200      	movs	r2, #0
 808bf32:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808bf34:	611c      	str	r4, [r3, #16]
 808bf36:	615a      	str	r2, [r3, #20]
 808bf38:	bd38      	pop	{r3, r4, r5, pc}
 808bf3a:	bf00      	nop
 808bf3c:	200000d8 	.word	0x200000d8
 808bf40:	abcd330e 	.word	0xabcd330e
 808bf44:	e66d1234 	.word	0xe66d1234
 808bf48:	0005deec 	.word	0x0005deec

0808bf4c <strchr>:
 808bf4c:	4603      	mov	r3, r0
 808bf4e:	b2c9      	uxtb	r1, r1
 808bf50:	4618      	mov	r0, r3
 808bf52:	f813 2b01 	ldrb.w	r2, [r3], #1
 808bf56:	b112      	cbz	r2, 808bf5e <strchr+0x12>
 808bf58:	428a      	cmp	r2, r1
 808bf5a:	d1f9      	bne.n	808bf50 <strchr+0x4>
 808bf5c:	4770      	bx	lr
 808bf5e:	2900      	cmp	r1, #0
 808bf60:	bf18      	it	ne
 808bf62:	2000      	movne	r0, #0
 808bf64:	4770      	bx	lr

0808bf66 <strcmp>:
 808bf66:	f810 2b01 	ldrb.w	r2, [r0], #1
 808bf6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 808bf6e:	2a01      	cmp	r2, #1
 808bf70:	bf28      	it	cs
 808bf72:	429a      	cmpcs	r2, r3
 808bf74:	d0f7      	beq.n	808bf66 <strcmp>
 808bf76:	1ad0      	subs	r0, r2, r3
 808bf78:	4770      	bx	lr

0808bf7a <strcpy>:
 808bf7a:	4603      	mov	r3, r0
 808bf7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 808bf80:	f803 2b01 	strb.w	r2, [r3], #1
 808bf84:	2a00      	cmp	r2, #0
 808bf86:	d1f9      	bne.n	808bf7c <strcpy+0x2>
 808bf88:	4770      	bx	lr
	...

0808bf8c <strdup>:
 808bf8c:	4b02      	ldr	r3, [pc, #8]	; (808bf98 <strdup+0xc>)
 808bf8e:	4601      	mov	r1, r0
 808bf90:	6818      	ldr	r0, [r3, #0]
 808bf92:	f000 b803 	b.w	808bf9c <_strdup_r>
 808bf96:	bf00      	nop
 808bf98:	200000d8 	.word	0x200000d8

0808bf9c <_strdup_r>:
 808bf9c:	b570      	push	{r4, r5, r6, lr}
 808bf9e:	4604      	mov	r4, r0
 808bfa0:	4608      	mov	r0, r1
 808bfa2:	460d      	mov	r5, r1
 808bfa4:	f000 f80d 	bl	808bfc2 <strlen>
 808bfa8:	1c46      	adds	r6, r0, #1
 808bfaa:	4631      	mov	r1, r6
 808bfac:	4620      	mov	r0, r4
 808bfae:	f7fc fd11 	bl	80889d4 <_malloc_r>
 808bfb2:	4604      	mov	r4, r0
 808bfb4:	b118      	cbz	r0, 808bfbe <_strdup_r+0x22>
 808bfb6:	4632      	mov	r2, r6
 808bfb8:	4629      	mov	r1, r5
 808bfba:	f7ff ff8d 	bl	808bed8 <memcpy>
 808bfbe:	4620      	mov	r0, r4
 808bfc0:	bd70      	pop	{r4, r5, r6, pc}

0808bfc2 <strlen>:
 808bfc2:	4603      	mov	r3, r0
 808bfc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 808bfc8:	2a00      	cmp	r2, #0
 808bfca:	d1fb      	bne.n	808bfc4 <strlen+0x2>
 808bfcc:	1a18      	subs	r0, r3, r0
 808bfce:	3801      	subs	r0, #1
 808bfd0:	4770      	bx	lr

0808bfd2 <strncmp>:
 808bfd2:	b510      	push	{r4, lr}
 808bfd4:	b16a      	cbz	r2, 808bff2 <strncmp+0x20>
 808bfd6:	3901      	subs	r1, #1
 808bfd8:	1884      	adds	r4, r0, r2
 808bfda:	f810 3b01 	ldrb.w	r3, [r0], #1
 808bfde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808bfe2:	4293      	cmp	r3, r2
 808bfe4:	d103      	bne.n	808bfee <strncmp+0x1c>
 808bfe6:	42a0      	cmp	r0, r4
 808bfe8:	d001      	beq.n	808bfee <strncmp+0x1c>
 808bfea:	2b00      	cmp	r3, #0
 808bfec:	d1f5      	bne.n	808bfda <strncmp+0x8>
 808bfee:	1a98      	subs	r0, r3, r2
 808bff0:	bd10      	pop	{r4, pc}
 808bff2:	4610      	mov	r0, r2
 808bff4:	e7fc      	b.n	808bff0 <strncmp+0x1e>

0808bff6 <strncpy>:
 808bff6:	4603      	mov	r3, r0
 808bff8:	b510      	push	{r4, lr}
 808bffa:	3901      	subs	r1, #1
 808bffc:	b132      	cbz	r2, 808c00c <strncpy+0x16>
 808bffe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808c002:	3a01      	subs	r2, #1
 808c004:	f803 4b01 	strb.w	r4, [r3], #1
 808c008:	2c00      	cmp	r4, #0
 808c00a:	d1f7      	bne.n	808bffc <strncpy+0x6>
 808c00c:	2100      	movs	r1, #0
 808c00e:	441a      	add	r2, r3
 808c010:	4293      	cmp	r3, r2
 808c012:	d100      	bne.n	808c016 <strncpy+0x20>
 808c014:	bd10      	pop	{r4, pc}
 808c016:	f803 1b01 	strb.w	r1, [r3], #1
 808c01a:	e7f9      	b.n	808c010 <strncpy+0x1a>

0808c01c <strstr>:
 808c01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c01e:	780c      	ldrb	r4, [r1, #0]
 808c020:	b164      	cbz	r4, 808c03c <strstr+0x20>
 808c022:	4603      	mov	r3, r0
 808c024:	781a      	ldrb	r2, [r3, #0]
 808c026:	4618      	mov	r0, r3
 808c028:	1c5e      	adds	r6, r3, #1
 808c02a:	b90a      	cbnz	r2, 808c030 <strstr+0x14>
 808c02c:	4610      	mov	r0, r2
 808c02e:	e005      	b.n	808c03c <strstr+0x20>
 808c030:	4294      	cmp	r4, r2
 808c032:	d108      	bne.n	808c046 <strstr+0x2a>
 808c034:	460d      	mov	r5, r1
 808c036:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808c03a:	b902      	cbnz	r2, 808c03e <strstr+0x22>
 808c03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c03e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 808c042:	4297      	cmp	r7, r2
 808c044:	d0f7      	beq.n	808c036 <strstr+0x1a>
 808c046:	4633      	mov	r3, r6
 808c048:	e7ec      	b.n	808c024 <strstr+0x8>

0808c04a <sulp>:
 808c04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c04e:	460f      	mov	r7, r1
 808c050:	4690      	mov	r8, r2
 808c052:	f001 fd05 	bl	808da60 <__ulp>
 808c056:	4604      	mov	r4, r0
 808c058:	460d      	mov	r5, r1
 808c05a:	f1b8 0f00 	cmp.w	r8, #0
 808c05e:	d011      	beq.n	808c084 <sulp+0x3a>
 808c060:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808c064:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c068:	2b00      	cmp	r3, #0
 808c06a:	dd0b      	ble.n	808c084 <sulp+0x3a>
 808c06c:	2400      	movs	r4, #0
 808c06e:	051b      	lsls	r3, r3, #20
 808c070:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808c074:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808c078:	4622      	mov	r2, r4
 808c07a:	462b      	mov	r3, r5
 808c07c:	f7fe ffd0 	bl	808b020 <__aeabi_dmul>
 808c080:	4604      	mov	r4, r0
 808c082:	460d      	mov	r5, r1
 808c084:	4620      	mov	r0, r4
 808c086:	4629      	mov	r1, r5
 808c088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808c08c:	0000      	movs	r0, r0
	...

0808c090 <_strtod_l>:
 808c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c094:	469b      	mov	fp, r3
 808c096:	2300      	movs	r3, #0
 808c098:	b0a1      	sub	sp, #132	; 0x84
 808c09a:	931c      	str	r3, [sp, #112]	; 0x70
 808c09c:	4ba1      	ldr	r3, [pc, #644]	; (808c324 <_strtod_l+0x294>)
 808c09e:	4682      	mov	sl, r0
 808c0a0:	681f      	ldr	r7, [r3, #0]
 808c0a2:	460e      	mov	r6, r1
 808c0a4:	4638      	mov	r0, r7
 808c0a6:	9217      	str	r2, [sp, #92]	; 0x5c
 808c0a8:	f7ff ff8b 	bl	808bfc2 <strlen>
 808c0ac:	f04f 0800 	mov.w	r8, #0
 808c0b0:	4604      	mov	r4, r0
 808c0b2:	f04f 0900 	mov.w	r9, #0
 808c0b6:	961b      	str	r6, [sp, #108]	; 0x6c
 808c0b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c0ba:	781a      	ldrb	r2, [r3, #0]
 808c0bc:	2a2b      	cmp	r2, #43	; 0x2b
 808c0be:	d04c      	beq.n	808c15a <_strtod_l+0xca>
 808c0c0:	d83a      	bhi.n	808c138 <_strtod_l+0xa8>
 808c0c2:	2a0d      	cmp	r2, #13
 808c0c4:	d833      	bhi.n	808c12e <_strtod_l+0x9e>
 808c0c6:	2a08      	cmp	r2, #8
 808c0c8:	d833      	bhi.n	808c132 <_strtod_l+0xa2>
 808c0ca:	2a00      	cmp	r2, #0
 808c0cc:	d03d      	beq.n	808c14a <_strtod_l+0xba>
 808c0ce:	2300      	movs	r3, #0
 808c0d0:	930c      	str	r3, [sp, #48]	; 0x30
 808c0d2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 808c0d4:	782b      	ldrb	r3, [r5, #0]
 808c0d6:	2b30      	cmp	r3, #48	; 0x30
 808c0d8:	f040 80af 	bne.w	808c23a <_strtod_l+0x1aa>
 808c0dc:	786b      	ldrb	r3, [r5, #1]
 808c0de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808c0e2:	2b58      	cmp	r3, #88	; 0x58
 808c0e4:	d16c      	bne.n	808c1c0 <_strtod_l+0x130>
 808c0e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808c0e8:	4650      	mov	r0, sl
 808c0ea:	9301      	str	r3, [sp, #4]
 808c0ec:	ab1c      	add	r3, sp, #112	; 0x70
 808c0ee:	9300      	str	r3, [sp, #0]
 808c0f0:	4a8d      	ldr	r2, [pc, #564]	; (808c328 <_strtod_l+0x298>)
 808c0f2:	f8cd b008 	str.w	fp, [sp, #8]
 808c0f6:	ab1d      	add	r3, sp, #116	; 0x74
 808c0f8:	a91b      	add	r1, sp, #108	; 0x6c
 808c0fa:	f000 feb5 	bl	808ce68 <__gethex>
 808c0fe:	f010 0607 	ands.w	r6, r0, #7
 808c102:	4604      	mov	r4, r0
 808c104:	d005      	beq.n	808c112 <_strtod_l+0x82>
 808c106:	2e06      	cmp	r6, #6
 808c108:	d129      	bne.n	808c15e <_strtod_l+0xce>
 808c10a:	2300      	movs	r3, #0
 808c10c:	3501      	adds	r5, #1
 808c10e:	951b      	str	r5, [sp, #108]	; 0x6c
 808c110:	930c      	str	r3, [sp, #48]	; 0x30
 808c112:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c114:	2b00      	cmp	r3, #0
 808c116:	f040 8596 	bne.w	808cc46 <_strtod_l+0xbb6>
 808c11a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808c11c:	b1d3      	cbz	r3, 808c154 <_strtod_l+0xc4>
 808c11e:	4642      	mov	r2, r8
 808c120:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808c124:	4610      	mov	r0, r2
 808c126:	4619      	mov	r1, r3
 808c128:	b021      	add	sp, #132	; 0x84
 808c12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c12e:	2a20      	cmp	r2, #32
 808c130:	d1cd      	bne.n	808c0ce <_strtod_l+0x3e>
 808c132:	3301      	adds	r3, #1
 808c134:	931b      	str	r3, [sp, #108]	; 0x6c
 808c136:	e7bf      	b.n	808c0b8 <_strtod_l+0x28>
 808c138:	2a2d      	cmp	r2, #45	; 0x2d
 808c13a:	d1c8      	bne.n	808c0ce <_strtod_l+0x3e>
 808c13c:	2201      	movs	r2, #1
 808c13e:	920c      	str	r2, [sp, #48]	; 0x30
 808c140:	1c5a      	adds	r2, r3, #1
 808c142:	921b      	str	r2, [sp, #108]	; 0x6c
 808c144:	785b      	ldrb	r3, [r3, #1]
 808c146:	2b00      	cmp	r3, #0
 808c148:	d1c3      	bne.n	808c0d2 <_strtod_l+0x42>
 808c14a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c14c:	961b      	str	r6, [sp, #108]	; 0x6c
 808c14e:	2b00      	cmp	r3, #0
 808c150:	f040 8577 	bne.w	808cc42 <_strtod_l+0xbb2>
 808c154:	4642      	mov	r2, r8
 808c156:	464b      	mov	r3, r9
 808c158:	e7e4      	b.n	808c124 <_strtod_l+0x94>
 808c15a:	2200      	movs	r2, #0
 808c15c:	e7ef      	b.n	808c13e <_strtod_l+0xae>
 808c15e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808c160:	b13a      	cbz	r2, 808c172 <_strtod_l+0xe2>
 808c162:	2135      	movs	r1, #53	; 0x35
 808c164:	a81e      	add	r0, sp, #120	; 0x78
 808c166:	f001 fd72 	bl	808dc4e <__copybits>
 808c16a:	4650      	mov	r0, sl
 808c16c:	991c      	ldr	r1, [sp, #112]	; 0x70
 808c16e:	f001 f9ad 	bl	808d4cc <_Bfree>
 808c172:	3e01      	subs	r6, #1
 808c174:	2e05      	cmp	r6, #5
 808c176:	d807      	bhi.n	808c188 <_strtod_l+0xf8>
 808c178:	e8df f006 	tbb	[pc, r6]
 808c17c:	1d180b0e 	.word	0x1d180b0e
 808c180:	030e      	.short	0x030e
 808c182:	f04f 0900 	mov.w	r9, #0
 808c186:	46c8      	mov	r8, r9
 808c188:	0721      	lsls	r1, r4, #28
 808c18a:	d5c2      	bpl.n	808c112 <_strtod_l+0x82>
 808c18c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808c190:	e7bf      	b.n	808c112 <_strtod_l+0x82>
 808c192:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 808c196:	e7f7      	b.n	808c188 <_strtod_l+0xf8>
 808c198:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 808c19a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 808c19e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808c1a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808c1a6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808c1aa:	e7ed      	b.n	808c188 <_strtod_l+0xf8>
 808c1ac:	f04f 0800 	mov.w	r8, #0
 808c1b0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808c32c <_strtod_l+0x29c>
 808c1b4:	e7e8      	b.n	808c188 <_strtod_l+0xf8>
 808c1b6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808c1ba:	f04f 38ff 	mov.w	r8, #4294967295
 808c1be:	e7e3      	b.n	808c188 <_strtod_l+0xf8>
 808c1c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c1c2:	1c5a      	adds	r2, r3, #1
 808c1c4:	921b      	str	r2, [sp, #108]	; 0x6c
 808c1c6:	785b      	ldrb	r3, [r3, #1]
 808c1c8:	2b30      	cmp	r3, #48	; 0x30
 808c1ca:	d0f9      	beq.n	808c1c0 <_strtod_l+0x130>
 808c1cc:	2b00      	cmp	r3, #0
 808c1ce:	d0a0      	beq.n	808c112 <_strtod_l+0x82>
 808c1d0:	2301      	movs	r3, #1
 808c1d2:	9307      	str	r3, [sp, #28]
 808c1d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c1d6:	220a      	movs	r2, #10
 808c1d8:	9308      	str	r3, [sp, #32]
 808c1da:	2300      	movs	r3, #0
 808c1dc:	469b      	mov	fp, r3
 808c1de:	e9cd 3305 	strd	r3, r3, [sp, #20]
 808c1e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 808c1e4:	7805      	ldrb	r5, [r0, #0]
 808c1e6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 808c1ea:	b2d9      	uxtb	r1, r3
 808c1ec:	2909      	cmp	r1, #9
 808c1ee:	d926      	bls.n	808c23e <_strtod_l+0x1ae>
 808c1f0:	4622      	mov	r2, r4
 808c1f2:	4639      	mov	r1, r7
 808c1f4:	f7ff feed 	bl	808bfd2 <strncmp>
 808c1f8:	2800      	cmp	r0, #0
 808c1fa:	d032      	beq.n	808c262 <_strtod_l+0x1d2>
 808c1fc:	2000      	movs	r0, #0
 808c1fe:	462b      	mov	r3, r5
 808c200:	465c      	mov	r4, fp
 808c202:	4602      	mov	r2, r0
 808c204:	9004      	str	r0, [sp, #16]
 808c206:	2b65      	cmp	r3, #101	; 0x65
 808c208:	d001      	beq.n	808c20e <_strtod_l+0x17e>
 808c20a:	2b45      	cmp	r3, #69	; 0x45
 808c20c:	d113      	bne.n	808c236 <_strtod_l+0x1a6>
 808c20e:	b91c      	cbnz	r4, 808c218 <_strtod_l+0x188>
 808c210:	9b07      	ldr	r3, [sp, #28]
 808c212:	4303      	orrs	r3, r0
 808c214:	d099      	beq.n	808c14a <_strtod_l+0xba>
 808c216:	2400      	movs	r4, #0
 808c218:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 808c21a:	1c73      	adds	r3, r6, #1
 808c21c:	931b      	str	r3, [sp, #108]	; 0x6c
 808c21e:	7873      	ldrb	r3, [r6, #1]
 808c220:	2b2b      	cmp	r3, #43	; 0x2b
 808c222:	d078      	beq.n	808c316 <_strtod_l+0x286>
 808c224:	2b2d      	cmp	r3, #45	; 0x2d
 808c226:	d07b      	beq.n	808c320 <_strtod_l+0x290>
 808c228:	2700      	movs	r7, #0
 808c22a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808c22e:	2909      	cmp	r1, #9
 808c230:	f240 8082 	bls.w	808c338 <_strtod_l+0x2a8>
 808c234:	961b      	str	r6, [sp, #108]	; 0x6c
 808c236:	2500      	movs	r5, #0
 808c238:	e09e      	b.n	808c378 <_strtod_l+0x2e8>
 808c23a:	2300      	movs	r3, #0
 808c23c:	e7c9      	b.n	808c1d2 <_strtod_l+0x142>
 808c23e:	f1bb 0f08 	cmp.w	fp, #8
 808c242:	bfd5      	itete	le
 808c244:	9906      	ldrle	r1, [sp, #24]
 808c246:	9905      	ldrgt	r1, [sp, #20]
 808c248:	fb02 3301 	mlale	r3, r2, r1, r3
 808c24c:	fb02 3301 	mlagt	r3, r2, r1, r3
 808c250:	f100 0001 	add.w	r0, r0, #1
 808c254:	bfd4      	ite	le
 808c256:	9306      	strle	r3, [sp, #24]
 808c258:	9305      	strgt	r3, [sp, #20]
 808c25a:	f10b 0b01 	add.w	fp, fp, #1
 808c25e:	901b      	str	r0, [sp, #108]	; 0x6c
 808c260:	e7bf      	b.n	808c1e2 <_strtod_l+0x152>
 808c262:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c264:	191a      	adds	r2, r3, r4
 808c266:	921b      	str	r2, [sp, #108]	; 0x6c
 808c268:	5d1b      	ldrb	r3, [r3, r4]
 808c26a:	f1bb 0f00 	cmp.w	fp, #0
 808c26e:	d036      	beq.n	808c2de <_strtod_l+0x24e>
 808c270:	465c      	mov	r4, fp
 808c272:	9004      	str	r0, [sp, #16]
 808c274:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 808c278:	2a09      	cmp	r2, #9
 808c27a:	d912      	bls.n	808c2a2 <_strtod_l+0x212>
 808c27c:	2201      	movs	r2, #1
 808c27e:	e7c2      	b.n	808c206 <_strtod_l+0x176>
 808c280:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c282:	3001      	adds	r0, #1
 808c284:	1c5a      	adds	r2, r3, #1
 808c286:	921b      	str	r2, [sp, #108]	; 0x6c
 808c288:	785b      	ldrb	r3, [r3, #1]
 808c28a:	2b30      	cmp	r3, #48	; 0x30
 808c28c:	d0f8      	beq.n	808c280 <_strtod_l+0x1f0>
 808c28e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808c292:	2a08      	cmp	r2, #8
 808c294:	f200 84dc 	bhi.w	808cc50 <_strtod_l+0xbc0>
 808c298:	9004      	str	r0, [sp, #16]
 808c29a:	2000      	movs	r0, #0
 808c29c:	4604      	mov	r4, r0
 808c29e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 808c2a0:	9208      	str	r2, [sp, #32]
 808c2a2:	3b30      	subs	r3, #48	; 0x30
 808c2a4:	f100 0201 	add.w	r2, r0, #1
 808c2a8:	d013      	beq.n	808c2d2 <_strtod_l+0x242>
 808c2aa:	9904      	ldr	r1, [sp, #16]
 808c2ac:	1905      	adds	r5, r0, r4
 808c2ae:	4411      	add	r1, r2
 808c2b0:	9104      	str	r1, [sp, #16]
 808c2b2:	4622      	mov	r2, r4
 808c2b4:	210a      	movs	r1, #10
 808c2b6:	42aa      	cmp	r2, r5
 808c2b8:	d113      	bne.n	808c2e2 <_strtod_l+0x252>
 808c2ba:	1822      	adds	r2, r4, r0
 808c2bc:	2a08      	cmp	r2, #8
 808c2be:	f104 0401 	add.w	r4, r4, #1
 808c2c2:	4404      	add	r4, r0
 808c2c4:	dc1b      	bgt.n	808c2fe <_strtod_l+0x26e>
 808c2c6:	220a      	movs	r2, #10
 808c2c8:	9906      	ldr	r1, [sp, #24]
 808c2ca:	fb02 3301 	mla	r3, r2, r1, r3
 808c2ce:	9306      	str	r3, [sp, #24]
 808c2d0:	2200      	movs	r2, #0
 808c2d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c2d4:	4610      	mov	r0, r2
 808c2d6:	1c59      	adds	r1, r3, #1
 808c2d8:	911b      	str	r1, [sp, #108]	; 0x6c
 808c2da:	785b      	ldrb	r3, [r3, #1]
 808c2dc:	e7ca      	b.n	808c274 <_strtod_l+0x1e4>
 808c2de:	4658      	mov	r0, fp
 808c2e0:	e7d3      	b.n	808c28a <_strtod_l+0x1fa>
 808c2e2:	2a08      	cmp	r2, #8
 808c2e4:	dc04      	bgt.n	808c2f0 <_strtod_l+0x260>
 808c2e6:	9f06      	ldr	r7, [sp, #24]
 808c2e8:	434f      	muls	r7, r1
 808c2ea:	9706      	str	r7, [sp, #24]
 808c2ec:	3201      	adds	r2, #1
 808c2ee:	e7e2      	b.n	808c2b6 <_strtod_l+0x226>
 808c2f0:	1c57      	adds	r7, r2, #1
 808c2f2:	2f10      	cmp	r7, #16
 808c2f4:	bfde      	ittt	le
 808c2f6:	9f05      	ldrle	r7, [sp, #20]
 808c2f8:	434f      	mulle	r7, r1
 808c2fa:	9705      	strle	r7, [sp, #20]
 808c2fc:	e7f6      	b.n	808c2ec <_strtod_l+0x25c>
 808c2fe:	2c10      	cmp	r4, #16
 808c300:	bfdf      	itttt	le
 808c302:	220a      	movle	r2, #10
 808c304:	9905      	ldrle	r1, [sp, #20]
 808c306:	fb02 3301 	mlale	r3, r2, r1, r3
 808c30a:	9305      	strle	r3, [sp, #20]
 808c30c:	e7e0      	b.n	808c2d0 <_strtod_l+0x240>
 808c30e:	2300      	movs	r3, #0
 808c310:	2201      	movs	r2, #1
 808c312:	9304      	str	r3, [sp, #16]
 808c314:	e77c      	b.n	808c210 <_strtod_l+0x180>
 808c316:	2700      	movs	r7, #0
 808c318:	1cb3      	adds	r3, r6, #2
 808c31a:	931b      	str	r3, [sp, #108]	; 0x6c
 808c31c:	78b3      	ldrb	r3, [r6, #2]
 808c31e:	e784      	b.n	808c22a <_strtod_l+0x19a>
 808c320:	2701      	movs	r7, #1
 808c322:	e7f9      	b.n	808c318 <_strtod_l+0x288>
 808c324:	080903c4 	.word	0x080903c4
 808c328:	0809026c 	.word	0x0809026c
 808c32c:	7ff00000 	.word	0x7ff00000
 808c330:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c332:	1c59      	adds	r1, r3, #1
 808c334:	911b      	str	r1, [sp, #108]	; 0x6c
 808c336:	785b      	ldrb	r3, [r3, #1]
 808c338:	2b30      	cmp	r3, #48	; 0x30
 808c33a:	d0f9      	beq.n	808c330 <_strtod_l+0x2a0>
 808c33c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 808c340:	2908      	cmp	r1, #8
 808c342:	f63f af78 	bhi.w	808c236 <_strtod_l+0x1a6>
 808c346:	f04f 0e0a 	mov.w	lr, #10
 808c34a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808c34e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c350:	9309      	str	r3, [sp, #36]	; 0x24
 808c352:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c354:	1c59      	adds	r1, r3, #1
 808c356:	911b      	str	r1, [sp, #108]	; 0x6c
 808c358:	785b      	ldrb	r3, [r3, #1]
 808c35a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 808c35e:	2d09      	cmp	r5, #9
 808c360:	d935      	bls.n	808c3ce <_strtod_l+0x33e>
 808c362:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808c364:	1b49      	subs	r1, r1, r5
 808c366:	2908      	cmp	r1, #8
 808c368:	f644 651f 	movw	r5, #19999	; 0x4e1f
 808c36c:	dc02      	bgt.n	808c374 <_strtod_l+0x2e4>
 808c36e:	4565      	cmp	r5, ip
 808c370:	bfa8      	it	ge
 808c372:	4665      	movge	r5, ip
 808c374:	b107      	cbz	r7, 808c378 <_strtod_l+0x2e8>
 808c376:	426d      	negs	r5, r5
 808c378:	2c00      	cmp	r4, #0
 808c37a:	d14c      	bne.n	808c416 <_strtod_l+0x386>
 808c37c:	9907      	ldr	r1, [sp, #28]
 808c37e:	4301      	orrs	r1, r0
 808c380:	f47f aec7 	bne.w	808c112 <_strtod_l+0x82>
 808c384:	2a00      	cmp	r2, #0
 808c386:	f47f aee0 	bne.w	808c14a <_strtod_l+0xba>
 808c38a:	2b69      	cmp	r3, #105	; 0x69
 808c38c:	d026      	beq.n	808c3dc <_strtod_l+0x34c>
 808c38e:	dc23      	bgt.n	808c3d8 <_strtod_l+0x348>
 808c390:	2b49      	cmp	r3, #73	; 0x49
 808c392:	d023      	beq.n	808c3dc <_strtod_l+0x34c>
 808c394:	2b4e      	cmp	r3, #78	; 0x4e
 808c396:	f47f aed8 	bne.w	808c14a <_strtod_l+0xba>
 808c39a:	499c      	ldr	r1, [pc, #624]	; (808c60c <_strtod_l+0x57c>)
 808c39c:	a81b      	add	r0, sp, #108	; 0x6c
 808c39e:	f000 ff9f 	bl	808d2e0 <__match>
 808c3a2:	2800      	cmp	r0, #0
 808c3a4:	f43f aed1 	beq.w	808c14a <_strtod_l+0xba>
 808c3a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c3aa:	781b      	ldrb	r3, [r3, #0]
 808c3ac:	2b28      	cmp	r3, #40	; 0x28
 808c3ae:	d12c      	bne.n	808c40a <_strtod_l+0x37a>
 808c3b0:	4997      	ldr	r1, [pc, #604]	; (808c610 <_strtod_l+0x580>)
 808c3b2:	aa1e      	add	r2, sp, #120	; 0x78
 808c3b4:	a81b      	add	r0, sp, #108	; 0x6c
 808c3b6:	f000 ffa7 	bl	808d308 <__hexnan>
 808c3ba:	2805      	cmp	r0, #5
 808c3bc:	d125      	bne.n	808c40a <_strtod_l+0x37a>
 808c3be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 808c3c0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 808c3c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808c3c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808c3cc:	e6a1      	b.n	808c112 <_strtod_l+0x82>
 808c3ce:	fb0e 3c0c 	mla	ip, lr, ip, r3
 808c3d2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 808c3d6:	e7bc      	b.n	808c352 <_strtod_l+0x2c2>
 808c3d8:	2b6e      	cmp	r3, #110	; 0x6e
 808c3da:	e7dc      	b.n	808c396 <_strtod_l+0x306>
 808c3dc:	498d      	ldr	r1, [pc, #564]	; (808c614 <_strtod_l+0x584>)
 808c3de:	a81b      	add	r0, sp, #108	; 0x6c
 808c3e0:	f000 ff7e 	bl	808d2e0 <__match>
 808c3e4:	2800      	cmp	r0, #0
 808c3e6:	f43f aeb0 	beq.w	808c14a <_strtod_l+0xba>
 808c3ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c3ec:	498a      	ldr	r1, [pc, #552]	; (808c618 <_strtod_l+0x588>)
 808c3ee:	3b01      	subs	r3, #1
 808c3f0:	a81b      	add	r0, sp, #108	; 0x6c
 808c3f2:	931b      	str	r3, [sp, #108]	; 0x6c
 808c3f4:	f000 ff74 	bl	808d2e0 <__match>
 808c3f8:	b910      	cbnz	r0, 808c400 <_strtod_l+0x370>
 808c3fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c3fc:	3301      	adds	r3, #1
 808c3fe:	931b      	str	r3, [sp, #108]	; 0x6c
 808c400:	f04f 0800 	mov.w	r8, #0
 808c404:	f8df 9220 	ldr.w	r9, [pc, #544]	; 808c628 <_strtod_l+0x598>
 808c408:	e683      	b.n	808c112 <_strtod_l+0x82>
 808c40a:	4884      	ldr	r0, [pc, #528]	; (808c61c <_strtod_l+0x58c>)
 808c40c:	f7fe fc46 	bl	808ac9c <nan>
 808c410:	4680      	mov	r8, r0
 808c412:	4689      	mov	r9, r1
 808c414:	e67d      	b.n	808c112 <_strtod_l+0x82>
 808c416:	9b04      	ldr	r3, [sp, #16]
 808c418:	f1bb 0f00 	cmp.w	fp, #0
 808c41c:	bf08      	it	eq
 808c41e:	46a3      	moveq	fp, r4
 808c420:	1aeb      	subs	r3, r5, r3
 808c422:	2c10      	cmp	r4, #16
 808c424:	9806      	ldr	r0, [sp, #24]
 808c426:	4626      	mov	r6, r4
 808c428:	9307      	str	r3, [sp, #28]
 808c42a:	bfa8      	it	ge
 808c42c:	2610      	movge	r6, #16
 808c42e:	f7fe fd7d 	bl	808af2c <__aeabi_ui2d>
 808c432:	2c09      	cmp	r4, #9
 808c434:	4680      	mov	r8, r0
 808c436:	4689      	mov	r9, r1
 808c438:	dd13      	ble.n	808c462 <_strtod_l+0x3d2>
 808c43a:	4b79      	ldr	r3, [pc, #484]	; (808c620 <_strtod_l+0x590>)
 808c43c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 808c440:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808c444:	f7fe fdec 	bl	808b020 <__aeabi_dmul>
 808c448:	4680      	mov	r8, r0
 808c44a:	9805      	ldr	r0, [sp, #20]
 808c44c:	4689      	mov	r9, r1
 808c44e:	f7fe fd6d 	bl	808af2c <__aeabi_ui2d>
 808c452:	4602      	mov	r2, r0
 808c454:	460b      	mov	r3, r1
 808c456:	4640      	mov	r0, r8
 808c458:	4649      	mov	r1, r9
 808c45a:	f7fe fc2b 	bl	808acb4 <__adddf3>
 808c45e:	4680      	mov	r8, r0
 808c460:	4689      	mov	r9, r1
 808c462:	2c0f      	cmp	r4, #15
 808c464:	dc36      	bgt.n	808c4d4 <_strtod_l+0x444>
 808c466:	9b07      	ldr	r3, [sp, #28]
 808c468:	2b00      	cmp	r3, #0
 808c46a:	f43f ae52 	beq.w	808c112 <_strtod_l+0x82>
 808c46e:	dd22      	ble.n	808c4b6 <_strtod_l+0x426>
 808c470:	2b16      	cmp	r3, #22
 808c472:	dc09      	bgt.n	808c488 <_strtod_l+0x3f8>
 808c474:	4c6a      	ldr	r4, [pc, #424]	; (808c620 <_strtod_l+0x590>)
 808c476:	4642      	mov	r2, r8
 808c478:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 808c47c:	464b      	mov	r3, r9
 808c47e:	e9d4 0100 	ldrd	r0, r1, [r4]
 808c482:	f7fe fdcd 	bl	808b020 <__aeabi_dmul>
 808c486:	e7c3      	b.n	808c410 <_strtod_l+0x380>
 808c488:	9a07      	ldr	r2, [sp, #28]
 808c48a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 808c48e:	4293      	cmp	r3, r2
 808c490:	db20      	blt.n	808c4d4 <_strtod_l+0x444>
 808c492:	4d63      	ldr	r5, [pc, #396]	; (808c620 <_strtod_l+0x590>)
 808c494:	f1c4 040f 	rsb	r4, r4, #15
 808c498:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 808c49c:	4642      	mov	r2, r8
 808c49e:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c4a2:	464b      	mov	r3, r9
 808c4a4:	f7fe fdbc 	bl	808b020 <__aeabi_dmul>
 808c4a8:	9b07      	ldr	r3, [sp, #28]
 808c4aa:	1b1c      	subs	r4, r3, r4
 808c4ac:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 808c4b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 808c4b4:	e7e5      	b.n	808c482 <_strtod_l+0x3f2>
 808c4b6:	9b07      	ldr	r3, [sp, #28]
 808c4b8:	3316      	adds	r3, #22
 808c4ba:	db0b      	blt.n	808c4d4 <_strtod_l+0x444>
 808c4bc:	9b04      	ldr	r3, [sp, #16]
 808c4be:	4a58      	ldr	r2, [pc, #352]	; (808c620 <_strtod_l+0x590>)
 808c4c0:	1b5d      	subs	r5, r3, r5
 808c4c2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 808c4c6:	4640      	mov	r0, r8
 808c4c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 808c4cc:	4649      	mov	r1, r9
 808c4ce:	f7fe fed1 	bl	808b274 <__aeabi_ddiv>
 808c4d2:	e79d      	b.n	808c410 <_strtod_l+0x380>
 808c4d4:	9b07      	ldr	r3, [sp, #28]
 808c4d6:	1ba6      	subs	r6, r4, r6
 808c4d8:	441e      	add	r6, r3
 808c4da:	2e00      	cmp	r6, #0
 808c4dc:	dd71      	ble.n	808c5c2 <_strtod_l+0x532>
 808c4de:	f016 030f 	ands.w	r3, r6, #15
 808c4e2:	d00a      	beq.n	808c4fa <_strtod_l+0x46a>
 808c4e4:	494e      	ldr	r1, [pc, #312]	; (808c620 <_strtod_l+0x590>)
 808c4e6:	4642      	mov	r2, r8
 808c4e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 808c4ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c4f0:	464b      	mov	r3, r9
 808c4f2:	f7fe fd95 	bl	808b020 <__aeabi_dmul>
 808c4f6:	4680      	mov	r8, r0
 808c4f8:	4689      	mov	r9, r1
 808c4fa:	f036 060f 	bics.w	r6, r6, #15
 808c4fe:	d050      	beq.n	808c5a2 <_strtod_l+0x512>
 808c500:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 808c504:	dd27      	ble.n	808c556 <_strtod_l+0x4c6>
 808c506:	f04f 0b00 	mov.w	fp, #0
 808c50a:	f8cd b010 	str.w	fp, [sp, #16]
 808c50e:	f8cd b020 	str.w	fp, [sp, #32]
 808c512:	f8cd b018 	str.w	fp, [sp, #24]
 808c516:	2322      	movs	r3, #34	; 0x22
 808c518:	f04f 0800 	mov.w	r8, #0
 808c51c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 808c628 <_strtod_l+0x598>
 808c520:	f8ca 3000 	str.w	r3, [sl]
 808c524:	9b08      	ldr	r3, [sp, #32]
 808c526:	2b00      	cmp	r3, #0
 808c528:	f43f adf3 	beq.w	808c112 <_strtod_l+0x82>
 808c52c:	4650      	mov	r0, sl
 808c52e:	991c      	ldr	r1, [sp, #112]	; 0x70
 808c530:	f000 ffcc 	bl	808d4cc <_Bfree>
 808c534:	4650      	mov	r0, sl
 808c536:	9906      	ldr	r1, [sp, #24]
 808c538:	f000 ffc8 	bl	808d4cc <_Bfree>
 808c53c:	4650      	mov	r0, sl
 808c53e:	9904      	ldr	r1, [sp, #16]
 808c540:	f000 ffc4 	bl	808d4cc <_Bfree>
 808c544:	4650      	mov	r0, sl
 808c546:	9908      	ldr	r1, [sp, #32]
 808c548:	f000 ffc0 	bl	808d4cc <_Bfree>
 808c54c:	4659      	mov	r1, fp
 808c54e:	4650      	mov	r0, sl
 808c550:	f000 ffbc 	bl	808d4cc <_Bfree>
 808c554:	e5dd      	b.n	808c112 <_strtod_l+0x82>
 808c556:	2300      	movs	r3, #0
 808c558:	4640      	mov	r0, r8
 808c55a:	4649      	mov	r1, r9
 808c55c:	461f      	mov	r7, r3
 808c55e:	1136      	asrs	r6, r6, #4
 808c560:	2e01      	cmp	r6, #1
 808c562:	dc21      	bgt.n	808c5a8 <_strtod_l+0x518>
 808c564:	b10b      	cbz	r3, 808c56a <_strtod_l+0x4da>
 808c566:	4680      	mov	r8, r0
 808c568:	4689      	mov	r9, r1
 808c56a:	4b2e      	ldr	r3, [pc, #184]	; (808c624 <_strtod_l+0x594>)
 808c56c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808c570:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 808c574:	4642      	mov	r2, r8
 808c576:	e9d7 0100 	ldrd	r0, r1, [r7]
 808c57a:	464b      	mov	r3, r9
 808c57c:	f7fe fd50 	bl	808b020 <__aeabi_dmul>
 808c580:	4b29      	ldr	r3, [pc, #164]	; (808c628 <_strtod_l+0x598>)
 808c582:	460a      	mov	r2, r1
 808c584:	400b      	ands	r3, r1
 808c586:	4929      	ldr	r1, [pc, #164]	; (808c62c <_strtod_l+0x59c>)
 808c588:	4680      	mov	r8, r0
 808c58a:	428b      	cmp	r3, r1
 808c58c:	d8bb      	bhi.n	808c506 <_strtod_l+0x476>
 808c58e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808c592:	428b      	cmp	r3, r1
 808c594:	bf86      	itte	hi
 808c596:	f04f 38ff 	movhi.w	r8, #4294967295
 808c59a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 808c630 <_strtod_l+0x5a0>
 808c59e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808c5a2:	2300      	movs	r3, #0
 808c5a4:	9305      	str	r3, [sp, #20]
 808c5a6:	e07e      	b.n	808c6a6 <_strtod_l+0x616>
 808c5a8:	07f2      	lsls	r2, r6, #31
 808c5aa:	d507      	bpl.n	808c5bc <_strtod_l+0x52c>
 808c5ac:	4b1d      	ldr	r3, [pc, #116]	; (808c624 <_strtod_l+0x594>)
 808c5ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 808c5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c5b6:	f7fe fd33 	bl	808b020 <__aeabi_dmul>
 808c5ba:	2301      	movs	r3, #1
 808c5bc:	3701      	adds	r7, #1
 808c5be:	1076      	asrs	r6, r6, #1
 808c5c0:	e7ce      	b.n	808c560 <_strtod_l+0x4d0>
 808c5c2:	d0ee      	beq.n	808c5a2 <_strtod_l+0x512>
 808c5c4:	4276      	negs	r6, r6
 808c5c6:	f016 020f 	ands.w	r2, r6, #15
 808c5ca:	d00a      	beq.n	808c5e2 <_strtod_l+0x552>
 808c5cc:	4b14      	ldr	r3, [pc, #80]	; (808c620 <_strtod_l+0x590>)
 808c5ce:	4640      	mov	r0, r8
 808c5d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808c5d4:	4649      	mov	r1, r9
 808c5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c5da:	f7fe fe4b 	bl	808b274 <__aeabi_ddiv>
 808c5de:	4680      	mov	r8, r0
 808c5e0:	4689      	mov	r9, r1
 808c5e2:	1136      	asrs	r6, r6, #4
 808c5e4:	d0dd      	beq.n	808c5a2 <_strtod_l+0x512>
 808c5e6:	2e1f      	cmp	r6, #31
 808c5e8:	dd24      	ble.n	808c634 <_strtod_l+0x5a4>
 808c5ea:	f04f 0b00 	mov.w	fp, #0
 808c5ee:	f8cd b010 	str.w	fp, [sp, #16]
 808c5f2:	f8cd b020 	str.w	fp, [sp, #32]
 808c5f6:	f8cd b018 	str.w	fp, [sp, #24]
 808c5fa:	2322      	movs	r3, #34	; 0x22
 808c5fc:	f04f 0800 	mov.w	r8, #0
 808c600:	f04f 0900 	mov.w	r9, #0
 808c604:	f8ca 3000 	str.w	r3, [sl]
 808c608:	e78c      	b.n	808c524 <_strtod_l+0x494>
 808c60a:	bf00      	nop
 808c60c:	080900b1 	.word	0x080900b1
 808c610:	08090280 	.word	0x08090280
 808c614:	080900b5 	.word	0x080900b5
 808c618:	08090266 	.word	0x08090266
 808c61c:	08090075 	.word	0x08090075
 808c620:	08090400 	.word	0x08090400
 808c624:	080903d8 	.word	0x080903d8
 808c628:	7ff00000 	.word	0x7ff00000
 808c62c:	7ca00000 	.word	0x7ca00000
 808c630:	7fefffff 	.word	0x7fefffff
 808c634:	f016 0310 	ands.w	r3, r6, #16
 808c638:	bf18      	it	ne
 808c63a:	236a      	movne	r3, #106	; 0x6a
 808c63c:	4640      	mov	r0, r8
 808c63e:	9305      	str	r3, [sp, #20]
 808c640:	4649      	mov	r1, r9
 808c642:	2300      	movs	r3, #0
 808c644:	4fb2      	ldr	r7, [pc, #712]	; (808c910 <_strtod_l+0x880>)
 808c646:	07f2      	lsls	r2, r6, #31
 808c648:	d504      	bpl.n	808c654 <_strtod_l+0x5c4>
 808c64a:	e9d7 2300 	ldrd	r2, r3, [r7]
 808c64e:	f7fe fce7 	bl	808b020 <__aeabi_dmul>
 808c652:	2301      	movs	r3, #1
 808c654:	1076      	asrs	r6, r6, #1
 808c656:	f107 0708 	add.w	r7, r7, #8
 808c65a:	d1f4      	bne.n	808c646 <_strtod_l+0x5b6>
 808c65c:	b10b      	cbz	r3, 808c662 <_strtod_l+0x5d2>
 808c65e:	4680      	mov	r8, r0
 808c660:	4689      	mov	r9, r1
 808c662:	9b05      	ldr	r3, [sp, #20]
 808c664:	b1bb      	cbz	r3, 808c696 <_strtod_l+0x606>
 808c666:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808c66a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c66e:	2b00      	cmp	r3, #0
 808c670:	4649      	mov	r1, r9
 808c672:	dd10      	ble.n	808c696 <_strtod_l+0x606>
 808c674:	2b1f      	cmp	r3, #31
 808c676:	f340 812b 	ble.w	808c8d0 <_strtod_l+0x840>
 808c67a:	2b34      	cmp	r3, #52	; 0x34
 808c67c:	bfd8      	it	le
 808c67e:	f04f 32ff 	movle.w	r2, #4294967295
 808c682:	f04f 0800 	mov.w	r8, #0
 808c686:	bfcf      	iteee	gt
 808c688:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808c68c:	3b20      	suble	r3, #32
 808c68e:	fa02 f303 	lslle.w	r3, r2, r3
 808c692:	ea03 0901 	andle.w	r9, r3, r1
 808c696:	2200      	movs	r2, #0
 808c698:	2300      	movs	r3, #0
 808c69a:	4640      	mov	r0, r8
 808c69c:	4649      	mov	r1, r9
 808c69e:	f7fe ff27 	bl	808b4f0 <__aeabi_dcmpeq>
 808c6a2:	2800      	cmp	r0, #0
 808c6a4:	d1a1      	bne.n	808c5ea <_strtod_l+0x55a>
 808c6a6:	9b06      	ldr	r3, [sp, #24]
 808c6a8:	465a      	mov	r2, fp
 808c6aa:	9300      	str	r3, [sp, #0]
 808c6ac:	4650      	mov	r0, sl
 808c6ae:	4623      	mov	r3, r4
 808c6b0:	9908      	ldr	r1, [sp, #32]
 808c6b2:	f000 ff60 	bl	808d576 <__s2b>
 808c6b6:	9008      	str	r0, [sp, #32]
 808c6b8:	2800      	cmp	r0, #0
 808c6ba:	f43f af24 	beq.w	808c506 <_strtod_l+0x476>
 808c6be:	9b04      	ldr	r3, [sp, #16]
 808c6c0:	f04f 0b00 	mov.w	fp, #0
 808c6c4:	1b5d      	subs	r5, r3, r5
 808c6c6:	9b07      	ldr	r3, [sp, #28]
 808c6c8:	f8cd b010 	str.w	fp, [sp, #16]
 808c6cc:	2b00      	cmp	r3, #0
 808c6ce:	bfb4      	ite	lt
 808c6d0:	462b      	movlt	r3, r5
 808c6d2:	2300      	movge	r3, #0
 808c6d4:	930e      	str	r3, [sp, #56]	; 0x38
 808c6d6:	9b07      	ldr	r3, [sp, #28]
 808c6d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 808c6dc:	9316      	str	r3, [sp, #88]	; 0x58
 808c6de:	9b08      	ldr	r3, [sp, #32]
 808c6e0:	4650      	mov	r0, sl
 808c6e2:	6859      	ldr	r1, [r3, #4]
 808c6e4:	f000 febe 	bl	808d464 <_Balloc>
 808c6e8:	9006      	str	r0, [sp, #24]
 808c6ea:	2800      	cmp	r0, #0
 808c6ec:	f43f af13 	beq.w	808c516 <_strtod_l+0x486>
 808c6f0:	9b08      	ldr	r3, [sp, #32]
 808c6f2:	300c      	adds	r0, #12
 808c6f4:	691a      	ldr	r2, [r3, #16]
 808c6f6:	f103 010c 	add.w	r1, r3, #12
 808c6fa:	3202      	adds	r2, #2
 808c6fc:	0092      	lsls	r2, r2, #2
 808c6fe:	f7ff fbeb 	bl	808bed8 <memcpy>
 808c702:	ab1e      	add	r3, sp, #120	; 0x78
 808c704:	9301      	str	r3, [sp, #4]
 808c706:	ab1d      	add	r3, sp, #116	; 0x74
 808c708:	9300      	str	r3, [sp, #0]
 808c70a:	4642      	mov	r2, r8
 808c70c:	464b      	mov	r3, r9
 808c70e:	4650      	mov	r0, sl
 808c710:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 808c714:	f001 fa1e 	bl	808db54 <__d2b>
 808c718:	901c      	str	r0, [sp, #112]	; 0x70
 808c71a:	2800      	cmp	r0, #0
 808c71c:	f43f aefb 	beq.w	808c516 <_strtod_l+0x486>
 808c720:	2101      	movs	r1, #1
 808c722:	4650      	mov	r0, sl
 808c724:	f000 ffb3 	bl	808d68e <__i2b>
 808c728:	4603      	mov	r3, r0
 808c72a:	9004      	str	r0, [sp, #16]
 808c72c:	2800      	cmp	r0, #0
 808c72e:	f43f aef2 	beq.w	808c516 <_strtod_l+0x486>
 808c732:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 808c734:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 808c736:	2d00      	cmp	r5, #0
 808c738:	bfab      	itete	ge
 808c73a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 808c73c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 808c73e:	18ee      	addge	r6, r5, r3
 808c740:	1b5c      	sublt	r4, r3, r5
 808c742:	9b05      	ldr	r3, [sp, #20]
 808c744:	bfa8      	it	ge
 808c746:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 808c748:	eba5 0503 	sub.w	r5, r5, r3
 808c74c:	4415      	add	r5, r2
 808c74e:	4b71      	ldr	r3, [pc, #452]	; (808c914 <_strtod_l+0x884>)
 808c750:	f105 35ff 	add.w	r5, r5, #4294967295
 808c754:	bfb8      	it	lt
 808c756:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 808c758:	429d      	cmp	r5, r3
 808c75a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 808c75e:	f280 80c9 	bge.w	808c8f4 <_strtod_l+0x864>
 808c762:	1b5b      	subs	r3, r3, r5
 808c764:	2b1f      	cmp	r3, #31
 808c766:	f04f 0701 	mov.w	r7, #1
 808c76a:	eba2 0203 	sub.w	r2, r2, r3
 808c76e:	f300 80b6 	bgt.w	808c8de <_strtod_l+0x84e>
 808c772:	2500      	movs	r5, #0
 808c774:	fa07 f303 	lsl.w	r3, r7, r3
 808c778:	930f      	str	r3, [sp, #60]	; 0x3c
 808c77a:	18b7      	adds	r7, r6, r2
 808c77c:	9b05      	ldr	r3, [sp, #20]
 808c77e:	42be      	cmp	r6, r7
 808c780:	4414      	add	r4, r2
 808c782:	441c      	add	r4, r3
 808c784:	4633      	mov	r3, r6
 808c786:	bfa8      	it	ge
 808c788:	463b      	movge	r3, r7
 808c78a:	42a3      	cmp	r3, r4
 808c78c:	bfa8      	it	ge
 808c78e:	4623      	movge	r3, r4
 808c790:	2b00      	cmp	r3, #0
 808c792:	bfc2      	ittt	gt
 808c794:	1aff      	subgt	r7, r7, r3
 808c796:	1ae4      	subgt	r4, r4, r3
 808c798:	1af6      	subgt	r6, r6, r3
 808c79a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808c79c:	2b00      	cmp	r3, #0
 808c79e:	dd17      	ble.n	808c7d0 <_strtod_l+0x740>
 808c7a0:	461a      	mov	r2, r3
 808c7a2:	4650      	mov	r0, sl
 808c7a4:	9904      	ldr	r1, [sp, #16]
 808c7a6:	f001 f817 	bl	808d7d8 <__pow5mult>
 808c7aa:	9004      	str	r0, [sp, #16]
 808c7ac:	2800      	cmp	r0, #0
 808c7ae:	f43f aeb2 	beq.w	808c516 <_strtod_l+0x486>
 808c7b2:	4601      	mov	r1, r0
 808c7b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808c7b6:	4650      	mov	r0, sl
 808c7b8:	f000 ff72 	bl	808d6a0 <__multiply>
 808c7bc:	9009      	str	r0, [sp, #36]	; 0x24
 808c7be:	2800      	cmp	r0, #0
 808c7c0:	f43f aea9 	beq.w	808c516 <_strtod_l+0x486>
 808c7c4:	4650      	mov	r0, sl
 808c7c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 808c7c8:	f000 fe80 	bl	808d4cc <_Bfree>
 808c7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c7ce:	931c      	str	r3, [sp, #112]	; 0x70
 808c7d0:	2f00      	cmp	r7, #0
 808c7d2:	f300 8093 	bgt.w	808c8fc <_strtod_l+0x86c>
 808c7d6:	9b07      	ldr	r3, [sp, #28]
 808c7d8:	2b00      	cmp	r3, #0
 808c7da:	dd08      	ble.n	808c7ee <_strtod_l+0x75e>
 808c7dc:	4650      	mov	r0, sl
 808c7de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808c7e0:	9906      	ldr	r1, [sp, #24]
 808c7e2:	f000 fff9 	bl	808d7d8 <__pow5mult>
 808c7e6:	9006      	str	r0, [sp, #24]
 808c7e8:	2800      	cmp	r0, #0
 808c7ea:	f43f ae94 	beq.w	808c516 <_strtod_l+0x486>
 808c7ee:	2c00      	cmp	r4, #0
 808c7f0:	dd08      	ble.n	808c804 <_strtod_l+0x774>
 808c7f2:	4622      	mov	r2, r4
 808c7f4:	4650      	mov	r0, sl
 808c7f6:	9906      	ldr	r1, [sp, #24]
 808c7f8:	f001 f83c 	bl	808d874 <__lshift>
 808c7fc:	9006      	str	r0, [sp, #24]
 808c7fe:	2800      	cmp	r0, #0
 808c800:	f43f ae89 	beq.w	808c516 <_strtod_l+0x486>
 808c804:	2e00      	cmp	r6, #0
 808c806:	dd08      	ble.n	808c81a <_strtod_l+0x78a>
 808c808:	4632      	mov	r2, r6
 808c80a:	4650      	mov	r0, sl
 808c80c:	9904      	ldr	r1, [sp, #16]
 808c80e:	f001 f831 	bl	808d874 <__lshift>
 808c812:	9004      	str	r0, [sp, #16]
 808c814:	2800      	cmp	r0, #0
 808c816:	f43f ae7e 	beq.w	808c516 <_strtod_l+0x486>
 808c81a:	4650      	mov	r0, sl
 808c81c:	9a06      	ldr	r2, [sp, #24]
 808c81e:	991c      	ldr	r1, [sp, #112]	; 0x70
 808c820:	f001 f8a2 	bl	808d968 <__mdiff>
 808c824:	4683      	mov	fp, r0
 808c826:	2800      	cmp	r0, #0
 808c828:	f43f ae75 	beq.w	808c516 <_strtod_l+0x486>
 808c82c:	2400      	movs	r4, #0
 808c82e:	68c3      	ldr	r3, [r0, #12]
 808c830:	9904      	ldr	r1, [sp, #16]
 808c832:	60c4      	str	r4, [r0, #12]
 808c834:	930d      	str	r3, [sp, #52]	; 0x34
 808c836:	f001 f87c 	bl	808d932 <__mcmp>
 808c83a:	42a0      	cmp	r0, r4
 808c83c:	da70      	bge.n	808c920 <_strtod_l+0x890>
 808c83e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808c840:	ea53 0308 	orrs.w	r3, r3, r8
 808c844:	f040 8096 	bne.w	808c974 <_strtod_l+0x8e4>
 808c848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c84c:	2b00      	cmp	r3, #0
 808c84e:	f040 8091 	bne.w	808c974 <_strtod_l+0x8e4>
 808c852:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c856:	0d1b      	lsrs	r3, r3, #20
 808c858:	051b      	lsls	r3, r3, #20
 808c85a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808c85e:	f240 8089 	bls.w	808c974 <_strtod_l+0x8e4>
 808c862:	f8db 3014 	ldr.w	r3, [fp, #20]
 808c866:	b923      	cbnz	r3, 808c872 <_strtod_l+0x7e2>
 808c868:	f8db 3010 	ldr.w	r3, [fp, #16]
 808c86c:	2b01      	cmp	r3, #1
 808c86e:	f340 8081 	ble.w	808c974 <_strtod_l+0x8e4>
 808c872:	4659      	mov	r1, fp
 808c874:	2201      	movs	r2, #1
 808c876:	4650      	mov	r0, sl
 808c878:	f000 fffc 	bl	808d874 <__lshift>
 808c87c:	9904      	ldr	r1, [sp, #16]
 808c87e:	4683      	mov	fp, r0
 808c880:	f001 f857 	bl	808d932 <__mcmp>
 808c884:	2800      	cmp	r0, #0
 808c886:	dd75      	ble.n	808c974 <_strtod_l+0x8e4>
 808c888:	9905      	ldr	r1, [sp, #20]
 808c88a:	464b      	mov	r3, r9
 808c88c:	4a22      	ldr	r2, [pc, #136]	; (808c918 <_strtod_l+0x888>)
 808c88e:	2900      	cmp	r1, #0
 808c890:	f000 8091 	beq.w	808c9b6 <_strtod_l+0x926>
 808c894:	ea02 0109 	and.w	r1, r2, r9
 808c898:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 808c89c:	f300 808b 	bgt.w	808c9b6 <_strtod_l+0x926>
 808c8a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 808c8a4:	f77f aea9 	ble.w	808c5fa <_strtod_l+0x56a>
 808c8a8:	2300      	movs	r3, #0
 808c8aa:	4a1c      	ldr	r2, [pc, #112]	; (808c91c <_strtod_l+0x88c>)
 808c8ac:	4640      	mov	r0, r8
 808c8ae:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 808c8b2:	4649      	mov	r1, r9
 808c8b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 808c8b8:	f7fe fbb2 	bl	808b020 <__aeabi_dmul>
 808c8bc:	460b      	mov	r3, r1
 808c8be:	4303      	orrs	r3, r0
 808c8c0:	bf08      	it	eq
 808c8c2:	2322      	moveq	r3, #34	; 0x22
 808c8c4:	4680      	mov	r8, r0
 808c8c6:	4689      	mov	r9, r1
 808c8c8:	bf08      	it	eq
 808c8ca:	f8ca 3000 	streq.w	r3, [sl]
 808c8ce:	e62d      	b.n	808c52c <_strtod_l+0x49c>
 808c8d0:	f04f 32ff 	mov.w	r2, #4294967295
 808c8d4:	fa02 f303 	lsl.w	r3, r2, r3
 808c8d8:	ea03 0808 	and.w	r8, r3, r8
 808c8dc:	e6db      	b.n	808c696 <_strtod_l+0x606>
 808c8de:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 808c8e2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 808c8e6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 808c8ea:	35e2      	adds	r5, #226	; 0xe2
 808c8ec:	fa07 f505 	lsl.w	r5, r7, r5
 808c8f0:	970f      	str	r7, [sp, #60]	; 0x3c
 808c8f2:	e742      	b.n	808c77a <_strtod_l+0x6ea>
 808c8f4:	2301      	movs	r3, #1
 808c8f6:	2500      	movs	r5, #0
 808c8f8:	930f      	str	r3, [sp, #60]	; 0x3c
 808c8fa:	e73e      	b.n	808c77a <_strtod_l+0x6ea>
 808c8fc:	463a      	mov	r2, r7
 808c8fe:	4650      	mov	r0, sl
 808c900:	991c      	ldr	r1, [sp, #112]	; 0x70
 808c902:	f000 ffb7 	bl	808d874 <__lshift>
 808c906:	901c      	str	r0, [sp, #112]	; 0x70
 808c908:	2800      	cmp	r0, #0
 808c90a:	f47f af64 	bne.w	808c7d6 <_strtod_l+0x746>
 808c90e:	e602      	b.n	808c516 <_strtod_l+0x486>
 808c910:	08090298 	.word	0x08090298
 808c914:	fffffc02 	.word	0xfffffc02
 808c918:	7ff00000 	.word	0x7ff00000
 808c91c:	39500000 	.word	0x39500000
 808c920:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808c924:	d166      	bne.n	808c9f4 <_strtod_l+0x964>
 808c926:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808c928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c92c:	b35a      	cbz	r2, 808c986 <_strtod_l+0x8f6>
 808c92e:	4a9c      	ldr	r2, [pc, #624]	; (808cba0 <_strtod_l+0xb10>)
 808c930:	4293      	cmp	r3, r2
 808c932:	d12c      	bne.n	808c98e <_strtod_l+0x8fe>
 808c934:	9b05      	ldr	r3, [sp, #20]
 808c936:	4640      	mov	r0, r8
 808c938:	b303      	cbz	r3, 808c97c <_strtod_l+0x8ec>
 808c93a:	464b      	mov	r3, r9
 808c93c:	4a99      	ldr	r2, [pc, #612]	; (808cba4 <_strtod_l+0xb14>)
 808c93e:	f04f 31ff 	mov.w	r1, #4294967295
 808c942:	401a      	ands	r2, r3
 808c944:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 808c948:	d81b      	bhi.n	808c982 <_strtod_l+0x8f2>
 808c94a:	0d12      	lsrs	r2, r2, #20
 808c94c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 808c950:	fa01 f303 	lsl.w	r3, r1, r3
 808c954:	4298      	cmp	r0, r3
 808c956:	d11a      	bne.n	808c98e <_strtod_l+0x8fe>
 808c958:	4b93      	ldr	r3, [pc, #588]	; (808cba8 <_strtod_l+0xb18>)
 808c95a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808c95c:	429a      	cmp	r2, r3
 808c95e:	d102      	bne.n	808c966 <_strtod_l+0x8d6>
 808c960:	3001      	adds	r0, #1
 808c962:	f43f add8 	beq.w	808c516 <_strtod_l+0x486>
 808c966:	f04f 0800 	mov.w	r8, #0
 808c96a:	4b8e      	ldr	r3, [pc, #568]	; (808cba4 <_strtod_l+0xb14>)
 808c96c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808c96e:	401a      	ands	r2, r3
 808c970:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 808c974:	9b05      	ldr	r3, [sp, #20]
 808c976:	2b00      	cmp	r3, #0
 808c978:	d196      	bne.n	808c8a8 <_strtod_l+0x818>
 808c97a:	e5d7      	b.n	808c52c <_strtod_l+0x49c>
 808c97c:	f04f 33ff 	mov.w	r3, #4294967295
 808c980:	e7e8      	b.n	808c954 <_strtod_l+0x8c4>
 808c982:	460b      	mov	r3, r1
 808c984:	e7e6      	b.n	808c954 <_strtod_l+0x8c4>
 808c986:	ea53 0308 	orrs.w	r3, r3, r8
 808c98a:	f43f af7d 	beq.w	808c888 <_strtod_l+0x7f8>
 808c98e:	b1e5      	cbz	r5, 808c9ca <_strtod_l+0x93a>
 808c990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c992:	421d      	tst	r5, r3
 808c994:	d0ee      	beq.n	808c974 <_strtod_l+0x8e4>
 808c996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808c998:	4640      	mov	r0, r8
 808c99a:	4649      	mov	r1, r9
 808c99c:	9a05      	ldr	r2, [sp, #20]
 808c99e:	b1c3      	cbz	r3, 808c9d2 <_strtod_l+0x942>
 808c9a0:	f7ff fb53 	bl	808c04a <sulp>
 808c9a4:	4602      	mov	r2, r0
 808c9a6:	460b      	mov	r3, r1
 808c9a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808c9ac:	f7fe f982 	bl	808acb4 <__adddf3>
 808c9b0:	4680      	mov	r8, r0
 808c9b2:	4689      	mov	r9, r1
 808c9b4:	e7de      	b.n	808c974 <_strtod_l+0x8e4>
 808c9b6:	4013      	ands	r3, r2
 808c9b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808c9bc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808c9c0:	f04f 38ff 	mov.w	r8, #4294967295
 808c9c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808c9c8:	e7d4      	b.n	808c974 <_strtod_l+0x8e4>
 808c9ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808c9cc:	ea13 0f08 	tst.w	r3, r8
 808c9d0:	e7e0      	b.n	808c994 <_strtod_l+0x904>
 808c9d2:	f7ff fb3a 	bl	808c04a <sulp>
 808c9d6:	4602      	mov	r2, r0
 808c9d8:	460b      	mov	r3, r1
 808c9da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808c9de:	f7fe f967 	bl	808acb0 <__aeabi_dsub>
 808c9e2:	2200      	movs	r2, #0
 808c9e4:	2300      	movs	r3, #0
 808c9e6:	4680      	mov	r8, r0
 808c9e8:	4689      	mov	r9, r1
 808c9ea:	f7fe fd81 	bl	808b4f0 <__aeabi_dcmpeq>
 808c9ee:	2800      	cmp	r0, #0
 808c9f0:	d0c0      	beq.n	808c974 <_strtod_l+0x8e4>
 808c9f2:	e602      	b.n	808c5fa <_strtod_l+0x56a>
 808c9f4:	4658      	mov	r0, fp
 808c9f6:	9904      	ldr	r1, [sp, #16]
 808c9f8:	f001 f8fb 	bl	808dbf2 <__ratio>
 808c9fc:	2200      	movs	r2, #0
 808c9fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808ca02:	4606      	mov	r6, r0
 808ca04:	460f      	mov	r7, r1
 808ca06:	f7fe fd87 	bl	808b518 <__aeabi_dcmple>
 808ca0a:	2800      	cmp	r0, #0
 808ca0c:	d075      	beq.n	808cafa <_strtod_l+0xa6a>
 808ca0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808ca10:	2b00      	cmp	r3, #0
 808ca12:	d047      	beq.n	808caa4 <_strtod_l+0xa14>
 808ca14:	2600      	movs	r6, #0
 808ca16:	4f65      	ldr	r7, [pc, #404]	; (808cbac <_strtod_l+0xb1c>)
 808ca18:	4d64      	ldr	r5, [pc, #400]	; (808cbac <_strtod_l+0xb1c>)
 808ca1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808ca1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 808ca20:	0d1b      	lsrs	r3, r3, #20
 808ca22:	051b      	lsls	r3, r3, #20
 808ca24:	930f      	str	r3, [sp, #60]	; 0x3c
 808ca26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808ca28:	4b61      	ldr	r3, [pc, #388]	; (808cbb0 <_strtod_l+0xb20>)
 808ca2a:	429a      	cmp	r2, r3
 808ca2c:	f040 80c8 	bne.w	808cbc0 <_strtod_l+0xb30>
 808ca30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808ca34:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 808ca38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808ca3a:	4640      	mov	r0, r8
 808ca3c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 808ca40:	4649      	mov	r1, r9
 808ca42:	f001 f80d 	bl	808da60 <__ulp>
 808ca46:	4602      	mov	r2, r0
 808ca48:	460b      	mov	r3, r1
 808ca4a:	4630      	mov	r0, r6
 808ca4c:	4639      	mov	r1, r7
 808ca4e:	f7fe fae7 	bl	808b020 <__aeabi_dmul>
 808ca52:	4642      	mov	r2, r8
 808ca54:	464b      	mov	r3, r9
 808ca56:	f7fe f92d 	bl	808acb4 <__adddf3>
 808ca5a:	460b      	mov	r3, r1
 808ca5c:	4951      	ldr	r1, [pc, #324]	; (808cba4 <_strtod_l+0xb14>)
 808ca5e:	4a55      	ldr	r2, [pc, #340]	; (808cbb4 <_strtod_l+0xb24>)
 808ca60:	4019      	ands	r1, r3
 808ca62:	4291      	cmp	r1, r2
 808ca64:	4680      	mov	r8, r0
 808ca66:	d95e      	bls.n	808cb26 <_strtod_l+0xa96>
 808ca68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808ca6a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 808ca6e:	4293      	cmp	r3, r2
 808ca70:	d103      	bne.n	808ca7a <_strtod_l+0x9ea>
 808ca72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ca74:	3301      	adds	r3, #1
 808ca76:	f43f ad4e 	beq.w	808c516 <_strtod_l+0x486>
 808ca7a:	f04f 38ff 	mov.w	r8, #4294967295
 808ca7e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 808cba8 <_strtod_l+0xb18>
 808ca82:	4650      	mov	r0, sl
 808ca84:	991c      	ldr	r1, [sp, #112]	; 0x70
 808ca86:	f000 fd21 	bl	808d4cc <_Bfree>
 808ca8a:	4650      	mov	r0, sl
 808ca8c:	9906      	ldr	r1, [sp, #24]
 808ca8e:	f000 fd1d 	bl	808d4cc <_Bfree>
 808ca92:	4650      	mov	r0, sl
 808ca94:	9904      	ldr	r1, [sp, #16]
 808ca96:	f000 fd19 	bl	808d4cc <_Bfree>
 808ca9a:	4659      	mov	r1, fp
 808ca9c:	4650      	mov	r0, sl
 808ca9e:	f000 fd15 	bl	808d4cc <_Bfree>
 808caa2:	e61c      	b.n	808c6de <_strtod_l+0x64e>
 808caa4:	f1b8 0f00 	cmp.w	r8, #0
 808caa8:	d119      	bne.n	808cade <_strtod_l+0xa4e>
 808caaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808caac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 808cab0:	b9e3      	cbnz	r3, 808caec <_strtod_l+0xa5c>
 808cab2:	2200      	movs	r2, #0
 808cab4:	4630      	mov	r0, r6
 808cab6:	4639      	mov	r1, r7
 808cab8:	4b3c      	ldr	r3, [pc, #240]	; (808cbac <_strtod_l+0xb1c>)
 808caba:	f7fe fd23 	bl	808b504 <__aeabi_dcmplt>
 808cabe:	b9c8      	cbnz	r0, 808caf4 <_strtod_l+0xa64>
 808cac0:	2200      	movs	r2, #0
 808cac2:	4630      	mov	r0, r6
 808cac4:	4639      	mov	r1, r7
 808cac6:	4b3c      	ldr	r3, [pc, #240]	; (808cbb8 <_strtod_l+0xb28>)
 808cac8:	f7fe faaa 	bl	808b020 <__aeabi_dmul>
 808cacc:	4604      	mov	r4, r0
 808cace:	460d      	mov	r5, r1
 808cad0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808cad4:	9418      	str	r4, [sp, #96]	; 0x60
 808cad6:	9319      	str	r3, [sp, #100]	; 0x64
 808cad8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 808cadc:	e79d      	b.n	808ca1a <_strtod_l+0x98a>
 808cade:	f1b8 0f01 	cmp.w	r8, #1
 808cae2:	d103      	bne.n	808caec <_strtod_l+0xa5c>
 808cae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808cae6:	2b00      	cmp	r3, #0
 808cae8:	f43f ad87 	beq.w	808c5fa <_strtod_l+0x56a>
 808caec:	2600      	movs	r6, #0
 808caee:	2400      	movs	r4, #0
 808caf0:	4f32      	ldr	r7, [pc, #200]	; (808cbbc <_strtod_l+0xb2c>)
 808caf2:	e791      	b.n	808ca18 <_strtod_l+0x988>
 808caf4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 808caf6:	4d30      	ldr	r5, [pc, #192]	; (808cbb8 <_strtod_l+0xb28>)
 808caf8:	e7ea      	b.n	808cad0 <_strtod_l+0xa40>
 808cafa:	4b2f      	ldr	r3, [pc, #188]	; (808cbb8 <_strtod_l+0xb28>)
 808cafc:	2200      	movs	r2, #0
 808cafe:	4630      	mov	r0, r6
 808cb00:	4639      	mov	r1, r7
 808cb02:	f7fe fa8d 	bl	808b020 <__aeabi_dmul>
 808cb06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808cb08:	4604      	mov	r4, r0
 808cb0a:	460d      	mov	r5, r1
 808cb0c:	b933      	cbnz	r3, 808cb1c <_strtod_l+0xa8c>
 808cb0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808cb12:	9010      	str	r0, [sp, #64]	; 0x40
 808cb14:	9311      	str	r3, [sp, #68]	; 0x44
 808cb16:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808cb1a:	e77e      	b.n	808ca1a <_strtod_l+0x98a>
 808cb1c:	4602      	mov	r2, r0
 808cb1e:	460b      	mov	r3, r1
 808cb20:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808cb24:	e7f7      	b.n	808cb16 <_strtod_l+0xa86>
 808cb26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 808cb2a:	9b05      	ldr	r3, [sp, #20]
 808cb2c:	2b00      	cmp	r3, #0
 808cb2e:	d1a8      	bne.n	808ca82 <_strtod_l+0x9f2>
 808cb30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808cb34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808cb36:	0d1b      	lsrs	r3, r3, #20
 808cb38:	051b      	lsls	r3, r3, #20
 808cb3a:	429a      	cmp	r2, r3
 808cb3c:	d1a1      	bne.n	808ca82 <_strtod_l+0x9f2>
 808cb3e:	4620      	mov	r0, r4
 808cb40:	4629      	mov	r1, r5
 808cb42:	f001 f8e3 	bl	808dd0c <__aeabi_d2lz>
 808cb46:	f7fe fa3d 	bl	808afc4 <__aeabi_l2d>
 808cb4a:	4602      	mov	r2, r0
 808cb4c:	460b      	mov	r3, r1
 808cb4e:	4620      	mov	r0, r4
 808cb50:	4629      	mov	r1, r5
 808cb52:	f7fe f8ad 	bl	808acb0 <__aeabi_dsub>
 808cb56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808cb58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808cb5c:	ea43 0308 	orr.w	r3, r3, r8
 808cb60:	4313      	orrs	r3, r2
 808cb62:	4604      	mov	r4, r0
 808cb64:	460d      	mov	r5, r1
 808cb66:	d066      	beq.n	808cc36 <_strtod_l+0xba6>
 808cb68:	a309      	add	r3, pc, #36	; (adr r3, 808cb90 <_strtod_l+0xb00>)
 808cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cb6e:	f7fe fcc9 	bl	808b504 <__aeabi_dcmplt>
 808cb72:	2800      	cmp	r0, #0
 808cb74:	f47f acda 	bne.w	808c52c <_strtod_l+0x49c>
 808cb78:	a307      	add	r3, pc, #28	; (adr r3, 808cb98 <_strtod_l+0xb08>)
 808cb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cb7e:	4620      	mov	r0, r4
 808cb80:	4629      	mov	r1, r5
 808cb82:	f7fe fcdd 	bl	808b540 <__aeabi_dcmpgt>
 808cb86:	2800      	cmp	r0, #0
 808cb88:	f43f af7b 	beq.w	808ca82 <_strtod_l+0x9f2>
 808cb8c:	e4ce      	b.n	808c52c <_strtod_l+0x49c>
 808cb8e:	bf00      	nop
 808cb90:	94a03595 	.word	0x94a03595
 808cb94:	3fdfffff 	.word	0x3fdfffff
 808cb98:	35afe535 	.word	0x35afe535
 808cb9c:	3fe00000 	.word	0x3fe00000
 808cba0:	000fffff 	.word	0x000fffff
 808cba4:	7ff00000 	.word	0x7ff00000
 808cba8:	7fefffff 	.word	0x7fefffff
 808cbac:	3ff00000 	.word	0x3ff00000
 808cbb0:	7fe00000 	.word	0x7fe00000
 808cbb4:	7c9fffff 	.word	0x7c9fffff
 808cbb8:	3fe00000 	.word	0x3fe00000
 808cbbc:	bff00000 	.word	0xbff00000
 808cbc0:	9b05      	ldr	r3, [sp, #20]
 808cbc2:	b313      	cbz	r3, 808cc0a <_strtod_l+0xb7a>
 808cbc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808cbc6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808cbca:	d81e      	bhi.n	808cc0a <_strtod_l+0xb7a>
 808cbcc:	a326      	add	r3, pc, #152	; (adr r3, 808cc68 <_strtod_l+0xbd8>)
 808cbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cbd2:	4620      	mov	r0, r4
 808cbd4:	4629      	mov	r1, r5
 808cbd6:	f7fe fc9f 	bl	808b518 <__aeabi_dcmple>
 808cbda:	b190      	cbz	r0, 808cc02 <_strtod_l+0xb72>
 808cbdc:	4629      	mov	r1, r5
 808cbde:	4620      	mov	r0, r4
 808cbe0:	f7fe fcf6 	bl	808b5d0 <__aeabi_d2uiz>
 808cbe4:	2801      	cmp	r0, #1
 808cbe6:	bf38      	it	cc
 808cbe8:	2001      	movcc	r0, #1
 808cbea:	f7fe f99f 	bl	808af2c <__aeabi_ui2d>
 808cbee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808cbf0:	4604      	mov	r4, r0
 808cbf2:	460d      	mov	r5, r1
 808cbf4:	b9d3      	cbnz	r3, 808cc2c <_strtod_l+0xb9c>
 808cbf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808cbfa:	9012      	str	r0, [sp, #72]	; 0x48
 808cbfc:	9313      	str	r3, [sp, #76]	; 0x4c
 808cbfe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 808cc02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808cc04:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808cc08:	1a9f      	subs	r7, r3, r2
 808cc0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808cc0e:	f000 ff27 	bl	808da60 <__ulp>
 808cc12:	4602      	mov	r2, r0
 808cc14:	460b      	mov	r3, r1
 808cc16:	4630      	mov	r0, r6
 808cc18:	4639      	mov	r1, r7
 808cc1a:	f7fe fa01 	bl	808b020 <__aeabi_dmul>
 808cc1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808cc22:	f7fe f847 	bl	808acb4 <__adddf3>
 808cc26:	4680      	mov	r8, r0
 808cc28:	4689      	mov	r9, r1
 808cc2a:	e77e      	b.n	808cb2a <_strtod_l+0xa9a>
 808cc2c:	4602      	mov	r2, r0
 808cc2e:	460b      	mov	r3, r1
 808cc30:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 808cc34:	e7e3      	b.n	808cbfe <_strtod_l+0xb6e>
 808cc36:	a30e      	add	r3, pc, #56	; (adr r3, 808cc70 <_strtod_l+0xbe0>)
 808cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cc3c:	f7fe fc62 	bl	808b504 <__aeabi_dcmplt>
 808cc40:	e7a1      	b.n	808cb86 <_strtod_l+0xaf6>
 808cc42:	2300      	movs	r3, #0
 808cc44:	930c      	str	r3, [sp, #48]	; 0x30
 808cc46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808cc48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808cc4a:	6013      	str	r3, [r2, #0]
 808cc4c:	f7ff ba65 	b.w	808c11a <_strtod_l+0x8a>
 808cc50:	2b65      	cmp	r3, #101	; 0x65
 808cc52:	f43f ab5c 	beq.w	808c30e <_strtod_l+0x27e>
 808cc56:	2b45      	cmp	r3, #69	; 0x45
 808cc58:	f43f ab59 	beq.w	808c30e <_strtod_l+0x27e>
 808cc5c:	2201      	movs	r2, #1
 808cc5e:	f7ff bb8d 	b.w	808c37c <_strtod_l+0x2ec>
 808cc62:	bf00      	nop
 808cc64:	f3af 8000 	nop.w
 808cc68:	ffc00000 	.word	0xffc00000
 808cc6c:	41dfffff 	.word	0x41dfffff
 808cc70:	94a03595 	.word	0x94a03595
 808cc74:	3fcfffff 	.word	0x3fcfffff

0808cc78 <strtod>:
 808cc78:	460a      	mov	r2, r1
 808cc7a:	4601      	mov	r1, r0
 808cc7c:	4802      	ldr	r0, [pc, #8]	; (808cc88 <strtod+0x10>)
 808cc7e:	4b03      	ldr	r3, [pc, #12]	; (808cc8c <strtod+0x14>)
 808cc80:	6800      	ldr	r0, [r0, #0]
 808cc82:	f7ff ba05 	b.w	808c090 <_strtod_l>
 808cc86:	bf00      	nop
 808cc88:	200000d8 	.word	0x200000d8
 808cc8c:	20000140 	.word	0x20000140

0808cc90 <_strtol_l.isra.0>:
 808cc90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808cc94:	468c      	mov	ip, r1
 808cc96:	4686      	mov	lr, r0
 808cc98:	4e39      	ldr	r6, [pc, #228]	; (808cd80 <_strtol_l.isra.0+0xf0>)
 808cc9a:	4660      	mov	r0, ip
 808cc9c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808cca0:	5da5      	ldrb	r5, [r4, r6]
 808cca2:	f015 0508 	ands.w	r5, r5, #8
 808cca6:	d1f8      	bne.n	808cc9a <_strtol_l.isra.0+0xa>
 808cca8:	2c2d      	cmp	r4, #45	; 0x2d
 808ccaa:	d133      	bne.n	808cd14 <_strtol_l.isra.0+0x84>
 808ccac:	f04f 0801 	mov.w	r8, #1
 808ccb0:	f89c 4000 	ldrb.w	r4, [ip]
 808ccb4:	f100 0c02 	add.w	ip, r0, #2
 808ccb8:	2b00      	cmp	r3, #0
 808ccba:	d05c      	beq.n	808cd76 <_strtol_l.isra.0+0xe6>
 808ccbc:	2b10      	cmp	r3, #16
 808ccbe:	d10c      	bne.n	808ccda <_strtol_l.isra.0+0x4a>
 808ccc0:	2c30      	cmp	r4, #48	; 0x30
 808ccc2:	d10a      	bne.n	808ccda <_strtol_l.isra.0+0x4a>
 808ccc4:	f89c 0000 	ldrb.w	r0, [ip]
 808ccc8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808cccc:	2858      	cmp	r0, #88	; 0x58
 808ccce:	d14d      	bne.n	808cd6c <_strtol_l.isra.0+0xdc>
 808ccd0:	2310      	movs	r3, #16
 808ccd2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 808ccd6:	f10c 0c02 	add.w	ip, ip, #2
 808ccda:	2600      	movs	r6, #0
 808ccdc:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 808cce0:	3f01      	subs	r7, #1
 808cce2:	fbb7 f9f3 	udiv	r9, r7, r3
 808cce6:	4630      	mov	r0, r6
 808cce8:	fb03 7a19 	mls	sl, r3, r9, r7
 808ccec:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 808ccf0:	2d09      	cmp	r5, #9
 808ccf2:	d818      	bhi.n	808cd26 <_strtol_l.isra.0+0x96>
 808ccf4:	462c      	mov	r4, r5
 808ccf6:	42a3      	cmp	r3, r4
 808ccf8:	dd24      	ble.n	808cd44 <_strtol_l.isra.0+0xb4>
 808ccfa:	1c75      	adds	r5, r6, #1
 808ccfc:	d007      	beq.n	808cd0e <_strtol_l.isra.0+0x7e>
 808ccfe:	4581      	cmp	r9, r0
 808cd00:	d31d      	bcc.n	808cd3e <_strtol_l.isra.0+0xae>
 808cd02:	d101      	bne.n	808cd08 <_strtol_l.isra.0+0x78>
 808cd04:	45a2      	cmp	sl, r4
 808cd06:	db1a      	blt.n	808cd3e <_strtol_l.isra.0+0xae>
 808cd08:	2601      	movs	r6, #1
 808cd0a:	fb00 4003 	mla	r0, r0, r3, r4
 808cd0e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808cd12:	e7eb      	b.n	808ccec <_strtol_l.isra.0+0x5c>
 808cd14:	2c2b      	cmp	r4, #43	; 0x2b
 808cd16:	bf08      	it	eq
 808cd18:	f89c 4000 	ldrbeq.w	r4, [ip]
 808cd1c:	46a8      	mov	r8, r5
 808cd1e:	bf08      	it	eq
 808cd20:	f100 0c02 	addeq.w	ip, r0, #2
 808cd24:	e7c8      	b.n	808ccb8 <_strtol_l.isra.0+0x28>
 808cd26:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 808cd2a:	2d19      	cmp	r5, #25
 808cd2c:	d801      	bhi.n	808cd32 <_strtol_l.isra.0+0xa2>
 808cd2e:	3c37      	subs	r4, #55	; 0x37
 808cd30:	e7e1      	b.n	808ccf6 <_strtol_l.isra.0+0x66>
 808cd32:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 808cd36:	2d19      	cmp	r5, #25
 808cd38:	d804      	bhi.n	808cd44 <_strtol_l.isra.0+0xb4>
 808cd3a:	3c57      	subs	r4, #87	; 0x57
 808cd3c:	e7db      	b.n	808ccf6 <_strtol_l.isra.0+0x66>
 808cd3e:	f04f 36ff 	mov.w	r6, #4294967295
 808cd42:	e7e4      	b.n	808cd0e <_strtol_l.isra.0+0x7e>
 808cd44:	1c73      	adds	r3, r6, #1
 808cd46:	d106      	bne.n	808cd56 <_strtol_l.isra.0+0xc6>
 808cd48:	2322      	movs	r3, #34	; 0x22
 808cd4a:	4638      	mov	r0, r7
 808cd4c:	f8ce 3000 	str.w	r3, [lr]
 808cd50:	b942      	cbnz	r2, 808cd64 <_strtol_l.isra.0+0xd4>
 808cd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cd56:	f1b8 0f00 	cmp.w	r8, #0
 808cd5a:	d000      	beq.n	808cd5e <_strtol_l.isra.0+0xce>
 808cd5c:	4240      	negs	r0, r0
 808cd5e:	2a00      	cmp	r2, #0
 808cd60:	d0f7      	beq.n	808cd52 <_strtol_l.isra.0+0xc2>
 808cd62:	b10e      	cbz	r6, 808cd68 <_strtol_l.isra.0+0xd8>
 808cd64:	f10c 31ff 	add.w	r1, ip, #4294967295
 808cd68:	6011      	str	r1, [r2, #0]
 808cd6a:	e7f2      	b.n	808cd52 <_strtol_l.isra.0+0xc2>
 808cd6c:	2430      	movs	r4, #48	; 0x30
 808cd6e:	2b00      	cmp	r3, #0
 808cd70:	d1b3      	bne.n	808ccda <_strtol_l.isra.0+0x4a>
 808cd72:	2308      	movs	r3, #8
 808cd74:	e7b1      	b.n	808ccda <_strtol_l.isra.0+0x4a>
 808cd76:	2c30      	cmp	r4, #48	; 0x30
 808cd78:	d0a4      	beq.n	808ccc4 <_strtol_l.isra.0+0x34>
 808cd7a:	230a      	movs	r3, #10
 808cd7c:	e7ad      	b.n	808ccda <_strtol_l.isra.0+0x4a>
 808cd7e:	bf00      	nop
 808cd80:	080902c1 	.word	0x080902c1

0808cd84 <strtol>:
 808cd84:	4613      	mov	r3, r2
 808cd86:	460a      	mov	r2, r1
 808cd88:	4601      	mov	r1, r0
 808cd8a:	4802      	ldr	r0, [pc, #8]	; (808cd94 <strtol+0x10>)
 808cd8c:	6800      	ldr	r0, [r0, #0]
 808cd8e:	f7ff bf7f 	b.w	808cc90 <_strtol_l.isra.0>
 808cd92:	bf00      	nop
 808cd94:	200000d8 	.word	0x200000d8

0808cd98 <rshift>:
 808cd98:	6903      	ldr	r3, [r0, #16]
 808cd9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808cd9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 808cda2:	f100 0414 	add.w	r4, r0, #20
 808cda6:	ea4f 1261 	mov.w	r2, r1, asr #5
 808cdaa:	dd46      	ble.n	808ce3a <rshift+0xa2>
 808cdac:	f011 011f 	ands.w	r1, r1, #31
 808cdb0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 808cdb4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 808cdb8:	d10c      	bne.n	808cdd4 <rshift+0x3c>
 808cdba:	4629      	mov	r1, r5
 808cdbc:	f100 0710 	add.w	r7, r0, #16
 808cdc0:	42b1      	cmp	r1, r6
 808cdc2:	d335      	bcc.n	808ce30 <rshift+0x98>
 808cdc4:	1a9b      	subs	r3, r3, r2
 808cdc6:	009b      	lsls	r3, r3, #2
 808cdc8:	1eea      	subs	r2, r5, #3
 808cdca:	4296      	cmp	r6, r2
 808cdcc:	bf38      	it	cc
 808cdce:	2300      	movcc	r3, #0
 808cdd0:	4423      	add	r3, r4
 808cdd2:	e015      	b.n	808ce00 <rshift+0x68>
 808cdd4:	46a1      	mov	r9, r4
 808cdd6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 808cdda:	f1c1 0820 	rsb	r8, r1, #32
 808cdde:	40cf      	lsrs	r7, r1
 808cde0:	f105 0e04 	add.w	lr, r5, #4
 808cde4:	4576      	cmp	r6, lr
 808cde6:	46f4      	mov	ip, lr
 808cde8:	d816      	bhi.n	808ce18 <rshift+0x80>
 808cdea:	1a9b      	subs	r3, r3, r2
 808cdec:	009a      	lsls	r2, r3, #2
 808cdee:	3a04      	subs	r2, #4
 808cdf0:	3501      	adds	r5, #1
 808cdf2:	42ae      	cmp	r6, r5
 808cdf4:	bf38      	it	cc
 808cdf6:	2200      	movcc	r2, #0
 808cdf8:	18a3      	adds	r3, r4, r2
 808cdfa:	50a7      	str	r7, [r4, r2]
 808cdfc:	b107      	cbz	r7, 808ce00 <rshift+0x68>
 808cdfe:	3304      	adds	r3, #4
 808ce00:	42a3      	cmp	r3, r4
 808ce02:	eba3 0204 	sub.w	r2, r3, r4
 808ce06:	bf08      	it	eq
 808ce08:	2300      	moveq	r3, #0
 808ce0a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 808ce0e:	6102      	str	r2, [r0, #16]
 808ce10:	bf08      	it	eq
 808ce12:	6143      	streq	r3, [r0, #20]
 808ce14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808ce18:	f8dc c000 	ldr.w	ip, [ip]
 808ce1c:	fa0c fc08 	lsl.w	ip, ip, r8
 808ce20:	ea4c 0707 	orr.w	r7, ip, r7
 808ce24:	f849 7b04 	str.w	r7, [r9], #4
 808ce28:	f85e 7b04 	ldr.w	r7, [lr], #4
 808ce2c:	40cf      	lsrs	r7, r1
 808ce2e:	e7d9      	b.n	808cde4 <rshift+0x4c>
 808ce30:	f851 cb04 	ldr.w	ip, [r1], #4
 808ce34:	f847 cf04 	str.w	ip, [r7, #4]!
 808ce38:	e7c2      	b.n	808cdc0 <rshift+0x28>
 808ce3a:	4623      	mov	r3, r4
 808ce3c:	e7e0      	b.n	808ce00 <rshift+0x68>

0808ce3e <__hexdig_fun>:
 808ce3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808ce42:	2b09      	cmp	r3, #9
 808ce44:	d802      	bhi.n	808ce4c <__hexdig_fun+0xe>
 808ce46:	3820      	subs	r0, #32
 808ce48:	b2c0      	uxtb	r0, r0
 808ce4a:	4770      	bx	lr
 808ce4c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808ce50:	2b05      	cmp	r3, #5
 808ce52:	d801      	bhi.n	808ce58 <__hexdig_fun+0x1a>
 808ce54:	3847      	subs	r0, #71	; 0x47
 808ce56:	e7f7      	b.n	808ce48 <__hexdig_fun+0xa>
 808ce58:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808ce5c:	2b05      	cmp	r3, #5
 808ce5e:	d801      	bhi.n	808ce64 <__hexdig_fun+0x26>
 808ce60:	3827      	subs	r0, #39	; 0x27
 808ce62:	e7f1      	b.n	808ce48 <__hexdig_fun+0xa>
 808ce64:	2000      	movs	r0, #0
 808ce66:	4770      	bx	lr

0808ce68 <__gethex>:
 808ce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ce6c:	b08b      	sub	sp, #44	; 0x2c
 808ce6e:	9306      	str	r3, [sp, #24]
 808ce70:	4bba      	ldr	r3, [pc, #744]	; (808d15c <__gethex+0x2f4>)
 808ce72:	9002      	str	r0, [sp, #8]
 808ce74:	681b      	ldr	r3, [r3, #0]
 808ce76:	468b      	mov	fp, r1
 808ce78:	4618      	mov	r0, r3
 808ce7a:	4690      	mov	r8, r2
 808ce7c:	9303      	str	r3, [sp, #12]
 808ce7e:	f7ff f8a0 	bl	808bfc2 <strlen>
 808ce82:	4682      	mov	sl, r0
 808ce84:	9b03      	ldr	r3, [sp, #12]
 808ce86:	f8db 2000 	ldr.w	r2, [fp]
 808ce8a:	4403      	add	r3, r0
 808ce8c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808ce90:	9307      	str	r3, [sp, #28]
 808ce92:	1c93      	adds	r3, r2, #2
 808ce94:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 808ce98:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 808ce9c:	32fe      	adds	r2, #254	; 0xfe
 808ce9e:	18d1      	adds	r1, r2, r3
 808cea0:	461f      	mov	r7, r3
 808cea2:	f813 0b01 	ldrb.w	r0, [r3], #1
 808cea6:	9101      	str	r1, [sp, #4]
 808cea8:	2830      	cmp	r0, #48	; 0x30
 808ceaa:	d0f8      	beq.n	808ce9e <__gethex+0x36>
 808ceac:	f7ff ffc7 	bl	808ce3e <__hexdig_fun>
 808ceb0:	4604      	mov	r4, r0
 808ceb2:	2800      	cmp	r0, #0
 808ceb4:	d13a      	bne.n	808cf2c <__gethex+0xc4>
 808ceb6:	4652      	mov	r2, sl
 808ceb8:	4638      	mov	r0, r7
 808ceba:	9903      	ldr	r1, [sp, #12]
 808cebc:	f7ff f889 	bl	808bfd2 <strncmp>
 808cec0:	4605      	mov	r5, r0
 808cec2:	2800      	cmp	r0, #0
 808cec4:	d166      	bne.n	808cf94 <__gethex+0x12c>
 808cec6:	f817 000a 	ldrb.w	r0, [r7, sl]
 808ceca:	eb07 060a 	add.w	r6, r7, sl
 808cece:	f7ff ffb6 	bl	808ce3e <__hexdig_fun>
 808ced2:	2800      	cmp	r0, #0
 808ced4:	d060      	beq.n	808cf98 <__gethex+0x130>
 808ced6:	4633      	mov	r3, r6
 808ced8:	7818      	ldrb	r0, [r3, #0]
 808ceda:	461f      	mov	r7, r3
 808cedc:	2830      	cmp	r0, #48	; 0x30
 808cede:	f103 0301 	add.w	r3, r3, #1
 808cee2:	d0f9      	beq.n	808ced8 <__gethex+0x70>
 808cee4:	f7ff ffab 	bl	808ce3e <__hexdig_fun>
 808cee8:	2301      	movs	r3, #1
 808ceea:	fab0 f480 	clz	r4, r0
 808ceee:	4635      	mov	r5, r6
 808cef0:	0964      	lsrs	r4, r4, #5
 808cef2:	9301      	str	r3, [sp, #4]
 808cef4:	463a      	mov	r2, r7
 808cef6:	4616      	mov	r6, r2
 808cef8:	7830      	ldrb	r0, [r6, #0]
 808cefa:	3201      	adds	r2, #1
 808cefc:	f7ff ff9f 	bl	808ce3e <__hexdig_fun>
 808cf00:	2800      	cmp	r0, #0
 808cf02:	d1f8      	bne.n	808cef6 <__gethex+0x8e>
 808cf04:	4652      	mov	r2, sl
 808cf06:	4630      	mov	r0, r6
 808cf08:	9903      	ldr	r1, [sp, #12]
 808cf0a:	f7ff f862 	bl	808bfd2 <strncmp>
 808cf0e:	b980      	cbnz	r0, 808cf32 <__gethex+0xca>
 808cf10:	b94d      	cbnz	r5, 808cf26 <__gethex+0xbe>
 808cf12:	eb06 050a 	add.w	r5, r6, sl
 808cf16:	462a      	mov	r2, r5
 808cf18:	4616      	mov	r6, r2
 808cf1a:	7830      	ldrb	r0, [r6, #0]
 808cf1c:	3201      	adds	r2, #1
 808cf1e:	f7ff ff8e 	bl	808ce3e <__hexdig_fun>
 808cf22:	2800      	cmp	r0, #0
 808cf24:	d1f8      	bne.n	808cf18 <__gethex+0xb0>
 808cf26:	1bad      	subs	r5, r5, r6
 808cf28:	00ad      	lsls	r5, r5, #2
 808cf2a:	e004      	b.n	808cf36 <__gethex+0xce>
 808cf2c:	2400      	movs	r4, #0
 808cf2e:	4625      	mov	r5, r4
 808cf30:	e7e0      	b.n	808cef4 <__gethex+0x8c>
 808cf32:	2d00      	cmp	r5, #0
 808cf34:	d1f7      	bne.n	808cf26 <__gethex+0xbe>
 808cf36:	7833      	ldrb	r3, [r6, #0]
 808cf38:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808cf3c:	2b50      	cmp	r3, #80	; 0x50
 808cf3e:	d139      	bne.n	808cfb4 <__gethex+0x14c>
 808cf40:	7873      	ldrb	r3, [r6, #1]
 808cf42:	2b2b      	cmp	r3, #43	; 0x2b
 808cf44:	d02a      	beq.n	808cf9c <__gethex+0x134>
 808cf46:	2b2d      	cmp	r3, #45	; 0x2d
 808cf48:	d02c      	beq.n	808cfa4 <__gethex+0x13c>
 808cf4a:	f04f 0900 	mov.w	r9, #0
 808cf4e:	1c71      	adds	r1, r6, #1
 808cf50:	7808      	ldrb	r0, [r1, #0]
 808cf52:	f7ff ff74 	bl	808ce3e <__hexdig_fun>
 808cf56:	1e43      	subs	r3, r0, #1
 808cf58:	b2db      	uxtb	r3, r3
 808cf5a:	2b18      	cmp	r3, #24
 808cf5c:	d82a      	bhi.n	808cfb4 <__gethex+0x14c>
 808cf5e:	f1a0 0210 	sub.w	r2, r0, #16
 808cf62:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808cf66:	f7ff ff6a 	bl	808ce3e <__hexdig_fun>
 808cf6a:	1e43      	subs	r3, r0, #1
 808cf6c:	b2db      	uxtb	r3, r3
 808cf6e:	2b18      	cmp	r3, #24
 808cf70:	d91b      	bls.n	808cfaa <__gethex+0x142>
 808cf72:	f1b9 0f00 	cmp.w	r9, #0
 808cf76:	d000      	beq.n	808cf7a <__gethex+0x112>
 808cf78:	4252      	negs	r2, r2
 808cf7a:	4415      	add	r5, r2
 808cf7c:	f8cb 1000 	str.w	r1, [fp]
 808cf80:	b1d4      	cbz	r4, 808cfb8 <__gethex+0x150>
 808cf82:	9b01      	ldr	r3, [sp, #4]
 808cf84:	2b00      	cmp	r3, #0
 808cf86:	bf14      	ite	ne
 808cf88:	2700      	movne	r7, #0
 808cf8a:	2706      	moveq	r7, #6
 808cf8c:	4638      	mov	r0, r7
 808cf8e:	b00b      	add	sp, #44	; 0x2c
 808cf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cf94:	463e      	mov	r6, r7
 808cf96:	4625      	mov	r5, r4
 808cf98:	2401      	movs	r4, #1
 808cf9a:	e7cc      	b.n	808cf36 <__gethex+0xce>
 808cf9c:	f04f 0900 	mov.w	r9, #0
 808cfa0:	1cb1      	adds	r1, r6, #2
 808cfa2:	e7d5      	b.n	808cf50 <__gethex+0xe8>
 808cfa4:	f04f 0901 	mov.w	r9, #1
 808cfa8:	e7fa      	b.n	808cfa0 <__gethex+0x138>
 808cfaa:	230a      	movs	r3, #10
 808cfac:	fb03 0202 	mla	r2, r3, r2, r0
 808cfb0:	3a10      	subs	r2, #16
 808cfb2:	e7d6      	b.n	808cf62 <__gethex+0xfa>
 808cfb4:	4631      	mov	r1, r6
 808cfb6:	e7e1      	b.n	808cf7c <__gethex+0x114>
 808cfb8:	4621      	mov	r1, r4
 808cfba:	1bf3      	subs	r3, r6, r7
 808cfbc:	3b01      	subs	r3, #1
 808cfbe:	2b07      	cmp	r3, #7
 808cfc0:	dc50      	bgt.n	808d064 <__gethex+0x1fc>
 808cfc2:	9802      	ldr	r0, [sp, #8]
 808cfc4:	f000 fa4e 	bl	808d464 <_Balloc>
 808cfc8:	f04f 0b00 	mov.w	fp, #0
 808cfcc:	4604      	mov	r4, r0
 808cfce:	f100 0914 	add.w	r9, r0, #20
 808cfd2:	f1ca 0301 	rsb	r3, sl, #1
 808cfd6:	f8cd 9010 	str.w	r9, [sp, #16]
 808cfda:	f8cd b004 	str.w	fp, [sp, #4]
 808cfde:	9308      	str	r3, [sp, #32]
 808cfe0:	42b7      	cmp	r7, r6
 808cfe2:	d342      	bcc.n	808d06a <__gethex+0x202>
 808cfe4:	9f04      	ldr	r7, [sp, #16]
 808cfe6:	9b01      	ldr	r3, [sp, #4]
 808cfe8:	f847 3b04 	str.w	r3, [r7], #4
 808cfec:	eba7 0709 	sub.w	r7, r7, r9
 808cff0:	10bf      	asrs	r7, r7, #2
 808cff2:	6127      	str	r7, [r4, #16]
 808cff4:	4618      	mov	r0, r3
 808cff6:	f000 fafc 	bl	808d5f2 <__hi0bits>
 808cffa:	017f      	lsls	r7, r7, #5
 808cffc:	f8d8 6000 	ldr.w	r6, [r8]
 808d000:	1a3f      	subs	r7, r7, r0
 808d002:	42b7      	cmp	r7, r6
 808d004:	dd65      	ble.n	808d0d2 <__gethex+0x26a>
 808d006:	1bbf      	subs	r7, r7, r6
 808d008:	4639      	mov	r1, r7
 808d00a:	4620      	mov	r0, r4
 808d00c:	f000 fe42 	bl	808dc94 <__any_on>
 808d010:	4682      	mov	sl, r0
 808d012:	b1a8      	cbz	r0, 808d040 <__gethex+0x1d8>
 808d014:	f04f 0a01 	mov.w	sl, #1
 808d018:	1e7b      	subs	r3, r7, #1
 808d01a:	1159      	asrs	r1, r3, #5
 808d01c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 808d020:	f003 021f 	and.w	r2, r3, #31
 808d024:	fa0a f202 	lsl.w	r2, sl, r2
 808d028:	420a      	tst	r2, r1
 808d02a:	d009      	beq.n	808d040 <__gethex+0x1d8>
 808d02c:	4553      	cmp	r3, sl
 808d02e:	dd05      	ble.n	808d03c <__gethex+0x1d4>
 808d030:	4620      	mov	r0, r4
 808d032:	1eb9      	subs	r1, r7, #2
 808d034:	f000 fe2e 	bl	808dc94 <__any_on>
 808d038:	2800      	cmp	r0, #0
 808d03a:	d147      	bne.n	808d0cc <__gethex+0x264>
 808d03c:	f04f 0a02 	mov.w	sl, #2
 808d040:	4639      	mov	r1, r7
 808d042:	4620      	mov	r0, r4
 808d044:	f7ff fea8 	bl	808cd98 <rshift>
 808d048:	443d      	add	r5, r7
 808d04a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d04e:	42ab      	cmp	r3, r5
 808d050:	da4d      	bge.n	808d0ee <__gethex+0x286>
 808d052:	4621      	mov	r1, r4
 808d054:	9802      	ldr	r0, [sp, #8]
 808d056:	f000 fa39 	bl	808d4cc <_Bfree>
 808d05a:	2300      	movs	r3, #0
 808d05c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d05e:	27a3      	movs	r7, #163	; 0xa3
 808d060:	6013      	str	r3, [r2, #0]
 808d062:	e793      	b.n	808cf8c <__gethex+0x124>
 808d064:	3101      	adds	r1, #1
 808d066:	105b      	asrs	r3, r3, #1
 808d068:	e7a9      	b.n	808cfbe <__gethex+0x156>
 808d06a:	1e73      	subs	r3, r6, #1
 808d06c:	9a07      	ldr	r2, [sp, #28]
 808d06e:	9305      	str	r3, [sp, #20]
 808d070:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808d074:	4293      	cmp	r3, r2
 808d076:	d019      	beq.n	808d0ac <__gethex+0x244>
 808d078:	f1bb 0f20 	cmp.w	fp, #32
 808d07c:	d107      	bne.n	808d08e <__gethex+0x226>
 808d07e:	9b04      	ldr	r3, [sp, #16]
 808d080:	9a01      	ldr	r2, [sp, #4]
 808d082:	f843 2b04 	str.w	r2, [r3], #4
 808d086:	9304      	str	r3, [sp, #16]
 808d088:	2300      	movs	r3, #0
 808d08a:	469b      	mov	fp, r3
 808d08c:	9301      	str	r3, [sp, #4]
 808d08e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808d092:	f7ff fed4 	bl	808ce3e <__hexdig_fun>
 808d096:	9b01      	ldr	r3, [sp, #4]
 808d098:	f000 000f 	and.w	r0, r0, #15
 808d09c:	fa00 f00b 	lsl.w	r0, r0, fp
 808d0a0:	4303      	orrs	r3, r0
 808d0a2:	9301      	str	r3, [sp, #4]
 808d0a4:	f10b 0b04 	add.w	fp, fp, #4
 808d0a8:	9b05      	ldr	r3, [sp, #20]
 808d0aa:	e00d      	b.n	808d0c8 <__gethex+0x260>
 808d0ac:	9b05      	ldr	r3, [sp, #20]
 808d0ae:	9a08      	ldr	r2, [sp, #32]
 808d0b0:	4413      	add	r3, r2
 808d0b2:	42bb      	cmp	r3, r7
 808d0b4:	d3e0      	bcc.n	808d078 <__gethex+0x210>
 808d0b6:	4618      	mov	r0, r3
 808d0b8:	4652      	mov	r2, sl
 808d0ba:	9903      	ldr	r1, [sp, #12]
 808d0bc:	9309      	str	r3, [sp, #36]	; 0x24
 808d0be:	f7fe ff88 	bl	808bfd2 <strncmp>
 808d0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d0c4:	2800      	cmp	r0, #0
 808d0c6:	d1d7      	bne.n	808d078 <__gethex+0x210>
 808d0c8:	461e      	mov	r6, r3
 808d0ca:	e789      	b.n	808cfe0 <__gethex+0x178>
 808d0cc:	f04f 0a03 	mov.w	sl, #3
 808d0d0:	e7b6      	b.n	808d040 <__gethex+0x1d8>
 808d0d2:	da09      	bge.n	808d0e8 <__gethex+0x280>
 808d0d4:	1bf7      	subs	r7, r6, r7
 808d0d6:	4621      	mov	r1, r4
 808d0d8:	463a      	mov	r2, r7
 808d0da:	9802      	ldr	r0, [sp, #8]
 808d0dc:	f000 fbca 	bl	808d874 <__lshift>
 808d0e0:	4604      	mov	r4, r0
 808d0e2:	1bed      	subs	r5, r5, r7
 808d0e4:	f100 0914 	add.w	r9, r0, #20
 808d0e8:	f04f 0a00 	mov.w	sl, #0
 808d0ec:	e7ad      	b.n	808d04a <__gethex+0x1e2>
 808d0ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808d0f2:	42a8      	cmp	r0, r5
 808d0f4:	dd6e      	ble.n	808d1d4 <__gethex+0x36c>
 808d0f6:	1b45      	subs	r5, r0, r5
 808d0f8:	42ae      	cmp	r6, r5
 808d0fa:	dc31      	bgt.n	808d160 <__gethex+0x2f8>
 808d0fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d100:	2b02      	cmp	r3, #2
 808d102:	d022      	beq.n	808d14a <__gethex+0x2e2>
 808d104:	2b03      	cmp	r3, #3
 808d106:	d024      	beq.n	808d152 <__gethex+0x2ea>
 808d108:	2b01      	cmp	r3, #1
 808d10a:	d115      	bne.n	808d138 <__gethex+0x2d0>
 808d10c:	42ae      	cmp	r6, r5
 808d10e:	d113      	bne.n	808d138 <__gethex+0x2d0>
 808d110:	2e01      	cmp	r6, #1
 808d112:	d10b      	bne.n	808d12c <__gethex+0x2c4>
 808d114:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808d118:	9a06      	ldr	r2, [sp, #24]
 808d11a:	2762      	movs	r7, #98	; 0x62
 808d11c:	6013      	str	r3, [r2, #0]
 808d11e:	2301      	movs	r3, #1
 808d120:	6123      	str	r3, [r4, #16]
 808d122:	f8c9 3000 	str.w	r3, [r9]
 808d126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d128:	601c      	str	r4, [r3, #0]
 808d12a:	e72f      	b.n	808cf8c <__gethex+0x124>
 808d12c:	4620      	mov	r0, r4
 808d12e:	1e71      	subs	r1, r6, #1
 808d130:	f000 fdb0 	bl	808dc94 <__any_on>
 808d134:	2800      	cmp	r0, #0
 808d136:	d1ed      	bne.n	808d114 <__gethex+0x2ac>
 808d138:	4621      	mov	r1, r4
 808d13a:	9802      	ldr	r0, [sp, #8]
 808d13c:	f000 f9c6 	bl	808d4cc <_Bfree>
 808d140:	2300      	movs	r3, #0
 808d142:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d144:	2750      	movs	r7, #80	; 0x50
 808d146:	6013      	str	r3, [r2, #0]
 808d148:	e720      	b.n	808cf8c <__gethex+0x124>
 808d14a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d14c:	2b00      	cmp	r3, #0
 808d14e:	d1f3      	bne.n	808d138 <__gethex+0x2d0>
 808d150:	e7e0      	b.n	808d114 <__gethex+0x2ac>
 808d152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d154:	2b00      	cmp	r3, #0
 808d156:	d1dd      	bne.n	808d114 <__gethex+0x2ac>
 808d158:	e7ee      	b.n	808d138 <__gethex+0x2d0>
 808d15a:	bf00      	nop
 808d15c:	080903c4 	.word	0x080903c4
 808d160:	1e6f      	subs	r7, r5, #1
 808d162:	f1ba 0f00 	cmp.w	sl, #0
 808d166:	d132      	bne.n	808d1ce <__gethex+0x366>
 808d168:	b127      	cbz	r7, 808d174 <__gethex+0x30c>
 808d16a:	4639      	mov	r1, r7
 808d16c:	4620      	mov	r0, r4
 808d16e:	f000 fd91 	bl	808dc94 <__any_on>
 808d172:	4682      	mov	sl, r0
 808d174:	2101      	movs	r1, #1
 808d176:	117b      	asrs	r3, r7, #5
 808d178:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 808d17c:	f007 071f 	and.w	r7, r7, #31
 808d180:	fa01 f707 	lsl.w	r7, r1, r7
 808d184:	421f      	tst	r7, r3
 808d186:	f04f 0702 	mov.w	r7, #2
 808d18a:	4629      	mov	r1, r5
 808d18c:	4620      	mov	r0, r4
 808d18e:	bf18      	it	ne
 808d190:	f04a 0a02 	orrne.w	sl, sl, #2
 808d194:	1b76      	subs	r6, r6, r5
 808d196:	f7ff fdff 	bl	808cd98 <rshift>
 808d19a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 808d19e:	f1ba 0f00 	cmp.w	sl, #0
 808d1a2:	d048      	beq.n	808d236 <__gethex+0x3ce>
 808d1a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d1a8:	2b02      	cmp	r3, #2
 808d1aa:	d015      	beq.n	808d1d8 <__gethex+0x370>
 808d1ac:	2b03      	cmp	r3, #3
 808d1ae:	d017      	beq.n	808d1e0 <__gethex+0x378>
 808d1b0:	2b01      	cmp	r3, #1
 808d1b2:	d109      	bne.n	808d1c8 <__gethex+0x360>
 808d1b4:	f01a 0f02 	tst.w	sl, #2
 808d1b8:	d006      	beq.n	808d1c8 <__gethex+0x360>
 808d1ba:	f8d9 0000 	ldr.w	r0, [r9]
 808d1be:	ea4a 0a00 	orr.w	sl, sl, r0
 808d1c2:	f01a 0f01 	tst.w	sl, #1
 808d1c6:	d10e      	bne.n	808d1e6 <__gethex+0x37e>
 808d1c8:	f047 0710 	orr.w	r7, r7, #16
 808d1cc:	e033      	b.n	808d236 <__gethex+0x3ce>
 808d1ce:	f04f 0a01 	mov.w	sl, #1
 808d1d2:	e7cf      	b.n	808d174 <__gethex+0x30c>
 808d1d4:	2701      	movs	r7, #1
 808d1d6:	e7e2      	b.n	808d19e <__gethex+0x336>
 808d1d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d1da:	f1c3 0301 	rsb	r3, r3, #1
 808d1de:	9315      	str	r3, [sp, #84]	; 0x54
 808d1e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d1e2:	2b00      	cmp	r3, #0
 808d1e4:	d0f0      	beq.n	808d1c8 <__gethex+0x360>
 808d1e6:	f04f 0c00 	mov.w	ip, #0
 808d1ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808d1ee:	f104 0314 	add.w	r3, r4, #20
 808d1f2:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 808d1f6:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 808d1fa:	4618      	mov	r0, r3
 808d1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 808d200:	f1b2 3fff 	cmp.w	r2, #4294967295
 808d204:	d01c      	beq.n	808d240 <__gethex+0x3d8>
 808d206:	3201      	adds	r2, #1
 808d208:	6002      	str	r2, [r0, #0]
 808d20a:	2f02      	cmp	r7, #2
 808d20c:	f104 0314 	add.w	r3, r4, #20
 808d210:	d138      	bne.n	808d284 <__gethex+0x41c>
 808d212:	f8d8 2000 	ldr.w	r2, [r8]
 808d216:	3a01      	subs	r2, #1
 808d218:	42b2      	cmp	r2, r6
 808d21a:	d10a      	bne.n	808d232 <__gethex+0x3ca>
 808d21c:	2201      	movs	r2, #1
 808d21e:	1171      	asrs	r1, r6, #5
 808d220:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808d224:	f006 061f 	and.w	r6, r6, #31
 808d228:	fa02 f606 	lsl.w	r6, r2, r6
 808d22c:	421e      	tst	r6, r3
 808d22e:	bf18      	it	ne
 808d230:	4617      	movne	r7, r2
 808d232:	f047 0720 	orr.w	r7, r7, #32
 808d236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d238:	601c      	str	r4, [r3, #0]
 808d23a:	9b06      	ldr	r3, [sp, #24]
 808d23c:	601d      	str	r5, [r3, #0]
 808d23e:	e6a5      	b.n	808cf8c <__gethex+0x124>
 808d240:	4299      	cmp	r1, r3
 808d242:	f843 cc04 	str.w	ip, [r3, #-4]
 808d246:	d8d8      	bhi.n	808d1fa <__gethex+0x392>
 808d248:	68a3      	ldr	r3, [r4, #8]
 808d24a:	4599      	cmp	r9, r3
 808d24c:	db12      	blt.n	808d274 <__gethex+0x40c>
 808d24e:	6861      	ldr	r1, [r4, #4]
 808d250:	9802      	ldr	r0, [sp, #8]
 808d252:	3101      	adds	r1, #1
 808d254:	f000 f906 	bl	808d464 <_Balloc>
 808d258:	4682      	mov	sl, r0
 808d25a:	6922      	ldr	r2, [r4, #16]
 808d25c:	f104 010c 	add.w	r1, r4, #12
 808d260:	3202      	adds	r2, #2
 808d262:	0092      	lsls	r2, r2, #2
 808d264:	300c      	adds	r0, #12
 808d266:	f7fe fe37 	bl	808bed8 <memcpy>
 808d26a:	4621      	mov	r1, r4
 808d26c:	9802      	ldr	r0, [sp, #8]
 808d26e:	f000 f92d 	bl	808d4cc <_Bfree>
 808d272:	4654      	mov	r4, sl
 808d274:	6923      	ldr	r3, [r4, #16]
 808d276:	1c5a      	adds	r2, r3, #1
 808d278:	6122      	str	r2, [r4, #16]
 808d27a:	2201      	movs	r2, #1
 808d27c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 808d280:	615a      	str	r2, [r3, #20]
 808d282:	e7c2      	b.n	808d20a <__gethex+0x3a2>
 808d284:	6922      	ldr	r2, [r4, #16]
 808d286:	454a      	cmp	r2, r9
 808d288:	dd0b      	ble.n	808d2a2 <__gethex+0x43a>
 808d28a:	2101      	movs	r1, #1
 808d28c:	4620      	mov	r0, r4
 808d28e:	f7ff fd83 	bl	808cd98 <rshift>
 808d292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d296:	3501      	adds	r5, #1
 808d298:	42ab      	cmp	r3, r5
 808d29a:	f6ff aeda 	blt.w	808d052 <__gethex+0x1ea>
 808d29e:	2701      	movs	r7, #1
 808d2a0:	e7c7      	b.n	808d232 <__gethex+0x3ca>
 808d2a2:	f016 061f 	ands.w	r6, r6, #31
 808d2a6:	d0fa      	beq.n	808d29e <__gethex+0x436>
 808d2a8:	449b      	add	fp, r3
 808d2aa:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 808d2ae:	f000 f9a0 	bl	808d5f2 <__hi0bits>
 808d2b2:	f1c6 0620 	rsb	r6, r6, #32
 808d2b6:	42b0      	cmp	r0, r6
 808d2b8:	dbe7      	blt.n	808d28a <__gethex+0x422>
 808d2ba:	e7f0      	b.n	808d29e <__gethex+0x436>

0808d2bc <L_shift>:
 808d2bc:	f1c2 0208 	rsb	r2, r2, #8
 808d2c0:	0092      	lsls	r2, r2, #2
 808d2c2:	b570      	push	{r4, r5, r6, lr}
 808d2c4:	f1c2 0620 	rsb	r6, r2, #32
 808d2c8:	6843      	ldr	r3, [r0, #4]
 808d2ca:	6804      	ldr	r4, [r0, #0]
 808d2cc:	fa03 f506 	lsl.w	r5, r3, r6
 808d2d0:	432c      	orrs	r4, r5
 808d2d2:	40d3      	lsrs	r3, r2
 808d2d4:	6004      	str	r4, [r0, #0]
 808d2d6:	f840 3f04 	str.w	r3, [r0, #4]!
 808d2da:	4288      	cmp	r0, r1
 808d2dc:	d3f4      	bcc.n	808d2c8 <L_shift+0xc>
 808d2de:	bd70      	pop	{r4, r5, r6, pc}

0808d2e0 <__match>:
 808d2e0:	b530      	push	{r4, r5, lr}
 808d2e2:	6803      	ldr	r3, [r0, #0]
 808d2e4:	3301      	adds	r3, #1
 808d2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 808d2ea:	b914      	cbnz	r4, 808d2f2 <__match+0x12>
 808d2ec:	6003      	str	r3, [r0, #0]
 808d2ee:	2001      	movs	r0, #1
 808d2f0:	bd30      	pop	{r4, r5, pc}
 808d2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 808d2f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808d2fa:	2d19      	cmp	r5, #25
 808d2fc:	bf98      	it	ls
 808d2fe:	3220      	addls	r2, #32
 808d300:	42a2      	cmp	r2, r4
 808d302:	d0f0      	beq.n	808d2e6 <__match+0x6>
 808d304:	2000      	movs	r0, #0
 808d306:	e7f3      	b.n	808d2f0 <__match+0x10>

0808d308 <__hexnan>:
 808d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d30c:	2500      	movs	r5, #0
 808d30e:	680b      	ldr	r3, [r1, #0]
 808d310:	4682      	mov	sl, r0
 808d312:	115e      	asrs	r6, r3, #5
 808d314:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808d318:	f013 031f 	ands.w	r3, r3, #31
 808d31c:	bf18      	it	ne
 808d31e:	3604      	addne	r6, #4
 808d320:	1f37      	subs	r7, r6, #4
 808d322:	4690      	mov	r8, r2
 808d324:	46b9      	mov	r9, r7
 808d326:	463c      	mov	r4, r7
 808d328:	46ab      	mov	fp, r5
 808d32a:	b087      	sub	sp, #28
 808d32c:	6801      	ldr	r1, [r0, #0]
 808d32e:	9301      	str	r3, [sp, #4]
 808d330:	f846 5c04 	str.w	r5, [r6, #-4]
 808d334:	9502      	str	r5, [sp, #8]
 808d336:	784a      	ldrb	r2, [r1, #1]
 808d338:	1c4b      	adds	r3, r1, #1
 808d33a:	9303      	str	r3, [sp, #12]
 808d33c:	b342      	cbz	r2, 808d390 <__hexnan+0x88>
 808d33e:	4610      	mov	r0, r2
 808d340:	9105      	str	r1, [sp, #20]
 808d342:	9204      	str	r2, [sp, #16]
 808d344:	f7ff fd7b 	bl	808ce3e <__hexdig_fun>
 808d348:	2800      	cmp	r0, #0
 808d34a:	d14f      	bne.n	808d3ec <__hexnan+0xe4>
 808d34c:	9a04      	ldr	r2, [sp, #16]
 808d34e:	9905      	ldr	r1, [sp, #20]
 808d350:	2a20      	cmp	r2, #32
 808d352:	d818      	bhi.n	808d386 <__hexnan+0x7e>
 808d354:	9b02      	ldr	r3, [sp, #8]
 808d356:	459b      	cmp	fp, r3
 808d358:	dd13      	ble.n	808d382 <__hexnan+0x7a>
 808d35a:	454c      	cmp	r4, r9
 808d35c:	d206      	bcs.n	808d36c <__hexnan+0x64>
 808d35e:	2d07      	cmp	r5, #7
 808d360:	dc04      	bgt.n	808d36c <__hexnan+0x64>
 808d362:	462a      	mov	r2, r5
 808d364:	4649      	mov	r1, r9
 808d366:	4620      	mov	r0, r4
 808d368:	f7ff ffa8 	bl	808d2bc <L_shift>
 808d36c:	4544      	cmp	r4, r8
 808d36e:	d950      	bls.n	808d412 <__hexnan+0x10a>
 808d370:	2300      	movs	r3, #0
 808d372:	f1a4 0904 	sub.w	r9, r4, #4
 808d376:	f844 3c04 	str.w	r3, [r4, #-4]
 808d37a:	461d      	mov	r5, r3
 808d37c:	464c      	mov	r4, r9
 808d37e:	f8cd b008 	str.w	fp, [sp, #8]
 808d382:	9903      	ldr	r1, [sp, #12]
 808d384:	e7d7      	b.n	808d336 <__hexnan+0x2e>
 808d386:	2a29      	cmp	r2, #41	; 0x29
 808d388:	d156      	bne.n	808d438 <__hexnan+0x130>
 808d38a:	3102      	adds	r1, #2
 808d38c:	f8ca 1000 	str.w	r1, [sl]
 808d390:	f1bb 0f00 	cmp.w	fp, #0
 808d394:	d050      	beq.n	808d438 <__hexnan+0x130>
 808d396:	454c      	cmp	r4, r9
 808d398:	d206      	bcs.n	808d3a8 <__hexnan+0xa0>
 808d39a:	2d07      	cmp	r5, #7
 808d39c:	dc04      	bgt.n	808d3a8 <__hexnan+0xa0>
 808d39e:	462a      	mov	r2, r5
 808d3a0:	4649      	mov	r1, r9
 808d3a2:	4620      	mov	r0, r4
 808d3a4:	f7ff ff8a 	bl	808d2bc <L_shift>
 808d3a8:	4544      	cmp	r4, r8
 808d3aa:	d934      	bls.n	808d416 <__hexnan+0x10e>
 808d3ac:	4623      	mov	r3, r4
 808d3ae:	f1a8 0204 	sub.w	r2, r8, #4
 808d3b2:	f853 1b04 	ldr.w	r1, [r3], #4
 808d3b6:	429f      	cmp	r7, r3
 808d3b8:	f842 1f04 	str.w	r1, [r2, #4]!
 808d3bc:	d2f9      	bcs.n	808d3b2 <__hexnan+0xaa>
 808d3be:	1b3b      	subs	r3, r7, r4
 808d3c0:	f023 0303 	bic.w	r3, r3, #3
 808d3c4:	3304      	adds	r3, #4
 808d3c6:	3401      	adds	r4, #1
 808d3c8:	3e03      	subs	r6, #3
 808d3ca:	42b4      	cmp	r4, r6
 808d3cc:	bf88      	it	hi
 808d3ce:	2304      	movhi	r3, #4
 808d3d0:	2200      	movs	r2, #0
 808d3d2:	4443      	add	r3, r8
 808d3d4:	f843 2b04 	str.w	r2, [r3], #4
 808d3d8:	429f      	cmp	r7, r3
 808d3da:	d2fb      	bcs.n	808d3d4 <__hexnan+0xcc>
 808d3dc:	683b      	ldr	r3, [r7, #0]
 808d3de:	b91b      	cbnz	r3, 808d3e8 <__hexnan+0xe0>
 808d3e0:	4547      	cmp	r7, r8
 808d3e2:	d127      	bne.n	808d434 <__hexnan+0x12c>
 808d3e4:	2301      	movs	r3, #1
 808d3e6:	603b      	str	r3, [r7, #0]
 808d3e8:	2005      	movs	r0, #5
 808d3ea:	e026      	b.n	808d43a <__hexnan+0x132>
 808d3ec:	3501      	adds	r5, #1
 808d3ee:	2d08      	cmp	r5, #8
 808d3f0:	f10b 0b01 	add.w	fp, fp, #1
 808d3f4:	dd06      	ble.n	808d404 <__hexnan+0xfc>
 808d3f6:	4544      	cmp	r4, r8
 808d3f8:	d9c3      	bls.n	808d382 <__hexnan+0x7a>
 808d3fa:	2300      	movs	r3, #0
 808d3fc:	2501      	movs	r5, #1
 808d3fe:	f844 3c04 	str.w	r3, [r4, #-4]
 808d402:	3c04      	subs	r4, #4
 808d404:	6822      	ldr	r2, [r4, #0]
 808d406:	f000 000f 	and.w	r0, r0, #15
 808d40a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 808d40e:	6022      	str	r2, [r4, #0]
 808d410:	e7b7      	b.n	808d382 <__hexnan+0x7a>
 808d412:	2508      	movs	r5, #8
 808d414:	e7b5      	b.n	808d382 <__hexnan+0x7a>
 808d416:	9b01      	ldr	r3, [sp, #4]
 808d418:	2b00      	cmp	r3, #0
 808d41a:	d0df      	beq.n	808d3dc <__hexnan+0xd4>
 808d41c:	f04f 32ff 	mov.w	r2, #4294967295
 808d420:	f1c3 0320 	rsb	r3, r3, #32
 808d424:	fa22 f303 	lsr.w	r3, r2, r3
 808d428:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808d42c:	401a      	ands	r2, r3
 808d42e:	f846 2c04 	str.w	r2, [r6, #-4]
 808d432:	e7d3      	b.n	808d3dc <__hexnan+0xd4>
 808d434:	3f04      	subs	r7, #4
 808d436:	e7d1      	b.n	808d3dc <__hexnan+0xd4>
 808d438:	2004      	movs	r0, #4
 808d43a:	b007      	add	sp, #28
 808d43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d440 <__ascii_mbtowc>:
 808d440:	b082      	sub	sp, #8
 808d442:	b901      	cbnz	r1, 808d446 <__ascii_mbtowc+0x6>
 808d444:	a901      	add	r1, sp, #4
 808d446:	b142      	cbz	r2, 808d45a <__ascii_mbtowc+0x1a>
 808d448:	b14b      	cbz	r3, 808d45e <__ascii_mbtowc+0x1e>
 808d44a:	7813      	ldrb	r3, [r2, #0]
 808d44c:	600b      	str	r3, [r1, #0]
 808d44e:	7812      	ldrb	r2, [r2, #0]
 808d450:	1e10      	subs	r0, r2, #0
 808d452:	bf18      	it	ne
 808d454:	2001      	movne	r0, #1
 808d456:	b002      	add	sp, #8
 808d458:	4770      	bx	lr
 808d45a:	4610      	mov	r0, r2
 808d45c:	e7fb      	b.n	808d456 <__ascii_mbtowc+0x16>
 808d45e:	f06f 0001 	mvn.w	r0, #1
 808d462:	e7f8      	b.n	808d456 <__ascii_mbtowc+0x16>

0808d464 <_Balloc>:
 808d464:	b570      	push	{r4, r5, r6, lr}
 808d466:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808d468:	4604      	mov	r4, r0
 808d46a:	460d      	mov	r5, r1
 808d46c:	b93e      	cbnz	r6, 808d47e <_Balloc+0x1a>
 808d46e:	2010      	movs	r0, #16
 808d470:	f7fb fa70 	bl	8088954 <malloc>
 808d474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808d478:	6260      	str	r0, [r4, #36]	; 0x24
 808d47a:	6006      	str	r6, [r0, #0]
 808d47c:	60c6      	str	r6, [r0, #12]
 808d47e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 808d480:	68f3      	ldr	r3, [r6, #12]
 808d482:	b183      	cbz	r3, 808d4a6 <_Balloc+0x42>
 808d484:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808d486:	68db      	ldr	r3, [r3, #12]
 808d488:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 808d48c:	b9b8      	cbnz	r0, 808d4be <_Balloc+0x5a>
 808d48e:	2101      	movs	r1, #1
 808d490:	fa01 f605 	lsl.w	r6, r1, r5
 808d494:	1d72      	adds	r2, r6, #5
 808d496:	4620      	mov	r0, r4
 808d498:	0092      	lsls	r2, r2, #2
 808d49a:	f000 fc1c 	bl	808dcd6 <_calloc_r>
 808d49e:	b160      	cbz	r0, 808d4ba <_Balloc+0x56>
 808d4a0:	e9c0 5601 	strd	r5, r6, [r0, #4]
 808d4a4:	e00e      	b.n	808d4c4 <_Balloc+0x60>
 808d4a6:	2221      	movs	r2, #33	; 0x21
 808d4a8:	2104      	movs	r1, #4
 808d4aa:	4620      	mov	r0, r4
 808d4ac:	f000 fc13 	bl	808dcd6 <_calloc_r>
 808d4b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808d4b2:	60f0      	str	r0, [r6, #12]
 808d4b4:	68db      	ldr	r3, [r3, #12]
 808d4b6:	2b00      	cmp	r3, #0
 808d4b8:	d1e4      	bne.n	808d484 <_Balloc+0x20>
 808d4ba:	2000      	movs	r0, #0
 808d4bc:	bd70      	pop	{r4, r5, r6, pc}
 808d4be:	6802      	ldr	r2, [r0, #0]
 808d4c0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 808d4c4:	2300      	movs	r3, #0
 808d4c6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 808d4ca:	e7f7      	b.n	808d4bc <_Balloc+0x58>

0808d4cc <_Bfree>:
 808d4cc:	b570      	push	{r4, r5, r6, lr}
 808d4ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808d4d0:	4605      	mov	r5, r0
 808d4d2:	460c      	mov	r4, r1
 808d4d4:	b93e      	cbnz	r6, 808d4e6 <_Bfree+0x1a>
 808d4d6:	2010      	movs	r0, #16
 808d4d8:	f7fb fa3c 	bl	8088954 <malloc>
 808d4dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808d4e0:	6268      	str	r0, [r5, #36]	; 0x24
 808d4e2:	6006      	str	r6, [r0, #0]
 808d4e4:	60c6      	str	r6, [r0, #12]
 808d4e6:	b13c      	cbz	r4, 808d4f8 <_Bfree+0x2c>
 808d4e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 808d4ea:	6862      	ldr	r2, [r4, #4]
 808d4ec:	68db      	ldr	r3, [r3, #12]
 808d4ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808d4f2:	6021      	str	r1, [r4, #0]
 808d4f4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 808d4f8:	bd70      	pop	{r4, r5, r6, pc}

0808d4fa <__multadd>:
 808d4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d4fe:	4698      	mov	r8, r3
 808d500:	460c      	mov	r4, r1
 808d502:	2300      	movs	r3, #0
 808d504:	690e      	ldr	r6, [r1, #16]
 808d506:	4607      	mov	r7, r0
 808d508:	f101 0014 	add.w	r0, r1, #20
 808d50c:	6805      	ldr	r5, [r0, #0]
 808d50e:	3301      	adds	r3, #1
 808d510:	b2a9      	uxth	r1, r5
 808d512:	fb02 8101 	mla	r1, r2, r1, r8
 808d516:	0c2d      	lsrs	r5, r5, #16
 808d518:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 808d51c:	fb02 c505 	mla	r5, r2, r5, ip
 808d520:	b289      	uxth	r1, r1
 808d522:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 808d526:	429e      	cmp	r6, r3
 808d528:	ea4f 4815 	mov.w	r8, r5, lsr #16
 808d52c:	f840 1b04 	str.w	r1, [r0], #4
 808d530:	dcec      	bgt.n	808d50c <__multadd+0x12>
 808d532:	f1b8 0f00 	cmp.w	r8, #0
 808d536:	d01b      	beq.n	808d570 <__multadd+0x76>
 808d538:	68a3      	ldr	r3, [r4, #8]
 808d53a:	42b3      	cmp	r3, r6
 808d53c:	dc12      	bgt.n	808d564 <__multadd+0x6a>
 808d53e:	6861      	ldr	r1, [r4, #4]
 808d540:	4638      	mov	r0, r7
 808d542:	3101      	adds	r1, #1
 808d544:	f7ff ff8e 	bl	808d464 <_Balloc>
 808d548:	4605      	mov	r5, r0
 808d54a:	6922      	ldr	r2, [r4, #16]
 808d54c:	f104 010c 	add.w	r1, r4, #12
 808d550:	3202      	adds	r2, #2
 808d552:	0092      	lsls	r2, r2, #2
 808d554:	300c      	adds	r0, #12
 808d556:	f7fe fcbf 	bl	808bed8 <memcpy>
 808d55a:	4621      	mov	r1, r4
 808d55c:	4638      	mov	r0, r7
 808d55e:	f7ff ffb5 	bl	808d4cc <_Bfree>
 808d562:	462c      	mov	r4, r5
 808d564:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 808d568:	3601      	adds	r6, #1
 808d56a:	f8c3 8014 	str.w	r8, [r3, #20]
 808d56e:	6126      	str	r6, [r4, #16]
 808d570:	4620      	mov	r0, r4
 808d572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808d576 <__s2b>:
 808d576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808d57a:	4615      	mov	r5, r2
 808d57c:	2209      	movs	r2, #9
 808d57e:	461f      	mov	r7, r3
 808d580:	3308      	adds	r3, #8
 808d582:	460c      	mov	r4, r1
 808d584:	fb93 f3f2 	sdiv	r3, r3, r2
 808d588:	4606      	mov	r6, r0
 808d58a:	2201      	movs	r2, #1
 808d58c:	2100      	movs	r1, #0
 808d58e:	429a      	cmp	r2, r3
 808d590:	db20      	blt.n	808d5d4 <__s2b+0x5e>
 808d592:	4630      	mov	r0, r6
 808d594:	f7ff ff66 	bl	808d464 <_Balloc>
 808d598:	9b08      	ldr	r3, [sp, #32]
 808d59a:	2d09      	cmp	r5, #9
 808d59c:	6143      	str	r3, [r0, #20]
 808d59e:	f04f 0301 	mov.w	r3, #1
 808d5a2:	6103      	str	r3, [r0, #16]
 808d5a4:	dd19      	ble.n	808d5da <__s2b+0x64>
 808d5a6:	f104 0909 	add.w	r9, r4, #9
 808d5aa:	46c8      	mov	r8, r9
 808d5ac:	442c      	add	r4, r5
 808d5ae:	f818 3b01 	ldrb.w	r3, [r8], #1
 808d5b2:	4601      	mov	r1, r0
 808d5b4:	220a      	movs	r2, #10
 808d5b6:	4630      	mov	r0, r6
 808d5b8:	3b30      	subs	r3, #48	; 0x30
 808d5ba:	f7ff ff9e 	bl	808d4fa <__multadd>
 808d5be:	45a0      	cmp	r8, r4
 808d5c0:	d1f5      	bne.n	808d5ae <__s2b+0x38>
 808d5c2:	f1a5 0408 	sub.w	r4, r5, #8
 808d5c6:	444c      	add	r4, r9
 808d5c8:	1b2d      	subs	r5, r5, r4
 808d5ca:	1963      	adds	r3, r4, r5
 808d5cc:	42bb      	cmp	r3, r7
 808d5ce:	db07      	blt.n	808d5e0 <__s2b+0x6a>
 808d5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808d5d4:	0052      	lsls	r2, r2, #1
 808d5d6:	3101      	adds	r1, #1
 808d5d8:	e7d9      	b.n	808d58e <__s2b+0x18>
 808d5da:	2509      	movs	r5, #9
 808d5dc:	340a      	adds	r4, #10
 808d5de:	e7f3      	b.n	808d5c8 <__s2b+0x52>
 808d5e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 808d5e4:	4601      	mov	r1, r0
 808d5e6:	220a      	movs	r2, #10
 808d5e8:	4630      	mov	r0, r6
 808d5ea:	3b30      	subs	r3, #48	; 0x30
 808d5ec:	f7ff ff85 	bl	808d4fa <__multadd>
 808d5f0:	e7eb      	b.n	808d5ca <__s2b+0x54>

0808d5f2 <__hi0bits>:
 808d5f2:	0c02      	lsrs	r2, r0, #16
 808d5f4:	0412      	lsls	r2, r2, #16
 808d5f6:	4603      	mov	r3, r0
 808d5f8:	b9ca      	cbnz	r2, 808d62e <__hi0bits+0x3c>
 808d5fa:	0403      	lsls	r3, r0, #16
 808d5fc:	2010      	movs	r0, #16
 808d5fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 808d602:	bf04      	itt	eq
 808d604:	021b      	lsleq	r3, r3, #8
 808d606:	3008      	addeq	r0, #8
 808d608:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 808d60c:	bf04      	itt	eq
 808d60e:	011b      	lsleq	r3, r3, #4
 808d610:	3004      	addeq	r0, #4
 808d612:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 808d616:	bf04      	itt	eq
 808d618:	009b      	lsleq	r3, r3, #2
 808d61a:	3002      	addeq	r0, #2
 808d61c:	2b00      	cmp	r3, #0
 808d61e:	db05      	blt.n	808d62c <__hi0bits+0x3a>
 808d620:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 808d624:	f100 0001 	add.w	r0, r0, #1
 808d628:	bf08      	it	eq
 808d62a:	2020      	moveq	r0, #32
 808d62c:	4770      	bx	lr
 808d62e:	2000      	movs	r0, #0
 808d630:	e7e5      	b.n	808d5fe <__hi0bits+0xc>

0808d632 <__lo0bits>:
 808d632:	6803      	ldr	r3, [r0, #0]
 808d634:	4602      	mov	r2, r0
 808d636:	f013 0007 	ands.w	r0, r3, #7
 808d63a:	d00b      	beq.n	808d654 <__lo0bits+0x22>
 808d63c:	07d9      	lsls	r1, r3, #31
 808d63e:	d422      	bmi.n	808d686 <__lo0bits+0x54>
 808d640:	0798      	lsls	r0, r3, #30
 808d642:	bf49      	itett	mi
 808d644:	085b      	lsrmi	r3, r3, #1
 808d646:	089b      	lsrpl	r3, r3, #2
 808d648:	2001      	movmi	r0, #1
 808d64a:	6013      	strmi	r3, [r2, #0]
 808d64c:	bf5c      	itt	pl
 808d64e:	2002      	movpl	r0, #2
 808d650:	6013      	strpl	r3, [r2, #0]
 808d652:	4770      	bx	lr
 808d654:	b299      	uxth	r1, r3
 808d656:	b909      	cbnz	r1, 808d65c <__lo0bits+0x2a>
 808d658:	2010      	movs	r0, #16
 808d65a:	0c1b      	lsrs	r3, r3, #16
 808d65c:	f013 0fff 	tst.w	r3, #255	; 0xff
 808d660:	bf04      	itt	eq
 808d662:	0a1b      	lsreq	r3, r3, #8
 808d664:	3008      	addeq	r0, #8
 808d666:	0719      	lsls	r1, r3, #28
 808d668:	bf04      	itt	eq
 808d66a:	091b      	lsreq	r3, r3, #4
 808d66c:	3004      	addeq	r0, #4
 808d66e:	0799      	lsls	r1, r3, #30
 808d670:	bf04      	itt	eq
 808d672:	089b      	lsreq	r3, r3, #2
 808d674:	3002      	addeq	r0, #2
 808d676:	07d9      	lsls	r1, r3, #31
 808d678:	d403      	bmi.n	808d682 <__lo0bits+0x50>
 808d67a:	085b      	lsrs	r3, r3, #1
 808d67c:	f100 0001 	add.w	r0, r0, #1
 808d680:	d003      	beq.n	808d68a <__lo0bits+0x58>
 808d682:	6013      	str	r3, [r2, #0]
 808d684:	4770      	bx	lr
 808d686:	2000      	movs	r0, #0
 808d688:	4770      	bx	lr
 808d68a:	2020      	movs	r0, #32
 808d68c:	4770      	bx	lr

0808d68e <__i2b>:
 808d68e:	b510      	push	{r4, lr}
 808d690:	460c      	mov	r4, r1
 808d692:	2101      	movs	r1, #1
 808d694:	f7ff fee6 	bl	808d464 <_Balloc>
 808d698:	2201      	movs	r2, #1
 808d69a:	6144      	str	r4, [r0, #20]
 808d69c:	6102      	str	r2, [r0, #16]
 808d69e:	bd10      	pop	{r4, pc}

0808d6a0 <__multiply>:
 808d6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d6a4:	4615      	mov	r5, r2
 808d6a6:	690a      	ldr	r2, [r1, #16]
 808d6a8:	692b      	ldr	r3, [r5, #16]
 808d6aa:	460c      	mov	r4, r1
 808d6ac:	429a      	cmp	r2, r3
 808d6ae:	bfbe      	ittt	lt
 808d6b0:	460b      	movlt	r3, r1
 808d6b2:	462c      	movlt	r4, r5
 808d6b4:	461d      	movlt	r5, r3
 808d6b6:	6927      	ldr	r7, [r4, #16]
 808d6b8:	f8d5 9010 	ldr.w	r9, [r5, #16]
 808d6bc:	68a3      	ldr	r3, [r4, #8]
 808d6be:	6861      	ldr	r1, [r4, #4]
 808d6c0:	eb07 0609 	add.w	r6, r7, r9
 808d6c4:	42b3      	cmp	r3, r6
 808d6c6:	bfb8      	it	lt
 808d6c8:	3101      	addlt	r1, #1
 808d6ca:	b085      	sub	sp, #20
 808d6cc:	f7ff feca 	bl	808d464 <_Balloc>
 808d6d0:	f100 0114 	add.w	r1, r0, #20
 808d6d4:	460b      	mov	r3, r1
 808d6d6:	2200      	movs	r2, #0
 808d6d8:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 808d6dc:	4543      	cmp	r3, r8
 808d6de:	d31d      	bcc.n	808d71c <__multiply+0x7c>
 808d6e0:	f104 0314 	add.w	r3, r4, #20
 808d6e4:	f105 0214 	add.w	r2, r5, #20
 808d6e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 808d6ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808d6f0:	9302      	str	r3, [sp, #8]
 808d6f2:	1b3b      	subs	r3, r7, r4
 808d6f4:	3b15      	subs	r3, #21
 808d6f6:	f023 0303 	bic.w	r3, r3, #3
 808d6fa:	3304      	adds	r3, #4
 808d6fc:	f104 0515 	add.w	r5, r4, #21
 808d700:	42af      	cmp	r7, r5
 808d702:	bf38      	it	cc
 808d704:	2304      	movcc	r3, #4
 808d706:	9301      	str	r3, [sp, #4]
 808d708:	9b02      	ldr	r3, [sp, #8]
 808d70a:	9203      	str	r2, [sp, #12]
 808d70c:	4293      	cmp	r3, r2
 808d70e:	d808      	bhi.n	808d722 <__multiply+0x82>
 808d710:	2e00      	cmp	r6, #0
 808d712:	dc5a      	bgt.n	808d7ca <__multiply+0x12a>
 808d714:	6106      	str	r6, [r0, #16]
 808d716:	b005      	add	sp, #20
 808d718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d71c:	f843 2b04 	str.w	r2, [r3], #4
 808d720:	e7dc      	b.n	808d6dc <__multiply+0x3c>
 808d722:	f8b2 a000 	ldrh.w	sl, [r2]
 808d726:	f1ba 0f00 	cmp.w	sl, #0
 808d72a:	d024      	beq.n	808d776 <__multiply+0xd6>
 808d72c:	4689      	mov	r9, r1
 808d72e:	f04f 0c00 	mov.w	ip, #0
 808d732:	f104 0e14 	add.w	lr, r4, #20
 808d736:	f85e 5b04 	ldr.w	r5, [lr], #4
 808d73a:	f8d9 b000 	ldr.w	fp, [r9]
 808d73e:	b2ab      	uxth	r3, r5
 808d740:	fa1f fb8b 	uxth.w	fp, fp
 808d744:	fb0a b303 	mla	r3, sl, r3, fp
 808d748:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 808d74c:	f8d9 5000 	ldr.w	r5, [r9]
 808d750:	4463      	add	r3, ip
 808d752:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808d756:	fb0a c50b 	mla	r5, sl, fp, ip
 808d75a:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 808d75e:	b29b      	uxth	r3, r3
 808d760:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 808d764:	4577      	cmp	r7, lr
 808d766:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808d76a:	f849 3b04 	str.w	r3, [r9], #4
 808d76e:	d8e2      	bhi.n	808d736 <__multiply+0x96>
 808d770:	9b01      	ldr	r3, [sp, #4]
 808d772:	f841 c003 	str.w	ip, [r1, r3]
 808d776:	9b03      	ldr	r3, [sp, #12]
 808d778:	3204      	adds	r2, #4
 808d77a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 808d77e:	f1b9 0f00 	cmp.w	r9, #0
 808d782:	d020      	beq.n	808d7c6 <__multiply+0x126>
 808d784:	468e      	mov	lr, r1
 808d786:	f04f 0a00 	mov.w	sl, #0
 808d78a:	680b      	ldr	r3, [r1, #0]
 808d78c:	f104 0c14 	add.w	ip, r4, #20
 808d790:	f8bc 5000 	ldrh.w	r5, [ip]
 808d794:	f8be b002 	ldrh.w	fp, [lr, #2]
 808d798:	b29b      	uxth	r3, r3
 808d79a:	fb09 b505 	mla	r5, r9, r5, fp
 808d79e:	44aa      	add	sl, r5
 808d7a0:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 808d7a4:	f84e 3b04 	str.w	r3, [lr], #4
 808d7a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 808d7ac:	f8be 5000 	ldrh.w	r5, [lr]
 808d7b0:	0c1b      	lsrs	r3, r3, #16
 808d7b2:	fb09 5303 	mla	r3, r9, r3, r5
 808d7b6:	4567      	cmp	r7, ip
 808d7b8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 808d7bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 808d7c0:	d8e6      	bhi.n	808d790 <__multiply+0xf0>
 808d7c2:	9d01      	ldr	r5, [sp, #4]
 808d7c4:	514b      	str	r3, [r1, r5]
 808d7c6:	3104      	adds	r1, #4
 808d7c8:	e79e      	b.n	808d708 <__multiply+0x68>
 808d7ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 808d7ce:	2b00      	cmp	r3, #0
 808d7d0:	d1a0      	bne.n	808d714 <__multiply+0x74>
 808d7d2:	3e01      	subs	r6, #1
 808d7d4:	e79c      	b.n	808d710 <__multiply+0x70>
	...

0808d7d8 <__pow5mult>:
 808d7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808d7dc:	4615      	mov	r5, r2
 808d7de:	f012 0203 	ands.w	r2, r2, #3
 808d7e2:	4606      	mov	r6, r0
 808d7e4:	460f      	mov	r7, r1
 808d7e6:	d007      	beq.n	808d7f8 <__pow5mult+0x20>
 808d7e8:	4c21      	ldr	r4, [pc, #132]	; (808d870 <__pow5mult+0x98>)
 808d7ea:	3a01      	subs	r2, #1
 808d7ec:	2300      	movs	r3, #0
 808d7ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808d7f2:	f7ff fe82 	bl	808d4fa <__multadd>
 808d7f6:	4607      	mov	r7, r0
 808d7f8:	10ad      	asrs	r5, r5, #2
 808d7fa:	d035      	beq.n	808d868 <__pow5mult+0x90>
 808d7fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808d7fe:	b93c      	cbnz	r4, 808d810 <__pow5mult+0x38>
 808d800:	2010      	movs	r0, #16
 808d802:	f7fb f8a7 	bl	8088954 <malloc>
 808d806:	e9c0 4401 	strd	r4, r4, [r0, #4]
 808d80a:	6270      	str	r0, [r6, #36]	; 0x24
 808d80c:	6004      	str	r4, [r0, #0]
 808d80e:	60c4      	str	r4, [r0, #12]
 808d810:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808d814:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808d818:	b94c      	cbnz	r4, 808d82e <__pow5mult+0x56>
 808d81a:	f240 2171 	movw	r1, #625	; 0x271
 808d81e:	4630      	mov	r0, r6
 808d820:	f7ff ff35 	bl	808d68e <__i2b>
 808d824:	2300      	movs	r3, #0
 808d826:	4604      	mov	r4, r0
 808d828:	f8c8 0008 	str.w	r0, [r8, #8]
 808d82c:	6003      	str	r3, [r0, #0]
 808d82e:	f04f 0900 	mov.w	r9, #0
 808d832:	07eb      	lsls	r3, r5, #31
 808d834:	d50a      	bpl.n	808d84c <__pow5mult+0x74>
 808d836:	4639      	mov	r1, r7
 808d838:	4622      	mov	r2, r4
 808d83a:	4630      	mov	r0, r6
 808d83c:	f7ff ff30 	bl	808d6a0 <__multiply>
 808d840:	4680      	mov	r8, r0
 808d842:	4639      	mov	r1, r7
 808d844:	4630      	mov	r0, r6
 808d846:	f7ff fe41 	bl	808d4cc <_Bfree>
 808d84a:	4647      	mov	r7, r8
 808d84c:	106d      	asrs	r5, r5, #1
 808d84e:	d00b      	beq.n	808d868 <__pow5mult+0x90>
 808d850:	6820      	ldr	r0, [r4, #0]
 808d852:	b938      	cbnz	r0, 808d864 <__pow5mult+0x8c>
 808d854:	4622      	mov	r2, r4
 808d856:	4621      	mov	r1, r4
 808d858:	4630      	mov	r0, r6
 808d85a:	f7ff ff21 	bl	808d6a0 <__multiply>
 808d85e:	6020      	str	r0, [r4, #0]
 808d860:	f8c0 9000 	str.w	r9, [r0]
 808d864:	4604      	mov	r4, r0
 808d866:	e7e4      	b.n	808d832 <__pow5mult+0x5a>
 808d868:	4638      	mov	r0, r7
 808d86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808d86e:	bf00      	nop
 808d870:	080904c8 	.word	0x080904c8

0808d874 <__lshift>:
 808d874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808d878:	460c      	mov	r4, r1
 808d87a:	4607      	mov	r7, r0
 808d87c:	4691      	mov	r9, r2
 808d87e:	6923      	ldr	r3, [r4, #16]
 808d880:	6849      	ldr	r1, [r1, #4]
 808d882:	eb03 1862 	add.w	r8, r3, r2, asr #5
 808d886:	68a3      	ldr	r3, [r4, #8]
 808d888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808d88c:	f108 0601 	add.w	r6, r8, #1
 808d890:	42b3      	cmp	r3, r6
 808d892:	db3f      	blt.n	808d914 <__lshift+0xa0>
 808d894:	4638      	mov	r0, r7
 808d896:	f7ff fde5 	bl	808d464 <_Balloc>
 808d89a:	2300      	movs	r3, #0
 808d89c:	4605      	mov	r5, r0
 808d89e:	f100 0114 	add.w	r1, r0, #20
 808d8a2:	f100 0210 	add.w	r2, r0, #16
 808d8a6:	4618      	mov	r0, r3
 808d8a8:	4553      	cmp	r3, sl
 808d8aa:	db36      	blt.n	808d91a <__lshift+0xa6>
 808d8ac:	6920      	ldr	r0, [r4, #16]
 808d8ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 808d8b2:	f104 0314 	add.w	r3, r4, #20
 808d8b6:	f019 091f 	ands.w	r9, r9, #31
 808d8ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 808d8be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 808d8c2:	d02e      	beq.n	808d922 <__lshift+0xae>
 808d8c4:	468a      	mov	sl, r1
 808d8c6:	2200      	movs	r2, #0
 808d8c8:	f1c9 0e20 	rsb	lr, r9, #32
 808d8cc:	6818      	ldr	r0, [r3, #0]
 808d8ce:	fa00 f009 	lsl.w	r0, r0, r9
 808d8d2:	4302      	orrs	r2, r0
 808d8d4:	f84a 2b04 	str.w	r2, [sl], #4
 808d8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 808d8dc:	459c      	cmp	ip, r3
 808d8de:	fa22 f20e 	lsr.w	r2, r2, lr
 808d8e2:	d8f3      	bhi.n	808d8cc <__lshift+0x58>
 808d8e4:	ebac 0304 	sub.w	r3, ip, r4
 808d8e8:	3b15      	subs	r3, #21
 808d8ea:	f023 0303 	bic.w	r3, r3, #3
 808d8ee:	3304      	adds	r3, #4
 808d8f0:	f104 0015 	add.w	r0, r4, #21
 808d8f4:	4560      	cmp	r0, ip
 808d8f6:	bf88      	it	hi
 808d8f8:	2304      	movhi	r3, #4
 808d8fa:	50ca      	str	r2, [r1, r3]
 808d8fc:	b10a      	cbz	r2, 808d902 <__lshift+0x8e>
 808d8fe:	f108 0602 	add.w	r6, r8, #2
 808d902:	3e01      	subs	r6, #1
 808d904:	4638      	mov	r0, r7
 808d906:	4621      	mov	r1, r4
 808d908:	612e      	str	r6, [r5, #16]
 808d90a:	f7ff fddf 	bl	808d4cc <_Bfree>
 808d90e:	4628      	mov	r0, r5
 808d910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d914:	3101      	adds	r1, #1
 808d916:	005b      	lsls	r3, r3, #1
 808d918:	e7ba      	b.n	808d890 <__lshift+0x1c>
 808d91a:	f842 0f04 	str.w	r0, [r2, #4]!
 808d91e:	3301      	adds	r3, #1
 808d920:	e7c2      	b.n	808d8a8 <__lshift+0x34>
 808d922:	3904      	subs	r1, #4
 808d924:	f853 2b04 	ldr.w	r2, [r3], #4
 808d928:	459c      	cmp	ip, r3
 808d92a:	f841 2f04 	str.w	r2, [r1, #4]!
 808d92e:	d8f9      	bhi.n	808d924 <__lshift+0xb0>
 808d930:	e7e7      	b.n	808d902 <__lshift+0x8e>

0808d932 <__mcmp>:
 808d932:	4603      	mov	r3, r0
 808d934:	690a      	ldr	r2, [r1, #16]
 808d936:	6900      	ldr	r0, [r0, #16]
 808d938:	b530      	push	{r4, r5, lr}
 808d93a:	1a80      	subs	r0, r0, r2
 808d93c:	d10d      	bne.n	808d95a <__mcmp+0x28>
 808d93e:	3314      	adds	r3, #20
 808d940:	3114      	adds	r1, #20
 808d942:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 808d946:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 808d94a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 808d94e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 808d952:	4295      	cmp	r5, r2
 808d954:	d002      	beq.n	808d95c <__mcmp+0x2a>
 808d956:	d304      	bcc.n	808d962 <__mcmp+0x30>
 808d958:	2001      	movs	r0, #1
 808d95a:	bd30      	pop	{r4, r5, pc}
 808d95c:	42a3      	cmp	r3, r4
 808d95e:	d3f4      	bcc.n	808d94a <__mcmp+0x18>
 808d960:	e7fb      	b.n	808d95a <__mcmp+0x28>
 808d962:	f04f 30ff 	mov.w	r0, #4294967295
 808d966:	e7f8      	b.n	808d95a <__mcmp+0x28>

0808d968 <__mdiff>:
 808d968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d96c:	460c      	mov	r4, r1
 808d96e:	4606      	mov	r6, r0
 808d970:	4611      	mov	r1, r2
 808d972:	4620      	mov	r0, r4
 808d974:	4692      	mov	sl, r2
 808d976:	f7ff ffdc 	bl	808d932 <__mcmp>
 808d97a:	1e05      	subs	r5, r0, #0
 808d97c:	d108      	bne.n	808d990 <__mdiff+0x28>
 808d97e:	4629      	mov	r1, r5
 808d980:	4630      	mov	r0, r6
 808d982:	f7ff fd6f 	bl	808d464 <_Balloc>
 808d986:	2301      	movs	r3, #1
 808d988:	e9c0 3504 	strd	r3, r5, [r0, #16]
 808d98c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d990:	bfa4      	itt	ge
 808d992:	4653      	movge	r3, sl
 808d994:	46a2      	movge	sl, r4
 808d996:	4630      	mov	r0, r6
 808d998:	f8da 1004 	ldr.w	r1, [sl, #4]
 808d99c:	bfa6      	itte	ge
 808d99e:	461c      	movge	r4, r3
 808d9a0:	2500      	movge	r5, #0
 808d9a2:	2501      	movlt	r5, #1
 808d9a4:	f7ff fd5e 	bl	808d464 <_Balloc>
 808d9a8:	f100 0814 	add.w	r8, r0, #20
 808d9ac:	f8da 7010 	ldr.w	r7, [sl, #16]
 808d9b0:	60c5      	str	r5, [r0, #12]
 808d9b2:	f10a 0210 	add.w	r2, sl, #16
 808d9b6:	f10a 0514 	add.w	r5, sl, #20
 808d9ba:	f04f 0c00 	mov.w	ip, #0
 808d9be:	46c2      	mov	sl, r8
 808d9c0:	6926      	ldr	r6, [r4, #16]
 808d9c2:	f104 0914 	add.w	r9, r4, #20
 808d9c6:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 808d9ca:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 808d9ce:	f852 bf04 	ldr.w	fp, [r2, #4]!
 808d9d2:	f859 3b04 	ldr.w	r3, [r9], #4
 808d9d6:	fa1f f18b 	uxth.w	r1, fp
 808d9da:	4461      	add	r1, ip
 808d9dc:	fa1f fc83 	uxth.w	ip, r3
 808d9e0:	0c1b      	lsrs	r3, r3, #16
 808d9e2:	eba1 010c 	sub.w	r1, r1, ip
 808d9e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 808d9ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 808d9ee:	b289      	uxth	r1, r1
 808d9f0:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808d9f4:	454e      	cmp	r6, r9
 808d9f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 808d9fa:	f84a 3b04 	str.w	r3, [sl], #4
 808d9fe:	d8e6      	bhi.n	808d9ce <__mdiff+0x66>
 808da00:	1b33      	subs	r3, r6, r4
 808da02:	3b15      	subs	r3, #21
 808da04:	f023 0303 	bic.w	r3, r3, #3
 808da08:	3415      	adds	r4, #21
 808da0a:	3304      	adds	r3, #4
 808da0c:	42a6      	cmp	r6, r4
 808da0e:	bf38      	it	cc
 808da10:	2304      	movcc	r3, #4
 808da12:	441d      	add	r5, r3
 808da14:	4443      	add	r3, r8
 808da16:	461e      	mov	r6, r3
 808da18:	462c      	mov	r4, r5
 808da1a:	4574      	cmp	r4, lr
 808da1c:	d30e      	bcc.n	808da3c <__mdiff+0xd4>
 808da1e:	f10e 0203 	add.w	r2, lr, #3
 808da22:	1b52      	subs	r2, r2, r5
 808da24:	f022 0203 	bic.w	r2, r2, #3
 808da28:	3d03      	subs	r5, #3
 808da2a:	45ae      	cmp	lr, r5
 808da2c:	bf38      	it	cc
 808da2e:	2200      	movcc	r2, #0
 808da30:	441a      	add	r2, r3
 808da32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 808da36:	b18b      	cbz	r3, 808da5c <__mdiff+0xf4>
 808da38:	6107      	str	r7, [r0, #16]
 808da3a:	e7a7      	b.n	808d98c <__mdiff+0x24>
 808da3c:	f854 8b04 	ldr.w	r8, [r4], #4
 808da40:	fa1f f288 	uxth.w	r2, r8
 808da44:	4462      	add	r2, ip
 808da46:	1411      	asrs	r1, r2, #16
 808da48:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 808da4c:	b292      	uxth	r2, r2
 808da4e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 808da52:	ea4f 4c21 	mov.w	ip, r1, asr #16
 808da56:	f846 2b04 	str.w	r2, [r6], #4
 808da5a:	e7de      	b.n	808da1a <__mdiff+0xb2>
 808da5c:	3f01      	subs	r7, #1
 808da5e:	e7e8      	b.n	808da32 <__mdiff+0xca>

0808da60 <__ulp>:
 808da60:	4b11      	ldr	r3, [pc, #68]	; (808daa8 <__ulp+0x48>)
 808da62:	400b      	ands	r3, r1
 808da64:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808da68:	2b00      	cmp	r3, #0
 808da6a:	dd02      	ble.n	808da72 <__ulp+0x12>
 808da6c:	2000      	movs	r0, #0
 808da6e:	4619      	mov	r1, r3
 808da70:	4770      	bx	lr
 808da72:	425b      	negs	r3, r3
 808da74:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 808da78:	f04f 0000 	mov.w	r0, #0
 808da7c:	f04f 0100 	mov.w	r1, #0
 808da80:	ea4f 5223 	mov.w	r2, r3, asr #20
 808da84:	da04      	bge.n	808da90 <__ulp+0x30>
 808da86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 808da8a:	fa43 f102 	asr.w	r1, r3, r2
 808da8e:	4770      	bx	lr
 808da90:	f1a2 0314 	sub.w	r3, r2, #20
 808da94:	2b1e      	cmp	r3, #30
 808da96:	bfd6      	itet	le
 808da98:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 808da9c:	2301      	movgt	r3, #1
 808da9e:	fa22 f303 	lsrle.w	r3, r2, r3
 808daa2:	4618      	mov	r0, r3
 808daa4:	4770      	bx	lr
 808daa6:	bf00      	nop
 808daa8:	7ff00000 	.word	0x7ff00000

0808daac <__b2d>:
 808daac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808dab0:	6907      	ldr	r7, [r0, #16]
 808dab2:	f100 0914 	add.w	r9, r0, #20
 808dab6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 808daba:	f857 6c04 	ldr.w	r6, [r7, #-4]
 808dabe:	f1a7 0804 	sub.w	r8, r7, #4
 808dac2:	4630      	mov	r0, r6
 808dac4:	f7ff fd95 	bl	808d5f2 <__hi0bits>
 808dac8:	f1c0 0320 	rsb	r3, r0, #32
 808dacc:	280a      	cmp	r0, #10
 808dace:	600b      	str	r3, [r1, #0]
 808dad0:	491f      	ldr	r1, [pc, #124]	; (808db50 <__b2d+0xa4>)
 808dad2:	dc17      	bgt.n	808db04 <__b2d+0x58>
 808dad4:	45c1      	cmp	r9, r8
 808dad6:	bf28      	it	cs
 808dad8:	2200      	movcs	r2, #0
 808dada:	f1c0 0c0b 	rsb	ip, r0, #11
 808dade:	fa26 f30c 	lsr.w	r3, r6, ip
 808dae2:	bf38      	it	cc
 808dae4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 808dae8:	ea43 0501 	orr.w	r5, r3, r1
 808daec:	f100 0315 	add.w	r3, r0, #21
 808daf0:	fa06 f303 	lsl.w	r3, r6, r3
 808daf4:	fa22 f20c 	lsr.w	r2, r2, ip
 808daf8:	ea43 0402 	orr.w	r4, r3, r2
 808dafc:	4620      	mov	r0, r4
 808dafe:	4629      	mov	r1, r5
 808db00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808db04:	45c1      	cmp	r9, r8
 808db06:	bf2e      	itee	cs
 808db08:	2200      	movcs	r2, #0
 808db0a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 808db0e:	f1a7 0808 	subcc.w	r8, r7, #8
 808db12:	f1b0 030b 	subs.w	r3, r0, #11
 808db16:	d016      	beq.n	808db46 <__b2d+0x9a>
 808db18:	f1c3 0720 	rsb	r7, r3, #32
 808db1c:	fa22 f107 	lsr.w	r1, r2, r7
 808db20:	45c8      	cmp	r8, r9
 808db22:	fa06 f603 	lsl.w	r6, r6, r3
 808db26:	ea46 0601 	orr.w	r6, r6, r1
 808db2a:	bf94      	ite	ls
 808db2c:	2100      	movls	r1, #0
 808db2e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 808db32:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 808db36:	fa02 f003 	lsl.w	r0, r2, r3
 808db3a:	40f9      	lsrs	r1, r7
 808db3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 808db40:	ea40 0401 	orr.w	r4, r0, r1
 808db44:	e7da      	b.n	808dafc <__b2d+0x50>
 808db46:	4614      	mov	r4, r2
 808db48:	ea46 0501 	orr.w	r5, r6, r1
 808db4c:	e7d6      	b.n	808dafc <__b2d+0x50>
 808db4e:	bf00      	nop
 808db50:	3ff00000 	.word	0x3ff00000

0808db54 <__d2b>:
 808db54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808db58:	461c      	mov	r4, r3
 808db5a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 808db5e:	2101      	movs	r1, #1
 808db60:	4690      	mov	r8, r2
 808db62:	f7ff fc7f 	bl	808d464 <_Balloc>
 808db66:	f3c4 0313 	ubfx	r3, r4, #0, #20
 808db6a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808db6e:	4607      	mov	r7, r0
 808db70:	bb2c      	cbnz	r4, 808dbbe <__d2b+0x6a>
 808db72:	9301      	str	r3, [sp, #4]
 808db74:	f1b8 0300 	subs.w	r3, r8, #0
 808db78:	d026      	beq.n	808dbc8 <__d2b+0x74>
 808db7a:	4668      	mov	r0, sp
 808db7c:	9300      	str	r3, [sp, #0]
 808db7e:	f7ff fd58 	bl	808d632 <__lo0bits>
 808db82:	9900      	ldr	r1, [sp, #0]
 808db84:	b1f0      	cbz	r0, 808dbc4 <__d2b+0x70>
 808db86:	9a01      	ldr	r2, [sp, #4]
 808db88:	f1c0 0320 	rsb	r3, r0, #32
 808db8c:	fa02 f303 	lsl.w	r3, r2, r3
 808db90:	430b      	orrs	r3, r1
 808db92:	40c2      	lsrs	r2, r0
 808db94:	617b      	str	r3, [r7, #20]
 808db96:	9201      	str	r2, [sp, #4]
 808db98:	9b01      	ldr	r3, [sp, #4]
 808db9a:	2b00      	cmp	r3, #0
 808db9c:	bf14      	ite	ne
 808db9e:	2102      	movne	r1, #2
 808dba0:	2101      	moveq	r1, #1
 808dba2:	61bb      	str	r3, [r7, #24]
 808dba4:	6139      	str	r1, [r7, #16]
 808dba6:	b1c4      	cbz	r4, 808dbda <__d2b+0x86>
 808dba8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808dbac:	4404      	add	r4, r0
 808dbae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808dbb2:	6034      	str	r4, [r6, #0]
 808dbb4:	6028      	str	r0, [r5, #0]
 808dbb6:	4638      	mov	r0, r7
 808dbb8:	b002      	add	sp, #8
 808dbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808dbbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808dbc2:	e7d6      	b.n	808db72 <__d2b+0x1e>
 808dbc4:	6179      	str	r1, [r7, #20]
 808dbc6:	e7e7      	b.n	808db98 <__d2b+0x44>
 808dbc8:	a801      	add	r0, sp, #4
 808dbca:	f7ff fd32 	bl	808d632 <__lo0bits>
 808dbce:	2101      	movs	r1, #1
 808dbd0:	9b01      	ldr	r3, [sp, #4]
 808dbd2:	6139      	str	r1, [r7, #16]
 808dbd4:	617b      	str	r3, [r7, #20]
 808dbd6:	3020      	adds	r0, #32
 808dbd8:	e7e5      	b.n	808dba6 <__d2b+0x52>
 808dbda:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808dbde:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808dbe2:	6030      	str	r0, [r6, #0]
 808dbe4:	6918      	ldr	r0, [r3, #16]
 808dbe6:	f7ff fd04 	bl	808d5f2 <__hi0bits>
 808dbea:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 808dbee:	6029      	str	r1, [r5, #0]
 808dbf0:	e7e1      	b.n	808dbb6 <__d2b+0x62>

0808dbf2 <__ratio>:
 808dbf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808dbf6:	4688      	mov	r8, r1
 808dbf8:	4669      	mov	r1, sp
 808dbfa:	4681      	mov	r9, r0
 808dbfc:	f7ff ff56 	bl	808daac <__b2d>
 808dc00:	460f      	mov	r7, r1
 808dc02:	4604      	mov	r4, r0
 808dc04:	460d      	mov	r5, r1
 808dc06:	4640      	mov	r0, r8
 808dc08:	a901      	add	r1, sp, #4
 808dc0a:	f7ff ff4f 	bl	808daac <__b2d>
 808dc0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808dc12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808dc16:	468b      	mov	fp, r1
 808dc18:	eba3 0c02 	sub.w	ip, r3, r2
 808dc1c:	e9dd 3200 	ldrd	r3, r2, [sp]
 808dc20:	1a9b      	subs	r3, r3, r2
 808dc22:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 808dc26:	2b00      	cmp	r3, #0
 808dc28:	bfd5      	itete	le
 808dc2a:	460a      	movle	r2, r1
 808dc2c:	462a      	movgt	r2, r5
 808dc2e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 808dc32:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 808dc36:	bfd8      	it	le
 808dc38:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 808dc3c:	465b      	mov	r3, fp
 808dc3e:	4602      	mov	r2, r0
 808dc40:	4639      	mov	r1, r7
 808dc42:	4620      	mov	r0, r4
 808dc44:	f7fd fb16 	bl	808b274 <__aeabi_ddiv>
 808dc48:	b003      	add	sp, #12
 808dc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808dc4e <__copybits>:
 808dc4e:	3901      	subs	r1, #1
 808dc50:	b570      	push	{r4, r5, r6, lr}
 808dc52:	1149      	asrs	r1, r1, #5
 808dc54:	6914      	ldr	r4, [r2, #16]
 808dc56:	3101      	adds	r1, #1
 808dc58:	f102 0314 	add.w	r3, r2, #20
 808dc5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808dc60:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808dc64:	1f05      	subs	r5, r0, #4
 808dc66:	42a3      	cmp	r3, r4
 808dc68:	d30c      	bcc.n	808dc84 <__copybits+0x36>
 808dc6a:	1aa3      	subs	r3, r4, r2
 808dc6c:	3b11      	subs	r3, #17
 808dc6e:	f023 0303 	bic.w	r3, r3, #3
 808dc72:	3211      	adds	r2, #17
 808dc74:	42a2      	cmp	r2, r4
 808dc76:	bf88      	it	hi
 808dc78:	2300      	movhi	r3, #0
 808dc7a:	4418      	add	r0, r3
 808dc7c:	2300      	movs	r3, #0
 808dc7e:	4288      	cmp	r0, r1
 808dc80:	d305      	bcc.n	808dc8e <__copybits+0x40>
 808dc82:	bd70      	pop	{r4, r5, r6, pc}
 808dc84:	f853 6b04 	ldr.w	r6, [r3], #4
 808dc88:	f845 6f04 	str.w	r6, [r5, #4]!
 808dc8c:	e7eb      	b.n	808dc66 <__copybits+0x18>
 808dc8e:	f840 3b04 	str.w	r3, [r0], #4
 808dc92:	e7f4      	b.n	808dc7e <__copybits+0x30>

0808dc94 <__any_on>:
 808dc94:	f100 0214 	add.w	r2, r0, #20
 808dc98:	6900      	ldr	r0, [r0, #16]
 808dc9a:	114b      	asrs	r3, r1, #5
 808dc9c:	4298      	cmp	r0, r3
 808dc9e:	b510      	push	{r4, lr}
 808dca0:	db11      	blt.n	808dcc6 <__any_on+0x32>
 808dca2:	dd0a      	ble.n	808dcba <__any_on+0x26>
 808dca4:	f011 011f 	ands.w	r1, r1, #31
 808dca8:	d007      	beq.n	808dcba <__any_on+0x26>
 808dcaa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808dcae:	fa24 f001 	lsr.w	r0, r4, r1
 808dcb2:	fa00 f101 	lsl.w	r1, r0, r1
 808dcb6:	428c      	cmp	r4, r1
 808dcb8:	d10b      	bne.n	808dcd2 <__any_on+0x3e>
 808dcba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808dcbe:	4293      	cmp	r3, r2
 808dcc0:	d803      	bhi.n	808dcca <__any_on+0x36>
 808dcc2:	2000      	movs	r0, #0
 808dcc4:	bd10      	pop	{r4, pc}
 808dcc6:	4603      	mov	r3, r0
 808dcc8:	e7f7      	b.n	808dcba <__any_on+0x26>
 808dcca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808dcce:	2900      	cmp	r1, #0
 808dcd0:	d0f5      	beq.n	808dcbe <__any_on+0x2a>
 808dcd2:	2001      	movs	r0, #1
 808dcd4:	e7f6      	b.n	808dcc4 <__any_on+0x30>

0808dcd6 <_calloc_r>:
 808dcd6:	b538      	push	{r3, r4, r5, lr}
 808dcd8:	fb02 f501 	mul.w	r5, r2, r1
 808dcdc:	4629      	mov	r1, r5
 808dcde:	f7fa fe79 	bl	80889d4 <_malloc_r>
 808dce2:	4604      	mov	r4, r0
 808dce4:	b118      	cbz	r0, 808dcee <_calloc_r+0x18>
 808dce6:	462a      	mov	r2, r5
 808dce8:	2100      	movs	r1, #0
 808dcea:	f7fe f903 	bl	808bef4 <memset>
 808dcee:	4620      	mov	r0, r4
 808dcf0:	bd38      	pop	{r3, r4, r5, pc}

0808dcf2 <__ascii_wctomb>:
 808dcf2:	4603      	mov	r3, r0
 808dcf4:	4608      	mov	r0, r1
 808dcf6:	b141      	cbz	r1, 808dd0a <__ascii_wctomb+0x18>
 808dcf8:	2aff      	cmp	r2, #255	; 0xff
 808dcfa:	d904      	bls.n	808dd06 <__ascii_wctomb+0x14>
 808dcfc:	228a      	movs	r2, #138	; 0x8a
 808dcfe:	f04f 30ff 	mov.w	r0, #4294967295
 808dd02:	601a      	str	r2, [r3, #0]
 808dd04:	4770      	bx	lr
 808dd06:	2001      	movs	r0, #1
 808dd08:	700a      	strb	r2, [r1, #0]
 808dd0a:	4770      	bx	lr

0808dd0c <__aeabi_d2lz>:
 808dd0c:	b538      	push	{r3, r4, r5, lr}
 808dd0e:	460c      	mov	r4, r1
 808dd10:	4605      	mov	r5, r0
 808dd12:	4621      	mov	r1, r4
 808dd14:	4628      	mov	r0, r5
 808dd16:	2200      	movs	r2, #0
 808dd18:	2300      	movs	r3, #0
 808dd1a:	f7fd fbf3 	bl	808b504 <__aeabi_dcmplt>
 808dd1e:	b928      	cbnz	r0, 808dd2c <__aeabi_d2lz+0x20>
 808dd20:	4628      	mov	r0, r5
 808dd22:	4621      	mov	r1, r4
 808dd24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808dd28:	f7fe b858 	b.w	808bddc <__aeabi_d2ulz>
 808dd2c:	4628      	mov	r0, r5
 808dd2e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 808dd32:	f7fe f853 	bl	808bddc <__aeabi_d2ulz>
 808dd36:	4240      	negs	r0, r0
 808dd38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808dd3c:	bd38      	pop	{r3, r4, r5, pc}
 808dd3e:	bf00      	nop

0808dd40 <dynalib_user>:
 808dd40:	0051 0808 0091 0808 00b9 0808 00bd 0808     Q...............
 808dd50:	0000 0000 0100 0402 1008 2e25 5832 5400     ..........%.2X.T
 808dd60:	6d65 6570 6172 7574 6572 7220 6165 6964     emperature readi
 808dd70:	676e 6620 6f72 206d 4948 3848 3231 0030     ng from HIH8120.
 808dd80:	6554 706d 7265 7461 7275 2065 6572 6461     Temperature read
 808dd90:	6e69 2067 7266 6d6f 5420 504d 3633 5400     ing from TMP36.T
 808dda0:	6d65 6570 6172 7574 6572 7220 6165 6964     emperature readi
 808ddb0:	676e 6620 6f72 206d 4d42 2045 6f66 2072     ng from BME for 
 808ddc0:	6c41 6870 7361 6e65 6573 4800 6d75 6469     Alphasense.Humid
 808ddd0:	7469 2079 6572 6461 6e69 2067 7266 6d6f     ity reading from
 808dde0:	4820 4849 3138 3032 4800 6d75 6469 7469      HIH8120.Humidit
 808ddf0:	2079 6572 6461 6e69 2067 7266 6d6f 4220     y reading from B
 808de00:	454d 5300 6174 7472 6f20 2066 6c61 6870     ME.Start of alph
 808de10:	2061 2032 6572 6461 4300 756f 646c 276e     a 2 read.Couldn'
 808de20:	2074 6f63 6d6d 6e75 6369 7461 2065 6977     t communicate wi
 808de30:	6874 4c20 504d 3139 3030 2030 0032 6168     th LMP91000 2.ha
 808de40:	666c 7620 6572 3266 6120 7364 0031 7453     lf vref2 ads1.St
 808de50:	7461 7375 3d20 203d 2030 7266 6d6f 4c20     atus == 0 from L
 808de60:	504d 3139 3030 2030 2032 7473 7461 7375     MP91000 2 status
 808de70:	7220 6765 2d00 3939 5700 6972 6974 676e      reg.-99.Writing
 808de80:	6420 7461 2061 6f74 6c20 676f 6620 6c69      data to log fil
 808de90:	2e65 4600 6c69 2065 7453 7261 2074 6974     e..File Start ti
 808dea0:	656d 7473 6d61 3a70 0020 6e55 6261 656c     mestamp: .Unable
 808deb0:	7420 206f 7277 7469 2065 6f74 6c20 676f      to write to log
 808dec0:	6620 6c69 0065 6e69 7469 4700 4147 4500      file.init.GGA.E
 808ded0:	7272 726f 7220 6165 6964 676e 4720 5350     rror reading GPS
 808dee0:	4700 5350 7520 6374 7320 7274 6e69 3a67     .GPS utc string:
 808def0:	0020 614c 6974 7574 6564 7320 7274 6e69      .Latitude strin
 808df00:	3a67 0020 6f6c 676e 7469 6475 2065 7473     g: .longitude st
 808df10:	6972 676e 203a 4200 4441 6920 646e 7865     ring: .BAD index
 808df20:	6920 206e 6572 6461 7047 5373 7274 6165      in readGpsStrea
 808df30:	0a6d 4500 7272 726f 7220 6165 6964 676e     m..Error reading
 808df40:	4720 5350 5220 434d 5200 6365 6965 6576      GPS RMC.Receive
 808df50:	2064 6162 2064 6e69 6564 2078 6e69 7220     d bad index in r
 808df60:	6165 4764 7370 7453 6572 6d61 6144 6574     eadGpsStreamDate
 808df70:	5300 6174 7472 6f20 2066 6c61 6870 2061     .Start of alpha 
 808df80:	6572 6461 4300 756f 646c 276e 2074 6f63     read.Couldn't co
 808df90:	6d6d 6e75 6369 7461 2065 6977 6874 4c20     mmunicate with L
 808dfa0:	504d 3139 3030 5f30 0031 6148 666c 6f76     MP91000_1.Halfvo
 808dfb0:	746c 203a 3125 322e 0a66 000d 6148 666c     lt: %1.2f...Half
 808dfc0:	6f76 746c 6820 6769 6568 2072 6874 6e61     volt higher than
 808dfd0:	3020 352e 5300 6174 7574 2073 203d 2030      0.5.Status = 0 
 808dfe0:	7266 6d6f 4c20 504d 3139 3030 2030 7473     from LMP91000 st
 808dff0:	7461 7375 7220 6765 4c00 504d 3031 3030     atus reg.LMP1000
 808e000:	7320 6174 7574 2073 203d 0030 4f43 6d20      status = 0.CO m
 808e010:	6165 7573 6572 656d 746e 3a73 2020 0d0a     easurements:  ..
 808e020:	4100 5f30 6167 3a73 2520 0a64 000d 3141     .A0_gas: %d...A1
 808e030:	615f 7875 203a 6425 0d0a 4100 5f32 6574     _aux: %d...A2_te
 808e040:	706d 203a 6425 0d0a 6800 6c61 5f66 7276     mp: %d...half_vr
 808e050:	6665 203a 6425 0d0a 4000 0021 002c 6553     ef: %d...@!.,.Se
 808e060:	646e 6e69 2067 656e 2077 6977 6966 6320     nding new wifi c
 808e070:	6572 6564 746e 6169 736c 7420 206f 5345     redentials to ES
 808e080:	0050 7553 6363 7365 2173 5a00 0026 6547     P.Success!.Z&.Ge
 808e090:	7474 6e69 2067 5141 5320 6e79 2063 6164     tting AQ Sync da
 808e0a0:	6174 6620 6f72 206d 7365 0070 6854 7369     ta from esp.This
 808e0b0:	6920 2073 6863 7261 7620 7265 6973 6e6f      is char version
 808e0c0:	6f20 2066 6572 6963 7665 6465 5320 7274      of recieved Str
 808e0d0:	6e69 3a67 0020 6e55 6261 656c 7420 206f     ing: .Unable to 
 808e0e0:	6567 2074 5141 7953 636e 6420 7461 2061     get AQSync data 
 808e0f0:	7266 6d6f 4520 5053 202c 6f63 6e75 6574     from ESP, counte
 808e100:	2072 6e69 6564 3a78 2520 2e31 6631 0d0a     r index: %1.1f..
 808e110:	4000 5400 6968 2073 7369 7720 6168 2074     .@.This is what 
 808e120:	2049 6d61 7020 6275 696c 6873 6e69 3a67     I am publishing:
 808e130:	0020 002a 754f 7074 7475 6974 676e 4320      .*.Outputting C
 808e140:	204f 6f74 5020 2e49 2d00 2500 2f64 6d25     O to PI..-.%d/%m
 808e150:	252f 2c79 4825 253a 3a4d 5325 0a00 260d     /%y,%H:%M:%S...&
 808e160:	4f00 646c 6920 706e 7475 6320 7275 6572     .Old input curre
 808e170:	746e 6c20 6d69 7469 203a 6425 0d0a 4e00     nt limit: %d...N
 808e180:	7765 6920 706e 7475 6320 7275 6572 746e     ew input current
 808e190:	6c20 6d69 7469 203a 6425 0d0a 4900 636e      limit: %d...Inc
 808e1a0:	6572 7361 6e69 2067 6843 7261 6567 6320     reasing Charge c
 808e1b0:	7275 6572 746e 6620 6f72 206d 6425 6d20     urrent from %d m
 808e1c0:	2041 6f74 0020 656e 2077 6863 7261 6567     A to .new charge
 808e1d0:	6320 7275 6572 746e 6f20 2066 6425 6d20      current of %d m
 808e1e0:	0a41 000d 7543 7272 6e65 2074 7473 726f     A...Current stor
 808e1f0:	6465 7320 6973 3a64 0020 7543 7272 6e65     ed ssid: .Curren
 808e200:	2074 7473 726f 6465 7020 7361 7773 726f     t stored passwor
 808e210:	3a64 0020 6c50 6165 6573 6520 746e 7265     d: .Please enter
 808e220:	7020 7361 7773 726f 2064 6e69 6f20 6472      password in ord
 808e230:	7265 7420 206f 616d 656b 6320 6168 676e     er to make chang
 808e240:	7365 0a2e 000d 6f62 6c75 0064 6150 7373     es....bould.Pass
 808e250:	6f77 6472 6320 726f 6572 7463 0021 6e45     word correct!.En
 808e260:	6574 2072 656e 2077 7373 6469 003a 6f59     ter new ssid:.Yo
 808e270:	7275 6e20 7765 7320 6973 2064 6977 6c6c     ur new ssid will
 808e280:	6220 3a65 0020 7349 7420 6968 2073 6b6f      be: .Is this ok
 808e290:	7961 283f 2079 726f 6e20 0029 6153 6976     ay?(y or n).Savi
 808e2a0:	676e 6e20 7765 7320 6973 0064 6e45 6574     ng new ssid.Ente
 808e2b0:	2072 656e 2077 6170 7373 6f77 6472 5900     r new password.Y
 808e2c0:	756f 2072 656e 2077 6170 7373 6f77 6472     our new password
 808e2d0:	7720 6c69 206c 6562 203a 5300 7661 6e69      will be: .Savin
 808e2e0:	2067 656e 2077 6170 7373 6f77 6472 6f00     g new password.o
 808e2f0:	616b 2c79 6e20 206f 7270 626f 656c 0a6d     kay, no problem.
 808e300:	000d 6c50 6165 6573 6520 746e 7265 7020     ..Please enter p
 808e310:	7361 7773 726f 2064 6e69 6f20 6472 7265     assword in order
 808e320:	7420 206f 6e65 6261 656c 6420 7461 2061      to enable data 
 808e330:	7570 6873 7420 206f 6553 736e 6269 656c     push to Sensible
 808e340:	4920 746f 6900 736d 6e65 6973 6c62 0065      Iot.imsensible.
 808e350:	6e45 6261 696c 676e 7320 6e65 6973 6c62     Enabling sensibl
 808e360:	2065 6f69 2074 6164 6174 7020 7375 2e68     e iot data push.
 808e370:	0a00 490d 636e 726f 6572 7463 7020 7361     ...Incorrect pas
 808e380:	7773 726f 2164 5000 656c 7361 2065 6e65     sword!.Please en
 808e390:	6574 2072 6170 7373 6f77 6472 6920 206e     ter password in 
 808e3a0:	726f 6564 2072 6f74 6120 7070 796c 6420     order to apply d
 808e3b0:	6665 7561 746c 7320 7465 6974 676e 0073     efault settings.
 808e3c0:	6150 7373 6f77 6472 6320 726f 6572 7463     Password correct
 808e3d0:	202c 6572 6573 7474 6e69 2067 6c61 206c     , resetting all 
 808e3e0:	6573 7474 6e69 7367 7420 206f 6564 6166     settings to defa
 808e3f0:	6c75 2174 2020 6c50 6165 6573 7220 7365     ult!  Please res
 808e400:	7465 7920 756f 2072 4449 7420 206f 6874     et your ID to th
 808e410:	2065 6e6f 2065 6873 776f 206e 6e6f 7920     e one shown on y
 808e420:	756f 2072 6e65 6c63 736f 7275 2e65 4500     our enclosure..E
 808e430:	746e 7265 6e20 7765 4420 7665 6369 2065     nter new Device 
 808e440:	6974 656d 6120 646e 6420 7461 2065 3128     time and date (1
 808e450:	2030 6964 6967 2074 7065 636f 2068 6974     0 digit epoch ti
 808e460:	656d 7473 6d61 2970 003a 0d0a 654e 2077     mestamp):...New 
 808e470:	6544 6976 6563 5420 6d69 3a65 0a00 490d     Device Time:...I
 808e480:	766e 6c61 6469 7620 6c61 6575 0021 7543     nvalid value!.Cu
 808e490:	7272 6e65 2074 4f43 2032 6c73 706f 3a65     rrent CO2 slope:
 808e4a0:	2000 7070 006d 6e45 6574 2072 656e 2077     . ppm.Enter new 
 808e4b0:	4f43 2032 6c73 706f 0a65 000d 0d0a 654e     CO2 slope.....Ne
 808e4c0:	2077 4f43 2032 6c73 706f 3a65 0020 7543     w CO2 slope: .Cu
 808e4d0:	7272 6e65 2074 4f43 7320 6f6c 6570 003a     rrent CO slope:.
 808e4e0:	6e45 6574 2072 656e 2077 4f43 7320 6f6c     Enter new CO slo
 808e4f0:	6570 0d0a 0a00 4e0d 7765 4320 414f 7320     pe.....New COA s
 808e500:	6f6c 6570 203a 4300 7275 6572 746e 5020     lope: .Current P
 808e510:	314d 7320 6f6c 6570 003a 6e45 6574 2072     M1 slope:.Enter 
 808e520:	656e 2077 4d50 2031 6c73 706f 0a65 000d     new PM1 slope...
 808e530:	0d0a 654e 2077 4d50 2031 6c73 706f 3a65     ..New PM1 slope:
 808e540:	0020 7543 7272 6e65 2074 4d50 2e32 2035      .Current PM2.5 
 808e550:	6c73 706f 3a65 4500 746e 7265 6e20 7765     slope:.Enter new
 808e560:	5020 324d 352e 7320 6f6c 6570 0d0a 0a00      PM2.5 slope....
 808e570:	4e0d 7765 5020 324d 352e 7320 6f6c 6570     .New PM2.5 slope
 808e580:	203a 4300 7275 6572 746e 5020 314d 2030     : .Current PM10 
 808e590:	6c73 706f 3a65 4500 746e 7265 6e20 7765     slope:.Enter new
 808e5a0:	5020 314d 2030 6c73 706f 0a65 000d 0d0a      PM10 slope.....
 808e5b0:	654e 2077 4d50 3031 7320 6f6c 6570 203a     New PM10 slope: 
 808e5c0:	4300 7275 6572 746e 5420 6d65 6570 6172     .Current Tempera
 808e5d0:	7574 6572 7320 6f6c 6570 003a 4420 6765     ture slope:. Deg
 808e5e0:	6572 7365 4320 4500 746e 7265 6e20 7765     rees C.Enter new
 808e5f0:	5420 6d65 6570 6172 7574 6572 7320 6f6c      Temperature slo
 808e600:	6570 0d0a 0a00 4e0d 7765 5420 6d65 6570     pe.....New Tempe
 808e610:	6172 7574 6572 7320 6f6c 6570 203a 4300     rature slope: .C
 808e620:	7275 6572 746e 5020 6572 7373 7275 2065     urrent Pressure 
 808e630:	6c73 706f 3a65 2000 6f74 7272 4500 746e     slope:. torr.Ent
 808e640:	7265 6e20 7765 5020 6572 7373 7275 2065     er new Pressure 
 808e650:	6c73 706f 0a65 000d 0d0a 654e 2077 7250     slope.....New Pr
 808e660:	7365 7573 6572 7320 6f6c 6570 203a 4300     essure slope: .C
 808e670:	7275 6572 746e 5220 2048 6c73 706f 3a65     urrent RH slope:
 808e680:	2000 0025 6e45 6574 2072 656e 2077 4852     . %.Enter new RH
 808e690:	7320 6f6c 6570 0d0a 0a00 4e0d 7765 5220      slope.....New R
 808e6a0:	2048 6c73 706f 3a65 0020 4f43 203a 3125     H slope: .CO: %1
 808e6b0:	332e 2066 7070 0a6d 000d 6f43 6d6d 6e61     .3f ppm...Comman
 808e6c0:	3a64 2020 6544 6373 6972 7470 6f69 006e     d:  Description.
 808e6d0:	3a61 2020 6441 756a 7473 4320 324f 7320     a:  Adjust CO2 s
 808e6e0:	6f6c 6570 6200 203a 4120 6a64 7375 2074     lope.b:  Adjust 
 808e6f0:	4f43 2032 657a 6f72 6300 203a 4120 6a64     CO2 zero.c:  Adj
 808e700:	7375 2074 4f43 7320 6f6c 6570 6400 203a     ust CO slope.d: 
 808e710:	4120 6a64 7375 2074 4f43 7a20 7265 006f      Adjust CO zero.
 808e720:	3a65 2020 6441 756a 7473 5020 314d 7320     e:  Adjust PM1 s
 808e730:	6f6c 6570 6600 203a 4120 6a64 7375 2074     lope.f:  Adjust 
 808e740:	4d50 2031 657a 6f72 6700 203a 4120 6a64     PM1 zero.g:  Adj
 808e750:	7375 2074 4d50 2e32 2035 6c73 706f 0065     ust PM2.5 slope.
 808e760:	3a68 2020 6441 756a 7473 5020 324d 352e     h:  Adjust PM2.5
 808e770:	7a20 7265 006f 3a69 2020 6441 756a 7473      zero.i:  Adjust
 808e780:	5020 314d 2030 6c73 706f 0065 3a6a 2020      PM10 slope.j:  
 808e790:	6441 756a 7473 5020 314d 2030 657a 6f72     Adjust PM10 zero
 808e7a0:	6b00 203a 4120 6a64 7375 2074 6554 706d     .k:  Adjust Temp
 808e7b0:	7265 7461 7275 2065 6c73 706f 0065 3a6c     erature slope.l:
 808e7c0:	2020 6441 756a 7473 5420 6d65 6570 6172       Adjust Tempera
 808e7d0:	7574 6572 7a20 7265 006f 3a6d 2020 6441     ture zero.m:  Ad
 808e7e0:	756a 7473 5020 6572 7373 7275 2065 6c73     just Pressure sl
 808e7f0:	706f 0065 3a6e 2020 6441 756a 7473 5020     ope.n:  Adjust P
 808e800:	6572 7373 7275 2065 657a 6f72 6f00 203a     ressure zero.o: 
 808e810:	4120 6a64 7375 2074 7548 696d 6964 7974      Adjust Humidity
 808e820:	7320 6f6c 6570 7000 203a 4120 6a64 7375      slope.p:  Adjus
 808e830:	2074 7548 696d 6964 7974 7a20 7265 006f     t Humidity zero.
 808e840:	3a71 2020 6e45 6261 656c 7320 7265 6169     q:  Enable seria
 808e850:	206c 6564 7562 6767 6e69 0067 3a72 2020     l debugging.r:  
 808e860:	6944 6173 6c62 2065 6573 6972 6c61 6420     Disable serial d
 808e870:	6265 6775 6967 676e 7300 203a 4f20 7475     ebugging.s:  Out
 808e880:	7570 2074 6568 6461 7265 7320 7274 6e69     put header strin
 808e890:	0067 3a74 2020 6e45 6574 2072 656e 2077     g.t:  Enter new 
 808e8a0:	6974 656d 6120 646e 6420 7461 0065 3a75     time and date.u:
 808e8b0:	2020 6e45 6574 2072 656e 2077 6974 656d       Enter new time
 808e8c0:	7a20 6e6f 0065 3a76 2020 6441 756a 7473      zone.v:  Adjust
 808e8d0:	7420 6568 4420 7665 6369 2065 4449 7700      the Device ID.w
 808e8e0:	203a 4720 7465 7720 6669 2069 7263 6465     :  Get wifi cred
 808e8f0:	6e65 6974 6c61 0073 3a79 2020 6e45 6261     entials.y:  Enab
 808e900:	656c 6320 6c65 756c 616c 0072 3a7a 2020     le cellular.z:  
 808e910:	6944 6173 6c62 2065 6563 6c6c 6c75 7261     Disable cellular
 808e920:	3100 203a 4120 6a64 7375 2074 6167 2073     .1:  Adjust gas 
 808e930:	6f6c 6577 2072 696c 696d 0074 3a32 2020     lower limit.2:  
 808e940:	6441 756a 7473 6720 7361 7520 7070 7265     Adjust gas upper
 808e950:	6c20 6d69 7469 3300 203a 4720 7465 6220      limit.3:  Get b
 808e960:	6975 646c 7620 7265 6973 6e6f 3400 203a     uild version.4: 
 808e970:	4520 616e 6c62 2065 7a4f 6e6f 0065 3a35      Enable Ozone.5:
 808e980:	2020 6944 6173 6c62 2065 7a4f 6e6f 0065       Disable Ozone.
 808e990:	3a36 2020 6e45 6261 656c 5620 434f 7327     6:  Enable VOC's
 808e9a0:	3700 203a 4420 7369 6261 656c 5620 434f     .7:  Disable VOC
 808e9b0:	7327 3800 203a 4f20 7475 7570 2074 6874     's.8:  Output th
 808e9c0:	2065 4d50 4349 7320 7379 6574 206d 6f63     e PMIC system co
 808e9d0:	666e 6769 7275 7461 6f69 006e 3a39 2020     nfiguration.9:  
 808e9e0:	6e49 7263 6165 6573 7420 6568 6320 6168     Increase the cha
 808e9f0:	6772 2065 7563 7272 6e65 2074 7962 3620     rge current by 6
 808ea00:	2034 416d 3000 203a 4920 636e 6572 7361     4 mA.0:  Increas
 808ea10:	2065 6874 2065 7563 7272 6e65 2074 6e69     e the current in
 808ea20:	7570 2074 696c 696d 2074 7962 3120 3030     put limit by 100
 808ea30:	6d20 0041 3a41 2020 754f 7074 7475 4320      mA.A:  Output C
 808ea40:	204f 6f63 736e 6174 746e 796c 6120 646e     O constantly and
 808ea50:	7220 7061 6469 796c 4200 203a 4f20 7475      rapidly.B:  Out
 808ea60:	7570 2074 4d50 6320 6e6f 7473 6e61 6c74     put PM constantl
 808ea70:	2079 6e61 2064 6172 6970 6c64 0079 3a43     y and rapidly.C:
 808ea80:	2020 6843 6e61 6567 7420 6d65 6570 6172       Change tempera
 808ea90:	7574 6572 7520 696e 7374 7420 206f 6543     ture units to Ce
 808eaa0:	736c 7569 0073 3a44 2020 6944 6173 6c62     lsius.D:  Disabl
 808eab0:	2065 4d54 3350 2036 6574 706d 7265 7461     e TMP36 temperat
 808eac0:	7275 2065 6573 736e 726f 6120 646e 7520     ure sensor and u
 808ead0:	6573 4220 454d 3836 2030 6574 706d 7265     se BME680 temper
 808eae0:	7461 7275 0065 3a45 2020 6e45 6261 656c     ature.E:  Enable
 808eaf0:	5420 504d 3633 7420 6d65 6570 6172 7574      TMP36 temperatu
 808eb00:	6572 7320 6e65 6f73 2072 6e61 2064 6964     re sensor and di
 808eb10:	6173 6c62 2065 4d42 3645 3038 7420 6d65     sable BME680 tem
 808eb20:	6570 6172 7574 6572 4600 203a 4320 6168     perature.F:  Cha
 808eb30:	676e 2065 6574 706d 7265 7461 7275 2065     nge temperature 
 808eb40:	6e75 7469 2073 6f74 4620 6861 6572 686e     units to Fahrenh
 808eb50:	6965 0074 3a47 2020 6552 6461 6f20 6f7a     eit.G:  Read ozo
 808eb60:	656e 6620 6f72 206d 6e61 6c61 676f 6920     ne from analog i
 808eb70:	706e 7475 2820 6f6e 2074 6964 6967 6174     nput (not digita
 808eb80:	6c6c 2079 202d 6f62 7261 2064 6564 6570     lly - board depe
 808eb90:	646e 6e65 2974 4800 203a 5220 6165 2064     ndent).H:  Read 
 808eba0:	7a6f 6e6f 2065 6964 6967 6174 6c6c 2079     ozone digitally 
 808ebb0:	6e28 746f 7420 7268 756f 6867 6120 616e     (not through ana
 808ebc0:	6f6c 2067 6e69 7570 2074 202d 6f62 7261     log input - boar
 808ebd0:	2064 6564 6570 646e 6e65 2974 4900 203a     d dependent).I: 
 808ebe0:	4120 6a64 7375 2074 7266 7165 6575 636e      Adjust frequenc
 808ebf0:	2079 6f66 2072 7075 6f6c 6461 6e69 2067     y for uploading 
 808ec00:	6874 6f72 6775 2068 6563 6c6c 6c75 7261     through cellular
 808ec10:	4a00 203a 5220 7365 7465 4520 5053 202c     .J:  Reset ESP, 
 808ec20:	4f43 2c32 5020 616c 746e 776f 7265 4b00     CO2, Plantower.K
 808ec30:	203a 4320 6e6f 6974 756e 756f 2073 6573     :  Continuous se
 808ec40:	6972 6c61 6f20 7475 7570 2074 666f 4720     rial output of G
 808ec50:	5350 4c00 203a 5720 6972 6574 6420 6665     PS.L:  Write def
 808ec60:	7561 746c 7320 7465 6974 676e 0073 3a4d     ault settings.M:
 808ec70:	2020 6e45 6261 656c 3220 2530 6220 7461       Enable 20% bat
 808ec80:	6574 7972 7420 7268 7365 6f68 646c 6c20     tery threshold l
 808ec90:	6d69 7469 6e69 0067 3a4e 2020 6944 6173     imiting.N:  Disa
 808eca0:	6c62 2065 3032 2025 6162 7474 7265 2079     ble 20% battery 
 808ecb0:	6874 6572 6873 6c6f 2064 696c 696d 6974     threshold limiti
 808ecc0:	676e 5720 5241 494e 474e 2121 4f00 203a     ng WARNING!!.O: 
 808ecd0:	4520 616e 6c62 2065 6f6c 2077 6f70 6577      Enable low powe
 808ece0:	2072 6f66 2072 5047 2053 6f6d 7564 656c     r for GPS module
 808ecf0:	5000 203a 5420 7275 206e 666f 2066 4142     .P:  Turn off BA
 808ed00:	4654 5445 5100 203a 4120 6c6c 776f 4220     TFET.Q:  Allow B
 808ed10:	5441 4546 2054 6f74 7420 7275 206e 6e6f     ATFET to turn on
 808ed20:	5200 203a 4420 7369 6261 656c 4120 4342     .R:  Disable ABC
 808ed30:	6c20 676f 6369 6620 726f 4320 324f 7320      logic for CO2 s
 808ed40:	6e65 6f73 0072 3a53 2020 6e45 6261 656c     ensor.S:  Enable
 808ed50:	4120 4342 6c20 676f 6369 6620 726f 4320      ABC logic for C
 808ed60:	324f 7320 6e65 6f73 0072 3a54 2020 6e45     O2 sensor.T:  En
 808ed70:	6261 656c 642f 7369 6261 656c 4820 4849     able/disable HIH
 808ed80:	3138 3032 5220 2048 6573 736e 726f 5500     8120 RH sensor.U
 808ed90:	203a 5320 6977 6374 2068 6f73 6b63 7465     :  Switch socket
 808eda0:	7720 6568 6572 4320 204f 7369 7220 6165      where CO is rea
 808edb0:	2064 7266 6d6f 5700 203a 4520 616e 6c62     d from.W:  Enabl
 808edc0:	2f65 6944 6173 6c62 2065 6f67 676f 656c     e/Disable google
 808edd0:	6c20 636f 7461 6f69 206e 6573 7672 6369      location servic
 808ede0:	7365 5600 203a 4320 6c61 6269 6172 6574     es.V:  Calibrate
 808edf0:	4320 324f 7320 6e65 6f73 2072 202d 756d      CO2 sensor - mu
 808ee00:	7473 7320 7075 6c70 2079 6d61 6962 6e65     st supply ambien
 808ee10:	2074 656c 6576 206c 6728 206f 756f 7374     t level (go outs
 808ee20:	6469 2165 0029 3a5a 2020 754f 7074 7475     ide!).Z:  Output
 808ee30:	6320 6c65 756c 616c 2072 6e69 6f66 6d72      cellular inform
 808ee40:	7461 6f69 206e 4328 4943 2c44 4920 454d     ation (CCID, IME
 808ee50:	2c49 6520 6374 0029 3a21 2020 6f43 746e     I, etc).!:  Cont
 808ee60:	6e69 6f75 7375 7320 7265 6169 206c 756f     inuous serial ou
 808ee70:	7074 7475 6f20 2066 4f56 2743 0073 2040     tput of VOC's.@ 
 808ee80:	2020 6e45 6261 656c 442f 7369 6261 656c       Enable/Disable
 808ee90:	5320 6e65 6973 6c62 2d65 6f69 2074 6164      Sensible-iot da
 808eea0:	6174 7020 7375 2e68 2020 6649 6520 616e     ta push.  If ena
 808eeb0:	6c62 6465 202c 6974 656d 7a20 6e6f 2065     bled, time zone 
 808eec0:	6977 6c6c 6220 2065 6769 6f6e 6572 2064     will be ignored 
 808eed0:	202d 5455 2043 6977 6c6c 6220 2065 7375     - UTC will be us
 808eee0:	6465 002e 2023 2020 6e45 6261 656c 442f     ed..#   Enable/D
 808eef0:	7369 6261 656c 6320 7261 6f74 7070 7265     isable cartopper
 808ef00:	7020 776f 7265 6d20 646f 2e65 2020 6649      power mode.  If
 808ef10:	6520 616e 6c62 6465 202c 6261 6573 636e      enabled, absenc
 808ef20:	2065 666f 6520 7478 7265 616e 206c 6f70     e of external po
 808ef30:	6577 2072 6977 6c6c 7320 6f74 2070 6563     wer will stop ce
 808ef40:	6c6c 6c75 7261 002e 3a3f 2020 754f 7074     llular..?:  Outp
 808ef50:	7475 7420 6968 2073 656d 756e 7800 203a     ut this menu.x: 
 808ef60:	4520 6978 7374 7420 6968 2073 656d 756e      Exits this menu
 808ef70:	7000 6d61 7075 5000 6275 696c 6873 6465     .pamup.Published
 808ef80:	7020 6d61 7075 6420 7461 2161 4300 6c65      pamup data!.Cel
 808ef90:	756c 616c 2072 7369 6420 7369 6261 656c     lular is disable
 808efa0:	2e64 4300 756f 646c 276e 2074 6f63 6e6e     d..Couldn't conn
 808efb0:	6365 2074 6f74 7020 7261 6974 6c63 2e65     ect to particle.
 808efc0:	3b00 4c00 6e69 2065 6f74 7720 6972 6574     .;.Line to write
 808efd0:	7420 206f 6c63 756f 3a64 6200 616c 6668      to cloud:.blahf
 808efe0:	726f 6f6e 0077 6553 646e 6e69 2067 6164     ornow.Sending da
 808eff0:	6174 7420 206f 7365 2070 6f74 7520 6c70     ta to esp to upl
 808f000:	616f 2064 6976 2061 6977 6966 2e2e 002e     oad via wifi....
 808f010:	6553 646e 6e69 2067 6164 6174 7420 206f     Sending data to 
 808f020:	7365 2070 6f74 7520 6c70 616f 2064 6976     esp to upload vi
 808f030:	2061 6977 6966 5700 6972 6974 676e 7220     a wifi.Writing r
 808f040:	776f 7420 206f 6966 656c 002e 4544 2c56     ow to file..DEV,
 808f050:	4f43 7028 6d70 2c29 4f43 2832 7070 296d     CO(ppm),CO2(ppm)
 808f060:	562c 434f 2873 4149 2951 502c 314d 502c     ,VOCs(IAQ),PM1,P
 808f070:	324d 355f 502c 314d 2c30 2854 2943 502c     M2_5,PM10,T(C),P
 808f080:	6572 7373 6d28 6142 2972 522c 2848 2925     ress(mBar),RH(%)
 808f090:	4f2c 2833 7070 2962 422c 7461 2874 2925     ,O3(ppb),Batt(%)
 808f0a0:	532c 646e 6428 2962 4c2c 7461 7469 6475     ,Snd(db),Latitud
 808f0b0:	2c65 6f4c 676e 7469 6475 2c65 2f4e 2c41     e,Longitude,N/A,
 808f0c0:	2f4e 2c41 6144 6574 542f 6d69 0065 0024     N/A,Date/Time.$.
 808f0d0:	2644 4700 7465 6974 676e 6120 7371 6e79     D&.Getting aqsyn
 808f0e0:	2063 6964 6761 6f6e 7473 6369 2073 7266     c diagnostics fr
 808f0f0:	6d6f 6520 7073 5500 616e 6c62 2065 6f74     om esp.Unable to
 808f100:	6720 7465 4120 5351 6e79 2063 6964 6761      get AQSync diag
 808f110:	6620 6f72 206d 5345 2c50 6320 756f 746e      from ESP, count
 808f120:	7265 6920 646e 7865 203a 3125 312e 0a66     er index: %1.1f.
 808f130:	000d 7055 6f6c 6461 5141 7953 636e 6944     ..UploadAQSyncDi
 808f140:	6761 6f6e 7473 6369 6700 7465 6565 7270     agnostic.geteepr
 808f150:	6d6f 6164 6174 4100 5351 6e79 4463 6169     omdata.AQSyncDia
 808f160:	0067 4f43 7a5f 7265 416f 2e00 7874 0074     g.CO_zeroA..txt.
 808f170:	6843 6365 696b 676e 6620 726f 7320 2064     Checking for sd 
 808f180:	6163 6472 6c00 676f 005f 7243 6165 6574     card.log_.Create
 808f190:	2064 656e 2077 6966 656c 7420 206f 6f6c     d new file to lo
 808f1a0:	2067 6f74 7520 4453 6320 7261 3a64 0020     g to uSD card: .
 808f1b0:	6f4e 7520 4453 6320 7261 2064 6564 6574     No uSD card dete
 808f1c0:	7463 6465 002e 7453 7261 6974 676e 4c20     cted..Starting L
 808f1d0:	504d 3139 3030 2030 4f43 6920 696e 6974     MP91000 CO initi
 808f1e0:	6c61 7a69 7461 6f69 006e 6f43 6c75 6e64     alization.Couldn
 808f1f0:	7427 6320 6d6f 756d 696e 6163 6574 7720     't communicate w
 808f200:	7469 2068 4d4c 3950 3031 3030 315f 6620     ith LMP91000_1 f
 808f210:	726f 4320 004f 6e49 7469 6169 696c 657a     or CO.Initialize
 808f220:	2064 4d4c 3950 3031 3030 315f 6620 726f     d LMP91000_1 for
 808f230:	4320 004f 6e49 7469 6169 696c 657a 2064      CO.Initialized 
 808f240:	4d4c 3950 3031 3030 6620 726f 4320 004f     LMP91000 for CO.
 808f250:	6f43 6c75 2064 6f6e 2074 6f63 6d6d 6e75     Could not commun
 808f260:	6369 7461 2065 6977 6874 4120 6164 7266     icate with Adafr
 808f270:	6975 5f74 4441 3153 3131 2035 6f66 2072     uit_ADS1115 for 
 808f280:	4f43 5300 6174 7472 6e69 2067 4d4c 3950     CO.Starting LMP9
 808f290:	3031 3030 325f 6920 696e 6974 6c61 7a69     1000_2 initializ
 808f2a0:	7461 6f69 006e 6f43 6c75 6e64 7427 6320     ation.Couldn't c
 808f2b0:	6d6f 756d 696e 6163 6574 7720 7469 2068     ommunicate with 
 808f2c0:	4d4c 3950 3031 3030 6620 726f 3220 4900     LMP91000 for 2.I
 808f2d0:	696e 6974 6c61 7a69 6465 4c20 504d 3139     nitialized LMP91
 808f2e0:	3030 2030 6f66 2072 4f43 3220 4500 5053     000 for CO 2.ESP
 808f2f0:	7220 7365 7465 0021 5746 5620 7265 6973      reset!.FW Versi
 808f300:	6e6f 203a 4200 6975 646c 203a 5300 7379     on: .Build: .Sys
 808f310:	6574 206d 6576 7372 6f69 3a6e 2520 0073     tem version: %s.
 808f320:	7543 7272 6e65 2074 6544 6976 6563 4920     Current Device I
 808f330:	3a44 5000 656c 7361 2065 6e65 6574 2072     D:.Please enter 
 808f340:	6170 7373 6f77 6472 6920 206e 726f 6564     password in orde
 808f350:	2072 6f74 6320 6168 676e 2065 6874 2065     r to change the 
 808f360:	4449 4500 746e 7265 6e20 7765 4420 7665     ID.Enter new Dev
 808f370:	6369 2065 4449 003a 0d0a 654e 2077 6544     ice ID:...New De
 808f380:	6976 6563 4920 3a44 4500 746e 7265 6e20     vice ID:.Enter n
 808f390:	7765 4420 7665 6369 2065 6974 656d 7a20     ew Device time z
 808f3a0:	6e6f 2065 2d28 3231 302e 7420 206f 3431     one (-12.0 to 14
 808f3b0:	302e 0029 0d0a 654e 2077 6544 6976 6563     .0)...New Device
 808f3c0:	7420 6d69 2065 6f7a 656e 003a 7543 7272      time zone:.Curr
 808f3d0:	6e65 2074 6f6c 6577 2072 696c 696d 3a74     ent lower limit:
 808f3e0:	5000 656c 7361 2065 6e65 6574 2072 6170     .Please enter pa
 808f3f0:	7373 6f77 6472 6920 206e 726f 6564 2072     ssword in order 
 808f400:	6f74 6320 6168 676e 2065 6874 2065 6f6c     to change the lo
 808f410:	6577 2072 696c 696d 0074 6e45 6574 2072     wer limit.Enter 
 808f420:	656e 2077 6f6c 6577 2072 696c 696d 3a74     new lower limit:
 808f430:	0d0a 0a00 4e0d 7765 6c20 776f 7265 6c20     .....New lower l
 808f440:	6d69 7469 003a 7543 7272 6e65 2074 7075     imit:.Current up
 808f450:	6570 2072 696c 696d 3a74 5000 656c 7361     per limit:.Pleas
 808f460:	2065 6e65 6574 2072 6170 7373 6f77 6472     e enter password
 808f470:	6920 206e 726f 6564 2072 6f74 6320 6168      in order to cha
 808f480:	676e 2065 6874 2065 7075 6570 2072 696c     nge the upper li
 808f490:	696d 0074 6e45 6574 2072 656e 2077 7075     mit.Enter new up
 808f4a0:	6570 2072 696c 696d 3a74 0d0a 0a00 4e0d     per limit:.....N
 808f4b0:	7765 7520 7070 7265 6c20 6d69 7469 003a     ew upper limit:.
 808f4c0:	7543 7272 6e65 2074 7246 7165 6575 636e     Current Frequenc
 808f4d0:	3a79 0020 7e28 2032 6573 6f63 646e 2029     y: .(~2 second) 
 808f4e0:	656d 7361 7275 6d65 6e65 7374 4500 746e     measurements.Ent
 808f4f0:	7265 6e20 7765 6120 6f6d 6e75 0a74 000d     er new amount...
 808f500:	0d0a 654e 2077 7246 7165 6575 636e 3a79     ..New Frequency:
 808f510:	0020 7543 7272 6e65 2074 4f43 2032 657a      .Current CO2 ze
 808f520:	6f72 003a 6e45 6574 2072 656e 2077 4f43     ro:.Enter new CO
 808f530:	2032 655a 6f72 0d0a 0a00 4e0d 7765 4320     2 Zero.....New C
 808f540:	324f 7a20 7265 3a6f 0020 7543 7272 6e65     O2 zero: .Curren
 808f550:	2074 4f43 415f 7a20 7265 3a6f 2000 7070     t CO_A zero:. pp
 808f560:	0062 6e45 6574 2072 656e 2077 4f43 5a20     b.Enter new CO Z
 808f570:	7265 0a6f 000d 0d0a 654e 2077 4f43 7a20     ero.....New CO z
 808f580:	7265 3a6f 0020 7543 7272 6e65 2074 4d50     ero: .Current PM
 808f590:	2031 657a 6f72 003a 7520 2f67 336d 4500     1 zero:. ug/m3.E
 808f5a0:	746e 7265 6e20 7765 5020 314d 5a20 7265     nter new PM1 Zer
 808f5b0:	0a6f 000d 0d0a 654e 2077 4d50 2031 657a     o.....New PM1 ze
 808f5c0:	6f72 203a 4300 7275 6572 746e 5020 324d     ro: .Current PM2
 808f5d0:	352e 7a20 7265 3a6f 4500 746e 7265 6e20     .5 zero:.Enter n
 808f5e0:	7765 5020 324d 352e 5a20 7265 0a6f 000d     ew PM2.5 Zero...
 808f5f0:	0d0a 654e 2077 4d50 2e32 2035 657a 6f72     ..New PM2.5 zero
 808f600:	203a 4300 7275 6572 746e 5020 314d 2030     : .Current PM10 
 808f610:	657a 6f72 003a 7520 2f6d 336d 4500 746e     zero:. um/m3.Ent
 808f620:	7265 6e20 7765 5020 314d 2030 655a 6f72     er new PM10 Zero
 808f630:	0d0a 0a00 4e0d 7765 5020 314d 2030 657a     .....New PM10 ze
 808f640:	6f72 203a 4300 7275 6572 746e 5420 6d65     ro: .Current Tem
 808f650:	6570 6172 7574 6572 7a20 7265 3a6f 4500     perature zero:.E
 808f660:	746e 7265 6e20 7765 5420 6d65 6570 6172     nter new Tempera
 808f670:	7574 6572 5a20 7265 0a6f 000d 0d0a 654e     ture Zero.....Ne
 808f680:	2077 6554 706d 7265 7461 7275 2065 657a     w Temperature ze
 808f690:	6f72 203a 4300 7275 6572 746e 5020 6572     ro: .Current Pre
 808f6a0:	7373 7275 2065 657a 6f72 003a 6e45 6574     ssure zero:.Ente
 808f6b0:	2072 656e 2077 7250 7365 7573 6572 5a20     r new Pressure Z
 808f6c0:	7265 0a6f 000d 0d0a 654e 2077 7250 7365     ero.....New Pres
 808f6d0:	7573 6572 7a20 7265 3a6f 0020 7543 7272     sure zero: .Curr
 808f6e0:	6e65 2074 4852 7a20 7265 3a6f 4500 746e     ent RH zero:.Ent
 808f6f0:	7265 6e20 7765 5220 2048 655a 6f72 0d0a     er new RH Zero..
 808f700:	0a00 4e0d 7765 5220 2048 657a 6f72 203a     ...New RH zero: 
 808f710:	4d00 6e65 3e75 5300 7265 6169 206c 6564     .Menu>.Serial de
 808f720:	7562 6767 6e69 2067 6e65 6261 656c 2e64     bugging enabled.
 808f730:	5300 7265 6169 206c 6564 7562 6767 6e69     .Serial debuggin
 808f740:	2067 6964 6173 6c62 6465 002e 6e45 6261     g disabled..Enab
 808f750:	696c 676e 4320 6c65 756c 616c 2e72 4300     ling Cellular..C
 808f760:	6c65 756c 616c 2072 6c61 6572 6461 2079     ellular already 
 808f770:	6e65 6261 656c 2e64 4400 7369 6261 696c     enabled..Disabli
 808f780:	676e 4320 6c65 756c 616c 0072 6543 6c6c     ng Cellular.Cell
 808f790:	6c75 7261 6120 726c 6165 7964 6420 7369     ular already dis
 808f7a0:	6261 656c 2e64 4f00 7475 7570 7474 6e69     abled..Outputtin
 808f7b0:	2067 6f6e 6d72 6c61 796c 4f00 7475 7570     g normally.Outpu
 808f7c0:	7474 6e69 2067 6e6f 796c 5020 004d 6554     tting only PM.Te
 808f7d0:	706d 7265 7461 7275 2065 6e75 7469 2073     mperature units 
 808f7e0:	6c61 6572 6461 2079 6573 2074 6f74 4320     already set to C
 808f7f0:	6c65 6973 7375 002e 6944 6173 6c62 6e69     elsius..Disablin
 808f800:	2067 656e 2077 6574 706d 7265 7461 7275     g new temperatur
 808f810:	2065 6573 736e 726f 5400 6d65 6570 6172     e sensor.Tempera
 808f820:	7574 6572 7320 6e65 6f73 2072 6c61 6572     ture sensor alre
 808f830:	6461 2079 6964 6173 6c62 6465 5400 6d65     ady disabled.Tem
 808f840:	6570 6172 7574 6572 7320 6e65 6f73 2072     perature sensor 
 808f850:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 808f860:	6554 706d 7265 7461 6575 7320 6e65 6f73     Temperatue senso
 808f870:	2072 6f6e 2077 6e65 6261 656c 0064 6554     r now enabled.Te
 808f880:	706d 7265 7461 7275 2065 6e75 7469 2073     mperature units 
 808f890:	6c61 6572 6461 2079 6573 2074 6f74 4620     already set to F
 808f8a0:	6861 6572 686e 6965 2e74 4100 616e 6f6c     ahrenheit..Analo
 808f8b0:	2067 6572 6461 6e69 2067 666f 6f20 6f7a     g reading of ozo
 808f8c0:	656e 6120 726c 6165 7964 6520 616e 6c62     ne already enabl
 808f8d0:	6465 4100 616e 6f6c 2067 6572 6461 6e69     ed.Analog readin
 808f8e0:	2067 666f 6f20 6f7a 656e 6e20 776f 6520     g of ozone now e
 808f8f0:	616e 6c62 6465 4400 6769 7469 6c61 7220     nabled.Digital r
 808f900:	6165 6964 676e 6f20 2066 7a6f 6e6f 2065     eading of ozone 
 808f910:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 808f920:	6944 6967 6174 206c 6572 6461 6e69 2067     Digital reading 
 808f930:	666f 6f20 6f7a 656e 6e20 776f 6520 616e     of ozone now ena
 808f940:	6c62 6465 4f00 7475 7570 7474 6e69 2067     bled.Outputting 
 808f950:	5047 2053 6f63 746e 6e69 6f75 7375 796c     GPS continuously
 808f960:	4200 7461 6574 7972 7420 7268 7365 6f68     .Battery thresho
 808f970:	646c 6120 726c 6165 7964 6520 616e 6c62     ld already enabl
 808f980:	6465 4500 616e 6c62 6e69 2067 6162 7474     ed.Enabling batt
 808f990:	7265 2079 6874 6572 6873 6c6f 2064 696c     ery threshold li
 808f9a0:	696d 6974 676e 4200 7461 6574 7972 7420     miting.Battery t
 808f9b0:	7268 7365 6f68 646c 6120 726c 6165 7964     hreshold already
 808f9c0:	6420 7369 6261 656c 0064 6944 6173 6c62      disabled.Disabl
 808f9d0:	6e69 2067 6162 7474 7265 2079 6874 6572     ing battery thre
 808f9e0:	6873 6c6f 2064 696c 696d 6974 676e 4500     shold limiting.E
 808f9f0:	616e 6c62 6e69 2067 6f6c 2077 6f70 6577     nabling low powe
 808fa00:	2072 6f66 2072 7067 0073 7554 6e72 6e69     r for gps.Turnin
 808fa10:	2067 666f 2066 6162 6674 7465 4100 6c6c     g off batfet.All
 808fa20:	776f 6e69 2067 6162 6674 7465 7420 206f     owing batfet to 
 808fa30:	7574 6e72 6f20 006e 6944 6173 6c62 6e69     turn on.Disablin
 808fa40:	2067 4241 2043 6f6c 6967 2063 6f66 2072     g ABC logic for 
 808fa50:	4f43 2032 6573 736e 726f 4100 4342 6c20     CO2 sensor.ABC l
 808fa60:	676f 6369 6120 726c 6165 7964 6420 7369     ogic already dis
 808fa70:	6261 656c 0064 6e45 6261 696c 676e 6120     abled.Enabling a
 808fa80:	6362 6c20 676f 6369 6620 726f 4320 324f     bc logic for CO2
 808fa90:	7320 6e65 6f73 0072 4241 2043 6f6c 6967      sensor.ABC logi
 808faa0:	2063 6c61 6572 6461 2079 6e65 6261 656c     c already enable
 808fab0:	0064 6e45 6261 696c 676e 4820 4849 3138     d.Enabling HIH81
 808fac0:	3032 5220 2048 6573 736e 726f 4400 7369     20 RH sensor.Dis
 808fad0:	6261 696c 676e 4820 4849 3138 3032 5220     abling HIH8120 R
 808fae0:	2048 6573 736e 726f 4e00 776f 7220 6165     H sensor.Now rea
 808faf0:	6964 676e 4320 204f 7266 6d6f 5520 3032     ding CO from U20
 808fb00:	412d 706c 6168 0032 6f4e 2077 6572 6461     -Alpha2.Now read
 808fb10:	6e69 2067 4f43 6620 6f72 206d 3155 2d39     ing CO from U19-
 808fb20:	6c41 6870 3161 5200 7365 7465 6e69 2067     Alpha1.Reseting 
 808fb30:	6874 2065 4f43 2032 6573 736e 726f 4400     the CO2 sensor.D
 808fb40:	7369 6261 696c 676e 6720 6f6f 6c67 2065     isabling google 
 808fb50:	6f6c 6163 6974 6e6f 7320 7265 6976 6563     location service
 808fb60:	2e73 4500 616e 6c62 6e69 2067 6f67 676f     s..Enabling goog
 808fb70:	656c 6c20 636f 7461 6f69 206e 6573 7672     le location serv
 808fb80:	6369 7365 002e 6547 7474 6e69 2067 6563     ices..Getting ce
 808fb90:	6c6c 6c75 7261 6920 666e 726f 616d 6974     llular informati
 808fba0:	6e6f 202c 6874 7369 6d20 7961 7420 6b61     on, this may tak
 808fbb0:	2065 2061 6877 6c69 2e65 2e2e 4900 454d     e a while....IME
 808fbc0:	3d49 7325 4900 534d 3d49 7325 4900 4343     I=%s.IMSI=%s.ICC
 808fbd0:	4449 253d 0073 5041 2050 6556 7372 6f69     ID=%s.APP Versio
 808fbe0:	3a6e 0020 6e45 6261 696c 676e 4f20 6f7a     n: .Enabling Ozo
 808fbf0:	656e 4f00 6f7a 656e 6120 726c 6165 7964     ne.Ozone already
 808fc00:	6520 616e 6c62 6465 4400 7369 6261 696c      enabled.Disabli
 808fc10:	676e 4f20 6f7a 656e 4f00 6f7a 656e 6120     ng Ozone.Ozone a
 808fc20:	726c 6165 7964 6420 7369 6261 656c 0064     lready disabled.
 808fc30:	6e45 6261 696c 676e 5620 434f 0073 4f56     Enabling VOCs.VO
 808fc40:	7343 6120 726c 6165 7964 6520 616e 6c62     Cs already enabl
 808fc50:	6465 4400 7369 6261 696c 676e 5620 434f     ed.Disabling VOC
 808fc60:	7327 5600 434f 7327 6120 726c 6165 7964     's.VOC's already
 808fc70:	6420 7369 6261 656c 0064 6146 6c75 3a74      disabled.Fault:
 808fc80:	0020 7953 7473 6d65 7320 6174 7574 3a73      .System status:
 808fc90:	0020 754f 7074 7475 6974 676e 5620 434f      .Outputting VOC
 808fca0:	2073 6f63 746e 6e69 6f75 7375 796c 2021     s continuously! 
 808fcb0:	5020 6572 7373 6120 796e 6220 7475 6f74      Press any butto
 808fcc0:	206e 6f74 6520 6978 2e74 2e2e 4600 6961     n to exit....Fai
 808fcd0:	656c 2064 6f74 7220 6165 2064 4d42 3645     led to read BME6
 808fce0:	3038 5400 6f56 7363 253d 2e31 6630 202c     80.TVocs=%1.0f, 
 808fcf0:	6554 706d 253d 2e31 6631 202c 7270 7365     Temp=%1.1f, pres
 808fd00:	3d73 3125 312e 2c66 7220 3d68 3125 312e     s=%1.1f, rh=%1.1
 808fd10:	0a66 000d 6944 6173 6c62 6e69 2067 6573     f...Disabling se
 808fd20:	736e 6269 656c 6920 746f 6420 7461 2061     nsible iot data 
 808fd30:	7570 6873 002e 6944 6173 6c62 6e69 2067     push..Disabling 
 808fd40:	6163 2072 6f74 7070 7265 7020 776f 7265     car topper power
 808fd50:	202e 0020 6e45 6261 696c 676e 6320 7261     .  .Enabling car
 808fd60:	7420 706f 6570 2072 6f70 6577 2e72 2020      topper power.  
 808fd70:	6649 6e20 206f 7865 6574 6e72 6c61 7020     If no external p
 808fd80:	776f 7265 202c 7973 7473 6d65 7720 6c69     ower, system wil
 808fd90:	206c 7574 6e72 6f20 6666 002e 7845 7469     l turn off..Exit
 808fda0:	6e69 2067 6573 6972 6c61 6d20 6e65 2e75     ing serial menu.
 808fdb0:	2e2e 4900 636e 6d6f 6e69 2067 7962 6574     ...Incoming byte
 808fdc0:	003a 6f43 6e6e 6365 6974 676e 7420 206f     :.Connecting to 
 808fdd0:	6563 6c6c 6c75 7261 6e20 7465 6f77 6b72     cellular network
 808fde0:	6100 7466 7265 6320 6c65 756c 616c 4f72     .after cellularO
 808fdf0:	006e 6641 6574 2072 6563 6c6c 6c75 7261     n.After cellular
 808fe00:	6e4f 4100 7466 7265 7020 7261 6974 6c63     On.After particl
 808fe10:	2065 6f63 6e6e 6365 0074 6573 7474 6e69     e connect.settin
 808fe20:	2067 7274 6569 5f64 6563 6c6c 6c75 7261     g tried_cellular
 808fe30:	635f 6e6f 656e 7463 7420 206f 6166 736c     _connect to fals
 808fe40:	0065 6944 6373 6e6f 656e 7463 6e69 2067     e.Disconnecting 
 808fe50:	7266 6d6f 6320 6c65 756c 616c 2072 656e     from cellular ne
 808fe60:	7774 726f 006b 6f47 6e69 2067 6f74 7320     twork.Going to s
 808fe70:	656c 7065 6220 6365 7561 6573 6220 7461     leep because bat
 808fe80:	6574 7972 6920 2073 6562 6f6c 2077 3032     tery is below 20
 808fe90:	2025 6863 7261 6567 0000 0000               % charge....

0808fe9c <_ZTV4File>:
	...
 808fea4:	095f 0808 096f 0808 0989 0808 0983 0808     _...o...........
 808feb4:	0943 0808 09ad 0808 09a7 0808 09a1 0808     C...............

0808fec4 <_ZTV6SdFile>:
	...
 808fecc:	095d 0808 0961 0808 0a49 0808 097d 0808     ]...a...I...}...

0808fedc <_ZTV5SdFat>:
	...
 808fee4:	09e5 0808 09dd 0808 09d5 0808 09cd 0808     ................
 808fef4:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 808ff04:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 808ff14:	831a 0000                                   ....

0808ff18 <_ZTV10PowerCheck>:
	...
 808ff20:	60a5 0808 60bd 0808 6143 696c 7262 7461     .`...`..Calibrat
 808ff30:	6e69 2067 4f43 0032                         ing CO2.

0808ff38 <_ZTV5SdSpi>:
	...
 808ff40:	7071 0808 7081 0808 706d 0808 70f9 0808     qp...p..mp...p..
 808ff50:	711d 0808 710d 0808 7161 0808               .q...q..aq..

0808ff5c <_ZTV7HIH61XX>:
	...
 808ff64:	7d2d 0808 7d3d 0808 7e7d 0808 6564 6976     -}..=}..}~..devi
 808ff74:	6563 6f4c 6163 6f74 0072 5441 5426 0000     ceLocator.AT&T..

0808ff84 <_ZTV23GoogleMapsDeviceLocator>:
	...
 808ff8c:	7f19 0808 7f39 0808 5954 4550 555f 4b4e     ....9...TYPE_UNK
 808ff9c:	4f4e 4e57 5400 5059 5f45 4b4f 5400 5059     NOWN.TYPE_OK.TYP
 808ffac:	5f45 5245 4f52 0052 5954 4550 435f 4e4f     E_ERROR.TYPE_CON
 808ffbc:	454e 5443 5400 5059 5f45 4f4e 4143 5252     NECT.TYPE_NOCARR
 808ffcc:	4549 0052 5954 4550 4e5f 444f 4149 544c     IER.TYPE_NODIALT
 808ffdc:	4e4f 0045 5954 4550 425f 5355 0059 5954     ONE.TYPE_BUSY.TY
 808ffec:	4550 4e5f 414f 534e 4557 0052 5954 4550     PE_NOANSWER.TYPE
 808fffc:	505f 4f52 504d 0054 5954 4550 505f 554c     _PROMPT.TYPE_PLU
 809000c:	0053 5954 4550 415f 4f42 5452 4445 7400     S.TYPE_ABORTED.t
 809001c:	7079 3d65 7830 7825 6300 6c65 756c 616c     ype=0x%x.cellula
 809002c:	2072 6572 7073 6e6f 6573 7420 7079 3d65     r response type=
 809003c:	7325 6c20 6e65 253d 0064 6e5c 5c00 0072     %s len=%d.\n.\r.
 809004c:	7830 3025 7832 4100 2b54 4743 494d 0a0d     0x%02x.AT+CGMI..
 809005c:	4100 2b54 4743 4e53 0a0d 4300 4943 0044     .AT+CGSN...CCID.
 809006c:	5441 432b 4943 0d44 000a 2b0a 7325 203a     AT+CCID....+%s: 
 809007c:	0000 0000                                   ....

08090080 <_ZTV28CellularHelperStringResponse>:
	...
 8090088:	82ed 0808                                   ....

0809008c <_ZTV32CellularHelperPlusStringResponse>:
	...
 8090094:	8325 0808                                   %...

08090098 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 8090098:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

080900a8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80900a8:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 80900b8:	766f 0066 7061 0070 005a 2b25 3330 3a64     ovf.app.Z.%+03d:
 80900c8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80900d8:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80900e8:	0000 0000                                   ....

080900ec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80900f4:	9e65 0808 9e6b 0808 9ea9 0808 9e79 0808     e...k.......y...
 8090104:	9e67 0808                                   g...

08090108 <_ZTV9IPAddress>:
	...
 8090110:	a3fd 0808 a3ed 0808 a3ef 0808               ............

0809011c <_ZTV9USBSerial>:
	...
 8090124:	a491 0808 a4f7 0808 a4cf 0808 945d 0808     ............]...
 8090134:	a4c1 0808 a493 0808 a4a3 0808 a4f1 0808     ................
 8090144:	a4b3 0808 a48d 0808                         ........

0809014c <_ZTVN5spark13CellularClassE>:
	...
 8090154:	a6bb 0808 a6b1 0808 a6a7 0808 a62d 0808     ............-...
 8090164:	a69b 0808 0a7d 0808 a68f 0808 a687 0808     ....}...........
 8090174:	a67d 0808 a673 0808 a637 0808               }...s...7...

08090180 <_ZTV11USARTSerial>:
	...
 8090188:	0941 0808 0a89 0808 a737 0808 945d 0808     A.......7...]...
 8090198:	a707 0808 a723 0808 a715 0808 a731 0808     ....#.......1...
 80901a8:	a6f5 0808 a6f9 0808                         ........

080901b0 <_ZTV7TwoWire>:
	...
 80901b8:	a815 0808 a85f 0808 a837 0808 a817 0808     ...._...7.......
 80901c8:	a83f 0808 a847 0808 a84f 0808 a857 0808     ?...G...O...W...

080901d8 <_ZTVN5spark12NetworkClassE>:
	...
 80901e0:	a96d 0808 a977 0808 a981 0808 a98b 0808     m...w...........
 80901f0:	a995 0808 a9a1 0808 a9ad 0808 a9b9 0808     ................
 8090200:	a9c1 0808 a9cb 0808 a9d5 0808               ............

0809020c <_ZSt7nothrow>:
 809020c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 809021c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

0809022d <day_name.4782>:
 809022d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 809023d:	6972 6153                                    riSat

08090242 <mon_name.4783>:
 8090242:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8090252:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8090262:	4476 6365 6e69 7469 0079                    vDecinity.

0809026c <fpi.6203>:
 809026c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 809027c:	0000 0000                                   ....

08090280 <fpinan.6239>:
 8090280:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

08090298 <tinytens>:
 8090298:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80902a8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80902b8:	6f43 64ac 0628 1168                         Co.d(.h.

080902c0 <_ctype_>:
 80902c0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80902d0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80902e0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80902f0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8090300:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8090310:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8090320:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8090330:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8090340:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080903c4 <_C_numeric_locale>:
 80903c4:	fbbb 0808 0075 0809 013c 2000 4f50 4953     ....u...<.. POSI
 80903d4:	0058 0000                                   X...

080903d8 <__mprec_bigtens>:
 80903d8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80903e8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80903f8:	bf3c 7f73 4fdd 7515                         <.s..O.u

08090400 <__mprec_tens>:
 8090400:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8090410:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8090420:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8090430:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8090440:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8090450:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8090460:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8090470:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8090480:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8090490:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80904a0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80904b0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80904c0:	9db4 79d9 7843 44ea                         ...yCx.D

080904c8 <p05.6127>:
 80904c8:	0005 0000 0019 0000 007d 0000               ........}...

080904d4 <link_const_variable_data_end>:
 80904d4:	08085dbd 	.word	0x08085dbd
 80904d8:	080871b5 	.word	0x080871b5
 80904dc:	08087fad 	.word	0x08087fad
 80904e0:	08088e55 	.word	0x08088e55
 80904e4:	080897c1 	.word	0x080897c1
 80904e8:	08089b81 	.word	0x08089b81
 80904ec:	08089bcd 	.word	0x08089bcd
 80904f0:	0808a6c5 	.word	0x0808a6c5
 80904f4:	0808aa1d 	.word	0x0808aa1d
 80904f8:	0808ab6d 	.word	0x0808ab6d

080904fc <link_constructors_end>:
 80904fc:	00000000 	.word	0x00000000
