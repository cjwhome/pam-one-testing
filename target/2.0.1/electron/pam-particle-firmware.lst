
c:/Users/abailly/PAM_ESP/pam-particle-firmware/target/2.0.1/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000f010  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  0808f030  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002ac  20000000  0808f034  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001f70  200002b0  200002b0  000402b0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  0808f2e0  0808f2e0  0003f2e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0808f308  0808f308  0003f308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   002945ae  00000000  00000000  0003f30c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00029079  00000000  00000000  002d38ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000031d8  00000000  00000000  002fc933  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00008470  00000000  00000000  002ffb0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003dfc1  00000000  00000000  00307f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000621d4  00000000  00000000  00345f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c61db  00000000  00000000  003a8110  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000093f0  00000000  00000000  0046e2ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00035bd8  00000000  00000000  004776dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <__udivmoddi4>:

DYNALIB_FN(15, services2, _printf_float, int(struct _reent*, struct _prt_data_t*, FILE*, int(*pfunc)(struct _reent* , FILE*, const char*, size_t), va_list*))
DYNALIB_FN(16, services2, _tzset_unlocked_r, void(struct _reent*))
// FIXME: this doesn't work with LTO, disable for now when importing
#if !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(17, services2, __udivmoddi4, unsigned long(unsigned long, unsigned long, unsigned long*))
 8080020:	b508      	push	{r3, lr}
 8080022:	4b02      	ldr	r3, [pc, #8]	; (808002c <__udivmoddi4+0xc>)
 8080024:	681b      	ldr	r3, [r3, #0]
 8080026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8080028:	9301      	str	r3, [sp, #4]
 808002a:	bd08      	pop	{r3, pc}
 808002c:	0806002c 	.word	0x0806002c

08080030 <localtime_r>:
#endif // !(defined(DYNALIB_IMPORT) && defined(PARTICLE_COMPILE_LTO))
DYNALIB_FN(18, services2, mktime32, time32_t(struct tm*))
DYNALIB_FN(19, services2, __ssvfscanf_r, int(struct _reent*, FILE*, const char*, va_list))
DYNALIB_FN(20, services2, _printf_i, int(struct _reent*, struct _prt_data_t*, FILE*, int (*pfunc)(struct _reent *, FILE *, const char *, size_t), va_list*))
DYNALIB_FN(21, services2, localtime32_r, struct tm*(const time32_t*, struct tm*))
DYNALIB_FN(22, services2, localtime_r, struct tm*(const time_t*, struct tm*))
 8080030:	b508      	push	{r3, lr}
 8080032:	4b02      	ldr	r3, [pc, #8]	; (808003c <localtime_r+0xc>)
 8080034:	681b      	ldr	r3, [r3, #0]
 8080036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8080038:	9301      	str	r3, [sp, #4]
 808003a:	bd08      	pop	{r3, pc}
 808003c:	0806002c 	.word	0x0806002c

08080040 <strftime>:
DYNALIB_FN(23, services2, mktime, time_t(struct tm*))
DYNALIB_FN(24, services2, gmtime_r, struct tm*(const time_t*, struct tm*))
DYNALIB_FN(25, services2, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
 8080040:	b508      	push	{r3, lr}
 8080042:	4b02      	ldr	r3, [pc, #8]	; (808004c <strftime+0xc>)
 8080044:	681b      	ldr	r3, [r3, #0]
 8080046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8080048:	9301      	str	r3, [sp, #4]
 808004a:	bd08      	pop	{r3, pc}
 808004c:	0806002c 	.word	0x0806002c

08080050 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080050:	4809      	ldr	r0, [pc, #36]	; (8080078 <module_user_pre_init+0x28>)
 8080052:	490a      	ldr	r1, [pc, #40]	; (808007c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 8080054:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080056:	4288      	cmp	r0, r1
 8080058:	d005      	beq.n	8080066 <module_user_pre_init+0x16>
 808005a:	4a09      	ldr	r2, [pc, #36]	; (8080080 <module_user_pre_init+0x30>)
 808005c:	4282      	cmp	r2, r0
 808005e:	d002      	beq.n	8080066 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080060:	1a12      	subs	r2, r2, r0
 8080062:	f00a fe6f 	bl	808ad44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080066:	4807      	ldr	r0, [pc, #28]	; (8080084 <module_user_pre_init+0x34>)
 8080068:	4a07      	ldr	r2, [pc, #28]	; (8080088 <module_user_pre_init+0x38>)
 808006a:	2100      	movs	r1, #0
 808006c:	1a12      	subs	r2, r2, r0
 808006e:	f00a fe91 	bl	808ad94 <memset>
    return &link_heap_start;
}
 8080072:	4806      	ldr	r0, [pc, #24]	; (808008c <module_user_pre_init+0x3c>)
 8080074:	bd08      	pop	{r3, pc}
 8080076:	bf00      	nop
 8080078:	20000000 	.word	0x20000000
 808007c:	0808f034 	.word	0x0808f034
 8080080:	200002ac 	.word	0x200002ac
 8080084:	200002b0 	.word	0x200002b0
 8080088:	20002220 	.word	0x20002220
 808008c:	20002220 	.word	0x20002220

08080090 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080090:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080092:	f008 fdff 	bl	8088c94 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080096:	2500      	movs	r5, #0
 8080098:	4e05      	ldr	r6, [pc, #20]	; (80800b0 <module_user_init+0x20>)
 808009a:	4c06      	ldr	r4, [pc, #24]	; (80800b4 <module_user_init+0x24>)
 808009c:	1ba4      	subs	r4, r4, r6
 808009e:	08a4      	lsrs	r4, r4, #2
 80800a0:	42a5      	cmp	r5, r4
 80800a2:	d100      	bne.n	80800a6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80800a4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80800a6:	f856 3b04 	ldr.w	r3, [r6], #4
 80800aa:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80800ac:	3501      	adds	r5, #1
 80800ae:	e7f7      	b.n	80800a0 <module_user_init+0x10>
 80800b0:	0808f004 	.word	0x0808f004
 80800b4:	0808f02c 	.word	0x0808f02c

080800b8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80800b8:	f003 b940 	b.w	808333c <setup>

080800bc <module_user_loop>:
}

void module_user_loop() {
 80800bc:	b508      	push	{r3, lr}
    loop();
 80800be:	f004 fb97 	bl	80847f0 <loop>
    _post_loop();
}
 80800c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80800c6:	f008 bda7 	b.w	8088c18 <_post_loop>

080800ca <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80800ca:	f007 bb33 	b.w	8087734 <malloc>

080800ce <_Znaj>:
 80800ce:	f007 bb31 	b.w	8087734 <malloc>

080800d2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80800d2:	f007 bb37 	b.w	8087744 <free>

080800d6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800d6:	7800      	ldrb	r0, [r0, #0]
 80800d8:	fab0 f080 	clz	r0, r0
 80800dc:	0940      	lsrs	r0, r0, #5
 80800de:	4770      	bx	lr

080800e0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800e0:	2301      	movs	r3, #1
 80800e2:	7003      	strb	r3, [r0, #0]
 80800e4:	4770      	bx	lr

080800e6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800e6:	b148      	cbz	r0, 80800fc <null_ptr_check+0x16>
 80800e8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ea:	b13b      	cbz	r3, 80800fc <null_ptr_check+0x16>
 80800ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800ee:	b12b      	cbz	r3, 80800fc <null_ptr_check+0x16>
 80800f0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800f2:	fab0 f080 	clz	r0, r0
 80800f6:	0940      	lsrs	r0, r0, #5
 80800f8:	4240      	negs	r0, r0
 80800fa:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800fc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 8080100:	4770      	bx	lr

08080102 <set_mem_page>:
{
 8080102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080104:	4602      	mov	r2, r0
	rslt = null_ptr_check(dev);
 8080106:	4608      	mov	r0, r1
{
 8080108:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 808010a:	f7ff ffec 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808010e:	4605      	mov	r5, r0
 8080110:	bb40      	cbnz	r0, 8080164 <set_mem_page+0x62>
			mem_page = BME680_MEM_PAGE0;
 8080112:	f012 0f80 	tst.w	r2, #128	; 0x80
 8080116:	bf14      	ite	ne
 8080118:	2300      	movne	r3, #0
 808011a:	2310      	moveq	r3, #16
		if (mem_page != dev->mem_page) {
 808011c:	78ca      	ldrb	r2, [r1, #3]
 808011e:	429a      	cmp	r2, r3
 8080120:	d020      	beq.n	8080164 <set_mem_page+0x62>
			dev->mem_page = mem_page;
 8080122:	70cb      	strb	r3, [r1, #3]
			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 8080124:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 8080126:	2301      	movs	r3, #1
 8080128:	21f3      	movs	r1, #243	; 0xf3
 808012a:	7860      	ldrb	r0, [r4, #1]
 808012c:	f10d 0207 	add.w	r2, sp, #7
 8080130:	47b0      	blx	r6
 8080132:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080136:	b998      	cbnz	r0, 8080160 <set_mem_page+0x5e>
				reg = reg & (~BME680_MEM_PAGE_MSK);
 8080138:	f89d 2007 	ldrb.w	r2, [sp, #7]
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808013c:	78e3      	ldrb	r3, [r4, #3]
				reg = reg & (~BME680_MEM_PAGE_MSK);
 808013e:	f022 0210 	bic.w	r2, r2, #16
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080142:	f003 0310 	and.w	r3, r3, #16
 8080146:	4313      	orrs	r3, r2
 8080148:	f88d 3007 	strb.w	r3, [sp, #7]
				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808014c:	2173      	movs	r1, #115	; 0x73
 808014e:	2301      	movs	r3, #1
 8080150:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8080152:	7860      	ldrb	r0, [r4, #1]
 8080154:	f10d 0207 	add.w	r2, sp, #7
 8080158:	47b0      	blx	r6
 808015a:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				if (dev->com_rslt != 0)
 808015e:	b108      	cbz	r0, 8080164 <set_mem_page+0x62>
					rslt = BME680_E_COM_FAIL;
 8080160:	f06f 0501 	mvn.w	r5, #1
}
 8080164:	4628      	mov	r0, r5
 8080166:	b002      	add	sp, #8
 8080168:	bd70      	pop	{r4, r5, r6, pc}

0808016a <boundary_check.isra.0.constprop.0>:
		if (*value > max) {
 808016a:	7803      	ldrb	r3, [r0, #0]
 808016c:	428b      	cmp	r3, r1
			*value = max;
 808016e:	bf84      	itt	hi
 8080170:	7001      	strbhi	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080172:	7813      	ldrbhi	r3, [r2, #0]
}
 8080174:	f04f 0000 	mov.w	r0, #0
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080178:	bf84      	itt	hi
 808017a:	f043 0302 	orrhi.w	r3, r3, #2
 808017e:	7013      	strbhi	r3, [r2, #0]
}
 8080180:	4770      	bx	lr

08080182 <bme680_get_regs>:
{
 8080182:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080186:	4606      	mov	r6, r0
	rslt = null_ptr_check(dev);
 8080188:	4618      	mov	r0, r3
{
 808018a:	4688      	mov	r8, r1
 808018c:	4691      	mov	r9, r2
 808018e:	461d      	mov	r5, r3
	rslt = null_ptr_check(dev);
 8080190:	f7ff ffa9 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080194:	4604      	mov	r4, r0
 8080196:	b9a8      	cbnz	r0, 80801c4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 8080198:	78ab      	ldrb	r3, [r5, #2]
 808019a:	b93b      	cbnz	r3, 80801ac <bme680_get_regs+0x2a>
			rslt = set_mem_page(reg_addr, dev);
 808019c:	4629      	mov	r1, r5
 808019e:	4630      	mov	r0, r6
 80801a0:	f7ff ffaf 	bl	8080102 <set_mem_page>
			if (rslt == BME680_OK)
 80801a4:	4604      	mov	r4, r0
 80801a6:	b908      	cbnz	r0, 80801ac <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801a8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801ac:	464b      	mov	r3, r9
 80801ae:	4642      	mov	r2, r8
 80801b0:	4631      	mov	r1, r6
 80801b2:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801b4:	7868      	ldrb	r0, [r5, #1]
 80801b6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801b8:	2800      	cmp	r0, #0
			rslt = BME680_E_COM_FAIL;
 80801ba:	bf18      	it	ne
 80801bc:	f06f 0401 	mvnne.w	r4, #1
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801c0:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
}
 80801c4:	4620      	mov	r0, r4
 80801c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801ca <bme680_set_regs>:
{
 80801ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80801ce:	461c      	mov	r4, r3
 80801d0:	460f      	mov	r7, r1
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801d2:	2100      	movs	r1, #0
{
 80801d4:	b08a      	sub	sp, #40	; 0x28
 80801d6:	4606      	mov	r6, r0
 80801d8:	4690      	mov	r8, r2
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801da:	a801      	add	r0, sp, #4
 80801dc:	2224      	movs	r2, #36	; 0x24
 80801de:	9100      	str	r1, [sp, #0]
 80801e0:	f00a fdd8 	bl	808ad94 <memset>
	rslt = null_ptr_check(dev);
 80801e4:	4620      	mov	r0, r4
 80801e6:	f7ff ff7e 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801ea:	b9e8      	cbnz	r0, 8080228 <bme680_set_regs+0x5e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801ec:	f108 33ff 	add.w	r3, r8, #4294967295
 80801f0:	2b12      	cmp	r3, #18
 80801f2:	d833      	bhi.n	808025c <bme680_set_regs+0x92>
 80801f4:	46ea      	mov	sl, sp
 80801f6:	4681      	mov	r9, r0
			for (index = 0; index < len; index++) {
 80801f8:	fa1f f888 	uxth.w	r8, r8
 80801fc:	fa1f f389 	uxth.w	r3, r9
 8080200:	4543      	cmp	r3, r8
 8080202:	d314      	bcc.n	808022e <bme680_set_regs+0x64>
			if (rslt == BME680_OK) {
 8080204:	b980      	cbnz	r0, 8080228 <bme680_set_regs+0x5e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080206:	ea4f 0248 	mov.w	r2, r8, lsl #1
 808020a:	3a01      	subs	r2, #1
 808020c:	b293      	uxth	r3, r2
 808020e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8080210:	f89d 1000 	ldrb.w	r1, [sp]
 8080214:	7860      	ldrb	r0, [r4, #1]
 8080216:	f10d 0201 	add.w	r2, sp, #1
 808021a:	47a8      	blx	r5
					rslt = BME680_E_COM_FAIL;
 808021c:	2800      	cmp	r0, #0
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808021e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					rslt = BME680_E_COM_FAIL;
 8080222:	bf18      	it	ne
 8080224:	f06f 0001 	mvnne.w	r0, #1
}
 8080228:	b00a      	add	sp, #40	; 0x28
 808022a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dev->intf == BME680_SPI_INTF) {
 808022e:	78a3      	ldrb	r3, [r4, #2]
 8080230:	f816 5009 	ldrb.w	r5, [r6, r9]
 8080234:	b93b      	cbnz	r3, 8080246 <bme680_set_regs+0x7c>
					rslt = set_mem_page(reg_addr[index], dev);
 8080236:	4628      	mov	r0, r5
 8080238:	4621      	mov	r1, r4
 808023a:	f7ff ff62 	bl	8080102 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 808023e:	f816 5009 	ldrb.w	r5, [r6, r9]
 8080242:	f005 057f 	and.w	r5, r5, #127	; 0x7f
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080246:	f817 3009 	ldrb.w	r3, [r7, r9]
					tmp_buff[(2 * index)] = reg_addr[index];
 808024a:	f88a 5000 	strb.w	r5, [sl]
				tmp_buff[(2 * index) + 1] = reg_data[index];
 808024e:	f88a 3001 	strb.w	r3, [sl, #1]
			for (index = 0; index < len; index++) {
 8080252:	f109 0901 	add.w	r9, r9, #1
 8080256:	f10a 0a02 	add.w	sl, sl, #2
 808025a:	e7cf      	b.n	80801fc <bme680_set_regs+0x32>
			rslt = BME680_E_INVALID_LENGTH;
 808025c:	f06f 0003 	mvn.w	r0, #3
 8080260:	e7e2      	b.n	8080228 <bme680_set_regs+0x5e>

08080262 <bme680_set_sensor_mode>:
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080262:	2374      	movs	r3, #116	; 0x74
{
 8080264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080266:	4604      	mov	r4, r0
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080268:	f88d 3007 	strb.w	r3, [sp, #7]
	rslt = null_ptr_check(dev);
 808026c:	f7ff ff3b 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080270:	bba0      	cbnz	r0, 80802dc <bme680_set_sensor_mode+0x7a>
	uint8_t pow_mode = 0;
 8080272:	4605      	mov	r5, r0
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8080274:	4623      	mov	r3, r4
 8080276:	2201      	movs	r2, #1
 8080278:	2074      	movs	r0, #116	; 0x74
 808027a:	f10d 0106 	add.w	r1, sp, #6
 808027e:	f7ff ff80 	bl	8080182 <bme680_get_regs>
			if (rslt == BME680_OK) {
 8080282:	b9a0      	cbnz	r0, 80802ae <bme680_set_sensor_mode+0x4c>
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8080284:	f89d 3006 	ldrb.w	r3, [sp, #6]
				if (pow_mode != BME680_SLEEP_MODE) {
 8080288:	f013 0503 	ands.w	r5, r3, #3
 808028c:	d011      	beq.n	80802b2 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 808028e:	f023 0303 	bic.w	r3, r3, #3
 8080292:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8080296:	2201      	movs	r2, #1
 8080298:	4623      	mov	r3, r4
 808029a:	f10d 0106 	add.w	r1, sp, #6
 808029e:	f10d 0007 	add.w	r0, sp, #7
 80802a2:	f7ff ff92 	bl	80801ca <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80802a6:	200a      	movs	r0, #10
 80802a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80802aa:	4798      	blx	r3
		} while (pow_mode != BME680_SLEEP_MODE);
 80802ac:	e7e2      	b.n	8080274 <bme680_set_sensor_mode+0x12>
 80802ae:	2d00      	cmp	r5, #0
 80802b0:	d1e0      	bne.n	8080274 <bme680_set_sensor_mode+0x12>
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80802b2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80802b6:	b18a      	cbz	r2, 80802dc <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80802b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80802bc:	f002 0203 	and.w	r2, r2, #3
 80802c0:	f023 0303 	bic.w	r3, r3, #3
 80802c4:	4313      	orrs	r3, r2
 80802c6:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80802ca:	b938      	cbnz	r0, 80802dc <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80802cc:	4623      	mov	r3, r4
 80802ce:	2201      	movs	r2, #1
 80802d0:	f10d 0106 	add.w	r1, sp, #6
 80802d4:	f10d 0007 	add.w	r0, sp, #7
 80802d8:	f7ff ff77 	bl	80801ca <bme680_set_regs>
}
 80802dc:	b003      	add	sp, #12
 80802de:	bd30      	pop	{r4, r5, pc}

080802e0 <bme680_set_sensor_settings>:
	uint8_t data = 0;
 80802e0:	2300      	movs	r3, #0
{
 80802e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80802e4:	4606      	mov	r6, r0
 80802e6:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 80802e8:	4608      	mov	r0, r1
{
 80802ea:	460c      	mov	r4, r1
	uint8_t data = 0;
 80802ec:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802f0:	9304      	str	r3, [sp, #16]
 80802f2:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802f6:	9306      	str	r3, [sp, #24]
 80802f8:	f8ad 301c 	strh.w	r3, [sp, #28]
	rslt = null_ptr_check(dev);
 80802fc:	f7ff fef3 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080300:	2800      	cmp	r0, #0
 8080302:	f040 80fe 	bne.w	8080502 <bme680_set_sensor_settings+0x222>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080306:	f016 0308 	ands.w	r3, r6, #8
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 808030a:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44
		if (desired_settings & BME680_GAS_MEAS_SEL)
 808030e:	d105      	bne.n	808031c <bme680_set_sensor_settings+0x3c>
		dev->power_mode = BME680_SLEEP_MODE;
 8080310:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
			rslt = bme680_set_sensor_mode(dev);
 8080314:	4620      	mov	r0, r4
 8080316:	f7ff ffa4 	bl	8080262 <bme680_set_sensor_mode>
 808031a:	e007      	b.n	808032c <bme680_set_sensor_settings+0x4c>
		if (dev->power_mode == BME680_FORCED_MODE) {
 808031c:	2f01      	cmp	r7, #1
		uint8_t reg_data[2] = {0};
 808031e:	f8ad 000c 	strh.w	r0, [sp, #12]
		if (dev->power_mode == BME680_FORCED_MODE) {
 8080322:	f000 80f0 	beq.w	8080506 <bme680_set_sensor_settings+0x226>
		dev->power_mode = BME680_SLEEP_MODE;
 8080326:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
			rslt = BME680_W_DEFINE_PWR_MODE;
 808032a:	2001      	movs	r0, #1
		if (desired_settings & BME680_FILTER_SEL) {
 808032c:	f016 0510 	ands.w	r5, r6, #16
 8080330:	d020      	beq.n	8080374 <bme680_set_sensor_settings+0x94>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8080332:	2107      	movs	r1, #7
 8080334:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080338:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 808033c:	f7ff ff15 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080340:	b930      	cbnz	r0, 8080350 <bme680_set_sensor_settings+0x70>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080342:	4623      	mov	r3, r4
 8080344:	2201      	movs	r2, #1
 8080346:	2075      	movs	r0, #117	; 0x75
 8080348:	f10d 0107 	add.w	r1, sp, #7
 808034c:	f7ff ff19 	bl	8080182 <bme680_get_regs>
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080350:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8080354:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8080358:	009b      	lsls	r3, r3, #2
 808035a:	f022 021c 	bic.w	r2, r2, #28
 808035e:	f003 031c 	and.w	r3, r3, #28
 8080362:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8080364:	2275      	movs	r2, #117	; 0x75
			count++;
 8080366:	2501      	movs	r5, #1
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080368:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808036c:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080370:	f88d 3018 	strb.w	r3, [sp, #24]
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080374:	06b3      	lsls	r3, r6, #26
 8080376:	d522      	bpl.n	80803be <bme680_set_sensor_settings+0xde>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8080378:	2108      	movs	r1, #8
 808037a:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808037e:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080382:	f7ff fef2 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080386:	b930      	cbnz	r0, 8080396 <bme680_set_sensor_settings+0xb6>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080388:	4623      	mov	r3, r4
 808038a:	2201      	movs	r2, #1
 808038c:	2070      	movs	r0, #112	; 0x70
 808038e:	f10d 0107 	add.w	r1, sp, #7
 8080392:	f7ff fef6 	bl	8080182 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 8080396:	2170      	movs	r1, #112	; 0x70
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080398:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808039c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80803a0:	f023 0308 	bic.w	r3, r3, #8
 80803a4:	f002 0208 	and.w	r2, r2, #8
 80803a8:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 80803aa:	aa08      	add	r2, sp, #32
 80803ac:	442a      	add	r2, r5
			count++;
 80803ae:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80803b0:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80803b4:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80803b8:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80803bc:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80803be:	07b1      	lsls	r1, r6, #30
 80803c0:	d033      	beq.n	808042a <bme680_set_sensor_settings+0x14a>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80803c2:	2105      	movs	r1, #5
 80803c4:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80803c8:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80803cc:	f7ff fecd 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 80803d0:	b930      	cbnz	r0, 80803e0 <bme680_set_sensor_settings+0x100>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80803d2:	4623      	mov	r3, r4
 80803d4:	2201      	movs	r2, #1
 80803d6:	2074      	movs	r0, #116	; 0x74
 80803d8:	f10d 0107 	add.w	r1, sp, #7
 80803dc:	f7ff fed1 	bl	8080182 <bme680_get_regs>
			if (desired_settings & BME680_OST_SEL)
 80803e0:	07f2      	lsls	r2, r6, #31
 80803e2:	d509      	bpl.n	80803f8 <bme680_set_sensor_settings+0x118>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80803e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80803e8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80803ec:	f003 031f 	and.w	r3, r3, #31
 80803f0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80803f4:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_OSP_SEL)
 80803f8:	07b3      	lsls	r3, r6, #30
 80803fa:	d50b      	bpl.n	8080414 <bme680_set_sensor_settings+0x134>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80803fc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8080400:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8080404:	009b      	lsls	r3, r3, #2
 8080406:	f003 031c 	and.w	r3, r3, #28
 808040a:	f022 021c 	bic.w	r2, r2, #28
 808040e:	4313      	orrs	r3, r2
 8080410:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr;
 8080414:	2274      	movs	r2, #116	; 0x74
 8080416:	ab08      	add	r3, sp, #32
 8080418:	442b      	add	r3, r5
 808041a:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 808041e:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080422:	3501      	adds	r5, #1
			data_array[count] = data;
 8080424:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080428:	b2ed      	uxtb	r5, r5
		if (desired_settings & BME680_OSH_SEL) {
 808042a:	0771      	lsls	r1, r6, #29
 808042c:	d522      	bpl.n	8080474 <bme680_set_sensor_settings+0x194>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 808042e:	2105      	movs	r1, #5
 8080430:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080434:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8080438:	f7ff fe97 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 808043c:	b930      	cbnz	r0, 808044c <bme680_set_sensor_settings+0x16c>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808043e:	4623      	mov	r3, r4
 8080440:	2201      	movs	r2, #1
 8080442:	2072      	movs	r0, #114	; 0x72
 8080444:	f10d 0107 	add.w	r1, sp, #7
 8080448:	f7ff fe9b 	bl	8080182 <bme680_get_regs>
			reg_array[count] = reg_addr; /* Append configuration */
 808044c:	2172      	movs	r1, #114	; 0x72
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 808044e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080452:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8080456:	f023 0307 	bic.w	r3, r3, #7
 808045a:	f002 0207 	and.w	r2, r2, #7
 808045e:	4313      	orrs	r3, r2
			reg_array[count] = reg_addr; /* Append configuration */
 8080460:	aa08      	add	r2, sp, #32
 8080462:	442a      	add	r2, r5
			count++;
 8080464:	3501      	adds	r5, #1
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080466:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 808046a:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808046e:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080472:	b2ed      	uxtb	r5, r5
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080474:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8080478:	d03a      	beq.n	80804f0 <bme680_set_sensor_settings+0x210>
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 808047a:	2101      	movs	r1, #1
 808047c:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080480:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080484:	f7ff fe71 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK) {
 8080488:	b960      	cbnz	r0, 80804a4 <bme680_set_sensor_settings+0x1c4>
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808048a:	210a      	movs	r1, #10
 808048c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080490:	f7ff fe6b 	bl	808016a <boundary_check.isra.0.constprop.0>
			if (rslt == BME680_OK)
 8080494:	b930      	cbnz	r0, 80804a4 <bme680_set_sensor_settings+0x1c4>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080496:	4623      	mov	r3, r4
 8080498:	2201      	movs	r2, #1
 808049a:	2071      	movs	r0, #113	; 0x71
 808049c:	f10d 0107 	add.w	r1, sp, #7
 80804a0:	f7ff fe6f 	bl	8080182 <bme680_get_regs>
			if (desired_settings & BME680_RUN_GAS_SEL)
 80804a4:	0672      	lsls	r2, r6, #25
 80804a6:	d50b      	bpl.n	80804c0 <bme680_set_sensor_settings+0x1e0>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80804a8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80804ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80804b0:	011b      	lsls	r3, r3, #4
 80804b2:	f003 0310 	and.w	r3, r3, #16
 80804b6:	f022 0210 	bic.w	r2, r2, #16
 80804ba:	4313      	orrs	r3, r2
 80804bc:	f88d 3007 	strb.w	r3, [sp, #7]
			if (desired_settings & BME680_NBCONV_SEL)
 80804c0:	0633      	lsls	r3, r6, #24
 80804c2:	d50a      	bpl.n	80804da <bme680_set_sensor_settings+0x1fa>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80804c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80804c8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80804cc:	f023 030f 	bic.w	r3, r3, #15
 80804d0:	f002 020f 	and.w	r2, r2, #15
 80804d4:	4313      	orrs	r3, r2
 80804d6:	f88d 3007 	strb.w	r3, [sp, #7]
			reg_array[count] = reg_addr; /* Append configuration */
 80804da:	2271      	movs	r2, #113	; 0x71
 80804dc:	ab08      	add	r3, sp, #32
 80804de:	442b      	add	r3, r5
 80804e0:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80804e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80804e8:	3501      	adds	r5, #1
			data_array[count] = data;
 80804ea:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80804ee:	b2ed      	uxtb	r5, r5
		if (rslt == BME680_OK)
 80804f0:	b928      	cbnz	r0, 80804fe <bme680_set_sensor_settings+0x21e>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80804f2:	4623      	mov	r3, r4
 80804f4:	462a      	mov	r2, r5
 80804f6:	a906      	add	r1, sp, #24
 80804f8:	a804      	add	r0, sp, #16
 80804fa:	f7ff fe66 	bl	80801ca <bme680_set_regs>
		dev->power_mode = intended_power_mode;
 80804fe:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
}
 8080502:	b009      	add	sp, #36	; 0x24
 8080504:	bdf0      	pop	{r4, r5, r6, r7, pc}
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080506:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 808050a:	f9b1 3012 	ldrsh.w	r3, [r1, #18]
 808050e:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8080512:	bf28      	it	cs
 8080514:	f44f 72c8 	movcs.w	r2, #400	; 0x190
 8080518:	2ac8      	cmp	r2, #200	; 0xc8
 808051a:	bf38      	it	cc
 808051c:	22c8      	movcc	r2, #200	; 0xc8
 808051e:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8080522:	f203 1399 	addw	r3, r3, #409	; 0x199
 8080526:	435a      	muls	r2, r3
 8080528:	2314      	movs	r3, #20
 808052a:	fbb2 f2f3 	udiv	r2, r2, r3
 808052e:	230a      	movs	r3, #10
 8080530:	f502 1248 	add.w	r2, r2, #3276800	; 0x320000
 8080534:	fbb2 f2f3 	udiv	r2, r2, r3
 8080538:	f991 3011 	ldrsb.w	r3, [r1, #17]
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 808053c:	f991 1004 	ldrsb.w	r1, [r1, #4]
	var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8080540:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8080544:	435a      	muls	r2, r3
	var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 8080546:	f994 3014 	ldrsb.w	r3, [r4, #20]
 808054a:	434b      	muls	r3, r1
 808054c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8080550:	fb93 f3f1 	sdiv	r3, r3, r1
 8080554:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
 8080556:	eb03 0362 	add.w	r3, r3, r2, asr #1
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 808055a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 808055e:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
	var4 = (var3 / (dev->calib.res_heat_range + 4));
 8080562:	3204      	adds	r2, #4
 8080564:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * dev->calib.res_heat_val) + 65536;
 8080568:	2283      	movs	r2, #131	; 0x83
 808056a:	434a      	muls	r2, r1
 808056c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 8080570:	fbb3 f3f2 	udiv	r3, r3, r2
 8080574:	2222      	movs	r2, #34	; 0x22
 8080576:	3bfa      	subs	r3, #250	; 0xfa
 8080578:	4353      	muls	r3, r2
	heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 808057a:	2264      	movs	r2, #100	; 0x64
 808057c:	3332      	adds	r3, #50	; 0x32
 808057e:	fb93 f3f2 	sdiv	r3, r3, r2
 8080582:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8080586:	f246 435a 	movw	r3, #25690	; 0x645a
 808058a:	f8ad 3008 	strh.w	r3, [sp, #8]
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 808058e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
	if (dur >= 0xfc0) {
 8080592:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8080596:	d21a      	bcs.n	80805ce <bme680_set_sensor_settings+0x2ee>
		while (dur > 0x3F) {
 8080598:	2b3f      	cmp	r3, #63	; 0x3f
 808059a:	b2c2      	uxtb	r2, r0
 808059c:	f100 0001 	add.w	r0, r0, #1
 80805a0:	d813      	bhi.n	80805ca <bme680_set_sensor_settings+0x2ea>
		durval = (uint8_t) (dur + (factor * 64));
 80805a2:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 80805a6:	b2db      	uxtb	r3, r3
			dev->gas_sett.nb_conv = 0;
 80805a8:	2500      	movs	r5, #0
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805aa:	f88d 300d 	strb.w	r3, [sp, #13]
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805ae:	2202      	movs	r2, #2
 80805b0:	4623      	mov	r3, r4
			dev->gas_sett.nb_conv = 0;
 80805b2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805b6:	a903      	add	r1, sp, #12
 80805b8:	a802      	add	r0, sp, #8
 80805ba:	f7ff fe06 	bl	80801ca <bme680_set_regs>
		dev->power_mode = BME680_SLEEP_MODE;
 80805be:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80805c2:	2800      	cmp	r0, #0
 80805c4:	f47f aeb2 	bne.w	808032c <bme680_set_sensor_settings+0x4c>
 80805c8:	e6a4      	b.n	8080314 <bme680_set_sensor_settings+0x34>
			dur = dur / 4;
 80805ca:	089b      	lsrs	r3, r3, #2
			factor += 1;
 80805cc:	e7e4      	b.n	8080598 <bme680_set_sensor_settings+0x2b8>
		durval = 0xff; /* Max duration*/
 80805ce:	23ff      	movs	r3, #255	; 0xff
 80805d0:	e7ea      	b.n	80805a8 <bme680_set_sensor_settings+0x2c8>
	...

080805d4 <bme680_get_profile_dur>:
{
 80805d4:	b513      	push	{r0, r1, r4, lr}
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805d6:	4b18      	ldr	r3, [pc, #96]	; (8080638 <bme680_get_profile_dur+0x64>)
{
 80805d8:	4602      	mov	r2, r0
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805da:	6818      	ldr	r0, [r3, #0]
 80805dc:	889b      	ldrh	r3, [r3, #4]
 80805de:	9000      	str	r0, [sp, #0]
 80805e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805e4:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 80805e8:	a802      	add	r0, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805ea:	f891 403a 	ldrb.w	r4, [r1, #58]	; 0x3a
	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805ee:	4403      	add	r3, r0
 80805f0:	f813 0c08 	ldrb.w	r0, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805f4:	ab02      	add	r3, sp, #8
 80805f6:	441c      	add	r4, r3
 80805f8:	f814 3c08 	ldrb.w	r3, [r4, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80805fc:	ac02      	add	r4, sp, #8
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805fe:	4418      	add	r0, r3
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8080600:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8080604:	4423      	add	r3, r4
 8080606:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 808060a:	f240 74ab 	movw	r4, #1963	; 0x7ab
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 808060e:	4403      	add	r3, r0
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080610:	f241 20b9 	movw	r0, #4793	; 0x12b9
 8080614:	fb04 0303 	mla	r3, r4, r3, r0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080618:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808061c:	fbb3 f3f0 	udiv	r3, r3, r0
	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8080620:	3301      	adds	r3, #1
	*duration = (uint16_t) tph_dur;
 8080622:	b29b      	uxth	r3, r3
 8080624:	8013      	strh	r3, [r2, #0]
	if (dev->gas_sett.run_gas) {
 8080626:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 808062a:	b118      	cbz	r0, 8080634 <bme680_get_profile_dur+0x60>
		*duration += dev->gas_sett.heatr_dur;
 808062c:	f8b1 1042 	ldrh.w	r1, [r1, #66]	; 0x42
 8080630:	440b      	add	r3, r1
 8080632:	8013      	strh	r3, [r2, #0]
}
 8080634:	b002      	add	sp, #8
 8080636:	bd10      	pop	{r4, pc}
 8080638:	0808cbf4 	.word	0x0808cbf4

0808063c <bme680_get_sensor_data>:
{
 808063c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080640:	4680      	mov	r8, r0
 8080642:	b089      	sub	sp, #36	; 0x24
	rslt = null_ptr_check(dev);
 8080644:	4608      	mov	r0, r1
{
 8080646:	460c      	mov	r4, r1
	rslt = null_ptr_check(dev);
 8080648:	f7ff fd4d 	bl	80800e6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808064c:	4605      	mov	r5, r0
 808064e:	2800      	cmp	r0, #0
 8080650:	f040 8158 	bne.w	8080904 <bme680_get_sensor_data+0x2c8>
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080654:	9006      	str	r0, [sp, #24]
 8080656:	e9cd 0004 	strd	r0, r0, [sp, #16]
 808065a:	f8cd 001b 	str.w	r0, [sp, #27]
	rslt = null_ptr_check(dev);
 808065e:	4608      	mov	r0, r1
 8080660:	f7ff fd41 	bl	80800e6 <null_ptr_check>
 8080664:	270a      	movs	r7, #10
 8080666:	4605      	mov	r5, r0
		if (rslt == BME680_OK) {
 8080668:	2d00      	cmp	r5, #0
 808066a:	f040 8152 	bne.w	8080912 <bme680_get_sensor_data+0x2d6>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 808066e:	4623      	mov	r3, r4
 8080670:	220f      	movs	r2, #15
 8080672:	a904      	add	r1, sp, #16
 8080674:	201d      	movs	r0, #29
 8080676:	f7ff fd84 	bl	8080182 <bme680_get_regs>
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808067a:	f89d b010 	ldrb.w	fp, [sp, #16]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808067e:	f99d a01e 	ldrsb.w	sl, [sp, #30]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080682:	f89d 2018 	ldrb.w	r2, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8080686:	f00b 030f 	and.w	r3, fp, #15
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808068a:	f00a 0120 	and.w	r1, sl, #32
			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808068e:	f02b 0b7f 	bic.w	fp, fp, #127	; 0x7f
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080692:	9201      	str	r2, [sp, #4]
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8080694:	ea4b 0101 	orr.w	r1, fp, r1
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080698:	f89d 2019 	ldrb.w	r2, [sp, #25]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 808069c:	f00a 0a10 	and.w	sl, sl, #16
 80806a0:	ea41 010a 	orr.w	r1, r1, sl
 80806a4:	b249      	sxtb	r1, r1
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80806a6:	f888 3001 	strb.w	r3, [r8, #1]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80806aa:	9202      	str	r2, [sp, #8]
			data->meas_index = buff[1];
 80806ac:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80806b0:	f89d 201d 	ldrb.w	r2, [sp, #29]
			if (data->status & BME680_NEW_DATA_MSK) {
 80806b4:	2900      	cmp	r1, #0
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 80806b6:	4605      	mov	r5, r0
			data->meas_index = buff[1];
 80806b8:	f888 3002 	strb.w	r3, [r8, #2]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80806bc:	9203      	str	r2, [sp, #12]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80806be:	f89d 9012 	ldrb.w	r9, [sp, #18]
 80806c2:	f89d e013 	ldrb.w	lr, [sp, #19]
				| ((uint32_t) buff[4] / 16));
 80806c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80806ca:	f89d c015 	ldrb.w	ip, [sp, #21]
 80806ce:	f89d 6016 	ldrb.w	r6, [sp, #22]
				| ((uint32_t) buff[7] / 16));
 80806d2:	f89d 0017 	ldrb.w	r0, [sp, #23]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80806d6:	f89d 201e 	ldrb.w	r2, [sp, #30]
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806da:	f888 1000 	strb.w	r1, [r8]
			if (data->status & BME680_NEW_DATA_MSK) {
 80806de:	f280 8115 	bge.w	808090c <bme680_get_sensor_data+0x2d0>
				| ((uint32_t) buff[7] / 16));
 80806e2:	0900      	lsrs	r0, r0, #4
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80806e4:	ea40 1606 	orr.w	r6, r0, r6, lsl #4
 80806e8:	ea46 3c0c 	orr.w	ip, r6, ip, lsl #12
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806ec:	8ae6      	ldrh	r6, [r4, #22]
				| ((uint32_t) buff[4] / 16));
 80806ee:	091b      	lsrs	r3, r3, #4
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806f0:	0076      	lsls	r6, r6, #1
 80806f2:	ebc6 0cdc 	rsb	ip, r6, ip, lsr #3
 80806f6:	4660      	mov	r0, ip
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80806f8:	ea4f 065c 	mov.w	r6, ip, lsr #1
	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806fc:	17c1      	asrs	r1, r0, #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80806fe:	ea46 76c1 	orr.w	r6, r6, r1, lsl #31
 8080702:	1049      	asrs	r1, r1, #1
 8080704:	4371      	muls	r1, r6
 8080706:	fba6 ab06 	umull	sl, fp, r6, r6
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808070a:	f994 001a 	ldrsb.w	r0, [r4, #26]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 808070e:	eb0b 0b41 	add.w	fp, fp, r1, lsl #1
 8080712:	ea4f 361a 	mov.w	r6, sl, lsr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080716:	0101      	lsls	r1, r0, #4
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080718:	ea46 560b 	orr.w	r6, r6, fp, lsl #20
 808071c:	ea4f 372b 	mov.w	r7, fp, asr #12
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080720:	ea4f 7be1 	mov.w	fp, r1, asr #31
 8080724:	fb06 f00b 	mul.w	r0, r6, fp
 8080728:	fba6 ab01 	umull	sl, fp, r6, r1
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808072c:	f9b4 6018 	ldrsh.w	r6, [r4, #24]
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080730:	fb01 0707 	mla	r7, r1, r7, r0
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080734:	fb86 010c 	smull	r0, r1, r6, ip
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080738:	44bb      	add	fp, r7
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 808073a:	0ac6      	lsrs	r6, r0, #11
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808073c:	ea4f 309a 	mov.w	r0, sl, lsr #14
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080740:	ea46 5641 	orr.w	r6, r6, r1, lsl #21
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080744:	ea40 408b 	orr.w	r0, r0, fp, lsl #18
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080748:	1831      	adds	r1, r6, r0
 808074a:	6321      	str	r1, [r4, #48]	; 0x30
	calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 808074c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8080750:	3180      	adds	r1, #128	; 0x80
 8080752:	1209      	asrs	r1, r1, #8
 8080754:	f8a8 1004 	strh.w	r1, [r8, #4]
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080758:	6b21      	ldr	r1, [r4, #48]	; 0x30
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 808075a:	ea43 1e0e 	orr.w	lr, r3, lr, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808075e:	1049      	asrs	r1, r1, #1
 8080760:	f5a1 417a 	sub.w	r1, r1, #64000	; 0xfa00
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8080764:	f640 4335 	movw	r3, #3125	; 0xc35
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080768:	1088      	asrs	r0, r1, #2
 808076a:	4340      	muls	r0, r0
		(int32_t)dev->calib.par_p6) >> 2;
 808076c:	f994 7026 	ldrsb.w	r7, [r4, #38]	; 0x26
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080770:	12c6      	asrs	r6, r0, #11
 8080772:	4377      	muls	r7, r6
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8080774:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080778:	1340      	asrs	r0, r0, #13
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 808077a:	434e      	muls	r6, r1
 808077c:	0076      	lsls	r6, r6, #1
 808077e:	eb06 06a7 	add.w	r6, r6, r7, asr #2
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080782:	f9b4 701e 	ldrsh.w	r7, [r4, #30]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080786:	ea4e 3909 	orr.w	r9, lr, r9, lsl #12
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 808078a:	434f      	muls	r7, r1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 808078c:	f994 1020 	ldrsb.w	r1, [r4, #32]
	pressure_comp = 1048576 - pres_adc;
 8080790:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8080794:	0149      	lsls	r1, r1, #5
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080796:	4341      	muls	r1, r0
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8080798:	10c9      	asrs	r1, r1, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808079a:	eb01 0167 	add.w	r1, r1, r7, asr #1
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 808079e:	8ba0      	ldrh	r0, [r4, #28]
	var1 = var1 >> 18;
 80807a0:	1489      	asrs	r1, r1, #18
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80807a2:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 80807a6:	4348      	muls	r0, r1
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80807a8:	f9b4 1022 	ldrsh.w	r1, [r4, #34]	; 0x22
		((int64_t) lookupTable1[gas_range])) >> 16;
 80807ac:	f002 0c0f 	and.w	ip, r2, #15
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 80807b0:	0409      	lsls	r1, r1, #16
 80807b2:	eb01 06a6 	add.w	r6, r1, r6, asr #2
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 80807b6:	eba9 3626 	sub.w	r6, r9, r6, asr #12
 80807ba:	4373      	muls	r3, r6
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80807bc:	13c1      	asrs	r1, r0, #15
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80807be:	fbb3 f1f1 	udiv	r1, r3, r1
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80807c2:	f341 009c 	sbfx	r0, r1, #2, #29
 80807c6:	4340      	muls	r0, r0
 80807c8:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
		(pressure_comp >> 3)) >> 13)) >> 12;
 80807cc:	1340      	asrs	r0, r0, #13
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80807ce:	4358      	muls	r0, r3
		(int32_t)dev->calib.par_p8) >> 13;
 80807d0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
	var2 = ((int32_t)(pressure_comp >> 2) *
 80807d4:	f341 075d 	sbfx	r7, r1, #1, #30
 80807d8:	437b      	muls	r3, r7
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80807da:	f341 16d7 	sbfx	r6, r1, #7, #24
	var2 = ((int32_t)(pressure_comp >> 2) *
 80807de:	135b      	asrs	r3, r3, #13
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80807e0:	eb03 3320 	add.w	r3, r3, r0, asr #12
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80807e4:	fb06 f006 	mul.w	r0, r6, r6
 80807e8:	4346      	muls	r6, r0
		(int32_t)dev->calib.par_p10) >> 17;
 80807ea:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80807ee:	0992      	lsrs	r2, r2, #6
		(int32_t)(pressure_comp >> 8) *
 80807f0:	4346      	muls	r6, r0
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80807f2:	f994 0027 	ldrsb.w	r0, [r4, #39]	; 0x27
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80807f6:	eb03 4366 	add.w	r3, r3, r6, asr #17
 80807fa:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 80807fe:	2064      	movs	r0, #100	; 0x64
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 8080800:	111b      	asrs	r3, r3, #4
	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 8080802:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				data->pressure = calc_pressure(adc_pres, dev);
 8080806:	f8c8 3008 	str.w	r3, [r8, #8]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 808080a:	6b23      	ldr	r3, [r4, #48]	; 0x30
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 808080c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080810:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080814:	3380      	adds	r3, #128	; 0x80
 8080816:	121b      	asrs	r3, r3, #8
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080818:	4359      	muls	r1, r3
 808081a:	fb91 f1f0 	sdiv	r1, r1, r0
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 808081e:	f994 600d 	ldrsb.w	r6, [r4, #13]
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080822:	4359      	muls	r1, r3
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080824:	435e      	muls	r6, r3
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080826:	1189      	asrs	r1, r1, #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080828:	fb96 f6f0 	sdiv	r6, r6, r0
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 808082c:	fb91 f1f0 	sdiv	r1, r1, r0
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8080830:	4431      	add	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 8080832:	8966      	ldrh	r6, [r4, #10]
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8080834:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8080838:	4371      	muls	r1, r6
	var2 = ((int32_t) dev->calib.par_h2
 808083a:	128e      	asrs	r6, r1, #10
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 808083c:	e9dd 7101 	ldrd	r7, r1, [sp, #4]
 8080840:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8080844:	8927      	ldrh	r7, [r4, #8]
 8080846:	eba1 1107 	sub.w	r1, r1, r7, lsl #4
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 808084a:	f994 700c 	ldrsb.w	r7, [r4, #12]
 808084e:	435f      	muls	r7, r3
 8080850:	fb97 f7f0 	sdiv	r7, r7, r0
	var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8080854:	eba1 0167 	sub.w	r1, r1, r7, asr #1
	var3 = var1 * var2;
 8080858:	4371      	muls	r1, r6
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808085a:	f994 6010 	ldrsb.w	r6, [r4, #16]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 808085e:	2700      	movs	r7, #0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080860:	4373      	muls	r3, r6
 8080862:	fb93 f3f0 	sdiv	r3, r3, r0
	var4 = (int32_t) dev->calib.par_h6 << 7;
 8080866:	7be0      	ldrb	r0, [r4, #15]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080868:	f240 563c 	movw	r6, #1340	; 0x53c
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808086c:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080870:	1388      	asrs	r0, r1, #14
 8080872:	4340      	muls	r0, r0
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080874:	111b      	asrs	r3, r3, #4
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080876:	1280      	asrs	r0, r0, #10
	var6 = (var4 * var5) >> 1;
 8080878:	4343      	muls	r3, r0
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 808087a:	eb01 0363 	add.w	r3, r1, r3, asr #1
 808087e:	1299      	asrs	r1, r3, #10
 8080880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080884:	434b      	muls	r3, r1
				data->humidity = calc_humidity(adc_hum, dev);
 8080886:	492b      	ldr	r1, [pc, #172]	; (8080934 <bme680_get_sensor_data+0x2f8>)
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080888:	131b      	asrs	r3, r3, #12
 808088a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
				data->humidity = calc_humidity(adc_hum, dev);
 808088e:	428b      	cmp	r3, r1
 8080890:	bfd4      	ite	le
 8080892:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080896:	f8c8 100c 	strgt.w	r1, [r8, #12]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 808089a:	2105      	movs	r1, #5
 808089c:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
 80808a0:	fbc3 6701 	smlal	r6, r7, r3, r1
		((int64_t) lookupTable1[gas_range])) >> 16;
 80808a4:	4b24      	ldr	r3, [pc, #144]	; (8080938 <bme680_get_sensor_data+0x2fc>)
 80808a6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80808aa:	fba6 0103 	umull	r0, r1, r6, r3
 80808ae:	fb03 1107 	mla	r1, r3, r7, r1
 80808b2:	0c06      	lsrs	r6, r0, #16
 80808b4:	ea4f 4e21 	mov.w	lr, r1, asr #16
 80808b8:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808bc:	2100      	movs	r1, #0
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808be:	9b03      	ldr	r3, [sp, #12]
 80808c0:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808c4:	03d3      	lsls	r3, r2, #15
 80808c6:	f113 437f 	adds.w	r3, r3, #4278190080	; 0xff000000
 80808ca:	f141 31ff 	adc.w	r1, r1, #4294967295
 80808ce:	199a      	adds	r2, r3, r6
 80808d0:	eb41 030e 	adc.w	r3, r1, lr
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80808d4:	4919      	ldr	r1, [pc, #100]	; (808093c <bme680_get_sensor_data+0x300>)
 80808d6:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80808da:	fba1 6706 	umull	r6, r7, r1, r6
 80808de:	fb01 770e 	mla	r7, r1, lr, r7
 80808e2:	0a70      	lsrs	r0, r6, #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 80808e4:	0856      	lsrs	r6, r2, #1
 80808e6:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 80808ea:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 80808ee:	ea4f 2c67 	mov.w	ip, r7, asr #9
	calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 80808f2:	1059      	asrs	r1, r3, #1
 80808f4:	1980      	adds	r0, r0, r6
 80808f6:	eb4c 0101 	adc.w	r1, ip, r1
 80808fa:	f00a f91d 	bl	808ab38 <__aeabi_ldivmod>
 80808fe:	f8c8 0010 	str.w	r0, [r8, #16]
		if (rslt == BME680_OK) {
 8080902:	b16d      	cbz	r5, 8080920 <bme680_get_sensor_data+0x2e4>
}
 8080904:	4628      	mov	r0, r5
 8080906:	b009      	add	sp, #36	; 0x24
 8080908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 808090c:	200a      	movs	r0, #10
 808090e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080910:	4798      	blx	r3
	} while (tries);
 8080912:	3f01      	subs	r7, #1
 8080914:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8080918:	f47f aea6 	bne.w	8080668 <bme680_get_sensor_data+0x2c>
		rslt = BME680_W_NO_NEW_DATA;
 808091c:	2502      	movs	r5, #2
	return rslt;
 808091e:	e7f1      	b.n	8080904 <bme680_get_sensor_data+0x2c8>
			if (data->status & BME680_NEW_DATA_MSK)
 8080920:	f998 3000 	ldrsb.w	r3, [r8]
 8080924:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080926:	bfb6      	itet	lt
 8080928:	2301      	movlt	r3, #1
				dev->new_fields = 0;
 808092a:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
				dev->new_fields = 1;
 808092e:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
				dev->new_fields = 0;
 8080932:	e7e7      	b.n	8080904 <bme680_get_sensor_data+0x2c8>
 8080934:	000186a0 	.word	0x000186a0
 8080938:	20000000 	.word	0x20000000
 808093c:	20000040 	.word	0x20000040

08080940 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 8080940:	4770      	bx	lr

08080942 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 8080942:	6810      	ldr	r0, [r2, #0]
 8080944:	4770      	bx	lr

08080946 <_ZN4File9availableEv>:
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080946:	4602      	mov	r2, r0
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080948:	7c03      	ldrb	r3, [r0, #16]
 808094a:	f013 0008 	ands.w	r0, r3, #8
 808094e:	bf1e      	ittt	ne
 8080950:	6a50      	ldrne	r0, [r2, #36]	; 0x24
 8080952:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
 8080954:	1a18      	subne	r0, r3, r0
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080956:	2800      	cmp	r0, #0
  }
 8080958:	bfb8      	it	lt
 808095a:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
 808095e:	4770      	bx	lr

08080960 <_ZN12SerialBufferILj4096EED1Ev>:
 *
 * The buffered serial class creates a thread to read from the serial port, eliminating problems with
 * dropping data
 */
template <size_t SIZE>
class SerialBuffer : public SerialBufferBase {
 8080960:	4770      	bx	lr

08080962 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080962:	4770      	bx	lr

08080964 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
 8080964:	4770      	bx	lr

08080966 <_ZN6SdFileD0Ev>:
 8080966:	b510      	push	{r4, lr}
 8080968:	4604      	mov	r4, r0
 808096a:	212c      	movs	r1, #44	; 0x2c
 808096c:	f009 f8d9 	bl	8089b22 <_ZdlPvj>
 8080970:	4620      	mov	r0, r4
 8080972:	bd10      	pop	{r4, pc}

08080974 <_ZN4FileD0Ev>:
 8080974:	b510      	push	{r4, lr}
 8080976:	4604      	mov	r4, r0
 8080978:	2134      	movs	r1, #52	; 0x34
 808097a:	f009 f8d2 	bl	8089b22 <_ZdlPvj>
 808097e:	4620      	mov	r0, r4
 8080980:	bd10      	pop	{r4, pc}

08080982 <_ZN12SerialBufferILj4096EED0Ev>:
 8080982:	b510      	push	{r4, lr}
 8080984:	4604      	mov	r4, r0
 8080986:	f241 0130 	movw	r1, #4144	; 0x1030
 808098a:	f009 f8ca 	bl	8089b22 <_ZdlPvj>
 808098e:	4620      	mov	r0, r4
 8080990:	bd10      	pop	{r4, pc}
	...

08080994 <_Z12rebootAQSync6String>:
        // Particle.process(); //attempt at ensuring the publish is complete before sleeping
    }
}

int rebootAQSync(String nothing)
{
 8080994:	b508      	push	{r3, lr}
    serBuf.write('R');
 8080996:	2152      	movs	r1, #82	; 0x52
 8080998:	4802      	ldr	r0, [pc, #8]	; (80809a4 <_Z12rebootAQSync6String+0x10>)
 808099a:	f006 fb63 	bl	8087064 <_ZN16SerialBufferBase5writeEh>
    return 1;

}
 808099e:	2001      	movs	r0, #1
 80809a0:	bd08      	pop	{r3, pc}
 80809a2:	bf00      	nop
 80809a4:	20000c1c 	.word	0x20000c1c

080809a8 <_ZN9PrintFile5writeEPKhj>:
    return FatFile::write(buf, size);
 80809a8:	3008      	adds	r0, #8
 80809aa:	f005 bd2f 	b.w	808640c <_ZN7FatFile5writeEPKvj>

080809ae <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 80809ae:	3010      	adds	r0, #16
 80809b0:	f005 bd2c 	b.w	808640c <_ZN7FatFile5writeEPKvj>

080809b4 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
 80809b4:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 80809b6:	2201      	movs	r2, #1
 80809b8:	f88d 1007 	strb.w	r1, [sp, #7]
 80809bc:	3010      	adds	r0, #16
 80809be:	f10d 0107 	add.w	r1, sp, #7
 80809c2:	f005 fd23 	bl	808640c <_ZN7FatFile5writeEPKvj>
  }
 80809c6:	b003      	add	sp, #12
 80809c8:	f85d fb04 	ldr.w	pc, [sp], #4

080809cc <_ZN4File5flushEv>:
    FatFile::sync();
 80809cc:	3010      	adds	r0, #16
 80809ce:	f005 bc93 	b.w	80862f8 <_ZN7FatFile4syncEv>

080809d2 <_ZN4File4peekEv>:
    return FatFile::peek();
 80809d2:	3010      	adds	r0, #16
 80809d4:	f005 bbbf 	b.w	8086156 <_ZN7FatFile4peekEv>

080809d8 <_ZN4File4readEv>:
  int read() {
 80809d8:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
 80809da:	2201      	movs	r2, #1
 80809dc:	f10d 0107 	add.w	r1, sp, #7
 80809e0:	3010      	adds	r0, #16
 80809e2:	f005 fb09 	bl	8085ff8 <_ZN7FatFile4readEPvj>
 80809e6:	2801      	cmp	r0, #1
 80809e8:	bf14      	ite	ne
 80809ea:	f04f 30ff 	movne.w	r0, #4294967295
 80809ee:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  }
 80809f2:	b003      	add	sp, #12
 80809f4:	f85d fb04 	ldr.w	pc, [sp], #4

080809f8 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 80809f8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809fc:	f005 b967 	b.w	8085cce <_ZN9SdSpiCard11writeBlocksEmPKhj>

08080a00 <_ZN9SdFatBase10readBlocksEmPhj>:
    return m_sdCard.readBlocks(block, dst, n);
 8080a00:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080a04:	f005 b89b 	b.w	8085b3e <_ZN9SdSpiCard10readBlocksEmPhj>

08080a08 <_ZN9SdFatBase10writeBlockEmPKh>:
    return m_sdCard.writeBlock(block, src);
 8080a08:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080a0c:	f005 b8d9 	b.w	8085bc2 <_ZN9SdSpiCard10writeBlockEmPKh>

08080a10 <_ZN9SdFatBase9readBlockEmPh>:
    return m_sdCard.readBlock(block, dst);
 8080a10:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080a14:	f005 b84b 	b.w	8085aae <_ZN9SdSpiCard9readBlockEmPh>

08080a18 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 8080a18:	b510      	push	{r4, lr}
 8080a1a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 8080a1c:	6800      	ldr	r0, [r0, #0]
 8080a1e:	b108      	cbz	r0, 8080a24 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
 8080a20:	f006 fe90 	bl	8087744 <free>
class SystemClass {
 8080a24:	4620      	mov	r0, r4
 8080a26:	bd10      	pop	{r4, pc}

08080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 8080a28:	b510      	push	{r4, lr}
 8080a2a:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080a2c:	2204      	movs	r2, #4
 8080a2e:	f006 fbf5 	bl	808721c <HAL_EEPROM_Put>
        return t;
    }
 8080a32:	4620      	mov	r0, r4
 8080a34:	bd10      	pop	{r4, pc}

08080a36 <_Z20remoteReadStoredVars6String>:
    uint16_t tempValue = 0;
 8080a36:	2300      	movs	r3, #0
{
 8080a38:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080a3a:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080a3e:	f007 fc20 	bl	8088282 <_ZNK6String5toIntEv>
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 8080a42:	2898      	cmp	r0, #152	; 0x98
    int numerical_mem_address = mem_address.toInt();
 8080a44:	4604      	mov	r4, r0
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 8080a46:	d80b      	bhi.n	8080a60 <_Z20remoteReadStoredVars6String+0x2a>
        EEPROM.get(numerical_mem_address, tempValue);
 8080a48:	f008 ffc4 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a4c:	4620      	mov	r0, r4
 8080a4e:	2202      	movs	r2, #2
 8080a50:	f10d 0106 	add.w	r1, sp, #6
 8080a54:	f006 fbda 	bl	808720c <HAL_EEPROM_Get>
        return tempValue;
 8080a58:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8080a5c:	b002      	add	sp, #8
 8080a5e:	bd10      	pop	{r4, pc}
        return -1;
 8080a60:	f04f 30ff 	mov.w	r0, #4294967295
 8080a64:	e7fa      	b.n	8080a5c <_Z20remoteReadStoredVars6String+0x26>

08080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>:
    template <typename T> T &get( int idx, T &t )
 8080a66:	b510      	push	{r4, lr}
 8080a68:	460c      	mov	r4, r1
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a6a:	2204      	movs	r2, #4
 8080a6c:	f006 fbce 	bl	808720c <HAL_EEPROM_Get>
    }
 8080a70:	4620      	mov	r0, r4
 8080a72:	bd10      	pop	{r4, pc}

08080a74 <_ZN9PrintFile5writeEh>:
  size_t write(uint8_t b) {
 8080a74:	b507      	push	{r0, r1, r2, lr}
    return write(&b, 1);
 8080a76:	2201      	movs	r2, #1
 8080a78:	f88d 1007 	strb.w	r1, [sp, #7]
 8080a7c:	3008      	adds	r0, #8
 8080a7e:	f10d 0107 	add.w	r1, sp, #7
 8080a82:	f005 fcc3 	bl	808640c <_ZN7FatFile5writeEPKvj>
  }
 8080a86:	b003      	add	sp, #12
 8080a88:	f85d fb04 	ldr.w	pc, [sp], #4

08080a8c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 8080a8c:	b40e      	push	{r1, r2, r3}
 8080a8e:	b503      	push	{r0, r1, lr}
 8080a90:	ab03      	add	r3, sp, #12
 8080a92:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 8080a96:	2100      	movs	r1, #0
        va_start(args, format);
 8080a98:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 8080a9a:	f007 fd5f 	bl	808855c <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 8080a9e:	b002      	add	sp, #8
 8080aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8080aa4:	b003      	add	sp, #12
 8080aa6:	4770      	bx	lr

08080aa8 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080aa8:	2300      	movs	r3, #0
 8080aaa:	6840      	ldr	r0, [r0, #4]
 8080aac:	461a      	mov	r2, r3
 8080aae:	4619      	mov	r1, r3
 8080ab0:	f006 bdd8 	b.w	8087664 <network_off>

08080ab4 <_ZN11USARTSerialD0Ev>:
 8080ab4:	b510      	push	{r4, lr}
 8080ab6:	4604      	mov	r4, r0
 8080ab8:	2114      	movs	r1, #20
 8080aba:	f009 f832 	bl	8089b22 <_ZdlPvj>
 8080abe:	4620      	mov	r0, r4
 8080ac0:	bd10      	pop	{r4, pc}

08080ac2 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080ac2:	b40e      	push	{r1, r2, r3}
 8080ac4:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080ac6:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 8080ac8:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 8080aca:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 8080acc:	b08d      	sub	sp, #52	; 0x34
 8080ace:	aa0f      	add	r2, sp, #60	; 0x3c
 8080ad0:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 8080ad4:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080ad8:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 8080adc:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080ade:	201e      	movs	r0, #30
 8080ae0:	aa04      	add	r2, sp, #16
 8080ae2:	f006 fd33 	bl	808754c <log_message_v>
}
 8080ae6:	b00d      	add	sp, #52	; 0x34
 8080ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080aec:	b003      	add	sp, #12
 8080aee:	4770      	bx	lr

08080af0 <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static hal_usart_ring_buffer_t serial4_rx_buffer;
static hal_usart_ring_buffer_t serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080af0:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080af2:	4c0d      	ldr	r4, [pc, #52]	; (8080b28 <_Z22__fetch_global_Serial4v+0x38>)
 8080af4:	7823      	ldrb	r3, [r4, #0]
 8080af6:	f3bf 8f5b 	dmb	ish
 8080afa:	07db      	lsls	r3, r3, #31
 8080afc:	d411      	bmi.n	8080b22 <_Z22__fetch_global_Serial4v+0x32>
 8080afe:	4620      	mov	r0, r4
 8080b00:	f7ff fae9 	bl	80800d6 <__cxa_guard_acquire>
 8080b04:	b168      	cbz	r0, 8080b22 <_Z22__fetch_global_Serial4v+0x32>
 8080b06:	2103      	movs	r1, #3
 8080b08:	4a08      	ldr	r2, [pc, #32]	; (8080b2c <_Z22__fetch_global_Serial4v+0x3c>)
 8080b0a:	4b09      	ldr	r3, [pc, #36]	; (8080b30 <_Z22__fetch_global_Serial4v+0x40>)
 8080b0c:	4809      	ldr	r0, [pc, #36]	; (8080b34 <_Z22__fetch_global_Serial4v+0x44>)
 8080b0e:	f008 fd6f 	bl	80895f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080b12:	4620      	mov	r0, r4
 8080b14:	f7ff fae4 	bl	80800e0 <__cxa_guard_release>
 8080b18:	4a07      	ldr	r2, [pc, #28]	; (8080b38 <_Z22__fetch_global_Serial4v+0x48>)
 8080b1a:	4908      	ldr	r1, [pc, #32]	; (8080b3c <_Z22__fetch_global_Serial4v+0x4c>)
 8080b1c:	4805      	ldr	r0, [pc, #20]	; (8080b34 <_Z22__fetch_global_Serial4v+0x44>)
 8080b1e:	f008 fffb 	bl	8089b18 <__aeabi_atexit>
	return serial4;
}
 8080b22:	4804      	ldr	r0, [pc, #16]	; (8080b34 <_Z22__fetch_global_Serial4v+0x44>)
 8080b24:	bd10      	pop	{r4, pc}
 8080b26:	bf00      	nop
 8080b28:	200002fc 	.word	0x200002fc
 8080b2c:	20000304 	.word	0x20000304
 8080b30:	20000388 	.word	0x20000388
 8080b34:	20000518 	.word	0x20000518
 8080b38:	200002b0 	.word	0x200002b0
 8080b3c:	08080941 	.word	0x08080941

08080b40 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080b40:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080b42:	f7ff ffd5 	bl	8080af0 <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080b46:	4b07      	ldr	r3, [pc, #28]	; (8080b64 <_Z15serialEventRun4v+0x24>)
 8080b48:	4604      	mov	r4, r0
 8080b4a:	b153      	cbz	r3, 8080b62 <_Z15serialEventRun4v+0x22>
 8080b4c:	f008 fd6d 	bl	808962a <_ZN11USARTSerial9isEnabledEv>
 8080b50:	b138      	cbz	r0, 8080b62 <_Z15serialEventRun4v+0x22>
 8080b52:	6823      	ldr	r3, [r4, #0]
 8080b54:	4620      	mov	r0, r4
 8080b56:	691b      	ldr	r3, [r3, #16]
 8080b58:	4798      	blx	r3
 8080b5a:	2800      	cmp	r0, #0
 8080b5c:	dd01      	ble.n	8080b62 <_Z15serialEventRun4v+0x22>
        handler();
 8080b5e:	f3af 8000 	nop.w
}
 8080b62:	bd10      	pop	{r4, pc}
 8080b64:	00000000 	.word	0x00000000

08080b68 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static hal_usart_ring_buffer_t serial5_rx_buffer;
static hal_usart_ring_buffer_t serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080b68:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080b6a:	4c0d      	ldr	r4, [pc, #52]	; (8080ba0 <_Z22__fetch_global_Serial5v+0x38>)
 8080b6c:	7823      	ldrb	r3, [r4, #0]
 8080b6e:	f3bf 8f5b 	dmb	ish
 8080b72:	07db      	lsls	r3, r3, #31
 8080b74:	d411      	bmi.n	8080b9a <_Z22__fetch_global_Serial5v+0x32>
 8080b76:	4620      	mov	r0, r4
 8080b78:	f7ff faad 	bl	80800d6 <__cxa_guard_acquire>
 8080b7c:	b168      	cbz	r0, 8080b9a <_Z22__fetch_global_Serial5v+0x32>
 8080b7e:	2104      	movs	r1, #4
 8080b80:	4a08      	ldr	r2, [pc, #32]	; (8080ba4 <_Z22__fetch_global_Serial5v+0x3c>)
 8080b82:	4b09      	ldr	r3, [pc, #36]	; (8080ba8 <_Z22__fetch_global_Serial5v+0x40>)
 8080b84:	4809      	ldr	r0, [pc, #36]	; (8080bac <_Z22__fetch_global_Serial5v+0x44>)
 8080b86:	f008 fd33 	bl	80895f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8080b8a:	4620      	mov	r0, r4
 8080b8c:	f7ff faa8 	bl	80800e0 <__cxa_guard_release>
 8080b90:	4a07      	ldr	r2, [pc, #28]	; (8080bb0 <_Z22__fetch_global_Serial5v+0x48>)
 8080b92:	4908      	ldr	r1, [pc, #32]	; (8080bb4 <_Z22__fetch_global_Serial5v+0x4c>)
 8080b94:	4805      	ldr	r0, [pc, #20]	; (8080bac <_Z22__fetch_global_Serial5v+0x44>)
 8080b96:	f008 ffbf 	bl	8089b18 <__aeabi_atexit>
	return serial5;
}
 8080b9a:	4804      	ldr	r0, [pc, #16]	; (8080bac <_Z22__fetch_global_Serial5v+0x44>)
 8080b9c:	bd10      	pop	{r4, pc}
 8080b9e:	bf00      	nop
 8080ba0:	20000300 	.word	0x20000300
 8080ba4:	2000040c 	.word	0x2000040c
 8080ba8:	20000490 	.word	0x20000490
 8080bac:	2000052c 	.word	0x2000052c
 8080bb0:	200002b0 	.word	0x200002b0
 8080bb4:	08080941 	.word	0x08080941

08080bb8 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080bb8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080bba:	f7ff ffd5 	bl	8080b68 <_Z22__fetch_global_Serial5v>
    if (handler && serial.isEnabled() && serial.available()>0)
 8080bbe:	4b07      	ldr	r3, [pc, #28]	; (8080bdc <_Z15serialEventRun5v+0x24>)
 8080bc0:	4604      	mov	r4, r0
 8080bc2:	b153      	cbz	r3, 8080bda <_Z15serialEventRun5v+0x22>
 8080bc4:	f008 fd31 	bl	808962a <_ZN11USARTSerial9isEnabledEv>
 8080bc8:	b138      	cbz	r0, 8080bda <_Z15serialEventRun5v+0x22>
 8080bca:	6823      	ldr	r3, [r4, #0]
 8080bcc:	4620      	mov	r0, r4
 8080bce:	691b      	ldr	r3, [r3, #16]
 8080bd0:	4798      	blx	r3
 8080bd2:	2800      	cmp	r0, #0
 8080bd4:	dd01      	ble.n	8080bda <_Z15serialEventRun5v+0x22>
        handler();
 8080bd6:	f3af 8000 	nop.w
}
 8080bda:	bd10      	pop	{r4, pc}
 8080bdc:	00000000 	.word	0x00000000

08080be0 <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080be0:	b538      	push	{r3, r4, r5, lr}
 8080be2:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080be4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080be8:	f004 fed0 	bl	808598c <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080bec:	b908      	cbnz	r0, 8080bf2 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x12>
 8080bee:	2000      	movs	r0, #0
  }
 8080bf0:	bd38      	pop	{r3, r4, r5, pc}
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080bf2:	f504 6588 	add.w	r5, r4, #1088	; 0x440
    vwd()->close();
 8080bf6:	4628      	mov	r0, r5
 8080bf8:	f005 fbb4 	bl	8086364 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080bfc:	2101      	movs	r1, #1
 8080bfe:	4620      	mov	r0, r4
 8080c00:	f005 fddd 	bl	80867be <_ZN9FatVolume4initEh>
 8080c04:	4601      	mov	r1, r0
 8080c06:	b168      	cbz	r0, 8080c24 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x44>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080c08:	4621      	mov	r1, r4
 8080c0a:	4628      	mov	r0, r5
 8080c0c:	f005 f9db 	bl	8085fc6 <_ZN7FatFile8openRootEP9FatVolume>
 8080c10:	2800      	cmp	r0, #0
 8080c12:	d0ec      	beq.n	8080bee <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    if (!dir->isDir()) {
 8080c14:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080c18:	f013 0f70 	tst.w	r3, #112	; 0x70
 8080c1c:	d0e7      	beq.n	8080bee <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
    m_cwd = dir;
 8080c1e:	4b04      	ldr	r3, [pc, #16]	; (8080c30 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080c20:	601d      	str	r5, [r3, #0]
    return true;
 8080c22:	e7e5      	b.n	8080bf0 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x10>
    return (part ? init(part) : init(1) || init(0))
 8080c24:	4620      	mov	r0, r4
 8080c26:	f005 fdca 	bl	80867be <_ZN9FatVolume4initEh>
 8080c2a:	2800      	cmp	r0, #0
 8080c2c:	d1ec      	bne.n	8080c08 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x28>
 8080c2e:	e7de      	b.n	8080bee <_ZN9SdFatBase5beginEP9SdSpiBasehh+0xe>
 8080c30:	20001cd4 	.word	0x20001cd4

08080c34 <_Z13writeRegisterhh>:
{
 8080c34:	b538      	push	{r3, r4, r5, lr}
 8080c36:	460c      	mov	r4, r1
 8080c38:	4605      	mov	r5, r0
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080c3a:	f008 ff45 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
 8080c3e:	216b      	movs	r1, #107	; 0x6b
 8080c40:	f008 fda6 	bl	8089790 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080c44:	f008 ff40 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
 8080c48:	6803      	ldr	r3, [r0, #0]
 8080c4a:	4629      	mov	r1, r5
 8080c4c:	689b      	ldr	r3, [r3, #8]
 8080c4e:	4798      	blx	r3
    Wire3.write(value);
 8080c50:	f008 ff3a 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
 8080c54:	6803      	ldr	r3, [r0, #0]
 8080c56:	4621      	mov	r1, r4
 8080c58:	689b      	ldr	r3, [r3, #8]
 8080c5a:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080c5c:	f008 ff34 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
}
 8080c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire3.endTransmission(true);
 8080c64:	2101      	movs	r1, #1
 8080c66:	f008 bdae 	b.w	80897c6 <_ZN7TwoWire15endTransmissionEh>
	...

08080c6c <_Z20writeDefaultSettingsv>:
{
 8080c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080c6e:	f008 feb1 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080c72:	f240 6313 	movw	r3, #1555	; 0x613
    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080c76:	2564      	movs	r5, #100	; 0x64
    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080c78:	2400      	movs	r4, #0
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080c7a:	a901      	add	r1, sp, #4
 8080c7c:	2000      	movs	r0, #0
 8080c7e:	9301      	str	r3, [sp, #4]
 8080c80:	f7ff fed2 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080c84:	f008 fea6 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080c88:	a901      	add	r1, sp, #4
 8080c8a:	2008      	movs	r0, #8
 8080c8c:	9501      	str	r5, [sp, #4]
 8080c8e:	f7ff fecb 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, 100);
 8080c92:	f008 fe9f 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080c96:	a901      	add	r1, sp, #4
 8080c98:	2010      	movs	r0, #16
 8080c9a:	9501      	str	r5, [sp, #4]
 8080c9c:	f7ff fec4 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SLOPE_B_MEM_ADDRESS, 100);
 8080ca0:	f008 fe98 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080ca4:	a901      	add	r1, sp, #4
 8080ca6:	2098      	movs	r0, #152	; 0x98
 8080ca8:	9501      	str	r5, [sp, #4]
 8080caa:	f7ff febd 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080cae:	f008 fe91 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080cb2:	a901      	add	r1, sp, #4
 8080cb4:	2018      	movs	r0, #24
 8080cb6:	9501      	str	r5, [sp, #4]
 8080cb8:	f7ff feb6 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080cbc:	f008 fe8a 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080cc0:	a901      	add	r1, sp, #4
 8080cc2:	2020      	movs	r0, #32
 8080cc4:	9501      	str	r5, [sp, #4]
 8080cc6:	f7ff feaf 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080cca:	f008 fe83 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080cce:	a901      	add	r1, sp, #4
 8080cd0:	2028      	movs	r0, #40	; 0x28
 8080cd2:	9501      	str	r5, [sp, #4]
 8080cd4:	f7ff fea8 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080cd8:	f008 fe7c 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080cdc:	a901      	add	r1, sp, #4
 8080cde:	2030      	movs	r0, #48	; 0x30
 8080ce0:	9501      	str	r5, [sp, #4]
 8080ce2:	f7ff fea1 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080ce6:	f008 fe75 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080cea:	a901      	add	r1, sp, #4
 8080cec:	2038      	movs	r0, #56	; 0x38
 8080cee:	9501      	str	r5, [sp, #4]
 8080cf0:	f7ff fe9a 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080cf4:	f008 fe6e 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080cf8:	a901      	add	r1, sp, #4
 8080cfa:	2040      	movs	r0, #64	; 0x40
 8080cfc:	9501      	str	r5, [sp, #4]
 8080cfe:	f7ff fe93 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080d02:	f008 fe67 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080d06:	a901      	add	r1, sp, #4
 8080d08:	2004      	movs	r0, #4
 8080d0a:	9401      	str	r4, [sp, #4]
 8080d0c:	f7ff fe8c 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_ZERO_A_MEM_ADDRESS, 0);
 8080d10:	f008 fe60 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080d14:	a901      	add	r1, sp, #4
 8080d16:	200c      	movs	r0, #12
 8080d18:	9401      	str	r4, [sp, #4]
 8080d1a:	f7ff fe85 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_ZERO_B_MEM_ADDRESS, 0);
 8080d1e:	f008 fe59 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080d22:	a901      	add	r1, sp, #4
 8080d24:	2094      	movs	r0, #148	; 0x94
 8080d26:	9401      	str	r4, [sp, #4]
 8080d28:	f7ff fe7e 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080d2c:	f008 fe52 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080d30:	a901      	add	r1, sp, #4
 8080d32:	2014      	movs	r0, #20
 8080d34:	9401      	str	r4, [sp, #4]
 8080d36:	f7ff fe77 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8080d3a:	f008 fe4b 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080d3e:	a901      	add	r1, sp, #4
 8080d40:	201c      	movs	r0, #28
 8080d42:	9401      	str	r4, [sp, #4]
 8080d44:	f7ff fe70 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8080d48:	f008 fe44 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080d4c:	a901      	add	r1, sp, #4
 8080d4e:	2024      	movs	r0, #36	; 0x24
 8080d50:	9401      	str	r4, [sp, #4]
 8080d52:	f7ff fe69 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8080d56:	f008 fe3d 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080d5a:	a901      	add	r1, sp, #4
 8080d5c:	202c      	movs	r0, #44	; 0x2c
 8080d5e:	9401      	str	r4, [sp, #4]
 8080d60:	f7ff fe62 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8080d64:	f008 fe36 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080d68:	a901      	add	r1, sp, #4
 8080d6a:	2034      	movs	r0, #52	; 0x34
 8080d6c:	9401      	str	r4, [sp, #4]
 8080d6e:	f7ff fe5b 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8080d72:	f008 fe2f 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080d76:	a901      	add	r1, sp, #4
 8080d78:	203c      	movs	r0, #60	; 0x3c
 8080d7a:	9401      	str	r4, [sp, #4]
 8080d7c:	f7ff fe54 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8080d80:	f008 fe28 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080d84:	a901      	add	r1, sp, #4
 8080d86:	2044      	movs	r0, #68	; 0x44
 8080d88:	9401      	str	r4, [sp, #4]
 8080d8a:	f7ff fe4d 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8080d8e:	f008 fe21 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080d92:	a901      	add	r1, sp, #4
 8080d94:	2048      	movs	r0, #72	; 0x48
 8080d96:	9401      	str	r4, [sp, #4]
 8080d98:	f7ff fe46 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8080d9c:	f008 fe1a 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080da0:	a901      	add	r1, sp, #4
 8080da2:	2058      	movs	r0, #88	; 0x58
 8080da4:	9401      	str	r4, [sp, #4]
 8080da6:	f7ff fe3f 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080daa:	f008 fe13 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080dae:	4941      	ldr	r1, [pc, #260]	; (8080eb4 <_Z20writeDefaultSettingsv+0x248>)
 8080db0:	205c      	movs	r0, #92	; 0x5c
 8080db2:	f7ff fe39 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 8080db6:	f008 fe0d 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080dbe:	a901      	add	r1, sp, #4
 8080dc0:	204c      	movs	r0, #76	; 0x4c
 8080dc2:	9301      	str	r3, [sp, #4]
 8080dc4:	f7ff fe30 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8080dc8:	f008 fe04 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080dcc:	f242 7310 	movw	r3, #10000	; 0x2710
 8080dd0:	a901      	add	r1, sp, #4
 8080dd2:	2050      	movs	r0, #80	; 0x50
 8080dd4:	9301      	str	r3, [sp, #4]
 8080dd6:	f7ff fe27 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 8080dda:	f008 fdfb 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080dde:	f06f 0306 	mvn.w	r3, #6
 8080de2:	a901      	add	r1, sp, #4
 8080de4:	2054      	movs	r0, #84	; 0x54
 8080de6:	9301      	str	r3, [sp, #4]
 8080de8:	f7ff fe1e 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    Time.zone(tempValue);
 8080dec:	4b32      	ldr	r3, [pc, #200]	; (8080eb8 <_Z20writeDefaultSettingsv+0x24c>)
 8080dee:	6818      	ldr	r0, [r3, #0]
 8080df0:	f009 fc62 	bl	808a6b8 <__aeabi_i2f>
 8080df4:	f007 fc84 	bl	8088700 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8080df8:	f008 fdec 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080dfc:	a901      	add	r1, sp, #4
 8080dfe:	2060      	movs	r0, #96	; 0x60
 8080e00:	9401      	str	r4, [sp, #4]
 8080e02:	f7ff fe11 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080e06:	f008 fde5 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080e0a:	4628      	mov	r0, r5
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080e0c:	2501      	movs	r5, #1
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080e0e:	a901      	add	r1, sp, #4
 8080e10:	9401      	str	r4, [sp, #4]
 8080e12:	f7ff fe09 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080e16:	f008 fddd 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080e1a:	a901      	add	r1, sp, #4
 8080e1c:	2068      	movs	r0, #104	; 0x68
 8080e1e:	9501      	str	r5, [sp, #4]
 8080e20:	f7ff fe02 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8080e24:	f008 fdd6 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080e28:	a901      	add	r1, sp, #4
 8080e2a:	206c      	movs	r0, #108	; 0x6c
 8080e2c:	9401      	str	r4, [sp, #4]
 8080e2e:	f7ff fdfb 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS, 0);
 8080e32:	f008 fdcf 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080e36:	a901      	add	r1, sp, #4
 8080e38:	2070      	movs	r0, #112	; 0x70
 8080e3a:	9401      	str	r4, [sp, #4]
 8080e3c:	f7ff fdf4 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8080e40:	f008 fdc8 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080e44:	a901      	add	r1, sp, #4
 8080e46:	2074      	movs	r0, #116	; 0x74
 8080e48:	9501      	str	r5, [sp, #4]
 8080e4a:	f7ff fded 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 8080e4e:	f008 fdc1 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080e52:	a901      	add	r1, sp, #4
 8080e54:	2078      	movs	r0, #120	; 0x78
 8080e56:	9501      	str	r5, [sp, #4]
 8080e58:	f7ff fde6 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8080e5c:	f008 fdba 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080e60:	a901      	add	r1, sp, #4
 8080e62:	207c      	movs	r0, #124	; 0x7c
 8080e64:	9401      	str	r4, [sp, #4]
 8080e66:	f7ff fddf 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 8080e6a:	f008 fdb3 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080e6e:	a901      	add	r1, sp, #4
 8080e70:	2080      	movs	r0, #128	; 0x80
 8080e72:	9501      	str	r5, [sp, #4]
 8080e74:	f7ff fdd8 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8080e78:	f008 fdac 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080e7c:	a901      	add	r1, sp, #4
 8080e7e:	2084      	movs	r0, #132	; 0x84
 8080e80:	9401      	str	r4, [sp, #4]
 8080e82:	f7ff fdd1 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 8080e86:	f008 fda5 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080e8a:	a901      	add	r1, sp, #4
 8080e8c:	2088      	movs	r0, #136	; 0x88
 8080e8e:	9401      	str	r4, [sp, #4]
 8080e90:	f7ff fdca 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
 8080e94:	f008 fd9e 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080e98:	a901      	add	r1, sp, #4
 8080e9a:	208c      	movs	r0, #140	; 0x8c
 8080e9c:	9401      	str	r4, [sp, #4]
 8080e9e:	f7ff fdc3 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 8080ea2:	f008 fd97 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080ea6:	a901      	add	r1, sp, #4
 8080ea8:	2090      	movs	r0, #144	; 0x90
 8080eaa:	9401      	str	r4, [sp, #4]
 8080eac:	f7ff fdbc 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
}
 8080eb0:	b003      	add	sp, #12
 8080eb2:	bd30      	pop	{r4, r5, pc}
 8080eb4:	20001c88 	.word	0x20001c88
 8080eb8:	20001c74 	.word	0x20001c74

08080ebc <_Z14readStoredVarsv>:
{
 8080ebc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8080ec0:	4cc6      	ldr	r4, [pc, #792]	; (80811dc <_Z14readStoredVarsv+0x320>)
 8080ec2:	f008 fd87 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080ec6:	4621      	mov	r1, r4
 8080ec8:	2000      	movs	r0, #0
 8080eca:	f7ff fdcc 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if (DEVICE_id == -1) 
 8080ece:	6823      	ldr	r3, [r4, #0]
 8080ed0:	3301      	adds	r3, #1
 8080ed2:	d104      	bne.n	8080ede <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 8080ed4:	f240 6313 	movw	r3, #1555	; 0x613
 8080ed8:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 8080eda:	f7ff fec7 	bl	8080c6c <_Z20writeDefaultSettingsv>
    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8080ede:	f008 fd79 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080ee2:	a901      	add	r1, sp, #4
 8080ee4:	2008      	movs	r0, #8
 8080ee6:	f7ff fdbe 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO2_slope = tempValue;
 8080eea:	9801      	ldr	r0, [sp, #4]
 8080eec:	f009 fbe4 	bl	808a6b8 <__aeabi_i2f>
    CO2_slope /= 100;
 8080ef0:	49bb      	ldr	r1, [pc, #748]	; (80811e0 <_Z14readStoredVarsv+0x324>)
 8080ef2:	f009 fce9 	bl	808a8c8 <__aeabi_fdiv>
 8080ef6:	f8df 9374 	ldr.w	r9, [pc, #884]	; 808126c <_Z14readStoredVarsv+0x3b0>
    CO_slopeA /= 100;
 8080efa:	f8df 8374 	ldr.w	r8, [pc, #884]	; 8081270 <_Z14readStoredVarsv+0x3b4>
    CO2_slope /= 100;
 8080efe:	f8c9 0000 	str.w	r0, [r9]
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 8080f02:	f008 fd67 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080f06:	a901      	add	r1, sp, #4
 8080f08:	2010      	movs	r0, #16
 8080f0a:	f7ff fdac 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO_slopeA = tempValue;
 8080f0e:	9801      	ldr	r0, [sp, #4]
 8080f10:	f009 fbd2 	bl	808a6b8 <__aeabi_i2f>
    CO_slopeA /= 100;
 8080f14:	49b2      	ldr	r1, [pc, #712]	; (80811e0 <_Z14readStoredVarsv+0x324>)
 8080f16:	f009 fcd7 	bl	808a8c8 <__aeabi_fdiv>
 8080f1a:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_B_MEM_ADDRESS, tempValue);
 8080f1e:	f008 fd59 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080f22:	a901      	add	r1, sp, #4
 8080f24:	2098      	movs	r0, #152	; 0x98
 8080f26:	f7ff fd9e 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    CO_slopeB = tempValue;
 8080f2a:	9801      	ldr	r0, [sp, #4]
 8080f2c:	f009 fbc4 	bl	808a6b8 <__aeabi_i2f>
    CO_slopeB /= 100;
 8080f30:	49ab      	ldr	r1, [pc, #684]	; (80811e0 <_Z14readStoredVarsv+0x324>)
 8080f32:	f009 fcc9 	bl	808a8c8 <__aeabi_fdiv>
 8080f36:	4fab      	ldr	r7, [pc, #684]	; (80811e4 <_Z14readStoredVarsv+0x328>)
    PM_1_slope /= 100;
 8080f38:	4eab      	ldr	r6, [pc, #684]	; (80811e8 <_Z14readStoredVarsv+0x32c>)
    CO_slopeB /= 100;
 8080f3a:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8080f3c:	f008 fd4a 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080f40:	a901      	add	r1, sp, #4
 8080f42:	2018      	movs	r0, #24
 8080f44:	f7ff fd8f 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_1_slope = tempValue;
 8080f48:	9801      	ldr	r0, [sp, #4]
 8080f4a:	f009 fbb5 	bl	808a6b8 <__aeabi_i2f>
    PM_1_slope /= 100;
 8080f4e:	49a4      	ldr	r1, [pc, #656]	; (80811e0 <_Z14readStoredVarsv+0x324>)
 8080f50:	f009 fcba 	bl	808a8c8 <__aeabi_fdiv>
 8080f54:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8080f56:	f008 fd3d 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080f5a:	a901      	add	r1, sp, #4
 8080f5c:	2020      	movs	r0, #32
 8080f5e:	f7ff fd82 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_25_slope = tempValue;
 8080f62:	9801      	ldr	r0, [sp, #4]
 8080f64:	f009 fba8 	bl	808a6b8 <__aeabi_i2f>
    PM_25_slope /= 100;
 8080f68:	499d      	ldr	r1, [pc, #628]	; (80811e0 <_Z14readStoredVarsv+0x324>)
 8080f6a:	f009 fcad 	bl	808a8c8 <__aeabi_fdiv>
 8080f6e:	4d9f      	ldr	r5, [pc, #636]	; (80811ec <_Z14readStoredVarsv+0x330>)
    PM_10_slope /= 100;
 8080f70:	4c9f      	ldr	r4, [pc, #636]	; (80811f0 <_Z14readStoredVarsv+0x334>)
    PM_25_slope /= 100;
 8080f72:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8080f74:	f008 fd2e 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080f78:	a901      	add	r1, sp, #4
 8080f7a:	2028      	movs	r0, #40	; 0x28
 8080f7c:	f7ff fd73 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    PM_10_slope = tempValue;
 8080f80:	9801      	ldr	r0, [sp, #4]
 8080f82:	f009 fb99 	bl	808a6b8 <__aeabi_i2f>
    PM_10_slope /= 100;
 8080f86:	4996      	ldr	r1, [pc, #600]	; (80811e0 <_Z14readStoredVarsv+0x324>)
 8080f88:	f009 fc9e 	bl	808a8c8 <__aeabi_fdiv>
 8080f8c:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 8080f8e:	f008 fd21 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080f92:	a901      	add	r1, sp, #4
 8080f94:	2030      	movs	r0, #48	; 0x30
 8080f96:	f7ff fd66 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    temp_slope = tempValue;
 8080f9a:	9801      	ldr	r0, [sp, #4]
 8080f9c:	f009 fb8c 	bl	808a6b8 <__aeabi_i2f>
    temp_slope /= 100;
 8080fa0:	498f      	ldr	r1, [pc, #572]	; (80811e0 <_Z14readStoredVarsv+0x324>)
 8080fa2:	f009 fc91 	bl	808a8c8 <__aeabi_fdiv>
 8080fa6:	4b93      	ldr	r3, [pc, #588]	; (80811f4 <_Z14readStoredVarsv+0x338>)
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8080fa8:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8081274 <_Z14readStoredVarsv+0x3b8>
    temp_slope /= 100;
 8080fac:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8080fae:	f008 fd11 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080fb2:	a901      	add	r1, sp, #4
 8080fb4:	2038      	movs	r0, #56	; 0x38
 8080fb6:	f7ff fd56 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    pressure_slope = tempValue;
 8080fba:	9801      	ldr	r0, [sp, #4]
 8080fbc:	f009 fb7c 	bl	808a6b8 <__aeabi_i2f>
    pressure_slope /= 100;
 8080fc0:	4987      	ldr	r1, [pc, #540]	; (80811e0 <_Z14readStoredVarsv+0x324>)
 8080fc2:	f009 fc81 	bl	808a8c8 <__aeabi_fdiv>
 8080fc6:	4b8c      	ldr	r3, [pc, #560]	; (80811f8 <_Z14readStoredVarsv+0x33c>)
 8080fc8:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8080fca:	f008 fd03 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080fce:	a901      	add	r1, sp, #4
 8080fd0:	2040      	movs	r0, #64	; 0x40
 8080fd2:	f7ff fd48 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    rh_slope = tempValue;
 8080fd6:	9801      	ldr	r0, [sp, #4]
 8080fd8:	f009 fb6e 	bl	808a6b8 <__aeabi_i2f>
    rh_slope /= 100;
 8080fdc:	4980      	ldr	r1, [pc, #512]	; (80811e0 <_Z14readStoredVarsv+0x324>)
 8080fde:	f009 fc73 	bl	808a8c8 <__aeabi_fdiv>
 8080fe2:	4b86      	ldr	r3, [pc, #536]	; (80811fc <_Z14readStoredVarsv+0x340>)
 8080fe4:	6018      	str	r0, [r3, #0]
    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 8080fe6:	f008 fcf5 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080fea:	4985      	ldr	r1, [pc, #532]	; (8081200 <_Z14readStoredVarsv+0x344>)
 8080fec:	2004      	movs	r0, #4
 8080fee:	f7ff fd3a 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_ZERO_A_MEM_ADDRESS, CO_zeroA);
 8080ff2:	f008 fcef 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8080ff6:	4983      	ldr	r1, [pc, #524]	; (8081204 <_Z14readStoredVarsv+0x348>)
 8080ff8:	200c      	movs	r0, #12
 8080ffa:	f7ff fd34 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_ZERO_B_MEM_ADDRESS, CO_zeroB);
 8080ffe:	f008 fce9 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081002:	4981      	ldr	r1, [pc, #516]	; (8081208 <_Z14readStoredVarsv+0x34c>)
 8081004:	2094      	movs	r0, #148	; 0x94
 8081006:	f7ff fd2e 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 808100a:	f008 fce3 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 808100e:	497f      	ldr	r1, [pc, #508]	; (808120c <_Z14readStoredVarsv+0x350>)
 8081010:	2014      	movs	r0, #20
 8081012:	f7ff fd28 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 8081016:	f008 fcdd 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 808101a:	497d      	ldr	r1, [pc, #500]	; (8081210 <_Z14readStoredVarsv+0x354>)
 808101c:	201c      	movs	r0, #28
 808101e:	f7ff fd22 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 8081022:	f008 fcd7 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081026:	497b      	ldr	r1, [pc, #492]	; (8081214 <_Z14readStoredVarsv+0x358>)
 8081028:	2024      	movs	r0, #36	; 0x24
 808102a:	f7ff fd1c 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 808102e:	f008 fcd1 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081032:	4979      	ldr	r1, [pc, #484]	; (8081218 <_Z14readStoredVarsv+0x35c>)
 8081034:	202c      	movs	r0, #44	; 0x2c
 8081036:	f7ff fd16 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 808103a:	f008 fccb 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 808103e:	4977      	ldr	r1, [pc, #476]	; (808121c <_Z14readStoredVarsv+0x360>)
 8081040:	2034      	movs	r0, #52	; 0x34
 8081042:	f7ff fd10 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 8081046:	f008 fcc5 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 808104a:	4975      	ldr	r1, [pc, #468]	; (8081220 <_Z14readStoredVarsv+0x364>)
 808104c:	203c      	movs	r0, #60	; 0x3c
 808104e:	f7ff fd0a 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8081052:	f008 fcbf 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081056:	4973      	ldr	r1, [pc, #460]	; (8081224 <_Z14readStoredVarsv+0x368>)
 8081058:	2044      	movs	r0, #68	; 0x44
 808105a:	f7ff fd04 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 808105e:	f008 fcb9 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081062:	4971      	ldr	r1, [pc, #452]	; (8081228 <_Z14readStoredVarsv+0x36c>)
 8081064:	2048      	movs	r0, #72	; 0x48
 8081066:	f7ff fcfe 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808106a:	f008 fcb3 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 808106e:	496f      	ldr	r1, [pc, #444]	; (808122c <_Z14readStoredVarsv+0x370>)
 8081070:	2058      	movs	r0, #88	; 0x58
 8081072:	f7ff fcf8 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 8081076:	f008 fcad 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 808107a:	496d      	ldr	r1, [pc, #436]	; (8081230 <_Z14readStoredVarsv+0x374>)
 808107c:	205c      	movs	r0, #92	; 0x5c
 808107e:	f7ff fcf2 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8081082:	f008 fca7 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081086:	496b      	ldr	r1, [pc, #428]	; (8081234 <_Z14readStoredVarsv+0x378>)
 8081088:	204c      	movs	r0, #76	; 0x4c
 808108a:	f7ff fcec 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 808108e:	f008 fca1 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081092:	4969      	ldr	r1, [pc, #420]	; (8081238 <_Z14readStoredVarsv+0x37c>)
 8081094:	2050      	movs	r0, #80	; 0x50
 8081096:	f7ff fce6 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 808109a:	f008 fc9b 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 808109e:	a901      	add	r1, sp, #4
 80810a0:	2054      	movs	r0, #84	; 0x54
 80810a2:	f7ff fce0 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    Time.zone(tempValue);
 80810a6:	9801      	ldr	r0, [sp, #4]
 80810a8:	f009 fb06 	bl	808a6b8 <__aeabi_i2f>
 80810ac:	f007 fb28 	bl	8088700 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 80810b0:	f008 fc90 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80810b4:	4961      	ldr	r1, [pc, #388]	; (808123c <_Z14readStoredVarsv+0x380>)
 80810b6:	2060      	movs	r0, #96	; 0x60
 80810b8:	f7ff fcd5 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80810bc:	f008 fc8a 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80810c0:	495f      	ldr	r1, [pc, #380]	; (8081240 <_Z14readStoredVarsv+0x384>)
 80810c2:	2064      	movs	r0, #100	; 0x64
 80810c4:	f7ff fccf 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 80810c8:	f008 fc84 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80810cc:	495d      	ldr	r1, [pc, #372]	; (8081244 <_Z14readStoredVarsv+0x388>)
 80810ce:	2068      	movs	r0, #104	; 0x68
 80810d0:	f7ff fcc9 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80810d4:	f008 fc7e 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80810d8:	495b      	ldr	r1, [pc, #364]	; (8081248 <_Z14readStoredVarsv+0x38c>)
 80810da:	206c      	movs	r0, #108	; 0x6c
 80810dc:	f7ff fcc3 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 80810e0:	f008 fc78 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80810e4:	4959      	ldr	r1, [pc, #356]	; (808124c <_Z14readStoredVarsv+0x390>)
 80810e6:	2070      	movs	r0, #112	; 0x70
 80810e8:	f7ff fcbd 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 80810ec:	f008 fc72 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80810f0:	4957      	ldr	r1, [pc, #348]	; (8081250 <_Z14readStoredVarsv+0x394>)
 80810f2:	2074      	movs	r0, #116	; 0x74
 80810f4:	f7ff fcb7 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80810f8:	f008 fc6c 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80810fc:	4955      	ldr	r1, [pc, #340]	; (8081254 <_Z14readStoredVarsv+0x398>)
 80810fe:	2078      	movs	r0, #120	; 0x78
 8081100:	f7ff fcb1 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8081104:	f008 fc66 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081108:	4953      	ldr	r1, [pc, #332]	; (8081258 <_Z14readStoredVarsv+0x39c>)
 808110a:	207c      	movs	r0, #124	; 0x7c
 808110c:	f7ff fcab 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8081110:	f008 fc60 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081114:	4951      	ldr	r1, [pc, #324]	; (808125c <_Z14readStoredVarsv+0x3a0>)
 8081116:	2080      	movs	r0, #128	; 0x80
 8081118:	f7ff fca5 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 808111c:	f008 fc5a 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081120:	494f      	ldr	r1, [pc, #316]	; (8081260 <_Z14readStoredVarsv+0x3a4>)
 8081122:	2084      	movs	r0, #132	; 0x84
 8081124:	f7ff fc9f 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 8081128:	f008 fc54 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 808112c:	494d      	ldr	r1, [pc, #308]	; (8081264 <_Z14readStoredVarsv+0x3a8>)
 808112e:	2088      	movs	r0, #136	; 0x88
 8081130:	f7ff fc99 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8081134:	f008 fc4e 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081138:	4651      	mov	r1, sl
 808113a:	208c      	movs	r0, #140	; 0x8c
 808113c:	f7ff fc93 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8081140:	f008 fc48 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8081144:	2090      	movs	r0, #144	; 0x90
 8081146:	4948      	ldr	r1, [pc, #288]	; (8081268 <_Z14readStoredVarsv+0x3ac>)
 8081148:	f7ff fc8d 	bl	8080a66 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.0>
    if (sensible_iot_en) 
 808114c:	f8da 3000 	ldr.w	r3, [sl]
 8081150:	b113      	cbz	r3, 8081158 <_Z14readStoredVarsv+0x29c>
        Time.zone(0);       //use UTC if using sensible iot upload
 8081152:	2000      	movs	r0, #0
 8081154:	f007 fad4 	bl	8088700 <_ZN9TimeClass4zoneEf>
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 8081158:	f241 3187 	movw	r1, #4999	; 0x1387
 808115c:	4a3c      	ldr	r2, [pc, #240]	; (8081250 <_Z14readStoredVarsv+0x394>)
    if (!CO2_slope)
 808115e:	f8d9 0000 	ldr.w	r0, [r9]
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 8081162:	6813      	ldr	r3, [r2, #0]
 8081164:	3b01      	subs	r3, #1
 8081166:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 8081168:	bf88      	it	hi
 808116a:	2301      	movhi	r3, #1
    if (!CO2_slope)
 808116c:	f04f 0100 	mov.w	r1, #0
        measurements_to_average = 1;
 8081170:	bf88      	it	hi
 8081172:	6013      	strhi	r3, [r2, #0]
    if (!CO2_slope)
 8081174:	f009 fc88 	bl	808aa88 <__aeabi_fcmpeq>
 8081178:	b118      	cbz	r0, 8081182 <_Z14readStoredVarsv+0x2c6>
        CO2_slope = 1;
 808117a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 808117e:	f8c9 3000 	str.w	r3, [r9]
    if (!CO_slopeA)
 8081182:	2100      	movs	r1, #0
 8081184:	f8d8 0000 	ldr.w	r0, [r8]
 8081188:	f009 fc7e 	bl	808aa88 <__aeabi_fcmpeq>
 808118c:	b118      	cbz	r0, 8081196 <_Z14readStoredVarsv+0x2da>
        CO_slopeA = 1;
 808118e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8081192:	f8c8 3000 	str.w	r3, [r8]
    if (!CO_slopeB)
 8081196:	2100      	movs	r1, #0
 8081198:	6838      	ldr	r0, [r7, #0]
 808119a:	f009 fc75 	bl	808aa88 <__aeabi_fcmpeq>
 808119e:	b110      	cbz	r0, 80811a6 <_Z14readStoredVarsv+0x2ea>
        CO_slopeB = 1;
 80811a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80811a4:	603b      	str	r3, [r7, #0]
    if (!PM_1_slope)
 80811a6:	2100      	movs	r1, #0
 80811a8:	6830      	ldr	r0, [r6, #0]
 80811aa:	f009 fc6d 	bl	808aa88 <__aeabi_fcmpeq>
 80811ae:	b110      	cbz	r0, 80811b6 <_Z14readStoredVarsv+0x2fa>
        PM_1_slope = 1;
 80811b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80811b4:	6033      	str	r3, [r6, #0]
    if (!PM_25_slope)
 80811b6:	2100      	movs	r1, #0
 80811b8:	6828      	ldr	r0, [r5, #0]
 80811ba:	f009 fc65 	bl	808aa88 <__aeabi_fcmpeq>
 80811be:	b110      	cbz	r0, 80811c6 <_Z14readStoredVarsv+0x30a>
        PM_25_slope = 1;
 80811c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80811c4:	602b      	str	r3, [r5, #0]
    if (!PM_10_slope)
 80811c6:	2100      	movs	r1, #0
 80811c8:	6820      	ldr	r0, [r4, #0]
 80811ca:	f009 fc5d 	bl	808aa88 <__aeabi_fcmpeq>
 80811ce:	b110      	cbz	r0, 80811d6 <_Z14readStoredVarsv+0x31a>
        PM_10_slope = 1;
 80811d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80811d4:	6023      	str	r3, [r4, #0]
}
 80811d6:	b002      	add	sp, #8
 80811d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80811dc:	20000080 	.word	0x20000080
 80811e0:	42c80000 	.word	0x42c80000
 80811e4:	200002c8 	.word	0x200002c8
 80811e8:	200002e0 	.word	0x200002e0
 80811ec:	200002e8 	.word	0x200002e8
 80811f0:	200002d8 	.word	0x200002d8
 80811f4:	20001c78 	.word	0x20001c78
 80811f8:	20000790 	.word	0x20000790
 80811fc:	20000798 	.word	0x20000798
 8081200:	200002b8 	.word	0x200002b8
 8081204:	200002d0 	.word	0x200002d0
 8081208:	200002d4 	.word	0x200002d4
 808120c:	200002e4 	.word	0x200002e4
 8081210:	200002ec 	.word	0x200002ec
 8081214:	200002dc 	.word	0x200002dc
 8081218:	20001c7c 	.word	0x20001c7c
 808121c:	20000794 	.word	0x20000794
 8081220:	2000079c 	.word	0x2000079c
 8081224:	20001c4c 	.word	0x20001c4c
 8081228:	200005d4 	.word	0x200005d4
 808122c:	20000750 	.word	0x20000750
 8081230:	20001c88 	.word	0x20001c88
 8081234:	20000098 	.word	0x20000098
 8081238:	2000009c 	.word	0x2000009c
 808123c:	20001c80 	.word	0x20001c80
 8081240:	20000748 	.word	0x20000748
 8081244:	20000744 	.word	0x20000744
 8081248:	2000074c 	.word	0x2000074c
 808124c:	20000754 	.word	0x20000754
 8081250:	20000740 	.word	0x20000740
 8081254:	20000550 	.word	0x20000550
 8081258:	20000540 	.word	0x20000540
 808125c:	200006ac 	.word	0x200006ac
 8081260:	200002cc 	.word	0x200002cc
 8081264:	20000660 	.word	0x20000660
 8081268:	200005cc 	.word	0x200005cc
 808126c:	200002b4 	.word	0x200002b4
 8081270:	200002c4 	.word	0x200002c4
 8081274:	20000c18 	.word	0x20000c18

08081278 <_Z7echoGpsv>:
{
 8081278:	b510      	push	{r4, lr}
    while (!Serial.available()) 
 808127a:	f008 f8bb 	bl	80893f4 <_Z16_fetch_usbserialv>
 808127e:	6803      	ldr	r3, [r0, #0]
 8081280:	691b      	ldr	r3, [r3, #16]
 8081282:	4798      	blx	r3
 8081284:	b990      	cbnz	r0, 80812ac <_Z7echoGpsv+0x34>
        if (Serial5.available() > 0) 
 8081286:	f7ff fc6f 	bl	8080b68 <_Z22__fetch_global_Serial5v>
 808128a:	6803      	ldr	r3, [r0, #0]
 808128c:	691b      	ldr	r3, [r3, #16]
 808128e:	4798      	blx	r3
 8081290:	2800      	cmp	r0, #0
 8081292:	ddf2      	ble.n	808127a <_Z7echoGpsv+0x2>
            gps_byte = Serial5.read();
 8081294:	f7ff fc68 	bl	8080b68 <_Z22__fetch_global_Serial5v>
 8081298:	6803      	ldr	r3, [r0, #0]
 808129a:	695b      	ldr	r3, [r3, #20]
 808129c:	4798      	blx	r3
 808129e:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 80812a0:	f008 f8a8 	bl	80893f4 <_Z16_fetch_usbserialv>
 80812a4:	b2e1      	uxtb	r1, r4
 80812a6:	f007 f83d 	bl	8088324 <_ZN5Print5printEc>
 80812aa:	e7e6      	b.n	808127a <_Z7echoGpsv+0x2>
}
 80812ac:	bd10      	pop	{r4, pc}
	...

080812b0 <_Z11printPacketPhh>:
{
 80812b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80812b4:	4606      	mov	r6, r0
 80812b6:	460d      	mov	r5, r1
 80812b8:	2400      	movs	r4, #0
        sprintf(temp, "%.2X", packet[i]);
 80812ba:	4f0f      	ldr	r7, [pc, #60]	; (80812f8 <_Z11printPacketPhh+0x48>)
        if (i != len - 1)
 80812bc:	f101 38ff 	add.w	r8, r1, #4294967295
    for (uint8_t i = 0; i < len; i++)
 80812c0:	42ac      	cmp	r4, r5
 80812c2:	d012      	beq.n	80812ea <_Z11printPacketPhh+0x3a>
        sprintf(temp, "%.2X", packet[i]);
 80812c4:	4639      	mov	r1, r7
 80812c6:	5d32      	ldrb	r2, [r6, r4]
 80812c8:	a801      	add	r0, sp, #4
 80812ca:	f006 fa4b 	bl	8087764 <sprintf>
        Serial.print(temp);
 80812ce:	f008 f891 	bl	80893f4 <_Z16_fetch_usbserialv>
 80812d2:	a901      	add	r1, sp, #4
 80812d4:	f007 f822 	bl	808831c <_ZN5Print5printEPKc>
        if (i != len - 1)
 80812d8:	45a0      	cmp	r8, r4
 80812da:	d004      	beq.n	80812e6 <_Z11printPacketPhh+0x36>
            Serial.print(' ');
 80812dc:	f008 f88a 	bl	80893f4 <_Z16_fetch_usbserialv>
 80812e0:	2120      	movs	r1, #32
 80812e2:	f007 f81f 	bl	8088324 <_ZN5Print5printEc>
    for (uint8_t i = 0; i < len; i++)
 80812e6:	3401      	adds	r4, #1
 80812e8:	e7ea      	b.n	80812c0 <_Z11printPacketPhh+0x10>
    Serial.println();
 80812ea:	f008 f883 	bl	80893f4 <_Z16_fetch_usbserialv>
 80812ee:	f007 f81c 	bl	808832a <_ZN5Print7printlnEv>
}
 80812f2:	b002      	add	sp, #8
 80812f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80812f8:	0808cbfa 	.word	0x0808cbfa

080812fc <_Z10sendPacketPhh>:
{
 80812fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80812fe:	4604      	mov	r4, r0
 8081300:	460d      	mov	r5, r1
 8081302:	4606      	mov	r6, r0
 8081304:	180f      	adds	r7, r1, r0
    for (uint8_t i = 0; i < len; i++)
 8081306:	42be      	cmp	r6, r7
 8081308:	d007      	beq.n	808131a <_Z10sendPacketPhh+0x1e>
        Serial5.write(packet[i]);
 808130a:	f7ff fc2d 	bl	8080b68 <_Z22__fetch_global_Serial5v>
 808130e:	6803      	ldr	r3, [r0, #0]
 8081310:	f816 1b01 	ldrb.w	r1, [r6], #1
 8081314:	689b      	ldr	r3, [r3, #8]
 8081316:	4798      	blx	r3
    for (uint8_t i = 0; i < len; i++)
 8081318:	e7f5      	b.n	8081306 <_Z10sendPacketPhh+0xa>
    printPacket(packet, len);
 808131a:	4629      	mov	r1, r5
 808131c:	4620      	mov	r0, r4
}
 808131e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    printPacket(packet, len);
 8081322:	f7ff bfc5 	b.w	80812b0 <_Z11printPacketPhh>
	...

08081328 <_Z19enableContinuousGPSv>:
{
 8081328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 808132a:	4a07      	ldr	r2, [pc, #28]	; (8081348 <_Z19enableContinuousGPSv+0x20>)
 808132c:	ab01      	add	r3, sp, #4
 808132e:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 8081332:	6851      	ldr	r1, [r2, #4]
 8081334:	8912      	ldrh	r2, [r2, #8]
 8081336:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 8081338:	210a      	movs	r1, #10
 808133a:	a801      	add	r0, sp, #4
    byte packet[] = {
 808133c:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 808133e:	f7ff ffdd 	bl	80812fc <_Z10sendPacketPhh>
}
 8081342:	b005      	add	sp, #20
 8081344:	f85d fb04 	ldr.w	pc, [sp], #4
 8081348:	0808e9e8 	.word	0x0808e9e8

0808134c <_Z17enableLowPowerGPSv>:
{
 808134c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    byte packet[] = {
 808134e:	4a07      	ldr	r2, [pc, #28]	; (808136c <_Z17enableLowPowerGPSv+0x20>)
 8081350:	ab01      	add	r3, sp, #4
 8081352:	f852 0f18 	ldr.w	r0, [r2, #24]!
 8081356:	6851      	ldr	r1, [r2, #4]
 8081358:	8912      	ldrh	r2, [r2, #8]
 808135a:	c303      	stmia	r3!, {r0, r1}
    sendPacket(packet, sizeof(packet));
 808135c:	210a      	movs	r1, #10
 808135e:	a801      	add	r0, sp, #4
    byte packet[] = {
 8081360:	801a      	strh	r2, [r3, #0]
    sendPacket(packet, sizeof(packet));
 8081362:	f7ff ffcb 	bl	80812fc <_Z10sendPacketPhh>
}
 8081366:	b005      	add	sp, #20
 8081368:	f85d fb04 	ldr.w	pc, [sp], #4
 808136c:	0808e9e8 	.word	0x0808e9e8

08081370 <_Z15readTemperaturev>:
{
 8081370:	b538      	push	{r3, r4, r5, lr}
 8081372:	4b2f      	ldr	r3, [pc, #188]	; (8081430 <_Z15readTemperaturev+0xc0>)
 8081374:	681d      	ldr	r5, [r3, #0]
    if (hih8120_enabled)
 8081376:	4b2f      	ldr	r3, [pc, #188]	; (8081434 <_Z15readTemperaturev+0xc4>)
 8081378:	681b      	ldr	r3, [r3, #0]
 808137a:	b30b      	cbz	r3, 80813c0 <_Z15readTemperaturev+0x50>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 808137c:	4b2e      	ldr	r3, [pc, #184]	; (8081438 <_Z15readTemperaturev+0xc8>)
 808137e:	8958      	ldrh	r0, [r3, #10]
 8081380:	f009 f996 	bl	808a6b0 <__aeabi_ui2f>
 8081384:	492d      	ldr	r1, [pc, #180]	; (808143c <_Z15readTemperaturev+0xcc>)
 8081386:	f009 fa9f 	bl	808a8c8 <__aeabi_fdiv>
 808138a:	492d      	ldr	r1, [pc, #180]	; (8081440 <_Z15readTemperaturev+0xd0>)
 808138c:	f009 f9e8 	bl	808a760 <__aeabi_fmul>
 8081390:	492c      	ldr	r1, [pc, #176]	; (8081444 <_Z15readTemperaturev+0xd4>)
 8081392:	f009 f8db 	bl	808a54c <__aeabi_fsub>
 8081396:	4604      	mov	r4, r0
        if (debugging_enabled)
 8081398:	b125      	cbz	r5, 80813a4 <_Z15readTemperaturev+0x34>
            Serial.println("Temperature reading from HIH8120");
 808139a:	f008 f82b 	bl	80893f4 <_Z16_fetch_usbserialv>
 808139e:	492a      	ldr	r1, [pc, #168]	; (8081448 <_Z15readTemperaturev+0xd8>)
 80813a0:	f006 ffcf 	bl	8088342 <_ZN5Print7printlnEPKc>
    temperature *= temp_slope;
 80813a4:	4b29      	ldr	r3, [pc, #164]	; (808144c <_Z15readTemperaturev+0xdc>)
 80813a6:	4620      	mov	r0, r4
 80813a8:	6819      	ldr	r1, [r3, #0]
 80813aa:	f009 f9d9 	bl	808a760 <__aeabi_fmul>
 80813ae:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 80813b0:	4b27      	ldr	r3, [pc, #156]	; (8081450 <_Z15readTemperaturev+0xe0>)
 80813b2:	6818      	ldr	r0, [r3, #0]
 80813b4:	f009 f980 	bl	808a6b8 <__aeabi_i2f>
 80813b8:	4621      	mov	r1, r4
 80813ba:	f009 f8c9 	bl	808a550 <__addsf3>
}
 80813be:	bd38      	pop	{r3, r4, r5, pc}
    else if (new_temperature_sensor_enabled)
 80813c0:	4b24      	ldr	r3, [pc, #144]	; (8081454 <_Z15readTemperaturev+0xe4>)
 80813c2:	681b      	ldr	r3, [r3, #0]
 80813c4:	b313      	cbz	r3, 808140c <_Z15readTemperaturev+0x9c>
        if (debugging_enabled)
 80813c6:	b125      	cbz	r5, 80813d2 <_Z15readTemperaturev+0x62>
            Serial.println("Temperature reading from TMP36");
 80813c8:	f008 f814 	bl	80893f4 <_Z16_fetch_usbserialv>
 80813cc:	4922      	ldr	r1, [pc, #136]	; (8081458 <_Z15readTemperaturev+0xe8>)
 80813ce:	f006 ffb8 	bl	8088342 <_ZN5Print7printlnEPKc>
        temperature = analogRead(A1);
 80813d2:	200b      	movs	r0, #11
 80813d4:	f008 fae6 	bl	80899a4 <analogRead>
 80813d8:	f009 f96e 	bl	808a6b8 <__aeabi_i2f>
        temperature *= VOLTS_PER_UNIT;
 80813dc:	f008 fd12 	bl	8089e04 <__aeabi_f2d>
 80813e0:	a30f      	add	r3, pc, #60	; (adr r3, 8081420 <_Z15readTemperaturev+0xb0>)
 80813e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80813e6:	f008 fd65 	bl	8089eb4 <__aeabi_dmul>
 80813ea:	f009 f85b 	bl	808a4a4 <__aeabi_d2f>
        temperature -= TMP36_OFFSET;
 80813ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80813f2:	f009 f8ab 	bl	808a54c <__aeabi_fsub>
        temperature /= TMP36_VPDC;
 80813f6:	f008 fd05 	bl	8089e04 <__aeabi_f2d>
 80813fa:	a30b      	add	r3, pc, #44	; (adr r3, 8081428 <_Z15readTemperaturev+0xb8>)
 80813fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081400:	f008 fe82 	bl	808a108 <__aeabi_ddiv>
 8081404:	f009 f84e 	bl	808a4a4 <__aeabi_d2f>
 8081408:	4604      	mov	r4, r0
 808140a:	e7cb      	b.n	80813a4 <_Z15readTemperaturev+0x34>
        if (debugging_enabled)
 808140c:	b125      	cbz	r5, 8081418 <_Z15readTemperaturev+0xa8>
            Serial.println("Temperature reading from BME for Alphasense");
 808140e:	f007 fff1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081412:	4912      	ldr	r1, [pc, #72]	; (808145c <_Z15readTemperaturev+0xec>)
 8081414:	f006 ff95 	bl	8088342 <_ZN5Print7printlnEPKc>
        temperature = bme.temperature;
 8081418:	4b11      	ldr	r3, [pc, #68]	; (8081460 <_Z15readTemperaturev+0xf0>)
 808141a:	681c      	ldr	r4, [r3, #0]
 808141c:	e7c2      	b.n	80813a4 <_Z15readTemperaturev+0x34>
 808141e:	bf00      	nop
 8081420:	eb1c432d 	.word	0xeb1c432d
 8081424:	3f4a36e2 	.word	0x3f4a36e2
 8081428:	47ae147b 	.word	0x47ae147b
 808142c:	3f847ae1 	.word	0x3f847ae1
 8081430:	200005d4 	.word	0x200005d4
 8081434:	200006ac 	.word	0x200006ac
 8081438:	200006a0 	.word	0x200006a0
 808143c:	467ff800 	.word	0x467ff800
 8081440:	43250000 	.word	0x43250000
 8081444:	42200000 	.word	0x42200000
 8081448:	0808cbff 	.word	0x0808cbff
 808144c:	20001c78 	.word	0x20001c78
 8081450:	20001c7c 	.word	0x20001c7c
 8081454:	20000744 	.word	0x20000744
 8081458:	0808cc20 	.word	0x0808cc20
 808145c:	0808cc3f 	.word	0x0808cc3f
 8081460:	20000554 	.word	0x20000554
 8081464:	00000000 	.word	0x00000000

08081468 <_Z10readAlpha2v>:
{
 8081468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (debugging_enabled)
 808146c:	4f8e      	ldr	r7, [pc, #568]	; (80816a8 <_Z10readAlpha2v+0x240>)
{
 808146e:	b088      	sub	sp, #32
    String alpha2_ppmRounded = "";
 8081470:	4668      	mov	r0, sp
 8081472:	498e      	ldr	r1, [pc, #568]	; (80816ac <_Z10readAlpha2v+0x244>)
 8081474:	f006 fcf0 	bl	8087e58 <_ZN6StringC1EPKc>
    if (debugging_enabled)
 8081478:	683a      	ldr	r2, [r7, #0]
 808147a:	b122      	cbz	r2, 8081486 <_Z10readAlpha2v+0x1e>
        Serial.println("Start of alpha 2 read");
 808147c:	f007 ffba 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081480:	498b      	ldr	r1, [pc, #556]	; (80816b0 <_Z10readAlpha2v+0x248>)
 8081482:	f006 ff5e 	bl	8088342 <_ZN5Print7printlnEPKc>
    digitalWrite(lmp91000_2_en, LOW);   //enable
 8081486:	4d8b      	ldr	r5, [pc, #556]	; (80816b4 <_Z10readAlpha2v+0x24c>)
 8081488:	2100      	movs	r1, #0
 808148a:	8828      	ldrh	r0, [r5, #0]
 808148c:	f008 fa71 	bl	8089972 <digitalWrite>
    if (Wire.requestFrom(0x4A, 1) == 0)
 8081490:	f008 faf2 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8081494:	2201      	movs	r2, #1
 8081496:	214a      	movs	r1, #74	; 0x4a
 8081498:	f008 f973 	bl	8089782 <_ZN7TwoWire11requestFromEhj>
 808149c:	bb48      	cbnz	r0, 80814f2 <_Z10readAlpha2v+0x8a>
        Serial.println("Couldn't communicate with LMP91000 2");
 808149e:	f007 ffa9 	bl	80893f4 <_Z16_fetch_usbserialv>
 80814a2:	4985      	ldr	r1, [pc, #532]	; (80816b8 <_Z10readAlpha2v+0x250>)
 80814a4:	f006 ff4d 	bl	8088342 <_ZN5Print7printlnEPKc>
    float volt_half_Vref = 0;
 80814a8:	2400      	movs	r4, #0
    if (lmp91000_2.read(LMP91000_STATUS_REG) == 0)
 80814aa:	2100      	movs	r1, #0
 80814ac:	4883      	ldr	r0, [pc, #524]	; (80816bc <_Z10readAlpha2v+0x254>)
 80814ae:	f003 fbe2 	bl	8084c76 <_ZN8LMP910004readEh>
 80814b2:	b930      	cbnz	r0, 80814c2 <_Z10readAlpha2v+0x5a>
        if (debugging_enabled)
 80814b4:	683b      	ldr	r3, [r7, #0]
 80814b6:	b123      	cbz	r3, 80814c2 <_Z10readAlpha2v+0x5a>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 80814b8:	f007 ff9c 	bl	80893f4 <_Z16_fetch_usbserialv>
 80814bc:	4980      	ldr	r1, [pc, #512]	; (80816c0 <_Z10readAlpha2v+0x258>)
 80814be:	f006 ff40 	bl	8088342 <_ZN5Print7printlnEPKc>
    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
 80814c2:	f008 fad9 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80814c6:	2201      	movs	r2, #1
 80814c8:	214a      	movs	r1, #74	; 0x4a
 80814ca:	f008 f95a 	bl	8089782 <_ZN7TwoWire11requestFromEhj>
 80814ce:	2800      	cmp	r0, #0
 80814d0:	d139      	bne.n	8081546 <_Z10readAlpha2v+0xde>
        alpha2_ppmRounded = "-99";
 80814d2:	4668      	mov	r0, sp
 80814d4:	497b      	ldr	r1, [pc, #492]	; (80816c4 <_Z10readAlpha2v+0x25c>)
 80814d6:	f006 fd11 	bl	8087efc <_ZN6StringaSEPKc>
    float alpha2_ppmraw = 0;
 80814da:	2400      	movs	r4, #0
    digitalWrite(lmp91000_2_en, HIGH);  //disable
 80814dc:	2101      	movs	r1, #1
 80814de:	8828      	ldrh	r0, [r5, #0]
 80814e0:	f008 fa47 	bl	8089972 <digitalWrite>
    String alpha2_ppmRounded = "";
 80814e4:	4668      	mov	r0, sp
 80814e6:	f006 fc6d 	bl	8087dc4 <_ZN6StringD1Ev>
}
 80814ea:	4620      	mov	r0, r4
 80814ec:	b008      	add	sp, #32
 80814ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 80814f2:	2103      	movs	r1, #3
 80814f4:	4874      	ldr	r0, [pc, #464]	; (80816c8 <_Z10readAlpha2v+0x260>)
 80814f6:	f003 fd05 	bl	8084f04 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 80814fa:	f009 f8dd 	bl	808a6b8 <__aeabi_i2f>
 80814fe:	4b73      	ldr	r3, [pc, #460]	; (80816cc <_Z10readAlpha2v+0x264>)
 8081500:	6819      	ldr	r1, [r3, #0]
 8081502:	f009 f92d 	bl	808a760 <__aeabi_fmul>
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8081506:	4972      	ldr	r1, [pc, #456]	; (80816d0 <_Z10readAlpha2v+0x268>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081508:	4604      	mov	r4, r0
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 808150a:	f009 f9dd 	bl	808a8c8 <__aeabi_fdiv>
 808150e:	4606      	mov	r6, r0
 8081510:	f008 fc78 	bl	8089e04 <__aeabi_f2d>
 8081514:	2200      	movs	r2, #0
 8081516:	4b6f      	ldr	r3, [pc, #444]	; (80816d4 <_Z10readAlpha2v+0x26c>)
 8081518:	f008 fb14 	bl	8089b44 <__aeabi_dsub>
 808151c:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8081520:	2200      	movs	r2, #0
 8081522:	4649      	mov	r1, r9
 8081524:	4b6c      	ldr	r3, [pc, #432]	; (80816d8 <_Z10readAlpha2v+0x270>)
 8081526:	f008 ff55 	bl	808a3d4 <__aeabi_dcmpgt>
 808152a:	2800      	cmp	r0, #0
 808152c:	d0bd      	beq.n	80814aa <_Z10readAlpha2v+0x42>
            Serial.print("half vref2 ads1");
 808152e:	f007 ff61 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081532:	496a      	ldr	r1, [pc, #424]	; (80816dc <_Z10readAlpha2v+0x274>)
 8081534:	f006 fef2 	bl	808831c <_ZN5Print5printEPKc>
            Serial.println(volt_half_Vref / 1000);
 8081538:	f007 ff5c 	bl	80893f4 <_Z16_fetch_usbserialv>
 808153c:	2202      	movs	r2, #2
 808153e:	4631      	mov	r1, r6
 8081540:	f006 fffe 	bl	8088540 <_ZN5Print7printlnEfi>
 8081544:	e7b1      	b.n	80814aa <_Z10readAlpha2v+0x42>
    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
 8081546:	2100      	movs	r1, #0
 8081548:	485c      	ldr	r0, [pc, #368]	; (80816bc <_Z10readAlpha2v+0x254>)
 808154a:	f003 fb94 	bl	8084c76 <_ZN8LMP910004readEh>
 808154e:	2800      	cmp	r0, #0
 8081550:	d0bf      	beq.n	80814d2 <_Z10readAlpha2v+0x6a>
 8081552:	4620      	mov	r0, r4
 8081554:	495e      	ldr	r1, [pc, #376]	; (80816d0 <_Z10readAlpha2v+0x268>)
 8081556:	f009 f9b7 	bl	808a8c8 <__aeabi_fdiv>
 808155a:	f008 fc53 	bl	8089e04 <__aeabi_f2d>
 808155e:	2200      	movs	r2, #0
 8081560:	4b5c      	ldr	r3, [pc, #368]	; (80816d4 <_Z10readAlpha2v+0x26c>)
 8081562:	f008 faef 	bl	8089b44 <__aeabi_dsub>
 8081566:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 808156a:	2200      	movs	r2, #0
 808156c:	4639      	mov	r1, r7
 808156e:	4b5a      	ldr	r3, [pc, #360]	; (80816d8 <_Z10readAlpha2v+0x270>)
 8081570:	f008 ff30 	bl	808a3d4 <__aeabi_dcmpgt>
 8081574:	4604      	mov	r4, r0
 8081576:	2800      	cmp	r0, #0
 8081578:	d1ab      	bne.n	80814d2 <_Z10readAlpha2v+0x6a>
 808157a:	270a      	movs	r7, #10
 808157c:	4680      	mov	r8, r0
 808157e:	4681      	mov	r9, r0
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081580:	4e51      	ldr	r6, [pc, #324]	; (80816c8 <_Z10readAlpha2v+0x260>)
 8081582:	2100      	movs	r1, #0
 8081584:	4630      	mov	r0, r6
 8081586:	f003 fcbd 	bl	8084f04 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 808158a:	2101      	movs	r1, #1
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 808158c:	4481      	add	r9, r0
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 808158e:	4630      	mov	r0, r6
 8081590:	f003 fcb8 	bl	8084f04 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081594:	2102      	movs	r1, #2
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081596:	4480      	add	r8, r0
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081598:	4630      	mov	r0, r6
 808159a:	f003 fcb3 	bl	8084f04 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 808159e:	2103      	movs	r1, #3
 80815a0:	4630      	mov	r0, r6
 80815a2:	f003 fcaf 	bl	8084f04 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 80815a6:	3f01      	subs	r7, #1
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 80815a8:	4404      	add	r4, r0
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 80815aa:	d1ea      	bne.n	8081582 <_Z10readAlpha2v+0x11a>
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 80815ac:	f04f 0a0a 	mov.w	sl, #10
        volt0_gas = A0_gas * ads_bitmv;
 80815b0:	4b46      	ldr	r3, [pc, #280]	; (80816cc <_Z10readAlpha2v+0x264>)
        volt_half_Vref = half_Vref * ads_bitmv;
 80815b2:	fbb4 f0fa 	udiv	r0, r4, sl
        volt0_gas = A0_gas * ads_bitmv;
 80815b6:	681f      	ldr	r7, [r3, #0]
        volt_half_Vref = half_Vref * ads_bitmv;
 80815b8:	f009 f87e 	bl	808a6b8 <__aeabi_i2f>
 80815bc:	4639      	mov	r1, r7
 80815be:	f009 f8cf 	bl	808a760 <__aeabi_fmul>
 80815c2:	4604      	mov	r4, r0
        volt0_gas = A0_gas * ads_bitmv;
 80815c4:	fbb9 f0fa 	udiv	r0, r9, sl
 80815c8:	f009 f876 	bl	808a6b8 <__aeabi_i2f>
 80815cc:	4639      	mov	r1, r7
 80815ce:	f009 f8c7 	bl	808a760 <__aeabi_fmul>
 80815d2:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 80815d4:	4620      	mov	r0, r4
 80815d6:	f008 ffb9 	bl	808a54c <__aeabi_fsub>
 80815da:	4941      	ldr	r1, [pc, #260]	; (80816e0 <_Z10readAlpha2v+0x278>)
 80815dc:	f009 f974 	bl	808a8c8 <__aeabi_fdiv>
 80815e0:	4606      	mov	r6, r0
        volt1_aux = A1_aux * ads_bitmv;
 80815e2:	fbb8 f0fa 	udiv	r0, r8, sl
 80815e6:	f009 f867 	bl	808a6b8 <__aeabi_i2f>
 80815ea:	4639      	mov	r1, r7
 80815ec:	f009 f8b8 	bl	808a760 <__aeabi_fmul>
 80815f0:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 80815f2:	4620      	mov	r0, r4
 80815f4:	f008 ffaa 	bl	808a54c <__aeabi_fsub>
 80815f8:	493a      	ldr	r1, [pc, #232]	; (80816e4 <_Z10readAlpha2v+0x27c>)
 80815fa:	f009 f965 	bl	808a8c8 <__aeabi_fdiv>
 80815fe:	4604      	mov	r4, r0
        if (readTemperature() <= 15)
 8081600:	f7ff feb6 	bl	8081370 <_Z15readTemperaturev>
 8081604:	4938      	ldr	r1, [pc, #224]	; (80816e8 <_Z10readAlpha2v+0x280>)
 8081606:	f009 fa53 	bl	808aab0 <__aeabi_fcmple>
 808160a:	b1d0      	cbz	r0, 8081642 <_Z10readAlpha2v+0x1da>
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 808160c:	4621      	mov	r1, r4
 808160e:	4630      	mov	r0, r6
 8081610:	f008 ff9c 	bl	808a54c <__aeabi_fsub>
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081614:	f008 fbf6 	bl	8089e04 <__aeabi_f2d>
 8081618:	a31f      	add	r3, pc, #124	; (adr r3, 8081698 <_Z10readAlpha2v+0x230>)
 808161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808161e:	f008 fd73 	bl	808a108 <__aeabi_ddiv>
 8081622:	f008 ff3f 	bl	808a4a4 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081626:	2202      	movs	r2, #2
 8081628:	4601      	mov	r1, r0
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 808162a:	4604      	mov	r4, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 808162c:	a804      	add	r0, sp, #16
 808162e:	f006 fc89 	bl	8087f44 <_ZN6StringC1Efi>
 8081632:	4668      	mov	r0, sp
 8081634:	a904      	add	r1, sp, #16
 8081636:	f006 fc59 	bl	8087eec <_ZN6StringaSEOS_>
 808163a:	a804      	add	r0, sp, #16
 808163c:	f006 fbc2 	bl	8087dc4 <_ZN6StringD1Ev>
 8081640:	e74c      	b.n	80814dc <_Z10readAlpha2v+0x74>
        else if (readTemperature() <= 25)
 8081642:	f7ff fe95 	bl	8081370 <_Z15readTemperaturev>
 8081646:	4929      	ldr	r1, [pc, #164]	; (80816ec <_Z10readAlpha2v+0x284>)
 8081648:	f009 fa32 	bl	808aab0 <__aeabi_fcmple>
 808164c:	b120      	cbz	r0, 8081658 <_Z10readAlpha2v+0x1f0>
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 808164e:	4621      	mov	r1, r4
 8081650:	4630      	mov	r0, r6
 8081652:	f008 ff7d 	bl	808a550 <__addsf3>
 8081656:	e7dd      	b.n	8081614 <_Z10readAlpha2v+0x1ac>
        else if (readTemperature() > 25)
 8081658:	f7ff fe8a 	bl	8081370 <_Z15readTemperaturev>
 808165c:	4923      	ldr	r1, [pc, #140]	; (80816ec <_Z10readAlpha2v+0x284>)
 808165e:	f009 fa3b 	bl	808aad8 <__aeabi_fcmpgt>
 8081662:	b1a8      	cbz	r0, 8081690 <_Z10readAlpha2v+0x228>
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 8081664:	4620      	mov	r0, r4
 8081666:	f008 fbcd 	bl	8089e04 <__aeabi_f2d>
 808166a:	a30d      	add	r3, pc, #52	; (adr r3, 80816a0 <_Z10readAlpha2v+0x238>)
 808166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081670:	f008 fc20 	bl	8089eb4 <__aeabi_dmul>
 8081674:	4680      	mov	r8, r0
 8081676:	4630      	mov	r0, r6
 8081678:	4689      	mov	r9, r1
 808167a:	f008 fbc3 	bl	8089e04 <__aeabi_f2d>
 808167e:	4602      	mov	r2, r0
 8081680:	460b      	mov	r3, r1
 8081682:	4640      	mov	r0, r8
 8081684:	4649      	mov	r1, r9
 8081686:	f008 fa5f 	bl	8089b48 <__adddf3>
 808168a:	f008 ff0b 	bl	808a4a4 <__aeabi_d2f>
 808168e:	e7c1      	b.n	8081614 <_Z10readAlpha2v+0x1ac>
    float correctedCurrent = 0;
 8081690:	2000      	movs	r0, #0
 8081692:	e7bf      	b.n	8081614 <_Z10readAlpha2v+0x1ac>
 8081694:	f3af 8000 	nop.w
 8081698:	d4fdf3b6 	.word	0xd4fdf3b6
 808169c:	3fd6e978 	.word	0x3fd6e978
 80816a0:	851eb852 	.word	0x851eb852
 80816a4:	3fe851eb 	.word	0x3fe851eb
 80816a8:	200005d4 	.word	0x200005d4
 80816ac:	0808eb69 	.word	0x0808eb69
 80816b0:	0808cc6b 	.word	0x0808cc6b
 80816b4:	200000c4 	.word	0x200000c4
 80816b8:	0808cc81 	.word	0x0808cc81
 80816bc:	200006b2 	.word	0x200006b2
 80816c0:	0808ccb6 	.word	0x0808ccb6
 80816c4:	0808ccdd 	.word	0x0808ccdd
 80816c8:	2000054a 	.word	0x2000054a
 80816cc:	20000084 	.word	0x20000084
 80816d0:	447a0000 	.word	0x447a0000
 80816d4:	3ff40000 	.word	0x3ff40000
 80816d8:	3fe00000 	.word	0x3fe00000
 80816dc:	0808cca6 	.word	0x0808cca6
 80816e0:	c2f00000 	.word	0xc2f00000
 80816e4:	c3160000 	.word	0xc3160000
 80816e8:	41700000 	.word	0x41700000
 80816ec:	41c80000 	.word	0x41c80000

080816f0 <_Z12writeLogFile6String>:
{
 80816f0:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 80816f2:	491e      	ldr	r1, [pc, #120]	; (808176c <_Z12writeLogFile6String+0x7c>)
 80816f4:	4604      	mov	r4, r0
 80816f6:	b085      	sub	sp, #20
 80816f8:	2302      	movs	r3, #2
 80816fa:	220c      	movs	r2, #12
 80816fc:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8081700:	f7ff fa6e 	bl	8080be0 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS))
 8081704:	b360      	cbz	r0, 8081760 <_Z12writeLogFile6String+0x70>
        Serial.println("Writing data to log file.");
 8081706:	f007 fe75 	bl	80893f4 <_Z16_fetch_usbserialv>
 808170a:	4919      	ldr	r1, [pc, #100]	; (8081770 <_Z12writeLogFile6String+0x80>)
 808170c:	f006 fe19 	bl	8088342 <_ZN5Print7printlnEPKc>
    return open(m_cwd, path, oflag);
 8081710:	4a18      	ldr	r2, [pc, #96]	; (8081774 <_Z12writeLogFile6String+0x84>)
 8081712:	4919      	ldr	r1, [pc, #100]	; (8081778 <_Z12writeLogFile6String+0x88>)
        if (log_file_started == 0)
 8081714:	4d19      	ldr	r5, [pc, #100]	; (808177c <_Z12writeLogFile6String+0x8c>)
 8081716:	2346      	movs	r3, #70	; 0x46
 8081718:	6812      	ldr	r2, [r2, #0]
 808171a:	6809      	ldr	r1, [r1, #0]
 808171c:	4818      	ldr	r0, [pc, #96]	; (8081780 <_Z12writeLogFile6String+0x90>)
 808171e:	f004 fe28 	bl	8086372 <_ZN7FatFile4openEPS_PKch>
 8081722:	682b      	ldr	r3, [r5, #0]
 8081724:	b99b      	cbnz	r3, 808174e <_Z12writeLogFile6String+0x5e>
            log_file.println("File Start timestamp: ");
 8081726:	4917      	ldr	r1, [pc, #92]	; (8081784 <_Z12writeLogFile6String+0x94>)
 8081728:	4817      	ldr	r0, [pc, #92]	; (8081788 <_Z12writeLogFile6String+0x98>)
 808172a:	f006 fe0a 	bl	8088342 <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 808172e:	f007 f91c 	bl	808896a <_ZN9TimeClass3nowEv>
 8081732:	17c3      	asrs	r3, r0, #31
 8081734:	4602      	mov	r2, r0
 8081736:	4668      	mov	r0, sp
 8081738:	f007 f814 	bl	8088764 <_ZN9TimeClass7timeStrEx>
            log_file.println(Time.timeStr());
 808173c:	9900      	ldr	r1, [sp, #0]
 808173e:	4812      	ldr	r0, [pc, #72]	; (8081788 <_Z12writeLogFile6String+0x98>)
 8081740:	f006 fdff 	bl	8088342 <_ZN5Print7printlnEPKc>
 8081744:	4668      	mov	r0, sp
 8081746:	f006 fb3d 	bl	8087dc4 <_ZN6StringD1Ev>
            log_file_started = 1;
 808174a:	2301      	movs	r3, #1
 808174c:	602b      	str	r3, [r5, #0]
        log_file.println(data);
 808174e:	6821      	ldr	r1, [r4, #0]
 8081750:	480d      	ldr	r0, [pc, #52]	; (8081788 <_Z12writeLogFile6String+0x98>)
 8081752:	f006 fdf6 	bl	8088342 <_ZN5Print7printlnEPKc>
        log_file.close();
 8081756:	480a      	ldr	r0, [pc, #40]	; (8081780 <_Z12writeLogFile6String+0x90>)
 8081758:	f004 fe04 	bl	8086364 <_ZN7FatFile5closeEv>
}
 808175c:	b005      	add	sp, #20
 808175e:	bd30      	pop	{r4, r5, pc}
        Serial.println("Unable to write to log file");
 8081760:	f007 fe48 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081764:	4909      	ldr	r1, [pc, #36]	; (808178c <_Z12writeLogFile6String+0x9c>)
 8081766:	f006 fdec 	bl	8088342 <_ZN5Print7printlnEPKc>
}
 808176a:	e7f7      	b.n	808175c <_Z12writeLogFile6String+0x6c>
 808176c:	20000c10 	.word	0x20000c10
 8081770:	0808cce1 	.word	0x0808cce1
 8081774:	200006f8 	.word	0x200006f8
 8081778:	20001cd4 	.word	0x20001cd4
 808177c:	20000734 	.word	0x20000734
 8081780:	20000710 	.word	0x20000710
 8081784:	0808ccfb 	.word	0x0808ccfb
 8081788:	20000708 	.word	0x20000708
 808178c:	0808cd12 	.word	0x0808cd12

08081790 <_Z13readGpsStreamv>:
{
 8081790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081794:	b08c      	sub	sp, #48	; 0x30
    String gps_sentence = "init";
 8081796:	4668      	mov	r0, sp
 8081798:	49b9      	ldr	r1, [pc, #740]	; (8081a80 <_Z13readGpsStreamv+0x2f0>)
 808179a:	f006 fb5d 	bl	8087e58 <_ZN6StringC1EPKc>
        if (prefix_string.equals("GGA")) 
 808179e:	4fb9      	ldr	r7, [pc, #740]	; (8081a84 <_Z13readGpsStreamv+0x2f4>)
        else if (gps_sentence.equals("init")) 
 80817a0:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8081a80 <_Z13readGpsStreamv+0x2f0>
            Serial.println("Error reading GPS");
 80817a4:	4eb8      	ldr	r6, [pc, #736]	; (8081a88 <_Z13readGpsStreamv+0x2f8>)
        gps_sentence = Serial5.readStringUntil('\r');
 80817a6:	f7ff f9df 	bl	8080b68 <_Z22__fetch_global_Serial5v>
 80817aa:	220d      	movs	r2, #13
 80817ac:	4601      	mov	r1, r0
 80817ae:	a808      	add	r0, sp, #32
 80817b0:	f006 ff30 	bl	8088614 <_ZN6Stream15readStringUntilEc>
 80817b4:	a908      	add	r1, sp, #32
 80817b6:	4668      	mov	r0, sp
 80817b8:	f006 fb98 	bl	8087eec <_ZN6StringaSEOS_>
 80817bc:	a808      	add	r0, sp, #32
 80817be:	f006 fb01 	bl	8087dc4 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4, 7);
 80817c2:	2307      	movs	r3, #7
 80817c4:	2204      	movs	r2, #4
 80817c6:	4669      	mov	r1, sp
 80817c8:	a804      	add	r0, sp, #16
 80817ca:	f006 fc99 	bl	8088100 <_ZNK6String9substringEjj>
        if (prefix_string.equals("GGA")) 
 80817ce:	4639      	mov	r1, r7
 80817d0:	a804      	add	r0, sp, #16
 80817d2:	f006 fc3b 	bl	808804c <_ZNK6String6equalsEPKc>
 80817d6:	4605      	mov	r5, r0
 80817d8:	bb68      	cbnz	r0, 8081836 <_Z13readGpsStreamv+0xa6>
        else if (gps_sentence.equals("init")) 
 80817da:	4641      	mov	r1, r8
 80817dc:	4668      	mov	r0, sp
 80817de:	f006 fc35 	bl	808804c <_ZNK6String6equalsEPKc>
 80817e2:	4604      	mov	r4, r0
 80817e4:	b350      	cbz	r0, 808183c <_Z13readGpsStreamv+0xac>
            Serial.println("Error reading GPS");
 80817e6:	f007 fe05 	bl	80893f4 <_Z16_fetch_usbserialv>
 80817ea:	4631      	mov	r1, r6
 80817ec:	f006 fda9 	bl	8088342 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 80817f0:	4631      	mov	r1, r6
 80817f2:	a808      	add	r0, sp, #32
 80817f4:	f006 fb30 	bl	8087e58 <_ZN6StringC1EPKc>
 80817f8:	a808      	add	r0, sp, #32
 80817fa:	f7ff ff79 	bl	80816f0 <_Z12writeLogFile6String>
 80817fe:	a808      	add	r0, sp, #32
 8081800:	f006 fae0 	bl	8087dc4 <_ZN6StringD1Ev>
            error = 1;
 8081804:	2401      	movs	r4, #1
        String prefix_string = gps_sentence.substring(4, 7);
 8081806:	a804      	add	r0, sp, #16
 8081808:	f006 fadc 	bl	8087dc4 <_ZN6StringD1Ev>
    while (!stringFound && !error) 
 808180c:	b15d      	cbz	r5, 8081826 <_Z13readGpsStreamv+0x96>
        String tempStr;
 808180e:	f04f 0800 	mov.w	r8, #0
 8081812:	499e      	ldr	r1, [pc, #632]	; (8081a8c <_Z13readGpsStreamv+0x2fc>)
 8081814:	a804      	add	r0, sp, #16
 8081816:	f006 fb1f 	bl	8087e58 <_ZN6StringC1EPKc>
        comma_counter = 0;
 808181a:	4647      	mov	r7, r8
                    Serial.printf("BAD index in readGpsStream\n");
 808181c:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8081aa8 <_Z13readGpsStreamv+0x318>
                        gps.set_horizontalDilution(tempStr);
 8081820:	4e9b      	ldr	r6, [pc, #620]	; (8081a90 <_Z13readGpsStreamv+0x300>)
                        status_word.status_int &= 0xFFF3;
 8081822:	4d9c      	ldr	r5, [pc, #624]	; (8081a94 <_Z13readGpsStreamv+0x304>)
 8081824:	e032      	b.n	808188c <_Z13readGpsStreamv+0xfc>
    while (!stringFound && !error) 
 8081826:	2c00      	cmp	r4, #0
 8081828:	d0bd      	beq.n	80817a6 <_Z13readGpsStreamv+0x16>
    String gps_sentence = "init";
 808182a:	4668      	mov	r0, sp
 808182c:	f006 faca 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8081830:	b00c      	add	sp, #48	; 0x30
 8081832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8081836:	2400      	movs	r4, #0
            stringFound = 1;
 8081838:	2501      	movs	r5, #1
 808183a:	e7e4      	b.n	8081806 <_Z13readGpsStreamv+0x76>
 808183c:	4605      	mov	r5, r0
 808183e:	e7e2      	b.n	8081806 <_Z13readGpsStreamv+0x76>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081840:	f104 0a01 	add.w	sl, r4, #1
 8081844:	4651      	mov	r1, sl
 8081846:	4668      	mov	r0, sp
 8081848:	f006 fc1b 	bl	8088082 <_ZNK6String6charAtEj>
 808184c:	282c      	cmp	r0, #44	; 0x2c
 808184e:	d01a      	beq.n	8081886 <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081850:	f104 030b 	add.w	r3, r4, #11
 8081854:	4652      	mov	r2, sl
 8081856:	4669      	mov	r1, sp
 8081858:	a808      	add	r0, sp, #32
 808185a:	f006 fc51 	bl	8088100 <_ZNK6String9substringEjj>
 808185e:	a908      	add	r1, sp, #32
 8081860:	a804      	add	r0, sp, #16
 8081862:	f006 fb43 	bl	8087eec <_ZN6StringaSEOS_>
 8081866:	a808      	add	r0, sp, #32
 8081868:	f006 faac 	bl	8087dc4 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 808186c:	4b8a      	ldr	r3, [pc, #552]	; (8081a98 <_Z13readGpsStreamv+0x308>)
 808186e:	681b      	ldr	r3, [r3, #0]
 8081870:	b14b      	cbz	r3, 8081886 <_Z13readGpsStreamv+0xf6>
                            Serial.print("GPS utc string: ");
 8081872:	f007 fdbf 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081876:	4989      	ldr	r1, [pc, #548]	; (8081a9c <_Z13readGpsStreamv+0x30c>)
 8081878:	f006 fd50 	bl	808831c <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 808187c:	f007 fdba 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081880:	9904      	ldr	r1, [sp, #16]
 8081882:	f006 fd5e 	bl	8088342 <_ZN5Print7printlnEPKc>
                comma_counter++;
 8081886:	3701      	adds	r7, #1
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 8081888:	f108 0801 	add.w	r8, r8, #1
 808188c:	9b02      	ldr	r3, [sp, #8]
 808188e:	fa1f f488 	uxth.w	r4, r8
 8081892:	42a3      	cmp	r3, r4
 8081894:	f240 80f0 	bls.w	8081a78 <_Z13readGpsStreamv+0x2e8>
            if (gps_sentence.charAt(a) == ',')
 8081898:	4621      	mov	r1, r4
 808189a:	4668      	mov	r0, sp
 808189c:	f006 fbf1 	bl	8088082 <_ZNK6String6charAtEj>
 80818a0:	282c      	cmp	r0, #44	; 0x2c
 80818a2:	d1f1      	bne.n	8081888 <_Z13readGpsStreamv+0xf8>
                switch (comma_counter)
 80818a4:	2f07      	cmp	r7, #7
 80818a6:	f200 80e1 	bhi.w	8081a6c <_Z13readGpsStreamv+0x2dc>
 80818aa:	a301      	add	r3, pc, #4	; (adr r3, 80818b0 <_Z13readGpsStreamv+0x120>)
 80818ac:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80818b0:	08081841 	.word	0x08081841
 80818b4:	080818d1 	.word	0x080818d1
 80818b8:	08081a6d 	.word	0x08081a6d
 80818bc:	08081943 	.word	0x08081943
 80818c0:	08081a6d 	.word	0x08081a6d
 80818c4:	08081a6d 	.word	0x08081a6d
 80818c8:	080819ad 	.word	0x080819ad
 80818cc:	080819eb 	.word	0x080819eb
                    if (gps_sentence.charAt(a + 1) != ',')
 80818d0:	f104 0a01 	add.w	sl, r4, #1
 80818d4:	4651      	mov	r1, sl
 80818d6:	4668      	mov	r0, sp
 80818d8:	f006 fbd3 	bl	8088082 <_ZNK6String6charAtEj>
 80818dc:	282c      	cmp	r0, #44	; 0x2c
 80818de:	d0d2      	beq.n	8081886 <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 80818e0:	f104 030a 	add.w	r3, r4, #10
 80818e4:	4652      	mov	r2, sl
 80818e6:	4669      	mov	r1, sp
 80818e8:	a808      	add	r0, sp, #32
 80818ea:	f006 fc09 	bl	8088100 <_ZNK6String9substringEjj>
 80818ee:	a908      	add	r1, sp, #32
 80818f0:	a804      	add	r0, sp, #16
 80818f2:	f006 fafb 	bl	8087eec <_ZN6StringaSEOS_>
 80818f6:	a808      	add	r0, sp, #32
 80818f8:	f006 fa64 	bl	8087dc4 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 80818fc:	4b66      	ldr	r3, [pc, #408]	; (8081a98 <_Z13readGpsStreamv+0x308>)
 80818fe:	681b      	ldr	r3, [r3, #0]
 8081900:	b14b      	cbz	r3, 8081916 <_Z13readGpsStreamv+0x186>
                            Serial.print("Latitude string: ");
 8081902:	f007 fd77 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081906:	4966      	ldr	r1, [pc, #408]	; (8081aa0 <_Z13readGpsStreamv+0x310>)
 8081908:	f006 fd08 	bl	808831c <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 808190c:	f007 fd72 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081910:	9904      	ldr	r1, [sp, #16]
 8081912:	f006 fd03 	bl	808831c <_ZN5Print5printEPKc>
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 8081916:	a904      	add	r1, sp, #16
 8081918:	a808      	add	r0, sp, #32
 808191a:	f006 fadc 	bl	8087ed6 <_ZN6StringC1ERKS_>
 808191e:	f104 010c 	add.w	r1, r4, #12
 8081922:	4668      	mov	r0, sp
 8081924:	f006 fbad 	bl	8088082 <_ZNK6String6charAtEj>
 8081928:	a908      	add	r1, sp, #32
 808192a:	4602      	mov	r2, r0
 808192c:	4630      	mov	r0, r6
 808192e:	f003 fb13 	bl	8084f58 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081932:	a808      	add	r0, sp, #32
 8081934:	f006 fa46 	bl	8087dc4 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081938:	882b      	ldrh	r3, [r5, #0]
 808193a:	f023 0308 	bic.w	r3, r3, #8
                            status_word.status_int |= 0x000C;
 808193e:	802b      	strh	r3, [r5, #0]
 8081940:	e7a1      	b.n	8081886 <_Z13readGpsStreamv+0xf6>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081942:	f104 0a01 	add.w	sl, r4, #1
 8081946:	4651      	mov	r1, sl
 8081948:	4668      	mov	r0, sp
 808194a:	f006 fb9a 	bl	8088082 <_ZNK6String6charAtEj>
 808194e:	282c      	cmp	r0, #44	; 0x2c
 8081950:	d099      	beq.n	8081886 <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081952:	f104 030b 	add.w	r3, r4, #11
 8081956:	4652      	mov	r2, sl
 8081958:	4669      	mov	r1, sp
 808195a:	a808      	add	r0, sp, #32
 808195c:	f006 fbd0 	bl	8088100 <_ZNK6String9substringEjj>
 8081960:	a908      	add	r1, sp, #32
 8081962:	a804      	add	r0, sp, #16
 8081964:	f006 fac2 	bl	8087eec <_ZN6StringaSEOS_>
 8081968:	a808      	add	r0, sp, #32
 808196a:	f006 fa2b 	bl	8087dc4 <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 808196e:	4b4a      	ldr	r3, [pc, #296]	; (8081a98 <_Z13readGpsStreamv+0x308>)
 8081970:	681b      	ldr	r3, [r3, #0]
 8081972:	b14b      	cbz	r3, 8081988 <_Z13readGpsStreamv+0x1f8>
                            Serial.print("longitude string: ");
 8081974:	f007 fd3e 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081978:	494a      	ldr	r1, [pc, #296]	; (8081aa4 <_Z13readGpsStreamv+0x314>)
 808197a:	f006 fccf 	bl	808831c <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 808197e:	f007 fd39 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081982:	9904      	ldr	r1, [sp, #16]
 8081984:	f006 fcca 	bl	808831c <_ZN5Print5printEPKc>
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 8081988:	a904      	add	r1, sp, #16
 808198a:	a808      	add	r0, sp, #32
 808198c:	f006 faa3 	bl	8087ed6 <_ZN6StringC1ERKS_>
 8081990:	f104 010d 	add.w	r1, r4, #13
 8081994:	4668      	mov	r0, sp
 8081996:	f006 fb74 	bl	8088082 <_ZNK6String6charAtEj>
 808199a:	a908      	add	r1, sp, #32
 808199c:	4602      	mov	r2, r0
 808199e:	4630      	mov	r0, r6
 80819a0:	f003 fb22 	bl	8084fe8 <_ZN3GPS16set_long_decimalE6Stringc>
                        gps.set_satellites(tempStr);
 80819a4:	a808      	add	r0, sp, #32
 80819a6:	f006 fa0d 	bl	8087dc4 <_ZN6StringD1Ev>
 80819aa:	e76c      	b.n	8081886 <_Z13readGpsStreamv+0xf6>
                    if (gps_sentence.charAt(a + 1) != ',')
 80819ac:	f104 0a01 	add.w	sl, r4, #1
 80819b0:	4651      	mov	r1, sl
 80819b2:	4668      	mov	r0, sp
 80819b4:	f006 fb65 	bl	8088082 <_ZNK6String6charAtEj>
 80819b8:	282c      	cmp	r0, #44	; 0x2c
 80819ba:	f43f af64 	beq.w	8081886 <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 80819be:	4652      	mov	r2, sl
 80819c0:	1ce3      	adds	r3, r4, #3
 80819c2:	4669      	mov	r1, sp
 80819c4:	a808      	add	r0, sp, #32
 80819c6:	f006 fb9b 	bl	8088100 <_ZNK6String9substringEjj>
 80819ca:	a908      	add	r1, sp, #32
 80819cc:	a804      	add	r0, sp, #16
 80819ce:	f006 fa8d 	bl	8087eec <_ZN6StringaSEOS_>
 80819d2:	a808      	add	r0, sp, #32
 80819d4:	f006 f9f6 	bl	8087dc4 <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 80819d8:	a904      	add	r1, sp, #16
 80819da:	a808      	add	r0, sp, #32
 80819dc:	f006 fa7b 	bl	8087ed6 <_ZN6StringC1ERKS_>
 80819e0:	4630      	mov	r0, r6
 80819e2:	a908      	add	r1, sp, #32
 80819e4:	f003 fb46 	bl	8085074 <_ZN3GPS14set_satellitesE6String>
 80819e8:	e7dc      	b.n	80819a4 <_Z13readGpsStreamv+0x214>
                    if (gps_sentence.charAt(a + 1) != ',')
 80819ea:	f104 0a01 	add.w	sl, r4, #1
 80819ee:	4651      	mov	r1, sl
 80819f0:	4668      	mov	r0, sp
 80819f2:	f006 fb46 	bl	8088082 <_ZNK6String6charAtEj>
 80819f6:	282c      	cmp	r0, #44	; 0x2c
 80819f8:	f43f af45 	beq.w	8081886 <_Z13readGpsStreamv+0xf6>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 80819fc:	4652      	mov	r2, sl
 80819fe:	1ce3      	adds	r3, r4, #3
 8081a00:	4669      	mov	r1, sp
 8081a02:	a808      	add	r0, sp, #32
 8081a04:	f006 fb7c 	bl	8088100 <_ZNK6String9substringEjj>
 8081a08:	a908      	add	r1, sp, #32
 8081a0a:	a804      	add	r0, sp, #16
 8081a0c:	f006 fa6e 	bl	8087eec <_ZN6StringaSEOS_>
 8081a10:	a808      	add	r0, sp, #32
 8081a12:	f006 f9d7 	bl	8087dc4 <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 8081a16:	a904      	add	r1, sp, #16
 8081a18:	a808      	add	r0, sp, #32
 8081a1a:	f006 fa5c 	bl	8087ed6 <_ZN6StringC1ERKS_>
 8081a1e:	a908      	add	r1, sp, #32
 8081a20:	4630      	mov	r0, r6
 8081a22:	f003 fb2f 	bl	8085084 <_ZN3GPS22set_horizontalDilutionE6String>
 8081a26:	a808      	add	r0, sp, #32
 8081a28:	f006 f9cc 	bl	8087dc4 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081a2c:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081a2e:	4630      	mov	r0, r6
                        status_word.status_int &= 0xFFF3;
 8081a30:	f023 030c 	bic.w	r3, r3, #12
 8081a34:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081a36:	f003 fb3b 	bl	80850b0 <_ZN3GPS22get_horizontalDilutionEv>
 8081a3a:	2801      	cmp	r0, #1
 8081a3c:	dc03      	bgt.n	8081a46 <_Z13readGpsStreamv+0x2b6>
                            status_word.status_int |= 0x000C;
 8081a3e:	882b      	ldrh	r3, [r5, #0]
 8081a40:	f043 030c 	orr.w	r3, r3, #12
 8081a44:	e77b      	b.n	808193e <_Z13readGpsStreamv+0x1ae>
                        else if (gps.get_horizontalDilution() < 5)
 8081a46:	4630      	mov	r0, r6
 8081a48:	f003 fb32 	bl	80850b0 <_ZN3GPS22get_horizontalDilutionEv>
 8081a4c:	2804      	cmp	r0, #4
 8081a4e:	dc03      	bgt.n	8081a58 <_Z13readGpsStreamv+0x2c8>
                            status_word.status_int |= 0x0008;
 8081a50:	882b      	ldrh	r3, [r5, #0]
 8081a52:	f043 0308 	orr.w	r3, r3, #8
 8081a56:	e772      	b.n	808193e <_Z13readGpsStreamv+0x1ae>
                        else if (gps.get_horizontalDilution() < 20)
 8081a58:	4630      	mov	r0, r6
 8081a5a:	f003 fb29 	bl	80850b0 <_ZN3GPS22get_horizontalDilutionEv>
 8081a5e:	2813      	cmp	r0, #19
 8081a60:	f73f af11 	bgt.w	8081886 <_Z13readGpsStreamv+0xf6>
                            status_word.status_int |= 0x0004;
 8081a64:	882b      	ldrh	r3, [r5, #0]
 8081a66:	f043 0304 	orr.w	r3, r3, #4
 8081a6a:	e768      	b.n	808193e <_Z13readGpsStreamv+0x1ae>
                    Serial.printf("BAD index in readGpsStream\n");
 8081a6c:	f007 fcc2 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081a70:	4649      	mov	r1, r9
 8081a72:	f7ff f80b 	bl	8080a8c <_ZN5Print6printfEPKcz>
                    break;
 8081a76:	e706      	b.n	8081886 <_Z13readGpsStreamv+0xf6>
        String tempStr;
 8081a78:	a804      	add	r0, sp, #16
 8081a7a:	f006 f9a3 	bl	8087dc4 <_ZN6StringD1Ev>
 8081a7e:	e6d4      	b.n	808182a <_Z13readGpsStreamv+0x9a>
 8081a80:	0808cd2e 	.word	0x0808cd2e
 8081a84:	0808cd33 	.word	0x0808cd33
 8081a88:	0808cd37 	.word	0x0808cd37
 8081a8c:	0808eb69 	.word	0x0808eb69
 8081a90:	20000668 	.word	0x20000668
 8081a94:	20001c60 	.word	0x20001c60
 8081a98:	200005d4 	.word	0x200005d4
 8081a9c:	0808cd49 	.word	0x0808cd49
 8081aa0:	0808cd5a 	.word	0x0808cd5a
 8081aa4:	0808cd6c 	.word	0x0808cd6c
 8081aa8:	0808cd7f 	.word	0x0808cd7f

08081aac <_Z17readGpsStreamDatev>:
{
 8081aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081ab0:	b090      	sub	sp, #64	; 0x40
    String gps_sentence = "init";
 8081ab2:	49b6      	ldr	r1, [pc, #728]	; (8081d8c <_Z17readGpsStreamDatev+0x2e0>)
 8081ab4:	4668      	mov	r0, sp
 8081ab6:	f006 f9cf 	bl	8087e58 <_ZN6StringC1EPKc>
    String prefix_string;
 8081aba:	49b5      	ldr	r1, [pc, #724]	; (8081d90 <_Z17readGpsStreamDatev+0x2e4>)
 8081abc:	a804      	add	r0, sp, #16
 8081abe:	f006 f9cb 	bl	8087e58 <_ZN6StringC1EPKc>
        if (prefix_string.equals("RMC"))
 8081ac2:	4db4      	ldr	r5, [pc, #720]	; (8081d94 <_Z17readGpsStreamDatev+0x2e8>)
        else if (gps_sentence.equals("init"))
 8081ac4:	4cb1      	ldr	r4, [pc, #708]	; (8081d8c <_Z17readGpsStreamDatev+0x2e0>)
        gps_sentence = Serial5.readStringUntil('\r');
 8081ac6:	f7ff f84f 	bl	8080b68 <_Z22__fetch_global_Serial5v>
 8081aca:	220d      	movs	r2, #13
 8081acc:	4601      	mov	r1, r0
 8081ace:	a80c      	add	r0, sp, #48	; 0x30
 8081ad0:	f006 fda0 	bl	8088614 <_ZN6Stream15readStringUntilEc>
 8081ad4:	a90c      	add	r1, sp, #48	; 0x30
 8081ad6:	4668      	mov	r0, sp
 8081ad8:	f006 fa08 	bl	8087eec <_ZN6StringaSEOS_>
 8081adc:	a80c      	add	r0, sp, #48	; 0x30
 8081ade:	f006 f971 	bl	8087dc4 <_ZN6StringD1Ev>
        prefix_string = gps_sentence.substring(4, 7);
 8081ae2:	2307      	movs	r3, #7
 8081ae4:	2204      	movs	r2, #4
 8081ae6:	4669      	mov	r1, sp
 8081ae8:	a80c      	add	r0, sp, #48	; 0x30
 8081aea:	f006 fb09 	bl	8088100 <_ZNK6String9substringEjj>
 8081aee:	a90c      	add	r1, sp, #48	; 0x30
 8081af0:	a804      	add	r0, sp, #16
 8081af2:	f006 f9fb 	bl	8087eec <_ZN6StringaSEOS_>
 8081af6:	a80c      	add	r0, sp, #48	; 0x30
 8081af8:	f006 f964 	bl	8087dc4 <_ZN6StringD1Ev>
        if (prefix_string.equals("RMC"))
 8081afc:	4629      	mov	r1, r5
 8081afe:	a804      	add	r0, sp, #16
 8081b00:	f006 faa4 	bl	808804c <_ZNK6String6equalsEPKc>
 8081b04:	2800      	cmp	r0, #0
 8081b06:	f040 8136 	bne.w	8081d76 <_Z17readGpsStreamDatev+0x2ca>
        else if (gps_sentence.equals("init"))
 8081b0a:	4621      	mov	r1, r4
 8081b0c:	4668      	mov	r0, sp
 8081b0e:	f006 fa9d 	bl	808804c <_ZNK6String6equalsEPKc>
 8081b12:	2800      	cmp	r0, #0
 8081b14:	d0d7      	beq.n	8081ac6 <_Z17readGpsStreamDatev+0x1a>
            Serial.println("Error reading GPS RMC");
 8081b16:	f007 fc6d 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081b1a:	499f      	ldr	r1, [pc, #636]	; (8081d98 <_Z17readGpsStreamDatev+0x2ec>)
 8081b1c:	f006 fc11 	bl	8088342 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS RMC");
 8081b20:	499d      	ldr	r1, [pc, #628]	; (8081d98 <_Z17readGpsStreamDatev+0x2ec>)
 8081b22:	a80c      	add	r0, sp, #48	; 0x30
 8081b24:	f006 f998 	bl	8087e58 <_ZN6StringC1EPKc>
 8081b28:	a80c      	add	r0, sp, #48	; 0x30
 8081b2a:	f7ff fde1 	bl	80816f0 <_Z12writeLogFile6String>
 8081b2e:	a80c      	add	r0, sp, #48	; 0x30
        String tempStr;
 8081b30:	f006 f948 	bl	8087dc4 <_ZN6StringD1Ev>
    String prefix_string;
 8081b34:	a804      	add	r0, sp, #16
 8081b36:	f006 f945 	bl	8087dc4 <_ZN6StringD1Ev>
    String gps_sentence = "init";
 8081b3a:	4668      	mov	r0, sp
 8081b3c:	f006 f942 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8081b40:	b010      	add	sp, #64	; 0x40
 8081b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    if (gps_sentence.charAt(a + 1) != ',')
 8081b46:	f104 0a01 	add.w	sl, r4, #1
 8081b4a:	4651      	mov	r1, sl
 8081b4c:	4668      	mov	r0, sp
 8081b4e:	f006 fa98 	bl	8088082 <_ZNK6String6charAtEj>
 8081b52:	282c      	cmp	r0, #44	; 0x2c
 8081b54:	f000 808a 	beq.w	8081c6c <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081b58:	f104 030b 	add.w	r3, r4, #11
 8081b5c:	4652      	mov	r2, sl
 8081b5e:	4669      	mov	r1, sp
 8081b60:	a80c      	add	r0, sp, #48	; 0x30
 8081b62:	f006 facd 	bl	8088100 <_ZNK6String9substringEjj>
 8081b66:	a90c      	add	r1, sp, #48	; 0x30
 8081b68:	a808      	add	r0, sp, #32
 8081b6a:	f006 f9bf 	bl	8087eec <_ZN6StringaSEOS_>
 8081b6e:	a80c      	add	r0, sp, #48	; 0x30
 8081b70:	f006 f928 	bl	8087dc4 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081b74:	4b89      	ldr	r3, [pc, #548]	; (8081d9c <_Z17readGpsStreamDatev+0x2f0>)
 8081b76:	681b      	ldr	r3, [r3, #0]
 8081b78:	2b00      	cmp	r3, #0
 8081b7a:	d077      	beq.n	8081c6c <_Z17readGpsStreamDatev+0x1c0>
                            Serial.print("GPS utc string: ");
 8081b7c:	f007 fc3a 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081b80:	4987      	ldr	r1, [pc, #540]	; (8081da0 <_Z17readGpsStreamDatev+0x2f4>)
 8081b82:	f006 fbcb 	bl	808831c <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 8081b86:	f007 fc35 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081b8a:	9908      	ldr	r1, [sp, #32]
                    Serial.println("Received bad index in readGpsStreamDate");
 8081b8c:	f006 fbd9 	bl	8088342 <_ZN5Print7printlnEPKc>
                    break;
 8081b90:	e06c      	b.n	8081c6c <_Z17readGpsStreamDatev+0x1c0>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081b92:	f104 0a01 	add.w	sl, r4, #1
 8081b96:	4651      	mov	r1, sl
 8081b98:	4668      	mov	r0, sp
 8081b9a:	f006 fa72 	bl	8088082 <_ZNK6String6charAtEj>
 8081b9e:	282c      	cmp	r0, #44	; 0x2c
 8081ba0:	d064      	beq.n	8081c6c <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 8081ba2:	f104 030a 	add.w	r3, r4, #10
 8081ba6:	4652      	mov	r2, sl
 8081ba8:	4669      	mov	r1, sp
 8081baa:	a80c      	add	r0, sp, #48	; 0x30
 8081bac:	f006 faa8 	bl	8088100 <_ZNK6String9substringEjj>
 8081bb0:	a90c      	add	r1, sp, #48	; 0x30
 8081bb2:	a808      	add	r0, sp, #32
 8081bb4:	f006 f99a 	bl	8087eec <_ZN6StringaSEOS_>
 8081bb8:	a80c      	add	r0, sp, #48	; 0x30
 8081bba:	f006 f903 	bl	8087dc4 <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 8081bbe:	4b77      	ldr	r3, [pc, #476]	; (8081d9c <_Z17readGpsStreamDatev+0x2f0>)
 8081bc0:	681b      	ldr	r3, [r3, #0]
 8081bc2:	b14b      	cbz	r3, 8081bd8 <_Z17readGpsStreamDatev+0x12c>
                            Serial.print("Latitude string: ");
 8081bc4:	f007 fc16 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081bc8:	4976      	ldr	r1, [pc, #472]	; (8081da4 <_Z17readGpsStreamDatev+0x2f8>)
 8081bca:	f006 fba7 	bl	808831c <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081bce:	f007 fc11 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081bd2:	9908      	ldr	r1, [sp, #32]
 8081bd4:	f006 fba2 	bl	808831c <_ZN5Print5printEPKc>
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 8081bd8:	a908      	add	r1, sp, #32
 8081bda:	a80c      	add	r0, sp, #48	; 0x30
 8081bdc:	f006 f97b 	bl	8087ed6 <_ZN6StringC1ERKS_>
 8081be0:	f104 010c 	add.w	r1, r4, #12
 8081be4:	4668      	mov	r0, sp
 8081be6:	f006 fa4c 	bl	8088082 <_ZNK6String6charAtEj>
 8081bea:	a90c      	add	r1, sp, #48	; 0x30
 8081bec:	4602      	mov	r2, r0
 8081bee:	4630      	mov	r0, r6
 8081bf0:	f003 f9b2 	bl	8084f58 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081bf4:	a80c      	add	r0, sp, #48	; 0x30
 8081bf6:	f006 f8e5 	bl	8087dc4 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081bfa:	882b      	ldrh	r3, [r5, #0]
 8081bfc:	f023 0308 	bic.w	r3, r3, #8
                            status_word.status_int |= 0x0004;
 8081c00:	802b      	strh	r3, [r5, #0]
 8081c02:	e033      	b.n	8081c6c <_Z17readGpsStreamDatev+0x1c0>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081c04:	f104 0a01 	add.w	sl, r4, #1
 8081c08:	4651      	mov	r1, sl
 8081c0a:	4668      	mov	r0, sp
 8081c0c:	f006 fa39 	bl	8088082 <_ZNK6String6charAtEj>
 8081c10:	282c      	cmp	r0, #44	; 0x2c
 8081c12:	d02b      	beq.n	8081c6c <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081c14:	f104 030b 	add.w	r3, r4, #11
 8081c18:	4652      	mov	r2, sl
 8081c1a:	4669      	mov	r1, sp
 8081c1c:	a80c      	add	r0, sp, #48	; 0x30
 8081c1e:	f006 fa6f 	bl	8088100 <_ZNK6String9substringEjj>
 8081c22:	a90c      	add	r1, sp, #48	; 0x30
 8081c24:	a808      	add	r0, sp, #32
 8081c26:	f006 f961 	bl	8087eec <_ZN6StringaSEOS_>
 8081c2a:	a80c      	add	r0, sp, #48	; 0x30
 8081c2c:	f006 f8ca 	bl	8087dc4 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081c30:	4b5a      	ldr	r3, [pc, #360]	; (8081d9c <_Z17readGpsStreamDatev+0x2f0>)
 8081c32:	681b      	ldr	r3, [r3, #0]
 8081c34:	b14b      	cbz	r3, 8081c4a <_Z17readGpsStreamDatev+0x19e>
                            Serial.print("longitude string: ");
 8081c36:	f007 fbdd 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081c3a:	495b      	ldr	r1, [pc, #364]	; (8081da8 <_Z17readGpsStreamDatev+0x2fc>)
 8081c3c:	f006 fb6e 	bl	808831c <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081c40:	f007 fbd8 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081c44:	9908      	ldr	r1, [sp, #32]
 8081c46:	f006 fb69 	bl	808831c <_ZN5Print5printEPKc>
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 8081c4a:	a908      	add	r1, sp, #32
 8081c4c:	a80c      	add	r0, sp, #48	; 0x30
 8081c4e:	f006 f942 	bl	8087ed6 <_ZN6StringC1ERKS_>
 8081c52:	f104 010d 	add.w	r1, r4, #13
 8081c56:	4668      	mov	r0, sp
 8081c58:	f006 fa13 	bl	8088082 <_ZNK6String6charAtEj>
 8081c5c:	a90c      	add	r1, sp, #48	; 0x30
 8081c5e:	4602      	mov	r2, r0
 8081c60:	4630      	mov	r0, r6
 8081c62:	f003 f9c1 	bl	8084fe8 <_ZN3GPS16set_long_decimalE6Stringc>
                        gps.set_satellites(tempStr);
 8081c66:	a80c      	add	r0, sp, #48	; 0x30
 8081c68:	f006 f8ac 	bl	8087dc4 <_ZN6StringD1Ev>
                comma_counter++;
 8081c6c:	f108 0801 	add.w	r8, r8, #1
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 8081c70:	3701      	adds	r7, #1
 8081c72:	9b02      	ldr	r3, [sp, #8]
 8081c74:	b2bc      	uxth	r4, r7
 8081c76:	42a3      	cmp	r3, r4
 8081c78:	d97b      	bls.n	8081d72 <_Z17readGpsStreamDatev+0x2c6>
            if (gps_sentence.charAt(a) == ',')
 8081c7a:	4621      	mov	r1, r4
 8081c7c:	4668      	mov	r0, sp
 8081c7e:	f006 fa00 	bl	8088082 <_ZNK6String6charAtEj>
 8081c82:	282c      	cmp	r0, #44	; 0x2c
 8081c84:	d1f4      	bne.n	8081c70 <_Z17readGpsStreamDatev+0x1c4>
                switch (comma_counter)
 8081c86:	f108 33ff 	add.w	r3, r8, #4294967295
 8081c8a:	2b06      	cmp	r3, #6
 8081c8c:	d86d      	bhi.n	8081d6a <_Z17readGpsStreamDatev+0x2be>
 8081c8e:	a201      	add	r2, pc, #4	; (adr r2, 8081c94 <_Z17readGpsStreamDatev+0x1e8>)
 8081c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8081c94:	08081b93 	.word	0x08081b93
 8081c98:	08081d6b 	.word	0x08081d6b
 8081c9c:	08081c05 	.word	0x08081c05
 8081ca0:	08081d6b 	.word	0x08081d6b
 8081ca4:	08081cb1 	.word	0x08081cb1
 8081ca8:	08081b47 	.word	0x08081b47
 8081cac:	08081ced 	.word	0x08081ced
                    if (gps_sentence.charAt(a + 1) != ',')
 8081cb0:	f104 0a01 	add.w	sl, r4, #1
 8081cb4:	4651      	mov	r1, sl
 8081cb6:	4668      	mov	r0, sp
 8081cb8:	f006 f9e3 	bl	8088082 <_ZNK6String6charAtEj>
 8081cbc:	282c      	cmp	r0, #44	; 0x2c
 8081cbe:	d0d5      	beq.n	8081c6c <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081cc0:	4652      	mov	r2, sl
 8081cc2:	1ce3      	adds	r3, r4, #3
 8081cc4:	4669      	mov	r1, sp
 8081cc6:	a80c      	add	r0, sp, #48	; 0x30
 8081cc8:	f006 fa1a 	bl	8088100 <_ZNK6String9substringEjj>
 8081ccc:	a90c      	add	r1, sp, #48	; 0x30
 8081cce:	a808      	add	r0, sp, #32
 8081cd0:	f006 f90c 	bl	8087eec <_ZN6StringaSEOS_>
 8081cd4:	a80c      	add	r0, sp, #48	; 0x30
 8081cd6:	f006 f875 	bl	8087dc4 <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 8081cda:	a908      	add	r1, sp, #32
 8081cdc:	a80c      	add	r0, sp, #48	; 0x30
 8081cde:	f006 f8fa 	bl	8087ed6 <_ZN6StringC1ERKS_>
 8081ce2:	4630      	mov	r0, r6
 8081ce4:	a90c      	add	r1, sp, #48	; 0x30
 8081ce6:	f003 f9c5 	bl	8085074 <_ZN3GPS14set_satellitesE6String>
 8081cea:	e7bc      	b.n	8081c66 <_Z17readGpsStreamDatev+0x1ba>
                    if (gps_sentence.charAt(a + 1) != ',')
 8081cec:	f104 0a01 	add.w	sl, r4, #1
 8081cf0:	4651      	mov	r1, sl
 8081cf2:	4668      	mov	r0, sp
 8081cf4:	f006 f9c5 	bl	8088082 <_ZNK6String6charAtEj>
 8081cf8:	282c      	cmp	r0, #44	; 0x2c
 8081cfa:	d0b7      	beq.n	8081c6c <_Z17readGpsStreamDatev+0x1c0>
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081cfc:	4652      	mov	r2, sl
 8081cfe:	1ce3      	adds	r3, r4, #3
 8081d00:	4669      	mov	r1, sp
 8081d02:	a80c      	add	r0, sp, #48	; 0x30
 8081d04:	f006 f9fc 	bl	8088100 <_ZNK6String9substringEjj>
 8081d08:	a90c      	add	r1, sp, #48	; 0x30
 8081d0a:	a808      	add	r0, sp, #32
 8081d0c:	f006 f8ee 	bl	8087eec <_ZN6StringaSEOS_>
 8081d10:	a80c      	add	r0, sp, #48	; 0x30
 8081d12:	f006 f857 	bl	8087dc4 <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 8081d16:	a908      	add	r1, sp, #32
 8081d18:	a80c      	add	r0, sp, #48	; 0x30
 8081d1a:	f006 f8dc 	bl	8087ed6 <_ZN6StringC1ERKS_>
 8081d1e:	a90c      	add	r1, sp, #48	; 0x30
 8081d20:	4630      	mov	r0, r6
 8081d22:	f003 f9af 	bl	8085084 <_ZN3GPS22set_horizontalDilutionE6String>
 8081d26:	a80c      	add	r0, sp, #48	; 0x30
 8081d28:	f006 f84c 	bl	8087dc4 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081d2c:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081d2e:	4630      	mov	r0, r6
                        status_word.status_int &= 0xFFF3;
 8081d30:	f023 030c 	bic.w	r3, r3, #12
 8081d34:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081d36:	f003 f9bb 	bl	80850b0 <_ZN3GPS22get_horizontalDilutionEv>
 8081d3a:	2801      	cmp	r0, #1
 8081d3c:	dc03      	bgt.n	8081d46 <_Z17readGpsStreamDatev+0x29a>
                            status_word.status_int |= 0x000C;
 8081d3e:	882b      	ldrh	r3, [r5, #0]
 8081d40:	f043 030c 	orr.w	r3, r3, #12
 8081d44:	e75c      	b.n	8081c00 <_Z17readGpsStreamDatev+0x154>
                        else if (gps.get_horizontalDilution() < 5)
 8081d46:	4630      	mov	r0, r6
 8081d48:	f003 f9b2 	bl	80850b0 <_ZN3GPS22get_horizontalDilutionEv>
 8081d4c:	2804      	cmp	r0, #4
 8081d4e:	dc03      	bgt.n	8081d58 <_Z17readGpsStreamDatev+0x2ac>
                            status_word.status_int |= 0x0008;
 8081d50:	882b      	ldrh	r3, [r5, #0]
 8081d52:	f043 0308 	orr.w	r3, r3, #8
 8081d56:	e753      	b.n	8081c00 <_Z17readGpsStreamDatev+0x154>
                        else if (gps.get_horizontalDilution() < 20)
 8081d58:	4630      	mov	r0, r6
 8081d5a:	f003 f9a9 	bl	80850b0 <_ZN3GPS22get_horizontalDilutionEv>
 8081d5e:	2813      	cmp	r0, #19
 8081d60:	dc84      	bgt.n	8081c6c <_Z17readGpsStreamDatev+0x1c0>
                            status_word.status_int |= 0x0004;
 8081d62:	882b      	ldrh	r3, [r5, #0]
 8081d64:	f043 0304 	orr.w	r3, r3, #4
 8081d68:	e74a      	b.n	8081c00 <_Z17readGpsStreamDatev+0x154>
                    Serial.println("Received bad index in readGpsStreamDate");
 8081d6a:	f007 fb43 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081d6e:	4649      	mov	r1, r9
 8081d70:	e70c      	b.n	8081b8c <_Z17readGpsStreamDatev+0xe0>
        String tempStr;
 8081d72:	a808      	add	r0, sp, #32
 8081d74:	e6dc      	b.n	8081b30 <_Z17readGpsStreamDatev+0x84>
 8081d76:	2700      	movs	r7, #0
 8081d78:	4905      	ldr	r1, [pc, #20]	; (8081d90 <_Z17readGpsStreamDatev+0x2e4>)
 8081d7a:	a808      	add	r0, sp, #32
 8081d7c:	f006 f86c 	bl	8087e58 <_ZN6StringC1EPKc>
        comma_counter = 0;
 8081d80:	46b8      	mov	r8, r7
                    Serial.println("Received bad index in readGpsStreamDate");
 8081d82:	f8df 9030 	ldr.w	r9, [pc, #48]	; 8081db4 <_Z17readGpsStreamDatev+0x308>
                        gps.set_horizontalDilution(tempStr);
 8081d86:	4e09      	ldr	r6, [pc, #36]	; (8081dac <_Z17readGpsStreamDatev+0x300>)
                        status_word.status_int &= 0xFFF3;
 8081d88:	4d09      	ldr	r5, [pc, #36]	; (8081db0 <_Z17readGpsStreamDatev+0x304>)
 8081d8a:	e772      	b.n	8081c72 <_Z17readGpsStreamDatev+0x1c6>
 8081d8c:	0808cd2e 	.word	0x0808cd2e
 8081d90:	0808eb69 	.word	0x0808eb69
 8081d94:	0808cdad 	.word	0x0808cdad
 8081d98:	0808cd9b 	.word	0x0808cd9b
 8081d9c:	200005d4 	.word	0x200005d4
 8081da0:	0808cd49 	.word	0x0808cd49
 8081da4:	0808cd5a 	.word	0x0808cd5a
 8081da8:	0808cd6c 	.word	0x0808cd6c
 8081dac:	20000668 	.word	0x20000668
 8081db0:	20001c60 	.word	0x20001c60
 8081db4:	0808cdb1 	.word	0x0808cdb1

08081db8 <_Z10readAlpha1v>:
{
 8081db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (debugging_enabled)
 8081dbc:	4c90      	ldr	r4, [pc, #576]	; (8082000 <_Z10readAlpha1v+0x248>)
{
 8081dbe:	b089      	sub	sp, #36	; 0x24
    String alpha1_ppmRounded = "";
 8081dc0:	4668      	mov	r0, sp
 8081dc2:	4990      	ldr	r1, [pc, #576]	; (8082004 <_Z10readAlpha1v+0x24c>)
 8081dc4:	f006 f848 	bl	8087e58 <_ZN6StringC1EPKc>
    if (debugging_enabled)
 8081dc8:	6823      	ldr	r3, [r4, #0]
 8081dca:	b123      	cbz	r3, 8081dd6 <_Z10readAlpha1v+0x1e>
        Serial.println("Start of alpha read");
 8081dcc:	f007 fb12 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081dd0:	498d      	ldr	r1, [pc, #564]	; (8082008 <_Z10readAlpha1v+0x250>)
 8081dd2:	f006 fab6 	bl	8088342 <_ZN5Print7printlnEPKc>
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8081dd6:	4e8d      	ldr	r6, [pc, #564]	; (808200c <_Z10readAlpha1v+0x254>)
 8081dd8:	2100      	movs	r1, #0
 8081dda:	8830      	ldrh	r0, [r6, #0]
 8081ddc:	f007 fdc9 	bl	8089972 <digitalWrite>
    if (Wire.requestFrom(0x49, 1) == 0)
 8081de0:	f007 fe4a 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8081de4:	2201      	movs	r2, #1
 8081de6:	2149      	movs	r1, #73	; 0x49
 8081de8:	f007 fccb 	bl	8089782 <_ZN7TwoWire11requestFromEhj>
 8081dec:	2800      	cmp	r0, #0
 8081dee:	d145      	bne.n	8081e7c <_Z10readAlpha1v+0xc4>
        if (debugging_enabled)
 8081df0:	6823      	ldr	r3, [r4, #0]
 8081df2:	b173      	cbz	r3, 8081e12 <_Z10readAlpha1v+0x5a>
            Serial.println("Couldn't communicate with LMP91000_1");
 8081df4:	f007 fafe 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081df8:	4985      	ldr	r1, [pc, #532]	; (8082010 <_Z10readAlpha1v+0x258>)
 8081dfa:	f006 faa2 	bl	8088342 <_ZN5Print7printlnEPKc>
            writeLogFile("Couldn't communicate with LMP91000_1");
 8081dfe:	4984      	ldr	r1, [pc, #528]	; (8082010 <_Z10readAlpha1v+0x258>)
                writeLogFile("Halfvolt higher than 0.5");
 8081e00:	a804      	add	r0, sp, #16
 8081e02:	f006 f829 	bl	8087e58 <_ZN6StringC1EPKc>
 8081e06:	a804      	add	r0, sp, #16
 8081e08:	f7ff fc72 	bl	80816f0 <_Z12writeLogFile6String>
 8081e0c:	a804      	add	r0, sp, #16
 8081e0e:	f005 ffd9 	bl	8087dc4 <_ZN6StringD1Ev>
    if (lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081e12:	2100      	movs	r1, #0
 8081e14:	487f      	ldr	r0, [pc, #508]	; (8082014 <_Z10readAlpha1v+0x25c>)
 8081e16:	f002 ff2e 	bl	8084c76 <_ZN8LMP910004readEh>
 8081e1a:	b980      	cbnz	r0, 8081e3e <_Z10readAlpha1v+0x86>
        if (debugging_enabled)
 8081e1c:	6823      	ldr	r3, [r4, #0]
 8081e1e:	b173      	cbz	r3, 8081e3e <_Z10readAlpha1v+0x86>
            Serial.println("Status = 0 from LMP91000 status reg");
 8081e20:	f007 fae8 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081e24:	497c      	ldr	r1, [pc, #496]	; (8082018 <_Z10readAlpha1v+0x260>)
 8081e26:	f006 fa8c 	bl	8088342 <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8081e2a:	497c      	ldr	r1, [pc, #496]	; (808201c <_Z10readAlpha1v+0x264>)
 8081e2c:	a804      	add	r0, sp, #16
 8081e2e:	f006 f813 	bl	8087e58 <_ZN6StringC1EPKc>
 8081e32:	a804      	add	r0, sp, #16
 8081e34:	f7ff fc5c 	bl	80816f0 <_Z12writeLogFile6String>
 8081e38:	a804      	add	r0, sp, #16
 8081e3a:	f005 ffc3 	bl	8087dc4 <_ZN6StringD1Ev>
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081e3e:	f007 fe1b 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8081e42:	2201      	movs	r2, #1
 8081e44:	2149      	movs	r1, #73	; 0x49
 8081e46:	f007 fc9c 	bl	8089782 <_ZN7TwoWire11requestFromEhj>
 8081e4a:	2800      	cmp	r0, #0
 8081e4c:	d140      	bne.n	8081ed0 <_Z10readAlpha1v+0x118>
        alpha1_ppmRounded = "-99";
 8081e4e:	4668      	mov	r0, sp
 8081e50:	4973      	ldr	r1, [pc, #460]	; (8082020 <_Z10readAlpha1v+0x268>)
 8081e52:	f006 f853 	bl	8087efc <_ZN6StringaSEPKc>
    float alpha1_ppmraw = 0;
 8081e56:	2500      	movs	r5, #0
    digitalWrite(lmp91000_1_en, HIGH);  //disable
 8081e58:	2101      	movs	r1, #1
 8081e5a:	8830      	ldrh	r0, [r6, #0]
 8081e5c:	f007 fd89 	bl	8089972 <digitalWrite>
    if (debugging_enabled)
 8081e60:	6823      	ldr	r3, [r4, #0]
 8081e62:	b123      	cbz	r3, 8081e6e <_Z10readAlpha1v+0xb6>
        Serial.print("CO measurements:  \n\r");
 8081e64:	f007 fac6 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081e68:	496e      	ldr	r1, [pc, #440]	; (8082024 <_Z10readAlpha1v+0x26c>)
 8081e6a:	f006 fa57 	bl	808831c <_ZN5Print5printEPKc>
    String alpha1_ppmRounded = "";
 8081e6e:	4668      	mov	r0, sp
 8081e70:	f005 ffa8 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8081e74:	4628      	mov	r0, r5
 8081e76:	b009      	add	sp, #36	; 0x24
 8081e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8081e7c:	2103      	movs	r1, #3
 8081e7e:	486a      	ldr	r0, [pc, #424]	; (8082028 <_Z10readAlpha1v+0x270>)
 8081e80:	f003 f840 	bl	8084f04 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 8081e84:	f008 fc18 	bl	808a6b8 <__aeabi_i2f>
 8081e88:	4b68      	ldr	r3, [pc, #416]	; (808202c <_Z10readAlpha1v+0x274>)
 8081e8a:	6819      	ldr	r1, [r3, #0]
 8081e8c:	f008 fc68 	bl	808a760 <__aeabi_fmul>
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8081e90:	4967      	ldr	r1, [pc, #412]	; (8082030 <_Z10readAlpha1v+0x278>)
 8081e92:	f008 fd19 	bl	808a8c8 <__aeabi_fdiv>
 8081e96:	f007 ffb5 	bl	8089e04 <__aeabi_f2d>
 8081e9a:	2200      	movs	r2, #0
 8081e9c:	4b65      	ldr	r3, [pc, #404]	; (8082034 <_Z10readAlpha1v+0x27c>)
 8081e9e:	4680      	mov	r8, r0
 8081ea0:	4689      	mov	r9, r1
 8081ea2:	f007 fe4f 	bl	8089b44 <__aeabi_dsub>
 8081ea6:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
 8081eaa:	2200      	movs	r2, #0
 8081eac:	4659      	mov	r1, fp
 8081eae:	4b62      	ldr	r3, [pc, #392]	; (8082038 <_Z10readAlpha1v+0x280>)
 8081eb0:	f008 fa90 	bl	808a3d4 <__aeabi_dcmpgt>
 8081eb4:	2800      	cmp	r0, #0
 8081eb6:	d0ac      	beq.n	8081e12 <_Z10readAlpha1v+0x5a>
            if (debugging_enabled)
 8081eb8:	6823      	ldr	r3, [r4, #0]
 8081eba:	2b00      	cmp	r3, #0
 8081ebc:	d0a9      	beq.n	8081e12 <_Z10readAlpha1v+0x5a>
                Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref / 1000);
 8081ebe:	f007 fa99 	bl	80893f4 <_Z16_fetch_usbserialv>
 8081ec2:	495e      	ldr	r1, [pc, #376]	; (808203c <_Z10readAlpha1v+0x284>)
 8081ec4:	4642      	mov	r2, r8
 8081ec6:	464b      	mov	r3, r9
 8081ec8:	f7fe fde0 	bl	8080a8c <_ZN5Print6printfEPKcz>
                writeLogFile("Halfvolt higher than 0.5");
 8081ecc:	495c      	ldr	r1, [pc, #368]	; (8082040 <_Z10readAlpha1v+0x288>)
 8081ece:	e797      	b.n	8081e00 <_Z10readAlpha1v+0x48>
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081ed0:	2100      	movs	r1, #0
 8081ed2:	4850      	ldr	r0, [pc, #320]	; (8082014 <_Z10readAlpha1v+0x25c>)
 8081ed4:	f002 fecf 	bl	8084c76 <_ZN8LMP910004readEh>
 8081ed8:	2800      	cmp	r0, #0
 8081eda:	d0b8      	beq.n	8081e4e <_Z10readAlpha1v+0x96>
 8081edc:	2500      	movs	r5, #0
 8081ede:	270a      	movs	r7, #10
 8081ee0:	46a8      	mov	r8, r5
 8081ee2:	46a9      	mov	r9, r5
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8081ee4:	f8df a140 	ldr.w	sl, [pc, #320]	; 8082028 <_Z10readAlpha1v+0x270>
 8081ee8:	2100      	movs	r1, #0
 8081eea:	4650      	mov	r0, sl
 8081eec:	f003 f80a 	bl	8084f04 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081ef0:	2101      	movs	r1, #1
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8081ef2:	4481      	add	r9, r0
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081ef4:	4650      	mov	r0, sl
 8081ef6:	f003 f805 	bl	8084f04 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081efa:	2102      	movs	r1, #2
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081efc:	4480      	add	r8, r0
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081efe:	4650      	mov	r0, sl
 8081f00:	f003 f800 	bl	8084f04 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081f04:	2103      	movs	r1, #3
 8081f06:	4650      	mov	r0, sl
 8081f08:	f002 fffc 	bl	8084f04 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8081f0c:	3f01      	subs	r7, #1
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081f0e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081f12:	4405      	add	r5, r0
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081f14:	d1e8      	bne.n	8081ee8 <_Z10readAlpha1v+0x130>
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8081f16:	f04f 0b0a 	mov.w	fp, #10
        volt0_gas = A0_gas * ads_bitmv;
 8081f1a:	4b44      	ldr	r3, [pc, #272]	; (808202c <_Z10readAlpha1v+0x274>)
        volt_half_Vref = half_Vref * ads_bitmv;
 8081f1c:	fbb5 f0fb 	udiv	r0, r5, fp
        volt0_gas = A0_gas * ads_bitmv;
 8081f20:	f8d3 a000 	ldr.w	sl, [r3]
        volt_half_Vref = half_Vref * ads_bitmv;
 8081f24:	f008 fbc8 	bl	808a6b8 <__aeabi_i2f>
 8081f28:	4651      	mov	r1, sl
 8081f2a:	f008 fc19 	bl	808a760 <__aeabi_fmul>
 8081f2e:	4607      	mov	r7, r0
        volt0_gas = A0_gas * ads_bitmv;
 8081f30:	fbb9 f0fb 	udiv	r0, r9, fp
 8081f34:	f008 fbc0 	bl	808a6b8 <__aeabi_i2f>
 8081f38:	4651      	mov	r1, sl
 8081f3a:	f008 fc11 	bl	808a760 <__aeabi_fmul>
 8081f3e:	4601      	mov	r1, r0
        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 8081f40:	4638      	mov	r0, r7
 8081f42:	f008 fb03 	bl	808a54c <__aeabi_fsub>
 8081f46:	493f      	ldr	r1, [pc, #252]	; (8082044 <_Z10readAlpha1v+0x28c>)
 8081f48:	f008 fcbe 	bl	808a8c8 <__aeabi_fdiv>
 8081f4c:	4605      	mov	r5, r0
        volt1_aux = A1_aux * ads_bitmv;
 8081f4e:	fbb8 f0fb 	udiv	r0, r8, fp
 8081f52:	f008 fbb1 	bl	808a6b8 <__aeabi_i2f>
 8081f56:	4651      	mov	r1, sl
 8081f58:	f008 fc02 	bl	808a760 <__aeabi_fmul>
 8081f5c:	4601      	mov	r1, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 8081f5e:	4638      	mov	r0, r7
 8081f60:	f008 faf4 	bl	808a54c <__aeabi_fsub>
 8081f64:	4938      	ldr	r1, [pc, #224]	; (8082048 <_Z10readAlpha1v+0x290>)
 8081f66:	f008 fcaf 	bl	808a8c8 <__aeabi_fdiv>
 8081f6a:	4607      	mov	r7, r0
        if (readTemperature() <= 15)
 8081f6c:	f7ff fa00 	bl	8081370 <_Z15readTemperaturev>
 8081f70:	4936      	ldr	r1, [pc, #216]	; (808204c <_Z10readAlpha1v+0x294>)
 8081f72:	f008 fd9d 	bl	808aab0 <__aeabi_fcmple>
 8081f76:	b1d0      	cbz	r0, 8081fae <_Z10readAlpha1v+0x1f6>
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 8081f78:	4639      	mov	r1, r7
 8081f7a:	4628      	mov	r0, r5
 8081f7c:	f008 fae6 	bl	808a54c <__aeabi_fsub>
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081f80:	f007 ff40 	bl	8089e04 <__aeabi_f2d>
 8081f84:	a31a      	add	r3, pc, #104	; (adr r3, 8081ff0 <_Z10readAlpha1v+0x238>)
 8081f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081f8a:	f008 f8bd 	bl	808a108 <__aeabi_ddiv>
 8081f8e:	f008 fa89 	bl	808a4a4 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8081f92:	2202      	movs	r2, #2
 8081f94:	4601      	mov	r1, r0
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081f96:	4605      	mov	r5, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8081f98:	a804      	add	r0, sp, #16
 8081f9a:	f005 ffd3 	bl	8087f44 <_ZN6StringC1Efi>
 8081f9e:	4668      	mov	r0, sp
 8081fa0:	a904      	add	r1, sp, #16
 8081fa2:	f005 ffa3 	bl	8087eec <_ZN6StringaSEOS_>
 8081fa6:	a804      	add	r0, sp, #16
 8081fa8:	f005 ff0c 	bl	8087dc4 <_ZN6StringD1Ev>
 8081fac:	e754      	b.n	8081e58 <_Z10readAlpha1v+0xa0>
        else if (readTemperature() <= 25)
 8081fae:	f7ff f9df 	bl	8081370 <_Z15readTemperaturev>
 8081fb2:	4927      	ldr	r1, [pc, #156]	; (8082050 <_Z10readAlpha1v+0x298>)
 8081fb4:	f008 fd7c 	bl	808aab0 <__aeabi_fcmple>
 8081fb8:	b120      	cbz	r0, 8081fc4 <_Z10readAlpha1v+0x20c>
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 8081fba:	4639      	mov	r1, r7
 8081fbc:	4628      	mov	r0, r5
 8081fbe:	f008 fac7 	bl	808a550 <__addsf3>
 8081fc2:	e7dd      	b.n	8081f80 <_Z10readAlpha1v+0x1c8>
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 8081fc4:	4638      	mov	r0, r7
 8081fc6:	f007 ff1d 	bl	8089e04 <__aeabi_f2d>
 8081fca:	a30b      	add	r3, pc, #44	; (adr r3, 8081ff8 <_Z10readAlpha1v+0x240>)
 8081fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081fd0:	f007 ff70 	bl	8089eb4 <__aeabi_dmul>
 8081fd4:	4680      	mov	r8, r0
 8081fd6:	4628      	mov	r0, r5
 8081fd8:	4689      	mov	r9, r1
 8081fda:	f007 ff13 	bl	8089e04 <__aeabi_f2d>
 8081fde:	4602      	mov	r2, r0
 8081fe0:	460b      	mov	r3, r1
 8081fe2:	4640      	mov	r0, r8
 8081fe4:	4649      	mov	r1, r9
 8081fe6:	f007 fdaf 	bl	8089b48 <__adddf3>
 8081fea:	f008 fa5b 	bl	808a4a4 <__aeabi_d2f>
 8081fee:	e7c7      	b.n	8081f80 <_Z10readAlpha1v+0x1c8>
 8081ff0:	d4fdf3b6 	.word	0xd4fdf3b6
 8081ff4:	3fd6e978 	.word	0x3fd6e978
 8081ff8:	851eb852 	.word	0x851eb852
 8081ffc:	3fe851eb 	.word	0x3fe851eb
 8082000:	200005d4 	.word	0x200005d4
 8082004:	0808eb69 	.word	0x0808eb69
 8082008:	0808cdd9 	.word	0x0808cdd9
 808200c:	200000c0 	.word	0x200000c0
 8082010:	0808cded 	.word	0x0808cded
 8082014:	200006b1 	.word	0x200006b1
 8082018:	0808ce3d 	.word	0x0808ce3d
 808201c:	0808ce61 	.word	0x0808ce61
 8082020:	0808ccdd 	.word	0x0808ccdd
 8082024:	0808ce74 	.word	0x0808ce74
 8082028:	20000544 	.word	0x20000544
 808202c:	20000084 	.word	0x20000084
 8082030:	447a0000 	.word	0x447a0000
 8082034:	3ff40000 	.word	0x3ff40000
 8082038:	3fe00000 	.word	0x3fe00000
 808203c:	0808ce12 	.word	0x0808ce12
 8082040:	0808ce24 	.word	0x0808ce24
 8082044:	c2f00000 	.word	0xc2f00000
 8082048:	c3160000 	.word	0xc3160000
 808204c:	41700000 	.word	0x41700000
 8082050:	41c80000 	.word	0x41c80000

08082054 <_Z12sendWifiInfov>:
{
 8082054:	b510      	push	{r4, lr}
 8082056:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8082058:	491d      	ldr	r1, [pc, #116]	; (80820d0 <_Z12sendWifiInfov+0x7c>)
 808205a:	a808      	add	r0, sp, #32
 808205c:	f005 fefc 	bl	8087e58 <_ZN6StringC1EPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082060:	491c      	ldr	r1, [pc, #112]	; (80820d4 <_Z12sendWifiInfov+0x80>)
 8082062:	a804      	add	r0, sp, #16
 8082064:	f005 ff37 	bl	8087ed6 <_ZN6StringC1ERKS_>
 8082068:	a904      	add	r1, sp, #16
 808206a:	a808      	add	r0, sp, #32
 808206c:	f005 ffce 	bl	808800c <_ZplRK15StringSumHelperRK6String>
 8082070:	4919      	ldr	r1, [pc, #100]	; (80820d8 <_Z12sendWifiInfov+0x84>)
 8082072:	f005 ffd7 	bl	8088024 <_ZplRK15StringSumHelperPKc>
 8082076:	4604      	mov	r4, r0
 8082078:	4918      	ldr	r1, [pc, #96]	; (80820dc <_Z12sendWifiInfov+0x88>)
 808207a:	a80c      	add	r0, sp, #48	; 0x30
 808207c:	f005 ff2b 	bl	8087ed6 <_ZN6StringC1ERKS_>
 8082080:	a90c      	add	r1, sp, #48	; 0x30
 8082082:	4620      	mov	r0, r4
 8082084:	f005 ffc2 	bl	808800c <_ZplRK15StringSumHelperRK6String>
 8082088:	4915      	ldr	r1, [pc, #84]	; (80820e0 <_Z12sendWifiInfov+0x8c>)
 808208a:	f005 ffcb 	bl	8088024 <_ZplRK15StringSumHelperPKc>
 808208e:	4601      	mov	r1, r0
 8082090:	4668      	mov	r0, sp
 8082092:	f005 ff20 	bl	8087ed6 <_ZN6StringC1ERKS_>
 8082096:	a80c      	add	r0, sp, #48	; 0x30
 8082098:	f005 fe94 	bl	8087dc4 <_ZN6StringD1Ev>
 808209c:	a804      	add	r0, sp, #16
 808209e:	f005 fe91 	bl	8087dc4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80820a2:	a808      	add	r0, sp, #32
 80820a4:	f005 fe8e 	bl	8087dc4 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 80820a8:	f007 f9a4 	bl	80893f4 <_Z16_fetch_usbserialv>
 80820ac:	490d      	ldr	r1, [pc, #52]	; (80820e4 <_Z12sendWifiInfov+0x90>)
 80820ae:	f006 f948 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 80820b2:	f007 fabd 	bl	8089630 <_Z22__fetch_global_Serial1v>
 80820b6:	9900      	ldr	r1, [sp, #0]
 80820b8:	f006 f943 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 80820bc:	f007 f99a 	bl	80893f4 <_Z16_fetch_usbserialv>
 80820c0:	4909      	ldr	r1, [pc, #36]	; (80820e8 <_Z12sendWifiInfov+0x94>)
 80820c2:	f006 f93e 	bl	8088342 <_ZN5Print7printlnEPKc>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 80820c6:	4668      	mov	r0, sp
 80820c8:	f005 fe7c 	bl	8087dc4 <_ZN6StringD1Ev>
}
 80820cc:	b010      	add	sp, #64	; 0x40
 80820ce:	bd10      	pop	{r4, pc}
 80820d0:	0808ce89 	.word	0x0808ce89
 80820d4:	20001c50 	.word	0x20001c50
 80820d8:	0808ce8c 	.word	0x0808ce8c
 80820dc:	20000758 	.word	0x20000758
 80820e0:	0808cee6 	.word	0x0808cee6
 80820e4:	0808ce8e 	.word	0x0808ce8e
 80820e8:	0808ceb2 	.word	0x0808ceb2

080820ec <_Z16goToSleepBatteryv>:
    //System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
    System.reset();
}

void goToSleepBattery(void)
{
 80820ec:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80820ee:	4c2c      	ldr	r4, [pc, #176]	; (80821a0 <_Z16goToSleepBatteryv+0xb4>)
 80820f0:	2101      	movs	r1, #1
 80820f2:	8820      	ldrh	r0, [r4, #0]
 80820f4:	f007 fc3d 	bl	8089972 <digitalWrite>
    delay(250);                   // waits for a second
 80820f8:	20fa      	movs	r0, #250	; 0xfa
 80820fa:	f006 fc97 	bl	8088a2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80820fe:	2100      	movs	r1, #0
 8082100:	8820      	ldrh	r0, [r4, #0]
 8082102:	f007 fc36 	bl	8089972 <digitalWrite>
    delay(250);                   // waits for a second
 8082106:	20fa      	movs	r0, #250	; 0xfa
 8082108:	f006 fc90 	bl	8088a2c <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 808210c:	2101      	movs	r1, #1
 808210e:	8820      	ldrh	r0, [r4, #0]
 8082110:	f007 fc2f 	bl	8089972 <digitalWrite>
    delay(250);                   // waits for a second
 8082114:	20fa      	movs	r0, #250	; 0xfa
 8082116:	f006 fc89 	bl	8088a2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808211a:	2100      	movs	r1, #0
 808211c:	8820      	ldrh	r0, [r4, #0]
 808211e:	f007 fc28 	bl	8089972 <digitalWrite>
    delay(250);                   // waits for a second
 8082122:	20fa      	movs	r0, #250	; 0xfa
 8082124:	f006 fc82 	bl	8088a2c <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8082128:	2101      	movs	r1, #1
 808212a:	8820      	ldrh	r0, [r4, #0]
 808212c:	f007 fc21 	bl	8089972 <digitalWrite>
    delay(250);                   // waits for a second
 8082130:	20fa      	movs	r0, #250	; 0xfa
 8082132:	f006 fc7b 	bl	8088a2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082136:	2100      	movs	r1, #0
 8082138:	8820      	ldrh	r0, [r4, #0]
 808213a:	f007 fc1a 	bl	8089972 <digitalWrite>
    delay(250);                   // waits for a second
 808213e:	20fa      	movs	r0, #250	; 0xfa
 8082140:	f006 fc74 	bl	8088a2c <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082144:	2101      	movs	r1, #1
 8082146:	8820      	ldrh	r0, [r4, #0]
 8082148:	f007 fc13 	bl	8089972 <digitalWrite>
    delay(250);                   // waits for a second
 808214c:	20fa      	movs	r0, #250	; 0xfa
 808214e:	f006 fc6d 	bl	8088a2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082152:	2100      	movs	r1, #0
 8082154:	8820      	ldrh	r0, [r4, #0]
 8082156:	f007 fc0c 	bl	8089972 <digitalWrite>
    delay(250);                   // waits for a second
 808215a:	20fa      	movs	r0, #250	; 0xfa
 808215c:	f006 fc66 	bl	8088a2c <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082160:	2101      	movs	r1, #1
 8082162:	8820      	ldrh	r0, [r4, #0]
 8082164:	f007 fc05 	bl	8089972 <digitalWrite>
    delay(250);                   // waits for a second
 8082168:	20fa      	movs	r0, #250	; 0xfa
 808216a:	f006 fc5f 	bl	8088a2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808216e:	2100      	movs	r1, #0
 8082170:	8820      	ldrh	r0, [r4, #0]
 8082172:	f007 fbfe 	bl	8089972 <digitalWrite>
    delay(250);                   // waits for a second
 8082176:	20fa      	movs	r0, #250	; 0xfa
 8082178:	f006 fc58 	bl	8088a2c <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 808217c:	2101      	movs	r1, #1
 808217e:	8820      	ldrh	r0, [r4, #0]
 8082180:	f007 fbf7 	bl	8089972 <digitalWrite>
    delay(250);                   // waits for a second
 8082184:	20fa      	movs	r0, #250	; 0xfa
 8082186:	f006 fc51 	bl	8088a2c <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808218a:	8820      	ldrh	r0, [r4, #0]
 808218c:	2100      	movs	r1, #0
 808218e:	f007 fbf0 	bl	8089972 <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);
}
 8082192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeRegister(7, 0b01101011);   //turn off batfet
 8082196:	216b      	movs	r1, #107	; 0x6b
 8082198:	2007      	movs	r0, #7
 808219a:	f7fe bd4b 	b.w	8080c34 <_Z13writeRegisterhh>
 808219e:	bf00      	nop
 80821a0:	200000c8 	.word	0x200000c8

080821a4 <_Z8resetESPv>:

void resetESP(void)
{
 80821a4:	b570      	push	{r4, r5, r6, lr}
    digitalWrite(esp_wroom_en, LOW);
 80821a6:	4e12      	ldr	r6, [pc, #72]	; (80821f0 <_Z8resetESPv+0x4c>)
    //digitalWrite(serial4Enabler, LOW);
    digitalWrite(blower_en, LOW);
 80821a8:	4d12      	ldr	r5, [pc, #72]	; (80821f4 <_Z8resetESPv+0x50>)
    digitalWrite(esp_wroom_en, LOW);
 80821aa:	8830      	ldrh	r0, [r6, #0]
    digitalWrite(co2_en, LOW);
 80821ac:	4c12      	ldr	r4, [pc, #72]	; (80821f8 <_Z8resetESPv+0x54>)
    digitalWrite(esp_wroom_en, LOW);
 80821ae:	2100      	movs	r1, #0
 80821b0:	f007 fbdf 	bl	8089972 <digitalWrite>
    digitalWrite(blower_en, LOW);
 80821b4:	8828      	ldrh	r0, [r5, #0]
 80821b6:	2100      	movs	r1, #0
 80821b8:	f007 fbdb 	bl	8089972 <digitalWrite>
    digitalWrite(co2_en, LOW);
 80821bc:	2100      	movs	r1, #0
 80821be:	8820      	ldrh	r0, [r4, #0]
 80821c0:	f007 fbd7 	bl	8089972 <digitalWrite>
    delay(1000);
 80821c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80821c8:	f006 fc30 	bl	8088a2c <delay>
    digitalWrite(esp_wroom_en, HIGH);
 80821cc:	8830      	ldrh	r0, [r6, #0]
 80821ce:	2101      	movs	r1, #1
 80821d0:	f007 fbcf 	bl	8089972 <digitalWrite>
    //digitalWrite(serial4Enabler, HIGH);
    digitalWrite(blower_en, HIGH);
 80821d4:	8828      	ldrh	r0, [r5, #0]
 80821d6:	2101      	movs	r1, #1
 80821d8:	f007 fbcb 	bl	8089972 <digitalWrite>
    digitalWrite(co2_en, HIGH);
 80821dc:	8820      	ldrh	r0, [r4, #0]
 80821de:	2101      	movs	r1, #1
 80821e0:	f007 fbc7 	bl	8089972 <digitalWrite>
    delay(1000);
}
 80821e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(1000);
 80821e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80821ec:	f006 bc1e 	b.w	8088a2c <delay>
 80821f0:	20000090 	.word	0x20000090
 80821f4:	20000088 	.word	0x20000088
 80821f8:	2000008c 	.word	0x2000008c

080821fc <_Z12outputCOtoPIv>:
    }
    Serial.println("Exiting serial menu...");
}

void outputCOtoPI(void)
{
 80821fc:	b500      	push	{lr}
 80821fe:	b08f      	sub	sp, #60	; 0x3c
    String CO_string = "";
 8082200:	4983      	ldr	r1, [pc, #524]	; (8082410 <_Z12outputCOtoPIv+0x214>)
 8082202:	a802      	add	r0, sp, #8
 8082204:	f005 fe28 	bl	8087e58 <_ZN6StringC1EPKc>
    Serial.println("Outputting CO to PI.");
 8082208:	f007 f8f4 	bl	80893f4 <_Z16_fetch_usbserialv>
 808220c:	4981      	ldr	r1, [pc, #516]	; (8082414 <_Z12outputCOtoPIv+0x218>)
 808220e:	f006 f898 	bl	8088342 <_ZN5Print7printlnEPKc>

    CO_string += String(measurement_number, 0) + ",";
 8082212:	2300      	movs	r3, #0
 8082214:	9300      	str	r3, [sp, #0]
 8082216:	4b80      	ldr	r3, [pc, #512]	; (8082418 <_Z12outputCOtoPIv+0x21c>)
 8082218:	a806      	add	r0, sp, #24
 808221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808221e:	f005 fea8 	bl	8087f72 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8082222:	a906      	add	r1, sp, #24
 8082224:	a80a      	add	r0, sp, #40	; 0x28
 8082226:	f005 fe56 	bl	8087ed6 <_ZN6StringC1ERKS_>
 808222a:	497c      	ldr	r1, [pc, #496]	; (808241c <_Z12outputCOtoPIv+0x220>)
 808222c:	a80a      	add	r0, sp, #40	; 0x28
 808222e:	f005 fef9 	bl	8088024 <_ZplRK15StringSumHelperPKc>
 8082232:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082234:	a802      	add	r0, sp, #8
 8082236:	f005 fec9 	bl	8087fcc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808223a:	a80a      	add	r0, sp, #40	; 0x28
 808223c:	f005 fdc2 	bl	8087dc4 <_ZN6StringD1Ev>
 8082240:	a806      	add	r0, sp, #24
 8082242:	f005 fdbf 	bl	8087dc4 <_ZN6StringD1Ev>
    CO_string += String(CO_float_A, 3) + ",";
 8082246:	4b76      	ldr	r3, [pc, #472]	; (8082420 <_Z12outputCOtoPIv+0x224>)
 8082248:	2203      	movs	r2, #3
 808224a:	6819      	ldr	r1, [r3, #0]
 808224c:	a806      	add	r0, sp, #24
 808224e:	f005 fe79 	bl	8087f44 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8082252:	a906      	add	r1, sp, #24
 8082254:	a80a      	add	r0, sp, #40	; 0x28
 8082256:	f005 fe3e 	bl	8087ed6 <_ZN6StringC1ERKS_>
 808225a:	4970      	ldr	r1, [pc, #448]	; (808241c <_Z12outputCOtoPIv+0x220>)
 808225c:	a80a      	add	r0, sp, #40	; 0x28
 808225e:	f005 fee1 	bl	8088024 <_ZplRK15StringSumHelperPKc>
 8082262:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082264:	a802      	add	r0, sp, #8
 8082266:	f005 feb1 	bl	8087fcc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808226a:	a80a      	add	r0, sp, #40	; 0x28
 808226c:	f005 fdaa 	bl	8087dc4 <_ZN6StringD1Ev>
 8082270:	a806      	add	r0, sp, #24
 8082272:	f005 fda7 	bl	8087dc4 <_ZN6StringD1Ev>
    CO_string += String(CO_float_B, 3) + ",";
 8082276:	4b6b      	ldr	r3, [pc, #428]	; (8082424 <_Z12outputCOtoPIv+0x228>)
 8082278:	2203      	movs	r2, #3
 808227a:	6819      	ldr	r1, [r3, #0]
 808227c:	a806      	add	r0, sp, #24
 808227e:	f005 fe61 	bl	8087f44 <_ZN6StringC1Efi>
	StringSumHelper(const String &s) : String(s) {}
 8082282:	a906      	add	r1, sp, #24
 8082284:	a80a      	add	r0, sp, #40	; 0x28
 8082286:	f005 fe26 	bl	8087ed6 <_ZN6StringC1ERKS_>
 808228a:	4964      	ldr	r1, [pc, #400]	; (808241c <_Z12outputCOtoPIv+0x220>)
 808228c:	a80a      	add	r0, sp, #40	; 0x28
 808228e:	f005 fec9 	bl	8088024 <_ZplRK15StringSumHelperPKc>
 8082292:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082294:	a802      	add	r0, sp, #8
 8082296:	f005 fe99 	bl	8087fcc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 808229a:	a80a      	add	r0, sp, #40	; 0x28
 808229c:	f005 fd92 	bl	8087dc4 <_ZN6StringD1Ev>
 80822a0:	a806      	add	r0, sp, #24
 80822a2:	f005 fd8f 	bl	8087dc4 <_ZN6StringD1Ev>
    if (gps.get_latitude() != 0)
 80822a6:	4860      	ldr	r0, [pc, #384]	; (8082428 <_Z12outputCOtoPIv+0x22c>)
 80822a8:	f002 fef8 	bl	808509c <_ZN3GPS12get_latitudeEv>
 80822ac:	2200      	movs	r2, #0
 80822ae:	2300      	movs	r3, #0
 80822b0:	f008 f868 	bl	808a384 <__aeabi_dcmpeq>
 80822b4:	2800      	cmp	r0, #0
 80822b6:	f040 809c 	bne.w	80823f2 <_Z12outputCOtoPIv+0x1f6>
    {
        if (gps.get_nsIndicator() == 0)
 80822ba:	485b      	ldr	r0, [pc, #364]	; (8082428 <_Z12outputCOtoPIv+0x22c>)
 80822bc:	f002 fefd 	bl	80850ba <_ZN3GPS15get_nsIndicatorEv>
 80822c0:	b918      	cbnz	r0, 80822ca <_Z12outputCOtoPIv+0xce>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80822c2:	495a      	ldr	r1, [pc, #360]	; (808242c <_Z12outputCOtoPIv+0x230>)
 80822c4:	a802      	add	r0, sp, #8
 80822c6:	f005 fe85 	bl	8087fd4 <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_latitude()) + ",";
 80822ca:	4857      	ldr	r0, [pc, #348]	; (8082428 <_Z12outputCOtoPIv+0x22c>)
 80822cc:	f002 fee6 	bl	808509c <_ZN3GPS12get_latitudeEv>
 80822d0:	460b      	mov	r3, r1
 80822d2:	2106      	movs	r1, #6
 80822d4:	4602      	mov	r2, r0
 80822d6:	9100      	str	r1, [sp, #0]
 80822d8:	a806      	add	r0, sp, #24
 80822da:	f005 fe4a 	bl	8087f72 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 80822de:	a906      	add	r1, sp, #24
 80822e0:	a80a      	add	r0, sp, #40	; 0x28
 80822e2:	f005 fdf8 	bl	8087ed6 <_ZN6StringC1ERKS_>
    }
    else
    {
        CO_string += String(geolocation_latitude) + ",";
 80822e6:	494d      	ldr	r1, [pc, #308]	; (808241c <_Z12outputCOtoPIv+0x220>)
 80822e8:	a80a      	add	r0, sp, #40	; 0x28
 80822ea:	f005 fe9b 	bl	8088024 <_ZplRK15StringSumHelperPKc>
 80822ee:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80822f0:	a802      	add	r0, sp, #8
 80822f2:	f005 fe6b 	bl	8087fcc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80822f6:	a80a      	add	r0, sp, #40	; 0x28
 80822f8:	f005 fd64 	bl	8087dc4 <_ZN6StringD1Ev>
 80822fc:	a806      	add	r0, sp, #24
 80822fe:	f005 fd61 	bl	8087dc4 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 8082302:	4849      	ldr	r0, [pc, #292]	; (8082428 <_Z12outputCOtoPIv+0x22c>)
 8082304:	f002 fecf 	bl	80850a6 <_ZN3GPS13get_longitudeEv>
 8082308:	2200      	movs	r2, #0
 808230a:	2300      	movs	r3, #0
 808230c:	f008 f83a 	bl	808a384 <__aeabi_dcmpeq>
 8082310:	2800      	cmp	r0, #0
 8082312:	d173      	bne.n	80823fc <_Z12outputCOtoPIv+0x200>
    {
        if (gps.get_ewIndicator() == 0x01)
 8082314:	4844      	ldr	r0, [pc, #272]	; (8082428 <_Z12outputCOtoPIv+0x22c>)
 8082316:	f002 fed3 	bl	80850c0 <_ZN3GPS15get_ewIndicatorEv>
 808231a:	2801      	cmp	r0, #1
 808231c:	d103      	bne.n	8082326 <_Z12outputCOtoPIv+0x12a>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808231e:	4943      	ldr	r1, [pc, #268]	; (808242c <_Z12outputCOtoPIv+0x230>)
 8082320:	a802      	add	r0, sp, #8
 8082322:	f005 fe57 	bl	8087fd4 <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_longitude()) + ",";
 8082326:	4840      	ldr	r0, [pc, #256]	; (8082428 <_Z12outputCOtoPIv+0x22c>)
 8082328:	f002 febd 	bl	80850a6 <_ZN3GPS13get_longitudeEv>
 808232c:	460b      	mov	r3, r1
 808232e:	2106      	movs	r1, #6
 8082330:	4602      	mov	r2, r0
 8082332:	9100      	str	r1, [sp, #0]
 8082334:	a806      	add	r0, sp, #24
 8082336:	f005 fe1c 	bl	8087f72 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 808233a:	a906      	add	r1, sp, #24
 808233c:	a80a      	add	r0, sp, #40	; 0x28
 808233e:	f005 fdca 	bl	8087ed6 <_ZN6StringC1ERKS_>
    }
    else
    {
        CO_string += String(geolocation_longitude) + ",";
 8082342:	4936      	ldr	r1, [pc, #216]	; (808241c <_Z12outputCOtoPIv+0x220>)
 8082344:	a80a      	add	r0, sp, #40	; 0x28
 8082346:	f005 fe6d 	bl	8088024 <_ZplRK15StringSumHelperPKc>
 808234a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808234c:	a802      	add	r0, sp, #8
 808234e:	f005 fe3d 	bl	8087fcc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 8082352:	a80a      	add	r0, sp, #40	; 0x28
 8082354:	f005 fd36 	bl	8087dc4 <_ZN6StringD1Ev>
 8082358:	a806      	add	r0, sp, #24
 808235a:	f005 fd33 	bl	8087dc4 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 808235e:	4832      	ldr	r0, [pc, #200]	; (8082428 <_Z12outputCOtoPIv+0x22c>)
 8082360:	f002 fea1 	bl	80850a6 <_ZN3GPS13get_longitudeEv>
 8082364:	2200      	movs	r2, #0
 8082366:	2300      	movs	r3, #0
 8082368:	f008 f80c 	bl	808a384 <__aeabi_dcmpeq>
 808236c:	2800      	cmp	r0, #0
 808236e:	d14a      	bne.n	8082406 <_Z12outputCOtoPIv+0x20a>
    {
        CO_string += String(gps.get_horizontalDilution() / 10.0) + ",";
 8082370:	482d      	ldr	r0, [pc, #180]	; (8082428 <_Z12outputCOtoPIv+0x22c>)
 8082372:	f002 fe9d 	bl	80850b0 <_ZN3GPS22get_horizontalDilutionEv>
 8082376:	f007 fd33 	bl	8089de0 <__aeabi_i2d>
 808237a:	2200      	movs	r2, #0
 808237c:	4b2c      	ldr	r3, [pc, #176]	; (8082430 <_Z12outputCOtoPIv+0x234>)
 808237e:	f007 fec3 	bl	808a108 <__aeabi_ddiv>
 8082382:	460b      	mov	r3, r1
 8082384:	2106      	movs	r1, #6
 8082386:	4602      	mov	r2, r0
 8082388:	9100      	str	r1, [sp, #0]
 808238a:	a806      	add	r0, sp, #24
 808238c:	f005 fdf1 	bl	8087f72 <_ZN6StringC1Edi>
	StringSumHelper(const String &s) : String(s) {}
 8082390:	a906      	add	r1, sp, #24
 8082392:	a80a      	add	r0, sp, #40	; 0x28
 8082394:	f005 fd9f 	bl	8087ed6 <_ZN6StringC1ERKS_>
    }
    else
    {
        CO_string += String(geolocation_accuracy) + ",";
 8082398:	4920      	ldr	r1, [pc, #128]	; (808241c <_Z12outputCOtoPIv+0x220>)
 808239a:	a80a      	add	r0, sp, #40	; 0x28
 808239c:	f005 fe42 	bl	8088024 <_ZplRK15StringSumHelperPKc>
 80823a0:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80823a2:	a802      	add	r0, sp, #8
 80823a4:	f005 fe12 	bl	8087fcc <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80823a8:	a80a      	add	r0, sp, #40	; 0x28
 80823aa:	f005 fd0b 	bl	8087dc4 <_ZN6StringD1Ev>
 80823ae:	a806      	add	r0, sp, #24
 80823b0:	f005 fd08 	bl	8087dc4 <_ZN6StringD1Ev>
    }

    CO_string += String(Time.format(systemTime, "%d/%m/%y,%H:%M:%S"));
 80823b4:	4b1f      	ldr	r3, [pc, #124]	; (8082434 <_Z12outputCOtoPIv+0x238>)
 80823b6:	a80a      	add	r0, sp, #40	; 0x28
 80823b8:	9300      	str	r3, [sp, #0]
 80823ba:	4b1f      	ldr	r3, [pc, #124]	; (8082438 <_Z12outputCOtoPIv+0x23c>)
 80823bc:	491f      	ldr	r1, [pc, #124]	; (808243c <_Z12outputCOtoPIv+0x240>)
 80823be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80823c2:	f006 fa73 	bl	80888ac <_ZN9TimeClass6formatExPKc>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80823c6:	a90a      	add	r1, sp, #40	; 0x28
 80823c8:	a802      	add	r0, sp, #8
 80823ca:	f005 fdff 	bl	8087fcc <_ZN6String6concatERKS_>
 80823ce:	a80a      	add	r0, sp, #40	; 0x28
 80823d0:	f005 fcf8 	bl	8087dc4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80823d4:	491a      	ldr	r1, [pc, #104]	; (8082440 <_Z12outputCOtoPIv+0x244>)
 80823d6:	a802      	add	r0, sp, #8
 80823d8:	f005 fdfc 	bl	8087fd4 <_ZN6String6concatEPKc>
    //get a current time string

    CO_string += "\n\r&";
    Serial1.print(CO_string);
 80823dc:	f007 f928 	bl	8089630 <_Z22__fetch_global_Serial1v>
 80823e0:	9902      	ldr	r1, [sp, #8]
 80823e2:	f005 ff9b 	bl	808831c <_ZN5Print5printEPKc>
    String CO_string = "";
 80823e6:	a802      	add	r0, sp, #8
 80823e8:	f005 fcec 	bl	8087dc4 <_ZN6StringD1Ev>
    //send ending delimeter
    //Serial1.print("&");
}
 80823ec:	b00f      	add	sp, #60	; 0x3c
 80823ee:	f85d fb04 	ldr.w	pc, [sp], #4
        CO_string += String(geolocation_latitude) + ",";
 80823f2:	4914      	ldr	r1, [pc, #80]	; (8082444 <_Z12outputCOtoPIv+0x248>)
 80823f4:	a806      	add	r0, sp, #24
 80823f6:	f005 fd2f 	bl	8087e58 <_ZN6StringC1EPKc>
 80823fa:	e770      	b.n	80822de <_Z12outputCOtoPIv+0xe2>
        CO_string += String(geolocation_longitude) + ",";
 80823fc:	4912      	ldr	r1, [pc, #72]	; (8082448 <_Z12outputCOtoPIv+0x24c>)
 80823fe:	a806      	add	r0, sp, #24
 8082400:	f005 fd2a 	bl	8087e58 <_ZN6StringC1EPKc>
 8082404:	e799      	b.n	808233a <_Z12outputCOtoPIv+0x13e>
        CO_string += String(geolocation_accuracy) + ",";
 8082406:	4911      	ldr	r1, [pc, #68]	; (808244c <_Z12outputCOtoPIv+0x250>)
 8082408:	a806      	add	r0, sp, #24
 808240a:	f005 fd25 	bl	8087e58 <_ZN6StringC1EPKc>
 808240e:	e7bf      	b.n	8082390 <_Z12outputCOtoPIv+0x194>
 8082410:	0808eb69 	.word	0x0808eb69
 8082414:	0808cebb 	.word	0x0808cebb
 8082418:	20000738 	.word	0x20000738
 808241c:	0808ce8c 	.word	0x0808ce8c
 8082420:	200002bc 	.word	0x200002bc
 8082424:	200002c0 	.word	0x200002c0
 8082428:	20000668 	.word	0x20000668
 808242c:	0808ced0 	.word	0x0808ced0
 8082430:	40240000 	.word	0x40240000
 8082434:	0808ced2 	.word	0x0808ced2
 8082438:	20001c68 	.word	0x20001c68
 808243c:	20001cf4 	.word	0x20001cf4
 8082440:	0808cee4 	.word	0x0808cee4
 8082444:	200000a6 	.word	0x200000a6
 8082448:	200000b2 	.word	0x200000b2
 808244c:	200000a0 	.word	0x200000a0

08082450 <_Z26serialIncreaseInputCurrentv>:
        Serial.println("Failed writing string");
    }
}

void serialIncreaseInputCurrent(void)
{
 8082450:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8082452:	481d      	ldr	r0, [pc, #116]	; (80824c8 <_Z26serialIncreaseInputCurrentv+0x78>)
 8082454:	f005 fa28 	bl	80878a8 <_ZN4PMIC20getInputCurrentLimitEv>
 8082458:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 808245a:	f006 ffcb 	bl	80893f4 <_Z16_fetch_usbserialv>
 808245e:	462a      	mov	r2, r5
 8082460:	491a      	ldr	r1, [pc, #104]	; (80824cc <_Z26serialIncreaseInputCurrentv+0x7c>)
 8082462:	f7fe fb13 	bl	8080a8c <_ZN5Print6printfEPKcz>

    if (inputCurrent == 100)
 8082466:	2d64      	cmp	r5, #100	; 0x64
 8082468:	d01f      	beq.n	80824aa <_Z26serialIncreaseInputCurrentv+0x5a>
    }
    else if (inputCurrent == 100)
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 150)
 808246a:	2d96      	cmp	r5, #150	; 0x96
 808246c:	d01f      	beq.n	80824ae <_Z26serialIncreaseInputCurrentv+0x5e>
    {
        inputCurrent = 500;
    }
    else if (inputCurrent == 500)
 808246e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8082472:	d01f      	beq.n	80824b4 <_Z26serialIncreaseInputCurrentv+0x64>
    {
        inputCurrent = 900;
    }
    else if (inputCurrent == 900)
 8082474:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8082478:	d01f      	beq.n	80824ba <_Z26serialIncreaseInputCurrentv+0x6a>
    {
        inputCurrent = 1200;
    }
    else if (inputCurrent == 1200)
 808247a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 808247e:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8082482:	d007      	beq.n	8082494 <_Z26serialIncreaseInputCurrentv+0x44>
    {
        inputCurrent = 1500;
    }
    else if (inputCurrent == 1500)
 8082484:	42a5      	cmp	r5, r4
 8082486:	d01b      	beq.n	80824c0 <_Z26serialIncreaseInputCurrentv+0x70>
    {
        inputCurrent = 2000;
    }
    else if (inputCurrent == 2000)
    {
        inputCurrent = 3000;
 8082488:	f640 34b8 	movw	r4, #3000	; 0xbb8
 808248c:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8082490:	bf18      	it	ne
 8082492:	462c      	movne	r4, r5
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 8082494:	b2a1      	uxth	r1, r4
 8082496:	480c      	ldr	r0, [pc, #48]	; (80824c8 <_Z26serialIncreaseInputCurrentv+0x78>)
 8082498:	f005 fa47 	bl	808792a <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 808249c:	f006 ffaa 	bl	80893f4 <_Z16_fetch_usbserialv>
 80824a0:	4622      	mov	r2, r4
 80824a2:	490b      	ldr	r1, [pc, #44]	; (80824d0 <_Z26serialIncreaseInputCurrentv+0x80>)
 80824a4:	f7fe faf2 	bl	8080a8c <_ZN5Print6printfEPKcz>
}
 80824a8:	bd38      	pop	{r3, r4, r5, pc}
        inputCurrent = 150;
 80824aa:	2496      	movs	r4, #150	; 0x96
 80824ac:	e7f2      	b.n	8082494 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 500;
 80824ae:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 80824b2:	e7ef      	b.n	8082494 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 900;
 80824b4:	f44f 7461 	mov.w	r4, #900	; 0x384
 80824b8:	e7ec      	b.n	8082494 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 1200;
 80824ba:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 80824be:	e7e9      	b.n	8082494 <_Z26serialIncreaseInputCurrentv+0x44>
        inputCurrent = 2000;
 80824c0:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
 80824c4:	e7e6      	b.n	8082494 <_Z26serialIncreaseInputCurrentv+0x44>
 80824c6:	bf00      	nop
 80824c8:	20000768 	.word	0x20000768
 80824cc:	0808cee8 	.word	0x0808cee8
 80824d0:	0808cf06 	.word	0x0808cf06

080824d4 <_Z27serialIncreaseChargeCurrentv>:

void serialIncreaseChargeCurrent(void)
{
 80824d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 80824d6:	482d      	ldr	r0, [pc, #180]	; (808258c <_Z27serialIncreaseChargeCurrentv+0xb8>)
 80824d8:	f005 f9f2 	bl	80878c0 <_ZN4PMIC16getChargeCurrentEv>
    //bit 7
    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
 80824dc:	f010 0f80 	tst.w	r0, #128	; 0x80
 80824e0:	bf14      	ite	ne
 80824e2:	f44f 6500 	movne.w	r5, #2048	; 0x800
 80824e6:	2500      	moveq	r5, #0
    byte chargeCurrent = pmic.getChargeCurrent();
 80824e8:	4604      	mov	r4, r0
    }
    //bit 6
    if (chargeCurrent & 0x40)
 80824ea:	0643      	lsls	r3, r0, #25
    {
        total_current += 1024;
 80824ec:	bf48      	it	mi
 80824ee:	f505 6580 	addmi.w	r5, r5, #1024	; 0x400
    }
    //bit 5
    if (chargeCurrent & 0x20)
 80824f2:	0686      	lsls	r6, r0, #26
    {
        total_current += 512;
 80824f4:	bf48      	it	mi
 80824f6:	f505 7500 	addmi.w	r5, r5, #512	; 0x200
    }
    //bit 4
    if (chargeCurrent & 0x10) {
 80824fa:	06e0      	lsls	r0, r4, #27
        total_current += 256;
 80824fc:	bf48      	it	mi
 80824fe:	f505 7580 	addmi.w	r5, r5, #256	; 0x100
    }
    //bit 3
    if (chargeCurrent & 0x08)
 8082502:	0721      	lsls	r1, r4, #28
    {
        total_current += 128;
 8082504:	bf48      	it	mi
 8082506:	3580      	addmi	r5, #128	; 0x80
    }
    //bit 2
    if (chargeCurrent & 0x04)
 8082508:	0762      	lsls	r2, r4, #29
    {
        total_current += 64;
 808250a:	bf48      	it	mi
 808250c:	3540      	addmi	r5, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 808250e:	f006 ff71 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082512:	462a      	mov	r2, r5
 8082514:	491e      	ldr	r1, [pc, #120]	; (8082590 <_Z27serialIncreaseChargeCurrentv+0xbc>)
 8082516:	f7fe fab9 	bl	8080a8c <_ZN5Print6printfEPKcz>
    chargeCurrent += 4;
 808251a:	1d20      	adds	r0, r4, #4
    total_current = 0;

    if (chargeCurrent & 0x80)
 808251c:	0603      	lsls	r3, r0, #24
    bool bit7 = 0;
 808251e:	bf56      	itet	pl
 8082520:	2100      	movpl	r1, #0
    {
        total_current += 2048;
 8082522:	f44f 6500 	movmi.w	r5, #2048	; 0x800
    total_current = 0;
 8082526:	460d      	movpl	r5, r1
    chargeCurrent += 4;
 8082528:	b2c4      	uxtb	r4, r0
        bit7 = 1;
 808252a:	bf48      	it	mi
 808252c:	2101      	movmi	r1, #1
    }
    //bit 6
    if (chargeCurrent & 0x40)
 808252e:	f014 0240 	ands.w	r2, r4, #64	; 0x40
    {
        total_current += 1024;
 8082532:	bf1c      	itt	ne
 8082534:	f505 6580 	addne.w	r5, r5, #1024	; 0x400
        bit6 = 1;
 8082538:	2201      	movne	r2, #1
    }
    //bit 5
    if (chargeCurrent & 0x20)
 808253a:	f014 0320 	ands.w	r3, r4, #32
    {
        total_current += 512;
        bit5 = 1;
 808253e:	bf1c      	itt	ne
 8082540:	2301      	movne	r3, #1
        total_current += 512;
 8082542:	f505 7500 	addne.w	r5, r5, #512	; 0x200
    }
    //bit 4
    if (chargeCurrent & 0x10)
 8082546:	f014 0010 	ands.w	r0, r4, #16
    {
        total_current += 256;
 808254a:	bf1c      	itt	ne
 808254c:	f505 7580 	addne.w	r5, r5, #256	; 0x100
        bit4 = 1;
 8082550:	2001      	movne	r0, #1
    }
    //bit 3
    if (chargeCurrent & 0x08)
 8082552:	f014 0608 	ands.w	r6, r4, #8
    {
        total_current += 128;
 8082556:	bf1c      	itt	ne
 8082558:	3580      	addne	r5, #128	; 0x80
        bit3 = 1;
 808255a:	2601      	movne	r6, #1
    }
    //bit 2
    if (chargeCurrent & 0x04)
 808255c:	f014 0404 	ands.w	r4, r4, #4
    {
        total_current += 64;
        bit2 = 1;
 8082560:	bf18      	it	ne
 8082562:	2401      	movne	r4, #1
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8082564:	9000      	str	r0, [sp, #0]
 8082566:	e9cd 6401 	strd	r6, r4, [sp, #4]
 808256a:	4808      	ldr	r0, [pc, #32]	; (808258c <_Z27serialIncreaseChargeCurrentv+0xb8>)
        total_current += 64;
 808256c:	bf18      	it	ne
 808256e:	3540      	addne	r5, #64	; 0x40
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8082570:	f005 fa39 	bl	80879e6 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8082574:	4805      	ldr	r0, [pc, #20]	; (808258c <_Z27serialIncreaseChargeCurrentv+0xb8>)
 8082576:	f005 f9a3 	bl	80878c0 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 808257a:	f006 ff3b 	bl	80893f4 <_Z16_fetch_usbserialv>
 808257e:	462a      	mov	r2, r5
 8082580:	4904      	ldr	r1, [pc, #16]	; (8082594 <_Z27serialIncreaseChargeCurrentv+0xc0>)
 8082582:	f7fe fa83 	bl	8080a8c <_ZN5Print6printfEPKcz>
}
 8082586:	b004      	add	sp, #16
 8082588:	bd70      	pop	{r4, r5, r6, pc}
 808258a:	bf00      	nop
 808258c:	20000768 	.word	0x20000768
 8082590:	0808cf24 	.word	0x0808cf24
 8082594:	0808cf4d 	.word	0x0808cf4d

08082598 <_Z24serialGetWifiCredentialsv>:

void serialGetWifiCredentials(void)
{
 8082598:	b530      	push	{r4, r5, lr}
        operator const char*() const { return c_str(); }
 808259a:	4d5a      	ldr	r5, [pc, #360]	; (8082704 <_Z24serialGetWifiCredentialsv+0x16c>)
 808259c:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 808259e:	f006 ff29 	bl	80893f4 <_Z16_fetch_usbserialv>
 80825a2:	4959      	ldr	r1, [pc, #356]	; (8082708 <_Z24serialGetWifiCredentialsv+0x170>)
 80825a4:	f005 feba 	bl	808831c <_ZN5Print5printEPKc>
 80825a8:	4c58      	ldr	r4, [pc, #352]	; (808270c <_Z24serialGetWifiCredentialsv+0x174>)
    Serial.println(ssid);
 80825aa:	f006 ff23 	bl	80893f4 <_Z16_fetch_usbserialv>
 80825ae:	6829      	ldr	r1, [r5, #0]
 80825b0:	f005 fec7 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 80825b4:	f006 ff1e 	bl	80893f4 <_Z16_fetch_usbserialv>
 80825b8:	4955      	ldr	r1, [pc, #340]	; (8082710 <_Z24serialGetWifiCredentialsv+0x178>)
 80825ba:	f005 feaf 	bl	808831c <_ZN5Print5printEPKc>
    Serial.println(password);
 80825be:	f006 ff19 	bl	80893f4 <_Z16_fetch_usbserialv>
 80825c2:	6821      	ldr	r1, [r4, #0]
 80825c4:	f005 febd 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 80825c8:	f006 ff14 	bl	80893f4 <_Z16_fetch_usbserialv>
 80825cc:	4951      	ldr	r1, [pc, #324]	; (8082714 <_Z24serialGetWifiCredentialsv+0x17c>)
 80825ce:	f005 feb8 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80825d2:	f006 ff0f 	bl	80893f4 <_Z16_fetch_usbserialv>
 80825d6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80825da:	f006 f805 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80825de:	f006 ff09 	bl	80893f4 <_Z16_fetch_usbserialv>
 80825e2:	220d      	movs	r2, #13
 80825e4:	4601      	mov	r1, r0
 80825e6:	4668      	mov	r0, sp
 80825e8:	f006 f814 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    if (tempString.equals("bould"))
 80825ec:	4668      	mov	r0, sp
 80825ee:	494a      	ldr	r1, [pc, #296]	; (8082718 <_Z24serialGetWifiCredentialsv+0x180>)
 80825f0:	f005 fd2c 	bl	808804c <_ZNK6String6equalsEPKc>
 80825f4:	2800      	cmp	r0, #0
 80825f6:	d074      	beq.n	80826e2 <_Z24serialGetWifiCredentialsv+0x14a>
    {
        Serial.println("Password correct!");
 80825f8:	f006 fefc 	bl	80893f4 <_Z16_fetch_usbserialv>
 80825fc:	4947      	ldr	r1, [pc, #284]	; (808271c <_Z24serialGetWifiCredentialsv+0x184>)
 80825fe:	f005 fea0 	bl	8088342 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 8082602:	f006 fef7 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082606:	4946      	ldr	r1, [pc, #280]	; (8082720 <_Z24serialGetWifiCredentialsv+0x188>)
 8082608:	f005 fe9b 	bl	8088342 <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 808260c:	f006 fef2 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082610:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082614:	f005 ffe8 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 8082618:	f006 feec 	bl	80893f4 <_Z16_fetch_usbserialv>
 808261c:	220d      	movs	r2, #13
 808261e:	4601      	mov	r1, r0
 8082620:	a804      	add	r0, sp, #16
 8082622:	f005 fff7 	bl	8088614 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 8082626:	f006 fee5 	bl	80893f4 <_Z16_fetch_usbserialv>
 808262a:	493e      	ldr	r1, [pc, #248]	; (8082724 <_Z24serialGetWifiCredentialsv+0x18c>)
 808262c:	f005 fe76 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 8082630:	f006 fee0 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082634:	9904      	ldr	r1, [sp, #16]
 8082636:	f005 fe84 	bl	8088342 <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 808263a:	f006 fedb 	bl	80893f4 <_Z16_fetch_usbserialv>
 808263e:	493a      	ldr	r1, [pc, #232]	; (8082728 <_Z24serialGetWifiCredentialsv+0x190>)
 8082640:	f005 fe7f 	bl	8088342 <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 8082644:	f006 fed6 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082648:	220d      	movs	r2, #13
 808264a:	4601      	mov	r1, r0
 808264c:	a808      	add	r0, sp, #32
 808264e:	f005 ffe1 	bl	8088614 <_ZN6Stream15readStringUntilEc>
        if (ok.equals("y"))
 8082652:	4936      	ldr	r1, [pc, #216]	; (808272c <_Z24serialGetWifiCredentialsv+0x194>)
 8082654:	a808      	add	r0, sp, #32
 8082656:	f005 fcf9 	bl	808804c <_ZNK6String6equalsEPKc>
 808265a:	2800      	cmp	r0, #0
 808265c:	d04c      	beq.n	80826f8 <_Z24serialGetWifiCredentialsv+0x160>
        {
            Serial.println("Saving new ssid");
 808265e:	f006 fec9 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082662:	4933      	ldr	r1, [pc, #204]	; (8082730 <_Z24serialGetWifiCredentialsv+0x198>)
 8082664:	f005 fe6d 	bl	8088342 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082668:	a904      	add	r1, sp, #16
 808266a:	4628      	mov	r0, r5
 808266c:	f005 fc24 	bl	8087eb8 <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8082670:	f006 fec0 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082674:	492f      	ldr	r1, [pc, #188]	; (8082734 <_Z24serialGetWifiCredentialsv+0x19c>)
 8082676:	f005 fe64 	bl	8088342 <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 808267a:	f006 febb 	bl	80893f4 <_Z16_fetch_usbserialv>
 808267e:	220d      	movs	r2, #13
 8082680:	4601      	mov	r1, r0
 8082682:	a80c      	add	r0, sp, #48	; 0x30
 8082684:	f005 ffc6 	bl	8088614 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 8082688:	f006 feb4 	bl	80893f4 <_Z16_fetch_usbserialv>
 808268c:	492a      	ldr	r1, [pc, #168]	; (8082738 <_Z24serialGetWifiCredentialsv+0x1a0>)
 808268e:	f005 fe45 	bl	808831c <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 8082692:	f006 feaf 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082696:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082698:	f005 fe53 	bl	8088342 <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 808269c:	f006 feaa 	bl	80893f4 <_Z16_fetch_usbserialv>
 80826a0:	220d      	movs	r2, #13
 80826a2:	4601      	mov	r1, r0
 80826a4:	a810      	add	r0, sp, #64	; 0x40
 80826a6:	f005 ffb5 	bl	8088614 <_ZN6Stream15readStringUntilEc>
            if (ok.equals("y"))
 80826aa:	4920      	ldr	r1, [pc, #128]	; (808272c <_Z24serialGetWifiCredentialsv+0x194>)
 80826ac:	a810      	add	r0, sp, #64	; 0x40
 80826ae:	f005 fccd 	bl	808804c <_ZNK6String6equalsEPKc>
 80826b2:	b1d8      	cbz	r0, 80826ec <_Z24serialGetWifiCredentialsv+0x154>
            {
                Serial.println("Saving new password");
 80826b4:	f006 fe9e 	bl	80893f4 <_Z16_fetch_usbserialv>
 80826b8:	4920      	ldr	r1, [pc, #128]	; (808273c <_Z24serialGetWifiCredentialsv+0x1a4>)
 80826ba:	f005 fe42 	bl	8088342 <_ZN5Print7printlnEPKc>
                password = tempPassword;
 80826be:	a90c      	add	r1, sp, #48	; 0x30
 80826c0:	4620      	mov	r0, r4
 80826c2:	f005 fbf9 	bl	8087eb8 <_ZN6StringaSERKS_>
                sendWifiInfo();
 80826c6:	f7ff fcc5 	bl	8082054 <_Z12sendWifiInfov>
            String ok = Serial.readStringUntil('\r');
 80826ca:	a810      	add	r0, sp, #64	; 0x40
 80826cc:	f005 fb7a 	bl	8087dc4 <_ZN6StringD1Ev>
            String tempPassword = Serial.readStringUntil('\r');
 80826d0:	a80c      	add	r0, sp, #48	; 0x30
 80826d2:	f005 fb77 	bl	8087dc4 <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
 80826d6:	a808      	add	r0, sp, #32
 80826d8:	f005 fb74 	bl	8087dc4 <_ZN6StringD1Ev>
        String tempSsid = Serial.readStringUntil('\r');
 80826dc:	a804      	add	r0, sp, #16
 80826de:	f005 fb71 	bl	8087dc4 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80826e2:	4668      	mov	r0, sp
 80826e4:	f005 fb6e 	bl	8087dc4 <_ZN6StringD1Ev>
        {
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 80826e8:	b015      	add	sp, #84	; 0x54
 80826ea:	bd30      	pop	{r4, r5, pc}
                Serial.println("okay, no problem\n\r");
 80826ec:	f006 fe82 	bl	80893f4 <_Z16_fetch_usbserialv>
 80826f0:	4913      	ldr	r1, [pc, #76]	; (8082740 <_Z24serialGetWifiCredentialsv+0x1a8>)
 80826f2:	f005 fe26 	bl	8088342 <_ZN5Print7printlnEPKc>
 80826f6:	e7e8      	b.n	80826ca <_Z24serialGetWifiCredentialsv+0x132>
            Serial.println("okay, no problem\n\r");
 80826f8:	f006 fe7c 	bl	80893f4 <_Z16_fetch_usbserialv>
 80826fc:	4910      	ldr	r1, [pc, #64]	; (8082740 <_Z24serialGetWifiCredentialsv+0x1a8>)
 80826fe:	f005 fe20 	bl	8088342 <_ZN5Print7printlnEPKc>
 8082702:	e7e8      	b.n	80826d6 <_Z24serialGetWifiCredentialsv+0x13e>
 8082704:	20001c50 	.word	0x20001c50
 8082708:	0808cf6b 	.word	0x0808cf6b
 808270c:	20000758 	.word	0x20000758
 8082710:	0808cf81 	.word	0x0808cf81
 8082714:	0808cf9b 	.word	0x0808cf9b
 8082718:	0808cfcd 	.word	0x0808cfcd
 808271c:	0808cfd3 	.word	0x0808cfd3
 8082720:	0808cfe5 	.word	0x0808cfe5
 8082724:	0808cff5 	.word	0x0808cff5
 8082728:	0808d00d 	.word	0x0808d00d
 808272c:	0808d739 	.word	0x0808d739
 8082730:	0808d023 	.word	0x0808d023
 8082734:	0808d033 	.word	0x0808d033
 8082738:	0808d046 	.word	0x0808d046
 808273c:	0808d062 	.word	0x0808d062
 8082740:	0808d076 	.word	0x0808d076

08082744 <_Z26serialSetSensibleIotEnablev>:

void serialSetSensibleIotEnable(void)
{
 8082744:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 8082746:	f006 fe55 	bl	80893f4 <_Z16_fetch_usbserialv>
 808274a:	4919      	ldr	r1, [pc, #100]	; (80827b0 <_Z26serialSetSensibleIotEnablev+0x6c>)
 808274c:	f005 fdf9 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082750:	f006 fe50 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082754:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082758:	f005 ff46 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808275c:	f006 fe4a 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082760:	220d      	movs	r2, #13
 8082762:	4601      	mov	r1, r0
 8082764:	4668      	mov	r0, sp
 8082766:	f005 ff55 	bl	8088614 <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808276a:	4668      	mov	r0, sp
 808276c:	4911      	ldr	r1, [pc, #68]	; (80827b4 <_Z26serialSetSensibleIotEnablev+0x70>)
 808276e:	f005 fc6d 	bl	808804c <_ZNK6String6equalsEPKc>
    if (tempString == "imsensible")
 8082772:	b1b8      	cbz	r0, 80827a4 <_Z26serialSetSensibleIotEnablev+0x60>
    {
        Serial.println("Password correct!");
 8082774:	f006 fe3e 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082778:	490f      	ldr	r1, [pc, #60]	; (80827b8 <_Z26serialSetSensibleIotEnablev+0x74>)
 808277a:	f005 fde2 	bl	8088342 <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
 808277e:	f006 fe39 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082782:	490e      	ldr	r1, [pc, #56]	; (80827bc <_Z26serialSetSensibleIotEnablev+0x78>)
 8082784:	f005 fddd 	bl	8088342 <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082788:	2301      	movs	r3, #1
 808278a:	4c0d      	ldr	r4, [pc, #52]	; (80827c0 <_Z26serialSetSensibleIotEnablev+0x7c>)
 808278c:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 808278e:	f007 f921 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8082792:	4621      	mov	r1, r4
 8082794:	208c      	movs	r0, #140	; 0x8c
 8082796:	f7fe f947 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 808279a:	4668      	mov	r0, sp
 808279c:	f005 fb12 	bl	8087dc4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 80827a0:	b004      	add	sp, #16
 80827a2:	bd10      	pop	{r4, pc}
        Serial.println("\n\rIncorrect password!");
 80827a4:	f006 fe26 	bl	80893f4 <_Z16_fetch_usbserialv>
 80827a8:	4906      	ldr	r1, [pc, #24]	; (80827c4 <_Z26serialSetSensibleIotEnablev+0x80>)
 80827aa:	f005 fdca 	bl	8088342 <_ZN5Print7printlnEPKc>
 80827ae:	e7f4      	b.n	808279a <_Z26serialSetSensibleIotEnablev+0x56>
 80827b0:	0808d089 	.word	0x0808d089
 80827b4:	0808d0cc 	.word	0x0808d0cc
 80827b8:	0808cfd3 	.word	0x0808cfd3
 80827bc:	0808d0d7 	.word	0x0808d0d7
 80827c0:	20000c18 	.word	0x20000c18
 80827c4:	0808d0f8 	.word	0x0808d0f8

080827c8 <_Z19serialResetSettingsv>:
        Serial.println("\n\rIncorrect password!");
    }
}

void serialResetSettings(void)
{
 80827c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println();
 80827ca:	f006 fe13 	bl	80893f4 <_Z16_fetch_usbserialv>
 80827ce:	f005 fdac 	bl	808832a <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 80827d2:	f006 fe0f 	bl	80893f4 <_Z16_fetch_usbserialv>
 80827d6:	4914      	ldr	r1, [pc, #80]	; (8082828 <_Z19serialResetSettingsv+0x60>)
 80827d8:	f005 fdb3 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80827dc:	f006 fe0a 	bl	80893f4 <_Z16_fetch_usbserialv>
 80827e0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80827e4:	f005 ff00 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80827e8:	f006 fe04 	bl	80893f4 <_Z16_fetch_usbserialv>
 80827ec:	220d      	movs	r2, #13
 80827ee:	4601      	mov	r1, r0
 80827f0:	4668      	mov	r0, sp
 80827f2:	f005 ff0f 	bl	8088614 <_ZN6Stream15readStringUntilEc>
 80827f6:	4668      	mov	r0, sp
 80827f8:	490c      	ldr	r1, [pc, #48]	; (808282c <_Z19serialResetSettingsv+0x64>)
 80827fa:	f005 fc27 	bl	808804c <_ZNK6String6equalsEPKc>

    if (tempString == "bould")
 80827fe:	b160      	cbz	r0, 808281a <_Z19serialResetSettingsv+0x52>
    {
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8082800:	f006 fdf8 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082804:	490a      	ldr	r1, [pc, #40]	; (8082830 <_Z19serialResetSettingsv+0x68>)
 8082806:	f005 fd9c 	bl	8088342 <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 808280a:	f7fe fa2f 	bl	8080c6c <_Z20writeDefaultSettingsv>
    String tempString = Serial.readStringUntil('\r');
 808280e:	4668      	mov	r0, sp
 8082810:	f005 fad8 	bl	8087dc4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082814:	b005      	add	sp, #20
 8082816:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rIncorrect password!");
 808281a:	f006 fdeb 	bl	80893f4 <_Z16_fetch_usbserialv>
 808281e:	4905      	ldr	r1, [pc, #20]	; (8082834 <_Z19serialResetSettingsv+0x6c>)
 8082820:	f005 fd8f 	bl	8088342 <_ZN5Print7printlnEPKc>
 8082824:	e7f3      	b.n	808280e <_Z19serialResetSettingsv+0x46>
 8082826:	bf00      	nop
 8082828:	0808d10e 	.word	0x0808d10e
 808282c:	0808cfcd 	.word	0x0808cfcd
 8082830:	0808d147 	.word	0x0808d147
 8082834:	0808d0f8 	.word	0x0808d0f8

08082838 <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void)
{
 8082838:	b510      	push	{r4, lr}
 808283a:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 808283c:	f006 fdda 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082840:	4920      	ldr	r1, [pc, #128]	; (80828c4 <_Z17serialGetTimeDatev+0x8c>)
 8082842:	f005 fd7e 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082846:	f006 fdd5 	bl	80893f4 <_Z16_fetch_usbserialv>
 808284a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808284e:	f005 fecb 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082852:	f006 fdcf 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082856:	220d      	movs	r2, #13
 8082858:	4601      	mov	r1, r0
 808285a:	4668      	mov	r0, sp
 808285c:	f005 feda 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082860:	4668      	mov	r0, sp
 8082862:	f005 fd0e 	bl	8088282 <_ZNK6String5toIntEv>
 8082866:	4604      	mov	r4, r0
    Serial.println("");
 8082868:	f006 fdc4 	bl	80893f4 <_Z16_fetch_usbserialv>
 808286c:	4916      	ldr	r1, [pc, #88]	; (80828c8 <_Z17serialGetTimeDatev+0x90>)
 808286e:	f005 fd68 	bl	8088342 <_ZN5Print7printlnEPKc>

    //min is the year 2000, max is the year 2100
    if (tempValue > 966012661 && tempValue < 4121686261)
 8082872:	4b16      	ldr	r3, [pc, #88]	; (80828cc <_Z17serialGetTimeDatev+0x94>)
 8082874:	429c      	cmp	r4, r3
 8082876:	dd1e      	ble.n	80828b6 <_Z17serialGetTimeDatev+0x7e>
    {
        Time.setTime(tempValue);
 8082878:	17e1      	asrs	r1, r4, #31
 808287a:	4620      	mov	r0, r4
 808287c:	f005 ff5e 	bl	808873c <_ZN9TimeClass7setTimeEx>
        Serial.print("\n\rNew Device Time:");
 8082880:	f006 fdb8 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082884:	4912      	ldr	r1, [pc, #72]	; (80828d0 <_Z17serialGetTimeDatev+0x98>)
 8082886:	f005 fd49 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 808288a:	f006 fdb3 	bl	80893f4 <_Z16_fetch_usbserialv>
 808288e:	4604      	mov	r4, r0
 8082890:	f006 f86b 	bl	808896a <_ZN9TimeClass3nowEv>
 8082894:	4602      	mov	r2, r0
 8082896:	17c3      	asrs	r3, r0, #31
 8082898:	a804      	add	r0, sp, #16
 808289a:	f005 ff63 	bl	8088764 <_ZN9TimeClass7timeStrEx>
 808289e:	4620      	mov	r0, r4
 80828a0:	9904      	ldr	r1, [sp, #16]
 80828a2:	f005 fd4e 	bl	8088342 <_ZN5Print7printlnEPKc>
 80828a6:	a804      	add	r0, sp, #16
 80828a8:	f005 fa8c 	bl	8087dc4 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80828ac:	4668      	mov	r0, sp
 80828ae:	f005 fa89 	bl	8087dc4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80828b2:	b008      	add	sp, #32
 80828b4:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 80828b6:	f006 fd9d 	bl	80893f4 <_Z16_fetch_usbserialv>
 80828ba:	4906      	ldr	r1, [pc, #24]	; (80828d4 <_Z17serialGetTimeDatev+0x9c>)
 80828bc:	f005 fd41 	bl	8088342 <_ZN5Print7printlnEPKc>
 80828c0:	e7f4      	b.n	80828ac <_Z17serialGetTimeDatev+0x74>
 80828c2:	bf00      	nop
 80828c4:	0808d1b6 	.word	0x0808d1b6
 80828c8:	0808eb69 	.word	0x0808eb69
 80828cc:	39942ef5 	.word	0x39942ef5
 80828d0:	0808d1f1 	.word	0x0808d1f1
 80828d4:	0808d204 	.word	0x0808d204

080828d8 <_Z17serialGetCo2Slopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Slope(void)
{
 80828d8:	b530      	push	{r4, r5, lr}
 80828da:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80828dc:	f006 fd8a 	bl	80893f4 <_Z16_fetch_usbserialv>
 80828e0:	f005 fd23 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 80828e4:	f006 fd86 	bl	80893f4 <_Z16_fetch_usbserialv>
 80828e8:	4932      	ldr	r1, [pc, #200]	; (80829b4 <_Z17serialGetCo2Slopev+0xdc>)
 80828ea:	f005 fd17 	bl	808831c <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 80828ee:	f006 fd81 	bl	80893f4 <_Z16_fetch_usbserialv>
 80828f2:	4604      	mov	r4, r0
 80828f4:	4d30      	ldr	r5, [pc, #192]	; (80829b8 <_Z17serialGetCo2Slopev+0xe0>)
 80828f6:	2202      	movs	r2, #2
 80828f8:	6829      	ldr	r1, [r5, #0]
 80828fa:	a806      	add	r0, sp, #24
 80828fc:	f005 fb22 	bl	8087f44 <_ZN6StringC1Efi>
 8082900:	9906      	ldr	r1, [sp, #24]
 8082902:	4620      	mov	r0, r4
 8082904:	f005 fd0a 	bl	808831c <_ZN5Print5printEPKc>
 8082908:	a806      	add	r0, sp, #24
 808290a:	f005 fa5b 	bl	8087dc4 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 808290e:	f006 fd71 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082912:	492a      	ldr	r1, [pc, #168]	; (80829bc <_Z17serialGetCo2Slopev+0xe4>)
 8082914:	f005 fd15 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 8082918:	f006 fd6c 	bl	80893f4 <_Z16_fetch_usbserialv>
 808291c:	4928      	ldr	r1, [pc, #160]	; (80829c0 <_Z17serialGetCo2Slopev+0xe8>)
 808291e:	f005 fcfd 	bl	808831c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082922:	f006 fd67 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082926:	f24c 3150 	movw	r1, #50000	; 0xc350
 808292a:	f005 fe5d 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808292e:	f006 fd61 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082932:	220d      	movs	r2, #13
 8082934:	4601      	mov	r1, r0
 8082936:	a802      	add	r0, sp, #8
 8082938:	f005 fe6c 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 808293c:	a802      	add	r0, sp, #8
 808293e:	f005 fca5 	bl	808828c <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10.0)
 8082942:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082946:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 10.0)
 8082948:	f008 f8bc 	bl	808aac4 <__aeabi_fcmpge>
 808294c:	b358      	cbz	r0, 80829a6 <_Z17serialGetCo2Slopev+0xce>
 808294e:	4620      	mov	r0, r4
 8082950:	491c      	ldr	r1, [pc, #112]	; (80829c4 <_Z17serialGetCo2Slopev+0xec>)
 8082952:	f008 f8a3 	bl	808aa9c <__aeabi_fcmplt>
 8082956:	b330      	cbz	r0, 80829a6 <_Z17serialGetCo2Slopev+0xce>
    {
        CO2_slope = tempfloat;
        tempfloat *= 100;
 8082958:	491b      	ldr	r1, [pc, #108]	; (80829c8 <_Z17serialGetCo2Slopev+0xf0>)
 808295a:	4620      	mov	r0, r4
        CO2_slope = tempfloat;
 808295c:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 808295e:	f007 feff 	bl	808a760 <__aeabi_fmul>
        tempValue = tempfloat;
 8082962:	f008 f8c3 	bl	808aaec <__aeabi_f2iz>
 8082966:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8082968:	f006 fd44 	bl	80893f4 <_Z16_fetch_usbserialv>
 808296c:	4917      	ldr	r1, [pc, #92]	; (80829cc <_Z17serialGetCo2Slopev+0xf4>)
 808296e:	f005 fcd5 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope, 2));
 8082972:	f006 fd3f 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082976:	4604      	mov	r4, r0
 8082978:	2202      	movs	r2, #2
 808297a:	6829      	ldr	r1, [r5, #0]
 808297c:	a806      	add	r0, sp, #24
 808297e:	f005 fae1 	bl	8087f44 <_ZN6StringC1Efi>
 8082982:	9906      	ldr	r1, [sp, #24]
 8082984:	4620      	mov	r0, r4
 8082986:	f005 fcdc 	bl	8088342 <_ZN5Print7printlnEPKc>
 808298a:	a806      	add	r0, sp, #24
 808298c:	f005 fa1a 	bl	8087dc4 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8082990:	f007 f820 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8082994:	2008      	movs	r0, #8
 8082996:	a901      	add	r1, sp, #4
 8082998:	f7fe f846 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 808299c:	a802      	add	r0, sp, #8
 808299e:	f005 fa11 	bl	8087dc4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80829a2:	b00b      	add	sp, #44	; 0x2c
 80829a4:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 80829a6:	f006 fd25 	bl	80893f4 <_Z16_fetch_usbserialv>
 80829aa:	4909      	ldr	r1, [pc, #36]	; (80829d0 <_Z17serialGetCo2Slopev+0xf8>)
 80829ac:	f005 fcc9 	bl	8088342 <_ZN5Print7printlnEPKc>
 80829b0:	e7f4      	b.n	808299c <_Z17serialGetCo2Slopev+0xc4>
 80829b2:	bf00      	nop
 80829b4:	0808d215 	.word	0x0808d215
 80829b8:	200002b4 	.word	0x200002b4
 80829bc:	0808d228 	.word	0x0808d228
 80829c0:	0808d22d 	.word	0x0808d22d
 80829c4:	41200000 	.word	0x41200000
 80829c8:	42c80000 	.word	0x42c80000
 80829cc:	0808d243 	.word	0x0808d243
 80829d0:	0808d204 	.word	0x0808d204
 80829d4:	00000000 	.word	0x00000000

080829d8 <_Z16serialGetCoSlopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoSlope(void)
{
 80829d8:	b530      	push	{r4, r5, lr}
 80829da:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80829dc:	f006 fd0a 	bl	80893f4 <_Z16_fetch_usbserialv>
 80829e0:	f005 fca3 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 80829e4:	f006 fd06 	bl	80893f4 <_Z16_fetch_usbserialv>
 80829e8:	4937      	ldr	r1, [pc, #220]	; (8082ac8 <_Z16serialGetCoSlopev+0xf0>)
 80829ea:	f005 fc97 	bl	808831c <_ZN5Print5printEPKc>
    Serial.print(String(CO_slopeA, 2));
 80829ee:	f006 fd01 	bl	80893f4 <_Z16_fetch_usbserialv>
 80829f2:	4604      	mov	r4, r0
 80829f4:	4d35      	ldr	r5, [pc, #212]	; (8082acc <_Z16serialGetCoSlopev+0xf4>)
 80829f6:	2202      	movs	r2, #2
 80829f8:	6829      	ldr	r1, [r5, #0]
 80829fa:	a806      	add	r0, sp, #24
 80829fc:	f005 faa2 	bl	8087f44 <_ZN6StringC1Efi>
 8082a00:	9906      	ldr	r1, [sp, #24]
 8082a02:	4620      	mov	r0, r4
 8082a04:	f005 fc8a 	bl	808831c <_ZN5Print5printEPKc>
 8082a08:	a806      	add	r0, sp, #24
 8082a0a:	f005 f9db 	bl	8087dc4 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082a0e:	f006 fcf1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082a12:	492f      	ldr	r1, [pc, #188]	; (8082ad0 <_Z16serialGetCoSlopev+0xf8>)
 8082a14:	f005 fc95 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8082a18:	f006 fcec 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082a1c:	492d      	ldr	r1, [pc, #180]	; (8082ad4 <_Z16serialGetCoSlopev+0xfc>)
 8082a1e:	f005 fc7d 	bl	808831c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082a22:	f006 fce7 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082a26:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082a2a:	f005 fddd 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082a2e:	f006 fce1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082a32:	220d      	movs	r2, #13
 8082a34:	4601      	mov	r1, r0
 8082a36:	a802      	add	r0, sp, #8
 8082a38:	f005 fdec 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082a3c:	a802      	add	r0, sp, #8
 8082a3e:	f005 fc25 	bl	808828c <_ZNK6String7toFloatEv>
 8082a42:	4604      	mov	r4, r0
    int tempValue;

    if (tempfloat >= 0.1 && tempfloat < 2.0)
 8082a44:	f007 f9de 	bl	8089e04 <__aeabi_f2d>
 8082a48:	a31d      	add	r3, pc, #116	; (adr r3, 8082ac0 <_Z16serialGetCoSlopev+0xe8>)
 8082a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082a4e:	f007 fcb7 	bl	808a3c0 <__aeabi_dcmpge>
 8082a52:	b360      	cbz	r0, 8082aae <_Z16serialGetCoSlopev+0xd6>
 8082a54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8082a58:	4620      	mov	r0, r4
 8082a5a:	f008 f81f 	bl	808aa9c <__aeabi_fcmplt>
 8082a5e:	b330      	cbz	r0, 8082aae <_Z16serialGetCoSlopev+0xd6>
    {
        CO_slopeA = tempfloat;
        tempfloat *= 100;
 8082a60:	491d      	ldr	r1, [pc, #116]	; (8082ad8 <_Z16serialGetCoSlopev+0x100>)
 8082a62:	4620      	mov	r0, r4
        CO_slopeA = tempfloat;
 8082a64:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082a66:	f007 fe7b 	bl	808a760 <__aeabi_fmul>
        tempValue = tempfloat;
 8082a6a:	f008 f83f 	bl	808aaec <__aeabi_f2iz>
 8082a6e:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew COA slope: ");
 8082a70:	f006 fcc0 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082a74:	4919      	ldr	r1, [pc, #100]	; (8082adc <_Z16serialGetCoSlopev+0x104>)
 8082a76:	f005 fc51 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(String(CO_slopeA, 2));
 8082a7a:	f006 fcbb 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082a7e:	4604      	mov	r4, r0
 8082a80:	2202      	movs	r2, #2
 8082a82:	6829      	ldr	r1, [r5, #0]
 8082a84:	a806      	add	r0, sp, #24
 8082a86:	f005 fa5d 	bl	8087f44 <_ZN6StringC1Efi>
 8082a8a:	9906      	ldr	r1, [sp, #24]
 8082a8c:	4620      	mov	r0, r4
 8082a8e:	f005 fc58 	bl	8088342 <_ZN5Print7printlnEPKc>
 8082a92:	a806      	add	r0, sp, #24
 8082a94:	f005 f996 	bl	8087dc4 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 8082a98:	f006 ff9c 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8082a9c:	2010      	movs	r0, #16
 8082a9e:	a901      	add	r1, sp, #4
 8082aa0:	f7fd ffc2 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082aa4:	a802      	add	r0, sp, #8
 8082aa6:	f005 f98d 	bl	8087dc4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082aaa:	b00b      	add	sp, #44	; 0x2c
 8082aac:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082aae:	f006 fca1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082ab2:	490b      	ldr	r1, [pc, #44]	; (8082ae0 <_Z16serialGetCoSlopev+0x108>)
 8082ab4:	f005 fc45 	bl	8088342 <_ZN5Print7printlnEPKc>
 8082ab8:	e7f4      	b.n	8082aa4 <_Z16serialGetCoSlopev+0xcc>
 8082aba:	bf00      	nop
 8082abc:	f3af 8000 	nop.w
 8082ac0:	9999999a 	.word	0x9999999a
 8082ac4:	3fb99999 	.word	0x3fb99999
 8082ac8:	0808d255 	.word	0x0808d255
 8082acc:	200002c4 	.word	0x200002c4
 8082ad0:	0808d228 	.word	0x0808d228
 8082ad4:	0808d267 	.word	0x0808d267
 8082ad8:	42c80000 	.word	0x42c80000
 8082adc:	0808d27c 	.word	0x0808d27c
 8082ae0:	0808d204 	.word	0x0808d204

08082ae4 <_Z25serialGetTemperatureSlopev>:




void serialGetTemperatureSlope(void) 
{
 8082ae4:	b530      	push	{r4, r5, lr}
 8082ae6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082ae8:	f006 fc84 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082aec:	f005 fc1d 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 8082af0:	f006 fc80 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082af4:	4932      	ldr	r1, [pc, #200]	; (8082bc0 <_Z25serialGetTemperatureSlopev+0xdc>)
 8082af6:	f005 fc11 	bl	808831c <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 8082afa:	f006 fc7b 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082afe:	4604      	mov	r4, r0
 8082b00:	4d30      	ldr	r5, [pc, #192]	; (8082bc4 <_Z25serialGetTemperatureSlopev+0xe0>)
 8082b02:	2202      	movs	r2, #2
 8082b04:	6829      	ldr	r1, [r5, #0]
 8082b06:	a806      	add	r0, sp, #24
 8082b08:	f005 fa1c 	bl	8087f44 <_ZN6StringC1Efi>
 8082b0c:	9906      	ldr	r1, [sp, #24]
 8082b0e:	4620      	mov	r0, r4
 8082b10:	f005 fc04 	bl	808831c <_ZN5Print5printEPKc>
 8082b14:	a806      	add	r0, sp, #24
 8082b16:	f005 f955 	bl	8087dc4 <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 8082b1a:	f006 fc6b 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082b1e:	492a      	ldr	r1, [pc, #168]	; (8082bc8 <_Z25serialGetTemperatureSlopev+0xe4>)
 8082b20:	f005 fc0f 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 8082b24:	f006 fc66 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082b28:	4928      	ldr	r1, [pc, #160]	; (8082bcc <_Z25serialGetTemperatureSlopev+0xe8>)
 8082b2a:	f005 fbf7 	bl	808831c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082b2e:	f006 fc61 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082b32:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082b36:	f005 fd57 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082b3a:	f006 fc5b 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082b3e:	220d      	movs	r2, #13
 8082b40:	4601      	mov	r1, r0
 8082b42:	a802      	add	r0, sp, #8
 8082b44:	f005 fd66 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082b48:	a802      	add	r0, sp, #8
 8082b4a:	f005 fb9f 	bl	808828c <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082b4e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082b52:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082b54:	f007 ffb6 	bl	808aac4 <__aeabi_fcmpge>
 8082b58:	b360      	cbz	r0, 8082bb4 <_Z25serialGetTemperatureSlopev+0xd0>
 8082b5a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082b5e:	4620      	mov	r0, r4
 8082b60:	f007 ff9c 	bl	808aa9c <__aeabi_fcmplt>
 8082b64:	b330      	cbz	r0, 8082bb4 <_Z25serialGetTemperatureSlopev+0xd0>
    {
        temp_slope = tempfloat;
        tempfloat *= 100;
 8082b66:	491a      	ldr	r1, [pc, #104]	; (8082bd0 <_Z25serialGetTemperatureSlopev+0xec>)
 8082b68:	4620      	mov	r0, r4
        temp_slope = tempfloat;
 8082b6a:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082b6c:	f007 fdf8 	bl	808a760 <__aeabi_fmul>
        tempValue = tempfloat;
 8082b70:	f007 ffbc 	bl	808aaec <__aeabi_f2iz>
 8082b74:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 8082b76:	f006 fc3d 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082b7a:	4916      	ldr	r1, [pc, #88]	; (8082bd4 <_Z25serialGetTemperatureSlopev+0xf0>)
 8082b7c:	f005 fbce 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope, 2));
 8082b80:	f006 fc38 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082b84:	4604      	mov	r4, r0
 8082b86:	2202      	movs	r2, #2
 8082b88:	6829      	ldr	r1, [r5, #0]
 8082b8a:	a806      	add	r0, sp, #24
 8082b8c:	f005 f9da 	bl	8087f44 <_ZN6StringC1Efi>
 8082b90:	9906      	ldr	r1, [sp, #24]
 8082b92:	4620      	mov	r0, r4
 8082b94:	f005 fbd5 	bl	8088342 <_ZN5Print7printlnEPKc>
 8082b98:	a806      	add	r0, sp, #24
 8082b9a:	f005 f913 	bl	8087dc4 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 8082b9e:	f006 ff19 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8082ba2:	2030      	movs	r0, #48	; 0x30
 8082ba4:	a901      	add	r1, sp, #4
 8082ba6:	f7fd ff3f 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082baa:	a802      	add	r0, sp, #8
 8082bac:	f005 f90a 	bl	8087dc4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082bb0:	b00b      	add	sp, #44	; 0x2c
 8082bb2:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082bb4:	f006 fc1e 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082bb8:	4907      	ldr	r1, [pc, #28]	; (8082bd8 <_Z25serialGetTemperatureSlopev+0xf4>)
 8082bba:	f005 fbc2 	bl	8088342 <_ZN5Print7printlnEPKc>
 8082bbe:	e7f4      	b.n	8082baa <_Z25serialGetTemperatureSlopev+0xc6>
 8082bc0:	0808d28e 	.word	0x0808d28e
 8082bc4:	20001c78 	.word	0x20001c78
 8082bc8:	0808d2a9 	.word	0x0808d2a9
 8082bcc:	0808d2b4 	.word	0x0808d2b4
 8082bd0:	42c80000 	.word	0x42c80000
 8082bd4:	0808d2d2 	.word	0x0808d2d2
 8082bd8:	0808d204 	.word	0x0808d204

08082bdc <_Z22serialGetPressureSlopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureSlope(void)
{
 8082bdc:	b530      	push	{r4, r5, lr}
 8082bde:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082be0:	f006 fc08 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082be4:	f005 fba1 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 8082be8:	f006 fc04 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082bec:	4932      	ldr	r1, [pc, #200]	; (8082cb8 <_Z22serialGetPressureSlopev+0xdc>)
 8082bee:	f005 fb95 	bl	808831c <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 8082bf2:	f006 fbff 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082bf6:	4604      	mov	r4, r0
 8082bf8:	4d30      	ldr	r5, [pc, #192]	; (8082cbc <_Z22serialGetPressureSlopev+0xe0>)
 8082bfa:	2202      	movs	r2, #2
 8082bfc:	6829      	ldr	r1, [r5, #0]
 8082bfe:	a806      	add	r0, sp, #24
 8082c00:	f005 f9a0 	bl	8087f44 <_ZN6StringC1Efi>
 8082c04:	9906      	ldr	r1, [sp, #24]
 8082c06:	4620      	mov	r0, r4
 8082c08:	f005 fb88 	bl	808831c <_ZN5Print5printEPKc>
 8082c0c:	a806      	add	r0, sp, #24
 8082c0e:	f005 f8d9 	bl	8087dc4 <_ZN6StringD1Ev>
    Serial.println(" torr");
 8082c12:	f006 fbef 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082c16:	492a      	ldr	r1, [pc, #168]	; (8082cc0 <_Z22serialGetPressureSlopev+0xe4>)
 8082c18:	f005 fb93 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 8082c1c:	f006 fbea 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082c20:	4928      	ldr	r1, [pc, #160]	; (8082cc4 <_Z22serialGetPressureSlopev+0xe8>)
 8082c22:	f005 fb7b 	bl	808831c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082c26:	f006 fbe5 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082c2a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082c2e:	f005 fcdb 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082c32:	f006 fbdf 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082c36:	220d      	movs	r2, #13
 8082c38:	4601      	mov	r1, r0
 8082c3a:	a802      	add	r0, sp, #8
 8082c3c:	f005 fcea 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082c40:	a802      	add	r0, sp, #8
 8082c42:	f005 fb23 	bl	808828c <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082c46:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082c4a:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8082c4c:	f007 ff3a 	bl	808aac4 <__aeabi_fcmpge>
 8082c50:	b360      	cbz	r0, 8082cac <_Z22serialGetPressureSlopev+0xd0>
 8082c52:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082c56:	4620      	mov	r0, r4
 8082c58:	f007 ff20 	bl	808aa9c <__aeabi_fcmplt>
 8082c5c:	b330      	cbz	r0, 8082cac <_Z22serialGetPressureSlopev+0xd0>
    {
        pressure_slope = tempfloat;
        tempfloat *= 100;
 8082c5e:	491a      	ldr	r1, [pc, #104]	; (8082cc8 <_Z22serialGetPressureSlopev+0xec>)
 8082c60:	4620      	mov	r0, r4
        pressure_slope = tempfloat;
 8082c62:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082c64:	f007 fd7c 	bl	808a760 <__aeabi_fmul>
        tempValue = tempfloat;
 8082c68:	f007 ff40 	bl	808aaec <__aeabi_f2iz>
 8082c6c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 8082c6e:	f006 fbc1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082c72:	4916      	ldr	r1, [pc, #88]	; (8082ccc <_Z22serialGetPressureSlopev+0xf0>)
 8082c74:	f005 fb52 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope, 2));
 8082c78:	f006 fbbc 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082c7c:	4604      	mov	r4, r0
 8082c7e:	2202      	movs	r2, #2
 8082c80:	6829      	ldr	r1, [r5, #0]
 8082c82:	a806      	add	r0, sp, #24
 8082c84:	f005 f95e 	bl	8087f44 <_ZN6StringC1Efi>
 8082c88:	9906      	ldr	r1, [sp, #24]
 8082c8a:	4620      	mov	r0, r4
 8082c8c:	f005 fb59 	bl	8088342 <_ZN5Print7printlnEPKc>
 8082c90:	a806      	add	r0, sp, #24
 8082c92:	f005 f897 	bl	8087dc4 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8082c96:	f006 fe9d 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8082c9a:	2038      	movs	r0, #56	; 0x38
 8082c9c:	a901      	add	r1, sp, #4
 8082c9e:	f7fd fec3 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082ca2:	a802      	add	r0, sp, #8
 8082ca4:	f005 f88e 	bl	8087dc4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082ca8:	b00b      	add	sp, #44	; 0x2c
 8082caa:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082cac:	f006 fba2 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082cb0:	4907      	ldr	r1, [pc, #28]	; (8082cd0 <_Z22serialGetPressureSlopev+0xf4>)
 8082cb2:	f005 fb46 	bl	8088342 <_ZN5Print7printlnEPKc>
 8082cb6:	e7f4      	b.n	8082ca2 <_Z22serialGetPressureSlopev+0xc6>
 8082cb8:	0808d2ec 	.word	0x0808d2ec
 8082cbc:	20000790 	.word	0x20000790
 8082cc0:	0808d304 	.word	0x0808d304
 8082cc4:	0808d30a 	.word	0x0808d30a
 8082cc8:	42c80000 	.word	0x42c80000
 8082ccc:	0808d325 	.word	0x0808d325
 8082cd0:	0808d204 	.word	0x0808d204

08082cd4 <_Z22serialGetHumiditySlopev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumiditySlope(void)
{
 8082cd4:	b530      	push	{r4, r5, lr}
 8082cd6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082cd8:	f006 fb8c 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082cdc:	f005 fb25 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 8082ce0:	f006 fb88 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082ce4:	4932      	ldr	r1, [pc, #200]	; (8082db0 <_Z22serialGetHumiditySlopev+0xdc>)
 8082ce6:	f005 fb19 	bl	808831c <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 8082cea:	f006 fb83 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082cee:	4604      	mov	r4, r0
 8082cf0:	4d30      	ldr	r5, [pc, #192]	; (8082db4 <_Z22serialGetHumiditySlopev+0xe0>)
 8082cf2:	2202      	movs	r2, #2
 8082cf4:	6829      	ldr	r1, [r5, #0]
 8082cf6:	a806      	add	r0, sp, #24
 8082cf8:	f005 f924 	bl	8087f44 <_ZN6StringC1Efi>
 8082cfc:	9906      	ldr	r1, [sp, #24]
 8082cfe:	4620      	mov	r0, r4
 8082d00:	f005 fb0c 	bl	808831c <_ZN5Print5printEPKc>
 8082d04:	a806      	add	r0, sp, #24
 8082d06:	f005 f85d 	bl	8087dc4 <_ZN6StringD1Ev>
    Serial.println(" %");
 8082d0a:	f006 fb73 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082d0e:	492a      	ldr	r1, [pc, #168]	; (8082db8 <_Z22serialGetHumiditySlopev+0xe4>)
 8082d10:	f005 fb17 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 8082d14:	f006 fb6e 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082d18:	4928      	ldr	r1, [pc, #160]	; (8082dbc <_Z22serialGetHumiditySlopev+0xe8>)
 8082d1a:	f005 faff 	bl	808831c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082d1e:	f006 fb69 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082d22:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082d26:	f005 fc5f 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082d2a:	f006 fb63 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082d2e:	220d      	movs	r2, #13
 8082d30:	4601      	mov	r1, r0
 8082d32:	a802      	add	r0, sp, #8
 8082d34:	f005 fc6e 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082d38:	a802      	add	r0, sp, #8
 8082d3a:	f005 faa7 	bl	808828c <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10)
 8082d3e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    float tempfloat = tempString.toFloat();
 8082d42:	4604      	mov	r4, r0
    if (tempfloat >= 0.5 && tempfloat < 10)
 8082d44:	f007 febe 	bl	808aac4 <__aeabi_fcmpge>
 8082d48:	b358      	cbz	r0, 8082da2 <_Z22serialGetHumiditySlopev+0xce>
 8082d4a:	4620      	mov	r0, r4
 8082d4c:	491c      	ldr	r1, [pc, #112]	; (8082dc0 <_Z22serialGetHumiditySlopev+0xec>)
 8082d4e:	f007 fea5 	bl	808aa9c <__aeabi_fcmplt>
 8082d52:	b330      	cbz	r0, 8082da2 <_Z22serialGetHumiditySlopev+0xce>
    {
        rh_slope = tempfloat;
        tempfloat *= 100;
 8082d54:	491b      	ldr	r1, [pc, #108]	; (8082dc4 <_Z22serialGetHumiditySlopev+0xf0>)
 8082d56:	4620      	mov	r0, r4
        rh_slope = tempfloat;
 8082d58:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
 8082d5a:	f007 fd01 	bl	808a760 <__aeabi_fmul>
        tempValue = tempfloat;
 8082d5e:	f007 fec5 	bl	808aaec <__aeabi_f2iz>
 8082d62:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 8082d64:	f006 fb46 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082d68:	4917      	ldr	r1, [pc, #92]	; (8082dc8 <_Z22serialGetHumiditySlopev+0xf4>)
 8082d6a:	f005 fad7 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope, 2));
 8082d6e:	f006 fb41 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082d72:	4604      	mov	r4, r0
 8082d74:	2202      	movs	r2, #2
 8082d76:	6829      	ldr	r1, [r5, #0]
 8082d78:	a806      	add	r0, sp, #24
 8082d7a:	f005 f8e3 	bl	8087f44 <_ZN6StringC1Efi>
 8082d7e:	9906      	ldr	r1, [sp, #24]
 8082d80:	4620      	mov	r0, r4
 8082d82:	f005 fade 	bl	8088342 <_ZN5Print7printlnEPKc>
 8082d86:	a806      	add	r0, sp, #24
 8082d88:	f005 f81c 	bl	8087dc4 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 8082d8c:	f006 fe22 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8082d90:	2040      	movs	r0, #64	; 0x40
 8082d92:	a901      	add	r1, sp, #4
 8082d94:	f7fd fe48 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8082d98:	a802      	add	r0, sp, #8
 8082d9a:	f005 f813 	bl	8087dc4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082d9e:	b00b      	add	sp, #44	; 0x2c
 8082da0:	bd30      	pop	{r4, r5, pc}
        Serial.println("\n\rInvalid value!");
 8082da2:	f006 fb27 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082da6:	4909      	ldr	r1, [pc, #36]	; (8082dcc <_Z22serialGetHumiditySlopev+0xf8>)
 8082da8:	f005 facb 	bl	8088342 <_ZN5Print7printlnEPKc>
 8082dac:	e7f4      	b.n	8082d98 <_Z22serialGetHumiditySlopev+0xc4>
 8082dae:	bf00      	nop
 8082db0:	0808d33c 	.word	0x0808d33c
 8082db4:	20000798 	.word	0x20000798
 8082db8:	0808d34e 	.word	0x0808d34e
 8082dbc:	0808d351 	.word	0x0808d351
 8082dc0:	41200000 	.word	0x41200000
 8082dc4:	42c80000 	.word	0x42c80000
 8082dc8:	0808d366 	.word	0x0808d366
 8082dcc:	0808d204 	.word	0x0808d204

08082dd0 <_Z23outputSerialMenuOptionsv>:




void outputSerialMenuOptions(void)
{
 8082dd0:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 8082dd2:	f006 fb0f 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082dd6:	49a2      	ldr	r1, [pc, #648]	; (8083060 <_Z23outputSerialMenuOptionsv+0x290>)
 8082dd8:	f005 fab3 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 8082ddc:	f006 fb0a 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082de0:	49a0      	ldr	r1, [pc, #640]	; (8083064 <_Z23outputSerialMenuOptionsv+0x294>)
 8082de2:	f005 faae 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 8082de6:	f006 fb05 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082dea:	499f      	ldr	r1, [pc, #636]	; (8083068 <_Z23outputSerialMenuOptionsv+0x298>)
 8082dec:	f005 faa9 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 8082df0:	f006 fb00 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082df4:	499d      	ldr	r1, [pc, #628]	; (808306c <_Z23outputSerialMenuOptionsv+0x29c>)
 8082df6:	f005 faa4 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 8082dfa:	f006 fafb 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082dfe:	499c      	ldr	r1, [pc, #624]	; (8083070 <_Z23outputSerialMenuOptionsv+0x2a0>)
 8082e00:	f005 fa9f 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 8082e04:	f006 faf6 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e08:	499a      	ldr	r1, [pc, #616]	; (8083074 <_Z23outputSerialMenuOptionsv+0x2a4>)
 8082e0a:	f005 fa9a 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 8082e0e:	f006 faf1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e12:	4999      	ldr	r1, [pc, #612]	; (8083078 <_Z23outputSerialMenuOptionsv+0x2a8>)
 8082e14:	f005 fa95 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 8082e18:	f006 faec 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e1c:	4997      	ldr	r1, [pc, #604]	; (808307c <_Z23outputSerialMenuOptionsv+0x2ac>)
 8082e1e:	f005 fa90 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 8082e22:	f006 fae7 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e26:	4996      	ldr	r1, [pc, #600]	; (8083080 <_Z23outputSerialMenuOptionsv+0x2b0>)
 8082e28:	f005 fa8b 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8082e2c:	f006 fae2 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e30:	4994      	ldr	r1, [pc, #592]	; (8083084 <_Z23outputSerialMenuOptionsv+0x2b4>)
 8082e32:	f005 fa86 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 8082e36:	f006 fadd 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e3a:	4993      	ldr	r1, [pc, #588]	; (8083088 <_Z23outputSerialMenuOptionsv+0x2b8>)
 8082e3c:	f005 fa81 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 8082e40:	f006 fad8 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e44:	4991      	ldr	r1, [pc, #580]	; (808308c <_Z23outputSerialMenuOptionsv+0x2bc>)
 8082e46:	f005 fa7c 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 8082e4a:	f006 fad3 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e4e:	4990      	ldr	r1, [pc, #576]	; (8083090 <_Z23outputSerialMenuOptionsv+0x2c0>)
 8082e50:	f005 fa77 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8082e54:	f006 face 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e58:	498e      	ldr	r1, [pc, #568]	; (8083094 <_Z23outputSerialMenuOptionsv+0x2c4>)
 8082e5a:	f005 fa72 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 8082e5e:	f006 fac9 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e62:	498d      	ldr	r1, [pc, #564]	; (8083098 <_Z23outputSerialMenuOptionsv+0x2c8>)
 8082e64:	f005 fa6d 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 8082e68:	f006 fac4 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e6c:	498b      	ldr	r1, [pc, #556]	; (808309c <_Z23outputSerialMenuOptionsv+0x2cc>)
 8082e6e:	f005 fa68 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 8082e72:	f006 fabf 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e76:	498a      	ldr	r1, [pc, #552]	; (80830a0 <_Z23outputSerialMenuOptionsv+0x2d0>)
 8082e78:	f005 fa63 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 8082e7c:	f006 faba 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e80:	4988      	ldr	r1, [pc, #544]	; (80830a4 <_Z23outputSerialMenuOptionsv+0x2d4>)
 8082e82:	f005 fa5e 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 8082e86:	f006 fab5 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e8a:	4987      	ldr	r1, [pc, #540]	; (80830a8 <_Z23outputSerialMenuOptionsv+0x2d8>)
 8082e8c:	f005 fa59 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 8082e90:	f006 fab0 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e94:	4985      	ldr	r1, [pc, #532]	; (80830ac <_Z23outputSerialMenuOptionsv+0x2dc>)
 8082e96:	f005 fa54 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 8082e9a:	f006 faab 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082e9e:	4984      	ldr	r1, [pc, #528]	; (80830b0 <_Z23outputSerialMenuOptionsv+0x2e0>)
 8082ea0:	f005 fa4f 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 8082ea4:	f006 faa6 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082ea8:	4982      	ldr	r1, [pc, #520]	; (80830b4 <_Z23outputSerialMenuOptionsv+0x2e4>)
 8082eaa:	f005 fa4a 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 8082eae:	f006 faa1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082eb2:	4981      	ldr	r1, [pc, #516]	; (80830b8 <_Z23outputSerialMenuOptionsv+0x2e8>)
 8082eb4:	f005 fa45 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 8082eb8:	f006 fa9c 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082ebc:	497f      	ldr	r1, [pc, #508]	; (80830bc <_Z23outputSerialMenuOptionsv+0x2ec>)
 8082ebe:	f005 fa40 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 8082ec2:	f006 fa97 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082ec6:	497e      	ldr	r1, [pc, #504]	; (80830c0 <_Z23outputSerialMenuOptionsv+0x2f0>)
 8082ec8:	f005 fa3b 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 8082ecc:	f006 fa92 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082ed0:	497c      	ldr	r1, [pc, #496]	; (80830c4 <_Z23outputSerialMenuOptionsv+0x2f4>)
 8082ed2:	f005 fa36 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 8082ed6:	f006 fa8d 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082eda:	497b      	ldr	r1, [pc, #492]	; (80830c8 <_Z23outputSerialMenuOptionsv+0x2f8>)
 8082edc:	f005 fa31 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 8082ee0:	f006 fa88 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082ee4:	4979      	ldr	r1, [pc, #484]	; (80830cc <_Z23outputSerialMenuOptionsv+0x2fc>)
 8082ee6:	f005 fa2c 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 8082eea:	f006 fa83 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082eee:	4978      	ldr	r1, [pc, #480]	; (80830d0 <_Z23outputSerialMenuOptionsv+0x300>)
 8082ef0:	f005 fa27 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 8082ef4:	f006 fa7e 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082ef8:	4976      	ldr	r1, [pc, #472]	; (80830d4 <_Z23outputSerialMenuOptionsv+0x304>)
 8082efa:	f005 fa22 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 8082efe:	f006 fa79 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f02:	4975      	ldr	r1, [pc, #468]	; (80830d8 <_Z23outputSerialMenuOptionsv+0x308>)
 8082f04:	f005 fa1d 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 8082f08:	f006 fa74 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f0c:	4973      	ldr	r1, [pc, #460]	; (80830dc <_Z23outputSerialMenuOptionsv+0x30c>)
 8082f0e:	f005 fa18 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 8082f12:	f006 fa6f 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f16:	4972      	ldr	r1, [pc, #456]	; (80830e0 <_Z23outputSerialMenuOptionsv+0x310>)
 8082f18:	f005 fa13 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8082f1c:	f006 fa6a 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f20:	4970      	ldr	r1, [pc, #448]	; (80830e4 <_Z23outputSerialMenuOptionsv+0x314>)
 8082f22:	f005 fa0e 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 8082f26:	f006 fa65 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f2a:	496f      	ldr	r1, [pc, #444]	; (80830e8 <_Z23outputSerialMenuOptionsv+0x318>)
 8082f2c:	f005 fa09 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 8082f30:	f006 fa60 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f34:	496d      	ldr	r1, [pc, #436]	; (80830ec <_Z23outputSerialMenuOptionsv+0x31c>)
 8082f36:	f005 fa04 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("A:  Output CO constantly and rapidly");
 8082f3a:	f006 fa5b 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f3e:	496c      	ldr	r1, [pc, #432]	; (80830f0 <_Z23outputSerialMenuOptionsv+0x320>)
 8082f40:	f005 f9ff 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8082f44:	f006 fa56 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f48:	496a      	ldr	r1, [pc, #424]	; (80830f4 <_Z23outputSerialMenuOptionsv+0x324>)
 8082f4a:	f005 f9fa 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celsius");
 8082f4e:	f006 fa51 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f52:	4969      	ldr	r1, [pc, #420]	; (80830f8 <_Z23outputSerialMenuOptionsv+0x328>)
 8082f54:	f005 f9f5 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8082f58:	f006 fa4c 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f5c:	4967      	ldr	r1, [pc, #412]	; (80830fc <_Z23outputSerialMenuOptionsv+0x32c>)
 8082f5e:	f005 f9f0 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 8082f62:	f006 fa47 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f66:	4966      	ldr	r1, [pc, #408]	; (8083100 <_Z23outputSerialMenuOptionsv+0x330>)
 8082f68:	f005 f9eb 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Fahrenheit");
 8082f6c:	f006 fa42 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f70:	4964      	ldr	r1, [pc, #400]	; (8083104 <_Z23outputSerialMenuOptionsv+0x334>)
 8082f72:	f005 f9e6 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 8082f76:	f006 fa3d 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f7a:	4963      	ldr	r1, [pc, #396]	; (8083108 <_Z23outputSerialMenuOptionsv+0x338>)
 8082f7c:	f005 f9e1 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 8082f80:	f006 fa38 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f84:	4961      	ldr	r1, [pc, #388]	; (808310c <_Z23outputSerialMenuOptionsv+0x33c>)
 8082f86:	f005 f9dc 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 8082f8a:	f006 fa33 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f8e:	4960      	ldr	r1, [pc, #384]	; (8083110 <_Z23outputSerialMenuOptionsv+0x340>)
 8082f90:	f005 f9d7 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 8082f94:	f006 fa2e 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082f98:	495e      	ldr	r1, [pc, #376]	; (8083114 <_Z23outputSerialMenuOptionsv+0x344>)
 8082f9a:	f005 f9d2 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 8082f9e:	f006 fa29 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082fa2:	495d      	ldr	r1, [pc, #372]	; (8083118 <_Z23outputSerialMenuOptionsv+0x348>)
 8082fa4:	f005 f9cd 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 8082fa8:	f006 fa24 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082fac:	495b      	ldr	r1, [pc, #364]	; (808311c <_Z23outputSerialMenuOptionsv+0x34c>)
 8082fae:	f005 f9c8 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 8082fb2:	f006 fa1f 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082fb6:	495a      	ldr	r1, [pc, #360]	; (8083120 <_Z23outputSerialMenuOptionsv+0x350>)
 8082fb8:	f005 f9c3 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 8082fbc:	f006 fa1a 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082fc0:	4958      	ldr	r1, [pc, #352]	; (8083124 <_Z23outputSerialMenuOptionsv+0x354>)
 8082fc2:	f005 f9be 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 8082fc6:	f006 fa15 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082fca:	4957      	ldr	r1, [pc, #348]	; (8083128 <_Z23outputSerialMenuOptionsv+0x358>)
 8082fcc:	f005 f9b9 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 8082fd0:	f006 fa10 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082fd4:	4955      	ldr	r1, [pc, #340]	; (808312c <_Z23outputSerialMenuOptionsv+0x35c>)
 8082fd6:	f005 f9b4 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 8082fda:	f006 fa0b 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082fde:	4954      	ldr	r1, [pc, #336]	; (8083130 <_Z23outputSerialMenuOptionsv+0x360>)
 8082fe0:	f005 f9af 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 8082fe4:	f006 fa06 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082fe8:	4952      	ldr	r1, [pc, #328]	; (8083134 <_Z23outputSerialMenuOptionsv+0x364>)
 8082fea:	f005 f9aa 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 8082fee:	f006 fa01 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082ff2:	4951      	ldr	r1, [pc, #324]	; (8083138 <_Z23outputSerialMenuOptionsv+0x368>)
 8082ff4:	f005 f9a5 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 8082ff8:	f006 f9fc 	bl	80893f4 <_Z16_fetch_usbserialv>
 8082ffc:	494f      	ldr	r1, [pc, #316]	; (808313c <_Z23outputSerialMenuOptionsv+0x36c>)
 8082ffe:	f005 f9a0 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 8083002:	f006 f9f7 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083006:	494e      	ldr	r1, [pc, #312]	; (8083140 <_Z23outputSerialMenuOptionsv+0x370>)
 8083008:	f005 f99b 	bl	8088342 <_ZN5Print7printlnEPKc>

    Serial.println("W:  Enable/Disable google location services");
 808300c:	f006 f9f2 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083010:	494c      	ldr	r1, [pc, #304]	; (8083144 <_Z23outputSerialMenuOptionsv+0x374>)
 8083012:	f005 f996 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 8083016:	f006 f9ed 	bl	80893f4 <_Z16_fetch_usbserialv>
 808301a:	494b      	ldr	r1, [pc, #300]	; (8083148 <_Z23outputSerialMenuOptionsv+0x378>)
 808301c:	f005 f991 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 8083020:	f006 f9e8 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083024:	4949      	ldr	r1, [pc, #292]	; (808314c <_Z23outputSerialMenuOptionsv+0x37c>)
 8083026:	f005 f98c 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 808302a:	f006 f9e3 	bl	80893f4 <_Z16_fetch_usbserialv>
 808302e:	4948      	ldr	r1, [pc, #288]	; (8083150 <_Z23outputSerialMenuOptionsv+0x380>)
 8083030:	f005 f987 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083034:	f006 f9de 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083038:	4946      	ldr	r1, [pc, #280]	; (8083154 <_Z23outputSerialMenuOptionsv+0x384>)
 808303a:	f005 f982 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
 808303e:	f006 f9d9 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083042:	4945      	ldr	r1, [pc, #276]	; (8083158 <_Z23outputSerialMenuOptionsv+0x388>)
 8083044:	f005 f97d 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8083048:	f006 f9d4 	bl	80893f4 <_Z16_fetch_usbserialv>
 808304c:	4943      	ldr	r1, [pc, #268]	; (808315c <_Z23outputSerialMenuOptionsv+0x38c>)
 808304e:	f005 f978 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 8083052:	f006 f9cf 	bl	80893f4 <_Z16_fetch_usbserialv>
}
 8083056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("x:  Exits this menu");
 808305a:	4941      	ldr	r1, [pc, #260]	; (8083160 <_Z23outputSerialMenuOptionsv+0x390>)
 808305c:	f005 b971 	b.w	8088342 <_ZN5Print7printlnEPKc>
 8083060:	0808d377 	.word	0x0808d377
 8083064:	0808d38d 	.word	0x0808d38d
 8083068:	0808d3a2 	.word	0x0808d3a2
 808306c:	0808d3b6 	.word	0x0808d3b6
 8083070:	0808d3ca 	.word	0x0808d3ca
 8083074:	0808d3dd 	.word	0x0808d3dd
 8083078:	0808d3f2 	.word	0x0808d3f2
 808307c:	0808d406 	.word	0x0808d406
 8083080:	0808d41d 	.word	0x0808d41d
 8083084:	0808d433 	.word	0x0808d433
 8083088:	0808d449 	.word	0x0808d449
 808308c:	0808d45e 	.word	0x0808d45e
 8083090:	0808d47b 	.word	0x0808d47b
 8083094:	0808d497 	.word	0x0808d497
 8083098:	0808d4b1 	.word	0x0808d4b1
 808309c:	0808d4ca 	.word	0x0808d4ca
 80830a0:	0808d4e4 	.word	0x0808d4e4
 80830a4:	0808d4fd 	.word	0x0808d4fd
 80830a8:	0808d519 	.word	0x0808d519
 80830ac:	0808d536 	.word	0x0808d536
 80830b0:	0808d54f 	.word	0x0808d54f
 80830b4:	0808d56b 	.word	0x0808d56b
 80830b8:	0808d583 	.word	0x0808d583
 80830bc:	0808d59c 	.word	0x0808d59c
 80830c0:	0808d5b5 	.word	0x0808d5b5
 80830c4:	0808d5c9 	.word	0x0808d5c9
 80830c8:	0808d5de 	.word	0x0808d5de
 80830cc:	0808d5f9 	.word	0x0808d5f9
 80830d0:	0808d614 	.word	0x0808d614
 80830d4:	0808d62a 	.word	0x0808d62a
 80830d8:	0808d63b 	.word	0x0808d63b
 80830dc:	0808d64d 	.word	0x0808d64d
 80830e0:	0808d65e 	.word	0x0808d65e
 80830e4:	0808d670 	.word	0x0808d670
 80830e8:	0808d699 	.word	0x0808d699
 80830ec:	0808d6c2 	.word	0x0808d6c2
 80830f0:	0808d6f1 	.word	0x0808d6f1
 80830f4:	0808d716 	.word	0x0808d716
 80830f8:	0808d73b 	.word	0x0808d73b
 80830fc:	0808d763 	.word	0x0808d763
 8083100:	0808d7a3 	.word	0x0808d7a3
 8083104:	0808d7e6 	.word	0x0808d7e6
 8083108:	0808d811 	.word	0x0808d811
 808310c:	0808d854 	.word	0x0808d854
 8083110:	0808d89a 	.word	0x0808d89a
 8083114:	0808d8ce 	.word	0x0808d8ce
 8083118:	0808d8ec 	.word	0x0808d8ec
 808311c:	0808d910 	.word	0x0808d910
 8083120:	0808d92b 	.word	0x0808d92b
 8083124:	0808d955 	.word	0x0808d955
 8083128:	0808d98a 	.word	0x0808d98a
 808312c:	0808d9ae 	.word	0x0808d9ae
 8083130:	0808d9c2 	.word	0x0808d9c2
 8083134:	0808d9de 	.word	0x0808d9de
 8083138:	0808da03 	.word	0x0808da03
 808313c:	0808da27 	.word	0x0808da27
 8083140:	0808da4c 	.word	0x0808da4c
 8083144:	0808da74 	.word	0x0808da74
 8083148:	0808daa0 	.word	0x0808daa0
 808314c:	0808dae3 	.word	0x0808dae3
 8083150:	0808db15 	.word	0x0808db15
 8083154:	0808db3b 	.word	0x0808db3b
 8083158:	0808dba1 	.word	0x0808dba1
 808315c:	0808dc05 	.word	0x0808dc05
 8083160:	0808dc1a 	.word	0x0808dc1a

08083164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8083164:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8083166:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 8083168:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 808316a:	b17c      	cbz	r4, 808318c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 808316c:	6863      	ldr	r3, [r4, #4]
 808316e:	3b01      	subs	r3, #1
 8083170:	6063      	str	r3, [r4, #4]
 8083172:	b95b      	cbnz	r3, 808318c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 8083174:	6823      	ldr	r3, [r4, #0]
 8083176:	4620      	mov	r0, r4
 8083178:	689b      	ldr	r3, [r3, #8]
 808317a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808317c:	68a3      	ldr	r3, [r4, #8]
 808317e:	3b01      	subs	r3, #1
 8083180:	60a3      	str	r3, [r4, #8]
 8083182:	b91b      	cbnz	r3, 808318c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8083184:	6823      	ldr	r3, [r4, #0]
 8083186:	4620      	mov	r0, r4
 8083188:	68db      	ldr	r3, [r3, #12]
 808318a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 808318c:	4628      	mov	r0, r5
 808318e:	bd38      	pop	{r3, r4, r5, pc}

08083190 <_Z16getEspAQSyncDatav>:
{
 8083190:	b590      	push	{r4, r7, lr}
 8083192:	b093      	sub	sp, #76	; 0x4c
 8083194:	af02      	add	r7, sp, #8
    String getAQSyncData = "Z&";
 8083196:	4949      	ldr	r1, [pc, #292]	; (80832bc <_Z16getEspAQSyncDatav+0x12c>)
 8083198:	4638      	mov	r0, r7
 808319a:	f004 fe5d 	bl	8087e58 <_ZN6StringC1EPKc>
    String receivedData = "";
 808319e:	4948      	ldr	r1, [pc, #288]	; (80832c0 <_Z16getEspAQSyncDatav+0x130>)
 80831a0:	f107 0010 	add.w	r0, r7, #16
 80831a4:	f004 fe58 	bl	8087e58 <_ZN6StringC1EPKc>
    receivedData = serBuf.readString();
 80831a8:	4946      	ldr	r1, [pc, #280]	; (80832c4 <_Z16getEspAQSyncDatav+0x134>)
 80831aa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80831ae:	f005 fa1d 	bl	80885ec <_ZN6Stream10readStringEv>
 80831b2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80831b6:	f107 0010 	add.w	r0, r7, #16
 80831ba:	f004 fe97 	bl	8087eec <_ZN6StringaSEOS_>
 80831be:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80831c2:	f004 fdff 	bl	8087dc4 <_ZN6StringD1Ev>
    char buffer[receivedData.length()];
 80831c6:	69ba      	ldr	r2, [r7, #24]
		{getBytes((unsigned char *)buf, bufsize, index);}
 80831c8:	f107 0010 	add.w	r0, r7, #16
 80831cc:	1dd3      	adds	r3, r2, #7
 80831ce:	f023 0307 	bic.w	r3, r3, #7
 80831d2:	ebad 0d03 	sub.w	sp, sp, r3
 80831d6:	a902      	add	r1, sp, #8
 80831d8:	2300      	movs	r3, #0
 80831da:	f004 ff54 	bl	8088086 <_ZNK6String8getBytesEPhjj>
    receivedData = receivedData.remove(0, 1);
 80831de:	2201      	movs	r2, #1
 80831e0:	2100      	movs	r1, #0
 80831e2:	f107 0010 	add.w	r0, r7, #16
    char typeOfInput = buffer[0];
 80831e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
    receivedData = receivedData.remove(0, 1);
 80831ea:	f005 f830 	bl	808824e <_ZN6String6removeEjj>
 80831ee:	4601      	mov	r1, r0
 80831f0:	f107 0010 	add.w	r0, r7, #16
 80831f4:	f004 fe60 	bl	8087eb8 <_ZN6StringaSERKS_>
    receivedData.replace("\\", "");
 80831f8:	4933      	ldr	r1, [pc, #204]	; (80832c8 <_Z16getEspAQSyncDatav+0x138>)
 80831fa:	f107 0020 	add.w	r0, r7, #32
 80831fe:	f004 fe2b 	bl	8087e58 <_ZN6StringC1EPKc>
 8083202:	492f      	ldr	r1, [pc, #188]	; (80832c0 <_Z16getEspAQSyncDatav+0x130>)
 8083204:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083208:	f004 fe26 	bl	8087e58 <_ZN6StringC1EPKc>
 808320c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8083210:	f107 0120 	add.w	r1, r7, #32
 8083214:	f107 0010 	add.w	r0, r7, #16
 8083218:	f004 ff94 	bl	8088144 <_ZN6String7replaceERKS_S1_>
 808321c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083220:	f004 fdd0 	bl	8087dc4 <_ZN6StringD1Ev>
 8083224:	f107 0020 	add.w	r0, r7, #32
 8083228:	f004 fdcc 	bl	8087dc4 <_ZN6StringD1Ev>
    Serial.println("string from rbpi: ");
 808322c:	f006 f8e2 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083230:	4926      	ldr	r1, [pc, #152]	; (80832cc <_Z16getEspAQSyncDatav+0x13c>)
 8083232:	f005 f886 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println(receivedData);
 8083236:	f006 f8dd 	bl	80893f4 <_Z16_fetch_usbserialv>
 808323a:	6939      	ldr	r1, [r7, #16]
 808323c:	f005 f881 	bl	8088342 <_ZN5Print7printlnEPKc>
    if (typeOfInput == 'Y')
 8083240:	2c59      	cmp	r4, #89	; 0x59
 8083242:	d128      	bne.n	8083296 <_Z16getEspAQSyncDatav+0x106>
                Serial.println("This is what I am publishing: ");
 8083244:	f006 f8d6 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083248:	4921      	ldr	r1, [pc, #132]	; (80832d0 <_Z16getEspAQSyncDatav+0x140>)
 808324a:	f005 f87a 	bl	8088342 <_ZN5Print7printlnEPKc>
                Serial.println(receivedData);
 808324e:	f006 f8d1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083252:	6939      	ldr	r1, [r7, #16]
 8083254:	f005 f875 	bl	8088342 <_ZN5Print7printlnEPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 8083258:	4b1e      	ldr	r3, [pc, #120]	; (80832d4 <_Z16getEspAQSyncDatav+0x144>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808325a:	693a      	ldr	r2, [r7, #16]
 808325c:	781b      	ldrb	r3, [r3, #0]
 808325e:	491e      	ldr	r1, [pc, #120]	; (80832d8 <_Z16getEspAQSyncDatav+0x148>)
 8083260:	f88d 3000 	strb.w	r3, [sp]
 8083264:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083268:	233c      	movs	r3, #60	; 0x3c
 808326a:	f005 fe93 	bl	8088f94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808326e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8083272:	f7ff ff77 	bl	8083164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8083276:	f003 ffb9 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808327a:	4b18      	ldr	r3, [pc, #96]	; (80832dc <_Z16getEspAQSyncDatav+0x14c>)
 808327c:	6018      	str	r0, [r3, #0]
    		spark_process();
 808327e:	f004 fa29 	bl	80876d4 <spark_process>
    String receivedData = "";
 8083282:	f107 0010 	add.w	r0, r7, #16
 8083286:	f004 fd9d 	bl	8087dc4 <_ZN6StringD1Ev>
    String getAQSyncData = "Z&";
 808328a:	4638      	mov	r0, r7
 808328c:	f004 fd9a 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8083290:	3744      	adds	r7, #68	; 0x44
 8083292:	46bd      	mov	sp, r7
 8083294:	bd90      	pop	{r4, r7, pc}
    if (typeOfInput == 'Q')
 8083296:	2c51      	cmp	r4, #81	; 0x51
 8083298:	d1f3      	bne.n	8083282 <_Z16getEspAQSyncDatav+0xf2>
        Serial.println("We are updating the diagnostic variable here");
 808329a:	f006 f8ab 	bl	80893f4 <_Z16_fetch_usbserialv>
 808329e:	4910      	ldr	r1, [pc, #64]	; (80832e0 <_Z16getEspAQSyncDatav+0x150>)
 80832a0:	f005 f84f 	bl	8088342 <_ZN5Print7printlnEPKc>
        Serial.println(receivedData);
 80832a4:	f006 f8a6 	bl	80893f4 <_Z16_fetch_usbserialv>
 80832a8:	6939      	ldr	r1, [r7, #16]
 80832aa:	f005 f84a 	bl	8088342 <_ZN5Print7printlnEPKc>
        diagnostics = receivedData;
 80832ae:	f107 0110 	add.w	r1, r7, #16
 80832b2:	480c      	ldr	r0, [pc, #48]	; (80832e4 <_Z16getEspAQSyncDatav+0x154>)
 80832b4:	f004 fe00 	bl	8087eb8 <_ZN6StringaSERKS_>
 80832b8:	e7e3      	b.n	8083282 <_Z16getEspAQSyncDatav+0xf2>
 80832ba:	bf00      	nop
 80832bc:	0808dd3d 	.word	0x0808dd3d
 80832c0:	0808eb69 	.word	0x0808eb69
 80832c4:	20000c1c 	.word	0x20000c1c
 80832c8:	0808dd40 	.word	0x0808dd40
 80832cc:	0808dd42 	.word	0x0808dd42
 80832d0:	0808dd55 	.word	0x0808dd55
 80832d4:	20000514 	.word	0x20000514
 80832d8:	0808dd74 	.word	0x0808dd74
 80832dc:	200021dc 	.word	0x200021dc
 80832e0:	0808dd7b 	.word	0x0808dd7b
 80832e4:	200005d8 	.word	0x200005d8

080832e8 <_ZN5Print5printIiLi0EEEjT_i>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
 80832e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80832ec:	4607      	mov	r7, r0
 80832ee:	460c      	mov	r4, r1
{
    if (base == 0) {
 80832f0:	4615      	mov	r5, r2
 80832f2:	b92a      	cbnz	r2, 8083300 <_ZN5Print5printIiLi0EEEjT_i+0x18>
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
 80832f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return write(n);
 80832f8:	6803      	ldr	r3, [r0, #0]
 80832fa:	b2c9      	uxtb	r1, r1
 80832fc:	689b      	ldr	r3, [r3, #8]
 80832fe:	4718      	bx	r3
        if (n < 0 && base == 10) {
 8083300:	2900      	cmp	r1, #0
 8083302:	da0d      	bge.n	8083320 <_ZN5Print5printIiLi0EEEjT_i+0x38>
 8083304:	2a0a      	cmp	r2, #10
 8083306:	d10b      	bne.n	8083320 <_ZN5Print5printIiLi0EEEjT_i+0x38>
            t = print('-');
 8083308:	212d      	movs	r1, #45	; 0x2d
 808330a:	f005 f80b 	bl	8088324 <_ZN5Print5printEc>
 808330e:	4606      	mov	r6, r0
            val = -n;
 8083310:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
 8083312:	4638      	mov	r0, r7
 8083314:	b2ea      	uxtb	r2, r5
 8083316:	f005 f828 	bl	808836a <_ZN5Print11printNumberEmh>
}
 808331a:	4430      	add	r0, r6
 808331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            val = n;
 8083320:	4621      	mov	r1, r4
        size_t t = 0;
 8083322:	2600      	movs	r6, #0
 8083324:	e7f5      	b.n	8083312 <_ZN5Print5printIiLi0EEEjT_i+0x2a>

08083326 <_ZN5Print7printlnIiLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 8083326:	b538      	push	{r3, r4, r5, lr}
 8083328:	4605      	mov	r5, r0
        size_t n = print(b, base);
 808332a:	f7ff ffdd 	bl	80832e8 <_ZN5Print5printIiLi0EEEjT_i>
 808332e:	4604      	mov	r4, r0
        n += println();
 8083330:	4628      	mov	r0, r5
 8083332:	f004 fffa 	bl	808832a <_ZN5Print7printlnEv>
    }
 8083336:	4420      	add	r0, r4
 8083338:	bd38      	pop	{r3, r4, r5, pc}
	...

0808333c <setup>:
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 808333c:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
{
 8083340:	b570      	push	{r4, r5, r6, lr}
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8083342:	4bc4      	ldr	r3, [pc, #784]	; (8083654 <setup+0x318>)
{
 8083344:	b0a8      	sub	sp, #160	; 0xa0
    String init_log;
 8083346:	49c4      	ldr	r1, [pc, #784]	; (8083658 <setup+0x31c>)
    pinMode(lmp91000_1_en, OUTPUT);
 8083348:	4dc4      	ldr	r5, [pc, #784]	; (808365c <setup+0x320>)
    String init_log;
 808334a:	a801      	add	r0, sp, #4
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 808334c:	801a      	strh	r2, [r3, #0]
    pinMode(lmp91000_2_en, OUTPUT);
 808334e:	4cc4      	ldr	r4, [pc, #784]	; (8083660 <setup+0x324>)
    String init_log;
 8083350:	f004 fd82 	bl	8087e58 <_ZN6StringC1EPKc>
    setADCSampleTime(ADC_SampleTime_480Cycles);
 8083354:	2007      	movs	r0, #7
 8083356:	f005 fb67 	bl	8088a28 <setADCSampleTime>
    pinMode(lmp91000_1_en, OUTPUT);
 808335a:	2101      	movs	r1, #1
 808335c:	8828      	ldrh	r0, [r5, #0]
 808335e:	f006 faf7 	bl	8089950 <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 8083362:	2101      	movs	r1, #1
 8083364:	8820      	ldrh	r0, [r4, #0]
 8083366:	f006 faf3 	bl	8089950 <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 808336a:	4bbe      	ldr	r3, [pc, #760]	; (8083664 <setup+0x328>)
 808336c:	2101      	movs	r1, #1
 808336e:	8818      	ldrh	r0, [r3, #0]
 8083370:	f006 faee 	bl	8089950 <pinMode>
    pinMode(serial4Enabler, OUTPUT);
 8083374:	4bbc      	ldr	r3, [pc, #752]	; (8083668 <setup+0x32c>)
 8083376:	2101      	movs	r1, #1
 8083378:	8818      	ldrh	r0, [r3, #0]
 808337a:	f006 fae9 	bl	8089950 <pinMode>
    pinMode(power_led_en, OUTPUT);
 808337e:	4bbb      	ldr	r3, [pc, #748]	; (808366c <setup+0x330>)
 8083380:	2101      	movs	r1, #1
 8083382:	8818      	ldrh	r0, [r3, #0]
 8083384:	f006 fae4 	bl	8089950 <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 8083388:	4bb9      	ldr	r3, [pc, #740]	; (8083670 <setup+0x334>)
 808338a:	2101      	movs	r1, #1
 808338c:	8818      	ldrh	r0, [r3, #0]
 808338e:	f006 fadf 	bl	8089950 <pinMode>
    pinMode(blower_en, OUTPUT);
 8083392:	4bb8      	ldr	r3, [pc, #736]	; (8083674 <setup+0x338>)
 8083394:	2101      	movs	r1, #1
 8083396:	8818      	ldrh	r0, [r3, #0]
 8083398:	f006 fada 	bl	8089950 <pinMode>
    pinMode(co2_en, OUTPUT);
 808339c:	4bb6      	ldr	r3, [pc, #728]	; (8083678 <setup+0x33c>)
 808339e:	2101      	movs	r1, #1
 80833a0:	8818      	ldrh	r0, [r3, #0]
 80833a2:	f006 fad5 	bl	8089950 <pinMode>
    readStoredVars();
 80833a6:	f7fd fd89 	bl	8080ebc <_Z14readStoredVarsv>
    pmic.begin();
 80833aa:	48b4      	ldr	r0, [pc, #720]	; (808367c <setup+0x340>)
 80833ac:	f004 fa21 	bl	80877f2 <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 80833b0:	f241 0170 	movw	r1, #4208	; 0x1070
 80833b4:	48b1      	ldr	r0, [pc, #708]	; (808367c <setup+0x340>)
 80833b6:	f004 fb50 	bl	8087a5a <_ZN4PMIC16setChargeVoltageEt>
    pmic.enableCharging();
 80833ba:	48b0      	ldr	r0, [pc, #704]	; (808367c <setup+0x340>)
 80833bc:	f004 fafc 	bl	80879b8 <_ZN4PMIC14enableChargingEv>
    powerCheck.loop();
 80833c0:	4eaf      	ldr	r6, [pc, #700]	; (8083680 <setup+0x344>)
    writeRegister(0, 0b00110100);
 80833c2:	2134      	movs	r1, #52	; 0x34
 80833c4:	2000      	movs	r0, #0
 80833c6:	f7fd fc35 	bl	8080c34 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 80833ca:	211b      	movs	r1, #27
 80833cc:	2001      	movs	r0, #1
 80833ce:	f7fd fc31 	bl	8080c34 <_Z13writeRegisterhh>
    powerCheck.loop();
 80833d2:	4630      	mov	r0, r6
 80833d4:	f001 fcf6 	bl	8084dc4 <_ZN10PowerCheck4loopEv>
    if (powerCheck.getHasPower() == 0) 
 80833d8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 80833dc:	2b00      	cmp	r3, #0
 80833de:	f040 8227 	bne.w	8083830 <setup+0x4f4>
        goToSleepBattery();
 80833e2:	f7fe fe83 	bl	80820ec <_Z16goToSleepBatteryv>
    digitalWrite(lmp91000_1_en, HIGH);
 80833e6:	2101      	movs	r1, #1
 80833e8:	8828      	ldrh	r0, [r5, #0]
 80833ea:	f006 fac2 	bl	8089972 <digitalWrite>
        extra.size = sizeof(extra);
 80833ee:	260c      	movs	r6, #12
    digitalWrite(lmp91000_2_en, HIGH);
 80833f0:	8820      	ldrh	r0, [r4, #0]
        spark_variable_t extra = {};
 80833f2:	2400      	movs	r4, #0
 80833f4:	2101      	movs	r1, #1
 80833f6:	f006 fabc 	bl	8089972 <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 80833fa:	4b9c      	ldr	r3, [pc, #624]	; (808366c <setup+0x330>)
 80833fc:	2101      	movs	r1, #1
 80833fe:	8818      	ldrh	r0, [r3, #0]
 8083400:	f006 fab7 	bl	8089972 <digitalWrite>
    digitalWrite(serial4Enabler, HIGH);
 8083404:	4b98      	ldr	r3, [pc, #608]	; (8083668 <setup+0x32c>)
 8083406:	2101      	movs	r1, #1
 8083408:	8818      	ldrh	r0, [r3, #0]
 808340a:	f006 fab2 	bl	8089972 <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 808340e:	4b98      	ldr	r3, [pc, #608]	; (8083670 <setup+0x334>)
 8083410:	2101      	movs	r1, #1
 8083412:	8818      	ldrh	r0, [r3, #0]
 8083414:	f006 faad 	bl	8089972 <digitalWrite>
    digitalWrite(blower_en, HIGH);
 8083418:	4b96      	ldr	r3, [pc, #600]	; (8083674 <setup+0x338>)
 808341a:	2101      	movs	r1, #1
 808341c:	8818      	ldrh	r0, [r3, #0]
 808341e:	f006 faa8 	bl	8089972 <digitalWrite>
    digitalWrite(co2_en, HIGH);
 8083422:	4b95      	ldr	r3, [pc, #596]	; (8083678 <setup+0x33c>)
 8083424:	2101      	movs	r1, #1
 8083426:	8818      	ldrh	r0, [r3, #0]
 8083428:	f006 faa3 	bl	8089972 <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 808342c:	4b8d      	ldr	r3, [pc, #564]	; (8083664 <setup+0x328>)
 808342e:	2101      	movs	r1, #1
 8083430:	8818      	ldrh	r0, [r3, #0]
 8083432:	f006 fa9e 	bl	8089972 <digitalWrite>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 8083436:	4a93      	ldr	r2, [pc, #588]	; (8083684 <setup+0x348>)
 8083438:	4993      	ldr	r1, [pc, #588]	; (8083688 <setup+0x34c>)
 808343a:	4894      	ldr	r0, [pc, #592]	; (808368c <setup+0x350>)
 808343c:	f005 fcb7 	bl	8088dae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8083440:	4a93      	ldr	r2, [pc, #588]	; (8083690 <setup+0x354>)
 8083442:	4994      	ldr	r1, [pc, #592]	; (8083694 <setup+0x358>)
 8083444:	4891      	ldr	r0, [pc, #580]	; (808368c <setup+0x350>)
 8083446:	f005 fcb2 	bl	8088dae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        extra.update = update_string_variable;
 808344a:	4b93      	ldr	r3, [pc, #588]	; (8083698 <setup+0x35c>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 808344c:	2204      	movs	r2, #4
 808344e:	4993      	ldr	r1, [pc, #588]	; (808369c <setup+0x360>)
        extra.update = update_string_variable;
 8083450:	9322      	str	r3, [sp, #136]	; 0x88
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 8083452:	4893      	ldr	r0, [pc, #588]	; (80836a0 <setup+0x364>)
 8083454:	ab21      	add	r3, sp, #132	; 0x84
        spark_variable_t extra = {};
 8083456:	9421      	str	r4, [sp, #132]	; 0x84
 8083458:	9423      	str	r4, [sp, #140]	; 0x8c
        extra.size = sizeof(extra);
 808345a:	f8ad 6084 	strh.w	r6, [sp, #132]	; 0x84
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 808345e:	f004 f929 	bl	80876b4 <spark_variable>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 8083462:	4623      	mov	r3, r4
 8083464:	2202      	movs	r2, #2
 8083466:	498f      	ldr	r1, [pc, #572]	; (80836a4 <setup+0x368>)
 8083468:	488f      	ldr	r0, [pc, #572]	; (80836a8 <setup+0x36c>)
 808346a:	f004 f923 	bl	80876b4 <spark_variable>
    Serial1.begin(9600);
 808346e:	f006 f8df 	bl	8089630 <_Z22__fetch_global_Serial1v>
 8083472:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8083476:	f006 f8d5 	bl	8089624 <_ZN11USARTSerial5beginEm>
    Serial4.begin(9600);
 808347a:	f7fd fb39 	bl	8080af0 <_Z22__fetch_global_Serial4v>
 808347e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8083482:	f006 f8cf 	bl	8089624 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 8083486:	f7fd fb6f 	bl	8080b68 <_Z22__fetch_global_Serial5v>
 808348a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808348e:	f006 f8c9 	bl	8089624 <_ZN11USARTSerial5beginEm>
    serBuf.setup();
 8083492:	4886      	ldr	r0, [pc, #536]	; (80836ac <setup+0x370>)
 8083494:	f003 fe32 	bl	80870fc <_ZN16SerialBufferBase5setupEv>
    delay(10000);
 8083498:	f242 7010 	movw	r0, #10000	; 0x2710
 808349c:	f005 fac6 	bl	8088a2c <delay>
    Serial.begin(9600);
 80834a0:	f005 ffa8 	bl	80893f4 <_Z16_fetch_usbserialv>
 80834a4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80834a8:	f005 ff8a 	bl	80893c0 <_ZN9USBSerial5beginEl>
    fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 80834ac:	4b80      	ldr	r3, [pc, #512]	; (80836b0 <setup+0x374>)
 80834ae:	220a      	movs	r2, #10
 80834b0:	6819      	ldr	r1, [r3, #0]
 80834b2:	a805      	add	r0, sp, #20
 80834b4:	f004 fd33 	bl	8087f1e <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
 80834b8:	a905      	add	r1, sp, #20
 80834ba:	a809      	add	r0, sp, #36	; 0x24
 80834bc:	f004 fd0b 	bl	8087ed6 <_ZN6StringC1ERKS_>
 80834c0:	497c      	ldr	r1, [pc, #496]	; (80836b4 <setup+0x378>)
 80834c2:	a809      	add	r0, sp, #36	; 0x24
 80834c4:	f004 fdae 	bl	8088024 <_ZplRK15StringSumHelperPKc>
 80834c8:	4604      	mov	r4, r0
 80834ca:	f005 fa97 	bl	80889fc <_ZN9TimeClass4yearEv>
 80834ce:	220a      	movs	r2, #10
 80834d0:	4601      	mov	r1, r0
 80834d2:	a80d      	add	r0, sp, #52	; 0x34
 80834d4:	f004 fd23 	bl	8087f1e <_ZN6StringC1Eih>
 80834d8:	a90d      	add	r1, sp, #52	; 0x34
 80834da:	4620      	mov	r0, r4
 80834dc:	f004 fd96 	bl	808800c <_ZplRK15StringSumHelperRK6String>
 80834e0:	4604      	mov	r4, r0
 80834e2:	f005 fa83 	bl	80889ec <_ZN9TimeClass5monthEv>
 80834e6:	220a      	movs	r2, #10
 80834e8:	4601      	mov	r1, r0
 80834ea:	a811      	add	r0, sp, #68	; 0x44
 80834ec:	f004 fd17 	bl	8087f1e <_ZN6StringC1Eih>
 80834f0:	a911      	add	r1, sp, #68	; 0x44
 80834f2:	4620      	mov	r0, r4
 80834f4:	f004 fd8a 	bl	808800c <_ZplRK15StringSumHelperRK6String>
 80834f8:	4604      	mov	r4, r0
 80834fa:	f005 fa6b 	bl	80889d4 <_ZN9TimeClass3dayEv>
 80834fe:	220a      	movs	r2, #10
 8083500:	4601      	mov	r1, r0
 8083502:	a815      	add	r0, sp, #84	; 0x54
 8083504:	f004 fd0b 	bl	8087f1e <_ZN6StringC1Eih>
 8083508:	4620      	mov	r0, r4
 808350a:	a915      	add	r1, sp, #84	; 0x54
 808350c:	f004 fd7e 	bl	808800c <_ZplRK15StringSumHelperRK6String>
 8083510:	4968      	ldr	r1, [pc, #416]	; (80836b4 <setup+0x378>)
 8083512:	f004 fd87 	bl	8088024 <_ZplRK15StringSumHelperPKc>
 8083516:	4604      	mov	r4, r0
 8083518:	f005 fa38 	bl	808898c <_ZN9TimeClass4hourEv>
 808351c:	220a      	movs	r2, #10
 808351e:	4601      	mov	r1, r0
 8083520:	a819      	add	r0, sp, #100	; 0x64
 8083522:	f004 fcfc 	bl	8087f1e <_ZN6StringC1Eih>
 8083526:	a919      	add	r1, sp, #100	; 0x64
 8083528:	4620      	mov	r0, r4
 808352a:	f004 fd6f 	bl	808800c <_ZplRK15StringSumHelperRK6String>
 808352e:	4604      	mov	r4, r0
 8083530:	f005 fa38 	bl	80889a4 <_ZN9TimeClass6minuteEv>
 8083534:	220a      	movs	r2, #10
 8083536:	4601      	mov	r1, r0
 8083538:	a81d      	add	r0, sp, #116	; 0x74
 808353a:	f004 fcf0 	bl	8087f1e <_ZN6StringC1Eih>
 808353e:	a91d      	add	r1, sp, #116	; 0x74
 8083540:	4620      	mov	r0, r4
 8083542:	f004 fd63 	bl	808800c <_ZplRK15StringSumHelperRK6String>
 8083546:	4604      	mov	r4, r0
 8083548:	f005 fa38 	bl	80889bc <_ZN9TimeClass6secondEv>
 808354c:	220a      	movs	r2, #10
 808354e:	4601      	mov	r1, r0
 8083550:	a821      	add	r0, sp, #132	; 0x84
 8083552:	f004 fce4 	bl	8087f1e <_ZN6StringC1Eih>
 8083556:	4620      	mov	r0, r4
 8083558:	a921      	add	r1, sp, #132	; 0x84
 808355a:	f004 fd57 	bl	808800c <_ZplRK15StringSumHelperRK6String>
 808355e:	4956      	ldr	r1, [pc, #344]	; (80836b8 <setup+0x37c>)
 8083560:	f004 fd60 	bl	8088024 <_ZplRK15StringSumHelperPKc>
 8083564:	4c55      	ldr	r4, [pc, #340]	; (80836bc <setup+0x380>)
 8083566:	4601      	mov	r1, r0
 8083568:	4620      	mov	r0, r4
 808356a:	f004 fca5 	bl	8087eb8 <_ZN6StringaSERKS_>
 808356e:	a821      	add	r0, sp, #132	; 0x84
 8083570:	f004 fc28 	bl	8087dc4 <_ZN6StringD1Ev>
 8083574:	a81d      	add	r0, sp, #116	; 0x74
 8083576:	f004 fc25 	bl	8087dc4 <_ZN6StringD1Ev>
 808357a:	a819      	add	r0, sp, #100	; 0x64
 808357c:	f004 fc22 	bl	8087dc4 <_ZN6StringD1Ev>
 8083580:	a815      	add	r0, sp, #84	; 0x54
 8083582:	f004 fc1f 	bl	8087dc4 <_ZN6StringD1Ev>
 8083586:	a811      	add	r0, sp, #68	; 0x44
 8083588:	f004 fc1c 	bl	8087dc4 <_ZN6StringD1Ev>
 808358c:	a80d      	add	r0, sp, #52	; 0x34
 808358e:	f004 fc19 	bl	8087dc4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 8083592:	a809      	add	r0, sp, #36	; 0x24
 8083594:	f004 fc16 	bl	8087dc4 <_ZN6StringD1Ev>
 8083598:	a805      	add	r0, sp, #20
 808359a:	f004 fc13 	bl	8087dc4 <_ZN6StringD1Ev>
    Serial.println("Checking for sd card");
 808359e:	f005 ff29 	bl	80893f4 <_Z16_fetch_usbserialv>
 80835a2:	4947      	ldr	r1, [pc, #284]	; (80836c0 <setup+0x384>)
 80835a4:	f004 fecd 	bl	8088342 <_ZN5Print7printlnEPKc>
	StringSumHelper(const char *p) : String(p) {}
 80835a8:	4946      	ldr	r1, [pc, #280]	; (80836c4 <setup+0x388>)
 80835aa:	a821      	add	r0, sp, #132	; 0x84
 80835ac:	f004 fc54 	bl	8087e58 <_ZN6StringC1EPKc>
    logFileName = "log_" + fileName;
 80835b0:	4621      	mov	r1, r4
 80835b2:	a821      	add	r0, sp, #132	; 0x84
 80835b4:	f004 fd2a 	bl	808800c <_ZplRK15StringSumHelperRK6String>
 80835b8:	4601      	mov	r1, r0
 80835ba:	4843      	ldr	r0, [pc, #268]	; (80836c8 <setup+0x38c>)
 80835bc:	f004 fc7c 	bl	8087eb8 <_ZN6StringaSERKS_>
class StringSumHelper : public String
 80835c0:	a821      	add	r0, sp, #132	; 0x84
 80835c2:	f004 fbff 	bl	8087dc4 <_ZN6StringD1Ev>
 80835c6:	4941      	ldr	r1, [pc, #260]	; (80836cc <setup+0x390>)
 80835c8:	2302      	movs	r3, #2
 80835ca:	4632      	mov	r2, r6
 80835cc:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 80835d0:	f7fd fb06 	bl	8080be0 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS)) 
 80835d4:	2800      	cmp	r0, #0
 80835d6:	f000 813f 	beq.w	8083858 <setup+0x51c>
        Serial.print("Created new file to log to uSD card: ");
 80835da:	f005 ff0b 	bl	80893f4 <_Z16_fetch_usbserialv>
 80835de:	493c      	ldr	r1, [pc, #240]	; (80836d0 <setup+0x394>)
 80835e0:	f004 fe9c 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(fileName);
 80835e4:	f005 ff06 	bl	80893f4 <_Z16_fetch_usbserialv>
 80835e8:	6821      	ldr	r1, [r4, #0]
    if (debugging_enabled)
 80835ea:	4c3a      	ldr	r4, [pc, #232]	; (80836d4 <setup+0x398>)
        Serial.println("No uSD card detected.");
 80835ec:	f004 fea9 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.println("Starting LMP91000 CO initialization");
 80835f0:	f005 ff00 	bl	80893f4 <_Z16_fetch_usbserialv>
 80835f4:	4938      	ldr	r1, [pc, #224]	; (80836d8 <setup+0x39c>)
 80835f6:	f004 fea4 	bl	8088342 <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 80835fa:	6823      	ldr	r3, [r4, #0]
 80835fc:	b14b      	cbz	r3, 8083612 <setup+0x2d6>
        writeLogFile("Starting LMP91000 CO initialization");
 80835fe:	4936      	ldr	r1, [pc, #216]	; (80836d8 <setup+0x39c>)
 8083600:	a821      	add	r0, sp, #132	; 0x84
 8083602:	f004 fc29 	bl	8087e58 <_ZN6StringC1EPKc>
 8083606:	a821      	add	r0, sp, #132	; 0x84
 8083608:	f7fe f872 	bl	80816f0 <_Z12writeLogFile6String>
 808360c:	a821      	add	r0, sp, #132	; 0x84
 808360e:	f004 fbd9 	bl	8087dc4 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 8083612:	f006 fa31 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8083616:	f006 f885 	bl	8089724 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 808361a:	2100      	movs	r1, #0
 808361c:	8828      	ldrh	r0, [r5, #0]
 808361e:	f006 f9a8 	bl	8089972 <digitalWrite>
    if (lmp91000_1.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0) 
 8083622:	2303      	movs	r3, #3
 8083624:	22b0      	movs	r2, #176	; 0xb0
 8083626:	2118      	movs	r1, #24
 8083628:	482c      	ldr	r0, [pc, #176]	; (80836dc <setup+0x3a0>)
 808362a:	f001 fb75 	bl	8084d18 <_ZN8LMP910009configureEhhh>
 808362e:	2800      	cmp	r0, #0
 8083630:	f040 8116 	bne.w	8083860 <setup+0x524>
        Serial.println("Couldn't communicate with LMP91000_1 for CO");
 8083634:	f005 fede 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083638:	4929      	ldr	r1, [pc, #164]	; (80836e0 <setup+0x3a4>)
 808363a:	f004 fe82 	bl	8088342 <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 808363e:	6823      	ldr	r3, [r4, #0]
 8083640:	2b00      	cmp	r3, #0
 8083642:	d052      	beq.n	80836ea <setup+0x3ae>
            writeLogFile("Couldn't communicate with LMP91000_1 for CO");
 8083644:	4926      	ldr	r1, [pc, #152]	; (80836e0 <setup+0x3a4>)
 8083646:	a821      	add	r0, sp, #132	; 0x84
 8083648:	f004 fc06 	bl	8087e58 <_ZN6StringC1EPKc>
 808364c:	a821      	add	r0, sp, #132	; 0x84
 808364e:	f7fe f84f 	bl	80816f0 <_Z12writeLogFile6String>
 8083652:	e047      	b.n	80836e4 <setup+0x3a8>
 8083654:	20001c60 	.word	0x20001c60
 8083658:	0808eb69 	.word	0x0808eb69
 808365c:	200000c0 	.word	0x200000c0
 8083660:	200000c4 	.word	0x200000c4
 8083664:	20000094 	.word	0x20000094
 8083668:	200000cc 	.word	0x200000cc
 808366c:	200000c8 	.word	0x200000c8
 8083670:	20000090 	.word	0x20000090
 8083674:	20000088 	.word	0x20000088
 8083678:	2000008c 	.word	0x2000008c
 808367c:	20000768 	.word	0x20000768
 8083680:	2000076c 	.word	0x2000076c
 8083684:	0808dda8 	.word	0x0808dda8
 8083688:	08080a37 	.word	0x08080a37
 808368c:	08088d83 	.word	0x08088d83
 8083690:	0808ddb6 	.word	0x0808ddb6
 8083694:	08080995 	.word	0x08080995
 8083698:	08080943 	.word	0x08080943
 808369c:	200005d8 	.word	0x200005d8
 80836a0:	0808ddc3 	.word	0x0808ddc3
 80836a4:	200002d0 	.word	0x200002d0
 80836a8:	0808ddcf 	.word	0x0808ddcf
 80836ac:	20000c1c 	.word	0x20000c1c
 80836b0:	20000080 	.word	0x20000080
 80836b4:	0808ddf5 	.word	0x0808ddf5
 80836b8:	0808ddd8 	.word	0x0808ddd8
 80836bc:	20000648 	.word	0x20000648
 80836c0:	0808dddd 	.word	0x0808dddd
 80836c4:	0808ddf2 	.word	0x0808ddf2
 80836c8:	200006f8 	.word	0x200006f8
 80836cc:	20000c10 	.word	0x20000c10
 80836d0:	0808ddf7 	.word	0x0808ddf7
 80836d4:	200005d4 	.word	0x200005d4
 80836d8:	0808de33 	.word	0x0808de33
 80836dc:	200006b1 	.word	0x200006b1
 80836e0:	0808de57 	.word	0x0808de57
 80836e4:	a821      	add	r0, sp, #132	; 0x84
 80836e6:	f004 fb6d 	bl	8087dc4 <_ZN6StringD1Ev>
    ads1.begin();
 80836ea:	4878      	ldr	r0, [pc, #480]	; (80838cc <setup+0x590>)
 80836ec:	f001 fc01 	bl	8084ef2 <_ZN16Adafruit_ADS10155beginEv>
    if (Wire.requestFrom(0x49, 1) == 0) 
 80836f0:	f006 f9c2 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80836f4:	2201      	movs	r2, #1
 80836f6:	2149      	movs	r1, #73	; 0x49
 80836f8:	f006 f843 	bl	8089782 <_ZN7TwoWire11requestFromEhj>
 80836fc:	2800      	cmp	r0, #0
 80836fe:	f040 80c5 	bne.w	808388c <setup+0x550>
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8083702:	f005 fe77 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083706:	4972      	ldr	r1, [pc, #456]	; (80838d0 <setup+0x594>)
 8083708:	f004 fe1b 	bl	8088342 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 808370c:	6823      	ldr	r3, [r4, #0]
 808370e:	b14b      	cbz	r3, 8083724 <setup+0x3e8>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8083710:	496f      	ldr	r1, [pc, #444]	; (80838d0 <setup+0x594>)
 8083712:	a821      	add	r0, sp, #132	; 0x84
 8083714:	f004 fba0 	bl	8087e58 <_ZN6StringC1EPKc>
 8083718:	a821      	add	r0, sp, #132	; 0x84
 808371a:	f7fd ffe9 	bl	80816f0 <_Z12writeLogFile6String>
 808371e:	a821      	add	r0, sp, #132	; 0x84
 8083720:	f004 fb50 	bl	8087dc4 <_ZN6StringD1Ev>
    Serial.println("Starting LMP91000_2 initialization");
 8083724:	f005 fe66 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083728:	496a      	ldr	r1, [pc, #424]	; (80838d4 <setup+0x598>)
 808372a:	f004 fe0a 	bl	8088342 <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 808372e:	6823      	ldr	r3, [r4, #0]
 8083730:	b14b      	cbz	r3, 8083746 <setup+0x40a>
        writeLogFile("Starting LMP91000_2 initialization");
 8083732:	4968      	ldr	r1, [pc, #416]	; (80838d4 <setup+0x598>)
 8083734:	a821      	add	r0, sp, #132	; 0x84
 8083736:	f004 fb8f 	bl	8087e58 <_ZN6StringC1EPKc>
 808373a:	a821      	add	r0, sp, #132	; 0x84
 808373c:	f7fd ffd8 	bl	80816f0 <_Z12writeLogFile6String>
 8083740:	a821      	add	r0, sp, #132	; 0x84
 8083742:	f004 fb3f 	bl	8087dc4 <_ZN6StringD1Ev>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8083746:	4d64      	ldr	r5, [pc, #400]	; (80838d8 <setup+0x59c>)
    Wire.begin();   //this must be done for the LMP91000
 8083748:	f006 f996 	bl	8089a78 <_Z19__fetch_global_Wirev>
 808374c:	f005 ffea 	bl	8089724 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8083750:	2100      	movs	r1, #0
 8083752:	8828      	ldrh	r0, [r5, #0]
 8083754:	f006 f90d 	bl	8089972 <digitalWrite>
    if (lmp91000_2.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 8083758:	2303      	movs	r3, #3
 808375a:	22b0      	movs	r2, #176	; 0xb0
 808375c:	2118      	movs	r1, #24
 808375e:	485f      	ldr	r0, [pc, #380]	; (80838dc <setup+0x5a0>)
 8083760:	f001 fada 	bl	8084d18 <_ZN8LMP910009configureEhhh>
 8083764:	2800      	cmp	r0, #0
 8083766:	f040 8096 	bne.w	8083896 <setup+0x55a>
        Serial.println("Couldn't communicate with LMP91000 for 2");
 808376a:	f005 fe43 	bl	80893f4 <_Z16_fetch_usbserialv>
 808376e:	495c      	ldr	r1, [pc, #368]	; (80838e0 <setup+0x5a4>)
 8083770:	f004 fde7 	bl	8088342 <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000 for 2");
 8083774:	495a      	ldr	r1, [pc, #360]	; (80838e0 <setup+0x5a4>)
 8083776:	a821      	add	r0, sp, #132	; 0x84
 8083778:	f004 fb6e 	bl	8087e58 <_ZN6StringC1EPKc>
 808377c:	a821      	add	r0, sp, #132	; 0x84
 808377e:	f7fd ffb7 	bl	80816f0 <_Z12writeLogFile6String>
 8083782:	a821      	add	r0, sp, #132	; 0x84
 8083784:	f004 fb1e 	bl	8087dc4 <_ZN6StringD1Ev>
    ads2.begin();
 8083788:	4856      	ldr	r0, [pc, #344]	; (80838e4 <setup+0x5a8>)
 808378a:	f001 fbb2 	bl	8084ef2 <_ZN16Adafruit_ADS10155beginEv>
    if (Wire.requestFrom(0x4A, 1) == 0) 
 808378e:	f006 f973 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8083792:	2201      	movs	r2, #1
 8083794:	214a      	movs	r1, #74	; 0x4a
 8083796:	f005 fff4 	bl	8089782 <_ZN7TwoWire11requestFromEhj>
 808379a:	2800      	cmp	r0, #0
 808379c:	f040 8091 	bne.w	80838c2 <setup+0x586>
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 80837a0:	f005 fe28 	bl	80893f4 <_Z16_fetch_usbserialv>
 80837a4:	494a      	ldr	r1, [pc, #296]	; (80838d0 <setup+0x594>)
 80837a6:	f004 fdcc 	bl	8088342 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 80837aa:	6823      	ldr	r3, [r4, #0]
 80837ac:	b14b      	cbz	r3, 80837c2 <setup+0x486>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 80837ae:	4948      	ldr	r1, [pc, #288]	; (80838d0 <setup+0x594>)
 80837b0:	a821      	add	r0, sp, #132	; 0x84
 80837b2:	f004 fb51 	bl	8087e58 <_ZN6StringC1EPKc>
 80837b6:	a821      	add	r0, sp, #132	; 0x84
 80837b8:	f7fd ff9a 	bl	80816f0 <_Z12writeLogFile6String>
 80837bc:	a821      	add	r0, sp, #132	; 0x84
 80837be:	f004 fb01 	bl	8087dc4 <_ZN6StringD1Ev>
    resetESP();
 80837c2:	f7fe fcef 	bl	80821a4 <_Z8resetESPv>
    Serial.println("ESP reset!");
 80837c6:	f005 fe15 	bl	80893f4 <_Z16_fetch_usbserialv>
 80837ca:	4947      	ldr	r1, [pc, #284]	; (80838e8 <setup+0x5ac>)
 80837cc:	f004 fdb9 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("FW Version: ");
 80837d0:	f005 fe10 	bl	80893f4 <_Z16_fetch_usbserialv>
 80837d4:	4945      	ldr	r1, [pc, #276]	; (80838ec <setup+0x5b0>)
 80837d6:	f004 fda1 	bl	808831c <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 80837da:	f005 fe0b 	bl	80893f4 <_Z16_fetch_usbserialv>
 80837de:	220a      	movs	r2, #10
 80837e0:	2146      	movs	r1, #70	; 0x46
 80837e2:	f7ff fda0 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print("Build: ");
 80837e6:	f005 fe05 	bl	80893f4 <_Z16_fetch_usbserialv>
 80837ea:	4941      	ldr	r1, [pc, #260]	; (80838f0 <setup+0x5b4>)
 80837ec:	f004 fd96 	bl	808831c <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 80837f0:	f005 fe00 	bl	80893f4 <_Z16_fetch_usbserialv>
 80837f4:	220a      	movs	r2, #10
 80837f6:	210d      	movs	r1, #13
 80837f8:	f7ff fd95 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
    enableContinuousGPS();
 80837fc:	f7fd fd94 	bl	8081328 <_Z19enableContinuousGPSv>
#define SYSTEM_VERSION_200
#define SYSTEM_VERSION_201ALPHA1
#define SYSTEM_VERSION_201ALPHA2
#define SYSTEM_VERSION_201

typedef struct __attribute__((packed)) SystemVersionInfo
 8083800:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8083802:	2100      	movs	r1, #0
 8083804:	a821      	add	r0, sp, #132	; 0x84
 8083806:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 808380a:	f003 fec7 	bl	808759c <system_version_info>
        return String(info.versionString);
 808380e:	a923      	add	r1, sp, #140	; 0x8c
 8083810:	a81d      	add	r0, sp, #116	; 0x74
 8083812:	f004 fb21 	bl	8087e58 <_ZN6StringC1EPKc>
    Log.info("System version: %s", (const char*)System.version());
 8083816:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8083818:	4936      	ldr	r1, [pc, #216]	; (80838f4 <setup+0x5b8>)
 808381a:	4837      	ldr	r0, [pc, #220]	; (80838f8 <setup+0x5bc>)
 808381c:	f7fd f951 	bl	8080ac2 <_ZNK5spark6Logger4infoEPKcz>
 8083820:	a81d      	add	r0, sp, #116	; 0x74
 8083822:	f004 facf 	bl	8087dc4 <_ZN6StringD1Ev>
    String init_log;
 8083826:	a801      	add	r0, sp, #4
 8083828:	f004 facc 	bl	8087dc4 <_ZN6StringD1Ev>
}
 808382c:	b028      	add	sp, #160	; 0xa0
 808382e:	bd70      	pop	{r4, r5, r6, pc}
    else if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 8083830:	4b32      	ldr	r3, [pc, #200]	; (80838fc <setup+0x5c0>)
 8083832:	681b      	ldr	r3, [r3, #0]
 8083834:	2b01      	cmp	r3, #1
 8083836:	f47f add6 	bne.w	80833e6 <setup+0xaa>
 808383a:	4831      	ldr	r0, [pc, #196]	; (8083900 <setup+0x5c4>)
 808383c:	f005 f980 	bl	8088b40 <_ZN9FuelGauge6getSoCEv>
 8083840:	4930      	ldr	r1, [pc, #192]	; (8083904 <setup+0x5c8>)
 8083842:	f007 f92b 	bl	808aa9c <__aeabi_fcmplt>
 8083846:	2800      	cmp	r0, #0
 8083848:	f43f adcd 	beq.w	80833e6 <setup+0xaa>
 808384c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 8083850:	2b00      	cmp	r3, #0
 8083852:	f47f adc8 	bne.w	80833e6 <setup+0xaa>
 8083856:	e5c4      	b.n	80833e2 <setup+0xa6>
        Serial.println("No uSD card detected.");
 8083858:	f005 fdcc 	bl	80893f4 <_Z16_fetch_usbserialv>
 808385c:	492a      	ldr	r1, [pc, #168]	; (8083908 <setup+0x5cc>)
 808385e:	e6c4      	b.n	80835ea <setup+0x2ae>
        Serial.println("Initialized LMP91000_1 for CO");
 8083860:	f005 fdc8 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083864:	4929      	ldr	r1, [pc, #164]	; (808390c <setup+0x5d0>)
 8083866:	f004 fd6c 	bl	8088342 <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 808386a:	6823      	ldr	r3, [r4, #0]
 808386c:	b14b      	cbz	r3, 8083882 <setup+0x546>
            writeLogFile("Initialized LMP91000 for CO");
 808386e:	4928      	ldr	r1, [pc, #160]	; (8083910 <setup+0x5d4>)
 8083870:	a821      	add	r0, sp, #132	; 0x84
 8083872:	f004 faf1 	bl	8087e58 <_ZN6StringC1EPKc>
 8083876:	a821      	add	r0, sp, #132	; 0x84
 8083878:	f7fd ff3a 	bl	80816f0 <_Z12writeLogFile6String>
 808387c:	a821      	add	r0, sp, #132	; 0x84
 808387e:	f004 faa1 	bl	8087dc4 <_ZN6StringD1Ev>
        digitalWrite(lmp91000_1_en, HIGH);  //disable
 8083882:	2101      	movs	r1, #1
 8083884:	8828      	ldrh	r0, [r5, #0]
 8083886:	f006 f874 	bl	8089972 <digitalWrite>
 808388a:	e72e      	b.n	80836ea <setup+0x3ae>
        ads1.setGain(GAIN_TWOTHIRDS);
 808388c:	2100      	movs	r1, #0
 808388e:	480f      	ldr	r0, [pc, #60]	; (80838cc <setup+0x590>)
 8083890:	f001 fb36 	bl	8084f00 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 8083894:	e746      	b.n	8083724 <setup+0x3e8>
        Serial.println("Initialized LMP91000 for CO 2");
 8083896:	f005 fdad 	bl	80893f4 <_Z16_fetch_usbserialv>
 808389a:	491e      	ldr	r1, [pc, #120]	; (8083914 <setup+0x5d8>)
 808389c:	f004 fd51 	bl	8088342 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 80838a0:	6823      	ldr	r3, [r4, #0]
 80838a2:	b14b      	cbz	r3, 80838b8 <setup+0x57c>
            writeLogFile("Initialized LMP91000 for CO 2");
 80838a4:	491b      	ldr	r1, [pc, #108]	; (8083914 <setup+0x5d8>)
 80838a6:	a821      	add	r0, sp, #132	; 0x84
 80838a8:	f004 fad6 	bl	8087e58 <_ZN6StringC1EPKc>
 80838ac:	a821      	add	r0, sp, #132	; 0x84
 80838ae:	f7fd ff1f 	bl	80816f0 <_Z12writeLogFile6String>
 80838b2:	a821      	add	r0, sp, #132	; 0x84
 80838b4:	f004 fa86 	bl	8087dc4 <_ZN6StringD1Ev>
        digitalWrite(lmp91000_2_en, HIGH);  //disable
 80838b8:	2101      	movs	r1, #1
 80838ba:	8828      	ldrh	r0, [r5, #0]
 80838bc:	f006 f859 	bl	8089972 <digitalWrite>
 80838c0:	e762      	b.n	8083788 <setup+0x44c>
        ads2.setGain(GAIN_TWOTHIRDS);
 80838c2:	2100      	movs	r1, #0
 80838c4:	4807      	ldr	r0, [pc, #28]	; (80838e4 <setup+0x5a8>)
 80838c6:	f001 fb1b 	bl	8084f00 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
 80838ca:	e77a      	b.n	80837c2 <setup+0x486>
 80838cc:	20000544 	.word	0x20000544
 80838d0:	0808debd 	.word	0x0808debd
 80838d4:	0808def0 	.word	0x0808def0
 80838d8:	200000c4 	.word	0x200000c4
 80838dc:	200006b2 	.word	0x200006b2
 80838e0:	0808df13 	.word	0x0808df13
 80838e4:	2000054a 	.word	0x2000054a
 80838e8:	0808df5a 	.word	0x0808df5a
 80838ec:	0808df65 	.word	0x0808df65
 80838f0:	0808df72 	.word	0x0808df72
 80838f4:	0808df7a 	.word	0x0808df7a
 80838f8:	20001cf0 	.word	0x20001cf0
 80838fc:	20000550 	.word	0x20000550
 8083900:	20000658 	.word	0x20000658
 8083904:	41a00000 	.word	0x41a00000
 8083908:	0808de1d 	.word	0x0808de1d
 808390c:	0808de83 	.word	0x0808de83
 8083910:	0808dea1 	.word	0x0808dea1
 8083914:	0808df3c 	.word	0x0808df3c

08083918 <_Z17serialGetDeviceIdv>:
{
 8083918:	b530      	push	{r4, r5, lr}
 808391a:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 808391c:	f005 fd6a 	bl	80893f4 <_Z16_fetch_usbserialv>
    Serial.println(DEVICE_id);
 8083920:	4d35      	ldr	r5, [pc, #212]	; (80839f8 <_Z17serialGetDeviceIdv+0xe0>)
    Serial.println();
 8083922:	f004 fd02 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8083926:	f005 fd65 	bl	80893f4 <_Z16_fetch_usbserialv>
 808392a:	4934      	ldr	r1, [pc, #208]	; (80839fc <_Z17serialGetDeviceIdv+0xe4>)
 808392c:	f004 fcf6 	bl	808831c <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 8083930:	f005 fd60 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083934:	220a      	movs	r2, #10
 8083936:	6829      	ldr	r1, [r5, #0]
 8083938:	f7ff fcf5 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("Please enter password in order to change the ID");
 808393c:	f005 fd5a 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083940:	492f      	ldr	r1, [pc, #188]	; (8083a00 <_Z17serialGetDeviceIdv+0xe8>)
 8083942:	f004 fcfe 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083946:	f005 fd55 	bl	80893f4 <_Z16_fetch_usbserialv>
 808394a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808394e:	f004 fe4b 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083952:	f005 fd4f 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083956:	220d      	movs	r2, #13
 8083958:	4601      	mov	r1, r0
 808395a:	4668      	mov	r0, sp
 808395c:	f004 fe5a 	bl	8088614 <_ZN6Stream15readStringUntilEc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8083960:	4668      	mov	r0, sp
 8083962:	4928      	ldr	r1, [pc, #160]	; (8083a04 <_Z17serialGetDeviceIdv+0xec>)
 8083964:	f004 fb72 	bl	808804c <_ZNK6String6equalsEPKc>
    if (tempString == SERIAL_PASSWORD)
 8083968:	2800      	cmp	r0, #0
 808396a:	d03e      	beq.n	80839ea <_Z17serialGetDeviceIdv+0xd2>
        Serial.println("Password correct!");
 808396c:	f005 fd42 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083970:	4925      	ldr	r1, [pc, #148]	; (8083a08 <_Z17serialGetDeviceIdv+0xf0>)
 8083972:	f004 fce6 	bl	8088342 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 8083976:	f005 fd3d 	bl	80893f4 <_Z16_fetch_usbserialv>
 808397a:	4924      	ldr	r1, [pc, #144]	; (8083a0c <_Z17serialGetDeviceIdv+0xf4>)
 808397c:	f004 fce1 	bl	8088342 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8083980:	f005 fd38 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083984:	220d      	movs	r2, #13
 8083986:	4601      	mov	r1, r0
 8083988:	a804      	add	r0, sp, #16
 808398a:	f004 fe43 	bl	8088614 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 808398e:	a804      	add	r0, sp, #16
 8083990:	f004 fc77 	bl	8088282 <_ZNK6String5toIntEv>
 8083994:	4604      	mov	r4, r0
        Serial.println("");
 8083996:	f005 fd2d 	bl	80893f4 <_Z16_fetch_usbserialv>
 808399a:	491d      	ldr	r1, [pc, #116]	; (8083a10 <_Z17serialGetDeviceIdv+0xf8>)
 808399c:	f004 fcd1 	bl	8088342 <_ZN5Print7printlnEPKc>
        if (tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER)
 80839a0:	f242 730c 	movw	r3, #9996	; 0x270c
 80839a4:	1ea2      	subs	r2, r4, #2
 80839a6:	429a      	cmp	r2, r3
 80839a8:	d819      	bhi.n	80839de <_Z17serialGetDeviceIdv+0xc6>
            Serial.print("\n\rNew Device ID:");
 80839aa:	f005 fd23 	bl	80893f4 <_Z16_fetch_usbserialv>
 80839ae:	4919      	ldr	r1, [pc, #100]	; (8083a14 <_Z17serialGetDeviceIdv+0xfc>)
 80839b0:	f004 fcb4 	bl	808831c <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 80839b4:	f005 fd1e 	bl	80893f4 <_Z16_fetch_usbserialv>
 80839b8:	4621      	mov	r1, r4
 80839ba:	220a      	movs	r2, #10
 80839bc:	f7ff fcb3 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
            DEVICE_id = tempValue;
 80839c0:	602c      	str	r4, [r5, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 80839c2:	f006 f807 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80839c6:	4629      	mov	r1, r5
 80839c8:	2000      	movs	r0, #0
 80839ca:	f7fd f82d 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
        String tempString = Serial.readStringUntil('\r');
 80839ce:	a804      	add	r0, sp, #16
 80839d0:	f004 f9f8 	bl	8087dc4 <_ZN6StringD1Ev>
    String tempString = Serial.readStringUntil('\r');
 80839d4:	4668      	mov	r0, sp
 80839d6:	f004 f9f5 	bl	8087dc4 <_ZN6StringD1Ev>
}
 80839da:	b009      	add	sp, #36	; 0x24
 80839dc:	bd30      	pop	{r4, r5, pc}
            Serial.println("\n\rInvalid value!");
 80839de:	f005 fd09 	bl	80893f4 <_Z16_fetch_usbserialv>
 80839e2:	490d      	ldr	r1, [pc, #52]	; (8083a18 <_Z17serialGetDeviceIdv+0x100>)
 80839e4:	f004 fcad 	bl	8088342 <_ZN5Print7printlnEPKc>
 80839e8:	e7f1      	b.n	80839ce <_Z17serialGetDeviceIdv+0xb6>
        Serial.println("\n\rIncorrect password!");
 80839ea:	f005 fd03 	bl	80893f4 <_Z16_fetch_usbserialv>
 80839ee:	490b      	ldr	r1, [pc, #44]	; (8083a1c <_Z17serialGetDeviceIdv+0x104>)
 80839f0:	f004 fca7 	bl	8088342 <_ZN5Print7printlnEPKc>
 80839f4:	e7ee      	b.n	80839d4 <_Z17serialGetDeviceIdv+0xbc>
 80839f6:	bf00      	nop
 80839f8:	20000080 	.word	0x20000080
 80839fc:	0808df8d 	.word	0x0808df8d
 8083a00:	0808dfa0 	.word	0x0808dfa0
 8083a04:	0808cfcd 	.word	0x0808cfcd
 8083a08:	0808cfd3 	.word	0x0808cfd3
 8083a0c:	0808dfd0 	.word	0x0808dfd0
 8083a10:	0808eb69 	.word	0x0808eb69
 8083a14:	0808dfe5 	.word	0x0808dfe5
 8083a18:	0808d204 	.word	0x0808d204
 8083a1c:	0808d0f8 	.word	0x0808d0f8

08083a20 <_Z13serialGetZonev>:
{
 8083a20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 8083a22:	f005 fce7 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083a26:	491f      	ldr	r1, [pc, #124]	; (8083aa4 <_Z13serialGetZonev+0x84>)
 8083a28:	f004 fc8b 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083a2c:	f005 fce2 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083a30:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083a34:	f004 fdd8 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083a38:	f005 fcdc 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083a3c:	220d      	movs	r2, #13
 8083a3e:	4601      	mov	r1, r0
 8083a40:	a802      	add	r0, sp, #8
 8083a42:	f004 fde7 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083a46:	a802      	add	r0, sp, #8
 8083a48:	f004 fc1b 	bl	8088282 <_ZNK6String5toIntEv>
 8083a4c:	9001      	str	r0, [sp, #4]
    Serial.println("");
 8083a4e:	f005 fcd1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083a52:	4915      	ldr	r1, [pc, #84]	; (8083aa8 <_Z13serialGetZonev+0x88>)
 8083a54:	f004 fc75 	bl	8088342 <_ZN5Print7printlnEPKc>
    if (tempValue >= -12 && tempValue <= 14)
 8083a58:	9801      	ldr	r0, [sp, #4]
 8083a5a:	f100 030c 	add.w	r3, r0, #12
 8083a5e:	2b1a      	cmp	r3, #26
 8083a60:	d81a      	bhi.n	8083a98 <_Z13serialGetZonev+0x78>
        Time.zone(tempValue);
 8083a62:	f006 fe29 	bl	808a6b8 <__aeabi_i2f>
 8083a66:	f004 fe4b 	bl	8088700 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
 8083a6a:	f005 fcc3 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083a6e:	490f      	ldr	r1, [pc, #60]	; (8083aac <_Z13serialGetZonev+0x8c>)
 8083a70:	f004 fc54 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8083a74:	f005 fcbe 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083a78:	9901      	ldr	r1, [sp, #4]
 8083a7a:	220a      	movs	r2, #10
 8083a7c:	f7ff fc53 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 8083a80:	f005 ffa8 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8083a84:	2054      	movs	r0, #84	; 0x54
 8083a86:	a901      	add	r1, sp, #4
 8083a88:	f7fc ffce 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083a8c:	a802      	add	r0, sp, #8
 8083a8e:	f004 f999 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8083a92:	b007      	add	sp, #28
 8083a94:	f85d fb04 	ldr.w	pc, [sp], #4
        Serial.println("\n\rInvalid value!");
 8083a98:	f005 fcac 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083a9c:	4904      	ldr	r1, [pc, #16]	; (8083ab0 <_Z13serialGetZonev+0x90>)
 8083a9e:	f004 fc50 	bl	8088342 <_ZN5Print7printlnEPKc>
 8083aa2:	e7f3      	b.n	8083a8c <_Z13serialGetZonev+0x6c>
 8083aa4:	0808dff6 	.word	0x0808dff6
 8083aa8:	0808eb69 	.word	0x0808eb69
 8083aac:	0808e021 	.word	0x0808e021
 8083ab0:	0808d204 	.word	0x0808d204

08083ab4 <_Z20serialGetAverageTimev>:
{
 8083ab4:	b510      	push	{r4, lr}
 8083ab6:	b086      	sub	sp, #24
    Serial.println();
 8083ab8:	f005 fc9c 	bl	80893f4 <_Z16_fetch_usbserialv>
    Serial.print(measurements_to_average);
 8083abc:	4c28      	ldr	r4, [pc, #160]	; (8083b60 <_Z20serialGetAverageTimev+0xac>)
    Serial.println();
 8083abe:	f004 fc34 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 8083ac2:	f005 fc97 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083ac6:	4927      	ldr	r1, [pc, #156]	; (8083b64 <_Z20serialGetAverageTimev+0xb0>)
 8083ac8:	f004 fc28 	bl	808831c <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8083acc:	f005 fc92 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083ad0:	220a      	movs	r2, #10
 8083ad2:	6821      	ldr	r1, [r4, #0]
 8083ad4:	f7ff fc08 	bl	80832e8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println("(~2 second) measurements");
 8083ad8:	f005 fc8c 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083adc:	4922      	ldr	r1, [pc, #136]	; (8083b68 <_Z20serialGetAverageTimev+0xb4>)
 8083ade:	f004 fc30 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 8083ae2:	f005 fc87 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083ae6:	4921      	ldr	r1, [pc, #132]	; (8083b6c <_Z20serialGetAverageTimev+0xb8>)
 8083ae8:	f004 fc18 	bl	808831c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083aec:	f005 fc82 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083af0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083af4:	f004 fd78 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083af8:	f005 fc7c 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083afc:	220d      	movs	r2, #13
 8083afe:	4601      	mov	r1, r0
 8083b00:	a802      	add	r0, sp, #8
 8083b02:	f004 fd87 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083b06:	a802      	add	r0, sp, #8
 8083b08:	f004 fbbb 	bl	8088282 <_ZNK6String5toIntEv>
    if (tempValue >= 1 && tempValue < 10000)
 8083b0c:	f242 730e 	movw	r3, #9998	; 0x270e
    int tempValue = tempString.toInt();
 8083b10:	9001      	str	r0, [sp, #4]
    if (tempValue >= 1 && tempValue < 10000)
 8083b12:	3801      	subs	r0, #1
 8083b14:	4298      	cmp	r0, r3
 8083b16:	d81c      	bhi.n	8083b52 <_Z20serialGetAverageTimev+0x9e>
        Serial.print("\n\rNew Frequency: ");
 8083b18:	f005 fc6c 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083b1c:	4914      	ldr	r1, [pc, #80]	; (8083b70 <_Z20serialGetAverageTimev+0xbc>)
 8083b1e:	f004 fbfd 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8083b22:	f005 fc67 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083b26:	220a      	movs	r2, #10
 8083b28:	9901      	ldr	r1, [sp, #4]
 8083b2a:	f7ff fbfc 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
        Serial.println("(~2 second) measurements");
 8083b2e:	f005 fc61 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083b32:	490d      	ldr	r1, [pc, #52]	; (8083b68 <_Z20serialGetAverageTimev+0xb4>)
 8083b34:	f004 fc05 	bl	8088342 <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8083b38:	9b01      	ldr	r3, [sp, #4]
 8083b3a:	6023      	str	r3, [r4, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8083b3c:	f005 ff4a 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8083b40:	2074      	movs	r0, #116	; 0x74
 8083b42:	a901      	add	r1, sp, #4
 8083b44:	f7fc ff70 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083b48:	a802      	add	r0, sp, #8
 8083b4a:	f004 f93b 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8083b4e:	b006      	add	sp, #24
 8083b50:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8083b52:	f005 fc4f 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083b56:	4907      	ldr	r1, [pc, #28]	; (8083b74 <_Z20serialGetAverageTimev+0xc0>)
 8083b58:	f004 fbf3 	bl	8088342 <_ZN5Print7printlnEPKc>
 8083b5c:	e7f4      	b.n	8083b48 <_Z20serialGetAverageTimev+0x94>
 8083b5e:	bf00      	nop
 8083b60:	20000740 	.word	0x20000740
 8083b64:	0808e039 	.word	0x0808e039
 8083b68:	0808e04d 	.word	0x0808e04d
 8083b6c:	0808e066 	.word	0x0808e066
 8083b70:	0808e079 	.word	0x0808e079
 8083b74:	0808d204 	.word	0x0808d204

08083b78 <_Z16serialGetCo2Zerov>:
{
 8083b78:	b510      	push	{r4, lr}
 8083b7a:	b086      	sub	sp, #24
    Serial.println();
 8083b7c:	f005 fc3a 	bl	80893f4 <_Z16_fetch_usbserialv>
    Serial.print(CO2_zero);
 8083b80:	4c25      	ldr	r4, [pc, #148]	; (8083c18 <_Z16serialGetCo2Zerov+0xa0>)
    Serial.println();
 8083b82:	f004 fbd2 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 8083b86:	f005 fc35 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083b8a:	4924      	ldr	r1, [pc, #144]	; (8083c1c <_Z16serialGetCo2Zerov+0xa4>)
 8083b8c:	f004 fbc6 	bl	808831c <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 8083b90:	f005 fc30 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083b94:	220a      	movs	r2, #10
 8083b96:	6821      	ldr	r1, [r4, #0]
 8083b98:	f7ff fba6 	bl	80832e8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 8083b9c:	f005 fc2a 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083ba0:	491f      	ldr	r1, [pc, #124]	; (8083c20 <_Z16serialGetCo2Zerov+0xa8>)
 8083ba2:	f004 fbce 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 8083ba6:	f005 fc25 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083baa:	491e      	ldr	r1, [pc, #120]	; (8083c24 <_Z16serialGetCo2Zerov+0xac>)
 8083bac:	f004 fbb6 	bl	808831c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083bb0:	f005 fc20 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083bb4:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083bb8:	f004 fd16 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083bbc:	f005 fc1a 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083bc0:	220d      	movs	r2, #13
 8083bc2:	4601      	mov	r1, r0
 8083bc4:	a802      	add	r0, sp, #8
 8083bc6:	f004 fd25 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083bca:	a802      	add	r0, sp, #8
 8083bcc:	f004 fb59 	bl	8088282 <_ZNK6String5toIntEv>
 8083bd0:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 8083bd2:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083bd6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083bda:	d217      	bcs.n	8083c0c <_Z16serialGetCo2Zerov+0x94>
        Serial.print("\n\rNew CO2 zero: ");
 8083bdc:	f005 fc0a 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083be0:	4911      	ldr	r1, [pc, #68]	; (8083c28 <_Z16serialGetCo2Zerov+0xb0>)
 8083be2:	f004 fb9b 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8083be6:	f005 fc05 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083bea:	9901      	ldr	r1, [sp, #4]
 8083bec:	220a      	movs	r2, #10
 8083bee:	f7ff fb9a 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
        CO2_zero = tempValue;
 8083bf2:	9b01      	ldr	r3, [sp, #4]
 8083bf4:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8083bf6:	f005 feed 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8083bfa:	2004      	movs	r0, #4
 8083bfc:	a901      	add	r1, sp, #4
 8083bfe:	f7fc ff13 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083c02:	a802      	add	r0, sp, #8
 8083c04:	f004 f8de 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8083c08:	b006      	add	sp, #24
 8083c0a:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8083c0c:	f005 fbf2 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083c10:	4906      	ldr	r1, [pc, #24]	; (8083c2c <_Z16serialGetCo2Zerov+0xb4>)
 8083c12:	f004 fb96 	bl	8088342 <_ZN5Print7printlnEPKc>
 8083c16:	e7f4      	b.n	8083c02 <_Z16serialGetCo2Zerov+0x8a>
 8083c18:	200002b8 	.word	0x200002b8
 8083c1c:	0808e08b 	.word	0x0808e08b
 8083c20:	0808d228 	.word	0x0808d228
 8083c24:	0808e09d 	.word	0x0808e09d
 8083c28:	0808e0b2 	.word	0x0808e0b2
 8083c2c:	0808d204 	.word	0x0808d204

08083c30 <_Z15serialGetCoZerov>:
{
 8083c30:	b510      	push	{r4, lr}
 8083c32:	b086      	sub	sp, #24
    Serial.println();
 8083c34:	f005 fbde 	bl	80893f4 <_Z16_fetch_usbserialv>
    Serial.print(CO_zeroA);
 8083c38:	4c26      	ldr	r4, [pc, #152]	; (8083cd4 <_Z15serialGetCoZerov+0xa4>)
    Serial.println();
 8083c3a:	f004 fb76 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current CO_A zero:");
 8083c3e:	f005 fbd9 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083c42:	4925      	ldr	r1, [pc, #148]	; (8083cd8 <_Z15serialGetCoZerov+0xa8>)
 8083c44:	f004 fb6a 	bl	808831c <_ZN5Print5printEPKc>
    Serial.print(CO_zeroA);
 8083c48:	f005 fbd4 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083c4c:	220a      	movs	r2, #10
 8083c4e:	6821      	ldr	r1, [r4, #0]
 8083c50:	f7ff fb4a 	bl	80832e8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppb");
 8083c54:	f005 fbce 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083c58:	4920      	ldr	r1, [pc, #128]	; (8083cdc <_Z15serialGetCoZerov+0xac>)
 8083c5a:	f004 fb72 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 8083c5e:	f005 fbc9 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083c62:	491f      	ldr	r1, [pc, #124]	; (8083ce0 <_Z15serialGetCoZerov+0xb0>)
 8083c64:	f004 fb5a 	bl	808831c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083c68:	f005 fbc4 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083c6c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083c70:	f004 fcba 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083c74:	f005 fbbe 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083c78:	220d      	movs	r2, #13
 8083c7a:	4601      	mov	r1, r0
 8083c7c:	a802      	add	r0, sp, #8
 8083c7e:	f004 fcc9 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083c82:	a802      	add	r0, sp, #8
 8083c84:	f004 fafd 	bl	8088282 <_ZNK6String5toIntEv>
    if (tempValue >= -5000 && tempValue < 5000)
 8083c88:	f242 730f 	movw	r3, #9999	; 0x270f
    int tempValue = tempString.toInt();
 8083c8c:	9001      	str	r0, [sp, #4]
    if (tempValue >= -5000 && tempValue < 5000)
 8083c8e:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8083c92:	3008      	adds	r0, #8
 8083c94:	4298      	cmp	r0, r3
 8083c96:	d817      	bhi.n	8083cc8 <_Z15serialGetCoZerov+0x98>
        Serial.print("\n\rNew CO zero: ");
 8083c98:	f005 fbac 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083c9c:	4911      	ldr	r1, [pc, #68]	; (8083ce4 <_Z15serialGetCoZerov+0xb4>)
 8083c9e:	f004 fb3d 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8083ca2:	f005 fba7 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083ca6:	9901      	ldr	r1, [sp, #4]
 8083ca8:	220a      	movs	r2, #10
 8083caa:	f7ff fb3c 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
        CO_zeroA = tempValue;
 8083cae:	9b01      	ldr	r3, [sp, #4]
 8083cb0:	6023      	str	r3, [r4, #0]
        EEPROM.put(CO_ZERO_A_MEM_ADDRESS, tempValue);
 8083cb2:	f005 fe8f 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8083cb6:	200c      	movs	r0, #12
 8083cb8:	a901      	add	r1, sp, #4
 8083cba:	f7fc feb5 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083cbe:	a802      	add	r0, sp, #8
 8083cc0:	f004 f880 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8083cc4:	b006      	add	sp, #24
 8083cc6:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8083cc8:	f005 fb94 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083ccc:	4906      	ldr	r1, [pc, #24]	; (8083ce8 <_Z15serialGetCoZerov+0xb8>)
 8083cce:	f004 fb38 	bl	8088342 <_ZN5Print7printlnEPKc>
 8083cd2:	e7f4      	b.n	8083cbe <_Z15serialGetCoZerov+0x8e>
 8083cd4:	200002d0 	.word	0x200002d0
 8083cd8:	0808e0c3 	.word	0x0808e0c3
 8083cdc:	0808e0d6 	.word	0x0808e0d6
 8083ce0:	0808e0db 	.word	0x0808e0db
 8083ce4:	0808e0ef 	.word	0x0808e0ef
 8083ce8:	0808d204 	.word	0x0808d204

08083cec <_Z24serialGetTemperatureZerov>:
{
 8083cec:	b510      	push	{r4, lr}
 8083cee:	b086      	sub	sp, #24
    Serial.println();
 8083cf0:	f005 fb80 	bl	80893f4 <_Z16_fetch_usbserialv>
    Serial.print(temp_zero);
 8083cf4:	4c24      	ldr	r4, [pc, #144]	; (8083d88 <_Z24serialGetTemperatureZerov+0x9c>)
    Serial.println();
 8083cf6:	f004 fb18 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 8083cfa:	f005 fb7b 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083cfe:	4923      	ldr	r1, [pc, #140]	; (8083d8c <_Z24serialGetTemperatureZerov+0xa0>)
 8083d00:	f004 fb0c 	bl	808831c <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 8083d04:	f005 fb76 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083d08:	220a      	movs	r2, #10
 8083d0a:	6821      	ldr	r1, [r4, #0]
 8083d0c:	f7ff faec 	bl	80832e8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" Degrees C");
 8083d10:	f005 fb70 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083d14:	491e      	ldr	r1, [pc, #120]	; (8083d90 <_Z24serialGetTemperatureZerov+0xa4>)
 8083d16:	f004 fb14 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 8083d1a:	f005 fb6b 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083d1e:	491d      	ldr	r1, [pc, #116]	; (8083d94 <_Z24serialGetTemperatureZerov+0xa8>)
 8083d20:	f004 fafc 	bl	808831c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083d24:	f005 fb66 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083d28:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083d2c:	f004 fc5c 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083d30:	f005 fb60 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083d34:	220d      	movs	r2, #13
 8083d36:	4601      	mov	r1, r0
 8083d38:	a802      	add	r0, sp, #8
 8083d3a:	f004 fc6b 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083d3e:	a802      	add	r0, sp, #8
 8083d40:	f004 fa9f 	bl	8088282 <_ZNK6String5toIntEv>
 8083d44:	9001      	str	r0, [sp, #4]
    if (tempValue >= -30 && tempValue < 30)
 8083d46:	301e      	adds	r0, #30
 8083d48:	283b      	cmp	r0, #59	; 0x3b
 8083d4a:	d817      	bhi.n	8083d7c <_Z24serialGetTemperatureZerov+0x90>
        Serial.print("\n\rNew Temperature zero: ");
 8083d4c:	f005 fb52 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083d50:	4911      	ldr	r1, [pc, #68]	; (8083d98 <_Z24serialGetTemperatureZerov+0xac>)
 8083d52:	f004 fae3 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8083d56:	f005 fb4d 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083d5a:	9901      	ldr	r1, [sp, #4]
 8083d5c:	220a      	movs	r2, #10
 8083d5e:	f7ff fae2 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
        temp_zero = tempValue;
 8083d62:	9b01      	ldr	r3, [sp, #4]
 8083d64:	6023      	str	r3, [r4, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 8083d66:	f005 fe35 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8083d6a:	202c      	movs	r0, #44	; 0x2c
 8083d6c:	a901      	add	r1, sp, #4
 8083d6e:	f7fc fe5b 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083d72:	a802      	add	r0, sp, #8
 8083d74:	f004 f826 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8083d78:	b006      	add	sp, #24
 8083d7a:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8083d7c:	f005 fb3a 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083d80:	4906      	ldr	r1, [pc, #24]	; (8083d9c <_Z24serialGetTemperatureZerov+0xb0>)
 8083d82:	f004 fade 	bl	8088342 <_ZN5Print7printlnEPKc>
 8083d86:	e7f4      	b.n	8083d72 <_Z24serialGetTemperatureZerov+0x86>
 8083d88:	20001c7c 	.word	0x20001c7c
 8083d8c:	0808e0ff 	.word	0x0808e0ff
 8083d90:	0808d2a9 	.word	0x0808d2a9
 8083d94:	0808e119 	.word	0x0808e119
 8083d98:	0808e136 	.word	0x0808e136
 8083d9c:	0808d204 	.word	0x0808d204

08083da0 <_Z21serialGetPressureZerov>:
{
 8083da0:	b510      	push	{r4, lr}
 8083da2:	b086      	sub	sp, #24
    Serial.println();
 8083da4:	f005 fb26 	bl	80893f4 <_Z16_fetch_usbserialv>
    Serial.print(pressure_zero);
 8083da8:	4c25      	ldr	r4, [pc, #148]	; (8083e40 <_Z21serialGetPressureZerov+0xa0>)
    Serial.println();
 8083daa:	f004 fabe 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 8083dae:	f005 fb21 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083db2:	4924      	ldr	r1, [pc, #144]	; (8083e44 <_Z21serialGetPressureZerov+0xa4>)
 8083db4:	f004 fab2 	bl	808831c <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8083db8:	f005 fb1c 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083dbc:	220a      	movs	r2, #10
 8083dbe:	6821      	ldr	r1, [r4, #0]
 8083dc0:	f7ff fa92 	bl	80832e8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" ppm");
 8083dc4:	f005 fb16 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083dc8:	491f      	ldr	r1, [pc, #124]	; (8083e48 <_Z21serialGetPressureZerov+0xa8>)
 8083dca:	f004 faba 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 8083dce:	f005 fb11 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083dd2:	491e      	ldr	r1, [pc, #120]	; (8083e4c <_Z21serialGetPressureZerov+0xac>)
 8083dd4:	f004 faa2 	bl	808831c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083dd8:	f005 fb0c 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083ddc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083de0:	f004 fc02 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083de4:	f005 fb06 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083de8:	220d      	movs	r2, #13
 8083dea:	4601      	mov	r1, r0
 8083dec:	a802      	add	r0, sp, #8
 8083dee:	f004 fc11 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083df2:	a802      	add	r0, sp, #8
 8083df4:	f004 fa45 	bl	8088282 <_ZNK6String5toIntEv>
 8083df8:	9001      	str	r0, [sp, #4]
    if (tempValue >= -1000 && tempValue < 1000)
 8083dfa:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083dfe:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083e02:	d217      	bcs.n	8083e34 <_Z21serialGetPressureZerov+0x94>
        Serial.print("\n\rNew Pressure zero: ");
 8083e04:	f005 faf6 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083e08:	4911      	ldr	r1, [pc, #68]	; (8083e50 <_Z21serialGetPressureZerov+0xb0>)
 8083e0a:	f004 fa87 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8083e0e:	f005 faf1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083e12:	9901      	ldr	r1, [sp, #4]
 8083e14:	220a      	movs	r2, #10
 8083e16:	f7ff fa86 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
        pressure_zero = tempValue;
 8083e1a:	9b01      	ldr	r3, [sp, #4]
 8083e1c:	6023      	str	r3, [r4, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 8083e1e:	f005 fdd9 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8083e22:	2034      	movs	r0, #52	; 0x34
 8083e24:	a901      	add	r1, sp, #4
 8083e26:	f7fc fdff 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083e2a:	a802      	add	r0, sp, #8
 8083e2c:	f003 ffca 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8083e30:	b006      	add	sp, #24
 8083e32:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8083e34:	f005 fade 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083e38:	4906      	ldr	r1, [pc, #24]	; (8083e54 <_Z21serialGetPressureZerov+0xb4>)
 8083e3a:	f004 fa82 	bl	8088342 <_ZN5Print7printlnEPKc>
 8083e3e:	e7f4      	b.n	8083e2a <_Z21serialGetPressureZerov+0x8a>
 8083e40:	20000794 	.word	0x20000794
 8083e44:	0808e14f 	.word	0x0808e14f
 8083e48:	0808d228 	.word	0x0808d228
 8083e4c:	0808e166 	.word	0x0808e166
 8083e50:	0808e180 	.word	0x0808e180
 8083e54:	0808d204 	.word	0x0808d204

08083e58 <_Z21serialGetHumidityZerov>:
{
 8083e58:	b510      	push	{r4, lr}
 8083e5a:	b086      	sub	sp, #24
    Serial.println();
 8083e5c:	f005 faca 	bl	80893f4 <_Z16_fetch_usbserialv>
    Serial.print(rh_zero);
 8083e60:	4c24      	ldr	r4, [pc, #144]	; (8083ef4 <_Z21serialGetHumidityZerov+0x9c>)
    Serial.println();
 8083e62:	f004 fa62 	bl	808832a <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 8083e66:	f005 fac5 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083e6a:	4923      	ldr	r1, [pc, #140]	; (8083ef8 <_Z21serialGetHumidityZerov+0xa0>)
 8083e6c:	f004 fa56 	bl	808831c <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 8083e70:	f005 fac0 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083e74:	220a      	movs	r2, #10
 8083e76:	6821      	ldr	r1, [r4, #0]
 8083e78:	f7ff fa36 	bl	80832e8 <_ZN5Print5printIiLi0EEEjT_i>
    Serial.println(" %");
 8083e7c:	f005 faba 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083e80:	491e      	ldr	r1, [pc, #120]	; (8083efc <_Z21serialGetHumidityZerov+0xa4>)
 8083e82:	f004 fa5e 	bl	8088342 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 8083e86:	f005 fab5 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083e8a:	491d      	ldr	r1, [pc, #116]	; (8083f00 <_Z21serialGetHumidityZerov+0xa8>)
 8083e8c:	f004 fa46 	bl	808831c <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083e90:	f005 fab0 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083e94:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083e98:	f004 fba6 	bl	80885e8 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083e9c:	f005 faaa 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083ea0:	220d      	movs	r2, #13
 8083ea2:	4601      	mov	r1, r0
 8083ea4:	a802      	add	r0, sp, #8
 8083ea6:	f004 fbb5 	bl	8088614 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083eaa:	a802      	add	r0, sp, #8
 8083eac:	f004 f9e9 	bl	8088282 <_ZNK6String5toIntEv>
 8083eb0:	9001      	str	r0, [sp, #4]
    if (tempValue >= -50 && tempValue < 50)
 8083eb2:	3032      	adds	r0, #50	; 0x32
 8083eb4:	2863      	cmp	r0, #99	; 0x63
 8083eb6:	d817      	bhi.n	8083ee8 <_Z21serialGetHumidityZerov+0x90>
        Serial.print("\n\rNew RH zero: ");
 8083eb8:	f005 fa9c 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083ebc:	4911      	ldr	r1, [pc, #68]	; (8083f04 <_Z21serialGetHumidityZerov+0xac>)
 8083ebe:	f004 fa2d 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8083ec2:	f005 fa97 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083ec6:	9901      	ldr	r1, [sp, #4]
 8083ec8:	220a      	movs	r2, #10
 8083eca:	f7ff fa2c 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
        rh_zero = tempValue;
 8083ece:	9b01      	ldr	r3, [sp, #4]
 8083ed0:	6023      	str	r3, [r4, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 8083ed2:	f005 fd7f 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8083ed6:	203c      	movs	r0, #60	; 0x3c
 8083ed8:	a901      	add	r1, sp, #4
 8083eda:	f7fc fda5 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
    String tempString = Serial.readStringUntil('\r');
 8083ede:	a802      	add	r0, sp, #8
 8083ee0:	f003 ff70 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8083ee4:	b006      	add	sp, #24
 8083ee6:	bd10      	pop	{r4, pc}
        Serial.println("\n\rInvalid value!");
 8083ee8:	f005 fa84 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083eec:	4906      	ldr	r1, [pc, #24]	; (8083f08 <_Z21serialGetHumidityZerov+0xb0>)
 8083eee:	f004 fa28 	bl	8088342 <_ZN5Print7printlnEPKc>
 8083ef2:	e7f4      	b.n	8083ede <_Z21serialGetHumidityZerov+0x86>
 8083ef4:	2000079c 	.word	0x2000079c
 8083ef8:	0808e196 	.word	0x0808e196
 8083efc:	0808d34e 	.word	0x0808d34e
 8083f00:	0808e1a7 	.word	0x0808e1a7
 8083f04:	0808e1bb 	.word	0x0808e1bb
 8083f08:	0808d204 	.word	0x0808d204

08083f0c <_Z10serialMenuv>:
    incomingByte = '0';
 8083f0c:	2330      	movs	r3, #48	; 0x30
{
 8083f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    incomingByte = '0';
 8083f12:	4ccb      	ldr	r4, [pc, #812]	; (8084240 <_Z10serialMenuv+0x334>)
                if (!bme.performReading())
 8083f14:	4dcb      	ldr	r5, [pc, #812]	; (8084244 <_Z10serialMenuv+0x338>)
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 8083f16:	4fcc      	ldr	r7, [pc, #816]	; (8084248 <_Z10serialMenuv+0x33c>)
{
 8083f18:	b08a      	sub	sp, #40	; 0x28
    incomingByte = '0';
 8083f1a:	7023      	strb	r3, [r4, #0]
        Serial.print("Menu>");
 8083f1c:	4ecb      	ldr	r6, [pc, #812]	; (808424c <_Z10serialMenuv+0x340>)
    while (incomingByte != 'x')
 8083f1e:	7823      	ldrb	r3, [r4, #0]
 8083f20:	2b78      	cmp	r3, #120	; 0x78
 8083f22:	f000 843e 	beq.w	80847a2 <_Z10serialMenuv+0x896>
        Serial.print("Menu>");
 8083f26:	f005 fa65 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083f2a:	4631      	mov	r1, r6
 8083f2c:	f004 f9f6 	bl	808831c <_ZN5Print5printEPKc>
        Serial.flush();
 8083f30:	f005 fa60 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083f34:	6803      	ldr	r3, [r0, #0]
 8083f36:	69db      	ldr	r3, [r3, #28]
 8083f38:	4798      	blx	r3
        while (!Serial.available());
 8083f3a:	f005 fa5b 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083f3e:	6803      	ldr	r3, [r0, #0]
 8083f40:	691b      	ldr	r3, [r3, #16]
 8083f42:	4798      	blx	r3
 8083f44:	2800      	cmp	r0, #0
 8083f46:	d0f8      	beq.n	8083f3a <_Z10serialMenuv+0x2e>
        incomingByte = Serial.read();
 8083f48:	f005 fa54 	bl	80893f4 <_Z16_fetch_usbserialv>
 8083f4c:	6803      	ldr	r3, [r0, #0]
 8083f4e:	695b      	ldr	r3, [r3, #20]
 8083f50:	4798      	blx	r3
 8083f52:	b2c0      	uxtb	r0, r0
 8083f54:	7020      	strb	r0, [r4, #0]
        switch (incomingByte)
 8083f56:	3821      	subs	r0, #33	; 0x21
 8083f58:	2859      	cmp	r0, #89	; 0x59
 8083f5a:	d8e0      	bhi.n	8083f1e <_Z10serialMenuv+0x12>
 8083f5c:	a301      	add	r3, pc, #4	; (adr r3, 8083f64 <_Z10serialMenuv+0x58>)
 8083f5e:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8083f62:	bf00      	nop
 8083f64:	080846c7 	.word	0x080846c7
 8083f68:	08083f1f 	.word	0x08083f1f
 8083f6c:	08084767 	.word	0x08084767
 8083f70:	08083f1f 	.word	0x08083f1f
 8083f74:	08083f1f 	.word	0x08083f1f
 8083f78:	08083f1f 	.word	0x08083f1f
 8083f7c:	08083f1f 	.word	0x08083f1f
 8083f80:	08083f1f 	.word	0x08083f1f
 8083f84:	08083f1f 	.word	0x08083f1f
 8083f88:	08084793 	.word	0x08084793
 8083f8c:	08083f1f 	.word	0x08083f1f
 8083f90:	08083f1f 	.word	0x08083f1f
 8083f94:	08083f1f 	.word	0x08083f1f
 8083f98:	08083f1f 	.word	0x08083f1f
 8083f9c:	08083f1f 	.word	0x08083f1f
 8083fa0:	080846c1 	.word	0x080846c1
 8083fa4:	08083f1f 	.word	0x08083f1f
 8083fa8:	08083f1f 	.word	0x08083f1f
 8083fac:	080844f7 	.word	0x080844f7
 8083fb0:	08084525 	.word	0x08084525
 8083fb4:	0808454b 	.word	0x0808454b
 8083fb8:	08084629 	.word	0x08084629
 8083fbc:	0808464f 	.word	0x0808464f
 8083fc0:	0808466d 	.word	0x0808466d
 8083fc4:	080846bb 	.word	0x080846bb
 8083fc8:	08083f1f 	.word	0x08083f1f
 8083fcc:	08083f1f 	.word	0x08083f1f
 8083fd0:	08083f1f 	.word	0x08083f1f
 8083fd4:	08083f1f 	.word	0x08083f1f
 8083fd8:	08083f1f 	.word	0x08083f1f
 8083fdc:	0808479b 	.word	0x0808479b
 8083fe0:	0808473f 	.word	0x0808473f
 8083fe4:	08083f1f 	.word	0x08083f1f
 8083fe8:	080841bb 	.word	0x080841bb
 8083fec:	080841e7 	.word	0x080841e7
 8083ff0:	08084207 	.word	0x08084207
 8083ff4:	0808422f 	.word	0x0808422f
 8083ff8:	080842a9 	.word	0x080842a9
 8083ffc:	080842bd 	.word	0x080842bd
 8084000:	080842e5 	.word	0x080842e5
 8084004:	080842ff 	.word	0x080842ff
 8084008:	08084305 	.word	0x08084305
 808400c:	08084315 	.word	0x08084315
 8084010:	08084325 	.word	0x08084325
 8084014:	0808432b 	.word	0x0808432b
 8084018:	08084353 	.word	0x08084353
 808401c:	0808436f 	.word	0x0808436f
 8084020:	0808437f 	.word	0x0808437f
 8084024:	08084393 	.word	0x08084393
 8084028:	080843a1 	.word	0x080843a1
 808402c:	080843d1 	.word	0x080843d1
 8084030:	08084401 	.word	0x08084401
 8084034:	0808442d 	.word	0x0808442d
 8084038:	08084459 	.word	0x08084459
 808403c:	0808446b 	.word	0x0808446b
 8084040:	08084499 	.word	0x08084499
 8084044:	08083f1f 	.word	0x08083f1f
 8084048:	080844a9 	.word	0x080844a9
 808404c:	08083f1f 	.word	0x08083f1f
 8084050:	08083f1f 	.word	0x08083f1f
 8084054:	08083f1f 	.word	0x08083f1f
 8084058:	08083f1f 	.word	0x08083f1f
 808405c:	08083f1f 	.word	0x08083f1f
 8084060:	08083f1f 	.word	0x08083f1f
 8084064:	080840cd 	.word	0x080840cd
 8084068:	080840d3 	.word	0x080840d3
 808406c:	080840d9 	.word	0x080840d9
 8084070:	080840df 	.word	0x080840df
 8084074:	08083f1f 	.word	0x08083f1f
 8084078:	08083f1f 	.word	0x08083f1f
 808407c:	08083f1f 	.word	0x08083f1f
 8084080:	08083f1f 	.word	0x08083f1f
 8084084:	08083f1f 	.word	0x08083f1f
 8084088:	08083f1f 	.word	0x08083f1f
 808408c:	080840e5 	.word	0x080840e5
 8084090:	080840eb 	.word	0x080840eb
 8084094:	080840f1 	.word	0x080840f1
 8084098:	080840f7 	.word	0x080840f7
 808409c:	080840fd 	.word	0x080840fd
 80840a0:	08084103 	.word	0x08084103
 80840a4:	08084109 	.word	0x08084109
 80840a8:	08084127 	.word	0x08084127
 80840ac:	08084137 	.word	0x08084137
 80840b0:	08084155 	.word	0x08084155
 80840b4:	0808415b 	.word	0x0808415b
 80840b8:	08084161 	.word	0x08084161
 80840bc:	08084167 	.word	0x08084167
 80840c0:	08083f1f 	.word	0x08083f1f
 80840c4:	0808416d 	.word	0x0808416d
 80840c8:	08084193 	.word	0x08084193
            serialGetCo2Slope();
 80840cc:	f7fe fc04 	bl	80828d8 <_Z17serialGetCo2Slopev>
            break;
 80840d0:	e724      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetCo2Zero();
 80840d2:	f7ff fd51 	bl	8083b78 <_Z16serialGetCo2Zerov>
            break;
 80840d6:	e721      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetCoSlope();
 80840d8:	f7fe fc7e 	bl	80829d8 <_Z16serialGetCoSlopev>
            break;
 80840dc:	e71e      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetCoZero();
 80840de:	f7ff fda7 	bl	8083c30 <_Z15serialGetCoZerov>
            break;
 80840e2:	e71b      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetTemperatureSlope();
 80840e4:	f7fe fcfe 	bl	8082ae4 <_Z25serialGetTemperatureSlopev>
            break;
 80840e8:	e718      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetTemperatureZero();
 80840ea:	f7ff fdff 	bl	8083cec <_Z24serialGetTemperatureZerov>
            break;
 80840ee:	e715      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetPressureSlope();
 80840f0:	f7fe fd74 	bl	8082bdc <_Z22serialGetPressureSlopev>
            break;
 80840f4:	e712      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetPressureZero();
 80840f6:	f7ff fe53 	bl	8083da0 <_Z21serialGetPressureZerov>
            break;
 80840fa:	e70f      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetHumiditySlope();
 80840fc:	f7fe fdea 	bl	8082cd4 <_Z22serialGetHumiditySlopev>
            break;
 8084100:	e70c      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetHumidityZero();
 8084102:	f7ff fea9 	bl	8083e58 <_Z21serialGetHumidityZerov>
            break;
 8084106:	e709      	b.n	8083f1c <_Z10serialMenuv+0x10>
            Serial.println("Serial debugging enabled.");
 8084108:	f005 f974 	bl	80893f4 <_Z16_fetch_usbserialv>
 808410c:	4950      	ldr	r1, [pc, #320]	; (8084250 <_Z10serialMenuv+0x344>)
 808410e:	f004 f918 	bl	8088342 <_ZN5Print7printlnEPKc>
            debugging_enabled = 1;
 8084112:	2301      	movs	r3, #1
 8084114:	4e4f      	ldr	r6, [pc, #316]	; (8084254 <_Z10serialMenuv+0x348>)
            debugging_enabled = 0;
 8084116:	6033      	str	r3, [r6, #0]
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8084118:	f005 fc5c 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 808411c:	4631      	mov	r1, r6
 808411e:	2048      	movs	r0, #72	; 0x48
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8084120:	f7fc fc82 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
 8084124:	e6fa      	b.n	8083f1c <_Z10serialMenuv+0x10>
            Serial.println("Serial debugging disabled.");
 8084126:	f005 f965 	bl	80893f4 <_Z16_fetch_usbserialv>
 808412a:	494b      	ldr	r1, [pc, #300]	; (8084258 <_Z10serialMenuv+0x34c>)
 808412c:	f004 f909 	bl	8088342 <_ZN5Print7printlnEPKc>
            debugging_enabled = 0;
 8084130:	4e48      	ldr	r6, [pc, #288]	; (8084254 <_Z10serialMenuv+0x348>)
 8084132:	2300      	movs	r3, #0
 8084134:	e7ef      	b.n	8084116 <_Z10serialMenuv+0x20a>
            Serial.println(String(HEADER_STRING));
 8084136:	f005 f95d 	bl	80893f4 <_Z16_fetch_usbserialv>
 808413a:	4606      	mov	r6, r0
 808413c:	4947      	ldr	r1, [pc, #284]	; (808425c <_Z10serialMenuv+0x350>)
 808413e:	a806      	add	r0, sp, #24
 8084140:	f003 fe8a 	bl	8087e58 <_ZN6StringC1EPKc>
 8084144:	4630      	mov	r0, r6
 8084146:	9906      	ldr	r1, [sp, #24]
 8084148:	f004 f8fb 	bl	8088342 <_ZN5Print7printlnEPKc>
            Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 808414c:	a806      	add	r0, sp, #24
 808414e:	f003 fe39 	bl	8087dc4 <_ZN6StringD1Ev>
            break;
 8084152:	e6e3      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetTimeDate();
 8084154:	f7fe fb70 	bl	8082838 <_Z17serialGetTimeDatev>
            break;
 8084158:	e6e0      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetZone();
 808415a:	f7ff fc61 	bl	8083a20 <_Z13serialGetZonev>
            break;
 808415e:	e6dd      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetDeviceId();
 8084160:	f7ff fbda 	bl	8083918 <_Z17serialGetDeviceIdv>
            break;
 8084164:	e6da      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialGetWifiCredentials();
 8084166:	f7fe fa17 	bl	8082598 <_Z24serialGetWifiCredentialsv>
            break;
 808416a:	e6d7      	b.n	8083f1c <_Z10serialMenuv+0x10>
            if (serial_cellular_enabled == 0)
 808416c:	4e3c      	ldr	r6, [pc, #240]	; (8084260 <_Z10serialMenuv+0x354>)
 808416e:	6833      	ldr	r3, [r6, #0]
 8084170:	b95b      	cbnz	r3, 808418a <_Z10serialMenuv+0x27e>
                Serial.println("Enabling Cellular.");
 8084172:	f005 f93f 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084176:	493b      	ldr	r1, [pc, #236]	; (8084264 <_Z10serialMenuv+0x358>)
                Serial.println("Cellular already enabled.");
 8084178:	f004 f8e3 	bl	8088342 <_ZN5Print7printlnEPKc>
            serial_cellular_enabled = 1;
 808417c:	2301      	movs	r3, #1
            serial_cellular_enabled = 0;
 808417e:	6033      	str	r3, [r6, #0]
            EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8084180:	f005 fc28 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8084184:	2044      	movs	r0, #68	; 0x44
 8084186:	4936      	ldr	r1, [pc, #216]	; (8084260 <_Z10serialMenuv+0x354>)
 8084188:	e7ca      	b.n	8084120 <_Z10serialMenuv+0x214>
                Serial.println("Cellular already enabled.");
 808418a:	f005 f933 	bl	80893f4 <_Z16_fetch_usbserialv>
 808418e:	4936      	ldr	r1, [pc, #216]	; (8084268 <_Z10serialMenuv+0x35c>)
 8084190:	e7f2      	b.n	8084178 <_Z10serialMenuv+0x26c>
            if (serial_cellular_enabled == 1)
 8084192:	4e33      	ldr	r6, [pc, #204]	; (8084260 <_Z10serialMenuv+0x354>)
 8084194:	6833      	ldr	r3, [r6, #0]
 8084196:	2b01      	cmp	r3, #1
 8084198:	d109      	bne.n	80841ae <_Z10serialMenuv+0x2a2>
                Serial.println("Disabling Cellular");
 808419a:	f005 f92b 	bl	80893f4 <_Z16_fetch_usbserialv>
 808419e:	4933      	ldr	r1, [pc, #204]	; (808426c <_Z10serialMenuv+0x360>)
 80841a0:	f004 f8cf 	bl	8088342 <_ZN5Print7printlnEPKc>
                Cellular.off();
 80841a4:	4832      	ldr	r0, [pc, #200]	; (8084270 <_Z10serialMenuv+0x364>)
 80841a6:	f7fc fc7f 	bl	8080aa8 <_ZN5spark13CellularClass3offEv>
            serial_cellular_enabled = 0;
 80841aa:	2300      	movs	r3, #0
 80841ac:	e7e7      	b.n	808417e <_Z10serialMenuv+0x272>
                Serial.println("Cellular already disabled.");
 80841ae:	f005 f921 	bl	80893f4 <_Z16_fetch_usbserialv>
 80841b2:	4930      	ldr	r1, [pc, #192]	; (8084274 <_Z10serialMenuv+0x368>)
 80841b4:	f004 f8c5 	bl	8088342 <_ZN5Print7printlnEPKc>
 80841b8:	e7f7      	b.n	80841aa <_Z10serialMenuv+0x29e>
            if (output_only_particles == 1)
 80841ba:	4b2f      	ldr	r3, [pc, #188]	; (8084278 <_Z10serialMenuv+0x36c>)
 80841bc:	681a      	ldr	r2, [r3, #0]
 80841be:	2a01      	cmp	r2, #1
 80841c0:	d10b      	bne.n	80841da <_Z10serialMenuv+0x2ce>
                output_only_particles = 0;
 80841c2:	2200      	movs	r2, #0
 80841c4:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting normally");
 80841c6:	f005 f915 	bl	80893f4 <_Z16_fetch_usbserialv>
 80841ca:	492c      	ldr	r1, [pc, #176]	; (808427c <_Z10serialMenuv+0x370>)
                Serial.println("Outputting only PM");
 80841cc:	f004 f8b9 	bl	8088342 <_ZN5Print7printlnEPKc>
            EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80841d0:	f005 fc00 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80841d4:	2064      	movs	r0, #100	; 0x64
 80841d6:	4928      	ldr	r1, [pc, #160]	; (8084278 <_Z10serialMenuv+0x36c>)
 80841d8:	e7a2      	b.n	8084120 <_Z10serialMenuv+0x214>
                output_only_particles = 1;
 80841da:	2201      	movs	r2, #1
 80841dc:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting only PM");
 80841de:	f005 f909 	bl	80893f4 <_Z16_fetch_usbserialv>
 80841e2:	4927      	ldr	r1, [pc, #156]	; (8084280 <_Z10serialMenuv+0x374>)
 80841e4:	e7f2      	b.n	80841cc <_Z10serialMenuv+0x2c0>
            if (temperature_units == FAHRENHEIT)
 80841e6:	4b27      	ldr	r3, [pc, #156]	; (8084284 <_Z10serialMenuv+0x378>)
 80841e8:	681a      	ldr	r2, [r3, #0]
 80841ea:	b912      	cbnz	r2, 80841f2 <_Z10serialMenuv+0x2e6>
                temperature_units = CELSIUS;
 80841ec:	2201      	movs	r2, #1
                temperature_units = FAHRENHEIT;
 80841ee:	601a      	str	r2, [r3, #0]
 80841f0:	e004      	b.n	80841fc <_Z10serialMenuv+0x2f0>
                Serial.println("Temperature units already set to Celsius.");
 80841f2:	f005 f8ff 	bl	80893f4 <_Z16_fetch_usbserialv>
 80841f6:	4924      	ldr	r1, [pc, #144]	; (8084288 <_Z10serialMenuv+0x37c>)
 80841f8:	f004 f8a3 	bl	8088342 <_ZN5Print7printlnEPKc>
            EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 80841fc:	f005 fbea 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8084200:	2060      	movs	r0, #96	; 0x60
 8084202:	4920      	ldr	r1, [pc, #128]	; (8084284 <_Z10serialMenuv+0x378>)
 8084204:	e78c      	b.n	8084120 <_Z10serialMenuv+0x214>
            if (new_temperature_sensor_enabled == 1)
 8084206:	4b21      	ldr	r3, [pc, #132]	; (808428c <_Z10serialMenuv+0x380>)
 8084208:	681a      	ldr	r2, [r3, #0]
 808420a:	2a01      	cmp	r2, #1
 808420c:	d10b      	bne.n	8084226 <_Z10serialMenuv+0x31a>
                new_temperature_sensor_enabled = 0;
 808420e:	2200      	movs	r2, #0
 8084210:	601a      	str	r2, [r3, #0]
                Serial.println("Disabling new temperature sensor");
 8084212:	f005 f8ef 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084216:	491e      	ldr	r1, [pc, #120]	; (8084290 <_Z10serialMenuv+0x384>)
                Serial.println("Temperature sensor already disabled");
 8084218:	f004 f893 	bl	8088342 <_ZN5Print7printlnEPKc>
            EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 808421c:	f005 fbda 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8084220:	2068      	movs	r0, #104	; 0x68
 8084222:	491a      	ldr	r1, [pc, #104]	; (808428c <_Z10serialMenuv+0x380>)
 8084224:	e77c      	b.n	8084120 <_Z10serialMenuv+0x214>
                Serial.println("Temperature sensor already disabled");
 8084226:	f005 f8e5 	bl	80893f4 <_Z16_fetch_usbserialv>
 808422a:	491a      	ldr	r1, [pc, #104]	; (8084294 <_Z10serialMenuv+0x388>)
 808422c:	e7f4      	b.n	8084218 <_Z10serialMenuv+0x30c>
            if (new_temperature_sensor_enabled == 1)
 808422e:	4b17      	ldr	r3, [pc, #92]	; (808428c <_Z10serialMenuv+0x380>)
 8084230:	681a      	ldr	r2, [r3, #0]
 8084232:	2a01      	cmp	r2, #1
 8084234:	d132      	bne.n	808429c <_Z10serialMenuv+0x390>
                Serial.println("Temperature sensor already enabled");
 8084236:	f005 f8dd 	bl	80893f4 <_Z16_fetch_usbserialv>
 808423a:	4917      	ldr	r1, [pc, #92]	; (8084298 <_Z10serialMenuv+0x38c>)
 808423c:	e7ec      	b.n	8084218 <_Z10serialMenuv+0x30c>
 808423e:	bf00      	nop
 8084240:	200006b0 	.word	0x200006b0
 8084244:	20000554 	.word	0x20000554
 8084248:	42c80000 	.word	0x42c80000
 808424c:	0808e1cb 	.word	0x0808e1cb
 8084250:	0808e1d1 	.word	0x0808e1d1
 8084254:	200005d4 	.word	0x200005d4
 8084258:	0808e1eb 	.word	0x0808e1eb
 808425c:	0808dcb9 	.word	0x0808dcb9
 8084260:	20001c4c 	.word	0x20001c4c
 8084264:	0808e206 	.word	0x0808e206
 8084268:	0808e219 	.word	0x0808e219
 808426c:	0808e233 	.word	0x0808e233
 8084270:	20002084 	.word	0x20002084
 8084274:	0808e246 	.word	0x0808e246
 8084278:	20000748 	.word	0x20000748
 808427c:	0808e261 	.word	0x0808e261
 8084280:	0808e275 	.word	0x0808e275
 8084284:	20001c80 	.word	0x20001c80
 8084288:	0808e288 	.word	0x0808e288
 808428c:	20000744 	.word	0x20000744
 8084290:	0808e2b2 	.word	0x0808e2b2
 8084294:	0808e2d3 	.word	0x0808e2d3
 8084298:	0808e2f7 	.word	0x0808e2f7
                new_temperature_sensor_enabled = 1;
 808429c:	2201      	movs	r2, #1
 808429e:	601a      	str	r2, [r3, #0]
                Serial.println("Temperatue sensor now enabled");
 80842a0:	f005 f8a8 	bl	80893f4 <_Z16_fetch_usbserialv>
 80842a4:	49b0      	ldr	r1, [pc, #704]	; (8084568 <_Z10serialMenuv+0x65c>)
 80842a6:	e7b7      	b.n	8084218 <_Z10serialMenuv+0x30c>
            if (temperature_units == CELSIUS)
 80842a8:	4bb0      	ldr	r3, [pc, #704]	; (808456c <_Z10serialMenuv+0x660>)
 80842aa:	681a      	ldr	r2, [r3, #0]
 80842ac:	2a01      	cmp	r2, #1
 80842ae:	d101      	bne.n	80842b4 <_Z10serialMenuv+0x3a8>
                temperature_units = FAHRENHEIT;
 80842b0:	2200      	movs	r2, #0
 80842b2:	e79c      	b.n	80841ee <_Z10serialMenuv+0x2e2>
                Serial.println("Temperature units already set to Fahrenheit.");
 80842b4:	f005 f89e 	bl	80893f4 <_Z16_fetch_usbserialv>
 80842b8:	49ad      	ldr	r1, [pc, #692]	; (8084570 <_Z10serialMenuv+0x664>)
 80842ba:	e79d      	b.n	80841f8 <_Z10serialMenuv+0x2ec>
            if (ozone_analog_enabled == 1)
 80842bc:	4bad      	ldr	r3, [pc, #692]	; (8084574 <_Z10serialMenuv+0x668>)
 80842be:	681a      	ldr	r2, [r3, #0]
 80842c0:	2a01      	cmp	r2, #1
 80842c2:	d109      	bne.n	80842d8 <_Z10serialMenuv+0x3cc>
                Serial.println("Analog reading of ozone already enabled");
 80842c4:	f005 f896 	bl	80893f4 <_Z16_fetch_usbserialv>
 80842c8:	49ab      	ldr	r1, [pc, #684]	; (8084578 <_Z10serialMenuv+0x66c>)
                Serial.println("Analog reading of ozone now enabled");
 80842ca:	f004 f83a 	bl	8088342 <_ZN5Print7printlnEPKc>
            EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80842ce:	f005 fb81 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80842d2:	206c      	movs	r0, #108	; 0x6c
 80842d4:	49a7      	ldr	r1, [pc, #668]	; (8084574 <_Z10serialMenuv+0x668>)
 80842d6:	e723      	b.n	8084120 <_Z10serialMenuv+0x214>
                ozone_analog_enabled = 1;
 80842d8:	2201      	movs	r2, #1
 80842da:	601a      	str	r2, [r3, #0]
                Serial.println("Analog reading of ozone now enabled");
 80842dc:	f005 f88a 	bl	80893f4 <_Z16_fetch_usbserialv>
 80842e0:	49a6      	ldr	r1, [pc, #664]	; (808457c <_Z10serialMenuv+0x670>)
 80842e2:	e7f2      	b.n	80842ca <_Z10serialMenuv+0x3be>
            if (ozone_analog_enabled == 0)
 80842e4:	4ba3      	ldr	r3, [pc, #652]	; (8084574 <_Z10serialMenuv+0x668>)
 80842e6:	681a      	ldr	r2, [r3, #0]
 80842e8:	b91a      	cbnz	r2, 80842f2 <_Z10serialMenuv+0x3e6>
                Serial.println("Digital reading of ozone already enabled");
 80842ea:	f005 f883 	bl	80893f4 <_Z16_fetch_usbserialv>
 80842ee:	49a4      	ldr	r1, [pc, #656]	; (8084580 <_Z10serialMenuv+0x674>)
 80842f0:	e7eb      	b.n	80842ca <_Z10serialMenuv+0x3be>
                ozone_analog_enabled = 0;
 80842f2:	2200      	movs	r2, #0
 80842f4:	601a      	str	r2, [r3, #0]
                Serial.println("Digital reading of ozone now enabled");
 80842f6:	f005 f87d 	bl	80893f4 <_Z16_fetch_usbserialv>
 80842fa:	49a2      	ldr	r1, [pc, #648]	; (8084584 <_Z10serialMenuv+0x678>)
 80842fc:	e7e5      	b.n	80842ca <_Z10serialMenuv+0x3be>
            serialGetAverageTime();
 80842fe:	f7ff fbd9 	bl	8083ab4 <_Z20serialGetAverageTimev>
            break;
 8084302:	e60b      	b.n	8083f1c <_Z10serialMenuv+0x10>
            resetESP();
 8084304:	f7fd ff4e 	bl	80821a4 <_Z8resetESPv>
            Serial.println("ESP reset!");
 8084308:	f005 f874 	bl	80893f4 <_Z16_fetch_usbserialv>
 808430c:	499e      	ldr	r1, [pc, #632]	; (8084588 <_Z10serialMenuv+0x67c>)
                Serial.println("Battery threshold already enabled");
 808430e:	f004 f818 	bl	8088342 <_ZN5Print7printlnEPKc>
 8084312:	e603      	b.n	8083f1c <_Z10serialMenuv+0x10>
            Serial.println("Outputting GPS continuously");
 8084314:	f005 f86e 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084318:	499c      	ldr	r1, [pc, #624]	; (808458c <_Z10serialMenuv+0x680>)
 808431a:	f004 f812 	bl	8088342 <_ZN5Print7printlnEPKc>
            echoGps();
 808431e:	f7fc ffab 	bl	8081278 <_Z7echoGpsv>
            break;
 8084322:	e5fb      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialResetSettings();
 8084324:	f7fe fa50 	bl	80827c8 <_Z19serialResetSettingsv>
            break;
 8084328:	e5f8      	b.n	8083f1c <_Z10serialMenuv+0x10>
            if (battery_threshold_enable == 1)
 808432a:	4e99      	ldr	r6, [pc, #612]	; (8084590 <_Z10serialMenuv+0x684>)
 808432c:	6833      	ldr	r3, [r6, #0]
 808432e:	2b01      	cmp	r3, #1
 8084330:	d103      	bne.n	808433a <_Z10serialMenuv+0x42e>
                Serial.println("Battery threshold already enabled");
 8084332:	f005 f85f 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084336:	4997      	ldr	r1, [pc, #604]	; (8084594 <_Z10serialMenuv+0x688>)
 8084338:	e7e9      	b.n	808430e <_Z10serialMenuv+0x402>
                Serial.println("Enabling battery threshold limiting");
 808433a:	f005 f85b 	bl	80893f4 <_Z16_fetch_usbserialv>
 808433e:	4996      	ldr	r1, [pc, #600]	; (8084598 <_Z10serialMenuv+0x68c>)
 8084340:	f003 ffff 	bl	8088342 <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 1;
 8084344:	2301      	movs	r3, #1
                battery_threshold_enable = 0;
 8084346:	6033      	str	r3, [r6, #0]
                EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8084348:	f005 fb44 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 808434c:	4631      	mov	r1, r6
 808434e:	2078      	movs	r0, #120	; 0x78
 8084350:	e6e6      	b.n	8084120 <_Z10serialMenuv+0x214>
            if (battery_threshold_enable == 0)
 8084352:	4e8f      	ldr	r6, [pc, #572]	; (8084590 <_Z10serialMenuv+0x684>)
 8084354:	6833      	ldr	r3, [r6, #0]
 8084356:	b91b      	cbnz	r3, 8084360 <_Z10serialMenuv+0x454>
                Serial.println("Battery threshold already disabled");
 8084358:	f005 f84c 	bl	80893f4 <_Z16_fetch_usbserialv>
 808435c:	498f      	ldr	r1, [pc, #572]	; (808459c <_Z10serialMenuv+0x690>)
 808435e:	e7d6      	b.n	808430e <_Z10serialMenuv+0x402>
                Serial.println("Disabling battery threshold limiting");
 8084360:	f005 f848 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084364:	498e      	ldr	r1, [pc, #568]	; (80845a0 <_Z10serialMenuv+0x694>)
 8084366:	f003 ffec 	bl	8088342 <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 0;
 808436a:	2300      	movs	r3, #0
 808436c:	e7eb      	b.n	8084346 <_Z10serialMenuv+0x43a>
            Serial.println("Enabling low power for gps");
 808436e:	f005 f841 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084372:	498c      	ldr	r1, [pc, #560]	; (80845a4 <_Z10serialMenuv+0x698>)
 8084374:	f003 ffe5 	bl	8088342 <_ZN5Print7printlnEPKc>
            enableLowPowerGPS();
 8084378:	f7fc ffe8 	bl	808134c <_Z17enableLowPowerGPSv>
            break;
 808437c:	e5ce      	b.n	8083f1c <_Z10serialMenuv+0x10>
            Serial.println("Turning off batfet");
 808437e:	f005 f839 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084382:	4989      	ldr	r1, [pc, #548]	; (80845a8 <_Z10serialMenuv+0x69c>)
 8084384:	f003 ffdd 	bl	8088342 <_ZN5Print7printlnEPKc>
            writeRegister(7, 0b01101011);
 8084388:	216b      	movs	r1, #107	; 0x6b
            writeRegister(7, 0b01001011);
 808438a:	2007      	movs	r0, #7
 808438c:	f7fc fc52 	bl	8080c34 <_Z13writeRegisterhh>
            break;
 8084390:	e5c4      	b.n	8083f1c <_Z10serialMenuv+0x10>
            Serial.println("Allowing batfet to turn on");
 8084392:	f005 f82f 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084396:	4985      	ldr	r1, [pc, #532]	; (80845ac <_Z10serialMenuv+0x6a0>)
 8084398:	f003 ffd3 	bl	8088342 <_ZN5Print7printlnEPKc>
            writeRegister(7, 0b01001011);
 808439c:	214b      	movs	r1, #75	; 0x4b
 808439e:	e7f4      	b.n	808438a <_Z10serialMenuv+0x47e>
            if (abc_logic_enabled)
 80843a0:	4e83      	ldr	r6, [pc, #524]	; (80845b0 <_Z10serialMenuv+0x6a4>)
 80843a2:	6833      	ldr	r3, [r6, #0]
 80843a4:	b183      	cbz	r3, 80843c8 <_Z10serialMenuv+0x4bc>
                Serial.println("Disabling ABC logic for CO2 sensor");
 80843a6:	f005 f825 	bl	80893f4 <_Z16_fetch_usbserialv>
 80843aa:	4982      	ldr	r1, [pc, #520]	; (80845b4 <_Z10serialMenuv+0x6a8>)
 80843ac:	f003 ffc9 	bl	8088342 <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 0;
 80843b0:	2300      	movs	r3, #0
 80843b2:	6033      	str	r3, [r6, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80843b4:	f005 fb0e 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80843b8:	4631      	mov	r1, r6
 80843ba:	207c      	movs	r0, #124	; 0x7c
 80843bc:	f7fc fb34 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
                t6713.disableABCLogic();
 80843c0:	487d      	ldr	r0, [pc, #500]	; (80845b8 <_Z10serialMenuv+0x6ac>)
 80843c2:	f000 feaa 	bl	808511a <_ZN13Telaire_T671315disableABCLogicEv>
 80843c6:	e5a9      	b.n	8083f1c <_Z10serialMenuv+0x10>
                Serial.println("ABC logic already disabled");
 80843c8:	f005 f814 	bl	80893f4 <_Z16_fetch_usbserialv>
 80843cc:	497b      	ldr	r1, [pc, #492]	; (80845bc <_Z10serialMenuv+0x6b0>)
 80843ce:	e79e      	b.n	808430e <_Z10serialMenuv+0x402>
            if (!abc_logic_enabled)
 80843d0:	4e77      	ldr	r6, [pc, #476]	; (80845b0 <_Z10serialMenuv+0x6a4>)
 80843d2:	6833      	ldr	r3, [r6, #0]
 80843d4:	b983      	cbnz	r3, 80843f8 <_Z10serialMenuv+0x4ec>
                Serial.println("Enabling abc logic for CO2 sensor");
 80843d6:	f005 f80d 	bl	80893f4 <_Z16_fetch_usbserialv>
 80843da:	4979      	ldr	r1, [pc, #484]	; (80845c0 <_Z10serialMenuv+0x6b4>)
 80843dc:	f003 ffb1 	bl	8088342 <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 1;
 80843e0:	2301      	movs	r3, #1
 80843e2:	6033      	str	r3, [r6, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80843e4:	f005 faf6 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 80843e8:	4631      	mov	r1, r6
 80843ea:	207c      	movs	r0, #124	; 0x7c
 80843ec:	f7fc fb1c 	bl	8080a28 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.0>
                t6713.enableABCLogic();
 80843f0:	4871      	ldr	r0, [pc, #452]	; (80845b8 <_Z10serialMenuv+0x6ac>)
 80843f2:	f000 feb7 	bl	8085164 <_ZN13Telaire_T671314enableABCLogicEv>
 80843f6:	e591      	b.n	8083f1c <_Z10serialMenuv+0x10>
                Serial.println("ABC logic already enabled");
 80843f8:	f004 fffc 	bl	80893f4 <_Z16_fetch_usbserialv>
 80843fc:	4971      	ldr	r1, [pc, #452]	; (80845c4 <_Z10serialMenuv+0x6b8>)
 80843fe:	e786      	b.n	808430e <_Z10serialMenuv+0x402>
            if (!hih8120_enabled)
 8084400:	4e71      	ldr	r6, [pc, #452]	; (80845c8 <_Z10serialMenuv+0x6bc>)
 8084402:	6833      	ldr	r3, [r6, #0]
 8084404:	b95b      	cbnz	r3, 808441e <_Z10serialMenuv+0x512>
                Serial.println("Enabling HIH8120 RH sensor");
 8084406:	f004 fff5 	bl	80893f4 <_Z16_fetch_usbserialv>
 808440a:	4970      	ldr	r1, [pc, #448]	; (80845cc <_Z10serialMenuv+0x6c0>)
 808440c:	f003 ff99 	bl	8088342 <_ZN5Print7printlnEPKc>
                hih8120_enabled = 1;
 8084410:	2301      	movs	r3, #1
                hih8120_enabled = 0;
 8084412:	6033      	str	r3, [r6, #0]
                EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8084414:	f005 fade 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8084418:	4631      	mov	r1, r6
 808441a:	2080      	movs	r0, #128	; 0x80
 808441c:	e680      	b.n	8084120 <_Z10serialMenuv+0x214>
                Serial.println("Disabling HIH8120 RH sensor");
 808441e:	f004 ffe9 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084422:	496b      	ldr	r1, [pc, #428]	; (80845d0 <_Z10serialMenuv+0x6c4>)
 8084424:	f003 ff8d 	bl	8088342 <_ZN5Print7printlnEPKc>
                hih8120_enabled = 0;
 8084428:	2300      	movs	r3, #0
 808442a:	e7f2      	b.n	8084412 <_Z10serialMenuv+0x506>
            if (!CO_socket)
 808442c:	4e69      	ldr	r6, [pc, #420]	; (80845d4 <_Z10serialMenuv+0x6c8>)
 808442e:	6833      	ldr	r3, [r6, #0]
 8084430:	b95b      	cbnz	r3, 808444a <_Z10serialMenuv+0x53e>
                Serial.println("Now reading CO from U20-Alpha2");
 8084432:	f004 ffdf 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084436:	4968      	ldr	r1, [pc, #416]	; (80845d8 <_Z10serialMenuv+0x6cc>)
 8084438:	f003 ff83 	bl	8088342 <_ZN5Print7printlnEPKc>
                CO_socket = 1;
 808443c:	2301      	movs	r3, #1
                CO_socket = 0;
 808443e:	6033      	str	r3, [r6, #0]
                EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8084440:	f005 fac8 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8084444:	4631      	mov	r1, r6
 8084446:	2084      	movs	r0, #132	; 0x84
 8084448:	e66a      	b.n	8084120 <_Z10serialMenuv+0x214>
                Serial.println("Now reading CO from U19-Alpha1");
 808444a:	f004 ffd3 	bl	80893f4 <_Z16_fetch_usbserialv>
 808444e:	4963      	ldr	r1, [pc, #396]	; (80845dc <_Z10serialMenuv+0x6d0>)
 8084450:	f003 ff77 	bl	8088342 <_ZN5Print7printlnEPKc>
                CO_socket = 0;
 8084454:	2300      	movs	r3, #0
 8084456:	e7f2      	b.n	808443e <_Z10serialMenuv+0x532>
            Serial.println("Reseting the CO2 sensor");
 8084458:	f004 ffcc 	bl	80893f4 <_Z16_fetch_usbserialv>
 808445c:	4960      	ldr	r1, [pc, #384]	; (80845e0 <_Z10serialMenuv+0x6d4>)
 808445e:	f003 ff70 	bl	8088342 <_ZN5Print7printlnEPKc>
            t6713.resetSensor();
 8084462:	4855      	ldr	r0, [pc, #340]	; (80845b8 <_Z10serialMenuv+0x6ac>)
 8084464:	f000 fe34 	bl	80850d0 <_ZN13Telaire_T671311resetSensorEv>
            break;
 8084468:	e558      	b.n	8083f1c <_Z10serialMenuv+0x10>
            if (google_location_en == 1)
 808446a:	4e5e      	ldr	r6, [pc, #376]	; (80845e4 <_Z10serialMenuv+0x6d8>)
 808446c:	6833      	ldr	r3, [r6, #0]
 808446e:	2b01      	cmp	r3, #1
 8084470:	d10b      	bne.n	808448a <_Z10serialMenuv+0x57e>
                Serial.println("Disabling google location services.");
 8084472:	f004 ffbf 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084476:	495c      	ldr	r1, [pc, #368]	; (80845e8 <_Z10serialMenuv+0x6dc>)
 8084478:	f003 ff63 	bl	8088342 <_ZN5Print7printlnEPKc>
                google_location_en = 0;
 808447c:	2300      	movs	r3, #0
                google_location_en = 1;
 808447e:	6033      	str	r3, [r6, #0]
                EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 8084480:	f005 faa8 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8084484:	4631      	mov	r1, r6
 8084486:	2088      	movs	r0, #136	; 0x88
 8084488:	e64a      	b.n	8084120 <_Z10serialMenuv+0x214>
                Serial.println("Enabling google location services.");
 808448a:	f004 ffb3 	bl	80893f4 <_Z16_fetch_usbserialv>
 808448e:	4957      	ldr	r1, [pc, #348]	; (80845ec <_Z10serialMenuv+0x6e0>)
 8084490:	f003 ff57 	bl	8088342 <_ZN5Print7printlnEPKc>
                google_location_en = 1;
 8084494:	2301      	movs	r3, #1
 8084496:	e7f2      	b.n	808447e <_Z10serialMenuv+0x572>
            t6713.calibrate(1);
 8084498:	2101      	movs	r1, #1
 808449a:	4847      	ldr	r0, [pc, #284]	; (80845b8 <_Z10serialMenuv+0x6ac>)
 808449c:	f000 fe88 	bl	80851b0 <_ZN13Telaire_T67139calibrateEi>
            co2_calibration_timer = 180;
 80844a0:	22b4      	movs	r2, #180	; 0xb4
 80844a2:	4b53      	ldr	r3, [pc, #332]	; (80845f0 <_Z10serialMenuv+0x6e4>)
 80844a4:	601a      	str	r2, [r3, #0]
            break;
 80844a6:	e539      	b.n	8083f1c <_Z10serialMenuv+0x10>
            Serial.println("Getting cellular information, this may take a while...");
 80844a8:	f004 ffa4 	bl	80893f4 <_Z16_fetch_usbserialv>
 80844ac:	4951      	ldr	r1, [pc, #324]	; (80845f4 <_Z10serialMenuv+0x6e8>)
 80844ae:	f003 ff48 	bl	8088342 <_ZN5Print7printlnEPKc>
            Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 80844b2:	a806      	add	r0, sp, #24
 80844b4:	4950      	ldr	r1, [pc, #320]	; (80845f8 <_Z10serialMenuv+0x6ec>)
 80844b6:	f002 fd09 	bl	8086ecc <_ZNK19CellularHelperClass7getIMEIEv>
 80844ba:	9a06      	ldr	r2, [sp, #24]
 80844bc:	494f      	ldr	r1, [pc, #316]	; (80845fc <_Z10serialMenuv+0x6f0>)
 80844be:	4850      	ldr	r0, [pc, #320]	; (8084600 <_Z10serialMenuv+0x6f4>)
 80844c0:	f7fc faff 	bl	8080ac2 <_ZNK5spark6Logger4infoEPKcz>
 80844c4:	a806      	add	r0, sp, #24
 80844c6:	f003 fc7d 	bl	8087dc4 <_ZN6StringD1Ev>
            Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 80844ca:	a806      	add	r0, sp, #24
 80844cc:	494a      	ldr	r1, [pc, #296]	; (80845f8 <_Z10serialMenuv+0x6ec>)
 80844ce:	f002 fd19 	bl	8086f04 <_ZNK19CellularHelperClass7getIMSIEv>
 80844d2:	9a06      	ldr	r2, [sp, #24]
 80844d4:	494b      	ldr	r1, [pc, #300]	; (8084604 <_Z10serialMenuv+0x6f8>)
 80844d6:	484a      	ldr	r0, [pc, #296]	; (8084600 <_Z10serialMenuv+0x6f4>)
 80844d8:	f7fc faf3 	bl	8080ac2 <_ZNK5spark6Logger4infoEPKcz>
 80844dc:	a806      	add	r0, sp, #24
 80844de:	f003 fc71 	bl	8087dc4 <_ZN6StringD1Ev>
            Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 80844e2:	a806      	add	r0, sp, #24
 80844e4:	4944      	ldr	r1, [pc, #272]	; (80845f8 <_Z10serialMenuv+0x6ec>)
 80844e6:	f002 fd13 	bl	8086f10 <_ZNK19CellularHelperClass8getICCIDEv>
 80844ea:	9a06      	ldr	r2, [sp, #24]
 80844ec:	4946      	ldr	r1, [pc, #280]	; (8084608 <_Z10serialMenuv+0x6fc>)
 80844ee:	4844      	ldr	r0, [pc, #272]	; (8084600 <_Z10serialMenuv+0x6f4>)
 80844f0:	f7fc fae7 	bl	8080ac2 <_ZNK5spark6Logger4infoEPKcz>
 80844f4:	e62a      	b.n	808414c <_Z10serialMenuv+0x240>
            Serial.print("APP Version: ");
 80844f6:	f004 ff7d 	bl	80893f4 <_Z16_fetch_usbserialv>
 80844fa:	4944      	ldr	r1, [pc, #272]	; (808460c <_Z10serialMenuv+0x700>)
 80844fc:	f003 ff0e 	bl	808831c <_ZN5Print5printEPKc>
            Serial.println(APP_VERSION);
 8084500:	f004 ff78 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084504:	220a      	movs	r2, #10
 8084506:	2146      	movs	r1, #70	; 0x46
 8084508:	f7fe ff0d 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
            Serial.print("Build: ");
 808450c:	f004 ff72 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084510:	493f      	ldr	r1, [pc, #252]	; (8084610 <_Z10serialMenuv+0x704>)
 8084512:	f003 ff03 	bl	808831c <_ZN5Print5printEPKc>
            Serial.println(BUILD_VERSION);
 8084516:	f004 ff6d 	bl	80893f4 <_Z16_fetch_usbserialv>
 808451a:	220a      	movs	r2, #10
 808451c:	210d      	movs	r1, #13
 808451e:	f7fe ff02 	bl	8083326 <_ZN5Print7printlnIiLi0EEEjT_i>
            break;
 8084522:	e4fb      	b.n	8083f1c <_Z10serialMenuv+0x10>
            if (ozone_enabled == 0)
 8084524:	4e3b      	ldr	r6, [pc, #236]	; (8084614 <_Z10serialMenuv+0x708>)
 8084526:	6833      	ldr	r3, [r6, #0]
 8084528:	b95b      	cbnz	r3, 8084542 <_Z10serialMenuv+0x636>
                Serial.println("Enabling Ozone");
 808452a:	f004 ff63 	bl	80893f4 <_Z16_fetch_usbserialv>
 808452e:	493a      	ldr	r1, [pc, #232]	; (8084618 <_Z10serialMenuv+0x70c>)
                Serial.println("Ozone already enabled");
 8084530:	f003 ff07 	bl	8088342 <_ZN5Print7printlnEPKc>
            ozone_enabled = 1;
 8084534:	2301      	movs	r3, #1
            ozone_enabled = 0;
 8084536:	6033      	str	r3, [r6, #0]
            EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8084538:	f005 fa4c 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 808453c:	2058      	movs	r0, #88	; 0x58
 808453e:	4935      	ldr	r1, [pc, #212]	; (8084614 <_Z10serialMenuv+0x708>)
 8084540:	e5ee      	b.n	8084120 <_Z10serialMenuv+0x214>
                Serial.println("Ozone already enabled");
 8084542:	f004 ff57 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084546:	4935      	ldr	r1, [pc, #212]	; (808461c <_Z10serialMenuv+0x710>)
 8084548:	e7f2      	b.n	8084530 <_Z10serialMenuv+0x624>
            if (ozone_enabled == 1)
 808454a:	4e32      	ldr	r6, [pc, #200]	; (8084614 <_Z10serialMenuv+0x708>)
 808454c:	6833      	ldr	r3, [r6, #0]
 808454e:	2b01      	cmp	r3, #1
 8084550:	d106      	bne.n	8084560 <_Z10serialMenuv+0x654>
                Serial.println("Disabling Ozone");
 8084552:	f004 ff4f 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084556:	4932      	ldr	r1, [pc, #200]	; (8084620 <_Z10serialMenuv+0x714>)
                Serial.println("Ozone already disabled");
 8084558:	f003 fef3 	bl	8088342 <_ZN5Print7printlnEPKc>
            ozone_enabled = 0;
 808455c:	2300      	movs	r3, #0
 808455e:	e7ea      	b.n	8084536 <_Z10serialMenuv+0x62a>
                Serial.println("Ozone already disabled");
 8084560:	f004 ff48 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084564:	492f      	ldr	r1, [pc, #188]	; (8084624 <_Z10serialMenuv+0x718>)
 8084566:	e7f7      	b.n	8084558 <_Z10serialMenuv+0x64c>
 8084568:	0808e31a 	.word	0x0808e31a
 808456c:	20001c80 	.word	0x20001c80
 8084570:	0808e338 	.word	0x0808e338
 8084574:	2000074c 	.word	0x2000074c
 8084578:	0808e365 	.word	0x0808e365
 808457c:	0808e38d 	.word	0x0808e38d
 8084580:	0808e3b1 	.word	0x0808e3b1
 8084584:	0808e3da 	.word	0x0808e3da
 8084588:	0808df5a 	.word	0x0808df5a
 808458c:	0808e3ff 	.word	0x0808e3ff
 8084590:	20000550 	.word	0x20000550
 8084594:	0808e41b 	.word	0x0808e41b
 8084598:	0808e43d 	.word	0x0808e43d
 808459c:	0808e461 	.word	0x0808e461
 80845a0:	0808e484 	.word	0x0808e484
 80845a4:	0808e4a9 	.word	0x0808e4a9
 80845a8:	0808e4c4 	.word	0x0808e4c4
 80845ac:	0808e4d7 	.word	0x0808e4d7
 80845b0:	20000540 	.word	0x20000540
 80845b4:	0808e4f2 	.word	0x0808e4f2
 80845b8:	20001c70 	.word	0x20001c70
 80845bc:	0808e515 	.word	0x0808e515
 80845c0:	0808e530 	.word	0x0808e530
 80845c4:	0808e552 	.word	0x0808e552
 80845c8:	200006ac 	.word	0x200006ac
 80845cc:	0808e56c 	.word	0x0808e56c
 80845d0:	0808e587 	.word	0x0808e587
 80845d4:	200002cc 	.word	0x200002cc
 80845d8:	0808e5a3 	.word	0x0808e5a3
 80845dc:	0808e5c2 	.word	0x0808e5c2
 80845e0:	0808e5e1 	.word	0x0808e5e1
 80845e4:	20000660 	.word	0x20000660
 80845e8:	0808e5f9 	.word	0x0808e5f9
 80845ec:	0808e61d 	.word	0x0808e61d
 80845f0:	200005d0 	.word	0x200005d0
 80845f4:	0808e640 	.word	0x0808e640
 80845f8:	20001cdc 	.word	0x20001cdc
 80845fc:	0808e677 	.word	0x0808e677
 8084600:	20001cf0 	.word	0x20001cf0
 8084604:	0808e67f 	.word	0x0808e67f
 8084608:	0808e687 	.word	0x0808e687
 808460c:	0808e690 	.word	0x0808e690
 8084610:	0808df72 	.word	0x0808df72
 8084614:	20000750 	.word	0x20000750
 8084618:	0808e69e 	.word	0x0808e69e
 808461c:	0808e6ad 	.word	0x0808e6ad
 8084620:	0808e6c3 	.word	0x0808e6c3
 8084624:	0808e6d3 	.word	0x0808e6d3
            if (voc_enabled == 0)
 8084628:	4e60      	ldr	r6, [pc, #384]	; (80847ac <_Z10serialMenuv+0x8a0>)
 808462a:	6833      	ldr	r3, [r6, #0]
 808462c:	b95b      	cbnz	r3, 8084646 <_Z10serialMenuv+0x73a>
                Serial.println("Enabling VOCs");
 808462e:	f004 fee1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084632:	495f      	ldr	r1, [pc, #380]	; (80847b0 <_Z10serialMenuv+0x8a4>)
                Serial.println("VOCs already enabled");
 8084634:	f003 fe85 	bl	8088342 <_ZN5Print7printlnEPKc>
            voc_enabled = 1;
 8084638:	2301      	movs	r3, #1
            voc_enabled = 0;
 808463a:	6033      	str	r3, [r6, #0]
            EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 808463c:	f005 f9ca 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8084640:	205c      	movs	r0, #92	; 0x5c
 8084642:	495a      	ldr	r1, [pc, #360]	; (80847ac <_Z10serialMenuv+0x8a0>)
 8084644:	e56c      	b.n	8084120 <_Z10serialMenuv+0x214>
                Serial.println("VOCs already enabled");
 8084646:	f004 fed5 	bl	80893f4 <_Z16_fetch_usbserialv>
 808464a:	495a      	ldr	r1, [pc, #360]	; (80847b4 <_Z10serialMenuv+0x8a8>)
 808464c:	e7f2      	b.n	8084634 <_Z10serialMenuv+0x728>
            if (voc_enabled == 1)
 808464e:	4e57      	ldr	r6, [pc, #348]	; (80847ac <_Z10serialMenuv+0x8a0>)
 8084650:	6833      	ldr	r3, [r6, #0]
 8084652:	2b01      	cmp	r3, #1
 8084654:	d106      	bne.n	8084664 <_Z10serialMenuv+0x758>
                Serial.println("Disabling VOC's");
 8084656:	f004 fecd 	bl	80893f4 <_Z16_fetch_usbserialv>
 808465a:	4957      	ldr	r1, [pc, #348]	; (80847b8 <_Z10serialMenuv+0x8ac>)
                Serial.println("VOC's already disabled");
 808465c:	f003 fe71 	bl	8088342 <_ZN5Print7printlnEPKc>
            voc_enabled = 0;
 8084660:	2300      	movs	r3, #0
 8084662:	e7ea      	b.n	808463a <_Z10serialMenuv+0x72e>
                Serial.println("VOC's already disabled");
 8084664:	f004 fec6 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084668:	4954      	ldr	r1, [pc, #336]	; (80847bc <_Z10serialMenuv+0x8b0>)
 808466a:	e7f7      	b.n	808465c <_Z10serialMenuv+0x750>
            Serial.print("Fault: ");
 808466c:	f004 fec2 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084670:	4953      	ldr	r1, [pc, #332]	; (80847c0 <_Z10serialMenuv+0x8b4>)
 8084672:	f003 fe53 	bl	808831c <_ZN5Print5printEPKc>
            fault = pmic.getFault();
 8084676:	4853      	ldr	r0, [pc, #332]	; (80847c4 <_Z10serialMenuv+0x8b8>)
 8084678:	f003 f928 	bl	80878cc <_ZN4PMIC8getFaultEv>
 808467c:	4680      	mov	r8, r0
            Serial.println(fault);
 808467e:	f004 feb9 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084682:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 8084684:	220a      	movs	r2, #10
 8084686:	4641      	mov	r1, r8
 8084688:	f003 fe6f 	bl	808836a <_ZN5Print11printNumberEmh>
        n += println();
 808468c:	4630      	mov	r0, r6
 808468e:	f003 fe4c 	bl	808832a <_ZN5Print7printlnEv>
            Serial.print("System status: ");
 8084692:	f004 feaf 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084696:	494c      	ldr	r1, [pc, #304]	; (80847c8 <_Z10serialMenuv+0x8bc>)
 8084698:	f003 fe40 	bl	808831c <_ZN5Print5printEPKc>
            systemStatus = pmic.getSystemStatus();
 808469c:	4849      	ldr	r0, [pc, #292]	; (80847c4 <_Z10serialMenuv+0x8b8>)
 808469e:	f003 f912 	bl	80878c6 <_ZN4PMIC15getSystemStatusEv>
 80846a2:	4680      	mov	r8, r0
            Serial.println(systemStatus);
 80846a4:	f004 fea6 	bl	80893f4 <_Z16_fetch_usbserialv>
 80846a8:	4606      	mov	r6, r0
        return printNumber(val, base) + t;
 80846aa:	220a      	movs	r2, #10
 80846ac:	4641      	mov	r1, r8
 80846ae:	f003 fe5c 	bl	808836a <_ZN5Print11printNumberEmh>
        n += println();
 80846b2:	4630      	mov	r0, r6
 80846b4:	f003 fe39 	bl	808832a <_ZN5Print7printlnEv>
        return n;
 80846b8:	e430      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialIncreaseChargeCurrent();
 80846ba:	f7fd ff0b 	bl	80824d4 <_Z27serialIncreaseChargeCurrentv>
            break;
 80846be:	e42d      	b.n	8083f1c <_Z10serialMenuv+0x10>
            serialIncreaseInputCurrent();
 80846c0:	f7fd fec6 	bl	8082450 <_Z26serialIncreaseInputCurrentv>
            break;
 80846c4:	e42a      	b.n	8083f1c <_Z10serialMenuv+0x10>
            Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 80846c6:	f004 fe95 	bl	80893f4 <_Z16_fetch_usbserialv>
 80846ca:	4940      	ldr	r1, [pc, #256]	; (80847cc <_Z10serialMenuv+0x8c0>)
 80846cc:	f003 fe39 	bl	8088342 <_ZN5Print7printlnEPKc>
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 80846d0:	f8df a118 	ldr.w	sl, [pc, #280]	; 80847ec <_Z10serialMenuv+0x8e0>
            while (!Serial.available())
 80846d4:	f004 fe8e 	bl	80893f4 <_Z16_fetch_usbserialv>
 80846d8:	6803      	ldr	r3, [r0, #0]
 80846da:	691b      	ldr	r3, [r3, #16]
 80846dc:	4798      	blx	r3
 80846de:	2800      	cmp	r0, #0
 80846e0:	f47f ac1c 	bne.w	8083f1c <_Z10serialMenuv+0x10>
                if (!bme.performReading())
 80846e4:	4628      	mov	r0, r5
 80846e6:	f002 f903 	bl	80868f0 <_ZN15Adafruit_BME68014performReadingEv>
 80846ea:	b938      	cbnz	r0, 80846fc <_Z10serialMenuv+0x7f0>
                    Serial.println("Failed to read BME680");
 80846ec:	f004 fe82 	bl	80893f4 <_Z16_fetch_usbserialv>
 80846f0:	4937      	ldr	r1, [pc, #220]	; (80847d0 <_Z10serialMenuv+0x8c4>)
    Serial.println("Exiting serial menu...");
 80846f2:	f003 fe26 	bl	8088342 <_ZN5Print7printlnEPKc>
}
 80846f6:	b00a      	add	sp, #40	; 0x28
 80846f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 80846fc:	f004 fe7a 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084700:	4639      	mov	r1, r7
 8084702:	4606      	mov	r6, r0
 8084704:	68e8      	ldr	r0, [r5, #12]
 8084706:	f006 f8df 	bl	808a8c8 <__aeabi_fdiv>
 808470a:	f005 fb7b 	bl	8089e04 <__aeabi_f2d>
 808470e:	4680      	mov	r8, r0
 8084710:	68a8      	ldr	r0, [r5, #8]
 8084712:	4689      	mov	r9, r1
 8084714:	f005 fb76 	bl	8089e04 <__aeabi_f2d>
 8084718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 808471c:	6868      	ldr	r0, [r5, #4]
 808471e:	f005 fb71 	bl	8089e04 <__aeabi_f2d>
 8084722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8084726:	6828      	ldr	r0, [r5, #0]
 8084728:	f005 fb6c 	bl	8089e04 <__aeabi_f2d>
 808472c:	4642      	mov	r2, r8
 808472e:	e9cd 0100 	strd	r0, r1, [sp]
 8084732:	464b      	mov	r3, r9
 8084734:	4651      	mov	r1, sl
 8084736:	4630      	mov	r0, r6
 8084738:	f7fc f9a8 	bl	8080a8c <_ZN5Print6printfEPKcz>
            while (!Serial.available())
 808473c:	e7ca      	b.n	80846d4 <_Z10serialMenuv+0x7c8>
            if (sensible_iot_en == 1)
 808473e:	4e25      	ldr	r6, [pc, #148]	; (80847d4 <_Z10serialMenuv+0x8c8>)
 8084740:	6833      	ldr	r3, [r6, #0]
 8084742:	2b01      	cmp	r3, #1
 8084744:	d10b      	bne.n	808475e <_Z10serialMenuv+0x852>
                Serial.println("Disabling sensible iot data push.");
 8084746:	f004 fe55 	bl	80893f4 <_Z16_fetch_usbserialv>
 808474a:	4923      	ldr	r1, [pc, #140]	; (80847d8 <_Z10serialMenuv+0x8cc>)
 808474c:	f003 fdf9 	bl	8088342 <_ZN5Print7printlnEPKc>
                sensible_iot_en = 0;
 8084750:	2300      	movs	r3, #0
 8084752:	6033      	str	r3, [r6, #0]
                EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8084754:	f005 f93e 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8084758:	4631      	mov	r1, r6
 808475a:	208c      	movs	r0, #140	; 0x8c
 808475c:	e4e0      	b.n	8084120 <_Z10serialMenuv+0x214>
                serialSetSensibleIotEnable();
 808475e:	f7fd fff1 	bl	8082744 <_Z26serialSetSensibleIotEnablev>
 8084762:	f7ff bbdb 	b.w	8083f1c <_Z10serialMenuv+0x10>
            if (car_topper_power_en == 1)
 8084766:	4e1d      	ldr	r6, [pc, #116]	; (80847dc <_Z10serialMenuv+0x8d0>)
 8084768:	6833      	ldr	r3, [r6, #0]
 808476a:	2b01      	cmp	r3, #1
 808476c:	d10b      	bne.n	8084786 <_Z10serialMenuv+0x87a>
                car_topper_power_en = 0;
 808476e:	2300      	movs	r3, #0
 8084770:	6033      	str	r3, [r6, #0]
                Serial.println("Disabling car topper power.  ");
 8084772:	f004 fe3f 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084776:	491a      	ldr	r1, [pc, #104]	; (80847e0 <_Z10serialMenuv+0x8d4>)
                Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 8084778:	f003 fde3 	bl	8088342 <_ZN5Print7printlnEPKc>
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 808477c:	f005 f92a 	bl	80899d4 <_Z21__fetch_global_EEPROMv>
 8084780:	4631      	mov	r1, r6
 8084782:	2090      	movs	r0, #144	; 0x90
 8084784:	e4cc      	b.n	8084120 <_Z10serialMenuv+0x214>
                car_topper_power_en = 1;
 8084786:	2301      	movs	r3, #1
 8084788:	6033      	str	r3, [r6, #0]
                Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 808478a:	f004 fe33 	bl	80893f4 <_Z16_fetch_usbserialv>
 808478e:	4915      	ldr	r1, [pc, #84]	; (80847e4 <_Z10serialMenuv+0x8d8>)
 8084790:	e7f2      	b.n	8084778 <_Z10serialMenuv+0x86c>
            outputCOtoPI();
 8084792:	f7fd fd33 	bl	80821fc <_Z12outputCOtoPIv>
            break;
 8084796:	f7ff bbc1 	b.w	8083f1c <_Z10serialMenuv+0x10>
            outputSerialMenuOptions();
 808479a:	f7fe fb19 	bl	8082dd0 <_Z23outputSerialMenuOptionsv>
            break;
 808479e:	f7ff bbbd 	b.w	8083f1c <_Z10serialMenuv+0x10>
    Serial.println("Exiting serial menu...");
 80847a2:	f004 fe27 	bl	80893f4 <_Z16_fetch_usbserialv>
 80847a6:	4910      	ldr	r1, [pc, #64]	; (80847e8 <_Z10serialMenuv+0x8dc>)
 80847a8:	e7a3      	b.n	80846f2 <_Z10serialMenuv+0x7e6>
 80847aa:	bf00      	nop
 80847ac:	20001c88 	.word	0x20001c88
 80847b0:	0808e6ea 	.word	0x0808e6ea
 80847b4:	0808e6f8 	.word	0x0808e6f8
 80847b8:	0808e70d 	.word	0x0808e70d
 80847bc:	0808e71d 	.word	0x0808e71d
 80847c0:	0808e734 	.word	0x0808e734
 80847c4:	20000768 	.word	0x20000768
 80847c8:	0808e73c 	.word	0x0808e73c
 80847cc:	0808e74c 	.word	0x0808e74c
 80847d0:	0808e787 	.word	0x0808e787
 80847d4:	20000c18 	.word	0x20000c18
 80847d8:	0808e7ce 	.word	0x0808e7ce
 80847dc:	200005cc 	.word	0x200005cc
 80847e0:	0808e7f0 	.word	0x0808e7f0
 80847e4:	0808e80e 	.word	0x0808e80e
 80847e8:	0808e856 	.word	0x0808e856
 80847ec:	0808e79d 	.word	0x0808e79d

080847f0 <loop>:
{
 80847f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    measurement_number++;
 80847f2:	4c71      	ldr	r4, [pc, #452]	; (80849b8 <loop+0x1c8>)
 80847f4:	2200      	movs	r2, #0
 80847f6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80847fa:	4b70      	ldr	r3, [pc, #448]	; (80849bc <loop+0x1cc>)
 80847fc:	f005 f9a4 	bl	8089b48 <__adddf3>
 8084800:	e9c4 0100 	strd	r0, r1, [r4]
    CO_float = readAlpha1();
 8084804:	f7fd fad8 	bl	8081db8 <_Z10readAlpha1v>
    CO_float_A = readCO_A();
 8084808:	4b6d      	ldr	r3, [pc, #436]	; (80849c0 <loop+0x1d0>)
 808480a:	6018      	str	r0, [r3, #0]
    CO_float = readAlpha2();
 808480c:	f7fc fe2c 	bl	8081468 <_Z10readAlpha2v>
    CO_float_B = readCO_B();
 8084810:	4b6c      	ldr	r3, [pc, #432]	; (80849c4 <loop+0x1d4>)
 8084812:	6018      	str	r0, [r3, #0]
    readGpsStream();
 8084814:	f7fc ffbc 	bl	8081790 <_Z13readGpsStreamv>
    readGpsStreamDate();        //get the gps date and time along with the cellular time and determine which one to output
 8084818:	f7fd f948 	bl	8081aac <_Z17readGpsStreamDatev>
    systemTime = Time.now();
 808481c:	f004 f8a5 	bl	808896a <_ZN9TimeClass3nowEv>
 8084820:	4b69      	ldr	r3, [pc, #420]	; (80849c8 <loop+0x1d8>)
 8084822:	17c1      	asrs	r1, r0, #31
 8084824:	e9c3 0100 	strd	r0, r1, [r3]
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8084828:	4b68      	ldr	r3, [pc, #416]	; (80849cc <loop+0x1dc>)
    if (serBuf.available() > 0)
 808482a:	4869      	ldr	r0, [pc, #420]	; (80849d0 <loop+0x1e0>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 808482c:	681a      	ldr	r2, [r3, #0]
 808482e:	4b69      	ldr	r3, [pc, #420]	; (80849d4 <loop+0x1e4>)
 8084830:	601a      	str	r2, [r3, #0]
 8084832:	f002 fc1b 	bl	808706c <_ZN16SerialBufferBase9availableEv>
 8084836:	2800      	cmp	r0, #0
 8084838:	dd01      	ble.n	808483e <loop+0x4e>
        getEspAQSyncData();
 808483a:	f7fe fca9 	bl	8083190 <_Z16getEspAQSyncDatav>
    outputCOtoPI();
 808483e:	f7fd fcdd 	bl	80821fc <_Z12outputCOtoPIv>
    if (Serial.available() > 0) 
 8084842:	f004 fdd7 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084846:	6803      	ldr	r3, [r0, #0]
 8084848:	691b      	ldr	r3, [r3, #16]
 808484a:	4798      	blx	r3
 808484c:	2800      	cmp	r0, #0
 808484e:	dd1d      	ble.n	808488c <loop+0x9c>
        incomingByte = Serial.read();
 8084850:	f004 fdd0 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084854:	6803      	ldr	r3, [r0, #0]
 8084856:	4c60      	ldr	r4, [pc, #384]	; (80849d8 <loop+0x1e8>)
 8084858:	695b      	ldr	r3, [r3, #20]
 808485a:	4798      	blx	r3
        if (debugging_enabled) 
 808485c:	4b5f      	ldr	r3, [pc, #380]	; (80849dc <loop+0x1ec>)
        incomingByte = Serial.read();
 808485e:	7020      	strb	r0, [r4, #0]
        if (debugging_enabled) 
 8084860:	681b      	ldr	r3, [r3, #0]
 8084862:	b14b      	cbz	r3, 8084878 <loop+0x88>
            Serial.print("Incoming byte:");
 8084864:	f004 fdc6 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084868:	495d      	ldr	r1, [pc, #372]	; (80849e0 <loop+0x1f0>)
 808486a:	f003 fd57 	bl	808831c <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 808486e:	f004 fdc1 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084872:	7821      	ldrb	r1, [r4, #0]
 8084874:	f003 fd6f 	bl	8088356 <_ZN5Print7printlnEc>
        Serial.println(incomingByte);
 8084878:	f004 fdbc 	bl	80893f4 <_Z16_fetch_usbserialv>
 808487c:	7821      	ldrb	r1, [r4, #0]
 808487e:	f003 fd6a 	bl	8088356 <_ZN5Print7printlnEc>
        if (incomingByte == 'm') 
 8084882:	7823      	ldrb	r3, [r4, #0]
 8084884:	2b6d      	cmp	r3, #109	; 0x6d
 8084886:	d101      	bne.n	808488c <loop+0x9c>
            serialMenu();
 8084888:	f7ff fb40 	bl	8083f0c <_Z10serialMenuv>
    if (serial_cellular_enabled) 
 808488c:	4b55      	ldr	r3, [pc, #340]	; (80849e4 <loop+0x1f4>)
 808488e:	681b      	ldr	r3, [r3, #0]
 8084890:	2b00      	cmp	r3, #0
 8084892:	d076      	beq.n	8084982 <loop+0x192>
        status_word.status_int |= 0x01;
 8084894:	4a54      	ldr	r2, [pc, #336]	; (80849e8 <loop+0x1f8>)
 8084896:	8813      	ldrh	r3, [r2, #0]
 8084898:	f043 0301 	orr.w	r3, r3, #1
 808489c:	8013      	strh	r3, [r2, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808489e:	f002 ff29 	bl	80876f4 <spark_cloud_flag_connected>
        if (!Particle.connected() && !tried_cellular_connect) 
 80848a2:	2800      	cmp	r0, #0
 80848a4:	d143      	bne.n	808492e <loop+0x13e>
 80848a6:	4b51      	ldr	r3, [pc, #324]	; (80849ec <loop+0x1fc>)
 80848a8:	781a      	ldrb	r2, [r3, #0]
 80848aa:	2a00      	cmp	r2, #0
 80848ac:	d13f      	bne.n	808492e <loop+0x13e>
            tried_cellular_connect = true;
 80848ae:	2201      	movs	r2, #1
            if (debugging_enabled) 
 80848b0:	4c4a      	ldr	r4, [pc, #296]	; (80849dc <loop+0x1ec>)
            tried_cellular_connect = true;
 80848b2:	701a      	strb	r2, [r3, #0]
            if (debugging_enabled) 
 80848b4:	6823      	ldr	r3, [r4, #0]
 80848b6:	b173      	cbz	r3, 80848d6 <loop+0xe6>
                Serial.println("Connecting to cellular network");
 80848b8:	f004 fd9c 	bl	80893f4 <_Z16_fetch_usbserialv>
 80848bc:	494c      	ldr	r1, [pc, #304]	; (80849f0 <loop+0x200>)
 80848be:	f003 fd40 	bl	8088342 <_ZN5Print7printlnEPKc>
                writeLogFile("Connecting to cellular network");
 80848c2:	494b      	ldr	r1, [pc, #300]	; (80849f0 <loop+0x200>)
 80848c4:	4668      	mov	r0, sp
 80848c6:	f003 fac7 	bl	8087e58 <_ZN6StringC1EPKc>
 80848ca:	4668      	mov	r0, sp
 80848cc:	f7fc ff10 	bl	80816f0 <_Z12writeLogFile6String>
 80848d0:	4668      	mov	r0, sp
 80848d2:	f003 fa77 	bl	8087dc4 <_ZN6StringD1Ev>
        network_on(*this, 0, 0, NULL);
 80848d6:	2300      	movs	r3, #0
 80848d8:	4846      	ldr	r0, [pc, #280]	; (80849f4 <loop+0x204>)
 80848da:	461a      	mov	r2, r3
 80848dc:	4619      	mov	r1, r3
 80848de:	6840      	ldr	r0, [r0, #4]
 80848e0:	f002 feb8 	bl	8087654 <network_on>
            if (debugging_enabled) 
 80848e4:	6823      	ldr	r3, [r4, #0]
 80848e6:	b173      	cbz	r3, 8084906 <loop+0x116>
                Serial.println("after cellularOn");
 80848e8:	f004 fd84 	bl	80893f4 <_Z16_fetch_usbserialv>
 80848ec:	4942      	ldr	r1, [pc, #264]	; (80849f8 <loop+0x208>)
 80848ee:	f003 fd28 	bl	8088342 <_ZN5Print7printlnEPKc>
                writeLogFile("After cellularOn");
 80848f2:	4942      	ldr	r1, [pc, #264]	; (80849fc <loop+0x20c>)
 80848f4:	4668      	mov	r0, sp
 80848f6:	f003 faaf 	bl	8087e58 <_ZN6StringC1EPKc>
 80848fa:	4668      	mov	r0, sp
 80848fc:	f7fc fef8 	bl	80816f0 <_Z12writeLogFile6String>
 8084900:	4668      	mov	r0, sp
 8084902:	f003 fa5f 	bl	8087dc4 <_ZN6StringD1Ev>
        spark_cloud_flag_connect();
 8084906:	f002 feed 	bl	80876e4 <spark_cloud_flag_connect>
            if (debugging_enabled)
 808490a:	6823      	ldr	r3, [r4, #0]
 808490c:	b193      	cbz	r3, 8084934 <loop+0x144>
                Serial.println("After particle connect");
 808490e:	f004 fd71 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084912:	493b      	ldr	r1, [pc, #236]	; (8084a00 <loop+0x210>)
 8084914:	f003 fd15 	bl	8088342 <_ZN5Print7printlnEPKc>
                writeLogFile("After particle connect");
 8084918:	4939      	ldr	r1, [pc, #228]	; (8084a00 <loop+0x210>)
 808491a:	4668      	mov	r0, sp
 808491c:	f003 fa9c 	bl	8087e58 <_ZN6StringC1EPKc>
 8084920:	4668      	mov	r0, sp
 8084922:	f7fc fee5 	bl	80816f0 <_Z12writeLogFile6String>
 8084926:	4668      	mov	r0, sp
 8084928:	f003 fa4c 	bl	8087dc4 <_ZN6StringD1Ev>
 808492c:	e002      	b.n	8084934 <loop+0x144>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 808492e:	f002 fee1 	bl	80876f4 <spark_cloud_flag_connected>
        else if (Particle.connected()) 
 8084932:	b9d0      	cbnz	r0, 808496a <loop+0x17a>
    powerCheck.loop();
 8084934:	4c33      	ldr	r4, [pc, #204]	; (8084a04 <loop+0x214>)
 8084936:	4620      	mov	r0, r4
 8084938:	f000 fa44 	bl	8084dc4 <_ZN10PowerCheck4loopEv>
    if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 808493c:	4b32      	ldr	r3, [pc, #200]	; (8084a08 <loop+0x218>)
 808493e:	681b      	ldr	r3, [r3, #0]
 8084940:	2b01      	cmp	r3, #1
 8084942:	d110      	bne.n	8084966 <loop+0x176>
 8084944:	4831      	ldr	r0, [pc, #196]	; (8084a0c <loop+0x21c>)
 8084946:	f004 f8fb 	bl	8088b40 <_ZN9FuelGauge6getSoCEv>
 808494a:	4931      	ldr	r1, [pc, #196]	; (8084a10 <loop+0x220>)
 808494c:	f006 f8a6 	bl	808aa9c <__aeabi_fcmplt>
 8084950:	b148      	cbz	r0, 8084966 <loop+0x176>
 8084952:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8084956:	b933      	cbnz	r3, 8084966 <loop+0x176>
        Serial.println("Going to sleep because battery is below 20% charge");
 8084958:	f004 fd4c 	bl	80893f4 <_Z16_fetch_usbserialv>
 808495c:	492d      	ldr	r1, [pc, #180]	; (8084a14 <loop+0x224>)
 808495e:	f003 fcf0 	bl	8088342 <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8084962:	f7fd fbc3 	bl	80820ec <_Z16goToSleepBatteryv>
}
 8084966:	b004      	add	sp, #16
 8084968:	bd10      	pop	{r4, pc}
            if (debugging_enabled) 
 808496a:	4b1c      	ldr	r3, [pc, #112]	; (80849dc <loop+0x1ec>)
 808496c:	681b      	ldr	r3, [r3, #0]
 808496e:	b123      	cbz	r3, 808497a <loop+0x18a>
                Serial.println("setting tried_cellular_connect to false");
 8084970:	f004 fd40 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084974:	4928      	ldr	r1, [pc, #160]	; (8084a18 <loop+0x228>)
 8084976:	f003 fce4 	bl	8088342 <_ZN5Print7printlnEPKc>
            tried_cellular_connect = false;
 808497a:	2200      	movs	r2, #0
 808497c:	4b1b      	ldr	r3, [pc, #108]	; (80849ec <loop+0x1fc>)
 808497e:	701a      	strb	r2, [r3, #0]
 8084980:	e7d8      	b.n	8084934 <loop+0x144>
 8084982:	f002 feb7 	bl	80876f4 <spark_cloud_flag_connected>
        if (Particle.connected()) 
 8084986:	2800      	cmp	r0, #0
 8084988:	d0d4      	beq.n	8084934 <loop+0x144>
            if (debugging_enabled) 
 808498a:	4b14      	ldr	r3, [pc, #80]	; (80849dc <loop+0x1ec>)
 808498c:	681b      	ldr	r3, [r3, #0]
 808498e:	b173      	cbz	r3, 80849ae <loop+0x1be>
                Serial.println("Disconnecting from cellular network");
 8084990:	f004 fd30 	bl	80893f4 <_Z16_fetch_usbserialv>
 8084994:	4921      	ldr	r1, [pc, #132]	; (8084a1c <loop+0x22c>)
 8084996:	f003 fcd4 	bl	8088342 <_ZN5Print7printlnEPKc>
                writeLogFile("Disconnecting from cellular network");
 808499a:	4920      	ldr	r1, [pc, #128]	; (8084a1c <loop+0x22c>)
 808499c:	4668      	mov	r0, sp
 808499e:	f003 fa5b 	bl	8087e58 <_ZN6StringC1EPKc>
 80849a2:	4668      	mov	r0, sp
 80849a4:	f7fc fea4 	bl	80816f0 <_Z12writeLogFile6String>
 80849a8:	4668      	mov	r0, sp
 80849aa:	f003 fa0b 	bl	8087dc4 <_ZN6StringD1Ev>
            Cellular.off();
 80849ae:	4811      	ldr	r0, [pc, #68]	; (80849f4 <loop+0x204>)
 80849b0:	f7fc f87a 	bl	8080aa8 <_ZN5spark13CellularClass3offEv>
 80849b4:	e7be      	b.n	8084934 <loop+0x144>
 80849b6:	bf00      	nop
 80849b8:	20000738 	.word	0x20000738
 80849bc:	3ff00000 	.word	0x3ff00000
 80849c0:	200002bc 	.word	0x200002bc
 80849c4:	200002c0 	.word	0x200002c0
 80849c8:	20001c68 	.word	0x20001c68
 80849cc:	200000d4 	.word	0x200000d4
 80849d0:	20000c1c 	.word	0x20000c1c
 80849d4:	20001cf8 	.word	0x20001cf8
 80849d8:	200006b0 	.word	0x200006b0
 80849dc:	200005d4 	.word	0x200005d4
 80849e0:	0808e86d 	.word	0x0808e86d
 80849e4:	20001c4c 	.word	0x20001c4c
 80849e8:	20001c60 	.word	0x20001c60
 80849ec:	20001c84 	.word	0x20001c84
 80849f0:	0808e87c 	.word	0x0808e87c
 80849f4:	20002084 	.word	0x20002084
 80849f8:	0808e89b 	.word	0x0808e89b
 80849fc:	0808e8ac 	.word	0x0808e8ac
 8084a00:	0808e8bd 	.word	0x0808e8bd
 8084a04:	2000076c 	.word	0x2000076c
 8084a08:	20000550 	.word	0x20000550
 8084a0c:	20000658 	.word	0x20000658
 8084a10:	41a00000 	.word	0x41a00000
 8084a14:	0808e920 	.word	0x0808e920
 8084a18:	0808e8d4 	.word	0x0808e8d4
 8084a1c:	0808e8fc 	.word	0x0808e8fc

08084a20 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
}
 8084a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
 8084a24:	f04f 0801 	mov.w	r8, #1
 8084a28:	4b69      	ldr	r3, [pc, #420]	; (8084bd0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
GoogleMapsDeviceLocator locator;
 8084a2a:	4c6a      	ldr	r4, [pc, #424]	; (8084bd4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
 8084a2c:	4d6a      	ldr	r5, [pc, #424]	; (8084bd8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
 8084a2e:	f883 8000 	strb.w	r8, [r3]
 8084a32:	4620      	mov	r0, r4
 8084a34:	f002 f8e8 	bl	8086c08 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8084a38:	4620      	mov	r0, r4
String diagnostics = "not initialized";
 8084a3a:	4c68      	ldr	r4, [pc, #416]	; (8084bdc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
 8084a3c:	4e68      	ldr	r6, [pc, #416]	; (8084be0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
GoogleMapsDeviceLocator locator;
 8084a3e:	462a      	mov	r2, r5
 8084a40:	4968      	ldr	r1, [pc, #416]	; (8084be4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
 8084a42:	f005 f869 	bl	8089b18 <__aeabi_atexit>
String diagnostics = "not initialized";
 8084a46:	4620      	mov	r0, r4
 8084a48:	4967      	ldr	r1, [pc, #412]	; (8084be8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
 8084a4a:	f003 fa05 	bl	8087e58 <_ZN6StringC1EPKc>
 8084a4e:	462a      	mov	r2, r5
 8084a50:	4631      	mov	r1, r6
 8084a52:	4620      	mov	r0, r4
 8084a54:	f005 f860 	bl	8089b18 <__aeabi_atexit>
SerialBuffer<4096> serBuf(Serial4); // This is how we setup getting a bigger buffer for Serial4
 8084a58:	f7fc f84a 	bl	8080af0 <_Z22__fetch_global_Serial4v>
	/**
	 * @brief Constructs a SerialBuffer object
	 *
	 * @param port The real serial port to get the data to buffer from.
	 */
	SerialBuffer(USARTSerial &port) : SerialBufferBase(staticBuffer, SIZE, port) {
 8084a5c:	4c63      	ldr	r4, [pc, #396]	; (8084bec <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
 8084a5e:	4603      	mov	r3, r0
 8084a60:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8084a64:	4621      	mov	r1, r4
 8084a66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8084a6a:	4638      	mov	r0, r7
 8084a6c:	f002 fb34 	bl	80870d8 <_ZN16SerialBufferBaseC1EPhjR11USARTSerial>
 8084a70:	4b5f      	ldr	r3, [pc, #380]	; (8084bf0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
 8084a72:	462a      	mov	r2, r5
 8084a74:	f844 3c30 	str.w	r3, [r4, #-48]
              error_(SYSTEM_ERROR_NONE) {
 8084a78:	2400      	movs	r4, #0
 8084a7a:	495e      	ldr	r1, [pc, #376]	; (8084bf4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
 8084a7c:	4638      	mov	r0, r7
 8084a7e:	f005 f84b 	bl	8089b18 <__aeabi_atexit>
 8084a82:	4f5d      	ldr	r7, [pc, #372]	; (8084bf8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
    SleepResult() {}
 8084a84:	4b5d      	ldr	r3, [pc, #372]	; (8084bfc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)
              error_(SYSTEM_ERROR_NONE) {
 8084a86:	603c      	str	r4, [r7, #0]
    SleepResult() {}
 8084a88:	60bb      	str	r3, [r7, #8]
              error_(SYSTEM_ERROR_NONE) {
 8084a8a:	80bc      	strh	r4, [r7, #4]
    SleepResult() {}
 8084a8c:	71bc      	strb	r4, [r7, #6]
        set_system_mode(mode);
 8084a8e:	2003      	movs	r0, #3
 8084a90:	f002 fd6c 	bl	808756c <set_system_mode>
SYSTEM_MODE(MANUAL);
 8084a94:	462a      	mov	r2, r5
 8084a96:	4638      	mov	r0, r7
 8084a98:	4959      	ldr	r1, [pc, #356]	; (8084c00 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 8084a9a:	f005 f83d 	bl	8089b18 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
 8084a9e:	4621      	mov	r1, r4
 8084aa0:	4640      	mov	r0, r8
 8084aa2:	f002 fd73 	bl	808758c <system_thread_set_state>
Adafruit_BME680 bme; // I2C
 8084aa6:	f04f 31ff 	mov.w	r1, #4294967295
 8084aaa:	4856      	ldr	r0, [pc, #344]	; (8084c04 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)
 8084aac:	f001 ff0e 	bl	80868cc <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 8084ab0:	4855      	ldr	r0, [pc, #340]	; (8084c08 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
 8084ab2:	f000 fb0c 	bl	80850ce <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000_1;
 8084ab6:	4855      	ldr	r0, [pc, #340]	; (8084c0c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
 8084ab8:	f000 f8dc 	bl	8084c74 <_ZN8LMP91000C1Ev>
LMP91000 lmp91000_2;
 8084abc:	4854      	ldr	r0, [pc, #336]	; (8084c10 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
 8084abe:	f000 f8d9 	bl	8084c74 <_ZN8LMP91000C1Ev>
FuelGauge fuel;
 8084ac2:	4f54      	ldr	r7, [pc, #336]	; (8084c14 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f4>)
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 8084ac4:	2149      	movs	r1, #73	; 0x49
 8084ac6:	4854      	ldr	r0, [pc, #336]	; (8084c18 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f8>)
 8084ac8:	f000 fa0c 	bl	8084ee4 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 8084acc:	214a      	movs	r1, #74	; 0x4a
 8084ace:	4853      	ldr	r0, [pc, #332]	; (8084c1c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1fc>)
 8084ad0:	f000 fa08 	bl	8084ee4 <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 8084ad4:	4621      	mov	r1, r4
 8084ad6:	4638      	mov	r0, r7
 8084ad8:	f003 ffdc 	bl	8088a94 <_ZN9FuelGaugeC1Eb>
 8084adc:	4638      	mov	r0, r7
PMIC pmic;
 8084ade:	4f50      	ldr	r7, [pc, #320]	; (8084c20 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x200>)
FuelGauge fuel;
 8084ae0:	462a      	mov	r2, r5
 8084ae2:	4950      	ldr	r1, [pc, #320]	; (8084c24 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x204>)
 8084ae4:	f005 f818 	bl	8089b18 <__aeabi_atexit>
PMIC pmic;
 8084ae8:	4621      	mov	r1, r4
 8084aea:	4638      	mov	r0, r7
 8084aec:	f002 fe79 	bl	80877e2 <_ZN4PMICC1Eb>
 8084af0:	4638      	mov	r0, r7
PowerCheck powerCheck;
 8084af2:	4f4d      	ldr	r7, [pc, #308]	; (8084c28 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x208>)
PMIC pmic;
 8084af4:	462a      	mov	r2, r5
 8084af6:	494d      	ldr	r1, [pc, #308]	; (8084c2c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x20c>)
 8084af8:	f005 f80e 	bl	8089b18 <__aeabi_atexit>
PowerCheck powerCheck;
 8084afc:	4638      	mov	r0, r7
 8084afe:	f000 f947 	bl	8084d90 <_ZN10PowerCheckC1Ev>
 8084b02:	462a      	mov	r2, r5
 8084b04:	4638      	mov	r0, r7
 8084b06:	494a      	ldr	r1, [pc, #296]	; (8084c30 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x210>)
 8084b08:	f005 f806 	bl	8089b18 <__aeabi_atexit>
HIH61XX hih(0x27);
 8084b0c:	2127      	movs	r1, #39	; 0x27
 8084b0e:	4849      	ldr	r0, [pc, #292]	; (8084c34 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x214>)
 8084b10:	f001 ff6e 	bl	80869f0 <_ZN7HIH61XXC1Eh>
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8084b14:	2219      	movs	r2, #25
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8084b16:	4b48      	ldr	r3, [pc, #288]	; (8084c38 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x218>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8084b18:	4848      	ldr	r0, [pc, #288]	; (8084c3c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x21c>)
 8084b1a:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
  SdFat() {
 8084b1e:	4a48      	ldr	r2, [pc, #288]	; (8084c40 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x220>)
  SdFile() {}
 8084b20:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8084c70 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x250>
  SdFat() {
 8084b24:	601a      	str	r2, [r3, #0]
SdFile file;
 8084b26:	4f47      	ldr	r7, [pc, #284]	; (8084c44 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x224>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8084b28:	4a47      	ldr	r2, [pc, #284]	; (8084c48 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x228>)
 8084b2a:	71dc      	strb	r4, [r3, #7]
 8084b2c:	f8a3 4440 	strh.w	r4, [r3, #1088]	; 0x440
 8084b30:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 8084b34:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 8084b38:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8084b3c:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 8084b40:	462a      	mov	r2, r5
 8084b42:	4639      	mov	r1, r7
 8084b44:	8104      	strh	r4, [r0, #8]
    Print() : write_error(0) {}
 8084b46:	6044      	str	r4, [r0, #4]
  SdFile() {}
 8084b48:	f8c0 8000 	str.w	r8, [r0]
 8084b4c:	f004 ffe4 	bl	8089b18 <__aeabi_atexit>
 8084b50:	483e      	ldr	r0, [pc, #248]	; (8084c4c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x22c>)
SdFile log_file;
 8084b52:	462a      	mov	r2, r5
 8084b54:	4639      	mov	r1, r7
 8084b56:	e9c0 8400 	strd	r8, r4, [r0]
 8084b5a:	8104      	strh	r4, [r0, #8]
 8084b5c:	f004 ffdc 	bl	8089b18 <__aeabi_atexit>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8084b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8084b64:	483a      	ldr	r0, [pc, #232]	; (8084c50 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x230>)
String fileName;
 8084b66:	4f3b      	ldr	r7, [pc, #236]	; (8084c54 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x234>)
 8084b68:	6083      	str	r3, [r0, #8]
  File() {}
 8084b6a:	4b3b      	ldr	r3, [pc, #236]	; (8084c58 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x238>)
 8084b6c:	8204      	strh	r4, [r0, #16]
 8084b6e:	6044      	str	r4, [r0, #4]
 8084b70:	4c3a      	ldr	r4, [pc, #232]	; (8084c5c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x23c>)
 8084b72:	6003      	str	r3, [r0, #0]
File file1;
 8084b74:	462a      	mov	r2, r5
 8084b76:	493a      	ldr	r1, [pc, #232]	; (8084c60 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x240>)
 8084b78:	f004 ffce 	bl	8089b18 <__aeabi_atexit>
String fileName;
 8084b7c:	4621      	mov	r1, r4
 8084b7e:	4638      	mov	r0, r7
 8084b80:	f003 f96a 	bl	8087e58 <_ZN6StringC1EPKc>
 8084b84:	4638      	mov	r0, r7
String logFileName;
 8084b86:	4f37      	ldr	r7, [pc, #220]	; (8084c64 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x244>)
String fileName;
 8084b88:	462a      	mov	r2, r5
 8084b8a:	4631      	mov	r1, r6
 8084b8c:	f004 ffc4 	bl	8089b18 <__aeabi_atexit>
String logFileName;
 8084b90:	4621      	mov	r1, r4
 8084b92:	4638      	mov	r0, r7
 8084b94:	f003 f960 	bl	8087e58 <_ZN6StringC1EPKc>
 8084b98:	4638      	mov	r0, r7
String ssid;        //wifi network name
 8084b9a:	4f33      	ldr	r7, [pc, #204]	; (8084c68 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x248>)
String logFileName;
 8084b9c:	462a      	mov	r2, r5
 8084b9e:	4631      	mov	r1, r6
 8084ba0:	f004 ffba 	bl	8089b18 <__aeabi_atexit>
String ssid;        //wifi network name
 8084ba4:	4621      	mov	r1, r4
 8084ba6:	4638      	mov	r0, r7
 8084ba8:	f003 f956 	bl	8087e58 <_ZN6StringC1EPKc>
 8084bac:	4638      	mov	r0, r7
String password;    //wifi network password
 8084bae:	4f2f      	ldr	r7, [pc, #188]	; (8084c6c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x24c>)
String ssid;        //wifi network name
 8084bb0:	462a      	mov	r2, r5
 8084bb2:	4631      	mov	r1, r6
 8084bb4:	f004 ffb0 	bl	8089b18 <__aeabi_atexit>
String password;    //wifi network password
 8084bb8:	4621      	mov	r1, r4
 8084bba:	4638      	mov	r0, r7
 8084bbc:	f003 f94c 	bl	8087e58 <_ZN6StringC1EPKc>
 8084bc0:	462a      	mov	r2, r5
 8084bc2:	4631      	mov	r1, r6
 8084bc4:	4638      	mov	r0, r7
}
 8084bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
String password;    //wifi network password
 8084bca:	f004 bfa5 	b.w	8089b18 <__aeabi_atexit>
 8084bce:	bf00      	nop
 8084bd0:	20000514 	.word	0x20000514
 8084bd4:	200006b4 	.word	0x200006b4
 8084bd8:	200002b0 	.word	0x200002b0
 8084bdc:	200005d8 	.word	0x200005d8
 8084be0:	08087dc5 	.word	0x08087dc5
 8084be4:	08086bc1 	.word	0x08086bc1
 8084be8:	0808e953 	.word	0x0808e953
 8084bec:	20000c4c 	.word	0x20000c4c
 8084bf0:	0808e9c4 	.word	0x0808e9c4
 8084bf4:	08080961 	.word	0x08080961
 8084bf8:	200002f0 	.word	0x200002f0
 8084bfc:	ffff0000 	.word	0xffff0000
 8084c00:	08080a19 	.word	0x08080a19
 8084c04:	20000554 	.word	0x20000554
 8084c08:	20001c70 	.word	0x20001c70
 8084c0c:	200006b1 	.word	0x200006b1
 8084c10:	200006b2 	.word	0x200006b2
 8084c14:	20000658 	.word	0x20000658
 8084c18:	20000544 	.word	0x20000544
 8084c1c:	2000054a 	.word	0x2000054a
 8084c20:	20000768 	.word	0x20000768
 8084c24:	08088ab3 	.word	0x08088ab3
 8084c28:	2000076c 	.word	0x2000076c
 8084c2c:	08087821 	.word	0x08087821
 8084c30:	08084d65 	.word	0x08084d65
 8084c34:	200006a0 	.word	0x200006a0
 8084c38:	200007a0 	.word	0x200007a0
 8084c3c:	200005e8 	.word	0x200005e8
 8084c40:	0808e9ac 	.word	0x0808e9ac
 8084c44:	08080963 	.word	0x08080963
 8084c48:	0808ea34 	.word	0x0808ea34
 8084c4c:	20000708 	.word	0x20000708
 8084c50:	20000614 	.word	0x20000614
 8084c54:	20000648 	.word	0x20000648
 8084c58:	0808e96c 	.word	0x0808e96c
 8084c5c:	0808eb69 	.word	0x0808eb69
 8084c60:	08080965 	.word	0x08080965
 8084c64:	200006f8 	.word	0x200006f8
 8084c68:	20001c50 	.word	0x20001c50
 8084c6c:	20000758 	.word	0x20000758
 8084c70:	0808e994 	.word	0x0808e994

08084c74 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8084c74:	4770      	bx	lr

08084c76 <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 8084c76:	b510      	push	{r4, lr}
 8084c78:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8084c7a:	f004 fefd 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084c7e:	2148      	movs	r1, #72	; 0x48
 8084c80:	f004 fd86 	bl	8089790 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8084c84:	f004 fef8 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084c88:	6803      	ldr	r3, [r0, #0]
 8084c8a:	4621      	mov	r1, r4
 8084c8c:	689b      	ldr	r3, [r3, #8]
 8084c8e:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8084c90:	f004 fef2 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084c94:	2100      	movs	r1, #0
 8084c96:	f004 fd96 	bl	80897c6 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 8084c9a:	f004 feed 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084c9e:	2301      	movs	r3, #1
 8084ca0:	2148      	movs	r1, #72	; 0x48
 8084ca2:	461a      	mov	r2, r3
 8084ca4:	f004 fd5b 	bl	808975e <_ZN7TwoWire11requestFromEhjh>
      if(Wire.available()){
 8084ca8:	f004 fee6 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084cac:	6803      	ldr	r3, [r0, #0]
 8084cae:	691b      	ldr	r3, [r3, #16]
 8084cb0:	4798      	blx	r3
 8084cb2:	b128      	cbz	r0, 8084cc0 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8084cb4:	f004 fee0 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084cb8:	6803      	ldr	r3, [r0, #0]
 8084cba:	695b      	ldr	r3, [r3, #20]
 8084cbc:	4798      	blx	r3
 8084cbe:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8084cc0:	bd10      	pop	{r4, pc}

08084cc2 <_ZN8LMP910005writeEhh>:
uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8084cc2:	b570      	push	{r4, r5, r6, lr}
 8084cc4:	4616      	mov	r6, r2
 8084cc6:	460c      	mov	r4, r1
 8084cc8:	4605      	mov	r5, r0
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8084cca:	f004 fed5 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084cce:	2148      	movs	r1, #72	; 0x48
 8084cd0:	f004 fd5e 	bl	8089790 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8084cd4:	f004 fed0 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084cd8:	6803      	ldr	r3, [r0, #0]
 8084cda:	4621      	mov	r1, r4
 8084cdc:	689b      	ldr	r3, [r3, #8]
 8084cde:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8084ce0:	f004 feca 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084ce4:	6803      	ldr	r3, [r0, #0]
 8084ce6:	4631      	mov	r1, r6
 8084ce8:	689b      	ldr	r3, [r3, #8]
 8084cea:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8084cec:	f004 fec4 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084cf0:	2101      	movs	r1, #1
 8084cf2:	f004 fd68 	bl	80897c6 <_ZN7TwoWire15endTransmissionEh>
      return read(reg);
 8084cf6:	4621      	mov	r1, r4
 8084cf8:	4628      	mov	r0, r5
}
 8084cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return read(reg);
 8084cfe:	f7ff bfba 	b.w	8084c76 <_ZN8LMP910004readEh>

08084d02 <_ZN8LMP910006statusEv>:

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8084d02:	2100      	movs	r1, #0
 8084d04:	f7ff bfb7 	b.w	8084c76 <_ZN8LMP910004readEh>

08084d08 <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8084d08:	2201      	movs	r2, #1
 8084d0a:	4611      	mov	r1, r2
 8084d0c:	f7ff bfd9 	b.w	8084cc2 <_ZN8LMP910005writeEhh>

08084d10 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8084d10:	2200      	movs	r2, #0
 8084d12:	2101      	movs	r1, #1
 8084d14:	f7ff bfd5 	b.w	8084cc2 <_ZN8LMP910005writeEhh>

08084d18 <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8084d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084d1c:	4604      	mov	r4, r0
 8084d1e:	4688      	mov	r8, r1
 8084d20:	4617      	mov	r7, r2
 8084d22:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8084d24:	f7ff ffed 	bl	8084d02 <_ZN8LMP910006statusEv>
 8084d28:	2801      	cmp	r0, #1
 8084d2a:	4605      	mov	r5, r0
 8084d2c:	d117      	bne.n	8084d5e <_ZN8LMP910009configureEhhh+0x46>
            unlock();
 8084d2e:	4620      	mov	r0, r4
 8084d30:	f7ff ffee 	bl	8084d10 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8084d34:	4642      	mov	r2, r8
 8084d36:	2110      	movs	r1, #16
 8084d38:	4620      	mov	r0, r4
 8084d3a:	f7ff ffc2 	bl	8084cc2 <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 8084d3e:	463a      	mov	r2, r7
 8084d40:	2111      	movs	r1, #17
 8084d42:	4620      	mov	r0, r4
 8084d44:	f7ff ffbd 	bl	8084cc2 <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 8084d48:	4632      	mov	r2, r6
 8084d4a:	2112      	movs	r1, #18
 8084d4c:	4620      	mov	r0, r4
 8084d4e:	f7ff ffb8 	bl	8084cc2 <_ZN8LMP910005writeEhh>
            lock();
 8084d52:	4620      	mov	r0, r4
 8084d54:	f7ff ffd8 	bl	8084d08 <_ZN8LMP910004lockEv>
            return 1;
      }
      return 0;
}
 8084d58:	4628      	mov	r0, r5
 8084d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return 0;
 8084d5e:	2500      	movs	r5, #0
 8084d60:	e7fa      	b.n	8084d58 <_ZN8LMP910009configureEhhh+0x40>
	...

08084d64 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8084d64:	b510      	push	{r4, lr}
 8084d66:	4604      	mov	r4, r0
 8084d68:	4b03      	ldr	r3, [pc, #12]	; (8084d78 <_ZN10PowerCheckD1Ev+0x14>)
 8084d6a:	f840 3b14 	str.w	r3, [r0], #20
 8084d6e:	f002 fd57 	bl	8087820 <_ZN4PMICD1Ev>
}
 8084d72:	4620      	mov	r0, r4
 8084d74:	bd10      	pop	{r4, pc}
 8084d76:	bf00      	nop
 8084d78:	0808ea14 	.word	0x0808ea14

08084d7c <_ZN10PowerCheckD0Ev>:
PowerCheck::~PowerCheck() {
 8084d7c:	b510      	push	{r4, lr}
 8084d7e:	4604      	mov	r4, r0
}
 8084d80:	f7ff fff0 	bl	8084d64 <_ZN10PowerCheckD1Ev>
 8084d84:	4620      	mov	r0, r4
 8084d86:	2124      	movs	r1, #36	; 0x24
 8084d88:	f004 fecb 	bl	8089b22 <_ZdlPvj>
 8084d8c:	4620      	mov	r0, r4
 8084d8e:	bd10      	pop	{r4, pc}

08084d90 <_ZN10PowerCheckC1Ev>:
PowerCheck::PowerCheck() {
 8084d90:	b538      	push	{r3, r4, r5, lr}
 8084d92:	4b0b      	ldr	r3, [pc, #44]	; (8084dc0 <_ZN10PowerCheckC1Ev+0x30>)
 8084d94:	2500      	movs	r5, #0
 8084d96:	2232      	movs	r2, #50	; 0x32
 8084d98:	6003      	str	r3, [r0, #0]
 8084d9a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8084d9e:	4604      	mov	r4, r0
 8084da0:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8084da4:	e9c0 5503 	strd	r5, r5, [r0, #12]
 8084da8:	4629      	mov	r1, r5
 8084daa:	3014      	adds	r0, #20
 8084dac:	f002 fd19 	bl	80877e2 <_ZN4PMICC1Eb>
 8084db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}
 8084db4:	4620      	mov	r0, r4
PowerCheck::PowerCheck() {
 8084db6:	e9c4 5506 	strd	r5, r5, [r4, #24]
 8084dba:	6223      	str	r3, [r4, #32]
}
 8084dbc:	bd38      	pop	{r3, r4, r5, pc}
 8084dbe:	bf00      	nop
 8084dc0:	0808ea14 	.word	0x0808ea14

08084dc4 <_ZN10PowerCheck4loopEv>:

void PowerCheck::loop() {
 8084dc4:	b510      	push	{r4, lr}
 8084dc6:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8084dc8:	f002 fa10 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8084dcc:	68e3      	ldr	r3, [r4, #12]
 8084dce:	1ac0      	subs	r0, r0, r3
 8084dd0:	6863      	ldr	r3, [r4, #4]
 8084dd2:	4298      	cmp	r0, r3
 8084dd4:	d31a      	bcc.n	8084e0c <_ZN10PowerCheck4loopEv+0x48>
 8084dd6:	f002 fa09 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 8084dda:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8084ddc:	f104 0014 	add.w	r0, r4, #20
 8084de0:	f002 fd71 	bl	80878c6 <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8084de4:	f010 0304 	ands.w	r3, r0, #4
 8084de8:	d00b      	beq.n	8084e02 <_ZN10PowerCheck4loopEv+0x3e>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 8084dea:	f894 3020 	ldrb.w	r3, [r4, #32]
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8084dee:	f3c0 1001 	ubfx	r0, r0, #4, #2
			if (chrgStat != lastChrgStat) {
 8084df2:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8084df4:	bf1f      	itttt	ne
 8084df6:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 8084df8:	f884 0020 	strbne.w	r0, [r4, #32]
				changeCount++;
 8084dfc:	3301      	addne	r3, #1
 8084dfe:	61e3      	strne	r3, [r4, #28]
			}

			// We have power (USB or VIN)
			hasPower = true;
 8084e00:	2301      	movs	r3, #1
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8084e02:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		}

		checkCount++;
 8084e06:	69a3      	ldr	r3, [r4, #24]
 8084e08:	3301      	adds	r3, #1
 8084e0a:	61a3      	str	r3, [r4, #24]
 8084e0c:	f002 f9ee 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8084e10:	6923      	ldr	r3, [r4, #16]
 8084e12:	1ac0      	subs	r0, r0, r3
 8084e14:	68a3      	ldr	r3, [r4, #8]
 8084e16:	4298      	cmp	r0, r3
 8084e18:	d914      	bls.n	8084e44 <_ZN10PowerCheck4loopEv+0x80>
 8084e1a:	f002 f9e7 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8084e1e:	69a3      	ldr	r3, [r4, #24]
		lastSlowCheck = millis();
 8084e20:	6120      	str	r0, [r4, #16]
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8084e22:	2b0a      	cmp	r3, #10
 8084e24:	dc0f      	bgt.n	8084e46 <_ZN10PowerCheck4loopEv+0x82>
 8084e26:	2301      	movs	r3, #1
 8084e28:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8084e2c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8084e30:	3b01      	subs	r3, #1
 8084e32:	2b01      	cmp	r3, #1
 8084e34:	bf8c      	ite	hi
 8084e36:	2300      	movhi	r3, #0
 8084e38:	2301      	movls	r3, #1
 8084e3a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 8084e3e:	2300      	movs	r3, #0
		changeCount = 0;
 8084e40:	e9c4 3306 	strd	r3, r3, [r4, #24]
	}

}
 8084e44:	bd10      	pop	{r4, pc}
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8084e46:	69e2      	ldr	r2, [r4, #28]
 8084e48:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8084e4c:	ddeb      	ble.n	8084e26 <_ZN10PowerCheck4loopEv+0x62>
 8084e4e:	2300      	movs	r3, #0
 8084e50:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8084e54:	e7f1      	b.n	8084e3a <_ZN10PowerCheck4loopEv+0x76>

08084e56 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 8084e56:	b510      	push	{r4, lr}
 8084e58:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8084e5a:	f004 fe0d 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084e5e:	6803      	ldr	r3, [r0, #0]
 8084e60:	4621      	mov	r1, r4
}
 8084e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.write((uint8_t)x);
 8084e66:	689b      	ldr	r3, [r3, #8]
 8084e68:	4718      	bx	r3

08084e6a <_ZL7i2creadv>:
static uint8_t i2cread(void) {
 8084e6a:	b508      	push	{r3, lr}
  return Wire.read();
 8084e6c:	f004 fe04 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084e70:	6803      	ldr	r3, [r0, #0]
 8084e72:	695b      	ldr	r3, [r3, #20]
 8084e74:	4798      	blx	r3
}
 8084e76:	b2c0      	uxtb	r0, r0
 8084e78:	bd08      	pop	{r3, pc}

08084e7a <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8084e7a:	b570      	push	{r4, r5, r6, lr}
 8084e7c:	4606      	mov	r6, r0
 8084e7e:	460d      	mov	r5, r1
 8084e80:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8084e82:	f004 fdf9 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084e86:	4631      	mov	r1, r6
 8084e88:	f004 fc7e 	bl	8089788 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8084e8c:	4628      	mov	r0, r5
 8084e8e:	f7ff ffe2 	bl	8084e56 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8084e92:	0a20      	lsrs	r0, r4, #8
 8084e94:	f7ff ffdf 	bl	8084e56 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8084e98:	b2e0      	uxtb	r0, r4
 8084e9a:	f7ff ffdc 	bl	8084e56 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8084e9e:	f004 fdeb 	bl	8089a78 <_Z19__fetch_global_Wirev>
}
 8084ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Wire.endTransmission();
 8084ea6:	f004 bc92 	b.w	80897ce <_ZN7TwoWire15endTransmissionEv>

08084eaa <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8084eaa:	b510      	push	{r4, lr}
 8084eac:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8084eae:	f004 fde3 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084eb2:	4621      	mov	r1, r4
 8084eb4:	f004 fc68 	bl	8089788 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8084eb8:	2000      	movs	r0, #0
 8084eba:	f7ff ffcc 	bl	8084e56 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8084ebe:	f004 fddb 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084ec2:	f004 fc84 	bl	80897ce <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8084ec6:	f004 fdd7 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8084eca:	4621      	mov	r1, r4
 8084ecc:	2202      	movs	r2, #2
 8084ece:	f004 fc58 	bl	8089782 <_ZN7TwoWire11requestFromEhj>
  return ((i2cread() << 8) | i2cread());  
 8084ed2:	f7ff ffca 	bl	8084e6a <_ZL7i2creadv>
 8084ed6:	4604      	mov	r4, r0
 8084ed8:	f7ff ffc7 	bl	8084e6a <_ZL7i2creadv>
 8084edc:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8084ee0:	b280      	uxth	r0, r0
 8084ee2:	bd10      	pop	{r4, pc}

08084ee4 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8084ee4:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8084ee6:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8084ee8:	2108      	movs	r1, #8
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8084eea:	8082      	strh	r2, [r0, #4]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8084eec:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8084eee:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 8084ef0:	4770      	bx	lr

08084ef2 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8084ef2:	b508      	push	{r3, lr}
  Wire.begin();
 8084ef4:	f004 fdc0 	bl	8089a78 <_Z19__fetch_global_Wirev>
}
 8084ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin();
 8084efc:	f004 bc12 	b.w	8089724 <_ZN7TwoWire5beginEv>

08084f00 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 8084f00:	8081      	strh	r1, [r0, #4]
}
 8084f02:	4770      	bx	lr

08084f04 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8084f04:	2903      	cmp	r1, #3
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8084f06:	b510      	push	{r4, lr}
 8084f08:	4604      	mov	r4, r0
  if (channel > 3)
 8084f0a:	d822      	bhi.n	8084f52 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8084f0c:	2902      	cmp	r1, #2
  config |= m_gain;
 8084f0e:	8882      	ldrh	r2, [r0, #4]
  switch (channel)
 8084f10:	d019      	beq.n	8084f46 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x42>
 8084f12:	2903      	cmp	r1, #3
 8084f14:	d01a      	beq.n	8084f4c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x48>
 8084f16:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8084f18:	bf14      	ite	ne
 8084f1a:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8084f1e:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8084f22:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 8084f26:	2101      	movs	r1, #1
 8084f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8084f2c:	7820      	ldrb	r0, [r4, #0]
 8084f2e:	f7ff ffa4 	bl	8084e7a <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 8084f32:	7860      	ldrb	r0, [r4, #1]
 8084f34:	f003 fd7a 	bl	8088a2c <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 8084f38:	7820      	ldrb	r0, [r4, #0]
 8084f3a:	f7ff ffb6 	bl	8084eaa <_ZL12readRegisterhh.isra.0>
 8084f3e:	78a3      	ldrb	r3, [r4, #2]
 8084f40:	4118      	asrs	r0, r3
 8084f42:	b280      	uxth	r0, r0
}
 8084f44:	bd10      	pop	{r4, pc}
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8084f46:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 8084f4a:	e7ea      	b.n	8084f22 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8084f4c:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 8084f50:	e7e7      	b.n	8084f22 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x1e>
    return 0;
 8084f52:	2000      	movs	r0, #0
 8084f54:	e7f6      	b.n	8084f44 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x40>
	...

08084f58 <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"

//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 8084f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084f5c:	460e      	mov	r6, r1
 8084f5e:	b088      	sub	sp, #32
 8084f60:	4604      	mov	r4, r0
 8084f62:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 8084f64:	4668      	mov	r0, sp
 8084f66:	2302      	movs	r3, #2
 8084f68:	2200      	movs	r2, #0
 8084f6a:	f003 f8c9 	bl	8088100 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 8084f6e:	230a      	movs	r3, #10
 8084f70:	2202      	movs	r2, #2
 8084f72:	4631      	mov	r1, r6
 8084f74:	a804      	add	r0, sp, #16
 8084f76:	f003 f8c3 	bl	8088100 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 8084f7a:	4668      	mov	r0, sp
 8084f7c:	f003 f981 	bl	8088282 <_ZNK6String5toIntEv>
 8084f80:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 8084f82:	a804      	add	r0, sp, #16
 8084f84:	f003 f97d 	bl	8088282 <_ZNK6String5toIntEv>
 8084f88:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 8084f8a:	4668      	mov	r0, sp
 8084f8c:	f003 f979 	bl	8088282 <_ZNK6String5toIntEv>
 8084f90:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8084f92:	a804      	add	r0, sp, #16
 8084f94:	f003 f97a 	bl	808828c <_ZNK6String7toFloatEv>
 8084f98:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
 8084f9a:	4630      	mov	r0, r6
 8084f9c:	f004 ff20 	bl	8089de0 <__aeabi_i2d>
 8084fa0:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 8084fa2:	4640      	mov	r0, r8
    latitude = whole_part;
 8084fa4:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 8084fa6:	f004 ff2d 	bl	8089e04 <__aeabi_f2d>
    latitude += (frac_part)/60;
 8084faa:	2200      	movs	r2, #0
 8084fac:	4b0d      	ldr	r3, [pc, #52]	; (8084fe4 <_ZN3GPS15set_lat_decimalE6Stringc+0x8c>)
 8084fae:	f005 f8ab 	bl	808a108 <__aeabi_ddiv>
 8084fb2:	460b      	mov	r3, r1
 8084fb4:	4602      	mov	r2, r0
 8084fb6:	4639      	mov	r1, r7
 8084fb8:	4630      	mov	r0, r6
 8084fba:	f004 fdc5 	bl	8089b48 <__adddf3>
    if(nsString == 'S'){
 8084fbe:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8084fc0:	bf0c      	ite	eq
 8084fc2:	2300      	moveq	r3, #0
 8084fc4:	f06f 037f 	mvnne.w	r3, #127	; 0x7f
    latitude += (frac_part)/60;
 8084fc8:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
 8084fcc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    String frac_str = latString.substring(2,10);
 8084fd0:	a804      	add	r0, sp, #16
 8084fd2:	f002 fef7 	bl	8087dc4 <_ZN6StringD1Ev>
    String whole_str = latString.substring(0,2);
 8084fd6:	4668      	mov	r0, sp
 8084fd8:	f002 fef4 	bl	8087dc4 <_ZN6StringD1Ev>
    }
}
 8084fdc:	b008      	add	sp, #32
 8084fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084fe2:	bf00      	nop
 8084fe4:	404e0000 	.word	0x404e0000

08084fe8 <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8084fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084fec:	460e      	mov	r6, r1
 8084fee:	b088      	sub	sp, #32
 8084ff0:	4604      	mov	r4, r0
 8084ff2:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8084ff4:	4668      	mov	r0, sp
 8084ff6:	2303      	movs	r3, #3
 8084ff8:	2200      	movs	r2, #0
 8084ffa:	f003 f881 	bl	8088100 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 8084ffe:	230a      	movs	r3, #10
 8085000:	2203      	movs	r2, #3
 8085002:	4631      	mov	r1, r6
 8085004:	a804      	add	r0, sp, #16
 8085006:	f003 f87b 	bl	8088100 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 808500a:	4668      	mov	r0, sp
 808500c:	f003 f939 	bl	8088282 <_ZNK6String5toIntEv>
 8085010:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 8085012:	a804      	add	r0, sp, #16
 8085014:	f003 f935 	bl	8088282 <_ZNK6String5toIntEv>
 8085018:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 808501a:	4668      	mov	r0, sp
 808501c:	f003 f931 	bl	8088282 <_ZNK6String5toIntEv>
 8085020:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8085022:	a804      	add	r0, sp, #16
 8085024:	f003 f932 	bl	808828c <_ZNK6String7toFloatEv>
 8085028:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
 808502a:	4630      	mov	r0, r6
 808502c:	f004 fed8 	bl	8089de0 <__aeabi_i2d>
 8085030:	4606      	mov	r6, r0
    double frac_part = frac_str.toFloat();
 8085032:	4640      	mov	r0, r8
    longitude = whole_part;
 8085034:	460f      	mov	r7, r1
    double frac_part = frac_str.toFloat();
 8085036:	f004 fee5 	bl	8089e04 <__aeabi_f2d>
    longitude += (frac_part)/60;
 808503a:	2200      	movs	r2, #0
 808503c:	4b0c      	ldr	r3, [pc, #48]	; (8085070 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 808503e:	f005 f863 	bl	808a108 <__aeabi_ddiv>
 8085042:	4602      	mov	r2, r0
 8085044:	460b      	mov	r3, r1
 8085046:	4630      	mov	r0, r6
 8085048:	4639      	mov	r1, r7
 808504a:	f004 fd7d 	bl	8089b48 <__adddf3>
    if(ewString == 'E'){
 808504e:	3d45      	subs	r5, #69	; 0x45
 8085050:	bf18      	it	ne
 8085052:	2501      	movne	r5, #1
    longitude += (frac_part)/60;
 8085054:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
 8085058:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    String frac_str = longString.substring(3,10);
 808505c:	a804      	add	r0, sp, #16
 808505e:	f002 feb1 	bl	8087dc4 <_ZN6StringD1Ev>
    String whole_str = longString.substring(0,3);
 8085062:	4668      	mov	r0, sp
 8085064:	f002 feae 	bl	8087dc4 <_ZN6StringD1Ev>
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 8085068:	b008      	add	sp, #32
 808506a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808506e:	bf00      	nop
 8085070:	404e0000 	.word	0x404e0000

08085074 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 8085074:	b510      	push	{r4, lr}
 8085076:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 8085078:	4608      	mov	r0, r1
 808507a:	f003 f902 	bl	8088282 <_ZNK6String5toIntEv>
 808507e:	62e0      	str	r0, [r4, #44]	; 0x2c
}
 8085080:	bd10      	pop	{r4, pc}
	...

08085084 <_ZN3GPS22set_horizontalDilutionE6String>:

void GPS::set_horizontalDilution(String hdString){
 8085084:	b510      	push	{r4, lr}
 8085086:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 8085088:	4608      	mov	r0, r1
 808508a:	f003 f8ff 	bl	808828c <_ZNK6String7toFloatEv>
    temp_float *= 10;
 808508e:	4902      	ldr	r1, [pc, #8]	; (8085098 <_ZN3GPS22set_horizontalDilutionE6String+0x14>)
 8085090:	f005 fb66 	bl	808a760 <__aeabi_fmul>

    horizontal_dilution = temp_float;
 8085094:	6320      	str	r0, [r4, #48]	; 0x30
}
 8085096:	bd10      	pop	{r4, pc}
 8085098:	41200000 	.word	0x41200000

0808509c <_ZN3GPS12get_latitudeEv>:

double GPS::get_latitude(void){
    return latitude;
}
 808509c:	f100 0108 	add.w	r1, r0, #8
 80850a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80850a4:	4770      	bx	lr

080850a6 <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 80850a6:	f100 0110 	add.w	r1, r0, #16
 80850aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80850ae:	4770      	bx	lr

080850b0 <_ZN3GPS22get_horizontalDilutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDilution(void){
 80850b0:	b508      	push	{r3, lr}
    return horizontal_dilution;
 80850b2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80850b4:	f005 fd1a 	bl	808aaec <__aeabi_f2iz>
}
 80850b8:	bd08      	pop	{r3, pc}

080850ba <_ZN3GPS15get_nsIndicatorEv>:
    return longFrac;
}

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 80850ba:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 80850be:	4770      	bx	lr

080850c0 <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 80850c0:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 80850c4:	4770      	bx	lr

080850c6 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80850c6:	6803      	ldr	r3, [r0, #0]
 80850c8:	b2c9      	uxtb	r1, r1
 80850ca:	689b      	ldr	r3, [r3, #8]
 80850cc:	4718      	bx	r3

080850ce <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 80850ce:	4770      	bx	lr

080850d0 <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 80850d0:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 80850d2:	f004 fcd1 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80850d6:	2115      	movs	r1, #21
 80850d8:	f004 fb5a 	bl	8089790 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 80850dc:	f004 fccc 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80850e0:	2105      	movs	r1, #5
 80850e2:	f7ff fff0 	bl	80850c6 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 80850e6:	f004 fcc7 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80850ea:	2103      	movs	r1, #3
 80850ec:	f7ff ffeb 	bl	80850c6 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 80850f0:	f004 fcc2 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80850f4:	21e8      	movs	r1, #232	; 0xe8
 80850f6:	f7ff ffe6 	bl	80850c6 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 80850fa:	f004 fcbd 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80850fe:	21ff      	movs	r1, #255	; 0xff
 8085100:	f7ff ffe1 	bl	80850c6 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 8085104:	f004 fcb8 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8085108:	2100      	movs	r1, #0
 808510a:	f7ff ffdc 	bl	80850c6 <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 808510e:	f004 fcb3 	bl	8089a78 <_Z19__fetch_global_Wirev>
}
 8085112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   Wire.endTransmission();
 8085116:	f004 bb5a 	b.w	80897ce <_ZN7TwoWire15endTransmissionEv>

0808511a <_ZN13Telaire_T671315disableABCLogicEv>:

void Telaire_T6713::disableABCLogic()
{
 808511a:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 808511c:	f004 fcac 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8085120:	2115      	movs	r1, #21
 8085122:	f004 fb35 	bl	8089790 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8085126:	f004 fca7 	bl	8089a78 <_Z19__fetch_global_Wirev>
 808512a:	2105      	movs	r1, #5
 808512c:	f7ff ffcb 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8085130:	f004 fca2 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8085134:	2103      	movs	r1, #3
 8085136:	f7ff ffc6 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 808513a:	f004 fc9d 	bl	8089a78 <_Z19__fetch_global_Wirev>
 808513e:	21ee      	movs	r1, #238	; 0xee
 8085140:	f7ff ffc1 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 8085144:	f004 fc98 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8085148:	2100      	movs	r1, #0
 808514a:	f7ff ffbc 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 808514e:	f004 fc93 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8085152:	2100      	movs	r1, #0
 8085154:	f7ff ffb7 	bl	80850c6 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8085158:	f004 fc8e 	bl	8089a78 <_Z19__fetch_global_Wirev>
}
 808515c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 8085160:	f004 bb35 	b.w	80897ce <_ZN7TwoWire15endTransmissionEv>

08085164 <_ZN13Telaire_T671314enableABCLogicEv>:

void Telaire_T6713::enableABCLogic()
{
 8085164:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8085166:	f004 fc87 	bl	8089a78 <_Z19__fetch_global_Wirev>
 808516a:	2115      	movs	r1, #21
 808516c:	f004 fb10 	bl	8089790 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8085170:	f004 fc82 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8085174:	2105      	movs	r1, #5
 8085176:	f7ff ffa6 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808517a:	f004 fc7d 	bl	8089a78 <_Z19__fetch_global_Wirev>
 808517e:	2103      	movs	r1, #3
 8085180:	f7ff ffa1 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8085184:	f004 fc78 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8085188:	21ee      	movs	r1, #238	; 0xee
 808518a:	f7ff ff9c 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 808518e:	f004 fc73 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8085192:	21ff      	movs	r1, #255	; 0xff
 8085194:	f7ff ff97 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8085198:	f004 fc6e 	bl	8089a78 <_Z19__fetch_global_Wirev>
 808519c:	2100      	movs	r1, #0
 808519e:	f7ff ff92 	bl	80850c6 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80851a2:	f004 fc69 	bl	8089a78 <_Z19__fetch_global_Wirev>
}
 80851a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 80851aa:	f004 bb10 	b.w	80897ce <_ZN7TwoWire15endTransmissionEv>
	...

080851b0 <_ZN13Telaire_T67139calibrateEi>:


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 80851b0:	b508      	push	{r3, lr}
    if(debugging){
 80851b2:	b121      	cbz	r1, 80851be <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 80851b4:	f004 f91e 	bl	80893f4 <_Z16_fetch_usbserialv>
 80851b8:	4913      	ldr	r1, [pc, #76]	; (8085208 <_ZN13Telaire_T67139calibrateEi+0x58>)
 80851ba:	f003 f8c2 	bl	8088342 <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 80851be:	f004 fc5b 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80851c2:	2115      	movs	r1, #21
 80851c4:	f004 fae4 	bl	8089790 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80851c8:	f004 fc56 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80851cc:	2105      	movs	r1, #5
 80851ce:	f7ff ff7a 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80851d2:	f004 fc51 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80851d6:	2103      	movs	r1, #3
 80851d8:	f7ff ff75 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 80851dc:	f004 fc4c 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80851e0:	21ec      	movs	r1, #236	; 0xec
 80851e2:	f7ff ff70 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 80851e6:	f004 fc47 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80851ea:	21ff      	movs	r1, #255	; 0xff
 80851ec:	f7ff ff6b 	bl	80850c6 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80851f0:	f004 fc42 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80851f4:	2100      	movs	r1, #0
 80851f6:	f7ff ff66 	bl	80850c6 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80851fa:	f004 fc3d 	bl	8089a78 <_Z19__fetch_global_Wirev>
}
 80851fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 8085202:	f004 bae4 	b.w	80897ce <_ZN7TwoWire15endTransmissionEv>
 8085206:	bf00      	nop
 8085208:	0808ea1c 	.word	0x0808ea1c

0808520c <_ZN5Print7printlnIhLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
 808520c:	b538      	push	{r3, r4, r5, lr}
 808520e:	4605      	mov	r5, r0
    if (base == 0) {
 8085210:	b942      	cbnz	r2, 8085224 <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
 8085212:	6803      	ldr	r3, [r0, #0]
 8085214:	689b      	ldr	r3, [r3, #8]
 8085216:	4798      	blx	r3
        return printNumber(val, base) + t;
 8085218:	4604      	mov	r4, r0
        n += println();
 808521a:	4628      	mov	r0, r5
 808521c:	f003 f885 	bl	808832a <_ZN5Print7printlnEv>
    }
 8085220:	4420      	add	r0, r4
 8085222:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 8085224:	b2d2      	uxtb	r2, r2
 8085226:	f003 f8a0 	bl	808836a <_ZN5Print11printNumberEmh>
 808522a:	e7f5      	b.n	8085218 <_ZN5Print7printlnIhLi0EEEjT_i+0xc>

0808522c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 808522c:	b510      	push	{r4, lr}
 808522e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8085230:	3028      	adds	r0, #40	; 0x28
 8085232:	f001 f9bf 	bl	80865b4 <_ZN8FatCache4syncEv>
 8085236:	b128      	cbz	r0, 8085244 <_ZN9FatVolume9cacheSyncEv+0x18>
 8085238:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 808523c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync();
 8085240:	f001 b9b8 	b.w	80865b4 <_ZN8FatCache4syncEv>
  }
 8085244:	bd10      	pop	{r4, pc}

08085246 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8085246:	1e41      	subs	r1, r0, #1
 8085248:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
 808524c:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 808524e:	0842      	lsrs	r2, r0, #1
 8085250:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
 8085254:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8085258:	4410      	add	r0, r2
  for (uint8_t i = 0; i < 11; i++) {
 808525a:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 808525c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  for (uint8_t i = 0; i < 11; i++) {
 8085260:	d1f5      	bne.n	808524e <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
 8085262:	4770      	bx	lr

08085264 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8085264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085268:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 808526a:	f810 3b01 	ldrb.w	r3, [r0], #1
 808526e:	2b20      	cmp	r3, #32
 8085270:	d0fa      	beq.n	8085268 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
 8085272:	2400      	movs	r4, #0
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8085274:	4d6a      	ldr	r5, [pc, #424]	; (8085420 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
  fname->lfn = path;
 8085276:	608e      	str	r6, [r1, #8]
    c = path[len];
 8085278:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
 808527a:	b1c3      	cbz	r3, 80852ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
 808527c:	2b2f      	cmp	r3, #47	; 0x2f
 808527e:	d016      	beq.n	80852ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8085280:	2b5c      	cmp	r3, #92	; 0x5c
 8085282:	d102      	bne.n	808528a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8085284:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
 8085286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808528a:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
 808528e:	b2c0      	uxtb	r0, r0
 8085290:	281d      	cmp	r0, #29
 8085292:	d803      	bhi.n	808529c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
 8085294:	fa25 f000 	lsr.w	r0, r5, r0
 8085298:	07c0      	lsls	r0, r0, #31
 808529a:	d4f3      	bmi.n	8085284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 808529c:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
 80852a0:	283c      	cmp	r0, #60	; 0x3c
 80852a2:	d0ef      	beq.n	8085284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
 80852a4:	3b20      	subs	r3, #32
 80852a6:	2b5e      	cmp	r3, #94	; 0x5e
 80852a8:	d8ec      	bhi.n	8085284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
 80852aa:	3401      	adds	r4, #1
    c = path[len];
 80852ac:	e7e4      	b.n	8085278 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
 80852ae:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
 80852b0:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80852b2:	4607      	mov	r7, r0
 80852b4:	f810 5b01 	ldrb.w	r5, [r0], #1
 80852b8:	2d20      	cmp	r5, #32
 80852ba:	d0fa      	beq.n	80852b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
 80852bc:	2d2f      	cmp	r5, #47	; 0x2f
 80852be:	d0f8      	beq.n	80852b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
 80852c0:	6017      	str	r7, [r2, #0]
  while (len) {
 80852c2:	b14c      	cbz	r4, 80852d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
 80852c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80852c8:	2a2e      	cmp	r2, #46	; 0x2e
 80852ca:	d001      	beq.n	80852d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
 80852cc:	2a20      	cmp	r2, #32
 80852ce:	d101      	bne.n	80852d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
 80852d0:	3c01      	subs	r4, #1
  while (len) {
 80852d2:	e7f6      	b.n	80852c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
 80852d4:	2cff      	cmp	r4, #255	; 0xff
 80852d6:	dcd5      	bgt.n	8085284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
 80852d8:	2020      	movs	r0, #32
  fname->len = len;
 80852da:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
 80852dc:	f101 030d 	add.w	r3, r1, #13
 80852e0:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
 80852e4:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
 80852e8:	4293      	cmp	r3, r2
 80852ea:	d1fb      	bne.n	80852e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80852ec:	f04f 0800 	mov.w	r8, #0
 80852f0:	f816 3008 	ldrb.w	r3, [r6, r8]
 80852f4:	2b2e      	cmp	r3, #46	; 0x2e
 80852f6:	d001      	beq.n	80852fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
 80852f8:	2b20      	cmp	r3, #32
 80852fa:	d102      	bne.n	8085302 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
 80852fc:	f108 0801 	add.w	r8, r8, #1
 8085300:	e7f6      	b.n	80852f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
 8085302:	fab8 f088 	clz	r0, r8
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8085306:	1e65      	subs	r5, r4, #1
  is83 = !si;
 8085308:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808530a:	1c6b      	adds	r3, r5, #1
 808530c:	d002      	beq.n	8085314 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
 808530e:	5d73      	ldrb	r3, [r6, r5]
 8085310:	2b2e      	cmp	r3, #46	; 0x2e
 8085312:	d114      	bne.n	808533e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8085314:	f04f 0900 	mov.w	r9, #0
 8085318:	2707      	movs	r7, #7
 808531a:	464a      	mov	r2, r9
 808531c:	46ca      	mov	sl, r9
 808531e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
 8085322:	45a0      	cmp	r8, r4
 8085324:	da69      	bge.n	80853fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
 8085326:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
 808532a:	2b20      	cmp	r3, #32
 808532c:	d003      	beq.n	8085336 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
 808532e:	2b2e      	cmp	r3, #46	; 0x2e
 8085330:	d107      	bne.n	8085342 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8085332:	45a8      	cmp	r8, r5
 8085334:	d012      	beq.n	808535c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
 8085336:	2000      	movs	r0, #0
  for (; si < len; si++) {
 8085338:	f108 0801 	add.w	r8, r8, #1
 808533c:	e7f1      	b.n	8085322 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808533e:	3d01      	subs	r5, #1
 8085340:	e7e3      	b.n	808530a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
 8085342:	2b22      	cmp	r3, #34	; 0x22
 8085344:	d008      	beq.n	8085358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
 8085346:	2b7c      	cmp	r3, #124	; 0x7c
 8085348:	d006      	beq.n	8085358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 808534a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 808534e:	f1bc 0f05 	cmp.w	ip, #5
 8085352:	d80b      	bhi.n	808536c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
 8085354:	2b2d      	cmp	r3, #45	; 0x2d
 8085356:	d013      	beq.n	8085380 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
 8085358:	45a8      	cmp	r8, r5
 808535a:	d15c      	bne.n	8085416 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
 808535c:	2f0a      	cmp	r7, #10
 808535e:	d04b      	beq.n	80853f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 8085360:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 8085362:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 8085364:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8085366:	f04f 0e10 	mov.w	lr, #16
 808536a:	e7e5      	b.n	8085338 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
 808536c:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8085370:	f1bc 0f05 	cmp.w	ip, #5
 8085374:	d9f0      	bls.n	8085358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
 8085376:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 808537a:	f1bc 0f02 	cmp.w	ip, #2
 808537e:	d9eb      	bls.n	8085358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
 8085380:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8085384:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8085388:	d8e6      	bhi.n	8085358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
 808538a:	45a8      	cmp	r8, r5
 808538c:	d0e6      	beq.n	808535c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
 808538e:	42ba      	cmp	r2, r7
 8085390:	d830      	bhi.n	80853f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
 8085392:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8085396:	f1bc 0f19 	cmp.w	ip, #25
 808539a:	d81a      	bhi.n	80853d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
 808539c:	3b20      	subs	r3, #32
        lc |= bit;
 808539e:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
 80853a2:	b2db      	uxtb	r3, r3
        lc |= bit;
 80853a4:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
 80853a8:	f102 0c01 	add.w	ip, r2, #1
 80853ac:	fa5f fc8c 	uxtb.w	ip, ip
 80853b0:	440a      	add	r2, r1
      if (i < 7) {
 80853b2:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
 80853b6:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
 80853b8:	d801      	bhi.n	80853be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
 80853ba:	f881 c00c 	strb.w	ip, [r1, #12]
 80853be:	4662      	mov	r2, ip
 80853c0:	e7ba      	b.n	8085338 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
 80853c2:	45a8      	cmp	r8, r5
 80853c4:	dc18      	bgt.n	80853f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
 80853c6:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
 80853c8:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
 80853ca:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80853cc:	f04f 0e10 	mov.w	lr, #16
 80853d0:	e7b1      	b.n	8085336 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
 80853d2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80853d6:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80853da:	bf98      	it	ls
 80853dc:	ea4e 0a0a 	orrls.w	sl, lr, sl
 80853e0:	e7e2      	b.n	80853a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80853e2:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
 80853e4:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80853e6:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 80853e8:	4419      	add	r1, r3
 80853ea:	237e      	movs	r3, #126	; 0x7e
 80853ec:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 80853ee:	2331      	movs	r3, #49	; 0x31
 80853f0:	738b      	strb	r3, [r1, #14]
 80853f2:	e748      	b.n	8085286 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
 80853f4:	2f0a      	cmp	r7, #10
 80853f6:	d1e4      	bne.n	80853c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
 80853f8:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
 80853fa:	7b4b      	ldrb	r3, [r1, #13]
 80853fc:	2b20      	cmp	r3, #32
 80853fe:	f43f af41 	beq.w	8085284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
 8085402:	2800      	cmp	r0, #0
 8085404:	d0ed      	beq.n	80853e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8085406:	ea1a 0f09 	tst.w	sl, r9
 808540a:	bf18      	it	ne
 808540c:	f04f 0902 	movne.w	r9, #2
 8085410:	f881 9000 	strb.w	r9, [r1]
 8085414:	e737      	b.n	8085286 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
 8085416:	42ba      	cmp	r2, r7
 8085418:	d8ec      	bhi.n	80853f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
 808541a:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
 808541c:	2000      	movs	r0, #0
 808541e:	e7c3      	b.n	80853a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
 8085420:	31000101 	.word	0x31000101

08085424 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8085424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085428:	4606      	mov	r6, r0
 808542a:	460c      	mov	r4, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 808542c:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808542e:	277e      	movs	r7, #126	; 0x7e
  uint8_t pos = fname->seqPos;;
 8085430:	f891 900c 	ldrb.w	r9, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8085434:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8085438:	6861      	ldr	r1, [r4, #4]
 808543a:	68a2      	ldr	r2, [r4, #8]
 808543c:	186b      	adds	r3, r5, r1
 808543e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8085440:	4411      	add	r1, r2
 8085442:	4291      	cmp	r1, r2
 8085444:	d006      	beq.n	8085454 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
 8085446:	f812 0b01 	ldrb.w	r0, [r2], #1
 808544a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 808544e:	4043      	eors	r3, r0
 8085450:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
 8085452:	e7f6      	b.n	8085442 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
 8085454:	f1b9 0f03 	cmp.w	r9, #3
 8085458:	bf28      	it	cs
 808545a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808545e:	f109 0204 	add.w	r2, r9, #4
 8085462:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8085464:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085468:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808546a:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 808546c:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808546e:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085470:	bf94      	ite	ls
 8085472:	3130      	addls	r1, #48	; 0x30
 8085474:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8085476:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085478:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 808547a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808547e:	d1f1      	bne.n	8085464 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
 8085480:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
 8085484:	2100      	movs	r1, #0
 8085486:	4630      	mov	r0, r6
 8085488:	735f      	strb	r7, [r3, #13]
 808548a:	f000 fe96 	bl	80861ba <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
 808548e:	2101      	movs	r1, #1
 8085490:	4630      	mov	r0, r6
 8085492:	f000 fe73 	bl	808617c <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8085496:	4601      	mov	r1, r0
 8085498:	b928      	cbnz	r0, 80854a6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 808549a:	7870      	ldrb	r0, [r6, #1]
 808549c:	fab0 f080 	clz	r0, r0
 80854a0:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
 80854a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
 80854a6:	7803      	ldrb	r3, [r0, #0]
 80854a8:	b16b      	cbz	r3, 80854c6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80854aa:	7ac3      	ldrb	r3, [r0, #11]
 80854ac:	071b      	lsls	r3, r3, #28
 80854ae:	d4ee      	bmi.n	808548e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80854b0:	220b      	movs	r2, #11
 80854b2:	4640      	mov	r0, r8
 80854b4:	f005 fc38 	bl	808ad28 <memcmp>
 80854b8:	2800      	cmp	r0, #0
 80854ba:	d1e8      	bne.n	808548e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
 80854bc:	3501      	adds	r5, #1
 80854be:	b2ad      	uxth	r5, r5
 80854c0:	2d64      	cmp	r5, #100	; 0x64
 80854c2:	d1b9      	bne.n	8085438 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
 80854c4:	e7ed      	b.n	80854a2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
 80854c6:	2001      	movs	r0, #1
 80854c8:	e7eb      	b.n	80854a2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

080854cc <_ZN7FatFile4openEPS_P7fname_th>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80854cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80854d0:	b089      	sub	sp, #36	; 0x24
 80854d2:	9304      	str	r3, [sp, #16]
  if (!dirFile->isDir() || isOpen()) {
 80854d4:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80854d6:	460d      	mov	r5, r1
  if (!dirFile->isDir() || isOpen()) {
 80854d8:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80854dc:	4690      	mov	r8, r2
 80854de:	9005      	str	r0, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
 80854e0:	d103      	bne.n	80854ea <_ZN7FatFile4openEPS_P7fname_th+0x1e>
  return false;
 80854e2:	2000      	movs	r0, #0
}
 80854e4:	b009      	add	sp, #36	; 0x24
 80854e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
 80854ea:	9b05      	ldr	r3, [sp, #20]
 80854ec:	781b      	ldrb	r3, [r3, #0]
 80854ee:	2b00      	cmp	r3, #0
 80854f0:	d1f7      	bne.n	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  size_t len = fname->len;
 80854f2:	6853      	ldr	r3, [r2, #4]
 80854f4:	4628      	mov	r0, r5
 80854f6:	9303      	str	r3, [sp, #12]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80854f8:	7813      	ldrb	r3, [r2, #0]
 80854fa:	0799      	lsls	r1, r3, #30
 80854fc:	bf18      	it	ne
 80854fe:	9b03      	ldrne	r3, [sp, #12]
 8085500:	f04f 0100 	mov.w	r1, #0
 8085504:	bf1f      	itttt	ne
 8085506:	f103 070c 	addne.w	r7, r3, #12
 808550a:	230d      	movne	r3, #13
 808550c:	fbb7 f7f3 	udivne	r7, r7, r3
 8085510:	3701      	addne	r7, #1
 8085512:	bf0c      	ite	eq
 8085514:	2701      	moveq	r7, #1
 8085516:	b2ff      	uxtbne	r7, r7
 8085518:	f000 fe4f 	bl	80861ba <_ZN7FatFile7seekSetEm>
  }
 808551c:	2300      	movs	r3, #0
 808551e:	469b      	mov	fp, r3
 8085520:	461c      	mov	r4, r3
 8085522:	461e      	mov	r6, r3
 8085524:	469a      	mov	sl, r3
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8085526:	f108 020d 	add.w	r2, r8, #13
 808552a:	9302      	str	r3, [sp, #8]
 808552c:	9207      	str	r2, [sp, #28]
    curIndex = dirFile->m_curPosition/32;
 808552e:	696a      	ldr	r2, [r5, #20]
    dir = dirFile->readDirCache(true);
 8085530:	2101      	movs	r1, #1
 8085532:	4628      	mov	r0, r5
 8085534:	9306      	str	r3, [sp, #24]
    curIndex = dirFile->m_curPosition/32;
 8085536:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
 808553a:	f000 fe1f 	bl	808617c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 808553e:	9b06      	ldr	r3, [sp, #24]
 8085540:	2800      	cmp	r0, #0
 8085542:	d16c      	bne.n	808561e <_ZN7FatFile4openEPS_P7fname_th+0x152>
      if (dirFile->getError()) {
 8085544:	786b      	ldrb	r3, [r5, #1]
 8085546:	2b00      	cmp	r3, #0
 8085548:	d1cb      	bne.n	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 808554a:	9b04      	ldr	r3, [sp, #16]
 808554c:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8085550:	2b42      	cmp	r3, #66	; 0x42
 8085552:	d1c6      	bne.n	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (freeFound == 0) {
 8085554:	9b02      	ldr	r3, [sp, #8]
 8085556:	2c00      	cmp	r4, #0
 8085558:	bf08      	it	eq
 808555a:	464b      	moveq	r3, r9
 808555c:	9302      	str	r3, [sp, #8]
  while (freeFound < freeNeed) {
 808555e:	42bc      	cmp	r4, r7
 8085560:	f0c0 8103 	bcc.w	808576a <_ZN7FatFile4openEPS_P7fname_th+0x29e>
  if (fnameFound) {
 8085564:	f1ba 0f00 	cmp.w	sl, #0
 8085568:	f040 811b 	bne.w	80857a2 <_ZN7FatFile4openEPS_P7fname_th+0x2d6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
 808556c:	9b02      	ldr	r3, [sp, #8]
 808556e:	4628      	mov	r0, r5
 8085570:	0159      	lsls	r1, r3, #5
 8085572:	f000 fe22 	bl	80861ba <_ZN7FatFile7seekSetEm>
 8085576:	2800      	cmp	r0, #0
 8085578:	d0b3      	beq.n	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  lfnOrd = freeNeed - 1;
 808557a:	3f01      	subs	r7, #1
 808557c:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8085580:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8085582:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
 8085586:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8085588:	2e00      	cmp	r6, #0
 808558a:	f000 8121 	beq.w	80857d0 <_ZN7FatFile4openEPS_P7fname_th+0x304>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808558e:	2100      	movs	r1, #0
 8085590:	4628      	mov	r0, r5
 8085592:	f000 fdf3 	bl	808617c <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8085596:	4604      	mov	r4, r0
 8085598:	2800      	cmp	r0, #0
 808559a:	d0a2      	beq.n	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808559c:	4556      	cmp	r6, sl
 808559e:	bf18      	it	ne
 80855a0:	46b3      	movne	fp, r6
    dirFile->m_vol->cacheDirty();
 80855a2:	68aa      	ldr	r2, [r5, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80855a4:	bf08      	it	eq
 80855a6:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
    m_status |= CACHE_STATUS_DIRTY;
 80855aa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 80855ae:	f043 0301 	orr.w	r3, r3, #1
 80855b2:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80855b6:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
 80855ba:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
 80855bc:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 80855c0:	f108 000d 	add.w	r0, r8, #13
 80855c4:	f7ff fe3f 	bl	8085246 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80855c8:	220d      	movs	r2, #13
 80855ca:	2300      	movs	r3, #0
 80855cc:	f00b 0b1f 	and.w	fp, fp, #31
 80855d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80855d4:	fb02 f20b 	mul.w	r2, r2, fp
    ldir->chksum = lfnChecksum(fname->sfn);
 80855d8:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
 80855da:	f884 901a 	strb.w	r9, [r4, #26]
 80855de:	f884 901b 	strb.w	r9, [r4, #27]
    lfnPutName(ldir, fname->lfn, len);
 80855e2:	f8d8 c008 	ldr.w	ip, [r8, #8]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80855e6:	9903      	ldr	r1, [sp, #12]
 80855e8:	4291      	cmp	r1, r2
 80855ea:	f240 80e2 	bls.w	80857b2 <_ZN7FatFile4openEPS_P7fname_th+0x2e6>
 80855ee:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
 80855f2:	2b04      	cmp	r3, #4
 80855f4:	fa5f fe83 	uxtb.w	lr, r3
 80855f8:	f103 0001 	add.w	r0, r3, #1
 80855fc:	f200 80df 	bhi.w	80857be <_ZN7FatFile4openEPS_P7fname_th+0x2f2>
    ldir->name1[i] = c;
 8085600:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8085604:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
 8085608:	280d      	cmp	r0, #13
 808560a:	4603      	mov	r3, r0
 808560c:	f102 0201 	add.w	r2, r2, #1
 8085610:	d1e9      	bne.n	80855e6 <_ZN7FatFile4openEPS_P7fname_th+0x11a>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8085612:	3e01      	subs	r6, #1
 8085614:	b2f6      	uxtb	r6, r6
 8085616:	e7b7      	b.n	8085588 <_ZN7FatFile4openEPS_P7fname_th+0xbc>
        fnameFound = true;
 8085618:	f04f 0a01 	mov.w	sl, #1
 808561c:	e787      	b.n	808552e <_ZN7FatFile4openEPS_P7fname_th+0x62>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 808561e:	7802      	ldrb	r2, [r0, #0]
 8085620:	2ae5      	cmp	r2, #229	; 0xe5
 8085622:	d000      	beq.n	8085626 <_ZN7FatFile4openEPS_P7fname_th+0x15a>
 8085624:	b97a      	cbnz	r2, 8085646 <_ZN7FatFile4openEPS_P7fname_th+0x17a>
    curIndex = dirFile->m_curPosition/32;
 8085626:	9902      	ldr	r1, [sp, #8]
 8085628:	2c00      	cmp	r4, #0
 808562a:	bf08      	it	eq
 808562c:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
 808562e:	42bc      	cmp	r4, r7
        freeFound++;
 8085630:	bf38      	it	cc
 8085632:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
 8085634:	9102      	str	r1, [sp, #8]
        freeFound++;
 8085636:	bf38      	it	cc
 8085638:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
 808563a:	2a00      	cmp	r2, #0
 808563c:	d085      	beq.n	808554a <_ZN7FatFile4openEPS_P7fname_th+0x7e>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 808563e:	2ae5      	cmp	r2, #229	; 0xe5
 8085640:	d104      	bne.n	808564c <_ZN7FatFile4openEPS_P7fname_th+0x180>
      lfnOrd = 0;
 8085642:	2600      	movs	r6, #0
 8085644:	e773      	b.n	808552e <_ZN7FatFile4openEPS_P7fname_th+0x62>
        freeFound = 0;
 8085646:	42bc      	cmp	r4, r7
 8085648:	bf38      	it	cc
 808564a:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 808564c:	2a2e      	cmp	r2, #46	; 0x2e
 808564e:	d0f8      	beq.n	8085642 <_ZN7FatFile4openEPS_P7fname_th+0x176>
    } else if (DIR_IS_LONG_NAME(dir)) {
 8085650:	7ac1      	ldrb	r1, [r0, #11]
 8085652:	290f      	cmp	r1, #15
 8085654:	d15d      	bne.n	8085712 <_ZN7FatFile4openEPS_P7fname_th+0x246>
      if (!lfnOrd) {
 8085656:	bb3e      	cbnz	r6, 80856a8 <_ZN7FatFile4openEPS_P7fname_th+0x1dc>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8085658:	f012 0640 	ands.w	r6, r2, #64	; 0x40
 808565c:	f43f af67 	beq.w	808552e <_ZN7FatFile4openEPS_P7fname_th+0x62>
        lfnOrd = ord = ldir->ord & 0X1F;
 8085660:	f002 061f 	and.w	r6, r2, #31
 8085664:	46b3      	mov	fp, r6
        chksum = ldir->chksum;
 8085666:	7b43      	ldrb	r3, [r0, #13]
      size_t k = 13*(ord - 1);
 8085668:	f04f 0e0d 	mov.w	lr, #13
 808566c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8085670:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
 8085674:	9a03      	ldr	r2, [sp, #12]
 8085676:	4572      	cmp	r2, lr
 8085678:	d9e3      	bls.n	8085642 <_ZN7FatFile4openEPS_P7fname_th+0x176>
 808567a:	f04f 0c00 	mov.w	ip, #0
 808567e:	eba2 020e 	sub.w	r2, r2, lr
 8085682:	9206      	str	r2, [sp, #24]
  if (i < LDIR_NAME1_DIM) {
 8085684:	f1bc 0f04 	cmp.w	ip, #4
 8085688:	eb0c 090e 	add.w	r9, ip, lr
 808568c:	fa5f f28c 	uxtb.w	r2, ip
 8085690:	d814      	bhi.n	80856bc <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
    return ldir->name1[i];
 8085692:	eb00 024c 	add.w	r2, r0, ip, lsl #1
 8085696:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
 808569a:	9906      	ldr	r1, [sp, #24]
 808569c:	458c      	cmp	ip, r1
 808569e:	d11b      	bne.n	80856d8 <_ZN7FatFile4openEPS_P7fname_th+0x20c>
            lfnOrd = 0;
 80856a0:	2a00      	cmp	r2, #0
 80856a2:	bf18      	it	ne
 80856a4:	2600      	movne	r6, #0
 80856a6:	e742      	b.n	808552e <_ZN7FatFile4openEPS_P7fname_th+0x62>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80856a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80856ac:	fa5f fb8b 	uxtb.w	fp, fp
 80856b0:	455a      	cmp	r2, fp
 80856b2:	d1c6      	bne.n	8085642 <_ZN7FatFile4openEPS_P7fname_th+0x176>
 80856b4:	7b42      	ldrb	r2, [r0, #13]
 80856b6:	429a      	cmp	r2, r3
 80856b8:	d0d6      	beq.n	8085668 <_ZN7FatFile4openEPS_P7fname_th+0x19c>
 80856ba:	e7c2      	b.n	8085642 <_ZN7FatFile4openEPS_P7fname_th+0x176>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80856bc:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 80856be:	bf95      	itete	ls
 80856c0:	f10c 32ff 	addls.w	r2, ip, #4294967295
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80856c4:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 80856c8:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80856cc:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
 80856d0:	bf94      	ite	ls
 80856d2:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80856d4:	8892      	ldrhhi	r2, [r2, #4]
 80856d6:	e7e0      	b.n	808569a <_ZN7FatFile4openEPS_P7fname_th+0x1ce>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80856d8:	2aff      	cmp	r2, #255	; 0xff
 80856da:	d8b2      	bhi.n	8085642 <_ZN7FatFile4openEPS_P7fname_th+0x176>
 80856dc:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80856de:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 80856e2:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80856e4:	f8d8 1008 	ldr.w	r1, [r8, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80856e8:	bf98      	it	ls
 80856ea:	3220      	addls	r2, #32
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80856ec:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80856f0:	bf98      	it	ls
 80856f2:	b2d2      	uxtbls	r2, r2
 80856f4:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
 80856f8:	f1b9 0f19 	cmp.w	r9, #25
 80856fc:	bf9c      	itt	ls
 80856fe:	3120      	addls	r1, #32
 8085700:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085702:	4291      	cmp	r1, r2
 8085704:	d19d      	bne.n	8085642 <_ZN7FatFile4openEPS_P7fname_th+0x176>
      for (uint8_t i = 0; i < 13; i++) {
 8085706:	f10c 0c01 	add.w	ip, ip, #1
 808570a:	f1bc 0f0d 	cmp.w	ip, #13
 808570e:	d1b9      	bne.n	8085684 <_ZN7FatFile4openEPS_P7fname_th+0x1b8>
 8085710:	e70d      	b.n	808552e <_ZN7FatFile4openEPS_P7fname_th+0x62>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8085712:	070a      	lsls	r2, r1, #28
 8085714:	d495      	bmi.n	8085642 <_ZN7FatFile4openEPS_P7fname_th+0x176>
      if (lfnOrd) {
 8085716:	b166      	cbz	r6, 8085732 <_ZN7FatFile4openEPS_P7fname_th+0x266>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8085718:	f1bb 0f01 	cmp.w	fp, #1
 808571c:	9302      	str	r3, [sp, #8]
 808571e:	f47f aee0 	bne.w	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8085722:	f7ff fd90 	bl	8085246 <_ZN7FatFile11lfnChecksumEPh>
 8085726:	9b02      	ldr	r3, [sp, #8]
 8085728:	4298      	cmp	r0, r3
 808572a:	f47f aeda 	bne.w	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 808572e:	46b2      	mov	sl, r6
 8085730:	e00e      	b.n	8085750 <_ZN7FatFile4openEPS_P7fname_th+0x284>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8085732:	220b      	movs	r2, #11
 8085734:	9907      	ldr	r1, [sp, #28]
 8085736:	9306      	str	r3, [sp, #24]
 8085738:	f005 faf6 	bl	808ad28 <memcmp>
 808573c:	9b06      	ldr	r3, [sp, #24]
 808573e:	2800      	cmp	r0, #0
 8085740:	f47f aef5 	bne.w	808552e <_ZN7FatFile4openEPS_P7fname_th+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8085744:	f898 a000 	ldrb.w	sl, [r8]
 8085748:	f01a 0a01 	ands.w	sl, sl, #1
 808574c:	f47f af64 	bne.w	8085618 <_ZN7FatFile4openEPS_P7fname_th+0x14c>
  if (oflag & O_EXCL) {
 8085750:	9b04      	ldr	r3, [sp, #16]
 8085752:	061b      	lsls	r3, r3, #24
 8085754:	f53f aec5 	bmi.w	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8085758:	464a      	mov	r2, r9
 808575a:	4629      	mov	r1, r5
 808575c:	9b04      	ldr	r3, [sp, #16]
 808575e:	9805      	ldr	r0, [sp, #20]
 8085760:	f8cd a000 	str.w	sl, [sp]
 8085764:	f000 fd6c 	bl	8086240 <_ZN7FatFile15openCachedEntryEPS_thh>
 8085768:	e6bc      	b.n	80854e4 <_ZN7FatFile4openEPS_P7fname_th+0x18>
    dir = dirFile->readDirCache();
 808576a:	2100      	movs	r1, #0
 808576c:	4628      	mov	r0, r5
 808576e:	f000 fd05 	bl	808617c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8085772:	b998      	cbnz	r0, 808579c <_ZN7FatFile4openEPS_P7fname_th+0x2d0>
      if (dirFile->getError()) {
 8085774:	786b      	ldrb	r3, [r5, #1]
 8085776:	2b00      	cmp	r3, #0
 8085778:	f47f aeb3 	bne.w	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (!dirFile->addDirCluster()) {
 808577c:	4628      	mov	r0, r5
 808577e:	f000 fbd5 	bl	8085f2c <_ZN7FatFile13addDirClusterEv>
 8085782:	2800      	cmp	r0, #0
 8085784:	f43f aead 	beq.w	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8085788:	68ab      	ldr	r3, [r5, #8]
 808578a:	791b      	ldrb	r3, [r3, #4]
 808578c:	2b01      	cmp	r3, #1
 808578e:	f63f aee9 	bhi.w	8085564 <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound += 16;
 8085792:	3410      	adds	r4, #16
 8085794:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 8085796:	42a7      	cmp	r7, r4
 8085798:	d8f0      	bhi.n	808577c <_ZN7FatFile4openEPS_P7fname_th+0x2b0>
 808579a:	e6e3      	b.n	8085564 <_ZN7FatFile4openEPS_P7fname_th+0x98>
    freeFound++;
 808579c:	3401      	adds	r4, #1
 808579e:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
 80857a0:	e6dd      	b.n	808555e <_ZN7FatFile4openEPS_P7fname_th+0x92>
    if (!dirFile->lfnUniqueSfn(fname)) {
 80857a2:	4641      	mov	r1, r8
 80857a4:	4628      	mov	r0, r5
 80857a6:	f7ff fe3d 	bl	8085424 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 80857aa:	2800      	cmp	r0, #0
 80857ac:	f47f aede 	bne.w	808556c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80857b0:	e697      	b.n	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80857b2:	bf14      	ite	ne
 80857b4:	f04f 31ff 	movne.w	r1, #4294967295
 80857b8:	2100      	moveq	r1, #0
 80857ba:	b289      	uxth	r1, r1
 80857bc:	e719      	b.n	80855f2 <_ZN7FatFile4openEPS_P7fname_th+0x126>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80857be:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 80857c2:	bf94      	ite	ls
 80857c4:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 80857c8:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
 80857cc:	8099      	strh	r1, [r3, #4]
 80857ce:	e71b      	b.n	8085608 <_ZN7FatFile4openEPS_P7fname_th+0x13c>
  dir = dirFile->readDirCache();
 80857d0:	4631      	mov	r1, r6
 80857d2:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
 80857d4:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
 80857d6:	f000 fcd1 	bl	808617c <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80857da:	4604      	mov	r4, r0
 80857dc:	2800      	cmp	r0, #0
 80857de:	f43f ae80 	beq.w	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  memset(dir, 0, sizeof(dir_t));
 80857e2:	2220      	movs	r2, #32
 80857e4:	4631      	mov	r1, r6
 80857e6:	f005 fad5 	bl	808ad94 <memset>
  memcpy(dir->name, fname->sfn, 11);
 80857ea:	4643      	mov	r3, r8
 80857ec:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 80857f0:	6022      	str	r2, [r4, #0]
 80857f2:	685a      	ldr	r2, [r3, #4]
 80857f4:	6062      	str	r2, [r4, #4]
 80857f6:	891a      	ldrh	r2, [r3, #8]
 80857f8:	8122      	strh	r2, [r4, #8]
 80857fa:	7a9b      	ldrb	r3, [r3, #10]
 80857fc:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 80857fe:	f898 3000 	ldrb.w	r3, [r8]
 8085802:	f003 0318 	and.w	r3, r3, #24
 8085806:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
 8085808:	4b0f      	ldr	r3, [pc, #60]	; (8085848 <_ZN7FatFile4openEPS_P7fname_th+0x37c>)
 808580a:	681b      	ldr	r3, [r3, #0]
 808580c:	b19b      	cbz	r3, 8085836 <_ZN7FatFile4openEPS_P7fname_th+0x36a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
 808580e:	f104 010e 	add.w	r1, r4, #14
 8085812:	f104 0010 	add.w	r0, r4, #16
 8085816:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
 8085818:	8a23      	ldrh	r3, [r4, #16]
  curIndex = dirFile->m_curPosition/32;
 808581a:	f3c7 194f 	ubfx	r9, r7, #5, #16
  dir->lastAccessDate = dir->creationDate;
 808581e:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
 8085820:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
 8085822:	89e3      	ldrh	r3, [r4, #14]
 8085824:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
 8085826:	68aa      	ldr	r2, [r5, #8]
 8085828:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 808582c:	f043 0301 	orr.w	r3, r3, #1
 8085830:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
 8085834:	e790      	b.n	8085758 <_ZN7FatFile4openEPS_P7fname_th+0x28c>
    dir->creationDate = FAT_DEFAULT_DATE;
 8085836:	2321      	movs	r3, #33	; 0x21
 8085838:	7423      	strb	r3, [r4, #16]
 808583a:	2328      	movs	r3, #40	; 0x28
 808583c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 808583e:	2308      	movs	r3, #8
 8085840:	73a6      	strb	r6, [r4, #14]
 8085842:	73e3      	strb	r3, [r4, #15]
 8085844:	e7e8      	b.n	8085818 <_ZN7FatFile4openEPS_P7fname_th+0x34c>
 8085846:	bf00      	nop
 8085848:	20001cd0 	.word	0x20001cd0

0808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 808584c:	6803      	ldr	r3, [r0, #0]
 808584e:	68db      	ldr	r3, [r3, #12]
 8085850:	4718      	bx	r3

08085852 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8085852:	6803      	ldr	r3, [r0, #0]
 8085854:	695b      	ldr	r3, [r3, #20]
 8085856:	4718      	bx	r3

08085858 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8085858:	b510      	push	{r4, lr}
  if (!m_selected) {
 808585a:	7903      	ldrb	r3, [r0, #4]
void SdSpiCard::chipSelectHigh() {
 808585c:	4604      	mov	r4, r0
  if (!m_selected) {
 808585e:	b16b      	cbz	r3, 808587c <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8085860:	2101      	movs	r1, #1
 8085862:	7940      	ldrb	r0, [r0, #5]
 8085864:	f004 f885 	bl	8089972 <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8085868:	21ff      	movs	r1, #255	; 0xff
 808586a:	6820      	ldr	r0, [r4, #0]
 808586c:	f7ff fff1 	bl	8085852 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiEndTransaction();
 8085870:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 8085872:	6803      	ldr	r3, [r0, #0]
 8085874:	689b      	ldr	r3, [r3, #8]
 8085876:	4798      	blx	r3
  m_selected = false;
 8085878:	2300      	movs	r3, #0
 808587a:	7123      	strb	r3, [r4, #4]
}
 808587c:	bd10      	pop	{r4, pc}

0808587e <_ZN9SdSpiCard13chipSelectLowEv>:
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 808587e:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8085880:	7905      	ldrb	r5, [r0, #4]
void SdSpiCard::chipSelectLow() {
 8085882:	4604      	mov	r4, r0
  if (m_selected) {
 8085884:	b955      	cbnz	r5, 808589c <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
 8085886:	6800      	ldr	r0, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 8085888:	79e1      	ldrb	r1, [r4, #7]
 808588a:	6803      	ldr	r3, [r0, #0]
 808588c:	685b      	ldr	r3, [r3, #4]
 808588e:	4798      	blx	r3
  digitalWrite(m_chipSelectPin, LOW);
 8085890:	4629      	mov	r1, r5
 8085892:	7960      	ldrb	r0, [r4, #5]
 8085894:	f004 f86d 	bl	8089972 <digitalWrite>
  m_selected = true;
 8085898:	2301      	movs	r3, #1
 808589a:	7123      	strb	r3, [r4, #4]
}
 808589c:	bd38      	pop	{r3, r4, r5, pc}

0808589e <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 808589e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80858a0:	4604      	mov	r4, r0
 80858a2:	460d      	mov	r5, r1
 80858a4:	4616      	mov	r6, r2
 80858a6:	f001 fca1 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
 80858aa:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 80858ac:	6820      	ldr	r0, [r4, #0]
 80858ae:	f7ff ffcd 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80858b2:	28ff      	cmp	r0, #255	; 0xff
 80858b4:	7220      	strb	r0, [r4, #8]
 80858b6:	d10c      	bne.n	80858d2 <_ZN9SdSpiCard8readDataEPhj+0x34>
 80858b8:	f001 fc98 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 80858bc:	1bc3      	subs	r3, r0, r7
 80858be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80858c2:	d9f3      	bls.n	80858ac <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
 80858c4:	2311      	movs	r3, #17
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 80858c6:	4620      	mov	r0, r4
 80858c8:	71a3      	strb	r3, [r4, #6]
 80858ca:	f7ff ffc5 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80858ce:	2000      	movs	r0, #0
}
 80858d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
 80858d2:	28fe      	cmp	r0, #254	; 0xfe
 80858d4:	d001      	beq.n	80858da <_ZN9SdSpiCard8readDataEPhj+0x3c>
 80858d6:	230f      	movs	r3, #15
 80858d8:	e7f5      	b.n	80858c6 <_ZN9SdSpiCard8readDataEPhj+0x28>
  if ((m_status = spiReceive(dst, count))) {
 80858da:	6820      	ldr	r0, [r4, #0]
    return m_spi->receive(buf, n);
 80858dc:	4632      	mov	r2, r6
 80858de:	6803      	ldr	r3, [r0, #0]
 80858e0:	4629      	mov	r1, r5
 80858e2:	691b      	ldr	r3, [r3, #16]
 80858e4:	4798      	blx	r3
 80858e6:	7220      	strb	r0, [r4, #8]
 80858e8:	b108      	cbz	r0, 80858ee <_ZN9SdSpiCard8readDataEPhj+0x50>
    m_errorCode = code;
 80858ea:	231c      	movs	r3, #28
 80858ec:	e7eb      	b.n	80858c6 <_ZN9SdSpiCard8readDataEPhj+0x28>
  spiReceive();
 80858ee:	6820      	ldr	r0, [r4, #0]
 80858f0:	f7ff ffac 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
 80858f4:	6820      	ldr	r0, [r4, #0]
 80858f6:	f7ff ffa9 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 80858fa:	2001      	movs	r0, #1
 80858fc:	e7e8      	b.n	80858d0 <_ZN9SdSpiCard8readDataEPhj+0x32>

080858fe <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 80858fe:	b570      	push	{r4, r5, r6, lr}
 8085900:	4606      	mov	r6, r0
 8085902:	460c      	mov	r4, r1
 8085904:	f001 fc72 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
 8085908:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 808590a:	6830      	ldr	r0, [r6, #0]
 808590c:	f7ff ff9e 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085910:	28ff      	cmp	r0, #255	; 0xff
 8085912:	d006      	beq.n	8085922 <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8085914:	f001 fc6a 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8085918:	1b43      	subs	r3, r0, r5
 808591a:	42a3      	cmp	r3, r4
 808591c:	d3f5      	bcc.n	808590a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 808591e:	2000      	movs	r0, #0
}
 8085920:	bd70      	pop	{r4, r5, r6, pc}
  return true;
 8085922:	2001      	movs	r0, #1
 8085924:	e7fc      	b.n	8085920 <_ZN9SdSpiCard11waitNotBusyEt+0x22>

08085926 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8085926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_selected) {
 8085928:	7903      	ldrb	r3, [r0, #4]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 808592a:	4604      	mov	r4, r0
 808592c:	460d      	mov	r5, r1
 808592e:	9201      	str	r2, [sp, #4]
  if (!m_selected) {
 8085930:	b90b      	cbnz	r3, 8085936 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8085932:	f7ff ffa4 	bl	808587e <_ZN9SdSpiCard13chipSelectLowEv>
  waitNotBusy(SD_WRITE_TIMEOUT);
 8085936:	f44f 7116 	mov.w	r1, #600	; 0x258
 808593a:	4620      	mov	r0, r4
 808593c:	f7ff ffdf 	bl	80858fe <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
 8085940:	6820      	ldr	r0, [r4, #0]
 8085942:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8085946:	f7ff ff84 	bl	8085852 <_ZN9SdSpiCard7spiSendEh.isra.0>
 808594a:	2603      	movs	r6, #3
    spiSend(pa[i]);
 808594c:	af01      	add	r7, sp, #4
 808594e:	5db9      	ldrb	r1, [r7, r6]
 8085950:	6820      	ldr	r0, [r4, #0]
 8085952:	f7ff ff7e 	bl	8085852 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
 8085956:	3e01      	subs	r6, #1
 8085958:	d2f9      	bcs.n	808594e <_ZN9SdSpiCard11cardCommandEhm+0x28>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 808595a:	2d00      	cmp	r5, #0
 808595c:	bf0c      	ite	eq
 808595e:	2195      	moveq	r1, #149	; 0x95
 8085960:	2187      	movne	r1, #135	; 0x87
 8085962:	6820      	ldr	r0, [r4, #0]
 8085964:	f7ff ff75 	bl	8085852 <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (cmd == CMD12) {
 8085968:	2d0c      	cmp	r5, #12
 808596a:	d102      	bne.n	8085972 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
    spiReceive();
 808596c:	6820      	ldr	r0, [r4, #0]
 808596e:	f7ff ff6d 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8085972:	2500      	movs	r5, #0
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8085974:	6820      	ldr	r0, [r4, #0]
 8085976:	f7ff ff69 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 808597a:	0603      	lsls	r3, r0, #24
 808597c:	7220      	strb	r0, [r4, #8]
 808597e:	d503      	bpl.n	8085988 <_ZN9SdSpiCard11cardCommandEhm+0x62>
 8085980:	3501      	adds	r5, #1
 8085982:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8085986:	d1f5      	bne.n	8085974 <_ZN9SdSpiCard11cardCommandEhm+0x4e>
}
 8085988:	b003      	add	sp, #12
 808598a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808598c <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 808598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808598e:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8085990:	2300      	movs	r3, #0
  m_chipSelectPin = chipSelectPin;
 8085992:	7142      	strb	r2, [r0, #5]
  m_errorCode = m_type = 0;
 8085994:	7243      	strb	r3, [r0, #9]
 8085996:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8085998:	6001      	str	r1, [r0, #0]
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 808599a:	4604      	mov	r4, r0
 808599c:	f001 fc26 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
 80859a0:	4605      	mov	r5, r0
  spiBegin(m_chipSelectPin);
 80859a2:	6820      	ldr	r0, [r4, #0]
    m_spi->begin(chipSelectPin);
 80859a4:	7961      	ldrb	r1, [r4, #5]
 80859a6:	6803      	ldr	r3, [r0, #0]
    m_spi->beginTransaction(spiDivisor);
 80859a8:	260a      	movs	r6, #10
    m_spi->begin(chipSelectPin);
 80859aa:	681b      	ldr	r3, [r3, #0]
 80859ac:	4798      	blx	r3
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 80859ae:	2180      	movs	r1, #128	; 0x80
  spiBeginTransaction(m_sckDivisor);
 80859b0:	6820      	ldr	r0, [r4, #0]
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 80859b2:	71e1      	strb	r1, [r4, #7]
    m_spi->beginTransaction(spiDivisor);
 80859b4:	6803      	ldr	r3, [r0, #0]
 80859b6:	685b      	ldr	r3, [r3, #4]
 80859b8:	4798      	blx	r3
    spiSend(0XFF);
 80859ba:	21ff      	movs	r1, #255	; 0xff
 80859bc:	6820      	ldr	r0, [r4, #0]
 80859be:	3e01      	subs	r6, #1
 80859c0:	f7ff ff47 	bl	8085852 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
 80859c4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80859c8:	d1f7      	bne.n	80859ba <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
  spiEndTransaction();
 80859ca:	6820      	ldr	r0, [r4, #0]
    m_spi->endTransaction();
 80859cc:	6803      	ldr	r3, [r0, #0]
 80859ce:	689b      	ldr	r3, [r3, #8]
 80859d0:	4798      	blx	r3
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 80859d2:	2200      	movs	r2, #0
 80859d4:	4620      	mov	r0, r4
 80859d6:	4611      	mov	r1, r2
 80859d8:	f7ff ffa5 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
 80859dc:	2801      	cmp	r0, #1
 80859de:	d00c      	beq.n	80859fa <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
 80859e0:	f001 fc04 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 80859e4:	1b40      	subs	r0, r0, r5
 80859e6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80859ea:	d9f2      	bls.n	80859d2 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
    m_errorCode = code;
 80859ec:	2301      	movs	r3, #1
  chipSelectHigh();
 80859ee:	4620      	mov	r0, r4
 80859f0:	71a3      	strb	r3, [r4, #6]
 80859f2:	f7ff ff31 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80859f6:	2000      	movs	r0, #0
}
 80859f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80859fa:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80859fe:	2108      	movs	r1, #8
 8085a00:	4620      	mov	r0, r4
 8085a02:	f7ff ff90 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
 8085a06:	2805      	cmp	r0, #5
 8085a08:	d116      	bne.n	8085a38 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xac>
    m_type = value;
 8085a0a:	2301      	movs	r3, #1
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8085a0c:	2600      	movs	r6, #0
 8085a0e:	7263      	strb	r3, [r4, #9]
    cardCommand(CMD55, 0);
 8085a10:	2200      	movs	r2, #0
 8085a12:	2137      	movs	r1, #55	; 0x37
 8085a14:	4620      	mov	r0, r4
 8085a16:	f7ff ff86 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8085a1a:	4632      	mov	r2, r6
 8085a1c:	2129      	movs	r1, #41	; 0x29
 8085a1e:	4620      	mov	r0, r4
 8085a20:	f7ff ff81 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8085a24:	4602      	mov	r2, r0
 8085a26:	b1f8      	cbz	r0, 8085a68 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xdc>
 8085a28:	f001 fbe0 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8085a2c:	1b40      	subs	r0, r0, r5
 8085a2e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085a32:	d9ed      	bls.n	8085a10 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
    m_errorCode = code;
 8085a34:	230a      	movs	r3, #10
 8085a36:	e7da      	b.n	80859ee <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
 8085a38:	2604      	movs	r6, #4
      m_status = spiReceive();
 8085a3a:	6820      	ldr	r0, [r4, #0]
 8085a3c:	f7ff ff06 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085a40:	3e01      	subs	r6, #1
    for (uint8_t i = 0; i < 4; i++) {
 8085a42:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      m_status = spiReceive();
 8085a46:	7220      	strb	r0, [r4, #8]
    for (uint8_t i = 0; i < 4; i++) {
 8085a48:	d1f7      	bne.n	8085a3a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xae>
    if (m_status == 0XAA) {
 8085a4a:	28aa      	cmp	r0, #170	; 0xaa
 8085a4c:	d104      	bne.n	8085a58 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xcc>
    m_type = value;
 8085a4e:	2302      	movs	r3, #2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8085a50:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8085a54:	7263      	strb	r3, [r4, #9]
    return m_type;
 8085a56:	e7db      	b.n	8085a10 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x84>
 8085a58:	f001 fbc8 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8085a5c:	1b40      	subs	r0, r0, r5
 8085a5e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085a62:	d9ca      	bls.n	80859fa <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6e>
    m_errorCode = code;
 8085a64:	2302      	movs	r3, #2
 8085a66:	e7c2      	b.n	80859ee <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
  if (type() == SD_CARD_TYPE_SD2) {
 8085a68:	7a63      	ldrb	r3, [r4, #9]
 8085a6a:	2b02      	cmp	r3, #2
 8085a6c:	d119      	bne.n	8085aa2 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x116>
    if (cardCommand(CMD58, 0)) {
 8085a6e:	213a      	movs	r1, #58	; 0x3a
 8085a70:	4620      	mov	r0, r4
 8085a72:	f7ff ff58 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
 8085a76:	b108      	cbz	r0, 8085a7c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf0>
 8085a78:	2308      	movs	r3, #8
 8085a7a:	e7b8      	b.n	80859ee <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x62>
    if ((spiReceive() & 0XC0) == 0XC0) {
 8085a7c:	6820      	ldr	r0, [r4, #0]
 8085a7e:	f7ff fee5 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085a82:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8085a86:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
 8085a88:	bf08      	it	eq
 8085a8a:	2303      	moveq	r3, #3
      spiReceive();
 8085a8c:	6820      	ldr	r0, [r4, #0]
 8085a8e:	bf08      	it	eq
 8085a90:	7263      	strbeq	r3, [r4, #9]
 8085a92:	f7ff fedb 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085a96:	6820      	ldr	r0, [r4, #0]
 8085a98:	f7ff fed8 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085a9c:	6820      	ldr	r0, [r4, #0]
 8085a9e:	f7ff fed5 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  chipSelectHigh();
 8085aa2:	4620      	mov	r0, r4
 8085aa4:	f7ff fed8 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8085aa8:	2001      	movs	r0, #1
  m_sckDivisor = sckDivisor;
 8085aaa:	71e7      	strb	r7, [r4, #7]
  return true;
 8085aac:	e7a4      	b.n	80859f8 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x6c>

08085aae <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085aae:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8085ab0:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085ab2:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8085ab4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085ab6:	bf18      	it	ne
 8085ab8:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD17, blockNumber)) {
 8085aba:	460a      	mov	r2, r1
 8085abc:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085abe:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
 8085ac0:	f7ff ff31 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
 8085ac4:	b130      	cbz	r0, 8085ad4 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
 8085ac6:	2304      	movs	r3, #4
 8085ac8:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8085aca:	4620      	mov	r0, r4
 8085acc:	f7ff fec4 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085ad0:	2500      	movs	r5, #0
 8085ad2:	e00b      	b.n	8085aec <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
 8085ad4:	4629      	mov	r1, r5
 8085ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085ada:	4620      	mov	r0, r4
 8085adc:	f7ff fedf 	bl	808589e <_ZN9SdSpiCard8readDataEPhj>
 8085ae0:	4605      	mov	r5, r0
 8085ae2:	2800      	cmp	r0, #0
 8085ae4:	d0f1      	beq.n	8085aca <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  chipSelectHigh();
 8085ae6:	4620      	mov	r0, r4
 8085ae8:	f7ff feb6 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8085aec:	4628      	mov	r0, r5
 8085aee:	bd38      	pop	{r3, r4, r5, pc}

08085af0 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085af0:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8085af2:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085af4:	460a      	mov	r2, r1
  if (type() != SD_CARD_TYPE_SDHC) {
 8085af6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085af8:	bf18      	it	ne
 8085afa:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
 8085afc:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085afe:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
 8085b00:	f7ff ff11 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
 8085b04:	b130      	cbz	r0, 8085b14 <_ZN9SdSpiCard9readStartEm+0x24>
 8085b06:	2305      	movs	r3, #5
  chipSelectHigh();
 8085b08:	4620      	mov	r0, r4
 8085b0a:	71a3      	strb	r3, [r4, #6]
 8085b0c:	f7ff fea4 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085b10:	2000      	movs	r0, #0
}
 8085b12:	bd10      	pop	{r4, pc}
  return true;
 8085b14:	2001      	movs	r0, #1
 8085b16:	e7fc      	b.n	8085b12 <_ZN9SdSpiCard9readStartEm+0x22>

08085b18 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
 8085b18:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8085b1a:	2200      	movs	r2, #0
 8085b1c:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
 8085b1e:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8085b20:	f7ff ff01 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
 8085b24:	b130      	cbz	r0, 8085b34 <_ZN9SdSpiCard8readStopEv+0x1c>
 8085b26:	2303      	movs	r3, #3
  chipSelectHigh();
 8085b28:	4620      	mov	r0, r4
 8085b2a:	71a3      	strb	r3, [r4, #6]
 8085b2c:	f7ff fe94 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085b30:	2000      	movs	r0, #0
}
 8085b32:	bd10      	pop	{r4, pc}
  chipSelectHigh();
 8085b34:	4620      	mov	r0, r4
 8085b36:	f7ff fe8f 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8085b3a:	2001      	movs	r0, #1
 8085b3c:	e7f9      	b.n	8085b32 <_ZN9SdSpiCard8readStopEv+0x1a>

08085b3e <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8085b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085b40:	4604      	mov	r4, r0
 8085b42:	4616      	mov	r6, r2
 8085b44:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8085b46:	f7ff ffd3 	bl	8085af0 <_ZN9SdSpiCard9readStartEm>
 8085b4a:	b168      	cbz	r0, 8085b68 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
 8085b4c:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8085b4e:	b2ab      	uxth	r3, r5
 8085b50:	42bb      	cmp	r3, r7
 8085b52:	eb06 2145 	add.w	r1, r6, r5, lsl #9
 8085b56:	d209      	bcs.n	8085b6c <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
 8085b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085b5c:	4620      	mov	r0, r4
 8085b5e:	f7ff fe9e 	bl	808589e <_ZN9SdSpiCard8readDataEPhj>
 8085b62:	3501      	adds	r5, #1
 8085b64:	2800      	cmp	r0, #0
 8085b66:	d1f2      	bne.n	8085b4e <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
 8085b68:	2000      	movs	r0, #0
 8085b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
 8085b6c:	4620      	mov	r0, r4
}
 8085b6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
 8085b72:	f7ff bfd1 	b.w	8085b18 <_ZN9SdSpiCard8readStopEv>

08085b76 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8085b76:	b538      	push	{r3, r4, r5, lr}
 8085b78:	4604      	mov	r4, r0
 8085b7a:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8085b7c:	6800      	ldr	r0, [r0, #0]
 8085b7e:	f7ff fe68 	bl	8085852 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(src, 512);
 8085b82:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8085b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085b88:	6803      	ldr	r3, [r0, #0]
 8085b8a:	4629      	mov	r1, r5
 8085b8c:	699b      	ldr	r3, [r3, #24]
 8085b8e:	4798      	blx	r3
  spiSend(crc >> 8);
 8085b90:	21ff      	movs	r1, #255	; 0xff
 8085b92:	6820      	ldr	r0, [r4, #0]
 8085b94:	f7ff fe5d 	bl	8085852 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
 8085b98:	21ff      	movs	r1, #255	; 0xff
 8085b9a:	6820      	ldr	r0, [r4, #0]
 8085b9c:	f7ff fe59 	bl	8085852 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
 8085ba0:	6820      	ldr	r0, [r4, #0]
 8085ba2:	f7ff fe53 	bl	808584c <_ZN9SdSpiCard10spiReceiveEv.isra.0>
 8085ba6:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8085ba8:	f000 001f 	and.w	r0, r0, #31
 8085bac:	2805      	cmp	r0, #5
 8085bae:	d006      	beq.n	8085bbe <_ZN9SdSpiCard9writeDataEhPKh+0x48>
    m_errorCode = code;
 8085bb0:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8085bb2:	4620      	mov	r0, r4
 8085bb4:	71a3      	strb	r3, [r4, #6]
 8085bb6:	f7ff fe4f 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085bba:	2000      	movs	r0, #0
}
 8085bbc:	bd38      	pop	{r3, r4, r5, pc}
  return true;
 8085bbe:	2001      	movs	r0, #1
 8085bc0:	e7fc      	b.n	8085bbc <_ZN9SdSpiCard9writeDataEhPKh+0x46>

08085bc2 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085bc2:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
 8085bc4:	7a43      	ldrb	r3, [r0, #9]
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085bc6:	4615      	mov	r5, r2
  if (type() != SD_CARD_TYPE_SDHC) {
 8085bc8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085bca:	bf18      	it	ne
 8085bcc:	0249      	lslne	r1, r1, #9
  if (cardCommand(CMD24, blockNumber)) {
 8085bce:	460a      	mov	r2, r1
 8085bd0:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085bd2:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
 8085bd4:	f7ff fea7 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
 8085bd8:	b130      	cbz	r0, 8085be8 <_ZN9SdSpiCard10writeBlockEmPKh+0x26>
 8085bda:	2306      	movs	r3, #6
 8085bdc:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8085bde:	4620      	mov	r0, r4
 8085be0:	f7ff fe3a 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085be4:	2500      	movs	r5, #0
 8085be6:	e00a      	b.n	8085bfe <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
  if (!writeData(DATA_START_BLOCK, src)) {
 8085be8:	462a      	mov	r2, r5
 8085bea:	21fe      	movs	r1, #254	; 0xfe
 8085bec:	4620      	mov	r0, r4
 8085bee:	f7ff ffc2 	bl	8085b76 <_ZN9SdSpiCard9writeDataEhPKh>
 8085bf2:	4605      	mov	r5, r0
 8085bf4:	2800      	cmp	r0, #0
 8085bf6:	d0f2      	beq.n	8085bde <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  chipSelectHigh();
 8085bf8:	4620      	mov	r0, r4
 8085bfa:	f7ff fe2d 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8085bfe:	4628      	mov	r0, r5
 8085c00:	bd38      	pop	{r3, r4, r5, pc}

08085c02 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
 8085c02:	b570      	push	{r4, r5, r6, lr}
 8085c04:	4604      	mov	r4, r0
 8085c06:	460e      	mov	r6, r1
  bool selected = m_selected;
 8085c08:	7905      	ldrb	r5, [r0, #4]
  chipSelectLow();
 8085c0a:	f7ff fe38 	bl	808587e <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085c0e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085c12:	4620      	mov	r0, r4
 8085c14:	f7ff fe73 	bl	80858fe <_ZN9SdSpiCard11waitNotBusyEt>
 8085c18:	b930      	cbnz	r0, 8085c28 <_ZN9SdSpiCard9writeDataEPKh+0x26>
 8085c1a:	2317      	movs	r3, #23
 8085c1c:	71a3      	strb	r3, [r4, #6]
  chipSelectHigh();
 8085c1e:	4620      	mov	r0, r4
 8085c20:	f7ff fe1a 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085c24:	2500      	movs	r5, #0
 8085c26:	e00c      	b.n	8085c42 <_ZN9SdSpiCard9writeDataEPKh+0x40>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8085c28:	4632      	mov	r2, r6
 8085c2a:	21fc      	movs	r1, #252	; 0xfc
 8085c2c:	4620      	mov	r0, r4
 8085c2e:	f7ff ffa2 	bl	8085b76 <_ZN9SdSpiCard9writeDataEhPKh>
 8085c32:	4606      	mov	r6, r0
 8085c34:	2800      	cmp	r0, #0
 8085c36:	d0f2      	beq.n	8085c1e <_ZN9SdSpiCard9writeDataEPKh+0x1c>
  if (!selected) {
 8085c38:	b91d      	cbnz	r5, 8085c42 <_ZN9SdSpiCard9writeDataEPKh+0x40>
    chipSelectHigh();
 8085c3a:	4620      	mov	r0, r4
 8085c3c:	f7ff fe0c 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8085c40:	4635      	mov	r5, r6
}
 8085c42:	4628      	mov	r0, r5
 8085c44:	bd70      	pop	{r4, r5, r6, pc}

08085c46 <_ZN9SdSpiCard10writeStartEmm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 8085c46:	b570      	push	{r4, r5, r6, lr}
 8085c48:	4604      	mov	r4, r0
 8085c4a:	4616      	mov	r6, r2
 8085c4c:	460d      	mov	r5, r1
    cardCommand(CMD55, 0);
 8085c4e:	2200      	movs	r2, #0
 8085c50:	2137      	movs	r1, #55	; 0x37
 8085c52:	f7ff fe68 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8085c56:	4632      	mov	r2, r6
 8085c58:	2117      	movs	r1, #23
 8085c5a:	4620      	mov	r0, r4
 8085c5c:	f7ff fe63 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8085c60:	b130      	cbz	r0, 8085c70 <_ZN9SdSpiCard10writeStartEmm+0x2a>
    m_errorCode = code;
 8085c62:	2309      	movs	r3, #9
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8085c64:	4620      	mov	r0, r4
 8085c66:	71a3      	strb	r3, [r4, #6]
 8085c68:	f7ff fdf6 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085c6c:	2000      	movs	r0, #0
}
 8085c6e:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
 8085c70:	7a63      	ldrb	r3, [r4, #9]
  if (cardCommand(CMD25, blockNumber)) {
 8085c72:	2119      	movs	r1, #25
  if (type() != SD_CARD_TYPE_SDHC) {
 8085c74:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085c76:	bf18      	it	ne
 8085c78:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, blockNumber)) {
 8085c7a:	462a      	mov	r2, r5
 8085c7c:	4620      	mov	r0, r4
 8085c7e:	f7ff fe52 	bl	8085926 <_ZN9SdSpiCard11cardCommandEhm>
 8085c82:	b108      	cbz	r0, 8085c88 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8085c84:	2307      	movs	r3, #7
 8085c86:	e7ed      	b.n	8085c64 <_ZN9SdSpiCard10writeStartEmm+0x1e>
  return true;
 8085c88:	2001      	movs	r0, #1
 8085c8a:	e7f0      	b.n	8085c6e <_ZN9SdSpiCard10writeStartEmm+0x28>

08085c8c <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8085c8c:	b538      	push	{r3, r4, r5, lr}
 8085c8e:	4604      	mov	r4, r0
  chipSelectLow();
 8085c90:	f7ff fdf5 	bl	808587e <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085c94:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085c98:	4620      	mov	r0, r4
 8085c9a:	f7ff fe30 	bl	80858fe <_ZN9SdSpiCard11waitNotBusyEt>
 8085c9e:	b178      	cbz	r0, 8085cc0 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8085ca0:	21fd      	movs	r1, #253	; 0xfd
 8085ca2:	6820      	ldr	r0, [r4, #0]
 8085ca4:	f7ff fdd5 	bl	8085852 <_ZN9SdSpiCard7spiSendEh.isra.0>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085ca8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085cac:	4620      	mov	r0, r4
 8085cae:	f7ff fe26 	bl	80858fe <_ZN9SdSpiCard11waitNotBusyEt>
 8085cb2:	4605      	mov	r5, r0
 8085cb4:	b120      	cbz	r0, 8085cc0 <_ZN9SdSpiCard9writeStopEv+0x34>
    goto fail;
  }
  chipSelectHigh();
 8085cb6:	4620      	mov	r0, r4
 8085cb8:	f7ff fdce 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
 8085cbc:	4628      	mov	r0, r5
 8085cbe:	bd38      	pop	{r3, r4, r5, pc}
 8085cc0:	2312      	movs	r3, #18
  chipSelectHigh();
 8085cc2:	4620      	mov	r0, r4
 8085cc4:	71a3      	strb	r3, [r4, #6]
 8085cc6:	f7ff fdc7 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085cca:	2500      	movs	r5, #0
 8085ccc:	e7f6      	b.n	8085cbc <_ZN9SdSpiCard9writeStopEv+0x30>

08085cce <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8085cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085cd0:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 8085cd2:	461a      	mov	r2, r3
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8085cd4:	4604      	mov	r4, r0
 8085cd6:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8085cd8:	f7ff ffb5 	bl	8085c46 <_ZN9SdSpiCard10writeStartEmm>
 8085cdc:	b170      	cbz	r0, 8085cfc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 8085cde:	2500      	movs	r5, #0
 8085ce0:	42b5      	cmp	r5, r6
  return writeStop();
 8085ce2:	4620      	mov	r0, r4
 8085ce4:	eb07 2145 	add.w	r1, r7, r5, lsl #9
  for (size_t b = 0; b < count; b++, src += 512) {
 8085ce8:	d004      	beq.n	8085cf4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8085cea:	f7ff ff8a 	bl	8085c02 <_ZN9SdSpiCard9writeDataEPKh>
 8085cee:	b128      	cbz	r0, 8085cfc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
  for (size_t b = 0; b < count; b++, src += 512) {
 8085cf0:	3501      	adds	r5, #1
 8085cf2:	e7f5      	b.n	8085ce0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
}
 8085cf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
 8085cf8:	f7ff bfc8 	b.w	8085c8c <_ZN9SdSpiCard9writeStopEv>
  chipSelectHigh();
 8085cfc:	4620      	mov	r0, r4
 8085cfe:	f7ff fdab 	bl	8085858 <_ZN9SdSpiCard14chipSelectHighEv>
}
 8085d02:	2000      	movs	r0, #0
 8085d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08085d08 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8085d08:	2201      	movs	r2, #1
 8085d0a:	4b01      	ldr	r3, [pc, #4]	; (8085d10 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8085d0c:	701a      	strb	r2, [r3, #0]
}
 8085d0e:	4770      	bx	lr
 8085d10:	20001cbc 	.word	0x20001cbc

08085d14 <_ZN5SdSpi14endTransactionEv>:
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
}
 8085d14:	4770      	bx	lr
	...

08085d18 <_ZN5SdSpi5beginEh>:
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8085d18:	7902      	ldrb	r2, [r0, #4]
 8085d1a:	4b02      	ldr	r3, [pc, #8]	; (8085d24 <_ZN5SdSpi5beginEh+0xc>)
 8085d1c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8085d20:	f001 bede 	b.w	8087ae0 <_ZN8SPIClass5beginEt>
 8085d24:	20001cc0 	.word	0x20001cc0

08085d28 <_ZN5SdSpi16beginTransactionEh>:
void SdSpi::beginTransaction(uint8_t divisor) {
 8085d28:	b570      	push	{r4, r5, r6, lr}
 8085d2a:	4605      	mov	r5, r0
 8085d2c:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8085d2e:	7903      	ldrb	r3, [r0, #4]
 8085d30:	4e19      	ldr	r6, [pc, #100]	; (8085d98 <_ZN5SdSpi16beginTransactionEh+0x70>)
 8085d32:	2101      	movs	r1, #1
 8085d34:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8085d38:	f001 fee0 	bl	8087afc <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8085d3c:	792b      	ldrb	r3, [r5, #4]
 8085d3e:	2100      	movs	r1, #0
 8085d40:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8085d44:	f001 fee8 	bl	8087b18 <_ZN8SPIClass11setDataModeEh>
  if (divisor <= 2) {
 8085d48:	2c02      	cmp	r4, #2
 8085d4a:	d91b      	bls.n	8085d84 <_ZN5SdSpi16beginTransactionEh+0x5c>
  } else  if (divisor <= 4) {
 8085d4c:	2c04      	cmp	r4, #4
 8085d4e:	d91b      	bls.n	8085d88 <_ZN5SdSpi16beginTransactionEh+0x60>
  } else  if (divisor <= 8) {
 8085d50:	2c08      	cmp	r4, #8
 8085d52:	d91b      	bls.n	8085d8c <_ZN5SdSpi16beginTransactionEh+0x64>
  } else  if (divisor <= 16) {
 8085d54:	2c10      	cmp	r4, #16
 8085d56:	d91b      	bls.n	8085d90 <_ZN5SdSpi16beginTransactionEh+0x68>
  } else  if (divisor <= 32) {
 8085d58:	2c20      	cmp	r4, #32
 8085d5a:	d91b      	bls.n	8085d94 <_ZN5SdSpi16beginTransactionEh+0x6c>
    v = SPI_CLOCK_DIV128;
 8085d5c:	2c41      	cmp	r4, #65	; 0x41
 8085d5e:	bf34      	ite	cc
 8085d60:	2128      	movcc	r1, #40	; 0x28
 8085d62:	2130      	movcs	r1, #48	; 0x30
  spiPtr[m_spiIf]->setClockDivider(v);
 8085d64:	792b      	ldrb	r3, [r5, #4]
 8085d66:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
 8085d6a:	f001 ff25 	bl	8087bb8 <_ZN8SPIClass15setClockDividerEh>
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 8085d6e:	7929      	ldrb	r1, [r5, #4]
 8085d70:	233c      	movs	r3, #60	; 0x3c
 8085d72:	fb01 4404 	mla	r4, r1, r4, r4
 8085d76:	2118      	movs	r1, #24
 8085d78:	434c      	muls	r4, r1
 8085d7a:	fbb4 f4f3 	udiv	r4, r4, r3
 8085d7e:	4b07      	ldr	r3, [pc, #28]	; (8085d9c <_ZN5SdSpi16beginTransactionEh+0x74>)
 8085d80:	601c      	str	r4, [r3, #0]
}
 8085d82:	bd70      	pop	{r4, r5, r6, pc}
    v = SPI_CLOCK_DIV2;
 8085d84:	2100      	movs	r1, #0
 8085d86:	e7ed      	b.n	8085d64 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV4;
 8085d88:	2108      	movs	r1, #8
 8085d8a:	e7eb      	b.n	8085d64 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV8;
 8085d8c:	2110      	movs	r1, #16
 8085d8e:	e7e9      	b.n	8085d64 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV16;
 8085d90:	2118      	movs	r1, #24
 8085d92:	e7e7      	b.n	8085d64 <_ZN5SdSpi16beginTransactionEh+0x3c>
    v = SPI_CLOCK_DIV32;
 8085d94:	2120      	movs	r1, #32
 8085d96:	e7e5      	b.n	8085d64 <_ZN5SdSpi16beginTransactionEh+0x3c>
 8085d98:	20001cc0 	.word	0x20001cc0
 8085d9c:	20001ccc 	.word	0x20001ccc

08085da0 <_ZN5SdSpi7receiveEv>:
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8085da0:	7902      	ldrb	r2, [r0, #4]
 8085da2:	4b03      	ldr	r3, [pc, #12]	; (8085db0 <_ZN5SdSpi7receiveEv+0x10>)
 8085da4:	21ff      	movs	r1, #255	; 0xff
 8085da6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8085daa:	f001 bf29 	b.w	8087c00 <_ZN8SPIClass8transferEh>
 8085dae:	bf00      	nop
 8085db0:	20001cc0 	.word	0x20001cc0

08085db4 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8085db4:	7902      	ldrb	r2, [r0, #4]
 8085db6:	4b02      	ldr	r3, [pc, #8]	; (8085dc0 <_ZN5SdSpi4sendEh+0xc>)
 8085db8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8085dbc:	f001 bf20 	b.w	8087c00 <_ZN8SPIClass8transferEh>
 8085dc0:	20001cc0 	.word	0x20001cc0

08085dc4 <_ZN5SdSpi7receiveEPhj>:
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8085dc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8085dc6:	460e      	mov	r6, r1
  SPI_DMA_TransferCompleted = false;
 8085dc8:	2100      	movs	r1, #0
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8085dca:	4613      	mov	r3, r2
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085dcc:	4a0a      	ldr	r2, [pc, #40]	; (8085df8 <_ZN5SdSpi7receiveEPhj+0x34>)
 8085dce:	7905      	ldrb	r5, [r0, #4]
 8085dd0:	480a      	ldr	r0, [pc, #40]	; (8085dfc <_ZN5SdSpi7receiveEPhj+0x38>)
 8085dd2:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
 8085dd4:	4c0a      	ldr	r4, [pc, #40]	; (8085e00 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085dd6:	4632      	mov	r2, r6
 8085dd8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  SPI_DMA_TransferCompleted = false;
 8085ddc:	7021      	strb	r1, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085dde:	f001 ff15 	bl	8087c0c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8085de2:	7823      	ldrb	r3, [r4, #0]
 8085de4:	2b00      	cmp	r3, #0
 8085de6:	d0fc      	beq.n	8085de2 <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8085de8:	4b06      	ldr	r3, [pc, #24]	; (8085e04 <_ZN5SdSpi7receiveEPhj+0x40>)
 8085dea:	6818      	ldr	r0, [r3, #0]
 8085dec:	b108      	cbz	r0, 8085df2 <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8085dee:	f001 f9f5 	bl	80871dc <HAL_Delay_Microseconds>
}
 8085df2:	2000      	movs	r0, #0
 8085df4:	b002      	add	sp, #8
 8085df6:	bd70      	pop	{r4, r5, r6, pc}
 8085df8:	08085d09 	.word	0x08085d09
 8085dfc:	20001cc0 	.word	0x20001cc0
 8085e00:	20001cbc 	.word	0x20001cbc
 8085e04:	20001ccc 	.word	0x20001ccc

08085e08 <_ZN5SdSpi4sendEPKhj>:
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8085e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085e0a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
 8085e0c:	2200      	movs	r2, #0

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8085e0e:	7905      	ldrb	r5, [r0, #4]
 8085e10:	480a      	ldr	r0, [pc, #40]	; (8085e3c <_ZN5SdSpi4sendEPKhj+0x34>)
  SPI_DMA_TransferCompleted = false;
 8085e12:	4c0b      	ldr	r4, [pc, #44]	; (8085e40 <_ZN5SdSpi4sendEPKhj+0x38>)
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8085e14:	9000      	str	r0, [sp, #0]
 8085e16:	480b      	ldr	r0, [pc, #44]	; (8085e44 <_ZN5SdSpi4sendEPKhj+0x3c>)
  SPI_DMA_TransferCompleted = false;
 8085e18:	7022      	strb	r2, [r4, #0]
  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8085e1a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8085e1e:	f001 fef5 	bl	8087c0c <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
 8085e22:	7823      	ldrb	r3, [r4, #0]
 8085e24:	2b00      	cmp	r3, #0
 8085e26:	d0fc      	beq.n	8085e22 <_ZN5SdSpi4sendEPKhj+0x1a>
  if (bugDelay) {
 8085e28:	4b07      	ldr	r3, [pc, #28]	; (8085e48 <_ZN5SdSpi4sendEPKhj+0x40>)
 8085e2a:	6818      	ldr	r0, [r3, #0]
 8085e2c:	b120      	cbz	r0, 8085e38 <_ZN5SdSpi4sendEPKhj+0x30>
    delayMicroseconds(bugDelay);
  }
}
 8085e2e:	b003      	add	sp, #12
 8085e30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8085e34:	f001 b9d2 	b.w	80871dc <HAL_Delay_Microseconds>
 8085e38:	b003      	add	sp, #12
 8085e3a:	bd30      	pop	{r4, r5, pc}
 8085e3c:	08085d09 	.word	0x08085d09
 8085e40:	20001cbc 	.word	0x20001cbc
 8085e44:	20001cc0 	.word	0x20001cc0
 8085e48:	20001ccc 	.word	0x20001ccc

08085e4c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 8085e4c:	b510      	push	{r4, lr}
 8085e4e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 8085e50:	6880      	ldr	r0, [r0, #8]
 8085e52:	b108      	cbz	r0, 8085e58 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 8085e54:	f001 fa1a 	bl	808728c <os_mutex_recursive_destroy>
 8085e58:	4620      	mov	r0, r4
 8085e5a:	bd10      	pop	{r4, pc}

08085e5c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8085e5c:	b538      	push	{r3, r4, r5, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 8085e5e:	4d25      	ldr	r5, [pc, #148]	; (8085ef4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x98>)
 8085e60:	7829      	ldrb	r1, [r5, #0]
 8085e62:	f3bf 8f5b 	dmb	ish
 8085e66:	f011 0401 	ands.w	r4, r1, #1
 8085e6a:	d10f      	bne.n	8085e8c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x30>
 8085e6c:	4628      	mov	r0, r5
 8085e6e:	f7fa f932 	bl	80800d6 <__cxa_guard_acquire>
 8085e72:	b158      	cbz	r0, 8085e8c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x30>
 8085e74:	4621      	mov	r1, r4
 8085e76:	4820      	ldr	r0, [pc, #128]	; (8085ef8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 8085e78:	f001 fe23 	bl	8087ac2 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8085e7c:	4628      	mov	r0, r5
 8085e7e:	f7fa f92f 	bl	80800e0 <__cxa_guard_release>
 8085e82:	4a1e      	ldr	r2, [pc, #120]	; (8085efc <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 8085e84:	491e      	ldr	r1, [pc, #120]	; (8085f00 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8085e86:	481c      	ldr	r0, [pc, #112]	; (8085ef8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 8085e88:	f003 fe46 	bl	8089b18 <__aeabi_atexit>
};
 8085e8c:	4b1a      	ldr	r3, [pc, #104]	; (8085ef8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x9c>)
 8085e8e:	4c1d      	ldr	r4, [pc, #116]	; (8085f04 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa8>)
 8085e90:	4d1d      	ldr	r5, [pc, #116]	; (8085f08 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xac>)
 8085e92:	6023      	str	r3, [r4, #0]
 8085e94:	782b      	ldrb	r3, [r5, #0]
 8085e96:	f3bf 8f5b 	dmb	ish
 8085e9a:	07da      	lsls	r2, r3, #31
 8085e9c:	d40f      	bmi.n	8085ebe <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x62>
 8085e9e:	4628      	mov	r0, r5
 8085ea0:	f7fa f919 	bl	80800d6 <__cxa_guard_acquire>
 8085ea4:	b158      	cbz	r0, 8085ebe <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x62>
 8085ea6:	2101      	movs	r1, #1
 8085ea8:	4818      	ldr	r0, [pc, #96]	; (8085f0c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8085eaa:	f001 fe0a 	bl	8087ac2 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8085eae:	4628      	mov	r0, r5
 8085eb0:	f7fa f916 	bl	80800e0 <__cxa_guard_release>
 8085eb4:	4a11      	ldr	r2, [pc, #68]	; (8085efc <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 8085eb6:	4912      	ldr	r1, [pc, #72]	; (8085f00 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8085eb8:	4814      	ldr	r0, [pc, #80]	; (8085f0c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8085eba:	f003 fe2d 	bl	8089b18 <__aeabi_atexit>
 8085ebe:	4b13      	ldr	r3, [pc, #76]	; (8085f0c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb0>)
 8085ec0:	4d13      	ldr	r5, [pc, #76]	; (8085f10 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb4>)
 8085ec2:	6063      	str	r3, [r4, #4]
 8085ec4:	782b      	ldrb	r3, [r5, #0]
 8085ec6:	f3bf 8f5b 	dmb	ish
 8085eca:	07db      	lsls	r3, r3, #31
 8085ecc:	d40f      	bmi.n	8085eee <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x92>
 8085ece:	4628      	mov	r0, r5
 8085ed0:	f7fa f901 	bl	80800d6 <__cxa_guard_acquire>
 8085ed4:	b158      	cbz	r0, 8085eee <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0x92>
 8085ed6:	2102      	movs	r1, #2
 8085ed8:	480e      	ldr	r0, [pc, #56]	; (8085f14 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8085eda:	f001 fdf2 	bl	8087ac2 <_ZN8SPIClassC1E19hal_spi_interface_t>
 8085ede:	4628      	mov	r0, r5
 8085ee0:	f7fa f8fe 	bl	80800e0 <__cxa_guard_release>
 8085ee4:	4a05      	ldr	r2, [pc, #20]	; (8085efc <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa0>)
 8085ee6:	4906      	ldr	r1, [pc, #24]	; (8085f00 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xa4>)
 8085ee8:	480a      	ldr	r0, [pc, #40]	; (8085f14 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8085eea:	f003 fe15 	bl	8089b18 <__aeabi_atexit>
 8085eee:	4b09      	ldr	r3, [pc, #36]	; (8085f14 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv+0xb8>)
 8085ef0:	60a3      	str	r3, [r4, #8]
}
 8085ef2:	bd38      	pop	{r3, r4, r5, pc}
 8085ef4:	20001cac 	.word	0x20001cac
 8085ef8:	20001cb0 	.word	0x20001cb0
 8085efc:	200002b0 	.word	0x200002b0
 8085f00:	08085e4d 	.word	0x08085e4d
 8085f04:	20001cc0 	.word	0x20001cc0
 8085f08:	20001c9c 	.word	0x20001c9c
 8085f0c:	20001ca0 	.word	0x20001ca0
 8085f10:	20001c8c 	.word	0x20001c8c
 8085f14:	20001c90 	.word	0x20001c90

08085f18 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8085f18:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8085f1a:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
 8085f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8085f20:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8085f22:	f100 0210 	add.w	r2, r0, #16
 8085f26:	6880      	ldr	r0, [r0, #8]
 8085f28:	f000 bbed 	b.w	8086706 <_ZN9FatVolume15allocateClusterEmPm>

08085f2c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8085f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8085f30:	7801      	ldrb	r1, [r0, #0]
bool FatFile::addDirCluster() {
 8085f32:	4604      	mov	r4, r0
  if (isRootFixed()) {
 8085f34:	f011 0520 	ands.w	r5, r1, #32
 8085f38:	d003      	beq.n	8085f42 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8085f3a:	2600      	movs	r6, #0
}
 8085f3c:	4630      	mov	r0, r6
 8085f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
 8085f42:	6942      	ldr	r2, [r0, #20]
 8085f44:	4b17      	ldr	r3, [pc, #92]	; (8085fa4 <_ZN7FatFile13addDirClusterEv+0x78>)
 8085f46:	429a      	cmp	r2, r3
 8085f48:	d2f7      	bcs.n	8085f3a <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
 8085f4a:	f7ff ffe5 	bl	8085f18 <_ZN7FatFile10addClusterEv>
 8085f4e:	4606      	mov	r6, r0
 8085f50:	2800      	cmp	r0, #0
 8085f52:	d0f2      	beq.n	8085f3a <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterStartBlock(m_curCluster);
 8085f54:	6921      	ldr	r1, [r4, #16]
 8085f56:	68a0      	ldr	r0, [r4, #8]
 8085f58:	f000 fb76 	bl	8086648 <_ZNK9FatVolume17clusterStartBlockEm>
 8085f5c:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
 8085f5e:	68a0      	ldr	r0, [r4, #8]
 8085f60:	2205      	movs	r2, #5
 8085f62:	4639      	mov	r1, r7
 8085f64:	3028      	adds	r0, #40	; 0x28
 8085f66:	f000 fb4c 	bl	8086602 <_ZN8FatCache4readEmh>
  if (!pc) {
 8085f6a:	4680      	mov	r8, r0
 8085f6c:	2800      	cmp	r0, #0
 8085f6e:	d0e4      	beq.n	8085f3a <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
 8085f70:	4629      	mov	r1, r5
 8085f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085f76:	f004 ff0d 	bl	808ad94 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8085f7a:	2501      	movs	r5, #1
 8085f7c:	68a0      	ldr	r0, [r4, #8]
 8085f7e:	7902      	ldrb	r2, [r0, #4]
 8085f80:	42aa      	cmp	r2, r5
 8085f82:	d909      	bls.n	8085f98 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8085f84:	6803      	ldr	r3, [r0, #0]
 8085f86:	4642      	mov	r2, r8
 8085f88:	685b      	ldr	r3, [r3, #4]
 8085f8a:	19e9      	adds	r1, r5, r7
 8085f8c:	4798      	blx	r3
 8085f8e:	2800      	cmp	r0, #0
 8085f90:	d0d3      	beq.n	8085f3a <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8085f92:	3501      	adds	r5, #1
 8085f94:	b2ed      	uxtb	r5, r5
 8085f96:	e7f1      	b.n	8085f7c <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8085f98:	6963      	ldr	r3, [r4, #20]
 8085f9a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 8085f9e:	6163      	str	r3, [r4, #20]
  return true;
 8085fa0:	e7cc      	b.n	8085f3c <_ZN7FatFile13addDirClusterEv+0x10>
 8085fa2:	bf00      	nop
 8085fa4:	001ffe00 	.word	0x001ffe00

08085fa8 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8085fa8:	b510      	push	{r4, lr}
 8085faa:	4604      	mov	r4, r0
 8085fac:	6880      	ldr	r0, [r0, #8]
 8085fae:	460a      	mov	r2, r1
 8085fb0:	3028      	adds	r0, #40	; 0x28
 8085fb2:	69a1      	ldr	r1, [r4, #24]
 8085fb4:	f000 fb25 	bl	8086602 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8085fb8:	b120      	cbz	r0, 8085fc4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8085fba:	88a3      	ldrh	r3, [r4, #4]
 8085fbc:	f003 030f 	and.w	r3, r3, #15
 8085fc0:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8085fc4:	bd10      	pop	{r4, pc}

08085fc6 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8085fc6:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8085fc8:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
 8085fca:	4605      	mov	r5, r0
 8085fcc:	460e      	mov	r6, r1
  if (isOpen()) {
 8085fce:	b94c      	cbnz	r4, 8085fe4 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8085fd0:	2224      	movs	r2, #36	; 0x24
 8085fd2:	4621      	mov	r1, r4
 8085fd4:	f004 fede 	bl	808ad94 <memset>

  m_vol = vol;
 8085fd8:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8085fda:	79f3      	ldrb	r3, [r6, #7]
 8085fdc:	2b10      	cmp	r3, #16
 8085fde:	d003      	beq.n	8085fe8 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8085fe0:	2b20      	cmp	r3, #32
 8085fe2:	d007      	beq.n	8085ff4 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = O_READ;
  return true;

fail:
  return false;
 8085fe4:	2000      	movs	r0, #0
 8085fe6:	e004      	b.n	8085ff2 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
 8085fe8:	2320      	movs	r3, #32
  m_flags = O_READ;
 8085fea:	2401      	movs	r4, #1
  return true;
 8085fec:	4620      	mov	r0, r4
    m_attr = FILE_ATTR_ROOT32;
 8085fee:	702b      	strb	r3, [r5, #0]
  m_flags = O_READ;
 8085ff0:	70ac      	strb	r4, [r5, #2]
}
 8085ff2:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
 8085ff4:	2340      	movs	r3, #64	; 0x40
 8085ff6:	e7f8      	b.n	8085fea <_ZN7FatFile8openRootEP9FatVolume+0x24>

08085ff8 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8085ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8085ffc:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
 8085ffe:	4604      	mov	r4, r0
 8086000:	4688      	mov	r8, r1
 8086002:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & O_READ)) {
 8086004:	2b00      	cmp	r3, #0
 8086006:	d05d      	beq.n	80860c4 <_ZN7FatFile4readEPvj+0xcc>
 8086008:	7882      	ldrb	r2, [r0, #2]
 808600a:	07d1      	lsls	r1, r2, #31
 808600c:	d55a      	bpl.n	80860c4 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 808600e:	071a      	lsls	r2, r3, #28
 8086010:	d52d      	bpl.n	808606e <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8086012:	69c3      	ldr	r3, [r0, #28]
 8086014:	6942      	ldr	r2, [r0, #20]
 8086016:	1a9b      	subs	r3, r3, r2
 8086018:	429d      	cmp	r5, r3
 808601a:	bf28      	it	cs
 808601c:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 808601e:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
 8086020:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8086024:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
 8086028:	2e00      	cmp	r6, #0
 808602a:	f000 8090 	beq.w	808614e <_ZN7FatFile4readEPvj+0x156>
    if (isRootFixed()) {
 808602e:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
 8086030:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8086032:	0697      	lsls	r7, r2, #26
 8086034:	68a0      	ldr	r0, [r4, #8]
    offset = m_curPosition & 0X1FF;  // offset in block
 8086036:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
 808603a:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 808603e:	d51f      	bpl.n	8086080 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8086040:	6a00      	ldr	r0, [r0, #32]
 8086042:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8086044:	68a0      	ldr	r0, [r4, #8]
 8086046:	f1ba 0f00 	cmp.w	sl, #0
 808604a:	d142      	bne.n	80860d2 <_ZN7FatFile4readEPvj+0xda>
 808604c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8086050:	d33f      	bcc.n	80860d2 <_ZN7FatFile4readEPvj+0xda>
    return m_cache.lbn();
 8086052:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8086054:	4291      	cmp	r1, r2
 8086056:	d03c      	beq.n	80860d2 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8086058:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 808605c:	d252      	bcs.n	8086104 <_ZN7FatFile4readEPvj+0x10c>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 808605e:	6803      	ldr	r3, [r0, #0]
 8086060:	4642      	mov	r2, r8
 8086062:	681b      	ldr	r3, [r3, #0]
 8086064:	4798      	blx	r3
 8086066:	b368      	cbz	r0, 80860c4 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
 8086068:	f44f 7700 	mov.w	r7, #512	; 0x200
 808606c:	e044      	b.n	80860f8 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
 808606e:	069b      	lsls	r3, r3, #26
 8086070:	d5d5      	bpl.n	808601e <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8086072:	6883      	ldr	r3, [r0, #8]
 8086074:	891a      	ldrh	r2, [r3, #8]
 8086076:	6943      	ldr	r3, [r0, #20]
 8086078:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
 808607c:	b29b      	uxth	r3, r3
 808607e:	e7cb      	b.n	8086018 <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8086080:	f890 9005 	ldrb.w	r9, [r0, #5]
 8086084:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
 8086088:	f1ba 0f00 	cmp.w	sl, #0
 808608c:	d108      	bne.n	80860a0 <_ZN7FatFile4readEPvj+0xa8>
 808608e:	f1b9 0f00 	cmp.w	r9, #0
 8086092:	d105      	bne.n	80860a0 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
 8086094:	b95b      	cbnz	r3, 80860ae <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8086096:	0653      	lsls	r3, r2, #25
 8086098:	bf4c      	ite	mi
 808609a:	6a03      	ldrmi	r3, [r0, #32]
 808609c:	6a23      	ldrpl	r3, [r4, #32]
 808609e:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80860a0:	6921      	ldr	r1, [r4, #16]
 80860a2:	68a0      	ldr	r0, [r4, #8]
 80860a4:	f000 fad0 	bl	8086648 <_ZNK9FatVolume17clusterStartBlockEm>
 80860a8:	eb09 0100 	add.w	r1, r9, r0
 80860ac:	e7ca      	b.n	8086044 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80860ae:	465a      	mov	r2, fp
 80860b0:	6921      	ldr	r1, [r4, #16]
 80860b2:	f000 facf 	bl	8086654 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 80860b6:	2800      	cmp	r0, #0
 80860b8:	db04      	blt.n	80860c4 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
 80860ba:	d1f1      	bne.n	80860a0 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
 80860bc:	7823      	ldrb	r3, [r4, #0]
 80860be:	f013 0f70 	tst.w	r3, #112	; 0x70
 80860c2:	d144      	bne.n	808614e <_ZN7FatFile4readEPvj+0x156>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80860c4:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80860c6:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
 80860ca:	f043 0302 	orr.w	r3, r3, #2
 80860ce:	7063      	strb	r3, [r4, #1]
  return -1;
 80860d0:	e03e      	b.n	8086150 <_ZN7FatFile4readEPvj+0x158>
      n = 512 - offset;
 80860d2:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
 80860d6:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
 80860d8:	f04f 0200 	mov.w	r2, #0
 80860dc:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80860e0:	bf28      	it	cs
 80860e2:	4637      	movcs	r7, r6
 80860e4:	f000 fa8d 	bl	8086602 <_ZN8FatCache4readEmh>
      if (!pc) {
 80860e8:	2800      	cmp	r0, #0
 80860ea:	d0eb      	beq.n	80860c4 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
 80860ec:	eb00 010a 	add.w	r1, r0, sl
 80860f0:	463a      	mov	r2, r7
 80860f2:	4640      	mov	r0, r8
 80860f4:	f004 fe26 	bl	808ad44 <memcpy>
    m_curPosition += n;
 80860f8:	6963      	ldr	r3, [r4, #20]
    dst += n;
 80860fa:	44b8      	add	r8, r7
    m_curPosition += n;
 80860fc:	443b      	add	r3, r7
 80860fe:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8086100:	1bf6      	subs	r6, r6, r7
  while (toRead) {
 8086102:	e791      	b.n	8086028 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
 8086104:	7827      	ldrb	r7, [r4, #0]
      uint8_t nb = toRead >> 9;
 8086106:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 808610a:	06bf      	lsls	r7, r7, #26
 808610c:	d406      	bmi.n	808611c <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 808610e:	7907      	ldrb	r7, [r0, #4]
 8086110:	eba7 0709 	sub.w	r7, r7, r9
 8086114:	b2ff      	uxtb	r7, r7
 8086116:	42bb      	cmp	r3, r7
 8086118:	bf28      	it	cs
 808611a:	463b      	movcs	r3, r7
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808611c:	4291      	cmp	r1, r2
      n = 512*nb;
 808611e:	ea4f 2743 	mov.w	r7, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8086122:	d208      	bcs.n	8086136 <_ZN7FatFile4readEPvj+0x13e>
      if (!m_vol->readBlocks(block, dst, nb)) {
 8086124:	68a0      	ldr	r0, [r4, #8]
 8086126:	6802      	ldr	r2, [r0, #0]
 8086128:	f8d2 a008 	ldr.w	sl, [r2, #8]
 808612c:	4642      	mov	r2, r8
 808612e:	47d0      	blx	sl
 8086130:	2800      	cmp	r0, #0
 8086132:	d1e1      	bne.n	80860f8 <_ZN7FatFile4readEPvj+0x100>
 8086134:	e7c6      	b.n	80860c4 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8086136:	441a      	add	r2, r3
 8086138:	428a      	cmp	r2, r1
 808613a:	d9f3      	bls.n	8086124 <_ZN7FatFile4readEPvj+0x12c>
 808613c:	e9cd 1300 	strd	r1, r3, [sp]
        if (!m_vol->cacheSync()) {
 8086140:	f7ff f874 	bl	808522c <_ZN9FatVolume9cacheSyncEv>
 8086144:	e9dd 1300 	ldrd	r1, r3, [sp]
 8086148:	2800      	cmp	r0, #0
 808614a:	d1eb      	bne.n	8086124 <_ZN7FatFile4readEPvj+0x12c>
 808614c:	e7ba      	b.n	80860c4 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
 808614e:	1ba8      	subs	r0, r5, r6
}
 8086150:	b003      	add	sp, #12
 8086152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08086156 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
 8086156:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
 8086158:	2201      	movs	r2, #1
  pos->cluster = m_curCluster;
 808615a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 808615e:	f10d 0107 	add.w	r1, sp, #7
int FatFile::peek() {
 8086162:	4604      	mov	r4, r0
 8086164:	f7ff ff48 	bl	8085ff8 <_ZN7FatFile4readEPvj>
 8086168:	2801      	cmp	r0, #1
 808616a:	bf12      	itee	ne
 808616c:	f04f 30ff 	movne.w	r0, #4294967295
 8086170:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
 8086174:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
 8086178:	b002      	add	sp, #8
 808617a:	bd70      	pop	{r4, r5, r6, pc}

0808617c <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
 808617c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
 808617e:	6943      	ldr	r3, [r0, #20]
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8086180:	4604      	mov	r4, r0
  if (i == 0 || !skipReadOk) {
 8086182:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8086186:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
 808618a:	d000      	beq.n	808618e <_ZN7FatFile12readDirCacheEb+0x12>
 808618c:	b999      	cbnz	r1, 80861b6 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
 808618e:	2201      	movs	r2, #1
 8086190:	4620      	mov	r0, r4
 8086192:	f10d 0107 	add.w	r1, sp, #7
 8086196:	f7ff ff2f 	bl	8085ff8 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
 808619a:	b240      	sxtb	r0, r0
 808619c:	2801      	cmp	r0, #1
 808619e:	d002      	beq.n	80861a6 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
 80861a0:	2000      	movs	r0, #0
}
 80861a2:	b003      	add	sp, #12
 80861a4:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
 80861a6:	6963      	ldr	r3, [r4, #20]
 80861a8:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
 80861aa:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
 80861ac:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
 80861ae:	3034      	adds	r0, #52	; 0x34
 80861b0:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 80861b4:	e7f5      	b.n	80861a2 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
 80861b6:	3320      	adds	r3, #32
 80861b8:	e7f7      	b.n	80861aa <_ZN7FatFile12readDirCacheEb+0x2e>

080861ba <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
 80861ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
 80861be:	7802      	ldrb	r2, [r0, #0]
bool FatFile::seekSet(uint32_t pos) {
 80861c0:	4604      	mov	r4, r0
 80861c2:	460d      	mov	r5, r1
  uint32_t tmp = m_curCluster;
 80861c4:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
 80861c6:	b162      	cbz	r2, 80861e2 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
 80861c8:	6940      	ldr	r0, [r0, #20]
 80861ca:	4288      	cmp	r0, r1
 80861cc:	d002      	beq.n	80861d4 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
 80861ce:	b919      	cbnz	r1, 80861d8 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
 80861d0:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
 80861d2:	6165      	str	r5, [r4, #20]
    return true;
 80861d4:	2001      	movs	r0, #1
 80861d6:	e006      	b.n	80861e6 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
 80861d8:	0716      	lsls	r6, r2, #28
 80861da:	d506      	bpl.n	80861ea <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
 80861dc:	69e3      	ldr	r3, [r4, #28]
 80861de:	428b      	cmp	r3, r1
 80861e0:	d20b      	bcs.n	80861fa <_ZN7FatFile7seekSetEm+0x40>
  return false;
 80861e2:	2000      	movs	r0, #0
  m_curCluster = tmp;
 80861e4:	6127      	str	r7, [r4, #16]
}
 80861e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
 80861ea:	0691      	lsls	r1, r2, #26
 80861ec:	d505      	bpl.n	80861fa <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 80861ee:	68a3      	ldr	r3, [r4, #8]
 80861f0:	891b      	ldrh	r3, [r3, #8]
 80861f2:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
 80861f6:	d9ec      	bls.n	80861d2 <_ZN7FatFile7seekSetEm+0x18>
 80861f8:	e7f3      	b.n	80861e2 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80861fa:	f8d4 c008 	ldr.w	ip, [r4, #8]
 80861fe:	1e43      	subs	r3, r0, #1
 8086200:	f89c 6006 	ldrb.w	r6, [ip, #6]
 8086204:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8086208:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 808620a:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 808620c:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
 808620e:	42b3      	cmp	r3, r6
 8086210:	d800      	bhi.n	8086214 <_ZN7FatFile7seekSetEm+0x5a>
 8086212:	b998      	cbnz	r0, 808623c <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8086214:	0653      	lsls	r3, r2, #25
 8086216:	bf4c      	ite	mi
 8086218:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
 808621c:	6a23      	ldrpl	r3, [r4, #32]
 808621e:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8086220:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
 8086224:	2e00      	cmp	r6, #0
 8086226:	d0d4      	beq.n	80861d2 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8086228:	4642      	mov	r2, r8
 808622a:	6921      	ldr	r1, [r4, #16]
 808622c:	68a0      	ldr	r0, [r4, #8]
 808622e:	f000 fa11 	bl	8086654 <_ZN9FatVolume6fatGetEmPm>
 8086232:	2800      	cmp	r0, #0
 8086234:	f106 36ff 	add.w	r6, r6, #4294967295
 8086238:	dcf4      	bgt.n	8086224 <_ZN7FatFile7seekSetEm+0x6a>
 808623a:	e7d2      	b.n	80861e2 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
 808623c:	1af6      	subs	r6, r6, r3
 808623e:	e7ef      	b.n	8086220 <_ZN7FatFile7seekSetEm+0x66>

08086240 <_ZN7FatFile15openCachedEntryEPS_thh>:
                              uint8_t oflag, uint8_t lfnOrd) {
 8086240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086242:	460f      	mov	r7, r1
 8086244:	4604      	mov	r4, r0
 8086246:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
 8086248:	2100      	movs	r1, #0
 808624a:	2224      	movs	r2, #36	; 0x24
                              uint8_t oflag, uint8_t lfnOrd) {
 808624c:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
 808624e:	f004 fda1 	bl	808ad94 <memset>
  m_vol = dirFile->m_vol;
 8086252:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8086254:	80a5      	strh	r5, [r4, #4]
  m_vol = dirFile->m_vol;
 8086256:	60a0      	str	r0, [r4, #8]
  m_dirCluster = dirFile->m_firstCluster;
 8086258:	6a3b      	ldr	r3, [r7, #32]
 808625a:	f005 050f 	and.w	r5, r5, #15
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 808625e:	f100 0234 	add.w	r2, r0, #52	; 0x34
  m_dirCluster = dirFile->m_firstCluster;
 8086262:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8086264:	016b      	lsls	r3, r5, #5
 8086266:	eb02 1545 	add.w	r5, r2, r5, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 808626a:	7aea      	ldrb	r2, [r5, #11]
 808626c:	0717      	lsls	r7, r2, #28
 808626e:	d502      	bpl.n	8086276 <_ZN7FatFile15openCachedEntryEPS_thh+0x36>
  m_attr = FILE_ATTR_CLOSED;
 8086270:	2000      	movs	r0, #0
 8086272:	7020      	strb	r0, [r4, #0]
}
 8086274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8086276:	18c2      	adds	r2, r0, r3
 8086278:	f892 103f 	ldrb.w	r1, [r2, #63]	; 0x3f
 808627c:	f001 0117 	and.w	r1, r1, #23
 8086280:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 8086282:	7aea      	ldrb	r2, [r5, #11]
 8086284:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
 8086288:	bf08      	it	eq
 808628a:	f041 0108 	orreq.w	r1, r1, #8
  m_lfnOrd = lfnOrd;
 808628e:	f89d 2018 	ldrb.w	r2, [sp, #24]
    m_attr |= FILE_ATTR_FILE;
 8086292:	bf08      	it	eq
 8086294:	7021      	strbeq	r1, [r4, #0]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8086296:	f016 0f32 	tst.w	r6, #50	; 0x32
  m_lfnOrd = lfnOrd;
 808629a:	70e2      	strb	r2, [r4, #3]
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 808629c:	d004      	beq.n	80862a8 <_ZN7FatFile15openCachedEntryEPS_thh+0x68>
    if (isSubDir() || isReadOnly()) {
 808629e:	7822      	ldrb	r2, [r4, #0]
 80862a0:	06d5      	lsls	r5, r2, #27
 80862a2:	d4e5      	bmi.n	8086270 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
 80862a4:	07d1      	lsls	r1, r2, #31
 80862a6:	d4e3      	bmi.n	8086270 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
  m_flags = oflag & F_OFLAG;
 80862a8:	f006 020f 	and.w	r2, r6, #15
 80862ac:	70a2      	strb	r2, [r4, #2]
    return m_cache.lbn();
 80862ae:	6b02      	ldr	r2, [r0, #48]	; 0x30
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80862b0:	4403      	add	r3, r0
  m_dirBlock = m_vol->cacheBlockNumber();
 80862b2:	61a2      	str	r2, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80862b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
                 | dir->firstClusterLow;
 80862b8:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80862bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
 80862c0:	06f2      	lsls	r2, r6, #27
 80862c2:	d50d      	bpl.n	80862e0 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80862c4:	b939      	cbnz	r1, 80862d6 <_ZN7FatFile15openCachedEntryEPS_thh+0x96>
    m_flags |= F_FILE_DIR_DIRTY;
 80862c6:	78a3      	ldrb	r3, [r4, #2]
 80862c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80862cc:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80862ce:	06b3      	lsls	r3, r6, #26
 80862d0:	d40a      	bmi.n	80862e8 <_ZN7FatFile15openCachedEntryEPS_thh+0xa8>
  return true;
 80862d2:	2001      	movs	r0, #1
 80862d4:	e7ce      	b.n	8086274 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80862d6:	f000 fa52 	bl	808677e <_ZN9FatVolume9freeChainEm>
 80862da:	2800      	cmp	r0, #0
 80862dc:	d1f3      	bne.n	80862c6 <_ZN7FatFile15openCachedEntryEPS_thh+0x86>
 80862de:	e7c7      	b.n	8086270 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
    m_firstCluster = firstCluster;
 80862e0:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 80862e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80862e4:	61e3      	str	r3, [r4, #28]
 80862e6:	e7f2      	b.n	80862ce <_ZN7FatFile15openCachedEntryEPS_thh+0x8e>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80862e8:	4620      	mov	r0, r4
 80862ea:	69e1      	ldr	r1, [r4, #28]
 80862ec:	f7ff ff65 	bl	80861ba <_ZN7FatFile7seekSetEm>
 80862f0:	2800      	cmp	r0, #0
 80862f2:	d1ee      	bne.n	80862d2 <_ZN7FatFile15openCachedEntryEPS_thh+0x92>
 80862f4:	e7bc      	b.n	8086270 <_ZN7FatFile15openCachedEntryEPS_thh+0x30>
	...

080862f8 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80862f8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80862fa:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
 80862fc:	4604      	mov	r4, r0
  if (!isOpen()) {
 80862fe:	b90b      	cbnz	r3, 8086304 <_ZN7FatFile4syncEv+0xc>
    return true;
 8086300:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
 8086302:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
 8086304:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8086308:	2b00      	cmp	r3, #0
 808630a:	da23      	bge.n	8086354 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 808630c:	2101      	movs	r1, #1
 808630e:	f7ff fe4b 	bl	8085fa8 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8086312:	4605      	mov	r5, r0
 8086314:	b928      	cbnz	r0, 8086322 <_ZN7FatFile4syncEv+0x2a>
  m_error |= WRITE_ERROR;
 8086316:	7863      	ldrb	r3, [r4, #1]
  return false;
 8086318:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
 808631a:	f043 0301 	orr.w	r3, r3, #1
 808631e:	7063      	strb	r3, [r4, #1]
  return false;
 8086320:	e7ef      	b.n	8086302 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8086322:	7803      	ldrb	r3, [r0, #0]
 8086324:	2be5      	cmp	r3, #229	; 0xe5
 8086326:	d0f6      	beq.n	8086316 <_ZN7FatFile4syncEv+0x1e>
    if (isFile()) {
 8086328:	7823      	ldrb	r3, [r4, #0]
 808632a:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 808632c:	bf44      	itt	mi
 808632e:	69e3      	ldrmi	r3, [r4, #28]
 8086330:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8086332:	8c23      	ldrh	r3, [r4, #32]
 8086334:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8086336:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8086338:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
 808633a:	4b09      	ldr	r3, [pc, #36]	; (8086360 <_ZN7FatFile4syncEv+0x68>)
 808633c:	681b      	ldr	r3, [r3, #0]
 808633e:	b12b      	cbz	r3, 808634c <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8086340:	f100 0116 	add.w	r1, r0, #22
 8086344:	3018      	adds	r0, #24
 8086346:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8086348:	8b2b      	ldrh	r3, [r5, #24]
 808634a:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
 808634c:	78a3      	ldrb	r3, [r4, #2]
 808634e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8086352:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
 8086354:	68a0      	ldr	r0, [r4, #8]
 8086356:	f7fe ff69 	bl	808522c <_ZN9FatVolume9cacheSyncEv>
 808635a:	2800      	cmp	r0, #0
 808635c:	d0db      	beq.n	8086316 <_ZN7FatFile4syncEv+0x1e>
 808635e:	e7cf      	b.n	8086300 <_ZN7FatFile4syncEv+0x8>
 8086360:	20001cd0 	.word	0x20001cd0

08086364 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
 8086364:	b510      	push	{r4, lr}
 8086366:	4604      	mov	r4, r0
  bool rtn = sync();
 8086368:	f7ff ffc6 	bl	80862f8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 808636c:	2300      	movs	r3, #0
 808636e:	7023      	strb	r3, [r4, #0]
}
 8086370:	bd10      	pop	{r4, pc}

08086372 <_ZN7FatFile4openEPS_PKch>:
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8086372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086374:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8086376:	2300      	movs	r3, #0
 8086378:	b093      	sub	sp, #76	; 0x4c
 808637a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
 808637e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8086380:	4606      	mov	r6, r0
 8086382:	460c      	mov	r4, r1
 8086384:	9201      	str	r2, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
 8086386:	b113      	cbz	r3, 808638e <_ZN7FatFile4openEPS_PKch+0x1c>
  return false;
 8086388:	2000      	movs	r0, #0
}
 808638a:	b013      	add	sp, #76	; 0x4c
 808638c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
 808638e:	780b      	ldrb	r3, [r1, #0]
 8086390:	f013 0f70 	tst.w	r3, #112	; 0x70
 8086394:	d0f8      	beq.n	8086388 <_ZN7FatFile4openEPS_PKch+0x16>
  if (isDirSeparator(*path)) {
 8086396:	7813      	ldrb	r3, [r2, #0]
 8086398:	2b2f      	cmp	r3, #47	; 0x2f
 808639a:	d112      	bne.n	80863c2 <_ZN7FatFile4openEPS_PKch+0x50>
    while (isDirSeparator(*path)) {
 808639c:	9a01      	ldr	r2, [sp, #4]
 808639e:	7813      	ldrb	r3, [r2, #0]
 80863a0:	2b2f      	cmp	r3, #47	; 0x2f
 80863a2:	d102      	bne.n	80863aa <_ZN7FatFile4openEPS_PKch+0x38>
      path++;
 80863a4:	3201      	adds	r2, #1
 80863a6:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
 80863a8:	e7f8      	b.n	808639c <_ZN7FatFile4openEPS_PKch+0x2a>
    if (*path == 0) {
 80863aa:	68a1      	ldr	r1, [r4, #8]
 80863ac:	b91b      	cbnz	r3, 80863b6 <_ZN7FatFile4openEPS_PKch+0x44>
      return openRoot(dirFile->m_vol);
 80863ae:	4630      	mov	r0, r6
 80863b0:	f7ff fe09 	bl	8085fc6 <_ZN7FatFile8openRootEP9FatVolume>
 80863b4:	e7e9      	b.n	808638a <_ZN7FatFile4openEPS_PKch+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 80863b6:	a809      	add	r0, sp, #36	; 0x24
 80863b8:	f7ff fe05 	bl	8085fc6 <_ZN7FatFile8openRootEP9FatVolume>
 80863bc:	2800      	cmp	r0, #0
 80863be:	d0e3      	beq.n	8086388 <_ZN7FatFile4openEPS_PKch+0x16>
    dirFile = &tmpDir;
 80863c0:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
 80863c2:	9801      	ldr	r0, [sp, #4]
 80863c4:	aa01      	add	r2, sp, #4
 80863c6:	a903      	add	r1, sp, #12
 80863c8:	f7fe ff4c 	bl	8085264 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80863cc:	2800      	cmp	r0, #0
 80863ce:	d0db      	beq.n	8086388 <_ZN7FatFile4openEPS_PKch+0x16>
    if (*path == 0) {
 80863d0:	9b01      	ldr	r3, [sp, #4]
 80863d2:	781b      	ldrb	r3, [r3, #0]
 80863d4:	b19b      	cbz	r3, 80863fe <_ZN7FatFile4openEPS_PKch+0x8c>
    if (!open(dirFile, &fname, O_READ)) {
 80863d6:	2301      	movs	r3, #1
 80863d8:	4621      	mov	r1, r4
 80863da:	4630      	mov	r0, r6
 80863dc:	aa03      	add	r2, sp, #12
 80863de:	f7ff f875 	bl	80854cc <_ZN7FatFile4openEPS_P7fname_th>
 80863e2:	2800      	cmp	r0, #0
 80863e4:	d0d0      	beq.n	8086388 <_ZN7FatFile4openEPS_PKch+0x16>
    tmpDir = *this;
 80863e6:	4635      	mov	r5, r6
 80863e8:	ac09      	add	r4, sp, #36	; 0x24
 80863ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80863ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80863ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80863f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80863f2:	682b      	ldr	r3, [r5, #0]
    close();
 80863f4:	4630      	mov	r0, r6
    tmpDir = *this;
 80863f6:	6023      	str	r3, [r4, #0]
    close();
 80863f8:	f7ff ffb4 	bl	8086364 <_ZN7FatFile5closeEv>
  while (1) {
 80863fc:	e7e0      	b.n	80863c0 <_ZN7FatFile4openEPS_PKch+0x4e>
  return open(dirFile, &fname, oflag);
 80863fe:	463b      	mov	r3, r7
 8086400:	4621      	mov	r1, r4
 8086402:	4630      	mov	r0, r6
 8086404:	aa03      	add	r2, sp, #12
 8086406:	f7ff f861 	bl	80854cc <_ZN7FatFile4openEPS_P7fname_th>
 808640a:	e7be      	b.n	808638a <_ZN7FatFile4openEPS_PKch+0x18>

0808640c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808640c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8086410:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
 8086412:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & O_WRITE)) {
 8086414:	071d      	lsls	r5, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
 8086416:	4689      	mov	r9, r1
 8086418:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & O_WRITE)) {
 808641a:	d55b      	bpl.n	80864d4 <_ZN7FatFile5writeEPKvj+0xc8>
 808641c:	7883      	ldrb	r3, [r0, #2]
 808641e:	0799      	lsls	r1, r3, #30
 8086420:	d558      	bpl.n	80864d4 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 8086422:	075a      	lsls	r2, r3, #29
 8086424:	d451      	bmi.n	80864ca <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8086426:	6963      	ldr	r3, [r4, #20]
 8086428:	43db      	mvns	r3, r3
 808642a:	42bb      	cmp	r3, r7
 808642c:	d352      	bcc.n	80864d4 <_ZN7FatFile5writeEPKvj+0xc8>
 808642e:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8086430:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
 8086434:	6963      	ldr	r3, [r4, #20]
 8086436:	f1b8 0f00 	cmp.w	r8, #0
 808643a:	f000 808f 	beq.w	808655c <_ZN7FatFile5writeEPKvj+0x150>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 808643e:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8086440:	f3c3 0508 	ubfx	r5, r3, #0, #9
    return (position >> 9) & m_clusterBlockMask;
 8086444:	7946      	ldrb	r6, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8086446:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 808644a:	d10e      	bne.n	808646a <_ZN7FatFile5writeEPKvj+0x5e>
 808644c:	b96d      	cbnz	r5, 808646a <_ZN7FatFile5writeEPKvj+0x5e>
 808644e:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
 8086450:	2900      	cmp	r1, #0
 8086452:	d046      	beq.n	80864e2 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8086454:	4652      	mov	r2, sl
 8086456:	f000 f8fd 	bl	8086654 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 808645a:	2800      	cmp	r0, #0
 808645c:	db3a      	blt.n	80864d4 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 808645e:	d104      	bne.n	808646a <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
 8086460:	4620      	mov	r0, r4
 8086462:	f7ff fd59 	bl	8085f18 <_ZN7FatFile10addClusterEv>
 8086466:	2800      	cmp	r0, #0
 8086468:	d034      	beq.n	80864d4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 808646a:	6921      	ldr	r1, [r4, #16]
 808646c:	68a0      	ldr	r0, [r4, #8]
 808646e:	f000 f8eb 	bl	8086648 <_ZNK9FatVolume17clusterStartBlockEm>
 8086472:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8086474:	68a0      	ldr	r0, [r4, #8]
 8086476:	b915      	cbnz	r5, 808647e <_ZN7FatFile5writeEPKvj+0x72>
 8086478:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 808647c:	d23f      	bcs.n	80864fe <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 808647e:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
 8086482:	4546      	cmp	r6, r8
 8086484:	bf28      	it	cs
 8086486:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8086488:	2d00      	cmp	r5, #0
 808648a:	d136      	bne.n	80864fa <_ZN7FatFile5writeEPKvj+0xee>
 808648c:	6962      	ldr	r2, [r4, #20]
 808648e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8086490:	429a      	cmp	r2, r3
 8086492:	bf34      	ite	cc
 8086494:	2201      	movcc	r2, #1
 8086496:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
 8086498:	3028      	adds	r0, #40	; 0x28
 808649a:	f000 f8b2 	bl	8086602 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 808649e:	b1c8      	cbz	r0, 80864d4 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80864a0:	4428      	add	r0, r5
 80864a2:	4632      	mov	r2, r6
 80864a4:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 80864a6:	4435      	add	r5, r6
      memcpy(dst, src, n);
 80864a8:	f004 fc4c 	bl	808ad44 <memcpy>
      if (512 == (n + blockOffset)) {
 80864ac:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80864b0:	d104      	bne.n	80864bc <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
 80864b2:	68a0      	ldr	r0, [r4, #8]
 80864b4:	3028      	adds	r0, #40	; 0x28
 80864b6:	f000 f87d 	bl	80865b4 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 80864ba:	b158      	cbz	r0, 80864d4 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80864bc:	6963      	ldr	r3, [r4, #20]
    src += n;
 80864be:	44b1      	add	r9, r6
    m_curPosition += n;
 80864c0:	4433      	add	r3, r6
 80864c2:	6163      	str	r3, [r4, #20]
    nToWrite -= n;
 80864c4:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
 80864c8:	e7b4      	b.n	8086434 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
 80864ca:	69c1      	ldr	r1, [r0, #28]
 80864cc:	f7ff fe75 	bl	80861ba <_ZN7FatFile7seekSetEm>
 80864d0:	2800      	cmp	r0, #0
 80864d2:	d1a8      	bne.n	8086426 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80864d4:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80864d6:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= WRITE_ERROR;
 80864da:	f043 0301 	orr.w	r3, r3, #1
 80864de:	7063      	strb	r3, [r4, #1]
  return -1;
 80864e0:	e04d      	b.n	808657e <_ZN7FatFile5writeEPKvj+0x172>
        if (m_firstCluster == 0) {
 80864e2:	6a23      	ldr	r3, [r4, #32]
 80864e4:	b93b      	cbnz	r3, 80864f6 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
 80864e6:	4620      	mov	r0, r4
 80864e8:	f7ff fd16 	bl	8085f18 <_ZN7FatFile10addClusterEv>
 80864ec:	2800      	cmp	r0, #0
 80864ee:	d0f1      	beq.n	80864d4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
 80864f0:	6923      	ldr	r3, [r4, #16]
 80864f2:	6223      	str	r3, [r4, #32]
 80864f4:	e7b9      	b.n	808646a <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
 80864f6:	6123      	str	r3, [r4, #16]
 80864f8:	e7b7      	b.n	808646a <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80864fa:	2201      	movs	r2, #1
 80864fc:	e7cc      	b.n	8086498 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
 80864fe:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 8086502:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8086504:	d319      	bcc.n	808653a <_ZN7FatFile5writeEPKvj+0x12e>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8086506:	7903      	ldrb	r3, [r0, #4]
      uint8_t nBlock = nToWrite >> 9;
 8086508:	f3c8 2c47 	ubfx	ip, r8, #9, #8
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 808650c:	1b9b      	subs	r3, r3, r6
 808650e:	b2db      	uxtb	r3, r3
 8086510:	4563      	cmp	r3, ip
 8086512:	bf28      	it	cs
 8086514:	4663      	movcs	r3, ip
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8086516:	4291      	cmp	r1, r2
      n = 512*nBlock;
 8086518:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 808651c:	d307      	bcc.n	808652e <_ZN7FatFile5writeEPKvj+0x122>
 808651e:	441a      	add	r2, r3
 8086520:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
 8086522:	bf82      	ittt	hi
 8086524:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
 8086528:	f880 5028 	strbhi.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 808652c:	6302      	strhi	r2, [r0, #48]	; 0x30
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 808652e:	68a0      	ldr	r0, [r4, #8]
 8086530:	6802      	ldr	r2, [r0, #0]
 8086532:	68d5      	ldr	r5, [r2, #12]
 8086534:	464a      	mov	r2, r9
 8086536:	47a8      	blx	r5
 8086538:	e7bf      	b.n	80864ba <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
 808653a:	4291      	cmp	r1, r2
 808653c:	bf02      	ittt	eq
 808653e:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
 8086542:	f880 5028 	strbeq.w	r5, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8086546:	6303      	streq	r3, [r0, #48]	; 0x30
      if (!m_vol->writeBlock(block, src)) {
 8086548:	68a0      	ldr	r0, [r4, #8]
 808654a:	464a      	mov	r2, r9
 808654c:	6803      	ldr	r3, [r0, #0]
 808654e:	685b      	ldr	r3, [r3, #4]
 8086550:	4798      	blx	r3
 8086552:	2800      	cmp	r0, #0
 8086554:	d0be      	beq.n	80864d4 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
 8086556:	f44f 7600 	mov.w	r6, #512	; 0x200
 808655a:	e7af      	b.n	80864bc <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
 808655c:	69e1      	ldr	r1, [r4, #28]
 808655e:	78a2      	ldrb	r2, [r4, #2]
 8086560:	4299      	cmp	r1, r3
 8086562:	d204      	bcs.n	808656e <_ZN7FatFile5writeEPKvj+0x162>
    m_fileSize = m_curPosition;
 8086564:	61e3      	str	r3, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
 8086566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 808656a:	70a2      	strb	r2, [r4, #2]
 808656c:	e003      	b.n	8086576 <_ZN7FatFile5writeEPKvj+0x16a>
  } else if (m_dateTime) {
 808656e:	4b08      	ldr	r3, [pc, #32]	; (8086590 <_ZN7FatFile5writeEPKvj+0x184>)
 8086570:	681b      	ldr	r3, [r3, #0]
 8086572:	2b00      	cmp	r3, #0
 8086574:	d1f7      	bne.n	8086566 <_ZN7FatFile5writeEPKvj+0x15a>
  if (m_flags & O_SYNC) {
 8086576:	78a3      	ldrb	r3, [r4, #2]
 8086578:	071b      	lsls	r3, r3, #28
 808657a:	d402      	bmi.n	8086582 <_ZN7FatFile5writeEPKvj+0x176>
  return nbyte;
 808657c:	4638      	mov	r0, r7
}
 808657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
 8086582:	4620      	mov	r0, r4
 8086584:	f7ff feb8 	bl	80862f8 <_ZN7FatFile4syncEv>
 8086588:	2800      	cmp	r0, #0
 808658a:	d1f7      	bne.n	808657c <_ZN7FatFile5writeEPKvj+0x170>
 808658c:	e7a2      	b.n	80864d4 <_ZN7FatFile5writeEPKvj+0xc8>
 808658e:	bf00      	nop
 8086590:	20001cd0 	.word	0x20001cd0

08086594 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8086594:	b570      	push	{r4, r5, r6, lr}
 8086596:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8086598:	460c      	mov	r4, r1
    }
 808659a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 808659c:	b149      	cbz	r1, 80865b2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808659e:	f004 fc60 	bl	808ae62 <strlen>
 80865a2:	682b      	ldr	r3, [r5, #0]
 80865a4:	4602      	mov	r2, r0
 80865a6:	4621      	mov	r1, r4
 80865a8:	4628      	mov	r0, r5
    }
 80865aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80865ae:	68db      	ldr	r3, [r3, #12]
 80865b0:	4718      	bx	r3
    }
 80865b2:	bd70      	pop	{r4, r5, r6, pc}

080865b4 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80865b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 80865b6:	7803      	ldrb	r3, [r0, #0]
bool FatCache::sync() {
 80865b8:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 80865ba:	07da      	lsls	r2, r3, #31
 80865bc:	d51f      	bpl.n	80865fe <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 80865be:	6840      	ldr	r0, [r0, #4]
 80865c0:	f104 060c 	add.w	r6, r4, #12
 80865c4:	6803      	ldr	r3, [r0, #0]
 80865c6:	4632      	mov	r2, r6
 80865c8:	685b      	ldr	r3, [r3, #4]
 80865ca:	68a1      	ldr	r1, [r4, #8]
 80865cc:	4798      	blx	r3
 80865ce:	4605      	mov	r5, r0
 80865d0:	b910      	cbnz	r0, 80865d8 <_ZN8FatCache4syncEv+0x24>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 80865d2:	2500      	movs	r5, #0
}
 80865d4:	4628      	mov	r0, r5
 80865d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 80865d8:	7823      	ldrb	r3, [r4, #0]
 80865da:	079b      	lsls	r3, r3, #30
 80865dc:	d404      	bmi.n	80865e8 <_ZN8FatCache4syncEv+0x34>
    m_status &= ~CACHE_STATUS_DIRTY;
 80865de:	7823      	ldrb	r3, [r4, #0]
 80865e0:	f023 0301 	bic.w	r3, r3, #1
 80865e4:	7023      	strb	r3, [r4, #0]
 80865e6:	e7f5      	b.n	80865d4 <_ZN8FatCache4syncEv+0x20>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 80865e8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80865ec:	6901      	ldr	r1, [r0, #16]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 80865ee:	6803      	ldr	r3, [r0, #0]
 80865f0:	4632      	mov	r2, r6
 80865f2:	685b      	ldr	r3, [r3, #4]
 80865f4:	4439      	add	r1, r7
 80865f6:	4798      	blx	r3
 80865f8:	2800      	cmp	r0, #0
 80865fa:	d1f0      	bne.n	80865de <_ZN8FatCache4syncEv+0x2a>
 80865fc:	e7e9      	b.n	80865d2 <_ZN8FatCache4syncEv+0x1e>
  return true;
 80865fe:	2501      	movs	r5, #1
 8086600:	e7e8      	b.n	80865d4 <_ZN8FatCache4syncEv+0x20>

08086602 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8086602:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8086604:	6883      	ldr	r3, [r0, #8]
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8086606:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8086608:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808660a:	460e      	mov	r6, r1
 808660c:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 808660e:	d009      	beq.n	8086624 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
 8086610:	f7ff ffd0 	bl	80865b4 <_ZN8FatCache4syncEv>
 8086614:	b908      	cbnz	r0, 808661a <_ZN8FatCache4readEmh+0x18>
  return 0;
 8086616:	2000      	movs	r0, #0
}
 8086618:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
 808661a:	076b      	lsls	r3, r5, #29
 808661c:	d50a      	bpl.n	8086634 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
 808661e:	2300      	movs	r3, #0
    m_lbn = lbn;
 8086620:	60a6      	str	r6, [r4, #8]
    m_status = 0;
 8086622:	7023      	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
 8086624:	4620      	mov	r0, r4
 8086626:	7822      	ldrb	r2, [r4, #0]
 8086628:	f005 0503 	and.w	r5, r5, #3
 808662c:	4315      	orrs	r5, r2
 808662e:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
 8086632:	e7f1      	b.n	8086618 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8086634:	6860      	ldr	r0, [r4, #4]
 8086636:	4631      	mov	r1, r6
 8086638:	6803      	ldr	r3, [r0, #0]
 808663a:	f104 020c 	add.w	r2, r4, #12
 808663e:	681b      	ldr	r3, [r3, #0]
 8086640:	4798      	blx	r3
 8086642:	2800      	cmp	r0, #0
 8086644:	d1eb      	bne.n	808661e <_ZN8FatCache4readEmh+0x1c>
 8086646:	e7e6      	b.n	8086616 <_ZN8FatCache4readEmh+0x14>

08086648 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8086648:	7983      	ldrb	r3, [r0, #6]
 808664a:	3902      	subs	r1, #2
 808664c:	6940      	ldr	r0, [r0, #20]
 808664e:	4099      	lsls	r1, r3
}
 8086650:	4408      	add	r0, r1
 8086652:	4770      	bx	lr

08086654 <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8086654:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8086656:	79c3      	ldrb	r3, [r0, #7]
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8086658:	4605      	mov	r5, r0
  if (m_fatType == 32) {
 808665a:	2b20      	cmp	r3, #32
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 808665c:	460c      	mov	r4, r1
 808665e:	4616      	mov	r6, r2
  if (m_fatType == 32) {
 8086660:	d118      	bne.n	8086694 <_ZN9FatVolume6fatGetEmPm+0x40>
    lba = m_fatStartBlock + (cluster >> 7);
 8086662:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
 8086664:	2202      	movs	r2, #2
 8086666:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 808666a:	f500 700d 	add.w	r0, r0, #564	; 0x234
 808666e:	f7ff ffc8 	bl	8086602 <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8086672:	b910      	cbnz	r0, 808667a <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8086674:	f04f 30ff 	mov.w	r0, #4294967295
}
 8086678:	bd70      	pop	{r4, r5, r6, pc}
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 808667a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 808667e:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8086682:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
 8086686:	69ea      	ldr	r2, [r5, #28]
 8086688:	4293      	cmp	r3, r2
  return 1;
 808668a:	bf96      	itet	ls
 808668c:	2001      	movls	r0, #1
    return 0;
 808668e:	2000      	movhi	r0, #0
  *value = next;
 8086690:	6033      	strls	r3, [r6, #0]
  return 1;
 8086692:	e7f1      	b.n	8086678 <_ZN9FatVolume6fatGetEmPm+0x24>
  if (m_fatType == 16) {
 8086694:	2b10      	cmp	r3, #16
 8086696:	d1ed      	bne.n	8086674 <_ZN9FatVolume6fatGetEmPm+0x20>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 8086698:	6983      	ldr	r3, [r0, #24]
 808669a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 808669e:	2202      	movs	r2, #2
 80866a0:	4419      	add	r1, r3
 80866a2:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80866a6:	f7ff ffac 	bl	8086602 <_ZN8FatCache4readEmh>
    if (!pc) {
 80866aa:	2800      	cmp	r0, #0
 80866ac:	d0e2      	beq.n	8086674 <_ZN9FatVolume6fatGetEmPm+0x20>
    next = pc->fat16[cluster & 0XFF];
 80866ae:	b2e4      	uxtb	r4, r4
 80866b0:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
 80866b4:	e7e7      	b.n	8086686 <_ZN9FatVolume6fatGetEmPm+0x32>

080866b6 <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80866b6:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80866b8:	79c3      	ldrb	r3, [r0, #7]
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80866ba:	460c      	mov	r4, r1
  if (m_fatType == 32) {
 80866bc:	2b20      	cmp	r3, #32
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80866be:	4615      	mov	r5, r2
  if (m_fatType == 32) {
 80866c0:	d110      	bne.n	80866e4 <_ZN9FatVolume6fatPutEmm+0x2e>
    lba = m_fatStartBlock + (cluster >> 7);
 80866c2:	6981      	ldr	r1, [r0, #24]
 80866c4:	2203      	movs	r2, #3
 80866c6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80866ca:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80866ce:	f7ff ff98 	bl	8086602 <_ZN8FatCache4readEmh>
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80866d2:	b908      	cbnz	r0, 80866d8 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 80866d4:	2000      	movs	r0, #0
}
 80866d6:	bd38      	pop	{r3, r4, r5, pc}
    pc->fat32[cluster & 0X7F] = value;
 80866d8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80866dc:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
 80866e0:	2001      	movs	r0, #1
 80866e2:	e7f8      	b.n	80866d6 <_ZN9FatVolume6fatPutEmm+0x20>
  if (m_fatType == 16) {
 80866e4:	2b10      	cmp	r3, #16
 80866e6:	d1f5      	bne.n	80866d4 <_ZN9FatVolume6fatPutEmm+0x1e>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
 80866e8:	6983      	ldr	r3, [r0, #24]
 80866ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80866ee:	2203      	movs	r2, #3
 80866f0:	4419      	add	r1, r3
 80866f2:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80866f6:	f7ff ff84 	bl	8086602 <_ZN8FatCache4readEmh>
    if (!pc) {
 80866fa:	2800      	cmp	r0, #0
 80866fc:	d0ea      	beq.n	80866d4 <_ZN9FatVolume6fatPutEmm+0x1e>
    pc->fat16[cluster & 0XFF] = value;
 80866fe:	b2e4      	uxtb	r4, r4
 8086700:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
 8086704:	e7ec      	b.n	80866e0 <_ZN9FatVolume6fatPutEmm+0x2a>

08086706 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8086706:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808670a:	4605      	mov	r5, r0
 808670c:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 808670e:	460f      	mov	r7, r1
 8086710:	b9b9      	cbnz	r1, 8086742 <_ZN9FatVolume15allocateClusterEmPm+0x3c>
 8086712:	68c6      	ldr	r6, [r0, #12]
 8086714:	4634      	mov	r4, r6
    if (find > m_lastCluster) {
 8086716:	69eb      	ldr	r3, [r5, #28]
    find++;
 8086718:	3401      	adds	r4, #1
      find = 2;
 808671a:	42a3      	cmp	r3, r4
 808671c:	bf38      	it	cc
 808671e:	2402      	movcc	r4, #2
    int8_t fg = fatGet(find, &f);
 8086720:	4628      	mov	r0, r5
 8086722:	4621      	mov	r1, r4
 8086724:	aa01      	add	r2, sp, #4
 8086726:	f7ff ff95 	bl	8086654 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 808672a:	2800      	cmp	r0, #0
 808672c:	db04      	blt.n	8086738 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (fg && f == 0) {
 808672e:	d001      	beq.n	8086734 <_ZN9FatVolume15allocateClusterEmPm+0x2e>
 8086730:	9b01      	ldr	r3, [sp, #4]
 8086732:	b143      	cbz	r3, 8086746 <_ZN9FatVolume15allocateClusterEmPm+0x40>
    if (find == start) {
 8086734:	42b4      	cmp	r4, r6
 8086736:	d1ee      	bne.n	8086716 <_ZN9FatVolume15allocateClusterEmPm+0x10>
  return false;
 8086738:	2600      	movs	r6, #0
}
 808673a:	4630      	mov	r0, r6
 808673c:	b002      	add	sp, #8
 808673e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086742:	460e      	mov	r6, r1
 8086744:	e7e6      	b.n	8086714 <_ZN9FatVolume15allocateClusterEmPm+0xe>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8086746:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 808674a:	4621      	mov	r1, r4
 808674c:	4628      	mov	r0, r5
 808674e:	f7ff ffb2 	bl	80866b6 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
 8086752:	4606      	mov	r6, r0
 8086754:	2800      	cmp	r0, #0
 8086756:	d0ef      	beq.n	8086738 <_ZN9FatVolume15allocateClusterEmPm+0x32>
  if (current) {
 8086758:	b17f      	cbz	r7, 808677a <_ZN9FatVolume15allocateClusterEmPm+0x74>
    if (!fatPut(current, find)) {
 808675a:	4622      	mov	r2, r4
 808675c:	4639      	mov	r1, r7
 808675e:	4628      	mov	r0, r5
 8086760:	f7ff ffa9 	bl	80866b6 <_ZN9FatVolume6fatPutEmm>
 8086764:	2800      	cmp	r0, #0
 8086766:	d0e7      	beq.n	8086738 <_ZN9FatVolume15allocateClusterEmPm+0x32>
    if (m_freeClusterCount >= 0) {
 8086768:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 808676a:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 808676c:	bfa4      	itt	ge
 808676e:	f103 33ff 	addge.w	r3, r3, #4294967295
 8086772:	626b      	strge	r3, [r5, #36]	; 0x24
  *next = find;
 8086774:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8086778:	e7df      	b.n	808673a <_ZN9FatVolume15allocateClusterEmPm+0x34>
    m_allocSearchStart = find;
 808677a:	60ec      	str	r4, [r5, #12]
 808677c:	e7f4      	b.n	8086768 <_ZN9FatVolume15allocateClusterEmPm+0x62>

0808677e <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 808677e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086780:	4604      	mov	r4, r0
 8086782:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8086784:	4629      	mov	r1, r5
 8086786:	4620      	mov	r0, r4
 8086788:	aa01      	add	r2, sp, #4
 808678a:	f7ff ff63 	bl	8086654 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 808678e:	1e06      	subs	r6, r0, #0
 8086790:	db13      	blt.n	80867ba <_ZN9FatVolume9freeChainEm+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8086792:	2200      	movs	r2, #0
 8086794:	4629      	mov	r1, r5
 8086796:	4620      	mov	r0, r4
 8086798:	f7ff ff8d 	bl	80866b6 <_ZN9FatVolume6fatPutEmm>
 808679c:	b168      	cbz	r0, 80867ba <_ZN9FatVolume9freeChainEm+0x3c>
    if (m_freeClusterCount >= 0) {
 808679e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80867a0:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 80867a2:	bfa4      	itt	ge
 80867a4:	3301      	addge	r3, #1
 80867a6:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 80867a8:	68e3      	ldr	r3, [r4, #12]
 80867aa:	42ab      	cmp	r3, r5
      m_allocSearchStart = cluster;
 80867ac:	bf88      	it	hi
 80867ae:	60e5      	strhi	r5, [r4, #12]
    }
    cluster = next;
 80867b0:	9d01      	ldr	r5, [sp, #4]
  } while (fg);
 80867b2:	2e00      	cmp	r6, #0
 80867b4:	d1e6      	bne.n	8086784 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 80867b6:	b002      	add	sp, #8
 80867b8:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 80867ba:	2000      	movs	r0, #0
 80867bc:	e7fb      	b.n	80867b6 <_ZN9FatVolume9freeChainEm+0x38>

080867be <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 80867be:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
 80867c0:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
 80867c2:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 80867c4:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
 80867c6:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
 80867ca:	4604      	mov	r4, r0
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 80867cc:	460d      	mov	r5, r1
  m_fatType = 0;
 80867ce:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
 80867d0:	f100 0628 	add.w	r6, r0, #40	; 0x28
    m_vol = vol;
 80867d4:	62c0      	str	r0, [r0, #44]	; 0x2c
    m_status = 0;
 80867d6:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80867da:	6303      	str	r3, [r0, #48]	; 0x30
    m_vol = vol;
 80867dc:	f8c0 0238 	str.w	r0, [r0, #568]	; 0x238
    m_status = 0;
 80867e0:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 80867e4:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
  if (part) {
 80867e8:	b1b9      	cbz	r1, 808681a <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
 80867ea:	2904      	cmp	r1, #4
 80867ec:	d901      	bls.n	80867f2 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 80867ee:	2000      	movs	r0, #0
}
 80867f0:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
 80867f2:	4611      	mov	r1, r2
 80867f4:	4630      	mov	r0, r6
 80867f6:	f7ff ff04 	bl	8086602 <_ZN8FatCache4readEmh>
    if (!pc) {
 80867fa:	2800      	cmp	r0, #0
 80867fc:	d0f7      	beq.n	80867ee <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 80867fe:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8086802:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8086806:	065b      	lsls	r3, r3, #25
 8086808:	d1f1      	bne.n	80867ee <_ZN9FatVolume4initEh+0x30>
 808680a:	f105 011b 	add.w	r1, r5, #27
 808680e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8086812:	f8d1 5006 	ldr.w	r5, [r1, #6]
 8086816:	2d00      	cmp	r5, #0
 8086818:	d0e9      	beq.n	80867ee <_ZN9FatVolume4initEh+0x30>
 808681a:	2200      	movs	r2, #0
 808681c:	4629      	mov	r1, r5
 808681e:	4630      	mov	r0, r6
 8086820:	f7ff feef 	bl	8086602 <_ZN8FatCache4readEmh>
  if (!pc) {
 8086824:	2800      	cmp	r0, #0
 8086826:	d0e2      	beq.n	80867ee <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
 8086828:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 808682c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8086830:	d1dd      	bne.n	80867ee <_ZN9FatVolume4initEh+0x30>
 8086832:	7c03      	ldrb	r3, [r0, #16]
 8086834:	2b02      	cmp	r3, #2
 8086836:	d1da      	bne.n	80867ee <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
 8086838:	89c3      	ldrh	r3, [r0, #14]
 808683a:	2b00      	cmp	r3, #0
 808683c:	d0d7      	beq.n	80867ee <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
 808683e:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSizeShift = 0;
 8086840:	2609      	movs	r6, #9
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8086842:	1e4b      	subs	r3, r1, #1
 8086844:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
 8086846:	2300      	movs	r3, #0
 8086848:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 808684a:	2301      	movs	r3, #1
  m_blocksPerCluster = fbs->sectorsPerCluster;
 808684c:	7121      	strb	r1, [r4, #4]
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 808684e:	4299      	cmp	r1, r3
 8086850:	d007      	beq.n	8086862 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
 8086852:	3e01      	subs	r6, #1
 8086854:	d0cb      	beq.n	80867ee <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8086856:	79a2      	ldrb	r2, [r4, #6]
 8086858:	005b      	lsls	r3, r3, #1
 808685a:	3201      	adds	r2, #1
 808685c:	b2db      	uxtb	r3, r3
 808685e:	71a2      	strb	r2, [r4, #6]
 8086860:	e7f5      	b.n	808684e <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8086862:	8ac1      	ldrh	r1, [r0, #22]
 8086864:	b901      	cbnz	r1, 8086868 <_ZN9FatVolume4initEh+0xaa>
 8086866:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8086868:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 808686a:	89c3      	ldrh	r3, [r0, #14]
 808686c:	442b      	add	r3, r5
 808686e:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8086870:	f8b0 2011 	ldrh.w	r2, [r0, #17]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8086874:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8086878:	6223      	str	r3, [r4, #32]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 808687a:	8122      	strh	r2, [r4, #8]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 808687c:	f8b0 1011 	ldrh.w	r1, [r0, #17]
 8086880:	0149      	lsls	r1, r1, #5
 8086882:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8086886:	eb03 2351 	add.w	r3, r3, r1, lsr #9
 808688a:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
 808688c:	f8b0 2013 	ldrh.w	r2, [r0, #19]
 8086890:	b902      	cbnz	r2, 8086894 <_ZN9FatVolume4initEh+0xd6>
 8086892:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8086894:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
 8086896:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8086898:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
 808689a:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
 808689c:	1c4b      	adds	r3, r1, #1
 808689e:	61e3      	str	r3, [r4, #28]
    m_freeClusterCount = value;
 80868a0:	f04f 33ff 	mov.w	r3, #4294967295
 80868a4:	6263      	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
 80868a6:	f640 73f4 	movw	r3, #4084	; 0xff4
 80868aa:	4299      	cmp	r1, r3
 80868ac:	d802      	bhi.n	80868b4 <_ZN9FatVolume4initEh+0xf6>
    m_fatType = 12;
 80868ae:	230c      	movs	r3, #12
 80868b0:	71e3      	strb	r3, [r4, #7]
 80868b2:	e79c      	b.n	80867ee <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
 80868b4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80868b8:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
 80868ba:	bf89      	itett	hi
 80868bc:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    m_fatType = 16;
 80868be:	2310      	movls	r3, #16
    m_rootDirStart = fbs->fat32RootCluster;
 80868c0:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 80868c2:	2320      	movhi	r3, #32
  return true;
 80868c4:	2001      	movs	r0, #1
    m_fatType = 32;
 80868c6:	71e3      	strb	r3, [r4, #7]
 80868c8:	e792      	b.n	80867f0 <_ZN9FatVolume4initEh+0x32>
	...

080868cc <_ZN15Adafruit_BME680C1Ea>:
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
{
  _BME680_SoftwareSPI_MOSI = -1;
 80868cc:	22ff      	movs	r2, #255	; 0xff
  : _cs(cspin)
 80868ce:	7701      	strb	r1, [r0, #28]
  _BME680_SoftwareSPI_MOSI = -1;
 80868d0:	4904      	ldr	r1, [pc, #16]	; (80868e4 <_ZN15Adafruit_BME680C1Ea+0x18>)
 80868d2:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 80868d4:	4904      	ldr	r1, [pc, #16]	; (80868e8 <_ZN15Adafruit_BME680C1Ea+0x1c>)
 80868d6:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 80868d8:	4904      	ldr	r1, [pc, #16]	; (80868ec <_ZN15Adafruit_BME680C1Ea+0x20>)
 80868da:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 80868dc:	2200      	movs	r2, #0
 80868de:	6102      	str	r2, [r0, #16]
 80868e0:	7502      	strb	r2, [r0, #20]
}
 80868e2:	4770      	bx	lr
 80868e4:	20001cd9 	.word	0x20001cd9
 80868e8:	20001cd8 	.word	0x20001cd8
 80868ec:	20001cda 	.word	0x20001cda

080868f0 <_ZN15Adafruit_BME68014performReadingEv>:
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80868f0:	2301      	movs	r3, #1
bool Adafruit_BME680::performReading(void) {
 80868f2:	b530      	push	{r4, r5, lr}
 80868f4:	4604      	mov	r4, r0
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80868f6:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80868fa:	7ca3      	ldrb	r3, [r4, #18]
  uint8_t set_required_settings = 0;
 80868fc:	7c40      	ldrb	r0, [r0, #17]
bool Adafruit_BME680::performReading(void) {
 80868fe:	b087      	sub	sp, #28
  if (_humEnabled)
 8086900:	b10b      	cbz	r3, 8086906 <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 8086902:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8086906:	7ce3      	ldrb	r3, [r4, #19]
 8086908:	b10b      	cbz	r3, 808690e <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 808690a:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 808690e:	7c23      	ldrb	r3, [r4, #16]
 8086910:	b10b      	cbz	r3, 8086916 <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 8086912:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8086916:	7d23      	ldrb	r3, [r4, #20]
 8086918:	b10b      	cbz	r3, 808691e <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 808691a:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 808691e:	f104 0520 	add.w	r5, r4, #32
 8086922:	4629      	mov	r1, r5
 8086924:	f7f9 fcdc 	bl	80802e0 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8086928:	b118      	cbz	r0, 8086932 <_ZN15Adafruit_BME68014performReadingEv+0x42>
    return false;
 808692a:	2500      	movs	r5, #0
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
}
 808692c:	4628      	mov	r0, r5
 808692e:	b007      	add	sp, #28
 8086930:	bd30      	pop	{r4, r5, pc}
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8086932:	4628      	mov	r0, r5
 8086934:	f7f9 fc95 	bl	8080262 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8086938:	2800      	cmp	r0, #0
 808693a:	d1f6      	bne.n	808692a <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 808693c:	4629      	mov	r1, r5
 808693e:	f10d 0002 	add.w	r0, sp, #2
 8086942:	f7f9 fe47 	bl	80805d4 <bme680_get_profile_dur>
  delay(meas_period * 2); /* Delay till the measurement is ready */
 8086946:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 808694a:	0040      	lsls	r0, r0, #1
 808694c:	f002 f86e 	bl	8088a2c <delay>
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8086950:	4629      	mov	r1, r5
 8086952:	a801      	add	r0, sp, #4
 8086954:	f7f9 fe72 	bl	808063c <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8086958:	2800      	cmp	r0, #0
 808695a:	d1e6      	bne.n	808692a <_ZN15Adafruit_BME68014performReadingEv+0x3a>
  if (_tempEnabled) {
 808695c:	7c63      	ldrb	r3, [r4, #17]
 808695e:	b33b      	cbz	r3, 80869b0 <_ZN15Adafruit_BME68014performReadingEv+0xc0>
    temperature = data.temperature / 100.0;
 8086960:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8086964:	f003 fa3c 	bl	8089de0 <__aeabi_i2d>
 8086968:	2200      	movs	r2, #0
 808696a:	4b17      	ldr	r3, [pc, #92]	; (80869c8 <_ZN15Adafruit_BME68014performReadingEv+0xd8>)
 808696c:	f003 fbcc 	bl	808a108 <__aeabi_ddiv>
 8086970:	f003 fd98 	bl	808a4a4 <__aeabi_d2f>
  if (_humEnabled) {
 8086974:	7ca3      	ldrb	r3, [r4, #18]
 8086976:	6020      	str	r0, [r4, #0]
 8086978:	b1e3      	cbz	r3, 80869b4 <_ZN15Adafruit_BME68014performReadingEv+0xc4>
    humidity = data.humidity / 1000.0;
 808697a:	9804      	ldr	r0, [sp, #16]
 808697c:	f003 fa20 	bl	8089dc0 <__aeabi_ui2d>
 8086980:	2200      	movs	r2, #0
 8086982:	4b12      	ldr	r3, [pc, #72]	; (80869cc <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8086984:	f003 fbc0 	bl	808a108 <__aeabi_ddiv>
 8086988:	f003 fd8c 	bl	808a4a4 <__aeabi_d2f>
  if (_presEnabled) {
 808698c:	7ce3      	ldrb	r3, [r4, #19]
 808698e:	60a0      	str	r0, [r4, #8]
 8086990:	b193      	cbz	r3, 80869b8 <_ZN15Adafruit_BME68014performReadingEv+0xc8>
    pressure = data.pressure;
 8086992:	9803      	ldr	r0, [sp, #12]
 8086994:	f003 fe8c 	bl	808a6b0 <__aeabi_ui2f>
  if (_gasEnabled) {
 8086998:	7d25      	ldrb	r5, [r4, #20]
 808699a:	6060      	str	r0, [r4, #4]
 808699c:	b18d      	cbz	r5, 80869c2 <_ZN15Adafruit_BME68014performReadingEv+0xd2>
    if (data.status & BME680_HEAT_STAB_MSK) {
 808699e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80869a2:	06db      	lsls	r3, r3, #27
 80869a4:	d50a      	bpl.n	80869bc <_ZN15Adafruit_BME68014performReadingEv+0xcc>
      gas_resistance = data.gas_resistance;
 80869a6:	9805      	ldr	r0, [sp, #20]
 80869a8:	f003 fe82 	bl	808a6b0 <__aeabi_ui2f>
 80869ac:	60e0      	str	r0, [r4, #12]
 80869ae:	e7bd      	b.n	808692c <_ZN15Adafruit_BME68014performReadingEv+0x3c>
    temperature = NAN;
 80869b0:	4807      	ldr	r0, [pc, #28]	; (80869d0 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80869b2:	e7df      	b.n	8086974 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    humidity = NAN;
 80869b4:	4806      	ldr	r0, [pc, #24]	; (80869d0 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80869b6:	e7e9      	b.n	808698c <_ZN15Adafruit_BME68014performReadingEv+0x9c>
    pressure = NAN;
 80869b8:	4805      	ldr	r0, [pc, #20]	; (80869d0 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80869ba:	e7ed      	b.n	8086998 <_ZN15Adafruit_BME68014performReadingEv+0xa8>
      gas_resistance = 0;
 80869bc:	2300      	movs	r3, #0
 80869be:	60e3      	str	r3, [r4, #12]
 80869c0:	e7b4      	b.n	808692c <_ZN15Adafruit_BME68014performReadingEv+0x3c>
  return true;
 80869c2:	2501      	movs	r5, #1
 80869c4:	e7b2      	b.n	808692c <_ZN15Adafruit_BME68014performReadingEv+0x3c>
 80869c6:	bf00      	nop
 80869c8:	40590000 	.word	0x40590000
 80869cc:	408f4000 	.word	0x408f4000
 80869d0:	7fc00000 	.word	0x7fc00000

080869d4 <_ZN7HIH61XX5startEv>:

uint8_t HIH61XX::start() {
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
 80869d4:	7983      	ldrb	r3, [r0, #6]
 80869d6:	f063 037f 	orn	r3, r3, #127	; 0x7f

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 80869da:	f023 030f 	bic.w	r3, r3, #15
 80869de:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 80869e0:	2000      	movs	r0, #0
 80869e2:	4770      	bx	lr

080869e4 <_ZN7HIH61XX4stopEv>:

uint8_t HIH61XX::stop() {
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
 80869e4:	7983      	ldrb	r3, [r0, #6]
 80869e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80869ea:	7183      	strb	r3, [r0, #6]
    return setError(0);
}
 80869ec:	2000      	movs	r0, #0
 80869ee:	4770      	bx	lr

080869f0 <_ZN7HIH61XXC1Eh>:
HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 80869f0:	4a03      	ldr	r2, [pc, #12]	; (8086a00 <_ZN7HIH61XXC1Eh+0x10>)
 80869f2:	7101      	strb	r1, [r0, #4]
 80869f4:	6002      	str	r2, [r0, #0]
 80869f6:	2200      	movs	r2, #0
 80869f8:	7182      	strb	r2, [r0, #6]
 80869fa:	6082      	str	r2, [r0, #8]
}
 80869fc:	4770      	bx	lr
 80869fe:	bf00      	nop
 8086a00:	0808ea58 	.word	0x0808ea58

08086a04 <_ZN7HIH61XX6updateEv>:

uint8_t HIH61XX::update() {
 8086a04:	b570      	push	{r4, r5, r6, lr}
            return f & RunningFlag;
 8086a06:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8086a0a:	4604      	mov	r4, r0
    if (!isRunning()) {
 8086a0c:	2b00      	cmp	r3, #0
 8086a0e:	db07      	blt.n	8086a20 <_ZN7HIH61XX6updateEv+0x1c>
        return setError(NotRunningError);
 8086a10:	2603      	movs	r6, #3
            f = (f & ~ErrorMask) | error;
 8086a12:	f023 030f 	bic.w	r3, r3, #15
 8086a16:	f043 0303 	orr.w	r3, r3, #3
 8086a1a:	7183      	strb	r3, [r0, #6]
    } else {
        Serial.print("...");
        Serial.println(azer);
        return setError(ConnectionError);
    }
}
 8086a1c:	4630      	mov	r0, r6
 8086a1e:	bd70      	pop	{r4, r5, r6, pc}
    Wire.beginTransmission(a);
 8086a20:	f003 f82a 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8086a24:	7921      	ldrb	r1, [r4, #4]
 8086a26:	f002 feaf 	bl	8089788 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 8086a2a:	f003 f825 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8086a2e:	f002 fece 	bl	80897ce <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 8086a32:	4606      	mov	r6, r0
 8086a34:	2800      	cmp	r0, #0
 8086a36:	d15b      	bne.n	8086af0 <_ZN7HIH61XX6updateEv+0xec>
            delay(10);
 8086a38:	200a      	movs	r0, #10
 8086a3a:	f001 fff7 	bl	8088a2c <delay>
            Wire.requestFrom(a, (uint8_t) 4);
 8086a3e:	f003 f81b 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8086a42:	2204      	movs	r2, #4
 8086a44:	7921      	ldrb	r1, [r4, #4]
 8086a46:	f002 fe9c 	bl	8089782 <_ZN7TwoWire11requestFromEhj>
            if (Wire.available()) {
 8086a4a:	f003 f815 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8086a4e:	6803      	ldr	r3, [r0, #0]
 8086a50:	691b      	ldr	r3, [r3, #16]
 8086a52:	4798      	blx	r3
 8086a54:	2800      	cmp	r0, #0
 8086a56:	d043      	beq.n	8086ae0 <_ZN7HIH61XX6updateEv+0xdc>
                x = Wire.read();
 8086a58:	f003 f80e 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8086a5c:	6803      	ldr	r3, [r0, #0]
 8086a5e:	695b      	ldr	r3, [r3, #20]
 8086a60:	4798      	blx	r3
 8086a62:	4605      	mov	r5, r0
                y = Wire.read();
 8086a64:	f003 f808 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8086a68:	6803      	ldr	r3, [r0, #0]
 8086a6a:	695b      	ldr	r3, [r3, #20]
 8086a6c:	4798      	blx	r3
                s = x >> 6;
 8086a6e:	f3c5 1381 	ubfx	r3, r5, #6, #2
                switch (s) {
 8086a72:	2b01      	cmp	r3, #1
 8086a74:	d023      	beq.n	8086abe <_ZN7HIH61XX6updateEv+0xba>
 8086a76:	2b02      	cmp	r3, #2
 8086a78:	d026      	beq.n	8086ac8 <_ZN7HIH61XX6updateEv+0xc4>
 8086a7a:	2b00      	cmp	r3, #0
 8086a7c:	d1dc      	bne.n	8086a38 <_ZN7HIH61XX6updateEv+0x34>
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 8086a7e:	022d      	lsls	r5, r5, #8
 8086a80:	b2c0      	uxtb	r0, r0
 8086a82:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
 8086a86:	4305      	orrs	r5, r0
 8086a88:	8125      	strh	r5, [r4, #8]
                        x = Wire.read();
 8086a8a:	f002 fff5 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8086a8e:	6803      	ldr	r3, [r0, #0]
 8086a90:	695b      	ldr	r3, [r3, #20]
 8086a92:	4798      	blx	r3
 8086a94:	4605      	mov	r5, r0
                        y = Wire.read();
 8086a96:	f002 ffef 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8086a9a:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8086a9c:	022d      	lsls	r5, r5, #8
                        y = Wire.read();
 8086a9e:	695b      	ldr	r3, [r3, #20]
 8086aa0:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8086aa2:	b2ad      	uxth	r5, r5
 8086aa4:	b2c0      	uxtb	r0, r0
 8086aa6:	4305      	orrs	r5, r0
 8086aa8:	10ad      	asrs	r5, r5, #2
 8086aaa:	8165      	strh	r5, [r4, #10]
                        Wire.endTransmission();
 8086aac:	f002 ffe4 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8086ab0:	f002 fe8d 	bl	80897ce <_ZN7TwoWire15endTransmissionEv>
 8086ab4:	79a3      	ldrb	r3, [r4, #6]
 8086ab6:	f023 030f 	bic.w	r3, r3, #15
 8086aba:	71a3      	strb	r3, [r4, #6]
                        return setError(0);
 8086abc:	e7ae      	b.n	8086a1c <_ZN7HIH61XX6updateEv+0x18>
                        Wire.endTransmission();
 8086abe:	f002 ffdb 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8086ac2:	f002 fe84 	bl	80897ce <_ZN7TwoWire15endTransmissionEv>
                        break;
 8086ac6:	e7b7      	b.n	8086a38 <_ZN7HIH61XX6updateEv+0x34>
                        Wire.endTransmission();
 8086ac8:	f002 ffd6 	bl	8089a78 <_Z19__fetch_global_Wirev>
 8086acc:	f002 fe7f 	bl	80897ce <_ZN7TwoWire15endTransmissionEv>
 8086ad0:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 8086ad2:	2604      	movs	r6, #4
 8086ad4:	f023 030f 	bic.w	r3, r3, #15
 8086ad8:	f043 0304 	orr.w	r3, r3, #4
 8086adc:	71a3      	strb	r3, [r4, #6]
 8086ade:	e79d      	b.n	8086a1c <_ZN7HIH61XX6updateEv+0x18>
 8086ae0:	79a3      	ldrb	r3, [r4, #6]
                return setError(CommunicationError);
 8086ae2:	2602      	movs	r6, #2
 8086ae4:	f023 030f 	bic.w	r3, r3, #15
 8086ae8:	f043 0302 	orr.w	r3, r3, #2
 8086aec:	71a3      	strb	r3, [r4, #6]
 8086aee:	e795      	b.n	8086a1c <_ZN7HIH61XX6updateEv+0x18>
        Serial.print("...");
 8086af0:	f002 fc80 	bl	80893f4 <_Z16_fetch_usbserialv>
 8086af4:	490a      	ldr	r1, [pc, #40]	; (8086b20 <_ZN7HIH61XX6updateEv+0x11c>)
 8086af6:	f001 fc11 	bl	808831c <_ZN5Print5printEPKc>
        Serial.println(azer);
 8086afa:	f002 fc7b 	bl	80893f4 <_Z16_fetch_usbserialv>
 8086afe:	4605      	mov	r5, r0
        return printNumber(val, base) + t;
 8086b00:	4631      	mov	r1, r6
 8086b02:	220a      	movs	r2, #10
 8086b04:	f001 fc31 	bl	808836a <_ZN5Print11printNumberEmh>
        n += println();
 8086b08:	4628      	mov	r0, r5
 8086b0a:	f001 fc0e 	bl	808832a <_ZN5Print7printlnEv>
 8086b0e:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 8086b10:	2601      	movs	r6, #1
 8086b12:	f023 030f 	bic.w	r3, r3, #15
 8086b16:	f043 0301 	orr.w	r3, r3, #1
 8086b1a:	71a3      	strb	r3, [r4, #6]
 8086b1c:	e77e      	b.n	8086a1c <_ZN7HIH61XX6updateEv+0x18>
 8086b1e:	bf00      	nop
 8086b20:	0808e673 	.word	0x0808e673

08086b24 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8086b24:	2a68      	cmp	r2, #104	; 0x68
uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 8086b26:	b538      	push	{r3, r4, r5, lr}
 8086b28:	460d      	mov	r5, r1
    switch (command) {
 8086b2a:	d01a      	beq.n	8086b62 <_ZN7HIH61XX14commandProcessER6Streamh+0x3e>
 8086b2c:	d80c      	bhi.n	8086b48 <_ZN7HIH61XX14commandProcessER6Streamh+0x24>
 8086b2e:	2a31      	cmp	r2, #49	; 0x31
 8086b30:	d038      	beq.n	8086ba4 <_ZN7HIH61XX14commandProcessER6Streamh+0x80>
 8086b32:	2a61      	cmp	r2, #97	; 0x61
 8086b34:	d030      	beq.n	8086b98 <_ZN7HIH61XX14commandProcessER6Streamh+0x74>
 8086b36:	2a30      	cmp	r2, #48	; 0x30
 8086b38:	d038      	beq.n	8086bac <_ZN7HIH61XX14commandProcessER6Streamh+0x88>
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 8086b3a:	220a      	movs	r2, #10
 8086b3c:	21fe      	movs	r1, #254	; 0xfe
 8086b3e:	4628      	mov	r0, r5
 8086b40:	f7fe fb64 	bl	808520c <_ZN5Print7printlnIhLi0EEEjT_i>
            //  stop
        case '0':
            return commandReply(stream, stop());
    }

    return commandReply(stream, 254);
 8086b44:	24fe      	movs	r4, #254	; 0xfe
 8086b46:	e018      	b.n	8086b7a <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
    switch (command) {
 8086b48:	2a74      	cmp	r2, #116	; 0x74
 8086b4a:	d018      	beq.n	8086b7e <_ZN7HIH61XX14commandProcessER6Streamh+0x5a>
 8086b4c:	2a75      	cmp	r2, #117	; 0x75
 8086b4e:	d1f4      	bne.n	8086b3a <_ZN7HIH61XX14commandProcessER6Streamh+0x16>
            return commandReply(stream, update());
 8086b50:	f7ff ff58 	bl	8086a04 <_ZN7HIH61XX6updateEv>
            return commandReply(stream, stop());
 8086b54:	4604      	mov	r4, r0
 8086b56:	4601      	mov	r1, r0
 8086b58:	220a      	movs	r2, #10
 8086b5a:	4628      	mov	r0, r5
 8086b5c:	f7fe fb56 	bl	808520c <_ZN5Print7printlnIhLi0EEEjT_i>
 8086b60:	e00b      	b.n	8086b7a <_ZN7HIH61XX14commandProcessER6Streamh+0x56>
            return float(raw) / 16382;
 8086b62:	8900      	ldrh	r0, [r0, #8]
 8086b64:	f003 fda4 	bl	808a6b0 <__aeabi_ui2f>
 8086b68:	4912      	ldr	r1, [pc, #72]	; (8086bb4 <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 8086b6a:	f003 fead 	bl	808a8c8 <__aeabi_fdiv>
            return (float(raw) / 16382) * 165 - 40;
 8086b6e:	4601      	mov	r1, r0
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 8086b70:	2202      	movs	r2, #2
 8086b72:	4628      	mov	r0, r5
 8086b74:	f001 fce4 	bl	8088540 <_ZN5Print7printlnEfi>
            return commandReply(stream, 0, temperature());
 8086b78:	2400      	movs	r4, #0
}
 8086b7a:	4620      	mov	r0, r4
 8086b7c:	bd38      	pop	{r3, r4, r5, pc}
            return (float(raw) / 16382) * 165 - 40;
 8086b7e:	8940      	ldrh	r0, [r0, #10]
 8086b80:	f003 fd96 	bl	808a6b0 <__aeabi_ui2f>
 8086b84:	490b      	ldr	r1, [pc, #44]	; (8086bb4 <_ZN7HIH61XX14commandProcessER6Streamh+0x90>)
 8086b86:	f003 fe9f 	bl	808a8c8 <__aeabi_fdiv>
 8086b8a:	490b      	ldr	r1, [pc, #44]	; (8086bb8 <_ZN7HIH61XX14commandProcessER6Streamh+0x94>)
 8086b8c:	f003 fde8 	bl	808a760 <__aeabi_fmul>
 8086b90:	490a      	ldr	r1, [pc, #40]	; (8086bbc <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8086b92:	f003 fcdb 	bl	808a54c <__aeabi_fsub>
 8086b96:	e7ea      	b.n	8086b6e <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
            stream.println(data);
 8086b98:	7901      	ldrb	r1, [r0, #4]
 8086b9a:	220a      	movs	r2, #10
 8086b9c:	4628      	mov	r0, r5
 8086b9e:	f7fe fb35 	bl	808520c <_ZN5Print7printlnIhLi0EEEjT_i>
 8086ba2:	e7e9      	b.n	8086b78 <_ZN7HIH61XX14commandProcessER6Streamh+0x54>
            return commandReply(stream, start());
 8086ba4:	6803      	ldr	r3, [r0, #0]
 8086ba6:	681b      	ldr	r3, [r3, #0]
            return commandReply(stream, stop());
 8086ba8:	4798      	blx	r3
 8086baa:	e7d3      	b.n	8086b54 <_ZN7HIH61XX14commandProcessER6Streamh+0x30>
 8086bac:	6803      	ldr	r3, [r0, #0]
 8086bae:	685b      	ldr	r3, [r3, #4]
 8086bb0:	e7fa      	b.n	8086ba8 <_ZN7HIH61XX14commandProcessER6Streamh+0x84>
 8086bb2:	bf00      	nop
 8086bb4:	467ff800 	.word	0x467ff800
 8086bb8:	43250000 	.word	0x43250000
 8086bbc:	42200000 	.word	0x42200000

08086bc0 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8086bc0:	b510      	push	{r4, lr}
 8086bc2:	4604      	mov	r4, r0
 8086bc4:	4b05      	ldr	r3, [pc, #20]	; (8086bdc <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 8086bc6:	f840 3b2c 	str.w	r3, [r0], #44
 8086bca:	f001 f8fb 	bl	8087dc4 <_ZN6StringD1Ev>
 8086bce:	f104 000c 	add.w	r0, r4, #12
 8086bd2:	f001 f8f7 	bl	8087dc4 <_ZN6StringD1Ev>

}
 8086bd6:	4620      	mov	r0, r4
 8086bd8:	bd10      	pop	{r4, pc}
 8086bda:	bf00      	nop
 8086bdc:	0808ea80 	.word	0x0808ea80

08086be0 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8086be0:	b510      	push	{r4, lr}
 8086be2:	4604      	mov	r4, r0
}
 8086be4:	f7ff ffec 	bl	8086bc0 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8086be8:	4620      	mov	r0, r4
 8086bea:	2144      	movs	r1, #68	; 0x44
 8086bec:	f002 ff99 	bl	8089b22 <_ZdlPvj>
 8086bf0:	4620      	mov	r0, r4
 8086bf2:	bd10      	pop	{r4, pc}

08086bf4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8086bf4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8086bf6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8086bf8:	4604      	mov	r4, r0
      if (_M_manager)
 8086bfa:	b113      	cbz	r3, 8086c02 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8086bfc:	2203      	movs	r2, #3
 8086bfe:	4601      	mov	r1, r0
 8086c00:	4798      	blx	r3
    }
 8086c02:	4620      	mov	r0, r4
 8086c04:	bd10      	pop	{r4, pc}
	...

08086c08 <_ZN23GoogleMapsDeviceLocatorC1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8086c08:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086c0a:	4b0f      	ldr	r3, [pc, #60]	; (8086c48 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)
 8086c0c:	2500      	movs	r5, #0
 8086c0e:	6003      	str	r3, [r0, #0]
 8086c10:	f242 7310 	movw	r3, #10000	; 0x2710
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8086c14:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086c16:	e9c0 5301 	strd	r5, r3, [r0, #4]
 8086c1a:	490c      	ldr	r1, [pc, #48]	; (8086c4c <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8086c1c:	300c      	adds	r0, #12
 8086c1e:	f001 f91b 	bl	8087e58 <_ZN6StringC1EPKc>
 8086c22:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8086c26:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8086c2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8086c2c:	4908      	ldr	r1, [pc, #32]	; (8086c50 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8086c2e:	6265      	str	r5, [r4, #36]	; 0x24
 8086c30:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8086c34:	f001 f910 	bl	8087e58 <_ZN6StringC1EPKc>
 8086c38:	f44f 729b 	mov.w	r2, #310	; 0x136
 8086c3c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
}
 8086c40:	4620      	mov	r0, r4
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086c42:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
}
 8086c46:	bd38      	pop	{r3, r4, r5, pc}
 8086c48:	0808ea80 	.word	0x0808ea80
 8086c4c:	0808ea64 	.word	0x0808ea64
 8086c50:	0808ea72 	.word	0x0808ea72

08086c54 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8086c54:	2201      	movs	r2, #1
 8086c56:	4b01      	ldr	r3, [pc, #4]	; (8086c5c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0x8>)
 8086c58:	701a      	strb	r2, [r3, #0]
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
 8086c5a:	4770      	bx	lr
 8086c5c:	20001cdb 	.word	0x20001cdb

08086c60 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8086c60:	b430      	push	{r4, r5}
 8086c62:	4605      	mov	r5, r0
 8086c64:	4618      	mov	r0, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8086c66:	681b      	ldr	r3, [r3, #0]
 8086c68:	681c      	ldr	r4, [r3, #0]
 8086c6a:	4613      	mov	r3, r2
 8086c6c:	46a4      	mov	ip, r4
 8086c6e:	460a      	mov	r2, r1
 8086c70:	4629      	mov	r1, r5
}
 8086c72:	bc30      	pop	{r4, r5}
	return presp->parse(type, buf, len);
 8086c74:	4760      	bx	ip
	...

08086c78 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8086c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086c7c:	460c      	mov	r4, r1
 8086c7e:	b08d      	sub	sp, #52	; 0x34
	String typeStr;
 8086c80:	494d      	ldr	r1, [pc, #308]	; (8086db8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8086c82:	a804      	add	r0, sp, #16
void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8086c84:	4616      	mov	r6, r2
 8086c86:	461d      	mov	r5, r3
	String typeStr;
 8086c88:	f001 f8e6 	bl	8087e58 <_ZN6StringC1EPKc>
	switch(type) {
 8086c8c:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8086c90:	d064      	beq.n	8086d5c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe4>
 8086c92:	dc1f      	bgt.n	8086cd4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5c>
 8086c94:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8086c98:	d05c      	beq.n	8086d54 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8086c9a:	dc13      	bgt.n	8086cc4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x4c>
 8086c9c:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8086ca0:	d056      	beq.n	8086d50 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd8>
 8086ca2:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8086ca6:	d055      	beq.n	8086d54 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xdc>
 8086ca8:	b35c      	cbz	r4, 8086d02 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8a>
		typeStr = String::format("type=0x%x", type);
 8086caa:	4622      	mov	r2, r4
 8086cac:	a808      	add	r0, sp, #32
 8086cae:	4943      	ldr	r1, [pc, #268]	; (8086dbc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8086cb0:	f001 faf6 	bl	80882a0 <_ZN6String6formatEPKcz>
 8086cb4:	a908      	add	r1, sp, #32
 8086cb6:	a804      	add	r0, sp, #16
 8086cb8:	f001 f918 	bl	8087eec <_ZN6StringaSEOS_>
 8086cbc:	a808      	add	r0, sp, #32
 8086cbe:	f001 f881 	bl	8087dc4 <_ZN6StringD1Ev>
		break;
 8086cc2:	e022      	b.n	8086d0a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x92>
	switch(type) {
 8086cc4:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8086cc8:	d046      	beq.n	8086d58 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe0>
 8086cca:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8086cce:	d1ec      	bne.n	8086caa <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_NOCARRIER";
 8086cd0:	493b      	ldr	r1, [pc, #236]	; (8086dc0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
 8086cd2:	e017      	b.n	8086d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8086cd4:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8086cd8:	d046      	beq.n	8086d68 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8086cda:	dc0a      	bgt.n	8086cf2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7a>
 8086cdc:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8086ce0:	d03e      	beq.n	8086d60 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xe8>
 8086ce2:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8086ce6:	d03d      	beq.n	8086d64 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xec>
 8086ce8:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8086cec:	d1dd      	bne.n	8086caa <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_BUSY";
 8086cee:	4935      	ldr	r1, [pc, #212]	; (8086dc4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8086cf0:	e008      	b.n	8086d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
	switch(type) {
 8086cf2:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8086cf6:	d037      	beq.n	8086d68 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf0>
 8086cf8:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8086cfc:	d1d5      	bne.n	8086caa <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x32>
		typeStr = "TYPE_ABORTED";
 8086cfe:	4932      	ldr	r1, [pc, #200]	; (8086dc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8086d00:	e000      	b.n	8086d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_UNKNOWN";
 8086d02:	4932      	ldr	r1, [pc, #200]	; (8086dcc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
		typeStr = "TYPE_OK";
 8086d04:	a804      	add	r0, sp, #16
 8086d06:	f001 f8f9 	bl	8087efc <_ZN6StringaSEPKc>
	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8086d0a:	462b      	mov	r3, r5
 8086d0c:	9a04      	ldr	r2, [sp, #16]
 8086d0e:	4930      	ldr	r1, [pc, #192]	; (8086dd0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8086d10:	4830      	ldr	r0, [pc, #192]	; (8086dd4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8086d12:	f7f9 fed6 	bl	8080ac2 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8086d16:	4928      	ldr	r1, [pc, #160]	; (8086db8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8086d18:	a808      	add	r0, sp, #32
 8086d1a:	f001 f89d 	bl	8087e58 <_ZN6StringC1EPKc>
	for(int ii = 0; ii < len; ii++) {
 8086d1e:	2400      	movs	r4, #0
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8086d20:	4f2d      	ldr	r7, [pc, #180]	; (8086dd8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8086d22:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8086df8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x180>
 8086d26:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8086dfc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x184>
	for(int ii = 0; ii < len; ii++) {
 8086d2a:	42ac      	cmp	r4, r5
 8086d2c:	da35      	bge.n	8086d9a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x122>
		if (buf[ii] == '\n') {
 8086d2e:	5d31      	ldrb	r1, [r6, r4]
 8086d30:	290a      	cmp	r1, #10
 8086d32:	d11b      	bne.n	8086d6c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf4>
 8086d34:	4649      	mov	r1, r9
 8086d36:	a808      	add	r0, sp, #32
 8086d38:	f001 f94c 	bl	8087fd4 <_ZN6String6concatEPKc>
			Log.info(out);
 8086d3c:	9908      	ldr	r1, [sp, #32]
 8086d3e:	4825      	ldr	r0, [pc, #148]	; (8086dd4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8086d40:	f7f9 febf 	bl	8080ac2 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8086d44:	491c      	ldr	r1, [pc, #112]	; (8086db8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8086d46:	a808      	add	r0, sp, #32
 8086d48:	f001 f8d8 	bl	8087efc <_ZN6StringaSEPKc>
	for(int ii = 0; ii < len; ii++) {
 8086d4c:	3401      	adds	r4, #1
 8086d4e:	e7ec      	b.n	8086d2a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb2>
		typeStr = "TYPE_OK";
 8086d50:	4922      	ldr	r1, [pc, #136]	; (8086ddc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8086d52:	e7d7      	b.n	8086d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_ERROR";
 8086d54:	4922      	ldr	r1, [pc, #136]	; (8086de0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8086d56:	e7d5      	b.n	8086d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_CONNECT";
 8086d58:	4922      	ldr	r1, [pc, #136]	; (8086de4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8086d5a:	e7d3      	b.n	8086d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NODIALTONE";
 8086d5c:	4922      	ldr	r1, [pc, #136]	; (8086de8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8086d5e:	e7d1      	b.n	8086d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_NOANSWER";
 8086d60:	4922      	ldr	r1, [pc, #136]	; (8086dec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8086d62:	e7cf      	b.n	8086d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PROMPT";
 8086d64:	4922      	ldr	r1, [pc, #136]	; (8086df0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8086d66:	e7cd      	b.n	8086d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		typeStr = "TYPE_PLUS";
 8086d68:	4922      	ldr	r1, [pc, #136]	; (8086df4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8086d6a:	e7cb      	b.n	8086d04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
		if (buf[ii] == '\r') {
 8086d6c:	290d      	cmp	r1, #13
 8086d6e:	d104      	bne.n	8086d7a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x102>
 8086d70:	4641      	mov	r1, r8
			out.concat(hex);
 8086d72:	a808      	add	r0, sp, #32
 8086d74:	f001 f92e 	bl	8087fd4 <_ZN6String6concatEPKc>
 8086d78:	e7e8      	b.n	8086d4c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8086d7a:	f1a1 0320 	sub.w	r3, r1, #32
 8086d7e:	2b5e      	cmp	r3, #94	; 0x5e
 8086d80:	d907      	bls.n	8086d92 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11a>
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8086d82:	460b      	mov	r3, r1
 8086d84:	463a      	mov	r2, r7
 8086d86:	210a      	movs	r1, #10
 8086d88:	a801      	add	r0, sp, #4
 8086d8a:	f000 fcfb 	bl	8087784 <snprintf>
			out.concat(hex);
 8086d8e:	a901      	add	r1, sp, #4
 8086d90:	e7ef      	b.n	8086d72 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xfa>
			out.concat(buf[ii]);
 8086d92:	a808      	add	r0, sp, #32
 8086d94:	f001 f92d 	bl	8087ff2 <_ZN6String6concatEc>
 8086d98:	e7d8      	b.n	8086d4c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xd4>
	if (out.length() > 0) {
 8086d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086d9c:	b11b      	cbz	r3, 8086da6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x12e>
		Log.info(out);
 8086d9e:	9908      	ldr	r1, [sp, #32]
 8086da0:	480c      	ldr	r0, [pc, #48]	; (8086dd4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8086da2:	f7f9 fe8e 	bl	8080ac2 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8086da6:	a808      	add	r0, sp, #32
 8086da8:	f001 f80c 	bl	8087dc4 <_ZN6StringD1Ev>
	String typeStr;
 8086dac:	a804      	add	r0, sp, #16
 8086dae:	f001 f809 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8086db2:	b00d      	add	sp, #52	; 0x34
 8086db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086db8:	0808eb69 	.word	0x0808eb69
 8086dbc:	0808eb0f 	.word	0x0808eb0f
 8086dc0:	0808eab5 	.word	0x0808eab5
 8086dc4:	0808ead4 	.word	0x0808ead4
 8086dc8:	0808eb02 	.word	0x0808eb02
 8086dcc:	0808ea88 	.word	0x0808ea88
 8086dd0:	0808eb19 	.word	0x0808eb19
 8086dd4:	20001cf0 	.word	0x20001cf0
 8086dd8:	0808eb40 	.word	0x0808eb40
 8086ddc:	0808ea95 	.word	0x0808ea95
 8086de0:	0808ea9d 	.word	0x0808ea9d
 8086de4:	0808eaa8 	.word	0x0808eaa8
 8086de8:	0808eac4 	.word	0x0808eac4
 8086dec:	0808eade 	.word	0x0808eade
 8086df0:	0808eaec 	.word	0x0808eaec
 8086df4:	0808eaf8 	.word	0x0808eaf8
 8086df8:	0808eb3d 	.word	0x0808eb3d
 8086dfc:	0808eb3a 	.word	0x0808eb3a

08086e00 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8086e00:	b538      	push	{r3, r4, r5, lr}
class CellularHelperCommonResponse {
 8086e02:	f06f 0302 	mvn.w	r3, #2
 8086e06:	6043      	str	r3, [r0, #4]
 8086e08:	2300      	movs	r3, #0
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8086e0a:	4604      	mov	r4, r0
 8086e0c:	4d07      	ldr	r5, [pc, #28]	; (8086e2c <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
class CellularHelperCommonResponse {
 8086e0e:	7203      	strb	r3, [r0, #8]
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8086e10:	4b07      	ldr	r3, [pc, #28]	; (8086e30 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 8086e12:	4629      	mov	r1, r5
 8086e14:	f840 3b0c 	str.w	r3, [r0], #12
 8086e18:	f001 f81e 	bl	8087e58 <_ZN6StringC1EPKc>
 8086e1c:	4629      	mov	r1, r5
 8086e1e:	f104 001c 	add.w	r0, r4, #28
 8086e22:	f001 f819 	bl	8087e58 <_ZN6StringC1EPKc>
 8086e26:	4620      	mov	r0, r4
 8086e28:	bd38      	pop	{r3, r4, r5, pc}
 8086e2a:	bf00      	nop
 8086e2c:	0808eb69 	.word	0x0808eb69
 8086e30:	0808eb88 	.word	0x0808eb88

08086e34 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8086e34:	b510      	push	{r4, lr}
 8086e36:	4604      	mov	r4, r0
 8086e38:	4b05      	ldr	r3, [pc, #20]	; (8086e50 <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8086e3a:	f840 3b1c 	str.w	r3, [r0], #28
 8086e3e:	f000 ffc1 	bl	8087dc4 <_ZN6StringD1Ev>
 8086e42:	f104 000c 	add.w	r0, r4, #12
 8086e46:	f000 ffbd 	bl	8087dc4 <_ZN6StringD1Ev>
 8086e4a:	4620      	mov	r0, r4
 8086e4c:	bd10      	pop	{r4, pc}
 8086e4e:	bf00      	nop
 8086e50:	0808eb88 	.word	0x0808eb88

08086e54 <_ZN28CellularHelperStringResponseC1Ev>:
class CellularHelperCommonResponse {
 8086e54:	f06f 0302 	mvn.w	r3, #2
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8086e58:	b510      	push	{r4, lr}
class CellularHelperCommonResponse {
 8086e5a:	6043      	str	r3, [r0, #4]
 8086e5c:	2300      	movs	r3, #0
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8086e5e:	4604      	mov	r4, r0
class CellularHelperCommonResponse {
 8086e60:	7203      	strb	r3, [r0, #8]
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8086e62:	4b04      	ldr	r3, [pc, #16]	; (8086e74 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 8086e64:	4904      	ldr	r1, [pc, #16]	; (8086e78 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 8086e66:	f840 3b0c 	str.w	r3, [r0], #12
 8086e6a:	f000 fff5 	bl	8087e58 <_ZN6StringC1EPKc>
 8086e6e:	4620      	mov	r0, r4
 8086e70:	bd10      	pop	{r4, pc}
 8086e72:	bf00      	nop
 8086e74:	0808eb7c 	.word	0x0808eb7c
 8086e78:	0808eb69 	.word	0x0808eb69

08086e7c <_ZN28CellularHelperStringResponseD1Ev>:
 8086e7c:	b510      	push	{r4, lr}
 8086e7e:	4604      	mov	r4, r0
 8086e80:	4b03      	ldr	r3, [pc, #12]	; (8086e90 <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 8086e82:	f840 3b0c 	str.w	r3, [r0], #12
 8086e86:	f000 ff9d 	bl	8087dc4 <_ZN6StringD1Ev>
 8086e8a:	4620      	mov	r0, r4
 8086e8c:	bd10      	pop	{r4, pc}
 8086e8e:	bf00      	nop
 8086e90:	0808eb7c 	.word	0x0808eb7c

08086e94 <_ZNK19CellularHelperClass15getManufacturerEv>:
String CellularHelperClass::getManufacturer() const {
 8086e94:	b510      	push	{r4, lr}
 8086e96:	4604      	mov	r4, r0
 8086e98:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8086e9a:	a801      	add	r0, sp, #4
 8086e9c:	f7ff ffda 	bl	8086e54 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 8086ea0:	f242 7210 	movw	r2, #10000	; 0x2710
 8086ea4:	4b07      	ldr	r3, [pc, #28]	; (8086ec4 <_ZNK19CellularHelperClass15getManufacturerEv+0x30>)
 8086ea6:	a901      	add	r1, sp, #4
 8086ea8:	4807      	ldr	r0, [pc, #28]	; (8086ec8 <_ZNK19CellularHelperClass15getManufacturerEv+0x34>)
 8086eaa:	f000 fb0f 	bl	80874cc <cellular_command>
	return resp.string;
 8086eae:	a904      	add	r1, sp, #16
 8086eb0:	4620      	mov	r0, r4
 8086eb2:	f001 f810 	bl	8087ed6 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 8086eb6:	a801      	add	r0, sp, #4
 8086eb8:	f7ff ffe0 	bl	8086e7c <_ZN28CellularHelperStringResponseD1Ev>
}
 8086ebc:	4620      	mov	r0, r4
 8086ebe:	b008      	add	sp, #32
 8086ec0:	bd10      	pop	{r4, pc}
 8086ec2:	bf00      	nop
 8086ec4:	0808eb47 	.word	0x0808eb47
 8086ec8:	08086c61 	.word	0x08086c61

08086ecc <_ZNK19CellularHelperClass7getIMEIEv>:
String CellularHelperClass::getIMEI() const {
 8086ecc:	b510      	push	{r4, lr}
 8086ece:	4604      	mov	r4, r0
 8086ed0:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8086ed2:	a801      	add	r0, sp, #4
 8086ed4:	f7ff ffbe 	bl	8086e54 <_ZN28CellularHelperStringResponseC1Ev>
 8086ed8:	f242 7210 	movw	r2, #10000	; 0x2710
 8086edc:	4b07      	ldr	r3, [pc, #28]	; (8086efc <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 8086ede:	a901      	add	r1, sp, #4
 8086ee0:	4807      	ldr	r0, [pc, #28]	; (8086f00 <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 8086ee2:	f000 faf3 	bl	80874cc <cellular_command>
	return resp.string;
 8086ee6:	a904      	add	r1, sp, #16
 8086ee8:	4620      	mov	r0, r4
 8086eea:	f000 fff4 	bl	8087ed6 <_ZN6StringC1ERKS_>
	CellularHelperStringResponse resp;
 8086eee:	a801      	add	r0, sp, #4
 8086ef0:	f7ff ffc4 	bl	8086e7c <_ZN28CellularHelperStringResponseD1Ev>
}
 8086ef4:	4620      	mov	r0, r4
 8086ef6:	b008      	add	sp, #32
 8086ef8:	bd10      	pop	{r4, pc}
 8086efa:	bf00      	nop
 8086efc:	0808eb51 	.word	0x0808eb51
 8086f00:	08086c61 	.word	0x08086c61

08086f04 <_ZNK19CellularHelperClass7getIMSIEv>:
 8086f04:	b510      	push	{r4, lr}
 8086f06:	4604      	mov	r4, r0
 8086f08:	f7ff ffc4 	bl	8086e94 <_ZNK19CellularHelperClass15getManufacturerEv>
 8086f0c:	4620      	mov	r0, r4
 8086f0e:	bd10      	pop	{r4, pc}

08086f10 <_ZNK19CellularHelperClass8getICCIDEv>:
String CellularHelperClass::getICCID() const {
 8086f10:	b510      	push	{r4, lr}
 8086f12:	4604      	mov	r4, r0
 8086f14:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 8086f16:	a801      	add	r0, sp, #4
 8086f18:	f7ff ff72 	bl	8086e00 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 8086f1c:	490a      	ldr	r1, [pc, #40]	; (8086f48 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 8086f1e:	a804      	add	r0, sp, #16
 8086f20:	f000 ffec 	bl	8087efc <_ZN6StringaSEPKc>
 8086f24:	f242 7210 	movw	r2, #10000	; 0x2710
 8086f28:	4b08      	ldr	r3, [pc, #32]	; (8086f4c <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 8086f2a:	a901      	add	r1, sp, #4
 8086f2c:	4808      	ldr	r0, [pc, #32]	; (8086f50 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 8086f2e:	f000 facd 	bl	80874cc <cellular_command>
	return resp.string;
 8086f32:	a908      	add	r1, sp, #32
 8086f34:	4620      	mov	r0, r4
 8086f36:	f000 ffce 	bl	8087ed6 <_ZN6StringC1ERKS_>
	CellularHelperPlusStringResponse resp;
 8086f3a:	a801      	add	r0, sp, #4
 8086f3c:	f7ff ff7a 	bl	8086e34 <_ZN32CellularHelperPlusStringResponseD1Ev>
}
 8086f40:	4620      	mov	r0, r4
 8086f42:	b00c      	add	sp, #48	; 0x30
 8086f44:	bd10      	pop	{r4, pc}
 8086f46:	bf00      	nop
 8086f48:	0808eb5b 	.word	0x0808eb5b
 8086f4c:	0808eb60 	.word	0x0808eb60
 8086f50:	08086c61 	.word	0x08086c61

08086f54 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8086f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086f58:	460c      	mov	r4, r1
 8086f5a:	461e      	mov	r6, r3
	str.reserve(str.length() + (size_t)len + 1);
 8086f5c:	1c59      	adds	r1, r3, #1
 8086f5e:	68a3      	ldr	r3, [r4, #8]
 8086f60:	4620      	mov	r0, r4
 8086f62:	4419      	add	r1, r3
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8086f64:	4617      	mov	r7, r2
 8086f66:	f89d 8018 	ldrb.w	r8, [sp, #24]
	for(int ii = 0; ii < len; ii++) {
 8086f6a:	2500      	movs	r5, #0
	str.reserve(str.length() + (size_t)len + 1);
 8086f6c:	f000 ff48 	bl	8087e00 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 8086f70:	42b5      	cmp	r5, r6
 8086f72:	da0c      	bge.n	8086f8e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 8086f74:	5d79      	ldrb	r1, [r7, r5]
 8086f76:	f1b8 0f00 	cmp.w	r8, #0
 8086f7a:	d003      	beq.n	8086f84 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x30>
 8086f7c:	290d      	cmp	r1, #13
 8086f7e:	d004      	beq.n	8086f8a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
 8086f80:	290a      	cmp	r1, #10
 8086f82:	d002      	beq.n	8086f8a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x36>
			str.concat(buf[ii]);
 8086f84:	4620      	mov	r0, r4
 8086f86:	f001 f834 	bl	8087ff2 <_ZN6String6concatEc>
	for(int ii = 0; ii < len; ii++) {
 8086f8a:	3501      	adds	r5, #1
 8086f8c:	e7f0      	b.n	8086f70 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
}
 8086f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08086f94 <_ZN28CellularHelperStringResponse5parseEiPKci>:
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8086f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 8086f96:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8086f9a:	4604      	mov	r4, r0
 8086f9c:	460f      	mov	r7, r1
 8086f9e:	4615      	mov	r5, r2
 8086fa0:	461e      	mov	r6, r3
	if (enableDebug) {
 8086fa2:	f1bc 0f00 	cmp.w	ip, #0
 8086fa6:	d001      	beq.n	8086fac <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 8086fa8:	f7ff fe66 	bl	8086c78 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_UNKNOWN) {
 8086fac:	b947      	cbnz	r7, 8086fc0 <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 8086fae:	2301      	movs	r3, #1
 8086fb0:	462a      	mov	r2, r5
 8086fb2:	9300      	str	r3, [sp, #0]
 8086fb4:	4804      	ldr	r0, [pc, #16]	; (8086fc8 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 8086fb6:	4633      	mov	r3, r6
 8086fb8:	f104 010c 	add.w	r1, r4, #12
 8086fbc:	f7ff ffca 	bl	8086f54 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
}
 8086fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8086fc4:	b003      	add	sp, #12
 8086fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086fc8:	20001cdc 	.word	0x20001cdc

08086fcc <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8086fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 8086fce:	f890 c008 	ldrb.w	ip, [r0, #8]
int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8086fd2:	4606      	mov	r6, r0
 8086fd4:	460d      	mov	r5, r1
 8086fd6:	4617      	mov	r7, r2
 8086fd8:	461c      	mov	r4, r3
 8086fda:	b08b      	sub	sp, #44	; 0x2c
	if (enableDebug) {
 8086fdc:	f1bc 0f00 	cmp.w	ip, #0
 8086fe0:	d001      	beq.n	8086fe6 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 8086fe2:	f7ff fe49 	bl	8086c78 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	if (type == TYPE_PLUS) {
 8086fe6:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8086fea:	d12a      	bne.n	8087042 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		char *copy = (char *) malloc(len + 1);
 8086fec:	1c60      	adds	r0, r4, #1
 8086fee:	f000 fba1 	bl	8087734 <malloc>
		if (copy) {
 8086ff2:	4605      	mov	r5, r0
 8086ff4:	b328      	cbz	r0, 8087042 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 8086ff6:	4622      	mov	r2, r4
 8086ff8:	4639      	mov	r1, r7
 8086ffa:	f003 ff4c 	bl	808ae96 <strncpy>
			copy[len] = 0;
 8086ffe:	2300      	movs	r3, #0
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8087000:	2120      	movs	r1, #32
			copy[len] = 0;
 8087002:	552b      	strb	r3, [r5, r4]
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8087004:	4a11      	ldr	r2, [pc, #68]	; (808704c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 8087006:	68f3      	ldr	r3, [r6, #12]
 8087008:	a802      	add	r0, sp, #8
 808700a:	f000 fbbb 	bl	8087784 <snprintf>
			char *start = strstr(copy, searchFor);
 808700e:	4628      	mov	r0, r5
 8087010:	a902      	add	r1, sp, #8
 8087012:	f003 ff53 	bl	808aebc <strstr>
			if (start) {
 8087016:	4604      	mov	r4, r0
 8087018:	b180      	cbz	r0, 808703c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 808701a:	a802      	add	r0, sp, #8
 808701c:	f003 ff21 	bl	808ae62 <strlen>
 8087020:	4404      	add	r4, r0
				char *end = strchr(start, '\r');
 8087022:	210d      	movs	r1, #13
 8087024:	4620      	mov	r0, r4
 8087026:	f003 fee1 	bl	808adec <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 808702a:	2301      	movs	r3, #1
 808702c:	4622      	mov	r2, r4
 808702e:	9300      	str	r3, [sp, #0]
 8087030:	f106 011c 	add.w	r1, r6, #28
 8087034:	1b03      	subs	r3, r0, r4
 8087036:	4806      	ldr	r0, [pc, #24]	; (8087050 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 8087038:	f7ff ff8c 	bl	8086f54 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			free(copy);
 808703c:	4628      	mov	r0, r5
 808703e:	f000 fb81 	bl	8087744 <free>
}
 8087042:	f04f 30ff 	mov.w	r0, #4294967295
 8087046:	b00b      	add	sp, #44	; 0x2c
 8087048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808704a:	bf00      	nop
 808704c:	0808eb6a 	.word	0x0808eb6a
 8087050:	20001cdc 	.word	0x20001cdc

08087054 <_ZN16SerialBufferBase17availableForWriteEv>:
int SerialBufferBase::available() {
	return ring.availableForRead();
}

int SerialBufferBase::availableForWrite() {
	return port.availableForWrite();
 8087054:	6980      	ldr	r0, [r0, #24]
 8087056:	6803      	ldr	r3, [r0, #0]
 8087058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808705a:	4718      	bx	r3

0808705c <_ZN16SerialBufferBase5flushEv>:
void SerialBufferBase::readClear() {
	ring.readClear();
}

void SerialBufferBase::flush() {
	port.flush();
 808705c:	6980      	ldr	r0, [r0, #24]
 808705e:	6803      	ldr	r3, [r0, #0]
 8087060:	69db      	ldr	r3, [r3, #28]
 8087062:	4718      	bx	r3

08087064 <_ZN16SerialBufferBase5writeEh>:
}

size_t SerialBufferBase::write(uint8_t c) {
	return port.write(c);
 8087064:	6980      	ldr	r0, [r0, #24]
 8087066:	6803      	ldr	r3, [r0, #0]
 8087068:	689b      	ldr	r3, [r3, #8]
 808706a:	4718      	bx	r3

0808706c <_ZN16SerialBufferBase9availableEv>:
	 *
	 * This is mainly for informational purposes. It's more efficient to call preRead() and check for a non-NULL
	 * return value than it is to call availableForRead().
	 */
	size_t availableForRead() const {
		return (size + head - tail) % size;
 808706c:	6a02      	ldr	r2, [r0, #32]
 808706e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8087070:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8087072:	4413      	add	r3, r2
 8087074:	1a1b      	subs	r3, r3, r0
 8087076:	fbb3 f0f2 	udiv	r0, r3, r2
}
 808707a:	fb02 3010 	mls	r0, r2, r0, r3
 808707e:	4770      	bx	lr

08087080 <_ZN16SerialBufferBase4readEv>:
int SerialBufferBase::read() {
 8087080:	b510      	push	{r4, lr}
	 *
	 * It's OK to not call postRead() if you're doing a peek at the data - look at the data that will be read without
	 * removing it.
	 */
	T *preRead() const {
		if (head == tail) {
 8087082:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8087084:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8087086:	429a      	cmp	r2, r3
 8087088:	d00e      	beq.n	80870a8 <_ZN16SerialBufferBase4readEv+0x28>
			return NULL;
		}
		else {
			return &elems[tail];
 808708a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 808708c:	69c2      	ldr	r2, [r0, #28]
	 *
	 * @return Returns true if an element was copied or false if there was no data to read.
	 */
	bool read(T *elem) {
		T *src = preRead();
		if (src != NULL) {
 808708e:	42da      	cmn	r2, r3
 8087090:	d00a      	beq.n	80870a8 <_ZN16SerialBufferBase4readEv+0x28>
			*elem = *src;
 8087092:	5cd3      	ldrb	r3, [r2, r3]
		size_t next = (tail + 1) % size;
 8087094:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8087096:	6a04      	ldr	r4, [r0, #32]
 8087098:	3201      	adds	r2, #1
 808709a:	fbb2 f1f4 	udiv	r1, r2, r4
 808709e:	fb04 2211 	mls	r2, r4, r1, r2
		tail = next;
 80870a2:	6282      	str	r2, [r0, #40]	; 0x28
		return (int) temp;
 80870a4:	4618      	mov	r0, r3
}
 80870a6:	bd10      	pop	{r4, pc}
		return -1;
 80870a8:	f04f 30ff 	mov.w	r0, #4294967295
 80870ac:	e7fb      	b.n	80870a6 <_ZN16SerialBufferBase4readEv+0x26>

080870ae <_ZN16SerialBufferBaseD1Ev>:
class SerialBufferBase : public Stream {
 80870ae:	4770      	bx	lr

080870b0 <_ZN16SerialBufferBaseD0Ev>:
 80870b0:	b510      	push	{r4, lr}
 80870b2:	4604      	mov	r4, r0
 80870b4:	2130      	movs	r1, #48	; 0x30
 80870b6:	f002 fd34 	bl	8089b22 <_ZdlPvj>
 80870ba:	4620      	mov	r0, r4
 80870bc:	bd10      	pop	{r4, pc}

080870be <_ZN16SerialBufferBase4peekEv>:
		if (head == tail) {
 80870be:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80870c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80870c2:	429a      	cmp	r2, r3
 80870c4:	d005      	beq.n	80870d2 <_ZN16SerialBufferBase4peekEv+0x14>
			return &elems[tail];
 80870c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80870c8:	69c2      	ldr	r2, [r0, #28]
	if (p != NULL) {
 80870ca:	42da      	cmn	r2, r3
 80870cc:	d001      	beq.n	80870d2 <_ZN16SerialBufferBase4peekEv+0x14>
		return (int) *p;
 80870ce:	5cd0      	ldrb	r0, [r2, r3]
 80870d0:	4770      	bx	lr
		return -1;
 80870d2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80870d6:	4770      	bx	lr

080870d8 <_ZN16SerialBufferBaseC1EPhjR11USARTSerial>:
SerialBufferBase::SerialBufferBase(uint8_t *buf, size_t bufSize, USARTSerial &port) :
 80870d8:	b570      	push	{r4, r5, r6, lr}
 80870da:	2500      	movs	r5, #0
 80870dc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80870e0:	e9c0 5601 	strd	r5, r6, [r0, #4]
	buf(buf), bufSize(bufSize), port(port), ring(buf, bufSize) {
 80870e4:	4e04      	ldr	r6, [pc, #16]	; (80870f8 <_ZN16SerialBufferBaseC1EPhjR11USARTSerial+0x20>)
	RingBuffer(T *elems, size_t size) : elems(elems), size(size) {};
 80870e6:	6245      	str	r5, [r0, #36]	; 0x24
 80870e8:	e9c0 1204 	strd	r1, r2, [r0, #16]
 80870ec:	e9c0 3106 	strd	r3, r1, [r0, #24]
 80870f0:	6006      	str	r6, [r0, #0]
 80870f2:	6202      	str	r2, [r0, #32]
 80870f4:	6285      	str	r5, [r0, #40]	; 0x28
}
 80870f6:	bd70      	pop	{r4, r5, r6, pc}
 80870f8:	0808eba4 	.word	0x0808eba4

080870fc <_ZN16SerialBufferBase5setupEv>:
	os_thread_create(&thread, "serialBuffer", OS_THREAD_PRIORITY_DEFAULT, threadFunctionStatic, (void *)this, 256);
 80870fc:	f44f 7380 	mov.w	r3, #256	; 0x100
void SerialBufferBase::setup() {
 8087100:	b507      	push	{r0, r1, r2, lr}
	os_thread_create(&thread, "serialBuffer", OS_THREAD_PRIORITY_DEFAULT, threadFunctionStatic, (void *)this, 256);
 8087102:	2202      	movs	r2, #2
 8087104:	e9cd 0300 	strd	r0, r3, [sp]
 8087108:	4903      	ldr	r1, [pc, #12]	; (8087118 <_ZN16SerialBufferBase5setupEv+0x1c>)
 808710a:	4b04      	ldr	r3, [pc, #16]	; (808711c <_ZN16SerialBufferBase5setupEv+0x20>)
 808710c:	302c      	adds	r0, #44	; 0x2c
 808710e:	f000 f8a5 	bl	808725c <os_thread_create>
}
 8087112:	b003      	add	sp, #12
 8087114:	f85d fb04 	ldr.w	pc, [sp], #4
 8087118:	0808eb8c 	.word	0x0808eb8c
 808711c:	08087167 	.word	0x08087167

08087120 <_ZN16SerialBufferBase14threadFunctionEv>:
}


void SerialBufferBase::threadFunction() {
 8087120:	b570      	push	{r4, r5, r6, lr}
 8087122:	4604      	mov	r4, r0
	 *
	 * If preWrite() returns a non-null value you must call postWrite() to commit the data, otherwise the data
	 * will not be saved. Don't call postWrite() if you get NULL back from preWrite()!
	 */
	T *preWrite() const {
		size_t next = (head + 1) % size;
 8087124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8087126:	6a21      	ldr	r1, [r4, #32]
 8087128:	3301      	adds	r3, #1
 808712a:	fbb3 f2f1 	udiv	r2, r3, r1
 808712e:	fb01 3312 	mls	r3, r1, r2, r3
		if (next == tail) {
 8087132:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8087134:	4283      	cmp	r3, r0
 8087136:	d013      	beq.n	8087160 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
			// No space to write
			return NULL;
		}
		return &elems[head];
 8087138:	6a65      	ldr	r5, [r4, #36]	; 0x24
 808713a:	69e6      	ldr	r6, [r4, #28]
	while(true) {
		// Consume all of the outstanding data on the hardware port before yielding as long as there
		// is room in the ring buffer
		while(true) {
			uint8_t *p = ring.preWrite();
			if (!p) {
 808713c:	42ee      	cmn	r6, r5
 808713e:	d00f      	beq.n	8087160 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
				// Ring buffer is full
				break;
			}

			int c = port.read();
 8087140:	69a0      	ldr	r0, [r4, #24]
 8087142:	6803      	ldr	r3, [r0, #0]
 8087144:	695b      	ldr	r3, [r3, #20]
 8087146:	4798      	blx	r3
			if (c < 0) {
 8087148:	2800      	cmp	r0, #0
 808714a:	db09      	blt.n	8087160 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
				break;
			}

			*p = (uint8_t) c;
 808714c:	5570      	strb	r0, [r6, r5]

	/**
	 * @brief Commits the write. Only call if preWrite() returned a non-NULL value.
	 */
	void postWrite() {
		size_t next = (head + 1) % size;
 808714e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8087150:	6a21      	ldr	r1, [r4, #32]
 8087152:	3301      	adds	r3, #1
 8087154:	fbb3 f2f1 	udiv	r2, r3, r1
 8087158:	fb01 3312 	mls	r3, r1, r2, r3
		head = next;
 808715c:	6263      	str	r3, [r4, #36]	; 0x24
	}
 808715e:	e7e1      	b.n	8087124 <_ZN16SerialBufferBase14threadFunctionEv+0x4>
			ring.postWrite();
		}

		os_thread_yield();
 8087160:	f000 f884 	bl	808726c <os_thread_yield>
	}
 8087164:	e7de      	b.n	8087124 <_ZN16SerialBufferBase14threadFunctionEv+0x4>

08087166 <_ZN16SerialBufferBase20threadFunctionStaticEPv>:
}

// [static]
void SerialBufferBase::threadFunctionStatic(void *param) {
 8087166:	b508      	push	{r3, lr}
	SerialBufferBase *This = (SerialBufferBase *)param;

	This->threadFunction();
 8087168:	f7ff ffda 	bl	8087120 <_ZN16SerialBufferBase14threadFunctionEv>

0808716c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808716c:	b508      	push	{r3, lr}
 808716e:	4b02      	ldr	r3, [pc, #8]	; (8087178 <HAL_Validate_Pin_Function+0xc>)
 8087170:	681b      	ldr	r3, [r3, #0]
 8087172:	685b      	ldr	r3, [r3, #4]
 8087174:	9301      	str	r3, [sp, #4]
 8087176:	bd08      	pop	{r3, pc}
 8087178:	080401b0 	.word	0x080401b0

0808717c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808717c:	b508      	push	{r3, lr}
 808717e:	4b02      	ldr	r3, [pc, #8]	; (8087188 <HAL_Pin_Mode+0xc>)
 8087180:	681b      	ldr	r3, [r3, #0]
 8087182:	689b      	ldr	r3, [r3, #8]
 8087184:	9301      	str	r3, [sp, #4]
 8087186:	bd08      	pop	{r3, pc}
 8087188:	080401b0 	.word	0x080401b0

0808718c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808718c:	b508      	push	{r3, lr}
 808718e:	4b02      	ldr	r3, [pc, #8]	; (8087198 <HAL_Get_Pin_Mode+0xc>)
 8087190:	681b      	ldr	r3, [r3, #0]
 8087192:	68db      	ldr	r3, [r3, #12]
 8087194:	9301      	str	r3, [sp, #4]
 8087196:	bd08      	pop	{r3, pc}
 8087198:	080401b0 	.word	0x080401b0

0808719c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808719c:	b508      	push	{r3, lr}
 808719e:	4b02      	ldr	r3, [pc, #8]	; (80871a8 <HAL_GPIO_Write+0xc>)
 80871a0:	681b      	ldr	r3, [r3, #0]
 80871a2:	691b      	ldr	r3, [r3, #16]
 80871a4:	9301      	str	r3, [sp, #4]
 80871a6:	bd08      	pop	{r3, pc}
 80871a8:	080401b0 	.word	0x080401b0

080871ac <hal_adc_set_sample_time>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
 80871ac:	b508      	push	{r3, lr}
 80871ae:	4b02      	ldr	r3, [pc, #8]	; (80871b8 <hal_adc_set_sample_time+0xc>)
 80871b0:	681b      	ldr	r3, [r3, #0]
 80871b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80871b4:	9301      	str	r3, [sp, #4]
 80871b6:	bd08      	pop	{r3, pc}
 80871b8:	080401b0 	.word	0x080401b0

080871bc <hal_adc_read>:
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80871bc:	b508      	push	{r3, lr}
 80871be:	4b02      	ldr	r3, [pc, #8]	; (80871c8 <hal_adc_read+0xc>)
 80871c0:	681b      	ldr	r3, [r3, #0]
 80871c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80871c4:	9301      	str	r3, [sp, #4]
 80871c6:	bd08      	pop	{r3, pc}
 80871c8:	080401b0 	.word	0x080401b0

080871cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80871cc:	b508      	push	{r3, lr}
 80871ce:	4b02      	ldr	r3, [pc, #8]	; (80871d8 <HAL_RNG_GetRandomNumber+0xc>)
 80871d0:	681b      	ldr	r3, [r3, #0]
 80871d2:	685b      	ldr	r3, [r3, #4]
 80871d4:	9301      	str	r3, [sp, #4]
 80871d6:	bd08      	pop	{r3, pc}
 80871d8:	0804019c 	.word	0x0804019c

080871dc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80871dc:	b508      	push	{r3, lr}
 80871de:	4b02      	ldr	r3, [pc, #8]	; (80871e8 <HAL_Delay_Microseconds+0xc>)
 80871e0:	681b      	ldr	r3, [r3, #0]
 80871e2:	68db      	ldr	r3, [r3, #12]
 80871e4:	9301      	str	r3, [sp, #4]
 80871e6:	bd08      	pop	{r3, pc}
 80871e8:	0804019c 	.word	0x0804019c

080871ec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80871ec:	b508      	push	{r3, lr}
 80871ee:	4b02      	ldr	r3, [pc, #8]	; (80871f8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80871f0:	681b      	ldr	r3, [r3, #0]
 80871f2:	695b      	ldr	r3, [r3, #20]
 80871f4:	9301      	str	r3, [sp, #4]
 80871f6:	bd08      	pop	{r3, pc}
 80871f8:	0804019c 	.word	0x0804019c

080871fc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80871fc:	b508      	push	{r3, lr}
 80871fe:	4b02      	ldr	r3, [pc, #8]	; (8087208 <HAL_EEPROM_Init+0xc>)
 8087200:	681b      	ldr	r3, [r3, #0]
 8087202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087204:	9301      	str	r3, [sp, #4]
 8087206:	bd08      	pop	{r3, pc}
 8087208:	0804019c 	.word	0x0804019c

0808720c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 808720c:	b508      	push	{r3, lr}
 808720e:	4b02      	ldr	r3, [pc, #8]	; (8087218 <HAL_EEPROM_Get+0xc>)
 8087210:	681b      	ldr	r3, [r3, #0]
 8087212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8087214:	9301      	str	r3, [sp, #4]
 8087216:	bd08      	pop	{r3, pc}
 8087218:	0804019c 	.word	0x0804019c

0808721c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 808721c:	b508      	push	{r3, lr}
 808721e:	4b02      	ldr	r3, [pc, #8]	; (8087228 <HAL_EEPROM_Put+0xc>)
 8087220:	681b      	ldr	r3, [r3, #0]
 8087222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087224:	9301      	str	r3, [sp, #4]
 8087226:	bd08      	pop	{r3, pc}
 8087228:	0804019c 	.word	0x0804019c

0808722c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 808722c:	b508      	push	{r3, lr}
 808722e:	4b02      	ldr	r3, [pc, #8]	; (8087238 <hal_rtc_time_is_valid+0xc>)
 8087230:	681b      	ldr	r3, [r3, #0]
 8087232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8087234:	9301      	str	r3, [sp, #4]
 8087236:	bd08      	pop	{r3, pc}
 8087238:	0804019c 	.word	0x0804019c

0808723c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 808723c:	b508      	push	{r3, lr}
 808723e:	4b02      	ldr	r3, [pc, #8]	; (8087248 <hal_rtc_get_time+0xc>)
 8087240:	681b      	ldr	r3, [r3, #0]
 8087242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8087244:	9301      	str	r3, [sp, #4]
 8087246:	bd08      	pop	{r3, pc}
 8087248:	0804019c 	.word	0x0804019c

0808724c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
 808724c:	b508      	push	{r3, lr}
 808724e:	4b02      	ldr	r3, [pc, #8]	; (8087258 <hal_rtc_set_time+0xc>)
 8087250:	681b      	ldr	r3, [r3, #0]
 8087252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8087254:	9301      	str	r3, [sp, #4]
 8087256:	bd08      	pop	{r3, pc}
 8087258:	0804019c 	.word	0x0804019c

0808725c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 808725c:	b508      	push	{r3, lr}
 808725e:	4b02      	ldr	r3, [pc, #8]	; (8087268 <os_thread_create+0xc>)
 8087260:	681b      	ldr	r3, [r3, #0]
 8087262:	685b      	ldr	r3, [r3, #4]
 8087264:	9301      	str	r3, [sp, #4]
 8087266:	bd08      	pop	{r3, pc}
 8087268:	080401d0 	.word	0x080401d0

0808726c <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 808726c:	b508      	push	{r3, lr}
 808726e:	4b02      	ldr	r3, [pc, #8]	; (8087278 <os_thread_yield+0xc>)
 8087270:	681b      	ldr	r3, [r3, #0]
 8087272:	68db      	ldr	r3, [r3, #12]
 8087274:	9301      	str	r3, [sp, #4]
 8087276:	bd08      	pop	{r3, pc}
 8087278:	080401d0 	.word	0x080401d0

0808727c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 808727c:	b508      	push	{r3, lr}
 808727e:	4b02      	ldr	r3, [pc, #8]	; (8087288 <os_mutex_recursive_create+0xc>)
 8087280:	681b      	ldr	r3, [r3, #0]
 8087282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8087284:	9301      	str	r3, [sp, #4]
 8087286:	bd08      	pop	{r3, pc}
 8087288:	080401d0 	.word	0x080401d0

0808728c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 808728c:	b508      	push	{r3, lr}
 808728e:	4b02      	ldr	r3, [pc, #8]	; (8087298 <os_mutex_recursive_destroy+0xc>)
 8087290:	681b      	ldr	r3, [r3, #0]
 8087292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087294:	9301      	str	r3, [sp, #4]
 8087296:	bd08      	pop	{r3, pc}
 8087298:	080401d0 	.word	0x080401d0

0808729c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 808729c:	b508      	push	{r3, lr}
 808729e:	4b02      	ldr	r3, [pc, #8]	; (80872a8 <os_mutex_recursive_lock+0xc>)
 80872a0:	681b      	ldr	r3, [r3, #0]
 80872a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80872a4:	9301      	str	r3, [sp, #4]
 80872a6:	bd08      	pop	{r3, pc}
 80872a8:	080401d0 	.word	0x080401d0

080872ac <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80872ac:	b508      	push	{r3, lr}
 80872ae:	4b02      	ldr	r3, [pc, #8]	; (80872b8 <os_mutex_recursive_unlock+0xc>)
 80872b0:	681b      	ldr	r3, [r3, #0]
 80872b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80872b4:	9301      	str	r3, [sp, #4]
 80872b6:	bd08      	pop	{r3, pc}
 80872b8:	080401d0 	.word	0x080401d0

080872bc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80872bc:	b508      	push	{r3, lr}
 80872be:	4b02      	ldr	r3, [pc, #8]	; (80872c8 <hal_usart_init+0xc>)
 80872c0:	681b      	ldr	r3, [r3, #0]
 80872c2:	699b      	ldr	r3, [r3, #24]
 80872c4:	9301      	str	r3, [sp, #4]
 80872c6:	bd08      	pop	{r3, pc}
 80872c8:	080401c4 	.word	0x080401c4

080872cc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80872cc:	b508      	push	{r3, lr}
 80872ce:	4b02      	ldr	r3, [pc, #8]	; (80872d8 <hal_usart_write+0xc>)
 80872d0:	681b      	ldr	r3, [r3, #0]
 80872d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80872d4:	9301      	str	r3, [sp, #4]
 80872d6:	bd08      	pop	{r3, pc}
 80872d8:	080401c4 	.word	0x080401c4

080872dc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80872dc:	b508      	push	{r3, lr}
 80872de:	4b02      	ldr	r3, [pc, #8]	; (80872e8 <hal_usart_available+0xc>)
 80872e0:	681b      	ldr	r3, [r3, #0]
 80872e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80872e4:	9301      	str	r3, [sp, #4]
 80872e6:	bd08      	pop	{r3, pc}
 80872e8:	080401c4 	.word	0x080401c4

080872ec <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80872ec:	b508      	push	{r3, lr}
 80872ee:	4b02      	ldr	r3, [pc, #8]	; (80872f8 <hal_usart_read+0xc>)
 80872f0:	681b      	ldr	r3, [r3, #0]
 80872f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80872f4:	9301      	str	r3, [sp, #4]
 80872f6:	bd08      	pop	{r3, pc}
 80872f8:	080401c4 	.word	0x080401c4

080872fc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80872fc:	b508      	push	{r3, lr}
 80872fe:	4b02      	ldr	r3, [pc, #8]	; (8087308 <hal_usart_peek+0xc>)
 8087300:	681b      	ldr	r3, [r3, #0]
 8087302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087304:	9301      	str	r3, [sp, #4]
 8087306:	bd08      	pop	{r3, pc}
 8087308:	080401c4 	.word	0x080401c4

0808730c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 808730c:	b508      	push	{r3, lr}
 808730e:	4b02      	ldr	r3, [pc, #8]	; (8087318 <hal_usart_flush+0xc>)
 8087310:	681b      	ldr	r3, [r3, #0]
 8087312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087314:	9301      	str	r3, [sp, #4]
 8087316:	bd08      	pop	{r3, pc}
 8087318:	080401c4 	.word	0x080401c4

0808731c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 808731c:	b508      	push	{r3, lr}
 808731e:	4b02      	ldr	r3, [pc, #8]	; (8087328 <hal_usart_is_enabled+0xc>)
 8087320:	681b      	ldr	r3, [r3, #0]
 8087322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087324:	9301      	str	r3, [sp, #4]
 8087326:	bd08      	pop	{r3, pc}
 8087328:	080401c4 	.word	0x080401c4

0808732c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 808732c:	b508      	push	{r3, lr}
 808732e:	4b02      	ldr	r3, [pc, #8]	; (8087338 <hal_usart_available_data_for_write+0xc>)
 8087330:	681b      	ldr	r3, [r3, #0]
 8087332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8087334:	9301      	str	r3, [sp, #4]
 8087336:	bd08      	pop	{r3, pc}
 8087338:	080401c4 	.word	0x080401c4

0808733c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 808733c:	b508      	push	{r3, lr}
 808733e:	4b02      	ldr	r3, [pc, #8]	; (8087348 <hal_usart_begin_config+0xc>)
 8087340:	681b      	ldr	r3, [r3, #0]
 8087342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8087344:	9301      	str	r3, [sp, #4]
 8087346:	bd08      	pop	{r3, pc}
 8087348:	080401c4 	.word	0x080401c4

0808734c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 808734c:	b508      	push	{r3, lr}
 808734e:	4b02      	ldr	r3, [pc, #8]	; (8087358 <hal_i2c_begin+0xc>)
 8087350:	681b      	ldr	r3, [r3, #0]
 8087352:	68db      	ldr	r3, [r3, #12]
 8087354:	9301      	str	r3, [sp, #4]
 8087356:	bd08      	pop	{r3, pc}
 8087358:	080401ac 	.word	0x080401ac

0808735c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 808735c:	b508      	push	{r3, lr}
 808735e:	4b02      	ldr	r3, [pc, #8]	; (8087368 <hal_i2c_begin_transmission+0xc>)
 8087360:	681b      	ldr	r3, [r3, #0]
 8087362:	699b      	ldr	r3, [r3, #24]
 8087364:	9301      	str	r3, [sp, #4]
 8087366:	bd08      	pop	{r3, pc}
 8087368:	080401ac 	.word	0x080401ac

0808736c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 808736c:	b508      	push	{r3, lr}
 808736e:	4b02      	ldr	r3, [pc, #8]	; (8087378 <hal_i2c_end_transmission+0xc>)
 8087370:	681b      	ldr	r3, [r3, #0]
 8087372:	69db      	ldr	r3, [r3, #28]
 8087374:	9301      	str	r3, [sp, #4]
 8087376:	bd08      	pop	{r3, pc}
 8087378:	080401ac 	.word	0x080401ac

0808737c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 808737c:	b508      	push	{r3, lr}
 808737e:	4b02      	ldr	r3, [pc, #8]	; (8087388 <hal_i2c_write+0xc>)
 8087380:	681b      	ldr	r3, [r3, #0]
 8087382:	6a1b      	ldr	r3, [r3, #32]
 8087384:	9301      	str	r3, [sp, #4]
 8087386:	bd08      	pop	{r3, pc}
 8087388:	080401ac 	.word	0x080401ac

0808738c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 808738c:	b508      	push	{r3, lr}
 808738e:	4b02      	ldr	r3, [pc, #8]	; (8087398 <hal_i2c_available+0xc>)
 8087390:	681b      	ldr	r3, [r3, #0]
 8087392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087394:	9301      	str	r3, [sp, #4]
 8087396:	bd08      	pop	{r3, pc}
 8087398:	080401ac 	.word	0x080401ac

0808739c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 808739c:	b508      	push	{r3, lr}
 808739e:	4b02      	ldr	r3, [pc, #8]	; (80873a8 <hal_i2c_read+0xc>)
 80873a0:	681b      	ldr	r3, [r3, #0]
 80873a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80873a4:	9301      	str	r3, [sp, #4]
 80873a6:	bd08      	pop	{r3, pc}
 80873a8:	080401ac 	.word	0x080401ac

080873ac <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80873ac:	b508      	push	{r3, lr}
 80873ae:	4b02      	ldr	r3, [pc, #8]	; (80873b8 <hal_i2c_peek+0xc>)
 80873b0:	681b      	ldr	r3, [r3, #0]
 80873b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80873b4:	9301      	str	r3, [sp, #4]
 80873b6:	bd08      	pop	{r3, pc}
 80873b8:	080401ac 	.word	0x080401ac

080873bc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80873bc:	b508      	push	{r3, lr}
 80873be:	4b02      	ldr	r3, [pc, #8]	; (80873c8 <hal_i2c_flush+0xc>)
 80873c0:	681b      	ldr	r3, [r3, #0]
 80873c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80873c4:	9301      	str	r3, [sp, #4]
 80873c6:	bd08      	pop	{r3, pc}
 80873c8:	080401ac 	.word	0x080401ac

080873cc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80873cc:	b508      	push	{r3, lr}
 80873ce:	4b02      	ldr	r3, [pc, #8]	; (80873d8 <hal_i2c_is_enabled+0xc>)
 80873d0:	681b      	ldr	r3, [r3, #0]
 80873d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80873d4:	9301      	str	r3, [sp, #4]
 80873d6:	bd08      	pop	{r3, pc}
 80873d8:	080401ac 	.word	0x080401ac

080873dc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80873dc:	b508      	push	{r3, lr}
 80873de:	4b02      	ldr	r3, [pc, #8]	; (80873e8 <hal_i2c_init+0xc>)
 80873e0:	681b      	ldr	r3, [r3, #0]
 80873e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80873e4:	9301      	str	r3, [sp, #4]
 80873e6:	bd08      	pop	{r3, pc}
 80873e8:	080401ac 	.word	0x080401ac

080873ec <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
 80873ec:	b508      	push	{r3, lr}
 80873ee:	4b02      	ldr	r3, [pc, #8]	; (80873f8 <hal_i2c_lock+0xc>)
 80873f0:	681b      	ldr	r3, [r3, #0]
 80873f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80873f4:	9301      	str	r3, [sp, #4]
 80873f6:	bd08      	pop	{r3, pc}
 80873f8:	080401ac 	.word	0x080401ac

080873fc <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
 80873fc:	b508      	push	{r3, lr}
 80873fe:	4b02      	ldr	r3, [pc, #8]	; (8087408 <hal_i2c_unlock+0xc>)
 8087400:	681b      	ldr	r3, [r3, #0]
 8087402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8087404:	9301      	str	r3, [sp, #4]
 8087406:	bd08      	pop	{r3, pc}
 8087408:	080401ac 	.word	0x080401ac

0808740c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 808740c:	b508      	push	{r3, lr}
 808740e:	4b02      	ldr	r3, [pc, #8]	; (8087418 <hal_i2c_request_ex+0xc>)
 8087410:	681b      	ldr	r3, [r3, #0]
 8087412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8087414:	9301      	str	r3, [sp, #4]
 8087416:	bd08      	pop	{r3, pc}
 8087418:	080401ac 	.word	0x080401ac

0808741c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 808741c:	b508      	push	{r3, lr}
 808741e:	4b02      	ldr	r3, [pc, #8]	; (8087428 <hal_spi_begin+0xc>)
 8087420:	681b      	ldr	r3, [r3, #0]
 8087422:	681b      	ldr	r3, [r3, #0]
 8087424:	9301      	str	r3, [sp, #4]
 8087426:	bd08      	pop	{r3, pc}
 8087428:	080401b4 	.word	0x080401b4

0808742c <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 808742c:	b508      	push	{r3, lr}
 808742e:	4b02      	ldr	r3, [pc, #8]	; (8087438 <hal_spi_set_bit_order+0xc>)
 8087430:	681b      	ldr	r3, [r3, #0]
 8087432:	689b      	ldr	r3, [r3, #8]
 8087434:	9301      	str	r3, [sp, #4]
 8087436:	bd08      	pop	{r3, pc}
 8087438:	080401b4 	.word	0x080401b4

0808743c <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 808743c:	b508      	push	{r3, lr}
 808743e:	4b02      	ldr	r3, [pc, #8]	; (8087448 <hal_spi_set_data_mode+0xc>)
 8087440:	681b      	ldr	r3, [r3, #0]
 8087442:	68db      	ldr	r3, [r3, #12]
 8087444:	9301      	str	r3, [sp, #4]
 8087446:	bd08      	pop	{r3, pc}
 8087448:	080401b4 	.word	0x080401b4

0808744c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 808744c:	b508      	push	{r3, lr}
 808744e:	4b02      	ldr	r3, [pc, #8]	; (8087458 <hal_spi_set_clock_divider+0xc>)
 8087450:	681b      	ldr	r3, [r3, #0]
 8087452:	691b      	ldr	r3, [r3, #16]
 8087454:	9301      	str	r3, [sp, #4]
 8087456:	bd08      	pop	{r3, pc}
 8087458:	080401b4 	.word	0x080401b4

0808745c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 808745c:	b508      	push	{r3, lr}
 808745e:	4b02      	ldr	r3, [pc, #8]	; (8087468 <hal_spi_transfer+0xc>)
 8087460:	681b      	ldr	r3, [r3, #0]
 8087462:	695b      	ldr	r3, [r3, #20]
 8087464:	9301      	str	r3, [sp, #4]
 8087466:	bd08      	pop	{r3, pc}
 8087468:	080401b4 	.word	0x080401b4

0808746c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 808746c:	b508      	push	{r3, lr}
 808746e:	4b02      	ldr	r3, [pc, #8]	; (8087478 <hal_spi_init+0xc>)
 8087470:	681b      	ldr	r3, [r3, #0]
 8087472:	69db      	ldr	r3, [r3, #28]
 8087474:	9301      	str	r3, [sp, #4]
 8087476:	bd08      	pop	{r3, pc}
 8087478:	080401b4 	.word	0x080401b4

0808747c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 808747c:	b508      	push	{r3, lr}
 808747e:	4b02      	ldr	r3, [pc, #8]	; (8087488 <hal_spi_is_enabled+0xc>)
 8087480:	681b      	ldr	r3, [r3, #0]
 8087482:	6a1b      	ldr	r3, [r3, #32]
 8087484:	9301      	str	r3, [sp, #4]
 8087486:	bd08      	pop	{r3, pc}
 8087488:	080401b4 	.word	0x080401b4

0808748c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 808748c:	b508      	push	{r3, lr}
 808748e:	4b02      	ldr	r3, [pc, #8]	; (8087498 <hal_spi_info+0xc>)
 8087490:	681b      	ldr	r3, [r3, #0]
 8087492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087494:	9301      	str	r3, [sp, #4]
 8087496:	bd08      	pop	{r3, pc}
 8087498:	080401b4 	.word	0x080401b4

0808749c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
 808749c:	b508      	push	{r3, lr}
 808749e:	4b02      	ldr	r3, [pc, #8]	; (80874a8 <hal_spi_transfer_dma+0xc>)
 80874a0:	681b      	ldr	r3, [r3, #0]
 80874a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80874a4:	9301      	str	r3, [sp, #4]
 80874a6:	bd08      	pop	{r3, pc}
 80874a8:	080401b4 	.word	0x080401b4

080874ac <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 80874ac:	b508      	push	{r3, lr}
 80874ae:	4b02      	ldr	r3, [pc, #8]	; (80874b8 <hal_spi_transfer_dma_status+0xc>)
 80874b0:	681b      	ldr	r3, [r3, #0]
 80874b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80874b4:	9301      	str	r3, [sp, #4]
 80874b6:	bd08      	pop	{r3, pc}
 80874b8:	080401b4 	.word	0x080401b4

080874bc <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80874bc:	b508      	push	{r3, lr}
 80874be:	4b02      	ldr	r3, [pc, #8]	; (80874c8 <inet_gethostbyname+0xc>)
 80874c0:	681b      	ldr	r3, [r3, #0]
 80874c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80874c4:	9301      	str	r3, [sp, #4]
 80874c6:	bd08      	pop	{r3, pc}
 80874c8:	08060020 	.word	0x08060020

080874cc <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 80874cc:	b508      	push	{r3, lr}
 80874ce:	4b02      	ldr	r3, [pc, #8]	; (80874d8 <cellular_command+0xc>)
 80874d0:	681b      	ldr	r3, [r3, #0]
 80874d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80874d4:	9301      	str	r3, [sp, #4]
 80874d6:	bd08      	pop	{r3, pc}
 80874d8:	08060020 	.word	0x08060020

080874dc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80874dc:	b508      	push	{r3, lr}
 80874de:	4b02      	ldr	r3, [pc, #8]	; (80874e8 <HAL_USB_USART_Init+0xc>)
 80874e0:	681b      	ldr	r3, [r3, #0]
 80874e2:	681b      	ldr	r3, [r3, #0]
 80874e4:	9301      	str	r3, [sp, #4]
 80874e6:	bd08      	pop	{r3, pc}
 80874e8:	0806001c 	.word	0x0806001c

080874ec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80874ec:	b508      	push	{r3, lr}
 80874ee:	4b02      	ldr	r3, [pc, #8]	; (80874f8 <HAL_USB_USART_Begin+0xc>)
 80874f0:	681b      	ldr	r3, [r3, #0]
 80874f2:	685b      	ldr	r3, [r3, #4]
 80874f4:	9301      	str	r3, [sp, #4]
 80874f6:	bd08      	pop	{r3, pc}
 80874f8:	0806001c 	.word	0x0806001c

080874fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80874fc:	b508      	push	{r3, lr}
 80874fe:	4b02      	ldr	r3, [pc, #8]	; (8087508 <HAL_USB_USART_Available_Data+0xc>)
 8087500:	681b      	ldr	r3, [r3, #0]
 8087502:	691b      	ldr	r3, [r3, #16]
 8087504:	9301      	str	r3, [sp, #4]
 8087506:	bd08      	pop	{r3, pc}
 8087508:	0806001c 	.word	0x0806001c

0808750c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808750c:	b508      	push	{r3, lr}
 808750e:	4b02      	ldr	r3, [pc, #8]	; (8087518 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8087510:	681b      	ldr	r3, [r3, #0]
 8087512:	695b      	ldr	r3, [r3, #20]
 8087514:	9301      	str	r3, [sp, #4]
 8087516:	bd08      	pop	{r3, pc}
 8087518:	0806001c 	.word	0x0806001c

0808751c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808751c:	b508      	push	{r3, lr}
 808751e:	4b02      	ldr	r3, [pc, #8]	; (8087528 <HAL_USB_USART_Receive_Data+0xc>)
 8087520:	681b      	ldr	r3, [r3, #0]
 8087522:	699b      	ldr	r3, [r3, #24]
 8087524:	9301      	str	r3, [sp, #4]
 8087526:	bd08      	pop	{r3, pc}
 8087528:	0806001c 	.word	0x0806001c

0808752c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808752c:	b508      	push	{r3, lr}
 808752e:	4b02      	ldr	r3, [pc, #8]	; (8087538 <HAL_USB_USART_Send_Data+0xc>)
 8087530:	681b      	ldr	r3, [r3, #0]
 8087532:	69db      	ldr	r3, [r3, #28]
 8087534:	9301      	str	r3, [sp, #4]
 8087536:	bd08      	pop	{r3, pc}
 8087538:	0806001c 	.word	0x0806001c

0808753c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808753c:	b508      	push	{r3, lr}
 808753e:	4b02      	ldr	r3, [pc, #8]	; (8087548 <HAL_USB_USART_Flush_Data+0xc>)
 8087540:	681b      	ldr	r3, [r3, #0]
 8087542:	6a1b      	ldr	r3, [r3, #32]
 8087544:	9301      	str	r3, [sp, #4]
 8087546:	bd08      	pop	{r3, pc}
 8087548:	0806001c 	.word	0x0806001c

0808754c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 808754c:	b508      	push	{r3, lr}
 808754e:	4b02      	ldr	r3, [pc, #8]	; (8087558 <log_message_v+0xc>)
 8087550:	681b      	ldr	r3, [r3, #0]
 8087552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8087554:	9301      	str	r3, [sp, #4]
 8087556:	bd08      	pop	{r3, pc}
 8087558:	080201a0 	.word	0x080201a0

0808755c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808755c:	b508      	push	{r3, lr}
 808755e:	4b02      	ldr	r3, [pc, #8]	; (8087568 <system_mode+0xc>)
 8087560:	681b      	ldr	r3, [r3, #0]
 8087562:	681b      	ldr	r3, [r3, #0]
 8087564:	9301      	str	r3, [sp, #4]
 8087566:	bd08      	pop	{r3, pc}
 8087568:	080401a4 	.word	0x080401a4

0808756c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808756c:	b508      	push	{r3, lr}
 808756e:	4b02      	ldr	r3, [pc, #8]	; (8087578 <set_system_mode+0xc>)
 8087570:	681b      	ldr	r3, [r3, #0]
 8087572:	685b      	ldr	r3, [r3, #4]
 8087574:	9301      	str	r3, [sp, #4]
 8087576:	bd08      	pop	{r3, pc}
 8087578:	080401a4 	.word	0x080401a4

0808757c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808757c:	b508      	push	{r3, lr}
 808757e:	4b02      	ldr	r3, [pc, #8]	; (8087588 <system_delay_ms+0xc>)
 8087580:	681b      	ldr	r3, [r3, #0]
 8087582:	695b      	ldr	r3, [r3, #20]
 8087584:	9301      	str	r3, [sp, #4]
 8087586:	bd08      	pop	{r3, pc}
 8087588:	080401a4 	.word	0x080401a4

0808758c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808758c:	b508      	push	{r3, lr}
 808758e:	4b02      	ldr	r3, [pc, #8]	; (8087598 <system_thread_set_state+0xc>)
 8087590:	681b      	ldr	r3, [r3, #0]
 8087592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087594:	9301      	str	r3, [sp, #4]
 8087596:	bd08      	pop	{r3, pc}
 8087598:	080401a4 	.word	0x080401a4

0808759c <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 808759c:	b508      	push	{r3, lr}
 808759e:	4b02      	ldr	r3, [pc, #8]	; (80875a8 <system_version_info+0xc>)
 80875a0:	681b      	ldr	r3, [r3, #0]
 80875a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80875a4:	9301      	str	r3, [sp, #4]
 80875a6:	bd08      	pop	{r3, pc}
 80875a8:	080401a4 	.word	0x080401a4

080875ac <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80875ac:	b508      	push	{r3, lr}
 80875ae:	4b02      	ldr	r3, [pc, #8]	; (80875b8 <application_thread_current+0xc>)
 80875b0:	681b      	ldr	r3, [r3, #0]
 80875b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80875b4:	9301      	str	r3, [sp, #4]
 80875b6:	bd08      	pop	{r3, pc}
 80875b8:	080401a4 	.word	0x080401a4

080875bc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80875bc:	b508      	push	{r3, lr}
 80875be:	4b02      	ldr	r3, [pc, #8]	; (80875c8 <application_thread_invoke+0xc>)
 80875c0:	681b      	ldr	r3, [r3, #0]
 80875c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80875c4:	9301      	str	r3, [sp, #4]
 80875c6:	bd08      	pop	{r3, pc}
 80875c8:	080401a4 	.word	0x080401a4

080875cc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80875cc:	b508      	push	{r3, lr}
 80875ce:	4b02      	ldr	r3, [pc, #8]	; (80875d8 <system_thread_get_state+0xc>)
 80875d0:	681b      	ldr	r3, [r3, #0]
 80875d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80875d4:	9301      	str	r3, [sp, #4]
 80875d6:	bd08      	pop	{r3, pc}
 80875d8:	080401a4 	.word	0x080401a4

080875dc <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 80875dc:	b508      	push	{r3, lr}
 80875de:	4b02      	ldr	r3, [pc, #8]	; (80875e8 <system_notify_time_changed+0xc>)
 80875e0:	681b      	ldr	r3, [r3, #0]
 80875e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80875e4:	9301      	str	r3, [sp, #4]
 80875e6:	bd08      	pop	{r3, pc}
 80875e8:	080401a4 	.word	0x080401a4

080875ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80875ec:	b508      	push	{r3, lr}
 80875ee:	4b03      	ldr	r3, [pc, #12]	; (80875fc <system_ctrl_set_app_request_handler+0x10>)
 80875f0:	681b      	ldr	r3, [r3, #0]
 80875f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80875f6:	9301      	str	r3, [sp, #4]
 80875f8:	bd08      	pop	{r3, pc}
 80875fa:	0000      	.short	0x0000
 80875fc:	080401a4 	.word	0x080401a4

08087600 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8087600:	b508      	push	{r3, lr}
 8087602:	4b03      	ldr	r3, [pc, #12]	; (8087610 <system_ctrl_set_result+0x10>)
 8087604:	681b      	ldr	r3, [r3, #0]
 8087606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808760a:	9301      	str	r3, [sp, #4]
 808760c:	bd08      	pop	{r3, pc}
 808760e:	0000      	.short	0x0000
 8087610:	080401a4 	.word	0x080401a4

08087614 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8087614:	b508      	push	{r3, lr}
 8087616:	4b02      	ldr	r3, [pc, #8]	; (8087620 <network_connect+0xc>)
 8087618:	681b      	ldr	r3, [r3, #0]
 808761a:	685b      	ldr	r3, [r3, #4]
 808761c:	9301      	str	r3, [sp, #4]
 808761e:	bd08      	pop	{r3, pc}
 8087620:	080401c8 	.word	0x080401c8

08087624 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8087624:	b508      	push	{r3, lr}
 8087626:	4b02      	ldr	r3, [pc, #8]	; (8087630 <network_connecting+0xc>)
 8087628:	681b      	ldr	r3, [r3, #0]
 808762a:	689b      	ldr	r3, [r3, #8]
 808762c:	9301      	str	r3, [sp, #4]
 808762e:	bd08      	pop	{r3, pc}
 8087630:	080401c8 	.word	0x080401c8

08087634 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8087634:	b508      	push	{r3, lr}
 8087636:	4b02      	ldr	r3, [pc, #8]	; (8087640 <network_disconnect+0xc>)
 8087638:	681b      	ldr	r3, [r3, #0]
 808763a:	68db      	ldr	r3, [r3, #12]
 808763c:	9301      	str	r3, [sp, #4]
 808763e:	bd08      	pop	{r3, pc}
 8087640:	080401c8 	.word	0x080401c8

08087644 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8087644:	b508      	push	{r3, lr}
 8087646:	4b02      	ldr	r3, [pc, #8]	; (8087650 <network_ready+0xc>)
 8087648:	681b      	ldr	r3, [r3, #0]
 808764a:	691b      	ldr	r3, [r3, #16]
 808764c:	9301      	str	r3, [sp, #4]
 808764e:	bd08      	pop	{r3, pc}
 8087650:	080401c8 	.word	0x080401c8

08087654 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8087654:	b508      	push	{r3, lr}
 8087656:	4b02      	ldr	r3, [pc, #8]	; (8087660 <network_on+0xc>)
 8087658:	681b      	ldr	r3, [r3, #0]
 808765a:	695b      	ldr	r3, [r3, #20]
 808765c:	9301      	str	r3, [sp, #4]
 808765e:	bd08      	pop	{r3, pc}
 8087660:	080401c8 	.word	0x080401c8

08087664 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8087664:	b508      	push	{r3, lr}
 8087666:	4b02      	ldr	r3, [pc, #8]	; (8087670 <network_off+0xc>)
 8087668:	681b      	ldr	r3, [r3, #0]
 808766a:	699b      	ldr	r3, [r3, #24]
 808766c:	9301      	str	r3, [sp, #4]
 808766e:	bd08      	pop	{r3, pc}
 8087670:	080401c8 	.word	0x080401c8

08087674 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8087674:	b508      	push	{r3, lr}
 8087676:	4b02      	ldr	r3, [pc, #8]	; (8087680 <network_listen+0xc>)
 8087678:	681b      	ldr	r3, [r3, #0]
 808767a:	69db      	ldr	r3, [r3, #28]
 808767c:	9301      	str	r3, [sp, #4]
 808767e:	bd08      	pop	{r3, pc}
 8087680:	080401c8 	.word	0x080401c8

08087684 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8087684:	b508      	push	{r3, lr}
 8087686:	4b02      	ldr	r3, [pc, #8]	; (8087690 <network_listening+0xc>)
 8087688:	681b      	ldr	r3, [r3, #0]
 808768a:	6a1b      	ldr	r3, [r3, #32]
 808768c:	9301      	str	r3, [sp, #4]
 808768e:	bd08      	pop	{r3, pc}
 8087690:	080401c8 	.word	0x080401c8

08087694 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8087694:	b508      	push	{r3, lr}
 8087696:	4b02      	ldr	r3, [pc, #8]	; (80876a0 <network_set_listen_timeout+0xc>)
 8087698:	681b      	ldr	r3, [r3, #0]
 808769a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808769c:	9301      	str	r3, [sp, #4]
 808769e:	bd08      	pop	{r3, pc}
 80876a0:	080401c8 	.word	0x080401c8

080876a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80876a4:	b508      	push	{r3, lr}
 80876a6:	4b02      	ldr	r3, [pc, #8]	; (80876b0 <network_get_listen_timeout+0xc>)
 80876a8:	681b      	ldr	r3, [r3, #0]
 80876aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80876ac:	9301      	str	r3, [sp, #4]
 80876ae:	bd08      	pop	{r3, pc}
 80876b0:	080401c8 	.word	0x080401c8

080876b4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80876b4:	b508      	push	{r3, lr}
 80876b6:	4b02      	ldr	r3, [pc, #8]	; (80876c0 <spark_variable+0xc>)
 80876b8:	681b      	ldr	r3, [r3, #0]
 80876ba:	681b      	ldr	r3, [r3, #0]
 80876bc:	9301      	str	r3, [sp, #4]
 80876be:	bd08      	pop	{r3, pc}
 80876c0:	080401cc 	.word	0x080401cc

080876c4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80876c4:	b508      	push	{r3, lr}
 80876c6:	4b02      	ldr	r3, [pc, #8]	; (80876d0 <spark_function+0xc>)
 80876c8:	681b      	ldr	r3, [r3, #0]
 80876ca:	685b      	ldr	r3, [r3, #4]
 80876cc:	9301      	str	r3, [sp, #4]
 80876ce:	bd08      	pop	{r3, pc}
 80876d0:	080401cc 	.word	0x080401cc

080876d4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80876d4:	b508      	push	{r3, lr}
 80876d6:	4b02      	ldr	r3, [pc, #8]	; (80876e0 <spark_process+0xc>)
 80876d8:	681b      	ldr	r3, [r3, #0]
 80876da:	689b      	ldr	r3, [r3, #8]
 80876dc:	9301      	str	r3, [sp, #4]
 80876de:	bd08      	pop	{r3, pc}
 80876e0:	080401cc 	.word	0x080401cc

080876e4 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80876e4:	b508      	push	{r3, lr}
 80876e6:	4b02      	ldr	r3, [pc, #8]	; (80876f0 <spark_cloud_flag_connect+0xc>)
 80876e8:	681b      	ldr	r3, [r3, #0]
 80876ea:	68db      	ldr	r3, [r3, #12]
 80876ec:	9301      	str	r3, [sp, #4]
 80876ee:	bd08      	pop	{r3, pc}
 80876f0:	080401cc 	.word	0x080401cc

080876f4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80876f4:	b508      	push	{r3, lr}
 80876f6:	4b02      	ldr	r3, [pc, #8]	; (8087700 <spark_cloud_flag_connected+0xc>)
 80876f8:	681b      	ldr	r3, [r3, #0]
 80876fa:	695b      	ldr	r3, [r3, #20]
 80876fc:	9301      	str	r3, [sp, #4]
 80876fe:	bd08      	pop	{r3, pc}
 8087700:	080401cc 	.word	0x080401cc

08087704 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8087704:	b508      	push	{r3, lr}
 8087706:	4b02      	ldr	r3, [pc, #8]	; (8087710 <spark_send_event+0xc>)
 8087708:	681b      	ldr	r3, [r3, #0]
 808770a:	6a1b      	ldr	r3, [r3, #32]
 808770c:	9301      	str	r3, [sp, #4]
 808770e:	bd08      	pop	{r3, pc}
 8087710:	080401cc 	.word	0x080401cc

08087714 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8087714:	b508      	push	{r3, lr}
 8087716:	4b02      	ldr	r3, [pc, #8]	; (8087720 <spark_sync_time_pending+0xc>)
 8087718:	681b      	ldr	r3, [r3, #0]
 808771a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808771c:	9301      	str	r3, [sp, #4]
 808771e:	bd08      	pop	{r3, pc}
 8087720:	080401cc 	.word	0x080401cc

08087724 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8087724:	b508      	push	{r3, lr}
 8087726:	4b02      	ldr	r3, [pc, #8]	; (8087730 <spark_set_random_seed_from_cloud_handler+0xc>)
 8087728:	681b      	ldr	r3, [r3, #0]
 808772a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808772c:	9301      	str	r3, [sp, #4]
 808772e:	bd08      	pop	{r3, pc}
 8087730:	080401cc 	.word	0x080401cc

08087734 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8087734:	b508      	push	{r3, lr}
 8087736:	4b02      	ldr	r3, [pc, #8]	; (8087740 <malloc+0xc>)
 8087738:	681b      	ldr	r3, [r3, #0]
 808773a:	681b      	ldr	r3, [r3, #0]
 808773c:	9301      	str	r3, [sp, #4]
 808773e:	bd08      	pop	{r3, pc}
 8087740:	080401a0 	.word	0x080401a0

08087744 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8087744:	b508      	push	{r3, lr}
 8087746:	4b02      	ldr	r3, [pc, #8]	; (8087750 <free+0xc>)
 8087748:	681b      	ldr	r3, [r3, #0]
 808774a:	685b      	ldr	r3, [r3, #4]
 808774c:	9301      	str	r3, [sp, #4]
 808774e:	bd08      	pop	{r3, pc}
 8087750:	080401a0 	.word	0x080401a0

08087754 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8087754:	b508      	push	{r3, lr}
 8087756:	4b02      	ldr	r3, [pc, #8]	; (8087760 <realloc+0xc>)
 8087758:	681b      	ldr	r3, [r3, #0]
 808775a:	689b      	ldr	r3, [r3, #8]
 808775c:	9301      	str	r3, [sp, #4]
 808775e:	bd08      	pop	{r3, pc}
 8087760:	080401a0 	.word	0x080401a0

08087764 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8087764:	b508      	push	{r3, lr}
 8087766:	4b02      	ldr	r3, [pc, #8]	; (8087770 <sprintf+0xc>)
 8087768:	681b      	ldr	r3, [r3, #0]
 808776a:	68db      	ldr	r3, [r3, #12]
 808776c:	9301      	str	r3, [sp, #4]
 808776e:	bd08      	pop	{r3, pc}
 8087770:	080401a0 	.word	0x080401a0

08087774 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8087774:	b508      	push	{r3, lr}
 8087776:	4b02      	ldr	r3, [pc, #8]	; (8087780 <siprintf+0xc>)
 8087778:	681b      	ldr	r3, [r3, #0]
 808777a:	691b      	ldr	r3, [r3, #16]
 808777c:	9301      	str	r3, [sp, #4]
 808777e:	bd08      	pop	{r3, pc}
 8087780:	080401a0 	.word	0x080401a0

08087784 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8087784:	b508      	push	{r3, lr}
 8087786:	4b02      	ldr	r3, [pc, #8]	; (8087790 <snprintf+0xc>)
 8087788:	681b      	ldr	r3, [r3, #0]
 808778a:	69db      	ldr	r3, [r3, #28]
 808778c:	9301      	str	r3, [sp, #4]
 808778e:	bd08      	pop	{r3, pc}
 8087790:	080401a0 	.word	0x080401a0

08087794 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8087794:	b508      	push	{r3, lr}
 8087796:	4b02      	ldr	r3, [pc, #8]	; (80877a0 <vsnprintf+0xc>)
 8087798:	681b      	ldr	r3, [r3, #0]
 808779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808779c:	9301      	str	r3, [sp, #4]
 808779e:	bd08      	pop	{r3, pc}
 80877a0:	080401a0 	.word	0x080401a0

080877a4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80877a4:	b508      	push	{r3, lr}
 80877a6:	4b02      	ldr	r3, [pc, #8]	; (80877b0 <abort+0xc>)
 80877a8:	681b      	ldr	r3, [r3, #0]
 80877aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80877ac:	9301      	str	r3, [sp, #4]
 80877ae:	bd08      	pop	{r3, pc}
 80877b0:	080401a0 	.word	0x080401a0

080877b4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80877b4:	b508      	push	{r3, lr}
 80877b6:	4b02      	ldr	r3, [pc, #8]	; (80877c0 <_malloc_r+0xc>)
 80877b8:	681b      	ldr	r3, [r3, #0]
 80877ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80877bc:	9301      	str	r3, [sp, #4]
 80877be:	bd08      	pop	{r3, pc}
 80877c0:	080401a0 	.word	0x080401a0

080877c4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80877c4:	b508      	push	{r3, lr}
 80877c6:	4b02      	ldr	r3, [pc, #8]	; (80877d0 <newlib_impure_ptr_callback+0xc>)
 80877c8:	681b      	ldr	r3, [r3, #0]
 80877ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80877cc:	9301      	str	r3, [sp, #4]
 80877ce:	bd08      	pop	{r3, pc}
 80877d0:	080401a0 	.word	0x080401a0

080877d4 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 80877d4:	b508      	push	{r3, lr}
            return &Wire3;
 80877d6:	f002 f977 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}
 80877da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
 80877de:	f001 bffd 	b.w	80897dc <_ZN7TwoWire4lockEv>

080877e2 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
 80877e2:	b510      	push	{r4, lr}
 80877e4:	4604      	mov	r4, r0
    lock_(_lock)
 80877e6:	7001      	strb	r1, [r0, #0]
    if (lock_) {
 80877e8:	b109      	cbz	r1, 80877ee <_ZN4PMICC1Eb+0xc>
        lock();
 80877ea:	f7ff fff3 	bl	80877d4 <_ZN4PMIC4lockEv.constprop.0>
}
 80877ee:	4620      	mov	r0, r4
 80877f0:	bd10      	pop	{r4, pc}

080877f2 <_ZN4PMIC5beginEv>:
{
 80877f2:	b508      	push	{r3, lr}
            return &Wire3;
 80877f4:	f002 f968 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    if (!pmicWireInstance()->isEnabled()) {
 80877f8:	f001 ffec 	bl	80897d4 <_ZN7TwoWire9isEnabledEv>
 80877fc:	b918      	cbnz	r0, 8087806 <_ZN4PMIC5beginEv+0x14>
            return &Wire3;
 80877fe:	f002 f963 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
        pmicWireInstance()->begin();
 8087802:	f001 ff8f 	bl	8089724 <_ZN7TwoWire5beginEv>
            return &Wire3;
 8087806:	f002 f95f 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
}
 808780a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->isEnabled();
 808780e:	f001 bfe1 	b.w	80897d4 <_ZN7TwoWire9isEnabledEv>

08087812 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
 8087812:	b508      	push	{r3, lr}
            return &Wire3;
 8087814:	f002 f958 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->unlock();
}
 8087818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
 808781c:	f001 bfe7 	b.w	80897ee <_ZN7TwoWire6unlockEv>

08087820 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
 8087820:	b510      	push	{r4, lr}
    if (lock_) {
 8087822:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
 8087824:	4604      	mov	r4, r0
    if (lock_) {
 8087826:	b10b      	cbz	r3, 808782c <_ZN4PMICD1Ev+0xc>
        unlock();
 8087828:	f7ff fff3 	bl	8087812 <_ZN4PMIC6unlockEv>
}
 808782c:	4620      	mov	r0, r4
 808782e:	bd10      	pop	{r4, pc}

08087830 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8087830:	b510      	push	{r4, lr}
 8087832:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8087834:	6800      	ldr	r0, [r0, #0]
 8087836:	f7ff ffec 	bl	8087812 <_ZN4PMIC6unlockEv>
 808783a:	4620      	mov	r0, r4
 808783c:	bd10      	pop	{r4, pc}

0808783e <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
 808783e:	b530      	push	{r4, r5, lr}
 8087840:	b087      	sub	sp, #28
 8087842:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087844:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087846:	f7ff ffc5 	bl	80877d4 <_ZN4PMIC4lockEv.constprop.0>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 808784a:	236b      	movs	r3, #107	; 0x6b
 808784c:	f88d 3008 	strb.w	r3, [sp, #8]
 8087850:	2300      	movs	r3, #0
 8087852:	2401      	movs	r4, #1
 8087854:	9303      	str	r3, [sp, #12]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
 8087856:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8087858:	f88d 4010 	strb.w	r4, [sp, #16]
    timeout_ = ms;
 808785c:	9305      	str	r3, [sp, #20]
            return &Wire3;
 808785e:	f002 f933 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 8087862:	a902      	add	r1, sp, #8
 8087864:	f001 ff97 	bl	8089796 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 8087868:	f002 f92e 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(startAddress);
 808786c:	6803      	ldr	r3, [r0, #0]
 808786e:	4629      	mov	r1, r5
 8087870:	689b      	ldr	r3, [r3, #8]
 8087872:	4798      	blx	r3
            return &Wire3;
 8087874:	f002 f928 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 8087878:	4621      	mov	r1, r4
 808787a:	f001 ffa4 	bl	80897c6 <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
 808787e:	9403      	str	r4, [sp, #12]
            return &Wire3;
 8087880:	f002 f922 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->requestFrom(config);
 8087884:	a902      	add	r1, sp, #8
 8087886:	f001 ff53 	bl	8089730 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire3;
 808788a:	f002 f91d 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    DATA = pmicWireInstance()->read();
 808788e:	6803      	ldr	r3, [r0, #0]
 8087890:	695b      	ldr	r3, [r3, #20]
 8087892:	4798      	blx	r3
 8087894:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
 8087896:	a801      	add	r0, sp, #4
 8087898:	f7ff ffca 	bl	8087830 <_ZNSt10lock_guardI4PMICED1Ev>
}
 808789c:	b2e0      	uxtb	r0, r4
 808789e:	b007      	add	sp, #28
 80878a0:	bd30      	pop	{r4, r5, pc}

080878a2 <_ZN4PMIC23readInputSourceRegisterEv>:
    return readRegister(INPUT_SOURCE_REGISTER);
 80878a2:	2100      	movs	r1, #0
 80878a4:	f7ff bfcb 	b.w	808783e <_ZN4PMIC12readRegisterEh>

080878a8 <_ZN4PMIC20getInputCurrentLimitEv>:
uint16_t PMIC::getInputCurrentLimit(void) {
 80878a8:	b508      	push	{r3, lr}
    byte raw = readInputSourceRegister();
 80878aa:	f7ff fffa 	bl	80878a2 <_ZN4PMIC23readInputSourceRegisterEv>
}
 80878ae:	4b03      	ldr	r3, [pc, #12]	; (80878bc <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
    return mapping[raw];
 80878b0:	f000 0007 	and.w	r0, r0, #7
}
 80878b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80878b8:	bd08      	pop	{r3, pc}
 80878ba:	bf00      	nop
 80878bc:	0808ebc8 	.word	0x0808ebc8

080878c0 <_ZN4PMIC16getChargeCurrentEv>:
    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 80878c0:	2102      	movs	r1, #2
 80878c2:	f7ff bfbc 	b.w	808783e <_ZN4PMIC12readRegisterEh>

080878c6 <_ZN4PMIC15getSystemStatusEv>:
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 80878c6:	2108      	movs	r1, #8
 80878c8:	f7ff bfb9 	b.w	808783e <_ZN4PMIC12readRegisterEh>

080878cc <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
 80878cc:	2109      	movs	r1, #9
 80878ce:	f7ff bfb6 	b.w	808783e <_ZN4PMIC12readRegisterEh>

080878d2 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
 80878d2:	b570      	push	{r4, r5, r6, lr}
 80878d4:	b086      	sub	sp, #24
 80878d6:	4614      	mov	r4, r2
 80878d8:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80878da:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80878dc:	f7ff ff7a 	bl	80877d4 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80878e0:	236b      	movs	r3, #107	; 0x6b
 80878e2:	f88d 3008 	strb.w	r3, [sp, #8]
 80878e6:	2300      	movs	r3, #0
 80878e8:	2601      	movs	r6, #1
 80878ea:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
 80878ec:	230a      	movs	r3, #10
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80878ee:	f88d 6010 	strb.w	r6, [sp, #16]
    timeout_ = ms;
 80878f2:	9305      	str	r3, [sp, #20]
            return &Wire3;
 80878f4:	f002 f8e8 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(config);
 80878f8:	a902      	add	r1, sp, #8
 80878fa:	f001 ff4c 	bl	8089796 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire3;
 80878fe:	f002 f8e3 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(address);
 8087902:	6803      	ldr	r3, [r0, #0]
 8087904:	4629      	mov	r1, r5
 8087906:	689b      	ldr	r3, [r3, #8]
 8087908:	4798      	blx	r3
            return &Wire3;
 808790a:	f002 f8dd 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->write(DATA);
 808790e:	6803      	ldr	r3, [r0, #0]
 8087910:	4621      	mov	r1, r4
 8087912:	689b      	ldr	r3, [r3, #8]
 8087914:	4798      	blx	r3
            return &Wire3;
 8087916:	f002 f8d7 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
 808791a:	4631      	mov	r1, r6
 808791c:	f001 ff53 	bl	80897c6 <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
 8087920:	a801      	add	r0, sp, #4
 8087922:	f7ff ff85 	bl	8087830 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8087926:	b006      	add	sp, #24
 8087928:	bd70      	pop	{r4, r5, r6, pc}

0808792a <_ZN4PMIC20setInputCurrentLimitEt>:
bool PMIC::setInputCurrentLimit(uint16_t current) {
 808792a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808792c:	4604      	mov	r4, r0
 808792e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087930:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087932:	f7ff ff4f 	bl	80877d4 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8087936:	2100      	movs	r1, #0
 8087938:	4620      	mov	r0, r4
 808793a:	f7ff ff80 	bl	808783e <_ZN4PMIC12readRegisterEh>
    switch (current) {
 808793e:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
    byte mask = DATA & 0b11111000;
 8087942:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
    switch (current) {
 8087946:	d02e      	beq.n	80879a6 <_ZN4PMIC20setInputCurrentLimitEt+0x7c>
 8087948:	d814      	bhi.n	8087974 <_ZN4PMIC20setInputCurrentLimitEt+0x4a>
 808794a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808794e:	d027      	beq.n	80879a0 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8087950:	d80a      	bhi.n	8087968 <_ZN4PMIC20setInputCurrentLimitEt+0x3e>
 8087952:	2d64      	cmp	r5, #100	; 0x64
 8087954:	d01e      	beq.n	8087994 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
 8087956:	2d96      	cmp	r5, #150	; 0x96
 8087958:	d01a      	beq.n	8087990 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 808795a:	2400      	movs	r4, #0
    std::lock_guard<PMIC> l(*this);
 808795c:	a801      	add	r0, sp, #4
 808795e:	f7ff ff67 	bl	8087830 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8087962:	4620      	mov	r0, r4
 8087964:	b003      	add	sp, #12
 8087966:	bd30      	pop	{r4, r5, pc}
    switch (current) {
 8087968:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 808796c:	d1f5      	bne.n	808795a <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 808796e:	f042 0203 	orr.w	r2, r2, #3
 8087972:	e00f      	b.n	8087994 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
    switch (current) {
 8087974:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8087978:	d018      	beq.n	80879ac <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 808797a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 808797e:	429d      	cmp	r5, r3
 8087980:	d017      	beq.n	80879b2 <_ZN4PMIC20setInputCurrentLimitEt+0x88>
 8087982:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8087986:	429d      	cmp	r5, r3
 8087988:	d1e7      	bne.n	808795a <_ZN4PMIC20setInputCurrentLimitEt+0x30>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 808798a:	f042 0205 	orr.w	r2, r2, #5
 808798e:	e001      	b.n	8087994 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 8087990:	f042 0201 	orr.w	r2, r2, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8087994:	4620      	mov	r0, r4
 8087996:	2100      	movs	r1, #0
 8087998:	f7ff ff9b 	bl	80878d2 <_ZN4PMIC13writeRegisterEhh>
    return 1; // value was written successfully
 808799c:	2401      	movs	r4, #1
        break;
 808799e:	e7dd      	b.n	808795c <_ZN4PMIC20setInputCurrentLimitEt+0x32>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 80879a0:	f042 0202 	orr.w	r2, r2, #2
 80879a4:	e7f6      	b.n	8087994 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 80879a6:	f042 0204 	orr.w	r2, r2, #4
 80879aa:	e7f3      	b.n	8087994 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 80879ac:	f042 0206 	orr.w	r2, r2, #6
 80879b0:	e7f0      	b.n	8087994 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 80879b2:	f042 0207 	orr.w	r2, r2, #7
 80879b6:	e7ed      	b.n	8087994 <_ZN4PMIC20setInputCurrentLimitEt+0x6a>

080879b8 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
 80879b8:	b513      	push	{r0, r1, r4, lr}
 80879ba:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80879bc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80879be:	f7ff ff09 	bl	80877d4 <_ZN4PMIC4lockEv.constprop.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 80879c2:	2101      	movs	r1, #1
 80879c4:	4620      	mov	r0, r4
 80879c6:	f7ff ff3a 	bl	808783e <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 80879ca:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 80879ce:	2101      	movs	r1, #1
 80879d0:	4620      	mov	r0, r4
 80879d2:	f042 0210 	orr.w	r2, r2, #16
 80879d6:	f7ff ff7c 	bl	80878d2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 80879da:	a801      	add	r0, sp, #4
 80879dc:	f7ff ff28 	bl	8087830 <_ZNSt10lock_guardI4PMICED1Ev>
}
 80879e0:	2001      	movs	r0, #1
 80879e2:	b002      	add	sp, #8
 80879e4:	bd10      	pop	{r4, pc}

080879e6 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 80879e6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80879ea:	460c      	mov	r4, r1
 80879ec:	4617      	mov	r7, r2
 80879ee:	4605      	mov	r5, r0
 80879f0:	461e      	mov	r6, r3
 80879f2:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 80879f6:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80879fa:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80879fe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087a00:	f7ff fee8 	bl	80877d4 <_ZN4PMIC4lockEv.constprop.0>
    if (bit7) current = current | 0b10000000;
 8087a04:	2c00      	cmp	r4, #0
 8087a06:	bf0c      	ite	eq
 8087a08:	2400      	moveq	r4, #0
 8087a0a:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8087a0c:	b10f      	cbz	r7, 8087a12 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x2c>
 8087a0e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    if (bit5) current = current | 0b00100000;
 8087a12:	b10e      	cbz	r6, 8087a18 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x32>
 8087a14:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8087a18:	f1ba 0f00 	cmp.w	sl, #0
 8087a1c:	d001      	beq.n	8087a22 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3c>
 8087a1e:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8087a22:	f1b9 0f00 	cmp.w	r9, #0
 8087a26:	d001      	beq.n	8087a2c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x46>
 8087a28:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8087a2c:	f1b8 0f00 	cmp.w	r8, #0
 8087a30:	d001      	beq.n	8087a36 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x50>
 8087a32:	f044 0404 	orr.w	r4, r4, #4
    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8087a36:	2102      	movs	r1, #2
 8087a38:	4628      	mov	r0, r5
 8087a3a:	f7ff ff00 	bl	808783e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
 8087a3e:	f000 0201 	and.w	r2, r0, #1
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8087a42:	2102      	movs	r1, #2
 8087a44:	4628      	mov	r0, r5
 8087a46:	4322      	orrs	r2, r4
 8087a48:	f7ff ff43 	bl	80878d2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8087a4c:	a801      	add	r0, sp, #4
 8087a4e:	f7ff feef 	bl	8087830 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8087a52:	2001      	movs	r0, #1
 8087a54:	b002      	add	sp, #8
 8087a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08087a5a <_ZN4PMIC16setChargeVoltageEt>:
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8087a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8087a5c:	460c      	mov	r4, r1
 8087a5e:	4605      	mov	r5, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087a60:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087a62:	f7ff feb7 	bl	80877d4 <_ZN4PMIC4lockEv.constprop.0>
    uint32_t best = 0;
 8087a66:	2200      	movs	r2, #0
    int bestDelta = 0x7fffffff;
 8087a68:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8087a6c:	4613      	mov	r3, r2
 8087a6e:	f5c4 615b 	rsb	r1, r4, #3504	; 0xdb0
        int delta = std::abs((int)sum - (int)value);
 8087a72:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 8087a76:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
        if (delta < bestDelta && sum <= value) {
 8087a7a:	4286      	cmp	r6, r0
 8087a7c:	da06      	bge.n	8087a8c <_ZN4PMIC16setChargeVoltageEt+0x32>
 8087a7e:	f103 07db 	add.w	r7, r3, #219	; 0xdb
 8087a82:	ebb4 1f07 	cmp.w	r4, r7, lsl #4
 8087a86:	bf24      	itt	cs
 8087a88:	4630      	movcs	r0, r6
 8087a8a:	461a      	movcs	r2, r3
    for (uint32_t mask = 0; mask <= (uint32_t)((1 << bits) - 1); mask++) {
 8087a8c:	3301      	adds	r3, #1
 8087a8e:	2b40      	cmp	r3, #64	; 0x40
 8087a90:	f101 0110 	add.w	r1, r1, #16
 8087a94:	d1ed      	bne.n	8087a72 <_ZN4PMIC16setChargeVoltageEt+0x18>
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 8087a96:	0092      	lsls	r2, r2, #2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8087a98:	2104      	movs	r1, #4
 8087a9a:	4628      	mov	r0, r5
    uint8_t cvcr = (uint8_t)(findClosestMatchingSum(voltage, baseValue, 6, 4) << 2);
 8087a9c:	b2d4      	uxtb	r4, r2
    uint8_t currentCvcr = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8087a9e:	f7ff fece 	bl	808783e <_ZN4PMIC12readRegisterEh>
    cvcr |= (currentCvcr & 0b11);
 8087aa2:	f000 0203 	and.w	r2, r0, #3
    writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, cvcr);
 8087aa6:	2104      	movs	r1, #4
 8087aa8:	4628      	mov	r0, r5
 8087aaa:	4322      	orrs	r2, r4
 8087aac:	f7ff ff11 	bl	80878d2 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
 8087ab0:	a801      	add	r0, sp, #4
 8087ab2:	f7ff febd 	bl	8087830 <_ZNSt10lock_guardI4PMICED1Ev>
}
 8087ab6:	2001      	movs	r0, #1
 8087ab8:	b003      	add	sp, #12
 8087aba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087abc <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 8087abc:	6880      	ldr	r0, [r0, #8]
 8087abe:	f7ff bbf5 	b.w	80872ac <os_mutex_recursive_unlock>

08087ac2 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 8087ac2:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 8087ac4:	2600      	movs	r6, #0
 8087ac6:	4604      	mov	r4, r0
 8087ac8:	460d      	mov	r5, r1
 8087aca:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 8087ace:	f7ff fbd5 	bl	808727c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 8087ad2:	4628      	mov	r0, r5
    _spi = spi;
 8087ad4:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 8087ad6:	f7ff fcc9 	bl	808746c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 8087ada:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 8087adc:	6066      	str	r6, [r4, #4]
}
 8087ade:	bd70      	pop	{r4, r5, r6, pc}

08087ae0 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 8087ae0:	b538      	push	{r3, r4, r5, lr}
 8087ae2:	4604      	mov	r4, r0
 8087ae4:	460d      	mov	r5, r1
    void lock() { os_mutex_recursive_lock(handle_); }
 8087ae6:	6880      	ldr	r0, [r0, #8]
 8087ae8:	f7ff fbd8 	bl	808729c <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 8087aec:	7820      	ldrb	r0, [r4, #0]
 8087aee:	4629      	mov	r1, r5
 8087af0:	f7ff fc94 	bl	808741c <hal_spi_begin>
        unlock();
 8087af4:	4620      	mov	r0, r4
 8087af6:	f7ff ffe1 	bl	8087abc <_ZN8SPIClass6unlockEv>
    }
}
 8087afa:	bd38      	pop	{r3, r4, r5, pc}

08087afc <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 8087afc:	b538      	push	{r3, r4, r5, lr}
 8087afe:	4604      	mov	r4, r0
 8087b00:	460d      	mov	r5, r1
 8087b02:	6880      	ldr	r0, [r0, #8]
 8087b04:	f7ff fbca 	bl	808729c <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 8087b08:	7820      	ldrb	r0, [r4, #0]
 8087b0a:	4629      	mov	r1, r5
 8087b0c:	f7ff fc8e 	bl	808742c <hal_spi_set_bit_order>
        unlock();
 8087b10:	4620      	mov	r0, r4
 8087b12:	f7ff ffd3 	bl	8087abc <_ZN8SPIClass6unlockEv>
    }
}
 8087b16:	bd38      	pop	{r3, r4, r5, pc}

08087b18 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 8087b18:	b538      	push	{r3, r4, r5, lr}
 8087b1a:	4604      	mov	r4, r0
 8087b1c:	460d      	mov	r5, r1
 8087b1e:	6880      	ldr	r0, [r0, #8]
 8087b20:	f7ff fbbc 	bl	808729c <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 8087b24:	7820      	ldrb	r0, [r4, #0]
 8087b26:	4629      	mov	r1, r5
 8087b28:	f7ff fc88 	bl	808743c <hal_spi_set_data_mode>
        unlock();
 8087b2c:	4620      	mov	r0, r4
 8087b2e:	f7ff ffc5 	bl	8087abc <_ZN8SPIClass6unlockEv>
    }
}
 8087b32:	bd38      	pop	{r3, r4, r5, pc}

08087b34 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 8087b34:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 8087b36:	2400      	movs	r4, #0
 8087b38:	0840      	lsrs	r0, r0, #1
 8087b3a:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8087b3c:	6818      	ldr	r0, [r3, #0]
 8087b3e:	b2e5      	uxtb	r5, r4
 8087b40:	4288      	cmp	r0, r1
 8087b42:	d906      	bls.n	8087b52 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8087b44:	3401      	adds	r4, #1
 8087b46:	2c08      	cmp	r4, #8
 8087b48:	d002      	beq.n	8087b50 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 8087b4a:	0840      	lsrs	r0, r0, #1
 8087b4c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 8087b4e:	e7f5      	b.n	8087b3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8087b50:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 8087b52:	4b02      	ldr	r3, [pc, #8]	; (8087b5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8087b54:	5d5b      	ldrb	r3, [r3, r5]
 8087b56:	7013      	strb	r3, [r2, #0]
}
 8087b58:	bd30      	pop	{r4, r5, pc}
 8087b5a:	bf00      	nop
 8087b5c:	0808ebd8 	.word	0x0808ebd8

08087b60 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8087b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 8087b62:	2500      	movs	r5, #0
{
 8087b64:	4604      	mov	r4, r0
 8087b66:	b089      	sub	sp, #36	; 0x24
 8087b68:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 8087b6a:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 8087b6e:	9502      	str	r5, [sp, #8]
 8087b70:	f7ff fb94 	bl	808729c <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 8087b74:	4629      	mov	r1, r5
 8087b76:	2214      	movs	r2, #20
 8087b78:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 8087b7a:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 8087b7c:	f003 f90a 	bl	808ad94 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 8087b80:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 8087b82:	462a      	mov	r2, r5
 8087b84:	4638      	mov	r0, r7
 8087b86:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 8087b88:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 8087b8c:	f7ff fc7e 	bl	808748c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8087b90:	ab02      	add	r3, sp, #8
 8087b92:	f10d 0207 	add.w	r2, sp, #7
 8087b96:	4631      	mov	r1, r6
 8087b98:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 8087b9a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 8087b9e:	f7ff ffc9 	bl	8087b34 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 8087ba2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8087ba6:	7820      	ldrb	r0, [r4, #0]
 8087ba8:	f7ff fc50 	bl	808744c <hal_spi_set_clock_divider>
        unlock();
 8087bac:	4620      	mov	r0, r4
 8087bae:	f7ff ff85 	bl	8087abc <_ZN8SPIClass6unlockEv>
    }

    return clock;
}
 8087bb2:	9802      	ldr	r0, [sp, #8]
 8087bb4:	b009      	add	sp, #36	; 0x24
 8087bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087bb8 <_ZN8SPIClass15setClockDividerEh>:
{
 8087bb8:	b538      	push	{r3, r4, r5, lr}
 8087bba:	4604      	mov	r4, r0
 8087bbc:	6880      	ldr	r0, [r0, #8]
 8087bbe:	460d      	mov	r5, r1
 8087bc0:	f7ff fb6c 	bl	808729c <os_mutex_recursive_lock>
        if (_dividerReference)
 8087bc4:	6861      	ldr	r1, [r4, #4]
 8087bc6:	b199      	cbz	r1, 8087bf0 <_ZN8SPIClass15setClockDividerEh+0x38>
    unsigned result = 0;
 8087bc8:	2300      	movs	r3, #0
 8087bca:	4a0c      	ldr	r2, [pc, #48]	; (8087bfc <_ZN8SPIClass15setClockDividerEh+0x44>)
        if (clock_divisors[result] == divider)
 8087bcc:	f812 0b01 	ldrb.w	r0, [r2], #1
 8087bd0:	4285      	cmp	r5, r0
 8087bd2:	d002      	beq.n	8087bda <_ZN8SPIClass15setClockDividerEh+0x22>
    for (; result < arraySize(clock_divisors); result++)
 8087bd4:	3301      	adds	r3, #1
 8087bd6:	2b08      	cmp	r3, #8
 8087bd8:	d1f8      	bne.n	8087bcc <_ZN8SPIClass15setClockDividerEh+0x14>
    return result + 1;
 8087bda:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 8087bdc:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 8087bde:	2201      	movs	r2, #1
 8087be0:	4620      	mov	r0, r4
 8087be2:	40d9      	lsrs	r1, r3
 8087be4:	f7ff ffbc 	bl	8087b60 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 8087be8:	4620      	mov	r0, r4
 8087bea:	f7ff ff67 	bl	8087abc <_ZN8SPIClass6unlockEv>
}
 8087bee:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_set_clock_divider(_spi, rate);
 8087bf0:	4629      	mov	r1, r5
 8087bf2:	7820      	ldrb	r0, [r4, #0]
 8087bf4:	f7ff fc2a 	bl	808744c <hal_spi_set_clock_divider>
 8087bf8:	e7f6      	b.n	8087be8 <_ZN8SPIClass15setClockDividerEh+0x30>
 8087bfa:	bf00      	nop
 8087bfc:	0808ebd8 	.word	0x0808ebd8

08087c00 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 8087c00:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 8087c02:	7800      	ldrb	r0, [r0, #0]
 8087c04:	f7ff fc2a 	bl	808745c <hal_spi_transfer>
}
 8087c08:	b2c0      	uxtb	r0, r0
 8087c0a:	bd08      	pop	{r3, pc}

08087c0c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8087c0c:	b530      	push	{r4, r5, lr}
 8087c0e:	b087      	sub	sp, #28
 8087c10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8087c12:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 8087c14:	9500      	str	r5, [sp, #0]
 8087c16:	7800      	ldrb	r0, [r0, #0]
 8087c18:	f7ff fc40 	bl	808749c <hal_spi_transfer_dma>
    if (user_callback == NULL)
 8087c1c:	b93d      	cbnz	r5, 8087c2e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 8087c1e:	7820      	ldrb	r0, [r4, #0]
 8087c20:	a902      	add	r1, sp, #8
 8087c22:	f7ff fc43 	bl	80874ac <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 8087c26:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8087c2a:	07db      	lsls	r3, r3, #31
 8087c2c:	d4f7      	bmi.n	8087c1e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
 8087c2e:	b007      	add	sp, #28
 8087c30:	bd30      	pop	{r4, r5, pc}
	...

08087c34 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8087c34:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 8087c36:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 8087c38:	b510      	push	{r4, lr}
 8087c3a:	4b08      	ldr	r3, [pc, #32]	; (8087c5c <_GLOBAL__sub_I_System+0x28>)
 8087c3c:	4c08      	ldr	r4, [pc, #32]	; (8087c60 <_GLOBAL__sub_I_System+0x2c>)
 8087c3e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 8087c40:	4b08      	ldr	r3, [pc, #32]	; (8087c64 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 8087c42:	6020      	str	r0, [r4, #0]
 8087c44:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 8087c46:	71a0      	strb	r0, [r4, #6]
 8087c48:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8087c4a:	f7ff fc8f 	bl	808756c <set_system_mode>
SystemClass System;
 8087c4e:	4620      	mov	r0, r4
 8087c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 8087c54:	4a04      	ldr	r2, [pc, #16]	; (8087c68 <_GLOBAL__sub_I_System+0x34>)
 8087c56:	4905      	ldr	r1, [pc, #20]	; (8087c6c <_GLOBAL__sub_I_System+0x38>)
 8087c58:	f001 bf5e 	b.w	8089b18 <__aeabi_atexit>
 8087c5c:	20001cec 	.word	0x20001cec
 8087c60:	20001ce0 	.word	0x20001ce0
 8087c64:	ffff0000 	.word	0xffff0000
 8087c68:	200002b0 	.word	0x200002b0
 8087c6c:	08080a19 	.word	0x08080a19

08087c70 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8087c70:	b510      	push	{r4, lr}
 8087c72:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8087c74:	f003 f8f5 	bl	808ae62 <strlen>
 8087c78:	1e43      	subs	r3, r0, #1
 8087c7a:	4620      	mov	r0, r4
 8087c7c:	4423      	add	r3, r4
	while(i<j){
 8087c7e:	4283      	cmp	r3, r0
 8087c80:	d906      	bls.n	8087c90 <_Z11str_reversePc+0x20>
		c = *i;
 8087c82:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8087c84:	7819      	ldrb	r1, [r3, #0]
 8087c86:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8087c8a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 8087c8e:	e7f6      	b.n	8087c7e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 8087c90:	bd10      	pop	{r4, pc}

08087c92 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8087c92:	b570      	push	{r4, r5, r6, lr}
 8087c94:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8087c96:	1e91      	subs	r1, r2, #2
 8087c98:	2922      	cmp	r1, #34	; 0x22
 8087c9a:	d822      	bhi.n	8087ce2 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 8087c9c:	4625      	mov	r5, r4

	div_t result;
	while(a){
 8087c9e:	b168      	cbz	r0, 8087cbc <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8087ca0:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8087ca4:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8087ca8:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8087caa:	2809      	cmp	r0, #9
                *ptr += '0';
 8087cac:	bf94      	ite	ls
 8087cae:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8087cb0:	3157      	addhi	r1, #87	; 0x57
 8087cb2:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 8087cb4:	4630      	mov	r0, r6
 8087cb6:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 8087cba:	e7f0      	b.n	8087c9e <ultoa+0xc>
 8087cbc:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 8087cbe:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 8087cc0:	4423      	add	r3, r4
 8087cc2:	4293      	cmp	r3, r2
 8087cc4:	d902      	bls.n	8087ccc <ultoa+0x3a>
            *ptr++ = '0';
 8087cc6:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 8087cca:	e7fa      	b.n	8087cc2 <ultoa+0x30>
 8087ccc:	1b5a      	subs	r2, r3, r5
 8087cce:	42ab      	cmp	r3, r5
 8087cd0:	bf38      	it	cc
 8087cd2:	2200      	movcc	r2, #0

	*ptr = '\0';
 8087cd4:	2300      	movs	r3, #0
	str_reverse(buffer);
 8087cd6:	4620      	mov	r0, r4
	*ptr = '\0';
 8087cd8:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 8087cda:	f7ff ffc9 	bl	8087c70 <_Z11str_reversePc>
	return buffer;
 8087cde:	4620      	mov	r0, r4
}
 8087ce0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 8087ce2:	2000      	movs	r0, #0
 8087ce4:	e7fc      	b.n	8087ce0 <ultoa+0x4e>

08087ce6 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8087ce6:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8087ce8:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8087cea:	460c      	mov	r4, r1
 8087cec:	4615      	mov	r5, r2
	if(a<0){
 8087cee:	da0d      	bge.n	8087d0c <itoa+0x26>
		*buffer = '-';
 8087cf0:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8087cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8087cf6:	bf0c      	ite	eq
 8087cf8:	4618      	moveq	r0, r3
 8087cfa:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8087cfc:	2301      	movs	r3, #1
		*buffer = '-';
 8087cfe:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 8087d00:	462a      	mov	r2, r5
 8087d02:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 8087d04:	f7ff ffc5 	bl	8087c92 <ultoa>
	}
	return buffer;
}
 8087d08:	4620      	mov	r0, r4
 8087d0a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 8087d0c:	2301      	movs	r3, #1
 8087d0e:	e7f9      	b.n	8087d04 <itoa+0x1e>

08087d10 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8087d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8087d14:	4607      	mov	r7, r0
 8087d16:	460d      	mov	r5, r1
 8087d18:	4616      	mov	r6, r2
 8087d1a:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 8087d1c:	2200      	movs	r2, #0
 8087d1e:	2300      	movs	r3, #0
 8087d20:	4638      	mov	r0, r7
 8087d22:	4629      	mov	r1, r5
 8087d24:	f002 fb38 	bl	808a398 <__aeabi_dcmplt>
 8087d28:	b120      	cbz	r0, 8087d34 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 8087d2a:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 8087d2c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 8087d30:	f804 3b01 	strb.w	r3, [r4], #1
 8087d34:	2300      	movs	r3, #0
    }
    long scale = 1;
 8087d36:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 8087d3a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 8087d3c:	b2d9      	uxtb	r1, r3
 8087d3e:	428e      	cmp	r6, r1
 8087d40:	d903      	bls.n	8087d4a <_Z4dtoadhPc+0x3a>
        scale *= 10;
 8087d42:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 8087d46:	3301      	adds	r3, #1
 8087d48:	e7f8      	b.n	8087d3c <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 8087d4a:	4650      	mov	r0, sl
 8087d4c:	f002 f848 	bl	8089de0 <__aeabi_i2d>
 8087d50:	463a      	mov	r2, r7
 8087d52:	462b      	mov	r3, r5
 8087d54:	f002 f8ae 	bl	8089eb4 <__aeabi_dmul>
 8087d58:	4680      	mov	r8, r0
 8087d5a:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 8087d5c:	f002 ff88 	bl	808ac70 <__aeabi_d2ulz>
 8087d60:	4605      	mov	r5, r0
 8087d62:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 8087d64:	f002 f870 	bl	8089e48 <__aeabi_ul2d>
 8087d68:	4602      	mov	r2, r0
 8087d6a:	460b      	mov	r3, r1
 8087d6c:	4640      	mov	r0, r8
 8087d6e:	4649      	mov	r1, r9
 8087d70:	f001 fee8 	bl	8089b44 <__aeabi_dsub>
 8087d74:	2200      	movs	r2, #0
 8087d76:	4b12      	ldr	r3, [pc, #72]	; (8087dc0 <_Z4dtoadhPc+0xb0>)
 8087d78:	f002 fb22 	bl	808a3c0 <__aeabi_dcmpge>
 8087d7c:	b110      	cbz	r0, 8087d84 <_Z4dtoadhPc+0x74>
        fixed++;
 8087d7e:	3501      	adds	r5, #1
 8087d80:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 8087d84:	4652      	mov	r2, sl
 8087d86:	4628      	mov	r0, r5
 8087d88:	4639      	mov	r1, r7
 8087d8a:	17d3      	asrs	r3, r2, #31
 8087d8c:	f002 ff24 	bl	808abd8 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 8087d90:	2301      	movs	r3, #1
 8087d92:	4615      	mov	r5, r2
 8087d94:	4621      	mov	r1, r4
 8087d96:	220a      	movs	r2, #10
 8087d98:	f7ff ff7b 	bl	8087c92 <ultoa>
    if (prec) {
 8087d9c:	b16e      	cbz	r6, 8087dba <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 8087d9e:	4620      	mov	r0, r4
 8087da0:	f003 f85f 	bl	808ae62 <strlen>
        *sout++ = '.';
 8087da4:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 8087da6:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 8087da8:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 8087daa:	220a      	movs	r2, #10
 8087dac:	4633      	mov	r3, r6
 8087dae:	4628      	mov	r0, r5
    }
}
 8087db0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 8087db4:	3101      	adds	r1, #1
 8087db6:	f7ff bf6c 	b.w	8087c92 <ultoa>
}
 8087dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8087dbe:	bf00      	nop
 8087dc0:	3fe00000 	.word	0x3fe00000

08087dc4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8087dc4:	b510      	push	{r4, lr}
 8087dc6:	4604      	mov	r4, r0
{
	free(buffer);
 8087dc8:	6800      	ldr	r0, [r0, #0]
 8087dca:	f7ff fcbb 	bl	8087744 <free>
}
 8087dce:	4620      	mov	r0, r4
 8087dd0:	bd10      	pop	{r4, pc}

08087dd2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8087dd2:	b510      	push	{r4, lr}
 8087dd4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8087dd6:	6800      	ldr	r0, [r0, #0]
 8087dd8:	b108      	cbz	r0, 8087dde <_ZN6String10invalidateEv+0xc>
 8087dda:	f7ff fcb3 	bl	8087744 <free>
	buffer = NULL;
 8087dde:	2300      	movs	r3, #0
	capacity = len = 0;
 8087de0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 8087de4:	6023      	str	r3, [r4, #0]
}
 8087de6:	bd10      	pop	{r4, pc}

08087de8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8087de8:	b538      	push	{r3, r4, r5, lr}
 8087dea:	4604      	mov	r4, r0
 8087dec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8087dee:	6800      	ldr	r0, [r0, #0]
 8087df0:	3101      	adds	r1, #1
 8087df2:	f7ff fcaf 	bl	8087754 <realloc>
	if (newbuffer) {
 8087df6:	b110      	cbz	r0, 8087dfe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8087df8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 8087dfc:	2001      	movs	r0, #1
	}
	return 0;
}
 8087dfe:	bd38      	pop	{r3, r4, r5, pc}

08087e00 <_ZN6String7reserveEj>:
{
 8087e00:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8087e02:	6803      	ldr	r3, [r0, #0]
{
 8087e04:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8087e06:	b123      	cbz	r3, 8087e12 <_ZN6String7reserveEj+0x12>
 8087e08:	6843      	ldr	r3, [r0, #4]
 8087e0a:	428b      	cmp	r3, r1
 8087e0c:	d301      	bcc.n	8087e12 <_ZN6String7reserveEj+0x12>
 8087e0e:	2001      	movs	r0, #1
}
 8087e10:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 8087e12:	4620      	mov	r0, r4
 8087e14:	f7ff ffe8 	bl	8087de8 <_ZN6String12changeBufferEj>
 8087e18:	2800      	cmp	r0, #0
 8087e1a:	d0f9      	beq.n	8087e10 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 8087e1c:	68a3      	ldr	r3, [r4, #8]
 8087e1e:	2b00      	cmp	r3, #0
 8087e20:	d1f5      	bne.n	8087e0e <_ZN6String7reserveEj+0xe>
 8087e22:	6822      	ldr	r2, [r4, #0]
 8087e24:	7013      	strb	r3, [r2, #0]
 8087e26:	e7f2      	b.n	8087e0e <_ZN6String7reserveEj+0xe>

08087e28 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8087e28:	b570      	push	{r4, r5, r6, lr}
 8087e2a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8087e2c:	4611      	mov	r1, r2
{
 8087e2e:	4604      	mov	r4, r0
 8087e30:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8087e32:	f7ff ffe5 	bl	8087e00 <_ZN6String7reserveEj>
 8087e36:	b920      	cbnz	r0, 8087e42 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 8087e38:	4620      	mov	r0, r4
 8087e3a:	f7ff ffca 	bl	8087dd2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 8087e3e:	4620      	mov	r0, r4
 8087e40:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 8087e42:	462a      	mov	r2, r5
 8087e44:	4631      	mov	r1, r6
 8087e46:	6820      	ldr	r0, [r4, #0]
	len = length;
 8087e48:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8087e4a:	f002 ff7b 	bl	808ad44 <memcpy>
	buffer[len] = 0;
 8087e4e:	2100      	movs	r1, #0
 8087e50:	6822      	ldr	r2, [r4, #0]
 8087e52:	68a3      	ldr	r3, [r4, #8]
 8087e54:	54d1      	strb	r1, [r2, r3]
	return *this;
 8087e56:	e7f2      	b.n	8087e3e <_ZN6String4copyEPKcj+0x16>

08087e58 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 8087e58:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 8087e5a:	2300      	movs	r3, #0
String::String(const char *cstr)
 8087e5c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 8087e5e:	460d      	mov	r5, r1
	capacity = 0;
 8087e60:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8087e64:	6083      	str	r3, [r0, #8]
	flags = 0;
 8087e66:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 8087e68:	b139      	cbz	r1, 8087e7a <_ZN6StringC1EPKc+0x22>
 8087e6a:	4608      	mov	r0, r1
 8087e6c:	f002 fff9 	bl	808ae62 <strlen>
 8087e70:	4629      	mov	r1, r5
 8087e72:	4602      	mov	r2, r0
 8087e74:	4620      	mov	r0, r4
 8087e76:	f7ff ffd7 	bl	8087e28 <_ZN6String4copyEPKcj>
}
 8087e7a:	4620      	mov	r0, r4
 8087e7c:	bd38      	pop	{r3, r4, r5, pc}

08087e7e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8087e7e:	b538      	push	{r3, r4, r5, lr}
 8087e80:	4605      	mov	r5, r0
	if (buffer) {
 8087e82:	6800      	ldr	r0, [r0, #0]
{
 8087e84:	460c      	mov	r4, r1
	if (buffer) {
 8087e86:	b168      	cbz	r0, 8087ea4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 8087e88:	686a      	ldr	r2, [r5, #4]
 8087e8a:	688b      	ldr	r3, [r1, #8]
 8087e8c:	429a      	cmp	r2, r3
 8087e8e:	d307      	bcc.n	8087ea0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 8087e90:	6809      	ldr	r1, [r1, #0]
 8087e92:	f002 ffc2 	bl	808ae1a <strcpy>
			len = rhs.len;
 8087e96:	68a3      	ldr	r3, [r4, #8]
 8087e98:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8087e9a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 8087e9c:	60a3      	str	r3, [r4, #8]
}
 8087e9e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 8087ea0:	f7ff fc50 	bl	8087744 <free>
	buffer = rhs.buffer;
 8087ea4:	6823      	ldr	r3, [r4, #0]
 8087ea6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8087ea8:	6863      	ldr	r3, [r4, #4]
 8087eaa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8087eac:	68a3      	ldr	r3, [r4, #8]
 8087eae:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8087eb0:	2300      	movs	r3, #0
	rhs.capacity = 0;
 8087eb2:	e9c4 3300 	strd	r3, r3, [r4]
 8087eb6:	e7f1      	b.n	8087e9c <_ZN6String4moveERS_+0x1e>

08087eb8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8087eb8:	4288      	cmp	r0, r1
{
 8087eba:	b510      	push	{r4, lr}
 8087ebc:	460b      	mov	r3, r1
 8087ebe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8087ec0:	d004      	beq.n	8087ecc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8087ec2:	6809      	ldr	r1, [r1, #0]
 8087ec4:	b121      	cbz	r1, 8087ed0 <_ZN6StringaSERKS_+0x18>
 8087ec6:	689a      	ldr	r2, [r3, #8]
 8087ec8:	f7ff ffae 	bl	8087e28 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8087ecc:	4620      	mov	r0, r4
 8087ece:	bd10      	pop	{r4, pc}
	else invalidate();
 8087ed0:	f7ff ff7f 	bl	8087dd2 <_ZN6String10invalidateEv>
 8087ed4:	e7fa      	b.n	8087ecc <_ZN6StringaSERKS_+0x14>

08087ed6 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 8087ed6:	2300      	movs	r3, #0
String::String(const String &value)
 8087ed8:	b510      	push	{r4, lr}
 8087eda:	4604      	mov	r4, r0
	capacity = 0;
 8087edc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8087ee0:	6083      	str	r3, [r0, #8]
	flags = 0;
 8087ee2:	7303      	strb	r3, [r0, #12]
	*this = value;
 8087ee4:	f7ff ffe8 	bl	8087eb8 <_ZN6StringaSERKS_>
}
 8087ee8:	4620      	mov	r0, r4
 8087eea:	bd10      	pop	{r4, pc}

08087eec <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8087eec:	4288      	cmp	r0, r1
{
 8087eee:	b510      	push	{r4, lr}
 8087ef0:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8087ef2:	d001      	beq.n	8087ef8 <_ZN6StringaSEOS_+0xc>
 8087ef4:	f7ff ffc3 	bl	8087e7e <_ZN6String4moveERS_>
	return *this;
}
 8087ef8:	4620      	mov	r0, r4
 8087efa:	bd10      	pop	{r4, pc}

08087efc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8087efc:	b538      	push	{r3, r4, r5, lr}
 8087efe:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8087f00:	460c      	mov	r4, r1
 8087f02:	b149      	cbz	r1, 8087f18 <_ZN6StringaSEPKc+0x1c>
 8087f04:	4608      	mov	r0, r1
 8087f06:	f002 ffac 	bl	808ae62 <strlen>
 8087f0a:	4621      	mov	r1, r4
 8087f0c:	4602      	mov	r2, r0
 8087f0e:	4628      	mov	r0, r5
 8087f10:	f7ff ff8a 	bl	8087e28 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 8087f14:	4628      	mov	r0, r5
 8087f16:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 8087f18:	f7ff ff5b 	bl	8087dd2 <_ZN6String10invalidateEv>
 8087f1c:	e7fa      	b.n	8087f14 <_ZN6StringaSEPKc+0x18>

08087f1e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 8087f1e:	b510      	push	{r4, lr}
	buffer = NULL;
 8087f20:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 8087f22:	4604      	mov	r4, r0
 8087f24:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 8087f26:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 8087f2a:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8087f2c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 8087f2e:	4608      	mov	r0, r1
	itoa(value, buf, base);
 8087f30:	a901      	add	r1, sp, #4
 8087f32:	f7ff fed8 	bl	8087ce6 <itoa>
	*this = buf;
 8087f36:	4620      	mov	r0, r4
 8087f38:	a901      	add	r1, sp, #4
 8087f3a:	f7ff ffdf 	bl	8087efc <_ZN6StringaSEPKc>
}
 8087f3e:	4620      	mov	r0, r4
 8087f40:	b00a      	add	sp, #40	; 0x28
 8087f42:	bd10      	pop	{r4, pc}

08087f44 <_ZN6StringC1Efi>:
	buffer = NULL;
 8087f44:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 8087f46:	b530      	push	{r4, r5, lr}
 8087f48:	4604      	mov	r4, r0
 8087f4a:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 8087f4c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 8087f50:	6083      	str	r3, [r0, #8]
	flags = 0;
 8087f52:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 8087f54:	b2d5      	uxtb	r5, r2
 8087f56:	4608      	mov	r0, r1
 8087f58:	f001 ff54 	bl	8089e04 <__aeabi_f2d>
 8087f5c:	462a      	mov	r2, r5
 8087f5e:	ab01      	add	r3, sp, #4
 8087f60:	f7ff fed6 	bl	8087d10 <_Z4dtoadhPc>
        *this = buf;
 8087f64:	4620      	mov	r0, r4
 8087f66:	a901      	add	r1, sp, #4
 8087f68:	f7ff ffc8 	bl	8087efc <_ZN6StringaSEPKc>
}
 8087f6c:	4620      	mov	r0, r4
 8087f6e:	b00b      	add	sp, #44	; 0x2c
 8087f70:	bd30      	pop	{r4, r5, pc}

08087f72 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
 8087f72:	b510      	push	{r4, lr}
 8087f74:	4619      	mov	r1, r3
 8087f76:	4604      	mov	r4, r0
	buffer = NULL;
 8087f78:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
 8087f7a:	b08a      	sub	sp, #40	; 0x28
 8087f7c:	4610      	mov	r0, r2
	capacity = 0;
 8087f7e:	e9c4 3300 	strd	r3, r3, [r4]
	dtoa(value, decimalPlaces, buf);
 8087f82:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	len = 0;
 8087f86:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8087f88:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
 8087f8a:	ab01      	add	r3, sp, #4
 8087f8c:	f7ff fec0 	bl	8087d10 <_Z4dtoadhPc>
        *this = buf;
 8087f90:	4620      	mov	r0, r4
 8087f92:	a901      	add	r1, sp, #4
 8087f94:	f7ff ffb2 	bl	8087efc <_ZN6StringaSEPKc>
}
 8087f98:	4620      	mov	r0, r4
 8087f9a:	b00a      	add	sp, #40	; 0x28
 8087f9c:	bd10      	pop	{r4, pc}

08087f9e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8087f9e:	b570      	push	{r4, r5, r6, lr}
 8087fa0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8087fa2:	460e      	mov	r6, r1
 8087fa4:	b909      	cbnz	r1, 8087faa <_ZN6String6concatEPKcj+0xc>
 8087fa6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8087fa8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8087faa:	b16a      	cbz	r2, 8087fc8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 8087fac:	6884      	ldr	r4, [r0, #8]
 8087fae:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 8087fb0:	4621      	mov	r1, r4
 8087fb2:	f7ff ff25 	bl	8087e00 <_ZN6String7reserveEj>
 8087fb6:	2800      	cmp	r0, #0
 8087fb8:	d0f5      	beq.n	8087fa6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8087fba:	6828      	ldr	r0, [r5, #0]
 8087fbc:	68ab      	ldr	r3, [r5, #8]
 8087fbe:	4631      	mov	r1, r6
 8087fc0:	4418      	add	r0, r3
 8087fc2:	f002 ff2a 	bl	808ae1a <strcpy>
	len = newlen;
 8087fc6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 8087fc8:	2001      	movs	r0, #1
 8087fca:	e7ed      	b.n	8087fa8 <_ZN6String6concatEPKcj+0xa>

08087fcc <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 8087fcc:	688a      	ldr	r2, [r1, #8]
 8087fce:	6809      	ldr	r1, [r1, #0]
 8087fd0:	f7ff bfe5 	b.w	8087f9e <_ZN6String6concatEPKcj>

08087fd4 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 8087fd4:	b538      	push	{r3, r4, r5, lr}
 8087fd6:	4605      	mov	r5, r0
	if (!cstr) return 0;
 8087fd8:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 8087fda:	4608      	mov	r0, r1
	if (!cstr) return 0;
 8087fdc:	b141      	cbz	r1, 8087ff0 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 8087fde:	f002 ff40 	bl	808ae62 <strlen>
 8087fe2:	4621      	mov	r1, r4
 8087fe4:	4602      	mov	r2, r0
 8087fe6:	4628      	mov	r0, r5
}
 8087fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 8087fec:	f7ff bfd7 	b.w	8087f9e <_ZN6String6concatEPKcj>
}
 8087ff0:	bd38      	pop	{r3, r4, r5, pc}

08087ff2 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8087ff2:	2300      	movs	r3, #0
{
 8087ff4:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 8087ff6:	2201      	movs	r2, #1
	buf[0] = c;
 8087ff8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 8087ffc:	a901      	add	r1, sp, #4
	buf[1] = 0;
 8087ffe:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 8088002:	f7ff ffcc 	bl	8087f9e <_ZN6String6concatEPKcj>
}
 8088006:	b003      	add	sp, #12
 8088008:	f85d fb04 	ldr.w	pc, [sp], #4

0808800c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808800c:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808800e:	688a      	ldr	r2, [r1, #8]
 8088010:	6809      	ldr	r1, [r1, #0]
{
 8088012:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8088014:	f7ff ffc3 	bl	8087f9e <_ZN6String6concatEPKcj>
 8088018:	b910      	cbnz	r0, 8088020 <_ZplRK15StringSumHelperRK6String+0x14>
 808801a:	4620      	mov	r0, r4
 808801c:	f7ff fed9 	bl	8087dd2 <_ZN6String10invalidateEv>
	return a;
}
 8088020:	4620      	mov	r0, r4
 8088022:	bd10      	pop	{r4, pc}

08088024 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8088024:	b538      	push	{r3, r4, r5, lr}
 8088026:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8088028:	460d      	mov	r5, r1
 808802a:	b921      	cbnz	r1, 8088036 <_ZplRK15StringSumHelperPKc+0x12>
 808802c:	4620      	mov	r0, r4
 808802e:	f7ff fed0 	bl	8087dd2 <_ZN6String10invalidateEv>
	return a;
}
 8088032:	4620      	mov	r0, r4
 8088034:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8088036:	4608      	mov	r0, r1
 8088038:	f002 ff13 	bl	808ae62 <strlen>
 808803c:	4629      	mov	r1, r5
 808803e:	4602      	mov	r2, r0
 8088040:	4620      	mov	r0, r4
 8088042:	f7ff ffac 	bl	8087f9e <_ZN6String6concatEPKcj>
 8088046:	2800      	cmp	r0, #0
 8088048:	d0f0      	beq.n	808802c <_ZplRK15StringSumHelperPKc+0x8>
 808804a:	e7f2      	b.n	8088032 <_ZplRK15StringSumHelperPKc+0xe>

0808804c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808804c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808804e:	6882      	ldr	r2, [r0, #8]
 8088050:	b93a      	cbnz	r2, 8088062 <_ZNK6String6equalsEPKc+0x16>
 8088052:	b121      	cbz	r1, 808805e <_ZNK6String6equalsEPKc+0x12>
 8088054:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 8088056:	fab0 f080 	clz	r0, r0
 808805a:	0940      	lsrs	r0, r0, #5
 808805c:	e000      	b.n	8088060 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808805e:	2001      	movs	r0, #1
}
 8088060:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8088062:	6800      	ldr	r0, [r0, #0]
 8088064:	b909      	cbnz	r1, 808806a <_ZNK6String6equalsEPKc+0x1e>
 8088066:	7800      	ldrb	r0, [r0, #0]
 8088068:	e7f5      	b.n	8088056 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 808806a:	f002 fecc 	bl	808ae06 <strcmp>
 808806e:	e7f2      	b.n	8088056 <_ZNK6String6equalsEPKc+0xa>

08088070 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8088070:	6883      	ldr	r3, [r0, #8]
 8088072:	428b      	cmp	r3, r1
 8088074:	d903      	bls.n	808807e <_ZNK6StringixEj+0xe>
 8088076:	6800      	ldr	r0, [r0, #0]
 8088078:	b110      	cbz	r0, 8088080 <_ZNK6StringixEj+0x10>
	return buffer[index];
 808807a:	5c40      	ldrb	r0, [r0, r1]
 808807c:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 808807e:	2000      	movs	r0, #0
}
 8088080:	4770      	bx	lr

08088082 <_ZNK6String6charAtEj>:
	return operator[](loc);
 8088082:	f7ff bff5 	b.w	8088070 <_ZNK6StringixEj>

08088086 <_ZNK6String8getBytesEPhjj>:

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8088086:	b558      	push	{r3, r4, r6, lr}
 8088088:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 808808a:	b12a      	cbz	r2, 8088098 <_ZNK6String8getBytesEPhjj+0x12>
 808808c:	b121      	cbz	r1, 8088098 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 808808e:	6884      	ldr	r4, [r0, #8]
 8088090:	429c      	cmp	r4, r3
 8088092:	d802      	bhi.n	808809a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8088094:	2300      	movs	r3, #0
 8088096:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 8088098:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 808809a:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 808809c:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 808809e:	4294      	cmp	r4, r2
 80880a0:	bf28      	it	cs
 80880a2:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 80880a4:	6801      	ldr	r1, [r0, #0]
 80880a6:	4622      	mov	r2, r4
 80880a8:	4419      	add	r1, r3
 80880aa:	4630      	mov	r0, r6
 80880ac:	f002 fef3 	bl	808ae96 <strncpy>
	buf[n] = 0;
 80880b0:	2300      	movs	r3, #0
 80880b2:	5533      	strb	r3, [r6, r4]
 80880b4:	e7f0      	b.n	8088098 <_ZNK6String8getBytesEPhjj+0x12>

080880b6 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
 80880b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80880ba:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80880bc:	688a      	ldr	r2, [r1, #8]
{
 80880be:	460e      	mov	r6, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80880c0:	b1ca      	cbz	r2, 80880f6 <_ZNK6String11lastIndexOfERKS_j+0x40>
 80880c2:	6883      	ldr	r3, [r0, #8]
 80880c4:	b1bb      	cbz	r3, 80880f6 <_ZNK6String11lastIndexOfERKS_j+0x40>
 80880c6:	429a      	cmp	r2, r3
 80880c8:	d815      	bhi.n	80880f6 <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80880ca:	6807      	ldr	r7, [r0, #0]
	int found = -1;
 80880cc:	f04f 34ff 	mov.w	r4, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80880d0:	4638      	mov	r0, r7
	if (fromIndex >= len) fromIndex = len - 1;
 80880d2:	42ab      	cmp	r3, r5
 80880d4:	bf98      	it	ls
 80880d6:	f103 35ff 	addls.w	r5, r3, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80880da:	eb07 0805 	add.w	r8, r7, r5
 80880de:	4540      	cmp	r0, r8
 80880e0:	d80b      	bhi.n	80880fa <_ZNK6String11lastIndexOfERKS_j+0x44>
		p = strstr(p, s2.buffer);
 80880e2:	6831      	ldr	r1, [r6, #0]
 80880e4:	f002 feea 	bl	808aebc <strstr>
		if (!p) break;
 80880e8:	b138      	cbz	r0, 80880fa <_ZNK6String11lastIndexOfERKS_j+0x44>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
 80880ea:	1bc3      	subs	r3, r0, r7
 80880ec:	42ab      	cmp	r3, r5
 80880ee:	bf98      	it	ls
 80880f0:	461c      	movls	r4, r3
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80880f2:	3001      	adds	r0, #1
 80880f4:	e7f3      	b.n	80880de <_ZNK6String11lastIndexOfERKS_j+0x28>
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80880f6:	f04f 34ff 	mov.w	r4, #4294967295
	}
	return found;
}
 80880fa:	4620      	mov	r0, r4
 80880fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08088100 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8088100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088102:	461d      	mov	r5, r3
	if (left > right) {
 8088104:	429a      	cmp	r2, r3
 8088106:	bf88      	it	hi
 8088108:	4613      	movhi	r3, r2
{
 808810a:	460f      	mov	r7, r1
 808810c:	4614      	mov	r4, r2
	if (left > right) {
 808810e:	bf88      	it	hi
 8088110:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8088112:	490b      	ldr	r1, [pc, #44]	; (8088140 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 8088114:	bf88      	it	hi
 8088116:	461d      	movhi	r5, r3
{
 8088118:	4606      	mov	r6, r0
	String out;
 808811a:	f7ff fe9d 	bl	8087e58 <_ZN6StringC1EPKc>
	if (left > len) return out;
 808811e:	68ba      	ldr	r2, [r7, #8]
 8088120:	42a2      	cmp	r2, r4
 8088122:	d30a      	bcc.n	808813a <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 8088124:	6839      	ldr	r1, [r7, #0]
 8088126:	42aa      	cmp	r2, r5
 8088128:	bf94      	ite	ls
 808812a:	ebc4 0202 	rsbls	r2, r4, r2
 808812e:	ebc4 0205 	rsbhi	r2, r4, r5
 8088132:	4630      	mov	r0, r6
 8088134:	4421      	add	r1, r4
 8088136:	f7ff fe77 	bl	8087e28 <_ZN6String4copyEPKcj>
	return out;
}
 808813a:	4630      	mov	r0, r6
 808813c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808813e:	bf00      	nop
 8088140:	0808eb69 	.word	0x0808eb69

08088144 <_ZN6String7replaceERKS_S1_>:
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
 8088144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (len == 0 || find.len == 0) return *this;
 8088148:	f8d0 a008 	ldr.w	sl, [r0, #8]
{
 808814c:	4605      	mov	r5, r0
 808814e:	460f      	mov	r7, r1
 8088150:	4616      	mov	r6, r2
	if (len == 0 || find.len == 0) return *this;
 8088152:	f1ba 0f00 	cmp.w	sl, #0
 8088156:	d046      	beq.n	80881e6 <_ZN6String7replaceERKS_S1_+0xa2>
 8088158:	f8d1 b008 	ldr.w	fp, [r1, #8]
 808815c:	f1bb 0f00 	cmp.w	fp, #0
 8088160:	d041      	beq.n	80881e6 <_ZN6String7replaceERKS_S1_+0xa2>
	int diff = replace.len - find.len;
 8088162:	6893      	ldr	r3, [r2, #8]
	char *readFrom = buffer;
 8088164:	6804      	ldr	r4, [r0, #0]
	int diff = replace.len - find.len;
 8088166:	eba3 080b 	sub.w	r8, r3, fp
	char *foundAt;
	if (diff == 0) {
 808816a:	f1b8 0f00 	cmp.w	r8, #0
 808816e:	d10d      	bne.n	808818c <_ZN6String7replaceERKS_S1_+0x48>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8088170:	4620      	mov	r0, r4
 8088172:	6839      	ldr	r1, [r7, #0]
 8088174:	f002 fea2 	bl	808aebc <strstr>
 8088178:	4604      	mov	r4, r0
 808817a:	2800      	cmp	r0, #0
 808817c:	d033      	beq.n	80881e6 <_ZN6String7replaceERKS_S1_+0xa2>
			memcpy(foundAt, replace.buffer, replace.len);
 808817e:	68b2      	ldr	r2, [r6, #8]
 8088180:	6831      	ldr	r1, [r6, #0]
 8088182:	f002 fddf 	bl	808ad44 <memcpy>
			readFrom = foundAt + replace.len;
 8088186:	68b0      	ldr	r0, [r6, #8]
 8088188:	4404      	add	r4, r0
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 808818a:	e7f1      	b.n	8088170 <_ZN6String7replaceERKS_S1_+0x2c>
		}
	} else if (diff < 0) {
 808818c:	db0b      	blt.n	80881a6 <_ZN6String7replaceERKS_S1_+0x62>
 808818e:	46d1      	mov	r9, sl
 8088190:	6809      	ldr	r1, [r1, #0]
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8088192:	4620      	mov	r0, r4
 8088194:	9101      	str	r1, [sp, #4]
 8088196:	f002 fe91 	bl	808aebc <strstr>
 808819a:	b340      	cbz	r0, 80881ee <_ZN6String7replaceERKS_S1_+0xaa>
 808819c:	9901      	ldr	r1, [sp, #4]
			readFrom = foundAt + find.len;
 808819e:	eb00 040b 	add.w	r4, r0, fp
			size += diff;
 80881a2:	44c1      	add	r9, r8
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80881a4:	e7f5      	b.n	8088192 <_ZN6String7replaceERKS_S1_+0x4e>
		char *writeTo = buffer;
 80881a6:	46a1      	mov	r9, r4
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80881a8:	4620      	mov	r0, r4
 80881aa:	6839      	ldr	r1, [r7, #0]
 80881ac:	f002 fe86 	bl	808aebc <strstr>
 80881b0:	4682      	mov	sl, r0
 80881b2:	b1a0      	cbz	r0, 80881de <_ZN6String7replaceERKS_S1_+0x9a>
			unsigned int n = foundAt - readFrom;
 80881b4:	eba0 0b04 	sub.w	fp, r0, r4
			memcpy(writeTo, readFrom, n);
 80881b8:	4621      	mov	r1, r4
 80881ba:	465a      	mov	r2, fp
 80881bc:	4648      	mov	r0, r9
			writeTo += n;
 80881be:	44d9      	add	r9, fp
			memcpy(writeTo, readFrom, n);
 80881c0:	f002 fdc0 	bl	808ad44 <memcpy>
			memcpy(writeTo, replace.buffer, replace.len);
 80881c4:	4648      	mov	r0, r9
 80881c6:	68b2      	ldr	r2, [r6, #8]
 80881c8:	6831      	ldr	r1, [r6, #0]
 80881ca:	f002 fdbb 	bl	808ad44 <memcpy>
			len += diff;
 80881ce:	68ab      	ldr	r3, [r5, #8]
			writeTo += replace.len;
 80881d0:	68b2      	ldr	r2, [r6, #8]
			readFrom = foundAt + find.len;
 80881d2:	68bc      	ldr	r4, [r7, #8]
			len += diff;
 80881d4:	4443      	add	r3, r8
			writeTo += replace.len;
 80881d6:	4491      	add	r9, r2
			readFrom = foundAt + find.len;
 80881d8:	4454      	add	r4, sl
			len += diff;
 80881da:	60ab      	str	r3, [r5, #8]
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80881dc:	e7e4      	b.n	80881a8 <_ZN6String7replaceERKS_S1_+0x64>
		strcpy(writeTo, readFrom);
 80881de:	4621      	mov	r1, r4
 80881e0:	4648      	mov	r0, r9
 80881e2:	f002 fe1a 	bl	808ae1a <strcpy>
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
        return *this;
}
 80881e6:	4628      	mov	r0, r5
 80881e8:	b003      	add	sp, #12
 80881ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (size == len) return *this;;
 80881ee:	45ca      	cmp	sl, r9
 80881f0:	d0f9      	beq.n	80881e6 <_ZN6String7replaceERKS_S1_+0xa2>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
 80881f2:	686b      	ldr	r3, [r5, #4]
 80881f4:	454b      	cmp	r3, r9
 80881f6:	d323      	bcc.n	8088240 <_ZN6String7replaceERKS_S1_+0xfc>
			buffer[len] = 0;
 80881f8:	f04f 0900 	mov.w	r9, #0
		int index = len - 1;
 80881fc:	68ac      	ldr	r4, [r5, #8]
 80881fe:	1e62      	subs	r2, r4, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 8088200:	2a00      	cmp	r2, #0
 8088202:	dbf0      	blt.n	80881e6 <_ZN6String7replaceERKS_S1_+0xa2>
 8088204:	4639      	mov	r1, r7
 8088206:	4628      	mov	r0, r5
 8088208:	f7ff ff55 	bl	80880b6 <_ZNK6String11lastIndexOfERKS_j>
 808820c:	1e04      	subs	r4, r0, #0
 808820e:	dbea      	blt.n	80881e6 <_ZN6String7replaceERKS_S1_+0xa2>
			readFrom = buffer + index + find.len;
 8088210:	68bb      	ldr	r3, [r7, #8]
 8088212:	6829      	ldr	r1, [r5, #0]
 8088214:	4423      	add	r3, r4
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 8088216:	68aa      	ldr	r2, [r5, #8]
			readFrom = buffer + index + find.len;
 8088218:	4419      	add	r1, r3
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 808821a:	1ad2      	subs	r2, r2, r3
 808821c:	eb01 0008 	add.w	r0, r1, r8
 8088220:	f002 fd9e 	bl	808ad60 <memmove>
			len += diff;
 8088224:	68ab      	ldr	r3, [r5, #8]
			buffer[len] = 0;
 8088226:	682a      	ldr	r2, [r5, #0]
			len += diff;
 8088228:	4443      	add	r3, r8
 808822a:	60ab      	str	r3, [r5, #8]
			buffer[len] = 0;
 808822c:	f802 9003 	strb.w	r9, [r2, r3]
			memcpy(buffer + index, replace.buffer, replace.len);
 8088230:	6828      	ldr	r0, [r5, #0]
 8088232:	68b2      	ldr	r2, [r6, #8]
 8088234:	6831      	ldr	r1, [r6, #0]
 8088236:	4420      	add	r0, r4
 8088238:	f002 fd84 	bl	808ad44 <memcpy>
			index--;
 808823c:	1e62      	subs	r2, r4, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 808823e:	e7df      	b.n	8088200 <_ZN6String7replaceERKS_S1_+0xbc>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
 8088240:	4649      	mov	r1, r9
 8088242:	4628      	mov	r0, r5
 8088244:	f7ff fdd0 	bl	8087de8 <_ZN6String12changeBufferEj>
 8088248:	2800      	cmp	r0, #0
 808824a:	d1d5      	bne.n	80881f8 <_ZN6String7replaceERKS_S1_+0xb4>
 808824c:	e7cb      	b.n	80881e6 <_ZN6String7replaceERKS_S1_+0xa2>

0808824e <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
 808824e:	b538      	push	{r3, r4, r5, lr}
 8088250:	4604      	mov	r4, r0
	if (index >= len) { return *this; }
 8088252:	68a3      	ldr	r3, [r4, #8]
String& String::remove(unsigned int index, unsigned int count){
 8088254:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
 8088256:	428b      	cmp	r3, r1
 8088258:	d911      	bls.n	808827e <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
 808825a:	b182      	cbz	r2, 808827e <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
 808825c:	4411      	add	r1, r2
 808825e:	428b      	cmp	r3, r1
 8088260:	bf38      	it	cc
 8088262:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
 8088264:	6825      	ldr	r5, [r4, #0]
	len = len - count;
 8088266:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
 8088268:	1813      	adds	r3, r2, r0
	len = len - count;
 808826a:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
 808826c:	1a0a      	subs	r2, r1, r0
 808826e:	18e9      	adds	r1, r5, r3
 8088270:	4428      	add	r0, r5
 8088272:	f002 fd75 	bl	808ad60 <memmove>
	buffer[len] = 0;
 8088276:	2100      	movs	r1, #0
 8088278:	6822      	ldr	r2, [r4, #0]
 808827a:	68a3      	ldr	r3, [r4, #8]
 808827c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808827e:	4620      	mov	r0, r4
 8088280:	bd38      	pop	{r3, r4, r5, pc}

08088282 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8088282:	6800      	ldr	r0, [r0, #0]
 8088284:	b108      	cbz	r0, 808828a <_ZNK6String5toIntEv+0x8>
 8088286:	f002 bd3c 	b.w	808ad02 <atol>
	return 0;
}
 808828a:	4770      	bx	lr

0808828c <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808828c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808828e:	6800      	ldr	r0, [r0, #0]
 8088290:	b120      	cbz	r0, 808829c <_ZNK6String7toFloatEv+0x10>
 8088292:	f002 fd33 	bl	808acfc <atof>
 8088296:	f002 f905 	bl	808a4a4 <__aeabi_d2f>
	return 0;
}
 808829a:	bd08      	pop	{r3, pc}
	return 0;
 808829c:	2000      	movs	r0, #0
 808829e:	e7fc      	b.n	808829a <_ZNK6String7toFloatEv+0xe>

080882a0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80882a0:	b40e      	push	{r1, r2, r3}
 80882a2:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80882a4:	ad09      	add	r5, sp, #36	; 0x24
 80882a6:	f855 7b04 	ldr.w	r7, [r5], #4
 80882aa:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80882ac:	462b      	mov	r3, r5
 80882ae:	463a      	mov	r2, r7
 80882b0:	2105      	movs	r1, #5
 80882b2:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 80882b4:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80882b6:	f7ff fa6d 	bl	8087794 <vsnprintf>
 80882ba:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80882bc:	490b      	ldr	r1, [pc, #44]	; (80882ec <_ZN6String6formatEPKcz+0x4c>)
 80882be:	4620      	mov	r0, r4
 80882c0:	f7ff fdca 	bl	8087e58 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 80882c4:	4631      	mov	r1, r6
 80882c6:	4620      	mov	r0, r4
 80882c8:	f7ff fd9a 	bl	8087e00 <_ZN6String7reserveEj>
    if (result.buffer) {
 80882cc:	6820      	ldr	r0, [r4, #0]
 80882ce:	b130      	cbz	r0, 80882de <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80882d0:	462b      	mov	r3, r5
 80882d2:	463a      	mov	r2, r7
 80882d4:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 80882d6:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80882d8:	f7ff fa5c 	bl	8087794 <vsnprintf>
        va_end(marker);
        result.len = n;
 80882dc:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 80882de:	4620      	mov	r0, r4
 80882e0:	b004      	add	sp, #16
 80882e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80882e6:	b003      	add	sp, #12
 80882e8:	4770      	bx	lr
 80882ea:	bf00      	nop
 80882ec:	0808eb69 	.word	0x0808eb69

080882f0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80882f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80882f2:	4606      	mov	r6, r0
 80882f4:	460d      	mov	r5, r1
  size_t n = 0;
 80882f6:	2400      	movs	r4, #0
 80882f8:	188f      	adds	r7, r1, r2
  while (size--) {
 80882fa:	42bd      	cmp	r5, r7
 80882fc:	d00c      	beq.n	8088318 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80882fe:	6833      	ldr	r3, [r6, #0]
 8088300:	4630      	mov	r0, r6
 8088302:	689b      	ldr	r3, [r3, #8]
 8088304:	f815 1b01 	ldrb.w	r1, [r5], #1
 8088308:	4798      	blx	r3
     if (chunk>=0)
 808830a:	1e03      	subs	r3, r0, #0
 808830c:	db01      	blt.n	8088312 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808830e:	441c      	add	r4, r3
  while (size--) {
 8088310:	e7f3      	b.n	80882fa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8088312:	2c00      	cmp	r4, #0
 8088314:	bf08      	it	eq
 8088316:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 8088318:	4620      	mov	r0, r4
 808831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808831c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 808831c:	b508      	push	{r3, lr}
  return write(str);
 808831e:	f7fe f939 	bl	8086594 <_ZN5Print5writeEPKc>
}
 8088322:	bd08      	pop	{r3, pc}

08088324 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 8088324:	6803      	ldr	r3, [r0, #0]
 8088326:	689b      	ldr	r3, [r3, #8]
 8088328:	4718      	bx	r3

0808832a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808832a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808832c:	210d      	movs	r1, #13
{
 808832e:	4605      	mov	r5, r0
  size_t n = print('\r');
 8088330:	f7ff fff8 	bl	8088324 <_ZN5Print5printEc>
  n += print('\n');
 8088334:	210a      	movs	r1, #10
  size_t n = print('\r');
 8088336:	4604      	mov	r4, r0
  n += print('\n');
 8088338:	4628      	mov	r0, r5
 808833a:	f7ff fff3 	bl	8088324 <_ZN5Print5printEc>
  return n;
}
 808833e:	4420      	add	r0, r4
 8088340:	bd38      	pop	{r3, r4, r5, pc}

08088342 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8088342:	b538      	push	{r3, r4, r5, lr}
 8088344:	4605      	mov	r5, r0
  return write(str);
 8088346:	f7fe f925 	bl	8086594 <_ZN5Print5writeEPKc>
 808834a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 808834c:	4628      	mov	r0, r5
 808834e:	f7ff ffec 	bl	808832a <_ZN5Print7printlnEv>
  return n;
}
 8088352:	4420      	add	r0, r4
 8088354:	bd38      	pop	{r3, r4, r5, pc}

08088356 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 8088356:	b538      	push	{r3, r4, r5, lr}
 8088358:	4605      	mov	r5, r0
  size_t n = print(c);
 808835a:	f7ff ffe3 	bl	8088324 <_ZN5Print5printEc>
 808835e:	4604      	mov	r4, r0
  n += println();
 8088360:	4628      	mov	r0, r5
 8088362:	f7ff ffe2 	bl	808832a <_ZN5Print7printlnEv>
  return n;
}
 8088366:	4420      	add	r0, r4
 8088368:	bd38      	pop	{r3, r4, r5, pc}

0808836a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808836a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808836c:	2a01      	cmp	r2, #1
 808836e:	bf98      	it	ls
 8088370:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 8088372:	b530      	push	{r4, r5, lr}
 8088374:	b08b      	sub	sp, #44	; 0x2c
 8088376:	460c      	mov	r4, r1
  *str = '\0';
 8088378:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 808837c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 808837e:	4625      	mov	r5, r4
 8088380:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 8088384:	fb04 5312 	mls	r3, r4, r2, r5
 8088388:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808838a:	2b09      	cmp	r3, #9
 808838c:	bf94      	ite	ls
 808838e:	3330      	addls	r3, #48	; 0x30
 8088390:	3337      	addhi	r3, #55	; 0x37
 8088392:	b2db      	uxtb	r3, r3
  } while(n);
 8088394:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8088396:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 808839a:	d9f0      	bls.n	808837e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 808839c:	f7fe f8fa 	bl	8086594 <_ZN5Print5writeEPKc>
}
 80883a0:	b00b      	add	sp, #44	; 0x2c
 80883a2:	bd30      	pop	{r4, r5, pc}

080883a4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80883a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80883a8:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80883aa:	4619      	mov	r1, r3
 80883ac:	4610      	mov	r0, r2
{
 80883ae:	4692      	mov	sl, r2
 80883b0:	461f      	mov	r7, r3
 80883b2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80883b6:	f002 f817 	bl	808a3e8 <__aeabi_dcmpun>
 80883ba:	b140      	cbz	r0, 80883ce <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80883bc:	4950      	ldr	r1, [pc, #320]	; (8088500 <_ZN5Print10printFloatEdh+0x15c>)
 80883be:	4628      	mov	r0, r5
 80883c0:	f7fe f8e8 	bl	8086594 <_ZN5Print5writeEPKc>
 80883c4:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80883c6:	4620      	mov	r0, r4
 80883c8:	b003      	add	sp, #12
 80883ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80883ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80883d2:	f04f 32ff 	mov.w	r2, #4294967295
 80883d6:	4650      	mov	r0, sl
 80883d8:	4621      	mov	r1, r4
 80883da:	4b4a      	ldr	r3, [pc, #296]	; (8088504 <_ZN5Print10printFloatEdh+0x160>)
 80883dc:	f002 f804 	bl	808a3e8 <__aeabi_dcmpun>
 80883e0:	b948      	cbnz	r0, 80883f6 <_ZN5Print10printFloatEdh+0x52>
 80883e2:	f04f 32ff 	mov.w	r2, #4294967295
 80883e6:	4650      	mov	r0, sl
 80883e8:	4621      	mov	r1, r4
 80883ea:	4b46      	ldr	r3, [pc, #280]	; (8088504 <_ZN5Print10printFloatEdh+0x160>)
 80883ec:	f001 ffde 	bl	808a3ac <__aeabi_dcmple>
 80883f0:	b908      	cbnz	r0, 80883f6 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80883f2:	4945      	ldr	r1, [pc, #276]	; (8088508 <_ZN5Print10printFloatEdh+0x164>)
 80883f4:	e7e3      	b.n	80883be <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80883f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80883fa:	4650      	mov	r0, sl
 80883fc:	4639      	mov	r1, r7
 80883fe:	4b43      	ldr	r3, [pc, #268]	; (808850c <_ZN5Print10printFloatEdh+0x168>)
 8088400:	f001 ffe8 	bl	808a3d4 <__aeabi_dcmpgt>
 8088404:	b108      	cbz	r0, 808840a <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 8088406:	4942      	ldr	r1, [pc, #264]	; (8088510 <_ZN5Print10printFloatEdh+0x16c>)
 8088408:	e7d9      	b.n	80883be <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 808840a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808840e:	4650      	mov	r0, sl
 8088410:	4639      	mov	r1, r7
 8088412:	4b40      	ldr	r3, [pc, #256]	; (8088514 <_ZN5Print10printFloatEdh+0x170>)
 8088414:	f001 ffc0 	bl	808a398 <__aeabi_dcmplt>
 8088418:	2800      	cmp	r0, #0
 808841a:	d1f4      	bne.n	8088406 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 808841c:	2200      	movs	r2, #0
 808841e:	2300      	movs	r3, #0
 8088420:	4650      	mov	r0, sl
 8088422:	4639      	mov	r1, r7
 8088424:	f001 ffb8 	bl	808a398 <__aeabi_dcmplt>
 8088428:	4604      	mov	r4, r0
 808842a:	b130      	cbz	r0, 808843a <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 808842c:	212d      	movs	r1, #45	; 0x2d
 808842e:	4628      	mov	r0, r5
 8088430:	f7ff ff78 	bl	8088324 <_ZN5Print5printEc>
 8088434:	4604      	mov	r4, r0
     number = -number;
 8088436:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 808843a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 808843e:	2000      	movs	r0, #0
    rounding /= 10.0;
 8088440:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 8088444:	4934      	ldr	r1, [pc, #208]	; (8088518 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 8088446:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8088520 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 808844a:	fa5f f38b 	uxtb.w	r3, fp
 808844e:	429e      	cmp	r6, r3
 8088450:	d906      	bls.n	8088460 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 8088452:	4642      	mov	r2, r8
 8088454:	464b      	mov	r3, r9
 8088456:	f001 fe57 	bl	808a108 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 808845a:	f10b 0b01 	add.w	fp, fp, #1
 808845e:	e7f4      	b.n	808844a <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 8088460:	463b      	mov	r3, r7
 8088462:	4652      	mov	r2, sl
 8088464:	f001 fb70 	bl	8089b48 <__adddf3>
 8088468:	4689      	mov	r9, r1
 808846a:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 808846c:	f001 fffa 	bl	808a464 <__aeabi_d2uiz>
 8088470:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 8088472:	f001 fca5 	bl	8089dc0 <__aeabi_ui2d>
 8088476:	4602      	mov	r2, r0
 8088478:	460b      	mov	r3, r1
 808847a:	4640      	mov	r0, r8
 808847c:	4649      	mov	r1, r9
 808847e:	f001 fb61 	bl	8089b44 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 8088482:	220a      	movs	r2, #10
 8088484:	4680      	mov	r8, r0
 8088486:	4689      	mov	r9, r1
 8088488:	4628      	mov	r0, r5
 808848a:	4639      	mov	r1, r7
 808848c:	f7ff ff6d 	bl	808836a <_ZN5Print11printNumberEmh>
  n += print(int_part);
 8088490:	4404      	add	r4, r0
  if (digits > 0) {
 8088492:	b126      	cbz	r6, 808849e <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 8088494:	4628      	mov	r0, r5
 8088496:	4921      	ldr	r1, [pc, #132]	; (808851c <_ZN5Print10printFloatEdh+0x178>)
 8088498:	f7fe f87c 	bl	8086594 <_ZN5Print5writeEPKc>
    n += print(".");
 808849c:	4404      	add	r4, r0
    remainder *= 10.0;
 808849e:	f04f 0a00 	mov.w	sl, #0
 80884a2:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8088520 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80884a6:	3e01      	subs	r6, #1
 80884a8:	b2f6      	uxtb	r6, r6
 80884aa:	2eff      	cmp	r6, #255	; 0xff
 80884ac:	d08b      	beq.n	80883c6 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80884ae:	4652      	mov	r2, sl
 80884b0:	465b      	mov	r3, fp
 80884b2:	4640      	mov	r0, r8
 80884b4:	4649      	mov	r1, r9
 80884b6:	f001 fcfd 	bl	8089eb4 <__aeabi_dmul>
 80884ba:	4680      	mov	r8, r0
 80884bc:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80884be:	f001 ffa9 	bl	808a414 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80884c2:	1e07      	subs	r7, r0, #0
 80884c4:	da19      	bge.n	80884fa <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80884c6:	212d      	movs	r1, #45	; 0x2d
 80884c8:	4628      	mov	r0, r5
 80884ca:	f7ff ff2b 	bl	8088324 <_ZN5Print5printEc>
 80884ce:	4603      	mov	r3, r0
            val = -n;
 80884d0:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80884d2:	220a      	movs	r2, #10
 80884d4:	4628      	mov	r0, r5
 80884d6:	9301      	str	r3, [sp, #4]
 80884d8:	f7ff ff47 	bl	808836a <_ZN5Print11printNumberEmh>
 80884dc:	9b01      	ldr	r3, [sp, #4]
 80884de:	4403      	add	r3, r0
    remainder -= toPrint;
 80884e0:	4638      	mov	r0, r7
    n += print(toPrint);
 80884e2:	441c      	add	r4, r3
    remainder -= toPrint;
 80884e4:	f001 fc7c 	bl	8089de0 <__aeabi_i2d>
 80884e8:	4602      	mov	r2, r0
 80884ea:	460b      	mov	r3, r1
 80884ec:	4640      	mov	r0, r8
 80884ee:	4649      	mov	r1, r9
 80884f0:	f001 fb28 	bl	8089b44 <__aeabi_dsub>
 80884f4:	4680      	mov	r8, r0
 80884f6:	4689      	mov	r9, r1
  while (digits-- > 0)
 80884f8:	e7d5      	b.n	80884a6 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80884fa:	4639      	mov	r1, r7
        size_t t = 0;
 80884fc:	2300      	movs	r3, #0
 80884fe:	e7e8      	b.n	80884d2 <_ZN5Print10printFloatEdh+0x12e>
 8088500:	0808ebe0 	.word	0x0808ebe0
 8088504:	7fefffff 	.word	0x7fefffff
 8088508:	0808ebe4 	.word	0x0808ebe4
 808850c:	41efffff 	.word	0x41efffff
 8088510:	0808ebe8 	.word	0x0808ebe8
 8088514:	c1efffff 	.word	0xc1efffff
 8088518:	3fe00000 	.word	0x3fe00000
 808851c:	0808e675 	.word	0x0808e675
 8088520:	40240000 	.word	0x40240000

08088524 <_ZN5Print7printlnEdi>:
{
 8088524:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 8088526:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 808852a:	4605      	mov	r5, r0
  return printFloat(n, digits);
 808852c:	9100      	str	r1, [sp, #0]
 808852e:	f7ff ff39 	bl	80883a4 <_ZN5Print10printFloatEdh>
 8088532:	4604      	mov	r4, r0
  n += println();
 8088534:	4628      	mov	r0, r5
 8088536:	f7ff fef8 	bl	808832a <_ZN5Print7printlnEv>
}
 808853a:	4420      	add	r0, r4
 808853c:	b003      	add	sp, #12
 808853e:	bd30      	pop	{r4, r5, pc}

08088540 <_ZN5Print7printlnEfi>:
{
 8088540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8088542:	4604      	mov	r4, r0
    return println((double)num, digits);
 8088544:	4608      	mov	r0, r1
{
 8088546:	4615      	mov	r5, r2
    return println((double)num, digits);
 8088548:	f001 fc5c 	bl	8089e04 <__aeabi_f2d>
 808854c:	9500      	str	r5, [sp, #0]
 808854e:	4602      	mov	r2, r0
 8088550:	460b      	mov	r3, r1
 8088552:	4620      	mov	r0, r4
 8088554:	f7ff ffe6 	bl	8088524 <_ZN5Print7printlnEdi>
}
 8088558:	b003      	add	sp, #12
 808855a:	bd30      	pop	{r4, r5, pc}

0808855c <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 808855c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088560:	b086      	sub	sp, #24
 8088562:	af00      	add	r7, sp, #0
 8088564:	4605      	mov	r5, r0
 8088566:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 8088568:	1d38      	adds	r0, r7, #4
 808856a:	2114      	movs	r1, #20
{
 808856c:	4614      	mov	r4, r2
    va_copy(args2, args);
 808856e:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 8088570:	f7ff f910 	bl	8087794 <vsnprintf>

    if (n<bufsize)
 8088574:	2813      	cmp	r0, #19
 8088576:	d80e      	bhi.n	8088596 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 8088578:	4628      	mov	r0, r5
 808857a:	1d39      	adds	r1, r7, #4
 808857c:	f7fe f80a 	bl	8086594 <_ZN5Print5writeEPKc>
 8088580:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 8088582:	b11e      	cbz	r6, 808858c <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 8088584:	4628      	mov	r0, r5
 8088586:	f7ff fed0 	bl	808832a <_ZN5Print7printlnEv>
 808858a:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 808858c:	4620      	mov	r0, r4
 808858e:	3718      	adds	r7, #24
 8088590:	46bd      	mov	sp, r7
 8088592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 8088596:	f100 0308 	add.w	r3, r0, #8
 808859a:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 808859e:	46e8      	mov	r8, sp
        char bigger[n+1];
 80885a0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 80885a4:	4622      	mov	r2, r4
 80885a6:	1c41      	adds	r1, r0, #1
 80885a8:	683b      	ldr	r3, [r7, #0]
 80885aa:	4668      	mov	r0, sp
 80885ac:	f7ff f8f2 	bl	8087794 <vsnprintf>
  return write(str);
 80885b0:	4669      	mov	r1, sp
 80885b2:	4628      	mov	r0, r5
 80885b4:	f7fd ffee 	bl	8086594 <_ZN5Print5writeEPKc>
 80885b8:	4604      	mov	r4, r0
 80885ba:	46c5      	mov	sp, r8
 80885bc:	e7e1      	b.n	8088582 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

080885be <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80885be:	b510      	push	{r4, lr}
 80885c0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80885c2:	f7fe fe13 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80885c6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80885c8:	6823      	ldr	r3, [r4, #0]
 80885ca:	4620      	mov	r0, r4
 80885cc:	695b      	ldr	r3, [r3, #20]
 80885ce:	4798      	blx	r3
    if (c >= 0) return c;
 80885d0:	2800      	cmp	r0, #0
 80885d2:	da08      	bge.n	80885e6 <_ZN6Stream9timedReadEv+0x28>
 80885d4:	f7fe fe0a 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 80885d8:	68e3      	ldr	r3, [r4, #12]
 80885da:	1ac0      	subs	r0, r0, r3
 80885dc:	68a3      	ldr	r3, [r4, #8]
 80885de:	4298      	cmp	r0, r3
 80885e0:	d3f2      	bcc.n	80885c8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 80885e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80885e6:	bd10      	pop	{r4, pc}

080885e8 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 80885e8:	6081      	str	r1, [r0, #8]
}
 80885ea:	4770      	bx	lr

080885ec <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 80885ec:	b538      	push	{r3, r4, r5, lr}
 80885ee:	460d      	mov	r5, r1
  String ret;
 80885f0:	4907      	ldr	r1, [pc, #28]	; (8088610 <_ZN6Stream10readStringEv+0x24>)
{
 80885f2:	4604      	mov	r4, r0
  String ret;
 80885f4:	f7ff fc30 	bl	8087e58 <_ZN6StringC1EPKc>
  int c = timedRead();
 80885f8:	4628      	mov	r0, r5
 80885fa:	f7ff ffe0 	bl	80885be <_ZN6Stream9timedReadEv>
  while (c >= 0)
 80885fe:	2800      	cmp	r0, #0
 8088600:	db04      	blt.n	808860c <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8088602:	b2c1      	uxtb	r1, r0
 8088604:	4620      	mov	r0, r4
 8088606:	f7ff fcf4 	bl	8087ff2 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 808860a:	e7f5      	b.n	80885f8 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
 808860c:	4620      	mov	r0, r4
 808860e:	bd38      	pop	{r3, r4, r5, pc}
 8088610:	0808eb69 	.word	0x0808eb69

08088614 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 8088614:	b570      	push	{r4, r5, r6, lr}
 8088616:	460d      	mov	r5, r1
  String ret;
 8088618:	4909      	ldr	r1, [pc, #36]	; (8088640 <_ZN6Stream15readStringUntilEc+0x2c>)
{
 808861a:	4604      	mov	r4, r0
 808861c:	4616      	mov	r6, r2
  String ret;
 808861e:	f7ff fc1b 	bl	8087e58 <_ZN6StringC1EPKc>
  int c = timedRead();
 8088622:	4628      	mov	r0, r5
 8088624:	f7ff ffcb 	bl	80885be <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 8088628:	2800      	cmp	r0, #0
 808862a:	db06      	blt.n	808863a <_ZN6Stream15readStringUntilEc+0x26>
 808862c:	4286      	cmp	r6, r0
 808862e:	d004      	beq.n	808863a <_ZN6Stream15readStringUntilEc+0x26>
 8088630:	b2c1      	uxtb	r1, r0
 8088632:	4620      	mov	r0, r4
 8088634:	f7ff fcdd 	bl	8087ff2 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
 8088638:	e7f3      	b.n	8088622 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
 808863a:	4620      	mov	r0, r4
 808863c:	bd70      	pop	{r4, r5, r6, pc}
 808863e:	bf00      	nop
 8088640:	0808eb69 	.word	0x0808eb69

08088644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 8088644:	680b      	ldr	r3, [r1, #0]
 8088646:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 8088648:	b113      	cbz	r3, 8088650 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 808864a:	685a      	ldr	r2, [r3, #4]
 808864c:	3201      	adds	r2, #1
 808864e:	605a      	str	r2, [r3, #4]
      }
 8088650:	4770      	bx	lr
	...

08088654 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8088654:	4b01      	ldr	r3, [pc, #4]	; (808865c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8088656:	4a02      	ldr	r2, [pc, #8]	; (8088660 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8088658:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 808865a:	4770      	bx	lr
 808865c:	20001cf0 	.word	0x20001cf0
 8088660:	0808ebec 	.word	0x0808ebec

08088664 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8088664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 8088668:	4a15      	ldr	r2, [pc, #84]	; (80886c0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808866a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80886cc <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 808866e:	e9d2 3200 	ldrd	r3, r2, [r2]
 8088672:	18c0      	adds	r0, r0, r3
 8088674:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 8088678:	4a12      	ldr	r2, [pc, #72]	; (80886c4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 808867a:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 808867c:	e9d2 3200 	ldrd	r3, r2, [r2]
 8088680:	18c6      	adds	r6, r0, r3
 8088682:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 8088686:	e9d8 2300 	ldrd	r2, r3, [r8]
 808868a:	42bb      	cmp	r3, r7
 808868c:	bf08      	it	eq
 808868e:	42b2      	cmpeq	r2, r6
 8088690:	d013      	beq.n	80886ba <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 8088692:	a903      	add	r1, sp, #12
 8088694:	4668      	mov	r0, sp
 8088696:	e9cd 6700 	strd	r6, r7, [sp]
 808869a:	f7f7 fcc9 	bl	8080030 <localtime_r>
	calendar_time.tm_year += 1900;
 808869e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80886a0:	4d09      	ldr	r5, [pc, #36]	; (80886c8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 80886a2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80886a6:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80886a8:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80886aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80886ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80886ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80886b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80886b2:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80886b6:	6823      	ldr	r3, [r4, #0]
 80886b8:	602b      	str	r3, [r5, #0]
    }
}
 80886ba:	b00c      	add	sp, #48	; 0x30
 80886bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80886c0:	20001d28 	.word	0x20001d28
 80886c4:	20001d20 	.word	0x20001d20
 80886c8:	20001cfc 	.word	0x20001cfc
 80886cc:	20001d30 	.word	0x20001d30

080886d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80886d0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80886d2:	2000      	movs	r0, #0
 80886d4:	f7ff f81e 	bl	8087714 <spark_sync_time_pending>
 80886d8:	b128      	cbz	r0, 80886e6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80886da:	f7ff f80b 	bl	80876f4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80886de:	f080 0001 	eor.w	r0, r0, #1
 80886e2:	b2c0      	uxtb	r0, r0
    }
 80886e4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80886e6:	2001      	movs	r0, #1
 80886e8:	e7fc      	b.n	80886e4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080886ec <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80886ec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80886ee:	f7ff ffb9 	bl	8088664 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80886f2:	4b02      	ldr	r3, [pc, #8]	; (80886fc <_ZN9TimeClass5monthEx+0x10>)
 80886f4:	6918      	ldr	r0, [r3, #16]
}
 80886f6:	3001      	adds	r0, #1
 80886f8:	bd08      	pop	{r3, pc}
 80886fa:	bf00      	nop
 80886fc:	20001cfc 	.word	0x20001cfc

08088700 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8088700:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8088702:	490a      	ldr	r1, [pc, #40]	; (808872c <_ZN9TimeClass4zoneEf+0x2c>)
{
 8088704:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8088706:	f002 f9c9 	bl	808aa9c <__aeabi_fcmplt>
 808870a:	b968      	cbnz	r0, 8088728 <_ZN9TimeClass4zoneEf+0x28>
 808870c:	4620      	mov	r0, r4
 808870e:	4908      	ldr	r1, [pc, #32]	; (8088730 <_ZN9TimeClass4zoneEf+0x30>)
 8088710:	f002 f9e2 	bl	808aad8 <__aeabi_fcmpgt>
 8088714:	b940      	cbnz	r0, 8088728 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8088716:	4907      	ldr	r1, [pc, #28]	; (8088734 <_ZN9TimeClass4zoneEf+0x34>)
 8088718:	4620      	mov	r0, r4
 808871a:	f002 f821 	bl	808a760 <__aeabi_fmul>
 808871e:	f002 fa73 	bl	808ac08 <__aeabi_f2lz>
 8088722:	4b05      	ldr	r3, [pc, #20]	; (8088738 <_ZN9TimeClass4zoneEf+0x38>)
 8088724:	e9c3 0100 	strd	r0, r1, [r3]
}
 8088728:	bd10      	pop	{r4, pc}
 808872a:	bf00      	nop
 808872c:	c1400000 	.word	0xc1400000
 8088730:	41600000 	.word	0x41600000
 8088734:	45610000 	.word	0x45610000
 8088738:	20001d28 	.word	0x20001d28

0808873c <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 808873c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808873e:	4602      	mov	r2, r0
 8088740:	460b      	mov	r3, r1
    struct timeval tv = {
 8088742:	2100      	movs	r1, #0
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
 8088744:	4668      	mov	r0, sp
    };
 8088746:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
 808874a:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
 808874e:	f7fe fd7d 	bl	808724c <hal_rtc_set_time>
 8088752:	4602      	mov	r2, r0
 8088754:	b910      	cbnz	r0, 808875c <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 8088756:	4601      	mov	r1, r0
 8088758:	f7fe ff40 	bl	80875dc <system_notify_time_changed>
    }
}
 808875c:	b005      	add	sp, #20
 808875e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08088764 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8088764:	b530      	push	{r4, r5, lr}
 8088766:	4604      	mov	r4, r0
    t += time_zone_cache;
 8088768:	4818      	ldr	r0, [pc, #96]	; (80887cc <_ZN9TimeClass7timeStrEx+0x68>)
{
 808876a:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 808876c:	e9d0 1000 	ldrd	r1, r0, [r0]
 8088770:	1852      	adds	r2, r2, r1
 8088772:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 8088776:	4816      	ldr	r0, [pc, #88]	; (80887d0 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 8088778:	2500      	movs	r5, #0
    t += dst_current_cache;
 808877a:	e9d0 1000 	ldrd	r1, r0, [r0]
 808877e:	1852      	adds	r2, r2, r1
 8088780:	eb40 0303 	adc.w	r3, r0, r3
 8088784:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 8088788:	2224      	movs	r2, #36	; 0x24
 808878a:	2100      	movs	r1, #0
 808878c:	eb0d 0002 	add.w	r0, sp, r2
 8088790:	f002 fb00 	bl	808ad94 <memset>
    localtime_r(&t, &calendar_time);
 8088794:	a909      	add	r1, sp, #36	; 0x24
 8088796:	4668      	mov	r0, sp
 8088798:	f7f7 fc4a 	bl	8080030 <localtime_r>
    char ascstr[26] = {};
 808879c:	2216      	movs	r2, #22
 808879e:	4629      	mov	r1, r5
 80887a0:	a803      	add	r0, sp, #12
 80887a2:	9502      	str	r5, [sp, #8]
 80887a4:	f002 faf6 	bl	808ad94 <memset>
    asctime_r(&calendar_time, ascstr);
 80887a8:	a902      	add	r1, sp, #8
 80887aa:	a809      	add	r0, sp, #36	; 0x24
 80887ac:	f002 fa80 	bl	808acb0 <asctime_r>
    int len = strlen(ascstr);
 80887b0:	a802      	add	r0, sp, #8
 80887b2:	f002 fb56 	bl	808ae62 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80887b6:	ab12      	add	r3, sp, #72	; 0x48
 80887b8:	4418      	add	r0, r3
 80887ba:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80887be:	a902      	add	r1, sp, #8
 80887c0:	4620      	mov	r0, r4
 80887c2:	f7ff fb49 	bl	8087e58 <_ZN6StringC1EPKc>
}
 80887c6:	4620      	mov	r0, r4
 80887c8:	b013      	add	sp, #76	; 0x4c
 80887ca:	bd30      	pop	{r4, r5, pc}
 80887cc:	20001d28 	.word	0x20001d28
 80887d0:	20001d20 	.word	0x20001d20

080887d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80887d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80887d8:	b0a5      	sub	sp, #148	; 0x94
 80887da:	4607      	mov	r7, r0
 80887dc:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80887de:	a814      	add	r0, sp, #80	; 0x50
{
 80887e0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80887e2:	223f      	movs	r2, #63	; 0x3f
{
 80887e4:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80887e6:	f002 fb56 	bl	808ae96 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80887ea:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80887ec:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80887ee:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80887f2:	f002 fb36 	bl	808ae62 <strlen>
 80887f6:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80887f8:	bb5d      	cbnz	r5, 8088852 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 80887fa:	492a      	ldr	r1, [pc, #168]	; (80888a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80887fc:	a803      	add	r0, sp, #12
 80887fe:	f002 fb0c 	bl	808ae1a <strcpy>
{
 8088802:	2500      	movs	r5, #0
 8088804:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8088806:	f104 3bff 	add.w	fp, r4, #4294967295
 808880a:	45ab      	cmp	fp, r5
 808880c:	d936      	bls.n	808887c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808880e:	46b1      	mov	r9, r6
 8088810:	f819 3b01 	ldrb.w	r3, [r9], #1
 8088814:	f105 0a01 	add.w	sl, r5, #1
 8088818:	2b25      	cmp	r3, #37	; 0x25
 808881a:	d117      	bne.n	808884c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 808881c:	7873      	ldrb	r3, [r6, #1]
 808881e:	2b7a      	cmp	r3, #122	; 0x7a
 8088820:	d114      	bne.n	808884c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 8088822:	a803      	add	r0, sp, #12
 8088824:	f002 fb1d 	bl	808ae62 <strlen>
 8088828:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808882a:	ab14      	add	r3, sp, #80	; 0x50
 808882c:	1828      	adds	r0, r5, r0
 808882e:	4418      	add	r0, r3
 8088830:	ebab 0205 	sub.w	r2, fp, r5
 8088834:	1cb1      	adds	r1, r6, #2
 8088836:	f002 fa85 	bl	808ad44 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808883a:	4622      	mov	r2, r4
 808883c:	a903      	add	r1, sp, #12
 808883e:	4630      	mov	r0, r6
 8088840:	f002 fa80 	bl	808ad44 <memcpy>
            len = strlen(format_str);
 8088844:	a814      	add	r0, sp, #80	; 0x50
 8088846:	f002 fb0c 	bl	808ae62 <strlen>
 808884a:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 808884c:	464e      	mov	r6, r9
 808884e:	4655      	mov	r5, sl
 8088850:	e7d9      	b.n	8088806 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8088852:	213c      	movs	r1, #60	; 0x3c
 8088854:	fb95 f3f1 	sdiv	r3, r5, r1
 8088858:	2b00      	cmp	r3, #0
 808885a:	bfb8      	it	lt
 808885c:	425b      	neglt	r3, r3
 808885e:	fbb3 f2f1 	udiv	r2, r3, r1
 8088862:	fb01 3312 	mls	r3, r1, r2, r3
 8088866:	9300      	str	r3, [sp, #0]
 8088868:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808886c:	2110      	movs	r1, #16
 808886e:	fb95 f3f3 	sdiv	r3, r5, r3
 8088872:	4a0d      	ldr	r2, [pc, #52]	; (80888a8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 8088874:	a803      	add	r0, sp, #12
 8088876:	f7fe ff85 	bl	8087784 <snprintf>
 808887a:	e7c2      	b.n	8088802 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 808887c:	2100      	movs	r1, #0
 808887e:	222e      	movs	r2, #46	; 0x2e
 8088880:	a808      	add	r0, sp, #32
 8088882:	9107      	str	r1, [sp, #28]
 8088884:	f002 fa86 	bl	808ad94 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 8088888:	4643      	mov	r3, r8
 808888a:	aa14      	add	r2, sp, #80	; 0x50
 808888c:	2132      	movs	r1, #50	; 0x32
 808888e:	a807      	add	r0, sp, #28
 8088890:	f7f7 fbd6 	bl	8080040 <strftime>
    return String(buf);
 8088894:	4638      	mov	r0, r7
 8088896:	a907      	add	r1, sp, #28
 8088898:	f7ff fade 	bl	8087e58 <_ZN6StringC1EPKc>
}
 808889c:	4638      	mov	r0, r7
 808889e:	b025      	add	sp, #148	; 0x94
 80888a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80888a4:	0808ebf0 	.word	0x0808ebf0
 80888a8:	0808ebf2 	.word	0x0808ebf2

080888ac <_ZN9TimeClass6formatExPKc>:
{
 80888ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80888ae:	b08d      	sub	sp, #52	; 0x34
 80888b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80888b2:	4604      	mov	r4, r0
 80888b4:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 80888b8:	b915      	cbnz	r5, 80888c0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 80888ba:	4b19      	ldr	r3, [pc, #100]	; (8088920 <_ZN9TimeClass6formatExPKc+0x74>)
 80888bc:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 80888be:	b12d      	cbz	r5, 80888cc <_ZN9TimeClass6formatExPKc+0x20>
 80888c0:	4b18      	ldr	r3, [pc, #96]	; (8088924 <_ZN9TimeClass6formatExPKc+0x78>)
 80888c2:	4628      	mov	r0, r5
 80888c4:	6819      	ldr	r1, [r3, #0]
 80888c6:	f002 fa9e 	bl	808ae06 <strcmp>
 80888ca:	b938      	cbnz	r0, 80888dc <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 80888cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80888d0:	4620      	mov	r0, r4
 80888d2:	f7ff ff47 	bl	8088764 <_ZN9TimeClass7timeStrEx>
}
 80888d6:	4620      	mov	r0, r4
 80888d8:	b00d      	add	sp, #52	; 0x34
 80888da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 80888dc:	9900      	ldr	r1, [sp, #0]
 80888de:	4e12      	ldr	r6, [pc, #72]	; (8088928 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 80888e0:	4f12      	ldr	r7, [pc, #72]	; (808892c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 80888e2:	e9d6 3200 	ldrd	r3, r2, [r6]
 80888e6:	185b      	adds	r3, r3, r1
 80888e8:	9901      	ldr	r1, [sp, #4]
 80888ea:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 80888ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80888f2:	181b      	adds	r3, r3, r0
 80888f4:	eb41 0202 	adc.w	r2, r1, r2
 80888f8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80888fc:	2100      	movs	r1, #0
 80888fe:	2224      	movs	r2, #36	; 0x24
 8088900:	a803      	add	r0, sp, #12
 8088902:	f002 fa47 	bl	808ad94 <memset>
    localtime_r(&t, &calendar_time);
 8088906:	a903      	add	r1, sp, #12
 8088908:	4668      	mov	r0, sp
 808890a:	f7f7 fb91 	bl	8080030 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808890e:	6832      	ldr	r2, [r6, #0]
 8088910:	683b      	ldr	r3, [r7, #0]
 8088912:	4620      	mov	r0, r4
 8088914:	4413      	add	r3, r2
 8088916:	a903      	add	r1, sp, #12
 8088918:	462a      	mov	r2, r5
 808891a:	f7ff ff5b 	bl	80887d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 808891e:	e7da      	b.n	80888d6 <_ZN9TimeClass6formatExPKc+0x2a>
 8088920:	20001cf8 	.word	0x20001cf8
 8088924:	200000d0 	.word	0x200000d0
 8088928:	20001d28 	.word	0x20001d28
 808892c:	20001d20 	.word	0x20001d20

08088930 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 8088930:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 8088932:	2000      	movs	r0, #0
 8088934:	f7fe fc7a 	bl	808722c <hal_rtc_time_is_valid>
    if (rtcstate)
 8088938:	4604      	mov	r4, r0
 808893a:	b9a0      	cbnz	r0, 8088966 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 808893c:	f7fe fe0e 	bl	808755c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8088940:	2801      	cmp	r0, #1
 8088942:	d110      	bne.n	8088966 <_ZN9TimeClass7isValidEv+0x36>
 8088944:	4620      	mov	r0, r4
 8088946:	f7fe fe41 	bl	80875cc <system_thread_get_state>
 808894a:	b960      	cbnz	r0, 8088966 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 808894c:	f7ff fec0 	bl	80886d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8088950:	b910      	cbnz	r0, 8088958 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 8088952:	f7fe febf 	bl	80876d4 <spark_process>
        while (_while() && !_condition()) {
 8088956:	e7f9      	b.n	808894c <_ZN9TimeClass7isValidEv+0x1c>
 8088958:	f7ff feba 	bl	80886d0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 808895c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 8088960:	2000      	movs	r0, #0
 8088962:	f7fe bc63 	b.w	808722c <hal_rtc_time_is_valid>
}
 8088966:	4620      	mov	r0, r4
 8088968:	bd10      	pop	{r4, pc}

0808896a <_ZN9TimeClass3nowEv>:
{
 808896a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 808896c:	f7ff ffe0 	bl	8088930 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 8088970:	2210      	movs	r2, #16
 8088972:	2100      	movs	r1, #0
 8088974:	4668      	mov	r0, sp
 8088976:	f002 fa0d 	bl	808ad94 <memset>
    hal_rtc_get_time(&tv, nullptr);
 808897a:	2100      	movs	r1, #0
 808897c:	4668      	mov	r0, sp
 808897e:	f7fe fc5d 	bl	808723c <hal_rtc_get_time>
}
 8088982:	9800      	ldr	r0, [sp, #0]
 8088984:	b005      	add	sp, #20
 8088986:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808898c <_ZN9TimeClass4hourEv>:
{
 808898c:	b508      	push	{r3, lr}
	return hour(now());
 808898e:	f7ff ffec 	bl	808896a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8088992:	17c1      	asrs	r1, r0, #31
 8088994:	f7ff fe66 	bl	8088664 <_ZL22Refresh_UnixTime_Cachex>
}
 8088998:	4b01      	ldr	r3, [pc, #4]	; (80889a0 <_ZN9TimeClass4hourEv+0x14>)
 808899a:	6898      	ldr	r0, [r3, #8]
 808899c:	bd08      	pop	{r3, pc}
 808899e:	bf00      	nop
 80889a0:	20001cfc 	.word	0x20001cfc

080889a4 <_ZN9TimeClass6minuteEv>:
{
 80889a4:	b508      	push	{r3, lr}
	return minute(now());
 80889a6:	f7ff ffe0 	bl	808896a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80889aa:	17c1      	asrs	r1, r0, #31
 80889ac:	f7ff fe5a 	bl	8088664 <_ZL22Refresh_UnixTime_Cachex>
}
 80889b0:	4b01      	ldr	r3, [pc, #4]	; (80889b8 <_ZN9TimeClass6minuteEv+0x14>)
 80889b2:	6858      	ldr	r0, [r3, #4]
 80889b4:	bd08      	pop	{r3, pc}
 80889b6:	bf00      	nop
 80889b8:	20001cfc 	.word	0x20001cfc

080889bc <_ZN9TimeClass6secondEv>:
{
 80889bc:	b508      	push	{r3, lr}
	return second(now());
 80889be:	f7ff ffd4 	bl	808896a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80889c2:	17c1      	asrs	r1, r0, #31
 80889c4:	f7ff fe4e 	bl	8088664 <_ZL22Refresh_UnixTime_Cachex>
}
 80889c8:	4b01      	ldr	r3, [pc, #4]	; (80889d0 <_ZN9TimeClass6secondEv+0x14>)
 80889ca:	6818      	ldr	r0, [r3, #0]
 80889cc:	bd08      	pop	{r3, pc}
 80889ce:	bf00      	nop
 80889d0:	20001cfc 	.word	0x20001cfc

080889d4 <_ZN9TimeClass3dayEv>:
{
 80889d4:	b508      	push	{r3, lr}
	return day(now());
 80889d6:	f7ff ffc8 	bl	808896a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80889da:	17c1      	asrs	r1, r0, #31
 80889dc:	f7ff fe42 	bl	8088664 <_ZL22Refresh_UnixTime_Cachex>
}
 80889e0:	4b01      	ldr	r3, [pc, #4]	; (80889e8 <_ZN9TimeClass3dayEv+0x14>)
 80889e2:	68d8      	ldr	r0, [r3, #12]
 80889e4:	bd08      	pop	{r3, pc}
 80889e6:	bf00      	nop
 80889e8:	20001cfc 	.word	0x20001cfc

080889ec <_ZN9TimeClass5monthEv>:
{
 80889ec:	b508      	push	{r3, lr}
	return month(now());
 80889ee:	f7ff ffbc 	bl	808896a <_ZN9TimeClass3nowEv>
}
 80889f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80889f6:	17c1      	asrs	r1, r0, #31
 80889f8:	f7ff be78 	b.w	80886ec <_ZN9TimeClass5monthEx>

080889fc <_ZN9TimeClass4yearEv>:
{
 80889fc:	b508      	push	{r3, lr}
	return year(now());
 80889fe:	f7ff ffb4 	bl	808896a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 8088a02:	17c1      	asrs	r1, r0, #31
 8088a04:	f7ff fe2e 	bl	8088664 <_ZL22Refresh_UnixTime_Cachex>
}
 8088a08:	4b01      	ldr	r3, [pc, #4]	; (8088a10 <_ZN9TimeClass4yearEv+0x14>)
 8088a0a:	6958      	ldr	r0, [r3, #20]
 8088a0c:	bd08      	pop	{r3, pc}
 8088a0e:	bf00      	nop
 8088a10:	20001cfc 	.word	0x20001cfc

08088a14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8088a14:	4b02      	ldr	r3, [pc, #8]	; (8088a20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8088a16:	681a      	ldr	r2, [r3, #0]
 8088a18:	4b02      	ldr	r3, [pc, #8]	; (8088a24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8088a1a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 8088a1c:	4770      	bx	lr
 8088a1e:	bf00      	nop
 8088a20:	200000d0 	.word	0x200000d0
 8088a24:	20001cf8 	.word	0x20001cf8

08088a28 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    hal_adc_set_sample_time(ADC_SampleTime);
 8088a28:	f7fe bbc0 	b.w	80871ac <hal_adc_set_sample_time>

08088a2c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8088a2c:	2100      	movs	r1, #0
 8088a2e:	f7fe bda5 	b.w	808757c <system_delay_ms>

08088a32 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8088a32:	b510      	push	{r4, lr}
 8088a34:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088a36:	f7fe f8dd 	bl	8086bf4 <_ZNSt14_Function_baseD1Ev>
 8088a3a:	4620      	mov	r0, r4
 8088a3c:	bd10      	pop	{r4, pc}

08088a3e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8088a3e:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088a40:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8088a42:	460b      	mov	r3, r1
 8088a44:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088a46:	c803      	ldmia	r0, {r0, r1}
 8088a48:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8088a4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8088a50:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8088a54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8088a58:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8088a5c:	b002      	add	sp, #8
 8088a5e:	bd10      	pop	{r4, pc}

08088a60 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 8088a60:	2300      	movs	r3, #0
 8088a62:	4803      	ldr	r0, [pc, #12]	; (8088a70 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8088a64:	4a03      	ldr	r2, [pc, #12]	; (8088a74 <_GLOBAL__sub_I_RGB+0x14>)
 8088a66:	4904      	ldr	r1, [pc, #16]	; (8088a78 <_GLOBAL__sub_I_RGB+0x18>)
 8088a68:	6083      	str	r3, [r0, #8]
 8088a6a:	f001 b855 	b.w	8089b18 <__aeabi_atexit>
 8088a6e:	bf00      	nop
 8088a70:	20001d38 	.word	0x20001d38
 8088a74:	200002b0 	.word	0x200002b0
 8088a78:	08088a33 	.word	0x08088a33

08088a7c <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8088a7c:	6800      	ldr	r0, [r0, #0]
 8088a7e:	f000 bead 	b.w	80897dc <_ZN7TwoWire4lockEv>

08088a82 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8088a82:	b510      	push	{r4, lr}
 8088a84:	4604      	mov	r4, r0
      lock_(_lock) {
 8088a86:	6001      	str	r1, [r0, #0]
 8088a88:	7102      	strb	r2, [r0, #4]
    if (lock_) {
 8088a8a:	b10a      	cbz	r2, 8088a90 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8088a8c:	f7ff fff6 	bl	8088a7c <_ZN9FuelGauge4lockEv>
}
 8088a90:	4620      	mov	r0, r4
 8088a92:	bd10      	pop	{r4, pc}

08088a94 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
 8088a94:	b538      	push	{r3, r4, r5, lr}
 8088a96:	4604      	mov	r4, r0
 8088a98:	460d      	mov	r5, r1
            return &Wire3;
 8088a9a:	f001 f815 	bl	8089ac8 <_Z20__fetch_global_Wire3v>
        : FuelGauge(*fuelWireInstance(), _lock)
 8088a9e:	462a      	mov	r2, r5
            return &Wire3;
 8088aa0:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
 8088aa2:	4620      	mov	r0, r4
 8088aa4:	f7ff ffed 	bl	8088a82 <_ZN9FuelGaugeC1ER7TwoWireb>
}
 8088aa8:	4620      	mov	r0, r4
 8088aaa:	bd38      	pop	{r3, r4, r5, pc}

08088aac <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
 8088aac:	6800      	ldr	r0, [r0, #0]
 8088aae:	f000 be9e 	b.w	80897ee <_ZN7TwoWire6unlockEv>

08088ab2 <_ZN9FuelGaugeD1Ev>:
FuelGauge::~FuelGauge()
 8088ab2:	b510      	push	{r4, lr}
    if (lock_) {
 8088ab4:	7903      	ldrb	r3, [r0, #4]
FuelGauge::~FuelGauge()
 8088ab6:	4604      	mov	r4, r0
    if (lock_) {
 8088ab8:	b10b      	cbz	r3, 8088abe <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8088aba:	f7ff fff7 	bl	8088aac <_ZN9FuelGauge6unlockEv>
}
 8088abe:	4620      	mov	r0, r4
 8088ac0:	bd10      	pop	{r4, pc}

08088ac2 <_ZN9FuelGauge12readRegisterEhRhS0_>:
int FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8088ac2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8088ac6:	4604      	mov	r4, r0
 8088ac8:	460d      	mov	r5, r1
 8088aca:	4617      	mov	r7, r2
 8088acc:	461e      	mov	r6, r3
 8088ace:	f7ff ffd5 	bl	8088a7c <_ZN9FuelGauge4lockEv>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088ad2:	2336      	movs	r3, #54	; 0x36
 8088ad4:	f88d 3000 	strb.w	r3, [sp]
 8088ad8:	2300      	movs	r3, #0
 8088ada:	f04f 0801 	mov.w	r8, #1
 8088ade:	9301      	str	r3, [sp, #4]
    timeout_ = ms;
 8088ae0:	230a      	movs	r3, #10
    i2c_.beginTransmission(config);
 8088ae2:	4669      	mov	r1, sp
 8088ae4:	6820      	ldr	r0, [r4, #0]
 8088ae6:	9303      	str	r3, [sp, #12]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8088ae8:	f88d 8008 	strb.w	r8, [sp, #8]
 8088aec:	f000 fe53 	bl	8089796 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(startAddress);
 8088af0:	6820      	ldr	r0, [r4, #0]
 8088af2:	4629      	mov	r1, r5
 8088af4:	6803      	ldr	r3, [r0, #0]
 8088af6:	689b      	ldr	r3, [r3, #8]
 8088af8:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
 8088afa:	4641      	mov	r1, r8
 8088afc:	6820      	ldr	r0, [r4, #0]
 8088afe:	f000 fe62 	bl	80897c6 <_ZN7TwoWire15endTransmissionEh>
 8088b02:	4605      	mov	r5, r0
 8088b04:	b140      	cbz	r0, 8088b18 <_ZN9FuelGauge12readRegisterEhRhS0_+0x56>
 8088b06:	f06f 059f 	mvn.w	r5, #159	; 0x9f
      { _M_device.unlock(); }
 8088b0a:	4620      	mov	r0, r4
 8088b0c:	f7ff ffce 	bl	8088aac <_ZN9FuelGauge6unlockEv>
}
 8088b10:	4628      	mov	r0, r5
 8088b12:	b004      	add	sp, #16
 8088b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_ = size;
 8088b18:	2302      	movs	r3, #2
    CHECK_TRUE(i2c_.requestFrom(config) == 2, SYSTEM_ERROR_TIMEOUT);
 8088b1a:	4669      	mov	r1, sp
 8088b1c:	6820      	ldr	r0, [r4, #0]
 8088b1e:	9301      	str	r3, [sp, #4]
 8088b20:	f000 fe06 	bl	8089730 <_ZN7TwoWire11requestFromERK16WireTransmission>
 8088b24:	2802      	cmp	r0, #2
 8088b26:	d1ee      	bne.n	8088b06 <_ZN9FuelGauge12readRegisterEhRhS0_+0x44>
    MSB = i2c_.read();
 8088b28:	6820      	ldr	r0, [r4, #0]
 8088b2a:	6803      	ldr	r3, [r0, #0]
 8088b2c:	695b      	ldr	r3, [r3, #20]
 8088b2e:	4798      	blx	r3
 8088b30:	7038      	strb	r0, [r7, #0]
    LSB = i2c_.read();
 8088b32:	6820      	ldr	r0, [r4, #0]
 8088b34:	6803      	ldr	r3, [r0, #0]
 8088b36:	695b      	ldr	r3, [r3, #20]
 8088b38:	4798      	blx	r3
 8088b3a:	7030      	strb	r0, [r6, #0]
    return SYSTEM_ERROR_NONE;
 8088b3c:	e7e5      	b.n	8088b0a <_ZN9FuelGauge12readRegisterEhRhS0_+0x48>
	...

08088b40 <_ZN9FuelGauge6getSoCEv>:
    byte MSB = 0;
 8088b40:	2300      	movs	r3, #0
float FuelGauge::getSoC() {
 8088b42:	b513      	push	{r0, r1, r4, lr}
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8088b44:	2104      	movs	r1, #4
    byte MSB = 0;
 8088b46:	f88d 3006 	strb.w	r3, [sp, #6]
    byte LSB = 0;
 8088b4a:	f88d 3007 	strb.w	r3, [sp, #7]
    if(readRegister(SOC_REGISTER, MSB, LSB) != SYSTEM_ERROR_NONE) {
 8088b4e:	f10d 0206 	add.w	r2, sp, #6
 8088b52:	f10d 0307 	add.w	r3, sp, #7
 8088b56:	f7ff ffb4 	bl	8088ac2 <_ZN9FuelGauge12readRegisterEhRhS0_>
 8088b5a:	b9a0      	cbnz	r0, 8088b86 <_ZN9FuelGauge6getSoCEv+0x46>
        float decimal = LSB / 256.0;
 8088b5c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8088b60:	f001 f93e 	bl	8089de0 <__aeabi_i2d>
 8088b64:	2200      	movs	r2, #0
 8088b66:	4b09      	ldr	r3, [pc, #36]	; (8088b8c <_ZN9FuelGauge6getSoCEv+0x4c>)
 8088b68:	f001 f9a4 	bl	8089eb4 <__aeabi_dmul>
 8088b6c:	f001 fc9a 	bl	808a4a4 <__aeabi_d2f>
 8088b70:	4604      	mov	r4, r0
        return MSB + decimal;
 8088b72:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8088b76:	f001 fd9f 	bl	808a6b8 <__aeabi_i2f>
 8088b7a:	4601      	mov	r1, r0
 8088b7c:	4620      	mov	r0, r4
 8088b7e:	f001 fce7 	bl	808a550 <__addsf3>
}
 8088b82:	b002      	add	sp, #8
 8088b84:	bd10      	pop	{r4, pc}
        return -1.0f;
 8088b86:	4802      	ldr	r0, [pc, #8]	; (8088b90 <_ZN9FuelGauge6getSoCEv+0x50>)
 8088b88:	e7fb      	b.n	8088b82 <_ZN9FuelGauge6getSoCEv+0x42>
 8088b8a:	bf00      	nop
 8088b8c:	3f700000 	.word	0x3f700000
 8088b90:	bf800000 	.word	0xbf800000

08088b94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 8088b94:	4b01      	ldr	r3, [pc, #4]	; (8088b9c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 8088b96:	6018      	str	r0, [r3, #0]
    }, nullptr);
 8088b98:	4770      	bx	lr
 8088b9a:	bf00      	nop
 8088b9c:	200000d8 	.word	0x200000d8

08088ba0 <serialEventRun>:
{
 8088ba0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8088ba2:	4b17      	ldr	r3, [pc, #92]	; (8088c00 <serialEventRun+0x60>)
 8088ba4:	b143      	cbz	r3, 8088bb8 <serialEventRun+0x18>
 8088ba6:	f000 fc25 	bl	80893f4 <_Z16_fetch_usbserialv>
 8088baa:	6803      	ldr	r3, [r0, #0]
 8088bac:	691b      	ldr	r3, [r3, #16]
 8088bae:	4798      	blx	r3
 8088bb0:	2800      	cmp	r0, #0
 8088bb2:	dd01      	ble.n	8088bb8 <serialEventRun+0x18>
        serialEvent();
 8088bb4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 8088bb8:	4b12      	ldr	r3, [pc, #72]	; (8088c04 <serialEventRun+0x64>)
 8088bba:	b143      	cbz	r3, 8088bce <serialEventRun+0x2e>
 8088bbc:	f000 fd38 	bl	8089630 <_Z22__fetch_global_Serial1v>
 8088bc0:	6803      	ldr	r3, [r0, #0]
 8088bc2:	691b      	ldr	r3, [r3, #16]
 8088bc4:	4798      	blx	r3
 8088bc6:	2800      	cmp	r0, #0
 8088bc8:	dd01      	ble.n	8088bce <serialEventRun+0x2e>
        serialEvent1();
 8088bca:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 8088bce:	4b0e      	ldr	r3, [pc, #56]	; (8088c08 <serialEventRun+0x68>)
 8088bd0:	b10b      	cbz	r3, 8088bd6 <serialEventRun+0x36>
 8088bd2:	f3af 8000 	nop.w
    if (serialEventRun4) serialEventRun4();
 8088bd6:	4b0d      	ldr	r3, [pc, #52]	; (8088c0c <serialEventRun+0x6c>)
 8088bd8:	b10b      	cbz	r3, 8088bde <serialEventRun+0x3e>
 8088bda:	f7f7 ffb1 	bl	8080b40 <_Z15serialEventRun4v>
    if (serialEventRun5) serialEventRun5();
 8088bde:	4b0c      	ldr	r3, [pc, #48]	; (8088c10 <serialEventRun+0x70>)
 8088be0:	b10b      	cbz	r3, 8088be6 <serialEventRun+0x46>
 8088be2:	f7f7 ffe9 	bl	8080bb8 <_Z15serialEventRun5v>
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8088be6:	4b0b      	ldr	r3, [pc, #44]	; (8088c14 <serialEventRun+0x74>)
 8088be8:	b143      	cbz	r3, 8088bfc <serialEventRun+0x5c>
 8088bea:	f000 fc41 	bl	8089470 <_Z17_fetch_usbserial1v>
 8088bee:	6803      	ldr	r3, [r0, #0]
 8088bf0:	691b      	ldr	r3, [r3, #16]
 8088bf2:	4798      	blx	r3
 8088bf4:	2800      	cmp	r0, #0
 8088bf6:	dd01      	ble.n	8088bfc <serialEventRun+0x5c>
        usbSerialEvent1();
 8088bf8:	f3af 8000 	nop.w
}
 8088bfc:	bd08      	pop	{r3, pc}
 8088bfe:	bf00      	nop
	...
 8088c0c:	08080b41 	.word	0x08080b41
 8088c10:	08080bb9 	.word	0x08080bb9
 8088c14:	00000000 	.word	0x00000000

08088c18 <_post_loop>:
{
 8088c18:	b508      	push	{r3, lr}
	serialEventRun();
 8088c1a:	f7ff ffc1 	bl	8088ba0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8088c1e:	f7fe fae5 	bl	80871ec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8088c22:	4b01      	ldr	r3, [pc, #4]	; (8088c28 <_post_loop+0x10>)
 8088c24:	6018      	str	r0, [r3, #0]
}
 8088c26:	bd08      	pop	{r3, pc}
 8088c28:	200021dc 	.word	0x200021dc

08088c2c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8088c2c:	4802      	ldr	r0, [pc, #8]	; (8088c38 <_Z33system_initialize_user_backup_ramv+0xc>)
 8088c2e:	4a03      	ldr	r2, [pc, #12]	; (8088c3c <_Z33system_initialize_user_backup_ramv+0x10>)
 8088c30:	4903      	ldr	r1, [pc, #12]	; (8088c40 <_Z33system_initialize_user_backup_ramv+0x14>)
 8088c32:	1a12      	subs	r2, r2, r0
 8088c34:	f002 b886 	b.w	808ad44 <memcpy>
 8088c38:	40024000 	.word	0x40024000
 8088c3c:	40024004 	.word	0x40024004
 8088c40:	0808f030 	.word	0x0808f030

08088c44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088c44:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8088c46:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088c48:	461a      	mov	r2, r3
 8088c4a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8088c4e:	9300      	str	r3, [sp, #0]
 8088c50:	f7fe fcd6 	bl	8087600 <system_ctrl_set_result>
}
 8088c54:	b003      	add	sp, #12
 8088c56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08088c5c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 8088c5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8088c5e:	8843      	ldrh	r3, [r0, #2]
 8088c60:	2b0a      	cmp	r3, #10
 8088c62:	d008      	beq.n	8088c76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8088c64:	2b50      	cmp	r3, #80	; 0x50
 8088c66:	d10b      	bne.n	8088c80 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 8088c68:	4b09      	ldr	r3, [pc, #36]	; (8088c90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8088c6a:	681b      	ldr	r3, [r3, #0]
 8088c6c:	b14b      	cbz	r3, 8088c82 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 8088c6e:	b003      	add	sp, #12
 8088c70:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 8088c74:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 8088c76:	f7ff ffe5 	bl	8088c44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 8088c7a:	b003      	add	sp, #12
 8088c7c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088c80:	2300      	movs	r3, #0
 8088c82:	461a      	mov	r2, r3
 8088c84:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8088c88:	9300      	str	r3, [sp, #0]
 8088c8a:	f7fe fcb9 	bl	8087600 <system_ctrl_set_result>
}
 8088c8e:	e7f4      	b.n	8088c7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 8088c90:	20001d4c 	.word	0x20001d4c

08088c94 <module_user_init_hook>:
{
 8088c94:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8088c96:	4c12      	ldr	r4, [pc, #72]	; (8088ce0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 8088c98:	2100      	movs	r1, #0
 8088c9a:	4812      	ldr	r0, [pc, #72]	; (8088ce4 <module_user_init_hook+0x50>)
 8088c9c:	f7fe fd92 	bl	80877c4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8088ca0:	4d11      	ldr	r5, [pc, #68]	; (8088ce8 <module_user_init_hook+0x54>)
 8088ca2:	6823      	ldr	r3, [r4, #0]
 8088ca4:	42ab      	cmp	r3, r5
 8088ca6:	bf0c      	ite	eq
 8088ca8:	2201      	moveq	r2, #1
 8088caa:	2200      	movne	r2, #0
 8088cac:	4b0f      	ldr	r3, [pc, #60]	; (8088cec <module_user_init_hook+0x58>)
 8088cae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8088cb0:	d002      	beq.n	8088cb8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 8088cb2:	f7ff ffbb 	bl	8088c2c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8088cb6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8088cb8:	f7fe fa88 	bl	80871cc <HAL_RNG_GetRandomNumber>
 8088cbc:	4604      	mov	r4, r0
    srand(seed);
 8088cbe:	f002 f871 	bl	808ada4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8088cc2:	4b0b      	ldr	r3, [pc, #44]	; (8088cf0 <module_user_init_hook+0x5c>)
 8088cc4:	b113      	cbz	r3, 8088ccc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 8088cc6:	4620      	mov	r0, r4
 8088cc8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8088ccc:	2100      	movs	r1, #0
 8088cce:	4808      	ldr	r0, [pc, #32]	; (8088cf0 <module_user_init_hook+0x5c>)
 8088cd0:	f7fe fd28 	bl	8087724 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8088cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8088cd8:	2100      	movs	r1, #0
 8088cda:	4806      	ldr	r0, [pc, #24]	; (8088cf4 <module_user_init_hook+0x60>)
 8088cdc:	f7fe bc86 	b.w	80875ec <system_ctrl_set_app_request_handler>
 8088ce0:	40024000 	.word	0x40024000
 8088ce4:	08088b95 	.word	0x08088b95
 8088ce8:	9a271c1e 	.word	0x9a271c1e
 8088cec:	20001d48 	.word	0x20001d48
 8088cf0:	00000000 	.word	0x00000000
 8088cf4:	08088c5d 	.word	0x08088c5d

08088cf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8088cf8:	4770      	bx	lr

08088cfa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 8088cfa:	2000      	movs	r0, #0
 8088cfc:	4770      	bx	lr

08088cfe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8088cfe:	b510      	push	{r4, lr}
 8088d00:	4604      	mov	r4, r0
 8088d02:	2110      	movs	r1, #16
 8088d04:	f000 ff0d 	bl	8089b22 <_ZdlPvj>
 8088d08:	4620      	mov	r0, r4
 8088d0a:	bd10      	pop	{r4, pc}

08088d0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8088d0c:	b508      	push	{r3, lr}
      { delete this; }
 8088d0e:	f7ff fff6 	bl	8088cfe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8088d12:	bd08      	pop	{r3, pc}

08088d14 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8088d14:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8088d16:	b530      	push	{r4, r5, lr}
        type_(type) {
 8088d18:	f64f 749c 	movw	r4, #65436	; 0xff9c
 8088d1c:	6002      	str	r2, [r0, #0]
 8088d1e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 8088d20:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8088d22:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 8088d24:	680c      	ldr	r4, [r1, #0]
 8088d26:	8085      	strh	r5, [r0, #4]
 8088d28:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8088d2a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8088d2c:	bd30      	pop	{r4, r5, pc}

08088d2e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8088d2e:	b510      	push	{r4, lr}
 8088d30:	4604      	mov	r4, r0
    free((void*)msg_);
 8088d32:	6800      	ldr	r0, [r0, #0]
 8088d34:	f7fe fd06 	bl	8087744 <free>
}
 8088d38:	4620      	mov	r0, r4
 8088d3a:	bd10      	pop	{r4, pc}

08088d3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8088d3c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8088d3e:	68c4      	ldr	r4, [r0, #12]
 8088d40:	b1f4      	cbz	r4, 8088d80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 8088d42:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8088d44:	2b02      	cmp	r3, #2
 8088d46:	d103      	bne.n	8088d50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8088d48:	f104 000c 	add.w	r0, r4, #12
 8088d4c:	f7ff ffef 	bl	8088d2e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 8088d50:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 8088d52:	b135      	cbz	r5, 8088d62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 8088d54:	4628      	mov	r0, r5
 8088d56:	f7fd ff4d 	bl	8086bf4 <_ZNSt14_Function_baseD1Ev>
 8088d5a:	2110      	movs	r1, #16
 8088d5c:	4628      	mov	r0, r5
 8088d5e:	f000 fee0 	bl	8089b22 <_ZdlPvj>
 8088d62:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8088d64:	b135      	cbz	r5, 8088d74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8088d66:	4628      	mov	r0, r5
 8088d68:	f7fd ff44 	bl	8086bf4 <_ZNSt14_Function_baseD1Ev>
 8088d6c:	2110      	movs	r1, #16
 8088d6e:	4628      	mov	r0, r5
 8088d70:	f000 fed7 	bl	8089b22 <_ZdlPvj>
 8088d74:	4620      	mov	r0, r4
 8088d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8088d7a:	2114      	movs	r1, #20
 8088d7c:	f000 bed1 	b.w	8089b22 <_ZdlPvj>
 8088d80:	bd38      	pop	{r3, r4, r5, pc}

08088d82 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8088d82:	b510      	push	{r4, lr}
 8088d84:	b088      	sub	sp, #32
 8088d86:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8088d88:	4668      	mov	r0, sp
 8088d8a:	f7ff f865 	bl	8087e58 <_ZN6StringC1EPKc>
    return (*fn)(p);
 8088d8e:	4669      	mov	r1, sp
 8088d90:	a804      	add	r0, sp, #16
 8088d92:	f7ff f8a0 	bl	8087ed6 <_ZN6StringC1ERKS_>
 8088d96:	a804      	add	r0, sp, #16
 8088d98:	47a0      	blx	r4
 8088d9a:	4604      	mov	r4, r0
 8088d9c:	a804      	add	r0, sp, #16
 8088d9e:	f7ff f811 	bl	8087dc4 <_ZN6StringD1Ev>
    String p(param);
 8088da2:	4668      	mov	r0, sp
 8088da4:	f7ff f80e 	bl	8087dc4 <_ZN6StringD1Ev>
}
 8088da8:	4620      	mov	r0, r4
 8088daa:	b008      	add	sp, #32
 8088dac:	bd10      	pop	{r4, pc}

08088dae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8088dae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8088db0:	2300      	movs	r3, #0
         size = sizeof(*this);
 8088db2:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 8088db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 8088db8:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8088dba:	4669      	mov	r1, sp
 8088dbc:	461a      	mov	r2, r3
 8088dbe:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 8088dc0:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 8088dc4:	f8ad 4000 	strh.w	r4, [sp]
 8088dc8:	f7fe fc7c 	bl	80876c4 <spark_function>
}
 8088dcc:	b004      	add	sp, #16
 8088dce:	bd10      	pop	{r4, pc}

08088dd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8088dd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8088dd2:	460e      	mov	r6, r1
 8088dd4:	4604      	mov	r4, r0
 8088dd6:	f856 3b04 	ldr.w	r3, [r6], #4
 8088dda:	460d      	mov	r5, r1
 8088ddc:	a801      	add	r0, sp, #4
 8088dde:	4631      	mov	r1, r6
 8088de0:	9300      	str	r3, [sp, #0]
 8088de2:	f7ff fc2f 	bl	8088644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8088de6:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8088de8:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8088dea:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 8088dec:	2300      	movs	r3, #0
	_M_pi = __tmp;
 8088dee:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 8088df0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 8088df2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8088df4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 8088df6:	f7fa f9b5 	bl	8083164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8088dfa:	4630      	mov	r0, r6
 8088dfc:	f7fa f9b2 	bl	8083164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 8088e00:	4628      	mov	r0, r5
 8088e02:	2108      	movs	r1, #8
 8088e04:	f000 fe8d 	bl	8089b22 <_ZdlPvj>
        return p;
    }
 8088e08:	4620      	mov	r0, r4
 8088e0a:	b002      	add	sp, #8
 8088e0c:	bd70      	pop	{r4, r5, r6, pc}

08088e0e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8088e0e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8088e10:	b510      	push	{r4, lr}
      if (_M_empty())
 8088e12:	b90a      	cbnz	r2, 8088e18 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8088e14:	f000 fe89 	bl	8089b2a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088e18:	68c3      	ldr	r3, [r0, #12]
    }
 8088e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088e1e:	4718      	bx	r3

08088e20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8088e20:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8088e22:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8088e24:	f100 0110 	add.w	r1, r0, #16
 8088e28:	f7ff fff1 	bl	8088e0e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 8088e2c:	bd08      	pop	{r3, pc}

08088e2e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 8088e2e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 8088e30:	b510      	push	{r4, lr}
      if (_M_empty())
 8088e32:	b90a      	cbnz	r2, 8088e38 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8088e34:	f000 fe79 	bl	8089b2a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088e38:	68c3      	ldr	r3, [r0, #12]
    }
 8088e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088e3e:	4718      	bx	r3

08088e40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8088e40:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 8088e42:	6800      	ldr	r0, [r0, #0]
 8088e44:	f100 0110 	add.w	r1, r0, #16
 8088e48:	f7ff fff1 	bl	8088e2e <_ZNKSt8functionIFvRKbEEclES1_>
      }
 8088e4c:	bd08      	pop	{r3, pc}
	...

08088e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 8088e50:	b538      	push	{r3, r4, r5, lr}
 8088e52:	2300      	movs	r3, #0
 8088e54:	4604      	mov	r4, r0
 8088e56:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8088e58:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 8088e5a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8088e5c:	f7f7 f935 	bl	80800ca <_Znwj>
 8088e60:	b128      	cbz	r0, 8088e6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 8088e62:	2301      	movs	r3, #1
 8088e64:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 8088e68:	4b02      	ldr	r3, [pc, #8]	; (8088e74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8088e6a:	60c5      	str	r5, [r0, #12]
 8088e6c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8088e6e:	6020      	str	r0, [r4, #0]
	}
 8088e70:	4620      	mov	r0, r4
 8088e72:	bd38      	pop	{r3, r4, r5, pc}
 8088e74:	0808ec24 	.word	0x0808ec24

08088e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 8088e78:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8088e7a:	2300      	movs	r3, #0
 8088e7c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 8088e7e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 8088e80:	4604      	mov	r4, r0
 8088e82:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8088e84:	b12b      	cbz	r3, 8088e92 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8088e86:	2202      	movs	r2, #2
 8088e88:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8088e8a:	68eb      	ldr	r3, [r5, #12]
 8088e8c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8088e8e:	68ab      	ldr	r3, [r5, #8]
 8088e90:	60a3      	str	r3, [r4, #8]
    }
 8088e92:	4620      	mov	r0, r4
 8088e94:	bd38      	pop	{r3, r4, r5, pc}
	...

08088e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 8088e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088e9a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 8088e9c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8088e9e:	4668      	mov	r0, sp
 8088ea0:	f7ff ff38 	bl	8088d14 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 8088ea4:	f04f 0302 	mov.w	r3, #2
 8088ea8:	e8d4 2f4f 	ldrexb	r2, [r4]
 8088eac:	2a00      	cmp	r2, #0
 8088eae:	d103      	bne.n	8088eb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8088eb0:	e8c4 3f41 	strexb	r1, r3, [r4]
 8088eb4:	2900      	cmp	r1, #0
 8088eb6:	d1f7      	bne.n	8088ea8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 8088eb8:	d125      	bne.n	8088f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 8088eba:	f104 050c 	add.w	r5, r4, #12
 8088ebe:	4669      	mov	r1, sp
 8088ec0:	4628      	mov	r0, r5
 8088ec2:	f7ff ff27 	bl	8088d14 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 8088ec6:	2301      	movs	r3, #1
 8088ec8:	f3bf 8f5b 	dmb	ish
 8088ecc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 8088ece:	2000      	movs	r0, #0
 8088ed0:	f3bf 8f5b 	dmb	ish
 8088ed4:	f104 0308 	add.w	r3, r4, #8
 8088ed8:	e853 6f00 	ldrex	r6, [r3]
 8088edc:	e843 0200 	strex	r2, r0, [r3]
 8088ee0:	2a00      	cmp	r2, #0
 8088ee2:	d1f9      	bne.n	8088ed8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 8088ee4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 8088ee8:	b16e      	cbz	r6, 8088f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 8088eea:	f7fe fb5f 	bl	80875ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 8088eee:	b178      	cbz	r0, 8088f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8088ef0:	4629      	mov	r1, r5
 8088ef2:	4630      	mov	r0, r6
 8088ef4:	f7ff ff8b 	bl	8088e0e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 8088ef8:	4630      	mov	r0, r6
 8088efa:	f7fd fe7b 	bl	8086bf4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 8088efe:	2110      	movs	r1, #16
 8088f00:	4630      	mov	r0, r6
 8088f02:	f000 fe0e 	bl	8089b22 <_ZdlPvj>
        p_->setError(std::move(error));
 8088f06:	4668      	mov	r0, sp
 8088f08:	f7ff ff11 	bl	8088d2e <_ZN8particle5ErrorD1Ev>
    }
 8088f0c:	b009      	add	sp, #36	; 0x24
 8088f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8088f10:	4631      	mov	r1, r6
 8088f12:	a802      	add	r0, sp, #8
 8088f14:	f7ff ffb0 	bl	8088e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 8088f18:	68e0      	ldr	r0, [r4, #12]
 8088f1a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8088f1e:	b108      	cbz	r0, 8088f24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 8088f20:	f001 ff84 	bl	808ae2c <strdup>
        type_(type) {
 8088f24:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8088f26:	2010      	movs	r0, #16
 8088f28:	f8ad 501c 	strh.w	r5, [sp, #28]
 8088f2c:	f7f7 f8cd 	bl	80800ca <_Znwj>
 8088f30:	4605      	mov	r5, r0
 8088f32:	b1e8      	cbz	r0, 8088f70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 8088f34:	2700      	movs	r7, #0
 8088f36:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088f38:	2018      	movs	r0, #24
 8088f3a:	f7f7 f8c6 	bl	80800ca <_Znwj>
 8088f3e:	4604      	mov	r4, r0
 8088f40:	b188      	cbz	r0, 8088f66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 8088f42:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 8088f44:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 8088f46:	a802      	add	r0, sp, #8
 8088f48:	f7ff fd79 	bl	8088a3e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088f4c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8088f4e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8088f50:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088f52:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8088f54:	9204      	str	r2, [sp, #16]
 8088f56:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8088f58:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8088f5a:	60e3      	str	r3, [r4, #12]
 8088f5c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 8088f60:	9205      	str	r2, [sp, #20]
 8088f62:	f7ff fed7 	bl	8088d14 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 8088f66:	4b08      	ldr	r3, [pc, #32]	; (8088f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088f68:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 8088f6a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8088f6c:	4b07      	ldr	r3, [pc, #28]	; (8088f8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 8088f6e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 8088f70:	a806      	add	r0, sp, #24
 8088f72:	f7ff fedc 	bl	8088d2e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8088f76:	a802      	add	r0, sp, #8
 8088f78:	f7fd fe3c 	bl	8086bf4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8088f7c:	2200      	movs	r2, #0
 8088f7e:	4629      	mov	r1, r5
 8088f80:	4803      	ldr	r0, [pc, #12]	; (8088f90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 8088f82:	f7fe fb1b 	bl	80875bc <application_thread_invoke>
 8088f86:	e7b7      	b.n	8088ef8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 8088f88:	08088e21 	.word	0x08088e21
 8088f8c:	080890b9 	.word	0x080890b9
 8088f90:	08089681 	.word	0x08089681

08088f94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8088f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8088f98:	b08a      	sub	sp, #40	; 0x28
 8088f9a:	4605      	mov	r5, r0
 8088f9c:	460c      	mov	r4, r1
 8088f9e:	4617      	mov	r7, r2
 8088fa0:	4698      	mov	r8, r3
 8088fa2:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 8088fa6:	f7fe fba5 	bl	80876f4 <spark_cloud_flag_connected>
 8088faa:	ae07      	add	r6, sp, #28
    if (!connected()) {
 8088fac:	4682      	mov	sl, r0
 8088fae:	bb38      	cbnz	r0, 8089000 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 8088fb0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8088fb4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8088fb6:	a905      	add	r1, sp, #20
 8088fb8:	4630      	mov	r0, r6
 8088fba:	f8ad 3018 	strh.w	r3, [sp, #24]
 8088fbe:	f7ff fea9 	bl	8088d14 <_ZN8particle5ErrorC1EOS0_>
 8088fc2:	2014      	movs	r0, #20
 8088fc4:	f7f7 f881 	bl	80800ca <_Znwj>
 8088fc8:	4604      	mov	r4, r0
 8088fca:	b148      	cbz	r0, 8088fe0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8088fcc:	2302      	movs	r3, #2
 8088fce:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8088fd0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8088fd2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8088fd6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 8088fd8:	4631      	mov	r1, r6
 8088fda:	300c      	adds	r0, #12
 8088fdc:	f7ff fe9a 	bl	8088d14 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8088fe0:	4628      	mov	r0, r5
	: __shared_count(__p)
 8088fe2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8088fe4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 8088fe8:	f7ff ff32 	bl	8088e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8088fec:	4630      	mov	r0, r6
 8088fee:	f7ff fe9e 	bl	8088d2e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8088ff2:	a805      	add	r0, sp, #20
 8088ff4:	f7ff fe9b 	bl	8088d2e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 8088ff8:	4628      	mov	r0, r5
 8088ffa:	b00a      	add	sp, #40	; 0x28
 8088ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8089000:	230c      	movs	r3, #12
 8089002:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8089006:	2014      	movs	r0, #20
 8089008:	e9cd aa08 	strd	sl, sl, [sp, #32]
 808900c:	9307      	str	r3, [sp, #28]
 808900e:	f7f7 f85c 	bl	80800ca <_Znwj>
 8089012:	4601      	mov	r1, r0
 8089014:	b128      	cbz	r0, 8089022 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8089016:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 808901a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808901e:	f880 a001 	strb.w	sl, [r0, #1]
 8089022:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 8089024:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 8089026:	f7ff ff13 	bl	8088e50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 808902a:	4b22      	ldr	r3, [pc, #136]	; (80890b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808902c:	2008      	movs	r0, #8
 808902e:	9308      	str	r3, [sp, #32]
 8089030:	f7f7 f84b 	bl	80800ca <_Znwj>
 8089034:	4682      	mov	sl, r0
 8089036:	b128      	cbz	r0, 8089044 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 8089038:	9b03      	ldr	r3, [sp, #12]
 808903a:	a904      	add	r1, sp, #16
 808903c:	f840 3b04 	str.w	r3, [r0], #4
 8089040:	f7ff fb00 	bl	8088644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8089044:	4642      	mov	r2, r8
 8089046:	4639      	mov	r1, r7
 8089048:	4620      	mov	r0, r4
 808904a:	9600      	str	r6, [sp, #0]
 808904c:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 8089050:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8089054:	f7fe fb56 	bl	8087704 <spark_send_event>
 8089058:	b9b8      	cbnz	r0, 808908a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 808905a:	9b03      	ldr	r3, [sp, #12]
 808905c:	785b      	ldrb	r3, [r3, #1]
 808905e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8089062:	b993      	cbnz	r3, 808908a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 8089064:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 8089068:	a905      	add	r1, sp, #20
 808906a:	a803      	add	r0, sp, #12
 808906c:	9205      	str	r2, [sp, #20]
 808906e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8089072:	f7ff ff11 	bl	8088e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8089076:	a805      	add	r0, sp, #20
 8089078:	f7ff fe59 	bl	8088d2e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808907c:	a805      	add	r0, sp, #20
 808907e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8089080:	f7ff fea6 	bl	8088dd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 8089084:	a806      	add	r0, sp, #24
 8089086:	f7fa f86d 	bl	8083164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 808908a:	9b03      	ldr	r3, [sp, #12]
 808908c:	a904      	add	r1, sp, #16
 808908e:	a806      	add	r0, sp, #24
 8089090:	9305      	str	r3, [sp, #20]
 8089092:	f7ff fad7 	bl	8088644 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 8089096:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8089098:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 808909a:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 808909c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 808909e:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80890a0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80890a2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80890a4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80890a6:	f7fa f85d 	bl	8083164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80890aa:	a804      	add	r0, sp, #16
 80890ac:	f7fa f85a 	bl	8083164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80890b0:	e7a2      	b.n	8088ff8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80890b2:	bf00      	nop
 80890b4:	0808917d 	.word	0x0808917d

080890b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80890b8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80890ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80890bc:	4605      	mov	r5, r0
	  switch (__op)
 80890be:	d007      	beq.n	80890d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80890c0:	2a03      	cmp	r2, #3
 80890c2:	d018      	beq.n	80890f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80890c4:	2a01      	cmp	r2, #1
 80890c6:	d101      	bne.n	80890cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80890c8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80890ca:	6003      	str	r3, [r0, #0]
	}
 80890cc:	2000      	movs	r0, #0
 80890ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80890d0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80890d2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80890d4:	f7f6 fff9 	bl	80800ca <_Znwj>
 80890d8:	4604      	mov	r4, r0
 80890da:	b150      	cbz	r0, 80890f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80890dc:	4631      	mov	r1, r6
 80890de:	f7ff fecb 	bl	8088e78 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80890e2:	6930      	ldr	r0, [r6, #16]
 80890e4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80890e8:	b108      	cbz	r0, 80890ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80890ea:	f001 fe9f 	bl	808ae2c <strdup>
        type_(type) {
 80890ee:	6120      	str	r0, [r4, #16]
 80890f0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80890f2:	602c      	str	r4, [r5, #0]
	}
 80890f4:	e7ea      	b.n	80890cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80890f6:	6804      	ldr	r4, [r0, #0]
 80890f8:	2c00      	cmp	r4, #0
 80890fa:	d0e7      	beq.n	80890cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80890fc:	f104 0010 	add.w	r0, r4, #16
 8089100:	f7ff fe15 	bl	8088d2e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 8089104:	4620      	mov	r0, r4
 8089106:	f7fd fd75 	bl	8086bf4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 808910a:	2118      	movs	r1, #24
 808910c:	4620      	mov	r0, r4
 808910e:	f000 fd08 	bl	8089b22 <_ZdlPvj>
 8089112:	e7db      	b.n	80890cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

08089114 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8089114:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 8089116:	2300      	movs	r3, #0
 8089118:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 808911a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 808911c:	4604      	mov	r4, r0
 808911e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 8089120:	b12b      	cbz	r3, 808912e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089122:	2202      	movs	r2, #2
 8089124:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8089126:	68eb      	ldr	r3, [r5, #12]
 8089128:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808912a:	68ab      	ldr	r3, [r5, #8]
 808912c:	60a3      	str	r3, [r4, #8]
    }
 808912e:	4620      	mov	r0, r4
 8089130:	bd38      	pop	{r3, r4, r5, pc}

08089132 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 8089132:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8089134:	b570      	push	{r4, r5, r6, lr}
 8089136:	4604      	mov	r4, r0
	  switch (__op)
 8089138:	d007      	beq.n	808914a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 808913a:	2a03      	cmp	r2, #3
 808913c:	d012      	beq.n	8089164 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 808913e:	2a01      	cmp	r2, #1
 8089140:	d101      	bne.n	8089146 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 8089142:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8089144:	6003      	str	r3, [r0, #0]
	}
 8089146:	2000      	movs	r0, #0
 8089148:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 808914a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 808914c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 808914e:	f7f6 ffbc 	bl	80800ca <_Znwj>
 8089152:	4605      	mov	r5, r0
 8089154:	b120      	cbz	r0, 8089160 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 8089156:	4631      	mov	r1, r6
 8089158:	f7ff ffdc 	bl	8089114 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808915c:	7c33      	ldrb	r3, [r6, #16]
 808915e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 8089160:	6025      	str	r5, [r4, #0]
	}
 8089162:	e7f0      	b.n	8089146 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 8089164:	6804      	ldr	r4, [r0, #0]
 8089166:	2c00      	cmp	r4, #0
 8089168:	d0ed      	beq.n	8089146 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 808916a:	4620      	mov	r0, r4
 808916c:	f7fd fd42 	bl	8086bf4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 8089170:	2114      	movs	r1, #20
 8089172:	4620      	mov	r0, r4
 8089174:	f000 fcd5 	bl	8089b22 <_ZdlPvj>
 8089178:	e7e5      	b.n	8089146 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

0808917c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808917c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808917e:	4604      	mov	r4, r0
 8089180:	b089      	sub	sp, #36	; 0x24
 8089182:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8089184:	a801      	add	r0, sp, #4
 8089186:	4611      	mov	r1, r2
 8089188:	f7ff fe22 	bl	8088dd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808918c:	b1a4      	cbz	r4, 80891b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 808918e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 8089190:	b11d      	cbz	r5, 808919a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 8089192:	4628      	mov	r0, r5
 8089194:	f001 fe4a 	bl	808ae2c <strdup>
 8089198:	4605      	mov	r5, r0
 808919a:	a801      	add	r0, sp, #4
 808919c:	a903      	add	r1, sp, #12
        type_(type) {
 808919e:	9503      	str	r5, [sp, #12]
 80891a0:	f8ad 4010 	strh.w	r4, [sp, #16]
 80891a4:	f7ff fe78 	bl	8088e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80891a8:	a803      	add	r0, sp, #12
 80891aa:	f7ff fdc0 	bl	8088d2e <_ZN8particle5ErrorD1Ev>
 80891ae:	a802      	add	r0, sp, #8
 80891b0:	f7f9 ffd8 	bl	8083164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80891b4:	b009      	add	sp, #36	; 0x24
 80891b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80891b8:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80891ba:	9d01      	ldr	r5, [sp, #4]
 80891bc:	e8d5 2f4f 	ldrexb	r2, [r5]
 80891c0:	2a00      	cmp	r2, #0
 80891c2:	d103      	bne.n	80891cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80891c4:	e8c5 3f41 	strexb	r1, r3, [r5]
 80891c8:	2900      	cmp	r1, #0
 80891ca:	d1f7      	bne.n	80891bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80891cc:	d1ef      	bne.n	80891ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80891ce:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80891d0:	f3bf 8f5b 	dmb	ish
 80891d4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80891d6:	f3bf 8f5b 	dmb	ish
 80891da:	1d2b      	adds	r3, r5, #4
 80891dc:	e853 6f00 	ldrex	r6, [r3]
 80891e0:	e843 4200 	strex	r2, r4, [r3]
 80891e4:	2a00      	cmp	r2, #0
 80891e6:	d1f9      	bne.n	80891dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80891e8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80891ec:	2e00      	cmp	r6, #0
 80891ee:	d0de      	beq.n	80891ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80891f0:	4620      	mov	r0, r4
 80891f2:	f7fe f9db 	bl	80875ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80891f6:	4607      	mov	r7, r0
 80891f8:	b160      	cbz	r0, 8089214 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80891fa:	4630      	mov	r0, r6
 80891fc:	f105 010c 	add.w	r1, r5, #12
 8089200:	f7ff fe15 	bl	8088e2e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 8089204:	4630      	mov	r0, r6
 8089206:	f7fd fcf5 	bl	8086bf4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 808920a:	2110      	movs	r1, #16
 808920c:	4630      	mov	r0, r6
 808920e:	f000 fc88 	bl	8089b22 <_ZdlPvj>
 8089212:	e7cc      	b.n	80891ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8089214:	4631      	mov	r1, r6
 8089216:	a803      	add	r0, sp, #12
 8089218:	f7ff ff7c 	bl	8089114 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808921c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808921e:	2010      	movs	r0, #16
 8089220:	f88d 301c 	strb.w	r3, [sp, #28]
 8089224:	f7f6 ff51 	bl	80800ca <_Znwj>
 8089228:	4605      	mov	r5, r0
 808922a:	b1d0      	cbz	r0, 8089262 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 808922c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808922e:	2014      	movs	r0, #20
 8089230:	f7f6 ff4b 	bl	80800ca <_Znwj>
 8089234:	4604      	mov	r4, r0
 8089236:	b178      	cbz	r0, 8089258 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 8089238:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 808923a:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 808923c:	a803      	add	r0, sp, #12
 808923e:	f7ff fbfe 	bl	8088a3e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089242:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8089244:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8089246:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089248:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 808924a:	9205      	str	r2, [sp, #20]
 808924c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808924e:	60e3      	str	r3, [r4, #12]
 8089250:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 8089254:	9206      	str	r2, [sp, #24]
 8089256:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 8089258:	4b06      	ldr	r3, [pc, #24]	; (8089274 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808925a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 808925c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808925e:	4b06      	ldr	r3, [pc, #24]	; (8089278 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 8089260:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 8089262:	a803      	add	r0, sp, #12
 8089264:	f7fd fcc6 	bl	8086bf4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8089268:	2200      	movs	r2, #0
 808926a:	4629      	mov	r1, r5
 808926c:	4803      	ldr	r0, [pc, #12]	; (808927c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 808926e:	f7fe f9a5 	bl	80875bc <application_thread_invoke>
 8089272:	e7c7      	b.n	8089204 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 8089274:	08088e41 	.word	0x08088e41
 8089278:	08089133 	.word	0x08089133
 808927c:	08089681 	.word	0x08089681

08089280 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8089280:	4770      	bx	lr

08089282 <_ZN9IPAddressD0Ev>:
 8089282:	b510      	push	{r4, lr}
 8089284:	4604      	mov	r4, r0
 8089286:	2108      	movs	r1, #8
 8089288:	f000 fc4b 	bl	8089b22 <_ZdlPvj>
 808928c:	4620      	mov	r0, r4
 808928e:	bd10      	pop	{r4, pc}

08089290 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8089290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089292:	460e      	mov	r6, r1
 8089294:	2400      	movs	r4, #0
 8089296:	f100 0708 	add.w	r7, r0, #8
 808929a:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 808929c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80892a0:	220a      	movs	r2, #10
 80892a2:	4630      	mov	r0, r6
 80892a4:	f7ff f861 	bl	808836a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80892a8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80892aa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80892ac:	d101      	bne.n	80892b2 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80892ae:	4620      	mov	r0, r4
 80892b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80892b2:	2c00      	cmp	r4, #0
 80892b4:	d0f2      	beq.n	808929c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80892b6:	212e      	movs	r1, #46	; 0x2e
 80892b8:	4630      	mov	r0, r6
 80892ba:	f7ff f833 	bl	8088324 <_ZN5Print5printEc>
 80892be:	4404      	add	r4, r0
 80892c0:	e7ec      	b.n	808929c <_ZNK9IPAddress7printToER5Print+0xc>
	...

080892c4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80892c4:	4a02      	ldr	r2, [pc, #8]	; (80892d0 <_ZN9IPAddressC1Ev+0xc>)
 80892c6:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80892c8:	2200      	movs	r2, #0
 80892ca:	6042      	str	r2, [r0, #4]
}
 80892cc:	4770      	bx	lr
 80892ce:	bf00      	nop
 80892d0:	0808ec40 	.word	0x0808ec40

080892d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80892d4:	4a02      	ldr	r2, [pc, #8]	; (80892e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80892d6:	6002      	str	r2, [r0, #0]
    memcpy(&this->address, &address, sizeof(address));
 80892d8:	680a      	ldr	r2, [r1, #0]
 80892da:	6042      	str	r2, [r0, #4]
}
 80892dc:	4770      	bx	lr
 80892de:	bf00      	nop
 80892e0:	0808ec40 	.word	0x0808ec40

080892e4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80892e4:	4a01      	ldr	r2, [pc, #4]	; (80892ec <_ZN9IPAddressC1Em+0x8>)
    address.ipv4 = ipv4;
 80892e6:	e9c0 2100 	strd	r2, r1, [r0]
}
 80892ea:	4770      	bx	lr
 80892ec:	0808ec40 	.word	0x0808ec40

080892f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80892f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80892f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80892f6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80892fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80892fe:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 8089302:	6044      	str	r4, [r0, #4]
}
 8089304:	bd10      	pop	{r4, pc}
	...

08089308 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8089308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808930a:	4d04      	ldr	r5, [pc, #16]	; (808931c <_ZN9IPAddressC1Ehhhh+0x14>)
 808930c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808930e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8089312:	9500      	str	r5, [sp, #0]
 8089314:	f7ff ffec 	bl	80892f0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8089318:	b003      	add	sp, #12
 808931a:	bd30      	pop	{r4, r5, pc}
 808931c:	0808ec40 	.word	0x0808ec40

08089320 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8089320:	7441      	strb	r1, [r0, #17]
}
 8089322:	4770      	bx	lr

08089324 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8089324:	4770      	bx	lr

08089326 <_ZN9USBSerial4readEv>:
{
 8089326:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8089328:	2100      	movs	r1, #0
 808932a:	7c00      	ldrb	r0, [r0, #16]
 808932c:	f7fe f8f6 	bl	808751c <HAL_USB_USART_Receive_Data>
}
 8089330:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8089334:	bd08      	pop	{r3, pc}

08089336 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 8089336:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8089338:	2101      	movs	r1, #1
 808933a:	7c00      	ldrb	r0, [r0, #16]
 808933c:	f7fe f8ee 	bl	808751c <HAL_USB_USART_Receive_Data>
}
 8089340:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 8089344:	bd08      	pop	{r3, pc}

08089346 <_ZN9USBSerial17availableForWriteEv>:
{
 8089346:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8089348:	7c00      	ldrb	r0, [r0, #16]
 808934a:	f7fe f8df 	bl	808750c <HAL_USB_USART_Available_Data_For_Write>
}
 808934e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8089352:	bd08      	pop	{r3, pc}

08089354 <_ZN9USBSerial9availableEv>:
{
 8089354:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8089356:	7c00      	ldrb	r0, [r0, #16]
 8089358:	f7fe f8d0 	bl	80874fc <HAL_USB_USART_Available_Data>
}
 808935c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8089360:	bd08      	pop	{r3, pc}

08089362 <_ZN9USBSerial5writeEh>:
{
 8089362:	b538      	push	{r3, r4, r5, lr}
 8089364:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8089366:	7c00      	ldrb	r0, [r0, #16]
{
 8089368:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808936a:	f7fe f8cf 	bl	808750c <HAL_USB_USART_Available_Data_For_Write>
 808936e:	2800      	cmp	r0, #0
 8089370:	dc01      	bgt.n	8089376 <_ZN9USBSerial5writeEh+0x14>
 8089372:	7c60      	ldrb	r0, [r4, #17]
 8089374:	b128      	cbz	r0, 8089382 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8089376:	4629      	mov	r1, r5
 8089378:	7c20      	ldrb	r0, [r4, #16]
 808937a:	f7fe f8d7 	bl	808752c <HAL_USB_USART_Send_Data>
 808937e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8089382:	bd38      	pop	{r3, r4, r5, pc}

08089384 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 8089384:	7c00      	ldrb	r0, [r0, #16]
 8089386:	f7fe b8d9 	b.w	808753c <HAL_USB_USART_Flush_Data>

0808938a <_ZN9USBSerialD0Ev>:
 808938a:	b510      	push	{r4, lr}
 808938c:	4604      	mov	r4, r0
 808938e:	2114      	movs	r1, #20
 8089390:	f000 fbc7 	bl	8089b22 <_ZdlPvj>
 8089394:	4620      	mov	r0, r4
 8089396:	bd10      	pop	{r4, pc}

08089398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8089398:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808939a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808939e:	4604      	mov	r4, r0
 80893a0:	4608      	mov	r0, r1
 80893a2:	2100      	movs	r1, #0
 80893a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80893a8:	4b04      	ldr	r3, [pc, #16]	; (80893bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80893aa:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80893ac:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80893ae:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80893b0:	4611      	mov	r1, r2
  _blocking = true;
 80893b2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80893b4:	f7fe f892 	bl	80874dc <HAL_USB_USART_Init>
}
 80893b8:	4620      	mov	r0, r4
 80893ba:	bd10      	pop	{r4, pc}
 80893bc:	0808ec54 	.word	0x0808ec54

080893c0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80893c0:	2200      	movs	r2, #0
 80893c2:	7c00      	ldrb	r0, [r0, #16]
 80893c4:	f7fe b892 	b.w	80874ec <HAL_USB_USART_Begin>

080893c8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80893c8:	b510      	push	{r4, lr}
 80893ca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80893cc:	2214      	movs	r2, #20
 80893ce:	2100      	movs	r1, #0
 80893d0:	f001 fce0 	bl	808ad94 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80893d4:	4b05      	ldr	r3, [pc, #20]	; (80893ec <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80893d6:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80893d8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80893da:	4b05      	ldr	r3, [pc, #20]	; (80893f0 <_Z19acquireSerialBufferv+0x28>)
 80893dc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80893de:	f240 1301 	movw	r3, #257	; 0x101
 80893e2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80893e4:	2381      	movs	r3, #129	; 0x81
 80893e6:	8223      	strh	r3, [r4, #16]
}
 80893e8:	bd10      	pop	{r4, pc}
 80893ea:	bf00      	nop
 80893ec:	20001d80 	.word	0x20001d80
 80893f0:	20001e81 	.word	0x20001e81

080893f4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80893f4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80893f6:	4d0f      	ldr	r5, [pc, #60]	; (8089434 <_Z16_fetch_usbserialv+0x40>)
{
 80893f8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80893fa:	a801      	add	r0, sp, #4
 80893fc:	f7ff ffe4 	bl	80893c8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8089400:	7829      	ldrb	r1, [r5, #0]
 8089402:	f3bf 8f5b 	dmb	ish
 8089406:	f011 0401 	ands.w	r4, r1, #1
 808940a:	d110      	bne.n	808942e <_Z16_fetch_usbserialv+0x3a>
 808940c:	4628      	mov	r0, r5
 808940e:	f7f6 fe62 	bl	80800d6 <__cxa_guard_acquire>
 8089412:	b160      	cbz	r0, 808942e <_Z16_fetch_usbserialv+0x3a>
 8089414:	4621      	mov	r1, r4
 8089416:	aa01      	add	r2, sp, #4
 8089418:	4807      	ldr	r0, [pc, #28]	; (8089438 <_Z16_fetch_usbserialv+0x44>)
 808941a:	f7ff ffbd 	bl	8089398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808941e:	4628      	mov	r0, r5
 8089420:	f7f6 fe5e 	bl	80800e0 <__cxa_guard_release>
 8089424:	4a05      	ldr	r2, [pc, #20]	; (808943c <_Z16_fetch_usbserialv+0x48>)
 8089426:	4906      	ldr	r1, [pc, #24]	; (8089440 <_Z16_fetch_usbserialv+0x4c>)
 8089428:	4803      	ldr	r0, [pc, #12]	; (8089438 <_Z16_fetch_usbserialv+0x44>)
 808942a:	f000 fb75 	bl	8089b18 <__aeabi_atexit>
	return _usbserial;
}
 808942e:	4802      	ldr	r0, [pc, #8]	; (8089438 <_Z16_fetch_usbserialv+0x44>)
 8089430:	b007      	add	sp, #28
 8089432:	bd30      	pop	{r4, r5, pc}
 8089434:	20001d50 	.word	0x20001d50
 8089438:	20001d58 	.word	0x20001d58
 808943c:	200002b0 	.word	0x200002b0
 8089440:	08089325 	.word	0x08089325

08089444 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8089444:	b510      	push	{r4, lr}
 8089446:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8089448:	2214      	movs	r2, #20
 808944a:	2100      	movs	r1, #0
 808944c:	f001 fca2 	bl	808ad94 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8089450:	4b05      	ldr	r3, [pc, #20]	; (8089468 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8089452:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 8089454:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8089456:	4b05      	ldr	r3, [pc, #20]	; (808946c <_Z23acquireUSBSerial1Bufferv+0x28>)
 8089458:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808945a:	f240 1301 	movw	r3, #257	; 0x101
 808945e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8089460:	2381      	movs	r3, #129	; 0x81
 8089462:	8223      	strh	r3, [r4, #16]
}
 8089464:	bd10      	pop	{r4, pc}
 8089466:	bf00      	nop
 8089468:	20001f02 	.word	0x20001f02
 808946c:	20002003 	.word	0x20002003

08089470 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8089470:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8089472:	4c0f      	ldr	r4, [pc, #60]	; (80894b0 <_Z17_fetch_usbserial1v+0x40>)
{
 8089474:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8089476:	a801      	add	r0, sp, #4
 8089478:	f7ff ffe4 	bl	8089444 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808947c:	7823      	ldrb	r3, [r4, #0]
 808947e:	f3bf 8f5b 	dmb	ish
 8089482:	07db      	lsls	r3, r3, #31
 8089484:	d410      	bmi.n	80894a8 <_Z17_fetch_usbserial1v+0x38>
 8089486:	4620      	mov	r0, r4
 8089488:	f7f6 fe25 	bl	80800d6 <__cxa_guard_acquire>
 808948c:	b160      	cbz	r0, 80894a8 <_Z17_fetch_usbserial1v+0x38>
 808948e:	2101      	movs	r1, #1
 8089490:	aa01      	add	r2, sp, #4
 8089492:	4808      	ldr	r0, [pc, #32]	; (80894b4 <_Z17_fetch_usbserial1v+0x44>)
 8089494:	f7ff ff80 	bl	8089398 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8089498:	4620      	mov	r0, r4
 808949a:	f7f6 fe21 	bl	80800e0 <__cxa_guard_release>
 808949e:	4a06      	ldr	r2, [pc, #24]	; (80894b8 <_Z17_fetch_usbserial1v+0x48>)
 80894a0:	4906      	ldr	r1, [pc, #24]	; (80894bc <_Z17_fetch_usbserial1v+0x4c>)
 80894a2:	4804      	ldr	r0, [pc, #16]	; (80894b4 <_Z17_fetch_usbserial1v+0x44>)
 80894a4:	f000 fb38 	bl	8089b18 <__aeabi_atexit>
  return _usbserial1;
}
 80894a8:	4802      	ldr	r0, [pc, #8]	; (80894b4 <_Z17_fetch_usbserial1v+0x44>)
 80894aa:	b006      	add	sp, #24
 80894ac:	bd10      	pop	{r4, pc}
 80894ae:	bf00      	nop
 80894b0:	20001d54 	.word	0x20001d54
 80894b4:	20001d6c 	.word	0x20001d6c
 80894b8:	200002b0 	.word	0x200002b0
 80894bc:	08089325 	.word	0x08089325

080894c0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80894c0:	2200      	movs	r2, #0
 80894c2:	6840      	ldr	r0, [r0, #4]
 80894c4:	4611      	mov	r1, r2
 80894c6:	f7fe b8bd 	b.w	8087644 <network_ready>

080894ca <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80894ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        HAL_IPAddress ip = {0};
 80894cc:	2600      	movs	r6, #0
    IPAddress resolve(const char* name)
 80894ce:	b085      	sub	sp, #20
 80894d0:	4604      	mov	r4, r0
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80894d2:	4610      	mov	r0, r2
    IPAddress resolve(const char* name)
 80894d4:	460f      	mov	r7, r1
 80894d6:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 80894d8:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80894da:	f001 fcc2 	bl	808ae62 <strlen>
 80894de:	687b      	ldr	r3, [r7, #4]
 80894e0:	b281      	uxth	r1, r0
 80894e2:	9600      	str	r6, [sp, #0]
 80894e4:	4628      	mov	r0, r5
 80894e6:	aa03      	add	r2, sp, #12
 80894e8:	f7fd ffe8 	bl	80874bc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80894ec:	b130      	cbz	r0, 80894fc <_ZN5spark13CellularClass7resolveEPKc+0x32>
 80894ee:	4631      	mov	r1, r6
 80894f0:	4620      	mov	r0, r4
 80894f2:	f7ff fef7 	bl	80892e4 <_ZN9IPAddressC1Em>
    }
 80894f6:	4620      	mov	r0, r4
 80894f8:	b005      	add	sp, #20
 80894fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80894fc:	4620      	mov	r0, r4
 80894fe:	a903      	add	r1, sp, #12
 8089500:	f7ff fee8 	bl	80892d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 8089504:	e7f7      	b.n	80894f6 <_ZN5spark13CellularClass7resolveEPKc+0x2c>

08089506 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 8089506:	2200      	movs	r2, #0
 8089508:	6840      	ldr	r0, [r0, #4]
 808950a:	4611      	mov	r1, r2
 808950c:	f7fe b8ba 	b.w	8087684 <network_listening>

08089510 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 8089510:	2200      	movs	r2, #0
 8089512:	6840      	ldr	r0, [r0, #4]
 8089514:	4611      	mov	r1, r2
 8089516:	f7fe b8c5 	b.w	80876a4 <network_get_listen_timeout>

0808951a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 808951a:	2200      	movs	r2, #0
 808951c:	6840      	ldr	r0, [r0, #4]
 808951e:	f7fe b8b9 	b.w	8087694 <network_set_listen_timeout>

08089522 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 8089522:	2200      	movs	r2, #0
 8089524:	6840      	ldr	r0, [r0, #4]
 8089526:	f081 0101 	eor.w	r1, r1, #1
 808952a:	f7fe b8a3 	b.w	8087674 <network_listen>

0808952e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 808952e:	2300      	movs	r3, #0
 8089530:	6840      	ldr	r0, [r0, #4]
 8089532:	461a      	mov	r2, r3
 8089534:	4619      	mov	r1, r3
 8089536:	f7fe b88d 	b.w	8087654 <network_on>

0808953a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 808953a:	2200      	movs	r2, #0
 808953c:	6840      	ldr	r0, [r0, #4]
 808953e:	4611      	mov	r1, r2
 8089540:	f7fe b870 	b.w	8087624 <network_connecting>

08089544 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8089544:	2200      	movs	r2, #0
 8089546:	2102      	movs	r1, #2
 8089548:	6840      	ldr	r0, [r0, #4]
 808954a:	f7fe b873 	b.w	8087634 <network_disconnect>

0808954e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 808954e:	2300      	movs	r3, #0
 8089550:	6840      	ldr	r0, [r0, #4]
 8089552:	461a      	mov	r2, r3
 8089554:	f7fe b85e 	b.w	8087614 <network_connect>

08089558 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8089558:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808955a:	2428      	movs	r4, #40	; 0x28
 808955c:	4b07      	ldr	r3, [pc, #28]	; (808957c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808955e:	4622      	mov	r2, r4
 8089560:	4618      	mov	r0, r3
 8089562:	2100      	movs	r1, #0
 8089564:	f001 fc16 	bl	808ad94 <memset>
        cid = -1;
 8089568:	f04f 32ff 	mov.w	r2, #4294967295
 808956c:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808956e:	2204      	movs	r2, #4
 8089570:	4b03      	ldr	r3, [pc, #12]	; (8089580 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 8089572:	8004      	strh	r4, [r0, #0]
 8089574:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8089576:	4a03      	ldr	r2, [pc, #12]	; (8089584 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 8089578:	601a      	str	r2, [r3, #0]
 808957a:	bd10      	pop	{r4, pc}
 808957c:	2000208c 	.word	0x2000208c
 8089580:	20002084 	.word	0x20002084
 8089584:	0808ec84 	.word	0x0808ec84

08089588 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8089588:	7441      	strb	r1, [r0, #17]
}
 808958a:	4770      	bx	lr

0808958c <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 808958c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 808958e:	7c00      	ldrb	r0, [r0, #16]
 8089590:	f7fd fecc 	bl	808732c <hal_usart_available_data_for_write>
}
 8089594:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8089598:	bd08      	pop	{r3, pc}

0808959a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808959a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 808959c:	7c00      	ldrb	r0, [r0, #16]
 808959e:	f7fd fe9d 	bl	80872dc <hal_usart_available>
}
 80895a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80895a6:	bd08      	pop	{r3, pc}

080895a8 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80895a8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80895aa:	7c00      	ldrb	r0, [r0, #16]
 80895ac:	f7fd fea6 	bl	80872fc <hal_usart_peek>
}
 80895b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80895b4:	bd08      	pop	{r3, pc}

080895b6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80895b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80895b8:	7c00      	ldrb	r0, [r0, #16]
 80895ba:	f7fd fe97 	bl	80872ec <hal_usart_read>
}
 80895be:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80895c2:	bd08      	pop	{r3, pc}

080895c4 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80895c4:	7c00      	ldrb	r0, [r0, #16]
 80895c6:	f7fd bea1 	b.w	808730c <hal_usart_flush>

080895ca <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80895ca:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80895cc:	7c46      	ldrb	r6, [r0, #17]
{
 80895ce:	4604      	mov	r4, r0
 80895d0:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80895d2:	b12e      	cbz	r6, 80895e0 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80895d4:	4629      	mov	r1, r5
 80895d6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80895d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80895dc:	f7fd be76 	b.w	80872cc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80895e0:	7c00      	ldrb	r0, [r0, #16]
 80895e2:	f7fd fea3 	bl	808732c <hal_usart_available_data_for_write>
 80895e6:	2800      	cmp	r0, #0
 80895e8:	dcf4      	bgt.n	80895d4 <_ZN11USARTSerial5writeEh+0xa>
}
 80895ea:	4630      	mov	r0, r6
 80895ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080895f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80895f0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80895f4:	b510      	push	{r4, lr}
 80895f6:	4604      	mov	r4, r0
 80895f8:	4608      	mov	r0, r1
 80895fa:	4611      	mov	r1, r2
 80895fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8089600:	e9c4 c201 	strd	ip, r2, [r4, #4]
 8089604:	4a04      	ldr	r2, [pc, #16]	; (8089618 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 8089606:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 8089608:	6022      	str	r2, [r4, #0]
  _blocking = true;
 808960a:	2201      	movs	r2, #1
 808960c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 808960e:	461a      	mov	r2, r3
 8089610:	f7fd fe54 	bl	80872bc <hal_usart_init>
}
 8089614:	4620      	mov	r0, r4
 8089616:	bd10      	pop	{r4, pc}
 8089618:	0808ecb8 	.word	0x0808ecb8

0808961c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 808961c:	2300      	movs	r3, #0
 808961e:	7c00      	ldrb	r0, [r0, #16]
 8089620:	f7fd be8c 	b.w	808733c <hal_usart_begin_config>

08089624 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 8089624:	2200      	movs	r2, #0
 8089626:	f7ff bff9 	b.w	808961c <_ZN11USARTSerial5beginEmm>

0808962a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 808962a:	7c00      	ldrb	r0, [r0, #16]
 808962c:	f7fd be76 	b.w	808731c <hal_usart_is_enabled>

08089630 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8089630:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8089632:	4d0d      	ldr	r5, [pc, #52]	; (8089668 <_Z22__fetch_global_Serial1v+0x38>)
 8089634:	7829      	ldrb	r1, [r5, #0]
 8089636:	f3bf 8f5b 	dmb	ish
 808963a:	f011 0401 	ands.w	r4, r1, #1
 808963e:	d111      	bne.n	8089664 <_Z22__fetch_global_Serial1v+0x34>
 8089640:	4628      	mov	r0, r5
 8089642:	f7f6 fd48 	bl	80800d6 <__cxa_guard_acquire>
 8089646:	b168      	cbz	r0, 8089664 <_Z22__fetch_global_Serial1v+0x34>
 8089648:	4621      	mov	r1, r4
 808964a:	4a08      	ldr	r2, [pc, #32]	; (808966c <_Z22__fetch_global_Serial1v+0x3c>)
 808964c:	4b08      	ldr	r3, [pc, #32]	; (8089670 <_Z22__fetch_global_Serial1v+0x40>)
 808964e:	4809      	ldr	r0, [pc, #36]	; (8089674 <_Z22__fetch_global_Serial1v+0x44>)
 8089650:	f7ff ffce 	bl	80895f0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 8089654:	4628      	mov	r0, r5
 8089656:	f7f6 fd43 	bl	80800e0 <__cxa_guard_release>
 808965a:	4a07      	ldr	r2, [pc, #28]	; (8089678 <_Z22__fetch_global_Serial1v+0x48>)
 808965c:	4907      	ldr	r1, [pc, #28]	; (808967c <_Z22__fetch_global_Serial1v+0x4c>)
 808965e:	4805      	ldr	r0, [pc, #20]	; (8089674 <_Z22__fetch_global_Serial1v+0x44>)
 8089660:	f000 fa5a 	bl	8089b18 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8089664:	4803      	ldr	r0, [pc, #12]	; (8089674 <_Z22__fetch_global_Serial1v+0x44>)
 8089666:	bd38      	pop	{r3, r4, r5, pc}
 8089668:	200020b4 	.word	0x200020b4
 808966c:	200020b8 	.word	0x200020b8
 8089670:	2000213c 	.word	0x2000213c
 8089674:	200021c0 	.word	0x200021c0
 8089678:	200002b0 	.word	0x200002b0
 808967c:	08080941 	.word	0x08080941

08089680 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8089680:	b510      	push	{r4, lr}
      if (_M_empty())
 8089682:	6883      	ldr	r3, [r0, #8]
 8089684:	4604      	mov	r4, r0
 8089686:	b90b      	cbnz	r3, 808968c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8089688:	f000 fa4f 	bl	8089b2a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808968c:	68c3      	ldr	r3, [r0, #12]
 808968e:	4798      	blx	r3
      if (_M_manager)
 8089690:	68a3      	ldr	r3, [r4, #8]
 8089692:	b11b      	cbz	r3, 808969c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8089694:	2203      	movs	r2, #3
 8089696:	4621      	mov	r1, r4
 8089698:	4620      	mov	r0, r4
 808969a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808969c:	4620      	mov	r0, r4
}
 808969e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80896a2:	2110      	movs	r1, #16
 80896a4:	f000 ba3d 	b.w	8089b22 <_ZdlPvj>

080896a8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80896a8:	4770      	bx	lr

080896aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80896aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80896ac:	4606      	mov	r6, r0
 80896ae:	4615      	mov	r5, r2
 80896b0:	460c      	mov	r4, r1
 80896b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80896b4:	42bc      	cmp	r4, r7
 80896b6:	d006      	beq.n	80896c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80896b8:	6833      	ldr	r3, [r6, #0]
 80896ba:	4630      	mov	r0, r6
 80896bc:	689b      	ldr	r3, [r3, #8]
 80896be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80896c2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80896c4:	e7f6      	b.n	80896b4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80896c6:	4628      	mov	r0, r5
 80896c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080896ca <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80896ca:	2200      	movs	r2, #0
 80896cc:	7c00      	ldrb	r0, [r0, #16]
 80896ce:	f7fd be55 	b.w	808737c <hal_i2c_write>

080896d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80896d2:	2100      	movs	r1, #0
 80896d4:	7c00      	ldrb	r0, [r0, #16]
 80896d6:	f7fd be59 	b.w	808738c <hal_i2c_available>

080896da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80896da:	2100      	movs	r1, #0
 80896dc:	7c00      	ldrb	r0, [r0, #16]
 80896de:	f7fd be5d 	b.w	808739c <hal_i2c_read>

080896e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80896e2:	2100      	movs	r1, #0
 80896e4:	7c00      	ldrb	r0, [r0, #16]
 80896e6:	f7fd be61 	b.w	80873ac <hal_i2c_peek>

080896ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80896ea:	2100      	movs	r1, #0
 80896ec:	7c00      	ldrb	r0, [r0, #16]
 80896ee:	f7fd be65 	b.w	80873bc <hal_i2c_flush>

080896f2 <_ZN7TwoWireD0Ev>:
 80896f2:	b510      	push	{r4, lr}
 80896f4:	4604      	mov	r4, r0
 80896f6:	2114      	movs	r1, #20
 80896f8:	f000 fa13 	bl	8089b22 <_ZdlPvj>
 80896fc:	4620      	mov	r0, r4
 80896fe:	bd10      	pop	{r4, pc}

08089700 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8089700:	b510      	push	{r4, lr}
 8089702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8089706:	4604      	mov	r4, r0
 8089708:	4608      	mov	r0, r1
 808970a:	2100      	movs	r1, #0
 808970c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 8089710:	4b03      	ldr	r3, [pc, #12]	; (8089720 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 8089712:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 8089714:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 8089716:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 8089718:	f7fd fe60 	bl	80873dc <hal_i2c_init>
}
 808971c:	4620      	mov	r0, r4
 808971e:	bd10      	pop	{r4, pc}
 8089720:	0808ece8 	.word	0x0808ece8

08089724 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8089724:	2300      	movs	r3, #0
 8089726:	7c00      	ldrb	r0, [r0, #16]
 8089728:	461a      	mov	r2, r3
 808972a:	4619      	mov	r1, r3
 808972c:	f7fd be0e 	b.w	808734c <hal_i2c_begin>

08089730 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 8089730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8089732:	2200      	movs	r2, #0
 8089734:	2314      	movs	r3, #20
 8089736:	e9cd 2201 	strd	r2, r2, [sp, #4]
 808973a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 808973e:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 8089740:	7c00      	ldrb	r0, [r0, #16]
 8089742:	f88d 3008 	strb.w	r3, [sp, #8]
 8089746:	684b      	ldr	r3, [r1, #4]
 8089748:	9303      	str	r3, [sp, #12]
 808974a:	68cb      	ldr	r3, [r1, #12]
 808974c:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 808974e:	7a0b      	ldrb	r3, [r1, #8]
 8089750:	a901      	add	r1, sp, #4
 8089752:	9305      	str	r3, [sp, #20]
 8089754:	f7fd fe5a 	bl	808740c <hal_i2c_request_ex>
}
 8089758:	b007      	add	sp, #28
 808975a:	f85d fb04 	ldr.w	pc, [sp], #4

0808975e <_ZN7TwoWire11requestFromEhjh>:
{
 808975e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 8089760:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 8089762:	f88d 1000 	strb.w	r1, [sp]
 8089766:	f04f 0164 	mov.w	r1, #100	; 0x64
 808976a:	bf18      	it	ne
 808976c:	2301      	movne	r3, #1
 808976e:	9103      	str	r1, [sp, #12]
 8089770:	4669      	mov	r1, sp
    size_ = size;
 8089772:	9201      	str	r2, [sp, #4]
 8089774:	f88d 3008 	strb.w	r3, [sp, #8]
 8089778:	f7ff ffda 	bl	8089730 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 808977c:	b005      	add	sp, #20
 808977e:	f85d fb04 	ldr.w	pc, [sp], #4

08089782 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 8089782:	2301      	movs	r3, #1
 8089784:	f7ff bfeb 	b.w	808975e <_ZN7TwoWire11requestFromEhjh>

08089788 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 8089788:	2200      	movs	r2, #0
 808978a:	7c00      	ldrb	r0, [r0, #16]
 808978c:	f7fd bde6 	b.w	808735c <hal_i2c_begin_transmission>

08089790 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 8089790:	b2c9      	uxtb	r1, r1
 8089792:	f7ff bff9 	b.w	8089788 <_ZN7TwoWire17beginTransmissionEh>

08089796 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
 8089796:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 8089798:	2200      	movs	r2, #0
 808979a:	460b      	mov	r3, r1
 808979c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80897a0:	2214      	movs	r2, #20
 80897a2:	f8ad 2004 	strh.w	r2, [sp, #4]
    };
 80897a6:	685a      	ldr	r2, [r3, #4]
      .address = address_,
 80897a8:	7809      	ldrb	r1, [r1, #0]
    };
 80897aa:	9203      	str	r2, [sp, #12]
 80897ac:	68da      	ldr	r2, [r3, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80897ae:	7a1b      	ldrb	r3, [r3, #8]
    };
 80897b0:	9204      	str	r2, [sp, #16]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
 80897b2:	7c00      	ldrb	r0, [r0, #16]
 80897b4:	aa01      	add	r2, sp, #4
 80897b6:	f88d 1008 	strb.w	r1, [sp, #8]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80897ba:	9305      	str	r3, [sp, #20]
 80897bc:	f7fd fdce 	bl	808735c <hal_i2c_begin_transmission>
}
 80897c0:	b007      	add	sp, #28
 80897c2:	f85d fb04 	ldr.w	pc, [sp], #4

080897c6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80897c6:	2200      	movs	r2, #0
 80897c8:	7c00      	ldrb	r0, [r0, #16]
 80897ca:	f7fd bdcf 	b.w	808736c <hal_i2c_end_transmission>

080897ce <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80897ce:	2101      	movs	r1, #1
 80897d0:	f7ff bff9 	b.w	80897c6 <_ZN7TwoWire15endTransmissionEh>

080897d4 <_ZN7TwoWire9isEnabledEv>:
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return hal_i2c_is_enabled(_i2c, NULL);
 80897d4:	2100      	movs	r1, #0
 80897d6:	7c00      	ldrb	r0, [r0, #16]
 80897d8:	f7fd bdf8 	b.w	80873cc <hal_i2c_is_enabled>

080897dc <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80897dc:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
 80897de:	2100      	movs	r1, #0
 80897e0:	7c00      	ldrb	r0, [r0, #16]
 80897e2:	f7fd fe03 	bl	80873ec <hal_i2c_lock>
}
 80897e6:	fab0 f080 	clz	r0, r0
 80897ea:	0940      	lsrs	r0, r0, #5
 80897ec:	bd08      	pop	{r3, pc}

080897ee <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80897ee:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
 80897f0:	2100      	movs	r1, #0
 80897f2:	7c00      	ldrb	r0, [r0, #16]
 80897f4:	f7fd fe02 	bl	80873fc <hal_i2c_unlock>
}
 80897f8:	fab0 f080 	clz	r0, r0
 80897fc:	0940      	lsrs	r0, r0, #5
 80897fe:	bd08      	pop	{r3, pc}

08089800 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8089800:	2300      	movs	r3, #0
 8089802:	6840      	ldr	r0, [r0, #4]
 8089804:	461a      	mov	r2, r3
 8089806:	f7fd bf05 	b.w	8087614 <network_connect>

0808980a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808980a:	2200      	movs	r2, #0
 808980c:	2102      	movs	r1, #2
 808980e:	6840      	ldr	r0, [r0, #4]
 8089810:	f7fd bf10 	b.w	8087634 <network_disconnect>

08089814 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8089814:	2200      	movs	r2, #0
 8089816:	6840      	ldr	r0, [r0, #4]
 8089818:	4611      	mov	r1, r2
 808981a:	f7fd bf03 	b.w	8087624 <network_connecting>

0808981e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808981e:	2200      	movs	r2, #0
 8089820:	6840      	ldr	r0, [r0, #4]
 8089822:	4611      	mov	r1, r2
 8089824:	f7fd bf0e 	b.w	8087644 <network_ready>

08089828 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8089828:	2300      	movs	r3, #0
 808982a:	6840      	ldr	r0, [r0, #4]
 808982c:	461a      	mov	r2, r3
 808982e:	4619      	mov	r1, r3
 8089830:	f7fd bf10 	b.w	8087654 <network_on>

08089834 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8089834:	2300      	movs	r3, #0
 8089836:	6840      	ldr	r0, [r0, #4]
 8089838:	461a      	mov	r2, r3
 808983a:	4619      	mov	r1, r3
 808983c:	f7fd bf12 	b.w	8087664 <network_off>

08089840 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8089840:	2200      	movs	r2, #0
 8089842:	6840      	ldr	r0, [r0, #4]
 8089844:	f081 0101 	eor.w	r1, r1, #1
 8089848:	f7fd bf14 	b.w	8087674 <network_listen>

0808984c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808984c:	2200      	movs	r2, #0
 808984e:	6840      	ldr	r0, [r0, #4]
 8089850:	f7fd bf20 	b.w	8087694 <network_set_listen_timeout>

08089854 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8089854:	2200      	movs	r2, #0
 8089856:	6840      	ldr	r0, [r0, #4]
 8089858:	4611      	mov	r1, r2
 808985a:	f7fd bf23 	b.w	80876a4 <network_get_listen_timeout>

0808985e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808985e:	2200      	movs	r2, #0
 8089860:	6840      	ldr	r0, [r0, #4]
 8089862:	4611      	mov	r1, r2
 8089864:	f7fd bf0e 	b.w	8087684 <network_listening>

08089868 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8089868:	b570      	push	{r4, r5, r6, lr}
 808986a:	4615      	mov	r5, r2
        HAL_IPAddress ip = {0};
 808986c:	2600      	movs	r6, #0
 808986e:	b086      	sub	sp, #24
 8089870:	4604      	mov	r4, r0
    IPAddress addr;
 8089872:	a804      	add	r0, sp, #16
 8089874:	f7ff fd26 	bl	80892c4 <_ZN9IPAddressC1Ev>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8089878:	4628      	mov	r0, r5
        HAL_IPAddress ip = {0};
 808987a:	9603      	str	r6, [sp, #12]
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808987c:	f001 faf1 	bl	808ae62 <strlen>
 8089880:	4b0a      	ldr	r3, [pc, #40]	; (80898ac <_ZN5spark12NetworkClass7resolveEPKc+0x44>)
 8089882:	9600      	str	r6, [sp, #0]
 8089884:	b281      	uxth	r1, r0
 8089886:	685b      	ldr	r3, [r3, #4]
 8089888:	4628      	mov	r0, r5
 808988a:	aa03      	add	r2, sp, #12
 808988c:	f7fd fe16 	bl	80874bc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8089890:	b130      	cbz	r0, 80898a0 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8089892:	4631      	mov	r1, r6
 8089894:	4620      	mov	r0, r4
 8089896:	f7ff fd25 	bl	80892e4 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808989a:	4620      	mov	r0, r4
 808989c:	b006      	add	sp, #24
 808989e:	bd70      	pop	{r4, r5, r6, pc}
 80898a0:	4620      	mov	r0, r4
 80898a2:	a903      	add	r1, sp, #12
 80898a4:	f7ff fd16 	bl	80892d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80898a8:	e7f7      	b.n	808989a <_ZN5spark12NetworkClass7resolveEPKc+0x32>
 80898aa:	bf00      	nop
 80898ac:	20002084 	.word	0x20002084

080898b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80898b0:	4b02      	ldr	r3, [pc, #8]	; (80898bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80898b2:	4a03      	ldr	r2, [pc, #12]	; (80898c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80898b4:	601a      	str	r2, [r3, #0]
 80898b6:	2200      	movs	r2, #0
 80898b8:	605a      	str	r2, [r3, #4]

} // spark
 80898ba:	4770      	bx	lr
 80898bc:	200021d4 	.word	0x200021d4
 80898c0:	0808ed10 	.word	0x0808ed10

080898c4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80898c4:	282e      	cmp	r0, #46	; 0x2e
bool pinAvailable(uint16_t pin) {
 80898c6:	b570      	push	{r4, r5, r6, lr}
 80898c8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80898ca:	d901      	bls.n	80898d0 <pinAvailable+0xc>
    return false;
 80898cc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80898ce:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80898d0:	f1a0 030d 	sub.w	r3, r0, #13
 80898d4:	2b02      	cmp	r3, #2
 80898d6:	d90b      	bls.n	80898f0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80898d8:	2801      	cmp	r0, #1
 80898da:	d826      	bhi.n	808992a <pinAvailable+0x66>
 80898dc:	f000 f8cc 	bl	8089a78 <_Z19__fetch_global_Wirev>
 80898e0:	2100      	movs	r1, #0
 80898e2:	7c00      	ldrb	r0, [r0, #16]
 80898e4:	f7fd fd72 	bl	80873cc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80898e8:	f080 0001 	eor.w	r0, r0, #1
 80898ec:	b2c0      	uxtb	r0, r0
 80898ee:	e7ee      	b.n	80898ce <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80898f0:	4e13      	ldr	r6, [pc, #76]	; (8089940 <pinAvailable+0x7c>)
 80898f2:	7831      	ldrb	r1, [r6, #0]
 80898f4:	f3bf 8f5b 	dmb	ish
 80898f8:	f011 0501 	ands.w	r5, r1, #1
 80898fc:	d10f      	bne.n	808991e <pinAvailable+0x5a>
 80898fe:	4630      	mov	r0, r6
 8089900:	f7f6 fbe9 	bl	80800d6 <__cxa_guard_acquire>
 8089904:	b158      	cbz	r0, 808991e <pinAvailable+0x5a>
 8089906:	4629      	mov	r1, r5
 8089908:	480e      	ldr	r0, [pc, #56]	; (8089944 <pinAvailable+0x80>)
 808990a:	f7fe f8da 	bl	8087ac2 <_ZN8SPIClassC1E19hal_spi_interface_t>
 808990e:	4630      	mov	r0, r6
 8089910:	f7f6 fbe6 	bl	80800e0 <__cxa_guard_release>
 8089914:	4a0c      	ldr	r2, [pc, #48]	; (8089948 <pinAvailable+0x84>)
 8089916:	490d      	ldr	r1, [pc, #52]	; (808994c <pinAvailable+0x88>)
 8089918:	480a      	ldr	r0, [pc, #40]	; (8089944 <pinAvailable+0x80>)
 808991a:	f000 f8fd 	bl	8089b18 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 808991e:	4b09      	ldr	r3, [pc, #36]	; (8089944 <pinAvailable+0x80>)
 8089920:	7818      	ldrb	r0, [r3, #0]
 8089922:	f7fd fdab 	bl	808747c <hal_spi_is_enabled>
 8089926:	2800      	cmp	r0, #0
 8089928:	d1d0      	bne.n	80898cc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 808992a:	3c12      	subs	r4, #18
 808992c:	2c01      	cmp	r4, #1
 808992e:	d805      	bhi.n	808993c <pinAvailable+0x78>
 8089930:	f7ff fe7e 	bl	8089630 <_Z22__fetch_global_Serial1v>
 8089934:	7c00      	ldrb	r0, [r0, #16]
 8089936:	f7fd fcf1 	bl	808731c <hal_usart_is_enabled>
 808993a:	e7d5      	b.n	80898e8 <pinAvailable+0x24>
  return true; // 'pin' is available
 808993c:	2001      	movs	r0, #1
 808993e:	e7c6      	b.n	80898ce <pinAvailable+0xa>
 8089940:	20001cac 	.word	0x20001cac
 8089944:	20001cb0 	.word	0x20001cb0
 8089948:	200002b0 	.word	0x200002b0
 808994c:	08085e4d 	.word	0x08085e4d

08089950 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8089950:	282e      	cmp	r0, #46	; 0x2e
{
 8089952:	b538      	push	{r3, r4, r5, lr}
 8089954:	4604      	mov	r4, r0
 8089956:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8089958:	d80a      	bhi.n	8089970 <pinMode+0x20>
 808995a:	29ff      	cmp	r1, #255	; 0xff
 808995c:	d008      	beq.n	8089970 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 808995e:	f7ff ffb1 	bl	80898c4 <pinAvailable>
 8089962:	b128      	cbz	r0, 8089970 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 8089964:	4629      	mov	r1, r5
 8089966:	4620      	mov	r0, r4
}
 8089968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 808996c:	f7fd bc06 	b.w	808717c <HAL_Pin_Mode>
}
 8089970:	bd38      	pop	{r3, r4, r5, pc}

08089972 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8089972:	b538      	push	{r3, r4, r5, lr}
 8089974:	4604      	mov	r4, r0
 8089976:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8089978:	f7fd fc08 	bl	808718c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808997c:	28ff      	cmp	r0, #255	; 0xff
 808997e:	d010      	beq.n	80899a2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 8089980:	2806      	cmp	r0, #6
 8089982:	d804      	bhi.n	808998e <digitalWrite+0x1c>
 8089984:	234d      	movs	r3, #77	; 0x4d
 8089986:	fa23 f000 	lsr.w	r0, r3, r0
 808998a:	07c3      	lsls	r3, r0, #31
 808998c:	d409      	bmi.n	80899a2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808998e:	4620      	mov	r0, r4
 8089990:	f7ff ff98 	bl	80898c4 <pinAvailable>
 8089994:	b128      	cbz	r0, 80899a2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8089996:	4629      	mov	r1, r5
 8089998:	4620      	mov	r0, r4
}
 808999a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 808999e:	f7fd bbfd 	b.w	808719c <HAL_GPIO_Write>
}
 80899a2:	bd38      	pop	{r3, r4, r5, pc}

080899a4 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80899a4:	b510      	push	{r4, lr}
 80899a6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80899a8:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80899aa:	bf9c      	itt	ls
 80899ac:	340a      	addls	r4, #10
 80899ae:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80899b0:	4620      	mov	r0, r4
 80899b2:	f7ff ff87 	bl	80898c4 <pinAvailable>
 80899b6:	b150      	cbz	r0, 80899ce <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80899b8:	2103      	movs	r1, #3
 80899ba:	4620      	mov	r0, r4
 80899bc:	f7fd fbd6 	bl	808716c <HAL_Validate_Pin_Function>
 80899c0:	2803      	cmp	r0, #3
 80899c2:	d104      	bne.n	80899ce <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80899c4:	4620      	mov	r0, r4
}
 80899c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80899ca:	f7fd bbf7 	b.w	80871bc <hal_adc_read>
}
 80899ce:	2000      	movs	r0, #0
 80899d0:	bd10      	pop	{r4, pc}
	...

080899d4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80899d4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80899d6:	4c08      	ldr	r4, [pc, #32]	; (80899f8 <_Z21__fetch_global_EEPROMv+0x24>)
 80899d8:	7823      	ldrb	r3, [r4, #0]
 80899da:	f3bf 8f5b 	dmb	ish
 80899de:	07db      	lsls	r3, r3, #31
 80899e0:	d408      	bmi.n	80899f4 <_Z21__fetch_global_EEPROMv+0x20>
 80899e2:	4620      	mov	r0, r4
 80899e4:	f7f6 fb77 	bl	80800d6 <__cxa_guard_acquire>
 80899e8:	b120      	cbz	r0, 80899f4 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80899ea:	f7fd fc07 	bl	80871fc <HAL_EEPROM_Init>
 80899ee:	4620      	mov	r0, r4
 80899f0:	f7f6 fb76 	bl	80800e0 <__cxa_guard_release>
	return eeprom;
}
 80899f4:	4801      	ldr	r0, [pc, #4]	; (80899fc <_Z21__fetch_global_EEPROMv+0x28>)
 80899f6:	bd10      	pop	{r4, pc}
 80899f8:	200021e0 	.word	0x200021e0
 80899fc:	200021e4 	.word	0x200021e4

08089a00 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8089a00:	2300      	movs	r3, #0
 8089a02:	b513      	push	{r0, r1, r4, lr}
 8089a04:	4c07      	ldr	r4, [pc, #28]	; (8089a24 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8089a06:	461a      	mov	r2, r3
 8089a08:	4619      	mov	r1, r3
 8089a0a:	4620      	mov	r0, r4
 8089a0c:	9300      	str	r3, [sp, #0]
 8089a0e:	f7ff fc7b 	bl	8089308 <_ZN9IPAddressC1Ehhhh>
 8089a12:	4620      	mov	r0, r4
 8089a14:	4a04      	ldr	r2, [pc, #16]	; (8089a28 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8089a16:	4905      	ldr	r1, [pc, #20]	; (8089a2c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8089a18:	b002      	add	sp, #8
 8089a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8089a1e:	f000 b87b 	b.w	8089b18 <__aeabi_atexit>
 8089a22:	bf00      	nop
 8089a24:	200021e8 	.word	0x200021e8
 8089a28:	200002b0 	.word	0x200002b0
 8089a2c:	08089281 	.word	0x08089281

08089a30 <_ZN12_GLOBAL__N_117defaultWireConfigEv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 8089a30:	2300      	movs	r3, #0
hal_i2c_config_t defaultWireConfig() {
 8089a32:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 8089a34:	2520      	movs	r5, #32
 8089a36:	8043      	strh	r3, [r0, #2]
 8089a38:	2314      	movs	r3, #20
		.size = sizeof(hal_i2c_config_t),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089a3a:	4e08      	ldr	r6, [pc, #32]	; (8089a5c <_ZN12_GLOBAL__N_117defaultWireConfigEv+0x2c>)
hal_i2c_config_t defaultWireConfig() {
 8089a3c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 8089a3e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089a40:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 8089a42:	6085      	str	r5, [r0, #8]
 8089a44:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089a46:	4628      	mov	r0, r5
 8089a48:	f000 f86d 	bl	8089b26 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089a4c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 8089a4e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 8089a50:	4628      	mov	r0, r5
 8089a52:	f000 f868 	bl	8089b26 <_ZnajRKSt9nothrow_t>
	};
 8089a56:	60e0      	str	r0, [r4, #12]

	return config;
}
 8089a58:	4620      	mov	r0, r4
 8089a5a:	bd70      	pop	{r4, r5, r6, pc}
 8089a5c:	0808ed3c 	.word	0x0808ed3c

08089a60 <_Z17acquireWireBufferv>:

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 8089a60:	b510      	push	{r4, lr}
 8089a62:	4604      	mov	r4, r0
	return defaultWireConfig();
 8089a64:	f7ff ffe4 	bl	8089a30 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
}
 8089a68:	4620      	mov	r0, r4
 8089a6a:	bd10      	pop	{r4, pc}

08089a6c <_Z18acquireWire3Bufferv>:
 8089a6c:	b510      	push	{r4, lr}
 8089a6e:	4604      	mov	r4, r0
 8089a70:	f7ff ffde 	bl	8089a30 <_ZN12_GLOBAL__N_117defaultWireConfigEv>
 8089a74:	4620      	mov	r0, r4
 8089a76:	bd10      	pop	{r4, pc}

08089a78 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 8089a78:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8089a7a:	4d0f      	ldr	r5, [pc, #60]	; (8089ab8 <_Z19__fetch_global_Wirev+0x40>)
{
 8089a7c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 8089a7e:	7829      	ldrb	r1, [r5, #0]
 8089a80:	f3bf 8f5b 	dmb	ish
 8089a84:	f011 0401 	ands.w	r4, r1, #1
 8089a88:	d113      	bne.n	8089ab2 <_Z19__fetch_global_Wirev+0x3a>
 8089a8a:	4628      	mov	r0, r5
 8089a8c:	f7f6 fb23 	bl	80800d6 <__cxa_guard_acquire>
 8089a90:	b178      	cbz	r0, 8089ab2 <_Z19__fetch_global_Wirev+0x3a>
 8089a92:	a801      	add	r0, sp, #4
 8089a94:	f7ff ffe4 	bl	8089a60 <_Z17acquireWireBufferv>
 8089a98:	4621      	mov	r1, r4
 8089a9a:	aa01      	add	r2, sp, #4
 8089a9c:	4807      	ldr	r0, [pc, #28]	; (8089abc <_Z19__fetch_global_Wirev+0x44>)
 8089a9e:	f7ff fe2f 	bl	8089700 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8089aa2:	4628      	mov	r0, r5
 8089aa4:	f7f6 fb1c 	bl	80800e0 <__cxa_guard_release>
 8089aa8:	4a05      	ldr	r2, [pc, #20]	; (8089ac0 <_Z19__fetch_global_Wirev+0x48>)
 8089aaa:	4906      	ldr	r1, [pc, #24]	; (8089ac4 <_Z19__fetch_global_Wirev+0x4c>)
 8089aac:	4803      	ldr	r0, [pc, #12]	; (8089abc <_Z19__fetch_global_Wirev+0x44>)
 8089aae:	f000 f833 	bl	8089b18 <__aeabi_atexit>
	return wire;
}
 8089ab2:	4802      	ldr	r0, [pc, #8]	; (8089abc <_Z19__fetch_global_Wirev+0x44>)
 8089ab4:	b007      	add	sp, #28
 8089ab6:	bd30      	pop	{r4, r5, pc}
 8089ab8:	200021f0 	.word	0x200021f0
 8089abc:	200021f8 	.word	0x200021f8
 8089ac0:	200002b0 	.word	0x200002b0
 8089ac4:	080896a9 	.word	0x080896a9

08089ac8 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8089ac8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8089aca:	4c0f      	ldr	r4, [pc, #60]	; (8089b08 <_Z20__fetch_global_Wire3v+0x40>)
{
 8089acc:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE3, acquireWire3Buffer());
 8089ace:	7823      	ldrb	r3, [r4, #0]
 8089ad0:	f3bf 8f5b 	dmb	ish
 8089ad4:	07db      	lsls	r3, r3, #31
 8089ad6:	d413      	bmi.n	8089b00 <_Z20__fetch_global_Wire3v+0x38>
 8089ad8:	4620      	mov	r0, r4
 8089ada:	f7f6 fafc 	bl	80800d6 <__cxa_guard_acquire>
 8089ade:	b178      	cbz	r0, 8089b00 <_Z20__fetch_global_Wire3v+0x38>
 8089ae0:	a801      	add	r0, sp, #4
 8089ae2:	f7ff ffc3 	bl	8089a6c <_Z18acquireWire3Bufferv>
 8089ae6:	2102      	movs	r1, #2
 8089ae8:	aa01      	add	r2, sp, #4
 8089aea:	4808      	ldr	r0, [pc, #32]	; (8089b0c <_Z20__fetch_global_Wire3v+0x44>)
 8089aec:	f7ff fe08 	bl	8089700 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 8089af0:	4620      	mov	r0, r4
 8089af2:	f7f6 faf5 	bl	80800e0 <__cxa_guard_release>
 8089af6:	4a06      	ldr	r2, [pc, #24]	; (8089b10 <_Z20__fetch_global_Wire3v+0x48>)
 8089af8:	4906      	ldr	r1, [pc, #24]	; (8089b14 <_Z20__fetch_global_Wire3v+0x4c>)
 8089afa:	4804      	ldr	r0, [pc, #16]	; (8089b0c <_Z20__fetch_global_Wire3v+0x44>)
 8089afc:	f000 f80c 	bl	8089b18 <__aeabi_atexit>
	return wire;
}
 8089b00:	4802      	ldr	r0, [pc, #8]	; (8089b0c <_Z20__fetch_global_Wire3v+0x44>)
 8089b02:	b006      	add	sp, #24
 8089b04:	bd10      	pop	{r4, pc}
 8089b06:	bf00      	nop
 8089b08:	200021f4 	.word	0x200021f4
 8089b0c:	2000220c 	.word	0x2000220c
 8089b10:	200002b0 	.word	0x200002b0
 8089b14:	080896a9 	.word	0x080896a9

08089b18 <__aeabi_atexit>:
 8089b18:	460b      	mov	r3, r1
 8089b1a:	4601      	mov	r1, r0
 8089b1c:	4618      	mov	r0, r3
 8089b1e:	f001 b8f5 	b.w	808ad0c <__cxa_atexit>

08089b22 <_ZdlPvj>:
 8089b22:	f7f6 bad6 	b.w	80800d2 <_ZdlPv>

08089b26 <_ZnajRKSt9nothrow_t>:
 8089b26:	f7f6 bad2 	b.w	80800ce <_Znaj>

08089b2a <_ZSt25__throw_bad_function_callv>:
 8089b2a:	b508      	push	{r3, lr}
 8089b2c:	f7fd fe3a 	bl	80877a4 <abort>

08089b30 <nan>:
 8089b30:	2000      	movs	r0, #0
 8089b32:	4901      	ldr	r1, [pc, #4]	; (8089b38 <nan+0x8>)
 8089b34:	4770      	bx	lr
 8089b36:	bf00      	nop
 8089b38:	7ff80000 	.word	0x7ff80000

08089b3c <__aeabi_drsub>:
 8089b3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8089b40:	e002      	b.n	8089b48 <__adddf3>
 8089b42:	bf00      	nop

08089b44 <__aeabi_dsub>:
 8089b44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08089b48 <__adddf3>:
 8089b48:	b530      	push	{r4, r5, lr}
 8089b4a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8089b4e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8089b52:	ea94 0f05 	teq	r4, r5
 8089b56:	bf08      	it	eq
 8089b58:	ea90 0f02 	teqeq	r0, r2
 8089b5c:	bf1f      	itttt	ne
 8089b5e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8089b62:	ea55 0c02 	orrsne.w	ip, r5, r2
 8089b66:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8089b6a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089b6e:	f000 80e2 	beq.w	8089d36 <__adddf3+0x1ee>
 8089b72:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8089b76:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8089b7a:	bfb8      	it	lt
 8089b7c:	426d      	neglt	r5, r5
 8089b7e:	dd0c      	ble.n	8089b9a <__adddf3+0x52>
 8089b80:	442c      	add	r4, r5
 8089b82:	ea80 0202 	eor.w	r2, r0, r2
 8089b86:	ea81 0303 	eor.w	r3, r1, r3
 8089b8a:	ea82 0000 	eor.w	r0, r2, r0
 8089b8e:	ea83 0101 	eor.w	r1, r3, r1
 8089b92:	ea80 0202 	eor.w	r2, r0, r2
 8089b96:	ea81 0303 	eor.w	r3, r1, r3
 8089b9a:	2d36      	cmp	r5, #54	; 0x36
 8089b9c:	bf88      	it	hi
 8089b9e:	bd30      	pophi	{r4, r5, pc}
 8089ba0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089ba4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8089ba8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8089bac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8089bb0:	d002      	beq.n	8089bb8 <__adddf3+0x70>
 8089bb2:	4240      	negs	r0, r0
 8089bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089bb8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8089bbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8089bc0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8089bc4:	d002      	beq.n	8089bcc <__adddf3+0x84>
 8089bc6:	4252      	negs	r2, r2
 8089bc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089bcc:	ea94 0f05 	teq	r4, r5
 8089bd0:	f000 80a7 	beq.w	8089d22 <__adddf3+0x1da>
 8089bd4:	f1a4 0401 	sub.w	r4, r4, #1
 8089bd8:	f1d5 0e20 	rsbs	lr, r5, #32
 8089bdc:	db0d      	blt.n	8089bfa <__adddf3+0xb2>
 8089bde:	fa02 fc0e 	lsl.w	ip, r2, lr
 8089be2:	fa22 f205 	lsr.w	r2, r2, r5
 8089be6:	1880      	adds	r0, r0, r2
 8089be8:	f141 0100 	adc.w	r1, r1, #0
 8089bec:	fa03 f20e 	lsl.w	r2, r3, lr
 8089bf0:	1880      	adds	r0, r0, r2
 8089bf2:	fa43 f305 	asr.w	r3, r3, r5
 8089bf6:	4159      	adcs	r1, r3
 8089bf8:	e00e      	b.n	8089c18 <__adddf3+0xd0>
 8089bfa:	f1a5 0520 	sub.w	r5, r5, #32
 8089bfe:	f10e 0e20 	add.w	lr, lr, #32
 8089c02:	2a01      	cmp	r2, #1
 8089c04:	fa03 fc0e 	lsl.w	ip, r3, lr
 8089c08:	bf28      	it	cs
 8089c0a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8089c0e:	fa43 f305 	asr.w	r3, r3, r5
 8089c12:	18c0      	adds	r0, r0, r3
 8089c14:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8089c18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089c1c:	d507      	bpl.n	8089c2e <__adddf3+0xe6>
 8089c1e:	f04f 0e00 	mov.w	lr, #0
 8089c22:	f1dc 0c00 	rsbs	ip, ip, #0
 8089c26:	eb7e 0000 	sbcs.w	r0, lr, r0
 8089c2a:	eb6e 0101 	sbc.w	r1, lr, r1
 8089c2e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8089c32:	d31b      	bcc.n	8089c6c <__adddf3+0x124>
 8089c34:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8089c38:	d30c      	bcc.n	8089c54 <__adddf3+0x10c>
 8089c3a:	0849      	lsrs	r1, r1, #1
 8089c3c:	ea5f 0030 	movs.w	r0, r0, rrx
 8089c40:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8089c44:	f104 0401 	add.w	r4, r4, #1
 8089c48:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8089c4c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8089c50:	f080 809a 	bcs.w	8089d88 <__adddf3+0x240>
 8089c54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8089c58:	bf08      	it	eq
 8089c5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8089c5e:	f150 0000 	adcs.w	r0, r0, #0
 8089c62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089c66:	ea41 0105 	orr.w	r1, r1, r5
 8089c6a:	bd30      	pop	{r4, r5, pc}
 8089c6c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8089c70:	4140      	adcs	r0, r0
 8089c72:	eb41 0101 	adc.w	r1, r1, r1
 8089c76:	3c01      	subs	r4, #1
 8089c78:	bf28      	it	cs
 8089c7a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8089c7e:	d2e9      	bcs.n	8089c54 <__adddf3+0x10c>
 8089c80:	f091 0f00 	teq	r1, #0
 8089c84:	bf04      	itt	eq
 8089c86:	4601      	moveq	r1, r0
 8089c88:	2000      	moveq	r0, #0
 8089c8a:	fab1 f381 	clz	r3, r1
 8089c8e:	bf08      	it	eq
 8089c90:	3320      	addeq	r3, #32
 8089c92:	f1a3 030b 	sub.w	r3, r3, #11
 8089c96:	f1b3 0220 	subs.w	r2, r3, #32
 8089c9a:	da0c      	bge.n	8089cb6 <__adddf3+0x16e>
 8089c9c:	320c      	adds	r2, #12
 8089c9e:	dd08      	ble.n	8089cb2 <__adddf3+0x16a>
 8089ca0:	f102 0c14 	add.w	ip, r2, #20
 8089ca4:	f1c2 020c 	rsb	r2, r2, #12
 8089ca8:	fa01 f00c 	lsl.w	r0, r1, ip
 8089cac:	fa21 f102 	lsr.w	r1, r1, r2
 8089cb0:	e00c      	b.n	8089ccc <__adddf3+0x184>
 8089cb2:	f102 0214 	add.w	r2, r2, #20
 8089cb6:	bfd8      	it	le
 8089cb8:	f1c2 0c20 	rsble	ip, r2, #32
 8089cbc:	fa01 f102 	lsl.w	r1, r1, r2
 8089cc0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8089cc4:	bfdc      	itt	le
 8089cc6:	ea41 010c 	orrle.w	r1, r1, ip
 8089cca:	4090      	lslle	r0, r2
 8089ccc:	1ae4      	subs	r4, r4, r3
 8089cce:	bfa2      	ittt	ge
 8089cd0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8089cd4:	4329      	orrge	r1, r5
 8089cd6:	bd30      	popge	{r4, r5, pc}
 8089cd8:	ea6f 0404 	mvn.w	r4, r4
 8089cdc:	3c1f      	subs	r4, #31
 8089cde:	da1c      	bge.n	8089d1a <__adddf3+0x1d2>
 8089ce0:	340c      	adds	r4, #12
 8089ce2:	dc0e      	bgt.n	8089d02 <__adddf3+0x1ba>
 8089ce4:	f104 0414 	add.w	r4, r4, #20
 8089ce8:	f1c4 0220 	rsb	r2, r4, #32
 8089cec:	fa20 f004 	lsr.w	r0, r0, r4
 8089cf0:	fa01 f302 	lsl.w	r3, r1, r2
 8089cf4:	ea40 0003 	orr.w	r0, r0, r3
 8089cf8:	fa21 f304 	lsr.w	r3, r1, r4
 8089cfc:	ea45 0103 	orr.w	r1, r5, r3
 8089d00:	bd30      	pop	{r4, r5, pc}
 8089d02:	f1c4 040c 	rsb	r4, r4, #12
 8089d06:	f1c4 0220 	rsb	r2, r4, #32
 8089d0a:	fa20 f002 	lsr.w	r0, r0, r2
 8089d0e:	fa01 f304 	lsl.w	r3, r1, r4
 8089d12:	ea40 0003 	orr.w	r0, r0, r3
 8089d16:	4629      	mov	r1, r5
 8089d18:	bd30      	pop	{r4, r5, pc}
 8089d1a:	fa21 f004 	lsr.w	r0, r1, r4
 8089d1e:	4629      	mov	r1, r5
 8089d20:	bd30      	pop	{r4, r5, pc}
 8089d22:	f094 0f00 	teq	r4, #0
 8089d26:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8089d2a:	bf06      	itte	eq
 8089d2c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8089d30:	3401      	addeq	r4, #1
 8089d32:	3d01      	subne	r5, #1
 8089d34:	e74e      	b.n	8089bd4 <__adddf3+0x8c>
 8089d36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089d3a:	bf18      	it	ne
 8089d3c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089d40:	d029      	beq.n	8089d96 <__adddf3+0x24e>
 8089d42:	ea94 0f05 	teq	r4, r5
 8089d46:	bf08      	it	eq
 8089d48:	ea90 0f02 	teqeq	r0, r2
 8089d4c:	d005      	beq.n	8089d5a <__adddf3+0x212>
 8089d4e:	ea54 0c00 	orrs.w	ip, r4, r0
 8089d52:	bf04      	itt	eq
 8089d54:	4619      	moveq	r1, r3
 8089d56:	4610      	moveq	r0, r2
 8089d58:	bd30      	pop	{r4, r5, pc}
 8089d5a:	ea91 0f03 	teq	r1, r3
 8089d5e:	bf1e      	ittt	ne
 8089d60:	2100      	movne	r1, #0
 8089d62:	2000      	movne	r0, #0
 8089d64:	bd30      	popne	{r4, r5, pc}
 8089d66:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8089d6a:	d105      	bne.n	8089d78 <__adddf3+0x230>
 8089d6c:	0040      	lsls	r0, r0, #1
 8089d6e:	4149      	adcs	r1, r1
 8089d70:	bf28      	it	cs
 8089d72:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8089d76:	bd30      	pop	{r4, r5, pc}
 8089d78:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8089d7c:	bf3c      	itt	cc
 8089d7e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8089d82:	bd30      	popcc	{r4, r5, pc}
 8089d84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089d88:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8089d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8089d90:	f04f 0000 	mov.w	r0, #0
 8089d94:	bd30      	pop	{r4, r5, pc}
 8089d96:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089d9a:	bf1a      	itte	ne
 8089d9c:	4619      	movne	r1, r3
 8089d9e:	4610      	movne	r0, r2
 8089da0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8089da4:	bf1c      	itt	ne
 8089da6:	460b      	movne	r3, r1
 8089da8:	4602      	movne	r2, r0
 8089daa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8089dae:	bf06      	itte	eq
 8089db0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8089db4:	ea91 0f03 	teqeq	r1, r3
 8089db8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8089dbc:	bd30      	pop	{r4, r5, pc}
 8089dbe:	bf00      	nop

08089dc0 <__aeabi_ui2d>:
 8089dc0:	f090 0f00 	teq	r0, #0
 8089dc4:	bf04      	itt	eq
 8089dc6:	2100      	moveq	r1, #0
 8089dc8:	4770      	bxeq	lr
 8089dca:	b530      	push	{r4, r5, lr}
 8089dcc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089dd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089dd4:	f04f 0500 	mov.w	r5, #0
 8089dd8:	f04f 0100 	mov.w	r1, #0
 8089ddc:	e750      	b.n	8089c80 <__adddf3+0x138>
 8089dde:	bf00      	nop

08089de0 <__aeabi_i2d>:
 8089de0:	f090 0f00 	teq	r0, #0
 8089de4:	bf04      	itt	eq
 8089de6:	2100      	moveq	r1, #0
 8089de8:	4770      	bxeq	lr
 8089dea:	b530      	push	{r4, r5, lr}
 8089dec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089df0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089df4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8089df8:	bf48      	it	mi
 8089dfa:	4240      	negmi	r0, r0
 8089dfc:	f04f 0100 	mov.w	r1, #0
 8089e00:	e73e      	b.n	8089c80 <__adddf3+0x138>
 8089e02:	bf00      	nop

08089e04 <__aeabi_f2d>:
 8089e04:	0042      	lsls	r2, r0, #1
 8089e06:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8089e0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8089e0e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8089e12:	bf1f      	itttt	ne
 8089e14:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8089e18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8089e1c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8089e20:	4770      	bxne	lr
 8089e22:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8089e26:	bf08      	it	eq
 8089e28:	4770      	bxeq	lr
 8089e2a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8089e2e:	bf04      	itt	eq
 8089e30:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8089e34:	4770      	bxeq	lr
 8089e36:	b530      	push	{r4, r5, lr}
 8089e38:	f44f 7460 	mov.w	r4, #896	; 0x380
 8089e3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089e40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089e44:	e71c      	b.n	8089c80 <__adddf3+0x138>
 8089e46:	bf00      	nop

08089e48 <__aeabi_ul2d>:
 8089e48:	ea50 0201 	orrs.w	r2, r0, r1
 8089e4c:	bf08      	it	eq
 8089e4e:	4770      	bxeq	lr
 8089e50:	b530      	push	{r4, r5, lr}
 8089e52:	f04f 0500 	mov.w	r5, #0
 8089e56:	e00a      	b.n	8089e6e <__aeabi_l2d+0x16>

08089e58 <__aeabi_l2d>:
 8089e58:	ea50 0201 	orrs.w	r2, r0, r1
 8089e5c:	bf08      	it	eq
 8089e5e:	4770      	bxeq	lr
 8089e60:	b530      	push	{r4, r5, lr}
 8089e62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8089e66:	d502      	bpl.n	8089e6e <__aeabi_l2d+0x16>
 8089e68:	4240      	negs	r0, r0
 8089e6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089e6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089e72:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089e76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8089e7a:	f43f aed8 	beq.w	8089c2e <__adddf3+0xe6>
 8089e7e:	f04f 0203 	mov.w	r2, #3
 8089e82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089e86:	bf18      	it	ne
 8089e88:	3203      	addne	r2, #3
 8089e8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089e8e:	bf18      	it	ne
 8089e90:	3203      	addne	r2, #3
 8089e92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8089e96:	f1c2 0320 	rsb	r3, r2, #32
 8089e9a:	fa00 fc03 	lsl.w	ip, r0, r3
 8089e9e:	fa20 f002 	lsr.w	r0, r0, r2
 8089ea2:	fa01 fe03 	lsl.w	lr, r1, r3
 8089ea6:	ea40 000e 	orr.w	r0, r0, lr
 8089eaa:	fa21 f102 	lsr.w	r1, r1, r2
 8089eae:	4414      	add	r4, r2
 8089eb0:	e6bd      	b.n	8089c2e <__adddf3+0xe6>
 8089eb2:	bf00      	nop

08089eb4 <__aeabi_dmul>:
 8089eb4:	b570      	push	{r4, r5, r6, lr}
 8089eb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089eba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8089ebe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8089ec2:	bf1d      	ittte	ne
 8089ec4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8089ec8:	ea94 0f0c 	teqne	r4, ip
 8089ecc:	ea95 0f0c 	teqne	r5, ip
 8089ed0:	f000 f8de 	bleq	808a090 <__aeabi_dmul+0x1dc>
 8089ed4:	442c      	add	r4, r5
 8089ed6:	ea81 0603 	eor.w	r6, r1, r3
 8089eda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8089ede:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8089ee2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8089ee6:	bf18      	it	ne
 8089ee8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8089eec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8089ef4:	d038      	beq.n	8089f68 <__aeabi_dmul+0xb4>
 8089ef6:	fba0 ce02 	umull	ip, lr, r0, r2
 8089efa:	f04f 0500 	mov.w	r5, #0
 8089efe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8089f02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8089f06:	fbe0 e503 	umlal	lr, r5, r0, r3
 8089f0a:	f04f 0600 	mov.w	r6, #0
 8089f0e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8089f12:	f09c 0f00 	teq	ip, #0
 8089f16:	bf18      	it	ne
 8089f18:	f04e 0e01 	orrne.w	lr, lr, #1
 8089f1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8089f20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8089f24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8089f28:	d204      	bcs.n	8089f34 <__aeabi_dmul+0x80>
 8089f2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8089f2e:	416d      	adcs	r5, r5
 8089f30:	eb46 0606 	adc.w	r6, r6, r6
 8089f34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8089f38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8089f3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8089f40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8089f44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8089f48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8089f4c:	bf88      	it	hi
 8089f4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8089f52:	d81e      	bhi.n	8089f92 <__aeabi_dmul+0xde>
 8089f54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8089f58:	bf08      	it	eq
 8089f5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8089f5e:	f150 0000 	adcs.w	r0, r0, #0
 8089f62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089f66:	bd70      	pop	{r4, r5, r6, pc}
 8089f68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8089f6c:	ea46 0101 	orr.w	r1, r6, r1
 8089f70:	ea40 0002 	orr.w	r0, r0, r2
 8089f74:	ea81 0103 	eor.w	r1, r1, r3
 8089f78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8089f7c:	bfc2      	ittt	gt
 8089f7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8089f82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8089f86:	bd70      	popgt	{r4, r5, r6, pc}
 8089f88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089f8c:	f04f 0e00 	mov.w	lr, #0
 8089f90:	3c01      	subs	r4, #1
 8089f92:	f300 80ab 	bgt.w	808a0ec <__aeabi_dmul+0x238>
 8089f96:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8089f9a:	bfde      	ittt	le
 8089f9c:	2000      	movle	r0, #0
 8089f9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8089fa2:	bd70      	pople	{r4, r5, r6, pc}
 8089fa4:	f1c4 0400 	rsb	r4, r4, #0
 8089fa8:	3c20      	subs	r4, #32
 8089faa:	da35      	bge.n	808a018 <__aeabi_dmul+0x164>
 8089fac:	340c      	adds	r4, #12
 8089fae:	dc1b      	bgt.n	8089fe8 <__aeabi_dmul+0x134>
 8089fb0:	f104 0414 	add.w	r4, r4, #20
 8089fb4:	f1c4 0520 	rsb	r5, r4, #32
 8089fb8:	fa00 f305 	lsl.w	r3, r0, r5
 8089fbc:	fa20 f004 	lsr.w	r0, r0, r4
 8089fc0:	fa01 f205 	lsl.w	r2, r1, r5
 8089fc4:	ea40 0002 	orr.w	r0, r0, r2
 8089fc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8089fcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089fd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8089fd4:	fa21 f604 	lsr.w	r6, r1, r4
 8089fd8:	eb42 0106 	adc.w	r1, r2, r6
 8089fdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8089fe0:	bf08      	it	eq
 8089fe2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8089fe6:	bd70      	pop	{r4, r5, r6, pc}
 8089fe8:	f1c4 040c 	rsb	r4, r4, #12
 8089fec:	f1c4 0520 	rsb	r5, r4, #32
 8089ff0:	fa00 f304 	lsl.w	r3, r0, r4
 8089ff4:	fa20 f005 	lsr.w	r0, r0, r5
 8089ff8:	fa01 f204 	lsl.w	r2, r1, r4
 8089ffc:	ea40 0002 	orr.w	r0, r0, r2
 808a000:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a004:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808a008:	f141 0100 	adc.w	r1, r1, #0
 808a00c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a010:	bf08      	it	eq
 808a012:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a016:	bd70      	pop	{r4, r5, r6, pc}
 808a018:	f1c4 0520 	rsb	r5, r4, #32
 808a01c:	fa00 f205 	lsl.w	r2, r0, r5
 808a020:	ea4e 0e02 	orr.w	lr, lr, r2
 808a024:	fa20 f304 	lsr.w	r3, r0, r4
 808a028:	fa01 f205 	lsl.w	r2, r1, r5
 808a02c:	ea43 0302 	orr.w	r3, r3, r2
 808a030:	fa21 f004 	lsr.w	r0, r1, r4
 808a034:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a038:	fa21 f204 	lsr.w	r2, r1, r4
 808a03c:	ea20 0002 	bic.w	r0, r0, r2
 808a040:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808a044:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a048:	bf08      	it	eq
 808a04a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a04e:	bd70      	pop	{r4, r5, r6, pc}
 808a050:	f094 0f00 	teq	r4, #0
 808a054:	d10f      	bne.n	808a076 <__aeabi_dmul+0x1c2>
 808a056:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808a05a:	0040      	lsls	r0, r0, #1
 808a05c:	eb41 0101 	adc.w	r1, r1, r1
 808a060:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a064:	bf08      	it	eq
 808a066:	3c01      	subeq	r4, #1
 808a068:	d0f7      	beq.n	808a05a <__aeabi_dmul+0x1a6>
 808a06a:	ea41 0106 	orr.w	r1, r1, r6
 808a06e:	f095 0f00 	teq	r5, #0
 808a072:	bf18      	it	ne
 808a074:	4770      	bxne	lr
 808a076:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808a07a:	0052      	lsls	r2, r2, #1
 808a07c:	eb43 0303 	adc.w	r3, r3, r3
 808a080:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808a084:	bf08      	it	eq
 808a086:	3d01      	subeq	r5, #1
 808a088:	d0f7      	beq.n	808a07a <__aeabi_dmul+0x1c6>
 808a08a:	ea43 0306 	orr.w	r3, r3, r6
 808a08e:	4770      	bx	lr
 808a090:	ea94 0f0c 	teq	r4, ip
 808a094:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a098:	bf18      	it	ne
 808a09a:	ea95 0f0c 	teqne	r5, ip
 808a09e:	d00c      	beq.n	808a0ba <__aeabi_dmul+0x206>
 808a0a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a0a4:	bf18      	it	ne
 808a0a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a0aa:	d1d1      	bne.n	808a050 <__aeabi_dmul+0x19c>
 808a0ac:	ea81 0103 	eor.w	r1, r1, r3
 808a0b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a0b4:	f04f 0000 	mov.w	r0, #0
 808a0b8:	bd70      	pop	{r4, r5, r6, pc}
 808a0ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a0be:	bf06      	itte	eq
 808a0c0:	4610      	moveq	r0, r2
 808a0c2:	4619      	moveq	r1, r3
 808a0c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a0c8:	d019      	beq.n	808a0fe <__aeabi_dmul+0x24a>
 808a0ca:	ea94 0f0c 	teq	r4, ip
 808a0ce:	d102      	bne.n	808a0d6 <__aeabi_dmul+0x222>
 808a0d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808a0d4:	d113      	bne.n	808a0fe <__aeabi_dmul+0x24a>
 808a0d6:	ea95 0f0c 	teq	r5, ip
 808a0da:	d105      	bne.n	808a0e8 <__aeabi_dmul+0x234>
 808a0dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808a0e0:	bf1c      	itt	ne
 808a0e2:	4610      	movne	r0, r2
 808a0e4:	4619      	movne	r1, r3
 808a0e6:	d10a      	bne.n	808a0fe <__aeabi_dmul+0x24a>
 808a0e8:	ea81 0103 	eor.w	r1, r1, r3
 808a0ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a0f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a0f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808a0f8:	f04f 0000 	mov.w	r0, #0
 808a0fc:	bd70      	pop	{r4, r5, r6, pc}
 808a0fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a102:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808a106:	bd70      	pop	{r4, r5, r6, pc}

0808a108 <__aeabi_ddiv>:
 808a108:	b570      	push	{r4, r5, r6, lr}
 808a10a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a10e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808a112:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808a116:	bf1d      	ittte	ne
 808a118:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808a11c:	ea94 0f0c 	teqne	r4, ip
 808a120:	ea95 0f0c 	teqne	r5, ip
 808a124:	f000 f8a7 	bleq	808a276 <__aeabi_ddiv+0x16e>
 808a128:	eba4 0405 	sub.w	r4, r4, r5
 808a12c:	ea81 0e03 	eor.w	lr, r1, r3
 808a130:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a134:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808a138:	f000 8088 	beq.w	808a24c <__aeabi_ddiv+0x144>
 808a13c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808a140:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808a144:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808a148:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808a14c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808a150:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808a154:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808a158:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808a15c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808a160:	429d      	cmp	r5, r3
 808a162:	bf08      	it	eq
 808a164:	4296      	cmpeq	r6, r2
 808a166:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808a16a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808a16e:	d202      	bcs.n	808a176 <__aeabi_ddiv+0x6e>
 808a170:	085b      	lsrs	r3, r3, #1
 808a172:	ea4f 0232 	mov.w	r2, r2, rrx
 808a176:	1ab6      	subs	r6, r6, r2
 808a178:	eb65 0503 	sbc.w	r5, r5, r3
 808a17c:	085b      	lsrs	r3, r3, #1
 808a17e:	ea4f 0232 	mov.w	r2, r2, rrx
 808a182:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808a186:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808a18a:	ebb6 0e02 	subs.w	lr, r6, r2
 808a18e:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a192:	bf22      	ittt	cs
 808a194:	1ab6      	subcs	r6, r6, r2
 808a196:	4675      	movcs	r5, lr
 808a198:	ea40 000c 	orrcs.w	r0, r0, ip
 808a19c:	085b      	lsrs	r3, r3, #1
 808a19e:	ea4f 0232 	mov.w	r2, r2, rrx
 808a1a2:	ebb6 0e02 	subs.w	lr, r6, r2
 808a1a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a1aa:	bf22      	ittt	cs
 808a1ac:	1ab6      	subcs	r6, r6, r2
 808a1ae:	4675      	movcs	r5, lr
 808a1b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a1b4:	085b      	lsrs	r3, r3, #1
 808a1b6:	ea4f 0232 	mov.w	r2, r2, rrx
 808a1ba:	ebb6 0e02 	subs.w	lr, r6, r2
 808a1be:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a1c2:	bf22      	ittt	cs
 808a1c4:	1ab6      	subcs	r6, r6, r2
 808a1c6:	4675      	movcs	r5, lr
 808a1c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a1cc:	085b      	lsrs	r3, r3, #1
 808a1ce:	ea4f 0232 	mov.w	r2, r2, rrx
 808a1d2:	ebb6 0e02 	subs.w	lr, r6, r2
 808a1d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a1da:	bf22      	ittt	cs
 808a1dc:	1ab6      	subcs	r6, r6, r2
 808a1de:	4675      	movcs	r5, lr
 808a1e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a1e4:	ea55 0e06 	orrs.w	lr, r5, r6
 808a1e8:	d018      	beq.n	808a21c <__aeabi_ddiv+0x114>
 808a1ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808a1ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808a1f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808a1f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808a1fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808a1fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808a202:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808a206:	d1c0      	bne.n	808a18a <__aeabi_ddiv+0x82>
 808a208:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a20c:	d10b      	bne.n	808a226 <__aeabi_ddiv+0x11e>
 808a20e:	ea41 0100 	orr.w	r1, r1, r0
 808a212:	f04f 0000 	mov.w	r0, #0
 808a216:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808a21a:	e7b6      	b.n	808a18a <__aeabi_ddiv+0x82>
 808a21c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a220:	bf04      	itt	eq
 808a222:	4301      	orreq	r1, r0
 808a224:	2000      	moveq	r0, #0
 808a226:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808a22a:	bf88      	it	hi
 808a22c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808a230:	f63f aeaf 	bhi.w	8089f92 <__aeabi_dmul+0xde>
 808a234:	ebb5 0c03 	subs.w	ip, r5, r3
 808a238:	bf04      	itt	eq
 808a23a:	ebb6 0c02 	subseq.w	ip, r6, r2
 808a23e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808a242:	f150 0000 	adcs.w	r0, r0, #0
 808a246:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808a24a:	bd70      	pop	{r4, r5, r6, pc}
 808a24c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808a250:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808a254:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808a258:	bfc2      	ittt	gt
 808a25a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808a25e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808a262:	bd70      	popgt	{r4, r5, r6, pc}
 808a264:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a268:	f04f 0e00 	mov.w	lr, #0
 808a26c:	3c01      	subs	r4, #1
 808a26e:	e690      	b.n	8089f92 <__aeabi_dmul+0xde>
 808a270:	ea45 0e06 	orr.w	lr, r5, r6
 808a274:	e68d      	b.n	8089f92 <__aeabi_dmul+0xde>
 808a276:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a27a:	ea94 0f0c 	teq	r4, ip
 808a27e:	bf08      	it	eq
 808a280:	ea95 0f0c 	teqeq	r5, ip
 808a284:	f43f af3b 	beq.w	808a0fe <__aeabi_dmul+0x24a>
 808a288:	ea94 0f0c 	teq	r4, ip
 808a28c:	d10a      	bne.n	808a2a4 <__aeabi_ddiv+0x19c>
 808a28e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808a292:	f47f af34 	bne.w	808a0fe <__aeabi_dmul+0x24a>
 808a296:	ea95 0f0c 	teq	r5, ip
 808a29a:	f47f af25 	bne.w	808a0e8 <__aeabi_dmul+0x234>
 808a29e:	4610      	mov	r0, r2
 808a2a0:	4619      	mov	r1, r3
 808a2a2:	e72c      	b.n	808a0fe <__aeabi_dmul+0x24a>
 808a2a4:	ea95 0f0c 	teq	r5, ip
 808a2a8:	d106      	bne.n	808a2b8 <__aeabi_ddiv+0x1b0>
 808a2aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a2ae:	f43f aefd 	beq.w	808a0ac <__aeabi_dmul+0x1f8>
 808a2b2:	4610      	mov	r0, r2
 808a2b4:	4619      	mov	r1, r3
 808a2b6:	e722      	b.n	808a0fe <__aeabi_dmul+0x24a>
 808a2b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a2bc:	bf18      	it	ne
 808a2be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a2c2:	f47f aec5 	bne.w	808a050 <__aeabi_dmul+0x19c>
 808a2c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808a2ca:	f47f af0d 	bne.w	808a0e8 <__aeabi_dmul+0x234>
 808a2ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808a2d2:	f47f aeeb 	bne.w	808a0ac <__aeabi_dmul+0x1f8>
 808a2d6:	e712      	b.n	808a0fe <__aeabi_dmul+0x24a>

0808a2d8 <__gedf2>:
 808a2d8:	f04f 3cff 	mov.w	ip, #4294967295
 808a2dc:	e006      	b.n	808a2ec <__cmpdf2+0x4>
 808a2de:	bf00      	nop

0808a2e0 <__ledf2>:
 808a2e0:	f04f 0c01 	mov.w	ip, #1
 808a2e4:	e002      	b.n	808a2ec <__cmpdf2+0x4>
 808a2e6:	bf00      	nop

0808a2e8 <__cmpdf2>:
 808a2e8:	f04f 0c01 	mov.w	ip, #1
 808a2ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 808a2f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a2f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a2f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a2fc:	bf18      	it	ne
 808a2fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808a302:	d01b      	beq.n	808a33c <__cmpdf2+0x54>
 808a304:	b001      	add	sp, #4
 808a306:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808a30a:	bf0c      	ite	eq
 808a30c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808a310:	ea91 0f03 	teqne	r1, r3
 808a314:	bf02      	ittt	eq
 808a316:	ea90 0f02 	teqeq	r0, r2
 808a31a:	2000      	moveq	r0, #0
 808a31c:	4770      	bxeq	lr
 808a31e:	f110 0f00 	cmn.w	r0, #0
 808a322:	ea91 0f03 	teq	r1, r3
 808a326:	bf58      	it	pl
 808a328:	4299      	cmppl	r1, r3
 808a32a:	bf08      	it	eq
 808a32c:	4290      	cmpeq	r0, r2
 808a32e:	bf2c      	ite	cs
 808a330:	17d8      	asrcs	r0, r3, #31
 808a332:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808a336:	f040 0001 	orr.w	r0, r0, #1
 808a33a:	4770      	bx	lr
 808a33c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a344:	d102      	bne.n	808a34c <__cmpdf2+0x64>
 808a346:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a34a:	d107      	bne.n	808a35c <__cmpdf2+0x74>
 808a34c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a350:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a354:	d1d6      	bne.n	808a304 <__cmpdf2+0x1c>
 808a356:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a35a:	d0d3      	beq.n	808a304 <__cmpdf2+0x1c>
 808a35c:	f85d 0b04 	ldr.w	r0, [sp], #4
 808a360:	4770      	bx	lr
 808a362:	bf00      	nop

0808a364 <__aeabi_cdrcmple>:
 808a364:	4684      	mov	ip, r0
 808a366:	4610      	mov	r0, r2
 808a368:	4662      	mov	r2, ip
 808a36a:	468c      	mov	ip, r1
 808a36c:	4619      	mov	r1, r3
 808a36e:	4663      	mov	r3, ip
 808a370:	e000      	b.n	808a374 <__aeabi_cdcmpeq>
 808a372:	bf00      	nop

0808a374 <__aeabi_cdcmpeq>:
 808a374:	b501      	push	{r0, lr}
 808a376:	f7ff ffb7 	bl	808a2e8 <__cmpdf2>
 808a37a:	2800      	cmp	r0, #0
 808a37c:	bf48      	it	mi
 808a37e:	f110 0f00 	cmnmi.w	r0, #0
 808a382:	bd01      	pop	{r0, pc}

0808a384 <__aeabi_dcmpeq>:
 808a384:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a388:	f7ff fff4 	bl	808a374 <__aeabi_cdcmpeq>
 808a38c:	bf0c      	ite	eq
 808a38e:	2001      	moveq	r0, #1
 808a390:	2000      	movne	r0, #0
 808a392:	f85d fb08 	ldr.w	pc, [sp], #8
 808a396:	bf00      	nop

0808a398 <__aeabi_dcmplt>:
 808a398:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a39c:	f7ff ffea 	bl	808a374 <__aeabi_cdcmpeq>
 808a3a0:	bf34      	ite	cc
 808a3a2:	2001      	movcc	r0, #1
 808a3a4:	2000      	movcs	r0, #0
 808a3a6:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3aa:	bf00      	nop

0808a3ac <__aeabi_dcmple>:
 808a3ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3b0:	f7ff ffe0 	bl	808a374 <__aeabi_cdcmpeq>
 808a3b4:	bf94      	ite	ls
 808a3b6:	2001      	movls	r0, #1
 808a3b8:	2000      	movhi	r0, #0
 808a3ba:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3be:	bf00      	nop

0808a3c0 <__aeabi_dcmpge>:
 808a3c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3c4:	f7ff ffce 	bl	808a364 <__aeabi_cdrcmple>
 808a3c8:	bf94      	ite	ls
 808a3ca:	2001      	movls	r0, #1
 808a3cc:	2000      	movhi	r0, #0
 808a3ce:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3d2:	bf00      	nop

0808a3d4 <__aeabi_dcmpgt>:
 808a3d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a3d8:	f7ff ffc4 	bl	808a364 <__aeabi_cdrcmple>
 808a3dc:	bf34      	ite	cc
 808a3de:	2001      	movcc	r0, #1
 808a3e0:	2000      	movcs	r0, #0
 808a3e2:	f85d fb08 	ldr.w	pc, [sp], #8
 808a3e6:	bf00      	nop

0808a3e8 <__aeabi_dcmpun>:
 808a3e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a3ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a3f0:	d102      	bne.n	808a3f8 <__aeabi_dcmpun+0x10>
 808a3f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a3f6:	d10a      	bne.n	808a40e <__aeabi_dcmpun+0x26>
 808a3f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a3fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a400:	d102      	bne.n	808a408 <__aeabi_dcmpun+0x20>
 808a402:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a406:	d102      	bne.n	808a40e <__aeabi_dcmpun+0x26>
 808a408:	f04f 0000 	mov.w	r0, #0
 808a40c:	4770      	bx	lr
 808a40e:	f04f 0001 	mov.w	r0, #1
 808a412:	4770      	bx	lr

0808a414 <__aeabi_d2iz>:
 808a414:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a418:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a41c:	d215      	bcs.n	808a44a <__aeabi_d2iz+0x36>
 808a41e:	d511      	bpl.n	808a444 <__aeabi_d2iz+0x30>
 808a420:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a424:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a428:	d912      	bls.n	808a450 <__aeabi_d2iz+0x3c>
 808a42a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a42e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a432:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a436:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a43a:	fa23 f002 	lsr.w	r0, r3, r2
 808a43e:	bf18      	it	ne
 808a440:	4240      	negne	r0, r0
 808a442:	4770      	bx	lr
 808a444:	f04f 0000 	mov.w	r0, #0
 808a448:	4770      	bx	lr
 808a44a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a44e:	d105      	bne.n	808a45c <__aeabi_d2iz+0x48>
 808a450:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808a454:	bf08      	it	eq
 808a456:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808a45a:	4770      	bx	lr
 808a45c:	f04f 0000 	mov.w	r0, #0
 808a460:	4770      	bx	lr
 808a462:	bf00      	nop

0808a464 <__aeabi_d2uiz>:
 808a464:	004a      	lsls	r2, r1, #1
 808a466:	d211      	bcs.n	808a48c <__aeabi_d2uiz+0x28>
 808a468:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a46c:	d211      	bcs.n	808a492 <__aeabi_d2uiz+0x2e>
 808a46e:	d50d      	bpl.n	808a48c <__aeabi_d2uiz+0x28>
 808a470:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a474:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a478:	d40e      	bmi.n	808a498 <__aeabi_d2uiz+0x34>
 808a47a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a47e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a482:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a486:	fa23 f002 	lsr.w	r0, r3, r2
 808a48a:	4770      	bx	lr
 808a48c:	f04f 0000 	mov.w	r0, #0
 808a490:	4770      	bx	lr
 808a492:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a496:	d102      	bne.n	808a49e <__aeabi_d2uiz+0x3a>
 808a498:	f04f 30ff 	mov.w	r0, #4294967295
 808a49c:	4770      	bx	lr
 808a49e:	f04f 0000 	mov.w	r0, #0
 808a4a2:	4770      	bx	lr

0808a4a4 <__aeabi_d2f>:
 808a4a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a4a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808a4ac:	bf24      	itt	cs
 808a4ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808a4b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808a4b6:	d90d      	bls.n	808a4d4 <__aeabi_d2f+0x30>
 808a4b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a4bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808a4c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808a4c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808a4c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808a4cc:	bf08      	it	eq
 808a4ce:	f020 0001 	biceq.w	r0, r0, #1
 808a4d2:	4770      	bx	lr
 808a4d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808a4d8:	d121      	bne.n	808a51e <__aeabi_d2f+0x7a>
 808a4da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808a4de:	bfbc      	itt	lt
 808a4e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808a4e4:	4770      	bxlt	lr
 808a4e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a4ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808a4ee:	f1c2 0218 	rsb	r2, r2, #24
 808a4f2:	f1c2 0c20 	rsb	ip, r2, #32
 808a4f6:	fa10 f30c 	lsls.w	r3, r0, ip
 808a4fa:	fa20 f002 	lsr.w	r0, r0, r2
 808a4fe:	bf18      	it	ne
 808a500:	f040 0001 	orrne.w	r0, r0, #1
 808a504:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a508:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808a50c:	fa03 fc0c 	lsl.w	ip, r3, ip
 808a510:	ea40 000c 	orr.w	r0, r0, ip
 808a514:	fa23 f302 	lsr.w	r3, r3, r2
 808a518:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808a51c:	e7cc      	b.n	808a4b8 <__aeabi_d2f+0x14>
 808a51e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808a522:	d107      	bne.n	808a534 <__aeabi_d2f+0x90>
 808a524:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808a528:	bf1e      	ittt	ne
 808a52a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808a52e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808a532:	4770      	bxne	lr
 808a534:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808a538:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a53c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a540:	4770      	bx	lr
 808a542:	bf00      	nop

0808a544 <__aeabi_frsub>:
 808a544:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808a548:	e002      	b.n	808a550 <__addsf3>
 808a54a:	bf00      	nop

0808a54c <__aeabi_fsub>:
 808a54c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808a550 <__addsf3>:
 808a550:	0042      	lsls	r2, r0, #1
 808a552:	bf1f      	itttt	ne
 808a554:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808a558:	ea92 0f03 	teqne	r2, r3
 808a55c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808a560:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a564:	d06a      	beq.n	808a63c <__addsf3+0xec>
 808a566:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808a56a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808a56e:	bfc1      	itttt	gt
 808a570:	18d2      	addgt	r2, r2, r3
 808a572:	4041      	eorgt	r1, r0
 808a574:	4048      	eorgt	r0, r1
 808a576:	4041      	eorgt	r1, r0
 808a578:	bfb8      	it	lt
 808a57a:	425b      	neglt	r3, r3
 808a57c:	2b19      	cmp	r3, #25
 808a57e:	bf88      	it	hi
 808a580:	4770      	bxhi	lr
 808a582:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808a586:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a58a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808a58e:	bf18      	it	ne
 808a590:	4240      	negne	r0, r0
 808a592:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a596:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808a59a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808a59e:	bf18      	it	ne
 808a5a0:	4249      	negne	r1, r1
 808a5a2:	ea92 0f03 	teq	r2, r3
 808a5a6:	d03f      	beq.n	808a628 <__addsf3+0xd8>
 808a5a8:	f1a2 0201 	sub.w	r2, r2, #1
 808a5ac:	fa41 fc03 	asr.w	ip, r1, r3
 808a5b0:	eb10 000c 	adds.w	r0, r0, ip
 808a5b4:	f1c3 0320 	rsb	r3, r3, #32
 808a5b8:	fa01 f103 	lsl.w	r1, r1, r3
 808a5bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a5c0:	d502      	bpl.n	808a5c8 <__addsf3+0x78>
 808a5c2:	4249      	negs	r1, r1
 808a5c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808a5c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808a5cc:	d313      	bcc.n	808a5f6 <__addsf3+0xa6>
 808a5ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808a5d2:	d306      	bcc.n	808a5e2 <__addsf3+0x92>
 808a5d4:	0840      	lsrs	r0, r0, #1
 808a5d6:	ea4f 0131 	mov.w	r1, r1, rrx
 808a5da:	f102 0201 	add.w	r2, r2, #1
 808a5de:	2afe      	cmp	r2, #254	; 0xfe
 808a5e0:	d251      	bcs.n	808a686 <__addsf3+0x136>
 808a5e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808a5e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a5ea:	bf08      	it	eq
 808a5ec:	f020 0001 	biceq.w	r0, r0, #1
 808a5f0:	ea40 0003 	orr.w	r0, r0, r3
 808a5f4:	4770      	bx	lr
 808a5f6:	0049      	lsls	r1, r1, #1
 808a5f8:	eb40 0000 	adc.w	r0, r0, r0
 808a5fc:	3a01      	subs	r2, #1
 808a5fe:	bf28      	it	cs
 808a600:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 808a604:	d2ed      	bcs.n	808a5e2 <__addsf3+0x92>
 808a606:	fab0 fc80 	clz	ip, r0
 808a60a:	f1ac 0c08 	sub.w	ip, ip, #8
 808a60e:	ebb2 020c 	subs.w	r2, r2, ip
 808a612:	fa00 f00c 	lsl.w	r0, r0, ip
 808a616:	bfaa      	itet	ge
 808a618:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808a61c:	4252      	neglt	r2, r2
 808a61e:	4318      	orrge	r0, r3
 808a620:	bfbc      	itt	lt
 808a622:	40d0      	lsrlt	r0, r2
 808a624:	4318      	orrlt	r0, r3
 808a626:	4770      	bx	lr
 808a628:	f092 0f00 	teq	r2, #0
 808a62c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808a630:	bf06      	itte	eq
 808a632:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808a636:	3201      	addeq	r2, #1
 808a638:	3b01      	subne	r3, #1
 808a63a:	e7b5      	b.n	808a5a8 <__addsf3+0x58>
 808a63c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a640:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a644:	bf18      	it	ne
 808a646:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a64a:	d021      	beq.n	808a690 <__addsf3+0x140>
 808a64c:	ea92 0f03 	teq	r2, r3
 808a650:	d004      	beq.n	808a65c <__addsf3+0x10c>
 808a652:	f092 0f00 	teq	r2, #0
 808a656:	bf08      	it	eq
 808a658:	4608      	moveq	r0, r1
 808a65a:	4770      	bx	lr
 808a65c:	ea90 0f01 	teq	r0, r1
 808a660:	bf1c      	itt	ne
 808a662:	2000      	movne	r0, #0
 808a664:	4770      	bxne	lr
 808a666:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808a66a:	d104      	bne.n	808a676 <__addsf3+0x126>
 808a66c:	0040      	lsls	r0, r0, #1
 808a66e:	bf28      	it	cs
 808a670:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808a674:	4770      	bx	lr
 808a676:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808a67a:	bf3c      	itt	cc
 808a67c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808a680:	4770      	bxcc	lr
 808a682:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a686:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808a68a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a68e:	4770      	bx	lr
 808a690:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808a694:	bf16      	itet	ne
 808a696:	4608      	movne	r0, r1
 808a698:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808a69c:	4601      	movne	r1, r0
 808a69e:	0242      	lsls	r2, r0, #9
 808a6a0:	bf06      	itte	eq
 808a6a2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808a6a6:	ea90 0f01 	teqeq	r0, r1
 808a6aa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808a6ae:	4770      	bx	lr

0808a6b0 <__aeabi_ui2f>:
 808a6b0:	f04f 0300 	mov.w	r3, #0
 808a6b4:	e004      	b.n	808a6c0 <__aeabi_i2f+0x8>
 808a6b6:	bf00      	nop

0808a6b8 <__aeabi_i2f>:
 808a6b8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808a6bc:	bf48      	it	mi
 808a6be:	4240      	negmi	r0, r0
 808a6c0:	ea5f 0c00 	movs.w	ip, r0
 808a6c4:	bf08      	it	eq
 808a6c6:	4770      	bxeq	lr
 808a6c8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808a6cc:	4601      	mov	r1, r0
 808a6ce:	f04f 0000 	mov.w	r0, #0
 808a6d2:	e01c      	b.n	808a70e <__aeabi_l2f+0x2a>

0808a6d4 <__aeabi_ul2f>:
 808a6d4:	ea50 0201 	orrs.w	r2, r0, r1
 808a6d8:	bf08      	it	eq
 808a6da:	4770      	bxeq	lr
 808a6dc:	f04f 0300 	mov.w	r3, #0
 808a6e0:	e00a      	b.n	808a6f8 <__aeabi_l2f+0x14>
 808a6e2:	bf00      	nop

0808a6e4 <__aeabi_l2f>:
 808a6e4:	ea50 0201 	orrs.w	r2, r0, r1
 808a6e8:	bf08      	it	eq
 808a6ea:	4770      	bxeq	lr
 808a6ec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808a6f0:	d502      	bpl.n	808a6f8 <__aeabi_l2f+0x14>
 808a6f2:	4240      	negs	r0, r0
 808a6f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a6f8:	ea5f 0c01 	movs.w	ip, r1
 808a6fc:	bf02      	ittt	eq
 808a6fe:	4684      	moveq	ip, r0
 808a700:	4601      	moveq	r1, r0
 808a702:	2000      	moveq	r0, #0
 808a704:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808a708:	bf08      	it	eq
 808a70a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808a70e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808a712:	fabc f28c 	clz	r2, ip
 808a716:	3a08      	subs	r2, #8
 808a718:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808a71c:	db10      	blt.n	808a740 <__aeabi_l2f+0x5c>
 808a71e:	fa01 fc02 	lsl.w	ip, r1, r2
 808a722:	4463      	add	r3, ip
 808a724:	fa00 fc02 	lsl.w	ip, r0, r2
 808a728:	f1c2 0220 	rsb	r2, r2, #32
 808a72c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808a730:	fa20 f202 	lsr.w	r2, r0, r2
 808a734:	eb43 0002 	adc.w	r0, r3, r2
 808a738:	bf08      	it	eq
 808a73a:	f020 0001 	biceq.w	r0, r0, #1
 808a73e:	4770      	bx	lr
 808a740:	f102 0220 	add.w	r2, r2, #32
 808a744:	fa01 fc02 	lsl.w	ip, r1, r2
 808a748:	f1c2 0220 	rsb	r2, r2, #32
 808a74c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808a750:	fa21 f202 	lsr.w	r2, r1, r2
 808a754:	eb43 0002 	adc.w	r0, r3, r2
 808a758:	bf08      	it	eq
 808a75a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a75e:	4770      	bx	lr

0808a760 <__aeabi_fmul>:
 808a760:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a764:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a768:	bf1e      	ittt	ne
 808a76a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a76e:	ea92 0f0c 	teqne	r2, ip
 808a772:	ea93 0f0c 	teqne	r3, ip
 808a776:	d06f      	beq.n	808a858 <__aeabi_fmul+0xf8>
 808a778:	441a      	add	r2, r3
 808a77a:	ea80 0c01 	eor.w	ip, r0, r1
 808a77e:	0240      	lsls	r0, r0, #9
 808a780:	bf18      	it	ne
 808a782:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808a786:	d01e      	beq.n	808a7c6 <__aeabi_fmul+0x66>
 808a788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808a78c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808a790:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808a794:	fba0 3101 	umull	r3, r1, r0, r1
 808a798:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a79c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808a7a0:	bf3e      	ittt	cc
 808a7a2:	0049      	lslcc	r1, r1, #1
 808a7a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808a7a8:	005b      	lslcc	r3, r3, #1
 808a7aa:	ea40 0001 	orr.w	r0, r0, r1
 808a7ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808a7b2:	2afd      	cmp	r2, #253	; 0xfd
 808a7b4:	d81d      	bhi.n	808a7f2 <__aeabi_fmul+0x92>
 808a7b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808a7ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a7be:	bf08      	it	eq
 808a7c0:	f020 0001 	biceq.w	r0, r0, #1
 808a7c4:	4770      	bx	lr
 808a7c6:	f090 0f00 	teq	r0, #0
 808a7ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a7ce:	bf08      	it	eq
 808a7d0:	0249      	lsleq	r1, r1, #9
 808a7d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a7d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808a7da:	3a7f      	subs	r2, #127	; 0x7f
 808a7dc:	bfc2      	ittt	gt
 808a7de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a7e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a7e6:	4770      	bxgt	lr
 808a7e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a7ec:	f04f 0300 	mov.w	r3, #0
 808a7f0:	3a01      	subs	r2, #1
 808a7f2:	dc5d      	bgt.n	808a8b0 <__aeabi_fmul+0x150>
 808a7f4:	f112 0f19 	cmn.w	r2, #25
 808a7f8:	bfdc      	itt	le
 808a7fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808a7fe:	4770      	bxle	lr
 808a800:	f1c2 0200 	rsb	r2, r2, #0
 808a804:	0041      	lsls	r1, r0, #1
 808a806:	fa21 f102 	lsr.w	r1, r1, r2
 808a80a:	f1c2 0220 	rsb	r2, r2, #32
 808a80e:	fa00 fc02 	lsl.w	ip, r0, r2
 808a812:	ea5f 0031 	movs.w	r0, r1, rrx
 808a816:	f140 0000 	adc.w	r0, r0, #0
 808a81a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808a81e:	bf08      	it	eq
 808a820:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a824:	4770      	bx	lr
 808a826:	f092 0f00 	teq	r2, #0
 808a82a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a82e:	bf02      	ittt	eq
 808a830:	0040      	lsleq	r0, r0, #1
 808a832:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a836:	3a01      	subeq	r2, #1
 808a838:	d0f9      	beq.n	808a82e <__aeabi_fmul+0xce>
 808a83a:	ea40 000c 	orr.w	r0, r0, ip
 808a83e:	f093 0f00 	teq	r3, #0
 808a842:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a846:	bf02      	ittt	eq
 808a848:	0049      	lsleq	r1, r1, #1
 808a84a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a84e:	3b01      	subeq	r3, #1
 808a850:	d0f9      	beq.n	808a846 <__aeabi_fmul+0xe6>
 808a852:	ea41 010c 	orr.w	r1, r1, ip
 808a856:	e78f      	b.n	808a778 <__aeabi_fmul+0x18>
 808a858:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a85c:	ea92 0f0c 	teq	r2, ip
 808a860:	bf18      	it	ne
 808a862:	ea93 0f0c 	teqne	r3, ip
 808a866:	d00a      	beq.n	808a87e <__aeabi_fmul+0x11e>
 808a868:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a86c:	bf18      	it	ne
 808a86e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808a872:	d1d8      	bne.n	808a826 <__aeabi_fmul+0xc6>
 808a874:	ea80 0001 	eor.w	r0, r0, r1
 808a878:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a87c:	4770      	bx	lr
 808a87e:	f090 0f00 	teq	r0, #0
 808a882:	bf17      	itett	ne
 808a884:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808a888:	4608      	moveq	r0, r1
 808a88a:	f091 0f00 	teqne	r1, #0
 808a88e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808a892:	d014      	beq.n	808a8be <__aeabi_fmul+0x15e>
 808a894:	ea92 0f0c 	teq	r2, ip
 808a898:	d101      	bne.n	808a89e <__aeabi_fmul+0x13e>
 808a89a:	0242      	lsls	r2, r0, #9
 808a89c:	d10f      	bne.n	808a8be <__aeabi_fmul+0x15e>
 808a89e:	ea93 0f0c 	teq	r3, ip
 808a8a2:	d103      	bne.n	808a8ac <__aeabi_fmul+0x14c>
 808a8a4:	024b      	lsls	r3, r1, #9
 808a8a6:	bf18      	it	ne
 808a8a8:	4608      	movne	r0, r1
 808a8aa:	d108      	bne.n	808a8be <__aeabi_fmul+0x15e>
 808a8ac:	ea80 0001 	eor.w	r0, r0, r1
 808a8b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a8b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a8b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a8bc:	4770      	bx	lr
 808a8be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a8c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808a8c6:	4770      	bx	lr

0808a8c8 <__aeabi_fdiv>:
 808a8c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a8cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a8d0:	bf1e      	ittt	ne
 808a8d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a8d6:	ea92 0f0c 	teqne	r2, ip
 808a8da:	ea93 0f0c 	teqne	r3, ip
 808a8de:	d069      	beq.n	808a9b4 <__aeabi_fdiv+0xec>
 808a8e0:	eba2 0203 	sub.w	r2, r2, r3
 808a8e4:	ea80 0c01 	eor.w	ip, r0, r1
 808a8e8:	0249      	lsls	r1, r1, #9
 808a8ea:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808a8ee:	d037      	beq.n	808a960 <__aeabi_fdiv+0x98>
 808a8f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808a8f4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808a8f8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808a8fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a900:	428b      	cmp	r3, r1
 808a902:	bf38      	it	cc
 808a904:	005b      	lslcc	r3, r3, #1
 808a906:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808a90a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808a90e:	428b      	cmp	r3, r1
 808a910:	bf24      	itt	cs
 808a912:	1a5b      	subcs	r3, r3, r1
 808a914:	ea40 000c 	orrcs.w	r0, r0, ip
 808a918:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808a91c:	bf24      	itt	cs
 808a91e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808a922:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a926:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808a92a:	bf24      	itt	cs
 808a92c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808a930:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a934:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808a938:	bf24      	itt	cs
 808a93a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808a93e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a942:	011b      	lsls	r3, r3, #4
 808a944:	bf18      	it	ne
 808a946:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808a94a:	d1e0      	bne.n	808a90e <__aeabi_fdiv+0x46>
 808a94c:	2afd      	cmp	r2, #253	; 0xfd
 808a94e:	f63f af50 	bhi.w	808a7f2 <__aeabi_fmul+0x92>
 808a952:	428b      	cmp	r3, r1
 808a954:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a958:	bf08      	it	eq
 808a95a:	f020 0001 	biceq.w	r0, r0, #1
 808a95e:	4770      	bx	lr
 808a960:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a964:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a968:	327f      	adds	r2, #127	; 0x7f
 808a96a:	bfc2      	ittt	gt
 808a96c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a970:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a974:	4770      	bxgt	lr
 808a976:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a97a:	f04f 0300 	mov.w	r3, #0
 808a97e:	3a01      	subs	r2, #1
 808a980:	e737      	b.n	808a7f2 <__aeabi_fmul+0x92>
 808a982:	f092 0f00 	teq	r2, #0
 808a986:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a98a:	bf02      	ittt	eq
 808a98c:	0040      	lsleq	r0, r0, #1
 808a98e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a992:	3a01      	subeq	r2, #1
 808a994:	d0f9      	beq.n	808a98a <__aeabi_fdiv+0xc2>
 808a996:	ea40 000c 	orr.w	r0, r0, ip
 808a99a:	f093 0f00 	teq	r3, #0
 808a99e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a9a2:	bf02      	ittt	eq
 808a9a4:	0049      	lsleq	r1, r1, #1
 808a9a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a9aa:	3b01      	subeq	r3, #1
 808a9ac:	d0f9      	beq.n	808a9a2 <__aeabi_fdiv+0xda>
 808a9ae:	ea41 010c 	orr.w	r1, r1, ip
 808a9b2:	e795      	b.n	808a8e0 <__aeabi_fdiv+0x18>
 808a9b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a9b8:	ea92 0f0c 	teq	r2, ip
 808a9bc:	d108      	bne.n	808a9d0 <__aeabi_fdiv+0x108>
 808a9be:	0242      	lsls	r2, r0, #9
 808a9c0:	f47f af7d 	bne.w	808a8be <__aeabi_fmul+0x15e>
 808a9c4:	ea93 0f0c 	teq	r3, ip
 808a9c8:	f47f af70 	bne.w	808a8ac <__aeabi_fmul+0x14c>
 808a9cc:	4608      	mov	r0, r1
 808a9ce:	e776      	b.n	808a8be <__aeabi_fmul+0x15e>
 808a9d0:	ea93 0f0c 	teq	r3, ip
 808a9d4:	d104      	bne.n	808a9e0 <__aeabi_fdiv+0x118>
 808a9d6:	024b      	lsls	r3, r1, #9
 808a9d8:	f43f af4c 	beq.w	808a874 <__aeabi_fmul+0x114>
 808a9dc:	4608      	mov	r0, r1
 808a9de:	e76e      	b.n	808a8be <__aeabi_fmul+0x15e>
 808a9e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a9e4:	bf18      	it	ne
 808a9e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808a9ea:	d1ca      	bne.n	808a982 <__aeabi_fdiv+0xba>
 808a9ec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808a9f0:	f47f af5c 	bne.w	808a8ac <__aeabi_fmul+0x14c>
 808a9f4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808a9f8:	f47f af3c 	bne.w	808a874 <__aeabi_fmul+0x114>
 808a9fc:	e75f      	b.n	808a8be <__aeabi_fmul+0x15e>
 808a9fe:	bf00      	nop

0808aa00 <__gesf2>:
 808aa00:	f04f 3cff 	mov.w	ip, #4294967295
 808aa04:	e006      	b.n	808aa14 <__cmpsf2+0x4>
 808aa06:	bf00      	nop

0808aa08 <__lesf2>:
 808aa08:	f04f 0c01 	mov.w	ip, #1
 808aa0c:	e002      	b.n	808aa14 <__cmpsf2+0x4>
 808aa0e:	bf00      	nop

0808aa10 <__cmpsf2>:
 808aa10:	f04f 0c01 	mov.w	ip, #1
 808aa14:	f84d cd04 	str.w	ip, [sp, #-4]!
 808aa18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808aa1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808aa20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808aa24:	bf18      	it	ne
 808aa26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808aa2a:	d011      	beq.n	808aa50 <__cmpsf2+0x40>
 808aa2c:	b001      	add	sp, #4
 808aa2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808aa32:	bf18      	it	ne
 808aa34:	ea90 0f01 	teqne	r0, r1
 808aa38:	bf58      	it	pl
 808aa3a:	ebb2 0003 	subspl.w	r0, r2, r3
 808aa3e:	bf88      	it	hi
 808aa40:	17c8      	asrhi	r0, r1, #31
 808aa42:	bf38      	it	cc
 808aa44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808aa48:	bf18      	it	ne
 808aa4a:	f040 0001 	orrne.w	r0, r0, #1
 808aa4e:	4770      	bx	lr
 808aa50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808aa54:	d102      	bne.n	808aa5c <__cmpsf2+0x4c>
 808aa56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808aa5a:	d105      	bne.n	808aa68 <__cmpsf2+0x58>
 808aa5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808aa60:	d1e4      	bne.n	808aa2c <__cmpsf2+0x1c>
 808aa62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808aa66:	d0e1      	beq.n	808aa2c <__cmpsf2+0x1c>
 808aa68:	f85d 0b04 	ldr.w	r0, [sp], #4
 808aa6c:	4770      	bx	lr
 808aa6e:	bf00      	nop

0808aa70 <__aeabi_cfrcmple>:
 808aa70:	4684      	mov	ip, r0
 808aa72:	4608      	mov	r0, r1
 808aa74:	4661      	mov	r1, ip
 808aa76:	e7ff      	b.n	808aa78 <__aeabi_cfcmpeq>

0808aa78 <__aeabi_cfcmpeq>:
 808aa78:	b50f      	push	{r0, r1, r2, r3, lr}
 808aa7a:	f7ff ffc9 	bl	808aa10 <__cmpsf2>
 808aa7e:	2800      	cmp	r0, #0
 808aa80:	bf48      	it	mi
 808aa82:	f110 0f00 	cmnmi.w	r0, #0
 808aa86:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808aa88 <__aeabi_fcmpeq>:
 808aa88:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aa8c:	f7ff fff4 	bl	808aa78 <__aeabi_cfcmpeq>
 808aa90:	bf0c      	ite	eq
 808aa92:	2001      	moveq	r0, #1
 808aa94:	2000      	movne	r0, #0
 808aa96:	f85d fb08 	ldr.w	pc, [sp], #8
 808aa9a:	bf00      	nop

0808aa9c <__aeabi_fcmplt>:
 808aa9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aaa0:	f7ff ffea 	bl	808aa78 <__aeabi_cfcmpeq>
 808aaa4:	bf34      	ite	cc
 808aaa6:	2001      	movcc	r0, #1
 808aaa8:	2000      	movcs	r0, #0
 808aaaa:	f85d fb08 	ldr.w	pc, [sp], #8
 808aaae:	bf00      	nop

0808aab0 <__aeabi_fcmple>:
 808aab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aab4:	f7ff ffe0 	bl	808aa78 <__aeabi_cfcmpeq>
 808aab8:	bf94      	ite	ls
 808aaba:	2001      	movls	r0, #1
 808aabc:	2000      	movhi	r0, #0
 808aabe:	f85d fb08 	ldr.w	pc, [sp], #8
 808aac2:	bf00      	nop

0808aac4 <__aeabi_fcmpge>:
 808aac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aac8:	f7ff ffd2 	bl	808aa70 <__aeabi_cfrcmple>
 808aacc:	bf94      	ite	ls
 808aace:	2001      	movls	r0, #1
 808aad0:	2000      	movhi	r0, #0
 808aad2:	f85d fb08 	ldr.w	pc, [sp], #8
 808aad6:	bf00      	nop

0808aad8 <__aeabi_fcmpgt>:
 808aad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aadc:	f7ff ffc8 	bl	808aa70 <__aeabi_cfrcmple>
 808aae0:	bf34      	ite	cc
 808aae2:	2001      	movcc	r0, #1
 808aae4:	2000      	movcs	r0, #0
 808aae6:	f85d fb08 	ldr.w	pc, [sp], #8
 808aaea:	bf00      	nop

0808aaec <__aeabi_f2iz>:
 808aaec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808aaf0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808aaf4:	d30f      	bcc.n	808ab16 <__aeabi_f2iz+0x2a>
 808aaf6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808aafa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808aafe:	d90d      	bls.n	808ab1c <__aeabi_f2iz+0x30>
 808ab00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808ab04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808ab08:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808ab0c:	fa23 f002 	lsr.w	r0, r3, r2
 808ab10:	bf18      	it	ne
 808ab12:	4240      	negne	r0, r0
 808ab14:	4770      	bx	lr
 808ab16:	f04f 0000 	mov.w	r0, #0
 808ab1a:	4770      	bx	lr
 808ab1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808ab20:	d101      	bne.n	808ab26 <__aeabi_f2iz+0x3a>
 808ab22:	0242      	lsls	r2, r0, #9
 808ab24:	d105      	bne.n	808ab32 <__aeabi_f2iz+0x46>
 808ab26:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808ab2a:	bf08      	it	eq
 808ab2c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808ab30:	4770      	bx	lr
 808ab32:	f04f 0000 	mov.w	r0, #0
 808ab36:	4770      	bx	lr

0808ab38 <__aeabi_ldivmod>:
 808ab38:	b97b      	cbnz	r3, 808ab5a <__aeabi_ldivmod+0x22>
 808ab3a:	b972      	cbnz	r2, 808ab5a <__aeabi_ldivmod+0x22>
 808ab3c:	2900      	cmp	r1, #0
 808ab3e:	bfbe      	ittt	lt
 808ab40:	2000      	movlt	r0, #0
 808ab42:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808ab46:	e006      	blt.n	808ab56 <__aeabi_ldivmod+0x1e>
 808ab48:	bf08      	it	eq
 808ab4a:	2800      	cmpeq	r0, #0
 808ab4c:	bf1c      	itt	ne
 808ab4e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808ab52:	f04f 30ff 	movne.w	r0, #4294967295
 808ab56:	f000 b8a9 	b.w	808acac <__aeabi_idiv0>
 808ab5a:	f1ad 0c08 	sub.w	ip, sp, #8
 808ab5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808ab62:	2900      	cmp	r1, #0
 808ab64:	db09      	blt.n	808ab7a <__aeabi_ldivmod+0x42>
 808ab66:	2b00      	cmp	r3, #0
 808ab68:	db1a      	blt.n	808aba0 <__aeabi_ldivmod+0x68>
 808ab6a:	f7f5 fa59 	bl	8080020 <__udivmoddi4>
 808ab6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ab72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ab76:	b004      	add	sp, #16
 808ab78:	4770      	bx	lr
 808ab7a:	4240      	negs	r0, r0
 808ab7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ab80:	2b00      	cmp	r3, #0
 808ab82:	db1b      	blt.n	808abbc <__aeabi_ldivmod+0x84>
 808ab84:	f7f5 fa4c 	bl	8080020 <__udivmoddi4>
 808ab88:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ab8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ab90:	b004      	add	sp, #16
 808ab92:	4240      	negs	r0, r0
 808ab94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ab98:	4252      	negs	r2, r2
 808ab9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ab9e:	4770      	bx	lr
 808aba0:	4252      	negs	r2, r2
 808aba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808aba6:	f7f5 fa3b 	bl	8080020 <__udivmoddi4>
 808abaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 808abae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808abb2:	b004      	add	sp, #16
 808abb4:	4240      	negs	r0, r0
 808abb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808abba:	4770      	bx	lr
 808abbc:	4252      	negs	r2, r2
 808abbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808abc2:	f7f5 fa2d 	bl	8080020 <__udivmoddi4>
 808abc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 808abca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808abce:	b004      	add	sp, #16
 808abd0:	4252      	negs	r2, r2
 808abd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808abd6:	4770      	bx	lr

0808abd8 <__aeabi_uldivmod>:
 808abd8:	b953      	cbnz	r3, 808abf0 <__aeabi_uldivmod+0x18>
 808abda:	b94a      	cbnz	r2, 808abf0 <__aeabi_uldivmod+0x18>
 808abdc:	2900      	cmp	r1, #0
 808abde:	bf08      	it	eq
 808abe0:	2800      	cmpeq	r0, #0
 808abe2:	bf1c      	itt	ne
 808abe4:	f04f 31ff 	movne.w	r1, #4294967295
 808abe8:	f04f 30ff 	movne.w	r0, #4294967295
 808abec:	f000 b85e 	b.w	808acac <__aeabi_idiv0>
 808abf0:	f1ad 0c08 	sub.w	ip, sp, #8
 808abf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808abf8:	f7f5 fa12 	bl	8080020 <__udivmoddi4>
 808abfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ac00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ac04:	b004      	add	sp, #16
 808ac06:	4770      	bx	lr

0808ac08 <__aeabi_f2lz>:
 808ac08:	b510      	push	{r4, lr}
 808ac0a:	2100      	movs	r1, #0
 808ac0c:	4604      	mov	r4, r0
 808ac0e:	f7ff ff45 	bl	808aa9c <__aeabi_fcmplt>
 808ac12:	b920      	cbnz	r0, 808ac1e <__aeabi_f2lz+0x16>
 808ac14:	4620      	mov	r0, r4
 808ac16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808ac1a:	f000 b809 	b.w	808ac30 <__aeabi_f2ulz>
 808ac1e:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 808ac22:	f000 f805 	bl	808ac30 <__aeabi_f2ulz>
 808ac26:	4240      	negs	r0, r0
 808ac28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ac2c:	bd10      	pop	{r4, pc}
 808ac2e:	bf00      	nop

0808ac30 <__aeabi_f2ulz>:
 808ac30:	b5d0      	push	{r4, r6, r7, lr}
 808ac32:	f7ff f8e7 	bl	8089e04 <__aeabi_f2d>
 808ac36:	2200      	movs	r2, #0
 808ac38:	4b0b      	ldr	r3, [pc, #44]	; (808ac68 <__aeabi_f2ulz+0x38>)
 808ac3a:	4606      	mov	r6, r0
 808ac3c:	460f      	mov	r7, r1
 808ac3e:	f7ff f939 	bl	8089eb4 <__aeabi_dmul>
 808ac42:	f7ff fc0f 	bl	808a464 <__aeabi_d2uiz>
 808ac46:	4604      	mov	r4, r0
 808ac48:	f7ff f8ba 	bl	8089dc0 <__aeabi_ui2d>
 808ac4c:	2200      	movs	r2, #0
 808ac4e:	4b07      	ldr	r3, [pc, #28]	; (808ac6c <__aeabi_f2ulz+0x3c>)
 808ac50:	f7ff f930 	bl	8089eb4 <__aeabi_dmul>
 808ac54:	4602      	mov	r2, r0
 808ac56:	460b      	mov	r3, r1
 808ac58:	4630      	mov	r0, r6
 808ac5a:	4639      	mov	r1, r7
 808ac5c:	f7fe ff72 	bl	8089b44 <__aeabi_dsub>
 808ac60:	f7ff fc00 	bl	808a464 <__aeabi_d2uiz>
 808ac64:	4621      	mov	r1, r4
 808ac66:	bdd0      	pop	{r4, r6, r7, pc}
 808ac68:	3df00000 	.word	0x3df00000
 808ac6c:	41f00000 	.word	0x41f00000

0808ac70 <__aeabi_d2ulz>:
 808ac70:	b5d0      	push	{r4, r6, r7, lr}
 808ac72:	2200      	movs	r2, #0
 808ac74:	4b0b      	ldr	r3, [pc, #44]	; (808aca4 <__aeabi_d2ulz+0x34>)
 808ac76:	4606      	mov	r6, r0
 808ac78:	460f      	mov	r7, r1
 808ac7a:	f7ff f91b 	bl	8089eb4 <__aeabi_dmul>
 808ac7e:	f7ff fbf1 	bl	808a464 <__aeabi_d2uiz>
 808ac82:	4604      	mov	r4, r0
 808ac84:	f7ff f89c 	bl	8089dc0 <__aeabi_ui2d>
 808ac88:	2200      	movs	r2, #0
 808ac8a:	4b07      	ldr	r3, [pc, #28]	; (808aca8 <__aeabi_d2ulz+0x38>)
 808ac8c:	f7ff f912 	bl	8089eb4 <__aeabi_dmul>
 808ac90:	4602      	mov	r2, r0
 808ac92:	460b      	mov	r3, r1
 808ac94:	4630      	mov	r0, r6
 808ac96:	4639      	mov	r1, r7
 808ac98:	f7fe ff54 	bl	8089b44 <__aeabi_dsub>
 808ac9c:	f7ff fbe2 	bl	808a464 <__aeabi_d2uiz>
 808aca0:	4621      	mov	r1, r4
 808aca2:	bdd0      	pop	{r4, r6, r7, pc}
 808aca4:	3df00000 	.word	0x3df00000
 808aca8:	41f00000 	.word	0x41f00000

0808acac <__aeabi_idiv0>:
 808acac:	4770      	bx	lr
 808acae:	bf00      	nop

0808acb0 <asctime_r>:
 808acb0:	b510      	push	{r4, lr}
 808acb2:	460c      	mov	r4, r1
 808acb4:	6941      	ldr	r1, [r0, #20]
 808acb6:	b086      	sub	sp, #24
 808acb8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808acbc:	6903      	ldr	r3, [r0, #16]
 808acbe:	6982      	ldr	r2, [r0, #24]
 808acc0:	9104      	str	r1, [sp, #16]
 808acc2:	6801      	ldr	r1, [r0, #0]
 808acc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808acc8:	9103      	str	r1, [sp, #12]
 808acca:	6841      	ldr	r1, [r0, #4]
 808accc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808acd0:	9102      	str	r1, [sp, #8]
 808acd2:	6881      	ldr	r1, [r0, #8]
 808acd4:	9101      	str	r1, [sp, #4]
 808acd6:	68c1      	ldr	r1, [r0, #12]
 808acd8:	4620      	mov	r0, r4
 808acda:	9100      	str	r1, [sp, #0]
 808acdc:	4904      	ldr	r1, [pc, #16]	; (808acf0 <asctime_r+0x40>)
 808acde:	440b      	add	r3, r1
 808ace0:	4904      	ldr	r1, [pc, #16]	; (808acf4 <asctime_r+0x44>)
 808ace2:	440a      	add	r2, r1
 808ace4:	4904      	ldr	r1, [pc, #16]	; (808acf8 <asctime_r+0x48>)
 808ace6:	f7fc fd45 	bl	8087774 <siprintf>
 808acea:	4620      	mov	r0, r4
 808acec:	b006      	add	sp, #24
 808acee:	bd10      	pop	{r4, pc}
 808acf0:	0808ed72 	.word	0x0808ed72
 808acf4:	0808ed5d 	.word	0x0808ed5d
 808acf8:	0808ed3d 	.word	0x0808ed3d

0808acfc <atof>:
 808acfc:	2100      	movs	r1, #0
 808acfe:	f000 bf0b 	b.w	808bb18 <strtod>

0808ad02 <atol>:
 808ad02:	220a      	movs	r2, #10
 808ad04:	2100      	movs	r1, #0
 808ad06:	f000 bf8d 	b.w	808bc24 <strtol>
	...

0808ad0c <__cxa_atexit>:
 808ad0c:	b510      	push	{r4, lr}
 808ad0e:	4604      	mov	r4, r0
 808ad10:	4804      	ldr	r0, [pc, #16]	; (808ad24 <__cxa_atexit+0x18>)
 808ad12:	4613      	mov	r3, r2
 808ad14:	b120      	cbz	r0, 808ad20 <__cxa_atexit+0x14>
 808ad16:	460a      	mov	r2, r1
 808ad18:	2002      	movs	r0, #2
 808ad1a:	4621      	mov	r1, r4
 808ad1c:	f3af 8000 	nop.w
 808ad20:	bd10      	pop	{r4, pc}
 808ad22:	bf00      	nop
 808ad24:	00000000 	.word	0x00000000

0808ad28 <memcmp>:
 808ad28:	b530      	push	{r4, r5, lr}
 808ad2a:	2400      	movs	r4, #0
 808ad2c:	3901      	subs	r1, #1
 808ad2e:	42a2      	cmp	r2, r4
 808ad30:	d101      	bne.n	808ad36 <memcmp+0xe>
 808ad32:	2000      	movs	r0, #0
 808ad34:	e005      	b.n	808ad42 <memcmp+0x1a>
 808ad36:	5d03      	ldrb	r3, [r0, r4]
 808ad38:	3401      	adds	r4, #1
 808ad3a:	5d0d      	ldrb	r5, [r1, r4]
 808ad3c:	42ab      	cmp	r3, r5
 808ad3e:	d0f6      	beq.n	808ad2e <memcmp+0x6>
 808ad40:	1b58      	subs	r0, r3, r5
 808ad42:	bd30      	pop	{r4, r5, pc}

0808ad44 <memcpy>:
 808ad44:	440a      	add	r2, r1
 808ad46:	4291      	cmp	r1, r2
 808ad48:	f100 33ff 	add.w	r3, r0, #4294967295
 808ad4c:	d100      	bne.n	808ad50 <memcpy+0xc>
 808ad4e:	4770      	bx	lr
 808ad50:	b510      	push	{r4, lr}
 808ad52:	f811 4b01 	ldrb.w	r4, [r1], #1
 808ad56:	4291      	cmp	r1, r2
 808ad58:	f803 4f01 	strb.w	r4, [r3, #1]!
 808ad5c:	d1f9      	bne.n	808ad52 <memcpy+0xe>
 808ad5e:	bd10      	pop	{r4, pc}

0808ad60 <memmove>:
 808ad60:	4288      	cmp	r0, r1
 808ad62:	b510      	push	{r4, lr}
 808ad64:	eb01 0402 	add.w	r4, r1, r2
 808ad68:	d902      	bls.n	808ad70 <memmove+0x10>
 808ad6a:	4284      	cmp	r4, r0
 808ad6c:	4623      	mov	r3, r4
 808ad6e:	d807      	bhi.n	808ad80 <memmove+0x20>
 808ad70:	1e43      	subs	r3, r0, #1
 808ad72:	42a1      	cmp	r1, r4
 808ad74:	d008      	beq.n	808ad88 <memmove+0x28>
 808ad76:	f811 2b01 	ldrb.w	r2, [r1], #1
 808ad7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 808ad7e:	e7f8      	b.n	808ad72 <memmove+0x12>
 808ad80:	4601      	mov	r1, r0
 808ad82:	4402      	add	r2, r0
 808ad84:	428a      	cmp	r2, r1
 808ad86:	d100      	bne.n	808ad8a <memmove+0x2a>
 808ad88:	bd10      	pop	{r4, pc}
 808ad8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808ad8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 808ad92:	e7f7      	b.n	808ad84 <memmove+0x24>

0808ad94 <memset>:
 808ad94:	4603      	mov	r3, r0
 808ad96:	4402      	add	r2, r0
 808ad98:	4293      	cmp	r3, r2
 808ad9a:	d100      	bne.n	808ad9e <memset+0xa>
 808ad9c:	4770      	bx	lr
 808ad9e:	f803 1b01 	strb.w	r1, [r3], #1
 808ada2:	e7f9      	b.n	808ad98 <memset+0x4>

0808ada4 <srand>:
 808ada4:	b538      	push	{r3, r4, r5, lr}
 808ada6:	4b0d      	ldr	r3, [pc, #52]	; (808addc <srand+0x38>)
 808ada8:	4604      	mov	r4, r0
 808adaa:	681d      	ldr	r5, [r3, #0]
 808adac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808adae:	b97b      	cbnz	r3, 808add0 <srand+0x2c>
 808adb0:	2018      	movs	r0, #24
 808adb2:	f7fc fcbf 	bl	8087734 <malloc>
 808adb6:	4a0a      	ldr	r2, [pc, #40]	; (808ade0 <srand+0x3c>)
 808adb8:	4b0a      	ldr	r3, [pc, #40]	; (808ade4 <srand+0x40>)
 808adba:	63a8      	str	r0, [r5, #56]	; 0x38
 808adbc:	e9c0 2300 	strd	r2, r3, [r0]
 808adc0:	4b09      	ldr	r3, [pc, #36]	; (808ade8 <srand+0x44>)
 808adc2:	2201      	movs	r2, #1
 808adc4:	6083      	str	r3, [r0, #8]
 808adc6:	230b      	movs	r3, #11
 808adc8:	8183      	strh	r3, [r0, #12]
 808adca:	2300      	movs	r3, #0
 808adcc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808add0:	2200      	movs	r2, #0
 808add2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 808add4:	611c      	str	r4, [r3, #16]
 808add6:	615a      	str	r2, [r3, #20]
 808add8:	bd38      	pop	{r3, r4, r5, pc}
 808adda:	bf00      	nop
 808addc:	200000d8 	.word	0x200000d8
 808ade0:	abcd330e 	.word	0xabcd330e
 808ade4:	e66d1234 	.word	0xe66d1234
 808ade8:	0005deec 	.word	0x0005deec

0808adec <strchr>:
 808adec:	4603      	mov	r3, r0
 808adee:	b2c9      	uxtb	r1, r1
 808adf0:	4618      	mov	r0, r3
 808adf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 808adf6:	b112      	cbz	r2, 808adfe <strchr+0x12>
 808adf8:	428a      	cmp	r2, r1
 808adfa:	d1f9      	bne.n	808adf0 <strchr+0x4>
 808adfc:	4770      	bx	lr
 808adfe:	2900      	cmp	r1, #0
 808ae00:	bf18      	it	ne
 808ae02:	2000      	movne	r0, #0
 808ae04:	4770      	bx	lr

0808ae06 <strcmp>:
 808ae06:	f810 2b01 	ldrb.w	r2, [r0], #1
 808ae0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 808ae0e:	2a01      	cmp	r2, #1
 808ae10:	bf28      	it	cs
 808ae12:	429a      	cmpcs	r2, r3
 808ae14:	d0f7      	beq.n	808ae06 <strcmp>
 808ae16:	1ad0      	subs	r0, r2, r3
 808ae18:	4770      	bx	lr

0808ae1a <strcpy>:
 808ae1a:	4603      	mov	r3, r0
 808ae1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 808ae20:	f803 2b01 	strb.w	r2, [r3], #1
 808ae24:	2a00      	cmp	r2, #0
 808ae26:	d1f9      	bne.n	808ae1c <strcpy+0x2>
 808ae28:	4770      	bx	lr
	...

0808ae2c <strdup>:
 808ae2c:	4b02      	ldr	r3, [pc, #8]	; (808ae38 <strdup+0xc>)
 808ae2e:	4601      	mov	r1, r0
 808ae30:	6818      	ldr	r0, [r3, #0]
 808ae32:	f000 b803 	b.w	808ae3c <_strdup_r>
 808ae36:	bf00      	nop
 808ae38:	200000d8 	.word	0x200000d8

0808ae3c <_strdup_r>:
 808ae3c:	b570      	push	{r4, r5, r6, lr}
 808ae3e:	4604      	mov	r4, r0
 808ae40:	4608      	mov	r0, r1
 808ae42:	460d      	mov	r5, r1
 808ae44:	f000 f80d 	bl	808ae62 <strlen>
 808ae48:	1c46      	adds	r6, r0, #1
 808ae4a:	4631      	mov	r1, r6
 808ae4c:	4620      	mov	r0, r4
 808ae4e:	f7fc fcb1 	bl	80877b4 <_malloc_r>
 808ae52:	4604      	mov	r4, r0
 808ae54:	b118      	cbz	r0, 808ae5e <_strdup_r+0x22>
 808ae56:	4632      	mov	r2, r6
 808ae58:	4629      	mov	r1, r5
 808ae5a:	f7ff ff73 	bl	808ad44 <memcpy>
 808ae5e:	4620      	mov	r0, r4
 808ae60:	bd70      	pop	{r4, r5, r6, pc}

0808ae62 <strlen>:
 808ae62:	4603      	mov	r3, r0
 808ae64:	f813 2b01 	ldrb.w	r2, [r3], #1
 808ae68:	2a00      	cmp	r2, #0
 808ae6a:	d1fb      	bne.n	808ae64 <strlen+0x2>
 808ae6c:	1a18      	subs	r0, r3, r0
 808ae6e:	3801      	subs	r0, #1
 808ae70:	4770      	bx	lr

0808ae72 <strncmp>:
 808ae72:	b510      	push	{r4, lr}
 808ae74:	b16a      	cbz	r2, 808ae92 <strncmp+0x20>
 808ae76:	3901      	subs	r1, #1
 808ae78:	1884      	adds	r4, r0, r2
 808ae7a:	f810 3b01 	ldrb.w	r3, [r0], #1
 808ae7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 808ae82:	4293      	cmp	r3, r2
 808ae84:	d103      	bne.n	808ae8e <strncmp+0x1c>
 808ae86:	42a0      	cmp	r0, r4
 808ae88:	d001      	beq.n	808ae8e <strncmp+0x1c>
 808ae8a:	2b00      	cmp	r3, #0
 808ae8c:	d1f5      	bne.n	808ae7a <strncmp+0x8>
 808ae8e:	1a98      	subs	r0, r3, r2
 808ae90:	bd10      	pop	{r4, pc}
 808ae92:	4610      	mov	r0, r2
 808ae94:	e7fc      	b.n	808ae90 <strncmp+0x1e>

0808ae96 <strncpy>:
 808ae96:	4603      	mov	r3, r0
 808ae98:	b510      	push	{r4, lr}
 808ae9a:	3901      	subs	r1, #1
 808ae9c:	b132      	cbz	r2, 808aeac <strncpy+0x16>
 808ae9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808aea2:	3a01      	subs	r2, #1
 808aea4:	f803 4b01 	strb.w	r4, [r3], #1
 808aea8:	2c00      	cmp	r4, #0
 808aeaa:	d1f7      	bne.n	808ae9c <strncpy+0x6>
 808aeac:	2100      	movs	r1, #0
 808aeae:	441a      	add	r2, r3
 808aeb0:	4293      	cmp	r3, r2
 808aeb2:	d100      	bne.n	808aeb6 <strncpy+0x20>
 808aeb4:	bd10      	pop	{r4, pc}
 808aeb6:	f803 1b01 	strb.w	r1, [r3], #1
 808aeba:	e7f9      	b.n	808aeb0 <strncpy+0x1a>

0808aebc <strstr>:
 808aebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 808aebe:	780c      	ldrb	r4, [r1, #0]
 808aec0:	b164      	cbz	r4, 808aedc <strstr+0x20>
 808aec2:	4603      	mov	r3, r0
 808aec4:	781a      	ldrb	r2, [r3, #0]
 808aec6:	4618      	mov	r0, r3
 808aec8:	1c5e      	adds	r6, r3, #1
 808aeca:	b90a      	cbnz	r2, 808aed0 <strstr+0x14>
 808aecc:	4610      	mov	r0, r2
 808aece:	e005      	b.n	808aedc <strstr+0x20>
 808aed0:	4294      	cmp	r4, r2
 808aed2:	d108      	bne.n	808aee6 <strstr+0x2a>
 808aed4:	460d      	mov	r5, r1
 808aed6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808aeda:	b902      	cbnz	r2, 808aede <strstr+0x22>
 808aedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808aede:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 808aee2:	4297      	cmp	r7, r2
 808aee4:	d0f7      	beq.n	808aed6 <strstr+0x1a>
 808aee6:	4633      	mov	r3, r6
 808aee8:	e7ec      	b.n	808aec4 <strstr+0x8>

0808aeea <sulp>:
 808aeea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808aeee:	460f      	mov	r7, r1
 808aef0:	4690      	mov	r8, r2
 808aef2:	f001 fd05 	bl	808c900 <__ulp>
 808aef6:	4604      	mov	r4, r0
 808aef8:	460d      	mov	r5, r1
 808aefa:	f1b8 0f00 	cmp.w	r8, #0
 808aefe:	d011      	beq.n	808af24 <sulp+0x3a>
 808af00:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808af04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808af08:	2b00      	cmp	r3, #0
 808af0a:	dd0b      	ble.n	808af24 <sulp+0x3a>
 808af0c:	2400      	movs	r4, #0
 808af0e:	051b      	lsls	r3, r3, #20
 808af10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808af14:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808af18:	4622      	mov	r2, r4
 808af1a:	462b      	mov	r3, r5
 808af1c:	f7fe ffca 	bl	8089eb4 <__aeabi_dmul>
 808af20:	4604      	mov	r4, r0
 808af22:	460d      	mov	r5, r1
 808af24:	4620      	mov	r0, r4
 808af26:	4629      	mov	r1, r5
 808af28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808af2c:	0000      	movs	r0, r0
	...

0808af30 <_strtod_l>:
 808af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808af34:	469b      	mov	fp, r3
 808af36:	2300      	movs	r3, #0
 808af38:	b0a1      	sub	sp, #132	; 0x84
 808af3a:	931c      	str	r3, [sp, #112]	; 0x70
 808af3c:	4ba1      	ldr	r3, [pc, #644]	; (808b1c4 <_strtod_l+0x294>)
 808af3e:	4682      	mov	sl, r0
 808af40:	681f      	ldr	r7, [r3, #0]
 808af42:	460e      	mov	r6, r1
 808af44:	4638      	mov	r0, r7
 808af46:	9217      	str	r2, [sp, #92]	; 0x5c
 808af48:	f7ff ff8b 	bl	808ae62 <strlen>
 808af4c:	f04f 0800 	mov.w	r8, #0
 808af50:	4604      	mov	r4, r0
 808af52:	f04f 0900 	mov.w	r9, #0
 808af56:	961b      	str	r6, [sp, #108]	; 0x6c
 808af58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808af5a:	781a      	ldrb	r2, [r3, #0]
 808af5c:	2a2b      	cmp	r2, #43	; 0x2b
 808af5e:	d04c      	beq.n	808affa <_strtod_l+0xca>
 808af60:	d83a      	bhi.n	808afd8 <_strtod_l+0xa8>
 808af62:	2a0d      	cmp	r2, #13
 808af64:	d833      	bhi.n	808afce <_strtod_l+0x9e>
 808af66:	2a08      	cmp	r2, #8
 808af68:	d833      	bhi.n	808afd2 <_strtod_l+0xa2>
 808af6a:	2a00      	cmp	r2, #0
 808af6c:	d03d      	beq.n	808afea <_strtod_l+0xba>
 808af6e:	2300      	movs	r3, #0
 808af70:	930c      	str	r3, [sp, #48]	; 0x30
 808af72:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 808af74:	782b      	ldrb	r3, [r5, #0]
 808af76:	2b30      	cmp	r3, #48	; 0x30
 808af78:	f040 80af 	bne.w	808b0da <_strtod_l+0x1aa>
 808af7c:	786b      	ldrb	r3, [r5, #1]
 808af7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808af82:	2b58      	cmp	r3, #88	; 0x58
 808af84:	d16c      	bne.n	808b060 <_strtod_l+0x130>
 808af86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808af88:	4650      	mov	r0, sl
 808af8a:	9301      	str	r3, [sp, #4]
 808af8c:	ab1c      	add	r3, sp, #112	; 0x70
 808af8e:	9300      	str	r3, [sp, #0]
 808af90:	4a8d      	ldr	r2, [pc, #564]	; (808b1c8 <_strtod_l+0x298>)
 808af92:	f8cd b008 	str.w	fp, [sp, #8]
 808af96:	ab1d      	add	r3, sp, #116	; 0x74
 808af98:	a91b      	add	r1, sp, #108	; 0x6c
 808af9a:	f000 feb5 	bl	808bd08 <__gethex>
 808af9e:	f010 0607 	ands.w	r6, r0, #7
 808afa2:	4604      	mov	r4, r0
 808afa4:	d005      	beq.n	808afb2 <_strtod_l+0x82>
 808afa6:	2e06      	cmp	r6, #6
 808afa8:	d129      	bne.n	808affe <_strtod_l+0xce>
 808afaa:	2300      	movs	r3, #0
 808afac:	3501      	adds	r5, #1
 808afae:	951b      	str	r5, [sp, #108]	; 0x6c
 808afb0:	930c      	str	r3, [sp, #48]	; 0x30
 808afb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808afb4:	2b00      	cmp	r3, #0
 808afb6:	f040 8596 	bne.w	808bae6 <_strtod_l+0xbb6>
 808afba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808afbc:	b1d3      	cbz	r3, 808aff4 <_strtod_l+0xc4>
 808afbe:	4642      	mov	r2, r8
 808afc0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808afc4:	4610      	mov	r0, r2
 808afc6:	4619      	mov	r1, r3
 808afc8:	b021      	add	sp, #132	; 0x84
 808afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808afce:	2a20      	cmp	r2, #32
 808afd0:	d1cd      	bne.n	808af6e <_strtod_l+0x3e>
 808afd2:	3301      	adds	r3, #1
 808afd4:	931b      	str	r3, [sp, #108]	; 0x6c
 808afd6:	e7bf      	b.n	808af58 <_strtod_l+0x28>
 808afd8:	2a2d      	cmp	r2, #45	; 0x2d
 808afda:	d1c8      	bne.n	808af6e <_strtod_l+0x3e>
 808afdc:	2201      	movs	r2, #1
 808afde:	920c      	str	r2, [sp, #48]	; 0x30
 808afe0:	1c5a      	adds	r2, r3, #1
 808afe2:	921b      	str	r2, [sp, #108]	; 0x6c
 808afe4:	785b      	ldrb	r3, [r3, #1]
 808afe6:	2b00      	cmp	r3, #0
 808afe8:	d1c3      	bne.n	808af72 <_strtod_l+0x42>
 808afea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808afec:	961b      	str	r6, [sp, #108]	; 0x6c
 808afee:	2b00      	cmp	r3, #0
 808aff0:	f040 8577 	bne.w	808bae2 <_strtod_l+0xbb2>
 808aff4:	4642      	mov	r2, r8
 808aff6:	464b      	mov	r3, r9
 808aff8:	e7e4      	b.n	808afc4 <_strtod_l+0x94>
 808affa:	2200      	movs	r2, #0
 808affc:	e7ef      	b.n	808afde <_strtod_l+0xae>
 808affe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808b000:	b13a      	cbz	r2, 808b012 <_strtod_l+0xe2>
 808b002:	2135      	movs	r1, #53	; 0x35
 808b004:	a81e      	add	r0, sp, #120	; 0x78
 808b006:	f001 fd72 	bl	808caee <__copybits>
 808b00a:	4650      	mov	r0, sl
 808b00c:	991c      	ldr	r1, [sp, #112]	; 0x70
 808b00e:	f001 f9ad 	bl	808c36c <_Bfree>
 808b012:	3e01      	subs	r6, #1
 808b014:	2e05      	cmp	r6, #5
 808b016:	d807      	bhi.n	808b028 <_strtod_l+0xf8>
 808b018:	e8df f006 	tbb	[pc, r6]
 808b01c:	1d180b0e 	.word	0x1d180b0e
 808b020:	030e      	.short	0x030e
 808b022:	f04f 0900 	mov.w	r9, #0
 808b026:	46c8      	mov	r8, r9
 808b028:	0721      	lsls	r1, r4, #28
 808b02a:	d5c2      	bpl.n	808afb2 <_strtod_l+0x82>
 808b02c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808b030:	e7bf      	b.n	808afb2 <_strtod_l+0x82>
 808b032:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 808b036:	e7f7      	b.n	808b028 <_strtod_l+0xf8>
 808b038:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 808b03a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 808b03e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808b042:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808b046:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808b04a:	e7ed      	b.n	808b028 <_strtod_l+0xf8>
 808b04c:	f04f 0800 	mov.w	r8, #0
 808b050:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808b1cc <_strtod_l+0x29c>
 808b054:	e7e8      	b.n	808b028 <_strtod_l+0xf8>
 808b056:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808b05a:	f04f 38ff 	mov.w	r8, #4294967295
 808b05e:	e7e3      	b.n	808b028 <_strtod_l+0xf8>
 808b060:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b062:	1c5a      	adds	r2, r3, #1
 808b064:	921b      	str	r2, [sp, #108]	; 0x6c
 808b066:	785b      	ldrb	r3, [r3, #1]
 808b068:	2b30      	cmp	r3, #48	; 0x30
 808b06a:	d0f9      	beq.n	808b060 <_strtod_l+0x130>
 808b06c:	2b00      	cmp	r3, #0
 808b06e:	d0a0      	beq.n	808afb2 <_strtod_l+0x82>
 808b070:	2301      	movs	r3, #1
 808b072:	9307      	str	r3, [sp, #28]
 808b074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b076:	220a      	movs	r2, #10
 808b078:	9308      	str	r3, [sp, #32]
 808b07a:	2300      	movs	r3, #0
 808b07c:	469b      	mov	fp, r3
 808b07e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 808b082:	981b      	ldr	r0, [sp, #108]	; 0x6c
 808b084:	7805      	ldrb	r5, [r0, #0]
 808b086:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 808b08a:	b2d9      	uxtb	r1, r3
 808b08c:	2909      	cmp	r1, #9
 808b08e:	d926      	bls.n	808b0de <_strtod_l+0x1ae>
 808b090:	4622      	mov	r2, r4
 808b092:	4639      	mov	r1, r7
 808b094:	f7ff feed 	bl	808ae72 <strncmp>
 808b098:	2800      	cmp	r0, #0
 808b09a:	d032      	beq.n	808b102 <_strtod_l+0x1d2>
 808b09c:	2000      	movs	r0, #0
 808b09e:	462b      	mov	r3, r5
 808b0a0:	465c      	mov	r4, fp
 808b0a2:	4602      	mov	r2, r0
 808b0a4:	9004      	str	r0, [sp, #16]
 808b0a6:	2b65      	cmp	r3, #101	; 0x65
 808b0a8:	d001      	beq.n	808b0ae <_strtod_l+0x17e>
 808b0aa:	2b45      	cmp	r3, #69	; 0x45
 808b0ac:	d113      	bne.n	808b0d6 <_strtod_l+0x1a6>
 808b0ae:	b91c      	cbnz	r4, 808b0b8 <_strtod_l+0x188>
 808b0b0:	9b07      	ldr	r3, [sp, #28]
 808b0b2:	4303      	orrs	r3, r0
 808b0b4:	d099      	beq.n	808afea <_strtod_l+0xba>
 808b0b6:	2400      	movs	r4, #0
 808b0b8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 808b0ba:	1c73      	adds	r3, r6, #1
 808b0bc:	931b      	str	r3, [sp, #108]	; 0x6c
 808b0be:	7873      	ldrb	r3, [r6, #1]
 808b0c0:	2b2b      	cmp	r3, #43	; 0x2b
 808b0c2:	d078      	beq.n	808b1b6 <_strtod_l+0x286>
 808b0c4:	2b2d      	cmp	r3, #45	; 0x2d
 808b0c6:	d07b      	beq.n	808b1c0 <_strtod_l+0x290>
 808b0c8:	2700      	movs	r7, #0
 808b0ca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808b0ce:	2909      	cmp	r1, #9
 808b0d0:	f240 8082 	bls.w	808b1d8 <_strtod_l+0x2a8>
 808b0d4:	961b      	str	r6, [sp, #108]	; 0x6c
 808b0d6:	2500      	movs	r5, #0
 808b0d8:	e09e      	b.n	808b218 <_strtod_l+0x2e8>
 808b0da:	2300      	movs	r3, #0
 808b0dc:	e7c9      	b.n	808b072 <_strtod_l+0x142>
 808b0de:	f1bb 0f08 	cmp.w	fp, #8
 808b0e2:	bfd5      	itete	le
 808b0e4:	9906      	ldrle	r1, [sp, #24]
 808b0e6:	9905      	ldrgt	r1, [sp, #20]
 808b0e8:	fb02 3301 	mlale	r3, r2, r1, r3
 808b0ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 808b0f0:	f100 0001 	add.w	r0, r0, #1
 808b0f4:	bfd4      	ite	le
 808b0f6:	9306      	strle	r3, [sp, #24]
 808b0f8:	9305      	strgt	r3, [sp, #20]
 808b0fa:	f10b 0b01 	add.w	fp, fp, #1
 808b0fe:	901b      	str	r0, [sp, #108]	; 0x6c
 808b100:	e7bf      	b.n	808b082 <_strtod_l+0x152>
 808b102:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b104:	191a      	adds	r2, r3, r4
 808b106:	921b      	str	r2, [sp, #108]	; 0x6c
 808b108:	5d1b      	ldrb	r3, [r3, r4]
 808b10a:	f1bb 0f00 	cmp.w	fp, #0
 808b10e:	d036      	beq.n	808b17e <_strtod_l+0x24e>
 808b110:	465c      	mov	r4, fp
 808b112:	9004      	str	r0, [sp, #16]
 808b114:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 808b118:	2a09      	cmp	r2, #9
 808b11a:	d912      	bls.n	808b142 <_strtod_l+0x212>
 808b11c:	2201      	movs	r2, #1
 808b11e:	e7c2      	b.n	808b0a6 <_strtod_l+0x176>
 808b120:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b122:	3001      	adds	r0, #1
 808b124:	1c5a      	adds	r2, r3, #1
 808b126:	921b      	str	r2, [sp, #108]	; 0x6c
 808b128:	785b      	ldrb	r3, [r3, #1]
 808b12a:	2b30      	cmp	r3, #48	; 0x30
 808b12c:	d0f8      	beq.n	808b120 <_strtod_l+0x1f0>
 808b12e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808b132:	2a08      	cmp	r2, #8
 808b134:	f200 84dc 	bhi.w	808baf0 <_strtod_l+0xbc0>
 808b138:	9004      	str	r0, [sp, #16]
 808b13a:	2000      	movs	r0, #0
 808b13c:	4604      	mov	r4, r0
 808b13e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 808b140:	9208      	str	r2, [sp, #32]
 808b142:	3b30      	subs	r3, #48	; 0x30
 808b144:	f100 0201 	add.w	r2, r0, #1
 808b148:	d013      	beq.n	808b172 <_strtod_l+0x242>
 808b14a:	9904      	ldr	r1, [sp, #16]
 808b14c:	1905      	adds	r5, r0, r4
 808b14e:	4411      	add	r1, r2
 808b150:	9104      	str	r1, [sp, #16]
 808b152:	4622      	mov	r2, r4
 808b154:	210a      	movs	r1, #10
 808b156:	42aa      	cmp	r2, r5
 808b158:	d113      	bne.n	808b182 <_strtod_l+0x252>
 808b15a:	1822      	adds	r2, r4, r0
 808b15c:	2a08      	cmp	r2, #8
 808b15e:	f104 0401 	add.w	r4, r4, #1
 808b162:	4404      	add	r4, r0
 808b164:	dc1b      	bgt.n	808b19e <_strtod_l+0x26e>
 808b166:	220a      	movs	r2, #10
 808b168:	9906      	ldr	r1, [sp, #24]
 808b16a:	fb02 3301 	mla	r3, r2, r1, r3
 808b16e:	9306      	str	r3, [sp, #24]
 808b170:	2200      	movs	r2, #0
 808b172:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b174:	4610      	mov	r0, r2
 808b176:	1c59      	adds	r1, r3, #1
 808b178:	911b      	str	r1, [sp, #108]	; 0x6c
 808b17a:	785b      	ldrb	r3, [r3, #1]
 808b17c:	e7ca      	b.n	808b114 <_strtod_l+0x1e4>
 808b17e:	4658      	mov	r0, fp
 808b180:	e7d3      	b.n	808b12a <_strtod_l+0x1fa>
 808b182:	2a08      	cmp	r2, #8
 808b184:	dc04      	bgt.n	808b190 <_strtod_l+0x260>
 808b186:	9f06      	ldr	r7, [sp, #24]
 808b188:	434f      	muls	r7, r1
 808b18a:	9706      	str	r7, [sp, #24]
 808b18c:	3201      	adds	r2, #1
 808b18e:	e7e2      	b.n	808b156 <_strtod_l+0x226>
 808b190:	1c57      	adds	r7, r2, #1
 808b192:	2f10      	cmp	r7, #16
 808b194:	bfde      	ittt	le
 808b196:	9f05      	ldrle	r7, [sp, #20]
 808b198:	434f      	mulle	r7, r1
 808b19a:	9705      	strle	r7, [sp, #20]
 808b19c:	e7f6      	b.n	808b18c <_strtod_l+0x25c>
 808b19e:	2c10      	cmp	r4, #16
 808b1a0:	bfdf      	itttt	le
 808b1a2:	220a      	movle	r2, #10
 808b1a4:	9905      	ldrle	r1, [sp, #20]
 808b1a6:	fb02 3301 	mlale	r3, r2, r1, r3
 808b1aa:	9305      	strle	r3, [sp, #20]
 808b1ac:	e7e0      	b.n	808b170 <_strtod_l+0x240>
 808b1ae:	2300      	movs	r3, #0
 808b1b0:	2201      	movs	r2, #1
 808b1b2:	9304      	str	r3, [sp, #16]
 808b1b4:	e77c      	b.n	808b0b0 <_strtod_l+0x180>
 808b1b6:	2700      	movs	r7, #0
 808b1b8:	1cb3      	adds	r3, r6, #2
 808b1ba:	931b      	str	r3, [sp, #108]	; 0x6c
 808b1bc:	78b3      	ldrb	r3, [r6, #2]
 808b1be:	e784      	b.n	808b0ca <_strtod_l+0x19a>
 808b1c0:	2701      	movs	r7, #1
 808b1c2:	e7f9      	b.n	808b1b8 <_strtod_l+0x288>
 808b1c4:	0808eef4 	.word	0x0808eef4
 808b1c8:	0808ed9c 	.word	0x0808ed9c
 808b1cc:	7ff00000 	.word	0x7ff00000
 808b1d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b1d2:	1c59      	adds	r1, r3, #1
 808b1d4:	911b      	str	r1, [sp, #108]	; 0x6c
 808b1d6:	785b      	ldrb	r3, [r3, #1]
 808b1d8:	2b30      	cmp	r3, #48	; 0x30
 808b1da:	d0f9      	beq.n	808b1d0 <_strtod_l+0x2a0>
 808b1dc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 808b1e0:	2908      	cmp	r1, #8
 808b1e2:	f63f af78 	bhi.w	808b0d6 <_strtod_l+0x1a6>
 808b1e6:	f04f 0e0a 	mov.w	lr, #10
 808b1ea:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808b1ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b1f0:	9309      	str	r3, [sp, #36]	; 0x24
 808b1f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b1f4:	1c59      	adds	r1, r3, #1
 808b1f6:	911b      	str	r1, [sp, #108]	; 0x6c
 808b1f8:	785b      	ldrb	r3, [r3, #1]
 808b1fa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 808b1fe:	2d09      	cmp	r5, #9
 808b200:	d935      	bls.n	808b26e <_strtod_l+0x33e>
 808b202:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808b204:	1b49      	subs	r1, r1, r5
 808b206:	2908      	cmp	r1, #8
 808b208:	f644 651f 	movw	r5, #19999	; 0x4e1f
 808b20c:	dc02      	bgt.n	808b214 <_strtod_l+0x2e4>
 808b20e:	4565      	cmp	r5, ip
 808b210:	bfa8      	it	ge
 808b212:	4665      	movge	r5, ip
 808b214:	b107      	cbz	r7, 808b218 <_strtod_l+0x2e8>
 808b216:	426d      	negs	r5, r5
 808b218:	2c00      	cmp	r4, #0
 808b21a:	d14c      	bne.n	808b2b6 <_strtod_l+0x386>
 808b21c:	9907      	ldr	r1, [sp, #28]
 808b21e:	4301      	orrs	r1, r0
 808b220:	f47f aec7 	bne.w	808afb2 <_strtod_l+0x82>
 808b224:	2a00      	cmp	r2, #0
 808b226:	f47f aee0 	bne.w	808afea <_strtod_l+0xba>
 808b22a:	2b69      	cmp	r3, #105	; 0x69
 808b22c:	d026      	beq.n	808b27c <_strtod_l+0x34c>
 808b22e:	dc23      	bgt.n	808b278 <_strtod_l+0x348>
 808b230:	2b49      	cmp	r3, #73	; 0x49
 808b232:	d023      	beq.n	808b27c <_strtod_l+0x34c>
 808b234:	2b4e      	cmp	r3, #78	; 0x4e
 808b236:	f47f aed8 	bne.w	808afea <_strtod_l+0xba>
 808b23a:	499c      	ldr	r1, [pc, #624]	; (808b4ac <_strtod_l+0x57c>)
 808b23c:	a81b      	add	r0, sp, #108	; 0x6c
 808b23e:	f000 ff9f 	bl	808c180 <__match>
 808b242:	2800      	cmp	r0, #0
 808b244:	f43f aed1 	beq.w	808afea <_strtod_l+0xba>
 808b248:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b24a:	781b      	ldrb	r3, [r3, #0]
 808b24c:	2b28      	cmp	r3, #40	; 0x28
 808b24e:	d12c      	bne.n	808b2aa <_strtod_l+0x37a>
 808b250:	4997      	ldr	r1, [pc, #604]	; (808b4b0 <_strtod_l+0x580>)
 808b252:	aa1e      	add	r2, sp, #120	; 0x78
 808b254:	a81b      	add	r0, sp, #108	; 0x6c
 808b256:	f000 ffa7 	bl	808c1a8 <__hexnan>
 808b25a:	2805      	cmp	r0, #5
 808b25c:	d125      	bne.n	808b2aa <_strtod_l+0x37a>
 808b25e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 808b260:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 808b264:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808b268:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808b26c:	e6a1      	b.n	808afb2 <_strtod_l+0x82>
 808b26e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 808b272:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 808b276:	e7bc      	b.n	808b1f2 <_strtod_l+0x2c2>
 808b278:	2b6e      	cmp	r3, #110	; 0x6e
 808b27a:	e7dc      	b.n	808b236 <_strtod_l+0x306>
 808b27c:	498d      	ldr	r1, [pc, #564]	; (808b4b4 <_strtod_l+0x584>)
 808b27e:	a81b      	add	r0, sp, #108	; 0x6c
 808b280:	f000 ff7e 	bl	808c180 <__match>
 808b284:	2800      	cmp	r0, #0
 808b286:	f43f aeb0 	beq.w	808afea <_strtod_l+0xba>
 808b28a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b28c:	498a      	ldr	r1, [pc, #552]	; (808b4b8 <_strtod_l+0x588>)
 808b28e:	3b01      	subs	r3, #1
 808b290:	a81b      	add	r0, sp, #108	; 0x6c
 808b292:	931b      	str	r3, [sp, #108]	; 0x6c
 808b294:	f000 ff74 	bl	808c180 <__match>
 808b298:	b910      	cbnz	r0, 808b2a0 <_strtod_l+0x370>
 808b29a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808b29c:	3301      	adds	r3, #1
 808b29e:	931b      	str	r3, [sp, #108]	; 0x6c
 808b2a0:	f04f 0800 	mov.w	r8, #0
 808b2a4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 808b4c8 <_strtod_l+0x598>
 808b2a8:	e683      	b.n	808afb2 <_strtod_l+0x82>
 808b2aa:	4884      	ldr	r0, [pc, #528]	; (808b4bc <_strtod_l+0x58c>)
 808b2ac:	f7fe fc40 	bl	8089b30 <nan>
 808b2b0:	4680      	mov	r8, r0
 808b2b2:	4689      	mov	r9, r1
 808b2b4:	e67d      	b.n	808afb2 <_strtod_l+0x82>
 808b2b6:	9b04      	ldr	r3, [sp, #16]
 808b2b8:	f1bb 0f00 	cmp.w	fp, #0
 808b2bc:	bf08      	it	eq
 808b2be:	46a3      	moveq	fp, r4
 808b2c0:	1aeb      	subs	r3, r5, r3
 808b2c2:	2c10      	cmp	r4, #16
 808b2c4:	9806      	ldr	r0, [sp, #24]
 808b2c6:	4626      	mov	r6, r4
 808b2c8:	9307      	str	r3, [sp, #28]
 808b2ca:	bfa8      	it	ge
 808b2cc:	2610      	movge	r6, #16
 808b2ce:	f7fe fd77 	bl	8089dc0 <__aeabi_ui2d>
 808b2d2:	2c09      	cmp	r4, #9
 808b2d4:	4680      	mov	r8, r0
 808b2d6:	4689      	mov	r9, r1
 808b2d8:	dd13      	ble.n	808b302 <_strtod_l+0x3d2>
 808b2da:	4b79      	ldr	r3, [pc, #484]	; (808b4c0 <_strtod_l+0x590>)
 808b2dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 808b2e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808b2e4:	f7fe fde6 	bl	8089eb4 <__aeabi_dmul>
 808b2e8:	4680      	mov	r8, r0
 808b2ea:	9805      	ldr	r0, [sp, #20]
 808b2ec:	4689      	mov	r9, r1
 808b2ee:	f7fe fd67 	bl	8089dc0 <__aeabi_ui2d>
 808b2f2:	4602      	mov	r2, r0
 808b2f4:	460b      	mov	r3, r1
 808b2f6:	4640      	mov	r0, r8
 808b2f8:	4649      	mov	r1, r9
 808b2fa:	f7fe fc25 	bl	8089b48 <__adddf3>
 808b2fe:	4680      	mov	r8, r0
 808b300:	4689      	mov	r9, r1
 808b302:	2c0f      	cmp	r4, #15
 808b304:	dc36      	bgt.n	808b374 <_strtod_l+0x444>
 808b306:	9b07      	ldr	r3, [sp, #28]
 808b308:	2b00      	cmp	r3, #0
 808b30a:	f43f ae52 	beq.w	808afb2 <_strtod_l+0x82>
 808b30e:	dd22      	ble.n	808b356 <_strtod_l+0x426>
 808b310:	2b16      	cmp	r3, #22
 808b312:	dc09      	bgt.n	808b328 <_strtod_l+0x3f8>
 808b314:	4c6a      	ldr	r4, [pc, #424]	; (808b4c0 <_strtod_l+0x590>)
 808b316:	4642      	mov	r2, r8
 808b318:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 808b31c:	464b      	mov	r3, r9
 808b31e:	e9d4 0100 	ldrd	r0, r1, [r4]
 808b322:	f7fe fdc7 	bl	8089eb4 <__aeabi_dmul>
 808b326:	e7c3      	b.n	808b2b0 <_strtod_l+0x380>
 808b328:	9a07      	ldr	r2, [sp, #28]
 808b32a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 808b32e:	4293      	cmp	r3, r2
 808b330:	db20      	blt.n	808b374 <_strtod_l+0x444>
 808b332:	4d63      	ldr	r5, [pc, #396]	; (808b4c0 <_strtod_l+0x590>)
 808b334:	f1c4 040f 	rsb	r4, r4, #15
 808b338:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 808b33c:	4642      	mov	r2, r8
 808b33e:	e9d1 0100 	ldrd	r0, r1, [r1]
 808b342:	464b      	mov	r3, r9
 808b344:	f7fe fdb6 	bl	8089eb4 <__aeabi_dmul>
 808b348:	9b07      	ldr	r3, [sp, #28]
 808b34a:	1b1c      	subs	r4, r3, r4
 808b34c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 808b350:	e9d5 2300 	ldrd	r2, r3, [r5]
 808b354:	e7e5      	b.n	808b322 <_strtod_l+0x3f2>
 808b356:	9b07      	ldr	r3, [sp, #28]
 808b358:	3316      	adds	r3, #22
 808b35a:	db0b      	blt.n	808b374 <_strtod_l+0x444>
 808b35c:	9b04      	ldr	r3, [sp, #16]
 808b35e:	4a58      	ldr	r2, [pc, #352]	; (808b4c0 <_strtod_l+0x590>)
 808b360:	1b5d      	subs	r5, r3, r5
 808b362:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 808b366:	4640      	mov	r0, r8
 808b368:	e9d5 2300 	ldrd	r2, r3, [r5]
 808b36c:	4649      	mov	r1, r9
 808b36e:	f7fe fecb 	bl	808a108 <__aeabi_ddiv>
 808b372:	e79d      	b.n	808b2b0 <_strtod_l+0x380>
 808b374:	9b07      	ldr	r3, [sp, #28]
 808b376:	1ba6      	subs	r6, r4, r6
 808b378:	441e      	add	r6, r3
 808b37a:	2e00      	cmp	r6, #0
 808b37c:	dd71      	ble.n	808b462 <_strtod_l+0x532>
 808b37e:	f016 030f 	ands.w	r3, r6, #15
 808b382:	d00a      	beq.n	808b39a <_strtod_l+0x46a>
 808b384:	494e      	ldr	r1, [pc, #312]	; (808b4c0 <_strtod_l+0x590>)
 808b386:	4642      	mov	r2, r8
 808b388:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 808b38c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808b390:	464b      	mov	r3, r9
 808b392:	f7fe fd8f 	bl	8089eb4 <__aeabi_dmul>
 808b396:	4680      	mov	r8, r0
 808b398:	4689      	mov	r9, r1
 808b39a:	f036 060f 	bics.w	r6, r6, #15
 808b39e:	d050      	beq.n	808b442 <_strtod_l+0x512>
 808b3a0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 808b3a4:	dd27      	ble.n	808b3f6 <_strtod_l+0x4c6>
 808b3a6:	f04f 0b00 	mov.w	fp, #0
 808b3aa:	f8cd b010 	str.w	fp, [sp, #16]
 808b3ae:	f8cd b020 	str.w	fp, [sp, #32]
 808b3b2:	f8cd b018 	str.w	fp, [sp, #24]
 808b3b6:	2322      	movs	r3, #34	; 0x22
 808b3b8:	f04f 0800 	mov.w	r8, #0
 808b3bc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 808b4c8 <_strtod_l+0x598>
 808b3c0:	f8ca 3000 	str.w	r3, [sl]
 808b3c4:	9b08      	ldr	r3, [sp, #32]
 808b3c6:	2b00      	cmp	r3, #0
 808b3c8:	f43f adf3 	beq.w	808afb2 <_strtod_l+0x82>
 808b3cc:	4650      	mov	r0, sl
 808b3ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 808b3d0:	f000 ffcc 	bl	808c36c <_Bfree>
 808b3d4:	4650      	mov	r0, sl
 808b3d6:	9906      	ldr	r1, [sp, #24]
 808b3d8:	f000 ffc8 	bl	808c36c <_Bfree>
 808b3dc:	4650      	mov	r0, sl
 808b3de:	9904      	ldr	r1, [sp, #16]
 808b3e0:	f000 ffc4 	bl	808c36c <_Bfree>
 808b3e4:	4650      	mov	r0, sl
 808b3e6:	9908      	ldr	r1, [sp, #32]
 808b3e8:	f000 ffc0 	bl	808c36c <_Bfree>
 808b3ec:	4659      	mov	r1, fp
 808b3ee:	4650      	mov	r0, sl
 808b3f0:	f000 ffbc 	bl	808c36c <_Bfree>
 808b3f4:	e5dd      	b.n	808afb2 <_strtod_l+0x82>
 808b3f6:	2300      	movs	r3, #0
 808b3f8:	4640      	mov	r0, r8
 808b3fa:	4649      	mov	r1, r9
 808b3fc:	461f      	mov	r7, r3
 808b3fe:	1136      	asrs	r6, r6, #4
 808b400:	2e01      	cmp	r6, #1
 808b402:	dc21      	bgt.n	808b448 <_strtod_l+0x518>
 808b404:	b10b      	cbz	r3, 808b40a <_strtod_l+0x4da>
 808b406:	4680      	mov	r8, r0
 808b408:	4689      	mov	r9, r1
 808b40a:	4b2e      	ldr	r3, [pc, #184]	; (808b4c4 <_strtod_l+0x594>)
 808b40c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808b410:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 808b414:	4642      	mov	r2, r8
 808b416:	e9d7 0100 	ldrd	r0, r1, [r7]
 808b41a:	464b      	mov	r3, r9
 808b41c:	f7fe fd4a 	bl	8089eb4 <__aeabi_dmul>
 808b420:	4b29      	ldr	r3, [pc, #164]	; (808b4c8 <_strtod_l+0x598>)
 808b422:	460a      	mov	r2, r1
 808b424:	400b      	ands	r3, r1
 808b426:	4929      	ldr	r1, [pc, #164]	; (808b4cc <_strtod_l+0x59c>)
 808b428:	4680      	mov	r8, r0
 808b42a:	428b      	cmp	r3, r1
 808b42c:	d8bb      	bhi.n	808b3a6 <_strtod_l+0x476>
 808b42e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808b432:	428b      	cmp	r3, r1
 808b434:	bf86      	itte	hi
 808b436:	f04f 38ff 	movhi.w	r8, #4294967295
 808b43a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 808b4d0 <_strtod_l+0x5a0>
 808b43e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808b442:	2300      	movs	r3, #0
 808b444:	9305      	str	r3, [sp, #20]
 808b446:	e07e      	b.n	808b546 <_strtod_l+0x616>
 808b448:	07f2      	lsls	r2, r6, #31
 808b44a:	d507      	bpl.n	808b45c <_strtod_l+0x52c>
 808b44c:	4b1d      	ldr	r3, [pc, #116]	; (808b4c4 <_strtod_l+0x594>)
 808b44e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 808b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b456:	f7fe fd2d 	bl	8089eb4 <__aeabi_dmul>
 808b45a:	2301      	movs	r3, #1
 808b45c:	3701      	adds	r7, #1
 808b45e:	1076      	asrs	r6, r6, #1
 808b460:	e7ce      	b.n	808b400 <_strtod_l+0x4d0>
 808b462:	d0ee      	beq.n	808b442 <_strtod_l+0x512>
 808b464:	4276      	negs	r6, r6
 808b466:	f016 020f 	ands.w	r2, r6, #15
 808b46a:	d00a      	beq.n	808b482 <_strtod_l+0x552>
 808b46c:	4b14      	ldr	r3, [pc, #80]	; (808b4c0 <_strtod_l+0x590>)
 808b46e:	4640      	mov	r0, r8
 808b470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808b474:	4649      	mov	r1, r9
 808b476:	e9d3 2300 	ldrd	r2, r3, [r3]
 808b47a:	f7fe fe45 	bl	808a108 <__aeabi_ddiv>
 808b47e:	4680      	mov	r8, r0
 808b480:	4689      	mov	r9, r1
 808b482:	1136      	asrs	r6, r6, #4
 808b484:	d0dd      	beq.n	808b442 <_strtod_l+0x512>
 808b486:	2e1f      	cmp	r6, #31
 808b488:	dd24      	ble.n	808b4d4 <_strtod_l+0x5a4>
 808b48a:	f04f 0b00 	mov.w	fp, #0
 808b48e:	f8cd b010 	str.w	fp, [sp, #16]
 808b492:	f8cd b020 	str.w	fp, [sp, #32]
 808b496:	f8cd b018 	str.w	fp, [sp, #24]
 808b49a:	2322      	movs	r3, #34	; 0x22
 808b49c:	f04f 0800 	mov.w	r8, #0
 808b4a0:	f04f 0900 	mov.w	r9, #0
 808b4a4:	f8ca 3000 	str.w	r3, [sl]
 808b4a8:	e78c      	b.n	808b3c4 <_strtod_l+0x494>
 808b4aa:	bf00      	nop
 808b4ac:	0808ebe1 	.word	0x0808ebe1
 808b4b0:	0808edb0 	.word	0x0808edb0
 808b4b4:	0808ebe5 	.word	0x0808ebe5
 808b4b8:	0808ed96 	.word	0x0808ed96
 808b4bc:	0808eb69 	.word	0x0808eb69
 808b4c0:	0808ef30 	.word	0x0808ef30
 808b4c4:	0808ef08 	.word	0x0808ef08
 808b4c8:	7ff00000 	.word	0x7ff00000
 808b4cc:	7ca00000 	.word	0x7ca00000
 808b4d0:	7fefffff 	.word	0x7fefffff
 808b4d4:	f016 0310 	ands.w	r3, r6, #16
 808b4d8:	bf18      	it	ne
 808b4da:	236a      	movne	r3, #106	; 0x6a
 808b4dc:	4640      	mov	r0, r8
 808b4de:	9305      	str	r3, [sp, #20]
 808b4e0:	4649      	mov	r1, r9
 808b4e2:	2300      	movs	r3, #0
 808b4e4:	4fb2      	ldr	r7, [pc, #712]	; (808b7b0 <_strtod_l+0x880>)
 808b4e6:	07f2      	lsls	r2, r6, #31
 808b4e8:	d504      	bpl.n	808b4f4 <_strtod_l+0x5c4>
 808b4ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 808b4ee:	f7fe fce1 	bl	8089eb4 <__aeabi_dmul>
 808b4f2:	2301      	movs	r3, #1
 808b4f4:	1076      	asrs	r6, r6, #1
 808b4f6:	f107 0708 	add.w	r7, r7, #8
 808b4fa:	d1f4      	bne.n	808b4e6 <_strtod_l+0x5b6>
 808b4fc:	b10b      	cbz	r3, 808b502 <_strtod_l+0x5d2>
 808b4fe:	4680      	mov	r8, r0
 808b500:	4689      	mov	r9, r1
 808b502:	9b05      	ldr	r3, [sp, #20]
 808b504:	b1bb      	cbz	r3, 808b536 <_strtod_l+0x606>
 808b506:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808b50a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808b50e:	2b00      	cmp	r3, #0
 808b510:	4649      	mov	r1, r9
 808b512:	dd10      	ble.n	808b536 <_strtod_l+0x606>
 808b514:	2b1f      	cmp	r3, #31
 808b516:	f340 812b 	ble.w	808b770 <_strtod_l+0x840>
 808b51a:	2b34      	cmp	r3, #52	; 0x34
 808b51c:	bfd8      	it	le
 808b51e:	f04f 32ff 	movle.w	r2, #4294967295
 808b522:	f04f 0800 	mov.w	r8, #0
 808b526:	bfcf      	iteee	gt
 808b528:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808b52c:	3b20      	suble	r3, #32
 808b52e:	fa02 f303 	lslle.w	r3, r2, r3
 808b532:	ea03 0901 	andle.w	r9, r3, r1
 808b536:	2200      	movs	r2, #0
 808b538:	2300      	movs	r3, #0
 808b53a:	4640      	mov	r0, r8
 808b53c:	4649      	mov	r1, r9
 808b53e:	f7fe ff21 	bl	808a384 <__aeabi_dcmpeq>
 808b542:	2800      	cmp	r0, #0
 808b544:	d1a1      	bne.n	808b48a <_strtod_l+0x55a>
 808b546:	9b06      	ldr	r3, [sp, #24]
 808b548:	465a      	mov	r2, fp
 808b54a:	9300      	str	r3, [sp, #0]
 808b54c:	4650      	mov	r0, sl
 808b54e:	4623      	mov	r3, r4
 808b550:	9908      	ldr	r1, [sp, #32]
 808b552:	f000 ff60 	bl	808c416 <__s2b>
 808b556:	9008      	str	r0, [sp, #32]
 808b558:	2800      	cmp	r0, #0
 808b55a:	f43f af24 	beq.w	808b3a6 <_strtod_l+0x476>
 808b55e:	9b04      	ldr	r3, [sp, #16]
 808b560:	f04f 0b00 	mov.w	fp, #0
 808b564:	1b5d      	subs	r5, r3, r5
 808b566:	9b07      	ldr	r3, [sp, #28]
 808b568:	f8cd b010 	str.w	fp, [sp, #16]
 808b56c:	2b00      	cmp	r3, #0
 808b56e:	bfb4      	ite	lt
 808b570:	462b      	movlt	r3, r5
 808b572:	2300      	movge	r3, #0
 808b574:	930e      	str	r3, [sp, #56]	; 0x38
 808b576:	9b07      	ldr	r3, [sp, #28]
 808b578:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 808b57c:	9316      	str	r3, [sp, #88]	; 0x58
 808b57e:	9b08      	ldr	r3, [sp, #32]
 808b580:	4650      	mov	r0, sl
 808b582:	6859      	ldr	r1, [r3, #4]
 808b584:	f000 febe 	bl	808c304 <_Balloc>
 808b588:	9006      	str	r0, [sp, #24]
 808b58a:	2800      	cmp	r0, #0
 808b58c:	f43f af13 	beq.w	808b3b6 <_strtod_l+0x486>
 808b590:	9b08      	ldr	r3, [sp, #32]
 808b592:	300c      	adds	r0, #12
 808b594:	691a      	ldr	r2, [r3, #16]
 808b596:	f103 010c 	add.w	r1, r3, #12
 808b59a:	3202      	adds	r2, #2
 808b59c:	0092      	lsls	r2, r2, #2
 808b59e:	f7ff fbd1 	bl	808ad44 <memcpy>
 808b5a2:	ab1e      	add	r3, sp, #120	; 0x78
 808b5a4:	9301      	str	r3, [sp, #4]
 808b5a6:	ab1d      	add	r3, sp, #116	; 0x74
 808b5a8:	9300      	str	r3, [sp, #0]
 808b5aa:	4642      	mov	r2, r8
 808b5ac:	464b      	mov	r3, r9
 808b5ae:	4650      	mov	r0, sl
 808b5b0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 808b5b4:	f001 fa1e 	bl	808c9f4 <__d2b>
 808b5b8:	901c      	str	r0, [sp, #112]	; 0x70
 808b5ba:	2800      	cmp	r0, #0
 808b5bc:	f43f aefb 	beq.w	808b3b6 <_strtod_l+0x486>
 808b5c0:	2101      	movs	r1, #1
 808b5c2:	4650      	mov	r0, sl
 808b5c4:	f000 ffb3 	bl	808c52e <__i2b>
 808b5c8:	4603      	mov	r3, r0
 808b5ca:	9004      	str	r0, [sp, #16]
 808b5cc:	2800      	cmp	r0, #0
 808b5ce:	f43f aef2 	beq.w	808b3b6 <_strtod_l+0x486>
 808b5d2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 808b5d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 808b5d6:	2d00      	cmp	r5, #0
 808b5d8:	bfab      	itete	ge
 808b5da:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 808b5dc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 808b5de:	18ee      	addge	r6, r5, r3
 808b5e0:	1b5c      	sublt	r4, r3, r5
 808b5e2:	9b05      	ldr	r3, [sp, #20]
 808b5e4:	bfa8      	it	ge
 808b5e6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 808b5e8:	eba5 0503 	sub.w	r5, r5, r3
 808b5ec:	4415      	add	r5, r2
 808b5ee:	4b71      	ldr	r3, [pc, #452]	; (808b7b4 <_strtod_l+0x884>)
 808b5f0:	f105 35ff 	add.w	r5, r5, #4294967295
 808b5f4:	bfb8      	it	lt
 808b5f6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 808b5f8:	429d      	cmp	r5, r3
 808b5fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 808b5fe:	f280 80c9 	bge.w	808b794 <_strtod_l+0x864>
 808b602:	1b5b      	subs	r3, r3, r5
 808b604:	2b1f      	cmp	r3, #31
 808b606:	f04f 0701 	mov.w	r7, #1
 808b60a:	eba2 0203 	sub.w	r2, r2, r3
 808b60e:	f300 80b6 	bgt.w	808b77e <_strtod_l+0x84e>
 808b612:	2500      	movs	r5, #0
 808b614:	fa07 f303 	lsl.w	r3, r7, r3
 808b618:	930f      	str	r3, [sp, #60]	; 0x3c
 808b61a:	18b7      	adds	r7, r6, r2
 808b61c:	9b05      	ldr	r3, [sp, #20]
 808b61e:	42be      	cmp	r6, r7
 808b620:	4414      	add	r4, r2
 808b622:	441c      	add	r4, r3
 808b624:	4633      	mov	r3, r6
 808b626:	bfa8      	it	ge
 808b628:	463b      	movge	r3, r7
 808b62a:	42a3      	cmp	r3, r4
 808b62c:	bfa8      	it	ge
 808b62e:	4623      	movge	r3, r4
 808b630:	2b00      	cmp	r3, #0
 808b632:	bfc2      	ittt	gt
 808b634:	1aff      	subgt	r7, r7, r3
 808b636:	1ae4      	subgt	r4, r4, r3
 808b638:	1af6      	subgt	r6, r6, r3
 808b63a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808b63c:	2b00      	cmp	r3, #0
 808b63e:	dd17      	ble.n	808b670 <_strtod_l+0x740>
 808b640:	461a      	mov	r2, r3
 808b642:	4650      	mov	r0, sl
 808b644:	9904      	ldr	r1, [sp, #16]
 808b646:	f001 f817 	bl	808c678 <__pow5mult>
 808b64a:	9004      	str	r0, [sp, #16]
 808b64c:	2800      	cmp	r0, #0
 808b64e:	f43f aeb2 	beq.w	808b3b6 <_strtod_l+0x486>
 808b652:	4601      	mov	r1, r0
 808b654:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 808b656:	4650      	mov	r0, sl
 808b658:	f000 ff72 	bl	808c540 <__multiply>
 808b65c:	9009      	str	r0, [sp, #36]	; 0x24
 808b65e:	2800      	cmp	r0, #0
 808b660:	f43f aea9 	beq.w	808b3b6 <_strtod_l+0x486>
 808b664:	4650      	mov	r0, sl
 808b666:	991c      	ldr	r1, [sp, #112]	; 0x70
 808b668:	f000 fe80 	bl	808c36c <_Bfree>
 808b66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b66e:	931c      	str	r3, [sp, #112]	; 0x70
 808b670:	2f00      	cmp	r7, #0
 808b672:	f300 8093 	bgt.w	808b79c <_strtod_l+0x86c>
 808b676:	9b07      	ldr	r3, [sp, #28]
 808b678:	2b00      	cmp	r3, #0
 808b67a:	dd08      	ble.n	808b68e <_strtod_l+0x75e>
 808b67c:	4650      	mov	r0, sl
 808b67e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808b680:	9906      	ldr	r1, [sp, #24]
 808b682:	f000 fff9 	bl	808c678 <__pow5mult>
 808b686:	9006      	str	r0, [sp, #24]
 808b688:	2800      	cmp	r0, #0
 808b68a:	f43f ae94 	beq.w	808b3b6 <_strtod_l+0x486>
 808b68e:	2c00      	cmp	r4, #0
 808b690:	dd08      	ble.n	808b6a4 <_strtod_l+0x774>
 808b692:	4622      	mov	r2, r4
 808b694:	4650      	mov	r0, sl
 808b696:	9906      	ldr	r1, [sp, #24]
 808b698:	f001 f83c 	bl	808c714 <__lshift>
 808b69c:	9006      	str	r0, [sp, #24]
 808b69e:	2800      	cmp	r0, #0
 808b6a0:	f43f ae89 	beq.w	808b3b6 <_strtod_l+0x486>
 808b6a4:	2e00      	cmp	r6, #0
 808b6a6:	dd08      	ble.n	808b6ba <_strtod_l+0x78a>
 808b6a8:	4632      	mov	r2, r6
 808b6aa:	4650      	mov	r0, sl
 808b6ac:	9904      	ldr	r1, [sp, #16]
 808b6ae:	f001 f831 	bl	808c714 <__lshift>
 808b6b2:	9004      	str	r0, [sp, #16]
 808b6b4:	2800      	cmp	r0, #0
 808b6b6:	f43f ae7e 	beq.w	808b3b6 <_strtod_l+0x486>
 808b6ba:	4650      	mov	r0, sl
 808b6bc:	9a06      	ldr	r2, [sp, #24]
 808b6be:	991c      	ldr	r1, [sp, #112]	; 0x70
 808b6c0:	f001 f8a2 	bl	808c808 <__mdiff>
 808b6c4:	4683      	mov	fp, r0
 808b6c6:	2800      	cmp	r0, #0
 808b6c8:	f43f ae75 	beq.w	808b3b6 <_strtod_l+0x486>
 808b6cc:	2400      	movs	r4, #0
 808b6ce:	68c3      	ldr	r3, [r0, #12]
 808b6d0:	9904      	ldr	r1, [sp, #16]
 808b6d2:	60c4      	str	r4, [r0, #12]
 808b6d4:	930d      	str	r3, [sp, #52]	; 0x34
 808b6d6:	f001 f87c 	bl	808c7d2 <__mcmp>
 808b6da:	42a0      	cmp	r0, r4
 808b6dc:	da70      	bge.n	808b7c0 <_strtod_l+0x890>
 808b6de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b6e0:	ea53 0308 	orrs.w	r3, r3, r8
 808b6e4:	f040 8096 	bne.w	808b814 <_strtod_l+0x8e4>
 808b6e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b6ec:	2b00      	cmp	r3, #0
 808b6ee:	f040 8091 	bne.w	808b814 <_strtod_l+0x8e4>
 808b6f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b6f6:	0d1b      	lsrs	r3, r3, #20
 808b6f8:	051b      	lsls	r3, r3, #20
 808b6fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808b6fe:	f240 8089 	bls.w	808b814 <_strtod_l+0x8e4>
 808b702:	f8db 3014 	ldr.w	r3, [fp, #20]
 808b706:	b923      	cbnz	r3, 808b712 <_strtod_l+0x7e2>
 808b708:	f8db 3010 	ldr.w	r3, [fp, #16]
 808b70c:	2b01      	cmp	r3, #1
 808b70e:	f340 8081 	ble.w	808b814 <_strtod_l+0x8e4>
 808b712:	4659      	mov	r1, fp
 808b714:	2201      	movs	r2, #1
 808b716:	4650      	mov	r0, sl
 808b718:	f000 fffc 	bl	808c714 <__lshift>
 808b71c:	9904      	ldr	r1, [sp, #16]
 808b71e:	4683      	mov	fp, r0
 808b720:	f001 f857 	bl	808c7d2 <__mcmp>
 808b724:	2800      	cmp	r0, #0
 808b726:	dd75      	ble.n	808b814 <_strtod_l+0x8e4>
 808b728:	9905      	ldr	r1, [sp, #20]
 808b72a:	464b      	mov	r3, r9
 808b72c:	4a22      	ldr	r2, [pc, #136]	; (808b7b8 <_strtod_l+0x888>)
 808b72e:	2900      	cmp	r1, #0
 808b730:	f000 8091 	beq.w	808b856 <_strtod_l+0x926>
 808b734:	ea02 0109 	and.w	r1, r2, r9
 808b738:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 808b73c:	f300 808b 	bgt.w	808b856 <_strtod_l+0x926>
 808b740:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 808b744:	f77f aea9 	ble.w	808b49a <_strtod_l+0x56a>
 808b748:	2300      	movs	r3, #0
 808b74a:	4a1c      	ldr	r2, [pc, #112]	; (808b7bc <_strtod_l+0x88c>)
 808b74c:	4640      	mov	r0, r8
 808b74e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 808b752:	4649      	mov	r1, r9
 808b754:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 808b758:	f7fe fbac 	bl	8089eb4 <__aeabi_dmul>
 808b75c:	460b      	mov	r3, r1
 808b75e:	4303      	orrs	r3, r0
 808b760:	bf08      	it	eq
 808b762:	2322      	moveq	r3, #34	; 0x22
 808b764:	4680      	mov	r8, r0
 808b766:	4689      	mov	r9, r1
 808b768:	bf08      	it	eq
 808b76a:	f8ca 3000 	streq.w	r3, [sl]
 808b76e:	e62d      	b.n	808b3cc <_strtod_l+0x49c>
 808b770:	f04f 32ff 	mov.w	r2, #4294967295
 808b774:	fa02 f303 	lsl.w	r3, r2, r3
 808b778:	ea03 0808 	and.w	r8, r3, r8
 808b77c:	e6db      	b.n	808b536 <_strtod_l+0x606>
 808b77e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 808b782:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 808b786:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 808b78a:	35e2      	adds	r5, #226	; 0xe2
 808b78c:	fa07 f505 	lsl.w	r5, r7, r5
 808b790:	970f      	str	r7, [sp, #60]	; 0x3c
 808b792:	e742      	b.n	808b61a <_strtod_l+0x6ea>
 808b794:	2301      	movs	r3, #1
 808b796:	2500      	movs	r5, #0
 808b798:	930f      	str	r3, [sp, #60]	; 0x3c
 808b79a:	e73e      	b.n	808b61a <_strtod_l+0x6ea>
 808b79c:	463a      	mov	r2, r7
 808b79e:	4650      	mov	r0, sl
 808b7a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 808b7a2:	f000 ffb7 	bl	808c714 <__lshift>
 808b7a6:	901c      	str	r0, [sp, #112]	; 0x70
 808b7a8:	2800      	cmp	r0, #0
 808b7aa:	f47f af64 	bne.w	808b676 <_strtod_l+0x746>
 808b7ae:	e602      	b.n	808b3b6 <_strtod_l+0x486>
 808b7b0:	0808edc8 	.word	0x0808edc8
 808b7b4:	fffffc02 	.word	0xfffffc02
 808b7b8:	7ff00000 	.word	0x7ff00000
 808b7bc:	39500000 	.word	0x39500000
 808b7c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808b7c4:	d166      	bne.n	808b894 <_strtod_l+0x964>
 808b7c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808b7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b7cc:	b35a      	cbz	r2, 808b826 <_strtod_l+0x8f6>
 808b7ce:	4a9c      	ldr	r2, [pc, #624]	; (808ba40 <_strtod_l+0xb10>)
 808b7d0:	4293      	cmp	r3, r2
 808b7d2:	d12c      	bne.n	808b82e <_strtod_l+0x8fe>
 808b7d4:	9b05      	ldr	r3, [sp, #20]
 808b7d6:	4640      	mov	r0, r8
 808b7d8:	b303      	cbz	r3, 808b81c <_strtod_l+0x8ec>
 808b7da:	464b      	mov	r3, r9
 808b7dc:	4a99      	ldr	r2, [pc, #612]	; (808ba44 <_strtod_l+0xb14>)
 808b7de:	f04f 31ff 	mov.w	r1, #4294967295
 808b7e2:	401a      	ands	r2, r3
 808b7e4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 808b7e8:	d81b      	bhi.n	808b822 <_strtod_l+0x8f2>
 808b7ea:	0d12      	lsrs	r2, r2, #20
 808b7ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 808b7f0:	fa01 f303 	lsl.w	r3, r1, r3
 808b7f4:	4298      	cmp	r0, r3
 808b7f6:	d11a      	bne.n	808b82e <_strtod_l+0x8fe>
 808b7f8:	4b93      	ldr	r3, [pc, #588]	; (808ba48 <_strtod_l+0xb18>)
 808b7fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808b7fc:	429a      	cmp	r2, r3
 808b7fe:	d102      	bne.n	808b806 <_strtod_l+0x8d6>
 808b800:	3001      	adds	r0, #1
 808b802:	f43f add8 	beq.w	808b3b6 <_strtod_l+0x486>
 808b806:	f04f 0800 	mov.w	r8, #0
 808b80a:	4b8e      	ldr	r3, [pc, #568]	; (808ba44 <_strtod_l+0xb14>)
 808b80c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808b80e:	401a      	ands	r2, r3
 808b810:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 808b814:	9b05      	ldr	r3, [sp, #20]
 808b816:	2b00      	cmp	r3, #0
 808b818:	d196      	bne.n	808b748 <_strtod_l+0x818>
 808b81a:	e5d7      	b.n	808b3cc <_strtod_l+0x49c>
 808b81c:	f04f 33ff 	mov.w	r3, #4294967295
 808b820:	e7e8      	b.n	808b7f4 <_strtod_l+0x8c4>
 808b822:	460b      	mov	r3, r1
 808b824:	e7e6      	b.n	808b7f4 <_strtod_l+0x8c4>
 808b826:	ea53 0308 	orrs.w	r3, r3, r8
 808b82a:	f43f af7d 	beq.w	808b728 <_strtod_l+0x7f8>
 808b82e:	b1e5      	cbz	r5, 808b86a <_strtod_l+0x93a>
 808b830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b832:	421d      	tst	r5, r3
 808b834:	d0ee      	beq.n	808b814 <_strtod_l+0x8e4>
 808b836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b838:	4640      	mov	r0, r8
 808b83a:	4649      	mov	r1, r9
 808b83c:	9a05      	ldr	r2, [sp, #20]
 808b83e:	b1c3      	cbz	r3, 808b872 <_strtod_l+0x942>
 808b840:	f7ff fb53 	bl	808aeea <sulp>
 808b844:	4602      	mov	r2, r0
 808b846:	460b      	mov	r3, r1
 808b848:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808b84c:	f7fe f97c 	bl	8089b48 <__adddf3>
 808b850:	4680      	mov	r8, r0
 808b852:	4689      	mov	r9, r1
 808b854:	e7de      	b.n	808b814 <_strtod_l+0x8e4>
 808b856:	4013      	ands	r3, r2
 808b858:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808b85c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808b860:	f04f 38ff 	mov.w	r8, #4294967295
 808b864:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808b868:	e7d4      	b.n	808b814 <_strtod_l+0x8e4>
 808b86a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808b86c:	ea13 0f08 	tst.w	r3, r8
 808b870:	e7e0      	b.n	808b834 <_strtod_l+0x904>
 808b872:	f7ff fb3a 	bl	808aeea <sulp>
 808b876:	4602      	mov	r2, r0
 808b878:	460b      	mov	r3, r1
 808b87a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808b87e:	f7fe f961 	bl	8089b44 <__aeabi_dsub>
 808b882:	2200      	movs	r2, #0
 808b884:	2300      	movs	r3, #0
 808b886:	4680      	mov	r8, r0
 808b888:	4689      	mov	r9, r1
 808b88a:	f7fe fd7b 	bl	808a384 <__aeabi_dcmpeq>
 808b88e:	2800      	cmp	r0, #0
 808b890:	d0c0      	beq.n	808b814 <_strtod_l+0x8e4>
 808b892:	e602      	b.n	808b49a <_strtod_l+0x56a>
 808b894:	4658      	mov	r0, fp
 808b896:	9904      	ldr	r1, [sp, #16]
 808b898:	f001 f8fb 	bl	808ca92 <__ratio>
 808b89c:	2200      	movs	r2, #0
 808b89e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808b8a2:	4606      	mov	r6, r0
 808b8a4:	460f      	mov	r7, r1
 808b8a6:	f7fe fd81 	bl	808a3ac <__aeabi_dcmple>
 808b8aa:	2800      	cmp	r0, #0
 808b8ac:	d075      	beq.n	808b99a <_strtod_l+0xa6a>
 808b8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b8b0:	2b00      	cmp	r3, #0
 808b8b2:	d047      	beq.n	808b944 <_strtod_l+0xa14>
 808b8b4:	2600      	movs	r6, #0
 808b8b6:	4f65      	ldr	r7, [pc, #404]	; (808ba4c <_strtod_l+0xb1c>)
 808b8b8:	4d64      	ldr	r5, [pc, #400]	; (808ba4c <_strtod_l+0xb1c>)
 808b8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b8bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 808b8c0:	0d1b      	lsrs	r3, r3, #20
 808b8c2:	051b      	lsls	r3, r3, #20
 808b8c4:	930f      	str	r3, [sp, #60]	; 0x3c
 808b8c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808b8c8:	4b61      	ldr	r3, [pc, #388]	; (808ba50 <_strtod_l+0xb20>)
 808b8ca:	429a      	cmp	r2, r3
 808b8cc:	f040 80c8 	bne.w	808ba60 <_strtod_l+0xb30>
 808b8d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808b8d4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 808b8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b8da:	4640      	mov	r0, r8
 808b8dc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 808b8e0:	4649      	mov	r1, r9
 808b8e2:	f001 f80d 	bl	808c900 <__ulp>
 808b8e6:	4602      	mov	r2, r0
 808b8e8:	460b      	mov	r3, r1
 808b8ea:	4630      	mov	r0, r6
 808b8ec:	4639      	mov	r1, r7
 808b8ee:	f7fe fae1 	bl	8089eb4 <__aeabi_dmul>
 808b8f2:	4642      	mov	r2, r8
 808b8f4:	464b      	mov	r3, r9
 808b8f6:	f7fe f927 	bl	8089b48 <__adddf3>
 808b8fa:	460b      	mov	r3, r1
 808b8fc:	4951      	ldr	r1, [pc, #324]	; (808ba44 <_strtod_l+0xb14>)
 808b8fe:	4a55      	ldr	r2, [pc, #340]	; (808ba54 <_strtod_l+0xb24>)
 808b900:	4019      	ands	r1, r3
 808b902:	4291      	cmp	r1, r2
 808b904:	4680      	mov	r8, r0
 808b906:	d95e      	bls.n	808b9c6 <_strtod_l+0xa96>
 808b908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808b90a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 808b90e:	4293      	cmp	r3, r2
 808b910:	d103      	bne.n	808b91a <_strtod_l+0x9ea>
 808b912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808b914:	3301      	adds	r3, #1
 808b916:	f43f ad4e 	beq.w	808b3b6 <_strtod_l+0x486>
 808b91a:	f04f 38ff 	mov.w	r8, #4294967295
 808b91e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 808ba48 <_strtod_l+0xb18>
 808b922:	4650      	mov	r0, sl
 808b924:	991c      	ldr	r1, [sp, #112]	; 0x70
 808b926:	f000 fd21 	bl	808c36c <_Bfree>
 808b92a:	4650      	mov	r0, sl
 808b92c:	9906      	ldr	r1, [sp, #24]
 808b92e:	f000 fd1d 	bl	808c36c <_Bfree>
 808b932:	4650      	mov	r0, sl
 808b934:	9904      	ldr	r1, [sp, #16]
 808b936:	f000 fd19 	bl	808c36c <_Bfree>
 808b93a:	4659      	mov	r1, fp
 808b93c:	4650      	mov	r0, sl
 808b93e:	f000 fd15 	bl	808c36c <_Bfree>
 808b942:	e61c      	b.n	808b57e <_strtod_l+0x64e>
 808b944:	f1b8 0f00 	cmp.w	r8, #0
 808b948:	d119      	bne.n	808b97e <_strtod_l+0xa4e>
 808b94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b94c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 808b950:	b9e3      	cbnz	r3, 808b98c <_strtod_l+0xa5c>
 808b952:	2200      	movs	r2, #0
 808b954:	4630      	mov	r0, r6
 808b956:	4639      	mov	r1, r7
 808b958:	4b3c      	ldr	r3, [pc, #240]	; (808ba4c <_strtod_l+0xb1c>)
 808b95a:	f7fe fd1d 	bl	808a398 <__aeabi_dcmplt>
 808b95e:	b9c8      	cbnz	r0, 808b994 <_strtod_l+0xa64>
 808b960:	2200      	movs	r2, #0
 808b962:	4630      	mov	r0, r6
 808b964:	4639      	mov	r1, r7
 808b966:	4b3c      	ldr	r3, [pc, #240]	; (808ba58 <_strtod_l+0xb28>)
 808b968:	f7fe faa4 	bl	8089eb4 <__aeabi_dmul>
 808b96c:	4604      	mov	r4, r0
 808b96e:	460d      	mov	r5, r1
 808b970:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808b974:	9418      	str	r4, [sp, #96]	; 0x60
 808b976:	9319      	str	r3, [sp, #100]	; 0x64
 808b978:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 808b97c:	e79d      	b.n	808b8ba <_strtod_l+0x98a>
 808b97e:	f1b8 0f01 	cmp.w	r8, #1
 808b982:	d103      	bne.n	808b98c <_strtod_l+0xa5c>
 808b984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808b986:	2b00      	cmp	r3, #0
 808b988:	f43f ad87 	beq.w	808b49a <_strtod_l+0x56a>
 808b98c:	2600      	movs	r6, #0
 808b98e:	2400      	movs	r4, #0
 808b990:	4f32      	ldr	r7, [pc, #200]	; (808ba5c <_strtod_l+0xb2c>)
 808b992:	e791      	b.n	808b8b8 <_strtod_l+0x988>
 808b994:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 808b996:	4d30      	ldr	r5, [pc, #192]	; (808ba58 <_strtod_l+0xb28>)
 808b998:	e7ea      	b.n	808b970 <_strtod_l+0xa40>
 808b99a:	4b2f      	ldr	r3, [pc, #188]	; (808ba58 <_strtod_l+0xb28>)
 808b99c:	2200      	movs	r2, #0
 808b99e:	4630      	mov	r0, r6
 808b9a0:	4639      	mov	r1, r7
 808b9a2:	f7fe fa87 	bl	8089eb4 <__aeabi_dmul>
 808b9a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b9a8:	4604      	mov	r4, r0
 808b9aa:	460d      	mov	r5, r1
 808b9ac:	b933      	cbnz	r3, 808b9bc <_strtod_l+0xa8c>
 808b9ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808b9b2:	9010      	str	r0, [sp, #64]	; 0x40
 808b9b4:	9311      	str	r3, [sp, #68]	; 0x44
 808b9b6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808b9ba:	e77e      	b.n	808b8ba <_strtod_l+0x98a>
 808b9bc:	4602      	mov	r2, r0
 808b9be:	460b      	mov	r3, r1
 808b9c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808b9c4:	e7f7      	b.n	808b9b6 <_strtod_l+0xa86>
 808b9c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 808b9ca:	9b05      	ldr	r3, [sp, #20]
 808b9cc:	2b00      	cmp	r3, #0
 808b9ce:	d1a8      	bne.n	808b922 <_strtod_l+0x9f2>
 808b9d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808b9d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808b9d6:	0d1b      	lsrs	r3, r3, #20
 808b9d8:	051b      	lsls	r3, r3, #20
 808b9da:	429a      	cmp	r2, r3
 808b9dc:	d1a1      	bne.n	808b922 <_strtod_l+0x9f2>
 808b9de:	4620      	mov	r0, r4
 808b9e0:	4629      	mov	r1, r5
 808b9e2:	f001 f8e3 	bl	808cbac <__aeabi_d2lz>
 808b9e6:	f7fe fa37 	bl	8089e58 <__aeabi_l2d>
 808b9ea:	4602      	mov	r2, r0
 808b9ec:	460b      	mov	r3, r1
 808b9ee:	4620      	mov	r0, r4
 808b9f0:	4629      	mov	r1, r5
 808b9f2:	f7fe f8a7 	bl	8089b44 <__aeabi_dsub>
 808b9f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 808b9f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808b9fc:	ea43 0308 	orr.w	r3, r3, r8
 808ba00:	4313      	orrs	r3, r2
 808ba02:	4604      	mov	r4, r0
 808ba04:	460d      	mov	r5, r1
 808ba06:	d066      	beq.n	808bad6 <_strtod_l+0xba6>
 808ba08:	a309      	add	r3, pc, #36	; (adr r3, 808ba30 <_strtod_l+0xb00>)
 808ba0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ba0e:	f7fe fcc3 	bl	808a398 <__aeabi_dcmplt>
 808ba12:	2800      	cmp	r0, #0
 808ba14:	f47f acda 	bne.w	808b3cc <_strtod_l+0x49c>
 808ba18:	a307      	add	r3, pc, #28	; (adr r3, 808ba38 <_strtod_l+0xb08>)
 808ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ba1e:	4620      	mov	r0, r4
 808ba20:	4629      	mov	r1, r5
 808ba22:	f7fe fcd7 	bl	808a3d4 <__aeabi_dcmpgt>
 808ba26:	2800      	cmp	r0, #0
 808ba28:	f43f af7b 	beq.w	808b922 <_strtod_l+0x9f2>
 808ba2c:	e4ce      	b.n	808b3cc <_strtod_l+0x49c>
 808ba2e:	bf00      	nop
 808ba30:	94a03595 	.word	0x94a03595
 808ba34:	3fdfffff 	.word	0x3fdfffff
 808ba38:	35afe535 	.word	0x35afe535
 808ba3c:	3fe00000 	.word	0x3fe00000
 808ba40:	000fffff 	.word	0x000fffff
 808ba44:	7ff00000 	.word	0x7ff00000
 808ba48:	7fefffff 	.word	0x7fefffff
 808ba4c:	3ff00000 	.word	0x3ff00000
 808ba50:	7fe00000 	.word	0x7fe00000
 808ba54:	7c9fffff 	.word	0x7c9fffff
 808ba58:	3fe00000 	.word	0x3fe00000
 808ba5c:	bff00000 	.word	0xbff00000
 808ba60:	9b05      	ldr	r3, [sp, #20]
 808ba62:	b313      	cbz	r3, 808baaa <_strtod_l+0xb7a>
 808ba64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808ba66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808ba6a:	d81e      	bhi.n	808baaa <_strtod_l+0xb7a>
 808ba6c:	a326      	add	r3, pc, #152	; (adr r3, 808bb08 <_strtod_l+0xbd8>)
 808ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808ba72:	4620      	mov	r0, r4
 808ba74:	4629      	mov	r1, r5
 808ba76:	f7fe fc99 	bl	808a3ac <__aeabi_dcmple>
 808ba7a:	b190      	cbz	r0, 808baa2 <_strtod_l+0xb72>
 808ba7c:	4629      	mov	r1, r5
 808ba7e:	4620      	mov	r0, r4
 808ba80:	f7fe fcf0 	bl	808a464 <__aeabi_d2uiz>
 808ba84:	2801      	cmp	r0, #1
 808ba86:	bf38      	it	cc
 808ba88:	2001      	movcc	r0, #1
 808ba8a:	f7fe f999 	bl	8089dc0 <__aeabi_ui2d>
 808ba8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808ba90:	4604      	mov	r4, r0
 808ba92:	460d      	mov	r5, r1
 808ba94:	b9d3      	cbnz	r3, 808bacc <_strtod_l+0xb9c>
 808ba96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808ba9a:	9012      	str	r0, [sp, #72]	; 0x48
 808ba9c:	9313      	str	r3, [sp, #76]	; 0x4c
 808ba9e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 808baa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808baa4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808baa8:	1a9f      	subs	r7, r3, r2
 808baaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808baae:	f000 ff27 	bl	808c900 <__ulp>
 808bab2:	4602      	mov	r2, r0
 808bab4:	460b      	mov	r3, r1
 808bab6:	4630      	mov	r0, r6
 808bab8:	4639      	mov	r1, r7
 808baba:	f7fe f9fb 	bl	8089eb4 <__aeabi_dmul>
 808babe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808bac2:	f7fe f841 	bl	8089b48 <__adddf3>
 808bac6:	4680      	mov	r8, r0
 808bac8:	4689      	mov	r9, r1
 808baca:	e77e      	b.n	808b9ca <_strtod_l+0xa9a>
 808bacc:	4602      	mov	r2, r0
 808bace:	460b      	mov	r3, r1
 808bad0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 808bad4:	e7e3      	b.n	808ba9e <_strtod_l+0xb6e>
 808bad6:	a30e      	add	r3, pc, #56	; (adr r3, 808bb10 <_strtod_l+0xbe0>)
 808bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808badc:	f7fe fc5c 	bl	808a398 <__aeabi_dcmplt>
 808bae0:	e7a1      	b.n	808ba26 <_strtod_l+0xaf6>
 808bae2:	2300      	movs	r3, #0
 808bae4:	930c      	str	r3, [sp, #48]	; 0x30
 808bae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808bae8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808baea:	6013      	str	r3, [r2, #0]
 808baec:	f7ff ba65 	b.w	808afba <_strtod_l+0x8a>
 808baf0:	2b65      	cmp	r3, #101	; 0x65
 808baf2:	f43f ab5c 	beq.w	808b1ae <_strtod_l+0x27e>
 808baf6:	2b45      	cmp	r3, #69	; 0x45
 808baf8:	f43f ab59 	beq.w	808b1ae <_strtod_l+0x27e>
 808bafc:	2201      	movs	r2, #1
 808bafe:	f7ff bb8d 	b.w	808b21c <_strtod_l+0x2ec>
 808bb02:	bf00      	nop
 808bb04:	f3af 8000 	nop.w
 808bb08:	ffc00000 	.word	0xffc00000
 808bb0c:	41dfffff 	.word	0x41dfffff
 808bb10:	94a03595 	.word	0x94a03595
 808bb14:	3fcfffff 	.word	0x3fcfffff

0808bb18 <strtod>:
 808bb18:	460a      	mov	r2, r1
 808bb1a:	4601      	mov	r1, r0
 808bb1c:	4802      	ldr	r0, [pc, #8]	; (808bb28 <strtod+0x10>)
 808bb1e:	4b03      	ldr	r3, [pc, #12]	; (808bb2c <strtod+0x14>)
 808bb20:	6800      	ldr	r0, [r0, #0]
 808bb22:	f7ff ba05 	b.w	808af30 <_strtod_l>
 808bb26:	bf00      	nop
 808bb28:	200000d8 	.word	0x200000d8
 808bb2c:	20000140 	.word	0x20000140

0808bb30 <_strtol_l.isra.0>:
 808bb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808bb34:	468c      	mov	ip, r1
 808bb36:	4686      	mov	lr, r0
 808bb38:	4e39      	ldr	r6, [pc, #228]	; (808bc20 <_strtol_l.isra.0+0xf0>)
 808bb3a:	4660      	mov	r0, ip
 808bb3c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808bb40:	5da5      	ldrb	r5, [r4, r6]
 808bb42:	f015 0508 	ands.w	r5, r5, #8
 808bb46:	d1f8      	bne.n	808bb3a <_strtol_l.isra.0+0xa>
 808bb48:	2c2d      	cmp	r4, #45	; 0x2d
 808bb4a:	d133      	bne.n	808bbb4 <_strtol_l.isra.0+0x84>
 808bb4c:	f04f 0801 	mov.w	r8, #1
 808bb50:	f89c 4000 	ldrb.w	r4, [ip]
 808bb54:	f100 0c02 	add.w	ip, r0, #2
 808bb58:	2b00      	cmp	r3, #0
 808bb5a:	d05c      	beq.n	808bc16 <_strtol_l.isra.0+0xe6>
 808bb5c:	2b10      	cmp	r3, #16
 808bb5e:	d10c      	bne.n	808bb7a <_strtol_l.isra.0+0x4a>
 808bb60:	2c30      	cmp	r4, #48	; 0x30
 808bb62:	d10a      	bne.n	808bb7a <_strtol_l.isra.0+0x4a>
 808bb64:	f89c 0000 	ldrb.w	r0, [ip]
 808bb68:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808bb6c:	2858      	cmp	r0, #88	; 0x58
 808bb6e:	d14d      	bne.n	808bc0c <_strtol_l.isra.0+0xdc>
 808bb70:	2310      	movs	r3, #16
 808bb72:	f89c 4001 	ldrb.w	r4, [ip, #1]
 808bb76:	f10c 0c02 	add.w	ip, ip, #2
 808bb7a:	2600      	movs	r6, #0
 808bb7c:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 808bb80:	3f01      	subs	r7, #1
 808bb82:	fbb7 f9f3 	udiv	r9, r7, r3
 808bb86:	4630      	mov	r0, r6
 808bb88:	fb03 7a19 	mls	sl, r3, r9, r7
 808bb8c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 808bb90:	2d09      	cmp	r5, #9
 808bb92:	d818      	bhi.n	808bbc6 <_strtol_l.isra.0+0x96>
 808bb94:	462c      	mov	r4, r5
 808bb96:	42a3      	cmp	r3, r4
 808bb98:	dd24      	ble.n	808bbe4 <_strtol_l.isra.0+0xb4>
 808bb9a:	1c75      	adds	r5, r6, #1
 808bb9c:	d007      	beq.n	808bbae <_strtol_l.isra.0+0x7e>
 808bb9e:	4581      	cmp	r9, r0
 808bba0:	d31d      	bcc.n	808bbde <_strtol_l.isra.0+0xae>
 808bba2:	d101      	bne.n	808bba8 <_strtol_l.isra.0+0x78>
 808bba4:	45a2      	cmp	sl, r4
 808bba6:	db1a      	blt.n	808bbde <_strtol_l.isra.0+0xae>
 808bba8:	2601      	movs	r6, #1
 808bbaa:	fb00 4003 	mla	r0, r0, r3, r4
 808bbae:	f81c 4b01 	ldrb.w	r4, [ip], #1
 808bbb2:	e7eb      	b.n	808bb8c <_strtol_l.isra.0+0x5c>
 808bbb4:	2c2b      	cmp	r4, #43	; 0x2b
 808bbb6:	bf08      	it	eq
 808bbb8:	f89c 4000 	ldrbeq.w	r4, [ip]
 808bbbc:	46a8      	mov	r8, r5
 808bbbe:	bf08      	it	eq
 808bbc0:	f100 0c02 	addeq.w	ip, r0, #2
 808bbc4:	e7c8      	b.n	808bb58 <_strtol_l.isra.0+0x28>
 808bbc6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 808bbca:	2d19      	cmp	r5, #25
 808bbcc:	d801      	bhi.n	808bbd2 <_strtol_l.isra.0+0xa2>
 808bbce:	3c37      	subs	r4, #55	; 0x37
 808bbd0:	e7e1      	b.n	808bb96 <_strtol_l.isra.0+0x66>
 808bbd2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 808bbd6:	2d19      	cmp	r5, #25
 808bbd8:	d804      	bhi.n	808bbe4 <_strtol_l.isra.0+0xb4>
 808bbda:	3c57      	subs	r4, #87	; 0x57
 808bbdc:	e7db      	b.n	808bb96 <_strtol_l.isra.0+0x66>
 808bbde:	f04f 36ff 	mov.w	r6, #4294967295
 808bbe2:	e7e4      	b.n	808bbae <_strtol_l.isra.0+0x7e>
 808bbe4:	1c73      	adds	r3, r6, #1
 808bbe6:	d106      	bne.n	808bbf6 <_strtol_l.isra.0+0xc6>
 808bbe8:	2322      	movs	r3, #34	; 0x22
 808bbea:	4638      	mov	r0, r7
 808bbec:	f8ce 3000 	str.w	r3, [lr]
 808bbf0:	b942      	cbnz	r2, 808bc04 <_strtol_l.isra.0+0xd4>
 808bbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808bbf6:	f1b8 0f00 	cmp.w	r8, #0
 808bbfa:	d000      	beq.n	808bbfe <_strtol_l.isra.0+0xce>
 808bbfc:	4240      	negs	r0, r0
 808bbfe:	2a00      	cmp	r2, #0
 808bc00:	d0f7      	beq.n	808bbf2 <_strtol_l.isra.0+0xc2>
 808bc02:	b10e      	cbz	r6, 808bc08 <_strtol_l.isra.0+0xd8>
 808bc04:	f10c 31ff 	add.w	r1, ip, #4294967295
 808bc08:	6011      	str	r1, [r2, #0]
 808bc0a:	e7f2      	b.n	808bbf2 <_strtol_l.isra.0+0xc2>
 808bc0c:	2430      	movs	r4, #48	; 0x30
 808bc0e:	2b00      	cmp	r3, #0
 808bc10:	d1b3      	bne.n	808bb7a <_strtol_l.isra.0+0x4a>
 808bc12:	2308      	movs	r3, #8
 808bc14:	e7b1      	b.n	808bb7a <_strtol_l.isra.0+0x4a>
 808bc16:	2c30      	cmp	r4, #48	; 0x30
 808bc18:	d0a4      	beq.n	808bb64 <_strtol_l.isra.0+0x34>
 808bc1a:	230a      	movs	r3, #10
 808bc1c:	e7ad      	b.n	808bb7a <_strtol_l.isra.0+0x4a>
 808bc1e:	bf00      	nop
 808bc20:	0808edf1 	.word	0x0808edf1

0808bc24 <strtol>:
 808bc24:	4613      	mov	r3, r2
 808bc26:	460a      	mov	r2, r1
 808bc28:	4601      	mov	r1, r0
 808bc2a:	4802      	ldr	r0, [pc, #8]	; (808bc34 <strtol+0x10>)
 808bc2c:	6800      	ldr	r0, [r0, #0]
 808bc2e:	f7ff bf7f 	b.w	808bb30 <_strtol_l.isra.0>
 808bc32:	bf00      	nop
 808bc34:	200000d8 	.word	0x200000d8

0808bc38 <rshift>:
 808bc38:	6903      	ldr	r3, [r0, #16]
 808bc3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808bc3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 808bc42:	f100 0414 	add.w	r4, r0, #20
 808bc46:	ea4f 1261 	mov.w	r2, r1, asr #5
 808bc4a:	dd46      	ble.n	808bcda <rshift+0xa2>
 808bc4c:	f011 011f 	ands.w	r1, r1, #31
 808bc50:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 808bc54:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 808bc58:	d10c      	bne.n	808bc74 <rshift+0x3c>
 808bc5a:	4629      	mov	r1, r5
 808bc5c:	f100 0710 	add.w	r7, r0, #16
 808bc60:	42b1      	cmp	r1, r6
 808bc62:	d335      	bcc.n	808bcd0 <rshift+0x98>
 808bc64:	1a9b      	subs	r3, r3, r2
 808bc66:	009b      	lsls	r3, r3, #2
 808bc68:	1eea      	subs	r2, r5, #3
 808bc6a:	4296      	cmp	r6, r2
 808bc6c:	bf38      	it	cc
 808bc6e:	2300      	movcc	r3, #0
 808bc70:	4423      	add	r3, r4
 808bc72:	e015      	b.n	808bca0 <rshift+0x68>
 808bc74:	46a1      	mov	r9, r4
 808bc76:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 808bc7a:	f1c1 0820 	rsb	r8, r1, #32
 808bc7e:	40cf      	lsrs	r7, r1
 808bc80:	f105 0e04 	add.w	lr, r5, #4
 808bc84:	4576      	cmp	r6, lr
 808bc86:	46f4      	mov	ip, lr
 808bc88:	d816      	bhi.n	808bcb8 <rshift+0x80>
 808bc8a:	1a9b      	subs	r3, r3, r2
 808bc8c:	009a      	lsls	r2, r3, #2
 808bc8e:	3a04      	subs	r2, #4
 808bc90:	3501      	adds	r5, #1
 808bc92:	42ae      	cmp	r6, r5
 808bc94:	bf38      	it	cc
 808bc96:	2200      	movcc	r2, #0
 808bc98:	18a3      	adds	r3, r4, r2
 808bc9a:	50a7      	str	r7, [r4, r2]
 808bc9c:	b107      	cbz	r7, 808bca0 <rshift+0x68>
 808bc9e:	3304      	adds	r3, #4
 808bca0:	42a3      	cmp	r3, r4
 808bca2:	eba3 0204 	sub.w	r2, r3, r4
 808bca6:	bf08      	it	eq
 808bca8:	2300      	moveq	r3, #0
 808bcaa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 808bcae:	6102      	str	r2, [r0, #16]
 808bcb0:	bf08      	it	eq
 808bcb2:	6143      	streq	r3, [r0, #20]
 808bcb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808bcb8:	f8dc c000 	ldr.w	ip, [ip]
 808bcbc:	fa0c fc08 	lsl.w	ip, ip, r8
 808bcc0:	ea4c 0707 	orr.w	r7, ip, r7
 808bcc4:	f849 7b04 	str.w	r7, [r9], #4
 808bcc8:	f85e 7b04 	ldr.w	r7, [lr], #4
 808bccc:	40cf      	lsrs	r7, r1
 808bcce:	e7d9      	b.n	808bc84 <rshift+0x4c>
 808bcd0:	f851 cb04 	ldr.w	ip, [r1], #4
 808bcd4:	f847 cf04 	str.w	ip, [r7, #4]!
 808bcd8:	e7c2      	b.n	808bc60 <rshift+0x28>
 808bcda:	4623      	mov	r3, r4
 808bcdc:	e7e0      	b.n	808bca0 <rshift+0x68>

0808bcde <__hexdig_fun>:
 808bcde:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808bce2:	2b09      	cmp	r3, #9
 808bce4:	d802      	bhi.n	808bcec <__hexdig_fun+0xe>
 808bce6:	3820      	subs	r0, #32
 808bce8:	b2c0      	uxtb	r0, r0
 808bcea:	4770      	bx	lr
 808bcec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808bcf0:	2b05      	cmp	r3, #5
 808bcf2:	d801      	bhi.n	808bcf8 <__hexdig_fun+0x1a>
 808bcf4:	3847      	subs	r0, #71	; 0x47
 808bcf6:	e7f7      	b.n	808bce8 <__hexdig_fun+0xa>
 808bcf8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808bcfc:	2b05      	cmp	r3, #5
 808bcfe:	d801      	bhi.n	808bd04 <__hexdig_fun+0x26>
 808bd00:	3827      	subs	r0, #39	; 0x27
 808bd02:	e7f1      	b.n	808bce8 <__hexdig_fun+0xa>
 808bd04:	2000      	movs	r0, #0
 808bd06:	4770      	bx	lr

0808bd08 <__gethex>:
 808bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bd0c:	b08b      	sub	sp, #44	; 0x2c
 808bd0e:	9306      	str	r3, [sp, #24]
 808bd10:	4bba      	ldr	r3, [pc, #744]	; (808bffc <__gethex+0x2f4>)
 808bd12:	9002      	str	r0, [sp, #8]
 808bd14:	681b      	ldr	r3, [r3, #0]
 808bd16:	468b      	mov	fp, r1
 808bd18:	4618      	mov	r0, r3
 808bd1a:	4690      	mov	r8, r2
 808bd1c:	9303      	str	r3, [sp, #12]
 808bd1e:	f7ff f8a0 	bl	808ae62 <strlen>
 808bd22:	4682      	mov	sl, r0
 808bd24:	9b03      	ldr	r3, [sp, #12]
 808bd26:	f8db 2000 	ldr.w	r2, [fp]
 808bd2a:	4403      	add	r3, r0
 808bd2c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808bd30:	9307      	str	r3, [sp, #28]
 808bd32:	1c93      	adds	r3, r2, #2
 808bd34:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 808bd38:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 808bd3c:	32fe      	adds	r2, #254	; 0xfe
 808bd3e:	18d1      	adds	r1, r2, r3
 808bd40:	461f      	mov	r7, r3
 808bd42:	f813 0b01 	ldrb.w	r0, [r3], #1
 808bd46:	9101      	str	r1, [sp, #4]
 808bd48:	2830      	cmp	r0, #48	; 0x30
 808bd4a:	d0f8      	beq.n	808bd3e <__gethex+0x36>
 808bd4c:	f7ff ffc7 	bl	808bcde <__hexdig_fun>
 808bd50:	4604      	mov	r4, r0
 808bd52:	2800      	cmp	r0, #0
 808bd54:	d13a      	bne.n	808bdcc <__gethex+0xc4>
 808bd56:	4652      	mov	r2, sl
 808bd58:	4638      	mov	r0, r7
 808bd5a:	9903      	ldr	r1, [sp, #12]
 808bd5c:	f7ff f889 	bl	808ae72 <strncmp>
 808bd60:	4605      	mov	r5, r0
 808bd62:	2800      	cmp	r0, #0
 808bd64:	d166      	bne.n	808be34 <__gethex+0x12c>
 808bd66:	f817 000a 	ldrb.w	r0, [r7, sl]
 808bd6a:	eb07 060a 	add.w	r6, r7, sl
 808bd6e:	f7ff ffb6 	bl	808bcde <__hexdig_fun>
 808bd72:	2800      	cmp	r0, #0
 808bd74:	d060      	beq.n	808be38 <__gethex+0x130>
 808bd76:	4633      	mov	r3, r6
 808bd78:	7818      	ldrb	r0, [r3, #0]
 808bd7a:	461f      	mov	r7, r3
 808bd7c:	2830      	cmp	r0, #48	; 0x30
 808bd7e:	f103 0301 	add.w	r3, r3, #1
 808bd82:	d0f9      	beq.n	808bd78 <__gethex+0x70>
 808bd84:	f7ff ffab 	bl	808bcde <__hexdig_fun>
 808bd88:	2301      	movs	r3, #1
 808bd8a:	fab0 f480 	clz	r4, r0
 808bd8e:	4635      	mov	r5, r6
 808bd90:	0964      	lsrs	r4, r4, #5
 808bd92:	9301      	str	r3, [sp, #4]
 808bd94:	463a      	mov	r2, r7
 808bd96:	4616      	mov	r6, r2
 808bd98:	7830      	ldrb	r0, [r6, #0]
 808bd9a:	3201      	adds	r2, #1
 808bd9c:	f7ff ff9f 	bl	808bcde <__hexdig_fun>
 808bda0:	2800      	cmp	r0, #0
 808bda2:	d1f8      	bne.n	808bd96 <__gethex+0x8e>
 808bda4:	4652      	mov	r2, sl
 808bda6:	4630      	mov	r0, r6
 808bda8:	9903      	ldr	r1, [sp, #12]
 808bdaa:	f7ff f862 	bl	808ae72 <strncmp>
 808bdae:	b980      	cbnz	r0, 808bdd2 <__gethex+0xca>
 808bdb0:	b94d      	cbnz	r5, 808bdc6 <__gethex+0xbe>
 808bdb2:	eb06 050a 	add.w	r5, r6, sl
 808bdb6:	462a      	mov	r2, r5
 808bdb8:	4616      	mov	r6, r2
 808bdba:	7830      	ldrb	r0, [r6, #0]
 808bdbc:	3201      	adds	r2, #1
 808bdbe:	f7ff ff8e 	bl	808bcde <__hexdig_fun>
 808bdc2:	2800      	cmp	r0, #0
 808bdc4:	d1f8      	bne.n	808bdb8 <__gethex+0xb0>
 808bdc6:	1bad      	subs	r5, r5, r6
 808bdc8:	00ad      	lsls	r5, r5, #2
 808bdca:	e004      	b.n	808bdd6 <__gethex+0xce>
 808bdcc:	2400      	movs	r4, #0
 808bdce:	4625      	mov	r5, r4
 808bdd0:	e7e0      	b.n	808bd94 <__gethex+0x8c>
 808bdd2:	2d00      	cmp	r5, #0
 808bdd4:	d1f7      	bne.n	808bdc6 <__gethex+0xbe>
 808bdd6:	7833      	ldrb	r3, [r6, #0]
 808bdd8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 808bddc:	2b50      	cmp	r3, #80	; 0x50
 808bdde:	d139      	bne.n	808be54 <__gethex+0x14c>
 808bde0:	7873      	ldrb	r3, [r6, #1]
 808bde2:	2b2b      	cmp	r3, #43	; 0x2b
 808bde4:	d02a      	beq.n	808be3c <__gethex+0x134>
 808bde6:	2b2d      	cmp	r3, #45	; 0x2d
 808bde8:	d02c      	beq.n	808be44 <__gethex+0x13c>
 808bdea:	f04f 0900 	mov.w	r9, #0
 808bdee:	1c71      	adds	r1, r6, #1
 808bdf0:	7808      	ldrb	r0, [r1, #0]
 808bdf2:	f7ff ff74 	bl	808bcde <__hexdig_fun>
 808bdf6:	1e43      	subs	r3, r0, #1
 808bdf8:	b2db      	uxtb	r3, r3
 808bdfa:	2b18      	cmp	r3, #24
 808bdfc:	d82a      	bhi.n	808be54 <__gethex+0x14c>
 808bdfe:	f1a0 0210 	sub.w	r2, r0, #16
 808be02:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808be06:	f7ff ff6a 	bl	808bcde <__hexdig_fun>
 808be0a:	1e43      	subs	r3, r0, #1
 808be0c:	b2db      	uxtb	r3, r3
 808be0e:	2b18      	cmp	r3, #24
 808be10:	d91b      	bls.n	808be4a <__gethex+0x142>
 808be12:	f1b9 0f00 	cmp.w	r9, #0
 808be16:	d000      	beq.n	808be1a <__gethex+0x112>
 808be18:	4252      	negs	r2, r2
 808be1a:	4415      	add	r5, r2
 808be1c:	f8cb 1000 	str.w	r1, [fp]
 808be20:	b1d4      	cbz	r4, 808be58 <__gethex+0x150>
 808be22:	9b01      	ldr	r3, [sp, #4]
 808be24:	2b00      	cmp	r3, #0
 808be26:	bf14      	ite	ne
 808be28:	2700      	movne	r7, #0
 808be2a:	2706      	moveq	r7, #6
 808be2c:	4638      	mov	r0, r7
 808be2e:	b00b      	add	sp, #44	; 0x2c
 808be30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808be34:	463e      	mov	r6, r7
 808be36:	4625      	mov	r5, r4
 808be38:	2401      	movs	r4, #1
 808be3a:	e7cc      	b.n	808bdd6 <__gethex+0xce>
 808be3c:	f04f 0900 	mov.w	r9, #0
 808be40:	1cb1      	adds	r1, r6, #2
 808be42:	e7d5      	b.n	808bdf0 <__gethex+0xe8>
 808be44:	f04f 0901 	mov.w	r9, #1
 808be48:	e7fa      	b.n	808be40 <__gethex+0x138>
 808be4a:	230a      	movs	r3, #10
 808be4c:	fb03 0202 	mla	r2, r3, r2, r0
 808be50:	3a10      	subs	r2, #16
 808be52:	e7d6      	b.n	808be02 <__gethex+0xfa>
 808be54:	4631      	mov	r1, r6
 808be56:	e7e1      	b.n	808be1c <__gethex+0x114>
 808be58:	4621      	mov	r1, r4
 808be5a:	1bf3      	subs	r3, r6, r7
 808be5c:	3b01      	subs	r3, #1
 808be5e:	2b07      	cmp	r3, #7
 808be60:	dc50      	bgt.n	808bf04 <__gethex+0x1fc>
 808be62:	9802      	ldr	r0, [sp, #8]
 808be64:	f000 fa4e 	bl	808c304 <_Balloc>
 808be68:	f04f 0b00 	mov.w	fp, #0
 808be6c:	4604      	mov	r4, r0
 808be6e:	f100 0914 	add.w	r9, r0, #20
 808be72:	f1ca 0301 	rsb	r3, sl, #1
 808be76:	f8cd 9010 	str.w	r9, [sp, #16]
 808be7a:	f8cd b004 	str.w	fp, [sp, #4]
 808be7e:	9308      	str	r3, [sp, #32]
 808be80:	42b7      	cmp	r7, r6
 808be82:	d342      	bcc.n	808bf0a <__gethex+0x202>
 808be84:	9f04      	ldr	r7, [sp, #16]
 808be86:	9b01      	ldr	r3, [sp, #4]
 808be88:	f847 3b04 	str.w	r3, [r7], #4
 808be8c:	eba7 0709 	sub.w	r7, r7, r9
 808be90:	10bf      	asrs	r7, r7, #2
 808be92:	6127      	str	r7, [r4, #16]
 808be94:	4618      	mov	r0, r3
 808be96:	f000 fafc 	bl	808c492 <__hi0bits>
 808be9a:	017f      	lsls	r7, r7, #5
 808be9c:	f8d8 6000 	ldr.w	r6, [r8]
 808bea0:	1a3f      	subs	r7, r7, r0
 808bea2:	42b7      	cmp	r7, r6
 808bea4:	dd65      	ble.n	808bf72 <__gethex+0x26a>
 808bea6:	1bbf      	subs	r7, r7, r6
 808bea8:	4639      	mov	r1, r7
 808beaa:	4620      	mov	r0, r4
 808beac:	f000 fe42 	bl	808cb34 <__any_on>
 808beb0:	4682      	mov	sl, r0
 808beb2:	b1a8      	cbz	r0, 808bee0 <__gethex+0x1d8>
 808beb4:	f04f 0a01 	mov.w	sl, #1
 808beb8:	1e7b      	subs	r3, r7, #1
 808beba:	1159      	asrs	r1, r3, #5
 808bebc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 808bec0:	f003 021f 	and.w	r2, r3, #31
 808bec4:	fa0a f202 	lsl.w	r2, sl, r2
 808bec8:	420a      	tst	r2, r1
 808beca:	d009      	beq.n	808bee0 <__gethex+0x1d8>
 808becc:	4553      	cmp	r3, sl
 808bece:	dd05      	ble.n	808bedc <__gethex+0x1d4>
 808bed0:	4620      	mov	r0, r4
 808bed2:	1eb9      	subs	r1, r7, #2
 808bed4:	f000 fe2e 	bl	808cb34 <__any_on>
 808bed8:	2800      	cmp	r0, #0
 808beda:	d147      	bne.n	808bf6c <__gethex+0x264>
 808bedc:	f04f 0a02 	mov.w	sl, #2
 808bee0:	4639      	mov	r1, r7
 808bee2:	4620      	mov	r0, r4
 808bee4:	f7ff fea8 	bl	808bc38 <rshift>
 808bee8:	443d      	add	r5, r7
 808beea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808beee:	42ab      	cmp	r3, r5
 808bef0:	da4d      	bge.n	808bf8e <__gethex+0x286>
 808bef2:	4621      	mov	r1, r4
 808bef4:	9802      	ldr	r0, [sp, #8]
 808bef6:	f000 fa39 	bl	808c36c <_Bfree>
 808befa:	2300      	movs	r3, #0
 808befc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808befe:	27a3      	movs	r7, #163	; 0xa3
 808bf00:	6013      	str	r3, [r2, #0]
 808bf02:	e793      	b.n	808be2c <__gethex+0x124>
 808bf04:	3101      	adds	r1, #1
 808bf06:	105b      	asrs	r3, r3, #1
 808bf08:	e7a9      	b.n	808be5e <__gethex+0x156>
 808bf0a:	1e73      	subs	r3, r6, #1
 808bf0c:	9a07      	ldr	r2, [sp, #28]
 808bf0e:	9305      	str	r3, [sp, #20]
 808bf10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808bf14:	4293      	cmp	r3, r2
 808bf16:	d019      	beq.n	808bf4c <__gethex+0x244>
 808bf18:	f1bb 0f20 	cmp.w	fp, #32
 808bf1c:	d107      	bne.n	808bf2e <__gethex+0x226>
 808bf1e:	9b04      	ldr	r3, [sp, #16]
 808bf20:	9a01      	ldr	r2, [sp, #4]
 808bf22:	f843 2b04 	str.w	r2, [r3], #4
 808bf26:	9304      	str	r3, [sp, #16]
 808bf28:	2300      	movs	r3, #0
 808bf2a:	469b      	mov	fp, r3
 808bf2c:	9301      	str	r3, [sp, #4]
 808bf2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808bf32:	f7ff fed4 	bl	808bcde <__hexdig_fun>
 808bf36:	9b01      	ldr	r3, [sp, #4]
 808bf38:	f000 000f 	and.w	r0, r0, #15
 808bf3c:	fa00 f00b 	lsl.w	r0, r0, fp
 808bf40:	4303      	orrs	r3, r0
 808bf42:	9301      	str	r3, [sp, #4]
 808bf44:	f10b 0b04 	add.w	fp, fp, #4
 808bf48:	9b05      	ldr	r3, [sp, #20]
 808bf4a:	e00d      	b.n	808bf68 <__gethex+0x260>
 808bf4c:	9b05      	ldr	r3, [sp, #20]
 808bf4e:	9a08      	ldr	r2, [sp, #32]
 808bf50:	4413      	add	r3, r2
 808bf52:	42bb      	cmp	r3, r7
 808bf54:	d3e0      	bcc.n	808bf18 <__gethex+0x210>
 808bf56:	4618      	mov	r0, r3
 808bf58:	4652      	mov	r2, sl
 808bf5a:	9903      	ldr	r1, [sp, #12]
 808bf5c:	9309      	str	r3, [sp, #36]	; 0x24
 808bf5e:	f7fe ff88 	bl	808ae72 <strncmp>
 808bf62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808bf64:	2800      	cmp	r0, #0
 808bf66:	d1d7      	bne.n	808bf18 <__gethex+0x210>
 808bf68:	461e      	mov	r6, r3
 808bf6a:	e789      	b.n	808be80 <__gethex+0x178>
 808bf6c:	f04f 0a03 	mov.w	sl, #3
 808bf70:	e7b6      	b.n	808bee0 <__gethex+0x1d8>
 808bf72:	da09      	bge.n	808bf88 <__gethex+0x280>
 808bf74:	1bf7      	subs	r7, r6, r7
 808bf76:	4621      	mov	r1, r4
 808bf78:	463a      	mov	r2, r7
 808bf7a:	9802      	ldr	r0, [sp, #8]
 808bf7c:	f000 fbca 	bl	808c714 <__lshift>
 808bf80:	4604      	mov	r4, r0
 808bf82:	1bed      	subs	r5, r5, r7
 808bf84:	f100 0914 	add.w	r9, r0, #20
 808bf88:	f04f 0a00 	mov.w	sl, #0
 808bf8c:	e7ad      	b.n	808beea <__gethex+0x1e2>
 808bf8e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808bf92:	42a8      	cmp	r0, r5
 808bf94:	dd6e      	ble.n	808c074 <__gethex+0x36c>
 808bf96:	1b45      	subs	r5, r0, r5
 808bf98:	42ae      	cmp	r6, r5
 808bf9a:	dc31      	bgt.n	808c000 <__gethex+0x2f8>
 808bf9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808bfa0:	2b02      	cmp	r3, #2
 808bfa2:	d022      	beq.n	808bfea <__gethex+0x2e2>
 808bfa4:	2b03      	cmp	r3, #3
 808bfa6:	d024      	beq.n	808bff2 <__gethex+0x2ea>
 808bfa8:	2b01      	cmp	r3, #1
 808bfaa:	d115      	bne.n	808bfd8 <__gethex+0x2d0>
 808bfac:	42ae      	cmp	r6, r5
 808bfae:	d113      	bne.n	808bfd8 <__gethex+0x2d0>
 808bfb0:	2e01      	cmp	r6, #1
 808bfb2:	d10b      	bne.n	808bfcc <__gethex+0x2c4>
 808bfb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808bfb8:	9a06      	ldr	r2, [sp, #24]
 808bfba:	2762      	movs	r7, #98	; 0x62
 808bfbc:	6013      	str	r3, [r2, #0]
 808bfbe:	2301      	movs	r3, #1
 808bfc0:	6123      	str	r3, [r4, #16]
 808bfc2:	f8c9 3000 	str.w	r3, [r9]
 808bfc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808bfc8:	601c      	str	r4, [r3, #0]
 808bfca:	e72f      	b.n	808be2c <__gethex+0x124>
 808bfcc:	4620      	mov	r0, r4
 808bfce:	1e71      	subs	r1, r6, #1
 808bfd0:	f000 fdb0 	bl	808cb34 <__any_on>
 808bfd4:	2800      	cmp	r0, #0
 808bfd6:	d1ed      	bne.n	808bfb4 <__gethex+0x2ac>
 808bfd8:	4621      	mov	r1, r4
 808bfda:	9802      	ldr	r0, [sp, #8]
 808bfdc:	f000 f9c6 	bl	808c36c <_Bfree>
 808bfe0:	2300      	movs	r3, #0
 808bfe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808bfe4:	2750      	movs	r7, #80	; 0x50
 808bfe6:	6013      	str	r3, [r2, #0]
 808bfe8:	e720      	b.n	808be2c <__gethex+0x124>
 808bfea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808bfec:	2b00      	cmp	r3, #0
 808bfee:	d1f3      	bne.n	808bfd8 <__gethex+0x2d0>
 808bff0:	e7e0      	b.n	808bfb4 <__gethex+0x2ac>
 808bff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808bff4:	2b00      	cmp	r3, #0
 808bff6:	d1dd      	bne.n	808bfb4 <__gethex+0x2ac>
 808bff8:	e7ee      	b.n	808bfd8 <__gethex+0x2d0>
 808bffa:	bf00      	nop
 808bffc:	0808eef4 	.word	0x0808eef4
 808c000:	1e6f      	subs	r7, r5, #1
 808c002:	f1ba 0f00 	cmp.w	sl, #0
 808c006:	d132      	bne.n	808c06e <__gethex+0x366>
 808c008:	b127      	cbz	r7, 808c014 <__gethex+0x30c>
 808c00a:	4639      	mov	r1, r7
 808c00c:	4620      	mov	r0, r4
 808c00e:	f000 fd91 	bl	808cb34 <__any_on>
 808c012:	4682      	mov	sl, r0
 808c014:	2101      	movs	r1, #1
 808c016:	117b      	asrs	r3, r7, #5
 808c018:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 808c01c:	f007 071f 	and.w	r7, r7, #31
 808c020:	fa01 f707 	lsl.w	r7, r1, r7
 808c024:	421f      	tst	r7, r3
 808c026:	f04f 0702 	mov.w	r7, #2
 808c02a:	4629      	mov	r1, r5
 808c02c:	4620      	mov	r0, r4
 808c02e:	bf18      	it	ne
 808c030:	f04a 0a02 	orrne.w	sl, sl, #2
 808c034:	1b76      	subs	r6, r6, r5
 808c036:	f7ff fdff 	bl	808bc38 <rshift>
 808c03a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 808c03e:	f1ba 0f00 	cmp.w	sl, #0
 808c042:	d048      	beq.n	808c0d6 <__gethex+0x3ce>
 808c044:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808c048:	2b02      	cmp	r3, #2
 808c04a:	d015      	beq.n	808c078 <__gethex+0x370>
 808c04c:	2b03      	cmp	r3, #3
 808c04e:	d017      	beq.n	808c080 <__gethex+0x378>
 808c050:	2b01      	cmp	r3, #1
 808c052:	d109      	bne.n	808c068 <__gethex+0x360>
 808c054:	f01a 0f02 	tst.w	sl, #2
 808c058:	d006      	beq.n	808c068 <__gethex+0x360>
 808c05a:	f8d9 0000 	ldr.w	r0, [r9]
 808c05e:	ea4a 0a00 	orr.w	sl, sl, r0
 808c062:	f01a 0f01 	tst.w	sl, #1
 808c066:	d10e      	bne.n	808c086 <__gethex+0x37e>
 808c068:	f047 0710 	orr.w	r7, r7, #16
 808c06c:	e033      	b.n	808c0d6 <__gethex+0x3ce>
 808c06e:	f04f 0a01 	mov.w	sl, #1
 808c072:	e7cf      	b.n	808c014 <__gethex+0x30c>
 808c074:	2701      	movs	r7, #1
 808c076:	e7e2      	b.n	808c03e <__gethex+0x336>
 808c078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c07a:	f1c3 0301 	rsb	r3, r3, #1
 808c07e:	9315      	str	r3, [sp, #84]	; 0x54
 808c080:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c082:	2b00      	cmp	r3, #0
 808c084:	d0f0      	beq.n	808c068 <__gethex+0x360>
 808c086:	f04f 0c00 	mov.w	ip, #0
 808c08a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808c08e:	f104 0314 	add.w	r3, r4, #20
 808c092:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 808c096:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 808c09a:	4618      	mov	r0, r3
 808c09c:	f853 2b04 	ldr.w	r2, [r3], #4
 808c0a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 808c0a4:	d01c      	beq.n	808c0e0 <__gethex+0x3d8>
 808c0a6:	3201      	adds	r2, #1
 808c0a8:	6002      	str	r2, [r0, #0]
 808c0aa:	2f02      	cmp	r7, #2
 808c0ac:	f104 0314 	add.w	r3, r4, #20
 808c0b0:	d138      	bne.n	808c124 <__gethex+0x41c>
 808c0b2:	f8d8 2000 	ldr.w	r2, [r8]
 808c0b6:	3a01      	subs	r2, #1
 808c0b8:	42b2      	cmp	r2, r6
 808c0ba:	d10a      	bne.n	808c0d2 <__gethex+0x3ca>
 808c0bc:	2201      	movs	r2, #1
 808c0be:	1171      	asrs	r1, r6, #5
 808c0c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808c0c4:	f006 061f 	and.w	r6, r6, #31
 808c0c8:	fa02 f606 	lsl.w	r6, r2, r6
 808c0cc:	421e      	tst	r6, r3
 808c0ce:	bf18      	it	ne
 808c0d0:	4617      	movne	r7, r2
 808c0d2:	f047 0720 	orr.w	r7, r7, #32
 808c0d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808c0d8:	601c      	str	r4, [r3, #0]
 808c0da:	9b06      	ldr	r3, [sp, #24]
 808c0dc:	601d      	str	r5, [r3, #0]
 808c0de:	e6a5      	b.n	808be2c <__gethex+0x124>
 808c0e0:	4299      	cmp	r1, r3
 808c0e2:	f843 cc04 	str.w	ip, [r3, #-4]
 808c0e6:	d8d8      	bhi.n	808c09a <__gethex+0x392>
 808c0e8:	68a3      	ldr	r3, [r4, #8]
 808c0ea:	4599      	cmp	r9, r3
 808c0ec:	db12      	blt.n	808c114 <__gethex+0x40c>
 808c0ee:	6861      	ldr	r1, [r4, #4]
 808c0f0:	9802      	ldr	r0, [sp, #8]
 808c0f2:	3101      	adds	r1, #1
 808c0f4:	f000 f906 	bl	808c304 <_Balloc>
 808c0f8:	4682      	mov	sl, r0
 808c0fa:	6922      	ldr	r2, [r4, #16]
 808c0fc:	f104 010c 	add.w	r1, r4, #12
 808c100:	3202      	adds	r2, #2
 808c102:	0092      	lsls	r2, r2, #2
 808c104:	300c      	adds	r0, #12
 808c106:	f7fe fe1d 	bl	808ad44 <memcpy>
 808c10a:	4621      	mov	r1, r4
 808c10c:	9802      	ldr	r0, [sp, #8]
 808c10e:	f000 f92d 	bl	808c36c <_Bfree>
 808c112:	4654      	mov	r4, sl
 808c114:	6923      	ldr	r3, [r4, #16]
 808c116:	1c5a      	adds	r2, r3, #1
 808c118:	6122      	str	r2, [r4, #16]
 808c11a:	2201      	movs	r2, #1
 808c11c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 808c120:	615a      	str	r2, [r3, #20]
 808c122:	e7c2      	b.n	808c0aa <__gethex+0x3a2>
 808c124:	6922      	ldr	r2, [r4, #16]
 808c126:	454a      	cmp	r2, r9
 808c128:	dd0b      	ble.n	808c142 <__gethex+0x43a>
 808c12a:	2101      	movs	r1, #1
 808c12c:	4620      	mov	r0, r4
 808c12e:	f7ff fd83 	bl	808bc38 <rshift>
 808c132:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808c136:	3501      	adds	r5, #1
 808c138:	42ab      	cmp	r3, r5
 808c13a:	f6ff aeda 	blt.w	808bef2 <__gethex+0x1ea>
 808c13e:	2701      	movs	r7, #1
 808c140:	e7c7      	b.n	808c0d2 <__gethex+0x3ca>
 808c142:	f016 061f 	ands.w	r6, r6, #31
 808c146:	d0fa      	beq.n	808c13e <__gethex+0x436>
 808c148:	449b      	add	fp, r3
 808c14a:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 808c14e:	f000 f9a0 	bl	808c492 <__hi0bits>
 808c152:	f1c6 0620 	rsb	r6, r6, #32
 808c156:	42b0      	cmp	r0, r6
 808c158:	dbe7      	blt.n	808c12a <__gethex+0x422>
 808c15a:	e7f0      	b.n	808c13e <__gethex+0x436>

0808c15c <L_shift>:
 808c15c:	f1c2 0208 	rsb	r2, r2, #8
 808c160:	0092      	lsls	r2, r2, #2
 808c162:	b570      	push	{r4, r5, r6, lr}
 808c164:	f1c2 0620 	rsb	r6, r2, #32
 808c168:	6843      	ldr	r3, [r0, #4]
 808c16a:	6804      	ldr	r4, [r0, #0]
 808c16c:	fa03 f506 	lsl.w	r5, r3, r6
 808c170:	432c      	orrs	r4, r5
 808c172:	40d3      	lsrs	r3, r2
 808c174:	6004      	str	r4, [r0, #0]
 808c176:	f840 3f04 	str.w	r3, [r0, #4]!
 808c17a:	4288      	cmp	r0, r1
 808c17c:	d3f4      	bcc.n	808c168 <L_shift+0xc>
 808c17e:	bd70      	pop	{r4, r5, r6, pc}

0808c180 <__match>:
 808c180:	b530      	push	{r4, r5, lr}
 808c182:	6803      	ldr	r3, [r0, #0]
 808c184:	3301      	adds	r3, #1
 808c186:	f811 4b01 	ldrb.w	r4, [r1], #1
 808c18a:	b914      	cbnz	r4, 808c192 <__match+0x12>
 808c18c:	6003      	str	r3, [r0, #0]
 808c18e:	2001      	movs	r0, #1
 808c190:	bd30      	pop	{r4, r5, pc}
 808c192:	f813 2b01 	ldrb.w	r2, [r3], #1
 808c196:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808c19a:	2d19      	cmp	r5, #25
 808c19c:	bf98      	it	ls
 808c19e:	3220      	addls	r2, #32
 808c1a0:	42a2      	cmp	r2, r4
 808c1a2:	d0f0      	beq.n	808c186 <__match+0x6>
 808c1a4:	2000      	movs	r0, #0
 808c1a6:	e7f3      	b.n	808c190 <__match+0x10>

0808c1a8 <__hexnan>:
 808c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c1ac:	2500      	movs	r5, #0
 808c1ae:	680b      	ldr	r3, [r1, #0]
 808c1b0:	4682      	mov	sl, r0
 808c1b2:	115e      	asrs	r6, r3, #5
 808c1b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808c1b8:	f013 031f 	ands.w	r3, r3, #31
 808c1bc:	bf18      	it	ne
 808c1be:	3604      	addne	r6, #4
 808c1c0:	1f37      	subs	r7, r6, #4
 808c1c2:	4690      	mov	r8, r2
 808c1c4:	46b9      	mov	r9, r7
 808c1c6:	463c      	mov	r4, r7
 808c1c8:	46ab      	mov	fp, r5
 808c1ca:	b087      	sub	sp, #28
 808c1cc:	6801      	ldr	r1, [r0, #0]
 808c1ce:	9301      	str	r3, [sp, #4]
 808c1d0:	f846 5c04 	str.w	r5, [r6, #-4]
 808c1d4:	9502      	str	r5, [sp, #8]
 808c1d6:	784a      	ldrb	r2, [r1, #1]
 808c1d8:	1c4b      	adds	r3, r1, #1
 808c1da:	9303      	str	r3, [sp, #12]
 808c1dc:	b342      	cbz	r2, 808c230 <__hexnan+0x88>
 808c1de:	4610      	mov	r0, r2
 808c1e0:	9105      	str	r1, [sp, #20]
 808c1e2:	9204      	str	r2, [sp, #16]
 808c1e4:	f7ff fd7b 	bl	808bcde <__hexdig_fun>
 808c1e8:	2800      	cmp	r0, #0
 808c1ea:	d14f      	bne.n	808c28c <__hexnan+0xe4>
 808c1ec:	9a04      	ldr	r2, [sp, #16]
 808c1ee:	9905      	ldr	r1, [sp, #20]
 808c1f0:	2a20      	cmp	r2, #32
 808c1f2:	d818      	bhi.n	808c226 <__hexnan+0x7e>
 808c1f4:	9b02      	ldr	r3, [sp, #8]
 808c1f6:	459b      	cmp	fp, r3
 808c1f8:	dd13      	ble.n	808c222 <__hexnan+0x7a>
 808c1fa:	454c      	cmp	r4, r9
 808c1fc:	d206      	bcs.n	808c20c <__hexnan+0x64>
 808c1fe:	2d07      	cmp	r5, #7
 808c200:	dc04      	bgt.n	808c20c <__hexnan+0x64>
 808c202:	462a      	mov	r2, r5
 808c204:	4649      	mov	r1, r9
 808c206:	4620      	mov	r0, r4
 808c208:	f7ff ffa8 	bl	808c15c <L_shift>
 808c20c:	4544      	cmp	r4, r8
 808c20e:	d950      	bls.n	808c2b2 <__hexnan+0x10a>
 808c210:	2300      	movs	r3, #0
 808c212:	f1a4 0904 	sub.w	r9, r4, #4
 808c216:	f844 3c04 	str.w	r3, [r4, #-4]
 808c21a:	461d      	mov	r5, r3
 808c21c:	464c      	mov	r4, r9
 808c21e:	f8cd b008 	str.w	fp, [sp, #8]
 808c222:	9903      	ldr	r1, [sp, #12]
 808c224:	e7d7      	b.n	808c1d6 <__hexnan+0x2e>
 808c226:	2a29      	cmp	r2, #41	; 0x29
 808c228:	d156      	bne.n	808c2d8 <__hexnan+0x130>
 808c22a:	3102      	adds	r1, #2
 808c22c:	f8ca 1000 	str.w	r1, [sl]
 808c230:	f1bb 0f00 	cmp.w	fp, #0
 808c234:	d050      	beq.n	808c2d8 <__hexnan+0x130>
 808c236:	454c      	cmp	r4, r9
 808c238:	d206      	bcs.n	808c248 <__hexnan+0xa0>
 808c23a:	2d07      	cmp	r5, #7
 808c23c:	dc04      	bgt.n	808c248 <__hexnan+0xa0>
 808c23e:	462a      	mov	r2, r5
 808c240:	4649      	mov	r1, r9
 808c242:	4620      	mov	r0, r4
 808c244:	f7ff ff8a 	bl	808c15c <L_shift>
 808c248:	4544      	cmp	r4, r8
 808c24a:	d934      	bls.n	808c2b6 <__hexnan+0x10e>
 808c24c:	4623      	mov	r3, r4
 808c24e:	f1a8 0204 	sub.w	r2, r8, #4
 808c252:	f853 1b04 	ldr.w	r1, [r3], #4
 808c256:	429f      	cmp	r7, r3
 808c258:	f842 1f04 	str.w	r1, [r2, #4]!
 808c25c:	d2f9      	bcs.n	808c252 <__hexnan+0xaa>
 808c25e:	1b3b      	subs	r3, r7, r4
 808c260:	f023 0303 	bic.w	r3, r3, #3
 808c264:	3304      	adds	r3, #4
 808c266:	3401      	adds	r4, #1
 808c268:	3e03      	subs	r6, #3
 808c26a:	42b4      	cmp	r4, r6
 808c26c:	bf88      	it	hi
 808c26e:	2304      	movhi	r3, #4
 808c270:	2200      	movs	r2, #0
 808c272:	4443      	add	r3, r8
 808c274:	f843 2b04 	str.w	r2, [r3], #4
 808c278:	429f      	cmp	r7, r3
 808c27a:	d2fb      	bcs.n	808c274 <__hexnan+0xcc>
 808c27c:	683b      	ldr	r3, [r7, #0]
 808c27e:	b91b      	cbnz	r3, 808c288 <__hexnan+0xe0>
 808c280:	4547      	cmp	r7, r8
 808c282:	d127      	bne.n	808c2d4 <__hexnan+0x12c>
 808c284:	2301      	movs	r3, #1
 808c286:	603b      	str	r3, [r7, #0]
 808c288:	2005      	movs	r0, #5
 808c28a:	e026      	b.n	808c2da <__hexnan+0x132>
 808c28c:	3501      	adds	r5, #1
 808c28e:	2d08      	cmp	r5, #8
 808c290:	f10b 0b01 	add.w	fp, fp, #1
 808c294:	dd06      	ble.n	808c2a4 <__hexnan+0xfc>
 808c296:	4544      	cmp	r4, r8
 808c298:	d9c3      	bls.n	808c222 <__hexnan+0x7a>
 808c29a:	2300      	movs	r3, #0
 808c29c:	2501      	movs	r5, #1
 808c29e:	f844 3c04 	str.w	r3, [r4, #-4]
 808c2a2:	3c04      	subs	r4, #4
 808c2a4:	6822      	ldr	r2, [r4, #0]
 808c2a6:	f000 000f 	and.w	r0, r0, #15
 808c2aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 808c2ae:	6022      	str	r2, [r4, #0]
 808c2b0:	e7b7      	b.n	808c222 <__hexnan+0x7a>
 808c2b2:	2508      	movs	r5, #8
 808c2b4:	e7b5      	b.n	808c222 <__hexnan+0x7a>
 808c2b6:	9b01      	ldr	r3, [sp, #4]
 808c2b8:	2b00      	cmp	r3, #0
 808c2ba:	d0df      	beq.n	808c27c <__hexnan+0xd4>
 808c2bc:	f04f 32ff 	mov.w	r2, #4294967295
 808c2c0:	f1c3 0320 	rsb	r3, r3, #32
 808c2c4:	fa22 f303 	lsr.w	r3, r2, r3
 808c2c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808c2cc:	401a      	ands	r2, r3
 808c2ce:	f846 2c04 	str.w	r2, [r6, #-4]
 808c2d2:	e7d3      	b.n	808c27c <__hexnan+0xd4>
 808c2d4:	3f04      	subs	r7, #4
 808c2d6:	e7d1      	b.n	808c27c <__hexnan+0xd4>
 808c2d8:	2004      	movs	r0, #4
 808c2da:	b007      	add	sp, #28
 808c2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c2e0 <__ascii_mbtowc>:
 808c2e0:	b082      	sub	sp, #8
 808c2e2:	b901      	cbnz	r1, 808c2e6 <__ascii_mbtowc+0x6>
 808c2e4:	a901      	add	r1, sp, #4
 808c2e6:	b142      	cbz	r2, 808c2fa <__ascii_mbtowc+0x1a>
 808c2e8:	b14b      	cbz	r3, 808c2fe <__ascii_mbtowc+0x1e>
 808c2ea:	7813      	ldrb	r3, [r2, #0]
 808c2ec:	600b      	str	r3, [r1, #0]
 808c2ee:	7812      	ldrb	r2, [r2, #0]
 808c2f0:	1e10      	subs	r0, r2, #0
 808c2f2:	bf18      	it	ne
 808c2f4:	2001      	movne	r0, #1
 808c2f6:	b002      	add	sp, #8
 808c2f8:	4770      	bx	lr
 808c2fa:	4610      	mov	r0, r2
 808c2fc:	e7fb      	b.n	808c2f6 <__ascii_mbtowc+0x16>
 808c2fe:	f06f 0001 	mvn.w	r0, #1
 808c302:	e7f8      	b.n	808c2f6 <__ascii_mbtowc+0x16>

0808c304 <_Balloc>:
 808c304:	b570      	push	{r4, r5, r6, lr}
 808c306:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808c308:	4604      	mov	r4, r0
 808c30a:	460d      	mov	r5, r1
 808c30c:	b93e      	cbnz	r6, 808c31e <_Balloc+0x1a>
 808c30e:	2010      	movs	r0, #16
 808c310:	f7fb fa10 	bl	8087734 <malloc>
 808c314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808c318:	6260      	str	r0, [r4, #36]	; 0x24
 808c31a:	6006      	str	r6, [r0, #0]
 808c31c:	60c6      	str	r6, [r0, #12]
 808c31e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 808c320:	68f3      	ldr	r3, [r6, #12]
 808c322:	b183      	cbz	r3, 808c346 <_Balloc+0x42>
 808c324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808c326:	68db      	ldr	r3, [r3, #12]
 808c328:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 808c32c:	b9b8      	cbnz	r0, 808c35e <_Balloc+0x5a>
 808c32e:	2101      	movs	r1, #1
 808c330:	fa01 f605 	lsl.w	r6, r1, r5
 808c334:	1d72      	adds	r2, r6, #5
 808c336:	4620      	mov	r0, r4
 808c338:	0092      	lsls	r2, r2, #2
 808c33a:	f000 fc1c 	bl	808cb76 <_calloc_r>
 808c33e:	b160      	cbz	r0, 808c35a <_Balloc+0x56>
 808c340:	e9c0 5601 	strd	r5, r6, [r0, #4]
 808c344:	e00e      	b.n	808c364 <_Balloc+0x60>
 808c346:	2221      	movs	r2, #33	; 0x21
 808c348:	2104      	movs	r1, #4
 808c34a:	4620      	mov	r0, r4
 808c34c:	f000 fc13 	bl	808cb76 <_calloc_r>
 808c350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808c352:	60f0      	str	r0, [r6, #12]
 808c354:	68db      	ldr	r3, [r3, #12]
 808c356:	2b00      	cmp	r3, #0
 808c358:	d1e4      	bne.n	808c324 <_Balloc+0x20>
 808c35a:	2000      	movs	r0, #0
 808c35c:	bd70      	pop	{r4, r5, r6, pc}
 808c35e:	6802      	ldr	r2, [r0, #0]
 808c360:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 808c364:	2300      	movs	r3, #0
 808c366:	e9c0 3303 	strd	r3, r3, [r0, #12]
 808c36a:	e7f7      	b.n	808c35c <_Balloc+0x58>

0808c36c <_Bfree>:
 808c36c:	b570      	push	{r4, r5, r6, lr}
 808c36e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808c370:	4605      	mov	r5, r0
 808c372:	460c      	mov	r4, r1
 808c374:	b93e      	cbnz	r6, 808c386 <_Bfree+0x1a>
 808c376:	2010      	movs	r0, #16
 808c378:	f7fb f9dc 	bl	8087734 <malloc>
 808c37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808c380:	6268      	str	r0, [r5, #36]	; 0x24
 808c382:	6006      	str	r6, [r0, #0]
 808c384:	60c6      	str	r6, [r0, #12]
 808c386:	b13c      	cbz	r4, 808c398 <_Bfree+0x2c>
 808c388:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 808c38a:	6862      	ldr	r2, [r4, #4]
 808c38c:	68db      	ldr	r3, [r3, #12]
 808c38e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808c392:	6021      	str	r1, [r4, #0]
 808c394:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 808c398:	bd70      	pop	{r4, r5, r6, pc}

0808c39a <__multadd>:
 808c39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c39e:	4698      	mov	r8, r3
 808c3a0:	460c      	mov	r4, r1
 808c3a2:	2300      	movs	r3, #0
 808c3a4:	690e      	ldr	r6, [r1, #16]
 808c3a6:	4607      	mov	r7, r0
 808c3a8:	f101 0014 	add.w	r0, r1, #20
 808c3ac:	6805      	ldr	r5, [r0, #0]
 808c3ae:	3301      	adds	r3, #1
 808c3b0:	b2a9      	uxth	r1, r5
 808c3b2:	fb02 8101 	mla	r1, r2, r1, r8
 808c3b6:	0c2d      	lsrs	r5, r5, #16
 808c3b8:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 808c3bc:	fb02 c505 	mla	r5, r2, r5, ip
 808c3c0:	b289      	uxth	r1, r1
 808c3c2:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 808c3c6:	429e      	cmp	r6, r3
 808c3c8:	ea4f 4815 	mov.w	r8, r5, lsr #16
 808c3cc:	f840 1b04 	str.w	r1, [r0], #4
 808c3d0:	dcec      	bgt.n	808c3ac <__multadd+0x12>
 808c3d2:	f1b8 0f00 	cmp.w	r8, #0
 808c3d6:	d01b      	beq.n	808c410 <__multadd+0x76>
 808c3d8:	68a3      	ldr	r3, [r4, #8]
 808c3da:	42b3      	cmp	r3, r6
 808c3dc:	dc12      	bgt.n	808c404 <__multadd+0x6a>
 808c3de:	6861      	ldr	r1, [r4, #4]
 808c3e0:	4638      	mov	r0, r7
 808c3e2:	3101      	adds	r1, #1
 808c3e4:	f7ff ff8e 	bl	808c304 <_Balloc>
 808c3e8:	4605      	mov	r5, r0
 808c3ea:	6922      	ldr	r2, [r4, #16]
 808c3ec:	f104 010c 	add.w	r1, r4, #12
 808c3f0:	3202      	adds	r2, #2
 808c3f2:	0092      	lsls	r2, r2, #2
 808c3f4:	300c      	adds	r0, #12
 808c3f6:	f7fe fca5 	bl	808ad44 <memcpy>
 808c3fa:	4621      	mov	r1, r4
 808c3fc:	4638      	mov	r0, r7
 808c3fe:	f7ff ffb5 	bl	808c36c <_Bfree>
 808c402:	462c      	mov	r4, r5
 808c404:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 808c408:	3601      	adds	r6, #1
 808c40a:	f8c3 8014 	str.w	r8, [r3, #20]
 808c40e:	6126      	str	r6, [r4, #16]
 808c410:	4620      	mov	r0, r4
 808c412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808c416 <__s2b>:
 808c416:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808c41a:	4615      	mov	r5, r2
 808c41c:	2209      	movs	r2, #9
 808c41e:	461f      	mov	r7, r3
 808c420:	3308      	adds	r3, #8
 808c422:	460c      	mov	r4, r1
 808c424:	fb93 f3f2 	sdiv	r3, r3, r2
 808c428:	4606      	mov	r6, r0
 808c42a:	2201      	movs	r2, #1
 808c42c:	2100      	movs	r1, #0
 808c42e:	429a      	cmp	r2, r3
 808c430:	db20      	blt.n	808c474 <__s2b+0x5e>
 808c432:	4630      	mov	r0, r6
 808c434:	f7ff ff66 	bl	808c304 <_Balloc>
 808c438:	9b08      	ldr	r3, [sp, #32]
 808c43a:	2d09      	cmp	r5, #9
 808c43c:	6143      	str	r3, [r0, #20]
 808c43e:	f04f 0301 	mov.w	r3, #1
 808c442:	6103      	str	r3, [r0, #16]
 808c444:	dd19      	ble.n	808c47a <__s2b+0x64>
 808c446:	f104 0909 	add.w	r9, r4, #9
 808c44a:	46c8      	mov	r8, r9
 808c44c:	442c      	add	r4, r5
 808c44e:	f818 3b01 	ldrb.w	r3, [r8], #1
 808c452:	4601      	mov	r1, r0
 808c454:	220a      	movs	r2, #10
 808c456:	4630      	mov	r0, r6
 808c458:	3b30      	subs	r3, #48	; 0x30
 808c45a:	f7ff ff9e 	bl	808c39a <__multadd>
 808c45e:	45a0      	cmp	r8, r4
 808c460:	d1f5      	bne.n	808c44e <__s2b+0x38>
 808c462:	f1a5 0408 	sub.w	r4, r5, #8
 808c466:	444c      	add	r4, r9
 808c468:	1b2d      	subs	r5, r5, r4
 808c46a:	1963      	adds	r3, r4, r5
 808c46c:	42bb      	cmp	r3, r7
 808c46e:	db07      	blt.n	808c480 <__s2b+0x6a>
 808c470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808c474:	0052      	lsls	r2, r2, #1
 808c476:	3101      	adds	r1, #1
 808c478:	e7d9      	b.n	808c42e <__s2b+0x18>
 808c47a:	2509      	movs	r5, #9
 808c47c:	340a      	adds	r4, #10
 808c47e:	e7f3      	b.n	808c468 <__s2b+0x52>
 808c480:	f814 3b01 	ldrb.w	r3, [r4], #1
 808c484:	4601      	mov	r1, r0
 808c486:	220a      	movs	r2, #10
 808c488:	4630      	mov	r0, r6
 808c48a:	3b30      	subs	r3, #48	; 0x30
 808c48c:	f7ff ff85 	bl	808c39a <__multadd>
 808c490:	e7eb      	b.n	808c46a <__s2b+0x54>

0808c492 <__hi0bits>:
 808c492:	0c02      	lsrs	r2, r0, #16
 808c494:	0412      	lsls	r2, r2, #16
 808c496:	4603      	mov	r3, r0
 808c498:	b9ca      	cbnz	r2, 808c4ce <__hi0bits+0x3c>
 808c49a:	0403      	lsls	r3, r0, #16
 808c49c:	2010      	movs	r0, #16
 808c49e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 808c4a2:	bf04      	itt	eq
 808c4a4:	021b      	lsleq	r3, r3, #8
 808c4a6:	3008      	addeq	r0, #8
 808c4a8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 808c4ac:	bf04      	itt	eq
 808c4ae:	011b      	lsleq	r3, r3, #4
 808c4b0:	3004      	addeq	r0, #4
 808c4b2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 808c4b6:	bf04      	itt	eq
 808c4b8:	009b      	lsleq	r3, r3, #2
 808c4ba:	3002      	addeq	r0, #2
 808c4bc:	2b00      	cmp	r3, #0
 808c4be:	db05      	blt.n	808c4cc <__hi0bits+0x3a>
 808c4c0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 808c4c4:	f100 0001 	add.w	r0, r0, #1
 808c4c8:	bf08      	it	eq
 808c4ca:	2020      	moveq	r0, #32
 808c4cc:	4770      	bx	lr
 808c4ce:	2000      	movs	r0, #0
 808c4d0:	e7e5      	b.n	808c49e <__hi0bits+0xc>

0808c4d2 <__lo0bits>:
 808c4d2:	6803      	ldr	r3, [r0, #0]
 808c4d4:	4602      	mov	r2, r0
 808c4d6:	f013 0007 	ands.w	r0, r3, #7
 808c4da:	d00b      	beq.n	808c4f4 <__lo0bits+0x22>
 808c4dc:	07d9      	lsls	r1, r3, #31
 808c4de:	d422      	bmi.n	808c526 <__lo0bits+0x54>
 808c4e0:	0798      	lsls	r0, r3, #30
 808c4e2:	bf49      	itett	mi
 808c4e4:	085b      	lsrmi	r3, r3, #1
 808c4e6:	089b      	lsrpl	r3, r3, #2
 808c4e8:	2001      	movmi	r0, #1
 808c4ea:	6013      	strmi	r3, [r2, #0]
 808c4ec:	bf5c      	itt	pl
 808c4ee:	2002      	movpl	r0, #2
 808c4f0:	6013      	strpl	r3, [r2, #0]
 808c4f2:	4770      	bx	lr
 808c4f4:	b299      	uxth	r1, r3
 808c4f6:	b909      	cbnz	r1, 808c4fc <__lo0bits+0x2a>
 808c4f8:	2010      	movs	r0, #16
 808c4fa:	0c1b      	lsrs	r3, r3, #16
 808c4fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 808c500:	bf04      	itt	eq
 808c502:	0a1b      	lsreq	r3, r3, #8
 808c504:	3008      	addeq	r0, #8
 808c506:	0719      	lsls	r1, r3, #28
 808c508:	bf04      	itt	eq
 808c50a:	091b      	lsreq	r3, r3, #4
 808c50c:	3004      	addeq	r0, #4
 808c50e:	0799      	lsls	r1, r3, #30
 808c510:	bf04      	itt	eq
 808c512:	089b      	lsreq	r3, r3, #2
 808c514:	3002      	addeq	r0, #2
 808c516:	07d9      	lsls	r1, r3, #31
 808c518:	d403      	bmi.n	808c522 <__lo0bits+0x50>
 808c51a:	085b      	lsrs	r3, r3, #1
 808c51c:	f100 0001 	add.w	r0, r0, #1
 808c520:	d003      	beq.n	808c52a <__lo0bits+0x58>
 808c522:	6013      	str	r3, [r2, #0]
 808c524:	4770      	bx	lr
 808c526:	2000      	movs	r0, #0
 808c528:	4770      	bx	lr
 808c52a:	2020      	movs	r0, #32
 808c52c:	4770      	bx	lr

0808c52e <__i2b>:
 808c52e:	b510      	push	{r4, lr}
 808c530:	460c      	mov	r4, r1
 808c532:	2101      	movs	r1, #1
 808c534:	f7ff fee6 	bl	808c304 <_Balloc>
 808c538:	2201      	movs	r2, #1
 808c53a:	6144      	str	r4, [r0, #20]
 808c53c:	6102      	str	r2, [r0, #16]
 808c53e:	bd10      	pop	{r4, pc}

0808c540 <__multiply>:
 808c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c544:	4615      	mov	r5, r2
 808c546:	690a      	ldr	r2, [r1, #16]
 808c548:	692b      	ldr	r3, [r5, #16]
 808c54a:	460c      	mov	r4, r1
 808c54c:	429a      	cmp	r2, r3
 808c54e:	bfbe      	ittt	lt
 808c550:	460b      	movlt	r3, r1
 808c552:	462c      	movlt	r4, r5
 808c554:	461d      	movlt	r5, r3
 808c556:	6927      	ldr	r7, [r4, #16]
 808c558:	f8d5 9010 	ldr.w	r9, [r5, #16]
 808c55c:	68a3      	ldr	r3, [r4, #8]
 808c55e:	6861      	ldr	r1, [r4, #4]
 808c560:	eb07 0609 	add.w	r6, r7, r9
 808c564:	42b3      	cmp	r3, r6
 808c566:	bfb8      	it	lt
 808c568:	3101      	addlt	r1, #1
 808c56a:	b085      	sub	sp, #20
 808c56c:	f7ff feca 	bl	808c304 <_Balloc>
 808c570:	f100 0114 	add.w	r1, r0, #20
 808c574:	460b      	mov	r3, r1
 808c576:	2200      	movs	r2, #0
 808c578:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 808c57c:	4543      	cmp	r3, r8
 808c57e:	d31d      	bcc.n	808c5bc <__multiply+0x7c>
 808c580:	f104 0314 	add.w	r3, r4, #20
 808c584:	f105 0214 	add.w	r2, r5, #20
 808c588:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 808c58c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808c590:	9302      	str	r3, [sp, #8]
 808c592:	1b3b      	subs	r3, r7, r4
 808c594:	3b15      	subs	r3, #21
 808c596:	f023 0303 	bic.w	r3, r3, #3
 808c59a:	3304      	adds	r3, #4
 808c59c:	f104 0515 	add.w	r5, r4, #21
 808c5a0:	42af      	cmp	r7, r5
 808c5a2:	bf38      	it	cc
 808c5a4:	2304      	movcc	r3, #4
 808c5a6:	9301      	str	r3, [sp, #4]
 808c5a8:	9b02      	ldr	r3, [sp, #8]
 808c5aa:	9203      	str	r2, [sp, #12]
 808c5ac:	4293      	cmp	r3, r2
 808c5ae:	d808      	bhi.n	808c5c2 <__multiply+0x82>
 808c5b0:	2e00      	cmp	r6, #0
 808c5b2:	dc5a      	bgt.n	808c66a <__multiply+0x12a>
 808c5b4:	6106      	str	r6, [r0, #16]
 808c5b6:	b005      	add	sp, #20
 808c5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c5bc:	f843 2b04 	str.w	r2, [r3], #4
 808c5c0:	e7dc      	b.n	808c57c <__multiply+0x3c>
 808c5c2:	f8b2 a000 	ldrh.w	sl, [r2]
 808c5c6:	f1ba 0f00 	cmp.w	sl, #0
 808c5ca:	d024      	beq.n	808c616 <__multiply+0xd6>
 808c5cc:	4689      	mov	r9, r1
 808c5ce:	f04f 0c00 	mov.w	ip, #0
 808c5d2:	f104 0e14 	add.w	lr, r4, #20
 808c5d6:	f85e 5b04 	ldr.w	r5, [lr], #4
 808c5da:	f8d9 b000 	ldr.w	fp, [r9]
 808c5de:	b2ab      	uxth	r3, r5
 808c5e0:	fa1f fb8b 	uxth.w	fp, fp
 808c5e4:	fb0a b303 	mla	r3, sl, r3, fp
 808c5e8:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 808c5ec:	f8d9 5000 	ldr.w	r5, [r9]
 808c5f0:	4463      	add	r3, ip
 808c5f2:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808c5f6:	fb0a c50b 	mla	r5, sl, fp, ip
 808c5fa:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 808c5fe:	b29b      	uxth	r3, r3
 808c600:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 808c604:	4577      	cmp	r7, lr
 808c606:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808c60a:	f849 3b04 	str.w	r3, [r9], #4
 808c60e:	d8e2      	bhi.n	808c5d6 <__multiply+0x96>
 808c610:	9b01      	ldr	r3, [sp, #4]
 808c612:	f841 c003 	str.w	ip, [r1, r3]
 808c616:	9b03      	ldr	r3, [sp, #12]
 808c618:	3204      	adds	r2, #4
 808c61a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 808c61e:	f1b9 0f00 	cmp.w	r9, #0
 808c622:	d020      	beq.n	808c666 <__multiply+0x126>
 808c624:	468e      	mov	lr, r1
 808c626:	f04f 0a00 	mov.w	sl, #0
 808c62a:	680b      	ldr	r3, [r1, #0]
 808c62c:	f104 0c14 	add.w	ip, r4, #20
 808c630:	f8bc 5000 	ldrh.w	r5, [ip]
 808c634:	f8be b002 	ldrh.w	fp, [lr, #2]
 808c638:	b29b      	uxth	r3, r3
 808c63a:	fb09 b505 	mla	r5, r9, r5, fp
 808c63e:	44aa      	add	sl, r5
 808c640:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 808c644:	f84e 3b04 	str.w	r3, [lr], #4
 808c648:	f85c 3b04 	ldr.w	r3, [ip], #4
 808c64c:	f8be 5000 	ldrh.w	r5, [lr]
 808c650:	0c1b      	lsrs	r3, r3, #16
 808c652:	fb09 5303 	mla	r3, r9, r3, r5
 808c656:	4567      	cmp	r7, ip
 808c658:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 808c65c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 808c660:	d8e6      	bhi.n	808c630 <__multiply+0xf0>
 808c662:	9d01      	ldr	r5, [sp, #4]
 808c664:	514b      	str	r3, [r1, r5]
 808c666:	3104      	adds	r1, #4
 808c668:	e79e      	b.n	808c5a8 <__multiply+0x68>
 808c66a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 808c66e:	2b00      	cmp	r3, #0
 808c670:	d1a0      	bne.n	808c5b4 <__multiply+0x74>
 808c672:	3e01      	subs	r6, #1
 808c674:	e79c      	b.n	808c5b0 <__multiply+0x70>
	...

0808c678 <__pow5mult>:
 808c678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808c67c:	4615      	mov	r5, r2
 808c67e:	f012 0203 	ands.w	r2, r2, #3
 808c682:	4606      	mov	r6, r0
 808c684:	460f      	mov	r7, r1
 808c686:	d007      	beq.n	808c698 <__pow5mult+0x20>
 808c688:	4c21      	ldr	r4, [pc, #132]	; (808c710 <__pow5mult+0x98>)
 808c68a:	3a01      	subs	r2, #1
 808c68c:	2300      	movs	r3, #0
 808c68e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808c692:	f7ff fe82 	bl	808c39a <__multadd>
 808c696:	4607      	mov	r7, r0
 808c698:	10ad      	asrs	r5, r5, #2
 808c69a:	d035      	beq.n	808c708 <__pow5mult+0x90>
 808c69c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808c69e:	b93c      	cbnz	r4, 808c6b0 <__pow5mult+0x38>
 808c6a0:	2010      	movs	r0, #16
 808c6a2:	f7fb f847 	bl	8087734 <malloc>
 808c6a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 808c6aa:	6270      	str	r0, [r6, #36]	; 0x24
 808c6ac:	6004      	str	r4, [r0, #0]
 808c6ae:	60c4      	str	r4, [r0, #12]
 808c6b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808c6b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808c6b8:	b94c      	cbnz	r4, 808c6ce <__pow5mult+0x56>
 808c6ba:	f240 2171 	movw	r1, #625	; 0x271
 808c6be:	4630      	mov	r0, r6
 808c6c0:	f7ff ff35 	bl	808c52e <__i2b>
 808c6c4:	2300      	movs	r3, #0
 808c6c6:	4604      	mov	r4, r0
 808c6c8:	f8c8 0008 	str.w	r0, [r8, #8]
 808c6cc:	6003      	str	r3, [r0, #0]
 808c6ce:	f04f 0900 	mov.w	r9, #0
 808c6d2:	07eb      	lsls	r3, r5, #31
 808c6d4:	d50a      	bpl.n	808c6ec <__pow5mult+0x74>
 808c6d6:	4639      	mov	r1, r7
 808c6d8:	4622      	mov	r2, r4
 808c6da:	4630      	mov	r0, r6
 808c6dc:	f7ff ff30 	bl	808c540 <__multiply>
 808c6e0:	4680      	mov	r8, r0
 808c6e2:	4639      	mov	r1, r7
 808c6e4:	4630      	mov	r0, r6
 808c6e6:	f7ff fe41 	bl	808c36c <_Bfree>
 808c6ea:	4647      	mov	r7, r8
 808c6ec:	106d      	asrs	r5, r5, #1
 808c6ee:	d00b      	beq.n	808c708 <__pow5mult+0x90>
 808c6f0:	6820      	ldr	r0, [r4, #0]
 808c6f2:	b938      	cbnz	r0, 808c704 <__pow5mult+0x8c>
 808c6f4:	4622      	mov	r2, r4
 808c6f6:	4621      	mov	r1, r4
 808c6f8:	4630      	mov	r0, r6
 808c6fa:	f7ff ff21 	bl	808c540 <__multiply>
 808c6fe:	6020      	str	r0, [r4, #0]
 808c700:	f8c0 9000 	str.w	r9, [r0]
 808c704:	4604      	mov	r4, r0
 808c706:	e7e4      	b.n	808c6d2 <__pow5mult+0x5a>
 808c708:	4638      	mov	r0, r7
 808c70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808c70e:	bf00      	nop
 808c710:	0808eff8 	.word	0x0808eff8

0808c714 <__lshift>:
 808c714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c718:	460c      	mov	r4, r1
 808c71a:	4607      	mov	r7, r0
 808c71c:	4691      	mov	r9, r2
 808c71e:	6923      	ldr	r3, [r4, #16]
 808c720:	6849      	ldr	r1, [r1, #4]
 808c722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 808c726:	68a3      	ldr	r3, [r4, #8]
 808c728:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808c72c:	f108 0601 	add.w	r6, r8, #1
 808c730:	42b3      	cmp	r3, r6
 808c732:	db3f      	blt.n	808c7b4 <__lshift+0xa0>
 808c734:	4638      	mov	r0, r7
 808c736:	f7ff fde5 	bl	808c304 <_Balloc>
 808c73a:	2300      	movs	r3, #0
 808c73c:	4605      	mov	r5, r0
 808c73e:	f100 0114 	add.w	r1, r0, #20
 808c742:	f100 0210 	add.w	r2, r0, #16
 808c746:	4618      	mov	r0, r3
 808c748:	4553      	cmp	r3, sl
 808c74a:	db36      	blt.n	808c7ba <__lshift+0xa6>
 808c74c:	6920      	ldr	r0, [r4, #16]
 808c74e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 808c752:	f104 0314 	add.w	r3, r4, #20
 808c756:	f019 091f 	ands.w	r9, r9, #31
 808c75a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 808c75e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 808c762:	d02e      	beq.n	808c7c2 <__lshift+0xae>
 808c764:	468a      	mov	sl, r1
 808c766:	2200      	movs	r2, #0
 808c768:	f1c9 0e20 	rsb	lr, r9, #32
 808c76c:	6818      	ldr	r0, [r3, #0]
 808c76e:	fa00 f009 	lsl.w	r0, r0, r9
 808c772:	4302      	orrs	r2, r0
 808c774:	f84a 2b04 	str.w	r2, [sl], #4
 808c778:	f853 2b04 	ldr.w	r2, [r3], #4
 808c77c:	459c      	cmp	ip, r3
 808c77e:	fa22 f20e 	lsr.w	r2, r2, lr
 808c782:	d8f3      	bhi.n	808c76c <__lshift+0x58>
 808c784:	ebac 0304 	sub.w	r3, ip, r4
 808c788:	3b15      	subs	r3, #21
 808c78a:	f023 0303 	bic.w	r3, r3, #3
 808c78e:	3304      	adds	r3, #4
 808c790:	f104 0015 	add.w	r0, r4, #21
 808c794:	4560      	cmp	r0, ip
 808c796:	bf88      	it	hi
 808c798:	2304      	movhi	r3, #4
 808c79a:	50ca      	str	r2, [r1, r3]
 808c79c:	b10a      	cbz	r2, 808c7a2 <__lshift+0x8e>
 808c79e:	f108 0602 	add.w	r6, r8, #2
 808c7a2:	3e01      	subs	r6, #1
 808c7a4:	4638      	mov	r0, r7
 808c7a6:	4621      	mov	r1, r4
 808c7a8:	612e      	str	r6, [r5, #16]
 808c7aa:	f7ff fddf 	bl	808c36c <_Bfree>
 808c7ae:	4628      	mov	r0, r5
 808c7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c7b4:	3101      	adds	r1, #1
 808c7b6:	005b      	lsls	r3, r3, #1
 808c7b8:	e7ba      	b.n	808c730 <__lshift+0x1c>
 808c7ba:	f842 0f04 	str.w	r0, [r2, #4]!
 808c7be:	3301      	adds	r3, #1
 808c7c0:	e7c2      	b.n	808c748 <__lshift+0x34>
 808c7c2:	3904      	subs	r1, #4
 808c7c4:	f853 2b04 	ldr.w	r2, [r3], #4
 808c7c8:	459c      	cmp	ip, r3
 808c7ca:	f841 2f04 	str.w	r2, [r1, #4]!
 808c7ce:	d8f9      	bhi.n	808c7c4 <__lshift+0xb0>
 808c7d0:	e7e7      	b.n	808c7a2 <__lshift+0x8e>

0808c7d2 <__mcmp>:
 808c7d2:	4603      	mov	r3, r0
 808c7d4:	690a      	ldr	r2, [r1, #16]
 808c7d6:	6900      	ldr	r0, [r0, #16]
 808c7d8:	b530      	push	{r4, r5, lr}
 808c7da:	1a80      	subs	r0, r0, r2
 808c7dc:	d10d      	bne.n	808c7fa <__mcmp+0x28>
 808c7de:	3314      	adds	r3, #20
 808c7e0:	3114      	adds	r1, #20
 808c7e2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 808c7e6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 808c7ea:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 808c7ee:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 808c7f2:	4295      	cmp	r5, r2
 808c7f4:	d002      	beq.n	808c7fc <__mcmp+0x2a>
 808c7f6:	d304      	bcc.n	808c802 <__mcmp+0x30>
 808c7f8:	2001      	movs	r0, #1
 808c7fa:	bd30      	pop	{r4, r5, pc}
 808c7fc:	42a3      	cmp	r3, r4
 808c7fe:	d3f4      	bcc.n	808c7ea <__mcmp+0x18>
 808c800:	e7fb      	b.n	808c7fa <__mcmp+0x28>
 808c802:	f04f 30ff 	mov.w	r0, #4294967295
 808c806:	e7f8      	b.n	808c7fa <__mcmp+0x28>

0808c808 <__mdiff>:
 808c808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c80c:	460c      	mov	r4, r1
 808c80e:	4606      	mov	r6, r0
 808c810:	4611      	mov	r1, r2
 808c812:	4620      	mov	r0, r4
 808c814:	4692      	mov	sl, r2
 808c816:	f7ff ffdc 	bl	808c7d2 <__mcmp>
 808c81a:	1e05      	subs	r5, r0, #0
 808c81c:	d108      	bne.n	808c830 <__mdiff+0x28>
 808c81e:	4629      	mov	r1, r5
 808c820:	4630      	mov	r0, r6
 808c822:	f7ff fd6f 	bl	808c304 <_Balloc>
 808c826:	2301      	movs	r3, #1
 808c828:	e9c0 3504 	strd	r3, r5, [r0, #16]
 808c82c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c830:	bfa4      	itt	ge
 808c832:	4653      	movge	r3, sl
 808c834:	46a2      	movge	sl, r4
 808c836:	4630      	mov	r0, r6
 808c838:	f8da 1004 	ldr.w	r1, [sl, #4]
 808c83c:	bfa6      	itte	ge
 808c83e:	461c      	movge	r4, r3
 808c840:	2500      	movge	r5, #0
 808c842:	2501      	movlt	r5, #1
 808c844:	f7ff fd5e 	bl	808c304 <_Balloc>
 808c848:	f100 0814 	add.w	r8, r0, #20
 808c84c:	f8da 7010 	ldr.w	r7, [sl, #16]
 808c850:	60c5      	str	r5, [r0, #12]
 808c852:	f10a 0210 	add.w	r2, sl, #16
 808c856:	f10a 0514 	add.w	r5, sl, #20
 808c85a:	f04f 0c00 	mov.w	ip, #0
 808c85e:	46c2      	mov	sl, r8
 808c860:	6926      	ldr	r6, [r4, #16]
 808c862:	f104 0914 	add.w	r9, r4, #20
 808c866:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 808c86a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 808c86e:	f852 bf04 	ldr.w	fp, [r2, #4]!
 808c872:	f859 3b04 	ldr.w	r3, [r9], #4
 808c876:	fa1f f18b 	uxth.w	r1, fp
 808c87a:	4461      	add	r1, ip
 808c87c:	fa1f fc83 	uxth.w	ip, r3
 808c880:	0c1b      	lsrs	r3, r3, #16
 808c882:	eba1 010c 	sub.w	r1, r1, ip
 808c886:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 808c88a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 808c88e:	b289      	uxth	r1, r1
 808c890:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808c894:	454e      	cmp	r6, r9
 808c896:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 808c89a:	f84a 3b04 	str.w	r3, [sl], #4
 808c89e:	d8e6      	bhi.n	808c86e <__mdiff+0x66>
 808c8a0:	1b33      	subs	r3, r6, r4
 808c8a2:	3b15      	subs	r3, #21
 808c8a4:	f023 0303 	bic.w	r3, r3, #3
 808c8a8:	3415      	adds	r4, #21
 808c8aa:	3304      	adds	r3, #4
 808c8ac:	42a6      	cmp	r6, r4
 808c8ae:	bf38      	it	cc
 808c8b0:	2304      	movcc	r3, #4
 808c8b2:	441d      	add	r5, r3
 808c8b4:	4443      	add	r3, r8
 808c8b6:	461e      	mov	r6, r3
 808c8b8:	462c      	mov	r4, r5
 808c8ba:	4574      	cmp	r4, lr
 808c8bc:	d30e      	bcc.n	808c8dc <__mdiff+0xd4>
 808c8be:	f10e 0203 	add.w	r2, lr, #3
 808c8c2:	1b52      	subs	r2, r2, r5
 808c8c4:	f022 0203 	bic.w	r2, r2, #3
 808c8c8:	3d03      	subs	r5, #3
 808c8ca:	45ae      	cmp	lr, r5
 808c8cc:	bf38      	it	cc
 808c8ce:	2200      	movcc	r2, #0
 808c8d0:	441a      	add	r2, r3
 808c8d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 808c8d6:	b18b      	cbz	r3, 808c8fc <__mdiff+0xf4>
 808c8d8:	6107      	str	r7, [r0, #16]
 808c8da:	e7a7      	b.n	808c82c <__mdiff+0x24>
 808c8dc:	f854 8b04 	ldr.w	r8, [r4], #4
 808c8e0:	fa1f f288 	uxth.w	r2, r8
 808c8e4:	4462      	add	r2, ip
 808c8e6:	1411      	asrs	r1, r2, #16
 808c8e8:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 808c8ec:	b292      	uxth	r2, r2
 808c8ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 808c8f2:	ea4f 4c21 	mov.w	ip, r1, asr #16
 808c8f6:	f846 2b04 	str.w	r2, [r6], #4
 808c8fa:	e7de      	b.n	808c8ba <__mdiff+0xb2>
 808c8fc:	3f01      	subs	r7, #1
 808c8fe:	e7e8      	b.n	808c8d2 <__mdiff+0xca>

0808c900 <__ulp>:
 808c900:	4b11      	ldr	r3, [pc, #68]	; (808c948 <__ulp+0x48>)
 808c902:	400b      	ands	r3, r1
 808c904:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808c908:	2b00      	cmp	r3, #0
 808c90a:	dd02      	ble.n	808c912 <__ulp+0x12>
 808c90c:	2000      	movs	r0, #0
 808c90e:	4619      	mov	r1, r3
 808c910:	4770      	bx	lr
 808c912:	425b      	negs	r3, r3
 808c914:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 808c918:	f04f 0000 	mov.w	r0, #0
 808c91c:	f04f 0100 	mov.w	r1, #0
 808c920:	ea4f 5223 	mov.w	r2, r3, asr #20
 808c924:	da04      	bge.n	808c930 <__ulp+0x30>
 808c926:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 808c92a:	fa43 f102 	asr.w	r1, r3, r2
 808c92e:	4770      	bx	lr
 808c930:	f1a2 0314 	sub.w	r3, r2, #20
 808c934:	2b1e      	cmp	r3, #30
 808c936:	bfd6      	itet	le
 808c938:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 808c93c:	2301      	movgt	r3, #1
 808c93e:	fa22 f303 	lsrle.w	r3, r2, r3
 808c942:	4618      	mov	r0, r3
 808c944:	4770      	bx	lr
 808c946:	bf00      	nop
 808c948:	7ff00000 	.word	0x7ff00000

0808c94c <__b2d>:
 808c94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808c950:	6907      	ldr	r7, [r0, #16]
 808c952:	f100 0914 	add.w	r9, r0, #20
 808c956:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 808c95a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 808c95e:	f1a7 0804 	sub.w	r8, r7, #4
 808c962:	4630      	mov	r0, r6
 808c964:	f7ff fd95 	bl	808c492 <__hi0bits>
 808c968:	f1c0 0320 	rsb	r3, r0, #32
 808c96c:	280a      	cmp	r0, #10
 808c96e:	600b      	str	r3, [r1, #0]
 808c970:	491f      	ldr	r1, [pc, #124]	; (808c9f0 <__b2d+0xa4>)
 808c972:	dc17      	bgt.n	808c9a4 <__b2d+0x58>
 808c974:	45c1      	cmp	r9, r8
 808c976:	bf28      	it	cs
 808c978:	2200      	movcs	r2, #0
 808c97a:	f1c0 0c0b 	rsb	ip, r0, #11
 808c97e:	fa26 f30c 	lsr.w	r3, r6, ip
 808c982:	bf38      	it	cc
 808c984:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 808c988:	ea43 0501 	orr.w	r5, r3, r1
 808c98c:	f100 0315 	add.w	r3, r0, #21
 808c990:	fa06 f303 	lsl.w	r3, r6, r3
 808c994:	fa22 f20c 	lsr.w	r2, r2, ip
 808c998:	ea43 0402 	orr.w	r4, r3, r2
 808c99c:	4620      	mov	r0, r4
 808c99e:	4629      	mov	r1, r5
 808c9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808c9a4:	45c1      	cmp	r9, r8
 808c9a6:	bf2e      	itee	cs
 808c9a8:	2200      	movcs	r2, #0
 808c9aa:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 808c9ae:	f1a7 0808 	subcc.w	r8, r7, #8
 808c9b2:	f1b0 030b 	subs.w	r3, r0, #11
 808c9b6:	d016      	beq.n	808c9e6 <__b2d+0x9a>
 808c9b8:	f1c3 0720 	rsb	r7, r3, #32
 808c9bc:	fa22 f107 	lsr.w	r1, r2, r7
 808c9c0:	45c8      	cmp	r8, r9
 808c9c2:	fa06 f603 	lsl.w	r6, r6, r3
 808c9c6:	ea46 0601 	orr.w	r6, r6, r1
 808c9ca:	bf94      	ite	ls
 808c9cc:	2100      	movls	r1, #0
 808c9ce:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 808c9d2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 808c9d6:	fa02 f003 	lsl.w	r0, r2, r3
 808c9da:	40f9      	lsrs	r1, r7
 808c9dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 808c9e0:	ea40 0401 	orr.w	r4, r0, r1
 808c9e4:	e7da      	b.n	808c99c <__b2d+0x50>
 808c9e6:	4614      	mov	r4, r2
 808c9e8:	ea46 0501 	orr.w	r5, r6, r1
 808c9ec:	e7d6      	b.n	808c99c <__b2d+0x50>
 808c9ee:	bf00      	nop
 808c9f0:	3ff00000 	.word	0x3ff00000

0808c9f4 <__d2b>:
 808c9f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808c9f8:	461c      	mov	r4, r3
 808c9fa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 808c9fe:	2101      	movs	r1, #1
 808ca00:	4690      	mov	r8, r2
 808ca02:	f7ff fc7f 	bl	808c304 <_Balloc>
 808ca06:	f3c4 0313 	ubfx	r3, r4, #0, #20
 808ca0a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808ca0e:	4607      	mov	r7, r0
 808ca10:	bb2c      	cbnz	r4, 808ca5e <__d2b+0x6a>
 808ca12:	9301      	str	r3, [sp, #4]
 808ca14:	f1b8 0300 	subs.w	r3, r8, #0
 808ca18:	d026      	beq.n	808ca68 <__d2b+0x74>
 808ca1a:	4668      	mov	r0, sp
 808ca1c:	9300      	str	r3, [sp, #0]
 808ca1e:	f7ff fd58 	bl	808c4d2 <__lo0bits>
 808ca22:	9900      	ldr	r1, [sp, #0]
 808ca24:	b1f0      	cbz	r0, 808ca64 <__d2b+0x70>
 808ca26:	9a01      	ldr	r2, [sp, #4]
 808ca28:	f1c0 0320 	rsb	r3, r0, #32
 808ca2c:	fa02 f303 	lsl.w	r3, r2, r3
 808ca30:	430b      	orrs	r3, r1
 808ca32:	40c2      	lsrs	r2, r0
 808ca34:	617b      	str	r3, [r7, #20]
 808ca36:	9201      	str	r2, [sp, #4]
 808ca38:	9b01      	ldr	r3, [sp, #4]
 808ca3a:	2b00      	cmp	r3, #0
 808ca3c:	bf14      	ite	ne
 808ca3e:	2102      	movne	r1, #2
 808ca40:	2101      	moveq	r1, #1
 808ca42:	61bb      	str	r3, [r7, #24]
 808ca44:	6139      	str	r1, [r7, #16]
 808ca46:	b1c4      	cbz	r4, 808ca7a <__d2b+0x86>
 808ca48:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808ca4c:	4404      	add	r4, r0
 808ca4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808ca52:	6034      	str	r4, [r6, #0]
 808ca54:	6028      	str	r0, [r5, #0]
 808ca56:	4638      	mov	r0, r7
 808ca58:	b002      	add	sp, #8
 808ca5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808ca5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808ca62:	e7d6      	b.n	808ca12 <__d2b+0x1e>
 808ca64:	6179      	str	r1, [r7, #20]
 808ca66:	e7e7      	b.n	808ca38 <__d2b+0x44>
 808ca68:	a801      	add	r0, sp, #4
 808ca6a:	f7ff fd32 	bl	808c4d2 <__lo0bits>
 808ca6e:	2101      	movs	r1, #1
 808ca70:	9b01      	ldr	r3, [sp, #4]
 808ca72:	6139      	str	r1, [r7, #16]
 808ca74:	617b      	str	r3, [r7, #20]
 808ca76:	3020      	adds	r0, #32
 808ca78:	e7e5      	b.n	808ca46 <__d2b+0x52>
 808ca7a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808ca7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808ca82:	6030      	str	r0, [r6, #0]
 808ca84:	6918      	ldr	r0, [r3, #16]
 808ca86:	f7ff fd04 	bl	808c492 <__hi0bits>
 808ca8a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 808ca8e:	6029      	str	r1, [r5, #0]
 808ca90:	e7e1      	b.n	808ca56 <__d2b+0x62>

0808ca92 <__ratio>:
 808ca92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ca96:	4688      	mov	r8, r1
 808ca98:	4669      	mov	r1, sp
 808ca9a:	4681      	mov	r9, r0
 808ca9c:	f7ff ff56 	bl	808c94c <__b2d>
 808caa0:	460f      	mov	r7, r1
 808caa2:	4604      	mov	r4, r0
 808caa4:	460d      	mov	r5, r1
 808caa6:	4640      	mov	r0, r8
 808caa8:	a901      	add	r1, sp, #4
 808caaa:	f7ff ff4f 	bl	808c94c <__b2d>
 808caae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808cab2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808cab6:	468b      	mov	fp, r1
 808cab8:	eba3 0c02 	sub.w	ip, r3, r2
 808cabc:	e9dd 3200 	ldrd	r3, r2, [sp]
 808cac0:	1a9b      	subs	r3, r3, r2
 808cac2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 808cac6:	2b00      	cmp	r3, #0
 808cac8:	bfd5      	itete	le
 808caca:	460a      	movle	r2, r1
 808cacc:	462a      	movgt	r2, r5
 808cace:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 808cad2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 808cad6:	bfd8      	it	le
 808cad8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 808cadc:	465b      	mov	r3, fp
 808cade:	4602      	mov	r2, r0
 808cae0:	4639      	mov	r1, r7
 808cae2:	4620      	mov	r0, r4
 808cae4:	f7fd fb10 	bl	808a108 <__aeabi_ddiv>
 808cae8:	b003      	add	sp, #12
 808caea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808caee <__copybits>:
 808caee:	3901      	subs	r1, #1
 808caf0:	b570      	push	{r4, r5, r6, lr}
 808caf2:	1149      	asrs	r1, r1, #5
 808caf4:	6914      	ldr	r4, [r2, #16]
 808caf6:	3101      	adds	r1, #1
 808caf8:	f102 0314 	add.w	r3, r2, #20
 808cafc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808cb00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808cb04:	1f05      	subs	r5, r0, #4
 808cb06:	42a3      	cmp	r3, r4
 808cb08:	d30c      	bcc.n	808cb24 <__copybits+0x36>
 808cb0a:	1aa3      	subs	r3, r4, r2
 808cb0c:	3b11      	subs	r3, #17
 808cb0e:	f023 0303 	bic.w	r3, r3, #3
 808cb12:	3211      	adds	r2, #17
 808cb14:	42a2      	cmp	r2, r4
 808cb16:	bf88      	it	hi
 808cb18:	2300      	movhi	r3, #0
 808cb1a:	4418      	add	r0, r3
 808cb1c:	2300      	movs	r3, #0
 808cb1e:	4288      	cmp	r0, r1
 808cb20:	d305      	bcc.n	808cb2e <__copybits+0x40>
 808cb22:	bd70      	pop	{r4, r5, r6, pc}
 808cb24:	f853 6b04 	ldr.w	r6, [r3], #4
 808cb28:	f845 6f04 	str.w	r6, [r5, #4]!
 808cb2c:	e7eb      	b.n	808cb06 <__copybits+0x18>
 808cb2e:	f840 3b04 	str.w	r3, [r0], #4
 808cb32:	e7f4      	b.n	808cb1e <__copybits+0x30>

0808cb34 <__any_on>:
 808cb34:	f100 0214 	add.w	r2, r0, #20
 808cb38:	6900      	ldr	r0, [r0, #16]
 808cb3a:	114b      	asrs	r3, r1, #5
 808cb3c:	4298      	cmp	r0, r3
 808cb3e:	b510      	push	{r4, lr}
 808cb40:	db11      	blt.n	808cb66 <__any_on+0x32>
 808cb42:	dd0a      	ble.n	808cb5a <__any_on+0x26>
 808cb44:	f011 011f 	ands.w	r1, r1, #31
 808cb48:	d007      	beq.n	808cb5a <__any_on+0x26>
 808cb4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808cb4e:	fa24 f001 	lsr.w	r0, r4, r1
 808cb52:	fa00 f101 	lsl.w	r1, r0, r1
 808cb56:	428c      	cmp	r4, r1
 808cb58:	d10b      	bne.n	808cb72 <__any_on+0x3e>
 808cb5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808cb5e:	4293      	cmp	r3, r2
 808cb60:	d803      	bhi.n	808cb6a <__any_on+0x36>
 808cb62:	2000      	movs	r0, #0
 808cb64:	bd10      	pop	{r4, pc}
 808cb66:	4603      	mov	r3, r0
 808cb68:	e7f7      	b.n	808cb5a <__any_on+0x26>
 808cb6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808cb6e:	2900      	cmp	r1, #0
 808cb70:	d0f5      	beq.n	808cb5e <__any_on+0x2a>
 808cb72:	2001      	movs	r0, #1
 808cb74:	e7f6      	b.n	808cb64 <__any_on+0x30>

0808cb76 <_calloc_r>:
 808cb76:	b538      	push	{r3, r4, r5, lr}
 808cb78:	fb02 f501 	mul.w	r5, r2, r1
 808cb7c:	4629      	mov	r1, r5
 808cb7e:	f7fa fe19 	bl	80877b4 <_malloc_r>
 808cb82:	4604      	mov	r4, r0
 808cb84:	b118      	cbz	r0, 808cb8e <_calloc_r+0x18>
 808cb86:	462a      	mov	r2, r5
 808cb88:	2100      	movs	r1, #0
 808cb8a:	f7fe f903 	bl	808ad94 <memset>
 808cb8e:	4620      	mov	r0, r4
 808cb90:	bd38      	pop	{r3, r4, r5, pc}

0808cb92 <__ascii_wctomb>:
 808cb92:	4603      	mov	r3, r0
 808cb94:	4608      	mov	r0, r1
 808cb96:	b141      	cbz	r1, 808cbaa <__ascii_wctomb+0x18>
 808cb98:	2aff      	cmp	r2, #255	; 0xff
 808cb9a:	d904      	bls.n	808cba6 <__ascii_wctomb+0x14>
 808cb9c:	228a      	movs	r2, #138	; 0x8a
 808cb9e:	f04f 30ff 	mov.w	r0, #4294967295
 808cba2:	601a      	str	r2, [r3, #0]
 808cba4:	4770      	bx	lr
 808cba6:	2001      	movs	r0, #1
 808cba8:	700a      	strb	r2, [r1, #0]
 808cbaa:	4770      	bx	lr

0808cbac <__aeabi_d2lz>:
 808cbac:	b538      	push	{r3, r4, r5, lr}
 808cbae:	460c      	mov	r4, r1
 808cbb0:	4605      	mov	r5, r0
 808cbb2:	4621      	mov	r1, r4
 808cbb4:	4628      	mov	r0, r5
 808cbb6:	2200      	movs	r2, #0
 808cbb8:	2300      	movs	r3, #0
 808cbba:	f7fd fbed 	bl	808a398 <__aeabi_dcmplt>
 808cbbe:	b928      	cbnz	r0, 808cbcc <__aeabi_d2lz+0x20>
 808cbc0:	4628      	mov	r0, r5
 808cbc2:	4621      	mov	r1, r4
 808cbc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808cbc8:	f7fe b852 	b.w	808ac70 <__aeabi_d2ulz>
 808cbcc:	4628      	mov	r0, r5
 808cbce:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 808cbd2:	f7fe f84d 	bl	808ac70 <__aeabi_d2ulz>
 808cbd6:	4240      	negs	r0, r0
 808cbd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808cbdc:	bd38      	pop	{r3, r4, r5, pc}
 808cbde:	bf00      	nop

0808cbe0 <dynalib_user>:
 808cbe0:	0051 0808 0091 0808 00b9 0808 00bd 0808     Q...............
 808cbf0:	0000 0000 0100 0402 1008 2e25 5832 5400     ..........%.2X.T
 808cc00:	6d65 6570 6172 7574 6572 7220 6165 6964     emperature readi
 808cc10:	676e 6620 6f72 206d 4948 3848 3231 0030     ng from HIH8120.
 808cc20:	6554 706d 7265 7461 7275 2065 6572 6461     Temperature read
 808cc30:	6e69 2067 7266 6d6f 5420 504d 3633 5400     ing from TMP36.T
 808cc40:	6d65 6570 6172 7574 6572 7220 6165 6964     emperature readi
 808cc50:	676e 6620 6f72 206d 4d42 2045 6f66 2072     ng from BME for 
 808cc60:	6c41 6870 7361 6e65 6573 5300 6174 7472     Alphasense.Start
 808cc70:	6f20 2066 6c61 6870 2061 2032 6572 6461      of alpha 2 read
 808cc80:	4300 756f 646c 276e 2074 6f63 6d6d 6e75     .Couldn't commun
 808cc90:	6369 7461 2065 6977 6874 4c20 504d 3139     icate with LMP91
 808cca0:	3030 2030 0032 6168 666c 7620 6572 3266     000 2.half vref2
 808ccb0:	6120 7364 0031 7453 7461 7375 3d20 203d      ads1.Status == 
 808ccc0:	2030 7266 6d6f 4c20 504d 3139 3030 2030     0 from LMP91000 
 808ccd0:	2032 7473 7461 7375 7220 6765 2d00 3939     2 status reg.-99
 808cce0:	5700 6972 6974 676e 6420 7461 2061 6f74     .Writing data to
 808ccf0:	6c20 676f 6620 6c69 2e65 4600 6c69 2065      log file..File 
 808cd00:	7453 7261 2074 6974 656d 7473 6d61 3a70     Start timestamp:
 808cd10:	0020 6e55 6261 656c 7420 206f 7277 7469      .Unable to writ
 808cd20:	2065 6f74 6c20 676f 6620 6c69 0065 6e69     e to log file.in
 808cd30:	7469 4700 4147 4500 7272 726f 7220 6165     it.GGA.Error rea
 808cd40:	6964 676e 4720 5350 4700 5350 7520 6374     ding GPS.GPS utc
 808cd50:	7320 7274 6e69 3a67 0020 614c 6974 7574      string: .Latitu
 808cd60:	6564 7320 7274 6e69 3a67 0020 6f6c 676e     de string: .long
 808cd70:	7469 6475 2065 7473 6972 676e 203a 4200     itude string: .B
 808cd80:	4441 6920 646e 7865 6920 206e 6572 6461     AD index in read
 808cd90:	7047 5373 7274 6165 0a6d 4500 7272 726f     GpsStream..Error
 808cda0:	7220 6165 6964 676e 4720 5350 5220 434d      reading GPS RMC
 808cdb0:	5200 6365 6965 6576 2064 6162 2064 6e69     .Received bad in
 808cdc0:	6564 2078 6e69 7220 6165 4764 7370 7453     dex in readGpsSt
 808cdd0:	6572 6d61 6144 6574 5300 6174 7472 6f20     reamDate.Start o
 808cde0:	2066 6c61 6870 2061 6572 6461 4300 756f     f alpha read.Cou
 808cdf0:	646c 276e 2074 6f63 6d6d 6e75 6369 7461     ldn't communicat
 808ce00:	2065 6977 6874 4c20 504d 3139 3030 5f30     e with LMP91000_
 808ce10:	0031 6148 666c 6f76 746c 203a 3125 322e     1.Halfvolt: %1.2
 808ce20:	0a66 000d 6148 666c 6f76 746c 6820 6769     f...Halfvolt hig
 808ce30:	6568 2072 6874 6e61 3020 352e 5300 6174     her than 0.5.Sta
 808ce40:	7574 2073 203d 2030 7266 6d6f 4c20 504d     tus = 0 from LMP
 808ce50:	3139 3030 2030 7473 7461 7375 7220 6765     91000 status reg
 808ce60:	4c00 504d 3031 3030 7320 6174 7574 2073     .LMP1000 status 
 808ce70:	203d 0030 4f43 6d20 6165 7573 6572 656d     = 0.CO measureme
 808ce80:	746e 3a73 2020 0d0a 4000 0021 002c 6553     nts:  ...@!.,.Se
 808ce90:	646e 6e69 2067 656e 2077 6977 6966 6320     nding new wifi c
 808cea0:	6572 6564 746e 6169 736c 7420 206f 5345     redentials to ES
 808ceb0:	0050 7553 6363 7365 2173 4f00 7475 7570     P.Success!.Outpu
 808cec0:	7474 6e69 2067 4f43 7420 206f 4950 002e     tting CO to PI..
 808ced0:	002d 6425 252f 2f6d 7925 252c 3a48 4d25     -.%d/%m/%y,%H:%M
 808cee0:	253a 0053 0d0a 0026 6c4f 2064 6e69 7570     :%S...&.Old inpu
 808cef0:	2074 7563 7272 6e65 2074 696c 696d 3a74     t current limit:
 808cf00:	2520 0a64 000d 654e 2077 6e69 7570 2074      %d...New input 
 808cf10:	7563 7272 6e65 2074 696c 696d 3a74 2520     current limit: %
 808cf20:	0a64 000d 6e49 7263 6165 6973 676e 4320     d...Increasing C
 808cf30:	6168 6772 2065 7563 7272 6e65 2074 7266     harge current fr
 808cf40:	6d6f 2520 2064 416d 7420 206f 6e00 7765     om %d mA to .new
 808cf50:	6320 6168 6772 2065 7563 7272 6e65 2074      charge current 
 808cf60:	666f 2520 2064 416d 0d0a 4300 7275 6572     of %d mA...Curre
 808cf70:	746e 7320 6f74 6572 2064 7373 6469 203a     nt stored ssid: 
 808cf80:	4300 7275 6572 746e 7320 6f74 6572 2064     .Current stored 
 808cf90:	6170 7373 6f77 6472 203a 5000 656c 7361     password: .Pleas
 808cfa0:	2065 6e65 6574 2072 6170 7373 6f77 6472     e enter password
 808cfb0:	6920 206e 726f 6564 2072 6f74 6d20 6b61      in order to mak
 808cfc0:	2065 6863 6e61 6567 2e73 0d0a 6200 756f     e changes....bou
 808cfd0:	646c 5000 7361 7773 726f 2064 6f63 7272     ld.Password corr
 808cfe0:	6365 2174 4500 746e 7265 6e20 7765 7320     ect!.Enter new s
 808cff0:	6973 3a64 5900 756f 2072 656e 2077 7373     sid:.Your new ss
 808d000:	6469 7720 6c69 206c 6562 203a 4900 2073     id will be: .Is 
 808d010:	6874 7369 6f20 616b 3f79 7928 6f20 2072     this okay?(y or 
 808d020:	296e 5300 7661 6e69 2067 656e 2077 7373     n).Saving new ss
 808d030:	6469 4500 746e 7265 6e20 7765 7020 7361     id.Enter new pas
 808d040:	7773 726f 0064 6f59 7275 6e20 7765 7020     sword.Your new p
 808d050:	7361 7773 726f 2064 6977 6c6c 6220 3a65     assword will be:
 808d060:	0020 6153 6976 676e 6e20 7765 7020 7361      .Saving new pas
 808d070:	7773 726f 0064 6b6f 7961 202c 6f6e 7020     sword.okay, no p
 808d080:	6f72 6c62 6d65 0d0a 5000 656c 7361 2065     roblem...Please 
 808d090:	6e65 6574 2072 6170 7373 6f77 6472 6920     enter password i
 808d0a0:	206e 726f 6564 2072 6f74 6520 616e 6c62     n order to enabl
 808d0b0:	2065 6164 6174 7020 7375 2068 6f74 5320     e data push to S
 808d0c0:	6e65 6973 6c62 2065 6f49 0074 6d69 6573     ensible Iot.imse
 808d0d0:	736e 6269 656c 4500 616e 6c62 6e69 2067     nsible.Enabling 
 808d0e0:	6573 736e 6269 656c 6920 746f 6420 7461     sensible iot dat
 808d0f0:	2061 7570 6873 002e 0d0a 6e49 6f63 7272     a push....Incorr
 808d100:	6365 2074 6170 7373 6f77 6472 0021 6c50     ect password!.Pl
 808d110:	6165 6573 6520 746e 7265 7020 7361 7773     ease enter passw
 808d120:	726f 2064 6e69 6f20 6472 7265 7420 206f     ord in order to 
 808d130:	7061 6c70 2079 6564 6166 6c75 2074 6573     apply default se
 808d140:	7474 6e69 7367 5000 7361 7773 726f 2064     ttings.Password 
 808d150:	6f63 7272 6365 2c74 7220 7365 7465 6974     correct, resetti
 808d160:	676e 6120 6c6c 7320 7465 6974 676e 2073     ng all settings 
 808d170:	6f74 6420 6665 7561 746c 2021 5020 656c     to default!  Ple
 808d180:	7361 2065 6572 6573 2074 6f79 7275 4920     ase reset your I
 808d190:	2044 6f74 7420 6568 6f20 656e 7320 6f68     D to the one sho
 808d1a0:	6e77 6f20 206e 6f79 7275 6520 636e 6f6c     wn on your enclo
 808d1b0:	7573 6572 002e 6e45 6574 2072 656e 2077     sure..Enter new 
 808d1c0:	6544 6976 6563 7420 6d69 2065 6e61 2064     Device time and 
 808d1d0:	6164 6574 2820 3031 6420 6769 7469 6520     date (10 digit e
 808d1e0:	6f70 6863 7420 6d69 7365 6174 706d 3a29     poch timestamp):
 808d1f0:	0a00 4e0d 7765 4420 7665 6369 2065 6954     ...New Device Ti
 808d200:	656d 003a 0d0a 6e49 6176 696c 2064 6176     me:...Invalid va
 808d210:	756c 2165 4300 7275 6572 746e 4320 324f     lue!.Current CO2
 808d220:	7320 6f6c 6570 003a 7020 6d70 4500 746e      slope:. ppm.Ent
 808d230:	7265 6e20 7765 4320 324f 7320 6f6c 6570     er new CO2 slope
 808d240:	0d0a 0a00 4e0d 7765 4320 324f 7320 6f6c     .....New CO2 slo
 808d250:	6570 203a 4300 7275 6572 746e 4320 204f     pe: .Current CO 
 808d260:	6c73 706f 3a65 4500 746e 7265 6e20 7765     slope:.Enter new
 808d270:	4320 204f 6c73 706f 0a65 000d 0d0a 654e      CO slope.....Ne
 808d280:	2077 4f43 2041 6c73 706f 3a65 0020 7543     w COA slope: .Cu
 808d290:	7272 6e65 2074 6554 706d 7265 7461 7275     rrent Temperatur
 808d2a0:	2065 6c73 706f 3a65 2000 6544 7267 6565     e slope:. Degree
 808d2b0:	2073 0043 6e45 6574 2072 656e 2077 6554     s C.Enter new Te
 808d2c0:	706d 7265 7461 7275 2065 6c73 706f 0a65     mperature slope.
 808d2d0:	000d 0d0a 654e 2077 6554 706d 7265 7461     ....New Temperat
 808d2e0:	7275 2065 6c73 706f 3a65 0020 7543 7272     ure slope: .Curr
 808d2f0:	6e65 2074 7250 7365 7573 6572 7320 6f6c     ent Pressure slo
 808d300:	6570 003a 7420 726f 0072 6e45 6574 2072     pe:. torr.Enter 
 808d310:	656e 2077 7250 7365 7573 6572 7320 6f6c     new Pressure slo
 808d320:	6570 0d0a 0a00 4e0d 7765 5020 6572 7373     pe.....New Press
 808d330:	7275 2065 6c73 706f 3a65 0020 7543 7272     ure slope: .Curr
 808d340:	6e65 2074 4852 7320 6f6c 6570 003a 2520     ent RH slope:. %
 808d350:	4500 746e 7265 6e20 7765 5220 2048 6c73     .Enter new RH sl
 808d360:	706f 0a65 000d 0d0a 654e 2077 4852 7320     ope.....New RH s
 808d370:	6f6c 6570 203a 4300 6d6f 616d 646e 203a     lope: .Command: 
 808d380:	4420 7365 7263 7069 6974 6e6f 6100 203a      Description.a: 
 808d390:	4120 6a64 7375 2074 4f43 2032 6c73 706f      Adjust CO2 slop
 808d3a0:	0065 3a62 2020 6441 756a 7473 4320 324f     e.b:  Adjust CO2
 808d3b0:	7a20 7265 006f 3a63 2020 6441 756a 7473      zero.c:  Adjust
 808d3c0:	4320 204f 6c73 706f 0065 3a64 2020 6441      CO slope.d:  Ad
 808d3d0:	756a 7473 4320 204f 657a 6f72 6500 203a     just CO zero.e: 
 808d3e0:	4120 6a64 7375 2074 4d50 2031 6c73 706f      Adjust PM1 slop
 808d3f0:	0065 3a66 2020 6441 756a 7473 5020 314d     e.f:  Adjust PM1
 808d400:	7a20 7265 006f 3a67 2020 6441 756a 7473      zero.g:  Adjust
 808d410:	5020 324d 352e 7320 6f6c 6570 6800 203a      PM2.5 slope.h: 
 808d420:	4120 6a64 7375 2074 4d50 2e32 2035 657a      Adjust PM2.5 ze
 808d430:	6f72 6900 203a 4120 6a64 7375 2074 4d50     ro.i:  Adjust PM
 808d440:	3031 7320 6f6c 6570 6a00 203a 4120 6a64     10 slope.j:  Adj
 808d450:	7375 2074 4d50 3031 7a20 7265 006f 3a6b     ust PM10 zero.k:
 808d460:	2020 6441 756a 7473 5420 6d65 6570 6172       Adjust Tempera
 808d470:	7574 6572 7320 6f6c 6570 6c00 203a 4120     ture slope.l:  A
 808d480:	6a64 7375 2074 6554 706d 7265 7461 7275     djust Temperatur
 808d490:	2065 657a 6f72 6d00 203a 4120 6a64 7375     e zero.m:  Adjus
 808d4a0:	2074 7250 7365 7573 6572 7320 6f6c 6570     t Pressure slope
 808d4b0:	6e00 203a 4120 6a64 7375 2074 7250 7365     .n:  Adjust Pres
 808d4c0:	7573 6572 7a20 7265 006f 3a6f 2020 6441     sure zero.o:  Ad
 808d4d0:	756a 7473 4820 6d75 6469 7469 2079 6c73     just Humidity sl
 808d4e0:	706f 0065 3a70 2020 6441 756a 7473 4820     ope.p:  Adjust H
 808d4f0:	6d75 6469 7469 2079 657a 6f72 7100 203a     umidity zero.q: 
 808d500:	4520 616e 6c62 2065 6573 6972 6c61 6420      Enable serial d
 808d510:	6265 6775 6967 676e 7200 203a 4420 7369     ebugging.r:  Dis
 808d520:	6261 656c 7320 7265 6169 206c 6564 7562     able serial debu
 808d530:	6767 6e69 0067 3a73 2020 754f 7074 7475     gging.s:  Output
 808d540:	6820 6165 6564 2072 7473 6972 676e 7400      header string.t
 808d550:	203a 4520 746e 7265 6e20 7765 7420 6d69     :  Enter new tim
 808d560:	2065 6e61 2064 6164 6574 7500 203a 4520     e and date.u:  E
 808d570:	746e 7265 6e20 7765 7420 6d69 2065 6f7a     nter new time zo
 808d580:	656e 7600 203a 4120 6a64 7375 2074 6874     ne.v:  Adjust th
 808d590:	2065 6544 6976 6563 4920 0044 3a77 2020     e Device ID.w:  
 808d5a0:	6547 2074 6977 6966 6320 6572 6564 746e     Get wifi credent
 808d5b0:	6169 736c 7900 203a 4520 616e 6c62 2065     ials.y:  Enable 
 808d5c0:	6563 6c6c 6c75 7261 7a00 203a 4420 7369     cellular.z:  Dis
 808d5d0:	6261 656c 6320 6c65 756c 616c 0072 3a31     able cellular.1:
 808d5e0:	2020 6441 756a 7473 6720 7361 6c20 776f       Adjust gas low
 808d5f0:	7265 6c20 6d69 7469 3200 203a 4120 6a64     er limit.2:  Adj
 808d600:	7375 2074 6167 2073 7075 6570 2072 696c     ust gas upper li
 808d610:	696d 0074 3a33 2020 6547 2074 7562 6c69     mit.3:  Get buil
 808d620:	2064 6576 7372 6f69 006e 3a34 2020 6e45     d version.4:  En
 808d630:	6261 656c 4f20 6f7a 656e 3500 203a 4420     able Ozone.5:  D
 808d640:	7369 6261 656c 4f20 6f7a 656e 3600 203a     isable Ozone.6: 
 808d650:	4520 616e 6c62 2065 4f56 2743 0073 3a37      Enable VOC's.7:
 808d660:	2020 6944 6173 6c62 2065 4f56 2743 0073       Disable VOC's.
 808d670:	3a38 2020 754f 7074 7475 7420 6568 5020     8:  Output the P
 808d680:	494d 2043 7973 7473 6d65 6320 6e6f 6966     MIC system confi
 808d690:	7567 6172 6974 6e6f 3900 203a 4920 636e     guration.9:  Inc
 808d6a0:	6572 7361 2065 6874 2065 6863 7261 6567     rease the charge
 808d6b0:	6320 7275 6572 746e 6220 2079 3436 6d20      current by 64 m
 808d6c0:	0041 3a30 2020 6e49 7263 6165 6573 7420     A.0:  Increase t
 808d6d0:	6568 6320 7275 6572 746e 6920 706e 7475     he current input
 808d6e0:	6c20 6d69 7469 6220 2079 3031 2030 416d      limit by 100 mA
 808d6f0:	4100 203a 4f20 7475 7570 2074 4f43 6320     .A:  Output CO c
 808d700:	6e6f 7473 6e61 6c74 2079 6e61 2064 6172     onstantly and ra
 808d710:	6970 6c64 0079 3a42 2020 754f 7074 7475     pidly.B:  Output
 808d720:	5020 204d 6f63 736e 6174 746e 796c 6120      PM constantly a
 808d730:	646e 7220 7061 6469 796c 4300 203a 4320     nd rapidly.C:  C
 808d740:	6168 676e 2065 6574 706d 7265 7461 7275     hange temperatur
 808d750:	2065 6e75 7469 2073 6f74 4320 6c65 6973     e units to Celsi
 808d760:	7375 4400 203a 4420 7369 6261 656c 5420     us.D:  Disable T
 808d770:	504d 3633 7420 6d65 6570 6172 7574 6572     MP36 temperature
 808d780:	7320 6e65 6f73 2072 6e61 2064 7375 2065      sensor and use 
 808d790:	4d42 3645 3038 7420 6d65 6570 6172 7574     BME680 temperatu
 808d7a0:	6572 4500 203a 4520 616e 6c62 2065 4d54     re.E:  Enable TM
 808d7b0:	3350 2036 6574 706d 7265 7461 7275 2065     P36 temperature 
 808d7c0:	6573 736e 726f 6120 646e 6420 7369 6261     sensor and disab
 808d7d0:	656c 4220 454d 3836 2030 6574 706d 7265     le BME680 temper
 808d7e0:	7461 7275 0065 3a46 2020 6843 6e61 6567     ature.F:  Change
 808d7f0:	7420 6d65 6570 6172 7574 6572 7520 696e      temperature uni
 808d800:	7374 7420 206f 6146 7268 6e65 6568 7469     ts to Fahrenheit
 808d810:	4700 203a 5220 6165 2064 7a6f 6e6f 2065     .G:  Read ozone 
 808d820:	7266 6d6f 6120 616e 6f6c 2067 6e69 7570     from analog inpu
 808d830:	2074 6e28 746f 6420 6769 7469 6c61 796c     t (not digitally
 808d840:	2d20 6220 616f 6472 6420 7065 6e65 6564      - board depende
 808d850:	746e 0029 3a48 2020 6552 6461 6f20 6f7a     nt).H:  Read ozo
 808d860:	656e 6420 6769 7469 6c61 796c 2820 6f6e     ne digitally (no
 808d870:	2074 6874 6f72 6775 2068 6e61 6c61 676f     t through analog
 808d880:	6920 706e 7475 2d20 6220 616f 6472 6420      input - board d
 808d890:	7065 6e65 6564 746e 0029 3a49 2020 6441     ependent).I:  Ad
 808d8a0:	756a 7473 6620 6572 7571 6e65 7963 6620     just frequency f
 808d8b0:	726f 7520 6c70 616f 6964 676e 7420 7268     or uploading thr
 808d8c0:	756f 6867 6320 6c65 756c 616c 0072 3a4a     ough cellular.J:
 808d8d0:	2020 6552 6573 2074 5345 2c50 4320 324f       Reset ESP, CO2
 808d8e0:	202c 6c50 6e61 6f74 6577 0072 3a4b 2020     , Plantower.K:  
 808d8f0:	6f43 746e 6e69 6f75 7375 7320 7265 6169     Continuous seria
 808d900:	206c 756f 7074 7475 6f20 2066 5047 0053     l output of GPS.
 808d910:	3a4c 2020 7257 7469 2065 6564 6166 6c75     L:  Write defaul
 808d920:	2074 6573 7474 6e69 7367 4d00 203a 4520     t settings.M:  E
 808d930:	616e 6c62 2065 3032 2025 6162 7474 7265     nable 20% batter
 808d940:	2079 6874 6572 6873 6c6f 2064 696c 696d     y threshold limi
 808d950:	6974 676e 4e00 203a 4420 7369 6261 656c     ting.N:  Disable
 808d960:	3220 2530 6220 7461 6574 7972 7420 7268      20% battery thr
 808d970:	7365 6f68 646c 6c20 6d69 7469 6e69 2067     eshold limiting 
 808d980:	4157 4e52 4e49 2147 0021 3a4f 2020 6e45     WARNING!!.O:  En
 808d990:	6261 656c 6c20 776f 7020 776f 7265 6620     able low power f
 808d9a0:	726f 4720 5350 6d20 646f 6c75 0065 3a50     or GPS module.P:
 808d9b0:	2020 7554 6e72 6f20 6666 4220 5441 4546       Turn off BATFE
 808d9c0:	0054 3a51 2020 6c41 6f6c 2077 4142 4654     T.Q:  Allow BATF
 808d9d0:	5445 7420 206f 7574 6e72 6f20 006e 3a52     ET to turn on.R:
 808d9e0:	2020 6944 6173 6c62 2065 4241 2043 6f6c       Disable ABC lo
 808d9f0:	6967 2063 6f66 2072 4f43 2032 6573 736e     gic for CO2 sens
 808da00:	726f 5300 203a 4520 616e 6c62 2065 4241     or.S:  Enable AB
 808da10:	2043 6f6c 6967 2063 6f66 2072 4f43 2032     C logic for CO2 
 808da20:	6573 736e 726f 5400 203a 4520 616e 6c62     sensor.T:  Enabl
 808da30:	2f65 6964 6173 6c62 2065 4948 3848 3231     e/disable HIH812
 808da40:	2030 4852 7320 6e65 6f73 0072 3a55 2020     0 RH sensor.U:  
 808da50:	7753 7469 6863 7320 636f 656b 2074 6877     Switch socket wh
 808da60:	7265 2065 4f43 6920 2073 6572 6461 6620     ere CO is read f
 808da70:	6f72 006d 3a57 2020 6e45 6261 656c 442f     rom.W:  Enable/D
 808da80:	7369 6261 656c 6720 6f6f 6c67 2065 6f6c     isable google lo
 808da90:	6163 6974 6e6f 7320 7265 6976 6563 0073     cation services.
 808daa0:	3a56 2020 6143 696c 7262 7461 2065 4f43     V:  Calibrate CO
 808dab0:	2032 6573 736e 726f 2d20 6d20 7375 2074     2 sensor - must 
 808dac0:	7573 7070 796c 6120 626d 6569 746e 6c20     supply ambient l
 808dad0:	7665 6c65 2820 6f67 6f20 7475 6973 6564     evel (go outside
 808dae0:	2921 5a00 203a 4f20 7475 7570 2074 6563     !).Z:  Output ce
 808daf0:	6c6c 6c75 7261 6920 666e 726f 616d 6974     llular informati
 808db00:	6e6f 2820 4343 4449 202c 4d49 4945 202c     on (CCID, IMEI, 
 808db10:	7465 2963 2100 203a 4320 6e6f 6974 756e     etc).!:  Continu
 808db20:	756f 2073 6573 6972 6c61 6f20 7475 7570     ous serial outpu
 808db30:	2074 666f 5620 434f 7327 4000 2020 4520     t of VOC's.@   E
 808db40:	616e 6c62 2f65 6944 6173 6c62 2065 6553     nable/Disable Se
 808db50:	736e 6269 656c 692d 746f 6420 7461 2061     nsible-iot data 
 808db60:	7570 6873 202e 4920 2066 6e65 6261 656c     push.  If enable
 808db70:	2c64 7420 6d69 2065 6f7a 656e 7720 6c69     d, time zone wil
 808db80:	206c 6562 6920 6e67 726f 6465 2d20 5520     l be ignored - U
 808db90:	4354 7720 6c69 206c 6562 7520 6573 2e64     TC will be used.
 808dba0:	2300 2020 4520 616e 6c62 2f65 6944 6173     .#   Enable/Disa
 808dbb0:	6c62 2065 6163 7472 706f 6570 2072 6f70     ble cartopper po
 808dbc0:	6577 2072 6f6d 6564 202e 4920 2066 6e65     wer mode.  If en
 808dbd0:	6261 656c 2c64 6120 7362 6e65 6563 6f20     abled, absence o
 808dbe0:	2066 7865 6574 6e72 6c61 7020 776f 7265     f external power
 808dbf0:	7720 6c69 206c 7473 706f 6320 6c65 756c      will stop cellu
 808dc00:	616c 2e72 3f00 203a 4f20 7475 7570 2074     lar..?:  Output 
 808dc10:	6874 7369 6d20 6e65 0075 3a78 2020 7845     this menu.x:  Ex
 808dc20:	7469 2073 6874 7369 6d20 6e65 0075 003b     its this menu.;.
 808dc30:	694c 656e 7420 206f 7277 7469 2065 6f74     Line to write to
 808dc40:	6320 6f6c 6475 003a 6c62 6861 6f66 6e72      cloud:.blahforn
 808dc50:	776f 5300 6e65 6964 676e 6420 7461 2061     ow.Sending data 
 808dc60:	6f74 6520 7073 7420 206f 7075 6f6c 6461     to esp to upload
 808dc70:	7620 6169 7720 6669 2e69 2e2e 5300 6e65      via wifi....Sen
 808dc80:	6964 676e 6420 7461 2061 6f74 6520 7073     ding data to esp
 808dc90:	7420 206f 7075 6f6c 6461 7620 6169 7720      to upload via w
 808dca0:	6669 0069 7257 7469 6e69 2067 6f72 2077     ifi.Writing row 
 808dcb0:	6f74 6620 6c69 2e65 4400 5645 432c 284f     to file..DEV,CO(
 808dcc0:	7070 296d 432c 324f 7028 6d70 2c29 4f56     ppm),CO2(ppm),VO
 808dcd0:	7343 4928 5141 2c29 4d50 2c31 4d50 5f32     Cs(IAQ),PM1,PM2_
 808dce0:	2c35 4d50 3031 542c 4328 2c29 7250 7365     5,PM10,T(C),Pres
 808dcf0:	2873 426d 7261 2c29 4852 2528 2c29 334f     s(mBar),RH(%),O3
 808dd00:	7028 6270 2c29 6142 7474 2528 2c29 6e53     (ppb),Batt(%),Sn
 808dd10:	2864 6264 2c29 614c 6974 7574 6564 4c2c     d(db),Latitude,L
 808dd20:	6e6f 6967 7574 6564 4e2c 412f 4e2c 412f     ongitude,N/A,N/A
 808dd30:	442c 7461 2f65 6954 656d 2400 5a00 0026     ,Date/Time.$.Z&.
 808dd40:	005c 7473 6972 676e 6620 6f72 206d 6272     \.string from rb
 808dd50:	6970 203a 5400 6968 2073 7369 7720 6168     pi: .This is wha
 808dd60:	2074 2049 6d61 7020 6275 696c 6873 6e69     t I am publishin
 808dd70:	3a67 0020 5141 7953 636e 5700 2065 7261     g: .AQSync.We ar
 808dd80:	2065 7075 6164 6974 676e 7420 6568 6420     e updating the d
 808dd90:	6169 6e67 736f 6974 2063 6176 6972 6261     iagnostic variab
 808dda0:	656c 6820 7265 0065 6567 6574 7065 6f72     le here.geteepro
 808ddb0:	646d 7461 0061 6572 6f62 746f 7161 7973     mdata.rebootaqsy
 808ddc0:	636e 6400 6169 6e67 736f 6974 7363 4300     nc.diagnostics.C
 808ddd0:	5f4f 657a 6f72 0041 742e 7478 4300 6568     O_zeroA..txt.Che
 808dde0:	6b63 6e69 2067 6f66 2072 6473 6320 7261     cking for sd car
 808ddf0:	0064 6f6c 5f67 4300 6572 7461 6465 6e20     d.log_.Created n
 808de00:	7765 6620 6c69 2065 6f74 6c20 676f 7420     ew file to log t
 808de10:	206f 5375 2044 6163 6472 203a 4e00 206f     o uSD card: .No 
 808de20:	5375 2044 6163 6472 6420 7465 6365 6574     uSD card detecte
 808de30:	2e64 5300 6174 7472 6e69 2067 4d4c 3950     d..Starting LMP9
 808de40:	3031 3030 4320 204f 6e69 7469 6169 696c     1000 CO initiali
 808de50:	617a 6974 6e6f 4300 756f 646c 276e 2074     zation.Couldn't 
 808de60:	6f63 6d6d 6e75 6369 7461 2065 6977 6874     communicate with
 808de70:	4c20 504d 3139 3030 5f30 2031 6f66 2072      LMP91000_1 for 
 808de80:	4f43 4900 696e 6974 6c61 7a69 6465 4c20     CO.Initialized L
 808de90:	504d 3139 3030 5f30 2031 6f66 2072 4f43     MP91000_1 for CO
 808dea0:	4900 696e 6974 6c61 7a69 6465 4c20 504d     .Initialized LMP
 808deb0:	3139 3030 2030 6f66 2072 4f43 4300 756f     91000 for CO.Cou
 808dec0:	646c 6e20 746f 6320 6d6f 756d 696e 6163     ld not communica
 808ded0:	6574 7720 7469 2068 6441 6661 7572 7469     te with Adafruit
 808dee0:	415f 5344 3131 3531 6620 726f 4320 004f     _ADS1115 for CO.
 808def0:	7453 7261 6974 676e 4c20 504d 3139 3030     Starting LMP9100
 808df00:	5f30 2032 6e69 7469 6169 696c 617a 6974     0_2 initializati
 808df10:	6e6f 4300 756f 646c 276e 2074 6f63 6d6d     on.Couldn't comm
 808df20:	6e75 6369 7461 2065 6977 6874 4c20 504d     unicate with LMP
 808df30:	3139 3030 2030 6f66 2072 0032 6e49 7469     91000 for 2.Init
 808df40:	6169 696c 657a 2064 4d4c 3950 3031 3030     ialized LMP91000
 808df50:	6620 726f 4320 204f 0032 5345 2050 6572      for CO 2.ESP re
 808df60:	6573 2174 4600 2057 6556 7372 6f69 3a6e     set!.FW Version:
 808df70:	0020 7542 6c69 3a64 0020 7953 7473 6d65      .Build: .System
 808df80:	7620 7265 6973 6e6f 203a 7325 4300 7275      version: %s.Cur
 808df90:	6572 746e 4420 7665 6369 2065 4449 003a     rent Device ID:.
 808dfa0:	6c50 6165 6573 6520 746e 7265 7020 7361     Please enter pas
 808dfb0:	7773 726f 2064 6e69 6f20 6472 7265 7420     sword in order t
 808dfc0:	206f 6863 6e61 6567 7420 6568 4920 0044     o change the ID.
 808dfd0:	6e45 6574 2072 656e 2077 6544 6976 6563     Enter new Device
 808dfe0:	4920 3a44 0a00 4e0d 7765 4420 7665 6369      ID:...New Devic
 808dff0:	2065 4449 003a 6e45 6574 2072 656e 2077     e ID:.Enter new 
 808e000:	6544 6976 6563 7420 6d69 2065 6f7a 656e     Device time zone
 808e010:	2820 312d 2e32 2030 6f74 3120 2e34 2930      (-12.0 to 14.0)
 808e020:	0a00 4e0d 7765 4420 7665 6369 2065 6974     ...New Device ti
 808e030:	656d 7a20 6e6f 3a65 4300 7275 6572 746e     me zone:.Current
 808e040:	4620 6572 7571 6e65 7963 203a 2800 327e      Frequency: .(~2
 808e050:	7320 6365 6e6f 2964 6d20 6165 7573 6572      second) measure
 808e060:	656d 746e 0073 6e45 6574 2072 656e 2077     ments.Enter new 
 808e070:	6d61 756f 746e 0d0a 0a00 4e0d 7765 4620     amount.....New F
 808e080:	6572 7571 6e65 7963 203a 4300 7275 6572     requency: .Curre
 808e090:	746e 4320 324f 7a20 7265 3a6f 4500 746e     nt CO2 zero:.Ent
 808e0a0:	7265 6e20 7765 4320 324f 5a20 7265 0a6f     er new CO2 Zero.
 808e0b0:	000d 0d0a 654e 2077 4f43 2032 657a 6f72     ....New CO2 zero
 808e0c0:	203a 4300 7275 6572 746e 4320 5f4f 2041     : .Current CO_A 
 808e0d0:	657a 6f72 003a 7020 6270 4500 746e 7265     zero:. ppb.Enter
 808e0e0:	6e20 7765 4320 204f 655a 6f72 0d0a 0a00      new CO Zero....
 808e0f0:	4e0d 7765 4320 204f 657a 6f72 203a 4300     .New CO zero: .C
 808e100:	7275 6572 746e 5420 6d65 6570 6172 7574     urrent Temperatu
 808e110:	6572 7a20 7265 3a6f 4500 746e 7265 6e20     re zero:.Enter n
 808e120:	7765 5420 6d65 6570 6172 7574 6572 5a20     ew Temperature Z
 808e130:	7265 0a6f 000d 0d0a 654e 2077 6554 706d     ero.....New Temp
 808e140:	7265 7461 7275 2065 657a 6f72 203a 4300     erature zero: .C
 808e150:	7275 6572 746e 5020 6572 7373 7275 2065     urrent Pressure 
 808e160:	657a 6f72 003a 6e45 6574 2072 656e 2077     zero:.Enter new 
 808e170:	7250 7365 7573 6572 5a20 7265 0a6f 000d     Pressure Zero...
 808e180:	0d0a 654e 2077 7250 7365 7573 6572 7a20     ..New Pressure z
 808e190:	7265 3a6f 0020 7543 7272 6e65 2074 4852     ero: .Current RH
 808e1a0:	7a20 7265 3a6f 4500 746e 7265 6e20 7765      zero:.Enter new
 808e1b0:	5220 2048 655a 6f72 0d0a 0a00 4e0d 7765      RH Zero.....New
 808e1c0:	5220 2048 657a 6f72 203a 4d00 6e65 3e75      RH zero: .Menu>
 808e1d0:	5300 7265 6169 206c 6564 7562 6767 6e69     .Serial debuggin
 808e1e0:	2067 6e65 6261 656c 2e64 5300 7265 6169     g enabled..Seria
 808e1f0:	206c 6564 7562 6767 6e69 2067 6964 6173     l debugging disa
 808e200:	6c62 6465 002e 6e45 6261 696c 676e 4320     bled..Enabling C
 808e210:	6c65 756c 616c 2e72 4300 6c65 756c 616c     ellular..Cellula
 808e220:	2072 6c61 6572 6461 2079 6e65 6261 656c     r already enable
 808e230:	2e64 4400 7369 6261 696c 676e 4320 6c65     d..Disabling Cel
 808e240:	756c 616c 0072 6543 6c6c 6c75 7261 6120     lular.Cellular a
 808e250:	726c 6165 7964 6420 7369 6261 656c 2e64     lready disabled.
 808e260:	4f00 7475 7570 7474 6e69 2067 6f6e 6d72     .Outputting norm
 808e270:	6c61 796c 4f00 7475 7570 7474 6e69 2067     ally.Outputting 
 808e280:	6e6f 796c 5020 004d 6554 706d 7265 7461     only PM.Temperat
 808e290:	7275 2065 6e75 7469 2073 6c61 6572 6461     ure units alread
 808e2a0:	2079 6573 2074 6f74 4320 6c65 6973 7375     y set to Celsius
 808e2b0:	002e 6944 6173 6c62 6e69 2067 656e 2077     ..Disabling new 
 808e2c0:	6574 706d 7265 7461 7275 2065 6573 736e     temperature sens
 808e2d0:	726f 5400 6d65 6570 6172 7574 6572 7320     or.Temperature s
 808e2e0:	6e65 6f73 2072 6c61 6572 6461 2079 6964     ensor already di
 808e2f0:	6173 6c62 6465 5400 6d65 6570 6172 7574     sabled.Temperatu
 808e300:	6572 7320 6e65 6f73 2072 6c61 6572 6461     re sensor alread
 808e310:	2079 6e65 6261 656c 0064 6554 706d 7265     y enabled.Temper
 808e320:	7461 6575 7320 6e65 6f73 2072 6f6e 2077     atue sensor now 
 808e330:	6e65 6261 656c 0064 6554 706d 7265 7461     enabled.Temperat
 808e340:	7275 2065 6e75 7469 2073 6c61 6572 6461     ure units alread
 808e350:	2079 6573 2074 6f74 4620 6861 6572 686e     y set to Fahrenh
 808e360:	6965 2e74 4100 616e 6f6c 2067 6572 6461     eit..Analog read
 808e370:	6e69 2067 666f 6f20 6f7a 656e 6120 726c     ing of ozone alr
 808e380:	6165 7964 6520 616e 6c62 6465 4100 616e     eady enabled.Ana
 808e390:	6f6c 2067 6572 6461 6e69 2067 666f 6f20     log reading of o
 808e3a0:	6f7a 656e 6e20 776f 6520 616e 6c62 6465     zone now enabled
 808e3b0:	4400 6769 7469 6c61 7220 6165 6964 676e     .Digital reading
 808e3c0:	6f20 2066 7a6f 6e6f 2065 6c61 6572 6461      of ozone alread
 808e3d0:	2079 6e65 6261 656c 0064 6944 6967 6174     y enabled.Digita
 808e3e0:	206c 6572 6461 6e69 2067 666f 6f20 6f7a     l reading of ozo
 808e3f0:	656e 6e20 776f 6520 616e 6c62 6465 4f00     ne now enabled.O
 808e400:	7475 7570 7474 6e69 2067 5047 2053 6f63     utputting GPS co
 808e410:	746e 6e69 6f75 7375 796c 4200 7461 6574     ntinuously.Batte
 808e420:	7972 7420 7268 7365 6f68 646c 6120 726c     ry threshold alr
 808e430:	6165 7964 6520 616e 6c62 6465 4500 616e     eady enabled.Ena
 808e440:	6c62 6e69 2067 6162 7474 7265 2079 6874     bling battery th
 808e450:	6572 6873 6c6f 2064 696c 696d 6974 676e     reshold limiting
 808e460:	4200 7461 6574 7972 7420 7268 7365 6f68     .Battery thresho
 808e470:	646c 6120 726c 6165 7964 6420 7369 6261     ld already disab
 808e480:	656c 0064 6944 6173 6c62 6e69 2067 6162     led.Disabling ba
 808e490:	7474 7265 2079 6874 6572 6873 6c6f 2064     ttery threshold 
 808e4a0:	696c 696d 6974 676e 4500 616e 6c62 6e69     limiting.Enablin
 808e4b0:	2067 6f6c 2077 6f70 6577 2072 6f66 2072     g low power for 
 808e4c0:	7067 0073 7554 6e72 6e69 2067 666f 2066     gps.Turning off 
 808e4d0:	6162 6674 7465 4100 6c6c 776f 6e69 2067     batfet.Allowing 
 808e4e0:	6162 6674 7465 7420 206f 7574 6e72 6f20     batfet to turn o
 808e4f0:	006e 6944 6173 6c62 6e69 2067 4241 2043     n.Disabling ABC 
 808e500:	6f6c 6967 2063 6f66 2072 4f43 2032 6573     logic for CO2 se
 808e510:	736e 726f 4100 4342 6c20 676f 6369 6120     nsor.ABC logic a
 808e520:	726c 6165 7964 6420 7369 6261 656c 0064     lready disabled.
 808e530:	6e45 6261 696c 676e 6120 6362 6c20 676f     Enabling abc log
 808e540:	6369 6620 726f 4320 324f 7320 6e65 6f73     ic for CO2 senso
 808e550:	0072 4241 2043 6f6c 6967 2063 6c61 6572     r.ABC logic alre
 808e560:	6461 2079 6e65 6261 656c 0064 6e45 6261     ady enabled.Enab
 808e570:	696c 676e 4820 4849 3138 3032 5220 2048     ling HIH8120 RH 
 808e580:	6573 736e 726f 4400 7369 6261 696c 676e     sensor.Disabling
 808e590:	4820 4849 3138 3032 5220 2048 6573 736e      HIH8120 RH sens
 808e5a0:	726f 4e00 776f 7220 6165 6964 676e 4320     or.Now reading C
 808e5b0:	204f 7266 6d6f 5520 3032 412d 706c 6168     O from U20-Alpha
 808e5c0:	0032 6f4e 2077 6572 6461 6e69 2067 4f43     2.Now reading CO
 808e5d0:	6620 6f72 206d 3155 2d39 6c41 6870 3161      from U19-Alpha1
 808e5e0:	5200 7365 7465 6e69 2067 6874 2065 4f43     .Reseting the CO
 808e5f0:	2032 6573 736e 726f 4400 7369 6261 696c     2 sensor.Disabli
 808e600:	676e 6720 6f6f 6c67 2065 6f6c 6163 6974     ng google locati
 808e610:	6e6f 7320 7265 6976 6563 2e73 4500 616e     on services..Ena
 808e620:	6c62 6e69 2067 6f67 676f 656c 6c20 636f     bling google loc
 808e630:	7461 6f69 206e 6573 7672 6369 7365 002e     ation services..
 808e640:	6547 7474 6e69 2067 6563 6c6c 6c75 7261     Getting cellular
 808e650:	6920 666e 726f 616d 6974 6e6f 202c 6874      information, th
 808e660:	7369 6d20 7961 7420 6b61 2065 2061 6877     is may take a wh
 808e670:	6c69 2e65 2e2e 4900 454d 3d49 7325 4900     ile....IMEI=%s.I
 808e680:	534d 3d49 7325 4900 4343 4449 253d 0073     MSI=%s.ICCID=%s.
 808e690:	5041 2050 6556 7372 6f69 3a6e 0020 6e45     APP Version: .En
 808e6a0:	6261 696c 676e 4f20 6f7a 656e 4f00 6f7a     abling Ozone.Ozo
 808e6b0:	656e 6120 726c 6165 7964 6520 616e 6c62     ne already enabl
 808e6c0:	6465 4400 7369 6261 696c 676e 4f20 6f7a     ed.Disabling Ozo
 808e6d0:	656e 4f00 6f7a 656e 6120 726c 6165 7964     ne.Ozone already
 808e6e0:	6420 7369 6261 656c 0064 6e45 6261 696c      disabled.Enabli
 808e6f0:	676e 5620 434f 0073 4f56 7343 6120 726c     ng VOCs.VOCs alr
 808e700:	6165 7964 6520 616e 6c62 6465 4400 7369     eady enabled.Dis
 808e710:	6261 696c 676e 5620 434f 7327 5600 434f     abling VOC's.VOC
 808e720:	7327 6120 726c 6165 7964 6420 7369 6261     's already disab
 808e730:	656c 0064 6146 6c75 3a74 0020 7953 7473     led.Fault: .Syst
 808e740:	6d65 7320 6174 7574 3a73 0020 754f 7074     em status: .Outp
 808e750:	7475 6974 676e 5620 434f 2073 6f63 746e     utting VOCs cont
 808e760:	6e69 6f75 7375 796c 2021 5020 6572 7373     inuously!  Press
 808e770:	6120 796e 6220 7475 6f74 206e 6f74 6520      any button to e
 808e780:	6978 2e74 2e2e 4600 6961 656c 2064 6f74     xit....Failed to
 808e790:	7220 6165 2064 4d42 3645 3038 5400 6f56      read BME680.TVo
 808e7a0:	7363 253d 2e31 6630 202c 6554 706d 253d     cs=%1.0f, Temp=%
 808e7b0:	2e31 6631 202c 7270 7365 3d73 3125 312e     1.1f, press=%1.1
 808e7c0:	2c66 7220 3d68 3125 312e 0a66 000d 6944     f, rh=%1.1f...Di
 808e7d0:	6173 6c62 6e69 2067 6573 736e 6269 656c     sabling sensible
 808e7e0:	6920 746f 6420 7461 2061 7570 6873 002e      iot data push..
 808e7f0:	6944 6173 6c62 6e69 2067 6163 2072 6f74     Disabling car to
 808e800:	7070 7265 7020 776f 7265 202e 0020 6e45     pper power.  .En
 808e810:	6261 696c 676e 6320 7261 7420 706f 6570     abling car toppe
 808e820:	2072 6f70 6577 2e72 2020 6649 6e20 206f     r power.  If no 
 808e830:	7865 6574 6e72 6c61 7020 776f 7265 202c     external power, 
 808e840:	7973 7473 6d65 7720 6c69 206c 7574 6e72     system will turn
 808e850:	6f20 6666 002e 7845 7469 6e69 2067 6573      off..Exiting se
 808e860:	6972 6c61 6d20 6e65 2e75 2e2e 4900 636e     rial menu....Inc
 808e870:	6d6f 6e69 2067 7962 6574 003a 6f43 6e6e     oming byte:.Conn
 808e880:	6365 6974 676e 7420 206f 6563 6c6c 6c75     ecting to cellul
 808e890:	7261 6e20 7465 6f77 6b72 6100 7466 7265     ar network.after
 808e8a0:	6320 6c65 756c 616c 4f72 006e 6641 6574      cellularOn.Afte
 808e8b0:	2072 6563 6c6c 6c75 7261 6e4f 4100 7466     r cellularOn.Aft
 808e8c0:	7265 7020 7261 6974 6c63 2065 6f63 6e6e     er particle conn
 808e8d0:	6365 0074 6573 7474 6e69 2067 7274 6569     ect.setting trie
 808e8e0:	5f64 6563 6c6c 6c75 7261 635f 6e6f 656e     d_cellular_conne
 808e8f0:	7463 7420 206f 6166 736c 0065 6944 6373     ct to false.Disc
 808e900:	6e6f 656e 7463 6e69 2067 7266 6d6f 6320     onnecting from c
 808e910:	6c65 756c 616c 2072 656e 7774 726f 006b     ellular network.
 808e920:	6f47 6e69 2067 6f74 7320 656c 7065 6220     Going to sleep b
 808e930:	6365 7561 6573 6220 7461 6574 7972 6920     ecause battery i
 808e940:	2073 6562 6f6c 2077 3032 2025 6863 7261     s below 20% char
 808e950:	6567 6e00 746f 6920 696e 6974 6c61 7a69     ge.not initializ
 808e960:	6465 0000                                   ed..

0808e964 <_ZTV4File>:
	...
 808e96c:	0965 0808 0975 0808 09b5 0808 09af 0808     e...u...........
 808e97c:	0947 0808 09d9 0808 09d3 0808 09cd 0808     G...............

0808e98c <_ZTV6SdFile>:
	...
 808e994:	0963 0808 0967 0808 0a75 0808 09a9 0808     c...g...u.......

0808e9a4 <_ZTV5SdFat>:
	...
 808e9ac:	0a11 0808 0a09 0808 0a01 0808 09f9 0808     ................

0808e9bc <_ZTV12SerialBufferILj4096EE>:
	...
 808e9c4:	0961 0808 0983 0808 7065 0808 82f1 0808     a.......ep......
 808e9d4:	706d 0808 7081 0808 70bf 0808 705d 0808     mp...p...p..]p..
 808e9e4:	7055 0808 62b5 0806 0006 0064 0001 0001     Up...b....d.....
 808e9f4:	127a 62b5 1106 0002 0000 831a 62b5 1106     z..b.........b..
 808ea04:	0002 0001 831a 0000                         ........

0808ea0c <_ZTV10PowerCheck>:
	...
 808ea14:	4d65 0808 4d7d 0808 6143 696c 7262 7461     eM..}M..Calibrat
 808ea24:	6e69 2067 4f43 0032                         ing CO2.

0808ea2c <_ZTV5SdSpi>:
	...
 808ea34:	5d19 0808 5d29 0808 5d15 0808 5da1 0808     .]..)]...]...]..
 808ea44:	5dc5 0808 5db5 0808 5e09 0808               .]...]...^..

0808ea50 <_ZTV7HIH61XX>:
	...
 808ea58:	69d5 0808 69e5 0808 6b25 0808 6564 6976     .i...i..%k..devi
 808ea68:	6563 6f4c 6163 6f74 0072 5441 5426 0000     ceLocator.AT&T..

0808ea78 <_ZTV23GoogleMapsDeviceLocator>:
	...
 808ea80:	6bc1 0808 6be1 0808 5954 4550 555f 4b4e     .k...k..TYPE_UNK
 808ea90:	4f4e 4e57 5400 5059 5f45 4b4f 5400 5059     NOWN.TYPE_OK.TYP
 808eaa0:	5f45 5245 4f52 0052 5954 4550 435f 4e4f     E_ERROR.TYPE_CON
 808eab0:	454e 5443 5400 5059 5f45 4f4e 4143 5252     NECT.TYPE_NOCARR
 808eac0:	4549 0052 5954 4550 4e5f 444f 4149 544c     IER.TYPE_NODIALT
 808ead0:	4e4f 0045 5954 4550 425f 5355 0059 5954     ONE.TYPE_BUSY.TY
 808eae0:	4550 4e5f 414f 534e 4557 0052 5954 4550     PE_NOANSWER.TYPE
 808eaf0:	505f 4f52 504d 0054 5954 4550 505f 554c     _PROMPT.TYPE_PLU
 808eb00:	0053 5954 4550 415f 4f42 5452 4445 7400     S.TYPE_ABORTED.t
 808eb10:	7079 3d65 7830 7825 6300 6c65 756c 616c     ype=0x%x.cellula
 808eb20:	2072 6572 7073 6e6f 6573 7420 7079 3d65     r response type=
 808eb30:	7325 6c20 6e65 253d 0064 6e5c 5c00 0072     %s len=%d.\n.\r.
 808eb40:	7830 3025 7832 4100 2b54 4743 494d 0a0d     0x%02x.AT+CGMI..
 808eb50:	4100 2b54 4743 4e53 0a0d 4300 4943 0044     .AT+CGSN...CCID.
 808eb60:	5441 432b 4943 0d44 000a 2b0a 7325 203a     AT+CCID....+%s: 
 808eb70:	0000 0000                                   ....

0808eb74 <_ZTV28CellularHelperStringResponse>:
	...
 808eb7c:	6f95 0808                                   .o..

0808eb80 <_ZTV32CellularHelperPlusStringResponse>:
	...
 808eb88:	6fcd 0808 6573 6972 6c61 7542 6666 7265     .o..serialBuffer
 808eb98:	0000 0000                                   ....

0808eb9c <_ZTV16SerialBufferBase>:
	...
 808eba4:	70af 0808 70b1 0808 7065 0808 82f1 0808     .p...p..ep......
 808ebb4:	706d 0808 7081 0808 70bf 0808 705d 0808     mp...p...p..]p..
 808ebc4:	7055 0808                                   Up..

0808ebc8 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 808ebc8:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

0808ebd8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 808ebd8:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
 808ebe8:	766f 0066 7061 0070 005a 2b25 3330 3a64     ovf.app.Z.%+03d:
 808ebf8:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 808ec08:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 808ec18:	0000 0000                                   ....

0808ec1c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 808ec24:	8cf9 0808 8cff 0808 8d3d 0808 8d0d 0808     ........=.......
 808ec34:	8cfb 0808                                   ....

0808ec38 <_ZTV9IPAddress>:
	...
 808ec40:	9291 0808 9281 0808 9283 0808               ............

0808ec4c <_ZTV9USBSerial>:
	...
 808ec54:	9325 0808 938b 0808 9363 0808 82f1 0808     %.......c.......
 808ec64:	9355 0808 9327 0808 9337 0808 9385 0808     U...'...7.......
 808ec74:	9347 0808 9321 0808                         G...!...

0808ec7c <_ZTVN5spark13CellularClassE>:
	...
 808ec84:	954f 0808 9545 0808 953b 0808 94c1 0808     O...E...;.......
 808ec94:	952f 0808 0aa9 0808 9523 0808 951b 0808     /.......#.......
 808eca4:	9511 0808 9507 0808 94cb 0808               ............

0808ecb0 <_ZTV11USARTSerial>:
	...
 808ecb8:	0941 0808 0ab5 0808 95cb 0808 82f1 0808     A...............
 808ecc8:	959b 0808 95b7 0808 95a9 0808 95c5 0808     ................
 808ecd8:	9589 0808 958d 0808                         ........

0808ece0 <_ZTV7TwoWire>:
	...
 808ece8:	96a9 0808 96f3 0808 96cb 0808 96ab 0808     ................
 808ecf8:	96d3 0808 96db 0808 96e3 0808 96eb 0808     ................

0808ed08 <_ZTVN5spark12NetworkClassE>:
	...
 808ed10:	9801 0808 980b 0808 9815 0808 981f 0808     ................
 808ed20:	9829 0808 9835 0808 9841 0808 984d 0808     )...5...A...M...
 808ed30:	9855 0808 985f 0808 9869 0808               U..._...i...

0808ed3c <_ZSt7nothrow>:
 808ed3c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 808ed4c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

0808ed5d <day_name.4782>:
 808ed5d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808ed6d:	6972 6153                                    riSat

0808ed72 <mon_name.4783>:
 808ed72:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 808ed82:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 808ed92:	4476 6365 6e69 7469 0079                    vDecinity.

0808ed9c <fpi.6203>:
 808ed9c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 808edac:	0000 0000                                   ....

0808edb0 <fpinan.6239>:
 808edb0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

0808edc8 <tinytens>:
 808edc8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 808edd8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 808ede8:	6f43 64ac 0628 1168                         Co.d(.h.

0808edf0 <_ctype_>:
 808edf0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808ee00:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808ee10:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 808ee20:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 808ee30:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 808ee40:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 808ee50:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 808ee60:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 808ee70:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0808eef4 <_C_numeric_locale>:
 808eef4:	e675 0808 eb69 0808 013c 2000 4f50 4953     u...i...<.. POSI
 808ef04:	0058 0000                                   X...

0808ef08 <__mprec_bigtens>:
 808ef08:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 808ef18:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 808ef28:	bf3c 7f73 4fdd 7515                         <.s..O.u

0808ef30 <__mprec_tens>:
 808ef30:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 808ef40:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 808ef50:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 808ef60:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 808ef70:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 808ef80:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 808ef90:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 808efa0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 808efb0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 808efc0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 808efd0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 808efe0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 808eff0:	9db4 79d9 7843 44ea                         ...yCx.D

0808eff8 <p05.6127>:
 808eff8:	0005 0000 0019 0000 007d 0000               ........}...

0808f004 <link_const_variable_data_end>:
 808f004:	08084a21 	.word	0x08084a21
 808f008:	08085e5d 	.word	0x08085e5d
 808f00c:	08086c55 	.word	0x08086c55
 808f010:	08087c35 	.word	0x08087c35
 808f014:	08088655 	.word	0x08088655
 808f018:	08088a15 	.word	0x08088a15
 808f01c:	08088a61 	.word	0x08088a61
 808f020:	08089559 	.word	0x08089559
 808f024:	080898b1 	.word	0x080898b1
 808f028:	08089a01 	.word	0x08089a01

0808f02c <link_constructors_end>:
 808f02c:	00000000 	.word	0x00000000
